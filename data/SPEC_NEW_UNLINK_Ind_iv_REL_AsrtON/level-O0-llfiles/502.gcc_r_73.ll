; ModuleID = 'gimple.c'
source_filename = "gimple.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.rtx_def = type opaque
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type opaque
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type opaque
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_d* }
%struct.gimple_seq_node_d = type { %union.gimple_statement_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d* }
%union.gimple_statement_d = type { %struct.gimple_statement_phi }
%struct.gimple_statement_phi = type { %struct.gimple_statement_base, i32, i32, %union.tree_node*, [1 x %struct.phi_arg_d] }
%struct.gimple_statement_base = type { i32, i32, i32, i32, %struct.basic_block_def*, %union.tree_node* }
%struct.phi_arg_d = type { %struct.ssa_use_operand_d, %union.tree_node*, i32 }
%struct.ssa_use_operand_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %union.anon, %union.tree_node** }
%union.anon = type { %union.gimple_statement_d* }
%struct.gimple_df = type { %struct.htab*, %struct.VEC_gimple_gc*, %struct.VEC_tree_gc*, %union.tree_node*, %struct.pt_solution, %struct.pt_solution, %struct.pointer_map_t*, %union.tree_node*, %struct.htab*, %struct.bitmap_head_def*, i8, %struct.ssa_operands }
%struct.VEC_gimple_gc = type { %struct.VEC_gimple_base }
%struct.VEC_gimple_base = type { i32, i32, [1 x %union.gimple_statement_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%struct.pt_solution = type { i8, %struct.bitmap_head_def* }
%struct.pointer_map_t = type opaque
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.ssa_operands = type { %struct.ssa_operand_memory_d*, i32, i32, i8, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.ssa_operand_memory_d = type { %struct.ssa_operand_memory_d*, [1 x i8] }
%struct.def_optype_d = type { %struct.def_optype_d*, %union.tree_node** }
%struct.use_optype_d = type { %struct.use_optype_d*, %struct.ssa_use_operand_d }
%struct.loops = type opaque
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.ggc_root_tab = type { i8*, i64, i64, void (i8*)*, void (i8*)* }
%struct.gcc_target = type { %struct.asm_out, %struct.sched, %struct.vectorize, i32, void ()*, i8 (i64, i8*, i32)*, void ()*, i32 ()*, i32 ()*, i32 ()*, i32 ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %struct.attribute_spec*, i32 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void ()*, %union.tree_node* (i32, i8)*, %struct.rtx_def* (%union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32)*, %union.tree_node* (i32, %union.tree_node*, i8*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, i8)*, %union.tree_node* (i32, i8, i8)*, i8* (%union.tree_node*)*, void ()*, i32 (%union.tree_node*, i8*, i32)*, i8 ()*, i32 ()*, i8 (i8)*, i8 ()*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, i8 (i32, %struct.rtx_def*, i8)*, i8 (i32, %struct.rtx_def*)*, i64, i64, i8 (%struct.rtx_def*)*, i8 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*, i32)*, i8* (i8*)*, i64 (i32)*, i32 (i32)*, i32 (i32, i32)*, i8 (i32)*, %struct.addr_space, i8 (i32)*, i8 (i32)*, i8 (%struct.rtx_def*, i32, i32, i32*, i8)*, i32 (%struct.rtx_def*, i8)*, %struct.rtx_def* (%struct.rtx_def*)*, i32 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, void (%union.tree_node*)*, i8 (i32*, i32*)*, i32 (i32, i32)*, void ()*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, i8* (i64*)*, i8* (i8*, i64)*, i8* (i32)*, i8 ()*, %struct.rtx_def* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i32 (%union.tree_node*)*, void (i8*, %struct.rtx_def*, i32)*, i8 (%struct.stdarg_info*, %union.gimple_statement_d*)*, %union.tree_node* ()*, %union.tree_node* ()*, i8* (%struct.rtx_def*)*, i8 (%union.tree_node*)*, i64, %struct.calls, i8* (%union.tree_node*, %union.tree_node*)*, i8* (i32, %union.tree_node*)*, i8* (i32, %union.tree_node*, %union.tree_node*)*, i8* (%union.tree_node*)*, i8* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i32* ()*, i32 (i8, %struct.rtx_def*, i32, i32, %struct.secondary_reload_info*)*, void ()*, void ()*, i8 (i32)*, i32 ()*, i8 ()*, i8 (i32, i32)*, %struct.c, %struct.cxx, %struct.emutls, %struct.target_option_hooks, void (%struct.bitmap_head_def*)*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.asm_out = type { i8*, i8*, i8*, %struct.asm_int_op, %struct.asm_int_op, i8 (%struct.rtx_def*, i32, i32)*, void (%struct._IO_FILE*, i8*)*, void (%struct._IO_FILE*, %union.tree_node*)*, void (%struct._IO_FILE*, %union.tree_node*, i32, i32)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, %struct.rtx_def*)*, void (%struct._IO_FILE*, i8*, i64)*, i8 (%struct.rtx_def*)*, void (%union.tree_node*, i32)*, void (%struct._IO_FILE*, i64)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, i64)*, void ()*, void (i8*, i32, %union.tree_node*)*, i32 ()*, %union.section* (%union.tree_node*, i32, i64)*, %union.section* (i32, %struct.rtx_def*, i64)*, void (%union.tree_node*, i32)*, %union.section* (%union.tree_node*)*, void (%struct.rtx_def*, i32)*, void (%struct.rtx_def*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i64, i64, %union.tree_node*)*, i8 (%union.tree_node*, i64, i64, %union.tree_node*)*, void ()*, void ()*, void ()*, void (%struct.rtx_def*)*, void (i8*)*, i32 (i32, i8*)*, i8*, void (%struct.rtx_def*)*, void (%struct._IO_FILE*, i32, %struct.rtx_def*)*, void (%struct._IO_FILE*, %struct.rtx_def*, %struct.rtx_def**, i32)*, void (%struct._IO_FILE*)* }
%struct.asm_int_op = type { i8*, i8*, i8*, i8* }
%union.section = type opaque
%struct.sched = type { i32 (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)*, i32 ()*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, void (%struct.rtx_def*, %struct.rtx_def*)*, void ()*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, void ()*, void ()*, i32 ()*, i32 (%struct.rtx_def*)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32, i32, i32*)*, i8 (%struct._dep*, i32, i32)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def*, i32, i32)*, void ()*, i8* ()*, void (i8*, i8)*, void (i8*)*, void (i8*)*, void (i8*)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def**)*, i8 (i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, i8 (%struct.rtx_def*)*, void (%struct.spec_info_def*)*, i32 (%struct.rtx_def*)*, i32 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i32 (%struct.ddg*)* }
%struct._dep = type opaque
%struct.spec_info_def = type opaque
%struct.ddg = type opaque
%struct.vectorize = type { %union.tree_node* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (i32, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i32 (i8)*, i8 (%union.tree_node*, i8)*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (i32, %union.tree_node*, i32, i8)* }
%struct.attribute_spec = type { i8*, i32, i32, i8, i8, i8, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* }
%struct.addr_space = type { i32 (i8)*, i32 (i8)*, i8 (i32, i8)*, i8 (i32, %struct.rtx_def*, i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32, i8)*, i8 (i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %union.tree_node*, %union.tree_node*)* }
%struct.stdarg_info = type opaque
%struct.calls = type { i32 (%union.tree_node*, i32, i32*, %union.tree_node*, i32)*, i8 (%union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, i32)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, %struct.rtx_def* ()*, void (%struct.ix86_args*, i32, %union.tree_node*, i32*, i32)*, i8 (%struct.ix86_args*)*, i8 (%struct.ix86_args*)*, i8 (%union.tree_node*)*, i8 (i32, %union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i32 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i8* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, %union.tree_node*, i8)*, %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, i8 ()*, %struct.rtx_def* (%union.tree_node*, i8)*, void (%struct.rtx_def*, %union.tree_node*, %struct.rtx_def*)*, %struct.rtx_def* (%struct.rtx_def*)* }
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.secondary_reload_info = type { i32, i32, %struct.secondary_reload_info*, i32 }
%struct.c = type { i32 (i8)* }
%struct.cxx = type { %union.tree_node* ()*, i8 ()*, %union.tree_node* (%union.tree_node*)*, i8 ()*, i32 (%union.tree_node*, i32)*, i8 ()*, i8 ()*, void (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void (%union.tree_node*)* }
%struct.emutls = type { i8*, i8*, i8*, i8*, i8*, i8*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i8, i8 }
%struct.target_option_hooks = type { i8 (%union.tree_node*, %union.tree_node*, %union.tree_node*, i32)*, void (%struct.cl_target_option*)*, void (%struct.cl_target_option*)*, void (%struct._IO_FILE*, i32, %struct.cl_target_option*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)* }
%struct.cl_target_option = type { i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8 }
%struct.VEC_tree_heap = type { %struct.VEC_tree_base }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.tree_exp = type { %struct.tree_common, i32, %union.tree_node*, [1 x %union.tree_node*] }
%struct.tree_int_cst = type { %struct.tree_common, %struct.double_int }
%struct.double_int = type { i64, i64 }
%struct.tree_ssa_name = type { %struct.tree_common, %union.tree_node*, %union.gimple_statement_d*, i32, %struct.ptr_info_def*, %struct.ssa_use_operand_d }
%struct.ptr_info_def = type { %struct.pt_solution }
%struct.gimple_statement_bind = type { %struct.gimple_statement_base, %union.tree_node*, %union.tree_node*, %struct.gimple_seq_d* }
%struct.gimple_statement_asm = type { %struct.gimple_statement_with_memory_ops_base, i8*, i8, i8, i8, i8, [1 x %union.tree_node*] }
%struct.gimple_statement_with_memory_ops_base = type { %struct.gimple_statement_with_ops_base, %union.tree_node*, %union.tree_node* }
%struct.gimple_statement_with_ops_base = type { %struct.gimple_statement_base, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.gimple_statement_catch = type { %struct.gimple_statement_base, %union.tree_node*, %struct.gimple_seq_d* }
%struct.gimple_statement_eh_filter = type { %struct.gimple_statement_base, %union.tree_node*, %struct.gimple_seq_d* }
%struct.gimple_statement_eh_mnt = type { %struct.gimple_statement_base, %union.tree_node* }
%struct.gimple_statement_try = type { %struct.gimple_statement_base, %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.gimple_statement_wce = type { %struct.gimple_statement_base, %struct.gimple_seq_d* }
%struct.gimple_statement_eh_ctrl = type { %struct.gimple_statement_base, i32 }
%struct.gimple_statement_omp_critical = type { %struct.gimple_statement_omp, %union.tree_node* }
%struct.gimple_statement_omp = type { %struct.gimple_statement_base, %struct.gimple_seq_d* }
%struct.gimple_statement_omp_for = type { %struct.gimple_statement_omp, %union.tree_node*, i64, %struct.gimple_omp_for_iter*, %struct.gimple_seq_d* }
%struct.gimple_omp_for_iter = type { i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.gimple_statement_omp_parallel = type { %struct.gimple_statement_omp, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.gimple_statement_omp_task = type { %struct.gimple_statement_omp_parallel, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.gimple_statement_omp_continue = type { %struct.gimple_statement_base, %union.tree_node*, %union.tree_node* }
%struct.gimple_statement_omp_sections = type { %struct.gimple_statement_omp, %union.tree_node*, %union.tree_node* }
%struct.gimple_statement_omp_single = type { %struct.gimple_statement_omp, %union.tree_node* }
%struct.gimple_statement_omp_atomic_load = type { %struct.gimple_statement_base, %union.tree_node*, %union.tree_node* }
%struct.gimple_statement_omp_atomic_store = type { %struct.gimple_statement_base, %union.tree_node* }
%struct.gimple_stmt_iterator = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_d*, %struct.basic_block_def* }
%struct.walk_stmt_info = type { %struct.gimple_stmt_iterator, i8*, %struct.pointer_set_t*, i8, i8, i8, i8, %union.tree_node* }
%struct.pointer_set_t = type opaque
%struct.tree_list = type { %struct.tree_common, %union.tree_node*, %union.tree_node* }
%struct.tree_string = type { %struct.tree_common, i32, [1 x i8] }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_type_symtab, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_type* }
%union.tree_type_symtab = type { i8* }
%struct.lang_type = type opaque
%struct.tree_label_decl = type { %struct.tree_decl_with_rtl, i32, i32 }
%struct.gimple_statement_with_ops = type { %struct.gimple_statement_with_ops_base, [1 x %union.tree_node*] }
%struct.tree_field_decl = type { %struct.tree_decl_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.ssa_operand_iterator_d = type { i8, i32, %struct.def_optype_d*, %struct.use_optype_d*, i32, i32, %union.gimple_statement_d* }
%struct.count_ptr_d = type { %union.tree_node*, i32, i32 }
%struct.tree_identifier = type { %struct.tree_common, %struct.ht_identifier }
%struct.ht_identifier = type { i8*, i32, i32 }
%struct.tree_binfo = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.VEC_tree_gc*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.VEC_tree_none }
%struct.VEC_tree_none = type { %struct.VEC_tree_base }
%struct.cgraph_node = type { %union.tree_node*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.htab*, i8*, %struct.VEC_ipa_opt_pass_heap*, %struct.cgraph_local_info, %struct.cgraph_global_info, %struct.cgraph_rtl_info, %struct.cgraph_clone_info, %struct.cgraph_thunk_info, i64, i32, i32, i32, i16 }
%struct.cgraph_edge = type { i64, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_edge*, %union.gimple_statement_d*, i8*, i32, i32, i32, i32, i16, i8 }
%struct.VEC_ipa_opt_pass_heap = type { %struct.VEC_ipa_opt_pass_base }
%struct.VEC_ipa_opt_pass_base = type { i32, i32, [1 x %struct.ipa_opt_pass_d*] }
%struct.ipa_opt_pass_d = type opaque
%struct.cgraph_local_info = type { %struct.lto_file_decl_data*, %struct.inline_summary, i8 }
%struct.lto_file_decl_data = type opaque
%struct.inline_summary = type { i64, i32, i32, i32, i32 }
%struct.cgraph_global_info = type { i64, i64, %struct.cgraph_node*, i32, i32, i32, i8 }
%struct.cgraph_rtl_info = type { i32 }
%struct.cgraph_clone_info = type { %struct.VEC_ipa_replace_map_p_gc*, %struct.bitmap_head_def*, %struct.bitmap_head_def* }
%struct.VEC_ipa_replace_map_p_gc = type { %struct.VEC_ipa_replace_map_p_base }
%struct.VEC_ipa_replace_map_p_base = type { i32, i32, [1 x %struct.ipa_replace_map*] }
%struct.ipa_replace_map = type { %union.tree_node*, %union.tree_node*, i8, i8 }
%struct.cgraph_thunk_info = type { i64, i64, %union.tree_node*, i8, i8, i8 }
%struct.sccs = type { i32, i32, i8, i32 }
%struct.type_pair_d = type { i32, i32, i32 }

@gimple_ops_offset_ = dso_local constant <{ i64, i64, i64, i64, i64, [18 x i64] }> <{ i64 0, i64 48, i64 0, i64 64, i64 80, [18 x i64] zeroinitializer }>, align 16, !dbg !0
@.str = private unnamed_addr constant [18 x i8] c"gimple_error_mark\00", align 1
@.str.1 = private unnamed_addr constant [12 x i8] c"gimple_cond\00", align 1
@.str.2 = private unnamed_addr constant [13 x i8] c"gimple_debug\00", align 1
@.str.3 = private unnamed_addr constant [12 x i8] c"gimple_goto\00", align 1
@.str.4 = private unnamed_addr constant [13 x i8] c"gimple_label\00", align 1
@.str.5 = private unnamed_addr constant [14 x i8] c"gimple_switch\00", align 1
@.str.6 = private unnamed_addr constant [14 x i8] c"gimple_assign\00", align 1
@.str.7 = private unnamed_addr constant [11 x i8] c"gimple_asm\00", align 1
@.str.8 = private unnamed_addr constant [12 x i8] c"gimple_call\00", align 1
@.str.9 = private unnamed_addr constant [14 x i8] c"gimple_return\00", align 1
@.str.10 = private unnamed_addr constant [12 x i8] c"gimple_bind\00", align 1
@.str.11 = private unnamed_addr constant [13 x i8] c"gimple_catch\00", align 1
@.str.12 = private unnamed_addr constant [17 x i8] c"gimple_eh_filter\00", align 1
@.str.13 = private unnamed_addr constant [25 x i8] c"gimple_eh_must_not_throw\00", align 1
@.str.14 = private unnamed_addr constant [12 x i8] c"gimple_resx\00", align 1
@.str.15 = private unnamed_addr constant [19 x i8] c"gimple_eh_dispatch\00", align 1
@.str.16 = private unnamed_addr constant [11 x i8] c"gimple_phi\00", align 1
@.str.17 = private unnamed_addr constant [11 x i8] c"gimple_try\00", align 1
@.str.18 = private unnamed_addr constant [11 x i8] c"gimple_nop\00", align 1
@.str.19 = private unnamed_addr constant [23 x i8] c"gimple_omp_atomic_load\00", align 1
@.str.20 = private unnamed_addr constant [24 x i8] c"gimple_omp_atomic_store\00", align 1
@.str.21 = private unnamed_addr constant [20 x i8] c"gimple_omp_continue\00", align 1
@.str.22 = private unnamed_addr constant [20 x i8] c"gimple_omp_critical\00", align 1
@.str.23 = private unnamed_addr constant [15 x i8] c"gimple_omp_for\00", align 1
@.str.24 = private unnamed_addr constant [18 x i8] c"gimple_omp_master\00", align 1
@.str.25 = private unnamed_addr constant [19 x i8] c"gimple_omp_ordered\00", align 1
@.str.26 = private unnamed_addr constant [20 x i8] c"gimple_omp_parallel\00", align 1
@.str.27 = private unnamed_addr constant [16 x i8] c"gimple_omp_task\00", align 1
@.str.28 = private unnamed_addr constant [18 x i8] c"gimple_omp_return\00", align 1
@.str.29 = private unnamed_addr constant [19 x i8] c"gimple_omp_section\00", align 1
@.str.30 = private unnamed_addr constant [20 x i8] c"gimple_omp_sections\00", align 1
@.str.31 = private unnamed_addr constant [27 x i8] c"gimple_omp_sections_switch\00", align 1
@.str.32 = private unnamed_addr constant [18 x i8] c"gimple_omp_single\00", align 1
@.str.33 = private unnamed_addr constant [15 x i8] c"gimple_predict\00", align 1
@.str.34 = private unnamed_addr constant [25 x i8] c"gimple_with_cleanup_expr\00", align 1
@gimple_code_name = dso_local constant [35 x i8*] [i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.24, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.26, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.30, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.31, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.32, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.34, i32 0, i32 0)], align 16, !dbg !1831
@gss_for_code_ = dso_local constant [35 x i32] [i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 3, i32 4, i32 3, i32 3, i32 5, i32 8, i32 9, i32 10, i32 11, i32 11, i32 6, i32 7, i32 0, i32 21, i32 22, i32 20, i32 14, i32 15, i32 13, i32 13, i32 16, i32 17, i32 0, i32 13, i32 18, i32 0, i32 19, i32 0, i32 12], align 16, !dbg !1837
@.str.35 = private unnamed_addr constant [9 x i8] c"gimple.c\00", align 1
@.str.36 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@tree_code_type = external dso_local constant [0 x i32], align 4
@global_trees = external dso_local global [131 x %union.tree_node*], align 16
@gimple_seq_cache = internal global %struct.gimple_seq_d* null, align 8, !dbg !1868
@input_location = external dso_local global i32, align 4
@cfun = external dso_local global %struct.function*, align 8
@flag_var_tracking_assignments = external dso_local global i32, align 4
@stderr = external dso_local global %struct._IO_FILE*, align 8
@.str.37 = private unnamed_addr constant [22 x i8] c"No gimple statistics\0A\00", align 1
@gimple_rhs_class_table = dso_local constant [191 x i8] calign 16, !dbg !1841
@gimple_types = internal global %struct.htab* null, align 8, !dbg !1860
@.str.38 = private unnamed_addr constant [85 x i8] c"GIMPLE type table: size %ld, %ld elements, %ld searches, %ld collisions (ratio: %f)\0A\00", align 1
@.str.39 = private unnamed_addr constant [28 x i8] c"GIMPLE type table is empty\0A\00", align 1
@gtc_visited = internal global %struct.htab* null, align 8, !dbg !1864
@.str.40 = private unnamed_addr constant [96 x i8] c"GIMPLE type comparison table: size %ld, %ld elements, %ld searches, %ld collisions (ratio: %f)\0A\00", align 1
@.str.41 = private unnamed_addr constant [39 x i8] c"GIMPLE type comparison table is empty\0A\00", align 1
@flag_lto_report = external dso_local global i32, align 4
@type_hash_cache = internal global %struct.pointer_map_t* null, align 8, !dbg !1862
@gtc_ob = internal global %struct.obstack zeroinitializer, align 8, !dbg !1866
@integer_types = external dso_local global [11 x %union.tree_node*], align 16
@tree_contains_struct = external dso_local global [191 x [64 x i8]], align 16
@gt_ggc_rd_gt_gimple_h = dso_local constant [2 x %struct.ggc_root_tab] [%struct.ggc_root_tab { i8* bitcast (%struct.gimple_seq_d** @gimple_seq_cache to i8*), i64 1, i64 8, void (i8*)* null, void (i8*)* null }, %struct.ggc_root_tab zeroinitializer], align 16, !dbg !1846
@gsstruct_code_size = internal constant [23 x i64] [i64 32, i64 56, i64 64, i64 72, i64 88, i64 56, i64 96, i64 48, i64 48, i64 48, i64 40, i64 40, i64 40, i64 40, i64 48, i64 72, i64 64, i64 88, i64 56, i64 48, i64 48, i64 48, i64 40], align 16, !dbg !1870
@.str.42 = private unnamed_addr constant [11 x i8] c"./gimple.h\00", align 1
@flag_trapv = external dso_local global i32, align 4
@tree_code_length = external dso_local constant [0 x i8], align 1
@next_dfs_num = internal global i32 0, align 4, !dbg !1876
@targetm = external dso_local global %struct.gcc_target, align 8
@.str.43 = private unnamed_addr constant [21 x i8] c"./tree-flow-inline.h\00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_alloc_stat(i32 %code, i32 %num_ops) #0 !dbg !1882 {
entry:
  %code.addr = alloca i32, align 4
  %num_ops.addr = alloca i32, align 4
  %size = alloca i64, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !1886, metadata !DIExpression()), !dbg !1887
  store i32 %num_ops, i32* %num_ops.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %num_ops.addr, metadata !1888, metadata !DIExpression()), !dbg !1889
  call void @llvm.dbg.declare(metadata i64* %size, metadata !1890, metadata !DIExpression()), !dbg !1891
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !1892, metadata !DIExpression()), !dbg !1893
  %0 = load i32, i32* %code.addr, align 4, !dbg !1894
  %call = call i64 @gimple_size(i32 %0), !dbg !1895
  store i64 %call, i64* %size, align 8, !dbg !1896
  %1 = load i32, i32* %num_ops.addr, align 4, !dbg !1897
  %cmp = icmp ugt i32 %1, 0, !dbg !1899
  br i1 %cmp, label %if.then, label %if.end, !dbg !1900

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %num_ops.addr, align 4, !dbg !1901
  %sub = sub i32 %2, 1, !dbg !1902
  %conv = zext i32 %sub to i64, !dbg !1903
  %mul = mul i64 8, %conv, !dbg !1904
  %3 = load i64, i64* %size, align 8, !dbg !1905
  %add = add i64 %3, %mul, !dbg !1905
  store i64 %add, i64* %size, align 8, !dbg !1905
  br label %if.end, !dbg !1906

if.end:                                           ; preds = %if.then, %entry
  %4 = load i64, i64* %size, align 8, !dbg !1907
  %call1 = call i8* @ggc_alloc_cleared_stat(i64 %4), !dbg !1908
  %5 = bitcast i8* %call1 to %union.gimple_statement_d*, !dbg !1909
  store %union.gimple_statement_d* %5, %union.gimple_statement_d** %stmt, align 8, !dbg !1910
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !1911
  %7 = load i32, i32* %code.addr, align 4, !dbg !1912
  call void @gimple_set_code(%union.gimple_statement_d* %6, i32 %7), !dbg !1913
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !1914
  %9 = load i32, i32* %num_ops.addr, align 4, !dbg !1915
  call void @gimple_set_num_ops(%union.gimple_statement_d* %8, i32 %9), !dbg !1916
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !1917
  %gsbase = bitcast %union.gimple_statement_d* %10 to %struct.gimple_statement_base*, !dbg !1918
  %11 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !1919
  %bf.load = load i32, i32* %11, align 8, !dbg !1920
  %bf.clear = and i32 %bf.load, -8193, !dbg !1920
  %bf.set = or i32 %bf.clear, 8192, !dbg !1920
  store i32 %bf.set, i32* %11, align 8, !dbg !1920
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !1921
  ret %union.gimple_statement_d* %12, !dbg !1922
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind uwtable
define internal i64 @gimple_size(i32 %code) #0 !dbg !1923 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !1926, metadata !DIExpression()), !dbg !1927
  %0 = load i32, i32* %code.addr, align 4, !dbg !1928
  %call = call i32 @gss_for_code(i32 %0), !dbg !1929
  %idxprom = zext i32 %call to i64, !dbg !1930
  %arrayidx = getelementptr inbounds [23 x i64], [23 x i64]* @gsstruct_code_size, i64 0, i64 %idxprom, !dbg !1930
  %1 = load i64, i64* %arrayidx, align 8, !dbg !1930
  ret i64 %1, !dbg !1931
}

declare dso_local i8* @ggc_alloc_cleared_stat(i64) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_code(%union.gimple_statement_d* %g, i32 %code) #0 !dbg !1932 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  %code.addr = alloca i32, align 4
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !1935, metadata !DIExpression()), !dbg !1936
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !1937, metadata !DIExpression()), !dbg !1938
  %0 = load i32, i32* %code.addr, align 4, !dbg !1939
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !1940
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !1941
  %2 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !1942
  %bf.load = load i32, i32* %2, align 8, !dbg !1943
  %bf.value = and i32 %0, 255, !dbg !1943
  %bf.clear = and i32 %bf.load, -256, !dbg !1943
  %bf.set = or i32 %bf.clear, %bf.value, !dbg !1943
  store i32 %bf.set, i32* %2, align 8, !dbg !1943
  ret void, !dbg !1944
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_num_ops(%union.gimple_statement_d* %gs, i32 %num_ops) #0 !dbg !1945 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %num_ops.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !1948, metadata !DIExpression()), !dbg !1949
  store i32 %num_ops, i32* %num_ops.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %num_ops.addr, metadata !1950, metadata !DIExpression()), !dbg !1951
  %0 = load i32, i32* %num_ops.addr, align 4, !dbg !1952
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !1953
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !1954
  %num_ops1 = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 3, !dbg !1955
  store i32 %0, i32* %num_ops1, align 4, !dbg !1956
  ret void, !dbg !1957
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_return(%union.tree_node* %retval1) #0 !dbg !1958 {
entry:
  %retval.addr = alloca %union.tree_node*, align 8
  %s = alloca %union.gimple_statement_d*, align 8
  store %union.tree_node* %retval1, %union.tree_node** %retval.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %retval.addr, metadata !1961, metadata !DIExpression()), !dbg !1962
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s, metadata !1963, metadata !DIExpression()), !dbg !1964
  %call = call %union.gimple_statement_d* @gimple_build_with_ops_stat(i32 9, i32 0, i32 1), !dbg !1965
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %s, align 8, !dbg !1964
  %0 = load %union.tree_node*, %union.tree_node** %retval.addr, align 8, !dbg !1966
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !1966
  br i1 %tobool, label %if.then, label %if.end, !dbg !1968

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s, align 8, !dbg !1969
  %2 = load %union.tree_node*, %union.tree_node** %retval.addr, align 8, !dbg !1970
  call void @gimple_return_set_retval(%union.gimple_statement_d* %1, %union.tree_node* %2), !dbg !1971
  br label %if.end, !dbg !1971

if.end:                                           ; preds = %if.then, %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s, align 8, !dbg !1972
  ret %union.gimple_statement_d* %3, !dbg !1973
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @gimple_build_with_ops_stat(i32 %code, i32 %subcode, i32 %num_ops) #0 !dbg !1974 {
entry:
  %code.addr = alloca i32, align 4
  %subcode.addr = alloca i32, align 4
  %num_ops.addr = alloca i32, align 4
  %s = alloca %union.gimple_statement_d*, align 8
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !1977, metadata !DIExpression()), !dbg !1978
  store i32 %subcode, i32* %subcode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %subcode.addr, metadata !1979, metadata !DIExpression()), !dbg !1980
  store i32 %num_ops, i32* %num_ops.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %num_ops.addr, metadata !1981, metadata !DIExpression()), !dbg !1982
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s, metadata !1983, metadata !DIExpression()), !dbg !1984
  %0 = load i32, i32* %code.addr, align 4, !dbg !1985
  %1 = load i32, i32* %num_ops.addr, align 4, !dbg !1986
  %call = call %union.gimple_statement_d* @gimple_alloc_stat(i32 %0, i32 %1), !dbg !1987
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %s, align 8, !dbg !1984
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s, align 8, !dbg !1988
  %3 = load i32, i32* %subcode.addr, align 4, !dbg !1989
  call void @gimple_set_subcode(%union.gimple_statement_d* %2, i32 %3), !dbg !1990
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s, align 8, !dbg !1991
  ret %union.gimple_statement_d* %4, !dbg !1992
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_return_set_retval(%union.gimple_statement_d* %gs, %union.tree_node* %retval) #0 !dbg !1993 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %retval.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !1996, metadata !DIExpression()), !dbg !1997
  store %union.tree_node* %retval, %union.tree_node** %retval.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %retval.addr, metadata !1998, metadata !DIExpression()), !dbg !1999
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !2000
  %1 = load %union.tree_node*, %union.tree_node** %retval.addr, align 8, !dbg !2001
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 0, %union.tree_node* %1), !dbg !2002
  ret void, !dbg !2003
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_call_vec(%union.tree_node* %fn, %struct.VEC_tree_heap* %args) #0 !dbg !2004 {
entry:
  %fn.addr = alloca %union.tree_node*, align 8
  %args.addr = alloca %struct.VEC_tree_heap*, align 8
  %i = alloca i32, align 4
  %nargs = alloca i32, align 4
  %call1 = alloca %union.gimple_statement_d*, align 8
  store %union.tree_node* %fn, %union.tree_node** %fn.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn.addr, metadata !2007, metadata !DIExpression()), !dbg !2008
  store %struct.VEC_tree_heap* %args, %struct.VEC_tree_heap** %args.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %args.addr, metadata !2009, metadata !DIExpression()), !dbg !2010
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2011, metadata !DIExpression()), !dbg !2012
  call void @llvm.dbg.declare(metadata i32* %nargs, metadata !2013, metadata !DIExpression()), !dbg !2014
  %0 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %args.addr, align 8, !dbg !2015
  %tobool = icmp ne %struct.VEC_tree_heap* %0, null, !dbg !2015
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2015

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %args.addr, align 8, !dbg !2015
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %1, i32 0, i32 0, !dbg !2015
  br label %cond.end, !dbg !2015

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2015

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2015
  %call = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond), !dbg !2015
  store i32 %call, i32* %nargs, align 4, !dbg !2014
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %call1, metadata !2016, metadata !DIExpression()), !dbg !2017
  %2 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !2018
  %3 = load i32, i32* %nargs, align 4, !dbg !2019
  %call2 = call %union.gimple_statement_d* @gimple_build_call_1(%union.tree_node* %2, i32 %3), !dbg !2020
  store %union.gimple_statement_d* %call2, %union.gimple_statement_d** %call1, align 8, !dbg !2017
  store i32 0, i32* %i, align 4, !dbg !2021
  br label %for.cond, !dbg !2023

for.cond:                                         ; preds = %for.inc, %cond.end
  %4 = load i32, i32* %i, align 4, !dbg !2024
  %5 = load i32, i32* %nargs, align 4, !dbg !2026
  %cmp = icmp ult i32 %4, %5, !dbg !2027
  br i1 %cmp, label %for.body, label %for.end, !dbg !2028

for.body:                                         ; preds = %for.cond
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call1, align 8, !dbg !2029
  %7 = load i32, i32* %i, align 4, !dbg !2030
  %8 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %args.addr, align 8, !dbg !2031
  %tobool3 = icmp ne %struct.VEC_tree_heap* %8, null, !dbg !2031
  br i1 %tobool3, label %cond.true4, label %cond.false6, !dbg !2031

cond.true4:                                       ; preds = %for.body
  %9 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %args.addr, align 8, !dbg !2031
  %base5 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %9, i32 0, i32 0, !dbg !2031
  br label %cond.end7, !dbg !2031

cond.false6:                                      ; preds = %for.body
  br label %cond.end7, !dbg !2031

cond.end7:                                        ; preds = %cond.false6, %cond.true4
  %cond8 = phi %struct.VEC_tree_base* [ %base5, %cond.true4 ], [ null, %cond.false6 ], !dbg !2031
  %10 = load i32, i32* %i, align 4, !dbg !2031
  %call9 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond8, i32 %10), !dbg !2031
  call void @gimple_call_set_arg(%union.gimple_statement_d* %6, i32 %7, %union.tree_node* %call9), !dbg !2032
  br label %for.inc, !dbg !2032

for.inc:                                          ; preds = %cond.end7
  %11 = load i32, i32* %i, align 4, !dbg !2033
  %inc = add i32 %11, 1, !dbg !2033
  store i32 %inc, i32* %i, align 4, !dbg !2033
  br label %for.cond, !dbg !2034, !llvm.loop !2035

for.end:                                          ; preds = %for.cond
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call1, align 8, !dbg !2037
  ret %union.gimple_statement_d* %12, !dbg !2038
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_length(%struct.VEC_tree_base* %vec_) #0 !dbg !2039 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !2044, metadata !DIExpression()), !dbg !2045
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !2045
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !2045
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2045

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !2045
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %1, i32 0, i32 0, !dbg !2045
  %2 = load i32, i32* %num, align 8, !dbg !2045
  br label %cond.end, !dbg !2045

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2045

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !2045
  ret i32 %cond, !dbg !2045
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @gimple_build_call_1(%union.tree_node* %fn, i32 %nargs) #0 !dbg !2046 {
entry:
  %fn.addr = alloca %union.tree_node*, align 8
  %nargs.addr = alloca i32, align 4
  %s = alloca %union.gimple_statement_d*, align 8
  store %union.tree_node* %fn, %union.tree_node** %fn.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn.addr, metadata !2049, metadata !DIExpression()), !dbg !2050
  store i32 %nargs, i32* %nargs.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %nargs.addr, metadata !2051, metadata !DIExpression()), !dbg !2052
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s, metadata !2053, metadata !DIExpression()), !dbg !2054
  %0 = load i32, i32* %nargs.addr, align 4, !dbg !2055
  %add = add i32 %0, 3, !dbg !2055
  %call = call %union.gimple_statement_d* @gimple_build_with_ops_stat(i32 8, i32 0, i32 %add), !dbg !2055
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %s, align 8, !dbg !2054
  %1 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !2056
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !2056
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !2056
  %bf.load = load i64, i64* %2, align 8, !dbg !2056
  %bf.clear = and i64 %bf.load, 65535, !dbg !2056
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !2056
  %cmp = icmp eq i32 %bf.cast, 29, !dbg !2058
  br i1 %cmp, label %if.then, label %if.end, !dbg !2059

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !2060
  %call1 = call %union.tree_node* @build_fold_addr_expr_loc(i32 0, %union.tree_node* %3), !dbg !2060
  store %union.tree_node* %call1, %union.tree_node** %fn.addr, align 8, !dbg !2061
  br label %if.end, !dbg !2062

if.end:                                           ; preds = %if.then, %entry
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s, align 8, !dbg !2063
  %5 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !2064
  call void @gimple_set_op(%union.gimple_statement_d* %4, i32 1, %union.tree_node* %5), !dbg !2065
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s, align 8, !dbg !2066
  ret %union.gimple_statement_d* %6, !dbg !2067
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_call_set_arg(%union.gimple_statement_d* %gs, i32 %index, %union.tree_node* %arg) #0 !dbg !2068 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  %arg.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !2071, metadata !DIExpression()), !dbg !2072
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !2073, metadata !DIExpression()), !dbg !2074
  store %union.tree_node* %arg, %union.tree_node** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg.addr, metadata !2075, metadata !DIExpression()), !dbg !2076
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !2077
  %1 = load i32, i32* %index.addr, align 4, !dbg !2078
  %add = add i32 %1, 3, !dbg !2079
  %2 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !2080
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 %add, %union.tree_node* %2), !dbg !2081
  ret void, !dbg !2082
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %vec_, i32 %ix_) #0 !dbg !2083 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !2086, metadata !DIExpression()), !dbg !2087
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !2088, metadata !DIExpression()), !dbg !2087
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !2087
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !2087
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !2087

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !2087
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !2087
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 0, !dbg !2087
  %3 = load i32, i32* %num, align 8, !dbg !2087
  %cmp = icmp ult i32 %1, %3, !dbg !2087
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !2089
  %land.ext = zext i1 %4 to i32, !dbg !2087
  %5 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !2087
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %5, i32 0, i32 2, !dbg !2087
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !2087
  %idxprom = zext i32 %6 to i64, !dbg !2087
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !2087
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !2087
  ret %union.tree_node* %7, !dbg !2087
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_call(%union.tree_node* %fn, i32 %nargs, ...) #0 !dbg !2090 {
entry:
  %fn.addr = alloca %union.tree_node*, align 8
  %nargs.addr = alloca i32, align 4
  %ap = alloca [1 x %struct.__va_list_tag], align 16
  %call = alloca %union.gimple_statement_d*, align 8
  %i = alloca i32, align 4
  store %union.tree_node* %fn, %union.tree_node** %fn.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn.addr, metadata !2093, metadata !DIExpression()), !dbg !2094
  store i32 %nargs, i32* %nargs.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %nargs.addr, metadata !2095, metadata !DIExpression()), !dbg !2096
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %ap, metadata !2097, metadata !DIExpression()), !dbg !2110
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %call, metadata !2111, metadata !DIExpression()), !dbg !2112
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2113, metadata !DIExpression()), !dbg !2114
  %0 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !2115
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !2115
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !2115
  %bf.load = load i64, i64* %1, align 8, !dbg !2115
  %bf.clear = and i64 %bf.load, 65535, !dbg !2115
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !2115
  %cmp = icmp eq i32 %bf.cast, 29, !dbg !2115
  br i1 %cmp, label %cond.false, label %lor.lhs.false, !dbg !2115

lor.lhs.false:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !2115
  %call1 = call zeroext i8 @is_gimple_call_addr(%union.tree_node* %2), !dbg !2115
  %conv = zext i8 %call1 to i32, !dbg !2115
  %tobool = icmp ne i32 %conv, 0, !dbg !2115
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !2115

cond.true:                                        ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 243, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !2115
  br label %cond.end, !dbg !2115

cond.false:                                       ; preds = %lor.lhs.false, %entry
  br label %cond.end, !dbg !2115

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !2115
  %3 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !2116
  %4 = load i32, i32* %nargs.addr, align 4, !dbg !2117
  %call2 = call %union.gimple_statement_d* @gimple_build_call_1(%union.tree_node* %3, i32 %4), !dbg !2118
  store %union.gimple_statement_d* %call2, %union.gimple_statement_d** %call, align 8, !dbg !2119
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i64 0, i64 0, !dbg !2120
  %arraydecay3 = bitcast %struct.__va_list_tag* %arraydecay to i8*, !dbg !2120
  call void @llvm.va_start(i8* %arraydecay3), !dbg !2120
  store i32 0, i32* %i, align 4, !dbg !2121
  br label %for.cond, !dbg !2123

for.cond:                                         ; preds = %for.inc, %cond.end
  %5 = load i32, i32* %i, align 4, !dbg !2124
  %6 = load i32, i32* %nargs.addr, align 4, !dbg !2126
  %cmp4 = icmp ult i32 %5, %6, !dbg !2127
  br i1 %cmp4, label %for.body, label %for.end, !dbg !2128

for.body:                                         ; preds = %for.cond
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call, align 8, !dbg !2129
  %8 = load i32, i32* %i, align 4, !dbg !2130
  %arraydecay6 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i64 0, i64 0, !dbg !2131
  %gp_offset_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay6, i32 0, i32 0, !dbg !2131
  %gp_offset = load i32, i32* %gp_offset_p, align 16, !dbg !2131
  %fits_in_gp = icmp ule i32 %gp_offset, 40, !dbg !2131
  br i1 %fits_in_gp, label %vaarg.in_reg, label %vaarg.in_mem, !dbg !2131

vaarg.in_reg:                                     ; preds = %for.body
  %9 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay6, i32 0, i32 3, !dbg !2131
  %reg_save_area = load i8*, i8** %9, align 16, !dbg !2131
  %10 = getelementptr i8, i8* %reg_save_area, i32 %gp_offset, !dbg !2131
  %11 = bitcast i8* %10 to %union.tree_node**, !dbg !2131
  %12 = add i32 %gp_offset, 8, !dbg !2131
  store i32 %12, i32* %gp_offset_p, align 16, !dbg !2131
  br label %vaarg.end, !dbg !2131

vaarg.in_mem:                                     ; preds = %for.body
  %overflow_arg_area_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay6, i32 0, i32 2, !dbg !2131
  %overflow_arg_area = load i8*, i8** %overflow_arg_area_p, align 8, !dbg !2131
  %13 = bitcast i8* %overflow_arg_area to %union.tree_node**, !dbg !2131
  %overflow_arg_area.next = getelementptr i8, i8* %overflow_arg_area, i32 8, !dbg !2131
  store i8* %overflow_arg_area.next, i8** %overflow_arg_area_p, align 8, !dbg !2131
  br label %vaarg.end, !dbg !2131

vaarg.end:                                        ; preds = %vaarg.in_mem, %vaarg.in_reg
  %vaarg.addr = phi %union.tree_node** [ %11, %vaarg.in_reg ], [ %13, %vaarg.in_mem ], !dbg !2131
  %14 = load %union.tree_node*, %union.tree_node** %vaarg.addr, align 8, !dbg !2131
  call void @gimple_call_set_arg(%union.gimple_statement_d* %7, i32 %8, %union.tree_node* %14), !dbg !2132
  br label %for.inc, !dbg !2132

for.inc:                                          ; preds = %vaarg.end
  %15 = load i32, i32* %i, align 4, !dbg !2133
  %inc = add i32 %15, 1, !dbg !2133
  store i32 %inc, i32* %i, align 4, !dbg !2133
  br label %for.cond, !dbg !2134, !llvm.loop !2135

for.end:                                          ; preds = %for.cond
  %arraydecay7 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i64 0, i64 0, !dbg !2137
  %arraydecay78 = bitcast %struct.__va_list_tag* %arraydecay7 to i8*, !dbg !2137
  call void @llvm.va_end(i8* %arraydecay78), !dbg !2137
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call, align 8, !dbg !2138
  ret %union.gimple_statement_d* %16, !dbg !2139
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @is_gimple_call_addr(%union.tree_node* %t) #0 !dbg !2140 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !2143, metadata !DIExpression()), !dbg !2144
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2145
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !2145
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !2145
  %bf.load = load i64, i64* %1, align 8, !dbg !2145
  %bf.clear = and i64 %bf.load, 65535, !dbg !2145
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !2145
  %cmp = icmp eq i32 %bf.cast, 50, !dbg !2146
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !2147

lor.rhs:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2148
  %call = call zeroext i8 @is_gimple_val(%union.tree_node* %2), !dbg !2149
  %conv = zext i8 %call to i32, !dbg !2149
  %tobool = icmp ne i32 %conv, 0, !dbg !2147
  br label %lor.end, !dbg !2147

lor.end:                                          ; preds = %lor.rhs, %entry
  %3 = phi i1 [ true, %entry ], [ %tobool, %lor.rhs ]
  %lor.ext = zext i1 %3 to i32, !dbg !2147
  %conv1 = trunc i32 %lor.ext to i8, !dbg !2150
  ret i8 %conv1, !dbg !2151
}

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #3

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #3

; Function Attrs: noinline nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_call_from_tree(%union.tree_node* %t) #0 !dbg !2152 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %nargs = alloca i32, align 4
  %call = alloca %union.gimple_statement_d*, align 8
  %fndecl = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !2153, metadata !DIExpression()), !dbg !2154
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2155, metadata !DIExpression()), !dbg !2156
  call void @llvm.dbg.declare(metadata i32* %nargs, metadata !2157, metadata !DIExpression()), !dbg !2158
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %call, metadata !2159, metadata !DIExpression()), !dbg !2160
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl, metadata !2161, metadata !DIExpression()), !dbg !2162
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2163
  %call1 = call %union.tree_node* @get_callee_fndecl(%union.tree_node* %0), !dbg !2164
  store %union.tree_node* %call1, %union.tree_node** %fndecl, align 8, !dbg !2162
  %1 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2165
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !2165
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !2165
  %bf.load = load i64, i64* %2, align 8, !dbg !2165
  %bf.clear = and i64 %bf.load, 65535, !dbg !2165
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !2165
  %cmp = icmp eq i32 %bf.cast, 59, !dbg !2165
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !2165

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 267, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !2165
  br label %cond.end, !dbg !2165

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2165

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !2165
  %3 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2166
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !2166
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !2166
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !2166
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !2166
  %int_cst = bitcast %union.tree_node* %4 to %struct.tree_int_cst*, !dbg !2166
  %int_cst2 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !2166
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst2, i32 0, i32 0, !dbg !2166
  %5 = load i64, i64* %low, align 8, !dbg !2166
  %conv = trunc i64 %5 to i32, !dbg !2166
  %sub = sub nsw i32 %conv, 3, !dbg !2166
  store i32 %sub, i32* %nargs, align 4, !dbg !2167
  %6 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !2168
  %tobool = icmp ne %union.tree_node* %6, null, !dbg !2168
  br i1 %tobool, label %cond.true3, label %cond.false4, !dbg !2168

cond.true3:                                       ; preds = %cond.end
  %7 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !2169
  br label %cond.end8, !dbg !2168

cond.false4:                                      ; preds = %cond.end
  %8 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2170
  %exp5 = bitcast %union.tree_node* %8 to %struct.tree_exp*, !dbg !2170
  %operands6 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5, i32 0, i32 3, !dbg !2170
  %arrayidx7 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands6, i64 0, i64 1, !dbg !2170
  %9 = load %union.tree_node*, %union.tree_node** %arrayidx7, align 8, !dbg !2170
  br label %cond.end8, !dbg !2168

cond.end8:                                        ; preds = %cond.false4, %cond.true3
  %cond9 = phi %union.tree_node* [ %7, %cond.true3 ], [ %9, %cond.false4 ], !dbg !2168
  %10 = load i32, i32* %nargs, align 4, !dbg !2171
  %call10 = call %union.gimple_statement_d* @gimple_build_call_1(%union.tree_node* %cond9, i32 %10), !dbg !2172
  store %union.gimple_statement_d* %call10, %union.gimple_statement_d** %call, align 8, !dbg !2173
  store i32 0, i32* %i, align 4, !dbg !2174
  br label %for.cond, !dbg !2176

for.cond:                                         ; preds = %for.inc, %cond.end8
  %11 = load i32, i32* %i, align 4, !dbg !2177
  %12 = load i32, i32* %nargs, align 4, !dbg !2179
  %cmp11 = icmp ult i32 %11, %12, !dbg !2180
  br i1 %cmp11, label %for.body, label %for.end, !dbg !2181

for.body:                                         ; preds = %for.cond
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call, align 8, !dbg !2182
  %14 = load i32, i32* %i, align 4, !dbg !2183
  %15 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2184
  %exp13 = bitcast %union.tree_node* %15 to %struct.tree_exp*, !dbg !2184
  %operands14 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp13, i32 0, i32 3, !dbg !2184
  %16 = load i32, i32* %i, align 4, !dbg !2184
  %add = add i32 %16, 3, !dbg !2184
  %idxprom = zext i32 %add to i64, !dbg !2184
  %arrayidx15 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands14, i64 0, i64 %idxprom, !dbg !2184
  %17 = load %union.tree_node*, %union.tree_node** %arrayidx15, align 8, !dbg !2184
  call void @gimple_call_set_arg(%union.gimple_statement_d* %13, i32 %14, %union.tree_node* %17), !dbg !2185
  br label %for.inc, !dbg !2185

for.inc:                                          ; preds = %for.body
  %18 = load i32, i32* %i, align 4, !dbg !2186
  %inc = add i32 %18, 1, !dbg !2186
  store i32 %inc, i32* %i, align 4, !dbg !2186
  br label %for.cond, !dbg !2187, !llvm.loop !2188

for.end:                                          ; preds = %for.cond
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call, align 8, !dbg !2190
  %20 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2191
  %call16 = call %union.tree_node** @tree_block(%union.tree_node* %20), !dbg !2191
  %21 = load %union.tree_node*, %union.tree_node** %call16, align 8, !dbg !2191
  call void @gimple_set_block(%union.gimple_statement_d* %19, %union.tree_node* %21), !dbg !2192
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call, align 8, !dbg !2193
  %23 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2194
  %exp17 = bitcast %union.tree_node* %23 to %struct.tree_exp*, !dbg !2194
  %operands18 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp17, i32 0, i32 3, !dbg !2194
  %arrayidx19 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands18, i64 0, i64 2, !dbg !2194
  %24 = load %union.tree_node*, %union.tree_node** %arrayidx19, align 8, !dbg !2194
  call void @gimple_call_set_chain(%union.gimple_statement_d* %22, %union.tree_node* %24), !dbg !2195
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call, align 8, !dbg !2196
  %26 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2197
  %base20 = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !2197
  %27 = bitcast %struct.tree_base* %base20 to i64*, !dbg !2197
  %bf.load21 = load i64, i64* %27, align 8, !dbg !2197
  %bf.lshr = lshr i64 %bf.load21, 18, !dbg !2197
  %bf.clear22 = and i64 %bf.lshr, 1, !dbg !2197
  %bf.cast23 = trunc i64 %bf.clear22 to i32, !dbg !2197
  %conv24 = trunc i32 %bf.cast23 to i8, !dbg !2197
  call void @gimple_call_set_tail(%union.gimple_statement_d* %25, i8 zeroext %conv24), !dbg !2198
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call, align 8, !dbg !2199
  %29 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2200
  %base25 = bitcast %union.tree_node* %29 to %struct.tree_base*, !dbg !2200
  %30 = bitcast %struct.tree_base* %base25 to i64*, !dbg !2200
  %bf.load26 = load i64, i64* %30, align 8, !dbg !2200
  %bf.lshr27 = lshr i64 %bf.load26, 26, !dbg !2200
  %bf.clear28 = and i64 %bf.lshr27, 1, !dbg !2200
  %bf.cast29 = trunc i64 %bf.clear28 to i32, !dbg !2200
  %conv30 = trunc i32 %bf.cast29 to i8, !dbg !2200
  call void @gimple_call_set_cannot_inline(%union.gimple_statement_d* %28, i8 zeroext %conv30), !dbg !2201
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call, align 8, !dbg !2202
  %32 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2203
  %base31 = bitcast %union.tree_node* %32 to %struct.tree_base*, !dbg !2203
  %33 = bitcast %struct.tree_base* %base31 to i64*, !dbg !2203
  %bf.load32 = load i64, i64* %33, align 8, !dbg !2203
  %bf.lshr33 = lshr i64 %bf.load32, 28, !dbg !2203
  %bf.clear34 = and i64 %bf.lshr33, 1, !dbg !2203
  %bf.cast35 = trunc i64 %bf.clear34 to i32, !dbg !2203
  %conv36 = trunc i32 %bf.cast35 to i8, !dbg !2203
  call void @gimple_call_set_return_slot_opt(%union.gimple_statement_d* %31, i8 zeroext %conv36), !dbg !2204
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call, align 8, !dbg !2205
  %35 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2206
  %base37 = bitcast %union.tree_node* %35 to %struct.tree_base*, !dbg !2206
  %36 = bitcast %struct.tree_base* %base37 to i64*, !dbg !2206
  %bf.load38 = load i64, i64* %36, align 8, !dbg !2206
  %bf.lshr39 = lshr i64 %bf.load38, 29, !dbg !2206
  %bf.clear40 = and i64 %bf.lshr39, 1, !dbg !2206
  %bf.cast41 = trunc i64 %bf.clear40 to i32, !dbg !2206
  %conv42 = trunc i32 %bf.cast41 to i8, !dbg !2206
  call void @gimple_call_set_from_thunk(%union.gimple_statement_d* %34, i8 zeroext %conv42), !dbg !2207
  %37 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call, align 8, !dbg !2208
  %38 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2209
  %base43 = bitcast %union.tree_node* %38 to %struct.tree_base*, !dbg !2209
  %39 = bitcast %struct.tree_base* %base43 to i64*, !dbg !2209
  %bf.load44 = load i64, i64* %39, align 8, !dbg !2209
  %bf.lshr45 = lshr i64 %bf.load44, 27, !dbg !2209
  %bf.clear46 = and i64 %bf.lshr45, 1, !dbg !2209
  %bf.cast47 = trunc i64 %bf.clear46 to i32, !dbg !2209
  %conv48 = trunc i32 %bf.cast47 to i8, !dbg !2209
  call void @gimple_call_set_va_arg_pack(%union.gimple_statement_d* %37, i8 zeroext %conv48), !dbg !2210
  %40 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call, align 8, !dbg !2211
  %41 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2212
  %base49 = bitcast %union.tree_node* %41 to %struct.tree_base*, !dbg !2212
  %42 = bitcast %struct.tree_base* %base49 to i64*, !dbg !2212
  %bf.load50 = load i64, i64* %42, align 8, !dbg !2212
  %bf.lshr51 = lshr i64 %bf.load50, 23, !dbg !2212
  %bf.clear52 = and i64 %bf.lshr51, 1, !dbg !2212
  %bf.cast53 = trunc i64 %bf.clear52 to i32, !dbg !2212
  %conv54 = trunc i32 %bf.cast53 to i8, !dbg !2212
  call void @gimple_set_no_warning(%union.gimple_statement_d* %40, i8 zeroext %conv54), !dbg !2213
  %43 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call, align 8, !dbg !2214
  ret %union.gimple_statement_d* %43, !dbg !2215
}

declare dso_local %union.tree_node* @get_callee_fndecl(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_block(%union.gimple_statement_d* %g, %union.tree_node* %block) #0 !dbg !2216 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  %block.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !2217, metadata !DIExpression()), !dbg !2218
  store %union.tree_node* %block, %union.tree_node** %block.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %block.addr, metadata !2219, metadata !DIExpression()), !dbg !2220
  %0 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !2221
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !2222
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !2223
  %block1 = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 5, !dbg !2224
  store %union.tree_node* %0, %union.tree_node** %block1, align 8, !dbg !2225
  ret void, !dbg !2226
}

declare dso_local %union.tree_node** @tree_block(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_call_set_chain(%union.gimple_statement_d* %gs, %union.tree_node* %chain) #0 !dbg !2227 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %chain.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !2228, metadata !DIExpression()), !dbg !2229
  store %union.tree_node* %chain, %union.tree_node** %chain.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chain.addr, metadata !2230, metadata !DIExpression()), !dbg !2231
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !2232
  %1 = load %union.tree_node*, %union.tree_node** %chain.addr, align 8, !dbg !2233
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 2, %union.tree_node* %1), !dbg !2234
  ret void, !dbg !2235
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_call_set_tail(%union.gimple_statement_d* %s, i8 zeroext %tail_p) #0 !dbg !2236 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  %tail_p.addr = alloca i8, align 1
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !2239, metadata !DIExpression()), !dbg !2240
  store i8 %tail_p, i8* %tail_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %tail_p.addr, metadata !2241, metadata !DIExpression()), !dbg !2242
  %0 = load i8, i8* %tail_p.addr, align 1, !dbg !2243
  %tobool = icmp ne i8 %0, 0, !dbg !2243
  br i1 %tobool, label %if.then, label %if.else, !dbg !2245

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !2246
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !2247
  %2 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !2248
  %bf.load = load i32, i32* %2, align 8, !dbg !2249
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !2249
  %or = or i32 %bf.lshr, 8, !dbg !2249
  %bf.load1 = load i32, i32* %2, align 8, !dbg !2249
  %bf.value = and i32 %or, 65535, !dbg !2249
  %bf.shl = shl i32 %bf.value, 16, !dbg !2249
  %bf.clear = and i32 %bf.load1, 65535, !dbg !2249
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !2249
  store i32 %bf.set, i32* %2, align 8, !dbg !2249
  br label %if.end, !dbg !2246

if.else:                                          ; preds = %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !2250
  %gsbase2 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_base*, !dbg !2251
  %4 = bitcast %struct.gimple_statement_base* %gsbase2 to i32*, !dbg !2252
  %bf.load3 = load i32, i32* %4, align 8, !dbg !2253
  %bf.lshr4 = lshr i32 %bf.load3, 16, !dbg !2253
  %and = and i32 %bf.lshr4, -9, !dbg !2253
  %bf.load5 = load i32, i32* %4, align 8, !dbg !2253
  %bf.value6 = and i32 %and, 65535, !dbg !2253
  %bf.shl7 = shl i32 %bf.value6, 16, !dbg !2253
  %bf.clear8 = and i32 %bf.load5, 65535, !dbg !2253
  %bf.set9 = or i32 %bf.clear8, %bf.shl7, !dbg !2253
  store i32 %bf.set9, i32* %4, align 8, !dbg !2253
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !2254
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_call_set_cannot_inline(%union.gimple_statement_d* %s, i8 zeroext %inlinable_p) #0 !dbg !2255 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  %inlinable_p.addr = alloca i8, align 1
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !2256, metadata !DIExpression()), !dbg !2257
  store i8 %inlinable_p, i8* %inlinable_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %inlinable_p.addr, metadata !2258, metadata !DIExpression()), !dbg !2259
  %0 = load i8, i8* %inlinable_p.addr, align 1, !dbg !2260
  %tobool = icmp ne i8 %0, 0, !dbg !2260
  br i1 %tobool, label %if.then, label %if.else, !dbg !2262

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !2263
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !2264
  %2 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !2265
  %bf.load = load i32, i32* %2, align 8, !dbg !2266
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !2266
  %or = or i32 %bf.lshr, 1, !dbg !2266
  %bf.load1 = load i32, i32* %2, align 8, !dbg !2266
  %bf.value = and i32 %or, 65535, !dbg !2266
  %bf.shl = shl i32 %bf.value, 16, !dbg !2266
  %bf.clear = and i32 %bf.load1, 65535, !dbg !2266
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !2266
  store i32 %bf.set, i32* %2, align 8, !dbg !2266
  br label %if.end, !dbg !2263

if.else:                                          ; preds = %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !2267
  %gsbase2 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_base*, !dbg !2268
  %4 = bitcast %struct.gimple_statement_base* %gsbase2 to i32*, !dbg !2269
  %bf.load3 = load i32, i32* %4, align 8, !dbg !2270
  %bf.lshr4 = lshr i32 %bf.load3, 16, !dbg !2270
  %and = and i32 %bf.lshr4, -2, !dbg !2270
  %bf.load5 = load i32, i32* %4, align 8, !dbg !2270
  %bf.value6 = and i32 %and, 65535, !dbg !2270
  %bf.shl7 = shl i32 %bf.value6, 16, !dbg !2270
  %bf.clear8 = and i32 %bf.load5, 65535, !dbg !2270
  %bf.set9 = or i32 %bf.clear8, %bf.shl7, !dbg !2270
  store i32 %bf.set9, i32* %4, align 8, !dbg !2270
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !2271
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_call_set_return_slot_opt(%union.gimple_statement_d* %s, i8 zeroext %return_slot_opt_p) #0 !dbg !2272 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  %return_slot_opt_p.addr = alloca i8, align 1
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !2273, metadata !DIExpression()), !dbg !2274
  store i8 %return_slot_opt_p, i8* %return_slot_opt_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %return_slot_opt_p.addr, metadata !2275, metadata !DIExpression()), !dbg !2276
  %0 = load i8, i8* %return_slot_opt_p.addr, align 1, !dbg !2277
  %tobool = icmp ne i8 %0, 0, !dbg !2277
  br i1 %tobool, label %if.then, label %if.else, !dbg !2279

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !2280
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !2281
  %2 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !2282
  %bf.load = load i32, i32* %2, align 8, !dbg !2283
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !2283
  %or = or i32 %bf.lshr, 4, !dbg !2283
  %bf.load1 = load i32, i32* %2, align 8, !dbg !2283
  %bf.value = and i32 %or, 65535, !dbg !2283
  %bf.shl = shl i32 %bf.value, 16, !dbg !2283
  %bf.clear = and i32 %bf.load1, 65535, !dbg !2283
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !2283
  store i32 %bf.set, i32* %2, align 8, !dbg !2283
  br label %if.end, !dbg !2280

if.else:                                          ; preds = %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !2284
  %gsbase2 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_base*, !dbg !2285
  %4 = bitcast %struct.gimple_statement_base* %gsbase2 to i32*, !dbg !2286
  %bf.load3 = load i32, i32* %4, align 8, !dbg !2287
  %bf.lshr4 = lshr i32 %bf.load3, 16, !dbg !2287
  %and = and i32 %bf.lshr4, -5, !dbg !2287
  %bf.load5 = load i32, i32* %4, align 8, !dbg !2287
  %bf.value6 = and i32 %and, 65535, !dbg !2287
  %bf.shl7 = shl i32 %bf.value6, 16, !dbg !2287
  %bf.clear8 = and i32 %bf.load5, 65535, !dbg !2287
  %bf.set9 = or i32 %bf.clear8, %bf.shl7, !dbg !2287
  store i32 %bf.set9, i32* %4, align 8, !dbg !2287
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !2288
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_call_set_from_thunk(%union.gimple_statement_d* %s, i8 zeroext %from_thunk_p) #0 !dbg !2289 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  %from_thunk_p.addr = alloca i8, align 1
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !2290, metadata !DIExpression()), !dbg !2291
  store i8 %from_thunk_p, i8* %from_thunk_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %from_thunk_p.addr, metadata !2292, metadata !DIExpression()), !dbg !2293
  %0 = load i8, i8* %from_thunk_p.addr, align 1, !dbg !2294
  %tobool = icmp ne i8 %0, 0, !dbg !2294
  br i1 %tobool, label %if.then, label %if.else, !dbg !2296

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !2297
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !2298
  %2 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !2299
  %bf.load = load i32, i32* %2, align 8, !dbg !2300
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !2300
  %or = or i32 %bf.lshr, 2, !dbg !2300
  %bf.load1 = load i32, i32* %2, align 8, !dbg !2300
  %bf.value = and i32 %or, 65535, !dbg !2300
  %bf.shl = shl i32 %bf.value, 16, !dbg !2300
  %bf.clear = and i32 %bf.load1, 65535, !dbg !2300
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !2300
  store i32 %bf.set, i32* %2, align 8, !dbg !2300
  br label %if.end, !dbg !2297

if.else:                                          ; preds = %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !2301
  %gsbase2 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_base*, !dbg !2302
  %4 = bitcast %struct.gimple_statement_base* %gsbase2 to i32*, !dbg !2303
  %bf.load3 = load i32, i32* %4, align 8, !dbg !2304
  %bf.lshr4 = lshr i32 %bf.load3, 16, !dbg !2304
  %and = and i32 %bf.lshr4, -3, !dbg !2304
  %bf.load5 = load i32, i32* %4, align 8, !dbg !2304
  %bf.value6 = and i32 %and, 65535, !dbg !2304
  %bf.shl7 = shl i32 %bf.value6, 16, !dbg !2304
  %bf.clear8 = and i32 %bf.load5, 65535, !dbg !2304
  %bf.set9 = or i32 %bf.clear8, %bf.shl7, !dbg !2304
  store i32 %bf.set9, i32* %4, align 8, !dbg !2304
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !2305
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_call_set_va_arg_pack(%union.gimple_statement_d* %s, i8 zeroext %pass_arg_pack_p) #0 !dbg !2306 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  %pass_arg_pack_p.addr = alloca i8, align 1
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !2307, metadata !DIExpression()), !dbg !2308
  store i8 %pass_arg_pack_p, i8* %pass_arg_pack_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %pass_arg_pack_p.addr, metadata !2309, metadata !DIExpression()), !dbg !2310
  %0 = load i8, i8* %pass_arg_pack_p.addr, align 1, !dbg !2311
  %tobool = icmp ne i8 %0, 0, !dbg !2311
  br i1 %tobool, label %if.then, label %if.else, !dbg !2313

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !2314
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !2315
  %2 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !2316
  %bf.load = load i32, i32* %2, align 8, !dbg !2317
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !2317
  %or = or i32 %bf.lshr, 16, !dbg !2317
  %bf.load1 = load i32, i32* %2, align 8, !dbg !2317
  %bf.value = and i32 %or, 65535, !dbg !2317
  %bf.shl = shl i32 %bf.value, 16, !dbg !2317
  %bf.clear = and i32 %bf.load1, 65535, !dbg !2317
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !2317
  store i32 %bf.set, i32* %2, align 8, !dbg !2317
  br label %if.end, !dbg !2314

if.else:                                          ; preds = %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !2318
  %gsbase2 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_base*, !dbg !2319
  %4 = bitcast %struct.gimple_statement_base* %gsbase2 to i32*, !dbg !2320
  %bf.load3 = load i32, i32* %4, align 8, !dbg !2321
  %bf.lshr4 = lshr i32 %bf.load3, 16, !dbg !2321
  %and = and i32 %bf.lshr4, -17, !dbg !2321
  %bf.load5 = load i32, i32* %4, align 8, !dbg !2321
  %bf.value6 = and i32 %and, 65535, !dbg !2321
  %bf.shl7 = shl i32 %bf.value6, 16, !dbg !2321
  %bf.clear8 = and i32 %bf.load5, 65535, !dbg !2321
  %bf.set9 = or i32 %bf.clear8, %bf.shl7, !dbg !2321
  store i32 %bf.set9, i32* %4, align 8, !dbg !2321
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !2322
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_no_warning(%union.gimple_statement_d* %stmt, i8 zeroext %no_warning) #0 !dbg !2323 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %no_warning.addr = alloca i8, align 1
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !2324, metadata !DIExpression()), !dbg !2325
  store i8 %no_warning, i8* %no_warning.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %no_warning.addr, metadata !2326, metadata !DIExpression()), !dbg !2327
  %0 = load i8, i8* %no_warning.addr, align 1, !dbg !2328
  %conv = zext i8 %0 to i32, !dbg !2329
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !2330
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !2331
  %2 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !2332
  %bf.load = load i32, i32* %2, align 8, !dbg !2333
  %bf.value = and i32 %conv, 1, !dbg !2333
  %bf.shl = shl i32 %bf.value, 8, !dbg !2333
  %bf.clear = and i32 %bf.load, -257, !dbg !2333
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !2333
  store i32 %bf.set, i32* %2, align 8, !dbg !2333
  ret void, !dbg !2334
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @extract_ops_from_tree(%union.tree_node* %expr, i32* %subcode_p, %union.tree_node** %op1_p, %union.tree_node** %op2_p) #0 !dbg !2335 {
entry:
  %expr.addr = alloca %union.tree_node*, align 8
  %subcode_p.addr = alloca i32*, align 8
  %op1_p.addr = alloca %union.tree_node**, align 8
  %op2_p.addr = alloca %union.tree_node**, align 8
  %grhs_class = alloca i32, align 4
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !2339, metadata !DIExpression()), !dbg !2340
  store i32* %subcode_p, i32** %subcode_p.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %subcode_p.addr, metadata !2341, metadata !DIExpression()), !dbg !2342
  store %union.tree_node** %op1_p, %union.tree_node*** %op1_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %op1_p.addr, metadata !2343, metadata !DIExpression()), !dbg !2344
  store %union.tree_node** %op2_p, %union.tree_node*** %op2_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %op2_p.addr, metadata !2345, metadata !DIExpression()), !dbg !2346
  call void @llvm.dbg.declare(metadata i32* %grhs_class, metadata !2347, metadata !DIExpression()), !dbg !2348
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !2349
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !2349
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !2349
  %bf.load = load i64, i64* %1, align 8, !dbg !2349
  %bf.clear = and i64 %bf.load, 65535, !dbg !2349
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !2349
  %2 = load i32*, i32** %subcode_p.addr, align 8, !dbg !2350
  store i32 %bf.cast, i32* %2, align 4, !dbg !2351
  %3 = load i32*, i32** %subcode_p.addr, align 8, !dbg !2352
  %4 = load i32, i32* %3, align 4, !dbg !2353
  %call = call i32 @get_gimple_rhs_class(i32 %4), !dbg !2354
  store i32 %call, i32* %grhs_class, align 4, !dbg !2355
  %5 = load i32, i32* %grhs_class, align 4, !dbg !2356
  %cmp = icmp eq i32 %5, 1, !dbg !2358
  br i1 %cmp, label %if.then, label %if.else, !dbg !2359

if.then:                                          ; preds = %entry
  %6 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !2360
  %exp = bitcast %union.tree_node* %6 to %struct.tree_exp*, !dbg !2360
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !2360
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !2360
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !2360
  %8 = load %union.tree_node**, %union.tree_node*** %op1_p.addr, align 8, !dbg !2362
  store %union.tree_node* %7, %union.tree_node** %8, align 8, !dbg !2363
  %9 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !2364
  %exp1 = bitcast %union.tree_node* %9 to %struct.tree_exp*, !dbg !2364
  %operands2 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 3, !dbg !2364
  %arrayidx3 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2, i64 0, i64 1, !dbg !2364
  %10 = load %union.tree_node*, %union.tree_node** %arrayidx3, align 8, !dbg !2364
  %11 = load %union.tree_node**, %union.tree_node*** %op2_p.addr, align 8, !dbg !2365
  store %union.tree_node* %10, %union.tree_node** %11, align 8, !dbg !2366
  br label %if.end14, !dbg !2367

if.else:                                          ; preds = %entry
  %12 = load i32, i32* %grhs_class, align 4, !dbg !2368
  %cmp4 = icmp eq i32 %12, 2, !dbg !2370
  br i1 %cmp4, label %if.then5, label %if.else9, !dbg !2371

if.then5:                                         ; preds = %if.else
  %13 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !2372
  %exp6 = bitcast %union.tree_node* %13 to %struct.tree_exp*, !dbg !2372
  %operands7 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp6, i32 0, i32 3, !dbg !2372
  %arrayidx8 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands7, i64 0, i64 0, !dbg !2372
  %14 = load %union.tree_node*, %union.tree_node** %arrayidx8, align 8, !dbg !2372
  %15 = load %union.tree_node**, %union.tree_node*** %op1_p.addr, align 8, !dbg !2374
  store %union.tree_node* %14, %union.tree_node** %15, align 8, !dbg !2375
  %16 = load %union.tree_node**, %union.tree_node*** %op2_p.addr, align 8, !dbg !2376
  store %union.tree_node* null, %union.tree_node** %16, align 8, !dbg !2377
  br label %if.end13, !dbg !2378

if.else9:                                         ; preds = %if.else
  %17 = load i32, i32* %grhs_class, align 4, !dbg !2379
  %cmp10 = icmp eq i32 %17, 3, !dbg !2381
  br i1 %cmp10, label %if.then11, label %if.else12, !dbg !2382

if.then11:                                        ; preds = %if.else9
  %18 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !2383
  %19 = load %union.tree_node**, %union.tree_node*** %op1_p.addr, align 8, !dbg !2385
  store %union.tree_node* %18, %union.tree_node** %19, align 8, !dbg !2386
  %20 = load %union.tree_node**, %union.tree_node*** %op2_p.addr, align 8, !dbg !2387
  store %union.tree_node* null, %union.tree_node** %20, align 8, !dbg !2388
  br label %if.end, !dbg !2389

if.else12:                                        ; preds = %if.else9
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 318, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !2390
  br label %if.end

if.end:                                           ; preds = %if.else12, %if.then11
  br label %if.end13

if.end13:                                         ; preds = %if.end, %if.then5
  br label %if.end14

if.end14:                                         ; preds = %if.end13, %if.then
  ret void, !dbg !2391
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_gimple_rhs_class(i32 %code) #0 !dbg !2392 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !2395, metadata !DIExpression()), !dbg !2396
  %0 = load i32, i32* %code.addr, align 4, !dbg !2397
  %idxprom = sext i32 %0 to i64, !dbg !2398
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([191 x i8]* @gimple_rhs_class_table to [0 x i8]*), i64 0, i64 %idxprom, !dbg !2398
  %1 = load i8, i8* %arrayidx, align 1, !dbg !2398
  %conv = zext i8 %1 to i32, !dbg !2399
  ret i32 %conv, !dbg !2400
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %lhs, %union.tree_node* %rhs) #0 !dbg !2401 {
entry:
  %lhs.addr = alloca %union.tree_node*, align 8
  %rhs.addr = alloca %union.tree_node*, align 8
  %subcode = alloca i32, align 4
  %op1 = alloca %union.tree_node*, align 8
  %op2 = alloca %union.tree_node*, align 8
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !2404, metadata !DIExpression()), !dbg !2405
  store %union.tree_node* %rhs, %union.tree_node** %rhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs.addr, metadata !2406, metadata !DIExpression()), !dbg !2407
  call void @llvm.dbg.declare(metadata i32* %subcode, metadata !2408, metadata !DIExpression()), !dbg !2409
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1, metadata !2410, metadata !DIExpression()), !dbg !2411
  call void @llvm.dbg.declare(metadata %union.tree_node** %op2, metadata !2412, metadata !DIExpression()), !dbg !2413
  %0 = load %union.tree_node*, %union.tree_node** %rhs.addr, align 8, !dbg !2414
  call void @extract_ops_from_tree(%union.tree_node* %0, i32* %subcode, %union.tree_node** %op1, %union.tree_node** %op2), !dbg !2415
  %1 = load i32, i32* %subcode, align 4, !dbg !2416
  %2 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !2417
  %3 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !2418
  %4 = load %union.tree_node*, %union.tree_node** %op2, align 8, !dbg !2419
  %call = call %union.gimple_statement_d* @gimple_build_assign_with_ops_stat(i32 %1, %union.tree_node* %2, %union.tree_node* %3, %union.tree_node* %4), !dbg !2420
  ret %union.gimple_statement_d* %call, !dbg !2421
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_assign_with_ops_stat(i32 %subcode, %union.tree_node* %lhs, %union.tree_node* %op1, %union.tree_node* %op2) #0 !dbg !2422 {
entry:
  %subcode.addr = alloca i32, align 4
  %lhs.addr = alloca %union.tree_node*, align 8
  %op1.addr = alloca %union.tree_node*, align 8
  %op2.addr = alloca %union.tree_node*, align 8
  %num_ops = alloca i32, align 4
  %p = alloca %union.gimple_statement_d*, align 8
  store i32 %subcode, i32* %subcode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %subcode.addr, metadata !2425, metadata !DIExpression()), !dbg !2426
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !2427, metadata !DIExpression()), !dbg !2428
  store %union.tree_node* %op1, %union.tree_node** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1.addr, metadata !2429, metadata !DIExpression()), !dbg !2430
  store %union.tree_node* %op2, %union.tree_node** %op2.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op2.addr, metadata !2431, metadata !DIExpression()), !dbg !2432
  call void @llvm.dbg.declare(metadata i32* %num_ops, metadata !2433, metadata !DIExpression()), !dbg !2434
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %p, metadata !2435, metadata !DIExpression()), !dbg !2436
  %0 = load i32, i32* %subcode.addr, align 4, !dbg !2437
  %call = call i32 @get_gimple_rhs_num_ops(i32 %0), !dbg !2438
  %add = add i32 %call, 1, !dbg !2439
  store i32 %add, i32* %num_ops, align 4, !dbg !2440
  %1 = load i32, i32* %subcode.addr, align 4, !dbg !2441
  %2 = load i32, i32* %num_ops, align 4, !dbg !2442
  %call1 = call %union.gimple_statement_d* @gimple_build_with_ops_stat(i32 6, i32 %1, i32 %2), !dbg !2443
  store %union.gimple_statement_d* %call1, %union.gimple_statement_d** %p, align 8, !dbg !2444
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !2445
  %4 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !2446
  call void @gimple_assign_set_lhs(%union.gimple_statement_d* %3, %union.tree_node* %4), !dbg !2447
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !2448
  %6 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !2449
  call void @gimple_assign_set_rhs1(%union.gimple_statement_d* %5, %union.tree_node* %6), !dbg !2450
  %7 = load %union.tree_node*, %union.tree_node** %op2.addr, align 8, !dbg !2451
  %tobool = icmp ne %union.tree_node* %7, null, !dbg !2451
  br i1 %tobool, label %if.then, label %if.end, !dbg !2453

if.then:                                          ; preds = %entry
  %8 = load i32, i32* %num_ops, align 4, !dbg !2454
  %cmp = icmp ugt i32 %8, 2, !dbg !2454
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !2454

cond.true:                                        ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 360, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !2454
  br label %cond.end, !dbg !2454

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !2454

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !2454
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !2456
  %10 = load %union.tree_node*, %union.tree_node** %op2.addr, align 8, !dbg !2457
  call void @gimple_assign_set_rhs2(%union.gimple_statement_d* %9, %union.tree_node* %10), !dbg !2458
  br label %if.end, !dbg !2459

if.end:                                           ; preds = %cond.end, %entry
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !2460
  ret %union.gimple_statement_d* %11, !dbg !2461
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @get_gimple_rhs_num_ops(i32 %code) #0 !dbg !2462 {
entry:
  %retval = alloca i32, align 4
  %code.addr = alloca i32, align 4
  %rhs_class = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !2465, metadata !DIExpression()), !dbg !2466
  call void @llvm.dbg.declare(metadata i32* %rhs_class, metadata !2467, metadata !DIExpression()), !dbg !2468
  %0 = load i32, i32* %code.addr, align 4, !dbg !2469
  %call = call i32 @get_gimple_rhs_class(i32 %0), !dbg !2470
  store i32 %call, i32* %rhs_class, align 4, !dbg !2468
  %1 = load i32, i32* %rhs_class, align 4, !dbg !2471
  %cmp = icmp eq i32 %1, 2, !dbg !2473
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !2474

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %rhs_class, align 4, !dbg !2475
  %cmp1 = icmp eq i32 %2, 3, !dbg !2476
  br i1 %cmp1, label %if.then, label %if.else, !dbg !2477

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 1, i32* %retval, align 4, !dbg !2478
  br label %return, !dbg !2478

if.else:                                          ; preds = %lor.lhs.false
  %3 = load i32, i32* %rhs_class, align 4, !dbg !2479
  %cmp2 = icmp eq i32 %3, 1, !dbg !2481
  br i1 %cmp2, label %if.then3, label %if.else4, !dbg !2482

if.then3:                                         ; preds = %if.else
  store i32 2, i32* %retval, align 4, !dbg !2483
  br label %return, !dbg !2483

if.else4:                                         ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 2378, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !2484
  br label %if.end

if.end:                                           ; preds = %if.else4
  br label %if.end5

if.end5:                                          ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !2485
  br label %return, !dbg !2485

return:                                           ; preds = %if.end5, %if.then3, %if.then
  %4 = load i32, i32* %retval, align 4, !dbg !2486
  ret i32 %4, !dbg !2486
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_assign_set_lhs(%union.gimple_statement_d* %gs, %union.tree_node* %lhs) #0 !dbg !2487 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %lhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !2488, metadata !DIExpression()), !dbg !2489
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !2490, metadata !DIExpression()), !dbg !2491
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !2492
  %1 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !2493
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 0, %union.tree_node* %1), !dbg !2494
  %2 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !2495
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !2495
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !2497

land.lhs.true:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !2498
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !2498
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !2498
  %bf.load = load i64, i64* %4, align 8, !dbg !2498
  %bf.clear = and i64 %bf.load, 65535, !dbg !2498
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !2498
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !2499
  br i1 %cmp, label %if.then, label %if.end, !dbg !2500

if.then:                                          ; preds = %land.lhs.true
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !2501
  %6 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !2502
  %ssa_name = bitcast %union.tree_node* %6 to %struct.tree_ssa_name*, !dbg !2502
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !2502
  store %union.gimple_statement_d* %5, %union.gimple_statement_d** %def_stmt, align 8, !dbg !2503
  br label %if.end, !dbg !2502

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void, !dbg !2504
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_assign_set_rhs1(%union.gimple_statement_d* %gs, %union.tree_node* %rhs) #0 !dbg !2505 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %rhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !2506, metadata !DIExpression()), !dbg !2507
  store %union.tree_node* %rhs, %union.tree_node** %rhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs.addr, metadata !2508, metadata !DIExpression()), !dbg !2509
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !2510
  %1 = load %union.tree_node*, %union.tree_node** %rhs.addr, align 8, !dbg !2511
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 1, %union.tree_node* %1), !dbg !2512
  ret void, !dbg !2513
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_assign_set_rhs2(%union.gimple_statement_d* %gs, %union.tree_node* %rhs) #0 !dbg !2514 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %rhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !2515, metadata !DIExpression()), !dbg !2516
  store %union.tree_node* %rhs, %union.tree_node** %rhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs.addr, metadata !2517, metadata !DIExpression()), !dbg !2518
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !2519
  %1 = load %union.tree_node*, %union.tree_node** %rhs.addr, align 8, !dbg !2520
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 2, %union.tree_node* %1), !dbg !2521
  ret void, !dbg !2522
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.gimple_statement_d* @gimplify_assign(%union.tree_node* %dst, %union.tree_node* %src, %struct.gimple_seq_d** %seq_p) #0 !dbg !2523 {
entry:
  %dst.addr = alloca %union.tree_node*, align 8
  %src.addr = alloca %union.tree_node*, align 8
  %seq_p.addr = alloca %struct.gimple_seq_d**, align 8
  %t = alloca %union.tree_node*, align 8
  store %union.tree_node* %dst, %union.tree_node** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %dst.addr, metadata !2527, metadata !DIExpression()), !dbg !2528
  store %union.tree_node* %src, %union.tree_node** %src.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %src.addr, metadata !2529, metadata !DIExpression()), !dbg !2530
  store %struct.gimple_seq_d** %seq_p, %struct.gimple_seq_d*** %seq_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %seq_p.addr, metadata !2531, metadata !DIExpression()), !dbg !2532
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !2533, metadata !DIExpression()), !dbg !2534
  %0 = load %union.tree_node*, %union.tree_node** %dst.addr, align 8, !dbg !2535
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !2535
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !2535
  %1 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !2535
  %2 = load %union.tree_node*, %union.tree_node** %dst.addr, align 8, !dbg !2535
  %3 = load %union.tree_node*, %union.tree_node** %src.addr, align 8, !dbg !2535
  %call = call %union.tree_node* @build2_stat(i32 53, %union.tree_node* %1, %union.tree_node* %2, %union.tree_node* %3), !dbg !2535
  store %union.tree_node* %call, %union.tree_node** %t, align 8, !dbg !2534
  %4 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !2536
  %5 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %seq_p.addr, align 8, !dbg !2537
  call void @gimplify_and_add(%union.tree_node* %4, %struct.gimple_seq_d** %5), !dbg !2538
  %6 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !2539
  %7 = bitcast %union.tree_node* %6 to i8*, !dbg !2539
  call void @ggc_free(i8* %7), !dbg !2540
  %8 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %seq_p.addr, align 8, !dbg !2541
  %9 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %8, align 8, !dbg !2542
  %call1 = call %union.gimple_statement_d* @gimple_seq_last_stmt(%struct.gimple_seq_d* %9), !dbg !2543
  ret %union.gimple_statement_d* %call1, !dbg !2544
}

declare dso_local %union.tree_node* @build2_stat(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local void @gimplify_and_add(%union.tree_node*, %struct.gimple_seq_d**) #2

declare dso_local void @ggc_free(i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @gimple_seq_last_stmt(%struct.gimple_seq_d* %s) #0 !dbg !2545 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  %n = alloca %struct.gimple_seq_node_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !2551, metadata !DIExpression()), !dbg !2552
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_node_d** %n, metadata !2553, metadata !DIExpression()), !dbg !2554
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !2555
  %call = call %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %0), !dbg !2556
  store %struct.gimple_seq_node_d* %call, %struct.gimple_seq_node_d** %n, align 8, !dbg !2554
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %n, align 8, !dbg !2557
  %tobool = icmp ne %struct.gimple_seq_node_d* %1, null, !dbg !2558
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2558

cond.true:                                        ; preds = %entry
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %n, align 8, !dbg !2559
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %2, i32 0, i32 0, !dbg !2560
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !2560
  br label %cond.end, !dbg !2558

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2558

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.gimple_statement_d* [ %3, %cond.true ], [ null, %cond.false ], !dbg !2558
  ret %union.gimple_statement_d* %cond, !dbg !2561
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_cond(i32 %pred_code, %union.tree_node* %lhs, %union.tree_node* %rhs, %union.tree_node* %t_label, %union.tree_node* %f_label) #0 !dbg !2562 {
entry:
  %pred_code.addr = alloca i32, align 4
  %lhs.addr = alloca %union.tree_node*, align 8
  %rhs.addr = alloca %union.tree_node*, align 8
  %t_label.addr = alloca %union.tree_node*, align 8
  %f_label.addr = alloca %union.tree_node*, align 8
  %p = alloca %union.gimple_statement_d*, align 8
  store i32 %pred_code, i32* %pred_code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %pred_code.addr, metadata !2565, metadata !DIExpression()), !dbg !2566
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !2567, metadata !DIExpression()), !dbg !2568
  store %union.tree_node* %rhs, %union.tree_node** %rhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs.addr, metadata !2569, metadata !DIExpression()), !dbg !2570
  store %union.tree_node* %t_label, %union.tree_node** %t_label.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t_label.addr, metadata !2571, metadata !DIExpression()), !dbg !2572
  store %union.tree_node* %f_label, %union.tree_node** %f_label.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %f_label.addr, metadata !2573, metadata !DIExpression()), !dbg !2574
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %p, metadata !2575, metadata !DIExpression()), !dbg !2576
  %0 = load i32, i32* %pred_code.addr, align 4, !dbg !2577
  %idxprom = sext i32 %0 to i64, !dbg !2577
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !2577
  %1 = load i32, i32* %arrayidx, align 4, !dbg !2577
  %cmp = icmp eq i32 %1, 5, !dbg !2577
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !2577

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 398, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !2577
  br label %cond.end, !dbg !2577

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2577

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !2577
  %2 = load i32, i32* %pred_code.addr, align 4, !dbg !2578
  %call = call %union.gimple_statement_d* @gimple_build_with_ops_stat(i32 1, i32 %2, i32 4), !dbg !2578
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %p, align 8, !dbg !2579
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !2580
  %4 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !2581
  call void @gimple_cond_set_lhs(%union.gimple_statement_d* %3, %union.tree_node* %4), !dbg !2582
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !2583
  %6 = load %union.tree_node*, %union.tree_node** %rhs.addr, align 8, !dbg !2584
  call void @gimple_cond_set_rhs(%union.gimple_statement_d* %5, %union.tree_node* %6), !dbg !2585
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !2586
  %8 = load %union.tree_node*, %union.tree_node** %t_label.addr, align 8, !dbg !2587
  call void @gimple_cond_set_true_label(%union.gimple_statement_d* %7, %union.tree_node* %8), !dbg !2588
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !2589
  %10 = load %union.tree_node*, %union.tree_node** %f_label.addr, align 8, !dbg !2590
  call void @gimple_cond_set_false_label(%union.gimple_statement_d* %9, %union.tree_node* %10), !dbg !2591
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !2592
  ret %union.gimple_statement_d* %11, !dbg !2593
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_cond_set_lhs(%union.gimple_statement_d* %gs, %union.tree_node* %lhs) #0 !dbg !2594 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %lhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !2595, metadata !DIExpression()), !dbg !2596
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !2597, metadata !DIExpression()), !dbg !2598
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !2599
  %1 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !2600
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 0, %union.tree_node* %1), !dbg !2601
  ret void, !dbg !2602
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_cond_set_rhs(%union.gimple_statement_d* %gs, %union.tree_node* %rhs) #0 !dbg !2603 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %rhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !2604, metadata !DIExpression()), !dbg !2605
  store %union.tree_node* %rhs, %union.tree_node** %rhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs.addr, metadata !2606, metadata !DIExpression()), !dbg !2607
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !2608
  %1 = load %union.tree_node*, %union.tree_node** %rhs.addr, align 8, !dbg !2609
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 1, %union.tree_node* %1), !dbg !2610
  ret void, !dbg !2611
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_cond_set_true_label(%union.gimple_statement_d* %gs, %union.tree_node* %label) #0 !dbg !2612 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %label.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !2613, metadata !DIExpression()), !dbg !2614
  store %union.tree_node* %label, %union.tree_node** %label.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %label.addr, metadata !2615, metadata !DIExpression()), !dbg !2616
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !2617
  %1 = load %union.tree_node*, %union.tree_node** %label.addr, align 8, !dbg !2618
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 2, %union.tree_node* %1), !dbg !2619
  ret void, !dbg !2620
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_cond_set_false_label(%union.gimple_statement_d* %gs, %union.tree_node* %label) #0 !dbg !2621 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %label.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !2622, metadata !DIExpression()), !dbg !2623
  store %union.tree_node* %label, %union.tree_node** %label.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %label.addr, metadata !2624, metadata !DIExpression()), !dbg !2625
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !2626
  %1 = load %union.tree_node*, %union.tree_node** %label.addr, align 8, !dbg !2627
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 3, %union.tree_node* %1), !dbg !2628
  ret void, !dbg !2629
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gimple_cond_get_ops_from_tree(%union.tree_node* %cond, i32* %code_p, %union.tree_node** %lhs_p, %union.tree_node** %rhs_p) #0 !dbg !2630 {
entry:
  %cond.addr = alloca %union.tree_node*, align 8
  %code_p.addr = alloca i32*, align 8
  %lhs_p.addr = alloca %union.tree_node**, align 8
  %rhs_p.addr = alloca %union.tree_node**, align 8
  %loc = alloca i32, align 4
  store %union.tree_node* %cond, %union.tree_node** %cond.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %cond.addr, metadata !2631, metadata !DIExpression()), !dbg !2632
  store i32* %code_p, i32** %code_p.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %code_p.addr, metadata !2633, metadata !DIExpression()), !dbg !2634
  store %union.tree_node** %lhs_p, %union.tree_node*** %lhs_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %lhs_p.addr, metadata !2635, metadata !DIExpression()), !dbg !2636
  store %union.tree_node** %rhs_p, %union.tree_node*** %rhs_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %rhs_p.addr, metadata !2637, metadata !DIExpression()), !dbg !2638
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !2639, metadata !DIExpression()), !dbg !2640
  %0 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8, !dbg !2641
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !2641
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !2641
  %bf.load = load i64, i64* %1, align 8, !dbg !2641
  %bf.clear = and i64 %bf.load, 65535, !dbg !2641
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !2641
  %idxprom = sext i32 %bf.cast to i64, !dbg !2641
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !2641
  %2 = load i32, i32* %arrayidx, align 4, !dbg !2641
  %cmp = icmp uge i32 %2, 4, !dbg !2641
  br i1 %cmp, label %land.lhs.true, label %cond.false, !dbg !2641

land.lhs.true:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8, !dbg !2641
  %base1 = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !2641
  %4 = bitcast %struct.tree_base* %base1 to i64*, !dbg !2641
  %bf.load2 = load i64, i64* %4, align 8, !dbg !2641
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !2641
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !2641
  %idxprom5 = sext i32 %bf.cast4 to i64, !dbg !2641
  %arrayidx6 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom5, !dbg !2641
  %5 = load i32, i32* %arrayidx6, align 4, !dbg !2641
  %cmp7 = icmp ule i32 %5, 10, !dbg !2641
  br i1 %cmp7, label %cond.true, label %cond.false, !dbg !2641

cond.true:                                        ; preds = %land.lhs.true
  %6 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8, !dbg !2641
  %exp = bitcast %union.tree_node* %6 to %struct.tree_exp*, !dbg !2641
  %locus = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 1, !dbg !2641
  %7 = load i32, i32* %locus, align 8, !dbg !2641
  br label %cond.end, !dbg !2641

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !2641

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond8 = phi i32 [ %7, %cond.true ], [ 0, %cond.false ], !dbg !2641
  store i32 %cond8, i32* %loc, align 4, !dbg !2640
  %8 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8, !dbg !2642
  %base9 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !2642
  %9 = bitcast %struct.tree_base* %base9 to i64*, !dbg !2642
  %bf.load10 = load i64, i64* %9, align 8, !dbg !2642
  %bf.clear11 = and i64 %bf.load10, 65535, !dbg !2642
  %bf.cast12 = trunc i64 %bf.clear11 to i32, !dbg !2642
  %idxprom13 = sext i32 %bf.cast12 to i64, !dbg !2642
  %arrayidx14 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom13, !dbg !2642
  %10 = load i32, i32* %arrayidx14, align 4, !dbg !2642
  %cmp15 = icmp eq i32 %10, 5, !dbg !2642
  br i1 %cmp15, label %cond.false76, label %lor.lhs.false, !dbg !2642

lor.lhs.false:                                    ; preds = %cond.end
  %11 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8, !dbg !2642
  %base16 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !2642
  %12 = bitcast %struct.tree_base* %base16 to i64*, !dbg !2642
  %bf.load17 = load i64, i64* %12, align 8, !dbg !2642
  %bf.clear18 = and i64 %bf.load17, 65535, !dbg !2642
  %bf.cast19 = trunc i64 %bf.clear18 to i32, !dbg !2642
  %cmp20 = icmp eq i32 %bf.cast19, 96, !dbg !2642
  br i1 %cmp20, label %cond.false76, label %lor.lhs.false21, !dbg !2642

lor.lhs.false21:                                  ; preds = %lor.lhs.false
  %13 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8, !dbg !2642
  %call = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %13), !dbg !2642
  %conv = zext i8 %call to i32, !dbg !2642
  %tobool = icmp ne i32 %conv, 0, !dbg !2642
  br i1 %tobool, label %cond.false76, label %lor.lhs.false22, !dbg !2642

lor.lhs.false22:                                  ; preds = %lor.lhs.false21
  %14 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8, !dbg !2642
  %base23 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !2642
  %15 = bitcast %struct.tree_base* %base23 to i64*, !dbg !2642
  %bf.load24 = load i64, i64* %15, align 8, !dbg !2642
  %bf.clear25 = and i64 %bf.load24, 65535, !dbg !2642
  %bf.cast26 = trunc i64 %bf.clear25 to i32, !dbg !2642
  %cmp27 = icmp eq i32 %bf.cast26, 32, !dbg !2642
  br i1 %cmp27, label %cond.false76, label %lor.lhs.false29, !dbg !2642

lor.lhs.false29:                                  ; preds = %lor.lhs.false22
  %16 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8, !dbg !2642
  %base30 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !2642
  %17 = bitcast %struct.tree_base* %base30 to i64*, !dbg !2642
  %bf.load31 = load i64, i64* %17, align 8, !dbg !2642
  %bf.clear32 = and i64 %bf.load31, 65535, !dbg !2642
  %bf.cast33 = trunc i64 %bf.clear32 to i32, !dbg !2642
  %cmp34 = icmp eq i32 %bf.cast33, 34, !dbg !2642
  br i1 %cmp34, label %cond.false76, label %lor.lhs.false36, !dbg !2642

lor.lhs.false36:                                  ; preds = %lor.lhs.false29
  %18 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8, !dbg !2642
  %base37 = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !2642
  %19 = bitcast %struct.tree_base* %base37 to i64*, !dbg !2642
  %bf.load38 = load i64, i64* %19, align 8, !dbg !2642
  %bf.clear39 = and i64 %bf.load38, 65535, !dbg !2642
  %bf.cast40 = trunc i64 %bf.clear39 to i32, !dbg !2642
  %cmp41 = icmp eq i32 %bf.cast40, 36, !dbg !2642
  br i1 %cmp41, label %cond.false76, label %lor.lhs.false43, !dbg !2642

lor.lhs.false43:                                  ; preds = %lor.lhs.false36
  %20 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8, !dbg !2642
  %base44 = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !2642
  %21 = bitcast %struct.tree_base* %base44 to i64*, !dbg !2642
  %bf.load45 = load i64, i64* %21, align 8, !dbg !2642
  %bf.clear46 = and i64 %bf.load45, 65535, !dbg !2642
  %bf.cast47 = trunc i64 %bf.clear46 to i32, !dbg !2642
  %cmp48 = icmp eq i32 %bf.cast47, 141, !dbg !2642
  br i1 %cmp48, label %land.lhs.true50, label %cond.true75, !dbg !2642

land.lhs.true50:                                  ; preds = %lor.lhs.false43
  %22 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8, !dbg !2642
  %ssa_name = bitcast %union.tree_node* %22 to %struct.tree_ssa_name*, !dbg !2642
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !2642
  %23 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !2642
  %base51 = bitcast %union.tree_node* %23 to %struct.tree_base*, !dbg !2642
  %24 = bitcast %struct.tree_base* %base51 to i64*, !dbg !2642
  %bf.load52 = load i64, i64* %24, align 8, !dbg !2642
  %bf.clear53 = and i64 %bf.load52, 65535, !dbg !2642
  %bf.cast54 = trunc i64 %bf.clear53 to i32, !dbg !2642
  %cmp55 = icmp eq i32 %bf.cast54, 32, !dbg !2642
  br i1 %cmp55, label %cond.false76, label %lor.lhs.false57, !dbg !2642

lor.lhs.false57:                                  ; preds = %land.lhs.true50
  %25 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8, !dbg !2642
  %ssa_name58 = bitcast %union.tree_node* %25 to %struct.tree_ssa_name*, !dbg !2642
  %var59 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name58, i32 0, i32 1, !dbg !2642
  %26 = load %union.tree_node*, %union.tree_node** %var59, align 8, !dbg !2642
  %base60 = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !2642
  %27 = bitcast %struct.tree_base* %base60 to i64*, !dbg !2642
  %bf.load61 = load i64, i64* %27, align 8, !dbg !2642
  %bf.clear62 = and i64 %bf.load61, 65535, !dbg !2642
  %bf.cast63 = trunc i64 %bf.clear62 to i32, !dbg !2642
  %cmp64 = icmp eq i32 %bf.cast63, 34, !dbg !2642
  br i1 %cmp64, label %cond.false76, label %lor.lhs.false66, !dbg !2642

lor.lhs.false66:                                  ; preds = %lor.lhs.false57
  %28 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8, !dbg !2642
  %ssa_name67 = bitcast %union.tree_node* %28 to %struct.tree_ssa_name*, !dbg !2642
  %var68 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name67, i32 0, i32 1, !dbg !2642
  %29 = load %union.tree_node*, %union.tree_node** %var68, align 8, !dbg !2642
  %base69 = bitcast %union.tree_node* %29 to %struct.tree_base*, !dbg !2642
  %30 = bitcast %struct.tree_base* %base69 to i64*, !dbg !2642
  %bf.load70 = load i64, i64* %30, align 8, !dbg !2642
  %bf.clear71 = and i64 %bf.load70, 65535, !dbg !2642
  %bf.cast72 = trunc i64 %bf.clear71 to i32, !dbg !2642
  %cmp73 = icmp eq i32 %bf.cast72, 36, !dbg !2642
  br i1 %cmp73, label %cond.false76, label %cond.true75, !dbg !2642

cond.true75:                                      ; preds = %lor.lhs.false66, %lor.lhs.false43
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 418, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !2642
  br label %cond.end77, !dbg !2642

cond.false76:                                     ; preds = %lor.lhs.false66, %lor.lhs.false57, %land.lhs.true50, %lor.lhs.false36, %lor.lhs.false29, %lor.lhs.false22, %lor.lhs.false21, %lor.lhs.false, %cond.end
  br label %cond.end77, !dbg !2642

cond.end77:                                       ; preds = %cond.false76, %cond.true75
  %cond78 = phi i32 [ 0, %cond.true75 ], [ 0, %cond.false76 ], !dbg !2642
  %31 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8, !dbg !2643
  %32 = load i32*, i32** %code_p.addr, align 8, !dbg !2644
  %33 = load %union.tree_node**, %union.tree_node*** %lhs_p.addr, align 8, !dbg !2645
  %34 = load %union.tree_node**, %union.tree_node*** %rhs_p.addr, align 8, !dbg !2646
  call void @extract_ops_from_tree(%union.tree_node* %31, i32* %32, %union.tree_node** %33, %union.tree_node** %34), !dbg !2647
  %35 = load i32*, i32** %code_p.addr, align 8, !dbg !2648
  %36 = load i32, i32* %35, align 4, !dbg !2650
  %cmp79 = icmp eq i32 %36, 96, !dbg !2651
  br i1 %cmp79, label %if.then, label %if.else, !dbg !2652

if.then:                                          ; preds = %cond.end77
  %37 = load i32*, i32** %code_p.addr, align 8, !dbg !2653
  store i32 101, i32* %37, align 4, !dbg !2655
  %38 = load %union.tree_node**, %union.tree_node*** %lhs_p.addr, align 8, !dbg !2656
  %39 = load %union.tree_node*, %union.tree_node** %38, align 8, !dbg !2656
  %tobool81 = icmp ne %union.tree_node* %39, null, !dbg !2656
  br i1 %tobool81, label %land.lhs.true82, label %cond.true85, !dbg !2656

land.lhs.true82:                                  ; preds = %if.then
  %40 = load %union.tree_node**, %union.tree_node*** %rhs_p.addr, align 8, !dbg !2656
  %41 = load %union.tree_node*, %union.tree_node** %40, align 8, !dbg !2656
  %cmp83 = icmp eq %union.tree_node* %41, null, !dbg !2656
  br i1 %cmp83, label %cond.false86, label %cond.true85, !dbg !2656

cond.true85:                                      ; preds = %land.lhs.true82, %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 426, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !2656
  br label %cond.end87, !dbg !2656

cond.false86:                                     ; preds = %land.lhs.true82
  br label %cond.end87, !dbg !2656

cond.end87:                                       ; preds = %cond.false86, %cond.true85
  %cond88 = phi i32 [ 0, %cond.true85 ], [ 0, %cond.false86 ], !dbg !2656
  %42 = load i32, i32* %loc, align 4, !dbg !2657
  %43 = load %union.tree_node**, %union.tree_node*** %lhs_p.addr, align 8, !dbg !2658
  %44 = load %union.tree_node*, %union.tree_node** %43, align 8, !dbg !2658
  %common = bitcast %union.tree_node* %44 to %struct.tree_common*, !dbg !2658
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !2658
  %45 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !2658
  %46 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !2659
  %call89 = call %union.tree_node* @fold_convert_loc(i32 %42, %union.tree_node* %45, %union.tree_node* %46), !dbg !2660
  %47 = load %union.tree_node**, %union.tree_node*** %rhs_p.addr, align 8, !dbg !2661
  store %union.tree_node* %call89, %union.tree_node** %47, align 8, !dbg !2662
  br label %if.end106, !dbg !2663

if.else:                                          ; preds = %cond.end77
  %48 = load i32*, i32** %code_p.addr, align 8, !dbg !2664
  %49 = load i32, i32* %48, align 4, !dbg !2664
  %idxprom90 = sext i32 %49 to i64, !dbg !2664
  %arrayidx91 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom90, !dbg !2664
  %50 = load i32, i32* %arrayidx91, align 4, !dbg !2664
  %cmp92 = icmp ne i32 %50, 5, !dbg !2666
  br i1 %cmp92, label %if.then94, label %if.end, !dbg !2667

if.then94:                                        ; preds = %if.else
  %51 = load i32*, i32** %code_p.addr, align 8, !dbg !2668
  store i32 102, i32* %51, align 4, !dbg !2670
  %52 = load %union.tree_node**, %union.tree_node*** %lhs_p.addr, align 8, !dbg !2671
  %53 = load %union.tree_node*, %union.tree_node** %52, align 8, !dbg !2671
  %tobool95 = icmp ne %union.tree_node* %53, null, !dbg !2671
  br i1 %tobool95, label %land.lhs.true96, label %cond.true99, !dbg !2671

land.lhs.true96:                                  ; preds = %if.then94
  %54 = load %union.tree_node**, %union.tree_node*** %rhs_p.addr, align 8, !dbg !2671
  %55 = load %union.tree_node*, %union.tree_node** %54, align 8, !dbg !2671
  %cmp97 = icmp eq %union.tree_node* %55, null, !dbg !2671
  br i1 %cmp97, label %cond.false100, label %cond.true99, !dbg !2671

cond.true99:                                      ; preds = %land.lhs.true96, %if.then94
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 433, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !2671
  br label %cond.end101, !dbg !2671

cond.false100:                                    ; preds = %land.lhs.true96
  br label %cond.end101, !dbg !2671

cond.end101:                                      ; preds = %cond.false100, %cond.true99
  %cond102 = phi i32 [ 0, %cond.true99 ], [ 0, %cond.false100 ], !dbg !2671
  %56 = load i32, i32* %loc, align 4, !dbg !2672
  %57 = load %union.tree_node**, %union.tree_node*** %lhs_p.addr, align 8, !dbg !2673
  %58 = load %union.tree_node*, %union.tree_node** %57, align 8, !dbg !2673
  %common103 = bitcast %union.tree_node* %58 to %struct.tree_common*, !dbg !2673
  %type104 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common103, i32 0, i32 2, !dbg !2673
  %59 = load %union.tree_node*, %union.tree_node** %type104, align 8, !dbg !2673
  %60 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !2674
  %call105 = call %union.tree_node* @fold_convert_loc(i32 %56, %union.tree_node* %59, %union.tree_node* %60), !dbg !2675
  %61 = load %union.tree_node**, %union.tree_node*** %rhs_p.addr, align 8, !dbg !2676
  store %union.tree_node* %call105, %union.tree_node** %61, align 8, !dbg !2677
  br label %if.end, !dbg !2678

if.end:                                           ; preds = %cond.end101, %if.else
  br label %if.end106

if.end106:                                        ; preds = %if.end, %cond.end87
  ret void, !dbg !2679
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @is_gimple_min_invariant(%union.tree_node* %t) #0 !dbg !2680 {
entry:
  %retval = alloca i8, align 1
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !2683, metadata !DIExpression()), !dbg !2684
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2685
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !2685
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !2685
  %bf.load = load i64, i64* %1, align 8, !dbg !2685
  %bf.clear = and i64 %bf.load, 65535, !dbg !2685
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !2685
  %cmp = icmp eq i32 %bf.cast, 121, !dbg !2687
  br i1 %cmp, label %if.then, label %if.end, !dbg !2688

if.then:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2689
  %call = call zeroext i8 @is_gimple_invariant_address(%union.tree_node* %2), !dbg !2690
  store i8 %call, i8* %retval, align 1, !dbg !2691
  br label %return, !dbg !2691

if.end:                                           ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2692
  %call1 = call zeroext i8 @is_gimple_constant(%union.tree_node* %3), !dbg !2693
  store i8 %call1, i8* %retval, align 1, !dbg !2694
  br label %return, !dbg !2694

return:                                           ; preds = %if.end, %if.then
  %4 = load i8, i8* %retval, align 1, !dbg !2695
  ret i8 %4, !dbg !2695
}

declare dso_local %union.tree_node* @fold_convert_loc(i32, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_cond_from_tree(%union.tree_node* %cond, %union.tree_node* %t_label, %union.tree_node* %f_label) #0 !dbg !2696 {
entry:
  %cond.addr = alloca %union.tree_node*, align 8
  %t_label.addr = alloca %union.tree_node*, align 8
  %f_label.addr = alloca %union.tree_node*, align 8
  %code = alloca i32, align 4
  %lhs = alloca %union.tree_node*, align 8
  %rhs = alloca %union.tree_node*, align 8
  store %union.tree_node* %cond, %union.tree_node** %cond.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %cond.addr, metadata !2699, metadata !DIExpression()), !dbg !2700
  store %union.tree_node* %t_label, %union.tree_node** %t_label.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t_label.addr, metadata !2701, metadata !DIExpression()), !dbg !2702
  store %union.tree_node* %f_label, %union.tree_node** %f_label.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %f_label.addr, metadata !2703, metadata !DIExpression()), !dbg !2704
  call void @llvm.dbg.declare(metadata i32* %code, metadata !2705, metadata !DIExpression()), !dbg !2706
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !2707, metadata !DIExpression()), !dbg !2708
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs, metadata !2709, metadata !DIExpression()), !dbg !2710
  %0 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8, !dbg !2711
  call void @gimple_cond_get_ops_from_tree(%union.tree_node* %0, i32* %code, %union.tree_node** %lhs, %union.tree_node** %rhs), !dbg !2712
  %1 = load i32, i32* %code, align 4, !dbg !2713
  %2 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !2714
  %3 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !2715
  %4 = load %union.tree_node*, %union.tree_node** %t_label.addr, align 8, !dbg !2716
  %5 = load %union.tree_node*, %union.tree_node** %f_label.addr, align 8, !dbg !2717
  %call = call %union.gimple_statement_d* @gimple_build_cond(i32 %1, %union.tree_node* %2, %union.tree_node* %3, %union.tree_node* %4, %union.tree_node* %5), !dbg !2718
  ret %union.gimple_statement_d* %call, !dbg !2719
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gimple_cond_set_condition_from_tree(%union.gimple_statement_d* %stmt, %union.tree_node* %cond) #0 !dbg !2720 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %cond.addr = alloca %union.tree_node*, align 8
  %code = alloca i32, align 4
  %lhs = alloca %union.tree_node*, align 8
  %rhs = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !2721, metadata !DIExpression()), !dbg !2722
  store %union.tree_node* %cond, %union.tree_node** %cond.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %cond.addr, metadata !2723, metadata !DIExpression()), !dbg !2724
  call void @llvm.dbg.declare(metadata i32* %code, metadata !2725, metadata !DIExpression()), !dbg !2726
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !2727, metadata !DIExpression()), !dbg !2728
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs, metadata !2729, metadata !DIExpression()), !dbg !2730
  %0 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8, !dbg !2731
  call void @gimple_cond_get_ops_from_tree(%union.tree_node* %0, i32* %code, %union.tree_node** %lhs, %union.tree_node** %rhs), !dbg !2732
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !2733
  %2 = load i32, i32* %code, align 4, !dbg !2734
  %3 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !2735
  %4 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !2736
  call void @gimple_cond_set_condition(%union.gimple_statement_d* %1, i32 %2, %union.tree_node* %3, %union.tree_node* %4), !dbg !2737
  ret void, !dbg !2738
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_cond_set_condition(%union.gimple_statement_d* %stmt, i32 %code, %union.tree_node* %lhs, %union.tree_node* %rhs) #0 !dbg !2739 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %code.addr = alloca i32, align 4
  %lhs.addr = alloca %union.tree_node*, align 8
  %rhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !2742, metadata !DIExpression()), !dbg !2743
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !2744, metadata !DIExpression()), !dbg !2745
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !2746, metadata !DIExpression()), !dbg !2747
  store %union.tree_node* %rhs, %union.tree_node** %rhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs.addr, metadata !2748, metadata !DIExpression()), !dbg !2749
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !2750
  %1 = load i32, i32* %code.addr, align 4, !dbg !2751
  call void @gimple_cond_set_code(%union.gimple_statement_d* %0, i32 %1), !dbg !2752
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !2753
  %3 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !2754
  call void @gimple_cond_set_lhs(%union.gimple_statement_d* %2, %union.tree_node* %3), !dbg !2755
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !2756
  %5 = load %union.tree_node*, %union.tree_node** %rhs.addr, align 8, !dbg !2757
  call void @gimple_cond_set_rhs(%union.gimple_statement_d* %4, %union.tree_node* %5), !dbg !2758
  ret void, !dbg !2759
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_label(%union.tree_node* %label) #0 !dbg !2760 {
entry:
  %label.addr = alloca %union.tree_node*, align 8
  %p = alloca %union.gimple_statement_d*, align 8
  store %union.tree_node* %label, %union.tree_node** %label.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %label.addr, metadata !2761, metadata !DIExpression()), !dbg !2762
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %p, metadata !2763, metadata !DIExpression()), !dbg !2764
  %call = call %union.gimple_statement_d* @gimple_build_with_ops_stat(i32 4, i32 0, i32 1), !dbg !2765
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %p, align 8, !dbg !2764
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !2766
  %1 = load %union.tree_node*, %union.tree_node** %label.addr, align 8, !dbg !2767
  call void @gimple_label_set_label(%union.gimple_statement_d* %0, %union.tree_node* %1), !dbg !2768
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !2769
  ret %union.gimple_statement_d* %2, !dbg !2770
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_label_set_label(%union.gimple_statement_d* %gs, %union.tree_node* %label) #0 !dbg !2771 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %label.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !2772, metadata !DIExpression()), !dbg !2773
  store %union.tree_node* %label, %union.tree_node** %label.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %label.addr, metadata !2774, metadata !DIExpression()), !dbg !2775
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !2776
  %1 = load %union.tree_node*, %union.tree_node** %label.addr, align 8, !dbg !2777
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 0, %union.tree_node* %1), !dbg !2778
  ret void, !dbg !2779
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_goto(%union.tree_node* %dest) #0 !dbg !2780 {
entry:
  %dest.addr = alloca %union.tree_node*, align 8
  %p = alloca %union.gimple_statement_d*, align 8
  store %union.tree_node* %dest, %union.tree_node** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %dest.addr, metadata !2781, metadata !DIExpression()), !dbg !2782
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %p, metadata !2783, metadata !DIExpression()), !dbg !2784
  %call = call %union.gimple_statement_d* @gimple_build_with_ops_stat(i32 3, i32 0, i32 1), !dbg !2785
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %p, align 8, !dbg !2784
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !2786
  %1 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !2787
  call void @gimple_goto_set_dest(%union.gimple_statement_d* %0, %union.tree_node* %1), !dbg !2788
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !2789
  ret %union.gimple_statement_d* %2, !dbg !2790
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_goto_set_dest(%union.gimple_statement_d* %gs, %union.tree_node* %dest) #0 !dbg !2791 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %dest.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !2792, metadata !DIExpression()), !dbg !2793
  store %union.tree_node* %dest, %union.tree_node** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %dest.addr, metadata !2794, metadata !DIExpression()), !dbg !2795
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !2796
  %1 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !2797
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 0, %union.tree_node* %1), !dbg !2798
  ret void, !dbg !2799
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_nop() #0 !dbg !2800 {
entry:
  %call = call %union.gimple_statement_d* @gimple_alloc_stat(i32 18, i32 0), !dbg !2803
  ret %union.gimple_statement_d* %call, !dbg !2804
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_bind(%union.tree_node* %vars, %struct.gimple_seq_d* %body, %union.tree_node* %block) #0 !dbg !2805 {
entry:
  %vars.addr = alloca %union.tree_node*, align 8
  %body.addr = alloca %struct.gimple_seq_d*, align 8
  %block.addr = alloca %union.tree_node*, align 8
  %p = alloca %union.gimple_statement_d*, align 8
  store %union.tree_node* %vars, %union.tree_node** %vars.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %vars.addr, metadata !2808, metadata !DIExpression()), !dbg !2809
  store %struct.gimple_seq_d* %body, %struct.gimple_seq_d** %body.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %body.addr, metadata !2810, metadata !DIExpression()), !dbg !2811
  store %union.tree_node* %block, %union.tree_node** %block.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %block.addr, metadata !2812, metadata !DIExpression()), !dbg !2813
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %p, metadata !2814, metadata !DIExpression()), !dbg !2815
  %call = call %union.gimple_statement_d* @gimple_alloc_stat(i32 10, i32 0), !dbg !2816
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %p, align 8, !dbg !2815
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !2817
  %1 = load %union.tree_node*, %union.tree_node** %vars.addr, align 8, !dbg !2818
  call void @gimple_bind_set_vars(%union.gimple_statement_d* %0, %union.tree_node* %1), !dbg !2819
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %body.addr, align 8, !dbg !2820
  %tobool = icmp ne %struct.gimple_seq_d* %2, null, !dbg !2820
  br i1 %tobool, label %if.then, label %if.end, !dbg !2822

if.then:                                          ; preds = %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !2823
  %4 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %body.addr, align 8, !dbg !2824
  call void @gimple_bind_set_body(%union.gimple_statement_d* %3, %struct.gimple_seq_d* %4), !dbg !2825
  br label %if.end, !dbg !2825

if.end:                                           ; preds = %if.then, %entry
  %5 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !2826
  %tobool1 = icmp ne %union.tree_node* %5, null, !dbg !2826
  br i1 %tobool1, label %if.then2, label %if.end3, !dbg !2828

if.then2:                                         ; preds = %if.end
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !2829
  %7 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !2830
  call void @gimple_bind_set_block(%union.gimple_statement_d* %6, %union.tree_node* %7), !dbg !2831
  br label %if.end3, !dbg !2831

if.end3:                                          ; preds = %if.then2, %if.end
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !2832
  ret %union.gimple_statement_d* %8, !dbg !2833
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_bind_set_vars(%union.gimple_statement_d* %gs, %union.tree_node* %vars) #0 !dbg !2834 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %vars.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !2835, metadata !DIExpression()), !dbg !2836
  store %union.tree_node* %vars, %union.tree_node** %vars.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %vars.addr, metadata !2837, metadata !DIExpression()), !dbg !2838
  %0 = load %union.tree_node*, %union.tree_node** %vars.addr, align 8, !dbg !2839
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !2840
  %gimple_bind = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_bind*, !dbg !2841
  %vars1 = getelementptr inbounds %struct.gimple_statement_bind, %struct.gimple_statement_bind* %gimple_bind, i32 0, i32 1, !dbg !2842
  store %union.tree_node* %0, %union.tree_node** %vars1, align 8, !dbg !2843
  ret void, !dbg !2844
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_bind_set_body(%union.gimple_statement_d* %gs, %struct.gimple_seq_d* %seq) #0 !dbg !2845 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %seq.addr = alloca %struct.gimple_seq_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !2848, metadata !DIExpression()), !dbg !2849
  store %struct.gimple_seq_d* %seq, %struct.gimple_seq_d** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq.addr, metadata !2850, metadata !DIExpression()), !dbg !2851
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !2852
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !2853
  %gimple_bind = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_bind*, !dbg !2854
  %body = getelementptr inbounds %struct.gimple_statement_bind, %struct.gimple_statement_bind* %gimple_bind, i32 0, i32 3, !dbg !2855
  store %struct.gimple_seq_d* %0, %struct.gimple_seq_d** %body, align 8, !dbg !2856
  ret void, !dbg !2857
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_bind_set_block(%union.gimple_statement_d* %gs, %union.tree_node* %block) #0 !dbg !2858 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %block.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !2859, metadata !DIExpression()), !dbg !2860
  store %union.tree_node* %block, %union.tree_node** %block.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %block.addr, metadata !2861, metadata !DIExpression()), !dbg !2862
  %0 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !2863
  %cmp = icmp eq %union.tree_node* %0, null, !dbg !2863
  br i1 %cmp, label %cond.false, label %lor.lhs.false, !dbg !2863

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !2863
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !2863
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !2863
  %bf.load = load i64, i64* %2, align 8, !dbg !2863
  %bf.clear = and i64 %bf.load, 65535, !dbg !2863
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !2863
  %cmp1 = icmp eq i32 %bf.cast, 4, !dbg !2863
  br i1 %cmp1, label %cond.false, label %cond.true, !dbg !2863

cond.true:                                        ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 2573, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !2863
  br label %cond.end, !dbg !2863

cond.false:                                       ; preds = %lor.lhs.false, %entry
  br label %cond.end, !dbg !2863

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !2863
  %3 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !2864
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !2865
  %gimple_bind = bitcast %union.gimple_statement_d* %4 to %struct.gimple_statement_bind*, !dbg !2866
  %block2 = getelementptr inbounds %struct.gimple_statement_bind, %struct.gimple_statement_bind* %gimple_bind, i32 0, i32 2, !dbg !2867
  store %union.tree_node* %3, %union.tree_node** %block2, align 8, !dbg !2868
  ret void, !dbg !2869
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_asm_vec(i8* %string, %struct.VEC_tree_gc* %inputs, %struct.VEC_tree_gc* %outputs, %struct.VEC_tree_gc* %clobbers, %struct.VEC_tree_gc* %labels) #0 !dbg !2870 {
entry:
  %string.addr = alloca i8*, align 8
  %inputs.addr = alloca %struct.VEC_tree_gc*, align 8
  %outputs.addr = alloca %struct.VEC_tree_gc*, align 8
  %clobbers.addr = alloca %struct.VEC_tree_gc*, align 8
  %labels.addr = alloca %struct.VEC_tree_gc*, align 8
  %p = alloca %union.gimple_statement_d*, align 8
  %i = alloca i32, align 4
  store i8* %string, i8** %string.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %string.addr, metadata !2873, metadata !DIExpression()), !dbg !2874
  store %struct.VEC_tree_gc* %inputs, %struct.VEC_tree_gc** %inputs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_gc** %inputs.addr, metadata !2875, metadata !DIExpression()), !dbg !2876
  store %struct.VEC_tree_gc* %outputs, %struct.VEC_tree_gc** %outputs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_gc** %outputs.addr, metadata !2877, metadata !DIExpression()), !dbg !2878
  store %struct.VEC_tree_gc* %clobbers, %struct.VEC_tree_gc** %clobbers.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_gc** %clobbers.addr, metadata !2879, metadata !DIExpression()), !dbg !2880
  store %struct.VEC_tree_gc* %labels, %struct.VEC_tree_gc** %labels.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_gc** %labels.addr, metadata !2881, metadata !DIExpression()), !dbg !2882
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %p, metadata !2883, metadata !DIExpression()), !dbg !2884
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2885, metadata !DIExpression()), !dbg !2886
  %0 = load i8*, i8** %string.addr, align 8, !dbg !2887
  %1 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %inputs.addr, align 8, !dbg !2888
  %tobool = icmp ne %struct.VEC_tree_gc* %1, null, !dbg !2888
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2888

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %inputs.addr, align 8, !dbg !2888
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %2, i32 0, i32 0, !dbg !2888
  br label %cond.end, !dbg !2888

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2888

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2888
  %call = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond), !dbg !2888
  %3 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %outputs.addr, align 8, !dbg !2889
  %tobool1 = icmp ne %struct.VEC_tree_gc* %3, null, !dbg !2889
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !2889

cond.true2:                                       ; preds = %cond.end
  %4 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %outputs.addr, align 8, !dbg !2889
  %base3 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %4, i32 0, i32 0, !dbg !2889
  br label %cond.end5, !dbg !2889

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !2889

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_tree_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !2889
  %call7 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond6), !dbg !2889
  %5 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %clobbers.addr, align 8, !dbg !2890
  %tobool8 = icmp ne %struct.VEC_tree_gc* %5, null, !dbg !2890
  br i1 %tobool8, label %cond.true9, label %cond.false11, !dbg !2890

cond.true9:                                       ; preds = %cond.end5
  %6 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %clobbers.addr, align 8, !dbg !2890
  %base10 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %6, i32 0, i32 0, !dbg !2890
  br label %cond.end12, !dbg !2890

cond.false11:                                     ; preds = %cond.end5
  br label %cond.end12, !dbg !2890

cond.end12:                                       ; preds = %cond.false11, %cond.true9
  %cond13 = phi %struct.VEC_tree_base* [ %base10, %cond.true9 ], [ null, %cond.false11 ], !dbg !2890
  %call14 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond13), !dbg !2890
  %7 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %labels.addr, align 8, !dbg !2891
  %tobool15 = icmp ne %struct.VEC_tree_gc* %7, null, !dbg !2891
  br i1 %tobool15, label %cond.true16, label %cond.false18, !dbg !2891

cond.true16:                                      ; preds = %cond.end12
  %8 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %labels.addr, align 8, !dbg !2891
  %base17 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %8, i32 0, i32 0, !dbg !2891
  br label %cond.end19, !dbg !2891

cond.false18:                                     ; preds = %cond.end12
  br label %cond.end19, !dbg !2891

cond.end19:                                       ; preds = %cond.false18, %cond.true16
  %cond20 = phi %struct.VEC_tree_base* [ %base17, %cond.true16 ], [ null, %cond.false18 ], !dbg !2891
  %call21 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond20), !dbg !2891
  %call22 = call %union.gimple_statement_d* @gimple_build_asm_1(i8* %0, i32 %call, i32 %call7, i32 %call14, i32 %call21), !dbg !2892
  store %union.gimple_statement_d* %call22, %union.gimple_statement_d** %p, align 8, !dbg !2893
  store i32 0, i32* %i, align 4, !dbg !2894
  br label %for.cond, !dbg !2896

for.cond:                                         ; preds = %for.inc, %cond.end19
  %9 = load i32, i32* %i, align 4, !dbg !2897
  %10 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %inputs.addr, align 8, !dbg !2899
  %tobool23 = icmp ne %struct.VEC_tree_gc* %10, null, !dbg !2899
  br i1 %tobool23, label %cond.true24, label %cond.false26, !dbg !2899

cond.true24:                                      ; preds = %for.cond
  %11 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %inputs.addr, align 8, !dbg !2899
  %base25 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %11, i32 0, i32 0, !dbg !2899
  br label %cond.end27, !dbg !2899

cond.false26:                                     ; preds = %for.cond
  br label %cond.end27, !dbg !2899

cond.end27:                                       ; preds = %cond.false26, %cond.true24
  %cond28 = phi %struct.VEC_tree_base* [ %base25, %cond.true24 ], [ null, %cond.false26 ], !dbg !2899
  %call29 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond28), !dbg !2899
  %cmp = icmp ult i32 %9, %call29, !dbg !2900
  br i1 %cmp, label %for.body, label %for.end, !dbg !2901

for.body:                                         ; preds = %cond.end27
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !2902
  %13 = load i32, i32* %i, align 4, !dbg !2903
  %14 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %inputs.addr, align 8, !dbg !2904
  %tobool30 = icmp ne %struct.VEC_tree_gc* %14, null, !dbg !2904
  br i1 %tobool30, label %cond.true31, label %cond.false33, !dbg !2904

cond.true31:                                      ; preds = %for.body
  %15 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %inputs.addr, align 8, !dbg !2904
  %base32 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %15, i32 0, i32 0, !dbg !2904
  br label %cond.end34, !dbg !2904

cond.false33:                                     ; preds = %for.body
  br label %cond.end34, !dbg !2904

cond.end34:                                       ; preds = %cond.false33, %cond.true31
  %cond35 = phi %struct.VEC_tree_base* [ %base32, %cond.true31 ], [ null, %cond.false33 ], !dbg !2904
  %16 = load i32, i32* %i, align 4, !dbg !2904
  %call36 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond35, i32 %16), !dbg !2904
  call void @gimple_asm_set_input_op(%union.gimple_statement_d* %12, i32 %13, %union.tree_node* %call36), !dbg !2905
  br label %for.inc, !dbg !2905

for.inc:                                          ; preds = %cond.end34
  %17 = load i32, i32* %i, align 4, !dbg !2906
  %inc = add i32 %17, 1, !dbg !2906
  store i32 %inc, i32* %i, align 4, !dbg !2906
  br label %for.cond, !dbg !2907, !llvm.loop !2908

for.end:                                          ; preds = %cond.end27
  store i32 0, i32* %i, align 4, !dbg !2910
  br label %for.cond37, !dbg !2912

for.cond37:                                       ; preds = %for.inc54, %for.end
  %18 = load i32, i32* %i, align 4, !dbg !2913
  %19 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %outputs.addr, align 8, !dbg !2915
  %tobool38 = icmp ne %struct.VEC_tree_gc* %19, null, !dbg !2915
  br i1 %tobool38, label %cond.true39, label %cond.false41, !dbg !2915

cond.true39:                                      ; preds = %for.cond37
  %20 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %outputs.addr, align 8, !dbg !2915
  %base40 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %20, i32 0, i32 0, !dbg !2915
  br label %cond.end42, !dbg !2915

cond.false41:                                     ; preds = %for.cond37
  br label %cond.end42, !dbg !2915

cond.end42:                                       ; preds = %cond.false41, %cond.true39
  %cond43 = phi %struct.VEC_tree_base* [ %base40, %cond.true39 ], [ null, %cond.false41 ], !dbg !2915
  %call44 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond43), !dbg !2915
  %cmp45 = icmp ult i32 %18, %call44, !dbg !2916
  br i1 %cmp45, label %for.body46, label %for.end56, !dbg !2917

for.body46:                                       ; preds = %cond.end42
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !2918
  %22 = load i32, i32* %i, align 4, !dbg !2919
  %23 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %outputs.addr, align 8, !dbg !2920
  %tobool47 = icmp ne %struct.VEC_tree_gc* %23, null, !dbg !2920
  br i1 %tobool47, label %cond.true48, label %cond.false50, !dbg !2920

cond.true48:                                      ; preds = %for.body46
  %24 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %outputs.addr, align 8, !dbg !2920
  %base49 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %24, i32 0, i32 0, !dbg !2920
  br label %cond.end51, !dbg !2920

cond.false50:                                     ; preds = %for.body46
  br label %cond.end51, !dbg !2920

cond.end51:                                       ; preds = %cond.false50, %cond.true48
  %cond52 = phi %struct.VEC_tree_base* [ %base49, %cond.true48 ], [ null, %cond.false50 ], !dbg !2920
  %25 = load i32, i32* %i, align 4, !dbg !2920
  %call53 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond52, i32 %25), !dbg !2920
  call void @gimple_asm_set_output_op(%union.gimple_statement_d* %21, i32 %22, %union.tree_node* %call53), !dbg !2921
  br label %for.inc54, !dbg !2921

for.inc54:                                        ; preds = %cond.end51
  %26 = load i32, i32* %i, align 4, !dbg !2922
  %inc55 = add i32 %26, 1, !dbg !2922
  store i32 %inc55, i32* %i, align 4, !dbg !2922
  br label %for.cond37, !dbg !2923, !llvm.loop !2924

for.end56:                                        ; preds = %cond.end42
  store i32 0, i32* %i, align 4, !dbg !2926
  br label %for.cond57, !dbg !2928

for.cond57:                                       ; preds = %for.inc74, %for.end56
  %27 = load i32, i32* %i, align 4, !dbg !2929
  %28 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %clobbers.addr, align 8, !dbg !2931
  %tobool58 = icmp ne %struct.VEC_tree_gc* %28, null, !dbg !2931
  br i1 %tobool58, label %cond.true59, label %cond.false61, !dbg !2931

cond.true59:                                      ; preds = %for.cond57
  %29 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %clobbers.addr, align 8, !dbg !2931
  %base60 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %29, i32 0, i32 0, !dbg !2931
  br label %cond.end62, !dbg !2931

cond.false61:                                     ; preds = %for.cond57
  br label %cond.end62, !dbg !2931

cond.end62:                                       ; preds = %cond.false61, %cond.true59
  %cond63 = phi %struct.VEC_tree_base* [ %base60, %cond.true59 ], [ null, %cond.false61 ], !dbg !2931
  %call64 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond63), !dbg !2931
  %cmp65 = icmp ult i32 %27, %call64, !dbg !2932
  br i1 %cmp65, label %for.body66, label %for.end76, !dbg !2933

for.body66:                                       ; preds = %cond.end62
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !2934
  %31 = load i32, i32* %i, align 4, !dbg !2935
  %32 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %clobbers.addr, align 8, !dbg !2936
  %tobool67 = icmp ne %struct.VEC_tree_gc* %32, null, !dbg !2936
  br i1 %tobool67, label %cond.true68, label %cond.false70, !dbg !2936

cond.true68:                                      ; preds = %for.body66
  %33 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %clobbers.addr, align 8, !dbg !2936
  %base69 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %33, i32 0, i32 0, !dbg !2936
  br label %cond.end71, !dbg !2936

cond.false70:                                     ; preds = %for.body66
  br label %cond.end71, !dbg !2936

cond.end71:                                       ; preds = %cond.false70, %cond.true68
  %cond72 = phi %struct.VEC_tree_base* [ %base69, %cond.true68 ], [ null, %cond.false70 ], !dbg !2936
  %34 = load i32, i32* %i, align 4, !dbg !2936
  %call73 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond72, i32 %34), !dbg !2936
  call void @gimple_asm_set_clobber_op(%union.gimple_statement_d* %30, i32 %31, %union.tree_node* %call73), !dbg !2937
  br label %for.inc74, !dbg !2937

for.inc74:                                        ; preds = %cond.end71
  %35 = load i32, i32* %i, align 4, !dbg !2938
  %inc75 = add i32 %35, 1, !dbg !2938
  store i32 %inc75, i32* %i, align 4, !dbg !2938
  br label %for.cond57, !dbg !2939, !llvm.loop !2940

for.end76:                                        ; preds = %cond.end62
  store i32 0, i32* %i, align 4, !dbg !2942
  br label %for.cond77, !dbg !2944

for.cond77:                                       ; preds = %for.inc94, %for.end76
  %36 = load i32, i32* %i, align 4, !dbg !2945
  %37 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %labels.addr, align 8, !dbg !2947
  %tobool78 = icmp ne %struct.VEC_tree_gc* %37, null, !dbg !2947
  br i1 %tobool78, label %cond.true79, label %cond.false81, !dbg !2947

cond.true79:                                      ; preds = %for.cond77
  %38 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %labels.addr, align 8, !dbg !2947
  %base80 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %38, i32 0, i32 0, !dbg !2947
  br label %cond.end82, !dbg !2947

cond.false81:                                     ; preds = %for.cond77
  br label %cond.end82, !dbg !2947

cond.end82:                                       ; preds = %cond.false81, %cond.true79
  %cond83 = phi %struct.VEC_tree_base* [ %base80, %cond.true79 ], [ null, %cond.false81 ], !dbg !2947
  %call84 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond83), !dbg !2947
  %cmp85 = icmp ult i32 %36, %call84, !dbg !2948
  br i1 %cmp85, label %for.body86, label %for.end96, !dbg !2949

for.body86:                                       ; preds = %cond.end82
  %39 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !2950
  %40 = load i32, i32* %i, align 4, !dbg !2951
  %41 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %labels.addr, align 8, !dbg !2952
  %tobool87 = icmp ne %struct.VEC_tree_gc* %41, null, !dbg !2952
  br i1 %tobool87, label %cond.true88, label %cond.false90, !dbg !2952

cond.true88:                                      ; preds = %for.body86
  %42 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %labels.addr, align 8, !dbg !2952
  %base89 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %42, i32 0, i32 0, !dbg !2952
  br label %cond.end91, !dbg !2952

cond.false90:                                     ; preds = %for.body86
  br label %cond.end91, !dbg !2952

cond.end91:                                       ; preds = %cond.false90, %cond.true88
  %cond92 = phi %struct.VEC_tree_base* [ %base89, %cond.true88 ], [ null, %cond.false90 ], !dbg !2952
  %43 = load i32, i32* %i, align 4, !dbg !2952
  %call93 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond92, i32 %43), !dbg !2952
  call void @gimple_asm_set_label_op(%union.gimple_statement_d* %39, i32 %40, %union.tree_node* %call93), !dbg !2953
  br label %for.inc94, !dbg !2953

for.inc94:                                        ; preds = %cond.end91
  %44 = load i32, i32* %i, align 4, !dbg !2954
  %inc95 = add i32 %44, 1, !dbg !2954
  store i32 %inc95, i32* %i, align 4, !dbg !2954
  br label %for.cond77, !dbg !2955, !llvm.loop !2956

for.end96:                                        ; preds = %cond.end82
  %45 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !2958
  ret %union.gimple_statement_d* %45, !dbg !2959
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @gimple_build_asm_1(i8* %string, i32 %ninputs, i32 %noutputs, i32 %nclobbers, i32 %nlabels) #0 !dbg !2960 {
entry:
  %string.addr = alloca i8*, align 8
  %ninputs.addr = alloca i32, align 4
  %noutputs.addr = alloca i32, align 4
  %nclobbers.addr = alloca i32, align 4
  %nlabels.addr = alloca i32, align 4
  %p = alloca %union.gimple_statement_d*, align 8
  %size = alloca i32, align 4
  store i8* %string, i8** %string.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %string.addr, metadata !2963, metadata !DIExpression()), !dbg !2964
  store i32 %ninputs, i32* %ninputs.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ninputs.addr, metadata !2965, metadata !DIExpression()), !dbg !2966
  store i32 %noutputs, i32* %noutputs.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %noutputs.addr, metadata !2967, metadata !DIExpression()), !dbg !2968
  store i32 %nclobbers, i32* %nclobbers.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %nclobbers.addr, metadata !2969, metadata !DIExpression()), !dbg !2970
  store i32 %nlabels, i32* %nlabels.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %nlabels.addr, metadata !2971, metadata !DIExpression()), !dbg !2972
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %p, metadata !2973, metadata !DIExpression()), !dbg !2974
  call void @llvm.dbg.declare(metadata i32* %size, metadata !2975, metadata !DIExpression()), !dbg !2976
  %0 = load i8*, i8** %string.addr, align 8, !dbg !2977
  %call = call i64 @strlen(i8* %0), !dbg !2978
  %conv = trunc i64 %call to i32, !dbg !2978
  store i32 %conv, i32* %size, align 4, !dbg !2976
  %1 = load i32, i32* %nlabels.addr, align 4, !dbg !2979
  %cmp = icmp eq i32 %1, 0, !dbg !2979
  br i1 %cmp, label %cond.false, label %lor.lhs.false, !dbg !2979

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %noutputs.addr, align 4, !dbg !2979
  %cmp2 = icmp eq i32 %2, 0, !dbg !2979
  br i1 %cmp2, label %cond.false, label %cond.true, !dbg !2979

cond.true:                                        ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 528, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !2979
  br label %cond.end, !dbg !2979

cond.false:                                       ; preds = %lor.lhs.false, %entry
  br label %cond.end, !dbg !2979

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !2979
  %3 = load i32, i32* %ninputs.addr, align 4, !dbg !2980
  %4 = load i32, i32* %noutputs.addr, align 4, !dbg !2980
  %add = add i32 %3, %4, !dbg !2980
  %5 = load i32, i32* %nclobbers.addr, align 4, !dbg !2980
  %add4 = add i32 %add, %5, !dbg !2980
  %6 = load i32, i32* %nlabels.addr, align 4, !dbg !2980
  %add5 = add i32 %add4, %6, !dbg !2980
  %call6 = call %union.gimple_statement_d* @gimple_build_with_ops_stat(i32 7, i32 0, i32 %add5), !dbg !2980
  store %union.gimple_statement_d* %call6, %union.gimple_statement_d** %p, align 8, !dbg !2981
  %7 = load i32, i32* %ninputs.addr, align 4, !dbg !2982
  %conv7 = trunc i32 %7 to i8, !dbg !2982
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !2983
  %gimple_asm = bitcast %union.gimple_statement_d* %8 to %struct.gimple_statement_asm*, !dbg !2984
  %ni = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm, i32 0, i32 2, !dbg !2985
  store i8 %conv7, i8* %ni, align 8, !dbg !2986
  %9 = load i32, i32* %noutputs.addr, align 4, !dbg !2987
  %conv8 = trunc i32 %9 to i8, !dbg !2987
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !2988
  %gimple_asm9 = bitcast %union.gimple_statement_d* %10 to %struct.gimple_statement_asm*, !dbg !2989
  %no = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm9, i32 0, i32 3, !dbg !2990
  store i8 %conv8, i8* %no, align 1, !dbg !2991
  %11 = load i32, i32* %nclobbers.addr, align 4, !dbg !2992
  %conv10 = trunc i32 %11 to i8, !dbg !2992
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !2993
  %gimple_asm11 = bitcast %union.gimple_statement_d* %12 to %struct.gimple_statement_asm*, !dbg !2994
  %nc = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm11, i32 0, i32 4, !dbg !2995
  store i8 %conv10, i8* %nc, align 2, !dbg !2996
  %13 = load i32, i32* %nlabels.addr, align 4, !dbg !2997
  %conv12 = trunc i32 %13 to i8, !dbg !2997
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !2998
  %gimple_asm13 = bitcast %union.gimple_statement_d* %14 to %struct.gimple_statement_asm*, !dbg !2999
  %nl = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm13, i32 0, i32 5, !dbg !3000
  store i8 %conv12, i8* %nl, align 1, !dbg !3001
  %15 = load i8*, i8** %string.addr, align 8, !dbg !3002
  %16 = load i32, i32* %size, align 4, !dbg !3003
  %call14 = call i8* @ggc_alloc_string(i8* %15, i32 %16), !dbg !3004
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3005
  %gimple_asm15 = bitcast %union.gimple_statement_d* %17 to %struct.gimple_statement_asm*, !dbg !3006
  %string16 = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm15, i32 0, i32 1, !dbg !3007
  store i8* %call14, i8** %string16, align 8, !dbg !3008
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3009
  ret %union.gimple_statement_d* %18, !dbg !3010
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_asm_set_input_op(%union.gimple_statement_d* %gs, i32 %index, %union.tree_node* %in_op) #0 !dbg !3011 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  %in_op.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3012, metadata !DIExpression()), !dbg !3013
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !3014, metadata !DIExpression()), !dbg !3015
  store %union.tree_node* %in_op, %union.tree_node** %in_op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %in_op.addr, metadata !3016, metadata !DIExpression()), !dbg !3017
  %0 = load i32, i32* %index.addr, align 4, !dbg !3018
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3018
  %gimple_asm = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_asm*, !dbg !3018
  %ni = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm, i32 0, i32 2, !dbg !3018
  %2 = load i8, i8* %ni, align 8, !dbg !3018
  %conv = zext i8 %2 to i32, !dbg !3018
  %cmp = icmp ule i32 %0, %conv, !dbg !3018
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !3018

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 2643, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !3018
  br label %cond.end, !dbg !3018

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3018

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3018
  %3 = load %union.tree_node*, %union.tree_node** %in_op.addr, align 8, !dbg !3019
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !3019
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !3019
  %bf.load = load i64, i64* %4, align 8, !dbg !3019
  %bf.clear = and i64 %bf.load, 65535, !dbg !3019
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3019
  %cmp2 = icmp eq i32 %bf.cast, 2, !dbg !3019
  br i1 %cmp2, label %cond.false5, label %cond.true4, !dbg !3019

cond.true4:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 2644, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !3019
  br label %cond.end6, !dbg !3019

cond.false5:                                      ; preds = %cond.end
  br label %cond.end6, !dbg !3019

cond.end6:                                        ; preds = %cond.false5, %cond.true4
  %cond7 = phi i32 [ 0, %cond.true4 ], [ 0, %cond.false5 ], !dbg !3019
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3020
  %6 = load i32, i32* %index.addr, align 4, !dbg !3021
  %7 = load %union.tree_node*, %union.tree_node** %in_op.addr, align 8, !dbg !3022
  call void @gimple_set_op(%union.gimple_statement_d* %5, i32 %6, %union.tree_node* %7), !dbg !3023
  ret void, !dbg !3024
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_asm_set_output_op(%union.gimple_statement_d* %gs, i32 %index, %union.tree_node* %out_op) #0 !dbg !3025 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  %out_op.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3026, metadata !DIExpression()), !dbg !3027
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !3028, metadata !DIExpression()), !dbg !3029
  store %union.tree_node* %out_op, %union.tree_node** %out_op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %out_op.addr, metadata !3030, metadata !DIExpression()), !dbg !3031
  %0 = load i32, i32* %index.addr, align 4, !dbg !3032
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3032
  %gimple_asm = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_asm*, !dbg !3032
  %no = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm, i32 0, i32 3, !dbg !3032
  %2 = load i8, i8* %no, align 1, !dbg !3032
  %conv = zext i8 %2 to i32, !dbg !3032
  %cmp = icmp ule i32 %0, %conv, !dbg !3032
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !3032

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 2676, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !3032
  br label %cond.end, !dbg !3032

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3032

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3032
  %3 = load %union.tree_node*, %union.tree_node** %out_op.addr, align 8, !dbg !3033
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !3033
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !3033
  %bf.load = load i64, i64* %4, align 8, !dbg !3033
  %bf.clear = and i64 %bf.load, 65535, !dbg !3033
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3033
  %cmp2 = icmp eq i32 %bf.cast, 2, !dbg !3033
  br i1 %cmp2, label %cond.false5, label %cond.true4, !dbg !3033

cond.true4:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 2677, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !3033
  br label %cond.end6, !dbg !3033

cond.false5:                                      ; preds = %cond.end
  br label %cond.end6, !dbg !3033

cond.end6:                                        ; preds = %cond.false5, %cond.true4
  %cond7 = phi i32 [ 0, %cond.true4 ], [ 0, %cond.false5 ], !dbg !3033
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3034
  %6 = load i32, i32* %index.addr, align 4, !dbg !3035
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3036
  %gimple_asm8 = bitcast %union.gimple_statement_d* %7 to %struct.gimple_statement_asm*, !dbg !3037
  %ni = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm8, i32 0, i32 2, !dbg !3038
  %8 = load i8, i8* %ni, align 8, !dbg !3038
  %conv9 = zext i8 %8 to i32, !dbg !3036
  %add = add i32 %6, %conv9, !dbg !3039
  %9 = load %union.tree_node*, %union.tree_node** %out_op.addr, align 8, !dbg !3040
  call void @gimple_set_op(%union.gimple_statement_d* %5, i32 %add, %union.tree_node* %9), !dbg !3041
  ret void, !dbg !3042
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_asm_set_clobber_op(%union.gimple_statement_d* %gs, i32 %index, %union.tree_node* %clobber_op) #0 !dbg !3043 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  %clobber_op.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3044, metadata !DIExpression()), !dbg !3045
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !3046, metadata !DIExpression()), !dbg !3047
  store %union.tree_node* %clobber_op, %union.tree_node** %clobber_op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %clobber_op.addr, metadata !3048, metadata !DIExpression()), !dbg !3049
  %0 = load i32, i32* %index.addr, align 4, !dbg !3050
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3050
  %gimple_asm = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_asm*, !dbg !3050
  %nc = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm, i32 0, i32 4, !dbg !3050
  %2 = load i8, i8* %nc, align 2, !dbg !3050
  %conv = zext i8 %2 to i32, !dbg !3050
  %cmp = icmp ule i32 %0, %conv, !dbg !3050
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !3050

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 2699, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !3050
  br label %cond.end, !dbg !3050

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3050

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3050
  %3 = load %union.tree_node*, %union.tree_node** %clobber_op.addr, align 8, !dbg !3051
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !3051
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !3051
  %bf.load = load i64, i64* %4, align 8, !dbg !3051
  %bf.clear = and i64 %bf.load, 65535, !dbg !3051
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3051
  %cmp2 = icmp eq i32 %bf.cast, 2, !dbg !3051
  br i1 %cmp2, label %cond.false5, label %cond.true4, !dbg !3051

cond.true4:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 2700, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !3051
  br label %cond.end6, !dbg !3051

cond.false5:                                      ; preds = %cond.end
  br label %cond.end6, !dbg !3051

cond.end6:                                        ; preds = %cond.false5, %cond.true4
  %cond7 = phi i32 [ 0, %cond.true4 ], [ 0, %cond.false5 ], !dbg !3051
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3052
  %6 = load i32, i32* %index.addr, align 4, !dbg !3053
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3054
  %gimple_asm8 = bitcast %union.gimple_statement_d* %7 to %struct.gimple_statement_asm*, !dbg !3055
  %ni = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm8, i32 0, i32 2, !dbg !3056
  %8 = load i8, i8* %ni, align 8, !dbg !3056
  %conv9 = zext i8 %8 to i32, !dbg !3054
  %add = add i32 %6, %conv9, !dbg !3057
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3058
  %gimple_asm10 = bitcast %union.gimple_statement_d* %9 to %struct.gimple_statement_asm*, !dbg !3059
  %no = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm10, i32 0, i32 3, !dbg !3060
  %10 = load i8, i8* %no, align 1, !dbg !3060
  %conv11 = zext i8 %10 to i32, !dbg !3058
  %add12 = add i32 %add, %conv11, !dbg !3061
  %11 = load %union.tree_node*, %union.tree_node** %clobber_op.addr, align 8, !dbg !3062
  call void @gimple_set_op(%union.gimple_statement_d* %5, i32 %add12, %union.tree_node* %11), !dbg !3063
  ret void, !dbg !3064
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_asm_set_label_op(%union.gimple_statement_d* %gs, i32 %index, %union.tree_node* %label_op) #0 !dbg !3065 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  %label_op.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3066, metadata !DIExpression()), !dbg !3067
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !3068, metadata !DIExpression()), !dbg !3069
  store %union.tree_node* %label_op, %union.tree_node** %label_op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %label_op.addr, metadata !3070, metadata !DIExpression()), !dbg !3071
  %0 = load i32, i32* %index.addr, align 4, !dbg !3072
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3072
  %gimple_asm = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_asm*, !dbg !3072
  %nl = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm, i32 0, i32 5, !dbg !3072
  %2 = load i8, i8* %nl, align 1, !dbg !3072
  %conv = zext i8 %2 to i32, !dbg !3072
  %cmp = icmp ule i32 %0, %conv, !dbg !3072
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !3072

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 2720, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !3072
  br label %cond.end, !dbg !3072

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3072

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3072
  %3 = load %union.tree_node*, %union.tree_node** %label_op.addr, align 8, !dbg !3073
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !3073
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !3073
  %bf.load = load i64, i64* %4, align 8, !dbg !3073
  %bf.clear = and i64 %bf.load, 65535, !dbg !3073
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3073
  %cmp2 = icmp eq i32 %bf.cast, 2, !dbg !3073
  br i1 %cmp2, label %cond.false5, label %cond.true4, !dbg !3073

cond.true4:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 2721, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !3073
  br label %cond.end6, !dbg !3073

cond.false5:                                      ; preds = %cond.end
  br label %cond.end6, !dbg !3073

cond.end6:                                        ; preds = %cond.false5, %cond.true4
  %cond7 = phi i32 [ 0, %cond.true4 ], [ 0, %cond.false5 ], !dbg !3073
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3074
  %6 = load i32, i32* %index.addr, align 4, !dbg !3075
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3076
  %gimple_asm8 = bitcast %union.gimple_statement_d* %7 to %struct.gimple_statement_asm*, !dbg !3077
  %ni = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm8, i32 0, i32 2, !dbg !3078
  %8 = load i8, i8* %ni, align 8, !dbg !3078
  %conv9 = zext i8 %8 to i32, !dbg !3076
  %add = add i32 %6, %conv9, !dbg !3079
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3080
  %gimple_asm10 = bitcast %union.gimple_statement_d* %9 to %struct.gimple_statement_asm*, !dbg !3081
  %nc = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm10, i32 0, i32 4, !dbg !3082
  %10 = load i8, i8* %nc, align 2, !dbg !3082
  %conv11 = zext i8 %10 to i32, !dbg !3080
  %add12 = add i32 %add, %conv11, !dbg !3083
  %11 = load %union.tree_node*, %union.tree_node** %label_op.addr, align 8, !dbg !3084
  call void @gimple_set_op(%union.gimple_statement_d* %5, i32 %add12, %union.tree_node* %11), !dbg !3085
  ret void, !dbg !3086
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_catch(%union.tree_node* %types, %struct.gimple_seq_d* %handler) #0 !dbg !3087 {
entry:
  %types.addr = alloca %union.tree_node*, align 8
  %handler.addr = alloca %struct.gimple_seq_d*, align 8
  %p = alloca %union.gimple_statement_d*, align 8
  store %union.tree_node* %types, %union.tree_node** %types.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %types.addr, metadata !3090, metadata !DIExpression()), !dbg !3091
  store %struct.gimple_seq_d* %handler, %struct.gimple_seq_d** %handler.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %handler.addr, metadata !3092, metadata !DIExpression()), !dbg !3093
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %p, metadata !3094, metadata !DIExpression()), !dbg !3095
  %call = call %union.gimple_statement_d* @gimple_alloc_stat(i32 11, i32 0), !dbg !3096
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %p, align 8, !dbg !3095
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3097
  %1 = load %union.tree_node*, %union.tree_node** %types.addr, align 8, !dbg !3098
  call void @gimple_catch_set_types(%union.gimple_statement_d* %0, %union.tree_node* %1), !dbg !3099
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %handler.addr, align 8, !dbg !3100
  %tobool = icmp ne %struct.gimple_seq_d* %2, null, !dbg !3100
  br i1 %tobool, label %if.then, label %if.end, !dbg !3102

if.then:                                          ; preds = %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3103
  %4 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %handler.addr, align 8, !dbg !3104
  call void @gimple_catch_set_handler(%union.gimple_statement_d* %3, %struct.gimple_seq_d* %4), !dbg !3105
  br label %if.end, !dbg !3105

if.end:                                           ; preds = %if.then, %entry
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3106
  ret %union.gimple_statement_d* %5, !dbg !3107
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_catch_set_types(%union.gimple_statement_d* %gs, %union.tree_node* %t) #0 !dbg !3108 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %t.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3109, metadata !DIExpression()), !dbg !3110
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !3111, metadata !DIExpression()), !dbg !3112
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3113
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3114
  %gimple_catch = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_catch*, !dbg !3115
  %types = getelementptr inbounds %struct.gimple_statement_catch, %struct.gimple_statement_catch* %gimple_catch, i32 0, i32 1, !dbg !3116
  store %union.tree_node* %0, %union.tree_node** %types, align 8, !dbg !3117
  ret void, !dbg !3118
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_catch_set_handler(%union.gimple_statement_d* %gs, %struct.gimple_seq_d* %handler) #0 !dbg !3119 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %handler.addr = alloca %struct.gimple_seq_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3120, metadata !DIExpression()), !dbg !3121
  store %struct.gimple_seq_d* %handler, %struct.gimple_seq_d** %handler.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %handler.addr, metadata !3122, metadata !DIExpression()), !dbg !3123
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %handler.addr, align 8, !dbg !3124
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3125
  %gimple_catch = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_catch*, !dbg !3126
  %handler1 = getelementptr inbounds %struct.gimple_statement_catch, %struct.gimple_statement_catch* %gimple_catch, i32 0, i32 2, !dbg !3127
  store %struct.gimple_seq_d* %0, %struct.gimple_seq_d** %handler1, align 8, !dbg !3128
  ret void, !dbg !3129
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_eh_filter(%union.tree_node* %types, %struct.gimple_seq_d* %failure) #0 !dbg !3130 {
entry:
  %types.addr = alloca %union.tree_node*, align 8
  %failure.addr = alloca %struct.gimple_seq_d*, align 8
  %p = alloca %union.gimple_statement_d*, align 8
  store %union.tree_node* %types, %union.tree_node** %types.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %types.addr, metadata !3131, metadata !DIExpression()), !dbg !3132
  store %struct.gimple_seq_d* %failure, %struct.gimple_seq_d** %failure.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %failure.addr, metadata !3133, metadata !DIExpression()), !dbg !3134
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %p, metadata !3135, metadata !DIExpression()), !dbg !3136
  %call = call %union.gimple_statement_d* @gimple_alloc_stat(i32 12, i32 0), !dbg !3137
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %p, align 8, !dbg !3136
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3138
  %1 = load %union.tree_node*, %union.tree_node** %types.addr, align 8, !dbg !3139
  call void @gimple_eh_filter_set_types(%union.gimple_statement_d* %0, %union.tree_node* %1), !dbg !3140
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %failure.addr, align 8, !dbg !3141
  %tobool = icmp ne %struct.gimple_seq_d* %2, null, !dbg !3141
  br i1 %tobool, label %if.then, label %if.end, !dbg !3143

if.then:                                          ; preds = %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3144
  %4 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %failure.addr, align 8, !dbg !3145
  call void @gimple_eh_filter_set_failure(%union.gimple_statement_d* %3, %struct.gimple_seq_d* %4), !dbg !3146
  br label %if.end, !dbg !3146

if.end:                                           ; preds = %if.then, %entry
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3147
  ret %union.gimple_statement_d* %5, !dbg !3148
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_eh_filter_set_types(%union.gimple_statement_d* %gs, %union.tree_node* %types) #0 !dbg !3149 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %types.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3150, metadata !DIExpression()), !dbg !3151
  store %union.tree_node* %types, %union.tree_node** %types.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %types.addr, metadata !3152, metadata !DIExpression()), !dbg !3153
  %0 = load %union.tree_node*, %union.tree_node** %types.addr, align 8, !dbg !3154
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3155
  %gimple_eh_filter = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_eh_filter*, !dbg !3156
  %types1 = getelementptr inbounds %struct.gimple_statement_eh_filter, %struct.gimple_statement_eh_filter* %gimple_eh_filter, i32 0, i32 1, !dbg !3157
  store %union.tree_node* %0, %union.tree_node** %types1, align 8, !dbg !3158
  ret void, !dbg !3159
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_eh_filter_set_failure(%union.gimple_statement_d* %gs, %struct.gimple_seq_d* %failure) #0 !dbg !3160 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %failure.addr = alloca %struct.gimple_seq_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3161, metadata !DIExpression()), !dbg !3162
  store %struct.gimple_seq_d* %failure, %struct.gimple_seq_d** %failure.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %failure.addr, metadata !3163, metadata !DIExpression()), !dbg !3164
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %failure.addr, align 8, !dbg !3165
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3166
  %gimple_eh_filter = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_eh_filter*, !dbg !3167
  %failure1 = getelementptr inbounds %struct.gimple_statement_eh_filter, %struct.gimple_statement_eh_filter* %gimple_eh_filter, i32 0, i32 2, !dbg !3168
  store %struct.gimple_seq_d* %0, %struct.gimple_seq_d** %failure1, align 8, !dbg !3169
  ret void, !dbg !3170
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_eh_must_not_throw(%union.tree_node* %decl) #0 !dbg !3171 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %p = alloca %union.gimple_statement_d*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !3172, metadata !DIExpression()), !dbg !3173
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %p, metadata !3174, metadata !DIExpression()), !dbg !3175
  %call = call %union.gimple_statement_d* @gimple_alloc_stat(i32 13, i32 1), !dbg !3176
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %p, align 8, !dbg !3175
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3177
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !3177
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !3177
  %bf.load = load i64, i64* %1, align 8, !dbg !3177
  %bf.clear = and i64 %bf.load, 65535, !dbg !3177
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3177
  %cmp = icmp eq i32 %bf.cast, 29, !dbg !3177
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !3177

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 625, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !3177
  br label %cond.end, !dbg !3177

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3177

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3177
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3178
  %call1 = call i32 @flags_from_decl_or_type(%union.tree_node* %2), !dbg !3178
  %and = and i32 %call1, 8, !dbg !3178
  %tobool = icmp ne i32 %and, 0, !dbg !3178
  br i1 %tobool, label %cond.false3, label %cond.true2, !dbg !3178

cond.true2:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 626, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !3178
  br label %cond.end4, !dbg !3178

cond.false3:                                      ; preds = %cond.end
  br label %cond.end4, !dbg !3178

cond.end4:                                        ; preds = %cond.false3, %cond.true2
  %cond5 = phi i32 [ 0, %cond.true2 ], [ 0, %cond.false3 ], !dbg !3178
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3179
  %4 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3180
  call void @gimple_eh_must_not_throw_set_fndecl(%union.gimple_statement_d* %3, %union.tree_node* %4), !dbg !3181
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3182
  ret %union.gimple_statement_d* %5, !dbg !3183
}

declare dso_local i32 @flags_from_decl_or_type(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_eh_must_not_throw_set_fndecl(%union.gimple_statement_d* %gs, %union.tree_node* %decl) #0 !dbg !3184 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3185, metadata !DIExpression()), !dbg !3186
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !3187, metadata !DIExpression()), !dbg !3188
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3189
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3190
  %gimple_eh_mnt = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_eh_mnt*, !dbg !3191
  %fndecl = getelementptr inbounds %struct.gimple_statement_eh_mnt, %struct.gimple_statement_eh_mnt* %gimple_eh_mnt, i32 0, i32 1, !dbg !3192
  store %union.tree_node* %0, %union.tree_node** %fndecl, align 8, !dbg !3193
  ret void, !dbg !3194
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_try(%struct.gimple_seq_d* %eval, %struct.gimple_seq_d* %cleanup, i32 %kind) #0 !dbg !3195 {
entry:
  %eval.addr = alloca %struct.gimple_seq_d*, align 8
  %cleanup.addr = alloca %struct.gimple_seq_d*, align 8
  %kind.addr = alloca i32, align 4
  %p = alloca %union.gimple_statement_d*, align 8
  store %struct.gimple_seq_d* %eval, %struct.gimple_seq_d** %eval.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %eval.addr, metadata !3198, metadata !DIExpression()), !dbg !3199
  store %struct.gimple_seq_d* %cleanup, %struct.gimple_seq_d** %cleanup.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %cleanup.addr, metadata !3200, metadata !DIExpression()), !dbg !3201
  store i32 %kind, i32* %kind.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %kind.addr, metadata !3202, metadata !DIExpression()), !dbg !3203
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %p, metadata !3204, metadata !DIExpression()), !dbg !3205
  %0 = load i32, i32* %kind.addr, align 4, !dbg !3206
  %cmp = icmp eq i32 %0, 1, !dbg !3206
  br i1 %cmp, label %cond.false, label %lor.lhs.false, !dbg !3206

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %kind.addr, align 4, !dbg !3206
  %cmp1 = icmp eq i32 %1, 2, !dbg !3206
  br i1 %cmp1, label %cond.false, label %cond.true, !dbg !3206

cond.true:                                        ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 645, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !3206
  br label %cond.end, !dbg !3206

cond.false:                                       ; preds = %lor.lhs.false, %entry
  br label %cond.end, !dbg !3206

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3206
  %call = call %union.gimple_statement_d* @gimple_alloc_stat(i32 17, i32 0), !dbg !3207
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %p, align 8, !dbg !3208
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3209
  %3 = load i32, i32* %kind.addr, align 4, !dbg !3210
  call void @gimple_set_subcode(%union.gimple_statement_d* %2, i32 %3), !dbg !3211
  %4 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %eval.addr, align 8, !dbg !3212
  %tobool = icmp ne %struct.gimple_seq_d* %4, null, !dbg !3212
  br i1 %tobool, label %if.then, label %if.end, !dbg !3214

if.then:                                          ; preds = %cond.end
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3215
  %6 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %eval.addr, align 8, !dbg !3216
  call void @gimple_try_set_eval(%union.gimple_statement_d* %5, %struct.gimple_seq_d* %6), !dbg !3217
  br label %if.end, !dbg !3217

if.end:                                           ; preds = %if.then, %cond.end
  %7 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %cleanup.addr, align 8, !dbg !3218
  %tobool2 = icmp ne %struct.gimple_seq_d* %7, null, !dbg !3218
  br i1 %tobool2, label %if.then3, label %if.end4, !dbg !3220

if.then3:                                         ; preds = %if.end
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3221
  %9 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %cleanup.addr, align 8, !dbg !3222
  call void @gimple_try_set_cleanup(%union.gimple_statement_d* %8, %struct.gimple_seq_d* %9), !dbg !3223
  br label %if.end4, !dbg !3223

if.end4:                                          ; preds = %if.then3, %if.end
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3224
  ret %union.gimple_statement_d* %10, !dbg !3225
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_subcode(%union.gimple_statement_d* %g, i32 %subcode) #0 !dbg !3226 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  %subcode.addr = alloca i32, align 4
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !3227, metadata !DIExpression()), !dbg !3228
  store i32 %subcode, i32* %subcode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %subcode.addr, metadata !3229, metadata !DIExpression()), !dbg !3230
  %0 = load i32, i32* %subcode.addr, align 4, !dbg !3231
  %cmp = icmp ult i32 %0, 65536, !dbg !3231
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !3231

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 166, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !3231
  br label %cond.end, !dbg !3231

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3231

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3231
  %1 = load i32, i32* %subcode.addr, align 4, !dbg !3232
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3233
  %gsbase = bitcast %union.gimple_statement_d* %2 to %struct.gimple_statement_base*, !dbg !3234
  %3 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !3235
  %bf.load = load i32, i32* %3, align 8, !dbg !3236
  %bf.value = and i32 %1, 65535, !dbg !3236
  %bf.shl = shl i32 %bf.value, 16, !dbg !3236
  %bf.clear = and i32 %bf.load, 65535, !dbg !3236
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !3236
  store i32 %bf.set, i32* %3, align 8, !dbg !3236
  ret void, !dbg !3237
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_try_set_eval(%union.gimple_statement_d* %gs, %struct.gimple_seq_d* %eval) #0 !dbg !3238 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %eval.addr = alloca %struct.gimple_seq_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3239, metadata !DIExpression()), !dbg !3240
  store %struct.gimple_seq_d* %eval, %struct.gimple_seq_d** %eval.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %eval.addr, metadata !3241, metadata !DIExpression()), !dbg !3242
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %eval.addr, align 8, !dbg !3243
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3244
  %gimple_try = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_try*, !dbg !3245
  %eval1 = getelementptr inbounds %struct.gimple_statement_try, %struct.gimple_statement_try* %gimple_try, i32 0, i32 1, !dbg !3246
  store %struct.gimple_seq_d* %0, %struct.gimple_seq_d** %eval1, align 8, !dbg !3247
  ret void, !dbg !3248
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_try_set_cleanup(%union.gimple_statement_d* %gs, %struct.gimple_seq_d* %cleanup) #0 !dbg !3249 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %cleanup.addr = alloca %struct.gimple_seq_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3250, metadata !DIExpression()), !dbg !3251
  store %struct.gimple_seq_d* %cleanup, %struct.gimple_seq_d** %cleanup.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %cleanup.addr, metadata !3252, metadata !DIExpression()), !dbg !3253
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %cleanup.addr, align 8, !dbg !3254
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3255
  %gimple_try = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_try*, !dbg !3256
  %cleanup1 = getelementptr inbounds %struct.gimple_statement_try, %struct.gimple_statement_try* %gimple_try, i32 0, i32 2, !dbg !3257
  store %struct.gimple_seq_d* %0, %struct.gimple_seq_d** %cleanup1, align 8, !dbg !3258
  ret void, !dbg !3259
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_wce(%struct.gimple_seq_d* %cleanup) #0 !dbg !3260 {
entry:
  %cleanup.addr = alloca %struct.gimple_seq_d*, align 8
  %p = alloca %union.gimple_statement_d*, align 8
  store %struct.gimple_seq_d* %cleanup, %struct.gimple_seq_d** %cleanup.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %cleanup.addr, metadata !3263, metadata !DIExpression()), !dbg !3264
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %p, metadata !3265, metadata !DIExpression()), !dbg !3266
  %call = call %union.gimple_statement_d* @gimple_alloc_stat(i32 34, i32 0), !dbg !3267
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %p, align 8, !dbg !3266
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %cleanup.addr, align 8, !dbg !3268
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !3268
  br i1 %tobool, label %if.then, label %if.end, !dbg !3270

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3271
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %cleanup.addr, align 8, !dbg !3272
  call void @gimple_wce_set_cleanup(%union.gimple_statement_d* %1, %struct.gimple_seq_d* %2), !dbg !3273
  br label %if.end, !dbg !3273

if.end:                                           ; preds = %if.then, %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3274
  ret %union.gimple_statement_d* %3, !dbg !3275
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_wce_set_cleanup(%union.gimple_statement_d* %gs, %struct.gimple_seq_d* %cleanup) #0 !dbg !3276 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %cleanup.addr = alloca %struct.gimple_seq_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3277, metadata !DIExpression()), !dbg !3278
  store %struct.gimple_seq_d* %cleanup, %struct.gimple_seq_d** %cleanup.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %cleanup.addr, metadata !3279, metadata !DIExpression()), !dbg !3280
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %cleanup.addr, align 8, !dbg !3281
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3282
  %gimple_wce = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_wce*, !dbg !3283
  %cleanup1 = getelementptr inbounds %struct.gimple_statement_wce, %struct.gimple_statement_wce* %gimple_wce, i32 0, i32 1, !dbg !3284
  store %struct.gimple_seq_d* %0, %struct.gimple_seq_d** %cleanup1, align 8, !dbg !3285
  ret void, !dbg !3286
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_resx(i32 %region) #0 !dbg !3287 {
entry:
  %region.addr = alloca i32, align 4
  %p = alloca %union.gimple_statement_d*, align 8
  store i32 %region, i32* %region.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %region.addr, metadata !3290, metadata !DIExpression()), !dbg !3291
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %p, metadata !3292, metadata !DIExpression()), !dbg !3293
  %call = call %union.gimple_statement_d* @gimple_build_with_ops_stat(i32 14, i32 0, i32 0), !dbg !3294
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %p, align 8, !dbg !3293
  %0 = load i32, i32* %region.addr, align 4, !dbg !3295
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3296
  %gimple_eh_ctrl = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_eh_ctrl*, !dbg !3297
  %region1 = getelementptr inbounds %struct.gimple_statement_eh_ctrl, %struct.gimple_statement_eh_ctrl* %gimple_eh_ctrl, i32 0, i32 1, !dbg !3298
  store i32 %0, i32* %region1, align 8, !dbg !3299
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3300
  ret %union.gimple_statement_d* %2, !dbg !3301
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_switch_nlabels(i32 %nlabels, %union.tree_node* %index, %union.tree_node* %default_label) #0 !dbg !3302 {
entry:
  %nlabels.addr = alloca i32, align 4
  %index.addr = alloca %union.tree_node*, align 8
  %default_label.addr = alloca %union.tree_node*, align 8
  %p = alloca %union.gimple_statement_d*, align 8
  store i32 %nlabels, i32* %nlabels.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %nlabels.addr, metadata !3305, metadata !DIExpression()), !dbg !3306
  store %union.tree_node* %index, %union.tree_node** %index.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %index.addr, metadata !3307, metadata !DIExpression()), !dbg !3308
  store %union.tree_node* %default_label, %union.tree_node** %default_label.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %default_label.addr, metadata !3309, metadata !DIExpression()), !dbg !3310
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %p, metadata !3311, metadata !DIExpression()), !dbg !3312
  %0 = load %union.tree_node*, %union.tree_node** %default_label.addr, align 8, !dbg !3313
  %cmp = icmp ne %union.tree_node* %0, null, !dbg !3313
  %conv = zext i1 %cmp to i32, !dbg !3313
  %add = add nsw i32 1, %conv, !dbg !3313
  %1 = load i32, i32* %nlabels.addr, align 4, !dbg !3313
  %add1 = add i32 %add, %1, !dbg !3313
  %call = call %union.gimple_statement_d* @gimple_build_with_ops_stat(i32 5, i32 0, i32 %add1), !dbg !3313
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %p, align 8, !dbg !3312
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3314
  %3 = load %union.tree_node*, %union.tree_node** %index.addr, align 8, !dbg !3315
  call void @gimple_switch_set_index(%union.gimple_statement_d* %2, %union.tree_node* %3), !dbg !3316
  %4 = load %union.tree_node*, %union.tree_node** %default_label.addr, align 8, !dbg !3317
  %tobool = icmp ne %union.tree_node* %4, null, !dbg !3317
  br i1 %tobool, label %if.then, label %if.end, !dbg !3319

if.then:                                          ; preds = %entry
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3320
  %6 = load %union.tree_node*, %union.tree_node** %default_label.addr, align 8, !dbg !3321
  call void @gimple_switch_set_default_label(%union.gimple_statement_d* %5, %union.tree_node* %6), !dbg !3322
  br label %if.end, !dbg !3322

if.end:                                           ; preds = %if.then, %entry
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3323
  ret %union.gimple_statement_d* %7, !dbg !3324
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_switch_set_index(%union.gimple_statement_d* %gs, %union.tree_node* %index) #0 !dbg !3325 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3326, metadata !DIExpression()), !dbg !3327
  store %union.tree_node* %index, %union.tree_node** %index.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %index.addr, metadata !3328, metadata !DIExpression()), !dbg !3329
  %0 = load %union.tree_node*, %union.tree_node** %index.addr, align 8, !dbg !3330
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !3330
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !3330
  %bf.load = load i64, i64* %1, align 8, !dbg !3330
  %bf.clear = and i64 %bf.load, 65535, !dbg !3330
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3330
  %cmp = icmp eq i32 %bf.cast, 32, !dbg !3330
  br i1 %cmp, label %cond.false, label %lor.lhs.false, !dbg !3330

lor.lhs.false:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %index.addr, align 8, !dbg !3330
  %base1 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !3330
  %3 = bitcast %struct.tree_base* %base1 to i64*, !dbg !3330
  %bf.load2 = load i64, i64* %3, align 8, !dbg !3330
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !3330
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !3330
  %cmp5 = icmp eq i32 %bf.cast4, 34, !dbg !3330
  br i1 %cmp5, label %cond.false, label %lor.lhs.false6, !dbg !3330

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %4 = load %union.tree_node*, %union.tree_node** %index.addr, align 8, !dbg !3330
  %base7 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !3330
  %5 = bitcast %struct.tree_base* %base7 to i64*, !dbg !3330
  %bf.load8 = load i64, i64* %5, align 8, !dbg !3330
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !3330
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !3330
  %cmp11 = icmp eq i32 %bf.cast10, 36, !dbg !3330
  br i1 %cmp11, label %cond.false, label %lor.lhs.false12, !dbg !3330

lor.lhs.false12:                                  ; preds = %lor.lhs.false6
  %6 = load %union.tree_node*, %union.tree_node** %index.addr, align 8, !dbg !3330
  %base13 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !3330
  %7 = bitcast %struct.tree_base* %base13 to i64*, !dbg !3330
  %bf.load14 = load i64, i64* %7, align 8, !dbg !3330
  %bf.clear15 = and i64 %bf.load14, 65535, !dbg !3330
  %bf.cast16 = trunc i64 %bf.clear15 to i32, !dbg !3330
  %cmp17 = icmp eq i32 %bf.cast16, 141, !dbg !3330
  br i1 %cmp17, label %land.lhs.true, label %lor.lhs.false39, !dbg !3330

land.lhs.true:                                    ; preds = %lor.lhs.false12
  %8 = load %union.tree_node*, %union.tree_node** %index.addr, align 8, !dbg !3330
  %ssa_name = bitcast %union.tree_node* %8 to %struct.tree_ssa_name*, !dbg !3330
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !3330
  %9 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !3330
  %base18 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !3330
  %10 = bitcast %struct.tree_base* %base18 to i64*, !dbg !3330
  %bf.load19 = load i64, i64* %10, align 8, !dbg !3330
  %bf.clear20 = and i64 %bf.load19, 65535, !dbg !3330
  %bf.cast21 = trunc i64 %bf.clear20 to i32, !dbg !3330
  %cmp22 = icmp eq i32 %bf.cast21, 32, !dbg !3330
  br i1 %cmp22, label %cond.false, label %lor.lhs.false23, !dbg !3330

lor.lhs.false23:                                  ; preds = %land.lhs.true
  %11 = load %union.tree_node*, %union.tree_node** %index.addr, align 8, !dbg !3330
  %ssa_name24 = bitcast %union.tree_node* %11 to %struct.tree_ssa_name*, !dbg !3330
  %var25 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name24, i32 0, i32 1, !dbg !3330
  %12 = load %union.tree_node*, %union.tree_node** %var25, align 8, !dbg !3330
  %base26 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !3330
  %13 = bitcast %struct.tree_base* %base26 to i64*, !dbg !3330
  %bf.load27 = load i64, i64* %13, align 8, !dbg !3330
  %bf.clear28 = and i64 %bf.load27, 65535, !dbg !3330
  %bf.cast29 = trunc i64 %bf.clear28 to i32, !dbg !3330
  %cmp30 = icmp eq i32 %bf.cast29, 34, !dbg !3330
  br i1 %cmp30, label %cond.false, label %lor.lhs.false31, !dbg !3330

lor.lhs.false31:                                  ; preds = %lor.lhs.false23
  %14 = load %union.tree_node*, %union.tree_node** %index.addr, align 8, !dbg !3330
  %ssa_name32 = bitcast %union.tree_node* %14 to %struct.tree_ssa_name*, !dbg !3330
  %var33 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name32, i32 0, i32 1, !dbg !3330
  %15 = load %union.tree_node*, %union.tree_node** %var33, align 8, !dbg !3330
  %base34 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !3330
  %16 = bitcast %struct.tree_base* %base34 to i64*, !dbg !3330
  %bf.load35 = load i64, i64* %16, align 8, !dbg !3330
  %bf.clear36 = and i64 %bf.load35, 65535, !dbg !3330
  %bf.cast37 = trunc i64 %bf.clear36 to i32, !dbg !3330
  %cmp38 = icmp eq i32 %bf.cast37, 36, !dbg !3330
  br i1 %cmp38, label %cond.false, label %lor.lhs.false39, !dbg !3330

lor.lhs.false39:                                  ; preds = %lor.lhs.false31, %lor.lhs.false12
  %17 = load %union.tree_node*, %union.tree_node** %index.addr, align 8, !dbg !3330
  %base40 = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !3330
  %18 = bitcast %struct.tree_base* %base40 to i64*, !dbg !3330
  %bf.load41 = load i64, i64* %18, align 8, !dbg !3330
  %bf.clear42 = and i64 %bf.load41, 65535, !dbg !3330
  %bf.cast43 = trunc i64 %bf.clear42 to i32, !dbg !3330
  %idxprom = sext i32 %bf.cast43 to i64, !dbg !3330
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !3330
  %19 = load i32, i32* %arrayidx, align 4, !dbg !3330
  %cmp44 = icmp eq i32 %19, 1, !dbg !3330
  br i1 %cmp44, label %cond.false, label %cond.true, !dbg !3330

cond.true:                                        ; preds = %lor.lhs.false39
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 3203, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !3330
  br label %cond.end, !dbg !3330

cond.false:                                       ; preds = %lor.lhs.false39, %lor.lhs.false31, %lor.lhs.false23, %land.lhs.true, %lor.lhs.false6, %lor.lhs.false, %entry
  br label %cond.end, !dbg !3330

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3330
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3331
  %21 = load %union.tree_node*, %union.tree_node** %index.addr, align 8, !dbg !3332
  call void @gimple_set_op(%union.gimple_statement_d* %20, i32 0, %union.tree_node* %21), !dbg !3333
  ret void, !dbg !3334
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_switch_set_default_label(%union.gimple_statement_d* %gs, %union.tree_node* %label) #0 !dbg !3335 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %label.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3336, metadata !DIExpression()), !dbg !3337
  store %union.tree_node* %label, %union.tree_node** %label.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %label.addr, metadata !3338, metadata !DIExpression()), !dbg !3339
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3340
  %1 = load %union.tree_node*, %union.tree_node** %label.addr, align 8, !dbg !3341
  call void @gimple_switch_set_label(%union.gimple_statement_d* %0, i32 0, %union.tree_node* %1), !dbg !3342
  ret void, !dbg !3343
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_switch(i32 %nlabels, %union.tree_node* %index, %union.tree_node* %default_label, ...) #0 !dbg !3344 {
entry:
  %nlabels.addr = alloca i32, align 4
  %index.addr = alloca %union.tree_node*, align 8
  %default_label.addr = alloca %union.tree_node*, align 8
  %al = alloca [1 x %struct.__va_list_tag], align 16
  %i = alloca i32, align 4
  %offset = alloca i32, align 4
  %p = alloca %union.gimple_statement_d*, align 8
  store i32 %nlabels, i32* %nlabels.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %nlabels.addr, metadata !3347, metadata !DIExpression()), !dbg !3348
  store %union.tree_node* %index, %union.tree_node** %index.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %index.addr, metadata !3349, metadata !DIExpression()), !dbg !3350
  store %union.tree_node* %default_label, %union.tree_node** %default_label.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %default_label.addr, metadata !3351, metadata !DIExpression()), !dbg !3352
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %al, metadata !3353, metadata !DIExpression()), !dbg !3354
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3355, metadata !DIExpression()), !dbg !3356
  call void @llvm.dbg.declare(metadata i32* %offset, metadata !3357, metadata !DIExpression()), !dbg !3358
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %p, metadata !3359, metadata !DIExpression()), !dbg !3360
  %0 = load i32, i32* %nlabels.addr, align 4, !dbg !3361
  %1 = load %union.tree_node*, %union.tree_node** %index.addr, align 8, !dbg !3362
  %2 = load %union.tree_node*, %union.tree_node** %default_label.addr, align 8, !dbg !3363
  %call = call %union.gimple_statement_d* @gimple_build_switch_nlabels(i32 %0, %union.tree_node* %1, %union.tree_node* %2), !dbg !3364
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %p, align 8, !dbg !3360
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %al, i64 0, i64 0, !dbg !3365
  %arraydecay1 = bitcast %struct.__va_list_tag* %arraydecay to i8*, !dbg !3365
  call void @llvm.va_start(i8* %arraydecay1), !dbg !3365
  %3 = load %union.tree_node*, %union.tree_node** %default_label.addr, align 8, !dbg !3366
  %cmp = icmp ne %union.tree_node* %3, null, !dbg !3367
  %conv = zext i1 %cmp to i32, !dbg !3367
  store i32 %conv, i32* %offset, align 4, !dbg !3368
  store i32 0, i32* %i, align 4, !dbg !3369
  br label %for.cond, !dbg !3371

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4, !dbg !3372
  %5 = load i32, i32* %nlabels.addr, align 4, !dbg !3374
  %cmp2 = icmp ult i32 %4, %5, !dbg !3375
  br i1 %cmp2, label %for.body, label %for.end, !dbg !3376

for.body:                                         ; preds = %for.cond
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3377
  %7 = load i32, i32* %i, align 4, !dbg !3378
  %8 = load i32, i32* %offset, align 4, !dbg !3379
  %add = add i32 %7, %8, !dbg !3380
  %arraydecay4 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %al, i64 0, i64 0, !dbg !3381
  %gp_offset_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay4, i32 0, i32 0, !dbg !3381
  %gp_offset = load i32, i32* %gp_offset_p, align 16, !dbg !3381
  %fits_in_gp = icmp ule i32 %gp_offset, 40, !dbg !3381
  br i1 %fits_in_gp, label %vaarg.in_reg, label %vaarg.in_mem, !dbg !3381

vaarg.in_reg:                                     ; preds = %for.body
  %9 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay4, i32 0, i32 3, !dbg !3381
  %reg_save_area = load i8*, i8** %9, align 16, !dbg !3381
  %10 = getelementptr i8, i8* %reg_save_area, i32 %gp_offset, !dbg !3381
  %11 = bitcast i8* %10 to %union.tree_node**, !dbg !3381
  %12 = add i32 %gp_offset, 8, !dbg !3381
  store i32 %12, i32* %gp_offset_p, align 16, !dbg !3381
  br label %vaarg.end, !dbg !3381

vaarg.in_mem:                                     ; preds = %for.body
  %overflow_arg_area_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay4, i32 0, i32 2, !dbg !3381
  %overflow_arg_area = load i8*, i8** %overflow_arg_area_p, align 8, !dbg !3381
  %13 = bitcast i8* %overflow_arg_area to %union.tree_node**, !dbg !3381
  %overflow_arg_area.next = getelementptr i8, i8* %overflow_arg_area, i32 8, !dbg !3381
  store i8* %overflow_arg_area.next, i8** %overflow_arg_area_p, align 8, !dbg !3381
  br label %vaarg.end, !dbg !3381

vaarg.end:                                        ; preds = %vaarg.in_mem, %vaarg.in_reg
  %vaarg.addr = phi %union.tree_node** [ %11, %vaarg.in_reg ], [ %13, %vaarg.in_mem ], !dbg !3381
  %14 = load %union.tree_node*, %union.tree_node** %vaarg.addr, align 8, !dbg !3381
  call void @gimple_switch_set_label(%union.gimple_statement_d* %6, i32 %add, %union.tree_node* %14), !dbg !3382
  br label %for.inc, !dbg !3382

for.inc:                                          ; preds = %vaarg.end
  %15 = load i32, i32* %i, align 4, !dbg !3383
  %inc = add i32 %15, 1, !dbg !3383
  store i32 %inc, i32* %i, align 4, !dbg !3383
  br label %for.cond, !dbg !3384, !llvm.loop !3385

for.end:                                          ; preds = %for.cond
  %arraydecay5 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %al, i64 0, i64 0, !dbg !3387
  %arraydecay56 = bitcast %struct.__va_list_tag* %arraydecay5 to i8*, !dbg !3387
  call void @llvm.va_end(i8* %arraydecay56), !dbg !3387
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3388
  ret %union.gimple_statement_d* %16, !dbg !3389
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_switch_set_label(%union.gimple_statement_d* %gs, i32 %index, %union.tree_node* %label) #0 !dbg !3390 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  %label.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3391, metadata !DIExpression()), !dbg !3392
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !3393, metadata !DIExpression()), !dbg !3394
  store %union.tree_node* %label, %union.tree_node** %label.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %label.addr, metadata !3395, metadata !DIExpression()), !dbg !3396
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3397
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !3397
  %1 = load i32, i32* %index.addr, align 4, !dbg !3397
  %add = add i32 %1, 1, !dbg !3397
  %cmp = icmp ugt i32 %call, %add, !dbg !3397
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !3397

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 3225, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !3397
  br label %cond.end, !dbg !3397

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3397

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3397
  %2 = load %union.tree_node*, %union.tree_node** %label.addr, align 8, !dbg !3398
  %cmp1 = icmp eq %union.tree_node* %2, null, !dbg !3398
  br i1 %cmp1, label %cond.false4, label %lor.lhs.false, !dbg !3398

lor.lhs.false:                                    ; preds = %cond.end
  %3 = load %union.tree_node*, %union.tree_node** %label.addr, align 8, !dbg !3398
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !3398
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !3398
  %bf.load = load i64, i64* %4, align 8, !dbg !3398
  %bf.clear = and i64 %bf.load, 65535, !dbg !3398
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3398
  %cmp2 = icmp eq i32 %bf.cast, 139, !dbg !3398
  br i1 %cmp2, label %cond.false4, label %cond.true3, !dbg !3398

cond.true3:                                       ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 3226, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !3398
  br label %cond.end5, !dbg !3398

cond.false4:                                      ; preds = %lor.lhs.false, %cond.end
  br label %cond.end5, !dbg !3398

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !3398
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3399
  %6 = load i32, i32* %index.addr, align 4, !dbg !3400
  %add7 = add i32 %6, 1, !dbg !3401
  %7 = load %union.tree_node*, %union.tree_node** %label.addr, align 8, !dbg !3402
  call void @gimple_set_op(%union.gimple_statement_d* %5, i32 %add7, %union.tree_node* %7), !dbg !3403
  ret void, !dbg !3404
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_switch_vec(%union.tree_node* %index, %union.tree_node* %default_label, %struct.VEC_tree_heap* %args) #0 !dbg !3405 {
entry:
  %index.addr = alloca %union.tree_node*, align 8
  %default_label.addr = alloca %union.tree_node*, align 8
  %args.addr = alloca %struct.VEC_tree_heap*, align 8
  %i = alloca i32, align 4
  %offset = alloca i32, align 4
  %nlabels = alloca i32, align 4
  %p = alloca %union.gimple_statement_d*, align 8
  store %union.tree_node* %index, %union.tree_node** %index.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %index.addr, metadata !3408, metadata !DIExpression()), !dbg !3409
  store %union.tree_node* %default_label, %union.tree_node** %default_label.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %default_label.addr, metadata !3410, metadata !DIExpression()), !dbg !3411
  store %struct.VEC_tree_heap* %args, %struct.VEC_tree_heap** %args.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %args.addr, metadata !3412, metadata !DIExpression()), !dbg !3413
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3414, metadata !DIExpression()), !dbg !3415
  call void @llvm.dbg.declare(metadata i32* %offset, metadata !3416, metadata !DIExpression()), !dbg !3417
  call void @llvm.dbg.declare(metadata i32* %nlabels, metadata !3418, metadata !DIExpression()), !dbg !3419
  %0 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %args.addr, align 8, !dbg !3420
  %tobool = icmp ne %struct.VEC_tree_heap* %0, null, !dbg !3420
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3420

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %args.addr, align 8, !dbg !3420
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %1, i32 0, i32 0, !dbg !3420
  br label %cond.end, !dbg !3420

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3420

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3420
  %call = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond), !dbg !3420
  store i32 %call, i32* %nlabels, align 4, !dbg !3419
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %p, metadata !3421, metadata !DIExpression()), !dbg !3422
  %2 = load i32, i32* %nlabels, align 4, !dbg !3423
  %3 = load %union.tree_node*, %union.tree_node** %index.addr, align 8, !dbg !3424
  %4 = load %union.tree_node*, %union.tree_node** %default_label.addr, align 8, !dbg !3425
  %call1 = call %union.gimple_statement_d* @gimple_build_switch_nlabels(i32 %2, %union.tree_node* %3, %union.tree_node* %4), !dbg !3426
  store %union.gimple_statement_d* %call1, %union.gimple_statement_d** %p, align 8, !dbg !3422
  %5 = load %union.tree_node*, %union.tree_node** %default_label.addr, align 8, !dbg !3427
  %cmp = icmp ne %union.tree_node* %5, null, !dbg !3428
  %conv = zext i1 %cmp to i32, !dbg !3428
  store i32 %conv, i32* %offset, align 4, !dbg !3429
  store i32 0, i32* %i, align 4, !dbg !3430
  br label %for.cond, !dbg !3432

for.cond:                                         ; preds = %for.inc, %cond.end
  %6 = load i32, i32* %i, align 4, !dbg !3433
  %7 = load i32, i32* %nlabels, align 4, !dbg !3435
  %cmp2 = icmp ult i32 %6, %7, !dbg !3436
  br i1 %cmp2, label %for.body, label %for.end, !dbg !3437

for.body:                                         ; preds = %for.cond
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3438
  %9 = load i32, i32* %i, align 4, !dbg !3439
  %10 = load i32, i32* %offset, align 4, !dbg !3440
  %add = add i32 %9, %10, !dbg !3441
  %11 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %args.addr, align 8, !dbg !3442
  %tobool4 = icmp ne %struct.VEC_tree_heap* %11, null, !dbg !3442
  br i1 %tobool4, label %cond.true5, label %cond.false7, !dbg !3442

cond.true5:                                       ; preds = %for.body
  %12 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %args.addr, align 8, !dbg !3442
  %base6 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %12, i32 0, i32 0, !dbg !3442
  br label %cond.end8, !dbg !3442

cond.false7:                                      ; preds = %for.body
  br label %cond.end8, !dbg !3442

cond.end8:                                        ; preds = %cond.false7, %cond.true5
  %cond9 = phi %struct.VEC_tree_base* [ %base6, %cond.true5 ], [ null, %cond.false7 ], !dbg !3442
  %13 = load i32, i32* %i, align 4, !dbg !3442
  %call10 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond9, i32 %13), !dbg !3442
  call void @gimple_switch_set_label(%union.gimple_statement_d* %8, i32 %add, %union.tree_node* %call10), !dbg !3443
  br label %for.inc, !dbg !3443

for.inc:                                          ; preds = %cond.end8
  %14 = load i32, i32* %i, align 4, !dbg !3444
  %inc = add i32 %14, 1, !dbg !3444
  store i32 %inc, i32* %i, align 4, !dbg !3444
  br label %for.cond, !dbg !3445, !llvm.loop !3446

for.end:                                          ; preds = %for.cond
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3448
  ret %union.gimple_statement_d* %15, !dbg !3449
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_eh_dispatch(i32 %region) #0 !dbg !3450 {
entry:
  %region.addr = alloca i32, align 4
  %p = alloca %union.gimple_statement_d*, align 8
  store i32 %region, i32* %region.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %region.addr, metadata !3451, metadata !DIExpression()), !dbg !3452
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %p, metadata !3453, metadata !DIExpression()), !dbg !3454
  %call = call %union.gimple_statement_d* @gimple_build_with_ops_stat(i32 15, i32 0, i32 0), !dbg !3455
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %p, align 8, !dbg !3454
  %0 = load i32, i32* %region.addr, align 4, !dbg !3456
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3457
  %gimple_eh_ctrl = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_eh_ctrl*, !dbg !3458
  %region1 = getelementptr inbounds %struct.gimple_statement_eh_ctrl, %struct.gimple_statement_eh_ctrl* %gimple_eh_ctrl, i32 0, i32 1, !dbg !3459
  store i32 %0, i32* %region1, align 8, !dbg !3460
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3461
  ret %union.gimple_statement_d* %2, !dbg !3462
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_debug_bind_stat(%union.tree_node* %var, %union.tree_node* %value, %union.gimple_statement_d* %stmt) #0 !dbg !3463 {
entry:
  %var.addr = alloca %union.tree_node*, align 8
  %value.addr = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %p = alloca %union.gimple_statement_d*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !3466, metadata !DIExpression()), !dbg !3467
  store %union.tree_node* %value, %union.tree_node** %value.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %value.addr, metadata !3468, metadata !DIExpression()), !dbg !3469
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !3470, metadata !DIExpression()), !dbg !3471
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %p, metadata !3472, metadata !DIExpression()), !dbg !3473
  %call = call %union.gimple_statement_d* @gimple_build_with_ops_stat(i32 2, i32 0, i32 2), !dbg !3474
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %p, align 8, !dbg !3473
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3475
  %1 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3476
  call void @gimple_debug_bind_set_var(%union.gimple_statement_d* %0, %union.tree_node* %1), !dbg !3477
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3478
  %3 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !3479
  call void @gimple_debug_bind_set_value(%union.gimple_statement_d* %2, %union.tree_node* %3), !dbg !3480
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3481
  %tobool = icmp ne %union.gimple_statement_d* %4, null, !dbg !3481
  br i1 %tobool, label %if.then, label %if.end, !dbg !3483

if.then:                                          ; preds = %entry
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3484
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3486
  %call1 = call %union.tree_node* @gimple_block(%union.gimple_statement_d* %6), !dbg !3487
  call void @gimple_set_block(%union.gimple_statement_d* %5, %union.tree_node* %call1), !dbg !3488
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3489
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3490
  %call2 = call i32 @gimple_location(%union.gimple_statement_d* %8), !dbg !3491
  call void @gimple_set_location(%union.gimple_statement_d* %7, i32 %call2), !dbg !3492
  br label %if.end, !dbg !3493

if.end:                                           ; preds = %if.then, %entry
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3494
  ret %union.gimple_statement_d* %9, !dbg !3495
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_debug_bind_set_var(%union.gimple_statement_d* %dbg, %union.tree_node* %var) #0 !dbg !3496 {
entry:
  %dbg.addr = alloca %union.gimple_statement_d*, align 8
  %var.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %dbg, %union.gimple_statement_d** %dbg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %dbg.addr, metadata !3497, metadata !DIExpression()), !dbg !3498
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !3499, metadata !DIExpression()), !dbg !3500
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %dbg.addr, align 8, !dbg !3501
  %1 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3502
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 0, %union.tree_node* %1), !dbg !3503
  ret void, !dbg !3504
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_debug_bind_set_value(%union.gimple_statement_d* %dbg, %union.tree_node* %value) #0 !dbg !3505 {
entry:
  %dbg.addr = alloca %union.gimple_statement_d*, align 8
  %value.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %dbg, %union.gimple_statement_d** %dbg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %dbg.addr, metadata !3506, metadata !DIExpression()), !dbg !3507
  store %union.tree_node* %value, %union.tree_node** %value.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %value.addr, metadata !3508, metadata !DIExpression()), !dbg !3509
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %dbg.addr, align 8, !dbg !3510
  %1 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !3511
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 1, %union.tree_node* %1), !dbg !3512
  ret void, !dbg !3513
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_block(%union.gimple_statement_d* %g) #0 !dbg !3514 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !3518, metadata !DIExpression()), !dbg !3519
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3520
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !3521
  %block = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 5, !dbg !3522
  %1 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !3522
  ret %union.tree_node* %1, !dbg !3523
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_location(%union.gimple_statement_d* %g, i32 %location) #0 !dbg !3524 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  %location.addr = alloca i32, align 4
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !3527, metadata !DIExpression()), !dbg !3528
  store i32 %location, i32* %location.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %location.addr, metadata !3529, metadata !DIExpression()), !dbg !3530
  %0 = load i32, i32* %location.addr, align 4, !dbg !3531
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3532
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !3533
  %location1 = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 2, !dbg !3534
  store i32 %0, i32* %location1, align 8, !dbg !3535
  ret void, !dbg !3536
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_location(%union.gimple_statement_d* %g) #0 !dbg !3537 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !3540, metadata !DIExpression()), !dbg !3541
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3542
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !3543
  %location = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 2, !dbg !3544
  %1 = load i32, i32* %location, align 8, !dbg !3544
  ret i32 %1, !dbg !3545
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_omp_critical(%struct.gimple_seq_d* %body, %union.tree_node* %name) #0 !dbg !3546 {
entry:
  %body.addr = alloca %struct.gimple_seq_d*, align 8
  %name.addr = alloca %union.tree_node*, align 8
  %p = alloca %union.gimple_statement_d*, align 8
  store %struct.gimple_seq_d* %body, %struct.gimple_seq_d** %body.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %body.addr, metadata !3549, metadata !DIExpression()), !dbg !3550
  store %union.tree_node* %name, %union.tree_node** %name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %name.addr, metadata !3551, metadata !DIExpression()), !dbg !3552
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %p, metadata !3553, metadata !DIExpression()), !dbg !3554
  %call = call %union.gimple_statement_d* @gimple_alloc_stat(i32 22, i32 0), !dbg !3555
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %p, align 8, !dbg !3554
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3556
  %1 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !3557
  call void @gimple_omp_critical_set_name(%union.gimple_statement_d* %0, %union.tree_node* %1), !dbg !3558
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %body.addr, align 8, !dbg !3559
  %tobool = icmp ne %struct.gimple_seq_d* %2, null, !dbg !3559
  br i1 %tobool, label %if.then, label %if.end, !dbg !3561

if.then:                                          ; preds = %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3562
  %4 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %body.addr, align 8, !dbg !3563
  call void @gimple_omp_set_body(%union.gimple_statement_d* %3, %struct.gimple_seq_d* %4), !dbg !3564
  br label %if.end, !dbg !3564

if.end:                                           ; preds = %if.then, %entry
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3565
  ret %union.gimple_statement_d* %5, !dbg !3566
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_omp_critical_set_name(%union.gimple_statement_d* %gs, %union.tree_node* %name) #0 !dbg !3567 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %name.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3568, metadata !DIExpression()), !dbg !3569
  store %union.tree_node* %name, %union.tree_node** %name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %name.addr, metadata !3570, metadata !DIExpression()), !dbg !3571
  %0 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !3572
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3573
  %gimple_omp_critical = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_omp_critical*, !dbg !3574
  %name1 = getelementptr inbounds %struct.gimple_statement_omp_critical, %struct.gimple_statement_omp_critical* %gimple_omp_critical, i32 0, i32 1, !dbg !3575
  store %union.tree_node* %0, %union.tree_node** %name1, align 8, !dbg !3576
  ret void, !dbg !3577
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_omp_set_body(%union.gimple_statement_d* %gs, %struct.gimple_seq_d* %body) #0 !dbg !3578 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %body.addr = alloca %struct.gimple_seq_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3579, metadata !DIExpression()), !dbg !3580
  store %struct.gimple_seq_d* %body, %struct.gimple_seq_d** %body.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %body.addr, metadata !3581, metadata !DIExpression()), !dbg !3582
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %body.addr, align 8, !dbg !3583
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3584
  %omp = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_omp*, !dbg !3585
  %body1 = getelementptr inbounds %struct.gimple_statement_omp, %struct.gimple_statement_omp* %omp, i32 0, i32 1, !dbg !3586
  store %struct.gimple_seq_d* %0, %struct.gimple_seq_d** %body1, align 8, !dbg !3587
  ret void, !dbg !3588
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_omp_for(%struct.gimple_seq_d* %body, %union.tree_node* %clauses, i64 %collapse, %struct.gimple_seq_d* %pre_body) #0 !dbg !3589 {
entry:
  %body.addr = alloca %struct.gimple_seq_d*, align 8
  %clauses.addr = alloca %union.tree_node*, align 8
  %collapse.addr = alloca i64, align 8
  %pre_body.addr = alloca %struct.gimple_seq_d*, align 8
  %p = alloca %union.gimple_statement_d*, align 8
  store %struct.gimple_seq_d* %body, %struct.gimple_seq_d** %body.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %body.addr, metadata !3592, metadata !DIExpression()), !dbg !3593
  store %union.tree_node* %clauses, %union.tree_node** %clauses.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %clauses.addr, metadata !3594, metadata !DIExpression()), !dbg !3595
  store i64 %collapse, i64* %collapse.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %collapse.addr, metadata !3596, metadata !DIExpression()), !dbg !3597
  store %struct.gimple_seq_d* %pre_body, %struct.gimple_seq_d** %pre_body.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %pre_body.addr, metadata !3598, metadata !DIExpression()), !dbg !3599
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %p, metadata !3600, metadata !DIExpression()), !dbg !3601
  %call = call %union.gimple_statement_d* @gimple_alloc_stat(i32 23, i32 0), !dbg !3602
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %p, align 8, !dbg !3601
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %body.addr, align 8, !dbg !3603
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !3603
  br i1 %tobool, label %if.then, label %if.end, !dbg !3605

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3606
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %body.addr, align 8, !dbg !3607
  call void @gimple_omp_set_body(%union.gimple_statement_d* %1, %struct.gimple_seq_d* %2), !dbg !3608
  br label %if.end, !dbg !3608

if.end:                                           ; preds = %if.then, %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3609
  %4 = load %union.tree_node*, %union.tree_node** %clauses.addr, align 8, !dbg !3610
  call void @gimple_omp_for_set_clauses(%union.gimple_statement_d* %3, %union.tree_node* %4), !dbg !3611
  %5 = load i64, i64* %collapse.addr, align 8, !dbg !3612
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3613
  %gimple_omp_for = bitcast %union.gimple_statement_d* %6 to %struct.gimple_statement_omp_for*, !dbg !3614
  %collapse1 = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for, i32 0, i32 2, !dbg !3615
  store i64 %5, i64* %collapse1, align 8, !dbg !3616
  %7 = load i64, i64* %collapse.addr, align 8, !dbg !3617
  %mul = mul i64 %7, 40, !dbg !3617
  %call2 = call i8* @ggc_alloc_cleared_stat(i64 %mul), !dbg !3617
  %8 = bitcast i8* %call2 to %struct.gimple_omp_for_iter*, !dbg !3617
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3618
  %gimple_omp_for3 = bitcast %union.gimple_statement_d* %9 to %struct.gimple_statement_omp_for*, !dbg !3619
  %iter = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for3, i32 0, i32 3, !dbg !3620
  store %struct.gimple_omp_for_iter* %8, %struct.gimple_omp_for_iter** %iter, align 8, !dbg !3621
  %10 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %pre_body.addr, align 8, !dbg !3622
  %tobool4 = icmp ne %struct.gimple_seq_d* %10, null, !dbg !3622
  br i1 %tobool4, label %if.then5, label %if.end6, !dbg !3624

if.then5:                                         ; preds = %if.end
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3625
  %12 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %pre_body.addr, align 8, !dbg !3626
  call void @gimple_omp_for_set_pre_body(%union.gimple_statement_d* %11, %struct.gimple_seq_d* %12), !dbg !3627
  br label %if.end6, !dbg !3627

if.end6:                                          ; preds = %if.then5, %if.end
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3628
  ret %union.gimple_statement_d* %13, !dbg !3629
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_omp_for_set_clauses(%union.gimple_statement_d* %gs, %union.tree_node* %clauses) #0 !dbg !3630 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %clauses.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3631, metadata !DIExpression()), !dbg !3632
  store %union.tree_node* %clauses, %union.tree_node** %clauses.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %clauses.addr, metadata !3633, metadata !DIExpression()), !dbg !3634
  %0 = load %union.tree_node*, %union.tree_node** %clauses.addr, align 8, !dbg !3635
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3636
  %gimple_omp_for = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_omp_for*, !dbg !3637
  %clauses1 = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for, i32 0, i32 1, !dbg !3638
  store %union.tree_node* %0, %union.tree_node** %clauses1, align 8, !dbg !3639
  ret void, !dbg !3640
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_omp_for_set_pre_body(%union.gimple_statement_d* %gs, %struct.gimple_seq_d* %pre_body) #0 !dbg !3641 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %pre_body.addr = alloca %struct.gimple_seq_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3642, metadata !DIExpression()), !dbg !3643
  store %struct.gimple_seq_d* %pre_body, %struct.gimple_seq_d** %pre_body.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %pre_body.addr, metadata !3644, metadata !DIExpression()), !dbg !3645
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %pre_body.addr, align 8, !dbg !3646
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3647
  %gimple_omp_for = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_omp_for*, !dbg !3648
  %pre_body1 = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for, i32 0, i32 4, !dbg !3649
  store %struct.gimple_seq_d* %0, %struct.gimple_seq_d** %pre_body1, align 8, !dbg !3650
  ret void, !dbg !3651
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_omp_parallel(%struct.gimple_seq_d* %body, %union.tree_node* %clauses, %union.tree_node* %child_fn, %union.tree_node* %data_arg) #0 !dbg !3652 {
entry:
  %body.addr = alloca %struct.gimple_seq_d*, align 8
  %clauses.addr = alloca %union.tree_node*, align 8
  %child_fn.addr = alloca %union.tree_node*, align 8
  %data_arg.addr = alloca %union.tree_node*, align 8
  %p = alloca %union.gimple_statement_d*, align 8
  store %struct.gimple_seq_d* %body, %struct.gimple_seq_d** %body.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %body.addr, metadata !3655, metadata !DIExpression()), !dbg !3656
  store %union.tree_node* %clauses, %union.tree_node** %clauses.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %clauses.addr, metadata !3657, metadata !DIExpression()), !dbg !3658
  store %union.tree_node* %child_fn, %union.tree_node** %child_fn.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %child_fn.addr, metadata !3659, metadata !DIExpression()), !dbg !3660
  store %union.tree_node* %data_arg, %union.tree_node** %data_arg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %data_arg.addr, metadata !3661, metadata !DIExpression()), !dbg !3662
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %p, metadata !3663, metadata !DIExpression()), !dbg !3664
  %call = call %union.gimple_statement_d* @gimple_alloc_stat(i32 26, i32 0), !dbg !3665
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %p, align 8, !dbg !3664
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %body.addr, align 8, !dbg !3666
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !3666
  br i1 %tobool, label %if.then, label %if.end, !dbg !3668

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3669
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %body.addr, align 8, !dbg !3670
  call void @gimple_omp_set_body(%union.gimple_statement_d* %1, %struct.gimple_seq_d* %2), !dbg !3671
  br label %if.end, !dbg !3671

if.end:                                           ; preds = %if.then, %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3672
  %4 = load %union.tree_node*, %union.tree_node** %clauses.addr, align 8, !dbg !3673
  call void @gimple_omp_parallel_set_clauses(%union.gimple_statement_d* %3, %union.tree_node* %4), !dbg !3674
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3675
  %6 = load %union.tree_node*, %union.tree_node** %child_fn.addr, align 8, !dbg !3676
  call void @gimple_omp_parallel_set_child_fn(%union.gimple_statement_d* %5, %union.tree_node* %6), !dbg !3677
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3678
  %8 = load %union.tree_node*, %union.tree_node** %data_arg.addr, align 8, !dbg !3679
  call void @gimple_omp_parallel_set_data_arg(%union.gimple_statement_d* %7, %union.tree_node* %8), !dbg !3680
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3681
  ret %union.gimple_statement_d* %9, !dbg !3682
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_omp_parallel_set_clauses(%union.gimple_statement_d* %gs, %union.tree_node* %clauses) #0 !dbg !3683 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %clauses.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3684, metadata !DIExpression()), !dbg !3685
  store %union.tree_node* %clauses, %union.tree_node** %clauses.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %clauses.addr, metadata !3686, metadata !DIExpression()), !dbg !3687
  %0 = load %union.tree_node*, %union.tree_node** %clauses.addr, align 8, !dbg !3688
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3689
  %gimple_omp_parallel = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_omp_parallel*, !dbg !3690
  %clauses1 = getelementptr inbounds %struct.gimple_statement_omp_parallel, %struct.gimple_statement_omp_parallel* %gimple_omp_parallel, i32 0, i32 1, !dbg !3691
  store %union.tree_node* %0, %union.tree_node** %clauses1, align 8, !dbg !3692
  ret void, !dbg !3693
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_omp_parallel_set_child_fn(%union.gimple_statement_d* %gs, %union.tree_node* %child_fn) #0 !dbg !3694 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %child_fn.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3695, metadata !DIExpression()), !dbg !3696
  store %union.tree_node* %child_fn, %union.tree_node** %child_fn.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %child_fn.addr, metadata !3697, metadata !DIExpression()), !dbg !3698
  %0 = load %union.tree_node*, %union.tree_node** %child_fn.addr, align 8, !dbg !3699
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3700
  %gimple_omp_parallel = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_omp_parallel*, !dbg !3701
  %child_fn1 = getelementptr inbounds %struct.gimple_statement_omp_parallel, %struct.gimple_statement_omp_parallel* %gimple_omp_parallel, i32 0, i32 2, !dbg !3702
  store %union.tree_node* %0, %union.tree_node** %child_fn1, align 8, !dbg !3703
  ret void, !dbg !3704
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_omp_parallel_set_data_arg(%union.gimple_statement_d* %gs, %union.tree_node* %data_arg) #0 !dbg !3705 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %data_arg.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3706, metadata !DIExpression()), !dbg !3707
  store %union.tree_node* %data_arg, %union.tree_node** %data_arg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %data_arg.addr, metadata !3708, metadata !DIExpression()), !dbg !3709
  %0 = load %union.tree_node*, %union.tree_node** %data_arg.addr, align 8, !dbg !3710
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3711
  %gimple_omp_parallel = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_omp_parallel*, !dbg !3712
  %data_arg1 = getelementptr inbounds %struct.gimple_statement_omp_parallel, %struct.gimple_statement_omp_parallel* %gimple_omp_parallel, i32 0, i32 3, !dbg !3713
  store %union.tree_node* %0, %union.tree_node** %data_arg1, align 8, !dbg !3714
  ret void, !dbg !3715
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_omp_task(%struct.gimple_seq_d* %body, %union.tree_node* %clauses, %union.tree_node* %child_fn, %union.tree_node* %data_arg, %union.tree_node* %copy_fn, %union.tree_node* %arg_size, %union.tree_node* %arg_align) #0 !dbg !3716 {
entry:
  %body.addr = alloca %struct.gimple_seq_d*, align 8
  %clauses.addr = alloca %union.tree_node*, align 8
  %child_fn.addr = alloca %union.tree_node*, align 8
  %data_arg.addr = alloca %union.tree_node*, align 8
  %copy_fn.addr = alloca %union.tree_node*, align 8
  %arg_size.addr = alloca %union.tree_node*, align 8
  %arg_align.addr = alloca %union.tree_node*, align 8
  %p = alloca %union.gimple_statement_d*, align 8
  store %struct.gimple_seq_d* %body, %struct.gimple_seq_d** %body.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %body.addr, metadata !3719, metadata !DIExpression()), !dbg !3720
  store %union.tree_node* %clauses, %union.tree_node** %clauses.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %clauses.addr, metadata !3721, metadata !DIExpression()), !dbg !3722
  store %union.tree_node* %child_fn, %union.tree_node** %child_fn.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %child_fn.addr, metadata !3723, metadata !DIExpression()), !dbg !3724
  store %union.tree_node* %data_arg, %union.tree_node** %data_arg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %data_arg.addr, metadata !3725, metadata !DIExpression()), !dbg !3726
  store %union.tree_node* %copy_fn, %union.tree_node** %copy_fn.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %copy_fn.addr, metadata !3727, metadata !DIExpression()), !dbg !3728
  store %union.tree_node* %arg_size, %union.tree_node** %arg_size.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg_size.addr, metadata !3729, metadata !DIExpression()), !dbg !3730
  store %union.tree_node* %arg_align, %union.tree_node** %arg_align.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg_align.addr, metadata !3731, metadata !DIExpression()), !dbg !3732
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %p, metadata !3733, metadata !DIExpression()), !dbg !3734
  %call = call %union.gimple_statement_d* @gimple_alloc_stat(i32 27, i32 0), !dbg !3735
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %p, align 8, !dbg !3734
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %body.addr, align 8, !dbg !3736
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !3736
  br i1 %tobool, label %if.then, label %if.end, !dbg !3738

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3739
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %body.addr, align 8, !dbg !3740
  call void @gimple_omp_set_body(%union.gimple_statement_d* %1, %struct.gimple_seq_d* %2), !dbg !3741
  br label %if.end, !dbg !3741

if.end:                                           ; preds = %if.then, %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3742
  %4 = load %union.tree_node*, %union.tree_node** %clauses.addr, align 8, !dbg !3743
  call void @gimple_omp_task_set_clauses(%union.gimple_statement_d* %3, %union.tree_node* %4), !dbg !3744
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3745
  %6 = load %union.tree_node*, %union.tree_node** %child_fn.addr, align 8, !dbg !3746
  call void @gimple_omp_task_set_child_fn(%union.gimple_statement_d* %5, %union.tree_node* %6), !dbg !3747
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3748
  %8 = load %union.tree_node*, %union.tree_node** %data_arg.addr, align 8, !dbg !3749
  call void @gimple_omp_task_set_data_arg(%union.gimple_statement_d* %7, %union.tree_node* %8), !dbg !3750
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3751
  %10 = load %union.tree_node*, %union.tree_node** %copy_fn.addr, align 8, !dbg !3752
  call void @gimple_omp_task_set_copy_fn(%union.gimple_statement_d* %9, %union.tree_node* %10), !dbg !3753
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3754
  %12 = load %union.tree_node*, %union.tree_node** %arg_size.addr, align 8, !dbg !3755
  call void @gimple_omp_task_set_arg_size(%union.gimple_statement_d* %11, %union.tree_node* %12), !dbg !3756
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3757
  %14 = load %union.tree_node*, %union.tree_node** %arg_align.addr, align 8, !dbg !3758
  call void @gimple_omp_task_set_arg_align(%union.gimple_statement_d* %13, %union.tree_node* %14), !dbg !3759
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3760
  ret %union.gimple_statement_d* %15, !dbg !3761
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_omp_task_set_clauses(%union.gimple_statement_d* %gs, %union.tree_node* %clauses) #0 !dbg !3762 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %clauses.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3763, metadata !DIExpression()), !dbg !3764
  store %union.tree_node* %clauses, %union.tree_node** %clauses.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %clauses.addr, metadata !3765, metadata !DIExpression()), !dbg !3766
  %0 = load %union.tree_node*, %union.tree_node** %clauses.addr, align 8, !dbg !3767
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3768
  %gimple_omp_parallel = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_omp_parallel*, !dbg !3769
  %clauses1 = getelementptr inbounds %struct.gimple_statement_omp_parallel, %struct.gimple_statement_omp_parallel* %gimple_omp_parallel, i32 0, i32 1, !dbg !3770
  store %union.tree_node* %0, %union.tree_node** %clauses1, align 8, !dbg !3771
  ret void, !dbg !3772
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_omp_task_set_child_fn(%union.gimple_statement_d* %gs, %union.tree_node* %child_fn) #0 !dbg !3773 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %child_fn.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3774, metadata !DIExpression()), !dbg !3775
  store %union.tree_node* %child_fn, %union.tree_node** %child_fn.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %child_fn.addr, metadata !3776, metadata !DIExpression()), !dbg !3777
  %0 = load %union.tree_node*, %union.tree_node** %child_fn.addr, align 8, !dbg !3778
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3779
  %gimple_omp_parallel = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_omp_parallel*, !dbg !3780
  %child_fn1 = getelementptr inbounds %struct.gimple_statement_omp_parallel, %struct.gimple_statement_omp_parallel* %gimple_omp_parallel, i32 0, i32 2, !dbg !3781
  store %union.tree_node* %0, %union.tree_node** %child_fn1, align 8, !dbg !3782
  ret void, !dbg !3783
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_omp_task_set_data_arg(%union.gimple_statement_d* %gs, %union.tree_node* %data_arg) #0 !dbg !3784 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %data_arg.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3785, metadata !DIExpression()), !dbg !3786
  store %union.tree_node* %data_arg, %union.tree_node** %data_arg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %data_arg.addr, metadata !3787, metadata !DIExpression()), !dbg !3788
  %0 = load %union.tree_node*, %union.tree_node** %data_arg.addr, align 8, !dbg !3789
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3790
  %gimple_omp_parallel = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_omp_parallel*, !dbg !3791
  %data_arg1 = getelementptr inbounds %struct.gimple_statement_omp_parallel, %struct.gimple_statement_omp_parallel* %gimple_omp_parallel, i32 0, i32 3, !dbg !3792
  store %union.tree_node* %0, %union.tree_node** %data_arg1, align 8, !dbg !3793
  ret void, !dbg !3794
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_omp_task_set_copy_fn(%union.gimple_statement_d* %gs, %union.tree_node* %copy_fn) #0 !dbg !3795 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %copy_fn.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3796, metadata !DIExpression()), !dbg !3797
  store %union.tree_node* %copy_fn, %union.tree_node** %copy_fn.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %copy_fn.addr, metadata !3798, metadata !DIExpression()), !dbg !3799
  %0 = load %union.tree_node*, %union.tree_node** %copy_fn.addr, align 8, !dbg !3800
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3801
  %gimple_omp_task = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_omp_task*, !dbg !3802
  %copy_fn1 = getelementptr inbounds %struct.gimple_statement_omp_task, %struct.gimple_statement_omp_task* %gimple_omp_task, i32 0, i32 1, !dbg !3803
  store %union.tree_node* %0, %union.tree_node** %copy_fn1, align 8, !dbg !3804
  ret void, !dbg !3805
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_omp_task_set_arg_size(%union.gimple_statement_d* %gs, %union.tree_node* %arg_size) #0 !dbg !3806 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %arg_size.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3807, metadata !DIExpression()), !dbg !3808
  store %union.tree_node* %arg_size, %union.tree_node** %arg_size.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg_size.addr, metadata !3809, metadata !DIExpression()), !dbg !3810
  %0 = load %union.tree_node*, %union.tree_node** %arg_size.addr, align 8, !dbg !3811
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3812
  %gimple_omp_task = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_omp_task*, !dbg !3813
  %arg_size1 = getelementptr inbounds %struct.gimple_statement_omp_task, %struct.gimple_statement_omp_task* %gimple_omp_task, i32 0, i32 2, !dbg !3814
  store %union.tree_node* %0, %union.tree_node** %arg_size1, align 8, !dbg !3815
  ret void, !dbg !3816
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_omp_task_set_arg_align(%union.gimple_statement_d* %gs, %union.tree_node* %arg_align) #0 !dbg !3817 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %arg_align.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3818, metadata !DIExpression()), !dbg !3819
  store %union.tree_node* %arg_align, %union.tree_node** %arg_align.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg_align.addr, metadata !3820, metadata !DIExpression()), !dbg !3821
  %0 = load %union.tree_node*, %union.tree_node** %arg_align.addr, align 8, !dbg !3822
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3823
  %gimple_omp_task = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_omp_task*, !dbg !3824
  %arg_align1 = getelementptr inbounds %struct.gimple_statement_omp_task, %struct.gimple_statement_omp_task* %gimple_omp_task, i32 0, i32 3, !dbg !3825
  store %union.tree_node* %0, %union.tree_node** %arg_align1, align 8, !dbg !3826
  ret void, !dbg !3827
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_omp_section(%struct.gimple_seq_d* %body) #0 !dbg !3828 {
entry:
  %body.addr = alloca %struct.gimple_seq_d*, align 8
  %p = alloca %union.gimple_statement_d*, align 8
  store %struct.gimple_seq_d* %body, %struct.gimple_seq_d** %body.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %body.addr, metadata !3829, metadata !DIExpression()), !dbg !3830
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %p, metadata !3831, metadata !DIExpression()), !dbg !3832
  %call = call %union.gimple_statement_d* @gimple_alloc_stat(i32 29, i32 0), !dbg !3833
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %p, align 8, !dbg !3832
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %body.addr, align 8, !dbg !3834
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !3834
  br i1 %tobool, label %if.then, label %if.end, !dbg !3836

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3837
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %body.addr, align 8, !dbg !3838
  call void @gimple_omp_set_body(%union.gimple_statement_d* %1, %struct.gimple_seq_d* %2), !dbg !3839
  br label %if.end, !dbg !3839

if.end:                                           ; preds = %if.then, %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3840
  ret %union.gimple_statement_d* %3, !dbg !3841
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_omp_master(%struct.gimple_seq_d* %body) #0 !dbg !3842 {
entry:
  %body.addr = alloca %struct.gimple_seq_d*, align 8
  %p = alloca %union.gimple_statement_d*, align 8
  store %struct.gimple_seq_d* %body, %struct.gimple_seq_d** %body.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %body.addr, metadata !3843, metadata !DIExpression()), !dbg !3844
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %p, metadata !3845, metadata !DIExpression()), !dbg !3846
  %call = call %union.gimple_statement_d* @gimple_alloc_stat(i32 24, i32 0), !dbg !3847
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %p, align 8, !dbg !3846
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %body.addr, align 8, !dbg !3848
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !3848
  br i1 %tobool, label %if.then, label %if.end, !dbg !3850

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3851
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %body.addr, align 8, !dbg !3852
  call void @gimple_omp_set_body(%union.gimple_statement_d* %1, %struct.gimple_seq_d* %2), !dbg !3853
  br label %if.end, !dbg !3853

if.end:                                           ; preds = %if.then, %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3854
  ret %union.gimple_statement_d* %3, !dbg !3855
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_omp_continue(%union.tree_node* %control_def, %union.tree_node* %control_use) #0 !dbg !3856 {
entry:
  %control_def.addr = alloca %union.tree_node*, align 8
  %control_use.addr = alloca %union.tree_node*, align 8
  %p = alloca %union.gimple_statement_d*, align 8
  store %union.tree_node* %control_def, %union.tree_node** %control_def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %control_def.addr, metadata !3857, metadata !DIExpression()), !dbg !3858
  store %union.tree_node* %control_use, %union.tree_node** %control_use.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %control_use.addr, metadata !3859, metadata !DIExpression()), !dbg !3860
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %p, metadata !3861, metadata !DIExpression()), !dbg !3862
  %call = call %union.gimple_statement_d* @gimple_alloc_stat(i32 21, i32 0), !dbg !3863
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %p, align 8, !dbg !3862
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3864
  %1 = load %union.tree_node*, %union.tree_node** %control_def.addr, align 8, !dbg !3865
  call void @gimple_omp_continue_set_control_def(%union.gimple_statement_d* %0, %union.tree_node* %1), !dbg !3866
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3867
  %3 = load %union.tree_node*, %union.tree_node** %control_use.addr, align 8, !dbg !3868
  call void @gimple_omp_continue_set_control_use(%union.gimple_statement_d* %2, %union.tree_node* %3), !dbg !3869
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3870
  ret %union.gimple_statement_d* %4, !dbg !3871
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_omp_continue_set_control_def(%union.gimple_statement_d* %g, %union.tree_node* %def) #0 !dbg !3872 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  %def.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !3873, metadata !DIExpression()), !dbg !3874
  store %union.tree_node* %def, %union.tree_node** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %def.addr, metadata !3875, metadata !DIExpression()), !dbg !3876
  %0 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !3877
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3878
  %gimple_omp_continue = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_omp_continue*, !dbg !3879
  %control_def = getelementptr inbounds %struct.gimple_statement_omp_continue, %struct.gimple_statement_omp_continue* %gimple_omp_continue, i32 0, i32 1, !dbg !3880
  store %union.tree_node* %0, %union.tree_node** %control_def, align 8, !dbg !3881
  ret void, !dbg !3882
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_omp_continue_set_control_use(%union.gimple_statement_d* %g, %union.tree_node* %use) #0 !dbg !3883 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  %use.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !3884, metadata !DIExpression()), !dbg !3885
  store %union.tree_node* %use, %union.tree_node** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %use.addr, metadata !3886, metadata !DIExpression()), !dbg !3887
  %0 = load %union.tree_node*, %union.tree_node** %use.addr, align 8, !dbg !3888
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3889
  %gimple_omp_continue = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_omp_continue*, !dbg !3890
  %control_use = getelementptr inbounds %struct.gimple_statement_omp_continue, %struct.gimple_statement_omp_continue* %gimple_omp_continue, i32 0, i32 2, !dbg !3891
  store %union.tree_node* %0, %union.tree_node** %control_use, align 8, !dbg !3892
  ret void, !dbg !3893
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_omp_ordered(%struct.gimple_seq_d* %body) #0 !dbg !3894 {
entry:
  %body.addr = alloca %struct.gimple_seq_d*, align 8
  %p = alloca %union.gimple_statement_d*, align 8
  store %struct.gimple_seq_d* %body, %struct.gimple_seq_d** %body.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %body.addr, metadata !3895, metadata !DIExpression()), !dbg !3896
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %p, metadata !3897, metadata !DIExpression()), !dbg !3898
  %call = call %union.gimple_statement_d* @gimple_alloc_stat(i32 25, i32 0), !dbg !3899
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %p, align 8, !dbg !3898
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %body.addr, align 8, !dbg !3900
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !3900
  br i1 %tobool, label %if.then, label %if.end, !dbg !3902

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3903
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %body.addr, align 8, !dbg !3904
  call void @gimple_omp_set_body(%union.gimple_statement_d* %1, %struct.gimple_seq_d* %2), !dbg !3905
  br label %if.end, !dbg !3905

if.end:                                           ; preds = %if.then, %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3906
  ret %union.gimple_statement_d* %3, !dbg !3907
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_omp_return(i8 zeroext %wait_p) #0 !dbg !3908 {
entry:
  %wait_p.addr = alloca i8, align 1
  %p = alloca %union.gimple_statement_d*, align 8
  store i8 %wait_p, i8* %wait_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %wait_p.addr, metadata !3911, metadata !DIExpression()), !dbg !3912
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %p, metadata !3913, metadata !DIExpression()), !dbg !3914
  %call = call %union.gimple_statement_d* @gimple_alloc_stat(i32 28, i32 0), !dbg !3915
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %p, align 8, !dbg !3914
  %0 = load i8, i8* %wait_p.addr, align 1, !dbg !3916
  %tobool = icmp ne i8 %0, 0, !dbg !3916
  br i1 %tobool, label %if.then, label %if.end, !dbg !3918

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3919
  call void @gimple_omp_return_set_nowait(%union.gimple_statement_d* %1), !dbg !3920
  br label %if.end, !dbg !3920

if.end:                                           ; preds = %if.then, %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3921
  ret %union.gimple_statement_d* %2, !dbg !3922
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_omp_return_set_nowait(%union.gimple_statement_d* %s) #0 !dbg !3923 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !3926, metadata !DIExpression()), !dbg !3927
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !3928
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !3929
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !3930
  %bf.load = load i32, i32* %1, align 8, !dbg !3931
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !3931
  %or = or i32 %bf.lshr, 1, !dbg !3931
  %bf.load1 = load i32, i32* %1, align 8, !dbg !3931
  %bf.value = and i32 %or, 65535, !dbg !3931
  %bf.shl = shl i32 %bf.value, 16, !dbg !3931
  %bf.clear = and i32 %bf.load1, 65535, !dbg !3931
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !3931
  store i32 %bf.set, i32* %1, align 8, !dbg !3931
  ret void, !dbg !3932
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_omp_sections(%struct.gimple_seq_d* %body, %union.tree_node* %clauses) #0 !dbg !3933 {
entry:
  %body.addr = alloca %struct.gimple_seq_d*, align 8
  %clauses.addr = alloca %union.tree_node*, align 8
  %p = alloca %union.gimple_statement_d*, align 8
  store %struct.gimple_seq_d* %body, %struct.gimple_seq_d** %body.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %body.addr, metadata !3934, metadata !DIExpression()), !dbg !3935
  store %union.tree_node* %clauses, %union.tree_node** %clauses.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %clauses.addr, metadata !3936, metadata !DIExpression()), !dbg !3937
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %p, metadata !3938, metadata !DIExpression()), !dbg !3939
  %call = call %union.gimple_statement_d* @gimple_alloc_stat(i32 30, i32 0), !dbg !3940
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %p, align 8, !dbg !3939
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %body.addr, align 8, !dbg !3941
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !3941
  br i1 %tobool, label %if.then, label %if.end, !dbg !3943

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3944
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %body.addr, align 8, !dbg !3945
  call void @gimple_omp_set_body(%union.gimple_statement_d* %1, %struct.gimple_seq_d* %2), !dbg !3946
  br label %if.end, !dbg !3946

if.end:                                           ; preds = %if.then, %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3947
  %4 = load %union.tree_node*, %union.tree_node** %clauses.addr, align 8, !dbg !3948
  call void @gimple_omp_sections_set_clauses(%union.gimple_statement_d* %3, %union.tree_node* %4), !dbg !3949
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3950
  ret %union.gimple_statement_d* %5, !dbg !3951
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_omp_sections_set_clauses(%union.gimple_statement_d* %gs, %union.tree_node* %clauses) #0 !dbg !3952 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %clauses.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3953, metadata !DIExpression()), !dbg !3954
  store %union.tree_node* %clauses, %union.tree_node** %clauses.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %clauses.addr, metadata !3955, metadata !DIExpression()), !dbg !3956
  %0 = load %union.tree_node*, %union.tree_node** %clauses.addr, align 8, !dbg !3957
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3958
  %gimple_omp_sections = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_omp_sections*, !dbg !3959
  %clauses1 = getelementptr inbounds %struct.gimple_statement_omp_sections, %struct.gimple_statement_omp_sections* %gimple_omp_sections, i32 0, i32 1, !dbg !3960
  store %union.tree_node* %0, %union.tree_node** %clauses1, align 8, !dbg !3961
  ret void, !dbg !3962
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_omp_sections_switch() #0 !dbg !3963 {
entry:
  %call = call %union.gimple_statement_d* @gimple_alloc_stat(i32 31, i32 0), !dbg !3964
  ret %union.gimple_statement_d* %call, !dbg !3965
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_omp_single(%struct.gimple_seq_d* %body, %union.tree_node* %clauses) #0 !dbg !3966 {
entry:
  %body.addr = alloca %struct.gimple_seq_d*, align 8
  %clauses.addr = alloca %union.tree_node*, align 8
  %p = alloca %union.gimple_statement_d*, align 8
  store %struct.gimple_seq_d* %body, %struct.gimple_seq_d** %body.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %body.addr, metadata !3967, metadata !DIExpression()), !dbg !3968
  store %union.tree_node* %clauses, %union.tree_node** %clauses.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %clauses.addr, metadata !3969, metadata !DIExpression()), !dbg !3970
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %p, metadata !3971, metadata !DIExpression()), !dbg !3972
  %call = call %union.gimple_statement_d* @gimple_alloc_stat(i32 32, i32 0), !dbg !3973
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %p, align 8, !dbg !3972
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %body.addr, align 8, !dbg !3974
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !3974
  br i1 %tobool, label %if.then, label %if.end, !dbg !3976

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3977
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %body.addr, align 8, !dbg !3978
  call void @gimple_omp_set_body(%union.gimple_statement_d* %1, %struct.gimple_seq_d* %2), !dbg !3979
  br label %if.end, !dbg !3979

if.end:                                           ; preds = %if.then, %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3980
  %4 = load %union.tree_node*, %union.tree_node** %clauses.addr, align 8, !dbg !3981
  call void @gimple_omp_single_set_clauses(%union.gimple_statement_d* %3, %union.tree_node* %4), !dbg !3982
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !3983
  ret %union.gimple_statement_d* %5, !dbg !3984
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_omp_single_set_clauses(%union.gimple_statement_d* %gs, %union.tree_node* %clauses) #0 !dbg !3985 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %clauses.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3986, metadata !DIExpression()), !dbg !3987
  store %union.tree_node* %clauses, %union.tree_node** %clauses.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %clauses.addr, metadata !3988, metadata !DIExpression()), !dbg !3989
  %0 = load %union.tree_node*, %union.tree_node** %clauses.addr, align 8, !dbg !3990
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3991
  %gimple_omp_single = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_omp_single*, !dbg !3992
  %clauses1 = getelementptr inbounds %struct.gimple_statement_omp_single, %struct.gimple_statement_omp_single* %gimple_omp_single, i32 0, i32 1, !dbg !3993
  store %union.tree_node* %0, %union.tree_node** %clauses1, align 8, !dbg !3994
  ret void, !dbg !3995
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_omp_atomic_load(%union.tree_node* %lhs, %union.tree_node* %rhs) #0 !dbg !3996 {
entry:
  %lhs.addr = alloca %union.tree_node*, align 8
  %rhs.addr = alloca %union.tree_node*, align 8
  %p = alloca %union.gimple_statement_d*, align 8
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !3997, metadata !DIExpression()), !dbg !3998
  store %union.tree_node* %rhs, %union.tree_node** %rhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs.addr, metadata !3999, metadata !DIExpression()), !dbg !4000
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %p, metadata !4001, metadata !DIExpression()), !dbg !4002
  %call = call %union.gimple_statement_d* @gimple_alloc_stat(i32 19, i32 0), !dbg !4003
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %p, align 8, !dbg !4002
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !4004
  %1 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !4005
  call void @gimple_omp_atomic_load_set_lhs(%union.gimple_statement_d* %0, %union.tree_node* %1), !dbg !4006
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !4007
  %3 = load %union.tree_node*, %union.tree_node** %rhs.addr, align 8, !dbg !4008
  call void @gimple_omp_atomic_load_set_rhs(%union.gimple_statement_d* %2, %union.tree_node* %3), !dbg !4009
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !4010
  ret %union.gimple_statement_d* %4, !dbg !4011
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_omp_atomic_load_set_lhs(%union.gimple_statement_d* %g, %union.tree_node* %lhs) #0 !dbg !4012 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  %lhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !4013, metadata !DIExpression()), !dbg !4014
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !4015, metadata !DIExpression()), !dbg !4016
  %0 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !4017
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !4018
  %gimple_omp_atomic_load = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_omp_atomic_load*, !dbg !4019
  %lhs1 = getelementptr inbounds %struct.gimple_statement_omp_atomic_load, %struct.gimple_statement_omp_atomic_load* %gimple_omp_atomic_load, i32 0, i32 2, !dbg !4020
  store %union.tree_node* %0, %union.tree_node** %lhs1, align 8, !dbg !4021
  ret void, !dbg !4022
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_omp_atomic_load_set_rhs(%union.gimple_statement_d* %g, %union.tree_node* %rhs) #0 !dbg !4023 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  %rhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !4024, metadata !DIExpression()), !dbg !4025
  store %union.tree_node* %rhs, %union.tree_node** %rhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs.addr, metadata !4026, metadata !DIExpression()), !dbg !4027
  %0 = load %union.tree_node*, %union.tree_node** %rhs.addr, align 8, !dbg !4028
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !4029
  %gimple_omp_atomic_load = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_omp_atomic_load*, !dbg !4030
  %rhs1 = getelementptr inbounds %struct.gimple_statement_omp_atomic_load, %struct.gimple_statement_omp_atomic_load* %gimple_omp_atomic_load, i32 0, i32 1, !dbg !4031
  store %union.tree_node* %0, %union.tree_node** %rhs1, align 8, !dbg !4032
  ret void, !dbg !4033
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_omp_atomic_store(%union.tree_node* %val) #0 !dbg !4034 {
entry:
  %val.addr = alloca %union.tree_node*, align 8
  %p = alloca %union.gimple_statement_d*, align 8
  store %union.tree_node* %val, %union.tree_node** %val.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val.addr, metadata !4035, metadata !DIExpression()), !dbg !4036
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %p, metadata !4037, metadata !DIExpression()), !dbg !4038
  %call = call %union.gimple_statement_d* @gimple_alloc_stat(i32 20, i32 0), !dbg !4039
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %p, align 8, !dbg !4038
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !4040
  %1 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !4041
  call void @gimple_omp_atomic_store_set_val(%union.gimple_statement_d* %0, %union.tree_node* %1), !dbg !4042
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !4043
  ret %union.gimple_statement_d* %2, !dbg !4044
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_omp_atomic_store_set_val(%union.gimple_statement_d* %g, %union.tree_node* %val) #0 !dbg !4045 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  %val.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !4046, metadata !DIExpression()), !dbg !4047
  store %union.tree_node* %val, %union.tree_node** %val.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val.addr, metadata !4048, metadata !DIExpression()), !dbg !4049
  %0 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !4050
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !4051
  %gimple_omp_atomic_store = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_omp_atomic_store*, !dbg !4052
  %val1 = getelementptr inbounds %struct.gimple_statement_omp_atomic_store, %struct.gimple_statement_omp_atomic_store* %gimple_omp_atomic_store, i32 0, i32 1, !dbg !4053
  store %union.tree_node* %0, %union.tree_node** %val1, align 8, !dbg !4054
  ret void, !dbg !4055
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_predict(i32 %predictor, i32 %outcome) #0 !dbg !4056 {
entry:
  %predictor.addr = alloca i32, align 4
  %outcome.addr = alloca i32, align 4
  %p = alloca %union.gimple_statement_d*, align 8
  store i32 %predictor, i32* %predictor.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %predictor.addr, metadata !4059, metadata !DIExpression()), !dbg !4060
  store i32 %outcome, i32* %outcome.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %outcome.addr, metadata !4061, metadata !DIExpression()), !dbg !4062
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %p, metadata !4063, metadata !DIExpression()), !dbg !4064
  %call = call %union.gimple_statement_d* @gimple_alloc_stat(i32 33, i32 0), !dbg !4065
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %p, align 8, !dbg !4064
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !4066
  %1 = load i32, i32* %predictor.addr, align 4, !dbg !4067
  call void @gimple_predict_set_predictor(%union.gimple_statement_d* %0, i32 %1), !dbg !4068
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !4069
  %3 = load i32, i32* %outcome.addr, align 4, !dbg !4070
  call void @gimple_predict_set_outcome(%union.gimple_statement_d* %2, i32 %3), !dbg !4071
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %p, align 8, !dbg !4072
  ret %union.gimple_statement_d* %4, !dbg !4073
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_predict_set_predictor(%union.gimple_statement_d* %gs, i32 %predictor) #0 !dbg !4074 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %predictor.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4077, metadata !DIExpression()), !dbg !4078
  store i32 %predictor, i32* %predictor.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %predictor.addr, metadata !4079, metadata !DIExpression()), !dbg !4080
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4081
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !4082
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !4083
  %bf.load = load i32, i32* %1, align 8, !dbg !4083
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !4083
  %and = and i32 %bf.lshr, 32768, !dbg !4084
  %2 = load i32, i32* %predictor.addr, align 4, !dbg !4085
  %or = or i32 %and, %2, !dbg !4086
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4087
  %gsbase1 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_base*, !dbg !4088
  %4 = bitcast %struct.gimple_statement_base* %gsbase1 to i32*, !dbg !4089
  %bf.load2 = load i32, i32* %4, align 8, !dbg !4090
  %bf.value = and i32 %or, 65535, !dbg !4090
  %bf.shl = shl i32 %bf.value, 16, !dbg !4090
  %bf.clear = and i32 %bf.load2, 65535, !dbg !4090
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !4090
  store i32 %bf.set, i32* %4, align 8, !dbg !4090
  ret void, !dbg !4091
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_predict_set_outcome(%union.gimple_statement_d* %gs, i32 %outcome) #0 !dbg !4092 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %outcome.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4095, metadata !DIExpression()), !dbg !4096
  store i32 %outcome, i32* %outcome.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %outcome.addr, metadata !4097, metadata !DIExpression()), !dbg !4098
  %0 = load i32, i32* %outcome.addr, align 4, !dbg !4099
  %cmp = icmp eq i32 %0, 1, !dbg !4101
  br i1 %cmp, label %if.then, label %if.else, !dbg !4102

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4103
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !4104
  %2 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !4105
  %bf.load = load i32, i32* %2, align 8, !dbg !4106
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !4106
  %or = or i32 %bf.lshr, 32768, !dbg !4106
  %bf.load1 = load i32, i32* %2, align 8, !dbg !4106
  %bf.value = and i32 %or, 65535, !dbg !4106
  %bf.shl = shl i32 %bf.value, 16, !dbg !4106
  %bf.clear = and i32 %bf.load1, 65535, !dbg !4106
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !4106
  store i32 %bf.set, i32* %2, align 8, !dbg !4106
  br label %if.end, !dbg !4103

if.else:                                          ; preds = %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4107
  %gsbase2 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_base*, !dbg !4108
  %4 = bitcast %struct.gimple_statement_base* %gsbase2 to i32*, !dbg !4109
  %bf.load3 = load i32, i32* %4, align 8, !dbg !4110
  %bf.lshr4 = lshr i32 %bf.load3, 16, !dbg !4110
  %and = and i32 %bf.lshr4, -32769, !dbg !4110
  %bf.load5 = load i32, i32* %4, align 8, !dbg !4110
  %bf.value6 = and i32 %and, 65535, !dbg !4110
  %bf.shl7 = shl i32 %bf.value6, 16, !dbg !4110
  %bf.clear8 = and i32 %bf.load5, 65535, !dbg !4110
  %bf.set9 = or i32 %bf.clear8, %bf.shl7, !dbg !4110
  store i32 %bf.set9, i32* %4, align 8, !dbg !4110
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !4111
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.gimple_seq_d* @gimple_seq_alloc() #0 !dbg !4112 {
entry:
  %seq = alloca %struct.gimple_seq_d*, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !4115, metadata !DIExpression()), !dbg !4116
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** @gimple_seq_cache, align 8, !dbg !4117
  store %struct.gimple_seq_d* %0, %struct.gimple_seq_d** %seq, align 8, !dbg !4116
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !4118
  %tobool = icmp ne %struct.gimple_seq_d* %1, null, !dbg !4118
  br i1 %tobool, label %if.then, label %if.else, !dbg !4120

if.then:                                          ; preds = %entry
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** @gimple_seq_cache, align 8, !dbg !4121
  %next_free = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %2, i32 0, i32 2, !dbg !4123
  %3 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %next_free, align 8, !dbg !4123
  store %struct.gimple_seq_d* %3, %struct.gimple_seq_d** @gimple_seq_cache, align 8, !dbg !4124
  %4 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** @gimple_seq_cache, align 8, !dbg !4125
  %5 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !4125
  %cmp = icmp ne %struct.gimple_seq_d* %4, %5, !dbg !4125
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !4125

cond.true:                                        ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 1055, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !4125
  br label %cond.end, !dbg !4125

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !4125

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4125
  %6 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !4126
  %7 = bitcast %struct.gimple_seq_d* %6 to i8*, !dbg !4127
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 24, i1 false), !dbg !4127
  br label %if.end, !dbg !4128

if.else:                                          ; preds = %entry
  %call = call i8* @ggc_alloc_cleared_stat(i64 24), !dbg !4129
  %8 = bitcast i8* %call to %struct.gimple_seq_d*, !dbg !4131
  store %struct.gimple_seq_d* %8, %struct.gimple_seq_d** %seq, align 8, !dbg !4132
  br label %if.end

if.end:                                           ; preds = %if.else, %cond.end
  %9 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !4133
  ret %struct.gimple_seq_d* %9, !dbg !4134
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: noinline nounwind uwtable
define dso_local void @gimple_seq_free(%struct.gimple_seq_d* %seq) #0 !dbg !4135 {
entry:
  %seq.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %seq, %struct.gimple_seq_d** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq.addr, metadata !4138, metadata !DIExpression()), !dbg !4139
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !4140
  %cmp = icmp eq %struct.gimple_seq_d* %0, null, !dbg !4142
  br i1 %cmp, label %if.then, label %if.end, !dbg !4143

if.then:                                          ; preds = %entry
  br label %return, !dbg !4144

if.end:                                           ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !4145
  %call = call %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %1), !dbg !4145
  %cmp1 = icmp eq %struct.gimple_seq_node_d* %call, null, !dbg !4145
  br i1 %cmp1, label %cond.false, label %cond.true, !dbg !4145

cond.true:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 1078, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !4145
  br label %cond.end, !dbg !4145

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !4145

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4145
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !4146
  %call2 = call %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %2), !dbg !4146
  %cmp3 = icmp eq %struct.gimple_seq_node_d* %call2, null, !dbg !4146
  br i1 %cmp3, label %cond.false5, label %cond.true4, !dbg !4146

cond.true4:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 1079, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !4146
  br label %cond.end6, !dbg !4146

cond.false5:                                      ; preds = %cond.end
  br label %cond.end6, !dbg !4146

cond.end6:                                        ; preds = %cond.false5, %cond.true4
  %cond7 = phi i32 [ 0, %cond.true4 ], [ 0, %cond.false5 ], !dbg !4146
  %3 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !4147
  %4 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** @gimple_seq_cache, align 8, !dbg !4147
  %cmp8 = icmp ne %struct.gimple_seq_d* %3, %4, !dbg !4147
  br i1 %cmp8, label %cond.false11, label %lor.lhs.false, !dbg !4147

lor.lhs.false:                                    ; preds = %cond.end6
  %5 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** @gimple_seq_cache, align 8, !dbg !4147
  %cmp9 = icmp eq %struct.gimple_seq_d* %5, null, !dbg !4147
  br i1 %cmp9, label %cond.false11, label %cond.true10, !dbg !4147

cond.true10:                                      ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 1083, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !4147
  br label %cond.end12, !dbg !4147

cond.false11:                                     ; preds = %lor.lhs.false, %cond.end6
  br label %cond.end12, !dbg !4147

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond13 = phi i32 [ 0, %cond.true10 ], [ 0, %cond.false11 ], !dbg !4147
  %6 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** @gimple_seq_cache, align 8, !dbg !4148
  %7 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !4149
  %next_free = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %7, i32 0, i32 2, !dbg !4150
  store %struct.gimple_seq_d* %6, %struct.gimple_seq_d** %next_free, align 8, !dbg !4151
  %8 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !4152
  store %struct.gimple_seq_d* %8, %struct.gimple_seq_d** @gimple_seq_cache, align 8, !dbg !4153
  br label %return, !dbg !4154

return:                                           ; preds = %cond.end12, %if.then
  ret void, !dbg !4154
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %s) #0 !dbg !4155 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !4158, metadata !DIExpression()), !dbg !4159
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !4160
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !4160
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4160

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !4161
  %first = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 0, !dbg !4162
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %first, align 8, !dbg !4162
  br label %cond.end, !dbg !4160

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4160

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !4160
  ret %struct.gimple_seq_node_d* %cond, !dbg !4163
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %s) #0 !dbg !4164 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !4165, metadata !DIExpression()), !dbg !4166
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !4167
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !4167
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4167

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !4168
  %last = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 1, !dbg !4169
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %last, align 8, !dbg !4169
  br label %cond.end, !dbg !4167

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4167

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !4167
  ret %struct.gimple_seq_node_d* %cond, !dbg !4170
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gimple_seq_add_stmt(%struct.gimple_seq_d** %seq_p, %union.gimple_statement_d* %gs) #0 !dbg !4171 {
entry:
  %seq_p.addr = alloca %struct.gimple_seq_d**, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %si = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.gimple_seq_d** %seq_p, %struct.gimple_seq_d*** %seq_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %seq_p.addr, metadata !4174, metadata !DIExpression()), !dbg !4175
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4176, metadata !DIExpression()), !dbg !4177
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %si, metadata !4178, metadata !DIExpression()), !dbg !4179
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4180
  %cmp = icmp eq %union.gimple_statement_d* %0, null, !dbg !4182
  br i1 %cmp, label %if.then, label %if.end, !dbg !4183

if.then:                                          ; preds = %entry
  br label %return, !dbg !4184

if.end:                                           ; preds = %entry
  %1 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %seq_p.addr, align 8, !dbg !4185
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %1, align 8, !dbg !4187
  %cmp1 = icmp eq %struct.gimple_seq_d* %2, null, !dbg !4188
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !4189

if.then2:                                         ; preds = %if.end
  %call = call %struct.gimple_seq_d* @gimple_seq_alloc(), !dbg !4190
  %3 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %seq_p.addr, align 8, !dbg !4191
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %3, align 8, !dbg !4192
  br label %if.end3, !dbg !4193

if.end3:                                          ; preds = %if.then2, %if.end
  %4 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %seq_p.addr, align 8, !dbg !4194
  %5 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %4, align 8, !dbg !4195
  call void @gsi_last(%struct.gimple_stmt_iterator* sret %tmp, %struct.gimple_seq_d* %5), !dbg !4196
  %6 = bitcast %struct.gimple_stmt_iterator* %si to i8*, !dbg !4196
  %7 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4196
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 24, i1 false), !dbg !4196
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4197
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %si, %union.gimple_statement_d* %8, i32 0), !dbg !4198
  br label %return, !dbg !4199

return:                                           ; preds = %if.end3, %if.then
  ret void, !dbg !4199
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_last(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.gimple_seq_d* %seq) #0 !dbg !4200 {
entry:
  %seq.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %seq, %struct.gimple_seq_d** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq.addr, metadata !4203, metadata !DIExpression()), !dbg !4204
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !4205, metadata !DIExpression()), !dbg !4206
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !4207
  %call = call %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %0), !dbg !4208
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !4209
  store %struct.gimple_seq_node_d* %call, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !4210
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !4211
  %seq1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !4212
  store %struct.gimple_seq_d* %1, %struct.gimple_seq_d** %seq1, align 8, !dbg !4213
  %ptr2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !4214
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr2, align 8, !dbg !4214
  %tobool = icmp ne %struct.gimple_seq_node_d* %2, null, !dbg !4215
  br i1 %tobool, label %land.lhs.true, label %cond.false, !dbg !4216

land.lhs.true:                                    ; preds = %entry
  %ptr3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !4217
  %3 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr3, align 8, !dbg !4217
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %3, i32 0, i32 0, !dbg !4218
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4218
  %tobool4 = icmp ne %union.gimple_statement_d* %4, null, !dbg !4219
  br i1 %tobool4, label %cond.true, label %cond.false, !dbg !4220

cond.true:                                        ; preds = %land.lhs.true
  %ptr5 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !4221
  %5 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr5, align 8, !dbg !4221
  %stmt6 = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %5, i32 0, i32 0, !dbg !4222
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt6, align 8, !dbg !4222
  %call7 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %6), !dbg !4223
  br label %cond.end, !dbg !4220

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !4220

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.basic_block_def* [ %call7, %cond.true ], [ null, %cond.false ], !dbg !4220
  %bb = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !4224
  store %struct.basic_block_def* %cond, %struct.basic_block_def** %bb, align 8, !dbg !4225
  ret void, !dbg !4226
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #4

declare dso_local void @gsi_insert_after(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @gimple_seq_add_seq(%struct.gimple_seq_d** %dst_p, %struct.gimple_seq_d* %src) #0 !dbg !4227 {
entry:
  %dst_p.addr = alloca %struct.gimple_seq_d**, align 8
  %src.addr = alloca %struct.gimple_seq_d*, align 8
  %si = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.gimple_seq_d** %dst_p, %struct.gimple_seq_d*** %dst_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %dst_p.addr, metadata !4230, metadata !DIExpression()), !dbg !4231
  store %struct.gimple_seq_d* %src, %struct.gimple_seq_d** %src.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %src.addr, metadata !4232, metadata !DIExpression()), !dbg !4233
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %si, metadata !4234, metadata !DIExpression()), !dbg !4235
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %src.addr, align 8, !dbg !4236
  %cmp = icmp eq %struct.gimple_seq_d* %0, null, !dbg !4238
  br i1 %cmp, label %if.then, label %if.end, !dbg !4239

if.then:                                          ; preds = %entry
  br label %return, !dbg !4240

if.end:                                           ; preds = %entry
  %1 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %dst_p.addr, align 8, !dbg !4241
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %1, align 8, !dbg !4243
  %cmp1 = icmp eq %struct.gimple_seq_d* %2, null, !dbg !4244
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !4245

if.then2:                                         ; preds = %if.end
  %call = call %struct.gimple_seq_d* @gimple_seq_alloc(), !dbg !4246
  %3 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %dst_p.addr, align 8, !dbg !4247
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %3, align 8, !dbg !4248
  br label %if.end3, !dbg !4249

if.end3:                                          ; preds = %if.then2, %if.end
  %4 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %dst_p.addr, align 8, !dbg !4250
  %5 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %4, align 8, !dbg !4251
  call void @gsi_last(%struct.gimple_stmt_iterator* sret %tmp, %struct.gimple_seq_d* %5), !dbg !4252
  %6 = bitcast %struct.gimple_stmt_iterator* %si to i8*, !dbg !4252
  %7 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4252
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 24, i1 false), !dbg !4252
  %8 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %src.addr, align 8, !dbg !4253
  call void @gsi_insert_seq_after(%struct.gimple_stmt_iterator* %si, %struct.gimple_seq_d* %8, i32 0), !dbg !4254
  br label %return, !dbg !4255

return:                                           ; preds = %if.end3, %if.then
  ret void, !dbg !4255
}

declare dso_local void @gsi_insert_seq_after(%struct.gimple_stmt_iterator*, %struct.gimple_seq_d*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @empty_body_p(%struct.gimple_seq_d* %body) #0 !dbg !4256 {
entry:
  %retval = alloca i8, align 1
  %body.addr = alloca %struct.gimple_seq_d*, align 8
  %i = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.gimple_seq_d* %body, %struct.gimple_seq_d** %body.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %body.addr, metadata !4259, metadata !DIExpression()), !dbg !4260
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !4261, metadata !DIExpression()), !dbg !4262
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %body.addr, align 8, !dbg !4263
  %call = call zeroext i8 @gimple_seq_empty_p(%struct.gimple_seq_d* %0), !dbg !4265
  %tobool = icmp ne i8 %call, 0, !dbg !4265
  br i1 %tobool, label %if.then, label %if.end, !dbg !4266

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !4267
  br label %return, !dbg !4267

if.end:                                           ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %body.addr, align 8, !dbg !4268
  call void @gsi_start(%struct.gimple_stmt_iterator* sret %tmp, %struct.gimple_seq_d* %1), !dbg !4270
  %2 = bitcast %struct.gimple_stmt_iterator* %i to i8*, !dbg !4270
  %3 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4270
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2, i8* align 8 %3, i64 24, i1 false), !dbg !4270
  br label %for.cond, !dbg !4271

for.cond:                                         ; preds = %for.inc, %if.end
  %call1 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i), !dbg !4272
  %tobool2 = icmp ne i8 %call1, 0, !dbg !4274
  %lnot = xor i1 %tobool2, true, !dbg !4274
  br i1 %lnot, label %for.body, label %for.end, !dbg !4275

for.body:                                         ; preds = %for.cond
  %call3 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i), !dbg !4276
  %call4 = call zeroext i8 @empty_stmt_p(%union.gimple_statement_d* %call3), !dbg !4278
  %tobool5 = icmp ne i8 %call4, 0, !dbg !4278
  br i1 %tobool5, label %if.end10, label %land.lhs.true, !dbg !4279

land.lhs.true:                                    ; preds = %for.body
  %call6 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i), !dbg !4280
  %call7 = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %call6), !dbg !4281
  %tobool8 = icmp ne i8 %call7, 0, !dbg !4281
  br i1 %tobool8, label %if.end10, label %if.then9, !dbg !4282

if.then9:                                         ; preds = %land.lhs.true
  store i8 0, i8* %retval, align 1, !dbg !4283
  br label %return, !dbg !4283

if.end10:                                         ; preds = %land.lhs.true, %for.body
  br label %for.inc, !dbg !4284

for.inc:                                          ; preds = %if.end10
  call void @gsi_next(%struct.gimple_stmt_iterator* %i), !dbg !4285
  br label %for.cond, !dbg !4286, !llvm.loop !4287

for.end:                                          ; preds = %for.cond
  store i8 1, i8* %retval, align 1, !dbg !4289
  br label %return, !dbg !4289

return:                                           ; preds = %for.end, %if.then9, %if.then
  %4 = load i8, i8* %retval, align 1, !dbg !4290
  ret i8 %4, !dbg !4290
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_seq_empty_p(%struct.gimple_seq_d* %s) #0 !dbg !4291 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !4294, metadata !DIExpression()), !dbg !4295
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !4296
  %cmp = icmp eq %struct.gimple_seq_d* %0, null, !dbg !4297
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !4298

lor.rhs:                                          ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !4299
  %first = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 0, !dbg !4300
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %first, align 8, !dbg !4300
  %cmp1 = icmp eq %struct.gimple_seq_node_d* %2, null, !dbg !4301
  br label %lor.end, !dbg !4298

lor.end:                                          ; preds = %lor.rhs, %entry
  %3 = phi i1 [ true, %entry ], [ %cmp1, %lor.rhs ]
  %lor.ext = zext i1 %3 to i32, !dbg !4298
  %conv = trunc i32 %lor.ext to i8, !dbg !4296
  ret i8 %conv, !dbg !4302
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_start(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.gimple_seq_d* %seq) #0 !dbg !4303 {
entry:
  %seq.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %seq, %struct.gimple_seq_d** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq.addr, metadata !4304, metadata !DIExpression()), !dbg !4305
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !4306, metadata !DIExpression()), !dbg !4307
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !4308
  %call = call %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %0), !dbg !4309
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !4310
  store %struct.gimple_seq_node_d* %call, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !4311
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !4312
  %seq1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !4313
  store %struct.gimple_seq_d* %1, %struct.gimple_seq_d** %seq1, align 8, !dbg !4314
  %ptr2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !4315
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr2, align 8, !dbg !4315
  %tobool = icmp ne %struct.gimple_seq_node_d* %2, null, !dbg !4316
  br i1 %tobool, label %land.lhs.true, label %cond.false, !dbg !4317

land.lhs.true:                                    ; preds = %entry
  %ptr3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !4318
  %3 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr3, align 8, !dbg !4318
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %3, i32 0, i32 0, !dbg !4319
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4319
  %tobool4 = icmp ne %union.gimple_statement_d* %4, null, !dbg !4320
  br i1 %tobool4, label %cond.true, label %cond.false, !dbg !4321

cond.true:                                        ; preds = %land.lhs.true
  %ptr5 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !4322
  %5 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr5, align 8, !dbg !4322
  %stmt6 = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %5, i32 0, i32 0, !dbg !4323
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt6, align 8, !dbg !4323
  %call7 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %6), !dbg !4324
  br label %cond.end, !dbg !4321

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !4321

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.basic_block_def* [ %call7, %cond.true ], [ null, %cond.false ], !dbg !4321
  %bb = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !4325
  store %struct.basic_block_def* %cond, %struct.basic_block_def** %bb, align 8, !dbg !4326
  ret void, !dbg !4327
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !4328 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !4331, metadata !DIExpression()), !dbg !4332
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !4333
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !4333
  %cmp = icmp eq %struct.gimple_seq_node_d* %0, null, !dbg !4334
  %conv = zext i1 %cmp to i32, !dbg !4334
  %conv1 = trunc i32 %conv to i8, !dbg !4335
  ret i8 %conv1, !dbg !4336
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @empty_stmt_p(%union.gimple_statement_d* %stmt) #0 !dbg !4337 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !4340, metadata !DIExpression()), !dbg !4341
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4342
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !4344
  %cmp = icmp eq i32 %call, 18, !dbg !4345
  br i1 %cmp, label %if.then, label %if.end, !dbg !4346

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !4347
  br label %return, !dbg !4347

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4348
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !4350
  %cmp2 = icmp eq i32 %call1, 10, !dbg !4351
  br i1 %cmp2, label %if.then3, label %if.end6, !dbg !4352

if.then3:                                         ; preds = %if.end
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4353
  %call4 = call %struct.gimple_seq_d* @gimple_bind_body(%union.gimple_statement_d* %2), !dbg !4354
  %call5 = call zeroext i8 @empty_body_p(%struct.gimple_seq_d* %call4), !dbg !4355
  store i8 %call5, i8* %retval, align 1, !dbg !4356
  br label %return, !dbg !4356

if.end6:                                          ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !4357
  br label %return, !dbg !4357

return:                                           ; preds = %if.end6, %if.then3, %if.then
  %3 = load i8, i8* %retval, align 1, !dbg !4358
  ret i8 %3, !dbg !4358
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !4359 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !4362, metadata !DIExpression()), !dbg !4363
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !4364
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !4364
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %0, i32 0, i32 0, !dbg !4365
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4365
  ret %union.gimple_statement_d* %1, !dbg !4366
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %gs) #0 !dbg !4367 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4370, metadata !DIExpression()), !dbg !4371
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4372
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !4373
  %cmp = icmp eq i32 %call, 2, !dbg !4374
  %conv = zext i1 %cmp to i32, !dbg !4374
  %conv1 = trunc i32 %conv to i8, !dbg !4373
  ret i8 %conv1, !dbg !4375
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_next(%struct.gimple_stmt_iterator* %i) #0 !dbg !4376 {
entry:
  %i.addr = alloca %struct.gimple_stmt_iterator*, align 8
  store %struct.gimple_stmt_iterator* %i, %struct.gimple_stmt_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %i.addr, metadata !4380, metadata !DIExpression()), !dbg !4381
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !4382
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %0, i32 0, i32 0, !dbg !4383
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !4383
  %next = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %1, i32 0, i32 2, !dbg !4384
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %next, align 8, !dbg !4384
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !4385
  %ptr1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %3, i32 0, i32 0, !dbg !4386
  store %struct.gimple_seq_node_d* %2, %struct.gimple_seq_node_d** %ptr1, align 8, !dbg !4387
  ret void, !dbg !4388
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.gimple_seq_d* @gimple_seq_copy(%struct.gimple_seq_d* %src) #0 !dbg !4389 {
entry:
  %src.addr = alloca %struct.gimple_seq_d*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %new_seq = alloca %struct.gimple_seq_d*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.gimple_seq_d* %src, %struct.gimple_seq_d** %src.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %src.addr, metadata !4392, metadata !DIExpression()), !dbg !4393
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4394, metadata !DIExpression()), !dbg !4395
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %new_seq, metadata !4396, metadata !DIExpression()), !dbg !4397
  %call = call %struct.gimple_seq_d* @gimple_seq_alloc(), !dbg !4398
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %new_seq, align 8, !dbg !4397
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !4399, metadata !DIExpression()), !dbg !4400
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %src.addr, align 8, !dbg !4401
  call void @gsi_start(%struct.gimple_stmt_iterator* sret %tmp, %struct.gimple_seq_d* %0), !dbg !4403
  %1 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4403
  %2 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4403
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %2, i64 24, i1 false), !dbg !4403
  br label %for.cond, !dbg !4404

for.cond:                                         ; preds = %for.inc, %entry
  %call1 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4405
  %tobool = icmp ne i8 %call1, 0, !dbg !4407
  %lnot = xor i1 %tobool, true, !dbg !4407
  br i1 %lnot, label %for.body, label %for.end, !dbg !4408

for.body:                                         ; preds = %for.cond
  %call2 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4409
  %call3 = call %union.gimple_statement_d* @gimple_copy(%union.gimple_statement_d* %call2), !dbg !4411
  store %union.gimple_statement_d* %call3, %union.gimple_statement_d** %stmt, align 8, !dbg !4412
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4413
  call void @gimple_seq_add_stmt(%struct.gimple_seq_d** %new_seq, %union.gimple_statement_d* %3), !dbg !4414
  br label %for.inc, !dbg !4415

for.inc:                                          ; preds = %for.body
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !4416
  br label %for.cond, !dbg !4417, !llvm.loop !4418

for.end:                                          ; preds = %for.cond
  %4 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %new_seq, align 8, !dbg !4420
  ret %struct.gimple_seq_d* %4, !dbg !4421
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_copy(%union.gimple_statement_d* %stmt) #0 !dbg !4422 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  %num_ops = alloca i32, align 4
  %copy = alloca %union.gimple_statement_d*, align 8
  %i = alloca i32, align 4
  %new_seq = alloca %struct.gimple_seq_d*, align 8
  %t = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !4425, metadata !DIExpression()), !dbg !4426
  call void @llvm.dbg.declare(metadata i32* %code, metadata !4427, metadata !DIExpression()), !dbg !4428
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4429
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !4430
  store i32 %call, i32* %code, align 4, !dbg !4428
  call void @llvm.dbg.declare(metadata i32* %num_ops, metadata !4431, metadata !DIExpression()), !dbg !4432
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4433
  %call1 = call i32 @gimple_num_ops(%union.gimple_statement_d* %1), !dbg !4434
  store i32 %call1, i32* %num_ops, align 4, !dbg !4432
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %copy, metadata !4435, metadata !DIExpression()), !dbg !4436
  %2 = load i32, i32* %code, align 4, !dbg !4437
  %3 = load i32, i32* %num_ops, align 4, !dbg !4437
  %call2 = call %union.gimple_statement_d* @gimple_alloc_stat(i32 %2, i32 %3), !dbg !4437
  store %union.gimple_statement_d* %call2, %union.gimple_statement_d** %copy, align 8, !dbg !4436
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4438, metadata !DIExpression()), !dbg !4439
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !4440
  %5 = bitcast %union.gimple_statement_d* %4 to i8*, !dbg !4441
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4442
  %7 = bitcast %union.gimple_statement_d* %6 to i8*, !dbg !4441
  %8 = load i32, i32* %code, align 4, !dbg !4443
  %call3 = call i64 @gimple_size(i32 %8), !dbg !4444
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* align 8 %7, i64 %call3, i1 false), !dbg !4441
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4445
  %call4 = call zeroext i8 @gimple_has_substatements(%union.gimple_statement_d* %9), !dbg !4447
  %tobool = icmp ne i8 %call4, 0, !dbg !4447
  br i1 %tobool, label %if.then, label %if.end, !dbg !4448

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %new_seq, metadata !4449, metadata !DIExpression()), !dbg !4451
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !4452, metadata !DIExpression()), !dbg !4453
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4454
  %call5 = call i32 @gimple_code(%union.gimple_statement_d* %10), !dbg !4455
  switch i32 %call5, label %sw.default [
    i32 10, label %sw.bb
    i32 11, label %sw.bb11
    i32 12, label %sw.bb16
    i32 17, label %sw.bb21
    i32 23, label %sw.bb26
    i32 26, label %sw.bb53
    i32 27, label %sw.bb60
    i32 22, label %sw.bb73
    i32 30, label %sw.bb76
    i32 32, label %sw.bb81
    i32 29, label %sw.bb81
    i32 24, label %sw.bb81
    i32 25, label %sw.bb81
    i32 34, label %sw.bb84
  ], !dbg !4456

sw.bb:                                            ; preds = %if.then
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4457
  %call6 = call %struct.gimple_seq_d* @gimple_bind_body(%union.gimple_statement_d* %11), !dbg !4459
  %call7 = call %struct.gimple_seq_d* @gimple_seq_copy(%struct.gimple_seq_d* %call6), !dbg !4460
  store %struct.gimple_seq_d* %call7, %struct.gimple_seq_d** %new_seq, align 8, !dbg !4461
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !4462
  %13 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %new_seq, align 8, !dbg !4463
  call void @gimple_bind_set_body(%union.gimple_statement_d* %12, %struct.gimple_seq_d* %13), !dbg !4464
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !4465
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4466
  %call8 = call %union.tree_node* @gimple_bind_vars(%union.gimple_statement_d* %15), !dbg !4467
  %call9 = call %union.tree_node* @unshare_expr(%union.tree_node* %call8), !dbg !4468
  call void @gimple_bind_set_vars(%union.gimple_statement_d* %14, %union.tree_node* %call9), !dbg !4469
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !4470
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4471
  %call10 = call %union.tree_node* @gimple_bind_block(%union.gimple_statement_d* %17), !dbg !4472
  call void @gimple_bind_set_block(%union.gimple_statement_d* %16, %union.tree_node* %call10), !dbg !4473
  br label %sw.epilog, !dbg !4474

sw.bb11:                                          ; preds = %if.then
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4475
  %call12 = call %struct.gimple_seq_d* @gimple_catch_handler(%union.gimple_statement_d* %18), !dbg !4476
  %call13 = call %struct.gimple_seq_d* @gimple_seq_copy(%struct.gimple_seq_d* %call12), !dbg !4477
  store %struct.gimple_seq_d* %call13, %struct.gimple_seq_d** %new_seq, align 8, !dbg !4478
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !4479
  %20 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %new_seq, align 8, !dbg !4480
  call void @gimple_catch_set_handler(%union.gimple_statement_d* %19, %struct.gimple_seq_d* %20), !dbg !4481
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4482
  %call14 = call %union.tree_node* @gimple_catch_types(%union.gimple_statement_d* %21), !dbg !4483
  %call15 = call %union.tree_node* @unshare_expr(%union.tree_node* %call14), !dbg !4484
  store %union.tree_node* %call15, %union.tree_node** %t, align 8, !dbg !4485
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !4486
  %23 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4487
  call void @gimple_catch_set_types(%union.gimple_statement_d* %22, %union.tree_node* %23), !dbg !4488
  br label %sw.epilog, !dbg !4489

sw.bb16:                                          ; preds = %if.then
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4490
  %call17 = call %struct.gimple_seq_d* @gimple_eh_filter_failure(%union.gimple_statement_d* %24), !dbg !4491
  %call18 = call %struct.gimple_seq_d* @gimple_seq_copy(%struct.gimple_seq_d* %call17), !dbg !4492
  store %struct.gimple_seq_d* %call18, %struct.gimple_seq_d** %new_seq, align 8, !dbg !4493
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !4494
  %26 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %new_seq, align 8, !dbg !4495
  call void @gimple_eh_filter_set_failure(%union.gimple_statement_d* %25, %struct.gimple_seq_d* %26), !dbg !4496
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4497
  %call19 = call %union.tree_node* @gimple_eh_filter_types(%union.gimple_statement_d* %27), !dbg !4498
  %call20 = call %union.tree_node* @unshare_expr(%union.tree_node* %call19), !dbg !4499
  store %union.tree_node* %call20, %union.tree_node** %t, align 8, !dbg !4500
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !4501
  %29 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4502
  call void @gimple_eh_filter_set_types(%union.gimple_statement_d* %28, %union.tree_node* %29), !dbg !4503
  br label %sw.epilog, !dbg !4504

sw.bb21:                                          ; preds = %if.then
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4505
  %call22 = call %struct.gimple_seq_d* @gimple_try_eval(%union.gimple_statement_d* %30), !dbg !4506
  %call23 = call %struct.gimple_seq_d* @gimple_seq_copy(%struct.gimple_seq_d* %call22), !dbg !4507
  store %struct.gimple_seq_d* %call23, %struct.gimple_seq_d** %new_seq, align 8, !dbg !4508
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !4509
  %32 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %new_seq, align 8, !dbg !4510
  call void @gimple_try_set_eval(%union.gimple_statement_d* %31, %struct.gimple_seq_d* %32), !dbg !4511
  %33 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4512
  %call24 = call %struct.gimple_seq_d* @gimple_try_cleanup(%union.gimple_statement_d* %33), !dbg !4513
  %call25 = call %struct.gimple_seq_d* @gimple_seq_copy(%struct.gimple_seq_d* %call24), !dbg !4514
  store %struct.gimple_seq_d* %call25, %struct.gimple_seq_d** %new_seq, align 8, !dbg !4515
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !4516
  %35 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %new_seq, align 8, !dbg !4517
  call void @gimple_try_set_cleanup(%union.gimple_statement_d* %34, %struct.gimple_seq_d* %35), !dbg !4518
  br label %sw.epilog, !dbg !4519

sw.bb26:                                          ; preds = %if.then
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4520
  %call27 = call %struct.gimple_seq_d* @gimple_omp_for_pre_body(%union.gimple_statement_d* %36), !dbg !4521
  %call28 = call %struct.gimple_seq_d* @gimple_seq_copy(%struct.gimple_seq_d* %call27), !dbg !4522
  store %struct.gimple_seq_d* %call28, %struct.gimple_seq_d** %new_seq, align 8, !dbg !4523
  %37 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !4524
  %38 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %new_seq, align 8, !dbg !4525
  call void @gimple_omp_for_set_pre_body(%union.gimple_statement_d* %37, %struct.gimple_seq_d* %38), !dbg !4526
  %39 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4527
  %call29 = call %union.tree_node* @gimple_omp_for_clauses(%union.gimple_statement_d* %39), !dbg !4528
  %call30 = call %union.tree_node* @unshare_expr(%union.tree_node* %call29), !dbg !4529
  store %union.tree_node* %call30, %union.tree_node** %t, align 8, !dbg !4530
  %40 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !4531
  %41 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4532
  call void @gimple_omp_for_set_clauses(%union.gimple_statement_d* %40, %union.tree_node* %41), !dbg !4533
  %42 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4534
  %call31 = call i64 @gimple_omp_for_collapse(%union.gimple_statement_d* %42), !dbg !4534
  %mul = mul i64 %call31, 40, !dbg !4534
  %call32 = call i8* @ggc_alloc_stat(i64 %mul), !dbg !4534
  %43 = bitcast i8* %call32 to %struct.gimple_omp_for_iter*, !dbg !4534
  %44 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !4535
  %gimple_omp_for = bitcast %union.gimple_statement_d* %44 to %struct.gimple_statement_omp_for*, !dbg !4536
  %iter = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for, i32 0, i32 3, !dbg !4537
  store %struct.gimple_omp_for_iter* %43, %struct.gimple_omp_for_iter** %iter, align 8, !dbg !4538
  store i32 0, i32* %i, align 4, !dbg !4539
  br label %for.cond, !dbg !4541

for.cond:                                         ; preds = %for.inc, %sw.bb26
  %45 = load i32, i32* %i, align 4, !dbg !4542
  %conv = zext i32 %45 to i64, !dbg !4542
  %46 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4544
  %call33 = call i64 @gimple_omp_for_collapse(%union.gimple_statement_d* %46), !dbg !4545
  %cmp = icmp ult i64 %conv, %call33, !dbg !4546
  br i1 %cmp, label %for.body, label %for.end, !dbg !4547

for.body:                                         ; preds = %for.cond
  %47 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !4548
  %48 = load i32, i32* %i, align 4, !dbg !4550
  %conv35 = zext i32 %48 to i64, !dbg !4550
  %49 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4551
  %50 = load i32, i32* %i, align 4, !dbg !4552
  %conv36 = zext i32 %50 to i64, !dbg !4552
  %call37 = call i32 @gimple_omp_for_cond(%union.gimple_statement_d* %49, i64 %conv36), !dbg !4553
  call void @gimple_omp_for_set_cond(%union.gimple_statement_d* %47, i64 %conv35, i32 %call37), !dbg !4554
  %51 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !4555
  %52 = load i32, i32* %i, align 4, !dbg !4556
  %conv38 = zext i32 %52 to i64, !dbg !4556
  %53 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4557
  %54 = load i32, i32* %i, align 4, !dbg !4558
  %conv39 = zext i32 %54 to i64, !dbg !4558
  %call40 = call %union.tree_node* @gimple_omp_for_index(%union.gimple_statement_d* %53, i64 %conv39), !dbg !4559
  call void @gimple_omp_for_set_index(%union.gimple_statement_d* %51, i64 %conv38, %union.tree_node* %call40), !dbg !4560
  %55 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4561
  %56 = load i32, i32* %i, align 4, !dbg !4562
  %conv41 = zext i32 %56 to i64, !dbg !4562
  %call42 = call %union.tree_node* @gimple_omp_for_initial(%union.gimple_statement_d* %55, i64 %conv41), !dbg !4563
  %call43 = call %union.tree_node* @unshare_expr(%union.tree_node* %call42), !dbg !4564
  store %union.tree_node* %call43, %union.tree_node** %t, align 8, !dbg !4565
  %57 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !4566
  %58 = load i32, i32* %i, align 4, !dbg !4567
  %conv44 = zext i32 %58 to i64, !dbg !4567
  %59 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4568
  call void @gimple_omp_for_set_initial(%union.gimple_statement_d* %57, i64 %conv44, %union.tree_node* %59), !dbg !4569
  %60 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4570
  %61 = load i32, i32* %i, align 4, !dbg !4571
  %conv45 = zext i32 %61 to i64, !dbg !4571
  %call46 = call %union.tree_node* @gimple_omp_for_final(%union.gimple_statement_d* %60, i64 %conv45), !dbg !4572
  %call47 = call %union.tree_node* @unshare_expr(%union.tree_node* %call46), !dbg !4573
  store %union.tree_node* %call47, %union.tree_node** %t, align 8, !dbg !4574
  %62 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !4575
  %63 = load i32, i32* %i, align 4, !dbg !4576
  %conv48 = zext i32 %63 to i64, !dbg !4576
  %64 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4577
  call void @gimple_omp_for_set_final(%union.gimple_statement_d* %62, i64 %conv48, %union.tree_node* %64), !dbg !4578
  %65 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4579
  %66 = load i32, i32* %i, align 4, !dbg !4580
  %conv49 = zext i32 %66 to i64, !dbg !4580
  %call50 = call %union.tree_node* @gimple_omp_for_incr(%union.gimple_statement_d* %65, i64 %conv49), !dbg !4581
  %call51 = call %union.tree_node* @unshare_expr(%union.tree_node* %call50), !dbg !4582
  store %union.tree_node* %call51, %union.tree_node** %t, align 8, !dbg !4583
  %67 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !4584
  %68 = load i32, i32* %i, align 4, !dbg !4585
  %conv52 = zext i32 %68 to i64, !dbg !4585
  %69 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4586
  call void @gimple_omp_for_set_incr(%union.gimple_statement_d* %67, i64 %conv52, %union.tree_node* %69), !dbg !4587
  br label %for.inc, !dbg !4588

for.inc:                                          ; preds = %for.body
  %70 = load i32, i32* %i, align 4, !dbg !4589
  %inc = add i32 %70, 1, !dbg !4589
  store i32 %inc, i32* %i, align 4, !dbg !4589
  br label %for.cond, !dbg !4590, !llvm.loop !4591

for.end:                                          ; preds = %for.cond
  br label %copy_omp_body, !dbg !4593

sw.bb53:                                          ; preds = %if.then
  %71 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4594
  %call54 = call %union.tree_node* @gimple_omp_parallel_clauses(%union.gimple_statement_d* %71), !dbg !4595
  %call55 = call %union.tree_node* @unshare_expr(%union.tree_node* %call54), !dbg !4596
  store %union.tree_node* %call55, %union.tree_node** %t, align 8, !dbg !4597
  %72 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !4598
  %73 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4599
  call void @gimple_omp_parallel_set_clauses(%union.gimple_statement_d* %72, %union.tree_node* %73), !dbg !4600
  %74 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4601
  %call56 = call %union.tree_node* @gimple_omp_parallel_child_fn(%union.gimple_statement_d* %74), !dbg !4602
  %call57 = call %union.tree_node* @unshare_expr(%union.tree_node* %call56), !dbg !4603
  store %union.tree_node* %call57, %union.tree_node** %t, align 8, !dbg !4604
  %75 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !4605
  %76 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4606
  call void @gimple_omp_parallel_set_child_fn(%union.gimple_statement_d* %75, %union.tree_node* %76), !dbg !4607
  %77 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4608
  %call58 = call %union.tree_node* @gimple_omp_parallel_data_arg(%union.gimple_statement_d* %77), !dbg !4609
  %call59 = call %union.tree_node* @unshare_expr(%union.tree_node* %call58), !dbg !4610
  store %union.tree_node* %call59, %union.tree_node** %t, align 8, !dbg !4611
  %78 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !4612
  %79 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4613
  call void @gimple_omp_parallel_set_data_arg(%union.gimple_statement_d* %78, %union.tree_node* %79), !dbg !4614
  br label %copy_omp_body, !dbg !4615

sw.bb60:                                          ; preds = %if.then
  %80 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4616
  %call61 = call %union.tree_node* @gimple_omp_task_clauses(%union.gimple_statement_d* %80), !dbg !4617
  %call62 = call %union.tree_node* @unshare_expr(%union.tree_node* %call61), !dbg !4618
  store %union.tree_node* %call62, %union.tree_node** %t, align 8, !dbg !4619
  %81 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !4620
  %82 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4621
  call void @gimple_omp_task_set_clauses(%union.gimple_statement_d* %81, %union.tree_node* %82), !dbg !4622
  %83 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4623
  %call63 = call %union.tree_node* @gimple_omp_task_child_fn(%union.gimple_statement_d* %83), !dbg !4624
  %call64 = call %union.tree_node* @unshare_expr(%union.tree_node* %call63), !dbg !4625
  store %union.tree_node* %call64, %union.tree_node** %t, align 8, !dbg !4626
  %84 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !4627
  %85 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4628
  call void @gimple_omp_task_set_child_fn(%union.gimple_statement_d* %84, %union.tree_node* %85), !dbg !4629
  %86 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4630
  %call65 = call %union.tree_node* @gimple_omp_task_data_arg(%union.gimple_statement_d* %86), !dbg !4631
  %call66 = call %union.tree_node* @unshare_expr(%union.tree_node* %call65), !dbg !4632
  store %union.tree_node* %call66, %union.tree_node** %t, align 8, !dbg !4633
  %87 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !4634
  %88 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4635
  call void @gimple_omp_task_set_data_arg(%union.gimple_statement_d* %87, %union.tree_node* %88), !dbg !4636
  %89 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4637
  %call67 = call %union.tree_node* @gimple_omp_task_copy_fn(%union.gimple_statement_d* %89), !dbg !4638
  %call68 = call %union.tree_node* @unshare_expr(%union.tree_node* %call67), !dbg !4639
  store %union.tree_node* %call68, %union.tree_node** %t, align 8, !dbg !4640
  %90 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !4641
  %91 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4642
  call void @gimple_omp_task_set_copy_fn(%union.gimple_statement_d* %90, %union.tree_node* %91), !dbg !4643
  %92 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4644
  %call69 = call %union.tree_node* @gimple_omp_task_arg_size(%union.gimple_statement_d* %92), !dbg !4645
  %call70 = call %union.tree_node* @unshare_expr(%union.tree_node* %call69), !dbg !4646
  store %union.tree_node* %call70, %union.tree_node** %t, align 8, !dbg !4647
  %93 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !4648
  %94 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4649
  call void @gimple_omp_task_set_arg_size(%union.gimple_statement_d* %93, %union.tree_node* %94), !dbg !4650
  %95 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4651
  %call71 = call %union.tree_node* @gimple_omp_task_arg_align(%union.gimple_statement_d* %95), !dbg !4652
  %call72 = call %union.tree_node* @unshare_expr(%union.tree_node* %call71), !dbg !4653
  store %union.tree_node* %call72, %union.tree_node** %t, align 8, !dbg !4654
  %96 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !4655
  %97 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4656
  call void @gimple_omp_task_set_arg_align(%union.gimple_statement_d* %96, %union.tree_node* %97), !dbg !4657
  br label %copy_omp_body, !dbg !4658

sw.bb73:                                          ; preds = %if.then
  %98 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4659
  %call74 = call %union.tree_node* @gimple_omp_critical_name(%union.gimple_statement_d* %98), !dbg !4660
  %call75 = call %union.tree_node* @unshare_expr(%union.tree_node* %call74), !dbg !4661
  store %union.tree_node* %call75, %union.tree_node** %t, align 8, !dbg !4662
  %99 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !4663
  %100 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4664
  call void @gimple_omp_critical_set_name(%union.gimple_statement_d* %99, %union.tree_node* %100), !dbg !4665
  br label %copy_omp_body, !dbg !4666

sw.bb76:                                          ; preds = %if.then
  %101 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4667
  %call77 = call %union.tree_node* @gimple_omp_sections_clauses(%union.gimple_statement_d* %101), !dbg !4668
  %call78 = call %union.tree_node* @unshare_expr(%union.tree_node* %call77), !dbg !4669
  store %union.tree_node* %call78, %union.tree_node** %t, align 8, !dbg !4670
  %102 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !4671
  %103 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4672
  call void @gimple_omp_sections_set_clauses(%union.gimple_statement_d* %102, %union.tree_node* %103), !dbg !4673
  %104 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4674
  %call79 = call %union.tree_node* @gimple_omp_sections_control(%union.gimple_statement_d* %104), !dbg !4675
  %call80 = call %union.tree_node* @unshare_expr(%union.tree_node* %call79), !dbg !4676
  store %union.tree_node* %call80, %union.tree_node** %t, align 8, !dbg !4677
  %105 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !4678
  %106 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4679
  call void @gimple_omp_sections_set_control(%union.gimple_statement_d* %105, %union.tree_node* %106), !dbg !4680
  br label %sw.bb81, !dbg !4680

sw.bb81:                                          ; preds = %if.then, %if.then, %if.then, %if.then, %sw.bb76
  br label %copy_omp_body, !dbg !4680

copy_omp_body:                                    ; preds = %sw.bb81, %sw.bb73, %sw.bb60, %sw.bb53, %for.end
  call void @llvm.dbg.label(metadata !4681), !dbg !4682
  %107 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4683
  %call82 = call %struct.gimple_seq_d* @gimple_omp_body(%union.gimple_statement_d* %107), !dbg !4684
  %call83 = call %struct.gimple_seq_d* @gimple_seq_copy(%struct.gimple_seq_d* %call82), !dbg !4685
  store %struct.gimple_seq_d* %call83, %struct.gimple_seq_d** %new_seq, align 8, !dbg !4686
  %108 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !4687
  %109 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %new_seq, align 8, !dbg !4688
  call void @gimple_omp_set_body(%union.gimple_statement_d* %108, %struct.gimple_seq_d* %109), !dbg !4689
  br label %sw.epilog, !dbg !4690

sw.bb84:                                          ; preds = %if.then
  %110 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4691
  %call85 = call %struct.gimple_seq_d* @gimple_wce_cleanup(%union.gimple_statement_d* %110), !dbg !4692
  %call86 = call %struct.gimple_seq_d* @gimple_seq_copy(%struct.gimple_seq_d* %call85), !dbg !4693
  store %struct.gimple_seq_d* %call86, %struct.gimple_seq_d** %new_seq, align 8, !dbg !4694
  %111 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !4695
  %112 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %new_seq, align 8, !dbg !4696
  call void @gimple_wce_set_cleanup(%union.gimple_statement_d* %111, %struct.gimple_seq_d* %112), !dbg !4697
  br label %sw.epilog, !dbg !4698

sw.default:                                       ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 2095, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !4699
  br label %sw.epilog, !dbg !4700

sw.epilog:                                        ; preds = %sw.default, %sw.bb84, %copy_omp_body, %sw.bb21, %sw.bb16, %sw.bb11, %sw.bb
  br label %if.end, !dbg !4701

if.end:                                           ; preds = %sw.epilog, %entry
  %113 = load i32, i32* %num_ops, align 4, !dbg !4702
  %cmp87 = icmp ugt i32 %113, 0, !dbg !4704
  br i1 %cmp87, label %if.then89, label %if.end109, !dbg !4705

if.then89:                                        ; preds = %if.end
  store i32 0, i32* %i, align 4, !dbg !4706
  br label %for.cond90, !dbg !4709

for.cond90:                                       ; preds = %for.inc96, %if.then89
  %114 = load i32, i32* %i, align 4, !dbg !4710
  %115 = load i32, i32* %num_ops, align 4, !dbg !4712
  %cmp91 = icmp ult i32 %114, %115, !dbg !4713
  br i1 %cmp91, label %for.body93, label %for.end98, !dbg !4714

for.body93:                                       ; preds = %for.cond90
  %116 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !4715
  %117 = load i32, i32* %i, align 4, !dbg !4716
  %118 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4717
  %119 = load i32, i32* %i, align 4, !dbg !4718
  %call94 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %118, i32 %119), !dbg !4719
  %call95 = call %union.tree_node* @unshare_expr(%union.tree_node* %call94), !dbg !4720
  call void @gimple_set_op(%union.gimple_statement_d* %116, i32 %117, %union.tree_node* %call95), !dbg !4721
  br label %for.inc96, !dbg !4721

for.inc96:                                        ; preds = %for.body93
  %120 = load i32, i32* %i, align 4, !dbg !4722
  %inc97 = add i32 %120, 1, !dbg !4722
  store i32 %inc97, i32* %i, align 4, !dbg !4722
  br label %for.cond90, !dbg !4723, !llvm.loop !4724

for.end98:                                        ; preds = %for.cond90
  %121 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4726
  %call99 = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %121), !dbg !4728
  %tobool100 = icmp ne i8 %call99, 0, !dbg !4728
  br i1 %tobool100, label %if.then101, label %if.end102, !dbg !4729

if.then101:                                       ; preds = %for.end98
  %122 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !4730
  call void @gimple_set_def_ops(%union.gimple_statement_d* %122, %struct.def_optype_d* null), !dbg !4732
  %123 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !4733
  call void @gimple_set_use_ops(%union.gimple_statement_d* %123, %struct.use_optype_d* null), !dbg !4734
  br label %if.end102, !dbg !4735

if.end102:                                        ; preds = %if.then101, %for.end98
  %124 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4736
  %call103 = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %124), !dbg !4738
  %tobool104 = icmp ne i8 %call103, 0, !dbg !4738
  br i1 %tobool104, label %if.then105, label %if.end108, !dbg !4739

if.then105:                                       ; preds = %if.end102
  %125 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !4740
  %126 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4742
  %call106 = call %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %126), !dbg !4743
  call void @gimple_set_vdef(%union.gimple_statement_d* %125, %union.tree_node* %call106), !dbg !4744
  %127 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !4745
  %128 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4746
  %call107 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %128), !dbg !4747
  call void @gimple_set_vuse(%union.gimple_statement_d* %127, %union.tree_node* %call107), !dbg !4748
  br label %if.end108, !dbg !4749

if.end108:                                        ; preds = %if.then105, %if.end102
  %129 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !4750
  call void @gimple_set_modified(%union.gimple_statement_d* %129, i8 zeroext 1), !dbg !4751
  br label %if.end109, !dbg !4752

if.end109:                                        ; preds = %if.end108, %if.end
  %130 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !4753
  ret %union.gimple_statement_d* %130, !dbg !4754
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.gimple_statement_d* @walk_gimple_seq(%struct.gimple_seq_d* %seq, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* %callback_stmt, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, %struct.walk_stmt_info* %wi) #0 !dbg !4755 {
entry:
  %retval = alloca %union.gimple_statement_d*, align 8
  %seq.addr = alloca %struct.gimple_seq_d*, align 8
  %callback_stmt.addr = alloca %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)*, align 8
  %callback_op.addr = alloca %union.tree_node* (%union.tree_node**, i32*, i8*)*, align 8
  %wi.addr = alloca %struct.walk_stmt_info*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %ret = alloca %union.tree_node*, align 8
  store %struct.gimple_seq_d* %seq, %struct.gimple_seq_d** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq.addr, metadata !4768, metadata !DIExpression()), !dbg !4769
  store %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* %callback_stmt, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)** %callback_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)** %callback_stmt.addr, metadata !4770, metadata !DIExpression()), !dbg !4771
  store %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, metadata !4772, metadata !DIExpression()), !dbg !4773
  store %struct.walk_stmt_info* %wi, %struct.walk_stmt_info** %wi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.walk_stmt_info** %wi.addr, metadata !4774, metadata !DIExpression()), !dbg !4775
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4776, metadata !DIExpression()), !dbg !4777
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !4778
  call void @gsi_start(%struct.gimple_stmt_iterator* sret %tmp, %struct.gimple_seq_d* %0), !dbg !4780
  %1 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4780
  %2 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4780
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %2, i64 24, i1 false), !dbg !4780
  br label %for.cond, !dbg !4781

for.cond:                                         ; preds = %for.inc, %entry
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4782
  %tobool = icmp ne i8 %call, 0, !dbg !4784
  %lnot = xor i1 %tobool, true, !dbg !4784
  br i1 %lnot, label %for.body, label %for.end, !dbg !4785

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %ret, metadata !4786, metadata !DIExpression()), !dbg !4788
  %3 = load %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)*, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)** %callback_stmt.addr, align 8, !dbg !4789
  %4 = load %union.tree_node* (%union.tree_node**, i32*, i8*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8, !dbg !4790
  %5 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !4791
  %call1 = call %union.tree_node* @walk_gimple_stmt(%struct.gimple_stmt_iterator* %gsi, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* %3, %union.tree_node* (%union.tree_node**, i32*, i8*)* %4, %struct.walk_stmt_info* %5), !dbg !4792
  store %union.tree_node* %call1, %union.tree_node** %ret, align 8, !dbg !4788
  %6 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !4793
  %tobool2 = icmp ne %union.tree_node* %6, null, !dbg !4793
  br i1 %tobool2, label %if.then, label %if.end, !dbg !4795

if.then:                                          ; preds = %for.body
  %7 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !4796
  %tobool3 = icmp ne %struct.walk_stmt_info* %7, null, !dbg !4796
  br i1 %tobool3, label %cond.false, label %cond.true, !dbg !4796

cond.true:                                        ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 1202, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !4796
  br label %cond.end, !dbg !4796

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !4796

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4796
  %8 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !4798
  %9 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !4799
  %callback_result = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %9, i32 0, i32 7, !dbg !4800
  store %union.tree_node* %8, %union.tree_node** %callback_result, align 8, !dbg !4801
  %call4 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4802
  store %union.gimple_statement_d* %call4, %union.gimple_statement_d** %retval, align 8, !dbg !4803
  br label %return, !dbg !4803

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !4804

for.inc:                                          ; preds = %if.end
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !4805
  br label %for.cond, !dbg !4806, !llvm.loop !4807

for.end:                                          ; preds = %for.cond
  %10 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !4809
  %tobool5 = icmp ne %struct.walk_stmt_info* %10, null, !dbg !4809
  br i1 %tobool5, label %if.then6, label %if.end8, !dbg !4811

if.then6:                                         ; preds = %for.end
  %11 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !4812
  %callback_result7 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %11, i32 0, i32 7, !dbg !4813
  store %union.tree_node* null, %union.tree_node** %callback_result7, align 8, !dbg !4814
  br label %if.end8, !dbg !4812

if.end8:                                          ; preds = %if.then6, %for.end
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !4815
  br label %return, !dbg !4815

return:                                           ; preds = %if.end8, %cond.end
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %retval, align 8, !dbg !4816
  ret %union.gimple_statement_d* %12, !dbg !4816
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @walk_gimple_stmt(%struct.gimple_stmt_iterator* %gsi, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* %callback_stmt, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, %struct.walk_stmt_info* %wi) #0 !dbg !4817 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %callback_stmt.addr = alloca %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)*, align 8
  %callback_op.addr = alloca %union.tree_node* (%union.tree_node**, i32*, i8*)*, align 8
  %wi.addr = alloca %struct.walk_stmt_info*, align 8
  %ret = alloca %union.gimple_statement_d*, align 8
  %tree_ret = alloca %union.tree_node*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %handled_ops = alloca i8, align 1
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !4820, metadata !DIExpression()), !dbg !4821
  store %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* %callback_stmt, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)** %callback_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)** %callback_stmt.addr, metadata !4822, metadata !DIExpression()), !dbg !4823
  store %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, metadata !4824, metadata !DIExpression()), !dbg !4825
  store %struct.walk_stmt_info* %wi, %struct.walk_stmt_info** %wi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.walk_stmt_info** %wi.addr, metadata !4826, metadata !DIExpression()), !dbg !4827
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %ret, metadata !4828, metadata !DIExpression()), !dbg !4829
  call void @llvm.dbg.declare(metadata %union.tree_node** %tree_ret, metadata !4830, metadata !DIExpression()), !dbg !4831
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !4832, metadata !DIExpression()), !dbg !4833
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !4834
  %call = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %0), !dbg !4835
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %stmt, align 8, !dbg !4833
  %1 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !4836
  %tobool = icmp ne %struct.walk_stmt_info* %1, null, !dbg !4836
  br i1 %tobool, label %if.then, label %if.end, !dbg !4838

if.then:                                          ; preds = %entry
  %2 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !4839
  %gsi1 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %2, i32 0, i32 0, !dbg !4840
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !4841
  %4 = bitcast %struct.gimple_stmt_iterator* %gsi1 to i8*, !dbg !4842
  %5 = bitcast %struct.gimple_stmt_iterator* %3 to i8*, !dbg !4842
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 %5, i64 24, i1 false), !dbg !4842
  br label %if.end, !dbg !4839

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !4843
  %tobool2 = icmp ne %struct.walk_stmt_info* %6, null, !dbg !4843
  br i1 %tobool2, label %land.lhs.true, label %if.end10, !dbg !4845

land.lhs.true:                                    ; preds = %if.end
  %7 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !4846
  %want_locations = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %7, i32 0, i32 6, !dbg !4847
  %8 = load i8, i8* %want_locations, align 1, !dbg !4847
  %conv = zext i8 %8 to i32, !dbg !4846
  %tobool3 = icmp ne i32 %conv, 0, !dbg !4846
  br i1 %tobool3, label %land.lhs.true4, label %if.end10, !dbg !4848

land.lhs.true4:                                   ; preds = %land.lhs.true
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4849
  %call5 = call zeroext i8 @gimple_has_location(%union.gimple_statement_d* %9), !dbg !4850
  %conv6 = zext i8 %call5 to i32, !dbg !4850
  %tobool7 = icmp ne i32 %conv6, 0, !dbg !4850
  br i1 %tobool7, label %if.then8, label %if.end10, !dbg !4851

if.then8:                                         ; preds = %land.lhs.true4
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4852
  %call9 = call i32 @gimple_location(%union.gimple_statement_d* %10), !dbg !4853
  store i32 %call9, i32* @input_location, align 4, !dbg !4854
  br label %if.end10, !dbg !4855

if.end10:                                         ; preds = %if.then8, %land.lhs.true4, %land.lhs.true, %if.end
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %ret, align 8, !dbg !4856
  %11 = load %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)*, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)** %callback_stmt.addr, align 8, !dbg !4857
  %tobool11 = icmp ne %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* %11, null, !dbg !4857
  br i1 %tobool11, label %if.then12, label %if.end19, !dbg !4859

if.then12:                                        ; preds = %if.end10
  call void @llvm.dbg.declare(metadata i8* %handled_ops, metadata !4860, metadata !DIExpression()), !dbg !4862
  store i8 0, i8* %handled_ops, align 1, !dbg !4862
  %12 = load %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)*, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)** %callback_stmt.addr, align 8, !dbg !4863
  %13 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !4864
  %14 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !4865
  %call13 = call %union.tree_node* %12(%struct.gimple_stmt_iterator* %13, i8* %handled_ops, %struct.walk_stmt_info* %14), !dbg !4863
  store %union.tree_node* %call13, %union.tree_node** %tree_ret, align 8, !dbg !4866
  %15 = load i8, i8* %handled_ops, align 1, !dbg !4867
  %tobool14 = icmp ne i8 %15, 0, !dbg !4867
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !4869

if.then15:                                        ; preds = %if.then12
  %16 = load %union.tree_node*, %union.tree_node** %tree_ret, align 8, !dbg !4870
  store %union.tree_node* %16, %union.tree_node** %retval, align 8, !dbg !4871
  br label %return, !dbg !4871

if.end16:                                         ; preds = %if.then12
  %17 = load %union.tree_node*, %union.tree_node** %tree_ret, align 8, !dbg !4872
  %cmp = icmp eq %union.tree_node* %17, null, !dbg !4872
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !4872

cond.true:                                        ; preds = %if.end16
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 1592, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !4872
  br label %cond.end, !dbg !4872

cond.false:                                       ; preds = %if.end16
  br label %cond.end, !dbg !4872

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4872
  %18 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !4873
  %call18 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %18), !dbg !4874
  store %union.gimple_statement_d* %call18, %union.gimple_statement_d** %stmt, align 8, !dbg !4875
  br label %if.end19, !dbg !4876

if.end19:                                         ; preds = %cond.end, %if.end10
  %19 = load %union.tree_node* (%union.tree_node**, i32*, i8*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8, !dbg !4877
  %tobool20 = icmp ne %union.tree_node* (%union.tree_node**, i32*, i8*)* %19, null, !dbg !4877
  br i1 %tobool20, label %if.then21, label %if.end26, !dbg !4879

if.then21:                                        ; preds = %if.end19
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4880
  %21 = load %union.tree_node* (%union.tree_node**, i32*, i8*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8, !dbg !4882
  %22 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !4883
  %call22 = call %union.tree_node* @walk_gimple_op(%union.gimple_statement_d* %20, %union.tree_node* (%union.tree_node**, i32*, i8*)* %21, %struct.walk_stmt_info* %22), !dbg !4884
  store %union.tree_node* %call22, %union.tree_node** %tree_ret, align 8, !dbg !4885
  %23 = load %union.tree_node*, %union.tree_node** %tree_ret, align 8, !dbg !4886
  %tobool23 = icmp ne %union.tree_node* %23, null, !dbg !4886
  br i1 %tobool23, label %if.then24, label %if.end25, !dbg !4888

if.then24:                                        ; preds = %if.then21
  %24 = load %union.tree_node*, %union.tree_node** %tree_ret, align 8, !dbg !4889
  store %union.tree_node* %24, %union.tree_node** %retval, align 8, !dbg !4890
  br label %return, !dbg !4890

if.end25:                                         ; preds = %if.then21
  br label %if.end26, !dbg !4891

if.end26:                                         ; preds = %if.end25, %if.end19
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4892
  %call27 = call i32 @gimple_code(%union.gimple_statement_d* %25), !dbg !4893
  switch i32 %call27, label %sw.default [
    i32 10, label %sw.bb
    i32 11, label %sw.bb33
    i32 12, label %sw.bb40
    i32 17, label %sw.bb47
    i32 23, label %sw.bb60
    i32 22, label %sw.bb67
    i32 24, label %sw.bb67
    i32 25, label %sw.bb67
    i32 29, label %sw.bb67
    i32 26, label %sw.bb67
    i32 27, label %sw.bb67
    i32 30, label %sw.bb67
    i32 32, label %sw.bb67
    i32 34, label %sw.bb74
  ], !dbg !4894

sw.bb:                                            ; preds = %if.end26
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4895
  %call28 = call %struct.gimple_seq_d* @gimple_bind_body(%union.gimple_statement_d* %26), !dbg !4897
  %27 = load %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)*, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)** %callback_stmt.addr, align 8, !dbg !4898
  %28 = load %union.tree_node* (%union.tree_node**, i32*, i8*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8, !dbg !4899
  %29 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !4900
  %call29 = call %union.gimple_statement_d* @walk_gimple_seq(%struct.gimple_seq_d* %call28, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* %27, %union.tree_node* (%union.tree_node**, i32*, i8*)* %28, %struct.walk_stmt_info* %29), !dbg !4901
  store %union.gimple_statement_d* %call29, %union.gimple_statement_d** %ret, align 8, !dbg !4902
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %ret, align 8, !dbg !4903
  %tobool30 = icmp ne %union.gimple_statement_d* %30, null, !dbg !4903
  br i1 %tobool30, label %if.then31, label %if.end32, !dbg !4905

if.then31:                                        ; preds = %sw.bb
  %31 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !4906
  %callback_result = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %31, i32 0, i32 7, !dbg !4907
  %32 = load %union.tree_node*, %union.tree_node** %callback_result, align 8, !dbg !4907
  store %union.tree_node* %32, %union.tree_node** %retval, align 8, !dbg !4908
  br label %return, !dbg !4908

if.end32:                                         ; preds = %sw.bb
  br label %sw.epilog, !dbg !4909

sw.bb33:                                          ; preds = %if.end26
  %33 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4910
  %call34 = call %struct.gimple_seq_d* @gimple_catch_handler(%union.gimple_statement_d* %33), !dbg !4911
  %34 = load %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)*, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)** %callback_stmt.addr, align 8, !dbg !4912
  %35 = load %union.tree_node* (%union.tree_node**, i32*, i8*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8, !dbg !4913
  %36 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !4914
  %call35 = call %union.gimple_statement_d* @walk_gimple_seq(%struct.gimple_seq_d* %call34, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* %34, %union.tree_node* (%union.tree_node**, i32*, i8*)* %35, %struct.walk_stmt_info* %36), !dbg !4915
  store %union.gimple_statement_d* %call35, %union.gimple_statement_d** %ret, align 8, !dbg !4916
  %37 = load %union.gimple_statement_d*, %union.gimple_statement_d** %ret, align 8, !dbg !4917
  %tobool36 = icmp ne %union.gimple_statement_d* %37, null, !dbg !4917
  br i1 %tobool36, label %if.then37, label %if.end39, !dbg !4919

if.then37:                                        ; preds = %sw.bb33
  %38 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !4920
  %callback_result38 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %38, i32 0, i32 7, !dbg !4921
  %39 = load %union.tree_node*, %union.tree_node** %callback_result38, align 8, !dbg !4921
  store %union.tree_node* %39, %union.tree_node** %retval, align 8, !dbg !4922
  br label %return, !dbg !4922

if.end39:                                         ; preds = %sw.bb33
  br label %sw.epilog, !dbg !4923

sw.bb40:                                          ; preds = %if.end26
  %40 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4924
  %call41 = call %struct.gimple_seq_d* @gimple_eh_filter_failure(%union.gimple_statement_d* %40), !dbg !4925
  %41 = load %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)*, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)** %callback_stmt.addr, align 8, !dbg !4926
  %42 = load %union.tree_node* (%union.tree_node**, i32*, i8*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8, !dbg !4927
  %43 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !4928
  %call42 = call %union.gimple_statement_d* @walk_gimple_seq(%struct.gimple_seq_d* %call41, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* %41, %union.tree_node* (%union.tree_node**, i32*, i8*)* %42, %struct.walk_stmt_info* %43), !dbg !4929
  store %union.gimple_statement_d* %call42, %union.gimple_statement_d** %ret, align 8, !dbg !4930
  %44 = load %union.gimple_statement_d*, %union.gimple_statement_d** %ret, align 8, !dbg !4931
  %tobool43 = icmp ne %union.gimple_statement_d* %44, null, !dbg !4931
  br i1 %tobool43, label %if.then44, label %if.end46, !dbg !4933

if.then44:                                        ; preds = %sw.bb40
  %45 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !4934
  %callback_result45 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %45, i32 0, i32 7, !dbg !4935
  %46 = load %union.tree_node*, %union.tree_node** %callback_result45, align 8, !dbg !4935
  store %union.tree_node* %46, %union.tree_node** %retval, align 8, !dbg !4936
  br label %return, !dbg !4936

if.end46:                                         ; preds = %sw.bb40
  br label %sw.epilog, !dbg !4937

sw.bb47:                                          ; preds = %if.end26
  %47 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4938
  %call48 = call %struct.gimple_seq_d* @gimple_try_eval(%union.gimple_statement_d* %47), !dbg !4939
  %48 = load %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)*, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)** %callback_stmt.addr, align 8, !dbg !4940
  %49 = load %union.tree_node* (%union.tree_node**, i32*, i8*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8, !dbg !4941
  %50 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !4942
  %call49 = call %union.gimple_statement_d* @walk_gimple_seq(%struct.gimple_seq_d* %call48, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* %48, %union.tree_node* (%union.tree_node**, i32*, i8*)* %49, %struct.walk_stmt_info* %50), !dbg !4943
  store %union.gimple_statement_d* %call49, %union.gimple_statement_d** %ret, align 8, !dbg !4944
  %51 = load %union.gimple_statement_d*, %union.gimple_statement_d** %ret, align 8, !dbg !4945
  %tobool50 = icmp ne %union.gimple_statement_d* %51, null, !dbg !4945
  br i1 %tobool50, label %if.then51, label %if.end53, !dbg !4947

if.then51:                                        ; preds = %sw.bb47
  %52 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !4948
  %callback_result52 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %52, i32 0, i32 7, !dbg !4949
  %53 = load %union.tree_node*, %union.tree_node** %callback_result52, align 8, !dbg !4949
  store %union.tree_node* %53, %union.tree_node** %retval, align 8, !dbg !4950
  br label %return, !dbg !4950

if.end53:                                         ; preds = %sw.bb47
  %54 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4951
  %call54 = call %struct.gimple_seq_d* @gimple_try_cleanup(%union.gimple_statement_d* %54), !dbg !4952
  %55 = load %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)*, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)** %callback_stmt.addr, align 8, !dbg !4953
  %56 = load %union.tree_node* (%union.tree_node**, i32*, i8*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8, !dbg !4954
  %57 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !4955
  %call55 = call %union.gimple_statement_d* @walk_gimple_seq(%struct.gimple_seq_d* %call54, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* %55, %union.tree_node* (%union.tree_node**, i32*, i8*)* %56, %struct.walk_stmt_info* %57), !dbg !4956
  store %union.gimple_statement_d* %call55, %union.gimple_statement_d** %ret, align 8, !dbg !4957
  %58 = load %union.gimple_statement_d*, %union.gimple_statement_d** %ret, align 8, !dbg !4958
  %tobool56 = icmp ne %union.gimple_statement_d* %58, null, !dbg !4958
  br i1 %tobool56, label %if.then57, label %if.end59, !dbg !4960

if.then57:                                        ; preds = %if.end53
  %59 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !4961
  %callback_result58 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %59, i32 0, i32 7, !dbg !4962
  %60 = load %union.tree_node*, %union.tree_node** %callback_result58, align 8, !dbg !4962
  store %union.tree_node* %60, %union.tree_node** %retval, align 8, !dbg !4963
  br label %return, !dbg !4963

if.end59:                                         ; preds = %if.end53
  br label %sw.epilog, !dbg !4964

sw.bb60:                                          ; preds = %if.end26
  %61 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4965
  %call61 = call %struct.gimple_seq_d* @gimple_omp_for_pre_body(%union.gimple_statement_d* %61), !dbg !4966
  %62 = load %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)*, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)** %callback_stmt.addr, align 8, !dbg !4967
  %63 = load %union.tree_node* (%union.tree_node**, i32*, i8*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8, !dbg !4968
  %64 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !4969
  %call62 = call %union.gimple_statement_d* @walk_gimple_seq(%struct.gimple_seq_d* %call61, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* %62, %union.tree_node* (%union.tree_node**, i32*, i8*)* %63, %struct.walk_stmt_info* %64), !dbg !4970
  store %union.gimple_statement_d* %call62, %union.gimple_statement_d** %ret, align 8, !dbg !4971
  %65 = load %union.gimple_statement_d*, %union.gimple_statement_d** %ret, align 8, !dbg !4972
  %tobool63 = icmp ne %union.gimple_statement_d* %65, null, !dbg !4972
  br i1 %tobool63, label %if.then64, label %if.end66, !dbg !4974

if.then64:                                        ; preds = %sw.bb60
  %66 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !4975
  %callback_result65 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %66, i32 0, i32 7, !dbg !4976
  %67 = load %union.tree_node*, %union.tree_node** %callback_result65, align 8, !dbg !4976
  store %union.tree_node* %67, %union.tree_node** %retval, align 8, !dbg !4977
  br label %return, !dbg !4977

if.end66:                                         ; preds = %sw.bb60
  br label %sw.bb67, !dbg !4972

sw.bb67:                                          ; preds = %if.end26, %if.end26, %if.end26, %if.end26, %if.end26, %if.end26, %if.end26, %if.end26, %if.end66
  %68 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4978
  %call68 = call %struct.gimple_seq_d* @gimple_omp_body(%union.gimple_statement_d* %68), !dbg !4979
  %69 = load %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)*, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)** %callback_stmt.addr, align 8, !dbg !4980
  %70 = load %union.tree_node* (%union.tree_node**, i32*, i8*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8, !dbg !4981
  %71 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !4982
  %call69 = call %union.gimple_statement_d* @walk_gimple_seq(%struct.gimple_seq_d* %call68, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* %69, %union.tree_node* (%union.tree_node**, i32*, i8*)* %70, %struct.walk_stmt_info* %71), !dbg !4983
  store %union.gimple_statement_d* %call69, %union.gimple_statement_d** %ret, align 8, !dbg !4984
  %72 = load %union.gimple_statement_d*, %union.gimple_statement_d** %ret, align 8, !dbg !4985
  %tobool70 = icmp ne %union.gimple_statement_d* %72, null, !dbg !4985
  br i1 %tobool70, label %if.then71, label %if.end73, !dbg !4987

if.then71:                                        ; preds = %sw.bb67
  %73 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !4988
  %callback_result72 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %73, i32 0, i32 7, !dbg !4989
  %74 = load %union.tree_node*, %union.tree_node** %callback_result72, align 8, !dbg !4989
  store %union.tree_node* %74, %union.tree_node** %retval, align 8, !dbg !4990
  br label %return, !dbg !4990

if.end73:                                         ; preds = %sw.bb67
  br label %sw.epilog, !dbg !4991

sw.bb74:                                          ; preds = %if.end26
  %75 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4992
  %call75 = call %struct.gimple_seq_d* @gimple_wce_cleanup(%union.gimple_statement_d* %75), !dbg !4993
  %76 = load %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)*, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)** %callback_stmt.addr, align 8, !dbg !4994
  %77 = load %union.tree_node* (%union.tree_node**, i32*, i8*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8, !dbg !4995
  %78 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !4996
  %call76 = call %union.gimple_statement_d* @walk_gimple_seq(%struct.gimple_seq_d* %call75, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* %76, %union.tree_node* (%union.tree_node**, i32*, i8*)* %77, %struct.walk_stmt_info* %78), !dbg !4997
  store %union.gimple_statement_d* %call76, %union.gimple_statement_d** %ret, align 8, !dbg !4998
  %79 = load %union.gimple_statement_d*, %union.gimple_statement_d** %ret, align 8, !dbg !4999
  %tobool77 = icmp ne %union.gimple_statement_d* %79, null, !dbg !4999
  br i1 %tobool77, label %if.then78, label %if.end80, !dbg !5001

if.then78:                                        ; preds = %sw.bb74
  %80 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5002
  %callback_result79 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %80, i32 0, i32 7, !dbg !5003
  %81 = load %union.tree_node*, %union.tree_node** %callback_result79, align 8, !dbg !5003
  store %union.tree_node* %81, %union.tree_node** %retval, align 8, !dbg !5004
  br label %return, !dbg !5004

if.end80:                                         ; preds = %sw.bb74
  br label %sw.epilog, !dbg !5005

sw.default:                                       ; preds = %if.end26
  %82 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5006
  %call81 = call zeroext i8 @gimple_has_substatements(%union.gimple_statement_d* %82), !dbg !5006
  %tobool82 = icmp ne i8 %call81, 0, !dbg !5006
  br i1 %tobool82, label %cond.true83, label %cond.false84, !dbg !5006

cond.true83:                                      ; preds = %sw.default
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 1671, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !5006
  br label %cond.end85, !dbg !5006

cond.false84:                                     ; preds = %sw.default
  br label %cond.end85, !dbg !5006

cond.end85:                                       ; preds = %cond.false84, %cond.true83
  %cond86 = phi i32 [ 0, %cond.true83 ], [ 0, %cond.false84 ], !dbg !5006
  br label %sw.epilog, !dbg !5007

sw.epilog:                                        ; preds = %cond.end85, %if.end80, %if.end73, %if.end59, %if.end46, %if.end39, %if.end32
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5008
  br label %return, !dbg !5008

return:                                           ; preds = %sw.epilog, %if.then78, %if.then71, %if.then64, %if.then57, %if.then51, %if.then44, %if.then37, %if.then31, %if.then24, %if.then15
  %83 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5009
  ret %union.tree_node* %83, !dbg !5009
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @walk_gimple_op(%union.gimple_statement_d* %stmt, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, %struct.walk_stmt_info* %wi) #0 !dbg !5010 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %callback_op.addr = alloca %union.tree_node* (%union.tree_node**, i32*, i8*)*, align 8
  %wi.addr = alloca %struct.walk_stmt_info*, align 8
  %pset = alloca %struct.pointer_set_t*, align 8
  %i = alloca i32, align 4
  %ret = alloca %union.tree_node*, align 8
  %gss = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5013, metadata !DIExpression()), !dbg !5014
  store %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, metadata !5015, metadata !DIExpression()), !dbg !5016
  store %struct.walk_stmt_info* %wi, %struct.walk_stmt_info** %wi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.walk_stmt_info** %wi.addr, metadata !5017, metadata !DIExpression()), !dbg !5018
  call void @llvm.dbg.declare(metadata %struct.pointer_set_t** %pset, metadata !5019, metadata !DIExpression()), !dbg !5020
  %0 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5021
  %tobool = icmp ne %struct.walk_stmt_info* %0, null, !dbg !5022
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5022

cond.true:                                        ; preds = %entry
  %1 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5023
  %pset1 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %1, i32 0, i32 2, !dbg !5024
  %2 = load %struct.pointer_set_t*, %struct.pointer_set_t** %pset1, align 8, !dbg !5024
  br label %cond.end, !dbg !5022

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5022

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.pointer_set_t* [ %2, %cond.true ], [ null, %cond.false ], !dbg !5022
  store %struct.pointer_set_t* %cond, %struct.pointer_set_t** %pset, align 8, !dbg !5020
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5025, metadata !DIExpression()), !dbg !5026
  call void @llvm.dbg.declare(metadata %union.tree_node** %ret, metadata !5027, metadata !DIExpression()), !dbg !5028
  store %union.tree_node* null, %union.tree_node** %ret, align 8, !dbg !5028
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5029
  %call = call i32 @gimple_code(%union.gimple_statement_d* %3), !dbg !5030
  switch i32 %call, label %sw.default [
    i32 6, label %sw.bb
    i32 8, label %sw.bb39
    i32 11, label %sw.bb80
    i32 12, label %sw.bb86
    i32 7, label %sw.bb92
    i32 21, label %sw.bb97
    i32 22, label %sw.bb108
    i32 23, label %sw.bb114
    i32 26, label %sw.bb153
    i32 27, label %sw.bb169
    i32 30, label %sw.bb200
    i32 32, label %sw.bb211
    i32 19, label %sw.bb217
    i32 20, label %sw.bb228
    i32 18, label %sw.bb234
    i32 14, label %sw.bb234
    i32 28, label %sw.bb234
    i32 33, label %sw.bb234
  ], !dbg !5031

sw.bb:                                            ; preds = %cond.end
  %4 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5032
  %tobool2 = icmp ne %struct.walk_stmt_info* %4, null, !dbg !5032
  br i1 %tobool2, label %if.then, label %if.end, !dbg !5035

if.then:                                          ; preds = %sw.bb
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5036
  %call3 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %5), !dbg !5037
  %call4 = call zeroext i8 @is_gimple_reg(%union.tree_node* %call3), !dbg !5038
  %tobool5 = icmp ne i8 %call4, 0, !dbg !5038
  br i1 %tobool5, label %lor.rhs, label %lor.end, !dbg !5039

lor.rhs:                                          ; preds = %if.then
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5040
  %call6 = call zeroext i8 @gimple_assign_single_p(%union.gimple_statement_d* %6), !dbg !5041
  %tobool7 = icmp ne i8 %call6, 0, !dbg !5042
  %lnot = xor i1 %tobool7, true, !dbg !5042
  br label %lor.end, !dbg !5039

lor.end:                                          ; preds = %lor.rhs, %if.then
  %7 = phi i1 [ true, %if.then ], [ %lnot, %lor.rhs ]
  %lor.ext = zext i1 %7 to i32, !dbg !5039
  %conv = trunc i32 %lor.ext to i8, !dbg !5043
  %8 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5044
  %val_only = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %8, i32 0, i32 3, !dbg !5045
  store i8 %conv, i8* %val_only, align 8, !dbg !5046
  br label %if.end, !dbg !5044

if.end:                                           ; preds = %lor.end, %sw.bb
  store i32 1, i32* %i, align 4, !dbg !5047
  br label %for.cond, !dbg !5049

for.cond:                                         ; preds = %for.inc, %if.end
  %9 = load i32, i32* %i, align 4, !dbg !5050
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5052
  %call8 = call i32 @gimple_num_ops(%union.gimple_statement_d* %10), !dbg !5053
  %cmp = icmp ult i32 %9, %call8, !dbg !5054
  br i1 %cmp, label %for.body, label %for.end, !dbg !5055

for.body:                                         ; preds = %for.cond
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5056
  %12 = load i32, i32* %i, align 4, !dbg !5056
  %call10 = call %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %11, i32 %12), !dbg !5056
  %13 = load %union.tree_node* (%union.tree_node**, i32*, i8*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8, !dbg !5056
  %14 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5056
  %15 = bitcast %struct.walk_stmt_info* %14 to i8*, !dbg !5056
  %16 = load %struct.pointer_set_t*, %struct.pointer_set_t** %pset, align 8, !dbg !5056
  %call11 = call %union.tree_node* @walk_tree_1(%union.tree_node** %call10, %union.tree_node* (%union.tree_node**, i32*, i8*)* %13, i8* %15, %struct.pointer_set_t* %16, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !5056
  store %union.tree_node* %call11, %union.tree_node** %ret, align 8, !dbg !5058
  %17 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5059
  %tobool12 = icmp ne %union.tree_node* %17, null, !dbg !5059
  br i1 %tobool12, label %if.then13, label %if.end14, !dbg !5061

if.then13:                                        ; preds = %for.body
  %18 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5062
  store %union.tree_node* %18, %union.tree_node** %retval, align 8, !dbg !5063
  br label %return, !dbg !5063

if.end14:                                         ; preds = %for.body
  br label %for.inc, !dbg !5064

for.inc:                                          ; preds = %if.end14
  %19 = load i32, i32* %i, align 4, !dbg !5065
  %inc = add i32 %19, 1, !dbg !5065
  store i32 %inc, i32* %i, align 4, !dbg !5065
  br label %for.cond, !dbg !5066, !llvm.loop !5067

for.end:                                          ; preds = %for.cond
  %20 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5069
  %tobool15 = icmp ne %struct.walk_stmt_info* %20, null, !dbg !5069
  br i1 %tobool15, label %if.then16, label %if.end28, !dbg !5071

if.then16:                                        ; preds = %for.end
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5072
  %call17 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %21), !dbg !5074
  %call18 = call zeroext i8 @is_gimple_mem_rhs(%union.tree_node* %call17), !dbg !5075
  %tobool19 = icmp ne i8 %call18, 0, !dbg !5075
  br i1 %tobool19, label %lor.rhs20, label %lor.end24, !dbg !5076

lor.rhs20:                                        ; preds = %if.then16
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5077
  %call21 = call zeroext i8 @gimple_assign_single_p(%union.gimple_statement_d* %22), !dbg !5078
  %tobool22 = icmp ne i8 %call21, 0, !dbg !5079
  %lnot23 = xor i1 %tobool22, true, !dbg !5079
  br label %lor.end24, !dbg !5076

lor.end24:                                        ; preds = %lor.rhs20, %if.then16
  %23 = phi i1 [ true, %if.then16 ], [ %lnot23, %lor.rhs20 ]
  %lor.ext25 = zext i1 %23 to i32, !dbg !5076
  %conv26 = trunc i32 %lor.ext25 to i8, !dbg !5080
  %24 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5081
  %val_only27 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %24, i32 0, i32 3, !dbg !5082
  store i8 %conv26, i8* %val_only27, align 8, !dbg !5083
  %25 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5084
  %is_lhs = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %25, i32 0, i32 4, !dbg !5085
  store i8 1, i8* %is_lhs, align 1, !dbg !5086
  br label %if.end28, !dbg !5087

if.end28:                                         ; preds = %lor.end24, %for.end
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5088
  %call29 = call %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %26, i32 0), !dbg !5088
  %27 = load %union.tree_node* (%union.tree_node**, i32*, i8*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8, !dbg !5088
  %28 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5088
  %29 = bitcast %struct.walk_stmt_info* %28 to i8*, !dbg !5088
  %30 = load %struct.pointer_set_t*, %struct.pointer_set_t** %pset, align 8, !dbg !5088
  %call30 = call %union.tree_node* @walk_tree_1(%union.tree_node** %call29, %union.tree_node* (%union.tree_node**, i32*, i8*)* %27, i8* %29, %struct.pointer_set_t* %30, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !5088
  store %union.tree_node* %call30, %union.tree_node** %ret, align 8, !dbg !5089
  %31 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5090
  %tobool31 = icmp ne %union.tree_node* %31, null, !dbg !5090
  br i1 %tobool31, label %if.then32, label %if.end33, !dbg !5092

if.then32:                                        ; preds = %if.end28
  %32 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5093
  store %union.tree_node* %32, %union.tree_node** %retval, align 8, !dbg !5094
  br label %return, !dbg !5094

if.end33:                                         ; preds = %if.end28
  %33 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5095
  %tobool34 = icmp ne %struct.walk_stmt_info* %33, null, !dbg !5095
  br i1 %tobool34, label %if.then35, label %if.end38, !dbg !5097

if.then35:                                        ; preds = %if.end33
  %34 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5098
  %val_only36 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %34, i32 0, i32 3, !dbg !5100
  store i8 1, i8* %val_only36, align 8, !dbg !5101
  %35 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5102
  %is_lhs37 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %35, i32 0, i32 4, !dbg !5103
  store i8 0, i8* %is_lhs37, align 1, !dbg !5104
  br label %if.end38, !dbg !5105

if.end38:                                         ; preds = %if.then35, %if.end33
  br label %sw.epilog, !dbg !5106

sw.bb39:                                          ; preds = %cond.end
  %36 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5107
  %tobool40 = icmp ne %struct.walk_stmt_info* %36, null, !dbg !5107
  br i1 %tobool40, label %if.then41, label %if.end43, !dbg !5109

if.then41:                                        ; preds = %sw.bb39
  %37 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5110
  %is_lhs42 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %37, i32 0, i32 4, !dbg !5111
  store i8 0, i8* %is_lhs42, align 1, !dbg !5112
  br label %if.end43, !dbg !5110

if.end43:                                         ; preds = %if.then41, %sw.bb39
  %38 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5113
  %call44 = call %union.tree_node** @gimple_call_chain_ptr(%union.gimple_statement_d* %38), !dbg !5113
  %39 = load %union.tree_node* (%union.tree_node**, i32*, i8*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8, !dbg !5113
  %40 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5113
  %41 = bitcast %struct.walk_stmt_info* %40 to i8*, !dbg !5113
  %42 = load %struct.pointer_set_t*, %struct.pointer_set_t** %pset, align 8, !dbg !5113
  %call45 = call %union.tree_node* @walk_tree_1(%union.tree_node** %call44, %union.tree_node* (%union.tree_node**, i32*, i8*)* %39, i8* %41, %struct.pointer_set_t* %42, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !5113
  store %union.tree_node* %call45, %union.tree_node** %ret, align 8, !dbg !5114
  %43 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5115
  %tobool46 = icmp ne %union.tree_node* %43, null, !dbg !5115
  br i1 %tobool46, label %if.then47, label %if.end48, !dbg !5117

if.then47:                                        ; preds = %if.end43
  %44 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5118
  store %union.tree_node* %44, %union.tree_node** %retval, align 8, !dbg !5119
  br label %return, !dbg !5119

if.end48:                                         ; preds = %if.end43
  %45 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5120
  %call49 = call %union.tree_node** @gimple_call_fn_ptr(%union.gimple_statement_d* %45), !dbg !5120
  %46 = load %union.tree_node* (%union.tree_node**, i32*, i8*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8, !dbg !5120
  %47 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5120
  %48 = bitcast %struct.walk_stmt_info* %47 to i8*, !dbg !5120
  %49 = load %struct.pointer_set_t*, %struct.pointer_set_t** %pset, align 8, !dbg !5120
  %call50 = call %union.tree_node* @walk_tree_1(%union.tree_node** %call49, %union.tree_node* (%union.tree_node**, i32*, i8*)* %46, i8* %48, %struct.pointer_set_t* %49, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !5120
  store %union.tree_node* %call50, %union.tree_node** %ret, align 8, !dbg !5121
  %50 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5122
  %tobool51 = icmp ne %union.tree_node* %50, null, !dbg !5122
  br i1 %tobool51, label %if.then52, label %if.end53, !dbg !5124

if.then52:                                        ; preds = %if.end48
  %51 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5125
  store %union.tree_node* %51, %union.tree_node** %retval, align 8, !dbg !5126
  br label %return, !dbg !5126

if.end53:                                         ; preds = %if.end48
  store i32 0, i32* %i, align 4, !dbg !5127
  br label %for.cond54, !dbg !5129

for.cond54:                                       ; preds = %for.inc64, %if.end53
  %52 = load i32, i32* %i, align 4, !dbg !5130
  %53 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5132
  %call55 = call i32 @gimple_call_num_args(%union.gimple_statement_d* %53), !dbg !5133
  %cmp56 = icmp ult i32 %52, %call55, !dbg !5134
  br i1 %cmp56, label %for.body58, label %for.end66, !dbg !5135

for.body58:                                       ; preds = %for.cond54
  %54 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5136
  %55 = load i32, i32* %i, align 4, !dbg !5136
  %call59 = call %union.tree_node** @gimple_call_arg_ptr(%union.gimple_statement_d* %54, i32 %55), !dbg !5136
  %56 = load %union.tree_node* (%union.tree_node**, i32*, i8*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8, !dbg !5136
  %57 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5136
  %58 = bitcast %struct.walk_stmt_info* %57 to i8*, !dbg !5136
  %59 = load %struct.pointer_set_t*, %struct.pointer_set_t** %pset, align 8, !dbg !5136
  %call60 = call %union.tree_node* @walk_tree_1(%union.tree_node** %call59, %union.tree_node* (%union.tree_node**, i32*, i8*)* %56, i8* %58, %struct.pointer_set_t* %59, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !5136
  store %union.tree_node* %call60, %union.tree_node** %ret, align 8, !dbg !5138
  %60 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5139
  %tobool61 = icmp ne %union.tree_node* %60, null, !dbg !5139
  br i1 %tobool61, label %if.then62, label %if.end63, !dbg !5141

if.then62:                                        ; preds = %for.body58
  %61 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5142
  store %union.tree_node* %61, %union.tree_node** %retval, align 8, !dbg !5143
  br label %return, !dbg !5143

if.end63:                                         ; preds = %for.body58
  br label %for.inc64, !dbg !5144

for.inc64:                                        ; preds = %if.end63
  %62 = load i32, i32* %i, align 4, !dbg !5145
  %inc65 = add i32 %62, 1, !dbg !5145
  store i32 %inc65, i32* %i, align 4, !dbg !5145
  br label %for.cond54, !dbg !5146, !llvm.loop !5147

for.end66:                                        ; preds = %for.cond54
  %63 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5149
  %tobool67 = icmp ne %struct.walk_stmt_info* %63, null, !dbg !5149
  br i1 %tobool67, label %if.then68, label %if.end70, !dbg !5151

if.then68:                                        ; preds = %for.end66
  %64 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5152
  %is_lhs69 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %64, i32 0, i32 4, !dbg !5153
  store i8 1, i8* %is_lhs69, align 1, !dbg !5154
  br label %if.end70, !dbg !5152

if.end70:                                         ; preds = %if.then68, %for.end66
  %65 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5155
  %call71 = call %union.tree_node** @gimple_call_lhs_ptr(%union.gimple_statement_d* %65), !dbg !5155
  %66 = load %union.tree_node* (%union.tree_node**, i32*, i8*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8, !dbg !5155
  %67 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5155
  %68 = bitcast %struct.walk_stmt_info* %67 to i8*, !dbg !5155
  %69 = load %struct.pointer_set_t*, %struct.pointer_set_t** %pset, align 8, !dbg !5155
  %call72 = call %union.tree_node* @walk_tree_1(%union.tree_node** %call71, %union.tree_node* (%union.tree_node**, i32*, i8*)* %66, i8* %68, %struct.pointer_set_t* %69, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !5155
  store %union.tree_node* %call72, %union.tree_node** %ret, align 8, !dbg !5156
  %70 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5157
  %tobool73 = icmp ne %union.tree_node* %70, null, !dbg !5157
  br i1 %tobool73, label %if.then74, label %if.end75, !dbg !5159

if.then74:                                        ; preds = %if.end70
  %71 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5160
  store %union.tree_node* %71, %union.tree_node** %retval, align 8, !dbg !5161
  br label %return, !dbg !5161

if.end75:                                         ; preds = %if.end70
  %72 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5162
  %tobool76 = icmp ne %struct.walk_stmt_info* %72, null, !dbg !5162
  br i1 %tobool76, label %if.then77, label %if.end79, !dbg !5164

if.then77:                                        ; preds = %if.end75
  %73 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5165
  %is_lhs78 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %73, i32 0, i32 4, !dbg !5166
  store i8 0, i8* %is_lhs78, align 1, !dbg !5167
  br label %if.end79, !dbg !5165

if.end79:                                         ; preds = %if.then77, %if.end75
  br label %sw.epilog, !dbg !5168

sw.bb80:                                          ; preds = %cond.end
  %74 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5169
  %call81 = call %union.tree_node** @gimple_catch_types_ptr(%union.gimple_statement_d* %74), !dbg !5169
  %75 = load %union.tree_node* (%union.tree_node**, i32*, i8*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8, !dbg !5169
  %76 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5169
  %77 = bitcast %struct.walk_stmt_info* %76 to i8*, !dbg !5169
  %78 = load %struct.pointer_set_t*, %struct.pointer_set_t** %pset, align 8, !dbg !5169
  %call82 = call %union.tree_node* @walk_tree_1(%union.tree_node** %call81, %union.tree_node* (%union.tree_node**, i32*, i8*)* %75, i8* %77, %struct.pointer_set_t* %78, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !5169
  store %union.tree_node* %call82, %union.tree_node** %ret, align 8, !dbg !5170
  %79 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5171
  %tobool83 = icmp ne %union.tree_node* %79, null, !dbg !5171
  br i1 %tobool83, label %if.then84, label %if.end85, !dbg !5173

if.then84:                                        ; preds = %sw.bb80
  %80 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5174
  store %union.tree_node* %80, %union.tree_node** %retval, align 8, !dbg !5175
  br label %return, !dbg !5175

if.end85:                                         ; preds = %sw.bb80
  br label %sw.epilog, !dbg !5176

sw.bb86:                                          ; preds = %cond.end
  %81 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5177
  %call87 = call %union.tree_node** @gimple_eh_filter_types_ptr(%union.gimple_statement_d* %81), !dbg !5177
  %82 = load %union.tree_node* (%union.tree_node**, i32*, i8*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8, !dbg !5177
  %83 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5177
  %84 = bitcast %struct.walk_stmt_info* %83 to i8*, !dbg !5177
  %85 = load %struct.pointer_set_t*, %struct.pointer_set_t** %pset, align 8, !dbg !5177
  %call88 = call %union.tree_node* @walk_tree_1(%union.tree_node** %call87, %union.tree_node* (%union.tree_node**, i32*, i8*)* %82, i8* %84, %struct.pointer_set_t* %85, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !5177
  store %union.tree_node* %call88, %union.tree_node** %ret, align 8, !dbg !5178
  %86 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5179
  %tobool89 = icmp ne %union.tree_node* %86, null, !dbg !5179
  br i1 %tobool89, label %if.then90, label %if.end91, !dbg !5181

if.then90:                                        ; preds = %sw.bb86
  %87 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5182
  store %union.tree_node* %87, %union.tree_node** %retval, align 8, !dbg !5183
  br label %return, !dbg !5183

if.end91:                                         ; preds = %sw.bb86
  br label %sw.epilog, !dbg !5184

sw.bb92:                                          ; preds = %cond.end
  %88 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5185
  %89 = load %union.tree_node* (%union.tree_node**, i32*, i8*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8, !dbg !5186
  %90 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5187
  %call93 = call %union.tree_node* @walk_gimple_asm(%union.gimple_statement_d* %88, %union.tree_node* (%union.tree_node**, i32*, i8*)* %89, %struct.walk_stmt_info* %90), !dbg !5188
  store %union.tree_node* %call93, %union.tree_node** %ret, align 8, !dbg !5189
  %91 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5190
  %tobool94 = icmp ne %union.tree_node* %91, null, !dbg !5190
  br i1 %tobool94, label %if.then95, label %if.end96, !dbg !5192

if.then95:                                        ; preds = %sw.bb92
  %92 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5193
  store %union.tree_node* %92, %union.tree_node** %retval, align 8, !dbg !5194
  br label %return, !dbg !5194

if.end96:                                         ; preds = %sw.bb92
  br label %sw.epilog, !dbg !5195

sw.bb97:                                          ; preds = %cond.end
  %93 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5196
  %call98 = call %union.tree_node** @gimple_omp_continue_control_def_ptr(%union.gimple_statement_d* %93), !dbg !5196
  %94 = load %union.tree_node* (%union.tree_node**, i32*, i8*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8, !dbg !5196
  %95 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5196
  %96 = bitcast %struct.walk_stmt_info* %95 to i8*, !dbg !5196
  %97 = load %struct.pointer_set_t*, %struct.pointer_set_t** %pset, align 8, !dbg !5196
  %call99 = call %union.tree_node* @walk_tree_1(%union.tree_node** %call98, %union.tree_node* (%union.tree_node**, i32*, i8*)* %94, i8* %96, %struct.pointer_set_t* %97, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !5196
  store %union.tree_node* %call99, %union.tree_node** %ret, align 8, !dbg !5197
  %98 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5198
  %tobool100 = icmp ne %union.tree_node* %98, null, !dbg !5198
  br i1 %tobool100, label %if.then101, label %if.end102, !dbg !5200

if.then101:                                       ; preds = %sw.bb97
  %99 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5201
  store %union.tree_node* %99, %union.tree_node** %retval, align 8, !dbg !5202
  br label %return, !dbg !5202

if.end102:                                        ; preds = %sw.bb97
  %100 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5203
  %call103 = call %union.tree_node** @gimple_omp_continue_control_use_ptr(%union.gimple_statement_d* %100), !dbg !5203
  %101 = load %union.tree_node* (%union.tree_node**, i32*, i8*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8, !dbg !5203
  %102 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5203
  %103 = bitcast %struct.walk_stmt_info* %102 to i8*, !dbg !5203
  %104 = load %struct.pointer_set_t*, %struct.pointer_set_t** %pset, align 8, !dbg !5203
  %call104 = call %union.tree_node* @walk_tree_1(%union.tree_node** %call103, %union.tree_node* (%union.tree_node**, i32*, i8*)* %101, i8* %103, %struct.pointer_set_t* %104, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !5203
  store %union.tree_node* %call104, %union.tree_node** %ret, align 8, !dbg !5204
  %105 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5205
  %tobool105 = icmp ne %union.tree_node* %105, null, !dbg !5205
  br i1 %tobool105, label %if.then106, label %if.end107, !dbg !5207

if.then106:                                       ; preds = %if.end102
  %106 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5208
  store %union.tree_node* %106, %union.tree_node** %retval, align 8, !dbg !5209
  br label %return, !dbg !5209

if.end107:                                        ; preds = %if.end102
  br label %sw.epilog, !dbg !5210

sw.bb108:                                         ; preds = %cond.end
  %107 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5211
  %call109 = call %union.tree_node** @gimple_omp_critical_name_ptr(%union.gimple_statement_d* %107), !dbg !5211
  %108 = load %union.tree_node* (%union.tree_node**, i32*, i8*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8, !dbg !5211
  %109 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5211
  %110 = bitcast %struct.walk_stmt_info* %109 to i8*, !dbg !5211
  %111 = load %struct.pointer_set_t*, %struct.pointer_set_t** %pset, align 8, !dbg !5211
  %call110 = call %union.tree_node* @walk_tree_1(%union.tree_node** %call109, %union.tree_node* (%union.tree_node**, i32*, i8*)* %108, i8* %110, %struct.pointer_set_t* %111, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !5211
  store %union.tree_node* %call110, %union.tree_node** %ret, align 8, !dbg !5212
  %112 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5213
  %tobool111 = icmp ne %union.tree_node* %112, null, !dbg !5213
  br i1 %tobool111, label %if.then112, label %if.end113, !dbg !5215

if.then112:                                       ; preds = %sw.bb108
  %113 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5216
  store %union.tree_node* %113, %union.tree_node** %retval, align 8, !dbg !5217
  br label %return, !dbg !5217

if.end113:                                        ; preds = %sw.bb108
  br label %sw.epilog, !dbg !5218

sw.bb114:                                         ; preds = %cond.end
  %114 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5219
  %call115 = call %union.tree_node** @gimple_omp_for_clauses_ptr(%union.gimple_statement_d* %114), !dbg !5219
  %115 = load %union.tree_node* (%union.tree_node**, i32*, i8*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8, !dbg !5219
  %116 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5219
  %117 = bitcast %struct.walk_stmt_info* %116 to i8*, !dbg !5219
  %118 = load %struct.pointer_set_t*, %struct.pointer_set_t** %pset, align 8, !dbg !5219
  %call116 = call %union.tree_node* @walk_tree_1(%union.tree_node** %call115, %union.tree_node* (%union.tree_node**, i32*, i8*)* %115, i8* %117, %struct.pointer_set_t* %118, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !5219
  store %union.tree_node* %call116, %union.tree_node** %ret, align 8, !dbg !5220
  %119 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5221
  %tobool117 = icmp ne %union.tree_node* %119, null, !dbg !5221
  br i1 %tobool117, label %if.then118, label %if.end119, !dbg !5223

if.then118:                                       ; preds = %sw.bb114
  %120 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5224
  store %union.tree_node* %120, %union.tree_node** %retval, align 8, !dbg !5225
  br label %return, !dbg !5225

if.end119:                                        ; preds = %sw.bb114
  store i32 0, i32* %i, align 4, !dbg !5226
  br label %for.cond120, !dbg !5228

for.cond120:                                      ; preds = %for.inc147, %if.end119
  %121 = load i32, i32* %i, align 4, !dbg !5229
  %conv121 = zext i32 %121 to i64, !dbg !5229
  %122 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5231
  %call122 = call i64 @gimple_omp_for_collapse(%union.gimple_statement_d* %122), !dbg !5232
  %cmp123 = icmp ult i64 %conv121, %call122, !dbg !5233
  br i1 %cmp123, label %for.body125, label %for.end149, !dbg !5234

for.body125:                                      ; preds = %for.cond120
  %123 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5235
  %124 = load i32, i32* %i, align 4, !dbg !5235
  %conv126 = zext i32 %124 to i64, !dbg !5235
  %call127 = call %union.tree_node** @gimple_omp_for_index_ptr(%union.gimple_statement_d* %123, i64 %conv126), !dbg !5235
  %125 = load %union.tree_node* (%union.tree_node**, i32*, i8*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8, !dbg !5235
  %126 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5235
  %127 = bitcast %struct.walk_stmt_info* %126 to i8*, !dbg !5235
  %128 = load %struct.pointer_set_t*, %struct.pointer_set_t** %pset, align 8, !dbg !5235
  %call128 = call %union.tree_node* @walk_tree_1(%union.tree_node** %call127, %union.tree_node* (%union.tree_node**, i32*, i8*)* %125, i8* %127, %struct.pointer_set_t* %128, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !5235
  store %union.tree_node* %call128, %union.tree_node** %ret, align 8, !dbg !5237
  %129 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5238
  %tobool129 = icmp ne %union.tree_node* %129, null, !dbg !5238
  br i1 %tobool129, label %if.then130, label %if.end131, !dbg !5240

if.then130:                                       ; preds = %for.body125
  %130 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5241
  store %union.tree_node* %130, %union.tree_node** %retval, align 8, !dbg !5242
  br label %return, !dbg !5242

if.end131:                                        ; preds = %for.body125
  %131 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5243
  %132 = load i32, i32* %i, align 4, !dbg !5243
  %conv132 = zext i32 %132 to i64, !dbg !5243
  %call133 = call %union.tree_node** @gimple_omp_for_initial_ptr(%union.gimple_statement_d* %131, i64 %conv132), !dbg !5243
  %133 = load %union.tree_node* (%union.tree_node**, i32*, i8*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8, !dbg !5243
  %134 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5243
  %135 = bitcast %struct.walk_stmt_info* %134 to i8*, !dbg !5243
  %136 = load %struct.pointer_set_t*, %struct.pointer_set_t** %pset, align 8, !dbg !5243
  %call134 = call %union.tree_node* @walk_tree_1(%union.tree_node** %call133, %union.tree_node* (%union.tree_node**, i32*, i8*)* %133, i8* %135, %struct.pointer_set_t* %136, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !5243
  store %union.tree_node* %call134, %union.tree_node** %ret, align 8, !dbg !5244
  %137 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5245
  %tobool135 = icmp ne %union.tree_node* %137, null, !dbg !5245
  br i1 %tobool135, label %if.then136, label %if.end137, !dbg !5247

if.then136:                                       ; preds = %if.end131
  %138 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5248
  store %union.tree_node* %138, %union.tree_node** %retval, align 8, !dbg !5249
  br label %return, !dbg !5249

if.end137:                                        ; preds = %if.end131
  %139 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5250
  %140 = load i32, i32* %i, align 4, !dbg !5250
  %conv138 = zext i32 %140 to i64, !dbg !5250
  %call139 = call %union.tree_node** @gimple_omp_for_final_ptr(%union.gimple_statement_d* %139, i64 %conv138), !dbg !5250
  %141 = load %union.tree_node* (%union.tree_node**, i32*, i8*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8, !dbg !5250
  %142 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5250
  %143 = bitcast %struct.walk_stmt_info* %142 to i8*, !dbg !5250
  %144 = load %struct.pointer_set_t*, %struct.pointer_set_t** %pset, align 8, !dbg !5250
  %call140 = call %union.tree_node* @walk_tree_1(%union.tree_node** %call139, %union.tree_node* (%union.tree_node**, i32*, i8*)* %141, i8* %143, %struct.pointer_set_t* %144, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !5250
  store %union.tree_node* %call140, %union.tree_node** %ret, align 8, !dbg !5251
  %145 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5252
  %tobool141 = icmp ne %union.tree_node* %145, null, !dbg !5252
  br i1 %tobool141, label %if.then142, label %if.end143, !dbg !5254

if.then142:                                       ; preds = %if.end137
  %146 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5255
  store %union.tree_node* %146, %union.tree_node** %retval, align 8, !dbg !5256
  br label %return, !dbg !5256

if.end143:                                        ; preds = %if.end137
  %147 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5257
  %148 = load i32, i32* %i, align 4, !dbg !5257
  %conv144 = zext i32 %148 to i64, !dbg !5257
  %call145 = call %union.tree_node** @gimple_omp_for_incr_ptr(%union.gimple_statement_d* %147, i64 %conv144), !dbg !5257
  %149 = load %union.tree_node* (%union.tree_node**, i32*, i8*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8, !dbg !5257
  %150 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5257
  %151 = bitcast %struct.walk_stmt_info* %150 to i8*, !dbg !5257
  %152 = load %struct.pointer_set_t*, %struct.pointer_set_t** %pset, align 8, !dbg !5257
  %call146 = call %union.tree_node* @walk_tree_1(%union.tree_node** %call145, %union.tree_node* (%union.tree_node**, i32*, i8*)* %149, i8* %151, %struct.pointer_set_t* %152, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !5257
  store %union.tree_node* %call146, %union.tree_node** %ret, align 8, !dbg !5258
  br label %for.inc147, !dbg !5259

for.inc147:                                       ; preds = %if.end143
  %153 = load i32, i32* %i, align 4, !dbg !5260
  %inc148 = add i32 %153, 1, !dbg !5260
  store i32 %inc148, i32* %i, align 4, !dbg !5260
  br label %for.cond120, !dbg !5261, !llvm.loop !5262

for.end149:                                       ; preds = %for.cond120
  %154 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5264
  %tobool150 = icmp ne %union.tree_node* %154, null, !dbg !5264
  br i1 %tobool150, label %if.then151, label %if.end152, !dbg !5266

if.then151:                                       ; preds = %for.end149
  %155 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5267
  store %union.tree_node* %155, %union.tree_node** %retval, align 8, !dbg !5268
  br label %return, !dbg !5268

if.end152:                                        ; preds = %for.end149
  br label %sw.epilog, !dbg !5269

sw.bb153:                                         ; preds = %cond.end
  %156 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5270
  %call154 = call %union.tree_node** @gimple_omp_parallel_clauses_ptr(%union.gimple_statement_d* %156), !dbg !5270
  %157 = load %union.tree_node* (%union.tree_node**, i32*, i8*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8, !dbg !5270
  %158 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5270
  %159 = bitcast %struct.walk_stmt_info* %158 to i8*, !dbg !5270
  %160 = load %struct.pointer_set_t*, %struct.pointer_set_t** %pset, align 8, !dbg !5270
  %call155 = call %union.tree_node* @walk_tree_1(%union.tree_node** %call154, %union.tree_node* (%union.tree_node**, i32*, i8*)* %157, i8* %159, %struct.pointer_set_t* %160, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !5270
  store %union.tree_node* %call155, %union.tree_node** %ret, align 8, !dbg !5271
  %161 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5272
  %tobool156 = icmp ne %union.tree_node* %161, null, !dbg !5272
  br i1 %tobool156, label %if.then157, label %if.end158, !dbg !5274

if.then157:                                       ; preds = %sw.bb153
  %162 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5275
  store %union.tree_node* %162, %union.tree_node** %retval, align 8, !dbg !5276
  br label %return, !dbg !5276

if.end158:                                        ; preds = %sw.bb153
  %163 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5277
  %call159 = call %union.tree_node** @gimple_omp_parallel_child_fn_ptr(%union.gimple_statement_d* %163), !dbg !5277
  %164 = load %union.tree_node* (%union.tree_node**, i32*, i8*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8, !dbg !5277
  %165 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5277
  %166 = bitcast %struct.walk_stmt_info* %165 to i8*, !dbg !5277
  %167 = load %struct.pointer_set_t*, %struct.pointer_set_t** %pset, align 8, !dbg !5277
  %call160 = call %union.tree_node* @walk_tree_1(%union.tree_node** %call159, %union.tree_node* (%union.tree_node**, i32*, i8*)* %164, i8* %166, %struct.pointer_set_t* %167, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !5277
  store %union.tree_node* %call160, %union.tree_node** %ret, align 8, !dbg !5278
  %168 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5279
  %tobool161 = icmp ne %union.tree_node* %168, null, !dbg !5279
  br i1 %tobool161, label %if.then162, label %if.end163, !dbg !5281

if.then162:                                       ; preds = %if.end158
  %169 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5282
  store %union.tree_node* %169, %union.tree_node** %retval, align 8, !dbg !5283
  br label %return, !dbg !5283

if.end163:                                        ; preds = %if.end158
  %170 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5284
  %call164 = call %union.tree_node** @gimple_omp_parallel_data_arg_ptr(%union.gimple_statement_d* %170), !dbg !5284
  %171 = load %union.tree_node* (%union.tree_node**, i32*, i8*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8, !dbg !5284
  %172 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5284
  %173 = bitcast %struct.walk_stmt_info* %172 to i8*, !dbg !5284
  %174 = load %struct.pointer_set_t*, %struct.pointer_set_t** %pset, align 8, !dbg !5284
  %call165 = call %union.tree_node* @walk_tree_1(%union.tree_node** %call164, %union.tree_node* (%union.tree_node**, i32*, i8*)* %171, i8* %173, %struct.pointer_set_t* %174, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !5284
  store %union.tree_node* %call165, %union.tree_node** %ret, align 8, !dbg !5285
  %175 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5286
  %tobool166 = icmp ne %union.tree_node* %175, null, !dbg !5286
  br i1 %tobool166, label %if.then167, label %if.end168, !dbg !5288

if.then167:                                       ; preds = %if.end163
  %176 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5289
  store %union.tree_node* %176, %union.tree_node** %retval, align 8, !dbg !5290
  br label %return, !dbg !5290

if.end168:                                        ; preds = %if.end163
  br label %sw.epilog, !dbg !5291

sw.bb169:                                         ; preds = %cond.end
  %177 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5292
  %call170 = call %union.tree_node** @gimple_omp_task_clauses_ptr(%union.gimple_statement_d* %177), !dbg !5292
  %178 = load %union.tree_node* (%union.tree_node**, i32*, i8*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8, !dbg !5292
  %179 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5292
  %180 = bitcast %struct.walk_stmt_info* %179 to i8*, !dbg !5292
  %181 = load %struct.pointer_set_t*, %struct.pointer_set_t** %pset, align 8, !dbg !5292
  %call171 = call %union.tree_node* @walk_tree_1(%union.tree_node** %call170, %union.tree_node* (%union.tree_node**, i32*, i8*)* %178, i8* %180, %struct.pointer_set_t* %181, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !5292
  store %union.tree_node* %call171, %union.tree_node** %ret, align 8, !dbg !5293
  %182 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5294
  %tobool172 = icmp ne %union.tree_node* %182, null, !dbg !5294
  br i1 %tobool172, label %if.then173, label %if.end174, !dbg !5296

if.then173:                                       ; preds = %sw.bb169
  %183 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5297
  store %union.tree_node* %183, %union.tree_node** %retval, align 8, !dbg !5298
  br label %return, !dbg !5298

if.end174:                                        ; preds = %sw.bb169
  %184 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5299
  %call175 = call %union.tree_node** @gimple_omp_task_child_fn_ptr(%union.gimple_statement_d* %184), !dbg !5299
  %185 = load %union.tree_node* (%union.tree_node**, i32*, i8*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8, !dbg !5299
  %186 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5299
  %187 = bitcast %struct.walk_stmt_info* %186 to i8*, !dbg !5299
  %188 = load %struct.pointer_set_t*, %struct.pointer_set_t** %pset, align 8, !dbg !5299
  %call176 = call %union.tree_node* @walk_tree_1(%union.tree_node** %call175, %union.tree_node* (%union.tree_node**, i32*, i8*)* %185, i8* %187, %struct.pointer_set_t* %188, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !5299
  store %union.tree_node* %call176, %union.tree_node** %ret, align 8, !dbg !5300
  %189 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5301
  %tobool177 = icmp ne %union.tree_node* %189, null, !dbg !5301
  br i1 %tobool177, label %if.then178, label %if.end179, !dbg !5303

if.then178:                                       ; preds = %if.end174
  %190 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5304
  store %union.tree_node* %190, %union.tree_node** %retval, align 8, !dbg !5305
  br label %return, !dbg !5305

if.end179:                                        ; preds = %if.end174
  %191 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5306
  %call180 = call %union.tree_node** @gimple_omp_task_data_arg_ptr(%union.gimple_statement_d* %191), !dbg !5306
  %192 = load %union.tree_node* (%union.tree_node**, i32*, i8*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8, !dbg !5306
  %193 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5306
  %194 = bitcast %struct.walk_stmt_info* %193 to i8*, !dbg !5306
  %195 = load %struct.pointer_set_t*, %struct.pointer_set_t** %pset, align 8, !dbg !5306
  %call181 = call %union.tree_node* @walk_tree_1(%union.tree_node** %call180, %union.tree_node* (%union.tree_node**, i32*, i8*)* %192, i8* %194, %struct.pointer_set_t* %195, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !5306
  store %union.tree_node* %call181, %union.tree_node** %ret, align 8, !dbg !5307
  %196 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5308
  %tobool182 = icmp ne %union.tree_node* %196, null, !dbg !5308
  br i1 %tobool182, label %if.then183, label %if.end184, !dbg !5310

if.then183:                                       ; preds = %if.end179
  %197 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5311
  store %union.tree_node* %197, %union.tree_node** %retval, align 8, !dbg !5312
  br label %return, !dbg !5312

if.end184:                                        ; preds = %if.end179
  %198 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5313
  %call185 = call %union.tree_node** @gimple_omp_task_copy_fn_ptr(%union.gimple_statement_d* %198), !dbg !5313
  %199 = load %union.tree_node* (%union.tree_node**, i32*, i8*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8, !dbg !5313
  %200 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5313
  %201 = bitcast %struct.walk_stmt_info* %200 to i8*, !dbg !5313
  %202 = load %struct.pointer_set_t*, %struct.pointer_set_t** %pset, align 8, !dbg !5313
  %call186 = call %union.tree_node* @walk_tree_1(%union.tree_node** %call185, %union.tree_node* (%union.tree_node**, i32*, i8*)* %199, i8* %201, %struct.pointer_set_t* %202, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !5313
  store %union.tree_node* %call186, %union.tree_node** %ret, align 8, !dbg !5314
  %203 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5315
  %tobool187 = icmp ne %union.tree_node* %203, null, !dbg !5315
  br i1 %tobool187, label %if.then188, label %if.end189, !dbg !5317

if.then188:                                       ; preds = %if.end184
  %204 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5318
  store %union.tree_node* %204, %union.tree_node** %retval, align 8, !dbg !5319
  br label %return, !dbg !5319

if.end189:                                        ; preds = %if.end184
  %205 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5320
  %call190 = call %union.tree_node** @gimple_omp_task_arg_size_ptr(%union.gimple_statement_d* %205), !dbg !5320
  %206 = load %union.tree_node* (%union.tree_node**, i32*, i8*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8, !dbg !5320
  %207 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5320
  %208 = bitcast %struct.walk_stmt_info* %207 to i8*, !dbg !5320
  %209 = load %struct.pointer_set_t*, %struct.pointer_set_t** %pset, align 8, !dbg !5320
  %call191 = call %union.tree_node* @walk_tree_1(%union.tree_node** %call190, %union.tree_node* (%union.tree_node**, i32*, i8*)* %206, i8* %208, %struct.pointer_set_t* %209, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !5320
  store %union.tree_node* %call191, %union.tree_node** %ret, align 8, !dbg !5321
  %210 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5322
  %tobool192 = icmp ne %union.tree_node* %210, null, !dbg !5322
  br i1 %tobool192, label %if.then193, label %if.end194, !dbg !5324

if.then193:                                       ; preds = %if.end189
  %211 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5325
  store %union.tree_node* %211, %union.tree_node** %retval, align 8, !dbg !5326
  br label %return, !dbg !5326

if.end194:                                        ; preds = %if.end189
  %212 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5327
  %call195 = call %union.tree_node** @gimple_omp_task_arg_align_ptr(%union.gimple_statement_d* %212), !dbg !5327
  %213 = load %union.tree_node* (%union.tree_node**, i32*, i8*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8, !dbg !5327
  %214 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5327
  %215 = bitcast %struct.walk_stmt_info* %214 to i8*, !dbg !5327
  %216 = load %struct.pointer_set_t*, %struct.pointer_set_t** %pset, align 8, !dbg !5327
  %call196 = call %union.tree_node* @walk_tree_1(%union.tree_node** %call195, %union.tree_node* (%union.tree_node**, i32*, i8*)* %213, i8* %215, %struct.pointer_set_t* %216, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !5327
  store %union.tree_node* %call196, %union.tree_node** %ret, align 8, !dbg !5328
  %217 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5329
  %tobool197 = icmp ne %union.tree_node* %217, null, !dbg !5329
  br i1 %tobool197, label %if.then198, label %if.end199, !dbg !5331

if.then198:                                       ; preds = %if.end194
  %218 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5332
  store %union.tree_node* %218, %union.tree_node** %retval, align 8, !dbg !5333
  br label %return, !dbg !5333

if.end199:                                        ; preds = %if.end194
  br label %sw.epilog, !dbg !5334

sw.bb200:                                         ; preds = %cond.end
  %219 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5335
  %call201 = call %union.tree_node** @gimple_omp_sections_clauses_ptr(%union.gimple_statement_d* %219), !dbg !5335
  %220 = load %union.tree_node* (%union.tree_node**, i32*, i8*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8, !dbg !5335
  %221 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5335
  %222 = bitcast %struct.walk_stmt_info* %221 to i8*, !dbg !5335
  %223 = load %struct.pointer_set_t*, %struct.pointer_set_t** %pset, align 8, !dbg !5335
  %call202 = call %union.tree_node* @walk_tree_1(%union.tree_node** %call201, %union.tree_node* (%union.tree_node**, i32*, i8*)* %220, i8* %222, %struct.pointer_set_t* %223, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !5335
  store %union.tree_node* %call202, %union.tree_node** %ret, align 8, !dbg !5336
  %224 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5337
  %tobool203 = icmp ne %union.tree_node* %224, null, !dbg !5337
  br i1 %tobool203, label %if.then204, label %if.end205, !dbg !5339

if.then204:                                       ; preds = %sw.bb200
  %225 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5340
  store %union.tree_node* %225, %union.tree_node** %retval, align 8, !dbg !5341
  br label %return, !dbg !5341

if.end205:                                        ; preds = %sw.bb200
  %226 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5342
  %call206 = call %union.tree_node** @gimple_omp_sections_control_ptr(%union.gimple_statement_d* %226), !dbg !5342
  %227 = load %union.tree_node* (%union.tree_node**, i32*, i8*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8, !dbg !5342
  %228 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5342
  %229 = bitcast %struct.walk_stmt_info* %228 to i8*, !dbg !5342
  %230 = load %struct.pointer_set_t*, %struct.pointer_set_t** %pset, align 8, !dbg !5342
  %call207 = call %union.tree_node* @walk_tree_1(%union.tree_node** %call206, %union.tree_node* (%union.tree_node**, i32*, i8*)* %227, i8* %229, %struct.pointer_set_t* %230, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !5342
  store %union.tree_node* %call207, %union.tree_node** %ret, align 8, !dbg !5343
  %231 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5344
  %tobool208 = icmp ne %union.tree_node* %231, null, !dbg !5344
  br i1 %tobool208, label %if.then209, label %if.end210, !dbg !5346

if.then209:                                       ; preds = %if.end205
  %232 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5347
  store %union.tree_node* %232, %union.tree_node** %retval, align 8, !dbg !5348
  br label %return, !dbg !5348

if.end210:                                        ; preds = %if.end205
  br label %sw.epilog, !dbg !5349

sw.bb211:                                         ; preds = %cond.end
  %233 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5350
  %call212 = call %union.tree_node** @gimple_omp_single_clauses_ptr(%union.gimple_statement_d* %233), !dbg !5350
  %234 = load %union.tree_node* (%union.tree_node**, i32*, i8*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8, !dbg !5350
  %235 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5350
  %236 = bitcast %struct.walk_stmt_info* %235 to i8*, !dbg !5350
  %237 = load %struct.pointer_set_t*, %struct.pointer_set_t** %pset, align 8, !dbg !5350
  %call213 = call %union.tree_node* @walk_tree_1(%union.tree_node** %call212, %union.tree_node* (%union.tree_node**, i32*, i8*)* %234, i8* %236, %struct.pointer_set_t* %237, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !5350
  store %union.tree_node* %call213, %union.tree_node** %ret, align 8, !dbg !5351
  %238 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5352
  %tobool214 = icmp ne %union.tree_node* %238, null, !dbg !5352
  br i1 %tobool214, label %if.then215, label %if.end216, !dbg !5354

if.then215:                                       ; preds = %sw.bb211
  %239 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5355
  store %union.tree_node* %239, %union.tree_node** %retval, align 8, !dbg !5356
  br label %return, !dbg !5356

if.end216:                                        ; preds = %sw.bb211
  br label %sw.epilog, !dbg !5357

sw.bb217:                                         ; preds = %cond.end
  %240 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5358
  %call218 = call %union.tree_node** @gimple_omp_atomic_load_lhs_ptr(%union.gimple_statement_d* %240), !dbg !5358
  %241 = load %union.tree_node* (%union.tree_node**, i32*, i8*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8, !dbg !5358
  %242 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5358
  %243 = bitcast %struct.walk_stmt_info* %242 to i8*, !dbg !5358
  %244 = load %struct.pointer_set_t*, %struct.pointer_set_t** %pset, align 8, !dbg !5358
  %call219 = call %union.tree_node* @walk_tree_1(%union.tree_node** %call218, %union.tree_node* (%union.tree_node**, i32*, i8*)* %241, i8* %243, %struct.pointer_set_t* %244, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !5358
  store %union.tree_node* %call219, %union.tree_node** %ret, align 8, !dbg !5359
  %245 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5360
  %tobool220 = icmp ne %union.tree_node* %245, null, !dbg !5360
  br i1 %tobool220, label %if.then221, label %if.end222, !dbg !5362

if.then221:                                       ; preds = %sw.bb217
  %246 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5363
  store %union.tree_node* %246, %union.tree_node** %retval, align 8, !dbg !5364
  br label %return, !dbg !5364

if.end222:                                        ; preds = %sw.bb217
  %247 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5365
  %call223 = call %union.tree_node** @gimple_omp_atomic_load_rhs_ptr(%union.gimple_statement_d* %247), !dbg !5365
  %248 = load %union.tree_node* (%union.tree_node**, i32*, i8*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8, !dbg !5365
  %249 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5365
  %250 = bitcast %struct.walk_stmt_info* %249 to i8*, !dbg !5365
  %251 = load %struct.pointer_set_t*, %struct.pointer_set_t** %pset, align 8, !dbg !5365
  %call224 = call %union.tree_node* @walk_tree_1(%union.tree_node** %call223, %union.tree_node* (%union.tree_node**, i32*, i8*)* %248, i8* %250, %struct.pointer_set_t* %251, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !5365
  store %union.tree_node* %call224, %union.tree_node** %ret, align 8, !dbg !5366
  %252 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5367
  %tobool225 = icmp ne %union.tree_node* %252, null, !dbg !5367
  br i1 %tobool225, label %if.then226, label %if.end227, !dbg !5369

if.then226:                                       ; preds = %if.end222
  %253 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5370
  store %union.tree_node* %253, %union.tree_node** %retval, align 8, !dbg !5371
  br label %return, !dbg !5371

if.end227:                                        ; preds = %if.end222
  br label %sw.epilog, !dbg !5372

sw.bb228:                                         ; preds = %cond.end
  %254 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5373
  %call229 = call %union.tree_node** @gimple_omp_atomic_store_val_ptr(%union.gimple_statement_d* %254), !dbg !5373
  %255 = load %union.tree_node* (%union.tree_node**, i32*, i8*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8, !dbg !5373
  %256 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5373
  %257 = bitcast %struct.walk_stmt_info* %256 to i8*, !dbg !5373
  %258 = load %struct.pointer_set_t*, %struct.pointer_set_t** %pset, align 8, !dbg !5373
  %call230 = call %union.tree_node* @walk_tree_1(%union.tree_node** %call229, %union.tree_node* (%union.tree_node**, i32*, i8*)* %255, i8* %257, %struct.pointer_set_t* %258, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !5373
  store %union.tree_node* %call230, %union.tree_node** %ret, align 8, !dbg !5374
  %259 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5375
  %tobool231 = icmp ne %union.tree_node* %259, null, !dbg !5375
  br i1 %tobool231, label %if.then232, label %if.end233, !dbg !5377

if.then232:                                       ; preds = %sw.bb228
  %260 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5378
  store %union.tree_node* %260, %union.tree_node** %retval, align 8, !dbg !5379
  br label %return, !dbg !5379

if.end233:                                        ; preds = %sw.bb228
  br label %sw.epilog, !dbg !5380

sw.bb234:                                         ; preds = %cond.end, %cond.end, %cond.end, %cond.end
  br label %sw.epilog, !dbg !5381

sw.default:                                       ; preds = %cond.end
  call void @llvm.dbg.declare(metadata i32* %gss, metadata !5382, metadata !DIExpression()), !dbg !5384
  %261 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5385
  %call235 = call i32 @gimple_statement_structure(%union.gimple_statement_d* %261), !dbg !5386
  store i32 %call235, i32* %gss, align 4, !dbg !5387
  %262 = load i32, i32* %gss, align 4, !dbg !5388
  %cmp236 = icmp eq i32 %262, 1, !dbg !5390
  br i1 %cmp236, label %if.then240, label %lor.lhs.false, !dbg !5391

lor.lhs.false:                                    ; preds = %sw.default
  %263 = load i32, i32* %gss, align 4, !dbg !5392
  %cmp238 = icmp eq i32 %263, 3, !dbg !5393
  br i1 %cmp238, label %if.then240, label %if.end254, !dbg !5394

if.then240:                                       ; preds = %lor.lhs.false, %sw.default
  store i32 0, i32* %i, align 4, !dbg !5395
  br label %for.cond241, !dbg !5397

for.cond241:                                      ; preds = %for.inc251, %if.then240
  %264 = load i32, i32* %i, align 4, !dbg !5398
  %265 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5400
  %call242 = call i32 @gimple_num_ops(%union.gimple_statement_d* %265), !dbg !5401
  %cmp243 = icmp ult i32 %264, %call242, !dbg !5402
  br i1 %cmp243, label %for.body245, label %for.end253, !dbg !5403

for.body245:                                      ; preds = %for.cond241
  %266 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5404
  %267 = load i32, i32* %i, align 4, !dbg !5404
  %call246 = call %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %266, i32 %267), !dbg !5404
  %268 = load %union.tree_node* (%union.tree_node**, i32*, i8*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8, !dbg !5404
  %269 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5404
  %270 = bitcast %struct.walk_stmt_info* %269 to i8*, !dbg !5404
  %271 = load %struct.pointer_set_t*, %struct.pointer_set_t** %pset, align 8, !dbg !5404
  %call247 = call %union.tree_node* @walk_tree_1(%union.tree_node** %call246, %union.tree_node* (%union.tree_node**, i32*, i8*)* %268, i8* %270, %struct.pointer_set_t* %271, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !5404
  store %union.tree_node* %call247, %union.tree_node** %ret, align 8, !dbg !5406
  %272 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5407
  %tobool248 = icmp ne %union.tree_node* %272, null, !dbg !5407
  br i1 %tobool248, label %if.then249, label %if.end250, !dbg !5409

if.then249:                                       ; preds = %for.body245
  %273 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5410
  store %union.tree_node* %273, %union.tree_node** %retval, align 8, !dbg !5411
  br label %return, !dbg !5411

if.end250:                                        ; preds = %for.body245
  br label %for.inc251, !dbg !5412

for.inc251:                                       ; preds = %if.end250
  %274 = load i32, i32* %i, align 4, !dbg !5413
  %inc252 = add i32 %274, 1, !dbg !5413
  store i32 %inc252, i32* %i, align 4, !dbg !5413
  br label %for.cond241, !dbg !5414, !llvm.loop !5415

for.end253:                                       ; preds = %for.cond241
  br label %if.end254, !dbg !5416

if.end254:                                        ; preds = %for.end253, %lor.lhs.false
  br label %sw.epilog, !dbg !5417

sw.epilog:                                        ; preds = %if.end254, %sw.bb234, %if.end233, %if.end227, %if.end216, %if.end210, %if.end199, %if.end168, %if.end152, %if.end113, %if.end107, %if.end96, %if.end91, %if.end85, %if.end79, %if.end38
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5418
  br label %return, !dbg !5418

return:                                           ; preds = %sw.epilog, %if.then249, %if.then232, %if.then226, %if.then221, %if.then215, %if.then209, %if.then204, %if.then198, %if.then193, %if.then188, %if.then183, %if.then178, %if.then173, %if.then167, %if.then162, %if.then157, %if.then151, %if.then142, %if.then136, %if.then130, %if.then118, %if.then112, %if.then106, %if.then101, %if.then95, %if.then90, %if.then84, %if.then74, %if.then62, %if.then52, %if.then47, %if.then32, %if.then13
  %275 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5419
  ret %union.tree_node* %275, !dbg !5419
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_code(%union.gimple_statement_d* %g) #0 !dbg !5420 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5423, metadata !DIExpression()), !dbg !5424
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5425
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !5426
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !5427
  %bf.load = load i32, i32* %1, align 8, !dbg !5427
  %bf.clear = and i32 %bf.load, 255, !dbg !5427
  ret i32 %bf.clear, !dbg !5428
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @is_gimple_reg(%union.tree_node* %t) #0 !dbg !5429 {
entry:
  %retval = alloca i8, align 1
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !5430, metadata !DIExpression()), !dbg !5431
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5432
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !5432
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !5432
  %bf.load = load i64, i64* %1, align 8, !dbg !5432
  %bf.clear = and i64 %bf.load, 65535, !dbg !5432
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5432
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !5434
  br i1 %cmp, label %if.then, label %if.end, !dbg !5435

if.then:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5436
  %ssa_name = bitcast %union.tree_node* %2 to %struct.tree_ssa_name*, !dbg !5436
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !5436
  %3 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5436
  store %union.tree_node* %3, %union.tree_node** %t.addr, align 8, !dbg !5437
  br label %if.end, !dbg !5438

if.end:                                           ; preds = %if.then, %entry
  %4 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5439
  %call = call zeroext i8 @is_gimple_variable(%union.tree_node* %4), !dbg !5441
  %tobool = icmp ne i8 %call, 0, !dbg !5441
  br i1 %tobool, label %if.end2, label %if.then1, !dbg !5442

if.then1:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !5443
  br label %return, !dbg !5443

if.end2:                                          ; preds = %if.end
  %5 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5444
  %common = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !5444
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5444
  %6 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5444
  %call3 = call zeroext i8 @is_gimple_reg_type(%union.tree_node* %6), !dbg !5446
  %tobool4 = icmp ne i8 %call3, 0, !dbg !5446
  br i1 %tobool4, label %if.end6, label %if.then5, !dbg !5447

if.then5:                                         ; preds = %if.end2
  store i8 0, i8* %retval, align 1, !dbg !5448
  br label %return, !dbg !5448

if.end6:                                          ; preds = %if.end2
  %7 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5449
  %base7 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !5449
  %8 = bitcast %struct.tree_base* %base7 to i64*, !dbg !5449
  %bf.load8 = load i64, i64* %8, align 8, !dbg !5449
  %bf.lshr = lshr i64 %bf.load8, 19, !dbg !5449
  %bf.clear9 = and i64 %bf.lshr, 1, !dbg !5449
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !5449
  %tobool11 = icmp ne i32 %bf.cast10, 0, !dbg !5449
  br i1 %tobool11, label %if.then12, label %if.end13, !dbg !5451

if.then12:                                        ; preds = %if.end6
  store i8 0, i8* %retval, align 1, !dbg !5452
  br label %return, !dbg !5452

if.end13:                                         ; preds = %if.end6
  %9 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5453
  %call14 = call zeroext i8 @needs_to_live_in_memory(%union.tree_node* %9), !dbg !5455
  %tobool15 = icmp ne i8 %call14, 0, !dbg !5455
  br i1 %tobool15, label %if.then16, label %if.end17, !dbg !5456

if.then16:                                        ; preds = %if.end13
  store i8 0, i8* %retval, align 1, !dbg !5457
  br label %return, !dbg !5457

if.end17:                                         ; preds = %if.end13
  %10 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5458
  %base18 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !5458
  %11 = bitcast %struct.tree_base* %base18 to i64*, !dbg !5458
  %bf.load19 = load i64, i64* %11, align 8, !dbg !5458
  %bf.clear20 = and i64 %bf.load19, 65535, !dbg !5458
  %bf.cast21 = trunc i64 %bf.clear20 to i32, !dbg !5458
  %cmp22 = icmp eq i32 %bf.cast21, 32, !dbg !5460
  br i1 %cmp22, label %land.lhs.true, label %if.end28, !dbg !5461

land.lhs.true:                                    ; preds = %if.end17
  %12 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5462
  %decl_with_vis = bitcast %union.tree_node* %12 to %struct.tree_decl_with_vis*, !dbg !5462
  %hard_register = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 4, !dbg !5462
  %13 = bitcast i24* %hard_register to i32*, !dbg !5462
  %bf.load23 = load i32, i32* %13, align 8, !dbg !5462
  %bf.lshr24 = lshr i32 %bf.load23, 1, !dbg !5462
  %bf.clear25 = and i32 %bf.lshr24, 1, !dbg !5462
  %tobool26 = icmp ne i32 %bf.clear25, 0, !dbg !5462
  br i1 %tobool26, label %if.then27, label %if.end28, !dbg !5463

if.then27:                                        ; preds = %land.lhs.true
  store i8 0, i8* %retval, align 1, !dbg !5464
  br label %return, !dbg !5464

if.end28:                                         ; preds = %land.lhs.true, %if.end17
  %14 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5465
  %common29 = bitcast %union.tree_node* %14 to %struct.tree_common*, !dbg !5465
  %type30 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common29, i32 0, i32 2, !dbg !5465
  %15 = load %union.tree_node*, %union.tree_node** %type30, align 8, !dbg !5465
  %base31 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !5465
  %16 = bitcast %struct.tree_base* %base31 to i64*, !dbg !5465
  %bf.load32 = load i64, i64* %16, align 8, !dbg !5465
  %bf.clear33 = and i64 %bf.load32, 65535, !dbg !5465
  %bf.cast34 = trunc i64 %bf.clear33 to i32, !dbg !5465
  %cmp35 = icmp eq i32 %bf.cast34, 13, !dbg !5467
  br i1 %cmp35, label %if.then43, label %lor.lhs.false, !dbg !5468

lor.lhs.false:                                    ; preds = %if.end28
  %17 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5469
  %common36 = bitcast %union.tree_node* %17 to %struct.tree_common*, !dbg !5469
  %type37 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common36, i32 0, i32 2, !dbg !5469
  %18 = load %union.tree_node*, %union.tree_node** %type37, align 8, !dbg !5469
  %base38 = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !5469
  %19 = bitcast %struct.tree_base* %base38 to i64*, !dbg !5469
  %bf.load39 = load i64, i64* %19, align 8, !dbg !5469
  %bf.clear40 = and i64 %bf.load39, 65535, !dbg !5469
  %bf.cast41 = trunc i64 %bf.clear40 to i32, !dbg !5469
  %cmp42 = icmp eq i32 %bf.cast41, 14, !dbg !5470
  br i1 %cmp42, label %if.then43, label %if.end48, !dbg !5471

if.then43:                                        ; preds = %lor.lhs.false, %if.end28
  %20 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5472
  %decl_common = bitcast %union.tree_node* %20 to %struct.tree_decl_common*, !dbg !5472
  %gimple_reg_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !5472
  %21 = bitcast i40* %gimple_reg_flag to i64*, !dbg !5472
  %bf.load44 = load i64, i64* %21, align 8, !dbg !5472
  %bf.lshr45 = lshr i64 %bf.load44, 27, !dbg !5472
  %bf.clear46 = and i64 %bf.lshr45, 1, !dbg !5472
  %bf.cast47 = trunc i64 %bf.clear46 to i32, !dbg !5472
  %conv = trunc i32 %bf.cast47 to i8, !dbg !5472
  store i8 %conv, i8* %retval, align 1, !dbg !5473
  br label %return, !dbg !5473

if.end48:                                         ; preds = %lor.lhs.false
  store i8 1, i8* %retval, align 1, !dbg !5474
  br label %return, !dbg !5474

return:                                           ; preds = %if.end48, %if.then43, %if.then27, %if.then16, %if.then12, %if.then5, %if.then1
  %22 = load i8, i8* %retval, align 1, !dbg !5475
  ret i8 %22, !dbg !5475
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %gs) #0 !dbg !5476 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5477, metadata !DIExpression()), !dbg !5478
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5479
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !5480
  ret %union.tree_node* %call, !dbg !5481
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @gimple_assign_single_p(%union.gimple_statement_d* %gs) #0 !dbg !5482 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5483, metadata !DIExpression()), !dbg !5484
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5485
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5486
  %cmp = icmp eq i32 %call, 6, !dbg !5487
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !5488

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5489
  %call1 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %1), !dbg !5490
  %call2 = call i32 @get_gimple_rhs_class(i32 %call1), !dbg !5491
  %cmp3 = icmp eq i32 %call2, 3, !dbg !5492
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp3, %land.rhs ], !dbg !5493
  %land.ext = zext i1 %2 to i32, !dbg !5488
  %conv = trunc i32 %land.ext to i8, !dbg !5494
  ret i8 %conv, !dbg !5495
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #0 !dbg !5496 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5499, metadata !DIExpression()), !dbg !5500
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5501
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !5502
  %num_ops = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 3, !dbg !5503
  %1 = load i32, i32* %num_ops, align 4, !dbg !5503
  ret i32 %1, !dbg !5504
}

declare dso_local %union.tree_node* @walk_tree_1(%union.tree_node**, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !5505 {
entry:
  %retval = alloca %union.tree_node**, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5508, metadata !DIExpression()), !dbg !5509
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !5510, metadata !DIExpression()), !dbg !5511
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5512
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !5514
  %tobool = icmp ne i8 %call, 0, !dbg !5514
  br i1 %tobool, label %if.then, label %if.else, !dbg !5515

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5516
  %call1 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %1), !dbg !5518
  %2 = load i32, i32* %i.addr, align 4, !dbg !5519
  %idx.ext = zext i32 %2 to i64, !dbg !5520
  %add.ptr = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idx.ext, !dbg !5520
  store %union.tree_node** %add.ptr, %union.tree_node*** %retval, align 8, !dbg !5521
  br label %return, !dbg !5521

if.else:                                          ; preds = %entry
  store %union.tree_node** null, %union.tree_node*** %retval, align 8, !dbg !5522
  br label %return, !dbg !5522

return:                                           ; preds = %if.else, %if.then
  %3 = load %union.tree_node**, %union.tree_node*** %retval, align 8, !dbg !5523
  ret %union.tree_node** %3, !dbg !5523
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @is_gimple_mem_rhs(%union.tree_node* %t) #0 !dbg !5524 {
entry:
  %retval = alloca i8, align 1
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !5525, metadata !DIExpression()), !dbg !5526
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5527
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !5527
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5527
  %1 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5527
  %call = call zeroext i8 @is_gimple_reg_type(%union.tree_node* %1), !dbg !5529
  %tobool = icmp ne i8 %call, 0, !dbg !5529
  br i1 %tobool, label %if.then, label %if.else, !dbg !5530

if.then:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5531
  %call1 = call zeroext i8 @is_gimple_val(%union.tree_node* %2), !dbg !5532
  store i8 %call1, i8* %retval, align 1, !dbg !5533
  br label %return, !dbg !5533

if.else:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5534
  %call2 = call zeroext i8 @is_gimple_val(%union.tree_node* %3), !dbg !5535
  %conv = zext i8 %call2 to i32, !dbg !5535
  %tobool3 = icmp ne i32 %conv, 0, !dbg !5535
  br i1 %tobool3, label %lor.end, label %lor.rhs, !dbg !5536

lor.rhs:                                          ; preds = %if.else
  %4 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5537
  %call4 = call zeroext i8 @is_gimple_lvalue(%union.tree_node* %4), !dbg !5538
  %conv5 = zext i8 %call4 to i32, !dbg !5538
  %tobool6 = icmp ne i32 %conv5, 0, !dbg !5536
  br label %lor.end, !dbg !5536

lor.end:                                          ; preds = %lor.rhs, %if.else
  %5 = phi i1 [ true, %if.else ], [ %tobool6, %lor.rhs ]
  %lor.ext = zext i1 %5 to i32, !dbg !5536
  %conv7 = trunc i32 %lor.ext to i8, !dbg !5535
  store i8 %conv7, i8* %retval, align 1, !dbg !5539
  br label %return, !dbg !5539

return:                                           ; preds = %lor.end, %if.then
  %6 = load i8, i8* %retval, align 1, !dbg !5540
  ret i8 %6, !dbg !5540
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %gs) #0 !dbg !5541 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5542, metadata !DIExpression()), !dbg !5543
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5544
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !5545
  ret %union.tree_node* %call, !dbg !5546
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_call_chain_ptr(%union.gimple_statement_d* %gs) #0 !dbg !5547 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5550, metadata !DIExpression()), !dbg !5551
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5552
  %call = call %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %0, i32 2), !dbg !5553
  ret %union.tree_node** %call, !dbg !5554
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_call_fn_ptr(%union.gimple_statement_d* %gs) #0 !dbg !5555 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5556, metadata !DIExpression()), !dbg !5557
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5558
  %call = call %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %0, i32 1), !dbg !5559
  ret %union.tree_node** %call, !dbg !5560
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_call_num_args(%union.gimple_statement_d* %gs) #0 !dbg !5561 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %num_ops = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5562, metadata !DIExpression()), !dbg !5563
  call void @llvm.dbg.declare(metadata i32* %num_ops, metadata !5564, metadata !DIExpression()), !dbg !5565
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5566
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !5567
  store i32 %call, i32* %num_ops, align 4, !dbg !5568
  %1 = load i32, i32* %num_ops, align 4, !dbg !5569
  %sub = sub i32 %1, 3, !dbg !5570
  ret i32 %sub, !dbg !5571
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_call_arg_ptr(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !5572 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5573, metadata !DIExpression()), !dbg !5574
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !5575, metadata !DIExpression()), !dbg !5576
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5577
  %1 = load i32, i32* %index.addr, align 4, !dbg !5578
  %add = add i32 %1, 3, !dbg !5579
  %call = call %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %0, i32 %add), !dbg !5580
  ret %union.tree_node** %call, !dbg !5581
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_call_lhs_ptr(%union.gimple_statement_d* %gs) #0 !dbg !5582 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5583, metadata !DIExpression()), !dbg !5584
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5585
  %call = call %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %0, i32 0), !dbg !5586
  ret %union.tree_node** %call, !dbg !5587
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_catch_types_ptr(%union.gimple_statement_d* %gs) #0 !dbg !5588 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5591, metadata !DIExpression()), !dbg !5592
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5593
  %gimple_catch = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_catch*, !dbg !5594
  %types = getelementptr inbounds %struct.gimple_statement_catch, %struct.gimple_statement_catch* %gimple_catch, i32 0, i32 1, !dbg !5595
  ret %union.tree_node** %types, !dbg !5596
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_eh_filter_types_ptr(%union.gimple_statement_d* %gs) #0 !dbg !5597 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5598, metadata !DIExpression()), !dbg !5599
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5600
  %gimple_eh_filter = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_eh_filter*, !dbg !5601
  %types = getelementptr inbounds %struct.gimple_statement_eh_filter, %struct.gimple_statement_eh_filter* %gimple_eh_filter, i32 0, i32 1, !dbg !5602
  ret %union.tree_node** %types, !dbg !5603
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @walk_gimple_asm(%union.gimple_statement_d* %stmt, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, %struct.walk_stmt_info* %wi) #0 !dbg !5604 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %callback_op.addr = alloca %union.tree_node* (%union.tree_node**, i32*, i8*)*, align 8
  %wi.addr = alloca %struct.walk_stmt_info*, align 8
  %ret = alloca %union.tree_node*, align 8
  %op = alloca %union.tree_node*, align 8
  %noutputs = alloca i32, align 4
  %oconstraints = alloca i8**, align 8
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  %constraint = alloca i8*, align 8
  %allows_mem = alloca i8, align 1
  %allows_reg = alloca i8, align 1
  %is_inout = alloca i8, align 1
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5605, metadata !DIExpression()), !dbg !5606
  store %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, metadata !5607, metadata !DIExpression()), !dbg !5608
  store %struct.walk_stmt_info* %wi, %struct.walk_stmt_info** %wi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.walk_stmt_info** %wi.addr, metadata !5609, metadata !DIExpression()), !dbg !5610
  call void @llvm.dbg.declare(metadata %union.tree_node** %ret, metadata !5611, metadata !DIExpression()), !dbg !5612
  call void @llvm.dbg.declare(metadata %union.tree_node** %op, metadata !5613, metadata !DIExpression()), !dbg !5614
  call void @llvm.dbg.declare(metadata i32* %noutputs, metadata !5615, metadata !DIExpression()), !dbg !5616
  call void @llvm.dbg.declare(metadata i8*** %oconstraints, metadata !5617, metadata !DIExpression()), !dbg !5618
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5619, metadata !DIExpression()), !dbg !5620
  call void @llvm.dbg.declare(metadata i32* %n, metadata !5621, metadata !DIExpression()), !dbg !5622
  call void @llvm.dbg.declare(metadata i8** %constraint, metadata !5623, metadata !DIExpression()), !dbg !5624
  call void @llvm.dbg.declare(metadata i8* %allows_mem, metadata !5625, metadata !DIExpression()), !dbg !5626
  call void @llvm.dbg.declare(metadata i8* %allows_reg, metadata !5627, metadata !DIExpression()), !dbg !5628
  call void @llvm.dbg.declare(metadata i8* %is_inout, metadata !5629, metadata !DIExpression()), !dbg !5630
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5631
  %call = call i32 @gimple_asm_noutputs(%union.gimple_statement_d* %0), !dbg !5632
  store i32 %call, i32* %noutputs, align 4, !dbg !5633
  %1 = load i32, i32* %noutputs, align 4, !dbg !5634
  %conv = zext i32 %1 to i64, !dbg !5634
  %mul = mul i64 %conv, 8, !dbg !5634
  %2 = alloca i8, i64 %mul, align 16, !dbg !5634
  %3 = bitcast i8* %2 to i8**, !dbg !5635
  store i8** %3, i8*** %oconstraints, align 8, !dbg !5636
  %4 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5637
  %tobool = icmp ne %struct.walk_stmt_info* %4, null, !dbg !5637
  br i1 %tobool, label %if.then, label %if.end, !dbg !5639

if.then:                                          ; preds = %entry
  %5 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5640
  %is_lhs = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %5, i32 0, i32 4, !dbg !5641
  store i8 1, i8* %is_lhs, align 1, !dbg !5642
  br label %if.end, !dbg !5640

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4, !dbg !5643
  br label %for.cond, !dbg !5645

for.cond:                                         ; preds = %for.inc, %if.end
  %6 = load i32, i32* %i, align 4, !dbg !5646
  %7 = load i32, i32* %noutputs, align 4, !dbg !5648
  %cmp = icmp ult i32 %6, %7, !dbg !5649
  br i1 %cmp, label %for.body, label %for.end, !dbg !5650

for.body:                                         ; preds = %for.cond
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5651
  %9 = load i32, i32* %i, align 4, !dbg !5653
  %call2 = call %union.tree_node* @gimple_asm_output_op(%union.gimple_statement_d* %8, i32 %9), !dbg !5654
  store %union.tree_node* %call2, %union.tree_node** %op, align 8, !dbg !5655
  %10 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !5656
  %list = bitcast %union.tree_node* %10 to %struct.tree_list*, !dbg !5656
  %purpose = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 1, !dbg !5656
  %11 = load %union.tree_node*, %union.tree_node** %purpose, align 8, !dbg !5656
  %list3 = bitcast %union.tree_node* %11 to %struct.tree_list*, !dbg !5656
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list3, i32 0, i32 2, !dbg !5656
  %12 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !5656
  %string = bitcast %union.tree_node* %12 to %struct.tree_string*, !dbg !5656
  %str = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string, i32 0, i32 2, !dbg !5656
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %str, i64 0, i64 0, !dbg !5656
  store i8* %arraydecay, i8** %constraint, align 8, !dbg !5657
  %13 = load i8*, i8** %constraint, align 8, !dbg !5658
  %14 = load i8**, i8*** %oconstraints, align 8, !dbg !5659
  %15 = load i32, i32* %i, align 4, !dbg !5660
  %idxprom = zext i32 %15 to i64, !dbg !5659
  %arrayidx = getelementptr inbounds i8*, i8** %14, i64 %idxprom, !dbg !5659
  store i8* %13, i8** %arrayidx, align 8, !dbg !5661
  %16 = load i32, i32* %i, align 4, !dbg !5662
  %call4 = call zeroext i8 @parse_output_constraint(i8** %constraint, i32 %16, i32 0, i32 0, i8* %allows_mem, i8* %allows_reg, i8* %is_inout), !dbg !5663
  %17 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5664
  %tobool5 = icmp ne %struct.walk_stmt_info* %17, null, !dbg !5664
  br i1 %tobool5, label %if.then6, label %if.end11, !dbg !5666

if.then6:                                         ; preds = %for.body
  %18 = load i8, i8* %allows_reg, align 1, !dbg !5667
  %conv7 = zext i8 %18 to i32, !dbg !5667
  %tobool8 = icmp ne i32 %conv7, 0, !dbg !5667
  br i1 %tobool8, label %lor.end, label %lor.rhs, !dbg !5668

lor.rhs:                                          ; preds = %if.then6
  %19 = load i8, i8* %allows_mem, align 1, !dbg !5669
  %tobool9 = icmp ne i8 %19, 0, !dbg !5670
  %lnot = xor i1 %tobool9, true, !dbg !5670
  br label %lor.end, !dbg !5668

lor.end:                                          ; preds = %lor.rhs, %if.then6
  %20 = phi i1 [ true, %if.then6 ], [ %lnot, %lor.rhs ]
  %lor.ext = zext i1 %20 to i32, !dbg !5668
  %conv10 = trunc i32 %lor.ext to i8, !dbg !5671
  %21 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5672
  %val_only = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %21, i32 0, i32 3, !dbg !5673
  store i8 %conv10, i8* %val_only, align 8, !dbg !5674
  br label %if.end11, !dbg !5672

if.end11:                                         ; preds = %lor.end, %for.body
  %22 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !5675
  %list12 = bitcast %union.tree_node* %22 to %struct.tree_list*, !dbg !5675
  %value13 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list12, i32 0, i32 2, !dbg !5675
  %23 = load %union.tree_node* (%union.tree_node**, i32*, i8*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8, !dbg !5675
  %24 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5675
  %25 = bitcast %struct.walk_stmt_info* %24 to i8*, !dbg !5675
  %call14 = call %union.tree_node* @walk_tree_1(%union.tree_node** %value13, %union.tree_node* (%union.tree_node**, i32*, i8*)* %23, i8* %25, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !5675
  store %union.tree_node* %call14, %union.tree_node** %ret, align 8, !dbg !5676
  %26 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5677
  %tobool15 = icmp ne %union.tree_node* %26, null, !dbg !5677
  br i1 %tobool15, label %if.then16, label %if.end17, !dbg !5679

if.then16:                                        ; preds = %if.end11
  %27 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5680
  store %union.tree_node* %27, %union.tree_node** %retval, align 8, !dbg !5681
  br label %return, !dbg !5681

if.end17:                                         ; preds = %if.end11
  br label %for.inc, !dbg !5682

for.inc:                                          ; preds = %if.end17
  %28 = load i32, i32* %i, align 4, !dbg !5683
  %inc = add i32 %28, 1, !dbg !5683
  store i32 %inc, i32* %i, align 4, !dbg !5683
  br label %for.cond, !dbg !5684, !llvm.loop !5685

for.end:                                          ; preds = %for.cond
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5687
  %call18 = call i32 @gimple_asm_ninputs(%union.gimple_statement_d* %29), !dbg !5688
  store i32 %call18, i32* %n, align 4, !dbg !5689
  store i32 0, i32* %i, align 4, !dbg !5690
  br label %for.cond19, !dbg !5692

for.cond19:                                       ; preds = %for.inc55, %for.end
  %30 = load i32, i32* %i, align 4, !dbg !5693
  %31 = load i32, i32* %n, align 4, !dbg !5695
  %cmp20 = icmp ult i32 %30, %31, !dbg !5696
  br i1 %cmp20, label %for.body22, label %for.end57, !dbg !5697

for.body22:                                       ; preds = %for.cond19
  %32 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5698
  %33 = load i32, i32* %i, align 4, !dbg !5700
  %call23 = call %union.tree_node* @gimple_asm_input_op(%union.gimple_statement_d* %32, i32 %33), !dbg !5701
  store %union.tree_node* %call23, %union.tree_node** %op, align 8, !dbg !5702
  %34 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !5703
  %list24 = bitcast %union.tree_node* %34 to %struct.tree_list*, !dbg !5703
  %purpose25 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list24, i32 0, i32 1, !dbg !5703
  %35 = load %union.tree_node*, %union.tree_node** %purpose25, align 8, !dbg !5703
  %list26 = bitcast %union.tree_node* %35 to %struct.tree_list*, !dbg !5703
  %value27 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list26, i32 0, i32 2, !dbg !5703
  %36 = load %union.tree_node*, %union.tree_node** %value27, align 8, !dbg !5703
  %string28 = bitcast %union.tree_node* %36 to %struct.tree_string*, !dbg !5703
  %str29 = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string28, i32 0, i32 2, !dbg !5703
  %arraydecay30 = getelementptr inbounds [1 x i8], [1 x i8]* %str29, i64 0, i64 0, !dbg !5703
  store i8* %arraydecay30, i8** %constraint, align 8, !dbg !5704
  %37 = load i32, i32* %noutputs, align 4, !dbg !5705
  %38 = load i8**, i8*** %oconstraints, align 8, !dbg !5706
  %call31 = call zeroext i8 @parse_input_constraint(i8** %constraint, i32 0, i32 0, i32 %37, i32 0, i8** %38, i8* %allows_mem, i8* %allows_reg), !dbg !5707
  %39 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5708
  %tobool32 = icmp ne %struct.walk_stmt_info* %39, null, !dbg !5708
  br i1 %tobool32, label %if.then33, label %if.end48, !dbg !5710

if.then33:                                        ; preds = %for.body22
  %40 = load i8, i8* %allows_reg, align 1, !dbg !5711
  %conv34 = zext i8 %40 to i32, !dbg !5711
  %tobool35 = icmp ne i32 %conv34, 0, !dbg !5711
  br i1 %tobool35, label %lor.end39, label %lor.rhs36, !dbg !5713

lor.rhs36:                                        ; preds = %if.then33
  %41 = load i8, i8* %allows_mem, align 1, !dbg !5714
  %tobool37 = icmp ne i8 %41, 0, !dbg !5715
  %lnot38 = xor i1 %tobool37, true, !dbg !5715
  br label %lor.end39, !dbg !5713

lor.end39:                                        ; preds = %lor.rhs36, %if.then33
  %42 = phi i1 [ true, %if.then33 ], [ %lnot38, %lor.rhs36 ]
  %lor.ext40 = zext i1 %42 to i32, !dbg !5713
  %conv41 = trunc i32 %lor.ext40 to i8, !dbg !5716
  %43 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5717
  %val_only42 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %43, i32 0, i32 3, !dbg !5718
  store i8 %conv41, i8* %val_only42, align 8, !dbg !5719
  %44 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5720
  %val_only43 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %44, i32 0, i32 3, !dbg !5721
  %45 = load i8, i8* %val_only43, align 8, !dbg !5721
  %tobool44 = icmp ne i8 %45, 0, !dbg !5722
  %lnot45 = xor i1 %tobool44, true, !dbg !5722
  %lnot.ext = zext i1 %lnot45 to i32, !dbg !5722
  %conv46 = trunc i32 %lnot.ext to i8, !dbg !5722
  %46 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5723
  %is_lhs47 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %46, i32 0, i32 4, !dbg !5724
  store i8 %conv46, i8* %is_lhs47, align 1, !dbg !5725
  br label %if.end48, !dbg !5726

if.end48:                                         ; preds = %lor.end39, %for.body22
  %47 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !5727
  %list49 = bitcast %union.tree_node* %47 to %struct.tree_list*, !dbg !5727
  %value50 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list49, i32 0, i32 2, !dbg !5727
  %48 = load %union.tree_node* (%union.tree_node**, i32*, i8*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8, !dbg !5727
  %49 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5727
  %50 = bitcast %struct.walk_stmt_info* %49 to i8*, !dbg !5727
  %call51 = call %union.tree_node* @walk_tree_1(%union.tree_node** %value50, %union.tree_node* (%union.tree_node**, i32*, i8*)* %48, i8* %50, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !5727
  store %union.tree_node* %call51, %union.tree_node** %ret, align 8, !dbg !5728
  %51 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5729
  %tobool52 = icmp ne %union.tree_node* %51, null, !dbg !5729
  br i1 %tobool52, label %if.then53, label %if.end54, !dbg !5731

if.then53:                                        ; preds = %if.end48
  %52 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5732
  store %union.tree_node* %52, %union.tree_node** %retval, align 8, !dbg !5733
  br label %return, !dbg !5733

if.end54:                                         ; preds = %if.end48
  br label %for.inc55, !dbg !5734

for.inc55:                                        ; preds = %if.end54
  %53 = load i32, i32* %i, align 4, !dbg !5735
  %inc56 = add i32 %53, 1, !dbg !5735
  store i32 %inc56, i32* %i, align 4, !dbg !5735
  br label %for.cond19, !dbg !5736, !llvm.loop !5737

for.end57:                                        ; preds = %for.cond19
  %54 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5739
  %tobool58 = icmp ne %struct.walk_stmt_info* %54, null, !dbg !5739
  br i1 %tobool58, label %if.then59, label %if.end62, !dbg !5741

if.then59:                                        ; preds = %for.end57
  %55 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5742
  %is_lhs60 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %55, i32 0, i32 4, !dbg !5744
  store i8 0, i8* %is_lhs60, align 1, !dbg !5745
  %56 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5746
  %val_only61 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %56, i32 0, i32 3, !dbg !5747
  store i8 1, i8* %val_only61, align 8, !dbg !5748
  br label %if.end62, !dbg !5749

if.end62:                                         ; preds = %if.then59, %for.end57
  %57 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5750
  %call63 = call i32 @gimple_asm_nlabels(%union.gimple_statement_d* %57), !dbg !5751
  store i32 %call63, i32* %n, align 4, !dbg !5752
  store i32 0, i32* %i, align 4, !dbg !5753
  br label %for.cond64, !dbg !5755

for.cond64:                                       ; preds = %for.inc75, %if.end62
  %58 = load i32, i32* %i, align 4, !dbg !5756
  %59 = load i32, i32* %n, align 4, !dbg !5758
  %cmp65 = icmp ult i32 %58, %59, !dbg !5759
  br i1 %cmp65, label %for.body67, label %for.end77, !dbg !5760

for.body67:                                       ; preds = %for.cond64
  %60 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5761
  %61 = load i32, i32* %i, align 4, !dbg !5763
  %call68 = call %union.tree_node* @gimple_asm_label_op(%union.gimple_statement_d* %60, i32 %61), !dbg !5764
  store %union.tree_node* %call68, %union.tree_node** %op, align 8, !dbg !5765
  %62 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !5766
  %list69 = bitcast %union.tree_node* %62 to %struct.tree_list*, !dbg !5766
  %value70 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list69, i32 0, i32 2, !dbg !5766
  %63 = load %union.tree_node* (%union.tree_node**, i32*, i8*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8, !dbg !5766
  %64 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !5766
  %65 = bitcast %struct.walk_stmt_info* %64 to i8*, !dbg !5766
  %call71 = call %union.tree_node* @walk_tree_1(%union.tree_node** %value70, %union.tree_node* (%union.tree_node**, i32*, i8*)* %63, i8* %65, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !5766
  store %union.tree_node* %call71, %union.tree_node** %ret, align 8, !dbg !5767
  %66 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5768
  %tobool72 = icmp ne %union.tree_node* %66, null, !dbg !5768
  br i1 %tobool72, label %if.then73, label %if.end74, !dbg !5770

if.then73:                                        ; preds = %for.body67
  %67 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5771
  store %union.tree_node* %67, %union.tree_node** %retval, align 8, !dbg !5772
  br label %return, !dbg !5772

if.end74:                                         ; preds = %for.body67
  br label %for.inc75, !dbg !5773

for.inc75:                                        ; preds = %if.end74
  %68 = load i32, i32* %i, align 4, !dbg !5774
  %inc76 = add i32 %68, 1, !dbg !5774
  store i32 %inc76, i32* %i, align 4, !dbg !5774
  br label %for.cond64, !dbg !5775, !llvm.loop !5776

for.end77:                                        ; preds = %for.cond64
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5778
  br label %return, !dbg !5778

return:                                           ; preds = %for.end77, %if.then73, %if.then53, %if.then16
  %69 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5779
  ret %union.tree_node* %69, !dbg !5779
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_omp_continue_control_def_ptr(%union.gimple_statement_d* %g) #0 !dbg !5780 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5781, metadata !DIExpression()), !dbg !5782
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5783
  %gimple_omp_continue = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_omp_continue*, !dbg !5784
  %control_def = getelementptr inbounds %struct.gimple_statement_omp_continue, %struct.gimple_statement_omp_continue* %gimple_omp_continue, i32 0, i32 1, !dbg !5785
  ret %union.tree_node** %control_def, !dbg !5786
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_omp_continue_control_use_ptr(%union.gimple_statement_d* %g) #0 !dbg !5787 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5788, metadata !DIExpression()), !dbg !5789
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5790
  %gimple_omp_continue = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_omp_continue*, !dbg !5791
  %control_use = getelementptr inbounds %struct.gimple_statement_omp_continue, %struct.gimple_statement_omp_continue* %gimple_omp_continue, i32 0, i32 2, !dbg !5792
  ret %union.tree_node** %control_use, !dbg !5793
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_omp_critical_name_ptr(%union.gimple_statement_d* %gs) #0 !dbg !5794 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5795, metadata !DIExpression()), !dbg !5796
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5797
  %gimple_omp_critical = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_omp_critical*, !dbg !5798
  %name = getelementptr inbounds %struct.gimple_statement_omp_critical, %struct.gimple_statement_omp_critical* %gimple_omp_critical, i32 0, i32 1, !dbg !5799
  ret %union.tree_node** %name, !dbg !5800
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_omp_for_clauses_ptr(%union.gimple_statement_d* %gs) #0 !dbg !5801 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5802, metadata !DIExpression()), !dbg !5803
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5804
  %gimple_omp_for = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_omp_for*, !dbg !5805
  %clauses = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for, i32 0, i32 1, !dbg !5806
  ret %union.tree_node** %clauses, !dbg !5807
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @gimple_omp_for_collapse(%union.gimple_statement_d* %gs) #0 !dbg !5808 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5811, metadata !DIExpression()), !dbg !5812
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5813
  %gimple_omp_for = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_omp_for*, !dbg !5814
  %collapse = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for, i32 0, i32 2, !dbg !5815
  %1 = load i64, i64* %collapse, align 8, !dbg !5815
  ret i64 %1, !dbg !5816
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_omp_for_index_ptr(%union.gimple_statement_d* %gs, i64 %i) #0 !dbg !5817 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5820, metadata !DIExpression()), !dbg !5821
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !5822, metadata !DIExpression()), !dbg !5823
  %0 = load i64, i64* %i.addr, align 8, !dbg !5824
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5824
  %gimple_omp_for = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_omp_for*, !dbg !5824
  %collapse = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for, i32 0, i32 2, !dbg !5824
  %2 = load i64, i64* %collapse, align 8, !dbg !5824
  %cmp = icmp ult i64 %0, %2, !dbg !5824
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !5824

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 3464, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !5824
  br label %cond.end, !dbg !5824

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5824

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5824
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5825
  %gimple_omp_for1 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_omp_for*, !dbg !5826
  %iter = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for1, i32 0, i32 3, !dbg !5827
  %4 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %iter, align 8, !dbg !5827
  %5 = load i64, i64* %i.addr, align 8, !dbg !5828
  %arrayidx = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %4, i64 %5, !dbg !5825
  %index = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %arrayidx, i32 0, i32 1, !dbg !5829
  ret %union.tree_node** %index, !dbg !5830
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_omp_for_initial_ptr(%union.gimple_statement_d* %gs, i64 %i) #0 !dbg !5831 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5832, metadata !DIExpression()), !dbg !5833
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !5834, metadata !DIExpression()), !dbg !5835
  %0 = load i64, i64* %i.addr, align 8, !dbg !5836
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5836
  %gimple_omp_for = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_omp_for*, !dbg !5836
  %collapse = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for, i32 0, i32 2, !dbg !5836
  %2 = load i64, i64* %collapse, align 8, !dbg !5836
  %cmp = icmp ult i64 %0, %2, !dbg !5836
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !5836

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 3497, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !5836
  br label %cond.end, !dbg !5836

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5836

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5836
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5837
  %gimple_omp_for1 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_omp_for*, !dbg !5838
  %iter = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for1, i32 0, i32 3, !dbg !5839
  %4 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %iter, align 8, !dbg !5839
  %5 = load i64, i64* %i.addr, align 8, !dbg !5840
  %arrayidx = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %4, i64 %5, !dbg !5837
  %initial = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %arrayidx, i32 0, i32 2, !dbg !5841
  ret %union.tree_node** %initial, !dbg !5842
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_omp_for_final_ptr(%union.gimple_statement_d* %gs, i64 %i) #0 !dbg !5843 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5844, metadata !DIExpression()), !dbg !5845
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !5846, metadata !DIExpression()), !dbg !5847
  %0 = load i64, i64* %i.addr, align 8, !dbg !5848
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5848
  %gimple_omp_for = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_omp_for*, !dbg !5848
  %collapse = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for, i32 0, i32 2, !dbg !5848
  %2 = load i64, i64* %collapse, align 8, !dbg !5848
  %cmp = icmp ult i64 %0, %2, !dbg !5848
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !5848

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 3530, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !5848
  br label %cond.end, !dbg !5848

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5848

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5848
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5849
  %gimple_omp_for1 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_omp_for*, !dbg !5850
  %iter = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for1, i32 0, i32 3, !dbg !5851
  %4 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %iter, align 8, !dbg !5851
  %5 = load i64, i64* %i.addr, align 8, !dbg !5852
  %arrayidx = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %4, i64 %5, !dbg !5849
  %final = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %arrayidx, i32 0, i32 3, !dbg !5853
  ret %union.tree_node** %final, !dbg !5854
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_omp_for_incr_ptr(%union.gimple_statement_d* %gs, i64 %i) #0 !dbg !5855 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5856, metadata !DIExpression()), !dbg !5857
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !5858, metadata !DIExpression()), !dbg !5859
  %0 = load i64, i64* %i.addr, align 8, !dbg !5860
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5860
  %gimple_omp_for = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_omp_for*, !dbg !5860
  %collapse = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for, i32 0, i32 2, !dbg !5860
  %2 = load i64, i64* %collapse, align 8, !dbg !5860
  %cmp = icmp ult i64 %0, %2, !dbg !5860
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !5860

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 3563, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !5860
  br label %cond.end, !dbg !5860

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5860

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5860
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5861
  %gimple_omp_for1 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_omp_for*, !dbg !5862
  %iter = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for1, i32 0, i32 3, !dbg !5863
  %4 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %iter, align 8, !dbg !5863
  %5 = load i64, i64* %i.addr, align 8, !dbg !5864
  %arrayidx = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %4, i64 %5, !dbg !5861
  %incr = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %arrayidx, i32 0, i32 4, !dbg !5865
  ret %union.tree_node** %incr, !dbg !5866
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_omp_parallel_clauses_ptr(%union.gimple_statement_d* %gs) #0 !dbg !5867 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5868, metadata !DIExpression()), !dbg !5869
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5870
  %gimple_omp_parallel = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_omp_parallel*, !dbg !5871
  %clauses = getelementptr inbounds %struct.gimple_statement_omp_parallel, %struct.gimple_statement_omp_parallel* %gimple_omp_parallel, i32 0, i32 1, !dbg !5872
  ret %union.tree_node** %clauses, !dbg !5873
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_omp_parallel_child_fn_ptr(%union.gimple_statement_d* %gs) #0 !dbg !5874 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5875, metadata !DIExpression()), !dbg !5876
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5877
  %gimple_omp_parallel = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_omp_parallel*, !dbg !5878
  %child_fn = getelementptr inbounds %struct.gimple_statement_omp_parallel, %struct.gimple_statement_omp_parallel* %gimple_omp_parallel, i32 0, i32 2, !dbg !5879
  ret %union.tree_node** %child_fn, !dbg !5880
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_omp_parallel_data_arg_ptr(%union.gimple_statement_d* %gs) #0 !dbg !5881 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5882, metadata !DIExpression()), !dbg !5883
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5884
  %gimple_omp_parallel = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_omp_parallel*, !dbg !5885
  %data_arg = getelementptr inbounds %struct.gimple_statement_omp_parallel, %struct.gimple_statement_omp_parallel* %gimple_omp_parallel, i32 0, i32 3, !dbg !5886
  ret %union.tree_node** %data_arg, !dbg !5887
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_omp_task_clauses_ptr(%union.gimple_statement_d* %gs) #0 !dbg !5888 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5889, metadata !DIExpression()), !dbg !5890
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5891
  %gimple_omp_parallel = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_omp_parallel*, !dbg !5892
  %clauses = getelementptr inbounds %struct.gimple_statement_omp_parallel, %struct.gimple_statement_omp_parallel* %gimple_omp_parallel, i32 0, i32 1, !dbg !5893
  ret %union.tree_node** %clauses, !dbg !5894
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_omp_task_child_fn_ptr(%union.gimple_statement_d* %gs) #0 !dbg !5895 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5896, metadata !DIExpression()), !dbg !5897
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5898
  %gimple_omp_parallel = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_omp_parallel*, !dbg !5899
  %child_fn = getelementptr inbounds %struct.gimple_statement_omp_parallel, %struct.gimple_statement_omp_parallel* %gimple_omp_parallel, i32 0, i32 2, !dbg !5900
  ret %union.tree_node** %child_fn, !dbg !5901
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_omp_task_data_arg_ptr(%union.gimple_statement_d* %gs) #0 !dbg !5902 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5903, metadata !DIExpression()), !dbg !5904
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5905
  %gimple_omp_parallel = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_omp_parallel*, !dbg !5906
  %data_arg = getelementptr inbounds %struct.gimple_statement_omp_parallel, %struct.gimple_statement_omp_parallel* %gimple_omp_parallel, i32 0, i32 3, !dbg !5907
  ret %union.tree_node** %data_arg, !dbg !5908
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_omp_task_copy_fn_ptr(%union.gimple_statement_d* %gs) #0 !dbg !5909 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5910, metadata !DIExpression()), !dbg !5911
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5912
  %gimple_omp_task = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_omp_task*, !dbg !5913
  %copy_fn = getelementptr inbounds %struct.gimple_statement_omp_task, %struct.gimple_statement_omp_task* %gimple_omp_task, i32 0, i32 1, !dbg !5914
  ret %union.tree_node** %copy_fn, !dbg !5915
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_omp_task_arg_size_ptr(%union.gimple_statement_d* %gs) #0 !dbg !5916 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5917, metadata !DIExpression()), !dbg !5918
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5919
  %gimple_omp_task = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_omp_task*, !dbg !5920
  %arg_size = getelementptr inbounds %struct.gimple_statement_omp_task, %struct.gimple_statement_omp_task* %gimple_omp_task, i32 0, i32 2, !dbg !5921
  ret %union.tree_node** %arg_size, !dbg !5922
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_omp_task_arg_align_ptr(%union.gimple_statement_d* %gs) #0 !dbg !5923 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5924, metadata !DIExpression()), !dbg !5925
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5926
  %gimple_omp_task = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_omp_task*, !dbg !5927
  %arg_align = getelementptr inbounds %struct.gimple_statement_omp_task, %struct.gimple_statement_omp_task* %gimple_omp_task, i32 0, i32 3, !dbg !5928
  ret %union.tree_node** %arg_align, !dbg !5929
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_omp_sections_clauses_ptr(%union.gimple_statement_d* %gs) #0 !dbg !5930 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5931, metadata !DIExpression()), !dbg !5932
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5933
  %gimple_omp_sections = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_omp_sections*, !dbg !5934
  %clauses = getelementptr inbounds %struct.gimple_statement_omp_sections, %struct.gimple_statement_omp_sections* %gimple_omp_sections, i32 0, i32 1, !dbg !5935
  ret %union.tree_node** %clauses, !dbg !5936
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_omp_sections_control_ptr(%union.gimple_statement_d* %gs) #0 !dbg !5937 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5938, metadata !DIExpression()), !dbg !5939
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5940
  %gimple_omp_sections = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_omp_sections*, !dbg !5941
  %control = getelementptr inbounds %struct.gimple_statement_omp_sections, %struct.gimple_statement_omp_sections* %gimple_omp_sections, i32 0, i32 2, !dbg !5942
  ret %union.tree_node** %control, !dbg !5943
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_omp_single_clauses_ptr(%union.gimple_statement_d* %gs) #0 !dbg !5944 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5945, metadata !DIExpression()), !dbg !5946
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5947
  %gimple_omp_single = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_omp_single*, !dbg !5948
  %clauses = getelementptr inbounds %struct.gimple_statement_omp_single, %struct.gimple_statement_omp_single* %gimple_omp_single, i32 0, i32 1, !dbg !5949
  ret %union.tree_node** %clauses, !dbg !5950
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_omp_atomic_load_lhs_ptr(%union.gimple_statement_d* %g) #0 !dbg !5951 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5952, metadata !DIExpression()), !dbg !5953
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5954
  %gimple_omp_atomic_load = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_omp_atomic_load*, !dbg !5955
  %lhs = getelementptr inbounds %struct.gimple_statement_omp_atomic_load, %struct.gimple_statement_omp_atomic_load* %gimple_omp_atomic_load, i32 0, i32 2, !dbg !5956
  ret %union.tree_node** %lhs, !dbg !5957
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_omp_atomic_load_rhs_ptr(%union.gimple_statement_d* %g) #0 !dbg !5958 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5959, metadata !DIExpression()), !dbg !5960
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5961
  %gimple_omp_atomic_load = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_omp_atomic_load*, !dbg !5962
  %rhs = getelementptr inbounds %struct.gimple_statement_omp_atomic_load, %struct.gimple_statement_omp_atomic_load* %gimple_omp_atomic_load, i32 0, i32 1, !dbg !5963
  ret %union.tree_node** %rhs, !dbg !5964
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_omp_atomic_store_val_ptr(%union.gimple_statement_d* %g) #0 !dbg !5965 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5966, metadata !DIExpression()), !dbg !5967
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5968
  %gimple_omp_atomic_store = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_omp_atomic_store*, !dbg !5969
  %val = getelementptr inbounds %struct.gimple_statement_omp_atomic_store, %struct.gimple_statement_omp_atomic_store* %gimple_omp_atomic_store, i32 0, i32 1, !dbg !5970
  ret %union.tree_node** %val, !dbg !5971
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_statement_structure(%union.gimple_statement_d* %gs) #0 !dbg !5972 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5975, metadata !DIExpression()), !dbg !5976
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5977
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5978
  %call1 = call i32 @gss_for_code(i32 %call), !dbg !5979
  ret i32 %call1, !dbg !5980
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_location(%union.gimple_statement_d* %g) #0 !dbg !5981 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5982, metadata !DIExpression()), !dbg !5983
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5984
  %call = call i32 @gimple_location(%union.gimple_statement_d* %0), !dbg !5985
  %cmp = icmp ne i32 %call, 0, !dbg !5986
  %conv = zext i1 %cmp to i32, !dbg !5986
  %conv1 = trunc i32 %conv to i8, !dbg !5985
  ret i8 %conv1, !dbg !5987
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @gimple_bind_body(%union.gimple_statement_d* %gs) #0 !dbg !5988 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5991, metadata !DIExpression()), !dbg !5992
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5993
  %gimple_bind = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_bind*, !dbg !5994
  %body = getelementptr inbounds %struct.gimple_statement_bind, %struct.gimple_statement_bind* %gimple_bind, i32 0, i32 3, !dbg !5995
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %body, align 8, !dbg !5995
  ret %struct.gimple_seq_d* %1, !dbg !5996
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @gimple_catch_handler(%union.gimple_statement_d* %gs) #0 !dbg !5997 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5998, metadata !DIExpression()), !dbg !5999
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6000
  %gimple_catch = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_catch*, !dbg !6001
  %handler = getelementptr inbounds %struct.gimple_statement_catch, %struct.gimple_statement_catch* %gimple_catch, i32 0, i32 2, !dbg !6002
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %handler, align 8, !dbg !6002
  ret %struct.gimple_seq_d* %1, !dbg !6003
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @gimple_eh_filter_failure(%union.gimple_statement_d* %gs) #0 !dbg !6004 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6005, metadata !DIExpression()), !dbg !6006
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6007
  %gimple_eh_filter = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_eh_filter*, !dbg !6008
  %failure = getelementptr inbounds %struct.gimple_statement_eh_filter, %struct.gimple_statement_eh_filter* %gimple_eh_filter, i32 0, i32 2, !dbg !6009
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %failure, align 8, !dbg !6009
  ret %struct.gimple_seq_d* %1, !dbg !6010
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @gimple_try_eval(%union.gimple_statement_d* %gs) #0 !dbg !6011 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6012, metadata !DIExpression()), !dbg !6013
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6014
  %gimple_try = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_try*, !dbg !6015
  %eval = getelementptr inbounds %struct.gimple_statement_try, %struct.gimple_statement_try* %gimple_try, i32 0, i32 1, !dbg !6016
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %eval, align 8, !dbg !6016
  ret %struct.gimple_seq_d* %1, !dbg !6017
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @gimple_try_cleanup(%union.gimple_statement_d* %gs) #0 !dbg !6018 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6019, metadata !DIExpression()), !dbg !6020
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6021
  %gimple_try = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_try*, !dbg !6022
  %cleanup = getelementptr inbounds %struct.gimple_statement_try, %struct.gimple_statement_try* %gimple_try, i32 0, i32 2, !dbg !6023
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %cleanup, align 8, !dbg !6023
  ret %struct.gimple_seq_d* %1, !dbg !6024
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @gimple_omp_for_pre_body(%union.gimple_statement_d* %gs) #0 !dbg !6025 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6026, metadata !DIExpression()), !dbg !6027
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6028
  %gimple_omp_for = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_omp_for*, !dbg !6029
  %pre_body = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for, i32 0, i32 4, !dbg !6030
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %pre_body, align 8, !dbg !6030
  ret %struct.gimple_seq_d* %1, !dbg !6031
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @gimple_omp_body(%union.gimple_statement_d* %gs) #0 !dbg !6032 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6033, metadata !DIExpression()), !dbg !6034
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6035
  %omp = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_omp*, !dbg !6036
  %body = getelementptr inbounds %struct.gimple_statement_omp, %struct.gimple_statement_omp* %omp, i32 0, i32 1, !dbg !6037
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %body, align 8, !dbg !6037
  ret %struct.gimple_seq_d* %1, !dbg !6038
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @gimple_wce_cleanup(%union.gimple_statement_d* %gs) #0 !dbg !6039 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6040, metadata !DIExpression()), !dbg !6041
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6042
  %gimple_wce = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_wce*, !dbg !6043
  %cleanup = getelementptr inbounds %struct.gimple_statement_wce, %struct.gimple_statement_wce* %gimple_wce, i32 0, i32 1, !dbg !6044
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %cleanup, align 8, !dbg !6044
  ret %struct.gimple_seq_d* %1, !dbg !6045
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_substatements(%union.gimple_statement_d* %g) #0 !dbg !6046 {
entry:
  %retval = alloca i8, align 1
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6047, metadata !DIExpression()), !dbg !6048
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6049
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6050
  switch i32 %call, label %sw.default [
    i32 10, label %sw.bb
    i32 11, label %sw.bb
    i32 12, label %sw.bb
    i32 17, label %sw.bb
    i32 23, label %sw.bb
    i32 24, label %sw.bb
    i32 25, label %sw.bb
    i32 29, label %sw.bb
    i32 26, label %sw.bb
    i32 27, label %sw.bb
    i32 30, label %sw.bb
    i32 32, label %sw.bb
    i32 22, label %sw.bb
    i32 34, label %sw.bb
  ], !dbg !6051

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i8 1, i8* %retval, align 1, !dbg !6052
  br label %return, !dbg !6052

sw.default:                                       ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !6054
  br label %return, !dbg !6054

return:                                           ; preds = %sw.default, %sw.bb
  %1 = load i8, i8* %retval, align 1, !dbg !6055
  ret i8 %1, !dbg !6055
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gimple_set_body(%union.tree_node* %fndecl, %struct.gimple_seq_d* %seq) #0 !dbg !6056 {
entry:
  %fndecl.addr = alloca %union.tree_node*, align 8
  %seq.addr = alloca %struct.gimple_seq_d*, align 8
  %fn = alloca %struct.function*, align 8
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !6059, metadata !DIExpression()), !dbg !6060
  store %struct.gimple_seq_d* %seq, %struct.gimple_seq_d** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq.addr, metadata !6061, metadata !DIExpression()), !dbg !6062
  call void @llvm.dbg.declare(metadata %struct.function** %fn, metadata !6063, metadata !DIExpression()), !dbg !6064
  %0 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !6065
  %function_decl = bitcast %union.tree_node* %0 to %struct.tree_function_decl*, !dbg !6065
  %f = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 1, !dbg !6065
  %1 = load %struct.function*, %struct.function** %f, align 8, !dbg !6065
  store %struct.function* %1, %struct.function** %fn, align 8, !dbg !6064
  %2 = load %struct.function*, %struct.function** %fn, align 8, !dbg !6066
  %cmp = icmp eq %struct.function* %2, null, !dbg !6068
  br i1 %cmp, label %if.then, label %if.else, !dbg !6069

if.then:                                          ; preds = %entry
  %3 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !6070
  %cmp1 = icmp eq %struct.gimple_seq_d* %3, null, !dbg !6070
  br i1 %cmp1, label %cond.false, label %cond.true, !dbg !6070

cond.true:                                        ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 1690, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !6070
  br label %cond.end, !dbg !6070

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !6070

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6070
  br label %if.end, !dbg !6072

if.else:                                          ; preds = %entry
  %4 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !6073
  %5 = load %struct.function*, %struct.function** %fn, align 8, !dbg !6074
  %gimple_body = getelementptr inbounds %struct.function, %struct.function* %5, i32 0, i32 2, !dbg !6075
  store %struct.gimple_seq_d* %4, %struct.gimple_seq_d** %gimple_body, align 8, !dbg !6076
  br label %if.end

if.end:                                           ; preds = %if.else, %cond.end
  ret void, !dbg !6077
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.gimple_seq_d* @gimple_body(%union.tree_node* %fndecl) #0 !dbg !6078 {
entry:
  %fndecl.addr = alloca %union.tree_node*, align 8
  %fn = alloca %struct.function*, align 8
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !6081, metadata !DIExpression()), !dbg !6082
  call void @llvm.dbg.declare(metadata %struct.function** %fn, metadata !6083, metadata !DIExpression()), !dbg !6084
  %0 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !6085
  %function_decl = bitcast %union.tree_node* %0 to %struct.tree_function_decl*, !dbg !6085
  %f = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 1, !dbg !6085
  %1 = load %struct.function*, %struct.function** %f, align 8, !dbg !6085
  store %struct.function* %1, %struct.function** %fn, align 8, !dbg !6084
  %2 = load %struct.function*, %struct.function** %fn, align 8, !dbg !6086
  %tobool = icmp ne %struct.function* %2, null, !dbg !6086
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6086

cond.true:                                        ; preds = %entry
  %3 = load %struct.function*, %struct.function** %fn, align 8, !dbg !6087
  %gimple_body = getelementptr inbounds %struct.function, %struct.function* %3, i32 0, i32 2, !dbg !6088
  %4 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %gimple_body, align 8, !dbg !6088
  br label %cond.end, !dbg !6086

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6086

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_d* [ %4, %cond.true ], [ null, %cond.false ], !dbg !6086
  ret %struct.gimple_seq_d* %cond, !dbg !6089
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @gimple_has_body_p(%union.tree_node* %fndecl) #0 !dbg !6090 {
entry:
  %fndecl.addr = alloca %union.tree_node*, align 8
  %fn = alloca %struct.function*, align 8
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !6091, metadata !DIExpression()), !dbg !6092
  call void @llvm.dbg.declare(metadata %struct.function** %fn, metadata !6093, metadata !DIExpression()), !dbg !6094
  %0 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !6095
  %function_decl = bitcast %union.tree_node* %0 to %struct.tree_function_decl*, !dbg !6095
  %f = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 1, !dbg !6095
  %1 = load %struct.function*, %struct.function** %f, align 8, !dbg !6095
  store %struct.function* %1, %struct.function** %fn, align 8, !dbg !6094
  %2 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !6096
  %call = call %struct.gimple_seq_d* @gimple_body(%union.tree_node* %2), !dbg !6097
  %tobool = icmp ne %struct.gimple_seq_d* %call, null, !dbg !6097
  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !6098

lor.rhs:                                          ; preds = %entry
  %3 = load %struct.function*, %struct.function** %fn, align 8, !dbg !6099
  %tobool1 = icmp ne %struct.function* %3, null, !dbg !6099
  br i1 %tobool1, label %land.rhs, label %land.end, !dbg !6100

land.rhs:                                         ; preds = %lor.rhs
  %4 = load %struct.function*, %struct.function** %fn, align 8, !dbg !6101
  %cfg = getelementptr inbounds %struct.function, %struct.function* %4, i32 0, i32 1, !dbg !6102
  %5 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !6102
  %tobool2 = icmp ne %struct.control_flow_graph* %5, null, !dbg !6100
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %6 = phi i1 [ false, %lor.rhs ], [ %tobool2, %land.rhs ], !dbg !6103
  br label %lor.end, !dbg !6098

lor.end:                                          ; preds = %land.end, %entry
  %7 = phi i1 [ true, %entry ], [ %6, %land.end ]
  %lor.ext = zext i1 %7 to i32, !dbg !6098
  %conv = trunc i32 %lor.ext to i8, !dbg !6104
  ret i8 %conv, !dbg !6105
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gimple_call_flags(%union.gimple_statement_d* %stmt) #0 !dbg !6106 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags = alloca i32, align 4
  %decl = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6109, metadata !DIExpression()), !dbg !6110
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !6111, metadata !DIExpression()), !dbg !6112
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !6113, metadata !DIExpression()), !dbg !6114
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6115
  %call = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %0), !dbg !6116
  store %union.tree_node* %call, %union.tree_node** %decl, align 8, !dbg !6114
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !6117, metadata !DIExpression()), !dbg !6118
  %1 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6119
  %tobool = icmp ne %union.tree_node* %1, null, !dbg !6119
  br i1 %tobool, label %if.then, label %if.else, !dbg !6121

if.then:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6122
  %call1 = call i32 @flags_from_decl_or_type(%union.tree_node* %2), !dbg !6123
  store i32 %call1, i32* %flags, align 4, !dbg !6124
  br label %if.end9, !dbg !6125

if.else:                                          ; preds = %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6126
  %call2 = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %3), !dbg !6126
  %common = bitcast %union.tree_node* %call2 to %struct.tree_common*, !dbg !6126
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6126
  %4 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6126
  store %union.tree_node* %4, %union.tree_node** %t, align 8, !dbg !6128
  %5 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6129
  %tobool3 = icmp ne %union.tree_node* %5, null, !dbg !6129
  br i1 %tobool3, label %land.lhs.true, label %if.else8, !dbg !6131

land.lhs.true:                                    ; preds = %if.else
  %6 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6132
  %base = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !6132
  %7 = bitcast %struct.tree_base* %base to i64*, !dbg !6132
  %bf.load = load i64, i64* %7, align 8, !dbg !6132
  %bf.clear = and i64 %bf.load, 65535, !dbg !6132
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6132
  %cmp = icmp eq i32 %bf.cast, 10, !dbg !6133
  br i1 %cmp, label %if.then4, label %if.else8, !dbg !6134

if.then4:                                         ; preds = %land.lhs.true
  %8 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6135
  %common5 = bitcast %union.tree_node* %8 to %struct.tree_common*, !dbg !6135
  %type6 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5, i32 0, i32 2, !dbg !6135
  %9 = load %union.tree_node*, %union.tree_node** %type6, align 8, !dbg !6135
  %call7 = call i32 @flags_from_decl_or_type(%union.tree_node* %9), !dbg !6136
  store i32 %call7, i32* %flags, align 4, !dbg !6137
  br label %if.end, !dbg !6138

if.else8:                                         ; preds = %land.lhs.true, %if.else
  store i32 0, i32* %flags, align 4, !dbg !6139
  br label %if.end

if.end:                                           ; preds = %if.else8, %if.then4
  br label %if.end9

if.end9:                                          ; preds = %if.end, %if.then
  %10 = load i32, i32* %flags, align 4, !dbg !6140
  ret i32 %10, !dbg !6141
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %gs) #0 !dbg !6142 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6143, metadata !DIExpression()), !dbg !6144
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr, metadata !6145, metadata !DIExpression()), !dbg !6146
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6147
  %call = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %0), !dbg !6148
  store %union.tree_node* %call, %union.tree_node** %addr, align 8, !dbg !6146
  %1 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !6149
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !6149
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !6149
  %bf.load = load i64, i64* %2, align 8, !dbg !6149
  %bf.clear = and i64 %bf.load, 65535, !dbg !6149
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6149
  %cmp = icmp eq i32 %bf.cast, 121, !dbg !6151
  br i1 %cmp, label %if.then, label %if.end, !dbg !6152

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !6153
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !6153
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !6153
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !6153
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6153
  store %union.tree_node* %4, %union.tree_node** %retval, align 8, !dbg !6154
  br label %return, !dbg !6154

if.end:                                           ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6155
  br label %return, !dbg !6155

return:                                           ; preds = %if.end, %if.then
  %5 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6156
  ret %union.tree_node* %5, !dbg !6156
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %gs) #0 !dbg !6157 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6158, metadata !DIExpression()), !dbg !6159
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6160
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !6161
  ret %union.tree_node* %call, !dbg !6162
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @gimple_assign_copy_p(%union.gimple_statement_d* %gs) #0 !dbg !6163 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6164, metadata !DIExpression()), !dbg !6165
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6166
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6167
  %cmp = icmp eq i32 %call, 6, !dbg !6168
  br i1 %cmp, label %land.lhs.true, label %land.end, !dbg !6169

land.lhs.true:                                    ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6170
  %call1 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %1), !dbg !6171
  %call2 = call i32 @get_gimple_rhs_class(i32 %call1), !dbg !6172
  %cmp3 = icmp eq i32 %call2, 3, !dbg !6173
  br i1 %cmp3, label %land.rhs, label %land.end, !dbg !6174

land.rhs:                                         ; preds = %land.lhs.true
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6175
  %call4 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %2, i32 1), !dbg !6176
  %call5 = call zeroext i8 @is_gimple_val(%union.tree_node* %call4), !dbg !6177
  %conv = zext i8 %call5 to i32, !dbg !6177
  %tobool = icmp ne i32 %conv, 0, !dbg !6174
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %3 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %tobool, %land.rhs ], !dbg !6178
  %land.ext = zext i1 %3 to i32, !dbg !6174
  %conv6 = trunc i32 %land.ext to i8, !dbg !6167
  ret i8 %conv6, !dbg !6179
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %gs) #0 !dbg !6180 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6183, metadata !DIExpression()), !dbg !6184
  call void @llvm.dbg.declare(metadata i32* %code, metadata !6185, metadata !DIExpression()), !dbg !6186
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6187
  %call = call i32 @gimple_expr_code(%union.gimple_statement_d* %0), !dbg !6188
  store i32 %call, i32* %code, align 4, !dbg !6189
  %1 = load i32, i32* %code, align 4, !dbg !6190
  %call1 = call i32 @get_gimple_rhs_class(i32 %1), !dbg !6192
  %cmp = icmp eq i32 %call1, 3, !dbg !6193
  br i1 %cmp, label %if.then, label %if.end, !dbg !6194

if.then:                                          ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6195
  %call2 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %2), !dbg !6195
  %base = bitcast %union.tree_node* %call2 to %struct.tree_base*, !dbg !6195
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !6195
  %bf.load = load i64, i64* %3, align 8, !dbg !6195
  %bf.clear = and i64 %bf.load, 65535, !dbg !6195
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6195
  store i32 %bf.cast, i32* %code, align 4, !dbg !6196
  br label %if.end, !dbg !6197

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %code, align 4, !dbg !6198
  ret i32 %4, !dbg !6199
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @is_gimple_val(%union.tree_node* %t) #0 !dbg !6200 {
entry:
  %retval = alloca i8, align 1
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !6201, metadata !DIExpression()), !dbg !6202
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !6203
  %call = call zeroext i8 @is_gimple_variable(%union.tree_node* %0), !dbg !6205
  %conv = zext i8 %call to i32, !dbg !6205
  %tobool = icmp ne i32 %conv, 0, !dbg !6205
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !6206

land.lhs.true:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !6207
  %common = bitcast %union.tree_node* %1 to %struct.tree_common*, !dbg !6207
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6207
  %2 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6207
  %call1 = call zeroext i8 @is_gimple_reg_type(%union.tree_node* %2), !dbg !6208
  %conv2 = zext i8 %call1 to i32, !dbg !6208
  %tobool3 = icmp ne i32 %conv2, 0, !dbg !6208
  br i1 %tobool3, label %land.lhs.true4, label %if.end, !dbg !6209

land.lhs.true4:                                   ; preds = %land.lhs.true
  %3 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !6210
  %call5 = call zeroext i8 @is_gimple_reg(%union.tree_node* %3), !dbg !6211
  %tobool6 = icmp ne i8 %call5, 0, !dbg !6211
  br i1 %tobool6, label %if.end, label %if.then, !dbg !6212

if.then:                                          ; preds = %land.lhs.true4
  store i8 0, i8* %retval, align 1, !dbg !6213
  br label %return, !dbg !6213

if.end:                                           ; preds = %land.lhs.true4, %land.lhs.true, %entry
  %4 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !6214
  %call7 = call zeroext i8 @is_gimple_variable(%union.tree_node* %4), !dbg !6215
  %conv8 = zext i8 %call7 to i32, !dbg !6215
  %tobool9 = icmp ne i32 %conv8, 0, !dbg !6215
  br i1 %tobool9, label %lor.end, label %lor.rhs, !dbg !6216

lor.rhs:                                          ; preds = %if.end
  %5 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !6217
  %call10 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %5), !dbg !6218
  %conv11 = zext i8 %call10 to i32, !dbg !6218
  %tobool12 = icmp ne i32 %conv11, 0, !dbg !6216
  br label %lor.end, !dbg !6216

lor.end:                                          ; preds = %lor.rhs, %if.end
  %6 = phi i1 [ true, %if.end ], [ %tobool12, %lor.rhs ]
  %lor.ext = zext i1 %6 to i32, !dbg !6216
  %conv13 = trunc i32 %lor.ext to i8, !dbg !6219
  store i8 %conv13, i8* %retval, align 1, !dbg !6220
  br label %return, !dbg !6220

return:                                           ; preds = %lor.end, %if.then
  %7 = load i8, i8* %retval, align 1, !dbg !6221
  ret i8 %7, !dbg !6221
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !6222 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6225, metadata !DIExpression()), !dbg !6226
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !6227, metadata !DIExpression()), !dbg !6228
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6229
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !6231
  %tobool = icmp ne i8 %call, 0, !dbg !6231
  br i1 %tobool, label %if.then, label %if.else, !dbg !6232

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6233
  %call1 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %1), !dbg !6235
  %2 = load i32, i32* %i.addr, align 4, !dbg !6236
  %idxprom = zext i32 %2 to i64, !dbg !6235
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idxprom, !dbg !6235
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6235
  store %union.tree_node* %3, %union.tree_node** %retval, align 8, !dbg !6237
  br label %return, !dbg !6237

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6238
  br label %return, !dbg !6238

return:                                           ; preds = %if.else, %if.then
  %4 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6239
  ret %union.tree_node* %4, !dbg !6239
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @gimple_assign_ssa_name_copy_p(%union.gimple_statement_d* %gs) #0 !dbg !6240 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6241, metadata !DIExpression()), !dbg !6242
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6243
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6244
  %cmp = icmp eq i32 %call, 6, !dbg !6245
  br i1 %cmp, label %land.lhs.true, label %land.end, !dbg !6246

land.lhs.true:                                    ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6247
  %call1 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %1), !dbg !6248
  %call2 = call i32 @get_gimple_rhs_class(i32 %call1), !dbg !6249
  %cmp3 = icmp eq i32 %call2, 3, !dbg !6250
  br i1 %cmp3, label %land.lhs.true4, label %land.end, !dbg !6251

land.lhs.true4:                                   ; preds = %land.lhs.true
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6252
  %call5 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %2), !dbg !6252
  %base = bitcast %union.tree_node* %call5 to %struct.tree_base*, !dbg !6252
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !6252
  %bf.load = load i64, i64* %3, align 8, !dbg !6252
  %bf.clear = and i64 %bf.load, 65535, !dbg !6252
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6252
  %cmp6 = icmp eq i32 %bf.cast, 141, !dbg !6253
  br i1 %cmp6, label %land.rhs, label %land.end, !dbg !6254

land.rhs:                                         ; preds = %land.lhs.true4
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6255
  %call7 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %4), !dbg !6255
  %base8 = bitcast %union.tree_node* %call7 to %struct.tree_base*, !dbg !6255
  %5 = bitcast %struct.tree_base* %base8 to i64*, !dbg !6255
  %bf.load9 = load i64, i64* %5, align 8, !dbg !6255
  %bf.clear10 = and i64 %bf.load9, 65535, !dbg !6255
  %bf.cast11 = trunc i64 %bf.clear10 to i32, !dbg !6255
  %cmp12 = icmp eq i32 %bf.cast11, 141, !dbg !6256
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true4, %land.lhs.true, %entry
  %6 = phi i1 [ false, %land.lhs.true4 ], [ false, %land.lhs.true ], [ false, %entry ], [ %cmp12, %land.rhs ], !dbg !6257
  %land.ext = zext i1 %6 to i32, !dbg !6254
  %conv = trunc i32 %land.ext to i8, !dbg !6258
  ret i8 %conv, !dbg !6259
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @gimple_assign_unary_nop_p(%union.gimple_statement_d* %gs) #0 !dbg !6260 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6261, metadata !DIExpression()), !dbg !6262
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6263
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6264
  %cmp = icmp eq i32 %call, 6, !dbg !6265
  br i1 %cmp, label %land.lhs.true, label %land.end, !dbg !6266

land.lhs.true:                                    ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6267
  %call1 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %1), !dbg !6267
  %cmp2 = icmp eq i32 %call1, 116, !dbg !6267
  br i1 %cmp2, label %land.lhs.true8, label %lor.lhs.false, !dbg !6267

lor.lhs.false:                                    ; preds = %land.lhs.true
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6267
  %call3 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %2), !dbg !6267
  %cmp4 = icmp eq i32 %call3, 113, !dbg !6267
  br i1 %cmp4, label %land.lhs.true8, label %lor.lhs.false5, !dbg !6268

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6269
  %call6 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %3), !dbg !6270
  %cmp7 = icmp eq i32 %call6, 117, !dbg !6271
  br i1 %cmp7, label %land.lhs.true8, label %land.end, !dbg !6272

land.lhs.true8:                                   ; preds = %lor.lhs.false5, %lor.lhs.false, %land.lhs.true
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6273
  %call9 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %4), !dbg !6274
  %5 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !6275
  %cmp10 = icmp ne %union.tree_node* %call9, %5, !dbg !6276
  br i1 %cmp10, label %land.rhs, label %land.end, !dbg !6277

land.rhs:                                         ; preds = %land.lhs.true8
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6278
  %call11 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %6), !dbg !6278
  %common = bitcast %union.tree_node* %call11 to %struct.tree_common*, !dbg !6278
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6278
  %7 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6278
  %base = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !6278
  %8 = bitcast %struct.tree_base* %base to i64*, !dbg !6278
  %bf.load = load i64, i64* %8, align 8, !dbg !6278
  %bf.clear = and i64 %bf.load, 65535, !dbg !6278
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6278
  %cmp12 = icmp eq i32 %bf.cast, 14, !dbg !6278
  br i1 %cmp12, label %cond.true, label %cond.false, !dbg !6278

cond.true:                                        ; preds = %land.rhs
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6278
  %call13 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %9), !dbg !6278
  %common14 = bitcast %union.tree_node* %call13 to %struct.tree_common*, !dbg !6278
  %type15 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common14, i32 0, i32 2, !dbg !6278
  %10 = load %union.tree_node*, %union.tree_node** %type15, align 8, !dbg !6278
  %call16 = call i32 @vector_type_mode(%union.tree_node* %10), !dbg !6278
  br label %cond.end, !dbg !6278

cond.false:                                       ; preds = %land.rhs
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6278
  %call17 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %11), !dbg !6278
  %common18 = bitcast %union.tree_node* %call17 to %struct.tree_common*, !dbg !6278
  %type19 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common18, i32 0, i32 2, !dbg !6278
  %12 = load %union.tree_node*, %union.tree_node** %type19, align 8, !dbg !6278
  %type20 = bitcast %union.tree_node* %12 to %struct.tree_type*, !dbg !6278
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type20, i32 0, i32 6, !dbg !6278
  %bf.load21 = load i32, i32* %mode, align 4, !dbg !6278
  %bf.lshr = lshr i32 %bf.load21, 16, !dbg !6278
  %bf.clear22 = and i32 %bf.lshr, 255, !dbg !6278
  br label %cond.end, !dbg !6278

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call16, %cond.true ], [ %bf.clear22, %cond.false ], !dbg !6278
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6279
  %call23 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %13), !dbg !6279
  %common24 = bitcast %union.tree_node* %call23 to %struct.tree_common*, !dbg !6279
  %type25 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common24, i32 0, i32 2, !dbg !6279
  %14 = load %union.tree_node*, %union.tree_node** %type25, align 8, !dbg !6279
  %base26 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !6279
  %15 = bitcast %struct.tree_base* %base26 to i64*, !dbg !6279
  %bf.load27 = load i64, i64* %15, align 8, !dbg !6279
  %bf.clear28 = and i64 %bf.load27, 65535, !dbg !6279
  %bf.cast29 = trunc i64 %bf.clear28 to i32, !dbg !6279
  %cmp30 = icmp eq i32 %bf.cast29, 14, !dbg !6279
  br i1 %cmp30, label %cond.true31, label %cond.false36, !dbg !6279

cond.true31:                                      ; preds = %cond.end
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6279
  %call32 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %16), !dbg !6279
  %common33 = bitcast %union.tree_node* %call32 to %struct.tree_common*, !dbg !6279
  %type34 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common33, i32 0, i32 2, !dbg !6279
  %17 = load %union.tree_node*, %union.tree_node** %type34, align 8, !dbg !6279
  %call35 = call i32 @vector_type_mode(%union.tree_node* %17), !dbg !6279
  br label %cond.end45, !dbg !6279

cond.false36:                                     ; preds = %cond.end
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6279
  %call37 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %18), !dbg !6279
  %common38 = bitcast %union.tree_node* %call37 to %struct.tree_common*, !dbg !6279
  %type39 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common38, i32 0, i32 2, !dbg !6279
  %19 = load %union.tree_node*, %union.tree_node** %type39, align 8, !dbg !6279
  %type40 = bitcast %union.tree_node* %19 to %struct.tree_type*, !dbg !6279
  %mode41 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type40, i32 0, i32 6, !dbg !6279
  %bf.load42 = load i32, i32* %mode41, align 4, !dbg !6279
  %bf.lshr43 = lshr i32 %bf.load42, 16, !dbg !6279
  %bf.clear44 = and i32 %bf.lshr43, 255, !dbg !6279
  br label %cond.end45, !dbg !6279

cond.end45:                                       ; preds = %cond.false36, %cond.true31
  %cond46 = phi i32 [ %call35, %cond.true31 ], [ %bf.clear44, %cond.false36 ], !dbg !6279
  %cmp47 = icmp eq i32 %cond, %cond46, !dbg !6280
  br label %land.end

land.end:                                         ; preds = %cond.end45, %land.lhs.true8, %lor.lhs.false5, %entry
  %20 = phi i1 [ false, %land.lhs.true8 ], [ false, %lor.lhs.false5 ], [ false, %entry ], [ %cmp47, %cond.end45 ], !dbg !6281
  %land.ext = zext i1 %20 to i32, !dbg !6277
  %conv = trunc i32 %land.ext to i8, !dbg !6282
  ret i8 %conv, !dbg !6283
}

declare dso_local i32 @vector_type_mode(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @gimple_set_bb(%union.gimple_statement_d* %stmt, %struct.basic_block_def* %bb) #0 !dbg !6284 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %t = alloca %union.tree_node*, align 8
  %uid = alloca i32, align 4
  %old_len = alloca i32, align 4
  %new_len = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6287, metadata !DIExpression()), !dbg !6288
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6289, metadata !DIExpression()), !dbg !6290
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6291
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6292
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !6293
  %bb1 = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 4, !dbg !6294
  store %struct.basic_block_def* %0, %struct.basic_block_def** %bb1, align 8, !dbg !6295
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6296
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !6296
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !6298
  %3 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !6298
  %tobool = icmp ne %struct.control_flow_graph* %3, null, !dbg !6296
  br i1 %tobool, label %land.lhs.true, label %if.end35, !dbg !6299

land.lhs.true:                                    ; preds = %entry
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6300
  %call = call i32 @gimple_code(%union.gimple_statement_d* %4), !dbg !6301
  %cmp = icmp eq i32 %call, 4, !dbg !6302
  br i1 %cmp, label %if.then, label %if.end35, !dbg !6303

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !6304, metadata !DIExpression()), !dbg !6306
  call void @llvm.dbg.declare(metadata i32* %uid, metadata !6307, metadata !DIExpression()), !dbg !6308
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6309
  %call2 = call %union.tree_node* @gimple_label_label(%union.gimple_statement_d* %5), !dbg !6310
  store %union.tree_node* %call2, %union.tree_node** %t, align 8, !dbg !6311
  %6 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6312
  %label_decl = bitcast %union.tree_node* %6 to %struct.tree_label_decl*, !dbg !6312
  %label_decl_uid = getelementptr inbounds %struct.tree_label_decl, %struct.tree_label_decl* %label_decl, i32 0, i32 1, !dbg !6312
  %7 = load i32, i32* %label_decl_uid, align 8, !dbg !6312
  store i32 %7, i32* %uid, align 4, !dbg !6313
  %8 = load i32, i32* %uid, align 4, !dbg !6314
  %cmp3 = icmp eq i32 %8, -1, !dbg !6316
  br i1 %cmp3, label %if.then4, label %if.end21, !dbg !6317

if.then4:                                         ; preds = %if.then
  call void @llvm.dbg.declare(metadata i32* %old_len, metadata !6318, metadata !DIExpression()), !dbg !6320
  %9 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6321
  %add.ptr5 = getelementptr inbounds %struct.function, %struct.function* %9, i64 0, !dbg !6321
  %cfg6 = getelementptr inbounds %struct.function, %struct.function* %add.ptr5, i32 0, i32 1, !dbg !6321
  %10 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg6, align 8, !dbg !6321
  %x_label_to_block_map = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %10, i32 0, i32 6, !dbg !6321
  %11 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_label_to_block_map, align 8, !dbg !6321
  %tobool7 = icmp ne %struct.VEC_basic_block_gc* %11, null, !dbg !6321
  br i1 %tobool7, label %cond.true, label %cond.false, !dbg !6321

cond.true:                                        ; preds = %if.then4
  %12 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6321
  %add.ptr8 = getelementptr inbounds %struct.function, %struct.function* %12, i64 0, !dbg !6321
  %cfg9 = getelementptr inbounds %struct.function, %struct.function* %add.ptr8, i32 0, i32 1, !dbg !6321
  %13 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg9, align 8, !dbg !6321
  %x_label_to_block_map10 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %13, i32 0, i32 6, !dbg !6321
  %14 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_label_to_block_map10, align 8, !dbg !6321
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %14, i32 0, i32 0, !dbg !6321
  br label %cond.end, !dbg !6321

cond.false:                                       ; preds = %if.then4
  br label %cond.end, !dbg !6321

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6321
  %call11 = call i32 @VEC_basic_block_base_length(%struct.VEC_basic_block_base* %cond), !dbg !6321
  store i32 %call11, i32* %old_len, align 4, !dbg !6320
  %15 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6322
  %add.ptr12 = getelementptr inbounds %struct.function, %struct.function* %15, i64 0, !dbg !6322
  %cfg13 = getelementptr inbounds %struct.function, %struct.function* %add.ptr12, i32 0, i32 1, !dbg !6323
  %16 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg13, align 8, !dbg !6323
  %last_label_uid = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %16, i32 0, i32 11, !dbg !6324
  %17 = load i32, i32* %last_label_uid, align 8, !dbg !6325
  %inc = add nsw i32 %17, 1, !dbg !6325
  store i32 %inc, i32* %last_label_uid, align 8, !dbg !6325
  store i32 %17, i32* %uid, align 4, !dbg !6326
  %18 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6327
  %label_decl14 = bitcast %union.tree_node* %18 to %struct.tree_label_decl*, !dbg !6327
  %label_decl_uid15 = getelementptr inbounds %struct.tree_label_decl, %struct.tree_label_decl* %label_decl14, i32 0, i32 1, !dbg !6327
  store i32 %17, i32* %label_decl_uid15, align 8, !dbg !6328
  %19 = load i32, i32* %old_len, align 4, !dbg !6329
  %20 = load i32, i32* %uid, align 4, !dbg !6331
  %cmp16 = icmp ule i32 %19, %20, !dbg !6332
  br i1 %cmp16, label %if.then17, label %if.end, !dbg !6333

if.then17:                                        ; preds = %cond.end
  call void @llvm.dbg.declare(metadata i32* %new_len, metadata !6334, metadata !DIExpression()), !dbg !6336
  %21 = load i32, i32* %uid, align 4, !dbg !6337
  %mul = mul nsw i32 3, %21, !dbg !6338
  %div = sdiv i32 %mul, 2, !dbg !6339
  %add = add nsw i32 %div, 1, !dbg !6340
  store i32 %add, i32* %new_len, align 4, !dbg !6336
  %22 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6341
  %add.ptr18 = getelementptr inbounds %struct.function, %struct.function* %22, i64 0, !dbg !6341
  %cfg19 = getelementptr inbounds %struct.function, %struct.function* %add.ptr18, i32 0, i32 1, !dbg !6341
  %23 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg19, align 8, !dbg !6341
  %x_label_to_block_map20 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %23, i32 0, i32 6, !dbg !6341
  %24 = load i32, i32* %new_len, align 4, !dbg !6341
  call void @VEC_basic_block_gc_safe_grow_cleared(%struct.VEC_basic_block_gc** %x_label_to_block_map20, i32 %24), !dbg !6341
  br label %if.end, !dbg !6342

if.end:                                           ; preds = %if.then17, %cond.end
  br label %if.end21, !dbg !6343

if.end21:                                         ; preds = %if.end, %if.then
  %25 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6344
  %add.ptr22 = getelementptr inbounds %struct.function, %struct.function* %25, i64 0, !dbg !6344
  %cfg23 = getelementptr inbounds %struct.function, %struct.function* %add.ptr22, i32 0, i32 1, !dbg !6344
  %26 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg23, align 8, !dbg !6344
  %x_label_to_block_map24 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %26, i32 0, i32 6, !dbg !6344
  %27 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_label_to_block_map24, align 8, !dbg !6344
  %tobool25 = icmp ne %struct.VEC_basic_block_gc* %27, null, !dbg !6344
  br i1 %tobool25, label %cond.true26, label %cond.false31, !dbg !6344

cond.true26:                                      ; preds = %if.end21
  %28 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6344
  %add.ptr27 = getelementptr inbounds %struct.function, %struct.function* %28, i64 0, !dbg !6344
  %cfg28 = getelementptr inbounds %struct.function, %struct.function* %add.ptr27, i32 0, i32 1, !dbg !6344
  %29 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg28, align 8, !dbg !6344
  %x_label_to_block_map29 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %29, i32 0, i32 6, !dbg !6344
  %30 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_label_to_block_map29, align 8, !dbg !6344
  %base30 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %30, i32 0, i32 0, !dbg !6344
  br label %cond.end32, !dbg !6344

cond.false31:                                     ; preds = %if.end21
  br label %cond.end32, !dbg !6344

cond.end32:                                       ; preds = %cond.false31, %cond.true26
  %cond33 = phi %struct.VEC_basic_block_base* [ %base30, %cond.true26 ], [ null, %cond.false31 ], !dbg !6344
  %31 = load i32, i32* %uid, align 4, !dbg !6344
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6344
  %call34 = call %struct.basic_block_def* @VEC_basic_block_base_replace(%struct.VEC_basic_block_base* %cond33, i32 %31, %struct.basic_block_def* %32), !dbg !6344
  br label %if.end35, !dbg !6345

if.end35:                                         ; preds = %cond.end32, %land.lhs.true, %entry
  ret void, !dbg !6346
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_label_label(%union.gimple_statement_d* %gs) #0 !dbg !6347 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6348, metadata !DIExpression()), !dbg !6349
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6350
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !6351
  ret %union.tree_node* %call, !dbg !6352
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_basic_block_base_length(%struct.VEC_basic_block_base* %vec_) #0 !dbg !6353 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_base*, align 8
  store %struct.VEC_basic_block_base* %vec_, %struct.VEC_basic_block_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_base** %vec_.addr, metadata !6358, metadata !DIExpression()), !dbg !6359
  %0 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !6359
  %tobool = icmp ne %struct.VEC_basic_block_base* %0, null, !dbg !6359
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6359

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !6359
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %1, i32 0, i32 0, !dbg !6359
  %2 = load i32, i32* %num, align 8, !dbg !6359
  br label %cond.end, !dbg !6359

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6359

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !6359
  ret i32 %cond, !dbg !6359
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_basic_block_gc_safe_grow_cleared(%struct.VEC_basic_block_gc** %vec_, i32 %size_) #0 !dbg !6360 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_gc**, align 8
  %size_.addr = alloca i32, align 4
  %oldsize = alloca i32, align 4
  store %struct.VEC_basic_block_gc** %vec_, %struct.VEC_basic_block_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_gc*** %vec_.addr, metadata !6364, metadata !DIExpression()), !dbg !6365
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !6366, metadata !DIExpression()), !dbg !6365
  call void @llvm.dbg.declare(metadata i32* %oldsize, metadata !6367, metadata !DIExpression()), !dbg !6365
  %0 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !6365
  %1 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %0, align 8, !dbg !6365
  %tobool = icmp ne %struct.VEC_basic_block_gc* %1, null, !dbg !6365
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6365

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !6365
  %3 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %2, align 8, !dbg !6365
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %3, i32 0, i32 0, !dbg !6365
  br label %cond.end, !dbg !6365

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6365

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6365
  %call = call i32 @VEC_basic_block_base_length(%struct.VEC_basic_block_base* %cond), !dbg !6365
  store i32 %call, i32* %oldsize, align 4, !dbg !6365
  %4 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !6365
  %5 = load i32, i32* %size_.addr, align 4, !dbg !6365
  call void @VEC_basic_block_gc_safe_grow(%struct.VEC_basic_block_gc** %4, i32 %5), !dbg !6365
  %6 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !6365
  %7 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %6, align 8, !dbg !6365
  %tobool1 = icmp ne %struct.VEC_basic_block_gc* %7, null, !dbg !6365
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !6365

cond.true2:                                       ; preds = %cond.end
  %8 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !6365
  %9 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %8, align 8, !dbg !6365
  %base3 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %9, i32 0, i32 0, !dbg !6365
  br label %cond.end5, !dbg !6365

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !6365

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_basic_block_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !6365
  %call7 = call %struct.basic_block_def** @VEC_basic_block_base_address(%struct.VEC_basic_block_base* %cond6), !dbg !6365
  %10 = load i32, i32* %oldsize, align 4, !dbg !6365
  %idxprom = sext i32 %10 to i64, !dbg !6365
  %arrayidx = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %call7, i64 %idxprom, !dbg !6365
  %11 = bitcast %struct.basic_block_def** %arrayidx to i8*, !dbg !6365
  %12 = load i32, i32* %size_.addr, align 4, !dbg !6365
  %13 = load i32, i32* %oldsize, align 4, !dbg !6365
  %sub = sub nsw i32 %12, %13, !dbg !6365
  %conv = sext i32 %sub to i64, !dbg !6365
  %mul = mul i64 8, %conv, !dbg !6365
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 %mul, i1 false), !dbg !6365
  ret void, !dbg !6365
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @VEC_basic_block_base_replace(%struct.VEC_basic_block_base* %vec_, i32 %ix_, %struct.basic_block_def* %obj_) #0 !dbg !6368 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_base*, align 8
  %ix_.addr = alloca i32, align 4
  %obj_.addr = alloca %struct.basic_block_def*, align 8
  %old_obj_ = alloca %struct.basic_block_def*, align 8
  store %struct.VEC_basic_block_base* %vec_, %struct.VEC_basic_block_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_base** %vec_.addr, metadata !6372, metadata !DIExpression()), !dbg !6373
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !6374, metadata !DIExpression()), !dbg !6373
  store %struct.basic_block_def* %obj_, %struct.basic_block_def** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %obj_.addr, metadata !6375, metadata !DIExpression()), !dbg !6373
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %old_obj_, metadata !6376, metadata !DIExpression()), !dbg !6373
  %0 = load i32, i32* %ix_.addr, align 4, !dbg !6373
  %1 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !6373
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %1, i32 0, i32 0, !dbg !6373
  %2 = load i32, i32* %num, align 8, !dbg !6373
  %cmp = icmp ult i32 %0, %2, !dbg !6373
  %conv = zext i1 %cmp to i32, !dbg !6373
  %3 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !6373
  %vec = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %3, i32 0, i32 2, !dbg !6373
  %4 = load i32, i32* %ix_.addr, align 4, !dbg !6373
  %idxprom = zext i32 %4 to i64, !dbg !6373
  %arrayidx = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %vec, i64 0, i64 %idxprom, !dbg !6373
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !6373
  store %struct.basic_block_def* %5, %struct.basic_block_def** %old_obj_, align 8, !dbg !6373
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %obj_.addr, align 8, !dbg !6373
  %7 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !6373
  %vec1 = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %7, i32 0, i32 2, !dbg !6373
  %8 = load i32, i32* %ix_.addr, align 4, !dbg !6373
  %idxprom2 = zext i32 %8 to i64, !dbg !6373
  %arrayidx3 = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %vec1, i64 0, i64 %idxprom2, !dbg !6373
  store %struct.basic_block_def* %6, %struct.basic_block_def** %arrayidx3, align 8, !dbg !6373
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %old_obj_, align 8, !dbg !6373
  ret %struct.basic_block_def* %9, !dbg !6373
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gimple_assign_set_rhs_from_tree(%struct.gimple_stmt_iterator* %gsi, %union.tree_node* %expr) #0 !dbg !6377 {
entry:
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %subcode = alloca i32, align 4
  %op1 = alloca %union.tree_node*, align 8
  %op2 = alloca %union.tree_node*, align 8
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !6380, metadata !DIExpression()), !dbg !6381
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !6382, metadata !DIExpression()), !dbg !6383
  call void @llvm.dbg.declare(metadata i32* %subcode, metadata !6384, metadata !DIExpression()), !dbg !6385
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1, metadata !6386, metadata !DIExpression()), !dbg !6387
  call void @llvm.dbg.declare(metadata %union.tree_node** %op2, metadata !6388, metadata !DIExpression()), !dbg !6389
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !6390
  call void @extract_ops_from_tree(%union.tree_node* %0, i32* %subcode, %union.tree_node** %op1, %union.tree_node** %op2), !dbg !6391
  %1 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6392
  %2 = load i32, i32* %subcode, align 4, !dbg !6393
  %3 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !6394
  %4 = load %union.tree_node*, %union.tree_node** %op2, align 8, !dbg !6395
  call void @gimple_assign_set_rhs_with_ops(%struct.gimple_stmt_iterator* %1, i32 %2, %union.tree_node* %3, %union.tree_node* %4), !dbg !6396
  ret void, !dbg !6397
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gimple_assign_set_rhs_with_ops(%struct.gimple_stmt_iterator* %gsi, i32 %code, %union.tree_node* %op1, %union.tree_node* %op2) #0 !dbg !6398 {
entry:
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %code.addr = alloca i32, align 4
  %op1.addr = alloca %union.tree_node*, align 8
  %op2.addr = alloca %union.tree_node*, align 8
  %new_rhs_ops = alloca i32, align 4
  %stmt = alloca %union.gimple_statement_d*, align 8
  %lhs = alloca %union.tree_node*, align 8
  %new_stmt = alloca %union.gimple_statement_d*, align 8
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !6401, metadata !DIExpression()), !dbg !6402
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !6403, metadata !DIExpression()), !dbg !6404
  store %union.tree_node* %op1, %union.tree_node** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1.addr, metadata !6405, metadata !DIExpression()), !dbg !6406
  store %union.tree_node* %op2, %union.tree_node** %op2.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op2.addr, metadata !6407, metadata !DIExpression()), !dbg !6408
  call void @llvm.dbg.declare(metadata i32* %new_rhs_ops, metadata !6409, metadata !DIExpression()), !dbg !6410
  %0 = load i32, i32* %code.addr, align 4, !dbg !6411
  %call = call i32 @get_gimple_rhs_num_ops(i32 %0), !dbg !6412
  store i32 %call, i32* %new_rhs_ops, align 4, !dbg !6410
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !6413, metadata !DIExpression()), !dbg !6414
  %1 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6415
  %call1 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %1), !dbg !6416
  store %union.gimple_statement_d* %call1, %union.gimple_statement_d** %stmt, align 8, !dbg !6414
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6417
  %call2 = call i32 @gimple_num_ops(%union.gimple_statement_d* %2), !dbg !6419
  %3 = load i32, i32* %new_rhs_ops, align 4, !dbg !6420
  %add = add i32 %3, 1, !dbg !6421
  %cmp = icmp ult i32 %call2, %add, !dbg !6422
  br i1 %cmp, label %if.then, label %if.end, !dbg !6423

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !6424, metadata !DIExpression()), !dbg !6426
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6427
  %call3 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %4), !dbg !6428
  store %union.tree_node* %call3, %union.tree_node** %lhs, align 8, !dbg !6426
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %new_stmt, metadata !6429, metadata !DIExpression()), !dbg !6430
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6431
  %call4 = call i32 @gimple_code(%union.gimple_statement_d* %5), !dbg !6431
  %6 = load i32, i32* %new_rhs_ops, align 4, !dbg !6431
  %add5 = add i32 %6, 1, !dbg !6431
  %call6 = call %union.gimple_statement_d* @gimple_alloc_stat(i32 %call4, i32 %add5), !dbg !6431
  store %union.gimple_statement_d* %call6, %union.gimple_statement_d** %new_stmt, align 8, !dbg !6430
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !6432
  %8 = bitcast %union.gimple_statement_d* %7 to i8*, !dbg !6433
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6434
  %10 = bitcast %union.gimple_statement_d* %9 to i8*, !dbg !6433
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6435
  %call7 = call i32 @gimple_code(%union.gimple_statement_d* %11), !dbg !6436
  %call8 = call i64 @gimple_size(i32 %call7), !dbg !6437
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %10, i64 %call8, i1 false), !dbg !6433
  %12 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6438
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !6439
  call void @gsi_replace(%struct.gimple_stmt_iterator* %12, %union.gimple_statement_d* %13, i8 zeroext 1), !dbg !6440
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !6441
  store %union.gimple_statement_d* %14, %union.gimple_statement_d** %stmt, align 8, !dbg !6442
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6443
  %16 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6444
  call void @gimple_assign_set_lhs(%union.gimple_statement_d* %15, %union.tree_node* %16), !dbg !6445
  br label %if.end, !dbg !6446

if.end:                                           ; preds = %if.then, %entry
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6447
  %18 = load i32, i32* %new_rhs_ops, align 4, !dbg !6448
  %add9 = add i32 %18, 1, !dbg !6449
  call void @gimple_set_num_ops(%union.gimple_statement_d* %17, i32 %add9), !dbg !6450
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6451
  %20 = load i32, i32* %code.addr, align 4, !dbg !6452
  call void @gimple_set_subcode(%union.gimple_statement_d* %19, i32 %20), !dbg !6453
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6454
  %22 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !6455
  call void @gimple_assign_set_rhs1(%union.gimple_statement_d* %21, %union.tree_node* %22), !dbg !6456
  %23 = load i32, i32* %new_rhs_ops, align 4, !dbg !6457
  %cmp10 = icmp ugt i32 %23, 1, !dbg !6459
  br i1 %cmp10, label %if.then11, label %if.end12, !dbg !6460

if.then11:                                        ; preds = %if.end
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6461
  %25 = load %union.tree_node*, %union.tree_node** %op2.addr, align 8, !dbg !6462
  call void @gimple_assign_set_rhs2(%union.gimple_statement_d* %24, %union.tree_node* %25), !dbg !6463
  br label %if.end12, !dbg !6463

if.end12:                                         ; preds = %if.then11, %if.end
  ret void, !dbg !6464
}

declare dso_local void @gsi_replace(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %stmt) #0 !dbg !6465 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6466, metadata !DIExpression()), !dbg !6467
  call void @llvm.dbg.declare(metadata i32* %code, metadata !6468, metadata !DIExpression()), !dbg !6469
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6470
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6471
  store i32 %call, i32* %code, align 4, !dbg !6469
  %1 = load i32, i32* %code, align 4, !dbg !6472
  %cmp = icmp eq i32 %1, 6, !dbg !6474
  br i1 %cmp, label %if.then, label %if.else, !dbg !6475

if.then:                                          ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6476
  %call1 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %2), !dbg !6477
  store %union.tree_node* %call1, %union.tree_node** %retval, align 8, !dbg !6478
  br label %return, !dbg !6478

if.else:                                          ; preds = %entry
  %3 = load i32, i32* %code, align 4, !dbg !6479
  %cmp2 = icmp eq i32 %3, 8, !dbg !6481
  br i1 %cmp2, label %if.then3, label %if.else5, !dbg !6482

if.then3:                                         ; preds = %if.else
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6483
  %call4 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %4), !dbg !6484
  store %union.tree_node* %call4, %union.tree_node** %retval, align 8, !dbg !6485
  br label %return, !dbg !6485

if.else5:                                         ; preds = %if.else
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6486
  br label %return, !dbg !6486

return:                                           ; preds = %if.else5, %if.then3, %if.then
  %5 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6487
  ret %union.tree_node* %5, !dbg !6487
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %gs) #0 !dbg !6488 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6489, metadata !DIExpression()), !dbg !6490
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6491
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !6492
  ret %union.tree_node* %call, !dbg !6493
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gimple_set_lhs(%union.gimple_statement_d* %stmt, %union.tree_node* %lhs) #0 !dbg !6494 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %lhs.addr = alloca %union.tree_node*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6495, metadata !DIExpression()), !dbg !6496
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !6497, metadata !DIExpression()), !dbg !6498
  call void @llvm.dbg.declare(metadata i32* %code, metadata !6499, metadata !DIExpression()), !dbg !6500
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6501
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6502
  store i32 %call, i32* %code, align 4, !dbg !6500
  %1 = load i32, i32* %code, align 4, !dbg !6503
  %cmp = icmp eq i32 %1, 6, !dbg !6505
  br i1 %cmp, label %if.then, label %if.else, !dbg !6506

if.then:                                          ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6507
  %3 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !6508
  call void @gimple_assign_set_lhs(%union.gimple_statement_d* %2, %union.tree_node* %3), !dbg !6509
  br label %if.end4, !dbg !6509

if.else:                                          ; preds = %entry
  %4 = load i32, i32* %code, align 4, !dbg !6510
  %cmp1 = icmp eq i32 %4, 8, !dbg !6512
  br i1 %cmp1, label %if.then2, label %if.else3, !dbg !6513

if.then2:                                         ; preds = %if.else
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6514
  %6 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !6515
  call void @gimple_call_set_lhs(%union.gimple_statement_d* %5, %union.tree_node* %6), !dbg !6516
  br label %if.end, !dbg !6516

if.else3:                                         ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 1933, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !6517
  br label %if.end

if.end:                                           ; preds = %if.else3, %if.then2
  br label %if.end4

if.end4:                                          ; preds = %if.end, %if.then
  ret void, !dbg !6518
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_call_set_lhs(%union.gimple_statement_d* %gs, %union.tree_node* %lhs) #0 !dbg !6519 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %lhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6520, metadata !DIExpression()), !dbg !6521
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !6522, metadata !DIExpression()), !dbg !6523
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6524
  %1 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !6525
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 0, %union.tree_node* %1), !dbg !6526
  %2 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !6527
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !6527
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !6529

land.lhs.true:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !6530
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !6530
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !6530
  %bf.load = load i64, i64* %4, align 8, !dbg !6530
  %bf.clear = and i64 %bf.load, 65535, !dbg !6530
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6530
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !6531
  br i1 %cmp, label %if.then, label %if.end, !dbg !6532

if.then:                                          ; preds = %land.lhs.true
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6533
  %6 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !6534
  %ssa_name = bitcast %union.tree_node* %6 to %struct.tree_ssa_name*, !dbg !6534
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !6534
  store %union.gimple_statement_d* %5, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6535
  br label %if.end, !dbg !6534

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void, !dbg !6536
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gimple_replace_lhs(%union.gimple_statement_d* %stmt, %union.tree_node* %nlhs) #0 !dbg !6537 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %nlhs.addr = alloca %union.tree_node*, align 8
  %lhs = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6538, metadata !DIExpression()), !dbg !6539
  store %union.tree_node* %nlhs, %union.tree_node** %nlhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %nlhs.addr, metadata !6540, metadata !DIExpression()), !dbg !6541
  %0 = load i32, i32* @flag_var_tracking_assignments, align 4, !dbg !6542
  %tobool = icmp ne i32 %0, 0, !dbg !6542
  br i1 %tobool, label %if.then, label %if.end, !dbg !6544

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !6545, metadata !DIExpression()), !dbg !6547
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6548
  %call = call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %1), !dbg !6549
  store %union.tree_node* %call, %union.tree_node** %lhs, align 8, !dbg !6547
  %2 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6550
  %ssa_name = bitcast %union.tree_node* %2 to %struct.tree_ssa_name*, !dbg !6550
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !6550
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6550
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6550
  %cmp = icmp eq %union.gimple_statement_d* %3, %4, !dbg !6550
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6550

cond.true:                                        ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 1962, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !6550
  br label %cond.end, !dbg !6550

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !6550

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6550
  %5 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6551
  call void @insert_debug_temp_for_var_def(%struct.gimple_stmt_iterator* null, %union.tree_node* %5), !dbg !6552
  br label %if.end, !dbg !6553

if.end:                                           ; preds = %cond.end, %entry
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6554
  %7 = load %union.tree_node*, %union.tree_node** %nlhs.addr, align 8, !dbg !6555
  call void @gimple_set_lhs(%union.gimple_statement_d* %6, %union.tree_node* %7), !dbg !6556
  ret void, !dbg !6557
}

declare dso_local void @insert_debug_temp_for_var_def(%struct.gimple_stmt_iterator*, %union.tree_node*) #2

declare dso_local %union.tree_node* @unshare_expr(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_bind_vars(%union.gimple_statement_d* %gs) #0 !dbg !6558 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6559, metadata !DIExpression()), !dbg !6560
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6561
  %gimple_bind = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_bind*, !dbg !6562
  %vars = getelementptr inbounds %struct.gimple_statement_bind, %struct.gimple_statement_bind* %gimple_bind, i32 0, i32 1, !dbg !6563
  %1 = load %union.tree_node*, %union.tree_node** %vars, align 8, !dbg !6563
  ret %union.tree_node* %1, !dbg !6564
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_bind_block(%union.gimple_statement_d* %gs) #0 !dbg !6565 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6566, metadata !DIExpression()), !dbg !6567
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6568
  %gimple_bind = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_bind*, !dbg !6569
  %block = getelementptr inbounds %struct.gimple_statement_bind, %struct.gimple_statement_bind* %gimple_bind, i32 0, i32 2, !dbg !6570
  %1 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !6570
  ret %union.tree_node* %1, !dbg !6571
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_catch_types(%union.gimple_statement_d* %gs) #0 !dbg !6572 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6573, metadata !DIExpression()), !dbg !6574
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6575
  %gimple_catch = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_catch*, !dbg !6576
  %types = getelementptr inbounds %struct.gimple_statement_catch, %struct.gimple_statement_catch* %gimple_catch, i32 0, i32 1, !dbg !6577
  %1 = load %union.tree_node*, %union.tree_node** %types, align 8, !dbg !6577
  ret %union.tree_node* %1, !dbg !6578
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_eh_filter_types(%union.gimple_statement_d* %gs) #0 !dbg !6579 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6580, metadata !DIExpression()), !dbg !6581
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6582
  %gimple_eh_filter = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_eh_filter*, !dbg !6583
  %types = getelementptr inbounds %struct.gimple_statement_eh_filter, %struct.gimple_statement_eh_filter* %gimple_eh_filter, i32 0, i32 1, !dbg !6584
  %1 = load %union.tree_node*, %union.tree_node** %types, align 8, !dbg !6584
  ret %union.tree_node* %1, !dbg !6585
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_omp_for_clauses(%union.gimple_statement_d* %gs) #0 !dbg !6586 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6587, metadata !DIExpression()), !dbg !6588
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6589
  %gimple_omp_for = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_omp_for*, !dbg !6590
  %clauses = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for, i32 0, i32 1, !dbg !6591
  %1 = load %union.tree_node*, %union.tree_node** %clauses, align 8, !dbg !6591
  ret %union.tree_node* %1, !dbg !6592
}

declare dso_local i8* @ggc_alloc_stat(i64) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_omp_for_set_cond(%union.gimple_statement_d* %gs, i64 %i, i32 %cond) #0 !dbg !6593 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i64, align 8
  %cond.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6596, metadata !DIExpression()), !dbg !6597
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !6598, metadata !DIExpression()), !dbg !6599
  store i32 %cond, i32* %cond.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %cond.addr, metadata !6600, metadata !DIExpression()), !dbg !6601
  %0 = load i32, i32* %cond.addr, align 4, !dbg !6602
  %idxprom = sext i32 %0 to i64, !dbg !6602
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !6602
  %1 = load i32, i32* %arrayidx, align 4, !dbg !6602
  %cmp = icmp eq i32 %1, 5, !dbg !6602
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6602

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 4076, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !6602
  br label %cond.end, !dbg !6602

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6602

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond1 = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6602
  %2 = load i64, i64* %i.addr, align 8, !dbg !6603
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6603
  %gimple_omp_for = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_omp_for*, !dbg !6603
  %collapse = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for, i32 0, i32 2, !dbg !6603
  %4 = load i64, i64* %collapse, align 8, !dbg !6603
  %cmp2 = icmp ult i64 %2, %4, !dbg !6603
  br i1 %cmp2, label %cond.false4, label %cond.true3, !dbg !6603

cond.true3:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 4077, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !6603
  br label %cond.end5, !dbg !6603

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !6603

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !6603
  %5 = load i32, i32* %cond.addr, align 4, !dbg !6604
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6605
  %gimple_omp_for7 = bitcast %union.gimple_statement_d* %6 to %struct.gimple_statement_omp_for*, !dbg !6606
  %iter = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for7, i32 0, i32 3, !dbg !6607
  %7 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %iter, align 8, !dbg !6607
  %8 = load i64, i64* %i.addr, align 8, !dbg !6608
  %arrayidx8 = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %7, i64 %8, !dbg !6605
  %cond9 = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %arrayidx8, i32 0, i32 0, !dbg !6609
  store i32 %5, i32* %cond9, align 8, !dbg !6610
  ret void, !dbg !6611
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_omp_for_cond(%union.gimple_statement_d* %gs, i64 %i) #0 !dbg !6612 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6615, metadata !DIExpression()), !dbg !6616
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !6617, metadata !DIExpression()), !dbg !6618
  %0 = load i64, i64* %i.addr, align 8, !dbg !6619
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6619
  %gimple_omp_for = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_omp_for*, !dbg !6619
  %collapse = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for, i32 0, i32 2, !dbg !6619
  %2 = load i64, i64* %collapse, align 8, !dbg !6619
  %cmp = icmp ult i64 %0, %2, !dbg !6619
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6619

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 4088, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !6619
  br label %cond.end, !dbg !6619

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6619

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6619
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6620
  %gimple_omp_for1 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_omp_for*, !dbg !6621
  %iter = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for1, i32 0, i32 3, !dbg !6622
  %4 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %iter, align 8, !dbg !6622
  %5 = load i64, i64* %i.addr, align 8, !dbg !6623
  %arrayidx = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %4, i64 %5, !dbg !6620
  %cond2 = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %arrayidx, i32 0, i32 0, !dbg !6624
  %6 = load i32, i32* %cond2, align 8, !dbg !6624
  ret i32 %6, !dbg !6625
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_omp_for_set_index(%union.gimple_statement_d* %gs, i64 %i, %union.tree_node* %index) #0 !dbg !6626 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i64, align 8
  %index.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6629, metadata !DIExpression()), !dbg !6630
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !6631, metadata !DIExpression()), !dbg !6632
  store %union.tree_node* %index, %union.tree_node** %index.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %index.addr, metadata !6633, metadata !DIExpression()), !dbg !6634
  %0 = load i64, i64* %i.addr, align 8, !dbg !6635
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6635
  %gimple_omp_for = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_omp_for*, !dbg !6635
  %collapse = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for, i32 0, i32 2, !dbg !6635
  %2 = load i64, i64* %collapse, align 8, !dbg !6635
  %cmp = icmp ult i64 %0, %2, !dbg !6635
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6635

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 3475, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !6635
  br label %cond.end, !dbg !6635

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6635

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6635
  %3 = load %union.tree_node*, %union.tree_node** %index.addr, align 8, !dbg !6636
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6637
  %gimple_omp_for1 = bitcast %union.gimple_statement_d* %4 to %struct.gimple_statement_omp_for*, !dbg !6638
  %iter = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for1, i32 0, i32 3, !dbg !6639
  %5 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %iter, align 8, !dbg !6639
  %6 = load i64, i64* %i.addr, align 8, !dbg !6640
  %arrayidx = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %5, i64 %6, !dbg !6637
  %index2 = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %arrayidx, i32 0, i32 1, !dbg !6641
  store %union.tree_node* %3, %union.tree_node** %index2, align 8, !dbg !6642
  ret void, !dbg !6643
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_omp_for_index(%union.gimple_statement_d* %gs, i64 %i) #0 !dbg !6644 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6647, metadata !DIExpression()), !dbg !6648
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !6649, metadata !DIExpression()), !dbg !6650
  %0 = load i64, i64* %i.addr, align 8, !dbg !6651
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6651
  %gimple_omp_for = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_omp_for*, !dbg !6651
  %collapse = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for, i32 0, i32 2, !dbg !6651
  %2 = load i64, i64* %collapse, align 8, !dbg !6651
  %cmp = icmp ult i64 %0, %2, !dbg !6651
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6651

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 3453, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !6651
  br label %cond.end, !dbg !6651

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6651

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6651
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6652
  %gimple_omp_for1 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_omp_for*, !dbg !6653
  %iter = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for1, i32 0, i32 3, !dbg !6654
  %4 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %iter, align 8, !dbg !6654
  %5 = load i64, i64* %i.addr, align 8, !dbg !6655
  %arrayidx = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %4, i64 %5, !dbg !6652
  %index = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %arrayidx, i32 0, i32 1, !dbg !6656
  %6 = load %union.tree_node*, %union.tree_node** %index, align 8, !dbg !6656
  ret %union.tree_node* %6, !dbg !6657
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_omp_for_initial(%union.gimple_statement_d* %gs, i64 %i) #0 !dbg !6658 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6659, metadata !DIExpression()), !dbg !6660
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !6661, metadata !DIExpression()), !dbg !6662
  %0 = load i64, i64* %i.addr, align 8, !dbg !6663
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6663
  %gimple_omp_for = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_omp_for*, !dbg !6663
  %collapse = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for, i32 0, i32 2, !dbg !6663
  %2 = load i64, i64* %collapse, align 8, !dbg !6663
  %cmp = icmp ult i64 %0, %2, !dbg !6663
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6663

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 3486, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !6663
  br label %cond.end, !dbg !6663

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6663

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6663
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6664
  %gimple_omp_for1 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_omp_for*, !dbg !6665
  %iter = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for1, i32 0, i32 3, !dbg !6666
  %4 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %iter, align 8, !dbg !6666
  %5 = load i64, i64* %i.addr, align 8, !dbg !6667
  %arrayidx = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %4, i64 %5, !dbg !6664
  %initial = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %arrayidx, i32 0, i32 2, !dbg !6668
  %6 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !6668
  ret %union.tree_node* %6, !dbg !6669
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_omp_for_set_initial(%union.gimple_statement_d* %gs, i64 %i, %union.tree_node* %initial) #0 !dbg !6670 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i64, align 8
  %initial.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6671, metadata !DIExpression()), !dbg !6672
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !6673, metadata !DIExpression()), !dbg !6674
  store %union.tree_node* %initial, %union.tree_node** %initial.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %initial.addr, metadata !6675, metadata !DIExpression()), !dbg !6676
  %0 = load i64, i64* %i.addr, align 8, !dbg !6677
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6677
  %gimple_omp_for = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_omp_for*, !dbg !6677
  %collapse = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for, i32 0, i32 2, !dbg !6677
  %2 = load i64, i64* %collapse, align 8, !dbg !6677
  %cmp = icmp ult i64 %0, %2, !dbg !6677
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6677

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 3508, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !6677
  br label %cond.end, !dbg !6677

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6677

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6677
  %3 = load %union.tree_node*, %union.tree_node** %initial.addr, align 8, !dbg !6678
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6679
  %gimple_omp_for1 = bitcast %union.gimple_statement_d* %4 to %struct.gimple_statement_omp_for*, !dbg !6680
  %iter = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for1, i32 0, i32 3, !dbg !6681
  %5 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %iter, align 8, !dbg !6681
  %6 = load i64, i64* %i.addr, align 8, !dbg !6682
  %arrayidx = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %5, i64 %6, !dbg !6679
  %initial2 = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %arrayidx, i32 0, i32 2, !dbg !6683
  store %union.tree_node* %3, %union.tree_node** %initial2, align 8, !dbg !6684
  ret void, !dbg !6685
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_omp_for_final(%union.gimple_statement_d* %gs, i64 %i) #0 !dbg !6686 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6687, metadata !DIExpression()), !dbg !6688
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !6689, metadata !DIExpression()), !dbg !6690
  %0 = load i64, i64* %i.addr, align 8, !dbg !6691
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6691
  %gimple_omp_for = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_omp_for*, !dbg !6691
  %collapse = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for, i32 0, i32 2, !dbg !6691
  %2 = load i64, i64* %collapse, align 8, !dbg !6691
  %cmp = icmp ult i64 %0, %2, !dbg !6691
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6691

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 3519, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !6691
  br label %cond.end, !dbg !6691

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6691

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6691
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6692
  %gimple_omp_for1 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_omp_for*, !dbg !6693
  %iter = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for1, i32 0, i32 3, !dbg !6694
  %4 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %iter, align 8, !dbg !6694
  %5 = load i64, i64* %i.addr, align 8, !dbg !6695
  %arrayidx = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %4, i64 %5, !dbg !6692
  %final = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %arrayidx, i32 0, i32 3, !dbg !6696
  %6 = load %union.tree_node*, %union.tree_node** %final, align 8, !dbg !6696
  ret %union.tree_node* %6, !dbg !6697
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_omp_for_set_final(%union.gimple_statement_d* %gs, i64 %i, %union.tree_node* %final) #0 !dbg !6698 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i64, align 8
  %final.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6699, metadata !DIExpression()), !dbg !6700
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !6701, metadata !DIExpression()), !dbg !6702
  store %union.tree_node* %final, %union.tree_node** %final.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %final.addr, metadata !6703, metadata !DIExpression()), !dbg !6704
  %0 = load i64, i64* %i.addr, align 8, !dbg !6705
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6705
  %gimple_omp_for = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_omp_for*, !dbg !6705
  %collapse = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for, i32 0, i32 2, !dbg !6705
  %2 = load i64, i64* %collapse, align 8, !dbg !6705
  %cmp = icmp ult i64 %0, %2, !dbg !6705
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6705

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 3541, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !6705
  br label %cond.end, !dbg !6705

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6705

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6705
  %3 = load %union.tree_node*, %union.tree_node** %final.addr, align 8, !dbg !6706
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6707
  %gimple_omp_for1 = bitcast %union.gimple_statement_d* %4 to %struct.gimple_statement_omp_for*, !dbg !6708
  %iter = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for1, i32 0, i32 3, !dbg !6709
  %5 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %iter, align 8, !dbg !6709
  %6 = load i64, i64* %i.addr, align 8, !dbg !6710
  %arrayidx = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %5, i64 %6, !dbg !6707
  %final2 = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %arrayidx, i32 0, i32 3, !dbg !6711
  store %union.tree_node* %3, %union.tree_node** %final2, align 8, !dbg !6712
  ret void, !dbg !6713
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_omp_for_incr(%union.gimple_statement_d* %gs, i64 %i) #0 !dbg !6714 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6715, metadata !DIExpression()), !dbg !6716
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !6717, metadata !DIExpression()), !dbg !6718
  %0 = load i64, i64* %i.addr, align 8, !dbg !6719
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6719
  %gimple_omp_for = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_omp_for*, !dbg !6719
  %collapse = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for, i32 0, i32 2, !dbg !6719
  %2 = load i64, i64* %collapse, align 8, !dbg !6719
  %cmp = icmp ult i64 %0, %2, !dbg !6719
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6719

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 3552, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !6719
  br label %cond.end, !dbg !6719

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6719

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6719
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6720
  %gimple_omp_for1 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_omp_for*, !dbg !6721
  %iter = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for1, i32 0, i32 3, !dbg !6722
  %4 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %iter, align 8, !dbg !6722
  %5 = load i64, i64* %i.addr, align 8, !dbg !6723
  %arrayidx = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %4, i64 %5, !dbg !6720
  %incr = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %arrayidx, i32 0, i32 4, !dbg !6724
  %6 = load %union.tree_node*, %union.tree_node** %incr, align 8, !dbg !6724
  ret %union.tree_node* %6, !dbg !6725
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_omp_for_set_incr(%union.gimple_statement_d* %gs, i64 %i, %union.tree_node* %incr) #0 !dbg !6726 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i64, align 8
  %incr.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6727, metadata !DIExpression()), !dbg !6728
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !6729, metadata !DIExpression()), !dbg !6730
  store %union.tree_node* %incr, %union.tree_node** %incr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %incr.addr, metadata !6731, metadata !DIExpression()), !dbg !6732
  %0 = load i64, i64* %i.addr, align 8, !dbg !6733
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6733
  %gimple_omp_for = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_omp_for*, !dbg !6733
  %collapse = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for, i32 0, i32 2, !dbg !6733
  %2 = load i64, i64* %collapse, align 8, !dbg !6733
  %cmp = icmp ult i64 %0, %2, !dbg !6733
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6733

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 3574, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !6733
  br label %cond.end, !dbg !6733

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6733

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6733
  %3 = load %union.tree_node*, %union.tree_node** %incr.addr, align 8, !dbg !6734
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6735
  %gimple_omp_for1 = bitcast %union.gimple_statement_d* %4 to %struct.gimple_statement_omp_for*, !dbg !6736
  %iter = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for1, i32 0, i32 3, !dbg !6737
  %5 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %iter, align 8, !dbg !6737
  %6 = load i64, i64* %i.addr, align 8, !dbg !6738
  %arrayidx = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %5, i64 %6, !dbg !6735
  %incr2 = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %arrayidx, i32 0, i32 4, !dbg !6739
  store %union.tree_node* %3, %union.tree_node** %incr2, align 8, !dbg !6740
  ret void, !dbg !6741
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_omp_parallel_clauses(%union.gimple_statement_d* %gs) #0 !dbg !6742 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6743, metadata !DIExpression()), !dbg !6744
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6745
  %gimple_omp_parallel = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_omp_parallel*, !dbg !6746
  %clauses = getelementptr inbounds %struct.gimple_statement_omp_parallel, %struct.gimple_statement_omp_parallel* %gimple_omp_parallel, i32 0, i32 1, !dbg !6747
  %1 = load %union.tree_node*, %union.tree_node** %clauses, align 8, !dbg !6747
  ret %union.tree_node* %1, !dbg !6748
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_omp_parallel_child_fn(%union.gimple_statement_d* %gs) #0 !dbg !6749 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6750, metadata !DIExpression()), !dbg !6751
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6752
  %gimple_omp_parallel = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_omp_parallel*, !dbg !6753
  %child_fn = getelementptr inbounds %struct.gimple_statement_omp_parallel, %struct.gimple_statement_omp_parallel* %gimple_omp_parallel, i32 0, i32 2, !dbg !6754
  %1 = load %union.tree_node*, %union.tree_node** %child_fn, align 8, !dbg !6754
  ret %union.tree_node* %1, !dbg !6755
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_omp_parallel_data_arg(%union.gimple_statement_d* %gs) #0 !dbg !6756 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6757, metadata !DIExpression()), !dbg !6758
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6759
  %gimple_omp_parallel = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_omp_parallel*, !dbg !6760
  %data_arg = getelementptr inbounds %struct.gimple_statement_omp_parallel, %struct.gimple_statement_omp_parallel* %gimple_omp_parallel, i32 0, i32 3, !dbg !6761
  %1 = load %union.tree_node*, %union.tree_node** %data_arg, align 8, !dbg !6761
  ret %union.tree_node* %1, !dbg !6762
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_omp_task_clauses(%union.gimple_statement_d* %gs) #0 !dbg !6763 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6764, metadata !DIExpression()), !dbg !6765
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6766
  %gimple_omp_parallel = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_omp_parallel*, !dbg !6767
  %clauses = getelementptr inbounds %struct.gimple_statement_omp_parallel, %struct.gimple_statement_omp_parallel* %gimple_omp_parallel, i32 0, i32 1, !dbg !6768
  %1 = load %union.tree_node*, %union.tree_node** %clauses, align 8, !dbg !6768
  ret %union.tree_node* %1, !dbg !6769
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_omp_task_child_fn(%union.gimple_statement_d* %gs) #0 !dbg !6770 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6771, metadata !DIExpression()), !dbg !6772
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6773
  %gimple_omp_parallel = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_omp_parallel*, !dbg !6774
  %child_fn = getelementptr inbounds %struct.gimple_statement_omp_parallel, %struct.gimple_statement_omp_parallel* %gimple_omp_parallel, i32 0, i32 2, !dbg !6775
  %1 = load %union.tree_node*, %union.tree_node** %child_fn, align 8, !dbg !6775
  ret %union.tree_node* %1, !dbg !6776
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_omp_task_data_arg(%union.gimple_statement_d* %gs) #0 !dbg !6777 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6778, metadata !DIExpression()), !dbg !6779
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6780
  %gimple_omp_parallel = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_omp_parallel*, !dbg !6781
  %data_arg = getelementptr inbounds %struct.gimple_statement_omp_parallel, %struct.gimple_statement_omp_parallel* %gimple_omp_parallel, i32 0, i32 3, !dbg !6782
  %1 = load %union.tree_node*, %union.tree_node** %data_arg, align 8, !dbg !6782
  ret %union.tree_node* %1, !dbg !6783
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_omp_task_copy_fn(%union.gimple_statement_d* %gs) #0 !dbg !6784 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6785, metadata !DIExpression()), !dbg !6786
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6787
  %gimple_omp_task = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_omp_task*, !dbg !6788
  %copy_fn = getelementptr inbounds %struct.gimple_statement_omp_task, %struct.gimple_statement_omp_task* %gimple_omp_task, i32 0, i32 1, !dbg !6789
  %1 = load %union.tree_node*, %union.tree_node** %copy_fn, align 8, !dbg !6789
  ret %union.tree_node* %1, !dbg !6790
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_omp_task_arg_size(%union.gimple_statement_d* %gs) #0 !dbg !6791 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6792, metadata !DIExpression()), !dbg !6793
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6794
  %gimple_omp_task = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_omp_task*, !dbg !6795
  %arg_size = getelementptr inbounds %struct.gimple_statement_omp_task, %struct.gimple_statement_omp_task* %gimple_omp_task, i32 0, i32 2, !dbg !6796
  %1 = load %union.tree_node*, %union.tree_node** %arg_size, align 8, !dbg !6796
  ret %union.tree_node* %1, !dbg !6797
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_omp_task_arg_align(%union.gimple_statement_d* %gs) #0 !dbg !6798 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6799, metadata !DIExpression()), !dbg !6800
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6801
  %gimple_omp_task = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_omp_task*, !dbg !6802
  %arg_align = getelementptr inbounds %struct.gimple_statement_omp_task, %struct.gimple_statement_omp_task* %gimple_omp_task, i32 0, i32 3, !dbg !6803
  %1 = load %union.tree_node*, %union.tree_node** %arg_align, align 8, !dbg !6803
  ret %union.tree_node* %1, !dbg !6804
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_omp_critical_name(%union.gimple_statement_d* %gs) #0 !dbg !6805 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6806, metadata !DIExpression()), !dbg !6807
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6808
  %gimple_omp_critical = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_omp_critical*, !dbg !6809
  %name = getelementptr inbounds %struct.gimple_statement_omp_critical, %struct.gimple_statement_omp_critical* %gimple_omp_critical, i32 0, i32 1, !dbg !6810
  %1 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !6810
  ret %union.tree_node* %1, !dbg !6811
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_omp_sections_clauses(%union.gimple_statement_d* %gs) #0 !dbg !6812 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6813, metadata !DIExpression()), !dbg !6814
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6815
  %gimple_omp_sections = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_omp_sections*, !dbg !6816
  %clauses = getelementptr inbounds %struct.gimple_statement_omp_sections, %struct.gimple_statement_omp_sections* %gimple_omp_sections, i32 0, i32 1, !dbg !6817
  %1 = load %union.tree_node*, %union.tree_node** %clauses, align 8, !dbg !6817
  ret %union.tree_node* %1, !dbg !6818
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_omp_sections_control(%union.gimple_statement_d* %gs) #0 !dbg !6819 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6820, metadata !DIExpression()), !dbg !6821
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6822
  %gimple_omp_sections = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_omp_sections*, !dbg !6823
  %control = getelementptr inbounds %struct.gimple_statement_omp_sections, %struct.gimple_statement_omp_sections* %gimple_omp_sections, i32 0, i32 2, !dbg !6824
  %1 = load %union.tree_node*, %union.tree_node** %control, align 8, !dbg !6824
  ret %union.tree_node* %1, !dbg !6825
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_omp_sections_set_control(%union.gimple_statement_d* %gs, %union.tree_node* %control) #0 !dbg !6826 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %control.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6827, metadata !DIExpression()), !dbg !6828
  store %union.tree_node* %control, %union.tree_node** %control.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %control.addr, metadata !6829, metadata !DIExpression()), !dbg !6830
  %0 = load %union.tree_node*, %union.tree_node** %control.addr, align 8, !dbg !6831
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6832
  %gimple_omp_sections = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_omp_sections*, !dbg !6833
  %control1 = getelementptr inbounds %struct.gimple_statement_omp_sections, %struct.gimple_statement_omp_sections* %gimple_omp_sections, i32 0, i32 2, !dbg !6834
  store %union.tree_node* %0, %union.tree_node** %control1, align 8, !dbg !6835
  ret void, !dbg !6836
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_op(%union.gimple_statement_d* %gs, i32 %i, %union.tree_node* %op) #0 !dbg !6837 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  %op.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6838, metadata !DIExpression()), !dbg !6839
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !6840, metadata !DIExpression()), !dbg !6841
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !6842, metadata !DIExpression()), !dbg !6843
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6844
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !6844
  %conv = zext i8 %call to i32, !dbg !6844
  %tobool = icmp ne i32 %conv, 0, !dbg !6844
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !6844

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %i.addr, align 4, !dbg !6844
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6844
  %call1 = call i32 @gimple_num_ops(%union.gimple_statement_d* %2), !dbg !6844
  %cmp = icmp ult i32 %1, %call1, !dbg !6844
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6844

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 1665, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !6844
  br label %cond.end, !dbg !6844

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !6844

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6844
  %3 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !6845
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6846
  %call3 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %4), !dbg !6847
  %5 = load i32, i32* %i.addr, align 4, !dbg !6848
  %idxprom = zext i32 %5 to i64, !dbg !6847
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call3, i64 %idxprom, !dbg !6847
  store %union.tree_node* %3, %union.tree_node** %arrayidx, align 8, !dbg !6849
  ret void, !dbg !6850
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) #0 !dbg !6851 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6852, metadata !DIExpression()), !dbg !6853
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6854
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6855
  %cmp = icmp uge i32 %call, 1, !dbg !6856
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !6857

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6858
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !6859
  %cmp2 = icmp ule i32 %call1, 9, !dbg !6860
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !6861
  %land.ext = zext i1 %2 to i32, !dbg !6857
  %conv = trunc i32 %land.ext to i8, !dbg !6855
  ret i8 %conv, !dbg !6862
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_def_ops(%union.gimple_statement_d* %g, %struct.def_optype_d* %def) #0 !dbg !6863 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  %def.addr = alloca %struct.def_optype_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6866, metadata !DIExpression()), !dbg !6867
  store %struct.def_optype_d* %def, %struct.def_optype_d** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.def_optype_d** %def.addr, metadata !6868, metadata !DIExpression()), !dbg !6869
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6870
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !6870
  %tobool = icmp ne i8 %call, 0, !dbg !6870
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !6870

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 1305, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !6870
  br label %cond.end, !dbg !6870

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6870

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6870
  %1 = load %struct.def_optype_d*, %struct.def_optype_d** %def.addr, align 8, !dbg !6871
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6872
  %gsops = bitcast %union.gimple_statement_d* %2 to %struct.gimple_statement_with_ops*, !dbg !6873
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !6874
  %def_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 1, !dbg !6875
  store %struct.def_optype_d* %1, %struct.def_optype_d** %def_ops, align 8, !dbg !6876
  ret void, !dbg !6877
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_use_ops(%union.gimple_statement_d* %g, %struct.use_optype_d* %use) #0 !dbg !6878 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  %use.addr = alloca %struct.use_optype_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6881, metadata !DIExpression()), !dbg !6882
  store %struct.use_optype_d* %use, %struct.use_optype_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.use_optype_d** %use.addr, metadata !6883, metadata !DIExpression()), !dbg !6884
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6885
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !6885
  %tobool = icmp ne i8 %call, 0, !dbg !6885
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !6885

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 1326, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !6885
  br label %cond.end, !dbg !6885

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6885

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6885
  %1 = load %struct.use_optype_d*, %struct.use_optype_d** %use.addr, align 8, !dbg !6886
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6887
  %gsops = bitcast %union.gimple_statement_d* %2 to %struct.gimple_statement_with_ops*, !dbg !6888
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !6889
  %use_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 2, !dbg !6890
  store %struct.use_optype_d* %1, %struct.use_optype_d** %use_ops, align 8, !dbg !6891
  ret void, !dbg !6892
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %g) #0 !dbg !6893 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6894, metadata !DIExpression()), !dbg !6895
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6896
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6897
  %cmp = icmp uge i32 %call, 6, !dbg !6898
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !6899

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6900
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !6901
  %cmp2 = icmp ule i32 %call1, 9, !dbg !6902
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !6903
  %land.ext = zext i1 %2 to i32, !dbg !6899
  %conv = trunc i32 %land.ext to i8, !dbg !6897
  ret i8 %conv, !dbg !6904
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_vdef(%union.gimple_statement_d* %g, %union.tree_node* %vdef) #0 !dbg !6905 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  %vdef.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6906, metadata !DIExpression()), !dbg !6907
  store %union.tree_node* %vdef, %union.tree_node** %vdef.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %vdef.addr, metadata !6908, metadata !DIExpression()), !dbg !6909
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6910
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !6910
  %tobool = icmp ne i8 %call, 0, !dbg !6910
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !6910

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 1416, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !6910
  br label %cond.end, !dbg !6910

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6910

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6910
  %1 = load %union.tree_node*, %union.tree_node** %vdef.addr, align 8, !dbg !6911
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6912
  %gsmembase = bitcast %union.gimple_statement_d* %2 to %struct.gimple_statement_with_memory_ops_base*, !dbg !6913
  %vdef1 = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 1, !dbg !6914
  store %union.tree_node* %1, %union.tree_node** %vdef1, align 8, !dbg !6915
  ret void, !dbg !6916
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %g) #0 !dbg !6917 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6918, metadata !DIExpression()), !dbg !6919
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6920
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !6922
  %tobool = icmp ne i8 %call, 0, !dbg !6922
  br i1 %tobool, label %if.end, label %if.then, !dbg !6923

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6924
  br label %return, !dbg !6924

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6925
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !6926
  %vdef = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 1, !dbg !6927
  %2 = load %union.tree_node*, %union.tree_node** %vdef, align 8, !dbg !6927
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !6928
  br label %return, !dbg !6928

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6929
  ret %union.tree_node* %3, !dbg !6929
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_vuse(%union.gimple_statement_d* %g, %union.tree_node* %vuse) #0 !dbg !6930 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  %vuse.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6931, metadata !DIExpression()), !dbg !6932
  store %union.tree_node* %vuse, %union.tree_node** %vuse.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %vuse.addr, metadata !6933, metadata !DIExpression()), !dbg !6934
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6935
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !6935
  %tobool = icmp ne i8 %call, 0, !dbg !6935
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !6935

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 1407, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !6935
  br label %cond.end, !dbg !6935

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6935

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6935
  %1 = load %union.tree_node*, %union.tree_node** %vuse.addr, align 8, !dbg !6936
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6937
  %gsmembase = bitcast %union.gimple_statement_d* %2 to %struct.gimple_statement_with_memory_ops_base*, !dbg !6938
  %vuse1 = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 2, !dbg !6939
  store %union.tree_node* %1, %union.tree_node** %vuse1, align 8, !dbg !6940
  ret void, !dbg !6941
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %g) #0 !dbg !6942 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6943, metadata !DIExpression()), !dbg !6944
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6945
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !6947
  %tobool = icmp ne i8 %call, 0, !dbg !6947
  br i1 %tobool, label %if.end, label %if.then, !dbg !6948

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6949
  br label %return, !dbg !6949

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6950
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !6951
  %vuse = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 2, !dbg !6952
  %2 = load %union.tree_node*, %union.tree_node** %vuse, align 8, !dbg !6952
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !6953
  br label %return, !dbg !6953

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6954
  ret %union.tree_node* %3, !dbg !6954
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gimple_set_modified(%union.gimple_statement_d* %s, i8 zeroext %modifiedp) #0 !dbg !6955 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  %modifiedp.addr = alloca i8, align 1
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !6956, metadata !DIExpression()), !dbg !6957
  store i8 %modifiedp, i8* %modifiedp.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %modifiedp.addr, metadata !6958, metadata !DIExpression()), !dbg !6959
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !6960
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !6962
  %tobool = icmp ne i8 %call, 0, !dbg !6962
  br i1 %tobool, label %if.then, label %if.end16, !dbg !6963

if.then:                                          ; preds = %entry
  %1 = load i8, i8* %modifiedp.addr, align 1, !dbg !6964
  %conv = zext i8 %1 to i32, !dbg !6966
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !6967
  %gsbase = bitcast %union.gimple_statement_d* %2 to %struct.gimple_statement_base*, !dbg !6968
  %3 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !6969
  %bf.load = load i32, i32* %3, align 8, !dbg !6970
  %bf.value = and i32 %conv, 1, !dbg !6970
  %bf.shl = shl i32 %bf.value, 13, !dbg !6970
  %bf.clear = and i32 %bf.load, -8193, !dbg !6970
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !6970
  store i32 %bf.set, i32* %3, align 8, !dbg !6970
  %4 = load i8, i8* %modifiedp.addr, align 1, !dbg !6971
  %conv1 = zext i8 %4 to i32, !dbg !6971
  %tobool2 = icmp ne i32 %conv1, 0, !dbg !6971
  br i1 %tobool2, label %land.lhs.true, label %if.end, !dbg !6973

land.lhs.true:                                    ; preds = %if.then
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6974
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !6974
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 3, !dbg !6975
  %6 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !6975
  %tobool3 = icmp ne %struct.gimple_df* %6, null, !dbg !6974
  br i1 %tobool3, label %land.lhs.true4, label %if.end, !dbg !6976

land.lhs.true4:                                   ; preds = %land.lhs.true
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !6977
  %call5 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %7), !dbg !6978
  %conv6 = zext i8 %call5 to i32, !dbg !6978
  %tobool7 = icmp ne i32 %conv6, 0, !dbg !6978
  br i1 %tobool7, label %land.lhs.true8, label %if.end, !dbg !6979

land.lhs.true8:                                   ; preds = %land.lhs.true4
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !6980
  %call9 = call zeroext i8 @gimple_call_noreturn_p(%union.gimple_statement_d* %8), !dbg !6981
  %conv10 = zext i8 %call9 to i32, !dbg !6981
  %tobool11 = icmp ne i32 %conv10, 0, !dbg !6981
  br i1 %tobool11, label %if.then12, label %if.end, !dbg !6982

if.then12:                                        ; preds = %land.lhs.true8
  %9 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6983
  %add.ptr13 = getelementptr inbounds %struct.function, %struct.function* %9, i64 0, !dbg !6983
  %gimple_df14 = getelementptr inbounds %struct.function, %struct.function* %add.ptr13, i32 0, i32 3, !dbg !6983
  %10 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df14, align 8, !dbg !6983
  %modified_noreturn_calls = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %10, i32 0, i32 1, !dbg !6983
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !6983
  %call15 = call %union.gimple_statement_d** @VEC_gimple_gc_safe_push(%struct.VEC_gimple_gc** %modified_noreturn_calls, %union.gimple_statement_d* %11), !dbg !6983
  br label %if.end, !dbg !6983

if.end:                                           ; preds = %if.then12, %land.lhs.true8, %land.lhs.true4, %land.lhs.true, %if.then
  br label %if.end16, !dbg !6984

if.end16:                                         ; preds = %if.end, %entry
  ret void, !dbg !6985
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_call(%union.gimple_statement_d* %gs) #0 !dbg !6986 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6987, metadata !DIExpression()), !dbg !6988
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6989
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6990
  %cmp = icmp eq i32 %call, 8, !dbg !6991
  %conv = zext i1 %cmp to i32, !dbg !6991
  %conv1 = trunc i32 %conv to i8, !dbg !6990
  ret i8 %conv1, !dbg !6992
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_call_noreturn_p(%union.gimple_statement_d* %s) #0 !dbg !6993 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !6994, metadata !DIExpression()), !dbg !6995
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !6996
  %call = call i32 @gimple_call_flags(%union.gimple_statement_d* %0), !dbg !6997
  %and = and i32 %call, 8, !dbg !6998
  %cmp = icmp ne i32 %and, 0, !dbg !6999
  %conv = zext i1 %cmp to i32, !dbg !6999
  %conv1 = trunc i32 %conv to i8, !dbg !7000
  ret i8 %conv1, !dbg !7001
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d** @VEC_gimple_gc_safe_push(%struct.VEC_gimple_gc** %vec_, %union.gimple_statement_d* %obj_) #0 !dbg !7002 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_gc**, align 8
  %obj_.addr = alloca %union.gimple_statement_d*, align 8
  store %struct.VEC_gimple_gc** %vec_, %struct.VEC_gimple_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_gc*** %vec_.addr, metadata !7007, metadata !DIExpression()), !dbg !7008
  store %union.gimple_statement_d* %obj_, %union.gimple_statement_d** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %obj_.addr, metadata !7009, metadata !DIExpression()), !dbg !7008
  %0 = load %struct.VEC_gimple_gc**, %struct.VEC_gimple_gc*** %vec_.addr, align 8, !dbg !7008
  %call = call i32 @VEC_gimple_gc_reserve(%struct.VEC_gimple_gc** %0, i32 1), !dbg !7008
  %1 = load %struct.VEC_gimple_gc**, %struct.VEC_gimple_gc*** %vec_.addr, align 8, !dbg !7008
  %2 = load %struct.VEC_gimple_gc*, %struct.VEC_gimple_gc** %1, align 8, !dbg !7008
  %tobool = icmp ne %struct.VEC_gimple_gc* %2, null, !dbg !7008
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7008

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_gimple_gc**, %struct.VEC_gimple_gc*** %vec_.addr, align 8, !dbg !7008
  %4 = load %struct.VEC_gimple_gc*, %struct.VEC_gimple_gc** %3, align 8, !dbg !7008
  %base = getelementptr inbounds %struct.VEC_gimple_gc, %struct.VEC_gimple_gc* %4, i32 0, i32 0, !dbg !7008
  br label %cond.end, !dbg !7008

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7008

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7008
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %obj_.addr, align 8, !dbg !7008
  %call1 = call %union.gimple_statement_d** @VEC_gimple_base_quick_push(%struct.VEC_gimple_base* %cond, %union.gimple_statement_d* %5), !dbg !7008
  ret %union.gimple_statement_d** %call1, !dbg !7008
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @gimple_has_side_effects(%union.gimple_statement_d* %s) #0 !dbg !7010 {
entry:
  %retval = alloca i8, align 1
  %s.addr = alloca %union.gimple_statement_d*, align 8
  %i = alloca i32, align 4
  %nargs = alloca i32, align 4
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !7011, metadata !DIExpression()), !dbg !7012
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7013, metadata !DIExpression()), !dbg !7014
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !7015
  %call = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %0), !dbg !7017
  %tobool = icmp ne i8 %call, 0, !dbg !7017
  br i1 %tobool, label %if.then, label %if.end, !dbg !7018

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !7019
  br label %return, !dbg !7019

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !7020
  %call1 = call zeroext i8 @gimple_has_volatile_ops(%union.gimple_statement_d* %1), !dbg !7022
  %tobool2 = icmp ne i8 %call1, 0, !dbg !7022
  br i1 %tobool2, label %if.then3, label %if.end4, !dbg !7023

if.then3:                                         ; preds = %if.end
  store i8 1, i8* %retval, align 1, !dbg !7024
  br label %return, !dbg !7024

if.end4:                                          ; preds = %if.end
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !7025
  %call5 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %2), !dbg !7027
  %tobool6 = icmp ne i8 %call5, 0, !dbg !7027
  br i1 %tobool6, label %if.then7, label %if.else50, !dbg !7028

if.then7:                                         ; preds = %if.end4
  call void @llvm.dbg.declare(metadata i32* %nargs, metadata !7029, metadata !DIExpression()), !dbg !7031
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !7032
  %call8 = call i32 @gimple_call_num_args(%union.gimple_statement_d* %3), !dbg !7033
  store i32 %call8, i32* %nargs, align 4, !dbg !7031
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !7034
  %call9 = call i32 @gimple_call_flags(%union.gimple_statement_d* %4), !dbg !7036
  %and = and i32 %call9, 3, !dbg !7037
  %tobool10 = icmp ne i32 %and, 0, !dbg !7037
  br i1 %tobool10, label %if.else, label %if.then11, !dbg !7038

if.then11:                                        ; preds = %if.then7
  store i8 1, i8* %retval, align 1, !dbg !7039
  br label %return, !dbg !7039

if.else:                                          ; preds = %if.then7
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !7040
  %call12 = call i32 @gimple_call_flags(%union.gimple_statement_d* %5), !dbg !7042
  %and13 = and i32 %call12, 4, !dbg !7043
  %tobool14 = icmp ne i32 %and13, 0, !dbg !7043
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !7044

if.then15:                                        ; preds = %if.else
  store i8 1, i8* %retval, align 1, !dbg !7045
  br label %return, !dbg !7045

if.end16:                                         ; preds = %if.else
  br label %if.end17

if.end17:                                         ; preds = %if.end16
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !7046
  %call18 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %6), !dbg !7048
  %tobool19 = icmp ne %union.tree_node* %call18, null, !dbg !7048
  br i1 %tobool19, label %land.lhs.true, label %if.end25, !dbg !7049

land.lhs.true:                                    ; preds = %if.end17
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !7050
  %call20 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %7), !dbg !7050
  %base = bitcast %union.tree_node* %call20 to %struct.tree_base*, !dbg !7050
  %8 = bitcast %struct.tree_base* %base to i64*, !dbg !7050
  %bf.load = load i64, i64* %8, align 8, !dbg !7050
  %bf.lshr = lshr i64 %bf.load, 16, !dbg !7050
  %bf.clear = and i64 %bf.lshr, 1, !dbg !7050
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7050
  %tobool21 = icmp ne i32 %bf.cast, 0, !dbg !7050
  br i1 %tobool21, label %if.then22, label %if.end25, !dbg !7051

if.then22:                                        ; preds = %land.lhs.true
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !7052
  %call23 = call zeroext i8 @gimple_has_volatile_ops(%union.gimple_statement_d* %9), !dbg !7052
  %tobool24 = icmp ne i8 %call23, 0, !dbg !7052
  br i1 %tobool24, label %cond.false, label %cond.true, !dbg !7052

cond.true:                                        ; preds = %if.then22
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 2178, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !7052
  br label %cond.end, !dbg !7052

cond.false:                                       ; preds = %if.then22
  br label %cond.end, !dbg !7052

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7052
  store i8 1, i8* %retval, align 1, !dbg !7054
  br label %return, !dbg !7054

if.end25:                                         ; preds = %land.lhs.true, %if.end17
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !7055
  %call26 = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %10), !dbg !7055
  %base27 = bitcast %union.tree_node* %call26 to %struct.tree_base*, !dbg !7055
  %11 = bitcast %struct.tree_base* %base27 to i64*, !dbg !7055
  %bf.load28 = load i64, i64* %11, align 8, !dbg !7055
  %bf.lshr29 = lshr i64 %bf.load28, 16, !dbg !7055
  %bf.clear30 = and i64 %bf.lshr29, 1, !dbg !7055
  %bf.cast31 = trunc i64 %bf.clear30 to i32, !dbg !7055
  %tobool32 = icmp ne i32 %bf.cast31, 0, !dbg !7055
  br i1 %tobool32, label %if.then33, label %if.end34, !dbg !7057

if.then33:                                        ; preds = %if.end25
  store i8 1, i8* %retval, align 1, !dbg !7058
  br label %return, !dbg !7058

if.end34:                                         ; preds = %if.end25
  store i32 0, i32* %i, align 4, !dbg !7059
  br label %for.cond, !dbg !7061

for.cond:                                         ; preds = %for.inc, %if.end34
  %12 = load i32, i32* %i, align 4, !dbg !7062
  %13 = load i32, i32* %nargs, align 4, !dbg !7064
  %cmp = icmp ult i32 %12, %13, !dbg !7065
  br i1 %cmp, label %for.body, label %for.end, !dbg !7066

for.body:                                         ; preds = %for.cond
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !7067
  %15 = load i32, i32* %i, align 4, !dbg !7067
  %call35 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %14, i32 %15), !dbg !7067
  %base36 = bitcast %union.tree_node* %call35 to %struct.tree_base*, !dbg !7067
  %16 = bitcast %struct.tree_base* %base36 to i64*, !dbg !7067
  %bf.load37 = load i64, i64* %16, align 8, !dbg !7067
  %bf.lshr38 = lshr i64 %bf.load37, 16, !dbg !7067
  %bf.clear39 = and i64 %bf.lshr38, 1, !dbg !7067
  %bf.cast40 = trunc i64 %bf.clear39 to i32, !dbg !7067
  %tobool41 = icmp ne i32 %bf.cast40, 0, !dbg !7067
  br i1 %tobool41, label %if.then42, label %if.end49, !dbg !7069

if.then42:                                        ; preds = %for.body
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !7070
  %call43 = call zeroext i8 @gimple_has_volatile_ops(%union.gimple_statement_d* %17), !dbg !7070
  %tobool44 = icmp ne i8 %call43, 0, !dbg !7070
  br i1 %tobool44, label %cond.false46, label %cond.true45, !dbg !7070

cond.true45:                                      ; preds = %if.then42
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 2188, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !7070
  br label %cond.end47, !dbg !7070

cond.false46:                                     ; preds = %if.then42
  br label %cond.end47, !dbg !7070

cond.end47:                                       ; preds = %cond.false46, %cond.true45
  %cond48 = phi i32 [ 0, %cond.true45 ], [ 0, %cond.false46 ], !dbg !7070
  store i8 1, i8* %retval, align 1, !dbg !7072
  br label %return, !dbg !7072

if.end49:                                         ; preds = %for.body
  br label %for.inc, !dbg !7067

for.inc:                                          ; preds = %if.end49
  %18 = load i32, i32* %i, align 4, !dbg !7073
  %inc = add i32 %18, 1, !dbg !7073
  store i32 %inc, i32* %i, align 4, !dbg !7073
  br label %for.cond, !dbg !7074, !llvm.loop !7075

for.end:                                          ; preds = %for.cond
  store i8 0, i8* %retval, align 1, !dbg !7077
  br label %return, !dbg !7077

if.else50:                                        ; preds = %if.end4
  store i32 0, i32* %i, align 4, !dbg !7078
  br label %for.cond51, !dbg !7081

for.cond51:                                       ; preds = %for.inc70, %if.else50
  %19 = load i32, i32* %i, align 4, !dbg !7082
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !7084
  %call52 = call i32 @gimple_num_ops(%union.gimple_statement_d* %20), !dbg !7085
  %cmp53 = icmp ult i32 %19, %call52, !dbg !7086
  br i1 %cmp53, label %for.body54, label %for.end72, !dbg !7087

for.body54:                                       ; preds = %for.cond51
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !7088
  %22 = load i32, i32* %i, align 4, !dbg !7088
  %call55 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %21, i32 %22), !dbg !7088
  %base56 = bitcast %union.tree_node* %call55 to %struct.tree_base*, !dbg !7088
  %23 = bitcast %struct.tree_base* %base56 to i64*, !dbg !7088
  %bf.load57 = load i64, i64* %23, align 8, !dbg !7088
  %bf.lshr58 = lshr i64 %bf.load57, 16, !dbg !7088
  %bf.clear59 = and i64 %bf.lshr58, 1, !dbg !7088
  %bf.cast60 = trunc i64 %bf.clear59 to i32, !dbg !7088
  %tobool61 = icmp ne i32 %bf.cast60, 0, !dbg !7088
  br i1 %tobool61, label %if.then62, label %if.end69, !dbg !7090

if.then62:                                        ; preds = %for.body54
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !7091
  %call63 = call zeroext i8 @gimple_has_volatile_ops(%union.gimple_statement_d* %24), !dbg !7091
  %tobool64 = icmp ne i8 %call63, 0, !dbg !7091
  br i1 %tobool64, label %cond.false66, label %cond.true65, !dbg !7091

cond.true65:                                      ; preds = %if.then62
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 2199, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !7091
  br label %cond.end67, !dbg !7091

cond.false66:                                     ; preds = %if.then62
  br label %cond.end67, !dbg !7091

cond.end67:                                       ; preds = %cond.false66, %cond.true65
  %cond68 = phi i32 [ 0, %cond.true65 ], [ 0, %cond.false66 ], !dbg !7091
  store i8 1, i8* %retval, align 1, !dbg !7093
  br label %return, !dbg !7093

if.end69:                                         ; preds = %for.body54
  br label %for.inc70, !dbg !7088

for.inc70:                                        ; preds = %if.end69
  %25 = load i32, i32* %i, align 4, !dbg !7094
  %inc71 = add i32 %25, 1, !dbg !7094
  store i32 %inc71, i32* %i, align 4, !dbg !7094
  br label %for.cond51, !dbg !7095, !llvm.loop !7096

for.end72:                                        ; preds = %for.cond51
  br label %if.end73

if.end73:                                         ; preds = %for.end72
  store i8 0, i8* %retval, align 1, !dbg !7098
  br label %return, !dbg !7098

return:                                           ; preds = %if.end73, %cond.end67, %for.end, %cond.end47, %if.then33, %cond.end, %if.then15, %if.then11, %if.then3, %if.then
  %26 = load i8, i8* %retval, align 1, !dbg !7099
  ret i8 %26, !dbg !7099
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_volatile_ops(%union.gimple_statement_d* %stmt) #0 !dbg !7100 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !7101, metadata !DIExpression()), !dbg !7102
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7103
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !7105
  %tobool = icmp ne i8 %call, 0, !dbg !7105
  br i1 %tobool, label %if.then, label %if.else, !dbg !7106

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7107
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !7108
  %2 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !7109
  %bf.load = load i32, i32* %2, align 8, !dbg !7109
  %bf.lshr = lshr i32 %bf.load, 14, !dbg !7109
  %bf.clear = and i32 %bf.lshr, 1, !dbg !7109
  %conv = trunc i32 %bf.clear to i8, !dbg !7107
  store i8 %conv, i8* %retval, align 1, !dbg !7110
  br label %return, !dbg !7110

if.else:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !7111
  br label %return, !dbg !7111

return:                                           ; preds = %if.else, %if.then
  %3 = load i8, i8* %retval, align 1, !dbg !7112
  ret i8 %3, !dbg !7112
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !7113 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7114, metadata !DIExpression()), !dbg !7115
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !7116, metadata !DIExpression()), !dbg !7117
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7118
  %1 = load i32, i32* %index.addr, align 4, !dbg !7119
  %add = add i32 %1, 3, !dbg !7120
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 %add), !dbg !7121
  ret %union.tree_node* %call, !dbg !7122
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @gimple_rhs_has_side_effects(%union.gimple_statement_d* %s) #0 !dbg !7123 {
entry:
  %retval = alloca i8, align 1
  %s.addr = alloca %union.gimple_statement_d*, align 8
  %i = alloca i32, align 4
  %nargs = alloca i32, align 4
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !7124, metadata !DIExpression()), !dbg !7125
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7126, metadata !DIExpression()), !dbg !7127
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !7128
  %call = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %0), !dbg !7130
  %tobool = icmp ne i8 %call, 0, !dbg !7130
  br i1 %tobool, label %if.then, label %if.else, !dbg !7131

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %nargs, metadata !7132, metadata !DIExpression()), !dbg !7134
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !7135
  %call1 = call i32 @gimple_call_num_args(%union.gimple_statement_d* %1), !dbg !7136
  store i32 %call1, i32* %nargs, align 4, !dbg !7134
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !7137
  %call2 = call i32 @gimple_call_flags(%union.gimple_statement_d* %2), !dbg !7139
  %and = and i32 %call2, 3, !dbg !7140
  %tobool3 = icmp ne i32 %and, 0, !dbg !7140
  br i1 %tobool3, label %if.end, label %if.then4, !dbg !7141

if.then4:                                         ; preds = %if.then
  store i8 1, i8* %retval, align 1, !dbg !7142
  br label %return, !dbg !7142

if.end:                                           ; preds = %if.then
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !7143
  %call5 = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %3), !dbg !7143
  %base = bitcast %union.tree_node* %call5 to %struct.tree_base*, !dbg !7143
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !7143
  %bf.load = load i64, i64* %4, align 8, !dbg !7143
  %bf.lshr = lshr i64 %bf.load, 16, !dbg !7143
  %bf.clear = and i64 %bf.lshr, 1, !dbg !7143
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7143
  %tobool6 = icmp ne i32 %bf.cast, 0, !dbg !7143
  br i1 %tobool6, label %if.then14, label %lor.lhs.false, !dbg !7145

lor.lhs.false:                                    ; preds = %if.end
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !7146
  %call7 = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %5), !dbg !7146
  %base8 = bitcast %union.tree_node* %call7 to %struct.tree_base*, !dbg !7146
  %6 = bitcast %struct.tree_base* %base8 to i64*, !dbg !7146
  %bf.load9 = load i64, i64* %6, align 8, !dbg !7146
  %bf.lshr10 = lshr i64 %bf.load9, 19, !dbg !7146
  %bf.clear11 = and i64 %bf.lshr10, 1, !dbg !7146
  %bf.cast12 = trunc i64 %bf.clear11 to i32, !dbg !7146
  %tobool13 = icmp ne i32 %bf.cast12, 0, !dbg !7146
  br i1 %tobool13, label %if.then14, label %if.end17, !dbg !7147

if.then14:                                        ; preds = %lor.lhs.false, %if.end
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !7148
  %call15 = call zeroext i8 @gimple_has_volatile_ops(%union.gimple_statement_d* %7), !dbg !7148
  %tobool16 = icmp ne i8 %call15, 0, !dbg !7148
  br i1 %tobool16, label %cond.false, label %cond.true, !dbg !7148

cond.true:                                        ; preds = %if.then14
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 2230, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !7148
  br label %cond.end, !dbg !7148

cond.false:                                       ; preds = %if.then14
  br label %cond.end, !dbg !7148

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7148
  store i8 1, i8* %retval, align 1, !dbg !7150
  br label %return, !dbg !7150

if.end17:                                         ; preds = %lor.lhs.false
  store i32 0, i32* %i, align 4, !dbg !7151
  br label %for.cond, !dbg !7153

for.cond:                                         ; preds = %for.inc, %if.end17
  %8 = load i32, i32* %i, align 4, !dbg !7154
  %9 = load i32, i32* %nargs, align 4, !dbg !7156
  %cmp = icmp ult i32 %8, %9, !dbg !7157
  br i1 %cmp, label %for.body, label %for.end, !dbg !7158

for.body:                                         ; preds = %for.cond
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !7159
  %11 = load i32, i32* %i, align 4, !dbg !7159
  %call18 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %10, i32 %11), !dbg !7159
  %base19 = bitcast %union.tree_node* %call18 to %struct.tree_base*, !dbg !7159
  %12 = bitcast %struct.tree_base* %base19 to i64*, !dbg !7159
  %bf.load20 = load i64, i64* %12, align 8, !dbg !7159
  %bf.lshr21 = lshr i64 %bf.load20, 16, !dbg !7159
  %bf.clear22 = and i64 %bf.lshr21, 1, !dbg !7159
  %bf.cast23 = trunc i64 %bf.clear22 to i32, !dbg !7159
  %tobool24 = icmp ne i32 %bf.cast23, 0, !dbg !7159
  br i1 %tobool24, label %if.then33, label %lor.lhs.false25, !dbg !7161

lor.lhs.false25:                                  ; preds = %for.body
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !7162
  %14 = load i32, i32* %i, align 4, !dbg !7162
  %call26 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %13, i32 %14), !dbg !7162
  %base27 = bitcast %union.tree_node* %call26 to %struct.tree_base*, !dbg !7162
  %15 = bitcast %struct.tree_base* %base27 to i64*, !dbg !7162
  %bf.load28 = load i64, i64* %15, align 8, !dbg !7162
  %bf.lshr29 = lshr i64 %bf.load28, 19, !dbg !7162
  %bf.clear30 = and i64 %bf.lshr29, 1, !dbg !7162
  %bf.cast31 = trunc i64 %bf.clear30 to i32, !dbg !7162
  %tobool32 = icmp ne i32 %bf.cast31, 0, !dbg !7162
  br i1 %tobool32, label %if.then33, label %if.end34, !dbg !7163

if.then33:                                        ; preds = %lor.lhs.false25, %for.body
  store i8 1, i8* %retval, align 1, !dbg !7164
  br label %return, !dbg !7164

if.end34:                                         ; preds = %lor.lhs.false25
  br label %for.inc, !dbg !7162

for.inc:                                          ; preds = %if.end34
  %16 = load i32, i32* %i, align 4, !dbg !7165
  %inc = add i32 %16, 1, !dbg !7165
  store i32 %inc, i32* %i, align 4, !dbg !7165
  br label %for.cond, !dbg !7166, !llvm.loop !7167

for.end:                                          ; preds = %for.cond
  store i8 0, i8* %retval, align 1, !dbg !7169
  br label %return, !dbg !7169

if.else:                                          ; preds = %entry
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !7170
  %call35 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %17), !dbg !7172
  %tobool36 = icmp ne i8 %call35, 0, !dbg !7172
  br i1 %tobool36, label %if.then37, label %if.else68, !dbg !7173

if.then37:                                        ; preds = %if.else
  store i32 1, i32* %i, align 4, !dbg !7174
  br label %for.cond38, !dbg !7177

for.cond38:                                       ; preds = %for.inc65, %if.then37
  %18 = load i32, i32* %i, align 4, !dbg !7178
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !7180
  %call39 = call i32 @gimple_num_ops(%union.gimple_statement_d* %19), !dbg !7181
  %cmp40 = icmp ult i32 %18, %call39, !dbg !7182
  br i1 %cmp40, label %for.body41, label %for.end67, !dbg !7183

for.body41:                                       ; preds = %for.cond38
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !7184
  %21 = load i32, i32* %i, align 4, !dbg !7184
  %call42 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %20, i32 %21), !dbg !7184
  %base43 = bitcast %union.tree_node* %call42 to %struct.tree_base*, !dbg !7184
  %22 = bitcast %struct.tree_base* %base43 to i64*, !dbg !7184
  %bf.load44 = load i64, i64* %22, align 8, !dbg !7184
  %bf.lshr45 = lshr i64 %bf.load44, 16, !dbg !7184
  %bf.clear46 = and i64 %bf.lshr45, 1, !dbg !7184
  %bf.cast47 = trunc i64 %bf.clear46 to i32, !dbg !7184
  %tobool48 = icmp ne i32 %bf.cast47, 0, !dbg !7184
  br i1 %tobool48, label %if.then57, label %lor.lhs.false49, !dbg !7186

lor.lhs.false49:                                  ; preds = %for.body41
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !7187
  %24 = load i32, i32* %i, align 4, !dbg !7187
  %call50 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %23, i32 %24), !dbg !7187
  %base51 = bitcast %union.tree_node* %call50 to %struct.tree_base*, !dbg !7187
  %25 = bitcast %struct.tree_base* %base51 to i64*, !dbg !7187
  %bf.load52 = load i64, i64* %25, align 8, !dbg !7187
  %bf.lshr53 = lshr i64 %bf.load52, 19, !dbg !7187
  %bf.clear54 = and i64 %bf.lshr53, 1, !dbg !7187
  %bf.cast55 = trunc i64 %bf.clear54 to i32, !dbg !7187
  %tobool56 = icmp ne i32 %bf.cast55, 0, !dbg !7187
  br i1 %tobool56, label %if.then57, label %if.end64, !dbg !7188

if.then57:                                        ; preds = %lor.lhs.false49, %for.body41
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !7189
  %call58 = call zeroext i8 @gimple_has_volatile_ops(%union.gimple_statement_d* %26), !dbg !7189
  %tobool59 = icmp ne i8 %call58, 0, !dbg !7189
  br i1 %tobool59, label %cond.false61, label %cond.true60, !dbg !7189

cond.true60:                                      ; preds = %if.then57
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 2248, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !7189
  br label %cond.end62, !dbg !7189

cond.false61:                                     ; preds = %if.then57
  br label %cond.end62, !dbg !7189

cond.end62:                                       ; preds = %cond.false61, %cond.true60
  %cond63 = phi i32 [ 0, %cond.true60 ], [ 0, %cond.false61 ], !dbg !7189
  store i8 1, i8* %retval, align 1, !dbg !7191
  br label %return, !dbg !7191

if.end64:                                         ; preds = %lor.lhs.false49
  br label %for.inc65, !dbg !7187

for.inc65:                                        ; preds = %if.end64
  %27 = load i32, i32* %i, align 4, !dbg !7192
  %inc66 = add i32 %27, 1, !dbg !7192
  store i32 %inc66, i32* %i, align 4, !dbg !7192
  br label %for.cond38, !dbg !7193, !llvm.loop !7194

for.end67:                                        ; preds = %for.cond38
  br label %if.end104, !dbg !7196

if.else68:                                        ; preds = %if.else
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !7197
  %call69 = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %28), !dbg !7199
  %tobool70 = icmp ne i8 %call69, 0, !dbg !7199
  br i1 %tobool70, label %if.then71, label %if.else72, !dbg !7200

if.then71:                                        ; preds = %if.else68
  store i8 0, i8* %retval, align 1, !dbg !7201
  br label %return, !dbg !7201

if.else72:                                        ; preds = %if.else68
  store i32 0, i32* %i, align 4, !dbg !7202
  br label %for.cond73, !dbg !7205

for.cond73:                                       ; preds = %for.inc100, %if.else72
  %29 = load i32, i32* %i, align 4, !dbg !7206
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !7208
  %call74 = call i32 @gimple_num_ops(%union.gimple_statement_d* %30), !dbg !7209
  %cmp75 = icmp ult i32 %29, %call74, !dbg !7210
  br i1 %cmp75, label %for.body76, label %for.end102, !dbg !7211

for.body76:                                       ; preds = %for.cond73
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !7212
  %32 = load i32, i32* %i, align 4, !dbg !7212
  %call77 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %31, i32 %32), !dbg !7212
  %base78 = bitcast %union.tree_node* %call77 to %struct.tree_base*, !dbg !7212
  %33 = bitcast %struct.tree_base* %base78 to i64*, !dbg !7212
  %bf.load79 = load i64, i64* %33, align 8, !dbg !7212
  %bf.lshr80 = lshr i64 %bf.load79, 16, !dbg !7212
  %bf.clear81 = and i64 %bf.lshr80, 1, !dbg !7212
  %bf.cast82 = trunc i64 %bf.clear81 to i32, !dbg !7212
  %tobool83 = icmp ne i32 %bf.cast82, 0, !dbg !7212
  br i1 %tobool83, label %if.then92, label %lor.lhs.false84, !dbg !7214

lor.lhs.false84:                                  ; preds = %for.body76
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !7215
  %35 = load i32, i32* %i, align 4, !dbg !7215
  %call85 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %34, i32 %35), !dbg !7215
  %base86 = bitcast %union.tree_node* %call85 to %struct.tree_base*, !dbg !7215
  %36 = bitcast %struct.tree_base* %base86 to i64*, !dbg !7215
  %bf.load87 = load i64, i64* %36, align 8, !dbg !7215
  %bf.lshr88 = lshr i64 %bf.load87, 19, !dbg !7215
  %bf.clear89 = and i64 %bf.lshr88, 1, !dbg !7215
  %bf.cast90 = trunc i64 %bf.clear89 to i32, !dbg !7215
  %tobool91 = icmp ne i32 %bf.cast90, 0, !dbg !7215
  br i1 %tobool91, label %if.then92, label %if.end99, !dbg !7216

if.then92:                                        ; preds = %lor.lhs.false84, %for.body76
  %37 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !7217
  %call93 = call zeroext i8 @gimple_has_volatile_ops(%union.gimple_statement_d* %37), !dbg !7217
  %tobool94 = icmp ne i8 %call93, 0, !dbg !7217
  br i1 %tobool94, label %cond.false96, label %cond.true95, !dbg !7217

cond.true95:                                      ; preds = %if.then92
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 2261, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !7217
  br label %cond.end97, !dbg !7217

cond.false96:                                     ; preds = %if.then92
  br label %cond.end97, !dbg !7217

cond.end97:                                       ; preds = %cond.false96, %cond.true95
  %cond98 = phi i32 [ 0, %cond.true95 ], [ 0, %cond.false96 ], !dbg !7217
  store i8 1, i8* %retval, align 1, !dbg !7219
  br label %return, !dbg !7219

if.end99:                                         ; preds = %lor.lhs.false84
  br label %for.inc100, !dbg !7215

for.inc100:                                       ; preds = %if.end99
  %38 = load i32, i32* %i, align 4, !dbg !7220
  %inc101 = add i32 %38, 1, !dbg !7220
  store i32 %inc101, i32* %i, align 4, !dbg !7220
  br label %for.cond73, !dbg !7221, !llvm.loop !7222

for.end102:                                       ; preds = %for.cond73
  br label %if.end103

if.end103:                                        ; preds = %for.end102
  br label %if.end104

if.end104:                                        ; preds = %if.end103, %for.end67
  br label %if.end105

if.end105:                                        ; preds = %if.end104
  store i8 0, i8* %retval, align 1, !dbg !7224
  br label %return, !dbg !7224

return:                                           ; preds = %if.end105, %cond.end97, %if.then71, %cond.end62, %for.end, %if.then33, %cond.end, %if.then4
  %39 = load i8, i8* %retval, align 1, !dbg !7225
  ret i8 %39, !dbg !7225
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %gs) #0 !dbg !7226 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7227, metadata !DIExpression()), !dbg !7228
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7229
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !7230
  %cmp = icmp eq i32 %call, 6, !dbg !7231
  %conv = zext i1 %cmp to i32, !dbg !7231
  %conv1 = trunc i32 %conv to i8, !dbg !7230
  ret i8 %conv1, !dbg !7232
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @gimple_could_trap_p(%union.gimple_statement_d* %s) #0 !dbg !7233 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !7234, metadata !DIExpression()), !dbg !7235
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !7236
  %call = call zeroext i8 @gimple_could_trap_p_1(%union.gimple_statement_d* %0, i8 zeroext 1), !dbg !7237
  ret i8 %call, !dbg !7238
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_could_trap_p_1(%union.gimple_statement_d* %s, i8 zeroext %include_lhs) #0 !dbg !7239 {
entry:
  %retval = alloca i8, align 1
  %s.addr = alloca %union.gimple_statement_d*, align 8
  %include_lhs.addr = alloca i8, align 1
  %i = alloca i32, align 4
  %start = alloca i32, align 4
  %t = alloca %union.tree_node*, align 8
  %div = alloca %union.tree_node*, align 8
  %op = alloca i32, align 4
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !7242, metadata !DIExpression()), !dbg !7243
  store i8 %include_lhs, i8* %include_lhs.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %include_lhs.addr, metadata !7244, metadata !DIExpression()), !dbg !7245
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7246, metadata !DIExpression()), !dbg !7247
  call void @llvm.dbg.declare(metadata i32* %start, metadata !7248, metadata !DIExpression()), !dbg !7249
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !7250, metadata !DIExpression()), !dbg !7251
  call void @llvm.dbg.declare(metadata %union.tree_node** %div, metadata !7252, metadata !DIExpression()), !dbg !7253
  store %union.tree_node* null, %union.tree_node** %div, align 8, !dbg !7253
  call void @llvm.dbg.declare(metadata i32* %op, metadata !7254, metadata !DIExpression()), !dbg !7255
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !7256
  %call = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %0), !dbg !7257
  %conv = zext i8 %call to i32, !dbg !7257
  %tobool = icmp ne i32 %conv, 0, !dbg !7257
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !7258

land.rhs:                                         ; preds = %entry
  %1 = load i8, i8* %include_lhs.addr, align 1, !dbg !7259
  %tobool1 = icmp ne i8 %1, 0, !dbg !7260
  %lnot = xor i1 %tobool1, true, !dbg !7260
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %lnot, %land.rhs ], !dbg !7261
  %3 = zext i1 %2 to i64, !dbg !7262
  %cond = select i1 %2, i32 1, i32 0, !dbg !7262
  store i32 %cond, i32* %start, align 4, !dbg !7263
  %4 = load i32, i32* %start, align 4, !dbg !7264
  store i32 %4, i32* %i, align 4, !dbg !7266
  br label %for.cond, !dbg !7267

for.cond:                                         ; preds = %for.inc, %land.end
  %5 = load i32, i32* %i, align 4, !dbg !7268
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !7270
  %call2 = call i32 @gimple_num_ops(%union.gimple_statement_d* %6), !dbg !7271
  %cmp = icmp ult i32 %5, %call2, !dbg !7272
  br i1 %cmp, label %for.body, label %for.end, !dbg !7273

for.body:                                         ; preds = %for.cond
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !7274
  %8 = load i32, i32* %i, align 4, !dbg !7276
  %call4 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %7, i32 %8), !dbg !7277
  %call5 = call zeroext i8 @tree_could_trap_p(%union.tree_node* %call4), !dbg !7278
  %tobool6 = icmp ne i8 %call5, 0, !dbg !7278
  br i1 %tobool6, label %if.then, label %if.end, !dbg !7279

if.then:                                          ; preds = %for.body
  store i8 1, i8* %retval, align 1, !dbg !7280
  br label %return, !dbg !7280

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !7281

for.inc:                                          ; preds = %if.end
  %9 = load i32, i32* %i, align 4, !dbg !7282
  %inc = add i32 %9, 1, !dbg !7282
  store i32 %inc, i32* %i, align 4, !dbg !7282
  br label %for.cond, !dbg !7283, !llvm.loop !7284

for.end:                                          ; preds = %for.cond
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !7286
  %call7 = call i32 @gimple_code(%union.gimple_statement_d* %10), !dbg !7287
  switch i32 %call7, label %sw.default [
    i32 7, label %sw.bb
    i32 8, label %sw.bb9
    i32 6, label %sw.bb20
  ], !dbg !7288

sw.bb:                                            ; preds = %for.end
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !7289
  %call8 = call zeroext i8 @gimple_asm_volatile_p(%union.gimple_statement_d* %11), !dbg !7291
  store i8 %call8, i8* %retval, align 1, !dbg !7292
  br label %return, !dbg !7292

sw.bb9:                                           ; preds = %for.end
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !7293
  %call10 = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %12), !dbg !7294
  store %union.tree_node* %call10, %union.tree_node** %t, align 8, !dbg !7295
  %13 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7296
  %tobool11 = icmp ne %union.tree_node* %13, null, !dbg !7296
  br i1 %tobool11, label %lor.lhs.false, label %if.then18, !dbg !7298

lor.lhs.false:                                    ; preds = %sw.bb9
  %14 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7299
  %base = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !7299
  %15 = bitcast %struct.tree_base* %base to i64*, !dbg !7299
  %bf.load = load i64, i64* %15, align 8, !dbg !7299
  %bf.clear = and i64 %bf.load, 65535, !dbg !7299
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7299
  %idxprom = sext i32 %bf.cast to i64, !dbg !7299
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !7299
  %16 = load i32, i32* %arrayidx, align 4, !dbg !7299
  %cmp12 = icmp eq i32 %16, 3, !dbg !7299
  br i1 %cmp12, label %lor.lhs.false14, label %if.then18, !dbg !7300

lor.lhs.false14:                                  ; preds = %lor.lhs.false
  %17 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7301
  %decl_with_vis = bitcast %union.tree_node* %17 to %struct.tree_decl_with_vis*, !dbg !7301
  %weak_flag = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 4, !dbg !7301
  %18 = bitcast i24* %weak_flag to i32*, !dbg !7301
  %bf.load15 = load i32, i32* %18, align 8, !dbg !7301
  %bf.lshr = lshr i32 %bf.load15, 7, !dbg !7301
  %bf.clear16 = and i32 %bf.lshr, 1, !dbg !7301
  %tobool17 = icmp ne i32 %bf.clear16, 0, !dbg !7301
  br i1 %tobool17, label %if.then18, label %if.end19, !dbg !7302

if.then18:                                        ; preds = %lor.lhs.false14, %lor.lhs.false, %sw.bb9
  store i8 1, i8* %retval, align 1, !dbg !7303
  br label %return, !dbg !7303

if.end19:                                         ; preds = %lor.lhs.false14
  store i8 0, i8* %retval, align 1, !dbg !7304
  br label %return, !dbg !7304

sw.bb20:                                          ; preds = %for.end
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !7305
  %call21 = call %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %19), !dbg !7306
  store %union.tree_node* %call21, %union.tree_node** %t, align 8, !dbg !7307
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !7308
  %call22 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %20), !dbg !7309
  store i32 %call22, i32* %op, align 4, !dbg !7310
  %21 = load i32, i32* %op, align 4, !dbg !7311
  %call23 = call i32 @get_gimple_rhs_class(i32 %21), !dbg !7313
  %cmp24 = icmp eq i32 %call23, 1, !dbg !7314
  br i1 %cmp24, label %if.then26, label %if.end28, !dbg !7315

if.then26:                                        ; preds = %sw.bb20
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !7316
  %call27 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %22), !dbg !7317
  store %union.tree_node* %call27, %union.tree_node** %div, align 8, !dbg !7318
  br label %if.end28, !dbg !7319

if.end28:                                         ; preds = %if.then26, %sw.bb20
  %23 = load i32, i32* %op, align 4, !dbg !7320
  %24 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7321
  %base29 = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !7321
  %25 = bitcast %struct.tree_base* %base29 to i64*, !dbg !7321
  %bf.load30 = load i64, i64* %25, align 8, !dbg !7321
  %bf.clear31 = and i64 %bf.load30, 65535, !dbg !7321
  %bf.cast32 = trunc i64 %bf.clear31 to i32, !dbg !7321
  %cmp33 = icmp eq i32 %bf.cast32, 9, !dbg !7321
  br i1 %cmp33, label %lor.end, label %lor.rhs, !dbg !7321

lor.rhs:                                          ; preds = %if.end28
  %26 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7321
  %base35 = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !7321
  %27 = bitcast %struct.tree_base* %base35 to i64*, !dbg !7321
  %bf.load36 = load i64, i64* %27, align 8, !dbg !7321
  %bf.clear37 = and i64 %bf.load36, 65535, !dbg !7321
  %bf.cast38 = trunc i64 %bf.clear37 to i32, !dbg !7321
  %cmp39 = icmp eq i32 %bf.cast38, 13, !dbg !7321
  br i1 %cmp39, label %land.rhs48, label %lor.lhs.false41, !dbg !7321

lor.lhs.false41:                                  ; preds = %lor.rhs
  %28 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7321
  %base42 = bitcast %union.tree_node* %28 to %struct.tree_base*, !dbg !7321
  %29 = bitcast %struct.tree_base* %base42 to i64*, !dbg !7321
  %bf.load43 = load i64, i64* %29, align 8, !dbg !7321
  %bf.clear44 = and i64 %bf.load43, 65535, !dbg !7321
  %bf.cast45 = trunc i64 %bf.clear44 to i32, !dbg !7321
  %cmp46 = icmp eq i32 %bf.cast45, 14, !dbg !7321
  br i1 %cmp46, label %land.rhs48, label %land.end55, !dbg !7321

land.rhs48:                                       ; preds = %lor.lhs.false41, %lor.rhs
  %30 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7321
  %common = bitcast %union.tree_node* %30 to %struct.tree_common*, !dbg !7321
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7321
  %31 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7321
  %base49 = bitcast %union.tree_node* %31 to %struct.tree_base*, !dbg !7321
  %32 = bitcast %struct.tree_base* %base49 to i64*, !dbg !7321
  %bf.load50 = load i64, i64* %32, align 8, !dbg !7321
  %bf.clear51 = and i64 %bf.load50, 65535, !dbg !7321
  %bf.cast52 = trunc i64 %bf.clear51 to i32, !dbg !7321
  %cmp53 = icmp eq i32 %bf.cast52, 9, !dbg !7321
  br label %land.end55

land.end55:                                       ; preds = %land.rhs48, %lor.lhs.false41
  %33 = phi i1 [ false, %lor.lhs.false41 ], [ %cmp53, %land.rhs48 ], !dbg !7322
  br label %lor.end, !dbg !7321

lor.end:                                          ; preds = %land.end55, %if.end28
  %34 = phi i1 [ true, %if.end28 ], [ %33, %land.end55 ]
  %lor.ext = zext i1 %34 to i32, !dbg !7321
  %conv56 = trunc i32 %lor.ext to i8, !dbg !7321
  %35 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7323
  %base57 = bitcast %union.tree_node* %35 to %struct.tree_base*, !dbg !7323
  %36 = bitcast %struct.tree_base* %base57 to i64*, !dbg !7323
  %bf.load58 = load i64, i64* %36, align 8, !dbg !7323
  %bf.clear59 = and i64 %bf.load58, 65535, !dbg !7323
  %bf.cast60 = trunc i64 %bf.clear59 to i32, !dbg !7323
  %cmp61 = icmp eq i32 %bf.cast60, 6, !dbg !7323
  br i1 %cmp61, label %land.rhs77, label %lor.lhs.false63, !dbg !7323

lor.lhs.false63:                                  ; preds = %lor.end
  %37 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7323
  %base64 = bitcast %union.tree_node* %37 to %struct.tree_base*, !dbg !7323
  %38 = bitcast %struct.tree_base* %base64 to i64*, !dbg !7323
  %bf.load65 = load i64, i64* %38, align 8, !dbg !7323
  %bf.clear66 = and i64 %bf.load65, 65535, !dbg !7323
  %bf.cast67 = trunc i64 %bf.clear66 to i32, !dbg !7323
  %cmp68 = icmp eq i32 %bf.cast67, 7, !dbg !7323
  br i1 %cmp68, label %land.rhs77, label %lor.lhs.false70, !dbg !7323

lor.lhs.false70:                                  ; preds = %lor.lhs.false63
  %39 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7323
  %base71 = bitcast %union.tree_node* %39 to %struct.tree_base*, !dbg !7323
  %40 = bitcast %struct.tree_base* %base71 to i64*, !dbg !7323
  %bf.load72 = load i64, i64* %40, align 8, !dbg !7323
  %bf.clear73 = and i64 %bf.load72, 65535, !dbg !7323
  %bf.cast74 = trunc i64 %bf.clear73 to i32, !dbg !7323
  %cmp75 = icmp eq i32 %bf.cast74, 8, !dbg !7323
  br i1 %cmp75, label %land.rhs77, label %land.end87, !dbg !7324

land.rhs77:                                       ; preds = %lor.lhs.false70, %lor.lhs.false63, %lor.end
  %41 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7325
  %base78 = bitcast %union.tree_node* %41 to %struct.tree_base*, !dbg !7325
  %42 = bitcast %struct.tree_base* %base78 to i64*, !dbg !7325
  %bf.load79 = load i64, i64* %42, align 8, !dbg !7325
  %bf.lshr80 = lshr i64 %bf.load79, 21, !dbg !7325
  %bf.clear81 = and i64 %bf.lshr80, 1, !dbg !7325
  %bf.cast82 = trunc i64 %bf.clear81 to i32, !dbg !7325
  %tobool83 = icmp ne i32 %bf.cast82, 0, !dbg !7325
  br i1 %tobool83, label %land.end86, label %land.rhs84, !dbg !7325

land.rhs84:                                       ; preds = %land.rhs77
  %43 = load i32, i32* @flag_trapv, align 4, !dbg !7325
  %tobool85 = icmp ne i32 %43, 0, !dbg !7325
  br label %land.end86

land.end86:                                       ; preds = %land.rhs84, %land.rhs77
  %44 = phi i1 [ false, %land.rhs77 ], [ %tobool85, %land.rhs84 ], !dbg !7322
  br label %land.end87

land.end87:                                       ; preds = %land.end86, %lor.lhs.false70
  %45 = phi i1 [ false, %lor.lhs.false70 ], [ %44, %land.end86 ], !dbg !7322
  %land.ext = zext i1 %45 to i32, !dbg !7324
  %conv88 = trunc i32 %land.ext to i8, !dbg !7326
  %46 = load %union.tree_node*, %union.tree_node** %div, align 8, !dbg !7327
  %call89 = call zeroext i8 @operation_could_trap_p(i32 %23, i8 zeroext %conv56, i8 zeroext %conv88, %union.tree_node* %46), !dbg !7328
  store i8 %call89, i8* %retval, align 1, !dbg !7329
  br label %return, !dbg !7329

sw.default:                                       ; preds = %for.end
  br label %sw.epilog, !dbg !7330

sw.epilog:                                        ; preds = %sw.default
  store i8 0, i8* %retval, align 1, !dbg !7331
  br label %return, !dbg !7331

return:                                           ; preds = %sw.epilog, %land.end87, %if.end19, %if.then18, %sw.bb, %if.then
  %47 = load i8, i8* %retval, align 1, !dbg !7332
  ret i8 %47, !dbg !7332
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @gimple_assign_rhs_could_trap_p(%union.gimple_statement_d* %s) #0 !dbg !7333 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !7334, metadata !DIExpression()), !dbg !7335
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !7336
  %call = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %0), !dbg !7336
  %tobool = icmp ne i8 %call, 0, !dbg !7336
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !7336

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 2333, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !7336
  br label %cond.end, !dbg !7336

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7336

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7336
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !7337
  %call1 = call zeroext i8 @gimple_could_trap_p_1(%union.gimple_statement_d* %1, i8 zeroext 0), !dbg !7338
  ret i8 %call1, !dbg !7339
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @dump_gimple_statistics() #0 !dbg !7340 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !7343
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.37, i64 0, i64 0)), !dbg !7344
  ret void, !dbg !7345
}

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @is_gimple_operand(%union.tree_node* %op) #0 !dbg !7346 {
entry:
  %op.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !7347, metadata !DIExpression()), !dbg !7348
  %0 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !7349
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !7349
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !7350

land.rhs:                                         ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !7351
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !7351
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !7351
  %bf.load = load i64, i64* %2, align 8, !dbg !7351
  %bf.clear = and i64 %bf.load, 65535, !dbg !7351
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7351
  %call = call i32 @get_gimple_rhs_class(i32 %bf.cast), !dbg !7352
  %cmp = icmp eq i32 %call, 3, !dbg !7353
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %3 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !7354
  %land.ext = zext i1 %3 to i32, !dbg !7350
  %conv = trunc i32 %land.ext to i8, !dbg !7349
  ret i8 %conv, !dbg !7355
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @is_gimple_reg_rhs(%union.tree_node* %t) #0 !dbg !7356 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !7357, metadata !DIExpression()), !dbg !7358
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7359
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !7359
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !7359
  %bf.load = load i64, i64* %1, align 8, !dbg !7359
  %bf.clear = and i64 %bf.load, 65535, !dbg !7359
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7359
  %call = call i32 @get_gimple_rhs_class(i32 %bf.cast), !dbg !7360
  %cmp = icmp ne i32 %call, 0, !dbg !7361
  %conv = zext i1 %cmp to i32, !dbg !7361
  %conv1 = trunc i32 %conv to i8, !dbg !7360
  ret i8 %conv1, !dbg !7362
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @is_gimple_reg_type(%union.tree_node* %type) #0 !dbg !7363 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !7364, metadata !DIExpression()), !dbg !7365
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7366
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !7366
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !7366
  %bf.load = load i64, i64* %1, align 8, !dbg !7366
  %bf.clear = and i64 %bf.load, 65535, !dbg !7366
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7366
  %cmp = icmp eq i32 %bf.cast, 15, !dbg !7366
  br i1 %cmp, label %lor.end17, label %lor.rhs, !dbg !7366

lor.rhs:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7366
  %base1 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !7366
  %3 = bitcast %struct.tree_base* %base1 to i64*, !dbg !7366
  %bf.load2 = load i64, i64* %3, align 8, !dbg !7366
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !7366
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !7366
  %cmp5 = icmp eq i32 %bf.cast4, 16, !dbg !7366
  br i1 %cmp5, label %lor.end, label %lor.lhs.false, !dbg !7366

lor.lhs.false:                                    ; preds = %lor.rhs
  %4 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7366
  %base6 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !7366
  %5 = bitcast %struct.tree_base* %base6 to i64*, !dbg !7366
  %bf.load7 = load i64, i64* %5, align 8, !dbg !7366
  %bf.clear8 = and i64 %bf.load7, 65535, !dbg !7366
  %bf.cast9 = trunc i64 %bf.clear8 to i32, !dbg !7366
  %cmp10 = icmp eq i32 %bf.cast9, 17, !dbg !7366
  br i1 %cmp10, label %lor.end, label %lor.rhs11, !dbg !7366

lor.rhs11:                                        ; preds = %lor.lhs.false
  %6 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7366
  %base12 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !7366
  %7 = bitcast %struct.tree_base* %base12 to i64*, !dbg !7366
  %bf.load13 = load i64, i64* %7, align 8, !dbg !7366
  %bf.clear14 = and i64 %bf.load13, 65535, !dbg !7366
  %bf.cast15 = trunc i64 %bf.clear14 to i32, !dbg !7366
  %cmp16 = icmp eq i32 %bf.cast15, 18, !dbg !7366
  br label %lor.end, !dbg !7366

lor.end:                                          ; preds = %lor.rhs11, %lor.lhs.false, %lor.rhs
  %8 = phi i1 [ true, %lor.lhs.false ], [ true, %lor.rhs ], [ %cmp16, %lor.rhs11 ]
  br label %lor.end17, !dbg !7366

lor.end17:                                        ; preds = %lor.end, %entry
  %9 = phi i1 [ true, %entry ], [ %8, %lor.end ]
  %lnot = xor i1 %9, true, !dbg !7367
  %lnot.ext = zext i1 %lnot to i32, !dbg !7367
  %conv = trunc i32 %lnot.ext to i8, !dbg !7367
  ret i8 %conv, !dbg !7368
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @is_gimple_lvalue(%union.tree_node* %t) #0 !dbg !7369 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !7370, metadata !DIExpression()), !dbg !7371
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7372
  %call = call zeroext i8 @is_gimple_addressable(%union.tree_node* %0), !dbg !7373
  %conv = zext i8 %call to i32, !dbg !7373
  %tobool = icmp ne i32 %conv, 0, !dbg !7373
  br i1 %tobool, label %lor.end, label %lor.lhs.false, !dbg !7374

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7375
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !7375
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !7375
  %bf.load = load i64, i64* %2, align 8, !dbg !7375
  %bf.clear = and i64 %bf.load, 65535, !dbg !7375
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7375
  %cmp = icmp eq i32 %bf.cast, 150, !dbg !7376
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !7377

lor.rhs:                                          ; preds = %lor.lhs.false
  %3 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7378
  %base2 = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !7378
  %4 = bitcast %struct.tree_base* %base2 to i64*, !dbg !7378
  %bf.load3 = load i64, i64* %4, align 8, !dbg !7378
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !7378
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !7378
  %cmp6 = icmp eq i32 %bf.cast5, 42, !dbg !7379
  br label %lor.end, !dbg !7377

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %entry
  %5 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %cmp6, %lor.rhs ]
  %lor.ext = zext i1 %5 to i32, !dbg !7377
  %conv8 = trunc i32 %lor.ext to i8, !dbg !7380
  ret i8 %conv8, !dbg !7381
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @is_gimple_addressable(%union.tree_node* %t) #0 !dbg !7382 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !7383, metadata !DIExpression()), !dbg !7384
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7385
  %call = call zeroext i8 @is_gimple_id(%union.tree_node* %0), !dbg !7386
  %conv = zext i8 %call to i32, !dbg !7386
  %tobool = icmp ne i32 %conv, 0, !dbg !7386
  br i1 %tobool, label %lor.end19, label %lor.lhs.false, !dbg !7387

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7388
  %call1 = call zeroext i8 @handled_component_p(%union.tree_node* %1), !dbg !7389
  %conv2 = zext i8 %call1 to i32, !dbg !7389
  %tobool3 = icmp ne i32 %conv2, 0, !dbg !7389
  br i1 %tobool3, label %lor.end19, label %lor.rhs, !dbg !7390

lor.rhs:                                          ; preds = %lor.lhs.false
  %2 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7391
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !7391
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !7391
  %bf.load = load i64, i64* %3, align 8, !dbg !7391
  %bf.clear = and i64 %bf.load, 65535, !dbg !7391
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7391
  %cmp = icmp eq i32 %bf.cast, 47, !dbg !7391
  br i1 %cmp, label %lor.end, label %lor.lhs.false5, !dbg !7391

lor.lhs.false5:                                   ; preds = %lor.rhs
  %4 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7391
  %base6 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !7391
  %5 = bitcast %struct.tree_base* %base6 to i64*, !dbg !7391
  %bf.load7 = load i64, i64* %5, align 8, !dbg !7391
  %bf.clear8 = and i64 %bf.load7, 65535, !dbg !7391
  %bf.cast9 = trunc i64 %bf.clear8 to i32, !dbg !7391
  %cmp10 = icmp eq i32 %bf.cast9, 48, !dbg !7391
  br i1 %cmp10, label %lor.end, label %lor.rhs12, !dbg !7391

lor.rhs12:                                        ; preds = %lor.lhs.false5
  %6 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7391
  %base13 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !7391
  %7 = bitcast %struct.tree_base* %base13 to i64*, !dbg !7391
  %bf.load14 = load i64, i64* %7, align 8, !dbg !7391
  %bf.clear15 = and i64 %bf.load14, 65535, !dbg !7391
  %bf.cast16 = trunc i64 %bf.clear15 to i32, !dbg !7391
  %cmp17 = icmp eq i32 %bf.cast16, 49, !dbg !7391
  br label %lor.end, !dbg !7391

lor.end:                                          ; preds = %lor.rhs12, %lor.lhs.false5, %lor.rhs
  %8 = phi i1 [ true, %lor.lhs.false5 ], [ true, %lor.rhs ], [ %cmp17, %lor.rhs12 ]
  br label %lor.end19, !dbg !7390

lor.end19:                                        ; preds = %lor.end, %lor.lhs.false, %entry
  %9 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %8, %lor.end ]
  %lor.ext = zext i1 %9 to i32, !dbg !7390
  %conv20 = trunc i32 %lor.ext to i8, !dbg !7392
  ret i8 %conv20, !dbg !7393
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @is_gimple_condexpr(%union.tree_node* %t) #0 !dbg !7394 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !7395, metadata !DIExpression()), !dbg !7396
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7397
  %call = call zeroext i8 @is_gimple_val(%union.tree_node* %0), !dbg !7398
  %conv = zext i8 %call to i32, !dbg !7398
  %tobool = icmp ne i32 %conv, 0, !dbg !7398
  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !7399

lor.rhs:                                          ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7400
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !7400
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !7400
  %bf.load = load i64, i64* %2, align 8, !dbg !7400
  %bf.clear = and i64 %bf.load, 65535, !dbg !7400
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7400
  %idxprom = sext i32 %bf.cast to i64, !dbg !7400
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !7400
  %3 = load i32, i32* %arrayidx, align 4, !dbg !7400
  %cmp = icmp eq i32 %3, 5, !dbg !7400
  br i1 %cmp, label %land.lhs.true, label %land.end, !dbg !7401

land.lhs.true:                                    ; preds = %lor.rhs
  %4 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7402
  %call2 = call zeroext i8 @tree_could_trap_p(%union.tree_node* %4), !dbg !7403
  %tobool3 = icmp ne i8 %call2, 0, !dbg !7403
  br i1 %tobool3, label %land.end, label %land.lhs.true4, !dbg !7404

land.lhs.true4:                                   ; preds = %land.lhs.true
  %5 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7405
  %exp = bitcast %union.tree_node* %5 to %struct.tree_exp*, !dbg !7405
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !7405
  %arrayidx5 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !7405
  %6 = load %union.tree_node*, %union.tree_node** %arrayidx5, align 8, !dbg !7405
  %call6 = call zeroext i8 @is_gimple_val(%union.tree_node* %6), !dbg !7406
  %conv7 = zext i8 %call6 to i32, !dbg !7406
  %tobool8 = icmp ne i32 %conv7, 0, !dbg !7406
  br i1 %tobool8, label %land.rhs, label %land.end, !dbg !7407

land.rhs:                                         ; preds = %land.lhs.true4
  %7 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7408
  %exp9 = bitcast %union.tree_node* %7 to %struct.tree_exp*, !dbg !7408
  %operands10 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp9, i32 0, i32 3, !dbg !7408
  %arrayidx11 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands10, i64 0, i64 1, !dbg !7408
  %8 = load %union.tree_node*, %union.tree_node** %arrayidx11, align 8, !dbg !7408
  %call12 = call zeroext i8 @is_gimple_val(%union.tree_node* %8), !dbg !7409
  %conv13 = zext i8 %call12 to i32, !dbg !7409
  %tobool14 = icmp ne i32 %conv13, 0, !dbg !7407
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true4, %land.lhs.true, %lor.rhs
  %9 = phi i1 [ false, %land.lhs.true4 ], [ false, %land.lhs.true ], [ false, %lor.rhs ], [ %tobool14, %land.rhs ], !dbg !7410
  br label %lor.end, !dbg !7399

lor.end:                                          ; preds = %land.end, %entry
  %10 = phi i1 [ true, %entry ], [ %9, %land.end ]
  %lor.ext = zext i1 %10 to i32, !dbg !7399
  %conv15 = trunc i32 %lor.ext to i8, !dbg !7411
  ret i8 %conv15, !dbg !7412
}

declare dso_local zeroext i8 @tree_could_trap_p(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @is_gimple_id(%union.tree_node* %t) #0 !dbg !7413 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !7414, metadata !DIExpression()), !dbg !7415
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7416
  %call = call zeroext i8 @is_gimple_variable(%union.tree_node* %0), !dbg !7417
  %conv = zext i8 %call to i32, !dbg !7417
  %tobool = icmp ne i32 %conv, 0, !dbg !7417
  br i1 %tobool, label %lor.end, label %lor.lhs.false, !dbg !7418

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7419
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !7419
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !7419
  %bf.load = load i64, i64* %2, align 8, !dbg !7419
  %bf.clear = and i64 %bf.load, 65535, !dbg !7419
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7419
  %cmp = icmp eq i32 %bf.cast, 29, !dbg !7420
  br i1 %cmp, label %lor.end, label %lor.lhs.false2, !dbg !7421

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %3 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7422
  %base3 = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !7422
  %4 = bitcast %struct.tree_base* %base3 to i64*, !dbg !7422
  %bf.load4 = load i64, i64* %4, align 8, !dbg !7422
  %bf.clear5 = and i64 %bf.load4, 65535, !dbg !7422
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !7422
  %cmp7 = icmp eq i32 %bf.cast6, 30, !dbg !7423
  br i1 %cmp7, label %lor.end, label %lor.lhs.false9, !dbg !7424

lor.lhs.false9:                                   ; preds = %lor.lhs.false2
  %5 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7425
  %base10 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !7425
  %6 = bitcast %struct.tree_base* %base10 to i64*, !dbg !7425
  %bf.load11 = load i64, i64* %6, align 8, !dbg !7425
  %bf.clear12 = and i64 %bf.load11, 65535, !dbg !7425
  %bf.cast13 = trunc i64 %bf.clear12 to i32, !dbg !7425
  %cmp14 = icmp eq i32 %bf.cast13, 33, !dbg !7426
  br i1 %cmp14, label %lor.end, label %lor.rhs, !dbg !7427

lor.rhs:                                          ; preds = %lor.lhs.false9
  %7 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7428
  %base16 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !7428
  %8 = bitcast %struct.tree_base* %base16 to i64*, !dbg !7428
  %bf.load17 = load i64, i64* %8, align 8, !dbg !7428
  %bf.clear18 = and i64 %bf.load17, 65535, !dbg !7428
  %bf.cast19 = trunc i64 %bf.clear18 to i32, !dbg !7428
  %cmp20 = icmp eq i32 %bf.cast19, 28, !dbg !7429
  br label %lor.end, !dbg !7427

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false9, %lor.lhs.false2, %lor.lhs.false, %entry
  %9 = phi i1 [ true, %lor.lhs.false9 ], [ true, %lor.lhs.false2 ], [ true, %lor.lhs.false ], [ true, %entry ], [ %cmp20, %lor.rhs ]
  %lor.ext = zext i1 %9 to i32, !dbg !7427
  %conv22 = trunc i32 %lor.ext to i8, !dbg !7430
  ret i8 %conv22, !dbg !7431
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @handled_component_p(%union.tree_node* %t) #0 !dbg !7432 {
entry:
  %retval = alloca i8, align 1
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !7433, metadata !DIExpression()), !dbg !7434
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7435
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !7435
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !7435
  %bf.load = load i64, i64* %1, align 8, !dbg !7435
  %bf.clear = and i64 %bf.load, 65535, !dbg !7435
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7435
  switch i32 %bf.cast, label %sw.default [
    i32 42, label %sw.bb
    i32 41, label %sw.bb
    i32 45, label %sw.bb
    i32 46, label %sw.bb
    i32 118, label %sw.bb
    i32 43, label %sw.bb
    i32 44, label %sw.bb
  ], !dbg !7436

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i8 1, i8* %retval, align 1, !dbg !7437
  br label %return, !dbg !7437

sw.default:                                       ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !7439
  br label %return, !dbg !7439

return:                                           ; preds = %sw.default, %sw.bb
  %2 = load i8, i8* %retval, align 1, !dbg !7440
  ret i8 %2, !dbg !7440
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @is_gimple_constant(%union.tree_node* %t) #0 !dbg !7441 {
entry:
  %retval = alloca i8, align 1
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !7442, metadata !DIExpression()), !dbg !7443
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7444
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !7444
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !7444
  %bf.load = load i64, i64* %1, align 8, !dbg !7444
  %bf.clear = and i64 %bf.load, 65535, !dbg !7444
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7444
  switch i32 %bf.cast, label %sw.default [
    i32 23, label %sw.bb
    i32 24, label %sw.bb
    i32 25, label %sw.bb
    i32 28, label %sw.bb
    i32 26, label %sw.bb
    i32 27, label %sw.bb
    i32 51, label %sw.bb1
  ], !dbg !7445

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry
  store i8 1, i8* %retval, align 1, !dbg !7446
  br label %return, !dbg !7446

sw.bb1:                                           ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7448
  %common = bitcast %union.tree_node* %2 to %struct.tree_common*, !dbg !7448
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7448
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7448
  %tobool = icmp ne %union.tree_node* %3, null, !dbg !7448
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !7450

land.lhs.true:                                    ; preds = %sw.bb1
  %4 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7451
  %common2 = bitcast %union.tree_node* %4 to %struct.tree_common*, !dbg !7451
  %type3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2, !dbg !7451
  %5 = load %union.tree_node*, %union.tree_node** %type3, align 8, !dbg !7451
  %base4 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !7451
  %6 = bitcast %struct.tree_base* %base4 to i64*, !dbg !7451
  %bf.load5 = load i64, i64* %6, align 8, !dbg !7451
  %bf.clear6 = and i64 %bf.load5, 65535, !dbg !7451
  %bf.cast7 = trunc i64 %bf.clear6 to i32, !dbg !7451
  %cmp = icmp eq i32 %bf.cast7, 14, !dbg !7452
  br i1 %cmp, label %if.then, label %if.else, !dbg !7453

if.then:                                          ; preds = %land.lhs.true
  %7 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7454
  %base8 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !7454
  %8 = bitcast %struct.tree_base* %base8 to i64*, !dbg !7454
  %bf.load9 = load i64, i64* %8, align 8, !dbg !7454
  %bf.lshr = lshr i64 %bf.load9, 17, !dbg !7454
  %bf.clear10 = and i64 %bf.lshr, 1, !dbg !7454
  %bf.cast11 = trunc i64 %bf.clear10 to i32, !dbg !7454
  %conv = trunc i32 %bf.cast11 to i8, !dbg !7454
  store i8 %conv, i8* %retval, align 1, !dbg !7455
  br label %return, !dbg !7455

if.else:                                          ; preds = %land.lhs.true, %sw.bb1
  store i8 0, i8* %retval, align 1, !dbg !7456
  br label %return, !dbg !7456

sw.default:                                       ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !7457
  br label %return, !dbg !7457

return:                                           ; preds = %sw.default, %if.else, %if.then, %sw.bb
  %9 = load i8, i8* %retval, align 1, !dbg !7458
  ret i8 %9, !dbg !7458
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @is_gimple_address(%union.tree_node* %t) #0 !dbg !7459 {
entry:
  %retval = alloca i8, align 1
  %t.addr = alloca %union.tree_node*, align 8
  %op = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !7460, metadata !DIExpression()), !dbg !7461
  call void @llvm.dbg.declare(metadata %union.tree_node** %op, metadata !7462, metadata !DIExpression()), !dbg !7463
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7464
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !7464
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !7464
  %bf.load = load i64, i64* %1, align 8, !dbg !7464
  %bf.clear = and i64 %bf.load, 65535, !dbg !7464
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7464
  %cmp = icmp ne i32 %bf.cast, 121, !dbg !7466
  br i1 %cmp, label %if.then, label %if.end, !dbg !7467

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !7468
  br label %return, !dbg !7468

if.end:                                           ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7469
  %exp = bitcast %union.tree_node* %2 to %struct.tree_exp*, !dbg !7469
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !7469
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !7469
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !7469
  store %union.tree_node* %3, %union.tree_node** %op, align 8, !dbg !7470
  br label %while.cond, !dbg !7471

while.cond:                                       ; preds = %if.end17, %if.end
  %4 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !7472
  %call = call zeroext i8 @handled_component_p(%union.tree_node* %4), !dbg !7473
  %tobool = icmp ne i8 %call, 0, !dbg !7471
  br i1 %tobool, label %while.body, label %while.end, !dbg !7471

while.body:                                       ; preds = %while.cond
  %5 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !7474
  %base1 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !7474
  %6 = bitcast %struct.tree_base* %base1 to i64*, !dbg !7474
  %bf.load2 = load i64, i64* %6, align 8, !dbg !7474
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !7474
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !7474
  %cmp5 = icmp eq i32 %bf.cast4, 45, !dbg !7477
  br i1 %cmp5, label %land.lhs.true, label %lor.lhs.false, !dbg !7478

lor.lhs.false:                                    ; preds = %while.body
  %7 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !7479
  %base6 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !7479
  %8 = bitcast %struct.tree_base* %base6 to i64*, !dbg !7479
  %bf.load7 = load i64, i64* %8, align 8, !dbg !7479
  %bf.clear8 = and i64 %bf.load7, 65535, !dbg !7479
  %bf.cast9 = trunc i64 %bf.clear8 to i32, !dbg !7479
  %cmp10 = icmp eq i32 %bf.cast9, 46, !dbg !7480
  br i1 %cmp10, label %land.lhs.true, label %if.end17, !dbg !7481

land.lhs.true:                                    ; preds = %lor.lhs.false, %while.body
  %9 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !7482
  %exp11 = bitcast %union.tree_node* %9 to %struct.tree_exp*, !dbg !7482
  %operands12 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp11, i32 0, i32 3, !dbg !7482
  %arrayidx13 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands12, i64 0, i64 1, !dbg !7482
  %10 = load %union.tree_node*, %union.tree_node** %arrayidx13, align 8, !dbg !7482
  %call14 = call zeroext i8 @is_gimple_val(%union.tree_node* %10), !dbg !7483
  %tobool15 = icmp ne i8 %call14, 0, !dbg !7483
  br i1 %tobool15, label %if.end17, label %if.then16, !dbg !7484

if.then16:                                        ; preds = %land.lhs.true
  store i8 0, i8* %retval, align 1, !dbg !7485
  br label %return, !dbg !7485

if.end17:                                         ; preds = %land.lhs.true, %lor.lhs.false
  %11 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !7486
  %exp18 = bitcast %union.tree_node* %11 to %struct.tree_exp*, !dbg !7486
  %operands19 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp18, i32 0, i32 3, !dbg !7486
  %arrayidx20 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands19, i64 0, i64 0, !dbg !7486
  %12 = load %union.tree_node*, %union.tree_node** %arrayidx20, align 8, !dbg !7486
  store %union.tree_node* %12, %union.tree_node** %op, align 8, !dbg !7487
  br label %while.cond, !dbg !7471, !llvm.loop !7488

while.end:                                        ; preds = %while.cond
  %13 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !7490
  %base21 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !7490
  %14 = bitcast %struct.tree_base* %base21 to i64*, !dbg !7490
  %bf.load22 = load i64, i64* %14, align 8, !dbg !7490
  %bf.clear23 = and i64 %bf.load22, 65535, !dbg !7490
  %bf.cast24 = trunc i64 %bf.clear23 to i32, !dbg !7490
  %idxprom = sext i32 %bf.cast24 to i64, !dbg !7490
  %arrayidx25 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !7490
  %15 = load i32, i32* %arrayidx25, align 4, !dbg !7490
  %cmp26 = icmp eq i32 %15, 1, !dbg !7490
  br i1 %cmp26, label %if.then45, label %lor.lhs.false27, !dbg !7492

lor.lhs.false27:                                  ; preds = %while.end
  %16 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !7493
  %base28 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !7493
  %17 = bitcast %struct.tree_base* %base28 to i64*, !dbg !7493
  %bf.load29 = load i64, i64* %17, align 8, !dbg !7493
  %bf.clear30 = and i64 %bf.load29, 65535, !dbg !7493
  %bf.cast31 = trunc i64 %bf.clear30 to i32, !dbg !7493
  %cmp32 = icmp eq i32 %bf.cast31, 47, !dbg !7493
  br i1 %cmp32, label %if.then45, label %lor.lhs.false33, !dbg !7493

lor.lhs.false33:                                  ; preds = %lor.lhs.false27
  %18 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !7493
  %base34 = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !7493
  %19 = bitcast %struct.tree_base* %base34 to i64*, !dbg !7493
  %bf.load35 = load i64, i64* %19, align 8, !dbg !7493
  %bf.clear36 = and i64 %bf.load35, 65535, !dbg !7493
  %bf.cast37 = trunc i64 %bf.clear36 to i32, !dbg !7493
  %cmp38 = icmp eq i32 %bf.cast37, 48, !dbg !7493
  br i1 %cmp38, label %if.then45, label %lor.lhs.false39, !dbg !7493

lor.lhs.false39:                                  ; preds = %lor.lhs.false33
  %20 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !7493
  %base40 = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !7493
  %21 = bitcast %struct.tree_base* %base40 to i64*, !dbg !7493
  %bf.load41 = load i64, i64* %21, align 8, !dbg !7493
  %bf.clear42 = and i64 %bf.load41, 65535, !dbg !7493
  %bf.cast43 = trunc i64 %bf.clear42 to i32, !dbg !7493
  %cmp44 = icmp eq i32 %bf.cast43, 49, !dbg !7493
  br i1 %cmp44, label %if.then45, label %if.end46, !dbg !7494

if.then45:                                        ; preds = %lor.lhs.false39, %lor.lhs.false33, %lor.lhs.false27, %while.end
  store i8 1, i8* %retval, align 1, !dbg !7495
  br label %return, !dbg !7495

if.end46:                                         ; preds = %lor.lhs.false39
  %22 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !7496
  %base47 = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !7496
  %23 = bitcast %struct.tree_base* %base47 to i64*, !dbg !7496
  %bf.load48 = load i64, i64* %23, align 8, !dbg !7496
  %bf.clear49 = and i64 %bf.load48, 65535, !dbg !7496
  %bf.cast50 = trunc i64 %bf.clear49 to i32, !dbg !7496
  switch i32 %bf.cast50, label %sw.default [
    i32 34, label %sw.bb
    i32 36, label %sw.bb
    i32 30, label %sw.bb
    i32 29, label %sw.bb
    i32 32, label %sw.bb
    i32 33, label %sw.bb
  ], !dbg !7497

sw.bb:                                            ; preds = %if.end46, %if.end46, %if.end46, %if.end46, %if.end46, %if.end46
  store i8 1, i8* %retval, align 1, !dbg !7498
  br label %return, !dbg !7498

sw.default:                                       ; preds = %if.end46
  store i8 0, i8* %retval, align 1, !dbg !7500
  br label %return, !dbg !7500

return:                                           ; preds = %sw.default, %sw.bb, %if.then45, %if.then16, %if.then
  %24 = load i8, i8* %retval, align 1, !dbg !7501
  ret i8 %24, !dbg !7501
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @is_gimple_invariant_address(%union.tree_node* %t) #0 !dbg !7502 {
entry:
  %retval = alloca i8, align 1
  %t.addr = alloca %union.tree_node*, align 8
  %op = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !7503, metadata !DIExpression()), !dbg !7504
  call void @llvm.dbg.declare(metadata %union.tree_node** %op, metadata !7505, metadata !DIExpression()), !dbg !7506
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7507
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !7507
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !7507
  %bf.load = load i64, i64* %1, align 8, !dbg !7507
  %bf.clear = and i64 %bf.load, 65535, !dbg !7507
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7507
  %cmp = icmp ne i32 %bf.cast, 121, !dbg !7509
  br i1 %cmp, label %if.then, label %if.end, !dbg !7510

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !7511
  br label %return, !dbg !7511

if.end:                                           ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7512
  %exp = bitcast %union.tree_node* %2 to %struct.tree_exp*, !dbg !7512
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !7512
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !7512
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !7512
  %call = call %union.tree_node* @strip_invariant_refs(%union.tree_node* %3), !dbg !7513
  store %union.tree_node* %call, %union.tree_node** %op, align 8, !dbg !7514
  %4 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !7515
  %tobool = icmp ne %union.tree_node* %4, null, !dbg !7515
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !7516

land.rhs:                                         ; preds = %if.end
  %5 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !7517
  %base1 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !7517
  %6 = bitcast %struct.tree_base* %base1 to i64*, !dbg !7517
  %bf.load2 = load i64, i64* %6, align 8, !dbg !7517
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !7517
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !7517
  %idxprom = sext i32 %bf.cast4 to i64, !dbg !7517
  %arrayidx5 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !7517
  %7 = load i32, i32* %arrayidx5, align 4, !dbg !7517
  %cmp6 = icmp eq i32 %7, 1, !dbg !7517
  br i1 %cmp6, label %lor.end, label %lor.rhs, !dbg !7518

lor.rhs:                                          ; preds = %land.rhs
  %8 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !7519
  %call7 = call zeroext i8 @decl_address_invariant_p(%union.tree_node* %8), !dbg !7520
  %conv = zext i8 %call7 to i32, !dbg !7520
  %tobool8 = icmp ne i32 %conv, 0, !dbg !7518
  br label %lor.end, !dbg !7518

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %9 = phi i1 [ true, %land.rhs ], [ %tobool8, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %if.end
  %10 = phi i1 [ false, %if.end ], [ %9, %lor.end ], !dbg !7521
  %land.ext = zext i1 %10 to i32, !dbg !7516
  %conv9 = trunc i32 %land.ext to i8, !dbg !7515
  store i8 %conv9, i8* %retval, align 1, !dbg !7522
  br label %return, !dbg !7522

return:                                           ; preds = %land.end, %if.then
  %11 = load i8, i8* %retval, align 1, !dbg !7523
  ret i8 %11, !dbg !7523
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @strip_invariant_refs(%union.tree_node* %op) #0 !dbg !7524 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %op.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !7527, metadata !DIExpression()), !dbg !7528
  br label %while.cond, !dbg !7529

while.cond:                                       ; preds = %sw.epilog, %entry
  %0 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !7530
  %call = call zeroext i8 @handled_component_p(%union.tree_node* %0), !dbg !7531
  %tobool = icmp ne i8 %call, 0, !dbg !7529
  br i1 %tobool, label %while.body, label %while.end, !dbg !7529

while.body:                                       ; preds = %while.cond
  %1 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !7532
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !7532
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !7532
  %bf.load = load i64, i64* %2, align 8, !dbg !7532
  %bf.clear = and i64 %bf.load, 65535, !dbg !7532
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7532
  switch i32 %bf.cast, label %sw.default [
    i32 45, label %sw.bb
    i32 46, label %sw.bb
    i32 41, label %sw.bb11
  ], !dbg !7534

sw.bb:                                            ; preds = %while.body, %while.body
  %3 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !7535
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !7535
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !7535
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !7535
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !7535
  %call1 = call zeroext i8 @is_gimple_constant(%union.tree_node* %4), !dbg !7538
  %tobool2 = icmp ne i8 %call1, 0, !dbg !7538
  br i1 %tobool2, label %lor.lhs.false, label %if.then, !dbg !7539

lor.lhs.false:                                    ; preds = %sw.bb
  %5 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !7540
  %exp3 = bitcast %union.tree_node* %5 to %struct.tree_exp*, !dbg !7540
  %operands4 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp3, i32 0, i32 3, !dbg !7540
  %arrayidx5 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4, i64 0, i64 2, !dbg !7540
  %6 = load %union.tree_node*, %union.tree_node** %arrayidx5, align 8, !dbg !7540
  %cmp = icmp ne %union.tree_node* %6, null, !dbg !7541
  br i1 %cmp, label %if.then, label %lor.lhs.false6, !dbg !7542

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %7 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !7543
  %exp7 = bitcast %union.tree_node* %7 to %struct.tree_exp*, !dbg !7543
  %operands8 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp7, i32 0, i32 3, !dbg !7543
  %arrayidx9 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands8, i64 0, i64 3, !dbg !7543
  %8 = load %union.tree_node*, %union.tree_node** %arrayidx9, align 8, !dbg !7543
  %cmp10 = icmp ne %union.tree_node* %8, null, !dbg !7544
  br i1 %cmp10, label %if.then, label %if.end, !dbg !7545

if.then:                                          ; preds = %lor.lhs.false6, %lor.lhs.false, %sw.bb
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7546
  br label %return, !dbg !7546

if.end:                                           ; preds = %lor.lhs.false6
  br label %sw.epilog, !dbg !7547

sw.bb11:                                          ; preds = %while.body
  %9 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !7548
  %exp12 = bitcast %union.tree_node* %9 to %struct.tree_exp*, !dbg !7548
  %operands13 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp12, i32 0, i32 3, !dbg !7548
  %arrayidx14 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands13, i64 0, i64 2, !dbg !7548
  %10 = load %union.tree_node*, %union.tree_node** %arrayidx14, align 8, !dbg !7548
  %cmp15 = icmp ne %union.tree_node* %10, null, !dbg !7550
  br i1 %cmp15, label %if.then16, label %if.end17, !dbg !7551

if.then16:                                        ; preds = %sw.bb11
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7552
  br label %return, !dbg !7552

if.end17:                                         ; preds = %sw.bb11
  br label %sw.epilog, !dbg !7553

sw.default:                                       ; preds = %while.body
  br label %sw.epilog, !dbg !7554

sw.epilog:                                        ; preds = %sw.default, %if.end17, %if.end
  %11 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !7555
  %exp18 = bitcast %union.tree_node* %11 to %struct.tree_exp*, !dbg !7555
  %operands19 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp18, i32 0, i32 3, !dbg !7555
  %arrayidx20 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands19, i64 0, i64 0, !dbg !7555
  %12 = load %union.tree_node*, %union.tree_node** %arrayidx20, align 8, !dbg !7555
  store %union.tree_node* %12, %union.tree_node** %op.addr, align 8, !dbg !7556
  br label %while.cond, !dbg !7529, !llvm.loop !7557

while.end:                                        ; preds = %while.cond
  %13 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !7559
  store %union.tree_node* %13, %union.tree_node** %retval, align 8, !dbg !7560
  br label %return, !dbg !7560

return:                                           ; preds = %while.end, %if.then16, %if.then
  %14 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7561
  ret %union.tree_node* %14, !dbg !7561
}

declare dso_local zeroext i8 @decl_address_invariant_p(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @is_gimple_ip_invariant_address(%union.tree_node* %t) #0 !dbg !7562 {
entry:
  %retval = alloca i8, align 1
  %t.addr = alloca %union.tree_node*, align 8
  %op = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !7563, metadata !DIExpression()), !dbg !7564
  call void @llvm.dbg.declare(metadata %union.tree_node** %op, metadata !7565, metadata !DIExpression()), !dbg !7566
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7567
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !7567
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !7567
  %bf.load = load i64, i64* %1, align 8, !dbg !7567
  %bf.clear = and i64 %bf.load, 65535, !dbg !7567
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7567
  %cmp = icmp ne i32 %bf.cast, 121, !dbg !7569
  br i1 %cmp, label %if.then, label %if.end, !dbg !7570

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !7571
  br label %return, !dbg !7571

if.end:                                           ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7572
  %exp = bitcast %union.tree_node* %2 to %struct.tree_exp*, !dbg !7572
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !7572
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !7572
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !7572
  %call = call %union.tree_node* @strip_invariant_refs(%union.tree_node* %3), !dbg !7573
  store %union.tree_node* %call, %union.tree_node** %op, align 8, !dbg !7574
  %4 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !7575
  %tobool = icmp ne %union.tree_node* %4, null, !dbg !7575
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !7576

land.rhs:                                         ; preds = %if.end
  %5 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !7577
  %base1 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !7577
  %6 = bitcast %struct.tree_base* %base1 to i64*, !dbg !7577
  %bf.load2 = load i64, i64* %6, align 8, !dbg !7577
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !7577
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !7577
  %idxprom = sext i32 %bf.cast4 to i64, !dbg !7577
  %arrayidx5 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !7577
  %7 = load i32, i32* %arrayidx5, align 4, !dbg !7577
  %cmp6 = icmp eq i32 %7, 1, !dbg !7577
  br i1 %cmp6, label %lor.end, label %lor.rhs, !dbg !7578

lor.rhs:                                          ; preds = %land.rhs
  %8 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !7579
  %call7 = call zeroext i8 @decl_address_ip_invariant_p(%union.tree_node* %8), !dbg !7580
  %conv = zext i8 %call7 to i32, !dbg !7580
  %tobool8 = icmp ne i32 %conv, 0, !dbg !7578
  br label %lor.end, !dbg !7578

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %9 = phi i1 [ true, %land.rhs ], [ %tobool8, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %if.end
  %10 = phi i1 [ false, %if.end ], [ %9, %lor.end ], !dbg !7581
  %land.ext = zext i1 %10 to i32, !dbg !7576
  %conv9 = trunc i32 %land.ext to i8, !dbg !7575
  store i8 %conv9, i8* %retval, align 1, !dbg !7582
  br label %return, !dbg !7582

return:                                           ; preds = %land.end, %if.then
  %11 = load i8, i8* %retval, align 1, !dbg !7583
  ret i8 %11, !dbg !7583
}

declare dso_local zeroext i8 @decl_address_ip_invariant_p(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @is_gimple_ip_invariant(%union.tree_node* %t) #0 !dbg !7584 {
entry:
  %retval = alloca i8, align 1
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !7585, metadata !DIExpression()), !dbg !7586
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7587
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !7587
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !7587
  %bf.load = load i64, i64* %1, align 8, !dbg !7587
  %bf.clear = and i64 %bf.load, 65535, !dbg !7587
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7587
  %cmp = icmp eq i32 %bf.cast, 121, !dbg !7589
  br i1 %cmp, label %if.then, label %if.end, !dbg !7590

if.then:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7591
  %call = call zeroext i8 @is_gimple_ip_invariant_address(%union.tree_node* %2), !dbg !7592
  store i8 %call, i8* %retval, align 1, !dbg !7593
  br label %return, !dbg !7593

if.end:                                           ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7594
  %call1 = call zeroext i8 @is_gimple_constant(%union.tree_node* %3), !dbg !7595
  store i8 %call1, i8* %retval, align 1, !dbg !7596
  br label %return, !dbg !7596

return:                                           ; preds = %if.end, %if.then
  %4 = load i8, i8* %retval, align 1, !dbg !7597
  ret i8 %4, !dbg !7597
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @is_gimple_stmt(%union.tree_node* %t) #0 !dbg !7598 {
entry:
  %retval = alloca i8, align 1
  %t.addr = alloca %union.tree_node*, align 8
  %code = alloca i32, align 4
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !7599, metadata !DIExpression()), !dbg !7600
  call void @llvm.dbg.declare(metadata i32* %code, metadata !7601, metadata !DIExpression()), !dbg !7603
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7604
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !7604
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !7604
  %bf.load = load i64, i64* %1, align 8, !dbg !7604
  %bf.clear = and i64 %bf.load, 65535, !dbg !7604
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7604
  store i32 %bf.cast, i32* %code, align 4, !dbg !7603
  %2 = load i32, i32* %code, align 4, !dbg !7605
  switch i32 %2, label %sw.default [
    i32 116, label %sw.bb
    i32 58, label %sw.bb10
    i32 56, label %sw.bb10
    i32 138, label %sw.bb24
    i32 134, label %sw.bb24
    i32 135, label %sw.bb24
    i32 133, label %sw.bb24
    i32 139, label %sw.bb24
    i32 130, label %sw.bb24
    i32 131, label %sw.bb24
    i32 143, label %sw.bb24
    i32 142, label %sw.bb24
    i32 140, label %sw.bb24
    i32 147, label %sw.bb24
    i32 153, label %sw.bb24
    i32 155, label %sw.bb24
    i32 156, label %sw.bb24
    i32 158, label %sw.bb24
    i32 157, label %sw.bb24
    i32 159, label %sw.bb24
    i32 160, label %sw.bb24
    i32 161, label %sw.bb24
    i32 154, label %sw.bb24
    i32 59, label %sw.bb25
    i32 53, label %sw.bb25
    i32 185, label %sw.bb25
  ], !dbg !7606

sw.bb:                                            ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7607
  %base1 = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !7607
  %4 = bitcast %struct.tree_base* %base1 to i64*, !dbg !7607
  %bf.load2 = load i64, i64* %4, align 8, !dbg !7607
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !7607
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !7607
  %cmp = icmp eq i32 %bf.cast4, 116, !dbg !7607
  br i1 %cmp, label %land.lhs.true, label %land.end, !dbg !7607

land.lhs.true:                                    ; preds = %sw.bb
  %5 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7607
  %common = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !7607
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7607
  %6 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7607
  %base5 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !7607
  %7 = bitcast %struct.tree_base* %base5 to i64*, !dbg !7607
  %bf.load6 = load i64, i64* %7, align 8, !dbg !7607
  %bf.clear7 = and i64 %bf.load6, 65535, !dbg !7607
  %bf.cast8 = trunc i64 %bf.clear7 to i32, !dbg !7607
  %cmp9 = icmp eq i32 %bf.cast8, 19, !dbg !7607
  br i1 %cmp9, label %land.rhs, label %land.end, !dbg !7607

land.rhs:                                         ; preds = %land.lhs.true
  %8 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7607
  %exp = bitcast %union.tree_node* %8 to %struct.tree_exp*, !dbg !7607
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !7607
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !7607
  %9 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !7607
  %call = call i32 @integer_zerop(%union.tree_node* %9), !dbg !7607
  %tobool = icmp ne i32 %call, 0, !dbg !7607
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %sw.bb
  %10 = phi i1 [ false, %land.lhs.true ], [ false, %sw.bb ], [ %tobool, %land.rhs ], !dbg !7609
  %land.ext = zext i1 %10 to i32, !dbg !7607
  %conv = trunc i32 %land.ext to i8, !dbg !7607
  store i8 %conv, i8* %retval, align 1, !dbg !7610
  br label %return, !dbg !7610

sw.bb10:                                          ; preds = %entry, %entry
  %11 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7611
  %common11 = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !7611
  %type12 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common11, i32 0, i32 2, !dbg !7611
  %12 = load %union.tree_node*, %union.tree_node** %type12, align 8, !dbg !7611
  %cmp13 = icmp eq %union.tree_node* %12, null, !dbg !7612
  br i1 %cmp13, label %lor.end, label %lor.rhs, !dbg !7613

lor.rhs:                                          ; preds = %sw.bb10
  %13 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7614
  %common15 = bitcast %union.tree_node* %13 to %struct.tree_common*, !dbg !7614
  %type16 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common15, i32 0, i32 2, !dbg !7614
  %14 = load %union.tree_node*, %union.tree_node** %type16, align 8, !dbg !7614
  %base17 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !7614
  %15 = bitcast %struct.tree_base* %base17 to i64*, !dbg !7614
  %bf.load18 = load i64, i64* %15, align 8, !dbg !7614
  %bf.clear19 = and i64 %bf.load18, 65535, !dbg !7614
  %bf.cast20 = trunc i64 %bf.clear19 to i32, !dbg !7614
  %cmp21 = icmp eq i32 %bf.cast20, 19, !dbg !7614
  br label %lor.end, !dbg !7613

lor.end:                                          ; preds = %lor.rhs, %sw.bb10
  %16 = phi i1 [ true, %sw.bb10 ], [ %cmp21, %lor.rhs ]
  %lor.ext = zext i1 %16 to i32, !dbg !7613
  %conv23 = trunc i32 %lor.ext to i8, !dbg !7611
  store i8 %conv23, i8* %retval, align 1, !dbg !7615
  br label %return, !dbg !7615

sw.bb24:                                          ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i8 1, i8* %retval, align 1, !dbg !7616
  br label %return, !dbg !7616

sw.bb25:                                          ; preds = %entry, %entry, %entry
  store i8 1, i8* %retval, align 1, !dbg !7617
  br label %return, !dbg !7617

sw.default:                                       ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !7618
  br label %return, !dbg !7618

return:                                           ; preds = %sw.default, %sw.bb25, %sw.bb24, %lor.end, %land.end
  %17 = load i8, i8* %retval, align 1, !dbg !7619
  ret i8 %17, !dbg !7619
}

declare dso_local i32 @integer_zerop(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @is_gimple_variable(%union.tree_node* %t) #0 !dbg !7620 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !7621, metadata !DIExpression()), !dbg !7622
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7623
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !7623
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !7623
  %bf.load = load i64, i64* %1, align 8, !dbg !7623
  %bf.clear = and i64 %bf.load, 65535, !dbg !7623
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7623
  %cmp = icmp eq i32 %bf.cast, 32, !dbg !7624
  br i1 %cmp, label %lor.end, label %lor.lhs.false, !dbg !7625

lor.lhs.false:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7626
  %base1 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !7626
  %3 = bitcast %struct.tree_base* %base1 to i64*, !dbg !7626
  %bf.load2 = load i64, i64* %3, align 8, !dbg !7626
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !7626
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !7626
  %cmp5 = icmp eq i32 %bf.cast4, 34, !dbg !7627
  br i1 %cmp5, label %lor.end, label %lor.lhs.false6, !dbg !7628

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %4 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7629
  %base7 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !7629
  %5 = bitcast %struct.tree_base* %base7 to i64*, !dbg !7629
  %bf.load8 = load i64, i64* %5, align 8, !dbg !7629
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !7629
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !7629
  %cmp11 = icmp eq i32 %bf.cast10, 36, !dbg !7630
  br i1 %cmp11, label %lor.end, label %lor.rhs, !dbg !7631

lor.rhs:                                          ; preds = %lor.lhs.false6
  %6 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7632
  %base12 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !7632
  %7 = bitcast %struct.tree_base* %base12 to i64*, !dbg !7632
  %bf.load13 = load i64, i64* %7, align 8, !dbg !7632
  %bf.clear14 = and i64 %bf.load13, 65535, !dbg !7632
  %bf.cast15 = trunc i64 %bf.clear14 to i32, !dbg !7632
  %cmp16 = icmp eq i32 %bf.cast15, 141, !dbg !7633
  br label %lor.end, !dbg !7631

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false6, %lor.lhs.false, %entry
  %8 = phi i1 [ true, %lor.lhs.false6 ], [ true, %lor.lhs.false ], [ true, %entry ], [ %cmp16, %lor.rhs ]
  %lor.ext = zext i1 %8 to i32, !dbg !7631
  %conv = trunc i32 %lor.ext to i8, !dbg !7634
  ret i8 %conv, !dbg !7635
}

declare dso_local zeroext i8 @needs_to_live_in_memory(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @is_gimple_non_addressable(%union.tree_node* %t) #0 !dbg !7636 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !7637, metadata !DIExpression()), !dbg !7638
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7639
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !7639
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !7639
  %bf.load = load i64, i64* %1, align 8, !dbg !7639
  %bf.clear = and i64 %bf.load, 65535, !dbg !7639
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7639
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !7641
  br i1 %cmp, label %if.then, label %if.end, !dbg !7642

if.then:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7643
  %ssa_name = bitcast %union.tree_node* %2 to %struct.tree_ssa_name*, !dbg !7643
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !7643
  %3 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7643
  store %union.tree_node* %3, %union.tree_node** %t.addr, align 8, !dbg !7644
  br label %if.end, !dbg !7645

if.end:                                           ; preds = %if.then, %entry
  %4 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7646
  %call = call zeroext i8 @is_gimple_variable(%union.tree_node* %4), !dbg !7647
  %conv = zext i8 %call to i32, !dbg !7647
  %tobool = icmp ne i32 %conv, 0, !dbg !7647
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !7648

land.rhs:                                         ; preds = %if.end
  %5 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7649
  %call1 = call zeroext i8 @needs_to_live_in_memory(%union.tree_node* %5), !dbg !7650
  %tobool2 = icmp ne i8 %call1, 0, !dbg !7651
  %lnot = xor i1 %tobool2, true, !dbg !7651
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end
  %6 = phi i1 [ false, %if.end ], [ %lnot, %land.rhs ], !dbg !7652
  %land.ext = zext i1 %6 to i32, !dbg !7648
  %conv3 = trunc i32 %land.ext to i8, !dbg !7653
  ret i8 %conv3, !dbg !7654
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @is_gimple_asm_val(%union.tree_node* %t) #0 !dbg !7655 {
entry:
  %retval = alloca i8, align 1
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !7656, metadata !DIExpression()), !dbg !7657
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7658
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !7658
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !7658
  %bf.load = load i64, i64* %1, align 8, !dbg !7658
  %bf.clear = and i64 %bf.load, 65535, !dbg !7658
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7658
  %cmp = icmp eq i32 %bf.cast, 32, !dbg !7660
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !7661

land.lhs.true:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7662
  %decl_with_vis = bitcast %union.tree_node* %2 to %struct.tree_decl_with_vis*, !dbg !7662
  %hard_register = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 4, !dbg !7662
  %3 = bitcast i24* %hard_register to i32*, !dbg !7662
  %bf.load1 = load i32, i32* %3, align 8, !dbg !7662
  %bf.lshr = lshr i32 %bf.load1, 1, !dbg !7662
  %bf.clear2 = and i32 %bf.lshr, 1, !dbg !7662
  %tobool = icmp ne i32 %bf.clear2, 0, !dbg !7662
  br i1 %tobool, label %if.then, label %if.end, !dbg !7663

if.then:                                          ; preds = %land.lhs.true
  store i8 1, i8* %retval, align 1, !dbg !7664
  br label %return, !dbg !7664

if.end:                                           ; preds = %land.lhs.true, %entry
  %4 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7665
  %call = call zeroext i8 @is_gimple_val(%union.tree_node* %4), !dbg !7666
  store i8 %call, i8* %retval, align 1, !dbg !7667
  br label %return, !dbg !7667

return:                                           ; preds = %if.end, %if.then
  %5 = load i8, i8* %retval, align 1, !dbg !7668
  ret i8 %5, !dbg !7668
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @is_gimple_min_lval(%union.tree_node* %t) #0 !dbg !7669 {
entry:
  %retval = alloca i8, align 1
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !7670, metadata !DIExpression()), !dbg !7671
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7672
  %call = call %union.tree_node* @strip_invariant_refs(%union.tree_node* %0), !dbg !7672
  store %union.tree_node* %call, %union.tree_node** %t.addr, align 8, !dbg !7674
  %tobool = icmp ne %union.tree_node* %call, null, !dbg !7674
  br i1 %tobool, label %if.end, label %if.then, !dbg !7675

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !7676
  br label %return, !dbg !7676

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7677
  %call1 = call zeroext i8 @is_gimple_id(%union.tree_node* %1), !dbg !7678
  %conv = zext i8 %call1 to i32, !dbg !7678
  %tobool2 = icmp ne i32 %conv, 0, !dbg !7678
  br i1 %tobool2, label %lor.end, label %lor.rhs, !dbg !7679

lor.rhs:                                          ; preds = %if.end
  %2 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7680
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !7680
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !7680
  %bf.load = load i64, i64* %3, align 8, !dbg !7680
  %bf.clear = and i64 %bf.load, 65535, !dbg !7680
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7680
  %cmp = icmp eq i32 %bf.cast, 47, !dbg !7681
  br label %lor.end, !dbg !7679

lor.end:                                          ; preds = %lor.rhs, %if.end
  %4 = phi i1 [ true, %if.end ], [ %cmp, %lor.rhs ]
  %lor.ext = zext i1 %4 to i32, !dbg !7679
  %conv4 = trunc i32 %lor.ext to i8, !dbg !7682
  store i8 %conv4, i8* %retval, align 1, !dbg !7683
  br label %return, !dbg !7683

return:                                           ; preds = %lor.end, %if.then
  %5 = load i8, i8* %retval, align 1, !dbg !7684
  ret i8 %5, !dbg !7684
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @is_gimple_cast(%union.tree_node* %t) #0 !dbg !7685 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !7686, metadata !DIExpression()), !dbg !7687
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7688
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !7688
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !7688
  %bf.load = load i64, i64* %1, align 8, !dbg !7688
  %bf.clear = and i64 %bf.load, 65535, !dbg !7688
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7688
  %cmp = icmp eq i32 %bf.cast, 116, !dbg !7688
  br i1 %cmp, label %lor.end, label %lor.lhs.false, !dbg !7688

lor.lhs.false:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7688
  %base1 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !7688
  %3 = bitcast %struct.tree_base* %base1 to i64*, !dbg !7688
  %bf.load2 = load i64, i64* %3, align 8, !dbg !7688
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !7688
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !7688
  %cmp5 = icmp eq i32 %bf.cast4, 113, !dbg !7688
  br i1 %cmp5, label %lor.end, label %lor.rhs, !dbg !7689

lor.rhs:                                          ; preds = %lor.lhs.false
  %4 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7690
  %base6 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !7690
  %5 = bitcast %struct.tree_base* %base6 to i64*, !dbg !7690
  %bf.load7 = load i64, i64* %5, align 8, !dbg !7690
  %bf.clear8 = and i64 %bf.load7, 65535, !dbg !7690
  %bf.cast9 = trunc i64 %bf.clear8 to i32, !dbg !7690
  %cmp10 = icmp eq i32 %bf.cast9, 77, !dbg !7691
  br label %lor.end, !dbg !7689

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %entry
  %6 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %cmp10, %lor.rhs ]
  %lor.ext = zext i1 %6 to i32, !dbg !7689
  %conv = trunc i32 %lor.ext to i8, !dbg !7692
  ret i8 %conv, !dbg !7693
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @get_call_expr_in(%union.tree_node* %t) #0 !dbg !7694 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !7697, metadata !DIExpression()), !dbg !7698
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7699
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !7699
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !7699
  %bf.load = load i64, i64* %1, align 8, !dbg !7699
  %bf.clear = and i64 %bf.load, 65535, !dbg !7699
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7699
  %cmp = icmp eq i32 %bf.cast, 53, !dbg !7701
  br i1 %cmp, label %if.then, label %if.end, !dbg !7702

if.then:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7703
  %exp = bitcast %union.tree_node* %2 to %struct.tree_exp*, !dbg !7703
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !7703
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !7703
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !7703
  store %union.tree_node* %3, %union.tree_node** %t.addr, align 8, !dbg !7704
  br label %if.end, !dbg !7705

if.end:                                           ; preds = %if.then, %entry
  %4 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7706
  %base1 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !7706
  %5 = bitcast %struct.tree_base* %base1 to i64*, !dbg !7706
  %bf.load2 = load i64, i64* %5, align 8, !dbg !7706
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !7706
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !7706
  %cmp5 = icmp eq i32 %bf.cast4, 150, !dbg !7708
  br i1 %cmp5, label %if.then6, label %if.end10, !dbg !7709

if.then6:                                         ; preds = %if.end
  %6 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7710
  %exp7 = bitcast %union.tree_node* %6 to %struct.tree_exp*, !dbg !7710
  %operands8 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp7, i32 0, i32 3, !dbg !7710
  %arrayidx9 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands8, i64 0, i64 0, !dbg !7710
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx9, align 8, !dbg !7710
  store %union.tree_node* %7, %union.tree_node** %t.addr, align 8, !dbg !7711
  br label %if.end10, !dbg !7712

if.end10:                                         ; preds = %if.then6, %if.end
  %8 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7713
  %base11 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !7713
  %9 = bitcast %struct.tree_base* %base11 to i64*, !dbg !7713
  %bf.load12 = load i64, i64* %9, align 8, !dbg !7713
  %bf.clear13 = and i64 %bf.load12, 65535, !dbg !7713
  %bf.cast14 = trunc i64 %bf.clear13 to i32, !dbg !7713
  %cmp15 = icmp eq i32 %bf.cast14, 59, !dbg !7715
  br i1 %cmp15, label %if.then16, label %if.end17, !dbg !7716

if.then16:                                        ; preds = %if.end10
  %10 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7717
  store %union.tree_node* %10, %union.tree_node** %retval, align 8, !dbg !7718
  br label %return, !dbg !7718

if.end17:                                         ; preds = %if.end10
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7719
  br label %return, !dbg !7719

return:                                           ; preds = %if.end17, %if.then16
  %11 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7720
  ret %union.tree_node* %11, !dbg !7720
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @get_base_address(%union.tree_node* %t) #0 !dbg !7721 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !7722, metadata !DIExpression()), !dbg !7723
  br label %while.cond, !dbg !7724

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7725
  %call = call zeroext i8 @handled_component_p(%union.tree_node* %0), !dbg !7726
  %tobool = icmp ne i8 %call, 0, !dbg !7724
  br i1 %tobool, label %while.body, label %while.end, !dbg !7724

while.body:                                       ; preds = %while.cond
  %1 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7727
  %exp = bitcast %union.tree_node* %1 to %struct.tree_exp*, !dbg !7727
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !7727
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !7727
  %2 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !7727
  store %union.tree_node* %2, %union.tree_node** %t.addr, align 8, !dbg !7728
  br label %while.cond, !dbg !7724, !llvm.loop !7729

while.end:                                        ; preds = %while.cond
  %3 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7730
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !7730
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !7730
  %bf.load = load i64, i64* %4, align 8, !dbg !7730
  %bf.clear = and i64 %bf.load, 65535, !dbg !7730
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7730
  %cmp = icmp eq i32 %bf.cast, 32, !dbg !7730
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !7730

lor.lhs.false:                                    ; preds = %while.end
  %5 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7730
  %base1 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !7730
  %6 = bitcast %struct.tree_base* %base1 to i64*, !dbg !7730
  %bf.load2 = load i64, i64* %6, align 8, !dbg !7730
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !7730
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !7730
  %cmp5 = icmp eq i32 %bf.cast4, 34, !dbg !7730
  br i1 %cmp5, label %if.then, label %lor.lhs.false6, !dbg !7730

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %7 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7730
  %base7 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !7730
  %8 = bitcast %struct.tree_base* %base7 to i64*, !dbg !7730
  %bf.load8 = load i64, i64* %8, align 8, !dbg !7730
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !7730
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !7730
  %cmp11 = icmp eq i32 %bf.cast10, 36, !dbg !7730
  br i1 %cmp11, label %if.then, label %lor.lhs.false12, !dbg !7730

lor.lhs.false12:                                  ; preds = %lor.lhs.false6
  %9 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7730
  %base13 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !7730
  %10 = bitcast %struct.tree_base* %base13 to i64*, !dbg !7730
  %bf.load14 = load i64, i64* %10, align 8, !dbg !7730
  %bf.clear15 = and i64 %bf.load14, 65535, !dbg !7730
  %bf.cast16 = trunc i64 %bf.clear15 to i32, !dbg !7730
  %cmp17 = icmp eq i32 %bf.cast16, 141, !dbg !7730
  br i1 %cmp17, label %land.lhs.true, label %lor.lhs.false39, !dbg !7730

land.lhs.true:                                    ; preds = %lor.lhs.false12
  %11 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7730
  %ssa_name = bitcast %union.tree_node* %11 to %struct.tree_ssa_name*, !dbg !7730
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !7730
  %12 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7730
  %base18 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !7730
  %13 = bitcast %struct.tree_base* %base18 to i64*, !dbg !7730
  %bf.load19 = load i64, i64* %13, align 8, !dbg !7730
  %bf.clear20 = and i64 %bf.load19, 65535, !dbg !7730
  %bf.cast21 = trunc i64 %bf.clear20 to i32, !dbg !7730
  %cmp22 = icmp eq i32 %bf.cast21, 32, !dbg !7730
  br i1 %cmp22, label %if.then, label %lor.lhs.false23, !dbg !7730

lor.lhs.false23:                                  ; preds = %land.lhs.true
  %14 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7730
  %ssa_name24 = bitcast %union.tree_node* %14 to %struct.tree_ssa_name*, !dbg !7730
  %var25 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name24, i32 0, i32 1, !dbg !7730
  %15 = load %union.tree_node*, %union.tree_node** %var25, align 8, !dbg !7730
  %base26 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !7730
  %16 = bitcast %struct.tree_base* %base26 to i64*, !dbg !7730
  %bf.load27 = load i64, i64* %16, align 8, !dbg !7730
  %bf.clear28 = and i64 %bf.load27, 65535, !dbg !7730
  %bf.cast29 = trunc i64 %bf.clear28 to i32, !dbg !7730
  %cmp30 = icmp eq i32 %bf.cast29, 34, !dbg !7730
  br i1 %cmp30, label %if.then, label %lor.lhs.false31, !dbg !7730

lor.lhs.false31:                                  ; preds = %lor.lhs.false23
  %17 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7730
  %ssa_name32 = bitcast %union.tree_node* %17 to %struct.tree_ssa_name*, !dbg !7730
  %var33 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name32, i32 0, i32 1, !dbg !7730
  %18 = load %union.tree_node*, %union.tree_node** %var33, align 8, !dbg !7730
  %base34 = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !7730
  %19 = bitcast %struct.tree_base* %base34 to i64*, !dbg !7730
  %bf.load35 = load i64, i64* %19, align 8, !dbg !7730
  %bf.clear36 = and i64 %bf.load35, 65535, !dbg !7730
  %bf.cast37 = trunc i64 %bf.clear36 to i32, !dbg !7730
  %cmp38 = icmp eq i32 %bf.cast37, 36, !dbg !7730
  br i1 %cmp38, label %if.then, label %lor.lhs.false39, !dbg !7732

lor.lhs.false39:                                  ; preds = %lor.lhs.false31, %lor.lhs.false12
  %20 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7733
  %base40 = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !7733
  %21 = bitcast %struct.tree_base* %base40 to i64*, !dbg !7733
  %bf.load41 = load i64, i64* %21, align 8, !dbg !7733
  %bf.clear42 = and i64 %bf.load41, 65535, !dbg !7733
  %bf.cast43 = trunc i64 %bf.clear42 to i32, !dbg !7733
  %cmp44 = icmp eq i32 %bf.cast43, 28, !dbg !7734
  br i1 %cmp44, label %if.then, label %lor.lhs.false45, !dbg !7735

lor.lhs.false45:                                  ; preds = %lor.lhs.false39
  %22 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7736
  %base46 = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !7736
  %23 = bitcast %struct.tree_base* %base46 to i64*, !dbg !7736
  %bf.load47 = load i64, i64* %23, align 8, !dbg !7736
  %bf.clear48 = and i64 %bf.load47, 65535, !dbg !7736
  %bf.cast49 = trunc i64 %bf.clear48 to i32, !dbg !7736
  %cmp50 = icmp eq i32 %bf.cast49, 51, !dbg !7737
  br i1 %cmp50, label %if.then, label %lor.lhs.false51, !dbg !7738

lor.lhs.false51:                                  ; preds = %lor.lhs.false45
  %24 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7739
  %base52 = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !7739
  %25 = bitcast %struct.tree_base* %base52 to i64*, !dbg !7739
  %bf.load53 = load i64, i64* %25, align 8, !dbg !7739
  %bf.clear54 = and i64 %bf.load53, 65535, !dbg !7739
  %bf.cast55 = trunc i64 %bf.clear54 to i32, !dbg !7739
  %cmp56 = icmp eq i32 %bf.cast55, 47, !dbg !7739
  br i1 %cmp56, label %if.then, label %lor.lhs.false57, !dbg !7739

lor.lhs.false57:                                  ; preds = %lor.lhs.false51
  %26 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7739
  %base58 = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !7739
  %27 = bitcast %struct.tree_base* %base58 to i64*, !dbg !7739
  %bf.load59 = load i64, i64* %27, align 8, !dbg !7739
  %bf.clear60 = and i64 %bf.load59, 65535, !dbg !7739
  %bf.cast61 = trunc i64 %bf.clear60 to i32, !dbg !7739
  %cmp62 = icmp eq i32 %bf.cast61, 48, !dbg !7739
  br i1 %cmp62, label %if.then, label %lor.lhs.false63, !dbg !7739

lor.lhs.false63:                                  ; preds = %lor.lhs.false57
  %28 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7739
  %base64 = bitcast %union.tree_node* %28 to %struct.tree_base*, !dbg !7739
  %29 = bitcast %struct.tree_base* %base64 to i64*, !dbg !7739
  %bf.load65 = load i64, i64* %29, align 8, !dbg !7739
  %bf.clear66 = and i64 %bf.load65, 65535, !dbg !7739
  %bf.cast67 = trunc i64 %bf.clear66 to i32, !dbg !7739
  %cmp68 = icmp eq i32 %bf.cast67, 49, !dbg !7739
  br i1 %cmp68, label %if.then, label %if.else, !dbg !7740

if.then:                                          ; preds = %lor.lhs.false63, %lor.lhs.false57, %lor.lhs.false51, %lor.lhs.false45, %lor.lhs.false39, %lor.lhs.false31, %lor.lhs.false23, %land.lhs.true, %lor.lhs.false6, %lor.lhs.false, %while.end
  %30 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7741
  store %union.tree_node* %30, %union.tree_node** %retval, align 8, !dbg !7742
  br label %return, !dbg !7742

if.else:                                          ; preds = %lor.lhs.false63
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7743
  br label %return, !dbg !7743

return:                                           ; preds = %if.else, %if.then
  %31 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7744
  ret %union.tree_node* %31, !dbg !7744
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @recalculate_side_effects(%union.tree_node* %t) #0 !dbg !7745 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  %code = alloca i32, align 4
  %len = alloca i32, align 4
  %i = alloca i32, align 4
  %op = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !7748, metadata !DIExpression()), !dbg !7749
  call void @llvm.dbg.declare(metadata i32* %code, metadata !7750, metadata !DIExpression()), !dbg !7751
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7752
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !7752
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !7752
  %bf.load = load i64, i64* %1, align 8, !dbg !7752
  %bf.clear = and i64 %bf.load, 65535, !dbg !7752
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7752
  store i32 %bf.cast, i32* %code, align 4, !dbg !7751
  call void @llvm.dbg.declare(metadata i32* %len, metadata !7753, metadata !DIExpression()), !dbg !7754
  %2 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7755
  %call = call i32 @tree_operand_length(%union.tree_node* %2), !dbg !7755
  store i32 %call, i32* %len, align 4, !dbg !7754
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7756, metadata !DIExpression()), !dbg !7757
  %3 = load i32, i32* %code, align 4, !dbg !7758
  %idxprom = sext i32 %3 to i64, !dbg !7758
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !7758
  %4 = load i32, i32* %arrayidx, align 4, !dbg !7758
  switch i32 %4, label %sw.default23 [
    i32 10, label %sw.bb
    i32 5, label %sw.bb2
    i32 6, label %sw.bb2
    i32 7, label %sw.bb2
    i32 4, label %sw.bb2
    i32 9, label %sw.bb2
    i32 1, label %sw.bb22
  ], !dbg !7759

sw.bb:                                            ; preds = %entry
  %5 = load i32, i32* %code, align 4, !dbg !7760
  switch i32 %5, label %sw.default [
    i32 54, label %sw.bb1
    i32 53, label %sw.bb1
    i32 129, label %sw.bb1
    i32 125, label %sw.bb1
    i32 126, label %sw.bb1
    i32 127, label %sw.bb1
    i32 128, label %sw.bb1
  ], !dbg !7762

sw.bb1:                                           ; preds = %sw.bb, %sw.bb, %sw.bb, %sw.bb, %sw.bb, %sw.bb, %sw.bb
  br label %sw.epilog24, !dbg !7763

sw.default:                                       ; preds = %sw.bb
  br label %sw.epilog, !dbg !7765

sw.epilog:                                        ; preds = %sw.default
  br label %sw.bb2, !dbg !7766

sw.bb2:                                           ; preds = %entry, %entry, %entry, %entry, %entry, %sw.epilog
  %6 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7767
  %base3 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !7767
  %7 = bitcast %struct.tree_base* %base3 to i64*, !dbg !7767
  %bf.load4 = load i64, i64* %7, align 8, !dbg !7767
  %bf.lshr = lshr i64 %bf.load4, 19, !dbg !7767
  %bf.clear5 = and i64 %bf.lshr, 1, !dbg !7767
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !7767
  %8 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7768
  %base7 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !7768
  %9 = bitcast %struct.tree_base* %base7 to i64*, !dbg !7768
  %10 = zext i32 %bf.cast6 to i64, !dbg !7769
  %bf.load8 = load i64, i64* %9, align 8, !dbg !7769
  %bf.value = and i64 %10, 1, !dbg !7769
  %bf.shl = shl i64 %bf.value, 16, !dbg !7769
  %bf.clear9 = and i64 %bf.load8, -65537, !dbg !7769
  %bf.set = or i64 %bf.clear9, %bf.shl, !dbg !7769
  store i64 %bf.set, i64* %9, align 8, !dbg !7769
  %bf.result.cast = trunc i64 %bf.value to i32, !dbg !7769
  store i32 0, i32* %i, align 4, !dbg !7770
  br label %for.cond, !dbg !7772

for.cond:                                         ; preds = %for.inc, %sw.bb2
  %11 = load i32, i32* %i, align 4, !dbg !7773
  %12 = load i32, i32* %len, align 4, !dbg !7775
  %cmp = icmp slt i32 %11, %12, !dbg !7776
  br i1 %cmp, label %for.body, label %for.end, !dbg !7777

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %op, metadata !7778, metadata !DIExpression()), !dbg !7780
  %13 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7781
  %exp = bitcast %union.tree_node* %13 to %struct.tree_exp*, !dbg !7781
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !7781
  %14 = load i32, i32* %i, align 4, !dbg !7781
  %idxprom10 = sext i32 %14 to i64, !dbg !7781
  %arrayidx11 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 %idxprom10, !dbg !7781
  %15 = load %union.tree_node*, %union.tree_node** %arrayidx11, align 8, !dbg !7781
  store %union.tree_node* %15, %union.tree_node** %op, align 8, !dbg !7780
  %16 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !7782
  %tobool = icmp ne %union.tree_node* %16, null, !dbg !7782
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !7784

land.lhs.true:                                    ; preds = %for.body
  %17 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !7785
  %base12 = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !7785
  %18 = bitcast %struct.tree_base* %base12 to i64*, !dbg !7785
  %bf.load13 = load i64, i64* %18, align 8, !dbg !7785
  %bf.lshr14 = lshr i64 %bf.load13, 16, !dbg !7785
  %bf.clear15 = and i64 %bf.lshr14, 1, !dbg !7785
  %bf.cast16 = trunc i64 %bf.clear15 to i32, !dbg !7785
  %tobool17 = icmp ne i32 %bf.cast16, 0, !dbg !7785
  br i1 %tobool17, label %if.then, label %if.end, !dbg !7786

if.then:                                          ; preds = %land.lhs.true
  %19 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7787
  %base18 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !7787
  %20 = bitcast %struct.tree_base* %base18 to i64*, !dbg !7787
  %bf.load19 = load i64, i64* %20, align 8, !dbg !7788
  %bf.clear20 = and i64 %bf.load19, -65537, !dbg !7788
  %bf.set21 = or i64 %bf.clear20, 65536, !dbg !7788
  store i64 %bf.set21, i64* %20, align 8, !dbg !7788
  br label %if.end, !dbg !7787

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body
  br label %for.inc, !dbg !7789

for.inc:                                          ; preds = %if.end
  %21 = load i32, i32* %i, align 4, !dbg !7790
  %inc = add nsw i32 %21, 1, !dbg !7790
  store i32 %inc, i32* %i, align 4, !dbg !7790
  br label %for.cond, !dbg !7791, !llvm.loop !7792

for.end:                                          ; preds = %for.cond
  br label %sw.epilog24, !dbg !7794

sw.bb22:                                          ; preds = %entry
  br label %sw.epilog24, !dbg !7795

sw.default23:                                     ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 2917, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !7796
  br label %sw.epilog24, !dbg !7797

sw.epilog24:                                      ; preds = %sw.bb1, %sw.bb22, %sw.default23, %for.end
  ret void, !dbg !7798
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @tree_operand_length(%union.tree_node* %node) #0 !dbg !7799 {
entry:
  %retval = alloca i32, align 4
  %node.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %node, %union.tree_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %node.addr, metadata !7802, metadata !DIExpression()), !dbg !7803
  %0 = load %union.tree_node*, %union.tree_node** %node.addr, align 8, !dbg !7804
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !7804
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !7804
  %bf.load = load i64, i64* %1, align 8, !dbg !7804
  %bf.clear = and i64 %bf.load, 65535, !dbg !7804
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7804
  %idxprom = sext i32 %bf.cast to i64, !dbg !7804
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !7804
  %2 = load i32, i32* %arrayidx, align 4, !dbg !7804
  %cmp = icmp eq i32 %2, 9, !dbg !7804
  br i1 %cmp, label %if.then, label %if.else, !dbg !7806

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %node.addr, align 8, !dbg !7807
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !7807
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !7807
  %arrayidx1 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !7807
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx1, align 8, !dbg !7807
  %int_cst = bitcast %union.tree_node* %4 to %struct.tree_int_cst*, !dbg !7807
  %int_cst2 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !7807
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst2, i32 0, i32 0, !dbg !7807
  %5 = load i64, i64* %low, align 8, !dbg !7807
  %conv = trunc i64 %5 to i32, !dbg !7807
  store i32 %conv, i32* %retval, align 4, !dbg !7808
  br label %return, !dbg !7808

if.else:                                          ; preds = %entry
  %6 = load %union.tree_node*, %union.tree_node** %node.addr, align 8, !dbg !7809
  %base3 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !7809
  %7 = bitcast %struct.tree_base* %base3 to i64*, !dbg !7809
  %bf.load4 = load i64, i64* %7, align 8, !dbg !7809
  %bf.clear5 = and i64 %bf.load4, 65535, !dbg !7809
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !7809
  %idxprom7 = sext i32 %bf.cast6 to i64, !dbg !7809
  %arrayidx8 = getelementptr inbounds [0 x i8], [0 x i8]* @tree_code_length, i64 0, i64 %idxprom7, !dbg !7809
  %8 = load i8, i8* %arrayidx8, align 1, !dbg !7809
  %conv9 = zext i8 %8 to i32, !dbg !7809
  store i32 %conv9, i32* %retval, align 4, !dbg !7810
  br label %return, !dbg !7810

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !7811
  ret i32 %9, !dbg !7811
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @canonicalize_cond_expr_cond(%union.tree_node* %t) #0 !dbg !7812 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %t.addr = alloca %union.tree_node*, align 8
  %top0 = alloca %union.tree_node*, align 8
  %top050 = alloca %union.tree_node*, align 8
  %top091 = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !7813, metadata !DIExpression()), !dbg !7814
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7815
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !7815
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !7815
  %bf.load = load i64, i64* %1, align 8, !dbg !7815
  %bf.clear = and i64 %bf.load, 65535, !dbg !7815
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7815
  %cmp = icmp eq i32 %bf.cast, 116, !dbg !7815
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !7815

lor.lhs.false:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7815
  %base1 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !7815
  %3 = bitcast %struct.tree_base* %base1 to i64*, !dbg !7815
  %bf.load2 = load i64, i64* %3, align 8, !dbg !7815
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !7815
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !7815
  %cmp5 = icmp eq i32 %bf.cast4, 113, !dbg !7815
  br i1 %cmp5, label %land.lhs.true, label %if.end, !dbg !7817

land.lhs.true:                                    ; preds = %lor.lhs.false, %entry
  %4 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7818
  %exp = bitcast %union.tree_node* %4 to %struct.tree_exp*, !dbg !7818
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !7818
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !7818
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !7818
  %base6 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !7818
  %6 = bitcast %struct.tree_base* %base6 to i64*, !dbg !7818
  %bf.load7 = load i64, i64* %6, align 8, !dbg !7818
  %bf.clear8 = and i64 %bf.load7, 65535, !dbg !7818
  %bf.cast9 = trunc i64 %bf.clear8 to i32, !dbg !7818
  %call = call zeroext i8 @truth_value_p(i32 %bf.cast9), !dbg !7819
  %conv = zext i8 %call to i32, !dbg !7819
  %tobool = icmp ne i32 %conv, 0, !dbg !7819
  br i1 %tobool, label %if.then, label %if.end, !dbg !7820

if.then:                                          ; preds = %land.lhs.true
  %7 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7821
  %exp10 = bitcast %union.tree_node* %7 to %struct.tree_exp*, !dbg !7821
  %operands11 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp10, i32 0, i32 3, !dbg !7821
  %arrayidx12 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands11, i64 0, i64 0, !dbg !7821
  %8 = load %union.tree_node*, %union.tree_node** %arrayidx12, align 8, !dbg !7821
  store %union.tree_node* %8, %union.tree_node** %t.addr, align 8, !dbg !7822
  br label %if.end, !dbg !7823

if.end:                                           ; preds = %if.then, %land.lhs.true, %lor.lhs.false
  %9 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7824
  %base13 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !7824
  %10 = bitcast %struct.tree_base* %base13 to i64*, !dbg !7824
  %bf.load14 = load i64, i64* %10, align 8, !dbg !7824
  %bf.clear15 = and i64 %bf.load14, 65535, !dbg !7824
  %bf.cast16 = trunc i64 %bf.clear15 to i32, !dbg !7824
  %cmp17 = icmp eq i32 %bf.cast16, 116, !dbg !7824
  br i1 %cmp17, label %land.lhs.true26, label %lor.lhs.false19, !dbg !7824

lor.lhs.false19:                                  ; preds = %if.end
  %11 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7824
  %base20 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !7824
  %12 = bitcast %struct.tree_base* %base20 to i64*, !dbg !7824
  %bf.load21 = load i64, i64* %12, align 8, !dbg !7824
  %bf.clear22 = and i64 %bf.load21, 65535, !dbg !7824
  %bf.cast23 = trunc i64 %bf.clear22 to i32, !dbg !7824
  %cmp24 = icmp eq i32 %bf.cast23, 113, !dbg !7824
  br i1 %cmp24, label %land.lhs.true26, label %if.else, !dbg !7826

land.lhs.true26:                                  ; preds = %lor.lhs.false19, %if.end
  %13 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7827
  %common = bitcast %union.tree_node* %13 to %struct.tree_common*, !dbg !7827
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7827
  %14 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7827
  %base27 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !7827
  %15 = bitcast %struct.tree_base* %base27 to i64*, !dbg !7827
  %bf.load28 = load i64, i64* %15, align 8, !dbg !7827
  %bf.clear29 = and i64 %bf.load28, 65535, !dbg !7827
  %bf.cast30 = trunc i64 %bf.clear29 to i32, !dbg !7827
  %cmp31 = icmp eq i32 %bf.cast30, 7, !dbg !7828
  br i1 %cmp31, label %if.then33, label %if.else, !dbg !7829

if.then33:                                        ; preds = %land.lhs.true26
  call void @llvm.dbg.declare(metadata %union.tree_node** %top0, metadata !7830, metadata !DIExpression()), !dbg !7832
  %16 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7833
  %exp34 = bitcast %union.tree_node* %16 to %struct.tree_exp*, !dbg !7833
  %operands35 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp34, i32 0, i32 3, !dbg !7833
  %arrayidx36 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands35, i64 0, i64 0, !dbg !7833
  %17 = load %union.tree_node*, %union.tree_node** %arrayidx36, align 8, !dbg !7833
  store %union.tree_node* %17, %union.tree_node** %top0, align 8, !dbg !7832
  %18 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7834
  %common37 = bitcast %union.tree_node* %18 to %struct.tree_common*, !dbg !7834
  %type38 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common37, i32 0, i32 2, !dbg !7834
  %19 = load %union.tree_node*, %union.tree_node** %type38, align 8, !dbg !7834
  %20 = load %union.tree_node*, %union.tree_node** %top0, align 8, !dbg !7834
  %21 = load %union.tree_node*, %union.tree_node** %top0, align 8, !dbg !7834
  %common39 = bitcast %union.tree_node* %21 to %struct.tree_common*, !dbg !7834
  %type40 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common39, i32 0, i32 2, !dbg !7834
  %22 = load %union.tree_node*, %union.tree_node** %type40, align 8, !dbg !7834
  %call41 = call %union.tree_node* @build_int_cst(%union.tree_node* %22, i64 0), !dbg !7834
  %call42 = call %union.tree_node* @build2_stat(i32 102, %union.tree_node* %19, %union.tree_node* %20, %union.tree_node* %call41), !dbg !7834
  store %union.tree_node* %call42, %union.tree_node** %t.addr, align 8, !dbg !7835
  br label %if.end110, !dbg !7836

if.else:                                          ; preds = %land.lhs.true26, %lor.lhs.false19
  %23 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7837
  %base43 = bitcast %union.tree_node* %23 to %struct.tree_base*, !dbg !7837
  %24 = bitcast %struct.tree_base* %base43 to i64*, !dbg !7837
  %bf.load44 = load i64, i64* %24, align 8, !dbg !7837
  %bf.clear45 = and i64 %bf.load44, 65535, !dbg !7837
  %bf.cast46 = trunc i64 %bf.clear45 to i32, !dbg !7837
  %cmp47 = icmp eq i32 %bf.cast46, 96, !dbg !7839
  br i1 %cmp47, label %if.then49, label %if.else60, !dbg !7840

if.then49:                                        ; preds = %if.else
  call void @llvm.dbg.declare(metadata %union.tree_node** %top050, metadata !7841, metadata !DIExpression()), !dbg !7843
  %25 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7844
  %exp51 = bitcast %union.tree_node* %25 to %struct.tree_exp*, !dbg !7844
  %operands52 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp51, i32 0, i32 3, !dbg !7844
  %arrayidx53 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands52, i64 0, i64 0, !dbg !7844
  %26 = load %union.tree_node*, %union.tree_node** %arrayidx53, align 8, !dbg !7844
  store %union.tree_node* %26, %union.tree_node** %top050, align 8, !dbg !7843
  %27 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7845
  %common54 = bitcast %union.tree_node* %27 to %struct.tree_common*, !dbg !7845
  %type55 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common54, i32 0, i32 2, !dbg !7845
  %28 = load %union.tree_node*, %union.tree_node** %type55, align 8, !dbg !7845
  %29 = load %union.tree_node*, %union.tree_node** %top050, align 8, !dbg !7845
  %30 = load %union.tree_node*, %union.tree_node** %top050, align 8, !dbg !7845
  %common56 = bitcast %union.tree_node* %30 to %struct.tree_common*, !dbg !7845
  %type57 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common56, i32 0, i32 2, !dbg !7845
  %31 = load %union.tree_node*, %union.tree_node** %type57, align 8, !dbg !7845
  %call58 = call %union.tree_node* @build_int_cst(%union.tree_node* %31, i64 0), !dbg !7845
  %call59 = call %union.tree_node* @build2_stat(i32 101, %union.tree_node* %28, %union.tree_node* %29, %union.tree_node* %call58), !dbg !7845
  store %union.tree_node* %call59, %union.tree_node** %t.addr, align 8, !dbg !7846
  br label %if.end109, !dbg !7847

if.else60:                                        ; preds = %if.else
  %32 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7848
  %base61 = bitcast %union.tree_node* %32 to %struct.tree_base*, !dbg !7848
  %33 = bitcast %struct.tree_base* %base61 to i64*, !dbg !7848
  %bf.load62 = load i64, i64* %33, align 8, !dbg !7848
  %bf.clear63 = and i64 %bf.load62, 65535, !dbg !7848
  %bf.cast64 = trunc i64 %bf.clear63 to i32, !dbg !7848
  %cmp65 = icmp eq i32 %bf.cast64, 56, !dbg !7850
  br i1 %cmp65, label %land.lhs.true67, label %if.end108, !dbg !7851

land.lhs.true67:                                  ; preds = %if.else60
  %34 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7852
  %exp68 = bitcast %union.tree_node* %34 to %struct.tree_exp*, !dbg !7852
  %operands69 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp68, i32 0, i32 3, !dbg !7852
  %arrayidx70 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands69, i64 0, i64 0, !dbg !7852
  %35 = load %union.tree_node*, %union.tree_node** %arrayidx70, align 8, !dbg !7852
  %base71 = bitcast %union.tree_node* %35 to %struct.tree_base*, !dbg !7852
  %36 = bitcast %struct.tree_base* %base71 to i64*, !dbg !7852
  %bf.load72 = load i64, i64* %36, align 8, !dbg !7852
  %bf.clear73 = and i64 %bf.load72, 65535, !dbg !7852
  %bf.cast74 = trunc i64 %bf.clear73 to i32, !dbg !7852
  %idxprom = sext i32 %bf.cast74 to i64, !dbg !7852
  %arrayidx75 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !7852
  %37 = load i32, i32* %arrayidx75, align 4, !dbg !7852
  %cmp76 = icmp eq i32 %37, 5, !dbg !7852
  br i1 %cmp76, label %land.lhs.true78, label %if.end108, !dbg !7853

land.lhs.true78:                                  ; preds = %land.lhs.true67
  %38 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7854
  %exp79 = bitcast %union.tree_node* %38 to %struct.tree_exp*, !dbg !7854
  %operands80 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp79, i32 0, i32 3, !dbg !7854
  %arrayidx81 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands80, i64 0, i64 1, !dbg !7854
  %39 = load %union.tree_node*, %union.tree_node** %arrayidx81, align 8, !dbg !7854
  %call82 = call i32 @integer_onep(%union.tree_node* %39), !dbg !7855
  %tobool83 = icmp ne i32 %call82, 0, !dbg !7855
  br i1 %tobool83, label %land.lhs.true84, label %if.end108, !dbg !7856

land.lhs.true84:                                  ; preds = %land.lhs.true78
  %40 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7857
  %exp85 = bitcast %union.tree_node* %40 to %struct.tree_exp*, !dbg !7857
  %operands86 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp85, i32 0, i32 3, !dbg !7857
  %arrayidx87 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands86, i64 0, i64 2, !dbg !7857
  %41 = load %union.tree_node*, %union.tree_node** %arrayidx87, align 8, !dbg !7857
  %call88 = call i32 @integer_zerop(%union.tree_node* %41), !dbg !7858
  %tobool89 = icmp ne i32 %call88, 0, !dbg !7858
  br i1 %tobool89, label %if.then90, label %if.end108, !dbg !7859

if.then90:                                        ; preds = %land.lhs.true84
  call void @llvm.dbg.declare(metadata %union.tree_node** %top091, metadata !7860, metadata !DIExpression()), !dbg !7862
  %42 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7863
  %exp92 = bitcast %union.tree_node* %42 to %struct.tree_exp*, !dbg !7863
  %operands93 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp92, i32 0, i32 3, !dbg !7863
  %arrayidx94 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands93, i64 0, i64 0, !dbg !7863
  %43 = load %union.tree_node*, %union.tree_node** %arrayidx94, align 8, !dbg !7863
  store %union.tree_node* %43, %union.tree_node** %top091, align 8, !dbg !7862
  %44 = load %union.tree_node*, %union.tree_node** %top091, align 8, !dbg !7864
  %base95 = bitcast %union.tree_node* %44 to %struct.tree_base*, !dbg !7864
  %45 = bitcast %struct.tree_base* %base95 to i64*, !dbg !7864
  %bf.load96 = load i64, i64* %45, align 8, !dbg !7864
  %bf.clear97 = and i64 %bf.load96, 65535, !dbg !7864
  %bf.cast98 = trunc i64 %bf.clear97 to i32, !dbg !7864
  %46 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7864
  %common99 = bitcast %union.tree_node* %46 to %struct.tree_common*, !dbg !7864
  %type100 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common99, i32 0, i32 2, !dbg !7864
  %47 = load %union.tree_node*, %union.tree_node** %type100, align 8, !dbg !7864
  %48 = load %union.tree_node*, %union.tree_node** %top091, align 8, !dbg !7864
  %exp101 = bitcast %union.tree_node* %48 to %struct.tree_exp*, !dbg !7864
  %operands102 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp101, i32 0, i32 3, !dbg !7864
  %arrayidx103 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands102, i64 0, i64 0, !dbg !7864
  %49 = load %union.tree_node*, %union.tree_node** %arrayidx103, align 8, !dbg !7864
  %50 = load %union.tree_node*, %union.tree_node** %top091, align 8, !dbg !7864
  %exp104 = bitcast %union.tree_node* %50 to %struct.tree_exp*, !dbg !7864
  %operands105 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp104, i32 0, i32 3, !dbg !7864
  %arrayidx106 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands105, i64 0, i64 1, !dbg !7864
  %51 = load %union.tree_node*, %union.tree_node** %arrayidx106, align 8, !dbg !7864
  %call107 = call %union.tree_node* @build2_stat(i32 %bf.cast98, %union.tree_node* %47, %union.tree_node* %49, %union.tree_node* %51), !dbg !7864
  store %union.tree_node* %call107, %union.tree_node** %t.addr, align 8, !dbg !7865
  br label %if.end108, !dbg !7866

if.end108:                                        ; preds = %if.then90, %land.lhs.true84, %land.lhs.true78, %land.lhs.true67, %if.else60
  br label %if.end109

if.end109:                                        ; preds = %if.end108, %if.then49
  br label %if.end110

if.end110:                                        ; preds = %if.end109, %if.then33
  %52 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7867
  %call111 = call zeroext i8 @is_gimple_condexpr(%union.tree_node* %52), !dbg !7869
  %tobool112 = icmp ne i8 %call111, 0, !dbg !7869
  br i1 %tobool112, label %if.then113, label %if.end114, !dbg !7870

if.then113:                                       ; preds = %if.end110
  %53 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7871
  store %union.tree_node* %53, %union.tree_node** %retval, align 8, !dbg !7872
  br label %return, !dbg !7872

if.end114:                                        ; preds = %if.end110
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7873
  br label %return, !dbg !7873

return:                                           ; preds = %if.end114, %if.then113
  %54 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7874
  ret %union.tree_node* %54, !dbg !7874
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @truth_value_p(i32 %code) #0 !dbg !7875 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !7878, metadata !DIExpression()), !dbg !7879
  %0 = load i32, i32* %code.addr, align 4, !dbg !7880
  %idxprom = sext i32 %0 to i64, !dbg !7880
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !7880
  %1 = load i32, i32* %arrayidx, align 4, !dbg !7880
  %cmp = icmp eq i32 %1, 5, !dbg !7881
  br i1 %cmp, label %lor.end, label %lor.lhs.false, !dbg !7882

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %code.addr, align 4, !dbg !7883
  %cmp1 = icmp eq i32 %2, 93, !dbg !7884
  br i1 %cmp1, label %lor.end, label %lor.lhs.false2, !dbg !7885

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %3 = load i32, i32* %code.addr, align 4, !dbg !7886
  %cmp3 = icmp eq i32 %3, 91, !dbg !7887
  br i1 %cmp3, label %lor.end, label %lor.lhs.false4, !dbg !7888

lor.lhs.false4:                                   ; preds = %lor.lhs.false2
  %4 = load i32, i32* %code.addr, align 4, !dbg !7889
  %cmp5 = icmp eq i32 %4, 94, !dbg !7890
  br i1 %cmp5, label %lor.end, label %lor.lhs.false6, !dbg !7891

lor.lhs.false6:                                   ; preds = %lor.lhs.false4
  %5 = load i32, i32* %code.addr, align 4, !dbg !7892
  %cmp7 = icmp eq i32 %5, 92, !dbg !7893
  br i1 %cmp7, label %lor.end, label %lor.lhs.false8, !dbg !7894

lor.lhs.false8:                                   ; preds = %lor.lhs.false6
  %6 = load i32, i32* %code.addr, align 4, !dbg !7895
  %cmp9 = icmp eq i32 %6, 95, !dbg !7896
  br i1 %cmp9, label %lor.end, label %lor.rhs, !dbg !7897

lor.rhs:                                          ; preds = %lor.lhs.false8
  %7 = load i32, i32* %code.addr, align 4, !dbg !7898
  %cmp10 = icmp eq i32 %7, 96, !dbg !7899
  br label %lor.end, !dbg !7897

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false8, %lor.lhs.false6, %lor.lhs.false4, %lor.lhs.false2, %lor.lhs.false, %entry
  %8 = phi i1 [ true, %lor.lhs.false8 ], [ true, %lor.lhs.false6 ], [ true, %lor.lhs.false4 ], [ true, %lor.lhs.false2 ], [ true, %lor.lhs.false ], [ true, %entry ], [ %cmp10, %lor.rhs ]
  %lor.ext = zext i1 %8 to i32, !dbg !7897
  %conv = trunc i32 %lor.ext to i8, !dbg !7900
  ret i8 %conv, !dbg !7901
}

declare dso_local %union.tree_node* @build_int_cst(%union.tree_node*, i64) #2

declare dso_local i32 @integer_onep(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_call_copy_skip_args(%union.gimple_statement_d* %stmt, %struct.bitmap_head_def* %args_to_skip) #0 !dbg !7902 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %args_to_skip.addr = alloca %struct.bitmap_head_def*, align 8
  %i = alloca i32, align 4
  %fn = alloca %union.tree_node*, align 8
  %nargs = alloca i32, align 4
  %vargs = alloca %struct.VEC_tree_heap*, align 8
  %new_stmt = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !7905, metadata !DIExpression()), !dbg !7906
  store %struct.bitmap_head_def* %args_to_skip, %struct.bitmap_head_def** %args_to_skip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %args_to_skip.addr, metadata !7907, metadata !DIExpression()), !dbg !7908
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7909, metadata !DIExpression()), !dbg !7910
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !7911, metadata !DIExpression()), !dbg !7912
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7913
  %call = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %0), !dbg !7914
  store %union.tree_node* %call, %union.tree_node** %fn, align 8, !dbg !7912
  call void @llvm.dbg.declare(metadata i32* %nargs, metadata !7915, metadata !DIExpression()), !dbg !7916
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7917
  %call1 = call i32 @gimple_call_num_args(%union.gimple_statement_d* %1), !dbg !7918
  store i32 %call1, i32* %nargs, align 4, !dbg !7916
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %vargs, metadata !7919, metadata !DIExpression()), !dbg !7920
  %2 = load i32, i32* %nargs, align 4, !dbg !7921
  %call2 = call %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 %2), !dbg !7921
  store %struct.VEC_tree_heap* %call2, %struct.VEC_tree_heap** %vargs, align 8, !dbg !7920
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %new_stmt, metadata !7922, metadata !DIExpression()), !dbg !7923
  store i32 0, i32* %i, align 4, !dbg !7924
  br label %for.cond, !dbg !7926

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4, !dbg !7927
  %4 = load i32, i32* %nargs, align 4, !dbg !7929
  %cmp = icmp slt i32 %3, %4, !dbg !7930
  br i1 %cmp, label %for.body, label %for.end, !dbg !7931

for.body:                                         ; preds = %for.cond
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %args_to_skip.addr, align 8, !dbg !7932
  %6 = load i32, i32* %i, align 4, !dbg !7934
  %call3 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %5, i32 %6), !dbg !7935
  %tobool = icmp ne i32 %call3, 0, !dbg !7935
  br i1 %tobool, label %if.end, label %if.then, !dbg !7936

if.then:                                          ; preds = %for.body
  %7 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vargs, align 8, !dbg !7937
  %tobool4 = icmp ne %struct.VEC_tree_heap* %7, null, !dbg !7937
  br i1 %tobool4, label %cond.true, label %cond.false, !dbg !7937

cond.true:                                        ; preds = %if.then
  %8 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vargs, align 8, !dbg !7937
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %8, i32 0, i32 0, !dbg !7937
  br label %cond.end, !dbg !7937

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !7937

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7937
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7937
  %10 = load i32, i32* %i, align 4, !dbg !7937
  %call5 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %9, i32 %10), !dbg !7937
  %call6 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond, %union.tree_node* %call5), !dbg !7937
  br label %if.end, !dbg !7937

if.end:                                           ; preds = %cond.end, %for.body
  br label %for.inc, !dbg !7938

for.inc:                                          ; preds = %if.end
  %11 = load i32, i32* %i, align 4, !dbg !7939
  %inc = add nsw i32 %11, 1, !dbg !7939
  store i32 %inc, i32* %i, align 4, !dbg !7939
  br label %for.cond, !dbg !7940, !llvm.loop !7941

for.end:                                          ; preds = %for.cond
  %12 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !7943
  %13 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vargs, align 8, !dbg !7944
  %call7 = call %union.gimple_statement_d* @gimple_build_call_vec(%union.tree_node* %12, %struct.VEC_tree_heap* %13), !dbg !7945
  store %union.gimple_statement_d* %call7, %union.gimple_statement_d** %new_stmt, align 8, !dbg !7946
  call void @VEC_tree_heap_free(%struct.VEC_tree_heap** %vargs), !dbg !7947
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7948
  %call8 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %14), !dbg !7950
  %tobool9 = icmp ne %union.tree_node* %call8, null, !dbg !7950
  br i1 %tobool9, label %if.then10, label %if.end12, !dbg !7951

if.then10:                                        ; preds = %for.end
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !7952
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7953
  %call11 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %16), !dbg !7954
  call void @gimple_call_set_lhs(%union.gimple_statement_d* %15, %union.tree_node* %call11), !dbg !7955
  br label %if.end12, !dbg !7955

if.end12:                                         ; preds = %if.then10, %for.end
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !7956
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7957
  %call13 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %18), !dbg !7958
  call void @gimple_set_vuse(%union.gimple_statement_d* %17, %union.tree_node* %call13), !dbg !7959
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !7960
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7961
  %call14 = call %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %20), !dbg !7962
  call void @gimple_set_vdef(%union.gimple_statement_d* %19, %union.tree_node* %call14), !dbg !7963
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !7964
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7965
  %call15 = call %union.tree_node* @gimple_block(%union.gimple_statement_d* %22), !dbg !7966
  call void @gimple_set_block(%union.gimple_statement_d* %21, %union.tree_node* %call15), !dbg !7967
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7968
  %call16 = call zeroext i8 @gimple_has_location(%union.gimple_statement_d* %23), !dbg !7970
  %tobool17 = icmp ne i8 %call16, 0, !dbg !7970
  br i1 %tobool17, label %if.then18, label %if.end20, !dbg !7971

if.then18:                                        ; preds = %if.end12
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !7972
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7973
  %call19 = call i32 @gimple_location(%union.gimple_statement_d* %25), !dbg !7974
  call void @gimple_set_location(%union.gimple_statement_d* %24, i32 %call19), !dbg !7975
  br label %if.end20, !dbg !7975

if.end20:                                         ; preds = %if.then18, %if.end12
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !7976
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7977
  %call21 = call %union.tree_node* @gimple_call_chain(%union.gimple_statement_d* %27), !dbg !7978
  call void @gimple_call_set_chain(%union.gimple_statement_d* %26, %union.tree_node* %call21), !dbg !7979
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !7980
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7981
  %call22 = call zeroext i8 @gimple_call_tail_p(%union.gimple_statement_d* %29), !dbg !7982
  call void @gimple_call_set_tail(%union.gimple_statement_d* %28, i8 zeroext %call22), !dbg !7983
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !7984
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7985
  %call23 = call zeroext i8 @gimple_call_cannot_inline_p(%union.gimple_statement_d* %31), !dbg !7986
  call void @gimple_call_set_cannot_inline(%union.gimple_statement_d* %30, i8 zeroext %call23), !dbg !7987
  %32 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !7988
  %33 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7989
  %call24 = call zeroext i8 @gimple_call_return_slot_opt_p(%union.gimple_statement_d* %33), !dbg !7990
  call void @gimple_call_set_return_slot_opt(%union.gimple_statement_d* %32, i8 zeroext %call24), !dbg !7991
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !7992
  %35 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7993
  %call25 = call zeroext i8 @gimple_call_from_thunk_p(%union.gimple_statement_d* %35), !dbg !7994
  call void @gimple_call_set_from_thunk(%union.gimple_statement_d* %34, i8 zeroext %call25), !dbg !7995
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !7996
  %37 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7997
  %call26 = call zeroext i8 @gimple_call_va_arg_pack_p(%union.gimple_statement_d* %37), !dbg !7998
  call void @gimple_call_set_va_arg_pack(%union.gimple_statement_d* %36, i8 zeroext %call26), !dbg !7999
  %38 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !8000
  call void @gimple_set_modified(%union.gimple_statement_d* %38, i8 zeroext 1), !dbg !8001
  %39 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !8002
  ret %union.gimple_statement_d* %39, !dbg !8003
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 %alloc_) #0 !dbg !8004 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !8007, metadata !DIExpression()), !dbg !8008
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !8008
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !8008
  %1 = bitcast i8* %call to %struct.VEC_tree_heap*, !dbg !8008
  ret %struct.VEC_tree_heap* %1, !dbg !8008
}

declare dso_local i32 @bitmap_bit_p(%struct.bitmap_head_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %vec_, %union.tree_node* %obj_) #0 !dbg !8009 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %obj_.addr = alloca %union.tree_node*, align 8
  %slot_ = alloca %union.tree_node**, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !8013, metadata !DIExpression()), !dbg !8014
  store %union.tree_node* %obj_, %union.tree_node** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_.addr, metadata !8015, metadata !DIExpression()), !dbg !8014
  call void @llvm.dbg.declare(metadata %union.tree_node*** %slot_, metadata !8016, metadata !DIExpression()), !dbg !8014
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !8014
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %0, i32 0, i32 0, !dbg !8014
  %1 = load i32, i32* %num, align 8, !dbg !8014
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !8014
  %alloc = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 1, !dbg !8014
  %3 = load i32, i32* %alloc, align 4, !dbg !8014
  %cmp = icmp ult i32 %1, %3, !dbg !8014
  %conv = zext i1 %cmp to i32, !dbg !8014
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !8014
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 2, !dbg !8014
  %5 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !8014
  %num1 = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %5, i32 0, i32 0, !dbg !8014
  %6 = load i32, i32* %num1, align 8, !dbg !8014
  %inc = add i32 %6, 1, !dbg !8014
  store i32 %inc, i32* %num1, align 8, !dbg !8014
  %idxprom = zext i32 %6 to i64, !dbg !8014
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !8014
  store %union.tree_node** %arrayidx, %union.tree_node*** %slot_, align 8, !dbg !8014
  %7 = load %union.tree_node*, %union.tree_node** %obj_.addr, align 8, !dbg !8014
  %8 = load %union.tree_node**, %union.tree_node*** %slot_, align 8, !dbg !8014
  store %union.tree_node* %7, %union.tree_node** %8, align 8, !dbg !8014
  %9 = load %union.tree_node**, %union.tree_node*** %slot_, align 8, !dbg !8014
  ret %union.tree_node** %9, !dbg !8014
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_tree_heap_free(%struct.VEC_tree_heap** %vec_) #0 !dbg !8017 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_heap**, align 8
  store %struct.VEC_tree_heap** %vec_, %struct.VEC_tree_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vec_.addr, metadata !8021, metadata !DIExpression()), !dbg !8022
  %0 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !8023
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %0, align 8, !dbg !8023
  %tobool = icmp ne %struct.VEC_tree_heap* %1, null, !dbg !8023
  br i1 %tobool, label %if.then, label %if.end, !dbg !8022

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !8023
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %2, align 8, !dbg !8023
  %4 = bitcast %struct.VEC_tree_heap* %3 to i8*, !dbg !8023
  call void @free(i8* %4), !dbg !8023
  br label %if.end, !dbg !8023

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !8022
  store %struct.VEC_tree_heap* null, %struct.VEC_tree_heap** %5, align 8, !dbg !8022
  ret void, !dbg !8022
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_chain(%union.gimple_statement_d* %gs) #0 !dbg !8025 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8026, metadata !DIExpression()), !dbg !8027
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8028
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 2), !dbg !8029
  ret %union.tree_node* %call, !dbg !8030
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_call_tail_p(%union.gimple_statement_d* %s) #0 !dbg !8031 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !8032, metadata !DIExpression()), !dbg !8033
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !8034
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !8035
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !8036
  %bf.load = load i32, i32* %1, align 8, !dbg !8036
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !8036
  %and = and i32 %bf.lshr, 8, !dbg !8037
  %cmp = icmp ne i32 %and, 0, !dbg !8038
  %conv = zext i1 %cmp to i32, !dbg !8038
  %conv1 = trunc i32 %conv to i8, !dbg !8039
  ret i8 %conv1, !dbg !8040
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_call_cannot_inline_p(%union.gimple_statement_d* %s) #0 !dbg !8041 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !8042, metadata !DIExpression()), !dbg !8043
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !8044
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !8045
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !8046
  %bf.load = load i32, i32* %1, align 8, !dbg !8046
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !8046
  %and = and i32 %bf.lshr, 1, !dbg !8047
  %cmp = icmp ne i32 %and, 0, !dbg !8048
  %conv = zext i1 %cmp to i32, !dbg !8048
  %conv1 = trunc i32 %conv to i8, !dbg !8049
  ret i8 %conv1, !dbg !8050
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_call_return_slot_opt_p(%union.gimple_statement_d* %s) #0 !dbg !8051 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !8052, metadata !DIExpression()), !dbg !8053
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !8054
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !8055
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !8056
  %bf.load = load i32, i32* %1, align 8, !dbg !8056
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !8056
  %and = and i32 %bf.lshr, 4, !dbg !8057
  %cmp = icmp ne i32 %and, 0, !dbg !8058
  %conv = zext i1 %cmp to i32, !dbg !8058
  %conv1 = trunc i32 %conv to i8, !dbg !8059
  ret i8 %conv1, !dbg !8060
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_call_from_thunk_p(%union.gimple_statement_d* %s) #0 !dbg !8061 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !8062, metadata !DIExpression()), !dbg !8063
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !8064
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !8065
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !8066
  %bf.load = load i32, i32* %1, align 8, !dbg !8066
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !8066
  %and = and i32 %bf.lshr, 2, !dbg !8067
  %cmp = icmp ne i32 %and, 0, !dbg !8068
  %conv = zext i1 %cmp to i32, !dbg !8068
  %conv1 = trunc i32 %conv to i8, !dbg !8069
  ret i8 %conv1, !dbg !8070
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_call_va_arg_pack_p(%union.gimple_statement_d* %s) #0 !dbg !8071 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !8072, metadata !DIExpression()), !dbg !8073
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !8074
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !8075
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !8076
  %bf.load = load i32, i32* %1, align 8, !dbg !8076
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !8076
  %and = and i32 %bf.lshr, 16, !dbg !8077
  %cmp = icmp ne i32 %and, 0, !dbg !8078
  %conv = zext i1 %cmp to i32, !dbg !8078
  %conv1 = trunc i32 %conv to i8, !dbg !8079
  ret i8 %conv1, !dbg !8080
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @compare_field_offset(%union.tree_node* %f1, %union.tree_node* %f2) #0 !dbg !8081 {
entry:
  %retval = alloca i8, align 1
  %f1.addr = alloca %union.tree_node*, align 8
  %f2.addr = alloca %union.tree_node*, align 8
  %byte_offset1 = alloca i64, align 8
  %byte_offset2 = alloca i64, align 8
  %bit_offset1 = alloca i64, align 8
  %bit_offset2 = alloca i64, align 8
  store %union.tree_node* %f1, %union.tree_node** %f1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %f1.addr, metadata !8084, metadata !DIExpression()), !dbg !8085
  store %union.tree_node* %f2, %union.tree_node** %f2.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %f2.addr, metadata !8086, metadata !DIExpression()), !dbg !8087
  %0 = load %union.tree_node*, %union.tree_node** %f1.addr, align 8, !dbg !8088
  %decl_common = bitcast %union.tree_node* %0 to %struct.tree_decl_common*, !dbg !8088
  %off_align = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !8088
  %1 = bitcast i40* %off_align to i64*, !dbg !8088
  %bf.load = load i64, i64* %1, align 8, !dbg !8088
  %bf.lshr = lshr i64 %bf.load, 32, !dbg !8088
  %bf.clear = and i64 %bf.lshr, 255, !dbg !8088
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8088
  %sh_prom = zext i32 %bf.cast to i64, !dbg !8088
  %shl = shl i64 1, %sh_prom, !dbg !8088
  %2 = load %union.tree_node*, %union.tree_node** %f2.addr, align 8, !dbg !8090
  %decl_common1 = bitcast %union.tree_node* %2 to %struct.tree_decl_common*, !dbg !8090
  %off_align2 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common1, i32 0, i32 2, !dbg !8090
  %3 = bitcast i40* %off_align2 to i64*, !dbg !8090
  %bf.load3 = load i64, i64* %3, align 8, !dbg !8090
  %bf.lshr4 = lshr i64 %bf.load3, 32, !dbg !8090
  %bf.clear5 = and i64 %bf.lshr4, 255, !dbg !8090
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !8090
  %sh_prom7 = zext i32 %bf.cast6 to i64, !dbg !8090
  %shl8 = shl i64 1, %sh_prom7, !dbg !8090
  %cmp = icmp eq i64 %shl, %shl8, !dbg !8091
  br i1 %cmp, label %if.then, label %if.end, !dbg !8092

if.then:                                          ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %f1.addr, align 8, !dbg !8093
  %field_decl = bitcast %union.tree_node* %4 to %struct.tree_field_decl*, !dbg !8093
  %offset = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl, i32 0, i32 1, !dbg !8093
  %5 = load %union.tree_node*, %union.tree_node** %offset, align 8, !dbg !8093
  %6 = load %union.tree_node*, %union.tree_node** %f2.addr, align 8, !dbg !8094
  %field_decl9 = bitcast %union.tree_node* %6 to %struct.tree_field_decl*, !dbg !8094
  %offset10 = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl9, i32 0, i32 1, !dbg !8094
  %7 = load %union.tree_node*, %union.tree_node** %offset10, align 8, !dbg !8094
  %call = call i32 @operand_equal_p(%union.tree_node* %5, %union.tree_node* %7, i32 0), !dbg !8095
  %tobool = icmp ne i32 %call, 0, !dbg !8095
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !8096

land.rhs:                                         ; preds = %if.then
  %8 = load %union.tree_node*, %union.tree_node** %f1.addr, align 8, !dbg !8097
  %field_decl11 = bitcast %union.tree_node* %8 to %struct.tree_field_decl*, !dbg !8097
  %bit_offset = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl11, i32 0, i32 4, !dbg !8097
  %9 = load %union.tree_node*, %union.tree_node** %bit_offset, align 8, !dbg !8097
  %10 = load %union.tree_node*, %union.tree_node** %f2.addr, align 8, !dbg !8098
  %field_decl12 = bitcast %union.tree_node* %10 to %struct.tree_field_decl*, !dbg !8098
  %bit_offset13 = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl12, i32 0, i32 4, !dbg !8098
  %11 = load %union.tree_node*, %union.tree_node** %bit_offset13, align 8, !dbg !8098
  %call14 = call i32 @tree_int_cst_equal(%union.tree_node* %9, %union.tree_node* %11), !dbg !8099
  %tobool15 = icmp ne i32 %call14, 0, !dbg !8096
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then
  %12 = phi i1 [ false, %if.then ], [ %tobool15, %land.rhs ], !dbg !8100
  %land.ext = zext i1 %12 to i32, !dbg !8096
  %conv = trunc i32 %land.ext to i8, !dbg !8101
  store i8 %conv, i8* %retval, align 1, !dbg !8102
  br label %return, !dbg !8102

if.end:                                           ; preds = %entry
  %13 = load %union.tree_node*, %union.tree_node** %f1.addr, align 8, !dbg !8103
  %field_decl16 = bitcast %union.tree_node* %13 to %struct.tree_field_decl*, !dbg !8103
  %offset17 = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl16, i32 0, i32 1, !dbg !8103
  %14 = load %union.tree_node*, %union.tree_node** %offset17, align 8, !dbg !8103
  %call18 = call i32 @host_integerp(%union.tree_node* %14, i32 0), !dbg !8105
  %tobool19 = icmp ne i32 %call18, 0, !dbg !8105
  br i1 %tobool19, label %land.lhs.true, label %if.end53, !dbg !8106

land.lhs.true:                                    ; preds = %if.end
  %15 = load %union.tree_node*, %union.tree_node** %f2.addr, align 8, !dbg !8107
  %field_decl20 = bitcast %union.tree_node* %15 to %struct.tree_field_decl*, !dbg !8107
  %offset21 = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl20, i32 0, i32 1, !dbg !8107
  %16 = load %union.tree_node*, %union.tree_node** %offset21, align 8, !dbg !8107
  %call22 = call i32 @host_integerp(%union.tree_node* %16, i32 0), !dbg !8108
  %tobool23 = icmp ne i32 %call22, 0, !dbg !8108
  br i1 %tobool23, label %if.then24, label %if.end53, !dbg !8109

if.then24:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i64* %byte_offset1, metadata !8110, metadata !DIExpression()), !dbg !8112
  call void @llvm.dbg.declare(metadata i64* %byte_offset2, metadata !8113, metadata !DIExpression()), !dbg !8114
  call void @llvm.dbg.declare(metadata i64* %bit_offset1, metadata !8115, metadata !DIExpression()), !dbg !8116
  call void @llvm.dbg.declare(metadata i64* %bit_offset2, metadata !8117, metadata !DIExpression()), !dbg !8118
  %17 = load %union.tree_node*, %union.tree_node** %f1.addr, align 8, !dbg !8119
  %field_decl25 = bitcast %union.tree_node* %17 to %struct.tree_field_decl*, !dbg !8119
  %bit_offset26 = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl25, i32 0, i32 4, !dbg !8119
  %18 = load %union.tree_node*, %union.tree_node** %bit_offset26, align 8, !dbg !8119
  %int_cst = bitcast %union.tree_node* %18 to %struct.tree_int_cst*, !dbg !8119
  %int_cst27 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !8119
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst27, i32 0, i32 0, !dbg !8119
  %19 = load i64, i64* %low, align 8, !dbg !8119
  store i64 %19, i64* %bit_offset1, align 8, !dbg !8120
  %20 = load %union.tree_node*, %union.tree_node** %f1.addr, align 8, !dbg !8121
  %field_decl28 = bitcast %union.tree_node* %20 to %struct.tree_field_decl*, !dbg !8121
  %offset29 = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl28, i32 0, i32 1, !dbg !8121
  %21 = load %union.tree_node*, %union.tree_node** %offset29, align 8, !dbg !8121
  %int_cst30 = bitcast %union.tree_node* %21 to %struct.tree_int_cst*, !dbg !8121
  %int_cst31 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst30, i32 0, i32 1, !dbg !8121
  %low32 = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst31, i32 0, i32 0, !dbg !8121
  %22 = load i64, i64* %low32, align 8, !dbg !8121
  %23 = load i64, i64* %bit_offset1, align 8, !dbg !8122
  %div = udiv i64 %23, 8, !dbg !8123
  %add = add i64 %22, %div, !dbg !8124
  store i64 %add, i64* %byte_offset1, align 8, !dbg !8125
  %24 = load %union.tree_node*, %union.tree_node** %f2.addr, align 8, !dbg !8126
  %field_decl33 = bitcast %union.tree_node* %24 to %struct.tree_field_decl*, !dbg !8126
  %bit_offset34 = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl33, i32 0, i32 4, !dbg !8126
  %25 = load %union.tree_node*, %union.tree_node** %bit_offset34, align 8, !dbg !8126
  %int_cst35 = bitcast %union.tree_node* %25 to %struct.tree_int_cst*, !dbg !8126
  %int_cst36 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst35, i32 0, i32 1, !dbg !8126
  %low37 = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst36, i32 0, i32 0, !dbg !8126
  %26 = load i64, i64* %low37, align 8, !dbg !8126
  store i64 %26, i64* %bit_offset2, align 8, !dbg !8127
  %27 = load %union.tree_node*, %union.tree_node** %f2.addr, align 8, !dbg !8128
  %field_decl38 = bitcast %union.tree_node* %27 to %struct.tree_field_decl*, !dbg !8128
  %offset39 = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl38, i32 0, i32 1, !dbg !8128
  %28 = load %union.tree_node*, %union.tree_node** %offset39, align 8, !dbg !8128
  %int_cst40 = bitcast %union.tree_node* %28 to %struct.tree_int_cst*, !dbg !8128
  %int_cst41 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst40, i32 0, i32 1, !dbg !8128
  %low42 = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst41, i32 0, i32 0, !dbg !8128
  %29 = load i64, i64* %low42, align 8, !dbg !8128
  %30 = load i64, i64* %bit_offset2, align 8, !dbg !8129
  %div43 = udiv i64 %30, 8, !dbg !8130
  %add44 = add i64 %29, %div43, !dbg !8131
  store i64 %add44, i64* %byte_offset2, align 8, !dbg !8132
  %31 = load i64, i64* %byte_offset1, align 8, !dbg !8133
  %32 = load i64, i64* %byte_offset2, align 8, !dbg !8135
  %cmp45 = icmp ne i64 %31, %32, !dbg !8136
  br i1 %cmp45, label %if.then47, label %if.end48, !dbg !8137

if.then47:                                        ; preds = %if.then24
  store i8 0, i8* %retval, align 1, !dbg !8138
  br label %return, !dbg !8138

if.end48:                                         ; preds = %if.then24
  %33 = load i64, i64* %bit_offset1, align 8, !dbg !8139
  %rem = urem i64 %33, 8, !dbg !8140
  %34 = load i64, i64* %bit_offset2, align 8, !dbg !8141
  %rem49 = urem i64 %34, 8, !dbg !8142
  %cmp50 = icmp eq i64 %rem, %rem49, !dbg !8143
  %conv51 = zext i1 %cmp50 to i32, !dbg !8143
  %conv52 = trunc i32 %conv51 to i8, !dbg !8139
  store i8 %conv52, i8* %retval, align 1, !dbg !8144
  br label %return, !dbg !8144

if.end53:                                         ; preds = %land.lhs.true, %if.end
  store i8 0, i8* %retval, align 1, !dbg !8145
  br label %return, !dbg !8145

return:                                           ; preds = %if.end53, %if.end48, %if.then47, %land.end
  %35 = load i8, i8* %retval, align 1, !dbg !8146
  ret i8 %35, !dbg !8146
}

declare dso_local i32 @operand_equal_p(%union.tree_node*, %union.tree_node*, i32) #2

declare dso_local i32 @tree_int_cst_equal(%union.tree_node*, %union.tree_node*) #2

declare dso_local i32 @host_integerp(%union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @gimple_register_type(%union.tree_node* %t) #0 !dbg !8147 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  %slot = alloca i8**, align 8
  %new_type = alloca %union.tree_node*, align 8
  %tem = alloca %union.tree_node*, align 8
  %tem61 = alloca %union.tree_node*, align 8
  %tem106 = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !8148, metadata !DIExpression()), !dbg !8149
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !8150, metadata !DIExpression()), !dbg !8151
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !8152
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !8152
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !8152
  %bf.load = load i64, i64* %1, align 8, !dbg !8152
  %bf.clear = and i64 %bf.load, 65535, !dbg !8152
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8152
  %idxprom = sext i32 %bf.cast to i64, !dbg !8152
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !8152
  %2 = load i32, i32* %arrayidx, align 4, !dbg !8152
  %cmp = icmp eq i32 %2, 2, !dbg !8152
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !8152

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 3819, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !8152
  br label %cond.end, !dbg !8152

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8152

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8152
  %3 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !8153
  %type = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !8153
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 16, !dbg !8153
  %4 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !8153
  %5 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !8155
  %cmp1 = icmp ne %union.tree_node* %4, %5, !dbg !8156
  br i1 %cmp1, label %if.then, label %if.end, !dbg !8157

if.then:                                          ; preds = %cond.end
  %6 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !8158
  %type2 = bitcast %union.tree_node* %6 to %struct.tree_type*, !dbg !8158
  %main_variant3 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type2, i32 0, i32 16, !dbg !8158
  %7 = load %union.tree_node*, %union.tree_node** %main_variant3, align 8, !dbg !8158
  %call = call %union.tree_node* @gimple_register_type(%union.tree_node* %7), !dbg !8159
  br label %if.end, !dbg !8159

if.end:                                           ; preds = %if.then, %cond.end
  %8 = load %struct.htab*, %struct.htab** @gimple_types, align 8, !dbg !8160
  %cmp4 = icmp eq %struct.htab* %8, null, !dbg !8162
  br i1 %cmp4, label %if.then5, label %if.end7, !dbg !8163

if.then5:                                         ; preds = %if.end
  %call6 = call %struct.htab* @htab_create(i64 16381, i32 (i8*)* @gimple_type_hash, i32 (i8*, i8*)* @gimple_type_eq, void (i8*)* null), !dbg !8164
  store %struct.htab* %call6, %struct.htab** @gimple_types, align 8, !dbg !8165
  br label %if.end7, !dbg !8166

if.end7:                                          ; preds = %if.then5, %if.end
  %9 = load %struct.htab*, %struct.htab** @gimple_types, align 8, !dbg !8167
  %10 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !8168
  %11 = bitcast %union.tree_node* %10 to i8*, !dbg !8168
  %call8 = call i8** @htab_find_slot(%struct.htab* %9, i8* %11, i32 1), !dbg !8169
  store i8** %call8, i8*** %slot, align 8, !dbg !8170
  %12 = load i8**, i8*** %slot, align 8, !dbg !8171
  %13 = load i8*, i8** %12, align 8, !dbg !8173
  %tobool = icmp ne i8* %13, null, !dbg !8173
  br i1 %tobool, label %land.lhs.true, label %if.else134, !dbg !8174

land.lhs.true:                                    ; preds = %if.end7
  %14 = load i8**, i8*** %slot, align 8, !dbg !8175
  %15 = bitcast i8** %14 to %union.tree_node**, !dbg !8176
  %16 = load %union.tree_node*, %union.tree_node** %15, align 8, !dbg !8176
  %17 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !8177
  %cmp9 = icmp ne %union.tree_node* %16, %17, !dbg !8178
  br i1 %cmp9, label %if.then10, label %if.else134, !dbg !8179

if.then10:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_type, metadata !8180, metadata !DIExpression()), !dbg !8182
  %18 = load i8**, i8*** %slot, align 8, !dbg !8183
  %19 = bitcast i8** %18 to %union.tree_node**, !dbg !8184
  %20 = load %union.tree_node*, %union.tree_node** %19, align 8, !dbg !8184
  store %union.tree_node* %20, %union.tree_node** %new_type, align 8, !dbg !8182
  %21 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !8185
  %base11 = bitcast %union.tree_node* %21 to %struct.tree_base*, !dbg !8185
  %22 = bitcast %struct.tree_base* %base11 to i64*, !dbg !8185
  %bf.load12 = load i64, i64* %22, align 8, !dbg !8185
  %bf.lshr = lshr i64 %bf.load12, 18, !dbg !8185
  %bf.clear13 = and i64 %bf.lshr, 1, !dbg !8185
  %bf.cast14 = trunc i64 %bf.clear13 to i32, !dbg !8185
  %23 = load %union.tree_node*, %union.tree_node** %new_type, align 8, !dbg !8185
  %base15 = bitcast %union.tree_node* %23 to %struct.tree_base*, !dbg !8185
  %24 = bitcast %struct.tree_base* %base15 to i64*, !dbg !8185
  %bf.load16 = load i64, i64* %24, align 8, !dbg !8185
  %bf.lshr17 = lshr i64 %bf.load16, 18, !dbg !8185
  %bf.clear18 = and i64 %bf.lshr17, 1, !dbg !8185
  %bf.cast19 = trunc i64 %bf.clear18 to i32, !dbg !8185
  %cmp20 = icmp eq i32 %bf.cast14, %bf.cast19, !dbg !8185
  br i1 %cmp20, label %cond.false22, label %cond.true21, !dbg !8185

cond.true21:                                      ; preds = %if.then10
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 3837, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !8185
  br label %cond.end23, !dbg !8185

cond.false22:                                     ; preds = %if.then10
  br label %cond.end23, !dbg !8185

cond.end23:                                       ; preds = %cond.false22, %cond.true21
  %cond24 = phi i32 [ 0, %cond.true21 ], [ 0, %cond.false22 ], !dbg !8185
  %25 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !8186
  %26 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !8188
  %type25 = bitcast %union.tree_node* %26 to %struct.tree_type*, !dbg !8188
  %main_variant26 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type25, i32 0, i32 16, !dbg !8188
  %27 = load %union.tree_node*, %union.tree_node** %main_variant26, align 8, !dbg !8188
  %cmp27 = icmp ne %union.tree_node* %25, %27, !dbg !8189
  br i1 %cmp27, label %if.then28, label %if.end45, !dbg !8190

if.then28:                                        ; preds = %cond.end23
  call void @llvm.dbg.declare(metadata %union.tree_node** %tem, metadata !8191, metadata !DIExpression()), !dbg !8193
  %28 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !8194
  %type29 = bitcast %union.tree_node* %28 to %struct.tree_type*, !dbg !8194
  %main_variant30 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type29, i32 0, i32 16, !dbg !8194
  %29 = load %union.tree_node*, %union.tree_node** %main_variant30, align 8, !dbg !8194
  store %union.tree_node* %29, %union.tree_node** %tem, align 8, !dbg !8193
  br label %while.cond, !dbg !8195

while.cond:                                       ; preds = %while.body, %if.then28
  %30 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !8196
  %tobool31 = icmp ne %union.tree_node* %30, null, !dbg !8196
  br i1 %tobool31, label %land.rhs, label %land.end, !dbg !8197

land.rhs:                                         ; preds = %while.cond
  %31 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !8198
  %type32 = bitcast %union.tree_node* %31 to %struct.tree_type*, !dbg !8198
  %next_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type32, i32 0, i32 15, !dbg !8198
  %32 = load %union.tree_node*, %union.tree_node** %next_variant, align 8, !dbg !8198
  %33 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !8199
  %cmp33 = icmp ne %union.tree_node* %32, %33, !dbg !8200
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %34 = phi i1 [ false, %while.cond ], [ %cmp33, %land.rhs ], !dbg !8201
  br i1 %34, label %while.body, label %while.end, !dbg !8195

while.body:                                       ; preds = %land.end
  %35 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !8202
  %type34 = bitcast %union.tree_node* %35 to %struct.tree_type*, !dbg !8202
  %next_variant35 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type34, i32 0, i32 15, !dbg !8202
  %36 = load %union.tree_node*, %union.tree_node** %next_variant35, align 8, !dbg !8202
  store %union.tree_node* %36, %union.tree_node** %tem, align 8, !dbg !8203
  br label %while.cond, !dbg !8195, !llvm.loop !8204

while.end:                                        ; preds = %land.end
  %37 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !8205
  %tobool36 = icmp ne %union.tree_node* %37, null, !dbg !8205
  br i1 %tobool36, label %if.then37, label %if.end42, !dbg !8207

if.then37:                                        ; preds = %while.end
  %38 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !8208
  %type38 = bitcast %union.tree_node* %38 to %struct.tree_type*, !dbg !8208
  %next_variant39 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type38, i32 0, i32 15, !dbg !8208
  %39 = load %union.tree_node*, %union.tree_node** %next_variant39, align 8, !dbg !8208
  %40 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !8209
  %type40 = bitcast %union.tree_node* %40 to %struct.tree_type*, !dbg !8209
  %next_variant41 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type40, i32 0, i32 15, !dbg !8209
  store %union.tree_node* %39, %union.tree_node** %next_variant41, align 8, !dbg !8210
  br label %if.end42, !dbg !8209

if.end42:                                         ; preds = %if.then37, %while.end
  %41 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !8211
  %type43 = bitcast %union.tree_node* %41 to %struct.tree_type*, !dbg !8211
  %next_variant44 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type43, i32 0, i32 15, !dbg !8211
  store %union.tree_node* null, %union.tree_node** %next_variant44, align 8, !dbg !8212
  br label %if.end45, !dbg !8213

if.end45:                                         ; preds = %if.end42, %cond.end23
  %42 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !8214
  %base46 = bitcast %union.tree_node* %42 to %struct.tree_base*, !dbg !8214
  %43 = bitcast %struct.tree_base* %base46 to i64*, !dbg !8214
  %bf.load47 = load i64, i64* %43, align 8, !dbg !8214
  %bf.clear48 = and i64 %bf.load47, 65535, !dbg !8214
  %bf.cast49 = trunc i64 %bf.clear48 to i32, !dbg !8214
  %cmp50 = icmp eq i32 %bf.cast49, 10, !dbg !8216
  br i1 %cmp50, label %if.then51, label %if.else87, !dbg !8217

if.then51:                                        ; preds = %if.end45
  %44 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !8218
  %common = bitcast %union.tree_node* %44 to %struct.tree_common*, !dbg !8218
  %type52 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !8218
  %45 = load %union.tree_node*, %union.tree_node** %type52, align 8, !dbg !8218
  %type53 = bitcast %union.tree_node* %45 to %struct.tree_type*, !dbg !8218
  %pointer_to = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type53, i32 0, i32 9, !dbg !8218
  %46 = load %union.tree_node*, %union.tree_node** %pointer_to, align 8, !dbg !8218
  %47 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !8221
  %cmp54 = icmp eq %union.tree_node* %46, %47, !dbg !8222
  br i1 %cmp54, label %if.then55, label %if.else, !dbg !8223

if.then55:                                        ; preds = %if.then51
  %48 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !8224
  %type56 = bitcast %union.tree_node* %48 to %struct.tree_type*, !dbg !8224
  %minval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type56, i32 0, i32 13, !dbg !8224
  %49 = load %union.tree_node*, %union.tree_node** %minval, align 8, !dbg !8224
  %50 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !8225
  %common57 = bitcast %union.tree_node* %50 to %struct.tree_common*, !dbg !8225
  %type58 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common57, i32 0, i32 2, !dbg !8225
  %51 = load %union.tree_node*, %union.tree_node** %type58, align 8, !dbg !8225
  %type59 = bitcast %union.tree_node* %51 to %struct.tree_type*, !dbg !8225
  %pointer_to60 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type59, i32 0, i32 9, !dbg !8225
  store %union.tree_node* %49, %union.tree_node** %pointer_to60, align 8, !dbg !8226
  br label %if.end84, !dbg !8225

if.else:                                          ; preds = %if.then51
  call void @llvm.dbg.declare(metadata %union.tree_node** %tem61, metadata !8227, metadata !DIExpression()), !dbg !8229
  %52 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !8230
  %common62 = bitcast %union.tree_node* %52 to %struct.tree_common*, !dbg !8230
  %type63 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common62, i32 0, i32 2, !dbg !8230
  %53 = load %union.tree_node*, %union.tree_node** %type63, align 8, !dbg !8230
  %type64 = bitcast %union.tree_node* %53 to %struct.tree_type*, !dbg !8230
  %pointer_to65 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type64, i32 0, i32 9, !dbg !8230
  %54 = load %union.tree_node*, %union.tree_node** %pointer_to65, align 8, !dbg !8230
  store %union.tree_node* %54, %union.tree_node** %tem61, align 8, !dbg !8229
  br label %while.cond66, !dbg !8231

while.cond66:                                     ; preds = %while.body73, %if.else
  %55 = load %union.tree_node*, %union.tree_node** %tem61, align 8, !dbg !8232
  %tobool67 = icmp ne %union.tree_node* %55, null, !dbg !8232
  br i1 %tobool67, label %land.rhs68, label %land.end72, !dbg !8233

land.rhs68:                                       ; preds = %while.cond66
  %56 = load %union.tree_node*, %union.tree_node** %tem61, align 8, !dbg !8234
  %type69 = bitcast %union.tree_node* %56 to %struct.tree_type*, !dbg !8234
  %minval70 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type69, i32 0, i32 13, !dbg !8234
  %57 = load %union.tree_node*, %union.tree_node** %minval70, align 8, !dbg !8234
  %58 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !8235
  %cmp71 = icmp ne %union.tree_node* %57, %58, !dbg !8236
  br label %land.end72

land.end72:                                       ; preds = %land.rhs68, %while.cond66
  %59 = phi i1 [ false, %while.cond66 ], [ %cmp71, %land.rhs68 ], !dbg !8237
  br i1 %59, label %while.body73, label %while.end76, !dbg !8231

while.body73:                                     ; preds = %land.end72
  %60 = load %union.tree_node*, %union.tree_node** %tem61, align 8, !dbg !8238
  %type74 = bitcast %union.tree_node* %60 to %struct.tree_type*, !dbg !8238
  %minval75 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type74, i32 0, i32 13, !dbg !8238
  %61 = load %union.tree_node*, %union.tree_node** %minval75, align 8, !dbg !8238
  store %union.tree_node* %61, %union.tree_node** %tem61, align 8, !dbg !8239
  br label %while.cond66, !dbg !8231, !llvm.loop !8240

while.end76:                                      ; preds = %land.end72
  %62 = load %union.tree_node*, %union.tree_node** %tem61, align 8, !dbg !8241
  %tobool77 = icmp ne %union.tree_node* %62, null, !dbg !8241
  br i1 %tobool77, label %if.then78, label %if.end83, !dbg !8243

if.then78:                                        ; preds = %while.end76
  %63 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !8244
  %type79 = bitcast %union.tree_node* %63 to %struct.tree_type*, !dbg !8244
  %minval80 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type79, i32 0, i32 13, !dbg !8244
  %64 = load %union.tree_node*, %union.tree_node** %minval80, align 8, !dbg !8244
  %65 = load %union.tree_node*, %union.tree_node** %tem61, align 8, !dbg !8245
  %type81 = bitcast %union.tree_node* %65 to %struct.tree_type*, !dbg !8245
  %minval82 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type81, i32 0, i32 13, !dbg !8245
  store %union.tree_node* %64, %union.tree_node** %minval82, align 8, !dbg !8246
  br label %if.end83, !dbg !8245

if.end83:                                         ; preds = %if.then78, %while.end76
  br label %if.end84

if.end84:                                         ; preds = %if.end83, %if.then55
  %66 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !8247
  %type85 = bitcast %union.tree_node* %66 to %struct.tree_type*, !dbg !8247
  %minval86 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type85, i32 0, i32 13, !dbg !8247
  store %union.tree_node* null, %union.tree_node** %minval86, align 8, !dbg !8248
  br label %if.end133, !dbg !8249

if.else87:                                        ; preds = %if.end45
  %67 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !8250
  %base88 = bitcast %union.tree_node* %67 to %struct.tree_base*, !dbg !8250
  %68 = bitcast %struct.tree_base* %base88 to i64*, !dbg !8250
  %bf.load89 = load i64, i64* %68, align 8, !dbg !8250
  %bf.clear90 = and i64 %bf.load89, 65535, !dbg !8250
  %bf.cast91 = trunc i64 %bf.clear90 to i32, !dbg !8250
  %cmp92 = icmp eq i32 %bf.cast91, 12, !dbg !8252
  br i1 %cmp92, label %if.then93, label %if.end132, !dbg !8253

if.then93:                                        ; preds = %if.else87
  %69 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !8254
  %common94 = bitcast %union.tree_node* %69 to %struct.tree_common*, !dbg !8254
  %type95 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common94, i32 0, i32 2, !dbg !8254
  %70 = load %union.tree_node*, %union.tree_node** %type95, align 8, !dbg !8254
  %type96 = bitcast %union.tree_node* %70 to %struct.tree_type*, !dbg !8254
  %reference_to = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type96, i32 0, i32 10, !dbg !8254
  %71 = load %union.tree_node*, %union.tree_node** %reference_to, align 8, !dbg !8254
  %72 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !8257
  %cmp97 = icmp eq %union.tree_node* %71, %72, !dbg !8258
  br i1 %cmp97, label %if.then98, label %if.else105, !dbg !8259

if.then98:                                        ; preds = %if.then93
  %73 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !8260
  %type99 = bitcast %union.tree_node* %73 to %struct.tree_type*, !dbg !8260
  %minval100 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type99, i32 0, i32 13, !dbg !8260
  %74 = load %union.tree_node*, %union.tree_node** %minval100, align 8, !dbg !8260
  %75 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !8261
  %common101 = bitcast %union.tree_node* %75 to %struct.tree_common*, !dbg !8261
  %type102 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common101, i32 0, i32 2, !dbg !8261
  %76 = load %union.tree_node*, %union.tree_node** %type102, align 8, !dbg !8261
  %type103 = bitcast %union.tree_node* %76 to %struct.tree_type*, !dbg !8261
  %reference_to104 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type103, i32 0, i32 10, !dbg !8261
  store %union.tree_node* %74, %union.tree_node** %reference_to104, align 8, !dbg !8262
  br label %if.end129, !dbg !8261

if.else105:                                       ; preds = %if.then93
  call void @llvm.dbg.declare(metadata %union.tree_node** %tem106, metadata !8263, metadata !DIExpression()), !dbg !8265
  %77 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !8266
  %common107 = bitcast %union.tree_node* %77 to %struct.tree_common*, !dbg !8266
  %type108 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common107, i32 0, i32 2, !dbg !8266
  %78 = load %union.tree_node*, %union.tree_node** %type108, align 8, !dbg !8266
  %type109 = bitcast %union.tree_node* %78 to %struct.tree_type*, !dbg !8266
  %reference_to110 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type109, i32 0, i32 10, !dbg !8266
  %79 = load %union.tree_node*, %union.tree_node** %reference_to110, align 8, !dbg !8266
  store %union.tree_node* %79, %union.tree_node** %tem106, align 8, !dbg !8265
  br label %while.cond111, !dbg !8267

while.cond111:                                    ; preds = %while.body118, %if.else105
  %80 = load %union.tree_node*, %union.tree_node** %tem106, align 8, !dbg !8268
  %tobool112 = icmp ne %union.tree_node* %80, null, !dbg !8268
  br i1 %tobool112, label %land.rhs113, label %land.end117, !dbg !8269

land.rhs113:                                      ; preds = %while.cond111
  %81 = load %union.tree_node*, %union.tree_node** %tem106, align 8, !dbg !8270
  %type114 = bitcast %union.tree_node* %81 to %struct.tree_type*, !dbg !8270
  %minval115 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type114, i32 0, i32 13, !dbg !8270
  %82 = load %union.tree_node*, %union.tree_node** %minval115, align 8, !dbg !8270
  %83 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !8271
  %cmp116 = icmp ne %union.tree_node* %82, %83, !dbg !8272
  br label %land.end117

land.end117:                                      ; preds = %land.rhs113, %while.cond111
  %84 = phi i1 [ false, %while.cond111 ], [ %cmp116, %land.rhs113 ], !dbg !8273
  br i1 %84, label %while.body118, label %while.end121, !dbg !8267

while.body118:                                    ; preds = %land.end117
  %85 = load %union.tree_node*, %union.tree_node** %tem106, align 8, !dbg !8274
  %type119 = bitcast %union.tree_node* %85 to %struct.tree_type*, !dbg !8274
  %minval120 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type119, i32 0, i32 13, !dbg !8274
  %86 = load %union.tree_node*, %union.tree_node** %minval120, align 8, !dbg !8274
  store %union.tree_node* %86, %union.tree_node** %tem106, align 8, !dbg !8275
  br label %while.cond111, !dbg !8267, !llvm.loop !8276

while.end121:                                     ; preds = %land.end117
  %87 = load %union.tree_node*, %union.tree_node** %tem106, align 8, !dbg !8277
  %tobool122 = icmp ne %union.tree_node* %87, null, !dbg !8277
  br i1 %tobool122, label %if.then123, label %if.end128, !dbg !8279

if.then123:                                       ; preds = %while.end121
  %88 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !8280
  %type124 = bitcast %union.tree_node* %88 to %struct.tree_type*, !dbg !8280
  %minval125 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type124, i32 0, i32 13, !dbg !8280
  %89 = load %union.tree_node*, %union.tree_node** %minval125, align 8, !dbg !8280
  %90 = load %union.tree_node*, %union.tree_node** %tem106, align 8, !dbg !8281
  %type126 = bitcast %union.tree_node* %90 to %struct.tree_type*, !dbg !8281
  %minval127 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type126, i32 0, i32 13, !dbg !8281
  store %union.tree_node* %89, %union.tree_node** %minval127, align 8, !dbg !8282
  br label %if.end128, !dbg !8281

if.end128:                                        ; preds = %if.then123, %while.end121
  br label %if.end129

if.end129:                                        ; preds = %if.end128, %if.then98
  %91 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !8283
  %type130 = bitcast %union.tree_node* %91 to %struct.tree_type*, !dbg !8283
  %minval131 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type130, i32 0, i32 13, !dbg !8283
  store %union.tree_node* null, %union.tree_node** %minval131, align 8, !dbg !8284
  br label %if.end132, !dbg !8285

if.end132:                                        ; preds = %if.end129, %if.else87
  br label %if.end133

if.end133:                                        ; preds = %if.end132, %if.end84
  %92 = load %union.tree_node*, %union.tree_node** %new_type, align 8, !dbg !8286
  store %union.tree_node* %92, %union.tree_node** %t.addr, align 8, !dbg !8287
  br label %if.end135, !dbg !8288

if.else134:                                       ; preds = %land.lhs.true, %if.end7
  %93 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !8289
  %94 = bitcast %union.tree_node* %93 to i8*, !dbg !8290
  %95 = load i8**, i8*** %slot, align 8, !dbg !8291
  store i8* %94, i8** %95, align 8, !dbg !8292
  br label %if.end135

if.end135:                                        ; preds = %if.else134, %if.end133
  %96 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !8293
  ret %union.tree_node* %96, !dbg !8294
}

declare dso_local %struct.htab* @htab_create(i64, i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_type_hash(i8* %p) #0 !dbg !8295 {
entry:
  %retval = alloca i32, align 4
  %p.addr = alloca i8*, align 8
  %t = alloca %union.tree_node*, align 8
  %sccstack = alloca %struct.VEC_tree_heap*, align 8
  %sccstate = alloca %struct.pointer_map_t*, align 8
  %sccstate_obstack = alloca %struct.obstack, align 8
  %val = alloca i32, align 4
  %slot = alloca i8**, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !8296, metadata !DIExpression()), !dbg !8297
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !8298, metadata !DIExpression()), !dbg !8299
  %0 = load i8*, i8** %p.addr, align 8, !dbg !8300
  %1 = bitcast i8* %0 to %union.tree_node*, !dbg !8301
  store %union.tree_node* %1, %union.tree_node** %t, align 8, !dbg !8299
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %sccstack, metadata !8302, metadata !DIExpression()), !dbg !8303
  store %struct.VEC_tree_heap* null, %struct.VEC_tree_heap** %sccstack, align 8, !dbg !8303
  call void @llvm.dbg.declare(metadata %struct.pointer_map_t** %sccstate, metadata !8304, metadata !DIExpression()), !dbg !8305
  call void @llvm.dbg.declare(metadata %struct.obstack* %sccstate_obstack, metadata !8306, metadata !DIExpression()), !dbg !8307
  call void @llvm.dbg.declare(metadata i32* %val, metadata !8308, metadata !DIExpression()), !dbg !8309
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !8310, metadata !DIExpression()), !dbg !8311
  %2 = load %struct.pointer_map_t*, %struct.pointer_map_t** @type_hash_cache, align 8, !dbg !8312
  %cmp = icmp eq %struct.pointer_map_t* %2, null, !dbg !8314
  br i1 %cmp, label %if.then, label %if.end, !dbg !8315

if.then:                                          ; preds = %entry
  %call = call %struct.pointer_map_t* @pointer_map_create(), !dbg !8316
  store %struct.pointer_map_t* %call, %struct.pointer_map_t** @type_hash_cache, align 8, !dbg !8317
  br label %if.end, !dbg !8318

if.end:                                           ; preds = %if.then, %entry
  %3 = load %struct.pointer_map_t*, %struct.pointer_map_t** @type_hash_cache, align 8, !dbg !8319
  %4 = load i8*, i8** %p.addr, align 8, !dbg !8321
  %call1 = call i8** @pointer_map_contains(%struct.pointer_map_t* %3, i8* %4), !dbg !8322
  store i8** %call1, i8*** %slot, align 8, !dbg !8323
  %cmp2 = icmp ne i8** %call1, null, !dbg !8324
  br i1 %cmp2, label %if.then3, label %if.end5, !dbg !8325

if.then3:                                         ; preds = %if.end
  %5 = load i8**, i8*** %slot, align 8, !dbg !8326
  %6 = load i8*, i8** %5, align 8, !dbg !8327
  %7 = ptrtoint i8* %6 to i64, !dbg !8328
  %conv = trunc i64 %7 to i32, !dbg !8329
  %call4 = call i32 @iterative_hash_hashval_t(i32 %conv, i32 0), !dbg !8330
  store i32 %call4, i32* %retval, align 4, !dbg !8331
  br label %return, !dbg !8331

if.end5:                                          ; preds = %if.end
  store i32 1, i32* @next_dfs_num, align 4, !dbg !8332
  %call6 = call %struct.pointer_map_t* @pointer_map_create(), !dbg !8333
  store %struct.pointer_map_t* %call6, %struct.pointer_map_t** %sccstate, align 8, !dbg !8334
  %call7 = call i32 @_obstack_begin(%struct.obstack* %sccstate_obstack, i32 0, i32 0, i8* (i64)* @xmalloc, void (i8*)* @free), !dbg !8335
  %8 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !8336
  %9 = load %struct.pointer_map_t*, %struct.pointer_map_t** %sccstate, align 8, !dbg !8337
  %call8 = call i32 @iterative_hash_gimple_type(%union.tree_node* %8, i32 0, %struct.VEC_tree_heap** %sccstack, %struct.pointer_map_t* %9, %struct.obstack* %sccstate_obstack), !dbg !8338
  store i32 %call8, i32* %val, align 4, !dbg !8339
  call void @VEC_tree_heap_free(%struct.VEC_tree_heap** %sccstack), !dbg !8340
  %10 = load %struct.pointer_map_t*, %struct.pointer_map_t** %sccstate, align 8, !dbg !8341
  call void @pointer_map_destroy(%struct.pointer_map_t* %10), !dbg !8342
  %chunk = getelementptr inbounds %struct.obstack, %struct.obstack* %sccstate_obstack, i32 0, i32 1, !dbg !8343
  %11 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8, !dbg !8343
  %12 = bitcast %struct._obstack_chunk* %11 to i8*, !dbg !8343
  %sub.ptr.rhs.cast = ptrtoint i8* %12 to i64, !dbg !8343
  %sub.ptr.sub = sub i64 0, %sub.ptr.rhs.cast, !dbg !8343
  %temp = getelementptr inbounds %struct.obstack, %struct.obstack* %sccstate_obstack, i32 0, i32 5, !dbg !8343
  store i64 %sub.ptr.sub, i64* %temp, align 8, !dbg !8343
  %temp9 = getelementptr inbounds %struct.obstack, %struct.obstack* %sccstate_obstack, i32 0, i32 5, !dbg !8343
  %13 = load i64, i64* %temp9, align 8, !dbg !8343
  %cmp10 = icmp sgt i64 %13, 0, !dbg !8343
  br i1 %cmp10, label %land.lhs.true, label %cond.false, !dbg !8343

land.lhs.true:                                    ; preds = %if.end5
  %temp12 = getelementptr inbounds %struct.obstack, %struct.obstack* %sccstate_obstack, i32 0, i32 5, !dbg !8343
  %14 = load i64, i64* %temp12, align 8, !dbg !8343
  %chunk_limit = getelementptr inbounds %struct.obstack, %struct.obstack* %sccstate_obstack, i32 0, i32 4, !dbg !8343
  %15 = load i8*, i8** %chunk_limit, align 8, !dbg !8343
  %chunk13 = getelementptr inbounds %struct.obstack, %struct.obstack* %sccstate_obstack, i32 0, i32 1, !dbg !8343
  %16 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk13, align 8, !dbg !8343
  %17 = bitcast %struct._obstack_chunk* %16 to i8*, !dbg !8343
  %sub.ptr.lhs.cast = ptrtoint i8* %15 to i64, !dbg !8343
  %sub.ptr.rhs.cast14 = ptrtoint i8* %17 to i64, !dbg !8343
  %sub.ptr.sub15 = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast14, !dbg !8343
  %cmp16 = icmp slt i64 %14, %sub.ptr.sub15, !dbg !8343
  br i1 %cmp16, label %cond.true, label %cond.false, !dbg !8343

cond.true:                                        ; preds = %land.lhs.true
  %temp18 = getelementptr inbounds %struct.obstack, %struct.obstack* %sccstate_obstack, i32 0, i32 5, !dbg !8343
  %18 = load i64, i64* %temp18, align 8, !dbg !8343
  %chunk19 = getelementptr inbounds %struct.obstack, %struct.obstack* %sccstate_obstack, i32 0, i32 1, !dbg !8343
  %19 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk19, align 8, !dbg !8343
  %20 = bitcast %struct._obstack_chunk* %19 to i8*, !dbg !8343
  %add.ptr = getelementptr inbounds i8, i8* %20, i64 %18, !dbg !8343
  %object_base = getelementptr inbounds %struct.obstack, %struct.obstack* %sccstate_obstack, i32 0, i32 2, !dbg !8343
  store i8* %add.ptr, i8** %object_base, align 8, !dbg !8343
  %next_free = getelementptr inbounds %struct.obstack, %struct.obstack* %sccstate_obstack, i32 0, i32 3, !dbg !8343
  store i8* %add.ptr, i8** %next_free, align 8, !dbg !8343
  %21 = ptrtoint i8* %add.ptr to i64, !dbg !8343
  br label %cond.end, !dbg !8343

cond.false:                                       ; preds = %land.lhs.true, %if.end5
  %temp20 = getelementptr inbounds %struct.obstack, %struct.obstack* %sccstate_obstack, i32 0, i32 5, !dbg !8343
  %22 = load i64, i64* %temp20, align 8, !dbg !8343
  %chunk21 = getelementptr inbounds %struct.obstack, %struct.obstack* %sccstate_obstack, i32 0, i32 1, !dbg !8343
  %23 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk21, align 8, !dbg !8343
  %24 = bitcast %struct._obstack_chunk* %23 to i8*, !dbg !8343
  %add.ptr22 = getelementptr inbounds i8, i8* %24, i64 %22, !dbg !8343
  call void @obstack_free(%struct.obstack* %sccstate_obstack, i8* %add.ptr22), !dbg !8343
  br label %cond.end, !dbg !8343

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %21, %cond.true ], [ 0, %cond.false ], !dbg !8343
  %25 = load i32, i32* %val, align 4, !dbg !8344
  store i32 %25, i32* %retval, align 4, !dbg !8345
  br label %return, !dbg !8345

return:                                           ; preds = %cond.end, %if.then3
  %26 = load i32, i32* %retval, align 4, !dbg !8346
  ret i32 %26, !dbg !8346
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_type_eq(i8* %p1, i8* %p2) #0 !dbg !8347 {
entry:
  %p1.addr = alloca i8*, align 8
  %p2.addr = alloca i8*, align 8
  %t1 = alloca %union.tree_node*, align 8
  %t2 = alloca %union.tree_node*, align 8
  store i8* %p1, i8** %p1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p1.addr, metadata !8348, metadata !DIExpression()), !dbg !8349
  store i8* %p2, i8** %p2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p2.addr, metadata !8350, metadata !DIExpression()), !dbg !8351
  call void @llvm.dbg.declare(metadata %union.tree_node** %t1, metadata !8352, metadata !DIExpression()), !dbg !8353
  %0 = load i8*, i8** %p1.addr, align 8, !dbg !8354
  %1 = bitcast i8* %0 to %union.tree_node*, !dbg !8355
  store %union.tree_node* %1, %union.tree_node** %t1, align 8, !dbg !8353
  call void @llvm.dbg.declare(metadata %union.tree_node** %t2, metadata !8356, metadata !DIExpression()), !dbg !8357
  %2 = load i8*, i8** %p2.addr, align 8, !dbg !8358
  %3 = bitcast i8* %2 to %union.tree_node*, !dbg !8359
  store %union.tree_node* %3, %union.tree_node** %t2, align 8, !dbg !8357
  %4 = load %union.tree_node*, %union.tree_node** %t1, align 8, !dbg !8360
  %5 = load %union.tree_node*, %union.tree_node** %t2, align 8, !dbg !8361
  %call = call i32 @gimple_types_compatible_p(%union.tree_node* %4, %union.tree_node* %5), !dbg !8362
  ret i32 %call, !dbg !8363
}

declare dso_local i8** @htab_find_slot(%struct.htab*, i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @print_gimple_types_stats() #0 !dbg !8364 {
entry:
  %0 = load %struct.htab*, %struct.htab** @gimple_types, align 8, !dbg !8365
  %tobool = icmp ne %struct.htab* %0, null, !dbg !8365
  br i1 %tobool, label %if.then, label %if.else, !dbg !8367

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !8368
  %2 = load %struct.htab*, %struct.htab** @gimple_types, align 8, !dbg !8369
  %call = call i64 @htab_size(%struct.htab* %2), !dbg !8370
  %3 = load %struct.htab*, %struct.htab** @gimple_types, align 8, !dbg !8371
  %call1 = call i64 @htab_elements(%struct.htab* %3), !dbg !8372
  %4 = load %struct.htab*, %struct.htab** @gimple_types, align 8, !dbg !8373
  %searches = getelementptr inbounds %struct.htab, %struct.htab* %4, i32 0, i32 7, !dbg !8374
  %5 = load i32, i32* %searches, align 8, !dbg !8374
  %conv = zext i32 %5 to i64, !dbg !8375
  %6 = load %struct.htab*, %struct.htab** @gimple_types, align 8, !dbg !8376
  %collisions = getelementptr inbounds %struct.htab, %struct.htab* %6, i32 0, i32 8, !dbg !8377
  %7 = load i32, i32* %collisions, align 4, !dbg !8377
  %conv2 = zext i32 %7 to i64, !dbg !8378
  %8 = load %struct.htab*, %struct.htab** @gimple_types, align 8, !dbg !8379
  %call3 = call double @htab_collisions(%struct.htab* %8), !dbg !8380
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([85 x i8], [85 x i8]* @.str.38, i64 0, i64 0), i64 %call, i64 %call1, i64 %conv, i64 %conv2, double %call3), !dbg !8381
  br label %if.end, !dbg !8381

if.else:                                          ; preds = %entry
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !8382
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.39, i64 0, i64 0)), !dbg !8383
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %10 = load %struct.htab*, %struct.htab** @gtc_visited, align 8, !dbg !8384
  %tobool6 = icmp ne %struct.htab* %10, null, !dbg !8384
  br i1 %tobool6, label %if.then7, label %if.else16, !dbg !8386

if.then7:                                         ; preds = %if.end
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !8387
  %12 = load %struct.htab*, %struct.htab** @gtc_visited, align 8, !dbg !8388
  %call8 = call i64 @htab_size(%struct.htab* %12), !dbg !8389
  %13 = load %struct.htab*, %struct.htab** @gtc_visited, align 8, !dbg !8390
  %call9 = call i64 @htab_elements(%struct.htab* %13), !dbg !8391
  %14 = load %struct.htab*, %struct.htab** @gtc_visited, align 8, !dbg !8392
  %searches10 = getelementptr inbounds %struct.htab, %struct.htab* %14, i32 0, i32 7, !dbg !8393
  %15 = load i32, i32* %searches10, align 8, !dbg !8393
  %conv11 = zext i32 %15 to i64, !dbg !8394
  %16 = load %struct.htab*, %struct.htab** @gtc_visited, align 8, !dbg !8395
  %collisions12 = getelementptr inbounds %struct.htab, %struct.htab* %16, i32 0, i32 8, !dbg !8396
  %17 = load i32, i32* %collisions12, align 4, !dbg !8396
  %conv13 = zext i32 %17 to i64, !dbg !8397
  %18 = load %struct.htab*, %struct.htab** @gtc_visited, align 8, !dbg !8398
  %call14 = call double @htab_collisions(%struct.htab* %18), !dbg !8399
  %call15 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.40, i64 0, i64 0), i64 %call8, i64 %call9, i64 %conv11, i64 %conv13, double %call14), !dbg !8400
  br label %if.end18, !dbg !8400

if.else16:                                        ; preds = %if.end
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !8401
  %call17 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %19, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.41, i64 0, i64 0)), !dbg !8402
  br label %if.end18

if.end18:                                         ; preds = %if.else16, %if.then7
  ret void, !dbg !8403
}

declare dso_local i64 @htab_size(%struct.htab*) #2

declare dso_local i64 @htab_elements(%struct.htab*) #2

declare dso_local double @htab_collisions(%struct.htab*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @free_gimple_type_tables() #0 !dbg !8404 {
entry:
  %0 = load i32, i32* @flag_lto_report, align 4, !dbg !8405
  %tobool = icmp ne i32 %0, 0, !dbg !8405
  br i1 %tobool, label %if.then, label %if.end, !dbg !8407

if.then:                                          ; preds = %entry
  call void @print_gimple_types_stats(), !dbg !8408
  br label %if.end, !dbg !8408

if.end:                                           ; preds = %if.then, %entry
  %1 = load %struct.htab*, %struct.htab** @gimple_types, align 8, !dbg !8409
  %tobool1 = icmp ne %struct.htab* %1, null, !dbg !8409
  br i1 %tobool1, label %if.then2, label %if.end3, !dbg !8411

if.then2:                                         ; preds = %if.end
  %2 = load %struct.htab*, %struct.htab** @gimple_types, align 8, !dbg !8412
  call void @htab_delete(%struct.htab* %2), !dbg !8414
  store %struct.htab* null, %struct.htab** @gimple_types, align 8, !dbg !8415
  br label %if.end3, !dbg !8416

if.end3:                                          ; preds = %if.then2, %if.end
  %3 = load %struct.pointer_map_t*, %struct.pointer_map_t** @type_hash_cache, align 8, !dbg !8417
  %tobool4 = icmp ne %struct.pointer_map_t* %3, null, !dbg !8417
  br i1 %tobool4, label %if.then5, label %if.end6, !dbg !8419

if.then5:                                         ; preds = %if.end3
  %4 = load %struct.pointer_map_t*, %struct.pointer_map_t** @type_hash_cache, align 8, !dbg !8420
  call void @pointer_map_destroy(%struct.pointer_map_t* %4), !dbg !8422
  store %struct.pointer_map_t* null, %struct.pointer_map_t** @type_hash_cache, align 8, !dbg !8423
  br label %if.end6, !dbg !8424

if.end6:                                          ; preds = %if.then5, %if.end3
  %5 = load %struct.htab*, %struct.htab** @gtc_visited, align 8, !dbg !8425
  %tobool7 = icmp ne %struct.htab* %5, null, !dbg !8425
  br i1 %tobool7, label %if.then8, label %if.end13, !dbg !8427

if.then8:                                         ; preds = %if.end6
  %6 = load %struct.htab*, %struct.htab** @gtc_visited, align 8, !dbg !8428
  call void @htab_delete(%struct.htab* %6), !dbg !8430
  %7 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @gtc_ob, i32 0, i32 1), align 8, !dbg !8431
  %8 = bitcast %struct._obstack_chunk* %7 to i8*, !dbg !8431
  %sub.ptr.rhs.cast = ptrtoint i8* %8 to i64, !dbg !8431
  %sub.ptr.sub = sub i64 0, %sub.ptr.rhs.cast, !dbg !8431
  store i64 %sub.ptr.sub, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @gtc_ob, i32 0, i32 5), align 8, !dbg !8431
  %9 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @gtc_ob, i32 0, i32 5), align 8, !dbg !8431
  %cmp = icmp sgt i64 %9, 0, !dbg !8431
  br i1 %cmp, label %land.lhs.true, label %cond.false, !dbg !8431

land.lhs.true:                                    ; preds = %if.then8
  %10 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @gtc_ob, i32 0, i32 5), align 8, !dbg !8431
  %11 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @gtc_ob, i32 0, i32 4), align 8, !dbg !8431
  %12 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @gtc_ob, i32 0, i32 1), align 8, !dbg !8431
  %13 = bitcast %struct._obstack_chunk* %12 to i8*, !dbg !8431
  %sub.ptr.lhs.cast = ptrtoint i8* %11 to i64, !dbg !8431
  %sub.ptr.rhs.cast9 = ptrtoint i8* %13 to i64, !dbg !8431
  %sub.ptr.sub10 = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast9, !dbg !8431
  %cmp11 = icmp slt i64 %10, %sub.ptr.sub10, !dbg !8431
  br i1 %cmp11, label %cond.true, label %cond.false, !dbg !8431

cond.true:                                        ; preds = %land.lhs.true
  %14 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @gtc_ob, i32 0, i32 5), align 8, !dbg !8431
  %15 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @gtc_ob, i32 0, i32 1), align 8, !dbg !8431
  %16 = bitcast %struct._obstack_chunk* %15 to i8*, !dbg !8431
  %add.ptr = getelementptr inbounds i8, i8* %16, i64 %14, !dbg !8431
  store i8* %add.ptr, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @gtc_ob, i32 0, i32 2), align 8, !dbg !8431
  store i8* %add.ptr, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @gtc_ob, i32 0, i32 3), align 8, !dbg !8431
  %17 = ptrtoint i8* %add.ptr to i64, !dbg !8431
  br label %cond.end, !dbg !8431

cond.false:                                       ; preds = %land.lhs.true, %if.then8
  %18 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @gtc_ob, i32 0, i32 5), align 8, !dbg !8431
  %19 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @gtc_ob, i32 0, i32 1), align 8, !dbg !8431
  %20 = bitcast %struct._obstack_chunk* %19 to i8*, !dbg !8431
  %add.ptr12 = getelementptr inbounds i8, i8* %20, i64 %18, !dbg !8431
  call void @obstack_free(%struct.obstack* @gtc_ob, i8* %add.ptr12), !dbg !8431
  br label %cond.end, !dbg !8431

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %17, %cond.true ], [ 0, %cond.false ], !dbg !8431
  store %struct.htab* null, %struct.htab** @gtc_visited, align 8, !dbg !8432
  br label %if.end13, !dbg !8433

if.end13:                                         ; preds = %cond.end, %if.end6
  ret void, !dbg !8434
}

declare dso_local void @htab_delete(%struct.htab*) #2

declare dso_local void @pointer_map_destroy(%struct.pointer_map_t*) #2

declare dso_local void @obstack_free(%struct.obstack*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @gimple_unsigned_type(%union.tree_node* %type) #0 !dbg !8435 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !8436, metadata !DIExpression()), !dbg !8437
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8438
  %call = call %union.tree_node* @gimple_signed_or_unsigned_type(i8 zeroext 1, %union.tree_node* %0), !dbg !8439
  ret %union.tree_node* %call, !dbg !8440
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_signed_or_unsigned_type(i8 zeroext %unsignedp, %union.tree_node* %type) #0 !dbg !8441 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %unsignedp.addr = alloca i8, align 1
  %type.addr = alloca %union.tree_node*, align 8
  %type1 = alloca %union.tree_node*, align 8
  store i8 %unsignedp, i8* %unsignedp.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %unsignedp.addr, metadata !8444, metadata !DIExpression()), !dbg !8445
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !8446, metadata !DIExpression()), !dbg !8447
  call void @llvm.dbg.declare(metadata %union.tree_node** %type1, metadata !8448, metadata !DIExpression()), !dbg !8449
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8450
  %type2 = bitcast %union.tree_node* %0 to %struct.tree_type*, !dbg !8450
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type2, i32 0, i32 16, !dbg !8450
  %1 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !8450
  store %union.tree_node* %1, %union.tree_node** %type1, align 8, !dbg !8451
  %2 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8452
  %3 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 1), align 8, !dbg !8454
  %cmp = icmp eq %union.tree_node* %2, %3, !dbg !8455
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !8456

lor.lhs.false:                                    ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8457
  %5 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 0), align 16, !dbg !8458
  %cmp3 = icmp eq %union.tree_node* %4, %5, !dbg !8459
  br i1 %cmp3, label %if.then, label %lor.lhs.false4, !dbg !8460

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %6 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8461
  %7 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 2), align 16, !dbg !8462
  %cmp5 = icmp eq %union.tree_node* %6, %7, !dbg !8463
  br i1 %cmp5, label %if.then, label %if.end, !dbg !8464

if.then:                                          ; preds = %lor.lhs.false4, %lor.lhs.false, %entry
  %8 = load i8, i8* %unsignedp.addr, align 1, !dbg !8465
  %conv = zext i8 %8 to i32, !dbg !8465
  %tobool = icmp ne i32 %conv, 0, !dbg !8465
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8465

cond.true:                                        ; preds = %if.then
  %9 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 2), align 16, !dbg !8466
  br label %cond.end, !dbg !8465

cond.false:                                       ; preds = %if.then
  %10 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 1), align 8, !dbg !8467
  br label %cond.end, !dbg !8465

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %9, %cond.true ], [ %10, %cond.false ], !dbg !8465
  store %union.tree_node* %cond, %union.tree_node** %retval, align 8, !dbg !8468
  br label %return, !dbg !8468

if.end:                                           ; preds = %lor.lhs.false4
  %11 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8469
  %12 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !8471
  %cmp6 = icmp eq %union.tree_node* %11, %12, !dbg !8472
  br i1 %cmp6, label %if.then11, label %lor.lhs.false8, !dbg !8473

lor.lhs.false8:                                   ; preds = %if.end
  %13 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8474
  %14 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 6), align 16, !dbg !8475
  %cmp9 = icmp eq %union.tree_node* %13, %14, !dbg !8476
  br i1 %cmp9, label %if.then11, label %if.end18, !dbg !8477

if.then11:                                        ; preds = %lor.lhs.false8, %if.end
  %15 = load i8, i8* %unsignedp.addr, align 1, !dbg !8478
  %conv12 = zext i8 %15 to i32, !dbg !8478
  %tobool13 = icmp ne i32 %conv12, 0, !dbg !8478
  br i1 %tobool13, label %cond.true14, label %cond.false15, !dbg !8478

cond.true14:                                      ; preds = %if.then11
  %16 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 6), align 16, !dbg !8479
  br label %cond.end16, !dbg !8478

cond.false15:                                     ; preds = %if.then11
  %17 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !8480
  br label %cond.end16, !dbg !8478

cond.end16:                                       ; preds = %cond.false15, %cond.true14
  %cond17 = phi %union.tree_node* [ %16, %cond.true14 ], [ %17, %cond.false15 ], !dbg !8478
  store %union.tree_node* %cond17, %union.tree_node** %retval, align 8, !dbg !8481
  br label %return, !dbg !8481

if.end18:                                         ; preds = %lor.lhs.false8
  %18 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8482
  %19 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 3), align 8, !dbg !8484
  %cmp19 = icmp eq %union.tree_node* %18, %19, !dbg !8485
  br i1 %cmp19, label %if.then24, label %lor.lhs.false21, !dbg !8486

lor.lhs.false21:                                  ; preds = %if.end18
  %20 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8487
  %21 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 4), align 16, !dbg !8488
  %cmp22 = icmp eq %union.tree_node* %20, %21, !dbg !8489
  br i1 %cmp22, label %if.then24, label %if.end31, !dbg !8490

if.then24:                                        ; preds = %lor.lhs.false21, %if.end18
  %22 = load i8, i8* %unsignedp.addr, align 1, !dbg !8491
  %conv25 = zext i8 %22 to i32, !dbg !8491
  %tobool26 = icmp ne i32 %conv25, 0, !dbg !8491
  br i1 %tobool26, label %cond.true27, label %cond.false28, !dbg !8491

cond.true27:                                      ; preds = %if.then24
  %23 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 4), align 16, !dbg !8492
  br label %cond.end29, !dbg !8491

cond.false28:                                     ; preds = %if.then24
  %24 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 3), align 8, !dbg !8493
  br label %cond.end29, !dbg !8491

cond.end29:                                       ; preds = %cond.false28, %cond.true27
  %cond30 = phi %union.tree_node* [ %23, %cond.true27 ], [ %24, %cond.false28 ], !dbg !8491
  store %union.tree_node* %cond30, %union.tree_node** %retval, align 8, !dbg !8494
  br label %return, !dbg !8494

if.end31:                                         ; preds = %lor.lhs.false21
  %25 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8495
  %26 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 7), align 8, !dbg !8497
  %cmp32 = icmp eq %union.tree_node* %25, %26, !dbg !8498
  br i1 %cmp32, label %if.then37, label %lor.lhs.false34, !dbg !8499

lor.lhs.false34:                                  ; preds = %if.end31
  %27 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8500
  %28 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 8), align 16, !dbg !8501
  %cmp35 = icmp eq %union.tree_node* %27, %28, !dbg !8502
  br i1 %cmp35, label %if.then37, label %if.end44, !dbg !8503

if.then37:                                        ; preds = %lor.lhs.false34, %if.end31
  %29 = load i8, i8* %unsignedp.addr, align 1, !dbg !8504
  %conv38 = zext i8 %29 to i32, !dbg !8504
  %tobool39 = icmp ne i32 %conv38, 0, !dbg !8504
  br i1 %tobool39, label %cond.true40, label %cond.false41, !dbg !8504

cond.true40:                                      ; preds = %if.then37
  %30 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 8), align 16, !dbg !8505
  br label %cond.end42, !dbg !8504

cond.false41:                                     ; preds = %if.then37
  %31 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 7), align 8, !dbg !8506
  br label %cond.end42, !dbg !8504

cond.end42:                                       ; preds = %cond.false41, %cond.true40
  %cond43 = phi %union.tree_node* [ %30, %cond.true40 ], [ %31, %cond.false41 ], !dbg !8504
  store %union.tree_node* %cond43, %union.tree_node** %retval, align 8, !dbg !8507
  br label %return, !dbg !8507

if.end44:                                         ; preds = %lor.lhs.false34
  %32 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8508
  %33 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 9), align 8, !dbg !8510
  %cmp45 = icmp eq %union.tree_node* %32, %33, !dbg !8511
  br i1 %cmp45, label %if.then50, label %lor.lhs.false47, !dbg !8512

lor.lhs.false47:                                  ; preds = %if.end44
  %34 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8513
  %35 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 10), align 16, !dbg !8514
  %cmp48 = icmp eq %union.tree_node* %34, %35, !dbg !8515
  br i1 %cmp48, label %if.then50, label %if.end57, !dbg !8516

if.then50:                                        ; preds = %lor.lhs.false47, %if.end44
  %36 = load i8, i8* %unsignedp.addr, align 1, !dbg !8517
  %conv51 = zext i8 %36 to i32, !dbg !8517
  %tobool52 = icmp ne i32 %conv51, 0, !dbg !8517
  br i1 %tobool52, label %cond.true53, label %cond.false54, !dbg !8517

cond.true53:                                      ; preds = %if.then50
  %37 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 10), align 16, !dbg !8518
  br label %cond.end55, !dbg !8517

cond.false54:                                     ; preds = %if.then50
  %38 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 9), align 8, !dbg !8519
  br label %cond.end55, !dbg !8517

cond.end55:                                       ; preds = %cond.false54, %cond.true53
  %cond56 = phi %union.tree_node* [ %37, %cond.true53 ], [ %38, %cond.false54 ], !dbg !8517
  store %union.tree_node* %cond56, %union.tree_node** %retval, align 8, !dbg !8520
  br label %return, !dbg !8520

if.end57:                                         ; preds = %lor.lhs.false47
  %39 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8521
  %40 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 5), align 8, !dbg !8523
  %cmp58 = icmp eq %union.tree_node* %39, %40, !dbg !8524
  br i1 %cmp58, label %if.then63, label %lor.lhs.false60, !dbg !8525

lor.lhs.false60:                                  ; preds = %if.end57
  %41 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8526
  %42 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 10), align 16, !dbg !8527
  %cmp61 = icmp eq %union.tree_node* %41, %42, !dbg !8528
  br i1 %cmp61, label %if.then63, label %if.end70, !dbg !8529

if.then63:                                        ; preds = %lor.lhs.false60, %if.end57
  %43 = load i8, i8* %unsignedp.addr, align 1, !dbg !8530
  %conv64 = zext i8 %43 to i32, !dbg !8530
  %tobool65 = icmp ne i32 %conv64, 0, !dbg !8530
  br i1 %tobool65, label %cond.true66, label %cond.false67, !dbg !8530

cond.true66:                                      ; preds = %if.then63
  %44 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 10), align 16, !dbg !8531
  br label %cond.end68, !dbg !8530

cond.false67:                                     ; preds = %if.then63
  %45 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 5), align 8, !dbg !8532
  br label %cond.end68, !dbg !8530

cond.end68:                                       ; preds = %cond.false67, %cond.true66
  %cond69 = phi %union.tree_node* [ %44, %cond.true66 ], [ %45, %cond.false67 ], !dbg !8530
  store %union.tree_node* %cond69, %union.tree_node** %retval, align 8, !dbg !8533
  br label %return, !dbg !8533

if.end70:                                         ; preds = %lor.lhs.false60
  %46 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8534
  %47 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 4), align 16, !dbg !8536
  %cmp71 = icmp eq %union.tree_node* %46, %47, !dbg !8537
  br i1 %cmp71, label %if.then76, label %lor.lhs.false73, !dbg !8538

lor.lhs.false73:                                  ; preds = %if.end70
  %48 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8539
  %49 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 9), align 8, !dbg !8540
  %cmp74 = icmp eq %union.tree_node* %48, %49, !dbg !8541
  br i1 %cmp74, label %if.then76, label %if.end83, !dbg !8542

if.then76:                                        ; preds = %lor.lhs.false73, %if.end70
  %50 = load i8, i8* %unsignedp.addr, align 1, !dbg !8543
  %conv77 = zext i8 %50 to i32, !dbg !8543
  %tobool78 = icmp ne i32 %conv77, 0, !dbg !8543
  br i1 %tobool78, label %cond.true79, label %cond.false80, !dbg !8543

cond.true79:                                      ; preds = %if.then76
  %51 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 9), align 8, !dbg !8544
  br label %cond.end81, !dbg !8543

cond.false80:                                     ; preds = %if.then76
  %52 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 4), align 16, !dbg !8545
  br label %cond.end81, !dbg !8543

cond.end81:                                       ; preds = %cond.false80, %cond.true79
  %cond82 = phi %union.tree_node* [ %51, %cond.true79 ], [ %52, %cond.false80 ], !dbg !8543
  store %union.tree_node* %cond82, %union.tree_node** %retval, align 8, !dbg !8546
  br label %return, !dbg !8546

if.end83:                                         ; preds = %lor.lhs.false73
  %53 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8547
  %54 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 3), align 8, !dbg !8549
  %cmp84 = icmp eq %union.tree_node* %53, %54, !dbg !8550
  br i1 %cmp84, label %if.then89, label %lor.lhs.false86, !dbg !8551

lor.lhs.false86:                                  ; preds = %if.end83
  %55 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8552
  %56 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 8), align 16, !dbg !8553
  %cmp87 = icmp eq %union.tree_node* %55, %56, !dbg !8554
  br i1 %cmp87, label %if.then89, label %if.end96, !dbg !8555

if.then89:                                        ; preds = %lor.lhs.false86, %if.end83
  %57 = load i8, i8* %unsignedp.addr, align 1, !dbg !8556
  %conv90 = zext i8 %57 to i32, !dbg !8556
  %tobool91 = icmp ne i32 %conv90, 0, !dbg !8556
  br i1 %tobool91, label %cond.true92, label %cond.false93, !dbg !8556

cond.true92:                                      ; preds = %if.then89
  %58 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 8), align 16, !dbg !8557
  br label %cond.end94, !dbg !8556

cond.false93:                                     ; preds = %if.then89
  %59 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 3), align 8, !dbg !8558
  br label %cond.end94, !dbg !8556

cond.end94:                                       ; preds = %cond.false93, %cond.true92
  %cond95 = phi %union.tree_node* [ %58, %cond.true92 ], [ %59, %cond.false93 ], !dbg !8556
  store %union.tree_node* %cond95, %union.tree_node** %retval, align 8, !dbg !8559
  br label %return, !dbg !8559

if.end96:                                         ; preds = %lor.lhs.false86
  %60 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8560
  %61 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 2), align 16, !dbg !8562
  %cmp97 = icmp eq %union.tree_node* %60, %61, !dbg !8563
  br i1 %cmp97, label %if.then102, label %lor.lhs.false99, !dbg !8564

lor.lhs.false99:                                  ; preds = %if.end96
  %62 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8565
  %63 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 7), align 8, !dbg !8566
  %cmp100 = icmp eq %union.tree_node* %62, %63, !dbg !8567
  br i1 %cmp100, label %if.then102, label %if.end109, !dbg !8568

if.then102:                                       ; preds = %lor.lhs.false99, %if.end96
  %64 = load i8, i8* %unsignedp.addr, align 1, !dbg !8569
  %conv103 = zext i8 %64 to i32, !dbg !8569
  %tobool104 = icmp ne i32 %conv103, 0, !dbg !8569
  br i1 %tobool104, label %cond.true105, label %cond.false106, !dbg !8569

cond.true105:                                     ; preds = %if.then102
  %65 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 7), align 8, !dbg !8570
  br label %cond.end107, !dbg !8569

cond.false106:                                    ; preds = %if.then102
  %66 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 2), align 16, !dbg !8571
  br label %cond.end107, !dbg !8569

cond.end107:                                      ; preds = %cond.false106, %cond.true105
  %cond108 = phi %union.tree_node* [ %65, %cond.true105 ], [ %66, %cond.false106 ], !dbg !8569
  store %union.tree_node* %cond108, %union.tree_node** %retval, align 8, !dbg !8572
  br label %return, !dbg !8572

if.end109:                                        ; preds = %lor.lhs.false99
  %67 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8573
  %68 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 1), align 8, !dbg !8575
  %cmp110 = icmp eq %union.tree_node* %67, %68, !dbg !8576
  br i1 %cmp110, label %if.then115, label %lor.lhs.false112, !dbg !8577

lor.lhs.false112:                                 ; preds = %if.end109
  %69 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8578
  %70 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 6), align 16, !dbg !8579
  %cmp113 = icmp eq %union.tree_node* %69, %70, !dbg !8580
  br i1 %cmp113, label %if.then115, label %if.end122, !dbg !8581

if.then115:                                       ; preds = %lor.lhs.false112, %if.end109
  %71 = load i8, i8* %unsignedp.addr, align 1, !dbg !8582
  %conv116 = zext i8 %71 to i32, !dbg !8582
  %tobool117 = icmp ne i32 %conv116, 0, !dbg !8582
  br i1 %tobool117, label %cond.true118, label %cond.false119, !dbg !8582

cond.true118:                                     ; preds = %if.then115
  %72 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 6), align 16, !dbg !8583
  br label %cond.end120, !dbg !8582

cond.false119:                                    ; preds = %if.then115
  %73 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 1), align 8, !dbg !8584
  br label %cond.end120, !dbg !8582

cond.end120:                                      ; preds = %cond.false119, %cond.true118
  %cond121 = phi %union.tree_node* [ %72, %cond.true118 ], [ %73, %cond.false119 ], !dbg !8582
  store %union.tree_node* %cond121, %union.tree_node** %retval, align 8, !dbg !8585
  br label %return, !dbg !8585

if.end122:                                        ; preds = %lor.lhs.false112
  %74 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8586
  %75 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 65), align 8, !dbg !8586
  %cmp123 = icmp eq %union.tree_node* %74, %75, !dbg !8586
  br i1 %cmp123, label %if.then128, label %lor.lhs.false125, !dbg !8586

lor.lhs.false125:                                 ; preds = %if.end122
  %76 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8586
  %77 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 69), align 8, !dbg !8586
  %cmp126 = icmp eq %union.tree_node* %76, %77, !dbg !8586
  br i1 %cmp126, label %if.then128, label %if.end135, !dbg !8588

if.then128:                                       ; preds = %lor.lhs.false125, %if.end122
  %78 = load i8, i8* %unsignedp.addr, align 1, !dbg !8586
  %conv129 = zext i8 %78 to i32, !dbg !8586
  %tobool130 = icmp ne i32 %conv129, 0, !dbg !8586
  br i1 %tobool130, label %cond.true131, label %cond.false132, !dbg !8586

cond.true131:                                     ; preds = %if.then128
  %79 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 69), align 8, !dbg !8586
  br label %cond.end133, !dbg !8586

cond.false132:                                    ; preds = %if.then128
  %80 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 65), align 8, !dbg !8586
  br label %cond.end133, !dbg !8586

cond.end133:                                      ; preds = %cond.false132, %cond.true131
  %cond134 = phi %union.tree_node* [ %79, %cond.true131 ], [ %80, %cond.false132 ], !dbg !8586
  store %union.tree_node* %cond134, %union.tree_node** %retval, align 8, !dbg !8586
  br label %return, !dbg !8586

if.end135:                                        ; preds = %lor.lhs.false125
  %81 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8589
  %82 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 66), align 16, !dbg !8589
  %cmp136 = icmp eq %union.tree_node* %81, %82, !dbg !8589
  br i1 %cmp136, label %if.then141, label %lor.lhs.false138, !dbg !8589

lor.lhs.false138:                                 ; preds = %if.end135
  %83 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8589
  %84 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 70), align 16, !dbg !8589
  %cmp139 = icmp eq %union.tree_node* %83, %84, !dbg !8589
  br i1 %cmp139, label %if.then141, label %if.end148, !dbg !8588

if.then141:                                       ; preds = %lor.lhs.false138, %if.end135
  %85 = load i8, i8* %unsignedp.addr, align 1, !dbg !8589
  %conv142 = zext i8 %85 to i32, !dbg !8589
  %tobool143 = icmp ne i32 %conv142, 0, !dbg !8589
  br i1 %tobool143, label %cond.true144, label %cond.false145, !dbg !8589

cond.true144:                                     ; preds = %if.then141
  %86 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 70), align 16, !dbg !8589
  br label %cond.end146, !dbg !8589

cond.false145:                                    ; preds = %if.then141
  %87 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 66), align 16, !dbg !8589
  br label %cond.end146, !dbg !8589

cond.end146:                                      ; preds = %cond.false145, %cond.true144
  %cond147 = phi %union.tree_node* [ %86, %cond.true144 ], [ %87, %cond.false145 ], !dbg !8589
  store %union.tree_node* %cond147, %union.tree_node** %retval, align 8, !dbg !8589
  br label %return, !dbg !8589

if.end148:                                        ; preds = %lor.lhs.false138
  %88 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8591
  %89 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 67), align 8, !dbg !8591
  %cmp149 = icmp eq %union.tree_node* %88, %89, !dbg !8591
  br i1 %cmp149, label %if.then154, label %lor.lhs.false151, !dbg !8591

lor.lhs.false151:                                 ; preds = %if.end148
  %90 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8591
  %91 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 71), align 8, !dbg !8591
  %cmp152 = icmp eq %union.tree_node* %90, %91, !dbg !8591
  br i1 %cmp152, label %if.then154, label %if.end161, !dbg !8588

if.then154:                                       ; preds = %lor.lhs.false151, %if.end148
  %92 = load i8, i8* %unsignedp.addr, align 1, !dbg !8591
  %conv155 = zext i8 %92 to i32, !dbg !8591
  %tobool156 = icmp ne i32 %conv155, 0, !dbg !8591
  br i1 %tobool156, label %cond.true157, label %cond.false158, !dbg !8591

cond.true157:                                     ; preds = %if.then154
  %93 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 71), align 8, !dbg !8591
  br label %cond.end159, !dbg !8591

cond.false158:                                    ; preds = %if.then154
  %94 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 67), align 8, !dbg !8591
  br label %cond.end159, !dbg !8591

cond.end159:                                      ; preds = %cond.false158, %cond.true157
  %cond160 = phi %union.tree_node* [ %93, %cond.true157 ], [ %94, %cond.false158 ], !dbg !8591
  store %union.tree_node* %cond160, %union.tree_node** %retval, align 8, !dbg !8591
  br label %return, !dbg !8591

if.end161:                                        ; preds = %lor.lhs.false151
  %95 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8593
  %96 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 68), align 16, !dbg !8593
  %cmp162 = icmp eq %union.tree_node* %95, %96, !dbg !8593
  br i1 %cmp162, label %if.then167, label %lor.lhs.false164, !dbg !8593

lor.lhs.false164:                                 ; preds = %if.end161
  %97 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8593
  %98 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 72), align 16, !dbg !8593
  %cmp165 = icmp eq %union.tree_node* %97, %98, !dbg !8593
  br i1 %cmp165, label %if.then167, label %if.end174, !dbg !8588

if.then167:                                       ; preds = %lor.lhs.false164, %if.end161
  %99 = load i8, i8* %unsignedp.addr, align 1, !dbg !8593
  %conv168 = zext i8 %99 to i32, !dbg !8593
  %tobool169 = icmp ne i32 %conv168, 0, !dbg !8593
  br i1 %tobool169, label %cond.true170, label %cond.false171, !dbg !8593

cond.true170:                                     ; preds = %if.then167
  %100 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 72), align 16, !dbg !8593
  br label %cond.end172, !dbg !8593

cond.false171:                                    ; preds = %if.then167
  %101 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 68), align 16, !dbg !8593
  br label %cond.end172, !dbg !8593

cond.end172:                                      ; preds = %cond.false171, %cond.true170
  %cond173 = phi %union.tree_node* [ %100, %cond.true170 ], [ %101, %cond.false171 ], !dbg !8593
  store %union.tree_node* %cond173, %union.tree_node** %retval, align 8, !dbg !8593
  br label %return, !dbg !8593

if.end174:                                        ; preds = %lor.lhs.false164
  %102 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8595
  %103 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 57), align 8, !dbg !8595
  %cmp175 = icmp eq %union.tree_node* %102, %103, !dbg !8595
  br i1 %cmp175, label %if.then180, label %lor.lhs.false177, !dbg !8595

lor.lhs.false177:                                 ; preds = %if.end174
  %104 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8595
  %105 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 61), align 8, !dbg !8595
  %cmp178 = icmp eq %union.tree_node* %104, %105, !dbg !8595
  br i1 %cmp178, label %if.then180, label %if.end187, !dbg !8597

if.then180:                                       ; preds = %lor.lhs.false177, %if.end174
  %106 = load i8, i8* %unsignedp.addr, align 1, !dbg !8595
  %conv181 = zext i8 %106 to i32, !dbg !8595
  %tobool182 = icmp ne i32 %conv181, 0, !dbg !8595
  br i1 %tobool182, label %cond.true183, label %cond.false184, !dbg !8595

cond.true183:                                     ; preds = %if.then180
  %107 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 61), align 8, !dbg !8595
  br label %cond.end185, !dbg !8595

cond.false184:                                    ; preds = %if.then180
  %108 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 57), align 8, !dbg !8595
  br label %cond.end185, !dbg !8595

cond.end185:                                      ; preds = %cond.false184, %cond.true183
  %cond186 = phi %union.tree_node* [ %107, %cond.true183 ], [ %108, %cond.false184 ], !dbg !8595
  store %union.tree_node* %cond186, %union.tree_node** %retval, align 8, !dbg !8595
  br label %return, !dbg !8595

if.end187:                                        ; preds = %lor.lhs.false177
  %109 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8598
  %110 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 58), align 16, !dbg !8598
  %cmp188 = icmp eq %union.tree_node* %109, %110, !dbg !8598
  br i1 %cmp188, label %if.then193, label %lor.lhs.false190, !dbg !8598

lor.lhs.false190:                                 ; preds = %if.end187
  %111 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8598
  %112 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 62), align 16, !dbg !8598
  %cmp191 = icmp eq %union.tree_node* %111, %112, !dbg !8598
  br i1 %cmp191, label %if.then193, label %if.end200, !dbg !8597

if.then193:                                       ; preds = %lor.lhs.false190, %if.end187
  %113 = load i8, i8* %unsignedp.addr, align 1, !dbg !8598
  %conv194 = zext i8 %113 to i32, !dbg !8598
  %tobool195 = icmp ne i32 %conv194, 0, !dbg !8598
  br i1 %tobool195, label %cond.true196, label %cond.false197, !dbg !8598

cond.true196:                                     ; preds = %if.then193
  %114 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 62), align 16, !dbg !8598
  br label %cond.end198, !dbg !8598

cond.false197:                                    ; preds = %if.then193
  %115 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 58), align 16, !dbg !8598
  br label %cond.end198, !dbg !8598

cond.end198:                                      ; preds = %cond.false197, %cond.true196
  %cond199 = phi %union.tree_node* [ %114, %cond.true196 ], [ %115, %cond.false197 ], !dbg !8598
  store %union.tree_node* %cond199, %union.tree_node** %retval, align 8, !dbg !8598
  br label %return, !dbg !8598

if.end200:                                        ; preds = %lor.lhs.false190
  %116 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8600
  %117 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 59), align 8, !dbg !8600
  %cmp201 = icmp eq %union.tree_node* %116, %117, !dbg !8600
  br i1 %cmp201, label %if.then206, label %lor.lhs.false203, !dbg !8600

lor.lhs.false203:                                 ; preds = %if.end200
  %118 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8600
  %119 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 63), align 8, !dbg !8600
  %cmp204 = icmp eq %union.tree_node* %118, %119, !dbg !8600
  br i1 %cmp204, label %if.then206, label %if.end213, !dbg !8597

if.then206:                                       ; preds = %lor.lhs.false203, %if.end200
  %120 = load i8, i8* %unsignedp.addr, align 1, !dbg !8600
  %conv207 = zext i8 %120 to i32, !dbg !8600
  %tobool208 = icmp ne i32 %conv207, 0, !dbg !8600
  br i1 %tobool208, label %cond.true209, label %cond.false210, !dbg !8600

cond.true209:                                     ; preds = %if.then206
  %121 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 63), align 8, !dbg !8600
  br label %cond.end211, !dbg !8600

cond.false210:                                    ; preds = %if.then206
  %122 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 59), align 8, !dbg !8600
  br label %cond.end211, !dbg !8600

cond.end211:                                      ; preds = %cond.false210, %cond.true209
  %cond212 = phi %union.tree_node* [ %121, %cond.true209 ], [ %122, %cond.false210 ], !dbg !8600
  store %union.tree_node* %cond212, %union.tree_node** %retval, align 8, !dbg !8600
  br label %return, !dbg !8600

if.end213:                                        ; preds = %lor.lhs.false203
  %123 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8602
  %124 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 60), align 16, !dbg !8602
  %cmp214 = icmp eq %union.tree_node* %123, %124, !dbg !8602
  br i1 %cmp214, label %if.then219, label %lor.lhs.false216, !dbg !8602

lor.lhs.false216:                                 ; preds = %if.end213
  %125 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8602
  %126 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 64), align 16, !dbg !8602
  %cmp217 = icmp eq %union.tree_node* %125, %126, !dbg !8602
  br i1 %cmp217, label %if.then219, label %if.end226, !dbg !8597

if.then219:                                       ; preds = %lor.lhs.false216, %if.end213
  %127 = load i8, i8* %unsignedp.addr, align 1, !dbg !8602
  %conv220 = zext i8 %127 to i32, !dbg !8602
  %tobool221 = icmp ne i32 %conv220, 0, !dbg !8602
  br i1 %tobool221, label %cond.true222, label %cond.false223, !dbg !8602

cond.true222:                                     ; preds = %if.then219
  %128 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 64), align 16, !dbg !8602
  br label %cond.end224, !dbg !8602

cond.false223:                                    ; preds = %if.then219
  %129 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 60), align 16, !dbg !8602
  br label %cond.end224, !dbg !8602

cond.end224:                                      ; preds = %cond.false223, %cond.true222
  %cond225 = phi %union.tree_node* [ %128, %cond.true222 ], [ %129, %cond.false223 ], !dbg !8602
  store %union.tree_node* %cond225, %union.tree_node** %retval, align 8, !dbg !8602
  br label %return, !dbg !8602

if.end226:                                        ; preds = %lor.lhs.false216
  %130 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8604
  %131 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 81), align 8, !dbg !8604
  %cmp227 = icmp eq %union.tree_node* %130, %131, !dbg !8604
  br i1 %cmp227, label %if.then232, label %lor.lhs.false229, !dbg !8604

lor.lhs.false229:                                 ; preds = %if.end226
  %132 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8604
  %133 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 85), align 8, !dbg !8604
  %cmp230 = icmp eq %union.tree_node* %132, %133, !dbg !8604
  br i1 %cmp230, label %if.then232, label %if.end239, !dbg !8606

if.then232:                                       ; preds = %lor.lhs.false229, %if.end226
  %134 = load i8, i8* %unsignedp.addr, align 1, !dbg !8604
  %conv233 = zext i8 %134 to i32, !dbg !8604
  %tobool234 = icmp ne i32 %conv233, 0, !dbg !8604
  br i1 %tobool234, label %cond.true235, label %cond.false236, !dbg !8604

cond.true235:                                     ; preds = %if.then232
  %135 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 85), align 8, !dbg !8604
  br label %cond.end237, !dbg !8604

cond.false236:                                    ; preds = %if.then232
  %136 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 81), align 8, !dbg !8604
  br label %cond.end237, !dbg !8604

cond.end237:                                      ; preds = %cond.false236, %cond.true235
  %cond238 = phi %union.tree_node* [ %135, %cond.true235 ], [ %136, %cond.false236 ], !dbg !8604
  store %union.tree_node* %cond238, %union.tree_node** %retval, align 8, !dbg !8604
  br label %return, !dbg !8604

if.end239:                                        ; preds = %lor.lhs.false229
  %137 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8607
  %138 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 82), align 16, !dbg !8607
  %cmp240 = icmp eq %union.tree_node* %137, %138, !dbg !8607
  br i1 %cmp240, label %if.then245, label %lor.lhs.false242, !dbg !8607

lor.lhs.false242:                                 ; preds = %if.end239
  %139 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8607
  %140 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 86), align 16, !dbg !8607
  %cmp243 = icmp eq %union.tree_node* %139, %140, !dbg !8607
  br i1 %cmp243, label %if.then245, label %if.end252, !dbg !8606

if.then245:                                       ; preds = %lor.lhs.false242, %if.end239
  %141 = load i8, i8* %unsignedp.addr, align 1, !dbg !8607
  %conv246 = zext i8 %141 to i32, !dbg !8607
  %tobool247 = icmp ne i32 %conv246, 0, !dbg !8607
  br i1 %tobool247, label %cond.true248, label %cond.false249, !dbg !8607

cond.true248:                                     ; preds = %if.then245
  %142 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 86), align 16, !dbg !8607
  br label %cond.end250, !dbg !8607

cond.false249:                                    ; preds = %if.then245
  %143 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 82), align 16, !dbg !8607
  br label %cond.end250, !dbg !8607

cond.end250:                                      ; preds = %cond.false249, %cond.true248
  %cond251 = phi %union.tree_node* [ %142, %cond.true248 ], [ %143, %cond.false249 ], !dbg !8607
  store %union.tree_node* %cond251, %union.tree_node** %retval, align 8, !dbg !8607
  br label %return, !dbg !8607

if.end252:                                        ; preds = %lor.lhs.false242
  %144 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8609
  %145 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 83), align 8, !dbg !8609
  %cmp253 = icmp eq %union.tree_node* %144, %145, !dbg !8609
  br i1 %cmp253, label %if.then258, label %lor.lhs.false255, !dbg !8609

lor.lhs.false255:                                 ; preds = %if.end252
  %146 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8609
  %147 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 87), align 8, !dbg !8609
  %cmp256 = icmp eq %union.tree_node* %146, %147, !dbg !8609
  br i1 %cmp256, label %if.then258, label %if.end265, !dbg !8606

if.then258:                                       ; preds = %lor.lhs.false255, %if.end252
  %148 = load i8, i8* %unsignedp.addr, align 1, !dbg !8609
  %conv259 = zext i8 %148 to i32, !dbg !8609
  %tobool260 = icmp ne i32 %conv259, 0, !dbg !8609
  br i1 %tobool260, label %cond.true261, label %cond.false262, !dbg !8609

cond.true261:                                     ; preds = %if.then258
  %149 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 87), align 8, !dbg !8609
  br label %cond.end263, !dbg !8609

cond.false262:                                    ; preds = %if.then258
  %150 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 83), align 8, !dbg !8609
  br label %cond.end263, !dbg !8609

cond.end263:                                      ; preds = %cond.false262, %cond.true261
  %cond264 = phi %union.tree_node* [ %149, %cond.true261 ], [ %150, %cond.false262 ], !dbg !8609
  store %union.tree_node* %cond264, %union.tree_node** %retval, align 8, !dbg !8609
  br label %return, !dbg !8609

if.end265:                                        ; preds = %lor.lhs.false255
  %151 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8611
  %152 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 84), align 16, !dbg !8611
  %cmp266 = icmp eq %union.tree_node* %151, %152, !dbg !8611
  br i1 %cmp266, label %if.then271, label %lor.lhs.false268, !dbg !8611

lor.lhs.false268:                                 ; preds = %if.end265
  %153 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8611
  %154 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 88), align 16, !dbg !8611
  %cmp269 = icmp eq %union.tree_node* %153, %154, !dbg !8611
  br i1 %cmp269, label %if.then271, label %if.end278, !dbg !8606

if.then271:                                       ; preds = %lor.lhs.false268, %if.end265
  %155 = load i8, i8* %unsignedp.addr, align 1, !dbg !8611
  %conv272 = zext i8 %155 to i32, !dbg !8611
  %tobool273 = icmp ne i32 %conv272, 0, !dbg !8611
  br i1 %tobool273, label %cond.true274, label %cond.false275, !dbg !8611

cond.true274:                                     ; preds = %if.then271
  %156 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 88), align 16, !dbg !8611
  br label %cond.end276, !dbg !8611

cond.false275:                                    ; preds = %if.then271
  %157 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 84), align 16, !dbg !8611
  br label %cond.end276, !dbg !8611

cond.end276:                                      ; preds = %cond.false275, %cond.true274
  %cond277 = phi %union.tree_node* [ %156, %cond.true274 ], [ %157, %cond.false275 ], !dbg !8611
  store %union.tree_node* %cond277, %union.tree_node** %retval, align 8, !dbg !8611
  br label %return, !dbg !8611

if.end278:                                        ; preds = %lor.lhs.false268
  %158 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8613
  %159 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 73), align 8, !dbg !8613
  %cmp279 = icmp eq %union.tree_node* %158, %159, !dbg !8613
  br i1 %cmp279, label %if.then284, label %lor.lhs.false281, !dbg !8613

lor.lhs.false281:                                 ; preds = %if.end278
  %160 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8613
  %161 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 77), align 8, !dbg !8613
  %cmp282 = icmp eq %union.tree_node* %160, %161, !dbg !8613
  br i1 %cmp282, label %if.then284, label %if.end291, !dbg !8615

if.then284:                                       ; preds = %lor.lhs.false281, %if.end278
  %162 = load i8, i8* %unsignedp.addr, align 1, !dbg !8613
  %conv285 = zext i8 %162 to i32, !dbg !8613
  %tobool286 = icmp ne i32 %conv285, 0, !dbg !8613
  br i1 %tobool286, label %cond.true287, label %cond.false288, !dbg !8613

cond.true287:                                     ; preds = %if.then284
  %163 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 77), align 8, !dbg !8613
  br label %cond.end289, !dbg !8613

cond.false288:                                    ; preds = %if.then284
  %164 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 73), align 8, !dbg !8613
  br label %cond.end289, !dbg !8613

cond.end289:                                      ; preds = %cond.false288, %cond.true287
  %cond290 = phi %union.tree_node* [ %163, %cond.true287 ], [ %164, %cond.false288 ], !dbg !8613
  store %union.tree_node* %cond290, %union.tree_node** %retval, align 8, !dbg !8613
  br label %return, !dbg !8613

if.end291:                                        ; preds = %lor.lhs.false281
  %165 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8616
  %166 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 74), align 16, !dbg !8616
  %cmp292 = icmp eq %union.tree_node* %165, %166, !dbg !8616
  br i1 %cmp292, label %if.then297, label %lor.lhs.false294, !dbg !8616

lor.lhs.false294:                                 ; preds = %if.end291
  %167 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8616
  %168 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 78), align 16, !dbg !8616
  %cmp295 = icmp eq %union.tree_node* %167, %168, !dbg !8616
  br i1 %cmp295, label %if.then297, label %if.end304, !dbg !8615

if.then297:                                       ; preds = %lor.lhs.false294, %if.end291
  %169 = load i8, i8* %unsignedp.addr, align 1, !dbg !8616
  %conv298 = zext i8 %169 to i32, !dbg !8616
  %tobool299 = icmp ne i32 %conv298, 0, !dbg !8616
  br i1 %tobool299, label %cond.true300, label %cond.false301, !dbg !8616

cond.true300:                                     ; preds = %if.then297
  %170 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 78), align 16, !dbg !8616
  br label %cond.end302, !dbg !8616

cond.false301:                                    ; preds = %if.then297
  %171 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 74), align 16, !dbg !8616
  br label %cond.end302, !dbg !8616

cond.end302:                                      ; preds = %cond.false301, %cond.true300
  %cond303 = phi %union.tree_node* [ %170, %cond.true300 ], [ %171, %cond.false301 ], !dbg !8616
  store %union.tree_node* %cond303, %union.tree_node** %retval, align 8, !dbg !8616
  br label %return, !dbg !8616

if.end304:                                        ; preds = %lor.lhs.false294
  %172 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8618
  %173 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 75), align 8, !dbg !8618
  %cmp305 = icmp eq %union.tree_node* %172, %173, !dbg !8618
  br i1 %cmp305, label %if.then310, label %lor.lhs.false307, !dbg !8618

lor.lhs.false307:                                 ; preds = %if.end304
  %174 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8618
  %175 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 79), align 8, !dbg !8618
  %cmp308 = icmp eq %union.tree_node* %174, %175, !dbg !8618
  br i1 %cmp308, label %if.then310, label %if.end317, !dbg !8615

if.then310:                                       ; preds = %lor.lhs.false307, %if.end304
  %176 = load i8, i8* %unsignedp.addr, align 1, !dbg !8618
  %conv311 = zext i8 %176 to i32, !dbg !8618
  %tobool312 = icmp ne i32 %conv311, 0, !dbg !8618
  br i1 %tobool312, label %cond.true313, label %cond.false314, !dbg !8618

cond.true313:                                     ; preds = %if.then310
  %177 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 79), align 8, !dbg !8618
  br label %cond.end315, !dbg !8618

cond.false314:                                    ; preds = %if.then310
  %178 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 75), align 8, !dbg !8618
  br label %cond.end315, !dbg !8618

cond.end315:                                      ; preds = %cond.false314, %cond.true313
  %cond316 = phi %union.tree_node* [ %177, %cond.true313 ], [ %178, %cond.false314 ], !dbg !8618
  store %union.tree_node* %cond316, %union.tree_node** %retval, align 8, !dbg !8618
  br label %return, !dbg !8618

if.end317:                                        ; preds = %lor.lhs.false307
  %179 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8620
  %180 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 76), align 16, !dbg !8620
  %cmp318 = icmp eq %union.tree_node* %179, %180, !dbg !8620
  br i1 %cmp318, label %if.then323, label %lor.lhs.false320, !dbg !8620

lor.lhs.false320:                                 ; preds = %if.end317
  %181 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8620
  %182 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 80), align 16, !dbg !8620
  %cmp321 = icmp eq %union.tree_node* %181, %182, !dbg !8620
  br i1 %cmp321, label %if.then323, label %if.end330, !dbg !8615

if.then323:                                       ; preds = %lor.lhs.false320, %if.end317
  %183 = load i8, i8* %unsignedp.addr, align 1, !dbg !8620
  %conv324 = zext i8 %183 to i32, !dbg !8620
  %tobool325 = icmp ne i32 %conv324, 0, !dbg !8620
  br i1 %tobool325, label %cond.true326, label %cond.false327, !dbg !8620

cond.true326:                                     ; preds = %if.then323
  %184 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 80), align 16, !dbg !8620
  br label %cond.end328, !dbg !8620

cond.false327:                                    ; preds = %if.then323
  %185 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 76), align 16, !dbg !8620
  br label %cond.end328, !dbg !8620

cond.end328:                                      ; preds = %cond.false327, %cond.true326
  %cond329 = phi %union.tree_node* [ %184, %cond.true326 ], [ %185, %cond.false327 ], !dbg !8620
  store %union.tree_node* %cond329, %union.tree_node** %retval, align 8, !dbg !8620
  br label %return, !dbg !8620

if.end330:                                        ; preds = %lor.lhs.false320
  %186 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8622
  %187 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 89), align 8, !dbg !8622
  %cmp331 = icmp eq %union.tree_node* %186, %187, !dbg !8622
  br i1 %cmp331, label %if.then336, label %lor.lhs.false333, !dbg !8622

lor.lhs.false333:                                 ; preds = %if.end330
  %188 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8622
  %189 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 94), align 16, !dbg !8622
  %cmp334 = icmp eq %union.tree_node* %188, %189, !dbg !8622
  br i1 %cmp334, label %if.then336, label %if.end343, !dbg !8624

if.then336:                                       ; preds = %lor.lhs.false333, %if.end330
  %190 = load i8, i8* %unsignedp.addr, align 1, !dbg !8622
  %conv337 = zext i8 %190 to i32, !dbg !8622
  %tobool338 = icmp ne i32 %conv337, 0, !dbg !8622
  br i1 %tobool338, label %cond.true339, label %cond.false340, !dbg !8622

cond.true339:                                     ; preds = %if.then336
  %191 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 94), align 16, !dbg !8622
  br label %cond.end341, !dbg !8622

cond.false340:                                    ; preds = %if.then336
  %192 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 89), align 8, !dbg !8622
  br label %cond.end341, !dbg !8622

cond.end341:                                      ; preds = %cond.false340, %cond.true339
  %cond342 = phi %union.tree_node* [ %191, %cond.true339 ], [ %192, %cond.false340 ], !dbg !8622
  store %union.tree_node* %cond342, %union.tree_node** %retval, align 8, !dbg !8622
  br label %return, !dbg !8622

if.end343:                                        ; preds = %lor.lhs.false333
  %193 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8625
  %194 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 90), align 16, !dbg !8625
  %cmp344 = icmp eq %union.tree_node* %193, %194, !dbg !8625
  br i1 %cmp344, label %if.then349, label %lor.lhs.false346, !dbg !8625

lor.lhs.false346:                                 ; preds = %if.end343
  %195 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8625
  %196 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 95), align 8, !dbg !8625
  %cmp347 = icmp eq %union.tree_node* %195, %196, !dbg !8625
  br i1 %cmp347, label %if.then349, label %if.end356, !dbg !8627

if.then349:                                       ; preds = %lor.lhs.false346, %if.end343
  %197 = load i8, i8* %unsignedp.addr, align 1, !dbg !8625
  %conv350 = zext i8 %197 to i32, !dbg !8625
  %tobool351 = icmp ne i32 %conv350, 0, !dbg !8625
  br i1 %tobool351, label %cond.true352, label %cond.false353, !dbg !8625

cond.true352:                                     ; preds = %if.then349
  %198 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 95), align 8, !dbg !8625
  br label %cond.end354, !dbg !8625

cond.false353:                                    ; preds = %if.then349
  %199 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 90), align 16, !dbg !8625
  br label %cond.end354, !dbg !8625

cond.end354:                                      ; preds = %cond.false353, %cond.true352
  %cond355 = phi %union.tree_node* [ %198, %cond.true352 ], [ %199, %cond.false353 ], !dbg !8625
  store %union.tree_node* %cond355, %union.tree_node** %retval, align 8, !dbg !8625
  br label %return, !dbg !8625

if.end356:                                        ; preds = %lor.lhs.false346
  %200 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8628
  %201 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 91), align 8, !dbg !8628
  %cmp357 = icmp eq %union.tree_node* %200, %201, !dbg !8628
  br i1 %cmp357, label %if.then362, label %lor.lhs.false359, !dbg !8628

lor.lhs.false359:                                 ; preds = %if.end356
  %202 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8628
  %203 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 96), align 16, !dbg !8628
  %cmp360 = icmp eq %union.tree_node* %202, %203, !dbg !8628
  br i1 %cmp360, label %if.then362, label %if.end369, !dbg !8630

if.then362:                                       ; preds = %lor.lhs.false359, %if.end356
  %204 = load i8, i8* %unsignedp.addr, align 1, !dbg !8628
  %conv363 = zext i8 %204 to i32, !dbg !8628
  %tobool364 = icmp ne i32 %conv363, 0, !dbg !8628
  br i1 %tobool364, label %cond.true365, label %cond.false366, !dbg !8628

cond.true365:                                     ; preds = %if.then362
  %205 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 96), align 16, !dbg !8628
  br label %cond.end367, !dbg !8628

cond.false366:                                    ; preds = %if.then362
  %206 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 91), align 8, !dbg !8628
  br label %cond.end367, !dbg !8628

cond.end367:                                      ; preds = %cond.false366, %cond.true365
  %cond368 = phi %union.tree_node* [ %205, %cond.true365 ], [ %206, %cond.false366 ], !dbg !8628
  store %union.tree_node* %cond368, %union.tree_node** %retval, align 8, !dbg !8628
  br label %return, !dbg !8628

if.end369:                                        ; preds = %lor.lhs.false359
  %207 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8631
  %208 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 92), align 16, !dbg !8631
  %cmp370 = icmp eq %union.tree_node* %207, %208, !dbg !8631
  br i1 %cmp370, label %if.then375, label %lor.lhs.false372, !dbg !8631

lor.lhs.false372:                                 ; preds = %if.end369
  %209 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8631
  %210 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 97), align 8, !dbg !8631
  %cmp373 = icmp eq %union.tree_node* %209, %210, !dbg !8631
  br i1 %cmp373, label %if.then375, label %if.end382, !dbg !8633

if.then375:                                       ; preds = %lor.lhs.false372, %if.end369
  %211 = load i8, i8* %unsignedp.addr, align 1, !dbg !8631
  %conv376 = zext i8 %211 to i32, !dbg !8631
  %tobool377 = icmp ne i32 %conv376, 0, !dbg !8631
  br i1 %tobool377, label %cond.true378, label %cond.false379, !dbg !8631

cond.true378:                                     ; preds = %if.then375
  %212 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 97), align 8, !dbg !8631
  br label %cond.end380, !dbg !8631

cond.false379:                                    ; preds = %if.then375
  %213 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 92), align 16, !dbg !8631
  br label %cond.end380, !dbg !8631

cond.end380:                                      ; preds = %cond.false379, %cond.true378
  %cond381 = phi %union.tree_node* [ %212, %cond.true378 ], [ %213, %cond.false379 ], !dbg !8631
  store %union.tree_node* %cond381, %union.tree_node** %retval, align 8, !dbg !8631
  br label %return, !dbg !8631

if.end382:                                        ; preds = %lor.lhs.false372
  %214 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8634
  %215 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 93), align 8, !dbg !8634
  %cmp383 = icmp eq %union.tree_node* %214, %215, !dbg !8634
  br i1 %cmp383, label %if.then388, label %lor.lhs.false385, !dbg !8634

lor.lhs.false385:                                 ; preds = %if.end382
  %216 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8634
  %217 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 98), align 16, !dbg !8634
  %cmp386 = icmp eq %union.tree_node* %216, %217, !dbg !8634
  br i1 %cmp386, label %if.then388, label %if.end395, !dbg !8636

if.then388:                                       ; preds = %lor.lhs.false385, %if.end382
  %218 = load i8, i8* %unsignedp.addr, align 1, !dbg !8634
  %conv389 = zext i8 %218 to i32, !dbg !8634
  %tobool390 = icmp ne i32 %conv389, 0, !dbg !8634
  br i1 %tobool390, label %cond.true391, label %cond.false392, !dbg !8634

cond.true391:                                     ; preds = %if.then388
  %219 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 98), align 16, !dbg !8634
  br label %cond.end393, !dbg !8634

cond.false392:                                    ; preds = %if.then388
  %220 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 93), align 8, !dbg !8634
  br label %cond.end393, !dbg !8634

cond.end393:                                      ; preds = %cond.false392, %cond.true391
  %cond394 = phi %union.tree_node* [ %219, %cond.true391 ], [ %220, %cond.false392 ], !dbg !8634
  store %union.tree_node* %cond394, %union.tree_node** %retval, align 8, !dbg !8634
  br label %return, !dbg !8634

if.end395:                                        ; preds = %lor.lhs.false385
  %221 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8637
  %222 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 99), align 8, !dbg !8637
  %cmp396 = icmp eq %union.tree_node* %221, %222, !dbg !8637
  br i1 %cmp396, label %if.then401, label %lor.lhs.false398, !dbg !8637

lor.lhs.false398:                                 ; preds = %if.end395
  %223 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8637
  %224 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 104), align 16, !dbg !8637
  %cmp399 = icmp eq %union.tree_node* %223, %224, !dbg !8637
  br i1 %cmp399, label %if.then401, label %if.end408, !dbg !8639

if.then401:                                       ; preds = %lor.lhs.false398, %if.end395
  %225 = load i8, i8* %unsignedp.addr, align 1, !dbg !8637
  %conv402 = zext i8 %225 to i32, !dbg !8637
  %tobool403 = icmp ne i32 %conv402, 0, !dbg !8637
  br i1 %tobool403, label %cond.true404, label %cond.false405, !dbg !8637

cond.true404:                                     ; preds = %if.then401
  %226 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 104), align 16, !dbg !8637
  br label %cond.end406, !dbg !8637

cond.false405:                                    ; preds = %if.then401
  %227 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 99), align 8, !dbg !8637
  br label %cond.end406, !dbg !8637

cond.end406:                                      ; preds = %cond.false405, %cond.true404
  %cond407 = phi %union.tree_node* [ %226, %cond.true404 ], [ %227, %cond.false405 ], !dbg !8637
  store %union.tree_node* %cond407, %union.tree_node** %retval, align 8, !dbg !8637
  br label %return, !dbg !8637

if.end408:                                        ; preds = %lor.lhs.false398
  %228 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8640
  %229 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 100), align 16, !dbg !8640
  %cmp409 = icmp eq %union.tree_node* %228, %229, !dbg !8640
  br i1 %cmp409, label %if.then414, label %lor.lhs.false411, !dbg !8640

lor.lhs.false411:                                 ; preds = %if.end408
  %230 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8640
  %231 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 105), align 8, !dbg !8640
  %cmp412 = icmp eq %union.tree_node* %230, %231, !dbg !8640
  br i1 %cmp412, label %if.then414, label %if.end421, !dbg !8642

if.then414:                                       ; preds = %lor.lhs.false411, %if.end408
  %232 = load i8, i8* %unsignedp.addr, align 1, !dbg !8640
  %conv415 = zext i8 %232 to i32, !dbg !8640
  %tobool416 = icmp ne i32 %conv415, 0, !dbg !8640
  br i1 %tobool416, label %cond.true417, label %cond.false418, !dbg !8640

cond.true417:                                     ; preds = %if.then414
  %233 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 105), align 8, !dbg !8640
  br label %cond.end419, !dbg !8640

cond.false418:                                    ; preds = %if.then414
  %234 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 100), align 16, !dbg !8640
  br label %cond.end419, !dbg !8640

cond.end419:                                      ; preds = %cond.false418, %cond.true417
  %cond420 = phi %union.tree_node* [ %233, %cond.true417 ], [ %234, %cond.false418 ], !dbg !8640
  store %union.tree_node* %cond420, %union.tree_node** %retval, align 8, !dbg !8640
  br label %return, !dbg !8640

if.end421:                                        ; preds = %lor.lhs.false411
  %235 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8643
  %236 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 101), align 8, !dbg !8643
  %cmp422 = icmp eq %union.tree_node* %235, %236, !dbg !8643
  br i1 %cmp422, label %if.then427, label %lor.lhs.false424, !dbg !8643

lor.lhs.false424:                                 ; preds = %if.end421
  %237 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8643
  %238 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 106), align 16, !dbg !8643
  %cmp425 = icmp eq %union.tree_node* %237, %238, !dbg !8643
  br i1 %cmp425, label %if.then427, label %if.end434, !dbg !8645

if.then427:                                       ; preds = %lor.lhs.false424, %if.end421
  %239 = load i8, i8* %unsignedp.addr, align 1, !dbg !8643
  %conv428 = zext i8 %239 to i32, !dbg !8643
  %tobool429 = icmp ne i32 %conv428, 0, !dbg !8643
  br i1 %tobool429, label %cond.true430, label %cond.false431, !dbg !8643

cond.true430:                                     ; preds = %if.then427
  %240 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 106), align 16, !dbg !8643
  br label %cond.end432, !dbg !8643

cond.false431:                                    ; preds = %if.then427
  %241 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 101), align 8, !dbg !8643
  br label %cond.end432, !dbg !8643

cond.end432:                                      ; preds = %cond.false431, %cond.true430
  %cond433 = phi %union.tree_node* [ %240, %cond.true430 ], [ %241, %cond.false431 ], !dbg !8643
  store %union.tree_node* %cond433, %union.tree_node** %retval, align 8, !dbg !8643
  br label %return, !dbg !8643

if.end434:                                        ; preds = %lor.lhs.false424
  %242 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8646
  %243 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 102), align 16, !dbg !8646
  %cmp435 = icmp eq %union.tree_node* %242, %243, !dbg !8646
  br i1 %cmp435, label %if.then440, label %lor.lhs.false437, !dbg !8646

lor.lhs.false437:                                 ; preds = %if.end434
  %244 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8646
  %245 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 107), align 8, !dbg !8646
  %cmp438 = icmp eq %union.tree_node* %244, %245, !dbg !8646
  br i1 %cmp438, label %if.then440, label %if.end447, !dbg !8648

if.then440:                                       ; preds = %lor.lhs.false437, %if.end434
  %246 = load i8, i8* %unsignedp.addr, align 1, !dbg !8646
  %conv441 = zext i8 %246 to i32, !dbg !8646
  %tobool442 = icmp ne i32 %conv441, 0, !dbg !8646
  br i1 %tobool442, label %cond.true443, label %cond.false444, !dbg !8646

cond.true443:                                     ; preds = %if.then440
  %247 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 107), align 8, !dbg !8646
  br label %cond.end445, !dbg !8646

cond.false444:                                    ; preds = %if.then440
  %248 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 102), align 16, !dbg !8646
  br label %cond.end445, !dbg !8646

cond.end445:                                      ; preds = %cond.false444, %cond.true443
  %cond446 = phi %union.tree_node* [ %247, %cond.true443 ], [ %248, %cond.false444 ], !dbg !8646
  store %union.tree_node* %cond446, %union.tree_node** %retval, align 8, !dbg !8646
  br label %return, !dbg !8646

if.end447:                                        ; preds = %lor.lhs.false437
  %249 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8649
  %250 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 103), align 8, !dbg !8649
  %cmp448 = icmp eq %union.tree_node* %249, %250, !dbg !8649
  br i1 %cmp448, label %if.then453, label %lor.lhs.false450, !dbg !8649

lor.lhs.false450:                                 ; preds = %if.end447
  %251 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8649
  %252 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 108), align 16, !dbg !8649
  %cmp451 = icmp eq %union.tree_node* %251, %252, !dbg !8649
  br i1 %cmp451, label %if.then453, label %if.end460, !dbg !8651

if.then453:                                       ; preds = %lor.lhs.false450, %if.end447
  %253 = load i8, i8* %unsignedp.addr, align 1, !dbg !8649
  %conv454 = zext i8 %253 to i32, !dbg !8649
  %tobool455 = icmp ne i32 %conv454, 0, !dbg !8649
  br i1 %tobool455, label %cond.true456, label %cond.false457, !dbg !8649

cond.true456:                                     ; preds = %if.then453
  %254 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 108), align 16, !dbg !8649
  br label %cond.end458, !dbg !8649

cond.false457:                                    ; preds = %if.then453
  %255 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 103), align 8, !dbg !8649
  br label %cond.end458, !dbg !8649

cond.end458:                                      ; preds = %cond.false457, %cond.true456
  %cond459 = phi %union.tree_node* [ %254, %cond.true456 ], [ %255, %cond.false457 ], !dbg !8649
  store %union.tree_node* %cond459, %union.tree_node** %retval, align 8, !dbg !8649
  br label %return, !dbg !8649

if.end460:                                        ; preds = %lor.lhs.false450
  %256 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8652
  %257 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 109), align 8, !dbg !8652
  %cmp461 = icmp eq %union.tree_node* %256, %257, !dbg !8652
  br i1 %cmp461, label %if.then466, label %lor.lhs.false463, !dbg !8652

lor.lhs.false463:                                 ; preds = %if.end460
  %258 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8652
  %259 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 113), align 8, !dbg !8652
  %cmp464 = icmp eq %union.tree_node* %258, %259, !dbg !8652
  br i1 %cmp464, label %if.then466, label %if.end473, !dbg !8654

if.then466:                                       ; preds = %lor.lhs.false463, %if.end460
  %260 = load i8, i8* %unsignedp.addr, align 1, !dbg !8652
  %conv467 = zext i8 %260 to i32, !dbg !8652
  %tobool468 = icmp ne i32 %conv467, 0, !dbg !8652
  br i1 %tobool468, label %cond.true469, label %cond.false470, !dbg !8652

cond.true469:                                     ; preds = %if.then466
  %261 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 113), align 8, !dbg !8652
  br label %cond.end471, !dbg !8652

cond.false470:                                    ; preds = %if.then466
  %262 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 109), align 8, !dbg !8652
  br label %cond.end471, !dbg !8652

cond.end471:                                      ; preds = %cond.false470, %cond.true469
  %cond472 = phi %union.tree_node* [ %261, %cond.true469 ], [ %262, %cond.false470 ], !dbg !8652
  store %union.tree_node* %cond472, %union.tree_node** %retval, align 8, !dbg !8652
  br label %return, !dbg !8652

if.end473:                                        ; preds = %lor.lhs.false463
  %263 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8655
  %264 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 110), align 16, !dbg !8655
  %cmp474 = icmp eq %union.tree_node* %263, %264, !dbg !8655
  br i1 %cmp474, label %if.then479, label %lor.lhs.false476, !dbg !8655

lor.lhs.false476:                                 ; preds = %if.end473
  %265 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8655
  %266 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 114), align 16, !dbg !8655
  %cmp477 = icmp eq %union.tree_node* %265, %266, !dbg !8655
  br i1 %cmp477, label %if.then479, label %if.end486, !dbg !8657

if.then479:                                       ; preds = %lor.lhs.false476, %if.end473
  %267 = load i8, i8* %unsignedp.addr, align 1, !dbg !8655
  %conv480 = zext i8 %267 to i32, !dbg !8655
  %tobool481 = icmp ne i32 %conv480, 0, !dbg !8655
  br i1 %tobool481, label %cond.true482, label %cond.false483, !dbg !8655

cond.true482:                                     ; preds = %if.then479
  %268 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 114), align 16, !dbg !8655
  br label %cond.end484, !dbg !8655

cond.false483:                                    ; preds = %if.then479
  %269 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 110), align 16, !dbg !8655
  br label %cond.end484, !dbg !8655

cond.end484:                                      ; preds = %cond.false483, %cond.true482
  %cond485 = phi %union.tree_node* [ %268, %cond.true482 ], [ %269, %cond.false483 ], !dbg !8655
  store %union.tree_node* %cond485, %union.tree_node** %retval, align 8, !dbg !8655
  br label %return, !dbg !8655

if.end486:                                        ; preds = %lor.lhs.false476
  %270 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8658
  %271 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 111), align 8, !dbg !8658
  %cmp487 = icmp eq %union.tree_node* %270, %271, !dbg !8658
  br i1 %cmp487, label %if.then492, label %lor.lhs.false489, !dbg !8658

lor.lhs.false489:                                 ; preds = %if.end486
  %272 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8658
  %273 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 115), align 8, !dbg !8658
  %cmp490 = icmp eq %union.tree_node* %272, %273, !dbg !8658
  br i1 %cmp490, label %if.then492, label %if.end499, !dbg !8660

if.then492:                                       ; preds = %lor.lhs.false489, %if.end486
  %274 = load i8, i8* %unsignedp.addr, align 1, !dbg !8658
  %conv493 = zext i8 %274 to i32, !dbg !8658
  %tobool494 = icmp ne i32 %conv493, 0, !dbg !8658
  br i1 %tobool494, label %cond.true495, label %cond.false496, !dbg !8658

cond.true495:                                     ; preds = %if.then492
  %275 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 115), align 8, !dbg !8658
  br label %cond.end497, !dbg !8658

cond.false496:                                    ; preds = %if.then492
  %276 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 111), align 8, !dbg !8658
  br label %cond.end497, !dbg !8658

cond.end497:                                      ; preds = %cond.false496, %cond.true495
  %cond498 = phi %union.tree_node* [ %275, %cond.true495 ], [ %276, %cond.false496 ], !dbg !8658
  store %union.tree_node* %cond498, %union.tree_node** %retval, align 8, !dbg !8658
  br label %return, !dbg !8658

if.end499:                                        ; preds = %lor.lhs.false489
  %277 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8661
  %278 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 112), align 16, !dbg !8661
  %cmp500 = icmp eq %union.tree_node* %277, %278, !dbg !8661
  br i1 %cmp500, label %if.then505, label %lor.lhs.false502, !dbg !8661

lor.lhs.false502:                                 ; preds = %if.end499
  %279 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8661
  %280 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 116), align 16, !dbg !8661
  %cmp503 = icmp eq %union.tree_node* %279, %280, !dbg !8661
  br i1 %cmp503, label %if.then505, label %if.end512, !dbg !8663

if.then505:                                       ; preds = %lor.lhs.false502, %if.end499
  %281 = load i8, i8* %unsignedp.addr, align 1, !dbg !8661
  %conv506 = zext i8 %281 to i32, !dbg !8661
  %tobool507 = icmp ne i32 %conv506, 0, !dbg !8661
  br i1 %tobool507, label %cond.true508, label %cond.false509, !dbg !8661

cond.true508:                                     ; preds = %if.then505
  %282 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 116), align 16, !dbg !8661
  br label %cond.end510, !dbg !8661

cond.false509:                                    ; preds = %if.then505
  %283 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 112), align 16, !dbg !8661
  br label %cond.end510, !dbg !8661

cond.end510:                                      ; preds = %cond.false509, %cond.true508
  %cond511 = phi %union.tree_node* [ %282, %cond.true508 ], [ %283, %cond.false509 ], !dbg !8661
  store %union.tree_node* %cond511, %union.tree_node** %retval, align 8, !dbg !8661
  br label %return, !dbg !8661

if.end512:                                        ; preds = %lor.lhs.false502
  %284 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8664
  %285 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 117), align 8, !dbg !8664
  %cmp513 = icmp eq %union.tree_node* %284, %285, !dbg !8664
  br i1 %cmp513, label %if.then518, label %lor.lhs.false515, !dbg !8664

lor.lhs.false515:                                 ; preds = %if.end512
  %286 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8664
  %287 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 121), align 8, !dbg !8664
  %cmp516 = icmp eq %union.tree_node* %286, %287, !dbg !8664
  br i1 %cmp516, label %if.then518, label %if.end525, !dbg !8666

if.then518:                                       ; preds = %lor.lhs.false515, %if.end512
  %288 = load i8, i8* %unsignedp.addr, align 1, !dbg !8664
  %conv519 = zext i8 %288 to i32, !dbg !8664
  %tobool520 = icmp ne i32 %conv519, 0, !dbg !8664
  br i1 %tobool520, label %cond.true521, label %cond.false522, !dbg !8664

cond.true521:                                     ; preds = %if.then518
  %289 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 121), align 8, !dbg !8664
  br label %cond.end523, !dbg !8664

cond.false522:                                    ; preds = %if.then518
  %290 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 117), align 8, !dbg !8664
  br label %cond.end523, !dbg !8664

cond.end523:                                      ; preds = %cond.false522, %cond.true521
  %cond524 = phi %union.tree_node* [ %289, %cond.true521 ], [ %290, %cond.false522 ], !dbg !8664
  store %union.tree_node* %cond524, %union.tree_node** %retval, align 8, !dbg !8664
  br label %return, !dbg !8664

if.end525:                                        ; preds = %lor.lhs.false515
  %291 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8667
  %292 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 118), align 16, !dbg !8667
  %cmp526 = icmp eq %union.tree_node* %291, %292, !dbg !8667
  br i1 %cmp526, label %if.then531, label %lor.lhs.false528, !dbg !8667

lor.lhs.false528:                                 ; preds = %if.end525
  %293 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8667
  %294 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 122), align 16, !dbg !8667
  %cmp529 = icmp eq %union.tree_node* %293, %294, !dbg !8667
  br i1 %cmp529, label %if.then531, label %if.end538, !dbg !8669

if.then531:                                       ; preds = %lor.lhs.false528, %if.end525
  %295 = load i8, i8* %unsignedp.addr, align 1, !dbg !8667
  %conv532 = zext i8 %295 to i32, !dbg !8667
  %tobool533 = icmp ne i32 %conv532, 0, !dbg !8667
  br i1 %tobool533, label %cond.true534, label %cond.false535, !dbg !8667

cond.true534:                                     ; preds = %if.then531
  %296 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 122), align 16, !dbg !8667
  br label %cond.end536, !dbg !8667

cond.false535:                                    ; preds = %if.then531
  %297 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 118), align 16, !dbg !8667
  br label %cond.end536, !dbg !8667

cond.end536:                                      ; preds = %cond.false535, %cond.true534
  %cond537 = phi %union.tree_node* [ %296, %cond.true534 ], [ %297, %cond.false535 ], !dbg !8667
  store %union.tree_node* %cond537, %union.tree_node** %retval, align 8, !dbg !8667
  br label %return, !dbg !8667

if.end538:                                        ; preds = %lor.lhs.false528
  %298 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8670
  %299 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 119), align 8, !dbg !8670
  %cmp539 = icmp eq %union.tree_node* %298, %299, !dbg !8670
  br i1 %cmp539, label %if.then544, label %lor.lhs.false541, !dbg !8670

lor.lhs.false541:                                 ; preds = %if.end538
  %300 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8670
  %301 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 123), align 8, !dbg !8670
  %cmp542 = icmp eq %union.tree_node* %300, %301, !dbg !8670
  br i1 %cmp542, label %if.then544, label %if.end551, !dbg !8672

if.then544:                                       ; preds = %lor.lhs.false541, %if.end538
  %302 = load i8, i8* %unsignedp.addr, align 1, !dbg !8670
  %conv545 = zext i8 %302 to i32, !dbg !8670
  %tobool546 = icmp ne i32 %conv545, 0, !dbg !8670
  br i1 %tobool546, label %cond.true547, label %cond.false548, !dbg !8670

cond.true547:                                     ; preds = %if.then544
  %303 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 123), align 8, !dbg !8670
  br label %cond.end549, !dbg !8670

cond.false548:                                    ; preds = %if.then544
  %304 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 119), align 8, !dbg !8670
  br label %cond.end549, !dbg !8670

cond.end549:                                      ; preds = %cond.false548, %cond.true547
  %cond550 = phi %union.tree_node* [ %303, %cond.true547 ], [ %304, %cond.false548 ], !dbg !8670
  store %union.tree_node* %cond550, %union.tree_node** %retval, align 8, !dbg !8670
  br label %return, !dbg !8670

if.end551:                                        ; preds = %lor.lhs.false541
  %305 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8673
  %306 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 120), align 16, !dbg !8673
  %cmp552 = icmp eq %union.tree_node* %305, %306, !dbg !8673
  br i1 %cmp552, label %if.then557, label %lor.lhs.false554, !dbg !8673

lor.lhs.false554:                                 ; preds = %if.end551
  %307 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8673
  %308 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 124), align 16, !dbg !8673
  %cmp555 = icmp eq %union.tree_node* %307, %308, !dbg !8673
  br i1 %cmp555, label %if.then557, label %if.end564, !dbg !8675

if.then557:                                       ; preds = %lor.lhs.false554, %if.end551
  %309 = load i8, i8* %unsignedp.addr, align 1, !dbg !8673
  %conv558 = zext i8 %309 to i32, !dbg !8673
  %tobool559 = icmp ne i32 %conv558, 0, !dbg !8673
  br i1 %tobool559, label %cond.true560, label %cond.false561, !dbg !8673

cond.true560:                                     ; preds = %if.then557
  %310 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 124), align 16, !dbg !8673
  br label %cond.end562, !dbg !8673

cond.false561:                                    ; preds = %if.then557
  %311 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 120), align 16, !dbg !8673
  br label %cond.end562, !dbg !8673

cond.end562:                                      ; preds = %cond.false561, %cond.true560
  %cond563 = phi %union.tree_node* [ %310, %cond.true560 ], [ %311, %cond.false561 ], !dbg !8673
  store %union.tree_node* %cond563, %union.tree_node** %retval, align 8, !dbg !8673
  br label %return, !dbg !8673

if.end564:                                        ; preds = %lor.lhs.false554
  %312 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8676
  %base = bitcast %union.tree_node* %312 to %struct.tree_base*, !dbg !8676
  %313 = bitcast %struct.tree_base* %base to i64*, !dbg !8676
  %bf.load = load i64, i64* %313, align 8, !dbg !8676
  %bf.clear = and i64 %bf.load, 65535, !dbg !8676
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8676
  %cmp565 = icmp eq i32 %bf.cast, 6, !dbg !8676
  br i1 %cmp565, label %lor.lhs.false581, label %lor.lhs.false567, !dbg !8676

lor.lhs.false567:                                 ; preds = %if.end564
  %314 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8676
  %base568 = bitcast %union.tree_node* %314 to %struct.tree_base*, !dbg !8676
  %315 = bitcast %struct.tree_base* %base568 to i64*, !dbg !8676
  %bf.load569 = load i64, i64* %315, align 8, !dbg !8676
  %bf.clear570 = and i64 %bf.load569, 65535, !dbg !8676
  %bf.cast571 = trunc i64 %bf.clear570 to i32, !dbg !8676
  %cmp572 = icmp eq i32 %bf.cast571, 7, !dbg !8676
  br i1 %cmp572, label %lor.lhs.false581, label %lor.lhs.false574, !dbg !8676

lor.lhs.false574:                                 ; preds = %lor.lhs.false567
  %316 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8676
  %base575 = bitcast %union.tree_node* %316 to %struct.tree_base*, !dbg !8676
  %317 = bitcast %struct.tree_base* %base575 to i64*, !dbg !8676
  %bf.load576 = load i64, i64* %317, align 8, !dbg !8676
  %bf.clear577 = and i64 %bf.load576, 65535, !dbg !8676
  %bf.cast578 = trunc i64 %bf.clear577 to i32, !dbg !8676
  %cmp579 = icmp eq i32 %bf.cast578, 8, !dbg !8676
  br i1 %cmp579, label %lor.lhs.false581, label %if.then589, !dbg !8678

lor.lhs.false581:                                 ; preds = %lor.lhs.false574, %lor.lhs.false567, %if.end564
  %318 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8679
  %base582 = bitcast %union.tree_node* %318 to %struct.tree_base*, !dbg !8679
  %319 = bitcast %struct.tree_base* %base582 to i64*, !dbg !8679
  %bf.load583 = load i64, i64* %319, align 8, !dbg !8679
  %bf.lshr = lshr i64 %bf.load583, 21, !dbg !8679
  %bf.clear584 = and i64 %bf.lshr, 1, !dbg !8679
  %bf.cast585 = trunc i64 %bf.clear584 to i32, !dbg !8679
  %320 = load i8, i8* %unsignedp.addr, align 1, !dbg !8680
  %conv586 = zext i8 %320 to i32, !dbg !8680
  %cmp587 = icmp eq i32 %bf.cast585, %conv586, !dbg !8681
  br i1 %cmp587, label %if.then589, label %if.end590, !dbg !8682

if.then589:                                       ; preds = %lor.lhs.false581, %lor.lhs.false574
  %321 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8683
  store %union.tree_node* %321, %union.tree_node** %retval, align 8, !dbg !8684
  br label %return, !dbg !8684

if.end590:                                        ; preds = %lor.lhs.false581
  %322 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8685
  %base591 = bitcast %union.tree_node* %322 to %struct.tree_base*, !dbg !8685
  %323 = bitcast %struct.tree_base* %base591 to i64*, !dbg !8685
  %bf.load592 = load i64, i64* %323, align 8, !dbg !8685
  %bf.clear593 = and i64 %bf.load592, 65535, !dbg !8685
  %bf.cast594 = trunc i64 %bf.clear593 to i32, !dbg !8685
  %cmp595 = icmp eq i32 %bf.cast594, 14, !dbg !8685
  br i1 %cmp595, label %cond.true597, label %cond.false598, !dbg !8685

cond.true597:                                     ; preds = %if.end590
  %324 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8685
  %call = call i32 @vector_type_mode(%union.tree_node* %324), !dbg !8685
  br label %cond.end603, !dbg !8685

cond.false598:                                    ; preds = %if.end590
  %325 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8685
  %type599 = bitcast %union.tree_node* %325 to %struct.tree_type*, !dbg !8685
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type599, i32 0, i32 6, !dbg !8685
  %bf.load600 = load i32, i32* %mode, align 4, !dbg !8685
  %bf.lshr601 = lshr i32 %bf.load600, 16, !dbg !8685
  %bf.clear602 = and i32 %bf.lshr601, 255, !dbg !8685
  br label %cond.end603, !dbg !8685

cond.end603:                                      ; preds = %cond.false598, %cond.true597
  %cond604 = phi i32 [ %call, %cond.true597 ], [ %bf.clear602, %cond.false598 ], !dbg !8685
  %326 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 1), align 8, !dbg !8685
  %base605 = bitcast %union.tree_node* %326 to %struct.tree_base*, !dbg !8685
  %327 = bitcast %struct.tree_base* %base605 to i64*, !dbg !8685
  %bf.load606 = load i64, i64* %327, align 8, !dbg !8685
  %bf.clear607 = and i64 %bf.load606, 65535, !dbg !8685
  %bf.cast608 = trunc i64 %bf.clear607 to i32, !dbg !8685
  %cmp609 = icmp eq i32 %bf.cast608, 14, !dbg !8685
  br i1 %cmp609, label %cond.true611, label %cond.false613, !dbg !8685

cond.true611:                                     ; preds = %cond.end603
  %328 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 1), align 8, !dbg !8685
  %call612 = call i32 @vector_type_mode(%union.tree_node* %328), !dbg !8685
  br label %cond.end619, !dbg !8685

cond.false613:                                    ; preds = %cond.end603
  %329 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 1), align 8, !dbg !8685
  %type614 = bitcast %union.tree_node* %329 to %struct.tree_type*, !dbg !8685
  %mode615 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type614, i32 0, i32 6, !dbg !8685
  %bf.load616 = load i32, i32* %mode615, align 4, !dbg !8685
  %bf.lshr617 = lshr i32 %bf.load616, 16, !dbg !8685
  %bf.clear618 = and i32 %bf.lshr617, 255, !dbg !8685
  br label %cond.end619, !dbg !8685

cond.end619:                                      ; preds = %cond.false613, %cond.true611
  %cond620 = phi i32 [ %call612, %cond.true611 ], [ %bf.clear618, %cond.false613 ], !dbg !8685
  %cmp621 = icmp eq i32 %cond604, %cond620, !dbg !8685
  br i1 %cmp621, label %land.lhs.true, label %if.end639, !dbg !8685

land.lhs.true:                                    ; preds = %cond.end619
  %330 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8685
  %type623 = bitcast %union.tree_node* %330 to %struct.tree_type*, !dbg !8685
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type623, i32 0, i32 6, !dbg !8685
  %bf.load624 = load i32, i32* %precision, align 4, !dbg !8685
  %bf.clear625 = and i32 %bf.load624, 1023, !dbg !8685
  %331 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 1), align 8, !dbg !8685
  %type626 = bitcast %union.tree_node* %331 to %struct.tree_type*, !dbg !8685
  %precision627 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type626, i32 0, i32 6, !dbg !8685
  %bf.load628 = load i32, i32* %precision627, align 4, !dbg !8685
  %bf.clear629 = and i32 %bf.load628, 1023, !dbg !8685
  %cmp630 = icmp eq i32 %bf.clear625, %bf.clear629, !dbg !8685
  br i1 %cmp630, label %if.then632, label %if.end639, !dbg !8687

if.then632:                                       ; preds = %land.lhs.true
  %332 = load i8, i8* %unsignedp.addr, align 1, !dbg !8688
  %conv633 = zext i8 %332 to i32, !dbg !8688
  %tobool634 = icmp ne i32 %conv633, 0, !dbg !8688
  br i1 %tobool634, label %cond.true635, label %cond.false636, !dbg !8688

cond.true635:                                     ; preds = %if.then632
  %333 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 2), align 16, !dbg !8689
  br label %cond.end637, !dbg !8688

cond.false636:                                    ; preds = %if.then632
  %334 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 1), align 8, !dbg !8690
  br label %cond.end637, !dbg !8688

cond.end637:                                      ; preds = %cond.false636, %cond.true635
  %cond638 = phi %union.tree_node* [ %333, %cond.true635 ], [ %334, %cond.false636 ], !dbg !8688
  store %union.tree_node* %cond638, %union.tree_node** %retval, align 8, !dbg !8691
  br label %return, !dbg !8691

if.end639:                                        ; preds = %land.lhs.true, %cond.end619
  %335 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8692
  %base640 = bitcast %union.tree_node* %335 to %struct.tree_base*, !dbg !8692
  %336 = bitcast %struct.tree_base* %base640 to i64*, !dbg !8692
  %bf.load641 = load i64, i64* %336, align 8, !dbg !8692
  %bf.clear642 = and i64 %bf.load641, 65535, !dbg !8692
  %bf.cast643 = trunc i64 %bf.clear642 to i32, !dbg !8692
  %cmp644 = icmp eq i32 %bf.cast643, 14, !dbg !8692
  br i1 %cmp644, label %cond.true646, label %cond.false648, !dbg !8692

cond.true646:                                     ; preds = %if.end639
  %337 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8692
  %call647 = call i32 @vector_type_mode(%union.tree_node* %337), !dbg !8692
  br label %cond.end654, !dbg !8692

cond.false648:                                    ; preds = %if.end639
  %338 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8692
  %type649 = bitcast %union.tree_node* %338 to %struct.tree_type*, !dbg !8692
  %mode650 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type649, i32 0, i32 6, !dbg !8692
  %bf.load651 = load i32, i32* %mode650, align 4, !dbg !8692
  %bf.lshr652 = lshr i32 %bf.load651, 16, !dbg !8692
  %bf.clear653 = and i32 %bf.lshr652, 255, !dbg !8692
  br label %cond.end654, !dbg !8692

cond.end654:                                      ; preds = %cond.false648, %cond.true646
  %cond655 = phi i32 [ %call647, %cond.true646 ], [ %bf.clear653, %cond.false648 ], !dbg !8692
  %339 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !8692
  %base656 = bitcast %union.tree_node* %339 to %struct.tree_base*, !dbg !8692
  %340 = bitcast %struct.tree_base* %base656 to i64*, !dbg !8692
  %bf.load657 = load i64, i64* %340, align 8, !dbg !8692
  %bf.clear658 = and i64 %bf.load657, 65535, !dbg !8692
  %bf.cast659 = trunc i64 %bf.clear658 to i32, !dbg !8692
  %cmp660 = icmp eq i32 %bf.cast659, 14, !dbg !8692
  br i1 %cmp660, label %cond.true662, label %cond.false664, !dbg !8692

cond.true662:                                     ; preds = %cond.end654
  %341 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !8692
  %call663 = call i32 @vector_type_mode(%union.tree_node* %341), !dbg !8692
  br label %cond.end670, !dbg !8692

cond.false664:                                    ; preds = %cond.end654
  %342 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !8692
  %type665 = bitcast %union.tree_node* %342 to %struct.tree_type*, !dbg !8692
  %mode666 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type665, i32 0, i32 6, !dbg !8692
  %bf.load667 = load i32, i32* %mode666, align 4, !dbg !8692
  %bf.lshr668 = lshr i32 %bf.load667, 16, !dbg !8692
  %bf.clear669 = and i32 %bf.lshr668, 255, !dbg !8692
  br label %cond.end670, !dbg !8692

cond.end670:                                      ; preds = %cond.false664, %cond.true662
  %cond671 = phi i32 [ %call663, %cond.true662 ], [ %bf.clear669, %cond.false664 ], !dbg !8692
  %cmp672 = icmp eq i32 %cond655, %cond671, !dbg !8692
  br i1 %cmp672, label %land.lhs.true674, label %if.end692, !dbg !8692

land.lhs.true674:                                 ; preds = %cond.end670
  %343 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8692
  %type675 = bitcast %union.tree_node* %343 to %struct.tree_type*, !dbg !8692
  %precision676 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type675, i32 0, i32 6, !dbg !8692
  %bf.load677 = load i32, i32* %precision676, align 4, !dbg !8692
  %bf.clear678 = and i32 %bf.load677, 1023, !dbg !8692
  %344 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !8692
  %type679 = bitcast %union.tree_node* %344 to %struct.tree_type*, !dbg !8692
  %precision680 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type679, i32 0, i32 6, !dbg !8692
  %bf.load681 = load i32, i32* %precision680, align 4, !dbg !8692
  %bf.clear682 = and i32 %bf.load681, 1023, !dbg !8692
  %cmp683 = icmp eq i32 %bf.clear678, %bf.clear682, !dbg !8692
  br i1 %cmp683, label %if.then685, label %if.end692, !dbg !8694

if.then685:                                       ; preds = %land.lhs.true674
  %345 = load i8, i8* %unsignedp.addr, align 1, !dbg !8695
  %conv686 = zext i8 %345 to i32, !dbg !8695
  %tobool687 = icmp ne i32 %conv686, 0, !dbg !8695
  br i1 %tobool687, label %cond.true688, label %cond.false689, !dbg !8695

cond.true688:                                     ; preds = %if.then685
  %346 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 6), align 16, !dbg !8696
  br label %cond.end690, !dbg !8695

cond.false689:                                    ; preds = %if.then685
  %347 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !8697
  br label %cond.end690, !dbg !8695

cond.end690:                                      ; preds = %cond.false689, %cond.true688
  %cond691 = phi %union.tree_node* [ %346, %cond.true688 ], [ %347, %cond.false689 ], !dbg !8695
  store %union.tree_node* %cond691, %union.tree_node** %retval, align 8, !dbg !8698
  br label %return, !dbg !8698

if.end692:                                        ; preds = %land.lhs.true674, %cond.end670
  %348 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8699
  %base693 = bitcast %union.tree_node* %348 to %struct.tree_base*, !dbg !8699
  %349 = bitcast %struct.tree_base* %base693 to i64*, !dbg !8699
  %bf.load694 = load i64, i64* %349, align 8, !dbg !8699
  %bf.clear695 = and i64 %bf.load694, 65535, !dbg !8699
  %bf.cast696 = trunc i64 %bf.clear695 to i32, !dbg !8699
  %cmp697 = icmp eq i32 %bf.cast696, 14, !dbg !8699
  br i1 %cmp697, label %cond.true699, label %cond.false701, !dbg !8699

cond.true699:                                     ; preds = %if.end692
  %350 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8699
  %call700 = call i32 @vector_type_mode(%union.tree_node* %350), !dbg !8699
  br label %cond.end707, !dbg !8699

cond.false701:                                    ; preds = %if.end692
  %351 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8699
  %type702 = bitcast %union.tree_node* %351 to %struct.tree_type*, !dbg !8699
  %mode703 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type702, i32 0, i32 6, !dbg !8699
  %bf.load704 = load i32, i32* %mode703, align 4, !dbg !8699
  %bf.lshr705 = lshr i32 %bf.load704, 16, !dbg !8699
  %bf.clear706 = and i32 %bf.lshr705, 255, !dbg !8699
  br label %cond.end707, !dbg !8699

cond.end707:                                      ; preds = %cond.false701, %cond.true699
  %cond708 = phi i32 [ %call700, %cond.true699 ], [ %bf.clear706, %cond.false701 ], !dbg !8699
  %352 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 3), align 8, !dbg !8699
  %base709 = bitcast %union.tree_node* %352 to %struct.tree_base*, !dbg !8699
  %353 = bitcast %struct.tree_base* %base709 to i64*, !dbg !8699
  %bf.load710 = load i64, i64* %353, align 8, !dbg !8699
  %bf.clear711 = and i64 %bf.load710, 65535, !dbg !8699
  %bf.cast712 = trunc i64 %bf.clear711 to i32, !dbg !8699
  %cmp713 = icmp eq i32 %bf.cast712, 14, !dbg !8699
  br i1 %cmp713, label %cond.true715, label %cond.false717, !dbg !8699

cond.true715:                                     ; preds = %cond.end707
  %354 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 3), align 8, !dbg !8699
  %call716 = call i32 @vector_type_mode(%union.tree_node* %354), !dbg !8699
  br label %cond.end723, !dbg !8699

cond.false717:                                    ; preds = %cond.end707
  %355 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 3), align 8, !dbg !8699
  %type718 = bitcast %union.tree_node* %355 to %struct.tree_type*, !dbg !8699
  %mode719 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type718, i32 0, i32 6, !dbg !8699
  %bf.load720 = load i32, i32* %mode719, align 4, !dbg !8699
  %bf.lshr721 = lshr i32 %bf.load720, 16, !dbg !8699
  %bf.clear722 = and i32 %bf.lshr721, 255, !dbg !8699
  br label %cond.end723, !dbg !8699

cond.end723:                                      ; preds = %cond.false717, %cond.true715
  %cond724 = phi i32 [ %call716, %cond.true715 ], [ %bf.clear722, %cond.false717 ], !dbg !8699
  %cmp725 = icmp eq i32 %cond708, %cond724, !dbg !8699
  br i1 %cmp725, label %land.lhs.true727, label %if.end745, !dbg !8699

land.lhs.true727:                                 ; preds = %cond.end723
  %356 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8699
  %type728 = bitcast %union.tree_node* %356 to %struct.tree_type*, !dbg !8699
  %precision729 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type728, i32 0, i32 6, !dbg !8699
  %bf.load730 = load i32, i32* %precision729, align 4, !dbg !8699
  %bf.clear731 = and i32 %bf.load730, 1023, !dbg !8699
  %357 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 3), align 8, !dbg !8699
  %type732 = bitcast %union.tree_node* %357 to %struct.tree_type*, !dbg !8699
  %precision733 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type732, i32 0, i32 6, !dbg !8699
  %bf.load734 = load i32, i32* %precision733, align 4, !dbg !8699
  %bf.clear735 = and i32 %bf.load734, 1023, !dbg !8699
  %cmp736 = icmp eq i32 %bf.clear731, %bf.clear735, !dbg !8699
  br i1 %cmp736, label %if.then738, label %if.end745, !dbg !8701

if.then738:                                       ; preds = %land.lhs.true727
  %358 = load i8, i8* %unsignedp.addr, align 1, !dbg !8702
  %conv739 = zext i8 %358 to i32, !dbg !8702
  %tobool740 = icmp ne i32 %conv739, 0, !dbg !8702
  br i1 %tobool740, label %cond.true741, label %cond.false742, !dbg !8702

cond.true741:                                     ; preds = %if.then738
  %359 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 4), align 16, !dbg !8703
  br label %cond.end743, !dbg !8702

cond.false742:                                    ; preds = %if.then738
  %360 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 3), align 8, !dbg !8704
  br label %cond.end743, !dbg !8702

cond.end743:                                      ; preds = %cond.false742, %cond.true741
  %cond744 = phi %union.tree_node* [ %359, %cond.true741 ], [ %360, %cond.false742 ], !dbg !8702
  store %union.tree_node* %cond744, %union.tree_node** %retval, align 8, !dbg !8705
  br label %return, !dbg !8705

if.end745:                                        ; preds = %land.lhs.true727, %cond.end723
  %361 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8706
  %base746 = bitcast %union.tree_node* %361 to %struct.tree_base*, !dbg !8706
  %362 = bitcast %struct.tree_base* %base746 to i64*, !dbg !8706
  %bf.load747 = load i64, i64* %362, align 8, !dbg !8706
  %bf.clear748 = and i64 %bf.load747, 65535, !dbg !8706
  %bf.cast749 = trunc i64 %bf.clear748 to i32, !dbg !8706
  %cmp750 = icmp eq i32 %bf.cast749, 14, !dbg !8706
  br i1 %cmp750, label %cond.true752, label %cond.false754, !dbg !8706

cond.true752:                                     ; preds = %if.end745
  %363 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8706
  %call753 = call i32 @vector_type_mode(%union.tree_node* %363), !dbg !8706
  br label %cond.end760, !dbg !8706

cond.false754:                                    ; preds = %if.end745
  %364 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8706
  %type755 = bitcast %union.tree_node* %364 to %struct.tree_type*, !dbg !8706
  %mode756 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type755, i32 0, i32 6, !dbg !8706
  %bf.load757 = load i32, i32* %mode756, align 4, !dbg !8706
  %bf.lshr758 = lshr i32 %bf.load757, 16, !dbg !8706
  %bf.clear759 = and i32 %bf.lshr758, 255, !dbg !8706
  br label %cond.end760, !dbg !8706

cond.end760:                                      ; preds = %cond.false754, %cond.true752
  %cond761 = phi i32 [ %call753, %cond.true752 ], [ %bf.clear759, %cond.false754 ], !dbg !8706
  %365 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 7), align 8, !dbg !8706
  %base762 = bitcast %union.tree_node* %365 to %struct.tree_base*, !dbg !8706
  %366 = bitcast %struct.tree_base* %base762 to i64*, !dbg !8706
  %bf.load763 = load i64, i64* %366, align 8, !dbg !8706
  %bf.clear764 = and i64 %bf.load763, 65535, !dbg !8706
  %bf.cast765 = trunc i64 %bf.clear764 to i32, !dbg !8706
  %cmp766 = icmp eq i32 %bf.cast765, 14, !dbg !8706
  br i1 %cmp766, label %cond.true768, label %cond.false770, !dbg !8706

cond.true768:                                     ; preds = %cond.end760
  %367 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 7), align 8, !dbg !8706
  %call769 = call i32 @vector_type_mode(%union.tree_node* %367), !dbg !8706
  br label %cond.end776, !dbg !8706

cond.false770:                                    ; preds = %cond.end760
  %368 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 7), align 8, !dbg !8706
  %type771 = bitcast %union.tree_node* %368 to %struct.tree_type*, !dbg !8706
  %mode772 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type771, i32 0, i32 6, !dbg !8706
  %bf.load773 = load i32, i32* %mode772, align 4, !dbg !8706
  %bf.lshr774 = lshr i32 %bf.load773, 16, !dbg !8706
  %bf.clear775 = and i32 %bf.lshr774, 255, !dbg !8706
  br label %cond.end776, !dbg !8706

cond.end776:                                      ; preds = %cond.false770, %cond.true768
  %cond777 = phi i32 [ %call769, %cond.true768 ], [ %bf.clear775, %cond.false770 ], !dbg !8706
  %cmp778 = icmp eq i32 %cond761, %cond777, !dbg !8706
  br i1 %cmp778, label %land.lhs.true780, label %if.end798, !dbg !8706

land.lhs.true780:                                 ; preds = %cond.end776
  %369 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8706
  %type781 = bitcast %union.tree_node* %369 to %struct.tree_type*, !dbg !8706
  %precision782 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type781, i32 0, i32 6, !dbg !8706
  %bf.load783 = load i32, i32* %precision782, align 4, !dbg !8706
  %bf.clear784 = and i32 %bf.load783, 1023, !dbg !8706
  %370 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 7), align 8, !dbg !8706
  %type785 = bitcast %union.tree_node* %370 to %struct.tree_type*, !dbg !8706
  %precision786 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type785, i32 0, i32 6, !dbg !8706
  %bf.load787 = load i32, i32* %precision786, align 4, !dbg !8706
  %bf.clear788 = and i32 %bf.load787, 1023, !dbg !8706
  %cmp789 = icmp eq i32 %bf.clear784, %bf.clear788, !dbg !8706
  br i1 %cmp789, label %if.then791, label %if.end798, !dbg !8708

if.then791:                                       ; preds = %land.lhs.true780
  %371 = load i8, i8* %unsignedp.addr, align 1, !dbg !8709
  %conv792 = zext i8 %371 to i32, !dbg !8709
  %tobool793 = icmp ne i32 %conv792, 0, !dbg !8709
  br i1 %tobool793, label %cond.true794, label %cond.false795, !dbg !8709

cond.true794:                                     ; preds = %if.then791
  %372 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 8), align 16, !dbg !8710
  br label %cond.end796, !dbg !8709

cond.false795:                                    ; preds = %if.then791
  %373 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 7), align 8, !dbg !8711
  br label %cond.end796, !dbg !8709

cond.end796:                                      ; preds = %cond.false795, %cond.true794
  %cond797 = phi %union.tree_node* [ %372, %cond.true794 ], [ %373, %cond.false795 ], !dbg !8709
  store %union.tree_node* %cond797, %union.tree_node** %retval, align 8, !dbg !8712
  br label %return, !dbg !8712

if.end798:                                        ; preds = %land.lhs.true780, %cond.end776
  %374 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8713
  %base799 = bitcast %union.tree_node* %374 to %struct.tree_base*, !dbg !8713
  %375 = bitcast %struct.tree_base* %base799 to i64*, !dbg !8713
  %bf.load800 = load i64, i64* %375, align 8, !dbg !8713
  %bf.clear801 = and i64 %bf.load800, 65535, !dbg !8713
  %bf.cast802 = trunc i64 %bf.clear801 to i32, !dbg !8713
  %cmp803 = icmp eq i32 %bf.cast802, 14, !dbg !8713
  br i1 %cmp803, label %cond.true805, label %cond.false807, !dbg !8713

cond.true805:                                     ; preds = %if.end798
  %376 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8713
  %call806 = call i32 @vector_type_mode(%union.tree_node* %376), !dbg !8713
  br label %cond.end813, !dbg !8713

cond.false807:                                    ; preds = %if.end798
  %377 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8713
  %type808 = bitcast %union.tree_node* %377 to %struct.tree_type*, !dbg !8713
  %mode809 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type808, i32 0, i32 6, !dbg !8713
  %bf.load810 = load i32, i32* %mode809, align 4, !dbg !8713
  %bf.lshr811 = lshr i32 %bf.load810, 16, !dbg !8713
  %bf.clear812 = and i32 %bf.lshr811, 255, !dbg !8713
  br label %cond.end813, !dbg !8713

cond.end813:                                      ; preds = %cond.false807, %cond.true805
  %cond814 = phi i32 [ %call806, %cond.true805 ], [ %bf.clear812, %cond.false807 ], !dbg !8713
  %378 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 9), align 8, !dbg !8713
  %base815 = bitcast %union.tree_node* %378 to %struct.tree_base*, !dbg !8713
  %379 = bitcast %struct.tree_base* %base815 to i64*, !dbg !8713
  %bf.load816 = load i64, i64* %379, align 8, !dbg !8713
  %bf.clear817 = and i64 %bf.load816, 65535, !dbg !8713
  %bf.cast818 = trunc i64 %bf.clear817 to i32, !dbg !8713
  %cmp819 = icmp eq i32 %bf.cast818, 14, !dbg !8713
  br i1 %cmp819, label %cond.true821, label %cond.false823, !dbg !8713

cond.true821:                                     ; preds = %cond.end813
  %380 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 9), align 8, !dbg !8713
  %call822 = call i32 @vector_type_mode(%union.tree_node* %380), !dbg !8713
  br label %cond.end829, !dbg !8713

cond.false823:                                    ; preds = %cond.end813
  %381 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 9), align 8, !dbg !8713
  %type824 = bitcast %union.tree_node* %381 to %struct.tree_type*, !dbg !8713
  %mode825 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type824, i32 0, i32 6, !dbg !8713
  %bf.load826 = load i32, i32* %mode825, align 4, !dbg !8713
  %bf.lshr827 = lshr i32 %bf.load826, 16, !dbg !8713
  %bf.clear828 = and i32 %bf.lshr827, 255, !dbg !8713
  br label %cond.end829, !dbg !8713

cond.end829:                                      ; preds = %cond.false823, %cond.true821
  %cond830 = phi i32 [ %call822, %cond.true821 ], [ %bf.clear828, %cond.false823 ], !dbg !8713
  %cmp831 = icmp eq i32 %cond814, %cond830, !dbg !8713
  br i1 %cmp831, label %land.lhs.true833, label %if.end851, !dbg !8713

land.lhs.true833:                                 ; preds = %cond.end829
  %382 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8713
  %type834 = bitcast %union.tree_node* %382 to %struct.tree_type*, !dbg !8713
  %precision835 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type834, i32 0, i32 6, !dbg !8713
  %bf.load836 = load i32, i32* %precision835, align 4, !dbg !8713
  %bf.clear837 = and i32 %bf.load836, 1023, !dbg !8713
  %383 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 9), align 8, !dbg !8713
  %type838 = bitcast %union.tree_node* %383 to %struct.tree_type*, !dbg !8713
  %precision839 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type838, i32 0, i32 6, !dbg !8713
  %bf.load840 = load i32, i32* %precision839, align 4, !dbg !8713
  %bf.clear841 = and i32 %bf.load840, 1023, !dbg !8713
  %cmp842 = icmp eq i32 %bf.clear837, %bf.clear841, !dbg !8713
  br i1 %cmp842, label %if.then844, label %if.end851, !dbg !8715

if.then844:                                       ; preds = %land.lhs.true833
  %384 = load i8, i8* %unsignedp.addr, align 1, !dbg !8716
  %conv845 = zext i8 %384 to i32, !dbg !8716
  %tobool846 = icmp ne i32 %conv845, 0, !dbg !8716
  br i1 %tobool846, label %cond.true847, label %cond.false848, !dbg !8716

cond.true847:                                     ; preds = %if.then844
  %385 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 10), align 16, !dbg !8717
  br label %cond.end849, !dbg !8716

cond.false848:                                    ; preds = %if.then844
  %386 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 9), align 8, !dbg !8718
  br label %cond.end849, !dbg !8716

cond.end849:                                      ; preds = %cond.false848, %cond.true847
  %cond850 = phi %union.tree_node* [ %385, %cond.true847 ], [ %386, %cond.false848 ], !dbg !8716
  store %union.tree_node* %cond850, %union.tree_node** %retval, align 8, !dbg !8719
  br label %return, !dbg !8719

if.end851:                                        ; preds = %land.lhs.true833, %cond.end829
  %387 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8720
  %base852 = bitcast %union.tree_node* %387 to %struct.tree_base*, !dbg !8720
  %388 = bitcast %struct.tree_base* %base852 to i64*, !dbg !8720
  %bf.load853 = load i64, i64* %388, align 8, !dbg !8720
  %bf.clear854 = and i64 %bf.load853, 65535, !dbg !8720
  %bf.cast855 = trunc i64 %bf.clear854 to i32, !dbg !8720
  %cmp856 = icmp eq i32 %bf.cast855, 14, !dbg !8720
  br i1 %cmp856, label %cond.true858, label %cond.false860, !dbg !8720

cond.true858:                                     ; preds = %if.end851
  %389 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8720
  %call859 = call i32 @vector_type_mode(%union.tree_node* %389), !dbg !8720
  br label %cond.end866, !dbg !8720

cond.false860:                                    ; preds = %if.end851
  %390 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8720
  %type861 = bitcast %union.tree_node* %390 to %struct.tree_type*, !dbg !8720
  %mode862 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type861, i32 0, i32 6, !dbg !8720
  %bf.load863 = load i32, i32* %mode862, align 4, !dbg !8720
  %bf.lshr864 = lshr i32 %bf.load863, 16, !dbg !8720
  %bf.clear865 = and i32 %bf.lshr864, 255, !dbg !8720
  br label %cond.end866, !dbg !8720

cond.end866:                                      ; preds = %cond.false860, %cond.true858
  %cond867 = phi i32 [ %call859, %cond.true858 ], [ %bf.clear865, %cond.false860 ], !dbg !8720
  %391 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 5), align 8, !dbg !8720
  %base868 = bitcast %union.tree_node* %391 to %struct.tree_base*, !dbg !8720
  %392 = bitcast %struct.tree_base* %base868 to i64*, !dbg !8720
  %bf.load869 = load i64, i64* %392, align 8, !dbg !8720
  %bf.clear870 = and i64 %bf.load869, 65535, !dbg !8720
  %bf.cast871 = trunc i64 %bf.clear870 to i32, !dbg !8720
  %cmp872 = icmp eq i32 %bf.cast871, 14, !dbg !8720
  br i1 %cmp872, label %cond.true874, label %cond.false876, !dbg !8720

cond.true874:                                     ; preds = %cond.end866
  %393 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 5), align 8, !dbg !8720
  %call875 = call i32 @vector_type_mode(%union.tree_node* %393), !dbg !8720
  br label %cond.end882, !dbg !8720

cond.false876:                                    ; preds = %cond.end866
  %394 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 5), align 8, !dbg !8720
  %type877 = bitcast %union.tree_node* %394 to %struct.tree_type*, !dbg !8720
  %mode878 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type877, i32 0, i32 6, !dbg !8720
  %bf.load879 = load i32, i32* %mode878, align 4, !dbg !8720
  %bf.lshr880 = lshr i32 %bf.load879, 16, !dbg !8720
  %bf.clear881 = and i32 %bf.lshr880, 255, !dbg !8720
  br label %cond.end882, !dbg !8720

cond.end882:                                      ; preds = %cond.false876, %cond.true874
  %cond883 = phi i32 [ %call875, %cond.true874 ], [ %bf.clear881, %cond.false876 ], !dbg !8720
  %cmp884 = icmp eq i32 %cond867, %cond883, !dbg !8720
  br i1 %cmp884, label %land.lhs.true886, label %if.end904, !dbg !8720

land.lhs.true886:                                 ; preds = %cond.end882
  %395 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8720
  %type887 = bitcast %union.tree_node* %395 to %struct.tree_type*, !dbg !8720
  %precision888 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type887, i32 0, i32 6, !dbg !8720
  %bf.load889 = load i32, i32* %precision888, align 4, !dbg !8720
  %bf.clear890 = and i32 %bf.load889, 1023, !dbg !8720
  %396 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 5), align 8, !dbg !8720
  %type891 = bitcast %union.tree_node* %396 to %struct.tree_type*, !dbg !8720
  %precision892 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type891, i32 0, i32 6, !dbg !8720
  %bf.load893 = load i32, i32* %precision892, align 4, !dbg !8720
  %bf.clear894 = and i32 %bf.load893, 1023, !dbg !8720
  %cmp895 = icmp eq i32 %bf.clear890, %bf.clear894, !dbg !8720
  br i1 %cmp895, label %if.then897, label %if.end904, !dbg !8722

if.then897:                                       ; preds = %land.lhs.true886
  %397 = load i8, i8* %unsignedp.addr, align 1, !dbg !8723
  %conv898 = zext i8 %397 to i32, !dbg !8723
  %tobool899 = icmp ne i32 %conv898, 0, !dbg !8723
  br i1 %tobool899, label %cond.true900, label %cond.false901, !dbg !8723

cond.true900:                                     ; preds = %if.then897
  %398 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 10), align 16, !dbg !8724
  br label %cond.end902, !dbg !8723

cond.false901:                                    ; preds = %if.then897
  %399 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 5), align 8, !dbg !8725
  br label %cond.end902, !dbg !8723

cond.end902:                                      ; preds = %cond.false901, %cond.true900
  %cond903 = phi %union.tree_node* [ %398, %cond.true900 ], [ %399, %cond.false901 ], !dbg !8723
  store %union.tree_node* %cond903, %union.tree_node** %retval, align 8, !dbg !8726
  br label %return, !dbg !8726

if.end904:                                        ; preds = %land.lhs.true886, %cond.end882
  %400 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8727
  %base905 = bitcast %union.tree_node* %400 to %struct.tree_base*, !dbg !8727
  %401 = bitcast %struct.tree_base* %base905 to i64*, !dbg !8727
  %bf.load906 = load i64, i64* %401, align 8, !dbg !8727
  %bf.clear907 = and i64 %bf.load906, 65535, !dbg !8727
  %bf.cast908 = trunc i64 %bf.clear907 to i32, !dbg !8727
  %cmp909 = icmp eq i32 %bf.cast908, 14, !dbg !8727
  br i1 %cmp909, label %cond.true911, label %cond.false913, !dbg !8727

cond.true911:                                     ; preds = %if.end904
  %402 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8727
  %call912 = call i32 @vector_type_mode(%union.tree_node* %402), !dbg !8727
  br label %cond.end919, !dbg !8727

cond.false913:                                    ; preds = %if.end904
  %403 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8727
  %type914 = bitcast %union.tree_node* %403 to %struct.tree_type*, !dbg !8727
  %mode915 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type914, i32 0, i32 6, !dbg !8727
  %bf.load916 = load i32, i32* %mode915, align 4, !dbg !8727
  %bf.lshr917 = lshr i32 %bf.load916, 16, !dbg !8727
  %bf.clear918 = and i32 %bf.lshr917, 255, !dbg !8727
  br label %cond.end919, !dbg !8727

cond.end919:                                      ; preds = %cond.false913, %cond.true911
  %cond920 = phi i32 [ %call912, %cond.true911 ], [ %bf.clear918, %cond.false913 ], !dbg !8727
  %404 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 4), align 16, !dbg !8727
  %base921 = bitcast %union.tree_node* %404 to %struct.tree_base*, !dbg !8727
  %405 = bitcast %struct.tree_base* %base921 to i64*, !dbg !8727
  %bf.load922 = load i64, i64* %405, align 8, !dbg !8727
  %bf.clear923 = and i64 %bf.load922, 65535, !dbg !8727
  %bf.cast924 = trunc i64 %bf.clear923 to i32, !dbg !8727
  %cmp925 = icmp eq i32 %bf.cast924, 14, !dbg !8727
  br i1 %cmp925, label %cond.true927, label %cond.false929, !dbg !8727

cond.true927:                                     ; preds = %cond.end919
  %406 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 4), align 16, !dbg !8727
  %call928 = call i32 @vector_type_mode(%union.tree_node* %406), !dbg !8727
  br label %cond.end935, !dbg !8727

cond.false929:                                    ; preds = %cond.end919
  %407 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 4), align 16, !dbg !8727
  %type930 = bitcast %union.tree_node* %407 to %struct.tree_type*, !dbg !8727
  %mode931 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type930, i32 0, i32 6, !dbg !8727
  %bf.load932 = load i32, i32* %mode931, align 4, !dbg !8727
  %bf.lshr933 = lshr i32 %bf.load932, 16, !dbg !8727
  %bf.clear934 = and i32 %bf.lshr933, 255, !dbg !8727
  br label %cond.end935, !dbg !8727

cond.end935:                                      ; preds = %cond.false929, %cond.true927
  %cond936 = phi i32 [ %call928, %cond.true927 ], [ %bf.clear934, %cond.false929 ], !dbg !8727
  %cmp937 = icmp eq i32 %cond920, %cond936, !dbg !8727
  br i1 %cmp937, label %land.lhs.true939, label %if.end957, !dbg !8727

land.lhs.true939:                                 ; preds = %cond.end935
  %408 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8727
  %type940 = bitcast %union.tree_node* %408 to %struct.tree_type*, !dbg !8727
  %precision941 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type940, i32 0, i32 6, !dbg !8727
  %bf.load942 = load i32, i32* %precision941, align 4, !dbg !8727
  %bf.clear943 = and i32 %bf.load942, 1023, !dbg !8727
  %409 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 4), align 16, !dbg !8727
  %type944 = bitcast %union.tree_node* %409 to %struct.tree_type*, !dbg !8727
  %precision945 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type944, i32 0, i32 6, !dbg !8727
  %bf.load946 = load i32, i32* %precision945, align 4, !dbg !8727
  %bf.clear947 = and i32 %bf.load946, 1023, !dbg !8727
  %cmp948 = icmp eq i32 %bf.clear943, %bf.clear947, !dbg !8727
  br i1 %cmp948, label %if.then950, label %if.end957, !dbg !8729

if.then950:                                       ; preds = %land.lhs.true939
  %410 = load i8, i8* %unsignedp.addr, align 1, !dbg !8730
  %conv951 = zext i8 %410 to i32, !dbg !8730
  %tobool952 = icmp ne i32 %conv951, 0, !dbg !8730
  br i1 %tobool952, label %cond.true953, label %cond.false954, !dbg !8730

cond.true953:                                     ; preds = %if.then950
  %411 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 9), align 8, !dbg !8731
  br label %cond.end955, !dbg !8730

cond.false954:                                    ; preds = %if.then950
  %412 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 4), align 16, !dbg !8732
  br label %cond.end955, !dbg !8730

cond.end955:                                      ; preds = %cond.false954, %cond.true953
  %cond956 = phi %union.tree_node* [ %411, %cond.true953 ], [ %412, %cond.false954 ], !dbg !8730
  store %union.tree_node* %cond956, %union.tree_node** %retval, align 8, !dbg !8733
  br label %return, !dbg !8733

if.end957:                                        ; preds = %land.lhs.true939, %cond.end935
  %413 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8734
  %base958 = bitcast %union.tree_node* %413 to %struct.tree_base*, !dbg !8734
  %414 = bitcast %struct.tree_base* %base958 to i64*, !dbg !8734
  %bf.load959 = load i64, i64* %414, align 8, !dbg !8734
  %bf.clear960 = and i64 %bf.load959, 65535, !dbg !8734
  %bf.cast961 = trunc i64 %bf.clear960 to i32, !dbg !8734
  %cmp962 = icmp eq i32 %bf.cast961, 14, !dbg !8734
  br i1 %cmp962, label %cond.true964, label %cond.false966, !dbg !8734

cond.true964:                                     ; preds = %if.end957
  %415 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8734
  %call965 = call i32 @vector_type_mode(%union.tree_node* %415), !dbg !8734
  br label %cond.end972, !dbg !8734

cond.false966:                                    ; preds = %if.end957
  %416 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8734
  %type967 = bitcast %union.tree_node* %416 to %struct.tree_type*, !dbg !8734
  %mode968 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type967, i32 0, i32 6, !dbg !8734
  %bf.load969 = load i32, i32* %mode968, align 4, !dbg !8734
  %bf.lshr970 = lshr i32 %bf.load969, 16, !dbg !8734
  %bf.clear971 = and i32 %bf.lshr970, 255, !dbg !8734
  br label %cond.end972, !dbg !8734

cond.end972:                                      ; preds = %cond.false966, %cond.true964
  %cond973 = phi i32 [ %call965, %cond.true964 ], [ %bf.clear971, %cond.false966 ], !dbg !8734
  %417 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 3), align 8, !dbg !8734
  %base974 = bitcast %union.tree_node* %417 to %struct.tree_base*, !dbg !8734
  %418 = bitcast %struct.tree_base* %base974 to i64*, !dbg !8734
  %bf.load975 = load i64, i64* %418, align 8, !dbg !8734
  %bf.clear976 = and i64 %bf.load975, 65535, !dbg !8734
  %bf.cast977 = trunc i64 %bf.clear976 to i32, !dbg !8734
  %cmp978 = icmp eq i32 %bf.cast977, 14, !dbg !8734
  br i1 %cmp978, label %cond.true980, label %cond.false982, !dbg !8734

cond.true980:                                     ; preds = %cond.end972
  %419 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 3), align 8, !dbg !8734
  %call981 = call i32 @vector_type_mode(%union.tree_node* %419), !dbg !8734
  br label %cond.end988, !dbg !8734

cond.false982:                                    ; preds = %cond.end972
  %420 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 3), align 8, !dbg !8734
  %type983 = bitcast %union.tree_node* %420 to %struct.tree_type*, !dbg !8734
  %mode984 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type983, i32 0, i32 6, !dbg !8734
  %bf.load985 = load i32, i32* %mode984, align 4, !dbg !8734
  %bf.lshr986 = lshr i32 %bf.load985, 16, !dbg !8734
  %bf.clear987 = and i32 %bf.lshr986, 255, !dbg !8734
  br label %cond.end988, !dbg !8734

cond.end988:                                      ; preds = %cond.false982, %cond.true980
  %cond989 = phi i32 [ %call981, %cond.true980 ], [ %bf.clear987, %cond.false982 ], !dbg !8734
  %cmp990 = icmp eq i32 %cond973, %cond989, !dbg !8734
  br i1 %cmp990, label %land.lhs.true992, label %if.end1010, !dbg !8734

land.lhs.true992:                                 ; preds = %cond.end988
  %421 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8734
  %type993 = bitcast %union.tree_node* %421 to %struct.tree_type*, !dbg !8734
  %precision994 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type993, i32 0, i32 6, !dbg !8734
  %bf.load995 = load i32, i32* %precision994, align 4, !dbg !8734
  %bf.clear996 = and i32 %bf.load995, 1023, !dbg !8734
  %422 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 3), align 8, !dbg !8734
  %type997 = bitcast %union.tree_node* %422 to %struct.tree_type*, !dbg !8734
  %precision998 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type997, i32 0, i32 6, !dbg !8734
  %bf.load999 = load i32, i32* %precision998, align 4, !dbg !8734
  %bf.clear1000 = and i32 %bf.load999, 1023, !dbg !8734
  %cmp1001 = icmp eq i32 %bf.clear996, %bf.clear1000, !dbg !8734
  br i1 %cmp1001, label %if.then1003, label %if.end1010, !dbg !8736

if.then1003:                                      ; preds = %land.lhs.true992
  %423 = load i8, i8* %unsignedp.addr, align 1, !dbg !8737
  %conv1004 = zext i8 %423 to i32, !dbg !8737
  %tobool1005 = icmp ne i32 %conv1004, 0, !dbg !8737
  br i1 %tobool1005, label %cond.true1006, label %cond.false1007, !dbg !8737

cond.true1006:                                    ; preds = %if.then1003
  %424 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 8), align 16, !dbg !8738
  br label %cond.end1008, !dbg !8737

cond.false1007:                                   ; preds = %if.then1003
  %425 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 3), align 8, !dbg !8739
  br label %cond.end1008, !dbg !8737

cond.end1008:                                     ; preds = %cond.false1007, %cond.true1006
  %cond1009 = phi %union.tree_node* [ %424, %cond.true1006 ], [ %425, %cond.false1007 ], !dbg !8737
  store %union.tree_node* %cond1009, %union.tree_node** %retval, align 8, !dbg !8740
  br label %return, !dbg !8740

if.end1010:                                       ; preds = %land.lhs.true992, %cond.end988
  %426 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8741
  %base1011 = bitcast %union.tree_node* %426 to %struct.tree_base*, !dbg !8741
  %427 = bitcast %struct.tree_base* %base1011 to i64*, !dbg !8741
  %bf.load1012 = load i64, i64* %427, align 8, !dbg !8741
  %bf.clear1013 = and i64 %bf.load1012, 65535, !dbg !8741
  %bf.cast1014 = trunc i64 %bf.clear1013 to i32, !dbg !8741
  %cmp1015 = icmp eq i32 %bf.cast1014, 14, !dbg !8741
  br i1 %cmp1015, label %cond.true1017, label %cond.false1019, !dbg !8741

cond.true1017:                                    ; preds = %if.end1010
  %428 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8741
  %call1018 = call i32 @vector_type_mode(%union.tree_node* %428), !dbg !8741
  br label %cond.end1025, !dbg !8741

cond.false1019:                                   ; preds = %if.end1010
  %429 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8741
  %type1020 = bitcast %union.tree_node* %429 to %struct.tree_type*, !dbg !8741
  %mode1021 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1020, i32 0, i32 6, !dbg !8741
  %bf.load1022 = load i32, i32* %mode1021, align 4, !dbg !8741
  %bf.lshr1023 = lshr i32 %bf.load1022, 16, !dbg !8741
  %bf.clear1024 = and i32 %bf.lshr1023, 255, !dbg !8741
  br label %cond.end1025, !dbg !8741

cond.end1025:                                     ; preds = %cond.false1019, %cond.true1017
  %cond1026 = phi i32 [ %call1018, %cond.true1017 ], [ %bf.clear1024, %cond.false1019 ], !dbg !8741
  %430 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 2), align 16, !dbg !8741
  %base1027 = bitcast %union.tree_node* %430 to %struct.tree_base*, !dbg !8741
  %431 = bitcast %struct.tree_base* %base1027 to i64*, !dbg !8741
  %bf.load1028 = load i64, i64* %431, align 8, !dbg !8741
  %bf.clear1029 = and i64 %bf.load1028, 65535, !dbg !8741
  %bf.cast1030 = trunc i64 %bf.clear1029 to i32, !dbg !8741
  %cmp1031 = icmp eq i32 %bf.cast1030, 14, !dbg !8741
  br i1 %cmp1031, label %cond.true1033, label %cond.false1035, !dbg !8741

cond.true1033:                                    ; preds = %cond.end1025
  %432 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 2), align 16, !dbg !8741
  %call1034 = call i32 @vector_type_mode(%union.tree_node* %432), !dbg !8741
  br label %cond.end1041, !dbg !8741

cond.false1035:                                   ; preds = %cond.end1025
  %433 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 2), align 16, !dbg !8741
  %type1036 = bitcast %union.tree_node* %433 to %struct.tree_type*, !dbg !8741
  %mode1037 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1036, i32 0, i32 6, !dbg !8741
  %bf.load1038 = load i32, i32* %mode1037, align 4, !dbg !8741
  %bf.lshr1039 = lshr i32 %bf.load1038, 16, !dbg !8741
  %bf.clear1040 = and i32 %bf.lshr1039, 255, !dbg !8741
  br label %cond.end1041, !dbg !8741

cond.end1041:                                     ; preds = %cond.false1035, %cond.true1033
  %cond1042 = phi i32 [ %call1034, %cond.true1033 ], [ %bf.clear1040, %cond.false1035 ], !dbg !8741
  %cmp1043 = icmp eq i32 %cond1026, %cond1042, !dbg !8741
  br i1 %cmp1043, label %land.lhs.true1045, label %if.end1063, !dbg !8741

land.lhs.true1045:                                ; preds = %cond.end1041
  %434 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8741
  %type1046 = bitcast %union.tree_node* %434 to %struct.tree_type*, !dbg !8741
  %precision1047 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1046, i32 0, i32 6, !dbg !8741
  %bf.load1048 = load i32, i32* %precision1047, align 4, !dbg !8741
  %bf.clear1049 = and i32 %bf.load1048, 1023, !dbg !8741
  %435 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 2), align 16, !dbg !8741
  %type1050 = bitcast %union.tree_node* %435 to %struct.tree_type*, !dbg !8741
  %precision1051 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1050, i32 0, i32 6, !dbg !8741
  %bf.load1052 = load i32, i32* %precision1051, align 4, !dbg !8741
  %bf.clear1053 = and i32 %bf.load1052, 1023, !dbg !8741
  %cmp1054 = icmp eq i32 %bf.clear1049, %bf.clear1053, !dbg !8741
  br i1 %cmp1054, label %if.then1056, label %if.end1063, !dbg !8743

if.then1056:                                      ; preds = %land.lhs.true1045
  %436 = load i8, i8* %unsignedp.addr, align 1, !dbg !8744
  %conv1057 = zext i8 %436 to i32, !dbg !8744
  %tobool1058 = icmp ne i32 %conv1057, 0, !dbg !8744
  br i1 %tobool1058, label %cond.true1059, label %cond.false1060, !dbg !8744

cond.true1059:                                    ; preds = %if.then1056
  %437 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 7), align 8, !dbg !8745
  br label %cond.end1061, !dbg !8744

cond.false1060:                                   ; preds = %if.then1056
  %438 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 2), align 16, !dbg !8746
  br label %cond.end1061, !dbg !8744

cond.end1061:                                     ; preds = %cond.false1060, %cond.true1059
  %cond1062 = phi %union.tree_node* [ %437, %cond.true1059 ], [ %438, %cond.false1060 ], !dbg !8744
  store %union.tree_node* %cond1062, %union.tree_node** %retval, align 8, !dbg !8747
  br label %return, !dbg !8747

if.end1063:                                       ; preds = %land.lhs.true1045, %cond.end1041
  %439 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8748
  %base1064 = bitcast %union.tree_node* %439 to %struct.tree_base*, !dbg !8748
  %440 = bitcast %struct.tree_base* %base1064 to i64*, !dbg !8748
  %bf.load1065 = load i64, i64* %440, align 8, !dbg !8748
  %bf.clear1066 = and i64 %bf.load1065, 65535, !dbg !8748
  %bf.cast1067 = trunc i64 %bf.clear1066 to i32, !dbg !8748
  %cmp1068 = icmp eq i32 %bf.cast1067, 14, !dbg !8748
  br i1 %cmp1068, label %cond.true1070, label %cond.false1072, !dbg !8748

cond.true1070:                                    ; preds = %if.end1063
  %441 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8748
  %call1071 = call i32 @vector_type_mode(%union.tree_node* %441), !dbg !8748
  br label %cond.end1078, !dbg !8748

cond.false1072:                                   ; preds = %if.end1063
  %442 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8748
  %type1073 = bitcast %union.tree_node* %442 to %struct.tree_type*, !dbg !8748
  %mode1074 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1073, i32 0, i32 6, !dbg !8748
  %bf.load1075 = load i32, i32* %mode1074, align 4, !dbg !8748
  %bf.lshr1076 = lshr i32 %bf.load1075, 16, !dbg !8748
  %bf.clear1077 = and i32 %bf.lshr1076, 255, !dbg !8748
  br label %cond.end1078, !dbg !8748

cond.end1078:                                     ; preds = %cond.false1072, %cond.true1070
  %cond1079 = phi i32 [ %call1071, %cond.true1070 ], [ %bf.clear1077, %cond.false1072 ], !dbg !8748
  %443 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 1), align 8, !dbg !8748
  %base1080 = bitcast %union.tree_node* %443 to %struct.tree_base*, !dbg !8748
  %444 = bitcast %struct.tree_base* %base1080 to i64*, !dbg !8748
  %bf.load1081 = load i64, i64* %444, align 8, !dbg !8748
  %bf.clear1082 = and i64 %bf.load1081, 65535, !dbg !8748
  %bf.cast1083 = trunc i64 %bf.clear1082 to i32, !dbg !8748
  %cmp1084 = icmp eq i32 %bf.cast1083, 14, !dbg !8748
  br i1 %cmp1084, label %cond.true1086, label %cond.false1088, !dbg !8748

cond.true1086:                                    ; preds = %cond.end1078
  %445 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 1), align 8, !dbg !8748
  %call1087 = call i32 @vector_type_mode(%union.tree_node* %445), !dbg !8748
  br label %cond.end1094, !dbg !8748

cond.false1088:                                   ; preds = %cond.end1078
  %446 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 1), align 8, !dbg !8748
  %type1089 = bitcast %union.tree_node* %446 to %struct.tree_type*, !dbg !8748
  %mode1090 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1089, i32 0, i32 6, !dbg !8748
  %bf.load1091 = load i32, i32* %mode1090, align 4, !dbg !8748
  %bf.lshr1092 = lshr i32 %bf.load1091, 16, !dbg !8748
  %bf.clear1093 = and i32 %bf.lshr1092, 255, !dbg !8748
  br label %cond.end1094, !dbg !8748

cond.end1094:                                     ; preds = %cond.false1088, %cond.true1086
  %cond1095 = phi i32 [ %call1087, %cond.true1086 ], [ %bf.clear1093, %cond.false1088 ], !dbg !8748
  %cmp1096 = icmp eq i32 %cond1079, %cond1095, !dbg !8748
  br i1 %cmp1096, label %land.lhs.true1098, label %if.end1116, !dbg !8748

land.lhs.true1098:                                ; preds = %cond.end1094
  %447 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8748
  %type1099 = bitcast %union.tree_node* %447 to %struct.tree_type*, !dbg !8748
  %precision1100 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1099, i32 0, i32 6, !dbg !8748
  %bf.load1101 = load i32, i32* %precision1100, align 4, !dbg !8748
  %bf.clear1102 = and i32 %bf.load1101, 1023, !dbg !8748
  %448 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 1), align 8, !dbg !8748
  %type1103 = bitcast %union.tree_node* %448 to %struct.tree_type*, !dbg !8748
  %precision1104 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1103, i32 0, i32 6, !dbg !8748
  %bf.load1105 = load i32, i32* %precision1104, align 4, !dbg !8748
  %bf.clear1106 = and i32 %bf.load1105, 1023, !dbg !8748
  %cmp1107 = icmp eq i32 %bf.clear1102, %bf.clear1106, !dbg !8748
  br i1 %cmp1107, label %if.then1109, label %if.end1116, !dbg !8750

if.then1109:                                      ; preds = %land.lhs.true1098
  %449 = load i8, i8* %unsignedp.addr, align 1, !dbg !8751
  %conv1110 = zext i8 %449 to i32, !dbg !8751
  %tobool1111 = icmp ne i32 %conv1110, 0, !dbg !8751
  br i1 %tobool1111, label %cond.true1112, label %cond.false1113, !dbg !8751

cond.true1112:                                    ; preds = %if.then1109
  %450 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 6), align 16, !dbg !8752
  br label %cond.end1114, !dbg !8751

cond.false1113:                                   ; preds = %if.then1109
  %451 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 1), align 8, !dbg !8753
  br label %cond.end1114, !dbg !8751

cond.end1114:                                     ; preds = %cond.false1113, %cond.true1112
  %cond1115 = phi %union.tree_node* [ %450, %cond.true1112 ], [ %451, %cond.false1113 ], !dbg !8751
  store %union.tree_node* %cond1115, %union.tree_node** %retval, align 8, !dbg !8754
  br label %return, !dbg !8754

if.end1116:                                       ; preds = %land.lhs.true1098, %cond.end1094
  %452 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8755
  %type1117 = bitcast %union.tree_node* %452 to %struct.tree_type*, !dbg !8755
  %precision1118 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1117, i32 0, i32 6, !dbg !8755
  %bf.load1119 = load i32, i32* %precision1118, align 4, !dbg !8755
  %bf.clear1120 = and i32 %bf.load1119, 1023, !dbg !8755
  %conv1121 = zext i32 %bf.clear1120 to i64, !dbg !8755
  %453 = load i8, i8* %unsignedp.addr, align 1, !dbg !8756
  %conv1122 = zext i8 %453 to i32, !dbg !8756
  %call1123 = call %union.tree_node* @build_nonstandard_integer_type(i64 %conv1121, i32 %conv1122), !dbg !8757
  store %union.tree_node* %call1123, %union.tree_node** %retval, align 8, !dbg !8758
  br label %return, !dbg !8758

return:                                           ; preds = %if.end1116, %cond.end1114, %cond.end1061, %cond.end1008, %cond.end955, %cond.end902, %cond.end849, %cond.end796, %cond.end743, %cond.end690, %cond.end637, %if.then589, %cond.end562, %cond.end549, %cond.end536, %cond.end523, %cond.end510, %cond.end497, %cond.end484, %cond.end471, %cond.end458, %cond.end445, %cond.end432, %cond.end419, %cond.end406, %cond.end393, %cond.end380, %cond.end367, %cond.end354, %cond.end341, %cond.end328, %cond.end315, %cond.end302, %cond.end289, %cond.end276, %cond.end263, %cond.end250, %cond.end237, %cond.end224, %cond.end211, %cond.end198, %cond.end185, %cond.end172, %cond.end159, %cond.end146, %cond.end133, %cond.end120, %cond.end107, %cond.end94, %cond.end81, %cond.end68, %cond.end55, %cond.end42, %cond.end29, %cond.end16, %cond.end
  %454 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !8759
  ret %union.tree_node* %454, !dbg !8759
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @gimple_signed_type(%union.tree_node* %type) #0 !dbg !8760 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !8761, metadata !DIExpression()), !dbg !8762
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8763
  %call = call %union.tree_node* @gimple_signed_or_unsigned_type(i8 zeroext 0, %union.tree_node* %0), !dbg !8764
  ret %union.tree_node* %call, !dbg !8765
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gimple_get_alias_set(%union.tree_node* %t) #0 !dbg !8766 {
entry:
  %retval = alloca i32, align 4
  %t.addr = alloca %union.tree_node*, align 8
  %u = alloca %union.tree_node*, align 8
  %t1 = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !8769, metadata !DIExpression()), !dbg !8770
  call void @llvm.dbg.declare(metadata %union.tree_node** %u, metadata !8771, metadata !DIExpression()), !dbg !8772
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !8773
  store %union.tree_node* %0, %union.tree_node** %u, align 8, !dbg !8775
  br label %for.cond, !dbg !8776

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %union.tree_node*, %union.tree_node** %u, align 8, !dbg !8777
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !8777
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !8777
  %bf.load = load i64, i64* %2, align 8, !dbg !8777
  %bf.clear = and i64 %bf.load, 65535, !dbg !8777
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8777
  %cmp = icmp eq i32 %bf.cast, 41, !dbg !8779
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !8780

lor.rhs:                                          ; preds = %for.cond
  %3 = load %union.tree_node*, %union.tree_node** %u, align 8, !dbg !8781
  %base1 = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !8781
  %4 = bitcast %struct.tree_base* %base1 to i64*, !dbg !8781
  %bf.load2 = load i64, i64* %4, align 8, !dbg !8781
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !8781
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !8781
  %cmp5 = icmp eq i32 %bf.cast4, 45, !dbg !8782
  br label %lor.end, !dbg !8780

lor.end:                                          ; preds = %lor.rhs, %for.cond
  %5 = phi i1 [ true, %for.cond ], [ %cmp5, %lor.rhs ]
  br i1 %5, label %for.body, label %for.end, !dbg !8783

for.body:                                         ; preds = %lor.end
  %6 = load %union.tree_node*, %union.tree_node** %u, align 8, !dbg !8784
  %base6 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !8784
  %7 = bitcast %struct.tree_base* %base6 to i64*, !dbg !8784
  %bf.load7 = load i64, i64* %7, align 8, !dbg !8784
  %bf.clear8 = and i64 %bf.load7, 65535, !dbg !8784
  %bf.cast9 = trunc i64 %bf.clear8 to i32, !dbg !8784
  %cmp10 = icmp eq i32 %bf.cast9, 41, !dbg !8786
  br i1 %cmp10, label %land.lhs.true, label %if.end, !dbg !8787

land.lhs.true:                                    ; preds = %for.body
  %8 = load %union.tree_node*, %union.tree_node** %u, align 8, !dbg !8788
  %exp = bitcast %union.tree_node* %8 to %struct.tree_exp*, !dbg !8788
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !8788
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !8788
  %9 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !8788
  %common = bitcast %union.tree_node* %9 to %struct.tree_common*, !dbg !8788
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !8788
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8788
  %base11 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !8788
  %11 = bitcast %struct.tree_base* %base11 to i64*, !dbg !8788
  %bf.load12 = load i64, i64* %11, align 8, !dbg !8788
  %bf.clear13 = and i64 %bf.load12, 65535, !dbg !8788
  %bf.cast14 = trunc i64 %bf.clear13 to i32, !dbg !8788
  %cmp15 = icmp eq i32 %bf.cast14, 17, !dbg !8789
  br i1 %cmp15, label %if.then, label %if.end, !dbg !8790

if.then:                                          ; preds = %land.lhs.true
  store i32 0, i32* %retval, align 4, !dbg !8791
  br label %return, !dbg !8791

if.end:                                           ; preds = %land.lhs.true, %for.body
  br label %for.inc, !dbg !8792

for.inc:                                          ; preds = %if.end
  %12 = load %union.tree_node*, %union.tree_node** %u, align 8, !dbg !8793
  %exp16 = bitcast %union.tree_node* %12 to %struct.tree_exp*, !dbg !8793
  %operands17 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp16, i32 0, i32 3, !dbg !8793
  %arrayidx18 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands17, i64 0, i64 0, !dbg !8793
  %13 = load %union.tree_node*, %union.tree_node** %arrayidx18, align 8, !dbg !8793
  store %union.tree_node* %13, %union.tree_node** %u, align 8, !dbg !8794
  br label %for.cond, !dbg !8795, !llvm.loop !8796

for.end:                                          ; preds = %lor.end
  %14 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !8798
  %base19 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !8798
  %15 = bitcast %struct.tree_base* %base19 to i64*, !dbg !8798
  %bf.load20 = load i64, i64* %15, align 8, !dbg !8798
  %bf.clear21 = and i64 %bf.load20, 65535, !dbg !8798
  %bf.cast22 = trunc i64 %bf.clear21 to i32, !dbg !8798
  %idxprom = sext i32 %bf.cast22 to i64, !dbg !8798
  %arrayidx23 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !8798
  %16 = load i32, i32* %arrayidx23, align 4, !dbg !8798
  %cmp24 = icmp eq i32 %16, 2, !dbg !8798
  br i1 %cmp24, label %if.end26, label %if.then25, !dbg !8800

if.then25:                                        ; preds = %for.end
  store i32 -1, i32* %retval, align 4, !dbg !8801
  br label %return, !dbg !8801

if.end26:                                         ; preds = %for.end
  %17 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !8802
  %18 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 0), align 16, !dbg !8804
  %cmp27 = icmp eq %union.tree_node* %17, %18, !dbg !8805
  br i1 %cmp27, label %if.then31, label %lor.lhs.false, !dbg !8806

lor.lhs.false:                                    ; preds = %if.end26
  %19 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !8807
  %20 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 1), align 8, !dbg !8808
  %cmp28 = icmp eq %union.tree_node* %19, %20, !dbg !8809
  br i1 %cmp28, label %if.then31, label %lor.lhs.false29, !dbg !8810

lor.lhs.false29:                                  ; preds = %lor.lhs.false
  %21 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !8811
  %22 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 2), align 16, !dbg !8812
  %cmp30 = icmp eq %union.tree_node* %21, %22, !dbg !8813
  br i1 %cmp30, label %if.then31, label %if.end32, !dbg !8814

if.then31:                                        ; preds = %lor.lhs.false29, %lor.lhs.false, %if.end26
  store i32 0, i32* %retval, align 4, !dbg !8815
  br label %return, !dbg !8815

if.end32:                                         ; preds = %lor.lhs.false29
  %23 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !8816
  %base33 = bitcast %union.tree_node* %23 to %struct.tree_base*, !dbg !8816
  %24 = bitcast %struct.tree_base* %base33 to i64*, !dbg !8816
  %bf.load34 = load i64, i64* %24, align 8, !dbg !8816
  %bf.clear35 = and i64 %bf.load34, 65535, !dbg !8816
  %bf.cast36 = trunc i64 %bf.clear35 to i32, !dbg !8816
  %cmp37 = icmp eq i32 %bf.cast36, 8, !dbg !8818
  br i1 %cmp37, label %land.lhs.true38, label %if.else, !dbg !8819

land.lhs.true38:                                  ; preds = %if.end32
  %25 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !8820
  %base39 = bitcast %union.tree_node* %25 to %struct.tree_base*, !dbg !8820
  %26 = bitcast %struct.tree_base* %base39 to i64*, !dbg !8820
  %bf.load40 = load i64, i64* %26, align 8, !dbg !8820
  %bf.lshr = lshr i64 %bf.load40, 21, !dbg !8820
  %bf.clear41 = and i64 %bf.lshr, 1, !dbg !8820
  %bf.cast42 = trunc i64 %bf.clear41 to i32, !dbg !8820
  %tobool = icmp ne i32 %bf.cast42, 0, !dbg !8820
  br i1 %tobool, label %if.then43, label %if.else, !dbg !8821

if.then43:                                        ; preds = %land.lhs.true38
  call void @llvm.dbg.declare(metadata %union.tree_node** %t1, metadata !8822, metadata !DIExpression()), !dbg !8824
  %27 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !8825
  %call = call %union.tree_node* @gimple_signed_type(%union.tree_node* %27), !dbg !8826
  store %union.tree_node* %call, %union.tree_node** %t1, align 8, !dbg !8824
  %28 = load %union.tree_node*, %union.tree_node** %t1, align 8, !dbg !8827
  %29 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !8829
  %cmp44 = icmp ne %union.tree_node* %28, %29, !dbg !8830
  br i1 %cmp44, label %if.then45, label %if.end47, !dbg !8831

if.then45:                                        ; preds = %if.then43
  %30 = load %union.tree_node*, %union.tree_node** %t1, align 8, !dbg !8832
  %call46 = call i32 @get_alias_set(%union.tree_node* %30), !dbg !8833
  store i32 %call46, i32* %retval, align 4, !dbg !8834
  br label %return, !dbg !8834

if.end47:                                         ; preds = %if.then43
  br label %if.end65, !dbg !8835

if.else:                                          ; preds = %land.lhs.true38, %if.end32
  %31 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !8836
  %base48 = bitcast %union.tree_node* %31 to %struct.tree_base*, !dbg !8836
  %32 = bitcast %struct.tree_base* %base48 to i64*, !dbg !8836
  %bf.load49 = load i64, i64* %32, align 8, !dbg !8836
  %bf.clear50 = and i64 %bf.load49, 65535, !dbg !8836
  %bf.cast51 = trunc i64 %bf.clear50 to i32, !dbg !8836
  %cmp52 = icmp eq i32 %bf.cast51, 10, !dbg !8836
  br i1 %cmp52, label %if.then59, label %lor.lhs.false53, !dbg !8836

lor.lhs.false53:                                  ; preds = %if.else
  %33 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !8836
  %base54 = bitcast %union.tree_node* %33 to %struct.tree_base*, !dbg !8836
  %34 = bitcast %struct.tree_base* %base54 to i64*, !dbg !8836
  %bf.load55 = load i64, i64* %34, align 8, !dbg !8836
  %bf.clear56 = and i64 %bf.load55, 65535, !dbg !8836
  %bf.cast57 = trunc i64 %bf.clear56 to i32, !dbg !8836
  %cmp58 = icmp eq i32 %bf.cast57, 12, !dbg !8836
  br i1 %cmp58, label %if.then59, label %if.end64, !dbg !8838

if.then59:                                        ; preds = %lor.lhs.false53, %if.else
  %35 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !8839
  %36 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 39), align 8, !dbg !8842
  %cmp60 = icmp ne %union.tree_node* %35, %36, !dbg !8843
  br i1 %cmp60, label %if.then61, label %if.end63, !dbg !8844

if.then61:                                        ; preds = %if.then59
  %37 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 39), align 8, !dbg !8845
  %call62 = call i32 @get_alias_set(%union.tree_node* %37), !dbg !8846
  store i32 %call62, i32* %retval, align 4, !dbg !8847
  br label %return, !dbg !8847

if.end63:                                         ; preds = %if.then59
  br label %if.end64, !dbg !8848

if.end64:                                         ; preds = %if.end63, %lor.lhs.false53
  br label %if.end65

if.end65:                                         ; preds = %if.end64, %if.end47
  store i32 -1, i32* %retval, align 4, !dbg !8849
  br label %return, !dbg !8849

return:                                           ; preds = %if.end65, %if.then61, %if.then45, %if.then31, %if.then25, %if.then
  %38 = load i32, i32* %retval, align 4, !dbg !8850
  ret i32 %38, !dbg !8850
}

declare dso_local i32 @get_alias_set(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @count_uses_and_derefs(%union.tree_node* %ptr, %union.gimple_statement_d* %stmt, i32* %num_uses_p, i32* %num_loads_p, i32* %num_stores_p) #0 !dbg !8851 {
entry:
  %ptr.addr = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %num_uses_p.addr = alloca i32*, align 8
  %num_loads_p.addr = alloca i32*, align 8
  %num_stores_p.addr = alloca i32*, align 8
  %i = alloca %struct.ssa_operand_iterator_d, align 8
  %use = alloca %union.tree_node*, align 8
  %wi = alloca %struct.walk_stmt_info, align 8
  %count = alloca %struct.count_ptr_d, align 8
  store %union.tree_node* %ptr, %union.tree_node** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %ptr.addr, metadata !8855, metadata !DIExpression()), !dbg !8856
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8857, metadata !DIExpression()), !dbg !8858
  store i32* %num_uses_p, i32** %num_uses_p.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %num_uses_p.addr, metadata !8859, metadata !DIExpression()), !dbg !8860
  store i32* %num_loads_p, i32** %num_loads_p.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %num_loads_p.addr, metadata !8861, metadata !DIExpression()), !dbg !8862
  store i32* %num_stores_p, i32** %num_stores_p.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %num_stores_p.addr, metadata !8863, metadata !DIExpression()), !dbg !8864
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %i, metadata !8865, metadata !DIExpression()), !dbg !8878
  call void @llvm.dbg.declare(metadata %union.tree_node** %use, metadata !8879, metadata !DIExpression()), !dbg !8880
  %0 = load i32*, i32** %num_uses_p.addr, align 8, !dbg !8881
  store i32 0, i32* %0, align 4, !dbg !8882
  %1 = load i32*, i32** %num_loads_p.addr, align 8, !dbg !8883
  store i32 0, i32* %1, align 4, !dbg !8884
  %2 = load i32*, i32** %num_stores_p.addr, align 8, !dbg !8885
  store i32 0, i32* %2, align 4, !dbg !8886
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8887
  %call = call %union.tree_node* @op_iter_init_tree(%struct.ssa_operand_iterator_d* %i, %union.gimple_statement_d* %3, i32 1), !dbg !8887
  store %union.tree_node* %call, %union.tree_node** %use, align 8, !dbg !8887
  br label %for.cond, !dbg !8887

for.cond:                                         ; preds = %for.inc, %entry
  %call1 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %i), !dbg !8889
  %tobool = icmp ne i8 %call1, 0, !dbg !8889
  %lnot = xor i1 %tobool, true, !dbg !8889
  br i1 %lnot, label %for.body, label %for.end, !dbg !8887

for.body:                                         ; preds = %for.cond
  %4 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !8891
  %5 = load %union.tree_node*, %union.tree_node** %ptr.addr, align 8, !dbg !8893
  %cmp = icmp eq %union.tree_node* %4, %5, !dbg !8894
  br i1 %cmp, label %if.then, label %if.end, !dbg !8895

if.then:                                          ; preds = %for.body
  %6 = load i32*, i32** %num_uses_p.addr, align 8, !dbg !8896
  %7 = load i32, i32* %6, align 4, !dbg !8897
  %inc = add i32 %7, 1, !dbg !8897
  store i32 %inc, i32* %6, align 4, !dbg !8897
  br label %if.end, !dbg !8898

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !8893

for.inc:                                          ; preds = %if.end
  %call2 = call %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %i), !dbg !8889
  store %union.tree_node* %call2, %union.tree_node** %use, align 8, !dbg !8889
  br label %for.cond, !dbg !8889, !llvm.loop !8899

for.end:                                          ; preds = %for.cond
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8901
  %call3 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %8), !dbg !8903
  %conv = zext i8 %call3 to i32, !dbg !8903
  %tobool4 = icmp ne i32 %conv, 0, !dbg !8903
  br i1 %tobool4, label %if.then16, label %lor.lhs.false, !dbg !8904

lor.lhs.false:                                    ; preds = %for.end
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8905
  %call5 = call i32 @gimple_code(%union.gimple_statement_d* %9), !dbg !8906
  %cmp6 = icmp eq i32 %call5, 9, !dbg !8907
  br i1 %cmp6, label %if.then16, label %lor.lhs.false8, !dbg !8908

lor.lhs.false8:                                   ; preds = %lor.lhs.false
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8909
  %call9 = call i32 @gimple_code(%union.gimple_statement_d* %10), !dbg !8910
  %cmp10 = icmp eq i32 %call9, 7, !dbg !8911
  br i1 %cmp10, label %if.then16, label %lor.lhs.false12, !dbg !8912

lor.lhs.false12:                                  ; preds = %lor.lhs.false8
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8913
  %call13 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %11), !dbg !8914
  %conv14 = zext i8 %call13 to i32, !dbg !8914
  %tobool15 = icmp ne i32 %conv14, 0, !dbg !8914
  br i1 %tobool15, label %if.then16, label %if.end21, !dbg !8915

if.then16:                                        ; preds = %lor.lhs.false12, %lor.lhs.false8, %lor.lhs.false, %for.end
  call void @llvm.dbg.declare(metadata %struct.walk_stmt_info* %wi, metadata !8916, metadata !DIExpression()), !dbg !8918
  call void @llvm.dbg.declare(metadata %struct.count_ptr_d* %count, metadata !8919, metadata !DIExpression()), !dbg !8920
  %12 = load %union.tree_node*, %union.tree_node** %ptr.addr, align 8, !dbg !8921
  %ptr17 = getelementptr inbounds %struct.count_ptr_d, %struct.count_ptr_d* %count, i32 0, i32 0, !dbg !8922
  store %union.tree_node* %12, %union.tree_node** %ptr17, align 8, !dbg !8923
  %num_stores = getelementptr inbounds %struct.count_ptr_d, %struct.count_ptr_d* %count, i32 0, i32 1, !dbg !8924
  store i32 0, i32* %num_stores, align 8, !dbg !8925
  %num_loads = getelementptr inbounds %struct.count_ptr_d, %struct.count_ptr_d* %count, i32 0, i32 2, !dbg !8926
  store i32 0, i32* %num_loads, align 4, !dbg !8927
  %13 = bitcast %struct.walk_stmt_info* %wi to i8*, !dbg !8928
  call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 56, i1 false), !dbg !8928
  %14 = bitcast %struct.count_ptr_d* %count to i8*, !dbg !8929
  %info = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i32 0, i32 1, !dbg !8930
  store i8* %14, i8** %info, align 8, !dbg !8931
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8932
  %call18 = call %union.tree_node* @walk_gimple_op(%union.gimple_statement_d* %15, %union.tree_node* (%union.tree_node**, i32*, i8*)* @count_ptr_derefs, %struct.walk_stmt_info* %wi), !dbg !8933
  %num_stores19 = getelementptr inbounds %struct.count_ptr_d, %struct.count_ptr_d* %count, i32 0, i32 1, !dbg !8934
  %16 = load i32, i32* %num_stores19, align 8, !dbg !8934
  %17 = load i32*, i32** %num_stores_p.addr, align 8, !dbg !8935
  store i32 %16, i32* %17, align 4, !dbg !8936
  %num_loads20 = getelementptr inbounds %struct.count_ptr_d, %struct.count_ptr_d* %count, i32 0, i32 2, !dbg !8937
  %18 = load i32, i32* %num_loads20, align 4, !dbg !8937
  %19 = load i32*, i32** %num_loads_p.addr, align 8, !dbg !8938
  store i32 %18, i32* %19, align 4, !dbg !8939
  br label %if.end21, !dbg !8940

if.end21:                                         ; preds = %if.then16, %lor.lhs.false12
  %20 = load i32*, i32** %num_uses_p.addr, align 8, !dbg !8941
  %21 = load i32, i32* %20, align 4, !dbg !8941
  %22 = load i32*, i32** %num_loads_p.addr, align 8, !dbg !8941
  %23 = load i32, i32* %22, align 4, !dbg !8941
  %24 = load i32*, i32** %num_stores_p.addr, align 8, !dbg !8941
  %25 = load i32, i32* %24, align 4, !dbg !8941
  %add = add i32 %23, %25, !dbg !8941
  %cmp22 = icmp uge i32 %21, %add, !dbg !8941
  br i1 %cmp22, label %cond.false, label %cond.true, !dbg !8941

cond.true:                                        ; preds = %if.end21
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 4318, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !8941
  br label %cond.end, !dbg !8941

cond.false:                                       ; preds = %if.end21
  br label %cond.end, !dbg !8941

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8941
  ret void, !dbg !8942
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @op_iter_init_tree(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !8943 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !8948, metadata !DIExpression()), !dbg !8949
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8950, metadata !DIExpression()), !dbg !8951
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !8952, metadata !DIExpression()), !dbg !8953
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8954
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8955
  %2 = load i32, i32* %flags.addr, align 4, !dbg !8956
  call void @op_iter_init(%struct.ssa_operand_iterator_d* %0, %union.gimple_statement_d* %1, i32 %2), !dbg !8957
  %3 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8958
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %3, i32 0, i32 1, !dbg !8959
  store i32 1, i32* %iter_type, align 4, !dbg !8960
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8961
  %call = call %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %4), !dbg !8962
  ret %union.tree_node* %call, !dbg !8963
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !8964 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !8969, metadata !DIExpression()), !dbg !8970
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8971
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 0, !dbg !8972
  %1 = load i8, i8* %done, align 8, !dbg !8972
  ret i8 %1, !dbg !8973
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !8974 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %val = alloca %union.tree_node*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !8977, metadata !DIExpression()), !dbg !8978
  call void @llvm.dbg.declare(metadata %union.tree_node** %val, metadata !8979, metadata !DIExpression()), !dbg !8980
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8981
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 3, !dbg !8983
  %1 = load %struct.use_optype_d*, %struct.use_optype_d** %uses, align 8, !dbg !8983
  %tobool = icmp ne %struct.use_optype_d* %1, null, !dbg !8981
  br i1 %tobool, label %if.then, label %if.end, !dbg !8984

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8985
  %uses1 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 3, !dbg !8985
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %uses1, align 8, !dbg !8985
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %3, i32 0, i32 1, !dbg !8985
  %call = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use_ptr), !dbg !8985
  store %union.tree_node* %call, %union.tree_node** %val, align 8, !dbg !8987
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8988
  %uses2 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %4, i32 0, i32 3, !dbg !8989
  %5 = load %struct.use_optype_d*, %struct.use_optype_d** %uses2, align 8, !dbg !8989
  %next = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %5, i32 0, i32 0, !dbg !8990
  %6 = load %struct.use_optype_d*, %struct.use_optype_d** %next, align 8, !dbg !8990
  %7 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8991
  %uses3 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %7, i32 0, i32 3, !dbg !8992
  store %struct.use_optype_d* %6, %struct.use_optype_d** %uses3, align 8, !dbg !8993
  %8 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !8994
  store %union.tree_node* %8, %union.tree_node** %retval, align 8, !dbg !8995
  br label %return, !dbg !8995

if.end:                                           ; preds = %entry
  %9 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8996
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %9, i32 0, i32 2, !dbg !8998
  %10 = load %struct.def_optype_d*, %struct.def_optype_d** %defs, align 8, !dbg !8998
  %tobool4 = icmp ne %struct.def_optype_d* %10, null, !dbg !8996
  br i1 %tobool4, label %if.then5, label %if.end11, !dbg !8999

if.then5:                                         ; preds = %if.end
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !9000
  %defs6 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 2, !dbg !9000
  %12 = load %struct.def_optype_d*, %struct.def_optype_d** %defs6, align 8, !dbg !9000
  %def_ptr = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %12, i32 0, i32 1, !dbg !9000
  %13 = load %union.tree_node**, %union.tree_node*** %def_ptr, align 8, !dbg !9000
  %call7 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %13), !dbg !9000
  store %union.tree_node* %call7, %union.tree_node** %val, align 8, !dbg !9002
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !9003
  %defs8 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %14, i32 0, i32 2, !dbg !9004
  %15 = load %struct.def_optype_d*, %struct.def_optype_d** %defs8, align 8, !dbg !9004
  %next9 = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %15, i32 0, i32 0, !dbg !9005
  %16 = load %struct.def_optype_d*, %struct.def_optype_d** %next9, align 8, !dbg !9005
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !9006
  %defs10 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 2, !dbg !9007
  store %struct.def_optype_d* %16, %struct.def_optype_d** %defs10, align 8, !dbg !9008
  %18 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !9009
  store %union.tree_node* %18, %union.tree_node** %retval, align 8, !dbg !9010
  br label %return, !dbg !9010

if.end11:                                         ; preds = %if.end
  %19 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !9011
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %19, i32 0, i32 0, !dbg !9012
  store i8 1, i8* %done, align 8, !dbg !9013
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9014
  br label %return, !dbg !9014

return:                                           ; preds = %if.end11, %if.then5, %if.then
  %20 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !9015
  ret %union.tree_node* %20, !dbg !9015
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @count_ptr_derefs(%union.tree_node** %tp, i32* %walk_subtrees, i8* %data) #0 !dbg !9016 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %tp.addr = alloca %union.tree_node**, align 8
  %walk_subtrees.addr = alloca i32*, align 8
  %data.addr = alloca i8*, align 8
  %wi_p = alloca %struct.walk_stmt_info*, align 8
  %count_p = alloca %struct.count_ptr_d*, align 8
  store %union.tree_node** %tp, %union.tree_node*** %tp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %tp.addr, metadata !9017, metadata !DIExpression()), !dbg !9018
  store i32* %walk_subtrees, i32** %walk_subtrees.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %walk_subtrees.addr, metadata !9019, metadata !DIExpression()), !dbg !9020
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !9021, metadata !DIExpression()), !dbg !9022
  call void @llvm.dbg.declare(metadata %struct.walk_stmt_info** %wi_p, metadata !9023, metadata !DIExpression()), !dbg !9024
  %0 = load i8*, i8** %data.addr, align 8, !dbg !9025
  %1 = bitcast i8* %0 to %struct.walk_stmt_info*, !dbg !9026
  store %struct.walk_stmt_info* %1, %struct.walk_stmt_info** %wi_p, align 8, !dbg !9024
  call void @llvm.dbg.declare(metadata %struct.count_ptr_d** %count_p, metadata !9027, metadata !DIExpression()), !dbg !9028
  %2 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi_p, align 8, !dbg !9029
  %info = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %2, i32 0, i32 1, !dbg !9030
  %3 = load i8*, i8** %info, align 8, !dbg !9030
  %4 = bitcast i8* %3 to %struct.count_ptr_d*, !dbg !9031
  store %struct.count_ptr_d* %4, %struct.count_ptr_d** %count_p, align 8, !dbg !9028
  %5 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9032
  %6 = load %union.tree_node*, %union.tree_node** %5, align 8, !dbg !9032
  %base = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !9032
  %7 = bitcast %struct.tree_base* %base to i64*, !dbg !9032
  %bf.load = load i64, i64* %7, align 8, !dbg !9032
  %bf.clear = and i64 %bf.load, 65535, !dbg !9032
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9032
  %cmp = icmp eq i32 %bf.cast, 121, !dbg !9034
  br i1 %cmp, label %if.then, label %if.end, !dbg !9035

if.then:                                          ; preds = %entry
  %8 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !9036
  store i32 0, i32* %8, align 4, !dbg !9038
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9039
  br label %return, !dbg !9039

if.end:                                           ; preds = %entry
  %9 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9040
  %10 = load %union.tree_node*, %union.tree_node** %9, align 8, !dbg !9040
  %base1 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !9040
  %11 = bitcast %struct.tree_base* %base1 to i64*, !dbg !9040
  %bf.load2 = load i64, i64* %11, align 8, !dbg !9040
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !9040
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !9040
  %cmp5 = icmp eq i32 %bf.cast4, 47, !dbg !9040
  br i1 %cmp5, label %land.lhs.true, label %lor.lhs.false, !dbg !9040

lor.lhs.false:                                    ; preds = %if.end
  %12 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9040
  %13 = load %union.tree_node*, %union.tree_node** %12, align 8, !dbg !9040
  %base6 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !9040
  %14 = bitcast %struct.tree_base* %base6 to i64*, !dbg !9040
  %bf.load7 = load i64, i64* %14, align 8, !dbg !9040
  %bf.clear8 = and i64 %bf.load7, 65535, !dbg !9040
  %bf.cast9 = trunc i64 %bf.clear8 to i32, !dbg !9040
  %cmp10 = icmp eq i32 %bf.cast9, 48, !dbg !9040
  br i1 %cmp10, label %land.lhs.true, label %lor.lhs.false11, !dbg !9040

lor.lhs.false11:                                  ; preds = %lor.lhs.false
  %15 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9040
  %16 = load %union.tree_node*, %union.tree_node** %15, align 8, !dbg !9040
  %base12 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !9040
  %17 = bitcast %struct.tree_base* %base12 to i64*, !dbg !9040
  %bf.load13 = load i64, i64* %17, align 8, !dbg !9040
  %bf.clear14 = and i64 %bf.load13, 65535, !dbg !9040
  %bf.cast15 = trunc i64 %bf.clear14 to i32, !dbg !9040
  %cmp16 = icmp eq i32 %bf.cast15, 49, !dbg !9040
  br i1 %cmp16, label %land.lhs.true, label %if.end22, !dbg !9042

land.lhs.true:                                    ; preds = %lor.lhs.false11, %lor.lhs.false, %if.end
  %18 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9043
  %19 = load %union.tree_node*, %union.tree_node** %18, align 8, !dbg !9043
  %exp = bitcast %union.tree_node* %19 to %struct.tree_exp*, !dbg !9043
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !9043
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !9043
  %20 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !9043
  %21 = load %struct.count_ptr_d*, %struct.count_ptr_d** %count_p, align 8, !dbg !9044
  %ptr = getelementptr inbounds %struct.count_ptr_d, %struct.count_ptr_d* %21, i32 0, i32 0, !dbg !9045
  %22 = load %union.tree_node*, %union.tree_node** %ptr, align 8, !dbg !9045
  %cmp17 = icmp eq %union.tree_node* %20, %22, !dbg !9046
  br i1 %cmp17, label %if.then18, label %if.end22, !dbg !9047

if.then18:                                        ; preds = %land.lhs.true
  %23 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi_p, align 8, !dbg !9048
  %is_lhs = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %23, i32 0, i32 4, !dbg !9051
  %24 = load i8, i8* %is_lhs, align 1, !dbg !9051
  %tobool = icmp ne i8 %24, 0, !dbg !9048
  br i1 %tobool, label %if.then19, label %if.else, !dbg !9052

if.then19:                                        ; preds = %if.then18
  %25 = load %struct.count_ptr_d*, %struct.count_ptr_d** %count_p, align 8, !dbg !9053
  %num_stores = getelementptr inbounds %struct.count_ptr_d, %struct.count_ptr_d* %25, i32 0, i32 1, !dbg !9054
  %26 = load i32, i32* %num_stores, align 8, !dbg !9055
  %inc = add i32 %26, 1, !dbg !9055
  store i32 %inc, i32* %num_stores, align 8, !dbg !9055
  br label %if.end21, !dbg !9053

if.else:                                          ; preds = %if.then18
  %27 = load %struct.count_ptr_d*, %struct.count_ptr_d** %count_p, align 8, !dbg !9056
  %num_loads = getelementptr inbounds %struct.count_ptr_d, %struct.count_ptr_d* %27, i32 0, i32 2, !dbg !9057
  %28 = load i32, i32* %num_loads, align 4, !dbg !9058
  %inc20 = add i32 %28, 1, !dbg !9058
  store i32 %inc20, i32* %num_loads, align 4, !dbg !9058
  br label %if.end21

if.end21:                                         ; preds = %if.else, %if.then19
  br label %if.end22, !dbg !9059

if.end22:                                         ; preds = %if.end21, %land.lhs.true, %lor.lhs.false11
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9060
  br label %return, !dbg !9060

return:                                           ; preds = %if.end22, %if.then
  %29 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !9061
  ret %union.tree_node* %29, !dbg !9061
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @walk_stmt_load_store_addr_ops(%union.gimple_statement_d* %stmt, i8* %data, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %visit_load, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %visit_store, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %visit_addr) #0 !dbg !9062 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %data.addr = alloca i8*, align 8
  %visit_load.addr = alloca i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)*, align 8
  %visit_store.addr = alloca i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)*, align 8
  %visit_addr.addr = alloca i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)*, align 8
  %ret = alloca i8, align 1
  %i = alloca i32, align 4
  %lhs = alloca %union.tree_node*, align 8
  %rhs = alloca %union.tree_node*, align 8
  %lhs180 = alloca %union.tree_node*, align 8
  %rhs204 = alloca %union.tree_node*, align 8
  %noutputs = alloca i32, align 4
  %constraint = alloca i8*, align 8
  %oconstraints = alloca i8**, align 8
  %allows_mem = alloca i8, align 1
  %allows_reg = alloca i8, align 1
  %is_inout = alloca i8, align 1
  %link = alloca %union.tree_node*, align 8
  %op = alloca %union.tree_node*, align 8
  %link350 = alloca %union.tree_node*, align 8
  %op352 = alloca %union.tree_node*, align 8
  %op422 = alloca %union.tree_node*, align 8
  %op470 = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !9068, metadata !DIExpression()), !dbg !9069
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !9070, metadata !DIExpression()), !dbg !9071
  store i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %visit_load, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)** %visit_load.addr, align 8
  call void @llvm.dbg.declare(metadata i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)** %visit_load.addr, metadata !9072, metadata !DIExpression()), !dbg !9073
  store i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %visit_store, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)** %visit_store.addr, align 8
  call void @llvm.dbg.declare(metadata i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)** %visit_store.addr, metadata !9074, metadata !DIExpression()), !dbg !9075
  store i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %visit_addr, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)** %visit_addr.addr, align 8
  call void @llvm.dbg.declare(metadata i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)** %visit_addr.addr, metadata !9076, metadata !DIExpression()), !dbg !9077
  call void @llvm.dbg.declare(metadata i8* %ret, metadata !9078, metadata !DIExpression()), !dbg !9079
  store i8 0, i8* %ret, align 1, !dbg !9079
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9080, metadata !DIExpression()), !dbg !9081
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9082
  %call = call zeroext i8 @gimple_assign_single_p(%union.gimple_statement_d* %0), !dbg !9084
  %tobool = icmp ne i8 %call, 0, !dbg !9084
  br i1 %tobool, label %if.then, label %if.else140, !dbg !9085

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !9086, metadata !DIExpression()), !dbg !9088
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs, metadata !9089, metadata !DIExpression()), !dbg !9090
  %1 = load i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)*, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)** %visit_store.addr, align 8, !dbg !9091
  %tobool1 = icmp ne i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %1, null, !dbg !9091
  br i1 %tobool1, label %if.then2, label %if.end10, !dbg !9093

if.then2:                                         ; preds = %if.then
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9094
  %call3 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %2), !dbg !9096
  %call4 = call %union.tree_node* @get_base_loadstore(%union.tree_node* %call3), !dbg !9097
  store %union.tree_node* %call4, %union.tree_node** %lhs, align 8, !dbg !9098
  %3 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !9099
  %tobool5 = icmp ne %union.tree_node* %3, null, !dbg !9099
  br i1 %tobool5, label %if.then6, label %if.end, !dbg !9101

if.then6:                                         ; preds = %if.then2
  %4 = load i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)*, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)** %visit_store.addr, align 8, !dbg !9102
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9103
  %6 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !9104
  %7 = load i8*, i8** %data.addr, align 8, !dbg !9105
  %call7 = call zeroext i8 %4(%union.gimple_statement_d* %5, %union.tree_node* %6, i8* %7), !dbg !9102
  %conv = zext i8 %call7 to i32, !dbg !9102
  %8 = load i8, i8* %ret, align 1, !dbg !9106
  %conv8 = zext i8 %8 to i32, !dbg !9106
  %or = or i32 %conv8, %conv, !dbg !9106
  %conv9 = trunc i32 %or to i8, !dbg !9106
  store i8 %conv9, i8* %ret, align 1, !dbg !9106
  br label %if.end, !dbg !9107

if.end:                                           ; preds = %if.then6, %if.then2
  br label %if.end10, !dbg !9108

if.end10:                                         ; preds = %if.end, %if.then
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9109
  %call11 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %9), !dbg !9110
  store %union.tree_node* %call11, %union.tree_node** %rhs, align 8, !dbg !9111
  br label %while.cond, !dbg !9112

while.cond:                                       ; preds = %while.body, %if.end10
  %10 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !9113
  %call12 = call zeroext i8 @handled_component_p(%union.tree_node* %10), !dbg !9114
  %tobool13 = icmp ne i8 %call12, 0, !dbg !9112
  br i1 %tobool13, label %while.body, label %while.end, !dbg !9112

while.body:                                       ; preds = %while.cond
  %11 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !9115
  %exp = bitcast %union.tree_node* %11 to %struct.tree_exp*, !dbg !9115
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !9115
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !9115
  %12 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !9115
  store %union.tree_node* %12, %union.tree_node** %rhs, align 8, !dbg !9116
  br label %while.cond, !dbg !9112, !llvm.loop !9117

while.end:                                        ; preds = %while.cond
  %13 = load i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)*, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)** %visit_addr.addr, align 8, !dbg !9118
  %tobool14 = icmp ne i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %13, null, !dbg !9118
  br i1 %tobool14, label %if.then15, label %if.end127, !dbg !9120

if.then15:                                        ; preds = %while.end
  %14 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !9121
  %base = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !9121
  %15 = bitcast %struct.tree_base* %base to i64*, !dbg !9121
  %bf.load = load i64, i64* %15, align 8, !dbg !9121
  %bf.clear = and i64 %bf.load, 65535, !dbg !9121
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9121
  %cmp = icmp eq i32 %bf.cast, 121, !dbg !9124
  br i1 %cmp, label %if.then17, label %if.else, !dbg !9125

if.then17:                                        ; preds = %if.then15
  %16 = load i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)*, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)** %visit_addr.addr, align 8, !dbg !9126
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9127
  %18 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !9128
  %exp18 = bitcast %union.tree_node* %18 to %struct.tree_exp*, !dbg !9128
  %operands19 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp18, i32 0, i32 3, !dbg !9128
  %arrayidx20 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands19, i64 0, i64 0, !dbg !9128
  %19 = load %union.tree_node*, %union.tree_node** %arrayidx20, align 8, !dbg !9128
  %20 = load i8*, i8** %data.addr, align 8, !dbg !9129
  %call21 = call zeroext i8 %16(%union.gimple_statement_d* %17, %union.tree_node* %19, i8* %20), !dbg !9126
  %conv22 = zext i8 %call21 to i32, !dbg !9126
  %21 = load i8, i8* %ret, align 1, !dbg !9130
  %conv23 = zext i8 %21 to i32, !dbg !9130
  %or24 = or i32 %conv23, %conv22, !dbg !9130
  %conv25 = trunc i32 %or24 to i8, !dbg !9130
  store i8 %conv25, i8* %ret, align 1, !dbg !9130
  br label %if.end90, !dbg !9131

if.else:                                          ; preds = %if.then15
  %22 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !9132
  %base26 = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !9132
  %23 = bitcast %struct.tree_base* %base26 to i64*, !dbg !9132
  %bf.load27 = load i64, i64* %23, align 8, !dbg !9132
  %bf.clear28 = and i64 %bf.load27, 65535, !dbg !9132
  %bf.cast29 = trunc i64 %bf.clear28 to i32, !dbg !9132
  %cmp30 = icmp eq i32 %bf.cast29, 152, !dbg !9134
  br i1 %cmp30, label %land.lhs.true, label %if.else59, !dbg !9135

land.lhs.true:                                    ; preds = %if.else
  %24 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !9136
  %exp32 = bitcast %union.tree_node* %24 to %struct.tree_exp*, !dbg !9136
  %operands33 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp32, i32 0, i32 3, !dbg !9136
  %arrayidx34 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands33, i64 0, i64 1, !dbg !9136
  %25 = load %union.tree_node*, %union.tree_node** %arrayidx34, align 8, !dbg !9136
  %cmp35 = icmp ne %union.tree_node* %25, null, !dbg !9137
  br i1 %cmp35, label %land.lhs.true37, label %if.else59, !dbg !9138

land.lhs.true37:                                  ; preds = %land.lhs.true
  %26 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !9139
  %exp38 = bitcast %union.tree_node* %26 to %struct.tree_exp*, !dbg !9139
  %operands39 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp38, i32 0, i32 3, !dbg !9139
  %arrayidx40 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands39, i64 0, i64 1, !dbg !9139
  %27 = load %union.tree_node*, %union.tree_node** %arrayidx40, align 8, !dbg !9139
  %base41 = bitcast %union.tree_node* %27 to %struct.tree_base*, !dbg !9139
  %28 = bitcast %struct.tree_base* %base41 to i64*, !dbg !9139
  %bf.load42 = load i64, i64* %28, align 8, !dbg !9139
  %bf.clear43 = and i64 %bf.load42, 65535, !dbg !9139
  %bf.cast44 = trunc i64 %bf.clear43 to i32, !dbg !9139
  %cmp45 = icmp eq i32 %bf.cast44, 121, !dbg !9140
  br i1 %cmp45, label %if.then47, label %if.else59, !dbg !9141

if.then47:                                        ; preds = %land.lhs.true37
  %29 = load i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)*, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)** %visit_addr.addr, align 8, !dbg !9142
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9143
  %31 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !9144
  %exp48 = bitcast %union.tree_node* %31 to %struct.tree_exp*, !dbg !9144
  %operands49 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp48, i32 0, i32 3, !dbg !9144
  %arrayidx50 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands49, i64 0, i64 1, !dbg !9144
  %32 = load %union.tree_node*, %union.tree_node** %arrayidx50, align 8, !dbg !9144
  %exp51 = bitcast %union.tree_node* %32 to %struct.tree_exp*, !dbg !9144
  %operands52 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp51, i32 0, i32 3, !dbg !9144
  %arrayidx53 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands52, i64 0, i64 0, !dbg !9144
  %33 = load %union.tree_node*, %union.tree_node** %arrayidx53, align 8, !dbg !9144
  %34 = load i8*, i8** %data.addr, align 8, !dbg !9145
  %call54 = call zeroext i8 %29(%union.gimple_statement_d* %30, %union.tree_node* %33, i8* %34), !dbg !9142
  %conv55 = zext i8 %call54 to i32, !dbg !9142
  %35 = load i8, i8* %ret, align 1, !dbg !9146
  %conv56 = zext i8 %35 to i32, !dbg !9146
  %or57 = or i32 %conv56, %conv55, !dbg !9146
  %conv58 = trunc i32 %or57 to i8, !dbg !9146
  store i8 %conv58, i8* %ret, align 1, !dbg !9146
  br label %if.end89, !dbg !9147

if.else59:                                        ; preds = %land.lhs.true37, %land.lhs.true, %if.else
  %36 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !9148
  %base60 = bitcast %union.tree_node* %36 to %struct.tree_base*, !dbg !9148
  %37 = bitcast %struct.tree_base* %base60 to i64*, !dbg !9148
  %bf.load61 = load i64, i64* %37, align 8, !dbg !9148
  %bf.clear62 = and i64 %bf.load61, 65535, !dbg !9148
  %bf.cast63 = trunc i64 %bf.clear62 to i32, !dbg !9148
  %cmp64 = icmp eq i32 %bf.cast63, 50, !dbg !9150
  br i1 %cmp64, label %land.lhs.true66, label %if.end88, !dbg !9151

land.lhs.true66:                                  ; preds = %if.else59
  %38 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !9152
  %exp67 = bitcast %union.tree_node* %38 to %struct.tree_exp*, !dbg !9152
  %operands68 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp67, i32 0, i32 3, !dbg !9152
  %arrayidx69 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands68, i64 0, i64 1, !dbg !9152
  %39 = load %union.tree_node*, %union.tree_node** %arrayidx69, align 8, !dbg !9152
  %base70 = bitcast %union.tree_node* %39 to %struct.tree_base*, !dbg !9152
  %40 = bitcast %struct.tree_base* %base70 to i64*, !dbg !9152
  %bf.load71 = load i64, i64* %40, align 8, !dbg !9152
  %bf.clear72 = and i64 %bf.load71, 65535, !dbg !9152
  %bf.cast73 = trunc i64 %bf.clear72 to i32, !dbg !9152
  %cmp74 = icmp eq i32 %bf.cast73, 121, !dbg !9153
  br i1 %cmp74, label %if.then76, label %if.end88, !dbg !9154

if.then76:                                        ; preds = %land.lhs.true66
  %41 = load i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)*, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)** %visit_addr.addr, align 8, !dbg !9155
  %42 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9156
  %43 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !9157
  %exp77 = bitcast %union.tree_node* %43 to %struct.tree_exp*, !dbg !9157
  %operands78 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp77, i32 0, i32 3, !dbg !9157
  %arrayidx79 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands78, i64 0, i64 1, !dbg !9157
  %44 = load %union.tree_node*, %union.tree_node** %arrayidx79, align 8, !dbg !9157
  %exp80 = bitcast %union.tree_node* %44 to %struct.tree_exp*, !dbg !9157
  %operands81 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp80, i32 0, i32 3, !dbg !9157
  %arrayidx82 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands81, i64 0, i64 0, !dbg !9157
  %45 = load %union.tree_node*, %union.tree_node** %arrayidx82, align 8, !dbg !9157
  %46 = load i8*, i8** %data.addr, align 8, !dbg !9158
  %call83 = call zeroext i8 %41(%union.gimple_statement_d* %42, %union.tree_node* %45, i8* %46), !dbg !9155
  %conv84 = zext i8 %call83 to i32, !dbg !9155
  %47 = load i8, i8* %ret, align 1, !dbg !9159
  %conv85 = zext i8 %47 to i32, !dbg !9159
  %or86 = or i32 %conv85, %conv84, !dbg !9159
  %conv87 = trunc i32 %or86 to i8, !dbg !9159
  store i8 %conv87, i8* %ret, align 1, !dbg !9159
  br label %if.end88, !dbg !9160

if.end88:                                         ; preds = %if.then76, %land.lhs.true66, %if.else59
  br label %if.end89

if.end89:                                         ; preds = %if.end88, %if.then47
  br label %if.end90

if.end90:                                         ; preds = %if.end89, %if.then17
  %48 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9161
  %call91 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %48), !dbg !9162
  store %union.tree_node* %call91, %union.tree_node** %lhs, align 8, !dbg !9163
  %49 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !9164
  %base92 = bitcast %union.tree_node* %49 to %struct.tree_base*, !dbg !9164
  %50 = bitcast %struct.tree_base* %base92 to i64*, !dbg !9164
  %bf.load93 = load i64, i64* %50, align 8, !dbg !9164
  %bf.clear94 = and i64 %bf.load93, 65535, !dbg !9164
  %bf.cast95 = trunc i64 %bf.clear94 to i32, !dbg !9164
  %cmp96 = icmp eq i32 %bf.cast95, 152, !dbg !9166
  br i1 %cmp96, label %land.lhs.true98, label %if.end126, !dbg !9167

land.lhs.true98:                                  ; preds = %if.end90
  %51 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !9168
  %exp99 = bitcast %union.tree_node* %51 to %struct.tree_exp*, !dbg !9168
  %operands100 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp99, i32 0, i32 3, !dbg !9168
  %arrayidx101 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands100, i64 0, i64 1, !dbg !9168
  %52 = load %union.tree_node*, %union.tree_node** %arrayidx101, align 8, !dbg !9168
  %cmp102 = icmp ne %union.tree_node* %52, null, !dbg !9169
  br i1 %cmp102, label %land.lhs.true104, label %if.end126, !dbg !9170

land.lhs.true104:                                 ; preds = %land.lhs.true98
  %53 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !9171
  %exp105 = bitcast %union.tree_node* %53 to %struct.tree_exp*, !dbg !9171
  %operands106 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp105, i32 0, i32 3, !dbg !9171
  %arrayidx107 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands106, i64 0, i64 1, !dbg !9171
  %54 = load %union.tree_node*, %union.tree_node** %arrayidx107, align 8, !dbg !9171
  %base108 = bitcast %union.tree_node* %54 to %struct.tree_base*, !dbg !9171
  %55 = bitcast %struct.tree_base* %base108 to i64*, !dbg !9171
  %bf.load109 = load i64, i64* %55, align 8, !dbg !9171
  %bf.clear110 = and i64 %bf.load109, 65535, !dbg !9171
  %bf.cast111 = trunc i64 %bf.clear110 to i32, !dbg !9171
  %cmp112 = icmp eq i32 %bf.cast111, 121, !dbg !9172
  br i1 %cmp112, label %if.then114, label %if.end126, !dbg !9173

if.then114:                                       ; preds = %land.lhs.true104
  %56 = load i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)*, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)** %visit_addr.addr, align 8, !dbg !9174
  %57 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9175
  %58 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !9176
  %exp115 = bitcast %union.tree_node* %58 to %struct.tree_exp*, !dbg !9176
  %operands116 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp115, i32 0, i32 3, !dbg !9176
  %arrayidx117 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands116, i64 0, i64 1, !dbg !9176
  %59 = load %union.tree_node*, %union.tree_node** %arrayidx117, align 8, !dbg !9176
  %exp118 = bitcast %union.tree_node* %59 to %struct.tree_exp*, !dbg !9176
  %operands119 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp118, i32 0, i32 3, !dbg !9176
  %arrayidx120 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands119, i64 0, i64 0, !dbg !9176
  %60 = load %union.tree_node*, %union.tree_node** %arrayidx120, align 8, !dbg !9176
  %61 = load i8*, i8** %data.addr, align 8, !dbg !9177
  %call121 = call zeroext i8 %56(%union.gimple_statement_d* %57, %union.tree_node* %60, i8* %61), !dbg !9174
  %conv122 = zext i8 %call121 to i32, !dbg !9174
  %62 = load i8, i8* %ret, align 1, !dbg !9178
  %conv123 = zext i8 %62 to i32, !dbg !9178
  %or124 = or i32 %conv123, %conv122, !dbg !9178
  %conv125 = trunc i32 %or124 to i8, !dbg !9178
  store i8 %conv125, i8* %ret, align 1, !dbg !9178
  br label %if.end126, !dbg !9179

if.end126:                                        ; preds = %if.then114, %land.lhs.true104, %land.lhs.true98, %if.end90
  br label %if.end127, !dbg !9180

if.end127:                                        ; preds = %if.end126, %while.end
  %63 = load i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)*, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)** %visit_load.addr, align 8, !dbg !9181
  %tobool128 = icmp ne i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %63, null, !dbg !9181
  br i1 %tobool128, label %if.then129, label %if.end139, !dbg !9183

if.then129:                                       ; preds = %if.end127
  %64 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !9184
  %call130 = call %union.tree_node* @get_base_loadstore(%union.tree_node* %64), !dbg !9186
  store %union.tree_node* %call130, %union.tree_node** %rhs, align 8, !dbg !9187
  %65 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !9188
  %tobool131 = icmp ne %union.tree_node* %65, null, !dbg !9188
  br i1 %tobool131, label %if.then132, label %if.end138, !dbg !9190

if.then132:                                       ; preds = %if.then129
  %66 = load i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)*, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)** %visit_load.addr, align 8, !dbg !9191
  %67 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9192
  %68 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !9193
  %69 = load i8*, i8** %data.addr, align 8, !dbg !9194
  %call133 = call zeroext i8 %66(%union.gimple_statement_d* %67, %union.tree_node* %68, i8* %69), !dbg !9191
  %conv134 = zext i8 %call133 to i32, !dbg !9191
  %70 = load i8, i8* %ret, align 1, !dbg !9195
  %conv135 = zext i8 %70 to i32, !dbg !9195
  %or136 = or i32 %conv135, %conv134, !dbg !9195
  %conv137 = trunc i32 %or136 to i8, !dbg !9195
  store i8 %conv137, i8* %ret, align 1, !dbg !9195
  br label %if.end138, !dbg !9196

if.end138:                                        ; preds = %if.then132, %if.then129
  br label %if.end139, !dbg !9197

if.end139:                                        ; preds = %if.end138, %if.end127
  br label %if.end497, !dbg !9198

if.else140:                                       ; preds = %entry
  %71 = load i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)*, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)** %visit_addr.addr, align 8, !dbg !9199
  %tobool141 = icmp ne i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %71, null, !dbg !9199
  br i1 %tobool141, label %land.lhs.true142, label %if.else174, !dbg !9201

land.lhs.true142:                                 ; preds = %if.else140
  %72 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9202
  %call143 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %72), !dbg !9203
  %conv144 = zext i8 %call143 to i32, !dbg !9203
  %tobool145 = icmp ne i32 %conv144, 0, !dbg !9203
  br i1 %tobool145, label %if.then149, label %lor.lhs.false, !dbg !9204

lor.lhs.false:                                    ; preds = %land.lhs.true142
  %73 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9205
  %call146 = call i32 @gimple_code(%union.gimple_statement_d* %73), !dbg !9206
  %cmp147 = icmp eq i32 %call146, 1, !dbg !9207
  br i1 %cmp147, label %if.then149, label %if.else174, !dbg !9208

if.then149:                                       ; preds = %lor.lhs.false, %land.lhs.true142
  store i32 0, i32* %i, align 4, !dbg !9209
  br label %for.cond, !dbg !9212

for.cond:                                         ; preds = %for.inc, %if.then149
  %74 = load i32, i32* %i, align 4, !dbg !9213
  %75 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9215
  %call150 = call i32 @gimple_num_ops(%union.gimple_statement_d* %75), !dbg !9216
  %cmp151 = icmp ult i32 %74, %call150, !dbg !9217
  br i1 %cmp151, label %for.body, label %for.end, !dbg !9218

for.body:                                         ; preds = %for.cond
  %76 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9219
  %77 = load i32, i32* %i, align 4, !dbg !9221
  %call153 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %76, i32 %77), !dbg !9222
  %tobool154 = icmp ne %union.tree_node* %call153, null, !dbg !9222
  br i1 %tobool154, label %land.lhs.true155, label %if.end173, !dbg !9223

land.lhs.true155:                                 ; preds = %for.body
  %78 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9224
  %79 = load i32, i32* %i, align 4, !dbg !9224
  %call156 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %78, i32 %79), !dbg !9224
  %base157 = bitcast %union.tree_node* %call156 to %struct.tree_base*, !dbg !9224
  %80 = bitcast %struct.tree_base* %base157 to i64*, !dbg !9224
  %bf.load158 = load i64, i64* %80, align 8, !dbg !9224
  %bf.clear159 = and i64 %bf.load158, 65535, !dbg !9224
  %bf.cast160 = trunc i64 %bf.clear159 to i32, !dbg !9224
  %cmp161 = icmp eq i32 %bf.cast160, 121, !dbg !9225
  br i1 %cmp161, label %if.then163, label %if.end173, !dbg !9226

if.then163:                                       ; preds = %land.lhs.true155
  %81 = load i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)*, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)** %visit_addr.addr, align 8, !dbg !9227
  %82 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9228
  %83 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9229
  %84 = load i32, i32* %i, align 4, !dbg !9229
  %call164 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %83, i32 %84), !dbg !9229
  %exp165 = bitcast %union.tree_node* %call164 to %struct.tree_exp*, !dbg !9229
  %operands166 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp165, i32 0, i32 3, !dbg !9229
  %arrayidx167 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands166, i64 0, i64 0, !dbg !9229
  %85 = load %union.tree_node*, %union.tree_node** %arrayidx167, align 8, !dbg !9229
  %86 = load i8*, i8** %data.addr, align 8, !dbg !9230
  %call168 = call zeroext i8 %81(%union.gimple_statement_d* %82, %union.tree_node* %85, i8* %86), !dbg !9227
  %conv169 = zext i8 %call168 to i32, !dbg !9227
  %87 = load i8, i8* %ret, align 1, !dbg !9231
  %conv170 = zext i8 %87 to i32, !dbg !9231
  %or171 = or i32 %conv170, %conv169, !dbg !9231
  %conv172 = trunc i32 %or171 to i8, !dbg !9231
  store i8 %conv172, i8* %ret, align 1, !dbg !9231
  br label %if.end173, !dbg !9232

if.end173:                                        ; preds = %if.then163, %land.lhs.true155, %for.body
  br label %for.inc, !dbg !9233

for.inc:                                          ; preds = %if.end173
  %88 = load i32, i32* %i, align 4, !dbg !9234
  %inc = add i32 %88, 1, !dbg !9234
  store i32 %inc, i32* %i, align 4, !dbg !9234
  br label %for.cond, !dbg !9235, !llvm.loop !9236

for.end:                                          ; preds = %for.cond
  br label %if.end496, !dbg !9238

if.else174:                                       ; preds = %lor.lhs.false, %if.else140
  %89 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9239
  %call175 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %89), !dbg !9241
  %tobool176 = icmp ne i8 %call175, 0, !dbg !9241
  br i1 %tobool176, label %if.then177, label %if.else288, !dbg !9242

if.then177:                                       ; preds = %if.else174
  %90 = load i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)*, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)** %visit_store.addr, align 8, !dbg !9243
  %tobool178 = icmp ne i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %90, null, !dbg !9243
  br i1 %tobool178, label %if.then179, label %if.end194, !dbg !9246

if.then179:                                       ; preds = %if.then177
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs180, metadata !9247, metadata !DIExpression()), !dbg !9249
  %91 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9250
  %call181 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %91), !dbg !9251
  store %union.tree_node* %call181, %union.tree_node** %lhs180, align 8, !dbg !9249
  %92 = load %union.tree_node*, %union.tree_node** %lhs180, align 8, !dbg !9252
  %tobool182 = icmp ne %union.tree_node* %92, null, !dbg !9252
  br i1 %tobool182, label %if.then183, label %if.end193, !dbg !9254

if.then183:                                       ; preds = %if.then179
  %93 = load %union.tree_node*, %union.tree_node** %lhs180, align 8, !dbg !9255
  %call184 = call %union.tree_node* @get_base_loadstore(%union.tree_node* %93), !dbg !9257
  store %union.tree_node* %call184, %union.tree_node** %lhs180, align 8, !dbg !9258
  %94 = load %union.tree_node*, %union.tree_node** %lhs180, align 8, !dbg !9259
  %tobool185 = icmp ne %union.tree_node* %94, null, !dbg !9259
  br i1 %tobool185, label %if.then186, label %if.end192, !dbg !9261

if.then186:                                       ; preds = %if.then183
  %95 = load i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)*, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)** %visit_store.addr, align 8, !dbg !9262
  %96 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9263
  %97 = load %union.tree_node*, %union.tree_node** %lhs180, align 8, !dbg !9264
  %98 = load i8*, i8** %data.addr, align 8, !dbg !9265
  %call187 = call zeroext i8 %95(%union.gimple_statement_d* %96, %union.tree_node* %97, i8* %98), !dbg !9262
  %conv188 = zext i8 %call187 to i32, !dbg !9262
  %99 = load i8, i8* %ret, align 1, !dbg !9266
  %conv189 = zext i8 %99 to i32, !dbg !9266
  %or190 = or i32 %conv189, %conv188, !dbg !9266
  %conv191 = trunc i32 %or190 to i8, !dbg !9266
  store i8 %conv191, i8* %ret, align 1, !dbg !9266
  br label %if.end192, !dbg !9267

if.end192:                                        ; preds = %if.then186, %if.then183
  br label %if.end193, !dbg !9268

if.end193:                                        ; preds = %if.end192, %if.then179
  br label %if.end194, !dbg !9269

if.end194:                                        ; preds = %if.end193, %if.then177
  %100 = load i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)*, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)** %visit_load.addr, align 8, !dbg !9270
  %tobool195 = icmp ne i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %100, null, !dbg !9270
  br i1 %tobool195, label %if.then198, label %lor.lhs.false196, !dbg !9272

lor.lhs.false196:                                 ; preds = %if.end194
  %101 = load i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)*, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)** %visit_addr.addr, align 8, !dbg !9273
  %tobool197 = icmp ne i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %101, null, !dbg !9273
  br i1 %tobool197, label %if.then198, label %if.end240, !dbg !9274

if.then198:                                       ; preds = %lor.lhs.false196, %if.end194
  store i32 0, i32* %i, align 4, !dbg !9275
  br label %for.cond199, !dbg !9277

for.cond199:                                      ; preds = %for.inc237, %if.then198
  %102 = load i32, i32* %i, align 4, !dbg !9278
  %103 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9280
  %call200 = call i32 @gimple_call_num_args(%union.gimple_statement_d* %103), !dbg !9281
  %cmp201 = icmp ult i32 %102, %call200, !dbg !9282
  br i1 %cmp201, label %for.body203, label %for.end239, !dbg !9283

for.body203:                                      ; preds = %for.cond199
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs204, metadata !9284, metadata !DIExpression()), !dbg !9286
  %104 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9287
  %105 = load i32, i32* %i, align 4, !dbg !9288
  %call205 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %104, i32 %105), !dbg !9289
  store %union.tree_node* %call205, %union.tree_node** %rhs204, align 8, !dbg !9286
  %106 = load i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)*, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)** %visit_addr.addr, align 8, !dbg !9290
  %tobool206 = icmp ne i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %106, null, !dbg !9290
  br i1 %tobool206, label %land.lhs.true207, label %if.else223, !dbg !9292

land.lhs.true207:                                 ; preds = %for.body203
  %107 = load %union.tree_node*, %union.tree_node** %rhs204, align 8, !dbg !9293
  %base208 = bitcast %union.tree_node* %107 to %struct.tree_base*, !dbg !9293
  %108 = bitcast %struct.tree_base* %base208 to i64*, !dbg !9293
  %bf.load209 = load i64, i64* %108, align 8, !dbg !9293
  %bf.clear210 = and i64 %bf.load209, 65535, !dbg !9293
  %bf.cast211 = trunc i64 %bf.clear210 to i32, !dbg !9293
  %cmp212 = icmp eq i32 %bf.cast211, 121, !dbg !9294
  br i1 %cmp212, label %if.then214, label %if.else223, !dbg !9295

if.then214:                                       ; preds = %land.lhs.true207
  %109 = load i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)*, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)** %visit_addr.addr, align 8, !dbg !9296
  %110 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9297
  %111 = load %union.tree_node*, %union.tree_node** %rhs204, align 8, !dbg !9298
  %exp215 = bitcast %union.tree_node* %111 to %struct.tree_exp*, !dbg !9298
  %operands216 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp215, i32 0, i32 3, !dbg !9298
  %arrayidx217 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands216, i64 0, i64 0, !dbg !9298
  %112 = load %union.tree_node*, %union.tree_node** %arrayidx217, align 8, !dbg !9298
  %113 = load i8*, i8** %data.addr, align 8, !dbg !9299
  %call218 = call zeroext i8 %109(%union.gimple_statement_d* %110, %union.tree_node* %112, i8* %113), !dbg !9296
  %conv219 = zext i8 %call218 to i32, !dbg !9296
  %114 = load i8, i8* %ret, align 1, !dbg !9300
  %conv220 = zext i8 %114 to i32, !dbg !9300
  %or221 = or i32 %conv220, %conv219, !dbg !9300
  %conv222 = trunc i32 %or221 to i8, !dbg !9300
  store i8 %conv222, i8* %ret, align 1, !dbg !9300
  br label %if.end236, !dbg !9301

if.else223:                                       ; preds = %land.lhs.true207, %for.body203
  %115 = load i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)*, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)** %visit_load.addr, align 8, !dbg !9302
  %tobool224 = icmp ne i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %115, null, !dbg !9302
  br i1 %tobool224, label %if.then225, label %if.end235, !dbg !9304

if.then225:                                       ; preds = %if.else223
  %116 = load %union.tree_node*, %union.tree_node** %rhs204, align 8, !dbg !9305
  %call226 = call %union.tree_node* @get_base_loadstore(%union.tree_node* %116), !dbg !9307
  store %union.tree_node* %call226, %union.tree_node** %rhs204, align 8, !dbg !9308
  %117 = load %union.tree_node*, %union.tree_node** %rhs204, align 8, !dbg !9309
  %tobool227 = icmp ne %union.tree_node* %117, null, !dbg !9309
  br i1 %tobool227, label %if.then228, label %if.end234, !dbg !9311

if.then228:                                       ; preds = %if.then225
  %118 = load i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)*, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)** %visit_load.addr, align 8, !dbg !9312
  %119 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9313
  %120 = load %union.tree_node*, %union.tree_node** %rhs204, align 8, !dbg !9314
  %121 = load i8*, i8** %data.addr, align 8, !dbg !9315
  %call229 = call zeroext i8 %118(%union.gimple_statement_d* %119, %union.tree_node* %120, i8* %121), !dbg !9312
  %conv230 = zext i8 %call229 to i32, !dbg !9312
  %122 = load i8, i8* %ret, align 1, !dbg !9316
  %conv231 = zext i8 %122 to i32, !dbg !9316
  %or232 = or i32 %conv231, %conv230, !dbg !9316
  %conv233 = trunc i32 %or232 to i8, !dbg !9316
  store i8 %conv233, i8* %ret, align 1, !dbg !9316
  br label %if.end234, !dbg !9317

if.end234:                                        ; preds = %if.then228, %if.then225
  br label %if.end235, !dbg !9318

if.end235:                                        ; preds = %if.end234, %if.else223
  br label %if.end236

if.end236:                                        ; preds = %if.end235, %if.then214
  br label %for.inc237, !dbg !9319

for.inc237:                                       ; preds = %if.end236
  %123 = load i32, i32* %i, align 4, !dbg !9320
  %inc238 = add i32 %123, 1, !dbg !9320
  store i32 %inc238, i32* %i, align 4, !dbg !9320
  br label %for.cond199, !dbg !9321, !llvm.loop !9322

for.end239:                                       ; preds = %for.cond199
  br label %if.end240, !dbg !9323

if.end240:                                        ; preds = %for.end239, %lor.lhs.false196
  %124 = load i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)*, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)** %visit_addr.addr, align 8, !dbg !9324
  %tobool241 = icmp ne i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %124, null, !dbg !9324
  br i1 %tobool241, label %land.lhs.true242, label %if.end263, !dbg !9326

land.lhs.true242:                                 ; preds = %if.end240
  %125 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9327
  %call243 = call %union.tree_node* @gimple_call_chain(%union.gimple_statement_d* %125), !dbg !9328
  %tobool244 = icmp ne %union.tree_node* %call243, null, !dbg !9328
  br i1 %tobool244, label %land.lhs.true245, label %if.end263, !dbg !9329

land.lhs.true245:                                 ; preds = %land.lhs.true242
  %126 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9330
  %call246 = call %union.tree_node* @gimple_call_chain(%union.gimple_statement_d* %126), !dbg !9330
  %base247 = bitcast %union.tree_node* %call246 to %struct.tree_base*, !dbg !9330
  %127 = bitcast %struct.tree_base* %base247 to i64*, !dbg !9330
  %bf.load248 = load i64, i64* %127, align 8, !dbg !9330
  %bf.clear249 = and i64 %bf.load248, 65535, !dbg !9330
  %bf.cast250 = trunc i64 %bf.clear249 to i32, !dbg !9330
  %cmp251 = icmp eq i32 %bf.cast250, 121, !dbg !9331
  br i1 %cmp251, label %if.then253, label %if.end263, !dbg !9332

if.then253:                                       ; preds = %land.lhs.true245
  %128 = load i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)*, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)** %visit_addr.addr, align 8, !dbg !9333
  %129 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9334
  %130 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9335
  %call254 = call %union.tree_node* @gimple_call_chain(%union.gimple_statement_d* %130), !dbg !9335
  %exp255 = bitcast %union.tree_node* %call254 to %struct.tree_exp*, !dbg !9335
  %operands256 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp255, i32 0, i32 3, !dbg !9335
  %arrayidx257 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands256, i64 0, i64 0, !dbg !9335
  %131 = load %union.tree_node*, %union.tree_node** %arrayidx257, align 8, !dbg !9335
  %132 = load i8*, i8** %data.addr, align 8, !dbg !9336
  %call258 = call zeroext i8 %128(%union.gimple_statement_d* %129, %union.tree_node* %131, i8* %132), !dbg !9333
  %conv259 = zext i8 %call258 to i32, !dbg !9333
  %133 = load i8, i8* %ret, align 1, !dbg !9337
  %conv260 = zext i8 %133 to i32, !dbg !9337
  %or261 = or i32 %conv260, %conv259, !dbg !9337
  %conv262 = trunc i32 %or261 to i8, !dbg !9337
  store i8 %conv262, i8* %ret, align 1, !dbg !9337
  br label %if.end263, !dbg !9338

if.end263:                                        ; preds = %if.then253, %land.lhs.true245, %land.lhs.true242, %if.end240
  %134 = load i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)*, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)** %visit_addr.addr, align 8, !dbg !9339
  %tobool264 = icmp ne i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %134, null, !dbg !9339
  br i1 %tobool264, label %land.lhs.true265, label %if.end287, !dbg !9341

land.lhs.true265:                                 ; preds = %if.end263
  %135 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9342
  %call266 = call zeroext i8 @gimple_call_return_slot_opt_p(%union.gimple_statement_d* %135), !dbg !9343
  %conv267 = zext i8 %call266 to i32, !dbg !9343
  %tobool268 = icmp ne i32 %conv267, 0, !dbg !9343
  br i1 %tobool268, label %land.lhs.true269, label %if.end287, !dbg !9344

land.lhs.true269:                                 ; preds = %land.lhs.true265
  %136 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9345
  %call270 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %136), !dbg !9346
  %cmp271 = icmp ne %union.tree_node* %call270, null, !dbg !9347
  br i1 %cmp271, label %land.lhs.true273, label %if.end287, !dbg !9348

land.lhs.true273:                                 ; preds = %land.lhs.true269
  %137 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9349
  %call274 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %137), !dbg !9349
  %common = bitcast %union.tree_node* %call274 to %struct.tree_common*, !dbg !9349
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !9349
  %138 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9349
  %base275 = bitcast %union.tree_node* %138 to %struct.tree_base*, !dbg !9349
  %139 = bitcast %struct.tree_base* %base275 to i64*, !dbg !9349
  %bf.load276 = load i64, i64* %139, align 8, !dbg !9349
  %bf.lshr = lshr i64 %bf.load276, 18, !dbg !9349
  %bf.clear277 = and i64 %bf.lshr, 1, !dbg !9349
  %bf.cast278 = trunc i64 %bf.clear277 to i32, !dbg !9349
  %tobool279 = icmp ne i32 %bf.cast278, 0, !dbg !9349
  br i1 %tobool279, label %if.then280, label %if.end287, !dbg !9350

if.then280:                                       ; preds = %land.lhs.true273
  %140 = load i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)*, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)** %visit_addr.addr, align 8, !dbg !9351
  %141 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9352
  %142 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9353
  %call281 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %142), !dbg !9354
  %143 = load i8*, i8** %data.addr, align 8, !dbg !9355
  %call282 = call zeroext i8 %140(%union.gimple_statement_d* %141, %union.tree_node* %call281, i8* %143), !dbg !9351
  %conv283 = zext i8 %call282 to i32, !dbg !9351
  %144 = load i8, i8* %ret, align 1, !dbg !9356
  %conv284 = zext i8 %144 to i32, !dbg !9356
  %or285 = or i32 %conv284, %conv283, !dbg !9356
  %conv286 = trunc i32 %or285 to i8, !dbg !9356
  store i8 %conv286, i8* %ret, align 1, !dbg !9356
  br label %if.end287, !dbg !9357

if.end287:                                        ; preds = %if.then280, %land.lhs.true273, %land.lhs.true269, %land.lhs.true265, %if.end263
  br label %if.end495, !dbg !9358

if.else288:                                       ; preds = %if.else174
  %145 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9359
  %call289 = call i32 @gimple_code(%union.gimple_statement_d* %145), !dbg !9361
  %cmp290 = icmp eq i32 %call289, 7, !dbg !9362
  br i1 %cmp290, label %if.then292, label %if.else417, !dbg !9363

if.then292:                                       ; preds = %if.else288
  call void @llvm.dbg.declare(metadata i32* %noutputs, metadata !9364, metadata !DIExpression()), !dbg !9366
  call void @llvm.dbg.declare(metadata i8** %constraint, metadata !9367, metadata !DIExpression()), !dbg !9368
  call void @llvm.dbg.declare(metadata i8*** %oconstraints, metadata !9369, metadata !DIExpression()), !dbg !9370
  call void @llvm.dbg.declare(metadata i8* %allows_mem, metadata !9371, metadata !DIExpression()), !dbg !9372
  call void @llvm.dbg.declare(metadata i8* %allows_reg, metadata !9373, metadata !DIExpression()), !dbg !9374
  call void @llvm.dbg.declare(metadata i8* %is_inout, metadata !9375, metadata !DIExpression()), !dbg !9376
  %146 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9377
  %call293 = call i32 @gimple_asm_noutputs(%union.gimple_statement_d* %146), !dbg !9378
  store i32 %call293, i32* %noutputs, align 4, !dbg !9379
  %147 = load i32, i32* %noutputs, align 4, !dbg !9380
  %conv294 = zext i32 %147 to i64, !dbg !9380
  %mul = mul i64 8, %conv294, !dbg !9380
  %148 = alloca i8, i64 %mul, align 16, !dbg !9380
  %149 = bitcast i8* %148 to i8**, !dbg !9380
  store i8** %149, i8*** %oconstraints, align 8, !dbg !9381
  %150 = load i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)*, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)** %visit_store.addr, align 8, !dbg !9382
  %tobool295 = icmp ne i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %150, null, !dbg !9382
  br i1 %tobool295, label %if.then298, label %lor.lhs.false296, !dbg !9384

lor.lhs.false296:                                 ; preds = %if.then292
  %151 = load i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)*, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)** %visit_addr.addr, align 8, !dbg !9385
  %tobool297 = icmp ne i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %151, null, !dbg !9385
  br i1 %tobool297, label %if.then298, label %if.end340, !dbg !9386

if.then298:                                       ; preds = %lor.lhs.false296, %if.then292
  store i32 0, i32* %i, align 4, !dbg !9387
  br label %for.cond299, !dbg !9389

for.cond299:                                      ; preds = %for.inc337, %if.then298
  %152 = load i32, i32* %i, align 4, !dbg !9390
  %153 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9392
  %call300 = call i32 @gimple_asm_noutputs(%union.gimple_statement_d* %153), !dbg !9393
  %cmp301 = icmp ult i32 %152, %call300, !dbg !9394
  br i1 %cmp301, label %for.body303, label %for.end339, !dbg !9395

for.body303:                                      ; preds = %for.cond299
  call void @llvm.dbg.declare(metadata %union.tree_node** %link, metadata !9396, metadata !DIExpression()), !dbg !9398
  %154 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9399
  %155 = load i32, i32* %i, align 4, !dbg !9400
  %call304 = call %union.tree_node* @gimple_asm_output_op(%union.gimple_statement_d* %154, i32 %155), !dbg !9401
  store %union.tree_node* %call304, %union.tree_node** %link, align 8, !dbg !9398
  call void @llvm.dbg.declare(metadata %union.tree_node** %op, metadata !9402, metadata !DIExpression()), !dbg !9403
  %156 = load %union.tree_node*, %union.tree_node** %link, align 8, !dbg !9404
  %list = bitcast %union.tree_node* %156 to %struct.tree_list*, !dbg !9404
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !9404
  %157 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !9404
  %call305 = call %union.tree_node* @get_base_loadstore(%union.tree_node* %157), !dbg !9405
  store %union.tree_node* %call305, %union.tree_node** %op, align 8, !dbg !9403
  %158 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !9406
  %tobool306 = icmp ne %union.tree_node* %158, null, !dbg !9406
  br i1 %tobool306, label %land.lhs.true307, label %if.end315, !dbg !9408

land.lhs.true307:                                 ; preds = %for.body303
  %159 = load i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)*, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)** %visit_store.addr, align 8, !dbg !9409
  %tobool308 = icmp ne i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %159, null, !dbg !9409
  br i1 %tobool308, label %if.then309, label %if.end315, !dbg !9410

if.then309:                                       ; preds = %land.lhs.true307
  %160 = load i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)*, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)** %visit_store.addr, align 8, !dbg !9411
  %161 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9412
  %162 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !9413
  %163 = load i8*, i8** %data.addr, align 8, !dbg !9414
  %call310 = call zeroext i8 %160(%union.gimple_statement_d* %161, %union.tree_node* %162, i8* %163), !dbg !9411
  %conv311 = zext i8 %call310 to i32, !dbg !9411
  %164 = load i8, i8* %ret, align 1, !dbg !9415
  %conv312 = zext i8 %164 to i32, !dbg !9415
  %or313 = or i32 %conv312, %conv311, !dbg !9415
  %conv314 = trunc i32 %or313 to i8, !dbg !9415
  store i8 %conv314, i8* %ret, align 1, !dbg !9415
  br label %if.end315, !dbg !9416

if.end315:                                        ; preds = %if.then309, %land.lhs.true307, %for.body303
  %165 = load i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)*, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)** %visit_addr.addr, align 8, !dbg !9417
  %tobool316 = icmp ne i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %165, null, !dbg !9417
  br i1 %tobool316, label %if.then317, label %if.end336, !dbg !9419

if.then317:                                       ; preds = %if.end315
  %166 = load %union.tree_node*, %union.tree_node** %link, align 8, !dbg !9420
  %list318 = bitcast %union.tree_node* %166 to %struct.tree_list*, !dbg !9420
  %purpose = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list318, i32 0, i32 1, !dbg !9420
  %167 = load %union.tree_node*, %union.tree_node** %purpose, align 8, !dbg !9420
  %list319 = bitcast %union.tree_node* %167 to %struct.tree_list*, !dbg !9420
  %value320 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list319, i32 0, i32 2, !dbg !9420
  %168 = load %union.tree_node*, %union.tree_node** %value320, align 8, !dbg !9420
  %string = bitcast %union.tree_node* %168 to %struct.tree_string*, !dbg !9420
  %str = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string, i32 0, i32 2, !dbg !9420
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %str, i64 0, i64 0, !dbg !9420
  store i8* %arraydecay, i8** %constraint, align 8, !dbg !9422
  %169 = load i8*, i8** %constraint, align 8, !dbg !9423
  %170 = load i8**, i8*** %oconstraints, align 8, !dbg !9424
  %171 = load i32, i32* %i, align 4, !dbg !9425
  %idxprom = zext i32 %171 to i64, !dbg !9424
  %arrayidx321 = getelementptr inbounds i8*, i8** %170, i64 %idxprom, !dbg !9424
  store i8* %169, i8** %arrayidx321, align 8, !dbg !9426
  %172 = load i32, i32* %i, align 4, !dbg !9427
  %call322 = call zeroext i8 @parse_output_constraint(i8** %constraint, i32 %172, i32 0, i32 0, i8* %allows_mem, i8* %allows_reg, i8* %is_inout), !dbg !9428
  %173 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !9429
  %tobool323 = icmp ne %union.tree_node* %173, null, !dbg !9429
  br i1 %tobool323, label %land.lhs.true324, label %if.end335, !dbg !9431

land.lhs.true324:                                 ; preds = %if.then317
  %174 = load i8, i8* %allows_reg, align 1, !dbg !9432
  %tobool325 = icmp ne i8 %174, 0, !dbg !9432
  br i1 %tobool325, label %if.end335, label %land.lhs.true326, !dbg !9433

land.lhs.true326:                                 ; preds = %land.lhs.true324
  %175 = load i8, i8* %allows_mem, align 1, !dbg !9434
  %conv327 = zext i8 %175 to i32, !dbg !9434
  %tobool328 = icmp ne i32 %conv327, 0, !dbg !9434
  br i1 %tobool328, label %if.then329, label %if.end335, !dbg !9435

if.then329:                                       ; preds = %land.lhs.true326
  %176 = load i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)*, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)** %visit_addr.addr, align 8, !dbg !9436
  %177 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9437
  %178 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !9438
  %179 = load i8*, i8** %data.addr, align 8, !dbg !9439
  %call330 = call zeroext i8 %176(%union.gimple_statement_d* %177, %union.tree_node* %178, i8* %179), !dbg !9436
  %conv331 = zext i8 %call330 to i32, !dbg !9436
  %180 = load i8, i8* %ret, align 1, !dbg !9440
  %conv332 = zext i8 %180 to i32, !dbg !9440
  %or333 = or i32 %conv332, %conv331, !dbg !9440
  %conv334 = trunc i32 %or333 to i8, !dbg !9440
  store i8 %conv334, i8* %ret, align 1, !dbg !9440
  br label %if.end335, !dbg !9441

if.end335:                                        ; preds = %if.then329, %land.lhs.true326, %land.lhs.true324, %if.then317
  br label %if.end336, !dbg !9442

if.end336:                                        ; preds = %if.end335, %if.end315
  br label %for.inc337, !dbg !9443

for.inc337:                                       ; preds = %if.end336
  %181 = load i32, i32* %i, align 4, !dbg !9444
  %inc338 = add i32 %181, 1, !dbg !9444
  store i32 %inc338, i32* %i, align 4, !dbg !9444
  br label %for.cond299, !dbg !9445, !llvm.loop !9446

for.end339:                                       ; preds = %for.cond299
  br label %if.end340, !dbg !9447

if.end340:                                        ; preds = %for.end339, %lor.lhs.false296
  %182 = load i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)*, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)** %visit_load.addr, align 8, !dbg !9448
  %tobool341 = icmp ne i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %182, null, !dbg !9448
  br i1 %tobool341, label %if.then344, label %lor.lhs.false342, !dbg !9450

lor.lhs.false342:                                 ; preds = %if.end340
  %183 = load i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)*, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)** %visit_addr.addr, align 8, !dbg !9451
  %tobool343 = icmp ne i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %183, null, !dbg !9451
  br i1 %tobool343, label %if.then344, label %if.end416, !dbg !9452

if.then344:                                       ; preds = %lor.lhs.false342, %if.end340
  store i32 0, i32* %i, align 4, !dbg !9453
  br label %for.cond345, !dbg !9455

for.cond345:                                      ; preds = %for.inc413, %if.then344
  %184 = load i32, i32* %i, align 4, !dbg !9456
  %185 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9458
  %call346 = call i32 @gimple_asm_ninputs(%union.gimple_statement_d* %185), !dbg !9459
  %cmp347 = icmp ult i32 %184, %call346, !dbg !9460
  br i1 %cmp347, label %for.body349, label %for.end415, !dbg !9461

for.body349:                                      ; preds = %for.cond345
  call void @llvm.dbg.declare(metadata %union.tree_node** %link350, metadata !9462, metadata !DIExpression()), !dbg !9464
  %186 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9465
  %187 = load i32, i32* %i, align 4, !dbg !9466
  %call351 = call %union.tree_node* @gimple_asm_input_op(%union.gimple_statement_d* %186, i32 %187), !dbg !9467
  store %union.tree_node* %call351, %union.tree_node** %link350, align 8, !dbg !9464
  call void @llvm.dbg.declare(metadata %union.tree_node** %op352, metadata !9468, metadata !DIExpression()), !dbg !9469
  %188 = load %union.tree_node*, %union.tree_node** %link350, align 8, !dbg !9470
  %list353 = bitcast %union.tree_node* %188 to %struct.tree_list*, !dbg !9470
  %value354 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list353, i32 0, i32 2, !dbg !9470
  %189 = load %union.tree_node*, %union.tree_node** %value354, align 8, !dbg !9470
  store %union.tree_node* %189, %union.tree_node** %op352, align 8, !dbg !9469
  %190 = load i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)*, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)** %visit_addr.addr, align 8, !dbg !9471
  %tobool355 = icmp ne i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %190, null, !dbg !9471
  br i1 %tobool355, label %land.lhs.true356, label %if.else372, !dbg !9473

land.lhs.true356:                                 ; preds = %for.body349
  %191 = load %union.tree_node*, %union.tree_node** %op352, align 8, !dbg !9474
  %base357 = bitcast %union.tree_node* %191 to %struct.tree_base*, !dbg !9474
  %192 = bitcast %struct.tree_base* %base357 to i64*, !dbg !9474
  %bf.load358 = load i64, i64* %192, align 8, !dbg !9474
  %bf.clear359 = and i64 %bf.load358, 65535, !dbg !9474
  %bf.cast360 = trunc i64 %bf.clear359 to i32, !dbg !9474
  %cmp361 = icmp eq i32 %bf.cast360, 121, !dbg !9475
  br i1 %cmp361, label %if.then363, label %if.else372, !dbg !9476

if.then363:                                       ; preds = %land.lhs.true356
  %193 = load i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)*, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)** %visit_addr.addr, align 8, !dbg !9477
  %194 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9478
  %195 = load %union.tree_node*, %union.tree_node** %op352, align 8, !dbg !9479
  %exp364 = bitcast %union.tree_node* %195 to %struct.tree_exp*, !dbg !9479
  %operands365 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp364, i32 0, i32 3, !dbg !9479
  %arrayidx366 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands365, i64 0, i64 0, !dbg !9479
  %196 = load %union.tree_node*, %union.tree_node** %arrayidx366, align 8, !dbg !9479
  %197 = load i8*, i8** %data.addr, align 8, !dbg !9480
  %call367 = call zeroext i8 %193(%union.gimple_statement_d* %194, %union.tree_node* %196, i8* %197), !dbg !9477
  %conv368 = zext i8 %call367 to i32, !dbg !9477
  %198 = load i8, i8* %ret, align 1, !dbg !9481
  %conv369 = zext i8 %198 to i32, !dbg !9481
  %or370 = or i32 %conv369, %conv368, !dbg !9481
  %conv371 = trunc i32 %or370 to i8, !dbg !9481
  store i8 %conv371, i8* %ret, align 1, !dbg !9481
  br label %if.end412, !dbg !9482

if.else372:                                       ; preds = %land.lhs.true356, %for.body349
  %199 = load i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)*, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)** %visit_load.addr, align 8, !dbg !9483
  %tobool373 = icmp ne i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %199, null, !dbg !9483
  br i1 %tobool373, label %if.then376, label %lor.lhs.false374, !dbg !9485

lor.lhs.false374:                                 ; preds = %if.else372
  %200 = load i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)*, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)** %visit_addr.addr, align 8, !dbg !9486
  %tobool375 = icmp ne i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %200, null, !dbg !9486
  br i1 %tobool375, label %if.then376, label %if.end411, !dbg !9487

if.then376:                                       ; preds = %lor.lhs.false374, %if.else372
  %201 = load %union.tree_node*, %union.tree_node** %op352, align 8, !dbg !9488
  %call377 = call %union.tree_node* @get_base_loadstore(%union.tree_node* %201), !dbg !9490
  store %union.tree_node* %call377, %union.tree_node** %op352, align 8, !dbg !9491
  %202 = load %union.tree_node*, %union.tree_node** %op352, align 8, !dbg !9492
  %tobool378 = icmp ne %union.tree_node* %202, null, !dbg !9492
  br i1 %tobool378, label %if.then379, label %if.end410, !dbg !9494

if.then379:                                       ; preds = %if.then376
  %203 = load i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)*, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)** %visit_load.addr, align 8, !dbg !9495
  %tobool380 = icmp ne i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %203, null, !dbg !9495
  br i1 %tobool380, label %if.then381, label %if.end387, !dbg !9498

if.then381:                                       ; preds = %if.then379
  %204 = load i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)*, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)** %visit_load.addr, align 8, !dbg !9499
  %205 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9500
  %206 = load %union.tree_node*, %union.tree_node** %op352, align 8, !dbg !9501
  %207 = load i8*, i8** %data.addr, align 8, !dbg !9502
  %call382 = call zeroext i8 %204(%union.gimple_statement_d* %205, %union.tree_node* %206, i8* %207), !dbg !9499
  %conv383 = zext i8 %call382 to i32, !dbg !9499
  %208 = load i8, i8* %ret, align 1, !dbg !9503
  %conv384 = zext i8 %208 to i32, !dbg !9503
  %or385 = or i32 %conv384, %conv383, !dbg !9503
  %conv386 = trunc i32 %or385 to i8, !dbg !9503
  store i8 %conv386, i8* %ret, align 1, !dbg !9503
  br label %if.end387, !dbg !9504

if.end387:                                        ; preds = %if.then381, %if.then379
  %209 = load i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)*, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)** %visit_addr.addr, align 8, !dbg !9505
  %tobool388 = icmp ne i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %209, null, !dbg !9505
  br i1 %tobool388, label %if.then389, label %if.end409, !dbg !9507

if.then389:                                       ; preds = %if.end387
  %210 = load %union.tree_node*, %union.tree_node** %link350, align 8, !dbg !9508
  %list390 = bitcast %union.tree_node* %210 to %struct.tree_list*, !dbg !9508
  %purpose391 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list390, i32 0, i32 1, !dbg !9508
  %211 = load %union.tree_node*, %union.tree_node** %purpose391, align 8, !dbg !9508
  %list392 = bitcast %union.tree_node* %211 to %struct.tree_list*, !dbg !9508
  %value393 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list392, i32 0, i32 2, !dbg !9508
  %212 = load %union.tree_node*, %union.tree_node** %value393, align 8, !dbg !9508
  %string394 = bitcast %union.tree_node* %212 to %struct.tree_string*, !dbg !9508
  %str395 = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string394, i32 0, i32 2, !dbg !9508
  %arraydecay396 = getelementptr inbounds [1 x i8], [1 x i8]* %str395, i64 0, i64 0, !dbg !9508
  store i8* %arraydecay396, i8** %constraint, align 8, !dbg !9510
  %213 = load i32, i32* %noutputs, align 4, !dbg !9511
  %214 = load i8**, i8*** %oconstraints, align 8, !dbg !9512
  %call397 = call zeroext i8 @parse_input_constraint(i8** %constraint, i32 0, i32 0, i32 %213, i32 0, i8** %214, i8* %allows_mem, i8* %allows_reg), !dbg !9513
  %215 = load i8, i8* %allows_reg, align 1, !dbg !9514
  %tobool398 = icmp ne i8 %215, 0, !dbg !9514
  br i1 %tobool398, label %if.end408, label %land.lhs.true399, !dbg !9516

land.lhs.true399:                                 ; preds = %if.then389
  %216 = load i8, i8* %allows_mem, align 1, !dbg !9517
  %conv400 = zext i8 %216 to i32, !dbg !9517
  %tobool401 = icmp ne i32 %conv400, 0, !dbg !9517
  br i1 %tobool401, label %if.then402, label %if.end408, !dbg !9518

if.then402:                                       ; preds = %land.lhs.true399
  %217 = load i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)*, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)** %visit_addr.addr, align 8, !dbg !9519
  %218 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9520
  %219 = load %union.tree_node*, %union.tree_node** %op352, align 8, !dbg !9521
  %220 = load i8*, i8** %data.addr, align 8, !dbg !9522
  %call403 = call zeroext i8 %217(%union.gimple_statement_d* %218, %union.tree_node* %219, i8* %220), !dbg !9519
  %conv404 = zext i8 %call403 to i32, !dbg !9519
  %221 = load i8, i8* %ret, align 1, !dbg !9523
  %conv405 = zext i8 %221 to i32, !dbg !9523
  %or406 = or i32 %conv405, %conv404, !dbg !9523
  %conv407 = trunc i32 %or406 to i8, !dbg !9523
  store i8 %conv407, i8* %ret, align 1, !dbg !9523
  br label %if.end408, !dbg !9524

if.end408:                                        ; preds = %if.then402, %land.lhs.true399, %if.then389
  br label %if.end409, !dbg !9525

if.end409:                                        ; preds = %if.end408, %if.end387
  br label %if.end410, !dbg !9526

if.end410:                                        ; preds = %if.end409, %if.then376
  br label %if.end411, !dbg !9527

if.end411:                                        ; preds = %if.end410, %lor.lhs.false374
  br label %if.end412

if.end412:                                        ; preds = %if.end411, %if.then363
  br label %for.inc413, !dbg !9528

for.inc413:                                       ; preds = %if.end412
  %222 = load i32, i32* %i, align 4, !dbg !9529
  %inc414 = add i32 %222, 1, !dbg !9529
  store i32 %inc414, i32* %i, align 4, !dbg !9529
  br label %for.cond345, !dbg !9530, !llvm.loop !9531

for.end415:                                       ; preds = %for.cond345
  br label %if.end416, !dbg !9532

if.end416:                                        ; preds = %for.end415, %lor.lhs.false342
  br label %if.end494, !dbg !9533

if.else417:                                       ; preds = %if.else288
  %223 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9534
  %call418 = call i32 @gimple_code(%union.gimple_statement_d* %223), !dbg !9536
  %cmp419 = icmp eq i32 %call418, 9, !dbg !9537
  br i1 %cmp419, label %if.then421, label %if.else458, !dbg !9538

if.then421:                                       ; preds = %if.else417
  call void @llvm.dbg.declare(metadata %union.tree_node** %op422, metadata !9539, metadata !DIExpression()), !dbg !9541
  %224 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9542
  %call423 = call %union.tree_node* @gimple_return_retval(%union.gimple_statement_d* %224), !dbg !9543
  store %union.tree_node* %call423, %union.tree_node** %op422, align 8, !dbg !9541
  %225 = load %union.tree_node*, %union.tree_node** %op422, align 8, !dbg !9544
  %tobool424 = icmp ne %union.tree_node* %225, null, !dbg !9544
  br i1 %tobool424, label %if.then425, label %if.end457, !dbg !9546

if.then425:                                       ; preds = %if.then421
  %226 = load i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)*, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)** %visit_addr.addr, align 8, !dbg !9547
  %tobool426 = icmp ne i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %226, null, !dbg !9547
  br i1 %tobool426, label %land.lhs.true427, label %if.else443, !dbg !9550

land.lhs.true427:                                 ; preds = %if.then425
  %227 = load %union.tree_node*, %union.tree_node** %op422, align 8, !dbg !9551
  %base428 = bitcast %union.tree_node* %227 to %struct.tree_base*, !dbg !9551
  %228 = bitcast %struct.tree_base* %base428 to i64*, !dbg !9551
  %bf.load429 = load i64, i64* %228, align 8, !dbg !9551
  %bf.clear430 = and i64 %bf.load429, 65535, !dbg !9551
  %bf.cast431 = trunc i64 %bf.clear430 to i32, !dbg !9551
  %cmp432 = icmp eq i32 %bf.cast431, 121, !dbg !9552
  br i1 %cmp432, label %if.then434, label %if.else443, !dbg !9553

if.then434:                                       ; preds = %land.lhs.true427
  %229 = load i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)*, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)** %visit_addr.addr, align 8, !dbg !9554
  %230 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9555
  %231 = load %union.tree_node*, %union.tree_node** %op422, align 8, !dbg !9556
  %exp435 = bitcast %union.tree_node* %231 to %struct.tree_exp*, !dbg !9556
  %operands436 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp435, i32 0, i32 3, !dbg !9556
  %arrayidx437 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands436, i64 0, i64 0, !dbg !9556
  %232 = load %union.tree_node*, %union.tree_node** %arrayidx437, align 8, !dbg !9556
  %233 = load i8*, i8** %data.addr, align 8, !dbg !9557
  %call438 = call zeroext i8 %229(%union.gimple_statement_d* %230, %union.tree_node* %232, i8* %233), !dbg !9554
  %conv439 = zext i8 %call438 to i32, !dbg !9554
  %234 = load i8, i8* %ret, align 1, !dbg !9558
  %conv440 = zext i8 %234 to i32, !dbg !9558
  %or441 = or i32 %conv440, %conv439, !dbg !9558
  %conv442 = trunc i32 %or441 to i8, !dbg !9558
  store i8 %conv442, i8* %ret, align 1, !dbg !9558
  br label %if.end456, !dbg !9559

if.else443:                                       ; preds = %land.lhs.true427, %if.then425
  %235 = load i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)*, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)** %visit_load.addr, align 8, !dbg !9560
  %tobool444 = icmp ne i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %235, null, !dbg !9560
  br i1 %tobool444, label %if.then445, label %if.end455, !dbg !9562

if.then445:                                       ; preds = %if.else443
  %236 = load %union.tree_node*, %union.tree_node** %op422, align 8, !dbg !9563
  %call446 = call %union.tree_node* @get_base_loadstore(%union.tree_node* %236), !dbg !9565
  store %union.tree_node* %call446, %union.tree_node** %op422, align 8, !dbg !9566
  %237 = load %union.tree_node*, %union.tree_node** %op422, align 8, !dbg !9567
  %tobool447 = icmp ne %union.tree_node* %237, null, !dbg !9567
  br i1 %tobool447, label %if.then448, label %if.end454, !dbg !9569

if.then448:                                       ; preds = %if.then445
  %238 = load i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)*, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)** %visit_load.addr, align 8, !dbg !9570
  %239 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9571
  %240 = load %union.tree_node*, %union.tree_node** %op422, align 8, !dbg !9572
  %241 = load i8*, i8** %data.addr, align 8, !dbg !9573
  %call449 = call zeroext i8 %238(%union.gimple_statement_d* %239, %union.tree_node* %240, i8* %241), !dbg !9570
  %conv450 = zext i8 %call449 to i32, !dbg !9570
  %242 = load i8, i8* %ret, align 1, !dbg !9574
  %conv451 = zext i8 %242 to i32, !dbg !9574
  %or452 = or i32 %conv451, %conv450, !dbg !9574
  %conv453 = trunc i32 %or452 to i8, !dbg !9574
  store i8 %conv453, i8* %ret, align 1, !dbg !9574
  br label %if.end454, !dbg !9575

if.end454:                                        ; preds = %if.then448, %if.then445
  br label %if.end455, !dbg !9576

if.end455:                                        ; preds = %if.end454, %if.else443
  br label %if.end456

if.end456:                                        ; preds = %if.end455, %if.then434
  br label %if.end457, !dbg !9577

if.end457:                                        ; preds = %if.end456, %if.then421
  br label %if.end493, !dbg !9578

if.else458:                                       ; preds = %if.else417
  %243 = load i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)*, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)** %visit_addr.addr, align 8, !dbg !9579
  %tobool459 = icmp ne i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %243, null, !dbg !9579
  br i1 %tobool459, label %land.lhs.true460, label %if.end492, !dbg !9581

land.lhs.true460:                                 ; preds = %if.else458
  %244 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9582
  %call461 = call i32 @gimple_code(%union.gimple_statement_d* %244), !dbg !9583
  %cmp462 = icmp eq i32 %call461, 16, !dbg !9584
  br i1 %cmp462, label %if.then464, label %if.end492, !dbg !9585

if.then464:                                       ; preds = %land.lhs.true460
  store i32 0, i32* %i, align 4, !dbg !9586
  br label %for.cond465, !dbg !9589

for.cond465:                                      ; preds = %for.inc489, %if.then464
  %245 = load i32, i32* %i, align 4, !dbg !9590
  %246 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9592
  %call466 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %246), !dbg !9593
  %cmp467 = icmp ult i32 %245, %call466, !dbg !9594
  br i1 %cmp467, label %for.body469, label %for.end491, !dbg !9595

for.body469:                                      ; preds = %for.cond465
  call void @llvm.dbg.declare(metadata %union.tree_node** %op470, metadata !9596, metadata !DIExpression()), !dbg !9598
  %247 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9599
  %248 = load i32, i32* %i, align 4, !dbg !9599
  %call471 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %247, i32 %248), !dbg !9599
  %call472 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call471), !dbg !9599
  store %union.tree_node* %call472, %union.tree_node** %op470, align 8, !dbg !9598
  %249 = load %union.tree_node*, %union.tree_node** %op470, align 8, !dbg !9600
  %base473 = bitcast %union.tree_node* %249 to %struct.tree_base*, !dbg !9600
  %250 = bitcast %struct.tree_base* %base473 to i64*, !dbg !9600
  %bf.load474 = load i64, i64* %250, align 8, !dbg !9600
  %bf.clear475 = and i64 %bf.load474, 65535, !dbg !9600
  %bf.cast476 = trunc i64 %bf.clear475 to i32, !dbg !9600
  %cmp477 = icmp eq i32 %bf.cast476, 121, !dbg !9602
  br i1 %cmp477, label %if.then479, label %if.end488, !dbg !9603

if.then479:                                       ; preds = %for.body469
  %251 = load i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)*, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)** %visit_addr.addr, align 8, !dbg !9604
  %252 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9605
  %253 = load %union.tree_node*, %union.tree_node** %op470, align 8, !dbg !9606
  %exp480 = bitcast %union.tree_node* %253 to %struct.tree_exp*, !dbg !9606
  %operands481 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp480, i32 0, i32 3, !dbg !9606
  %arrayidx482 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands481, i64 0, i64 0, !dbg !9606
  %254 = load %union.tree_node*, %union.tree_node** %arrayidx482, align 8, !dbg !9606
  %255 = load i8*, i8** %data.addr, align 8, !dbg !9607
  %call483 = call zeroext i8 %251(%union.gimple_statement_d* %252, %union.tree_node* %254, i8* %255), !dbg !9604
  %conv484 = zext i8 %call483 to i32, !dbg !9604
  %256 = load i8, i8* %ret, align 1, !dbg !9608
  %conv485 = zext i8 %256 to i32, !dbg !9608
  %or486 = or i32 %conv485, %conv484, !dbg !9608
  %conv487 = trunc i32 %or486 to i8, !dbg !9608
  store i8 %conv487, i8* %ret, align 1, !dbg !9608
  br label %if.end488, !dbg !9609

if.end488:                                        ; preds = %if.then479, %for.body469
  br label %for.inc489, !dbg !9610

for.inc489:                                       ; preds = %if.end488
  %257 = load i32, i32* %i, align 4, !dbg !9611
  %inc490 = add i32 %257, 1, !dbg !9611
  store i32 %inc490, i32* %i, align 4, !dbg !9611
  br label %for.cond465, !dbg !9612, !llvm.loop !9613

for.end491:                                       ; preds = %for.cond465
  br label %if.end492, !dbg !9615

if.end492:                                        ; preds = %for.end491, %land.lhs.true460, %if.else458
  br label %if.end493

if.end493:                                        ; preds = %if.end492, %if.end457
  br label %if.end494

if.end494:                                        ; preds = %if.end493, %if.end416
  br label %if.end495

if.end495:                                        ; preds = %if.end494, %if.end287
  br label %if.end496

if.end496:                                        ; preds = %if.end495, %for.end
  br label %if.end497

if.end497:                                        ; preds = %if.end496, %if.end139
  %258 = load i8, i8* %ret, align 1, !dbg !9616
  ret i8 %258, !dbg !9617
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_base_loadstore(%union.tree_node* %op) #0 !dbg !9618 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %op.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !9619, metadata !DIExpression()), !dbg !9620
  br label %while.cond, !dbg !9621

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !9622
  %call = call zeroext i8 @handled_component_p(%union.tree_node* %0), !dbg !9623
  %tobool = icmp ne i8 %call, 0, !dbg !9621
  br i1 %tobool, label %while.body, label %while.end, !dbg !9621

while.body:                                       ; preds = %while.cond
  %1 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !9624
  %exp = bitcast %union.tree_node* %1 to %struct.tree_exp*, !dbg !9624
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !9624
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !9624
  %2 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !9624
  store %union.tree_node* %2, %union.tree_node** %op.addr, align 8, !dbg !9625
  br label %while.cond, !dbg !9621, !llvm.loop !9626

while.end:                                        ; preds = %while.cond
  %3 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !9627
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !9627
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !9627
  %bf.load = load i64, i64* %4, align 8, !dbg !9627
  %bf.clear = and i64 %bf.load, 65535, !dbg !9627
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9627
  %idxprom = sext i32 %bf.cast to i64, !dbg !9627
  %arrayidx1 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !9627
  %5 = load i32, i32* %arrayidx1, align 4, !dbg !9627
  %cmp = icmp eq i32 %5, 3, !dbg !9627
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !9629

lor.lhs.false:                                    ; preds = %while.end
  %6 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !9630
  %base2 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !9630
  %7 = bitcast %struct.tree_base* %base2 to i64*, !dbg !9630
  %bf.load3 = load i64, i64* %7, align 8, !dbg !9630
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !9630
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !9630
  %cmp6 = icmp eq i32 %bf.cast5, 47, !dbg !9630
  br i1 %cmp6, label %if.then, label %lor.lhs.false7, !dbg !9630

lor.lhs.false7:                                   ; preds = %lor.lhs.false
  %8 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !9630
  %base8 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !9630
  %9 = bitcast %struct.tree_base* %base8 to i64*, !dbg !9630
  %bf.load9 = load i64, i64* %9, align 8, !dbg !9630
  %bf.clear10 = and i64 %bf.load9, 65535, !dbg !9630
  %bf.cast11 = trunc i64 %bf.clear10 to i32, !dbg !9630
  %cmp12 = icmp eq i32 %bf.cast11, 48, !dbg !9630
  br i1 %cmp12, label %if.then, label %lor.lhs.false13, !dbg !9630

lor.lhs.false13:                                  ; preds = %lor.lhs.false7
  %10 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !9630
  %base14 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !9630
  %11 = bitcast %struct.tree_base* %base14 to i64*, !dbg !9630
  %bf.load15 = load i64, i64* %11, align 8, !dbg !9630
  %bf.clear16 = and i64 %bf.load15, 65535, !dbg !9630
  %bf.cast17 = trunc i64 %bf.clear16 to i32, !dbg !9630
  %cmp18 = icmp eq i32 %bf.cast17, 49, !dbg !9630
  br i1 %cmp18, label %if.then, label %lor.lhs.false19, !dbg !9631

lor.lhs.false19:                                  ; preds = %lor.lhs.false13
  %12 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !9632
  %base20 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !9632
  %13 = bitcast %struct.tree_base* %base20 to i64*, !dbg !9632
  %bf.load21 = load i64, i64* %13, align 8, !dbg !9632
  %bf.clear22 = and i64 %bf.load21, 65535, !dbg !9632
  %bf.cast23 = trunc i64 %bf.clear22 to i32, !dbg !9632
  %cmp24 = icmp eq i32 %bf.cast23, 152, !dbg !9633
  br i1 %cmp24, label %if.then, label %if.end, !dbg !9634

if.then:                                          ; preds = %lor.lhs.false19, %lor.lhs.false13, %lor.lhs.false7, %lor.lhs.false, %while.end
  %14 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !9635
  store %union.tree_node* %14, %union.tree_node** %retval, align 8, !dbg !9636
  br label %return, !dbg !9636

if.end:                                           ; preds = %lor.lhs.false19
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9637
  br label %return, !dbg !9637

return:                                           ; preds = %if.end, %if.then
  %15 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !9638
  ret %union.tree_node* %15, !dbg !9638
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_asm_noutputs(%union.gimple_statement_d* %gs) #0 !dbg !9639 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9640, metadata !DIExpression()), !dbg !9641
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9642
  %gimple_asm = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_asm*, !dbg !9643
  %no = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm, i32 0, i32 3, !dbg !9644
  %1 = load i8, i8* %no, align 1, !dbg !9644
  %conv = zext i8 %1 to i32, !dbg !9642
  ret i32 %conv, !dbg !9645
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_asm_output_op(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !9646 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9647, metadata !DIExpression()), !dbg !9648
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !9649, metadata !DIExpression()), !dbg !9650
  %0 = load i32, i32* %index.addr, align 4, !dbg !9651
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9651
  %gimple_asm = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_asm*, !dbg !9651
  %no = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm, i32 0, i32 3, !dbg !9651
  %2 = load i8, i8* %no, align 1, !dbg !9651
  %conv = zext i8 %2 to i32, !dbg !9651
  %cmp = icmp ule i32 %0, %conv, !dbg !9651
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !9651

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 2655, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !9651
  br label %cond.end, !dbg !9651

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9651

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9651
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9652
  %4 = load i32, i32* %index.addr, align 4, !dbg !9653
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9654
  %gimple_asm2 = bitcast %union.gimple_statement_d* %5 to %struct.gimple_statement_asm*, !dbg !9655
  %ni = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm2, i32 0, i32 2, !dbg !9656
  %6 = load i8, i8* %ni, align 8, !dbg !9656
  %conv3 = zext i8 %6 to i32, !dbg !9654
  %add = add i32 %4, %conv3, !dbg !9657
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %3, i32 %add), !dbg !9658
  ret %union.tree_node* %call, !dbg !9659
}

declare dso_local zeroext i8 @parse_output_constraint(i8**, i32, i32, i32, i8*, i8*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_asm_ninputs(%union.gimple_statement_d* %gs) #0 !dbg !9660 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9661, metadata !DIExpression()), !dbg !9662
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9663
  %gimple_asm = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_asm*, !dbg !9664
  %ni = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm, i32 0, i32 2, !dbg !9665
  %1 = load i8, i8* %ni, align 8, !dbg !9665
  %conv = zext i8 %1 to i32, !dbg !9663
  ret i32 %conv, !dbg !9666
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_asm_input_op(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !9667 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9668, metadata !DIExpression()), !dbg !9669
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !9670, metadata !DIExpression()), !dbg !9671
  %0 = load i32, i32* %index.addr, align 4, !dbg !9672
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9672
  %gimple_asm = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_asm*, !dbg !9672
  %ni = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm, i32 0, i32 2, !dbg !9672
  %2 = load i8, i8* %ni, align 8, !dbg !9672
  %conv = zext i8 %2 to i32, !dbg !9672
  %cmp = icmp ule i32 %0, %conv, !dbg !9672
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !9672

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 2622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !9672
  br label %cond.end, !dbg !9672

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9672

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9672
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9673
  %4 = load i32, i32* %index.addr, align 4, !dbg !9674
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %3, i32 %4), !dbg !9675
  ret %union.tree_node* %call, !dbg !9676
}

declare dso_local zeroext i8 @parse_input_constraint(i8**, i32, i32, i32, i32, i8**, i8*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_return_retval(%union.gimple_statement_d* %gs) #0 !dbg !9677 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9678, metadata !DIExpression()), !dbg !9679
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9680
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !9681
  ret %union.tree_node* %call, !dbg !9682
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_phi_num_args(%union.gimple_statement_d* %gs) #0 !dbg !9683 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9684, metadata !DIExpression()), !dbg !9685
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9686
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !9687
  %nargs = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 2, !dbg !9688
  %1 = load i32, i32* %nargs, align 4, !dbg !9688
  ret i32 %1, !dbg !9689
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use) #0 !dbg !9690 {
entry:
  %use.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %use, %struct.ssa_use_operand_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use.addr, metadata !9696, metadata !DIExpression()), !dbg !9697
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !9698
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 3, !dbg !9699
  %1 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !9699
  %2 = load %union.tree_node*, %union.tree_node** %1, align 8, !dbg !9700
  ret %union.tree_node* %2, !dbg !9701
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !9702 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9705, metadata !DIExpression()), !dbg !9706
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !9707, metadata !DIExpression()), !dbg !9708
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9709
  %1 = load i32, i32* %i.addr, align 4, !dbg !9710
  %call = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %0, i32 %1), !dbg !9711
  %imm_use = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %call, i32 0, i32 0, !dbg !9712
  ret %struct.ssa_use_operand_d* %imm_use, !dbg !9713
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @walk_stmt_load_store_ops(%union.gimple_statement_d* %stmt, i8* %data, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %visit_load, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %visit_store) #0 !dbg !9714 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %data.addr = alloca i8*, align 8
  %visit_load.addr = alloca i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)*, align 8
  %visit_store.addr = alloca i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !9717, metadata !DIExpression()), !dbg !9718
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !9719, metadata !DIExpression()), !dbg !9720
  store i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %visit_load, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)** %visit_load.addr, align 8
  call void @llvm.dbg.declare(metadata i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)** %visit_load.addr, metadata !9721, metadata !DIExpression()), !dbg !9722
  store i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %visit_store, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)** %visit_store.addr, align 8
  call void @llvm.dbg.declare(metadata i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)** %visit_store.addr, metadata !9723, metadata !DIExpression()), !dbg !9724
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9725
  %1 = load i8*, i8** %data.addr, align 8, !dbg !9726
  %2 = load i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)*, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)** %visit_load.addr, align 8, !dbg !9727
  %3 = load i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)*, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)** %visit_store.addr, align 8, !dbg !9728
  %call = call zeroext i8 @walk_stmt_load_store_addr_ops(%union.gimple_statement_d* %0, i8* %1, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %2, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %3, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* null), !dbg !9729
  ret i8 %call, !dbg !9730
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @gimple_ior_addresses_taken(%struct.bitmap_head_def* %addresses_taken, %union.gimple_statement_d* %stmt) #0 !dbg !9731 {
entry:
  %addresses_taken.addr = alloca %struct.bitmap_head_def*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %struct.bitmap_head_def* %addresses_taken, %struct.bitmap_head_def** %addresses_taken.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %addresses_taken.addr, metadata !9734, metadata !DIExpression()), !dbg !9735
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !9736, metadata !DIExpression()), !dbg !9737
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9738
  %1 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %addresses_taken.addr, align 8, !dbg !9739
  %2 = bitcast %struct.bitmap_head_def* %1 to i8*, !dbg !9739
  %call = call zeroext i8 @walk_stmt_load_store_addr_ops(%union.gimple_statement_d* %0, i8* %2, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* null, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* null, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* @gimple_ior_addresses_taken_1), !dbg !9740
  ret i8 %call, !dbg !9741
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_ior_addresses_taken_1(%union.gimple_statement_d* %stmt, %union.tree_node* %addr, i8* %data) #0 !dbg !9742 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %addr.addr = alloca %union.tree_node*, align 8
  %data.addr = alloca i8*, align 8
  %addresses_taken = alloca %struct.bitmap_head_def*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !9743, metadata !DIExpression()), !dbg !9744
  store %union.tree_node* %addr, %union.tree_node** %addr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr.addr, metadata !9745, metadata !DIExpression()), !dbg !9746
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !9747, metadata !DIExpression()), !dbg !9748
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %addresses_taken, metadata !9749, metadata !DIExpression()), !dbg !9750
  %0 = load i8*, i8** %data.addr, align 8, !dbg !9751
  %1 = bitcast i8* %0 to %struct.bitmap_head_def*, !dbg !9752
  store %struct.bitmap_head_def* %1, %struct.bitmap_head_def** %addresses_taken, align 8, !dbg !9750
  br label %while.cond, !dbg !9753

while.cond:                                       ; preds = %while.body, %entry
  %2 = load %union.tree_node*, %union.tree_node** %addr.addr, align 8, !dbg !9754
  %call = call zeroext i8 @handled_component_p(%union.tree_node* %2), !dbg !9755
  %tobool = icmp ne i8 %call, 0, !dbg !9753
  br i1 %tobool, label %while.body, label %while.end, !dbg !9753

while.body:                                       ; preds = %while.cond
  %3 = load %union.tree_node*, %union.tree_node** %addr.addr, align 8, !dbg !9756
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !9756
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !9756
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !9756
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !9756
  store %union.tree_node* %4, %union.tree_node** %addr.addr, align 8, !dbg !9757
  br label %while.cond, !dbg !9753, !llvm.loop !9758

while.end:                                        ; preds = %while.cond
  %5 = load %union.tree_node*, %union.tree_node** %addr.addr, align 8, !dbg !9759
  %base = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !9759
  %6 = bitcast %struct.tree_base* %base to i64*, !dbg !9759
  %bf.load = load i64, i64* %6, align 8, !dbg !9759
  %bf.clear = and i64 %bf.load, 65535, !dbg !9759
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9759
  %idxprom = sext i32 %bf.cast to i64, !dbg !9759
  %arrayidx1 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !9759
  %7 = load i32, i32* %arrayidx1, align 4, !dbg !9759
  %cmp = icmp eq i32 %7, 3, !dbg !9759
  br i1 %cmp, label %if.then, label %if.end, !dbg !9761

if.then:                                          ; preds = %while.end
  %8 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %addresses_taken, align 8, !dbg !9762
  %9 = load %union.tree_node*, %union.tree_node** %addr.addr, align 8, !dbg !9764
  %decl_minimal = bitcast %union.tree_node* %9 to %struct.tree_decl_minimal*, !dbg !9764
  %uid = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 2, !dbg !9764
  %10 = load i32, i32* %uid, align 4, !dbg !9764
  %call2 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %8, i32 %10), !dbg !9765
  store i8 1, i8* %retval, align 1, !dbg !9766
  br label %return, !dbg !9766

if.end:                                           ; preds = %while.end
  store i8 0, i8* %retval, align 1, !dbg !9767
  br label %return, !dbg !9767

return:                                           ; preds = %if.end, %if.then
  %11 = load i8, i8* %retval, align 1, !dbg !9768
  ret i8 %11, !dbg !9768
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @gimple_decl_printable_name(%union.tree_node* %decl, i32 %verbosity) #0 !dbg !9769 {
entry:
  %retval = alloca i8*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  %verbosity.addr = alloca i32, align 4
  %str = alloca i8*, align 8
  %mangled_str = alloca i8*, align 8
  %dmgl_opts = alloca i32, align 4
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !9772, metadata !DIExpression()), !dbg !9773
  store i32 %verbosity, i32* %verbosity.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %verbosity.addr, metadata !9774, metadata !DIExpression()), !dbg !9775
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9776
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !9776
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !9776

land.lhs.true:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9776
  %decl_minimal = bitcast %union.tree_node* %1 to %struct.tree_decl_minimal*, !dbg !9776
  %name = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 3, !dbg !9776
  %2 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !9776
  %tobool1 = icmp ne %union.tree_node* %2, null, !dbg !9776
  br i1 %tobool1, label %cond.false, label %cond.true, !dbg !9776

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 4565, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !9776
  br label %cond.end, !dbg !9776

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !9776

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9776
  %3 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9777
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !9777
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !9777
  %bf.load = load i64, i64* %4, align 8, !dbg !9777
  %bf.clear = and i64 %bf.load, 65535, !dbg !9777
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9777
  %idxprom = zext i32 %bf.cast to i64, !dbg !9777
  %arrayidx = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom, !dbg !9777
  %arrayidx2 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx, i64 0, i64 13, !dbg !9777
  %5 = load i8, i8* %arrayidx2, align 1, !dbg !9777
  %conv = zext i8 %5 to i32, !dbg !9777
  %tobool3 = icmp ne i32 %conv, 0, !dbg !9777
  br i1 %tobool3, label %land.lhs.true4, label %if.end24, !dbg !9777

land.lhs.true4:                                   ; preds = %cond.end
  %6 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9777
  %decl_with_vis = bitcast %union.tree_node* %6 to %struct.tree_decl_with_vis*, !dbg !9777
  %assembler_name = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 1, !dbg !9777
  %7 = load %union.tree_node*, %union.tree_node** %assembler_name, align 8, !dbg !9777
  %cmp = icmp ne %union.tree_node* %7, null, !dbg !9777
  br i1 %cmp, label %if.then, label %if.end24, !dbg !9779

if.then:                                          ; preds = %land.lhs.true4
  call void @llvm.dbg.declare(metadata i8** %str, metadata !9780, metadata !DIExpression()), !dbg !9782
  call void @llvm.dbg.declare(metadata i8** %mangled_str, metadata !9783, metadata !DIExpression()), !dbg !9784
  call void @llvm.dbg.declare(metadata i32* %dmgl_opts, metadata !9785, metadata !DIExpression()), !dbg !9786
  store i32 0, i32* %dmgl_opts, align 4, !dbg !9786
  %8 = load i32, i32* %verbosity.addr, align 4, !dbg !9787
  %cmp6 = icmp sge i32 %8, 2, !dbg !9789
  br i1 %cmp6, label %if.then8, label %if.end16, !dbg !9790

if.then8:                                         ; preds = %if.then
  store i32 16426, i32* %dmgl_opts, align 4, !dbg !9791
  %9 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9793
  %base9 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !9793
  %10 = bitcast %struct.tree_base* %base9 to i64*, !dbg !9793
  %bf.load10 = load i64, i64* %10, align 8, !dbg !9793
  %bf.clear11 = and i64 %bf.load10, 65535, !dbg !9793
  %bf.cast12 = trunc i64 %bf.clear11 to i32, !dbg !9793
  %cmp13 = icmp eq i32 %bf.cast12, 29, !dbg !9795
  br i1 %cmp13, label %if.then15, label %if.end, !dbg !9796

if.then15:                                        ; preds = %if.then8
  %11 = load i32, i32* %dmgl_opts, align 4, !dbg !9797
  %or = or i32 %11, 1, !dbg !9797
  store i32 %or, i32* %dmgl_opts, align 4, !dbg !9797
  br label %if.end, !dbg !9798

if.end:                                           ; preds = %if.then15, %if.then8
  br label %if.end16, !dbg !9799

if.end16:                                         ; preds = %if.end, %if.then
  %12 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9800
  %call = call %union.tree_node* @decl_assembler_name(%union.tree_node* %12), !dbg !9800
  %identifier = bitcast %union.tree_node* %call to %struct.tree_identifier*, !dbg !9800
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1, !dbg !9800
  %str17 = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 0, !dbg !9800
  %13 = load i8*, i8** %str17, align 8, !dbg !9800
  store i8* %13, i8** %mangled_str, align 8, !dbg !9801
  %14 = load i8*, i8** %mangled_str, align 8, !dbg !9802
  %15 = load i32, i32* %dmgl_opts, align 4, !dbg !9803
  %call18 = call i8* @cplus_demangle_v3(i8* %14, i32 %15), !dbg !9804
  store i8* %call18, i8** %str, align 8, !dbg !9805
  %16 = load i8*, i8** %str, align 8, !dbg !9806
  %tobool19 = icmp ne i8* %16, null, !dbg !9807
  br i1 %tobool19, label %cond.true20, label %cond.false21, !dbg !9807

cond.true20:                                      ; preds = %if.end16
  %17 = load i8*, i8** %str, align 8, !dbg !9808
  br label %cond.end22, !dbg !9807

cond.false21:                                     ; preds = %if.end16
  %18 = load i8*, i8** %mangled_str, align 8, !dbg !9809
  br label %cond.end22, !dbg !9807

cond.end22:                                       ; preds = %cond.false21, %cond.true20
  %cond23 = phi i8* [ %17, %cond.true20 ], [ %18, %cond.false21 ], !dbg !9807
  store i8* %cond23, i8** %retval, align 8, !dbg !9810
  br label %return, !dbg !9810

if.end24:                                         ; preds = %land.lhs.true4, %cond.end
  %19 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9811
  %decl_minimal25 = bitcast %union.tree_node* %19 to %struct.tree_decl_minimal*, !dbg !9811
  %name26 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal25, i32 0, i32 3, !dbg !9811
  %20 = load %union.tree_node*, %union.tree_node** %name26, align 8, !dbg !9811
  %identifier27 = bitcast %union.tree_node* %20 to %struct.tree_identifier*, !dbg !9811
  %id28 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier27, i32 0, i32 1, !dbg !9811
  %str29 = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id28, i32 0, i32 0, !dbg !9811
  %21 = load i8*, i8** %str29, align 8, !dbg !9811
  store i8* %21, i8** %retval, align 8, !dbg !9812
  br label %return, !dbg !9812

return:                                           ; preds = %if.end24, %cond.end22
  %22 = load i8*, i8** %retval, align 8, !dbg !9813
  ret i8* %22, !dbg !9813
}

declare dso_local %union.tree_node* @decl_assembler_name(%union.tree_node*) #2

declare dso_local i8* @cplus_demangle_v3(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @gimple_fold_obj_type_ref(%union.tree_node* %ref, %union.tree_node* %known_type) #0 !dbg !9814 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %ref.addr = alloca %union.tree_node*, align 8
  %known_type.addr = alloca %union.tree_node*, align 8
  %index = alloca i64, align 8
  %i = alloca i64, align 8
  %v = alloca %union.tree_node*, align 8
  %fndecl = alloca %union.tree_node*, align 8
  store %union.tree_node* %ref, %union.tree_node** %ref.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %ref.addr, metadata !9817, metadata !DIExpression()), !dbg !9818
  store %union.tree_node* %known_type, %union.tree_node** %known_type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %known_type.addr, metadata !9819, metadata !DIExpression()), !dbg !9820
  call void @llvm.dbg.declare(metadata i64* %index, metadata !9821, metadata !DIExpression()), !dbg !9822
  call void @llvm.dbg.declare(metadata i64* %i, metadata !9823, metadata !DIExpression()), !dbg !9824
  call void @llvm.dbg.declare(metadata %union.tree_node** %v, metadata !9825, metadata !DIExpression()), !dbg !9826
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl, metadata !9827, metadata !DIExpression()), !dbg !9828
  %0 = load %union.tree_node*, %union.tree_node** %known_type.addr, align 8, !dbg !9829
  %type = bitcast %union.tree_node* %0 to %struct.tree_type*, !dbg !9829
  %binfo = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 17, !dbg !9829
  %1 = load %union.tree_node*, %union.tree_node** %binfo, align 8, !dbg !9829
  %cmp = icmp eq %union.tree_node* %1, null, !dbg !9831
  br i1 %cmp, label %if.then, label %if.end, !dbg !9832

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9833
  br label %return, !dbg !9833

if.end:                                           ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %known_type.addr, align 8, !dbg !9834
  %type1 = bitcast %union.tree_node* %2 to %struct.tree_type*, !dbg !9834
  %binfo2 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 17, !dbg !9834
  %3 = load %union.tree_node*, %union.tree_node** %binfo2, align 8, !dbg !9834
  %binfo3 = bitcast %union.tree_node* %3 to %struct.tree_binfo*, !dbg !9834
  %virtuals = getelementptr inbounds %struct.tree_binfo, %struct.tree_binfo* %binfo3, i32 0, i32 3, !dbg !9834
  %4 = load %union.tree_node*, %union.tree_node** %virtuals, align 8, !dbg !9834
  store %union.tree_node* %4, %union.tree_node** %v, align 8, !dbg !9835
  %5 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !9836
  %exp = bitcast %union.tree_node* %5 to %struct.tree_exp*, !dbg !9836
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !9836
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 2, !dbg !9836
  %6 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !9836
  %call = call i64 @tree_low_cst(%union.tree_node* %6, i32 1), !dbg !9837
  store i64 %call, i64* %index, align 8, !dbg !9838
  store i64 0, i64* %i, align 8, !dbg !9839
  br label %while.cond, !dbg !9840

while.cond:                                       ; preds = %while.body, %if.end
  %7 = load i64, i64* %i, align 8, !dbg !9841
  %8 = load i64, i64* %index, align 8, !dbg !9842
  %cmp4 = icmp ne i64 %7, %8, !dbg !9843
  br i1 %cmp4, label %while.body, label %while.end, !dbg !9840

while.body:                                       ; preds = %while.cond
  %9 = load i64, i64* %i, align 8, !dbg !9844
  %add = add nsw i64 %9, 1, !dbg !9844
  store i64 %add, i64* %i, align 8, !dbg !9844
  %10 = load %union.tree_node*, %union.tree_node** %v, align 8, !dbg !9846
  %common = bitcast %union.tree_node* %10 to %struct.tree_common*, !dbg !9846
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !9846
  %11 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !9846
  store %union.tree_node* %11, %union.tree_node** %v, align 8, !dbg !9847
  br label %while.cond, !dbg !9840, !llvm.loop !9848

while.end:                                        ; preds = %while.cond
  %12 = load %union.tree_node*, %union.tree_node** %v, align 8, !dbg !9850
  %list = bitcast %union.tree_node* %12 to %struct.tree_list*, !dbg !9850
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !9850
  %13 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !9850
  store %union.tree_node* %13, %union.tree_node** %fndecl, align 8, !dbg !9851
  %14 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !9852
  %call5 = call %struct.cgraph_node* @cgraph_node(%union.tree_node* %14), !dbg !9853
  %local = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %call5, i32 0, i32 18, !dbg !9854
  %vtable_method = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local, i32 0, i32 2, !dbg !9855
  %bf.load = load i8, i8* %vtable_method, align 8, !dbg !9856
  %bf.clear = and i8 %bf.load, 127, !dbg !9856
  %bf.set = or i8 %bf.clear, -128, !dbg !9856
  store i8 %bf.set, i8* %vtable_method, align 8, !dbg !9856
  %15 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !9857
  %call6 = call %union.tree_node* @build_fold_addr_expr_loc(i32 0, %union.tree_node* %15), !dbg !9857
  store %union.tree_node* %call6, %union.tree_node** %retval, align 8, !dbg !9858
  br label %return, !dbg !9858

return:                                           ; preds = %while.end, %if.then
  %16 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !9859
  ret %union.tree_node* %16, !dbg !9859
}

declare dso_local i64 @tree_low_cst(%union.tree_node*, i32) #2

declare dso_local %struct.cgraph_node* @cgraph_node(%union.tree_node*) #2

declare dso_local %union.tree_node* @build_fold_addr_expr_loc(i32, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gss_for_code(i32 %code) #0 !dbg !9860 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !9863, metadata !DIExpression()), !dbg !9864
  %0 = load i32, i32* %code.addr, align 4, !dbg !9865
  %idxprom = zext i32 %0 to i64, !dbg !9866
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* bitcast ([35 x i32]* @gss_for_code_ to [0 x i32]*), i64 0, i64 %idxprom, !dbg !9866
  %1 = load i32, i32* %arrayidx, align 4, !dbg !9866
  ret i32 %1, !dbg !9867
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_cond_set_code(%union.gimple_statement_d* %gs, i32 %code) #0 !dbg !9868 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %code.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9871, metadata !DIExpression()), !dbg !9872
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !9873, metadata !DIExpression()), !dbg !9874
  %0 = load i32, i32* %code.addr, align 4, !dbg !9875
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9876
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !9877
  %2 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !9878
  %bf.load = load i32, i32* %2, align 8, !dbg !9879
  %bf.value = and i32 %0, 65535, !dbg !9879
  %bf.shl = shl i32 %bf.value, 16, !dbg !9879
  %bf.clear = and i32 %bf.load, 65535, !dbg !9879
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !9879
  store i32 %bf.set, i32* %2, align 8, !dbg !9879
  ret void, !dbg !9880
}

declare dso_local i64 @strlen(i8*) #2

declare dso_local i8* @ggc_alloc_string(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %g) #0 !dbg !9881 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !9884, metadata !DIExpression()), !dbg !9885
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !9886
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !9887
  %bb = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 4, !dbg !9888
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9888
  ret %struct.basic_block_def* %1, !dbg !9889
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #0 !dbg !9890 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %off = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9891, metadata !DIExpression()), !dbg !9892
  call void @llvm.dbg.declare(metadata i64* %off, metadata !9893, metadata !DIExpression()), !dbg !9894
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9895
  %call = call i32 @gimple_statement_structure(%union.gimple_statement_d* %0), !dbg !9896
  %idxprom = zext i32 %call to i64, !dbg !9897
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* bitcast (<{ i64, i64, i64, i64, i64, [18 x i64] }>* @gimple_ops_offset_ to [0 x i64]*), i64 0, i64 %idxprom, !dbg !9897
  %1 = load i64, i64* %arrayidx, align 8, !dbg !9897
  store i64 %1, i64* %off, align 8, !dbg !9898
  %2 = load i64, i64* %off, align 8, !dbg !9899
  %cmp = icmp ne i64 %2, 0, !dbg !9899
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !9899

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 1622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !9899
  br label %cond.end, !dbg !9899

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9899

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9899
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9900
  %4 = bitcast %union.gimple_statement_d* %3 to i8*, !dbg !9901
  %5 = load i64, i64* %off, align 8, !dbg !9902
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %5, !dbg !9903
  %6 = bitcast i8* %add.ptr to %union.tree_node**, !dbg !9904
  ret %union.tree_node** %6, !dbg !9905
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_asm_nlabels(%union.gimple_statement_d* %gs) #0 !dbg !9906 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9907, metadata !DIExpression()), !dbg !9908
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9909
  %gimple_asm = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_asm*, !dbg !9910
  %nl = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm, i32 0, i32 5, !dbg !9911
  %1 = load i8, i8* %nl, align 1, !dbg !9911
  %conv = zext i8 %1 to i32, !dbg !9909
  ret i32 %conv, !dbg !9912
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_asm_label_op(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !9913 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9914, metadata !DIExpression()), !dbg !9915
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !9916, metadata !DIExpression()), !dbg !9917
  %0 = load i32, i32* %index.addr, align 4, !dbg !9918
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9918
  %gimple_asm = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_asm*, !dbg !9918
  %nl = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm, i32 0, i32 5, !dbg !9918
  %2 = load i8, i8* %nl, align 1, !dbg !9918
  %conv = zext i8 %2 to i32, !dbg !9918
  %cmp = icmp ule i32 %0, %conv, !dbg !9918
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !9918

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 2710, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !9918
  br label %cond.end, !dbg !9918

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9918

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9918
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9919
  %4 = load i32, i32* %index.addr, align 4, !dbg !9920
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9921
  %gimple_asm2 = bitcast %union.gimple_statement_d* %5 to %struct.gimple_statement_asm*, !dbg !9922
  %ni = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm2, i32 0, i32 2, !dbg !9923
  %6 = load i8, i8* %ni, align 8, !dbg !9923
  %conv3 = zext i8 %6 to i32, !dbg !9921
  %add = add i32 %4, %conv3, !dbg !9924
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9925
  %gimple_asm4 = bitcast %union.gimple_statement_d* %7 to %struct.gimple_statement_asm*, !dbg !9926
  %nc = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm4, i32 0, i32 4, !dbg !9927
  %8 = load i8, i8* %nc, align 2, !dbg !9927
  %conv5 = zext i8 %8 to i32, !dbg !9925
  %add6 = add i32 %add, %conv5, !dbg !9928
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %3, i32 %add6), !dbg !9929
  ret %union.tree_node* %call, !dbg !9930
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_expr_code(%union.gimple_statement_d* %stmt) #0 !dbg !9931 {
entry:
  %retval = alloca i32, align 4
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !9932, metadata !DIExpression()), !dbg !9933
  call void @llvm.dbg.declare(metadata i32* %code, metadata !9934, metadata !DIExpression()), !dbg !9935
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9936
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !9937
  store i32 %call, i32* %code, align 4, !dbg !9935
  %1 = load i32, i32* %code, align 4, !dbg !9938
  %cmp = icmp eq i32 %1, 6, !dbg !9940
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !9941

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %code, align 4, !dbg !9942
  %cmp1 = icmp eq i32 %2, 1, !dbg !9943
  br i1 %cmp1, label %if.then, label %if.else, !dbg !9944

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9945
  %gsbase = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_base*, !dbg !9946
  %4 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !9947
  %bf.load = load i32, i32* %4, align 8, !dbg !9947
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !9947
  store i32 %bf.lshr, i32* %retval, align 4, !dbg !9948
  br label %return, !dbg !9948

if.else:                                          ; preds = %lor.lhs.false
  %5 = load i32, i32* %code, align 4, !dbg !9949
  %cmp2 = icmp eq i32 %5, 8, !dbg !9951
  br i1 %cmp2, label %if.then3, label %if.else4, !dbg !9952

if.then3:                                         ; preds = %if.else
  store i32 59, i32* %retval, align 4, !dbg !9953
  br label %return, !dbg !9953

if.else4:                                         ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 1446, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !9954
  br label %if.end

if.end:                                           ; preds = %if.else4
  br label %if.end5

if.end5:                                          ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !9955
  br label %return, !dbg !9955

return:                                           ; preds = %if.end5, %if.then3, %if.then
  %6 = load i32, i32* %retval, align 4, !dbg !9956
  ret i32 %6, !dbg !9956
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_basic_block_gc_safe_grow(%struct.VEC_basic_block_gc** %vec_, i32 %size_) #0 !dbg !9957 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_gc**, align 8
  %size_.addr = alloca i32, align 4
  store %struct.VEC_basic_block_gc** %vec_, %struct.VEC_basic_block_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_gc*** %vec_.addr, metadata !9958, metadata !DIExpression()), !dbg !9959
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !9960, metadata !DIExpression()), !dbg !9959
  %0 = load i32, i32* %size_.addr, align 4, !dbg !9959
  %cmp = icmp sge i32 %0, 0, !dbg !9959
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !9959

land.rhs:                                         ; preds = %entry
  %1 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !9959
  %2 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %1, align 8, !dbg !9959
  %tobool = icmp ne %struct.VEC_basic_block_gc* %2, null, !dbg !9959
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9959

cond.true:                                        ; preds = %land.rhs
  %3 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !9959
  %4 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %3, align 8, !dbg !9959
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %4, i32 0, i32 0, !dbg !9959
  br label %cond.end, !dbg !9959

cond.false:                                       ; preds = %land.rhs
  br label %cond.end, !dbg !9959

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9959
  %call = call i32 @VEC_basic_block_base_length(%struct.VEC_basic_block_base* %cond), !dbg !9959
  %5 = load i32, i32* %size_.addr, align 4, !dbg !9959
  %cmp1 = icmp ule i32 %call, %5, !dbg !9959
  br label %land.end

land.end:                                         ; preds = %cond.end, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %cond.end ], !dbg !9961
  %land.ext = zext i1 %6 to i32, !dbg !9959
  %7 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !9959
  %8 = load i32, i32* %size_.addr, align 4, !dbg !9959
  %9 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !9959
  %10 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %9, align 8, !dbg !9959
  %tobool2 = icmp ne %struct.VEC_basic_block_gc* %10, null, !dbg !9959
  br i1 %tobool2, label %cond.true3, label %cond.false10, !dbg !9959

cond.true3:                                       ; preds = %land.end
  %11 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !9959
  %12 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %11, align 8, !dbg !9959
  %tobool4 = icmp ne %struct.VEC_basic_block_gc* %12, null, !dbg !9959
  br i1 %tobool4, label %cond.true5, label %cond.false7, !dbg !9959

cond.true5:                                       ; preds = %cond.true3
  %13 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !9959
  %14 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %13, align 8, !dbg !9959
  %base6 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %14, i32 0, i32 0, !dbg !9959
  br label %cond.end8, !dbg !9959

cond.false7:                                      ; preds = %cond.true3
  br label %cond.end8, !dbg !9959

cond.end8:                                        ; preds = %cond.false7, %cond.true5
  %cond9 = phi %struct.VEC_basic_block_base* [ %base6, %cond.true5 ], [ null, %cond.false7 ], !dbg !9959
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %cond9, i32 0, i32 0, !dbg !9959
  %15 = load i32, i32* %num, align 8, !dbg !9959
  br label %cond.end11, !dbg !9959

cond.false10:                                     ; preds = %land.end
  br label %cond.end11, !dbg !9959

cond.end11:                                       ; preds = %cond.false10, %cond.end8
  %cond12 = phi i32 [ %15, %cond.end8 ], [ 0, %cond.false10 ], !dbg !9959
  %sub = sub nsw i32 %8, %cond12, !dbg !9959
  %call13 = call i32 @VEC_basic_block_gc_reserve_exact(%struct.VEC_basic_block_gc** %7, i32 %sub), !dbg !9959
  %16 = load i32, i32* %size_.addr, align 4, !dbg !9959
  %17 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !9959
  %18 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %17, align 8, !dbg !9959
  %tobool14 = icmp ne %struct.VEC_basic_block_gc* %18, null, !dbg !9959
  br i1 %tobool14, label %cond.true15, label %cond.false17, !dbg !9959

cond.true15:                                      ; preds = %cond.end11
  %19 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !9959
  %20 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %19, align 8, !dbg !9959
  %base16 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %20, i32 0, i32 0, !dbg !9959
  br label %cond.end18, !dbg !9959

cond.false17:                                     ; preds = %cond.end11
  br label %cond.end18, !dbg !9959

cond.end18:                                       ; preds = %cond.false17, %cond.true15
  %cond19 = phi %struct.VEC_basic_block_base* [ %base16, %cond.true15 ], [ null, %cond.false17 ], !dbg !9959
  %num20 = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %cond19, i32 0, i32 0, !dbg !9959
  store i32 %16, i32* %num20, align 8, !dbg !9959
  ret void, !dbg !9959
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def** @VEC_basic_block_base_address(%struct.VEC_basic_block_base* %vec_) #0 !dbg !9962 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_base*, align 8
  store %struct.VEC_basic_block_base* %vec_, %struct.VEC_basic_block_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_base** %vec_.addr, metadata !9966, metadata !DIExpression()), !dbg !9967
  %0 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !9967
  %tobool = icmp ne %struct.VEC_basic_block_base* %0, null, !dbg !9967
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9967

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !9967
  %vec = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %1, i32 0, i32 2, !dbg !9967
  %arraydecay = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %vec, i64 0, i64 0, !dbg !9967
  br label %cond.end, !dbg !9967

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9967

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.basic_block_def** [ %arraydecay, %cond.true ], [ null, %cond.false ], !dbg !9967
  ret %struct.basic_block_def** %cond, !dbg !9967
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_basic_block_gc_reserve_exact(%struct.VEC_basic_block_gc** %vec_, i32 %alloc_) #0 !dbg !9968 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_gc**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_basic_block_gc** %vec_, %struct.VEC_basic_block_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_gc*** %vec_.addr, metadata !9971, metadata !DIExpression()), !dbg !9972
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !9973, metadata !DIExpression()), !dbg !9972
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !9974, metadata !DIExpression()), !dbg !9972
  %0 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !9972
  %1 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %0, align 8, !dbg !9972
  %tobool = icmp ne %struct.VEC_basic_block_gc* %1, null, !dbg !9972
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9972

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !9972
  %3 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %2, align 8, !dbg !9972
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %3, i32 0, i32 0, !dbg !9972
  br label %cond.end, !dbg !9972

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9972

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9972
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !9972
  %call = call i32 @VEC_basic_block_base_space(%struct.VEC_basic_block_base* %cond, i32 %4), !dbg !9972
  %tobool1 = icmp ne i32 %call, 0, !dbg !9972
  %lnot = xor i1 %tobool1, true, !dbg !9972
  %lnot.ext = zext i1 %lnot to i32, !dbg !9972
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !9972
  %5 = load i32, i32* %extend, align 4, !dbg !9975
  %tobool2 = icmp ne i32 %5, 0, !dbg !9975
  br i1 %tobool2, label %if.then, label %if.end, !dbg !9972

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !9975
  %7 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %6, align 8, !dbg !9975
  %8 = bitcast %struct.VEC_basic_block_gc* %7 to i8*, !dbg !9975
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !9975
  %call3 = call i8* @vec_gc_p_reserve_exact(i8* %8, i32 %9), !dbg !9975
  %10 = bitcast i8* %call3 to %struct.VEC_basic_block_gc*, !dbg !9975
  %11 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !9975
  store %struct.VEC_basic_block_gc* %10, %struct.VEC_basic_block_gc** %11, align 8, !dbg !9975
  br label %if.end, !dbg !9975

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !9972
  ret i32 %12, !dbg !9972
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_basic_block_base_space(%struct.VEC_basic_block_base* %vec_, i32 %alloc_) #0 !dbg !9977 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_basic_block_base* %vec_, %struct.VEC_basic_block_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_base** %vec_.addr, metadata !9980, metadata !DIExpression()), !dbg !9981
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !9982, metadata !DIExpression()), !dbg !9981
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !9981
  %cmp = icmp sge i32 %0, 0, !dbg !9981
  %conv = zext i1 %cmp to i32, !dbg !9981
  %1 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !9981
  %tobool = icmp ne %struct.VEC_basic_block_base* %1, null, !dbg !9981
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9981

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !9981
  %alloc = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %2, i32 0, i32 1, !dbg !9981
  %3 = load i32, i32* %alloc, align 4, !dbg !9981
  %4 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !9981
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %4, i32 0, i32 0, !dbg !9981
  %5 = load i32, i32* %num, align 8, !dbg !9981
  %sub = sub i32 %3, %5, !dbg !9981
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !9981
  %cmp1 = icmp uge i32 %sub, %6, !dbg !9981
  %conv2 = zext i1 %cmp1 to i32, !dbg !9981
  br label %cond.end, !dbg !9981

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !9981
  %tobool3 = icmp ne i32 %7, 0, !dbg !9981
  %lnot = xor i1 %tobool3, true, !dbg !9981
  %lnot.ext = zext i1 %lnot to i32, !dbg !9981
  br label %cond.end, !dbg !9981

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !9981
  ret i32 %cond, !dbg !9981
}

declare dso_local i8* @vec_gc_p_reserve_exact(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_gimple_gc_reserve(%struct.VEC_gimple_gc** %vec_, i32 %alloc_) #0 !dbg !9983 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_gc**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_gimple_gc** %vec_, %struct.VEC_gimple_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_gc*** %vec_.addr, metadata !9986, metadata !DIExpression()), !dbg !9987
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !9988, metadata !DIExpression()), !dbg !9987
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !9989, metadata !DIExpression()), !dbg !9987
  %0 = load %struct.VEC_gimple_gc**, %struct.VEC_gimple_gc*** %vec_.addr, align 8, !dbg !9987
  %1 = load %struct.VEC_gimple_gc*, %struct.VEC_gimple_gc** %0, align 8, !dbg !9987
  %tobool = icmp ne %struct.VEC_gimple_gc* %1, null, !dbg !9987
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9987

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_gimple_gc**, %struct.VEC_gimple_gc*** %vec_.addr, align 8, !dbg !9987
  %3 = load %struct.VEC_gimple_gc*, %struct.VEC_gimple_gc** %2, align 8, !dbg !9987
  %base = getelementptr inbounds %struct.VEC_gimple_gc, %struct.VEC_gimple_gc* %3, i32 0, i32 0, !dbg !9987
  br label %cond.end, !dbg !9987

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9987

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9987
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !9987
  %call = call i32 @VEC_gimple_base_space(%struct.VEC_gimple_base* %cond, i32 %4), !dbg !9987
  %tobool1 = icmp ne i32 %call, 0, !dbg !9987
  %lnot = xor i1 %tobool1, true, !dbg !9987
  %lnot.ext = zext i1 %lnot to i32, !dbg !9987
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !9987
  %5 = load i32, i32* %extend, align 4, !dbg !9990
  %tobool2 = icmp ne i32 %5, 0, !dbg !9990
  br i1 %tobool2, label %if.then, label %if.end, !dbg !9987

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_gimple_gc**, %struct.VEC_gimple_gc*** %vec_.addr, align 8, !dbg !9990
  %7 = load %struct.VEC_gimple_gc*, %struct.VEC_gimple_gc** %6, align 8, !dbg !9990
  %8 = bitcast %struct.VEC_gimple_gc* %7 to i8*, !dbg !9990
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !9990
  %call3 = call i8* @vec_gc_p_reserve(i8* %8, i32 %9), !dbg !9990
  %10 = bitcast i8* %call3 to %struct.VEC_gimple_gc*, !dbg !9990
  %11 = load %struct.VEC_gimple_gc**, %struct.VEC_gimple_gc*** %vec_.addr, align 8, !dbg !9990
  store %struct.VEC_gimple_gc* %10, %struct.VEC_gimple_gc** %11, align 8, !dbg !9990
  br label %if.end, !dbg !9990

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !9987
  ret i32 %12, !dbg !9987
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d** @VEC_gimple_base_quick_push(%struct.VEC_gimple_base* %vec_, %union.gimple_statement_d* %obj_) #0 !dbg !9992 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_base*, align 8
  %obj_.addr = alloca %union.gimple_statement_d*, align 8
  %slot_ = alloca %union.gimple_statement_d**, align 8
  store %struct.VEC_gimple_base* %vec_, %struct.VEC_gimple_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_base** %vec_.addr, metadata !9996, metadata !DIExpression()), !dbg !9997
  store %union.gimple_statement_d* %obj_, %union.gimple_statement_d** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %obj_.addr, metadata !9998, metadata !DIExpression()), !dbg !9997
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d*** %slot_, metadata !9999, metadata !DIExpression()), !dbg !9997
  %0 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !9997
  %num = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %0, i32 0, i32 0, !dbg !9997
  %1 = load i32, i32* %num, align 8, !dbg !9997
  %2 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !9997
  %alloc = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %2, i32 0, i32 1, !dbg !9997
  %3 = load i32, i32* %alloc, align 4, !dbg !9997
  %cmp = icmp ult i32 %1, %3, !dbg !9997
  %conv = zext i1 %cmp to i32, !dbg !9997
  %4 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !9997
  %vec = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %4, i32 0, i32 2, !dbg !9997
  %5 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !9997
  %num1 = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %5, i32 0, i32 0, !dbg !9997
  %6 = load i32, i32* %num1, align 8, !dbg !9997
  %inc = add i32 %6, 1, !dbg !9997
  store i32 %inc, i32* %num1, align 8, !dbg !9997
  %idxprom = zext i32 %6 to i64, !dbg !9997
  %arrayidx = getelementptr inbounds [1 x %union.gimple_statement_d*], [1 x %union.gimple_statement_d*]* %vec, i64 0, i64 %idxprom, !dbg !9997
  store %union.gimple_statement_d** %arrayidx, %union.gimple_statement_d*** %slot_, align 8, !dbg !9997
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %obj_.addr, align 8, !dbg !9997
  %8 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %slot_, align 8, !dbg !9997
  store %union.gimple_statement_d* %7, %union.gimple_statement_d** %8, align 8, !dbg !9997
  %9 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %slot_, align 8, !dbg !9997
  ret %union.gimple_statement_d** %9, !dbg !9997
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_gimple_base_space(%struct.VEC_gimple_base* %vec_, i32 %alloc_) #0 !dbg !10000 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_gimple_base* %vec_, %struct.VEC_gimple_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_base** %vec_.addr, metadata !10003, metadata !DIExpression()), !dbg !10004
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !10005, metadata !DIExpression()), !dbg !10004
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !10004
  %cmp = icmp sge i32 %0, 0, !dbg !10004
  %conv = zext i1 %cmp to i32, !dbg !10004
  %1 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !10004
  %tobool = icmp ne %struct.VEC_gimple_base* %1, null, !dbg !10004
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10004

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !10004
  %alloc = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %2, i32 0, i32 1, !dbg !10004
  %3 = load i32, i32* %alloc, align 4, !dbg !10004
  %4 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !10004
  %num = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %4, i32 0, i32 0, !dbg !10004
  %5 = load i32, i32* %num, align 8, !dbg !10004
  %sub = sub i32 %3, %5, !dbg !10004
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !10004
  %cmp1 = icmp uge i32 %sub, %6, !dbg !10004
  %conv2 = zext i1 %cmp1 to i32, !dbg !10004
  br label %cond.end, !dbg !10004

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !10004
  %tobool3 = icmp ne i32 %7, 0, !dbg !10004
  %lnot = xor i1 %tobool3, true, !dbg !10004
  %lnot.ext = zext i1 %lnot to i32, !dbg !10004
  br label %cond.end, !dbg !10004

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !10004
  ret i32 %cond, !dbg !10004
}

declare dso_local i8* @vec_gc_p_reserve(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_asm_volatile_p(%union.gimple_statement_d* %gs) #0 !dbg !10006 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10007, metadata !DIExpression()), !dbg !10008
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10009
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !10010
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !10011
  %bf.load = load i32, i32* %1, align 8, !dbg !10011
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !10011
  %and = and i32 %bf.lshr, 2, !dbg !10012
  %cmp = icmp ne i32 %and, 0, !dbg !10013
  %conv = zext i1 %cmp to i32, !dbg !10013
  %conv1 = trunc i32 %conv to i8, !dbg !10014
  ret i8 %conv1, !dbg !10015
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %stmt) #0 !dbg !10016 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  %type = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !10017, metadata !DIExpression()), !dbg !10018
  call void @llvm.dbg.declare(metadata i32* %code, metadata !10019, metadata !DIExpression()), !dbg !10020
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !10021
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !10022
  store i32 %call, i32* %code, align 4, !dbg !10020
  %1 = load i32, i32* %code, align 4, !dbg !10023
  %cmp = icmp eq i32 %1, 6, !dbg !10025
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !10026

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %code, align 4, !dbg !10027
  %cmp1 = icmp eq i32 %2, 8, !dbg !10028
  br i1 %cmp1, label %if.then, label %if.else11, !dbg !10029

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !10030, metadata !DIExpression()), !dbg !10032
  %3 = load i32, i32* %code, align 4, !dbg !10033
  %cmp2 = icmp eq i32 %3, 8, !dbg !10035
  br i1 %cmp2, label %if.then3, label %if.else, !dbg !10036

if.then3:                                         ; preds = %if.then
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !10037
  %call4 = call %union.tree_node* @gimple_call_return_type(%union.gimple_statement_d* %4), !dbg !10038
  store %union.tree_node* %call4, %union.tree_node** %type, align 8, !dbg !10039
  br label %if.end, !dbg !10040

if.else:                                          ; preds = %if.then
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !10041
  %call5 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %5), !dbg !10042
  switch i32 %call5, label %sw.default [
    i32 66, label %sw.bb
  ], !dbg !10043

sw.bb:                                            ; preds = %if.else
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !10044
  %call6 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %6), !dbg !10044
  %common = bitcast %union.tree_node* %call6 to %struct.tree_common*, !dbg !10044
  %type7 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !10044
  %7 = load %union.tree_node*, %union.tree_node** %type7, align 8, !dbg !10044
  store %union.tree_node* %7, %union.tree_node** %type, align 8, !dbg !10046
  br label %sw.epilog, !dbg !10047

sw.default:                                       ; preds = %if.else
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !10048
  %call8 = call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %8), !dbg !10048
  %common9 = bitcast %union.tree_node* %call8 to %struct.tree_common*, !dbg !10048
  %type10 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common9, i32 0, i32 2, !dbg !10048
  %9 = load %union.tree_node*, %union.tree_node** %type10, align 8, !dbg !10048
  store %union.tree_node* %9, %union.tree_node** %type, align 8, !dbg !10049
  br label %sw.epilog, !dbg !10050

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  br label %if.end

if.end:                                           ; preds = %sw.epilog, %if.then3
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10051
  store %union.tree_node* %10, %union.tree_node** %retval, align 8, !dbg !10052
  br label %return, !dbg !10052

if.else11:                                        ; preds = %lor.lhs.false
  %11 = load i32, i32* %code, align 4, !dbg !10053
  %cmp12 = icmp eq i32 %11, 1, !dbg !10055
  br i1 %cmp12, label %if.then13, label %if.else14, !dbg !10056

if.then13:                                        ; preds = %if.else11
  %12 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !10057
  store %union.tree_node* %12, %union.tree_node** %retval, align 8, !dbg !10058
  br label %return, !dbg !10058

if.else14:                                        ; preds = %if.else11
  %13 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !10059
  store %union.tree_node* %13, %union.tree_node** %retval, align 8, !dbg !10060
  br label %return, !dbg !10060

return:                                           ; preds = %if.else14, %if.then13, %if.end
  %14 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !10061
  ret %union.tree_node* %14, !dbg !10061
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %gs) #0 !dbg !10062 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10063, metadata !DIExpression()), !dbg !10064
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10065
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !10067
  %cmp = icmp uge i32 %call, 3, !dbg !10068
  br i1 %cmp, label %if.then, label %if.else, !dbg !10069

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10070
  %call1 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %1, i32 2), !dbg !10071
  store %union.tree_node* %call1, %union.tree_node** %retval, align 8, !dbg !10072
  br label %return, !dbg !10072

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !10073
  br label %return, !dbg !10073

return:                                           ; preds = %if.else, %if.then
  %2 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !10074
  ret %union.tree_node* %2, !dbg !10074
}

declare dso_local zeroext i8 @operation_could_trap_p(i32, i8 zeroext, i8 zeroext, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_return_type(%union.gimple_statement_d* %gs) #0 !dbg !10075 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %fn = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10076, metadata !DIExpression()), !dbg !10077
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !10078, metadata !DIExpression()), !dbg !10079
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10080
  %call = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %0), !dbg !10081
  store %union.tree_node* %call, %union.tree_node** %fn, align 8, !dbg !10079
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !10082, metadata !DIExpression()), !dbg !10083
  %1 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !10084
  %common = bitcast %union.tree_node* %1 to %struct.tree_common*, !dbg !10084
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !10084
  %2 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !10084
  store %union.tree_node* %2, %union.tree_node** %type, align 8, !dbg !10083
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10085
  %common2 = bitcast %union.tree_node* %3 to %struct.tree_common*, !dbg !10085
  %type3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2, !dbg !10085
  %4 = load %union.tree_node*, %union.tree_node** %type3, align 8, !dbg !10085
  store %union.tree_node* %4, %union.tree_node** %type, align 8, !dbg !10086
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10087
  %common4 = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !10087
  %type5 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4, i32 0, i32 2, !dbg !10087
  %6 = load %union.tree_node*, %union.tree_node** %type5, align 8, !dbg !10087
  ret %union.tree_node* %6, !dbg !10088
}

declare dso_local i8* @vec_heap_p_reserve_exact(i8*, i32) #2

declare dso_local void @free(i8*) #2

declare dso_local %struct.pointer_map_t* @pointer_map_create() #2

declare dso_local i8** @pointer_map_contains(%struct.pointer_map_t*, i8*) #2

declare dso_local i32 @iterative_hash_hashval_t(i32, i32) #2

declare dso_local i32 @_obstack_begin(%struct.obstack*, i32, i32, i8* (i64)*, void (i8*)*) #2

declare dso_local i8* @xmalloc(i64) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @iterative_hash_gimple_type(%union.tree_node* %type, i32 %val, %struct.VEC_tree_heap** %sccstack, %struct.pointer_map_t* %sccstate, %struct.obstack* %sccstate_obstack) #0 !dbg !10089 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %val.addr = alloca i32, align 4
  %sccstack.addr = alloca %struct.VEC_tree_heap**, align 8
  %sccstate.addr = alloca %struct.pointer_map_t*, align 8
  %sccstate_obstack.addr = alloca %struct.obstack*, align 8
  %v = alloca i32, align 4
  %slot = alloca i8**, align 8
  %state = alloca %struct.sccs*, align 8
  %na = alloca i32, align 4
  %p = alloca %union.tree_node*, align 8
  %nf = alloca i32, align 4
  %f = alloca %union.tree_node*, align 8
  %x = alloca %union.tree_node*, align 8
  %cstate = alloca %struct.sccs*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !10093, metadata !DIExpression()), !dbg !10094
  store i32 %val, i32* %val.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %val.addr, metadata !10095, metadata !DIExpression()), !dbg !10096
  store %struct.VEC_tree_heap** %sccstack, %struct.VEC_tree_heap*** %sccstack.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %sccstack.addr, metadata !10097, metadata !DIExpression()), !dbg !10098
  store %struct.pointer_map_t* %sccstate, %struct.pointer_map_t** %sccstate.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pointer_map_t** %sccstate.addr, metadata !10099, metadata !DIExpression()), !dbg !10100
  store %struct.obstack* %sccstate_obstack, %struct.obstack** %sccstate_obstack.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.obstack** %sccstate_obstack.addr, metadata !10101, metadata !DIExpression()), !dbg !10102
  call void @llvm.dbg.declare(metadata i32* %v, metadata !10103, metadata !DIExpression()), !dbg !10104
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !10105, metadata !DIExpression()), !dbg !10106
  call void @llvm.dbg.declare(metadata %struct.sccs** %state, metadata !10107, metadata !DIExpression()), !dbg !10108
  %0 = load %struct.obstack*, %struct.obstack** %sccstate_obstack.addr, align 8, !dbg !10109
  %temp = getelementptr inbounds %struct.obstack, %struct.obstack* %0, i32 0, i32 5, !dbg !10109
  store i64 16, i64* %temp, align 8, !dbg !10109
  %1 = load %struct.obstack*, %struct.obstack** %sccstate_obstack.addr, align 8, !dbg !10109
  %chunk_limit = getelementptr inbounds %struct.obstack, %struct.obstack* %1, i32 0, i32 4, !dbg !10109
  %2 = load i8*, i8** %chunk_limit, align 8, !dbg !10109
  %3 = load %struct.obstack*, %struct.obstack** %sccstate_obstack.addr, align 8, !dbg !10109
  %next_free = getelementptr inbounds %struct.obstack, %struct.obstack* %3, i32 0, i32 3, !dbg !10109
  %4 = load i8*, i8** %next_free, align 8, !dbg !10109
  %sub.ptr.lhs.cast = ptrtoint i8* %2 to i64, !dbg !10109
  %sub.ptr.rhs.cast = ptrtoint i8* %4 to i64, !dbg !10109
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !10109
  %5 = load %struct.obstack*, %struct.obstack** %sccstate_obstack.addr, align 8, !dbg !10109
  %temp1 = getelementptr inbounds %struct.obstack, %struct.obstack* %5, i32 0, i32 5, !dbg !10109
  %6 = load i64, i64* %temp1, align 8, !dbg !10109
  %cmp = icmp slt i64 %sub.ptr.sub, %6, !dbg !10109
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !10109

cond.true:                                        ; preds = %entry
  %7 = load %struct.obstack*, %struct.obstack** %sccstate_obstack.addr, align 8, !dbg !10109
  %8 = load %struct.obstack*, %struct.obstack** %sccstate_obstack.addr, align 8, !dbg !10109
  %temp2 = getelementptr inbounds %struct.obstack, %struct.obstack* %8, i32 0, i32 5, !dbg !10109
  %9 = load i64, i64* %temp2, align 8, !dbg !10109
  %conv = trunc i64 %9 to i32, !dbg !10109
  call void @_obstack_newchunk(%struct.obstack* %7, i32 %conv), !dbg !10109
  br label %cond.end, !dbg !10109

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10109

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !10109
  %10 = load %struct.obstack*, %struct.obstack** %sccstate_obstack.addr, align 8, !dbg !10109
  %temp3 = getelementptr inbounds %struct.obstack, %struct.obstack* %10, i32 0, i32 5, !dbg !10109
  %11 = load i64, i64* %temp3, align 8, !dbg !10109
  %12 = load %struct.obstack*, %struct.obstack** %sccstate_obstack.addr, align 8, !dbg !10109
  %next_free4 = getelementptr inbounds %struct.obstack, %struct.obstack* %12, i32 0, i32 3, !dbg !10109
  %13 = load i8*, i8** %next_free4, align 8, !dbg !10109
  %add.ptr = getelementptr inbounds i8, i8* %13, i64 %11, !dbg !10109
  store i8* %add.ptr, i8** %next_free4, align 8, !dbg !10109
  %14 = load %struct.obstack*, %struct.obstack** %sccstate_obstack.addr, align 8, !dbg !10109
  %next_free5 = getelementptr inbounds %struct.obstack, %struct.obstack* %14, i32 0, i32 3, !dbg !10109
  %15 = load i8*, i8** %next_free5, align 8, !dbg !10109
  %16 = load %struct.obstack*, %struct.obstack** %sccstate_obstack.addr, align 8, !dbg !10109
  %object_base = getelementptr inbounds %struct.obstack, %struct.obstack* %16, i32 0, i32 2, !dbg !10109
  %17 = load i8*, i8** %object_base, align 8, !dbg !10109
  %cmp6 = icmp eq i8* %15, %17, !dbg !10109
  br i1 %cmp6, label %cond.true8, label %cond.false9, !dbg !10109

cond.true8:                                       ; preds = %cond.end
  %18 = load %struct.obstack*, %struct.obstack** %sccstate_obstack.addr, align 8, !dbg !10109
  %maybe_empty_object = getelementptr inbounds %struct.obstack, %struct.obstack* %18, i32 0, i32 10, !dbg !10109
  %bf.load = load i8, i8* %maybe_empty_object, align 8, !dbg !10109
  %bf.clear = and i8 %bf.load, -3, !dbg !10109
  %bf.set = or i8 %bf.clear, 2, !dbg !10109
  store i8 %bf.set, i8* %maybe_empty_object, align 8, !dbg !10109
  br label %cond.end10, !dbg !10109

cond.false9:                                      ; preds = %cond.end
  br label %cond.end10, !dbg !10109

cond.end10:                                       ; preds = %cond.false9, %cond.true8
  %cond11 = phi i32 [ 0, %cond.true8 ], [ 0, %cond.false9 ], !dbg !10109
  %19 = load %struct.obstack*, %struct.obstack** %sccstate_obstack.addr, align 8, !dbg !10109
  %object_base12 = getelementptr inbounds %struct.obstack, %struct.obstack* %19, i32 0, i32 2, !dbg !10109
  %20 = load i8*, i8** %object_base12, align 8, !dbg !10109
  %sub.ptr.lhs.cast13 = ptrtoint i8* %20 to i64, !dbg !10109
  %sub.ptr.sub14 = sub i64 %sub.ptr.lhs.cast13, 0, !dbg !10109
  %21 = load %struct.obstack*, %struct.obstack** %sccstate_obstack.addr, align 8, !dbg !10109
  %temp15 = getelementptr inbounds %struct.obstack, %struct.obstack* %21, i32 0, i32 5, !dbg !10109
  store i64 %sub.ptr.sub14, i64* %temp15, align 8, !dbg !10109
  %22 = load %struct.obstack*, %struct.obstack** %sccstate_obstack.addr, align 8, !dbg !10109
  %next_free16 = getelementptr inbounds %struct.obstack, %struct.obstack* %22, i32 0, i32 3, !dbg !10109
  %23 = load i8*, i8** %next_free16, align 8, !dbg !10109
  %sub.ptr.lhs.cast17 = ptrtoint i8* %23 to i64, !dbg !10109
  %sub.ptr.sub18 = sub i64 %sub.ptr.lhs.cast17, 0, !dbg !10109
  %24 = load %struct.obstack*, %struct.obstack** %sccstate_obstack.addr, align 8, !dbg !10109
  %alignment_mask = getelementptr inbounds %struct.obstack, %struct.obstack* %24, i32 0, i32 6, !dbg !10109
  %25 = load i32, i32* %alignment_mask, align 8, !dbg !10109
  %conv19 = sext i32 %25 to i64, !dbg !10109
  %add = add nsw i64 %sub.ptr.sub18, %conv19, !dbg !10109
  %26 = load %struct.obstack*, %struct.obstack** %sccstate_obstack.addr, align 8, !dbg !10109
  %alignment_mask20 = getelementptr inbounds %struct.obstack, %struct.obstack* %26, i32 0, i32 6, !dbg !10109
  %27 = load i32, i32* %alignment_mask20, align 8, !dbg !10109
  %neg = xor i32 %27, -1, !dbg !10109
  %conv21 = sext i32 %neg to i64, !dbg !10109
  %and = and i64 %add, %conv21, !dbg !10109
  %28 = inttoptr i64 %and to i8*, !dbg !10109
  %29 = load %struct.obstack*, %struct.obstack** %sccstate_obstack.addr, align 8, !dbg !10109
  %next_free22 = getelementptr inbounds %struct.obstack, %struct.obstack* %29, i32 0, i32 3, !dbg !10109
  store i8* %28, i8** %next_free22, align 8, !dbg !10109
  %30 = load %struct.obstack*, %struct.obstack** %sccstate_obstack.addr, align 8, !dbg !10109
  %next_free23 = getelementptr inbounds %struct.obstack, %struct.obstack* %30, i32 0, i32 3, !dbg !10109
  %31 = load i8*, i8** %next_free23, align 8, !dbg !10109
  %32 = load %struct.obstack*, %struct.obstack** %sccstate_obstack.addr, align 8, !dbg !10109
  %chunk = getelementptr inbounds %struct.obstack, %struct.obstack* %32, i32 0, i32 1, !dbg !10109
  %33 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8, !dbg !10109
  %34 = bitcast %struct._obstack_chunk* %33 to i8*, !dbg !10109
  %sub.ptr.lhs.cast24 = ptrtoint i8* %31 to i64, !dbg !10109
  %sub.ptr.rhs.cast25 = ptrtoint i8* %34 to i64, !dbg !10109
  %sub.ptr.sub26 = sub i64 %sub.ptr.lhs.cast24, %sub.ptr.rhs.cast25, !dbg !10109
  %35 = load %struct.obstack*, %struct.obstack** %sccstate_obstack.addr, align 8, !dbg !10109
  %chunk_limit27 = getelementptr inbounds %struct.obstack, %struct.obstack* %35, i32 0, i32 4, !dbg !10109
  %36 = load i8*, i8** %chunk_limit27, align 8, !dbg !10109
  %37 = load %struct.obstack*, %struct.obstack** %sccstate_obstack.addr, align 8, !dbg !10109
  %chunk28 = getelementptr inbounds %struct.obstack, %struct.obstack* %37, i32 0, i32 1, !dbg !10109
  %38 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk28, align 8, !dbg !10109
  %39 = bitcast %struct._obstack_chunk* %38 to i8*, !dbg !10109
  %sub.ptr.lhs.cast29 = ptrtoint i8* %36 to i64, !dbg !10109
  %sub.ptr.rhs.cast30 = ptrtoint i8* %39 to i64, !dbg !10109
  %sub.ptr.sub31 = sub i64 %sub.ptr.lhs.cast29, %sub.ptr.rhs.cast30, !dbg !10109
  %cmp32 = icmp sgt i64 %sub.ptr.sub26, %sub.ptr.sub31, !dbg !10109
  br i1 %cmp32, label %cond.true34, label %cond.false37, !dbg !10109

cond.true34:                                      ; preds = %cond.end10
  %40 = load %struct.obstack*, %struct.obstack** %sccstate_obstack.addr, align 8, !dbg !10109
  %chunk_limit35 = getelementptr inbounds %struct.obstack, %struct.obstack* %40, i32 0, i32 4, !dbg !10109
  %41 = load i8*, i8** %chunk_limit35, align 8, !dbg !10109
  %42 = load %struct.obstack*, %struct.obstack** %sccstate_obstack.addr, align 8, !dbg !10109
  %next_free36 = getelementptr inbounds %struct.obstack, %struct.obstack* %42, i32 0, i32 3, !dbg !10109
  store i8* %41, i8** %next_free36, align 8, !dbg !10109
  br label %cond.end38, !dbg !10109

cond.false37:                                     ; preds = %cond.end10
  br label %cond.end38, !dbg !10109

cond.end38:                                       ; preds = %cond.false37, %cond.true34
  %cond39 = phi i8* [ %41, %cond.true34 ], [ null, %cond.false37 ], !dbg !10109
  %43 = load %struct.obstack*, %struct.obstack** %sccstate_obstack.addr, align 8, !dbg !10109
  %next_free40 = getelementptr inbounds %struct.obstack, %struct.obstack* %43, i32 0, i32 3, !dbg !10109
  %44 = load i8*, i8** %next_free40, align 8, !dbg !10109
  %45 = load %struct.obstack*, %struct.obstack** %sccstate_obstack.addr, align 8, !dbg !10109
  %object_base41 = getelementptr inbounds %struct.obstack, %struct.obstack* %45, i32 0, i32 2, !dbg !10109
  store i8* %44, i8** %object_base41, align 8, !dbg !10109
  %46 = load %struct.obstack*, %struct.obstack** %sccstate_obstack.addr, align 8, !dbg !10109
  %temp42 = getelementptr inbounds %struct.obstack, %struct.obstack* %46, i32 0, i32 5, !dbg !10109
  %47 = load i64, i64* %temp42, align 8, !dbg !10109
  %48 = inttoptr i64 %47 to i8*, !dbg !10109
  %49 = bitcast i8* %48 to %struct.sccs*, !dbg !10109
  store %struct.sccs* %49, %struct.sccs** %state, align 8, !dbg !10110
  %50 = load %struct.sccs*, %struct.sccs** %state, align 8, !dbg !10111
  %51 = bitcast %struct.sccs* %50 to i8*, !dbg !10111
  %52 = load %struct.pointer_map_t*, %struct.pointer_map_t** %sccstate.addr, align 8, !dbg !10112
  %53 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10113
  %54 = bitcast %union.tree_node* %53 to i8*, !dbg !10113
  %call = call i8** @pointer_map_insert(%struct.pointer_map_t* %52, i8* %54), !dbg !10114
  store i8* %51, i8** %call, align 8, !dbg !10115
  %55 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %sccstack.addr, align 8, !dbg !10116
  %56 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10116
  %call43 = call %union.tree_node** @VEC_tree_heap_safe_push(%struct.VEC_tree_heap** %55, %union.tree_node* %56), !dbg !10116
  %57 = load i32, i32* @next_dfs_num, align 4, !dbg !10117
  %inc = add i32 %57, 1, !dbg !10117
  store i32 %inc, i32* @next_dfs_num, align 4, !dbg !10117
  %58 = load %struct.sccs*, %struct.sccs** %state, align 8, !dbg !10118
  %dfsnum = getelementptr inbounds %struct.sccs, %struct.sccs* %58, i32 0, i32 0, !dbg !10119
  store i32 %57, i32* %dfsnum, align 4, !dbg !10120
  %59 = load %struct.sccs*, %struct.sccs** %state, align 8, !dbg !10121
  %dfsnum44 = getelementptr inbounds %struct.sccs, %struct.sccs* %59, i32 0, i32 0, !dbg !10122
  %60 = load i32, i32* %dfsnum44, align 4, !dbg !10122
  %61 = load %struct.sccs*, %struct.sccs** %state, align 8, !dbg !10123
  %low = getelementptr inbounds %struct.sccs, %struct.sccs* %61, i32 0, i32 1, !dbg !10124
  store i32 %60, i32* %low, align 4, !dbg !10125
  %62 = load %struct.sccs*, %struct.sccs** %state, align 8, !dbg !10126
  %on_sccstack = getelementptr inbounds %struct.sccs, %struct.sccs* %62, i32 0, i32 2, !dbg !10127
  store i8 1, i8* %on_sccstack, align 4, !dbg !10128
  %63 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10129
  %base = bitcast %union.tree_node* %63 to %struct.tree_base*, !dbg !10129
  %64 = bitcast %struct.tree_base* %base to i64*, !dbg !10129
  %bf.load45 = load i64, i64* %64, align 8, !dbg !10129
  %bf.clear46 = and i64 %bf.load45, 65535, !dbg !10129
  %bf.cast = trunc i64 %bf.clear46 to i32, !dbg !10129
  %call47 = call i32 @iterative_hash_hashval_t(i32 %bf.cast, i32 0), !dbg !10130
  store i32 %call47, i32* %v, align 4, !dbg !10131
  %65 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10132
  %base48 = bitcast %union.tree_node* %65 to %struct.tree_base*, !dbg !10132
  %66 = bitcast %struct.tree_base* %base48 to i64*, !dbg !10132
  %bf.load49 = load i64, i64* %66, align 8, !dbg !10132
  %bf.lshr = lshr i64 %bf.load49, 20, !dbg !10132
  %bf.clear50 = and i64 %bf.lshr, 1, !dbg !10132
  %bf.cast51 = trunc i64 %bf.clear50 to i32, !dbg !10132
  %mul = mul nsw i32 %bf.cast51, 1, !dbg !10132
  %67 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10132
  %base52 = bitcast %union.tree_node* %67 to %struct.tree_base*, !dbg !10132
  %68 = bitcast %struct.tree_base* %base52 to i64*, !dbg !10132
  %bf.load53 = load i64, i64* %68, align 8, !dbg !10132
  %bf.lshr54 = lshr i64 %bf.load53, 19, !dbg !10132
  %bf.clear55 = and i64 %bf.lshr54, 1, !dbg !10132
  %bf.cast56 = trunc i64 %bf.clear55 to i32, !dbg !10132
  %mul57 = mul nsw i32 %bf.cast56, 2, !dbg !10132
  %or = or i32 %mul, %mul57, !dbg !10132
  %69 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10132
  %type58 = bitcast %union.tree_node* %69 to %struct.tree_type*, !dbg !10132
  %restrict_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type58, i32 0, i32 6, !dbg !10132
  %bf.load59 = load i32, i32* %restrict_flag, align 4, !dbg !10132
  %bf.lshr60 = lshr i32 %bf.load59, 13, !dbg !10132
  %bf.clear61 = and i32 %bf.lshr60, 1, !dbg !10132
  %mul62 = mul nsw i32 %bf.clear61, 4, !dbg !10132
  %or63 = or i32 %or, %mul62, !dbg !10132
  %70 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10132
  %base64 = bitcast %union.tree_node* %70 to %struct.tree_base*, !dbg !10132
  %71 = bitcast %struct.tree_base* %base64 to i64*, !dbg !10132
  %bf.load65 = load i64, i64* %71, align 8, !dbg !10132
  %bf.lshr66 = lshr i64 %bf.load65, 56, !dbg !10132
  %bf.cast67 = trunc i64 %bf.lshr66 to i32, !dbg !10132
  %and68 = and i32 %bf.cast67, 255, !dbg !10132
  %shl = shl i32 %and68, 8, !dbg !10132
  %or69 = or i32 %or63, %shl, !dbg !10132
  %72 = load i32, i32* %v, align 4, !dbg !10133
  %call70 = call i32 @iterative_hash_hashval_t(i32 %or69, i32 %72), !dbg !10134
  store i32 %call70, i32* %v, align 4, !dbg !10135
  %73 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10136
  %base71 = bitcast %union.tree_node* %73 to %struct.tree_base*, !dbg !10136
  %74 = bitcast %struct.tree_base* %base71 to i64*, !dbg !10136
  %bf.load72 = load i64, i64* %74, align 8, !dbg !10136
  %bf.lshr73 = lshr i64 %bf.load72, 18, !dbg !10136
  %bf.clear74 = and i64 %bf.lshr73, 1, !dbg !10136
  %bf.cast75 = trunc i64 %bf.clear74 to i32, !dbg !10136
  %75 = load i32, i32* %v, align 4, !dbg !10137
  %call76 = call i32 @iterative_hash_hashval_t(i32 %bf.cast75, i32 %75), !dbg !10138
  store i32 %call76, i32* %v, align 4, !dbg !10139
  %76 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10140
  %base77 = bitcast %union.tree_node* %76 to %struct.tree_base*, !dbg !10140
  %77 = bitcast %struct.tree_base* %base77 to i64*, !dbg !10140
  %bf.load78 = load i64, i64* %77, align 8, !dbg !10140
  %bf.clear79 = and i64 %bf.load78, 65535, !dbg !10140
  %bf.cast80 = trunc i64 %bf.clear79 to i32, !dbg !10140
  %cmp81 = icmp eq i32 %bf.cast80, 6, !dbg !10140
  br i1 %cmp81, label %if.then, label %lor.lhs.false, !dbg !10140

lor.lhs.false:                                    ; preds = %cond.end38
  %78 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10140
  %base83 = bitcast %union.tree_node* %78 to %struct.tree_base*, !dbg !10140
  %79 = bitcast %struct.tree_base* %base83 to i64*, !dbg !10140
  %bf.load84 = load i64, i64* %79, align 8, !dbg !10140
  %bf.clear85 = and i64 %bf.load84, 65535, !dbg !10140
  %bf.cast86 = trunc i64 %bf.clear85 to i32, !dbg !10140
  %cmp87 = icmp eq i32 %bf.cast86, 7, !dbg !10140
  br i1 %cmp87, label %if.then, label %lor.lhs.false89, !dbg !10140

lor.lhs.false89:                                  ; preds = %lor.lhs.false
  %80 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10140
  %base90 = bitcast %union.tree_node* %80 to %struct.tree_base*, !dbg !10140
  %81 = bitcast %struct.tree_base* %base90 to i64*, !dbg !10140
  %bf.load91 = load i64, i64* %81, align 8, !dbg !10140
  %bf.clear92 = and i64 %bf.load91, 65535, !dbg !10140
  %bf.cast93 = trunc i64 %bf.clear92 to i32, !dbg !10140
  %cmp94 = icmp eq i32 %bf.cast93, 8, !dbg !10140
  br i1 %cmp94, label %if.then, label %lor.lhs.false96, !dbg !10142

lor.lhs.false96:                                  ; preds = %lor.lhs.false89
  %82 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10143
  %base97 = bitcast %union.tree_node* %82 to %struct.tree_base*, !dbg !10143
  %83 = bitcast %struct.tree_base* %base97 to i64*, !dbg !10143
  %bf.load98 = load i64, i64* %83, align 8, !dbg !10143
  %bf.clear99 = and i64 %bf.load98, 65535, !dbg !10143
  %bf.cast100 = trunc i64 %bf.clear99 to i32, !dbg !10143
  %cmp101 = icmp eq i32 %bf.cast100, 9, !dbg !10143
  br i1 %cmp101, label %if.then, label %lor.lhs.false103, !dbg !10144

lor.lhs.false103:                                 ; preds = %lor.lhs.false96
  %84 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10145
  %base104 = bitcast %union.tree_node* %84 to %struct.tree_base*, !dbg !10145
  %85 = bitcast %struct.tree_base* %base104 to i64*, !dbg !10145
  %bf.load105 = load i64, i64* %85, align 8, !dbg !10145
  %bf.clear106 = and i64 %bf.load105, 65535, !dbg !10145
  %bf.cast107 = trunc i64 %bf.clear106 to i32, !dbg !10145
  %cmp108 = icmp eq i32 %bf.cast107, 11, !dbg !10145
  br i1 %cmp108, label %if.then, label %if.end, !dbg !10146

if.then:                                          ; preds = %lor.lhs.false103, %lor.lhs.false96, %lor.lhs.false89, %lor.lhs.false, %cond.end38
  %86 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10147
  %type110 = bitcast %union.tree_node* %86 to %struct.tree_type*, !dbg !10147
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type110, i32 0, i32 6, !dbg !10147
  %bf.load111 = load i32, i32* %precision, align 4, !dbg !10147
  %bf.clear112 = and i32 %bf.load111, 1023, !dbg !10147
  %87 = load i32, i32* %v, align 4, !dbg !10149
  %call113 = call i32 @iterative_hash_hashval_t(i32 %bf.clear112, i32 %87), !dbg !10150
  store i32 %call113, i32* %v, align 4, !dbg !10151
  %88 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10152
  %base114 = bitcast %union.tree_node* %88 to %struct.tree_base*, !dbg !10152
  %89 = bitcast %struct.tree_base* %base114 to i64*, !dbg !10152
  %bf.load115 = load i64, i64* %89, align 8, !dbg !10152
  %bf.clear116 = and i64 %bf.load115, 65535, !dbg !10152
  %bf.cast117 = trunc i64 %bf.clear116 to i32, !dbg !10152
  %cmp118 = icmp eq i32 %bf.cast117, 14, !dbg !10152
  br i1 %cmp118, label %cond.true120, label %cond.false122, !dbg !10152

cond.true120:                                     ; preds = %if.then
  %90 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10152
  %call121 = call i32 @vector_type_mode(%union.tree_node* %90), !dbg !10152
  br label %cond.end127, !dbg !10152

cond.false122:                                    ; preds = %if.then
  %91 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10152
  %type123 = bitcast %union.tree_node* %91 to %struct.tree_type*, !dbg !10152
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type123, i32 0, i32 6, !dbg !10152
  %bf.load124 = load i32, i32* %mode, align 4, !dbg !10152
  %bf.lshr125 = lshr i32 %bf.load124, 16, !dbg !10152
  %bf.clear126 = and i32 %bf.lshr125, 255, !dbg !10152
  br label %cond.end127, !dbg !10152

cond.end127:                                      ; preds = %cond.false122, %cond.true120
  %cond128 = phi i32 [ %call121, %cond.true120 ], [ %bf.clear126, %cond.false122 ], !dbg !10152
  %92 = load i32, i32* %v, align 4, !dbg !10153
  %call129 = call i32 @iterative_hash_hashval_t(i32 %cond128, i32 %92), !dbg !10154
  store i32 %call129, i32* %v, align 4, !dbg !10155
  %93 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10156
  %base130 = bitcast %union.tree_node* %93 to %struct.tree_base*, !dbg !10156
  %94 = bitcast %struct.tree_base* %base130 to i64*, !dbg !10156
  %bf.load131 = load i64, i64* %94, align 8, !dbg !10156
  %bf.lshr132 = lshr i64 %bf.load131, 21, !dbg !10156
  %bf.clear133 = and i64 %bf.lshr132, 1, !dbg !10156
  %bf.cast134 = trunc i64 %bf.clear133 to i32, !dbg !10156
  %95 = load i32, i32* %v, align 4, !dbg !10157
  %call135 = call i32 @iterative_hash_hashval_t(i32 %bf.cast134, i32 %95), !dbg !10158
  store i32 %call135, i32* %v, align 4, !dbg !10159
  br label %if.end, !dbg !10160

if.end:                                           ; preds = %cond.end127, %lor.lhs.false103
  %96 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10161
  %base136 = bitcast %union.tree_node* %96 to %struct.tree_base*, !dbg !10161
  %97 = bitcast %struct.tree_base* %base136 to i64*, !dbg !10161
  %bf.load137 = load i64, i64* %97, align 8, !dbg !10161
  %bf.clear138 = and i64 %bf.load137, 65535, !dbg !10161
  %bf.cast139 = trunc i64 %bf.clear138 to i32, !dbg !10161
  %cmp140 = icmp eq i32 %bf.cast139, 10, !dbg !10161
  br i1 %cmp140, label %if.then149, label %lor.lhs.false142, !dbg !10161

lor.lhs.false142:                                 ; preds = %if.end
  %98 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10161
  %base143 = bitcast %union.tree_node* %98 to %struct.tree_base*, !dbg !10161
  %99 = bitcast %struct.tree_base* %base143 to i64*, !dbg !10161
  %bf.load144 = load i64, i64* %99, align 8, !dbg !10161
  %bf.clear145 = and i64 %bf.load144, 65535, !dbg !10161
  %bf.cast146 = trunc i64 %bf.clear145 to i32, !dbg !10161
  %cmp147 = icmp eq i32 %bf.cast146, 12, !dbg !10161
  br i1 %cmp147, label %if.then149, label %if.end192, !dbg !10163

if.then149:                                       ; preds = %lor.lhs.false142, %if.end
  %100 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10164
  %common = bitcast %union.tree_node* %100 to %struct.tree_common*, !dbg !10164
  %type150 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !10164
  %101 = load %union.tree_node*, %union.tree_node** %type150, align 8, !dbg !10164
  %base151 = bitcast %union.tree_node* %101 to %struct.tree_base*, !dbg !10164
  %102 = bitcast %struct.tree_base* %base151 to i64*, !dbg !10164
  %bf.load152 = load i64, i64* %102, align 8, !dbg !10164
  %bf.clear153 = and i64 %bf.load152, 65535, !dbg !10164
  %bf.cast154 = trunc i64 %bf.clear153 to i32, !dbg !10164
  %cmp155 = icmp eq i32 %bf.cast154, 16, !dbg !10164
  br i1 %cmp155, label %if.then175, label %lor.lhs.false157, !dbg !10164

lor.lhs.false157:                                 ; preds = %if.then149
  %103 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10164
  %common158 = bitcast %union.tree_node* %103 to %struct.tree_common*, !dbg !10164
  %type159 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common158, i32 0, i32 2, !dbg !10164
  %104 = load %union.tree_node*, %union.tree_node** %type159, align 8, !dbg !10164
  %base160 = bitcast %union.tree_node* %104 to %struct.tree_base*, !dbg !10164
  %105 = bitcast %struct.tree_base* %base160 to i64*, !dbg !10164
  %bf.load161 = load i64, i64* %105, align 8, !dbg !10164
  %bf.clear162 = and i64 %bf.load161, 65535, !dbg !10164
  %bf.cast163 = trunc i64 %bf.clear162 to i32, !dbg !10164
  %cmp164 = icmp eq i32 %bf.cast163, 17, !dbg !10164
  br i1 %cmp164, label %if.then175, label %lor.lhs.false166, !dbg !10164

lor.lhs.false166:                                 ; preds = %lor.lhs.false157
  %106 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10164
  %common167 = bitcast %union.tree_node* %106 to %struct.tree_common*, !dbg !10164
  %type168 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common167, i32 0, i32 2, !dbg !10164
  %107 = load %union.tree_node*, %union.tree_node** %type168, align 8, !dbg !10164
  %base169 = bitcast %union.tree_node* %107 to %struct.tree_base*, !dbg !10164
  %108 = bitcast %struct.tree_base* %base169 to i64*, !dbg !10164
  %bf.load170 = load i64, i64* %108, align 8, !dbg !10164
  %bf.clear171 = and i64 %bf.load170, 65535, !dbg !10164
  %bf.cast172 = trunc i64 %bf.clear171 to i32, !dbg !10164
  %cmp173 = icmp eq i32 %bf.cast172, 18, !dbg !10164
  br i1 %cmp173, label %if.then175, label %if.else, !dbg !10167

if.then175:                                       ; preds = %lor.lhs.false166, %lor.lhs.false157, %if.then149
  %109 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10168
  %common176 = bitcast %union.tree_node* %109 to %struct.tree_common*, !dbg !10168
  %type177 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common176, i32 0, i32 2, !dbg !10168
  %110 = load %union.tree_node*, %union.tree_node** %type177, align 8, !dbg !10168
  %base178 = bitcast %union.tree_node* %110 to %struct.tree_base*, !dbg !10168
  %111 = bitcast %struct.tree_base* %base178 to i64*, !dbg !10168
  %bf.load179 = load i64, i64* %111, align 8, !dbg !10168
  %bf.clear180 = and i64 %bf.load179, 65535, !dbg !10168
  %bf.cast181 = trunc i64 %bf.clear180 to i32, !dbg !10168
  %112 = load i32, i32* %v, align 4, !dbg !10170
  %call182 = call i32 @iterative_hash_hashval_t(i32 %bf.cast181, i32 %112), !dbg !10171
  store i32 %call182, i32* %v, align 4, !dbg !10172
  %113 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10173
  %common183 = bitcast %union.tree_node* %113 to %struct.tree_common*, !dbg !10173
  %type184 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common183, i32 0, i32 2, !dbg !10173
  %114 = load %union.tree_node*, %union.tree_node** %type184, align 8, !dbg !10173
  %type185 = bitcast %union.tree_node* %114 to %struct.tree_type*, !dbg !10173
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type185, i32 0, i32 16, !dbg !10173
  %115 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !10173
  %type186 = bitcast %union.tree_node* %115 to %struct.tree_type*, !dbg !10173
  %name = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type186, i32 0, i32 12, !dbg !10173
  %116 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !10173
  %117 = load i32, i32* %v, align 4, !dbg !10174
  %call187 = call i32 @iterative_hash_name(%union.tree_node* %116, i32 %117), !dbg !10175
  store i32 %call187, i32* %v, align 4, !dbg !10176
  br label %if.end191, !dbg !10177

if.else:                                          ; preds = %lor.lhs.false166
  %118 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10178
  %common188 = bitcast %union.tree_node* %118 to %struct.tree_common*, !dbg !10178
  %type189 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common188, i32 0, i32 2, !dbg !10178
  %119 = load %union.tree_node*, %union.tree_node** %type189, align 8, !dbg !10178
  %120 = load %struct.sccs*, %struct.sccs** %state, align 8, !dbg !10179
  %121 = load i32, i32* %v, align 4, !dbg !10180
  %122 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %sccstack.addr, align 8, !dbg !10181
  %123 = load %struct.pointer_map_t*, %struct.pointer_map_t** %sccstate.addr, align 8, !dbg !10182
  %124 = load %struct.obstack*, %struct.obstack** %sccstate_obstack.addr, align 8, !dbg !10183
  %call190 = call i32 @visit(%union.tree_node* %119, %struct.sccs* %120, i32 %121, %struct.VEC_tree_heap** %122, %struct.pointer_map_t* %123, %struct.obstack* %124), !dbg !10184
  store i32 %call190, i32* %v, align 4, !dbg !10185
  br label %if.end191

if.end191:                                        ; preds = %if.else, %if.then175
  br label %if.end192, !dbg !10186

if.end192:                                        ; preds = %if.end191, %lor.lhs.false142
  %125 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10187
  %base193 = bitcast %union.tree_node* %125 to %struct.tree_base*, !dbg !10187
  %126 = bitcast %struct.tree_base* %base193 to i64*, !dbg !10187
  %bf.load194 = load i64, i64* %126, align 8, !dbg !10187
  %bf.clear195 = and i64 %bf.load194, 65535, !dbg !10187
  %bf.cast196 = trunc i64 %bf.clear195 to i32, !dbg !10187
  %cmp197 = icmp eq i32 %bf.cast196, 8, !dbg !10189
  br i1 %cmp197, label %if.then199, label %if.end221, !dbg !10190

if.then199:                                       ; preds = %if.end192
  %127 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10191
  %type200 = bitcast %union.tree_node* %127 to %struct.tree_type*, !dbg !10191
  %minval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type200, i32 0, i32 13, !dbg !10191
  %128 = load %union.tree_node*, %union.tree_node** %minval, align 8, !dbg !10191
  %129 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !10194
  %cmp201 = icmp ne %union.tree_node* %128, %129, !dbg !10195
  br i1 %cmp201, label %if.then203, label %if.end207, !dbg !10196

if.then203:                                       ; preds = %if.then199
  %130 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10197
  %type204 = bitcast %union.tree_node* %130 to %struct.tree_type*, !dbg !10197
  %minval205 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type204, i32 0, i32 13, !dbg !10197
  %131 = load %union.tree_node*, %union.tree_node** %minval205, align 8, !dbg !10197
  %132 = load i32, i32* %v, align 4, !dbg !10198
  %call206 = call i32 @iterative_hash_expr(%union.tree_node* %131, i32 %132), !dbg !10199
  store i32 %call206, i32* %v, align 4, !dbg !10200
  br label %if.end207, !dbg !10201

if.end207:                                        ; preds = %if.then203, %if.then199
  %133 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10202
  %type208 = bitcast %union.tree_node* %133 to %struct.tree_type*, !dbg !10202
  %maxval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type208, i32 0, i32 14, !dbg !10202
  %134 = load %union.tree_node*, %union.tree_node** %maxval, align 8, !dbg !10202
  %135 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !10204
  %cmp209 = icmp ne %union.tree_node* %134, %135, !dbg !10205
  br i1 %cmp209, label %if.then211, label %if.end215, !dbg !10206

if.then211:                                       ; preds = %if.end207
  %136 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10207
  %type212 = bitcast %union.tree_node* %136 to %struct.tree_type*, !dbg !10207
  %maxval213 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type212, i32 0, i32 14, !dbg !10207
  %137 = load %union.tree_node*, %union.tree_node** %maxval213, align 8, !dbg !10207
  %138 = load i32, i32* %v, align 4, !dbg !10208
  %call214 = call i32 @iterative_hash_expr(%union.tree_node* %137, i32 %138), !dbg !10209
  store i32 %call214, i32* %v, align 4, !dbg !10210
  br label %if.end215, !dbg !10211

if.end215:                                        ; preds = %if.then211, %if.end207
  %139 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10212
  %type216 = bitcast %union.tree_node* %139 to %struct.tree_type*, !dbg !10212
  %string_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type216, i32 0, i32 6, !dbg !10212
  %bf.load217 = load i32, i32* %string_flag, align 4, !dbg !10212
  %bf.lshr218 = lshr i32 %bf.load217, 24, !dbg !10212
  %bf.clear219 = and i32 %bf.lshr218, 1, !dbg !10212
  %140 = load i32, i32* %v, align 4, !dbg !10213
  %call220 = call i32 @iterative_hash_hashval_t(i32 %bf.clear219, i32 %140), !dbg !10214
  store i32 %call220, i32* %v, align 4, !dbg !10215
  br label %if.end221, !dbg !10216

if.end221:                                        ; preds = %if.end215, %if.end192
  %141 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10217
  %base222 = bitcast %union.tree_node* %141 to %struct.tree_base*, !dbg !10217
  %142 = bitcast %struct.tree_base* %base222 to i64*, !dbg !10217
  %bf.load223 = load i64, i64* %142, align 8, !dbg !10217
  %bf.clear224 = and i64 %bf.load223, 65535, !dbg !10217
  %bf.cast225 = trunc i64 %bf.clear224 to i32, !dbg !10217
  %cmp226 = icmp eq i32 %bf.cast225, 15, !dbg !10219
  br i1 %cmp226, label %land.lhs.true, label %if.end239, !dbg !10220

land.lhs.true:                                    ; preds = %if.end221
  %143 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10221
  %type228 = bitcast %union.tree_node* %143 to %struct.tree_type*, !dbg !10221
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type228, i32 0, i32 1, !dbg !10221
  %144 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !10221
  %tobool = icmp ne %union.tree_node* %144, null, !dbg !10221
  br i1 %tobool, label %if.then229, label %if.end239, !dbg !10222

if.then229:                                       ; preds = %land.lhs.true
  %145 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10223
  %type230 = bitcast %union.tree_node* %145 to %struct.tree_type*, !dbg !10223
  %string_flag231 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type230, i32 0, i32 6, !dbg !10223
  %bf.load232 = load i32, i32* %string_flag231, align 4, !dbg !10223
  %bf.lshr233 = lshr i32 %bf.load232, 24, !dbg !10223
  %bf.clear234 = and i32 %bf.lshr233, 1, !dbg !10223
  %146 = load i32, i32* %v, align 4, !dbg !10225
  %call235 = call i32 @iterative_hash_hashval_t(i32 %bf.clear234, i32 %146), !dbg !10226
  store i32 %call235, i32* %v, align 4, !dbg !10227
  %147 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10228
  %type236 = bitcast %union.tree_node* %147 to %struct.tree_type*, !dbg !10228
  %values237 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type236, i32 0, i32 1, !dbg !10228
  %148 = load %union.tree_node*, %union.tree_node** %values237, align 8, !dbg !10228
  %149 = load %struct.sccs*, %struct.sccs** %state, align 8, !dbg !10229
  %150 = load i32, i32* %v, align 4, !dbg !10230
  %151 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %sccstack.addr, align 8, !dbg !10231
  %152 = load %struct.pointer_map_t*, %struct.pointer_map_t** %sccstate.addr, align 8, !dbg !10232
  %153 = load %struct.obstack*, %struct.obstack** %sccstate_obstack.addr, align 8, !dbg !10233
  %call238 = call i32 @visit(%union.tree_node* %148, %struct.sccs* %149, i32 %150, %struct.VEC_tree_heap** %151, %struct.pointer_map_t* %152, %struct.obstack* %153), !dbg !10234
  store i32 %call238, i32* %v, align 4, !dbg !10235
  br label %if.end239, !dbg !10236

if.end239:                                        ; preds = %if.then229, %land.lhs.true, %if.end221
  %154 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10237
  %base240 = bitcast %union.tree_node* %154 to %struct.tree_base*, !dbg !10237
  %155 = bitcast %struct.tree_base* %base240 to i64*, !dbg !10237
  %bf.load241 = load i64, i64* %155, align 8, !dbg !10237
  %bf.clear242 = and i64 %bf.load241, 65535, !dbg !10237
  %bf.cast243 = trunc i64 %bf.clear242 to i32, !dbg !10237
  %cmp244 = icmp eq i32 %bf.cast243, 15, !dbg !10239
  br i1 %cmp244, label %if.then260, label %lor.lhs.false246, !dbg !10240

lor.lhs.false246:                                 ; preds = %if.end239
  %156 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10241
  %base247 = bitcast %union.tree_node* %156 to %struct.tree_base*, !dbg !10241
  %157 = bitcast %struct.tree_base* %base247 to i64*, !dbg !10241
  %bf.load248 = load i64, i64* %157, align 8, !dbg !10241
  %bf.clear249 = and i64 %bf.load248, 65535, !dbg !10241
  %bf.cast250 = trunc i64 %bf.clear249 to i32, !dbg !10241
  %cmp251 = icmp eq i32 %bf.cast250, 13, !dbg !10242
  br i1 %cmp251, label %if.then260, label %lor.lhs.false253, !dbg !10243

lor.lhs.false253:                                 ; preds = %lor.lhs.false246
  %158 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10244
  %base254 = bitcast %union.tree_node* %158 to %struct.tree_base*, !dbg !10244
  %159 = bitcast %struct.tree_base* %base254 to i64*, !dbg !10244
  %bf.load255 = load i64, i64* %159, align 8, !dbg !10244
  %bf.clear256 = and i64 %bf.load255, 65535, !dbg !10244
  %bf.cast257 = trunc i64 %bf.clear256 to i32, !dbg !10244
  %cmp258 = icmp eq i32 %bf.cast257, 14, !dbg !10245
  br i1 %cmp258, label %if.then260, label %if.end264, !dbg !10246

if.then260:                                       ; preds = %lor.lhs.false253, %lor.lhs.false246, %if.end239
  %160 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10247
  %common261 = bitcast %union.tree_node* %160 to %struct.tree_common*, !dbg !10247
  %type262 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common261, i32 0, i32 2, !dbg !10247
  %161 = load %union.tree_node*, %union.tree_node** %type262, align 8, !dbg !10247
  %162 = load %struct.sccs*, %struct.sccs** %state, align 8, !dbg !10248
  %163 = load i32, i32* %v, align 4, !dbg !10249
  %164 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %sccstack.addr, align 8, !dbg !10250
  %165 = load %struct.pointer_map_t*, %struct.pointer_map_t** %sccstate.addr, align 8, !dbg !10251
  %166 = load %struct.obstack*, %struct.obstack** %sccstate_obstack.addr, align 8, !dbg !10252
  %call263 = call i32 @visit(%union.tree_node* %161, %struct.sccs* %162, i32 %163, %struct.VEC_tree_heap** %164, %struct.pointer_map_t* %165, %struct.obstack* %166), !dbg !10253
  store i32 %call263, i32* %v, align 4, !dbg !10254
  br label %if.end264, !dbg !10255

if.end264:                                        ; preds = %if.then260, %lor.lhs.false253
  %167 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10256
  %base265 = bitcast %union.tree_node* %167 to %struct.tree_base*, !dbg !10256
  %168 = bitcast %struct.tree_base* %base265 to i64*, !dbg !10256
  %bf.load266 = load i64, i64* %168, align 8, !dbg !10256
  %bf.clear267 = and i64 %bf.load266, 65535, !dbg !10256
  %bf.cast268 = trunc i64 %bf.clear267 to i32, !dbg !10256
  %cmp269 = icmp eq i32 %bf.cast268, 20, !dbg !10258
  br i1 %cmp269, label %if.then278, label %lor.lhs.false271, !dbg !10259

lor.lhs.false271:                                 ; preds = %if.end264
  %169 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10260
  %base272 = bitcast %union.tree_node* %169 to %struct.tree_base*, !dbg !10260
  %170 = bitcast %struct.tree_base* %base272 to i64*, !dbg !10260
  %bf.load273 = load i64, i64* %170, align 8, !dbg !10260
  %bf.clear274 = and i64 %bf.load273, 65535, !dbg !10260
  %bf.cast275 = trunc i64 %bf.clear274 to i32, !dbg !10260
  %cmp276 = icmp eq i32 %bf.cast275, 21, !dbg !10261
  br i1 %cmp276, label %if.then278, label %if.end300, !dbg !10262

if.then278:                                       ; preds = %lor.lhs.false271, %if.end264
  call void @llvm.dbg.declare(metadata i32* %na, metadata !10263, metadata !DIExpression()), !dbg !10265
  call void @llvm.dbg.declare(metadata %union.tree_node** %p, metadata !10266, metadata !DIExpression()), !dbg !10267
  %171 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10268
  %base279 = bitcast %union.tree_node* %171 to %struct.tree_base*, !dbg !10268
  %172 = bitcast %struct.tree_base* %base279 to i64*, !dbg !10268
  %bf.load280 = load i64, i64* %172, align 8, !dbg !10268
  %bf.clear281 = and i64 %bf.load280, 65535, !dbg !10268
  %bf.cast282 = trunc i64 %bf.clear281 to i32, !dbg !10268
  %cmp283 = icmp eq i32 %bf.cast282, 21, !dbg !10270
  br i1 %cmp283, label %if.then285, label %if.end289, !dbg !10271

if.then285:                                       ; preds = %if.then278
  %173 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10272
  %type286 = bitcast %union.tree_node* %173 to %struct.tree_type*, !dbg !10272
  %maxval287 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type286, i32 0, i32 14, !dbg !10272
  %174 = load %union.tree_node*, %union.tree_node** %maxval287, align 8, !dbg !10272
  %175 = load %struct.sccs*, %struct.sccs** %state, align 8, !dbg !10273
  %176 = load i32, i32* %v, align 4, !dbg !10274
  %177 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %sccstack.addr, align 8, !dbg !10275
  %178 = load %struct.pointer_map_t*, %struct.pointer_map_t** %sccstate.addr, align 8, !dbg !10276
  %179 = load %struct.obstack*, %struct.obstack** %sccstate_obstack.addr, align 8, !dbg !10277
  %call288 = call i32 @visit(%union.tree_node* %174, %struct.sccs* %175, i32 %176, %struct.VEC_tree_heap** %177, %struct.pointer_map_t* %178, %struct.obstack* %179), !dbg !10278
  store i32 %call288, i32* %v, align 4, !dbg !10279
  br label %if.end289, !dbg !10280

if.end289:                                        ; preds = %if.then285, %if.then278
  %180 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10281
  %common290 = bitcast %union.tree_node* %180 to %struct.tree_common*, !dbg !10281
  %type291 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common290, i32 0, i32 2, !dbg !10281
  %181 = load %union.tree_node*, %union.tree_node** %type291, align 8, !dbg !10281
  %182 = load %struct.sccs*, %struct.sccs** %state, align 8, !dbg !10282
  %183 = load i32, i32* %v, align 4, !dbg !10283
  %184 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %sccstack.addr, align 8, !dbg !10284
  %185 = load %struct.pointer_map_t*, %struct.pointer_map_t** %sccstate.addr, align 8, !dbg !10285
  %186 = load %struct.obstack*, %struct.obstack** %sccstate_obstack.addr, align 8, !dbg !10286
  %call292 = call i32 @visit(%union.tree_node* %181, %struct.sccs* %182, i32 %183, %struct.VEC_tree_heap** %184, %struct.pointer_map_t* %185, %struct.obstack* %186), !dbg !10287
  store i32 %call292, i32* %v, align 4, !dbg !10288
  %187 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10289
  %type293 = bitcast %union.tree_node* %187 to %struct.tree_type*, !dbg !10289
  %values294 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type293, i32 0, i32 1, !dbg !10289
  %188 = load %union.tree_node*, %union.tree_node** %values294, align 8, !dbg !10289
  store %union.tree_node* %188, %union.tree_node** %p, align 8, !dbg !10291
  store i32 0, i32* %na, align 4, !dbg !10292
  br label %for.cond, !dbg !10293

for.cond:                                         ; preds = %for.inc, %if.end289
  %189 = load %union.tree_node*, %union.tree_node** %p, align 8, !dbg !10294
  %tobool295 = icmp ne %union.tree_node* %189, null, !dbg !10296
  br i1 %tobool295, label %for.body, label %for.end, !dbg !10296

for.body:                                         ; preds = %for.cond
  %190 = load %union.tree_node*, %union.tree_node** %p, align 8, !dbg !10297
  %list = bitcast %union.tree_node* %190 to %struct.tree_list*, !dbg !10297
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !10297
  %191 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !10297
  %192 = load %struct.sccs*, %struct.sccs** %state, align 8, !dbg !10299
  %193 = load i32, i32* %v, align 4, !dbg !10300
  %194 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %sccstack.addr, align 8, !dbg !10301
  %195 = load %struct.pointer_map_t*, %struct.pointer_map_t** %sccstate.addr, align 8, !dbg !10302
  %196 = load %struct.obstack*, %struct.obstack** %sccstate_obstack.addr, align 8, !dbg !10303
  %call296 = call i32 @visit(%union.tree_node* %191, %struct.sccs* %192, i32 %193, %struct.VEC_tree_heap** %194, %struct.pointer_map_t* %195, %struct.obstack* %196), !dbg !10304
  store i32 %call296, i32* %v, align 4, !dbg !10305
  %197 = load i32, i32* %na, align 4, !dbg !10306
  %inc297 = add i32 %197, 1, !dbg !10306
  store i32 %inc297, i32* %na, align 4, !dbg !10306
  br label %for.inc, !dbg !10307

for.inc:                                          ; preds = %for.body
  %198 = load %union.tree_node*, %union.tree_node** %p, align 8, !dbg !10308
  %common298 = bitcast %union.tree_node* %198 to %struct.tree_common*, !dbg !10308
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common298, i32 0, i32 1, !dbg !10308
  %199 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !10308
  store %union.tree_node* %199, %union.tree_node** %p, align 8, !dbg !10309
  br label %for.cond, !dbg !10310, !llvm.loop !10311

for.end:                                          ; preds = %for.cond
  %200 = load i32, i32* %na, align 4, !dbg !10313
  %201 = load i32, i32* %v, align 4, !dbg !10314
  %call299 = call i32 @iterative_hash_hashval_t(i32 %200, i32 %201), !dbg !10315
  store i32 %call299, i32* %v, align 4, !dbg !10316
  br label %if.end300, !dbg !10317

if.end300:                                        ; preds = %for.end, %lor.lhs.false271
  %202 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10318
  %base301 = bitcast %union.tree_node* %202 to %struct.tree_base*, !dbg !10318
  %203 = bitcast %struct.tree_base* %base301 to i64*, !dbg !10318
  %bf.load302 = load i64, i64* %203, align 8, !dbg !10318
  %bf.clear303 = and i64 %bf.load302, 65535, !dbg !10318
  %bf.cast304 = trunc i64 %bf.clear303 to i32, !dbg !10318
  %cmp305 = icmp eq i32 %bf.cast304, 16, !dbg !10320
  br i1 %cmp305, label %if.then321, label %lor.lhs.false307, !dbg !10321

lor.lhs.false307:                                 ; preds = %if.end300
  %204 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10322
  %base308 = bitcast %union.tree_node* %204 to %struct.tree_base*, !dbg !10322
  %205 = bitcast %struct.tree_base* %base308 to i64*, !dbg !10322
  %bf.load309 = load i64, i64* %205, align 8, !dbg !10322
  %bf.clear310 = and i64 %bf.load309, 65535, !dbg !10322
  %bf.cast311 = trunc i64 %bf.clear310 to i32, !dbg !10322
  %cmp312 = icmp eq i32 %bf.cast311, 17, !dbg !10323
  br i1 %cmp312, label %if.then321, label %lor.lhs.false314, !dbg !10324

lor.lhs.false314:                                 ; preds = %lor.lhs.false307
  %206 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10325
  %base315 = bitcast %union.tree_node* %206 to %struct.tree_base*, !dbg !10325
  %207 = bitcast %struct.tree_base* %base315 to i64*, !dbg !10325
  %bf.load316 = load i64, i64* %207, align 8, !dbg !10325
  %bf.clear317 = and i64 %bf.load316, 65535, !dbg !10325
  %bf.cast318 = trunc i64 %bf.clear317 to i32, !dbg !10325
  %cmp319 = icmp eq i32 %bf.cast318, 18, !dbg !10326
  br i1 %cmp319, label %if.then321, label %if.end343, !dbg !10327

if.then321:                                       ; preds = %lor.lhs.false314, %lor.lhs.false307, %if.end300
  call void @llvm.dbg.declare(metadata i32* %nf, metadata !10328, metadata !DIExpression()), !dbg !10330
  call void @llvm.dbg.declare(metadata %union.tree_node** %f, metadata !10331, metadata !DIExpression()), !dbg !10332
  %208 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10333
  %type322 = bitcast %union.tree_node* %208 to %struct.tree_type*, !dbg !10333
  %main_variant323 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type322, i32 0, i32 16, !dbg !10333
  %209 = load %union.tree_node*, %union.tree_node** %main_variant323, align 8, !dbg !10333
  %type324 = bitcast %union.tree_node* %209 to %struct.tree_type*, !dbg !10333
  %name325 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type324, i32 0, i32 12, !dbg !10333
  %210 = load %union.tree_node*, %union.tree_node** %name325, align 8, !dbg !10333
  %211 = load i32, i32* %v, align 4, !dbg !10334
  %call326 = call i32 @iterative_hash_name(%union.tree_node* %210, i32 %211), !dbg !10335
  store i32 %call326, i32* %v, align 4, !dbg !10336
  %212 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10337
  %type327 = bitcast %union.tree_node* %212 to %struct.tree_type*, !dbg !10337
  %values328 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type327, i32 0, i32 1, !dbg !10337
  %213 = load %union.tree_node*, %union.tree_node** %values328, align 8, !dbg !10337
  store %union.tree_node* %213, %union.tree_node** %f, align 8, !dbg !10339
  store i32 0, i32* %nf, align 4, !dbg !10340
  br label %for.cond329, !dbg !10341

for.cond329:                                      ; preds = %for.inc338, %if.then321
  %214 = load %union.tree_node*, %union.tree_node** %f, align 8, !dbg !10342
  %tobool330 = icmp ne %union.tree_node* %214, null, !dbg !10344
  br i1 %tobool330, label %for.body331, label %for.end341, !dbg !10344

for.body331:                                      ; preds = %for.cond329
  %215 = load %union.tree_node*, %union.tree_node** %f, align 8, !dbg !10345
  %decl_minimal = bitcast %union.tree_node* %215 to %struct.tree_decl_minimal*, !dbg !10345
  %name332 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 3, !dbg !10345
  %216 = load %union.tree_node*, %union.tree_node** %name332, align 8, !dbg !10345
  %217 = load i32, i32* %v, align 4, !dbg !10347
  %call333 = call i32 @iterative_hash_name(%union.tree_node* %216, i32 %217), !dbg !10348
  store i32 %call333, i32* %v, align 4, !dbg !10349
  %218 = load %union.tree_node*, %union.tree_node** %f, align 8, !dbg !10350
  %common334 = bitcast %union.tree_node* %218 to %struct.tree_common*, !dbg !10350
  %type335 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common334, i32 0, i32 2, !dbg !10350
  %219 = load %union.tree_node*, %union.tree_node** %type335, align 8, !dbg !10350
  %220 = load %struct.sccs*, %struct.sccs** %state, align 8, !dbg !10351
  %221 = load i32, i32* %v, align 4, !dbg !10352
  %222 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %sccstack.addr, align 8, !dbg !10353
  %223 = load %struct.pointer_map_t*, %struct.pointer_map_t** %sccstate.addr, align 8, !dbg !10354
  %224 = load %struct.obstack*, %struct.obstack** %sccstate_obstack.addr, align 8, !dbg !10355
  %call336 = call i32 @visit(%union.tree_node* %219, %struct.sccs* %220, i32 %221, %struct.VEC_tree_heap** %222, %struct.pointer_map_t* %223, %struct.obstack* %224), !dbg !10356
  store i32 %call336, i32* %v, align 4, !dbg !10357
  %225 = load i32, i32* %nf, align 4, !dbg !10358
  %inc337 = add i32 %225, 1, !dbg !10358
  store i32 %inc337, i32* %nf, align 4, !dbg !10358
  br label %for.inc338, !dbg !10359

for.inc338:                                       ; preds = %for.body331
  %226 = load %union.tree_node*, %union.tree_node** %f, align 8, !dbg !10360
  %common339 = bitcast %union.tree_node* %226 to %struct.tree_common*, !dbg !10360
  %chain340 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common339, i32 0, i32 1, !dbg !10360
  %227 = load %union.tree_node*, %union.tree_node** %chain340, align 8, !dbg !10360
  store %union.tree_node* %227, %union.tree_node** %f, align 8, !dbg !10361
  br label %for.cond329, !dbg !10362, !llvm.loop !10363

for.end341:                                       ; preds = %for.cond329
  %228 = load i32, i32* %nf, align 4, !dbg !10365
  %229 = load i32, i32* %v, align 4, !dbg !10366
  %call342 = call i32 @iterative_hash_hashval_t(i32 %228, i32 %229), !dbg !10367
  store i32 %call342, i32* %v, align 4, !dbg !10368
  br label %if.end343, !dbg !10369

if.end343:                                        ; preds = %for.end341, %lor.lhs.false314
  %230 = load i32, i32* %v, align 4, !dbg !10370
  %231 = load %struct.sccs*, %struct.sccs** %state, align 8, !dbg !10371
  %hash = getelementptr inbounds %struct.sccs, %struct.sccs* %231, i32 0, i32 3, !dbg !10372
  store i32 %230, i32* %hash, align 4, !dbg !10373
  %232 = load %struct.sccs*, %struct.sccs** %state, align 8, !dbg !10374
  %low344 = getelementptr inbounds %struct.sccs, %struct.sccs* %232, i32 0, i32 1, !dbg !10376
  %233 = load i32, i32* %low344, align 4, !dbg !10376
  %234 = load %struct.sccs*, %struct.sccs** %state, align 8, !dbg !10377
  %dfsnum345 = getelementptr inbounds %struct.sccs, %struct.sccs* %234, i32 0, i32 0, !dbg !10378
  %235 = load i32, i32* %dfsnum345, align 4, !dbg !10378
  %cmp346 = icmp eq i32 %233, %235, !dbg !10379
  br i1 %cmp346, label %if.then348, label %if.end369, !dbg !10380

if.then348:                                       ; preds = %if.end343
  call void @llvm.dbg.declare(metadata %union.tree_node** %x, metadata !10381, metadata !DIExpression()), !dbg !10383
  br label %do.body, !dbg !10384

do.body:                                          ; preds = %do.cond, %if.then348
  call void @llvm.dbg.declare(metadata %struct.sccs** %cstate, metadata !10385, metadata !DIExpression()), !dbg !10387
  %236 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %sccstack.addr, align 8, !dbg !10388
  %237 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %236, align 8, !dbg !10388
  %tobool349 = icmp ne %struct.VEC_tree_heap* %237, null, !dbg !10388
  br i1 %tobool349, label %cond.true350, label %cond.false352, !dbg !10388

cond.true350:                                     ; preds = %do.body
  %238 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %sccstack.addr, align 8, !dbg !10388
  %239 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %238, align 8, !dbg !10388
  %base351 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %239, i32 0, i32 0, !dbg !10388
  br label %cond.end353, !dbg !10388

cond.false352:                                    ; preds = %do.body
  br label %cond.end353, !dbg !10388

cond.end353:                                      ; preds = %cond.false352, %cond.true350
  %cond354 = phi %struct.VEC_tree_base* [ %base351, %cond.true350 ], [ null, %cond.false352 ], !dbg !10388
  %call355 = call %union.tree_node* @VEC_tree_base_pop(%struct.VEC_tree_base* %cond354), !dbg !10388
  store %union.tree_node* %call355, %union.tree_node** %x, align 8, !dbg !10389
  %240 = load %struct.pointer_map_t*, %struct.pointer_map_t** @type_hash_cache, align 8, !dbg !10390
  %241 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !10390
  %242 = bitcast %union.tree_node* %241 to i8*, !dbg !10390
  %call356 = call i8** @pointer_map_contains(%struct.pointer_map_t* %240, i8* %242), !dbg !10390
  %tobool357 = icmp ne i8** %call356, null, !dbg !10390
  br i1 %tobool357, label %cond.true358, label %cond.false359, !dbg !10390

cond.true358:                                     ; preds = %cond.end353
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 3747, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !10390
  br label %cond.end360, !dbg !10390

cond.false359:                                    ; preds = %cond.end353
  br label %cond.end360, !dbg !10390

cond.end360:                                      ; preds = %cond.false359, %cond.true358
  %cond361 = phi i32 [ 0, %cond.true358 ], [ 0, %cond.false359 ], !dbg !10390
  %243 = load %struct.pointer_map_t*, %struct.pointer_map_t** %sccstate.addr, align 8, !dbg !10391
  %244 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !10392
  %245 = bitcast %union.tree_node* %244 to i8*, !dbg !10392
  %call362 = call i8** @pointer_map_contains(%struct.pointer_map_t* %243, i8* %245), !dbg !10393
  %246 = load i8*, i8** %call362, align 8, !dbg !10394
  %247 = bitcast i8* %246 to %struct.sccs*, !dbg !10395
  store %struct.sccs* %247, %struct.sccs** %cstate, align 8, !dbg !10396
  %248 = load %struct.sccs*, %struct.sccs** %cstate, align 8, !dbg !10397
  %on_sccstack363 = getelementptr inbounds %struct.sccs, %struct.sccs* %248, i32 0, i32 2, !dbg !10398
  store i8 0, i8* %on_sccstack363, align 4, !dbg !10399
  %249 = load %struct.pointer_map_t*, %struct.pointer_map_t** @type_hash_cache, align 8, !dbg !10400
  %250 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !10401
  %251 = bitcast %union.tree_node* %250 to i8*, !dbg !10401
  %call364 = call i8** @pointer_map_insert(%struct.pointer_map_t* %249, i8* %251), !dbg !10402
  store i8** %call364, i8*** %slot, align 8, !dbg !10403
  %252 = load %struct.sccs*, %struct.sccs** %cstate, align 8, !dbg !10404
  %hash365 = getelementptr inbounds %struct.sccs, %struct.sccs* %252, i32 0, i32 3, !dbg !10405
  %253 = load i32, i32* %hash365, align 4, !dbg !10405
  %conv366 = zext i32 %253 to i64, !dbg !10406
  %254 = inttoptr i64 %conv366 to i8*, !dbg !10407
  %255 = load i8**, i8*** %slot, align 8, !dbg !10408
  store i8* %254, i8** %255, align 8, !dbg !10409
  br label %do.cond, !dbg !10410

do.cond:                                          ; preds = %cond.end360
  %256 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !10411
  %257 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10412
  %cmp367 = icmp ne %union.tree_node* %256, %257, !dbg !10413
  br i1 %cmp367, label %do.body, label %do.end, !dbg !10410, !llvm.loop !10414

do.end:                                           ; preds = %do.cond
  br label %if.end369, !dbg !10416

if.end369:                                        ; preds = %do.end, %if.end343
  %258 = load i32, i32* %v, align 4, !dbg !10417
  %259 = load i32, i32* %val.addr, align 4, !dbg !10418
  %call370 = call i32 @iterative_hash_hashval_t(i32 %258, i32 %259), !dbg !10419
  ret i32 %call370, !dbg !10420
}

declare dso_local void @_obstack_newchunk(%struct.obstack*, i32) #2

declare dso_local i8** @pointer_map_insert(%struct.pointer_map_t*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @VEC_tree_heap_safe_push(%struct.VEC_tree_heap** %vec_, %union.tree_node* %obj_) #0 !dbg !10421 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_heap**, align 8
  %obj_.addr = alloca %union.tree_node*, align 8
  store %struct.VEC_tree_heap** %vec_, %struct.VEC_tree_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vec_.addr, metadata !10424, metadata !DIExpression()), !dbg !10425
  store %union.tree_node* %obj_, %union.tree_node** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_.addr, metadata !10426, metadata !DIExpression()), !dbg !10425
  %0 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !10425
  %call = call i32 @VEC_tree_heap_reserve(%struct.VEC_tree_heap** %0, i32 1), !dbg !10425
  %1 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !10425
  %2 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %1, align 8, !dbg !10425
  %tobool = icmp ne %struct.VEC_tree_heap* %2, null, !dbg !10425
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10425

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !10425
  %4 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %3, align 8, !dbg !10425
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %4, i32 0, i32 0, !dbg !10425
  br label %cond.end, !dbg !10425

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10425

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !10425
  %5 = load %union.tree_node*, %union.tree_node** %obj_.addr, align 8, !dbg !10425
  %call1 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond, %union.tree_node* %5), !dbg !10425
  ret %union.tree_node** %call1, !dbg !10425
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @iterative_hash_name(%union.tree_node* %name, i32 %v) #0 !dbg !10427 {
entry:
  %retval = alloca i32, align 4
  %name.addr = alloca %union.tree_node*, align 8
  %v.addr = alloca i32, align 4
  store %union.tree_node* %name, %union.tree_node** %name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %name.addr, metadata !10430, metadata !DIExpression()), !dbg !10431
  store i32 %v, i32* %v.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %v.addr, metadata !10432, metadata !DIExpression()), !dbg !10433
  %0 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !10434
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !10434
  br i1 %tobool, label %if.end, label %if.then, !dbg !10436

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %v.addr, align 4, !dbg !10437
  store i32 %1, i32* %retval, align 4, !dbg !10438
  br label %return, !dbg !10438

if.end:                                           ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !10439
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !10439
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !10439
  %bf.load = load i64, i64* %3, align 8, !dbg !10439
  %bf.clear = and i64 %bf.load, 65535, !dbg !10439
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !10439
  %cmp = icmp eq i32 %bf.cast, 35, !dbg !10441
  br i1 %cmp, label %if.then1, label %if.end3, !dbg !10442

if.then1:                                         ; preds = %if.end
  %4 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !10443
  %decl_minimal = bitcast %union.tree_node* %4 to %struct.tree_decl_minimal*, !dbg !10443
  %name2 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 3, !dbg !10443
  %5 = load %union.tree_node*, %union.tree_node** %name2, align 8, !dbg !10443
  store %union.tree_node* %5, %union.tree_node** %name.addr, align 8, !dbg !10444
  br label %if.end3, !dbg !10445

if.end3:                                          ; preds = %if.then1, %if.end
  %6 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !10446
  %tobool4 = icmp ne %union.tree_node* %6, null, !dbg !10446
  br i1 %tobool4, label %if.end6, label %if.then5, !dbg !10448

if.then5:                                         ; preds = %if.end3
  %7 = load i32, i32* %v.addr, align 4, !dbg !10449
  store i32 %7, i32* %retval, align 4, !dbg !10450
  br label %return, !dbg !10450

if.end6:                                          ; preds = %if.end3
  %8 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !10451
  %base7 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !10451
  %9 = bitcast %struct.tree_base* %base7 to i64*, !dbg !10451
  %bf.load8 = load i64, i64* %9, align 8, !dbg !10451
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !10451
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !10451
  %cmp11 = icmp eq i32 %bf.cast10, 1, !dbg !10451
  br i1 %cmp11, label %cond.false, label %cond.true, !dbg !10451

cond.true:                                        ; preds = %if.end6
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 3586, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !10451
  br label %cond.end, !dbg !10451

cond.false:                                       ; preds = %if.end6
  br label %cond.end, !dbg !10451

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !10451
  %10 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !10452
  %identifier = bitcast %union.tree_node* %10 to %struct.tree_identifier*, !dbg !10452
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1, !dbg !10452
  %hash_value = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 2, !dbg !10452
  %11 = bitcast i32* %hash_value to i8*, !dbg !10452
  %12 = load i32, i32* %v.addr, align 4, !dbg !10452
  %call = call i32 @iterative_hash(i8* %11, i64 4, i32 %12), !dbg !10452
  store i32 %call, i32* %retval, align 4, !dbg !10453
  br label %return, !dbg !10453

return:                                           ; preds = %cond.end, %if.then5, %if.then
  %13 = load i32, i32* %retval, align 4, !dbg !10454
  ret i32 %13, !dbg !10454
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @visit(%union.tree_node* %t, %struct.sccs* %state, i32 %v, %struct.VEC_tree_heap** %sccstack, %struct.pointer_map_t* %sccstate, %struct.obstack* %sccstate_obstack) #0 !dbg !10455 {
entry:
  %retval = alloca i32, align 4
  %t.addr = alloca %union.tree_node*, align 8
  %state.addr = alloca %struct.sccs*, align 8
  %v.addr = alloca i32, align 4
  %sccstack.addr = alloca %struct.VEC_tree_heap**, align 8
  %sccstate.addr = alloca %struct.pointer_map_t*, align 8
  %sccstate_obstack.addr = alloca %struct.obstack*, align 8
  %cstate = alloca %struct.sccs*, align 8
  %slot = alloca i8**, align 8
  %tem = alloca i32, align 4
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !10458, metadata !DIExpression()), !dbg !10459
  store %struct.sccs* %state, %struct.sccs** %state.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sccs** %state.addr, metadata !10460, metadata !DIExpression()), !dbg !10461
  store i32 %v, i32* %v.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %v.addr, metadata !10462, metadata !DIExpression()), !dbg !10463
  store %struct.VEC_tree_heap** %sccstack, %struct.VEC_tree_heap*** %sccstack.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %sccstack.addr, metadata !10464, metadata !DIExpression()), !dbg !10465
  store %struct.pointer_map_t* %sccstate, %struct.pointer_map_t** %sccstate.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pointer_map_t** %sccstate.addr, metadata !10466, metadata !DIExpression()), !dbg !10467
  store %struct.obstack* %sccstate_obstack, %struct.obstack** %sccstate_obstack.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.obstack** %sccstate_obstack.addr, metadata !10468, metadata !DIExpression()), !dbg !10469
  call void @llvm.dbg.declare(metadata %struct.sccs** %cstate, metadata !10470, metadata !DIExpression()), !dbg !10471
  store %struct.sccs* null, %struct.sccs** %cstate, align 8, !dbg !10471
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !10472, metadata !DIExpression()), !dbg !10473
  %0 = load %struct.pointer_map_t*, %struct.pointer_map_t** @type_hash_cache, align 8, !dbg !10474
  %1 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !10476
  %2 = bitcast %union.tree_node* %1 to i8*, !dbg !10476
  %call = call i8** @pointer_map_contains(%struct.pointer_map_t* %0, i8* %2), !dbg !10477
  store i8** %call, i8*** %slot, align 8, !dbg !10478
  %tobool = icmp ne i8** %call, null, !dbg !10478
  br i1 %tobool, label %if.then, label %if.end, !dbg !10479

if.then:                                          ; preds = %entry
  %3 = load i8**, i8*** %slot, align 8, !dbg !10480
  %4 = load i8*, i8** %3, align 8, !dbg !10481
  %5 = ptrtoint i8* %4 to i64, !dbg !10482
  %conv = trunc i64 %5 to i32, !dbg !10483
  %6 = load i32, i32* %v.addr, align 4, !dbg !10484
  %call1 = call i32 @iterative_hash_hashval_t(i32 %conv, i32 %6), !dbg !10485
  store i32 %call1, i32* %retval, align 4, !dbg !10486
  br label %return, !dbg !10486

if.end:                                           ; preds = %entry
  %7 = load %struct.pointer_map_t*, %struct.pointer_map_t** %sccstate.addr, align 8, !dbg !10487
  %8 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !10489
  %9 = bitcast %union.tree_node* %8 to i8*, !dbg !10489
  %call2 = call i8** @pointer_map_contains(%struct.pointer_map_t* %7, i8* %9), !dbg !10490
  store i8** %call2, i8*** %slot, align 8, !dbg !10491
  %cmp = icmp ne i8** %call2, null, !dbg !10492
  br i1 %cmp, label %if.then4, label %if.end5, !dbg !10493

if.then4:                                         ; preds = %if.end
  %10 = load i8**, i8*** %slot, align 8, !dbg !10494
  %11 = load i8*, i8** %10, align 8, !dbg !10495
  %12 = bitcast i8* %11 to %struct.sccs*, !dbg !10496
  store %struct.sccs* %12, %struct.sccs** %cstate, align 8, !dbg !10497
  br label %if.end5, !dbg !10498

if.end5:                                          ; preds = %if.then4, %if.end
  %13 = load %struct.sccs*, %struct.sccs** %cstate, align 8, !dbg !10499
  %tobool6 = icmp ne %struct.sccs* %13, null, !dbg !10499
  br i1 %tobool6, label %if.end22, label %if.then7, !dbg !10501

if.then7:                                         ; preds = %if.end5
  call void @llvm.dbg.declare(metadata i32* %tem, metadata !10502, metadata !DIExpression()), !dbg !10504
  %14 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !10505
  %15 = load i32, i32* %v.addr, align 4, !dbg !10506
  %16 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %sccstack.addr, align 8, !dbg !10507
  %17 = load %struct.pointer_map_t*, %struct.pointer_map_t** %sccstate.addr, align 8, !dbg !10508
  %18 = load %struct.obstack*, %struct.obstack** %sccstate_obstack.addr, align 8, !dbg !10509
  %call8 = call i32 @iterative_hash_gimple_type(%union.tree_node* %14, i32 %15, %struct.VEC_tree_heap** %16, %struct.pointer_map_t* %17, %struct.obstack* %18), !dbg !10510
  store i32 %call8, i32* %tem, align 4, !dbg !10511
  %19 = load %struct.sccs*, %struct.sccs** %cstate, align 8, !dbg !10512
  %tobool9 = icmp ne %struct.sccs* %19, null, !dbg !10512
  br i1 %tobool9, label %if.end12, label %if.then10, !dbg !10514

if.then10:                                        ; preds = %if.then7
  %20 = load %struct.pointer_map_t*, %struct.pointer_map_t** %sccstate.addr, align 8, !dbg !10515
  %21 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !10516
  %22 = bitcast %union.tree_node* %21 to i8*, !dbg !10516
  %call11 = call i8** @pointer_map_contains(%struct.pointer_map_t* %20, i8* %22), !dbg !10517
  %23 = load i8*, i8** %call11, align 8, !dbg !10518
  %24 = bitcast i8* %23 to %struct.sccs*, !dbg !10519
  store %struct.sccs* %24, %struct.sccs** %cstate, align 8, !dbg !10520
  br label %if.end12, !dbg !10521

if.end12:                                         ; preds = %if.then10, %if.then7
  %25 = load %struct.sccs*, %struct.sccs** %state.addr, align 8, !dbg !10522
  %low = getelementptr inbounds %struct.sccs, %struct.sccs* %25, i32 0, i32 1, !dbg !10522
  %26 = load i32, i32* %low, align 4, !dbg !10522
  %27 = load %struct.sccs*, %struct.sccs** %cstate, align 8, !dbg !10522
  %low13 = getelementptr inbounds %struct.sccs, %struct.sccs* %27, i32 0, i32 1, !dbg !10522
  %28 = load i32, i32* %low13, align 4, !dbg !10522
  %cmp14 = icmp ult i32 %26, %28, !dbg !10522
  br i1 %cmp14, label %cond.true, label %cond.false, !dbg !10522

cond.true:                                        ; preds = %if.end12
  %29 = load %struct.sccs*, %struct.sccs** %state.addr, align 8, !dbg !10522
  %low16 = getelementptr inbounds %struct.sccs, %struct.sccs* %29, i32 0, i32 1, !dbg !10522
  %30 = load i32, i32* %low16, align 4, !dbg !10522
  br label %cond.end, !dbg !10522

cond.false:                                       ; preds = %if.end12
  %31 = load %struct.sccs*, %struct.sccs** %cstate, align 8, !dbg !10522
  %low17 = getelementptr inbounds %struct.sccs, %struct.sccs* %31, i32 0, i32 1, !dbg !10522
  %32 = load i32, i32* %low17, align 4, !dbg !10522
  br label %cond.end, !dbg !10522

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %30, %cond.true ], [ %32, %cond.false ], !dbg !10522
  %33 = load %struct.sccs*, %struct.sccs** %state.addr, align 8, !dbg !10523
  %low18 = getelementptr inbounds %struct.sccs, %struct.sccs* %33, i32 0, i32 1, !dbg !10524
  store i32 %cond, i32* %low18, align 4, !dbg !10525
  %34 = load %struct.sccs*, %struct.sccs** %cstate, align 8, !dbg !10526
  %on_sccstack = getelementptr inbounds %struct.sccs, %struct.sccs* %34, i32 0, i32 2, !dbg !10528
  %35 = load i8, i8* %on_sccstack, align 4, !dbg !10528
  %tobool19 = icmp ne i8 %35, 0, !dbg !10526
  br i1 %tobool19, label %if.end21, label %if.then20, !dbg !10529

if.then20:                                        ; preds = %cond.end
  %36 = load i32, i32* %tem, align 4, !dbg !10530
  store i32 %36, i32* %retval, align 4, !dbg !10531
  br label %return, !dbg !10531

if.end21:                                         ; preds = %cond.end
  br label %if.end22, !dbg !10532

if.end22:                                         ; preds = %if.end21, %if.end5
  %37 = load %struct.sccs*, %struct.sccs** %cstate, align 8, !dbg !10533
  %dfsnum = getelementptr inbounds %struct.sccs, %struct.sccs* %37, i32 0, i32 0, !dbg !10535
  %38 = load i32, i32* %dfsnum, align 4, !dbg !10535
  %39 = load %struct.sccs*, %struct.sccs** %state.addr, align 8, !dbg !10536
  %dfsnum23 = getelementptr inbounds %struct.sccs, %struct.sccs* %39, i32 0, i32 0, !dbg !10537
  %40 = load i32, i32* %dfsnum23, align 4, !dbg !10537
  %cmp24 = icmp ult i32 %38, %40, !dbg !10538
  br i1 %cmp24, label %land.lhs.true, label %if.end41, !dbg !10539

land.lhs.true:                                    ; preds = %if.end22
  %41 = load %struct.sccs*, %struct.sccs** %cstate, align 8, !dbg !10540
  %on_sccstack26 = getelementptr inbounds %struct.sccs, %struct.sccs* %41, i32 0, i32 2, !dbg !10541
  %42 = load i8, i8* %on_sccstack26, align 4, !dbg !10541
  %conv27 = zext i8 %42 to i32, !dbg !10540
  %tobool28 = icmp ne i32 %conv27, 0, !dbg !10540
  br i1 %tobool28, label %if.then29, label %if.end41, !dbg !10542

if.then29:                                        ; preds = %land.lhs.true
  %43 = load %struct.sccs*, %struct.sccs** %cstate, align 8, !dbg !10543
  %dfsnum30 = getelementptr inbounds %struct.sccs, %struct.sccs* %43, i32 0, i32 0, !dbg !10543
  %44 = load i32, i32* %dfsnum30, align 4, !dbg !10543
  %45 = load %struct.sccs*, %struct.sccs** %state.addr, align 8, !dbg !10543
  %low31 = getelementptr inbounds %struct.sccs, %struct.sccs* %45, i32 0, i32 1, !dbg !10543
  %46 = load i32, i32* %low31, align 4, !dbg !10543
  %cmp32 = icmp ult i32 %44, %46, !dbg !10543
  br i1 %cmp32, label %cond.true34, label %cond.false36, !dbg !10543

cond.true34:                                      ; preds = %if.then29
  %47 = load %struct.sccs*, %struct.sccs** %cstate, align 8, !dbg !10543
  %dfsnum35 = getelementptr inbounds %struct.sccs, %struct.sccs* %47, i32 0, i32 0, !dbg !10543
  %48 = load i32, i32* %dfsnum35, align 4, !dbg !10543
  br label %cond.end38, !dbg !10543

cond.false36:                                     ; preds = %if.then29
  %49 = load %struct.sccs*, %struct.sccs** %state.addr, align 8, !dbg !10543
  %low37 = getelementptr inbounds %struct.sccs, %struct.sccs* %49, i32 0, i32 1, !dbg !10543
  %50 = load i32, i32* %low37, align 4, !dbg !10543
  br label %cond.end38, !dbg !10543

cond.end38:                                       ; preds = %cond.false36, %cond.true34
  %cond39 = phi i32 [ %48, %cond.true34 ], [ %50, %cond.false36 ], !dbg !10543
  %51 = load %struct.sccs*, %struct.sccs** %state.addr, align 8, !dbg !10544
  %low40 = getelementptr inbounds %struct.sccs, %struct.sccs* %51, i32 0, i32 1, !dbg !10545
  store i32 %cond39, i32* %low40, align 4, !dbg !10546
  br label %if.end41, !dbg !10544

if.end41:                                         ; preds = %cond.end38, %land.lhs.true, %if.end22
  %52 = load i32, i32* %v.addr, align 4, !dbg !10547
  store i32 %52, i32* %retval, align 4, !dbg !10548
  br label %return, !dbg !10548

return:                                           ; preds = %if.end41, %if.then20, %if.then
  %53 = load i32, i32* %retval, align 4, !dbg !10549
  ret i32 %53, !dbg !10549
}

declare dso_local i32 @iterative_hash_expr(%union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @VEC_tree_base_pop(%struct.VEC_tree_base* %vec_) #0 !dbg !10550 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %obj_ = alloca %union.tree_node*, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !10553, metadata !DIExpression()), !dbg !10554
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_, metadata !10555, metadata !DIExpression()), !dbg !10554
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !10554
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %0, i32 0, i32 0, !dbg !10554
  %1 = load i32, i32* %num, align 8, !dbg !10554
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !10554
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 2, !dbg !10554
  %3 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !10554
  %num1 = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %3, i32 0, i32 0, !dbg !10554
  %4 = load i32, i32* %num1, align 8, !dbg !10554
  %dec = add i32 %4, -1, !dbg !10554
  store i32 %dec, i32* %num1, align 8, !dbg !10554
  %idxprom = zext i32 %dec to i64, !dbg !10554
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !10554
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !10554
  store %union.tree_node* %5, %union.tree_node** %obj_, align 8, !dbg !10554
  %6 = load %union.tree_node*, %union.tree_node** %obj_, align 8, !dbg !10554
  ret %union.tree_node* %6, !dbg !10554
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_heap_reserve(%struct.VEC_tree_heap** %vec_, i32 %alloc_) #0 !dbg !10556 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_tree_heap** %vec_, %struct.VEC_tree_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vec_.addr, metadata !10559, metadata !DIExpression()), !dbg !10560
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !10561, metadata !DIExpression()), !dbg !10560
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !10562, metadata !DIExpression()), !dbg !10560
  %0 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !10560
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %0, align 8, !dbg !10560
  %tobool = icmp ne %struct.VEC_tree_heap* %1, null, !dbg !10560
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10560

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !10560
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %2, align 8, !dbg !10560
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %3, i32 0, i32 0, !dbg !10560
  br label %cond.end, !dbg !10560

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10560

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !10560
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !10560
  %call = call i32 @VEC_tree_base_space(%struct.VEC_tree_base* %cond, i32 %4), !dbg !10560
  %tobool1 = icmp ne i32 %call, 0, !dbg !10560
  %lnot = xor i1 %tobool1, true, !dbg !10560
  %lnot.ext = zext i1 %lnot to i32, !dbg !10560
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !10560
  %5 = load i32, i32* %extend, align 4, !dbg !10563
  %tobool2 = icmp ne i32 %5, 0, !dbg !10563
  br i1 %tobool2, label %if.then, label %if.end, !dbg !10560

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !10563
  %7 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %6, align 8, !dbg !10563
  %8 = bitcast %struct.VEC_tree_heap* %7 to i8*, !dbg !10563
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !10563
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !10563
  %10 = bitcast i8* %call3 to %struct.VEC_tree_heap*, !dbg !10563
  %11 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !10563
  store %struct.VEC_tree_heap* %10, %struct.VEC_tree_heap** %11, align 8, !dbg !10563
  br label %if.end, !dbg !10563

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !10560
  ret i32 %12, !dbg !10560
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_space(%struct.VEC_tree_base* %vec_, i32 %alloc_) #0 !dbg !10565 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !10568, metadata !DIExpression()), !dbg !10569
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !10570, metadata !DIExpression()), !dbg !10569
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !10569
  %cmp = icmp sge i32 %0, 0, !dbg !10569
  %conv = zext i1 %cmp to i32, !dbg !10569
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !10569
  %tobool = icmp ne %struct.VEC_tree_base* %1, null, !dbg !10569
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10569

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !10569
  %alloc = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 1, !dbg !10569
  %3 = load i32, i32* %alloc, align 4, !dbg !10569
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !10569
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 0, !dbg !10569
  %5 = load i32, i32* %num, align 8, !dbg !10569
  %sub = sub i32 %3, %5, !dbg !10569
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !10569
  %cmp1 = icmp uge i32 %sub, %6, !dbg !10569
  %conv2 = zext i1 %cmp1 to i32, !dbg !10569
  br label %cond.end, !dbg !10569

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !10569
  %tobool3 = icmp ne i32 %7, 0, !dbg !10569
  %lnot = xor i1 %tobool3, true, !dbg !10569
  %lnot.ext = zext i1 %lnot to i32, !dbg !10569
  br label %cond.end, !dbg !10569

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !10569
  ret i32 %cond, !dbg !10569
}

declare dso_local i8* @vec_heap_p_reserve(i8*, i32) #2

declare dso_local i32 @iterative_hash(i8*, i64, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_types_compatible_p(%union.tree_node* %t1, %union.tree_node* %t2) #0 !dbg !10571 {
entry:
  %retval = alloca i32, align 4
  %t1.addr = alloca %union.tree_node*, align 8
  %t2.addr = alloca %union.tree_node*, align 8
  %p = alloca %struct.type_pair_d*, align 8
  %i1 = alloca %union.tree_node*, align 8
  %i2 = alloca %union.tree_node*, align 8
  %min1 = alloca %union.tree_node*, align 8
  %min2 = alloca %union.tree_node*, align 8
  %max1 = alloca %union.tree_node*, align 8
  %max2 = alloca %union.tree_node*, align 8
  %parms1 = alloca %union.tree_node*, align 8
  %parms2 = alloca %union.tree_node*, align 8
  %min1543 = alloca %union.tree_node*, align 8
  %max1546 = alloca %union.tree_node*, align 8
  %min2549 = alloca %union.tree_node*, align 8
  %max2552 = alloca %union.tree_node*, align 8
  %min_equal_p = alloca i8, align 1
  %max_equal_p = alloca i8, align 1
  %v1 = alloca %union.tree_node*, align 8
  %v2 = alloca %union.tree_node*, align 8
  %c1 = alloca %union.tree_node*, align 8
  %c2 = alloca %union.tree_node*, align 8
  %f1 = alloca %union.tree_node*, align 8
  %f2 = alloca %union.tree_node*, align 8
  store %union.tree_node* %t1, %union.tree_node** %t1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t1.addr, metadata !10574, metadata !DIExpression()), !dbg !10575
  store %union.tree_node* %t2, %union.tree_node** %t2.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t2.addr, metadata !10576, metadata !DIExpression()), !dbg !10577
  call void @llvm.dbg.declare(metadata %struct.type_pair_d** %p, metadata !10578, metadata !DIExpression()), !dbg !10579
  store %struct.type_pair_d* null, %struct.type_pair_d** %p, align 8, !dbg !10579
  %0 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !10580
  %1 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !10582
  %cmp = icmp eq %union.tree_node* %0, %1, !dbg !10583
  br i1 %cmp, label %if.then, label %if.end, !dbg !10584

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4, !dbg !10585
  br label %return, !dbg !10585

if.end:                                           ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !10586
  %cmp1 = icmp eq %union.tree_node* %2, null, !dbg !10588
  br i1 %cmp1, label %if.then3, label %lor.lhs.false, !dbg !10589

lor.lhs.false:                                    ; preds = %if.end
  %3 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !10590
  %cmp2 = icmp eq %union.tree_node* %3, null, !dbg !10591
  br i1 %cmp2, label %if.then3, label %if.end4, !dbg !10592

if.then3:                                         ; preds = %lor.lhs.false, %if.end
  store i32 0, i32* %retval, align 4, !dbg !10593
  br label %return, !dbg !10593

if.end4:                                          ; preds = %lor.lhs.false
  %4 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !10594
  %base = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !10594
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !10594
  %bf.load = load i64, i64* %5, align 8, !dbg !10594
  %bf.clear = and i64 %bf.load, 65535, !dbg !10594
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !10594
  %6 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !10596
  %base5 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !10596
  %7 = bitcast %struct.tree_base* %base5 to i64*, !dbg !10596
  %bf.load6 = load i64, i64* %7, align 8, !dbg !10596
  %bf.clear7 = and i64 %bf.load6, 65535, !dbg !10596
  %bf.cast8 = trunc i64 %bf.clear7 to i32, !dbg !10596
  %cmp9 = icmp ne i32 %bf.cast, %bf.cast8, !dbg !10597
  br i1 %cmp9, label %if.then10, label %if.end11, !dbg !10598

if.then10:                                        ; preds = %if.end4
  store i32 0, i32* %retval, align 4, !dbg !10599
  br label %return, !dbg !10599

if.end11:                                         ; preds = %if.end4
  %8 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !10600
  %base12 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !10600
  %9 = bitcast %struct.tree_base* %base12 to i64*, !dbg !10600
  %bf.load13 = load i64, i64* %9, align 8, !dbg !10600
  %bf.lshr = lshr i64 %bf.load13, 20, !dbg !10600
  %bf.clear14 = and i64 %bf.lshr, 1, !dbg !10600
  %bf.cast15 = trunc i64 %bf.clear14 to i32, !dbg !10600
  %mul = mul nsw i32 %bf.cast15, 1, !dbg !10600
  %10 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !10600
  %base16 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !10600
  %11 = bitcast %struct.tree_base* %base16 to i64*, !dbg !10600
  %bf.load17 = load i64, i64* %11, align 8, !dbg !10600
  %bf.lshr18 = lshr i64 %bf.load17, 19, !dbg !10600
  %bf.clear19 = and i64 %bf.lshr18, 1, !dbg !10600
  %bf.cast20 = trunc i64 %bf.clear19 to i32, !dbg !10600
  %mul21 = mul nsw i32 %bf.cast20, 2, !dbg !10600
  %or = or i32 %mul, %mul21, !dbg !10600
  %12 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !10600
  %type = bitcast %union.tree_node* %12 to %struct.tree_type*, !dbg !10600
  %restrict_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 6, !dbg !10600
  %bf.load22 = load i32, i32* %restrict_flag, align 4, !dbg !10600
  %bf.lshr23 = lshr i32 %bf.load22, 13, !dbg !10600
  %bf.clear24 = and i32 %bf.lshr23, 1, !dbg !10600
  %mul25 = mul nsw i32 %bf.clear24, 4, !dbg !10600
  %or26 = or i32 %or, %mul25, !dbg !10600
  %13 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !10600
  %base27 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !10600
  %14 = bitcast %struct.tree_base* %base27 to i64*, !dbg !10600
  %bf.load28 = load i64, i64* %14, align 8, !dbg !10600
  %bf.lshr29 = lshr i64 %bf.load28, 56, !dbg !10600
  %bf.cast30 = trunc i64 %bf.lshr29 to i32, !dbg !10600
  %and = and i32 %bf.cast30, 255, !dbg !10600
  %shl = shl i32 %and, 8, !dbg !10600
  %or31 = or i32 %or26, %shl, !dbg !10600
  %15 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !10602
  %base32 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !10602
  %16 = bitcast %struct.tree_base* %base32 to i64*, !dbg !10602
  %bf.load33 = load i64, i64* %16, align 8, !dbg !10602
  %bf.lshr34 = lshr i64 %bf.load33, 20, !dbg !10602
  %bf.clear35 = and i64 %bf.lshr34, 1, !dbg !10602
  %bf.cast36 = trunc i64 %bf.clear35 to i32, !dbg !10602
  %mul37 = mul nsw i32 %bf.cast36, 1, !dbg !10602
  %17 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !10602
  %base38 = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !10602
  %18 = bitcast %struct.tree_base* %base38 to i64*, !dbg !10602
  %bf.load39 = load i64, i64* %18, align 8, !dbg !10602
  %bf.lshr40 = lshr i64 %bf.load39, 19, !dbg !10602
  %bf.clear41 = and i64 %bf.lshr40, 1, !dbg !10602
  %bf.cast42 = trunc i64 %bf.clear41 to i32, !dbg !10602
  %mul43 = mul nsw i32 %bf.cast42, 2, !dbg !10602
  %or44 = or i32 %mul37, %mul43, !dbg !10602
  %19 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !10602
  %type45 = bitcast %union.tree_node* %19 to %struct.tree_type*, !dbg !10602
  %restrict_flag46 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type45, i32 0, i32 6, !dbg !10602
  %bf.load47 = load i32, i32* %restrict_flag46, align 4, !dbg !10602
  %bf.lshr48 = lshr i32 %bf.load47, 13, !dbg !10602
  %bf.clear49 = and i32 %bf.lshr48, 1, !dbg !10602
  %mul50 = mul nsw i32 %bf.clear49, 4, !dbg !10602
  %or51 = or i32 %or44, %mul50, !dbg !10602
  %20 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !10602
  %base52 = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !10602
  %21 = bitcast %struct.tree_base* %base52 to i64*, !dbg !10602
  %bf.load53 = load i64, i64* %21, align 8, !dbg !10602
  %bf.lshr54 = lshr i64 %bf.load53, 56, !dbg !10602
  %bf.cast55 = trunc i64 %bf.lshr54 to i32, !dbg !10602
  %and56 = and i32 %bf.cast55, 255, !dbg !10602
  %shl57 = shl i32 %and56, 8, !dbg !10602
  %or58 = or i32 %or51, %shl57, !dbg !10602
  %cmp59 = icmp ne i32 %or31, %or58, !dbg !10603
  br i1 %cmp59, label %if.then60, label %if.end61, !dbg !10604

if.then60:                                        ; preds = %if.end11
  store i32 0, i32* %retval, align 4, !dbg !10605
  br label %return, !dbg !10605

if.end61:                                         ; preds = %if.end11
  %22 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !10606
  %base62 = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !10606
  %23 = bitcast %struct.tree_base* %base62 to i64*, !dbg !10606
  %bf.load63 = load i64, i64* %23, align 8, !dbg !10606
  %bf.clear64 = and i64 %bf.load63, 65535, !dbg !10606
  %bf.cast65 = trunc i64 %bf.clear64 to i32, !dbg !10606
  %cmp66 = icmp eq i32 %bf.cast65, 19, !dbg !10608
  br i1 %cmp66, label %if.then67, label %if.end68, !dbg !10609

if.then67:                                        ; preds = %if.end61
  store i32 1, i32* %retval, align 4, !dbg !10610
  br label %return, !dbg !10610

if.end68:                                         ; preds = %if.end61
  %24 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !10611
  %base69 = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !10611
  %25 = bitcast %struct.tree_base* %base69 to i64*, !dbg !10611
  %bf.load70 = load i64, i64* %25, align 8, !dbg !10611
  %bf.clear71 = and i64 %bf.load70, 65535, !dbg !10611
  %bf.cast72 = trunc i64 %bf.clear71 to i32, !dbg !10611
  %cmp73 = icmp eq i32 %bf.cast72, 6, !dbg !10611
  br i1 %cmp73, label %if.then116, label %lor.lhs.false74, !dbg !10611

lor.lhs.false74:                                  ; preds = %if.end68
  %26 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !10611
  %base75 = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !10611
  %27 = bitcast %struct.tree_base* %base75 to i64*, !dbg !10611
  %bf.load76 = load i64, i64* %27, align 8, !dbg !10611
  %bf.clear77 = and i64 %bf.load76, 65535, !dbg !10611
  %bf.cast78 = trunc i64 %bf.clear77 to i32, !dbg !10611
  %cmp79 = icmp eq i32 %bf.cast78, 7, !dbg !10611
  br i1 %cmp79, label %if.then116, label %lor.lhs.false80, !dbg !10611

lor.lhs.false80:                                  ; preds = %lor.lhs.false74
  %28 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !10611
  %base81 = bitcast %union.tree_node* %28 to %struct.tree_base*, !dbg !10611
  %29 = bitcast %struct.tree_base* %base81 to i64*, !dbg !10611
  %bf.load82 = load i64, i64* %29, align 8, !dbg !10611
  %bf.clear83 = and i64 %bf.load82, 65535, !dbg !10611
  %bf.cast84 = trunc i64 %bf.clear83 to i32, !dbg !10611
  %cmp85 = icmp eq i32 %bf.cast84, 8, !dbg !10611
  br i1 %cmp85, label %if.then116, label %lor.lhs.false86, !dbg !10613

lor.lhs.false86:                                  ; preds = %lor.lhs.false80
  %30 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !10614
  %base87 = bitcast %union.tree_node* %30 to %struct.tree_base*, !dbg !10614
  %31 = bitcast %struct.tree_base* %base87 to i64*, !dbg !10614
  %bf.load88 = load i64, i64* %31, align 8, !dbg !10614
  %bf.clear89 = and i64 %bf.load88, 65535, !dbg !10614
  %bf.cast90 = trunc i64 %bf.clear89 to i32, !dbg !10614
  %cmp91 = icmp eq i32 %bf.cast90, 9, !dbg !10614
  br i1 %cmp91, label %if.then116, label %lor.lhs.false92, !dbg !10615

lor.lhs.false92:                                  ; preds = %lor.lhs.false86
  %32 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !10616
  %base93 = bitcast %union.tree_node* %32 to %struct.tree_base*, !dbg !10616
  %33 = bitcast %struct.tree_base* %base93 to i64*, !dbg !10616
  %bf.load94 = load i64, i64* %33, align 8, !dbg !10616
  %bf.clear95 = and i64 %bf.load94, 65535, !dbg !10616
  %bf.cast96 = trunc i64 %bf.clear95 to i32, !dbg !10616
  %cmp97 = icmp eq i32 %bf.cast96, 11, !dbg !10616
  br i1 %cmp97, label %if.then116, label %lor.lhs.false98, !dbg !10617

lor.lhs.false98:                                  ; preds = %lor.lhs.false92
  %34 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !10618
  %base99 = bitcast %union.tree_node* %34 to %struct.tree_base*, !dbg !10618
  %35 = bitcast %struct.tree_base* %base99 to i64*, !dbg !10618
  %bf.load100 = load i64, i64* %35, align 8, !dbg !10618
  %bf.clear101 = and i64 %bf.load100, 65535, !dbg !10618
  %bf.cast102 = trunc i64 %bf.clear101 to i32, !dbg !10618
  %cmp103 = icmp eq i32 %bf.cast102, 14, !dbg !10619
  br i1 %cmp103, label %if.then116, label %lor.lhs.false104, !dbg !10620

lor.lhs.false104:                                 ; preds = %lor.lhs.false98
  %36 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !10621
  %base105 = bitcast %union.tree_node* %36 to %struct.tree_base*, !dbg !10621
  %37 = bitcast %struct.tree_base* %base105 to i64*, !dbg !10621
  %bf.load106 = load i64, i64* %37, align 8, !dbg !10621
  %bf.clear107 = and i64 %bf.load106, 65535, !dbg !10621
  %bf.cast108 = trunc i64 %bf.clear107 to i32, !dbg !10621
  %cmp109 = icmp eq i32 %bf.cast108, 13, !dbg !10622
  br i1 %cmp109, label %if.then116, label %lor.lhs.false110, !dbg !10623

lor.lhs.false110:                                 ; preds = %lor.lhs.false104
  %38 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !10624
  %base111 = bitcast %union.tree_node* %38 to %struct.tree_base*, !dbg !10624
  %39 = bitcast %struct.tree_base* %base111 to i64*, !dbg !10624
  %bf.load112 = load i64, i64* %39, align 8, !dbg !10624
  %bf.clear113 = and i64 %bf.load112, 65535, !dbg !10624
  %bf.cast114 = trunc i64 %bf.clear113 to i32, !dbg !10624
  %cmp115 = icmp eq i32 %bf.cast114, 5, !dbg !10625
  br i1 %cmp115, label %if.then116, label %if.end228, !dbg !10626

if.then116:                                       ; preds = %lor.lhs.false110, %lor.lhs.false104, %lor.lhs.false98, %lor.lhs.false92, %lor.lhs.false86, %lor.lhs.false80, %lor.lhs.false74, %if.end68
  %40 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !10627
  %type117 = bitcast %union.tree_node* %40 to %struct.tree_type*, !dbg !10627
  %align = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type117, i32 0, i32 7, !dbg !10627
  %41 = load i32, i32* %align, align 8, !dbg !10627
  %42 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !10630
  %type118 = bitcast %union.tree_node* %42 to %struct.tree_type*, !dbg !10630
  %align119 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type118, i32 0, i32 7, !dbg !10630
  %43 = load i32, i32* %align119, align 8, !dbg !10630
  %cmp120 = icmp ne i32 %41, %43, !dbg !10631
  br i1 %cmp120, label %if.then168, label %lor.lhs.false121, !dbg !10632

lor.lhs.false121:                                 ; preds = %if.then116
  %44 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !10633
  %type122 = bitcast %union.tree_node* %44 to %struct.tree_type*, !dbg !10633
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type122, i32 0, i32 6, !dbg !10633
  %bf.load123 = load i32, i32* %precision, align 4, !dbg !10633
  %bf.clear124 = and i32 %bf.load123, 1023, !dbg !10633
  %45 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !10634
  %type125 = bitcast %union.tree_node* %45 to %struct.tree_type*, !dbg !10634
  %precision126 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type125, i32 0, i32 6, !dbg !10634
  %bf.load127 = load i32, i32* %precision126, align 4, !dbg !10634
  %bf.clear128 = and i32 %bf.load127, 1023, !dbg !10634
  %cmp129 = icmp ne i32 %bf.clear124, %bf.clear128, !dbg !10635
  br i1 %cmp129, label %if.then168, label %lor.lhs.false130, !dbg !10636

lor.lhs.false130:                                 ; preds = %lor.lhs.false121
  %46 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !10637
  %base131 = bitcast %union.tree_node* %46 to %struct.tree_base*, !dbg !10637
  %47 = bitcast %struct.tree_base* %base131 to i64*, !dbg !10637
  %bf.load132 = load i64, i64* %47, align 8, !dbg !10637
  %bf.clear133 = and i64 %bf.load132, 65535, !dbg !10637
  %bf.cast134 = trunc i64 %bf.clear133 to i32, !dbg !10637
  %cmp135 = icmp eq i32 %bf.cast134, 14, !dbg !10637
  br i1 %cmp135, label %cond.true, label %cond.false, !dbg !10637

cond.true:                                        ; preds = %lor.lhs.false130
  %48 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !10637
  %call = call i32 @vector_type_mode(%union.tree_node* %48), !dbg !10637
  br label %cond.end, !dbg !10637

cond.false:                                       ; preds = %lor.lhs.false130
  %49 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !10637
  %type136 = bitcast %union.tree_node* %49 to %struct.tree_type*, !dbg !10637
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type136, i32 0, i32 6, !dbg !10637
  %bf.load137 = load i32, i32* %mode, align 4, !dbg !10637
  %bf.lshr138 = lshr i32 %bf.load137, 16, !dbg !10637
  %bf.clear139 = and i32 %bf.lshr138, 255, !dbg !10637
  br label %cond.end, !dbg !10637

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %bf.clear139, %cond.false ], !dbg !10637
  %50 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !10638
  %base140 = bitcast %union.tree_node* %50 to %struct.tree_base*, !dbg !10638
  %51 = bitcast %struct.tree_base* %base140 to i64*, !dbg !10638
  %bf.load141 = load i64, i64* %51, align 8, !dbg !10638
  %bf.clear142 = and i64 %bf.load141, 65535, !dbg !10638
  %bf.cast143 = trunc i64 %bf.clear142 to i32, !dbg !10638
  %cmp144 = icmp eq i32 %bf.cast143, 14, !dbg !10638
  br i1 %cmp144, label %cond.true145, label %cond.false147, !dbg !10638

cond.true145:                                     ; preds = %cond.end
  %52 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !10638
  %call146 = call i32 @vector_type_mode(%union.tree_node* %52), !dbg !10638
  br label %cond.end153, !dbg !10638

cond.false147:                                    ; preds = %cond.end
  %53 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !10638
  %type148 = bitcast %union.tree_node* %53 to %struct.tree_type*, !dbg !10638
  %mode149 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type148, i32 0, i32 6, !dbg !10638
  %bf.load150 = load i32, i32* %mode149, align 4, !dbg !10638
  %bf.lshr151 = lshr i32 %bf.load150, 16, !dbg !10638
  %bf.clear152 = and i32 %bf.lshr151, 255, !dbg !10638
  br label %cond.end153, !dbg !10638

cond.end153:                                      ; preds = %cond.false147, %cond.true145
  %cond154 = phi i32 [ %call146, %cond.true145 ], [ %bf.clear152, %cond.false147 ], !dbg !10638
  %cmp155 = icmp ne i32 %cond, %cond154, !dbg !10639
  br i1 %cmp155, label %if.then168, label %lor.lhs.false156, !dbg !10640

lor.lhs.false156:                                 ; preds = %cond.end153
  %54 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !10641
  %base157 = bitcast %union.tree_node* %54 to %struct.tree_base*, !dbg !10641
  %55 = bitcast %struct.tree_base* %base157 to i64*, !dbg !10641
  %bf.load158 = load i64, i64* %55, align 8, !dbg !10641
  %bf.lshr159 = lshr i64 %bf.load158, 21, !dbg !10641
  %bf.clear160 = and i64 %bf.lshr159, 1, !dbg !10641
  %bf.cast161 = trunc i64 %bf.clear160 to i32, !dbg !10641
  %56 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !10642
  %base162 = bitcast %union.tree_node* %56 to %struct.tree_base*, !dbg !10642
  %57 = bitcast %struct.tree_base* %base162 to i64*, !dbg !10642
  %bf.load163 = load i64, i64* %57, align 8, !dbg !10642
  %bf.lshr164 = lshr i64 %bf.load163, 21, !dbg !10642
  %bf.clear165 = and i64 %bf.lshr164, 1, !dbg !10642
  %bf.cast166 = trunc i64 %bf.clear165 to i32, !dbg !10642
  %cmp167 = icmp ne i32 %bf.cast161, %bf.cast166, !dbg !10643
  br i1 %cmp167, label %if.then168, label %if.end169, !dbg !10644

if.then168:                                       ; preds = %lor.lhs.false156, %cond.end153, %lor.lhs.false121, %if.then116
  store i32 0, i32* %retval, align 4, !dbg !10645
  br label %return, !dbg !10645

if.end169:                                        ; preds = %lor.lhs.false156
  %58 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !10646
  %base170 = bitcast %union.tree_node* %58 to %struct.tree_base*, !dbg !10646
  %59 = bitcast %struct.tree_base* %base170 to i64*, !dbg !10646
  %bf.load171 = load i64, i64* %59, align 8, !dbg !10646
  %bf.clear172 = and i64 %bf.load171, 65535, !dbg !10646
  %bf.cast173 = trunc i64 %bf.clear172 to i32, !dbg !10646
  %cmp174 = icmp eq i32 %bf.cast173, 8, !dbg !10648
  br i1 %cmp174, label %land.lhs.true, label %if.end197, !dbg !10649

land.lhs.true:                                    ; preds = %if.end169
  %60 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !10650
  %type175 = bitcast %union.tree_node* %60 to %struct.tree_type*, !dbg !10650
  %no_force_blk_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type175, i32 0, i32 6, !dbg !10650
  %bf.load176 = load i32, i32* %no_force_blk_flag, align 4, !dbg !10650
  %bf.lshr177 = lshr i32 %bf.load176, 10, !dbg !10650
  %bf.clear178 = and i32 %bf.lshr177, 1, !dbg !10650
  %61 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !10651
  %type179 = bitcast %union.tree_node* %61 to %struct.tree_type*, !dbg !10651
  %no_force_blk_flag180 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type179, i32 0, i32 6, !dbg !10651
  %bf.load181 = load i32, i32* %no_force_blk_flag180, align 4, !dbg !10651
  %bf.lshr182 = lshr i32 %bf.load181, 10, !dbg !10651
  %bf.clear183 = and i32 %bf.lshr182, 1, !dbg !10651
  %cmp184 = icmp ne i32 %bf.clear178, %bf.clear183, !dbg !10652
  br i1 %cmp184, label %if.then196, label %lor.lhs.false185, !dbg !10653

lor.lhs.false185:                                 ; preds = %land.lhs.true
  %62 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !10654
  %type186 = bitcast %union.tree_node* %62 to %struct.tree_type*, !dbg !10654
  %string_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type186, i32 0, i32 6, !dbg !10654
  %bf.load187 = load i32, i32* %string_flag, align 4, !dbg !10654
  %bf.lshr188 = lshr i32 %bf.load187, 24, !dbg !10654
  %bf.clear189 = and i32 %bf.lshr188, 1, !dbg !10654
  %63 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !10655
  %type190 = bitcast %union.tree_node* %63 to %struct.tree_type*, !dbg !10655
  %string_flag191 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type190, i32 0, i32 6, !dbg !10655
  %bf.load192 = load i32, i32* %string_flag191, align 4, !dbg !10655
  %bf.lshr193 = lshr i32 %bf.load192, 24, !dbg !10655
  %bf.clear194 = and i32 %bf.lshr193, 1, !dbg !10655
  %cmp195 = icmp ne i32 %bf.clear189, %bf.clear194, !dbg !10656
  br i1 %cmp195, label %if.then196, label %if.end197, !dbg !10657

if.then196:                                       ; preds = %lor.lhs.false185, %land.lhs.true
  store i32 0, i32* %retval, align 4, !dbg !10658
  br label %return, !dbg !10658

if.end197:                                        ; preds = %lor.lhs.false185, %if.end169
  %64 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !10659
  %base198 = bitcast %union.tree_node* %64 to %struct.tree_base*, !dbg !10659
  %65 = bitcast %struct.tree_base* %base198 to i64*, !dbg !10659
  %bf.load199 = load i64, i64* %65, align 8, !dbg !10659
  %bf.clear200 = and i64 %bf.load199, 65535, !dbg !10659
  %bf.cast201 = trunc i64 %bf.clear200 to i32, !dbg !10659
  %cmp202 = icmp eq i32 %bf.cast201, 9, !dbg !10659
  br i1 %cmp202, label %if.then209, label %lor.lhs.false203, !dbg !10661

lor.lhs.false203:                                 ; preds = %if.end197
  %66 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !10662
  %base204 = bitcast %union.tree_node* %66 to %struct.tree_base*, !dbg !10662
  %67 = bitcast %struct.tree_base* %base204 to i64*, !dbg !10662
  %bf.load205 = load i64, i64* %67, align 8, !dbg !10662
  %bf.clear206 = and i64 %bf.load205, 65535, !dbg !10662
  %bf.cast207 = trunc i64 %bf.clear206 to i32, !dbg !10662
  %cmp208 = icmp eq i32 %bf.cast207, 11, !dbg !10662
  br i1 %cmp208, label %if.then209, label %if.end210, !dbg !10663

if.then209:                                       ; preds = %lor.lhs.false203, %if.end197
  store i32 1, i32* %retval, align 4, !dbg !10664
  br label %return, !dbg !10664

if.end210:                                        ; preds = %lor.lhs.false203
  %68 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !10665
  %base211 = bitcast %union.tree_node* %68 to %struct.tree_base*, !dbg !10665
  %69 = bitcast %struct.tree_base* %base211 to i64*, !dbg !10665
  %bf.load212 = load i64, i64* %69, align 8, !dbg !10665
  %bf.clear213 = and i64 %bf.load212, 65535, !dbg !10665
  %bf.cast214 = trunc i64 %bf.clear213 to i32, !dbg !10665
  %cmp215 = icmp eq i32 %bf.cast214, 14, !dbg !10667
  br i1 %cmp215, label %if.then222, label %lor.lhs.false216, !dbg !10668

lor.lhs.false216:                                 ; preds = %if.end210
  %70 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !10669
  %base217 = bitcast %union.tree_node* %70 to %struct.tree_base*, !dbg !10669
  %71 = bitcast %struct.tree_base* %base217 to i64*, !dbg !10669
  %bf.load218 = load i64, i64* %71, align 8, !dbg !10669
  %bf.clear219 = and i64 %bf.load218, 65535, !dbg !10669
  %bf.cast220 = trunc i64 %bf.clear219 to i32, !dbg !10669
  %cmp221 = icmp eq i32 %bf.cast220, 13, !dbg !10670
  br i1 %cmp221, label %if.then222, label %if.end227, !dbg !10671

if.then222:                                       ; preds = %lor.lhs.false216, %if.end210
  %72 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !10672
  %common = bitcast %union.tree_node* %72 to %struct.tree_common*, !dbg !10672
  %type223 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !10672
  %73 = load %union.tree_node*, %union.tree_node** %type223, align 8, !dbg !10672
  %74 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !10673
  %common224 = bitcast %union.tree_node* %74 to %struct.tree_common*, !dbg !10673
  %type225 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common224, i32 0, i32 2, !dbg !10673
  %75 = load %union.tree_node*, %union.tree_node** %type225, align 8, !dbg !10673
  %call226 = call i32 @gimple_types_compatible_p(%union.tree_node* %73, %union.tree_node* %75), !dbg !10674
  store i32 %call226, i32* %retval, align 4, !dbg !10675
  br label %return, !dbg !10675

if.end227:                                        ; preds = %lor.lhs.false216
  br label %if.end228, !dbg !10676

if.end228:                                        ; preds = %if.end227, %lor.lhs.false110
  %76 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !10677
  %77 = bitcast %union.tree_node* %76 to i8*, !dbg !10677
  %call229 = call i32 @gimple_type_hash(i8* %77), !dbg !10679
  %78 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !10680
  %79 = bitcast %union.tree_node* %78 to i8*, !dbg !10680
  %call230 = call i32 @gimple_type_hash(i8* %79), !dbg !10681
  %cmp231 = icmp ne i32 %call229, %call230, !dbg !10682
  br i1 %cmp231, label %if.then232, label %if.end233, !dbg !10683

if.then232:                                       ; preds = %if.end228
  store i32 0, i32* %retval, align 4, !dbg !10684
  br label %return, !dbg !10684

if.end233:                                        ; preds = %if.end228
  %80 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !10685
  %81 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !10686
  %call234 = call %struct.type_pair_d* @lookup_type_pair(%union.tree_node* %80, %union.tree_node* %81, %struct.htab** @gtc_visited, %struct.obstack* @gtc_ob), !dbg !10687
  store %struct.type_pair_d* %call234, %struct.type_pair_d** %p, align 8, !dbg !10688
  %82 = load %struct.type_pair_d*, %struct.type_pair_d** %p, align 8, !dbg !10689
  %same_p = getelementptr inbounds %struct.type_pair_d, %struct.type_pair_d* %82, i32 0, i32 2, !dbg !10691
  %83 = load i32, i32* %same_p, align 4, !dbg !10691
  %cmp235 = icmp eq i32 %83, 0, !dbg !10692
  br i1 %cmp235, label %if.then239, label %lor.lhs.false236, !dbg !10693

lor.lhs.false236:                                 ; preds = %if.end233
  %84 = load %struct.type_pair_d*, %struct.type_pair_d** %p, align 8, !dbg !10694
  %same_p237 = getelementptr inbounds %struct.type_pair_d, %struct.type_pair_d* %84, i32 0, i32 2, !dbg !10695
  %85 = load i32, i32* %same_p237, align 4, !dbg !10695
  %cmp238 = icmp eq i32 %85, 1, !dbg !10696
  br i1 %cmp238, label %if.then239, label %if.else, !dbg !10697

if.then239:                                       ; preds = %lor.lhs.false236, %if.end233
  %86 = load %struct.type_pair_d*, %struct.type_pair_d** %p, align 8, !dbg !10698
  %same_p240 = getelementptr inbounds %struct.type_pair_d, %struct.type_pair_d* %86, i32 0, i32 2, !dbg !10700
  %87 = load i32, i32* %same_p240, align 4, !dbg !10700
  %cmp241 = icmp eq i32 %87, 1, !dbg !10701
  %conv = zext i1 %cmp241 to i32, !dbg !10701
  store i32 %conv, i32* %retval, align 4, !dbg !10702
  br label %return, !dbg !10702

if.else:                                          ; preds = %lor.lhs.false236
  %88 = load %struct.type_pair_d*, %struct.type_pair_d** %p, align 8, !dbg !10703
  %same_p242 = getelementptr inbounds %struct.type_pair_d, %struct.type_pair_d* %88, i32 0, i32 2, !dbg !10705
  %89 = load i32, i32* %same_p242, align 4, !dbg !10705
  %cmp243 = icmp eq i32 %89, -1, !dbg !10706
  br i1 %cmp243, label %if.then245, label %if.end246, !dbg !10707

if.then245:                                       ; preds = %if.else
  store i32 1, i32* %retval, align 4, !dbg !10708
  br label %return, !dbg !10708

if.end246:                                        ; preds = %if.else
  br label %if.end247

if.end247:                                        ; preds = %if.end246
  %90 = load %struct.type_pair_d*, %struct.type_pair_d** %p, align 8, !dbg !10710
  %same_p248 = getelementptr inbounds %struct.type_pair_d, %struct.type_pair_d* %90, i32 0, i32 2, !dbg !10710
  %91 = load i32, i32* %same_p248, align 4, !dbg !10710
  %cmp249 = icmp eq i32 %91, -2, !dbg !10710
  br i1 %cmp249, label %cond.false252, label %cond.true251, !dbg !10710

cond.true251:                                     ; preds = %if.end247
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 3245, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !10710
  br label %cond.end253, !dbg !10710

cond.false252:                                    ; preds = %if.end247
  br label %cond.end253, !dbg !10710

cond.end253:                                      ; preds = %cond.false252, %cond.true251
  %cond254 = phi i32 [ 0, %cond.true251 ], [ 0, %cond.false252 ], !dbg !10710
  %92 = load %struct.type_pair_d*, %struct.type_pair_d** %p, align 8, !dbg !10711
  %same_p255 = getelementptr inbounds %struct.type_pair_d, %struct.type_pair_d* %92, i32 0, i32 2, !dbg !10712
  store i32 -1, i32* %same_p255, align 4, !dbg !10713
  %93 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !10714
  %type256 = bitcast %union.tree_node* %93 to %struct.tree_type*, !dbg !10714
  %attributes = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type256, i32 0, i32 4, !dbg !10714
  %94 = load %union.tree_node*, %union.tree_node** %attributes, align 8, !dbg !10714
  %95 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !10716
  %type257 = bitcast %union.tree_node* %95 to %struct.tree_type*, !dbg !10716
  %attributes258 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type257, i32 0, i32 4, !dbg !10716
  %96 = load %union.tree_node*, %union.tree_node** %attributes258, align 8, !dbg !10716
  %call259 = call i32 @attribute_list_equal(%union.tree_node* %94, %union.tree_node* %96), !dbg !10717
  %tobool = icmp ne i32 %call259, 0, !dbg !10717
  br i1 %tobool, label %if.end261, label %if.then260, !dbg !10718

if.then260:                                       ; preds = %cond.end253
  br label %different_types, !dbg !10719

if.end261:                                        ; preds = %cond.end253
  %97 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !10720
  %base262 = bitcast %union.tree_node* %97 to %struct.tree_base*, !dbg !10720
  %98 = bitcast %struct.tree_base* %base262 to i64*, !dbg !10720
  %bf.load263 = load i64, i64* %98, align 8, !dbg !10720
  %bf.clear264 = and i64 %bf.load263, 65535, !dbg !10720
  %bf.cast265 = trunc i64 %bf.clear264 to i32, !dbg !10720
  switch i32 %bf.cast265, label %sw.default [
    i32 15, label %sw.bb
    i32 21, label %sw.bb368
    i32 20, label %sw.bb377
    i32 5, label %sw.bb418
    i32 10, label %sw.bb434
    i32 12, label %sw.bb434
    i32 8, label %sw.bb542
    i32 7, label %sw.bb542
    i32 6, label %sw.bb592
    i32 16, label %sw.bb649
    i32 17, label %sw.bb649
    i32 18, label %sw.bb649
  ], !dbg !10721

sw.bb:                                            ; preds = %if.end261
  %99 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !10722
  %common266 = bitcast %union.tree_node* %99 to %struct.tree_common*, !dbg !10722
  %type267 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common266, i32 0, i32 2, !dbg !10722
  %100 = load %union.tree_node*, %union.tree_node** %type267, align 8, !dbg !10722
  %101 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !10725
  %common268 = bitcast %union.tree_node* %101 to %struct.tree_common*, !dbg !10725
  %type269 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common268, i32 0, i32 2, !dbg !10725
  %102 = load %union.tree_node*, %union.tree_node** %type269, align 8, !dbg !10725
  %call270 = call i32 @gimple_types_compatible_p(%union.tree_node* %100, %union.tree_node* %102), !dbg !10726
  %tobool271 = icmp ne i32 %call270, 0, !dbg !10726
  br i1 %tobool271, label %lor.lhs.false272, label %if.then297, !dbg !10727

lor.lhs.false272:                                 ; preds = %sw.bb
  %103 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !10728
  %type273 = bitcast %union.tree_node* %103 to %struct.tree_type*, !dbg !10728
  %string_flag274 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type273, i32 0, i32 6, !dbg !10728
  %bf.load275 = load i32, i32* %string_flag274, align 4, !dbg !10728
  %bf.lshr276 = lshr i32 %bf.load275, 24, !dbg !10728
  %bf.clear277 = and i32 %bf.lshr276, 1, !dbg !10728
  %104 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !10729
  %type278 = bitcast %union.tree_node* %104 to %struct.tree_type*, !dbg !10729
  %string_flag279 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type278, i32 0, i32 6, !dbg !10729
  %bf.load280 = load i32, i32* %string_flag279, align 4, !dbg !10729
  %bf.lshr281 = lshr i32 %bf.load280, 24, !dbg !10729
  %bf.clear282 = and i32 %bf.lshr281, 1, !dbg !10729
  %cmp283 = icmp ne i32 %bf.clear277, %bf.clear282, !dbg !10730
  br i1 %cmp283, label %if.then297, label %lor.lhs.false285, !dbg !10731

lor.lhs.false285:                                 ; preds = %lor.lhs.false272
  %105 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !10732
  %type286 = bitcast %union.tree_node* %105 to %struct.tree_type*, !dbg !10732
  %transparent_aggr_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type286, i32 0, i32 6, !dbg !10732
  %bf.load287 = load i32, i32* %transparent_aggr_flag, align 4, !dbg !10732
  %bf.lshr288 = lshr i32 %bf.load287, 12, !dbg !10732
  %bf.clear289 = and i32 %bf.lshr288, 1, !dbg !10732
  %106 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !10733
  %type290 = bitcast %union.tree_node* %106 to %struct.tree_type*, !dbg !10733
  %transparent_aggr_flag291 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type290, i32 0, i32 6, !dbg !10733
  %bf.load292 = load i32, i32* %transparent_aggr_flag291, align 4, !dbg !10733
  %bf.lshr293 = lshr i32 %bf.load292, 12, !dbg !10733
  %bf.clear294 = and i32 %bf.lshr293, 1, !dbg !10733
  %cmp295 = icmp ne i32 %bf.clear289, %bf.clear294, !dbg !10734
  br i1 %cmp295, label %if.then297, label %if.else298, !dbg !10735

if.then297:                                       ; preds = %lor.lhs.false285, %lor.lhs.false272, %sw.bb
  br label %different_types, !dbg !10736

if.else298:                                       ; preds = %lor.lhs.false285
  call void @llvm.dbg.declare(metadata %union.tree_node** %i1, metadata !10737, metadata !DIExpression()), !dbg !10739
  %107 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !10740
  %type299 = bitcast %union.tree_node* %107 to %struct.tree_type*, !dbg !10740
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type299, i32 0, i32 1, !dbg !10740
  %108 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !10740
  store %union.tree_node* %108, %union.tree_node** %i1, align 8, !dbg !10739
  call void @llvm.dbg.declare(metadata %union.tree_node** %i2, metadata !10741, metadata !DIExpression()), !dbg !10742
  %109 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !10743
  %type300 = bitcast %union.tree_node* %109 to %struct.tree_type*, !dbg !10743
  %values301 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type300, i32 0, i32 1, !dbg !10743
  %110 = load %union.tree_node*, %union.tree_node** %values301, align 8, !dbg !10743
  store %union.tree_node* %110, %union.tree_node** %i2, align 8, !dbg !10742
  %111 = load %union.tree_node*, %union.tree_node** %i1, align 8, !dbg !10744
  %cmp302 = icmp eq %union.tree_node* %111, null, !dbg !10746
  br i1 %cmp302, label %land.lhs.true304, label %if.else308, !dbg !10747

land.lhs.true304:                                 ; preds = %if.else298
  %112 = load %union.tree_node*, %union.tree_node** %i2, align 8, !dbg !10748
  %cmp305 = icmp eq %union.tree_node* %112, null, !dbg !10749
  br i1 %cmp305, label %if.then307, label %if.else308, !dbg !10750

if.then307:                                       ; preds = %land.lhs.true304
  br label %same_types, !dbg !10751

if.else308:                                       ; preds = %land.lhs.true304, %if.else298
  %113 = load %union.tree_node*, %union.tree_node** %i1, align 8, !dbg !10752
  %cmp309 = icmp eq %union.tree_node* %113, null, !dbg !10754
  br i1 %cmp309, label %if.then314, label %lor.lhs.false311, !dbg !10755

lor.lhs.false311:                                 ; preds = %if.else308
  %114 = load %union.tree_node*, %union.tree_node** %i2, align 8, !dbg !10756
  %cmp312 = icmp eq %union.tree_node* %114, null, !dbg !10757
  br i1 %cmp312, label %if.then314, label %if.else315, !dbg !10758

if.then314:                                       ; preds = %lor.lhs.false311, %if.else308
  br label %different_types, !dbg !10759

if.else315:                                       ; preds = %lor.lhs.false311
  %115 = load %union.tree_node*, %union.tree_node** %i1, align 8, !dbg !10760
  %type316 = bitcast %union.tree_node* %115 to %struct.tree_type*, !dbg !10760
  %size = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type316, i32 0, i32 2, !dbg !10760
  %116 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !10760
  %cmp317 = icmp ne %union.tree_node* %116, null, !dbg !10762
  %conv318 = zext i1 %cmp317 to i32, !dbg !10762
  %117 = load %union.tree_node*, %union.tree_node** %i2, align 8, !dbg !10763
  %type319 = bitcast %union.tree_node* %117 to %struct.tree_type*, !dbg !10763
  %size320 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type319, i32 0, i32 2, !dbg !10763
  %118 = load %union.tree_node*, %union.tree_node** %size320, align 8, !dbg !10763
  %cmp321 = icmp ne %union.tree_node* %118, null, !dbg !10764
  %conv322 = zext i1 %cmp321 to i32, !dbg !10764
  %xor = xor i32 %conv318, %conv322, !dbg !10765
  %tobool323 = icmp ne i32 %xor, 0, !dbg !10765
  br i1 %tobool323, label %if.then339, label %lor.lhs.false324, !dbg !10766

lor.lhs.false324:                                 ; preds = %if.else315
  %119 = load %union.tree_node*, %union.tree_node** %i1, align 8, !dbg !10767
  %type325 = bitcast %union.tree_node* %119 to %struct.tree_type*, !dbg !10767
  %size326 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type325, i32 0, i32 2, !dbg !10767
  %120 = load %union.tree_node*, %union.tree_node** %size326, align 8, !dbg !10767
  %tobool327 = icmp ne %union.tree_node* %120, null, !dbg !10767
  br i1 %tobool327, label %land.lhs.true328, label %if.else340, !dbg !10768

land.lhs.true328:                                 ; preds = %lor.lhs.false324
  %121 = load %union.tree_node*, %union.tree_node** %i2, align 8, !dbg !10769
  %type329 = bitcast %union.tree_node* %121 to %struct.tree_type*, !dbg !10769
  %size330 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type329, i32 0, i32 2, !dbg !10769
  %122 = load %union.tree_node*, %union.tree_node** %size330, align 8, !dbg !10769
  %tobool331 = icmp ne %union.tree_node* %122, null, !dbg !10769
  br i1 %tobool331, label %land.lhs.true332, label %if.else340, !dbg !10770

land.lhs.true332:                                 ; preds = %land.lhs.true328
  %123 = load %union.tree_node*, %union.tree_node** %i1, align 8, !dbg !10771
  %type333 = bitcast %union.tree_node* %123 to %struct.tree_type*, !dbg !10771
  %size334 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type333, i32 0, i32 2, !dbg !10771
  %124 = load %union.tree_node*, %union.tree_node** %size334, align 8, !dbg !10771
  %125 = load %union.tree_node*, %union.tree_node** %i2, align 8, !dbg !10772
  %type335 = bitcast %union.tree_node* %125 to %struct.tree_type*, !dbg !10772
  %size336 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type335, i32 0, i32 2, !dbg !10772
  %126 = load %union.tree_node*, %union.tree_node** %size336, align 8, !dbg !10772
  %call337 = call i32 @operand_equal_p(%union.tree_node* %124, %union.tree_node* %126, i32 0), !dbg !10773
  %tobool338 = icmp ne i32 %call337, 0, !dbg !10773
  br i1 %tobool338, label %if.else340, label %if.then339, !dbg !10774

if.then339:                                       ; preds = %land.lhs.true332, %if.else315
  br label %different_types, !dbg !10775

if.else340:                                       ; preds = %land.lhs.true332, %land.lhs.true328, %lor.lhs.false324
  call void @llvm.dbg.declare(metadata %union.tree_node** %min1, metadata !10776, metadata !DIExpression()), !dbg !10778
  %127 = load %union.tree_node*, %union.tree_node** %i1, align 8, !dbg !10779
  %type341 = bitcast %union.tree_node* %127 to %struct.tree_type*, !dbg !10779
  %minval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type341, i32 0, i32 13, !dbg !10779
  %128 = load %union.tree_node*, %union.tree_node** %minval, align 8, !dbg !10779
  store %union.tree_node* %128, %union.tree_node** %min1, align 8, !dbg !10778
  call void @llvm.dbg.declare(metadata %union.tree_node** %min2, metadata !10780, metadata !DIExpression()), !dbg !10781
  %129 = load %union.tree_node*, %union.tree_node** %i2, align 8, !dbg !10782
  %type342 = bitcast %union.tree_node* %129 to %struct.tree_type*, !dbg !10782
  %minval343 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type342, i32 0, i32 13, !dbg !10782
  %130 = load %union.tree_node*, %union.tree_node** %minval343, align 8, !dbg !10782
  store %union.tree_node* %130, %union.tree_node** %min2, align 8, !dbg !10781
  call void @llvm.dbg.declare(metadata %union.tree_node** %max1, metadata !10783, metadata !DIExpression()), !dbg !10784
  %131 = load %union.tree_node*, %union.tree_node** %i1, align 8, !dbg !10785
  %type344 = bitcast %union.tree_node* %131 to %struct.tree_type*, !dbg !10785
  %maxval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type344, i32 0, i32 14, !dbg !10785
  %132 = load %union.tree_node*, %union.tree_node** %maxval, align 8, !dbg !10785
  store %union.tree_node* %132, %union.tree_node** %max1, align 8, !dbg !10784
  call void @llvm.dbg.declare(metadata %union.tree_node** %max2, metadata !10786, metadata !DIExpression()), !dbg !10787
  %133 = load %union.tree_node*, %union.tree_node** %i2, align 8, !dbg !10788
  %type345 = bitcast %union.tree_node* %133 to %struct.tree_type*, !dbg !10788
  %maxval346 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type345, i32 0, i32 14, !dbg !10788
  %134 = load %union.tree_node*, %union.tree_node** %maxval346, align 8, !dbg !10788
  store %union.tree_node* %134, %union.tree_node** %max2, align 8, !dbg !10787
  %135 = load %union.tree_node*, %union.tree_node** %min1, align 8, !dbg !10789
  %136 = load %union.tree_node*, %union.tree_node** %min2, align 8, !dbg !10791
  %cmp347 = icmp eq %union.tree_node* %135, %136, !dbg !10792
  br i1 %cmp347, label %land.lhs.true356, label %lor.lhs.false349, !dbg !10793

lor.lhs.false349:                                 ; preds = %if.else340
  %137 = load %union.tree_node*, %union.tree_node** %min1, align 8, !dbg !10794
  %tobool350 = icmp ne %union.tree_node* %137, null, !dbg !10794
  br i1 %tobool350, label %land.lhs.true351, label %if.else367, !dbg !10795

land.lhs.true351:                                 ; preds = %lor.lhs.false349
  %138 = load %union.tree_node*, %union.tree_node** %min2, align 8, !dbg !10796
  %tobool352 = icmp ne %union.tree_node* %138, null, !dbg !10796
  br i1 %tobool352, label %land.lhs.true353, label %if.else367, !dbg !10797

land.lhs.true353:                                 ; preds = %land.lhs.true351
  %139 = load %union.tree_node*, %union.tree_node** %min1, align 8, !dbg !10798
  %140 = load %union.tree_node*, %union.tree_node** %min2, align 8, !dbg !10799
  %call354 = call i32 @operand_equal_p(%union.tree_node* %139, %union.tree_node* %140, i32 0), !dbg !10800
  %tobool355 = icmp ne i32 %call354, 0, !dbg !10800
  br i1 %tobool355, label %land.lhs.true356, label %if.else367, !dbg !10801

land.lhs.true356:                                 ; preds = %land.lhs.true353, %if.else340
  %141 = load %union.tree_node*, %union.tree_node** %max1, align 8, !dbg !10802
  %142 = load %union.tree_node*, %union.tree_node** %max2, align 8, !dbg !10803
  %cmp357 = icmp eq %union.tree_node* %141, %142, !dbg !10804
  br i1 %cmp357, label %if.then366, label %lor.lhs.false359, !dbg !10805

lor.lhs.false359:                                 ; preds = %land.lhs.true356
  %143 = load %union.tree_node*, %union.tree_node** %max1, align 8, !dbg !10806
  %tobool360 = icmp ne %union.tree_node* %143, null, !dbg !10806
  br i1 %tobool360, label %land.lhs.true361, label %if.else367, !dbg !10807

land.lhs.true361:                                 ; preds = %lor.lhs.false359
  %144 = load %union.tree_node*, %union.tree_node** %max2, align 8, !dbg !10808
  %tobool362 = icmp ne %union.tree_node* %144, null, !dbg !10808
  br i1 %tobool362, label %land.lhs.true363, label %if.else367, !dbg !10809

land.lhs.true363:                                 ; preds = %land.lhs.true361
  %145 = load %union.tree_node*, %union.tree_node** %max1, align 8, !dbg !10810
  %146 = load %union.tree_node*, %union.tree_node** %max2, align 8, !dbg !10811
  %call364 = call i32 @operand_equal_p(%union.tree_node* %145, %union.tree_node* %146, i32 0), !dbg !10812
  %tobool365 = icmp ne i32 %call364, 0, !dbg !10812
  br i1 %tobool365, label %if.then366, label %if.else367, !dbg !10813

if.then366:                                       ; preds = %land.lhs.true363, %land.lhs.true356
  br label %same_types, !dbg !10814

if.else367:                                       ; preds = %land.lhs.true363, %land.lhs.true361, %lor.lhs.false359, %land.lhs.true353, %land.lhs.true351, %lor.lhs.false349
  br label %different_types, !dbg !10815

sw.bb368:                                         ; preds = %if.end261
  %147 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !10816
  %type369 = bitcast %union.tree_node* %147 to %struct.tree_type*, !dbg !10816
  %maxval370 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type369, i32 0, i32 14, !dbg !10816
  %148 = load %union.tree_node*, %union.tree_node** %maxval370, align 8, !dbg !10816
  %149 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !10818
  %type371 = bitcast %union.tree_node* %149 to %struct.tree_type*, !dbg !10818
  %maxval372 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type371, i32 0, i32 14, !dbg !10818
  %150 = load %union.tree_node*, %union.tree_node** %maxval372, align 8, !dbg !10818
  %call373 = call i32 @gimple_types_compatible_p(%union.tree_node* %148, %union.tree_node* %150), !dbg !10819
  %tobool374 = icmp ne i32 %call373, 0, !dbg !10819
  br i1 %tobool374, label %if.end376, label %if.then375, !dbg !10820

if.then375:                                       ; preds = %sw.bb368
  br label %different_types, !dbg !10821

if.end376:                                        ; preds = %sw.bb368
  br label %sw.bb377, !dbg !10822

sw.bb377:                                         ; preds = %if.end261, %if.end376
  %151 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !10823
  %common378 = bitcast %union.tree_node* %151 to %struct.tree_common*, !dbg !10823
  %type379 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common378, i32 0, i32 2, !dbg !10823
  %152 = load %union.tree_node*, %union.tree_node** %type379, align 8, !dbg !10823
  %153 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !10825
  %common380 = bitcast %union.tree_node* %153 to %struct.tree_common*, !dbg !10825
  %type381 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common380, i32 0, i32 2, !dbg !10825
  %154 = load %union.tree_node*, %union.tree_node** %type381, align 8, !dbg !10825
  %call382 = call i32 @gimple_types_compatible_p(%union.tree_node* %152, %union.tree_node* %154), !dbg !10826
  %tobool383 = icmp ne i32 %call382, 0, !dbg !10826
  br i1 %tobool383, label %if.else385, label %if.then384, !dbg !10827

if.then384:                                       ; preds = %sw.bb377
  br label %different_types, !dbg !10828

if.else385:                                       ; preds = %sw.bb377
  %155 = load i32 (%union.tree_node*, %union.tree_node*)*, i32 (%union.tree_node*, %union.tree_node*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 14), align 8, !dbg !10829
  %156 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !10832
  %157 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !10833
  %call386 = call i32 %155(%union.tree_node* %156, %union.tree_node* %157), !dbg !10834
  %tobool387 = icmp ne i32 %call386, 0, !dbg !10834
  br i1 %tobool387, label %if.end389, label %if.then388, !dbg !10835

if.then388:                                       ; preds = %if.else385
  br label %different_types, !dbg !10836

if.end389:                                        ; preds = %if.else385
  %158 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !10837
  %type390 = bitcast %union.tree_node* %158 to %struct.tree_type*, !dbg !10837
  %values391 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type390, i32 0, i32 1, !dbg !10837
  %159 = load %union.tree_node*, %union.tree_node** %values391, align 8, !dbg !10837
  %160 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !10839
  %type392 = bitcast %union.tree_node* %160 to %struct.tree_type*, !dbg !10839
  %values393 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type392, i32 0, i32 1, !dbg !10839
  %161 = load %union.tree_node*, %union.tree_node** %values393, align 8, !dbg !10839
  %cmp394 = icmp eq %union.tree_node* %159, %161, !dbg !10840
  br i1 %cmp394, label %if.then396, label %if.else397, !dbg !10841

if.then396:                                       ; preds = %if.end389
  br label %same_types, !dbg !10842

if.else397:                                       ; preds = %if.end389
  call void @llvm.dbg.declare(metadata %union.tree_node** %parms1, metadata !10843, metadata !DIExpression()), !dbg !10845
  call void @llvm.dbg.declare(metadata %union.tree_node** %parms2, metadata !10846, metadata !DIExpression()), !dbg !10847
  %162 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !10848
  %type398 = bitcast %union.tree_node* %162 to %struct.tree_type*, !dbg !10848
  %values399 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type398, i32 0, i32 1, !dbg !10848
  %163 = load %union.tree_node*, %union.tree_node** %values399, align 8, !dbg !10848
  store %union.tree_node* %163, %union.tree_node** %parms1, align 8, !dbg !10850
  %164 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !10851
  %type400 = bitcast %union.tree_node* %164 to %struct.tree_type*, !dbg !10851
  %values401 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type400, i32 0, i32 1, !dbg !10851
  %165 = load %union.tree_node*, %union.tree_node** %values401, align 8, !dbg !10851
  store %union.tree_node* %165, %union.tree_node** %parms2, align 8, !dbg !10852
  br label %for.cond, !dbg !10853

for.cond:                                         ; preds = %for.inc, %if.else397
  %166 = load %union.tree_node*, %union.tree_node** %parms1, align 8, !dbg !10854
  %tobool402 = icmp ne %union.tree_node* %166, null, !dbg !10854
  br i1 %tobool402, label %land.rhs, label %land.end, !dbg !10856

land.rhs:                                         ; preds = %for.cond
  %167 = load %union.tree_node*, %union.tree_node** %parms2, align 8, !dbg !10857
  %tobool403 = icmp ne %union.tree_node* %167, null, !dbg !10856
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %168 = phi i1 [ false, %for.cond ], [ %tobool403, %land.rhs ], !dbg !10858
  br i1 %168, label %for.body, label %for.end, !dbg !10859

for.body:                                         ; preds = %land.end
  %169 = load %union.tree_node*, %union.tree_node** %parms1, align 8, !dbg !10860
  %list = bitcast %union.tree_node* %169 to %struct.tree_list*, !dbg !10860
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !10860
  %170 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !10860
  %171 = load %union.tree_node*, %union.tree_node** %parms2, align 8, !dbg !10863
  %list404 = bitcast %union.tree_node* %171 to %struct.tree_list*, !dbg !10863
  %value405 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list404, i32 0, i32 2, !dbg !10863
  %172 = load %union.tree_node*, %union.tree_node** %value405, align 8, !dbg !10863
  %call406 = call i32 @gimple_types_compatible_p(%union.tree_node* %170, %union.tree_node* %172), !dbg !10864
  %tobool407 = icmp ne i32 %call406, 0, !dbg !10864
  br i1 %tobool407, label %if.end409, label %if.then408, !dbg !10865

if.then408:                                       ; preds = %for.body
  br label %different_types, !dbg !10866

if.end409:                                        ; preds = %for.body
  br label %for.inc, !dbg !10867

for.inc:                                          ; preds = %if.end409
  %173 = load %union.tree_node*, %union.tree_node** %parms1, align 8, !dbg !10868
  %common410 = bitcast %union.tree_node* %173 to %struct.tree_common*, !dbg !10868
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common410, i32 0, i32 1, !dbg !10868
  %174 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !10868
  store %union.tree_node* %174, %union.tree_node** %parms1, align 8, !dbg !10869
  %175 = load %union.tree_node*, %union.tree_node** %parms2, align 8, !dbg !10870
  %common411 = bitcast %union.tree_node* %175 to %struct.tree_common*, !dbg !10870
  %chain412 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common411, i32 0, i32 1, !dbg !10870
  %176 = load %union.tree_node*, %union.tree_node** %chain412, align 8, !dbg !10870
  store %union.tree_node* %176, %union.tree_node** %parms2, align 8, !dbg !10871
  br label %for.cond, !dbg !10872, !llvm.loop !10873

for.end:                                          ; preds = %land.end
  %177 = load %union.tree_node*, %union.tree_node** %parms1, align 8, !dbg !10875
  %tobool413 = icmp ne %union.tree_node* %177, null, !dbg !10875
  br i1 %tobool413, label %if.then416, label %lor.lhs.false414, !dbg !10877

lor.lhs.false414:                                 ; preds = %for.end
  %178 = load %union.tree_node*, %union.tree_node** %parms2, align 8, !dbg !10878
  %tobool415 = icmp ne %union.tree_node* %178, null, !dbg !10878
  br i1 %tobool415, label %if.then416, label %if.end417, !dbg !10879

if.then416:                                       ; preds = %lor.lhs.false414, %for.end
  br label %different_types, !dbg !10880

if.end417:                                        ; preds = %lor.lhs.false414
  br label %same_types, !dbg !10881

sw.bb418:                                         ; preds = %if.end261
  %179 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !10882
  %common419 = bitcast %union.tree_node* %179 to %struct.tree_common*, !dbg !10882
  %type420 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common419, i32 0, i32 2, !dbg !10882
  %180 = load %union.tree_node*, %union.tree_node** %type420, align 8, !dbg !10882
  %181 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !10885
  %common421 = bitcast %union.tree_node* %181 to %struct.tree_common*, !dbg !10885
  %type422 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common421, i32 0, i32 2, !dbg !10885
  %182 = load %union.tree_node*, %union.tree_node** %type422, align 8, !dbg !10885
  %call423 = call i32 @gimple_types_compatible_p(%union.tree_node* %180, %union.tree_node* %182), !dbg !10886
  %tobool424 = icmp ne i32 %call423, 0, !dbg !10886
  br i1 %tobool424, label %lor.lhs.false425, label %if.then432, !dbg !10887

lor.lhs.false425:                                 ; preds = %sw.bb418
  %183 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !10888
  %type426 = bitcast %union.tree_node* %183 to %struct.tree_type*, !dbg !10888
  %maxval427 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type426, i32 0, i32 14, !dbg !10888
  %184 = load %union.tree_node*, %union.tree_node** %maxval427, align 8, !dbg !10888
  %185 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !10889
  %type428 = bitcast %union.tree_node* %185 to %struct.tree_type*, !dbg !10889
  %maxval429 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type428, i32 0, i32 14, !dbg !10889
  %186 = load %union.tree_node*, %union.tree_node** %maxval429, align 8, !dbg !10889
  %call430 = call i32 @gimple_types_compatible_p(%union.tree_node* %184, %union.tree_node* %186), !dbg !10890
  %tobool431 = icmp ne i32 %call430, 0, !dbg !10890
  br i1 %tobool431, label %if.end433, label %if.then432, !dbg !10891

if.then432:                                       ; preds = %lor.lhs.false425, %sw.bb418
  br label %different_types, !dbg !10892

if.end433:                                        ; preds = %lor.lhs.false425
  br label %same_types, !dbg !10893

sw.bb434:                                         ; preds = %if.end261, %if.end261
  %187 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !10894
  %base435 = bitcast %union.tree_node* %187 to %struct.tree_base*, !dbg !10894
  %188 = bitcast %struct.tree_base* %base435 to i64*, !dbg !10894
  %bf.load436 = load i64, i64* %188, align 8, !dbg !10894
  %bf.lshr437 = lshr i64 %bf.load436, 26, !dbg !10894
  %bf.clear438 = and i64 %bf.lshr437, 1, !dbg !10894
  %bf.cast439 = trunc i64 %bf.clear438 to i32, !dbg !10894
  %189 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !10897
  %base440 = bitcast %union.tree_node* %189 to %struct.tree_base*, !dbg !10897
  %190 = bitcast %struct.tree_base* %base440 to i64*, !dbg !10897
  %bf.load441 = load i64, i64* %190, align 8, !dbg !10897
  %bf.lshr442 = lshr i64 %bf.load441, 26, !dbg !10897
  %bf.clear443 = and i64 %bf.lshr442, 1, !dbg !10897
  %bf.cast444 = trunc i64 %bf.clear443 to i32, !dbg !10897
  %cmp445 = icmp ne i32 %bf.cast439, %bf.cast444, !dbg !10898
  br i1 %cmp445, label %if.then447, label %if.end448, !dbg !10899

if.then447:                                       ; preds = %sw.bb434
  br label %different_types, !dbg !10900

if.end448:                                        ; preds = %sw.bb434
  %191 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !10901
  %common449 = bitcast %union.tree_node* %191 to %struct.tree_common*, !dbg !10901
  %type450 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common449, i32 0, i32 2, !dbg !10901
  %192 = load %union.tree_node*, %union.tree_node** %type450, align 8, !dbg !10901
  %base451 = bitcast %union.tree_node* %192 to %struct.tree_base*, !dbg !10901
  %193 = bitcast %struct.tree_base* %base451 to i64*, !dbg !10901
  %bf.load452 = load i64, i64* %193, align 8, !dbg !10901
  %bf.clear453 = and i64 %bf.load452, 65535, !dbg !10901
  %bf.cast454 = trunc i64 %bf.clear453 to i32, !dbg !10901
  %194 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !10903
  %common455 = bitcast %union.tree_node* %194 to %struct.tree_common*, !dbg !10903
  %type456 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common455, i32 0, i32 2, !dbg !10903
  %195 = load %union.tree_node*, %union.tree_node** %type456, align 8, !dbg !10903
  %base457 = bitcast %union.tree_node* %195 to %struct.tree_base*, !dbg !10903
  %196 = bitcast %struct.tree_base* %base457 to i64*, !dbg !10903
  %bf.load458 = load i64, i64* %196, align 8, !dbg !10903
  %bf.clear459 = and i64 %bf.load458, 65535, !dbg !10903
  %bf.cast460 = trunc i64 %bf.clear459 to i32, !dbg !10903
  %cmp461 = icmp eq i32 %bf.cast454, %bf.cast460, !dbg !10904
  br i1 %cmp461, label %land.lhs.true463, label %if.end533, !dbg !10905

land.lhs.true463:                                 ; preds = %if.end448
  %197 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !10906
  %common464 = bitcast %union.tree_node* %197 to %struct.tree_common*, !dbg !10906
  %type465 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common464, i32 0, i32 2, !dbg !10906
  %198 = load %union.tree_node*, %union.tree_node** %type465, align 8, !dbg !10906
  %base466 = bitcast %union.tree_node* %198 to %struct.tree_base*, !dbg !10906
  %199 = bitcast %struct.tree_base* %base466 to i64*, !dbg !10906
  %bf.load467 = load i64, i64* %199, align 8, !dbg !10906
  %bf.clear468 = and i64 %bf.load467, 65535, !dbg !10906
  %bf.cast469 = trunc i64 %bf.clear468 to i32, !dbg !10906
  %cmp470 = icmp eq i32 %bf.cast469, 16, !dbg !10906
  br i1 %cmp470, label %land.lhs.true490, label %lor.lhs.false472, !dbg !10906

lor.lhs.false472:                                 ; preds = %land.lhs.true463
  %200 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !10906
  %common473 = bitcast %union.tree_node* %200 to %struct.tree_common*, !dbg !10906
  %type474 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common473, i32 0, i32 2, !dbg !10906
  %201 = load %union.tree_node*, %union.tree_node** %type474, align 8, !dbg !10906
  %base475 = bitcast %union.tree_node* %201 to %struct.tree_base*, !dbg !10906
  %202 = bitcast %struct.tree_base* %base475 to i64*, !dbg !10906
  %bf.load476 = load i64, i64* %202, align 8, !dbg !10906
  %bf.clear477 = and i64 %bf.load476, 65535, !dbg !10906
  %bf.cast478 = trunc i64 %bf.clear477 to i32, !dbg !10906
  %cmp479 = icmp eq i32 %bf.cast478, 17, !dbg !10906
  br i1 %cmp479, label %land.lhs.true490, label %lor.lhs.false481, !dbg !10906

lor.lhs.false481:                                 ; preds = %lor.lhs.false472
  %203 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !10906
  %common482 = bitcast %union.tree_node* %203 to %struct.tree_common*, !dbg !10906
  %type483 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common482, i32 0, i32 2, !dbg !10906
  %204 = load %union.tree_node*, %union.tree_node** %type483, align 8, !dbg !10906
  %base484 = bitcast %union.tree_node* %204 to %struct.tree_base*, !dbg !10906
  %205 = bitcast %struct.tree_base* %base484 to i64*, !dbg !10906
  %bf.load485 = load i64, i64* %205, align 8, !dbg !10906
  %bf.clear486 = and i64 %bf.load485, 65535, !dbg !10906
  %bf.cast487 = trunc i64 %bf.clear486 to i32, !dbg !10906
  %cmp488 = icmp eq i32 %bf.cast487, 18, !dbg !10906
  br i1 %cmp488, label %land.lhs.true490, label %if.end533, !dbg !10907

land.lhs.true490:                                 ; preds = %lor.lhs.false481, %lor.lhs.false472, %land.lhs.true463
  %206 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !10908
  %common491 = bitcast %union.tree_node* %206 to %struct.tree_common*, !dbg !10908
  %type492 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common491, i32 0, i32 2, !dbg !10908
  %207 = load %union.tree_node*, %union.tree_node** %type492, align 8, !dbg !10908
  %type493 = bitcast %union.tree_node* %207 to %struct.tree_type*, !dbg !10908
  %size494 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type493, i32 0, i32 2, !dbg !10908
  %208 = load %union.tree_node*, %union.tree_node** %size494, align 8, !dbg !10908
  %cmp495 = icmp ne %union.tree_node* %208, null, !dbg !10908
  br i1 %cmp495, label %lor.lhs.false497, label %land.lhs.true504, !dbg !10909

lor.lhs.false497:                                 ; preds = %land.lhs.true490
  %209 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !10910
  %common498 = bitcast %union.tree_node* %209 to %struct.tree_common*, !dbg !10910
  %type499 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common498, i32 0, i32 2, !dbg !10910
  %210 = load %union.tree_node*, %union.tree_node** %type499, align 8, !dbg !10910
  %type500 = bitcast %union.tree_node* %210 to %struct.tree_type*, !dbg !10910
  %size501 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type500, i32 0, i32 2, !dbg !10910
  %211 = load %union.tree_node*, %union.tree_node** %size501, align 8, !dbg !10910
  %cmp502 = icmp ne %union.tree_node* %211, null, !dbg !10910
  br i1 %cmp502, label %if.end533, label %land.lhs.true504, !dbg !10911

land.lhs.true504:                                 ; preds = %lor.lhs.false497, %land.lhs.true490
  %212 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !10912
  %common505 = bitcast %union.tree_node* %212 to %struct.tree_common*, !dbg !10912
  %type506 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common505, i32 0, i32 2, !dbg !10912
  %213 = load %union.tree_node*, %union.tree_node** %type506, align 8, !dbg !10912
  %type507 = bitcast %union.tree_node* %213 to %struct.tree_type*, !dbg !10912
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type507, i32 0, i32 16, !dbg !10912
  %214 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !10912
  %215 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !10913
  %common508 = bitcast %union.tree_node* %215 to %struct.tree_common*, !dbg !10913
  %type509 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common508, i32 0, i32 2, !dbg !10913
  %216 = load %union.tree_node*, %union.tree_node** %type509, align 8, !dbg !10913
  %type510 = bitcast %union.tree_node* %216 to %struct.tree_type*, !dbg !10913
  %main_variant511 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type510, i32 0, i32 16, !dbg !10913
  %217 = load %union.tree_node*, %union.tree_node** %main_variant511, align 8, !dbg !10913
  %call512 = call zeroext i8 @compare_type_names_p(%union.tree_node* %214, %union.tree_node* %217, i8 zeroext 1), !dbg !10914
  %conv513 = zext i8 %call512 to i32, !dbg !10914
  %tobool514 = icmp ne i32 %conv513, 0, !dbg !10914
  br i1 %tobool514, label %if.then515, label %if.end533, !dbg !10915

if.then515:                                       ; preds = %land.lhs.true504
  %218 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !10916
  %common516 = bitcast %union.tree_node* %218 to %struct.tree_common*, !dbg !10916
  %type517 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common516, i32 0, i32 2, !dbg !10916
  %219 = load %union.tree_node*, %union.tree_node** %type517, align 8, !dbg !10916
  %type518 = bitcast %union.tree_node* %219 to %struct.tree_type*, !dbg !10916
  %size519 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type518, i32 0, i32 2, !dbg !10916
  %220 = load %union.tree_node*, %union.tree_node** %size519, align 8, !dbg !10916
  %cmp520 = icmp ne %union.tree_node* %220, null, !dbg !10916
  br i1 %cmp520, label %if.then522, label %if.else527, !dbg !10919

if.then522:                                       ; preds = %if.then515
  %221 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !10920
  %common523 = bitcast %union.tree_node* %221 to %struct.tree_common*, !dbg !10920
  %type524 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common523, i32 0, i32 2, !dbg !10920
  %222 = load %union.tree_node*, %union.tree_node** %type524, align 8, !dbg !10920
  %223 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !10921
  %common525 = bitcast %union.tree_node* %223 to %struct.tree_common*, !dbg !10921
  %type526 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common525, i32 0, i32 2, !dbg !10921
  store %union.tree_node* %222, %union.tree_node** %type526, align 8, !dbg !10922
  br label %if.end532, !dbg !10921

if.else527:                                       ; preds = %if.then515
  %224 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !10923
  %common528 = bitcast %union.tree_node* %224 to %struct.tree_common*, !dbg !10923
  %type529 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common528, i32 0, i32 2, !dbg !10923
  %225 = load %union.tree_node*, %union.tree_node** %type529, align 8, !dbg !10923
  %226 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !10924
  %common530 = bitcast %union.tree_node* %226 to %struct.tree_common*, !dbg !10924
  %type531 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common530, i32 0, i32 2, !dbg !10924
  store %union.tree_node* %225, %union.tree_node** %type531, align 8, !dbg !10925
  br label %if.end532

if.end532:                                        ; preds = %if.else527, %if.then522
  br label %same_types, !dbg !10926

if.end533:                                        ; preds = %land.lhs.true504, %lor.lhs.false497, %lor.lhs.false481, %if.end448
  %227 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !10927
  %common534 = bitcast %union.tree_node* %227 to %struct.tree_common*, !dbg !10927
  %type535 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common534, i32 0, i32 2, !dbg !10927
  %228 = load %union.tree_node*, %union.tree_node** %type535, align 8, !dbg !10927
  %229 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !10929
  %common536 = bitcast %union.tree_node* %229 to %struct.tree_common*, !dbg !10929
  %type537 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common536, i32 0, i32 2, !dbg !10929
  %230 = load %union.tree_node*, %union.tree_node** %type537, align 8, !dbg !10929
  %call538 = call i32 @gimple_types_compatible_p(%union.tree_node* %228, %union.tree_node* %230), !dbg !10930
  %tobool539 = icmp ne i32 %call538, 0, !dbg !10930
  br i1 %tobool539, label %if.then540, label %if.end541, !dbg !10931

if.then540:                                       ; preds = %if.end533
  br label %same_types, !dbg !10932

if.end541:                                        ; preds = %if.end533
  br label %different_types, !dbg !10933

sw.bb542:                                         ; preds = %if.end261, %if.end261
  call void @llvm.dbg.declare(metadata %union.tree_node** %min1543, metadata !10934, metadata !DIExpression()), !dbg !10936
  %231 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !10937
  %type544 = bitcast %union.tree_node* %231 to %struct.tree_type*, !dbg !10937
  %minval545 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type544, i32 0, i32 13, !dbg !10937
  %232 = load %union.tree_node*, %union.tree_node** %minval545, align 8, !dbg !10937
  store %union.tree_node* %232, %union.tree_node** %min1543, align 8, !dbg !10936
  call void @llvm.dbg.declare(metadata %union.tree_node** %max1546, metadata !10938, metadata !DIExpression()), !dbg !10939
  %233 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !10940
  %type547 = bitcast %union.tree_node* %233 to %struct.tree_type*, !dbg !10940
  %maxval548 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type547, i32 0, i32 14, !dbg !10940
  %234 = load %union.tree_node*, %union.tree_node** %maxval548, align 8, !dbg !10940
  store %union.tree_node* %234, %union.tree_node** %max1546, align 8, !dbg !10939
  call void @llvm.dbg.declare(metadata %union.tree_node** %min2549, metadata !10941, metadata !DIExpression()), !dbg !10942
  %235 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !10943
  %type550 = bitcast %union.tree_node* %235 to %struct.tree_type*, !dbg !10943
  %minval551 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type550, i32 0, i32 13, !dbg !10943
  %236 = load %union.tree_node*, %union.tree_node** %minval551, align 8, !dbg !10943
  store %union.tree_node* %236, %union.tree_node** %min2549, align 8, !dbg !10942
  call void @llvm.dbg.declare(metadata %union.tree_node** %max2552, metadata !10944, metadata !DIExpression()), !dbg !10945
  %237 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !10946
  %type553 = bitcast %union.tree_node* %237 to %struct.tree_type*, !dbg !10946
  %maxval554 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type553, i32 0, i32 14, !dbg !10946
  %238 = load %union.tree_node*, %union.tree_node** %maxval554, align 8, !dbg !10946
  store %union.tree_node* %238, %union.tree_node** %max2552, align 8, !dbg !10945
  call void @llvm.dbg.declare(metadata i8* %min_equal_p, metadata !10947, metadata !DIExpression()), !dbg !10948
  store i8 0, i8* %min_equal_p, align 1, !dbg !10948
  call void @llvm.dbg.declare(metadata i8* %max_equal_p, metadata !10949, metadata !DIExpression()), !dbg !10950
  store i8 0, i8* %max_equal_p, align 1, !dbg !10950
  %239 = load %union.tree_node*, %union.tree_node** %min1543, align 8, !dbg !10951
  %cmp555 = icmp eq %union.tree_node* %239, null, !dbg !10953
  br i1 %cmp555, label %land.lhs.true557, label %if.else561, !dbg !10954

land.lhs.true557:                                 ; preds = %sw.bb542
  %240 = load %union.tree_node*, %union.tree_node** %min2549, align 8, !dbg !10955
  %cmp558 = icmp eq %union.tree_node* %240, null, !dbg !10956
  br i1 %cmp558, label %if.then560, label %if.else561, !dbg !10957

if.then560:                                       ; preds = %land.lhs.true557
  store i8 1, i8* %min_equal_p, align 1, !dbg !10958
  br label %if.end570, !dbg !10959

if.else561:                                       ; preds = %land.lhs.true557, %sw.bb542
  %241 = load %union.tree_node*, %union.tree_node** %min1543, align 8, !dbg !10960
  %tobool562 = icmp ne %union.tree_node* %241, null, !dbg !10960
  br i1 %tobool562, label %land.lhs.true563, label %if.end569, !dbg !10962

land.lhs.true563:                                 ; preds = %if.else561
  %242 = load %union.tree_node*, %union.tree_node** %min2549, align 8, !dbg !10963
  %tobool564 = icmp ne %union.tree_node* %242, null, !dbg !10963
  br i1 %tobool564, label %land.lhs.true565, label %if.end569, !dbg !10964

land.lhs.true565:                                 ; preds = %land.lhs.true563
  %243 = load %union.tree_node*, %union.tree_node** %min1543, align 8, !dbg !10965
  %244 = load %union.tree_node*, %union.tree_node** %min2549, align 8, !dbg !10966
  %call566 = call i32 @operand_equal_p(%union.tree_node* %243, %union.tree_node* %244, i32 0), !dbg !10967
  %tobool567 = icmp ne i32 %call566, 0, !dbg !10967
  br i1 %tobool567, label %if.then568, label %if.end569, !dbg !10968

if.then568:                                       ; preds = %land.lhs.true565
  store i8 1, i8* %min_equal_p, align 1, !dbg !10969
  br label %if.end569, !dbg !10970

if.end569:                                        ; preds = %if.then568, %land.lhs.true565, %land.lhs.true563, %if.else561
  br label %if.end570

if.end570:                                        ; preds = %if.end569, %if.then560
  %245 = load %union.tree_node*, %union.tree_node** %max1546, align 8, !dbg !10971
  %cmp571 = icmp eq %union.tree_node* %245, null, !dbg !10973
  br i1 %cmp571, label %land.lhs.true573, label %if.else577, !dbg !10974

land.lhs.true573:                                 ; preds = %if.end570
  %246 = load %union.tree_node*, %union.tree_node** %max2552, align 8, !dbg !10975
  %cmp574 = icmp eq %union.tree_node* %246, null, !dbg !10976
  br i1 %cmp574, label %if.then576, label %if.else577, !dbg !10977

if.then576:                                       ; preds = %land.lhs.true573
  store i8 1, i8* %max_equal_p, align 1, !dbg !10978
  br label %if.end586, !dbg !10979

if.else577:                                       ; preds = %land.lhs.true573, %if.end570
  %247 = load %union.tree_node*, %union.tree_node** %max1546, align 8, !dbg !10980
  %tobool578 = icmp ne %union.tree_node* %247, null, !dbg !10980
  br i1 %tobool578, label %land.lhs.true579, label %if.end585, !dbg !10982

land.lhs.true579:                                 ; preds = %if.else577
  %248 = load %union.tree_node*, %union.tree_node** %max2552, align 8, !dbg !10983
  %tobool580 = icmp ne %union.tree_node* %248, null, !dbg !10983
  br i1 %tobool580, label %land.lhs.true581, label %if.end585, !dbg !10984

land.lhs.true581:                                 ; preds = %land.lhs.true579
  %249 = load %union.tree_node*, %union.tree_node** %max1546, align 8, !dbg !10985
  %250 = load %union.tree_node*, %union.tree_node** %max2552, align 8, !dbg !10986
  %call582 = call i32 @operand_equal_p(%union.tree_node* %249, %union.tree_node* %250, i32 0), !dbg !10987
  %tobool583 = icmp ne i32 %call582, 0, !dbg !10987
  br i1 %tobool583, label %if.then584, label %if.end585, !dbg !10988

if.then584:                                       ; preds = %land.lhs.true581
  store i8 1, i8* %max_equal_p, align 1, !dbg !10989
  br label %if.end585, !dbg !10990

if.end585:                                        ; preds = %if.then584, %land.lhs.true581, %land.lhs.true579, %if.else577
  br label %if.end586

if.end586:                                        ; preds = %if.end585, %if.then576
  %251 = load i8, i8* %min_equal_p, align 1, !dbg !10991
  %tobool587 = icmp ne i8 %251, 0, !dbg !10991
  br i1 %tobool587, label %lor.lhs.false588, label %if.then590, !dbg !10993

lor.lhs.false588:                                 ; preds = %if.end586
  %252 = load i8, i8* %max_equal_p, align 1, !dbg !10994
  %tobool589 = icmp ne i8 %252, 0, !dbg !10994
  br i1 %tobool589, label %if.end591, label %if.then590, !dbg !10995

if.then590:                                       ; preds = %lor.lhs.false588, %if.end586
  br label %different_types, !dbg !10996

if.end591:                                        ; preds = %lor.lhs.false588
  br label %same_types, !dbg !10997

sw.bb592:                                         ; preds = %if.end261
  call void @llvm.dbg.declare(metadata %union.tree_node** %v1, metadata !10998, metadata !DIExpression()), !dbg !11000
  call void @llvm.dbg.declare(metadata %union.tree_node** %v2, metadata !11001, metadata !DIExpression()), !dbg !11002
  %253 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !11003
  %type593 = bitcast %union.tree_node* %253 to %struct.tree_type*, !dbg !11003
  %values594 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type593, i32 0, i32 1, !dbg !11003
  %254 = load %union.tree_node*, %union.tree_node** %values594, align 8, !dbg !11003
  %255 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !11005
  %type595 = bitcast %union.tree_node* %255 to %struct.tree_type*, !dbg !11005
  %values596 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type595, i32 0, i32 1, !dbg !11005
  %256 = load %union.tree_node*, %union.tree_node** %values596, align 8, !dbg !11005
  %cmp597 = icmp eq %union.tree_node* %254, %256, !dbg !11006
  br i1 %cmp597, label %if.then599, label %if.end600, !dbg !11007

if.then599:                                       ; preds = %sw.bb592
  br label %same_types, !dbg !11008

if.end600:                                        ; preds = %sw.bb592
  %257 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !11009
  %type601 = bitcast %union.tree_node* %257 to %struct.tree_type*, !dbg !11009
  %values602 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type601, i32 0, i32 1, !dbg !11009
  %258 = load %union.tree_node*, %union.tree_node** %values602, align 8, !dbg !11009
  store %union.tree_node* %258, %union.tree_node** %v1, align 8, !dbg !11011
  %259 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !11012
  %type603 = bitcast %union.tree_node* %259 to %struct.tree_type*, !dbg !11012
  %values604 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type603, i32 0, i32 1, !dbg !11012
  %260 = load %union.tree_node*, %union.tree_node** %values604, align 8, !dbg !11012
  store %union.tree_node* %260, %union.tree_node** %v2, align 8, !dbg !11013
  br label %for.cond605, !dbg !11014

for.cond605:                                      ; preds = %for.inc638, %if.end600
  %261 = load %union.tree_node*, %union.tree_node** %v1, align 8, !dbg !11015
  %tobool606 = icmp ne %union.tree_node* %261, null, !dbg !11015
  br i1 %tobool606, label %land.rhs607, label %land.end609, !dbg !11017

land.rhs607:                                      ; preds = %for.cond605
  %262 = load %union.tree_node*, %union.tree_node** %v2, align 8, !dbg !11018
  %tobool608 = icmp ne %union.tree_node* %262, null, !dbg !11017
  br label %land.end609

land.end609:                                      ; preds = %land.rhs607, %for.cond605
  %263 = phi i1 [ false, %for.cond605 ], [ %tobool608, %land.rhs607 ], !dbg !11019
  br i1 %263, label %for.body610, label %for.end643, !dbg !11020

for.body610:                                      ; preds = %land.end609
  call void @llvm.dbg.declare(metadata %union.tree_node** %c1, metadata !11021, metadata !DIExpression()), !dbg !11023
  %264 = load %union.tree_node*, %union.tree_node** %v1, align 8, !dbg !11024
  %list611 = bitcast %union.tree_node* %264 to %struct.tree_list*, !dbg !11024
  %value612 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list611, i32 0, i32 2, !dbg !11024
  %265 = load %union.tree_node*, %union.tree_node** %value612, align 8, !dbg !11024
  store %union.tree_node* %265, %union.tree_node** %c1, align 8, !dbg !11023
  call void @llvm.dbg.declare(metadata %union.tree_node** %c2, metadata !11025, metadata !DIExpression()), !dbg !11026
  %266 = load %union.tree_node*, %union.tree_node** %v2, align 8, !dbg !11027
  %list613 = bitcast %union.tree_node* %266 to %struct.tree_list*, !dbg !11027
  %value614 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list613, i32 0, i32 2, !dbg !11027
  %267 = load %union.tree_node*, %union.tree_node** %value614, align 8, !dbg !11027
  store %union.tree_node* %267, %union.tree_node** %c2, align 8, !dbg !11026
  %268 = load %union.tree_node*, %union.tree_node** %c1, align 8, !dbg !11028
  %base615 = bitcast %union.tree_node* %268 to %struct.tree_base*, !dbg !11028
  %269 = bitcast %struct.tree_base* %base615 to i64*, !dbg !11028
  %bf.load616 = load i64, i64* %269, align 8, !dbg !11028
  %bf.clear617 = and i64 %bf.load616, 65535, !dbg !11028
  %bf.cast618 = trunc i64 %bf.clear617 to i32, !dbg !11028
  %cmp619 = icmp eq i32 %bf.cast618, 33, !dbg !11030
  br i1 %cmp619, label %if.then621, label %if.end622, !dbg !11031

if.then621:                                       ; preds = %for.body610
  %270 = load %union.tree_node*, %union.tree_node** %c1, align 8, !dbg !11032
  %decl_common = bitcast %union.tree_node* %270 to %struct.tree_decl_common*, !dbg !11032
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 5, !dbg !11032
  %271 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !11032
  store %union.tree_node* %271, %union.tree_node** %c1, align 8, !dbg !11033
  br label %if.end622, !dbg !11034

if.end622:                                        ; preds = %if.then621, %for.body610
  %272 = load %union.tree_node*, %union.tree_node** %c2, align 8, !dbg !11035
  %base623 = bitcast %union.tree_node* %272 to %struct.tree_base*, !dbg !11035
  %273 = bitcast %struct.tree_base* %base623 to i64*, !dbg !11035
  %bf.load624 = load i64, i64* %273, align 8, !dbg !11035
  %bf.clear625 = and i64 %bf.load624, 65535, !dbg !11035
  %bf.cast626 = trunc i64 %bf.clear625 to i32, !dbg !11035
  %cmp627 = icmp eq i32 %bf.cast626, 33, !dbg !11037
  br i1 %cmp627, label %if.then629, label %if.end632, !dbg !11038

if.then629:                                       ; preds = %if.end622
  %274 = load %union.tree_node*, %union.tree_node** %c2, align 8, !dbg !11039
  %decl_common630 = bitcast %union.tree_node* %274 to %struct.tree_decl_common*, !dbg !11039
  %initial631 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common630, i32 0, i32 5, !dbg !11039
  %275 = load %union.tree_node*, %union.tree_node** %initial631, align 8, !dbg !11039
  store %union.tree_node* %275, %union.tree_node** %c2, align 8, !dbg !11040
  br label %if.end632, !dbg !11041

if.end632:                                        ; preds = %if.then629, %if.end622
  %276 = load %union.tree_node*, %union.tree_node** %c1, align 8, !dbg !11042
  %277 = load %union.tree_node*, %union.tree_node** %c2, align 8, !dbg !11044
  %call633 = call i32 @tree_int_cst_equal(%union.tree_node* %276, %union.tree_node* %277), !dbg !11045
  %cmp634 = icmp ne i32 %call633, 1, !dbg !11046
  br i1 %cmp634, label %if.then636, label %if.end637, !dbg !11047

if.then636:                                       ; preds = %if.end632
  br label %different_types, !dbg !11048

if.end637:                                        ; preds = %if.end632
  br label %for.inc638, !dbg !11049

for.inc638:                                       ; preds = %if.end637
  %278 = load %union.tree_node*, %union.tree_node** %v1, align 8, !dbg !11050
  %common639 = bitcast %union.tree_node* %278 to %struct.tree_common*, !dbg !11050
  %chain640 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common639, i32 0, i32 1, !dbg !11050
  %279 = load %union.tree_node*, %union.tree_node** %chain640, align 8, !dbg !11050
  store %union.tree_node* %279, %union.tree_node** %v1, align 8, !dbg !11051
  %280 = load %union.tree_node*, %union.tree_node** %v2, align 8, !dbg !11052
  %common641 = bitcast %union.tree_node* %280 to %struct.tree_common*, !dbg !11052
  %chain642 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common641, i32 0, i32 1, !dbg !11052
  %281 = load %union.tree_node*, %union.tree_node** %chain642, align 8, !dbg !11052
  store %union.tree_node* %281, %union.tree_node** %v2, align 8, !dbg !11053
  br label %for.cond605, !dbg !11054, !llvm.loop !11055

for.end643:                                       ; preds = %land.end609
  %282 = load %union.tree_node*, %union.tree_node** %v1, align 8, !dbg !11057
  %tobool644 = icmp ne %union.tree_node* %282, null, !dbg !11057
  br i1 %tobool644, label %if.then647, label %lor.lhs.false645, !dbg !11059

lor.lhs.false645:                                 ; preds = %for.end643
  %283 = load %union.tree_node*, %union.tree_node** %v2, align 8, !dbg !11060
  %tobool646 = icmp ne %union.tree_node* %283, null, !dbg !11060
  br i1 %tobool646, label %if.then647, label %if.end648, !dbg !11061

if.then647:                                       ; preds = %lor.lhs.false645, %for.end643
  br label %different_types, !dbg !11062

if.end648:                                        ; preds = %lor.lhs.false645
  br label %same_types, !dbg !11063

sw.bb649:                                         ; preds = %if.end261, %if.end261, %if.end261
  call void @llvm.dbg.declare(metadata %union.tree_node** %f1, metadata !11064, metadata !DIExpression()), !dbg !11066
  call void @llvm.dbg.declare(metadata %union.tree_node** %f2, metadata !11067, metadata !DIExpression()), !dbg !11068
  %284 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !11069
  %type650 = bitcast %union.tree_node* %284 to %struct.tree_type*, !dbg !11069
  %canonical = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type650, i32 0, i32 19, !dbg !11069
  %285 = load %union.tree_node*, %union.tree_node** %canonical, align 8, !dbg !11069
  %cmp651 = icmp eq %union.tree_node* %285, null, !dbg !11069
  %conv652 = zext i1 %cmp651 to i32, !dbg !11069
  %286 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !11071
  %type653 = bitcast %union.tree_node* %286 to %struct.tree_type*, !dbg !11071
  %canonical654 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type653, i32 0, i32 19, !dbg !11071
  %287 = load %union.tree_node*, %union.tree_node** %canonical654, align 8, !dbg !11071
  %cmp655 = icmp eq %union.tree_node* %287, null, !dbg !11071
  %conv656 = zext i1 %cmp655 to i32, !dbg !11071
  %cmp657 = icmp ne i32 %conv652, %conv656, !dbg !11072
  br i1 %cmp657, label %if.then659, label %if.end660, !dbg !11073

if.then659:                                       ; preds = %sw.bb649
  br label %different_types, !dbg !11074

if.end660:                                        ; preds = %sw.bb649
  %288 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !11075
  %type661 = bitcast %union.tree_node* %288 to %struct.tree_type*, !dbg !11075
  %main_variant662 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type661, i32 0, i32 16, !dbg !11075
  %289 = load %union.tree_node*, %union.tree_node** %main_variant662, align 8, !dbg !11075
  %290 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !11077
  %type663 = bitcast %union.tree_node* %290 to %struct.tree_type*, !dbg !11077
  %main_variant664 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type663, i32 0, i32 16, !dbg !11077
  %291 = load %union.tree_node*, %union.tree_node** %main_variant664, align 8, !dbg !11077
  %call665 = call zeroext i8 @compare_type_names_p(%union.tree_node* %289, %union.tree_node* %291, i8 zeroext 0), !dbg !11078
  %tobool666 = icmp ne i8 %call665, 0, !dbg !11078
  br i1 %tobool666, label %if.end668, label %if.then667, !dbg !11079

if.then667:                                       ; preds = %if.end660
  br label %different_types, !dbg !11080

if.end668:                                        ; preds = %if.end660
  %292 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !11081
  %type669 = bitcast %union.tree_node* %292 to %struct.tree_type*, !dbg !11081
  %values670 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type669, i32 0, i32 1, !dbg !11081
  %293 = load %union.tree_node*, %union.tree_node** %values670, align 8, !dbg !11081
  store %union.tree_node* %293, %union.tree_node** %f1, align 8, !dbg !11083
  %294 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !11084
  %type671 = bitcast %union.tree_node* %294 to %struct.tree_type*, !dbg !11084
  %values672 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type671, i32 0, i32 1, !dbg !11084
  %295 = load %union.tree_node*, %union.tree_node** %values672, align 8, !dbg !11084
  store %union.tree_node* %295, %union.tree_node** %f2, align 8, !dbg !11085
  br label %for.cond673, !dbg !11086

for.cond673:                                      ; preds = %for.inc709, %if.end668
  %296 = load %union.tree_node*, %union.tree_node** %f1, align 8, !dbg !11087
  %tobool674 = icmp ne %union.tree_node* %296, null, !dbg !11087
  br i1 %tobool674, label %land.rhs675, label %land.end677, !dbg !11089

land.rhs675:                                      ; preds = %for.cond673
  %297 = load %union.tree_node*, %union.tree_node** %f2, align 8, !dbg !11090
  %tobool676 = icmp ne %union.tree_node* %297, null, !dbg !11089
  br label %land.end677

land.end677:                                      ; preds = %land.rhs675, %for.cond673
  %298 = phi i1 [ false, %for.cond673 ], [ %tobool676, %land.rhs675 ], !dbg !11091
  br i1 %298, label %for.body678, label %for.end714, !dbg !11092

for.body678:                                      ; preds = %land.end677
  %299 = load %union.tree_node*, %union.tree_node** %f1, align 8, !dbg !11093
  %decl_minimal = bitcast %union.tree_node* %299 to %struct.tree_decl_minimal*, !dbg !11093
  %name = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 3, !dbg !11093
  %300 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !11093
  %301 = load %union.tree_node*, %union.tree_node** %f2, align 8, !dbg !11096
  %decl_minimal679 = bitcast %union.tree_node* %301 to %struct.tree_decl_minimal*, !dbg !11096
  %name680 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal679, i32 0, i32 3, !dbg !11096
  %302 = load %union.tree_node*, %union.tree_node** %name680, align 8, !dbg !11096
  %cmp681 = icmp ne %union.tree_node* %300, %302, !dbg !11097
  br i1 %cmp681, label %if.then707, label %lor.lhs.false683, !dbg !11098

lor.lhs.false683:                                 ; preds = %for.body678
  %303 = load %union.tree_node*, %union.tree_node** %f1, align 8, !dbg !11099
  %decl_common684 = bitcast %union.tree_node* %303 to %struct.tree_decl_common*, !dbg !11099
  %decl_flag_2 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common684, i32 0, i32 2, !dbg !11099
  %304 = bitcast i40* %decl_flag_2 to i64*, !dbg !11099
  %bf.load685 = load i64, i64* %304, align 8, !dbg !11099
  %bf.lshr686 = lshr i64 %bf.load685, 26, !dbg !11099
  %bf.clear687 = and i64 %bf.lshr686, 1, !dbg !11099
  %bf.cast688 = trunc i64 %bf.clear687 to i32, !dbg !11099
  %305 = load %union.tree_node*, %union.tree_node** %f2, align 8, !dbg !11100
  %decl_common689 = bitcast %union.tree_node* %305 to %struct.tree_decl_common*, !dbg !11100
  %decl_flag_2690 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common689, i32 0, i32 2, !dbg !11100
  %306 = bitcast i40* %decl_flag_2690 to i64*, !dbg !11100
  %bf.load691 = load i64, i64* %306, align 8, !dbg !11100
  %bf.lshr692 = lshr i64 %bf.load691, 26, !dbg !11100
  %bf.clear693 = and i64 %bf.lshr692, 1, !dbg !11100
  %bf.cast694 = trunc i64 %bf.clear693 to i32, !dbg !11100
  %cmp695 = icmp ne i32 %bf.cast688, %bf.cast694, !dbg !11101
  br i1 %cmp695, label %if.then707, label %lor.lhs.false697, !dbg !11102

lor.lhs.false697:                                 ; preds = %lor.lhs.false683
  %307 = load %union.tree_node*, %union.tree_node** %f1, align 8, !dbg !11103
  %308 = load %union.tree_node*, %union.tree_node** %f2, align 8, !dbg !11104
  %call698 = call zeroext i8 @compare_field_offset(%union.tree_node* %307, %union.tree_node* %308), !dbg !11105
  %tobool699 = icmp ne i8 %call698, 0, !dbg !11105
  br i1 %tobool699, label %lor.lhs.false700, label %if.then707, !dbg !11106

lor.lhs.false700:                                 ; preds = %lor.lhs.false697
  %309 = load %union.tree_node*, %union.tree_node** %f1, align 8, !dbg !11107
  %common701 = bitcast %union.tree_node* %309 to %struct.tree_common*, !dbg !11107
  %type702 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common701, i32 0, i32 2, !dbg !11107
  %310 = load %union.tree_node*, %union.tree_node** %type702, align 8, !dbg !11107
  %311 = load %union.tree_node*, %union.tree_node** %f2, align 8, !dbg !11108
  %common703 = bitcast %union.tree_node* %311 to %struct.tree_common*, !dbg !11108
  %type704 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common703, i32 0, i32 2, !dbg !11108
  %312 = load %union.tree_node*, %union.tree_node** %type704, align 8, !dbg !11108
  %call705 = call i32 @gimple_types_compatible_p(%union.tree_node* %310, %union.tree_node* %312), !dbg !11109
  %tobool706 = icmp ne i32 %call705, 0, !dbg !11109
  br i1 %tobool706, label %if.end708, label %if.then707, !dbg !11110

if.then707:                                       ; preds = %lor.lhs.false700, %lor.lhs.false697, %lor.lhs.false683, %for.body678
  br label %different_types, !dbg !11111

if.end708:                                        ; preds = %lor.lhs.false700
  br label %for.inc709, !dbg !11112

for.inc709:                                       ; preds = %if.end708
  %313 = load %union.tree_node*, %union.tree_node** %f1, align 8, !dbg !11113
  %common710 = bitcast %union.tree_node* %313 to %struct.tree_common*, !dbg !11113
  %chain711 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common710, i32 0, i32 1, !dbg !11113
  %314 = load %union.tree_node*, %union.tree_node** %chain711, align 8, !dbg !11113
  store %union.tree_node* %314, %union.tree_node** %f1, align 8, !dbg !11114
  %315 = load %union.tree_node*, %union.tree_node** %f2, align 8, !dbg !11115
  %common712 = bitcast %union.tree_node* %315 to %struct.tree_common*, !dbg !11115
  %chain713 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common712, i32 0, i32 1, !dbg !11115
  %316 = load %union.tree_node*, %union.tree_node** %chain713, align 8, !dbg !11115
  store %union.tree_node* %316, %union.tree_node** %f2, align 8, !dbg !11116
  br label %for.cond673, !dbg !11117, !llvm.loop !11118

for.end714:                                       ; preds = %land.end677
  %317 = load %union.tree_node*, %union.tree_node** %f1, align 8, !dbg !11120
  %tobool715 = icmp ne %union.tree_node* %317, null, !dbg !11120
  br i1 %tobool715, label %if.then718, label %lor.lhs.false716, !dbg !11122

lor.lhs.false716:                                 ; preds = %for.end714
  %318 = load %union.tree_node*, %union.tree_node** %f2, align 8, !dbg !11123
  %tobool717 = icmp ne %union.tree_node* %318, null, !dbg !11123
  br i1 %tobool717, label %if.then718, label %if.end719, !dbg !11124

if.then718:                                       ; preds = %lor.lhs.false716, %for.end714
  br label %different_types, !dbg !11125

if.end719:                                        ; preds = %lor.lhs.false716
  br label %same_types, !dbg !11126

sw.default:                                       ; preds = %if.end261
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 3493, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !11127
  br label %sw.epilog, !dbg !11128

sw.epilog:                                        ; preds = %sw.default
  br label %different_types, !dbg !11128

different_types:                                  ; preds = %sw.epilog, %if.then718, %if.then707, %if.then667, %if.then659, %if.then647, %if.then636, %if.then590, %if.end541, %if.then447, %if.then432, %if.then416, %if.then408, %if.then388, %if.then384, %if.then375, %if.else367, %if.then339, %if.then314, %if.then297, %if.then260
  call void @llvm.dbg.label(metadata !11129), !dbg !11130
  %319 = load %struct.type_pair_d*, %struct.type_pair_d** %p, align 8, !dbg !11131
  %same_p720 = getelementptr inbounds %struct.type_pair_d, %struct.type_pair_d* %319, i32 0, i32 2, !dbg !11132
  store i32 0, i32* %same_p720, align 4, !dbg !11133
  store i32 0, i32* %retval, align 4, !dbg !11134
  br label %return, !dbg !11134

same_types:                                       ; preds = %if.end719, %if.end648, %if.then599, %if.end591, %if.then540, %if.end532, %if.end433, %if.end417, %if.then396, %if.then366, %if.then307
  call void @llvm.dbg.label(metadata !11135), !dbg !11136
  %320 = load %struct.type_pair_d*, %struct.type_pair_d** %p, align 8, !dbg !11137
  %same_p721 = getelementptr inbounds %struct.type_pair_d, %struct.type_pair_d* %320, i32 0, i32 2, !dbg !11138
  store i32 1, i32* %same_p721, align 4, !dbg !11139
  store i32 1, i32* %retval, align 4, !dbg !11140
  br label %return, !dbg !11140

return:                                           ; preds = %same_types, %different_types, %if.then245, %if.then239, %if.then232, %if.then222, %if.then209, %if.then196, %if.then168, %if.then67, %if.then60, %if.then10, %if.then3, %if.then
  %321 = load i32, i32* %retval, align 4, !dbg !11141
  ret i32 %321, !dbg !11141
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.type_pair_d* @lookup_type_pair(%union.tree_node* %t1, %union.tree_node* %t2, %struct.htab** %visited_p, %struct.obstack* %ob_p) #0 !dbg !11142 {
entry:
  %t1.addr = alloca %union.tree_node*, align 8
  %t2.addr = alloca %union.tree_node*, align 8
  %visited_p.addr = alloca %struct.htab**, align 8
  %ob_p.addr = alloca %struct.obstack*, align 8
  %pair = alloca %struct.type_pair_d, align 4
  %p = alloca %struct.type_pair_d*, align 8
  %slot = alloca i8**, align 8
  store %union.tree_node* %t1, %union.tree_node** %t1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t1.addr, metadata !11146, metadata !DIExpression()), !dbg !11147
  store %union.tree_node* %t2, %union.tree_node** %t2.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t2.addr, metadata !11148, metadata !DIExpression()), !dbg !11149
  store %struct.htab** %visited_p, %struct.htab*** %visited_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab*** %visited_p.addr, metadata !11150, metadata !DIExpression()), !dbg !11151
  store %struct.obstack* %ob_p, %struct.obstack** %ob_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.obstack** %ob_p.addr, metadata !11152, metadata !DIExpression()), !dbg !11153
  call void @llvm.dbg.declare(metadata %struct.type_pair_d* %pair, metadata !11154, metadata !DIExpression()), !dbg !11155
  call void @llvm.dbg.declare(metadata %struct.type_pair_d** %p, metadata !11156, metadata !DIExpression()), !dbg !11157
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !11158, metadata !DIExpression()), !dbg !11159
  %0 = load %struct.htab**, %struct.htab*** %visited_p.addr, align 8, !dbg !11160
  %1 = load %struct.htab*, %struct.htab** %0, align 8, !dbg !11162
  %cmp = icmp eq %struct.htab* %1, null, !dbg !11163
  br i1 %cmp, label %if.then, label %if.end, !dbg !11164

if.then:                                          ; preds = %entry
  %call = call %struct.htab* @htab_create(i64 251, i32 (i8*)* @type_pair_hash, i32 (i8*, i8*)* @type_pair_eq, void (i8*)* null), !dbg !11165
  %2 = load %struct.htab**, %struct.htab*** %visited_p.addr, align 8, !dbg !11167
  store %struct.htab* %call, %struct.htab** %2, align 8, !dbg !11168
  %3 = load %struct.obstack*, %struct.obstack** %ob_p.addr, align 8, !dbg !11169
  %call1 = call i32 @_obstack_begin(%struct.obstack* %3, i32 0, i32 0, i8* (i64)* @xmalloc, void (i8*)* @free), !dbg !11169
  br label %if.end, !dbg !11170

if.end:                                           ; preds = %if.then, %entry
  %4 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !11171
  %type = bitcast %union.tree_node* %4 to %struct.tree_type*, !dbg !11171
  %uid = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 5, !dbg !11171
  %5 = load i32, i32* %uid, align 8, !dbg !11171
  %uid1 = getelementptr inbounds %struct.type_pair_d, %struct.type_pair_d* %pair, i32 0, i32 0, !dbg !11172
  store i32 %5, i32* %uid1, align 4, !dbg !11173
  %6 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !11174
  %type2 = bitcast %union.tree_node* %6 to %struct.tree_type*, !dbg !11174
  %uid3 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type2, i32 0, i32 5, !dbg !11174
  %7 = load i32, i32* %uid3, align 8, !dbg !11174
  %uid2 = getelementptr inbounds %struct.type_pair_d, %struct.type_pair_d* %pair, i32 0, i32 1, !dbg !11175
  store i32 %7, i32* %uid2, align 4, !dbg !11176
  %8 = load %struct.htab**, %struct.htab*** %visited_p.addr, align 8, !dbg !11177
  %9 = load %struct.htab*, %struct.htab** %8, align 8, !dbg !11178
  %10 = bitcast %struct.type_pair_d* %pair to i8*, !dbg !11179
  %call4 = call i8** @htab_find_slot(%struct.htab* %9, i8* %10, i32 1), !dbg !11180
  store i8** %call4, i8*** %slot, align 8, !dbg !11181
  %11 = load i8**, i8*** %slot, align 8, !dbg !11182
  %12 = load i8*, i8** %11, align 8, !dbg !11184
  %tobool = icmp ne i8* %12, null, !dbg !11184
  br i1 %tobool, label %if.then5, label %if.else, !dbg !11185

if.then5:                                         ; preds = %if.end
  %13 = load i8**, i8*** %slot, align 8, !dbg !11186
  %14 = bitcast i8** %13 to %struct.type_pair_d**, !dbg !11187
  %15 = load %struct.type_pair_d*, %struct.type_pair_d** %14, align 8, !dbg !11187
  store %struct.type_pair_d* %15, %struct.type_pair_d** %p, align 8, !dbg !11188
  br label %if.end55, !dbg !11189

if.else:                                          ; preds = %if.end
  %16 = load %struct.obstack*, %struct.obstack** %ob_p.addr, align 8, !dbg !11190
  %temp = getelementptr inbounds %struct.obstack, %struct.obstack* %16, i32 0, i32 5, !dbg !11190
  store i64 12, i64* %temp, align 8, !dbg !11190
  %17 = load %struct.obstack*, %struct.obstack** %ob_p.addr, align 8, !dbg !11190
  %chunk_limit = getelementptr inbounds %struct.obstack, %struct.obstack* %17, i32 0, i32 4, !dbg !11190
  %18 = load i8*, i8** %chunk_limit, align 8, !dbg !11190
  %19 = load %struct.obstack*, %struct.obstack** %ob_p.addr, align 8, !dbg !11190
  %next_free = getelementptr inbounds %struct.obstack, %struct.obstack* %19, i32 0, i32 3, !dbg !11190
  %20 = load i8*, i8** %next_free, align 8, !dbg !11190
  %sub.ptr.lhs.cast = ptrtoint i8* %18 to i64, !dbg !11190
  %sub.ptr.rhs.cast = ptrtoint i8* %20 to i64, !dbg !11190
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !11190
  %21 = load %struct.obstack*, %struct.obstack** %ob_p.addr, align 8, !dbg !11190
  %temp6 = getelementptr inbounds %struct.obstack, %struct.obstack* %21, i32 0, i32 5, !dbg !11190
  %22 = load i64, i64* %temp6, align 8, !dbg !11190
  %cmp7 = icmp slt i64 %sub.ptr.sub, %22, !dbg !11190
  br i1 %cmp7, label %cond.true, label %cond.false, !dbg !11190

cond.true:                                        ; preds = %if.else
  %23 = load %struct.obstack*, %struct.obstack** %ob_p.addr, align 8, !dbg !11190
  %24 = load %struct.obstack*, %struct.obstack** %ob_p.addr, align 8, !dbg !11190
  %temp8 = getelementptr inbounds %struct.obstack, %struct.obstack* %24, i32 0, i32 5, !dbg !11190
  %25 = load i64, i64* %temp8, align 8, !dbg !11190
  %conv = trunc i64 %25 to i32, !dbg !11190
  call void @_obstack_newchunk(%struct.obstack* %23, i32 %conv), !dbg !11190
  br label %cond.end, !dbg !11190

cond.false:                                       ; preds = %if.else
  br label %cond.end, !dbg !11190

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !11190
  %26 = load %struct.obstack*, %struct.obstack** %ob_p.addr, align 8, !dbg !11190
  %temp9 = getelementptr inbounds %struct.obstack, %struct.obstack* %26, i32 0, i32 5, !dbg !11190
  %27 = load i64, i64* %temp9, align 8, !dbg !11190
  %28 = load %struct.obstack*, %struct.obstack** %ob_p.addr, align 8, !dbg !11190
  %next_free10 = getelementptr inbounds %struct.obstack, %struct.obstack* %28, i32 0, i32 3, !dbg !11190
  %29 = load i8*, i8** %next_free10, align 8, !dbg !11190
  %add.ptr = getelementptr inbounds i8, i8* %29, i64 %27, !dbg !11190
  store i8* %add.ptr, i8** %next_free10, align 8, !dbg !11190
  %30 = load %struct.obstack*, %struct.obstack** %ob_p.addr, align 8, !dbg !11190
  %next_free11 = getelementptr inbounds %struct.obstack, %struct.obstack* %30, i32 0, i32 3, !dbg !11190
  %31 = load i8*, i8** %next_free11, align 8, !dbg !11190
  %32 = load %struct.obstack*, %struct.obstack** %ob_p.addr, align 8, !dbg !11190
  %object_base = getelementptr inbounds %struct.obstack, %struct.obstack* %32, i32 0, i32 2, !dbg !11190
  %33 = load i8*, i8** %object_base, align 8, !dbg !11190
  %cmp12 = icmp eq i8* %31, %33, !dbg !11190
  br i1 %cmp12, label %cond.true14, label %cond.false15, !dbg !11190

cond.true14:                                      ; preds = %cond.end
  %34 = load %struct.obstack*, %struct.obstack** %ob_p.addr, align 8, !dbg !11190
  %maybe_empty_object = getelementptr inbounds %struct.obstack, %struct.obstack* %34, i32 0, i32 10, !dbg !11190
  %bf.load = load i8, i8* %maybe_empty_object, align 8, !dbg !11190
  %bf.clear = and i8 %bf.load, -3, !dbg !11190
  %bf.set = or i8 %bf.clear, 2, !dbg !11190
  store i8 %bf.set, i8* %maybe_empty_object, align 8, !dbg !11190
  br label %cond.end16, !dbg !11190

cond.false15:                                     ; preds = %cond.end
  br label %cond.end16, !dbg !11190

cond.end16:                                       ; preds = %cond.false15, %cond.true14
  %cond17 = phi i32 [ 0, %cond.true14 ], [ 0, %cond.false15 ], !dbg !11190
  %35 = load %struct.obstack*, %struct.obstack** %ob_p.addr, align 8, !dbg !11190
  %object_base18 = getelementptr inbounds %struct.obstack, %struct.obstack* %35, i32 0, i32 2, !dbg !11190
  %36 = load i8*, i8** %object_base18, align 8, !dbg !11190
  %sub.ptr.lhs.cast19 = ptrtoint i8* %36 to i64, !dbg !11190
  %sub.ptr.sub20 = sub i64 %sub.ptr.lhs.cast19, 0, !dbg !11190
  %37 = load %struct.obstack*, %struct.obstack** %ob_p.addr, align 8, !dbg !11190
  %temp21 = getelementptr inbounds %struct.obstack, %struct.obstack* %37, i32 0, i32 5, !dbg !11190
  store i64 %sub.ptr.sub20, i64* %temp21, align 8, !dbg !11190
  %38 = load %struct.obstack*, %struct.obstack** %ob_p.addr, align 8, !dbg !11190
  %next_free22 = getelementptr inbounds %struct.obstack, %struct.obstack* %38, i32 0, i32 3, !dbg !11190
  %39 = load i8*, i8** %next_free22, align 8, !dbg !11190
  %sub.ptr.lhs.cast23 = ptrtoint i8* %39 to i64, !dbg !11190
  %sub.ptr.sub24 = sub i64 %sub.ptr.lhs.cast23, 0, !dbg !11190
  %40 = load %struct.obstack*, %struct.obstack** %ob_p.addr, align 8, !dbg !11190
  %alignment_mask = getelementptr inbounds %struct.obstack, %struct.obstack* %40, i32 0, i32 6, !dbg !11190
  %41 = load i32, i32* %alignment_mask, align 8, !dbg !11190
  %conv25 = sext i32 %41 to i64, !dbg !11190
  %add = add nsw i64 %sub.ptr.sub24, %conv25, !dbg !11190
  %42 = load %struct.obstack*, %struct.obstack** %ob_p.addr, align 8, !dbg !11190
  %alignment_mask26 = getelementptr inbounds %struct.obstack, %struct.obstack* %42, i32 0, i32 6, !dbg !11190
  %43 = load i32, i32* %alignment_mask26, align 8, !dbg !11190
  %neg = xor i32 %43, -1, !dbg !11190
  %conv27 = sext i32 %neg to i64, !dbg !11190
  %and = and i64 %add, %conv27, !dbg !11190
  %44 = inttoptr i64 %and to i8*, !dbg !11190
  %45 = load %struct.obstack*, %struct.obstack** %ob_p.addr, align 8, !dbg !11190
  %next_free28 = getelementptr inbounds %struct.obstack, %struct.obstack* %45, i32 0, i32 3, !dbg !11190
  store i8* %44, i8** %next_free28, align 8, !dbg !11190
  %46 = load %struct.obstack*, %struct.obstack** %ob_p.addr, align 8, !dbg !11190
  %next_free29 = getelementptr inbounds %struct.obstack, %struct.obstack* %46, i32 0, i32 3, !dbg !11190
  %47 = load i8*, i8** %next_free29, align 8, !dbg !11190
  %48 = load %struct.obstack*, %struct.obstack** %ob_p.addr, align 8, !dbg !11190
  %chunk = getelementptr inbounds %struct.obstack, %struct.obstack* %48, i32 0, i32 1, !dbg !11190
  %49 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8, !dbg !11190
  %50 = bitcast %struct._obstack_chunk* %49 to i8*, !dbg !11190
  %sub.ptr.lhs.cast30 = ptrtoint i8* %47 to i64, !dbg !11190
  %sub.ptr.rhs.cast31 = ptrtoint i8* %50 to i64, !dbg !11190
  %sub.ptr.sub32 = sub i64 %sub.ptr.lhs.cast30, %sub.ptr.rhs.cast31, !dbg !11190
  %51 = load %struct.obstack*, %struct.obstack** %ob_p.addr, align 8, !dbg !11190
  %chunk_limit33 = getelementptr inbounds %struct.obstack, %struct.obstack* %51, i32 0, i32 4, !dbg !11190
  %52 = load i8*, i8** %chunk_limit33, align 8, !dbg !11190
  %53 = load %struct.obstack*, %struct.obstack** %ob_p.addr, align 8, !dbg !11190
  %chunk34 = getelementptr inbounds %struct.obstack, %struct.obstack* %53, i32 0, i32 1, !dbg !11190
  %54 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk34, align 8, !dbg !11190
  %55 = bitcast %struct._obstack_chunk* %54 to i8*, !dbg !11190
  %sub.ptr.lhs.cast35 = ptrtoint i8* %52 to i64, !dbg !11190
  %sub.ptr.rhs.cast36 = ptrtoint i8* %55 to i64, !dbg !11190
  %sub.ptr.sub37 = sub i64 %sub.ptr.lhs.cast35, %sub.ptr.rhs.cast36, !dbg !11190
  %cmp38 = icmp sgt i64 %sub.ptr.sub32, %sub.ptr.sub37, !dbg !11190
  br i1 %cmp38, label %cond.true40, label %cond.false43, !dbg !11190

cond.true40:                                      ; preds = %cond.end16
  %56 = load %struct.obstack*, %struct.obstack** %ob_p.addr, align 8, !dbg !11190
  %chunk_limit41 = getelementptr inbounds %struct.obstack, %struct.obstack* %56, i32 0, i32 4, !dbg !11190
  %57 = load i8*, i8** %chunk_limit41, align 8, !dbg !11190
  %58 = load %struct.obstack*, %struct.obstack** %ob_p.addr, align 8, !dbg !11190
  %next_free42 = getelementptr inbounds %struct.obstack, %struct.obstack* %58, i32 0, i32 3, !dbg !11190
  store i8* %57, i8** %next_free42, align 8, !dbg !11190
  br label %cond.end44, !dbg !11190

cond.false43:                                     ; preds = %cond.end16
  br label %cond.end44, !dbg !11190

cond.end44:                                       ; preds = %cond.false43, %cond.true40
  %cond45 = phi i8* [ %57, %cond.true40 ], [ null, %cond.false43 ], !dbg !11190
  %59 = load %struct.obstack*, %struct.obstack** %ob_p.addr, align 8, !dbg !11190
  %next_free46 = getelementptr inbounds %struct.obstack, %struct.obstack* %59, i32 0, i32 3, !dbg !11190
  %60 = load i8*, i8** %next_free46, align 8, !dbg !11190
  %61 = load %struct.obstack*, %struct.obstack** %ob_p.addr, align 8, !dbg !11190
  %object_base47 = getelementptr inbounds %struct.obstack, %struct.obstack* %61, i32 0, i32 2, !dbg !11190
  store i8* %60, i8** %object_base47, align 8, !dbg !11190
  %62 = load %struct.obstack*, %struct.obstack** %ob_p.addr, align 8, !dbg !11190
  %temp48 = getelementptr inbounds %struct.obstack, %struct.obstack* %62, i32 0, i32 5, !dbg !11190
  %63 = load i64, i64* %temp48, align 8, !dbg !11190
  %64 = inttoptr i64 %63 to i8*, !dbg !11190
  %65 = bitcast i8* %64 to %struct.type_pair_d*, !dbg !11190
  store %struct.type_pair_d* %65, %struct.type_pair_d** %p, align 8, !dbg !11192
  %66 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !11193
  %type49 = bitcast %union.tree_node* %66 to %struct.tree_type*, !dbg !11193
  %uid50 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type49, i32 0, i32 5, !dbg !11193
  %67 = load i32, i32* %uid50, align 8, !dbg !11193
  %68 = load %struct.type_pair_d*, %struct.type_pair_d** %p, align 8, !dbg !11194
  %uid151 = getelementptr inbounds %struct.type_pair_d, %struct.type_pair_d* %68, i32 0, i32 0, !dbg !11195
  store i32 %67, i32* %uid151, align 4, !dbg !11196
  %69 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !11197
  %type52 = bitcast %union.tree_node* %69 to %struct.tree_type*, !dbg !11197
  %uid53 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type52, i32 0, i32 5, !dbg !11197
  %70 = load i32, i32* %uid53, align 8, !dbg !11197
  %71 = load %struct.type_pair_d*, %struct.type_pair_d** %p, align 8, !dbg !11198
  %uid254 = getelementptr inbounds %struct.type_pair_d, %struct.type_pair_d* %71, i32 0, i32 1, !dbg !11199
  store i32 %70, i32* %uid254, align 4, !dbg !11200
  %72 = load %struct.type_pair_d*, %struct.type_pair_d** %p, align 8, !dbg !11201
  %same_p = getelementptr inbounds %struct.type_pair_d, %struct.type_pair_d* %72, i32 0, i32 2, !dbg !11202
  store i32 -2, i32* %same_p, align 4, !dbg !11203
  %73 = load %struct.type_pair_d*, %struct.type_pair_d** %p, align 8, !dbg !11204
  %74 = bitcast %struct.type_pair_d* %73 to i8*, !dbg !11205
  %75 = load i8**, i8*** %slot, align 8, !dbg !11206
  store i8* %74, i8** %75, align 8, !dbg !11207
  br label %if.end55

if.end55:                                         ; preds = %cond.end44, %if.then5
  %76 = load %struct.type_pair_d*, %struct.type_pair_d** %p, align 8, !dbg !11208
  ret %struct.type_pair_d* %76, !dbg !11209
}

declare dso_local i32 @attribute_list_equal(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @compare_type_names_p(%union.tree_node* %t1, %union.tree_node* %t2, i8 zeroext %for_completion_p) #0 !dbg !11210 {
entry:
  %retval = alloca i8, align 1
  %t1.addr = alloca %union.tree_node*, align 8
  %t2.addr = alloca %union.tree_node*, align 8
  %for_completion_p.addr = alloca i8, align 1
  %name1 = alloca %union.tree_node*, align 8
  %name2 = alloca %union.tree_node*, align 8
  store %union.tree_node* %t1, %union.tree_node** %t1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t1.addr, metadata !11213, metadata !DIExpression()), !dbg !11214
  store %union.tree_node* %t2, %union.tree_node** %t2.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t2.addr, metadata !11215, metadata !DIExpression()), !dbg !11216
  store i8 %for_completion_p, i8* %for_completion_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %for_completion_p.addr, metadata !11217, metadata !DIExpression()), !dbg !11218
  call void @llvm.dbg.declare(metadata %union.tree_node** %name1, metadata !11219, metadata !DIExpression()), !dbg !11220
  %0 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !11221
  %type = bitcast %union.tree_node* %0 to %struct.tree_type*, !dbg !11221
  %name = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 12, !dbg !11221
  %1 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !11221
  store %union.tree_node* %1, %union.tree_node** %name1, align 8, !dbg !11220
  call void @llvm.dbg.declare(metadata %union.tree_node** %name2, metadata !11222, metadata !DIExpression()), !dbg !11223
  %2 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !11224
  %type1 = bitcast %union.tree_node* %2 to %struct.tree_type*, !dbg !11224
  %name3 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 12, !dbg !11224
  %3 = load %union.tree_node*, %union.tree_node** %name3, align 8, !dbg !11224
  store %union.tree_node* %3, %union.tree_node** %name2, align 8, !dbg !11223
  %4 = load i8, i8* %for_completion_p.addr, align 1, !dbg !11225
  %conv = zext i8 %4 to i32, !dbg !11225
  %tobool = icmp ne i32 %conv, 0, !dbg !11225
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !11227

land.lhs.true:                                    ; preds = %entry
  %5 = load %union.tree_node*, %union.tree_node** %name1, align 8, !dbg !11228
  %tobool4 = icmp ne %union.tree_node* %5, null, !dbg !11228
  br i1 %tobool4, label %lor.lhs.false, label %if.then, !dbg !11229

lor.lhs.false:                                    ; preds = %land.lhs.true
  %6 = load %union.tree_node*, %union.tree_node** %name2, align 8, !dbg !11230
  %tobool5 = icmp ne %union.tree_node* %6, null, !dbg !11230
  br i1 %tobool5, label %if.end, label %if.then, !dbg !11231

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  store i8 0, i8* %retval, align 1, !dbg !11232
  br label %return, !dbg !11232

if.end:                                           ; preds = %lor.lhs.false, %entry
  %7 = load %union.tree_node*, %union.tree_node** %name1, align 8, !dbg !11233
  %tobool6 = icmp ne %union.tree_node* %7, null, !dbg !11233
  br i1 %tobool6, label %land.lhs.true7, label %if.end17, !dbg !11235

land.lhs.true7:                                   ; preds = %if.end
  %8 = load %union.tree_node*, %union.tree_node** %name1, align 8, !dbg !11236
  %base = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !11236
  %9 = bitcast %struct.tree_base* %base to i64*, !dbg !11236
  %bf.load = load i64, i64* %9, align 8, !dbg !11236
  %bf.clear = and i64 %bf.load, 65535, !dbg !11236
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !11236
  %cmp = icmp eq i32 %bf.cast, 35, !dbg !11237
  br i1 %cmp, label %if.then9, label %if.end17, !dbg !11238

if.then9:                                         ; preds = %land.lhs.true7
  %10 = load %union.tree_node*, %union.tree_node** %name1, align 8, !dbg !11239
  %decl_minimal = bitcast %union.tree_node* %10 to %struct.tree_decl_minimal*, !dbg !11239
  %name10 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 3, !dbg !11239
  %11 = load %union.tree_node*, %union.tree_node** %name10, align 8, !dbg !11239
  store %union.tree_node* %11, %union.tree_node** %name1, align 8, !dbg !11241
  %12 = load i8, i8* %for_completion_p.addr, align 1, !dbg !11242
  %conv11 = zext i8 %12 to i32, !dbg !11242
  %tobool12 = icmp ne i32 %conv11, 0, !dbg !11242
  br i1 %tobool12, label %land.lhs.true13, label %if.end16, !dbg !11244

land.lhs.true13:                                  ; preds = %if.then9
  %13 = load %union.tree_node*, %union.tree_node** %name1, align 8, !dbg !11245
  %tobool14 = icmp ne %union.tree_node* %13, null, !dbg !11245
  br i1 %tobool14, label %if.end16, label %if.then15, !dbg !11246

if.then15:                                        ; preds = %land.lhs.true13
  store i8 0, i8* %retval, align 1, !dbg !11247
  br label %return, !dbg !11247

if.end16:                                         ; preds = %land.lhs.true13, %if.then9
  br label %if.end17, !dbg !11248

if.end17:                                         ; preds = %if.end16, %land.lhs.true7, %if.end
  %14 = load %union.tree_node*, %union.tree_node** %name1, align 8, !dbg !11249
  %tobool18 = icmp ne %union.tree_node* %14, null, !dbg !11249
  br i1 %tobool18, label %lor.lhs.false19, label %cond.false, !dbg !11249

lor.lhs.false19:                                  ; preds = %if.end17
  %15 = load %union.tree_node*, %union.tree_node** %name1, align 8, !dbg !11249
  %base20 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !11249
  %16 = bitcast %struct.tree_base* %base20 to i64*, !dbg !11249
  %bf.load21 = load i64, i64* %16, align 8, !dbg !11249
  %bf.clear22 = and i64 %bf.load21, 65535, !dbg !11249
  %bf.cast23 = trunc i64 %bf.clear22 to i32, !dbg !11249
  %cmp24 = icmp eq i32 %bf.cast23, 1, !dbg !11249
  br i1 %cmp24, label %cond.false, label %cond.true, !dbg !11249

cond.true:                                        ; preds = %lor.lhs.false19
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 3108, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !11249
  br label %cond.end, !dbg !11249

cond.false:                                       ; preds = %lor.lhs.false19, %if.end17
  br label %cond.end, !dbg !11249

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !11249
  %17 = load %union.tree_node*, %union.tree_node** %name2, align 8, !dbg !11250
  %tobool26 = icmp ne %union.tree_node* %17, null, !dbg !11250
  br i1 %tobool26, label %land.lhs.true27, label %if.end43, !dbg !11252

land.lhs.true27:                                  ; preds = %cond.end
  %18 = load %union.tree_node*, %union.tree_node** %name2, align 8, !dbg !11253
  %base28 = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !11253
  %19 = bitcast %struct.tree_base* %base28 to i64*, !dbg !11253
  %bf.load29 = load i64, i64* %19, align 8, !dbg !11253
  %bf.clear30 = and i64 %bf.load29, 65535, !dbg !11253
  %bf.cast31 = trunc i64 %bf.clear30 to i32, !dbg !11253
  %cmp32 = icmp eq i32 %bf.cast31, 35, !dbg !11254
  br i1 %cmp32, label %if.then34, label %if.end43, !dbg !11255

if.then34:                                        ; preds = %land.lhs.true27
  %20 = load %union.tree_node*, %union.tree_node** %name2, align 8, !dbg !11256
  %decl_minimal35 = bitcast %union.tree_node* %20 to %struct.tree_decl_minimal*, !dbg !11256
  %name36 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal35, i32 0, i32 3, !dbg !11256
  %21 = load %union.tree_node*, %union.tree_node** %name36, align 8, !dbg !11256
  store %union.tree_node* %21, %union.tree_node** %name2, align 8, !dbg !11258
  %22 = load i8, i8* %for_completion_p.addr, align 1, !dbg !11259
  %conv37 = zext i8 %22 to i32, !dbg !11259
  %tobool38 = icmp ne i32 %conv37, 0, !dbg !11259
  br i1 %tobool38, label %land.lhs.true39, label %if.end42, !dbg !11261

land.lhs.true39:                                  ; preds = %if.then34
  %23 = load %union.tree_node*, %union.tree_node** %name2, align 8, !dbg !11262
  %tobool40 = icmp ne %union.tree_node* %23, null, !dbg !11262
  br i1 %tobool40, label %if.end42, label %if.then41, !dbg !11263

if.then41:                                        ; preds = %land.lhs.true39
  store i8 0, i8* %retval, align 1, !dbg !11264
  br label %return, !dbg !11264

if.end42:                                         ; preds = %land.lhs.true39, %if.then34
  br label %if.end43, !dbg !11265

if.end43:                                         ; preds = %if.end42, %land.lhs.true27, %cond.end
  %24 = load %union.tree_node*, %union.tree_node** %name2, align 8, !dbg !11266
  %tobool44 = icmp ne %union.tree_node* %24, null, !dbg !11266
  br i1 %tobool44, label %lor.lhs.false45, label %cond.false53, !dbg !11266

lor.lhs.false45:                                  ; preds = %if.end43
  %25 = load %union.tree_node*, %union.tree_node** %name2, align 8, !dbg !11266
  %base46 = bitcast %union.tree_node* %25 to %struct.tree_base*, !dbg !11266
  %26 = bitcast %struct.tree_base* %base46 to i64*, !dbg !11266
  %bf.load47 = load i64, i64* %26, align 8, !dbg !11266
  %bf.clear48 = and i64 %bf.load47, 65535, !dbg !11266
  %bf.cast49 = trunc i64 %bf.clear48 to i32, !dbg !11266
  %cmp50 = icmp eq i32 %bf.cast49, 1, !dbg !11266
  br i1 %cmp50, label %cond.false53, label %cond.true52, !dbg !11266

cond.true52:                                      ; preds = %lor.lhs.false45
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 3117, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !11266
  br label %cond.end54, !dbg !11266

cond.false53:                                     ; preds = %lor.lhs.false45, %if.end43
  br label %cond.end54, !dbg !11266

cond.end54:                                       ; preds = %cond.false53, %cond.true52
  %cond55 = phi i32 [ 0, %cond.true52 ], [ 0, %cond.false53 ], !dbg !11266
  %27 = load %union.tree_node*, %union.tree_node** %name1, align 8, !dbg !11267
  %28 = load %union.tree_node*, %union.tree_node** %name2, align 8, !dbg !11269
  %cmp56 = icmp eq %union.tree_node* %27, %28, !dbg !11270
  br i1 %cmp56, label %if.then58, label %if.end59, !dbg !11271

if.then58:                                        ; preds = %cond.end54
  store i8 1, i8* %retval, align 1, !dbg !11272
  br label %return, !dbg !11272

if.end59:                                         ; preds = %cond.end54
  store i8 0, i8* %retval, align 1, !dbg !11273
  br label %return, !dbg !11273

return:                                           ; preds = %if.end59, %if.then58, %if.then41, %if.then15, %if.then
  %29 = load i8, i8* %retval, align 1, !dbg !11274
  ret i8 %29, !dbg !11274
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @type_pair_hash(i8* %p) #0 !dbg !11275 {
entry:
  %p.addr = alloca i8*, align 8
  %pair = alloca %struct.type_pair_d*, align 8
  %val1 = alloca i32, align 4
  %val2 = alloca i32, align 4
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !11276, metadata !DIExpression()), !dbg !11277
  call void @llvm.dbg.declare(metadata %struct.type_pair_d** %pair, metadata !11278, metadata !DIExpression()), !dbg !11279
  %0 = load i8*, i8** %p.addr, align 8, !dbg !11280
  %1 = bitcast i8* %0 to %struct.type_pair_d*, !dbg !11281
  store %struct.type_pair_d* %1, %struct.type_pair_d** %pair, align 8, !dbg !11279
  call void @llvm.dbg.declare(metadata i32* %val1, metadata !11282, metadata !DIExpression()), !dbg !11283
  %2 = load %struct.type_pair_d*, %struct.type_pair_d** %pair, align 8, !dbg !11284
  %uid1 = getelementptr inbounds %struct.type_pair_d, %struct.type_pair_d* %2, i32 0, i32 0, !dbg !11285
  %3 = load i32, i32* %uid1, align 4, !dbg !11285
  store i32 %3, i32* %val1, align 4, !dbg !11283
  call void @llvm.dbg.declare(metadata i32* %val2, metadata !11286, metadata !DIExpression()), !dbg !11287
  %4 = load %struct.type_pair_d*, %struct.type_pair_d** %pair, align 8, !dbg !11288
  %uid2 = getelementptr inbounds %struct.type_pair_d, %struct.type_pair_d* %4, i32 0, i32 1, !dbg !11289
  %5 = load i32, i32* %uid2, align 4, !dbg !11289
  store i32 %5, i32* %val2, align 4, !dbg !11287
  %6 = load i32, i32* %val2, align 4, !dbg !11290
  %7 = load i32, i32* %val1, align 4, !dbg !11291
  %call = call i32 @iterative_hash_hashval_t(i32 %6, i32 %7), !dbg !11292
  %8 = load i32, i32* %val1, align 4, !dbg !11293
  %9 = load i32, i32* %val2, align 4, !dbg !11294
  %call1 = call i32 @iterative_hash_hashval_t(i32 %8, i32 %9), !dbg !11295
  %xor = xor i32 %call, %call1, !dbg !11296
  ret i32 %xor, !dbg !11297
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @type_pair_eq(i8* %p1, i8* %p2) #0 !dbg !11298 {
entry:
  %p1.addr = alloca i8*, align 8
  %p2.addr = alloca i8*, align 8
  %pair1 = alloca %struct.type_pair_d*, align 8
  %pair2 = alloca %struct.type_pair_d*, align 8
  store i8* %p1, i8** %p1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p1.addr, metadata !11299, metadata !DIExpression()), !dbg !11300
  store i8* %p2, i8** %p2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p2.addr, metadata !11301, metadata !DIExpression()), !dbg !11302
  call void @llvm.dbg.declare(metadata %struct.type_pair_d** %pair1, metadata !11303, metadata !DIExpression()), !dbg !11304
  %0 = load i8*, i8** %p1.addr, align 8, !dbg !11305
  %1 = bitcast i8* %0 to %struct.type_pair_d*, !dbg !11306
  store %struct.type_pair_d* %1, %struct.type_pair_d** %pair1, align 8, !dbg !11304
  call void @llvm.dbg.declare(metadata %struct.type_pair_d** %pair2, metadata !11307, metadata !DIExpression()), !dbg !11308
  %2 = load i8*, i8** %p2.addr, align 8, !dbg !11309
  %3 = bitcast i8* %2 to %struct.type_pair_d*, !dbg !11310
  store %struct.type_pair_d* %3, %struct.type_pair_d** %pair2, align 8, !dbg !11308
  %4 = load %struct.type_pair_d*, %struct.type_pair_d** %pair1, align 8, !dbg !11311
  %uid1 = getelementptr inbounds %struct.type_pair_d, %struct.type_pair_d* %4, i32 0, i32 0, !dbg !11312
  %5 = load i32, i32* %uid1, align 4, !dbg !11312
  %6 = load %struct.type_pair_d*, %struct.type_pair_d** %pair2, align 8, !dbg !11313
  %uid11 = getelementptr inbounds %struct.type_pair_d, %struct.type_pair_d* %6, i32 0, i32 0, !dbg !11314
  %7 = load i32, i32* %uid11, align 4, !dbg !11314
  %cmp = icmp eq i32 %5, %7, !dbg !11315
  br i1 %cmp, label %land.lhs.true, label %lor.rhs, !dbg !11316

land.lhs.true:                                    ; preds = %entry
  %8 = load %struct.type_pair_d*, %struct.type_pair_d** %pair1, align 8, !dbg !11317
  %uid2 = getelementptr inbounds %struct.type_pair_d, %struct.type_pair_d* %8, i32 0, i32 1, !dbg !11318
  %9 = load i32, i32* %uid2, align 4, !dbg !11318
  %10 = load %struct.type_pair_d*, %struct.type_pair_d** %pair2, align 8, !dbg !11319
  %uid22 = getelementptr inbounds %struct.type_pair_d, %struct.type_pair_d* %10, i32 0, i32 1, !dbg !11320
  %11 = load i32, i32* %uid22, align 4, !dbg !11320
  %cmp3 = icmp eq i32 %9, %11, !dbg !11321
  br i1 %cmp3, label %lor.end, label %lor.rhs, !dbg !11322

lor.rhs:                                          ; preds = %land.lhs.true, %entry
  %12 = load %struct.type_pair_d*, %struct.type_pair_d** %pair1, align 8, !dbg !11323
  %uid14 = getelementptr inbounds %struct.type_pair_d, %struct.type_pair_d* %12, i32 0, i32 0, !dbg !11324
  %13 = load i32, i32* %uid14, align 4, !dbg !11324
  %14 = load %struct.type_pair_d*, %struct.type_pair_d** %pair2, align 8, !dbg !11325
  %uid25 = getelementptr inbounds %struct.type_pair_d, %struct.type_pair_d* %14, i32 0, i32 1, !dbg !11326
  %15 = load i32, i32* %uid25, align 4, !dbg !11326
  %cmp6 = icmp eq i32 %13, %15, !dbg !11327
  br i1 %cmp6, label %land.rhs, label %land.end, !dbg !11328

land.rhs:                                         ; preds = %lor.rhs
  %16 = load %struct.type_pair_d*, %struct.type_pair_d** %pair1, align 8, !dbg !11329
  %uid27 = getelementptr inbounds %struct.type_pair_d, %struct.type_pair_d* %16, i32 0, i32 1, !dbg !11330
  %17 = load i32, i32* %uid27, align 4, !dbg !11330
  %18 = load %struct.type_pair_d*, %struct.type_pair_d** %pair2, align 8, !dbg !11331
  %uid18 = getelementptr inbounds %struct.type_pair_d, %struct.type_pair_d* %18, i32 0, i32 0, !dbg !11332
  %19 = load i32, i32* %uid18, align 4, !dbg !11332
  %cmp9 = icmp eq i32 %17, %19, !dbg !11333
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %20 = phi i1 [ false, %lor.rhs ], [ %cmp9, %land.rhs ], !dbg !11334
  br label %lor.end, !dbg !11322

lor.end:                                          ; preds = %land.end, %land.lhs.true
  %21 = phi i1 [ true, %land.lhs.true ], [ %20, %land.end ]
  %lor.ext = zext i1 %21 to i32, !dbg !11322
  ret i32 %lor.ext, !dbg !11335
}

declare dso_local %union.tree_node* @build_nonstandard_integer_type(i64, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @op_iter_init(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !11336 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !11339, metadata !DIExpression()), !dbg !11340
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !11341, metadata !DIExpression()), !dbg !11342
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !11343, metadata !DIExpression()), !dbg !11344
  %0 = load i32, i32* %flags.addr, align 4, !dbg !11345
  %and = and i32 %0, 8, !dbg !11345
  %tobool = icmp ne i32 %and, 0, !dbg !11345
  br i1 %tobool, label %lor.lhs.false, label %land.lhs.true, !dbg !11345

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !11345
  %and1 = and i32 %1, 2, !dbg !11345
  %tobool2 = icmp ne i32 %and1, 0, !dbg !11345
  br i1 %tobool2, label %land.lhs.true, label %cond.true, !dbg !11345

land.lhs.true:                                    ; preds = %lor.lhs.false, %entry
  %2 = load i32, i32* %flags.addr, align 4, !dbg !11345
  %and3 = and i32 %2, 4, !dbg !11345
  %tobool4 = icmp ne i32 %and3, 0, !dbg !11345
  br i1 %tobool4, label %lor.lhs.false5, label %cond.false, !dbg !11345

lor.lhs.false5:                                   ; preds = %land.lhs.true
  %3 = load i32, i32* %flags.addr, align 4, !dbg !11345
  %and6 = and i32 %3, 1, !dbg !11345
  %tobool7 = icmp ne i32 %and6, 0, !dbg !11345
  br i1 %tobool7, label %cond.false, label %cond.true, !dbg !11345

cond.true:                                        ; preds = %lor.lhs.false5, %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0), i32 747, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !11345
  br label %cond.end, !dbg !11345

cond.false:                                       ; preds = %lor.lhs.false5, %land.lhs.true
  br label %cond.end, !dbg !11345

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !11345
  %4 = load i32, i32* %flags.addr, align 4, !dbg !11346
  %and8 = and i32 %4, 10, !dbg !11347
  %tobool9 = icmp ne i32 %and8, 0, !dbg !11347
  br i1 %tobool9, label %cond.true10, label %cond.false11, !dbg !11348

cond.true10:                                      ; preds = %cond.end
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11349
  %call = call %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %5), !dbg !11350
  br label %cond.end12, !dbg !11348

cond.false11:                                     ; preds = %cond.end
  br label %cond.end12, !dbg !11348

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond13 = phi %struct.def_optype_d* [ %call, %cond.true10 ], [ null, %cond.false11 ], !dbg !11348
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !11351
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %6, i32 0, i32 2, !dbg !11352
  store %struct.def_optype_d* %cond13, %struct.def_optype_d** %defs, align 8, !dbg !11353
  %7 = load i32, i32* %flags.addr, align 4, !dbg !11354
  %and14 = and i32 %7, 8, !dbg !11356
  %tobool15 = icmp ne i32 %and14, 0, !dbg !11356
  br i1 %tobool15, label %if.end, label %land.lhs.true16, !dbg !11357

land.lhs.true16:                                  ; preds = %cond.end12
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !11358
  %defs17 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %8, i32 0, i32 2, !dbg !11359
  %9 = load %struct.def_optype_d*, %struct.def_optype_d** %defs17, align 8, !dbg !11359
  %tobool18 = icmp ne %struct.def_optype_d* %9, null, !dbg !11358
  br i1 %tobool18, label %land.lhs.true19, label %if.end, !dbg !11360

land.lhs.true19:                                  ; preds = %land.lhs.true16
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11361
  %call20 = call %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %10), !dbg !11362
  %cmp = icmp ne %union.tree_node* %call20, null, !dbg !11363
  br i1 %cmp, label %if.then, label %if.end, !dbg !11364

if.then:                                          ; preds = %land.lhs.true19
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !11365
  %defs21 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 2, !dbg !11366
  %12 = load %struct.def_optype_d*, %struct.def_optype_d** %defs21, align 8, !dbg !11366
  %next = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %12, i32 0, i32 0, !dbg !11367
  %13 = load %struct.def_optype_d*, %struct.def_optype_d** %next, align 8, !dbg !11367
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !11368
  %defs22 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %14, i32 0, i32 2, !dbg !11369
  store %struct.def_optype_d* %13, %struct.def_optype_d** %defs22, align 8, !dbg !11370
  br label %if.end, !dbg !11368

if.end:                                           ; preds = %if.then, %land.lhs.true19, %land.lhs.true16, %cond.end12
  %15 = load i32, i32* %flags.addr, align 4, !dbg !11371
  %and23 = and i32 %15, 5, !dbg !11372
  %tobool24 = icmp ne i32 %and23, 0, !dbg !11372
  br i1 %tobool24, label %cond.true25, label %cond.false27, !dbg !11373

cond.true25:                                      ; preds = %if.end
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11374
  %call26 = call %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %16), !dbg !11375
  br label %cond.end28, !dbg !11373

cond.false27:                                     ; preds = %if.end
  br label %cond.end28, !dbg !11373

cond.end28:                                       ; preds = %cond.false27, %cond.true25
  %cond29 = phi %struct.use_optype_d* [ %call26, %cond.true25 ], [ null, %cond.false27 ], !dbg !11373
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !11376
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 3, !dbg !11377
  store %struct.use_optype_d* %cond29, %struct.use_optype_d** %uses, align 8, !dbg !11378
  %18 = load i32, i32* %flags.addr, align 4, !dbg !11379
  %and30 = and i32 %18, 4, !dbg !11381
  %tobool31 = icmp ne i32 %and30, 0, !dbg !11381
  br i1 %tobool31, label %if.end42, label %land.lhs.true32, !dbg !11382

land.lhs.true32:                                  ; preds = %cond.end28
  %19 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !11383
  %uses33 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %19, i32 0, i32 3, !dbg !11384
  %20 = load %struct.use_optype_d*, %struct.use_optype_d** %uses33, align 8, !dbg !11384
  %tobool34 = icmp ne %struct.use_optype_d* %20, null, !dbg !11383
  br i1 %tobool34, label %land.lhs.true35, label %if.end42, !dbg !11385

land.lhs.true35:                                  ; preds = %land.lhs.true32
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11386
  %call36 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %21), !dbg !11387
  %cmp37 = icmp ne %union.tree_node* %call36, null, !dbg !11388
  br i1 %cmp37, label %if.then38, label %if.end42, !dbg !11389

if.then38:                                        ; preds = %land.lhs.true35
  %22 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !11390
  %uses39 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %22, i32 0, i32 3, !dbg !11391
  %23 = load %struct.use_optype_d*, %struct.use_optype_d** %uses39, align 8, !dbg !11391
  %next40 = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %23, i32 0, i32 0, !dbg !11392
  %24 = load %struct.use_optype_d*, %struct.use_optype_d** %next40, align 8, !dbg !11392
  %25 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !11393
  %uses41 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %25, i32 0, i32 3, !dbg !11394
  store %struct.use_optype_d* %24, %struct.use_optype_d** %uses41, align 8, !dbg !11395
  br label %if.end42, !dbg !11393

if.end42:                                         ; preds = %if.then38, %land.lhs.true35, %land.lhs.true32, %cond.end28
  %26 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !11396
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %26, i32 0, i32 0, !dbg !11397
  store i8 0, i8* %done, align 8, !dbg !11398
  %27 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !11399
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %27, i32 0, i32 4, !dbg !11400
  store i32 0, i32* %phi_i, align 8, !dbg !11401
  %28 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !11402
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %28, i32 0, i32 5, !dbg !11403
  store i32 0, i32* %num_phi, align 4, !dbg !11404
  %29 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !11405
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %29, i32 0, i32 6, !dbg !11406
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !11407
  ret void, !dbg !11408
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %g) #0 !dbg !11409 {
entry:
  %retval = alloca %struct.def_optype_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !11412, metadata !DIExpression()), !dbg !11413
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !11414
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !11416
  %tobool = icmp ne i8 %call, 0, !dbg !11416
  br i1 %tobool, label %if.end, label %if.then, !dbg !11417

if.then:                                          ; preds = %entry
  store %struct.def_optype_d* null, %struct.def_optype_d** %retval, align 8, !dbg !11418
  br label %return, !dbg !11418

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !11419
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !11420
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !11421
  %def_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 1, !dbg !11422
  %2 = load %struct.def_optype_d*, %struct.def_optype_d** %def_ops, align 8, !dbg !11422
  store %struct.def_optype_d* %2, %struct.def_optype_d** %retval, align 8, !dbg !11423
  br label %return, !dbg !11423

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.def_optype_d*, %struct.def_optype_d** %retval, align 8, !dbg !11424
  ret %struct.def_optype_d* %3, !dbg !11424
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %g) #0 !dbg !11425 {
entry:
  %retval = alloca %struct.use_optype_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !11428, metadata !DIExpression()), !dbg !11429
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !11430
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !11432
  %tobool = icmp ne i8 %call, 0, !dbg !11432
  br i1 %tobool, label %if.end, label %if.then, !dbg !11433

if.then:                                          ; preds = %entry
  store %struct.use_optype_d* null, %struct.use_optype_d** %retval, align 8, !dbg !11434
  br label %return, !dbg !11434

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !11435
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !11436
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !11437
  %use_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 2, !dbg !11438
  %2 = load %struct.use_optype_d*, %struct.use_optype_d** %use_ops, align 8, !dbg !11438
  store %struct.use_optype_d* %2, %struct.use_optype_d** %retval, align 8, !dbg !11439
  br label %return, !dbg !11439

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %retval, align 8, !dbg !11440
  ret %struct.use_optype_d* %3, !dbg !11440
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_def_from_ptr(%union.tree_node** %def) #0 !dbg !11441 {
entry:
  %def.addr = alloca %union.tree_node**, align 8
  store %union.tree_node** %def, %union.tree_node*** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %def.addr, metadata !11445, metadata !DIExpression()), !dbg !11446
  %0 = load %union.tree_node**, %union.tree_node*** %def.addr, align 8, !dbg !11447
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !11448
  ret %union.tree_node* %1, !dbg !11449
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !11450 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !11454, metadata !DIExpression()), !dbg !11455
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !11456, metadata !DIExpression()), !dbg !11457
  %0 = load i32, i32* %index.addr, align 4, !dbg !11458
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !11458
  %gimple_phi = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_phi*, !dbg !11458
  %capacity = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 1, !dbg !11458
  %2 = load i32, i32* %capacity, align 8, !dbg !11458
  %cmp = icmp ule i32 %0, %2, !dbg !11458
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !11458

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 3103, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)), !dbg !11458
  br label %cond.end, !dbg !11458

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11458

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !11458
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !11459
  %gimple_phi1 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_phi*, !dbg !11460
  %args = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi1, i32 0, i32 4, !dbg !11461
  %4 = load i32, i32* %index.addr, align 4, !dbg !11462
  %idxprom = zext i32 %4 to i64, !dbg !11459
  %arrayidx = getelementptr inbounds [1 x %struct.phi_arg_d], [1 x %struct.phi_arg_d]* %args, i64 0, i64 %idxprom, !dbg !11459
  ret %struct.phi_arg_d* %arrayidx, !dbg !11463
}

declare dso_local zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def*, i32) #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!1878, !1879, !1880}
!llvm.ident = !{!1881}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "gimple_ops_offset_", scope: !2, file: !3, line: 57, type: !1872, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !593, globals: !1830, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "gimple.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !33, !39, !44, !49, !68, !75, !82, !276, !314, !320, !333, !467, !473, !476, !508, !512, !517, !522, !536, !543, !580}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_statement_structure_enum", file: !6, line: 727, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./gimple.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32}
!9 = !DIEnumerator(name: "GSS_BASE", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "GSS_WITH_OPS", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "GSS_WITH_MEM_OPS_BASE", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "GSS_WITH_MEM_OPS", value: 3, isUnsigned: true)
!13 = !DIEnumerator(name: "GSS_ASM", value: 4, isUnsigned: true)
!14 = !DIEnumerator(name: "GSS_BIND", value: 5, isUnsigned: true)
!15 = !DIEnumerator(name: "GSS_PHI", value: 6, isUnsigned: true)
!16 = !DIEnumerator(name: "GSS_TRY", value: 7, isUnsigned: true)
!17 = !DIEnumerator(name: "GSS_CATCH", value: 8, isUnsigned: true)
!18 = !DIEnumerator(name: "GSS_EH_FILTER", value: 9, isUnsigned: true)
!19 = !DIEnumerator(name: "GSS_EH_MNT", value: 10, isUnsigned: true)
!20 = !DIEnumerator(name: "GSS_EH_CTRL", value: 11, isUnsigned: true)
!21 = !DIEnumerator(name: "GSS_WCE", value: 12, isUnsigned: true)
!22 = !DIEnumerator(name: "GSS_OMP", value: 13, isUnsigned: true)
!23 = !DIEnumerator(name: "GSS_OMP_CRITICAL", value: 14, isUnsigned: true)
!24 = !DIEnumerator(name: "GSS_OMP_FOR", value: 15, isUnsigned: true)
!25 = !DIEnumerator(name: "GSS_OMP_PARALLEL", value: 16, isUnsigned: true)
!26 = !DIEnumerator(name: "GSS_OMP_TASK", value: 17, isUnsigned: true)
!27 = !DIEnumerator(name: "GSS_OMP_SECTIONS", value: 18, isUnsigned: true)
!28 = !DIEnumerator(name: "GSS_OMP_SINGLE", value: 19, isUnsigned: true)
!29 = !DIEnumerator(name: "GSS_OMP_CONTINUE", value: 20, isUnsigned: true)
!30 = !DIEnumerator(name: "GSS_OMP_ATOMIC_LOAD", value: 21, isUnsigned: true)
!31 = !DIEnumerator(name: "GSS_OMP_ATOMIC_STORE", value: 22, isUnsigned: true)
!32 = !DIEnumerator(name: "LAST_GSS_ENUM", value: 23, isUnsigned: true)
!33 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !34, line: 363, baseType: !7, size: 32, elements: !35)
!34 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!35 = !{!36, !37, !38}
!36 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!37 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!38 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!39 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !34, line: 355, baseType: !7, size: 32, elements: !40)
!40 = !{!41, !42, !43}
!41 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!42 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!43 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!44 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !45, line: 474, baseType: !7, size: 32, elements: !46)
!45 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!46 = !{!47, !48}
!47 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!48 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!49 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !50, line: 280, baseType: !7, size: 32, elements: !51)
!50 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!51 = !{!52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67}
!52 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!53 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!54 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!55 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!56 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!57 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!58 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!59 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!60 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!61 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!62 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!63 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!64 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!65 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!66 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!67 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!68 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !50, line: 1817, baseType: !7, size: 32, elements: !69)
!69 = !{!70, !71, !72, !73, !74}
!70 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!71 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!72 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!73 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!74 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!75 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !50, line: 1805, baseType: !7, size: 32, elements: !76)
!76 = !{!77, !78, !79, !80, !81}
!77 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!78 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!79 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!80 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!81 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!82 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !50, line: 39, baseType: !7, size: 32, elements: !83)
!83 = !{!84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133, !134, !135, !136, !137, !138, !139, !140, !141, !142, !143, !144, !145, !146, !147, !148, !149, !150, !151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275}
!84 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!85 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!86 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!87 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!88 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!89 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!90 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!91 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!92 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!93 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!94 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!95 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!96 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!97 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!98 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!99 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!100 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!101 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!102 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!103 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!104 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!105 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!106 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!107 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!108 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!109 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!110 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!111 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!112 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!113 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!114 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!115 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!116 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!117 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!118 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!119 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!120 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!121 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!122 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!123 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!124 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!125 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!126 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!127 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!128 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!129 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!130 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!131 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!132 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!133 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!134 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!135 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!136 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!137 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!138 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!139 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!140 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!141 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!142 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!143 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!144 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!145 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!146 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!147 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!148 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!149 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!150 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!151 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!152 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!153 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!154 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!155 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!156 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!157 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!158 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!159 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!160 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!161 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!162 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!163 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!164 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!165 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!166 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!167 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!168 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!169 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!170 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!171 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!172 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!173 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!174 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!175 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!176 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!177 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!178 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!179 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!180 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!181 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!182 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!183 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!184 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!185 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!186 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!187 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!188 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!189 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!190 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!191 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!192 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!193 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!194 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!195 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!196 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!197 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!198 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!199 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!200 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!201 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!202 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!203 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!204 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!205 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!206 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!207 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!208 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!209 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!210 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!211 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!212 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!213 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!214 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!215 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!216 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!217 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!218 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!219 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!220 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!221 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!222 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!223 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!224 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!225 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!226 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!227 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!228 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!229 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!230 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!231 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!232 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!233 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!234 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!235 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!236 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!237 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!238 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!239 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!240 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!241 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!242 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!243 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!244 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!245 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!246 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!247 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!248 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!249 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!250 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!251 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!252 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!253 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!254 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!255 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!256 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!257 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!258 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!259 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!260 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!261 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!262 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!263 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!264 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!265 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!266 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!267 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!268 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!269 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!270 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!271 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!272 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!273 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!274 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!275 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!276 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_code", file: !6, line: 51, baseType: !7, size: 32, elements: !277)
!277 = !{!278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313}
!278 = !DIEnumerator(name: "GIMPLE_ERROR_MARK", value: 0, isUnsigned: true)
!279 = !DIEnumerator(name: "GIMPLE_COND", value: 1, isUnsigned: true)
!280 = !DIEnumerator(name: "GIMPLE_DEBUG", value: 2, isUnsigned: true)
!281 = !DIEnumerator(name: "GIMPLE_GOTO", value: 3, isUnsigned: true)
!282 = !DIEnumerator(name: "GIMPLE_LABEL", value: 4, isUnsigned: true)
!283 = !DIEnumerator(name: "GIMPLE_SWITCH", value: 5, isUnsigned: true)
!284 = !DIEnumerator(name: "GIMPLE_ASSIGN", value: 6, isUnsigned: true)
!285 = !DIEnumerator(name: "GIMPLE_ASM", value: 7, isUnsigned: true)
!286 = !DIEnumerator(name: "GIMPLE_CALL", value: 8, isUnsigned: true)
!287 = !DIEnumerator(name: "GIMPLE_RETURN", value: 9, isUnsigned: true)
!288 = !DIEnumerator(name: "GIMPLE_BIND", value: 10, isUnsigned: true)
!289 = !DIEnumerator(name: "GIMPLE_CATCH", value: 11, isUnsigned: true)
!290 = !DIEnumerator(name: "GIMPLE_EH_FILTER", value: 12, isUnsigned: true)
!291 = !DIEnumerator(name: "GIMPLE_EH_MUST_NOT_THROW", value: 13, isUnsigned: true)
!292 = !DIEnumerator(name: "GIMPLE_RESX", value: 14, isUnsigned: true)
!293 = !DIEnumerator(name: "GIMPLE_EH_DISPATCH", value: 15, isUnsigned: true)
!294 = !DIEnumerator(name: "GIMPLE_PHI", value: 16, isUnsigned: true)
!295 = !DIEnumerator(name: "GIMPLE_TRY", value: 17, isUnsigned: true)
!296 = !DIEnumerator(name: "GIMPLE_NOP", value: 18, isUnsigned: true)
!297 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_LOAD", value: 19, isUnsigned: true)
!298 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_STORE", value: 20, isUnsigned: true)
!299 = !DIEnumerator(name: "GIMPLE_OMP_CONTINUE", value: 21, isUnsigned: true)
!300 = !DIEnumerator(name: "GIMPLE_OMP_CRITICAL", value: 22, isUnsigned: true)
!301 = !DIEnumerator(name: "GIMPLE_OMP_FOR", value: 23, isUnsigned: true)
!302 = !DIEnumerator(name: "GIMPLE_OMP_MASTER", value: 24, isUnsigned: true)
!303 = !DIEnumerator(name: "GIMPLE_OMP_ORDERED", value: 25, isUnsigned: true)
!304 = !DIEnumerator(name: "GIMPLE_OMP_PARALLEL", value: 26, isUnsigned: true)
!305 = !DIEnumerator(name: "GIMPLE_OMP_TASK", value: 27, isUnsigned: true)
!306 = !DIEnumerator(name: "GIMPLE_OMP_RETURN", value: 28, isUnsigned: true)
!307 = !DIEnumerator(name: "GIMPLE_OMP_SECTION", value: 29, isUnsigned: true)
!308 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS", value: 30, isUnsigned: true)
!309 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS_SWITCH", value: 31, isUnsigned: true)
!310 = !DIEnumerator(name: "GIMPLE_OMP_SINGLE", value: 32, isUnsigned: true)
!311 = !DIEnumerator(name: "GIMPLE_PREDICT", value: 33, isUnsigned: true)
!312 = !DIEnumerator(name: "GIMPLE_WITH_CLEANUP_EXPR", value: 34, isUnsigned: true)
!313 = !DIEnumerator(name: "LAST_AND_UNUSED_GIMPLE_CODE", value: 35, isUnsigned: true)
!314 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_rhs_class", file: !6, line: 80, baseType: !7, size: 32, elements: !315)
!315 = !{!316, !317, !318, !319}
!316 = !DIEnumerator(name: "GIMPLE_INVALID_RHS", value: 0, isUnsigned: true)
!317 = !DIEnumerator(name: "GIMPLE_BINARY_RHS", value: 1, isUnsigned: true)
!318 = !DIEnumerator(name: "GIMPLE_UNARY_RHS", value: 2, isUnsigned: true)
!319 = !DIEnumerator(name: "GIMPLE_SINGLE_RHS", value: 3, isUnsigned: true)
!320 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code_class", file: !50, line: 58, baseType: !7, size: 32, elements: !321)
!321 = !{!322, !323, !324, !325, !326, !327, !328, !329, !330, !331, !332}
!322 = !DIEnumerator(name: "tcc_exceptional", value: 0, isUnsigned: true)
!323 = !DIEnumerator(name: "tcc_constant", value: 1, isUnsigned: true)
!324 = !DIEnumerator(name: "tcc_type", value: 2, isUnsigned: true)
!325 = !DIEnumerator(name: "tcc_declaration", value: 3, isUnsigned: true)
!326 = !DIEnumerator(name: "tcc_reference", value: 4, isUnsigned: true)
!327 = !DIEnumerator(name: "tcc_comparison", value: 5, isUnsigned: true)
!328 = !DIEnumerator(name: "tcc_unary", value: 6, isUnsigned: true)
!329 = !DIEnumerator(name: "tcc_binary", value: 7, isUnsigned: true)
!330 = !DIEnumerator(name: "tcc_statement", value: 8, isUnsigned: true)
!331 = !DIEnumerator(name: "tcc_vl_exp", value: 9, isUnsigned: true)
!332 = !DIEnumerator(name: "tcc_expression", value: 10, isUnsigned: true)
!333 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_index", file: !50, line: 3410, baseType: !7, size: 32, elements: !334)
!334 = !{!335, !336, !337, !338, !339, !340, !341, !342, !343, !344, !345, !346, !347, !348, !349, !350, !351, !352, !353, !354, !355, !356, !357, !358, !359, !360, !361, !362, !363, !364, !365, !366, !367, !368, !369, !370, !371, !372, !373, !374, !375, !376, !377, !378, !379, !380, !381, !382, !383, !384, !385, !386, !387, !388, !389, !390, !391, !392, !393, !394, !395, !396, !397, !398, !399, !400, !401, !402, !403, !404, !405, !406, !407, !408, !409, !410, !411, !412, !413, !414, !415, !416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466}
!335 = !DIEnumerator(name: "TI_ERROR_MARK", value: 0, isUnsigned: true)
!336 = !DIEnumerator(name: "TI_INTQI_TYPE", value: 1, isUnsigned: true)
!337 = !DIEnumerator(name: "TI_INTHI_TYPE", value: 2, isUnsigned: true)
!338 = !DIEnumerator(name: "TI_INTSI_TYPE", value: 3, isUnsigned: true)
!339 = !DIEnumerator(name: "TI_INTDI_TYPE", value: 4, isUnsigned: true)
!340 = !DIEnumerator(name: "TI_INTTI_TYPE", value: 5, isUnsigned: true)
!341 = !DIEnumerator(name: "TI_UINTQI_TYPE", value: 6, isUnsigned: true)
!342 = !DIEnumerator(name: "TI_UINTHI_TYPE", value: 7, isUnsigned: true)
!343 = !DIEnumerator(name: "TI_UINTSI_TYPE", value: 8, isUnsigned: true)
!344 = !DIEnumerator(name: "TI_UINTDI_TYPE", value: 9, isUnsigned: true)
!345 = !DIEnumerator(name: "TI_UINTTI_TYPE", value: 10, isUnsigned: true)
!346 = !DIEnumerator(name: "TI_UINT32_TYPE", value: 11, isUnsigned: true)
!347 = !DIEnumerator(name: "TI_UINT64_TYPE", value: 12, isUnsigned: true)
!348 = !DIEnumerator(name: "TI_INTEGER_ZERO", value: 13, isUnsigned: true)
!349 = !DIEnumerator(name: "TI_INTEGER_ONE", value: 14, isUnsigned: true)
!350 = !DIEnumerator(name: "TI_INTEGER_MINUS_ONE", value: 15, isUnsigned: true)
!351 = !DIEnumerator(name: "TI_NULL_POINTER", value: 16, isUnsigned: true)
!352 = !DIEnumerator(name: "TI_SIZE_ZERO", value: 17, isUnsigned: true)
!353 = !DIEnumerator(name: "TI_SIZE_ONE", value: 18, isUnsigned: true)
!354 = !DIEnumerator(name: "TI_BITSIZE_ZERO", value: 19, isUnsigned: true)
!355 = !DIEnumerator(name: "TI_BITSIZE_ONE", value: 20, isUnsigned: true)
!356 = !DIEnumerator(name: "TI_BITSIZE_UNIT", value: 21, isUnsigned: true)
!357 = !DIEnumerator(name: "TI_PUBLIC", value: 22, isUnsigned: true)
!358 = !DIEnumerator(name: "TI_PROTECTED", value: 23, isUnsigned: true)
!359 = !DIEnumerator(name: "TI_PRIVATE", value: 24, isUnsigned: true)
!360 = !DIEnumerator(name: "TI_BOOLEAN_FALSE", value: 25, isUnsigned: true)
!361 = !DIEnumerator(name: "TI_BOOLEAN_TRUE", value: 26, isUnsigned: true)
!362 = !DIEnumerator(name: "TI_COMPLEX_INTEGER_TYPE", value: 27, isUnsigned: true)
!363 = !DIEnumerator(name: "TI_COMPLEX_FLOAT_TYPE", value: 28, isUnsigned: true)
!364 = !DIEnumerator(name: "TI_COMPLEX_DOUBLE_TYPE", value: 29, isUnsigned: true)
!365 = !DIEnumerator(name: "TI_COMPLEX_LONG_DOUBLE_TYPE", value: 30, isUnsigned: true)
!366 = !DIEnumerator(name: "TI_FLOAT_TYPE", value: 31, isUnsigned: true)
!367 = !DIEnumerator(name: "TI_DOUBLE_TYPE", value: 32, isUnsigned: true)
!368 = !DIEnumerator(name: "TI_LONG_DOUBLE_TYPE", value: 33, isUnsigned: true)
!369 = !DIEnumerator(name: "TI_FLOAT_PTR_TYPE", value: 34, isUnsigned: true)
!370 = !DIEnumerator(name: "TI_DOUBLE_PTR_TYPE", value: 35, isUnsigned: true)
!371 = !DIEnumerator(name: "TI_LONG_DOUBLE_PTR_TYPE", value: 36, isUnsigned: true)
!372 = !DIEnumerator(name: "TI_INTEGER_PTR_TYPE", value: 37, isUnsigned: true)
!373 = !DIEnumerator(name: "TI_VOID_TYPE", value: 38, isUnsigned: true)
!374 = !DIEnumerator(name: "TI_PTR_TYPE", value: 39, isUnsigned: true)
!375 = !DIEnumerator(name: "TI_CONST_PTR_TYPE", value: 40, isUnsigned: true)
!376 = !DIEnumerator(name: "TI_SIZE_TYPE", value: 41, isUnsigned: true)
!377 = !DIEnumerator(name: "TI_PID_TYPE", value: 42, isUnsigned: true)
!378 = !DIEnumerator(name: "TI_PTRDIFF_TYPE", value: 43, isUnsigned: true)
!379 = !DIEnumerator(name: "TI_VA_LIST_TYPE", value: 44, isUnsigned: true)
!380 = !DIEnumerator(name: "TI_VA_LIST_GPR_COUNTER_FIELD", value: 45, isUnsigned: true)
!381 = !DIEnumerator(name: "TI_VA_LIST_FPR_COUNTER_FIELD", value: 46, isUnsigned: true)
!382 = !DIEnumerator(name: "TI_BOOLEAN_TYPE", value: 47, isUnsigned: true)
!383 = !DIEnumerator(name: "TI_FILEPTR_TYPE", value: 48, isUnsigned: true)
!384 = !DIEnumerator(name: "TI_DFLOAT32_TYPE", value: 49, isUnsigned: true)
!385 = !DIEnumerator(name: "TI_DFLOAT64_TYPE", value: 50, isUnsigned: true)
!386 = !DIEnumerator(name: "TI_DFLOAT128_TYPE", value: 51, isUnsigned: true)
!387 = !DIEnumerator(name: "TI_DFLOAT32_PTR_TYPE", value: 52, isUnsigned: true)
!388 = !DIEnumerator(name: "TI_DFLOAT64_PTR_TYPE", value: 53, isUnsigned: true)
!389 = !DIEnumerator(name: "TI_DFLOAT128_PTR_TYPE", value: 54, isUnsigned: true)
!390 = !DIEnumerator(name: "TI_VOID_LIST_NODE", value: 55, isUnsigned: true)
!391 = !DIEnumerator(name: "TI_MAIN_IDENTIFIER", value: 56, isUnsigned: true)
!392 = !DIEnumerator(name: "TI_SAT_SFRACT_TYPE", value: 57, isUnsigned: true)
!393 = !DIEnumerator(name: "TI_SAT_FRACT_TYPE", value: 58, isUnsigned: true)
!394 = !DIEnumerator(name: "TI_SAT_LFRACT_TYPE", value: 59, isUnsigned: true)
!395 = !DIEnumerator(name: "TI_SAT_LLFRACT_TYPE", value: 60, isUnsigned: true)
!396 = !DIEnumerator(name: "TI_SAT_USFRACT_TYPE", value: 61, isUnsigned: true)
!397 = !DIEnumerator(name: "TI_SAT_UFRACT_TYPE", value: 62, isUnsigned: true)
!398 = !DIEnumerator(name: "TI_SAT_ULFRACT_TYPE", value: 63, isUnsigned: true)
!399 = !DIEnumerator(name: "TI_SAT_ULLFRACT_TYPE", value: 64, isUnsigned: true)
!400 = !DIEnumerator(name: "TI_SFRACT_TYPE", value: 65, isUnsigned: true)
!401 = !DIEnumerator(name: "TI_FRACT_TYPE", value: 66, isUnsigned: true)
!402 = !DIEnumerator(name: "TI_LFRACT_TYPE", value: 67, isUnsigned: true)
!403 = !DIEnumerator(name: "TI_LLFRACT_TYPE", value: 68, isUnsigned: true)
!404 = !DIEnumerator(name: "TI_USFRACT_TYPE", value: 69, isUnsigned: true)
!405 = !DIEnumerator(name: "TI_UFRACT_TYPE", value: 70, isUnsigned: true)
!406 = !DIEnumerator(name: "TI_ULFRACT_TYPE", value: 71, isUnsigned: true)
!407 = !DIEnumerator(name: "TI_ULLFRACT_TYPE", value: 72, isUnsigned: true)
!408 = !DIEnumerator(name: "TI_SAT_SACCUM_TYPE", value: 73, isUnsigned: true)
!409 = !DIEnumerator(name: "TI_SAT_ACCUM_TYPE", value: 74, isUnsigned: true)
!410 = !DIEnumerator(name: "TI_SAT_LACCUM_TYPE", value: 75, isUnsigned: true)
!411 = !DIEnumerator(name: "TI_SAT_LLACCUM_TYPE", value: 76, isUnsigned: true)
!412 = !DIEnumerator(name: "TI_SAT_USACCUM_TYPE", value: 77, isUnsigned: true)
!413 = !DIEnumerator(name: "TI_SAT_UACCUM_TYPE", value: 78, isUnsigned: true)
!414 = !DIEnumerator(name: "TI_SAT_ULACCUM_TYPE", value: 79, isUnsigned: true)
!415 = !DIEnumerator(name: "TI_SAT_ULLACCUM_TYPE", value: 80, isUnsigned: true)
!416 = !DIEnumerator(name: "TI_SACCUM_TYPE", value: 81, isUnsigned: true)
!417 = !DIEnumerator(name: "TI_ACCUM_TYPE", value: 82, isUnsigned: true)
!418 = !DIEnumerator(name: "TI_LACCUM_TYPE", value: 83, isUnsigned: true)
!419 = !DIEnumerator(name: "TI_LLACCUM_TYPE", value: 84, isUnsigned: true)
!420 = !DIEnumerator(name: "TI_USACCUM_TYPE", value: 85, isUnsigned: true)
!421 = !DIEnumerator(name: "TI_UACCUM_TYPE", value: 86, isUnsigned: true)
!422 = !DIEnumerator(name: "TI_ULACCUM_TYPE", value: 87, isUnsigned: true)
!423 = !DIEnumerator(name: "TI_ULLACCUM_TYPE", value: 88, isUnsigned: true)
!424 = !DIEnumerator(name: "TI_QQ_TYPE", value: 89, isUnsigned: true)
!425 = !DIEnumerator(name: "TI_HQ_TYPE", value: 90, isUnsigned: true)
!426 = !DIEnumerator(name: "TI_SQ_TYPE", value: 91, isUnsigned: true)
!427 = !DIEnumerator(name: "TI_DQ_TYPE", value: 92, isUnsigned: true)
!428 = !DIEnumerator(name: "TI_TQ_TYPE", value: 93, isUnsigned: true)
!429 = !DIEnumerator(name: "TI_UQQ_TYPE", value: 94, isUnsigned: true)
!430 = !DIEnumerator(name: "TI_UHQ_TYPE", value: 95, isUnsigned: true)
!431 = !DIEnumerator(name: "TI_USQ_TYPE", value: 96, isUnsigned: true)
!432 = !DIEnumerator(name: "TI_UDQ_TYPE", value: 97, isUnsigned: true)
!433 = !DIEnumerator(name: "TI_UTQ_TYPE", value: 98, isUnsigned: true)
!434 = !DIEnumerator(name: "TI_SAT_QQ_TYPE", value: 99, isUnsigned: true)
!435 = !DIEnumerator(name: "TI_SAT_HQ_TYPE", value: 100, isUnsigned: true)
!436 = !DIEnumerator(name: "TI_SAT_SQ_TYPE", value: 101, isUnsigned: true)
!437 = !DIEnumerator(name: "TI_SAT_DQ_TYPE", value: 102, isUnsigned: true)
!438 = !DIEnumerator(name: "TI_SAT_TQ_TYPE", value: 103, isUnsigned: true)
!439 = !DIEnumerator(name: "TI_SAT_UQQ_TYPE", value: 104, isUnsigned: true)
!440 = !DIEnumerator(name: "TI_SAT_UHQ_TYPE", value: 105, isUnsigned: true)
!441 = !DIEnumerator(name: "TI_SAT_USQ_TYPE", value: 106, isUnsigned: true)
!442 = !DIEnumerator(name: "TI_SAT_UDQ_TYPE", value: 107, isUnsigned: true)
!443 = !DIEnumerator(name: "TI_SAT_UTQ_TYPE", value: 108, isUnsigned: true)
!444 = !DIEnumerator(name: "TI_HA_TYPE", value: 109, isUnsigned: true)
!445 = !DIEnumerator(name: "TI_SA_TYPE", value: 110, isUnsigned: true)
!446 = !DIEnumerator(name: "TI_DA_TYPE", value: 111, isUnsigned: true)
!447 = !DIEnumerator(name: "TI_TA_TYPE", value: 112, isUnsigned: true)
!448 = !DIEnumerator(name: "TI_UHA_TYPE", value: 113, isUnsigned: true)
!449 = !DIEnumerator(name: "TI_USA_TYPE", value: 114, isUnsigned: true)
!450 = !DIEnumerator(name: "TI_UDA_TYPE", value: 115, isUnsigned: true)
!451 = !DIEnumerator(name: "TI_UTA_TYPE", value: 116, isUnsigned: true)
!452 = !DIEnumerator(name: "TI_SAT_HA_TYPE", value: 117, isUnsigned: true)
!453 = !DIEnumerator(name: "TI_SAT_SA_TYPE", value: 118, isUnsigned: true)
!454 = !DIEnumerator(name: "TI_SAT_DA_TYPE", value: 119, isUnsigned: true)
!455 = !DIEnumerator(name: "TI_SAT_TA_TYPE", value: 120, isUnsigned: true)
!456 = !DIEnumerator(name: "TI_SAT_UHA_TYPE", value: 121, isUnsigned: true)
!457 = !DIEnumerator(name: "TI_SAT_USA_TYPE", value: 122, isUnsigned: true)
!458 = !DIEnumerator(name: "TI_SAT_UDA_TYPE", value: 123, isUnsigned: true)
!459 = !DIEnumerator(name: "TI_SAT_UTA_TYPE", value: 124, isUnsigned: true)
!460 = !DIEnumerator(name: "TI_OPTIMIZATION_DEFAULT", value: 125, isUnsigned: true)
!461 = !DIEnumerator(name: "TI_OPTIMIZATION_CURRENT", value: 126, isUnsigned: true)
!462 = !DIEnumerator(name: "TI_TARGET_OPTION_DEFAULT", value: 127, isUnsigned: true)
!463 = !DIEnumerator(name: "TI_TARGET_OPTION_CURRENT", value: 128, isUnsigned: true)
!464 = !DIEnumerator(name: "TI_CURRENT_TARGET_PRAGMA", value: 129, isUnsigned: true)
!465 = !DIEnumerator(name: "TI_CURRENT_OPTIMIZE_PRAGMA", value: 130, isUnsigned: true)
!466 = !DIEnumerator(name: "TI_MAX", value: 131, isUnsigned: true)
!467 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_try_flags", file: !6, line: 514, baseType: !7, size: 32, elements: !468)
!468 = !{!469, !470, !471, !472}
!469 = !DIEnumerator(name: "GIMPLE_TRY_CATCH", value: 1, isUnsigned: true)
!470 = !DIEnumerator(name: "GIMPLE_TRY_FINALLY", value: 2, isUnsigned: true)
!471 = !DIEnumerator(name: "GIMPLE_TRY_KIND", value: 3, isUnsigned: true)
!472 = !DIEnumerator(name: "GIMPLE_TRY_CATCH_IS_CLEANUP", value: 4, isUnsigned: true)
!473 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_debug_subcode", file: !6, line: 124, baseType: !7, size: 32, elements: !474)
!474 = !{!475}
!475 = !DIEnumerator(name: "GIMPLE_DEBUG_BIND", value: 0, isUnsigned: true)
!476 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "br_predictor", file: !477, line: 24, baseType: !7, size: 32, elements: !478)
!477 = !DIFile(filename: "./predict.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!478 = !{!479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507}
!479 = !DIEnumerator(name: "PRED_COMBINED", value: 0, isUnsigned: true)
!480 = !DIEnumerator(name: "PRED_DS_THEORY", value: 1, isUnsigned: true)
!481 = !DIEnumerator(name: "PRED_FIRST_MATCH", value: 2, isUnsigned: true)
!482 = !DIEnumerator(name: "PRED_NO_PREDICTION", value: 3, isUnsigned: true)
!483 = !DIEnumerator(name: "PRED_UNCONDITIONAL", value: 4, isUnsigned: true)
!484 = !DIEnumerator(name: "PRED_LOOP_ITERATIONS", value: 5, isUnsigned: true)
!485 = !DIEnumerator(name: "PRED_BUILTIN_EXPECT", value: 6, isUnsigned: true)
!486 = !DIEnumerator(name: "PRED_LOOP_ITERATIONS_GUESSED", value: 7, isUnsigned: true)
!487 = !DIEnumerator(name: "PRED_CONTINUE", value: 8, isUnsigned: true)
!488 = !DIEnumerator(name: "PRED_NORETURN", value: 9, isUnsigned: true)
!489 = !DIEnumerator(name: "PRED_COLD_FUNCTION", value: 10, isUnsigned: true)
!490 = !DIEnumerator(name: "PRED_LOOP_BRANCH", value: 11, isUnsigned: true)
!491 = !DIEnumerator(name: "PRED_LOOP_EXIT", value: 12, isUnsigned: true)
!492 = !DIEnumerator(name: "PRED_POINTER", value: 13, isUnsigned: true)
!493 = !DIEnumerator(name: "PRED_TREE_POINTER", value: 14, isUnsigned: true)
!494 = !DIEnumerator(name: "PRED_OPCODE_POSITIVE", value: 15, isUnsigned: true)
!495 = !DIEnumerator(name: "PRED_OPCODE_NONEQUAL", value: 16, isUnsigned: true)
!496 = !DIEnumerator(name: "PRED_FPOPCODE", value: 17, isUnsigned: true)
!497 = !DIEnumerator(name: "PRED_TREE_OPCODE_POSITIVE", value: 18, isUnsigned: true)
!498 = !DIEnumerator(name: "PRED_TREE_OPCODE_NONEQUAL", value: 19, isUnsigned: true)
!499 = !DIEnumerator(name: "PRED_TREE_FPOPCODE", value: 20, isUnsigned: true)
!500 = !DIEnumerator(name: "PRED_CALL", value: 21, isUnsigned: true)
!501 = !DIEnumerator(name: "PRED_TREE_EARLY_RETURN", value: 22, isUnsigned: true)
!502 = !DIEnumerator(name: "PRED_GOTO", value: 23, isUnsigned: true)
!503 = !DIEnumerator(name: "PRED_CONST_RETURN", value: 24, isUnsigned: true)
!504 = !DIEnumerator(name: "PRED_NEGATIVE_RETURN", value: 25, isUnsigned: true)
!505 = !DIEnumerator(name: "PRED_NULL_RETURN", value: 26, isUnsigned: true)
!506 = !DIEnumerator(name: "PRED_MUDFLAP", value: 27, isUnsigned: true)
!507 = !DIEnumerator(name: "END_PREDICTORS", value: 28, isUnsigned: true)
!508 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "prediction", file: !477, line: 32, baseType: !7, size: 32, elements: !509)
!509 = !{!510, !511}
!510 = !DIEnumerator(name: "NOT_TAKEN", value: 0, isUnsigned: true)
!511 = !DIEnumerator(name: "TAKEN", value: 1, isUnsigned: true)
!512 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gsi_iterator_update", file: !6, line: 4603, baseType: !7, size: 32, elements: !513)
!513 = !{!514, !515, !516}
!514 = !DIEnumerator(name: "GSI_NEW_STMT", value: 0, isUnsigned: true)
!515 = !DIEnumerator(name: "GSI_SAME_STMT", value: 1, isUnsigned: true)
!516 = !DIEnumerator(name: "GSI_CONTINUE_LINKING", value: 2, isUnsigned: true)
!517 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "insert_option", file: !518, line: 147, baseType: !7, size: 32, elements: !519)
!518 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!519 = !{!520, !521}
!520 = !DIEnumerator(name: "NO_INSERT", value: 0, isUnsigned: true)
!521 = !DIEnumerator(name: "INSERT", value: 1, isUnsigned: true)
!522 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "integer_type_kind", file: !50, line: 3745, baseType: !7, size: 32, elements: !523)
!523 = !{!524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535}
!524 = !DIEnumerator(name: "itk_char", value: 0, isUnsigned: true)
!525 = !DIEnumerator(name: "itk_signed_char", value: 1, isUnsigned: true)
!526 = !DIEnumerator(name: "itk_unsigned_char", value: 2, isUnsigned: true)
!527 = !DIEnumerator(name: "itk_short", value: 3, isUnsigned: true)
!528 = !DIEnumerator(name: "itk_unsigned_short", value: 4, isUnsigned: true)
!529 = !DIEnumerator(name: "itk_int", value: 5, isUnsigned: true)
!530 = !DIEnumerator(name: "itk_unsigned_int", value: 6, isUnsigned: true)
!531 = !DIEnumerator(name: "itk_long", value: 7, isUnsigned: true)
!532 = !DIEnumerator(name: "itk_unsigned_long", value: 8, isUnsigned: true)
!533 = !DIEnumerator(name: "itk_long_long", value: 9, isUnsigned: true)
!534 = !DIEnumerator(name: "itk_unsigned_long_long", value: 10, isUnsigned: true)
!535 = !DIEnumerator(name: "itk_none", value: 11, isUnsigned: true)
!536 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ssa_op_iter_type", file: !537, line: 119, baseType: !7, size: 32, elements: !538)
!537 = !DIFile(filename: "./tree-ssa-operands.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!538 = !{!539, !540, !541, !542}
!539 = !DIEnumerator(name: "ssa_op_iter_none", value: 0, isUnsigned: true)
!540 = !DIEnumerator(name: "ssa_op_iter_tree", value: 1, isUnsigned: true)
!541 = !DIEnumerator(name: "ssa_op_iter_use", value: 2, isUnsigned: true)
!542 = !DIEnumerator(name: "ssa_op_iter_def", value: 3, isUnsigned: true)
!543 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_node_structure_enum", file: !50, line: 630, baseType: !7, size: 32, elements: !544)
!544 = !{!545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560, !561, !562, !563, !564, !565, !566, !567, !568, !569, !570, !571, !572, !573, !574, !575, !576, !577, !578, !579}
!545 = !DIEnumerator(name: "TS_BASE", value: 0, isUnsigned: true)
!546 = !DIEnumerator(name: "TS_COMMON", value: 1, isUnsigned: true)
!547 = !DIEnumerator(name: "TS_INT_CST", value: 2, isUnsigned: true)
!548 = !DIEnumerator(name: "TS_REAL_CST", value: 3, isUnsigned: true)
!549 = !DIEnumerator(name: "TS_FIXED_CST", value: 4, isUnsigned: true)
!550 = !DIEnumerator(name: "TS_VECTOR", value: 5, isUnsigned: true)
!551 = !DIEnumerator(name: "TS_STRING", value: 6, isUnsigned: true)
!552 = !DIEnumerator(name: "TS_COMPLEX", value: 7, isUnsigned: true)
!553 = !DIEnumerator(name: "TS_IDENTIFIER", value: 8, isUnsigned: true)
!554 = !DIEnumerator(name: "TS_DECL_MINIMAL", value: 9, isUnsigned: true)
!555 = !DIEnumerator(name: "TS_DECL_COMMON", value: 10, isUnsigned: true)
!556 = !DIEnumerator(name: "TS_DECL_WRTL", value: 11, isUnsigned: true)
!557 = !DIEnumerator(name: "TS_DECL_NON_COMMON", value: 12, isUnsigned: true)
!558 = !DIEnumerator(name: "TS_DECL_WITH_VIS", value: 13, isUnsigned: true)
!559 = !DIEnumerator(name: "TS_FIELD_DECL", value: 14, isUnsigned: true)
!560 = !DIEnumerator(name: "TS_VAR_DECL", value: 15, isUnsigned: true)
!561 = !DIEnumerator(name: "TS_PARM_DECL", value: 16, isUnsigned: true)
!562 = !DIEnumerator(name: "TS_LABEL_DECL", value: 17, isUnsigned: true)
!563 = !DIEnumerator(name: "TS_RESULT_DECL", value: 18, isUnsigned: true)
!564 = !DIEnumerator(name: "TS_CONST_DECL", value: 19, isUnsigned: true)
!565 = !DIEnumerator(name: "TS_TYPE_DECL", value: 20, isUnsigned: true)
!566 = !DIEnumerator(name: "TS_FUNCTION_DECL", value: 21, isUnsigned: true)
!567 = !DIEnumerator(name: "TS_TYPE", value: 22, isUnsigned: true)
!568 = !DIEnumerator(name: "TS_LIST", value: 23, isUnsigned: true)
!569 = !DIEnumerator(name: "TS_VEC", value: 24, isUnsigned: true)
!570 = !DIEnumerator(name: "TS_EXP", value: 25, isUnsigned: true)
!571 = !DIEnumerator(name: "TS_SSA_NAME", value: 26, isUnsigned: true)
!572 = !DIEnumerator(name: "TS_BLOCK", value: 27, isUnsigned: true)
!573 = !DIEnumerator(name: "TS_BINFO", value: 28, isUnsigned: true)
!574 = !DIEnumerator(name: "TS_STATEMENT_LIST", value: 29, isUnsigned: true)
!575 = !DIEnumerator(name: "TS_CONSTRUCTOR", value: 30, isUnsigned: true)
!576 = !DIEnumerator(name: "TS_OMP_CLAUSE", value: 31, isUnsigned: true)
!577 = !DIEnumerator(name: "TS_OPTIMIZATION", value: 32, isUnsigned: true)
!578 = !DIEnumerator(name: "TS_TARGET_OPTION", value: 33, isUnsigned: true)
!579 = !DIEnumerator(name: "LAST_TS_ENUM", value: 34, isUnsigned: true)
!580 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gf_mask", file: !6, line: 100, baseType: !7, size: 32, elements: !581)
!581 = !{!582, !583, !584, !585, !586, !587, !588, !589, !590, !591, !592}
!582 = !DIEnumerator(name: "GF_ASM_INPUT", value: 1, isUnsigned: true)
!583 = !DIEnumerator(name: "GF_ASM_VOLATILE", value: 2, isUnsigned: true)
!584 = !DIEnumerator(name: "GF_CALL_CANNOT_INLINE", value: 1, isUnsigned: true)
!585 = !DIEnumerator(name: "GF_CALL_FROM_THUNK", value: 2, isUnsigned: true)
!586 = !DIEnumerator(name: "GF_CALL_RETURN_SLOT_OPT", value: 4, isUnsigned: true)
!587 = !DIEnumerator(name: "GF_CALL_TAILCALL", value: 8, isUnsigned: true)
!588 = !DIEnumerator(name: "GF_CALL_VA_ARG_PACK", value: 16, isUnsigned: true)
!589 = !DIEnumerator(name: "GF_OMP_PARALLEL_COMBINED", value: 1, isUnsigned: true)
!590 = !DIEnumerator(name: "GF_OMP_RETURN_NOWAIT", value: 1, isUnsigned: true)
!591 = !DIEnumerator(name: "GF_OMP_SECTION_LAST", value: 1, isUnsigned: true)
!592 = !DIEnumerator(name: "GF_PREDICT_TAKEN", value: 32768, isUnsigned: true)
!593 = !{!594, !82, !746, !666, !664, !7, !615, !1722, !645, !667, !1773, !719, !1127, !721, !1077, !1775, !1776, !1161, !314, !596, !1777, !922, !1004, !1779, !1784, !962, !978, !1785, !972, !1788, !1795, !1797, !1803, !1805, !1824, !1041}
!594 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !595, line: 58, baseType: !596)
!595 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!596 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !597, size: 64)
!597 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !6, line: 737, size: 768, elements: !598)
!598 = !{!599, !1620, !1630, !1636, !1641, !1646, !1653, !1659, !1665, !1670, !1684, !1689, !1695, !1700, !1710, !1715, !1731, !1738, !1745, !1751, !1756, !1762, !1768}
!599 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !597, file: !6, line: 738, baseType: !600, size: 256)
!600 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_base", file: !6, line: 271, size: 256, elements: !601)
!601 = !{!602, !603, !604, !605, !606, !607, !608, !609, !610, !611, !612, !617, !618, !1619}
!602 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !600, file: !6, line: 274, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!603 = !DIDerivedType(tag: DW_TAG_member, name: "no_warning", scope: !600, file: !6, line: 277, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!604 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !600, file: !6, line: 281, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!605 = !DIDerivedType(tag: DW_TAG_member, name: "nontemporal_move", scope: !600, file: !6, line: 284, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!606 = !DIDerivedType(tag: DW_TAG_member, name: "plf", scope: !600, file: !6, line: 291, baseType: !7, size: 2, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!607 = !DIDerivedType(tag: DW_TAG_member, name: "modified", scope: !600, file: !6, line: 295, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!608 = !DIDerivedType(tag: DW_TAG_member, name: "has_volatile_ops", scope: !600, file: !6, line: 298, baseType: !7, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!609 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !600, file: !6, line: 301, baseType: !7, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!610 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !600, file: !6, line: 307, baseType: !7, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!611 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !600, file: !6, line: 312, baseType: !7, size: 32, offset: 32)
!612 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !600, file: !6, line: 316, baseType: !613, size: 32, offset: 64)
!613 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !614, line: 58, baseType: !615)
!614 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!615 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !616, line: 44, baseType: !7)
!616 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!617 = !DIDerivedType(tag: DW_TAG_member, name: "num_ops", scope: !600, file: !6, line: 319, baseType: !7, size: 32, offset: 96)
!618 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !600, file: !6, line: 323, baseType: !619, size: 64, offset: 128)
!619 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !620, size: 64)
!620 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !34, line: 217, size: 832, elements: !621)
!621 = !{!622, !1584, !1585, !1586, !1589, !1593, !1594, !1595, !1613, !1614, !1615, !1616, !1617, !1618}
!622 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !620, file: !34, line: 219, baseType: !623, size: 64)
!623 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !624, size: 64)
!624 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !34, line: 151, baseType: !625)
!625 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !34, line: 151, size: 128, elements: !626)
!626 = !{!627}
!627 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !625, file: !34, line: 151, baseType: !628, size: 128)
!628 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !34, line: 150, baseType: !629)
!629 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !34, line: 150, size: 128, elements: !630)
!630 = !{!631, !632, !633}
!631 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !629, file: !34, line: 150, baseType: !7, size: 32)
!632 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !629, file: !34, line: 150, baseType: !7, size: 32, offset: 32)
!633 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !629, file: !34, line: 150, baseType: !634, size: 64, offset: 64)
!634 = !DICompositeType(tag: DW_TAG_array_type, baseType: !635, size: 64, elements: !750)
!635 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !595, line: 108, baseType: !636)
!636 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !637, size: 64)
!637 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !34, line: 122, size: 512, elements: !638)
!638 = !{!639, !640, !641, !663, !665, !1578, !1579, !1580, !1581, !1582}
!639 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !637, file: !34, line: 124, baseType: !619, size: 64)
!640 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !637, file: !34, line: 125, baseType: !619, size: 64, offset: 64)
!641 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !637, file: !34, line: 131, baseType: !642, size: 64, offset: 128)
!642 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !34, line: 128, size: 64, elements: !643)
!643 = !{!644, !659}
!644 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !642, file: !34, line: 129, baseType: !645, size: 64)
!645 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !595, line: 66, baseType: !646)
!646 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !647, size: 64)
!647 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !6, line: 143, size: 192, elements: !648)
!648 = !{!649, !657, !658}
!649 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !647, file: !6, line: 145, baseType: !650, size: 64)
!650 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq_node", file: !595, line: 69, baseType: !651)
!651 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !652, size: 64)
!652 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_node_d", file: !6, line: 136, size: 192, elements: !653)
!653 = !{!654, !655, !656}
!654 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !652, file: !6, line: 137, baseType: !594, size: 64)
!655 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !652, file: !6, line: 138, baseType: !651, size: 64, offset: 64)
!656 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !652, file: !6, line: 139, baseType: !651, size: 64, offset: 128)
!657 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !647, file: !6, line: 146, baseType: !650, size: 64, offset: 64)
!658 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !647, file: !6, line: 152, baseType: !645, size: 64, offset: 128)
!659 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !642, file: !34, line: 130, baseType: !660, size: 64)
!660 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !595, line: 50, baseType: !661)
!661 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !662, size: 64)
!662 = !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !595, line: 49, flags: DIFlagFwdDecl)
!663 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !637, file: !34, line: 134, baseType: !664, size: 64, offset: 192)
!664 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!665 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !637, file: !34, line: 137, baseType: !666, size: 64, offset: 256)
!666 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !595, line: 56, baseType: !667)
!667 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !668, size: 64)
!668 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !50, line: 3371, size: 1792, elements: !669)
!669 = !{!670, !703, !709, !722, !729, !736, !741, !752, !758, !772, !780, !818, !823, !851, !868, !869, !874, !883, !889, !894, !898, !902, !1227, !1276, !1282, !1288, !1295, !1308, !1322, !1339, !1351, !1373, !1388, !1560}
!670 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !668, file: !50, line: 3372, baseType: !671, size: 64)
!671 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !50, line: 360, size: 64, elements: !672)
!672 = !{!673, !674, !675, !676, !677, !678, !679, !680, !681, !682, !683, !684, !685, !686, !687, !688, !689, !690, !691, !692, !693, !694, !695, !696, !697, !698, !699, !700, !701, !702}
!673 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !671, file: !50, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!674 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !671, file: !50, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!675 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !671, file: !50, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!676 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !671, file: !50, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!677 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !671, file: !50, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!678 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !671, file: !50, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!679 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !671, file: !50, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!680 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !671, file: !50, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!681 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !671, file: !50, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!682 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !671, file: !50, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!683 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !671, file: !50, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!684 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !671, file: !50, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!685 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !671, file: !50, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!686 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !671, file: !50, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!687 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !671, file: !50, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!688 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !671, file: !50, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!689 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !671, file: !50, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!690 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !671, file: !50, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!691 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !671, file: !50, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!692 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !671, file: !50, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!693 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !671, file: !50, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!694 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !671, file: !50, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!695 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !671, file: !50, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!696 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !671, file: !50, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!697 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !671, file: !50, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!698 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !671, file: !50, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!699 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !671, file: !50, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!700 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !671, file: !50, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!701 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !671, file: !50, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!702 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !671, file: !50, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!703 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !668, file: !50, line: 3373, baseType: !704, size: 192)
!704 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !50, line: 402, size: 192, elements: !705)
!705 = !{!706, !707, !708}
!706 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !704, file: !50, line: 403, baseType: !671, size: 64)
!707 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !704, file: !50, line: 404, baseType: !666, size: 64, offset: 64)
!708 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !704, file: !50, line: 405, baseType: !666, size: 64, offset: 128)
!709 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !668, file: !50, line: 3374, baseType: !710, size: 320)
!710 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !50, line: 1384, size: 320, elements: !711)
!711 = !{!712, !713}
!712 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !710, file: !50, line: 1385, baseType: !704, size: 192)
!713 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !710, file: !50, line: 1386, baseType: !714, size: 128, offset: 192)
!714 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !715, line: 58, baseType: !716)
!715 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!716 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !715, line: 54, size: 128, elements: !717)
!717 = !{!718, !720}
!718 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !716, file: !715, line: 56, baseType: !719, size: 64)
!719 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!720 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !716, file: !715, line: 57, baseType: !721, size: 64, offset: 64)
!721 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!722 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !668, file: !50, line: 3375, baseType: !723, size: 256)
!723 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !50, line: 1397, size: 256, elements: !724)
!724 = !{!725, !726}
!725 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !723, file: !50, line: 1398, baseType: !704, size: 192)
!726 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !723, file: !50, line: 1399, baseType: !727, size: 64, offset: 192)
!727 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !728, size: 64)
!728 = !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !50, line: 1392, flags: DIFlagFwdDecl)
!729 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !668, file: !50, line: 3376, baseType: !730, size: 256)
!730 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !50, line: 1408, size: 256, elements: !731)
!731 = !{!732, !733}
!732 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !730, file: !50, line: 1409, baseType: !704, size: 192)
!733 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !730, file: !50, line: 1410, baseType: !734, size: 64, offset: 192)
!734 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !735, size: 64)
!735 = !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !50, line: 1403, flags: DIFlagFwdDecl)
!736 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !668, file: !50, line: 3377, baseType: !737, size: 256)
!737 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !50, line: 1437, size: 256, elements: !738)
!738 = !{!739, !740}
!739 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !737, file: !50, line: 1438, baseType: !704, size: 192)
!740 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !737, file: !50, line: 1439, baseType: !666, size: 64, offset: 192)
!741 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !668, file: !50, line: 3378, baseType: !742, size: 256)
!742 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !50, line: 1418, size: 256, elements: !743)
!743 = !{!744, !745, !747}
!744 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !742, file: !50, line: 1419, baseType: !704, size: 192)
!745 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !742, file: !50, line: 1420, baseType: !746, size: 32, offset: 192)
!746 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!747 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !742, file: !50, line: 1421, baseType: !748, size: 8, offset: 224)
!748 = !DICompositeType(tag: DW_TAG_array_type, baseType: !749, size: 8, elements: !750)
!749 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!750 = !{!751}
!751 = !DISubrange(count: 1)
!752 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !668, file: !50, line: 3379, baseType: !753, size: 320)
!753 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !50, line: 1428, size: 320, elements: !754)
!754 = !{!755, !756, !757}
!755 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !753, file: !50, line: 1429, baseType: !704, size: 192)
!756 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !753, file: !50, line: 1430, baseType: !666, size: 64, offset: 192)
!757 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !753, file: !50, line: 1431, baseType: !666, size: 64, offset: 256)
!758 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !668, file: !50, line: 3380, baseType: !759, size: 320)
!759 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !50, line: 1460, size: 320, elements: !760)
!760 = !{!761, !762}
!761 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !759, file: !50, line: 1461, baseType: !704, size: 192)
!762 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !759, file: !50, line: 1462, baseType: !763, size: 128, offset: 192)
!763 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !764, line: 31, size: 128, elements: !765)
!764 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!765 = !{!766, !770, !771}
!766 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !763, file: !764, line: 32, baseType: !767, size: 64)
!767 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !768, size: 64)
!768 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !769)
!769 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!770 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !763, file: !764, line: 33, baseType: !7, size: 32, offset: 64)
!771 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !763, file: !764, line: 34, baseType: !7, size: 32, offset: 96)
!772 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !668, file: !50, line: 3381, baseType: !773, size: 384)
!773 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !50, line: 2507, size: 384, elements: !774)
!774 = !{!775, !776, !777, !778, !779}
!775 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !773, file: !50, line: 2508, baseType: !704, size: 192)
!776 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !773, file: !50, line: 2509, baseType: !613, size: 32, offset: 192)
!777 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !773, file: !50, line: 2510, baseType: !7, size: 32, offset: 224)
!778 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !773, file: !50, line: 2511, baseType: !666, size: 64, offset: 256)
!779 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !773, file: !50, line: 2512, baseType: !666, size: 64, offset: 320)
!780 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !668, file: !50, line: 3382, baseType: !781, size: 896)
!781 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !50, line: 2652, size: 896, elements: !782)
!782 = !{!783, !784, !785, !786, !787, !788, !789, !790, !791, !792, !793, !794, !795, !796, !797, !798, !799, !800, !801, !802, !803, !804, !805, !806, !807, !808, !809, !810, !811, !812, !813, !814, !815}
!783 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !781, file: !50, line: 2653, baseType: !773, size: 384)
!784 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !781, file: !50, line: 2654, baseType: !666, size: 64, offset: 384)
!785 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !781, file: !50, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!786 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !781, file: !50, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!787 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !781, file: !50, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!788 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !781, file: !50, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!789 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !781, file: !50, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!790 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !781, file: !50, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!791 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !781, file: !50, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!792 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !781, file: !50, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!793 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !781, file: !50, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!794 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !781, file: !50, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!795 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !781, file: !50, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!796 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !781, file: !50, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!797 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !781, file: !50, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!798 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !781, file: !50, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!799 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !781, file: !50, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!800 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !781, file: !50, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!801 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !781, file: !50, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!802 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !781, file: !50, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!803 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !781, file: !50, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!804 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !781, file: !50, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!805 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !781, file: !50, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!806 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !781, file: !50, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!807 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !781, file: !50, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!808 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !781, file: !50, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!809 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !781, file: !50, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!810 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !781, file: !50, line: 2703, baseType: !7, size: 32, offset: 512)
!811 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !781, file: !50, line: 2705, baseType: !666, size: 64, offset: 576)
!812 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !781, file: !50, line: 2706, baseType: !666, size: 64, offset: 640)
!813 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !781, file: !50, line: 2707, baseType: !666, size: 64, offset: 704)
!814 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !781, file: !50, line: 2708, baseType: !666, size: 64, offset: 768)
!815 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !781, file: !50, line: 2711, baseType: !816, size: 64, offset: 832)
!816 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !817, size: 64)
!817 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !50, line: 2711, flags: DIFlagFwdDecl)
!818 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !668, file: !50, line: 3383, baseType: !819, size: 960)
!819 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !50, line: 2756, size: 960, elements: !820)
!820 = !{!821, !822}
!821 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !819, file: !50, line: 2757, baseType: !781, size: 896)
!822 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !819, file: !50, line: 2758, baseType: !660, size: 64, offset: 896)
!823 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !668, file: !50, line: 3384, baseType: !824, size: 1472)
!824 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !50, line: 3114, size: 1472, elements: !825)
!825 = !{!826, !847, !848, !849, !850}
!826 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !824, file: !50, line: 3115, baseType: !827, size: 1216)
!827 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !50, line: 2984, size: 1216, elements: !828)
!828 = !{!829, !830, !831, !832, !833, !834, !835, !836, !837, !838, !839, !840, !841, !842, !843, !844, !845, !846}
!829 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !827, file: !50, line: 2985, baseType: !819, size: 960)
!830 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !827, file: !50, line: 2986, baseType: !666, size: 64, offset: 960)
!831 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !827, file: !50, line: 2987, baseType: !666, size: 64, offset: 1024)
!832 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !827, file: !50, line: 2988, baseType: !666, size: 64, offset: 1088)
!833 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !827, file: !50, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!834 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !827, file: !50, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!835 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !827, file: !50, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!836 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !827, file: !50, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!837 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !827, file: !50, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!838 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !827, file: !50, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!839 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !827, file: !50, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!840 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !827, file: !50, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!841 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !827, file: !50, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!842 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !827, file: !50, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!843 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !827, file: !50, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!844 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !827, file: !50, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!845 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !827, file: !50, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!846 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !827, file: !50, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!847 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !824, file: !50, line: 3117, baseType: !666, size: 64, offset: 1216)
!848 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !824, file: !50, line: 3119, baseType: !666, size: 64, offset: 1280)
!849 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !824, file: !50, line: 3121, baseType: !666, size: 64, offset: 1344)
!850 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !824, file: !50, line: 3123, baseType: !666, size: 64, offset: 1408)
!851 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !668, file: !50, line: 3385, baseType: !852, size: 1088)
!852 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !50, line: 2874, size: 1088, elements: !853)
!853 = !{!854, !855, !856}
!854 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !852, file: !50, line: 2875, baseType: !819, size: 960)
!855 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !852, file: !50, line: 2876, baseType: !660, size: 64, offset: 960)
!856 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !852, file: !50, line: 2877, baseType: !857, size: 64, offset: 1024)
!857 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !858, size: 64)
!858 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !859, line: 172, size: 128, elements: !860)
!859 = !DIFile(filename: "./tree-flow.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!860 = !{!861, !862, !863, !864, !865, !866, !867}
!861 = !DIDerivedType(tag: DW_TAG_member, name: "base_var_processed", scope: !858, file: !859, line: 174, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!862 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !858, file: !859, line: 178, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!863 = !DIDerivedType(tag: DW_TAG_member, name: "need_phi_state", scope: !858, file: !859, line: 183, baseType: !7, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!864 = !DIDerivedType(tag: DW_TAG_member, name: "is_heapvar", scope: !858, file: !859, line: 187, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!865 = !DIDerivedType(tag: DW_TAG_member, name: "noalias_state", scope: !858, file: !859, line: 192, baseType: !7, size: 2, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!866 = !DIDerivedType(tag: DW_TAG_member, name: "base_index", scope: !858, file: !859, line: 195, baseType: !7, size: 32, offset: 32)
!867 = !DIDerivedType(tag: DW_TAG_member, name: "current_def", scope: !858, file: !859, line: 199, baseType: !666, size: 64, offset: 64)
!868 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !668, file: !50, line: 3386, baseType: !827, size: 1216)
!869 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !668, file: !50, line: 3387, baseType: !870, size: 1280)
!870 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !50, line: 3093, size: 1280, elements: !871)
!871 = !{!872, !873}
!872 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !870, file: !50, line: 3094, baseType: !827, size: 1216)
!873 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !870, file: !50, line: 3095, baseType: !857, size: 64, offset: 1216)
!874 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !668, file: !50, line: 3388, baseType: !875, size: 1216)
!875 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !50, line: 2824, size: 1216, elements: !876)
!876 = !{!877, !878, !879, !880, !881, !882}
!877 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !875, file: !50, line: 2825, baseType: !781, size: 896)
!878 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !875, file: !50, line: 2827, baseType: !666, size: 64, offset: 896)
!879 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !875, file: !50, line: 2828, baseType: !666, size: 64, offset: 960)
!880 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !875, file: !50, line: 2829, baseType: !666, size: 64, offset: 1024)
!881 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !875, file: !50, line: 2830, baseType: !666, size: 64, offset: 1088)
!882 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !875, file: !50, line: 2831, baseType: !666, size: 64, offset: 1152)
!883 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !668, file: !50, line: 3389, baseType: !884, size: 1024)
!884 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !50, line: 2850, size: 1024, elements: !885)
!885 = !{!886, !887, !888}
!886 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !884, file: !50, line: 2851, baseType: !819, size: 960)
!887 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !884, file: !50, line: 2852, baseType: !746, size: 32, offset: 960)
!888 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !884, file: !50, line: 2853, baseType: !746, size: 32, offset: 992)
!889 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !668, file: !50, line: 3390, baseType: !890, size: 1024)
!890 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !50, line: 2857, size: 1024, elements: !891)
!891 = !{!892, !893}
!892 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !890, file: !50, line: 2858, baseType: !819, size: 960)
!893 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !890, file: !50, line: 2859, baseType: !857, size: 64, offset: 960)
!894 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !668, file: !50, line: 3391, baseType: !895, size: 960)
!895 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !50, line: 2862, size: 960, elements: !896)
!896 = !{!897}
!897 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !895, file: !50, line: 2863, baseType: !819, size: 960)
!898 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !668, file: !50, line: 3392, baseType: !899, size: 1472)
!899 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !50, line: 3304, size: 1472, elements: !900)
!900 = !{!901}
!901 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !899, file: !50, line: 3305, baseType: !824, size: 1472)
!902 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !668, file: !50, line: 3393, baseType: !903, size: 1792)
!903 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !50, line: 3248, size: 1792, elements: !904)
!904 = !{!905, !906, !1206, !1207, !1208, !1209, !1210, !1211, !1212, !1213, !1214, !1215, !1216, !1217, !1218, !1219, !1220, !1221, !1222, !1223, !1224, !1225, !1226}
!905 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !903, file: !50, line: 3249, baseType: !824, size: 1472)
!906 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !903, file: !50, line: 3251, baseType: !907, size: 64, offset: 1472)
!907 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !908, size: 64)
!908 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !909, line: 463, size: 1152, elements: !910)
!909 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!910 = !{!911, !914, !947, !948, !1145, !1148, !1149, !1150, !1151, !1152, !1153, !1179, !1182, !1183, !1184, !1185, !1186, !1187, !1188, !1189, !1190, !1191, !1192, !1193, !1194, !1195, !1196, !1197, !1198, !1199, !1200, !1201, !1202, !1203, !1204, !1205}
!911 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !908, file: !909, line: 464, baseType: !912, size: 64)
!912 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !913, size: 64)
!913 = !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !909, line: 464, flags: DIFlagFwdDecl)
!914 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !908, file: !909, line: 467, baseType: !915, size: 64, offset: 64)
!915 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !916, size: 64)
!916 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !34, line: 374, size: 640, elements: !917)
!917 = !{!918, !920, !921, !934, !935, !936, !937, !938, !939, !943, !945, !946}
!918 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !916, file: !34, line: 377, baseType: !919, size: 64)
!919 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !595, line: 111, baseType: !619)
!920 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !916, file: !34, line: 378, baseType: !919, size: 64, offset: 64)
!921 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !916, file: !34, line: 381, baseType: !922, size: 64, offset: 128)
!922 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !923, size: 64)
!923 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !34, line: 282, baseType: !924)
!924 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !34, line: 282, size: 128, elements: !925)
!925 = !{!926}
!926 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !924, file: !34, line: 282, baseType: !927, size: 128)
!927 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !34, line: 281, baseType: !928)
!928 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !34, line: 281, size: 128, elements: !929)
!929 = !{!930, !931, !932}
!930 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !928, file: !34, line: 281, baseType: !7, size: 32)
!931 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !928, file: !34, line: 281, baseType: !7, size: 32, offset: 32)
!932 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !928, file: !34, line: 281, baseType: !933, size: 64, offset: 64)
!933 = !DICompositeType(tag: DW_TAG_array_type, baseType: !919, size: 64, elements: !750)
!934 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !916, file: !34, line: 384, baseType: !746, size: 32, offset: 192)
!935 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !916, file: !34, line: 387, baseType: !746, size: 32, offset: 224)
!936 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !916, file: !34, line: 390, baseType: !746, size: 32, offset: 256)
!937 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !916, file: !34, line: 394, baseType: !922, size: 64, offset: 320)
!938 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !916, file: !34, line: 396, baseType: !33, size: 32, offset: 384)
!939 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !916, file: !34, line: 399, baseType: !940, size: 64, offset: 416)
!940 = !DICompositeType(tag: DW_TAG_array_type, baseType: !39, size: 64, elements: !941)
!941 = !{!942}
!942 = !DISubrange(count: 2)
!943 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !916, file: !34, line: 402, baseType: !944, size: 64, offset: 480)
!944 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !941)
!945 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !916, file: !34, line: 406, baseType: !746, size: 32, offset: 544)
!946 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !916, file: !34, line: 409, baseType: !746, size: 32, offset: 576)
!947 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !908, file: !909, line: 470, baseType: !646, size: 64, offset: 128)
!948 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !908, file: !909, line: 473, baseType: !949, size: 64, offset: 192)
!949 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !950, size: 64)
!950 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !859, line: 39, size: 1152, elements: !951)
!951 = !{!952, !1003, !1016, !1029, !1030, !1100, !1101, !1105, !1106, !1107, !1108, !1109}
!952 = !DIDerivedType(tag: DW_TAG_member, name: "referenced_vars", scope: !950, file: !859, line: 41, baseType: !953, size: 64)
!953 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !518, line: 144, baseType: !954)
!954 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !955, size: 64)
!955 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !518, line: 100, size: 896, elements: !956)
!956 = !{!957, !965, !970, !975, !977, !980, !981, !982, !983, !984, !989, !991, !992, !997, !1002}
!957 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !955, file: !518, line: 102, baseType: !958, size: 64)
!958 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !518, line: 52, baseType: !959)
!959 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !960, size: 64)
!960 = !DISubroutineType(types: !961)
!961 = !{!962, !963}
!962 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !518, line: 47, baseType: !7)
!963 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !964, size: 64)
!964 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!965 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !955, file: !518, line: 105, baseType: !966, size: 64, offset: 64)
!966 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !518, line: 59, baseType: !967)
!967 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !968, size: 64)
!968 = !DISubroutineType(types: !969)
!969 = !{!746, !963, !963}
!970 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !955, file: !518, line: 108, baseType: !971, size: 64, offset: 128)
!971 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !518, line: 63, baseType: !972)
!972 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !973, size: 64)
!973 = !DISubroutineType(types: !974)
!974 = !{null, !664}
!975 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !955, file: !518, line: 111, baseType: !976, size: 64, offset: 192)
!976 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !664, size: 64)
!977 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !955, file: !518, line: 114, baseType: !978, size: 64, offset: 256)
!978 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !979, line: 46, baseType: !719)
!979 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!980 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !955, file: !518, line: 117, baseType: !978, size: 64, offset: 320)
!981 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !955, file: !518, line: 120, baseType: !978, size: 64, offset: 384)
!982 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !955, file: !518, line: 124, baseType: !7, size: 32, offset: 448)
!983 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !955, file: !518, line: 128, baseType: !7, size: 32, offset: 480)
!984 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !955, file: !518, line: 131, baseType: !985, size: 64, offset: 512)
!985 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !518, line: 75, baseType: !986)
!986 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !987, size: 64)
!987 = !DISubroutineType(types: !988)
!988 = !{!664, !978, !978}
!989 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !955, file: !518, line: 132, baseType: !990, size: 64, offset: 576)
!990 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !518, line: 78, baseType: !972)
!991 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !955, file: !518, line: 135, baseType: !664, size: 64, offset: 640)
!992 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !955, file: !518, line: 136, baseType: !993, size: 64, offset: 704)
!993 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !518, line: 82, baseType: !994)
!994 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !995, size: 64)
!995 = !DISubroutineType(types: !996)
!996 = !{!664, !664, !978, !978}
!997 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !955, file: !518, line: 137, baseType: !998, size: 64, offset: 768)
!998 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !518, line: 83, baseType: !999)
!999 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1000, size: 64)
!1000 = !DISubroutineType(types: !1001)
!1001 = !{null, !664, !664}
!1002 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !955, file: !518, line: 141, baseType: !7, size: 32, offset: 832)
!1003 = !DIDerivedType(tag: DW_TAG_member, name: "modified_noreturn_calls", scope: !950, file: !859, line: 48, baseType: !1004, size: 64, offset: 64)
!1004 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1005, size: 64)
!1005 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_gc", file: !6, line: 35, baseType: !1006)
!1006 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_gc", file: !6, line: 35, size: 128, elements: !1007)
!1007 = !{!1008}
!1008 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1006, file: !6, line: 35, baseType: !1009, size: 128)
!1009 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_base", file: !6, line: 33, baseType: !1010)
!1010 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_base", file: !6, line: 33, size: 128, elements: !1011)
!1011 = !{!1012, !1013, !1014}
!1012 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1010, file: !6, line: 33, baseType: !7, size: 32)
!1013 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1010, file: !6, line: 33, baseType: !7, size: 32, offset: 32)
!1014 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1010, file: !6, line: 33, baseType: !1015, size: 64, offset: 64)
!1015 = !DICompositeType(tag: DW_TAG_array_type, baseType: !594, size: 64, elements: !750)
!1016 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_names", scope: !950, file: !859, line: 51, baseType: !1017, size: 64, offset: 128)
!1017 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1018, size: 64)
!1018 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !50, line: 183, baseType: !1019)
!1019 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !50, line: 183, size: 128, elements: !1020)
!1020 = !{!1021}
!1021 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1019, file: !50, line: 183, baseType: !1022, size: 128)
!1022 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !50, line: 182, baseType: !1023)
!1023 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !50, line: 182, size: 128, elements: !1024)
!1024 = !{!1025, !1026, !1027}
!1025 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1023, file: !50, line: 182, baseType: !7, size: 32)
!1026 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1023, file: !50, line: 182, baseType: !7, size: 32, offset: 32)
!1027 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1023, file: !50, line: 182, baseType: !1028, size: 64, offset: 64)
!1028 = !DICompositeType(tag: DW_TAG_array_type, baseType: !666, size: 64, elements: !750)
!1029 = !DIDerivedType(tag: DW_TAG_member, name: "vop", scope: !950, file: !859, line: 54, baseType: !666, size: 64, offset: 192)
!1030 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !950, file: !859, line: 57, baseType: !1031, size: 128, offset: 256)
!1031 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pt_solution", file: !1032, line: 31, size: 128, elements: !1033)
!1032 = !DIFile(filename: "./tree-ssa-alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1033 = !{!1034, !1035, !1036, !1037, !1038, !1039, !1040}
!1034 = !DIDerivedType(tag: DW_TAG_member, name: "anything", scope: !1031, file: !1032, line: 35, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1035 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal", scope: !1031, file: !1032, line: 39, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1036 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !1031, file: !1032, line: 42, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1037 = !DIDerivedType(tag: DW_TAG_member, name: "null", scope: !1031, file: !1032, line: 46, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1038 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_global", scope: !1031, file: !1032, line: 50, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1039 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_restrict", scope: !1031, file: !1032, line: 53, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1040 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1031, file: !1032, line: 56, baseType: !1041, size: 64, offset: 64)
!1041 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !595, line: 47, baseType: !1042)
!1042 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1043, size: 64)
!1043 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !1044, line: 75, size: 256, elements: !1045)
!1044 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1045 = !{!1046, !1058, !1059, !1060}
!1046 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1043, file: !1044, line: 76, baseType: !1047, size: 64)
!1047 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1048, size: 64)
!1048 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !1044, line: 68, baseType: !1049)
!1049 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !1044, line: 63, size: 320, elements: !1050)
!1050 = !{!1051, !1053, !1054, !1055}
!1051 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1049, file: !1044, line: 64, baseType: !1052, size: 64)
!1052 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1049, size: 64)
!1053 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1049, file: !1044, line: 65, baseType: !1052, size: 64, offset: 64)
!1054 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1049, file: !1044, line: 66, baseType: !7, size: 32, offset: 128)
!1055 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !1049, file: !1044, line: 67, baseType: !1056, size: 128, offset: 192)
!1056 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1057, size: 128, elements: !941)
!1057 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !1044, line: 29, baseType: !719)
!1058 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !1043, file: !1044, line: 77, baseType: !1047, size: 64, offset: 64)
!1059 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1043, file: !1044, line: 78, baseType: !7, size: 32, offset: 128)
!1060 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1043, file: !1044, line: 79, baseType: !1061, size: 64, offset: 192)
!1061 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1062, size: 64)
!1062 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !1044, line: 49, baseType: !1063)
!1063 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !1044, line: 45, size: 832, elements: !1064)
!1064 = !{!1065, !1066, !1067}
!1065 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1063, file: !1044, line: 46, baseType: !1052, size: 64)
!1066 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !1063, file: !1044, line: 47, baseType: !1042, size: 64, offset: 64)
!1067 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1063, file: !1044, line: 48, baseType: !1068, size: 704, offset: 128)
!1068 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !1069, line: 164, size: 704, elements: !1070)
!1069 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1070 = !{!1071, !1072, !1083, !1084, !1085, !1086, !1087, !1088, !1092, !1096, !1097, !1098, !1099}
!1071 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !1068, file: !1069, line: 166, baseType: !721, size: 64)
!1072 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !1068, file: !1069, line: 167, baseType: !1073, size: 64, offset: 64)
!1073 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1074, size: 64)
!1074 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !1069, line: 157, size: 192, elements: !1075)
!1075 = !{!1076, !1078, !1079}
!1076 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1074, file: !1069, line: 159, baseType: !1077, size: 64)
!1077 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !749, size: 64)
!1078 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1074, file: !1069, line: 160, baseType: !1073, size: 64, offset: 64)
!1079 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !1074, file: !1069, line: 161, baseType: !1080, size: 32, offset: 128)
!1080 = !DICompositeType(tag: DW_TAG_array_type, baseType: !749, size: 32, elements: !1081)
!1081 = !{!1082}
!1082 = !DISubrange(count: 4)
!1083 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !1068, file: !1069, line: 168, baseType: !1077, size: 64, offset: 128)
!1084 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1068, file: !1069, line: 169, baseType: !1077, size: 64, offset: 192)
!1085 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !1068, file: !1069, line: 170, baseType: !1077, size: 64, offset: 256)
!1086 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !1068, file: !1069, line: 171, baseType: !721, size: 64, offset: 320)
!1087 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !1068, file: !1069, line: 172, baseType: !746, size: 32, offset: 384)
!1088 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !1068, file: !1069, line: 176, baseType: !1089, size: 64, offset: 448)
!1089 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1090, size: 64)
!1090 = !DISubroutineType(types: !1091)
!1091 = !{!1073, !664, !721}
!1092 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !1068, file: !1069, line: 177, baseType: !1093, size: 64, offset: 512)
!1093 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1094, size: 64)
!1094 = !DISubroutineType(types: !1095)
!1095 = !{null, !664, !1073}
!1096 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !1068, file: !1069, line: 178, baseType: !664, size: 64, offset: 576)
!1097 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !1068, file: !1069, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!1098 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !1068, file: !1069, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!1099 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !1068, file: !1069, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!1100 = !DIDerivedType(tag: DW_TAG_member, name: "callused", scope: !950, file: !859, line: 60, baseType: !1031, size: 128, offset: 384)
!1101 = !DIDerivedType(tag: DW_TAG_member, name: "decls_to_pointers", scope: !950, file: !859, line: 64, baseType: !1102, size: 64, offset: 512)
!1102 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1103, size: 64)
!1103 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_map_t", file: !1104, line: 33, flags: DIFlagFwdDecl)
!1104 = !DIFile(filename: "./pointer-set.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1105 = !DIDerivedType(tag: DW_TAG_member, name: "free_ssanames", scope: !950, file: !859, line: 67, baseType: !666, size: 64, offset: 576)
!1106 = !DIDerivedType(tag: DW_TAG_member, name: "default_defs", scope: !950, file: !859, line: 73, baseType: !953, size: 64, offset: 640)
!1107 = !DIDerivedType(tag: DW_TAG_member, name: "syms_to_rename", scope: !950, file: !859, line: 77, baseType: !1041, size: 64, offset: 704)
!1108 = !DIDerivedType(tag: DW_TAG_member, name: "in_ssa_p", scope: !950, file: !859, line: 80, baseType: !7, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!1109 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operands", scope: !950, file: !859, line: 82, baseType: !1110, size: 320, offset: 832)
!1110 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operands", file: !537, line: 62, size: 320, elements: !1111)
!1111 = !{!1112, !1118, !1119, !1120, !1121, !1128}
!1112 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory", scope: !1110, file: !537, line: 63, baseType: !1113, size: 64)
!1113 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1114, size: 64)
!1114 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_memory_d", file: !537, line: 56, size: 128, elements: !1115)
!1115 = !{!1116, !1117}
!1116 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1114, file: !537, line: 57, baseType: !1113, size: 64)
!1117 = !DIDerivedType(tag: DW_TAG_member, name: "mem", scope: !1114, file: !537, line: 58, baseType: !748, size: 8, offset: 64)
!1118 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory_index", scope: !1110, file: !537, line: 64, baseType: !7, size: 32, offset: 64)
!1119 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operand_mem_size", scope: !1110, file: !537, line: 66, baseType: !7, size: 32, offset: 96)
!1120 = !DIDerivedType(tag: DW_TAG_member, name: "ops_active", scope: !1110, file: !537, line: 68, baseType: !769, size: 8, offset: 128)
!1121 = !DIDerivedType(tag: DW_TAG_member, name: "free_defs", scope: !1110, file: !537, line: 70, baseType: !1122, size: 64, offset: 192)
!1122 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1123, size: 64)
!1123 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "def_optype_d", file: !537, line: 37, size: 128, elements: !1124)
!1124 = !{!1125, !1126}
!1125 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1123, file: !537, line: 39, baseType: !1122, size: 64)
!1126 = !DIDerivedType(tag: DW_TAG_member, name: "def_ptr", scope: !1123, file: !537, line: 40, baseType: !1127, size: 64, offset: 64)
!1127 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !666, size: 64)
!1128 = !DIDerivedType(tag: DW_TAG_member, name: "free_uses", scope: !1110, file: !537, line: 71, baseType: !1129, size: 64, offset: 256)
!1129 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1130, size: 64)
!1130 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "use_optype_d", file: !537, line: 45, size: 320, elements: !1131)
!1131 = !{!1132, !1133}
!1132 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1130, file: !537, line: 47, baseType: !1129, size: 64)
!1133 = !DIDerivedType(tag: DW_TAG_member, name: "use_ptr", scope: !1130, file: !537, line: 48, baseType: !1134, size: 256, offset: 64)
!1134 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !50, line: 1883, size: 256, elements: !1135)
!1135 = !{!1136, !1138, !1139, !1144}
!1136 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1134, file: !50, line: 1884, baseType: !1137, size: 64)
!1137 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1134, size: 64)
!1138 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1134, file: !50, line: 1885, baseType: !1137, size: 64, offset: 64)
!1139 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !1134, file: !50, line: 1891, baseType: !1140, size: 64, offset: 128)
!1140 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1134, file: !50, line: 1891, size: 64, elements: !1141)
!1141 = !{!1142, !1143}
!1142 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1140, file: !50, line: 1891, baseType: !594, size: 64)
!1143 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1140, file: !50, line: 1891, baseType: !666, size: 64)
!1144 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !1134, file: !50, line: 1892, baseType: !1127, size: 64, offset: 192)
!1145 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !908, file: !909, line: 476, baseType: !1146, size: 64, offset: 256)
!1146 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1147, size: 64)
!1147 = !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !909, line: 476, flags: DIFlagFwdDecl)
!1148 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !908, file: !909, line: 479, baseType: !953, size: 64, offset: 320)
!1149 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !908, file: !909, line: 484, baseType: !666, size: 64, offset: 384)
!1150 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !908, file: !909, line: 488, baseType: !666, size: 64, offset: 448)
!1151 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !908, file: !909, line: 493, baseType: !666, size: 64, offset: 512)
!1152 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !908, file: !909, line: 496, baseType: !666, size: 64, offset: 576)
!1153 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !908, file: !909, line: 501, baseType: !1154, size: 64, offset: 640)
!1154 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1155, size: 64)
!1155 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !45, line: 2355, size: 576, elements: !1156)
!1156 = !{!1157, !1160, !1163, !1164, !1165, !1167, !1168, !1173, !1174, !1175, !1176, !1177, !1178}
!1157 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !1155, file: !45, line: 2356, baseType: !1158, size: 64)
!1158 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1159, size: 64)
!1159 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !45, line: 2356, flags: DIFlagFwdDecl)
!1160 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !1155, file: !45, line: 2357, baseType: !1161, size: 64, offset: 64)
!1161 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1162, size: 64)
!1162 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !749)
!1163 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !1155, file: !45, line: 2358, baseType: !746, size: 32, offset: 128)
!1164 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !1155, file: !45, line: 2359, baseType: !746, size: 32, offset: 160)
!1165 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !1155, file: !45, line: 2360, baseType: !1166, size: 128, offset: 192)
!1166 = !DICompositeType(tag: DW_TAG_array_type, baseType: !746, size: 128, elements: !1081)
!1167 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !1155, file: !45, line: 2364, baseType: !746, size: 32, offset: 320)
!1168 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !1155, file: !45, line: 2367, baseType: !1169, size: 128, offset: 384)
!1169 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !45, line: 2349, size: 128, elements: !1170)
!1170 = !{!1171, !1172}
!1171 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !1169, file: !45, line: 2351, baseType: !660, size: 64)
!1172 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1169, file: !45, line: 2352, baseType: !721, size: 64, offset: 64)
!1173 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !1155, file: !45, line: 2371, baseType: !44, size: 32, offset: 512)
!1174 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !1155, file: !45, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!1175 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !1155, file: !45, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!1176 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !1155, file: !45, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!1177 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !1155, file: !45, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!1178 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !1155, file: !45, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!1179 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !908, file: !909, line: 504, baseType: !1180, size: 64, offset: 704)
!1180 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1181, size: 64)
!1181 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !909, line: 504, flags: DIFlagFwdDecl)
!1182 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !908, file: !909, line: 507, baseType: !953, size: 64, offset: 768)
!1183 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !908, file: !909, line: 510, baseType: !746, size: 32, offset: 832)
!1184 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !908, file: !909, line: 513, baseType: !746, size: 32, offset: 864)
!1185 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !908, file: !909, line: 516, baseType: !613, size: 32, offset: 896)
!1186 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !908, file: !909, line: 519, baseType: !613, size: 32, offset: 928)
!1187 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !908, file: !909, line: 522, baseType: !7, size: 32, offset: 960)
!1188 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !908, file: !909, line: 523, baseType: !7, size: 32, offset: 992)
!1189 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !908, file: !909, line: 528, baseType: !1161, size: 64, offset: 1024)
!1190 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !908, file: !909, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!1191 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !908, file: !909, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!1192 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !908, file: !909, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!1193 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !908, file: !909, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!1194 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !908, file: !909, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!1195 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !908, file: !909, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!1196 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !908, file: !909, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!1197 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !908, file: !909, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!1198 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !908, file: !909, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!1199 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !908, file: !909, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!1200 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !908, file: !909, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!1201 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !908, file: !909, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!1202 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !908, file: !909, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!1203 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !908, file: !909, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!1204 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !908, file: !909, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!1205 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !908, file: !909, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!1206 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !903, file: !50, line: 3254, baseType: !666, size: 64, offset: 1536)
!1207 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !903, file: !50, line: 3257, baseType: !666, size: 64, offset: 1600)
!1208 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !903, file: !50, line: 3258, baseType: !666, size: 64, offset: 1664)
!1209 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !903, file: !50, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!1210 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !903, file: !50, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!1211 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !903, file: !50, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!1212 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !903, file: !50, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!1213 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !903, file: !50, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!1214 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !903, file: !50, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!1215 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !903, file: !50, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!1216 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !903, file: !50, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!1217 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !903, file: !50, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!1218 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !903, file: !50, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!1219 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !903, file: !50, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!1220 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !903, file: !50, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!1221 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !903, file: !50, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!1222 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !903, file: !50, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!1223 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !903, file: !50, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!1224 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !903, file: !50, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!1225 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !903, file: !50, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!1226 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !903, file: !50, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!1227 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !668, file: !50, line: 3394, baseType: !1228, size: 1344)
!1228 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !50, line: 2279, size: 1344, elements: !1229)
!1229 = !{!1230, !1231, !1232, !1233, !1234, !1235, !1236, !1237, !1238, !1239, !1240, !1241, !1242, !1243, !1244, !1245, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1255, !1256, !1257, !1265, !1266, !1267, !1268, !1269, !1270, !1271, !1272, !1273}
!1230 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1228, file: !50, line: 2280, baseType: !704, size: 192)
!1231 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !1228, file: !50, line: 2281, baseType: !666, size: 64, offset: 192)
!1232 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1228, file: !50, line: 2282, baseType: !666, size: 64, offset: 256)
!1233 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1228, file: !50, line: 2283, baseType: !666, size: 64, offset: 320)
!1234 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1228, file: !50, line: 2284, baseType: !666, size: 64, offset: 384)
!1235 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1228, file: !50, line: 2285, baseType: !7, size: 32, offset: 448)
!1236 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !1228, file: !50, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!1237 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !1228, file: !50, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!1238 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !1228, file: !50, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!1239 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !1228, file: !50, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!1240 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !1228, file: !50, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!1241 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !1228, file: !50, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!1242 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1228, file: !50, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!1243 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !1228, file: !50, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!1244 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1228, file: !50, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!1245 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1228, file: !50, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!1246 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1228, file: !50, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!1247 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1228, file: !50, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!1248 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1228, file: !50, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!1249 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1228, file: !50, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!1250 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1228, file: !50, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!1251 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1228, file: !50, line: 2305, baseType: !7, size: 32, offset: 512)
!1252 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !1228, file: !50, line: 2306, baseType: !1253, size: 32, offset: 544)
!1253 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !1254, line: 31, baseType: !746)
!1254 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1255 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !1228, file: !50, line: 2307, baseType: !666, size: 64, offset: 576)
!1256 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !1228, file: !50, line: 2308, baseType: !666, size: 64, offset: 640)
!1257 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !1228, file: !50, line: 2314, baseType: !1258, size: 64, offset: 704)
!1258 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !50, line: 2309, size: 64, elements: !1259)
!1259 = !{!1260, !1261, !1262}
!1260 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !1258, file: !50, line: 2310, baseType: !746, size: 32)
!1261 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !1258, file: !50, line: 2311, baseType: !1161, size: 64)
!1262 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !1258, file: !50, line: 2312, baseType: !1263, size: 64)
!1263 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1264, size: 64)
!1264 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !50, line: 2277, flags: DIFlagFwdDecl)
!1265 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1228, file: !50, line: 2315, baseType: !666, size: 64, offset: 768)
!1266 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !1228, file: !50, line: 2316, baseType: !666, size: 64, offset: 832)
!1267 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !1228, file: !50, line: 2317, baseType: !666, size: 64, offset: 896)
!1268 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !1228, file: !50, line: 2318, baseType: !666, size: 64, offset: 960)
!1269 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !1228, file: !50, line: 2319, baseType: !666, size: 64, offset: 1024)
!1270 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1228, file: !50, line: 2320, baseType: !666, size: 64, offset: 1088)
!1271 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1228, file: !50, line: 2321, baseType: !666, size: 64, offset: 1152)
!1272 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1228, file: !50, line: 2322, baseType: !666, size: 64, offset: 1216)
!1273 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1228, file: !50, line: 2324, baseType: !1274, size: 64, offset: 1280)
!1274 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1275, size: 64)
!1275 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !50, line: 2324, flags: DIFlagFwdDecl)
!1276 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !668, file: !50, line: 3395, baseType: !1277, size: 320)
!1277 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !50, line: 1469, size: 320, elements: !1278)
!1278 = !{!1279, !1280, !1281}
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1277, file: !50, line: 1470, baseType: !704, size: 192)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !1277, file: !50, line: 1471, baseType: !666, size: 64, offset: 192)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1277, file: !50, line: 1472, baseType: !666, size: 64, offset: 256)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !668, file: !50, line: 3396, baseType: !1283, size: 320)
!1283 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !50, line: 1482, size: 320, elements: !1284)
!1284 = !{!1285, !1286, !1287}
!1285 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1283, file: !50, line: 1483, baseType: !704, size: 192)
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1283, file: !50, line: 1484, baseType: !746, size: 32, offset: 192)
!1287 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !1283, file: !50, line: 1485, baseType: !1028, size: 64, offset: 256)
!1288 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !668, file: !50, line: 3397, baseType: !1289, size: 384)
!1289 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !50, line: 1829, size: 384, elements: !1290)
!1290 = !{!1291, !1292, !1293, !1294}
!1291 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1289, file: !50, line: 1830, baseType: !704, size: 192)
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1289, file: !50, line: 1831, baseType: !613, size: 32, offset: 192)
!1293 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1289, file: !50, line: 1832, baseType: !666, size: 64, offset: 256)
!1294 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !1289, file: !50, line: 1835, baseType: !1028, size: 64, offset: 320)
!1295 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !668, file: !50, line: 3398, baseType: !1296, size: 704)
!1296 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !50, line: 1898, size: 704, elements: !1297)
!1297 = !{!1298, !1299, !1300, !1301, !1302, !1307}
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1296, file: !50, line: 1899, baseType: !704, size: 192)
!1299 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !1296, file: !50, line: 1902, baseType: !666, size: 64, offset: 192)
!1300 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !1296, file: !50, line: 1905, baseType: !594, size: 64, offset: 256)
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !1296, file: !50, line: 1908, baseType: !7, size: 32, offset: 320)
!1302 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !1296, file: !50, line: 1911, baseType: !1303, size: 64, offset: 384)
!1303 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1304, size: 64)
!1304 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !859, line: 117, size: 128, elements: !1305)
!1305 = !{!1306}
!1306 = !DIDerivedType(tag: DW_TAG_member, name: "pt", scope: !1304, file: !859, line: 120, baseType: !1031, size: 128)
!1307 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !1296, file: !50, line: 1914, baseType: !1134, size: 256, offset: 448)
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !668, file: !50, line: 3399, baseType: !1309, size: 704)
!1309 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !50, line: 2008, size: 704, elements: !1310)
!1310 = !{!1311, !1312, !1313, !1314, !1315, !1316, !1317, !1318, !1319, !1320, !1321}
!1311 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1309, file: !50, line: 2009, baseType: !704, size: 192)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1309, file: !50, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!1313 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !1309, file: !50, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!1314 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1309, file: !50, line: 2014, baseType: !613, size: 32, offset: 224)
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1309, file: !50, line: 2016, baseType: !666, size: 64, offset: 256)
!1316 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !1309, file: !50, line: 2017, baseType: !1017, size: 64, offset: 320)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !1309, file: !50, line: 2019, baseType: !666, size: 64, offset: 384)
!1318 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !1309, file: !50, line: 2020, baseType: !666, size: 64, offset: 448)
!1319 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1309, file: !50, line: 2021, baseType: !666, size: 64, offset: 512)
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !1309, file: !50, line: 2022, baseType: !666, size: 64, offset: 576)
!1321 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !1309, file: !50, line: 2023, baseType: !666, size: 64, offset: 640)
!1322 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !668, file: !50, line: 3400, baseType: !1323, size: 832)
!1323 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !50, line: 2430, size: 832, elements: !1324)
!1324 = !{!1325, !1326, !1327, !1328, !1329, !1330, !1331, !1332, !1333, !1334}
!1325 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1323, file: !50, line: 2431, baseType: !704, size: 192)
!1326 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1323, file: !50, line: 2433, baseType: !666, size: 64, offset: 192)
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !1323, file: !50, line: 2434, baseType: !666, size: 64, offset: 256)
!1328 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !1323, file: !50, line: 2435, baseType: !666, size: 64, offset: 320)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !1323, file: !50, line: 2436, baseType: !666, size: 64, offset: 384)
!1330 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !1323, file: !50, line: 2437, baseType: !1017, size: 64, offset: 448)
!1331 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !1323, file: !50, line: 2438, baseType: !666, size: 64, offset: 512)
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !1323, file: !50, line: 2440, baseType: !666, size: 64, offset: 576)
!1333 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !1323, file: !50, line: 2441, baseType: !666, size: 64, offset: 640)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !1323, file: !50, line: 2443, baseType: !1335, size: 128, offset: 704)
!1335 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !50, line: 182, baseType: !1336)
!1336 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !50, line: 182, size: 128, elements: !1337)
!1337 = !{!1338}
!1338 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1336, file: !50, line: 182, baseType: !1022, size: 128)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !668, file: !50, line: 3401, baseType: !1340, size: 320)
!1340 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !50, line: 3327, size: 320, elements: !1341)
!1341 = !{!1342, !1343, !1350}
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1340, file: !50, line: 3329, baseType: !704, size: 192)
!1343 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !1340, file: !50, line: 3330, baseType: !1344, size: 64, offset: 192)
!1344 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1345, size: 64)
!1345 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !50, line: 3320, size: 192, elements: !1346)
!1346 = !{!1347, !1348, !1349}
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1345, file: !50, line: 3322, baseType: !1344, size: 64)
!1348 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1345, file: !50, line: 3323, baseType: !1344, size: 64, offset: 64)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1345, file: !50, line: 3324, baseType: !666, size: 64, offset: 128)
!1350 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !1340, file: !50, line: 3331, baseType: !1344, size: 64, offset: 256)
!1351 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !668, file: !50, line: 3402, baseType: !1352, size: 256)
!1352 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !50, line: 1540, size: 256, elements: !1353)
!1353 = !{!1354, !1355}
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1352, file: !50, line: 1541, baseType: !704, size: 192)
!1355 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !1352, file: !50, line: 1542, baseType: !1356, size: 64, offset: 192)
!1356 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1357, size: 64)
!1357 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !50, line: 1538, baseType: !1358)
!1358 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !50, line: 1538, size: 192, elements: !1359)
!1359 = !{!1360}
!1360 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1358, file: !50, line: 1538, baseType: !1361, size: 192)
!1361 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !50, line: 1537, baseType: !1362)
!1362 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !50, line: 1537, size: 192, elements: !1363)
!1363 = !{!1364, !1365, !1366}
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1362, file: !50, line: 1537, baseType: !7, size: 32)
!1365 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1362, file: !50, line: 1537, baseType: !7, size: 32, offset: 32)
!1366 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1362, file: !50, line: 1537, baseType: !1367, size: 128, offset: 64)
!1367 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1368, size: 128, elements: !750)
!1368 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !50, line: 1535, baseType: !1369)
!1369 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !50, line: 1532, size: 128, elements: !1370)
!1370 = !{!1371, !1372}
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1369, file: !50, line: 1533, baseType: !666, size: 64)
!1372 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1369, file: !50, line: 1534, baseType: !666, size: 64, offset: 64)
!1373 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !668, file: !50, line: 3403, baseType: !1374, size: 512)
!1374 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !50, line: 1938, size: 512, elements: !1375)
!1375 = !{!1376, !1377, !1378, !1379, !1385, !1386, !1387}
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1374, file: !50, line: 1939, baseType: !704, size: 192)
!1377 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1374, file: !50, line: 1940, baseType: !613, size: 32, offset: 192)
!1378 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1374, file: !50, line: 1941, baseType: !49, size: 32, offset: 224)
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1374, file: !50, line: 1946, baseType: !1380, size: 32, offset: 256)
!1380 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !50, line: 1942, size: 32, elements: !1381)
!1381 = !{!1382, !1383, !1384}
!1382 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !1380, file: !50, line: 1943, baseType: !68, size: 32)
!1383 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !1380, file: !50, line: 1944, baseType: !75, size: 32)
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !1380, file: !50, line: 1945, baseType: !82, size: 32)
!1385 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !1374, file: !50, line: 1950, baseType: !645, size: 64, offset: 320)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !1374, file: !50, line: 1951, baseType: !645, size: 64, offset: 384)
!1387 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !1374, file: !50, line: 1953, baseType: !1028, size: 64, offset: 448)
!1388 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !668, file: !50, line: 3404, baseType: !1389, size: 1664)
!1389 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !50, line: 3337, size: 1664, elements: !1390)
!1390 = !{!1391, !1392}
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1389, file: !50, line: 3338, baseType: !704, size: 192)
!1392 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !1389, file: !50, line: 3341, baseType: !1393, size: 1472, offset: 192)
!1393 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !1394, line: 410, size: 1472, elements: !1395)
!1394 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1395 = !{!1396, !1397, !1398, !1399, !1400, !1401, !1402, !1403, !1404, !1406, !1407, !1408, !1409, !1410, !1411, !1412, !1413, !1414, !1415, !1416, !1417, !1418, !1419, !1420, !1421, !1422, !1423, !1424, !1425, !1426, !1427, !1428, !1429, !1430, !1431, !1432, !1433, !1434, !1435, !1436, !1437, !1438, !1439, !1440, !1441, !1442, !1443, !1444, !1445, !1446, !1447, !1448, !1449, !1450, !1451, !1452, !1453, !1454, !1455, !1456, !1457, !1458, !1459, !1460, !1461, !1462, !1463, !1464, !1465, !1466, !1467, !1468, !1469, !1470, !1471, !1472, !1473, !1474, !1475, !1476, !1477, !1478, !1479, !1480, !1481, !1482, !1483, !1484, !1485, !1486, !1487, !1488, !1489, !1490, !1491, !1492, !1493, !1494, !1495, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510, !1511, !1512, !1513, !1514, !1515, !1516, !1517, !1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540, !1541, !1542, !1543, !1544, !1545, !1546, !1547, !1548, !1549, !1550, !1551, !1552, !1553, !1554, !1555, !1556, !1557, !1558, !1559}
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !1393, file: !1394, line: 412, baseType: !746, size: 32)
!1397 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !1393, file: !1394, line: 413, baseType: !746, size: 32, offset: 32)
!1398 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !1393, file: !1394, line: 414, baseType: !746, size: 32, offset: 64)
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !1393, file: !1394, line: 415, baseType: !746, size: 32, offset: 96)
!1400 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !1393, file: !1394, line: 416, baseType: !746, size: 32, offset: 128)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !1393, file: !1394, line: 417, baseType: !746, size: 32, offset: 160)
!1402 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !1393, file: !1394, line: 418, baseType: !769, size: 8, offset: 192)
!1403 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !1393, file: !1394, line: 419, baseType: !769, size: 8, offset: 200)
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !1393, file: !1394, line: 420, baseType: !1405, size: 8, offset: 208)
!1405 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !1393, file: !1394, line: 421, baseType: !1405, size: 8, offset: 216)
!1407 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !1393, file: !1394, line: 422, baseType: !1405, size: 8, offset: 224)
!1408 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !1393, file: !1394, line: 423, baseType: !1405, size: 8, offset: 232)
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !1393, file: !1394, line: 424, baseType: !1405, size: 8, offset: 240)
!1410 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !1393, file: !1394, line: 425, baseType: !1405, size: 8, offset: 248)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !1393, file: !1394, line: 426, baseType: !1405, size: 8, offset: 256)
!1412 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !1393, file: !1394, line: 427, baseType: !1405, size: 8, offset: 264)
!1413 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !1393, file: !1394, line: 428, baseType: !1405, size: 8, offset: 272)
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !1393, file: !1394, line: 429, baseType: !1405, size: 8, offset: 280)
!1415 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !1393, file: !1394, line: 430, baseType: !1405, size: 8, offset: 288)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !1393, file: !1394, line: 431, baseType: !1405, size: 8, offset: 296)
!1417 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !1393, file: !1394, line: 432, baseType: !1405, size: 8, offset: 304)
!1418 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !1393, file: !1394, line: 433, baseType: !1405, size: 8, offset: 312)
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !1393, file: !1394, line: 434, baseType: !1405, size: 8, offset: 320)
!1420 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !1393, file: !1394, line: 435, baseType: !1405, size: 8, offset: 328)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !1393, file: !1394, line: 436, baseType: !1405, size: 8, offset: 336)
!1422 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !1393, file: !1394, line: 437, baseType: !1405, size: 8, offset: 344)
!1423 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !1393, file: !1394, line: 438, baseType: !1405, size: 8, offset: 352)
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !1393, file: !1394, line: 439, baseType: !1405, size: 8, offset: 360)
!1425 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !1393, file: !1394, line: 440, baseType: !1405, size: 8, offset: 368)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !1393, file: !1394, line: 441, baseType: !1405, size: 8, offset: 376)
!1427 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !1393, file: !1394, line: 442, baseType: !1405, size: 8, offset: 384)
!1428 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !1393, file: !1394, line: 443, baseType: !1405, size: 8, offset: 392)
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !1393, file: !1394, line: 444, baseType: !1405, size: 8, offset: 400)
!1430 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !1393, file: !1394, line: 445, baseType: !1405, size: 8, offset: 408)
!1431 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !1393, file: !1394, line: 446, baseType: !1405, size: 8, offset: 416)
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !1393, file: !1394, line: 447, baseType: !1405, size: 8, offset: 424)
!1433 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !1393, file: !1394, line: 448, baseType: !1405, size: 8, offset: 432)
!1434 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !1393, file: !1394, line: 449, baseType: !1405, size: 8, offset: 440)
!1435 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !1393, file: !1394, line: 450, baseType: !1405, size: 8, offset: 448)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !1393, file: !1394, line: 451, baseType: !1405, size: 8, offset: 456)
!1437 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !1393, file: !1394, line: 452, baseType: !1405, size: 8, offset: 464)
!1438 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !1393, file: !1394, line: 453, baseType: !1405, size: 8, offset: 472)
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !1393, file: !1394, line: 454, baseType: !1405, size: 8, offset: 480)
!1440 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !1393, file: !1394, line: 455, baseType: !1405, size: 8, offset: 488)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !1393, file: !1394, line: 456, baseType: !1405, size: 8, offset: 496)
!1442 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !1393, file: !1394, line: 457, baseType: !1405, size: 8, offset: 504)
!1443 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !1393, file: !1394, line: 458, baseType: !1405, size: 8, offset: 512)
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !1393, file: !1394, line: 459, baseType: !1405, size: 8, offset: 520)
!1445 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !1393, file: !1394, line: 460, baseType: !1405, size: 8, offset: 528)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !1393, file: !1394, line: 461, baseType: !1405, size: 8, offset: 536)
!1447 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !1393, file: !1394, line: 462, baseType: !1405, size: 8, offset: 544)
!1448 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !1393, file: !1394, line: 463, baseType: !1405, size: 8, offset: 552)
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !1393, file: !1394, line: 464, baseType: !1405, size: 8, offset: 560)
!1450 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !1393, file: !1394, line: 465, baseType: !1405, size: 8, offset: 568)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !1393, file: !1394, line: 466, baseType: !1405, size: 8, offset: 576)
!1452 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !1393, file: !1394, line: 467, baseType: !1405, size: 8, offset: 584)
!1453 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !1393, file: !1394, line: 468, baseType: !1405, size: 8, offset: 592)
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !1393, file: !1394, line: 469, baseType: !1405, size: 8, offset: 600)
!1455 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !1393, file: !1394, line: 470, baseType: !1405, size: 8, offset: 608)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !1393, file: !1394, line: 471, baseType: !1405, size: 8, offset: 616)
!1457 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !1393, file: !1394, line: 472, baseType: !1405, size: 8, offset: 624)
!1458 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !1393, file: !1394, line: 473, baseType: !1405, size: 8, offset: 632)
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !1393, file: !1394, line: 474, baseType: !1405, size: 8, offset: 640)
!1460 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !1393, file: !1394, line: 475, baseType: !1405, size: 8, offset: 648)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !1393, file: !1394, line: 476, baseType: !1405, size: 8, offset: 656)
!1462 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !1393, file: !1394, line: 477, baseType: !1405, size: 8, offset: 664)
!1463 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !1393, file: !1394, line: 478, baseType: !1405, size: 8, offset: 672)
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !1393, file: !1394, line: 479, baseType: !1405, size: 8, offset: 680)
!1465 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !1393, file: !1394, line: 480, baseType: !1405, size: 8, offset: 688)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !1393, file: !1394, line: 481, baseType: !1405, size: 8, offset: 696)
!1467 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !1393, file: !1394, line: 482, baseType: !1405, size: 8, offset: 704)
!1468 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !1393, file: !1394, line: 483, baseType: !1405, size: 8, offset: 712)
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !1393, file: !1394, line: 484, baseType: !1405, size: 8, offset: 720)
!1470 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !1393, file: !1394, line: 485, baseType: !1405, size: 8, offset: 728)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !1393, file: !1394, line: 486, baseType: !1405, size: 8, offset: 736)
!1472 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !1393, file: !1394, line: 487, baseType: !1405, size: 8, offset: 744)
!1473 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !1393, file: !1394, line: 488, baseType: !1405, size: 8, offset: 752)
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !1393, file: !1394, line: 489, baseType: !1405, size: 8, offset: 760)
!1475 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !1393, file: !1394, line: 490, baseType: !1405, size: 8, offset: 768)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !1393, file: !1394, line: 491, baseType: !1405, size: 8, offset: 776)
!1477 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !1393, file: !1394, line: 492, baseType: !1405, size: 8, offset: 784)
!1478 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !1393, file: !1394, line: 493, baseType: !1405, size: 8, offset: 792)
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !1393, file: !1394, line: 494, baseType: !1405, size: 8, offset: 800)
!1480 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !1393, file: !1394, line: 495, baseType: !1405, size: 8, offset: 808)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !1393, file: !1394, line: 496, baseType: !1405, size: 8, offset: 816)
!1482 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !1393, file: !1394, line: 497, baseType: !1405, size: 8, offset: 824)
!1483 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !1393, file: !1394, line: 498, baseType: !1405, size: 8, offset: 832)
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !1393, file: !1394, line: 499, baseType: !1405, size: 8, offset: 840)
!1485 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !1393, file: !1394, line: 500, baseType: !1405, size: 8, offset: 848)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !1393, file: !1394, line: 501, baseType: !1405, size: 8, offset: 856)
!1487 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !1393, file: !1394, line: 502, baseType: !1405, size: 8, offset: 864)
!1488 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !1393, file: !1394, line: 503, baseType: !1405, size: 8, offset: 872)
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !1393, file: !1394, line: 504, baseType: !1405, size: 8, offset: 880)
!1490 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !1393, file: !1394, line: 505, baseType: !1405, size: 8, offset: 888)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !1393, file: !1394, line: 506, baseType: !1405, size: 8, offset: 896)
!1492 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !1393, file: !1394, line: 507, baseType: !1405, size: 8, offset: 904)
!1493 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !1393, file: !1394, line: 508, baseType: !1405, size: 8, offset: 912)
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !1393, file: !1394, line: 509, baseType: !1405, size: 8, offset: 920)
!1495 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !1393, file: !1394, line: 510, baseType: !1405, size: 8, offset: 928)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !1393, file: !1394, line: 511, baseType: !1405, size: 8, offset: 936)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !1393, file: !1394, line: 512, baseType: !1405, size: 8, offset: 944)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !1393, file: !1394, line: 513, baseType: !1405, size: 8, offset: 952)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !1393, file: !1394, line: 514, baseType: !1405, size: 8, offset: 960)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !1393, file: !1394, line: 515, baseType: !1405, size: 8, offset: 968)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !1393, file: !1394, line: 516, baseType: !1405, size: 8, offset: 976)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !1393, file: !1394, line: 517, baseType: !1405, size: 8, offset: 984)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !1393, file: !1394, line: 518, baseType: !1405, size: 8, offset: 992)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !1393, file: !1394, line: 519, baseType: !1405, size: 8, offset: 1000)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !1393, file: !1394, line: 520, baseType: !1405, size: 8, offset: 1008)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !1393, file: !1394, line: 521, baseType: !1405, size: 8, offset: 1016)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !1393, file: !1394, line: 522, baseType: !1405, size: 8, offset: 1024)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !1393, file: !1394, line: 523, baseType: !1405, size: 8, offset: 1032)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !1393, file: !1394, line: 524, baseType: !1405, size: 8, offset: 1040)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !1393, file: !1394, line: 525, baseType: !1405, size: 8, offset: 1048)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !1393, file: !1394, line: 526, baseType: !1405, size: 8, offset: 1056)
!1512 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !1393, file: !1394, line: 527, baseType: !1405, size: 8, offset: 1064)
!1513 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !1393, file: !1394, line: 528, baseType: !1405, size: 8, offset: 1072)
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !1393, file: !1394, line: 529, baseType: !1405, size: 8, offset: 1080)
!1515 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !1393, file: !1394, line: 530, baseType: !1405, size: 8, offset: 1088)
!1516 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !1393, file: !1394, line: 531, baseType: !1405, size: 8, offset: 1096)
!1517 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !1393, file: !1394, line: 532, baseType: !1405, size: 8, offset: 1104)
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !1393, file: !1394, line: 533, baseType: !1405, size: 8, offset: 1112)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !1393, file: !1394, line: 534, baseType: !1405, size: 8, offset: 1120)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !1393, file: !1394, line: 535, baseType: !1405, size: 8, offset: 1128)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !1393, file: !1394, line: 536, baseType: !1405, size: 8, offset: 1136)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !1393, file: !1394, line: 537, baseType: !1405, size: 8, offset: 1144)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !1393, file: !1394, line: 538, baseType: !1405, size: 8, offset: 1152)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !1393, file: !1394, line: 539, baseType: !1405, size: 8, offset: 1160)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !1393, file: !1394, line: 540, baseType: !1405, size: 8, offset: 1168)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !1393, file: !1394, line: 541, baseType: !1405, size: 8, offset: 1176)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !1393, file: !1394, line: 542, baseType: !1405, size: 8, offset: 1184)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !1393, file: !1394, line: 543, baseType: !1405, size: 8, offset: 1192)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !1393, file: !1394, line: 544, baseType: !1405, size: 8, offset: 1200)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !1393, file: !1394, line: 545, baseType: !1405, size: 8, offset: 1208)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !1393, file: !1394, line: 546, baseType: !1405, size: 8, offset: 1216)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !1393, file: !1394, line: 547, baseType: !1405, size: 8, offset: 1224)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !1393, file: !1394, line: 548, baseType: !1405, size: 8, offset: 1232)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !1393, file: !1394, line: 549, baseType: !1405, size: 8, offset: 1240)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !1393, file: !1394, line: 550, baseType: !1405, size: 8, offset: 1248)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !1393, file: !1394, line: 551, baseType: !1405, size: 8, offset: 1256)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !1393, file: !1394, line: 552, baseType: !1405, size: 8, offset: 1264)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !1393, file: !1394, line: 553, baseType: !1405, size: 8, offset: 1272)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !1393, file: !1394, line: 554, baseType: !1405, size: 8, offset: 1280)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !1393, file: !1394, line: 555, baseType: !1405, size: 8, offset: 1288)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !1393, file: !1394, line: 556, baseType: !1405, size: 8, offset: 1296)
!1542 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !1393, file: !1394, line: 557, baseType: !1405, size: 8, offset: 1304)
!1543 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !1393, file: !1394, line: 558, baseType: !1405, size: 8, offset: 1312)
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !1393, file: !1394, line: 559, baseType: !1405, size: 8, offset: 1320)
!1545 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !1393, file: !1394, line: 560, baseType: !1405, size: 8, offset: 1328)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !1393, file: !1394, line: 561, baseType: !1405, size: 8, offset: 1336)
!1547 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !1393, file: !1394, line: 562, baseType: !1405, size: 8, offset: 1344)
!1548 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !1393, file: !1394, line: 563, baseType: !1405, size: 8, offset: 1352)
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !1393, file: !1394, line: 564, baseType: !1405, size: 8, offset: 1360)
!1550 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !1393, file: !1394, line: 565, baseType: !1405, size: 8, offset: 1368)
!1551 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !1393, file: !1394, line: 566, baseType: !1405, size: 8, offset: 1376)
!1552 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !1393, file: !1394, line: 567, baseType: !1405, size: 8, offset: 1384)
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !1393, file: !1394, line: 568, baseType: !1405, size: 8, offset: 1392)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !1393, file: !1394, line: 569, baseType: !1405, size: 8, offset: 1400)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !1393, file: !1394, line: 570, baseType: !1405, size: 8, offset: 1408)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !1393, file: !1394, line: 571, baseType: !1405, size: 8, offset: 1416)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !1393, file: !1394, line: 572, baseType: !1405, size: 8, offset: 1424)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !1393, file: !1394, line: 573, baseType: !1405, size: 8, offset: 1432)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !1393, file: !1394, line: 574, baseType: !1405, size: 8, offset: 1440)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !668, file: !50, line: 3405, baseType: !1561, size: 384)
!1561 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !50, line: 3352, size: 384, elements: !1562)
!1562 = !{!1563, !1564}
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1561, file: !50, line: 3353, baseType: !704, size: 192)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !1561, file: !50, line: 3356, baseType: !1565, size: 192, offset: 192)
!1565 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !1394, line: 578, size: 192, elements: !1566)
!1566 = !{!1567, !1568, !1569, !1570, !1571, !1572, !1573, !1574, !1575, !1576, !1577}
!1567 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !1565, file: !1394, line: 580, baseType: !746, size: 32)
!1568 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !1565, file: !1394, line: 581, baseType: !746, size: 32, offset: 32)
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !1565, file: !1394, line: 582, baseType: !746, size: 32, offset: 64)
!1570 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !1565, file: !1394, line: 583, baseType: !746, size: 32, offset: 96)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !1565, file: !1394, line: 584, baseType: !769, size: 8, offset: 128)
!1572 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !1565, file: !1394, line: 585, baseType: !769, size: 8, offset: 136)
!1573 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !1565, file: !1394, line: 586, baseType: !769, size: 8, offset: 144)
!1574 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !1565, file: !1394, line: 587, baseType: !769, size: 8, offset: 152)
!1575 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !1565, file: !1394, line: 588, baseType: !769, size: 8, offset: 160)
!1576 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !1565, file: !1394, line: 589, baseType: !769, size: 8, offset: 168)
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !1565, file: !1394, line: 590, baseType: !769, size: 8, offset: 176)
!1578 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !637, file: !34, line: 138, baseType: !613, size: 32, offset: 320)
!1579 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !637, file: !34, line: 142, baseType: !7, size: 32, offset: 352)
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !637, file: !34, line: 144, baseType: !746, size: 32, offset: 384)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !637, file: !34, line: 145, baseType: !746, size: 32, offset: 416)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !637, file: !34, line: 146, baseType: !1583, size: 64, offset: 448)
!1583 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !34, line: 119, baseType: !721)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !620, file: !34, line: 220, baseType: !623, size: 64, offset: 64)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !620, file: !34, line: 223, baseType: !664, size: 64, offset: 128)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !620, file: !34, line: 226, baseType: !1587, size: 64, offset: 192)
!1587 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1588, size: 64)
!1588 = !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !34, line: 185, flags: DIFlagFwdDecl)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !620, file: !34, line: 229, baseType: !1590, size: 128, offset: 256)
!1590 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1591, size: 128, elements: !941)
!1591 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1592, size: 64)
!1592 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !34, line: 229, flags: DIFlagFwdDecl)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !620, file: !34, line: 232, baseType: !619, size: 64, offset: 384)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !620, file: !34, line: 233, baseType: !619, size: 64, offset: 448)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !620, file: !34, line: 238, baseType: !1596, size: 64, offset: 512)
!1596 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !34, line: 235, size: 64, elements: !1597)
!1597 = !{!1598, !1604}
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !1596, file: !34, line: 236, baseType: !1599, size: 64)
!1599 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1600, size: 64)
!1600 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !34, line: 273, size: 128, elements: !1601)
!1601 = !{!1602, !1603}
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !1600, file: !34, line: 275, baseType: !645, size: 64)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !1600, file: !34, line: 278, baseType: !645, size: 64, offset: 64)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1596, file: !34, line: 237, baseType: !1605, size: 64)
!1605 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1606, size: 64)
!1606 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !34, line: 259, size: 320, elements: !1607)
!1607 = !{!1608, !1609, !1610, !1611, !1612}
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !1606, file: !34, line: 261, baseType: !660, size: 64)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !1606, file: !34, line: 262, baseType: !660, size: 64, offset: 64)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1606, file: !34, line: 266, baseType: !660, size: 64, offset: 128)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !1606, file: !34, line: 267, baseType: !660, size: 64, offset: 192)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1606, file: !34, line: 270, baseType: !746, size: 32, offset: 256)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !620, file: !34, line: 241, baseType: !1583, size: 64, offset: 576)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !620, file: !34, line: 244, baseType: !746, size: 32, offset: 640)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !620, file: !34, line: 247, baseType: !746, size: 32, offset: 672)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !620, file: !34, line: 250, baseType: !746, size: 32, offset: 704)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !620, file: !34, line: 253, baseType: !746, size: 32, offset: 736)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !620, file: !34, line: 256, baseType: !746, size: 32, offset: 768)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !600, file: !6, line: 327, baseType: !666, size: 64, offset: 192)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "gsops", scope: !597, file: !6, line: 739, baseType: !1621, size: 448)
!1621 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops", file: !6, line: 350, size: 448, elements: !1622)
!1622 = !{!1623, !1629}
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1621, file: !6, line: 353, baseType: !1624, size: 384)
!1624 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops_base", file: !6, line: 333, size: 384, elements: !1625)
!1625 = !{!1626, !1627, !1628}
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1624, file: !6, line: 336, baseType: !600, size: 256)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "def_ops", scope: !1624, file: !6, line: 343, baseType: !1122, size: 64, offset: 256)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "use_ops", scope: !1624, file: !6, line: 344, baseType: !1129, size: 64, offset: 320)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1621, file: !6, line: 359, baseType: !1028, size: 64, offset: 384)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "gsmembase", scope: !597, file: !6, line: 740, baseType: !1631, size: 512)
!1631 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops_base", file: !6, line: 365, size: 512, elements: !1632)
!1632 = !{!1633, !1634, !1635}
!1633 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1631, file: !6, line: 368, baseType: !1624, size: 384)
!1634 = !DIDerivedType(tag: DW_TAG_member, name: "vdef", scope: !1631, file: !6, line: 373, baseType: !666, size: 64, offset: 384)
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "vuse", scope: !1631, file: !6, line: 374, baseType: !666, size: 64, offset: 448)
!1636 = !DIDerivedType(tag: DW_TAG_member, name: "gsmem", scope: !597, file: !6, line: 741, baseType: !1637, size: 576)
!1637 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops", file: !6, line: 380, size: 576, elements: !1638)
!1638 = !{!1639, !1640}
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1637, file: !6, line: 383, baseType: !1631, size: 512)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1637, file: !6, line: 389, baseType: !1028, size: 64, offset: 512)
!1641 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !597, file: !6, line: 742, baseType: !1642, size: 320)
!1642 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp", file: !6, line: 395, size: 320, elements: !1643)
!1643 = !{!1644, !1645}
!1644 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1642, file: !6, line: 397, baseType: !600, size: 256)
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1642, file: !6, line: 400, baseType: !645, size: 64, offset: 256)
!1646 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_bind", scope: !597, file: !6, line: 743, baseType: !1647, size: 448)
!1647 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_bind", file: !6, line: 406, size: 448, elements: !1648)
!1648 = !{!1649, !1650, !1651, !1652}
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1647, file: !6, line: 408, baseType: !600, size: 256)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1647, file: !6, line: 412, baseType: !666, size: 64, offset: 256)
!1651 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1647, file: !6, line: 420, baseType: !666, size: 64, offset: 320)
!1652 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1647, file: !6, line: 423, baseType: !645, size: 64, offset: 384)
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_catch", scope: !597, file: !6, line: 744, baseType: !1654, size: 384)
!1654 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_catch", file: !6, line: 429, size: 384, elements: !1655)
!1655 = !{!1656, !1657, !1658}
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1654, file: !6, line: 431, baseType: !600, size: 256)
!1657 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1654, file: !6, line: 434, baseType: !666, size: 64, offset: 256)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "handler", scope: !1654, file: !6, line: 437, baseType: !645, size: 64, offset: 320)
!1659 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_filter", scope: !597, file: !6, line: 745, baseType: !1660, size: 384)
!1660 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_filter", file: !6, line: 443, size: 384, elements: !1661)
!1661 = !{!1662, !1663, !1664}
!1662 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1660, file: !6, line: 445, baseType: !600, size: 256)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1660, file: !6, line: 449, baseType: !666, size: 64, offset: 256)
!1664 = !DIDerivedType(tag: DW_TAG_member, name: "failure", scope: !1660, file: !6, line: 453, baseType: !645, size: 64, offset: 320)
!1665 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_mnt", scope: !597, file: !6, line: 746, baseType: !1666, size: 320)
!1666 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_mnt", file: !6, line: 459, size: 320, elements: !1667)
!1667 = !{!1668, !1669}
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1666, file: !6, line: 461, baseType: !600, size: 256)
!1669 = !DIDerivedType(tag: DW_TAG_member, name: "fndecl", scope: !1666, file: !6, line: 464, baseType: !666, size: 64, offset: 256)
!1670 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_phi", scope: !597, file: !6, line: 747, baseType: !1671, size: 768)
!1671 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_phi", file: !6, line: 469, size: 768, elements: !1672)
!1672 = !{!1673, !1674, !1675, !1676, !1677}
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1671, file: !6, line: 471, baseType: !600, size: 256)
!1674 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !1671, file: !6, line: 474, baseType: !7, size: 32, offset: 256)
!1675 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !1671, file: !6, line: 475, baseType: !7, size: 32, offset: 288)
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1671, file: !6, line: 478, baseType: !666, size: 64, offset: 320)
!1677 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !1671, file: !6, line: 481, baseType: !1678, size: 384, offset: 384)
!1678 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1679, size: 384, elements: !750)
!1679 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "phi_arg_d", file: !50, line: 1917, size: 384, elements: !1680)
!1680 = !{!1681, !1682, !1683}
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !1679, file: !50, line: 1920, baseType: !1134, size: 256)
!1682 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !1679, file: !50, line: 1921, baseType: !666, size: 64, offset: 256)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1679, file: !50, line: 1922, baseType: !613, size: 32, offset: 320)
!1684 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_ctrl", scope: !597, file: !6, line: 748, baseType: !1685, size: 320)
!1685 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_ctrl", file: !6, line: 487, size: 320, elements: !1686)
!1686 = !{!1687, !1688}
!1687 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1685, file: !6, line: 490, baseType: !600, size: 256)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !1685, file: !6, line: 494, baseType: !746, size: 32, offset: 256)
!1689 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_try", scope: !597, file: !6, line: 749, baseType: !1690, size: 384)
!1690 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_try", file: !6, line: 500, size: 384, elements: !1691)
!1691 = !{!1692, !1693, !1694}
!1692 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1690, file: !6, line: 502, baseType: !600, size: 256)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "eval", scope: !1690, file: !6, line: 506, baseType: !645, size: 64, offset: 256)
!1694 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !1690, file: !6, line: 510, baseType: !645, size: 64, offset: 320)
!1695 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_wce", scope: !597, file: !6, line: 750, baseType: !1696, size: 320)
!1696 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_wce", file: !6, line: 529, size: 320, elements: !1697)
!1697 = !{!1698, !1699}
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1696, file: !6, line: 531, baseType: !600, size: 256)
!1699 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !1696, file: !6, line: 540, baseType: !645, size: 64, offset: 256)
!1700 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_asm", scope: !597, file: !6, line: 751, baseType: !1701, size: 704)
!1701 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_asm", file: !6, line: 546, size: 704, elements: !1702)
!1702 = !{!1703, !1704, !1705, !1706, !1707, !1708, !1709}
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1701, file: !6, line: 549, baseType: !1631, size: 512)
!1704 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1701, file: !6, line: 553, baseType: !1161, size: 64, offset: 512)
!1705 = !DIDerivedType(tag: DW_TAG_member, name: "ni", scope: !1701, file: !6, line: 557, baseType: !769, size: 8, offset: 576)
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !1701, file: !6, line: 558, baseType: !769, size: 8, offset: 584)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "nc", scope: !1701, file: !6, line: 559, baseType: !769, size: 8, offset: 592)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "nl", scope: !1701, file: !6, line: 560, baseType: !769, size: 8, offset: 600)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1701, file: !6, line: 566, baseType: !1028, size: 64, offset: 640)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_critical", scope: !597, file: !6, line: 752, baseType: !1711, size: 384)
!1711 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_critical", file: !6, line: 571, size: 384, elements: !1712)
!1712 = !{!1713, !1714}
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1711, file: !6, line: 573, baseType: !1642, size: 320)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1711, file: !6, line: 577, baseType: !666, size: 64, offset: 320)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_for", scope: !597, file: !6, line: 753, baseType: !1716, size: 576)
!1716 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_for", file: !6, line: 600, size: 576, elements: !1717)
!1717 = !{!1718, !1719, !1720, !1721, !1730}
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1716, file: !6, line: 602, baseType: !1642, size: 320)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1716, file: !6, line: 605, baseType: !666, size: 64, offset: 320)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "collapse", scope: !1716, file: !6, line: 609, baseType: !978, size: 64, offset: 384)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "iter", scope: !1716, file: !6, line: 612, baseType: !1722, size: 64, offset: 448)
!1722 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1723, size: 64)
!1723 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_omp_for_iter", file: !6, line: 581, size: 320, elements: !1724)
!1724 = !{!1725, !1726, !1727, !1728, !1729}
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !1723, file: !6, line: 583, baseType: !82, size: 32)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1723, file: !6, line: 586, baseType: !666, size: 64, offset: 64)
!1727 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1723, file: !6, line: 589, baseType: !666, size: 64, offset: 128)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "final", scope: !1723, file: !6, line: 592, baseType: !666, size: 64, offset: 192)
!1729 = !DIDerivedType(tag: DW_TAG_member, name: "incr", scope: !1723, file: !6, line: 595, baseType: !666, size: 64, offset: 256)
!1730 = !DIDerivedType(tag: DW_TAG_member, name: "pre_body", scope: !1716, file: !6, line: 616, baseType: !645, size: 64, offset: 512)
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_parallel", scope: !597, file: !6, line: 754, baseType: !1732, size: 512)
!1732 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_parallel", file: !6, line: 622, size: 512, elements: !1733)
!1733 = !{!1734, !1735, !1736, !1737}
!1734 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1732, file: !6, line: 624, baseType: !1642, size: 320)
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1732, file: !6, line: 628, baseType: !666, size: 64, offset: 320)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "child_fn", scope: !1732, file: !6, line: 632, baseType: !666, size: 64, offset: 384)
!1737 = !DIDerivedType(tag: DW_TAG_member, name: "data_arg", scope: !1732, file: !6, line: 636, baseType: !666, size: 64, offset: 448)
!1738 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_task", scope: !597, file: !6, line: 755, baseType: !1739, size: 704)
!1739 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_task", file: !6, line: 642, size: 704, elements: !1740)
!1740 = !{!1741, !1742, !1743, !1744}
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "par", scope: !1739, file: !6, line: 644, baseType: !1732, size: 512)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "copy_fn", scope: !1739, file: !6, line: 648, baseType: !666, size: 64, offset: 512)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "arg_size", scope: !1739, file: !6, line: 652, baseType: !666, size: 64, offset: 576)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "arg_align", scope: !1739, file: !6, line: 653, baseType: !666, size: 64, offset: 640)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_sections", scope: !597, file: !6, line: 756, baseType: !1746, size: 448)
!1746 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_sections", file: !6, line: 663, size: 448, elements: !1747)
!1747 = !{!1748, !1749, !1750}
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1746, file: !6, line: 665, baseType: !1642, size: 320)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1746, file: !6, line: 668, baseType: !666, size: 64, offset: 320)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !1746, file: !6, line: 673, baseType: !666, size: 64, offset: 384)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_single", scope: !597, file: !6, line: 757, baseType: !1752, size: 384)
!1752 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_single", file: !6, line: 694, size: 384, elements: !1753)
!1753 = !{!1754, !1755}
!1754 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1752, file: !6, line: 696, baseType: !1642, size: 320)
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1752, file: !6, line: 699, baseType: !666, size: 64, offset: 320)
!1756 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_continue", scope: !597, file: !6, line: 758, baseType: !1757, size: 384)
!1757 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_continue", file: !6, line: 681, size: 384, elements: !1758)
!1758 = !{!1759, !1760, !1761}
!1759 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1757, file: !6, line: 683, baseType: !600, size: 256)
!1760 = !DIDerivedType(tag: DW_TAG_member, name: "control_def", scope: !1757, file: !6, line: 686, baseType: !666, size: 64, offset: 256)
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "control_use", scope: !1757, file: !6, line: 689, baseType: !666, size: 64, offset: 320)
!1762 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_load", scope: !597, file: !6, line: 759, baseType: !1763, size: 384)
!1763 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_load", file: !6, line: 707, size: 384, elements: !1764)
!1764 = !{!1765, !1766, !1767}
!1765 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1763, file: !6, line: 709, baseType: !600, size: 256)
!1766 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !1763, file: !6, line: 712, baseType: !666, size: 64, offset: 256)
!1767 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !1763, file: !6, line: 712, baseType: !666, size: 64, offset: 320)
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_store", scope: !597, file: !6, line: 760, baseType: !1769, size: 320)
!1769 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_store", file: !6, line: 718, size: 320, elements: !1770)
!1770 = !{!1771, !1772}
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1769, file: !6, line: 720, baseType: !600, size: 256)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1769, file: !6, line: 723, baseType: !666, size: 64, offset: 256)
!1773 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1774, size: 64)
!1774 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !668)
!1775 = !DIDerivedType(tag: DW_TAG_typedef, name: "ptrdiff_t", file: !979, line: 35, baseType: !721)
!1776 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1161, size: 64)
!1777 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1778, size: 64)
!1778 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !597)
!1779 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1780, size: 64)
!1780 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_heap", file: !50, line: 184, baseType: !1781)
!1781 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_heap", file: !50, line: 184, size: 128, elements: !1782)
!1782 = !{!1783}
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1781, file: !50, line: 184, baseType: !1022, size: 128)
!1784 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_tree", file: !595, line: 59, baseType: !1773)
!1785 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1786, size: 64)
!1786 = !DISubroutineType(types: !1787)
!1787 = !{!664, !721}
!1788 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1789, size: 64)
!1789 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "sccs", file: !3, line: 3515, size: 128, elements: !1790)
!1790 = !{!1791, !1792, !1793, !1794}
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "dfsnum", scope: !1789, file: !3, line: 3517, baseType: !7, size: 32)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1789, file: !3, line: 3518, baseType: !7, size: 32, offset: 32)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "on_sccstack", scope: !1789, file: !3, line: 3519, baseType: !769, size: 8, offset: 64)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "hash", scope: !1789, file: !3, line: 3520, baseType: !962, size: 32, offset: 96)
!1795 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1796, size: 64)
!1796 = !DIDerivedType(tag: DW_TAG_typedef, name: "type_pair_t", file: !3, line: 3026, baseType: !1797)
!1797 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1798, size: 64)
!1798 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "type_pair_d", file: !3, line: 3020, size: 96, elements: !1799)
!1799 = !{!1800, !1801, !1802}
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "uid1", scope: !1798, file: !3, line: 3022, baseType: !7, size: 32)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "uid2", scope: !1798, file: !3, line: 3023, baseType: !7, size: 32, offset: 32)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "same_p", scope: !1798, file: !3, line: 3024, baseType: !746, size: 32, offset: 64)
!1803 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1804, size: 64)
!1804 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1798)
!1805 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1806, size: 64)
!1806 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "walk_stmt_info", file: !6, line: 4652, size: 448, elements: !1807)
!1807 = !{!1808, !1815, !1816, !1819, !1820, !1821, !1822, !1823}
!1808 = !DIDerivedType(tag: DW_TAG_member, name: "gsi", scope: !1806, file: !6, line: 4655, baseType: !1809, size: 192)
!1809 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_stmt_iterator", file: !6, line: 265, baseType: !1810)
!1810 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !6, line: 254, size: 192, elements: !1811)
!1811 = !{!1812, !1813, !1814}
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !1810, file: !6, line: 257, baseType: !650, size: 64)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !1810, file: !6, line: 263, baseType: !645, size: 64, offset: 64)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !1810, file: !6, line: 264, baseType: !919, size: 64, offset: 128)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "info", scope: !1806, file: !6, line: 4659, baseType: !664, size: 64, offset: 192)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "pset", scope: !1806, file: !6, line: 4664, baseType: !1817, size: 64, offset: 256)
!1817 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1818, size: 64)
!1818 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_set_t", file: !50, line: 5199, flags: DIFlagFwdDecl)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "val_only", scope: !1806, file: !6, line: 4678, baseType: !769, size: 8, offset: 320)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "is_lhs", scope: !1806, file: !6, line: 4681, baseType: !769, size: 8, offset: 328)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "changed", scope: !1806, file: !6, line: 4685, baseType: !769, size: 8, offset: 336)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "want_locations", scope: !1806, file: !6, line: 4688, baseType: !769, size: 8, offset: 344)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "callback_result", scope: !1806, file: !6, line: 4694, baseType: !666, size: 64, offset: 384)
!1824 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1825, size: 64)
!1825 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "count_ptr_d", file: !3, line: 4233, size: 128, elements: !1826)
!1826 = !{!1827, !1828, !1829}
!1827 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !1825, file: !3, line: 4235, baseType: !666, size: 64)
!1828 = !DIDerivedType(tag: DW_TAG_member, name: "num_stores", scope: !1825, file: !3, line: 4236, baseType: !7, size: 32, offset: 64)
!1829 = !DIDerivedType(tag: DW_TAG_member, name: "num_loads", scope: !1825, file: !3, line: 4237, baseType: !7, size: 32, offset: 96)
!1830 = !{!0, !1831, !1837, !1841, !1846, !1860, !1862, !1864, !1866, !1868, !1870, !1876}
!1831 = !DIGlobalVariableExpression(var: !1832, expr: !DIExpression())
!1832 = distinct !DIGlobalVariable(name: "gimple_code_name", scope: !2, file: !3, line: 69, type: !1833, isLocal: false, isDefinition: true)
!1833 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1834, size: 2240, elements: !1835)
!1834 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1161)
!1835 = !{!1836}
!1836 = !DISubrange(count: 35)
!1837 = !DIGlobalVariableExpression(var: !1838, expr: !DIExpression())
!1838 = distinct !DIGlobalVariable(name: "gss_for_code_", scope: !2, file: !3, line: 75, type: !1839, isLocal: false, isDefinition: true)
!1839 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1840, size: 1120, elements: !1835)
!1840 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !5)
!1841 = !DIGlobalVariableExpression(var: !1842, expr: !DIExpression())
!1842 = distinct !DIGlobalVariable(name: "gimple_rhs_class_table", scope: !2, file: !3, line: 2410, type: !1843, isLocal: false, isDefinition: true)
!1843 = !DICompositeType(tag: DW_TAG_array_type, baseType: !768, size: 1528, elements: !1844)
!1844 = !{!1845}
!1845 = !DISubrange(count: 191)
!1846 = !DIGlobalVariableExpression(var: !1847, expr: !DIExpression())
!1847 = distinct !DIGlobalVariable(name: "gt_ggc_rd_gt_gimple_h", scope: !2, file: !1848, line: 24, type: !1849, isLocal: false, isDefinition: true)
!1848 = !DIFile(filename: "./gt-gimple.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1849 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1850, size: 640, elements: !941)
!1850 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1851)
!1851 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ggc_root_tab", file: !1852, line: 69, size: 320, elements: !1853)
!1852 = !DIFile(filename: "./ggc.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1853 = !{!1854, !1855, !1856, !1857, !1859}
!1854 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1851, file: !1852, line: 70, baseType: !664, size: 64)
!1855 = !DIDerivedType(tag: DW_TAG_member, name: "nelt", scope: !1851, file: !1852, line: 71, baseType: !978, size: 64, offset: 64)
!1856 = !DIDerivedType(tag: DW_TAG_member, name: "stride", scope: !1851, file: !1852, line: 72, baseType: !978, size: 64, offset: 128)
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "cb", scope: !1851, file: !1852, line: 73, baseType: !1858, size: 64, offset: 192)
!1858 = !DIDerivedType(tag: DW_TAG_typedef, name: "gt_pointer_walker", file: !1852, line: 65, baseType: !972)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "pchw", scope: !1851, file: !1852, line: 74, baseType: !1858, size: 64, offset: 256)
!1860 = !DIGlobalVariableExpression(var: !1861, expr: !DIExpression())
!1861 = distinct !DIGlobalVariable(name: "gimple_types", scope: !2, file: !3, line: 44, type: !953, isLocal: true, isDefinition: true)
!1862 = !DIGlobalVariableExpression(var: !1863, expr: !DIExpression())
!1863 = distinct !DIGlobalVariable(name: "type_hash_cache", scope: !2, file: !3, line: 45, type: !1102, isLocal: true, isDefinition: true)
!1864 = !DIGlobalVariableExpression(var: !1865, expr: !DIExpression())
!1865 = distinct !DIGlobalVariable(name: "gtc_visited", scope: !2, file: !3, line: 48, type: !953, isLocal: true, isDefinition: true)
!1866 = !DIGlobalVariableExpression(var: !1867, expr: !DIExpression())
!1867 = distinct !DIGlobalVariable(name: "gtc_ob", scope: !2, file: !3, line: 49, type: !1068, isLocal: true, isDefinition: true)
!1868 = !DIGlobalVariableExpression(var: !1869, expr: !DIExpression())
!1869 = distinct !DIGlobalVariable(name: "gimple_seq_cache", scope: !2, file: !3, line: 99, type: !646, isLocal: true, isDefinition: true)
!1870 = !DIGlobalVariableExpression(var: !1871, expr: !DIExpression())
!1871 = distinct !DIGlobalVariable(name: "gsstruct_code_size", scope: !2, file: !3, line: 63, type: !1872, isLocal: true, isDefinition: true)
!1872 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1873, size: 1472, elements: !1874)
!1873 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !978)
!1874 = !{!1875}
!1875 = !DISubrange(count: 23)
!1876 = !DIGlobalVariableExpression(var: !1877, expr: !DIExpression())
!1877 = distinct !DIGlobalVariable(name: "next_dfs_num", scope: !2, file: !3, line: 3523, type: !7, isLocal: true, isDefinition: true)
!1878 = !{i32 7, !"Dwarf Version", i32 4}
!1879 = !{i32 2, !"Debug Info Version", i32 3}
!1880 = !{i32 1, !"wchar_size", i32 4}
!1881 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!1882 = distinct !DISubprogram(name: "gimple_alloc_stat", scope: !3, file: !3, line: 131, type: !1883, scopeLine: 132, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!1883 = !DISubroutineType(types: !1884)
!1884 = !{!594, !276, !7}
!1885 = !{}
!1886 = !DILocalVariable(name: "code", arg: 1, scope: !1882, file: !3, line: 131, type: !276)
!1887 = !DILocation(line: 131, column: 37, scope: !1882)
!1888 = !DILocalVariable(name: "num_ops", arg: 2, scope: !1882, file: !3, line: 131, type: !7)
!1889 = !DILocation(line: 131, column: 52, scope: !1882)
!1890 = !DILocalVariable(name: "size", scope: !1882, file: !3, line: 133, type: !978)
!1891 = !DILocation(line: 133, column: 10, scope: !1882)
!1892 = !DILocalVariable(name: "stmt", scope: !1882, file: !3, line: 134, type: !594)
!1893 = !DILocation(line: 134, column: 10, scope: !1882)
!1894 = !DILocation(line: 136, column: 23, scope: !1882)
!1895 = !DILocation(line: 136, column: 10, scope: !1882)
!1896 = !DILocation(line: 136, column: 8, scope: !1882)
!1897 = !DILocation(line: 137, column: 7, scope: !1898)
!1898 = distinct !DILexicalBlock(scope: !1882, file: !3, line: 137, column: 7)
!1899 = !DILocation(line: 137, column: 15, scope: !1898)
!1900 = !DILocation(line: 137, column: 7, scope: !1882)
!1901 = !DILocation(line: 138, column: 30, scope: !1898)
!1902 = !DILocation(line: 138, column: 38, scope: !1898)
!1903 = !DILocation(line: 138, column: 29, scope: !1898)
!1904 = !DILocation(line: 138, column: 27, scope: !1898)
!1905 = !DILocation(line: 138, column: 10, scope: !1898)
!1906 = !DILocation(line: 138, column: 5, scope: !1898)
!1907 = !DILocation(line: 148, column: 43, scope: !1882)
!1908 = !DILocation(line: 148, column: 19, scope: !1882)
!1909 = !DILocation(line: 148, column: 10, scope: !1882)
!1910 = !DILocation(line: 148, column: 8, scope: !1882)
!1911 = !DILocation(line: 149, column: 20, scope: !1882)
!1912 = !DILocation(line: 149, column: 26, scope: !1882)
!1913 = !DILocation(line: 149, column: 3, scope: !1882)
!1914 = !DILocation(line: 150, column: 23, scope: !1882)
!1915 = !DILocation(line: 150, column: 29, scope: !1882)
!1916 = !DILocation(line: 150, column: 3, scope: !1882)
!1917 = !DILocation(line: 154, column: 3, scope: !1882)
!1918 = !DILocation(line: 154, column: 9, scope: !1882)
!1919 = !DILocation(line: 154, column: 16, scope: !1882)
!1920 = !DILocation(line: 154, column: 25, scope: !1882)
!1921 = !DILocation(line: 156, column: 10, scope: !1882)
!1922 = !DILocation(line: 156, column: 3, scope: !1882)
!1923 = distinct !DISubprogram(name: "gimple_size", scope: !3, file: !3, line: 122, type: !1924, scopeLine: 123, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!1924 = !DISubroutineType(types: !1925)
!1925 = !{!978, !276}
!1926 = !DILocalVariable(name: "code", arg: 1, scope: !1923, file: !3, line: 122, type: !276)
!1927 = !DILocation(line: 122, column: 31, scope: !1923)
!1928 = !DILocation(line: 124, column: 43, scope: !1923)
!1929 = !DILocation(line: 124, column: 29, scope: !1923)
!1930 = !DILocation(line: 124, column: 10, scope: !1923)
!1931 = !DILocation(line: 124, column: 3, scope: !1923)
!1932 = distinct !DISubprogram(name: "gimple_set_code", scope: !3, file: !3, line: 113, type: !1933, scopeLine: 114, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!1933 = !DISubroutineType(types: !1934)
!1934 = !{null, !594, !276}
!1935 = !DILocalVariable(name: "g", arg: 1, scope: !1932, file: !3, line: 113, type: !594)
!1936 = !DILocation(line: 113, column: 25, scope: !1932)
!1937 = !DILocalVariable(name: "code", arg: 2, scope: !1932, file: !3, line: 113, type: !276)
!1938 = !DILocation(line: 113, column: 45, scope: !1932)
!1939 = !DILocation(line: 115, column: 20, scope: !1932)
!1940 = !DILocation(line: 115, column: 3, scope: !1932)
!1941 = !DILocation(line: 115, column: 6, scope: !1932)
!1942 = !DILocation(line: 115, column: 13, scope: !1932)
!1943 = !DILocation(line: 115, column: 18, scope: !1932)
!1944 = !DILocation(line: 116, column: 1, scope: !1932)
!1945 = distinct !DISubprogram(name: "gimple_set_num_ops", scope: !6, file: !6, line: 1605, type: !1946, scopeLine: 1606, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!1946 = !DISubroutineType(types: !1947)
!1947 = !{null, !594, !7}
!1948 = !DILocalVariable(name: "gs", arg: 1, scope: !1945, file: !6, line: 1605, type: !594)
!1949 = !DILocation(line: 1605, column: 28, scope: !1945)
!1950 = !DILocalVariable(name: "num_ops", arg: 2, scope: !1945, file: !6, line: 1605, type: !7)
!1951 = !DILocation(line: 1605, column: 41, scope: !1945)
!1952 = !DILocation(line: 1607, column: 24, scope: !1945)
!1953 = !DILocation(line: 1607, column: 3, scope: !1945)
!1954 = !DILocation(line: 1607, column: 7, scope: !1945)
!1955 = !DILocation(line: 1607, column: 14, scope: !1945)
!1956 = !DILocation(line: 1607, column: 22, scope: !1945)
!1957 = !DILocation(line: 1608, column: 1, scope: !1945)
!1958 = distinct !DISubprogram(name: "gimple_build_return", scope: !3, file: !3, line: 193, type: !1959, scopeLine: 194, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!1959 = !DISubroutineType(types: !1960)
!1960 = !{!594, !666}
!1961 = !DILocalVariable(name: "retval", arg: 1, scope: !1958, file: !3, line: 193, type: !666)
!1962 = !DILocation(line: 193, column: 27, scope: !1958)
!1963 = !DILocalVariable(name: "s", scope: !1958, file: !3, line: 195, type: !594)
!1964 = !DILocation(line: 195, column: 10, scope: !1958)
!1965 = !DILocation(line: 195, column: 14, scope: !1958)
!1966 = !DILocation(line: 196, column: 7, scope: !1967)
!1967 = distinct !DILexicalBlock(scope: !1958, file: !3, line: 196, column: 7)
!1968 = !DILocation(line: 196, column: 7, scope: !1958)
!1969 = !DILocation(line: 197, column: 31, scope: !1967)
!1970 = !DILocation(line: 197, column: 34, scope: !1967)
!1971 = !DILocation(line: 197, column: 5, scope: !1967)
!1972 = !DILocation(line: 198, column: 10, scope: !1958)
!1973 = !DILocation(line: 198, column: 3, scope: !1958)
!1974 = distinct !DISubprogram(name: "gimple_build_with_ops_stat", scope: !3, file: !3, line: 180, type: !1975, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!1975 = !DISubroutineType(types: !1976)
!1976 = !{!594, !276, !7, !7}
!1977 = !DILocalVariable(name: "code", arg: 1, scope: !1974, file: !3, line: 180, type: !276)
!1978 = !DILocation(line: 180, column: 46, scope: !1974)
!1979 = !DILocalVariable(name: "subcode", arg: 2, scope: !1974, file: !3, line: 180, type: !7)
!1980 = !DILocation(line: 180, column: 61, scope: !1974)
!1981 = !DILocalVariable(name: "num_ops", arg: 3, scope: !1974, file: !3, line: 181, type: !7)
!1982 = !DILocation(line: 181, column: 24, scope: !1974)
!1983 = !DILocalVariable(name: "s", scope: !1974, file: !3, line: 183, type: !594)
!1984 = !DILocation(line: 183, column: 10, scope: !1974)
!1985 = !DILocation(line: 183, column: 33, scope: !1974)
!1986 = !DILocation(line: 183, column: 39, scope: !1974)
!1987 = !DILocation(line: 183, column: 14, scope: !1974)
!1988 = !DILocation(line: 184, column: 23, scope: !1974)
!1989 = !DILocation(line: 184, column: 26, scope: !1974)
!1990 = !DILocation(line: 184, column: 3, scope: !1974)
!1991 = !DILocation(line: 186, column: 10, scope: !1974)
!1992 = !DILocation(line: 186, column: 3, scope: !1974)
!1993 = distinct !DISubprogram(name: "gimple_return_set_retval", scope: !6, file: !6, line: 4263, type: !1994, scopeLine: 4264, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!1994 = !DISubroutineType(types: !1995)
!1995 = !{null, !594, !666}
!1996 = !DILocalVariable(name: "gs", arg: 1, scope: !1993, file: !6, line: 4263, type: !594)
!1997 = !DILocation(line: 4263, column: 34, scope: !1993)
!1998 = !DILocalVariable(name: "retval", arg: 2, scope: !1993, file: !6, line: 4263, type: !666)
!1999 = !DILocation(line: 4263, column: 43, scope: !1993)
!2000 = !DILocation(line: 4266, column: 18, scope: !1993)
!2001 = !DILocation(line: 4266, column: 25, scope: !1993)
!2002 = !DILocation(line: 4266, column: 3, scope: !1993)
!2003 = !DILocation(line: 4267, column: 1, scope: !1993)
!2004 = distinct !DISubprogram(name: "gimple_build_call_vec", scope: !3, file: !3, line: 220, type: !2005, scopeLine: 221, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!2005 = !DISubroutineType(types: !2006)
!2006 = !{!594, !666, !1779}
!2007 = !DILocalVariable(name: "fn", arg: 1, scope: !2004, file: !3, line: 220, type: !666)
!2008 = !DILocation(line: 220, column: 29, scope: !2004)
!2009 = !DILocalVariable(name: "args", arg: 2, scope: !2004, file: !3, line: 220, type: !1779)
!2010 = !DILocation(line: 220, column: 50, scope: !2004)
!2011 = !DILocalVariable(name: "i", scope: !2004, file: !3, line: 222, type: !7)
!2012 = !DILocation(line: 222, column: 12, scope: !2004)
!2013 = !DILocalVariable(name: "nargs", scope: !2004, file: !3, line: 223, type: !7)
!2014 = !DILocation(line: 223, column: 12, scope: !2004)
!2015 = !DILocation(line: 223, column: 20, scope: !2004)
!2016 = !DILocalVariable(name: "call", scope: !2004, file: !3, line: 224, type: !594)
!2017 = !DILocation(line: 224, column: 10, scope: !2004)
!2018 = !DILocation(line: 224, column: 38, scope: !2004)
!2019 = !DILocation(line: 224, column: 42, scope: !2004)
!2020 = !DILocation(line: 224, column: 17, scope: !2004)
!2021 = !DILocation(line: 226, column: 10, scope: !2022)
!2022 = distinct !DILexicalBlock(scope: !2004, file: !3, line: 226, column: 3)
!2023 = !DILocation(line: 226, column: 8, scope: !2022)
!2024 = !DILocation(line: 226, column: 15, scope: !2025)
!2025 = distinct !DILexicalBlock(scope: !2022, file: !3, line: 226, column: 3)
!2026 = !DILocation(line: 226, column: 19, scope: !2025)
!2027 = !DILocation(line: 226, column: 17, scope: !2025)
!2028 = !DILocation(line: 226, column: 3, scope: !2022)
!2029 = !DILocation(line: 227, column: 26, scope: !2025)
!2030 = !DILocation(line: 227, column: 32, scope: !2025)
!2031 = !DILocation(line: 227, column: 35, scope: !2025)
!2032 = !DILocation(line: 227, column: 5, scope: !2025)
!2033 = !DILocation(line: 226, column: 27, scope: !2025)
!2034 = !DILocation(line: 226, column: 3, scope: !2025)
!2035 = distinct !{!2035, !2028, !2036}
!2036 = !DILocation(line: 227, column: 60, scope: !2022)
!2037 = !DILocation(line: 229, column: 10, scope: !2004)
!2038 = !DILocation(line: 229, column: 3, scope: !2004)
!2039 = distinct !DISubprogram(name: "VEC_tree_base_length", scope: !50, file: !50, line: 182, type: !2040, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!2040 = !DISubroutineType(types: !2041)
!2041 = !{!7, !2042}
!2042 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2043, size: 64)
!2043 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1022)
!2044 = !DILocalVariable(name: "vec_", arg: 1, scope: !2039, file: !50, line: 182, type: !2042)
!2045 = !DILocation(line: 182, column: 1, scope: !2039)
!2046 = distinct !DISubprogram(name: "gimple_build_call_1", scope: !3, file: !3, line: 206, type: !2047, scopeLine: 207, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!2047 = !DISubroutineType(types: !2048)
!2048 = !{!594, !666, !7}
!2049 = !DILocalVariable(name: "fn", arg: 1, scope: !2046, file: !3, line: 206, type: !666)
!2050 = !DILocation(line: 206, column: 27, scope: !2046)
!2051 = !DILocalVariable(name: "nargs", arg: 2, scope: !2046, file: !3, line: 206, type: !7)
!2052 = !DILocation(line: 206, column: 40, scope: !2046)
!2053 = !DILocalVariable(name: "s", scope: !2046, file: !3, line: 208, type: !594)
!2054 = !DILocation(line: 208, column: 10, scope: !2046)
!2055 = !DILocation(line: 208, column: 14, scope: !2046)
!2056 = !DILocation(line: 209, column: 7, scope: !2057)
!2057 = distinct !DILexicalBlock(scope: !2046, file: !3, line: 209, column: 7)
!2058 = !DILocation(line: 209, column: 22, scope: !2057)
!2059 = !DILocation(line: 209, column: 7, scope: !2046)
!2060 = !DILocation(line: 210, column: 10, scope: !2057)
!2061 = !DILocation(line: 210, column: 8, scope: !2057)
!2062 = !DILocation(line: 210, column: 5, scope: !2057)
!2063 = !DILocation(line: 211, column: 18, scope: !2046)
!2064 = !DILocation(line: 211, column: 24, scope: !2046)
!2065 = !DILocation(line: 211, column: 3, scope: !2046)
!2066 = !DILocation(line: 212, column: 10, scope: !2046)
!2067 = !DILocation(line: 212, column: 3, scope: !2046)
!2068 = distinct !DISubprogram(name: "gimple_call_set_arg", scope: !6, file: !6, line: 2046, type: !2069, scopeLine: 2047, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!2069 = !DISubroutineType(types: !2070)
!2070 = !{null, !594, !7, !666}
!2071 = !DILocalVariable(name: "gs", arg: 1, scope: !2068, file: !6, line: 2046, type: !594)
!2072 = !DILocation(line: 2046, column: 29, scope: !2068)
!2073 = !DILocalVariable(name: "index", arg: 2, scope: !2068, file: !6, line: 2046, type: !7)
!2074 = !DILocation(line: 2046, column: 42, scope: !2068)
!2075 = !DILocalVariable(name: "arg", arg: 3, scope: !2068, file: !6, line: 2046, type: !666)
!2076 = !DILocation(line: 2046, column: 54, scope: !2068)
!2077 = !DILocation(line: 2049, column: 18, scope: !2068)
!2078 = !DILocation(line: 2049, column: 22, scope: !2068)
!2079 = !DILocation(line: 2049, column: 28, scope: !2068)
!2080 = !DILocation(line: 2049, column: 33, scope: !2068)
!2081 = !DILocation(line: 2049, column: 3, scope: !2068)
!2082 = !DILocation(line: 2050, column: 1, scope: !2068)
!2083 = distinct !DISubprogram(name: "VEC_tree_base_index", scope: !50, file: !50, line: 182, type: !2084, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!2084 = !DISubroutineType(types: !2085)
!2085 = !{!666, !2042, !7}
!2086 = !DILocalVariable(name: "vec_", arg: 1, scope: !2083, file: !50, line: 182, type: !2042)
!2087 = !DILocation(line: 182, column: 1, scope: !2083)
!2088 = !DILocalVariable(name: "ix_", arg: 2, scope: !2083, file: !50, line: 182, type: !7)
!2089 = !DILocation(line: 0, scope: !2083)
!2090 = distinct !DISubprogram(name: "gimple_build_call", scope: !3, file: !3, line: 237, type: !2091, scopeLine: 238, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!2091 = !DISubroutineType(types: !2092)
!2092 = !{!594, !666, !7, null}
!2093 = !DILocalVariable(name: "fn", arg: 1, scope: !2090, file: !3, line: 237, type: !666)
!2094 = !DILocation(line: 237, column: 25, scope: !2090)
!2095 = !DILocalVariable(name: "nargs", arg: 2, scope: !2090, file: !3, line: 237, type: !7)
!2096 = !DILocation(line: 237, column: 38, scope: !2090)
!2097 = !DILocalVariable(name: "ap", scope: !2090, file: !3, line: 239, type: !2098)
!2098 = !DIDerivedType(tag: DW_TAG_typedef, name: "va_list", file: !2099, line: 52, baseType: !2100)
!2099 = !DIFile(filename: "/usr/include/stdio.h", directory: "")
!2100 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gnuc_va_list", file: !2101, line: 32, baseType: !2102)
!2101 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stdarg.h", directory: "/home/venkat/IF-DV")
!2102 = !DIDerivedType(tag: DW_TAG_typedef, name: "__builtin_va_list", file: !3, line: 239, baseType: !2103)
!2103 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2104, size: 192, elements: !750)
!2104 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !3, line: 239, size: 192, elements: !2105)
!2105 = !{!2106, !2107, !2108, !2109}
!2106 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !2104, file: !3, line: 239, baseType: !7, size: 32)
!2107 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !2104, file: !3, line: 239, baseType: !7, size: 32, offset: 32)
!2108 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !2104, file: !3, line: 239, baseType: !664, size: 64, offset: 64)
!2109 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !2104, file: !3, line: 239, baseType: !664, size: 64, offset: 128)
!2110 = !DILocation(line: 239, column: 11, scope: !2090)
!2111 = !DILocalVariable(name: "call", scope: !2090, file: !3, line: 240, type: !594)
!2112 = !DILocation(line: 240, column: 10, scope: !2090)
!2113 = !DILocalVariable(name: "i", scope: !2090, file: !3, line: 241, type: !7)
!2114 = !DILocation(line: 241, column: 12, scope: !2090)
!2115 = !DILocation(line: 243, column: 3, scope: !2090)
!2116 = !DILocation(line: 245, column: 31, scope: !2090)
!2117 = !DILocation(line: 245, column: 35, scope: !2090)
!2118 = !DILocation(line: 245, column: 10, scope: !2090)
!2119 = !DILocation(line: 245, column: 8, scope: !2090)
!2120 = !DILocation(line: 247, column: 3, scope: !2090)
!2121 = !DILocation(line: 248, column: 10, scope: !2122)
!2122 = distinct !DILexicalBlock(scope: !2090, file: !3, line: 248, column: 3)
!2123 = !DILocation(line: 248, column: 8, scope: !2122)
!2124 = !DILocation(line: 248, column: 15, scope: !2125)
!2125 = distinct !DILexicalBlock(scope: !2122, file: !3, line: 248, column: 3)
!2126 = !DILocation(line: 248, column: 19, scope: !2125)
!2127 = !DILocation(line: 248, column: 17, scope: !2125)
!2128 = !DILocation(line: 248, column: 3, scope: !2122)
!2129 = !DILocation(line: 249, column: 26, scope: !2125)
!2130 = !DILocation(line: 249, column: 32, scope: !2125)
!2131 = !DILocation(line: 249, column: 35, scope: !2125)
!2132 = !DILocation(line: 249, column: 5, scope: !2125)
!2133 = !DILocation(line: 248, column: 27, scope: !2125)
!2134 = !DILocation(line: 248, column: 3, scope: !2125)
!2135 = distinct !{!2135, !2128, !2136}
!2136 = !DILocation(line: 249, column: 52, scope: !2122)
!2137 = !DILocation(line: 250, column: 3, scope: !2090)
!2138 = !DILocation(line: 252, column: 10, scope: !2090)
!2139 = !DILocation(line: 252, column: 3, scope: !2090)
!2140 = distinct !DISubprogram(name: "is_gimple_call_addr", scope: !3, file: !3, line: 2825, type: !2141, scopeLine: 2826, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!2141 = !DISubroutineType(types: !2142)
!2142 = !{!769, !666}
!2143 = !DILocalVariable(name: "t", arg: 1, scope: !2140, file: !3, line: 2825, type: !666)
!2144 = !DILocation(line: 2825, column: 27, scope: !2140)
!2145 = !DILocation(line: 2827, column: 11, scope: !2140)
!2146 = !DILocation(line: 2827, column: 25, scope: !2140)
!2147 = !DILocation(line: 2827, column: 41, scope: !2140)
!2148 = !DILocation(line: 2827, column: 59, scope: !2140)
!2149 = !DILocation(line: 2827, column: 44, scope: !2140)
!2150 = !DILocation(line: 2827, column: 10, scope: !2140)
!2151 = !DILocation(line: 2827, column: 3, scope: !2140)
!2152 = distinct !DISubprogram(name: "gimple_build_call_from_tree", scope: !3, file: !3, line: 261, type: !1959, scopeLine: 262, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!2153 = !DILocalVariable(name: "t", arg: 1, scope: !2152, file: !3, line: 261, type: !666)
!2154 = !DILocation(line: 261, column: 35, scope: !2152)
!2155 = !DILocalVariable(name: "i", scope: !2152, file: !3, line: 263, type: !7)
!2156 = !DILocation(line: 263, column: 12, scope: !2152)
!2157 = !DILocalVariable(name: "nargs", scope: !2152, file: !3, line: 263, type: !7)
!2158 = !DILocation(line: 263, column: 15, scope: !2152)
!2159 = !DILocalVariable(name: "call", scope: !2152, file: !3, line: 264, type: !594)
!2160 = !DILocation(line: 264, column: 10, scope: !2152)
!2161 = !DILocalVariable(name: "fndecl", scope: !2152, file: !3, line: 265, type: !666)
!2162 = !DILocation(line: 265, column: 8, scope: !2152)
!2163 = !DILocation(line: 265, column: 36, scope: !2152)
!2164 = !DILocation(line: 265, column: 17, scope: !2152)
!2165 = !DILocation(line: 267, column: 3, scope: !2152)
!2166 = !DILocation(line: 269, column: 11, scope: !2152)
!2167 = !DILocation(line: 269, column: 9, scope: !2152)
!2168 = !DILocation(line: 270, column: 31, scope: !2152)
!2169 = !DILocation(line: 270, column: 40, scope: !2152)
!2170 = !DILocation(line: 270, column: 49, scope: !2152)
!2171 = !DILocation(line: 270, column: 67, scope: !2152)
!2172 = !DILocation(line: 270, column: 10, scope: !2152)
!2173 = !DILocation(line: 270, column: 8, scope: !2152)
!2174 = !DILocation(line: 272, column: 10, scope: !2175)
!2175 = distinct !DILexicalBlock(scope: !2152, file: !3, line: 272, column: 3)
!2176 = !DILocation(line: 272, column: 8, scope: !2175)
!2177 = !DILocation(line: 272, column: 15, scope: !2178)
!2178 = distinct !DILexicalBlock(scope: !2175, file: !3, line: 272, column: 3)
!2179 = !DILocation(line: 272, column: 19, scope: !2178)
!2180 = !DILocation(line: 272, column: 17, scope: !2178)
!2181 = !DILocation(line: 272, column: 3, scope: !2175)
!2182 = !DILocation(line: 273, column: 26, scope: !2178)
!2183 = !DILocation(line: 273, column: 32, scope: !2178)
!2184 = !DILocation(line: 273, column: 35, scope: !2178)
!2185 = !DILocation(line: 273, column: 5, scope: !2178)
!2186 = !DILocation(line: 272, column: 27, scope: !2178)
!2187 = !DILocation(line: 272, column: 3, scope: !2178)
!2188 = distinct !{!2188, !2181, !2189}
!2189 = !DILocation(line: 273, column: 55, scope: !2175)
!2190 = !DILocation(line: 275, column: 21, scope: !2152)
!2191 = !DILocation(line: 275, column: 27, scope: !2152)
!2192 = !DILocation(line: 275, column: 3, scope: !2152)
!2193 = !DILocation(line: 278, column: 26, scope: !2152)
!2194 = !DILocation(line: 278, column: 32, scope: !2152)
!2195 = !DILocation(line: 278, column: 3, scope: !2152)
!2196 = !DILocation(line: 279, column: 25, scope: !2152)
!2197 = !DILocation(line: 279, column: 31, scope: !2152)
!2198 = !DILocation(line: 279, column: 3, scope: !2152)
!2199 = !DILocation(line: 280, column: 34, scope: !2152)
!2200 = !DILocation(line: 280, column: 40, scope: !2152)
!2201 = !DILocation(line: 280, column: 3, scope: !2152)
!2202 = !DILocation(line: 281, column: 36, scope: !2152)
!2203 = !DILocation(line: 281, column: 42, scope: !2152)
!2204 = !DILocation(line: 281, column: 3, scope: !2152)
!2205 = !DILocation(line: 282, column: 31, scope: !2152)
!2206 = !DILocation(line: 282, column: 37, scope: !2152)
!2207 = !DILocation(line: 282, column: 3, scope: !2152)
!2208 = !DILocation(line: 283, column: 32, scope: !2152)
!2209 = !DILocation(line: 283, column: 38, scope: !2152)
!2210 = !DILocation(line: 283, column: 3, scope: !2152)
!2211 = !DILocation(line: 284, column: 26, scope: !2152)
!2212 = !DILocation(line: 284, column: 32, scope: !2152)
!2213 = !DILocation(line: 284, column: 3, scope: !2152)
!2214 = !DILocation(line: 286, column: 10, scope: !2152)
!2215 = !DILocation(line: 286, column: 3, scope: !2152)
!2216 = distinct !DISubprogram(name: "gimple_set_block", scope: !6, file: !6, line: 1130, type: !1994, scopeLine: 1131, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!2217 = !DILocalVariable(name: "g", arg: 1, scope: !2216, file: !6, line: 1130, type: !594)
!2218 = !DILocation(line: 1130, column: 26, scope: !2216)
!2219 = !DILocalVariable(name: "block", arg: 2, scope: !2216, file: !6, line: 1130, type: !666)
!2220 = !DILocation(line: 1130, column: 34, scope: !2216)
!2221 = !DILocation(line: 1132, column: 21, scope: !2216)
!2222 = !DILocation(line: 1132, column: 3, scope: !2216)
!2223 = !DILocation(line: 1132, column: 6, scope: !2216)
!2224 = !DILocation(line: 1132, column: 13, scope: !2216)
!2225 = !DILocation(line: 1132, column: 19, scope: !2216)
!2226 = !DILocation(line: 1133, column: 1, scope: !2216)
!2227 = distinct !DISubprogram(name: "gimple_call_set_chain", scope: !6, file: !6, line: 2002, type: !1994, scopeLine: 2003, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!2228 = !DILocalVariable(name: "gs", arg: 1, scope: !2227, file: !6, line: 2002, type: !594)
!2229 = !DILocation(line: 2002, column: 31, scope: !2227)
!2230 = !DILocalVariable(name: "chain", arg: 2, scope: !2227, file: !6, line: 2002, type: !666)
!2231 = !DILocation(line: 2002, column: 40, scope: !2227)
!2232 = !DILocation(line: 2006, column: 18, scope: !2227)
!2233 = !DILocation(line: 2006, column: 25, scope: !2227)
!2234 = !DILocation(line: 2006, column: 3, scope: !2227)
!2235 = !DILocation(line: 2007, column: 1, scope: !2227)
!2236 = distinct !DISubprogram(name: "gimple_call_set_tail", scope: !6, file: !6, line: 2058, type: !2237, scopeLine: 2059, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!2237 = !DISubroutineType(types: !2238)
!2238 = !{null, !594, !769}
!2239 = !DILocalVariable(name: "s", arg: 1, scope: !2236, file: !6, line: 2058, type: !594)
!2240 = !DILocation(line: 2058, column: 30, scope: !2236)
!2241 = !DILocalVariable(name: "tail_p", arg: 2, scope: !2236, file: !6, line: 2058, type: !769)
!2242 = !DILocation(line: 2058, column: 38, scope: !2236)
!2243 = !DILocation(line: 2061, column: 7, scope: !2244)
!2244 = distinct !DILexicalBlock(scope: !2236, file: !6, line: 2061, column: 7)
!2245 = !DILocation(line: 2061, column: 7, scope: !2236)
!2246 = !DILocation(line: 2062, column: 5, scope: !2244)
!2247 = !DILocation(line: 2062, column: 8, scope: !2244)
!2248 = !DILocation(line: 2062, column: 15, scope: !2244)
!2249 = !DILocation(line: 2062, column: 23, scope: !2244)
!2250 = !DILocation(line: 2064, column: 5, scope: !2244)
!2251 = !DILocation(line: 2064, column: 8, scope: !2244)
!2252 = !DILocation(line: 2064, column: 15, scope: !2244)
!2253 = !DILocation(line: 2064, column: 23, scope: !2244)
!2254 = !DILocation(line: 2065, column: 1, scope: !2236)
!2255 = distinct !DISubprogram(name: "gimple_call_set_cannot_inline", scope: !6, file: !6, line: 2081, type: !2237, scopeLine: 2082, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!2256 = !DILocalVariable(name: "s", arg: 1, scope: !2255, file: !6, line: 2081, type: !594)
!2257 = !DILocation(line: 2081, column: 39, scope: !2255)
!2258 = !DILocalVariable(name: "inlinable_p", arg: 2, scope: !2255, file: !6, line: 2081, type: !769)
!2259 = !DILocation(line: 2081, column: 47, scope: !2255)
!2260 = !DILocation(line: 2084, column: 7, scope: !2261)
!2261 = distinct !DILexicalBlock(scope: !2255, file: !6, line: 2084, column: 7)
!2262 = !DILocation(line: 2084, column: 7, scope: !2255)
!2263 = !DILocation(line: 2085, column: 5, scope: !2261)
!2264 = !DILocation(line: 2085, column: 8, scope: !2261)
!2265 = !DILocation(line: 2085, column: 15, scope: !2261)
!2266 = !DILocation(line: 2085, column: 23, scope: !2261)
!2267 = !DILocation(line: 2087, column: 5, scope: !2261)
!2268 = !DILocation(line: 2087, column: 8, scope: !2261)
!2269 = !DILocation(line: 2087, column: 15, scope: !2261)
!2270 = !DILocation(line: 2087, column: 23, scope: !2261)
!2271 = !DILocation(line: 2088, column: 1, scope: !2255)
!2272 = distinct !DISubprogram(name: "gimple_call_set_return_slot_opt", scope: !6, file: !6, line: 2106, type: !2237, scopeLine: 2107, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!2273 = !DILocalVariable(name: "s", arg: 1, scope: !2272, file: !6, line: 2106, type: !594)
!2274 = !DILocation(line: 2106, column: 41, scope: !2272)
!2275 = !DILocalVariable(name: "return_slot_opt_p", arg: 2, scope: !2272, file: !6, line: 2106, type: !769)
!2276 = !DILocation(line: 2106, column: 49, scope: !2272)
!2277 = !DILocation(line: 2109, column: 7, scope: !2278)
!2278 = distinct !DILexicalBlock(scope: !2272, file: !6, line: 2109, column: 7)
!2279 = !DILocation(line: 2109, column: 7, scope: !2272)
!2280 = !DILocation(line: 2110, column: 5, scope: !2278)
!2281 = !DILocation(line: 2110, column: 8, scope: !2278)
!2282 = !DILocation(line: 2110, column: 15, scope: !2278)
!2283 = !DILocation(line: 2110, column: 23, scope: !2278)
!2284 = !DILocation(line: 2112, column: 5, scope: !2278)
!2285 = !DILocation(line: 2112, column: 8, scope: !2278)
!2286 = !DILocation(line: 2112, column: 15, scope: !2278)
!2287 = !DILocation(line: 2112, column: 23, scope: !2278)
!2288 = !DILocation(line: 2113, column: 1, scope: !2272)
!2289 = distinct !DISubprogram(name: "gimple_call_set_from_thunk", scope: !6, file: !6, line: 2130, type: !2237, scopeLine: 2131, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!2290 = !DILocalVariable(name: "s", arg: 1, scope: !2289, file: !6, line: 2130, type: !594)
!2291 = !DILocation(line: 2130, column: 36, scope: !2289)
!2292 = !DILocalVariable(name: "from_thunk_p", arg: 2, scope: !2289, file: !6, line: 2130, type: !769)
!2293 = !DILocation(line: 2130, column: 44, scope: !2289)
!2294 = !DILocation(line: 2133, column: 7, scope: !2295)
!2295 = distinct !DILexicalBlock(scope: !2289, file: !6, line: 2133, column: 7)
!2296 = !DILocation(line: 2133, column: 7, scope: !2289)
!2297 = !DILocation(line: 2134, column: 5, scope: !2295)
!2298 = !DILocation(line: 2134, column: 8, scope: !2295)
!2299 = !DILocation(line: 2134, column: 15, scope: !2295)
!2300 = !DILocation(line: 2134, column: 23, scope: !2295)
!2301 = !DILocation(line: 2136, column: 5, scope: !2295)
!2302 = !DILocation(line: 2136, column: 8, scope: !2295)
!2303 = !DILocation(line: 2136, column: 15, scope: !2295)
!2304 = !DILocation(line: 2136, column: 23, scope: !2295)
!2305 = !DILocation(line: 2137, column: 1, scope: !2289)
!2306 = distinct !DISubprogram(name: "gimple_call_set_va_arg_pack", scope: !6, file: !6, line: 2154, type: !2237, scopeLine: 2155, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!2307 = !DILocalVariable(name: "s", arg: 1, scope: !2306, file: !6, line: 2154, type: !594)
!2308 = !DILocation(line: 2154, column: 37, scope: !2306)
!2309 = !DILocalVariable(name: "pass_arg_pack_p", arg: 2, scope: !2306, file: !6, line: 2154, type: !769)
!2310 = !DILocation(line: 2154, column: 45, scope: !2306)
!2311 = !DILocation(line: 2157, column: 7, scope: !2312)
!2312 = distinct !DILexicalBlock(scope: !2306, file: !6, line: 2157, column: 7)
!2313 = !DILocation(line: 2157, column: 7, scope: !2306)
!2314 = !DILocation(line: 2158, column: 5, scope: !2312)
!2315 = !DILocation(line: 2158, column: 8, scope: !2312)
!2316 = !DILocation(line: 2158, column: 15, scope: !2312)
!2317 = !DILocation(line: 2158, column: 23, scope: !2312)
!2318 = !DILocation(line: 2160, column: 5, scope: !2312)
!2319 = !DILocation(line: 2160, column: 8, scope: !2312)
!2320 = !DILocation(line: 2160, column: 15, scope: !2312)
!2321 = !DILocation(line: 2160, column: 23, scope: !2312)
!2322 = !DILocation(line: 2161, column: 1, scope: !2306)
!2323 = distinct !DISubprogram(name: "gimple_set_no_warning", scope: !6, file: !6, line: 1209, type: !2237, scopeLine: 1210, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!2324 = !DILocalVariable(name: "stmt", arg: 1, scope: !2323, file: !6, line: 1209, type: !594)
!2325 = !DILocation(line: 1209, column: 31, scope: !2323)
!2326 = !DILocalVariable(name: "no_warning", arg: 2, scope: !2323, file: !6, line: 1209, type: !769)
!2327 = !DILocation(line: 1209, column: 42, scope: !2323)
!2328 = !DILocation(line: 1211, column: 40, scope: !2323)
!2329 = !DILocation(line: 1211, column: 29, scope: !2323)
!2330 = !DILocation(line: 1211, column: 3, scope: !2323)
!2331 = !DILocation(line: 1211, column: 9, scope: !2323)
!2332 = !DILocation(line: 1211, column: 16, scope: !2323)
!2333 = !DILocation(line: 1211, column: 27, scope: !2323)
!2334 = !DILocation(line: 1212, column: 1, scope: !2323)
!2335 = distinct !DISubprogram(name: "extract_ops_from_tree", scope: !3, file: !3, line: 294, type: !2336, scopeLine: 296, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!2336 = !DISubroutineType(types: !2337)
!2337 = !{null, !666, !2338, !1127, !1127}
!2338 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !82, size: 64)
!2339 = !DILocalVariable(name: "expr", arg: 1, scope: !2335, file: !3, line: 294, type: !666)
!2340 = !DILocation(line: 294, column: 29, scope: !2335)
!2341 = !DILocalVariable(name: "subcode_p", arg: 2, scope: !2335, file: !3, line: 294, type: !2338)
!2342 = !DILocation(line: 294, column: 51, scope: !2335)
!2343 = !DILocalVariable(name: "op1_p", arg: 3, scope: !2335, file: !3, line: 294, type: !1127)
!2344 = !DILocation(line: 294, column: 68, scope: !2335)
!2345 = !DILocalVariable(name: "op2_p", arg: 4, scope: !2335, file: !3, line: 295, type: !1127)
!2346 = !DILocation(line: 295, column: 16, scope: !2335)
!2347 = !DILocalVariable(name: "grhs_class", scope: !2335, file: !3, line: 297, type: !314)
!2348 = !DILocation(line: 297, column: 25, scope: !2335)
!2349 = !DILocation(line: 299, column: 16, scope: !2335)
!2350 = !DILocation(line: 299, column: 4, scope: !2335)
!2351 = !DILocation(line: 299, column: 14, scope: !2335)
!2352 = !DILocation(line: 300, column: 39, scope: !2335)
!2353 = !DILocation(line: 300, column: 38, scope: !2335)
!2354 = !DILocation(line: 300, column: 16, scope: !2335)
!2355 = !DILocation(line: 300, column: 14, scope: !2335)
!2356 = !DILocation(line: 302, column: 7, scope: !2357)
!2357 = distinct !DILexicalBlock(scope: !2335, file: !3, line: 302, column: 7)
!2358 = !DILocation(line: 302, column: 18, scope: !2357)
!2359 = !DILocation(line: 302, column: 7, scope: !2335)
!2360 = !DILocation(line: 304, column: 16, scope: !2361)
!2361 = distinct !DILexicalBlock(scope: !2357, file: !3, line: 303, column: 5)
!2362 = !DILocation(line: 304, column: 8, scope: !2361)
!2363 = !DILocation(line: 304, column: 14, scope: !2361)
!2364 = !DILocation(line: 305, column: 16, scope: !2361)
!2365 = !DILocation(line: 305, column: 8, scope: !2361)
!2366 = !DILocation(line: 305, column: 14, scope: !2361)
!2367 = !DILocation(line: 306, column: 5, scope: !2361)
!2368 = !DILocation(line: 307, column: 12, scope: !2369)
!2369 = distinct !DILexicalBlock(scope: !2357, file: !3, line: 307, column: 12)
!2370 = !DILocation(line: 307, column: 23, scope: !2369)
!2371 = !DILocation(line: 307, column: 12, scope: !2357)
!2372 = !DILocation(line: 309, column: 16, scope: !2373)
!2373 = distinct !DILexicalBlock(scope: !2369, file: !3, line: 308, column: 5)
!2374 = !DILocation(line: 309, column: 8, scope: !2373)
!2375 = !DILocation(line: 309, column: 14, scope: !2373)
!2376 = !DILocation(line: 310, column: 8, scope: !2373)
!2377 = !DILocation(line: 310, column: 14, scope: !2373)
!2378 = !DILocation(line: 311, column: 5, scope: !2373)
!2379 = !DILocation(line: 312, column: 12, scope: !2380)
!2380 = distinct !DILexicalBlock(scope: !2369, file: !3, line: 312, column: 12)
!2381 = !DILocation(line: 312, column: 23, scope: !2380)
!2382 = !DILocation(line: 312, column: 12, scope: !2369)
!2383 = !DILocation(line: 314, column: 16, scope: !2384)
!2384 = distinct !DILexicalBlock(scope: !2380, file: !3, line: 313, column: 5)
!2385 = !DILocation(line: 314, column: 8, scope: !2384)
!2386 = !DILocation(line: 314, column: 14, scope: !2384)
!2387 = !DILocation(line: 315, column: 8, scope: !2384)
!2388 = !DILocation(line: 315, column: 14, scope: !2384)
!2389 = !DILocation(line: 316, column: 5, scope: !2384)
!2390 = !DILocation(line: 318, column: 5, scope: !2380)
!2391 = !DILocation(line: 319, column: 1, scope: !2335)
!2392 = distinct !DISubprogram(name: "get_gimple_rhs_class", scope: !6, file: !6, line: 1686, type: !2393, scopeLine: 1687, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!2393 = !DISubroutineType(types: !2394)
!2394 = !{!314, !82}
!2395 = !DILocalVariable(name: "code", arg: 1, scope: !2392, file: !6, line: 1686, type: !82)
!2396 = !DILocation(line: 1686, column: 38, scope: !2392)
!2397 = !DILocation(line: 1688, column: 63, scope: !2392)
!2398 = !DILocation(line: 1688, column: 34, scope: !2392)
!2399 = !DILocation(line: 1688, column: 10, scope: !2392)
!2400 = !DILocation(line: 1688, column: 3, scope: !2392)
!2401 = distinct !DISubprogram(name: "gimple_build_assign_stat", scope: !3, file: !3, line: 328, type: !2402, scopeLine: 329, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!2402 = !DISubroutineType(types: !2403)
!2403 = !{!594, !666, !666}
!2404 = !DILocalVariable(name: "lhs", arg: 1, scope: !2401, file: !3, line: 328, type: !666)
!2405 = !DILocation(line: 328, column: 32, scope: !2401)
!2406 = !DILocalVariable(name: "rhs", arg: 2, scope: !2401, file: !3, line: 328, type: !666)
!2407 = !DILocation(line: 328, column: 42, scope: !2401)
!2408 = !DILocalVariable(name: "subcode", scope: !2401, file: !3, line: 330, type: !82)
!2409 = !DILocation(line: 330, column: 18, scope: !2401)
!2410 = !DILocalVariable(name: "op1", scope: !2401, file: !3, line: 331, type: !666)
!2411 = !DILocation(line: 331, column: 8, scope: !2401)
!2412 = !DILocalVariable(name: "op2", scope: !2401, file: !3, line: 331, type: !666)
!2413 = !DILocation(line: 331, column: 13, scope: !2401)
!2414 = !DILocation(line: 333, column: 26, scope: !2401)
!2415 = !DILocation(line: 333, column: 3, scope: !2401)
!2416 = !DILocation(line: 334, column: 45, scope: !2401)
!2417 = !DILocation(line: 334, column: 54, scope: !2401)
!2418 = !DILocation(line: 334, column: 59, scope: !2401)
!2419 = !DILocation(line: 334, column: 64, scope: !2401)
!2420 = !DILocation(line: 334, column: 10, scope: !2401)
!2421 = !DILocation(line: 334, column: 3, scope: !2401)
!2422 = distinct !DISubprogram(name: "gimple_build_assign_with_ops_stat", scope: !3, file: !3, line: 344, type: !2423, scopeLine: 346, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!2423 = !DISubroutineType(types: !2424)
!2424 = !{!594, !82, !666, !666, !666}
!2425 = !DILocalVariable(name: "subcode", arg: 1, scope: !2422, file: !3, line: 344, type: !82)
!2426 = !DILocation(line: 344, column: 51, scope: !2422)
!2427 = !DILocalVariable(name: "lhs", arg: 2, scope: !2422, file: !3, line: 344, type: !666)
!2428 = !DILocation(line: 344, column: 65, scope: !2422)
!2429 = !DILocalVariable(name: "op1", arg: 3, scope: !2422, file: !3, line: 344, type: !666)
!2430 = !DILocation(line: 344, column: 75, scope: !2422)
!2431 = !DILocalVariable(name: "op2", arg: 4, scope: !2422, file: !3, line: 345, type: !666)
!2432 = !DILocation(line: 345, column: 41, scope: !2422)
!2433 = !DILocalVariable(name: "num_ops", scope: !2422, file: !3, line: 347, type: !7)
!2434 = !DILocation(line: 347, column: 12, scope: !2422)
!2435 = !DILocalVariable(name: "p", scope: !2422, file: !3, line: 348, type: !594)
!2436 = !DILocation(line: 348, column: 10, scope: !2422)
!2437 = !DILocation(line: 352, column: 37, scope: !2422)
!2438 = !DILocation(line: 352, column: 13, scope: !2422)
!2439 = !DILocation(line: 352, column: 46, scope: !2422)
!2440 = !DILocation(line: 352, column: 11, scope: !2422)
!2441 = !DILocation(line: 354, column: 60, scope: !2422)
!2442 = !DILocation(line: 354, column: 69, scope: !2422)
!2443 = !DILocation(line: 354, column: 7, scope: !2422)
!2444 = !DILocation(line: 354, column: 5, scope: !2422)
!2445 = !DILocation(line: 356, column: 26, scope: !2422)
!2446 = !DILocation(line: 356, column: 29, scope: !2422)
!2447 = !DILocation(line: 356, column: 3, scope: !2422)
!2448 = !DILocation(line: 357, column: 27, scope: !2422)
!2449 = !DILocation(line: 357, column: 30, scope: !2422)
!2450 = !DILocation(line: 357, column: 3, scope: !2422)
!2451 = !DILocation(line: 358, column: 7, scope: !2452)
!2452 = distinct !DILexicalBlock(scope: !2422, file: !3, line: 358, column: 7)
!2453 = !DILocation(line: 358, column: 7, scope: !2422)
!2454 = !DILocation(line: 360, column: 7, scope: !2455)
!2455 = distinct !DILexicalBlock(scope: !2452, file: !3, line: 359, column: 5)
!2456 = !DILocation(line: 361, column: 31, scope: !2455)
!2457 = !DILocation(line: 361, column: 34, scope: !2455)
!2458 = !DILocation(line: 361, column: 7, scope: !2455)
!2459 = !DILocation(line: 362, column: 5, scope: !2455)
!2460 = !DILocation(line: 364, column: 10, scope: !2422)
!2461 = !DILocation(line: 364, column: 3, scope: !2422)
!2462 = distinct !DISubprogram(name: "get_gimple_rhs_num_ops", scope: !3, file: !3, line: 2369, type: !2463, scopeLine: 2370, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!2463 = !DISubroutineType(types: !2464)
!2464 = !{!7, !82}
!2465 = !DILocalVariable(name: "code", arg: 1, scope: !2462, file: !3, line: 2369, type: !82)
!2466 = !DILocation(line: 2369, column: 40, scope: !2462)
!2467 = !DILocalVariable(name: "rhs_class", scope: !2462, file: !3, line: 2371, type: !314)
!2468 = !DILocation(line: 2371, column: 25, scope: !2462)
!2469 = !DILocation(line: 2371, column: 59, scope: !2462)
!2470 = !DILocation(line: 2371, column: 37, scope: !2462)
!2471 = !DILocation(line: 2373, column: 7, scope: !2472)
!2472 = distinct !DILexicalBlock(scope: !2462, file: !3, line: 2373, column: 7)
!2473 = !DILocation(line: 2373, column: 17, scope: !2472)
!2474 = !DILocation(line: 2373, column: 37, scope: !2472)
!2475 = !DILocation(line: 2373, column: 40, scope: !2472)
!2476 = !DILocation(line: 2373, column: 50, scope: !2472)
!2477 = !DILocation(line: 2373, column: 7, scope: !2462)
!2478 = !DILocation(line: 2374, column: 5, scope: !2472)
!2479 = !DILocation(line: 2375, column: 12, scope: !2480)
!2480 = distinct !DILexicalBlock(scope: !2472, file: !3, line: 2375, column: 12)
!2481 = !DILocation(line: 2375, column: 22, scope: !2480)
!2482 = !DILocation(line: 2375, column: 12, scope: !2472)
!2483 = !DILocation(line: 2376, column: 5, scope: !2480)
!2484 = !DILocation(line: 2378, column: 5, scope: !2480)
!2485 = !DILocation(line: 2380, column: 5, scope: !2462)
!2486 = !DILocation(line: 2382, column: 1, scope: !2462)
!2487 = distinct !DISubprogram(name: "gimple_assign_set_lhs", scope: !6, file: !6, line: 1714, type: !1994, scopeLine: 1715, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!2488 = !DILocalVariable(name: "gs", arg: 1, scope: !2487, file: !6, line: 1714, type: !594)
!2489 = !DILocation(line: 1714, column: 31, scope: !2487)
!2490 = !DILocalVariable(name: "lhs", arg: 2, scope: !2487, file: !6, line: 1714, type: !666)
!2491 = !DILocation(line: 1714, column: 40, scope: !2487)
!2492 = !DILocation(line: 1717, column: 18, scope: !2487)
!2493 = !DILocation(line: 1717, column: 25, scope: !2487)
!2494 = !DILocation(line: 1717, column: 3, scope: !2487)
!2495 = !DILocation(line: 1719, column: 7, scope: !2496)
!2496 = distinct !DILexicalBlock(scope: !2487, file: !6, line: 1719, column: 7)
!2497 = !DILocation(line: 1719, column: 11, scope: !2496)
!2498 = !DILocation(line: 1719, column: 14, scope: !2496)
!2499 = !DILocation(line: 1719, column: 30, scope: !2496)
!2500 = !DILocation(line: 1719, column: 7, scope: !2487)
!2501 = !DILocation(line: 1720, column: 31, scope: !2496)
!2502 = !DILocation(line: 1720, column: 5, scope: !2496)
!2503 = !DILocation(line: 1720, column: 29, scope: !2496)
!2504 = !DILocation(line: 1721, column: 1, scope: !2487)
!2505 = distinct !DISubprogram(name: "gimple_assign_set_rhs1", scope: !6, file: !6, line: 1747, type: !1994, scopeLine: 1748, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!2506 = !DILocalVariable(name: "gs", arg: 1, scope: !2505, file: !6, line: 1747, type: !594)
!2507 = !DILocation(line: 1747, column: 32, scope: !2505)
!2508 = !DILocalVariable(name: "rhs", arg: 2, scope: !2505, file: !6, line: 1747, type: !666)
!2509 = !DILocation(line: 1747, column: 41, scope: !2505)
!2510 = !DILocation(line: 1751, column: 18, scope: !2505)
!2511 = !DILocation(line: 1751, column: 25, scope: !2505)
!2512 = !DILocation(line: 1751, column: 3, scope: !2505)
!2513 = !DILocation(line: 1752, column: 1, scope: !2505)
!2514 = distinct !DISubprogram(name: "gimple_assign_set_rhs2", scope: !6, file: !6, line: 1784, type: !1994, scopeLine: 1785, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!2515 = !DILocalVariable(name: "gs", arg: 1, scope: !2514, file: !6, line: 1784, type: !594)
!2516 = !DILocation(line: 1784, column: 32, scope: !2514)
!2517 = !DILocalVariable(name: "rhs", arg: 2, scope: !2514, file: !6, line: 1784, type: !666)
!2518 = !DILocation(line: 1784, column: 41, scope: !2514)
!2519 = !DILocation(line: 1788, column: 18, scope: !2514)
!2520 = !DILocation(line: 1788, column: 25, scope: !2514)
!2521 = !DILocation(line: 1788, column: 3, scope: !2514)
!2522 = !DILocation(line: 1789, column: 1, scope: !2514)
!2523 = distinct !DISubprogram(name: "gimplify_assign", scope: !3, file: !3, line: 377, type: !2524, scopeLine: 378, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!2524 = !DISubroutineType(types: !2525)
!2525 = !{!594, !666, !666, !2526}
!2526 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !645, size: 64)
!2527 = !DILocalVariable(name: "dst", arg: 1, scope: !2523, file: !3, line: 377, type: !666)
!2528 = !DILocation(line: 377, column: 23, scope: !2523)
!2529 = !DILocalVariable(name: "src", arg: 2, scope: !2523, file: !3, line: 377, type: !666)
!2530 = !DILocation(line: 377, column: 33, scope: !2523)
!2531 = !DILocalVariable(name: "seq_p", arg: 3, scope: !2523, file: !3, line: 377, type: !2526)
!2532 = !DILocation(line: 377, column: 50, scope: !2523)
!2533 = !DILocalVariable(name: "t", scope: !2523, file: !3, line: 379, type: !666)
!2534 = !DILocation(line: 379, column: 8, scope: !2523)
!2535 = !DILocation(line: 379, column: 12, scope: !2523)
!2536 = !DILocation(line: 380, column: 21, scope: !2523)
!2537 = !DILocation(line: 380, column: 24, scope: !2523)
!2538 = !DILocation(line: 380, column: 3, scope: !2523)
!2539 = !DILocation(line: 381, column: 13, scope: !2523)
!2540 = !DILocation(line: 381, column: 3, scope: !2523)
!2541 = !DILocation(line: 382, column: 33, scope: !2523)
!2542 = !DILocation(line: 382, column: 32, scope: !2523)
!2543 = !DILocation(line: 382, column: 10, scope: !2523)
!2544 = !DILocation(line: 382, column: 3, scope: !2523)
!2545 = distinct !DISubprogram(name: "gimple_seq_last_stmt", scope: !6, file: !6, line: 187, type: !2546, scopeLine: 188, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!2546 = !DISubroutineType(types: !2547)
!2547 = !{!594, !2548}
!2548 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple_seq", file: !595, line: 67, baseType: !2549)
!2549 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2550, size: 64)
!2550 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !647)
!2551 = !DILocalVariable(name: "s", arg: 1, scope: !2545, file: !6, line: 187, type: !2548)
!2552 = !DILocation(line: 187, column: 40, scope: !2545)
!2553 = !DILocalVariable(name: "n", scope: !2545, file: !6, line: 189, type: !650)
!2554 = !DILocation(line: 189, column: 19, scope: !2545)
!2555 = !DILocation(line: 189, column: 40, scope: !2545)
!2556 = !DILocation(line: 189, column: 23, scope: !2545)
!2557 = !DILocation(line: 190, column: 11, scope: !2545)
!2558 = !DILocation(line: 190, column: 10, scope: !2545)
!2559 = !DILocation(line: 190, column: 16, scope: !2545)
!2560 = !DILocation(line: 190, column: 19, scope: !2545)
!2561 = !DILocation(line: 190, column: 3, scope: !2545)
!2562 = distinct !DISubprogram(name: "gimple_build_cond", scope: !3, file: !3, line: 393, type: !2563, scopeLine: 395, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!2563 = !DISubroutineType(types: !2564)
!2564 = !{!594, !82, !666, !666, !666, !666}
!2565 = !DILocalVariable(name: "pred_code", arg: 1, scope: !2562, file: !3, line: 393, type: !82)
!2566 = !DILocation(line: 393, column: 35, scope: !2562)
!2567 = !DILocalVariable(name: "lhs", arg: 2, scope: !2562, file: !3, line: 393, type: !666)
!2568 = !DILocation(line: 393, column: 51, scope: !2562)
!2569 = !DILocalVariable(name: "rhs", arg: 3, scope: !2562, file: !3, line: 393, type: !666)
!2570 = !DILocation(line: 393, column: 61, scope: !2562)
!2571 = !DILocalVariable(name: "t_label", arg: 4, scope: !2562, file: !3, line: 394, type: !666)
!2572 = !DILocation(line: 394, column: 11, scope: !2562)
!2573 = !DILocalVariable(name: "f_label", arg: 5, scope: !2562, file: !3, line: 394, type: !666)
!2574 = !DILocation(line: 394, column: 25, scope: !2562)
!2575 = !DILocalVariable(name: "p", scope: !2562, file: !3, line: 396, type: !594)
!2576 = !DILocation(line: 396, column: 10, scope: !2562)
!2577 = !DILocation(line: 398, column: 3, scope: !2562)
!2578 = !DILocation(line: 399, column: 7, scope: !2562)
!2579 = !DILocation(line: 399, column: 5, scope: !2562)
!2580 = !DILocation(line: 400, column: 24, scope: !2562)
!2581 = !DILocation(line: 400, column: 27, scope: !2562)
!2582 = !DILocation(line: 400, column: 3, scope: !2562)
!2583 = !DILocation(line: 401, column: 24, scope: !2562)
!2584 = !DILocation(line: 401, column: 27, scope: !2562)
!2585 = !DILocation(line: 401, column: 3, scope: !2562)
!2586 = !DILocation(line: 402, column: 31, scope: !2562)
!2587 = !DILocation(line: 402, column: 34, scope: !2562)
!2588 = !DILocation(line: 402, column: 3, scope: !2562)
!2589 = !DILocation(line: 403, column: 32, scope: !2562)
!2590 = !DILocation(line: 403, column: 35, scope: !2562)
!2591 = !DILocation(line: 403, column: 3, scope: !2562)
!2592 = !DILocation(line: 404, column: 10, scope: !2562)
!2593 = !DILocation(line: 404, column: 3, scope: !2562)
!2594 = distinct !DISubprogram(name: "gimple_cond_set_lhs", scope: !6, file: !6, line: 2261, type: !1994, scopeLine: 2262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!2595 = !DILocalVariable(name: "gs", arg: 1, scope: !2594, file: !6, line: 2261, type: !594)
!2596 = !DILocation(line: 2261, column: 29, scope: !2594)
!2597 = !DILocalVariable(name: "lhs", arg: 2, scope: !2594, file: !6, line: 2261, type: !666)
!2598 = !DILocation(line: 2261, column: 38, scope: !2594)
!2599 = !DILocation(line: 2264, column: 18, scope: !2594)
!2600 = !DILocation(line: 2264, column: 25, scope: !2594)
!2601 = !DILocation(line: 2264, column: 3, scope: !2594)
!2602 = !DILocation(line: 2265, column: 1, scope: !2594)
!2603 = distinct !DISubprogram(name: "gimple_cond_set_rhs", scope: !6, file: !6, line: 2292, type: !1994, scopeLine: 2293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!2604 = !DILocalVariable(name: "gs", arg: 1, scope: !2603, file: !6, line: 2292, type: !594)
!2605 = !DILocation(line: 2292, column: 29, scope: !2603)
!2606 = !DILocalVariable(name: "rhs", arg: 2, scope: !2603, file: !6, line: 2292, type: !666)
!2607 = !DILocation(line: 2292, column: 38, scope: !2603)
!2608 = !DILocation(line: 2295, column: 18, scope: !2603)
!2609 = !DILocation(line: 2295, column: 25, scope: !2603)
!2610 = !DILocation(line: 2295, column: 3, scope: !2603)
!2611 = !DILocation(line: 2296, column: 1, scope: !2603)
!2612 = distinct !DISubprogram(name: "gimple_cond_set_true_label", scope: !6, file: !6, line: 2314, type: !1994, scopeLine: 2315, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!2613 = !DILocalVariable(name: "gs", arg: 1, scope: !2612, file: !6, line: 2314, type: !594)
!2614 = !DILocation(line: 2314, column: 36, scope: !2612)
!2615 = !DILocalVariable(name: "label", arg: 2, scope: !2612, file: !6, line: 2314, type: !666)
!2616 = !DILocation(line: 2314, column: 45, scope: !2612)
!2617 = !DILocation(line: 2317, column: 18, scope: !2612)
!2618 = !DILocation(line: 2317, column: 25, scope: !2612)
!2619 = !DILocation(line: 2317, column: 3, scope: !2612)
!2620 = !DILocation(line: 2318, column: 1, scope: !2612)
!2621 = distinct !DISubprogram(name: "gimple_cond_set_false_label", scope: !6, file: !6, line: 2325, type: !1994, scopeLine: 2326, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!2622 = !DILocalVariable(name: "gs", arg: 1, scope: !2621, file: !6, line: 2325, type: !594)
!2623 = !DILocation(line: 2325, column: 37, scope: !2621)
!2624 = !DILocalVariable(name: "label", arg: 2, scope: !2621, file: !6, line: 2325, type: !666)
!2625 = !DILocation(line: 2325, column: 46, scope: !2621)
!2626 = !DILocation(line: 2328, column: 18, scope: !2621)
!2627 = !DILocation(line: 2328, column: 25, scope: !2621)
!2628 = !DILocation(line: 2328, column: 3, scope: !2621)
!2629 = !DILocation(line: 2329, column: 1, scope: !2621)
!2630 = distinct !DISubprogram(name: "gimple_cond_get_ops_from_tree", scope: !3, file: !3, line: 411, type: !2336, scopeLine: 413, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!2631 = !DILocalVariable(name: "cond", arg: 1, scope: !2630, file: !3, line: 411, type: !666)
!2632 = !DILocation(line: 411, column: 37, scope: !2630)
!2633 = !DILocalVariable(name: "code_p", arg: 2, scope: !2630, file: !3, line: 411, type: !2338)
!2634 = !DILocation(line: 411, column: 59, scope: !2630)
!2635 = !DILocalVariable(name: "lhs_p", arg: 3, scope: !2630, file: !3, line: 412, type: !1127)
!2636 = !DILocation(line: 412, column: 38, scope: !2630)
!2637 = !DILocalVariable(name: "rhs_p", arg: 4, scope: !2630, file: !3, line: 412, type: !1127)
!2638 = !DILocation(line: 412, column: 51, scope: !2630)
!2639 = !DILocalVariable(name: "loc", scope: !2630, file: !3, line: 414, type: !613)
!2640 = !DILocation(line: 414, column: 14, scope: !2630)
!2641 = !DILocation(line: 414, column: 20, scope: !2630)
!2642 = !DILocation(line: 415, column: 3, scope: !2630)
!2643 = !DILocation(line: 420, column: 26, scope: !2630)
!2644 = !DILocation(line: 420, column: 32, scope: !2630)
!2645 = !DILocation(line: 420, column: 40, scope: !2630)
!2646 = !DILocation(line: 420, column: 47, scope: !2630)
!2647 = !DILocation(line: 420, column: 3, scope: !2630)
!2648 = !DILocation(line: 423, column: 8, scope: !2649)
!2649 = distinct !DILexicalBlock(scope: !2630, file: !3, line: 423, column: 7)
!2650 = !DILocation(line: 423, column: 7, scope: !2649)
!2651 = !DILocation(line: 423, column: 15, scope: !2649)
!2652 = !DILocation(line: 423, column: 7, scope: !2630)
!2653 = !DILocation(line: 425, column: 8, scope: !2654)
!2654 = distinct !DILexicalBlock(scope: !2649, file: !3, line: 424, column: 5)
!2655 = !DILocation(line: 425, column: 15, scope: !2654)
!2656 = !DILocation(line: 426, column: 7, scope: !2654)
!2657 = !DILocation(line: 427, column: 34, scope: !2654)
!2658 = !DILocation(line: 427, column: 39, scope: !2654)
!2659 = !DILocation(line: 427, column: 59, scope: !2654)
!2660 = !DILocation(line: 427, column: 16, scope: !2654)
!2661 = !DILocation(line: 427, column: 8, scope: !2654)
!2662 = !DILocation(line: 427, column: 14, scope: !2654)
!2663 = !DILocation(line: 428, column: 5, scope: !2654)
!2664 = !DILocation(line: 430, column: 12, scope: !2665)
!2665 = distinct !DILexicalBlock(scope: !2649, file: !3, line: 430, column: 12)
!2666 = !DILocation(line: 430, column: 38, scope: !2665)
!2667 = !DILocation(line: 430, column: 12, scope: !2649)
!2668 = !DILocation(line: 432, column: 8, scope: !2669)
!2669 = distinct !DILexicalBlock(scope: !2665, file: !3, line: 431, column: 5)
!2670 = !DILocation(line: 432, column: 15, scope: !2669)
!2671 = !DILocation(line: 433, column: 7, scope: !2669)
!2672 = !DILocation(line: 434, column: 34, scope: !2669)
!2673 = !DILocation(line: 434, column: 39, scope: !2669)
!2674 = !DILocation(line: 434, column: 59, scope: !2669)
!2675 = !DILocation(line: 434, column: 16, scope: !2669)
!2676 = !DILocation(line: 434, column: 8, scope: !2669)
!2677 = !DILocation(line: 434, column: 14, scope: !2669)
!2678 = !DILocation(line: 435, column: 5, scope: !2669)
!2679 = !DILocation(line: 436, column: 1, scope: !2630)
!2680 = distinct !DISubprogram(name: "is_gimple_min_invariant", scope: !3, file: !3, line: 2616, type: !2681, scopeLine: 2617, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!2681 = !DISubroutineType(types: !2682)
!2682 = !{!769, !1784}
!2683 = !DILocalVariable(name: "t", arg: 1, scope: !2680, file: !3, line: 2616, type: !1784)
!2684 = !DILocation(line: 2616, column: 37, scope: !2680)
!2685 = !DILocation(line: 2618, column: 7, scope: !2686)
!2686 = distinct !DILexicalBlock(scope: !2680, file: !3, line: 2618, column: 7)
!2687 = !DILocation(line: 2618, column: 21, scope: !2686)
!2688 = !DILocation(line: 2618, column: 7, scope: !2680)
!2689 = !DILocation(line: 2619, column: 41, scope: !2686)
!2690 = !DILocation(line: 2619, column: 12, scope: !2686)
!2691 = !DILocation(line: 2619, column: 5, scope: !2686)
!2692 = !DILocation(line: 2621, column: 30, scope: !2680)
!2693 = !DILocation(line: 2621, column: 10, scope: !2680)
!2694 = !DILocation(line: 2621, column: 3, scope: !2680)
!2695 = !DILocation(line: 2622, column: 1, scope: !2680)
!2696 = distinct !DISubprogram(name: "gimple_build_cond_from_tree", scope: !3, file: !3, line: 443, type: !2697, scopeLine: 444, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!2697 = !DISubroutineType(types: !2698)
!2698 = !{!594, !666, !666, !666}
!2699 = !DILocalVariable(name: "cond", arg: 1, scope: !2696, file: !3, line: 443, type: !666)
!2700 = !DILocation(line: 443, column: 35, scope: !2696)
!2701 = !DILocalVariable(name: "t_label", arg: 2, scope: !2696, file: !3, line: 443, type: !666)
!2702 = !DILocation(line: 443, column: 46, scope: !2696)
!2703 = !DILocalVariable(name: "f_label", arg: 3, scope: !2696, file: !3, line: 443, type: !666)
!2704 = !DILocation(line: 443, column: 60, scope: !2696)
!2705 = !DILocalVariable(name: "code", scope: !2696, file: !3, line: 445, type: !82)
!2706 = !DILocation(line: 445, column: 18, scope: !2696)
!2707 = !DILocalVariable(name: "lhs", scope: !2696, file: !3, line: 446, type: !666)
!2708 = !DILocation(line: 446, column: 8, scope: !2696)
!2709 = !DILocalVariable(name: "rhs", scope: !2696, file: !3, line: 446, type: !666)
!2710 = !DILocation(line: 446, column: 13, scope: !2696)
!2711 = !DILocation(line: 448, column: 34, scope: !2696)
!2712 = !DILocation(line: 448, column: 3, scope: !2696)
!2713 = !DILocation(line: 449, column: 29, scope: !2696)
!2714 = !DILocation(line: 449, column: 35, scope: !2696)
!2715 = !DILocation(line: 449, column: 40, scope: !2696)
!2716 = !DILocation(line: 449, column: 45, scope: !2696)
!2717 = !DILocation(line: 449, column: 54, scope: !2696)
!2718 = !DILocation(line: 449, column: 10, scope: !2696)
!2719 = !DILocation(line: 449, column: 3, scope: !2696)
!2720 = distinct !DISubprogram(name: "gimple_cond_set_condition_from_tree", scope: !3, file: !3, line: 456, type: !1994, scopeLine: 457, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!2721 = !DILocalVariable(name: "stmt", arg: 1, scope: !2720, file: !3, line: 456, type: !594)
!2722 = !DILocation(line: 456, column: 45, scope: !2720)
!2723 = !DILocalVariable(name: "cond", arg: 2, scope: !2720, file: !3, line: 456, type: !666)
!2724 = !DILocation(line: 456, column: 56, scope: !2720)
!2725 = !DILocalVariable(name: "code", scope: !2720, file: !3, line: 458, type: !82)
!2726 = !DILocation(line: 458, column: 18, scope: !2720)
!2727 = !DILocalVariable(name: "lhs", scope: !2720, file: !3, line: 459, type: !666)
!2728 = !DILocation(line: 459, column: 8, scope: !2720)
!2729 = !DILocalVariable(name: "rhs", scope: !2720, file: !3, line: 459, type: !666)
!2730 = !DILocation(line: 459, column: 13, scope: !2720)
!2731 = !DILocation(line: 461, column: 34, scope: !2720)
!2732 = !DILocation(line: 461, column: 3, scope: !2720)
!2733 = !DILocation(line: 462, column: 30, scope: !2720)
!2734 = !DILocation(line: 462, column: 36, scope: !2720)
!2735 = !DILocation(line: 462, column: 42, scope: !2720)
!2736 = !DILocation(line: 462, column: 47, scope: !2720)
!2737 = !DILocation(line: 462, column: 3, scope: !2720)
!2738 = !DILocation(line: 463, column: 1, scope: !2720)
!2739 = distinct !DISubprogram(name: "gimple_cond_set_condition", scope: !6, file: !6, line: 2434, type: !2740, scopeLine: 2435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!2740 = !DISubroutineType(types: !2741)
!2741 = !{null, !594, !82, !666, !666}
!2742 = !DILocalVariable(name: "stmt", arg: 1, scope: !2739, file: !6, line: 2434, type: !594)
!2743 = !DILocation(line: 2434, column: 35, scope: !2739)
!2744 = !DILocalVariable(name: "code", arg: 2, scope: !2739, file: !6, line: 2434, type: !82)
!2745 = !DILocation(line: 2434, column: 56, scope: !2739)
!2746 = !DILocalVariable(name: "lhs", arg: 3, scope: !2739, file: !6, line: 2434, type: !666)
!2747 = !DILocation(line: 2434, column: 67, scope: !2739)
!2748 = !DILocalVariable(name: "rhs", arg: 4, scope: !2739, file: !6, line: 2434, type: !666)
!2749 = !DILocation(line: 2434, column: 77, scope: !2739)
!2750 = !DILocation(line: 2436, column: 25, scope: !2739)
!2751 = !DILocation(line: 2436, column: 31, scope: !2739)
!2752 = !DILocation(line: 2436, column: 3, scope: !2739)
!2753 = !DILocation(line: 2437, column: 24, scope: !2739)
!2754 = !DILocation(line: 2437, column: 30, scope: !2739)
!2755 = !DILocation(line: 2437, column: 3, scope: !2739)
!2756 = !DILocation(line: 2438, column: 24, scope: !2739)
!2757 = !DILocation(line: 2438, column: 30, scope: !2739)
!2758 = !DILocation(line: 2438, column: 3, scope: !2739)
!2759 = !DILocation(line: 2439, column: 1, scope: !2739)
!2760 = distinct !DISubprogram(name: "gimple_build_label", scope: !3, file: !3, line: 468, type: !1959, scopeLine: 469, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!2761 = !DILocalVariable(name: "label", arg: 1, scope: !2760, file: !3, line: 468, type: !666)
!2762 = !DILocation(line: 468, column: 26, scope: !2760)
!2763 = !DILocalVariable(name: "p", scope: !2760, file: !3, line: 470, type: !594)
!2764 = !DILocation(line: 470, column: 10, scope: !2760)
!2765 = !DILocation(line: 470, column: 14, scope: !2760)
!2766 = !DILocation(line: 471, column: 27, scope: !2760)
!2767 = !DILocation(line: 471, column: 30, scope: !2760)
!2768 = !DILocation(line: 471, column: 3, scope: !2760)
!2769 = !DILocation(line: 472, column: 10, scope: !2760)
!2770 = !DILocation(line: 472, column: 3, scope: !2760)
!2771 = distinct !DISubprogram(name: "gimple_label_set_label", scope: !6, file: !6, line: 2455, type: !1994, scopeLine: 2456, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!2772 = !DILocalVariable(name: "gs", arg: 1, scope: !2771, file: !6, line: 2455, type: !594)
!2773 = !DILocation(line: 2455, column: 32, scope: !2771)
!2774 = !DILocalVariable(name: "label", arg: 2, scope: !2771, file: !6, line: 2455, type: !666)
!2775 = !DILocation(line: 2455, column: 41, scope: !2771)
!2776 = !DILocation(line: 2458, column: 18, scope: !2771)
!2777 = !DILocation(line: 2458, column: 25, scope: !2771)
!2778 = !DILocation(line: 2458, column: 3, scope: !2771)
!2779 = !DILocation(line: 2459, column: 1, scope: !2771)
!2780 = distinct !DISubprogram(name: "gimple_build_goto", scope: !3, file: !3, line: 478, type: !1959, scopeLine: 479, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!2781 = !DILocalVariable(name: "dest", arg: 1, scope: !2780, file: !3, line: 478, type: !666)
!2782 = !DILocation(line: 478, column: 25, scope: !2780)
!2783 = !DILocalVariable(name: "p", scope: !2780, file: !3, line: 480, type: !594)
!2784 = !DILocation(line: 480, column: 10, scope: !2780)
!2785 = !DILocation(line: 480, column: 14, scope: !2780)
!2786 = !DILocation(line: 481, column: 25, scope: !2780)
!2787 = !DILocation(line: 481, column: 28, scope: !2780)
!2788 = !DILocation(line: 481, column: 3, scope: !2780)
!2789 = !DILocation(line: 482, column: 10, scope: !2780)
!2790 = !DILocation(line: 482, column: 3, scope: !2780)
!2791 = distinct !DISubprogram(name: "gimple_goto_set_dest", scope: !6, file: !6, line: 2475, type: !1994, scopeLine: 2476, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!2792 = !DILocalVariable(name: "gs", arg: 1, scope: !2791, file: !6, line: 2475, type: !594)
!2793 = !DILocation(line: 2475, column: 30, scope: !2791)
!2794 = !DILocalVariable(name: "dest", arg: 2, scope: !2791, file: !6, line: 2475, type: !666)
!2795 = !DILocation(line: 2475, column: 39, scope: !2791)
!2796 = !DILocation(line: 2478, column: 18, scope: !2791)
!2797 = !DILocation(line: 2478, column: 25, scope: !2791)
!2798 = !DILocation(line: 2478, column: 3, scope: !2791)
!2799 = !DILocation(line: 2479, column: 1, scope: !2791)
!2800 = distinct !DISubprogram(name: "gimple_build_nop", scope: !3, file: !3, line: 489, type: !2801, scopeLine: 490, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!2801 = !DISubroutineType(types: !2802)
!2802 = !{!594}
!2803 = !DILocation(line: 491, column: 10, scope: !2800)
!2804 = !DILocation(line: 491, column: 3, scope: !2800)
!2805 = distinct !DISubprogram(name: "gimple_build_bind", scope: !3, file: !3, line: 500, type: !2806, scopeLine: 501, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!2806 = !DISubroutineType(types: !2807)
!2807 = !{!594, !666, !645, !666}
!2808 = !DILocalVariable(name: "vars", arg: 1, scope: !2805, file: !3, line: 500, type: !666)
!2809 = !DILocation(line: 500, column: 25, scope: !2805)
!2810 = !DILocalVariable(name: "body", arg: 2, scope: !2805, file: !3, line: 500, type: !645)
!2811 = !DILocation(line: 500, column: 42, scope: !2805)
!2812 = !DILocalVariable(name: "block", arg: 3, scope: !2805, file: !3, line: 500, type: !666)
!2813 = !DILocation(line: 500, column: 53, scope: !2805)
!2814 = !DILocalVariable(name: "p", scope: !2805, file: !3, line: 502, type: !594)
!2815 = !DILocation(line: 502, column: 10, scope: !2805)
!2816 = !DILocation(line: 502, column: 14, scope: !2805)
!2817 = !DILocation(line: 503, column: 25, scope: !2805)
!2818 = !DILocation(line: 503, column: 28, scope: !2805)
!2819 = !DILocation(line: 503, column: 3, scope: !2805)
!2820 = !DILocation(line: 504, column: 7, scope: !2821)
!2821 = distinct !DILexicalBlock(scope: !2805, file: !3, line: 504, column: 7)
!2822 = !DILocation(line: 504, column: 7, scope: !2805)
!2823 = !DILocation(line: 505, column: 27, scope: !2821)
!2824 = !DILocation(line: 505, column: 30, scope: !2821)
!2825 = !DILocation(line: 505, column: 5, scope: !2821)
!2826 = !DILocation(line: 506, column: 7, scope: !2827)
!2827 = distinct !DILexicalBlock(scope: !2805, file: !3, line: 506, column: 7)
!2828 = !DILocation(line: 506, column: 7, scope: !2805)
!2829 = !DILocation(line: 507, column: 28, scope: !2827)
!2830 = !DILocation(line: 507, column: 31, scope: !2827)
!2831 = !DILocation(line: 507, column: 5, scope: !2827)
!2832 = !DILocation(line: 508, column: 10, scope: !2805)
!2833 = !DILocation(line: 508, column: 3, scope: !2805)
!2834 = distinct !DISubprogram(name: "gimple_bind_set_vars", scope: !6, file: !6, line: 2496, type: !1994, scopeLine: 2497, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!2835 = !DILocalVariable(name: "gs", arg: 1, scope: !2834, file: !6, line: 2496, type: !594)
!2836 = !DILocation(line: 2496, column: 30, scope: !2834)
!2837 = !DILocalVariable(name: "vars", arg: 2, scope: !2834, file: !6, line: 2496, type: !666)
!2838 = !DILocation(line: 2496, column: 39, scope: !2834)
!2839 = !DILocation(line: 2499, column: 26, scope: !2834)
!2840 = !DILocation(line: 2499, column: 3, scope: !2834)
!2841 = !DILocation(line: 2499, column: 7, scope: !2834)
!2842 = !DILocation(line: 2499, column: 19, scope: !2834)
!2843 = !DILocation(line: 2499, column: 24, scope: !2834)
!2844 = !DILocation(line: 2500, column: 1, scope: !2834)
!2845 = distinct !DISubprogram(name: "gimple_bind_set_body", scope: !6, file: !6, line: 2528, type: !2846, scopeLine: 2529, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!2846 = !DISubroutineType(types: !2847)
!2847 = !{null, !594, !645}
!2848 = !DILocalVariable(name: "gs", arg: 1, scope: !2845, file: !6, line: 2528, type: !594)
!2849 = !DILocation(line: 2528, column: 30, scope: !2845)
!2850 = !DILocalVariable(name: "seq", arg: 2, scope: !2845, file: !6, line: 2528, type: !645)
!2851 = !DILocation(line: 2528, column: 45, scope: !2845)
!2852 = !DILocation(line: 2531, column: 26, scope: !2845)
!2853 = !DILocation(line: 2531, column: 3, scope: !2845)
!2854 = !DILocation(line: 2531, column: 7, scope: !2845)
!2855 = !DILocation(line: 2531, column: 19, scope: !2845)
!2856 = !DILocation(line: 2531, column: 24, scope: !2845)
!2857 = !DILocation(line: 2532, column: 1, scope: !2845)
!2858 = distinct !DISubprogram(name: "gimple_bind_set_block", scope: !6, file: !6, line: 2570, type: !1994, scopeLine: 2571, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!2859 = !DILocalVariable(name: "gs", arg: 1, scope: !2858, file: !6, line: 2570, type: !594)
!2860 = !DILocation(line: 2570, column: 31, scope: !2858)
!2861 = !DILocalVariable(name: "block", arg: 2, scope: !2858, file: !6, line: 2570, type: !666)
!2862 = !DILocation(line: 2570, column: 40, scope: !2858)
!2863 = !DILocation(line: 2573, column: 3, scope: !2858)
!2864 = !DILocation(line: 2574, column: 27, scope: !2858)
!2865 = !DILocation(line: 2574, column: 3, scope: !2858)
!2866 = !DILocation(line: 2574, column: 7, scope: !2858)
!2867 = !DILocation(line: 2574, column: 19, scope: !2858)
!2868 = !DILocation(line: 2574, column: 25, scope: !2858)
!2869 = !DILocation(line: 2575, column: 1, scope: !2858)
!2870 = distinct !DISubprogram(name: "gimple_build_asm_vec", scope: !3, file: !3, line: 558, type: !2871, scopeLine: 561, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!2871 = !DISubroutineType(types: !2872)
!2872 = !{!594, !1161, !1017, !1017, !1017, !1017}
!2873 = !DILocalVariable(name: "string", arg: 1, scope: !2870, file: !3, line: 558, type: !1161)
!2874 = !DILocation(line: 558, column: 35, scope: !2870)
!2875 = !DILocalVariable(name: "inputs", arg: 2, scope: !2870, file: !3, line: 558, type: !1017)
!2876 = !DILocation(line: 558, column: 57, scope: !2870)
!2877 = !DILocalVariable(name: "outputs", arg: 3, scope: !2870, file: !3, line: 559, type: !1017)
!2878 = !DILocation(line: 559, column: 37, scope: !2870)
!2879 = !DILocalVariable(name: "clobbers", arg: 4, scope: !2870, file: !3, line: 559, type: !1017)
!2880 = !DILocation(line: 559, column: 60, scope: !2870)
!2881 = !DILocalVariable(name: "labels", arg: 5, scope: !2870, file: !3, line: 560, type: !1017)
!2882 = !DILocation(line: 560, column: 23, scope: !2870)
!2883 = !DILocalVariable(name: "p", scope: !2870, file: !3, line: 562, type: !594)
!2884 = !DILocation(line: 562, column: 10, scope: !2870)
!2885 = !DILocalVariable(name: "i", scope: !2870, file: !3, line: 563, type: !7)
!2886 = !DILocation(line: 563, column: 12, scope: !2870)
!2887 = !DILocation(line: 565, column: 27, scope: !2870)
!2888 = !DILocation(line: 566, column: 27, scope: !2870)
!2889 = !DILocation(line: 567, column: 27, scope: !2870)
!2890 = !DILocation(line: 568, column: 27, scope: !2870)
!2891 = !DILocation(line: 569, column: 6, scope: !2870)
!2892 = !DILocation(line: 565, column: 7, scope: !2870)
!2893 = !DILocation(line: 565, column: 5, scope: !2870)
!2894 = !DILocation(line: 571, column: 10, scope: !2895)
!2895 = distinct !DILexicalBlock(scope: !2870, file: !3, line: 571, column: 3)
!2896 = !DILocation(line: 571, column: 8, scope: !2895)
!2897 = !DILocation(line: 571, column: 15, scope: !2898)
!2898 = distinct !DILexicalBlock(scope: !2895, file: !3, line: 571, column: 3)
!2899 = !DILocation(line: 571, column: 19, scope: !2898)
!2900 = !DILocation(line: 571, column: 17, scope: !2898)
!2901 = !DILocation(line: 571, column: 3, scope: !2895)
!2902 = !DILocation(line: 572, column: 30, scope: !2898)
!2903 = !DILocation(line: 572, column: 33, scope: !2898)
!2904 = !DILocation(line: 572, column: 36, scope: !2898)
!2905 = !DILocation(line: 572, column: 5, scope: !2898)
!2906 = !DILocation(line: 571, column: 47, scope: !2898)
!2907 = !DILocation(line: 571, column: 3, scope: !2898)
!2908 = distinct !{!2908, !2901, !2909}
!2909 = !DILocation(line: 572, column: 63, scope: !2895)
!2910 = !DILocation(line: 574, column: 10, scope: !2911)
!2911 = distinct !DILexicalBlock(scope: !2870, file: !3, line: 574, column: 3)
!2912 = !DILocation(line: 574, column: 8, scope: !2911)
!2913 = !DILocation(line: 574, column: 15, scope: !2914)
!2914 = distinct !DILexicalBlock(scope: !2911, file: !3, line: 574, column: 3)
!2915 = !DILocation(line: 574, column: 19, scope: !2914)
!2916 = !DILocation(line: 574, column: 17, scope: !2914)
!2917 = !DILocation(line: 574, column: 3, scope: !2911)
!2918 = !DILocation(line: 575, column: 31, scope: !2914)
!2919 = !DILocation(line: 575, column: 34, scope: !2914)
!2920 = !DILocation(line: 575, column: 37, scope: !2914)
!2921 = !DILocation(line: 575, column: 5, scope: !2914)
!2922 = !DILocation(line: 574, column: 48, scope: !2914)
!2923 = !DILocation(line: 574, column: 3, scope: !2914)
!2924 = distinct !{!2924, !2917, !2925}
!2925 = !DILocation(line: 575, column: 65, scope: !2911)
!2926 = !DILocation(line: 577, column: 10, scope: !2927)
!2927 = distinct !DILexicalBlock(scope: !2870, file: !3, line: 577, column: 3)
!2928 = !DILocation(line: 577, column: 8, scope: !2927)
!2929 = !DILocation(line: 577, column: 15, scope: !2930)
!2930 = distinct !DILexicalBlock(scope: !2927, file: !3, line: 577, column: 3)
!2931 = !DILocation(line: 577, column: 19, scope: !2930)
!2932 = !DILocation(line: 577, column: 17, scope: !2930)
!2933 = !DILocation(line: 577, column: 3, scope: !2927)
!2934 = !DILocation(line: 578, column: 32, scope: !2930)
!2935 = !DILocation(line: 578, column: 35, scope: !2930)
!2936 = !DILocation(line: 578, column: 38, scope: !2930)
!2937 = !DILocation(line: 578, column: 5, scope: !2930)
!2938 = !DILocation(line: 577, column: 49, scope: !2930)
!2939 = !DILocation(line: 577, column: 3, scope: !2930)
!2940 = distinct !{!2940, !2933, !2941}
!2941 = !DILocation(line: 578, column: 67, scope: !2927)
!2942 = !DILocation(line: 580, column: 10, scope: !2943)
!2943 = distinct !DILexicalBlock(scope: !2870, file: !3, line: 580, column: 3)
!2944 = !DILocation(line: 580, column: 8, scope: !2943)
!2945 = !DILocation(line: 580, column: 15, scope: !2946)
!2946 = distinct !DILexicalBlock(scope: !2943, file: !3, line: 580, column: 3)
!2947 = !DILocation(line: 580, column: 19, scope: !2946)
!2948 = !DILocation(line: 580, column: 17, scope: !2946)
!2949 = !DILocation(line: 580, column: 3, scope: !2943)
!2950 = !DILocation(line: 581, column: 30, scope: !2946)
!2951 = !DILocation(line: 581, column: 33, scope: !2946)
!2952 = !DILocation(line: 581, column: 36, scope: !2946)
!2953 = !DILocation(line: 581, column: 5, scope: !2946)
!2954 = !DILocation(line: 580, column: 47, scope: !2946)
!2955 = !DILocation(line: 580, column: 3, scope: !2946)
!2956 = distinct !{!2956, !2949, !2957}
!2957 = !DILocation(line: 581, column: 63, scope: !2943)
!2958 = !DILocation(line: 583, column: 10, scope: !2870)
!2959 = !DILocation(line: 583, column: 3, scope: !2870)
!2960 = distinct !DISubprogram(name: "gimple_build_asm_1", scope: !3, file: !3, line: 520, type: !2961, scopeLine: 522, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!2961 = !DISubroutineType(types: !2962)
!2962 = !{!594, !1161, !7, !7, !7, !7}
!2963 = !DILocalVariable(name: "string", arg: 1, scope: !2960, file: !3, line: 520, type: !1161)
!2964 = !DILocation(line: 520, column: 33, scope: !2960)
!2965 = !DILocalVariable(name: "ninputs", arg: 2, scope: !2960, file: !3, line: 520, type: !7)
!2966 = !DILocation(line: 520, column: 50, scope: !2960)
!2967 = !DILocalVariable(name: "noutputs", arg: 3, scope: !2960, file: !3, line: 520, type: !7)
!2968 = !DILocation(line: 520, column: 68, scope: !2960)
!2969 = !DILocalVariable(name: "nclobbers", arg: 4, scope: !2960, file: !3, line: 521, type: !7)
!2970 = !DILocation(line: 521, column: 30, scope: !2960)
!2971 = !DILocalVariable(name: "nlabels", arg: 5, scope: !2960, file: !3, line: 521, type: !7)
!2972 = !DILocation(line: 521, column: 50, scope: !2960)
!2973 = !DILocalVariable(name: "p", scope: !2960, file: !3, line: 523, type: !594)
!2974 = !DILocation(line: 523, column: 10, scope: !2960)
!2975 = !DILocalVariable(name: "size", scope: !2960, file: !3, line: 524, type: !746)
!2976 = !DILocation(line: 524, column: 7, scope: !2960)
!2977 = !DILocation(line: 524, column: 22, scope: !2960)
!2978 = !DILocation(line: 524, column: 14, scope: !2960)
!2979 = !DILocation(line: 528, column: 3, scope: !2960)
!2980 = !DILocation(line: 530, column: 7, scope: !2960)
!2981 = !DILocation(line: 530, column: 5, scope: !2960)
!2982 = !DILocation(line: 533, column: 22, scope: !2960)
!2983 = !DILocation(line: 533, column: 3, scope: !2960)
!2984 = !DILocation(line: 533, column: 6, scope: !2960)
!2985 = !DILocation(line: 533, column: 17, scope: !2960)
!2986 = !DILocation(line: 533, column: 20, scope: !2960)
!2987 = !DILocation(line: 534, column: 22, scope: !2960)
!2988 = !DILocation(line: 534, column: 3, scope: !2960)
!2989 = !DILocation(line: 534, column: 6, scope: !2960)
!2990 = !DILocation(line: 534, column: 17, scope: !2960)
!2991 = !DILocation(line: 534, column: 20, scope: !2960)
!2992 = !DILocation(line: 535, column: 22, scope: !2960)
!2993 = !DILocation(line: 535, column: 3, scope: !2960)
!2994 = !DILocation(line: 535, column: 6, scope: !2960)
!2995 = !DILocation(line: 535, column: 17, scope: !2960)
!2996 = !DILocation(line: 535, column: 20, scope: !2960)
!2997 = !DILocation(line: 536, column: 22, scope: !2960)
!2998 = !DILocation(line: 536, column: 3, scope: !2960)
!2999 = !DILocation(line: 536, column: 6, scope: !2960)
!3000 = !DILocation(line: 536, column: 17, scope: !2960)
!3001 = !DILocation(line: 536, column: 20, scope: !2960)
!3002 = !DILocation(line: 537, column: 44, scope: !2960)
!3003 = !DILocation(line: 537, column: 52, scope: !2960)
!3004 = !DILocation(line: 537, column: 26, scope: !2960)
!3005 = !DILocation(line: 537, column: 3, scope: !2960)
!3006 = !DILocation(line: 537, column: 6, scope: !2960)
!3007 = !DILocation(line: 537, column: 17, scope: !2960)
!3008 = !DILocation(line: 537, column: 24, scope: !2960)
!3009 = !DILocation(line: 543, column: 10, scope: !2960)
!3010 = !DILocation(line: 543, column: 3, scope: !2960)
!3011 = distinct !DISubprogram(name: "gimple_asm_set_input_op", scope: !6, file: !6, line: 2640, type: !2069, scopeLine: 2641, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3012 = !DILocalVariable(name: "gs", arg: 1, scope: !3011, file: !6, line: 2640, type: !594)
!3013 = !DILocation(line: 2640, column: 33, scope: !3011)
!3014 = !DILocalVariable(name: "index", arg: 2, scope: !3011, file: !6, line: 2640, type: !7)
!3015 = !DILocation(line: 2640, column: 46, scope: !3011)
!3016 = !DILocalVariable(name: "in_op", arg: 3, scope: !3011, file: !6, line: 2640, type: !666)
!3017 = !DILocation(line: 2640, column: 58, scope: !3011)
!3018 = !DILocation(line: 2643, column: 3, scope: !3011)
!3019 = !DILocation(line: 2644, column: 3, scope: !3011)
!3020 = !DILocation(line: 2645, column: 18, scope: !3011)
!3021 = !DILocation(line: 2645, column: 22, scope: !3011)
!3022 = !DILocation(line: 2645, column: 29, scope: !3011)
!3023 = !DILocation(line: 2645, column: 3, scope: !3011)
!3024 = !DILocation(line: 2646, column: 1, scope: !3011)
!3025 = distinct !DISubprogram(name: "gimple_asm_set_output_op", scope: !6, file: !6, line: 2673, type: !2069, scopeLine: 2674, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3026 = !DILocalVariable(name: "gs", arg: 1, scope: !3025, file: !6, line: 2673, type: !594)
!3027 = !DILocation(line: 2673, column: 34, scope: !3025)
!3028 = !DILocalVariable(name: "index", arg: 2, scope: !3025, file: !6, line: 2673, type: !7)
!3029 = !DILocation(line: 2673, column: 47, scope: !3025)
!3030 = !DILocalVariable(name: "out_op", arg: 3, scope: !3025, file: !6, line: 2673, type: !666)
!3031 = !DILocation(line: 2673, column: 59, scope: !3025)
!3032 = !DILocation(line: 2676, column: 3, scope: !3025)
!3033 = !DILocation(line: 2677, column: 3, scope: !3025)
!3034 = !DILocation(line: 2678, column: 18, scope: !3025)
!3035 = !DILocation(line: 2678, column: 22, scope: !3025)
!3036 = !DILocation(line: 2678, column: 30, scope: !3025)
!3037 = !DILocation(line: 2678, column: 34, scope: !3025)
!3038 = !DILocation(line: 2678, column: 45, scope: !3025)
!3039 = !DILocation(line: 2678, column: 28, scope: !3025)
!3040 = !DILocation(line: 2678, column: 49, scope: !3025)
!3041 = !DILocation(line: 2678, column: 3, scope: !3025)
!3042 = !DILocation(line: 2679, column: 1, scope: !3025)
!3043 = distinct !DISubprogram(name: "gimple_asm_set_clobber_op", scope: !6, file: !6, line: 2696, type: !2069, scopeLine: 2697, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3044 = !DILocalVariable(name: "gs", arg: 1, scope: !3043, file: !6, line: 2696, type: !594)
!3045 = !DILocation(line: 2696, column: 35, scope: !3043)
!3046 = !DILocalVariable(name: "index", arg: 2, scope: !3043, file: !6, line: 2696, type: !7)
!3047 = !DILocation(line: 2696, column: 48, scope: !3043)
!3048 = !DILocalVariable(name: "clobber_op", arg: 3, scope: !3043, file: !6, line: 2696, type: !666)
!3049 = !DILocation(line: 2696, column: 60, scope: !3043)
!3050 = !DILocation(line: 2699, column: 3, scope: !3043)
!3051 = !DILocation(line: 2700, column: 3, scope: !3043)
!3052 = !DILocation(line: 2701, column: 18, scope: !3043)
!3053 = !DILocation(line: 2701, column: 22, scope: !3043)
!3054 = !DILocation(line: 2701, column: 30, scope: !3043)
!3055 = !DILocation(line: 2701, column: 34, scope: !3043)
!3056 = !DILocation(line: 2701, column: 45, scope: !3043)
!3057 = !DILocation(line: 2701, column: 28, scope: !3043)
!3058 = !DILocation(line: 2701, column: 50, scope: !3043)
!3059 = !DILocation(line: 2701, column: 54, scope: !3043)
!3060 = !DILocation(line: 2701, column: 65, scope: !3043)
!3061 = !DILocation(line: 2701, column: 48, scope: !3043)
!3062 = !DILocation(line: 2701, column: 69, scope: !3043)
!3063 = !DILocation(line: 2701, column: 3, scope: !3043)
!3064 = !DILocation(line: 2702, column: 1, scope: !3043)
!3065 = distinct !DISubprogram(name: "gimple_asm_set_label_op", scope: !6, file: !6, line: 2717, type: !2069, scopeLine: 2718, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3066 = !DILocalVariable(name: "gs", arg: 1, scope: !3065, file: !6, line: 2717, type: !594)
!3067 = !DILocation(line: 2717, column: 33, scope: !3065)
!3068 = !DILocalVariable(name: "index", arg: 2, scope: !3065, file: !6, line: 2717, type: !7)
!3069 = !DILocation(line: 2717, column: 46, scope: !3065)
!3070 = !DILocalVariable(name: "label_op", arg: 3, scope: !3065, file: !6, line: 2717, type: !666)
!3071 = !DILocation(line: 2717, column: 58, scope: !3065)
!3072 = !DILocation(line: 2720, column: 3, scope: !3065)
!3073 = !DILocation(line: 2721, column: 3, scope: !3065)
!3074 = !DILocation(line: 2722, column: 18, scope: !3065)
!3075 = !DILocation(line: 2722, column: 22, scope: !3065)
!3076 = !DILocation(line: 2722, column: 30, scope: !3065)
!3077 = !DILocation(line: 2722, column: 34, scope: !3065)
!3078 = !DILocation(line: 2722, column: 45, scope: !3065)
!3079 = !DILocation(line: 2722, column: 28, scope: !3065)
!3080 = !DILocation(line: 2722, column: 50, scope: !3065)
!3081 = !DILocation(line: 2722, column: 54, scope: !3065)
!3082 = !DILocation(line: 2722, column: 65, scope: !3065)
!3083 = !DILocation(line: 2722, column: 48, scope: !3065)
!3084 = !DILocation(line: 2722, column: 69, scope: !3065)
!3085 = !DILocation(line: 2722, column: 3, scope: !3065)
!3086 = !DILocation(line: 2723, column: 1, scope: !3065)
!3087 = distinct !DISubprogram(name: "gimple_build_catch", scope: !3, file: !3, line: 592, type: !3088, scopeLine: 593, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3088 = !DISubroutineType(types: !3089)
!3089 = !{!594, !666, !645}
!3090 = !DILocalVariable(name: "types", arg: 1, scope: !3087, file: !3, line: 592, type: !666)
!3091 = !DILocation(line: 592, column: 26, scope: !3087)
!3092 = !DILocalVariable(name: "handler", arg: 2, scope: !3087, file: !3, line: 592, type: !645)
!3093 = !DILocation(line: 592, column: 44, scope: !3087)
!3094 = !DILocalVariable(name: "p", scope: !3087, file: !3, line: 594, type: !594)
!3095 = !DILocation(line: 594, column: 10, scope: !3087)
!3096 = !DILocation(line: 594, column: 14, scope: !3087)
!3097 = !DILocation(line: 595, column: 27, scope: !3087)
!3098 = !DILocation(line: 595, column: 30, scope: !3087)
!3099 = !DILocation(line: 595, column: 3, scope: !3087)
!3100 = !DILocation(line: 596, column: 7, scope: !3101)
!3101 = distinct !DILexicalBlock(scope: !3087, file: !3, line: 596, column: 7)
!3102 = !DILocation(line: 596, column: 7, scope: !3087)
!3103 = !DILocation(line: 597, column: 31, scope: !3101)
!3104 = !DILocation(line: 597, column: 34, scope: !3101)
!3105 = !DILocation(line: 597, column: 5, scope: !3101)
!3106 = !DILocation(line: 599, column: 10, scope: !3087)
!3107 = !DILocation(line: 599, column: 3, scope: !3087)
!3108 = distinct !DISubprogram(name: "gimple_catch_set_types", scope: !6, file: !6, line: 2827, type: !1994, scopeLine: 2828, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3109 = !DILocalVariable(name: "gs", arg: 1, scope: !3108, file: !6, line: 2827, type: !594)
!3110 = !DILocation(line: 2827, column: 32, scope: !3108)
!3111 = !DILocalVariable(name: "t", arg: 2, scope: !3108, file: !6, line: 2827, type: !666)
!3112 = !DILocation(line: 2827, column: 41, scope: !3108)
!3113 = !DILocation(line: 2830, column: 28, scope: !3108)
!3114 = !DILocation(line: 2830, column: 3, scope: !3108)
!3115 = !DILocation(line: 2830, column: 7, scope: !3108)
!3116 = !DILocation(line: 2830, column: 20, scope: !3108)
!3117 = !DILocation(line: 2830, column: 26, scope: !3108)
!3118 = !DILocation(line: 2831, column: 1, scope: !3108)
!3119 = distinct !DISubprogram(name: "gimple_catch_set_handler", scope: !6, file: !6, line: 2837, type: !2846, scopeLine: 2838, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3120 = !DILocalVariable(name: "gs", arg: 1, scope: !3119, file: !6, line: 2837, type: !594)
!3121 = !DILocation(line: 2837, column: 34, scope: !3119)
!3122 = !DILocalVariable(name: "handler", arg: 2, scope: !3119, file: !6, line: 2837, type: !645)
!3123 = !DILocation(line: 2837, column: 49, scope: !3119)
!3124 = !DILocation(line: 2840, column: 30, scope: !3119)
!3125 = !DILocation(line: 2840, column: 3, scope: !3119)
!3126 = !DILocation(line: 2840, column: 7, scope: !3119)
!3127 = !DILocation(line: 2840, column: 20, scope: !3119)
!3128 = !DILocation(line: 2840, column: 28, scope: !3119)
!3129 = !DILocation(line: 2841, column: 1, scope: !3119)
!3130 = distinct !DISubprogram(name: "gimple_build_eh_filter", scope: !3, file: !3, line: 608, type: !3088, scopeLine: 609, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3131 = !DILocalVariable(name: "types", arg: 1, scope: !3130, file: !3, line: 608, type: !666)
!3132 = !DILocation(line: 608, column: 30, scope: !3130)
!3133 = !DILocalVariable(name: "failure", arg: 2, scope: !3130, file: !3, line: 608, type: !645)
!3134 = !DILocation(line: 608, column: 48, scope: !3130)
!3135 = !DILocalVariable(name: "p", scope: !3130, file: !3, line: 610, type: !594)
!3136 = !DILocation(line: 610, column: 10, scope: !3130)
!3137 = !DILocation(line: 610, column: 14, scope: !3130)
!3138 = !DILocation(line: 611, column: 31, scope: !3130)
!3139 = !DILocation(line: 611, column: 34, scope: !3130)
!3140 = !DILocation(line: 611, column: 3, scope: !3130)
!3141 = !DILocation(line: 612, column: 7, scope: !3142)
!3142 = distinct !DILexicalBlock(scope: !3130, file: !3, line: 612, column: 7)
!3143 = !DILocation(line: 612, column: 7, scope: !3130)
!3144 = !DILocation(line: 613, column: 35, scope: !3142)
!3145 = !DILocation(line: 613, column: 38, scope: !3142)
!3146 = !DILocation(line: 613, column: 5, scope: !3142)
!3147 = !DILocation(line: 615, column: 10, scope: !3130)
!3148 = !DILocation(line: 615, column: 3, scope: !3130)
!3149 = distinct !DISubprogram(name: "gimple_eh_filter_set_types", scope: !6, file: !6, line: 2879, type: !1994, scopeLine: 2880, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3150 = !DILocalVariable(name: "gs", arg: 1, scope: !3149, file: !6, line: 2879, type: !594)
!3151 = !DILocation(line: 2879, column: 36, scope: !3149)
!3152 = !DILocalVariable(name: "types", arg: 2, scope: !3149, file: !6, line: 2879, type: !666)
!3153 = !DILocation(line: 2879, column: 45, scope: !3149)
!3154 = !DILocation(line: 2882, column: 32, scope: !3149)
!3155 = !DILocation(line: 2882, column: 3, scope: !3149)
!3156 = !DILocation(line: 2882, column: 7, scope: !3149)
!3157 = !DILocation(line: 2882, column: 24, scope: !3149)
!3158 = !DILocation(line: 2882, column: 30, scope: !3149)
!3159 = !DILocation(line: 2883, column: 1, scope: !3149)
!3160 = distinct !DISubprogram(name: "gimple_eh_filter_set_failure", scope: !6, file: !6, line: 2890, type: !2846, scopeLine: 2891, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3161 = !DILocalVariable(name: "gs", arg: 1, scope: !3160, file: !6, line: 2890, type: !594)
!3162 = !DILocation(line: 2890, column: 38, scope: !3160)
!3163 = !DILocalVariable(name: "failure", arg: 2, scope: !3160, file: !6, line: 2890, type: !645)
!3164 = !DILocation(line: 2890, column: 53, scope: !3160)
!3165 = !DILocation(line: 2893, column: 34, scope: !3160)
!3166 = !DILocation(line: 2893, column: 3, scope: !3160)
!3167 = !DILocation(line: 2893, column: 7, scope: !3160)
!3168 = !DILocation(line: 2893, column: 24, scope: !3160)
!3169 = !DILocation(line: 2893, column: 32, scope: !3160)
!3170 = !DILocation(line: 2894, column: 1, scope: !3160)
!3171 = distinct !DISubprogram(name: "gimple_build_eh_must_not_throw", scope: !3, file: !3, line: 621, type: !1959, scopeLine: 622, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3172 = !DILocalVariable(name: "decl", arg: 1, scope: !3171, file: !3, line: 621, type: !666)
!3173 = !DILocation(line: 621, column: 38, scope: !3171)
!3174 = !DILocalVariable(name: "p", scope: !3171, file: !3, line: 623, type: !594)
!3175 = !DILocation(line: 623, column: 10, scope: !3171)
!3176 = !DILocation(line: 623, column: 14, scope: !3171)
!3177 = !DILocation(line: 625, column: 3, scope: !3171)
!3178 = !DILocation(line: 626, column: 3, scope: !3171)
!3179 = !DILocation(line: 627, column: 40, scope: !3171)
!3180 = !DILocation(line: 627, column: 43, scope: !3171)
!3181 = !DILocation(line: 627, column: 3, scope: !3171)
!3182 = !DILocation(line: 629, column: 10, scope: !3171)
!3183 = !DILocation(line: 629, column: 3, scope: !3171)
!3184 = distinct !DISubprogram(name: "gimple_eh_must_not_throw_set_fndecl", scope: !6, file: !6, line: 2908, type: !1994, scopeLine: 2909, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3185 = !DILocalVariable(name: "gs", arg: 1, scope: !3184, file: !6, line: 2908, type: !594)
!3186 = !DILocation(line: 2908, column: 45, scope: !3184)
!3187 = !DILocalVariable(name: "decl", arg: 2, scope: !3184, file: !6, line: 2908, type: !666)
!3188 = !DILocation(line: 2908, column: 54, scope: !3184)
!3189 = !DILocation(line: 2911, column: 30, scope: !3184)
!3190 = !DILocation(line: 2911, column: 3, scope: !3184)
!3191 = !DILocation(line: 2911, column: 7, scope: !3184)
!3192 = !DILocation(line: 2911, column: 21, scope: !3184)
!3193 = !DILocation(line: 2911, column: 28, scope: !3184)
!3194 = !DILocation(line: 2912, column: 1, scope: !3184)
!3195 = distinct !DISubprogram(name: "gimple_build_try", scope: !3, file: !3, line: 640, type: !3196, scopeLine: 642, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3196 = !DISubroutineType(types: !3197)
!3197 = !{!594, !645, !645, !467}
!3198 = !DILocalVariable(name: "eval", arg: 1, scope: !3195, file: !3, line: 640, type: !645)
!3199 = !DILocation(line: 640, column: 30, scope: !3195)
!3200 = !DILocalVariable(name: "cleanup", arg: 2, scope: !3195, file: !3, line: 640, type: !645)
!3201 = !DILocation(line: 640, column: 47, scope: !3195)
!3202 = !DILocalVariable(name: "kind", arg: 3, scope: !3195, file: !3, line: 641, type: !467)
!3203 = !DILocation(line: 641, column: 31, scope: !3195)
!3204 = !DILocalVariable(name: "p", scope: !3195, file: !3, line: 643, type: !594)
!3205 = !DILocation(line: 643, column: 10, scope: !3195)
!3206 = !DILocation(line: 645, column: 3, scope: !3195)
!3207 = !DILocation(line: 646, column: 7, scope: !3195)
!3208 = !DILocation(line: 646, column: 5, scope: !3195)
!3209 = !DILocation(line: 647, column: 23, scope: !3195)
!3210 = !DILocation(line: 647, column: 26, scope: !3195)
!3211 = !DILocation(line: 647, column: 3, scope: !3195)
!3212 = !DILocation(line: 648, column: 7, scope: !3213)
!3213 = distinct !DILexicalBlock(scope: !3195, file: !3, line: 648, column: 7)
!3214 = !DILocation(line: 648, column: 7, scope: !3195)
!3215 = !DILocation(line: 649, column: 26, scope: !3213)
!3216 = !DILocation(line: 649, column: 29, scope: !3213)
!3217 = !DILocation(line: 649, column: 5, scope: !3213)
!3218 = !DILocation(line: 650, column: 7, scope: !3219)
!3219 = distinct !DILexicalBlock(scope: !3195, file: !3, line: 650, column: 7)
!3220 = !DILocation(line: 650, column: 7, scope: !3195)
!3221 = !DILocation(line: 651, column: 29, scope: !3219)
!3222 = !DILocation(line: 651, column: 32, scope: !3219)
!3223 = !DILocation(line: 651, column: 5, scope: !3219)
!3224 = !DILocation(line: 653, column: 10, scope: !3195)
!3225 = !DILocation(line: 653, column: 3, scope: !3195)
!3226 = distinct !DISubprogram(name: "gimple_set_subcode", scope: !3, file: !3, line: 162, type: !1946, scopeLine: 163, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3227 = !DILocalVariable(name: "g", arg: 1, scope: !3226, file: !3, line: 162, type: !594)
!3228 = !DILocation(line: 162, column: 28, scope: !3226)
!3229 = !DILocalVariable(name: "subcode", arg: 2, scope: !3226, file: !3, line: 162, type: !7)
!3230 = !DILocation(line: 162, column: 40, scope: !3226)
!3231 = !DILocation(line: 166, column: 3, scope: !3226)
!3232 = !DILocation(line: 167, column: 23, scope: !3226)
!3233 = !DILocation(line: 167, column: 3, scope: !3226)
!3234 = !DILocation(line: 167, column: 6, scope: !3226)
!3235 = !DILocation(line: 167, column: 13, scope: !3226)
!3236 = !DILocation(line: 167, column: 21, scope: !3226)
!3237 = !DILocation(line: 168, column: 1, scope: !3226)
!3238 = distinct !DISubprogram(name: "gimple_try_set_eval", scope: !6, file: !6, line: 2988, type: !2846, scopeLine: 2989, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3239 = !DILocalVariable(name: "gs", arg: 1, scope: !3238, file: !6, line: 2988, type: !594)
!3240 = !DILocation(line: 2988, column: 29, scope: !3238)
!3241 = !DILocalVariable(name: "eval", arg: 2, scope: !3238, file: !6, line: 2988, type: !645)
!3242 = !DILocation(line: 2988, column: 44, scope: !3238)
!3243 = !DILocation(line: 2991, column: 25, scope: !3238)
!3244 = !DILocation(line: 2991, column: 3, scope: !3238)
!3245 = !DILocation(line: 2991, column: 7, scope: !3238)
!3246 = !DILocation(line: 2991, column: 18, scope: !3238)
!3247 = !DILocation(line: 2991, column: 23, scope: !3238)
!3248 = !DILocation(line: 2992, column: 1, scope: !3238)
!3249 = distinct !DISubprogram(name: "gimple_try_set_cleanup", scope: !6, file: !6, line: 2999, type: !2846, scopeLine: 3000, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3250 = !DILocalVariable(name: "gs", arg: 1, scope: !3249, file: !6, line: 2999, type: !594)
!3251 = !DILocation(line: 2999, column: 32, scope: !3249)
!3252 = !DILocalVariable(name: "cleanup", arg: 2, scope: !3249, file: !6, line: 2999, type: !645)
!3253 = !DILocation(line: 2999, column: 47, scope: !3249)
!3254 = !DILocation(line: 3002, column: 28, scope: !3249)
!3255 = !DILocation(line: 3002, column: 3, scope: !3249)
!3256 = !DILocation(line: 3002, column: 7, scope: !3249)
!3257 = !DILocation(line: 3002, column: 18, scope: !3249)
!3258 = !DILocation(line: 3002, column: 26, scope: !3249)
!3259 = !DILocation(line: 3003, column: 1, scope: !3249)
!3260 = distinct !DISubprogram(name: "gimple_build_wce", scope: !3, file: !3, line: 661, type: !3261, scopeLine: 662, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3261 = !DISubroutineType(types: !3262)
!3262 = !{!594, !645}
!3263 = !DILocalVariable(name: "cleanup", arg: 1, scope: !3260, file: !3, line: 661, type: !645)
!3264 = !DILocation(line: 661, column: 30, scope: !3260)
!3265 = !DILocalVariable(name: "p", scope: !3260, file: !3, line: 663, type: !594)
!3266 = !DILocation(line: 663, column: 10, scope: !3260)
!3267 = !DILocation(line: 663, column: 14, scope: !3260)
!3268 = !DILocation(line: 664, column: 7, scope: !3269)
!3269 = distinct !DILexicalBlock(scope: !3260, file: !3, line: 664, column: 7)
!3270 = !DILocation(line: 664, column: 7, scope: !3260)
!3271 = !DILocation(line: 665, column: 29, scope: !3269)
!3272 = !DILocation(line: 665, column: 32, scope: !3269)
!3273 = !DILocation(line: 665, column: 5, scope: !3269)
!3274 = !DILocation(line: 667, column: 10, scope: !3260)
!3275 = !DILocation(line: 667, column: 3, scope: !3260)
!3276 = distinct !DISubprogram(name: "gimple_wce_set_cleanup", scope: !6, file: !6, line: 3019, type: !2846, scopeLine: 3020, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3277 = !DILocalVariable(name: "gs", arg: 1, scope: !3276, file: !6, line: 3019, type: !594)
!3278 = !DILocation(line: 3019, column: 32, scope: !3276)
!3279 = !DILocalVariable(name: "cleanup", arg: 2, scope: !3276, file: !6, line: 3019, type: !645)
!3280 = !DILocation(line: 3019, column: 47, scope: !3276)
!3281 = !DILocation(line: 3022, column: 28, scope: !3276)
!3282 = !DILocation(line: 3022, column: 3, scope: !3276)
!3283 = !DILocation(line: 3022, column: 7, scope: !3276)
!3284 = !DILocation(line: 3022, column: 18, scope: !3276)
!3285 = !DILocation(line: 3022, column: 26, scope: !3276)
!3286 = !DILocation(line: 3023, column: 1, scope: !3276)
!3287 = distinct !DISubprogram(name: "gimple_build_resx", scope: !3, file: !3, line: 674, type: !3288, scopeLine: 675, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3288 = !DISubroutineType(types: !3289)
!3289 = !{!594, !746}
!3290 = !DILocalVariable(name: "region", arg: 1, scope: !3287, file: !3, line: 674, type: !746)
!3291 = !DILocation(line: 674, column: 24, scope: !3287)
!3292 = !DILocalVariable(name: "p", scope: !3287, file: !3, line: 676, type: !594)
!3293 = !DILocation(line: 676, column: 10, scope: !3287)
!3294 = !DILocation(line: 676, column: 14, scope: !3287)
!3295 = !DILocation(line: 677, column: 30, scope: !3287)
!3296 = !DILocation(line: 677, column: 3, scope: !3287)
!3297 = !DILocation(line: 677, column: 6, scope: !3287)
!3298 = !DILocation(line: 677, column: 21, scope: !3287)
!3299 = !DILocation(line: 677, column: 28, scope: !3287)
!3300 = !DILocation(line: 678, column: 10, scope: !3287)
!3301 = !DILocation(line: 678, column: 3, scope: !3287)
!3302 = distinct !DISubprogram(name: "gimple_build_switch_nlabels", scope: !3, file: !3, line: 688, type: !3303, scopeLine: 689, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3303 = !DISubroutineType(types: !3304)
!3304 = !{!594, !7, !666, !666}
!3305 = !DILocalVariable(name: "nlabels", arg: 1, scope: !3302, file: !3, line: 688, type: !7)
!3306 = !DILocation(line: 688, column: 39, scope: !3302)
!3307 = !DILocalVariable(name: "index", arg: 2, scope: !3302, file: !3, line: 688, type: !666)
!3308 = !DILocation(line: 688, column: 53, scope: !3302)
!3309 = !DILocalVariable(name: "default_label", arg: 3, scope: !3302, file: !3, line: 688, type: !666)
!3310 = !DILocation(line: 688, column: 65, scope: !3302)
!3311 = !DILocalVariable(name: "p", scope: !3302, file: !3, line: 691, type: !594)
!3312 = !DILocation(line: 691, column: 10, scope: !3302)
!3313 = !DILocation(line: 691, column: 14, scope: !3302)
!3314 = !DILocation(line: 693, column: 28, scope: !3302)
!3315 = !DILocation(line: 693, column: 31, scope: !3302)
!3316 = !DILocation(line: 693, column: 3, scope: !3302)
!3317 = !DILocation(line: 694, column: 7, scope: !3318)
!3318 = distinct !DILexicalBlock(scope: !3302, file: !3, line: 694, column: 7)
!3319 = !DILocation(line: 694, column: 7, scope: !3302)
!3320 = !DILocation(line: 695, column: 38, scope: !3318)
!3321 = !DILocation(line: 695, column: 41, scope: !3318)
!3322 = !DILocation(line: 695, column: 5, scope: !3318)
!3323 = !DILocation(line: 696, column: 10, scope: !3302)
!3324 = !DILocation(line: 696, column: 3, scope: !3302)
!3325 = distinct !DISubprogram(name: "gimple_switch_set_index", scope: !6, file: !6, line: 3200, type: !1994, scopeLine: 3201, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3326 = !DILocalVariable(name: "gs", arg: 1, scope: !3325, file: !6, line: 3200, type: !594)
!3327 = !DILocation(line: 3200, column: 33, scope: !3325)
!3328 = !DILocalVariable(name: "index", arg: 2, scope: !3325, file: !6, line: 3200, type: !666)
!3329 = !DILocation(line: 3200, column: 42, scope: !3325)
!3330 = !DILocation(line: 3203, column: 3, scope: !3325)
!3331 = !DILocation(line: 3204, column: 18, scope: !3325)
!3332 = !DILocation(line: 3204, column: 25, scope: !3325)
!3333 = !DILocation(line: 3204, column: 3, scope: !3325)
!3334 = !DILocation(line: 3205, column: 1, scope: !3325)
!3335 = distinct !DISubprogram(name: "gimple_switch_set_default_label", scope: !6, file: !6, line: 3241, type: !1994, scopeLine: 3242, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3336 = !DILocalVariable(name: "gs", arg: 1, scope: !3335, file: !6, line: 3241, type: !594)
!3337 = !DILocation(line: 3241, column: 41, scope: !3335)
!3338 = !DILocalVariable(name: "label", arg: 2, scope: !3335, file: !6, line: 3241, type: !666)
!3339 = !DILocation(line: 3241, column: 50, scope: !3335)
!3340 = !DILocation(line: 3243, column: 28, scope: !3335)
!3341 = !DILocation(line: 3243, column: 35, scope: !3335)
!3342 = !DILocation(line: 3243, column: 3, scope: !3335)
!3343 = !DILocation(line: 3244, column: 1, scope: !3335)
!3344 = distinct !DISubprogram(name: "gimple_build_switch", scope: !3, file: !3, line: 707, type: !3345, scopeLine: 708, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3345 = !DISubroutineType(types: !3346)
!3346 = !{!594, !7, !666, !666, null}
!3347 = !DILocalVariable(name: "nlabels", arg: 1, scope: !3344, file: !3, line: 707, type: !7)
!3348 = !DILocation(line: 707, column: 31, scope: !3344)
!3349 = !DILocalVariable(name: "index", arg: 2, scope: !3344, file: !3, line: 707, type: !666)
!3350 = !DILocation(line: 707, column: 45, scope: !3344)
!3351 = !DILocalVariable(name: "default_label", arg: 3, scope: !3344, file: !3, line: 707, type: !666)
!3352 = !DILocation(line: 707, column: 57, scope: !3344)
!3353 = !DILocalVariable(name: "al", scope: !3344, file: !3, line: 709, type: !2098)
!3354 = !DILocation(line: 709, column: 11, scope: !3344)
!3355 = !DILocalVariable(name: "i", scope: !3344, file: !3, line: 710, type: !7)
!3356 = !DILocation(line: 710, column: 12, scope: !3344)
!3357 = !DILocalVariable(name: "offset", scope: !3344, file: !3, line: 710, type: !7)
!3358 = !DILocation(line: 710, column: 15, scope: !3344)
!3359 = !DILocalVariable(name: "p", scope: !3344, file: !3, line: 711, type: !594)
!3360 = !DILocation(line: 711, column: 10, scope: !3344)
!3361 = !DILocation(line: 711, column: 43, scope: !3344)
!3362 = !DILocation(line: 711, column: 52, scope: !3344)
!3363 = !DILocation(line: 711, column: 59, scope: !3344)
!3364 = !DILocation(line: 711, column: 14, scope: !3344)
!3365 = !DILocation(line: 714, column: 3, scope: !3344)
!3366 = !DILocation(line: 715, column: 13, scope: !3344)
!3367 = !DILocation(line: 715, column: 27, scope: !3344)
!3368 = !DILocation(line: 715, column: 10, scope: !3344)
!3369 = !DILocation(line: 716, column: 10, scope: !3370)
!3370 = distinct !DILexicalBlock(scope: !3344, file: !3, line: 716, column: 3)
!3371 = !DILocation(line: 716, column: 8, scope: !3370)
!3372 = !DILocation(line: 716, column: 15, scope: !3373)
!3373 = distinct !DILexicalBlock(scope: !3370, file: !3, line: 716, column: 3)
!3374 = !DILocation(line: 716, column: 19, scope: !3373)
!3375 = !DILocation(line: 716, column: 17, scope: !3373)
!3376 = !DILocation(line: 716, column: 3, scope: !3370)
!3377 = !DILocation(line: 717, column: 30, scope: !3373)
!3378 = !DILocation(line: 717, column: 33, scope: !3373)
!3379 = !DILocation(line: 717, column: 37, scope: !3373)
!3380 = !DILocation(line: 717, column: 35, scope: !3373)
!3381 = !DILocation(line: 717, column: 45, scope: !3373)
!3382 = !DILocation(line: 717, column: 5, scope: !3373)
!3383 = !DILocation(line: 716, column: 29, scope: !3373)
!3384 = !DILocation(line: 716, column: 3, scope: !3373)
!3385 = distinct !{!3385, !3376, !3386}
!3386 = !DILocation(line: 717, column: 62, scope: !3370)
!3387 = !DILocation(line: 718, column: 3, scope: !3344)
!3388 = !DILocation(line: 720, column: 10, scope: !3344)
!3389 = !DILocation(line: 720, column: 3, scope: !3344)
!3390 = distinct !DISubprogram(name: "gimple_switch_set_label", scope: !6, file: !6, line: 3222, type: !2069, scopeLine: 3223, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3391 = !DILocalVariable(name: "gs", arg: 1, scope: !3390, file: !6, line: 3222, type: !594)
!3392 = !DILocation(line: 3222, column: 33, scope: !3390)
!3393 = !DILocalVariable(name: "index", arg: 2, scope: !3390, file: !6, line: 3222, type: !7)
!3394 = !DILocation(line: 3222, column: 46, scope: !3390)
!3395 = !DILocalVariable(name: "label", arg: 3, scope: !3390, file: !6, line: 3222, type: !666)
!3396 = !DILocation(line: 3222, column: 58, scope: !3390)
!3397 = !DILocation(line: 3225, column: 3, scope: !3390)
!3398 = !DILocation(line: 3226, column: 3, scope: !3390)
!3399 = !DILocation(line: 3227, column: 18, scope: !3390)
!3400 = !DILocation(line: 3227, column: 22, scope: !3390)
!3401 = !DILocation(line: 3227, column: 28, scope: !3390)
!3402 = !DILocation(line: 3227, column: 33, scope: !3390)
!3403 = !DILocation(line: 3227, column: 3, scope: !3390)
!3404 = !DILocation(line: 3228, column: 1, scope: !3390)
!3405 = distinct !DISubprogram(name: "gimple_build_switch_vec", scope: !3, file: !3, line: 731, type: !3406, scopeLine: 732, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3406 = !DISubroutineType(types: !3407)
!3407 = !{!594, !666, !666, !1779}
!3408 = !DILocalVariable(name: "index", arg: 1, scope: !3405, file: !3, line: 731, type: !666)
!3409 = !DILocation(line: 731, column: 31, scope: !3405)
!3410 = !DILocalVariable(name: "default_label", arg: 2, scope: !3405, file: !3, line: 731, type: !666)
!3411 = !DILocation(line: 731, column: 43, scope: !3405)
!3412 = !DILocalVariable(name: "args", arg: 3, scope: !3405, file: !3, line: 731, type: !1779)
!3413 = !DILocation(line: 731, column: 75, scope: !3405)
!3414 = !DILocalVariable(name: "i", scope: !3405, file: !3, line: 733, type: !7)
!3415 = !DILocation(line: 733, column: 12, scope: !3405)
!3416 = !DILocalVariable(name: "offset", scope: !3405, file: !3, line: 733, type: !7)
!3417 = !DILocation(line: 733, column: 15, scope: !3405)
!3418 = !DILocalVariable(name: "nlabels", scope: !3405, file: !3, line: 733, type: !7)
!3419 = !DILocation(line: 733, column: 23, scope: !3405)
!3420 = !DILocation(line: 733, column: 33, scope: !3405)
!3421 = !DILocalVariable(name: "p", scope: !3405, file: !3, line: 734, type: !594)
!3422 = !DILocation(line: 734, column: 10, scope: !3405)
!3423 = !DILocation(line: 734, column: 43, scope: !3405)
!3424 = !DILocation(line: 734, column: 52, scope: !3405)
!3425 = !DILocation(line: 734, column: 59, scope: !3405)
!3426 = !DILocation(line: 734, column: 14, scope: !3405)
!3427 = !DILocation(line: 737, column: 13, scope: !3405)
!3428 = !DILocation(line: 737, column: 27, scope: !3405)
!3429 = !DILocation(line: 737, column: 10, scope: !3405)
!3430 = !DILocation(line: 738, column: 10, scope: !3431)
!3431 = distinct !DILexicalBlock(scope: !3405, file: !3, line: 738, column: 3)
!3432 = !DILocation(line: 738, column: 8, scope: !3431)
!3433 = !DILocation(line: 738, column: 15, scope: !3434)
!3434 = distinct !DILexicalBlock(scope: !3431, file: !3, line: 738, column: 3)
!3435 = !DILocation(line: 738, column: 19, scope: !3434)
!3436 = !DILocation(line: 738, column: 17, scope: !3434)
!3437 = !DILocation(line: 738, column: 3, scope: !3431)
!3438 = !DILocation(line: 739, column: 30, scope: !3434)
!3439 = !DILocation(line: 739, column: 33, scope: !3434)
!3440 = !DILocation(line: 739, column: 37, scope: !3434)
!3441 = !DILocation(line: 739, column: 35, scope: !3434)
!3442 = !DILocation(line: 739, column: 45, scope: !3434)
!3443 = !DILocation(line: 739, column: 5, scope: !3434)
!3444 = !DILocation(line: 738, column: 29, scope: !3434)
!3445 = !DILocation(line: 738, column: 3, scope: !3434)
!3446 = distinct !{!3446, !3437, !3447}
!3447 = !DILocation(line: 739, column: 70, scope: !3431)
!3448 = !DILocation(line: 741, column: 10, scope: !3405)
!3449 = !DILocation(line: 741, column: 3, scope: !3405)
!3450 = distinct !DISubprogram(name: "gimple_build_eh_dispatch", scope: !3, file: !3, line: 747, type: !3288, scopeLine: 748, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3451 = !DILocalVariable(name: "region", arg: 1, scope: !3450, file: !3, line: 747, type: !746)
!3452 = !DILocation(line: 747, column: 31, scope: !3450)
!3453 = !DILocalVariable(name: "p", scope: !3450, file: !3, line: 749, type: !594)
!3454 = !DILocation(line: 749, column: 10, scope: !3450)
!3455 = !DILocation(line: 749, column: 14, scope: !3450)
!3456 = !DILocation(line: 750, column: 30, scope: !3450)
!3457 = !DILocation(line: 750, column: 3, scope: !3450)
!3458 = !DILocation(line: 750, column: 6, scope: !3450)
!3459 = !DILocation(line: 750, column: 21, scope: !3450)
!3460 = !DILocation(line: 750, column: 28, scope: !3450)
!3461 = !DILocation(line: 751, column: 10, scope: !3450)
!3462 = !DILocation(line: 751, column: 3, scope: !3450)
!3463 = distinct !DISubprogram(name: "gimple_build_debug_bind_stat", scope: !3, file: !3, line: 759, type: !3464, scopeLine: 760, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3464 = !DISubroutineType(types: !3465)
!3465 = !{!594, !666, !666, !594}
!3466 = !DILocalVariable(name: "var", arg: 1, scope: !3463, file: !3, line: 759, type: !666)
!3467 = !DILocation(line: 759, column: 36, scope: !3463)
!3468 = !DILocalVariable(name: "value", arg: 2, scope: !3463, file: !3, line: 759, type: !666)
!3469 = !DILocation(line: 759, column: 46, scope: !3463)
!3470 = !DILocalVariable(name: "stmt", arg: 3, scope: !3463, file: !3, line: 759, type: !594)
!3471 = !DILocation(line: 759, column: 60, scope: !3463)
!3472 = !DILocalVariable(name: "p", scope: !3463, file: !3, line: 761, type: !594)
!3473 = !DILocation(line: 761, column: 10, scope: !3463)
!3474 = !DILocation(line: 761, column: 14, scope: !3463)
!3475 = !DILocation(line: 765, column: 30, scope: !3463)
!3476 = !DILocation(line: 765, column: 33, scope: !3463)
!3477 = !DILocation(line: 765, column: 3, scope: !3463)
!3478 = !DILocation(line: 766, column: 32, scope: !3463)
!3479 = !DILocation(line: 766, column: 35, scope: !3463)
!3480 = !DILocation(line: 766, column: 3, scope: !3463)
!3481 = !DILocation(line: 767, column: 7, scope: !3482)
!3482 = distinct !DILexicalBlock(scope: !3463, file: !3, line: 767, column: 7)
!3483 = !DILocation(line: 767, column: 7, scope: !3463)
!3484 = !DILocation(line: 769, column: 25, scope: !3485)
!3485 = distinct !DILexicalBlock(scope: !3482, file: !3, line: 768, column: 5)
!3486 = !DILocation(line: 769, column: 42, scope: !3485)
!3487 = !DILocation(line: 769, column: 28, scope: !3485)
!3488 = !DILocation(line: 769, column: 7, scope: !3485)
!3489 = !DILocation(line: 770, column: 28, scope: !3485)
!3490 = !DILocation(line: 770, column: 48, scope: !3485)
!3491 = !DILocation(line: 770, column: 31, scope: !3485)
!3492 = !DILocation(line: 770, column: 7, scope: !3485)
!3493 = !DILocation(line: 771, column: 5, scope: !3485)
!3494 = !DILocation(line: 773, column: 10, scope: !3463)
!3495 = !DILocation(line: 773, column: 3, scope: !3463)
!3496 = distinct !DISubprogram(name: "gimple_debug_bind_set_var", scope: !6, file: !6, line: 3306, type: !1994, scopeLine: 3307, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3497 = !DILocalVariable(name: "dbg", arg: 1, scope: !3496, file: !6, line: 3306, type: !594)
!3498 = !DILocation(line: 3306, column: 35, scope: !3496)
!3499 = !DILocalVariable(name: "var", arg: 2, scope: !3496, file: !6, line: 3306, type: !666)
!3500 = !DILocation(line: 3306, column: 45, scope: !3496)
!3501 = !DILocation(line: 3312, column: 18, scope: !3496)
!3502 = !DILocation(line: 3312, column: 26, scope: !3496)
!3503 = !DILocation(line: 3312, column: 3, scope: !3496)
!3504 = !DILocation(line: 3313, column: 1, scope: !3496)
!3505 = distinct !DISubprogram(name: "gimple_debug_bind_set_value", scope: !6, file: !6, line: 3319, type: !1994, scopeLine: 3320, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3506 = !DILocalVariable(name: "dbg", arg: 1, scope: !3505, file: !6, line: 3319, type: !594)
!3507 = !DILocation(line: 3319, column: 37, scope: !3505)
!3508 = !DILocalVariable(name: "value", arg: 2, scope: !3505, file: !6, line: 3319, type: !666)
!3509 = !DILocation(line: 3319, column: 47, scope: !3505)
!3510 = !DILocation(line: 3325, column: 18, scope: !3505)
!3511 = !DILocation(line: 3325, column: 26, scope: !3505)
!3512 = !DILocation(line: 3325, column: 3, scope: !3505)
!3513 = !DILocation(line: 3326, column: 1, scope: !3505)
!3514 = distinct !DISubprogram(name: "gimple_block", scope: !6, file: !6, line: 1121, type: !3515, scopeLine: 1122, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3515 = !DISubroutineType(types: !3516)
!3516 = !{!666, !3517}
!3517 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple", file: !595, line: 60, baseType: !1777)
!3518 = !DILocalVariable(name: "g", arg: 1, scope: !3514, file: !6, line: 1121, type: !3517)
!3519 = !DILocation(line: 1121, column: 28, scope: !3514)
!3520 = !DILocation(line: 1123, column: 10, scope: !3514)
!3521 = !DILocation(line: 1123, column: 13, scope: !3514)
!3522 = !DILocation(line: 1123, column: 20, scope: !3514)
!3523 = !DILocation(line: 1123, column: 3, scope: !3514)
!3524 = distinct !DISubprogram(name: "gimple_set_location", scope: !6, file: !6, line: 1156, type: !3525, scopeLine: 1157, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3525 = !DISubroutineType(types: !3526)
!3526 = !{null, !594, !613}
!3527 = !DILocalVariable(name: "g", arg: 1, scope: !3524, file: !6, line: 1156, type: !594)
!3528 = !DILocation(line: 1156, column: 29, scope: !3524)
!3529 = !DILocalVariable(name: "location", arg: 2, scope: !3524, file: !6, line: 1156, type: !613)
!3530 = !DILocation(line: 1156, column: 43, scope: !3524)
!3531 = !DILocation(line: 1158, column: 24, scope: !3524)
!3532 = !DILocation(line: 1158, column: 3, scope: !3524)
!3533 = !DILocation(line: 1158, column: 6, scope: !3524)
!3534 = !DILocation(line: 1158, column: 13, scope: !3524)
!3535 = !DILocation(line: 1158, column: 22, scope: !3524)
!3536 = !DILocation(line: 1159, column: 1, scope: !3524)
!3537 = distinct !DISubprogram(name: "gimple_location", scope: !6, file: !6, line: 1139, type: !3538, scopeLine: 1140, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3538 = !DISubroutineType(types: !3539)
!3539 = !{!613, !3517}
!3540 = !DILocalVariable(name: "g", arg: 1, scope: !3537, file: !6, line: 1139, type: !3517)
!3541 = !DILocation(line: 1139, column: 31, scope: !3537)
!3542 = !DILocation(line: 1141, column: 10, scope: !3537)
!3543 = !DILocation(line: 1141, column: 13, scope: !3537)
!3544 = !DILocation(line: 1141, column: 20, scope: !3537)
!3545 = !DILocation(line: 1141, column: 3, scope: !3537)
!3546 = distinct !DISubprogram(name: "gimple_build_omp_critical", scope: !3, file: !3, line: 783, type: !3547, scopeLine: 784, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3547 = !DISubroutineType(types: !3548)
!3548 = !{!594, !645, !666}
!3549 = !DILocalVariable(name: "body", arg: 1, scope: !3546, file: !3, line: 783, type: !645)
!3550 = !DILocation(line: 783, column: 39, scope: !3546)
!3551 = !DILocalVariable(name: "name", arg: 2, scope: !3546, file: !3, line: 783, type: !666)
!3552 = !DILocation(line: 783, column: 50, scope: !3546)
!3553 = !DILocalVariable(name: "p", scope: !3546, file: !3, line: 785, type: !594)
!3554 = !DILocation(line: 785, column: 10, scope: !3546)
!3555 = !DILocation(line: 785, column: 14, scope: !3546)
!3556 = !DILocation(line: 786, column: 33, scope: !3546)
!3557 = !DILocation(line: 786, column: 36, scope: !3546)
!3558 = !DILocation(line: 786, column: 3, scope: !3546)
!3559 = !DILocation(line: 787, column: 7, scope: !3560)
!3560 = distinct !DILexicalBlock(scope: !3546, file: !3, line: 787, column: 7)
!3561 = !DILocation(line: 787, column: 7, scope: !3546)
!3562 = !DILocation(line: 788, column: 26, scope: !3560)
!3563 = !DILocation(line: 788, column: 29, scope: !3560)
!3564 = !DILocation(line: 788, column: 5, scope: !3560)
!3565 = !DILocation(line: 790, column: 10, scope: !3546)
!3566 = !DILocation(line: 790, column: 3, scope: !3546)
!3567 = distinct !DISubprogram(name: "gimple_omp_critical_set_name", scope: !6, file: !6, line: 3400, type: !1994, scopeLine: 3401, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3568 = !DILocalVariable(name: "gs", arg: 1, scope: !3567, file: !6, line: 3400, type: !594)
!3569 = !DILocation(line: 3400, column: 38, scope: !3567)
!3570 = !DILocalVariable(name: "name", arg: 2, scope: !3567, file: !6, line: 3400, type: !666)
!3571 = !DILocation(line: 3400, column: 47, scope: !3567)
!3572 = !DILocation(line: 3403, column: 34, scope: !3567)
!3573 = !DILocation(line: 3403, column: 3, scope: !3567)
!3574 = !DILocation(line: 3403, column: 7, scope: !3567)
!3575 = !DILocation(line: 3403, column: 27, scope: !3567)
!3576 = !DILocation(line: 3403, column: 32, scope: !3567)
!3577 = !DILocation(line: 3404, column: 1, scope: !3567)
!3578 = distinct !DISubprogram(name: "gimple_omp_set_body", scope: !6, file: !6, line: 3371, type: !2846, scopeLine: 3372, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3579 = !DILocalVariable(name: "gs", arg: 1, scope: !3578, file: !6, line: 3371, type: !594)
!3580 = !DILocation(line: 3371, column: 29, scope: !3578)
!3581 = !DILocalVariable(name: "body", arg: 2, scope: !3578, file: !6, line: 3371, type: !645)
!3582 = !DILocation(line: 3371, column: 44, scope: !3578)
!3583 = !DILocation(line: 3373, column: 18, scope: !3578)
!3584 = !DILocation(line: 3373, column: 3, scope: !3578)
!3585 = !DILocation(line: 3373, column: 7, scope: !3578)
!3586 = !DILocation(line: 3373, column: 11, scope: !3578)
!3587 = !DILocation(line: 3373, column: 16, scope: !3578)
!3588 = !DILocation(line: 3374, column: 1, scope: !3578)
!3589 = distinct !DISubprogram(name: "gimple_build_omp_for", scope: !3, file: !3, line: 802, type: !3590, scopeLine: 804, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3590 = !DISubroutineType(types: !3591)
!3591 = !{!594, !645, !666, !978, !645}
!3592 = !DILocalVariable(name: "body", arg: 1, scope: !3589, file: !3, line: 802, type: !645)
!3593 = !DILocation(line: 802, column: 34, scope: !3589)
!3594 = !DILocalVariable(name: "clauses", arg: 2, scope: !3589, file: !3, line: 802, type: !666)
!3595 = !DILocation(line: 802, column: 45, scope: !3589)
!3596 = !DILocalVariable(name: "collapse", arg: 3, scope: !3589, file: !3, line: 802, type: !978)
!3597 = !DILocation(line: 802, column: 61, scope: !3589)
!3598 = !DILocalVariable(name: "pre_body", arg: 4, scope: !3589, file: !3, line: 803, type: !645)
!3599 = !DILocation(line: 803, column: 20, scope: !3589)
!3600 = !DILocalVariable(name: "p", scope: !3589, file: !3, line: 805, type: !594)
!3601 = !DILocation(line: 805, column: 10, scope: !3589)
!3602 = !DILocation(line: 805, column: 14, scope: !3589)
!3603 = !DILocation(line: 806, column: 7, scope: !3604)
!3604 = distinct !DILexicalBlock(scope: !3589, file: !3, line: 806, column: 7)
!3605 = !DILocation(line: 806, column: 7, scope: !3589)
!3606 = !DILocation(line: 807, column: 26, scope: !3604)
!3607 = !DILocation(line: 807, column: 29, scope: !3604)
!3608 = !DILocation(line: 807, column: 5, scope: !3604)
!3609 = !DILocation(line: 808, column: 31, scope: !3589)
!3610 = !DILocation(line: 808, column: 34, scope: !3589)
!3611 = !DILocation(line: 808, column: 3, scope: !3589)
!3612 = !DILocation(line: 809, column: 32, scope: !3589)
!3613 = !DILocation(line: 809, column: 3, scope: !3589)
!3614 = !DILocation(line: 809, column: 6, scope: !3589)
!3615 = !DILocation(line: 809, column: 21, scope: !3589)
!3616 = !DILocation(line: 809, column: 30, scope: !3589)
!3617 = !DILocation(line: 810, column: 28, scope: !3589)
!3618 = !DILocation(line: 810, column: 3, scope: !3589)
!3619 = !DILocation(line: 810, column: 6, scope: !3589)
!3620 = !DILocation(line: 810, column: 21, scope: !3589)
!3621 = !DILocation(line: 810, column: 26, scope: !3589)
!3622 = !DILocation(line: 811, column: 7, scope: !3623)
!3623 = distinct !DILexicalBlock(scope: !3589, file: !3, line: 811, column: 7)
!3624 = !DILocation(line: 811, column: 7, scope: !3589)
!3625 = !DILocation(line: 812, column: 34, scope: !3623)
!3626 = !DILocation(line: 812, column: 37, scope: !3623)
!3627 = !DILocation(line: 812, column: 5, scope: !3623)
!3628 = !DILocation(line: 814, column: 10, scope: !3589)
!3629 = !DILocation(line: 814, column: 3, scope: !3589)
!3630 = distinct !DISubprogram(name: "gimple_omp_for_set_clauses", scope: !6, file: !6, line: 3430, type: !1994, scopeLine: 3431, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3631 = !DILocalVariable(name: "gs", arg: 1, scope: !3630, file: !6, line: 3430, type: !594)
!3632 = !DILocation(line: 3430, column: 36, scope: !3630)
!3633 = !DILocalVariable(name: "clauses", arg: 2, scope: !3630, file: !6, line: 3430, type: !666)
!3634 = !DILocation(line: 3430, column: 45, scope: !3630)
!3635 = !DILocation(line: 3433, column: 32, scope: !3630)
!3636 = !DILocation(line: 3433, column: 3, scope: !3630)
!3637 = !DILocation(line: 3433, column: 7, scope: !3630)
!3638 = !DILocation(line: 3433, column: 22, scope: !3630)
!3639 = !DILocation(line: 3433, column: 30, scope: !3630)
!3640 = !DILocation(line: 3434, column: 1, scope: !3630)
!3641 = distinct !DISubprogram(name: "gimple_omp_for_set_pre_body", scope: !6, file: !6, line: 3594, type: !2846, scopeLine: 3595, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3642 = !DILocalVariable(name: "gs", arg: 1, scope: !3641, file: !6, line: 3594, type: !594)
!3643 = !DILocation(line: 3594, column: 37, scope: !3641)
!3644 = !DILocalVariable(name: "pre_body", arg: 2, scope: !3641, file: !6, line: 3594, type: !645)
!3645 = !DILocation(line: 3594, column: 52, scope: !3641)
!3646 = !DILocation(line: 3597, column: 33, scope: !3641)
!3647 = !DILocation(line: 3597, column: 3, scope: !3641)
!3648 = !DILocation(line: 3597, column: 7, scope: !3641)
!3649 = !DILocation(line: 3597, column: 22, scope: !3641)
!3650 = !DILocation(line: 3597, column: 31, scope: !3641)
!3651 = !DILocation(line: 3598, column: 1, scope: !3641)
!3652 = distinct !DISubprogram(name: "gimple_build_omp_parallel", scope: !3, file: !3, line: 826, type: !3653, scopeLine: 828, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3653 = !DISubroutineType(types: !3654)
!3654 = !{!594, !645, !666, !666, !666}
!3655 = !DILocalVariable(name: "body", arg: 1, scope: !3652, file: !3, line: 826, type: !645)
!3656 = !DILocation(line: 826, column: 39, scope: !3652)
!3657 = !DILocalVariable(name: "clauses", arg: 2, scope: !3652, file: !3, line: 826, type: !666)
!3658 = !DILocation(line: 826, column: 50, scope: !3652)
!3659 = !DILocalVariable(name: "child_fn", arg: 3, scope: !3652, file: !3, line: 826, type: !666)
!3660 = !DILocation(line: 826, column: 64, scope: !3652)
!3661 = !DILocalVariable(name: "data_arg", arg: 4, scope: !3652, file: !3, line: 827, type: !666)
!3662 = !DILocation(line: 827, column: 12, scope: !3652)
!3663 = !DILocalVariable(name: "p", scope: !3652, file: !3, line: 829, type: !594)
!3664 = !DILocation(line: 829, column: 10, scope: !3652)
!3665 = !DILocation(line: 829, column: 14, scope: !3652)
!3666 = !DILocation(line: 830, column: 7, scope: !3667)
!3667 = distinct !DILexicalBlock(scope: !3652, file: !3, line: 830, column: 7)
!3668 = !DILocation(line: 830, column: 7, scope: !3652)
!3669 = !DILocation(line: 831, column: 26, scope: !3667)
!3670 = !DILocation(line: 831, column: 29, scope: !3667)
!3671 = !DILocation(line: 831, column: 5, scope: !3667)
!3672 = !DILocation(line: 832, column: 36, scope: !3652)
!3673 = !DILocation(line: 832, column: 39, scope: !3652)
!3674 = !DILocation(line: 832, column: 3, scope: !3652)
!3675 = !DILocation(line: 833, column: 37, scope: !3652)
!3676 = !DILocation(line: 833, column: 40, scope: !3652)
!3677 = !DILocation(line: 833, column: 3, scope: !3652)
!3678 = !DILocation(line: 834, column: 37, scope: !3652)
!3679 = !DILocation(line: 834, column: 40, scope: !3652)
!3680 = !DILocation(line: 834, column: 3, scope: !3652)
!3681 = !DILocation(line: 836, column: 10, scope: !3652)
!3682 = !DILocation(line: 836, column: 3, scope: !3652)
!3683 = distinct !DISubprogram(name: "gimple_omp_parallel_set_clauses", scope: !6, file: !6, line: 3625, type: !1994, scopeLine: 3626, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3684 = !DILocalVariable(name: "gs", arg: 1, scope: !3683, file: !6, line: 3625, type: !594)
!3685 = !DILocation(line: 3625, column: 41, scope: !3683)
!3686 = !DILocalVariable(name: "clauses", arg: 2, scope: !3683, file: !6, line: 3625, type: !666)
!3687 = !DILocation(line: 3625, column: 50, scope: !3683)
!3688 = !DILocation(line: 3628, column: 37, scope: !3683)
!3689 = !DILocation(line: 3628, column: 3, scope: !3683)
!3690 = !DILocation(line: 3628, column: 7, scope: !3683)
!3691 = !DILocation(line: 3628, column: 27, scope: !3683)
!3692 = !DILocation(line: 3628, column: 35, scope: !3683)
!3693 = !DILocation(line: 3629, column: 1, scope: !3683)
!3694 = distinct !DISubprogram(name: "gimple_omp_parallel_set_child_fn", scope: !6, file: !6, line: 3655, type: !1994, scopeLine: 3656, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3695 = !DILocalVariable(name: "gs", arg: 1, scope: !3694, file: !6, line: 3655, type: !594)
!3696 = !DILocation(line: 3655, column: 42, scope: !3694)
!3697 = !DILocalVariable(name: "child_fn", arg: 2, scope: !3694, file: !6, line: 3655, type: !666)
!3698 = !DILocation(line: 3655, column: 51, scope: !3694)
!3699 = !DILocation(line: 3658, column: 38, scope: !3694)
!3700 = !DILocation(line: 3658, column: 3, scope: !3694)
!3701 = !DILocation(line: 3658, column: 7, scope: !3694)
!3702 = !DILocation(line: 3658, column: 27, scope: !3694)
!3703 = !DILocation(line: 3658, column: 36, scope: !3694)
!3704 = !DILocation(line: 3659, column: 1, scope: !3694)
!3705 = distinct !DISubprogram(name: "gimple_omp_parallel_set_data_arg", scope: !6, file: !6, line: 3686, type: !1994, scopeLine: 3687, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3706 = !DILocalVariable(name: "gs", arg: 1, scope: !3705, file: !6, line: 3686, type: !594)
!3707 = !DILocation(line: 3686, column: 42, scope: !3705)
!3708 = !DILocalVariable(name: "data_arg", arg: 2, scope: !3705, file: !6, line: 3686, type: !666)
!3709 = !DILocation(line: 3686, column: 51, scope: !3705)
!3710 = !DILocation(line: 3689, column: 38, scope: !3705)
!3711 = !DILocation(line: 3689, column: 3, scope: !3705)
!3712 = !DILocation(line: 3689, column: 7, scope: !3705)
!3713 = !DILocation(line: 3689, column: 27, scope: !3705)
!3714 = !DILocation(line: 3689, column: 36, scope: !3705)
!3715 = !DILocation(line: 3690, column: 1, scope: !3705)
!3716 = distinct !DISubprogram(name: "gimple_build_omp_task", scope: !3, file: !3, line: 850, type: !3717, scopeLine: 853, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3717 = !DISubroutineType(types: !3718)
!3718 = !{!594, !645, !666, !666, !666, !666, !666, !666}
!3719 = !DILocalVariable(name: "body", arg: 1, scope: !3716, file: !3, line: 850, type: !645)
!3720 = !DILocation(line: 850, column: 35, scope: !3716)
!3721 = !DILocalVariable(name: "clauses", arg: 2, scope: !3716, file: !3, line: 850, type: !666)
!3722 = !DILocation(line: 850, column: 46, scope: !3716)
!3723 = !DILocalVariable(name: "child_fn", arg: 3, scope: !3716, file: !3, line: 850, type: !666)
!3724 = !DILocation(line: 850, column: 60, scope: !3716)
!3725 = !DILocalVariable(name: "data_arg", arg: 4, scope: !3716, file: !3, line: 851, type: !666)
!3726 = !DILocation(line: 851, column: 15, scope: !3716)
!3727 = !DILocalVariable(name: "copy_fn", arg: 5, scope: !3716, file: !3, line: 851, type: !666)
!3728 = !DILocation(line: 851, column: 30, scope: !3716)
!3729 = !DILocalVariable(name: "arg_size", arg: 6, scope: !3716, file: !3, line: 851, type: !666)
!3730 = !DILocation(line: 851, column: 44, scope: !3716)
!3731 = !DILocalVariable(name: "arg_align", arg: 7, scope: !3716, file: !3, line: 852, type: !666)
!3732 = !DILocation(line: 852, column: 15, scope: !3716)
!3733 = !DILocalVariable(name: "p", scope: !3716, file: !3, line: 854, type: !594)
!3734 = !DILocation(line: 854, column: 10, scope: !3716)
!3735 = !DILocation(line: 854, column: 14, scope: !3716)
!3736 = !DILocation(line: 855, column: 7, scope: !3737)
!3737 = distinct !DILexicalBlock(scope: !3716, file: !3, line: 855, column: 7)
!3738 = !DILocation(line: 855, column: 7, scope: !3716)
!3739 = !DILocation(line: 856, column: 26, scope: !3737)
!3740 = !DILocation(line: 856, column: 29, scope: !3737)
!3741 = !DILocation(line: 856, column: 5, scope: !3737)
!3742 = !DILocation(line: 857, column: 32, scope: !3716)
!3743 = !DILocation(line: 857, column: 35, scope: !3716)
!3744 = !DILocation(line: 857, column: 3, scope: !3716)
!3745 = !DILocation(line: 858, column: 33, scope: !3716)
!3746 = !DILocation(line: 858, column: 36, scope: !3716)
!3747 = !DILocation(line: 858, column: 3, scope: !3716)
!3748 = !DILocation(line: 859, column: 33, scope: !3716)
!3749 = !DILocation(line: 859, column: 36, scope: !3716)
!3750 = !DILocation(line: 859, column: 3, scope: !3716)
!3751 = !DILocation(line: 860, column: 32, scope: !3716)
!3752 = !DILocation(line: 860, column: 35, scope: !3716)
!3753 = !DILocation(line: 860, column: 3, scope: !3716)
!3754 = !DILocation(line: 861, column: 33, scope: !3716)
!3755 = !DILocation(line: 861, column: 36, scope: !3716)
!3756 = !DILocation(line: 861, column: 3, scope: !3716)
!3757 = !DILocation(line: 862, column: 34, scope: !3716)
!3758 = !DILocation(line: 862, column: 37, scope: !3716)
!3759 = !DILocation(line: 862, column: 3, scope: !3716)
!3760 = !DILocation(line: 864, column: 10, scope: !3716)
!3761 = !DILocation(line: 864, column: 3, scope: !3716)
!3762 = distinct !DISubprogram(name: "gimple_omp_task_set_clauses", scope: !6, file: !6, line: 3717, type: !1994, scopeLine: 3718, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3763 = !DILocalVariable(name: "gs", arg: 1, scope: !3762, file: !6, line: 3717, type: !594)
!3764 = !DILocation(line: 3717, column: 37, scope: !3762)
!3765 = !DILocalVariable(name: "clauses", arg: 2, scope: !3762, file: !6, line: 3717, type: !666)
!3766 = !DILocation(line: 3717, column: 46, scope: !3762)
!3767 = !DILocation(line: 3720, column: 37, scope: !3762)
!3768 = !DILocation(line: 3720, column: 3, scope: !3762)
!3769 = !DILocation(line: 3720, column: 7, scope: !3762)
!3770 = !DILocation(line: 3720, column: 27, scope: !3762)
!3771 = !DILocation(line: 3720, column: 35, scope: !3762)
!3772 = !DILocation(line: 3721, column: 1, scope: !3762)
!3773 = distinct !DISubprogram(name: "gimple_omp_task_set_child_fn", scope: !6, file: !6, line: 3747, type: !1994, scopeLine: 3748, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3774 = !DILocalVariable(name: "gs", arg: 1, scope: !3773, file: !6, line: 3747, type: !594)
!3775 = !DILocation(line: 3747, column: 38, scope: !3773)
!3776 = !DILocalVariable(name: "child_fn", arg: 2, scope: !3773, file: !6, line: 3747, type: !666)
!3777 = !DILocation(line: 3747, column: 47, scope: !3773)
!3778 = !DILocation(line: 3750, column: 38, scope: !3773)
!3779 = !DILocation(line: 3750, column: 3, scope: !3773)
!3780 = !DILocation(line: 3750, column: 7, scope: !3773)
!3781 = !DILocation(line: 3750, column: 27, scope: !3773)
!3782 = !DILocation(line: 3750, column: 36, scope: !3773)
!3783 = !DILocation(line: 3751, column: 1, scope: !3773)
!3784 = distinct !DISubprogram(name: "gimple_omp_task_set_data_arg", scope: !6, file: !6, line: 3778, type: !1994, scopeLine: 3779, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3785 = !DILocalVariable(name: "gs", arg: 1, scope: !3784, file: !6, line: 3778, type: !594)
!3786 = !DILocation(line: 3778, column: 38, scope: !3784)
!3787 = !DILocalVariable(name: "data_arg", arg: 2, scope: !3784, file: !6, line: 3778, type: !666)
!3788 = !DILocation(line: 3778, column: 47, scope: !3784)
!3789 = !DILocation(line: 3781, column: 38, scope: !3784)
!3790 = !DILocation(line: 3781, column: 3, scope: !3784)
!3791 = !DILocation(line: 3781, column: 7, scope: !3784)
!3792 = !DILocation(line: 3781, column: 27, scope: !3784)
!3793 = !DILocation(line: 3781, column: 36, scope: !3784)
!3794 = !DILocation(line: 3782, column: 1, scope: !3784)
!3795 = distinct !DISubprogram(name: "gimple_omp_task_set_copy_fn", scope: !6, file: !6, line: 3909, type: !1994, scopeLine: 3910, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3796 = !DILocalVariable(name: "gs", arg: 1, scope: !3795, file: !6, line: 3909, type: !594)
!3797 = !DILocation(line: 3909, column: 37, scope: !3795)
!3798 = !DILocalVariable(name: "copy_fn", arg: 2, scope: !3795, file: !6, line: 3909, type: !666)
!3799 = !DILocation(line: 3909, column: 46, scope: !3795)
!3800 = !DILocation(line: 3912, column: 33, scope: !3795)
!3801 = !DILocation(line: 3912, column: 3, scope: !3795)
!3802 = !DILocation(line: 3912, column: 7, scope: !3795)
!3803 = !DILocation(line: 3912, column: 23, scope: !3795)
!3804 = !DILocation(line: 3912, column: 31, scope: !3795)
!3805 = !DILocation(line: 3913, column: 1, scope: !3795)
!3806 = distinct !DISubprogram(name: "gimple_omp_task_set_arg_size", scope: !6, file: !6, line: 3939, type: !1994, scopeLine: 3940, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3807 = !DILocalVariable(name: "gs", arg: 1, scope: !3806, file: !6, line: 3939, type: !594)
!3808 = !DILocation(line: 3939, column: 38, scope: !3806)
!3809 = !DILocalVariable(name: "arg_size", arg: 2, scope: !3806, file: !6, line: 3939, type: !666)
!3810 = !DILocation(line: 3939, column: 47, scope: !3806)
!3811 = !DILocation(line: 3942, column: 34, scope: !3806)
!3812 = !DILocation(line: 3942, column: 3, scope: !3806)
!3813 = !DILocation(line: 3942, column: 7, scope: !3806)
!3814 = !DILocation(line: 3942, column: 23, scope: !3806)
!3815 = !DILocation(line: 3942, column: 32, scope: !3806)
!3816 = !DILocation(line: 3943, column: 1, scope: !3806)
!3817 = distinct !DISubprogram(name: "gimple_omp_task_set_arg_align", scope: !6, file: !6, line: 3969, type: !1994, scopeLine: 3970, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3818 = !DILocalVariable(name: "gs", arg: 1, scope: !3817, file: !6, line: 3969, type: !594)
!3819 = !DILocation(line: 3969, column: 39, scope: !3817)
!3820 = !DILocalVariable(name: "arg_align", arg: 2, scope: !3817, file: !6, line: 3969, type: !666)
!3821 = !DILocation(line: 3969, column: 48, scope: !3817)
!3822 = !DILocation(line: 3972, column: 35, scope: !3817)
!3823 = !DILocation(line: 3972, column: 3, scope: !3817)
!3824 = !DILocation(line: 3972, column: 7, scope: !3817)
!3825 = !DILocation(line: 3972, column: 23, scope: !3817)
!3826 = !DILocation(line: 3972, column: 33, scope: !3817)
!3827 = !DILocation(line: 3973, column: 1, scope: !3817)
!3828 = distinct !DISubprogram(name: "gimple_build_omp_section", scope: !3, file: !3, line: 873, type: !3261, scopeLine: 874, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3829 = !DILocalVariable(name: "body", arg: 1, scope: !3828, file: !3, line: 873, type: !645)
!3830 = !DILocation(line: 873, column: 38, scope: !3828)
!3831 = !DILocalVariable(name: "p", scope: !3828, file: !3, line: 875, type: !594)
!3832 = !DILocation(line: 875, column: 10, scope: !3828)
!3833 = !DILocation(line: 875, column: 14, scope: !3828)
!3834 = !DILocation(line: 876, column: 7, scope: !3835)
!3835 = distinct !DILexicalBlock(scope: !3828, file: !3, line: 876, column: 7)
!3836 = !DILocation(line: 876, column: 7, scope: !3828)
!3837 = !DILocation(line: 877, column: 26, scope: !3835)
!3838 = !DILocation(line: 877, column: 29, scope: !3835)
!3839 = !DILocation(line: 877, column: 5, scope: !3835)
!3840 = !DILocation(line: 879, column: 10, scope: !3828)
!3841 = !DILocation(line: 879, column: 3, scope: !3828)
!3842 = distinct !DISubprogram(name: "gimple_build_omp_master", scope: !3, file: !3, line: 888, type: !3261, scopeLine: 889, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3843 = !DILocalVariable(name: "body", arg: 1, scope: !3842, file: !3, line: 888, type: !645)
!3844 = !DILocation(line: 888, column: 37, scope: !3842)
!3845 = !DILocalVariable(name: "p", scope: !3842, file: !3, line: 890, type: !594)
!3846 = !DILocation(line: 890, column: 10, scope: !3842)
!3847 = !DILocation(line: 890, column: 14, scope: !3842)
!3848 = !DILocation(line: 891, column: 7, scope: !3849)
!3849 = distinct !DILexicalBlock(scope: !3842, file: !3, line: 891, column: 7)
!3850 = !DILocation(line: 891, column: 7, scope: !3842)
!3851 = !DILocation(line: 892, column: 26, scope: !3849)
!3852 = !DILocation(line: 892, column: 29, scope: !3849)
!3853 = !DILocation(line: 892, column: 5, scope: !3849)
!3854 = !DILocation(line: 894, column: 10, scope: !3842)
!3855 = !DILocation(line: 894, column: 3, scope: !3842)
!3856 = distinct !DISubprogram(name: "gimple_build_omp_continue", scope: !3, file: !3, line: 904, type: !2402, scopeLine: 905, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3857 = !DILocalVariable(name: "control_def", arg: 1, scope: !3856, file: !3, line: 904, type: !666)
!3858 = !DILocation(line: 904, column: 33, scope: !3856)
!3859 = !DILocalVariable(name: "control_use", arg: 2, scope: !3856, file: !3, line: 904, type: !666)
!3860 = !DILocation(line: 904, column: 51, scope: !3856)
!3861 = !DILocalVariable(name: "p", scope: !3856, file: !3, line: 906, type: !594)
!3862 = !DILocation(line: 906, column: 10, scope: !3856)
!3863 = !DILocation(line: 906, column: 14, scope: !3856)
!3864 = !DILocation(line: 907, column: 40, scope: !3856)
!3865 = !DILocation(line: 907, column: 43, scope: !3856)
!3866 = !DILocation(line: 907, column: 3, scope: !3856)
!3867 = !DILocation(line: 908, column: 40, scope: !3856)
!3868 = !DILocation(line: 908, column: 43, scope: !3856)
!3869 = !DILocation(line: 908, column: 3, scope: !3856)
!3870 = !DILocation(line: 909, column: 10, scope: !3856)
!3871 = !DILocation(line: 909, column: 3, scope: !3856)
!3872 = distinct !DISubprogram(name: "gimple_omp_continue_set_control_def", scope: !6, file: !6, line: 4204, type: !1994, scopeLine: 4205, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3873 = !DILocalVariable(name: "g", arg: 1, scope: !3872, file: !6, line: 4204, type: !594)
!3874 = !DILocation(line: 4204, column: 45, scope: !3872)
!3875 = !DILocalVariable(name: "def", arg: 2, scope: !3872, file: !6, line: 4204, type: !666)
!3876 = !DILocation(line: 4204, column: 53, scope: !3872)
!3877 = !DILocation(line: 4207, column: 40, scope: !3872)
!3878 = !DILocation(line: 4207, column: 3, scope: !3872)
!3879 = !DILocation(line: 4207, column: 6, scope: !3872)
!3880 = !DILocation(line: 4207, column: 26, scope: !3872)
!3881 = !DILocation(line: 4207, column: 38, scope: !3872)
!3882 = !DILocation(line: 4208, column: 1, scope: !3872)
!3883 = distinct !DISubprogram(name: "gimple_omp_continue_set_control_use", scope: !6, file: !6, line: 4234, type: !1994, scopeLine: 4235, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3884 = !DILocalVariable(name: "g", arg: 1, scope: !3883, file: !6, line: 4234, type: !594)
!3885 = !DILocation(line: 4234, column: 45, scope: !3883)
!3886 = !DILocalVariable(name: "use", arg: 2, scope: !3883, file: !6, line: 4234, type: !666)
!3887 = !DILocation(line: 4234, column: 53, scope: !3883)
!3888 = !DILocation(line: 4237, column: 40, scope: !3883)
!3889 = !DILocation(line: 4237, column: 3, scope: !3883)
!3890 = !DILocation(line: 4237, column: 6, scope: !3883)
!3891 = !DILocation(line: 4237, column: 26, scope: !3883)
!3892 = !DILocation(line: 4237, column: 38, scope: !3883)
!3893 = !DILocation(line: 4238, column: 1, scope: !3883)
!3894 = distinct !DISubprogram(name: "gimple_build_omp_ordered", scope: !3, file: !3, line: 918, type: !3261, scopeLine: 919, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3895 = !DILocalVariable(name: "body", arg: 1, scope: !3894, file: !3, line: 918, type: !645)
!3896 = !DILocation(line: 918, column: 38, scope: !3894)
!3897 = !DILocalVariable(name: "p", scope: !3894, file: !3, line: 920, type: !594)
!3898 = !DILocation(line: 920, column: 10, scope: !3894)
!3899 = !DILocation(line: 920, column: 14, scope: !3894)
!3900 = !DILocation(line: 921, column: 7, scope: !3901)
!3901 = distinct !DILexicalBlock(scope: !3894, file: !3, line: 921, column: 7)
!3902 = !DILocation(line: 921, column: 7, scope: !3894)
!3903 = !DILocation(line: 922, column: 26, scope: !3901)
!3904 = !DILocation(line: 922, column: 29, scope: !3901)
!3905 = !DILocation(line: 922, column: 5, scope: !3901)
!3906 = !DILocation(line: 924, column: 10, scope: !3894)
!3907 = !DILocation(line: 924, column: 3, scope: !3894)
!3908 = distinct !DISubprogram(name: "gimple_build_omp_return", scope: !3, file: !3, line: 932, type: !3909, scopeLine: 933, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3909 = !DISubroutineType(types: !3910)
!3910 = !{!594, !769}
!3911 = !DILocalVariable(name: "wait_p", arg: 1, scope: !3908, file: !3, line: 932, type: !769)
!3912 = !DILocation(line: 932, column: 31, scope: !3908)
!3913 = !DILocalVariable(name: "p", scope: !3908, file: !3, line: 934, type: !594)
!3914 = !DILocation(line: 934, column: 10, scope: !3908)
!3915 = !DILocation(line: 934, column: 14, scope: !3908)
!3916 = !DILocation(line: 935, column: 7, scope: !3917)
!3917 = distinct !DILexicalBlock(scope: !3908, file: !3, line: 935, column: 7)
!3918 = !DILocation(line: 935, column: 7, scope: !3908)
!3919 = !DILocation(line: 936, column: 35, scope: !3917)
!3920 = !DILocation(line: 936, column: 5, scope: !3917)
!3921 = !DILocation(line: 938, column: 10, scope: !3908)
!3922 = !DILocation(line: 938, column: 3, scope: !3908)
!3923 = distinct !DISubprogram(name: "gimple_omp_return_set_nowait", scope: !6, file: !6, line: 1529, type: !3924, scopeLine: 1530, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3924 = !DISubroutineType(types: !3925)
!3925 = !{null, !594}
!3926 = !DILocalVariable(name: "s", arg: 1, scope: !3923, file: !6, line: 1529, type: !594)
!3927 = !DILocation(line: 1529, column: 38, scope: !3923)
!3928 = !DILocation(line: 1532, column: 3, scope: !3923)
!3929 = !DILocation(line: 1532, column: 6, scope: !3923)
!3930 = !DILocation(line: 1532, column: 13, scope: !3923)
!3931 = !DILocation(line: 1532, column: 21, scope: !3923)
!3932 = !DILocation(line: 1533, column: 1, scope: !3923)
!3933 = distinct !DISubprogram(name: "gimple_build_omp_sections", scope: !3, file: !3, line: 949, type: !3547, scopeLine: 950, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3934 = !DILocalVariable(name: "body", arg: 1, scope: !3933, file: !3, line: 949, type: !645)
!3935 = !DILocation(line: 949, column: 39, scope: !3933)
!3936 = !DILocalVariable(name: "clauses", arg: 2, scope: !3933, file: !3, line: 949, type: !666)
!3937 = !DILocation(line: 949, column: 50, scope: !3933)
!3938 = !DILocalVariable(name: "p", scope: !3933, file: !3, line: 951, type: !594)
!3939 = !DILocation(line: 951, column: 10, scope: !3933)
!3940 = !DILocation(line: 951, column: 14, scope: !3933)
!3941 = !DILocation(line: 952, column: 7, scope: !3942)
!3942 = distinct !DILexicalBlock(scope: !3933, file: !3, line: 952, column: 7)
!3943 = !DILocation(line: 952, column: 7, scope: !3933)
!3944 = !DILocation(line: 953, column: 26, scope: !3942)
!3945 = !DILocation(line: 953, column: 29, scope: !3942)
!3946 = !DILocation(line: 953, column: 5, scope: !3942)
!3947 = !DILocation(line: 954, column: 36, scope: !3933)
!3948 = !DILocation(line: 954, column: 39, scope: !3933)
!3949 = !DILocation(line: 954, column: 3, scope: !3933)
!3950 = !DILocation(line: 956, column: 10, scope: !3933)
!3951 = !DILocation(line: 956, column: 3, scope: !3933)
!3952 = distinct !DISubprogram(name: "gimple_omp_sections_set_clauses", scope: !6, file: !6, line: 4030, type: !1994, scopeLine: 4031, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3953 = !DILocalVariable(name: "gs", arg: 1, scope: !3952, file: !6, line: 4030, type: !594)
!3954 = !DILocation(line: 4030, column: 41, scope: !3952)
!3955 = !DILocalVariable(name: "clauses", arg: 2, scope: !3952, file: !6, line: 4030, type: !666)
!3956 = !DILocation(line: 4030, column: 50, scope: !3952)
!3957 = !DILocation(line: 4033, column: 37, scope: !3952)
!3958 = !DILocation(line: 4033, column: 3, scope: !3952)
!3959 = !DILocation(line: 4033, column: 7, scope: !3952)
!3960 = !DILocation(line: 4033, column: 27, scope: !3952)
!3961 = !DILocation(line: 4033, column: 35, scope: !3952)
!3962 = !DILocation(line: 4034, column: 1, scope: !3952)
!3963 = distinct !DISubprogram(name: "gimple_build_omp_sections_switch", scope: !3, file: !3, line: 963, type: !2801, scopeLine: 964, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3964 = !DILocation(line: 965, column: 10, scope: !3963)
!3965 = !DILocation(line: 965, column: 3, scope: !3963)
!3966 = distinct !DISubprogram(name: "gimple_build_omp_single", scope: !3, file: !3, line: 976, type: !3547, scopeLine: 977, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3967 = !DILocalVariable(name: "body", arg: 1, scope: !3966, file: !3, line: 976, type: !645)
!3968 = !DILocation(line: 976, column: 37, scope: !3966)
!3969 = !DILocalVariable(name: "clauses", arg: 2, scope: !3966, file: !3, line: 976, type: !666)
!3970 = !DILocation(line: 976, column: 48, scope: !3966)
!3971 = !DILocalVariable(name: "p", scope: !3966, file: !3, line: 978, type: !594)
!3972 = !DILocation(line: 978, column: 10, scope: !3966)
!3973 = !DILocation(line: 978, column: 14, scope: !3966)
!3974 = !DILocation(line: 979, column: 7, scope: !3975)
!3975 = distinct !DILexicalBlock(scope: !3966, file: !3, line: 979, column: 7)
!3976 = !DILocation(line: 979, column: 7, scope: !3966)
!3977 = !DILocation(line: 980, column: 26, scope: !3975)
!3978 = !DILocation(line: 980, column: 29, scope: !3975)
!3979 = !DILocation(line: 980, column: 5, scope: !3975)
!3980 = !DILocation(line: 981, column: 34, scope: !3966)
!3981 = !DILocation(line: 981, column: 37, scope: !3966)
!3982 = !DILocation(line: 981, column: 3, scope: !3966)
!3983 = !DILocation(line: 983, column: 10, scope: !3966)
!3984 = !DILocation(line: 983, column: 3, scope: !3966)
!3985 = distinct !DISubprogram(name: "gimple_omp_single_set_clauses", scope: !6, file: !6, line: 3999, type: !1994, scopeLine: 4000, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3986 = !DILocalVariable(name: "gs", arg: 1, scope: !3985, file: !6, line: 3999, type: !594)
!3987 = !DILocation(line: 3999, column: 39, scope: !3985)
!3988 = !DILocalVariable(name: "clauses", arg: 2, scope: !3985, file: !6, line: 3999, type: !666)
!3989 = !DILocation(line: 3999, column: 48, scope: !3985)
!3990 = !DILocation(line: 4002, column: 35, scope: !3985)
!3991 = !DILocation(line: 4002, column: 3, scope: !3985)
!3992 = !DILocation(line: 4002, column: 7, scope: !3985)
!3993 = !DILocation(line: 4002, column: 25, scope: !3985)
!3994 = !DILocation(line: 4002, column: 33, scope: !3985)
!3995 = !DILocation(line: 4003, column: 1, scope: !3985)
!3996 = distinct !DISubprogram(name: "gimple_build_omp_atomic_load", scope: !3, file: !3, line: 990, type: !2402, scopeLine: 991, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!3997 = !DILocalVariable(name: "lhs", arg: 1, scope: !3996, file: !3, line: 990, type: !666)
!3998 = !DILocation(line: 990, column: 36, scope: !3996)
!3999 = !DILocalVariable(name: "rhs", arg: 2, scope: !3996, file: !3, line: 990, type: !666)
!4000 = !DILocation(line: 990, column: 46, scope: !3996)
!4001 = !DILocalVariable(name: "p", scope: !3996, file: !3, line: 992, type: !594)
!4002 = !DILocation(line: 992, column: 10, scope: !3996)
!4003 = !DILocation(line: 992, column: 14, scope: !3996)
!4004 = !DILocation(line: 993, column: 35, scope: !3996)
!4005 = !DILocation(line: 993, column: 38, scope: !3996)
!4006 = !DILocation(line: 993, column: 3, scope: !3996)
!4007 = !DILocation(line: 994, column: 35, scope: !3996)
!4008 = !DILocation(line: 994, column: 38, scope: !3996)
!4009 = !DILocation(line: 994, column: 3, scope: !3996)
!4010 = !DILocation(line: 995, column: 10, scope: !3996)
!4011 = !DILocation(line: 995, column: 3, scope: !3996)
!4012 = distinct !DISubprogram(name: "gimple_omp_atomic_load_set_lhs", scope: !6, file: !6, line: 4126, type: !1994, scopeLine: 4127, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!4013 = !DILocalVariable(name: "g", arg: 1, scope: !4012, file: !6, line: 4126, type: !594)
!4014 = !DILocation(line: 4126, column: 40, scope: !4012)
!4015 = !DILocalVariable(name: "lhs", arg: 2, scope: !4012, file: !6, line: 4126, type: !666)
!4016 = !DILocation(line: 4126, column: 48, scope: !4012)
!4017 = !DILocation(line: 4129, column: 35, scope: !4012)
!4018 = !DILocation(line: 4129, column: 3, scope: !4012)
!4019 = !DILocation(line: 4129, column: 6, scope: !4012)
!4020 = !DILocation(line: 4129, column: 29, scope: !4012)
!4021 = !DILocation(line: 4129, column: 33, scope: !4012)
!4022 = !DILocation(line: 4130, column: 1, scope: !4012)
!4023 = distinct !DISubprogram(name: "gimple_omp_atomic_load_set_rhs", scope: !6, file: !6, line: 4156, type: !1994, scopeLine: 4157, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!4024 = !DILocalVariable(name: "g", arg: 1, scope: !4023, file: !6, line: 4156, type: !594)
!4025 = !DILocation(line: 4156, column: 40, scope: !4023)
!4026 = !DILocalVariable(name: "rhs", arg: 2, scope: !4023, file: !6, line: 4156, type: !666)
!4027 = !DILocation(line: 4156, column: 48, scope: !4023)
!4028 = !DILocation(line: 4159, column: 35, scope: !4023)
!4029 = !DILocation(line: 4159, column: 3, scope: !4023)
!4030 = !DILocation(line: 4159, column: 6, scope: !4023)
!4031 = !DILocation(line: 4159, column: 29, scope: !4023)
!4032 = !DILocation(line: 4159, column: 33, scope: !4023)
!4033 = !DILocation(line: 4160, column: 1, scope: !4023)
!4034 = distinct !DISubprogram(name: "gimple_build_omp_atomic_store", scope: !3, file: !3, line: 1003, type: !1959, scopeLine: 1004, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!4035 = !DILocalVariable(name: "val", arg: 1, scope: !4034, file: !3, line: 1003, type: !666)
!4036 = !DILocation(line: 1003, column: 37, scope: !4034)
!4037 = !DILocalVariable(name: "p", scope: !4034, file: !3, line: 1005, type: !594)
!4038 = !DILocation(line: 1005, column: 10, scope: !4034)
!4039 = !DILocation(line: 1005, column: 14, scope: !4034)
!4040 = !DILocation(line: 1006, column: 36, scope: !4034)
!4041 = !DILocation(line: 1006, column: 39, scope: !4034)
!4042 = !DILocation(line: 1006, column: 3, scope: !4034)
!4043 = !DILocation(line: 1007, column: 10, scope: !4034)
!4044 = !DILocation(line: 1007, column: 3, scope: !4034)
!4045 = distinct !DISubprogram(name: "gimple_omp_atomic_store_set_val", scope: !6, file: !6, line: 4096, type: !1994, scopeLine: 4097, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!4046 = !DILocalVariable(name: "g", arg: 1, scope: !4045, file: !6, line: 4096, type: !594)
!4047 = !DILocation(line: 4096, column: 41, scope: !4045)
!4048 = !DILocalVariable(name: "val", arg: 2, scope: !4045, file: !6, line: 4096, type: !666)
!4049 = !DILocation(line: 4096, column: 49, scope: !4045)
!4050 = !DILocation(line: 4099, column: 36, scope: !4045)
!4051 = !DILocation(line: 4099, column: 3, scope: !4045)
!4052 = !DILocation(line: 4099, column: 6, scope: !4045)
!4053 = !DILocation(line: 4099, column: 30, scope: !4045)
!4054 = !DILocation(line: 4099, column: 34, scope: !4045)
!4055 = !DILocation(line: 4100, column: 1, scope: !4045)
!4056 = distinct !DISubprogram(name: "gimple_build_predict", scope: !3, file: !3, line: 1014, type: !4057, scopeLine: 1015, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!4057 = !DISubroutineType(types: !4058)
!4058 = !{!594, !476, !508}
!4059 = !DILocalVariable(name: "predictor", arg: 1, scope: !4056, file: !3, line: 1014, type: !476)
!4060 = !DILocation(line: 1014, column: 41, scope: !4056)
!4061 = !DILocalVariable(name: "outcome", arg: 2, scope: !4056, file: !3, line: 1014, type: !508)
!4062 = !DILocation(line: 1014, column: 68, scope: !4056)
!4063 = !DILocalVariable(name: "p", scope: !4056, file: !3, line: 1016, type: !594)
!4064 = !DILocation(line: 1016, column: 10, scope: !4056)
!4065 = !DILocation(line: 1016, column: 14, scope: !4056)
!4066 = !DILocation(line: 1019, column: 33, scope: !4056)
!4067 = !DILocation(line: 1019, column: 36, scope: !4056)
!4068 = !DILocation(line: 1019, column: 3, scope: !4056)
!4069 = !DILocation(line: 1020, column: 31, scope: !4056)
!4070 = !DILocation(line: 1020, column: 34, scope: !4056)
!4071 = !DILocation(line: 1020, column: 3, scope: !4056)
!4072 = !DILocation(line: 1021, column: 10, scope: !4056)
!4073 = !DILocation(line: 1021, column: 3, scope: !4056)
!4074 = distinct !DISubprogram(name: "gimple_predict_set_predictor", scope: !6, file: !6, line: 4331, type: !4075, scopeLine: 4332, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!4075 = !DISubroutineType(types: !4076)
!4076 = !{null, !594, !476}
!4077 = !DILocalVariable(name: "gs", arg: 1, scope: !4074, file: !6, line: 4331, type: !594)
!4078 = !DILocation(line: 4331, column: 38, scope: !4074)
!4079 = !DILocalVariable(name: "predictor", arg: 2, scope: !4074, file: !6, line: 4331, type: !476)
!4080 = !DILocation(line: 4331, column: 60, scope: !4074)
!4081 = !DILocation(line: 4334, column: 25, scope: !4074)
!4082 = !DILocation(line: 4334, column: 29, scope: !4074)
!4083 = !DILocation(line: 4334, column: 36, scope: !4074)
!4084 = !DILocation(line: 4334, column: 44, scope: !4074)
!4085 = !DILocation(line: 4335, column: 23, scope: !4074)
!4086 = !DILocation(line: 4335, column: 10, scope: !4074)
!4087 = !DILocation(line: 4334, column: 3, scope: !4074)
!4088 = !DILocation(line: 4334, column: 7, scope: !4074)
!4089 = !DILocation(line: 4334, column: 14, scope: !4074)
!4090 = !DILocation(line: 4334, column: 22, scope: !4074)
!4091 = !DILocation(line: 4336, column: 1, scope: !4074)
!4092 = distinct !DISubprogram(name: "gimple_predict_set_outcome", scope: !6, file: !6, line: 4352, type: !4093, scopeLine: 4353, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!4093 = !DISubroutineType(types: !4094)
!4094 = !{null, !594, !508}
!4095 = !DILocalVariable(name: "gs", arg: 1, scope: !4092, file: !6, line: 4352, type: !594)
!4096 = !DILocation(line: 4352, column: 36, scope: !4092)
!4097 = !DILocalVariable(name: "outcome", arg: 2, scope: !4092, file: !6, line: 4352, type: !508)
!4098 = !DILocation(line: 4352, column: 56, scope: !4092)
!4099 = !DILocation(line: 4355, column: 7, scope: !4100)
!4100 = distinct !DILexicalBlock(scope: !4092, file: !6, line: 4355, column: 7)
!4101 = !DILocation(line: 4355, column: 15, scope: !4100)
!4102 = !DILocation(line: 4355, column: 7, scope: !4092)
!4103 = !DILocation(line: 4356, column: 5, scope: !4100)
!4104 = !DILocation(line: 4356, column: 9, scope: !4100)
!4105 = !DILocation(line: 4356, column: 16, scope: !4100)
!4106 = !DILocation(line: 4356, column: 24, scope: !4100)
!4107 = !DILocation(line: 4358, column: 5, scope: !4100)
!4108 = !DILocation(line: 4358, column: 9, scope: !4100)
!4109 = !DILocation(line: 4358, column: 16, scope: !4100)
!4110 = !DILocation(line: 4358, column: 24, scope: !4100)
!4111 = !DILocation(line: 4359, column: 1, scope: !4092)
!4112 = distinct !DISubprogram(name: "gimple_seq_alloc", scope: !3, file: !3, line: 1049, type: !4113, scopeLine: 1050, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!4113 = !DISubroutineType(types: !4114)
!4114 = !{!645}
!4115 = !DILocalVariable(name: "seq", scope: !4112, file: !3, line: 1051, type: !645)
!4116 = !DILocation(line: 1051, column: 14, scope: !4112)
!4117 = !DILocation(line: 1051, column: 20, scope: !4112)
!4118 = !DILocation(line: 1052, column: 7, scope: !4119)
!4119 = distinct !DILexicalBlock(scope: !4112, file: !3, line: 1052, column: 7)
!4120 = !DILocation(line: 1052, column: 7, scope: !4112)
!4121 = !DILocation(line: 1054, column: 26, scope: !4122)
!4122 = distinct !DILexicalBlock(scope: !4119, file: !3, line: 1053, column: 5)
!4123 = !DILocation(line: 1054, column: 44, scope: !4122)
!4124 = !DILocation(line: 1054, column: 24, scope: !4122)
!4125 = !DILocation(line: 1055, column: 7, scope: !4122)
!4126 = !DILocation(line: 1056, column: 15, scope: !4122)
!4127 = !DILocation(line: 1056, column: 7, scope: !4122)
!4128 = !DILocation(line: 1057, column: 5, scope: !4122)
!4129 = !DILocation(line: 1060, column: 26, scope: !4130)
!4130 = distinct !DILexicalBlock(scope: !4119, file: !3, line: 1059, column: 5)
!4131 = !DILocation(line: 1060, column: 13, scope: !4130)
!4132 = !DILocation(line: 1060, column: 11, scope: !4130)
!4133 = !DILocation(line: 1067, column: 10, scope: !4112)
!4134 = !DILocation(line: 1067, column: 3, scope: !4112)
!4135 = distinct !DISubprogram(name: "gimple_seq_free", scope: !3, file: !3, line: 1073, type: !4136, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!4136 = !DISubroutineType(types: !4137)
!4137 = !{null, !645}
!4138 = !DILocalVariable(name: "seq", arg: 1, scope: !4135, file: !3, line: 1073, type: !645)
!4139 = !DILocation(line: 1073, column: 29, scope: !4135)
!4140 = !DILocation(line: 1075, column: 7, scope: !4141)
!4141 = distinct !DILexicalBlock(scope: !4135, file: !3, line: 1075, column: 7)
!4142 = !DILocation(line: 1075, column: 11, scope: !4141)
!4143 = !DILocation(line: 1075, column: 7, scope: !4135)
!4144 = !DILocation(line: 1076, column: 5, scope: !4141)
!4145 = !DILocation(line: 1078, column: 3, scope: !4135)
!4146 = !DILocation(line: 1079, column: 3, scope: !4135)
!4147 = !DILocation(line: 1083, column: 3, scope: !4135)
!4148 = !DILocation(line: 1086, column: 20, scope: !4135)
!4149 = !DILocation(line: 1086, column: 3, scope: !4135)
!4150 = !DILocation(line: 1086, column: 8, scope: !4135)
!4151 = !DILocation(line: 1086, column: 18, scope: !4135)
!4152 = !DILocation(line: 1087, column: 22, scope: !4135)
!4153 = !DILocation(line: 1087, column: 20, scope: !4135)
!4154 = !DILocation(line: 1088, column: 1, scope: !4135)
!4155 = distinct !DISubprogram(name: "gimple_seq_first", scope: !6, file: !6, line: 159, type: !4156, scopeLine: 160, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!4156 = !DISubroutineType(types: !4157)
!4157 = !{!650, !2548}
!4158 = !DILocalVariable(name: "s", arg: 1, scope: !4155, file: !6, line: 159, type: !2548)
!4159 = !DILocation(line: 159, column: 36, scope: !4155)
!4160 = !DILocation(line: 161, column: 10, scope: !4155)
!4161 = !DILocation(line: 161, column: 14, scope: !4155)
!4162 = !DILocation(line: 161, column: 17, scope: !4155)
!4163 = !DILocation(line: 161, column: 3, scope: !4155)
!4164 = distinct !DISubprogram(name: "gimple_seq_last", scope: !6, file: !6, line: 178, type: !4156, scopeLine: 179, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!4165 = !DILocalVariable(name: "s", arg: 1, scope: !4164, file: !6, line: 178, type: !2548)
!4166 = !DILocation(line: 178, column: 35, scope: !4164)
!4167 = !DILocation(line: 180, column: 10, scope: !4164)
!4168 = !DILocation(line: 180, column: 14, scope: !4164)
!4169 = !DILocation(line: 180, column: 17, scope: !4164)
!4170 = !DILocation(line: 180, column: 3, scope: !4164)
!4171 = distinct !DISubprogram(name: "gimple_seq_add_stmt", scope: !3, file: !3, line: 1095, type: !4172, scopeLine: 1096, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!4172 = !DISubroutineType(types: !4173)
!4173 = !{null, !2526, !594}
!4174 = !DILocalVariable(name: "seq_p", arg: 1, scope: !4171, file: !3, line: 1095, type: !2526)
!4175 = !DILocation(line: 1095, column: 34, scope: !4171)
!4176 = !DILocalVariable(name: "gs", arg: 2, scope: !4171, file: !3, line: 1095, type: !594)
!4177 = !DILocation(line: 1095, column: 48, scope: !4171)
!4178 = !DILocalVariable(name: "si", scope: !4171, file: !3, line: 1097, type: !1809)
!4179 = !DILocation(line: 1097, column: 24, scope: !4171)
!4180 = !DILocation(line: 1099, column: 7, scope: !4181)
!4181 = distinct !DILexicalBlock(scope: !4171, file: !3, line: 1099, column: 7)
!4182 = !DILocation(line: 1099, column: 10, scope: !4181)
!4183 = !DILocation(line: 1099, column: 7, scope: !4171)
!4184 = !DILocation(line: 1100, column: 5, scope: !4181)
!4185 = !DILocation(line: 1102, column: 8, scope: !4186)
!4186 = distinct !DILexicalBlock(scope: !4171, file: !3, line: 1102, column: 7)
!4187 = !DILocation(line: 1102, column: 7, scope: !4186)
!4188 = !DILocation(line: 1102, column: 14, scope: !4186)
!4189 = !DILocation(line: 1102, column: 7, scope: !4171)
!4190 = !DILocation(line: 1103, column: 14, scope: !4186)
!4191 = !DILocation(line: 1103, column: 6, scope: !4186)
!4192 = !DILocation(line: 1103, column: 12, scope: !4186)
!4193 = !DILocation(line: 1103, column: 5, scope: !4186)
!4194 = !DILocation(line: 1105, column: 19, scope: !4171)
!4195 = !DILocation(line: 1105, column: 18, scope: !4171)
!4196 = !DILocation(line: 1105, column: 8, scope: !4171)
!4197 = !DILocation(line: 1106, column: 26, scope: !4171)
!4198 = !DILocation(line: 1106, column: 3, scope: !4171)
!4199 = !DILocation(line: 1107, column: 1, scope: !4171)
!4200 = distinct !DISubprogram(name: "gsi_last", scope: !6, file: !6, line: 4435, type: !4201, scopeLine: 4436, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!4201 = !DISubroutineType(types: !4202)
!4202 = !{!1809, !645}
!4203 = !DILocalVariable(name: "seq", arg: 1, scope: !4200, file: !6, line: 4435, type: !645)
!4204 = !DILocation(line: 4435, column: 22, scope: !4200)
!4205 = !DILocalVariable(name: "i", scope: !4200, file: !6, line: 4437, type: !1809)
!4206 = !DILocation(line: 4437, column: 24, scope: !4200)
!4207 = !DILocation(line: 4439, column: 28, scope: !4200)
!4208 = !DILocation(line: 4439, column: 11, scope: !4200)
!4209 = !DILocation(line: 4439, column: 5, scope: !4200)
!4210 = !DILocation(line: 4439, column: 9, scope: !4200)
!4211 = !DILocation(line: 4440, column: 11, scope: !4200)
!4212 = !DILocation(line: 4440, column: 5, scope: !4200)
!4213 = !DILocation(line: 4440, column: 9, scope: !4200)
!4214 = !DILocation(line: 4441, column: 13, scope: !4200)
!4215 = !DILocation(line: 4441, column: 11, scope: !4200)
!4216 = !DILocation(line: 4441, column: 17, scope: !4200)
!4217 = !DILocation(line: 4441, column: 22, scope: !4200)
!4218 = !DILocation(line: 4441, column: 27, scope: !4200)
!4219 = !DILocation(line: 4441, column: 20, scope: !4200)
!4220 = !DILocation(line: 4441, column: 10, scope: !4200)
!4221 = !DILocation(line: 4441, column: 48, scope: !4200)
!4222 = !DILocation(line: 4441, column: 53, scope: !4200)
!4223 = !DILocation(line: 4441, column: 35, scope: !4200)
!4224 = !DILocation(line: 4441, column: 5, scope: !4200)
!4225 = !DILocation(line: 4441, column: 8, scope: !4200)
!4226 = !DILocation(line: 4443, column: 3, scope: !4200)
!4227 = distinct !DISubprogram(name: "gimple_seq_add_seq", scope: !3, file: !3, line: 1114, type: !4228, scopeLine: 1115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!4228 = !DISubroutineType(types: !4229)
!4229 = !{null, !2526, !645}
!4230 = !DILocalVariable(name: "dst_p", arg: 1, scope: !4227, file: !3, line: 1114, type: !2526)
!4231 = !DILocation(line: 1114, column: 33, scope: !4227)
!4232 = !DILocalVariable(name: "src", arg: 2, scope: !4227, file: !3, line: 1114, type: !645)
!4233 = !DILocation(line: 1114, column: 51, scope: !4227)
!4234 = !DILocalVariable(name: "si", scope: !4227, file: !3, line: 1116, type: !1809)
!4235 = !DILocation(line: 1116, column: 24, scope: !4227)
!4236 = !DILocation(line: 1118, column: 7, scope: !4237)
!4237 = distinct !DILexicalBlock(scope: !4227, file: !3, line: 1118, column: 7)
!4238 = !DILocation(line: 1118, column: 11, scope: !4237)
!4239 = !DILocation(line: 1118, column: 7, scope: !4227)
!4240 = !DILocation(line: 1119, column: 5, scope: !4237)
!4241 = !DILocation(line: 1121, column: 8, scope: !4242)
!4242 = distinct !DILexicalBlock(scope: !4227, file: !3, line: 1121, column: 7)
!4243 = !DILocation(line: 1121, column: 7, scope: !4242)
!4244 = !DILocation(line: 1121, column: 14, scope: !4242)
!4245 = !DILocation(line: 1121, column: 7, scope: !4227)
!4246 = !DILocation(line: 1122, column: 14, scope: !4242)
!4247 = !DILocation(line: 1122, column: 6, scope: !4242)
!4248 = !DILocation(line: 1122, column: 12, scope: !4242)
!4249 = !DILocation(line: 1122, column: 5, scope: !4242)
!4250 = !DILocation(line: 1124, column: 19, scope: !4227)
!4251 = !DILocation(line: 1124, column: 18, scope: !4227)
!4252 = !DILocation(line: 1124, column: 8, scope: !4227)
!4253 = !DILocation(line: 1125, column: 30, scope: !4227)
!4254 = !DILocation(line: 1125, column: 3, scope: !4227)
!4255 = !DILocation(line: 1126, column: 1, scope: !4227)
!4256 = distinct !DISubprogram(name: "empty_body_p", scope: !3, file: !3, line: 1146, type: !4257, scopeLine: 1147, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!4257 = !DISubroutineType(types: !4258)
!4258 = !{!769, !645}
!4259 = !DILocalVariable(name: "body", arg: 1, scope: !4256, file: !3, line: 1146, type: !645)
!4260 = !DILocation(line: 1146, column: 26, scope: !4256)
!4261 = !DILocalVariable(name: "i", scope: !4256, file: !3, line: 1148, type: !1809)
!4262 = !DILocation(line: 1148, column: 24, scope: !4256)
!4263 = !DILocation(line: 1150, column: 27, scope: !4264)
!4264 = distinct !DILexicalBlock(scope: !4256, file: !3, line: 1150, column: 7)
!4265 = !DILocation(line: 1150, column: 7, scope: !4264)
!4266 = !DILocation(line: 1150, column: 7, scope: !4256)
!4267 = !DILocation(line: 1151, column: 5, scope: !4264)
!4268 = !DILocation(line: 1152, column: 23, scope: !4269)
!4269 = distinct !DILexicalBlock(scope: !4256, file: !3, line: 1152, column: 3)
!4270 = !DILocation(line: 1152, column: 12, scope: !4269)
!4271 = !DILocation(line: 1152, column: 8, scope: !4269)
!4272 = !DILocation(line: 1152, column: 31, scope: !4273)
!4273 = distinct !DILexicalBlock(scope: !4269, file: !3, line: 1152, column: 3)
!4274 = !DILocation(line: 1152, column: 30, scope: !4273)
!4275 = !DILocation(line: 1152, column: 3, scope: !4269)
!4276 = !DILocation(line: 1153, column: 24, scope: !4277)
!4277 = distinct !DILexicalBlock(scope: !4273, file: !3, line: 1153, column: 9)
!4278 = !DILocation(line: 1153, column: 10, scope: !4277)
!4279 = !DILocation(line: 1154, column: 2, scope: !4277)
!4280 = !DILocation(line: 1154, column: 23, scope: !4277)
!4281 = !DILocation(line: 1154, column: 6, scope: !4277)
!4282 = !DILocation(line: 1153, column: 9, scope: !4273)
!4283 = !DILocation(line: 1155, column: 7, scope: !4277)
!4284 = !DILocation(line: 1154, column: 35, scope: !4277)
!4285 = !DILocation(line: 1152, column: 46, scope: !4273)
!4286 = !DILocation(line: 1152, column: 3, scope: !4273)
!4287 = distinct !{!4287, !4275, !4288}
!4288 = !DILocation(line: 1155, column: 14, scope: !4269)
!4289 = !DILocation(line: 1157, column: 3, scope: !4256)
!4290 = !DILocation(line: 1158, column: 1, scope: !4256)
!4291 = distinct !DISubprogram(name: "gimple_seq_empty_p", scope: !6, file: !6, line: 215, type: !4292, scopeLine: 216, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!4292 = !DISubroutineType(types: !4293)
!4293 = !{!769, !2548}
!4294 = !DILocalVariable(name: "s", arg: 1, scope: !4291, file: !6, line: 215, type: !2548)
!4295 = !DILocation(line: 215, column: 38, scope: !4291)
!4296 = !DILocation(line: 217, column: 10, scope: !4291)
!4297 = !DILocation(line: 217, column: 12, scope: !4291)
!4298 = !DILocation(line: 217, column: 20, scope: !4291)
!4299 = !DILocation(line: 217, column: 23, scope: !4291)
!4300 = !DILocation(line: 217, column: 26, scope: !4291)
!4301 = !DILocation(line: 217, column: 32, scope: !4291)
!4302 = !DILocation(line: 217, column: 3, scope: !4291)
!4303 = distinct !DISubprogram(name: "gsi_start", scope: !6, file: !6, line: 4403, type: !4201, scopeLine: 4404, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!4304 = !DILocalVariable(name: "seq", arg: 1, scope: !4303, file: !6, line: 4403, type: !645)
!4305 = !DILocation(line: 4403, column: 23, scope: !4303)
!4306 = !DILocalVariable(name: "i", scope: !4303, file: !6, line: 4405, type: !1809)
!4307 = !DILocation(line: 4405, column: 24, scope: !4303)
!4308 = !DILocation(line: 4407, column: 29, scope: !4303)
!4309 = !DILocation(line: 4407, column: 11, scope: !4303)
!4310 = !DILocation(line: 4407, column: 5, scope: !4303)
!4311 = !DILocation(line: 4407, column: 9, scope: !4303)
!4312 = !DILocation(line: 4408, column: 11, scope: !4303)
!4313 = !DILocation(line: 4408, column: 5, scope: !4303)
!4314 = !DILocation(line: 4408, column: 9, scope: !4303)
!4315 = !DILocation(line: 4409, column: 13, scope: !4303)
!4316 = !DILocation(line: 4409, column: 11, scope: !4303)
!4317 = !DILocation(line: 4409, column: 17, scope: !4303)
!4318 = !DILocation(line: 4409, column: 22, scope: !4303)
!4319 = !DILocation(line: 4409, column: 27, scope: !4303)
!4320 = !DILocation(line: 4409, column: 20, scope: !4303)
!4321 = !DILocation(line: 4409, column: 10, scope: !4303)
!4322 = !DILocation(line: 4409, column: 48, scope: !4303)
!4323 = !DILocation(line: 4409, column: 53, scope: !4303)
!4324 = !DILocation(line: 4409, column: 35, scope: !4303)
!4325 = !DILocation(line: 4409, column: 5, scope: !4303)
!4326 = !DILocation(line: 4409, column: 8, scope: !4303)
!4327 = !DILocation(line: 4411, column: 3, scope: !4303)
!4328 = distinct !DISubprogram(name: "gsi_end_p", scope: !6, file: !6, line: 4467, type: !4329, scopeLine: 4468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!4329 = !DISubroutineType(types: !4330)
!4330 = !{!769, !1809}
!4331 = !DILocalVariable(name: "i", arg: 1, scope: !4328, file: !6, line: 4467, type: !1809)
!4332 = !DILocation(line: 4467, column: 33, scope: !4328)
!4333 = !DILocation(line: 4469, column: 12, scope: !4328)
!4334 = !DILocation(line: 4469, column: 16, scope: !4328)
!4335 = !DILocation(line: 4469, column: 10, scope: !4328)
!4336 = !DILocation(line: 4469, column: 3, scope: !4328)
!4337 = distinct !DISubprogram(name: "empty_stmt_p", scope: !3, file: !3, line: 1133, type: !4338, scopeLine: 1134, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!4338 = !DISubroutineType(types: !4339)
!4339 = !{!769, !594}
!4340 = !DILocalVariable(name: "stmt", arg: 1, scope: !4337, file: !3, line: 1133, type: !594)
!4341 = !DILocation(line: 1133, column: 22, scope: !4337)
!4342 = !DILocation(line: 1135, column: 20, scope: !4343)
!4343 = distinct !DILexicalBlock(scope: !4337, file: !3, line: 1135, column: 7)
!4344 = !DILocation(line: 1135, column: 7, scope: !4343)
!4345 = !DILocation(line: 1135, column: 26, scope: !4343)
!4346 = !DILocation(line: 1135, column: 7, scope: !4337)
!4347 = !DILocation(line: 1136, column: 5, scope: !4343)
!4348 = !DILocation(line: 1137, column: 20, scope: !4349)
!4349 = distinct !DILexicalBlock(scope: !4337, file: !3, line: 1137, column: 7)
!4350 = !DILocation(line: 1137, column: 7, scope: !4349)
!4351 = !DILocation(line: 1137, column: 26, scope: !4349)
!4352 = !DILocation(line: 1137, column: 7, scope: !4337)
!4353 = !DILocation(line: 1138, column: 44, scope: !4349)
!4354 = !DILocation(line: 1138, column: 26, scope: !4349)
!4355 = !DILocation(line: 1138, column: 12, scope: !4349)
!4356 = !DILocation(line: 1138, column: 5, scope: !4349)
!4357 = !DILocation(line: 1139, column: 3, scope: !4337)
!4358 = !DILocation(line: 1140, column: 1, scope: !4337)
!4359 = distinct !DISubprogram(name: "gsi_stmt", scope: !6, file: !6, line: 4501, type: !4360, scopeLine: 4502, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!4360 = !DISubroutineType(types: !4361)
!4361 = !{!594, !1809}
!4362 = !DILocalVariable(name: "i", arg: 1, scope: !4359, file: !6, line: 4501, type: !1809)
!4363 = !DILocation(line: 4501, column: 32, scope: !4359)
!4364 = !DILocation(line: 4503, column: 12, scope: !4359)
!4365 = !DILocation(line: 4503, column: 17, scope: !4359)
!4366 = !DILocation(line: 4503, column: 3, scope: !4359)
!4367 = distinct !DISubprogram(name: "is_gimple_debug", scope: !6, file: !6, line: 3249, type: !4368, scopeLine: 3250, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!4368 = !DISubroutineType(types: !4369)
!4369 = !{!769, !3517}
!4370 = !DILocalVariable(name: "gs", arg: 1, scope: !4367, file: !6, line: 3249, type: !3517)
!4371 = !DILocation(line: 3249, column: 31, scope: !4367)
!4372 = !DILocation(line: 3251, column: 23, scope: !4367)
!4373 = !DILocation(line: 3251, column: 10, scope: !4367)
!4374 = !DILocation(line: 3251, column: 27, scope: !4367)
!4375 = !DILocation(line: 3251, column: 3, scope: !4367)
!4376 = distinct !DISubprogram(name: "gsi_next", scope: !6, file: !6, line: 4485, type: !4377, scopeLine: 4486, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!4377 = !DISubroutineType(types: !4378)
!4378 = !{null, !4379}
!4379 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1809, size: 64)
!4380 = !DILocalVariable(name: "i", arg: 1, scope: !4376, file: !6, line: 4485, type: !4379)
!4381 = !DILocation(line: 4485, column: 33, scope: !4376)
!4382 = !DILocation(line: 4487, column: 12, scope: !4376)
!4383 = !DILocation(line: 4487, column: 15, scope: !4376)
!4384 = !DILocation(line: 4487, column: 20, scope: !4376)
!4385 = !DILocation(line: 4487, column: 3, scope: !4376)
!4386 = !DILocation(line: 4487, column: 6, scope: !4376)
!4387 = !DILocation(line: 4487, column: 10, scope: !4376)
!4388 = !DILocation(line: 4488, column: 1, scope: !4376)
!4389 = distinct !DISubprogram(name: "gimple_seq_copy", scope: !3, file: !3, line: 1164, type: !4390, scopeLine: 1165, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!4390 = !DISubroutineType(types: !4391)
!4391 = !{!645, !645}
!4392 = !DILocalVariable(name: "src", arg: 1, scope: !4389, file: !3, line: 1164, type: !645)
!4393 = !DILocation(line: 1164, column: 29, scope: !4389)
!4394 = !DILocalVariable(name: "gsi", scope: !4389, file: !3, line: 1166, type: !1809)
!4395 = !DILocation(line: 1166, column: 24, scope: !4389)
!4396 = !DILocalVariable(name: "new_seq", scope: !4389, file: !3, line: 1167, type: !645)
!4397 = !DILocation(line: 1167, column: 14, scope: !4389)
!4398 = !DILocation(line: 1167, column: 24, scope: !4389)
!4399 = !DILocalVariable(name: "stmt", scope: !4389, file: !3, line: 1168, type: !594)
!4400 = !DILocation(line: 1168, column: 10, scope: !4389)
!4401 = !DILocation(line: 1170, column: 25, scope: !4402)
!4402 = distinct !DILexicalBlock(scope: !4389, file: !3, line: 1170, column: 3)
!4403 = !DILocation(line: 1170, column: 14, scope: !4402)
!4404 = !DILocation(line: 1170, column: 8, scope: !4402)
!4405 = !DILocation(line: 1170, column: 32, scope: !4406)
!4406 = distinct !DILexicalBlock(scope: !4402, file: !3, line: 1170, column: 3)
!4407 = !DILocation(line: 1170, column: 31, scope: !4406)
!4408 = !DILocation(line: 1170, column: 3, scope: !4402)
!4409 = !DILocation(line: 1172, column: 27, scope: !4410)
!4410 = distinct !DILexicalBlock(scope: !4406, file: !3, line: 1171, column: 5)
!4411 = !DILocation(line: 1172, column: 14, scope: !4410)
!4412 = !DILocation(line: 1172, column: 12, scope: !4410)
!4413 = !DILocation(line: 1173, column: 38, scope: !4410)
!4414 = !DILocation(line: 1173, column: 7, scope: !4410)
!4415 = !DILocation(line: 1174, column: 5, scope: !4410)
!4416 = !DILocation(line: 1170, column: 49, scope: !4406)
!4417 = !DILocation(line: 1170, column: 3, scope: !4406)
!4418 = distinct !{!4418, !4408, !4419}
!4419 = !DILocation(line: 1174, column: 5, scope: !4402)
!4420 = !DILocation(line: 1176, column: 10, scope: !4389)
!4421 = !DILocation(line: 1176, column: 3, scope: !4389)
!4422 = distinct !DISubprogram(name: "gimple_copy", scope: !3, file: !3, line: 1975, type: !4423, scopeLine: 1976, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!4423 = !DISubroutineType(types: !4424)
!4424 = !{!594, !594}
!4425 = !DILocalVariable(name: "stmt", arg: 1, scope: !4422, file: !3, line: 1975, type: !594)
!4426 = !DILocation(line: 1975, column: 21, scope: !4422)
!4427 = !DILocalVariable(name: "code", scope: !4422, file: !3, line: 1977, type: !276)
!4428 = !DILocation(line: 1977, column: 20, scope: !4422)
!4429 = !DILocation(line: 1977, column: 40, scope: !4422)
!4430 = !DILocation(line: 1977, column: 27, scope: !4422)
!4431 = !DILocalVariable(name: "num_ops", scope: !4422, file: !3, line: 1978, type: !7)
!4432 = !DILocation(line: 1978, column: 12, scope: !4422)
!4433 = !DILocation(line: 1978, column: 38, scope: !4422)
!4434 = !DILocation(line: 1978, column: 22, scope: !4422)
!4435 = !DILocalVariable(name: "copy", scope: !4422, file: !3, line: 1979, type: !594)
!4436 = !DILocation(line: 1979, column: 10, scope: !4422)
!4437 = !DILocation(line: 1979, column: 17, scope: !4422)
!4438 = !DILocalVariable(name: "i", scope: !4422, file: !3, line: 1980, type: !7)
!4439 = !DILocation(line: 1980, column: 12, scope: !4422)
!4440 = !DILocation(line: 1983, column: 11, scope: !4422)
!4441 = !DILocation(line: 1983, column: 3, scope: !4422)
!4442 = !DILocation(line: 1983, column: 17, scope: !4422)
!4443 = !DILocation(line: 1983, column: 36, scope: !4422)
!4444 = !DILocation(line: 1983, column: 23, scope: !4422)
!4445 = !DILocation(line: 1986, column: 33, scope: !4446)
!4446 = distinct !DILexicalBlock(scope: !4422, file: !3, line: 1986, column: 7)
!4447 = !DILocation(line: 1986, column: 7, scope: !4446)
!4448 = !DILocation(line: 1986, column: 7, scope: !4422)
!4449 = !DILocalVariable(name: "new_seq", scope: !4450, file: !3, line: 1988, type: !645)
!4450 = distinct !DILexicalBlock(scope: !4446, file: !3, line: 1987, column: 5)
!4451 = !DILocation(line: 1988, column: 18, scope: !4450)
!4452 = !DILocalVariable(name: "t", scope: !4450, file: !3, line: 1989, type: !666)
!4453 = !DILocation(line: 1989, column: 12, scope: !4450)
!4454 = !DILocation(line: 1991, column: 28, scope: !4450)
!4455 = !DILocation(line: 1991, column: 15, scope: !4450)
!4456 = !DILocation(line: 1991, column: 7, scope: !4450)
!4457 = !DILocation(line: 1994, column: 49, scope: !4458)
!4458 = distinct !DILexicalBlock(scope: !4450, file: !3, line: 1992, column: 2)
!4459 = !DILocation(line: 1994, column: 31, scope: !4458)
!4460 = !DILocation(line: 1994, column: 14, scope: !4458)
!4461 = !DILocation(line: 1994, column: 12, scope: !4458)
!4462 = !DILocation(line: 1995, column: 26, scope: !4458)
!4463 = !DILocation(line: 1995, column: 32, scope: !4458)
!4464 = !DILocation(line: 1995, column: 4, scope: !4458)
!4465 = !DILocation(line: 1996, column: 26, scope: !4458)
!4466 = !DILocation(line: 1996, column: 64, scope: !4458)
!4467 = !DILocation(line: 1996, column: 46, scope: !4458)
!4468 = !DILocation(line: 1996, column: 32, scope: !4458)
!4469 = !DILocation(line: 1996, column: 4, scope: !4458)
!4470 = !DILocation(line: 1997, column: 27, scope: !4458)
!4471 = !DILocation(line: 1997, column: 52, scope: !4458)
!4472 = !DILocation(line: 1997, column: 33, scope: !4458)
!4473 = !DILocation(line: 1997, column: 4, scope: !4458)
!4474 = !DILocation(line: 1998, column: 4, scope: !4458)
!4475 = !DILocation(line: 2001, column: 53, scope: !4458)
!4476 = !DILocation(line: 2001, column: 31, scope: !4458)
!4477 = !DILocation(line: 2001, column: 14, scope: !4458)
!4478 = !DILocation(line: 2001, column: 12, scope: !4458)
!4479 = !DILocation(line: 2002, column: 30, scope: !4458)
!4480 = !DILocation(line: 2002, column: 36, scope: !4458)
!4481 = !DILocation(line: 2002, column: 4, scope: !4458)
!4482 = !DILocation(line: 2003, column: 42, scope: !4458)
!4483 = !DILocation(line: 2003, column: 22, scope: !4458)
!4484 = !DILocation(line: 2003, column: 8, scope: !4458)
!4485 = !DILocation(line: 2003, column: 6, scope: !4458)
!4486 = !DILocation(line: 2004, column: 28, scope: !4458)
!4487 = !DILocation(line: 2004, column: 34, scope: !4458)
!4488 = !DILocation(line: 2004, column: 4, scope: !4458)
!4489 = !DILocation(line: 2005, column: 4, scope: !4458)
!4490 = !DILocation(line: 2008, column: 57, scope: !4458)
!4491 = !DILocation(line: 2008, column: 31, scope: !4458)
!4492 = !DILocation(line: 2008, column: 14, scope: !4458)
!4493 = !DILocation(line: 2008, column: 12, scope: !4458)
!4494 = !DILocation(line: 2009, column: 34, scope: !4458)
!4495 = !DILocation(line: 2009, column: 40, scope: !4458)
!4496 = !DILocation(line: 2009, column: 4, scope: !4458)
!4497 = !DILocation(line: 2010, column: 46, scope: !4458)
!4498 = !DILocation(line: 2010, column: 22, scope: !4458)
!4499 = !DILocation(line: 2010, column: 8, scope: !4458)
!4500 = !DILocation(line: 2010, column: 6, scope: !4458)
!4501 = !DILocation(line: 2011, column: 32, scope: !4458)
!4502 = !DILocation(line: 2011, column: 38, scope: !4458)
!4503 = !DILocation(line: 2011, column: 4, scope: !4458)
!4504 = !DILocation(line: 2012, column: 4, scope: !4458)
!4505 = !DILocation(line: 2015, column: 48, scope: !4458)
!4506 = !DILocation(line: 2015, column: 31, scope: !4458)
!4507 = !DILocation(line: 2015, column: 14, scope: !4458)
!4508 = !DILocation(line: 2015, column: 12, scope: !4458)
!4509 = !DILocation(line: 2016, column: 25, scope: !4458)
!4510 = !DILocation(line: 2016, column: 31, scope: !4458)
!4511 = !DILocation(line: 2016, column: 4, scope: !4458)
!4512 = !DILocation(line: 2017, column: 51, scope: !4458)
!4513 = !DILocation(line: 2017, column: 31, scope: !4458)
!4514 = !DILocation(line: 2017, column: 14, scope: !4458)
!4515 = !DILocation(line: 2017, column: 12, scope: !4458)
!4516 = !DILocation(line: 2018, column: 28, scope: !4458)
!4517 = !DILocation(line: 2018, column: 34, scope: !4458)
!4518 = !DILocation(line: 2018, column: 4, scope: !4458)
!4519 = !DILocation(line: 2019, column: 4, scope: !4458)
!4520 = !DILocation(line: 2022, column: 56, scope: !4458)
!4521 = !DILocation(line: 2022, column: 31, scope: !4458)
!4522 = !DILocation(line: 2022, column: 14, scope: !4458)
!4523 = !DILocation(line: 2022, column: 12, scope: !4458)
!4524 = !DILocation(line: 2023, column: 33, scope: !4458)
!4525 = !DILocation(line: 2023, column: 39, scope: !4458)
!4526 = !DILocation(line: 2023, column: 4, scope: !4458)
!4527 = !DILocation(line: 2024, column: 46, scope: !4458)
!4528 = !DILocation(line: 2024, column: 22, scope: !4458)
!4529 = !DILocation(line: 2024, column: 8, scope: !4458)
!4530 = !DILocation(line: 2024, column: 6, scope: !4458)
!4531 = !DILocation(line: 2025, column: 32, scope: !4458)
!4532 = !DILocation(line: 2025, column: 38, scope: !4458)
!4533 = !DILocation(line: 2025, column: 4, scope: !4458)
!4534 = !DILocation(line: 2027, column: 8, scope: !4458)
!4535 = !DILocation(line: 2026, column: 4, scope: !4458)
!4536 = !DILocation(line: 2026, column: 10, scope: !4458)
!4537 = !DILocation(line: 2026, column: 25, scope: !4458)
!4538 = !DILocation(line: 2027, column: 6, scope: !4458)
!4539 = !DILocation(line: 2029, column: 11, scope: !4540)
!4540 = distinct !DILexicalBlock(scope: !4458, file: !3, line: 2029, column: 4)
!4541 = !DILocation(line: 2029, column: 9, scope: !4540)
!4542 = !DILocation(line: 2029, column: 16, scope: !4543)
!4543 = distinct !DILexicalBlock(scope: !4540, file: !3, line: 2029, column: 4)
!4544 = !DILocation(line: 2029, column: 45, scope: !4543)
!4545 = !DILocation(line: 2029, column: 20, scope: !4543)
!4546 = !DILocation(line: 2029, column: 18, scope: !4543)
!4547 = !DILocation(line: 2029, column: 4, scope: !4540)
!4548 = !DILocation(line: 2031, column: 33, scope: !4549)
!4549 = distinct !DILexicalBlock(scope: !4543, file: !3, line: 2030, column: 6)
!4550 = !DILocation(line: 2031, column: 39, scope: !4549)
!4551 = !DILocation(line: 2032, column: 33, scope: !4549)
!4552 = !DILocation(line: 2032, column: 39, scope: !4549)
!4553 = !DILocation(line: 2032, column: 12, scope: !4549)
!4554 = !DILocation(line: 2031, column: 8, scope: !4549)
!4555 = !DILocation(line: 2033, column: 34, scope: !4549)
!4556 = !DILocation(line: 2033, column: 40, scope: !4549)
!4557 = !DILocation(line: 2034, column: 28, scope: !4549)
!4558 = !DILocation(line: 2034, column: 34, scope: !4549)
!4559 = !DILocation(line: 2034, column: 6, scope: !4549)
!4560 = !DILocation(line: 2033, column: 8, scope: !4549)
!4561 = !DILocation(line: 2035, column: 50, scope: !4549)
!4562 = !DILocation(line: 2035, column: 56, scope: !4549)
!4563 = !DILocation(line: 2035, column: 26, scope: !4549)
!4564 = !DILocation(line: 2035, column: 12, scope: !4549)
!4565 = !DILocation(line: 2035, column: 10, scope: !4549)
!4566 = !DILocation(line: 2036, column: 36, scope: !4549)
!4567 = !DILocation(line: 2036, column: 42, scope: !4549)
!4568 = !DILocation(line: 2036, column: 45, scope: !4549)
!4569 = !DILocation(line: 2036, column: 8, scope: !4549)
!4570 = !DILocation(line: 2037, column: 48, scope: !4549)
!4571 = !DILocation(line: 2037, column: 54, scope: !4549)
!4572 = !DILocation(line: 2037, column: 26, scope: !4549)
!4573 = !DILocation(line: 2037, column: 12, scope: !4549)
!4574 = !DILocation(line: 2037, column: 10, scope: !4549)
!4575 = !DILocation(line: 2038, column: 34, scope: !4549)
!4576 = !DILocation(line: 2038, column: 40, scope: !4549)
!4577 = !DILocation(line: 2038, column: 43, scope: !4549)
!4578 = !DILocation(line: 2038, column: 8, scope: !4549)
!4579 = !DILocation(line: 2039, column: 47, scope: !4549)
!4580 = !DILocation(line: 2039, column: 53, scope: !4549)
!4581 = !DILocation(line: 2039, column: 26, scope: !4549)
!4582 = !DILocation(line: 2039, column: 12, scope: !4549)
!4583 = !DILocation(line: 2039, column: 10, scope: !4549)
!4584 = !DILocation(line: 2040, column: 33, scope: !4549)
!4585 = !DILocation(line: 2040, column: 39, scope: !4549)
!4586 = !DILocation(line: 2040, column: 42, scope: !4549)
!4587 = !DILocation(line: 2040, column: 8, scope: !4549)
!4588 = !DILocation(line: 2041, column: 6, scope: !4549)
!4589 = !DILocation(line: 2029, column: 53, scope: !4543)
!4590 = !DILocation(line: 2029, column: 4, scope: !4543)
!4591 = distinct !{!4591, !4547, !4592}
!4592 = !DILocation(line: 2041, column: 6, scope: !4540)
!4593 = !DILocation(line: 2042, column: 4, scope: !4458)
!4594 = !DILocation(line: 2045, column: 51, scope: !4458)
!4595 = !DILocation(line: 2045, column: 22, scope: !4458)
!4596 = !DILocation(line: 2045, column: 8, scope: !4458)
!4597 = !DILocation(line: 2045, column: 6, scope: !4458)
!4598 = !DILocation(line: 2046, column: 37, scope: !4458)
!4599 = !DILocation(line: 2046, column: 43, scope: !4458)
!4600 = !DILocation(line: 2046, column: 4, scope: !4458)
!4601 = !DILocation(line: 2047, column: 52, scope: !4458)
!4602 = !DILocation(line: 2047, column: 22, scope: !4458)
!4603 = !DILocation(line: 2047, column: 8, scope: !4458)
!4604 = !DILocation(line: 2047, column: 6, scope: !4458)
!4605 = !DILocation(line: 2048, column: 38, scope: !4458)
!4606 = !DILocation(line: 2048, column: 44, scope: !4458)
!4607 = !DILocation(line: 2048, column: 4, scope: !4458)
!4608 = !DILocation(line: 2049, column: 52, scope: !4458)
!4609 = !DILocation(line: 2049, column: 22, scope: !4458)
!4610 = !DILocation(line: 2049, column: 8, scope: !4458)
!4611 = !DILocation(line: 2049, column: 6, scope: !4458)
!4612 = !DILocation(line: 2050, column: 38, scope: !4458)
!4613 = !DILocation(line: 2050, column: 44, scope: !4458)
!4614 = !DILocation(line: 2050, column: 4, scope: !4458)
!4615 = !DILocation(line: 2051, column: 4, scope: !4458)
!4616 = !DILocation(line: 2054, column: 47, scope: !4458)
!4617 = !DILocation(line: 2054, column: 22, scope: !4458)
!4618 = !DILocation(line: 2054, column: 8, scope: !4458)
!4619 = !DILocation(line: 2054, column: 6, scope: !4458)
!4620 = !DILocation(line: 2055, column: 33, scope: !4458)
!4621 = !DILocation(line: 2055, column: 39, scope: !4458)
!4622 = !DILocation(line: 2055, column: 4, scope: !4458)
!4623 = !DILocation(line: 2056, column: 48, scope: !4458)
!4624 = !DILocation(line: 2056, column: 22, scope: !4458)
!4625 = !DILocation(line: 2056, column: 8, scope: !4458)
!4626 = !DILocation(line: 2056, column: 6, scope: !4458)
!4627 = !DILocation(line: 2057, column: 34, scope: !4458)
!4628 = !DILocation(line: 2057, column: 40, scope: !4458)
!4629 = !DILocation(line: 2057, column: 4, scope: !4458)
!4630 = !DILocation(line: 2058, column: 48, scope: !4458)
!4631 = !DILocation(line: 2058, column: 22, scope: !4458)
!4632 = !DILocation(line: 2058, column: 8, scope: !4458)
!4633 = !DILocation(line: 2058, column: 6, scope: !4458)
!4634 = !DILocation(line: 2059, column: 34, scope: !4458)
!4635 = !DILocation(line: 2059, column: 40, scope: !4458)
!4636 = !DILocation(line: 2059, column: 4, scope: !4458)
!4637 = !DILocation(line: 2060, column: 47, scope: !4458)
!4638 = !DILocation(line: 2060, column: 22, scope: !4458)
!4639 = !DILocation(line: 2060, column: 8, scope: !4458)
!4640 = !DILocation(line: 2060, column: 6, scope: !4458)
!4641 = !DILocation(line: 2061, column: 33, scope: !4458)
!4642 = !DILocation(line: 2061, column: 39, scope: !4458)
!4643 = !DILocation(line: 2061, column: 4, scope: !4458)
!4644 = !DILocation(line: 2062, column: 48, scope: !4458)
!4645 = !DILocation(line: 2062, column: 22, scope: !4458)
!4646 = !DILocation(line: 2062, column: 8, scope: !4458)
!4647 = !DILocation(line: 2062, column: 6, scope: !4458)
!4648 = !DILocation(line: 2063, column: 34, scope: !4458)
!4649 = !DILocation(line: 2063, column: 40, scope: !4458)
!4650 = !DILocation(line: 2063, column: 4, scope: !4458)
!4651 = !DILocation(line: 2064, column: 49, scope: !4458)
!4652 = !DILocation(line: 2064, column: 22, scope: !4458)
!4653 = !DILocation(line: 2064, column: 8, scope: !4458)
!4654 = !DILocation(line: 2064, column: 6, scope: !4458)
!4655 = !DILocation(line: 2065, column: 35, scope: !4458)
!4656 = !DILocation(line: 2065, column: 41, scope: !4458)
!4657 = !DILocation(line: 2065, column: 4, scope: !4458)
!4658 = !DILocation(line: 2066, column: 4, scope: !4458)
!4659 = !DILocation(line: 2069, column: 48, scope: !4458)
!4660 = !DILocation(line: 2069, column: 22, scope: !4458)
!4661 = !DILocation(line: 2069, column: 8, scope: !4458)
!4662 = !DILocation(line: 2069, column: 6, scope: !4458)
!4663 = !DILocation(line: 2070, column: 34, scope: !4458)
!4664 = !DILocation(line: 2070, column: 40, scope: !4458)
!4665 = !DILocation(line: 2070, column: 4, scope: !4458)
!4666 = !DILocation(line: 2071, column: 4, scope: !4458)
!4667 = !DILocation(line: 2074, column: 51, scope: !4458)
!4668 = !DILocation(line: 2074, column: 22, scope: !4458)
!4669 = !DILocation(line: 2074, column: 8, scope: !4458)
!4670 = !DILocation(line: 2074, column: 6, scope: !4458)
!4671 = !DILocation(line: 2075, column: 37, scope: !4458)
!4672 = !DILocation(line: 2075, column: 43, scope: !4458)
!4673 = !DILocation(line: 2075, column: 4, scope: !4458)
!4674 = !DILocation(line: 2076, column: 51, scope: !4458)
!4675 = !DILocation(line: 2076, column: 22, scope: !4458)
!4676 = !DILocation(line: 2076, column: 8, scope: !4458)
!4677 = !DILocation(line: 2076, column: 6, scope: !4458)
!4678 = !DILocation(line: 2077, column: 37, scope: !4458)
!4679 = !DILocation(line: 2077, column: 43, scope: !4458)
!4680 = !DILocation(line: 2077, column: 4, scope: !4458)
!4681 = !DILabel(scope: !4458, name: "copy_omp_body", file: !3, line: 2084)
!4682 = !DILocation(line: 2084, column: 2, scope: !4458)
!4683 = !DILocation(line: 2085, column: 48, scope: !4458)
!4684 = !DILocation(line: 2085, column: 31, scope: !4458)
!4685 = !DILocation(line: 2085, column: 14, scope: !4458)
!4686 = !DILocation(line: 2085, column: 12, scope: !4458)
!4687 = !DILocation(line: 2086, column: 25, scope: !4458)
!4688 = !DILocation(line: 2086, column: 31, scope: !4458)
!4689 = !DILocation(line: 2086, column: 4, scope: !4458)
!4690 = !DILocation(line: 2087, column: 4, scope: !4458)
!4691 = !DILocation(line: 2090, column: 51, scope: !4458)
!4692 = !DILocation(line: 2090, column: 31, scope: !4458)
!4693 = !DILocation(line: 2090, column: 14, scope: !4458)
!4694 = !DILocation(line: 2090, column: 12, scope: !4458)
!4695 = !DILocation(line: 2091, column: 28, scope: !4458)
!4696 = !DILocation(line: 2091, column: 34, scope: !4458)
!4697 = !DILocation(line: 2091, column: 4, scope: !4458)
!4698 = !DILocation(line: 2092, column: 4, scope: !4458)
!4699 = !DILocation(line: 2095, column: 4, scope: !4458)
!4700 = !DILocation(line: 2096, column: 2, scope: !4458)
!4701 = !DILocation(line: 2097, column: 5, scope: !4450)
!4702 = !DILocation(line: 2100, column: 7, scope: !4703)
!4703 = distinct !DILexicalBlock(scope: !4422, file: !3, line: 2100, column: 7)
!4704 = !DILocation(line: 2100, column: 15, scope: !4703)
!4705 = !DILocation(line: 2100, column: 7, scope: !4422)
!4706 = !DILocation(line: 2102, column: 14, scope: !4707)
!4707 = distinct !DILexicalBlock(scope: !4708, file: !3, line: 2102, column: 7)
!4708 = distinct !DILexicalBlock(scope: !4703, file: !3, line: 2101, column: 5)
!4709 = !DILocation(line: 2102, column: 12, scope: !4707)
!4710 = !DILocation(line: 2102, column: 19, scope: !4711)
!4711 = distinct !DILexicalBlock(scope: !4707, file: !3, line: 2102, column: 7)
!4712 = !DILocation(line: 2102, column: 23, scope: !4711)
!4713 = !DILocation(line: 2102, column: 21, scope: !4711)
!4714 = !DILocation(line: 2102, column: 7, scope: !4707)
!4715 = !DILocation(line: 2103, column: 17, scope: !4711)
!4716 = !DILocation(line: 2103, column: 23, scope: !4711)
!4717 = !DILocation(line: 2103, column: 51, scope: !4711)
!4718 = !DILocation(line: 2103, column: 57, scope: !4711)
!4719 = !DILocation(line: 2103, column: 40, scope: !4711)
!4720 = !DILocation(line: 2103, column: 26, scope: !4711)
!4721 = !DILocation(line: 2103, column: 2, scope: !4711)
!4722 = !DILocation(line: 2102, column: 33, scope: !4711)
!4723 = !DILocation(line: 2102, column: 7, scope: !4711)
!4724 = distinct !{!4724, !4714, !4725}
!4725 = !DILocation(line: 2103, column: 60, scope: !4707)
!4726 = !DILocation(line: 2106, column: 27, scope: !4727)
!4727 = distinct !DILexicalBlock(scope: !4708, file: !3, line: 2106, column: 11)
!4728 = !DILocation(line: 2106, column: 11, scope: !4727)
!4729 = !DILocation(line: 2106, column: 11, scope: !4708)
!4730 = !DILocation(line: 2108, column: 24, scope: !4731)
!4731 = distinct !DILexicalBlock(scope: !4727, file: !3, line: 2107, column: 2)
!4732 = !DILocation(line: 2108, column: 4, scope: !4731)
!4733 = !DILocation(line: 2109, column: 24, scope: !4731)
!4734 = !DILocation(line: 2109, column: 4, scope: !4731)
!4735 = !DILocation(line: 2110, column: 2, scope: !4731)
!4736 = !DILocation(line: 2112, column: 31, scope: !4737)
!4737 = distinct !DILexicalBlock(scope: !4708, file: !3, line: 2112, column: 11)
!4738 = !DILocation(line: 2112, column: 11, scope: !4737)
!4739 = !DILocation(line: 2112, column: 11, scope: !4708)
!4740 = !DILocation(line: 2114, column: 21, scope: !4741)
!4741 = distinct !DILexicalBlock(scope: !4737, file: !3, line: 2113, column: 2)
!4742 = !DILocation(line: 2114, column: 40, scope: !4741)
!4743 = !DILocation(line: 2114, column: 27, scope: !4741)
!4744 = !DILocation(line: 2114, column: 4, scope: !4741)
!4745 = !DILocation(line: 2115, column: 21, scope: !4741)
!4746 = !DILocation(line: 2115, column: 40, scope: !4741)
!4747 = !DILocation(line: 2115, column: 27, scope: !4741)
!4748 = !DILocation(line: 2115, column: 4, scope: !4741)
!4749 = !DILocation(line: 2116, column: 2, scope: !4741)
!4750 = !DILocation(line: 2119, column: 28, scope: !4708)
!4751 = !DILocation(line: 2119, column: 7, scope: !4708)
!4752 = !DILocation(line: 2120, column: 5, scope: !4708)
!4753 = !DILocation(line: 2122, column: 10, scope: !4422)
!4754 = !DILocation(line: 2122, column: 3, scope: !4422)
!4755 = distinct !DISubprogram(name: "walk_gimple_seq", scope: !3, file: !3, line: 1190, type: !4756, scopeLine: 1192, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!4756 = !DISubroutineType(types: !4757)
!4757 = !{!594, !645, !4758, !4763, !1805}
!4758 = !DIDerivedType(tag: DW_TAG_typedef, name: "walk_stmt_fn", file: !6, line: 4704, baseType: !4759)
!4759 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4760, size: 64)
!4760 = !DISubroutineType(types: !4761)
!4761 = !{!666, !4379, !4762, !1805}
!4762 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !769, size: 64)
!4763 = !DIDerivedType(tag: DW_TAG_typedef, name: "walk_tree_fn", file: !50, line: 5203, baseType: !4764)
!4764 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4765, size: 64)
!4765 = !DISubroutineType(types: !4766)
!4766 = !{!666, !1127, !4767, !664}
!4767 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !746, size: 64)
!4768 = !DILocalVariable(name: "seq", arg: 1, scope: !4755, file: !3, line: 1190, type: !645)
!4769 = !DILocation(line: 1190, column: 29, scope: !4755)
!4770 = !DILocalVariable(name: "callback_stmt", arg: 2, scope: !4755, file: !3, line: 1190, type: !4758)
!4771 = !DILocation(line: 1190, column: 47, scope: !4755)
!4772 = !DILocalVariable(name: "callback_op", arg: 3, scope: !4755, file: !3, line: 1191, type: !4763)
!4773 = !DILocation(line: 1191, column: 17, scope: !4755)
!4774 = !DILocalVariable(name: "wi", arg: 4, scope: !4755, file: !3, line: 1191, type: !1805)
!4775 = !DILocation(line: 1191, column: 53, scope: !4755)
!4776 = !DILocalVariable(name: "gsi", scope: !4755, file: !3, line: 1193, type: !1809)
!4777 = !DILocation(line: 1193, column: 24, scope: !4755)
!4778 = !DILocation(line: 1195, column: 25, scope: !4779)
!4779 = distinct !DILexicalBlock(scope: !4755, file: !3, line: 1195, column: 3)
!4780 = !DILocation(line: 1195, column: 14, scope: !4779)
!4781 = !DILocation(line: 1195, column: 8, scope: !4779)
!4782 = !DILocation(line: 1195, column: 32, scope: !4783)
!4783 = distinct !DILexicalBlock(scope: !4779, file: !3, line: 1195, column: 3)
!4784 = !DILocation(line: 1195, column: 31, scope: !4783)
!4785 = !DILocation(line: 1195, column: 3, scope: !4779)
!4786 = !DILocalVariable(name: "ret", scope: !4787, file: !3, line: 1197, type: !666)
!4787 = distinct !DILexicalBlock(scope: !4783, file: !3, line: 1196, column: 5)
!4788 = !DILocation(line: 1197, column: 12, scope: !4787)
!4789 = !DILocation(line: 1197, column: 42, scope: !4787)
!4790 = !DILocation(line: 1197, column: 57, scope: !4787)
!4791 = !DILocation(line: 1197, column: 70, scope: !4787)
!4792 = !DILocation(line: 1197, column: 18, scope: !4787)
!4793 = !DILocation(line: 1198, column: 11, scope: !4794)
!4794 = distinct !DILexicalBlock(scope: !4787, file: !3, line: 1198, column: 11)
!4795 = !DILocation(line: 1198, column: 11, scope: !4787)
!4796 = !DILocation(line: 1202, column: 4, scope: !4797)
!4797 = distinct !DILexicalBlock(scope: !4794, file: !3, line: 1199, column: 2)
!4798 = !DILocation(line: 1203, column: 26, scope: !4797)
!4799 = !DILocation(line: 1203, column: 4, scope: !4797)
!4800 = !DILocation(line: 1203, column: 8, scope: !4797)
!4801 = !DILocation(line: 1203, column: 24, scope: !4797)
!4802 = !DILocation(line: 1204, column: 11, scope: !4797)
!4803 = !DILocation(line: 1204, column: 4, scope: !4797)
!4804 = !DILocation(line: 1206, column: 5, scope: !4787)
!4805 = !DILocation(line: 1195, column: 49, scope: !4783)
!4806 = !DILocation(line: 1195, column: 3, scope: !4783)
!4807 = distinct !{!4807, !4785, !4808}
!4808 = !DILocation(line: 1206, column: 5, scope: !4779)
!4809 = !DILocation(line: 1208, column: 7, scope: !4810)
!4810 = distinct !DILexicalBlock(scope: !4755, file: !3, line: 1208, column: 7)
!4811 = !DILocation(line: 1208, column: 7, scope: !4755)
!4812 = !DILocation(line: 1209, column: 5, scope: !4810)
!4813 = !DILocation(line: 1209, column: 9, scope: !4810)
!4814 = !DILocation(line: 1209, column: 25, scope: !4810)
!4815 = !DILocation(line: 1211, column: 3, scope: !4755)
!4816 = !DILocation(line: 1212, column: 1, scope: !4755)
!4817 = distinct !DISubprogram(name: "walk_gimple_stmt", scope: !3, file: !3, line: 1566, type: !4818, scopeLine: 1568, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!4818 = !DISubroutineType(types: !4819)
!4819 = !{!666, !4379, !4758, !4763, !1805}
!4820 = !DILocalVariable(name: "gsi", arg: 1, scope: !4817, file: !3, line: 1566, type: !4379)
!4821 = !DILocation(line: 1566, column: 41, scope: !4817)
!4822 = !DILocalVariable(name: "callback_stmt", arg: 2, scope: !4817, file: !3, line: 1566, type: !4758)
!4823 = !DILocation(line: 1566, column: 59, scope: !4817)
!4824 = !DILocalVariable(name: "callback_op", arg: 3, scope: !4817, file: !3, line: 1567, type: !4763)
!4825 = !DILocation(line: 1567, column: 18, scope: !4817)
!4826 = !DILocalVariable(name: "wi", arg: 4, scope: !4817, file: !3, line: 1567, type: !1805)
!4827 = !DILocation(line: 1567, column: 54, scope: !4817)
!4828 = !DILocalVariable(name: "ret", scope: !4817, file: !3, line: 1569, type: !594)
!4829 = !DILocation(line: 1569, column: 10, scope: !4817)
!4830 = !DILocalVariable(name: "tree_ret", scope: !4817, file: !3, line: 1570, type: !666)
!4831 = !DILocation(line: 1570, column: 8, scope: !4817)
!4832 = !DILocalVariable(name: "stmt", scope: !4817, file: !3, line: 1571, type: !594)
!4833 = !DILocation(line: 1571, column: 10, scope: !4817)
!4834 = !DILocation(line: 1571, column: 28, scope: !4817)
!4835 = !DILocation(line: 1571, column: 17, scope: !4817)
!4836 = !DILocation(line: 1573, column: 7, scope: !4837)
!4837 = distinct !DILexicalBlock(scope: !4817, file: !3, line: 1573, column: 7)
!4838 = !DILocation(line: 1573, column: 7, scope: !4817)
!4839 = !DILocation(line: 1574, column: 5, scope: !4837)
!4840 = !DILocation(line: 1574, column: 9, scope: !4837)
!4841 = !DILocation(line: 1574, column: 16, scope: !4837)
!4842 = !DILocation(line: 1574, column: 15, scope: !4837)
!4843 = !DILocation(line: 1576, column: 7, scope: !4844)
!4844 = distinct !DILexicalBlock(scope: !4817, file: !3, line: 1576, column: 7)
!4845 = !DILocation(line: 1576, column: 10, scope: !4844)
!4846 = !DILocation(line: 1576, column: 13, scope: !4844)
!4847 = !DILocation(line: 1576, column: 17, scope: !4844)
!4848 = !DILocation(line: 1576, column: 32, scope: !4844)
!4849 = !DILocation(line: 1576, column: 56, scope: !4844)
!4850 = !DILocation(line: 1576, column: 35, scope: !4844)
!4851 = !DILocation(line: 1576, column: 7, scope: !4817)
!4852 = !DILocation(line: 1577, column: 39, scope: !4844)
!4853 = !DILocation(line: 1577, column: 22, scope: !4844)
!4854 = !DILocation(line: 1577, column: 20, scope: !4844)
!4855 = !DILocation(line: 1577, column: 5, scope: !4844)
!4856 = !DILocation(line: 1579, column: 7, scope: !4817)
!4857 = !DILocation(line: 1583, column: 7, scope: !4858)
!4858 = distinct !DILexicalBlock(scope: !4817, file: !3, line: 1583, column: 7)
!4859 = !DILocation(line: 1583, column: 7, scope: !4817)
!4860 = !DILocalVariable(name: "handled_ops", scope: !4861, file: !3, line: 1585, type: !769)
!4861 = distinct !DILexicalBlock(scope: !4858, file: !3, line: 1584, column: 5)
!4862 = !DILocation(line: 1585, column: 12, scope: !4861)
!4863 = !DILocation(line: 1586, column: 18, scope: !4861)
!4864 = !DILocation(line: 1586, column: 33, scope: !4861)
!4865 = !DILocation(line: 1586, column: 52, scope: !4861)
!4866 = !DILocation(line: 1586, column: 16, scope: !4861)
!4867 = !DILocation(line: 1587, column: 11, scope: !4868)
!4868 = distinct !DILexicalBlock(scope: !4861, file: !3, line: 1587, column: 11)
!4869 = !DILocation(line: 1587, column: 11, scope: !4861)
!4870 = !DILocation(line: 1588, column: 9, scope: !4868)
!4871 = !DILocation(line: 1588, column: 2, scope: !4868)
!4872 = !DILocation(line: 1592, column: 7, scope: !4861)
!4873 = !DILocation(line: 1595, column: 25, scope: !4861)
!4874 = !DILocation(line: 1595, column: 14, scope: !4861)
!4875 = !DILocation(line: 1595, column: 12, scope: !4861)
!4876 = !DILocation(line: 1596, column: 5, scope: !4861)
!4877 = !DILocation(line: 1599, column: 7, scope: !4878)
!4878 = distinct !DILexicalBlock(scope: !4817, file: !3, line: 1599, column: 7)
!4879 = !DILocation(line: 1599, column: 7, scope: !4817)
!4880 = !DILocation(line: 1601, column: 34, scope: !4881)
!4881 = distinct !DILexicalBlock(scope: !4878, file: !3, line: 1600, column: 5)
!4882 = !DILocation(line: 1601, column: 40, scope: !4881)
!4883 = !DILocation(line: 1601, column: 53, scope: !4881)
!4884 = !DILocation(line: 1601, column: 18, scope: !4881)
!4885 = !DILocation(line: 1601, column: 16, scope: !4881)
!4886 = !DILocation(line: 1602, column: 11, scope: !4887)
!4887 = distinct !DILexicalBlock(scope: !4881, file: !3, line: 1602, column: 11)
!4888 = !DILocation(line: 1602, column: 11, scope: !4881)
!4889 = !DILocation(line: 1603, column: 9, scope: !4887)
!4890 = !DILocation(line: 1603, column: 2, scope: !4887)
!4891 = !DILocation(line: 1604, column: 5, scope: !4881)
!4892 = !DILocation(line: 1607, column: 24, scope: !4817)
!4893 = !DILocation(line: 1607, column: 11, scope: !4817)
!4894 = !DILocation(line: 1607, column: 3, scope: !4817)
!4895 = !DILocation(line: 1610, column: 48, scope: !4896)
!4896 = distinct !DILexicalBlock(scope: !4817, file: !3, line: 1608, column: 5)
!4897 = !DILocation(line: 1610, column: 30, scope: !4896)
!4898 = !DILocation(line: 1610, column: 55, scope: !4896)
!4899 = !DILocation(line: 1611, column: 23, scope: !4896)
!4900 = !DILocation(line: 1611, column: 36, scope: !4896)
!4901 = !DILocation(line: 1610, column: 13, scope: !4896)
!4902 = !DILocation(line: 1610, column: 11, scope: !4896)
!4903 = !DILocation(line: 1612, column: 11, scope: !4904)
!4904 = distinct !DILexicalBlock(scope: !4896, file: !3, line: 1612, column: 11)
!4905 = !DILocation(line: 1612, column: 11, scope: !4896)
!4906 = !DILocation(line: 1613, column: 9, scope: !4904)
!4907 = !DILocation(line: 1613, column: 13, scope: !4904)
!4908 = !DILocation(line: 1613, column: 2, scope: !4904)
!4909 = !DILocation(line: 1614, column: 7, scope: !4896)
!4910 = !DILocation(line: 1617, column: 52, scope: !4896)
!4911 = !DILocation(line: 1617, column: 30, scope: !4896)
!4912 = !DILocation(line: 1617, column: 59, scope: !4896)
!4913 = !DILocation(line: 1618, column: 23, scope: !4896)
!4914 = !DILocation(line: 1618, column: 36, scope: !4896)
!4915 = !DILocation(line: 1617, column: 13, scope: !4896)
!4916 = !DILocation(line: 1617, column: 11, scope: !4896)
!4917 = !DILocation(line: 1619, column: 11, scope: !4918)
!4918 = distinct !DILexicalBlock(scope: !4896, file: !3, line: 1619, column: 11)
!4919 = !DILocation(line: 1619, column: 11, scope: !4896)
!4920 = !DILocation(line: 1620, column: 9, scope: !4918)
!4921 = !DILocation(line: 1620, column: 13, scope: !4918)
!4922 = !DILocation(line: 1620, column: 2, scope: !4918)
!4923 = !DILocation(line: 1621, column: 7, scope: !4896)
!4924 = !DILocation(line: 1624, column: 56, scope: !4896)
!4925 = !DILocation(line: 1624, column: 30, scope: !4896)
!4926 = !DILocation(line: 1624, column: 63, scope: !4896)
!4927 = !DILocation(line: 1625, column: 16, scope: !4896)
!4928 = !DILocation(line: 1625, column: 29, scope: !4896)
!4929 = !DILocation(line: 1624, column: 13, scope: !4896)
!4930 = !DILocation(line: 1624, column: 11, scope: !4896)
!4931 = !DILocation(line: 1626, column: 11, scope: !4932)
!4932 = distinct !DILexicalBlock(scope: !4896, file: !3, line: 1626, column: 11)
!4933 = !DILocation(line: 1626, column: 11, scope: !4896)
!4934 = !DILocation(line: 1627, column: 9, scope: !4932)
!4935 = !DILocation(line: 1627, column: 13, scope: !4932)
!4936 = !DILocation(line: 1627, column: 2, scope: !4932)
!4937 = !DILocation(line: 1628, column: 7, scope: !4896)
!4938 = !DILocation(line: 1631, column: 47, scope: !4896)
!4939 = !DILocation(line: 1631, column: 30, scope: !4896)
!4940 = !DILocation(line: 1631, column: 54, scope: !4896)
!4941 = !DILocation(line: 1631, column: 69, scope: !4896)
!4942 = !DILocation(line: 1632, column: 23, scope: !4896)
!4943 = !DILocation(line: 1631, column: 13, scope: !4896)
!4944 = !DILocation(line: 1631, column: 11, scope: !4896)
!4945 = !DILocation(line: 1633, column: 11, scope: !4946)
!4946 = distinct !DILexicalBlock(scope: !4896, file: !3, line: 1633, column: 11)
!4947 = !DILocation(line: 1633, column: 11, scope: !4896)
!4948 = !DILocation(line: 1634, column: 9, scope: !4946)
!4949 = !DILocation(line: 1634, column: 13, scope: !4946)
!4950 = !DILocation(line: 1634, column: 2, scope: !4946)
!4951 = !DILocation(line: 1636, column: 50, scope: !4896)
!4952 = !DILocation(line: 1636, column: 30, scope: !4896)
!4953 = !DILocation(line: 1636, column: 57, scope: !4896)
!4954 = !DILocation(line: 1637, column: 23, scope: !4896)
!4955 = !DILocation(line: 1637, column: 36, scope: !4896)
!4956 = !DILocation(line: 1636, column: 13, scope: !4896)
!4957 = !DILocation(line: 1636, column: 11, scope: !4896)
!4958 = !DILocation(line: 1638, column: 11, scope: !4959)
!4959 = distinct !DILexicalBlock(scope: !4896, file: !3, line: 1638, column: 11)
!4960 = !DILocation(line: 1638, column: 11, scope: !4896)
!4961 = !DILocation(line: 1639, column: 9, scope: !4959)
!4962 = !DILocation(line: 1639, column: 13, scope: !4959)
!4963 = !DILocation(line: 1639, column: 2, scope: !4959)
!4964 = !DILocation(line: 1640, column: 7, scope: !4896)
!4965 = !DILocation(line: 1643, column: 55, scope: !4896)
!4966 = !DILocation(line: 1643, column: 30, scope: !4896)
!4967 = !DILocation(line: 1643, column: 62, scope: !4896)
!4968 = !DILocation(line: 1644, column: 16, scope: !4896)
!4969 = !DILocation(line: 1644, column: 29, scope: !4896)
!4970 = !DILocation(line: 1643, column: 13, scope: !4896)
!4971 = !DILocation(line: 1643, column: 11, scope: !4896)
!4972 = !DILocation(line: 1645, column: 11, scope: !4973)
!4973 = distinct !DILexicalBlock(scope: !4896, file: !3, line: 1645, column: 11)
!4974 = !DILocation(line: 1645, column: 11, scope: !4896)
!4975 = !DILocation(line: 1646, column: 9, scope: !4973)
!4976 = !DILocation(line: 1646, column: 13, scope: !4973)
!4977 = !DILocation(line: 1646, column: 2, scope: !4973)
!4978 = !DILocation(line: 1657, column: 47, scope: !4896)
!4979 = !DILocation(line: 1657, column: 30, scope: !4896)
!4980 = !DILocation(line: 1657, column: 54, scope: !4896)
!4981 = !DILocation(line: 1657, column: 69, scope: !4896)
!4982 = !DILocation(line: 1658, column: 23, scope: !4896)
!4983 = !DILocation(line: 1657, column: 13, scope: !4896)
!4984 = !DILocation(line: 1657, column: 11, scope: !4896)
!4985 = !DILocation(line: 1659, column: 11, scope: !4986)
!4986 = distinct !DILexicalBlock(scope: !4896, file: !3, line: 1659, column: 11)
!4987 = !DILocation(line: 1659, column: 11, scope: !4896)
!4988 = !DILocation(line: 1660, column: 9, scope: !4986)
!4989 = !DILocation(line: 1660, column: 13, scope: !4986)
!4990 = !DILocation(line: 1660, column: 2, scope: !4986)
!4991 = !DILocation(line: 1661, column: 7, scope: !4896)
!4992 = !DILocation(line: 1664, column: 50, scope: !4896)
!4993 = !DILocation(line: 1664, column: 30, scope: !4896)
!4994 = !DILocation(line: 1664, column: 57, scope: !4896)
!4995 = !DILocation(line: 1665, column: 9, scope: !4896)
!4996 = !DILocation(line: 1665, column: 22, scope: !4896)
!4997 = !DILocation(line: 1664, column: 13, scope: !4896)
!4998 = !DILocation(line: 1664, column: 11, scope: !4896)
!4999 = !DILocation(line: 1666, column: 11, scope: !5000)
!5000 = distinct !DILexicalBlock(scope: !4896, file: !3, line: 1666, column: 11)
!5001 = !DILocation(line: 1666, column: 11, scope: !4896)
!5002 = !DILocation(line: 1667, column: 9, scope: !5000)
!5003 = !DILocation(line: 1667, column: 13, scope: !5000)
!5004 = !DILocation(line: 1667, column: 2, scope: !5000)
!5005 = !DILocation(line: 1668, column: 7, scope: !4896)
!5006 = !DILocation(line: 1671, column: 7, scope: !4896)
!5007 = !DILocation(line: 1672, column: 7, scope: !4896)
!5008 = !DILocation(line: 1675, column: 3, scope: !4817)
!5009 = !DILocation(line: 1676, column: 1, scope: !4817)
!5010 = distinct !DISubprogram(name: "walk_gimple_op", scope: !3, file: !3, line: 1301, type: !5011, scopeLine: 1303, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!5011 = !DISubroutineType(types: !5012)
!5012 = !{!666, !594, !4763, !1805}
!5013 = !DILocalVariable(name: "stmt", arg: 1, scope: !5010, file: !3, line: 1301, type: !594)
!5014 = !DILocation(line: 1301, column: 24, scope: !5010)
!5015 = !DILocalVariable(name: "callback_op", arg: 2, scope: !5010, file: !3, line: 1301, type: !4763)
!5016 = !DILocation(line: 1301, column: 43, scope: !5010)
!5017 = !DILocalVariable(name: "wi", arg: 3, scope: !5010, file: !3, line: 1302, type: !1805)
!5018 = !DILocation(line: 1302, column: 26, scope: !5010)
!5019 = !DILocalVariable(name: "pset", scope: !5010, file: !3, line: 1304, type: !1817)
!5020 = !DILocation(line: 1304, column: 25, scope: !5010)
!5021 = !DILocation(line: 1304, column: 33, scope: !5010)
!5022 = !DILocation(line: 1304, column: 32, scope: !5010)
!5023 = !DILocation(line: 1304, column: 39, scope: !5010)
!5024 = !DILocation(line: 1304, column: 43, scope: !5010)
!5025 = !DILocalVariable(name: "i", scope: !5010, file: !3, line: 1305, type: !7)
!5026 = !DILocation(line: 1305, column: 12, scope: !5010)
!5027 = !DILocalVariable(name: "ret", scope: !5010, file: !3, line: 1306, type: !666)
!5028 = !DILocation(line: 1306, column: 8, scope: !5010)
!5029 = !DILocation(line: 1308, column: 24, scope: !5010)
!5030 = !DILocation(line: 1308, column: 11, scope: !5010)
!5031 = !DILocation(line: 1308, column: 3, scope: !5010)
!5032 = !DILocation(line: 1313, column: 11, scope: !5033)
!5033 = distinct !DILexicalBlock(scope: !5034, file: !3, line: 1313, column: 11)
!5034 = distinct !DILexicalBlock(scope: !5010, file: !3, line: 1309, column: 5)
!5035 = !DILocation(line: 1313, column: 11, scope: !5034)
!5036 = !DILocation(line: 1314, column: 52, scope: !5033)
!5037 = !DILocation(line: 1314, column: 33, scope: !5033)
!5038 = !DILocation(line: 1314, column: 18, scope: !5033)
!5039 = !DILocation(line: 1315, column: 24, scope: !5033)
!5040 = !DILocation(line: 1315, column: 52, scope: !5033)
!5041 = !DILocation(line: 1315, column: 28, scope: !5033)
!5042 = !DILocation(line: 1315, column: 27, scope: !5033)
!5043 = !DILocation(line: 1314, column: 17, scope: !5033)
!5044 = !DILocation(line: 1314, column: 2, scope: !5033)
!5045 = !DILocation(line: 1314, column: 6, scope: !5033)
!5046 = !DILocation(line: 1314, column: 15, scope: !5033)
!5047 = !DILocation(line: 1317, column: 14, scope: !5048)
!5048 = distinct !DILexicalBlock(scope: !5034, file: !3, line: 1317, column: 7)
!5049 = !DILocation(line: 1317, column: 12, scope: !5048)
!5050 = !DILocation(line: 1317, column: 19, scope: !5051)
!5051 = distinct !DILexicalBlock(scope: !5048, file: !3, line: 1317, column: 7)
!5052 = !DILocation(line: 1317, column: 39, scope: !5051)
!5053 = !DILocation(line: 1317, column: 23, scope: !5051)
!5054 = !DILocation(line: 1317, column: 21, scope: !5051)
!5055 = !DILocation(line: 1317, column: 7, scope: !5048)
!5056 = !DILocation(line: 1319, column: 10, scope: !5057)
!5057 = distinct !DILexicalBlock(scope: !5051, file: !3, line: 1318, column: 2)
!5058 = !DILocation(line: 1319, column: 8, scope: !5057)
!5059 = !DILocation(line: 1321, column: 8, scope: !5060)
!5060 = distinct !DILexicalBlock(scope: !5057, file: !3, line: 1321, column: 8)
!5061 = !DILocation(line: 1321, column: 8, scope: !5057)
!5062 = !DILocation(line: 1322, column: 13, scope: !5060)
!5063 = !DILocation(line: 1322, column: 6, scope: !5060)
!5064 = !DILocation(line: 1323, column: 2, scope: !5057)
!5065 = !DILocation(line: 1317, column: 47, scope: !5051)
!5066 = !DILocation(line: 1317, column: 7, scope: !5051)
!5067 = distinct !{!5067, !5055, !5068}
!5068 = !DILocation(line: 1323, column: 2, scope: !5048)
!5069 = !DILocation(line: 1327, column: 11, scope: !5070)
!5070 = distinct !DILexicalBlock(scope: !5034, file: !3, line: 1327, column: 11)
!5071 = !DILocation(line: 1327, column: 11, scope: !5034)
!5072 = !DILocation(line: 1331, column: 59, scope: !5073)
!5073 = distinct !DILexicalBlock(scope: !5070, file: !3, line: 1328, column: 2)
!5074 = !DILocation(line: 1331, column: 39, scope: !5073)
!5075 = !DILocation(line: 1331, column: 20, scope: !5073)
!5076 = !DILocation(line: 1332, column: 26, scope: !5073)
!5077 = !DILocation(line: 1332, column: 54, scope: !5073)
!5078 = !DILocation(line: 1332, column: 30, scope: !5073)
!5079 = !DILocation(line: 1332, column: 29, scope: !5073)
!5080 = !DILocation(line: 1331, column: 19, scope: !5073)
!5081 = !DILocation(line: 1331, column: 4, scope: !5073)
!5082 = !DILocation(line: 1331, column: 8, scope: !5073)
!5083 = !DILocation(line: 1331, column: 17, scope: !5073)
!5084 = !DILocation(line: 1333, column: 4, scope: !5073)
!5085 = !DILocation(line: 1333, column: 8, scope: !5073)
!5086 = !DILocation(line: 1333, column: 15, scope: !5073)
!5087 = !DILocation(line: 1334, column: 2, scope: !5073)
!5088 = !DILocation(line: 1336, column: 13, scope: !5034)
!5089 = !DILocation(line: 1336, column: 11, scope: !5034)
!5090 = !DILocation(line: 1337, column: 11, scope: !5091)
!5091 = distinct !DILexicalBlock(scope: !5034, file: !3, line: 1337, column: 11)
!5092 = !DILocation(line: 1337, column: 11, scope: !5034)
!5093 = !DILocation(line: 1338, column: 9, scope: !5091)
!5094 = !DILocation(line: 1338, column: 2, scope: !5091)
!5095 = !DILocation(line: 1340, column: 11, scope: !5096)
!5096 = distinct !DILexicalBlock(scope: !5034, file: !3, line: 1340, column: 11)
!5097 = !DILocation(line: 1340, column: 11, scope: !5034)
!5098 = !DILocation(line: 1342, column: 4, scope: !5099)
!5099 = distinct !DILexicalBlock(scope: !5096, file: !3, line: 1341, column: 2)
!5100 = !DILocation(line: 1342, column: 8, scope: !5099)
!5101 = !DILocation(line: 1342, column: 17, scope: !5099)
!5102 = !DILocation(line: 1343, column: 4, scope: !5099)
!5103 = !DILocation(line: 1343, column: 8, scope: !5099)
!5104 = !DILocation(line: 1343, column: 15, scope: !5099)
!5105 = !DILocation(line: 1344, column: 2, scope: !5099)
!5106 = !DILocation(line: 1345, column: 7, scope: !5034)
!5107 = !DILocation(line: 1348, column: 11, scope: !5108)
!5108 = distinct !DILexicalBlock(scope: !5034, file: !3, line: 1348, column: 11)
!5109 = !DILocation(line: 1348, column: 11, scope: !5034)
!5110 = !DILocation(line: 1349, column: 2, scope: !5108)
!5111 = !DILocation(line: 1349, column: 6, scope: !5108)
!5112 = !DILocation(line: 1349, column: 13, scope: !5108)
!5113 = !DILocation(line: 1351, column: 13, scope: !5034)
!5114 = !DILocation(line: 1351, column: 11, scope: !5034)
!5115 = !DILocation(line: 1352, column: 11, scope: !5116)
!5116 = distinct !DILexicalBlock(scope: !5034, file: !3, line: 1352, column: 11)
!5117 = !DILocation(line: 1352, column: 11, scope: !5034)
!5118 = !DILocation(line: 1353, column: 16, scope: !5116)
!5119 = !DILocation(line: 1353, column: 9, scope: !5116)
!5120 = !DILocation(line: 1355, column: 13, scope: !5034)
!5121 = !DILocation(line: 1355, column: 11, scope: !5034)
!5122 = !DILocation(line: 1356, column: 11, scope: !5123)
!5123 = distinct !DILexicalBlock(scope: !5034, file: !3, line: 1356, column: 11)
!5124 = !DILocation(line: 1356, column: 11, scope: !5034)
!5125 = !DILocation(line: 1357, column: 16, scope: !5123)
!5126 = !DILocation(line: 1357, column: 9, scope: !5123)
!5127 = !DILocation(line: 1359, column: 14, scope: !5128)
!5128 = distinct !DILexicalBlock(scope: !5034, file: !3, line: 1359, column: 7)
!5129 = !DILocation(line: 1359, column: 12, scope: !5128)
!5130 = !DILocation(line: 1359, column: 19, scope: !5131)
!5131 = distinct !DILexicalBlock(scope: !5128, file: !3, line: 1359, column: 7)
!5132 = !DILocation(line: 1359, column: 45, scope: !5131)
!5133 = !DILocation(line: 1359, column: 23, scope: !5131)
!5134 = !DILocation(line: 1359, column: 21, scope: !5131)
!5135 = !DILocation(line: 1359, column: 7, scope: !5128)
!5136 = !DILocation(line: 1361, column: 10, scope: !5137)
!5137 = distinct !DILexicalBlock(scope: !5131, file: !3, line: 1360, column: 2)
!5138 = !DILocation(line: 1361, column: 8, scope: !5137)
!5139 = !DILocation(line: 1363, column: 8, scope: !5140)
!5140 = distinct !DILexicalBlock(scope: !5137, file: !3, line: 1363, column: 8)
!5141 = !DILocation(line: 1363, column: 8, scope: !5137)
!5142 = !DILocation(line: 1364, column: 13, scope: !5140)
!5143 = !DILocation(line: 1364, column: 6, scope: !5140)
!5144 = !DILocation(line: 1365, column: 2, scope: !5137)
!5145 = !DILocation(line: 1359, column: 53, scope: !5131)
!5146 = !DILocation(line: 1359, column: 7, scope: !5131)
!5147 = distinct !{!5147, !5135, !5148}
!5148 = !DILocation(line: 1365, column: 2, scope: !5128)
!5149 = !DILocation(line: 1367, column: 11, scope: !5150)
!5150 = distinct !DILexicalBlock(scope: !5034, file: !3, line: 1367, column: 11)
!5151 = !DILocation(line: 1367, column: 11, scope: !5034)
!5152 = !DILocation(line: 1368, column: 2, scope: !5150)
!5153 = !DILocation(line: 1368, column: 6, scope: !5150)
!5154 = !DILocation(line: 1368, column: 13, scope: !5150)
!5155 = !DILocation(line: 1370, column: 13, scope: !5034)
!5156 = !DILocation(line: 1370, column: 11, scope: !5034)
!5157 = !DILocation(line: 1371, column: 11, scope: !5158)
!5158 = distinct !DILexicalBlock(scope: !5034, file: !3, line: 1371, column: 11)
!5159 = !DILocation(line: 1371, column: 11, scope: !5034)
!5160 = !DILocation(line: 1372, column: 9, scope: !5158)
!5161 = !DILocation(line: 1372, column: 2, scope: !5158)
!5162 = !DILocation(line: 1374, column: 11, scope: !5163)
!5163 = distinct !DILexicalBlock(scope: !5034, file: !3, line: 1374, column: 11)
!5164 = !DILocation(line: 1374, column: 11, scope: !5034)
!5165 = !DILocation(line: 1375, column: 2, scope: !5163)
!5166 = !DILocation(line: 1375, column: 6, scope: !5163)
!5167 = !DILocation(line: 1375, column: 13, scope: !5163)
!5168 = !DILocation(line: 1376, column: 7, scope: !5034)
!5169 = !DILocation(line: 1379, column: 13, scope: !5034)
!5170 = !DILocation(line: 1379, column: 11, scope: !5034)
!5171 = !DILocation(line: 1381, column: 11, scope: !5172)
!5172 = distinct !DILexicalBlock(scope: !5034, file: !3, line: 1381, column: 11)
!5173 = !DILocation(line: 1381, column: 11, scope: !5034)
!5174 = !DILocation(line: 1382, column: 9, scope: !5172)
!5175 = !DILocation(line: 1382, column: 2, scope: !5172)
!5176 = !DILocation(line: 1383, column: 7, scope: !5034)
!5177 = !DILocation(line: 1386, column: 13, scope: !5034)
!5178 = !DILocation(line: 1386, column: 11, scope: !5034)
!5179 = !DILocation(line: 1388, column: 11, scope: !5180)
!5180 = distinct !DILexicalBlock(scope: !5034, file: !3, line: 1388, column: 11)
!5181 = !DILocation(line: 1388, column: 11, scope: !5034)
!5182 = !DILocation(line: 1389, column: 9, scope: !5180)
!5183 = !DILocation(line: 1389, column: 2, scope: !5180)
!5184 = !DILocation(line: 1390, column: 7, scope: !5034)
!5185 = !DILocation(line: 1393, column: 30, scope: !5034)
!5186 = !DILocation(line: 1393, column: 36, scope: !5034)
!5187 = !DILocation(line: 1393, column: 49, scope: !5034)
!5188 = !DILocation(line: 1393, column: 13, scope: !5034)
!5189 = !DILocation(line: 1393, column: 11, scope: !5034)
!5190 = !DILocation(line: 1394, column: 11, scope: !5191)
!5191 = distinct !DILexicalBlock(scope: !5034, file: !3, line: 1394, column: 11)
!5192 = !DILocation(line: 1394, column: 11, scope: !5034)
!5193 = !DILocation(line: 1395, column: 9, scope: !5191)
!5194 = !DILocation(line: 1395, column: 2, scope: !5191)
!5195 = !DILocation(line: 1396, column: 7, scope: !5034)
!5196 = !DILocation(line: 1399, column: 13, scope: !5034)
!5197 = !DILocation(line: 1399, column: 11, scope: !5034)
!5198 = !DILocation(line: 1401, column: 11, scope: !5199)
!5199 = distinct !DILexicalBlock(scope: !5034, file: !3, line: 1401, column: 11)
!5200 = !DILocation(line: 1401, column: 11, scope: !5034)
!5201 = !DILocation(line: 1402, column: 9, scope: !5199)
!5202 = !DILocation(line: 1402, column: 2, scope: !5199)
!5203 = !DILocation(line: 1404, column: 13, scope: !5034)
!5204 = !DILocation(line: 1404, column: 11, scope: !5034)
!5205 = !DILocation(line: 1406, column: 11, scope: !5206)
!5206 = distinct !DILexicalBlock(scope: !5034, file: !3, line: 1406, column: 11)
!5207 = !DILocation(line: 1406, column: 11, scope: !5034)
!5208 = !DILocation(line: 1407, column: 9, scope: !5206)
!5209 = !DILocation(line: 1407, column: 2, scope: !5206)
!5210 = !DILocation(line: 1408, column: 7, scope: !5034)
!5211 = !DILocation(line: 1411, column: 13, scope: !5034)
!5212 = !DILocation(line: 1411, column: 11, scope: !5034)
!5213 = !DILocation(line: 1413, column: 11, scope: !5214)
!5214 = distinct !DILexicalBlock(scope: !5034, file: !3, line: 1413, column: 11)
!5215 = !DILocation(line: 1413, column: 11, scope: !5034)
!5216 = !DILocation(line: 1414, column: 9, scope: !5214)
!5217 = !DILocation(line: 1414, column: 2, scope: !5214)
!5218 = !DILocation(line: 1415, column: 7, scope: !5034)
!5219 = !DILocation(line: 1418, column: 13, scope: !5034)
!5220 = !DILocation(line: 1418, column: 11, scope: !5034)
!5221 = !DILocation(line: 1420, column: 11, scope: !5222)
!5222 = distinct !DILexicalBlock(scope: !5034, file: !3, line: 1420, column: 11)
!5223 = !DILocation(line: 1420, column: 11, scope: !5034)
!5224 = !DILocation(line: 1421, column: 9, scope: !5222)
!5225 = !DILocation(line: 1421, column: 2, scope: !5222)
!5226 = !DILocation(line: 1422, column: 14, scope: !5227)
!5227 = distinct !DILexicalBlock(scope: !5034, file: !3, line: 1422, column: 7)
!5228 = !DILocation(line: 1422, column: 12, scope: !5227)
!5229 = !DILocation(line: 1422, column: 19, scope: !5230)
!5230 = distinct !DILexicalBlock(scope: !5227, file: !3, line: 1422, column: 7)
!5231 = !DILocation(line: 1422, column: 48, scope: !5230)
!5232 = !DILocation(line: 1422, column: 23, scope: !5230)
!5233 = !DILocation(line: 1422, column: 21, scope: !5230)
!5234 = !DILocation(line: 1422, column: 7, scope: !5227)
!5235 = !DILocation(line: 1424, column: 10, scope: !5236)
!5236 = distinct !DILexicalBlock(scope: !5230, file: !3, line: 1423, column: 2)
!5237 = !DILocation(line: 1424, column: 8, scope: !5236)
!5238 = !DILocation(line: 1426, column: 8, scope: !5239)
!5239 = distinct !DILexicalBlock(scope: !5236, file: !3, line: 1426, column: 8)
!5240 = !DILocation(line: 1426, column: 8, scope: !5236)
!5241 = !DILocation(line: 1427, column: 13, scope: !5239)
!5242 = !DILocation(line: 1427, column: 6, scope: !5239)
!5243 = !DILocation(line: 1428, column: 10, scope: !5236)
!5244 = !DILocation(line: 1428, column: 8, scope: !5236)
!5245 = !DILocation(line: 1430, column: 8, scope: !5246)
!5246 = distinct !DILexicalBlock(scope: !5236, file: !3, line: 1430, column: 8)
!5247 = !DILocation(line: 1430, column: 8, scope: !5236)
!5248 = !DILocation(line: 1431, column: 13, scope: !5246)
!5249 = !DILocation(line: 1431, column: 6, scope: !5246)
!5250 = !DILocation(line: 1432, column: 10, scope: !5236)
!5251 = !DILocation(line: 1432, column: 8, scope: !5236)
!5252 = !DILocation(line: 1434, column: 8, scope: !5253)
!5253 = distinct !DILexicalBlock(scope: !5236, file: !3, line: 1434, column: 8)
!5254 = !DILocation(line: 1434, column: 8, scope: !5236)
!5255 = !DILocation(line: 1435, column: 13, scope: !5253)
!5256 = !DILocation(line: 1435, column: 6, scope: !5253)
!5257 = !DILocation(line: 1436, column: 10, scope: !5236)
!5258 = !DILocation(line: 1436, column: 8, scope: !5236)
!5259 = !DILocation(line: 1438, column: 2, scope: !5236)
!5260 = !DILocation(line: 1422, column: 56, scope: !5230)
!5261 = !DILocation(line: 1422, column: 7, scope: !5230)
!5262 = distinct !{!5262, !5234, !5263}
!5263 = !DILocation(line: 1438, column: 2, scope: !5227)
!5264 = !DILocation(line: 1439, column: 11, scope: !5265)
!5265 = distinct !DILexicalBlock(scope: !5034, file: !3, line: 1439, column: 11)
!5266 = !DILocation(line: 1439, column: 11, scope: !5034)
!5267 = !DILocation(line: 1440, column: 9, scope: !5265)
!5268 = !DILocation(line: 1440, column: 2, scope: !5265)
!5269 = !DILocation(line: 1441, column: 7, scope: !5034)
!5270 = !DILocation(line: 1444, column: 13, scope: !5034)
!5271 = !DILocation(line: 1444, column: 11, scope: !5034)
!5272 = !DILocation(line: 1446, column: 11, scope: !5273)
!5273 = distinct !DILexicalBlock(scope: !5034, file: !3, line: 1446, column: 11)
!5274 = !DILocation(line: 1446, column: 11, scope: !5034)
!5275 = !DILocation(line: 1447, column: 9, scope: !5273)
!5276 = !DILocation(line: 1447, column: 2, scope: !5273)
!5277 = !DILocation(line: 1448, column: 13, scope: !5034)
!5278 = !DILocation(line: 1448, column: 11, scope: !5034)
!5279 = !DILocation(line: 1450, column: 11, scope: !5280)
!5280 = distinct !DILexicalBlock(scope: !5034, file: !3, line: 1450, column: 11)
!5281 = !DILocation(line: 1450, column: 11, scope: !5034)
!5282 = !DILocation(line: 1451, column: 9, scope: !5280)
!5283 = !DILocation(line: 1451, column: 2, scope: !5280)
!5284 = !DILocation(line: 1452, column: 13, scope: !5034)
!5285 = !DILocation(line: 1452, column: 11, scope: !5034)
!5286 = !DILocation(line: 1454, column: 11, scope: !5287)
!5287 = distinct !DILexicalBlock(scope: !5034, file: !3, line: 1454, column: 11)
!5288 = !DILocation(line: 1454, column: 11, scope: !5034)
!5289 = !DILocation(line: 1455, column: 9, scope: !5287)
!5290 = !DILocation(line: 1455, column: 2, scope: !5287)
!5291 = !DILocation(line: 1456, column: 7, scope: !5034)
!5292 = !DILocation(line: 1459, column: 13, scope: !5034)
!5293 = !DILocation(line: 1459, column: 11, scope: !5034)
!5294 = !DILocation(line: 1461, column: 11, scope: !5295)
!5295 = distinct !DILexicalBlock(scope: !5034, file: !3, line: 1461, column: 11)
!5296 = !DILocation(line: 1461, column: 11, scope: !5034)
!5297 = !DILocation(line: 1462, column: 9, scope: !5295)
!5298 = !DILocation(line: 1462, column: 2, scope: !5295)
!5299 = !DILocation(line: 1463, column: 13, scope: !5034)
!5300 = !DILocation(line: 1463, column: 11, scope: !5034)
!5301 = !DILocation(line: 1465, column: 11, scope: !5302)
!5302 = distinct !DILexicalBlock(scope: !5034, file: !3, line: 1465, column: 11)
!5303 = !DILocation(line: 1465, column: 11, scope: !5034)
!5304 = !DILocation(line: 1466, column: 9, scope: !5302)
!5305 = !DILocation(line: 1466, column: 2, scope: !5302)
!5306 = !DILocation(line: 1467, column: 13, scope: !5034)
!5307 = !DILocation(line: 1467, column: 11, scope: !5034)
!5308 = !DILocation(line: 1469, column: 11, scope: !5309)
!5309 = distinct !DILexicalBlock(scope: !5034, file: !3, line: 1469, column: 11)
!5310 = !DILocation(line: 1469, column: 11, scope: !5034)
!5311 = !DILocation(line: 1470, column: 9, scope: !5309)
!5312 = !DILocation(line: 1470, column: 2, scope: !5309)
!5313 = !DILocation(line: 1471, column: 13, scope: !5034)
!5314 = !DILocation(line: 1471, column: 11, scope: !5034)
!5315 = !DILocation(line: 1473, column: 11, scope: !5316)
!5316 = distinct !DILexicalBlock(scope: !5034, file: !3, line: 1473, column: 11)
!5317 = !DILocation(line: 1473, column: 11, scope: !5034)
!5318 = !DILocation(line: 1474, column: 9, scope: !5316)
!5319 = !DILocation(line: 1474, column: 2, scope: !5316)
!5320 = !DILocation(line: 1475, column: 13, scope: !5034)
!5321 = !DILocation(line: 1475, column: 11, scope: !5034)
!5322 = !DILocation(line: 1477, column: 11, scope: !5323)
!5323 = distinct !DILexicalBlock(scope: !5034, file: !3, line: 1477, column: 11)
!5324 = !DILocation(line: 1477, column: 11, scope: !5034)
!5325 = !DILocation(line: 1478, column: 9, scope: !5323)
!5326 = !DILocation(line: 1478, column: 2, scope: !5323)
!5327 = !DILocation(line: 1479, column: 13, scope: !5034)
!5328 = !DILocation(line: 1479, column: 11, scope: !5034)
!5329 = !DILocation(line: 1481, column: 11, scope: !5330)
!5330 = distinct !DILexicalBlock(scope: !5034, file: !3, line: 1481, column: 11)
!5331 = !DILocation(line: 1481, column: 11, scope: !5034)
!5332 = !DILocation(line: 1482, column: 9, scope: !5330)
!5333 = !DILocation(line: 1482, column: 2, scope: !5330)
!5334 = !DILocation(line: 1483, column: 7, scope: !5034)
!5335 = !DILocation(line: 1486, column: 13, scope: !5034)
!5336 = !DILocation(line: 1486, column: 11, scope: !5034)
!5337 = !DILocation(line: 1488, column: 11, scope: !5338)
!5338 = distinct !DILexicalBlock(scope: !5034, file: !3, line: 1488, column: 11)
!5339 = !DILocation(line: 1488, column: 11, scope: !5034)
!5340 = !DILocation(line: 1489, column: 9, scope: !5338)
!5341 = !DILocation(line: 1489, column: 2, scope: !5338)
!5342 = !DILocation(line: 1491, column: 13, scope: !5034)
!5343 = !DILocation(line: 1491, column: 11, scope: !5034)
!5344 = !DILocation(line: 1493, column: 11, scope: !5345)
!5345 = distinct !DILexicalBlock(scope: !5034, file: !3, line: 1493, column: 11)
!5346 = !DILocation(line: 1493, column: 11, scope: !5034)
!5347 = !DILocation(line: 1494, column: 9, scope: !5345)
!5348 = !DILocation(line: 1494, column: 2, scope: !5345)
!5349 = !DILocation(line: 1496, column: 7, scope: !5034)
!5350 = !DILocation(line: 1499, column: 13, scope: !5034)
!5351 = !DILocation(line: 1499, column: 11, scope: !5034)
!5352 = !DILocation(line: 1501, column: 11, scope: !5353)
!5353 = distinct !DILexicalBlock(scope: !5034, file: !3, line: 1501, column: 11)
!5354 = !DILocation(line: 1501, column: 11, scope: !5034)
!5355 = !DILocation(line: 1502, column: 9, scope: !5353)
!5356 = !DILocation(line: 1502, column: 2, scope: !5353)
!5357 = !DILocation(line: 1503, column: 7, scope: !5034)
!5358 = !DILocation(line: 1506, column: 13, scope: !5034)
!5359 = !DILocation(line: 1506, column: 11, scope: !5034)
!5360 = !DILocation(line: 1508, column: 11, scope: !5361)
!5361 = distinct !DILexicalBlock(scope: !5034, file: !3, line: 1508, column: 11)
!5362 = !DILocation(line: 1508, column: 11, scope: !5034)
!5363 = !DILocation(line: 1509, column: 9, scope: !5361)
!5364 = !DILocation(line: 1509, column: 2, scope: !5361)
!5365 = !DILocation(line: 1511, column: 13, scope: !5034)
!5366 = !DILocation(line: 1511, column: 11, scope: !5034)
!5367 = !DILocation(line: 1513, column: 11, scope: !5368)
!5368 = distinct !DILexicalBlock(scope: !5034, file: !3, line: 1513, column: 11)
!5369 = !DILocation(line: 1513, column: 11, scope: !5034)
!5370 = !DILocation(line: 1514, column: 9, scope: !5368)
!5371 = !DILocation(line: 1514, column: 2, scope: !5368)
!5372 = !DILocation(line: 1515, column: 7, scope: !5034)
!5373 = !DILocation(line: 1518, column: 13, scope: !5034)
!5374 = !DILocation(line: 1518, column: 11, scope: !5034)
!5375 = !DILocation(line: 1520, column: 11, scope: !5376)
!5376 = distinct !DILexicalBlock(scope: !5034, file: !3, line: 1520, column: 11)
!5377 = !DILocation(line: 1520, column: 11, scope: !5034)
!5378 = !DILocation(line: 1521, column: 9, scope: !5376)
!5379 = !DILocation(line: 1521, column: 2, scope: !5376)
!5380 = !DILocation(line: 1522, column: 7, scope: !5034)
!5381 = !DILocation(line: 1529, column: 7, scope: !5034)
!5382 = !DILocalVariable(name: "gss", scope: !5383, file: !3, line: 1533, type: !5)
!5383 = distinct !DILexicalBlock(scope: !5034, file: !3, line: 1532, column: 7)
!5384 = !DILocation(line: 1533, column: 39, scope: !5383)
!5385 = !DILocation(line: 1534, column: 36, scope: !5383)
!5386 = !DILocation(line: 1534, column: 8, scope: !5383)
!5387 = !DILocation(line: 1534, column: 6, scope: !5383)
!5388 = !DILocation(line: 1535, column: 6, scope: !5389)
!5389 = distinct !DILexicalBlock(scope: !5383, file: !3, line: 1535, column: 6)
!5390 = !DILocation(line: 1535, column: 10, scope: !5389)
!5391 = !DILocation(line: 1535, column: 26, scope: !5389)
!5392 = !DILocation(line: 1535, column: 29, scope: !5389)
!5393 = !DILocation(line: 1535, column: 33, scope: !5389)
!5394 = !DILocation(line: 1535, column: 6, scope: !5383)
!5395 = !DILocation(line: 1536, column: 11, scope: !5396)
!5396 = distinct !DILexicalBlock(scope: !5389, file: !3, line: 1536, column: 4)
!5397 = !DILocation(line: 1536, column: 9, scope: !5396)
!5398 = !DILocation(line: 1536, column: 16, scope: !5399)
!5399 = distinct !DILexicalBlock(scope: !5396, file: !3, line: 1536, column: 4)
!5400 = !DILocation(line: 1536, column: 36, scope: !5399)
!5401 = !DILocation(line: 1536, column: 20, scope: !5399)
!5402 = !DILocation(line: 1536, column: 18, scope: !5399)
!5403 = !DILocation(line: 1536, column: 4, scope: !5396)
!5404 = !DILocation(line: 1538, column: 14, scope: !5405)
!5405 = distinct !DILexicalBlock(scope: !5399, file: !3, line: 1537, column: 6)
!5406 = !DILocation(line: 1538, column: 12, scope: !5405)
!5407 = !DILocation(line: 1539, column: 12, scope: !5408)
!5408 = distinct !DILexicalBlock(scope: !5405, file: !3, line: 1539, column: 12)
!5409 = !DILocation(line: 1539, column: 12, scope: !5405)
!5410 = !DILocation(line: 1540, column: 10, scope: !5408)
!5411 = !DILocation(line: 1540, column: 3, scope: !5408)
!5412 = !DILocation(line: 1541, column: 6, scope: !5405)
!5413 = !DILocation(line: 1536, column: 44, scope: !5399)
!5414 = !DILocation(line: 1536, column: 4, scope: !5399)
!5415 = distinct !{!5415, !5403, !5416}
!5416 = !DILocation(line: 1541, column: 6, scope: !5396)
!5417 = !DILocation(line: 1543, column: 7, scope: !5034)
!5418 = !DILocation(line: 1546, column: 3, scope: !5010)
!5419 = !DILocation(line: 1547, column: 1, scope: !5010)
!5420 = distinct !DISubprogram(name: "gimple_code", scope: !6, file: !6, line: 1052, type: !5421, scopeLine: 1053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!5421 = !DISubroutineType(types: !5422)
!5422 = !{!276, !3517}
!5423 = !DILocalVariable(name: "g", arg: 1, scope: !5420, file: !6, line: 1052, type: !3517)
!5424 = !DILocation(line: 1052, column: 27, scope: !5420)
!5425 = !DILocation(line: 1054, column: 10, scope: !5420)
!5426 = !DILocation(line: 1054, column: 13, scope: !5420)
!5427 = !DILocation(line: 1054, column: 20, scope: !5420)
!5428 = !DILocation(line: 1054, column: 3, scope: !5420)
!5429 = distinct !DISubprogram(name: "is_gimple_reg", scope: !3, file: !3, line: 2723, type: !2141, scopeLine: 2724, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!5430 = !DILocalVariable(name: "t", arg: 1, scope: !5429, file: !3, line: 2723, type: !666)
!5431 = !DILocation(line: 2723, column: 21, scope: !5429)
!5432 = !DILocation(line: 2725, column: 7, scope: !5433)
!5433 = distinct !DILexicalBlock(scope: !5429, file: !3, line: 2725, column: 7)
!5434 = !DILocation(line: 2725, column: 21, scope: !5433)
!5435 = !DILocation(line: 2725, column: 7, scope: !5429)
!5436 = !DILocation(line: 2726, column: 9, scope: !5433)
!5437 = !DILocation(line: 2726, column: 7, scope: !5433)
!5438 = !DILocation(line: 2726, column: 5, scope: !5433)
!5439 = !DILocation(line: 2728, column: 28, scope: !5440)
!5440 = distinct !DILexicalBlock(scope: !5429, file: !3, line: 2728, column: 7)
!5441 = !DILocation(line: 2728, column: 8, scope: !5440)
!5442 = !DILocation(line: 2728, column: 7, scope: !5429)
!5443 = !DILocation(line: 2729, column: 5, scope: !5440)
!5444 = !DILocation(line: 2731, column: 28, scope: !5445)
!5445 = distinct !DILexicalBlock(scope: !5429, file: !3, line: 2731, column: 7)
!5446 = !DILocation(line: 2731, column: 8, scope: !5445)
!5447 = !DILocation(line: 2731, column: 7, scope: !5429)
!5448 = !DILocation(line: 2732, column: 5, scope: !5445)
!5449 = !DILocation(line: 2736, column: 7, scope: !5450)
!5450 = distinct !DILexicalBlock(scope: !5429, file: !3, line: 2736, column: 7)
!5451 = !DILocation(line: 2736, column: 7, scope: !5429)
!5452 = !DILocation(line: 2737, column: 5, scope: !5450)
!5453 = !DILocation(line: 2741, column: 32, scope: !5454)
!5454 = distinct !DILexicalBlock(scope: !5429, file: !3, line: 2741, column: 7)
!5455 = !DILocation(line: 2741, column: 7, scope: !5454)
!5456 = !DILocation(line: 2741, column: 7, scope: !5429)
!5457 = !DILocation(line: 2742, column: 5, scope: !5454)
!5458 = !DILocation(line: 2754, column: 7, scope: !5459)
!5459 = distinct !DILexicalBlock(scope: !5429, file: !3, line: 2754, column: 7)
!5460 = !DILocation(line: 2754, column: 21, scope: !5459)
!5461 = !DILocation(line: 2754, column: 33, scope: !5459)
!5462 = !DILocation(line: 2754, column: 36, scope: !5459)
!5463 = !DILocation(line: 2754, column: 7, scope: !5429)
!5464 = !DILocation(line: 2755, column: 5, scope: !5459)
!5465 = !DILocation(line: 2759, column: 7, scope: !5466)
!5466 = distinct !DILexicalBlock(scope: !5429, file: !3, line: 2759, column: 7)
!5467 = !DILocation(line: 2759, column: 33, scope: !5466)
!5468 = !DILocation(line: 2760, column: 7, scope: !5466)
!5469 = !DILocation(line: 2760, column: 10, scope: !5466)
!5470 = !DILocation(line: 2760, column: 36, scope: !5466)
!5471 = !DILocation(line: 2759, column: 7, scope: !5429)
!5472 = !DILocation(line: 2761, column: 12, scope: !5466)
!5473 = !DILocation(line: 2761, column: 5, scope: !5466)
!5474 = !DILocation(line: 2763, column: 3, scope: !5429)
!5475 = !DILocation(line: 2764, column: 1, scope: !5429)
!5476 = distinct !DISubprogram(name: "gimple_assign_lhs", scope: !6, file: !6, line: 1694, type: !3515, scopeLine: 1695, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!5477 = !DILocalVariable(name: "gs", arg: 1, scope: !5476, file: !6, line: 1694, type: !3517)
!5478 = !DILocation(line: 1694, column: 33, scope: !5476)
!5479 = !DILocation(line: 1697, column: 21, scope: !5476)
!5480 = !DILocation(line: 1697, column: 10, scope: !5476)
!5481 = !DILocation(line: 1697, column: 3, scope: !5476)
!5482 = distinct !DISubprogram(name: "gimple_assign_single_p", scope: !3, file: !3, line: 1772, type: !4338, scopeLine: 1773, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!5483 = !DILocalVariable(name: "gs", arg: 1, scope: !5482, file: !3, line: 1772, type: !594)
!5484 = !DILocation(line: 1772, column: 32, scope: !5482)
!5485 = !DILocation(line: 1774, column: 24, scope: !5482)
!5486 = !DILocation(line: 1774, column: 11, scope: !5482)
!5487 = !DILocation(line: 1774, column: 28, scope: !5482)
!5488 = !DILocation(line: 1775, column: 11, scope: !5482)
!5489 = !DILocation(line: 1775, column: 60, scope: !5482)
!5490 = !DILocation(line: 1775, column: 36, scope: !5482)
!5491 = !DILocation(line: 1775, column: 14, scope: !5482)
!5492 = !DILocation(line: 1776, column: 7, scope: !5482)
!5493 = !DILocation(line: 0, scope: !5482)
!5494 = !DILocation(line: 1774, column: 10, scope: !5482)
!5495 = !DILocation(line: 1774, column: 3, scope: !5482)
!5496 = distinct !DISubprogram(name: "gimple_num_ops", scope: !6, file: !6, line: 1596, type: !5497, scopeLine: 1597, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!5497 = !DISubroutineType(types: !5498)
!5498 = !{!7, !3517}
!5499 = !DILocalVariable(name: "gs", arg: 1, scope: !5496, file: !6, line: 1596, type: !3517)
!5500 = !DILocation(line: 1596, column: 30, scope: !5496)
!5501 = !DILocation(line: 1598, column: 10, scope: !5496)
!5502 = !DILocation(line: 1598, column: 14, scope: !5496)
!5503 = !DILocation(line: 1598, column: 21, scope: !5496)
!5504 = !DILocation(line: 1598, column: 3, scope: !5496)
!5505 = distinct !DISubprogram(name: "gimple_op_ptr", scope: !6, file: !6, line: 1647, type: !5506, scopeLine: 1648, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!5506 = !DISubroutineType(types: !5507)
!5507 = !{!1127, !3517, !7}
!5508 = !DILocalVariable(name: "gs", arg: 1, scope: !5505, file: !6, line: 1647, type: !3517)
!5509 = !DILocation(line: 1647, column: 29, scope: !5505)
!5510 = !DILocalVariable(name: "i", arg: 2, scope: !5505, file: !6, line: 1647, type: !7)
!5511 = !DILocation(line: 1647, column: 42, scope: !5505)
!5512 = !DILocation(line: 1649, column: 23, scope: !5513)
!5513 = distinct !DILexicalBlock(scope: !5505, file: !6, line: 1649, column: 7)
!5514 = !DILocation(line: 1649, column: 7, scope: !5513)
!5515 = !DILocation(line: 1649, column: 7, scope: !5505)
!5516 = !DILocation(line: 1654, column: 26, scope: !5517)
!5517 = distinct !DILexicalBlock(scope: !5513, file: !6, line: 1650, column: 5)
!5518 = !DILocation(line: 1654, column: 14, scope: !5517)
!5519 = !DILocation(line: 1654, column: 52, scope: !5517)
!5520 = !DILocation(line: 1654, column: 50, scope: !5517)
!5521 = !DILocation(line: 1654, column: 7, scope: !5517)
!5522 = !DILocation(line: 1657, column: 5, scope: !5513)
!5523 = !DILocation(line: 1658, column: 1, scope: !5505)
!5524 = distinct !DISubprogram(name: "is_gimple_mem_rhs", scope: !3, file: !3, line: 2443, type: !2141, scopeLine: 2444, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!5525 = !DILocalVariable(name: "t", arg: 1, scope: !5524, file: !3, line: 2443, type: !666)
!5526 = !DILocation(line: 2443, column: 25, scope: !5524)
!5527 = !DILocation(line: 2447, column: 27, scope: !5528)
!5528 = distinct !DILexicalBlock(scope: !5524, file: !3, line: 2447, column: 7)
!5529 = !DILocation(line: 2447, column: 7, scope: !5528)
!5530 = !DILocation(line: 2447, column: 7, scope: !5524)
!5531 = !DILocation(line: 2448, column: 27, scope: !5528)
!5532 = !DILocation(line: 2448, column: 12, scope: !5528)
!5533 = !DILocation(line: 2448, column: 5, scope: !5528)
!5534 = !DILocation(line: 2450, column: 27, scope: !5528)
!5535 = !DILocation(line: 2450, column: 12, scope: !5528)
!5536 = !DILocation(line: 2450, column: 30, scope: !5528)
!5537 = !DILocation(line: 2450, column: 51, scope: !5528)
!5538 = !DILocation(line: 2450, column: 33, scope: !5528)
!5539 = !DILocation(line: 2450, column: 5, scope: !5528)
!5540 = !DILocation(line: 2451, column: 1, scope: !5524)
!5541 = distinct !DISubprogram(name: "gimple_assign_rhs1", scope: !6, file: !6, line: 1727, type: !3515, scopeLine: 1728, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!5542 = !DILocalVariable(name: "gs", arg: 1, scope: !5541, file: !6, line: 1727, type: !3517)
!5543 = !DILocation(line: 1727, column: 34, scope: !5541)
!5544 = !DILocation(line: 1730, column: 21, scope: !5541)
!5545 = !DILocation(line: 1730, column: 10, scope: !5541)
!5546 = !DILocation(line: 1730, column: 3, scope: !5541)
!5547 = distinct !DISubprogram(name: "gimple_call_chain_ptr", scope: !6, file: !6, line: 1993, type: !5548, scopeLine: 1994, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!5548 = !DISubroutineType(types: !5549)
!5549 = !{!1127, !3517}
!5550 = !DILocalVariable(name: "gs", arg: 1, scope: !5547, file: !6, line: 1993, type: !3517)
!5551 = !DILocation(line: 1993, column: 37, scope: !5547)
!5552 = !DILocation(line: 1996, column: 25, scope: !5547)
!5553 = !DILocation(line: 1996, column: 10, scope: !5547)
!5554 = !DILocation(line: 1996, column: 3, scope: !5547)
!5555 = distinct !DISubprogram(name: "gimple_call_fn_ptr", scope: !6, file: !6, line: 1922, type: !5548, scopeLine: 1923, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!5556 = !DILocalVariable(name: "gs", arg: 1, scope: !5555, file: !6, line: 1922, type: !3517)
!5557 = !DILocation(line: 1922, column: 34, scope: !5555)
!5558 = !DILocation(line: 1925, column: 25, scope: !5555)
!5559 = !DILocation(line: 1925, column: 10, scope: !5555)
!5560 = !DILocation(line: 1925, column: 3, scope: !5555)
!5561 = distinct !DISubprogram(name: "gimple_call_num_args", scope: !6, file: !6, line: 2013, type: !5497, scopeLine: 2014, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!5562 = !DILocalVariable(name: "gs", arg: 1, scope: !5561, file: !6, line: 2013, type: !3517)
!5563 = !DILocation(line: 2013, column: 36, scope: !5561)
!5564 = !DILocalVariable(name: "num_ops", scope: !5561, file: !6, line: 2015, type: !7)
!5565 = !DILocation(line: 2015, column: 12, scope: !5561)
!5566 = !DILocation(line: 2017, column: 29, scope: !5561)
!5567 = !DILocation(line: 2017, column: 13, scope: !5561)
!5568 = !DILocation(line: 2017, column: 11, scope: !5561)
!5569 = !DILocation(line: 2018, column: 10, scope: !5561)
!5570 = !DILocation(line: 2018, column: 18, scope: !5561)
!5571 = !DILocation(line: 2018, column: 3, scope: !5561)
!5572 = distinct !DISubprogram(name: "gimple_call_arg_ptr", scope: !6, file: !6, line: 2036, type: !5506, scopeLine: 2037, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!5573 = !DILocalVariable(name: "gs", arg: 1, scope: !5572, file: !6, line: 2036, type: !3517)
!5574 = !DILocation(line: 2036, column: 35, scope: !5572)
!5575 = !DILocalVariable(name: "index", arg: 2, scope: !5572, file: !6, line: 2036, type: !7)
!5576 = !DILocation(line: 2036, column: 48, scope: !5572)
!5577 = !DILocation(line: 2039, column: 25, scope: !5572)
!5578 = !DILocation(line: 2039, column: 29, scope: !5572)
!5579 = !DILocation(line: 2039, column: 35, scope: !5572)
!5580 = !DILocation(line: 2039, column: 10, scope: !5572)
!5581 = !DILocation(line: 2039, column: 3, scope: !5572)
!5582 = distinct !DISubprogram(name: "gimple_call_lhs_ptr", scope: !6, file: !6, line: 1888, type: !5548, scopeLine: 1889, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!5583 = !DILocalVariable(name: "gs", arg: 1, scope: !5582, file: !6, line: 1888, type: !3517)
!5584 = !DILocation(line: 1888, column: 35, scope: !5582)
!5585 = !DILocation(line: 1891, column: 25, scope: !5582)
!5586 = !DILocation(line: 1891, column: 10, scope: !5582)
!5587 = !DILocation(line: 1891, column: 3, scope: !5582)
!5588 = distinct !DISubprogram(name: "gimple_catch_types_ptr", scope: !6, file: !6, line: 2795, type: !5589, scopeLine: 2796, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!5589 = !DISubroutineType(types: !5590)
!5590 = !{!1127, !594}
!5591 = !DILocalVariable(name: "gs", arg: 1, scope: !5588, file: !6, line: 2795, type: !594)
!5592 = !DILocation(line: 2795, column: 32, scope: !5588)
!5593 = !DILocation(line: 2798, column: 11, scope: !5588)
!5594 = !DILocation(line: 2798, column: 15, scope: !5588)
!5595 = !DILocation(line: 2798, column: 28, scope: !5588)
!5596 = !DILocation(line: 2798, column: 3, scope: !5588)
!5597 = distinct !DISubprogram(name: "gimple_eh_filter_types_ptr", scope: !6, file: !6, line: 2858, type: !5589, scopeLine: 2859, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!5598 = !DILocalVariable(name: "gs", arg: 1, scope: !5597, file: !6, line: 2858, type: !594)
!5599 = !DILocation(line: 2858, column: 36, scope: !5597)
!5600 = !DILocation(line: 2861, column: 11, scope: !5597)
!5601 = !DILocation(line: 2861, column: 15, scope: !5597)
!5602 = !DILocation(line: 2861, column: 32, scope: !5597)
!5603 = !DILocation(line: 2861, column: 3, scope: !5597)
!5604 = distinct !DISubprogram(name: "walk_gimple_asm", scope: !3, file: !3, line: 1218, type: !5011, scopeLine: 1220, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!5605 = !DILocalVariable(name: "stmt", arg: 1, scope: !5604, file: !3, line: 1218, type: !594)
!5606 = !DILocation(line: 1218, column: 25, scope: !5604)
!5607 = !DILocalVariable(name: "callback_op", arg: 2, scope: !5604, file: !3, line: 1218, type: !4763)
!5608 = !DILocation(line: 1218, column: 44, scope: !5604)
!5609 = !DILocalVariable(name: "wi", arg: 3, scope: !5604, file: !3, line: 1219, type: !1805)
!5610 = !DILocation(line: 1219, column: 27, scope: !5604)
!5611 = !DILocalVariable(name: "ret", scope: !5604, file: !3, line: 1221, type: !666)
!5612 = !DILocation(line: 1221, column: 8, scope: !5604)
!5613 = !DILocalVariable(name: "op", scope: !5604, file: !3, line: 1221, type: !666)
!5614 = !DILocation(line: 1221, column: 13, scope: !5604)
!5615 = !DILocalVariable(name: "noutputs", scope: !5604, file: !3, line: 1222, type: !7)
!5616 = !DILocation(line: 1222, column: 12, scope: !5604)
!5617 = !DILocalVariable(name: "oconstraints", scope: !5604, file: !3, line: 1223, type: !1776)
!5618 = !DILocation(line: 1223, column: 16, scope: !5604)
!5619 = !DILocalVariable(name: "i", scope: !5604, file: !3, line: 1224, type: !7)
!5620 = !DILocation(line: 1224, column: 12, scope: !5604)
!5621 = !DILocalVariable(name: "n", scope: !5604, file: !3, line: 1224, type: !7)
!5622 = !DILocation(line: 1224, column: 15, scope: !5604)
!5623 = !DILocalVariable(name: "constraint", scope: !5604, file: !3, line: 1225, type: !1161)
!5624 = !DILocation(line: 1225, column: 15, scope: !5604)
!5625 = !DILocalVariable(name: "allows_mem", scope: !5604, file: !3, line: 1226, type: !769)
!5626 = !DILocation(line: 1226, column: 8, scope: !5604)
!5627 = !DILocalVariable(name: "allows_reg", scope: !5604, file: !3, line: 1226, type: !769)
!5628 = !DILocation(line: 1226, column: 20, scope: !5604)
!5629 = !DILocalVariable(name: "is_inout", scope: !5604, file: !3, line: 1226, type: !769)
!5630 = !DILocation(line: 1226, column: 32, scope: !5604)
!5631 = !DILocation(line: 1228, column: 35, scope: !5604)
!5632 = !DILocation(line: 1228, column: 14, scope: !5604)
!5633 = !DILocation(line: 1228, column: 12, scope: !5604)
!5634 = !DILocation(line: 1229, column: 34, scope: !5604)
!5635 = !DILocation(line: 1229, column: 18, scope: !5604)
!5636 = !DILocation(line: 1229, column: 16, scope: !5604)
!5637 = !DILocation(line: 1231, column: 7, scope: !5638)
!5638 = distinct !DILexicalBlock(scope: !5604, file: !3, line: 1231, column: 7)
!5639 = !DILocation(line: 1231, column: 7, scope: !5604)
!5640 = !DILocation(line: 1232, column: 5, scope: !5638)
!5641 = !DILocation(line: 1232, column: 9, scope: !5638)
!5642 = !DILocation(line: 1232, column: 16, scope: !5638)
!5643 = !DILocation(line: 1234, column: 10, scope: !5644)
!5644 = distinct !DILexicalBlock(scope: !5604, file: !3, line: 1234, column: 3)
!5645 = !DILocation(line: 1234, column: 8, scope: !5644)
!5646 = !DILocation(line: 1234, column: 15, scope: !5647)
!5647 = distinct !DILexicalBlock(scope: !5644, file: !3, line: 1234, column: 3)
!5648 = !DILocation(line: 1234, column: 19, scope: !5647)
!5649 = !DILocation(line: 1234, column: 17, scope: !5647)
!5650 = !DILocation(line: 1234, column: 3, scope: !5644)
!5651 = !DILocation(line: 1236, column: 34, scope: !5652)
!5652 = distinct !DILexicalBlock(scope: !5647, file: !3, line: 1235, column: 5)
!5653 = !DILocation(line: 1236, column: 40, scope: !5652)
!5654 = !DILocation(line: 1236, column: 12, scope: !5652)
!5655 = !DILocation(line: 1236, column: 10, scope: !5652)
!5656 = !DILocation(line: 1237, column: 20, scope: !5652)
!5657 = !DILocation(line: 1237, column: 18, scope: !5652)
!5658 = !DILocation(line: 1238, column: 25, scope: !5652)
!5659 = !DILocation(line: 1238, column: 7, scope: !5652)
!5660 = !DILocation(line: 1238, column: 20, scope: !5652)
!5661 = !DILocation(line: 1238, column: 23, scope: !5652)
!5662 = !DILocation(line: 1239, column: 45, scope: !5652)
!5663 = !DILocation(line: 1239, column: 7, scope: !5652)
!5664 = !DILocation(line: 1241, column: 11, scope: !5665)
!5665 = distinct !DILexicalBlock(scope: !5652, file: !3, line: 1241, column: 11)
!5666 = !DILocation(line: 1241, column: 11, scope: !5652)
!5667 = !DILocation(line: 1242, column: 18, scope: !5665)
!5668 = !DILocation(line: 1242, column: 29, scope: !5665)
!5669 = !DILocation(line: 1242, column: 33, scope: !5665)
!5670 = !DILocation(line: 1242, column: 32, scope: !5665)
!5671 = !DILocation(line: 1242, column: 17, scope: !5665)
!5672 = !DILocation(line: 1242, column: 2, scope: !5665)
!5673 = !DILocation(line: 1242, column: 6, scope: !5665)
!5674 = !DILocation(line: 1242, column: 15, scope: !5665)
!5675 = !DILocation(line: 1243, column: 13, scope: !5652)
!5676 = !DILocation(line: 1243, column: 11, scope: !5652)
!5677 = !DILocation(line: 1244, column: 11, scope: !5678)
!5678 = distinct !DILexicalBlock(scope: !5652, file: !3, line: 1244, column: 11)
!5679 = !DILocation(line: 1244, column: 11, scope: !5652)
!5680 = !DILocation(line: 1245, column: 9, scope: !5678)
!5681 = !DILocation(line: 1245, column: 2, scope: !5678)
!5682 = !DILocation(line: 1246, column: 5, scope: !5652)
!5683 = !DILocation(line: 1234, column: 30, scope: !5647)
!5684 = !DILocation(line: 1234, column: 3, scope: !5647)
!5685 = distinct !{!5685, !5650, !5686}
!5686 = !DILocation(line: 1246, column: 5, scope: !5644)
!5687 = !DILocation(line: 1248, column: 27, scope: !5604)
!5688 = !DILocation(line: 1248, column: 7, scope: !5604)
!5689 = !DILocation(line: 1248, column: 5, scope: !5604)
!5690 = !DILocation(line: 1249, column: 10, scope: !5691)
!5691 = distinct !DILexicalBlock(scope: !5604, file: !3, line: 1249, column: 3)
!5692 = !DILocation(line: 1249, column: 8, scope: !5691)
!5693 = !DILocation(line: 1249, column: 15, scope: !5694)
!5694 = distinct !DILexicalBlock(scope: !5691, file: !3, line: 1249, column: 3)
!5695 = !DILocation(line: 1249, column: 19, scope: !5694)
!5696 = !DILocation(line: 1249, column: 17, scope: !5694)
!5697 = !DILocation(line: 1249, column: 3, scope: !5691)
!5698 = !DILocation(line: 1251, column: 33, scope: !5699)
!5699 = distinct !DILexicalBlock(scope: !5694, file: !3, line: 1250, column: 5)
!5700 = !DILocation(line: 1251, column: 39, scope: !5699)
!5701 = !DILocation(line: 1251, column: 12, scope: !5699)
!5702 = !DILocation(line: 1251, column: 10, scope: !5699)
!5703 = !DILocation(line: 1252, column: 20, scope: !5699)
!5704 = !DILocation(line: 1252, column: 18, scope: !5699)
!5705 = !DILocation(line: 1253, column: 50, scope: !5699)
!5706 = !DILocation(line: 1254, column: 10, scope: !5699)
!5707 = !DILocation(line: 1253, column: 7, scope: !5699)
!5708 = !DILocation(line: 1255, column: 11, scope: !5709)
!5709 = distinct !DILexicalBlock(scope: !5699, file: !3, line: 1255, column: 11)
!5710 = !DILocation(line: 1255, column: 11, scope: !5699)
!5711 = !DILocation(line: 1257, column: 20, scope: !5712)
!5712 = distinct !DILexicalBlock(scope: !5709, file: !3, line: 1256, column: 2)
!5713 = !DILocation(line: 1257, column: 31, scope: !5712)
!5714 = !DILocation(line: 1257, column: 35, scope: !5712)
!5715 = !DILocation(line: 1257, column: 34, scope: !5712)
!5716 = !DILocation(line: 1257, column: 19, scope: !5712)
!5717 = !DILocation(line: 1257, column: 4, scope: !5712)
!5718 = !DILocation(line: 1257, column: 8, scope: !5712)
!5719 = !DILocation(line: 1257, column: 17, scope: !5712)
!5720 = !DILocation(line: 1259, column: 18, scope: !5712)
!5721 = !DILocation(line: 1259, column: 22, scope: !5712)
!5722 = !DILocation(line: 1259, column: 17, scope: !5712)
!5723 = !DILocation(line: 1259, column: 4, scope: !5712)
!5724 = !DILocation(line: 1259, column: 8, scope: !5712)
!5725 = !DILocation(line: 1259, column: 15, scope: !5712)
!5726 = !DILocation(line: 1260, column: 2, scope: !5712)
!5727 = !DILocation(line: 1261, column: 13, scope: !5699)
!5728 = !DILocation(line: 1261, column: 11, scope: !5699)
!5729 = !DILocation(line: 1262, column: 11, scope: !5730)
!5730 = distinct !DILexicalBlock(scope: !5699, file: !3, line: 1262, column: 11)
!5731 = !DILocation(line: 1262, column: 11, scope: !5699)
!5732 = !DILocation(line: 1263, column: 9, scope: !5730)
!5733 = !DILocation(line: 1263, column: 2, scope: !5730)
!5734 = !DILocation(line: 1264, column: 5, scope: !5699)
!5735 = !DILocation(line: 1249, column: 23, scope: !5694)
!5736 = !DILocation(line: 1249, column: 3, scope: !5694)
!5737 = distinct !{!5737, !5697, !5738}
!5738 = !DILocation(line: 1264, column: 5, scope: !5691)
!5739 = !DILocation(line: 1266, column: 7, scope: !5740)
!5740 = distinct !DILexicalBlock(scope: !5604, file: !3, line: 1266, column: 7)
!5741 = !DILocation(line: 1266, column: 7, scope: !5604)
!5742 = !DILocation(line: 1268, column: 7, scope: !5743)
!5743 = distinct !DILexicalBlock(scope: !5740, file: !3, line: 1267, column: 5)
!5744 = !DILocation(line: 1268, column: 11, scope: !5743)
!5745 = !DILocation(line: 1268, column: 18, scope: !5743)
!5746 = !DILocation(line: 1269, column: 7, scope: !5743)
!5747 = !DILocation(line: 1269, column: 11, scope: !5743)
!5748 = !DILocation(line: 1269, column: 20, scope: !5743)
!5749 = !DILocation(line: 1270, column: 5, scope: !5743)
!5750 = !DILocation(line: 1272, column: 27, scope: !5604)
!5751 = !DILocation(line: 1272, column: 7, scope: !5604)
!5752 = !DILocation(line: 1272, column: 5, scope: !5604)
!5753 = !DILocation(line: 1273, column: 10, scope: !5754)
!5754 = distinct !DILexicalBlock(scope: !5604, file: !3, line: 1273, column: 3)
!5755 = !DILocation(line: 1273, column: 8, scope: !5754)
!5756 = !DILocation(line: 1273, column: 15, scope: !5757)
!5757 = distinct !DILexicalBlock(scope: !5754, file: !3, line: 1273, column: 3)
!5758 = !DILocation(line: 1273, column: 19, scope: !5757)
!5759 = !DILocation(line: 1273, column: 17, scope: !5757)
!5760 = !DILocation(line: 1273, column: 3, scope: !5754)
!5761 = !DILocation(line: 1275, column: 33, scope: !5762)
!5762 = distinct !DILexicalBlock(scope: !5757, file: !3, line: 1274, column: 5)
!5763 = !DILocation(line: 1275, column: 39, scope: !5762)
!5764 = !DILocation(line: 1275, column: 12, scope: !5762)
!5765 = !DILocation(line: 1275, column: 10, scope: !5762)
!5766 = !DILocation(line: 1276, column: 13, scope: !5762)
!5767 = !DILocation(line: 1276, column: 11, scope: !5762)
!5768 = !DILocation(line: 1277, column: 11, scope: !5769)
!5769 = distinct !DILexicalBlock(scope: !5762, file: !3, line: 1277, column: 11)
!5770 = !DILocation(line: 1277, column: 11, scope: !5762)
!5771 = !DILocation(line: 1278, column: 9, scope: !5769)
!5772 = !DILocation(line: 1278, column: 2, scope: !5769)
!5773 = !DILocation(line: 1279, column: 5, scope: !5762)
!5774 = !DILocation(line: 1273, column: 23, scope: !5757)
!5775 = !DILocation(line: 1273, column: 3, scope: !5757)
!5776 = distinct !{!5776, !5760, !5777}
!5777 = !DILocation(line: 1279, column: 5, scope: !5754)
!5778 = !DILocation(line: 1281, column: 3, scope: !5604)
!5779 = !DILocation(line: 1282, column: 1, scope: !5604)
!5780 = distinct !DISubprogram(name: "gimple_omp_continue_control_def_ptr", scope: !6, file: !6, line: 4195, type: !5589, scopeLine: 4196, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!5781 = !DILocalVariable(name: "g", arg: 1, scope: !5780, file: !6, line: 4195, type: !594)
!5782 = !DILocation(line: 4195, column: 45, scope: !5780)
!5783 = !DILocation(line: 4198, column: 11, scope: !5780)
!5784 = !DILocation(line: 4198, column: 14, scope: !5780)
!5785 = !DILocation(line: 4198, column: 34, scope: !5780)
!5786 = !DILocation(line: 4198, column: 3, scope: !5780)
!5787 = distinct !DISubprogram(name: "gimple_omp_continue_control_use_ptr", scope: !6, file: !6, line: 4224, type: !5589, scopeLine: 4225, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!5788 = !DILocalVariable(name: "g", arg: 1, scope: !5787, file: !6, line: 4224, type: !594)
!5789 = !DILocation(line: 4224, column: 45, scope: !5787)
!5790 = !DILocation(line: 4227, column: 11, scope: !5787)
!5791 = !DILocation(line: 4227, column: 14, scope: !5787)
!5792 = !DILocation(line: 4227, column: 34, scope: !5787)
!5793 = !DILocation(line: 4227, column: 3, scope: !5787)
!5794 = distinct !DISubprogram(name: "gimple_omp_critical_name_ptr", scope: !6, file: !6, line: 3390, type: !5589, scopeLine: 3391, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!5795 = !DILocalVariable(name: "gs", arg: 1, scope: !5794, file: !6, line: 3390, type: !594)
!5796 = !DILocation(line: 3390, column: 38, scope: !5794)
!5797 = !DILocation(line: 3393, column: 11, scope: !5794)
!5798 = !DILocation(line: 3393, column: 15, scope: !5794)
!5799 = !DILocation(line: 3393, column: 35, scope: !5794)
!5800 = !DILocation(line: 3393, column: 3, scope: !5794)
!5801 = distinct !DISubprogram(name: "gimple_omp_for_clauses_ptr", scope: !6, file: !6, line: 3420, type: !5589, scopeLine: 3421, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!5802 = !DILocalVariable(name: "gs", arg: 1, scope: !5801, file: !6, line: 3420, type: !594)
!5803 = !DILocation(line: 3420, column: 36, scope: !5801)
!5804 = !DILocation(line: 3423, column: 11, scope: !5801)
!5805 = !DILocation(line: 3423, column: 15, scope: !5801)
!5806 = !DILocation(line: 3423, column: 30, scope: !5801)
!5807 = !DILocation(line: 3423, column: 3, scope: !5801)
!5808 = distinct !DISubprogram(name: "gimple_omp_for_collapse", scope: !6, file: !6, line: 3440, type: !5809, scopeLine: 3441, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!5809 = !DISubroutineType(types: !5810)
!5810 = !{!978, !594}
!5811 = !DILocalVariable(name: "gs", arg: 1, scope: !5808, file: !6, line: 3440, type: !594)
!5812 = !DILocation(line: 3440, column: 33, scope: !5808)
!5813 = !DILocation(line: 3443, column: 10, scope: !5808)
!5814 = !DILocation(line: 3443, column: 14, scope: !5808)
!5815 = !DILocation(line: 3443, column: 29, scope: !5808)
!5816 = !DILocation(line: 3443, column: 3, scope: !5808)
!5817 = distinct !DISubprogram(name: "gimple_omp_for_index_ptr", scope: !6, file: !6, line: 3461, type: !5818, scopeLine: 3462, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!5818 = !DISubroutineType(types: !5819)
!5819 = !{!1127, !594, !978}
!5820 = !DILocalVariable(name: "gs", arg: 1, scope: !5817, file: !6, line: 3461, type: !594)
!5821 = !DILocation(line: 3461, column: 34, scope: !5817)
!5822 = !DILocalVariable(name: "i", arg: 2, scope: !5817, file: !6, line: 3461, type: !978)
!5823 = !DILocation(line: 3461, column: 45, scope: !5817)
!5824 = !DILocation(line: 3464, column: 3, scope: !5817)
!5825 = !DILocation(line: 3465, column: 11, scope: !5817)
!5826 = !DILocation(line: 3465, column: 15, scope: !5817)
!5827 = !DILocation(line: 3465, column: 30, scope: !5817)
!5828 = !DILocation(line: 3465, column: 35, scope: !5817)
!5829 = !DILocation(line: 3465, column: 38, scope: !5817)
!5830 = !DILocation(line: 3465, column: 3, scope: !5817)
!5831 = distinct !DISubprogram(name: "gimple_omp_for_initial_ptr", scope: !6, file: !6, line: 3494, type: !5818, scopeLine: 3495, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!5832 = !DILocalVariable(name: "gs", arg: 1, scope: !5831, file: !6, line: 3494, type: !594)
!5833 = !DILocation(line: 3494, column: 36, scope: !5831)
!5834 = !DILocalVariable(name: "i", arg: 2, scope: !5831, file: !6, line: 3494, type: !978)
!5835 = !DILocation(line: 3494, column: 47, scope: !5831)
!5836 = !DILocation(line: 3497, column: 3, scope: !5831)
!5837 = !DILocation(line: 3498, column: 11, scope: !5831)
!5838 = !DILocation(line: 3498, column: 15, scope: !5831)
!5839 = !DILocation(line: 3498, column: 30, scope: !5831)
!5840 = !DILocation(line: 3498, column: 35, scope: !5831)
!5841 = !DILocation(line: 3498, column: 38, scope: !5831)
!5842 = !DILocation(line: 3498, column: 3, scope: !5831)
!5843 = distinct !DISubprogram(name: "gimple_omp_for_final_ptr", scope: !6, file: !6, line: 3527, type: !5818, scopeLine: 3528, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!5844 = !DILocalVariable(name: "gs", arg: 1, scope: !5843, file: !6, line: 3527, type: !594)
!5845 = !DILocation(line: 3527, column: 34, scope: !5843)
!5846 = !DILocalVariable(name: "i", arg: 2, scope: !5843, file: !6, line: 3527, type: !978)
!5847 = !DILocation(line: 3527, column: 45, scope: !5843)
!5848 = !DILocation(line: 3530, column: 3, scope: !5843)
!5849 = !DILocation(line: 3531, column: 11, scope: !5843)
!5850 = !DILocation(line: 3531, column: 15, scope: !5843)
!5851 = !DILocation(line: 3531, column: 30, scope: !5843)
!5852 = !DILocation(line: 3531, column: 35, scope: !5843)
!5853 = !DILocation(line: 3531, column: 38, scope: !5843)
!5854 = !DILocation(line: 3531, column: 3, scope: !5843)
!5855 = distinct !DISubprogram(name: "gimple_omp_for_incr_ptr", scope: !6, file: !6, line: 3560, type: !5818, scopeLine: 3561, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!5856 = !DILocalVariable(name: "gs", arg: 1, scope: !5855, file: !6, line: 3560, type: !594)
!5857 = !DILocation(line: 3560, column: 33, scope: !5855)
!5858 = !DILocalVariable(name: "i", arg: 2, scope: !5855, file: !6, line: 3560, type: !978)
!5859 = !DILocation(line: 3560, column: 44, scope: !5855)
!5860 = !DILocation(line: 3563, column: 3, scope: !5855)
!5861 = !DILocation(line: 3564, column: 11, scope: !5855)
!5862 = !DILocation(line: 3564, column: 15, scope: !5855)
!5863 = !DILocation(line: 3564, column: 30, scope: !5855)
!5864 = !DILocation(line: 3564, column: 35, scope: !5855)
!5865 = !DILocation(line: 3564, column: 38, scope: !5855)
!5866 = !DILocation(line: 3564, column: 3, scope: !5855)
!5867 = distinct !DISubprogram(name: "gimple_omp_parallel_clauses_ptr", scope: !6, file: !6, line: 3614, type: !5589, scopeLine: 3615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!5868 = !DILocalVariable(name: "gs", arg: 1, scope: !5867, file: !6, line: 3614, type: !594)
!5869 = !DILocation(line: 3614, column: 41, scope: !5867)
!5870 = !DILocation(line: 3617, column: 11, scope: !5867)
!5871 = !DILocation(line: 3617, column: 15, scope: !5867)
!5872 = !DILocation(line: 3617, column: 35, scope: !5867)
!5873 = !DILocation(line: 3617, column: 3, scope: !5867)
!5874 = distinct !DISubprogram(name: "gimple_omp_parallel_child_fn_ptr", scope: !6, file: !6, line: 3645, type: !5589, scopeLine: 3646, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!5875 = !DILocalVariable(name: "gs", arg: 1, scope: !5874, file: !6, line: 3645, type: !594)
!5876 = !DILocation(line: 3645, column: 42, scope: !5874)
!5877 = !DILocation(line: 3648, column: 11, scope: !5874)
!5878 = !DILocation(line: 3648, column: 15, scope: !5874)
!5879 = !DILocation(line: 3648, column: 35, scope: !5874)
!5880 = !DILocation(line: 3648, column: 3, scope: !5874)
!5881 = distinct !DISubprogram(name: "gimple_omp_parallel_data_arg_ptr", scope: !6, file: !6, line: 3676, type: !5589, scopeLine: 3677, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!5882 = !DILocalVariable(name: "gs", arg: 1, scope: !5881, file: !6, line: 3676, type: !594)
!5883 = !DILocation(line: 3676, column: 42, scope: !5881)
!5884 = !DILocation(line: 3679, column: 11, scope: !5881)
!5885 = !DILocation(line: 3679, column: 15, scope: !5881)
!5886 = !DILocation(line: 3679, column: 35, scope: !5881)
!5887 = !DILocation(line: 3679, column: 3, scope: !5881)
!5888 = distinct !DISubprogram(name: "gimple_omp_task_clauses_ptr", scope: !6, file: !6, line: 3706, type: !5589, scopeLine: 3707, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!5889 = !DILocalVariable(name: "gs", arg: 1, scope: !5888, file: !6, line: 3706, type: !594)
!5890 = !DILocation(line: 3706, column: 37, scope: !5888)
!5891 = !DILocation(line: 3709, column: 11, scope: !5888)
!5892 = !DILocation(line: 3709, column: 15, scope: !5888)
!5893 = !DILocation(line: 3709, column: 35, scope: !5888)
!5894 = !DILocation(line: 3709, column: 3, scope: !5888)
!5895 = distinct !DISubprogram(name: "gimple_omp_task_child_fn_ptr", scope: !6, file: !6, line: 3737, type: !5589, scopeLine: 3738, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!5896 = !DILocalVariable(name: "gs", arg: 1, scope: !5895, file: !6, line: 3737, type: !594)
!5897 = !DILocation(line: 3737, column: 38, scope: !5895)
!5898 = !DILocation(line: 3740, column: 11, scope: !5895)
!5899 = !DILocation(line: 3740, column: 15, scope: !5895)
!5900 = !DILocation(line: 3740, column: 35, scope: !5895)
!5901 = !DILocation(line: 3740, column: 3, scope: !5895)
!5902 = distinct !DISubprogram(name: "gimple_omp_task_data_arg_ptr", scope: !6, file: !6, line: 3768, type: !5589, scopeLine: 3769, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!5903 = !DILocalVariable(name: "gs", arg: 1, scope: !5902, file: !6, line: 3768, type: !594)
!5904 = !DILocation(line: 3768, column: 38, scope: !5902)
!5905 = !DILocation(line: 3771, column: 11, scope: !5902)
!5906 = !DILocation(line: 3771, column: 15, scope: !5902)
!5907 = !DILocation(line: 3771, column: 35, scope: !5902)
!5908 = !DILocation(line: 3771, column: 3, scope: !5902)
!5909 = distinct !DISubprogram(name: "gimple_omp_task_copy_fn_ptr", scope: !6, file: !6, line: 3899, type: !5589, scopeLine: 3900, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!5910 = !DILocalVariable(name: "gs", arg: 1, scope: !5909, file: !6, line: 3899, type: !594)
!5911 = !DILocation(line: 3899, column: 37, scope: !5909)
!5912 = !DILocation(line: 3902, column: 11, scope: !5909)
!5913 = !DILocation(line: 3902, column: 15, scope: !5909)
!5914 = !DILocation(line: 3902, column: 31, scope: !5909)
!5915 = !DILocation(line: 3902, column: 3, scope: !5909)
!5916 = distinct !DISubprogram(name: "gimple_omp_task_arg_size_ptr", scope: !6, file: !6, line: 3929, type: !5589, scopeLine: 3930, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!5917 = !DILocalVariable(name: "gs", arg: 1, scope: !5916, file: !6, line: 3929, type: !594)
!5918 = !DILocation(line: 3929, column: 38, scope: !5916)
!5919 = !DILocation(line: 3932, column: 11, scope: !5916)
!5920 = !DILocation(line: 3932, column: 15, scope: !5916)
!5921 = !DILocation(line: 3932, column: 31, scope: !5916)
!5922 = !DILocation(line: 3932, column: 3, scope: !5916)
!5923 = distinct !DISubprogram(name: "gimple_omp_task_arg_align_ptr", scope: !6, file: !6, line: 3959, type: !5589, scopeLine: 3960, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!5924 = !DILocalVariable(name: "gs", arg: 1, scope: !5923, file: !6, line: 3959, type: !594)
!5925 = !DILocation(line: 3959, column: 39, scope: !5923)
!5926 = !DILocation(line: 3962, column: 11, scope: !5923)
!5927 = !DILocation(line: 3962, column: 15, scope: !5923)
!5928 = !DILocation(line: 3962, column: 31, scope: !5923)
!5929 = !DILocation(line: 3962, column: 3, scope: !5923)
!5930 = distinct !DISubprogram(name: "gimple_omp_sections_clauses_ptr", scope: !6, file: !6, line: 4019, type: !5589, scopeLine: 4020, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!5931 = !DILocalVariable(name: "gs", arg: 1, scope: !5930, file: !6, line: 4019, type: !594)
!5932 = !DILocation(line: 4019, column: 41, scope: !5930)
!5933 = !DILocation(line: 4022, column: 11, scope: !5930)
!5934 = !DILocation(line: 4022, column: 15, scope: !5930)
!5935 = !DILocation(line: 4022, column: 35, scope: !5930)
!5936 = !DILocation(line: 4022, column: 3, scope: !5930)
!5937 = distinct !DISubprogram(name: "gimple_omp_sections_control_ptr", scope: !6, file: !6, line: 4052, type: !5589, scopeLine: 4053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!5938 = !DILocalVariable(name: "gs", arg: 1, scope: !5937, file: !6, line: 4052, type: !594)
!5939 = !DILocation(line: 4052, column: 41, scope: !5937)
!5940 = !DILocation(line: 4055, column: 11, scope: !5937)
!5941 = !DILocation(line: 4055, column: 15, scope: !5937)
!5942 = !DILocation(line: 4055, column: 35, scope: !5937)
!5943 = !DILocation(line: 4055, column: 3, scope: !5937)
!5944 = distinct !DISubprogram(name: "gimple_omp_single_clauses_ptr", scope: !6, file: !6, line: 3989, type: !5589, scopeLine: 3990, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!5945 = !DILocalVariable(name: "gs", arg: 1, scope: !5944, file: !6, line: 3989, type: !594)
!5946 = !DILocation(line: 3989, column: 39, scope: !5944)
!5947 = !DILocation(line: 3992, column: 11, scope: !5944)
!5948 = !DILocation(line: 3992, column: 15, scope: !5944)
!5949 = !DILocation(line: 3992, column: 33, scope: !5944)
!5950 = !DILocation(line: 3992, column: 3, scope: !5944)
!5951 = distinct !DISubprogram(name: "gimple_omp_atomic_load_lhs_ptr", scope: !6, file: !6, line: 4146, type: !5589, scopeLine: 4147, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!5952 = !DILocalVariable(name: "g", arg: 1, scope: !5951, file: !6, line: 4146, type: !594)
!5953 = !DILocation(line: 4146, column: 40, scope: !5951)
!5954 = !DILocation(line: 4149, column: 11, scope: !5951)
!5955 = !DILocation(line: 4149, column: 14, scope: !5951)
!5956 = !DILocation(line: 4149, column: 37, scope: !5951)
!5957 = !DILocation(line: 4149, column: 3, scope: !5951)
!5958 = distinct !DISubprogram(name: "gimple_omp_atomic_load_rhs_ptr", scope: !6, file: !6, line: 4176, type: !5589, scopeLine: 4177, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!5959 = !DILocalVariable(name: "g", arg: 1, scope: !5958, file: !6, line: 4176, type: !594)
!5960 = !DILocation(line: 4176, column: 40, scope: !5958)
!5961 = !DILocation(line: 4179, column: 11, scope: !5958)
!5962 = !DILocation(line: 4179, column: 14, scope: !5958)
!5963 = !DILocation(line: 4179, column: 37, scope: !5958)
!5964 = !DILocation(line: 4179, column: 3, scope: !5958)
!5965 = distinct !DISubprogram(name: "gimple_omp_atomic_store_val_ptr", scope: !6, file: !6, line: 4116, type: !5589, scopeLine: 4117, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!5966 = !DILocalVariable(name: "g", arg: 1, scope: !5965, file: !6, line: 4116, type: !594)
!5967 = !DILocation(line: 4116, column: 41, scope: !5965)
!5968 = !DILocation(line: 4119, column: 11, scope: !5965)
!5969 = !DILocation(line: 4119, column: 14, scope: !5965)
!5970 = !DILocation(line: 4119, column: 38, scope: !5965)
!5971 = !DILocation(line: 4119, column: 3, scope: !5965)
!5972 = distinct !DISubprogram(name: "gimple_statement_structure", scope: !6, file: !6, line: 1073, type: !5973, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!5973 = !DISubroutineType(types: !5974)
!5974 = !{!5, !594}
!5975 = !DILocalVariable(name: "gs", arg: 1, scope: !5972, file: !6, line: 1073, type: !594)
!5976 = !DILocation(line: 1073, column: 36, scope: !5972)
!5977 = !DILocation(line: 1075, column: 37, scope: !5972)
!5978 = !DILocation(line: 1075, column: 24, scope: !5972)
!5979 = !DILocation(line: 1075, column: 10, scope: !5972)
!5980 = !DILocation(line: 1075, column: 3, scope: !5972)
!5981 = distinct !DISubprogram(name: "gimple_has_location", scope: !6, file: !6, line: 1165, type: !4368, scopeLine: 1166, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!5982 = !DILocalVariable(name: "g", arg: 1, scope: !5981, file: !6, line: 1165, type: !3517)
!5983 = !DILocation(line: 1165, column: 35, scope: !5981)
!5984 = !DILocation(line: 1167, column: 27, scope: !5981)
!5985 = !DILocation(line: 1167, column: 10, scope: !5981)
!5986 = !DILocation(line: 1167, column: 30, scope: !5981)
!5987 = !DILocation(line: 1167, column: 3, scope: !5981)
!5988 = distinct !DISubprogram(name: "gimple_bind_body", scope: !6, file: !6, line: 2517, type: !5989, scopeLine: 2518, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!5989 = !DISubroutineType(types: !5990)
!5990 = !{!645, !594}
!5991 = !DILocalVariable(name: "gs", arg: 1, scope: !5988, file: !6, line: 2517, type: !594)
!5992 = !DILocation(line: 2517, column: 26, scope: !5988)
!5993 = !DILocation(line: 2520, column: 10, scope: !5988)
!5994 = !DILocation(line: 2520, column: 14, scope: !5988)
!5995 = !DILocation(line: 2520, column: 26, scope: !5988)
!5996 = !DILocation(line: 2520, column: 3, scope: !5988)
!5997 = distinct !DISubprogram(name: "gimple_catch_handler", scope: !6, file: !6, line: 2806, type: !5989, scopeLine: 2807, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!5998 = !DILocalVariable(name: "gs", arg: 1, scope: !5997, file: !6, line: 2806, type: !594)
!5999 = !DILocation(line: 2806, column: 30, scope: !5997)
!6000 = !DILocation(line: 2809, column: 10, scope: !5997)
!6001 = !DILocation(line: 2809, column: 14, scope: !5997)
!6002 = !DILocation(line: 2809, column: 27, scope: !5997)
!6003 = !DILocation(line: 2809, column: 3, scope: !5997)
!6004 = distinct !DISubprogram(name: "gimple_eh_filter_failure", scope: !6, file: !6, line: 2869, type: !5989, scopeLine: 2870, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6005 = !DILocalVariable(name: "gs", arg: 1, scope: !6004, file: !6, line: 2869, type: !594)
!6006 = !DILocation(line: 2869, column: 34, scope: !6004)
!6007 = !DILocation(line: 2872, column: 10, scope: !6004)
!6008 = !DILocation(line: 2872, column: 14, scope: !6004)
!6009 = !DILocation(line: 2872, column: 31, scope: !6004)
!6010 = !DILocation(line: 2872, column: 3, scope: !6004)
!6011 = distinct !DISubprogram(name: "gimple_try_eval", scope: !6, file: !6, line: 2953, type: !5989, scopeLine: 2954, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6012 = !DILocalVariable(name: "gs", arg: 1, scope: !6011, file: !6, line: 2953, type: !594)
!6013 = !DILocation(line: 2953, column: 25, scope: !6011)
!6014 = !DILocation(line: 2956, column: 10, scope: !6011)
!6015 = !DILocation(line: 2956, column: 14, scope: !6011)
!6016 = !DILocation(line: 2956, column: 25, scope: !6011)
!6017 = !DILocation(line: 2956, column: 3, scope: !6011)
!6018 = distinct !DISubprogram(name: "gimple_try_cleanup", scope: !6, file: !6, line: 2964, type: !5989, scopeLine: 2965, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6019 = !DILocalVariable(name: "gs", arg: 1, scope: !6018, file: !6, line: 2964, type: !594)
!6020 = !DILocation(line: 2964, column: 28, scope: !6018)
!6021 = !DILocation(line: 2967, column: 10, scope: !6018)
!6022 = !DILocation(line: 2967, column: 14, scope: !6018)
!6023 = !DILocation(line: 2967, column: 25, scope: !6018)
!6024 = !DILocation(line: 2967, column: 3, scope: !6018)
!6025 = distinct !DISubprogram(name: "gimple_omp_for_pre_body", scope: !6, file: !6, line: 3583, type: !5989, scopeLine: 3584, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6026 = !DILocalVariable(name: "gs", arg: 1, scope: !6025, file: !6, line: 3583, type: !594)
!6027 = !DILocation(line: 3583, column: 33, scope: !6025)
!6028 = !DILocation(line: 3586, column: 10, scope: !6025)
!6029 = !DILocation(line: 3586, column: 14, scope: !6025)
!6030 = !DILocation(line: 3586, column: 29, scope: !6025)
!6031 = !DILocation(line: 3586, column: 3, scope: !6025)
!6032 = distinct !DISubprogram(name: "gimple_omp_body", scope: !6, file: !6, line: 3363, type: !5989, scopeLine: 3364, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6033 = !DILocalVariable(name: "gs", arg: 1, scope: !6032, file: !6, line: 3363, type: !594)
!6034 = !DILocation(line: 3363, column: 25, scope: !6032)
!6035 = !DILocation(line: 3365, column: 10, scope: !6032)
!6036 = !DILocation(line: 3365, column: 14, scope: !6032)
!6037 = !DILocation(line: 3365, column: 18, scope: !6032)
!6038 = !DILocation(line: 3365, column: 3, scope: !6032)
!6039 = distinct !DISubprogram(name: "gimple_wce_cleanup", scope: !6, file: !6, line: 3009, type: !5989, scopeLine: 3010, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6040 = !DILocalVariable(name: "gs", arg: 1, scope: !6039, file: !6, line: 3009, type: !594)
!6041 = !DILocation(line: 3009, column: 28, scope: !6039)
!6042 = !DILocation(line: 3012, column: 10, scope: !6039)
!6043 = !DILocation(line: 3012, column: 14, scope: !6039)
!6044 = !DILocation(line: 3012, column: 25, scope: !6039)
!6045 = !DILocation(line: 3012, column: 3, scope: !6039)
!6046 = distinct !DISubprogram(name: "gimple_has_substatements", scope: !6, file: !6, line: 1083, type: !4338, scopeLine: 1084, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6047 = !DILocalVariable(name: "g", arg: 1, scope: !6046, file: !6, line: 1083, type: !594)
!6048 = !DILocation(line: 1083, column: 34, scope: !6046)
!6049 = !DILocation(line: 1085, column: 24, scope: !6046)
!6050 = !DILocation(line: 1085, column: 11, scope: !6046)
!6051 = !DILocation(line: 1085, column: 3, scope: !6046)
!6052 = !DILocation(line: 1101, column: 7, scope: !6053)
!6053 = distinct !DILexicalBlock(scope: !6046, file: !6, line: 1086, column: 5)
!6054 = !DILocation(line: 1104, column: 7, scope: !6053)
!6055 = !DILocation(line: 1106, column: 1, scope: !6046)
!6056 = distinct !DISubprogram(name: "gimple_set_body", scope: !3, file: !3, line: 1682, type: !6057, scopeLine: 1683, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6057 = !DISubroutineType(types: !6058)
!6058 = !{null, !666, !645}
!6059 = !DILocalVariable(name: "fndecl", arg: 1, scope: !6056, file: !3, line: 1682, type: !666)
!6060 = !DILocation(line: 1682, column: 23, scope: !6056)
!6061 = !DILocalVariable(name: "seq", arg: 2, scope: !6056, file: !3, line: 1682, type: !645)
!6062 = !DILocation(line: 1682, column: 42, scope: !6056)
!6063 = !DILocalVariable(name: "fn", scope: !6056, file: !3, line: 1684, type: !907)
!6064 = !DILocation(line: 1684, column: 20, scope: !6056)
!6065 = !DILocation(line: 1684, column: 25, scope: !6056)
!6066 = !DILocation(line: 1685, column: 7, scope: !6067)
!6067 = distinct !DILexicalBlock(scope: !6056, file: !3, line: 1685, column: 7)
!6068 = !DILocation(line: 1685, column: 10, scope: !6067)
!6069 = !DILocation(line: 1685, column: 7, scope: !6056)
!6070 = !DILocation(line: 1690, column: 7, scope: !6071)
!6071 = distinct !DILexicalBlock(scope: !6067, file: !3, line: 1686, column: 5)
!6072 = !DILocation(line: 1691, column: 5, scope: !6071)
!6073 = !DILocation(line: 1693, column: 23, scope: !6067)
!6074 = !DILocation(line: 1693, column: 5, scope: !6067)
!6075 = !DILocation(line: 1693, column: 9, scope: !6067)
!6076 = !DILocation(line: 1693, column: 21, scope: !6067)
!6077 = !DILocation(line: 1694, column: 1, scope: !6056)
!6078 = distinct !DISubprogram(name: "gimple_body", scope: !3, file: !3, line: 1700, type: !6079, scopeLine: 1701, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6079 = !DISubroutineType(types: !6080)
!6080 = !{!645, !666}
!6081 = !DILocalVariable(name: "fndecl", arg: 1, scope: !6078, file: !3, line: 1700, type: !666)
!6082 = !DILocation(line: 1700, column: 19, scope: !6078)
!6083 = !DILocalVariable(name: "fn", scope: !6078, file: !3, line: 1702, type: !907)
!6084 = !DILocation(line: 1702, column: 20, scope: !6078)
!6085 = !DILocation(line: 1702, column: 25, scope: !6078)
!6086 = !DILocation(line: 1703, column: 10, scope: !6078)
!6087 = !DILocation(line: 1703, column: 15, scope: !6078)
!6088 = !DILocation(line: 1703, column: 19, scope: !6078)
!6089 = !DILocation(line: 1703, column: 3, scope: !6078)
!6090 = distinct !DISubprogram(name: "gimple_has_body_p", scope: !3, file: !3, line: 1709, type: !2141, scopeLine: 1710, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6091 = !DILocalVariable(name: "fndecl", arg: 1, scope: !6090, file: !3, line: 1709, type: !666)
!6092 = !DILocation(line: 1709, column: 25, scope: !6090)
!6093 = !DILocalVariable(name: "fn", scope: !6090, file: !3, line: 1711, type: !907)
!6094 = !DILocation(line: 1711, column: 20, scope: !6090)
!6095 = !DILocation(line: 1711, column: 25, scope: !6090)
!6096 = !DILocation(line: 1712, column: 24, scope: !6090)
!6097 = !DILocation(line: 1712, column: 11, scope: !6090)
!6098 = !DILocation(line: 1712, column: 32, scope: !6090)
!6099 = !DILocation(line: 1712, column: 36, scope: !6090)
!6100 = !DILocation(line: 1712, column: 39, scope: !6090)
!6101 = !DILocation(line: 1712, column: 42, scope: !6090)
!6102 = !DILocation(line: 1712, column: 46, scope: !6090)
!6103 = !DILocation(line: 0, scope: !6090)
!6104 = !DILocation(line: 1712, column: 10, scope: !6090)
!6105 = !DILocation(line: 1712, column: 3, scope: !6090)
!6106 = distinct !DISubprogram(name: "gimple_call_flags", scope: !3, file: !3, line: 1719, type: !6107, scopeLine: 1720, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6107 = !DISubroutineType(types: !6108)
!6108 = !{!746, !3517}
!6109 = !DILocalVariable(name: "stmt", arg: 1, scope: !6106, file: !3, line: 1719, type: !3517)
!6110 = !DILocation(line: 1719, column: 33, scope: !6106)
!6111 = !DILocalVariable(name: "flags", scope: !6106, file: !3, line: 1721, type: !746)
!6112 = !DILocation(line: 1721, column: 7, scope: !6106)
!6113 = !DILocalVariable(name: "decl", scope: !6106, file: !3, line: 1722, type: !666)
!6114 = !DILocation(line: 1722, column: 8, scope: !6106)
!6115 = !DILocation(line: 1722, column: 35, scope: !6106)
!6116 = !DILocation(line: 1722, column: 15, scope: !6106)
!6117 = !DILocalVariable(name: "t", scope: !6106, file: !3, line: 1723, type: !666)
!6118 = !DILocation(line: 1723, column: 8, scope: !6106)
!6119 = !DILocation(line: 1725, column: 7, scope: !6120)
!6120 = distinct !DILexicalBlock(scope: !6106, file: !3, line: 1725, column: 7)
!6121 = !DILocation(line: 1725, column: 7, scope: !6106)
!6122 = !DILocation(line: 1726, column: 38, scope: !6120)
!6123 = !DILocation(line: 1726, column: 13, scope: !6120)
!6124 = !DILocation(line: 1726, column: 11, scope: !6120)
!6125 = !DILocation(line: 1726, column: 5, scope: !6120)
!6126 = !DILocation(line: 1729, column: 11, scope: !6127)
!6127 = distinct !DILexicalBlock(scope: !6120, file: !3, line: 1728, column: 5)
!6128 = !DILocation(line: 1729, column: 9, scope: !6127)
!6129 = !DILocation(line: 1730, column: 11, scope: !6130)
!6130 = distinct !DILexicalBlock(scope: !6127, file: !3, line: 1730, column: 11)
!6131 = !DILocation(line: 1730, column: 13, scope: !6130)
!6132 = !DILocation(line: 1730, column: 16, scope: !6130)
!6133 = !DILocation(line: 1730, column: 30, scope: !6130)
!6134 = !DILocation(line: 1730, column: 11, scope: !6127)
!6135 = !DILocation(line: 1731, column: 35, scope: !6130)
!6136 = !DILocation(line: 1731, column: 10, scope: !6130)
!6137 = !DILocation(line: 1731, column: 8, scope: !6130)
!6138 = !DILocation(line: 1731, column: 2, scope: !6130)
!6139 = !DILocation(line: 1733, column: 8, scope: !6130)
!6140 = !DILocation(line: 1736, column: 10, scope: !6106)
!6141 = !DILocation(line: 1736, column: 3, scope: !6106)
!6142 = distinct !DISubprogram(name: "gimple_call_fndecl", scope: !6, file: !6, line: 1954, type: !3515, scopeLine: 1955, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6143 = !DILocalVariable(name: "gs", arg: 1, scope: !6142, file: !6, line: 1954, type: !3517)
!6144 = !DILocation(line: 1954, column: 34, scope: !6142)
!6145 = !DILocalVariable(name: "addr", scope: !6142, file: !6, line: 1956, type: !666)
!6146 = !DILocation(line: 1956, column: 8, scope: !6142)
!6147 = !DILocation(line: 1956, column: 31, scope: !6142)
!6148 = !DILocation(line: 1956, column: 15, scope: !6142)
!6149 = !DILocation(line: 1957, column: 7, scope: !6150)
!6150 = distinct !DILexicalBlock(scope: !6142, file: !6, line: 1957, column: 7)
!6151 = !DILocation(line: 1957, column: 24, scope: !6150)
!6152 = !DILocation(line: 1957, column: 7, scope: !6142)
!6153 = !DILocation(line: 1958, column: 12, scope: !6150)
!6154 = !DILocation(line: 1958, column: 5, scope: !6150)
!6155 = !DILocation(line: 1959, column: 3, scope: !6142)
!6156 = !DILocation(line: 1960, column: 1, scope: !6142)
!6157 = distinct !DISubprogram(name: "gimple_call_fn", scope: !6, file: !6, line: 1911, type: !3515, scopeLine: 1912, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6158 = !DILocalVariable(name: "gs", arg: 1, scope: !6157, file: !6, line: 1911, type: !3517)
!6159 = !DILocation(line: 1911, column: 30, scope: !6157)
!6160 = !DILocation(line: 1914, column: 21, scope: !6157)
!6161 = !DILocation(line: 1914, column: 10, scope: !6157)
!6162 = !DILocation(line: 1914, column: 3, scope: !6157)
!6163 = distinct !DISubprogram(name: "gimple_assign_copy_p", scope: !3, file: !3, line: 1743, type: !4338, scopeLine: 1744, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6164 = !DILocalVariable(name: "gs", arg: 1, scope: !6163, file: !3, line: 1743, type: !594)
!6165 = !DILocation(line: 1743, column: 30, scope: !6163)
!6166 = !DILocation(line: 1745, column: 23, scope: !6163)
!6167 = !DILocation(line: 1745, column: 10, scope: !6163)
!6168 = !DILocation(line: 1745, column: 27, scope: !6163)
!6169 = !DILocation(line: 1746, column: 10, scope: !6163)
!6170 = !DILocation(line: 1746, column: 59, scope: !6163)
!6171 = !DILocation(line: 1746, column: 35, scope: !6163)
!6172 = !DILocation(line: 1746, column: 13, scope: !6163)
!6173 = !DILocation(line: 1747, column: 6, scope: !6163)
!6174 = !DILocation(line: 1748, column: 3, scope: !6163)
!6175 = !DILocation(line: 1748, column: 32, scope: !6163)
!6176 = !DILocation(line: 1748, column: 21, scope: !6163)
!6177 = !DILocation(line: 1748, column: 6, scope: !6163)
!6178 = !DILocation(line: 0, scope: !6163)
!6179 = !DILocation(line: 1745, column: 3, scope: !6163)
!6180 = distinct !DISubprogram(name: "gimple_assign_rhs_code", scope: !6, file: !6, line: 1815, type: !6181, scopeLine: 1816, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6181 = !DISubroutineType(types: !6182)
!6182 = !{!82, !3517}
!6183 = !DILocalVariable(name: "gs", arg: 1, scope: !6180, file: !6, line: 1815, type: !3517)
!6184 = !DILocation(line: 1815, column: 38, scope: !6180)
!6185 = !DILocalVariable(name: "code", scope: !6180, file: !6, line: 1817, type: !82)
!6186 = !DILocation(line: 1817, column: 18, scope: !6180)
!6187 = !DILocation(line: 1820, column: 28, scope: !6180)
!6188 = !DILocation(line: 1820, column: 10, scope: !6180)
!6189 = !DILocation(line: 1820, column: 8, scope: !6180)
!6190 = !DILocation(line: 1821, column: 29, scope: !6191)
!6191 = distinct !DILexicalBlock(scope: !6180, file: !6, line: 1821, column: 7)
!6192 = !DILocation(line: 1821, column: 7, scope: !6191)
!6193 = !DILocation(line: 1821, column: 35, scope: !6191)
!6194 = !DILocation(line: 1821, column: 7, scope: !6180)
!6195 = !DILocation(line: 1822, column: 12, scope: !6191)
!6196 = !DILocation(line: 1822, column: 10, scope: !6191)
!6197 = !DILocation(line: 1822, column: 5, scope: !6191)
!6198 = !DILocation(line: 1824, column: 10, scope: !6180)
!6199 = !DILocation(line: 1824, column: 3, scope: !6180)
!6200 = distinct !DISubprogram(name: "is_gimple_val", scope: !3, file: !3, line: 2781, type: !2141, scopeLine: 2782, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6201 = !DILocalVariable(name: "t", arg: 1, scope: !6200, file: !3, line: 2781, type: !666)
!6202 = !DILocation(line: 2781, column: 21, scope: !6200)
!6203 = !DILocation(line: 2784, column: 27, scope: !6204)
!6204 = distinct !DILexicalBlock(scope: !6200, file: !3, line: 2784, column: 7)
!6205 = !DILocation(line: 2784, column: 7, scope: !6204)
!6206 = !DILocation(line: 2785, column: 7, scope: !6204)
!6207 = !DILocation(line: 2785, column: 30, scope: !6204)
!6208 = !DILocation(line: 2785, column: 10, scope: !6204)
!6209 = !DILocation(line: 2786, column: 7, scope: !6204)
!6210 = !DILocation(line: 2786, column: 26, scope: !6204)
!6211 = !DILocation(line: 2786, column: 11, scope: !6204)
!6212 = !DILocation(line: 2784, column: 7, scope: !6200)
!6213 = !DILocation(line: 2787, column: 5, scope: !6204)
!6214 = !DILocation(line: 2789, column: 31, scope: !6200)
!6215 = !DILocation(line: 2789, column: 11, scope: !6200)
!6216 = !DILocation(line: 2789, column: 34, scope: !6200)
!6217 = !DILocation(line: 2789, column: 62, scope: !6200)
!6218 = !DILocation(line: 2789, column: 37, scope: !6200)
!6219 = !DILocation(line: 2789, column: 10, scope: !6200)
!6220 = !DILocation(line: 2789, column: 3, scope: !6200)
!6221 = !DILocation(line: 2790, column: 1, scope: !6200)
!6222 = distinct !DISubprogram(name: "gimple_op", scope: !6, file: !6, line: 1631, type: !6223, scopeLine: 1632, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6223 = !DISubroutineType(types: !6224)
!6224 = !{!666, !3517, !7}
!6225 = !DILocalVariable(name: "gs", arg: 1, scope: !6222, file: !6, line: 1631, type: !3517)
!6226 = !DILocation(line: 1631, column: 25, scope: !6222)
!6227 = !DILocalVariable(name: "i", arg: 2, scope: !6222, file: !6, line: 1631, type: !7)
!6228 = !DILocation(line: 1631, column: 38, scope: !6222)
!6229 = !DILocation(line: 1633, column: 23, scope: !6230)
!6230 = distinct !DILexicalBlock(scope: !6222, file: !6, line: 1633, column: 7)
!6231 = !DILocation(line: 1633, column: 7, scope: !6230)
!6232 = !DILocation(line: 1633, column: 7, scope: !6222)
!6233 = !DILocation(line: 1638, column: 26, scope: !6234)
!6234 = distinct !DILexicalBlock(scope: !6230, file: !6, line: 1634, column: 5)
!6235 = !DILocation(line: 1638, column: 14, scope: !6234)
!6236 = !DILocation(line: 1638, column: 50, scope: !6234)
!6237 = !DILocation(line: 1638, column: 7, scope: !6234)
!6238 = !DILocation(line: 1641, column: 5, scope: !6230)
!6239 = !DILocation(line: 1642, column: 1, scope: !6222)
!6240 = distinct !DISubprogram(name: "gimple_assign_ssa_name_copy_p", scope: !3, file: !3, line: 1755, type: !4338, scopeLine: 1756, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6241 = !DILocalVariable(name: "gs", arg: 1, scope: !6240, file: !3, line: 1755, type: !594)
!6242 = !DILocation(line: 1755, column: 39, scope: !6240)
!6243 = !DILocation(line: 1757, column: 24, scope: !6240)
!6244 = !DILocation(line: 1757, column: 11, scope: !6240)
!6245 = !DILocation(line: 1757, column: 28, scope: !6240)
!6246 = !DILocation(line: 1758, column: 4, scope: !6240)
!6247 = !DILocation(line: 1758, column: 54, scope: !6240)
!6248 = !DILocation(line: 1758, column: 30, scope: !6240)
!6249 = !DILocation(line: 1758, column: 8, scope: !6240)
!6250 = !DILocation(line: 1759, column: 8, scope: !6240)
!6251 = !DILocation(line: 1760, column: 4, scope: !6240)
!6252 = !DILocation(line: 1760, column: 7, scope: !6240)
!6253 = !DILocation(line: 1760, column: 42, scope: !6240)
!6254 = !DILocation(line: 1761, column: 4, scope: !6240)
!6255 = !DILocation(line: 1761, column: 7, scope: !6240)
!6256 = !DILocation(line: 1761, column: 43, scope: !6240)
!6257 = !DILocation(line: 0, scope: !6240)
!6258 = !DILocation(line: 1757, column: 10, scope: !6240)
!6259 = !DILocation(line: 1757, column: 3, scope: !6240)
!6260 = distinct !DISubprogram(name: "gimple_assign_unary_nop_p", scope: !3, file: !3, line: 1794, type: !4338, scopeLine: 1795, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6261 = !DILocalVariable(name: "gs", arg: 1, scope: !6260, file: !3, line: 1794, type: !594)
!6262 = !DILocation(line: 1794, column: 35, scope: !6260)
!6263 = !DILocation(line: 1796, column: 24, scope: !6260)
!6264 = !DILocation(line: 1796, column: 11, scope: !6260)
!6265 = !DILocation(line: 1796, column: 28, scope: !6260)
!6266 = !DILocation(line: 1797, column: 11, scope: !6260)
!6267 = !DILocation(line: 1797, column: 15, scope: !6260)
!6268 = !DILocation(line: 1798, column: 15, scope: !6260)
!6269 = !DILocation(line: 1798, column: 42, scope: !6260)
!6270 = !DILocation(line: 1798, column: 18, scope: !6260)
!6271 = !DILocation(line: 1798, column: 46, scope: !6260)
!6272 = !DILocation(line: 1799, column: 11, scope: !6260)
!6273 = !DILocation(line: 1799, column: 34, scope: !6260)
!6274 = !DILocation(line: 1799, column: 14, scope: !6260)
!6275 = !DILocation(line: 1799, column: 41, scope: !6260)
!6276 = !DILocation(line: 1799, column: 38, scope: !6260)
!6277 = !DILocation(line: 1800, column: 11, scope: !6260)
!6278 = !DILocation(line: 1800, column: 15, scope: !6260)
!6279 = !DILocation(line: 1801, column: 18, scope: !6260)
!6280 = !DILocation(line: 1801, column: 15, scope: !6260)
!6281 = !DILocation(line: 0, scope: !6260)
!6282 = !DILocation(line: 1796, column: 10, scope: !6260)
!6283 = !DILocation(line: 1796, column: 3, scope: !6260)
!6284 = distinct !DISubprogram(name: "gimple_set_bb", scope: !3, file: !3, line: 1807, type: !6285, scopeLine: 1808, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6285 = !DISubroutineType(types: !6286)
!6286 = !{null, !594, !919}
!6287 = !DILocalVariable(name: "stmt", arg: 1, scope: !6284, file: !3, line: 1807, type: !594)
!6288 = !DILocation(line: 1807, column: 23, scope: !6284)
!6289 = !DILocalVariable(name: "bb", arg: 2, scope: !6284, file: !3, line: 1807, type: !919)
!6290 = !DILocation(line: 1807, column: 41, scope: !6284)
!6291 = !DILocation(line: 1809, column: 21, scope: !6284)
!6292 = !DILocation(line: 1809, column: 3, scope: !6284)
!6293 = !DILocation(line: 1809, column: 9, scope: !6284)
!6294 = !DILocation(line: 1809, column: 16, scope: !6284)
!6295 = !DILocation(line: 1809, column: 19, scope: !6284)
!6296 = !DILocation(line: 1813, column: 7, scope: !6297)
!6297 = distinct !DILexicalBlock(scope: !6284, file: !3, line: 1813, column: 7)
!6298 = !DILocation(line: 1813, column: 13, scope: !6297)
!6299 = !DILocation(line: 1813, column: 17, scope: !6297)
!6300 = !DILocation(line: 1813, column: 33, scope: !6297)
!6301 = !DILocation(line: 1813, column: 20, scope: !6297)
!6302 = !DILocation(line: 1813, column: 39, scope: !6297)
!6303 = !DILocation(line: 1813, column: 7, scope: !6284)
!6304 = !DILocalVariable(name: "t", scope: !6305, file: !3, line: 1815, type: !666)
!6305 = distinct !DILexicalBlock(scope: !6297, file: !3, line: 1814, column: 5)
!6306 = !DILocation(line: 1815, column: 12, scope: !6305)
!6307 = !DILocalVariable(name: "uid", scope: !6305, file: !3, line: 1816, type: !746)
!6308 = !DILocation(line: 1816, column: 11, scope: !6305)
!6309 = !DILocation(line: 1818, column: 31, scope: !6305)
!6310 = !DILocation(line: 1818, column: 11, scope: !6305)
!6311 = !DILocation(line: 1818, column: 9, scope: !6305)
!6312 = !DILocation(line: 1819, column: 13, scope: !6305)
!6313 = !DILocation(line: 1819, column: 11, scope: !6305)
!6314 = !DILocation(line: 1820, column: 11, scope: !6315)
!6315 = distinct !DILexicalBlock(scope: !6305, file: !3, line: 1820, column: 11)
!6316 = !DILocation(line: 1820, column: 15, scope: !6315)
!6317 = !DILocation(line: 1820, column: 11, scope: !6305)
!6318 = !DILocalVariable(name: "old_len", scope: !6319, file: !3, line: 1822, type: !7)
!6319 = distinct !DILexicalBlock(scope: !6315, file: !3, line: 1821, column: 2)
!6320 = !DILocation(line: 1822, column: 13, scope: !6319)
!6321 = !DILocation(line: 1822, column: 23, scope: !6319)
!6322 = !DILocation(line: 1823, column: 31, scope: !6319)
!6323 = !DILocation(line: 1823, column: 37, scope: !6319)
!6324 = !DILocation(line: 1823, column: 42, scope: !6319)
!6325 = !DILocation(line: 1823, column: 56, scope: !6319)
!6326 = !DILocation(line: 1823, column: 29, scope: !6319)
!6327 = !DILocation(line: 1823, column: 4, scope: !6319)
!6328 = !DILocation(line: 1823, column: 23, scope: !6319)
!6329 = !DILocation(line: 1824, column: 8, scope: !6330)
!6330 = distinct !DILexicalBlock(scope: !6319, file: !3, line: 1824, column: 8)
!6331 = !DILocation(line: 1824, column: 30, scope: !6330)
!6332 = !DILocation(line: 1824, column: 16, scope: !6330)
!6333 = !DILocation(line: 1824, column: 8, scope: !6319)
!6334 = !DILocalVariable(name: "new_len", scope: !6335, file: !3, line: 1826, type: !7)
!6335 = distinct !DILexicalBlock(scope: !6330, file: !3, line: 1825, column: 6)
!6336 = !DILocation(line: 1826, column: 17, scope: !6335)
!6337 = !DILocation(line: 1826, column: 31, scope: !6335)
!6338 = !DILocation(line: 1826, column: 29, scope: !6335)
!6339 = !DILocation(line: 1826, column: 35, scope: !6335)
!6340 = !DILocation(line: 1826, column: 39, scope: !6335)
!6341 = !DILocation(line: 1828, column: 8, scope: !6335)
!6342 = !DILocation(line: 1830, column: 6, scope: !6335)
!6343 = !DILocation(line: 1831, column: 2, scope: !6319)
!6344 = !DILocation(line: 1833, column: 7, scope: !6305)
!6345 = !DILocation(line: 1834, column: 5, scope: !6305)
!6346 = !DILocation(line: 1835, column: 1, scope: !6284)
!6347 = distinct !DISubprogram(name: "gimple_label_label", scope: !6, file: !6, line: 2444, type: !3515, scopeLine: 2445, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6348 = !DILocalVariable(name: "gs", arg: 1, scope: !6347, file: !6, line: 2444, type: !3517)
!6349 = !DILocation(line: 2444, column: 34, scope: !6347)
!6350 = !DILocation(line: 2447, column: 21, scope: !6347)
!6351 = !DILocation(line: 2447, column: 10, scope: !6347)
!6352 = !DILocation(line: 2447, column: 3, scope: !6347)
!6353 = distinct !DISubprogram(name: "VEC_basic_block_base_length", scope: !34, file: !34, line: 281, type: !6354, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6354 = !DISubroutineType(types: !6355)
!6355 = !{!7, !6356}
!6356 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6357, size: 64)
!6357 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !927)
!6358 = !DILocalVariable(name: "vec_", arg: 1, scope: !6353, file: !34, line: 281, type: !6356)
!6359 = !DILocation(line: 281, column: 1, scope: !6353)
!6360 = distinct !DISubprogram(name: "VEC_basic_block_gc_safe_grow_cleared", scope: !34, file: !34, line: 282, type: !6361, scopeLine: 282, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6361 = !DISubroutineType(types: !6362)
!6362 = !{null, !6363, !746}
!6363 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !922, size: 64)
!6364 = !DILocalVariable(name: "vec_", arg: 1, scope: !6360, file: !34, line: 282, type: !6363)
!6365 = !DILocation(line: 282, column: 1, scope: !6360)
!6366 = !DILocalVariable(name: "size_", arg: 2, scope: !6360, file: !34, line: 282, type: !746)
!6367 = !DILocalVariable(name: "oldsize", scope: !6360, file: !34, line: 282, type: !746)
!6368 = distinct !DISubprogram(name: "VEC_basic_block_base_replace", scope: !34, file: !34, line: 281, type: !6369, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6369 = !DISubroutineType(types: !6370)
!6370 = !{!919, !6371, !7, !919}
!6371 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !927, size: 64)
!6372 = !DILocalVariable(name: "vec_", arg: 1, scope: !6368, file: !34, line: 281, type: !6371)
!6373 = !DILocation(line: 281, column: 1, scope: !6368)
!6374 = !DILocalVariable(name: "ix_", arg: 2, scope: !6368, file: !34, line: 281, type: !7)
!6375 = !DILocalVariable(name: "obj_", arg: 3, scope: !6368, file: !34, line: 281, type: !919)
!6376 = !DILocalVariable(name: "old_obj_", scope: !6368, file: !34, line: 281, type: !919)
!6377 = distinct !DISubprogram(name: "gimple_assign_set_rhs_from_tree", scope: !3, file: !3, line: 1856, type: !6378, scopeLine: 1857, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6378 = !DISubroutineType(types: !6379)
!6379 = !{null, !4379, !666}
!6380 = !DILocalVariable(name: "gsi", arg: 1, scope: !6377, file: !3, line: 1856, type: !4379)
!6381 = !DILocation(line: 1856, column: 56, scope: !6377)
!6382 = !DILocalVariable(name: "expr", arg: 2, scope: !6377, file: !3, line: 1856, type: !666)
!6383 = !DILocation(line: 1856, column: 66, scope: !6377)
!6384 = !DILocalVariable(name: "subcode", scope: !6377, file: !3, line: 1858, type: !82)
!6385 = !DILocation(line: 1858, column: 18, scope: !6377)
!6386 = !DILocalVariable(name: "op1", scope: !6377, file: !3, line: 1859, type: !666)
!6387 = !DILocation(line: 1859, column: 8, scope: !6377)
!6388 = !DILocalVariable(name: "op2", scope: !6377, file: !3, line: 1859, type: !666)
!6389 = !DILocation(line: 1859, column: 13, scope: !6377)
!6390 = !DILocation(line: 1861, column: 26, scope: !6377)
!6391 = !DILocation(line: 1861, column: 3, scope: !6377)
!6392 = !DILocation(line: 1862, column: 35, scope: !6377)
!6393 = !DILocation(line: 1862, column: 40, scope: !6377)
!6394 = !DILocation(line: 1862, column: 49, scope: !6377)
!6395 = !DILocation(line: 1862, column: 54, scope: !6377)
!6396 = !DILocation(line: 1862, column: 3, scope: !6377)
!6397 = !DILocation(line: 1863, column: 1, scope: !6377)
!6398 = distinct !DISubprogram(name: "gimple_assign_set_rhs_with_ops", scope: !3, file: !3, line: 1873, type: !6399, scopeLine: 1875, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6399 = !DISubroutineType(types: !6400)
!6400 = !{null, !4379, !82, !666, !666}
!6401 = !DILocalVariable(name: "gsi", arg: 1, scope: !6398, file: !3, line: 1873, type: !4379)
!6402 = !DILocation(line: 1873, column: 55, scope: !6398)
!6403 = !DILocalVariable(name: "code", arg: 2, scope: !6398, file: !3, line: 1873, type: !82)
!6404 = !DILocation(line: 1873, column: 75, scope: !6398)
!6405 = !DILocalVariable(name: "op1", arg: 3, scope: !6398, file: !3, line: 1874, type: !666)
!6406 = !DILocation(line: 1874, column: 10, scope: !6398)
!6407 = !DILocalVariable(name: "op2", arg: 4, scope: !6398, file: !3, line: 1874, type: !666)
!6408 = !DILocation(line: 1874, column: 20, scope: !6398)
!6409 = !DILocalVariable(name: "new_rhs_ops", scope: !6398, file: !3, line: 1876, type: !7)
!6410 = !DILocation(line: 1876, column: 12, scope: !6398)
!6411 = !DILocation(line: 1876, column: 50, scope: !6398)
!6412 = !DILocation(line: 1876, column: 26, scope: !6398)
!6413 = !DILocalVariable(name: "stmt", scope: !6398, file: !3, line: 1877, type: !594)
!6414 = !DILocation(line: 1877, column: 10, scope: !6398)
!6415 = !DILocation(line: 1877, column: 28, scope: !6398)
!6416 = !DILocation(line: 1877, column: 17, scope: !6398)
!6417 = !DILocation(line: 1880, column: 23, scope: !6418)
!6418 = distinct !DILexicalBlock(scope: !6398, file: !3, line: 1880, column: 7)
!6419 = !DILocation(line: 1880, column: 7, scope: !6418)
!6420 = !DILocation(line: 1880, column: 31, scope: !6418)
!6421 = !DILocation(line: 1880, column: 43, scope: !6418)
!6422 = !DILocation(line: 1880, column: 29, scope: !6418)
!6423 = !DILocation(line: 1880, column: 7, scope: !6398)
!6424 = !DILocalVariable(name: "lhs", scope: !6425, file: !3, line: 1882, type: !666)
!6425 = distinct !DILexicalBlock(scope: !6418, file: !3, line: 1881, column: 5)
!6426 = !DILocation(line: 1882, column: 12, scope: !6425)
!6427 = !DILocation(line: 1882, column: 37, scope: !6425)
!6428 = !DILocation(line: 1882, column: 18, scope: !6425)
!6429 = !DILocalVariable(name: "new_stmt", scope: !6425, file: !3, line: 1883, type: !594)
!6430 = !DILocation(line: 1883, column: 14, scope: !6425)
!6431 = !DILocation(line: 1883, column: 25, scope: !6425)
!6432 = !DILocation(line: 1884, column: 15, scope: !6425)
!6433 = !DILocation(line: 1884, column: 7, scope: !6425)
!6434 = !DILocation(line: 1884, column: 25, scope: !6425)
!6435 = !DILocation(line: 1884, column: 57, scope: !6425)
!6436 = !DILocation(line: 1884, column: 44, scope: !6425)
!6437 = !DILocation(line: 1884, column: 31, scope: !6425)
!6438 = !DILocation(line: 1885, column: 20, scope: !6425)
!6439 = !DILocation(line: 1885, column: 25, scope: !6425)
!6440 = !DILocation(line: 1885, column: 7, scope: !6425)
!6441 = !DILocation(line: 1886, column: 14, scope: !6425)
!6442 = !DILocation(line: 1886, column: 12, scope: !6425)
!6443 = !DILocation(line: 1890, column: 30, scope: !6425)
!6444 = !DILocation(line: 1890, column: 36, scope: !6425)
!6445 = !DILocation(line: 1890, column: 7, scope: !6425)
!6446 = !DILocation(line: 1891, column: 5, scope: !6425)
!6447 = !DILocation(line: 1893, column: 23, scope: !6398)
!6448 = !DILocation(line: 1893, column: 29, scope: !6398)
!6449 = !DILocation(line: 1893, column: 41, scope: !6398)
!6450 = !DILocation(line: 1893, column: 3, scope: !6398)
!6451 = !DILocation(line: 1894, column: 23, scope: !6398)
!6452 = !DILocation(line: 1894, column: 29, scope: !6398)
!6453 = !DILocation(line: 1894, column: 3, scope: !6398)
!6454 = !DILocation(line: 1895, column: 27, scope: !6398)
!6455 = !DILocation(line: 1895, column: 33, scope: !6398)
!6456 = !DILocation(line: 1895, column: 3, scope: !6398)
!6457 = !DILocation(line: 1896, column: 7, scope: !6458)
!6458 = distinct !DILexicalBlock(scope: !6398, file: !3, line: 1896, column: 7)
!6459 = !DILocation(line: 1896, column: 19, scope: !6458)
!6460 = !DILocation(line: 1896, column: 7, scope: !6398)
!6461 = !DILocation(line: 1897, column: 29, scope: !6458)
!6462 = !DILocation(line: 1897, column: 35, scope: !6458)
!6463 = !DILocation(line: 1897, column: 5, scope: !6458)
!6464 = !DILocation(line: 1898, column: 1, scope: !6398)
!6465 = distinct !DISubprogram(name: "gimple_get_lhs", scope: !3, file: !3, line: 1907, type: !3515, scopeLine: 1908, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6466 = !DILocalVariable(name: "stmt", arg: 1, scope: !6465, file: !3, line: 1907, type: !3517)
!6467 = !DILocation(line: 1907, column: 30, scope: !6465)
!6468 = !DILocalVariable(name: "code", scope: !6465, file: !3, line: 1909, type: !276)
!6469 = !DILocation(line: 1909, column: 20, scope: !6465)
!6470 = !DILocation(line: 1909, column: 40, scope: !6465)
!6471 = !DILocation(line: 1909, column: 27, scope: !6465)
!6472 = !DILocation(line: 1911, column: 7, scope: !6473)
!6473 = distinct !DILexicalBlock(scope: !6465, file: !3, line: 1911, column: 7)
!6474 = !DILocation(line: 1911, column: 12, scope: !6473)
!6475 = !DILocation(line: 1911, column: 7, scope: !6465)
!6476 = !DILocation(line: 1912, column: 31, scope: !6473)
!6477 = !DILocation(line: 1912, column: 12, scope: !6473)
!6478 = !DILocation(line: 1912, column: 5, scope: !6473)
!6479 = !DILocation(line: 1913, column: 12, scope: !6480)
!6480 = distinct !DILexicalBlock(scope: !6473, file: !3, line: 1913, column: 12)
!6481 = !DILocation(line: 1913, column: 17, scope: !6480)
!6482 = !DILocation(line: 1913, column: 12, scope: !6473)
!6483 = !DILocation(line: 1914, column: 29, scope: !6480)
!6484 = !DILocation(line: 1914, column: 12, scope: !6480)
!6485 = !DILocation(line: 1914, column: 5, scope: !6480)
!6486 = !DILocation(line: 1916, column: 5, scope: !6480)
!6487 = !DILocation(line: 1917, column: 1, scope: !6465)
!6488 = distinct !DISubprogram(name: "gimple_call_lhs", scope: !6, file: !6, line: 1878, type: !3515, scopeLine: 1879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6489 = !DILocalVariable(name: "gs", arg: 1, scope: !6488, file: !6, line: 1878, type: !3517)
!6490 = !DILocation(line: 1878, column: 31, scope: !6488)
!6491 = !DILocation(line: 1881, column: 21, scope: !6488)
!6492 = !DILocation(line: 1881, column: 10, scope: !6488)
!6493 = !DILocation(line: 1881, column: 3, scope: !6488)
!6494 = distinct !DISubprogram(name: "gimple_set_lhs", scope: !3, file: !3, line: 1924, type: !1994, scopeLine: 1925, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6495 = !DILocalVariable(name: "stmt", arg: 1, scope: !6494, file: !3, line: 1924, type: !594)
!6496 = !DILocation(line: 1924, column: 24, scope: !6494)
!6497 = !DILocalVariable(name: "lhs", arg: 2, scope: !6494, file: !3, line: 1924, type: !666)
!6498 = !DILocation(line: 1924, column: 35, scope: !6494)
!6499 = !DILocalVariable(name: "code", scope: !6494, file: !3, line: 1926, type: !276)
!6500 = !DILocation(line: 1926, column: 20, scope: !6494)
!6501 = !DILocation(line: 1926, column: 40, scope: !6494)
!6502 = !DILocation(line: 1926, column: 27, scope: !6494)
!6503 = !DILocation(line: 1928, column: 7, scope: !6504)
!6504 = distinct !DILexicalBlock(scope: !6494, file: !3, line: 1928, column: 7)
!6505 = !DILocation(line: 1928, column: 12, scope: !6504)
!6506 = !DILocation(line: 1928, column: 7, scope: !6494)
!6507 = !DILocation(line: 1929, column: 28, scope: !6504)
!6508 = !DILocation(line: 1929, column: 34, scope: !6504)
!6509 = !DILocation(line: 1929, column: 5, scope: !6504)
!6510 = !DILocation(line: 1930, column: 12, scope: !6511)
!6511 = distinct !DILexicalBlock(scope: !6504, file: !3, line: 1930, column: 12)
!6512 = !DILocation(line: 1930, column: 17, scope: !6511)
!6513 = !DILocation(line: 1930, column: 12, scope: !6504)
!6514 = !DILocation(line: 1931, column: 26, scope: !6511)
!6515 = !DILocation(line: 1931, column: 32, scope: !6511)
!6516 = !DILocation(line: 1931, column: 5, scope: !6511)
!6517 = !DILocation(line: 1933, column: 5, scope: !6511)
!6518 = !DILocation(line: 1934, column: 1, scope: !6494)
!6519 = distinct !DISubprogram(name: "gimple_call_set_lhs", scope: !6, file: !6, line: 1898, type: !1994, scopeLine: 1899, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6520 = !DILocalVariable(name: "gs", arg: 1, scope: !6519, file: !6, line: 1898, type: !594)
!6521 = !DILocation(line: 1898, column: 29, scope: !6519)
!6522 = !DILocalVariable(name: "lhs", arg: 2, scope: !6519, file: !6, line: 1898, type: !666)
!6523 = !DILocation(line: 1898, column: 38, scope: !6519)
!6524 = !DILocation(line: 1901, column: 18, scope: !6519)
!6525 = !DILocation(line: 1901, column: 25, scope: !6519)
!6526 = !DILocation(line: 1901, column: 3, scope: !6519)
!6527 = !DILocation(line: 1902, column: 7, scope: !6528)
!6528 = distinct !DILexicalBlock(scope: !6519, file: !6, line: 1902, column: 7)
!6529 = !DILocation(line: 1902, column: 11, scope: !6528)
!6530 = !DILocation(line: 1902, column: 14, scope: !6528)
!6531 = !DILocation(line: 1902, column: 30, scope: !6528)
!6532 = !DILocation(line: 1902, column: 7, scope: !6519)
!6533 = !DILocation(line: 1903, column: 31, scope: !6528)
!6534 = !DILocation(line: 1903, column: 5, scope: !6528)
!6535 = !DILocation(line: 1903, column: 29, scope: !6528)
!6536 = !DILocation(line: 1904, column: 1, scope: !6519)
!6537 = distinct !DISubprogram(name: "gimple_replace_lhs", scope: !3, file: !3, line: 1956, type: !1994, scopeLine: 1957, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6538 = !DILocalVariable(name: "stmt", arg: 1, scope: !6537, file: !3, line: 1956, type: !594)
!6539 = !DILocation(line: 1956, column: 28, scope: !6537)
!6540 = !DILocalVariable(name: "nlhs", arg: 2, scope: !6537, file: !3, line: 1956, type: !666)
!6541 = !DILocation(line: 1956, column: 39, scope: !6537)
!6542 = !DILocation(line: 1958, column: 7, scope: !6543)
!6543 = distinct !DILexicalBlock(scope: !6537, file: !3, line: 1958, column: 7)
!6544 = !DILocation(line: 1958, column: 7, scope: !6537)
!6545 = !DILocalVariable(name: "lhs", scope: !6546, file: !3, line: 1960, type: !666)
!6546 = distinct !DILexicalBlock(scope: !6543, file: !3, line: 1959, column: 5)
!6547 = !DILocation(line: 1960, column: 12, scope: !6546)
!6548 = !DILocation(line: 1960, column: 34, scope: !6546)
!6549 = !DILocation(line: 1960, column: 18, scope: !6546)
!6550 = !DILocation(line: 1962, column: 7, scope: !6546)
!6551 = !DILocation(line: 1964, column: 44, scope: !6546)
!6552 = !DILocation(line: 1964, column: 7, scope: !6546)
!6553 = !DILocation(line: 1965, column: 5, scope: !6546)
!6554 = !DILocation(line: 1967, column: 19, scope: !6537)
!6555 = !DILocation(line: 1967, column: 25, scope: !6537)
!6556 = !DILocation(line: 1967, column: 3, scope: !6537)
!6557 = !DILocation(line: 1968, column: 1, scope: !6537)
!6558 = distinct !DISubprogram(name: "gimple_bind_vars", scope: !6, file: !6, line: 2485, type: !3515, scopeLine: 2486, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6559 = !DILocalVariable(name: "gs", arg: 1, scope: !6558, file: !6, line: 2485, type: !3517)
!6560 = !DILocation(line: 2485, column: 32, scope: !6558)
!6561 = !DILocation(line: 2488, column: 10, scope: !6558)
!6562 = !DILocation(line: 2488, column: 14, scope: !6558)
!6563 = !DILocation(line: 2488, column: 26, scope: !6558)
!6564 = !DILocation(line: 2488, column: 3, scope: !6558)
!6565 = distinct !DISubprogram(name: "gimple_bind_block", scope: !6, file: !6, line: 2559, type: !3515, scopeLine: 2560, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6566 = !DILocalVariable(name: "gs", arg: 1, scope: !6565, file: !6, line: 2559, type: !3517)
!6567 = !DILocation(line: 2559, column: 33, scope: !6565)
!6568 = !DILocation(line: 2562, column: 10, scope: !6565)
!6569 = !DILocation(line: 2562, column: 14, scope: !6565)
!6570 = !DILocation(line: 2562, column: 26, scope: !6565)
!6571 = !DILocation(line: 2562, column: 3, scope: !6565)
!6572 = distinct !DISubprogram(name: "gimple_catch_types", scope: !6, file: !6, line: 2785, type: !3515, scopeLine: 2786, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6573 = !DILocalVariable(name: "gs", arg: 1, scope: !6572, file: !6, line: 2785, type: !3517)
!6574 = !DILocation(line: 2785, column: 34, scope: !6572)
!6575 = !DILocation(line: 2788, column: 10, scope: !6572)
!6576 = !DILocation(line: 2788, column: 14, scope: !6572)
!6577 = !DILocation(line: 2788, column: 27, scope: !6572)
!6578 = !DILocation(line: 2788, column: 3, scope: !6572)
!6579 = distinct !DISubprogram(name: "gimple_eh_filter_types", scope: !6, file: !6, line: 2847, type: !3515, scopeLine: 2848, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6580 = !DILocalVariable(name: "gs", arg: 1, scope: !6579, file: !6, line: 2847, type: !3517)
!6581 = !DILocation(line: 2847, column: 38, scope: !6579)
!6582 = !DILocation(line: 2850, column: 10, scope: !6579)
!6583 = !DILocation(line: 2850, column: 14, scope: !6579)
!6584 = !DILocation(line: 2850, column: 31, scope: !6579)
!6585 = !DILocation(line: 2850, column: 3, scope: !6579)
!6586 = distinct !DISubprogram(name: "gimple_omp_for_clauses", scope: !6, file: !6, line: 3410, type: !3515, scopeLine: 3411, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6587 = !DILocalVariable(name: "gs", arg: 1, scope: !6586, file: !6, line: 3410, type: !3517)
!6588 = !DILocation(line: 3410, column: 38, scope: !6586)
!6589 = !DILocation(line: 3413, column: 10, scope: !6586)
!6590 = !DILocation(line: 3413, column: 14, scope: !6586)
!6591 = !DILocation(line: 3413, column: 29, scope: !6586)
!6592 = !DILocation(line: 3413, column: 3, scope: !6586)
!6593 = distinct !DISubprogram(name: "gimple_omp_for_set_cond", scope: !6, file: !6, line: 4073, type: !6594, scopeLine: 4074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6594 = !DISubroutineType(types: !6595)
!6595 = !{null, !594, !978, !82}
!6596 = !DILocalVariable(name: "gs", arg: 1, scope: !6593, file: !6, line: 4073, type: !594)
!6597 = !DILocation(line: 4073, column: 33, scope: !6593)
!6598 = !DILocalVariable(name: "i", arg: 2, scope: !6593, file: !6, line: 4073, type: !978)
!6599 = !DILocation(line: 4073, column: 44, scope: !6593)
!6600 = !DILocalVariable(name: "cond", arg: 3, scope: !6593, file: !6, line: 4073, type: !82)
!6601 = !DILocation(line: 4073, column: 62, scope: !6593)
!6602 = !DILocation(line: 4076, column: 3, scope: !6593)
!6603 = !DILocation(line: 4077, column: 3, scope: !6593)
!6604 = !DILocation(line: 4078, column: 37, scope: !6593)
!6605 = !DILocation(line: 4078, column: 3, scope: !6593)
!6606 = !DILocation(line: 4078, column: 7, scope: !6593)
!6607 = !DILocation(line: 4078, column: 22, scope: !6593)
!6608 = !DILocation(line: 4078, column: 27, scope: !6593)
!6609 = !DILocation(line: 4078, column: 30, scope: !6593)
!6610 = !DILocation(line: 4078, column: 35, scope: !6593)
!6611 = !DILocation(line: 4079, column: 1, scope: !6593)
!6612 = distinct !DISubprogram(name: "gimple_omp_for_cond", scope: !6, file: !6, line: 4085, type: !6613, scopeLine: 4086, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6613 = !DISubroutineType(types: !6614)
!6614 = !{!82, !3517, !978}
!6615 = !DILocalVariable(name: "gs", arg: 1, scope: !6612, file: !6, line: 4085, type: !3517)
!6616 = !DILocation(line: 4085, column: 35, scope: !6612)
!6617 = !DILocalVariable(name: "i", arg: 2, scope: !6612, file: !6, line: 4085, type: !978)
!6618 = !DILocation(line: 4085, column: 46, scope: !6612)
!6619 = !DILocation(line: 4088, column: 3, scope: !6612)
!6620 = !DILocation(line: 4089, column: 10, scope: !6612)
!6621 = !DILocation(line: 4089, column: 14, scope: !6612)
!6622 = !DILocation(line: 4089, column: 29, scope: !6612)
!6623 = !DILocation(line: 4089, column: 34, scope: !6612)
!6624 = !DILocation(line: 4089, column: 37, scope: !6612)
!6625 = !DILocation(line: 4089, column: 3, scope: !6612)
!6626 = distinct !DISubprogram(name: "gimple_omp_for_set_index", scope: !6, file: !6, line: 3472, type: !6627, scopeLine: 3473, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6627 = !DISubroutineType(types: !6628)
!6628 = !{null, !594, !978, !666}
!6629 = !DILocalVariable(name: "gs", arg: 1, scope: !6626, file: !6, line: 3472, type: !594)
!6630 = !DILocation(line: 3472, column: 34, scope: !6626)
!6631 = !DILocalVariable(name: "i", arg: 2, scope: !6626, file: !6, line: 3472, type: !978)
!6632 = !DILocation(line: 3472, column: 45, scope: !6626)
!6633 = !DILocalVariable(name: "index", arg: 3, scope: !6626, file: !6, line: 3472, type: !666)
!6634 = !DILocation(line: 3472, column: 53, scope: !6626)
!6635 = !DILocation(line: 3475, column: 3, scope: !6626)
!6636 = !DILocation(line: 3476, column: 38, scope: !6626)
!6637 = !DILocation(line: 3476, column: 3, scope: !6626)
!6638 = !DILocation(line: 3476, column: 7, scope: !6626)
!6639 = !DILocation(line: 3476, column: 22, scope: !6626)
!6640 = !DILocation(line: 3476, column: 27, scope: !6626)
!6641 = !DILocation(line: 3476, column: 30, scope: !6626)
!6642 = !DILocation(line: 3476, column: 36, scope: !6626)
!6643 = !DILocation(line: 3477, column: 1, scope: !6626)
!6644 = distinct !DISubprogram(name: "gimple_omp_for_index", scope: !6, file: !6, line: 3450, type: !6645, scopeLine: 3451, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6645 = !DISubroutineType(types: !6646)
!6646 = !{!666, !3517, !978}
!6647 = !DILocalVariable(name: "gs", arg: 1, scope: !6644, file: !6, line: 3450, type: !3517)
!6648 = !DILocation(line: 3450, column: 36, scope: !6644)
!6649 = !DILocalVariable(name: "i", arg: 2, scope: !6644, file: !6, line: 3450, type: !978)
!6650 = !DILocation(line: 3450, column: 47, scope: !6644)
!6651 = !DILocation(line: 3453, column: 3, scope: !6644)
!6652 = !DILocation(line: 3454, column: 10, scope: !6644)
!6653 = !DILocation(line: 3454, column: 14, scope: !6644)
!6654 = !DILocation(line: 3454, column: 29, scope: !6644)
!6655 = !DILocation(line: 3454, column: 34, scope: !6644)
!6656 = !DILocation(line: 3454, column: 37, scope: !6644)
!6657 = !DILocation(line: 3454, column: 3, scope: !6644)
!6658 = distinct !DISubprogram(name: "gimple_omp_for_initial", scope: !6, file: !6, line: 3483, type: !6645, scopeLine: 3484, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6659 = !DILocalVariable(name: "gs", arg: 1, scope: !6658, file: !6, line: 3483, type: !3517)
!6660 = !DILocation(line: 3483, column: 38, scope: !6658)
!6661 = !DILocalVariable(name: "i", arg: 2, scope: !6658, file: !6, line: 3483, type: !978)
!6662 = !DILocation(line: 3483, column: 49, scope: !6658)
!6663 = !DILocation(line: 3486, column: 3, scope: !6658)
!6664 = !DILocation(line: 3487, column: 10, scope: !6658)
!6665 = !DILocation(line: 3487, column: 14, scope: !6658)
!6666 = !DILocation(line: 3487, column: 29, scope: !6658)
!6667 = !DILocation(line: 3487, column: 34, scope: !6658)
!6668 = !DILocation(line: 3487, column: 37, scope: !6658)
!6669 = !DILocation(line: 3487, column: 3, scope: !6658)
!6670 = distinct !DISubprogram(name: "gimple_omp_for_set_initial", scope: !6, file: !6, line: 3505, type: !6627, scopeLine: 3506, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6671 = !DILocalVariable(name: "gs", arg: 1, scope: !6670, file: !6, line: 3505, type: !594)
!6672 = !DILocation(line: 3505, column: 36, scope: !6670)
!6673 = !DILocalVariable(name: "i", arg: 2, scope: !6670, file: !6, line: 3505, type: !978)
!6674 = !DILocation(line: 3505, column: 47, scope: !6670)
!6675 = !DILocalVariable(name: "initial", arg: 3, scope: !6670, file: !6, line: 3505, type: !666)
!6676 = !DILocation(line: 3505, column: 55, scope: !6670)
!6677 = !DILocation(line: 3508, column: 3, scope: !6670)
!6678 = !DILocation(line: 3509, column: 40, scope: !6670)
!6679 = !DILocation(line: 3509, column: 3, scope: !6670)
!6680 = !DILocation(line: 3509, column: 7, scope: !6670)
!6681 = !DILocation(line: 3509, column: 22, scope: !6670)
!6682 = !DILocation(line: 3509, column: 27, scope: !6670)
!6683 = !DILocation(line: 3509, column: 30, scope: !6670)
!6684 = !DILocation(line: 3509, column: 38, scope: !6670)
!6685 = !DILocation(line: 3510, column: 1, scope: !6670)
!6686 = distinct !DISubprogram(name: "gimple_omp_for_final", scope: !6, file: !6, line: 3516, type: !6645, scopeLine: 3517, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6687 = !DILocalVariable(name: "gs", arg: 1, scope: !6686, file: !6, line: 3516, type: !3517)
!6688 = !DILocation(line: 3516, column: 36, scope: !6686)
!6689 = !DILocalVariable(name: "i", arg: 2, scope: !6686, file: !6, line: 3516, type: !978)
!6690 = !DILocation(line: 3516, column: 47, scope: !6686)
!6691 = !DILocation(line: 3519, column: 3, scope: !6686)
!6692 = !DILocation(line: 3520, column: 10, scope: !6686)
!6693 = !DILocation(line: 3520, column: 14, scope: !6686)
!6694 = !DILocation(line: 3520, column: 29, scope: !6686)
!6695 = !DILocation(line: 3520, column: 34, scope: !6686)
!6696 = !DILocation(line: 3520, column: 37, scope: !6686)
!6697 = !DILocation(line: 3520, column: 3, scope: !6686)
!6698 = distinct !DISubprogram(name: "gimple_omp_for_set_final", scope: !6, file: !6, line: 3538, type: !6627, scopeLine: 3539, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6699 = !DILocalVariable(name: "gs", arg: 1, scope: !6698, file: !6, line: 3538, type: !594)
!6700 = !DILocation(line: 3538, column: 34, scope: !6698)
!6701 = !DILocalVariable(name: "i", arg: 2, scope: !6698, file: !6, line: 3538, type: !978)
!6702 = !DILocation(line: 3538, column: 45, scope: !6698)
!6703 = !DILocalVariable(name: "final", arg: 3, scope: !6698, file: !6, line: 3538, type: !666)
!6704 = !DILocation(line: 3538, column: 53, scope: !6698)
!6705 = !DILocation(line: 3541, column: 3, scope: !6698)
!6706 = !DILocation(line: 3542, column: 38, scope: !6698)
!6707 = !DILocation(line: 3542, column: 3, scope: !6698)
!6708 = !DILocation(line: 3542, column: 7, scope: !6698)
!6709 = !DILocation(line: 3542, column: 22, scope: !6698)
!6710 = !DILocation(line: 3542, column: 27, scope: !6698)
!6711 = !DILocation(line: 3542, column: 30, scope: !6698)
!6712 = !DILocation(line: 3542, column: 36, scope: !6698)
!6713 = !DILocation(line: 3543, column: 1, scope: !6698)
!6714 = distinct !DISubprogram(name: "gimple_omp_for_incr", scope: !6, file: !6, line: 3549, type: !6645, scopeLine: 3550, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6715 = !DILocalVariable(name: "gs", arg: 1, scope: !6714, file: !6, line: 3549, type: !3517)
!6716 = !DILocation(line: 3549, column: 35, scope: !6714)
!6717 = !DILocalVariable(name: "i", arg: 2, scope: !6714, file: !6, line: 3549, type: !978)
!6718 = !DILocation(line: 3549, column: 46, scope: !6714)
!6719 = !DILocation(line: 3552, column: 3, scope: !6714)
!6720 = !DILocation(line: 3553, column: 10, scope: !6714)
!6721 = !DILocation(line: 3553, column: 14, scope: !6714)
!6722 = !DILocation(line: 3553, column: 29, scope: !6714)
!6723 = !DILocation(line: 3553, column: 34, scope: !6714)
!6724 = !DILocation(line: 3553, column: 37, scope: !6714)
!6725 = !DILocation(line: 3553, column: 3, scope: !6714)
!6726 = distinct !DISubprogram(name: "gimple_omp_for_set_incr", scope: !6, file: !6, line: 3571, type: !6627, scopeLine: 3572, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6727 = !DILocalVariable(name: "gs", arg: 1, scope: !6726, file: !6, line: 3571, type: !594)
!6728 = !DILocation(line: 3571, column: 33, scope: !6726)
!6729 = !DILocalVariable(name: "i", arg: 2, scope: !6726, file: !6, line: 3571, type: !978)
!6730 = !DILocation(line: 3571, column: 44, scope: !6726)
!6731 = !DILocalVariable(name: "incr", arg: 3, scope: !6726, file: !6, line: 3571, type: !666)
!6732 = !DILocation(line: 3571, column: 52, scope: !6726)
!6733 = !DILocation(line: 3574, column: 3, scope: !6726)
!6734 = !DILocation(line: 3575, column: 37, scope: !6726)
!6735 = !DILocation(line: 3575, column: 3, scope: !6726)
!6736 = !DILocation(line: 3575, column: 7, scope: !6726)
!6737 = !DILocation(line: 3575, column: 22, scope: !6726)
!6738 = !DILocation(line: 3575, column: 27, scope: !6726)
!6739 = !DILocation(line: 3575, column: 30, scope: !6726)
!6740 = !DILocation(line: 3575, column: 35, scope: !6726)
!6741 = !DILocation(line: 3576, column: 1, scope: !6726)
!6742 = distinct !DISubprogram(name: "gimple_omp_parallel_clauses", scope: !6, file: !6, line: 3604, type: !3515, scopeLine: 3605, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6743 = !DILocalVariable(name: "gs", arg: 1, scope: !6742, file: !6, line: 3604, type: !3517)
!6744 = !DILocation(line: 3604, column: 43, scope: !6742)
!6745 = !DILocation(line: 3607, column: 10, scope: !6742)
!6746 = !DILocation(line: 3607, column: 14, scope: !6742)
!6747 = !DILocation(line: 3607, column: 34, scope: !6742)
!6748 = !DILocation(line: 3607, column: 3, scope: !6742)
!6749 = distinct !DISubprogram(name: "gimple_omp_parallel_child_fn", scope: !6, file: !6, line: 3635, type: !3515, scopeLine: 3636, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6750 = !DILocalVariable(name: "gs", arg: 1, scope: !6749, file: !6, line: 3635, type: !3517)
!6751 = !DILocation(line: 3635, column: 44, scope: !6749)
!6752 = !DILocation(line: 3638, column: 10, scope: !6749)
!6753 = !DILocation(line: 3638, column: 14, scope: !6749)
!6754 = !DILocation(line: 3638, column: 34, scope: !6749)
!6755 = !DILocation(line: 3638, column: 3, scope: !6749)
!6756 = distinct !DISubprogram(name: "gimple_omp_parallel_data_arg", scope: !6, file: !6, line: 3666, type: !3515, scopeLine: 3667, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6757 = !DILocalVariable(name: "gs", arg: 1, scope: !6756, file: !6, line: 3666, type: !3517)
!6758 = !DILocation(line: 3666, column: 44, scope: !6756)
!6759 = !DILocation(line: 3669, column: 10, scope: !6756)
!6760 = !DILocation(line: 3669, column: 14, scope: !6756)
!6761 = !DILocation(line: 3669, column: 34, scope: !6756)
!6762 = !DILocation(line: 3669, column: 3, scope: !6756)
!6763 = distinct !DISubprogram(name: "gimple_omp_task_clauses", scope: !6, file: !6, line: 3696, type: !3515, scopeLine: 3697, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6764 = !DILocalVariable(name: "gs", arg: 1, scope: !6763, file: !6, line: 3696, type: !3517)
!6765 = !DILocation(line: 3696, column: 39, scope: !6763)
!6766 = !DILocation(line: 3699, column: 10, scope: !6763)
!6767 = !DILocation(line: 3699, column: 14, scope: !6763)
!6768 = !DILocation(line: 3699, column: 34, scope: !6763)
!6769 = !DILocation(line: 3699, column: 3, scope: !6763)
!6770 = distinct !DISubprogram(name: "gimple_omp_task_child_fn", scope: !6, file: !6, line: 3727, type: !3515, scopeLine: 3728, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6771 = !DILocalVariable(name: "gs", arg: 1, scope: !6770, file: !6, line: 3727, type: !3517)
!6772 = !DILocation(line: 3727, column: 40, scope: !6770)
!6773 = !DILocation(line: 3730, column: 10, scope: !6770)
!6774 = !DILocation(line: 3730, column: 14, scope: !6770)
!6775 = !DILocation(line: 3730, column: 34, scope: !6770)
!6776 = !DILocation(line: 3730, column: 3, scope: !6770)
!6777 = distinct !DISubprogram(name: "gimple_omp_task_data_arg", scope: !6, file: !6, line: 3758, type: !3515, scopeLine: 3759, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6778 = !DILocalVariable(name: "gs", arg: 1, scope: !6777, file: !6, line: 3758, type: !3517)
!6779 = !DILocation(line: 3758, column: 40, scope: !6777)
!6780 = !DILocation(line: 3761, column: 10, scope: !6777)
!6781 = !DILocation(line: 3761, column: 14, scope: !6777)
!6782 = !DILocation(line: 3761, column: 34, scope: !6777)
!6783 = !DILocation(line: 3761, column: 3, scope: !6777)
!6784 = distinct !DISubprogram(name: "gimple_omp_task_copy_fn", scope: !6, file: !6, line: 3889, type: !3515, scopeLine: 3890, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6785 = !DILocalVariable(name: "gs", arg: 1, scope: !6784, file: !6, line: 3889, type: !3517)
!6786 = !DILocation(line: 3889, column: 39, scope: !6784)
!6787 = !DILocation(line: 3892, column: 10, scope: !6784)
!6788 = !DILocation(line: 3892, column: 14, scope: !6784)
!6789 = !DILocation(line: 3892, column: 30, scope: !6784)
!6790 = !DILocation(line: 3892, column: 3, scope: !6784)
!6791 = distinct !DISubprogram(name: "gimple_omp_task_arg_size", scope: !6, file: !6, line: 3919, type: !3515, scopeLine: 3920, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6792 = !DILocalVariable(name: "gs", arg: 1, scope: !6791, file: !6, line: 3919, type: !3517)
!6793 = !DILocation(line: 3919, column: 40, scope: !6791)
!6794 = !DILocation(line: 3922, column: 10, scope: !6791)
!6795 = !DILocation(line: 3922, column: 14, scope: !6791)
!6796 = !DILocation(line: 3922, column: 30, scope: !6791)
!6797 = !DILocation(line: 3922, column: 3, scope: !6791)
!6798 = distinct !DISubprogram(name: "gimple_omp_task_arg_align", scope: !6, file: !6, line: 3949, type: !3515, scopeLine: 3950, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6799 = !DILocalVariable(name: "gs", arg: 1, scope: !6798, file: !6, line: 3949, type: !3517)
!6800 = !DILocation(line: 3949, column: 41, scope: !6798)
!6801 = !DILocation(line: 3952, column: 10, scope: !6798)
!6802 = !DILocation(line: 3952, column: 14, scope: !6798)
!6803 = !DILocation(line: 3952, column: 30, scope: !6798)
!6804 = !DILocation(line: 3952, column: 3, scope: !6798)
!6805 = distinct !DISubprogram(name: "gimple_omp_critical_name", scope: !6, file: !6, line: 3380, type: !3515, scopeLine: 3381, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6806 = !DILocalVariable(name: "gs", arg: 1, scope: !6805, file: !6, line: 3380, type: !3517)
!6807 = !DILocation(line: 3380, column: 40, scope: !6805)
!6808 = !DILocation(line: 3383, column: 10, scope: !6805)
!6809 = !DILocation(line: 3383, column: 14, scope: !6805)
!6810 = !DILocation(line: 3383, column: 34, scope: !6805)
!6811 = !DILocation(line: 3383, column: 3, scope: !6805)
!6812 = distinct !DISubprogram(name: "gimple_omp_sections_clauses", scope: !6, file: !6, line: 4009, type: !3515, scopeLine: 4010, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6813 = !DILocalVariable(name: "gs", arg: 1, scope: !6812, file: !6, line: 4009, type: !3517)
!6814 = !DILocation(line: 4009, column: 43, scope: !6812)
!6815 = !DILocation(line: 4012, column: 10, scope: !6812)
!6816 = !DILocation(line: 4012, column: 14, scope: !6812)
!6817 = !DILocation(line: 4012, column: 34, scope: !6812)
!6818 = !DILocation(line: 4012, column: 3, scope: !6812)
!6819 = distinct !DISubprogram(name: "gimple_omp_sections_control", scope: !6, file: !6, line: 4041, type: !3515, scopeLine: 4042, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6820 = !DILocalVariable(name: "gs", arg: 1, scope: !6819, file: !6, line: 4041, type: !3517)
!6821 = !DILocation(line: 4041, column: 43, scope: !6819)
!6822 = !DILocation(line: 4044, column: 10, scope: !6819)
!6823 = !DILocation(line: 4044, column: 14, scope: !6819)
!6824 = !DILocation(line: 4044, column: 34, scope: !6819)
!6825 = !DILocation(line: 4044, column: 3, scope: !6819)
!6826 = distinct !DISubprogram(name: "gimple_omp_sections_set_control", scope: !6, file: !6, line: 4063, type: !1994, scopeLine: 4064, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6827 = !DILocalVariable(name: "gs", arg: 1, scope: !6826, file: !6, line: 4063, type: !594)
!6828 = !DILocation(line: 4063, column: 41, scope: !6826)
!6829 = !DILocalVariable(name: "control", arg: 2, scope: !6826, file: !6, line: 4063, type: !666)
!6830 = !DILocation(line: 4063, column: 50, scope: !6826)
!6831 = !DILocation(line: 4066, column: 37, scope: !6826)
!6832 = !DILocation(line: 4066, column: 3, scope: !6826)
!6833 = !DILocation(line: 4066, column: 7, scope: !6826)
!6834 = !DILocation(line: 4066, column: 27, scope: !6826)
!6835 = !DILocation(line: 4066, column: 35, scope: !6826)
!6836 = !DILocation(line: 4067, column: 1, scope: !6826)
!6837 = distinct !DISubprogram(name: "gimple_set_op", scope: !6, file: !6, line: 1663, type: !2069, scopeLine: 1664, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6838 = !DILocalVariable(name: "gs", arg: 1, scope: !6837, file: !6, line: 1663, type: !594)
!6839 = !DILocation(line: 1663, column: 23, scope: !6837)
!6840 = !DILocalVariable(name: "i", arg: 2, scope: !6837, file: !6, line: 1663, type: !7)
!6841 = !DILocation(line: 1663, column: 36, scope: !6837)
!6842 = !DILocalVariable(name: "op", arg: 3, scope: !6837, file: !6, line: 1663, type: !666)
!6843 = !DILocation(line: 1663, column: 44, scope: !6837)
!6844 = !DILocation(line: 1665, column: 3, scope: !6837)
!6845 = !DILocation(line: 1671, column: 24, scope: !6837)
!6846 = !DILocation(line: 1671, column: 15, scope: !6837)
!6847 = !DILocation(line: 1671, column: 3, scope: !6837)
!6848 = !DILocation(line: 1671, column: 19, scope: !6837)
!6849 = !DILocation(line: 1671, column: 22, scope: !6837)
!6850 = !DILocation(line: 1672, column: 1, scope: !6837)
!6851 = distinct !DISubprogram(name: "gimple_has_ops", scope: !6, file: !6, line: 1274, type: !4368, scopeLine: 1275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6852 = !DILocalVariable(name: "g", arg: 1, scope: !6851, file: !6, line: 1274, type: !3517)
!6853 = !DILocation(line: 1274, column: 30, scope: !6851)
!6854 = !DILocation(line: 1276, column: 23, scope: !6851)
!6855 = !DILocation(line: 1276, column: 10, scope: !6851)
!6856 = !DILocation(line: 1276, column: 26, scope: !6851)
!6857 = !DILocation(line: 1276, column: 41, scope: !6851)
!6858 = !DILocation(line: 1276, column: 57, scope: !6851)
!6859 = !DILocation(line: 1276, column: 44, scope: !6851)
!6860 = !DILocation(line: 1276, column: 60, scope: !6851)
!6861 = !DILocation(line: 0, scope: !6851)
!6862 = !DILocation(line: 1276, column: 3, scope: !6851)
!6863 = distinct !DISubprogram(name: "gimple_set_def_ops", scope: !6, file: !6, line: 1303, type: !6864, scopeLine: 1304, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6864 = !DISubroutineType(types: !6865)
!6865 = !{null, !594, !1122}
!6866 = !DILocalVariable(name: "g", arg: 1, scope: !6863, file: !6, line: 1303, type: !594)
!6867 = !DILocation(line: 1303, column: 28, scope: !6863)
!6868 = !DILocalVariable(name: "def", arg: 2, scope: !6863, file: !6, line: 1303, type: !1122)
!6869 = !DILocation(line: 1303, column: 52, scope: !6863)
!6870 = !DILocation(line: 1305, column: 3, scope: !6863)
!6871 = !DILocation(line: 1306, column: 29, scope: !6863)
!6872 = !DILocation(line: 1306, column: 3, scope: !6863)
!6873 = !DILocation(line: 1306, column: 6, scope: !6863)
!6874 = !DILocation(line: 1306, column: 12, scope: !6863)
!6875 = !DILocation(line: 1306, column: 19, scope: !6863)
!6876 = !DILocation(line: 1306, column: 27, scope: !6863)
!6877 = !DILocation(line: 1307, column: 1, scope: !6863)
!6878 = distinct !DISubprogram(name: "gimple_set_use_ops", scope: !6, file: !6, line: 1324, type: !6879, scopeLine: 1325, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6879 = !DISubroutineType(types: !6880)
!6880 = !{null, !594, !1129}
!6881 = !DILocalVariable(name: "g", arg: 1, scope: !6878, file: !6, line: 1324, type: !594)
!6882 = !DILocation(line: 1324, column: 28, scope: !6878)
!6883 = !DILocalVariable(name: "use", arg: 2, scope: !6878, file: !6, line: 1324, type: !1129)
!6884 = !DILocation(line: 1324, column: 52, scope: !6878)
!6885 = !DILocation(line: 1326, column: 3, scope: !6878)
!6886 = !DILocation(line: 1327, column: 29, scope: !6878)
!6887 = !DILocation(line: 1327, column: 3, scope: !6878)
!6888 = !DILocation(line: 1327, column: 6, scope: !6878)
!6889 = !DILocation(line: 1327, column: 12, scope: !6878)
!6890 = !DILocation(line: 1327, column: 19, scope: !6878)
!6891 = !DILocation(line: 1327, column: 27, scope: !6878)
!6892 = !DILocation(line: 1328, column: 1, scope: !6878)
!6893 = distinct !DISubprogram(name: "gimple_has_mem_ops", scope: !6, file: !6, line: 1283, type: !4368, scopeLine: 1284, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6894 = !DILocalVariable(name: "g", arg: 1, scope: !6893, file: !6, line: 1283, type: !3517)
!6895 = !DILocation(line: 1283, column: 34, scope: !6893)
!6896 = !DILocation(line: 1285, column: 23, scope: !6893)
!6897 = !DILocation(line: 1285, column: 10, scope: !6893)
!6898 = !DILocation(line: 1285, column: 26, scope: !6893)
!6899 = !DILocation(line: 1285, column: 43, scope: !6893)
!6900 = !DILocation(line: 1285, column: 59, scope: !6893)
!6901 = !DILocation(line: 1285, column: 46, scope: !6893)
!6902 = !DILocation(line: 1285, column: 62, scope: !6893)
!6903 = !DILocation(line: 0, scope: !6893)
!6904 = !DILocation(line: 1285, column: 3, scope: !6893)
!6905 = distinct !DISubprogram(name: "gimple_set_vdef", scope: !6, file: !6, line: 1414, type: !1994, scopeLine: 1415, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6906 = !DILocalVariable(name: "g", arg: 1, scope: !6905, file: !6, line: 1414, type: !594)
!6907 = !DILocation(line: 1414, column: 25, scope: !6905)
!6908 = !DILocalVariable(name: "vdef", arg: 2, scope: !6905, file: !6, line: 1414, type: !666)
!6909 = !DILocation(line: 1414, column: 33, scope: !6905)
!6910 = !DILocation(line: 1416, column: 3, scope: !6905)
!6911 = !DILocation(line: 1417, column: 23, scope: !6905)
!6912 = !DILocation(line: 1417, column: 3, scope: !6905)
!6913 = !DILocation(line: 1417, column: 6, scope: !6905)
!6914 = !DILocation(line: 1417, column: 16, scope: !6905)
!6915 = !DILocation(line: 1417, column: 21, scope: !6905)
!6916 = !DILocation(line: 1418, column: 1, scope: !6905)
!6917 = distinct !DISubprogram(name: "gimple_vdef", scope: !6, file: !6, line: 1375, type: !3515, scopeLine: 1376, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6918 = !DILocalVariable(name: "g", arg: 1, scope: !6917, file: !6, line: 1375, type: !3517)
!6919 = !DILocation(line: 1375, column: 27, scope: !6917)
!6920 = !DILocation(line: 1377, column: 28, scope: !6921)
!6921 = distinct !DILexicalBlock(scope: !6917, file: !6, line: 1377, column: 7)
!6922 = !DILocation(line: 1377, column: 8, scope: !6921)
!6923 = !DILocation(line: 1377, column: 7, scope: !6917)
!6924 = !DILocation(line: 1378, column: 5, scope: !6921)
!6925 = !DILocation(line: 1379, column: 10, scope: !6917)
!6926 = !DILocation(line: 1379, column: 13, scope: !6917)
!6927 = !DILocation(line: 1379, column: 23, scope: !6917)
!6928 = !DILocation(line: 1379, column: 3, scope: !6917)
!6929 = !DILocation(line: 1380, column: 1, scope: !6917)
!6930 = distinct !DISubprogram(name: "gimple_set_vuse", scope: !6, file: !6, line: 1405, type: !1994, scopeLine: 1406, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6931 = !DILocalVariable(name: "g", arg: 1, scope: !6930, file: !6, line: 1405, type: !594)
!6932 = !DILocation(line: 1405, column: 25, scope: !6930)
!6933 = !DILocalVariable(name: "vuse", arg: 2, scope: !6930, file: !6, line: 1405, type: !666)
!6934 = !DILocation(line: 1405, column: 33, scope: !6930)
!6935 = !DILocation(line: 1407, column: 3, scope: !6930)
!6936 = !DILocation(line: 1408, column: 23, scope: !6930)
!6937 = !DILocation(line: 1408, column: 3, scope: !6930)
!6938 = !DILocation(line: 1408, column: 6, scope: !6930)
!6939 = !DILocation(line: 1408, column: 16, scope: !6930)
!6940 = !DILocation(line: 1408, column: 21, scope: !6930)
!6941 = !DILocation(line: 1409, column: 1, scope: !6930)
!6942 = distinct !DISubprogram(name: "gimple_vuse", scope: !6, file: !6, line: 1365, type: !3515, scopeLine: 1366, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6943 = !DILocalVariable(name: "g", arg: 1, scope: !6942, file: !6, line: 1365, type: !3517)
!6944 = !DILocation(line: 1365, column: 27, scope: !6942)
!6945 = !DILocation(line: 1367, column: 28, scope: !6946)
!6946 = distinct !DILexicalBlock(scope: !6942, file: !6, line: 1367, column: 7)
!6947 = !DILocation(line: 1367, column: 8, scope: !6946)
!6948 = !DILocation(line: 1367, column: 7, scope: !6942)
!6949 = !DILocation(line: 1368, column: 5, scope: !6946)
!6950 = !DILocation(line: 1369, column: 10, scope: !6942)
!6951 = !DILocation(line: 1369, column: 13, scope: !6942)
!6952 = !DILocation(line: 1369, column: 23, scope: !6942)
!6953 = !DILocation(line: 1369, column: 3, scope: !6942)
!6954 = !DILocation(line: 1370, column: 1, scope: !6942)
!6955 = distinct !DISubprogram(name: "gimple_set_modified", scope: !3, file: !3, line: 2130, type: !2237, scopeLine: 2131, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6956 = !DILocalVariable(name: "s", arg: 1, scope: !6955, file: !3, line: 2130, type: !594)
!6957 = !DILocation(line: 2130, column: 29, scope: !6955)
!6958 = !DILocalVariable(name: "modifiedp", arg: 2, scope: !6955, file: !3, line: 2130, type: !769)
!6959 = !DILocation(line: 2130, column: 37, scope: !6955)
!6960 = !DILocation(line: 2132, column: 23, scope: !6961)
!6961 = distinct !DILexicalBlock(scope: !6955, file: !3, line: 2132, column: 7)
!6962 = !DILocation(line: 2132, column: 7, scope: !6961)
!6963 = !DILocation(line: 2132, column: 7, scope: !6955)
!6964 = !DILocation(line: 2134, column: 39, scope: !6965)
!6965 = distinct !DILexicalBlock(scope: !6961, file: !3, line: 2133, column: 5)
!6966 = !DILocation(line: 2134, column: 28, scope: !6965)
!6967 = !DILocation(line: 2134, column: 7, scope: !6965)
!6968 = !DILocation(line: 2134, column: 10, scope: !6965)
!6969 = !DILocation(line: 2134, column: 17, scope: !6965)
!6970 = !DILocation(line: 2134, column: 26, scope: !6965)
!6971 = !DILocation(line: 2136, column: 11, scope: !6972)
!6972 = distinct !DILexicalBlock(scope: !6965, file: !3, line: 2136, column: 11)
!6973 = !DILocation(line: 2137, column: 4, scope: !6972)
!6974 = !DILocation(line: 2137, column: 7, scope: !6972)
!6975 = !DILocation(line: 2137, column: 13, scope: !6972)
!6976 = !DILocation(line: 2138, column: 4, scope: !6972)
!6977 = !DILocation(line: 2138, column: 23, scope: !6972)
!6978 = !DILocation(line: 2138, column: 7, scope: !6972)
!6979 = !DILocation(line: 2139, column: 4, scope: !6972)
!6980 = !DILocation(line: 2139, column: 31, scope: !6972)
!6981 = !DILocation(line: 2139, column: 7, scope: !6972)
!6982 = !DILocation(line: 2136, column: 11, scope: !6965)
!6983 = !DILocation(line: 2140, column: 2, scope: !6972)
!6984 = !DILocation(line: 2141, column: 5, scope: !6965)
!6985 = !DILocation(line: 2142, column: 1, scope: !6955)
!6986 = distinct !DISubprogram(name: "is_gimple_call", scope: !6, file: !6, line: 1870, type: !4368, scopeLine: 1871, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6987 = !DILocalVariable(name: "gs", arg: 1, scope: !6986, file: !6, line: 1870, type: !3517)
!6988 = !DILocation(line: 1870, column: 30, scope: !6986)
!6989 = !DILocation(line: 1872, column: 23, scope: !6986)
!6990 = !DILocation(line: 1872, column: 10, scope: !6986)
!6991 = !DILocation(line: 1872, column: 27, scope: !6986)
!6992 = !DILocation(line: 1872, column: 3, scope: !6986)
!6993 = distinct !DISubprogram(name: "gimple_call_noreturn_p", scope: !6, file: !6, line: 2178, type: !4338, scopeLine: 2179, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!6994 = !DILocalVariable(name: "s", arg: 1, scope: !6993, file: !6, line: 2178, type: !594)
!6995 = !DILocation(line: 2178, column: 32, scope: !6993)
!6996 = !DILocation(line: 2181, column: 30, scope: !6993)
!6997 = !DILocation(line: 2181, column: 11, scope: !6993)
!6998 = !DILocation(line: 2181, column: 33, scope: !6993)
!6999 = !DILocation(line: 2181, column: 49, scope: !6993)
!7000 = !DILocation(line: 2181, column: 10, scope: !6993)
!7001 = !DILocation(line: 2181, column: 3, scope: !6993)
!7002 = distinct !DISubprogram(name: "VEC_gimple_gc_safe_push", scope: !6, file: !6, line: 35, type: !7003, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!7003 = !DISubroutineType(types: !7004)
!7004 = !{!7005, !7006, !594}
!7005 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !594, size: 64)
!7006 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1004, size: 64)
!7007 = !DILocalVariable(name: "vec_", arg: 1, scope: !7002, file: !6, line: 35, type: !7006)
!7008 = !DILocation(line: 35, column: 1, scope: !7002)
!7009 = !DILocalVariable(name: "obj_", arg: 2, scope: !7002, file: !6, line: 35, type: !594)
!7010 = distinct !DISubprogram(name: "gimple_has_side_effects", scope: !3, file: !3, line: 2152, type: !4368, scopeLine: 2153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!7011 = !DILocalVariable(name: "s", arg: 1, scope: !7010, file: !3, line: 2152, type: !3517)
!7012 = !DILocation(line: 2152, column: 39, scope: !7010)
!7013 = !DILocalVariable(name: "i", scope: !7010, file: !3, line: 2154, type: !7)
!7014 = !DILocation(line: 2154, column: 12, scope: !7010)
!7015 = !DILocation(line: 2156, column: 24, scope: !7016)
!7016 = distinct !DILexicalBlock(scope: !7010, file: !3, line: 2156, column: 7)
!7017 = !DILocation(line: 2156, column: 7, scope: !7016)
!7018 = !DILocation(line: 2156, column: 7, scope: !7010)
!7019 = !DILocation(line: 2157, column: 5, scope: !7016)
!7020 = !DILocation(line: 2162, column: 32, scope: !7021)
!7021 = distinct !DILexicalBlock(scope: !7010, file: !3, line: 2162, column: 7)
!7022 = !DILocation(line: 2162, column: 7, scope: !7021)
!7023 = !DILocation(line: 2162, column: 7, scope: !7010)
!7024 = !DILocation(line: 2163, column: 5, scope: !7021)
!7025 = !DILocation(line: 2165, column: 23, scope: !7026)
!7026 = distinct !DILexicalBlock(scope: !7010, file: !3, line: 2165, column: 7)
!7027 = !DILocation(line: 2165, column: 7, scope: !7026)
!7028 = !DILocation(line: 2165, column: 7, scope: !7010)
!7029 = !DILocalVariable(name: "nargs", scope: !7030, file: !3, line: 2167, type: !7)
!7030 = distinct !DILexicalBlock(scope: !7026, file: !3, line: 2166, column: 5)
!7031 = !DILocation(line: 2167, column: 16, scope: !7030)
!7032 = !DILocation(line: 2167, column: 46, scope: !7030)
!7033 = !DILocation(line: 2167, column: 24, scope: !7030)
!7034 = !DILocation(line: 2169, column: 32, scope: !7035)
!7035 = distinct !DILexicalBlock(scope: !7030, file: !3, line: 2169, column: 11)
!7036 = !DILocation(line: 2169, column: 13, scope: !7035)
!7037 = !DILocation(line: 2169, column: 35, scope: !7035)
!7038 = !DILocation(line: 2169, column: 11, scope: !7030)
!7039 = !DILocation(line: 2170, column: 9, scope: !7035)
!7040 = !DILocation(line: 2171, column: 35, scope: !7041)
!7041 = distinct !DILexicalBlock(scope: !7035, file: !3, line: 2171, column: 16)
!7042 = !DILocation(line: 2171, column: 16, scope: !7041)
!7043 = !DILocation(line: 2171, column: 38, scope: !7041)
!7044 = !DILocation(line: 2171, column: 16, scope: !7035)
!7045 = !DILocation(line: 2173, column: 2, scope: !7041)
!7046 = !DILocation(line: 2175, column: 28, scope: !7047)
!7047 = distinct !DILexicalBlock(scope: !7030, file: !3, line: 2175, column: 11)
!7048 = !DILocation(line: 2175, column: 11, scope: !7047)
!7049 = !DILocation(line: 2176, column: 11, scope: !7047)
!7050 = !DILocation(line: 2176, column: 14, scope: !7047)
!7051 = !DILocation(line: 2175, column: 11, scope: !7030)
!7052 = !DILocation(line: 2178, column: 4, scope: !7053)
!7053 = distinct !DILexicalBlock(scope: !7047, file: !3, line: 2177, column: 2)
!7054 = !DILocation(line: 2179, column: 4, scope: !7053)
!7055 = !DILocation(line: 2182, column: 11, scope: !7056)
!7056 = distinct !DILexicalBlock(scope: !7030, file: !3, line: 2182, column: 11)
!7057 = !DILocation(line: 2182, column: 11, scope: !7030)
!7058 = !DILocation(line: 2183, column: 9, scope: !7056)
!7059 = !DILocation(line: 2185, column: 14, scope: !7060)
!7060 = distinct !DILexicalBlock(scope: !7030, file: !3, line: 2185, column: 7)
!7061 = !DILocation(line: 2185, column: 12, scope: !7060)
!7062 = !DILocation(line: 2185, column: 19, scope: !7063)
!7063 = distinct !DILexicalBlock(scope: !7060, file: !3, line: 2185, column: 7)
!7064 = !DILocation(line: 2185, column: 23, scope: !7063)
!7065 = !DILocation(line: 2185, column: 21, scope: !7063)
!7066 = !DILocation(line: 2185, column: 7, scope: !7060)
!7067 = !DILocation(line: 2186, column: 13, scope: !7068)
!7068 = distinct !DILexicalBlock(scope: !7063, file: !3, line: 2186, column: 13)
!7069 = !DILocation(line: 2186, column: 13, scope: !7063)
!7070 = !DILocation(line: 2188, column: 6, scope: !7071)
!7071 = distinct !DILexicalBlock(scope: !7068, file: !3, line: 2187, column: 4)
!7072 = !DILocation(line: 2189, column: 6, scope: !7071)
!7073 = !DILocation(line: 2185, column: 31, scope: !7063)
!7074 = !DILocation(line: 2185, column: 7, scope: !7063)
!7075 = distinct !{!7075, !7066, !7076}
!7076 = !DILocation(line: 2190, column: 4, scope: !7060)
!7077 = !DILocation(line: 2192, column: 7, scope: !7030)
!7078 = !DILocation(line: 2196, column: 14, scope: !7079)
!7079 = distinct !DILexicalBlock(scope: !7080, file: !3, line: 2196, column: 7)
!7080 = distinct !DILexicalBlock(scope: !7026, file: !3, line: 2195, column: 5)
!7081 = !DILocation(line: 2196, column: 12, scope: !7079)
!7082 = !DILocation(line: 2196, column: 19, scope: !7083)
!7083 = distinct !DILexicalBlock(scope: !7079, file: !3, line: 2196, column: 7)
!7084 = !DILocation(line: 2196, column: 39, scope: !7083)
!7085 = !DILocation(line: 2196, column: 23, scope: !7083)
!7086 = !DILocation(line: 2196, column: 21, scope: !7083)
!7087 = !DILocation(line: 2196, column: 7, scope: !7079)
!7088 = !DILocation(line: 2197, column: 6, scope: !7089)
!7089 = distinct !DILexicalBlock(scope: !7083, file: !3, line: 2197, column: 6)
!7090 = !DILocation(line: 2197, column: 6, scope: !7083)
!7091 = !DILocation(line: 2199, column: 6, scope: !7092)
!7092 = distinct !DILexicalBlock(scope: !7089, file: !3, line: 2198, column: 4)
!7093 = !DILocation(line: 2200, column: 6, scope: !7092)
!7094 = !DILocation(line: 2196, column: 44, scope: !7083)
!7095 = !DILocation(line: 2196, column: 7, scope: !7083)
!7096 = distinct !{!7096, !7087, !7097}
!7097 = !DILocation(line: 2201, column: 4, scope: !7079)
!7098 = !DILocation(line: 2204, column: 3, scope: !7010)
!7099 = !DILocation(line: 2205, column: 1, scope: !7010)
!7100 = distinct !DISubprogram(name: "gimple_has_volatile_ops", scope: !6, file: !6, line: 1477, type: !4368, scopeLine: 1478, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!7101 = !DILocalVariable(name: "stmt", arg: 1, scope: !7100, file: !6, line: 1477, type: !3517)
!7102 = !DILocation(line: 1477, column: 39, scope: !7100)
!7103 = !DILocation(line: 1479, column: 27, scope: !7104)
!7104 = distinct !DILexicalBlock(scope: !7100, file: !6, line: 1479, column: 7)
!7105 = !DILocation(line: 1479, column: 7, scope: !7104)
!7106 = !DILocation(line: 1479, column: 7, scope: !7100)
!7107 = !DILocation(line: 1480, column: 12, scope: !7104)
!7108 = !DILocation(line: 1480, column: 18, scope: !7104)
!7109 = !DILocation(line: 1480, column: 25, scope: !7104)
!7110 = !DILocation(line: 1480, column: 5, scope: !7104)
!7111 = !DILocation(line: 1482, column: 5, scope: !7104)
!7112 = !DILocation(line: 1483, column: 1, scope: !7100)
!7113 = distinct !DISubprogram(name: "gimple_call_arg", scope: !6, file: !6, line: 2025, type: !6223, scopeLine: 2026, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!7114 = !DILocalVariable(name: "gs", arg: 1, scope: !7113, file: !6, line: 2025, type: !3517)
!7115 = !DILocation(line: 2025, column: 31, scope: !7113)
!7116 = !DILocalVariable(name: "index", arg: 2, scope: !7113, file: !6, line: 2025, type: !7)
!7117 = !DILocation(line: 2025, column: 44, scope: !7113)
!7118 = !DILocation(line: 2028, column: 21, scope: !7113)
!7119 = !DILocation(line: 2028, column: 25, scope: !7113)
!7120 = !DILocation(line: 2028, column: 31, scope: !7113)
!7121 = !DILocation(line: 2028, column: 10, scope: !7113)
!7122 = !DILocation(line: 2028, column: 3, scope: !7113)
!7123 = distinct !DISubprogram(name: "gimple_rhs_has_side_effects", scope: !3, file: !3, line: 2214, type: !4368, scopeLine: 2215, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!7124 = !DILocalVariable(name: "s", arg: 1, scope: !7123, file: !3, line: 2214, type: !3517)
!7125 = !DILocation(line: 2214, column: 43, scope: !7123)
!7126 = !DILocalVariable(name: "i", scope: !7123, file: !3, line: 2216, type: !7)
!7127 = !DILocation(line: 2216, column: 12, scope: !7123)
!7128 = !DILocation(line: 2218, column: 23, scope: !7129)
!7129 = distinct !DILexicalBlock(scope: !7123, file: !3, line: 2218, column: 7)
!7130 = !DILocation(line: 2218, column: 7, scope: !7129)
!7131 = !DILocation(line: 2218, column: 7, scope: !7123)
!7132 = !DILocalVariable(name: "nargs", scope: !7133, file: !3, line: 2220, type: !7)
!7133 = distinct !DILexicalBlock(scope: !7129, file: !3, line: 2219, column: 5)
!7134 = !DILocation(line: 2220, column: 16, scope: !7133)
!7135 = !DILocation(line: 2220, column: 46, scope: !7133)
!7136 = !DILocation(line: 2220, column: 24, scope: !7133)
!7137 = !DILocation(line: 2222, column: 32, scope: !7138)
!7138 = distinct !DILexicalBlock(scope: !7133, file: !3, line: 2222, column: 11)
!7139 = !DILocation(line: 2222, column: 13, scope: !7138)
!7140 = !DILocation(line: 2222, column: 35, scope: !7138)
!7141 = !DILocation(line: 2222, column: 11, scope: !7133)
!7142 = !DILocation(line: 2223, column: 9, scope: !7138)
!7143 = !DILocation(line: 2227, column: 11, scope: !7144)
!7144 = distinct !DILexicalBlock(scope: !7133, file: !3, line: 2227, column: 11)
!7145 = !DILocation(line: 2228, column: 11, scope: !7144)
!7146 = !DILocation(line: 2228, column: 14, scope: !7144)
!7147 = !DILocation(line: 2227, column: 11, scope: !7133)
!7148 = !DILocation(line: 2230, column: 4, scope: !7149)
!7149 = distinct !DILexicalBlock(scope: !7144, file: !3, line: 2229, column: 2)
!7150 = !DILocation(line: 2231, column: 4, scope: !7149)
!7151 = !DILocation(line: 2234, column: 14, scope: !7152)
!7152 = distinct !DILexicalBlock(scope: !7133, file: !3, line: 2234, column: 7)
!7153 = !DILocation(line: 2234, column: 12, scope: !7152)
!7154 = !DILocation(line: 2234, column: 19, scope: !7155)
!7155 = distinct !DILexicalBlock(scope: !7152, file: !3, line: 2234, column: 7)
!7156 = !DILocation(line: 2234, column: 23, scope: !7155)
!7157 = !DILocation(line: 2234, column: 21, scope: !7155)
!7158 = !DILocation(line: 2234, column: 7, scope: !7152)
!7159 = !DILocation(line: 2235, column: 13, scope: !7160)
!7160 = distinct !DILexicalBlock(scope: !7155, file: !3, line: 2235, column: 13)
!7161 = !DILocation(line: 2236, column: 13, scope: !7160)
!7162 = !DILocation(line: 2236, column: 16, scope: !7160)
!7163 = !DILocation(line: 2235, column: 13, scope: !7155)
!7164 = !DILocation(line: 2237, column: 11, scope: !7160)
!7165 = !DILocation(line: 2234, column: 31, scope: !7155)
!7166 = !DILocation(line: 2234, column: 7, scope: !7155)
!7167 = distinct !{!7167, !7158, !7168}
!7168 = !DILocation(line: 2237, column: 18, scope: !7152)
!7169 = !DILocation(line: 2239, column: 7, scope: !7133)
!7170 = !DILocation(line: 2241, column: 30, scope: !7171)
!7171 = distinct !DILexicalBlock(scope: !7129, file: !3, line: 2241, column: 12)
!7172 = !DILocation(line: 2241, column: 12, scope: !7171)
!7173 = !DILocation(line: 2241, column: 12, scope: !7129)
!7174 = !DILocation(line: 2244, column: 14, scope: !7175)
!7175 = distinct !DILexicalBlock(scope: !7176, file: !3, line: 2244, column: 7)
!7176 = distinct !DILexicalBlock(scope: !7171, file: !3, line: 2242, column: 5)
!7177 = !DILocation(line: 2244, column: 12, scope: !7175)
!7178 = !DILocation(line: 2244, column: 19, scope: !7179)
!7179 = distinct !DILexicalBlock(scope: !7175, file: !3, line: 2244, column: 7)
!7180 = !DILocation(line: 2244, column: 39, scope: !7179)
!7181 = !DILocation(line: 2244, column: 23, scope: !7179)
!7182 = !DILocation(line: 2244, column: 21, scope: !7179)
!7183 = !DILocation(line: 2244, column: 7, scope: !7175)
!7184 = !DILocation(line: 2245, column: 6, scope: !7185)
!7185 = distinct !DILexicalBlock(scope: !7179, file: !3, line: 2245, column: 6)
!7186 = !DILocation(line: 2246, column: 13, scope: !7185)
!7187 = !DILocation(line: 2246, column: 16, scope: !7185)
!7188 = !DILocation(line: 2245, column: 6, scope: !7179)
!7189 = !DILocation(line: 2248, column: 6, scope: !7190)
!7190 = distinct !DILexicalBlock(scope: !7185, file: !3, line: 2247, column: 4)
!7191 = !DILocation(line: 2249, column: 6, scope: !7190)
!7192 = !DILocation(line: 2244, column: 44, scope: !7179)
!7193 = !DILocation(line: 2244, column: 7, scope: !7179)
!7194 = distinct !{!7194, !7183, !7195}
!7195 = !DILocation(line: 2250, column: 4, scope: !7175)
!7196 = !DILocation(line: 2251, column: 5, scope: !7176)
!7197 = !DILocation(line: 2252, column: 29, scope: !7198)
!7198 = distinct !DILexicalBlock(scope: !7171, file: !3, line: 2252, column: 12)
!7199 = !DILocation(line: 2252, column: 12, scope: !7198)
!7200 = !DILocation(line: 2252, column: 12, scope: !7171)
!7201 = !DILocation(line: 2253, column: 5, scope: !7198)
!7202 = !DILocation(line: 2257, column: 14, scope: !7203)
!7203 = distinct !DILexicalBlock(scope: !7204, file: !3, line: 2257, column: 7)
!7204 = distinct !DILexicalBlock(scope: !7198, file: !3, line: 2255, column: 5)
!7205 = !DILocation(line: 2257, column: 12, scope: !7203)
!7206 = !DILocation(line: 2257, column: 19, scope: !7207)
!7207 = distinct !DILexicalBlock(scope: !7203, file: !3, line: 2257, column: 7)
!7208 = !DILocation(line: 2257, column: 39, scope: !7207)
!7209 = !DILocation(line: 2257, column: 23, scope: !7207)
!7210 = !DILocation(line: 2257, column: 21, scope: !7207)
!7211 = !DILocation(line: 2257, column: 7, scope: !7203)
!7212 = !DILocation(line: 2258, column: 6, scope: !7213)
!7213 = distinct !DILexicalBlock(scope: !7207, file: !3, line: 2258, column: 6)
!7214 = !DILocation(line: 2259, column: 13, scope: !7213)
!7215 = !DILocation(line: 2259, column: 16, scope: !7213)
!7216 = !DILocation(line: 2258, column: 6, scope: !7207)
!7217 = !DILocation(line: 2261, column: 6, scope: !7218)
!7218 = distinct !DILexicalBlock(scope: !7213, file: !3, line: 2260, column: 4)
!7219 = !DILocation(line: 2262, column: 6, scope: !7218)
!7220 = !DILocation(line: 2257, column: 44, scope: !7207)
!7221 = !DILocation(line: 2257, column: 7, scope: !7207)
!7222 = distinct !{!7222, !7211, !7223}
!7223 = !DILocation(line: 2263, column: 4, scope: !7203)
!7224 = !DILocation(line: 2266, column: 3, scope: !7123)
!7225 = !DILocation(line: 2267, column: 1, scope: !7123)
!7226 = distinct !DISubprogram(name: "is_gimple_assign", scope: !6, file: !6, line: 1677, type: !4368, scopeLine: 1678, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!7227 = !DILocalVariable(name: "gs", arg: 1, scope: !7226, file: !6, line: 1677, type: !3517)
!7228 = !DILocation(line: 1677, column: 32, scope: !7226)
!7229 = !DILocation(line: 1679, column: 23, scope: !7226)
!7230 = !DILocation(line: 1679, column: 10, scope: !7226)
!7231 = !DILocation(line: 1679, column: 27, scope: !7226)
!7232 = !DILocation(line: 1679, column: 3, scope: !7226)
!7233 = distinct !DISubprogram(name: "gimple_could_trap_p", scope: !3, file: !3, line: 2322, type: !4338, scopeLine: 2323, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!7234 = !DILocalVariable(name: "s", arg: 1, scope: !7233, file: !3, line: 2322, type: !594)
!7235 = !DILocation(line: 2322, column: 29, scope: !7233)
!7236 = !DILocation(line: 2324, column: 33, scope: !7233)
!7237 = !DILocation(line: 2324, column: 10, scope: !7233)
!7238 = !DILocation(line: 2324, column: 3, scope: !7233)
!7239 = distinct !DISubprogram(name: "gimple_could_trap_p_1", scope: !3, file: !3, line: 2276, type: !7240, scopeLine: 2277, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!7240 = !DISubroutineType(types: !7241)
!7241 = !{!769, !594, !769}
!7242 = !DILocalVariable(name: "s", arg: 1, scope: !7239, file: !3, line: 2276, type: !594)
!7243 = !DILocation(line: 2276, column: 31, scope: !7239)
!7244 = !DILocalVariable(name: "include_lhs", arg: 2, scope: !7239, file: !3, line: 2276, type: !769)
!7245 = !DILocation(line: 2276, column: 39, scope: !7239)
!7246 = !DILocalVariable(name: "i", scope: !7239, file: !3, line: 2278, type: !7)
!7247 = !DILocation(line: 2278, column: 12, scope: !7239)
!7248 = !DILocalVariable(name: "start", scope: !7239, file: !3, line: 2278, type: !7)
!7249 = !DILocation(line: 2278, column: 15, scope: !7239)
!7250 = !DILocalVariable(name: "t", scope: !7239, file: !3, line: 2279, type: !666)
!7251 = !DILocation(line: 2279, column: 8, scope: !7239)
!7252 = !DILocalVariable(name: "div", scope: !7239, file: !3, line: 2279, type: !666)
!7253 = !DILocation(line: 2279, column: 11, scope: !7239)
!7254 = !DILocalVariable(name: "op", scope: !7239, file: !3, line: 2280, type: !82)
!7255 = !DILocation(line: 2280, column: 18, scope: !7239)
!7256 = !DILocation(line: 2282, column: 30, scope: !7239)
!7257 = !DILocation(line: 2282, column: 12, scope: !7239)
!7258 = !DILocation(line: 2282, column: 33, scope: !7239)
!7259 = !DILocation(line: 2282, column: 37, scope: !7239)
!7260 = !DILocation(line: 2282, column: 36, scope: !7239)
!7261 = !DILocation(line: 0, scope: !7239)
!7262 = !DILocation(line: 2282, column: 11, scope: !7239)
!7263 = !DILocation(line: 2282, column: 9, scope: !7239)
!7264 = !DILocation(line: 2284, column: 12, scope: !7265)
!7265 = distinct !DILexicalBlock(scope: !7239, file: !3, line: 2284, column: 3)
!7266 = !DILocation(line: 2284, column: 10, scope: !7265)
!7267 = !DILocation(line: 2284, column: 8, scope: !7265)
!7268 = !DILocation(line: 2284, column: 19, scope: !7269)
!7269 = distinct !DILexicalBlock(scope: !7265, file: !3, line: 2284, column: 3)
!7270 = !DILocation(line: 2284, column: 39, scope: !7269)
!7271 = !DILocation(line: 2284, column: 23, scope: !7269)
!7272 = !DILocation(line: 2284, column: 21, scope: !7269)
!7273 = !DILocation(line: 2284, column: 3, scope: !7265)
!7274 = !DILocation(line: 2285, column: 39, scope: !7275)
!7275 = distinct !DILexicalBlock(scope: !7269, file: !3, line: 2285, column: 9)
!7276 = !DILocation(line: 2285, column: 42, scope: !7275)
!7277 = !DILocation(line: 2285, column: 28, scope: !7275)
!7278 = !DILocation(line: 2285, column: 9, scope: !7275)
!7279 = !DILocation(line: 2285, column: 9, scope: !7269)
!7280 = !DILocation(line: 2286, column: 7, scope: !7275)
!7281 = !DILocation(line: 2285, column: 44, scope: !7275)
!7282 = !DILocation(line: 2284, column: 44, scope: !7269)
!7283 = !DILocation(line: 2284, column: 3, scope: !7269)
!7284 = distinct !{!7284, !7273, !7285}
!7285 = !DILocation(line: 2286, column: 14, scope: !7265)
!7286 = !DILocation(line: 2288, column: 24, scope: !7239)
!7287 = !DILocation(line: 2288, column: 11, scope: !7239)
!7288 = !DILocation(line: 2288, column: 3, scope: !7239)
!7289 = !DILocation(line: 2291, column: 37, scope: !7290)
!7290 = distinct !DILexicalBlock(scope: !7239, file: !3, line: 2289, column: 5)
!7291 = !DILocation(line: 2291, column: 14, scope: !7290)
!7292 = !DILocation(line: 2291, column: 7, scope: !7290)
!7293 = !DILocation(line: 2294, column: 31, scope: !7290)
!7294 = !DILocation(line: 2294, column: 11, scope: !7290)
!7295 = !DILocation(line: 2294, column: 9, scope: !7290)
!7296 = !DILocation(line: 2296, column: 12, scope: !7297)
!7297 = distinct !DILexicalBlock(scope: !7290, file: !3, line: 2296, column: 11)
!7298 = !DILocation(line: 2296, column: 14, scope: !7297)
!7299 = !DILocation(line: 2296, column: 18, scope: !7297)
!7300 = !DILocation(line: 2296, column: 29, scope: !7297)
!7301 = !DILocation(line: 2296, column: 32, scope: !7297)
!7302 = !DILocation(line: 2296, column: 11, scope: !7290)
!7303 = !DILocation(line: 2297, column: 2, scope: !7297)
!7304 = !DILocation(line: 2298, column: 7, scope: !7290)
!7305 = !DILocation(line: 2301, column: 29, scope: !7290)
!7306 = !DILocation(line: 2301, column: 11, scope: !7290)
!7307 = !DILocation(line: 2301, column: 9, scope: !7290)
!7308 = !DILocation(line: 2302, column: 36, scope: !7290)
!7309 = !DILocation(line: 2302, column: 12, scope: !7290)
!7310 = !DILocation(line: 2302, column: 10, scope: !7290)
!7311 = !DILocation(line: 2303, column: 33, scope: !7312)
!7312 = distinct !DILexicalBlock(scope: !7290, file: !3, line: 2303, column: 11)
!7313 = !DILocation(line: 2303, column: 11, scope: !7312)
!7314 = !DILocation(line: 2303, column: 37, scope: !7312)
!7315 = !DILocation(line: 2303, column: 11, scope: !7290)
!7316 = !DILocation(line: 2304, column: 28, scope: !7312)
!7317 = !DILocation(line: 2304, column: 8, scope: !7312)
!7318 = !DILocation(line: 2304, column: 6, scope: !7312)
!7319 = !DILocation(line: 2304, column: 2, scope: !7312)
!7320 = !DILocation(line: 2305, column: 39, scope: !7290)
!7321 = !DILocation(line: 2305, column: 43, scope: !7290)
!7322 = !DILocation(line: 0, scope: !7290)
!7323 = !DILocation(line: 2306, column: 12, scope: !7290)
!7324 = !DILocation(line: 2307, column: 12, scope: !7290)
!7325 = !DILocation(line: 2307, column: 15, scope: !7290)
!7326 = !DILocation(line: 2306, column: 11, scope: !7290)
!7327 = !DILocation(line: 2308, column: 11, scope: !7290)
!7328 = !DILocation(line: 2305, column: 15, scope: !7290)
!7329 = !DILocation(line: 2305, column: 7, scope: !7290)
!7330 = !DILocation(line: 2311, column: 7, scope: !7290)
!7331 = !DILocation(line: 2314, column: 3, scope: !7239)
!7332 = !DILocation(line: 2316, column: 1, scope: !7239)
!7333 = distinct !DISubprogram(name: "gimple_assign_rhs_could_trap_p", scope: !3, file: !3, line: 2331, type: !4338, scopeLine: 2332, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!7334 = !DILocalVariable(name: "s", arg: 1, scope: !7333, file: !3, line: 2331, type: !594)
!7335 = !DILocation(line: 2331, column: 40, scope: !7333)
!7336 = !DILocation(line: 2333, column: 3, scope: !7333)
!7337 = !DILocation(line: 2334, column: 33, scope: !7333)
!7338 = !DILocation(line: 2334, column: 10, scope: !7333)
!7339 = !DILocation(line: 2334, column: 3, scope: !7333)
!7340 = distinct !DISubprogram(name: "dump_gimple_statistics", scope: !3, file: !3, line: 2341, type: !7341, scopeLine: 2342, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!7341 = !DISubroutineType(types: !7342)
!7342 = !{null}
!7343 = !DILocation(line: 2360, column: 12, scope: !7340)
!7344 = !DILocation(line: 2360, column: 3, scope: !7340)
!7345 = !DILocation(line: 2362, column: 1, scope: !7340)
!7346 = distinct !DISubprogram(name: "is_gimple_operand", scope: !3, file: !3, line: 2425, type: !2681, scopeLine: 2426, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!7347 = !DILocalVariable(name: "op", arg: 1, scope: !7346, file: !3, line: 2425, type: !1784)
!7348 = !DILocation(line: 2425, column: 31, scope: !7346)
!7349 = !DILocation(line: 2427, column: 10, scope: !7346)
!7350 = !DILocation(line: 2427, column: 13, scope: !7346)
!7351 = !DILocation(line: 2427, column: 38, scope: !7346)
!7352 = !DILocation(line: 2427, column: 16, scope: !7346)
!7353 = !DILocation(line: 2427, column: 54, scope: !7346)
!7354 = !DILocation(line: 0, scope: !7346)
!7355 = !DILocation(line: 2427, column: 3, scope: !7346)
!7356 = distinct !DISubprogram(name: "is_gimple_reg_rhs", scope: !3, file: !3, line: 2434, type: !2141, scopeLine: 2435, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!7357 = !DILocalVariable(name: "t", arg: 1, scope: !7356, file: !3, line: 2434, type: !666)
!7358 = !DILocation(line: 2434, column: 25, scope: !7356)
!7359 = !DILocation(line: 2436, column: 32, scope: !7356)
!7360 = !DILocation(line: 2436, column: 10, scope: !7356)
!7361 = !DILocation(line: 2436, column: 47, scope: !7356)
!7362 = !DILocation(line: 2436, column: 3, scope: !7356)
!7363 = distinct !DISubprogram(name: "is_gimple_reg_type", scope: !3, file: !3, line: 2715, type: !2141, scopeLine: 2716, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!7364 = !DILocalVariable(name: "type", arg: 1, scope: !7363, file: !3, line: 2715, type: !666)
!7365 = !DILocation(line: 2715, column: 26, scope: !7363)
!7366 = !DILocation(line: 2717, column: 11, scope: !7363)
!7367 = !DILocation(line: 2717, column: 10, scope: !7363)
!7368 = !DILocation(line: 2717, column: 3, scope: !7363)
!7369 = distinct !DISubprogram(name: "is_gimple_lvalue", scope: !3, file: !3, line: 2456, type: !2141, scopeLine: 2457, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!7370 = !DILocalVariable(name: "t", arg: 1, scope: !7369, file: !3, line: 2456, type: !666)
!7371 = !DILocation(line: 2456, column: 24, scope: !7369)
!7372 = !DILocation(line: 2458, column: 34, scope: !7369)
!7373 = !DILocation(line: 2458, column: 11, scope: !7369)
!7374 = !DILocation(line: 2459, column: 4, scope: !7369)
!7375 = !DILocation(line: 2459, column: 7, scope: !7369)
!7376 = !DILocation(line: 2459, column: 21, scope: !7369)
!7377 = !DILocation(line: 2462, column: 4, scope: !7369)
!7378 = !DILocation(line: 2462, column: 7, scope: !7369)
!7379 = !DILocation(line: 2462, column: 21, scope: !7369)
!7380 = !DILocation(line: 2458, column: 10, scope: !7369)
!7381 = !DILocation(line: 2458, column: 3, scope: !7369)
!7382 = distinct !DISubprogram(name: "is_gimple_addressable", scope: !3, file: !3, line: 2479, type: !2141, scopeLine: 2480, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!7383 = !DILocalVariable(name: "t", arg: 1, scope: !7382, file: !3, line: 2479, type: !666)
!7384 = !DILocation(line: 2479, column: 29, scope: !7382)
!7385 = !DILocation(line: 2481, column: 25, scope: !7382)
!7386 = !DILocation(line: 2481, column: 11, scope: !7382)
!7387 = !DILocation(line: 2481, column: 28, scope: !7382)
!7388 = !DILocation(line: 2481, column: 52, scope: !7382)
!7389 = !DILocation(line: 2481, column: 31, scope: !7382)
!7390 = !DILocation(line: 2481, column: 55, scope: !7382)
!7391 = !DILocation(line: 2481, column: 58, scope: !7382)
!7392 = !DILocation(line: 2481, column: 10, scope: !7382)
!7393 = !DILocation(line: 2481, column: 3, scope: !7382)
!7394 = distinct !DISubprogram(name: "is_gimple_condexpr", scope: !3, file: !3, line: 2468, type: !2141, scopeLine: 2469, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!7395 = !DILocalVariable(name: "t", arg: 1, scope: !7394, file: !3, line: 2468, type: !666)
!7396 = !DILocation(line: 2468, column: 26, scope: !7394)
!7397 = !DILocation(line: 2470, column: 26, scope: !7394)
!7398 = !DILocation(line: 2470, column: 11, scope: !7394)
!7399 = !DILocation(line: 2470, column: 29, scope: !7394)
!7400 = !DILocation(line: 2470, column: 33, scope: !7394)
!7401 = !DILocation(line: 2471, column: 5, scope: !7394)
!7402 = !DILocation(line: 2471, column: 28, scope: !7394)
!7403 = !DILocation(line: 2471, column: 9, scope: !7394)
!7404 = !DILocation(line: 2472, column: 5, scope: !7394)
!7405 = !DILocation(line: 2472, column: 23, scope: !7394)
!7406 = !DILocation(line: 2472, column: 8, scope: !7394)
!7407 = !DILocation(line: 2473, column: 5, scope: !7394)
!7408 = !DILocation(line: 2473, column: 23, scope: !7394)
!7409 = !DILocation(line: 2473, column: 8, scope: !7394)
!7410 = !DILocation(line: 0, scope: !7394)
!7411 = !DILocation(line: 2470, column: 10, scope: !7394)
!7412 = !DILocation(line: 2470, column: 3, scope: !7394)
!7413 = distinct !DISubprogram(name: "is_gimple_id", scope: !3, file: !3, line: 2702, type: !2141, scopeLine: 2703, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!7414 = !DILocalVariable(name: "t", arg: 1, scope: !7413, file: !3, line: 2702, type: !666)
!7415 = !DILocation(line: 2702, column: 20, scope: !7413)
!7416 = !DILocation(line: 2704, column: 31, scope: !7413)
!7417 = !DILocation(line: 2704, column: 11, scope: !7413)
!7418 = !DILocation(line: 2705, column: 4, scope: !7413)
!7419 = !DILocation(line: 2705, column: 7, scope: !7413)
!7420 = !DILocation(line: 2705, column: 21, scope: !7413)
!7421 = !DILocation(line: 2706, column: 4, scope: !7413)
!7422 = !DILocation(line: 2706, column: 7, scope: !7413)
!7423 = !DILocation(line: 2706, column: 21, scope: !7413)
!7424 = !DILocation(line: 2707, column: 4, scope: !7413)
!7425 = !DILocation(line: 2707, column: 7, scope: !7413)
!7426 = !DILocation(line: 2707, column: 21, scope: !7413)
!7427 = !DILocation(line: 2709, column: 4, scope: !7413)
!7428 = !DILocation(line: 2709, column: 7, scope: !7413)
!7429 = !DILocation(line: 2709, column: 21, scope: !7413)
!7430 = !DILocation(line: 2704, column: 10, scope: !7413)
!7431 = !DILocation(line: 2704, column: 3, scope: !7413)
!7432 = distinct !DISubprogram(name: "handled_component_p", scope: !50, file: !50, line: 4551, type: !2681, scopeLine: 4552, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!7433 = !DILocalVariable(name: "t", arg: 1, scope: !7432, file: !50, line: 4551, type: !1784)
!7434 = !DILocation(line: 4551, column: 33, scope: !7432)
!7435 = !DILocation(line: 4553, column: 11, scope: !7432)
!7436 = !DILocation(line: 4553, column: 3, scope: !7432)
!7437 = !DILocation(line: 4562, column: 7, scope: !7438)
!7438 = distinct !DILexicalBlock(scope: !7432, file: !50, line: 4554, column: 5)
!7439 = !DILocation(line: 4565, column: 7, scope: !7438)
!7440 = !DILocation(line: 4567, column: 1, scope: !7432)
!7441 = distinct !DISubprogram(name: "is_gimple_constant", scope: !3, file: !3, line: 2487, type: !2681, scopeLine: 2488, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!7442 = !DILocalVariable(name: "t", arg: 1, scope: !7441, file: !3, line: 2487, type: !1784)
!7443 = !DILocation(line: 2487, column: 32, scope: !7441)
!7444 = !DILocation(line: 2489, column: 11, scope: !7441)
!7445 = !DILocation(line: 2489, column: 3, scope: !7441)
!7446 = !DILocation(line: 2497, column: 7, scope: !7447)
!7447 = distinct !DILexicalBlock(scope: !7441, file: !3, line: 2490, column: 5)
!7448 = !DILocation(line: 2501, column: 11, scope: !7449)
!7449 = distinct !DILexicalBlock(scope: !7447, file: !3, line: 2501, column: 11)
!7450 = !DILocation(line: 2501, column: 25, scope: !7449)
!7451 = !DILocation(line: 2501, column: 28, scope: !7449)
!7452 = !DILocation(line: 2501, column: 54, scope: !7449)
!7453 = !DILocation(line: 2501, column: 11, scope: !7447)
!7454 = !DILocation(line: 2502, column: 9, scope: !7449)
!7455 = !DILocation(line: 2502, column: 2, scope: !7449)
!7456 = !DILocation(line: 2504, column: 2, scope: !7449)
!7457 = !DILocation(line: 2507, column: 7, scope: !7447)
!7458 = !DILocation(line: 2509, column: 1, scope: !7441)
!7459 = distinct !DISubprogram(name: "is_gimple_address", scope: !3, file: !3, line: 2514, type: !2681, scopeLine: 2515, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!7460 = !DILocalVariable(name: "t", arg: 1, scope: !7459, file: !3, line: 2514, type: !1784)
!7461 = !DILocation(line: 2514, column: 31, scope: !7459)
!7462 = !DILocalVariable(name: "op", scope: !7459, file: !3, line: 2516, type: !666)
!7463 = !DILocation(line: 2516, column: 8, scope: !7459)
!7464 = !DILocation(line: 2518, column: 7, scope: !7465)
!7465 = distinct !DILexicalBlock(scope: !7459, file: !3, line: 2518, column: 7)
!7466 = !DILocation(line: 2518, column: 21, scope: !7465)
!7467 = !DILocation(line: 2518, column: 7, scope: !7459)
!7468 = !DILocation(line: 2519, column: 5, scope: !7465)
!7469 = !DILocation(line: 2521, column: 8, scope: !7459)
!7470 = !DILocation(line: 2521, column: 6, scope: !7459)
!7471 = !DILocation(line: 2522, column: 3, scope: !7459)
!7472 = !DILocation(line: 2522, column: 31, scope: !7459)
!7473 = !DILocation(line: 2522, column: 10, scope: !7459)
!7474 = !DILocation(line: 2524, column: 12, scope: !7475)
!7475 = distinct !DILexicalBlock(scope: !7476, file: !3, line: 2524, column: 11)
!7476 = distinct !DILexicalBlock(scope: !7459, file: !3, line: 2523, column: 5)
!7477 = !DILocation(line: 2524, column: 27, scope: !7475)
!7478 = !DILocation(line: 2525, column: 5, scope: !7475)
!7479 = !DILocation(line: 2525, column: 8, scope: !7475)
!7480 = !DILocation(line: 2525, column: 23, scope: !7475)
!7481 = !DILocation(line: 2526, column: 4, scope: !7475)
!7482 = !DILocation(line: 2526, column: 23, scope: !7475)
!7483 = !DILocation(line: 2526, column: 8, scope: !7475)
!7484 = !DILocation(line: 2524, column: 11, scope: !7476)
!7485 = !DILocation(line: 2527, column: 6, scope: !7475)
!7486 = !DILocation(line: 2529, column: 12, scope: !7476)
!7487 = !DILocation(line: 2529, column: 10, scope: !7476)
!7488 = distinct !{!7488, !7471, !7489}
!7489 = !DILocation(line: 2530, column: 5, scope: !7459)
!7490 = !DILocation(line: 2532, column: 7, scope: !7491)
!7491 = distinct !DILexicalBlock(scope: !7459, file: !3, line: 2532, column: 7)
!7492 = !DILocation(line: 2532, column: 29, scope: !7491)
!7493 = !DILocation(line: 2532, column: 32, scope: !7491)
!7494 = !DILocation(line: 2532, column: 7, scope: !7459)
!7495 = !DILocation(line: 2533, column: 5, scope: !7491)
!7496 = !DILocation(line: 2535, column: 11, scope: !7459)
!7497 = !DILocation(line: 2535, column: 3, scope: !7459)
!7498 = !DILocation(line: 2543, column: 7, scope: !7499)
!7499 = distinct !DILexicalBlock(scope: !7459, file: !3, line: 2536, column: 5)
!7500 = !DILocation(line: 2546, column: 7, scope: !7499)
!7501 = !DILocation(line: 2548, column: 1, scope: !7459)
!7502 = distinct !DISubprogram(name: "is_gimple_invariant_address", scope: !3, file: !3, line: 2584, type: !2681, scopeLine: 2585, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!7503 = !DILocalVariable(name: "t", arg: 1, scope: !7502, file: !3, line: 2584, type: !1784)
!7504 = !DILocation(line: 2584, column: 41, scope: !7502)
!7505 = !DILocalVariable(name: "op", scope: !7502, file: !3, line: 2586, type: !1784)
!7506 = !DILocation(line: 2586, column: 14, scope: !7502)
!7507 = !DILocation(line: 2588, column: 7, scope: !7508)
!7508 = distinct !DILexicalBlock(scope: !7502, file: !3, line: 2588, column: 7)
!7509 = !DILocation(line: 2588, column: 21, scope: !7508)
!7510 = !DILocation(line: 2588, column: 7, scope: !7502)
!7511 = !DILocation(line: 2589, column: 5, scope: !7508)
!7512 = !DILocation(line: 2591, column: 30, scope: !7502)
!7513 = !DILocation(line: 2591, column: 8, scope: !7502)
!7514 = !DILocation(line: 2591, column: 6, scope: !7502)
!7515 = !DILocation(line: 2593, column: 10, scope: !7502)
!7516 = !DILocation(line: 2593, column: 13, scope: !7502)
!7517 = !DILocation(line: 2593, column: 17, scope: !7502)
!7518 = !DILocation(line: 2593, column: 39, scope: !7502)
!7519 = !DILocation(line: 2593, column: 68, scope: !7502)
!7520 = !DILocation(line: 2593, column: 42, scope: !7502)
!7521 = !DILocation(line: 0, scope: !7502)
!7522 = !DILocation(line: 2593, column: 3, scope: !7502)
!7523 = !DILocation(line: 2594, column: 1, scope: !7502)
!7524 = distinct !DISubprogram(name: "strip_invariant_refs", scope: !3, file: !3, line: 2554, type: !7525, scopeLine: 2555, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!7525 = !DISubroutineType(types: !7526)
!7526 = !{!1784, !1784}
!7527 = !DILocalVariable(name: "op", arg: 1, scope: !7524, file: !3, line: 2554, type: !1784)
!7528 = !DILocation(line: 2554, column: 34, scope: !7524)
!7529 = !DILocation(line: 2556, column: 3, scope: !7524)
!7530 = !DILocation(line: 2556, column: 31, scope: !7524)
!7531 = !DILocation(line: 2556, column: 10, scope: !7524)
!7532 = !DILocation(line: 2558, column: 15, scope: !7533)
!7533 = distinct !DILexicalBlock(scope: !7524, file: !3, line: 2557, column: 5)
!7534 = !DILocation(line: 2558, column: 7, scope: !7533)
!7535 = !DILocation(line: 2562, column: 29, scope: !7536)
!7536 = distinct !DILexicalBlock(scope: !7537, file: !3, line: 2562, column: 8)
!7537 = distinct !DILexicalBlock(scope: !7533, file: !3, line: 2559, column: 2)
!7538 = !DILocation(line: 2562, column: 9, scope: !7536)
!7539 = !DILocation(line: 2563, column: 8, scope: !7536)
!7540 = !DILocation(line: 2563, column: 11, scope: !7536)
!7541 = !DILocation(line: 2563, column: 32, scope: !7536)
!7542 = !DILocation(line: 2564, column: 8, scope: !7536)
!7543 = !DILocation(line: 2564, column: 11, scope: !7536)
!7544 = !DILocation(line: 2564, column: 32, scope: !7536)
!7545 = !DILocation(line: 2562, column: 8, scope: !7537)
!7546 = !DILocation(line: 2565, column: 6, scope: !7536)
!7547 = !DILocation(line: 2566, column: 4, scope: !7537)
!7548 = !DILocation(line: 2569, column: 8, scope: !7549)
!7549 = distinct !DILexicalBlock(scope: !7537, file: !3, line: 2569, column: 8)
!7550 = !DILocation(line: 2569, column: 29, scope: !7549)
!7551 = !DILocation(line: 2569, column: 8, scope: !7537)
!7552 = !DILocation(line: 2570, column: 6, scope: !7549)
!7553 = !DILocation(line: 2571, column: 4, scope: !7537)
!7554 = !DILocation(line: 2574, column: 2, scope: !7537)
!7555 = !DILocation(line: 2575, column: 12, scope: !7533)
!7556 = !DILocation(line: 2575, column: 10, scope: !7533)
!7557 = distinct !{!7557, !7529, !7558}
!7558 = !DILocation(line: 2576, column: 5, scope: !7524)
!7559 = !DILocation(line: 2578, column: 10, scope: !7524)
!7560 = !DILocation(line: 2578, column: 3, scope: !7524)
!7561 = !DILocation(line: 2579, column: 1, scope: !7524)
!7562 = distinct !DISubprogram(name: "is_gimple_ip_invariant_address", scope: !3, file: !3, line: 2600, type: !2681, scopeLine: 2601, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!7563 = !DILocalVariable(name: "t", arg: 1, scope: !7562, file: !3, line: 2600, type: !1784)
!7564 = !DILocation(line: 2600, column: 44, scope: !7562)
!7565 = !DILocalVariable(name: "op", scope: !7562, file: !3, line: 2602, type: !1784)
!7566 = !DILocation(line: 2602, column: 14, scope: !7562)
!7567 = !DILocation(line: 2604, column: 7, scope: !7568)
!7568 = distinct !DILexicalBlock(scope: !7562, file: !3, line: 2604, column: 7)
!7569 = !DILocation(line: 2604, column: 21, scope: !7568)
!7570 = !DILocation(line: 2604, column: 7, scope: !7562)
!7571 = !DILocation(line: 2605, column: 5, scope: !7568)
!7572 = !DILocation(line: 2607, column: 30, scope: !7562)
!7573 = !DILocation(line: 2607, column: 8, scope: !7562)
!7574 = !DILocation(line: 2607, column: 6, scope: !7562)
!7575 = !DILocation(line: 2609, column: 10, scope: !7562)
!7576 = !DILocation(line: 2609, column: 13, scope: !7562)
!7577 = !DILocation(line: 2609, column: 17, scope: !7562)
!7578 = !DILocation(line: 2609, column: 39, scope: !7562)
!7579 = !DILocation(line: 2609, column: 71, scope: !7562)
!7580 = !DILocation(line: 2609, column: 42, scope: !7562)
!7581 = !DILocation(line: 0, scope: !7562)
!7582 = !DILocation(line: 2609, column: 3, scope: !7562)
!7583 = !DILocation(line: 2610, column: 1, scope: !7562)
!7584 = distinct !DISubprogram(name: "is_gimple_ip_invariant", scope: !3, file: !3, line: 2628, type: !2681, scopeLine: 2629, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!7585 = !DILocalVariable(name: "t", arg: 1, scope: !7584, file: !3, line: 2628, type: !1784)
!7586 = !DILocation(line: 2628, column: 36, scope: !7584)
!7587 = !DILocation(line: 2630, column: 7, scope: !7588)
!7588 = distinct !DILexicalBlock(scope: !7584, file: !3, line: 2630, column: 7)
!7589 = !DILocation(line: 2630, column: 21, scope: !7588)
!7590 = !DILocation(line: 2630, column: 7, scope: !7584)
!7591 = !DILocation(line: 2631, column: 44, scope: !7588)
!7592 = !DILocation(line: 2631, column: 12, scope: !7588)
!7593 = !DILocation(line: 2631, column: 5, scope: !7588)
!7594 = !DILocation(line: 2633, column: 30, scope: !7584)
!7595 = !DILocation(line: 2633, column: 10, scope: !7584)
!7596 = !DILocation(line: 2633, column: 3, scope: !7584)
!7597 = !DILocation(line: 2634, column: 1, scope: !7584)
!7598 = distinct !DISubprogram(name: "is_gimple_stmt", scope: !3, file: !3, line: 2639, type: !2141, scopeLine: 2640, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!7599 = !DILocalVariable(name: "t", arg: 1, scope: !7598, file: !3, line: 2639, type: !666)
!7600 = !DILocation(line: 2639, column: 22, scope: !7598)
!7601 = !DILocalVariable(name: "code", scope: !7598, file: !3, line: 2641, type: !7602)
!7602 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !82)
!7603 = !DILocation(line: 2641, column: 24, scope: !7598)
!7604 = !DILocation(line: 2641, column: 31, scope: !7598)
!7605 = !DILocation(line: 2643, column: 11, scope: !7598)
!7606 = !DILocation(line: 2643, column: 3, scope: !7598)
!7607 = !DILocation(line: 2647, column: 14, scope: !7608)
!7608 = distinct !DILexicalBlock(scope: !7598, file: !3, line: 2644, column: 5)
!7609 = !DILocation(line: 0, scope: !7608)
!7610 = !DILocation(line: 2647, column: 7, scope: !7608)
!7611 = !DILocation(line: 2652, column: 14, scope: !7608)
!7612 = !DILocation(line: 2652, column: 28, scope: !7608)
!7613 = !DILocation(line: 2652, column: 36, scope: !7608)
!7614 = !DILocation(line: 2652, column: 39, scope: !7608)
!7615 = !DILocation(line: 2652, column: 7, scope: !7608)
!7616 = !DILocation(line: 2675, column: 7, scope: !7608)
!7617 = !DILocation(line: 2681, column: 7, scope: !7608)
!7618 = !DILocation(line: 2684, column: 7, scope: !7608)
!7619 = !DILocation(line: 2686, column: 1, scope: !7598)
!7620 = distinct !DISubprogram(name: "is_gimple_variable", scope: !3, file: !3, line: 2691, type: !2141, scopeLine: 2692, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!7621 = !DILocalVariable(name: "t", arg: 1, scope: !7620, file: !3, line: 2691, type: !666)
!7622 = !DILocation(line: 2691, column: 26, scope: !7620)
!7623 = !DILocation(line: 2693, column: 11, scope: !7620)
!7624 = !DILocation(line: 2693, column: 25, scope: !7620)
!7625 = !DILocation(line: 2694, column: 4, scope: !7620)
!7626 = !DILocation(line: 2694, column: 7, scope: !7620)
!7627 = !DILocation(line: 2694, column: 21, scope: !7620)
!7628 = !DILocation(line: 2695, column: 4, scope: !7620)
!7629 = !DILocation(line: 2695, column: 7, scope: !7620)
!7630 = !DILocation(line: 2695, column: 21, scope: !7620)
!7631 = !DILocation(line: 2696, column: 4, scope: !7620)
!7632 = !DILocation(line: 2696, column: 7, scope: !7620)
!7633 = !DILocation(line: 2696, column: 21, scope: !7620)
!7634 = !DILocation(line: 2693, column: 10, scope: !7620)
!7635 = !DILocation(line: 2693, column: 3, scope: !7620)
!7636 = distinct !DISubprogram(name: "is_gimple_non_addressable", scope: !3, file: !3, line: 2770, type: !2141, scopeLine: 2771, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!7637 = !DILocalVariable(name: "t", arg: 1, scope: !7636, file: !3, line: 2770, type: !666)
!7638 = !DILocation(line: 2770, column: 33, scope: !7636)
!7639 = !DILocation(line: 2772, column: 7, scope: !7640)
!7640 = distinct !DILexicalBlock(scope: !7636, file: !3, line: 2772, column: 7)
!7641 = !DILocation(line: 2772, column: 21, scope: !7640)
!7642 = !DILocation(line: 2772, column: 7, scope: !7636)
!7643 = !DILocation(line: 2773, column: 9, scope: !7640)
!7644 = !DILocation(line: 2773, column: 7, scope: !7640)
!7645 = !DILocation(line: 2773, column: 5, scope: !7640)
!7646 = !DILocation(line: 2775, column: 31, scope: !7636)
!7647 = !DILocation(line: 2775, column: 11, scope: !7636)
!7648 = !DILocation(line: 2775, column: 34, scope: !7636)
!7649 = !DILocation(line: 2775, column: 64, scope: !7636)
!7650 = !DILocation(line: 2775, column: 39, scope: !7636)
!7651 = !DILocation(line: 2775, column: 37, scope: !7636)
!7652 = !DILocation(line: 0, scope: !7636)
!7653 = !DILocation(line: 2775, column: 10, scope: !7636)
!7654 = !DILocation(line: 2775, column: 3, scope: !7636)
!7655 = distinct !DISubprogram(name: "is_gimple_asm_val", scope: !3, file: !3, line: 2795, type: !2141, scopeLine: 2796, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!7656 = !DILocalVariable(name: "t", arg: 1, scope: !7655, file: !3, line: 2795, type: !666)
!7657 = !DILocation(line: 2795, column: 25, scope: !7655)
!7658 = !DILocation(line: 2797, column: 7, scope: !7659)
!7659 = distinct !DILexicalBlock(scope: !7655, file: !3, line: 2797, column: 7)
!7660 = !DILocation(line: 2797, column: 21, scope: !7659)
!7661 = !DILocation(line: 2797, column: 33, scope: !7659)
!7662 = !DILocation(line: 2797, column: 36, scope: !7659)
!7663 = !DILocation(line: 2797, column: 7, scope: !7655)
!7664 = !DILocation(line: 2798, column: 5, scope: !7659)
!7665 = !DILocation(line: 2800, column: 25, scope: !7655)
!7666 = !DILocation(line: 2800, column: 10, scope: !7655)
!7667 = !DILocation(line: 2800, column: 3, scope: !7655)
!7668 = !DILocation(line: 2801, column: 1, scope: !7655)
!7669 = distinct !DISubprogram(name: "is_gimple_min_lval", scope: !3, file: !3, line: 2806, type: !2141, scopeLine: 2807, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!7670 = !DILocalVariable(name: "t", arg: 1, scope: !7669, file: !3, line: 2806, type: !666)
!7671 = !DILocation(line: 2806, column: 26, scope: !7669)
!7672 = !DILocation(line: 2808, column: 13, scope: !7673)
!7673 = distinct !DILexicalBlock(scope: !7669, file: !3, line: 2808, column: 7)
!7674 = !DILocation(line: 2808, column: 11, scope: !7673)
!7675 = !DILocation(line: 2808, column: 7, scope: !7669)
!7676 = !DILocation(line: 2809, column: 5, scope: !7673)
!7677 = !DILocation(line: 2810, column: 25, scope: !7669)
!7678 = !DILocation(line: 2810, column: 11, scope: !7669)
!7679 = !DILocation(line: 2810, column: 28, scope: !7669)
!7680 = !DILocation(line: 2810, column: 31, scope: !7669)
!7681 = !DILocation(line: 2810, column: 45, scope: !7669)
!7682 = !DILocation(line: 2810, column: 10, scope: !7669)
!7683 = !DILocation(line: 2810, column: 3, scope: !7669)
!7684 = !DILocation(line: 2811, column: 1, scope: !7669)
!7685 = distinct !DISubprogram(name: "is_gimple_cast", scope: !3, file: !3, line: 2816, type: !2141, scopeLine: 2817, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!7686 = !DILocalVariable(name: "t", arg: 1, scope: !7685, file: !3, line: 2816, type: !666)
!7687 = !DILocation(line: 2816, column: 22, scope: !7685)
!7688 = !DILocation(line: 2818, column: 11, scope: !7685)
!7689 = !DILocation(line: 2819, column: 11, scope: !7685)
!7690 = !DILocation(line: 2819, column: 14, scope: !7685)
!7691 = !DILocation(line: 2819, column: 28, scope: !7685)
!7692 = !DILocation(line: 2818, column: 10, scope: !7685)
!7693 = !DILocation(line: 2818, column: 3, scope: !7685)
!7694 = distinct !DISubprogram(name: "get_call_expr_in", scope: !3, file: !3, line: 2834, type: !7695, scopeLine: 2835, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!7695 = !DISubroutineType(types: !7696)
!7696 = !{!666, !666}
!7697 = !DILocalVariable(name: "t", arg: 1, scope: !7694, file: !3, line: 2834, type: !666)
!7698 = !DILocation(line: 2834, column: 24, scope: !7694)
!7699 = !DILocation(line: 2836, column: 7, scope: !7700)
!7700 = distinct !DILexicalBlock(scope: !7694, file: !3, line: 2836, column: 7)
!7701 = !DILocation(line: 2836, column: 21, scope: !7700)
!7702 = !DILocation(line: 2836, column: 7, scope: !7694)
!7703 = !DILocation(line: 2837, column: 9, scope: !7700)
!7704 = !DILocation(line: 2837, column: 7, scope: !7700)
!7705 = !DILocation(line: 2837, column: 5, scope: !7700)
!7706 = !DILocation(line: 2838, column: 7, scope: !7707)
!7707 = distinct !DILexicalBlock(scope: !7694, file: !3, line: 2838, column: 7)
!7708 = !DILocation(line: 2838, column: 21, scope: !7707)
!7709 = !DILocation(line: 2838, column: 7, scope: !7694)
!7710 = !DILocation(line: 2839, column: 9, scope: !7707)
!7711 = !DILocation(line: 2839, column: 7, scope: !7707)
!7712 = !DILocation(line: 2839, column: 5, scope: !7707)
!7713 = !DILocation(line: 2840, column: 7, scope: !7714)
!7714 = distinct !DILexicalBlock(scope: !7694, file: !3, line: 2840, column: 7)
!7715 = !DILocation(line: 2840, column: 21, scope: !7714)
!7716 = !DILocation(line: 2840, column: 7, scope: !7694)
!7717 = !DILocation(line: 2841, column: 12, scope: !7714)
!7718 = !DILocation(line: 2841, column: 5, scope: !7714)
!7719 = !DILocation(line: 2842, column: 3, scope: !7694)
!7720 = !DILocation(line: 2843, column: 1, scope: !7694)
!7721 = distinct !DISubprogram(name: "get_base_address", scope: !3, file: !3, line: 2856, type: !7695, scopeLine: 2857, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!7722 = !DILocalVariable(name: "t", arg: 1, scope: !7721, file: !3, line: 2856, type: !666)
!7723 = !DILocation(line: 2856, column: 24, scope: !7721)
!7724 = !DILocation(line: 2858, column: 3, scope: !7721)
!7725 = !DILocation(line: 2858, column: 31, scope: !7721)
!7726 = !DILocation(line: 2858, column: 10, scope: !7721)
!7727 = !DILocation(line: 2859, column: 9, scope: !7721)
!7728 = !DILocation(line: 2859, column: 7, scope: !7721)
!7729 = distinct !{!7729, !7724, !7727}
!7730 = !DILocation(line: 2861, column: 7, scope: !7731)
!7731 = distinct !DILexicalBlock(scope: !7721, file: !3, line: 2861, column: 7)
!7732 = !DILocation(line: 2862, column: 7, scope: !7731)
!7733 = !DILocation(line: 2862, column: 10, scope: !7731)
!7734 = !DILocation(line: 2862, column: 24, scope: !7731)
!7735 = !DILocation(line: 2863, column: 7, scope: !7731)
!7736 = !DILocation(line: 2863, column: 10, scope: !7731)
!7737 = !DILocation(line: 2863, column: 24, scope: !7731)
!7738 = !DILocation(line: 2864, column: 7, scope: !7731)
!7739 = !DILocation(line: 2864, column: 10, scope: !7731)
!7740 = !DILocation(line: 2861, column: 7, scope: !7721)
!7741 = !DILocation(line: 2865, column: 12, scope: !7731)
!7742 = !DILocation(line: 2865, column: 5, scope: !7731)
!7743 = !DILocation(line: 2867, column: 5, scope: !7731)
!7744 = !DILocation(line: 2868, column: 1, scope: !7721)
!7745 = distinct !DISubprogram(name: "recalculate_side_effects", scope: !3, file: !3, line: 2871, type: !7746, scopeLine: 2872, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!7746 = !DISubroutineType(types: !7747)
!7747 = !{null, !666}
!7748 = !DILocalVariable(name: "t", arg: 1, scope: !7745, file: !3, line: 2871, type: !666)
!7749 = !DILocation(line: 2871, column: 32, scope: !7745)
!7750 = !DILocalVariable(name: "code", scope: !7745, file: !3, line: 2873, type: !82)
!7751 = !DILocation(line: 2873, column: 18, scope: !7745)
!7752 = !DILocation(line: 2873, column: 25, scope: !7745)
!7753 = !DILocalVariable(name: "len", scope: !7745, file: !3, line: 2874, type: !746)
!7754 = !DILocation(line: 2874, column: 7, scope: !7745)
!7755 = !DILocation(line: 2874, column: 13, scope: !7745)
!7756 = !DILocalVariable(name: "i", scope: !7745, file: !3, line: 2875, type: !746)
!7757 = !DILocation(line: 2875, column: 7, scope: !7745)
!7758 = !DILocation(line: 2877, column: 11, scope: !7745)
!7759 = !DILocation(line: 2877, column: 3, scope: !7745)
!7760 = !DILocation(line: 2880, column: 15, scope: !7761)
!7761 = distinct !DILexicalBlock(scope: !7745, file: !3, line: 2878, column: 5)
!7762 = !DILocation(line: 2880, column: 7, scope: !7761)
!7763 = !DILocation(line: 2891, column: 4, scope: !7764)
!7764 = distinct !DILexicalBlock(scope: !7761, file: !3, line: 2881, column: 2)
!7765 = !DILocation(line: 2894, column: 4, scope: !7764)
!7766 = !DILocation(line: 2895, column: 2, scope: !7764)
!7767 = !DILocation(line: 2903, column: 31, scope: !7761)
!7768 = !DILocation(line: 2903, column: 7, scope: !7761)
!7769 = !DILocation(line: 2903, column: 29, scope: !7761)
!7770 = !DILocation(line: 2904, column: 14, scope: !7771)
!7771 = distinct !DILexicalBlock(scope: !7761, file: !3, line: 2904, column: 7)
!7772 = !DILocation(line: 2904, column: 12, scope: !7771)
!7773 = !DILocation(line: 2904, column: 19, scope: !7774)
!7774 = distinct !DILexicalBlock(scope: !7771, file: !3, line: 2904, column: 7)
!7775 = !DILocation(line: 2904, column: 23, scope: !7774)
!7776 = !DILocation(line: 2904, column: 21, scope: !7774)
!7777 = !DILocation(line: 2904, column: 7, scope: !7771)
!7778 = !DILocalVariable(name: "op", scope: !7779, file: !3, line: 2906, type: !666)
!7779 = distinct !DILexicalBlock(scope: !7774, file: !3, line: 2905, column: 2)
!7780 = !DILocation(line: 2906, column: 9, scope: !7779)
!7781 = !DILocation(line: 2906, column: 14, scope: !7779)
!7782 = !DILocation(line: 2907, column: 8, scope: !7783)
!7783 = distinct !DILexicalBlock(scope: !7779, file: !3, line: 2907, column: 8)
!7784 = !DILocation(line: 2907, column: 11, scope: !7783)
!7785 = !DILocation(line: 2907, column: 14, scope: !7783)
!7786 = !DILocation(line: 2907, column: 8, scope: !7779)
!7787 = !DILocation(line: 2908, column: 6, scope: !7783)
!7788 = !DILocation(line: 2908, column: 28, scope: !7783)
!7789 = !DILocation(line: 2909, column: 2, scope: !7779)
!7790 = !DILocation(line: 2904, column: 28, scope: !7774)
!7791 = !DILocation(line: 2904, column: 7, scope: !7774)
!7792 = distinct !{!7792, !7777, !7793}
!7793 = !DILocation(line: 2909, column: 2, scope: !7771)
!7794 = !DILocation(line: 2910, column: 7, scope: !7761)
!7795 = !DILocation(line: 2914, column: 7, scope: !7761)
!7796 = !DILocation(line: 2917, column: 7, scope: !7761)
!7797 = !DILocation(line: 2918, column: 4, scope: !7761)
!7798 = !DILocation(line: 2919, column: 1, scope: !7745)
!7799 = distinct !DISubprogram(name: "tree_operand_length", scope: !50, file: !50, line: 5347, type: !7800, scopeLine: 5348, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!7800 = !DISubroutineType(types: !7801)
!7801 = !{!746, !1784}
!7802 = !DILocalVariable(name: "node", arg: 1, scope: !7799, file: !50, line: 5347, type: !1784)
!7803 = !DILocation(line: 5347, column: 33, scope: !7799)
!7804 = !DILocation(line: 5349, column: 7, scope: !7805)
!7805 = distinct !DILexicalBlock(scope: !7799, file: !50, line: 5349, column: 7)
!7806 = !DILocation(line: 5349, column: 7, scope: !7799)
!7807 = !DILocation(line: 5350, column: 12, scope: !7805)
!7808 = !DILocation(line: 5350, column: 5, scope: !7805)
!7809 = !DILocation(line: 5352, column: 12, scope: !7805)
!7810 = !DILocation(line: 5352, column: 5, scope: !7805)
!7811 = !DILocation(line: 5353, column: 1, scope: !7799)
!7812 = distinct !DISubprogram(name: "canonicalize_cond_expr_cond", scope: !3, file: !3, line: 2926, type: !7695, scopeLine: 2927, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!7813 = !DILocalVariable(name: "t", arg: 1, scope: !7812, file: !3, line: 2926, type: !666)
!7814 = !DILocation(line: 2926, column: 35, scope: !7812)
!7815 = !DILocation(line: 2929, column: 7, scope: !7816)
!7816 = distinct !DILexicalBlock(scope: !7812, file: !3, line: 2929, column: 7)
!7817 = !DILocation(line: 2930, column: 7, scope: !7816)
!7818 = !DILocation(line: 2930, column: 25, scope: !7816)
!7819 = !DILocation(line: 2930, column: 10, scope: !7816)
!7820 = !DILocation(line: 2929, column: 7, scope: !7812)
!7821 = !DILocation(line: 2931, column: 9, scope: !7816)
!7822 = !DILocation(line: 2931, column: 7, scope: !7816)
!7823 = !DILocation(line: 2931, column: 5, scope: !7816)
!7824 = !DILocation(line: 2934, column: 7, scope: !7825)
!7825 = distinct !DILexicalBlock(scope: !7812, file: !3, line: 2934, column: 7)
!7826 = !DILocation(line: 2935, column: 7, scope: !7825)
!7827 = !DILocation(line: 2935, column: 10, scope: !7825)
!7828 = !DILocation(line: 2935, column: 36, scope: !7825)
!7829 = !DILocation(line: 2934, column: 7, scope: !7812)
!7830 = !DILocalVariable(name: "top0", scope: !7831, file: !3, line: 2937, type: !666)
!7831 = distinct !DILexicalBlock(scope: !7825, file: !3, line: 2936, column: 5)
!7832 = !DILocation(line: 2937, column: 12, scope: !7831)
!7833 = !DILocation(line: 2937, column: 19, scope: !7831)
!7834 = !DILocation(line: 2938, column: 11, scope: !7831)
!7835 = !DILocation(line: 2938, column: 9, scope: !7831)
!7836 = !DILocation(line: 2940, column: 5, scope: !7831)
!7837 = !DILocation(line: 2942, column: 12, scope: !7838)
!7838 = distinct !DILexicalBlock(scope: !7825, file: !3, line: 2942, column: 12)
!7839 = !DILocation(line: 2942, column: 26, scope: !7838)
!7840 = !DILocation(line: 2942, column: 12, scope: !7825)
!7841 = !DILocalVariable(name: "top0", scope: !7842, file: !3, line: 2944, type: !666)
!7842 = distinct !DILexicalBlock(scope: !7838, file: !3, line: 2943, column: 5)
!7843 = !DILocation(line: 2944, column: 12, scope: !7842)
!7844 = !DILocation(line: 2944, column: 19, scope: !7842)
!7845 = !DILocation(line: 2945, column: 11, scope: !7842)
!7846 = !DILocation(line: 2945, column: 9, scope: !7842)
!7847 = !DILocation(line: 2947, column: 5, scope: !7842)
!7848 = !DILocation(line: 2949, column: 12, scope: !7849)
!7849 = distinct !DILexicalBlock(scope: !7838, file: !3, line: 2949, column: 12)
!7850 = !DILocation(line: 2949, column: 26, scope: !7849)
!7851 = !DILocation(line: 2950, column: 5, scope: !7849)
!7852 = !DILocation(line: 2950, column: 8, scope: !7849)
!7853 = !DILocation(line: 2951, column: 5, scope: !7849)
!7854 = !DILocation(line: 2951, column: 22, scope: !7849)
!7855 = !DILocation(line: 2951, column: 8, scope: !7849)
!7856 = !DILocation(line: 2952, column: 5, scope: !7849)
!7857 = !DILocation(line: 2952, column: 23, scope: !7849)
!7858 = !DILocation(line: 2952, column: 8, scope: !7849)
!7859 = !DILocation(line: 2949, column: 12, scope: !7838)
!7860 = !DILocalVariable(name: "top0", scope: !7861, file: !3, line: 2954, type: !666)
!7861 = distinct !DILexicalBlock(scope: !7849, file: !3, line: 2953, column: 5)
!7862 = !DILocation(line: 2954, column: 12, scope: !7861)
!7863 = !DILocation(line: 2954, column: 19, scope: !7861)
!7864 = !DILocation(line: 2955, column: 11, scope: !7861)
!7865 = !DILocation(line: 2955, column: 9, scope: !7861)
!7866 = !DILocation(line: 2957, column: 5, scope: !7861)
!7867 = !DILocation(line: 2959, column: 27, scope: !7868)
!7868 = distinct !DILexicalBlock(scope: !7812, file: !3, line: 2959, column: 7)
!7869 = !DILocation(line: 2959, column: 7, scope: !7868)
!7870 = !DILocation(line: 2959, column: 7, scope: !7812)
!7871 = !DILocation(line: 2960, column: 12, scope: !7868)
!7872 = !DILocation(line: 2960, column: 5, scope: !7868)
!7873 = !DILocation(line: 2962, column: 3, scope: !7812)
!7874 = !DILocation(line: 2963, column: 1, scope: !7812)
!7875 = distinct !DISubprogram(name: "truth_value_p", scope: !50, file: !50, line: 4919, type: !7876, scopeLine: 4920, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!7876 = !DISubroutineType(types: !7877)
!7877 = !{!769, !82}
!7878 = !DILocalVariable(name: "code", arg: 1, scope: !7875, file: !50, line: 4919, type: !82)
!7879 = !DILocation(line: 4919, column: 31, scope: !7875)
!7880 = !DILocation(line: 4921, column: 11, scope: !7875)
!7881 = !DILocation(line: 4921, column: 34, scope: !7875)
!7882 = !DILocation(line: 4922, column: 4, scope: !7875)
!7883 = !DILocation(line: 4922, column: 7, scope: !7875)
!7884 = !DILocation(line: 4922, column: 12, scope: !7875)
!7885 = !DILocation(line: 4922, column: 30, scope: !7875)
!7886 = !DILocation(line: 4922, column: 33, scope: !7875)
!7887 = !DILocation(line: 4922, column: 38, scope: !7875)
!7888 = !DILocation(line: 4923, column: 4, scope: !7875)
!7889 = !DILocation(line: 4923, column: 7, scope: !7875)
!7890 = !DILocation(line: 4923, column: 12, scope: !7875)
!7891 = !DILocation(line: 4923, column: 29, scope: !7875)
!7892 = !DILocation(line: 4923, column: 32, scope: !7875)
!7893 = !DILocation(line: 4923, column: 37, scope: !7875)
!7894 = !DILocation(line: 4924, column: 4, scope: !7875)
!7895 = !DILocation(line: 4924, column: 7, scope: !7875)
!7896 = !DILocation(line: 4924, column: 12, scope: !7875)
!7897 = !DILocation(line: 4924, column: 30, scope: !7875)
!7898 = !DILocation(line: 4924, column: 33, scope: !7875)
!7899 = !DILocation(line: 4924, column: 38, scope: !7875)
!7900 = !DILocation(line: 4921, column: 10, scope: !7875)
!7901 = !DILocation(line: 4921, column: 3, scope: !7875)
!7902 = distinct !DISubprogram(name: "gimple_call_copy_skip_args", scope: !3, file: !3, line: 2969, type: !7903, scopeLine: 2970, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!7903 = !DISubroutineType(types: !7904)
!7904 = !{!594, !594, !1041}
!7905 = !DILocalVariable(name: "stmt", arg: 1, scope: !7902, file: !3, line: 2969, type: !594)
!7906 = !DILocation(line: 2969, column: 36, scope: !7902)
!7907 = !DILocalVariable(name: "args_to_skip", arg: 2, scope: !7902, file: !3, line: 2969, type: !1041)
!7908 = !DILocation(line: 2969, column: 49, scope: !7902)
!7909 = !DILocalVariable(name: "i", scope: !7902, file: !3, line: 2971, type: !746)
!7910 = !DILocation(line: 2971, column: 7, scope: !7902)
!7911 = !DILocalVariable(name: "fn", scope: !7902, file: !3, line: 2972, type: !666)
!7912 = !DILocation(line: 2972, column: 8, scope: !7902)
!7913 = !DILocation(line: 2972, column: 29, scope: !7902)
!7914 = !DILocation(line: 2972, column: 13, scope: !7902)
!7915 = !DILocalVariable(name: "nargs", scope: !7902, file: !3, line: 2973, type: !746)
!7916 = !DILocation(line: 2973, column: 7, scope: !7902)
!7917 = !DILocation(line: 2973, column: 37, scope: !7902)
!7918 = !DILocation(line: 2973, column: 15, scope: !7902)
!7919 = !DILocalVariable(name: "vargs", scope: !7902, file: !3, line: 2974, type: !1779)
!7920 = !DILocation(line: 2974, column: 20, scope: !7902)
!7921 = !DILocation(line: 2974, column: 28, scope: !7902)
!7922 = !DILocalVariable(name: "new_stmt", scope: !7902, file: !3, line: 2975, type: !594)
!7923 = !DILocation(line: 2975, column: 10, scope: !7902)
!7924 = !DILocation(line: 2977, column: 10, scope: !7925)
!7925 = distinct !DILexicalBlock(scope: !7902, file: !3, line: 2977, column: 3)
!7926 = !DILocation(line: 2977, column: 8, scope: !7925)
!7927 = !DILocation(line: 2977, column: 15, scope: !7928)
!7928 = distinct !DILexicalBlock(scope: !7925, file: !3, line: 2977, column: 3)
!7929 = !DILocation(line: 2977, column: 19, scope: !7928)
!7930 = !DILocation(line: 2977, column: 17, scope: !7928)
!7931 = !DILocation(line: 2977, column: 3, scope: !7925)
!7932 = !DILocation(line: 2978, column: 24, scope: !7933)
!7933 = distinct !DILexicalBlock(scope: !7928, file: !3, line: 2978, column: 9)
!7934 = !DILocation(line: 2978, column: 38, scope: !7933)
!7935 = !DILocation(line: 2978, column: 10, scope: !7933)
!7936 = !DILocation(line: 2978, column: 9, scope: !7928)
!7937 = !DILocation(line: 2979, column: 7, scope: !7933)
!7938 = !DILocation(line: 2978, column: 39, scope: !7933)
!7939 = !DILocation(line: 2977, column: 27, scope: !7928)
!7940 = !DILocation(line: 2977, column: 3, scope: !7928)
!7941 = distinct !{!7941, !7931, !7942}
!7942 = !DILocation(line: 2979, column: 7, scope: !7925)
!7943 = !DILocation(line: 2981, column: 37, scope: !7902)
!7944 = !DILocation(line: 2981, column: 41, scope: !7902)
!7945 = !DILocation(line: 2981, column: 14, scope: !7902)
!7946 = !DILocation(line: 2981, column: 12, scope: !7902)
!7947 = !DILocation(line: 2982, column: 3, scope: !7902)
!7948 = !DILocation(line: 2983, column: 24, scope: !7949)
!7949 = distinct !DILexicalBlock(scope: !7902, file: !3, line: 2983, column: 7)
!7950 = !DILocation(line: 2983, column: 7, scope: !7949)
!7951 = !DILocation(line: 2983, column: 7, scope: !7902)
!7952 = !DILocation(line: 2984, column: 26, scope: !7949)
!7953 = !DILocation(line: 2984, column: 53, scope: !7949)
!7954 = !DILocation(line: 2984, column: 36, scope: !7949)
!7955 = !DILocation(line: 2984, column: 5, scope: !7949)
!7956 = !DILocation(line: 2986, column: 20, scope: !7902)
!7957 = !DILocation(line: 2986, column: 43, scope: !7902)
!7958 = !DILocation(line: 2986, column: 30, scope: !7902)
!7959 = !DILocation(line: 2986, column: 3, scope: !7902)
!7960 = !DILocation(line: 2987, column: 20, scope: !7902)
!7961 = !DILocation(line: 2987, column: 43, scope: !7902)
!7962 = !DILocation(line: 2987, column: 30, scope: !7902)
!7963 = !DILocation(line: 2987, column: 3, scope: !7902)
!7964 = !DILocation(line: 2989, column: 21, scope: !7902)
!7965 = !DILocation(line: 2989, column: 45, scope: !7902)
!7966 = !DILocation(line: 2989, column: 31, scope: !7902)
!7967 = !DILocation(line: 2989, column: 3, scope: !7902)
!7968 = !DILocation(line: 2990, column: 28, scope: !7969)
!7969 = distinct !DILexicalBlock(scope: !7902, file: !3, line: 2990, column: 7)
!7970 = !DILocation(line: 2990, column: 7, scope: !7969)
!7971 = !DILocation(line: 2990, column: 7, scope: !7902)
!7972 = !DILocation(line: 2991, column: 26, scope: !7969)
!7973 = !DILocation(line: 2991, column: 53, scope: !7969)
!7974 = !DILocation(line: 2991, column: 36, scope: !7969)
!7975 = !DILocation(line: 2991, column: 5, scope: !7969)
!7976 = !DILocation(line: 2994, column: 26, scope: !7902)
!7977 = !DILocation(line: 2994, column: 55, scope: !7902)
!7978 = !DILocation(line: 2994, column: 36, scope: !7902)
!7979 = !DILocation(line: 2994, column: 3, scope: !7902)
!7980 = !DILocation(line: 2995, column: 25, scope: !7902)
!7981 = !DILocation(line: 2995, column: 55, scope: !7902)
!7982 = !DILocation(line: 2995, column: 35, scope: !7902)
!7983 = !DILocation(line: 2995, column: 3, scope: !7902)
!7984 = !DILocation(line: 2996, column: 34, scope: !7902)
!7985 = !DILocation(line: 2996, column: 73, scope: !7902)
!7986 = !DILocation(line: 2996, column: 44, scope: !7902)
!7987 = !DILocation(line: 2996, column: 3, scope: !7902)
!7988 = !DILocation(line: 2997, column: 36, scope: !7902)
!7989 = !DILocation(line: 2997, column: 77, scope: !7902)
!7990 = !DILocation(line: 2997, column: 46, scope: !7902)
!7991 = !DILocation(line: 2997, column: 3, scope: !7902)
!7992 = !DILocation(line: 2998, column: 31, scope: !7902)
!7993 = !DILocation(line: 2998, column: 67, scope: !7902)
!7994 = !DILocation(line: 2998, column: 41, scope: !7902)
!7995 = !DILocation(line: 2998, column: 3, scope: !7902)
!7996 = !DILocation(line: 2999, column: 32, scope: !7902)
!7997 = !DILocation(line: 2999, column: 69, scope: !7902)
!7998 = !DILocation(line: 2999, column: 42, scope: !7902)
!7999 = !DILocation(line: 2999, column: 3, scope: !7902)
!8000 = !DILocation(line: 3001, column: 24, scope: !7902)
!8001 = !DILocation(line: 3001, column: 3, scope: !7902)
!8002 = !DILocation(line: 3003, column: 10, scope: !7902)
!8003 = !DILocation(line: 3003, column: 3, scope: !7902)
!8004 = distinct !DISubprogram(name: "VEC_tree_heap_alloc", scope: !50, file: !50, line: 184, type: !8005, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!8005 = !DISubroutineType(types: !8006)
!8006 = !{!1779, !746}
!8007 = !DILocalVariable(name: "alloc_", arg: 1, scope: !8004, file: !50, line: 184, type: !746)
!8008 = !DILocation(line: 184, column: 1, scope: !8004)
!8009 = distinct !DISubprogram(name: "VEC_tree_base_quick_push", scope: !50, file: !50, line: 182, type: !8010, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!8010 = !DISubroutineType(types: !8011)
!8011 = !{!1127, !8012, !666}
!8012 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1022, size: 64)
!8013 = !DILocalVariable(name: "vec_", arg: 1, scope: !8009, file: !50, line: 182, type: !8012)
!8014 = !DILocation(line: 182, column: 1, scope: !8009)
!8015 = !DILocalVariable(name: "obj_", arg: 2, scope: !8009, file: !50, line: 182, type: !666)
!8016 = !DILocalVariable(name: "slot_", scope: !8009, file: !50, line: 182, type: !1127)
!8017 = distinct !DISubprogram(name: "VEC_tree_heap_free", scope: !50, file: !50, line: 184, type: !8018, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!8018 = !DISubroutineType(types: !8019)
!8019 = !{null, !8020}
!8020 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1779, size: 64)
!8021 = !DILocalVariable(name: "vec_", arg: 1, scope: !8017, file: !50, line: 184, type: !8020)
!8022 = !DILocation(line: 184, column: 1, scope: !8017)
!8023 = !DILocation(line: 184, column: 1, scope: !8024)
!8024 = distinct !DILexicalBlock(scope: !8017, file: !50, line: 184, column: 1)
!8025 = distinct !DISubprogram(name: "gimple_call_chain", scope: !6, file: !6, line: 1983, type: !3515, scopeLine: 1984, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!8026 = !DILocalVariable(name: "gs", arg: 1, scope: !8025, file: !6, line: 1983, type: !3517)
!8027 = !DILocation(line: 1983, column: 33, scope: !8025)
!8028 = !DILocation(line: 1986, column: 21, scope: !8025)
!8029 = !DILocation(line: 1986, column: 10, scope: !8025)
!8030 = !DILocation(line: 1986, column: 3, scope: !8025)
!8031 = distinct !DISubprogram(name: "gimple_call_tail_p", scope: !6, file: !6, line: 2071, type: !4338, scopeLine: 2072, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!8032 = !DILocalVariable(name: "s", arg: 1, scope: !8031, file: !6, line: 2071, type: !594)
!8033 = !DILocation(line: 2071, column: 28, scope: !8031)
!8034 = !DILocation(line: 2074, column: 11, scope: !8031)
!8035 = !DILocation(line: 2074, column: 14, scope: !8031)
!8036 = !DILocation(line: 2074, column: 21, scope: !8031)
!8037 = !DILocation(line: 2074, column: 29, scope: !8031)
!8038 = !DILocation(line: 2074, column: 49, scope: !8031)
!8039 = !DILocation(line: 2074, column: 10, scope: !8031)
!8040 = !DILocation(line: 2074, column: 3, scope: !8031)
!8041 = distinct !DISubprogram(name: "gimple_call_cannot_inline_p", scope: !6, file: !6, line: 2094, type: !4338, scopeLine: 2095, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!8042 = !DILocalVariable(name: "s", arg: 1, scope: !8041, file: !6, line: 2094, type: !594)
!8043 = !DILocation(line: 2094, column: 37, scope: !8041)
!8044 = !DILocation(line: 2097, column: 11, scope: !8041)
!8045 = !DILocation(line: 2097, column: 14, scope: !8041)
!8046 = !DILocation(line: 2097, column: 21, scope: !8041)
!8047 = !DILocation(line: 2097, column: 29, scope: !8041)
!8048 = !DILocation(line: 2097, column: 54, scope: !8041)
!8049 = !DILocation(line: 2097, column: 10, scope: !8041)
!8050 = !DILocation(line: 2097, column: 3, scope: !8041)
!8051 = distinct !DISubprogram(name: "gimple_call_return_slot_opt_p", scope: !6, file: !6, line: 2119, type: !4338, scopeLine: 2120, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!8052 = !DILocalVariable(name: "s", arg: 1, scope: !8051, file: !6, line: 2119, type: !594)
!8053 = !DILocation(line: 2119, column: 39, scope: !8051)
!8054 = !DILocation(line: 2122, column: 11, scope: !8051)
!8055 = !DILocation(line: 2122, column: 14, scope: !8051)
!8056 = !DILocation(line: 2122, column: 21, scope: !8051)
!8057 = !DILocation(line: 2122, column: 29, scope: !8051)
!8058 = !DILocation(line: 2122, column: 56, scope: !8051)
!8059 = !DILocation(line: 2122, column: 10, scope: !8051)
!8060 = !DILocation(line: 2122, column: 3, scope: !8051)
!8061 = distinct !DISubprogram(name: "gimple_call_from_thunk_p", scope: !6, file: !6, line: 2143, type: !4338, scopeLine: 2144, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!8062 = !DILocalVariable(name: "s", arg: 1, scope: !8061, file: !6, line: 2143, type: !594)
!8063 = !DILocation(line: 2143, column: 34, scope: !8061)
!8064 = !DILocation(line: 2146, column: 11, scope: !8061)
!8065 = !DILocation(line: 2146, column: 14, scope: !8061)
!8066 = !DILocation(line: 2146, column: 21, scope: !8061)
!8067 = !DILocation(line: 2146, column: 29, scope: !8061)
!8068 = !DILocation(line: 2146, column: 51, scope: !8061)
!8069 = !DILocation(line: 2146, column: 10, scope: !8061)
!8070 = !DILocation(line: 2146, column: 3, scope: !8061)
!8071 = distinct !DISubprogram(name: "gimple_call_va_arg_pack_p", scope: !6, file: !6, line: 2168, type: !4338, scopeLine: 2169, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!8072 = !DILocalVariable(name: "s", arg: 1, scope: !8071, file: !6, line: 2168, type: !594)
!8073 = !DILocation(line: 2168, column: 35, scope: !8071)
!8074 = !DILocation(line: 2171, column: 11, scope: !8071)
!8075 = !DILocation(line: 2171, column: 14, scope: !8071)
!8076 = !DILocation(line: 2171, column: 21, scope: !8071)
!8077 = !DILocation(line: 2171, column: 29, scope: !8071)
!8078 = !DILocation(line: 2171, column: 52, scope: !8071)
!8079 = !DILocation(line: 2171, column: 10, scope: !8071)
!8080 = !DILocation(line: 2171, column: 3, scope: !8071)
!8081 = distinct !DISubprogram(name: "compare_field_offset", scope: !3, file: !3, line: 3130, type: !8082, scopeLine: 3131, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!8082 = !DISubroutineType(types: !8083)
!8083 = !{!769, !666, !666}
!8084 = !DILocalVariable(name: "f1", arg: 1, scope: !8081, file: !3, line: 3130, type: !666)
!8085 = !DILocation(line: 3130, column: 28, scope: !8081)
!8086 = !DILocalVariable(name: "f2", arg: 2, scope: !8081, file: !3, line: 3130, type: !666)
!8087 = !DILocation(line: 3130, column: 37, scope: !8081)
!8088 = !DILocation(line: 3132, column: 7, scope: !8089)
!8089 = distinct !DILexicalBlock(scope: !8081, file: !3, line: 3132, column: 7)
!8090 = !DILocation(line: 3132, column: 33, scope: !8089)
!8091 = !DILocation(line: 3132, column: 30, scope: !8089)
!8092 = !DILocation(line: 3132, column: 7, scope: !8081)
!8093 = !DILocation(line: 3133, column: 30, scope: !8089)
!8094 = !DILocation(line: 3134, column: 9, scope: !8089)
!8095 = !DILocation(line: 3133, column: 13, scope: !8089)
!8096 = !DILocation(line: 3135, column: 6, scope: !8089)
!8097 = !DILocation(line: 3135, column: 29, scope: !8089)
!8098 = !DILocation(line: 3136, column: 8, scope: !8089)
!8099 = !DILocation(line: 3135, column: 9, scope: !8089)
!8100 = !DILocation(line: 0, scope: !8089)
!8101 = !DILocation(line: 3133, column: 12, scope: !8089)
!8102 = !DILocation(line: 3133, column: 5, scope: !8089)
!8103 = !DILocation(line: 3141, column: 22, scope: !8104)
!8104 = distinct !DILexicalBlock(scope: !8081, file: !3, line: 3141, column: 7)
!8105 = !DILocation(line: 3141, column: 7, scope: !8104)
!8106 = !DILocation(line: 3142, column: 7, scope: !8104)
!8107 = !DILocation(line: 3142, column: 25, scope: !8104)
!8108 = !DILocation(line: 3142, column: 10, scope: !8104)
!8109 = !DILocation(line: 3141, column: 7, scope: !8081)
!8110 = !DILocalVariable(name: "byte_offset1", scope: !8111, file: !3, line: 3144, type: !719)
!8111 = distinct !DILexicalBlock(scope: !8104, file: !3, line: 3143, column: 5)
!8112 = !DILocation(line: 3144, column: 30, scope: !8111)
!8113 = !DILocalVariable(name: "byte_offset2", scope: !8111, file: !3, line: 3144, type: !719)
!8114 = !DILocation(line: 3144, column: 44, scope: !8111)
!8115 = !DILocalVariable(name: "bit_offset1", scope: !8111, file: !3, line: 3145, type: !719)
!8116 = !DILocation(line: 3145, column: 30, scope: !8111)
!8117 = !DILocalVariable(name: "bit_offset2", scope: !8111, file: !3, line: 3145, type: !719)
!8118 = !DILocation(line: 3145, column: 43, scope: !8111)
!8119 = !DILocation(line: 3146, column: 21, scope: !8111)
!8120 = !DILocation(line: 3146, column: 19, scope: !8111)
!8121 = !DILocation(line: 3147, column: 23, scope: !8111)
!8122 = !DILocation(line: 3148, column: 11, scope: !8111)
!8123 = !DILocation(line: 3148, column: 23, scope: !8111)
!8124 = !DILocation(line: 3148, column: 9, scope: !8111)
!8125 = !DILocation(line: 3147, column: 20, scope: !8111)
!8126 = !DILocation(line: 3149, column: 21, scope: !8111)
!8127 = !DILocation(line: 3149, column: 19, scope: !8111)
!8128 = !DILocation(line: 3150, column: 23, scope: !8111)
!8129 = !DILocation(line: 3151, column: 11, scope: !8111)
!8130 = !DILocation(line: 3151, column: 23, scope: !8111)
!8131 = !DILocation(line: 3151, column: 9, scope: !8111)
!8132 = !DILocation(line: 3150, column: 20, scope: !8111)
!8133 = !DILocation(line: 3152, column: 11, scope: !8134)
!8134 = distinct !DILexicalBlock(scope: !8111, file: !3, line: 3152, column: 11)
!8135 = !DILocation(line: 3152, column: 27, scope: !8134)
!8136 = !DILocation(line: 3152, column: 24, scope: !8134)
!8137 = !DILocation(line: 3152, column: 11, scope: !8111)
!8138 = !DILocation(line: 3153, column: 2, scope: !8134)
!8139 = !DILocation(line: 3154, column: 14, scope: !8111)
!8140 = !DILocation(line: 3154, column: 26, scope: !8111)
!8141 = !DILocation(line: 3154, column: 45, scope: !8111)
!8142 = !DILocation(line: 3154, column: 57, scope: !8111)
!8143 = !DILocation(line: 3154, column: 42, scope: !8111)
!8144 = !DILocation(line: 3154, column: 7, scope: !8111)
!8145 = !DILocation(line: 3157, column: 3, scope: !8081)
!8146 = !DILocation(line: 3158, column: 1, scope: !8081)
!8147 = distinct !DISubprogram(name: "gimple_register_type", scope: !3, file: !3, line: 3815, type: !7695, scopeLine: 3816, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!8148 = !DILocalVariable(name: "t", arg: 1, scope: !8147, file: !3, line: 3815, type: !666)
!8149 = !DILocation(line: 3815, column: 28, scope: !8147)
!8150 = !DILocalVariable(name: "slot", scope: !8147, file: !3, line: 3817, type: !976)
!8151 = !DILocation(line: 3817, column: 10, scope: !8147)
!8152 = !DILocation(line: 3819, column: 3, scope: !8147)
!8153 = !DILocation(line: 3824, column: 7, scope: !8154)
!8154 = distinct !DILexicalBlock(scope: !8147, file: !3, line: 3824, column: 7)
!8155 = !DILocation(line: 3824, column: 32, scope: !8154)
!8156 = !DILocation(line: 3824, column: 29, scope: !8154)
!8157 = !DILocation(line: 3824, column: 7, scope: !8147)
!8158 = !DILocation(line: 3825, column: 27, scope: !8154)
!8159 = !DILocation(line: 3825, column: 5, scope: !8154)
!8160 = !DILocation(line: 3827, column: 7, scope: !8161)
!8161 = distinct !DILexicalBlock(scope: !8147, file: !3, line: 3827, column: 7)
!8162 = !DILocation(line: 3827, column: 20, scope: !8161)
!8163 = !DILocation(line: 3827, column: 7, scope: !8147)
!8164 = !DILocation(line: 3828, column: 20, scope: !8161)
!8165 = !DILocation(line: 3828, column: 18, scope: !8161)
!8166 = !DILocation(line: 3828, column: 5, scope: !8161)
!8167 = !DILocation(line: 3830, column: 26, scope: !8147)
!8168 = !DILocation(line: 3830, column: 40, scope: !8147)
!8169 = !DILocation(line: 3830, column: 10, scope: !8147)
!8170 = !DILocation(line: 3830, column: 8, scope: !8147)
!8171 = !DILocation(line: 3831, column: 8, scope: !8172)
!8172 = distinct !DILexicalBlock(scope: !8147, file: !3, line: 3831, column: 7)
!8173 = !DILocation(line: 3831, column: 7, scope: !8172)
!8174 = !DILocation(line: 3832, column: 7, scope: !8172)
!8175 = !DILocation(line: 3832, column: 19, scope: !8172)
!8176 = !DILocation(line: 3832, column: 10, scope: !8172)
!8177 = !DILocation(line: 3832, column: 27, scope: !8172)
!8178 = !DILocation(line: 3832, column: 24, scope: !8172)
!8179 = !DILocation(line: 3831, column: 7, scope: !8147)
!8180 = !DILocalVariable(name: "new_type", scope: !8181, file: !3, line: 3834, type: !666)
!8181 = distinct !DILexicalBlock(scope: !8172, file: !3, line: 3833, column: 5)
!8182 = !DILocation(line: 3834, column: 12, scope: !8181)
!8183 = !DILocation(line: 3834, column: 41, scope: !8181)
!8184 = !DILocation(line: 3834, column: 30, scope: !8181)
!8185 = !DILocation(line: 3837, column: 7, scope: !8181)
!8186 = !DILocation(line: 3842, column: 11, scope: !8187)
!8187 = distinct !DILexicalBlock(scope: !8181, file: !3, line: 3842, column: 11)
!8188 = !DILocation(line: 3842, column: 16, scope: !8187)
!8189 = !DILocation(line: 3842, column: 13, scope: !8187)
!8190 = !DILocation(line: 3842, column: 11, scope: !8181)
!8191 = !DILocalVariable(name: "tem", scope: !8192, file: !3, line: 3844, type: !666)
!8192 = distinct !DILexicalBlock(scope: !8187, file: !3, line: 3843, column: 2)
!8193 = !DILocation(line: 3844, column: 9, scope: !8192)
!8194 = !DILocation(line: 3844, column: 15, scope: !8192)
!8195 = !DILocation(line: 3845, column: 4, scope: !8192)
!8196 = !DILocation(line: 3845, column: 11, scope: !8192)
!8197 = !DILocation(line: 3845, column: 15, scope: !8192)
!8198 = !DILocation(line: 3845, column: 18, scope: !8192)
!8199 = !DILocation(line: 3845, column: 45, scope: !8192)
!8200 = !DILocation(line: 3845, column: 42, scope: !8192)
!8201 = !DILocation(line: 0, scope: !8192)
!8202 = !DILocation(line: 3846, column: 12, scope: !8192)
!8203 = !DILocation(line: 3846, column: 10, scope: !8192)
!8204 = distinct !{!8204, !8195, !8202}
!8205 = !DILocation(line: 3847, column: 8, scope: !8206)
!8206 = distinct !DILexicalBlock(scope: !8192, file: !3, line: 3847, column: 8)
!8207 = !DILocation(line: 3847, column: 8, scope: !8192)
!8208 = !DILocation(line: 3848, column: 32, scope: !8206)
!8209 = !DILocation(line: 3848, column: 6, scope: !8206)
!8210 = !DILocation(line: 3848, column: 30, scope: !8206)
!8211 = !DILocation(line: 3849, column: 4, scope: !8192)
!8212 = !DILocation(line: 3849, column: 26, scope: !8192)
!8213 = !DILocation(line: 3850, column: 2, scope: !8192)
!8214 = !DILocation(line: 3855, column: 11, scope: !8215)
!8215 = distinct !DILexicalBlock(scope: !8181, file: !3, line: 3855, column: 11)
!8216 = !DILocation(line: 3855, column: 25, scope: !8215)
!8217 = !DILocation(line: 3855, column: 11, scope: !8181)
!8218 = !DILocation(line: 3857, column: 8, scope: !8219)
!8219 = distinct !DILexicalBlock(scope: !8220, file: !3, line: 3857, column: 8)
!8220 = distinct !DILexicalBlock(scope: !8215, file: !3, line: 3856, column: 2)
!8221 = !DILocation(line: 3857, column: 43, scope: !8219)
!8222 = !DILocation(line: 3857, column: 40, scope: !8219)
!8223 = !DILocation(line: 3857, column: 8, scope: !8220)
!8224 = !DILocation(line: 3858, column: 40, scope: !8219)
!8225 = !DILocation(line: 3858, column: 6, scope: !8219)
!8226 = !DILocation(line: 3858, column: 38, scope: !8219)
!8227 = !DILocalVariable(name: "tem", scope: !8228, file: !3, line: 3861, type: !666)
!8228 = distinct !DILexicalBlock(scope: !8219, file: !3, line: 3860, column: 6)
!8229 = !DILocation(line: 3861, column: 13, scope: !8228)
!8230 = !DILocation(line: 3861, column: 19, scope: !8228)
!8231 = !DILocation(line: 3862, column: 8, scope: !8228)
!8232 = !DILocation(line: 3862, column: 15, scope: !8228)
!8233 = !DILocation(line: 3862, column: 19, scope: !8228)
!8234 = !DILocation(line: 3862, column: 22, scope: !8228)
!8235 = !DILocation(line: 3862, column: 48, scope: !8228)
!8236 = !DILocation(line: 3862, column: 45, scope: !8228)
!8237 = !DILocation(line: 0, scope: !8228)
!8238 = !DILocation(line: 3863, column: 9, scope: !8228)
!8239 = !DILocation(line: 3863, column: 7, scope: !8228)
!8240 = distinct !{!8240, !8231, !8238}
!8241 = !DILocation(line: 3864, column: 12, scope: !8242)
!8242 = distinct !DILexicalBlock(scope: !8228, file: !3, line: 3864, column: 12)
!8243 = !DILocation(line: 3864, column: 12, scope: !8228)
!8244 = !DILocation(line: 3865, column: 28, scope: !8242)
!8245 = !DILocation(line: 3865, column: 3, scope: !8242)
!8246 = !DILocation(line: 3865, column: 26, scope: !8242)
!8247 = !DILocation(line: 3867, column: 4, scope: !8220)
!8248 = !DILocation(line: 3867, column: 25, scope: !8220)
!8249 = !DILocation(line: 3868, column: 2, scope: !8220)
!8250 = !DILocation(line: 3869, column: 16, scope: !8251)
!8251 = distinct !DILexicalBlock(scope: !8215, file: !3, line: 3869, column: 16)
!8252 = !DILocation(line: 3869, column: 30, scope: !8251)
!8253 = !DILocation(line: 3869, column: 16, scope: !8215)
!8254 = !DILocation(line: 3871, column: 8, scope: !8255)
!8255 = distinct !DILexicalBlock(scope: !8256, file: !3, line: 3871, column: 8)
!8256 = distinct !DILexicalBlock(scope: !8251, file: !3, line: 3870, column: 2)
!8257 = !DILocation(line: 3871, column: 45, scope: !8255)
!8258 = !DILocation(line: 3871, column: 42, scope: !8255)
!8259 = !DILocation(line: 3871, column: 8, scope: !8256)
!8260 = !DILocation(line: 3872, column: 42, scope: !8255)
!8261 = !DILocation(line: 3872, column: 6, scope: !8255)
!8262 = !DILocation(line: 3872, column: 40, scope: !8255)
!8263 = !DILocalVariable(name: "tem", scope: !8264, file: !3, line: 3875, type: !666)
!8264 = distinct !DILexicalBlock(scope: !8255, file: !3, line: 3874, column: 6)
!8265 = !DILocation(line: 3875, column: 13, scope: !8264)
!8266 = !DILocation(line: 3875, column: 19, scope: !8264)
!8267 = !DILocation(line: 3876, column: 8, scope: !8264)
!8268 = !DILocation(line: 3876, column: 15, scope: !8264)
!8269 = !DILocation(line: 3876, column: 19, scope: !8264)
!8270 = !DILocation(line: 3876, column: 22, scope: !8264)
!8271 = !DILocation(line: 3876, column: 48, scope: !8264)
!8272 = !DILocation(line: 3876, column: 45, scope: !8264)
!8273 = !DILocation(line: 0, scope: !8264)
!8274 = !DILocation(line: 3877, column: 9, scope: !8264)
!8275 = !DILocation(line: 3877, column: 7, scope: !8264)
!8276 = distinct !{!8276, !8267, !8274}
!8277 = !DILocation(line: 3878, column: 12, scope: !8278)
!8278 = distinct !DILexicalBlock(scope: !8264, file: !3, line: 3878, column: 12)
!8279 = !DILocation(line: 3878, column: 12, scope: !8264)
!8280 = !DILocation(line: 3879, column: 28, scope: !8278)
!8281 = !DILocation(line: 3879, column: 3, scope: !8278)
!8282 = !DILocation(line: 3879, column: 26, scope: !8278)
!8283 = !DILocation(line: 3881, column: 4, scope: !8256)
!8284 = !DILocation(line: 3881, column: 25, scope: !8256)
!8285 = !DILocation(line: 3882, column: 2, scope: !8256)
!8286 = !DILocation(line: 3884, column: 11, scope: !8181)
!8287 = !DILocation(line: 3884, column: 9, scope: !8181)
!8288 = !DILocation(line: 3885, column: 5, scope: !8181)
!8289 = !DILocation(line: 3887, column: 22, scope: !8172)
!8290 = !DILocation(line: 3887, column: 13, scope: !8172)
!8291 = !DILocation(line: 3887, column: 6, scope: !8172)
!8292 = !DILocation(line: 3887, column: 11, scope: !8172)
!8293 = !DILocation(line: 3889, column: 10, scope: !8147)
!8294 = !DILocation(line: 3889, column: 3, scope: !8147)
!8295 = distinct !DISubprogram(name: "gimple_type_hash", scope: !3, file: !3, line: 3769, type: !960, scopeLine: 3770, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!8296 = !DILocalVariable(name: "p", arg: 1, scope: !8295, file: !3, line: 3769, type: !963)
!8297 = !DILocation(line: 3769, column: 31, scope: !8295)
!8298 = !DILocalVariable(name: "t", scope: !8295, file: !3, line: 3771, type: !1784)
!8299 = !DILocation(line: 3771, column: 14, scope: !8295)
!8300 = !DILocation(line: 3771, column: 31, scope: !8295)
!8301 = !DILocation(line: 3771, column: 18, scope: !8295)
!8302 = !DILocalVariable(name: "sccstack", scope: !8295, file: !3, line: 3772, type: !1779)
!8303 = !DILocation(line: 3772, column: 20, scope: !8295)
!8304 = !DILocalVariable(name: "sccstate", scope: !8295, file: !3, line: 3773, type: !1102)
!8305 = !DILocation(line: 3773, column: 25, scope: !8295)
!8306 = !DILocalVariable(name: "sccstate_obstack", scope: !8295, file: !3, line: 3774, type: !1068)
!8307 = !DILocation(line: 3774, column: 18, scope: !8295)
!8308 = !DILocalVariable(name: "val", scope: !8295, file: !3, line: 3775, type: !962)
!8309 = !DILocation(line: 3775, column: 13, scope: !8295)
!8310 = !DILocalVariable(name: "slot", scope: !8295, file: !3, line: 3776, type: !976)
!8311 = !DILocation(line: 3776, column: 10, scope: !8295)
!8312 = !DILocation(line: 3778, column: 7, scope: !8313)
!8313 = distinct !DILexicalBlock(scope: !8295, file: !3, line: 3778, column: 7)
!8314 = !DILocation(line: 3778, column: 23, scope: !8313)
!8315 = !DILocation(line: 3778, column: 7, scope: !8295)
!8316 = !DILocation(line: 3779, column: 23, scope: !8313)
!8317 = !DILocation(line: 3779, column: 21, scope: !8313)
!8318 = !DILocation(line: 3779, column: 5, scope: !8313)
!8319 = !DILocation(line: 3781, column: 37, scope: !8320)
!8320 = distinct !DILexicalBlock(scope: !8295, file: !3, line: 3781, column: 7)
!8321 = !DILocation(line: 3781, column: 54, scope: !8320)
!8322 = !DILocation(line: 3781, column: 15, scope: !8320)
!8323 = !DILocation(line: 3781, column: 13, scope: !8320)
!8324 = !DILocation(line: 3781, column: 58, scope: !8320)
!8325 = !DILocation(line: 3781, column: 7, scope: !8295)
!8326 = !DILocation(line: 3782, column: 60, scope: !8320)
!8327 = !DILocation(line: 3782, column: 59, scope: !8320)
!8328 = !DILocation(line: 3782, column: 50, scope: !8320)
!8329 = !DILocation(line: 3782, column: 38, scope: !8320)
!8330 = !DILocation(line: 3782, column: 12, scope: !8320)
!8331 = !DILocation(line: 3782, column: 5, scope: !8320)
!8332 = !DILocation(line: 3785, column: 16, scope: !8295)
!8333 = !DILocation(line: 3786, column: 14, scope: !8295)
!8334 = !DILocation(line: 3786, column: 12, scope: !8295)
!8335 = !DILocation(line: 3787, column: 3, scope: !8295)
!8336 = !DILocation(line: 3788, column: 37, scope: !8295)
!8337 = !DILocation(line: 3789, column: 20, scope: !8295)
!8338 = !DILocation(line: 3788, column: 9, scope: !8295)
!8339 = !DILocation(line: 3788, column: 7, scope: !8295)
!8340 = !DILocation(line: 3790, column: 3, scope: !8295)
!8341 = !DILocation(line: 3791, column: 24, scope: !8295)
!8342 = !DILocation(line: 3791, column: 3, scope: !8295)
!8343 = !DILocation(line: 3792, column: 3, scope: !8295)
!8344 = !DILocation(line: 3794, column: 10, scope: !8295)
!8345 = !DILocation(line: 3794, column: 3, scope: !8295)
!8346 = !DILocation(line: 3795, column: 1, scope: !8295)
!8347 = distinct !DISubprogram(name: "gimple_type_eq", scope: !3, file: !3, line: 3801, type: !968, scopeLine: 3802, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!8348 = !DILocalVariable(name: "p1", arg: 1, scope: !8347, file: !3, line: 3801, type: !963)
!8349 = !DILocation(line: 3801, column: 29, scope: !8347)
!8350 = !DILocalVariable(name: "p2", arg: 2, scope: !8347, file: !3, line: 3801, type: !963)
!8351 = !DILocation(line: 3801, column: 45, scope: !8347)
!8352 = !DILocalVariable(name: "t1", scope: !8347, file: !3, line: 3803, type: !1784)
!8353 = !DILocation(line: 3803, column: 14, scope: !8347)
!8354 = !DILocation(line: 3803, column: 32, scope: !8347)
!8355 = !DILocation(line: 3803, column: 19, scope: !8347)
!8356 = !DILocalVariable(name: "t2", scope: !8347, file: !3, line: 3804, type: !1784)
!8357 = !DILocation(line: 3804, column: 14, scope: !8347)
!8358 = !DILocation(line: 3804, column: 32, scope: !8347)
!8359 = !DILocation(line: 3804, column: 19, scope: !8347)
!8360 = !DILocation(line: 3805, column: 37, scope: !8347)
!8361 = !DILocation(line: 3805, column: 59, scope: !8347)
!8362 = !DILocation(line: 3805, column: 10, scope: !8347)
!8363 = !DILocation(line: 3805, column: 3, scope: !8347)
!8364 = distinct !DISubprogram(name: "print_gimple_types_stats", scope: !3, file: !3, line: 3896, type: !7341, scopeLine: 3897, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!8365 = !DILocation(line: 3898, column: 7, scope: !8366)
!8366 = distinct !DILexicalBlock(scope: !8364, file: !3, line: 3898, column: 7)
!8367 = !DILocation(line: 3898, column: 7, scope: !8364)
!8368 = !DILocation(line: 3899, column: 14, scope: !8366)
!8369 = !DILocation(line: 3901, column: 25, scope: !8366)
!8370 = !DILocation(line: 3901, column: 14, scope: !8366)
!8371 = !DILocation(line: 3902, column: 29, scope: !8366)
!8372 = !DILocation(line: 3902, column: 14, scope: !8366)
!8373 = !DILocation(line: 3903, column: 14, scope: !8366)
!8374 = !DILocation(line: 3903, column: 28, scope: !8366)
!8375 = !DILocation(line: 3903, column: 7, scope: !8366)
!8376 = !DILocation(line: 3904, column: 14, scope: !8366)
!8377 = !DILocation(line: 3904, column: 28, scope: !8366)
!8378 = !DILocation(line: 3904, column: 7, scope: !8366)
!8379 = !DILocation(line: 3905, column: 24, scope: !8366)
!8380 = !DILocation(line: 3905, column: 7, scope: !8366)
!8381 = !DILocation(line: 3899, column: 5, scope: !8366)
!8382 = !DILocation(line: 3907, column: 14, scope: !8366)
!8383 = !DILocation(line: 3907, column: 5, scope: !8366)
!8384 = !DILocation(line: 3908, column: 7, scope: !8385)
!8385 = distinct !DILexicalBlock(scope: !8364, file: !3, line: 3908, column: 7)
!8386 = !DILocation(line: 3908, column: 7, scope: !8364)
!8387 = !DILocation(line: 3909, column: 14, scope: !8385)
!8388 = !DILocation(line: 3911, column: 25, scope: !8385)
!8389 = !DILocation(line: 3911, column: 14, scope: !8385)
!8390 = !DILocation(line: 3912, column: 29, scope: !8385)
!8391 = !DILocation(line: 3912, column: 14, scope: !8385)
!8392 = !DILocation(line: 3913, column: 14, scope: !8385)
!8393 = !DILocation(line: 3913, column: 27, scope: !8385)
!8394 = !DILocation(line: 3913, column: 7, scope: !8385)
!8395 = !DILocation(line: 3914, column: 14, scope: !8385)
!8396 = !DILocation(line: 3914, column: 27, scope: !8385)
!8397 = !DILocation(line: 3914, column: 7, scope: !8385)
!8398 = !DILocation(line: 3915, column: 24, scope: !8385)
!8399 = !DILocation(line: 3915, column: 7, scope: !8385)
!8400 = !DILocation(line: 3909, column: 5, scope: !8385)
!8401 = !DILocation(line: 3917, column: 14, scope: !8385)
!8402 = !DILocation(line: 3917, column: 5, scope: !8385)
!8403 = !DILocation(line: 3918, column: 1, scope: !8364)
!8404 = distinct !DISubprogram(name: "free_gimple_type_tables", scope: !3, file: !3, line: 3923, type: !7341, scopeLine: 3924, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!8405 = !DILocation(line: 3926, column: 7, scope: !8406)
!8406 = distinct !DILexicalBlock(scope: !8404, file: !3, line: 3926, column: 7)
!8407 = !DILocation(line: 3926, column: 7, scope: !8404)
!8408 = !DILocation(line: 3927, column: 5, scope: !8406)
!8409 = !DILocation(line: 3929, column: 7, scope: !8410)
!8410 = distinct !DILexicalBlock(scope: !8404, file: !3, line: 3929, column: 7)
!8411 = !DILocation(line: 3929, column: 7, scope: !8404)
!8412 = !DILocation(line: 3931, column: 20, scope: !8413)
!8413 = distinct !DILexicalBlock(scope: !8410, file: !3, line: 3930, column: 5)
!8414 = !DILocation(line: 3931, column: 7, scope: !8413)
!8415 = !DILocation(line: 3932, column: 20, scope: !8413)
!8416 = !DILocation(line: 3933, column: 5, scope: !8413)
!8417 = !DILocation(line: 3934, column: 7, scope: !8418)
!8418 = distinct !DILexicalBlock(scope: !8404, file: !3, line: 3934, column: 7)
!8419 = !DILocation(line: 3934, column: 7, scope: !8404)
!8420 = !DILocation(line: 3936, column: 28, scope: !8421)
!8421 = distinct !DILexicalBlock(scope: !8418, file: !3, line: 3935, column: 5)
!8422 = !DILocation(line: 3936, column: 7, scope: !8421)
!8423 = !DILocation(line: 3937, column: 23, scope: !8421)
!8424 = !DILocation(line: 3938, column: 5, scope: !8421)
!8425 = !DILocation(line: 3939, column: 7, scope: !8426)
!8426 = distinct !DILexicalBlock(scope: !8404, file: !3, line: 3939, column: 7)
!8427 = !DILocation(line: 3939, column: 7, scope: !8404)
!8428 = !DILocation(line: 3941, column: 20, scope: !8429)
!8429 = distinct !DILexicalBlock(scope: !8426, file: !3, line: 3940, column: 5)
!8430 = !DILocation(line: 3941, column: 7, scope: !8429)
!8431 = !DILocation(line: 3942, column: 7, scope: !8429)
!8432 = !DILocation(line: 3943, column: 19, scope: !8429)
!8433 = !DILocation(line: 3944, column: 5, scope: !8429)
!8434 = !DILocation(line: 3945, column: 1, scope: !8404)
!8435 = distinct !DISubprogram(name: "gimple_unsigned_type", scope: !3, file: !3, line: 4111, type: !7695, scopeLine: 4112, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!8436 = !DILocalVariable(name: "type", arg: 1, scope: !8435, file: !3, line: 4111, type: !666)
!8437 = !DILocation(line: 4111, column: 28, scope: !8435)
!8438 = !DILocation(line: 4113, column: 48, scope: !8435)
!8439 = !DILocation(line: 4113, column: 10, scope: !8435)
!8440 = !DILocation(line: 4113, column: 3, scope: !8435)
!8441 = distinct !DISubprogram(name: "gimple_signed_or_unsigned_type", scope: !3, file: !3, line: 3952, type: !8442, scopeLine: 3953, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!8442 = !DISubroutineType(types: !8443)
!8443 = !{!666, !769, !666}
!8444 = !DILocalVariable(name: "unsignedp", arg: 1, scope: !8441, file: !3, line: 3952, type: !769)
!8445 = !DILocation(line: 3952, column: 38, scope: !8441)
!8446 = !DILocalVariable(name: "type", arg: 2, scope: !8441, file: !3, line: 3952, type: !666)
!8447 = !DILocation(line: 3952, column: 54, scope: !8441)
!8448 = !DILocalVariable(name: "type1", scope: !8441, file: !3, line: 3954, type: !666)
!8449 = !DILocation(line: 3954, column: 8, scope: !8441)
!8450 = !DILocation(line: 3956, column: 11, scope: !8441)
!8451 = !DILocation(line: 3956, column: 9, scope: !8441)
!8452 = !DILocation(line: 3957, column: 7, scope: !8453)
!8453 = distinct !DILexicalBlock(scope: !8441, file: !3, line: 3957, column: 7)
!8454 = !DILocation(line: 3957, column: 16, scope: !8453)
!8455 = !DILocation(line: 3957, column: 13, scope: !8453)
!8456 = !DILocation(line: 3958, column: 7, scope: !8453)
!8457 = !DILocation(line: 3958, column: 10, scope: !8453)
!8458 = !DILocation(line: 3958, column: 19, scope: !8453)
!8459 = !DILocation(line: 3958, column: 16, scope: !8453)
!8460 = !DILocation(line: 3959, column: 7, scope: !8453)
!8461 = !DILocation(line: 3959, column: 10, scope: !8453)
!8462 = !DILocation(line: 3959, column: 19, scope: !8453)
!8463 = !DILocation(line: 3959, column: 16, scope: !8453)
!8464 = !DILocation(line: 3957, column: 7, scope: !8441)
!8465 = !DILocation(line: 3960, column: 12, scope: !8453)
!8466 = !DILocation(line: 3960, column: 24, scope: !8453)
!8467 = !DILocation(line: 3960, column: 50, scope: !8453)
!8468 = !DILocation(line: 3960, column: 5, scope: !8453)
!8469 = !DILocation(line: 3961, column: 7, scope: !8470)
!8470 = distinct !DILexicalBlock(scope: !8441, file: !3, line: 3961, column: 7)
!8471 = !DILocation(line: 3961, column: 16, scope: !8470)
!8472 = !DILocation(line: 3961, column: 13, scope: !8470)
!8473 = !DILocation(line: 3961, column: 34, scope: !8470)
!8474 = !DILocation(line: 3961, column: 37, scope: !8470)
!8475 = !DILocation(line: 3961, column: 46, scope: !8470)
!8476 = !DILocation(line: 3961, column: 43, scope: !8470)
!8477 = !DILocation(line: 3961, column: 7, scope: !8441)
!8478 = !DILocation(line: 3962, column: 12, scope: !8470)
!8479 = !DILocation(line: 3962, column: 24, scope: !8470)
!8480 = !DILocation(line: 3962, column: 45, scope: !8470)
!8481 = !DILocation(line: 3962, column: 5, scope: !8470)
!8482 = !DILocation(line: 3963, column: 7, scope: !8483)
!8483 = distinct !DILexicalBlock(scope: !8441, file: !3, line: 3963, column: 7)
!8484 = !DILocation(line: 3963, column: 16, scope: !8483)
!8485 = !DILocation(line: 3963, column: 13, scope: !8483)
!8486 = !DILocation(line: 3963, column: 40, scope: !8483)
!8487 = !DILocation(line: 3963, column: 43, scope: !8483)
!8488 = !DILocation(line: 3963, column: 52, scope: !8483)
!8489 = !DILocation(line: 3963, column: 49, scope: !8483)
!8490 = !DILocation(line: 3963, column: 7, scope: !8441)
!8491 = !DILocation(line: 3964, column: 12, scope: !8483)
!8492 = !DILocation(line: 3964, column: 24, scope: !8483)
!8493 = !DILocation(line: 3964, column: 51, scope: !8483)
!8494 = !DILocation(line: 3964, column: 5, scope: !8483)
!8495 = !DILocation(line: 3965, column: 7, scope: !8496)
!8496 = distinct !DILexicalBlock(scope: !8441, file: !3, line: 3965, column: 7)
!8497 = !DILocation(line: 3965, column: 16, scope: !8496)
!8498 = !DILocation(line: 3965, column: 13, scope: !8496)
!8499 = !DILocation(line: 3965, column: 39, scope: !8496)
!8500 = !DILocation(line: 3965, column: 42, scope: !8496)
!8501 = !DILocation(line: 3965, column: 51, scope: !8496)
!8502 = !DILocation(line: 3965, column: 48, scope: !8496)
!8503 = !DILocation(line: 3965, column: 7, scope: !8441)
!8504 = !DILocation(line: 3966, column: 12, scope: !8496)
!8505 = !DILocation(line: 3966, column: 24, scope: !8496)
!8506 = !DILocation(line: 3966, column: 50, scope: !8496)
!8507 = !DILocation(line: 3966, column: 5, scope: !8496)
!8508 = !DILocation(line: 3967, column: 7, scope: !8509)
!8509 = distinct !DILexicalBlock(scope: !8441, file: !3, line: 3967, column: 7)
!8510 = !DILocation(line: 3967, column: 16, scope: !8509)
!8511 = !DILocation(line: 3967, column: 13, scope: !8509)
!8512 = !DILocation(line: 3968, column: 7, scope: !8509)
!8513 = !DILocation(line: 3968, column: 10, scope: !8509)
!8514 = !DILocation(line: 3968, column: 19, scope: !8509)
!8515 = !DILocation(line: 3968, column: 16, scope: !8509)
!8516 = !DILocation(line: 3967, column: 7, scope: !8441)
!8517 = !DILocation(line: 3969, column: 12, scope: !8509)
!8518 = !DILocation(line: 3970, column: 14, scope: !8509)
!8519 = !DILocation(line: 3971, column: 7, scope: !8509)
!8520 = !DILocation(line: 3969, column: 5, scope: !8509)
!8521 = !DILocation(line: 3973, column: 7, scope: !8522)
!8522 = distinct !DILexicalBlock(scope: !8441, file: !3, line: 3973, column: 7)
!8523 = !DILocation(line: 3973, column: 16, scope: !8522)
!8524 = !DILocation(line: 3973, column: 13, scope: !8522)
!8525 = !DILocation(line: 3973, column: 32, scope: !8522)
!8526 = !DILocation(line: 3973, column: 35, scope: !8522)
!8527 = !DILocation(line: 3973, column: 44, scope: !8522)
!8528 = !DILocation(line: 3973, column: 41, scope: !8522)
!8529 = !DILocation(line: 3973, column: 7, scope: !8441)
!8530 = !DILocation(line: 3974, column: 12, scope: !8522)
!8531 = !DILocation(line: 3974, column: 24, scope: !8522)
!8532 = !DILocation(line: 3974, column: 51, scope: !8522)
!8533 = !DILocation(line: 3974, column: 5, scope: !8522)
!8534 = !DILocation(line: 3976, column: 7, scope: !8535)
!8535 = distinct !DILexicalBlock(scope: !8441, file: !3, line: 3976, column: 7)
!8536 = !DILocation(line: 3976, column: 16, scope: !8535)
!8537 = !DILocation(line: 3976, column: 13, scope: !8535)
!8538 = !DILocation(line: 3976, column: 32, scope: !8535)
!8539 = !DILocation(line: 3976, column: 35, scope: !8535)
!8540 = !DILocation(line: 3976, column: 44, scope: !8535)
!8541 = !DILocation(line: 3976, column: 41, scope: !8535)
!8542 = !DILocation(line: 3976, column: 7, scope: !8441)
!8543 = !DILocation(line: 3977, column: 12, scope: !8535)
!8544 = !DILocation(line: 3977, column: 24, scope: !8535)
!8545 = !DILocation(line: 3977, column: 51, scope: !8535)
!8546 = !DILocation(line: 3977, column: 5, scope: !8535)
!8547 = !DILocation(line: 3978, column: 7, scope: !8548)
!8548 = distinct !DILexicalBlock(scope: !8441, file: !3, line: 3978, column: 7)
!8549 = !DILocation(line: 3978, column: 16, scope: !8548)
!8550 = !DILocation(line: 3978, column: 13, scope: !8548)
!8551 = !DILocation(line: 3978, column: 32, scope: !8548)
!8552 = !DILocation(line: 3978, column: 35, scope: !8548)
!8553 = !DILocation(line: 3978, column: 44, scope: !8548)
!8554 = !DILocation(line: 3978, column: 41, scope: !8548)
!8555 = !DILocation(line: 3978, column: 7, scope: !8441)
!8556 = !DILocation(line: 3979, column: 12, scope: !8548)
!8557 = !DILocation(line: 3979, column: 24, scope: !8548)
!8558 = !DILocation(line: 3979, column: 51, scope: !8548)
!8559 = !DILocation(line: 3979, column: 5, scope: !8548)
!8560 = !DILocation(line: 3980, column: 7, scope: !8561)
!8561 = distinct !DILexicalBlock(scope: !8441, file: !3, line: 3980, column: 7)
!8562 = !DILocation(line: 3980, column: 16, scope: !8561)
!8563 = !DILocation(line: 3980, column: 13, scope: !8561)
!8564 = !DILocation(line: 3980, column: 32, scope: !8561)
!8565 = !DILocation(line: 3980, column: 35, scope: !8561)
!8566 = !DILocation(line: 3980, column: 44, scope: !8561)
!8567 = !DILocation(line: 3980, column: 41, scope: !8561)
!8568 = !DILocation(line: 3980, column: 7, scope: !8441)
!8569 = !DILocation(line: 3981, column: 12, scope: !8561)
!8570 = !DILocation(line: 3981, column: 24, scope: !8561)
!8571 = !DILocation(line: 3981, column: 51, scope: !8561)
!8572 = !DILocation(line: 3981, column: 5, scope: !8561)
!8573 = !DILocation(line: 3982, column: 7, scope: !8574)
!8574 = distinct !DILexicalBlock(scope: !8441, file: !3, line: 3982, column: 7)
!8575 = !DILocation(line: 3982, column: 16, scope: !8574)
!8576 = !DILocation(line: 3982, column: 13, scope: !8574)
!8577 = !DILocation(line: 3982, column: 32, scope: !8574)
!8578 = !DILocation(line: 3982, column: 35, scope: !8574)
!8579 = !DILocation(line: 3982, column: 44, scope: !8574)
!8580 = !DILocation(line: 3982, column: 41, scope: !8574)
!8581 = !DILocation(line: 3982, column: 7, scope: !8441)
!8582 = !DILocation(line: 3983, column: 12, scope: !8574)
!8583 = !DILocation(line: 3983, column: 24, scope: !8574)
!8584 = !DILocation(line: 3983, column: 51, scope: !8574)
!8585 = !DILocation(line: 3983, column: 5, scope: !8574)
!8586 = !DILocation(line: 4033, column: 3, scope: !8587)
!8587 = distinct !DILexicalBlock(scope: !8441, file: !3, line: 4033, column: 3)
!8588 = !DILocation(line: 4033, column: 3, scope: !8441)
!8589 = !DILocation(line: 4033, column: 3, scope: !8590)
!8590 = distinct !DILexicalBlock(scope: !8441, file: !3, line: 4033, column: 3)
!8591 = !DILocation(line: 4033, column: 3, scope: !8592)
!8592 = distinct !DILexicalBlock(scope: !8441, file: !3, line: 4033, column: 3)
!8593 = !DILocation(line: 4033, column: 3, scope: !8594)
!8594 = distinct !DILexicalBlock(scope: !8441, file: !3, line: 4033, column: 3)
!8595 = !DILocation(line: 4034, column: 3, scope: !8596)
!8596 = distinct !DILexicalBlock(scope: !8441, file: !3, line: 4034, column: 3)
!8597 = !DILocation(line: 4034, column: 3, scope: !8441)
!8598 = !DILocation(line: 4034, column: 3, scope: !8599)
!8599 = distinct !DILexicalBlock(scope: !8441, file: !3, line: 4034, column: 3)
!8600 = !DILocation(line: 4034, column: 3, scope: !8601)
!8601 = distinct !DILexicalBlock(scope: !8441, file: !3, line: 4034, column: 3)
!8602 = !DILocation(line: 4034, column: 3, scope: !8603)
!8603 = distinct !DILexicalBlock(scope: !8441, file: !3, line: 4034, column: 3)
!8604 = !DILocation(line: 4035, column: 3, scope: !8605)
!8605 = distinct !DILexicalBlock(scope: !8441, file: !3, line: 4035, column: 3)
!8606 = !DILocation(line: 4035, column: 3, scope: !8441)
!8607 = !DILocation(line: 4035, column: 3, scope: !8608)
!8608 = distinct !DILexicalBlock(scope: !8441, file: !3, line: 4035, column: 3)
!8609 = !DILocation(line: 4035, column: 3, scope: !8610)
!8610 = distinct !DILexicalBlock(scope: !8441, file: !3, line: 4035, column: 3)
!8611 = !DILocation(line: 4035, column: 3, scope: !8612)
!8612 = distinct !DILexicalBlock(scope: !8441, file: !3, line: 4035, column: 3)
!8613 = !DILocation(line: 4036, column: 3, scope: !8614)
!8614 = distinct !DILexicalBlock(scope: !8441, file: !3, line: 4036, column: 3)
!8615 = !DILocation(line: 4036, column: 3, scope: !8441)
!8616 = !DILocation(line: 4036, column: 3, scope: !8617)
!8617 = distinct !DILexicalBlock(scope: !8441, file: !3, line: 4036, column: 3)
!8618 = !DILocation(line: 4036, column: 3, scope: !8619)
!8619 = distinct !DILexicalBlock(scope: !8441, file: !3, line: 4036, column: 3)
!8620 = !DILocation(line: 4036, column: 3, scope: !8621)
!8621 = distinct !DILexicalBlock(scope: !8441, file: !3, line: 4036, column: 3)
!8622 = !DILocation(line: 4038, column: 3, scope: !8623)
!8623 = distinct !DILexicalBlock(scope: !8441, file: !3, line: 4038, column: 3)
!8624 = !DILocation(line: 4038, column: 3, scope: !8441)
!8625 = !DILocation(line: 4039, column: 3, scope: !8626)
!8626 = distinct !DILexicalBlock(scope: !8441, file: !3, line: 4039, column: 3)
!8627 = !DILocation(line: 4039, column: 3, scope: !8441)
!8628 = !DILocation(line: 4040, column: 3, scope: !8629)
!8629 = distinct !DILexicalBlock(scope: !8441, file: !3, line: 4040, column: 3)
!8630 = !DILocation(line: 4040, column: 3, scope: !8441)
!8631 = !DILocation(line: 4041, column: 3, scope: !8632)
!8632 = distinct !DILexicalBlock(scope: !8441, file: !3, line: 4041, column: 3)
!8633 = !DILocation(line: 4041, column: 3, scope: !8441)
!8634 = !DILocation(line: 4042, column: 3, scope: !8635)
!8635 = distinct !DILexicalBlock(scope: !8441, file: !3, line: 4042, column: 3)
!8636 = !DILocation(line: 4042, column: 3, scope: !8441)
!8637 = !DILocation(line: 4043, column: 3, scope: !8638)
!8638 = distinct !DILexicalBlock(scope: !8441, file: !3, line: 4043, column: 3)
!8639 = !DILocation(line: 4043, column: 3, scope: !8441)
!8640 = !DILocation(line: 4044, column: 3, scope: !8641)
!8641 = distinct !DILexicalBlock(scope: !8441, file: !3, line: 4044, column: 3)
!8642 = !DILocation(line: 4044, column: 3, scope: !8441)
!8643 = !DILocation(line: 4045, column: 3, scope: !8644)
!8644 = distinct !DILexicalBlock(scope: !8441, file: !3, line: 4045, column: 3)
!8645 = !DILocation(line: 4045, column: 3, scope: !8441)
!8646 = !DILocation(line: 4046, column: 3, scope: !8647)
!8647 = distinct !DILexicalBlock(scope: !8441, file: !3, line: 4046, column: 3)
!8648 = !DILocation(line: 4046, column: 3, scope: !8441)
!8649 = !DILocation(line: 4047, column: 3, scope: !8650)
!8650 = distinct !DILexicalBlock(scope: !8441, file: !3, line: 4047, column: 3)
!8651 = !DILocation(line: 4047, column: 3, scope: !8441)
!8652 = !DILocation(line: 4048, column: 3, scope: !8653)
!8653 = distinct !DILexicalBlock(scope: !8441, file: !3, line: 4048, column: 3)
!8654 = !DILocation(line: 4048, column: 3, scope: !8441)
!8655 = !DILocation(line: 4049, column: 3, scope: !8656)
!8656 = distinct !DILexicalBlock(scope: !8441, file: !3, line: 4049, column: 3)
!8657 = !DILocation(line: 4049, column: 3, scope: !8441)
!8658 = !DILocation(line: 4050, column: 3, scope: !8659)
!8659 = distinct !DILexicalBlock(scope: !8441, file: !3, line: 4050, column: 3)
!8660 = !DILocation(line: 4050, column: 3, scope: !8441)
!8661 = !DILocation(line: 4051, column: 3, scope: !8662)
!8662 = distinct !DILexicalBlock(scope: !8441, file: !3, line: 4051, column: 3)
!8663 = !DILocation(line: 4051, column: 3, scope: !8441)
!8664 = !DILocation(line: 4052, column: 3, scope: !8665)
!8665 = distinct !DILexicalBlock(scope: !8441, file: !3, line: 4052, column: 3)
!8666 = !DILocation(line: 4052, column: 3, scope: !8441)
!8667 = !DILocation(line: 4053, column: 3, scope: !8668)
!8668 = distinct !DILexicalBlock(scope: !8441, file: !3, line: 4053, column: 3)
!8669 = !DILocation(line: 4053, column: 3, scope: !8441)
!8670 = !DILocation(line: 4054, column: 3, scope: !8671)
!8671 = distinct !DILexicalBlock(scope: !8441, file: !3, line: 4054, column: 3)
!8672 = !DILocation(line: 4054, column: 3, scope: !8441)
!8673 = !DILocation(line: 4055, column: 3, scope: !8674)
!8674 = distinct !DILexicalBlock(scope: !8441, file: !3, line: 4055, column: 3)
!8675 = !DILocation(line: 4055, column: 3, scope: !8441)
!8676 = !DILocation(line: 4065, column: 8, scope: !8677)
!8677 = distinct !DILexicalBlock(scope: !8441, file: !3, line: 4065, column: 7)
!8678 = !DILocation(line: 4066, column: 7, scope: !8677)
!8679 = !DILocation(line: 4066, column: 10, scope: !8677)
!8680 = !DILocation(line: 4066, column: 34, scope: !8677)
!8681 = !DILocation(line: 4066, column: 31, scope: !8677)
!8682 = !DILocation(line: 4065, column: 7, scope: !8441)
!8683 = !DILocation(line: 4067, column: 12, scope: !8677)
!8684 = !DILocation(line: 4067, column: 5, scope: !8677)
!8685 = !DILocation(line: 4072, column: 7, scope: !8686)
!8686 = distinct !DILexicalBlock(scope: !8441, file: !3, line: 4072, column: 7)
!8687 = !DILocation(line: 4072, column: 7, scope: !8441)
!8688 = !DILocation(line: 4073, column: 12, scope: !8686)
!8689 = !DILocation(line: 4073, column: 24, scope: !8686)
!8690 = !DILocation(line: 4073, column: 50, scope: !8686)
!8691 = !DILocation(line: 4073, column: 5, scope: !8686)
!8692 = !DILocation(line: 4074, column: 7, scope: !8693)
!8693 = distinct !DILexicalBlock(scope: !8441, file: !3, line: 4074, column: 7)
!8694 = !DILocation(line: 4074, column: 7, scope: !8441)
!8695 = !DILocation(line: 4075, column: 12, scope: !8693)
!8696 = !DILocation(line: 4075, column: 24, scope: !8693)
!8697 = !DILocation(line: 4075, column: 45, scope: !8693)
!8698 = !DILocation(line: 4075, column: 5, scope: !8693)
!8699 = !DILocation(line: 4076, column: 7, scope: !8700)
!8700 = distinct !DILexicalBlock(scope: !8441, file: !3, line: 4076, column: 7)
!8701 = !DILocation(line: 4076, column: 7, scope: !8441)
!8702 = !DILocation(line: 4077, column: 12, scope: !8700)
!8703 = !DILocation(line: 4077, column: 24, scope: !8700)
!8704 = !DILocation(line: 4077, column: 51, scope: !8700)
!8705 = !DILocation(line: 4077, column: 5, scope: !8700)
!8706 = !DILocation(line: 4078, column: 7, scope: !8707)
!8707 = distinct !DILexicalBlock(scope: !8441, file: !3, line: 4078, column: 7)
!8708 = !DILocation(line: 4078, column: 7, scope: !8441)
!8709 = !DILocation(line: 4079, column: 12, scope: !8707)
!8710 = !DILocation(line: 4079, column: 24, scope: !8707)
!8711 = !DILocation(line: 4079, column: 50, scope: !8707)
!8712 = !DILocation(line: 4079, column: 5, scope: !8707)
!8713 = !DILocation(line: 4080, column: 7, scope: !8714)
!8714 = distinct !DILexicalBlock(scope: !8441, file: !3, line: 4080, column: 7)
!8715 = !DILocation(line: 4080, column: 7, scope: !8441)
!8716 = !DILocation(line: 4081, column: 13, scope: !8714)
!8717 = !DILocation(line: 4082, column: 8, scope: !8714)
!8718 = !DILocation(line: 4083, column: 8, scope: !8714)
!8719 = !DILocation(line: 4081, column: 5, scope: !8714)
!8720 = !DILocation(line: 4086, column: 7, scope: !8721)
!8721 = distinct !DILexicalBlock(scope: !8441, file: !3, line: 4086, column: 7)
!8722 = !DILocation(line: 4086, column: 7, scope: !8441)
!8723 = !DILocation(line: 4087, column: 12, scope: !8721)
!8724 = !DILocation(line: 4087, column: 24, scope: !8721)
!8725 = !DILocation(line: 4087, column: 51, scope: !8721)
!8726 = !DILocation(line: 4087, column: 5, scope: !8721)
!8727 = !DILocation(line: 4089, column: 7, scope: !8728)
!8728 = distinct !DILexicalBlock(scope: !8441, file: !3, line: 4089, column: 7)
!8729 = !DILocation(line: 4089, column: 7, scope: !8441)
!8730 = !DILocation(line: 4090, column: 12, scope: !8728)
!8731 = !DILocation(line: 4090, column: 24, scope: !8728)
!8732 = !DILocation(line: 4090, column: 51, scope: !8728)
!8733 = !DILocation(line: 4090, column: 5, scope: !8728)
!8734 = !DILocation(line: 4091, column: 7, scope: !8735)
!8735 = distinct !DILexicalBlock(scope: !8441, file: !3, line: 4091, column: 7)
!8736 = !DILocation(line: 4091, column: 7, scope: !8441)
!8737 = !DILocation(line: 4092, column: 12, scope: !8735)
!8738 = !DILocation(line: 4092, column: 24, scope: !8735)
!8739 = !DILocation(line: 4092, column: 51, scope: !8735)
!8740 = !DILocation(line: 4092, column: 5, scope: !8735)
!8741 = !DILocation(line: 4093, column: 7, scope: !8742)
!8742 = distinct !DILexicalBlock(scope: !8441, file: !3, line: 4093, column: 7)
!8743 = !DILocation(line: 4093, column: 7, scope: !8441)
!8744 = !DILocation(line: 4094, column: 12, scope: !8742)
!8745 = !DILocation(line: 4094, column: 24, scope: !8742)
!8746 = !DILocation(line: 4094, column: 51, scope: !8742)
!8747 = !DILocation(line: 4094, column: 5, scope: !8742)
!8748 = !DILocation(line: 4095, column: 7, scope: !8749)
!8749 = distinct !DILexicalBlock(scope: !8441, file: !3, line: 4095, column: 7)
!8750 = !DILocation(line: 4095, column: 7, scope: !8441)
!8751 = !DILocation(line: 4096, column: 12, scope: !8749)
!8752 = !DILocation(line: 4096, column: 24, scope: !8749)
!8753 = !DILocation(line: 4096, column: 51, scope: !8749)
!8754 = !DILocation(line: 4096, column: 5, scope: !8749)
!8755 = !DILocation(line: 4104, column: 42, scope: !8441)
!8756 = !DILocation(line: 4104, column: 65, scope: !8441)
!8757 = !DILocation(line: 4104, column: 10, scope: !8441)
!8758 = !DILocation(line: 4104, column: 3, scope: !8441)
!8759 = !DILocation(line: 4105, column: 1, scope: !8441)
!8760 = distinct !DISubprogram(name: "gimple_signed_type", scope: !3, file: !3, line: 4120, type: !7695, scopeLine: 4121, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!8761 = !DILocalVariable(name: "type", arg: 1, scope: !8760, file: !3, line: 4120, type: !666)
!8762 = !DILocation(line: 4120, column: 26, scope: !8760)
!8763 = !DILocation(line: 4122, column: 49, scope: !8760)
!8764 = !DILocation(line: 4122, column: 10, scope: !8760)
!8765 = !DILocation(line: 4122, column: 3, scope: !8760)
!8766 = distinct !DISubprogram(name: "gimple_get_alias_set", scope: !3, file: !3, line: 4130, type: !8767, scopeLine: 4131, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!8767 = !DISubroutineType(types: !8768)
!8768 = !{!1253, !666}
!8769 = !DILocalVariable(name: "t", arg: 1, scope: !8766, file: !3, line: 4130, type: !666)
!8770 = !DILocation(line: 4130, column: 28, scope: !8766)
!8771 = !DILocalVariable(name: "u", scope: !8766, file: !3, line: 4132, type: !666)
!8772 = !DILocation(line: 4132, column: 8, scope: !8766)
!8773 = !DILocation(line: 4140, column: 12, scope: !8774)
!8774 = distinct !DILexicalBlock(scope: !8766, file: !3, line: 4140, column: 3)
!8775 = !DILocation(line: 4140, column: 10, scope: !8774)
!8776 = !DILocation(line: 4140, column: 8, scope: !8774)
!8777 = !DILocation(line: 4141, column: 8, scope: !8778)
!8778 = distinct !DILexicalBlock(scope: !8774, file: !3, line: 4140, column: 3)
!8779 = !DILocation(line: 4141, column: 22, scope: !8778)
!8780 = !DILocation(line: 4141, column: 39, scope: !8778)
!8781 = !DILocation(line: 4141, column: 42, scope: !8778)
!8782 = !DILocation(line: 4141, column: 56, scope: !8778)
!8783 = !DILocation(line: 4140, column: 3, scope: !8774)
!8784 = !DILocation(line: 4143, column: 9, scope: !8785)
!8785 = distinct !DILexicalBlock(scope: !8778, file: !3, line: 4143, column: 9)
!8786 = !DILocation(line: 4143, column: 23, scope: !8785)
!8787 = !DILocation(line: 4144, column: 2, scope: !8785)
!8788 = !DILocation(line: 4144, column: 5, scope: !8785)
!8789 = !DILocation(line: 4144, column: 49, scope: !8785)
!8790 = !DILocation(line: 4143, column: 9, scope: !8778)
!8791 = !DILocation(line: 4145, column: 7, scope: !8785)
!8792 = !DILocation(line: 4144, column: 52, scope: !8785)
!8793 = !DILocation(line: 4142, column: 12, scope: !8778)
!8794 = !DILocation(line: 4142, column: 10, scope: !8778)
!8795 = !DILocation(line: 4140, column: 3, scope: !8778)
!8796 = distinct !{!8796, !8783, !8797}
!8797 = !DILocation(line: 4145, column: 14, scope: !8774)
!8798 = !DILocation(line: 4148, column: 8, scope: !8799)
!8799 = distinct !DILexicalBlock(scope: !8766, file: !3, line: 4148, column: 7)
!8800 = !DILocation(line: 4148, column: 7, scope: !8766)
!8801 = !DILocation(line: 4149, column: 5, scope: !8799)
!8802 = !DILocation(line: 4154, column: 7, scope: !8803)
!8803 = distinct !DILexicalBlock(scope: !8766, file: !3, line: 4154, column: 7)
!8804 = !DILocation(line: 4154, column: 12, scope: !8803)
!8805 = !DILocation(line: 4154, column: 9, scope: !8803)
!8806 = !DILocation(line: 4155, column: 7, scope: !8803)
!8807 = !DILocation(line: 4155, column: 10, scope: !8803)
!8808 = !DILocation(line: 4155, column: 15, scope: !8803)
!8809 = !DILocation(line: 4155, column: 12, scope: !8803)
!8810 = !DILocation(line: 4156, column: 7, scope: !8803)
!8811 = !DILocation(line: 4156, column: 10, scope: !8803)
!8812 = !DILocation(line: 4156, column: 15, scope: !8803)
!8813 = !DILocation(line: 4156, column: 12, scope: !8803)
!8814 = !DILocation(line: 4154, column: 7, scope: !8766)
!8815 = !DILocation(line: 4157, column: 5, scope: !8803)
!8816 = !DILocation(line: 4161, column: 7, scope: !8817)
!8817 = distinct !DILexicalBlock(scope: !8766, file: !3, line: 4161, column: 7)
!8818 = !DILocation(line: 4161, column: 21, scope: !8817)
!8819 = !DILocation(line: 4161, column: 37, scope: !8817)
!8820 = !DILocation(line: 4161, column: 40, scope: !8817)
!8821 = !DILocation(line: 4161, column: 7, scope: !8766)
!8822 = !DILocalVariable(name: "t1", scope: !8823, file: !3, line: 4163, type: !666)
!8823 = distinct !DILexicalBlock(scope: !8817, file: !3, line: 4162, column: 5)
!8824 = !DILocation(line: 4163, column: 12, scope: !8823)
!8825 = !DILocation(line: 4163, column: 37, scope: !8823)
!8826 = !DILocation(line: 4163, column: 17, scope: !8823)
!8827 = !DILocation(line: 4166, column: 11, scope: !8828)
!8828 = distinct !DILexicalBlock(scope: !8823, file: !3, line: 4166, column: 11)
!8829 = !DILocation(line: 4166, column: 17, scope: !8828)
!8830 = !DILocation(line: 4166, column: 14, scope: !8828)
!8831 = !DILocation(line: 4166, column: 11, scope: !8823)
!8832 = !DILocation(line: 4167, column: 24, scope: !8828)
!8833 = !DILocation(line: 4167, column: 9, scope: !8828)
!8834 = !DILocation(line: 4167, column: 2, scope: !8828)
!8835 = !DILocation(line: 4168, column: 5, scope: !8823)
!8836 = !DILocation(line: 4169, column: 12, scope: !8837)
!8837 = distinct !DILexicalBlock(scope: !8817, file: !3, line: 4169, column: 12)
!8838 = !DILocation(line: 4169, column: 12, scope: !8817)
!8839 = !DILocation(line: 4223, column: 11, scope: !8840)
!8840 = distinct !DILexicalBlock(scope: !8841, file: !3, line: 4223, column: 11)
!8841 = distinct !DILexicalBlock(scope: !8837, file: !3, line: 4170, column: 5)
!8842 = !DILocation(line: 4223, column: 16, scope: !8840)
!8843 = !DILocation(line: 4223, column: 13, scope: !8840)
!8844 = !DILocation(line: 4223, column: 11, scope: !8841)
!8845 = !DILocation(line: 4224, column: 24, scope: !8840)
!8846 = !DILocation(line: 4224, column: 9, scope: !8840)
!8847 = !DILocation(line: 4224, column: 2, scope: !8840)
!8848 = !DILocation(line: 4225, column: 5, scope: !8841)
!8849 = !DILocation(line: 4227, column: 3, scope: !8766)
!8850 = !DILocation(line: 4228, column: 1, scope: !8766)
!8851 = distinct !DISubprogram(name: "count_uses_and_derefs", scope: !3, file: !3, line: 4276, type: !8852, scopeLine: 4278, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!8852 = !DISubroutineType(types: !8853)
!8853 = !{null, !666, !594, !8854, !8854, !8854}
!8854 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!8855 = !DILocalVariable(name: "ptr", arg: 1, scope: !8851, file: !3, line: 4276, type: !666)
!8856 = !DILocation(line: 4276, column: 29, scope: !8851)
!8857 = !DILocalVariable(name: "stmt", arg: 2, scope: !8851, file: !3, line: 4276, type: !594)
!8858 = !DILocation(line: 4276, column: 41, scope: !8851)
!8859 = !DILocalVariable(name: "num_uses_p", arg: 3, scope: !8851, file: !3, line: 4276, type: !8854)
!8860 = !DILocation(line: 4276, column: 57, scope: !8851)
!8861 = !DILocalVariable(name: "num_loads_p", arg: 4, scope: !8851, file: !3, line: 4277, type: !8854)
!8862 = !DILocation(line: 4277, column: 20, scope: !8851)
!8863 = !DILocalVariable(name: "num_stores_p", arg: 5, scope: !8851, file: !3, line: 4277, type: !8854)
!8864 = !DILocation(line: 4277, column: 43, scope: !8851)
!8865 = !DILocalVariable(name: "i", scope: !8851, file: !3, line: 4279, type: !8866)
!8866 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_op_iter", file: !537, line: 140, baseType: !8867)
!8867 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_iterator_d", file: !537, line: 131, size: 320, elements: !8868)
!8868 = !{!8869, !8870, !8871, !8873, !8875, !8876, !8877}
!8869 = !DIDerivedType(tag: DW_TAG_member, name: "done", scope: !8867, file: !537, line: 133, baseType: !769, size: 8)
!8870 = !DIDerivedType(tag: DW_TAG_member, name: "iter_type", scope: !8867, file: !537, line: 134, baseType: !536, size: 32, offset: 32)
!8871 = !DIDerivedType(tag: DW_TAG_member, name: "defs", scope: !8867, file: !537, line: 135, baseType: !8872, size: 64, offset: 64)
!8872 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_optype_p", file: !537, line: 42, baseType: !1122)
!8873 = !DIDerivedType(tag: DW_TAG_member, name: "uses", scope: !8867, file: !537, line: 136, baseType: !8874, size: 64, offset: 128)
!8874 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_optype_p", file: !537, line: 50, baseType: !1129)
!8875 = !DIDerivedType(tag: DW_TAG_member, name: "phi_i", scope: !8867, file: !537, line: 137, baseType: !746, size: 32, offset: 192)
!8876 = !DIDerivedType(tag: DW_TAG_member, name: "num_phi", scope: !8867, file: !537, line: 138, baseType: !746, size: 32, offset: 224)
!8877 = !DIDerivedType(tag: DW_TAG_member, name: "phi_stmt", scope: !8867, file: !537, line: 139, baseType: !594, size: 64, offset: 256)
!8878 = !DILocation(line: 4279, column: 15, scope: !8851)
!8879 = !DILocalVariable(name: "use", scope: !8851, file: !3, line: 4280, type: !666)
!8880 = !DILocation(line: 4280, column: 8, scope: !8851)
!8881 = !DILocation(line: 4282, column: 4, scope: !8851)
!8882 = !DILocation(line: 4282, column: 15, scope: !8851)
!8883 = !DILocation(line: 4283, column: 4, scope: !8851)
!8884 = !DILocation(line: 4283, column: 16, scope: !8851)
!8885 = !DILocation(line: 4284, column: 4, scope: !8851)
!8886 = !DILocation(line: 4284, column: 17, scope: !8851)
!8887 = !DILocation(line: 4287, column: 3, scope: !8888)
!8888 = distinct !DILexicalBlock(scope: !8851, file: !3, line: 4287, column: 3)
!8889 = !DILocation(line: 4287, column: 3, scope: !8890)
!8890 = distinct !DILexicalBlock(scope: !8888, file: !3, line: 4287, column: 3)
!8891 = !DILocation(line: 4288, column: 9, scope: !8892)
!8892 = distinct !DILexicalBlock(scope: !8890, file: !3, line: 4288, column: 9)
!8893 = !DILocation(line: 4288, column: 16, scope: !8892)
!8894 = !DILocation(line: 4288, column: 13, scope: !8892)
!8895 = !DILocation(line: 4288, column: 9, scope: !8890)
!8896 = !DILocation(line: 4289, column: 9, scope: !8892)
!8897 = !DILocation(line: 4289, column: 20, scope: !8892)
!8898 = !DILocation(line: 4289, column: 7, scope: !8892)
!8899 = distinct !{!8899, !8887, !8900}
!8900 = !DILocation(line: 4289, column: 20, scope: !8888)
!8901 = !DILocation(line: 4298, column: 25, scope: !8902)
!8902 = distinct !DILexicalBlock(scope: !8851, file: !3, line: 4298, column: 7)
!8903 = !DILocation(line: 4298, column: 7, scope: !8902)
!8904 = !DILocation(line: 4299, column: 7, scope: !8902)
!8905 = !DILocation(line: 4299, column: 23, scope: !8902)
!8906 = !DILocation(line: 4299, column: 10, scope: !8902)
!8907 = !DILocation(line: 4299, column: 29, scope: !8902)
!8908 = !DILocation(line: 4300, column: 7, scope: !8902)
!8909 = !DILocation(line: 4300, column: 23, scope: !8902)
!8910 = !DILocation(line: 4300, column: 10, scope: !8902)
!8911 = !DILocation(line: 4300, column: 29, scope: !8902)
!8912 = !DILocation(line: 4301, column: 7, scope: !8902)
!8913 = !DILocation(line: 4301, column: 26, scope: !8902)
!8914 = !DILocation(line: 4301, column: 10, scope: !8902)
!8915 = !DILocation(line: 4298, column: 7, scope: !8851)
!8916 = !DILocalVariable(name: "wi", scope: !8917, file: !3, line: 4303, type: !1806)
!8917 = distinct !DILexicalBlock(scope: !8902, file: !3, line: 4302, column: 5)
!8918 = !DILocation(line: 4303, column: 29, scope: !8917)
!8919 = !DILocalVariable(name: "count", scope: !8917, file: !3, line: 4304, type: !1825)
!8920 = !DILocation(line: 4304, column: 26, scope: !8917)
!8921 = !DILocation(line: 4306, column: 19, scope: !8917)
!8922 = !DILocation(line: 4306, column: 13, scope: !8917)
!8923 = !DILocation(line: 4306, column: 17, scope: !8917)
!8924 = !DILocation(line: 4307, column: 13, scope: !8917)
!8925 = !DILocation(line: 4307, column: 24, scope: !8917)
!8926 = !DILocation(line: 4308, column: 13, scope: !8917)
!8927 = !DILocation(line: 4308, column: 23, scope: !8917)
!8928 = !DILocation(line: 4310, column: 7, scope: !8917)
!8929 = !DILocation(line: 4311, column: 17, scope: !8917)
!8930 = !DILocation(line: 4311, column: 10, scope: !8917)
!8931 = !DILocation(line: 4311, column: 15, scope: !8917)
!8932 = !DILocation(line: 4312, column: 23, scope: !8917)
!8933 = !DILocation(line: 4312, column: 7, scope: !8917)
!8934 = !DILocation(line: 4314, column: 29, scope: !8917)
!8935 = !DILocation(line: 4314, column: 8, scope: !8917)
!8936 = !DILocation(line: 4314, column: 21, scope: !8917)
!8937 = !DILocation(line: 4315, column: 28, scope: !8917)
!8938 = !DILocation(line: 4315, column: 8, scope: !8917)
!8939 = !DILocation(line: 4315, column: 20, scope: !8917)
!8940 = !DILocation(line: 4316, column: 5, scope: !8917)
!8941 = !DILocation(line: 4318, column: 3, scope: !8851)
!8942 = !DILocation(line: 4319, column: 1, scope: !8851)
!8943 = distinct !DISubprogram(name: "op_iter_init_tree", scope: !8944, file: !8944, line: 792, type: !8945, scopeLine: 793, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!8944 = !DIFile(filename: "./tree-flow-inline.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!8945 = !DISubroutineType(types: !8946)
!8946 = !{!666, !8947, !594, !746}
!8947 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8866, size: 64)
!8948 = !DILocalVariable(name: "ptr", arg: 1, scope: !8943, file: !8944, line: 792, type: !8947)
!8949 = !DILocation(line: 792, column: 33, scope: !8943)
!8950 = !DILocalVariable(name: "stmt", arg: 2, scope: !8943, file: !8944, line: 792, type: !594)
!8951 = !DILocation(line: 792, column: 45, scope: !8943)
!8952 = !DILocalVariable(name: "flags", arg: 3, scope: !8943, file: !8944, line: 792, type: !746)
!8953 = !DILocation(line: 792, column: 55, scope: !8943)
!8954 = !DILocation(line: 794, column: 17, scope: !8943)
!8955 = !DILocation(line: 794, column: 22, scope: !8943)
!8956 = !DILocation(line: 794, column: 28, scope: !8943)
!8957 = !DILocation(line: 794, column: 3, scope: !8943)
!8958 = !DILocation(line: 795, column: 3, scope: !8943)
!8959 = !DILocation(line: 795, column: 8, scope: !8943)
!8960 = !DILocation(line: 795, column: 18, scope: !8943)
!8961 = !DILocation(line: 796, column: 29, scope: !8943)
!8962 = !DILocation(line: 796, column: 10, scope: !8943)
!8963 = !DILocation(line: 796, column: 3, scope: !8943)
!8964 = distinct !DISubprogram(name: "op_iter_done", scope: !8944, file: !8944, line: 652, type: !8965, scopeLine: 653, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!8965 = !DISubroutineType(types: !8966)
!8966 = !{!769, !8967}
!8967 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8968, size: 64)
!8968 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !8866)
!8969 = !DILocalVariable(name: "ptr", arg: 1, scope: !8964, file: !8944, line: 652, type: !8967)
!8970 = !DILocation(line: 652, column: 34, scope: !8964)
!8971 = !DILocation(line: 654, column: 10, scope: !8964)
!8972 = !DILocation(line: 654, column: 15, scope: !8964)
!8973 = !DILocation(line: 654, column: 3, scope: !8964)
!8974 = distinct !DISubprogram(name: "op_iter_next_tree", scope: !8944, file: !8944, line: 699, type: !8975, scopeLine: 700, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!8975 = !DISubroutineType(types: !8976)
!8976 = !{!666, !8947}
!8977 = !DILocalVariable(name: "ptr", arg: 1, scope: !8974, file: !8944, line: 699, type: !8947)
!8978 = !DILocation(line: 699, column: 33, scope: !8974)
!8979 = !DILocalVariable(name: "val", scope: !8974, file: !8944, line: 701, type: !666)
!8980 = !DILocation(line: 701, column: 8, scope: !8974)
!8981 = !DILocation(line: 705, column: 7, scope: !8982)
!8982 = distinct !DILexicalBlock(scope: !8974, file: !8944, line: 705, column: 7)
!8983 = !DILocation(line: 705, column: 12, scope: !8982)
!8984 = !DILocation(line: 705, column: 7, scope: !8974)
!8985 = !DILocation(line: 707, column: 13, scope: !8986)
!8986 = distinct !DILexicalBlock(scope: !8982, file: !8944, line: 706, column: 5)
!8987 = !DILocation(line: 707, column: 11, scope: !8986)
!8988 = !DILocation(line: 708, column: 19, scope: !8986)
!8989 = !DILocation(line: 708, column: 24, scope: !8986)
!8990 = !DILocation(line: 708, column: 30, scope: !8986)
!8991 = !DILocation(line: 708, column: 7, scope: !8986)
!8992 = !DILocation(line: 708, column: 12, scope: !8986)
!8993 = !DILocation(line: 708, column: 17, scope: !8986)
!8994 = !DILocation(line: 709, column: 14, scope: !8986)
!8995 = !DILocation(line: 709, column: 7, scope: !8986)
!8996 = !DILocation(line: 711, column: 7, scope: !8997)
!8997 = distinct !DILexicalBlock(scope: !8974, file: !8944, line: 711, column: 7)
!8998 = !DILocation(line: 711, column: 12, scope: !8997)
!8999 = !DILocation(line: 711, column: 7, scope: !8974)
!9000 = !DILocation(line: 713, column: 13, scope: !9001)
!9001 = distinct !DILexicalBlock(scope: !8997, file: !8944, line: 712, column: 5)
!9002 = !DILocation(line: 713, column: 11, scope: !9001)
!9003 = !DILocation(line: 714, column: 19, scope: !9001)
!9004 = !DILocation(line: 714, column: 24, scope: !9001)
!9005 = !DILocation(line: 714, column: 30, scope: !9001)
!9006 = !DILocation(line: 714, column: 7, scope: !9001)
!9007 = !DILocation(line: 714, column: 12, scope: !9001)
!9008 = !DILocation(line: 714, column: 17, scope: !9001)
!9009 = !DILocation(line: 715, column: 14, scope: !9001)
!9010 = !DILocation(line: 715, column: 7, scope: !9001)
!9011 = !DILocation(line: 718, column: 3, scope: !8974)
!9012 = !DILocation(line: 718, column: 8, scope: !8974)
!9013 = !DILocation(line: 718, column: 13, scope: !8974)
!9014 = !DILocation(line: 719, column: 3, scope: !8974)
!9015 = !DILocation(line: 721, column: 1, scope: !8974)
!9016 = distinct !DISubprogram(name: "count_ptr_derefs", scope: !3, file: !3, line: 4244, type: !4765, scopeLine: 4245, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!9017 = !DILocalVariable(name: "tp", arg: 1, scope: !9016, file: !3, line: 4244, type: !1127)
!9018 = !DILocation(line: 4244, column: 25, scope: !9016)
!9019 = !DILocalVariable(name: "walk_subtrees", arg: 2, scope: !9016, file: !3, line: 4244, type: !4767)
!9020 = !DILocation(line: 4244, column: 34, scope: !9016)
!9021 = !DILocalVariable(name: "data", arg: 3, scope: !9016, file: !3, line: 4244, type: !664)
!9022 = !DILocation(line: 4244, column: 55, scope: !9016)
!9023 = !DILocalVariable(name: "wi_p", scope: !9016, file: !3, line: 4246, type: !1805)
!9024 = !DILocation(line: 4246, column: 26, scope: !9016)
!9025 = !DILocation(line: 4246, column: 59, scope: !9016)
!9026 = !DILocation(line: 4246, column: 33, scope: !9016)
!9027 = !DILocalVariable(name: "count_p", scope: !9016, file: !3, line: 4247, type: !1824)
!9028 = !DILocation(line: 4247, column: 23, scope: !9016)
!9029 = !DILocation(line: 4247, column: 56, scope: !9016)
!9030 = !DILocation(line: 4247, column: 62, scope: !9016)
!9031 = !DILocation(line: 4247, column: 33, scope: !9016)
!9032 = !DILocation(line: 4252, column: 7, scope: !9033)
!9033 = distinct !DILexicalBlock(scope: !9016, file: !3, line: 4252, column: 7)
!9034 = !DILocation(line: 4252, column: 23, scope: !9033)
!9035 = !DILocation(line: 4252, column: 7, scope: !9016)
!9036 = !DILocation(line: 4254, column: 8, scope: !9037)
!9037 = distinct !DILexicalBlock(scope: !9033, file: !3, line: 4253, column: 5)
!9038 = !DILocation(line: 4254, column: 22, scope: !9037)
!9039 = !DILocation(line: 4255, column: 7, scope: !9037)
!9040 = !DILocation(line: 4258, column: 7, scope: !9041)
!9041 = distinct !DILexicalBlock(scope: !9016, file: !3, line: 4258, column: 7)
!9042 = !DILocation(line: 4258, column: 28, scope: !9041)
!9043 = !DILocation(line: 4258, column: 31, scope: !9041)
!9044 = !DILocation(line: 4258, column: 56, scope: !9041)
!9045 = !DILocation(line: 4258, column: 65, scope: !9041)
!9046 = !DILocation(line: 4258, column: 53, scope: !9041)
!9047 = !DILocation(line: 4258, column: 7, scope: !9016)
!9048 = !DILocation(line: 4260, column: 11, scope: !9049)
!9049 = distinct !DILexicalBlock(scope: !9050, file: !3, line: 4260, column: 11)
!9050 = distinct !DILexicalBlock(scope: !9041, file: !3, line: 4259, column: 5)
!9051 = !DILocation(line: 4260, column: 17, scope: !9049)
!9052 = !DILocation(line: 4260, column: 11, scope: !9050)
!9053 = !DILocation(line: 4261, column: 2, scope: !9049)
!9054 = !DILocation(line: 4261, column: 11, scope: !9049)
!9055 = !DILocation(line: 4261, column: 21, scope: !9049)
!9056 = !DILocation(line: 4263, column: 2, scope: !9049)
!9057 = !DILocation(line: 4263, column: 11, scope: !9049)
!9058 = !DILocation(line: 4263, column: 20, scope: !9049)
!9059 = !DILocation(line: 4264, column: 5, scope: !9050)
!9060 = !DILocation(line: 4266, column: 3, scope: !9016)
!9061 = !DILocation(line: 4267, column: 1, scope: !9016)
!9062 = distinct !DISubprogram(name: "walk_stmt_load_store_addr_ops", scope: !3, file: !3, line: 4344, type: !9063, scopeLine: 4348, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!9063 = !DISubroutineType(types: !9064)
!9064 = !{!769, !594, !664, !9065, !9065, !9065}
!9065 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9066, size: 64)
!9066 = !DISubroutineType(types: !9067)
!9067 = !{!769, !594, !666, !664}
!9068 = !DILocalVariable(name: "stmt", arg: 1, scope: !9062, file: !3, line: 4344, type: !594)
!9069 = !DILocation(line: 4344, column: 39, scope: !9062)
!9070 = !DILocalVariable(name: "data", arg: 2, scope: !9062, file: !3, line: 4344, type: !664)
!9071 = !DILocation(line: 4344, column: 51, scope: !9062)
!9072 = !DILocalVariable(name: "visit_load", arg: 3, scope: !9062, file: !3, line: 4345, type: !9065)
!9073 = !DILocation(line: 4345, column: 18, scope: !9062)
!9074 = !DILocalVariable(name: "visit_store", arg: 4, scope: !9062, file: !3, line: 4346, type: !9065)
!9075 = !DILocation(line: 4346, column: 18, scope: !9062)
!9076 = !DILocalVariable(name: "visit_addr", arg: 5, scope: !9062, file: !3, line: 4347, type: !9065)
!9077 = !DILocation(line: 4347, column: 18, scope: !9062)
!9078 = !DILocalVariable(name: "ret", scope: !9062, file: !3, line: 4349, type: !769)
!9079 = !DILocation(line: 4349, column: 8, scope: !9062)
!9080 = !DILocalVariable(name: "i", scope: !9062, file: !3, line: 4350, type: !7)
!9081 = !DILocation(line: 4350, column: 12, scope: !9062)
!9082 = !DILocation(line: 4351, column: 31, scope: !9083)
!9083 = distinct !DILexicalBlock(scope: !9062, file: !3, line: 4351, column: 7)
!9084 = !DILocation(line: 4351, column: 7, scope: !9083)
!9085 = !DILocation(line: 4351, column: 7, scope: !9062)
!9086 = !DILocalVariable(name: "lhs", scope: !9087, file: !3, line: 4353, type: !666)
!9087 = distinct !DILexicalBlock(scope: !9083, file: !3, line: 4352, column: 5)
!9088 = !DILocation(line: 4353, column: 12, scope: !9087)
!9089 = !DILocalVariable(name: "rhs", scope: !9087, file: !3, line: 4353, type: !666)
!9090 = !DILocation(line: 4353, column: 17, scope: !9087)
!9091 = !DILocation(line: 4354, column: 11, scope: !9092)
!9092 = distinct !DILexicalBlock(scope: !9087, file: !3, line: 4354, column: 11)
!9093 = !DILocation(line: 4354, column: 11, scope: !9087)
!9094 = !DILocation(line: 4356, column: 49, scope: !9095)
!9095 = distinct !DILexicalBlock(scope: !9092, file: !3, line: 4355, column: 2)
!9096 = !DILocation(line: 4356, column: 30, scope: !9095)
!9097 = !DILocation(line: 4356, column: 10, scope: !9095)
!9098 = !DILocation(line: 4356, column: 8, scope: !9095)
!9099 = !DILocation(line: 4357, column: 8, scope: !9100)
!9100 = distinct !DILexicalBlock(scope: !9095, file: !3, line: 4357, column: 8)
!9101 = !DILocation(line: 4357, column: 8, scope: !9095)
!9102 = !DILocation(line: 4358, column: 13, scope: !9100)
!9103 = !DILocation(line: 4358, column: 26, scope: !9100)
!9104 = !DILocation(line: 4358, column: 32, scope: !9100)
!9105 = !DILocation(line: 4358, column: 37, scope: !9100)
!9106 = !DILocation(line: 4358, column: 10, scope: !9100)
!9107 = !DILocation(line: 4358, column: 6, scope: !9100)
!9108 = !DILocation(line: 4359, column: 2, scope: !9095)
!9109 = !DILocation(line: 4360, column: 33, scope: !9087)
!9110 = !DILocation(line: 4360, column: 13, scope: !9087)
!9111 = !DILocation(line: 4360, column: 11, scope: !9087)
!9112 = !DILocation(line: 4361, column: 7, scope: !9087)
!9113 = !DILocation(line: 4361, column: 35, scope: !9087)
!9114 = !DILocation(line: 4361, column: 14, scope: !9087)
!9115 = !DILocation(line: 4362, column: 8, scope: !9087)
!9116 = !DILocation(line: 4362, column: 6, scope: !9087)
!9117 = distinct !{!9117, !9112, !9115}
!9118 = !DILocation(line: 4363, column: 11, scope: !9119)
!9119 = distinct !DILexicalBlock(scope: !9087, file: !3, line: 4363, column: 11)
!9120 = !DILocation(line: 4363, column: 11, scope: !9087)
!9121 = !DILocation(line: 4365, column: 8, scope: !9122)
!9122 = distinct !DILexicalBlock(scope: !9123, file: !3, line: 4365, column: 8)
!9123 = distinct !DILexicalBlock(scope: !9119, file: !3, line: 4364, column: 2)
!9124 = !DILocation(line: 4365, column: 24, scope: !9122)
!9125 = !DILocation(line: 4365, column: 8, scope: !9123)
!9126 = !DILocation(line: 4366, column: 13, scope: !9122)
!9127 = !DILocation(line: 4366, column: 25, scope: !9122)
!9128 = !DILocation(line: 4366, column: 31, scope: !9122)
!9129 = !DILocation(line: 4366, column: 54, scope: !9122)
!9130 = !DILocation(line: 4366, column: 10, scope: !9122)
!9131 = !DILocation(line: 4366, column: 6, scope: !9122)
!9132 = !DILocation(line: 4367, column: 13, scope: !9133)
!9133 = distinct !DILexicalBlock(scope: !9122, file: !3, line: 4367, column: 13)
!9134 = !DILocation(line: 4367, column: 29, scope: !9133)
!9135 = !DILocation(line: 4368, column: 20, scope: !9133)
!9136 = !DILocation(line: 4368, column: 23, scope: !9133)
!9137 = !DILocation(line: 4368, column: 38, scope: !9133)
!9138 = !DILocation(line: 4369, column: 6, scope: !9133)
!9139 = !DILocation(line: 4369, column: 9, scope: !9133)
!9140 = !DILocation(line: 4369, column: 36, scope: !9133)
!9141 = !DILocation(line: 4367, column: 13, scope: !9122)
!9142 = !DILocation(line: 4370, column: 13, scope: !9133)
!9143 = !DILocation(line: 4370, column: 25, scope: !9133)
!9144 = !DILocation(line: 4370, column: 31, scope: !9133)
!9145 = !DILocation(line: 4370, column: 65, scope: !9133)
!9146 = !DILocation(line: 4370, column: 10, scope: !9133)
!9147 = !DILocation(line: 4370, column: 6, scope: !9133)
!9148 = !DILocation(line: 4371, column: 13, scope: !9149)
!9149 = distinct !DILexicalBlock(scope: !9133, file: !3, line: 4371, column: 13)
!9150 = !DILocation(line: 4371, column: 29, scope: !9149)
!9151 = !DILocation(line: 4372, column: 6, scope: !9149)
!9152 = !DILocation(line: 4372, column: 9, scope: !9149)
!9153 = !DILocation(line: 4372, column: 47, scope: !9149)
!9154 = !DILocation(line: 4371, column: 13, scope: !9133)
!9155 = !DILocation(line: 4373, column: 13, scope: !9149)
!9156 = !DILocation(line: 4373, column: 25, scope: !9149)
!9157 = !DILocation(line: 4373, column: 31, scope: !9149)
!9158 = !DILocation(line: 4374, column: 14, scope: !9149)
!9159 = !DILocation(line: 4373, column: 10, scope: !9149)
!9160 = !DILocation(line: 4373, column: 6, scope: !9149)
!9161 = !DILocation(line: 4375, column: 36, scope: !9123)
!9162 = !DILocation(line: 4375, column: 17, scope: !9123)
!9163 = !DILocation(line: 4375, column: 15, scope: !9123)
!9164 = !DILocation(line: 4376, column: 8, scope: !9165)
!9165 = distinct !DILexicalBlock(scope: !9123, file: !3, line: 4376, column: 8)
!9166 = !DILocation(line: 4376, column: 24, scope: !9165)
!9167 = !DILocation(line: 4377, column: 15, scope: !9165)
!9168 = !DILocation(line: 4377, column: 18, scope: !9165)
!9169 = !DILocation(line: 4377, column: 33, scope: !9165)
!9170 = !DILocation(line: 4378, column: 15, scope: !9165)
!9171 = !DILocation(line: 4378, column: 18, scope: !9165)
!9172 = !DILocation(line: 4378, column: 45, scope: !9165)
!9173 = !DILocation(line: 4376, column: 8, scope: !9123)
!9174 = !DILocation(line: 4379, column: 20, scope: !9165)
!9175 = !DILocation(line: 4379, column: 32, scope: !9165)
!9176 = !DILocation(line: 4379, column: 38, scope: !9165)
!9177 = !DILocation(line: 4379, column: 72, scope: !9165)
!9178 = !DILocation(line: 4379, column: 17, scope: !9165)
!9179 = !DILocation(line: 4379, column: 13, scope: !9165)
!9180 = !DILocation(line: 4380, column: 2, scope: !9123)
!9181 = !DILocation(line: 4381, column: 11, scope: !9182)
!9182 = distinct !DILexicalBlock(scope: !9087, file: !3, line: 4381, column: 11)
!9183 = !DILocation(line: 4381, column: 11, scope: !9087)
!9184 = !DILocation(line: 4383, column: 30, scope: !9185)
!9185 = distinct !DILexicalBlock(scope: !9182, file: !3, line: 4382, column: 2)
!9186 = !DILocation(line: 4383, column: 10, scope: !9185)
!9187 = !DILocation(line: 4383, column: 8, scope: !9185)
!9188 = !DILocation(line: 4384, column: 8, scope: !9189)
!9189 = distinct !DILexicalBlock(scope: !9185, file: !3, line: 4384, column: 8)
!9190 = !DILocation(line: 4384, column: 8, scope: !9185)
!9191 = !DILocation(line: 4385, column: 13, scope: !9189)
!9192 = !DILocation(line: 4385, column: 25, scope: !9189)
!9193 = !DILocation(line: 4385, column: 31, scope: !9189)
!9194 = !DILocation(line: 4385, column: 36, scope: !9189)
!9195 = !DILocation(line: 4385, column: 10, scope: !9189)
!9196 = !DILocation(line: 4385, column: 6, scope: !9189)
!9197 = !DILocation(line: 4386, column: 2, scope: !9185)
!9198 = !DILocation(line: 4387, column: 5, scope: !9087)
!9199 = !DILocation(line: 4388, column: 12, scope: !9200)
!9200 = distinct !DILexicalBlock(scope: !9083, file: !3, line: 4388, column: 12)
!9201 = !DILocation(line: 4389, column: 5, scope: !9200)
!9202 = !DILocation(line: 4389, column: 27, scope: !9200)
!9203 = !DILocation(line: 4389, column: 9, scope: !9200)
!9204 = !DILocation(line: 4390, column: 9, scope: !9200)
!9205 = !DILocation(line: 4390, column: 25, scope: !9200)
!9206 = !DILocation(line: 4390, column: 12, scope: !9200)
!9207 = !DILocation(line: 4390, column: 31, scope: !9200)
!9208 = !DILocation(line: 4388, column: 12, scope: !9083)
!9209 = !DILocation(line: 4392, column: 14, scope: !9210)
!9210 = distinct !DILexicalBlock(scope: !9211, file: !3, line: 4392, column: 7)
!9211 = distinct !DILexicalBlock(scope: !9200, file: !3, line: 4391, column: 5)
!9212 = !DILocation(line: 4392, column: 12, scope: !9210)
!9213 = !DILocation(line: 4392, column: 19, scope: !9214)
!9214 = distinct !DILexicalBlock(scope: !9210, file: !3, line: 4392, column: 7)
!9215 = !DILocation(line: 4392, column: 39, scope: !9214)
!9216 = !DILocation(line: 4392, column: 23, scope: !9214)
!9217 = !DILocation(line: 4392, column: 21, scope: !9214)
!9218 = !DILocation(line: 4392, column: 7, scope: !9210)
!9219 = !DILocation(line: 4393, column: 17, scope: !9220)
!9220 = distinct !DILexicalBlock(scope: !9214, file: !3, line: 4393, column: 6)
!9221 = !DILocation(line: 4393, column: 23, scope: !9220)
!9222 = !DILocation(line: 4393, column: 6, scope: !9220)
!9223 = !DILocation(line: 4394, column: 6, scope: !9220)
!9224 = !DILocation(line: 4394, column: 9, scope: !9220)
!9225 = !DILocation(line: 4394, column: 41, scope: !9220)
!9226 = !DILocation(line: 4393, column: 6, scope: !9214)
!9227 = !DILocation(line: 4395, column: 11, scope: !9220)
!9228 = !DILocation(line: 4395, column: 23, scope: !9220)
!9229 = !DILocation(line: 4395, column: 29, scope: !9220)
!9230 = !DILocation(line: 4395, column: 68, scope: !9220)
!9231 = !DILocation(line: 4395, column: 8, scope: !9220)
!9232 = !DILocation(line: 4395, column: 4, scope: !9220)
!9233 = !DILocation(line: 4394, column: 44, scope: !9220)
!9234 = !DILocation(line: 4392, column: 46, scope: !9214)
!9235 = !DILocation(line: 4392, column: 7, scope: !9214)
!9236 = distinct !{!9236, !9218, !9237}
!9237 = !DILocation(line: 4395, column: 72, scope: !9210)
!9238 = !DILocation(line: 4396, column: 5, scope: !9211)
!9239 = !DILocation(line: 4397, column: 28, scope: !9240)
!9240 = distinct !DILexicalBlock(scope: !9200, file: !3, line: 4397, column: 12)
!9241 = !DILocation(line: 4397, column: 12, scope: !9240)
!9242 = !DILocation(line: 4397, column: 12, scope: !9200)
!9243 = !DILocation(line: 4399, column: 11, scope: !9244)
!9244 = distinct !DILexicalBlock(scope: !9245, file: !3, line: 4399, column: 11)
!9245 = distinct !DILexicalBlock(scope: !9240, file: !3, line: 4398, column: 5)
!9246 = !DILocation(line: 4399, column: 11, scope: !9245)
!9247 = !DILocalVariable(name: "lhs", scope: !9248, file: !3, line: 4401, type: !666)
!9248 = distinct !DILexicalBlock(scope: !9244, file: !3, line: 4400, column: 2)
!9249 = !DILocation(line: 4401, column: 9, scope: !9248)
!9250 = !DILocation(line: 4401, column: 32, scope: !9248)
!9251 = !DILocation(line: 4401, column: 15, scope: !9248)
!9252 = !DILocation(line: 4402, column: 8, scope: !9253)
!9253 = distinct !DILexicalBlock(scope: !9248, file: !3, line: 4402, column: 8)
!9254 = !DILocation(line: 4402, column: 8, scope: !9248)
!9255 = !DILocation(line: 4404, column: 34, scope: !9256)
!9256 = distinct !DILexicalBlock(scope: !9253, file: !3, line: 4403, column: 6)
!9257 = !DILocation(line: 4404, column: 14, scope: !9256)
!9258 = !DILocation(line: 4404, column: 12, scope: !9256)
!9259 = !DILocation(line: 4405, column: 12, scope: !9260)
!9260 = distinct !DILexicalBlock(scope: !9256, file: !3, line: 4405, column: 12)
!9261 = !DILocation(line: 4405, column: 12, scope: !9256)
!9262 = !DILocation(line: 4406, column: 10, scope: !9260)
!9263 = !DILocation(line: 4406, column: 23, scope: !9260)
!9264 = !DILocation(line: 4406, column: 29, scope: !9260)
!9265 = !DILocation(line: 4406, column: 34, scope: !9260)
!9266 = !DILocation(line: 4406, column: 7, scope: !9260)
!9267 = !DILocation(line: 4406, column: 3, scope: !9260)
!9268 = !DILocation(line: 4407, column: 6, scope: !9256)
!9269 = !DILocation(line: 4408, column: 2, scope: !9248)
!9270 = !DILocation(line: 4409, column: 11, scope: !9271)
!9271 = distinct !DILexicalBlock(scope: !9245, file: !3, line: 4409, column: 11)
!9272 = !DILocation(line: 4409, column: 22, scope: !9271)
!9273 = !DILocation(line: 4409, column: 25, scope: !9271)
!9274 = !DILocation(line: 4409, column: 11, scope: !9245)
!9275 = !DILocation(line: 4410, column: 9, scope: !9276)
!9276 = distinct !DILexicalBlock(scope: !9271, file: !3, line: 4410, column: 2)
!9277 = !DILocation(line: 4410, column: 7, scope: !9276)
!9278 = !DILocation(line: 4410, column: 14, scope: !9279)
!9279 = distinct !DILexicalBlock(scope: !9276, file: !3, line: 4410, column: 2)
!9280 = !DILocation(line: 4410, column: 40, scope: !9279)
!9281 = !DILocation(line: 4410, column: 18, scope: !9279)
!9282 = !DILocation(line: 4410, column: 16, scope: !9279)
!9283 = !DILocation(line: 4410, column: 2, scope: !9276)
!9284 = !DILocalVariable(name: "rhs", scope: !9285, file: !3, line: 4412, type: !666)
!9285 = distinct !DILexicalBlock(scope: !9279, file: !3, line: 4411, column: 4)
!9286 = !DILocation(line: 4412, column: 11, scope: !9285)
!9287 = !DILocation(line: 4412, column: 34, scope: !9285)
!9288 = !DILocation(line: 4412, column: 40, scope: !9285)
!9289 = !DILocation(line: 4412, column: 17, scope: !9285)
!9290 = !DILocation(line: 4413, column: 10, scope: !9291)
!9291 = distinct !DILexicalBlock(scope: !9285, file: !3, line: 4413, column: 10)
!9292 = !DILocation(line: 4414, column: 3, scope: !9291)
!9293 = !DILocation(line: 4414, column: 6, scope: !9291)
!9294 = !DILocation(line: 4414, column: 22, scope: !9291)
!9295 = !DILocation(line: 4413, column: 10, scope: !9285)
!9296 = !DILocation(line: 4415, column: 15, scope: !9291)
!9297 = !DILocation(line: 4415, column: 27, scope: !9291)
!9298 = !DILocation(line: 4415, column: 33, scope: !9291)
!9299 = !DILocation(line: 4415, column: 56, scope: !9291)
!9300 = !DILocation(line: 4415, column: 12, scope: !9291)
!9301 = !DILocation(line: 4415, column: 8, scope: !9291)
!9302 = !DILocation(line: 4416, column: 15, scope: !9303)
!9303 = distinct !DILexicalBlock(scope: !9291, file: !3, line: 4416, column: 15)
!9304 = !DILocation(line: 4416, column: 15, scope: !9291)
!9305 = !DILocation(line: 4418, column: 29, scope: !9306)
!9306 = distinct !DILexicalBlock(scope: !9303, file: !3, line: 4417, column: 8)
!9307 = !DILocation(line: 4418, column: 9, scope: !9306)
!9308 = !DILocation(line: 4418, column: 7, scope: !9306)
!9309 = !DILocation(line: 4419, column: 7, scope: !9310)
!9310 = distinct !DILexicalBlock(scope: !9306, file: !3, line: 4419, column: 7)
!9311 = !DILocation(line: 4419, column: 7, scope: !9306)
!9312 = !DILocation(line: 4420, column: 12, scope: !9310)
!9313 = !DILocation(line: 4420, column: 24, scope: !9310)
!9314 = !DILocation(line: 4420, column: 30, scope: !9310)
!9315 = !DILocation(line: 4420, column: 35, scope: !9310)
!9316 = !DILocation(line: 4420, column: 9, scope: !9310)
!9317 = !DILocation(line: 4420, column: 5, scope: !9310)
!9318 = !DILocation(line: 4421, column: 8, scope: !9306)
!9319 = !DILocation(line: 4422, column: 4, scope: !9285)
!9320 = !DILocation(line: 4410, column: 47, scope: !9279)
!9321 = !DILocation(line: 4410, column: 2, scope: !9279)
!9322 = distinct !{!9322, !9283, !9323}
!9323 = !DILocation(line: 4422, column: 4, scope: !9276)
!9324 = !DILocation(line: 4423, column: 11, scope: !9325)
!9325 = distinct !DILexicalBlock(scope: !9245, file: !3, line: 4423, column: 11)
!9326 = !DILocation(line: 4424, column: 4, scope: !9325)
!9327 = !DILocation(line: 4424, column: 26, scope: !9325)
!9328 = !DILocation(line: 4424, column: 7, scope: !9325)
!9329 = !DILocation(line: 4425, column: 4, scope: !9325)
!9330 = !DILocation(line: 4425, column: 7, scope: !9325)
!9331 = !DILocation(line: 4425, column: 44, scope: !9325)
!9332 = !DILocation(line: 4423, column: 11, scope: !9245)
!9333 = !DILocation(line: 4426, column: 9, scope: !9325)
!9334 = !DILocation(line: 4426, column: 21, scope: !9325)
!9335 = !DILocation(line: 4426, column: 27, scope: !9325)
!9336 = !DILocation(line: 4427, column: 7, scope: !9325)
!9337 = !DILocation(line: 4426, column: 6, scope: !9325)
!9338 = !DILocation(line: 4426, column: 2, scope: !9325)
!9339 = !DILocation(line: 4428, column: 11, scope: !9340)
!9340 = distinct !DILexicalBlock(scope: !9245, file: !3, line: 4428, column: 11)
!9341 = !DILocation(line: 4429, column: 4, scope: !9340)
!9342 = !DILocation(line: 4429, column: 38, scope: !9340)
!9343 = !DILocation(line: 4429, column: 7, scope: !9340)
!9344 = !DILocation(line: 4430, column: 4, scope: !9340)
!9345 = !DILocation(line: 4430, column: 24, scope: !9340)
!9346 = !DILocation(line: 4430, column: 7, scope: !9340)
!9347 = !DILocation(line: 4430, column: 30, scope: !9340)
!9348 = !DILocation(line: 4431, column: 4, scope: !9340)
!9349 = !DILocation(line: 4431, column: 7, scope: !9340)
!9350 = !DILocation(line: 4428, column: 11, scope: !9245)
!9351 = !DILocation(line: 4432, column: 9, scope: !9340)
!9352 = !DILocation(line: 4432, column: 21, scope: !9340)
!9353 = !DILocation(line: 4432, column: 44, scope: !9340)
!9354 = !DILocation(line: 4432, column: 27, scope: !9340)
!9355 = !DILocation(line: 4432, column: 51, scope: !9340)
!9356 = !DILocation(line: 4432, column: 6, scope: !9340)
!9357 = !DILocation(line: 4432, column: 2, scope: !9340)
!9358 = !DILocation(line: 4433, column: 5, scope: !9245)
!9359 = !DILocation(line: 4434, column: 25, scope: !9360)
!9360 = distinct !DILexicalBlock(scope: !9240, file: !3, line: 4434, column: 12)
!9361 = !DILocation(line: 4434, column: 12, scope: !9360)
!9362 = !DILocation(line: 4434, column: 31, scope: !9360)
!9363 = !DILocation(line: 4434, column: 12, scope: !9240)
!9364 = !DILocalVariable(name: "noutputs", scope: !9365, file: !3, line: 4436, type: !7)
!9365 = distinct !DILexicalBlock(scope: !9360, file: !3, line: 4435, column: 5)
!9366 = !DILocation(line: 4436, column: 16, scope: !9365)
!9367 = !DILocalVariable(name: "constraint", scope: !9365, file: !3, line: 4437, type: !1161)
!9368 = !DILocation(line: 4437, column: 19, scope: !9365)
!9369 = !DILocalVariable(name: "oconstraints", scope: !9365, file: !3, line: 4438, type: !1776)
!9370 = !DILocation(line: 4438, column: 20, scope: !9365)
!9371 = !DILocalVariable(name: "allows_mem", scope: !9365, file: !3, line: 4439, type: !769)
!9372 = !DILocation(line: 4439, column: 12, scope: !9365)
!9373 = !DILocalVariable(name: "allows_reg", scope: !9365, file: !3, line: 4439, type: !769)
!9374 = !DILocation(line: 4439, column: 24, scope: !9365)
!9375 = !DILocalVariable(name: "is_inout", scope: !9365, file: !3, line: 4439, type: !769)
!9376 = !DILocation(line: 4439, column: 36, scope: !9365)
!9377 = !DILocation(line: 4440, column: 39, scope: !9365)
!9378 = !DILocation(line: 4440, column: 18, scope: !9365)
!9379 = !DILocation(line: 4440, column: 16, scope: !9365)
!9380 = !DILocation(line: 4441, column: 22, scope: !9365)
!9381 = !DILocation(line: 4441, column: 20, scope: !9365)
!9382 = !DILocation(line: 4442, column: 11, scope: !9383)
!9383 = distinct !DILexicalBlock(scope: !9365, file: !3, line: 4442, column: 11)
!9384 = !DILocation(line: 4442, column: 23, scope: !9383)
!9385 = !DILocation(line: 4442, column: 26, scope: !9383)
!9386 = !DILocation(line: 4442, column: 11, scope: !9365)
!9387 = !DILocation(line: 4443, column: 9, scope: !9388)
!9388 = distinct !DILexicalBlock(scope: !9383, file: !3, line: 4443, column: 2)
!9389 = !DILocation(line: 4443, column: 7, scope: !9388)
!9390 = !DILocation(line: 4443, column: 14, scope: !9391)
!9391 = distinct !DILexicalBlock(scope: !9388, file: !3, line: 4443, column: 2)
!9392 = !DILocation(line: 4443, column: 39, scope: !9391)
!9393 = !DILocation(line: 4443, column: 18, scope: !9391)
!9394 = !DILocation(line: 4443, column: 16, scope: !9391)
!9395 = !DILocation(line: 4443, column: 2, scope: !9388)
!9396 = !DILocalVariable(name: "link", scope: !9397, file: !3, line: 4445, type: !666)
!9397 = distinct !DILexicalBlock(scope: !9391, file: !3, line: 4444, column: 4)
!9398 = !DILocation(line: 4445, column: 11, scope: !9397)
!9399 = !DILocation(line: 4445, column: 40, scope: !9397)
!9400 = !DILocation(line: 4445, column: 46, scope: !9397)
!9401 = !DILocation(line: 4445, column: 18, scope: !9397)
!9402 = !DILocalVariable(name: "op", scope: !9397, file: !3, line: 4446, type: !666)
!9403 = !DILocation(line: 4446, column: 11, scope: !9397)
!9404 = !DILocation(line: 4446, column: 36, scope: !9397)
!9405 = !DILocation(line: 4446, column: 16, scope: !9397)
!9406 = !DILocation(line: 4447, column: 10, scope: !9407)
!9407 = distinct !DILexicalBlock(scope: !9397, file: !3, line: 4447, column: 10)
!9408 = !DILocation(line: 4447, column: 13, scope: !9407)
!9409 = !DILocation(line: 4447, column: 16, scope: !9407)
!9410 = !DILocation(line: 4447, column: 10, scope: !9397)
!9411 = !DILocation(line: 4448, column: 15, scope: !9407)
!9412 = !DILocation(line: 4448, column: 28, scope: !9407)
!9413 = !DILocation(line: 4448, column: 34, scope: !9407)
!9414 = !DILocation(line: 4448, column: 38, scope: !9407)
!9415 = !DILocation(line: 4448, column: 12, scope: !9407)
!9416 = !DILocation(line: 4448, column: 8, scope: !9407)
!9417 = !DILocation(line: 4449, column: 10, scope: !9418)
!9418 = distinct !DILexicalBlock(scope: !9397, file: !3, line: 4449, column: 10)
!9419 = !DILocation(line: 4449, column: 10, scope: !9397)
!9420 = !DILocation(line: 4451, column: 16, scope: !9421)
!9421 = distinct !DILexicalBlock(scope: !9418, file: !3, line: 4450, column: 8)
!9422 = !DILocation(line: 4451, column: 14, scope: !9421)
!9423 = !DILocation(line: 4453, column: 21, scope: !9421)
!9424 = !DILocation(line: 4453, column: 3, scope: !9421)
!9425 = !DILocation(line: 4453, column: 16, scope: !9421)
!9426 = !DILocation(line: 4453, column: 19, scope: !9421)
!9427 = !DILocation(line: 4454, column: 41, scope: !9421)
!9428 = !DILocation(line: 4454, column: 3, scope: !9421)
!9429 = !DILocation(line: 4456, column: 7, scope: !9430)
!9430 = distinct !DILexicalBlock(scope: !9421, file: !3, line: 4456, column: 7)
!9431 = !DILocation(line: 4456, column: 10, scope: !9430)
!9432 = !DILocation(line: 4456, column: 14, scope: !9430)
!9433 = !DILocation(line: 4456, column: 25, scope: !9430)
!9434 = !DILocation(line: 4456, column: 28, scope: !9430)
!9435 = !DILocation(line: 4456, column: 7, scope: !9421)
!9436 = !DILocation(line: 4457, column: 12, scope: !9430)
!9437 = !DILocation(line: 4457, column: 24, scope: !9430)
!9438 = !DILocation(line: 4457, column: 30, scope: !9430)
!9439 = !DILocation(line: 4457, column: 34, scope: !9430)
!9440 = !DILocation(line: 4457, column: 9, scope: !9430)
!9441 = !DILocation(line: 4457, column: 5, scope: !9430)
!9442 = !DILocation(line: 4458, column: 8, scope: !9421)
!9443 = !DILocation(line: 4459, column: 4, scope: !9397)
!9444 = !DILocation(line: 4443, column: 46, scope: !9391)
!9445 = !DILocation(line: 4443, column: 2, scope: !9391)
!9446 = distinct !{!9446, !9395, !9447}
!9447 = !DILocation(line: 4459, column: 4, scope: !9388)
!9448 = !DILocation(line: 4460, column: 11, scope: !9449)
!9449 = distinct !DILexicalBlock(scope: !9365, file: !3, line: 4460, column: 11)
!9450 = !DILocation(line: 4460, column: 22, scope: !9449)
!9451 = !DILocation(line: 4460, column: 25, scope: !9449)
!9452 = !DILocation(line: 4460, column: 11, scope: !9365)
!9453 = !DILocation(line: 4461, column: 9, scope: !9454)
!9454 = distinct !DILexicalBlock(scope: !9449, file: !3, line: 4461, column: 2)
!9455 = !DILocation(line: 4461, column: 7, scope: !9454)
!9456 = !DILocation(line: 4461, column: 14, scope: !9457)
!9457 = distinct !DILexicalBlock(scope: !9454, file: !3, line: 4461, column: 2)
!9458 = !DILocation(line: 4461, column: 38, scope: !9457)
!9459 = !DILocation(line: 4461, column: 18, scope: !9457)
!9460 = !DILocation(line: 4461, column: 16, scope: !9457)
!9461 = !DILocation(line: 4461, column: 2, scope: !9454)
!9462 = !DILocalVariable(name: "link", scope: !9463, file: !3, line: 4463, type: !666)
!9463 = distinct !DILexicalBlock(scope: !9457, file: !3, line: 4462, column: 4)
!9464 = !DILocation(line: 4463, column: 11, scope: !9463)
!9465 = !DILocation(line: 4463, column: 39, scope: !9463)
!9466 = !DILocation(line: 4463, column: 45, scope: !9463)
!9467 = !DILocation(line: 4463, column: 18, scope: !9463)
!9468 = !DILocalVariable(name: "op", scope: !9463, file: !3, line: 4464, type: !666)
!9469 = !DILocation(line: 4464, column: 11, scope: !9463)
!9470 = !DILocation(line: 4464, column: 16, scope: !9463)
!9471 = !DILocation(line: 4465, column: 10, scope: !9472)
!9472 = distinct !DILexicalBlock(scope: !9463, file: !3, line: 4465, column: 10)
!9473 = !DILocation(line: 4466, column: 3, scope: !9472)
!9474 = !DILocation(line: 4466, column: 6, scope: !9472)
!9475 = !DILocation(line: 4466, column: 21, scope: !9472)
!9476 = !DILocation(line: 4465, column: 10, scope: !9463)
!9477 = !DILocation(line: 4467, column: 15, scope: !9472)
!9478 = !DILocation(line: 4467, column: 27, scope: !9472)
!9479 = !DILocation(line: 4467, column: 33, scope: !9472)
!9480 = !DILocation(line: 4467, column: 55, scope: !9472)
!9481 = !DILocation(line: 4467, column: 12, scope: !9472)
!9482 = !DILocation(line: 4467, column: 8, scope: !9472)
!9483 = !DILocation(line: 4468, column: 15, scope: !9484)
!9484 = distinct !DILexicalBlock(scope: !9472, file: !3, line: 4468, column: 15)
!9485 = !DILocation(line: 4468, column: 26, scope: !9484)
!9486 = !DILocation(line: 4468, column: 29, scope: !9484)
!9487 = !DILocation(line: 4468, column: 15, scope: !9472)
!9488 = !DILocation(line: 4470, column: 28, scope: !9489)
!9489 = distinct !DILexicalBlock(scope: !9484, file: !3, line: 4469, column: 8)
!9490 = !DILocation(line: 4470, column: 8, scope: !9489)
!9491 = !DILocation(line: 4470, column: 6, scope: !9489)
!9492 = !DILocation(line: 4471, column: 7, scope: !9493)
!9493 = distinct !DILexicalBlock(scope: !9489, file: !3, line: 4471, column: 7)
!9494 = !DILocation(line: 4471, column: 7, scope: !9489)
!9495 = !DILocation(line: 4473, column: 11, scope: !9496)
!9496 = distinct !DILexicalBlock(scope: !9497, file: !3, line: 4473, column: 11)
!9497 = distinct !DILexicalBlock(scope: !9493, file: !3, line: 4472, column: 5)
!9498 = !DILocation(line: 4473, column: 11, scope: !9497)
!9499 = !DILocation(line: 4474, column: 16, scope: !9496)
!9500 = !DILocation(line: 4474, column: 28, scope: !9496)
!9501 = !DILocation(line: 4474, column: 34, scope: !9496)
!9502 = !DILocation(line: 4474, column: 38, scope: !9496)
!9503 = !DILocation(line: 4474, column: 13, scope: !9496)
!9504 = !DILocation(line: 4474, column: 9, scope: !9496)
!9505 = !DILocation(line: 4475, column: 11, scope: !9506)
!9506 = distinct !DILexicalBlock(scope: !9497, file: !3, line: 4475, column: 11)
!9507 = !DILocation(line: 4475, column: 11, scope: !9497)
!9508 = !DILocation(line: 4477, column: 17, scope: !9509)
!9509 = distinct !DILexicalBlock(scope: !9506, file: !3, line: 4476, column: 9)
!9510 = !DILocation(line: 4477, column: 15, scope: !9509)
!9511 = !DILocation(line: 4479, column: 47, scope: !9509)
!9512 = !DILocation(line: 4480, column: 10, scope: !9509)
!9513 = !DILocation(line: 4479, column: 4, scope: !9509)
!9514 = !DILocation(line: 4482, column: 9, scope: !9515)
!9515 = distinct !DILexicalBlock(scope: !9509, file: !3, line: 4482, column: 8)
!9516 = !DILocation(line: 4482, column: 20, scope: !9515)
!9517 = !DILocation(line: 4482, column: 23, scope: !9515)
!9518 = !DILocation(line: 4482, column: 8, scope: !9509)
!9519 = !DILocation(line: 4483, column: 13, scope: !9515)
!9520 = !DILocation(line: 4483, column: 25, scope: !9515)
!9521 = !DILocation(line: 4483, column: 31, scope: !9515)
!9522 = !DILocation(line: 4483, column: 35, scope: !9515)
!9523 = !DILocation(line: 4483, column: 10, scope: !9515)
!9524 = !DILocation(line: 4483, column: 6, scope: !9515)
!9525 = !DILocation(line: 4484, column: 9, scope: !9509)
!9526 = !DILocation(line: 4485, column: 5, scope: !9497)
!9527 = !DILocation(line: 4486, column: 8, scope: !9489)
!9528 = !DILocation(line: 4487, column: 4, scope: !9463)
!9529 = !DILocation(line: 4461, column: 45, scope: !9457)
!9530 = !DILocation(line: 4461, column: 2, scope: !9457)
!9531 = distinct !{!9531, !9461, !9532}
!9532 = !DILocation(line: 4487, column: 4, scope: !9454)
!9533 = !DILocation(line: 4488, column: 5, scope: !9365)
!9534 = !DILocation(line: 4489, column: 25, scope: !9535)
!9535 = distinct !DILexicalBlock(scope: !9360, file: !3, line: 4489, column: 12)
!9536 = !DILocation(line: 4489, column: 12, scope: !9535)
!9537 = !DILocation(line: 4489, column: 31, scope: !9535)
!9538 = !DILocation(line: 4489, column: 12, scope: !9360)
!9539 = !DILocalVariable(name: "op", scope: !9540, file: !3, line: 4491, type: !666)
!9540 = distinct !DILexicalBlock(scope: !9535, file: !3, line: 4490, column: 5)
!9541 = !DILocation(line: 4491, column: 12, scope: !9540)
!9542 = !DILocation(line: 4491, column: 39, scope: !9540)
!9543 = !DILocation(line: 4491, column: 17, scope: !9540)
!9544 = !DILocation(line: 4492, column: 11, scope: !9545)
!9545 = distinct !DILexicalBlock(scope: !9540, file: !3, line: 4492, column: 11)
!9546 = !DILocation(line: 4492, column: 11, scope: !9540)
!9547 = !DILocation(line: 4494, column: 8, scope: !9548)
!9548 = distinct !DILexicalBlock(scope: !9549, file: !3, line: 4494, column: 8)
!9549 = distinct !DILexicalBlock(scope: !9545, file: !3, line: 4493, column: 2)
!9550 = !DILocation(line: 4495, column: 8, scope: !9548)
!9551 = !DILocation(line: 4495, column: 11, scope: !9548)
!9552 = !DILocation(line: 4495, column: 26, scope: !9548)
!9553 = !DILocation(line: 4494, column: 8, scope: !9549)
!9554 = !DILocation(line: 4496, column: 13, scope: !9548)
!9555 = !DILocation(line: 4496, column: 25, scope: !9548)
!9556 = !DILocation(line: 4496, column: 31, scope: !9548)
!9557 = !DILocation(line: 4496, column: 53, scope: !9548)
!9558 = !DILocation(line: 4496, column: 10, scope: !9548)
!9559 = !DILocation(line: 4496, column: 6, scope: !9548)
!9560 = !DILocation(line: 4497, column: 13, scope: !9561)
!9561 = distinct !DILexicalBlock(scope: !9548, file: !3, line: 4497, column: 13)
!9562 = !DILocation(line: 4497, column: 13, scope: !9548)
!9563 = !DILocation(line: 4499, column: 33, scope: !9564)
!9564 = distinct !DILexicalBlock(scope: !9561, file: !3, line: 4498, column: 6)
!9565 = !DILocation(line: 4499, column: 13, scope: !9564)
!9566 = !DILocation(line: 4499, column: 11, scope: !9564)
!9567 = !DILocation(line: 4500, column: 12, scope: !9568)
!9568 = distinct !DILexicalBlock(scope: !9564, file: !3, line: 4500, column: 12)
!9569 = !DILocation(line: 4500, column: 12, scope: !9564)
!9570 = !DILocation(line: 4501, column: 10, scope: !9568)
!9571 = !DILocation(line: 4501, column: 22, scope: !9568)
!9572 = !DILocation(line: 4501, column: 28, scope: !9568)
!9573 = !DILocation(line: 4501, column: 32, scope: !9568)
!9574 = !DILocation(line: 4501, column: 7, scope: !9568)
!9575 = !DILocation(line: 4501, column: 3, scope: !9568)
!9576 = !DILocation(line: 4502, column: 6, scope: !9564)
!9577 = !DILocation(line: 4503, column: 2, scope: !9549)
!9578 = !DILocation(line: 4504, column: 5, scope: !9540)
!9579 = !DILocation(line: 4505, column: 12, scope: !9580)
!9580 = distinct !DILexicalBlock(scope: !9535, file: !3, line: 4505, column: 12)
!9581 = !DILocation(line: 4506, column: 5, scope: !9580)
!9582 = !DILocation(line: 4506, column: 21, scope: !9580)
!9583 = !DILocation(line: 4506, column: 8, scope: !9580)
!9584 = !DILocation(line: 4506, column: 27, scope: !9580)
!9585 = !DILocation(line: 4505, column: 12, scope: !9535)
!9586 = !DILocation(line: 4508, column: 14, scope: !9587)
!9587 = distinct !DILexicalBlock(scope: !9588, file: !3, line: 4508, column: 7)
!9588 = distinct !DILexicalBlock(scope: !9580, file: !3, line: 4507, column: 5)
!9589 = !DILocation(line: 4508, column: 12, scope: !9587)
!9590 = !DILocation(line: 4508, column: 19, scope: !9591)
!9591 = distinct !DILexicalBlock(scope: !9587, file: !3, line: 4508, column: 7)
!9592 = !DILocation(line: 4508, column: 44, scope: !9591)
!9593 = !DILocation(line: 4508, column: 23, scope: !9591)
!9594 = !DILocation(line: 4508, column: 21, scope: !9591)
!9595 = !DILocation(line: 4508, column: 7, scope: !9587)
!9596 = !DILocalVariable(name: "op", scope: !9597, file: !3, line: 4510, type: !666)
!9597 = distinct !DILexicalBlock(scope: !9591, file: !3, line: 4509, column: 2)
!9598 = !DILocation(line: 4510, column: 9, scope: !9597)
!9599 = !DILocation(line: 4510, column: 14, scope: !9597)
!9600 = !DILocation(line: 4511, column: 8, scope: !9601)
!9601 = distinct !DILexicalBlock(scope: !9597, file: !3, line: 4511, column: 8)
!9602 = !DILocation(line: 4511, column: 23, scope: !9601)
!9603 = !DILocation(line: 4511, column: 8, scope: !9597)
!9604 = !DILocation(line: 4512, column: 13, scope: !9601)
!9605 = !DILocation(line: 4512, column: 25, scope: !9601)
!9606 = !DILocation(line: 4512, column: 31, scope: !9601)
!9607 = !DILocation(line: 4512, column: 53, scope: !9601)
!9608 = !DILocation(line: 4512, column: 10, scope: !9601)
!9609 = !DILocation(line: 4512, column: 6, scope: !9601)
!9610 = !DILocation(line: 4513, column: 2, scope: !9597)
!9611 = !DILocation(line: 4508, column: 51, scope: !9591)
!9612 = !DILocation(line: 4508, column: 7, scope: !9591)
!9613 = distinct !{!9613, !9595, !9614}
!9614 = !DILocation(line: 4513, column: 2, scope: !9587)
!9615 = !DILocation(line: 4514, column: 5, scope: !9588)
!9616 = !DILocation(line: 4516, column: 10, scope: !9062)
!9617 = !DILocation(line: 4516, column: 3, scope: !9062)
!9618 = distinct !DISubprogram(name: "get_base_loadstore", scope: !3, file: !3, line: 4325, type: !7695, scopeLine: 4326, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!9619 = !DILocalVariable(name: "op", arg: 1, scope: !9618, file: !3, line: 4325, type: !666)
!9620 = !DILocation(line: 4325, column: 26, scope: !9618)
!9621 = !DILocation(line: 4327, column: 3, scope: !9618)
!9622 = !DILocation(line: 4327, column: 31, scope: !9618)
!9623 = !DILocation(line: 4327, column: 10, scope: !9618)
!9624 = !DILocation(line: 4328, column: 10, scope: !9618)
!9625 = !DILocation(line: 4328, column: 8, scope: !9618)
!9626 = distinct !{!9626, !9621, !9624}
!9627 = !DILocation(line: 4329, column: 7, scope: !9628)
!9628 = distinct !DILexicalBlock(scope: !9618, file: !3, line: 4329, column: 7)
!9629 = !DILocation(line: 4330, column: 7, scope: !9628)
!9630 = !DILocation(line: 4330, column: 10, scope: !9628)
!9631 = !DILocation(line: 4331, column: 7, scope: !9628)
!9632 = !DILocation(line: 4331, column: 10, scope: !9628)
!9633 = !DILocation(line: 4331, column: 25, scope: !9628)
!9634 = !DILocation(line: 4329, column: 7, scope: !9618)
!9635 = !DILocation(line: 4332, column: 12, scope: !9628)
!9636 = !DILocation(line: 4332, column: 5, scope: !9628)
!9637 = !DILocation(line: 4333, column: 3, scope: !9618)
!9638 = !DILocation(line: 4334, column: 1, scope: !9618)
!9639 = distinct !DISubprogram(name: "gimple_asm_noutputs", scope: !6, file: !6, line: 2591, type: !5497, scopeLine: 2592, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!9640 = !DILocalVariable(name: "gs", arg: 1, scope: !9639, file: !6, line: 2591, type: !3517)
!9641 = !DILocation(line: 2591, column: 35, scope: !9639)
!9642 = !DILocation(line: 2594, column: 10, scope: !9639)
!9643 = !DILocation(line: 2594, column: 14, scope: !9639)
!9644 = !DILocation(line: 2594, column: 25, scope: !9639)
!9645 = !DILocation(line: 2594, column: 3, scope: !9639)
!9646 = distinct !DISubprogram(name: "gimple_asm_output_op", scope: !6, file: !6, line: 2652, type: !6223, scopeLine: 2653, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!9647 = !DILocalVariable(name: "gs", arg: 1, scope: !9646, file: !6, line: 2652, type: !3517)
!9648 = !DILocation(line: 2652, column: 36, scope: !9646)
!9649 = !DILocalVariable(name: "index", arg: 2, scope: !9646, file: !6, line: 2652, type: !7)
!9650 = !DILocation(line: 2652, column: 49, scope: !9646)
!9651 = !DILocation(line: 2655, column: 3, scope: !9646)
!9652 = !DILocation(line: 2656, column: 21, scope: !9646)
!9653 = !DILocation(line: 2656, column: 25, scope: !9646)
!9654 = !DILocation(line: 2656, column: 33, scope: !9646)
!9655 = !DILocation(line: 2656, column: 37, scope: !9646)
!9656 = !DILocation(line: 2656, column: 48, scope: !9646)
!9657 = !DILocation(line: 2656, column: 31, scope: !9646)
!9658 = !DILocation(line: 2656, column: 10, scope: !9646)
!9659 = !DILocation(line: 2656, column: 3, scope: !9646)
!9660 = distinct !DISubprogram(name: "gimple_asm_ninputs", scope: !6, file: !6, line: 2581, type: !5497, scopeLine: 2582, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!9661 = !DILocalVariable(name: "gs", arg: 1, scope: !9660, file: !6, line: 2581, type: !3517)
!9662 = !DILocation(line: 2581, column: 34, scope: !9660)
!9663 = !DILocation(line: 2584, column: 10, scope: !9660)
!9664 = !DILocation(line: 2584, column: 14, scope: !9660)
!9665 = !DILocation(line: 2584, column: 25, scope: !9660)
!9666 = !DILocation(line: 2584, column: 3, scope: !9660)
!9667 = distinct !DISubprogram(name: "gimple_asm_input_op", scope: !6, file: !6, line: 2619, type: !6223, scopeLine: 2620, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!9668 = !DILocalVariable(name: "gs", arg: 1, scope: !9667, file: !6, line: 2619, type: !3517)
!9669 = !DILocation(line: 2619, column: 35, scope: !9667)
!9670 = !DILocalVariable(name: "index", arg: 2, scope: !9667, file: !6, line: 2619, type: !7)
!9671 = !DILocation(line: 2619, column: 48, scope: !9667)
!9672 = !DILocation(line: 2622, column: 3, scope: !9667)
!9673 = !DILocation(line: 2623, column: 21, scope: !9667)
!9674 = !DILocation(line: 2623, column: 25, scope: !9667)
!9675 = !DILocation(line: 2623, column: 10, scope: !9667)
!9676 = !DILocation(line: 2623, column: 3, scope: !9667)
!9677 = distinct !DISubprogram(name: "gimple_return_retval", scope: !6, file: !6, line: 4253, type: !3515, scopeLine: 4254, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!9678 = !DILocalVariable(name: "gs", arg: 1, scope: !9677, file: !6, line: 4253, type: !3517)
!9679 = !DILocation(line: 4253, column: 36, scope: !9677)
!9680 = !DILocation(line: 4256, column: 21, scope: !9677)
!9681 = !DILocation(line: 4256, column: 10, scope: !9677)
!9682 = !DILocation(line: 4256, column: 3, scope: !9677)
!9683 = distinct !DISubprogram(name: "gimple_phi_num_args", scope: !6, file: !6, line: 3061, type: !5497, scopeLine: 3062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!9684 = !DILocalVariable(name: "gs", arg: 1, scope: !9683, file: !6, line: 3061, type: !3517)
!9685 = !DILocation(line: 3061, column: 35, scope: !9683)
!9686 = !DILocation(line: 3064, column: 10, scope: !9683)
!9687 = !DILocation(line: 3064, column: 14, scope: !9683)
!9688 = !DILocation(line: 3064, column: 25, scope: !9683)
!9689 = !DILocation(line: 3064, column: 3, scope: !9683)
!9690 = distinct !DISubprogram(name: "get_use_from_ptr", scope: !8944, file: !8944, line: 427, type: !9691, scopeLine: 428, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!9691 = !DISubroutineType(types: !9692)
!9692 = !{!666, !9693}
!9693 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_operand_p", file: !537, line: 30, baseType: !9694)
!9694 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9695, size: 64)
!9695 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_use_operand_t", file: !50, line: 1893, baseType: !1134)
!9696 = !DILocalVariable(name: "use", arg: 1, scope: !9690, file: !8944, line: 427, type: !9693)
!9697 = !DILocation(line: 427, column: 33, scope: !9690)
!9698 = !DILocation(line: 429, column: 12, scope: !9690)
!9699 = !DILocation(line: 429, column: 17, scope: !9690)
!9700 = !DILocation(line: 429, column: 10, scope: !9690)
!9701 = !DILocation(line: 429, column: 3, scope: !9690)
!9702 = distinct !DISubprogram(name: "gimple_phi_arg_imm_use_ptr", scope: !8944, file: !8944, line: 442, type: !9703, scopeLine: 443, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!9703 = !DISubroutineType(types: !9704)
!9704 = !{!9693, !594, !746}
!9705 = !DILocalVariable(name: "gs", arg: 1, scope: !9702, file: !8944, line: 442, type: !594)
!9706 = !DILocation(line: 442, column: 36, scope: !9702)
!9707 = !DILocalVariable(name: "i", arg: 2, scope: !9702, file: !8944, line: 442, type: !746)
!9708 = !DILocation(line: 442, column: 44, scope: !9702)
!9709 = !DILocation(line: 444, column: 27, scope: !9702)
!9710 = !DILocation(line: 444, column: 31, scope: !9702)
!9711 = !DILocation(line: 444, column: 11, scope: !9702)
!9712 = !DILocation(line: 444, column: 35, scope: !9702)
!9713 = !DILocation(line: 444, column: 3, scope: !9702)
!9714 = distinct !DISubprogram(name: "walk_stmt_load_store_ops", scope: !3, file: !3, line: 4523, type: !9715, scopeLine: 4526, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!9715 = !DISubroutineType(types: !9716)
!9716 = !{!769, !594, !664, !9065, !9065}
!9717 = !DILocalVariable(name: "stmt", arg: 1, scope: !9714, file: !3, line: 4523, type: !594)
!9718 = !DILocation(line: 4523, column: 34, scope: !9714)
!9719 = !DILocalVariable(name: "data", arg: 2, scope: !9714, file: !3, line: 4523, type: !664)
!9720 = !DILocation(line: 4523, column: 46, scope: !9714)
!9721 = !DILocalVariable(name: "visit_load", arg: 3, scope: !9714, file: !3, line: 4524, type: !9065)
!9722 = !DILocation(line: 4524, column: 13, scope: !9714)
!9723 = !DILocalVariable(name: "visit_store", arg: 4, scope: !9714, file: !3, line: 4525, type: !9065)
!9724 = !DILocation(line: 4525, column: 13, scope: !9714)
!9725 = !DILocation(line: 4527, column: 41, scope: !9714)
!9726 = !DILocation(line: 4527, column: 47, scope: !9714)
!9727 = !DILocation(line: 4528, column: 6, scope: !9714)
!9728 = !DILocation(line: 4528, column: 18, scope: !9714)
!9729 = !DILocation(line: 4527, column: 10, scope: !9714)
!9730 = !DILocation(line: 4527, column: 3, scope: !9714)
!9731 = distinct !DISubprogram(name: "gimple_ior_addresses_taken", scope: !3, file: !3, line: 4553, type: !9732, scopeLine: 4554, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!9732 = !DISubroutineType(types: !9733)
!9733 = !{!769, !1041, !594}
!9734 = !DILocalVariable(name: "addresses_taken", arg: 1, scope: !9731, file: !3, line: 4553, type: !1041)
!9735 = !DILocation(line: 4553, column: 36, scope: !9731)
!9736 = !DILocalVariable(name: "stmt", arg: 2, scope: !9731, file: !3, line: 4553, type: !594)
!9737 = !DILocation(line: 4553, column: 60, scope: !9731)
!9738 = !DILocation(line: 4555, column: 41, scope: !9731)
!9739 = !DILocation(line: 4555, column: 47, scope: !9731)
!9740 = !DILocation(line: 4555, column: 10, scope: !9731)
!9741 = !DILocation(line: 4555, column: 3, scope: !9731)
!9742 = distinct !DISubprogram(name: "gimple_ior_addresses_taken_1", scope: !3, file: !3, line: 4534, type: !9066, scopeLine: 4536, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!9743 = !DILocalVariable(name: "stmt", arg: 1, scope: !9742, file: !3, line: 4534, type: !594)
!9744 = !DILocation(line: 4534, column: 38, scope: !9742)
!9745 = !DILocalVariable(name: "addr", arg: 2, scope: !9742, file: !3, line: 4535, type: !666)
!9746 = !DILocation(line: 4535, column: 15, scope: !9742)
!9747 = !DILocalVariable(name: "data", arg: 3, scope: !9742, file: !3, line: 4535, type: !664)
!9748 = !DILocation(line: 4535, column: 27, scope: !9742)
!9749 = !DILocalVariable(name: "addresses_taken", scope: !9742, file: !3, line: 4537, type: !1041)
!9750 = !DILocation(line: 4537, column: 10, scope: !9742)
!9751 = !DILocation(line: 4537, column: 36, scope: !9742)
!9752 = !DILocation(line: 4537, column: 28, scope: !9742)
!9753 = !DILocation(line: 4538, column: 3, scope: !9742)
!9754 = !DILocation(line: 4538, column: 31, scope: !9742)
!9755 = !DILocation(line: 4538, column: 10, scope: !9742)
!9756 = !DILocation(line: 4539, column: 12, scope: !9742)
!9757 = !DILocation(line: 4539, column: 10, scope: !9742)
!9758 = distinct !{!9758, !9753, !9756}
!9759 = !DILocation(line: 4540, column: 7, scope: !9760)
!9760 = distinct !DILexicalBlock(scope: !9742, file: !3, line: 4540, column: 7)
!9761 = !DILocation(line: 4540, column: 7, scope: !9742)
!9762 = !DILocation(line: 4542, column: 23, scope: !9763)
!9763 = distinct !DILexicalBlock(scope: !9760, file: !3, line: 4541, column: 5)
!9764 = !DILocation(line: 4542, column: 40, scope: !9763)
!9765 = !DILocation(line: 4542, column: 7, scope: !9763)
!9766 = !DILocation(line: 4543, column: 7, scope: !9763)
!9767 = !DILocation(line: 4545, column: 3, scope: !9742)
!9768 = !DILocation(line: 4546, column: 1, scope: !9742)
!9769 = distinct !DISubprogram(name: "gimple_decl_printable_name", scope: !3, file: !3, line: 4563, type: !9770, scopeLine: 4564, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!9770 = !DISubroutineType(types: !9771)
!9771 = !{!1161, !666, !746}
!9772 = !DILocalVariable(name: "decl", arg: 1, scope: !9769, file: !3, line: 4563, type: !666)
!9773 = !DILocation(line: 4563, column: 34, scope: !9769)
!9774 = !DILocalVariable(name: "verbosity", arg: 2, scope: !9769, file: !3, line: 4563, type: !746)
!9775 = !DILocation(line: 4563, column: 44, scope: !9769)
!9776 = !DILocation(line: 4565, column: 3, scope: !9769)
!9777 = !DILocation(line: 4567, column: 7, scope: !9778)
!9778 = distinct !DILexicalBlock(scope: !9769, file: !3, line: 4567, column: 7)
!9779 = !DILocation(line: 4567, column: 7, scope: !9769)
!9780 = !DILocalVariable(name: "str", scope: !9781, file: !3, line: 4569, type: !1161)
!9781 = distinct !DILexicalBlock(scope: !9778, file: !3, line: 4568, column: 5)
!9782 = !DILocation(line: 4569, column: 19, scope: !9781)
!9783 = !DILocalVariable(name: "mangled_str", scope: !9781, file: !3, line: 4569, type: !1161)
!9784 = !DILocation(line: 4569, column: 25, scope: !9781)
!9785 = !DILocalVariable(name: "dmgl_opts", scope: !9781, file: !3, line: 4570, type: !746)
!9786 = !DILocation(line: 4570, column: 11, scope: !9781)
!9787 = !DILocation(line: 4572, column: 11, scope: !9788)
!9788 = distinct !DILexicalBlock(scope: !9781, file: !3, line: 4572, column: 11)
!9789 = !DILocation(line: 4572, column: 21, scope: !9788)
!9790 = !DILocation(line: 4572, column: 11, scope: !9781)
!9791 = !DILocation(line: 4574, column: 14, scope: !9792)
!9792 = distinct !DILexicalBlock(scope: !9788, file: !3, line: 4573, column: 2)
!9793 = !DILocation(line: 4578, column: 8, scope: !9794)
!9794 = distinct !DILexicalBlock(scope: !9792, file: !3, line: 4578, column: 8)
!9795 = !DILocation(line: 4578, column: 25, scope: !9794)
!9796 = !DILocation(line: 4578, column: 8, scope: !9792)
!9797 = !DILocation(line: 4579, column: 16, scope: !9794)
!9798 = !DILocation(line: 4579, column: 6, scope: !9794)
!9799 = !DILocation(line: 4580, column: 2, scope: !9792)
!9800 = !DILocation(line: 4582, column: 21, scope: !9781)
!9801 = !DILocation(line: 4582, column: 19, scope: !9781)
!9802 = !DILocation(line: 4583, column: 32, scope: !9781)
!9803 = !DILocation(line: 4583, column: 45, scope: !9781)
!9804 = !DILocation(line: 4583, column: 13, scope: !9781)
!9805 = !DILocation(line: 4583, column: 11, scope: !9781)
!9806 = !DILocation(line: 4584, column: 15, scope: !9781)
!9807 = !DILocation(line: 4584, column: 14, scope: !9781)
!9808 = !DILocation(line: 4584, column: 22, scope: !9781)
!9809 = !DILocation(line: 4584, column: 28, scope: !9781)
!9810 = !DILocation(line: 4584, column: 7, scope: !9781)
!9811 = !DILocation(line: 4587, column: 10, scope: !9769)
!9812 = !DILocation(line: 4587, column: 3, scope: !9769)
!9813 = !DILocation(line: 4588, column: 1, scope: !9769)
!9814 = distinct !DISubprogram(name: "gimple_fold_obj_type_ref", scope: !3, file: !3, line: 4597, type: !9815, scopeLine: 4598, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!9815 = !DISubroutineType(types: !9816)
!9816 = !{!666, !666, !666}
!9817 = !DILocalVariable(name: "ref", arg: 1, scope: !9814, file: !3, line: 4597, type: !666)
!9818 = !DILocation(line: 4597, column: 32, scope: !9814)
!9819 = !DILocalVariable(name: "known_type", arg: 2, scope: !9814, file: !3, line: 4597, type: !666)
!9820 = !DILocation(line: 4597, column: 42, scope: !9814)
!9821 = !DILocalVariable(name: "index", scope: !9814, file: !3, line: 4599, type: !721)
!9822 = !DILocation(line: 4599, column: 17, scope: !9814)
!9823 = !DILocalVariable(name: "i", scope: !9814, file: !3, line: 4600, type: !721)
!9824 = !DILocation(line: 4600, column: 17, scope: !9814)
!9825 = !DILocalVariable(name: "v", scope: !9814, file: !3, line: 4601, type: !666)
!9826 = !DILocation(line: 4601, column: 8, scope: !9814)
!9827 = !DILocalVariable(name: "fndecl", scope: !9814, file: !3, line: 4602, type: !666)
!9828 = !DILocation(line: 4602, column: 8, scope: !9814)
!9829 = !DILocation(line: 4604, column: 7, scope: !9830)
!9830 = distinct !DILexicalBlock(scope: !9814, file: !3, line: 4604, column: 7)
!9831 = !DILocation(line: 4604, column: 31, scope: !9830)
!9832 = !DILocation(line: 4604, column: 7, scope: !9814)
!9833 = !DILocation(line: 4605, column: 5, scope: !9830)
!9834 = !DILocation(line: 4607, column: 7, scope: !9814)
!9835 = !DILocation(line: 4607, column: 5, scope: !9814)
!9836 = !DILocation(line: 4608, column: 25, scope: !9814)
!9837 = !DILocation(line: 4608, column: 11, scope: !9814)
!9838 = !DILocation(line: 4608, column: 9, scope: !9814)
!9839 = !DILocation(line: 4609, column: 5, scope: !9814)
!9840 = !DILocation(line: 4610, column: 3, scope: !9814)
!9841 = !DILocation(line: 4610, column: 10, scope: !9814)
!9842 = !DILocation(line: 4610, column: 15, scope: !9814)
!9843 = !DILocation(line: 4610, column: 12, scope: !9814)
!9844 = !DILocation(line: 4612, column: 9, scope: !9845)
!9845 = distinct !DILexicalBlock(scope: !9814, file: !3, line: 4611, column: 5)
!9846 = !DILocation(line: 4614, column: 11, scope: !9845)
!9847 = !DILocation(line: 4614, column: 9, scope: !9845)
!9848 = distinct !{!9848, !9840, !9849}
!9849 = !DILocation(line: 4615, column: 5, scope: !9814)
!9850 = !DILocation(line: 4617, column: 12, scope: !9814)
!9851 = !DILocation(line: 4617, column: 10, scope: !9814)
!9852 = !DILocation(line: 4624, column: 16, scope: !9814)
!9853 = !DILocation(line: 4624, column: 3, scope: !9814)
!9854 = !DILocation(line: 4624, column: 25, scope: !9814)
!9855 = !DILocation(line: 4624, column: 31, scope: !9814)
!9856 = !DILocation(line: 4624, column: 45, scope: !9814)
!9857 = !DILocation(line: 4626, column: 10, scope: !9814)
!9858 = !DILocation(line: 4626, column: 3, scope: !9814)
!9859 = !DILocation(line: 4627, column: 1, scope: !9814)
!9860 = distinct !DISubprogram(name: "gss_for_code", scope: !6, file: !6, line: 1061, type: !9861, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!9861 = !DISubroutineType(types: !9862)
!9862 = !{!5, !276}
!9863 = !DILocalVariable(name: "code", arg: 1, scope: !9860, file: !6, line: 1061, type: !276)
!9864 = !DILocation(line: 1061, column: 32, scope: !9860)
!9865 = !DILocation(line: 1066, column: 24, scope: !9860)
!9866 = !DILocation(line: 1066, column: 10, scope: !9860)
!9867 = !DILocation(line: 1066, column: 3, scope: !9860)
!9868 = distinct !DISubprogram(name: "gimple_cond_set_code", scope: !6, file: !6, line: 2231, type: !9869, scopeLine: 2232, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!9869 = !DISubroutineType(types: !9870)
!9870 = !{null, !594, !82}
!9871 = !DILocalVariable(name: "gs", arg: 1, scope: !9868, file: !6, line: 2231, type: !594)
!9872 = !DILocation(line: 2231, column: 30, scope: !9868)
!9873 = !DILocalVariable(name: "code", arg: 2, scope: !9868, file: !6, line: 2231, type: !82)
!9874 = !DILocation(line: 2231, column: 49, scope: !9868)
!9875 = !DILocation(line: 2234, column: 24, scope: !9868)
!9876 = !DILocation(line: 2234, column: 3, scope: !9868)
!9877 = !DILocation(line: 2234, column: 7, scope: !9868)
!9878 = !DILocation(line: 2234, column: 14, scope: !9868)
!9879 = !DILocation(line: 2234, column: 22, scope: !9868)
!9880 = !DILocation(line: 2235, column: 1, scope: !9868)
!9881 = distinct !DISubprogram(name: "gimple_bb", scope: !6, file: !6, line: 1112, type: !9882, scopeLine: 1113, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!9882 = !DISubroutineType(types: !9883)
!9883 = !{!619, !3517}
!9884 = !DILocalVariable(name: "g", arg: 1, scope: !9881, file: !6, line: 1112, type: !3517)
!9885 = !DILocation(line: 1112, column: 25, scope: !9881)
!9886 = !DILocation(line: 1114, column: 10, scope: !9881)
!9887 = !DILocation(line: 1114, column: 13, scope: !9881)
!9888 = !DILocation(line: 1114, column: 20, scope: !9881)
!9889 = !DILocation(line: 1114, column: 3, scope: !9881)
!9890 = distinct !DISubprogram(name: "gimple_ops", scope: !6, file: !6, line: 1614, type: !5589, scopeLine: 1615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!9891 = !DILocalVariable(name: "gs", arg: 1, scope: !9890, file: !6, line: 1614, type: !594)
!9892 = !DILocation(line: 1614, column: 20, scope: !9890)
!9893 = !DILocalVariable(name: "off", scope: !9890, file: !6, line: 1616, type: !978)
!9894 = !DILocation(line: 1616, column: 10, scope: !9890)
!9895 = !DILocation(line: 1621, column: 56, scope: !9890)
!9896 = !DILocation(line: 1621, column: 28, scope: !9890)
!9897 = !DILocation(line: 1621, column: 9, scope: !9890)
!9898 = !DILocation(line: 1621, column: 7, scope: !9890)
!9899 = !DILocation(line: 1622, column: 3, scope: !9890)
!9900 = !DILocation(line: 1624, column: 29, scope: !9890)
!9901 = !DILocation(line: 1624, column: 20, scope: !9890)
!9902 = !DILocation(line: 1624, column: 34, scope: !9890)
!9903 = !DILocation(line: 1624, column: 32, scope: !9890)
!9904 = !DILocation(line: 1624, column: 10, scope: !9890)
!9905 = !DILocation(line: 1624, column: 3, scope: !9890)
!9906 = distinct !DISubprogram(name: "gimple_asm_nlabels", scope: !6, file: !6, line: 2610, type: !5497, scopeLine: 2611, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!9907 = !DILocalVariable(name: "gs", arg: 1, scope: !9906, file: !6, line: 2610, type: !3517)
!9908 = !DILocation(line: 2610, column: 34, scope: !9906)
!9909 = !DILocation(line: 2613, column: 10, scope: !9906)
!9910 = !DILocation(line: 2613, column: 14, scope: !9906)
!9911 = !DILocation(line: 2613, column: 25, scope: !9906)
!9912 = !DILocation(line: 2613, column: 3, scope: !9906)
!9913 = distinct !DISubprogram(name: "gimple_asm_label_op", scope: !6, file: !6, line: 2707, type: !6223, scopeLine: 2708, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!9914 = !DILocalVariable(name: "gs", arg: 1, scope: !9913, file: !6, line: 2707, type: !3517)
!9915 = !DILocation(line: 2707, column: 35, scope: !9913)
!9916 = !DILocalVariable(name: "index", arg: 2, scope: !9913, file: !6, line: 2707, type: !7)
!9917 = !DILocation(line: 2707, column: 48, scope: !9913)
!9918 = !DILocation(line: 2710, column: 3, scope: !9913)
!9919 = !DILocation(line: 2711, column: 21, scope: !9913)
!9920 = !DILocation(line: 2711, column: 25, scope: !9913)
!9921 = !DILocation(line: 2711, column: 33, scope: !9913)
!9922 = !DILocation(line: 2711, column: 37, scope: !9913)
!9923 = !DILocation(line: 2711, column: 48, scope: !9913)
!9924 = !DILocation(line: 2711, column: 31, scope: !9913)
!9925 = !DILocation(line: 2711, column: 53, scope: !9913)
!9926 = !DILocation(line: 2711, column: 57, scope: !9913)
!9927 = !DILocation(line: 2711, column: 68, scope: !9913)
!9928 = !DILocation(line: 2711, column: 51, scope: !9913)
!9929 = !DILocation(line: 2711, column: 10, scope: !9913)
!9930 = !DILocation(line: 2711, column: 3, scope: !9913)
!9931 = distinct !DISubprogram(name: "gimple_expr_code", scope: !6, file: !6, line: 1438, type: !6181, scopeLine: 1439, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!9932 = !DILocalVariable(name: "stmt", arg: 1, scope: !9931, file: !6, line: 1438, type: !3517)
!9933 = !DILocation(line: 1438, column: 32, scope: !9931)
!9934 = !DILocalVariable(name: "code", scope: !9931, file: !6, line: 1440, type: !276)
!9935 = !DILocation(line: 1440, column: 20, scope: !9931)
!9936 = !DILocation(line: 1440, column: 40, scope: !9931)
!9937 = !DILocation(line: 1440, column: 27, scope: !9931)
!9938 = !DILocation(line: 1441, column: 7, scope: !9939)
!9939 = distinct !DILexicalBlock(scope: !9931, file: !6, line: 1441, column: 7)
!9940 = !DILocation(line: 1441, column: 12, scope: !9939)
!9941 = !DILocation(line: 1441, column: 29, scope: !9939)
!9942 = !DILocation(line: 1441, column: 32, scope: !9939)
!9943 = !DILocation(line: 1441, column: 37, scope: !9939)
!9944 = !DILocation(line: 1441, column: 7, scope: !9931)
!9945 = !DILocation(line: 1442, column: 29, scope: !9939)
!9946 = !DILocation(line: 1442, column: 35, scope: !9939)
!9947 = !DILocation(line: 1442, column: 42, scope: !9939)
!9948 = !DILocation(line: 1442, column: 5, scope: !9939)
!9949 = !DILocation(line: 1443, column: 12, scope: !9950)
!9950 = distinct !DILexicalBlock(scope: !9939, file: !6, line: 1443, column: 12)
!9951 = !DILocation(line: 1443, column: 17, scope: !9950)
!9952 = !DILocation(line: 1443, column: 12, scope: !9939)
!9953 = !DILocation(line: 1444, column: 5, scope: !9950)
!9954 = !DILocation(line: 1446, column: 5, scope: !9950)
!9955 = !DILocation(line: 1448, column: 5, scope: !9931)
!9956 = !DILocation(line: 1450, column: 1, scope: !9931)
!9957 = distinct !DISubprogram(name: "VEC_basic_block_gc_safe_grow", scope: !34, file: !34, line: 282, type: !6361, scopeLine: 282, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!9958 = !DILocalVariable(name: "vec_", arg: 1, scope: !9957, file: !34, line: 282, type: !6363)
!9959 = !DILocation(line: 282, column: 1, scope: !9957)
!9960 = !DILocalVariable(name: "size_", arg: 2, scope: !9957, file: !34, line: 282, type: !746)
!9961 = !DILocation(line: 0, scope: !9957)
!9962 = distinct !DISubprogram(name: "VEC_basic_block_base_address", scope: !34, file: !34, line: 281, type: !9963, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!9963 = !DISubroutineType(types: !9964)
!9964 = !{!9965, !6371}
!9965 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !919, size: 64)
!9966 = !DILocalVariable(name: "vec_", arg: 1, scope: !9962, file: !34, line: 281, type: !6371)
!9967 = !DILocation(line: 281, column: 1, scope: !9962)
!9968 = distinct !DISubprogram(name: "VEC_basic_block_gc_reserve_exact", scope: !34, file: !34, line: 282, type: !9969, scopeLine: 282, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!9969 = !DISubroutineType(types: !9970)
!9970 = !{!746, !6363, !746}
!9971 = !DILocalVariable(name: "vec_", arg: 1, scope: !9968, file: !34, line: 282, type: !6363)
!9972 = !DILocation(line: 282, column: 1, scope: !9968)
!9973 = !DILocalVariable(name: "alloc_", arg: 2, scope: !9968, file: !34, line: 282, type: !746)
!9974 = !DILocalVariable(name: "extend", scope: !9968, file: !34, line: 282, type: !746)
!9975 = !DILocation(line: 282, column: 1, scope: !9976)
!9976 = distinct !DILexicalBlock(scope: !9968, file: !34, line: 282, column: 1)
!9977 = distinct !DISubprogram(name: "VEC_basic_block_base_space", scope: !34, file: !34, line: 281, type: !9978, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!9978 = !DISubroutineType(types: !9979)
!9979 = !{!746, !6371, !746}
!9980 = !DILocalVariable(name: "vec_", arg: 1, scope: !9977, file: !34, line: 281, type: !6371)
!9981 = !DILocation(line: 281, column: 1, scope: !9977)
!9982 = !DILocalVariable(name: "alloc_", arg: 2, scope: !9977, file: !34, line: 281, type: !746)
!9983 = distinct !DISubprogram(name: "VEC_gimple_gc_reserve", scope: !6, file: !6, line: 35, type: !9984, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!9984 = !DISubroutineType(types: !9985)
!9985 = !{!746, !7006, !746}
!9986 = !DILocalVariable(name: "vec_", arg: 1, scope: !9983, file: !6, line: 35, type: !7006)
!9987 = !DILocation(line: 35, column: 1, scope: !9983)
!9988 = !DILocalVariable(name: "alloc_", arg: 2, scope: !9983, file: !6, line: 35, type: !746)
!9989 = !DILocalVariable(name: "extend", scope: !9983, file: !6, line: 35, type: !746)
!9990 = !DILocation(line: 35, column: 1, scope: !9991)
!9991 = distinct !DILexicalBlock(scope: !9983, file: !6, line: 35, column: 1)
!9992 = distinct !DISubprogram(name: "VEC_gimple_base_quick_push", scope: !6, file: !6, line: 33, type: !9993, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!9993 = !DISubroutineType(types: !9994)
!9994 = !{!7005, !9995, !594}
!9995 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1009, size: 64)
!9996 = !DILocalVariable(name: "vec_", arg: 1, scope: !9992, file: !6, line: 33, type: !9995)
!9997 = !DILocation(line: 33, column: 1, scope: !9992)
!9998 = !DILocalVariable(name: "obj_", arg: 2, scope: !9992, file: !6, line: 33, type: !594)
!9999 = !DILocalVariable(name: "slot_", scope: !9992, file: !6, line: 33, type: !7005)
!10000 = distinct !DISubprogram(name: "VEC_gimple_base_space", scope: !6, file: !6, line: 33, type: !10001, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!10001 = !DISubroutineType(types: !10002)
!10002 = !{!746, !9995, !746}
!10003 = !DILocalVariable(name: "vec_", arg: 1, scope: !10000, file: !6, line: 33, type: !9995)
!10004 = !DILocation(line: 33, column: 1, scope: !10000)
!10005 = !DILocalVariable(name: "alloc_", arg: 2, scope: !10000, file: !6, line: 33, type: !746)
!10006 = distinct !DISubprogram(name: "gimple_asm_volatile_p", scope: !6, file: !6, line: 2739, type: !4368, scopeLine: 2740, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!10007 = !DILocalVariable(name: "gs", arg: 1, scope: !10006, file: !6, line: 2739, type: !3517)
!10008 = !DILocation(line: 2739, column: 37, scope: !10006)
!10009 = !DILocation(line: 2742, column: 11, scope: !10006)
!10010 = !DILocation(line: 2742, column: 15, scope: !10006)
!10011 = !DILocation(line: 2742, column: 22, scope: !10006)
!10012 = !DILocation(line: 2742, column: 30, scope: !10006)
!10013 = !DILocation(line: 2742, column: 49, scope: !10006)
!10014 = !DILocation(line: 2742, column: 10, scope: !10006)
!10015 = !DILocation(line: 2742, column: 3, scope: !10006)
!10016 = distinct !DISubprogram(name: "gimple_expr_type", scope: !6, file: !6, line: 4366, type: !3515, scopeLine: 4367, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!10017 = !DILocalVariable(name: "stmt", arg: 1, scope: !10016, file: !6, line: 4366, type: !3517)
!10018 = !DILocation(line: 4366, column: 32, scope: !10016)
!10019 = !DILocalVariable(name: "code", scope: !10016, file: !6, line: 4368, type: !276)
!10020 = !DILocation(line: 4368, column: 20, scope: !10016)
!10021 = !DILocation(line: 4368, column: 40, scope: !10016)
!10022 = !DILocation(line: 4368, column: 27, scope: !10016)
!10023 = !DILocation(line: 4370, column: 7, scope: !10024)
!10024 = distinct !DILexicalBlock(scope: !10016, file: !6, line: 4370, column: 7)
!10025 = !DILocation(line: 4370, column: 12, scope: !10024)
!10026 = !DILocation(line: 4370, column: 29, scope: !10024)
!10027 = !DILocation(line: 4370, column: 32, scope: !10024)
!10028 = !DILocation(line: 4370, column: 37, scope: !10024)
!10029 = !DILocation(line: 4370, column: 7, scope: !10016)
!10030 = !DILocalVariable(name: "type", scope: !10031, file: !6, line: 4372, type: !666)
!10031 = distinct !DILexicalBlock(scope: !10024, file: !6, line: 4371, column: 5)
!10032 = !DILocation(line: 4372, column: 12, scope: !10031)
!10033 = !DILocation(line: 4377, column: 11, scope: !10034)
!10034 = distinct !DILexicalBlock(scope: !10031, file: !6, line: 4377, column: 11)
!10035 = !DILocation(line: 4377, column: 16, scope: !10034)
!10036 = !DILocation(line: 4377, column: 11, scope: !10031)
!10037 = !DILocation(line: 4378, column: 34, scope: !10034)
!10038 = !DILocation(line: 4378, column: 9, scope: !10034)
!10039 = !DILocation(line: 4378, column: 7, scope: !10034)
!10040 = !DILocation(line: 4378, column: 2, scope: !10034)
!10041 = !DILocation(line: 4380, column: 34, scope: !10034)
!10042 = !DILocation(line: 4380, column: 10, scope: !10034)
!10043 = !DILocation(line: 4380, column: 2, scope: !10034)
!10044 = !DILocation(line: 4383, column: 13, scope: !10045)
!10045 = distinct !DILexicalBlock(scope: !10034, file: !6, line: 4381, column: 4)
!10046 = !DILocation(line: 4383, column: 11, scope: !10045)
!10047 = !DILocation(line: 4384, column: 6, scope: !10045)
!10048 = !DILocation(line: 4388, column: 13, scope: !10045)
!10049 = !DILocation(line: 4388, column: 11, scope: !10045)
!10050 = !DILocation(line: 4389, column: 6, scope: !10045)
!10051 = !DILocation(line: 4391, column: 14, scope: !10031)
!10052 = !DILocation(line: 4391, column: 7, scope: !10031)
!10053 = !DILocation(line: 4393, column: 12, scope: !10054)
!10054 = distinct !DILexicalBlock(scope: !10024, file: !6, line: 4393, column: 12)
!10055 = !DILocation(line: 4393, column: 17, scope: !10054)
!10056 = !DILocation(line: 4393, column: 12, scope: !10024)
!10057 = !DILocation(line: 4394, column: 12, scope: !10054)
!10058 = !DILocation(line: 4394, column: 5, scope: !10054)
!10059 = !DILocation(line: 4396, column: 12, scope: !10054)
!10060 = !DILocation(line: 4396, column: 5, scope: !10054)
!10061 = !DILocation(line: 4397, column: 1, scope: !10016)
!10062 = distinct !DISubprogram(name: "gimple_assign_rhs2", scope: !6, file: !6, line: 1759, type: !3515, scopeLine: 1760, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!10063 = !DILocalVariable(name: "gs", arg: 1, scope: !10062, file: !6, line: 1759, type: !3517)
!10064 = !DILocation(line: 1759, column: 34, scope: !10062)
!10065 = !DILocation(line: 1763, column: 23, scope: !10066)
!10066 = distinct !DILexicalBlock(scope: !10062, file: !6, line: 1763, column: 7)
!10067 = !DILocation(line: 1763, column: 7, scope: !10066)
!10068 = !DILocation(line: 1763, column: 27, scope: !10066)
!10069 = !DILocation(line: 1763, column: 7, scope: !10062)
!10070 = !DILocation(line: 1764, column: 23, scope: !10066)
!10071 = !DILocation(line: 1764, column: 12, scope: !10066)
!10072 = !DILocation(line: 1764, column: 5, scope: !10066)
!10073 = !DILocation(line: 1766, column: 5, scope: !10066)
!10074 = !DILocation(line: 1767, column: 1, scope: !10062)
!10075 = distinct !DISubprogram(name: "gimple_call_return_type", scope: !6, file: !6, line: 1966, type: !3515, scopeLine: 1967, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!10076 = !DILocalVariable(name: "gs", arg: 1, scope: !10075, file: !6, line: 1966, type: !3517)
!10077 = !DILocation(line: 1966, column: 39, scope: !10075)
!10078 = !DILocalVariable(name: "fn", scope: !10075, file: !6, line: 1968, type: !666)
!10079 = !DILocation(line: 1968, column: 8, scope: !10075)
!10080 = !DILocation(line: 1968, column: 29, scope: !10075)
!10081 = !DILocation(line: 1968, column: 13, scope: !10075)
!10082 = !DILocalVariable(name: "type", scope: !10075, file: !6, line: 1969, type: !666)
!10083 = !DILocation(line: 1969, column: 8, scope: !10075)
!10084 = !DILocation(line: 1969, column: 15, scope: !10075)
!10085 = !DILocation(line: 1972, column: 10, scope: !10075)
!10086 = !DILocation(line: 1972, column: 8, scope: !10075)
!10087 = !DILocation(line: 1976, column: 10, scope: !10075)
!10088 = !DILocation(line: 1976, column: 3, scope: !10075)
!10089 = distinct !DISubprogram(name: "iterative_hash_gimple_type", scope: !3, file: !3, line: 3603, type: !10090, scopeLine: 3607, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!10090 = !DISubroutineType(types: !10091)
!10091 = !{!962, !666, !962, !8020, !1102, !10092}
!10092 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1068, size: 64)
!10093 = !DILocalVariable(name: "type", arg: 1, scope: !10089, file: !3, line: 3603, type: !666)
!10094 = !DILocation(line: 3603, column: 34, scope: !10089)
!10095 = !DILocalVariable(name: "val", arg: 2, scope: !10089, file: !3, line: 3603, type: !962)
!10096 = !DILocation(line: 3603, column: 50, scope: !10089)
!10097 = !DILocalVariable(name: "sccstack", arg: 3, scope: !10089, file: !3, line: 3604, type: !8020)
!10098 = !DILocation(line: 3604, column: 26, scope: !10089)
!10099 = !DILocalVariable(name: "sccstate", arg: 4, scope: !10089, file: !3, line: 3605, type: !1102)
!10100 = !DILocation(line: 3605, column: 30, scope: !10089)
!10101 = !DILocalVariable(name: "sccstate_obstack", arg: 5, scope: !10089, file: !3, line: 3606, type: !10092)
!10102 = !DILocation(line: 3606, column: 24, scope: !10089)
!10103 = !DILocalVariable(name: "v", scope: !10089, file: !3, line: 3608, type: !962)
!10104 = !DILocation(line: 3608, column: 13, scope: !10089)
!10105 = !DILocalVariable(name: "slot", scope: !10089, file: !3, line: 3609, type: !976)
!10106 = !DILocation(line: 3609, column: 10, scope: !10089)
!10107 = !DILocalVariable(name: "state", scope: !10089, file: !3, line: 3610, type: !1788)
!10108 = !DILocation(line: 3610, column: 16, scope: !10089)
!10109 = !DILocation(line: 3617, column: 11, scope: !10089)
!10110 = !DILocation(line: 3617, column: 9, scope: !10089)
!10111 = !DILocation(line: 3618, column: 42, scope: !10089)
!10112 = !DILocation(line: 3618, column: 24, scope: !10089)
!10113 = !DILocation(line: 3618, column: 34, scope: !10089)
!10114 = !DILocation(line: 3618, column: 4, scope: !10089)
!10115 = !DILocation(line: 3618, column: 40, scope: !10089)
!10116 = !DILocation(line: 3620, column: 3, scope: !10089)
!10117 = !DILocation(line: 3621, column: 31, scope: !10089)
!10118 = !DILocation(line: 3621, column: 3, scope: !10089)
!10119 = !DILocation(line: 3621, column: 10, scope: !10089)
!10120 = !DILocation(line: 3621, column: 17, scope: !10089)
!10121 = !DILocation(line: 3622, column: 16, scope: !10089)
!10122 = !DILocation(line: 3622, column: 23, scope: !10089)
!10123 = !DILocation(line: 3622, column: 3, scope: !10089)
!10124 = !DILocation(line: 3622, column: 10, scope: !10089)
!10125 = !DILocation(line: 3622, column: 14, scope: !10089)
!10126 = !DILocation(line: 3623, column: 3, scope: !10089)
!10127 = !DILocation(line: 3623, column: 10, scope: !10089)
!10128 = !DILocation(line: 3623, column: 22, scope: !10089)
!10129 = !DILocation(line: 3629, column: 33, scope: !10089)
!10130 = !DILocation(line: 3629, column: 7, scope: !10089)
!10131 = !DILocation(line: 3629, column: 5, scope: !10089)
!10132 = !DILocation(line: 3630, column: 33, scope: !10089)
!10133 = !DILocation(line: 3630, column: 52, scope: !10089)
!10134 = !DILocation(line: 3630, column: 7, scope: !10089)
!10135 = !DILocation(line: 3630, column: 5, scope: !10089)
!10136 = !DILocation(line: 3631, column: 33, scope: !10089)
!10137 = !DILocation(line: 3631, column: 58, scope: !10089)
!10138 = !DILocation(line: 3631, column: 7, scope: !10089)
!10139 = !DILocation(line: 3631, column: 5, scope: !10089)
!10140 = !DILocation(line: 3637, column: 7, scope: !10141)
!10141 = distinct !DILexicalBlock(scope: !10089, file: !3, line: 3637, column: 7)
!10142 = !DILocation(line: 3638, column: 7, scope: !10141)
!10143 = !DILocation(line: 3638, column: 10, scope: !10141)
!10144 = !DILocation(line: 3639, column: 7, scope: !10141)
!10145 = !DILocation(line: 3639, column: 10, scope: !10141)
!10146 = !DILocation(line: 3637, column: 7, scope: !10089)
!10147 = !DILocation(line: 3641, column: 37, scope: !10148)
!10148 = distinct !DILexicalBlock(scope: !10141, file: !3, line: 3640, column: 5)
!10149 = !DILocation(line: 3641, column: 60, scope: !10148)
!10150 = !DILocation(line: 3641, column: 11, scope: !10148)
!10151 = !DILocation(line: 3641, column: 9, scope: !10148)
!10152 = !DILocation(line: 3642, column: 37, scope: !10148)
!10153 = !DILocation(line: 3642, column: 55, scope: !10148)
!10154 = !DILocation(line: 3642, column: 11, scope: !10148)
!10155 = !DILocation(line: 3642, column: 9, scope: !10148)
!10156 = !DILocation(line: 3643, column: 37, scope: !10148)
!10157 = !DILocation(line: 3643, column: 59, scope: !10148)
!10158 = !DILocation(line: 3643, column: 11, scope: !10148)
!10159 = !DILocation(line: 3643, column: 9, scope: !10148)
!10160 = !DILocation(line: 3644, column: 5, scope: !10148)
!10161 = !DILocation(line: 3649, column: 7, scope: !10162)
!10162 = distinct !DILexicalBlock(scope: !10089, file: !3, line: 3649, column: 7)
!10163 = !DILocation(line: 3649, column: 7, scope: !10089)
!10164 = !DILocation(line: 3651, column: 11, scope: !10165)
!10165 = distinct !DILexicalBlock(scope: !10166, file: !3, line: 3651, column: 11)
!10166 = distinct !DILexicalBlock(scope: !10162, file: !3, line: 3650, column: 5)
!10167 = !DILocation(line: 3651, column: 11, scope: !10166)
!10168 = !DILocation(line: 3653, column: 34, scope: !10169)
!10169 = distinct !DILexicalBlock(scope: !10165, file: !3, line: 3652, column: 2)
!10170 = !DILocation(line: 3653, column: 64, scope: !10169)
!10171 = !DILocation(line: 3653, column: 8, scope: !10169)
!10172 = !DILocation(line: 3653, column: 6, scope: !10169)
!10173 = !DILocation(line: 3655, column: 9, scope: !10169)
!10174 = !DILocation(line: 3655, column: 59, scope: !10169)
!10175 = !DILocation(line: 3654, column: 8, scope: !10169)
!10176 = !DILocation(line: 3654, column: 6, scope: !10169)
!10177 = !DILocation(line: 3656, column: 2, scope: !10169)
!10178 = !DILocation(line: 3658, column: 13, scope: !10165)
!10179 = !DILocation(line: 3658, column: 31, scope: !10165)
!10180 = !DILocation(line: 3658, column: 38, scope: !10165)
!10181 = !DILocation(line: 3659, column: 6, scope: !10165)
!10182 = !DILocation(line: 3659, column: 16, scope: !10165)
!10183 = !DILocation(line: 3659, column: 26, scope: !10165)
!10184 = !DILocation(line: 3658, column: 6, scope: !10165)
!10185 = !DILocation(line: 3658, column: 4, scope: !10165)
!10186 = !DILocation(line: 3660, column: 5, scope: !10166)
!10187 = !DILocation(line: 3663, column: 7, scope: !10188)
!10188 = distinct !DILexicalBlock(scope: !10089, file: !3, line: 3663, column: 7)
!10189 = !DILocation(line: 3663, column: 24, scope: !10188)
!10190 = !DILocation(line: 3663, column: 7, scope: !10089)
!10191 = !DILocation(line: 3667, column: 11, scope: !10192)
!10192 = distinct !DILexicalBlock(scope: !10193, file: !3, line: 3667, column: 11)
!10193 = distinct !DILexicalBlock(scope: !10188, file: !3, line: 3664, column: 5)
!10194 = !DILocation(line: 3667, column: 36, scope: !10192)
!10195 = !DILocation(line: 3667, column: 33, scope: !10192)
!10196 = !DILocation(line: 3667, column: 11, scope: !10193)
!10197 = !DILocation(line: 3668, column: 27, scope: !10192)
!10198 = !DILocation(line: 3668, column: 50, scope: !10192)
!10199 = !DILocation(line: 3668, column: 6, scope: !10192)
!10200 = !DILocation(line: 3668, column: 4, scope: !10192)
!10201 = !DILocation(line: 3668, column: 2, scope: !10192)
!10202 = !DILocation(line: 3669, column: 11, scope: !10203)
!10203 = distinct !DILexicalBlock(scope: !10193, file: !3, line: 3669, column: 11)
!10204 = !DILocation(line: 3669, column: 36, scope: !10203)
!10205 = !DILocation(line: 3669, column: 33, scope: !10203)
!10206 = !DILocation(line: 3669, column: 11, scope: !10193)
!10207 = !DILocation(line: 3670, column: 27, scope: !10203)
!10208 = !DILocation(line: 3670, column: 50, scope: !10203)
!10209 = !DILocation(line: 3670, column: 6, scope: !10203)
!10210 = !DILocation(line: 3670, column: 4, scope: !10203)
!10211 = !DILocation(line: 3670, column: 2, scope: !10203)
!10212 = !DILocation(line: 3671, column: 37, scope: !10193)
!10213 = !DILocation(line: 3671, column: 62, scope: !10193)
!10214 = !DILocation(line: 3671, column: 11, scope: !10193)
!10215 = !DILocation(line: 3671, column: 9, scope: !10193)
!10216 = !DILocation(line: 3672, column: 5, scope: !10193)
!10217 = !DILocation(line: 3675, column: 7, scope: !10218)
!10218 = distinct !DILexicalBlock(scope: !10089, file: !3, line: 3675, column: 7)
!10219 = !DILocation(line: 3675, column: 24, scope: !10218)
!10220 = !DILocation(line: 3676, column: 7, scope: !10218)
!10221 = !DILocation(line: 3676, column: 10, scope: !10218)
!10222 = !DILocation(line: 3675, column: 7, scope: !10089)
!10223 = !DILocation(line: 3678, column: 37, scope: !10224)
!10224 = distinct !DILexicalBlock(scope: !10218, file: !3, line: 3677, column: 5)
!10225 = !DILocation(line: 3678, column: 62, scope: !10224)
!10226 = !DILocation(line: 3678, column: 11, scope: !10224)
!10227 = !DILocation(line: 3678, column: 9, scope: !10224)
!10228 = !DILocation(line: 3679, column: 18, scope: !10224)
!10229 = !DILocation(line: 3679, column: 38, scope: !10224)
!10230 = !DILocation(line: 3679, column: 45, scope: !10224)
!10231 = !DILocation(line: 3680, column: 4, scope: !10224)
!10232 = !DILocation(line: 3680, column: 14, scope: !10224)
!10233 = !DILocation(line: 3680, column: 24, scope: !10224)
!10234 = !DILocation(line: 3679, column: 11, scope: !10224)
!10235 = !DILocation(line: 3679, column: 9, scope: !10224)
!10236 = !DILocation(line: 3681, column: 5, scope: !10224)
!10237 = !DILocation(line: 3684, column: 7, scope: !10238)
!10238 = distinct !DILexicalBlock(scope: !10089, file: !3, line: 3684, column: 7)
!10239 = !DILocation(line: 3684, column: 24, scope: !10238)
!10240 = !DILocation(line: 3685, column: 7, scope: !10238)
!10241 = !DILocation(line: 3685, column: 10, scope: !10238)
!10242 = !DILocation(line: 3685, column: 27, scope: !10238)
!10243 = !DILocation(line: 3686, column: 7, scope: !10238)
!10244 = !DILocation(line: 3686, column: 10, scope: !10238)
!10245 = !DILocation(line: 3686, column: 27, scope: !10238)
!10246 = !DILocation(line: 3684, column: 7, scope: !10089)
!10247 = !DILocation(line: 3687, column: 16, scope: !10238)
!10248 = !DILocation(line: 3687, column: 34, scope: !10238)
!10249 = !DILocation(line: 3687, column: 41, scope: !10238)
!10250 = !DILocation(line: 3688, column: 9, scope: !10238)
!10251 = !DILocation(line: 3688, column: 19, scope: !10238)
!10252 = !DILocation(line: 3688, column: 29, scope: !10238)
!10253 = !DILocation(line: 3687, column: 9, scope: !10238)
!10254 = !DILocation(line: 3687, column: 7, scope: !10238)
!10255 = !DILocation(line: 3687, column: 5, scope: !10238)
!10256 = !DILocation(line: 3691, column: 7, scope: !10257)
!10257 = distinct !DILexicalBlock(scope: !10089, file: !3, line: 3691, column: 7)
!10258 = !DILocation(line: 3691, column: 24, scope: !10257)
!10259 = !DILocation(line: 3691, column: 41, scope: !10257)
!10260 = !DILocation(line: 3691, column: 44, scope: !10257)
!10261 = !DILocation(line: 3691, column: 61, scope: !10257)
!10262 = !DILocation(line: 3691, column: 7, scope: !10089)
!10263 = !DILocalVariable(name: "na", scope: !10264, file: !3, line: 3693, type: !7)
!10264 = distinct !DILexicalBlock(scope: !10257, file: !3, line: 3692, column: 5)
!10265 = !DILocation(line: 3693, column: 16, scope: !10264)
!10266 = !DILocalVariable(name: "p", scope: !10264, file: !3, line: 3694, type: !666)
!10267 = !DILocation(line: 3694, column: 12, scope: !10264)
!10268 = !DILocation(line: 3697, column: 11, scope: !10269)
!10269 = distinct !DILexicalBlock(scope: !10264, file: !3, line: 3697, column: 11)
!10270 = !DILocation(line: 3697, column: 28, scope: !10269)
!10271 = !DILocation(line: 3697, column: 11, scope: !10264)
!10272 = !DILocation(line: 3698, column: 13, scope: !10269)
!10273 = !DILocation(line: 3698, column: 42, scope: !10269)
!10274 = !DILocation(line: 3698, column: 49, scope: !10269)
!10275 = !DILocation(line: 3699, column: 6, scope: !10269)
!10276 = !DILocation(line: 3699, column: 16, scope: !10269)
!10277 = !DILocation(line: 3699, column: 26, scope: !10269)
!10278 = !DILocation(line: 3698, column: 6, scope: !10269)
!10279 = !DILocation(line: 3698, column: 4, scope: !10269)
!10280 = !DILocation(line: 3698, column: 2, scope: !10269)
!10281 = !DILocation(line: 3701, column: 18, scope: !10264)
!10282 = !DILocation(line: 3701, column: 36, scope: !10264)
!10283 = !DILocation(line: 3701, column: 43, scope: !10264)
!10284 = !DILocation(line: 3702, column: 4, scope: !10264)
!10285 = !DILocation(line: 3702, column: 14, scope: !10264)
!10286 = !DILocation(line: 3702, column: 24, scope: !10264)
!10287 = !DILocation(line: 3701, column: 11, scope: !10264)
!10288 = !DILocation(line: 3701, column: 9, scope: !10264)
!10289 = !DILocation(line: 3704, column: 16, scope: !10290)
!10290 = distinct !DILexicalBlock(scope: !10264, file: !3, line: 3704, column: 7)
!10291 = !DILocation(line: 3704, column: 14, scope: !10290)
!10292 = !DILocation(line: 3704, column: 42, scope: !10290)
!10293 = !DILocation(line: 3704, column: 12, scope: !10290)
!10294 = !DILocation(line: 3704, column: 47, scope: !10295)
!10295 = distinct !DILexicalBlock(scope: !10290, file: !3, line: 3704, column: 7)
!10296 = !DILocation(line: 3704, column: 7, scope: !10290)
!10297 = !DILocation(line: 3706, column: 15, scope: !10298)
!10298 = distinct !DILexicalBlock(scope: !10295, file: !3, line: 3705, column: 2)
!10299 = !DILocation(line: 3706, column: 31, scope: !10298)
!10300 = !DILocation(line: 3706, column: 38, scope: !10298)
!10301 = !DILocation(line: 3707, column: 8, scope: !10298)
!10302 = !DILocation(line: 3707, column: 18, scope: !10298)
!10303 = !DILocation(line: 3707, column: 28, scope: !10298)
!10304 = !DILocation(line: 3706, column: 8, scope: !10298)
!10305 = !DILocation(line: 3706, column: 6, scope: !10298)
!10306 = !DILocation(line: 3708, column: 6, scope: !10298)
!10307 = !DILocation(line: 3709, column: 2, scope: !10298)
!10308 = !DILocation(line: 3704, column: 54, scope: !10295)
!10309 = !DILocation(line: 3704, column: 52, scope: !10295)
!10310 = !DILocation(line: 3704, column: 7, scope: !10295)
!10311 = distinct !{!10311, !10296, !10312}
!10312 = !DILocation(line: 3709, column: 2, scope: !10290)
!10313 = !DILocation(line: 3711, column: 37, scope: !10264)
!10314 = !DILocation(line: 3711, column: 41, scope: !10264)
!10315 = !DILocation(line: 3711, column: 11, scope: !10264)
!10316 = !DILocation(line: 3711, column: 9, scope: !10264)
!10317 = !DILocation(line: 3712, column: 5, scope: !10264)
!10318 = !DILocation(line: 3714, column: 7, scope: !10319)
!10319 = distinct !DILexicalBlock(scope: !10089, file: !3, line: 3714, column: 7)
!10320 = !DILocation(line: 3714, column: 24, scope: !10319)
!10321 = !DILocation(line: 3715, column: 7, scope: !10319)
!10322 = !DILocation(line: 3715, column: 10, scope: !10319)
!10323 = !DILocation(line: 3715, column: 27, scope: !10319)
!10324 = !DILocation(line: 3716, column: 7, scope: !10319)
!10325 = !DILocation(line: 3716, column: 10, scope: !10319)
!10326 = !DILocation(line: 3716, column: 27, scope: !10319)
!10327 = !DILocation(line: 3714, column: 7, scope: !10089)
!10328 = !DILocalVariable(name: "nf", scope: !10329, file: !3, line: 3718, type: !7)
!10329 = distinct !DILexicalBlock(scope: !10319, file: !3, line: 3717, column: 5)
!10330 = !DILocation(line: 3718, column: 16, scope: !10329)
!10331 = !DILocalVariable(name: "f", scope: !10329, file: !3, line: 3719, type: !666)
!10332 = !DILocation(line: 3719, column: 12, scope: !10329)
!10333 = !DILocation(line: 3721, column: 32, scope: !10329)
!10334 = !DILocation(line: 3721, column: 70, scope: !10329)
!10335 = !DILocation(line: 3721, column: 11, scope: !10329)
!10336 = !DILocation(line: 3721, column: 9, scope: !10329)
!10337 = !DILocation(line: 3723, column: 16, scope: !10338)
!10338 = distinct !DILexicalBlock(scope: !10329, file: !3, line: 3723, column: 7)
!10339 = !DILocation(line: 3723, column: 14, scope: !10338)
!10340 = !DILocation(line: 3723, column: 39, scope: !10338)
!10341 = !DILocation(line: 3723, column: 12, scope: !10338)
!10342 = !DILocation(line: 3723, column: 44, scope: !10343)
!10343 = distinct !DILexicalBlock(scope: !10338, file: !3, line: 3723, column: 7)
!10344 = !DILocation(line: 3723, column: 7, scope: !10338)
!10345 = !DILocation(line: 3725, column: 29, scope: !10346)
!10346 = distinct !DILexicalBlock(scope: !10343, file: !3, line: 3724, column: 2)
!10347 = !DILocation(line: 3725, column: 44, scope: !10346)
!10348 = !DILocation(line: 3725, column: 8, scope: !10346)
!10349 = !DILocation(line: 3725, column: 6, scope: !10346)
!10350 = !DILocation(line: 3726, column: 15, scope: !10346)
!10351 = !DILocation(line: 3726, column: 30, scope: !10346)
!10352 = !DILocation(line: 3726, column: 37, scope: !10346)
!10353 = !DILocation(line: 3727, column: 8, scope: !10346)
!10354 = !DILocation(line: 3727, column: 18, scope: !10346)
!10355 = !DILocation(line: 3727, column: 28, scope: !10346)
!10356 = !DILocation(line: 3726, column: 8, scope: !10346)
!10357 = !DILocation(line: 3726, column: 6, scope: !10346)
!10358 = !DILocation(line: 3728, column: 6, scope: !10346)
!10359 = !DILocation(line: 3729, column: 2, scope: !10346)
!10360 = !DILocation(line: 3723, column: 51, scope: !10343)
!10361 = !DILocation(line: 3723, column: 49, scope: !10343)
!10362 = !DILocation(line: 3723, column: 7, scope: !10343)
!10363 = distinct !{!10363, !10344, !10364}
!10364 = !DILocation(line: 3729, column: 2, scope: !10338)
!10365 = !DILocation(line: 3731, column: 37, scope: !10329)
!10366 = !DILocation(line: 3731, column: 41, scope: !10329)
!10367 = !DILocation(line: 3731, column: 11, scope: !10329)
!10368 = !DILocation(line: 3731, column: 9, scope: !10329)
!10369 = !DILocation(line: 3732, column: 5, scope: !10329)
!10370 = !DILocation(line: 3735, column: 17, scope: !10089)
!10371 = !DILocation(line: 3735, column: 3, scope: !10089)
!10372 = !DILocation(line: 3735, column: 10, scope: !10089)
!10373 = !DILocation(line: 3735, column: 15, scope: !10089)
!10374 = !DILocation(line: 3738, column: 7, scope: !10375)
!10375 = distinct !DILexicalBlock(scope: !10089, file: !3, line: 3738, column: 7)
!10376 = !DILocation(line: 3738, column: 14, scope: !10375)
!10377 = !DILocation(line: 3738, column: 21, scope: !10375)
!10378 = !DILocation(line: 3738, column: 28, scope: !10375)
!10379 = !DILocation(line: 3738, column: 18, scope: !10375)
!10380 = !DILocation(line: 3738, column: 7, scope: !10089)
!10381 = !DILocalVariable(name: "x", scope: !10382, file: !3, line: 3740, type: !666)
!10382 = distinct !DILexicalBlock(scope: !10375, file: !3, line: 3739, column: 5)
!10383 = !DILocation(line: 3740, column: 12, scope: !10382)
!10384 = !DILocation(line: 3743, column: 7, scope: !10382)
!10385 = !DILocalVariable(name: "cstate", scope: !10386, file: !3, line: 3745, type: !1788)
!10386 = distinct !DILexicalBlock(scope: !10382, file: !3, line: 3744, column: 2)
!10387 = !DILocation(line: 3745, column: 17, scope: !10386)
!10388 = !DILocation(line: 3746, column: 8, scope: !10386)
!10389 = !DILocation(line: 3746, column: 6, scope: !10386)
!10390 = !DILocation(line: 3747, column: 4, scope: !10386)
!10391 = !DILocation(line: 3748, column: 51, scope: !10386)
!10392 = !DILocation(line: 3748, column: 61, scope: !10386)
!10393 = !DILocation(line: 3748, column: 29, scope: !10386)
!10394 = !DILocation(line: 3748, column: 28, scope: !10386)
!10395 = !DILocation(line: 3748, column: 13, scope: !10386)
!10396 = !DILocation(line: 3748, column: 11, scope: !10386)
!10397 = !DILocation(line: 3749, column: 4, scope: !10386)
!10398 = !DILocation(line: 3749, column: 12, scope: !10386)
!10399 = !DILocation(line: 3749, column: 24, scope: !10386)
!10400 = !DILocation(line: 3750, column: 31, scope: !10386)
!10401 = !DILocation(line: 3750, column: 48, scope: !10386)
!10402 = !DILocation(line: 3750, column: 11, scope: !10386)
!10403 = !DILocation(line: 3750, column: 9, scope: !10386)
!10404 = !DILocation(line: 3751, column: 30, scope: !10386)
!10405 = !DILocation(line: 3751, column: 38, scope: !10386)
!10406 = !DILocation(line: 3751, column: 21, scope: !10386)
!10407 = !DILocation(line: 3751, column: 12, scope: !10386)
!10408 = !DILocation(line: 3751, column: 5, scope: !10386)
!10409 = !DILocation(line: 3751, column: 10, scope: !10386)
!10410 = !DILocation(line: 3752, column: 2, scope: !10386)
!10411 = !DILocation(line: 3753, column: 14, scope: !10382)
!10412 = !DILocation(line: 3753, column: 19, scope: !10382)
!10413 = !DILocation(line: 3753, column: 16, scope: !10382)
!10414 = distinct !{!10414, !10384, !10415}
!10415 = !DILocation(line: 3753, column: 23, scope: !10382)
!10416 = !DILocation(line: 3754, column: 5, scope: !10382)
!10417 = !DILocation(line: 3756, column: 36, scope: !10089)
!10418 = !DILocation(line: 3756, column: 39, scope: !10089)
!10419 = !DILocation(line: 3756, column: 10, scope: !10089)
!10420 = !DILocation(line: 3756, column: 3, scope: !10089)
!10421 = distinct !DISubprogram(name: "VEC_tree_heap_safe_push", scope: !50, file: !50, line: 184, type: !10422, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!10422 = !DISubroutineType(types: !10423)
!10423 = !{!1127, !8020, !666}
!10424 = !DILocalVariable(name: "vec_", arg: 1, scope: !10421, file: !50, line: 184, type: !8020)
!10425 = !DILocation(line: 184, column: 1, scope: !10421)
!10426 = !DILocalVariable(name: "obj_", arg: 2, scope: !10421, file: !50, line: 184, type: !666)
!10427 = distinct !DISubprogram(name: "iterative_hash_name", scope: !3, file: !3, line: 3578, type: !10428, scopeLine: 3579, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!10428 = !DISubroutineType(types: !10429)
!10429 = !{!962, !666, !962}
!10430 = !DILocalVariable(name: "name", arg: 1, scope: !10427, file: !3, line: 3578, type: !666)
!10431 = !DILocation(line: 3578, column: 27, scope: !10427)
!10432 = !DILocalVariable(name: "v", arg: 2, scope: !10427, file: !3, line: 3578, type: !962)
!10433 = !DILocation(line: 3578, column: 43, scope: !10427)
!10434 = !DILocation(line: 3580, column: 8, scope: !10435)
!10435 = distinct !DILexicalBlock(scope: !10427, file: !3, line: 3580, column: 7)
!10436 = !DILocation(line: 3580, column: 7, scope: !10427)
!10437 = !DILocation(line: 3581, column: 12, scope: !10435)
!10438 = !DILocation(line: 3581, column: 5, scope: !10435)
!10439 = !DILocation(line: 3582, column: 7, scope: !10440)
!10440 = distinct !DILexicalBlock(scope: !10427, file: !3, line: 3582, column: 7)
!10441 = !DILocation(line: 3582, column: 24, scope: !10440)
!10442 = !DILocation(line: 3582, column: 7, scope: !10427)
!10443 = !DILocation(line: 3583, column: 12, scope: !10440)
!10444 = !DILocation(line: 3583, column: 10, scope: !10440)
!10445 = !DILocation(line: 3583, column: 5, scope: !10440)
!10446 = !DILocation(line: 3584, column: 8, scope: !10447)
!10447 = distinct !DILexicalBlock(scope: !10427, file: !3, line: 3584, column: 7)
!10448 = !DILocation(line: 3584, column: 7, scope: !10427)
!10449 = !DILocation(line: 3585, column: 12, scope: !10447)
!10450 = !DILocation(line: 3585, column: 5, scope: !10447)
!10451 = !DILocation(line: 3586, column: 3, scope: !10427)
!10452 = !DILocation(line: 3587, column: 10, scope: !10427)
!10453 = !DILocation(line: 3587, column: 3, scope: !10427)
!10454 = !DILocation(line: 3588, column: 1, scope: !10427)
!10455 = distinct !DISubprogram(name: "visit", scope: !3, file: !3, line: 3535, type: !10456, scopeLine: 3539, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!10456 = !DISubroutineType(types: !10457)
!10457 = !{!962, !666, !1788, !962, !8020, !1102, !10092}
!10458 = !DILocalVariable(name: "t", arg: 1, scope: !10455, file: !3, line: 3535, type: !666)
!10459 = !DILocation(line: 3535, column: 13, scope: !10455)
!10460 = !DILocalVariable(name: "state", arg: 2, scope: !10455, file: !3, line: 3535, type: !1788)
!10461 = !DILocation(line: 3535, column: 29, scope: !10455)
!10462 = !DILocalVariable(name: "v", arg: 3, scope: !10455, file: !3, line: 3535, type: !962)
!10463 = !DILocation(line: 3535, column: 46, scope: !10455)
!10464 = !DILocalVariable(name: "sccstack", arg: 4, scope: !10455, file: !3, line: 3536, type: !8020)
!10465 = !DILocation(line: 3536, column: 27, scope: !10455)
!10466 = !DILocalVariable(name: "sccstate", arg: 5, scope: !10455, file: !3, line: 3537, type: !1102)
!10467 = !DILocation(line: 3537, column: 30, scope: !10455)
!10468 = !DILocalVariable(name: "sccstate_obstack", arg: 6, scope: !10455, file: !3, line: 3538, type: !10092)
!10469 = !DILocation(line: 3538, column: 24, scope: !10455)
!10470 = !DILocalVariable(name: "cstate", scope: !10455, file: !3, line: 3540, type: !1788)
!10471 = !DILocation(line: 3540, column: 16, scope: !10455)
!10472 = !DILocalVariable(name: "slot", scope: !10455, file: !3, line: 3541, type: !976)
!10473 = !DILocation(line: 3541, column: 10, scope: !10455)
!10474 = !DILocation(line: 3545, column: 37, scope: !10475)
!10475 = distinct !DILexicalBlock(scope: !10455, file: !3, line: 3545, column: 7)
!10476 = !DILocation(line: 3545, column: 54, scope: !10475)
!10477 = !DILocation(line: 3545, column: 15, scope: !10475)
!10478 = !DILocation(line: 3545, column: 13, scope: !10475)
!10479 = !DILocation(line: 3545, column: 7, scope: !10455)
!10480 = !DILocation(line: 3546, column: 60, scope: !10475)
!10481 = !DILocation(line: 3546, column: 59, scope: !10475)
!10482 = !DILocation(line: 3546, column: 50, scope: !10475)
!10483 = !DILocation(line: 3546, column: 38, scope: !10475)
!10484 = !DILocation(line: 3546, column: 66, scope: !10475)
!10485 = !DILocation(line: 3546, column: 12, scope: !10475)
!10486 = !DILocation(line: 3546, column: 5, scope: !10475)
!10487 = !DILocation(line: 3548, column: 37, scope: !10488)
!10488 = distinct !DILexicalBlock(scope: !10455, file: !3, line: 3548, column: 7)
!10489 = !DILocation(line: 3548, column: 47, scope: !10488)
!10490 = !DILocation(line: 3548, column: 15, scope: !10488)
!10491 = !DILocation(line: 3548, column: 13, scope: !10488)
!10492 = !DILocation(line: 3548, column: 51, scope: !10488)
!10493 = !DILocation(line: 3548, column: 7, scope: !10455)
!10494 = !DILocation(line: 3549, column: 30, scope: !10488)
!10495 = !DILocation(line: 3549, column: 29, scope: !10488)
!10496 = !DILocation(line: 3549, column: 14, scope: !10488)
!10497 = !DILocation(line: 3549, column: 12, scope: !10488)
!10498 = !DILocation(line: 3549, column: 5, scope: !10488)
!10499 = !DILocation(line: 3550, column: 8, scope: !10500)
!10500 = distinct !DILexicalBlock(scope: !10455, file: !3, line: 3550, column: 7)
!10501 = !DILocation(line: 3550, column: 7, scope: !10455)
!10502 = !DILocalVariable(name: "tem", scope: !10503, file: !3, line: 3552, type: !962)
!10503 = distinct !DILexicalBlock(scope: !10500, file: !3, line: 3551, column: 5)
!10504 = !DILocation(line: 3552, column: 17, scope: !10503)
!10505 = !DILocation(line: 3554, column: 41, scope: !10503)
!10506 = !DILocation(line: 3554, column: 44, scope: !10503)
!10507 = !DILocation(line: 3555, column: 6, scope: !10503)
!10508 = !DILocation(line: 3555, column: 16, scope: !10503)
!10509 = !DILocation(line: 3555, column: 26, scope: !10503)
!10510 = !DILocation(line: 3554, column: 13, scope: !10503)
!10511 = !DILocation(line: 3554, column: 11, scope: !10503)
!10512 = !DILocation(line: 3556, column: 12, scope: !10513)
!10513 = distinct !DILexicalBlock(scope: !10503, file: !3, line: 3556, column: 11)
!10514 = !DILocation(line: 3556, column: 11, scope: !10503)
!10515 = !DILocation(line: 3557, column: 50, scope: !10513)
!10516 = !DILocation(line: 3557, column: 60, scope: !10513)
!10517 = !DILocation(line: 3557, column: 28, scope: !10513)
!10518 = !DILocation(line: 3557, column: 26, scope: !10513)
!10519 = !DILocation(line: 3557, column: 11, scope: !10513)
!10520 = !DILocation(line: 3557, column: 9, scope: !10513)
!10521 = !DILocation(line: 3557, column: 2, scope: !10513)
!10522 = !DILocation(line: 3558, column: 20, scope: !10503)
!10523 = !DILocation(line: 3558, column: 7, scope: !10503)
!10524 = !DILocation(line: 3558, column: 14, scope: !10503)
!10525 = !DILocation(line: 3558, column: 18, scope: !10503)
!10526 = !DILocation(line: 3563, column: 12, scope: !10527)
!10527 = distinct !DILexicalBlock(scope: !10503, file: !3, line: 3563, column: 11)
!10528 = !DILocation(line: 3563, column: 20, scope: !10527)
!10529 = !DILocation(line: 3563, column: 11, scope: !10503)
!10530 = !DILocation(line: 3564, column: 9, scope: !10527)
!10531 = !DILocation(line: 3564, column: 2, scope: !10527)
!10532 = !DILocation(line: 3565, column: 5, scope: !10503)
!10533 = !DILocation(line: 3566, column: 7, scope: !10534)
!10534 = distinct !DILexicalBlock(scope: !10455, file: !3, line: 3566, column: 7)
!10535 = !DILocation(line: 3566, column: 15, scope: !10534)
!10536 = !DILocation(line: 3566, column: 24, scope: !10534)
!10537 = !DILocation(line: 3566, column: 31, scope: !10534)
!10538 = !DILocation(line: 3566, column: 22, scope: !10534)
!10539 = !DILocation(line: 3567, column: 7, scope: !10534)
!10540 = !DILocation(line: 3567, column: 10, scope: !10534)
!10541 = !DILocation(line: 3567, column: 18, scope: !10534)
!10542 = !DILocation(line: 3566, column: 7, scope: !10455)
!10543 = !DILocation(line: 3568, column: 18, scope: !10534)
!10544 = !DILocation(line: 3568, column: 5, scope: !10534)
!10545 = !DILocation(line: 3568, column: 12, scope: !10534)
!10546 = !DILocation(line: 3568, column: 16, scope: !10534)
!10547 = !DILocation(line: 3572, column: 10, scope: !10455)
!10548 = !DILocation(line: 3572, column: 3, scope: !10455)
!10549 = !DILocation(line: 3573, column: 1, scope: !10455)
!10550 = distinct !DISubprogram(name: "VEC_tree_base_pop", scope: !50, file: !50, line: 182, type: !10551, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!10551 = !DISubroutineType(types: !10552)
!10552 = !{!666, !8012}
!10553 = !DILocalVariable(name: "vec_", arg: 1, scope: !10550, file: !50, line: 182, type: !8012)
!10554 = !DILocation(line: 182, column: 1, scope: !10550)
!10555 = !DILocalVariable(name: "obj_", scope: !10550, file: !50, line: 182, type: !666)
!10556 = distinct !DISubprogram(name: "VEC_tree_heap_reserve", scope: !50, file: !50, line: 184, type: !10557, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!10557 = !DISubroutineType(types: !10558)
!10558 = !{!746, !8020, !746}
!10559 = !DILocalVariable(name: "vec_", arg: 1, scope: !10556, file: !50, line: 184, type: !8020)
!10560 = !DILocation(line: 184, column: 1, scope: !10556)
!10561 = !DILocalVariable(name: "alloc_", arg: 2, scope: !10556, file: !50, line: 184, type: !746)
!10562 = !DILocalVariable(name: "extend", scope: !10556, file: !50, line: 184, type: !746)
!10563 = !DILocation(line: 184, column: 1, scope: !10564)
!10564 = distinct !DILexicalBlock(scope: !10556, file: !50, line: 184, column: 1)
!10565 = distinct !DISubprogram(name: "VEC_tree_base_space", scope: !50, file: !50, line: 182, type: !10566, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!10566 = !DISubroutineType(types: !10567)
!10567 = !{!746, !8012, !746}
!10568 = !DILocalVariable(name: "vec_", arg: 1, scope: !10565, file: !50, line: 182, type: !8012)
!10569 = !DILocation(line: 182, column: 1, scope: !10565)
!10570 = !DILocalVariable(name: "alloc_", arg: 2, scope: !10565, file: !50, line: 182, type: !746)
!10571 = distinct !DISubprogram(name: "gimple_types_compatible_p", scope: !3, file: !3, line: 3164, type: !10572, scopeLine: 3165, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!10572 = !DISubroutineType(types: !10573)
!10573 = !{!746, !666, !666}
!10574 = !DILocalVariable(name: "t1", arg: 1, scope: !10571, file: !3, line: 3164, type: !666)
!10575 = !DILocation(line: 3164, column: 33, scope: !10571)
!10576 = !DILocalVariable(name: "t2", arg: 2, scope: !10571, file: !3, line: 3164, type: !666)
!10577 = !DILocation(line: 3164, column: 42, scope: !10571)
!10578 = !DILocalVariable(name: "p", scope: !10571, file: !3, line: 3166, type: !1796)
!10579 = !DILocation(line: 3166, column: 15, scope: !10571)
!10580 = !DILocation(line: 3169, column: 7, scope: !10581)
!10581 = distinct !DILexicalBlock(scope: !10571, file: !3, line: 3169, column: 7)
!10582 = !DILocation(line: 3169, column: 13, scope: !10581)
!10583 = !DILocation(line: 3169, column: 10, scope: !10581)
!10584 = !DILocation(line: 3169, column: 7, scope: !10571)
!10585 = !DILocation(line: 3170, column: 5, scope: !10581)
!10586 = !DILocation(line: 3173, column: 7, scope: !10587)
!10587 = distinct !DILexicalBlock(scope: !10571, file: !3, line: 3173, column: 7)
!10588 = !DILocation(line: 3173, column: 10, scope: !10587)
!10589 = !DILocation(line: 3173, column: 23, scope: !10587)
!10590 = !DILocation(line: 3173, column: 26, scope: !10587)
!10591 = !DILocation(line: 3173, column: 29, scope: !10587)
!10592 = !DILocation(line: 3173, column: 7, scope: !10571)
!10593 = !DILocation(line: 3174, column: 5, scope: !10587)
!10594 = !DILocation(line: 3177, column: 7, scope: !10595)
!10595 = distinct !DILexicalBlock(scope: !10571, file: !3, line: 3177, column: 7)
!10596 = !DILocation(line: 3177, column: 25, scope: !10595)
!10597 = !DILocation(line: 3177, column: 22, scope: !10595)
!10598 = !DILocation(line: 3177, column: 7, scope: !10571)
!10599 = !DILocation(line: 3178, column: 5, scope: !10595)
!10600 = !DILocation(line: 3181, column: 7, scope: !10601)
!10601 = distinct !DILexicalBlock(scope: !10571, file: !3, line: 3181, column: 7)
!10602 = !DILocation(line: 3181, column: 26, scope: !10601)
!10603 = !DILocation(line: 3181, column: 23, scope: !10601)
!10604 = !DILocation(line: 3181, column: 7, scope: !10571)
!10605 = !DILocation(line: 3182, column: 5, scope: !10601)
!10606 = !DILocation(line: 3185, column: 7, scope: !10607)
!10607 = distinct !DILexicalBlock(scope: !10571, file: !3, line: 3185, column: 7)
!10608 = !DILocation(line: 3185, column: 22, scope: !10607)
!10609 = !DILocation(line: 3185, column: 7, scope: !10571)
!10610 = !DILocation(line: 3186, column: 5, scope: !10607)
!10611 = !DILocation(line: 3190, column: 7, scope: !10612)
!10612 = distinct !DILexicalBlock(scope: !10571, file: !3, line: 3190, column: 7)
!10613 = !DILocation(line: 3191, column: 7, scope: !10612)
!10614 = !DILocation(line: 3191, column: 10, scope: !10612)
!10615 = !DILocation(line: 3192, column: 7, scope: !10612)
!10616 = !DILocation(line: 3192, column: 10, scope: !10612)
!10617 = !DILocation(line: 3193, column: 7, scope: !10612)
!10618 = !DILocation(line: 3193, column: 10, scope: !10612)
!10619 = !DILocation(line: 3193, column: 25, scope: !10612)
!10620 = !DILocation(line: 3194, column: 7, scope: !10612)
!10621 = !DILocation(line: 3194, column: 10, scope: !10612)
!10622 = !DILocation(line: 3194, column: 25, scope: !10612)
!10623 = !DILocation(line: 3195, column: 7, scope: !10612)
!10624 = !DILocation(line: 3195, column: 10, scope: !10612)
!10625 = !DILocation(line: 3195, column: 25, scope: !10612)
!10626 = !DILocation(line: 3190, column: 7, scope: !10571)
!10627 = !DILocation(line: 3199, column: 11, scope: !10628)
!10628 = distinct !DILexicalBlock(scope: !10629, file: !3, line: 3199, column: 11)
!10629 = distinct !DILexicalBlock(scope: !10612, file: !3, line: 3196, column: 5)
!10630 = !DILocation(line: 3199, column: 30, scope: !10628)
!10631 = !DILocation(line: 3199, column: 27, scope: !10628)
!10632 = !DILocation(line: 3200, column: 4, scope: !10628)
!10633 = !DILocation(line: 3200, column: 7, scope: !10628)
!10634 = !DILocation(line: 3200, column: 30, scope: !10628)
!10635 = !DILocation(line: 3200, column: 27, scope: !10628)
!10636 = !DILocation(line: 3201, column: 4, scope: !10628)
!10637 = !DILocation(line: 3201, column: 7, scope: !10628)
!10638 = !DILocation(line: 3201, column: 25, scope: !10628)
!10639 = !DILocation(line: 3201, column: 22, scope: !10628)
!10640 = !DILocation(line: 3202, column: 4, scope: !10628)
!10641 = !DILocation(line: 3202, column: 7, scope: !10628)
!10642 = !DILocation(line: 3202, column: 29, scope: !10628)
!10643 = !DILocation(line: 3202, column: 26, scope: !10628)
!10644 = !DILocation(line: 3199, column: 11, scope: !10629)
!10645 = !DILocation(line: 3203, column: 2, scope: !10628)
!10646 = !DILocation(line: 3205, column: 11, scope: !10647)
!10647 = distinct !DILexicalBlock(scope: !10629, file: !3, line: 3205, column: 11)
!10648 = !DILocation(line: 3205, column: 26, scope: !10647)
!10649 = !DILocation(line: 3206, column: 4, scope: !10647)
!10650 = !DILocation(line: 3206, column: 8, scope: !10647)
!10651 = !DILocation(line: 3206, column: 33, scope: !10647)
!10652 = !DILocation(line: 3206, column: 30, scope: !10647)
!10653 = !DILocation(line: 3207, column: 8, scope: !10647)
!10654 = !DILocation(line: 3207, column: 11, scope: !10647)
!10655 = !DILocation(line: 3207, column: 36, scope: !10647)
!10656 = !DILocation(line: 3207, column: 33, scope: !10647)
!10657 = !DILocation(line: 3205, column: 11, scope: !10629)
!10658 = !DILocation(line: 3208, column: 2, scope: !10647)
!10659 = !DILocation(line: 3211, column: 11, scope: !10660)
!10660 = distinct !DILexicalBlock(scope: !10629, file: !3, line: 3211, column: 11)
!10661 = !DILocation(line: 3212, column: 4, scope: !10660)
!10662 = !DILocation(line: 3212, column: 7, scope: !10660)
!10663 = !DILocation(line: 3211, column: 11, scope: !10629)
!10664 = !DILocation(line: 3213, column: 2, scope: !10660)
!10665 = !DILocation(line: 3216, column: 11, scope: !10666)
!10666 = distinct !DILexicalBlock(scope: !10629, file: !3, line: 3216, column: 11)
!10667 = !DILocation(line: 3216, column: 26, scope: !10666)
!10668 = !DILocation(line: 3217, column: 4, scope: !10666)
!10669 = !DILocation(line: 3217, column: 7, scope: !10666)
!10670 = !DILocation(line: 3217, column: 22, scope: !10666)
!10671 = !DILocation(line: 3216, column: 11, scope: !10629)
!10672 = !DILocation(line: 3218, column: 36, scope: !10666)
!10673 = !DILocation(line: 3218, column: 52, scope: !10666)
!10674 = !DILocation(line: 3218, column: 9, scope: !10666)
!10675 = !DILocation(line: 3218, column: 2, scope: !10666)
!10676 = !DILocation(line: 3221, column: 5, scope: !10629)
!10677 = !DILocation(line: 3226, column: 25, scope: !10678)
!10678 = distinct !DILexicalBlock(scope: !10571, file: !3, line: 3226, column: 7)
!10679 = !DILocation(line: 3226, column: 7, scope: !10678)
!10680 = !DILocation(line: 3226, column: 50, scope: !10678)
!10681 = !DILocation(line: 3226, column: 32, scope: !10678)
!10682 = !DILocation(line: 3226, column: 29, scope: !10678)
!10683 = !DILocation(line: 3226, column: 7, scope: !10571)
!10684 = !DILocation(line: 3227, column: 5, scope: !10678)
!10685 = !DILocation(line: 3231, column: 25, scope: !10571)
!10686 = !DILocation(line: 3231, column: 29, scope: !10571)
!10687 = !DILocation(line: 3231, column: 7, scope: !10571)
!10688 = !DILocation(line: 3231, column: 5, scope: !10571)
!10689 = !DILocation(line: 3232, column: 7, scope: !10690)
!10690 = distinct !DILexicalBlock(scope: !10571, file: !3, line: 3232, column: 7)
!10691 = !DILocation(line: 3232, column: 10, scope: !10690)
!10692 = !DILocation(line: 3232, column: 17, scope: !10690)
!10693 = !DILocation(line: 3232, column: 22, scope: !10690)
!10694 = !DILocation(line: 3232, column: 25, scope: !10690)
!10695 = !DILocation(line: 3232, column: 28, scope: !10690)
!10696 = !DILocation(line: 3232, column: 35, scope: !10690)
!10697 = !DILocation(line: 3232, column: 7, scope: !10571)
!10698 = !DILocation(line: 3236, column: 14, scope: !10699)
!10699 = distinct !DILexicalBlock(scope: !10690, file: !3, line: 3233, column: 5)
!10700 = !DILocation(line: 3236, column: 17, scope: !10699)
!10701 = !DILocation(line: 3236, column: 24, scope: !10699)
!10702 = !DILocation(line: 3236, column: 7, scope: !10699)
!10703 = !DILocation(line: 3238, column: 12, scope: !10704)
!10704 = distinct !DILexicalBlock(scope: !10690, file: !3, line: 3238, column: 12)
!10705 = !DILocation(line: 3238, column: 15, scope: !10704)
!10706 = !DILocation(line: 3238, column: 22, scope: !10704)
!10707 = !DILocation(line: 3238, column: 12, scope: !10690)
!10708 = !DILocation(line: 3242, column: 7, scope: !10709)
!10709 = distinct !DILexicalBlock(scope: !10704, file: !3, line: 3239, column: 5)
!10710 = !DILocation(line: 3245, column: 3, scope: !10571)
!10711 = !DILocation(line: 3248, column: 3, scope: !10571)
!10712 = !DILocation(line: 3248, column: 6, scope: !10571)
!10713 = !DILocation(line: 3248, column: 13, scope: !10571)
!10714 = !DILocation(line: 3251, column: 30, scope: !10715)
!10715 = distinct !DILexicalBlock(scope: !10571, file: !3, line: 3251, column: 7)
!10716 = !DILocation(line: 3251, column: 52, scope: !10715)
!10717 = !DILocation(line: 3251, column: 8, scope: !10715)
!10718 = !DILocation(line: 3251, column: 7, scope: !10571)
!10719 = !DILocation(line: 3252, column: 5, scope: !10715)
!10720 = !DILocation(line: 3255, column: 11, scope: !10571)
!10721 = !DILocation(line: 3255, column: 3, scope: !10571)
!10722 = !DILocation(line: 3260, column: 39, scope: !10723)
!10723 = distinct !DILexicalBlock(scope: !10724, file: !3, line: 3260, column: 11)
!10724 = distinct !DILexicalBlock(scope: !10571, file: !3, line: 3256, column: 5)
!10725 = !DILocation(line: 3260, column: 55, scope: !10723)
!10726 = !DILocation(line: 3260, column: 12, scope: !10723)
!10727 = !DILocation(line: 3261, column: 4, scope: !10723)
!10728 = !DILocation(line: 3261, column: 7, scope: !10723)
!10729 = !DILocation(line: 3261, column: 32, scope: !10723)
!10730 = !DILocation(line: 3261, column: 29, scope: !10723)
!10731 = !DILocation(line: 3262, column: 4, scope: !10723)
!10732 = !DILocation(line: 3262, column: 7, scope: !10723)
!10733 = !DILocation(line: 3262, column: 41, scope: !10723)
!10734 = !DILocation(line: 3262, column: 38, scope: !10723)
!10735 = !DILocation(line: 3260, column: 11, scope: !10724)
!10736 = !DILocation(line: 3263, column: 2, scope: !10723)
!10737 = !DILocalVariable(name: "i1", scope: !10738, file: !3, line: 3266, type: !666)
!10738 = distinct !DILexicalBlock(scope: !10723, file: !3, line: 3265, column: 2)
!10739 = !DILocation(line: 3266, column: 9, scope: !10738)
!10740 = !DILocation(line: 3266, column: 14, scope: !10738)
!10741 = !DILocalVariable(name: "i2", scope: !10738, file: !3, line: 3267, type: !666)
!10742 = !DILocation(line: 3267, column: 9, scope: !10738)
!10743 = !DILocation(line: 3267, column: 14, scope: !10738)
!10744 = !DILocation(line: 3271, column: 8, scope: !10745)
!10745 = distinct !DILexicalBlock(scope: !10738, file: !3, line: 3271, column: 8)
!10746 = !DILocation(line: 3271, column: 11, scope: !10745)
!10747 = !DILocation(line: 3271, column: 24, scope: !10745)
!10748 = !DILocation(line: 3271, column: 27, scope: !10745)
!10749 = !DILocation(line: 3271, column: 30, scope: !10745)
!10750 = !DILocation(line: 3271, column: 8, scope: !10738)
!10751 = !DILocation(line: 3272, column: 6, scope: !10745)
!10752 = !DILocation(line: 3273, column: 13, scope: !10753)
!10753 = distinct !DILexicalBlock(scope: !10745, file: !3, line: 3273, column: 13)
!10754 = !DILocation(line: 3273, column: 16, scope: !10753)
!10755 = !DILocation(line: 3273, column: 29, scope: !10753)
!10756 = !DILocation(line: 3273, column: 32, scope: !10753)
!10757 = !DILocation(line: 3273, column: 35, scope: !10753)
!10758 = !DILocation(line: 3273, column: 13, scope: !10745)
!10759 = !DILocation(line: 3274, column: 6, scope: !10753)
!10760 = !DILocation(line: 3277, column: 15, scope: !10761)
!10761 = distinct !DILexicalBlock(scope: !10753, file: !3, line: 3277, column: 13)
!10762 = !DILocation(line: 3277, column: 30, scope: !10761)
!10763 = !DILocation(line: 3277, column: 42, scope: !10761)
!10764 = !DILocation(line: 3277, column: 57, scope: !10761)
!10765 = !DILocation(line: 3277, column: 39, scope: !10761)
!10766 = !DILocation(line: 3278, column: 6, scope: !10761)
!10767 = !DILocation(line: 3278, column: 10, scope: !10761)
!10768 = !DILocation(line: 3279, column: 10, scope: !10761)
!10769 = !DILocation(line: 3279, column: 13, scope: !10761)
!10770 = !DILocation(line: 3280, column: 10, scope: !10761)
!10771 = !DILocation(line: 3280, column: 31, scope: !10761)
!10772 = !DILocation(line: 3280, column: 47, scope: !10761)
!10773 = !DILocation(line: 3280, column: 14, scope: !10761)
!10774 = !DILocation(line: 3277, column: 13, scope: !10753)
!10775 = !DILocation(line: 3281, column: 6, scope: !10761)
!10776 = !DILocalVariable(name: "min1", scope: !10777, file: !3, line: 3284, type: !666)
!10777 = distinct !DILexicalBlock(scope: !10761, file: !3, line: 3283, column: 6)
!10778 = !DILocation(line: 3284, column: 13, scope: !10777)
!10779 = !DILocation(line: 3284, column: 20, scope: !10777)
!10780 = !DILocalVariable(name: "min2", scope: !10777, file: !3, line: 3285, type: !666)
!10781 = !DILocation(line: 3285, column: 13, scope: !10777)
!10782 = !DILocation(line: 3285, column: 20, scope: !10777)
!10783 = !DILocalVariable(name: "max1", scope: !10777, file: !3, line: 3286, type: !666)
!10784 = !DILocation(line: 3286, column: 13, scope: !10777)
!10785 = !DILocation(line: 3286, column: 20, scope: !10777)
!10786 = !DILocalVariable(name: "max2", scope: !10777, file: !3, line: 3287, type: !666)
!10787 = !DILocation(line: 3287, column: 13, scope: !10777)
!10788 = !DILocation(line: 3287, column: 20, scope: !10777)
!10789 = !DILocation(line: 3290, column: 13, scope: !10790)
!10790 = distinct !DILexicalBlock(scope: !10777, file: !3, line: 3290, column: 12)
!10791 = !DILocation(line: 3290, column: 21, scope: !10790)
!10792 = !DILocation(line: 3290, column: 18, scope: !10790)
!10793 = !DILocation(line: 3291, column: 6, scope: !10790)
!10794 = !DILocation(line: 3291, column: 10, scope: !10790)
!10795 = !DILocation(line: 3291, column: 15, scope: !10790)
!10796 = !DILocation(line: 3291, column: 18, scope: !10790)
!10797 = !DILocation(line: 3291, column: 23, scope: !10790)
!10798 = !DILocation(line: 3291, column: 43, scope: !10790)
!10799 = !DILocation(line: 3291, column: 49, scope: !10790)
!10800 = !DILocation(line: 3291, column: 26, scope: !10790)
!10801 = !DILocation(line: 3292, column: 5, scope: !10790)
!10802 = !DILocation(line: 3292, column: 9, scope: !10790)
!10803 = !DILocation(line: 3292, column: 17, scope: !10790)
!10804 = !DILocation(line: 3292, column: 14, scope: !10790)
!10805 = !DILocation(line: 3293, column: 9, scope: !10790)
!10806 = !DILocation(line: 3293, column: 13, scope: !10790)
!10807 = !DILocation(line: 3293, column: 18, scope: !10790)
!10808 = !DILocation(line: 3293, column: 21, scope: !10790)
!10809 = !DILocation(line: 3293, column: 26, scope: !10790)
!10810 = !DILocation(line: 3293, column: 46, scope: !10790)
!10811 = !DILocation(line: 3293, column: 52, scope: !10790)
!10812 = !DILocation(line: 3293, column: 29, scope: !10790)
!10813 = !DILocation(line: 3290, column: 12, scope: !10777)
!10814 = !DILocation(line: 3294, column: 3, scope: !10790)
!10815 = !DILocation(line: 3296, column: 3, scope: !10790)
!10816 = !DILocation(line: 3302, column: 39, scope: !10817)
!10817 = distinct !DILexicalBlock(scope: !10724, file: !3, line: 3302, column: 11)
!10818 = !DILocation(line: 3303, column: 6, scope: !10817)
!10819 = !DILocation(line: 3302, column: 12, scope: !10817)
!10820 = !DILocation(line: 3302, column: 11, scope: !10724)
!10821 = !DILocation(line: 3304, column: 2, scope: !10817)
!10822 = !DILocation(line: 3303, column: 31, scope: !10817)
!10823 = !DILocation(line: 3311, column: 39, scope: !10824)
!10824 = distinct !DILexicalBlock(scope: !10724, file: !3, line: 3311, column: 11)
!10825 = !DILocation(line: 3311, column: 55, scope: !10824)
!10826 = !DILocation(line: 3311, column: 12, scope: !10824)
!10827 = !DILocation(line: 3311, column: 11, scope: !10724)
!10828 = !DILocation(line: 3312, column: 2, scope: !10824)
!10829 = !DILocation(line: 3315, column: 17, scope: !10830)
!10830 = distinct !DILexicalBlock(scope: !10831, file: !3, line: 3315, column: 8)
!10831 = distinct !DILexicalBlock(scope: !10824, file: !3, line: 3314, column: 2)
!10832 = !DILocation(line: 3315, column: 39, scope: !10830)
!10833 = !DILocation(line: 3315, column: 43, scope: !10830)
!10834 = !DILocation(line: 3315, column: 9, scope: !10830)
!10835 = !DILocation(line: 3315, column: 8, scope: !10831)
!10836 = !DILocation(line: 3316, column: 6, scope: !10830)
!10837 = !DILocation(line: 3318, column: 8, scope: !10838)
!10838 = distinct !DILexicalBlock(scope: !10831, file: !3, line: 3318, column: 8)
!10839 = !DILocation(line: 3318, column: 31, scope: !10838)
!10840 = !DILocation(line: 3318, column: 28, scope: !10838)
!10841 = !DILocation(line: 3318, column: 8, scope: !10831)
!10842 = !DILocation(line: 3319, column: 6, scope: !10838)
!10843 = !DILocalVariable(name: "parms1", scope: !10844, file: !3, line: 3322, type: !666)
!10844 = distinct !DILexicalBlock(scope: !10838, file: !3, line: 3321, column: 6)
!10845 = !DILocation(line: 3322, column: 13, scope: !10844)
!10846 = !DILocalVariable(name: "parms2", scope: !10844, file: !3, line: 3322, type: !666)
!10847 = !DILocation(line: 3322, column: 21, scope: !10844)
!10848 = !DILocation(line: 3324, column: 22, scope: !10849)
!10849 = distinct !DILexicalBlock(scope: !10844, file: !3, line: 3324, column: 8)
!10850 = !DILocation(line: 3324, column: 20, scope: !10849)
!10851 = !DILocation(line: 3324, column: 52, scope: !10849)
!10852 = !DILocation(line: 3324, column: 50, scope: !10849)
!10853 = !DILocation(line: 3324, column: 13, scope: !10849)
!10854 = !DILocation(line: 3325, column: 6, scope: !10855)
!10855 = distinct !DILexicalBlock(scope: !10849, file: !3, line: 3324, column: 8)
!10856 = !DILocation(line: 3325, column: 13, scope: !10855)
!10857 = !DILocation(line: 3325, column: 16, scope: !10855)
!10858 = !DILocation(line: 0, scope: !10855)
!10859 = !DILocation(line: 3324, column: 8, scope: !10849)
!10860 = !DILocation(line: 3328, column: 37, scope: !10861)
!10861 = distinct !DILexicalBlock(scope: !10862, file: !3, line: 3328, column: 9)
!10862 = distinct !DILexicalBlock(scope: !10855, file: !3, line: 3327, column: 3)
!10863 = !DILocation(line: 3329, column: 11, scope: !10861)
!10864 = !DILocation(line: 3328, column: 10, scope: !10861)
!10865 = !DILocation(line: 3328, column: 9, scope: !10862)
!10866 = !DILocation(line: 3330, column: 7, scope: !10861)
!10867 = !DILocation(line: 3331, column: 3, scope: !10862)
!10868 = !DILocation(line: 3326, column: 15, scope: !10855)
!10869 = !DILocation(line: 3326, column: 13, scope: !10855)
!10870 = !DILocation(line: 3326, column: 45, scope: !10855)
!10871 = !DILocation(line: 3326, column: 43, scope: !10855)
!10872 = !DILocation(line: 3324, column: 8, scope: !10855)
!10873 = distinct !{!10873, !10859, !10874}
!10874 = !DILocation(line: 3331, column: 3, scope: !10849)
!10875 = !DILocation(line: 3333, column: 12, scope: !10876)
!10876 = distinct !DILexicalBlock(scope: !10844, file: !3, line: 3333, column: 12)
!10877 = !DILocation(line: 3333, column: 19, scope: !10876)
!10878 = !DILocation(line: 3333, column: 22, scope: !10876)
!10879 = !DILocation(line: 3333, column: 12, scope: !10844)
!10880 = !DILocation(line: 3334, column: 3, scope: !10876)
!10881 = !DILocation(line: 3336, column: 8, scope: !10844)
!10882 = !DILocation(line: 3342, column: 34, scope: !10883)
!10883 = distinct !DILexicalBlock(scope: !10884, file: !3, line: 3342, column: 6)
!10884 = distinct !DILexicalBlock(scope: !10724, file: !3, line: 3341, column: 7)
!10885 = !DILocation(line: 3342, column: 50, scope: !10883)
!10886 = !DILocation(line: 3342, column: 7, scope: !10883)
!10887 = !DILocation(line: 3343, column: 6, scope: !10883)
!10888 = !DILocation(line: 3343, column: 37, scope: !10883)
!10889 = !DILocation(line: 3344, column: 9, scope: !10883)
!10890 = !DILocation(line: 3343, column: 10, scope: !10883)
!10891 = !DILocation(line: 3342, column: 6, scope: !10884)
!10892 = !DILocation(line: 3345, column: 4, scope: !10883)
!10893 = !DILocation(line: 3347, column: 2, scope: !10884)
!10894 = !DILocation(line: 3355, column: 6, scope: !10895)
!10895 = distinct !DILexicalBlock(scope: !10896, file: !3, line: 3355, column: 6)
!10896 = distinct !DILexicalBlock(scope: !10724, file: !3, line: 3352, column: 7)
!10897 = !DILocation(line: 3355, column: 37, scope: !10895)
!10898 = !DILocation(line: 3355, column: 34, scope: !10895)
!10899 = !DILocation(line: 3355, column: 6, scope: !10896)
!10900 = !DILocation(line: 3356, column: 4, scope: !10895)
!10901 = !DILocation(line: 3360, column: 6, scope: !10902)
!10902 = distinct !DILexicalBlock(scope: !10896, file: !3, line: 3360, column: 6)
!10903 = !DILocation(line: 3360, column: 36, scope: !10902)
!10904 = !DILocation(line: 3360, column: 33, scope: !10902)
!10905 = !DILocation(line: 3361, column: 6, scope: !10902)
!10906 = !DILocation(line: 3361, column: 9, scope: !10902)
!10907 = !DILocation(line: 3362, column: 6, scope: !10902)
!10908 = !DILocation(line: 3362, column: 11, scope: !10902)
!10909 = !DILocation(line: 3363, column: 3, scope: !10902)
!10910 = !DILocation(line: 3363, column: 7, scope: !10902)
!10911 = !DILocation(line: 3364, column: 6, scope: !10902)
!10912 = !DILocation(line: 3364, column: 31, scope: !10902)
!10913 = !DILocation(line: 3365, column: 10, scope: !10902)
!10914 = !DILocation(line: 3364, column: 9, scope: !10902)
!10915 = !DILocation(line: 3360, column: 6, scope: !10896)
!10916 = !DILocation(line: 3369, column: 10, scope: !10917)
!10917 = distinct !DILexicalBlock(scope: !10918, file: !3, line: 3369, column: 10)
!10918 = distinct !DILexicalBlock(scope: !10902, file: !3, line: 3366, column: 4)
!10919 = !DILocation(line: 3369, column: 10, scope: !10918)
!10920 = !DILocation(line: 3370, column: 25, scope: !10917)
!10921 = !DILocation(line: 3370, column: 8, scope: !10917)
!10922 = !DILocation(line: 3370, column: 23, scope: !10917)
!10923 = !DILocation(line: 3372, column: 25, scope: !10917)
!10924 = !DILocation(line: 3372, column: 8, scope: !10917)
!10925 = !DILocation(line: 3372, column: 23, scope: !10917)
!10926 = !DILocation(line: 3373, column: 6, scope: !10918)
!10927 = !DILocation(line: 3378, column: 33, scope: !10928)
!10928 = distinct !DILexicalBlock(scope: !10896, file: !3, line: 3378, column: 6)
!10929 = !DILocation(line: 3378, column: 49, scope: !10928)
!10930 = !DILocation(line: 3378, column: 6, scope: !10928)
!10931 = !DILocation(line: 3378, column: 6, scope: !10896)
!10932 = !DILocation(line: 3379, column: 4, scope: !10928)
!10933 = !DILocation(line: 3381, column: 2, scope: !10896)
!10934 = !DILocalVariable(name: "min1", scope: !10935, file: !3, line: 3387, type: !666)
!10935 = distinct !DILexicalBlock(scope: !10724, file: !3, line: 3386, column: 7)
!10936 = !DILocation(line: 3387, column: 7, scope: !10935)
!10937 = !DILocation(line: 3387, column: 14, scope: !10935)
!10938 = !DILocalVariable(name: "max1", scope: !10935, file: !3, line: 3388, type: !666)
!10939 = !DILocation(line: 3388, column: 7, scope: !10935)
!10940 = !DILocation(line: 3388, column: 14, scope: !10935)
!10941 = !DILocalVariable(name: "min2", scope: !10935, file: !3, line: 3389, type: !666)
!10942 = !DILocation(line: 3389, column: 7, scope: !10935)
!10943 = !DILocation(line: 3389, column: 14, scope: !10935)
!10944 = !DILocalVariable(name: "max2", scope: !10935, file: !3, line: 3390, type: !666)
!10945 = !DILocation(line: 3390, column: 7, scope: !10935)
!10946 = !DILocation(line: 3390, column: 14, scope: !10935)
!10947 = !DILocalVariable(name: "min_equal_p", scope: !10935, file: !3, line: 3391, type: !769)
!10948 = !DILocation(line: 3391, column: 7, scope: !10935)
!10949 = !DILocalVariable(name: "max_equal_p", scope: !10935, file: !3, line: 3392, type: !769)
!10950 = !DILocation(line: 3392, column: 7, scope: !10935)
!10951 = !DILocation(line: 3396, column: 6, scope: !10952)
!10952 = distinct !DILexicalBlock(scope: !10935, file: !3, line: 3396, column: 6)
!10953 = !DILocation(line: 3396, column: 11, scope: !10952)
!10954 = !DILocation(line: 3396, column: 24, scope: !10952)
!10955 = !DILocation(line: 3396, column: 27, scope: !10952)
!10956 = !DILocation(line: 3396, column: 32, scope: !10952)
!10957 = !DILocation(line: 3396, column: 6, scope: !10935)
!10958 = !DILocation(line: 3397, column: 16, scope: !10952)
!10959 = !DILocation(line: 3397, column: 4, scope: !10952)
!10960 = !DILocation(line: 3398, column: 11, scope: !10961)
!10961 = distinct !DILexicalBlock(scope: !10952, file: !3, line: 3398, column: 11)
!10962 = !DILocation(line: 3398, column: 16, scope: !10961)
!10963 = !DILocation(line: 3398, column: 19, scope: !10961)
!10964 = !DILocation(line: 3398, column: 24, scope: !10961)
!10965 = !DILocation(line: 3398, column: 44, scope: !10961)
!10966 = !DILocation(line: 3398, column: 50, scope: !10961)
!10967 = !DILocation(line: 3398, column: 27, scope: !10961)
!10968 = !DILocation(line: 3398, column: 11, scope: !10952)
!10969 = !DILocation(line: 3399, column: 16, scope: !10961)
!10970 = !DILocation(line: 3399, column: 4, scope: !10961)
!10971 = !DILocation(line: 3403, column: 6, scope: !10972)
!10972 = distinct !DILexicalBlock(scope: !10935, file: !3, line: 3403, column: 6)
!10973 = !DILocation(line: 3403, column: 11, scope: !10972)
!10974 = !DILocation(line: 3403, column: 24, scope: !10972)
!10975 = !DILocation(line: 3403, column: 27, scope: !10972)
!10976 = !DILocation(line: 3403, column: 32, scope: !10972)
!10977 = !DILocation(line: 3403, column: 6, scope: !10935)
!10978 = !DILocation(line: 3404, column: 16, scope: !10972)
!10979 = !DILocation(line: 3404, column: 4, scope: !10972)
!10980 = !DILocation(line: 3405, column: 11, scope: !10981)
!10981 = distinct !DILexicalBlock(scope: !10972, file: !3, line: 3405, column: 11)
!10982 = !DILocation(line: 3405, column: 16, scope: !10981)
!10983 = !DILocation(line: 3405, column: 19, scope: !10981)
!10984 = !DILocation(line: 3405, column: 24, scope: !10981)
!10985 = !DILocation(line: 3405, column: 44, scope: !10981)
!10986 = !DILocation(line: 3405, column: 50, scope: !10981)
!10987 = !DILocation(line: 3405, column: 27, scope: !10981)
!10988 = !DILocation(line: 3405, column: 11, scope: !10972)
!10989 = !DILocation(line: 3406, column: 16, scope: !10981)
!10990 = !DILocation(line: 3406, column: 4, scope: !10981)
!10991 = !DILocation(line: 3408, column: 7, scope: !10992)
!10992 = distinct !DILexicalBlock(scope: !10935, file: !3, line: 3408, column: 6)
!10993 = !DILocation(line: 3408, column: 19, scope: !10992)
!10994 = !DILocation(line: 3408, column: 23, scope: !10992)
!10995 = !DILocation(line: 3408, column: 6, scope: !10935)
!10996 = !DILocation(line: 3409, column: 4, scope: !10992)
!10997 = !DILocation(line: 3411, column: 2, scope: !10935)
!10998 = !DILocalVariable(name: "v1", scope: !10999, file: !3, line: 3422, type: !666)
!10999 = distinct !DILexicalBlock(scope: !10724, file: !3, line: 3415, column: 7)
!11000 = !DILocation(line: 3422, column: 7, scope: !10999)
!11001 = !DILocalVariable(name: "v2", scope: !10999, file: !3, line: 3422, type: !666)
!11002 = !DILocation(line: 3422, column: 11, scope: !10999)
!11003 = !DILocation(line: 3425, column: 6, scope: !11004)
!11004 = distinct !DILexicalBlock(scope: !10999, file: !3, line: 3425, column: 6)
!11005 = !DILocation(line: 3425, column: 26, scope: !11004)
!11006 = !DILocation(line: 3425, column: 23, scope: !11004)
!11007 = !DILocation(line: 3425, column: 6, scope: !10999)
!11008 = !DILocation(line: 3426, column: 4, scope: !11004)
!11009 = !DILocation(line: 3428, column: 12, scope: !11010)
!11010 = distinct !DILexicalBlock(scope: !10999, file: !3, line: 3428, column: 2)
!11011 = !DILocation(line: 3428, column: 10, scope: !11010)
!11012 = !DILocation(line: 3428, column: 35, scope: !11010)
!11013 = !DILocation(line: 3428, column: 33, scope: !11010)
!11014 = !DILocation(line: 3428, column: 7, scope: !11010)
!11015 = !DILocation(line: 3429, column: 7, scope: !11016)
!11016 = distinct !DILexicalBlock(scope: !11010, file: !3, line: 3428, column: 2)
!11017 = !DILocation(line: 3429, column: 10, scope: !11016)
!11018 = !DILocation(line: 3429, column: 13, scope: !11016)
!11019 = !DILocation(line: 0, scope: !11016)
!11020 = !DILocation(line: 3428, column: 2, scope: !11010)
!11021 = !DILocalVariable(name: "c1", scope: !11022, file: !3, line: 3432, type: !666)
!11022 = distinct !DILexicalBlock(scope: !11016, file: !3, line: 3431, column: 4)
!11023 = !DILocation(line: 3432, column: 11, scope: !11022)
!11024 = !DILocation(line: 3432, column: 16, scope: !11022)
!11025 = !DILocalVariable(name: "c2", scope: !11022, file: !3, line: 3433, type: !666)
!11026 = !DILocation(line: 3433, column: 11, scope: !11022)
!11027 = !DILocation(line: 3433, column: 16, scope: !11022)
!11028 = !DILocation(line: 3435, column: 10, scope: !11029)
!11029 = distinct !DILexicalBlock(scope: !11022, file: !3, line: 3435, column: 10)
!11030 = !DILocation(line: 3435, column: 25, scope: !11029)
!11031 = !DILocation(line: 3435, column: 10, scope: !11022)
!11032 = !DILocation(line: 3436, column: 13, scope: !11029)
!11033 = !DILocation(line: 3436, column: 11, scope: !11029)
!11034 = !DILocation(line: 3436, column: 8, scope: !11029)
!11035 = !DILocation(line: 3438, column: 10, scope: !11036)
!11036 = distinct !DILexicalBlock(scope: !11022, file: !3, line: 3438, column: 10)
!11037 = !DILocation(line: 3438, column: 25, scope: !11036)
!11038 = !DILocation(line: 3438, column: 10, scope: !11022)
!11039 = !DILocation(line: 3439, column: 13, scope: !11036)
!11040 = !DILocation(line: 3439, column: 11, scope: !11036)
!11041 = !DILocation(line: 3439, column: 8, scope: !11036)
!11042 = !DILocation(line: 3441, column: 30, scope: !11043)
!11043 = distinct !DILexicalBlock(scope: !11022, file: !3, line: 3441, column: 10)
!11044 = !DILocation(line: 3441, column: 34, scope: !11043)
!11045 = !DILocation(line: 3441, column: 10, scope: !11043)
!11046 = !DILocation(line: 3441, column: 38, scope: !11043)
!11047 = !DILocation(line: 3441, column: 10, scope: !11022)
!11048 = !DILocation(line: 3442, column: 8, scope: !11043)
!11049 = !DILocation(line: 3443, column: 4, scope: !11022)
!11050 = !DILocation(line: 3430, column: 12, scope: !11016)
!11051 = !DILocation(line: 3430, column: 10, scope: !11016)
!11052 = !DILocation(line: 3430, column: 34, scope: !11016)
!11053 = !DILocation(line: 3430, column: 32, scope: !11016)
!11054 = !DILocation(line: 3428, column: 2, scope: !11016)
!11055 = distinct !{!11055, !11020, !11056}
!11056 = !DILocation(line: 3443, column: 4, scope: !11010)
!11057 = !DILocation(line: 3447, column: 6, scope: !11058)
!11058 = distinct !DILexicalBlock(scope: !10999, file: !3, line: 3447, column: 6)
!11059 = !DILocation(line: 3447, column: 9, scope: !11058)
!11060 = !DILocation(line: 3447, column: 12, scope: !11058)
!11061 = !DILocation(line: 3447, column: 6, scope: !10999)
!11062 = !DILocation(line: 3448, column: 4, scope: !11058)
!11063 = !DILocation(line: 3450, column: 2, scope: !10999)
!11064 = !DILocalVariable(name: "f1", scope: !11065, file: !3, line: 3457, type: !666)
!11065 = distinct !DILexicalBlock(scope: !10724, file: !3, line: 3456, column: 7)
!11066 = !DILocation(line: 3457, column: 7, scope: !11065)
!11067 = !DILocalVariable(name: "f2", scope: !11065, file: !3, line: 3457, type: !666)
!11068 = !DILocation(line: 3457, column: 11, scope: !11065)
!11069 = !DILocation(line: 3461, column: 6, scope: !11070)
!11070 = distinct !DILexicalBlock(scope: !11065, file: !3, line: 3461, column: 6)
!11071 = !DILocation(line: 3462, column: 9, scope: !11070)
!11072 = !DILocation(line: 3462, column: 6, scope: !11070)
!11073 = !DILocation(line: 3461, column: 6, scope: !11065)
!11074 = !DILocation(line: 3463, column: 4, scope: !11070)
!11075 = !DILocation(line: 3466, column: 29, scope: !11076)
!11076 = distinct !DILexicalBlock(scope: !11065, file: !3, line: 3466, column: 6)
!11077 = !DILocation(line: 3467, column: 8, scope: !11076)
!11078 = !DILocation(line: 3466, column: 7, scope: !11076)
!11079 = !DILocation(line: 3466, column: 6, scope: !11065)
!11080 = !DILocation(line: 3468, column: 4, scope: !11076)
!11081 = !DILocation(line: 3471, column: 12, scope: !11082)
!11082 = distinct !DILexicalBlock(scope: !11065, file: !3, line: 3471, column: 2)
!11083 = !DILocation(line: 3471, column: 10, scope: !11082)
!11084 = !DILocation(line: 3471, column: 35, scope: !11082)
!11085 = !DILocation(line: 3471, column: 33, scope: !11082)
!11086 = !DILocation(line: 3471, column: 7, scope: !11082)
!11087 = !DILocation(line: 3472, column: 7, scope: !11088)
!11088 = distinct !DILexicalBlock(scope: !11082, file: !3, line: 3471, column: 2)
!11089 = !DILocation(line: 3472, column: 10, scope: !11088)
!11090 = !DILocation(line: 3472, column: 13, scope: !11088)
!11091 = !DILocation(line: 0, scope: !11088)
!11092 = !DILocation(line: 3471, column: 2, scope: !11082)
!11093 = !DILocation(line: 3476, column: 10, scope: !11094)
!11094 = distinct !DILexicalBlock(scope: !11095, file: !3, line: 3476, column: 10)
!11095 = distinct !DILexicalBlock(scope: !11088, file: !3, line: 3474, column: 4)
!11096 = !DILocation(line: 3476, column: 28, scope: !11094)
!11097 = !DILocation(line: 3476, column: 25, scope: !11094)
!11098 = !DILocation(line: 3477, column: 3, scope: !11094)
!11099 = !DILocation(line: 3477, column: 6, scope: !11094)
!11100 = !DILocation(line: 3477, column: 36, scope: !11094)
!11101 = !DILocation(line: 3477, column: 33, scope: !11094)
!11102 = !DILocation(line: 3478, column: 3, scope: !11094)
!11103 = !DILocation(line: 3478, column: 29, scope: !11094)
!11104 = !DILocation(line: 3478, column: 33, scope: !11094)
!11105 = !DILocation(line: 3478, column: 7, scope: !11094)
!11106 = !DILocation(line: 3479, column: 3, scope: !11094)
!11107 = !DILocation(line: 3479, column: 34, scope: !11094)
!11108 = !DILocation(line: 3480, column: 13, scope: !11094)
!11109 = !DILocation(line: 3479, column: 7, scope: !11094)
!11110 = !DILocation(line: 3476, column: 10, scope: !11095)
!11111 = !DILocation(line: 3481, column: 8, scope: !11094)
!11112 = !DILocation(line: 3482, column: 4, scope: !11095)
!11113 = !DILocation(line: 3473, column: 12, scope: !11088)
!11114 = !DILocation(line: 3473, column: 10, scope: !11088)
!11115 = !DILocation(line: 3473, column: 34, scope: !11088)
!11116 = !DILocation(line: 3473, column: 32, scope: !11088)
!11117 = !DILocation(line: 3471, column: 2, scope: !11088)
!11118 = distinct !{!11118, !11092, !11119}
!11119 = !DILocation(line: 3482, column: 4, scope: !11082)
!11120 = !DILocation(line: 3486, column: 6, scope: !11121)
!11121 = distinct !DILexicalBlock(scope: !11065, file: !3, line: 3486, column: 6)
!11122 = !DILocation(line: 3486, column: 9, scope: !11121)
!11123 = !DILocation(line: 3486, column: 12, scope: !11121)
!11124 = !DILocation(line: 3486, column: 6, scope: !11065)
!11125 = !DILocation(line: 3487, column: 4, scope: !11121)
!11126 = !DILocation(line: 3489, column: 2, scope: !11065)
!11127 = !DILocation(line: 3493, column: 7, scope: !10724)
!11128 = !DILocation(line: 3494, column: 5, scope: !10724)
!11129 = !DILabel(scope: !10571, name: "different_types", file: !3, line: 3497)
!11130 = !DILocation(line: 3497, column: 1, scope: !10571)
!11131 = !DILocation(line: 3498, column: 3, scope: !10571)
!11132 = !DILocation(line: 3498, column: 6, scope: !10571)
!11133 = !DILocation(line: 3498, column: 13, scope: !10571)
!11134 = !DILocation(line: 3499, column: 3, scope: !10571)
!11135 = !DILabel(scope: !10571, name: "same_types", file: !3, line: 3502)
!11136 = !DILocation(line: 3502, column: 1, scope: !10571)
!11137 = !DILocation(line: 3503, column: 3, scope: !10571)
!11138 = !DILocation(line: 3503, column: 6, scope: !10571)
!11139 = !DILocation(line: 3503, column: 13, scope: !10571)
!11140 = !DILocation(line: 3504, column: 3, scope: !10571)
!11141 = !DILocation(line: 3505, column: 1, scope: !10571)
!11142 = distinct !DISubprogram(name: "lookup_type_pair", scope: !3, file: !3, line: 3055, type: !11143, scopeLine: 3056, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!11143 = !DISubroutineType(types: !11144)
!11144 = !{!1796, !666, !666, !11145, !10092}
!11145 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !953, size: 64)
!11146 = !DILocalVariable(name: "t1", arg: 1, scope: !11142, file: !3, line: 3055, type: !666)
!11147 = !DILocation(line: 3055, column: 24, scope: !11142)
!11148 = !DILocalVariable(name: "t2", arg: 2, scope: !11142, file: !3, line: 3055, type: !666)
!11149 = !DILocation(line: 3055, column: 33, scope: !11142)
!11150 = !DILocalVariable(name: "visited_p", arg: 3, scope: !11142, file: !3, line: 3055, type: !11145)
!11151 = !DILocation(line: 3055, column: 45, scope: !11142)
!11152 = !DILocalVariable(name: "ob_p", arg: 4, scope: !11142, file: !3, line: 3055, type: !10092)
!11153 = !DILocation(line: 3055, column: 72, scope: !11142)
!11154 = !DILocalVariable(name: "pair", scope: !11142, file: !3, line: 3057, type: !1798)
!11155 = !DILocation(line: 3057, column: 22, scope: !11142)
!11156 = !DILocalVariable(name: "p", scope: !11142, file: !3, line: 3058, type: !1796)
!11157 = !DILocation(line: 3058, column: 15, scope: !11142)
!11158 = !DILocalVariable(name: "slot", scope: !11142, file: !3, line: 3059, type: !976)
!11159 = !DILocation(line: 3059, column: 10, scope: !11142)
!11160 = !DILocation(line: 3061, column: 8, scope: !11161)
!11161 = distinct !DILexicalBlock(scope: !11142, file: !3, line: 3061, column: 7)
!11162 = !DILocation(line: 3061, column: 7, scope: !11161)
!11163 = !DILocation(line: 3061, column: 18, scope: !11161)
!11164 = !DILocation(line: 3061, column: 7, scope: !11142)
!11165 = !DILocation(line: 3063, column: 20, scope: !11166)
!11166 = distinct !DILexicalBlock(scope: !11161, file: !3, line: 3062, column: 5)
!11167 = !DILocation(line: 3063, column: 8, scope: !11166)
!11168 = !DILocation(line: 3063, column: 18, scope: !11166)
!11169 = !DILocation(line: 3064, column: 7, scope: !11166)
!11170 = !DILocation(line: 3065, column: 5, scope: !11166)
!11171 = !DILocation(line: 3067, column: 15, scope: !11142)
!11172 = !DILocation(line: 3067, column: 8, scope: !11142)
!11173 = !DILocation(line: 3067, column: 13, scope: !11142)
!11174 = !DILocation(line: 3068, column: 15, scope: !11142)
!11175 = !DILocation(line: 3068, column: 8, scope: !11142)
!11176 = !DILocation(line: 3068, column: 13, scope: !11142)
!11177 = !DILocation(line: 3069, column: 27, scope: !11142)
!11178 = !DILocation(line: 3069, column: 26, scope: !11142)
!11179 = !DILocation(line: 3069, column: 38, scope: !11142)
!11180 = !DILocation(line: 3069, column: 10, scope: !11142)
!11181 = !DILocation(line: 3069, column: 8, scope: !11142)
!11182 = !DILocation(line: 3071, column: 8, scope: !11183)
!11183 = distinct !DILexicalBlock(scope: !11142, file: !3, line: 3071, column: 7)
!11184 = !DILocation(line: 3071, column: 7, scope: !11183)
!11185 = !DILocation(line: 3071, column: 7, scope: !11142)
!11186 = !DILocation(line: 3072, column: 27, scope: !11183)
!11187 = !DILocation(line: 3072, column: 9, scope: !11183)
!11188 = !DILocation(line: 3072, column: 7, scope: !11183)
!11189 = !DILocation(line: 3072, column: 5, scope: !11183)
!11190 = !DILocation(line: 3075, column: 11, scope: !11191)
!11191 = distinct !DILexicalBlock(scope: !11183, file: !3, line: 3074, column: 5)
!11192 = !DILocation(line: 3075, column: 9, scope: !11191)
!11193 = !DILocation(line: 3076, column: 17, scope: !11191)
!11194 = !DILocation(line: 3076, column: 7, scope: !11191)
!11195 = !DILocation(line: 3076, column: 10, scope: !11191)
!11196 = !DILocation(line: 3076, column: 15, scope: !11191)
!11197 = !DILocation(line: 3077, column: 17, scope: !11191)
!11198 = !DILocation(line: 3077, column: 7, scope: !11191)
!11199 = !DILocation(line: 3077, column: 10, scope: !11191)
!11200 = !DILocation(line: 3077, column: 15, scope: !11191)
!11201 = !DILocation(line: 3078, column: 7, scope: !11191)
!11202 = !DILocation(line: 3078, column: 10, scope: !11191)
!11203 = !DILocation(line: 3078, column: 17, scope: !11191)
!11204 = !DILocation(line: 3079, column: 24, scope: !11191)
!11205 = !DILocation(line: 3079, column: 15, scope: !11191)
!11206 = !DILocation(line: 3079, column: 8, scope: !11191)
!11207 = !DILocation(line: 3079, column: 13, scope: !11191)
!11208 = !DILocation(line: 3082, column: 10, scope: !11142)
!11209 = !DILocation(line: 3082, column: 3, scope: !11142)
!11210 = distinct !DISubprogram(name: "compare_type_names_p", scope: !3, file: !3, line: 3091, type: !11211, scopeLine: 3092, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!11211 = !DISubroutineType(types: !11212)
!11212 = !{!769, !666, !666, !769}
!11213 = !DILocalVariable(name: "t1", arg: 1, scope: !11210, file: !3, line: 3091, type: !666)
!11214 = !DILocation(line: 3091, column: 28, scope: !11210)
!11215 = !DILocalVariable(name: "t2", arg: 2, scope: !11210, file: !3, line: 3091, type: !666)
!11216 = !DILocation(line: 3091, column: 37, scope: !11210)
!11217 = !DILocalVariable(name: "for_completion_p", arg: 3, scope: !11210, file: !3, line: 3091, type: !769)
!11218 = !DILocation(line: 3091, column: 46, scope: !11210)
!11219 = !DILocalVariable(name: "name1", scope: !11210, file: !3, line: 3093, type: !666)
!11220 = !DILocation(line: 3093, column: 8, scope: !11210)
!11221 = !DILocation(line: 3093, column: 16, scope: !11210)
!11222 = !DILocalVariable(name: "name2", scope: !11210, file: !3, line: 3094, type: !666)
!11223 = !DILocation(line: 3094, column: 8, scope: !11210)
!11224 = !DILocation(line: 3094, column: 16, scope: !11210)
!11225 = !DILocation(line: 3097, column: 7, scope: !11226)
!11226 = distinct !DILexicalBlock(scope: !11210, file: !3, line: 3097, column: 7)
!11227 = !DILocation(line: 3098, column: 7, scope: !11226)
!11228 = !DILocation(line: 3098, column: 12, scope: !11226)
!11229 = !DILocation(line: 3098, column: 18, scope: !11226)
!11230 = !DILocation(line: 3098, column: 22, scope: !11226)
!11231 = !DILocation(line: 3097, column: 7, scope: !11210)
!11232 = !DILocation(line: 3099, column: 5, scope: !11226)
!11233 = !DILocation(line: 3101, column: 7, scope: !11234)
!11234 = distinct !DILexicalBlock(scope: !11210, file: !3, line: 3101, column: 7)
!11235 = !DILocation(line: 3101, column: 13, scope: !11234)
!11236 = !DILocation(line: 3101, column: 16, scope: !11234)
!11237 = !DILocation(line: 3101, column: 34, scope: !11234)
!11238 = !DILocation(line: 3101, column: 7, scope: !11210)
!11239 = !DILocation(line: 3103, column: 15, scope: !11240)
!11240 = distinct !DILexicalBlock(scope: !11234, file: !3, line: 3102, column: 5)
!11241 = !DILocation(line: 3103, column: 13, scope: !11240)
!11242 = !DILocation(line: 3104, column: 11, scope: !11243)
!11243 = distinct !DILexicalBlock(scope: !11240, file: !3, line: 3104, column: 11)
!11244 = !DILocation(line: 3105, column: 4, scope: !11243)
!11245 = !DILocation(line: 3105, column: 8, scope: !11243)
!11246 = !DILocation(line: 3104, column: 11, scope: !11240)
!11247 = !DILocation(line: 3106, column: 2, scope: !11243)
!11248 = !DILocation(line: 3107, column: 5, scope: !11240)
!11249 = !DILocation(line: 3108, column: 3, scope: !11210)
!11250 = !DILocation(line: 3110, column: 7, scope: !11251)
!11251 = distinct !DILexicalBlock(scope: !11210, file: !3, line: 3110, column: 7)
!11252 = !DILocation(line: 3110, column: 13, scope: !11251)
!11253 = !DILocation(line: 3110, column: 16, scope: !11251)
!11254 = !DILocation(line: 3110, column: 34, scope: !11251)
!11255 = !DILocation(line: 3110, column: 7, scope: !11210)
!11256 = !DILocation(line: 3112, column: 15, scope: !11257)
!11257 = distinct !DILexicalBlock(scope: !11251, file: !3, line: 3111, column: 5)
!11258 = !DILocation(line: 3112, column: 13, scope: !11257)
!11259 = !DILocation(line: 3113, column: 11, scope: !11260)
!11260 = distinct !DILexicalBlock(scope: !11257, file: !3, line: 3113, column: 11)
!11261 = !DILocation(line: 3114, column: 4, scope: !11260)
!11262 = !DILocation(line: 3114, column: 8, scope: !11260)
!11263 = !DILocation(line: 3113, column: 11, scope: !11257)
!11264 = !DILocation(line: 3115, column: 2, scope: !11260)
!11265 = !DILocation(line: 3116, column: 5, scope: !11257)
!11266 = !DILocation(line: 3117, column: 3, scope: !11210)
!11267 = !DILocation(line: 3121, column: 7, scope: !11268)
!11268 = distinct !DILexicalBlock(scope: !11210, file: !3, line: 3121, column: 7)
!11269 = !DILocation(line: 3121, column: 16, scope: !11268)
!11270 = !DILocation(line: 3121, column: 13, scope: !11268)
!11271 = !DILocation(line: 3121, column: 7, scope: !11210)
!11272 = !DILocation(line: 3122, column: 5, scope: !11268)
!11273 = !DILocation(line: 3124, column: 3, scope: !11210)
!11274 = !DILocation(line: 3125, column: 1, scope: !11210)
!11275 = distinct !DISubprogram(name: "type_pair_hash", scope: !3, file: !3, line: 3031, type: !960, scopeLine: 3032, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!11276 = !DILocalVariable(name: "p", arg: 1, scope: !11275, file: !3, line: 3031, type: !963)
!11277 = !DILocation(line: 3031, column: 29, scope: !11275)
!11278 = !DILocalVariable(name: "pair", scope: !11275, file: !3, line: 3033, type: !1803)
!11279 = !DILocation(line: 3033, column: 29, scope: !11275)
!11280 = !DILocation(line: 3033, column: 65, scope: !11275)
!11281 = !DILocation(line: 3033, column: 36, scope: !11275)
!11282 = !DILocalVariable(name: "val1", scope: !11275, file: !3, line: 3034, type: !962)
!11283 = !DILocation(line: 3034, column: 13, scope: !11275)
!11284 = !DILocation(line: 3034, column: 20, scope: !11275)
!11285 = !DILocation(line: 3034, column: 26, scope: !11275)
!11286 = !DILocalVariable(name: "val2", scope: !11275, file: !3, line: 3035, type: !962)
!11287 = !DILocation(line: 3035, column: 13, scope: !11275)
!11288 = !DILocation(line: 3035, column: 20, scope: !11275)
!11289 = !DILocation(line: 3035, column: 26, scope: !11275)
!11290 = !DILocation(line: 3036, column: 37, scope: !11275)
!11291 = !DILocation(line: 3036, column: 43, scope: !11275)
!11292 = !DILocation(line: 3036, column: 11, scope: !11275)
!11293 = !DILocation(line: 3037, column: 32, scope: !11275)
!11294 = !DILocation(line: 3037, column: 38, scope: !11275)
!11295 = !DILocation(line: 3037, column: 6, scope: !11275)
!11296 = !DILocation(line: 3037, column: 4, scope: !11275)
!11297 = !DILocation(line: 3036, column: 3, scope: !11275)
!11298 = distinct !DISubprogram(name: "type_pair_eq", scope: !3, file: !3, line: 3043, type: !968, scopeLine: 3044, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!11299 = !DILocalVariable(name: "p1", arg: 1, scope: !11298, file: !3, line: 3043, type: !963)
!11300 = !DILocation(line: 3043, column: 27, scope: !11298)
!11301 = !DILocalVariable(name: "p2", arg: 2, scope: !11298, file: !3, line: 3043, type: !963)
!11302 = !DILocation(line: 3043, column: 43, scope: !11298)
!11303 = !DILocalVariable(name: "pair1", scope: !11298, file: !3, line: 3045, type: !1803)
!11304 = !DILocation(line: 3045, column: 29, scope: !11298)
!11305 = !DILocation(line: 3045, column: 66, scope: !11298)
!11306 = !DILocation(line: 3045, column: 37, scope: !11298)
!11307 = !DILocalVariable(name: "pair2", scope: !11298, file: !3, line: 3046, type: !1803)
!11308 = !DILocation(line: 3046, column: 29, scope: !11298)
!11309 = !DILocation(line: 3046, column: 66, scope: !11298)
!11310 = !DILocation(line: 3046, column: 37, scope: !11298)
!11311 = !DILocation(line: 3047, column: 12, scope: !11298)
!11312 = !DILocation(line: 3047, column: 19, scope: !11298)
!11313 = !DILocation(line: 3047, column: 27, scope: !11298)
!11314 = !DILocation(line: 3047, column: 34, scope: !11298)
!11315 = !DILocation(line: 3047, column: 24, scope: !11298)
!11316 = !DILocation(line: 3047, column: 39, scope: !11298)
!11317 = !DILocation(line: 3047, column: 42, scope: !11298)
!11318 = !DILocation(line: 3047, column: 49, scope: !11298)
!11319 = !DILocation(line: 3047, column: 57, scope: !11298)
!11320 = !DILocation(line: 3047, column: 64, scope: !11298)
!11321 = !DILocation(line: 3047, column: 54, scope: !11298)
!11322 = !DILocation(line: 3048, column: 4, scope: !11298)
!11323 = !DILocation(line: 3048, column: 8, scope: !11298)
!11324 = !DILocation(line: 3048, column: 15, scope: !11298)
!11325 = !DILocation(line: 3048, column: 23, scope: !11298)
!11326 = !DILocation(line: 3048, column: 30, scope: !11298)
!11327 = !DILocation(line: 3048, column: 20, scope: !11298)
!11328 = !DILocation(line: 3048, column: 35, scope: !11298)
!11329 = !DILocation(line: 3048, column: 38, scope: !11298)
!11330 = !DILocation(line: 3048, column: 45, scope: !11298)
!11331 = !DILocation(line: 3048, column: 53, scope: !11298)
!11332 = !DILocation(line: 3048, column: 60, scope: !11298)
!11333 = !DILocation(line: 3048, column: 50, scope: !11298)
!11334 = !DILocation(line: 0, scope: !11298)
!11335 = !DILocation(line: 3047, column: 3, scope: !11298)
!11336 = distinct !DISubprogram(name: "op_iter_init", scope: !8944, file: !8944, line: 742, type: !11337, scopeLine: 743, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!11337 = !DISubroutineType(types: !11338)
!11338 = !{null, !8947, !594, !746}
!11339 = !DILocalVariable(name: "ptr", arg: 1, scope: !11336, file: !8944, line: 742, type: !8947)
!11340 = !DILocation(line: 742, column: 28, scope: !11336)
!11341 = !DILocalVariable(name: "stmt", arg: 2, scope: !11336, file: !8944, line: 742, type: !594)
!11342 = !DILocation(line: 742, column: 40, scope: !11336)
!11343 = !DILocalVariable(name: "flags", arg: 3, scope: !11336, file: !8944, line: 742, type: !746)
!11344 = !DILocation(line: 742, column: 50, scope: !11336)
!11345 = !DILocation(line: 746, column: 3, scope: !11336)
!11346 = !DILocation(line: 748, column: 16, scope: !11336)
!11347 = !DILocation(line: 748, column: 22, scope: !11336)
!11348 = !DILocation(line: 748, column: 15, scope: !11336)
!11349 = !DILocation(line: 748, column: 68, scope: !11336)
!11350 = !DILocation(line: 748, column: 52, scope: !11336)
!11351 = !DILocation(line: 748, column: 3, scope: !11336)
!11352 = !DILocation(line: 748, column: 8, scope: !11336)
!11353 = !DILocation(line: 748, column: 13, scope: !11336)
!11354 = !DILocation(line: 749, column: 9, scope: !11355)
!11355 = distinct !DILexicalBlock(scope: !11336, file: !8944, line: 749, column: 7)
!11356 = !DILocation(line: 749, column: 15, scope: !11355)
!11357 = !DILocation(line: 750, column: 7, scope: !11355)
!11358 = !DILocation(line: 750, column: 10, scope: !11355)
!11359 = !DILocation(line: 750, column: 15, scope: !11355)
!11360 = !DILocation(line: 751, column: 7, scope: !11355)
!11361 = !DILocation(line: 751, column: 23, scope: !11355)
!11362 = !DILocation(line: 751, column: 10, scope: !11355)
!11363 = !DILocation(line: 751, column: 29, scope: !11355)
!11364 = !DILocation(line: 749, column: 7, scope: !11336)
!11365 = !DILocation(line: 752, column: 17, scope: !11355)
!11366 = !DILocation(line: 752, column: 22, scope: !11355)
!11367 = !DILocation(line: 752, column: 28, scope: !11355)
!11368 = !DILocation(line: 752, column: 5, scope: !11355)
!11369 = !DILocation(line: 752, column: 10, scope: !11355)
!11370 = !DILocation(line: 752, column: 15, scope: !11355)
!11371 = !DILocation(line: 753, column: 16, scope: !11336)
!11372 = !DILocation(line: 753, column: 22, scope: !11336)
!11373 = !DILocation(line: 753, column: 15, scope: !11336)
!11374 = !DILocation(line: 753, column: 68, scope: !11336)
!11375 = !DILocation(line: 753, column: 52, scope: !11336)
!11376 = !DILocation(line: 753, column: 3, scope: !11336)
!11377 = !DILocation(line: 753, column: 8, scope: !11336)
!11378 = !DILocation(line: 753, column: 13, scope: !11336)
!11379 = !DILocation(line: 754, column: 9, scope: !11380)
!11380 = distinct !DILexicalBlock(scope: !11336, file: !8944, line: 754, column: 7)
!11381 = !DILocation(line: 754, column: 15, scope: !11380)
!11382 = !DILocation(line: 755, column: 7, scope: !11380)
!11383 = !DILocation(line: 755, column: 10, scope: !11380)
!11384 = !DILocation(line: 755, column: 15, scope: !11380)
!11385 = !DILocation(line: 756, column: 7, scope: !11380)
!11386 = !DILocation(line: 756, column: 23, scope: !11380)
!11387 = !DILocation(line: 756, column: 10, scope: !11380)
!11388 = !DILocation(line: 756, column: 29, scope: !11380)
!11389 = !DILocation(line: 754, column: 7, scope: !11336)
!11390 = !DILocation(line: 757, column: 17, scope: !11380)
!11391 = !DILocation(line: 757, column: 22, scope: !11380)
!11392 = !DILocation(line: 757, column: 28, scope: !11380)
!11393 = !DILocation(line: 757, column: 5, scope: !11380)
!11394 = !DILocation(line: 757, column: 10, scope: !11380)
!11395 = !DILocation(line: 757, column: 15, scope: !11380)
!11396 = !DILocation(line: 758, column: 3, scope: !11336)
!11397 = !DILocation(line: 758, column: 8, scope: !11336)
!11398 = !DILocation(line: 758, column: 13, scope: !11336)
!11399 = !DILocation(line: 760, column: 3, scope: !11336)
!11400 = !DILocation(line: 760, column: 8, scope: !11336)
!11401 = !DILocation(line: 760, column: 14, scope: !11336)
!11402 = !DILocation(line: 761, column: 3, scope: !11336)
!11403 = !DILocation(line: 761, column: 8, scope: !11336)
!11404 = !DILocation(line: 761, column: 16, scope: !11336)
!11405 = !DILocation(line: 762, column: 3, scope: !11336)
!11406 = !DILocation(line: 762, column: 8, scope: !11336)
!11407 = !DILocation(line: 762, column: 17, scope: !11336)
!11408 = !DILocation(line: 763, column: 1, scope: !11336)
!11409 = distinct !DISubprogram(name: "gimple_def_ops", scope: !6, file: !6, line: 1292, type: !11410, scopeLine: 1293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!11410 = !DISubroutineType(types: !11411)
!11411 = !{!1122, !3517}
!11412 = !DILocalVariable(name: "g", arg: 1, scope: !11409, file: !6, line: 1292, type: !3517)
!11413 = !DILocation(line: 1292, column: 30, scope: !11409)
!11414 = !DILocation(line: 1294, column: 24, scope: !11415)
!11415 = distinct !DILexicalBlock(scope: !11409, file: !6, line: 1294, column: 7)
!11416 = !DILocation(line: 1294, column: 8, scope: !11415)
!11417 = !DILocation(line: 1294, column: 7, scope: !11409)
!11418 = !DILocation(line: 1295, column: 5, scope: !11415)
!11419 = !DILocation(line: 1296, column: 10, scope: !11409)
!11420 = !DILocation(line: 1296, column: 13, scope: !11409)
!11421 = !DILocation(line: 1296, column: 19, scope: !11409)
!11422 = !DILocation(line: 1296, column: 26, scope: !11409)
!11423 = !DILocation(line: 1296, column: 3, scope: !11409)
!11424 = !DILocation(line: 1297, column: 1, scope: !11409)
!11425 = distinct !DISubprogram(name: "gimple_use_ops", scope: !6, file: !6, line: 1313, type: !11426, scopeLine: 1314, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!11426 = !DISubroutineType(types: !11427)
!11427 = !{!1129, !3517}
!11428 = !DILocalVariable(name: "g", arg: 1, scope: !11425, file: !6, line: 1313, type: !3517)
!11429 = !DILocation(line: 1313, column: 30, scope: !11425)
!11430 = !DILocation(line: 1315, column: 24, scope: !11431)
!11431 = distinct !DILexicalBlock(scope: !11425, file: !6, line: 1315, column: 7)
!11432 = !DILocation(line: 1315, column: 8, scope: !11431)
!11433 = !DILocation(line: 1315, column: 7, scope: !11425)
!11434 = !DILocation(line: 1316, column: 5, scope: !11431)
!11435 = !DILocation(line: 1317, column: 10, scope: !11425)
!11436 = !DILocation(line: 1317, column: 13, scope: !11425)
!11437 = !DILocation(line: 1317, column: 19, scope: !11425)
!11438 = !DILocation(line: 1317, column: 26, scope: !11425)
!11439 = !DILocation(line: 1317, column: 3, scope: !11425)
!11440 = !DILocation(line: 1318, column: 1, scope: !11425)
!11441 = distinct !DISubprogram(name: "get_def_from_ptr", scope: !8944, file: !8944, line: 434, type: !11442, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!11442 = !DISubroutineType(types: !11443)
!11443 = !{!666, !11444}
!11444 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_operand_p", file: !537, line: 27, baseType: !1127)
!11445 = !DILocalVariable(name: "def", arg: 1, scope: !11441, file: !8944, line: 434, type: !11444)
!11446 = !DILocation(line: 434, column: 33, scope: !11441)
!11447 = !DILocation(line: 436, column: 11, scope: !11441)
!11448 = !DILocation(line: 436, column: 10, scope: !11441)
!11449 = !DILocation(line: 436, column: 3, scope: !11441)
!11450 = distinct !DISubprogram(name: "gimple_phi_arg", scope: !6, file: !6, line: 3100, type: !11451, scopeLine: 3101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1885)
!11451 = !DISubroutineType(types: !11452)
!11452 = !{!11453, !594, !7}
!11453 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1679, size: 64)
!11454 = !DILocalVariable(name: "gs", arg: 1, scope: !11450, file: !6, line: 3100, type: !594)
!11455 = !DILocation(line: 3100, column: 24, scope: !11450)
!11456 = !DILocalVariable(name: "index", arg: 2, scope: !11450, file: !6, line: 3100, type: !7)
!11457 = !DILocation(line: 3100, column: 37, scope: !11450)
!11458 = !DILocation(line: 3103, column: 3, scope: !11450)
!11459 = !DILocation(line: 3104, column: 12, scope: !11450)
!11460 = !DILocation(line: 3104, column: 16, scope: !11450)
!11461 = !DILocation(line: 3104, column: 27, scope: !11450)
!11462 = !DILocation(line: 3104, column: 32, scope: !11450)
!11463 = !DILocation(line: 3104, column: 3, scope: !11450)
