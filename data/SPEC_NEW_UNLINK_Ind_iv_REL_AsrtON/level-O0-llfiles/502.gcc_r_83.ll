; ModuleID = 'gimplify.c'
source_filename = "gimplify.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.gimplify_ctx = type { %struct.gimplify_ctx*, %struct.VEC_gimple_heap*, %union.tree_node*, %struct.gimple_seq_d*, %union.tree_node*, %union.tree_node*, %struct.VEC_tree_heap*, %struct.htab*, i32, i8, i8, i8 }
%struct.VEC_gimple_heap = type { %struct.VEC_gimple_base }
%struct.VEC_gimple_base = type { i32, i32, [1 x %union.gimple_statement_d*] }
%union.gimple_statement_d = type { %struct.gimple_statement_phi }
%struct.gimple_statement_phi = type { %struct.gimple_statement_base, i32, i32, %union.tree_node*, [1 x %struct.phi_arg_d] }
%struct.gimple_statement_base = type { i32, i32, i32, i32, %struct.basic_block_def*, %union.tree_node* }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type opaque
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.phi_arg_d = type { %struct.ssa_use_operand_d, %union.tree_node*, i32 }
%struct.ssa_use_operand_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %union.anon, %union.tree_node** }
%union.anon = type { %union.gimple_statement_d* }
%struct.gimple_seq_d = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_d* }
%struct.gimple_seq_node_d = type { %union.gimple_statement_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d* }
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type { %struct.unnamed_section }
%struct.unnamed_section = type { %struct.section_common, void (i8*)*, i8*, %union.section* }
%struct.section_common = type { i32 }
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type { %struct.eh_region_d*, %struct.VEC_eh_region_gc*, %struct.VEC_eh_landing_pad_gc*, %struct.htab*, %struct.VEC_tree_gc*, %union.eh_status_u }
%struct.eh_region_d = type { %struct.eh_region_d*, %struct.eh_region_d*, %struct.eh_region_d*, i32, i32, %union.eh_region_u, %struct.eh_landing_pad_d*, %struct.rtx_def*, %struct.rtx_def*, i8 }
%union.eh_region_u = type { %struct.eh_region_u_allowed }
%struct.eh_region_u_allowed = type { %union.tree_node*, %union.tree_node*, i32 }
%struct.eh_landing_pad_d = type { %struct.eh_landing_pad_d*, %struct.eh_region_d*, %union.tree_node*, %struct.rtx_def*, i32 }
%struct.VEC_eh_region_gc = type { %struct.VEC_eh_region_base }
%struct.VEC_eh_region_base = type { i32, i32, [1 x %struct.eh_region_d*] }
%struct.VEC_eh_landing_pad_gc = type { %struct.VEC_eh_landing_pad_base }
%struct.VEC_eh_landing_pad_base = type { i32, i32, [1 x %struct.eh_landing_pad_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%union.eh_status_u = type { %struct.VEC_tree_gc* }
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_df = type { %struct.htab*, %struct.VEC_gimple_gc*, %struct.VEC_tree_gc*, %union.tree_node*, %struct.pt_solution, %struct.pt_solution, %struct.pointer_map_t*, %union.tree_node*, %struct.htab*, %struct.bitmap_head_def*, i8, %struct.ssa_operands }
%struct.VEC_gimple_gc = type { %struct.VEC_gimple_base }
%struct.pt_solution = type { i8, %struct.bitmap_head_def* }
%struct.pointer_map_t = type opaque
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.ssa_operands = type { %struct.ssa_operand_memory_d*, i32, i32, i8, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.ssa_operand_memory_d = type { %struct.ssa_operand_memory_d*, [1 x i8] }
%struct.def_optype_d = type { %struct.def_optype_d*, %union.tree_node** }
%struct.use_optype_d = type { %struct.use_optype_d*, %struct.ssa_use_operand_d }
%struct.loops = type opaque
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.VEC_tree_heap = type { %struct.VEC_tree_base }
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct.gimplify_omp_ctx = type { %struct.gimplify_omp_ctx*, %struct.splay_tree_s*, %struct.pointer_set_t*, i32, i32, i32 }
%struct.splay_tree_s = type { %struct.splay_tree_node_s*, i32 (i64, i64)*, void (i64)*, void (i64)*, i8* (i32, i8*)*, void (i8*, i8*)*, i8* }
%struct.splay_tree_node_s = type { i64, i64, %struct.splay_tree_node_s*, %struct.splay_tree_node_s* }
%struct.pointer_set_t = type opaque
%struct.lang_hooks = type { i8*, i64, void (%union.tree_node*)*, i64 (i32)*, i32 (i32, i8**)*, void (%struct.diagnostic_context*)*, i32 (i64, i8*, i32)*, i8 (i8*, i64)*, i8 (i8**)*, i8 ()*, void ()*, void (i32)*, i8 (%union.tree_node*)*, i32 (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void ()*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, i8* (%union.tree_node*, i32)*, i8* (%union.tree_node*, i32)*, i32 (%union.tree_node*, %union.tree_node*)*, void (%struct.diagnostic_context*, i8*, %struct.diagnostic_info*)*, i64 (i64)*, %struct.attribute_spec*, %struct.attribute_spec*, %struct.attribute_spec*, %struct.lang_hooks_for_tree_inlining, %struct.lang_hooks_for_callgraph, %struct.lang_hooks_for_tree_dump, %struct.lang_hooks_for_decls, %struct.lang_hooks_for_types, %struct.lang_hooks_for_lto, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i8 (%union.tree_node*)*, i32 (%union.tree_node**, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void ()*, %union.tree_node* (%union.tree_node*, i8*, i8*)*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, i8 }
%struct.diagnostic_context = type { %struct.pretty_print_info*, [12 x i32], i8, i8, [870 x i32], i8, i8, void (%struct.diagnostic_context*, %struct.diagnostic_info*)*, void (%struct.diagnostic_context*, %struct.diagnostic_info*)*, void (i8*, [1 x %struct.__va_list_tag]*)*, %union.tree_node*, %struct.line_map*, i32, i8 }
%struct.pretty_print_info = type { %struct.output_buffer*, i8*, i32, i32, i32, %struct.pp_wrapping_mode_t, i8 (%struct.pretty_print_info*, %struct.text_info*, i8*, i32, i8, i8, i8)*, i8, i8, i8 }
%struct.output_buffer = type { %struct.obstack, %struct.obstack, %struct.obstack*, %struct.chunk_info*, %struct._IO_FILE*, i32, [128 x i8] }
%struct.chunk_info = type { %struct.chunk_info*, [60 x i8*] }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.pp_wrapping_mode_t = type { i32, i32 }
%struct.text_info = type { i8*, [1 x %struct.__va_list_tag]*, i32, i32*, %union.tree_node** }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.diagnostic_info = type { %struct.text_info, i32, i32, %union.tree_node*, i32, i32 }
%struct.line_map = type { i8*, i32, i32, i32, i8, i8, i8 }
%struct.attribute_spec = type { i8*, i32, i32, i8, i8, i8, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* }
%struct.lang_hooks_for_tree_inlining = type { i8 (%union.tree_node*, %union.tree_node*)* }
%struct.lang_hooks_for_callgraph = type { %union.tree_node* (%union.tree_node**, i32*)* }
%struct.lang_hooks_for_tree_dump = type { i8 (i8*, %union.tree_node*)*, i32 (%union.tree_node*)* }
%struct.lang_hooks_for_decls = type { i32 ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* ()*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i8 (%union.tree_node*)*, void ()*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i32 (%union.tree_node*)*, i8 (%union.tree_node*, i8)*, i8 (%union.tree_node*, i8)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)* }
%struct.lang_hooks_for_types = type { %union.tree_node* (i32)*, i32 (%union.tree_node*)*, %union.tree_node* (i32, i32)*, %union.tree_node* (i32, i32)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, i8*)*, void (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%struct.gimplify_omp_ctx*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %struct.array_descr_info*)*, void (%union.tree_node*, %union.tree_node**, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i8 }
%struct.array_descr_info = type opaque
%struct.lang_hooks_for_lto = type { void (i8*)*, void (i8*, i64, i8*)*, void ()* }
%struct.ggc_root_tab = type { i8*, i64, i64, void (i8*)*, void (i8*)* }
%struct.processor_costs = type { i32, i32, i32, i32, [5 x i32], i32, [5 x i32], i32, i32, i32, i32, i32, [3 x i32], [3 x i32], i32, [3 x i32], [3 x i32], i32, [2 x i32], [2 x i32], i32, [3 x i32], [3 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [2 x %struct.stringop_algs], [2 x %struct.stringop_algs], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.stringop_algs = type { i32, [4 x %struct.stringop_strategy] }
%struct.stringop_strategy = type { i32, i32 }
%struct.tree_exp = type { %struct.tree_common, i32, %union.tree_node*, [1 x %union.tree_node*] }
%struct.tree_block = type { %struct.tree_common, i32, i32, %union.tree_node*, %struct.VEC_tree_gc*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_stmt_iterator = type { %struct.tree_statement_list_node*, %union.tree_node* }
%struct.tree_statement_list_node = type { %struct.tree_statement_list_node*, %struct.tree_statement_list_node*, %union.tree_node* }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_type_symtab, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_type* }
%union.tree_type_symtab = type { i8* }
%struct.lang_type = type opaque
%struct.gimple_statement_bind = type { %struct.gimple_statement_base, %union.tree_node*, %union.tree_node*, %struct.gimple_seq_d* }
%struct.gimple_stmt_iterator = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_d*, %struct.basic_block_def* }
%struct.tree_statement_list = type { %struct.tree_common, %struct.tree_statement_list_node*, %struct.tree_statement_list_node* }
%struct.tree_int_cst = type { %struct.tree_common, %struct.double_int }
%struct.double_int = type { i64, i64 }
%struct.constructor_elt_d = type { %union.tree_node*, %union.tree_node* }
%struct.tree_constructor = type { %struct.tree_common, %struct.VEC_constructor_elt_gc* }
%struct.VEC_constructor_elt_gc = type { %struct.VEC_constructor_elt_base }
%struct.VEC_constructor_elt_base = type { i32, i32, [1 x %struct.constructor_elt_d] }
%struct.tree_identifier = type { %struct.tree_common, %struct.ht_identifier }
%struct.ht_identifier = type { i8*, i32, i32 }
%struct.tree_list = type { %struct.tree_common, %union.tree_node*, %union.tree_node* }
%struct.tree_string = type { %struct.tree_common, i32, [1 x i8] }
%struct.tree_vec = type { %struct.tree_common, i32, [1 x %union.tree_node*] }
%struct.tree_omp_clause = type { %struct.tree_common, i32, i32, %union.omp_clause_subcode, %struct.gimple_seq_d*, %struct.gimple_seq_d*, [1 x %union.tree_node*] }
%union.omp_clause_subcode = type { i32 }
%struct.tree_field_decl = type { %struct.tree_decl_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.cgraph_node = type { %union.tree_node*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.htab*, i8*, %struct.VEC_ipa_opt_pass_heap*, %struct.cgraph_local_info, %struct.cgraph_global_info, %struct.cgraph_rtl_info, %struct.cgraph_clone_info, %struct.cgraph_thunk_info, i64, i32, i32, i32, i16 }
%struct.cgraph_edge = type { i64, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_edge*, %union.gimple_statement_d*, i8*, i32, i32, i32, i32, i16, i8 }
%struct.VEC_ipa_opt_pass_heap = type { %struct.VEC_ipa_opt_pass_base }
%struct.VEC_ipa_opt_pass_base = type { i32, i32, [1 x %struct.ipa_opt_pass_d*] }
%struct.ipa_opt_pass_d = type { %struct.opt_pass, void ()*, void (%struct.cgraph_node_set_def*)*, void ()*, void (%struct.cgraph_node*)*, void (%struct.cgraph_node*, %union.gimple_statement_d**)*, i32, i32 (%struct.cgraph_node*)*, void (%struct.varpool_node*)* }
%struct.opt_pass = type { i32, i8*, i8 ()*, i32 ()*, %struct.opt_pass*, %struct.opt_pass*, i32, i32, i32, i32, i32, i32, i32 }
%struct.cgraph_node_set_def = type { %struct.htab*, %struct.VEC_cgraph_node_ptr_gc*, i8* }
%struct.VEC_cgraph_node_ptr_gc = type { %struct.VEC_cgraph_node_ptr_base }
%struct.VEC_cgraph_node_ptr_base = type { i32, i32, [1 x %struct.cgraph_node*] }
%struct.varpool_node = type { %union.tree_node*, %struct.varpool_node*, %struct.varpool_node*, %struct.varpool_node*, i32, i8 }
%struct.cgraph_local_info = type { %struct.lto_file_decl_data*, %struct.inline_summary, i8 }
%struct.lto_file_decl_data = type opaque
%struct.inline_summary = type { i64, i32, i32, i32, i32 }
%struct.cgraph_global_info = type { i64, i64, %struct.cgraph_node*, i32, i32, i32, i8 }
%struct.cgraph_rtl_info = type { i32 }
%struct.cgraph_clone_info = type { %struct.VEC_ipa_replace_map_p_gc*, %struct.bitmap_head_def*, %struct.bitmap_head_def* }
%struct.VEC_ipa_replace_map_p_gc = type { %struct.VEC_ipa_replace_map_p_base }
%struct.VEC_ipa_replace_map_p_base = type { i32, i32, [1 x %struct.ipa_replace_map*] }
%struct.ipa_replace_map = type { %union.tree_node*, %union.tree_node*, i8, i8 }
%struct.cgraph_thunk_info = type { i64, i64, %union.tree_node*, i8, i8, i8 }
%struct.tree_ssa_name = type { %struct.tree_common, %union.tree_node*, %union.gimple_statement_d*, i32, %struct.ptr_info_def*, %struct.ssa_use_operand_d }
%struct.ptr_info_def = type { %struct.pt_solution }
%struct.gimple_statement_omp_atomic_load = type { %struct.gimple_statement_base, %union.tree_node*, %union.tree_node* }
%struct.gimple_statement_asm = type { %struct.gimple_statement_with_memory_ops_base, i8*, i8, i8, i8, i8, [1 x %union.tree_node*] }
%struct.gimple_statement_with_memory_ops_base = type { %struct.gimple_statement_with_ops_base, %union.tree_node*, %union.tree_node* }
%struct.gimple_statement_with_ops_base = type { %struct.gimple_statement_base, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.gimple_temp_hash_elt = type { %union.tree_node*, %union.tree_node* }
%struct.gimplify_init_ctor_preeval_data = type { %union.tree_node*, i32 }
%struct.gimple_statement_wce = type { %struct.gimple_statement_base, %struct.gimple_seq_d* }
%struct.gimple_statement_omp_for = type { %struct.gimple_statement_omp, %union.tree_node*, i64, %struct.gimple_omp_for_iter*, %struct.gimple_seq_d* }
%struct.gimple_statement_omp = type { %struct.gimple_statement_base, %struct.gimple_seq_d* }
%struct.gimple_omp_for_iter = type { i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }

@gimplify_ctxp = internal global %struct.gimplify_ctx* null, align 8, !dbg !0
@.str = private unnamed_addr constant [11 x i8] c"gimplify.c\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@libiberty_optr = external dso_local global i8*, align 8
@libiberty_len = external dso_local global i64, align 8
@libiberty_nptr = external dso_local global i8*, align 8
@.str.2 = private unnamed_addr constant [2 x i8] c"T\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"%s.%lu\00", align 1
@tmp_var_id_num = internal global i32 0, align 4, !dbg !3216
@input_location = external dso_local global i32, align 4
@current_function_decl = external dso_local global %union.tree_node*, align 8
@gimplify_omp_ctxp = internal global %struct.gimplify_omp_ctx* null, align 8, !dbg !3214
@cfun = external dso_local global %struct.function*, align 8
@global_trees = external dso_local global [131 x %union.tree_node*], align 16
@.str.4 = private unnamed_addr constant [7 x i8] c"retval\00", align 1
@tree_code_type = external dso_local constant [0 x i32], align 4
@lang_hooks = external dso_local global %struct.lang_hooks, align 8
@.str.5 = private unnamed_addr constant [4 x i8] c"vol\00", align 1
@timevar_enable = external dso_local global i8, align 1
@nonlocal_vlas = internal global %struct.pointer_set_t* null, align 8, !dbg !3218
@flag_instrument_function_entry_exit = external dso_local global i32, align 4
@implicit_built_in_decls = external dso_local global [721 x %union.tree_node*], align 16
@gt_ggc_r_gt_gimplify_h = dso_local constant [1 x %struct.ggc_root_tab] zeroinitializer, align 16, !dbg !3197
@gt_pch_rs_gt_gimplify_h = dso_local constant [2 x %struct.ggc_root_tab] [%struct.ggc_root_tab { i8* bitcast (i32* @tmp_var_id_num to i8*), i64 1, i64 4, void (i8*)* null, void (i8*)* null }, %struct.ggc_root_tab zeroinitializer], align 16, !dbg !3211
@optimize = external dso_local global i32, align 4
@sizetype_tab = external dso_local global [4 x %union.tree_node*], align 16
@.str.6 = private unnamed_addr constant [6 x i8] c"iftmp\00", align 1
@tree_code_length = external dso_local constant [0 x i8], align 1
@.str.7 = private unnamed_addr constant [43 x i8] c"too few arguments to function %<va_start%>\00", align 1
@.str.8 = private unnamed_addr constant [44 x i8] c"using result of function returning %<void%>\00", align 1
@flag_merge_constants = external dso_local global i32, align 4
@.str.9 = private unnamed_addr constant [2 x i8] c"C\00", align 1
@ix86_cost = external dso_local global %struct.processor_costs*, align 8
@flag_stack_check = external dso_local global i32, align 4
@built_in_decls = external dso_local global [721 x %union.tree_node*], align 16
@.str.10 = private unnamed_addr constant [12 x i8] c"saved_stack\00", align 1
@.str.11 = private unnamed_addr constant [32 x i8] c"invalid lvalue in asm output %d\00", align 1
@.str.12 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.13 = private unnamed_addr constant [33 x i8] c"impossible constraint in %<asm%>\00", align 1
@.str.14 = private unnamed_addr constant [40 x i8] c"non-memory input %d must stay in memory\00", align 1
@.str.15 = private unnamed_addr constant [44 x i8] c"memory input %d is not directly addressable\00", align 1
@.str.16 = private unnamed_addr constant [11 x i8] c"./gimple.h\00", align 1
@global_dc = external dso_local global %struct.diagnostic_context*, align 8
@.str.17 = private unnamed_addr constant [8 x i8] c"cleanup\00", align 1
@.str.18 = private unnamed_addr constant [40 x i8] c"%qE not specified in enclosing parallel\00", align 1
@.str.19 = private unnamed_addr constant [19 x i8] c"enclosing parallel\00", align 1
@.str.20 = private unnamed_addr constant [13 x i8] c"firstprivate\00", align 1
@.str.21 = private unnamed_addr constant [12 x i8] c"lastprivate\00", align 1
@.str.22 = private unnamed_addr constant [10 x i8] c"reduction\00", align 1
@.str.23 = private unnamed_addr constant [44 x i8] c"%s variable %qE is private in outer context\00", align 1
@.str.24 = private unnamed_addr constant [41 x i8] c"iteration variable %qE should be private\00", align 1
@.str.25 = private unnamed_addr constant [50 x i8] c"iteration variable %qE should not be firstprivate\00", align 1
@.str.26 = private unnamed_addr constant [47 x i8] c"iteration variable %qE should not be reduction\00", align 1
@gimple_ops_offset_ = external dso_local constant [0 x i64], align 8
@gss_for_code_ = external dso_local constant [0 x i32], align 4
@gimple_rhs_class_table = external dso_local constant [0 x i8], align 1

; Function Attrs: noinline nounwind uwtable
define dso_local void @mark_addressable(%union.tree_node* %x) #0 !dbg !3239 {
entry:
  %x.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %x, %union.tree_node** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %x.addr, metadata !3243, metadata !DIExpression()), !dbg !3244
  br label %while.cond, !dbg !3245

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !3246
  %call = call zeroext i8 @handled_component_p(%union.tree_node* %0), !dbg !3247
  %tobool = icmp ne i8 %call, 0, !dbg !3245
  br i1 %tobool, label %while.body, label %while.end, !dbg !3245

while.body:                                       ; preds = %while.cond
  %1 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !3248
  %exp = bitcast %union.tree_node* %1 to %struct.tree_exp*, !dbg !3248
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !3248
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !3248
  %2 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !3248
  store %union.tree_node* %2, %union.tree_node** %x.addr, align 8, !dbg !3249
  br label %while.cond, !dbg !3245, !llvm.loop !3250

while.end:                                        ; preds = %while.cond
  %3 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !3251
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !3251
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !3251
  %bf.load = load i64, i64* %4, align 8, !dbg !3251
  %bf.clear = and i64 %bf.load, 65535, !dbg !3251
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3251
  %cmp = icmp ne i32 %bf.cast, 32, !dbg !3253
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !3254

land.lhs.true:                                    ; preds = %while.end
  %5 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !3255
  %base1 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !3255
  %6 = bitcast %struct.tree_base* %base1 to i64*, !dbg !3255
  %bf.load2 = load i64, i64* %6, align 8, !dbg !3255
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !3255
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !3255
  %cmp5 = icmp ne i32 %bf.cast4, 34, !dbg !3256
  br i1 %cmp5, label %land.lhs.true6, label %if.end, !dbg !3257

land.lhs.true6:                                   ; preds = %land.lhs.true
  %7 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !3258
  %base7 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !3258
  %8 = bitcast %struct.tree_base* %base7 to i64*, !dbg !3258
  %bf.load8 = load i64, i64* %8, align 8, !dbg !3258
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !3258
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !3258
  %cmp11 = icmp ne i32 %bf.cast10, 36, !dbg !3259
  br i1 %cmp11, label %if.then, label %if.end, !dbg !3260

if.then:                                          ; preds = %land.lhs.true6
  br label %return, !dbg !3261

if.end:                                           ; preds = %land.lhs.true6, %land.lhs.true, %while.end
  %9 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !3262
  %base12 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !3262
  %10 = bitcast %struct.tree_base* %base12 to i64*, !dbg !3262
  %bf.load13 = load i64, i64* %10, align 8, !dbg !3263
  %bf.clear14 = and i64 %bf.load13, -262145, !dbg !3263
  %bf.set = or i64 %bf.clear14, 262144, !dbg !3263
  store i64 %bf.set, i64* %10, align 8, !dbg !3263
  br label %return, !dbg !3264

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !3264
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @handled_component_p(%union.tree_node* %t) #0 !dbg !3265 {
entry:
  %retval = alloca i8, align 1
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !3268, metadata !DIExpression()), !dbg !3269
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3270
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !3270
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !3270
  %bf.load = load i64, i64* %1, align 8, !dbg !3270
  %bf.clear = and i64 %bf.load, 65535, !dbg !3270
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3270
  switch i32 %bf.cast, label %sw.default [
    i32 42, label %sw.bb
    i32 41, label %sw.bb
    i32 45, label %sw.bb
    i32 46, label %sw.bb
    i32 118, label %sw.bb
    i32 43, label %sw.bb
    i32 44, label %sw.bb
  ], !dbg !3271

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i8 1, i8* %retval, align 1, !dbg !3272
  br label %return, !dbg !3272

sw.default:                                       ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !3274
  br label %return, !dbg !3274

return:                                           ; preds = %sw.default, %sw.bb
  %2 = load i8, i8* %retval, align 1, !dbg !3275
  ret i8 %2, !dbg !3275
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @push_gimplify_context(%struct.gimplify_ctx* %c) #0 !dbg !3276 {
entry:
  %c.addr = alloca %struct.gimplify_ctx*, align 8
  store %struct.gimplify_ctx* %c, %struct.gimplify_ctx** %c.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimplify_ctx** %c.addr, metadata !3279, metadata !DIExpression()), !dbg !3280
  %0 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** %c.addr, align 8, !dbg !3281
  %1 = bitcast %struct.gimplify_ctx* %0 to i8*, !dbg !3282
  call void @llvm.memset.p0i8.i64(i8* align 8 %1, i8 0, i64 72, i1 false), !dbg !3282
  %2 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !3283
  %3 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** %c.addr, align 8, !dbg !3284
  %prev_context = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %3, i32 0, i32 0, !dbg !3285
  store %struct.gimplify_ctx* %2, %struct.gimplify_ctx** %prev_context, align 8, !dbg !3286
  %4 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** %c.addr, align 8, !dbg !3287
  store %struct.gimplify_ctx* %4, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !3288
  ret void, !dbg !3289
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @pop_gimplify_context(%union.gimple_statement_d* %body) #0 !dbg !3290 {
entry:
  %body.addr = alloca %union.gimple_statement_d*, align 8
  %c = alloca %struct.gimplify_ctx*, align 8
  store %union.gimple_statement_d* %body, %union.gimple_statement_d** %body.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %body.addr, metadata !3293, metadata !DIExpression()), !dbg !3294
  call void @llvm.dbg.declare(metadata %struct.gimplify_ctx** %c, metadata !3295, metadata !DIExpression()), !dbg !3296
  %0 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !3297
  store %struct.gimplify_ctx* %0, %struct.gimplify_ctx** %c, align 8, !dbg !3296
  %1 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** %c, align 8, !dbg !3298
  %tobool = icmp ne %struct.gimplify_ctx* %1, null, !dbg !3298
  br i1 %tobool, label %land.lhs.true, label %cond.true5, !dbg !3298

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** %c, align 8, !dbg !3298
  %bind_expr_stack = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %2, i32 0, i32 1, !dbg !3298
  %3 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %bind_expr_stack, align 8, !dbg !3298
  %cmp = icmp eq %struct.VEC_gimple_heap* %3, null, !dbg !3298
  br i1 %cmp, label %cond.false6, label %lor.lhs.false, !dbg !3298

lor.lhs.false:                                    ; preds = %land.lhs.true
  %4 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** %c, align 8, !dbg !3298
  %bind_expr_stack1 = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %4, i32 0, i32 1, !dbg !3298
  %5 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %bind_expr_stack1, align 8, !dbg !3298
  %tobool2 = icmp ne %struct.VEC_gimple_heap* %5, null, !dbg !3298
  br i1 %tobool2, label %cond.true, label %cond.false, !dbg !3298

cond.true:                                        ; preds = %lor.lhs.false
  %6 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** %c, align 8, !dbg !3298
  %bind_expr_stack3 = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %6, i32 0, i32 1, !dbg !3298
  %7 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %bind_expr_stack3, align 8, !dbg !3298
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %7, i32 0, i32 0, !dbg !3298
  br label %cond.end, !dbg !3298

cond.false:                                       ; preds = %lor.lhs.false
  br label %cond.end, !dbg !3298

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3298
  %call = call i32 @VEC_gimple_base_length(%struct.VEC_gimple_base* %cond), !dbg !3298
  %cmp4 = icmp eq i32 %call, 0, !dbg !3298
  br i1 %cmp4, label %cond.false6, label %cond.true5, !dbg !3298

cond.true5:                                       ; preds = %cond.end, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 220, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3298
  br label %cond.end7, !dbg !3298

cond.false6:                                      ; preds = %cond.end, %land.lhs.true
  br label %cond.end7, !dbg !3298

cond.end7:                                        ; preds = %cond.false6, %cond.true5
  %cond8 = phi i32 [ 0, %cond.true5 ], [ 0, %cond.false6 ], !dbg !3298
  %8 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** %c, align 8, !dbg !3299
  %bind_expr_stack9 = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %8, i32 0, i32 1, !dbg !3299
  call void @VEC_gimple_heap_free(%struct.VEC_gimple_heap** %bind_expr_stack9), !dbg !3299
  %9 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** %c, align 8, !dbg !3300
  %prev_context = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %9, i32 0, i32 0, !dbg !3301
  %10 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** %prev_context, align 8, !dbg !3301
  store %struct.gimplify_ctx* %10, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !3302
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %body.addr, align 8, !dbg !3303
  %tobool10 = icmp ne %union.gimple_statement_d* %11, null, !dbg !3303
  br i1 %tobool10, label %if.then, label %if.else, !dbg !3305

if.then:                                          ; preds = %cond.end7
  %12 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** %c, align 8, !dbg !3306
  %temps = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %12, i32 0, i32 2, !dbg !3307
  %13 = load %union.tree_node*, %union.tree_node** %temps, align 8, !dbg !3307
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %body.addr, align 8, !dbg !3308
  call void @declare_vars(%union.tree_node* %13, %union.gimple_statement_d* %14, i8 zeroext 0), !dbg !3309
  br label %if.end, !dbg !3309

if.else:                                          ; preds = %cond.end7
  %15 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** %c, align 8, !dbg !3310
  %temps11 = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %15, i32 0, i32 2, !dbg !3311
  %16 = load %union.tree_node*, %union.tree_node** %temps11, align 8, !dbg !3311
  call void @record_vars(%union.tree_node* %16), !dbg !3312
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %17 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** %c, align 8, !dbg !3313
  %temp_htab = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %17, i32 0, i32 7, !dbg !3315
  %18 = load %struct.htab*, %struct.htab** %temp_htab, align 8, !dbg !3315
  %tobool12 = icmp ne %struct.htab* %18, null, !dbg !3313
  br i1 %tobool12, label %if.then13, label %if.end15, !dbg !3316

if.then13:                                        ; preds = %if.end
  %19 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** %c, align 8, !dbg !3317
  %temp_htab14 = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %19, i32 0, i32 7, !dbg !3318
  %20 = load %struct.htab*, %struct.htab** %temp_htab14, align 8, !dbg !3318
  call void @htab_delete(%struct.htab* %20), !dbg !3319
  br label %if.end15, !dbg !3319

if.end15:                                         ; preds = %if.then13, %if.end
  ret void, !dbg !3320
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_gimple_base_length(%struct.VEC_gimple_base* %vec_) #0 !dbg !3321 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_base*, align 8
  store %struct.VEC_gimple_base* %vec_, %struct.VEC_gimple_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_base** %vec_.addr, metadata !3326, metadata !DIExpression()), !dbg !3327
  %0 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !3327
  %tobool = icmp ne %struct.VEC_gimple_base* %0, null, !dbg !3327
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3327

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !3327
  %num = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %1, i32 0, i32 0, !dbg !3327
  %2 = load i32, i32* %num, align 8, !dbg !3327
  br label %cond.end, !dbg !3327

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3327

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !3327
  ret i32 %cond, !dbg !3327
}

declare dso_local void @fancy_abort(i8*, i32, i8*) #3

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_gimple_heap_free(%struct.VEC_gimple_heap** %vec_) #0 !dbg !3328 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_heap**, align 8
  store %struct.VEC_gimple_heap** %vec_, %struct.VEC_gimple_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap*** %vec_.addr, metadata !3332, metadata !DIExpression()), !dbg !3333
  %0 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !3334
  %1 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %0, align 8, !dbg !3334
  %tobool = icmp ne %struct.VEC_gimple_heap* %1, null, !dbg !3334
  br i1 %tobool, label %if.then, label %if.end, !dbg !3333

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !3334
  %3 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %2, align 8, !dbg !3334
  %4 = bitcast %struct.VEC_gimple_heap* %3 to i8*, !dbg !3334
  call void @free(i8* %4), !dbg !3334
  br label %if.end, !dbg !3334

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !3333
  store %struct.VEC_gimple_heap* null, %struct.VEC_gimple_heap** %5, align 8, !dbg !3333
  ret void, !dbg !3333
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @declare_vars(%union.tree_node* %vars, %union.gimple_statement_d* %scope, i8 zeroext %debug_info) #0 !dbg !3336 {
entry:
  %vars.addr = alloca %union.tree_node*, align 8
  %scope.addr = alloca %union.gimple_statement_d*, align 8
  %debug_info.addr = alloca i8, align 1
  %last = alloca %union.tree_node*, align 8
  %temps = alloca %union.tree_node*, align 8
  %block = alloca %union.tree_node*, align 8
  store %union.tree_node* %vars, %union.tree_node** %vars.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %vars.addr, metadata !3339, metadata !DIExpression()), !dbg !3340
  store %union.gimple_statement_d* %scope, %union.gimple_statement_d** %scope.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %scope.addr, metadata !3341, metadata !DIExpression()), !dbg !3342
  store i8 %debug_info, i8* %debug_info.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %debug_info.addr, metadata !3343, metadata !DIExpression()), !dbg !3344
  call void @llvm.dbg.declare(metadata %union.tree_node** %last, metadata !3345, metadata !DIExpression()), !dbg !3346
  %0 = load %union.tree_node*, %union.tree_node** %vars.addr, align 8, !dbg !3347
  store %union.tree_node* %0, %union.tree_node** %last, align 8, !dbg !3346
  %1 = load %union.tree_node*, %union.tree_node** %last, align 8, !dbg !3348
  %tobool = icmp ne %union.tree_node* %1, null, !dbg !3348
  br i1 %tobool, label %if.then, label %if.end29, !dbg !3350

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %temps, metadata !3351, metadata !DIExpression()), !dbg !3353
  call void @llvm.dbg.declare(metadata %union.tree_node** %block, metadata !3354, metadata !DIExpression()), !dbg !3355
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %scope.addr, align 8, !dbg !3356
  %call = call i32 @gimple_code(%union.gimple_statement_d* %2), !dbg !3356
  %cmp = icmp eq i32 %call, 10, !dbg !3356
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !3356

cond.true:                                        ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 671, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3356
  br label %cond.end, !dbg !3356

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !3356

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3356
  %3 = load %union.tree_node*, %union.tree_node** %last, align 8, !dbg !3357
  %call1 = call %union.tree_node* @nreverse(%union.tree_node* %3), !dbg !3358
  store %union.tree_node* %call1, %union.tree_node** %temps, align 8, !dbg !3359
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %scope.addr, align 8, !dbg !3360
  %call2 = call %union.tree_node* @gimple_bind_block(%union.gimple_statement_d* %4), !dbg !3361
  store %union.tree_node* %call2, %union.tree_node** %block, align 8, !dbg !3362
  %5 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !3363
  %tobool3 = icmp ne %union.tree_node* %5, null, !dbg !3363
  br i1 %tobool3, label %lor.lhs.false, label %cond.false6, !dbg !3363

lor.lhs.false:                                    ; preds = %cond.end
  %6 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !3363
  %base = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !3363
  %7 = bitcast %struct.tree_base* %base to i64*, !dbg !3363
  %bf.load = load i64, i64* %7, align 8, !dbg !3363
  %bf.clear = and i64 %bf.load, 65535, !dbg !3363
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3363
  %cmp4 = icmp eq i32 %bf.cast, 4, !dbg !3363
  br i1 %cmp4, label %cond.false6, label %cond.true5, !dbg !3363

cond.true5:                                       ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 676, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3363
  br label %cond.end7, !dbg !3363

cond.false6:                                      ; preds = %lor.lhs.false, %cond.end
  br label %cond.end7, !dbg !3363

cond.end7:                                        ; preds = %cond.false6, %cond.true5
  %cond8 = phi i32 [ 0, %cond.true5 ], [ 0, %cond.false6 ], !dbg !3363
  %8 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !3364
  %tobool9 = icmp ne %union.tree_node* %8, null, !dbg !3364
  br i1 %tobool9, label %lor.lhs.false10, label %if.then12, !dbg !3366

lor.lhs.false10:                                  ; preds = %cond.end7
  %9 = load i8, i8* %debug_info.addr, align 1, !dbg !3367
  %tobool11 = icmp ne i8 %9, 0, !dbg !3367
  br i1 %tobool11, label %if.else, label %if.then12, !dbg !3368

if.then12:                                        ; preds = %lor.lhs.false10, %cond.end7
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %scope.addr, align 8, !dbg !3369
  %call13 = call %union.tree_node* @gimple_bind_vars(%union.gimple_statement_d* %10), !dbg !3371
  %11 = load %union.tree_node*, %union.tree_node** %last, align 8, !dbg !3372
  %common = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !3372
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !3372
  store %union.tree_node* %call13, %union.tree_node** %chain, align 8, !dbg !3373
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %scope.addr, align 8, !dbg !3374
  %13 = load %union.tree_node*, %union.tree_node** %temps, align 8, !dbg !3375
  call void @gimple_bind_set_vars(%union.gimple_statement_d* %12, %union.tree_node* %13), !dbg !3376
  br label %if.end28, !dbg !3377

if.else:                                          ; preds = %lor.lhs.false10
  %14 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !3378
  %block14 = bitcast %union.tree_node* %14 to %struct.tree_block*, !dbg !3378
  %vars15 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block14, i32 0, i32 3, !dbg !3378
  %15 = load %union.tree_node*, %union.tree_node** %vars15, align 8, !dbg !3378
  %tobool16 = icmp ne %union.tree_node* %15, null, !dbg !3378
  br i1 %tobool16, label %if.then17, label %if.else23, !dbg !3381

if.then17:                                        ; preds = %if.else
  %16 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !3382
  %block18 = bitcast %union.tree_node* %16 to %struct.tree_block*, !dbg !3382
  %vars19 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block18, i32 0, i32 3, !dbg !3382
  %17 = load %union.tree_node*, %union.tree_node** %vars19, align 8, !dbg !3382
  %18 = load %union.tree_node*, %union.tree_node** %temps, align 8, !dbg !3383
  %call20 = call %union.tree_node* @chainon(%union.tree_node* %17, %union.tree_node* %18), !dbg !3384
  %19 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !3385
  %block21 = bitcast %union.tree_node* %19 to %struct.tree_block*, !dbg !3385
  %vars22 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block21, i32 0, i32 3, !dbg !3385
  store %union.tree_node* %call20, %union.tree_node** %vars22, align 8, !dbg !3386
  br label %if.end, !dbg !3385

if.else23:                                        ; preds = %if.else
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %scope.addr, align 8, !dbg !3387
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %scope.addr, align 8, !dbg !3389
  %call24 = call %union.tree_node* @gimple_bind_vars(%union.gimple_statement_d* %21), !dbg !3390
  %22 = load %union.tree_node*, %union.tree_node** %temps, align 8, !dbg !3391
  %call25 = call %union.tree_node* @chainon(%union.tree_node* %call24, %union.tree_node* %22), !dbg !3392
  call void @gimple_bind_set_vars(%union.gimple_statement_d* %20, %union.tree_node* %call25), !dbg !3393
  %23 = load %union.tree_node*, %union.tree_node** %temps, align 8, !dbg !3394
  %24 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !3395
  %block26 = bitcast %union.tree_node* %24 to %struct.tree_block*, !dbg !3395
  %vars27 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block26, i32 0, i32 3, !dbg !3395
  store %union.tree_node* %23, %union.tree_node** %vars27, align 8, !dbg !3396
  br label %if.end

if.end:                                           ; preds = %if.else23, %if.then17
  br label %if.end28

if.end28:                                         ; preds = %if.end, %if.then12
  br label %if.end29, !dbg !3397

if.end29:                                         ; preds = %if.end28, %entry
  ret void, !dbg !3398
}

declare dso_local void @record_vars(%union.tree_node*) #3

declare dso_local void @htab_delete(%struct.htab*) #3

; Function Attrs: noinline nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_current_bind_expr() #0 !dbg !3399 {
entry:
  %0 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !3402
  %bind_expr_stack = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %0, i32 0, i32 1, !dbg !3402
  %1 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %bind_expr_stack, align 8, !dbg !3402
  %tobool = icmp ne %struct.VEC_gimple_heap* %1, null, !dbg !3402
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3402

cond.true:                                        ; preds = %entry
  %2 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !3402
  %bind_expr_stack1 = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %2, i32 0, i32 1, !dbg !3402
  %3 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %bind_expr_stack1, align 8, !dbg !3402
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %3, i32 0, i32 0, !dbg !3402
  br label %cond.end, !dbg !3402

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3402

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3402
  %call = call %union.gimple_statement_d* @VEC_gimple_base_last(%struct.VEC_gimple_base* %cond), !dbg !3402
  ret %union.gimple_statement_d* %call, !dbg !3403
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @VEC_gimple_base_last(%struct.VEC_gimple_base* %vec_) #0 !dbg !3404 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_base*, align 8
  store %struct.VEC_gimple_base* %vec_, %struct.VEC_gimple_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_base** %vec_.addr, metadata !3407, metadata !DIExpression()), !dbg !3408
  %0 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !3408
  %tobool = icmp ne %struct.VEC_gimple_base* %0, null, !dbg !3408
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !3408

land.rhs:                                         ; preds = %entry
  %1 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !3408
  %num = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %1, i32 0, i32 0, !dbg !3408
  %2 = load i32, i32* %num, align 8, !dbg !3408
  %tobool1 = icmp ne i32 %2, 0, !dbg !3408
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %3 = phi i1 [ false, %entry ], [ %tobool1, %land.rhs ], !dbg !3409
  %land.ext = zext i1 %3 to i32, !dbg !3408
  %4 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !3408
  %vec = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %4, i32 0, i32 2, !dbg !3408
  %5 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !3408
  %num2 = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %5, i32 0, i32 0, !dbg !3408
  %6 = load i32, i32* %num2, align 8, !dbg !3408
  %sub = sub i32 %6, 1, !dbg !3408
  %idxprom = zext i32 %sub to i64, !dbg !3408
  %arrayidx = getelementptr inbounds [1 x %union.gimple_statement_d*], [1 x %union.gimple_statement_d*]* %vec, i64 0, i64 %idxprom, !dbg !3408
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %arrayidx, align 8, !dbg !3408
  ret %union.gimple_statement_d* %7, !dbg !3408
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.VEC_gimple_heap* @gimple_bind_expr_stack() #0 !dbg !3410 {
entry:
  %0 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !3413
  %bind_expr_stack = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %0, i32 0, i32 1, !dbg !3414
  %1 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %bind_expr_stack, align 8, !dbg !3414
  ret %struct.VEC_gimple_heap* %1, !dbg !3415
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @append_to_statement_list(%union.tree_node* %t, %union.tree_node** %list_p) #0 !dbg !3416 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  %list_p.addr = alloca %union.tree_node**, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !3419, metadata !DIExpression()), !dbg !3420
  store %union.tree_node** %list_p, %union.tree_node*** %list_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %list_p.addr, metadata !3421, metadata !DIExpression()), !dbg !3422
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3423
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !3423
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !3425

land.lhs.true:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3426
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !3426
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !3426
  %bf.load = load i64, i64* %2, align 8, !dbg !3426
  %bf.lshr = lshr i64 %bf.load, 16, !dbg !3426
  %bf.clear = and i64 %bf.lshr, 1, !dbg !3426
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3426
  %tobool1 = icmp ne i32 %bf.cast, 0, !dbg !3426
  br i1 %tobool1, label %if.then, label %if.end, !dbg !3427

if.then:                                          ; preds = %land.lhs.true
  %3 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3428
  %4 = load %union.tree_node**, %union.tree_node*** %list_p.addr, align 8, !dbg !3429
  call void @append_to_statement_list_1(%union.tree_node* %3, %union.tree_node** %4), !dbg !3430
  br label %if.end, !dbg !3430

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void, !dbg !3431
}

; Function Attrs: noinline nounwind uwtable
define internal void @append_to_statement_list_1(%union.tree_node* %t, %union.tree_node** %list_p) #0 !dbg !3432 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  %list_p.addr = alloca %union.tree_node**, align 8
  %list = alloca %union.tree_node*, align 8
  %i = alloca %struct.tree_stmt_iterator, align 8
  %tmp = alloca %struct.tree_stmt_iterator, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !3433, metadata !DIExpression()), !dbg !3434
  store %union.tree_node** %list_p, %union.tree_node*** %list_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %list_p.addr, metadata !3435, metadata !DIExpression()), !dbg !3436
  call void @llvm.dbg.declare(metadata %union.tree_node** %list, metadata !3437, metadata !DIExpression()), !dbg !3438
  %0 = load %union.tree_node**, %union.tree_node*** %list_p.addr, align 8, !dbg !3439
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !3440
  store %union.tree_node* %1, %union.tree_node** %list, align 8, !dbg !3438
  call void @llvm.dbg.declare(metadata %struct.tree_stmt_iterator* %i, metadata !3441, metadata !DIExpression()), !dbg !3447
  %2 = load %union.tree_node*, %union.tree_node** %list, align 8, !dbg !3448
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !3448
  br i1 %tobool, label %if.end3, label %if.then, !dbg !3450

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3451
  %tobool1 = icmp ne %union.tree_node* %3, null, !dbg !3451
  br i1 %tobool1, label %land.lhs.true, label %if.end, !dbg !3454

land.lhs.true:                                    ; preds = %if.then
  %4 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3455
  %base = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !3455
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !3455
  %bf.load = load i64, i64* %5, align 8, !dbg !3455
  %bf.clear = and i64 %bf.load, 65535, !dbg !3455
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3455
  %cmp = icmp eq i32 %bf.cast, 147, !dbg !3456
  br i1 %cmp, label %if.then2, label %if.end, !dbg !3457

if.then2:                                         ; preds = %land.lhs.true
  %6 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3458
  %7 = load %union.tree_node**, %union.tree_node*** %list_p.addr, align 8, !dbg !3460
  store %union.tree_node* %6, %union.tree_node** %7, align 8, !dbg !3461
  br label %return, !dbg !3462

if.end:                                           ; preds = %land.lhs.true, %if.then
  %call = call %union.tree_node* @alloc_stmt_list(), !dbg !3463
  store %union.tree_node* %call, %union.tree_node** %list, align 8, !dbg !3464
  %8 = load %union.tree_node**, %union.tree_node*** %list_p.addr, align 8, !dbg !3465
  store %union.tree_node* %call, %union.tree_node** %8, align 8, !dbg !3466
  br label %if.end3, !dbg !3467

if.end3:                                          ; preds = %if.end, %entry
  %9 = load %union.tree_node*, %union.tree_node** %list, align 8, !dbg !3468
  %call4 = call { %struct.tree_statement_list_node*, %union.tree_node* } @tsi_last(%union.tree_node* %9), !dbg !3469
  %10 = bitcast %struct.tree_stmt_iterator* %tmp to { %struct.tree_statement_list_node*, %union.tree_node* }*, !dbg !3469
  %11 = getelementptr inbounds { %struct.tree_statement_list_node*, %union.tree_node* }, { %struct.tree_statement_list_node*, %union.tree_node* }* %10, i32 0, i32 0, !dbg !3469
  %12 = extractvalue { %struct.tree_statement_list_node*, %union.tree_node* } %call4, 0, !dbg !3469
  store %struct.tree_statement_list_node* %12, %struct.tree_statement_list_node** %11, align 8, !dbg !3469
  %13 = getelementptr inbounds { %struct.tree_statement_list_node*, %union.tree_node* }, { %struct.tree_statement_list_node*, %union.tree_node* }* %10, i32 0, i32 1, !dbg !3469
  %14 = extractvalue { %struct.tree_statement_list_node*, %union.tree_node* } %call4, 1, !dbg !3469
  store %union.tree_node* %14, %union.tree_node** %13, align 8, !dbg !3469
  %15 = bitcast %struct.tree_stmt_iterator* %i to i8*, !dbg !3469
  %16 = bitcast %struct.tree_stmt_iterator* %tmp to i8*, !dbg !3469
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %15, i8* align 8 %16, i64 16, i1 false), !dbg !3469
  %17 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3470
  call void @tsi_link_after(%struct.tree_stmt_iterator* %i, %union.tree_node* %17, i32 4), !dbg !3471
  br label %return, !dbg !3472

return:                                           ; preds = %if.end3, %if.then2
  ret void, !dbg !3472
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @append_to_statement_list_force(%union.tree_node* %t, %union.tree_node** %list_p) #0 !dbg !3473 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  %list_p.addr = alloca %union.tree_node**, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !3474, metadata !DIExpression()), !dbg !3475
  store %union.tree_node** %list_p, %union.tree_node*** %list_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %list_p.addr, metadata !3476, metadata !DIExpression()), !dbg !3477
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3478
  %cmp = icmp ne %union.tree_node* %0, null, !dbg !3480
  br i1 %cmp, label %if.then, label %if.end, !dbg !3481

if.then:                                          ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3482
  %2 = load %union.tree_node**, %union.tree_node*** %list_p.addr, align 8, !dbg !3483
  call void @append_to_statement_list_1(%union.tree_node* %1, %union.tree_node** %2), !dbg !3484
  br label %if.end, !dbg !3484

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !3485
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gimplify_and_add(%union.tree_node* %t, %struct.gimple_seq_d** %seq_p) #0 !dbg !3486 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  %seq_p.addr = alloca %struct.gimple_seq_d**, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !3490, metadata !DIExpression()), !dbg !3491
  store %struct.gimple_seq_d** %seq_p, %struct.gimple_seq_d*** %seq_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %seq_p.addr, metadata !3492, metadata !DIExpression()), !dbg !3493
  %0 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %seq_p.addr, align 8, !dbg !3494
  %call = call zeroext i8 @gimplify_stmt(%union.tree_node** %t.addr, %struct.gimple_seq_d** %0), !dbg !3495
  ret void, !dbg !3496
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @gimplify_stmt(%union.tree_node** %stmt_p, %struct.gimple_seq_d** %seq_p) #0 !dbg !3497 {
entry:
  %stmt_p.addr = alloca %union.tree_node**, align 8
  %seq_p.addr = alloca %struct.gimple_seq_d**, align 8
  %last = alloca %struct.gimple_seq_node_d*, align 8
  store %union.tree_node** %stmt_p, %union.tree_node*** %stmt_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %stmt_p.addr, metadata !3500, metadata !DIExpression()), !dbg !3501
  store %struct.gimple_seq_d** %seq_p, %struct.gimple_seq_d*** %seq_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %seq_p.addr, metadata !3502, metadata !DIExpression()), !dbg !3503
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_node_d** %last, metadata !3504, metadata !DIExpression()), !dbg !3505
  %0 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %seq_p.addr, align 8, !dbg !3506
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %0, align 8, !dbg !3508
  %tobool = icmp ne %struct.gimple_seq_d* %1, null, !dbg !3508
  br i1 %tobool, label %if.end, label %if.then, !dbg !3509

if.then:                                          ; preds = %entry
  %call = call %struct.gimple_seq_d* @gimple_seq_alloc(), !dbg !3510
  %2 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %seq_p.addr, align 8, !dbg !3511
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %2, align 8, !dbg !3512
  br label %if.end, !dbg !3513

if.end:                                           ; preds = %if.then, %entry
  %3 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %seq_p.addr, align 8, !dbg !3514
  %4 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %3, align 8, !dbg !3515
  %call1 = call %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %4), !dbg !3516
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %last, align 8, !dbg !3517
  %5 = load %union.tree_node**, %union.tree_node*** %stmt_p.addr, align 8, !dbg !3518
  %6 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %seq_p.addr, align 8, !dbg !3519
  %call2 = call i32 @gimplify_expr(%union.tree_node** %5, %struct.gimple_seq_d** %6, %struct.gimple_seq_d** null, i8 (%union.tree_node*)* @is_gimple_stmt, i32 0), !dbg !3520
  %7 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %last, align 8, !dbg !3521
  %8 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %seq_p.addr, align 8, !dbg !3522
  %9 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %8, align 8, !dbg !3523
  %call3 = call %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %9), !dbg !3524
  %cmp = icmp ne %struct.gimple_seq_node_d* %7, %call3, !dbg !3525
  %conv = zext i1 %cmp to i32, !dbg !3525
  %conv4 = trunc i32 %conv to i8, !dbg !3521
  ret i8 %conv4, !dbg !3526
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @create_tmp_var_name(i8* %prefix) #0 !dbg !3527 {
entry:
  %prefix.addr = alloca i8*, align 8
  %tmp_name = alloca i8*, align 8
  %preftmp = alloca i8*, align 8
  %name_ = alloca i8*, align 8
  %output_ = alloca i8*, align 8
  store i8* %prefix, i8** %prefix.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %prefix.addr, metadata !3530, metadata !DIExpression()), !dbg !3531
  call void @llvm.dbg.declare(metadata i8** %tmp_name, metadata !3532, metadata !DIExpression()), !dbg !3533
  %0 = load i8*, i8** %prefix.addr, align 8, !dbg !3534
  %tobool = icmp ne i8* %0, null, !dbg !3534
  br i1 %tobool, label %if.then, label %if.end, !dbg !3536

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8** %preftmp, metadata !3537, metadata !DIExpression()), !dbg !3539
  %1 = load i8*, i8** %prefix.addr, align 8, !dbg !3540
  store i8* %1, i8** @libiberty_optr, align 8, !dbg !3540
  %2 = load i8*, i8** @libiberty_optr, align 8, !dbg !3540
  %call = call i64 @strlen(i8* %2), !dbg !3540
  %add = add i64 %call, 1, !dbg !3540
  store i64 %add, i64* @libiberty_len, align 8, !dbg !3540
  %3 = load i64, i64* @libiberty_len, align 8, !dbg !3540
  %4 = alloca i8, i64 %3, align 16, !dbg !3540
  store i8* %4, i8** @libiberty_nptr, align 8, !dbg !3540
  %5 = load i8*, i8** @libiberty_nptr, align 8, !dbg !3540
  %6 = load i8*, i8** @libiberty_optr, align 8, !dbg !3540
  %7 = load i64, i64* @libiberty_len, align 8, !dbg !3540
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %5, i8* align 1 %6, i64 %7, i1 false), !dbg !3540
  store i8* %5, i8** %preftmp, align 8, !dbg !3539
  %8 = load i8*, i8** %preftmp, align 8, !dbg !3541
  %9 = load i8*, i8** %preftmp, align 8, !dbg !3542
  %call1 = call i64 @strlen(i8* %9), !dbg !3543
  %conv = trunc i64 %call1 to i32, !dbg !3543
  call void @remove_suffix(i8* %8, i32 %conv), !dbg !3544
  %10 = load i8*, i8** %preftmp, align 8, !dbg !3545
  store i8* %10, i8** %prefix.addr, align 8, !dbg !3546
  br label %if.end, !dbg !3547

if.end:                                           ; preds = %if.then, %entry
  br label %do.body, !dbg !3548

do.body:                                          ; preds = %if.end
  call void @llvm.dbg.declare(metadata i8** %name_, metadata !3549, metadata !DIExpression()), !dbg !3552
  %11 = load i8*, i8** %prefix.addr, align 8, !dbg !3552
  %tobool2 = icmp ne i8* %11, null, !dbg !3552
  br i1 %tobool2, label %cond.true, label %cond.false, !dbg !3552

cond.true:                                        ; preds = %do.body
  %12 = load i8*, i8** %prefix.addr, align 8, !dbg !3552
  br label %cond.end, !dbg !3552

cond.false:                                       ; preds = %do.body
  br label %cond.end, !dbg !3552

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %12, %cond.true ], [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), %cond.false ], !dbg !3552
  store i8* %cond, i8** %name_, align 8, !dbg !3552
  call void @llvm.dbg.declare(metadata i8** %output_, metadata !3553, metadata !DIExpression()), !dbg !3552
  %13 = load i8*, i8** %name_, align 8, !dbg !3552
  %call3 = call i64 @strlen(i8* %13), !dbg !3552
  %add4 = add i64 %call3, 32, !dbg !3552
  %14 = alloca i8, i64 %add4, align 16, !dbg !3552
  store i8* %14, i8** %tmp_name, align 8, !dbg !3552
  store i8* %14, i8** %output_, align 8, !dbg !3552
  %15 = load i8*, i8** %output_, align 8, !dbg !3552
  %16 = load i8*, i8** %name_, align 8, !dbg !3552
  %17 = load i32, i32* @tmp_var_id_num, align 4, !dbg !3552
  %inc = add i32 %17, 1, !dbg !3552
  store i32 %inc, i32* @tmp_var_id_num, align 4, !dbg !3552
  %conv5 = zext i32 %17 to i64, !dbg !3552
  %call6 = call i32 (i8*, i8*, ...) @sprintf(i8* %15, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i64 0, i64 0), i8* %16, i64 %conv5), !dbg !3552
  br label %do.end, !dbg !3552

do.end:                                           ; preds = %cond.end
  %18 = load i8*, i8** %tmp_name, align 8, !dbg !3555
  %call7 = call %union.tree_node* @get_identifier(i8* %18), !dbg !3556
  ret %union.tree_node* %call7, !dbg !3557
}

declare dso_local i64 @strlen(i8*) #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

; Function Attrs: noinline nounwind uwtable
define internal void @remove_suffix(i8* %name, i32 %len) #0 !dbg !3558 {
entry:
  %name.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !3561, metadata !DIExpression()), !dbg !3562
  store i32 %len, i32* %len.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %len.addr, metadata !3563, metadata !DIExpression()), !dbg !3564
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3565, metadata !DIExpression()), !dbg !3566
  store i32 2, i32* %i, align 4, !dbg !3567
  br label %for.cond, !dbg !3569

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !3570
  %cmp = icmp slt i32 %0, 8, !dbg !3572
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !3573

land.rhs:                                         ; preds = %for.cond
  %1 = load i32, i32* %len.addr, align 4, !dbg !3574
  %2 = load i32, i32* %i, align 4, !dbg !3575
  %cmp1 = icmp sgt i32 %1, %2, !dbg !3576
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %3 = phi i1 [ false, %for.cond ], [ %cmp1, %land.rhs ], !dbg !3577
  br i1 %3, label %for.body, label %for.end, !dbg !3578

for.body:                                         ; preds = %land.end
  %4 = load i8*, i8** %name.addr, align 8, !dbg !3579
  %5 = load i32, i32* %len.addr, align 4, !dbg !3582
  %6 = load i32, i32* %i, align 4, !dbg !3583
  %sub = sub nsw i32 %5, %6, !dbg !3584
  %idxprom = sext i32 %sub to i64, !dbg !3579
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom, !dbg !3579
  %7 = load i8, i8* %arrayidx, align 1, !dbg !3579
  %conv = sext i8 %7 to i32, !dbg !3579
  %cmp2 = icmp eq i32 %conv, 46, !dbg !3585
  br i1 %cmp2, label %if.then, label %if.end, !dbg !3586

if.then:                                          ; preds = %for.body
  %8 = load i8*, i8** %name.addr, align 8, !dbg !3587
  %9 = load i32, i32* %len.addr, align 4, !dbg !3589
  %10 = load i32, i32* %i, align 4, !dbg !3590
  %sub4 = sub nsw i32 %9, %10, !dbg !3591
  %idxprom5 = sext i32 %sub4 to i64, !dbg !3587
  %arrayidx6 = getelementptr inbounds i8, i8* %8, i64 %idxprom5, !dbg !3587
  store i8 0, i8* %arrayidx6, align 1, !dbg !3592
  br label %for.end, !dbg !3593

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !3594

for.inc:                                          ; preds = %if.end
  %11 = load i32, i32* %i, align 4, !dbg !3595
  %inc = add nsw i32 %11, 1, !dbg !3595
  store i32 %inc, i32* %i, align 4, !dbg !3595
  br label %for.cond, !dbg !3596, !llvm.loop !3597

for.end:                                          ; preds = %if.then, %land.end
  ret void, !dbg !3599
}

declare dso_local i32 @sprintf(i8*, i8*, ...) #3

declare dso_local %union.tree_node* @get_identifier(i8*) #3

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @create_tmp_var_raw(%union.tree_node* %type, i8* %prefix) #0 !dbg !3600 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %prefix.addr = alloca i8*, align 8
  %tmp_var = alloca %union.tree_node*, align 8
  %new_type = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !3603, metadata !DIExpression()), !dbg !3604
  store i8* %prefix, i8** %prefix.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %prefix.addr, metadata !3605, metadata !DIExpression()), !dbg !3606
  call void @llvm.dbg.declare(metadata %union.tree_node** %tmp_var, metadata !3607, metadata !DIExpression()), !dbg !3608
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_type, metadata !3609, metadata !DIExpression()), !dbg !3610
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3611
  %call = call %union.tree_node* @build_qualified_type(%union.tree_node* %0, i32 0), !dbg !3611
  store %union.tree_node* %call, %union.tree_node** %new_type, align 8, !dbg !3612
  %1 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3613
  %type1 = bitcast %union.tree_node* %1 to %struct.tree_type*, !dbg !3613
  %attributes = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 4, !dbg !3613
  %2 = load %union.tree_node*, %union.tree_node** %attributes, align 8, !dbg !3613
  %3 = load %union.tree_node*, %union.tree_node** %new_type, align 8, !dbg !3614
  %type2 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !3614
  %attributes3 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type2, i32 0, i32 4, !dbg !3614
  store %union.tree_node* %2, %union.tree_node** %attributes3, align 8, !dbg !3615
  %4 = load i32, i32* @input_location, align 4, !dbg !3616
  %5 = load i8*, i8** %prefix.addr, align 8, !dbg !3616
  %tobool = icmp ne i8* %5, null, !dbg !3616
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3616

cond.true:                                        ; preds = %entry
  %6 = load i8*, i8** %prefix.addr, align 8, !dbg !3616
  %call4 = call %union.tree_node* @create_tmp_var_name(i8* %6), !dbg !3616
  br label %cond.end, !dbg !3616

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3616

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %call4, %cond.true ], [ null, %cond.false ], !dbg !3616
  %7 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3616
  %call5 = call %union.tree_node* @build_decl_stat(i32 %4, i32 32, %union.tree_node* %cond, %union.tree_node* %7), !dbg !3616
  store %union.tree_node* %call5, %union.tree_node** %tmp_var, align 8, !dbg !3617
  %8 = load %union.tree_node*, %union.tree_node** %tmp_var, align 8, !dbg !3618
  %decl_common = bitcast %union.tree_node* %8 to %struct.tree_decl_common*, !dbg !3618
  %artificial_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !3618
  %9 = bitcast i40* %artificial_flag to i64*, !dbg !3618
  %bf.load = load i64, i64* %9, align 8, !dbg !3619
  %bf.clear = and i64 %bf.load, -4097, !dbg !3619
  %bf.set = or i64 %bf.clear, 4096, !dbg !3619
  store i64 %bf.set, i64* %9, align 8, !dbg !3619
  %10 = load %union.tree_node*, %union.tree_node** %tmp_var, align 8, !dbg !3620
  %decl_common6 = bitcast %union.tree_node* %10 to %struct.tree_decl_common*, !dbg !3620
  %ignored_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common6, i32 0, i32 2, !dbg !3620
  %11 = bitcast i40* %ignored_flag to i64*, !dbg !3620
  %bf.load7 = load i64, i64* %11, align 8, !dbg !3621
  %bf.clear8 = and i64 %bf.load7, -1025, !dbg !3621
  %bf.set9 = or i64 %bf.clear8, 1024, !dbg !3621
  store i64 %bf.set9, i64* %11, align 8, !dbg !3621
  %12 = load %union.tree_node*, %union.tree_node** %tmp_var, align 8, !dbg !3622
  %base = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !3622
  %13 = bitcast %struct.tree_base* %base to i64*, !dbg !3622
  %bf.load10 = load i64, i64* %13, align 8, !dbg !3623
  %bf.clear11 = and i64 %bf.load10, -1048577, !dbg !3623
  store i64 %bf.clear11, i64* %13, align 8, !dbg !3623
  %14 = load %union.tree_node*, %union.tree_node** %tmp_var, align 8, !dbg !3624
  %decl_common12 = bitcast %union.tree_node* %14 to %struct.tree_decl_common*, !dbg !3624
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common12, i32 0, i32 2, !dbg !3624
  %15 = bitcast i40* %decl_flag_1 to i64*, !dbg !3624
  %bf.load13 = load i64, i64* %15, align 8, !dbg !3625
  %bf.clear14 = and i64 %bf.load13, -33554433, !dbg !3625
  store i64 %bf.clear14, i64* %15, align 8, !dbg !3625
  %16 = load %union.tree_node*, %union.tree_node** %tmp_var, align 8, !dbg !3626
  %base15 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !3626
  %17 = bitcast %struct.tree_base* %base15 to i64*, !dbg !3626
  %bf.load16 = load i64, i64* %17, align 8, !dbg !3627
  %bf.clear17 = and i64 %bf.load16, -67108865, !dbg !3627
  store i64 %bf.clear17, i64* %17, align 8, !dbg !3627
  %18 = load %union.tree_node*, %union.tree_node** %tmp_var, align 8, !dbg !3628
  %base18 = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !3628
  %19 = bitcast %struct.tree_base* %base18 to i64*, !dbg !3628
  %bf.load19 = load i64, i64* %19, align 8, !dbg !3629
  %bf.clear20 = and i64 %bf.load19, -16777217, !dbg !3629
  %bf.set21 = or i64 %bf.clear20, 16777216, !dbg !3629
  store i64 %bf.set21, i64* %19, align 8, !dbg !3629
  %20 = load %union.tree_node*, %union.tree_node** %tmp_var, align 8, !dbg !3630
  ret %union.tree_node* %20, !dbg !3631
}

declare dso_local %union.tree_node* @build_qualified_type(%union.tree_node*, i32) #3

declare dso_local %union.tree_node* @build_decl_stat(i32, i32, %union.tree_node*, %union.tree_node*) #3

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @create_tmp_var(%union.tree_node* %type, i8* %prefix) #0 !dbg !3632 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %prefix.addr = alloca i8*, align 8
  %tmp_var = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !3633, metadata !DIExpression()), !dbg !3634
  store i8* %prefix, i8** %prefix.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %prefix.addr, metadata !3635, metadata !DIExpression()), !dbg !3636
  call void @llvm.dbg.declare(metadata %union.tree_node** %tmp_var, metadata !3637, metadata !DIExpression()), !dbg !3638
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3639
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !3639
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !3639
  %bf.load = load i64, i64* %1, align 8, !dbg !3639
  %bf.lshr = lshr i64 %bf.load, 18, !dbg !3639
  %bf.clear = and i64 %bf.lshr, 1, !dbg !3639
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3639
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !3639
  br i1 %tobool, label %cond.true, label %land.lhs.true, !dbg !3639

land.lhs.true:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3639
  %type1 = bitcast %union.tree_node* %2 to %struct.tree_type*, !dbg !3639
  %size = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 2, !dbg !3639
  %3 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !3639
  %cmp = icmp ne %union.tree_node* %3, null, !dbg !3639
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !3639

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 504, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3639
  br label %cond.end, !dbg !3639

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !3639

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3639
  %4 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3640
  %5 = load i8*, i8** %prefix.addr, align 8, !dbg !3641
  %call = call %union.tree_node* @create_tmp_var_raw(%union.tree_node* %4, i8* %5), !dbg !3642
  store %union.tree_node* %call, %union.tree_node** %tmp_var, align 8, !dbg !3643
  %6 = load %union.tree_node*, %union.tree_node** %tmp_var, align 8, !dbg !3644
  call void @gimple_add_tmp_var(%union.tree_node* %6), !dbg !3645
  %7 = load %union.tree_node*, %union.tree_node** %tmp_var, align 8, !dbg !3646
  ret %union.tree_node* %7, !dbg !3647
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gimple_add_tmp_var(%union.tree_node* %tmp) #0 !dbg !3648 {
entry:
  %tmp.addr = alloca %union.tree_node*, align 8
  %ctx = alloca %struct.gimplify_omp_ctx*, align 8
  %body_seq = alloca %struct.gimple_seq_d*, align 8
  store %union.tree_node* %tmp, %union.tree_node** %tmp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %tmp.addr, metadata !3649, metadata !DIExpression()), !dbg !3650
  %0 = load %union.tree_node*, %union.tree_node** %tmp.addr, align 8, !dbg !3651
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !3651
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !3651
  %1 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !3651
  %tobool = icmp ne %union.tree_node* %1, null, !dbg !3651
  br i1 %tobool, label %cond.true, label %land.lhs.true, !dbg !3651

land.lhs.true:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %tmp.addr, align 8, !dbg !3651
  %decl_with_vis = bitcast %union.tree_node* %2 to %struct.tree_decl_with_vis*, !dbg !3651
  %seen_in_bind_expr = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 4, !dbg !3651
  %3 = bitcast i24* %seen_in_bind_expr to i32*, !dbg !3651
  %bf.load = load i32, i32* %3, align 8, !dbg !3651
  %bf.lshr = lshr i32 %bf.load, 8, !dbg !3651
  %bf.clear = and i32 %bf.lshr, 1, !dbg !3651
  %tobool1 = icmp ne i32 %bf.clear, 0, !dbg !3651
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !3651

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 727, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3651
  br label %cond.end, !dbg !3651

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !3651

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3651
  %4 = load %union.tree_node*, %union.tree_node** %tmp.addr, align 8, !dbg !3652
  %decl_common = bitcast %union.tree_node* %4 to %struct.tree_decl_common*, !dbg !3652
  %size_unit = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 4, !dbg !3652
  %5 = load %union.tree_node*, %union.tree_node** %size_unit, align 8, !dbg !3652
  %call = call i32 @host_integerp(%union.tree_node* %5, i32 1), !dbg !3654
  %tobool2 = icmp ne i32 %call, 0, !dbg !3654
  br i1 %tobool2, label %if.end, label %if.then, !dbg !3655

if.then:                                          ; preds = %cond.end
  %6 = load %union.tree_node*, %union.tree_node** %tmp.addr, align 8, !dbg !3656
  call void @force_constant_size(%union.tree_node* %6), !dbg !3657
  br label %if.end, !dbg !3657

if.end:                                           ; preds = %if.then, %cond.end
  %7 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !3658
  %8 = load %union.tree_node*, %union.tree_node** %tmp.addr, align 8, !dbg !3659
  %decl_minimal = bitcast %union.tree_node* %8 to %struct.tree_decl_minimal*, !dbg !3659
  %context = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 4, !dbg !3659
  store %union.tree_node* %7, %union.tree_node** %context, align 8, !dbg !3660
  %9 = load %union.tree_node*, %union.tree_node** %tmp.addr, align 8, !dbg !3661
  %decl_with_vis3 = bitcast %union.tree_node* %9 to %struct.tree_decl_with_vis*, !dbg !3661
  %seen_in_bind_expr4 = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis3, i32 0, i32 4, !dbg !3661
  %10 = bitcast i24* %seen_in_bind_expr4 to i32*, !dbg !3661
  %bf.load5 = load i32, i32* %10, align 8, !dbg !3662
  %bf.clear6 = and i32 %bf.load5, -257, !dbg !3662
  %bf.set = or i32 %bf.clear6, 256, !dbg !3662
  store i32 %bf.set, i32* %10, align 8, !dbg !3662
  %11 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !3663
  %tobool7 = icmp ne %struct.gimplify_ctx* %11, null, !dbg !3663
  br i1 %tobool7, label %if.then8, label %if.else, !dbg !3665

if.then8:                                         ; preds = %if.end
  %12 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !3666
  %temps = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %12, i32 0, i32 2, !dbg !3668
  %13 = load %union.tree_node*, %union.tree_node** %temps, align 8, !dbg !3668
  %14 = load %union.tree_node*, %union.tree_node** %tmp.addr, align 8, !dbg !3669
  %common9 = bitcast %union.tree_node* %14 to %struct.tree_common*, !dbg !3669
  %chain10 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common9, i32 0, i32 1, !dbg !3669
  store %union.tree_node* %13, %union.tree_node** %chain10, align 8, !dbg !3670
  %15 = load %union.tree_node*, %union.tree_node** %tmp.addr, align 8, !dbg !3671
  %16 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !3672
  %temps11 = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %16, i32 0, i32 2, !dbg !3673
  store %union.tree_node* %15, %union.tree_node** %temps11, align 8, !dbg !3674
  %17 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** @gimplify_omp_ctxp, align 8, !dbg !3675
  %tobool12 = icmp ne %struct.gimplify_omp_ctx* %17, null, !dbg !3675
  br i1 %tobool12, label %if.then13, label %if.end18, !dbg !3677

if.then13:                                        ; preds = %if.then8
  call void @llvm.dbg.declare(metadata %struct.gimplify_omp_ctx** %ctx, metadata !3678, metadata !DIExpression()), !dbg !3680
  %18 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** @gimplify_omp_ctxp, align 8, !dbg !3681
  store %struct.gimplify_omp_ctx* %18, %struct.gimplify_omp_ctx** %ctx, align 8, !dbg !3680
  br label %while.cond, !dbg !3682

while.cond:                                       ; preds = %while.body, %if.then13
  %19 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx, align 8, !dbg !3683
  %tobool14 = icmp ne %struct.gimplify_omp_ctx* %19, null, !dbg !3683
  br i1 %tobool14, label %land.rhs, label %land.end, !dbg !3684

land.rhs:                                         ; preds = %while.cond
  %20 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx, align 8, !dbg !3685
  %region_type = getelementptr inbounds %struct.gimplify_omp_ctx, %struct.gimplify_omp_ctx* %20, i32 0, i32 5, !dbg !3686
  %21 = load i32, i32* %region_type, align 8, !dbg !3686
  %cmp = icmp eq i32 %21, 0, !dbg !3687
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %22 = phi i1 [ false, %while.cond ], [ %cmp, %land.rhs ], !dbg !3688
  br i1 %22, label %while.body, label %while.end, !dbg !3682

while.body:                                       ; preds = %land.end
  %23 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx, align 8, !dbg !3689
  %outer_context = getelementptr inbounds %struct.gimplify_omp_ctx, %struct.gimplify_omp_ctx* %23, i32 0, i32 0, !dbg !3690
  %24 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %outer_context, align 8, !dbg !3690
  store %struct.gimplify_omp_ctx* %24, %struct.gimplify_omp_ctx** %ctx, align 8, !dbg !3691
  br label %while.cond, !dbg !3682, !llvm.loop !3692

while.end:                                        ; preds = %land.end
  %25 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx, align 8, !dbg !3693
  %tobool15 = icmp ne %struct.gimplify_omp_ctx* %25, null, !dbg !3693
  br i1 %tobool15, label %if.then16, label %if.end17, !dbg !3695

if.then16:                                        ; preds = %while.end
  %26 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx, align 8, !dbg !3696
  %27 = load %union.tree_node*, %union.tree_node** %tmp.addr, align 8, !dbg !3697
  call void @omp_add_variable(%struct.gimplify_omp_ctx* %26, %union.tree_node* %27, i32 129), !dbg !3698
  br label %if.end17, !dbg !3698

if.end17:                                         ; preds = %if.then16, %while.end
  br label %if.end18, !dbg !3699

if.end18:                                         ; preds = %if.end17, %if.then8
  br label %if.end25, !dbg !3700

if.else:                                          ; preds = %if.end
  %28 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3701
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %28, i64 0, !dbg !3701
  %tobool19 = icmp ne %struct.function* %add.ptr, null, !dbg !3701
  br i1 %tobool19, label %if.then20, label %if.else21, !dbg !3703

if.then20:                                        ; preds = %if.else
  %29 = load %union.tree_node*, %union.tree_node** %tmp.addr, align 8, !dbg !3704
  call void @record_vars(%union.tree_node* %29), !dbg !3705
  br label %if.end24, !dbg !3705

if.else21:                                        ; preds = %if.else
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %body_seq, metadata !3706, metadata !DIExpression()), !dbg !3708
  %30 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !3709
  %call22 = call %struct.gimple_seq_d* @gimple_body(%union.tree_node* %30), !dbg !3710
  store %struct.gimple_seq_d* %call22, %struct.gimple_seq_d** %body_seq, align 8, !dbg !3711
  %31 = load %union.tree_node*, %union.tree_node** %tmp.addr, align 8, !dbg !3712
  %32 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %body_seq, align 8, !dbg !3713
  %call23 = call %union.gimple_statement_d* @gimple_seq_first_stmt(%struct.gimple_seq_d* %32), !dbg !3714
  call void @declare_vars(%union.tree_node* %31, %union.gimple_statement_d* %call23, i8 zeroext 0), !dbg !3715
  br label %if.end24

if.end24:                                         ; preds = %if.else21, %if.then20
  br label %if.end25

if.end25:                                         ; preds = %if.end24, %if.end18
  ret void, !dbg !3716
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @get_formal_tmp_var(%union.tree_node* %val, %struct.gimple_seq_d** %pre_p) #0 !dbg !3717 {
entry:
  %val.addr = alloca %union.tree_node*, align 8
  %pre_p.addr = alloca %struct.gimple_seq_d**, align 8
  store %union.tree_node* %val, %union.tree_node** %val.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val.addr, metadata !3720, metadata !DIExpression()), !dbg !3721
  store %struct.gimple_seq_d** %pre_p, %struct.gimple_seq_d*** %pre_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %pre_p.addr, metadata !3722, metadata !DIExpression()), !dbg !3723
  %0 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !3724
  %1 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !3725
  %call = call %union.tree_node* @internal_get_tmp_var(%union.tree_node* %0, %struct.gimple_seq_d** %1, %struct.gimple_seq_d** null, i8 zeroext 1), !dbg !3726
  ret %union.tree_node* %call, !dbg !3727
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @internal_get_tmp_var(%union.tree_node* %val, %struct.gimple_seq_d** %pre_p, %struct.gimple_seq_d** %post_p, i8 zeroext %is_formal) #0 !dbg !3728 {
entry:
  %val.addr = alloca %union.tree_node*, align 8
  %pre_p.addr = alloca %struct.gimple_seq_d**, align 8
  %post_p.addr = alloca %struct.gimple_seq_d**, align 8
  %is_formal.addr = alloca i8, align 1
  %t = alloca %union.tree_node*, align 8
  %mod = alloca %union.tree_node*, align 8
  %last = alloca %union.gimple_statement_d*, align 8
  store %union.tree_node* %val, %union.tree_node** %val.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val.addr, metadata !3731, metadata !DIExpression()), !dbg !3732
  store %struct.gimple_seq_d** %pre_p, %struct.gimple_seq_d*** %pre_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %pre_p.addr, metadata !3733, metadata !DIExpression()), !dbg !3734
  store %struct.gimple_seq_d** %post_p, %struct.gimple_seq_d*** %post_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %post_p.addr, metadata !3735, metadata !DIExpression()), !dbg !3736
  store i8 %is_formal, i8* %is_formal.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %is_formal.addr, metadata !3737, metadata !DIExpression()), !dbg !3738
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !3739, metadata !DIExpression()), !dbg !3740
  call void @llvm.dbg.declare(metadata %union.tree_node** %mod, metadata !3741, metadata !DIExpression()), !dbg !3742
  %0 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !3743
  %1 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !3744
  %call = call i32 @gimplify_expr(%union.tree_node** %val.addr, %struct.gimple_seq_d** %0, %struct.gimple_seq_d** %1, i8 (%union.tree_node*)* @is_gimple_reg_rhs_or_call, i32 1), !dbg !3745
  %2 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !3746
  %3 = load i8, i8* %is_formal.addr, align 1, !dbg !3747
  %call1 = call %union.tree_node* @lookup_tmp_var(%union.tree_node* %2, i8 zeroext %3), !dbg !3748
  store %union.tree_node* %call1, %union.tree_node** %t, align 8, !dbg !3749
  %4 = load i8, i8* %is_formal.addr, align 1, !dbg !3750
  %conv = zext i8 %4 to i32, !dbg !3750
  %tobool = icmp ne i32 %conv, 0, !dbg !3750
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !3752

land.lhs.true:                                    ; preds = %entry
  %5 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3753
  %common = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !3753
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3753
  %6 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3753
  %base = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !3753
  %7 = bitcast %struct.tree_base* %base to i64*, !dbg !3753
  %bf.load = load i64, i64* %7, align 8, !dbg !3753
  %bf.clear = and i64 %bf.load, 65535, !dbg !3753
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3753
  %cmp = icmp eq i32 %bf.cast, 13, !dbg !3754
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !3755

lor.lhs.false:                                    ; preds = %land.lhs.true
  %8 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3756
  %common3 = bitcast %union.tree_node* %8 to %struct.tree_common*, !dbg !3756
  %type4 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3, i32 0, i32 2, !dbg !3756
  %9 = load %union.tree_node*, %union.tree_node** %type4, align 8, !dbg !3756
  %base5 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !3756
  %10 = bitcast %struct.tree_base* %base5 to i64*, !dbg !3756
  %bf.load6 = load i64, i64* %10, align 8, !dbg !3756
  %bf.clear7 = and i64 %bf.load6, 65535, !dbg !3756
  %bf.cast8 = trunc i64 %bf.clear7 to i32, !dbg !3756
  %cmp9 = icmp eq i32 %bf.cast8, 14, !dbg !3757
  br i1 %cmp9, label %if.then, label %if.end, !dbg !3758

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  %11 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3759
  %decl_common = bitcast %union.tree_node* %11 to %struct.tree_decl_common*, !dbg !3759
  %gimple_reg_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !3759
  %12 = bitcast i40* %gimple_reg_flag to i64*, !dbg !3759
  %bf.load11 = load i64, i64* %12, align 8, !dbg !3760
  %bf.clear12 = and i64 %bf.load11, -134217729, !dbg !3760
  %bf.set = or i64 %bf.clear12, 134217728, !dbg !3760
  store i64 %bf.set, i64* %12, align 8, !dbg !3760
  br label %if.end, !dbg !3759

if.end:                                           ; preds = %if.then, %lor.lhs.false, %entry
  %13 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3761
  %common13 = bitcast %union.tree_node* %13 to %struct.tree_common*, !dbg !3761
  %type14 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common13, i32 0, i32 2, !dbg !3761
  %14 = load %union.tree_node*, %union.tree_node** %type14, align 8, !dbg !3761
  %15 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3761
  %16 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !3761
  %call15 = call %union.tree_node* @unshare_expr(%union.tree_node* %16), !dbg !3761
  %call16 = call %union.tree_node* @build2_stat(i32 54, %union.tree_node* %14, %union.tree_node* %15, %union.tree_node* %call15), !dbg !3761
  store %union.tree_node* %call16, %union.tree_node** %mod, align 8, !dbg !3762
  %17 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !3763
  %base17 = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !3763
  %18 = bitcast %struct.tree_base* %base17 to i64*, !dbg !3763
  %bf.load18 = load i64, i64* %18, align 8, !dbg !3763
  %bf.clear19 = and i64 %bf.load18, 65535, !dbg !3763
  %bf.cast20 = trunc i64 %bf.clear19 to i32, !dbg !3763
  %idxprom = sext i32 %bf.cast20 to i64, !dbg !3763
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !3763
  %19 = load i32, i32* %arrayidx, align 4, !dbg !3763
  %cmp21 = icmp uge i32 %19, 4, !dbg !3763
  br i1 %cmp21, label %land.lhs.true23, label %cond.false, !dbg !3763

land.lhs.true23:                                  ; preds = %if.end
  %20 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !3763
  %base24 = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !3763
  %21 = bitcast %struct.tree_base* %base24 to i64*, !dbg !3763
  %bf.load25 = load i64, i64* %21, align 8, !dbg !3763
  %bf.clear26 = and i64 %bf.load25, 65535, !dbg !3763
  %bf.cast27 = trunc i64 %bf.clear26 to i32, !dbg !3763
  %idxprom28 = sext i32 %bf.cast27 to i64, !dbg !3763
  %arrayidx29 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom28, !dbg !3763
  %22 = load i32, i32* %arrayidx29, align 4, !dbg !3763
  %cmp30 = icmp ule i32 %22, 10, !dbg !3763
  br i1 %cmp30, label %cond.true, label %cond.false, !dbg !3763

cond.true:                                        ; preds = %land.lhs.true23
  %23 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !3763
  %exp = bitcast %union.tree_node* %23 to %struct.tree_exp*, !dbg !3763
  %locus = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 1, !dbg !3763
  %24 = load i32, i32* %locus, align 8, !dbg !3763
  br label %cond.end, !dbg !3763

cond.false:                                       ; preds = %land.lhs.true23, %if.end
  br label %cond.end, !dbg !3763

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %24, %cond.true ], [ 0, %cond.false ], !dbg !3763
  %cmp32 = icmp ne i32 %cond, 0, !dbg !3763
  br i1 %cmp32, label %if.then34, label %if.else, !dbg !3765

if.then34:                                        ; preds = %cond.end
  %25 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !3766
  %base35 = bitcast %union.tree_node* %25 to %struct.tree_base*, !dbg !3766
  %26 = bitcast %struct.tree_base* %base35 to i64*, !dbg !3766
  %bf.load36 = load i64, i64* %26, align 8, !dbg !3766
  %bf.clear37 = and i64 %bf.load36, 65535, !dbg !3766
  %bf.cast38 = trunc i64 %bf.clear37 to i32, !dbg !3766
  %idxprom39 = sext i32 %bf.cast38 to i64, !dbg !3766
  %arrayidx40 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom39, !dbg !3766
  %27 = load i32, i32* %arrayidx40, align 4, !dbg !3766
  %cmp41 = icmp uge i32 %27, 4, !dbg !3766
  br i1 %cmp41, label %land.lhs.true43, label %cond.false55, !dbg !3766

land.lhs.true43:                                  ; preds = %if.then34
  %28 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !3766
  %base44 = bitcast %union.tree_node* %28 to %struct.tree_base*, !dbg !3766
  %29 = bitcast %struct.tree_base* %base44 to i64*, !dbg !3766
  %bf.load45 = load i64, i64* %29, align 8, !dbg !3766
  %bf.clear46 = and i64 %bf.load45, 65535, !dbg !3766
  %bf.cast47 = trunc i64 %bf.clear46 to i32, !dbg !3766
  %idxprom48 = sext i32 %bf.cast47 to i64, !dbg !3766
  %arrayidx49 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom48, !dbg !3766
  %30 = load i32, i32* %arrayidx49, align 4, !dbg !3766
  %cmp50 = icmp ule i32 %30, 10, !dbg !3766
  br i1 %cmp50, label %cond.true52, label %cond.false55, !dbg !3766

cond.true52:                                      ; preds = %land.lhs.true43
  %31 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !3766
  %exp53 = bitcast %union.tree_node* %31 to %struct.tree_exp*, !dbg !3766
  %locus54 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp53, i32 0, i32 1, !dbg !3766
  %32 = load i32, i32* %locus54, align 8, !dbg !3766
  br label %cond.end56, !dbg !3766

cond.false55:                                     ; preds = %land.lhs.true43, %if.then34
  br label %cond.end56, !dbg !3766

cond.end56:                                       ; preds = %cond.false55, %cond.true52
  %cond57 = phi i32 [ %32, %cond.true52 ], [ 0, %cond.false55 ], !dbg !3766
  %33 = load %union.tree_node*, %union.tree_node** %mod, align 8, !dbg !3766
  %exp58 = bitcast %union.tree_node* %33 to %struct.tree_exp*, !dbg !3766
  %locus59 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp58, i32 0, i32 1, !dbg !3766
  store i32 %cond57, i32* %locus59, align 8, !dbg !3766
  br label %if.end62, !dbg !3766

if.else:                                          ; preds = %cond.end
  %34 = load i32, i32* @input_location, align 4, !dbg !3767
  %35 = load %union.tree_node*, %union.tree_node** %mod, align 8, !dbg !3767
  %exp60 = bitcast %union.tree_node* %35 to %struct.tree_exp*, !dbg !3767
  %locus61 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp60, i32 0, i32 1, !dbg !3767
  store i32 %34, i32* %locus61, align 8, !dbg !3767
  br label %if.end62

if.end62:                                         ; preds = %if.else, %cond.end56
  %36 = load %union.tree_node*, %union.tree_node** %mod, align 8, !dbg !3768
  %37 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !3769
  call void @gimplify_and_add(%union.tree_node* %36, %struct.gimple_seq_d** %37), !dbg !3770
  %38 = load %union.tree_node*, %union.tree_node** %mod, align 8, !dbg !3771
  %39 = bitcast %union.tree_node* %38 to i8*, !dbg !3771
  call void @ggc_free(i8* %39), !dbg !3772
  %40 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !3773
  %into_ssa = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %40, i32 0, i32 10, !dbg !3775
  %41 = load i8, i8* %into_ssa, align 1, !dbg !3775
  %tobool63 = icmp ne i8 %41, 0, !dbg !3773
  br i1 %tobool63, label %if.then64, label %if.end67, !dbg !3776

if.then64:                                        ; preds = %if.end62
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %last, metadata !3777, metadata !DIExpression()), !dbg !3779
  %42 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !3780
  %43 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %42, align 8, !dbg !3781
  %call65 = call %union.gimple_statement_d* @gimple_seq_last_stmt(%struct.gimple_seq_d* %43), !dbg !3782
  store %union.gimple_statement_d* %call65, %union.gimple_statement_d** %last, align 8, !dbg !3779
  %44 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last, align 8, !dbg !3783
  %call66 = call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %44), !dbg !3784
  store %union.tree_node* %call66, %union.tree_node** %t, align 8, !dbg !3785
  br label %if.end67, !dbg !3786

if.end67:                                         ; preds = %if.then64, %if.end62
  %45 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3787
  ret %union.tree_node* %45, !dbg !3788
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @get_initialized_tmp_var(%union.tree_node* %val, %struct.gimple_seq_d** %pre_p, %struct.gimple_seq_d** %post_p) #0 !dbg !3789 {
entry:
  %val.addr = alloca %union.tree_node*, align 8
  %pre_p.addr = alloca %struct.gimple_seq_d**, align 8
  %post_p.addr = alloca %struct.gimple_seq_d**, align 8
  store %union.tree_node* %val, %union.tree_node** %val.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val.addr, metadata !3792, metadata !DIExpression()), !dbg !3793
  store %struct.gimple_seq_d** %pre_p, %struct.gimple_seq_d*** %pre_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %pre_p.addr, metadata !3794, metadata !DIExpression()), !dbg !3795
  store %struct.gimple_seq_d** %post_p, %struct.gimple_seq_d*** %post_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %post_p.addr, metadata !3796, metadata !DIExpression()), !dbg !3797
  %0 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !3798
  %1 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !3799
  %2 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !3800
  %call = call %union.tree_node* @internal_get_tmp_var(%union.tree_node* %0, %struct.gimple_seq_d** %1, %struct.gimple_seq_d** %2, i8 zeroext 0), !dbg !3801
  ret %union.tree_node* %call, !dbg !3802
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_code(%union.gimple_statement_d* %g) #0 !dbg !3803 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !3807, metadata !DIExpression()), !dbg !3808
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3809
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !3810
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !3811
  %bf.load = load i32, i32* %1, align 8, !dbg !3811
  %bf.clear = and i32 %bf.load, 255, !dbg !3811
  ret i32 %bf.clear, !dbg !3812
}

declare dso_local %union.tree_node* @nreverse(%union.tree_node*) #3

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_bind_block(%union.gimple_statement_d* %gs) #0 !dbg !3813 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3816, metadata !DIExpression()), !dbg !3817
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3818
  %gimple_bind = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_bind*, !dbg !3819
  %block = getelementptr inbounds %struct.gimple_statement_bind, %struct.gimple_statement_bind* %gimple_bind, i32 0, i32 2, !dbg !3820
  %1 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !3820
  ret %union.tree_node* %1, !dbg !3821
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_bind_vars(%union.gimple_statement_d* %gs) #0 !dbg !3822 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3823, metadata !DIExpression()), !dbg !3824
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3825
  %gimple_bind = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_bind*, !dbg !3826
  %vars = getelementptr inbounds %struct.gimple_statement_bind, %struct.gimple_statement_bind* %gimple_bind, i32 0, i32 1, !dbg !3827
  %1 = load %union.tree_node*, %union.tree_node** %vars, align 8, !dbg !3827
  ret %union.tree_node* %1, !dbg !3828
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_bind_set_vars(%union.gimple_statement_d* %gs, %union.tree_node* %vars) #0 !dbg !3829 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %vars.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3832, metadata !DIExpression()), !dbg !3833
  store %union.tree_node* %vars, %union.tree_node** %vars.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %vars.addr, metadata !3834, metadata !DIExpression()), !dbg !3835
  %0 = load %union.tree_node*, %union.tree_node** %vars.addr, align 8, !dbg !3836
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3837
  %gimple_bind = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_bind*, !dbg !3838
  %vars1 = getelementptr inbounds %struct.gimple_statement_bind, %struct.gimple_statement_bind* %gimple_bind, i32 0, i32 1, !dbg !3839
  store %union.tree_node* %0, %union.tree_node** %vars1, align 8, !dbg !3840
  ret void, !dbg !3841
}

declare dso_local %union.tree_node* @chainon(%union.tree_node*, %union.tree_node*) #3

declare dso_local i32 @host_integerp(%union.tree_node*, i32) #3

; Function Attrs: noinline nounwind uwtable
define internal void @force_constant_size(%union.tree_node* %var) #0 !dbg !3842 {
entry:
  %var.addr = alloca %union.tree_node*, align 8
  %max_size = alloca i64, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !3843, metadata !DIExpression()), !dbg !3844
  call void @llvm.dbg.declare(metadata i64* %max_size, metadata !3845, metadata !DIExpression()), !dbg !3846
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3847
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !3847
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !3847
  %bf.load = load i64, i64* %1, align 8, !dbg !3847
  %bf.clear = and i64 %bf.load, 65535, !dbg !3847
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3847
  %cmp = icmp eq i32 %bf.cast, 32, !dbg !3847
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !3847

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 712, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3847
  br label %cond.end, !dbg !3847

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3847

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3847
  %2 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3848
  %common = bitcast %union.tree_node* %2 to %struct.tree_common*, !dbg !3848
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3848
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3848
  %call = call i64 @max_int_size_in_bytes(%union.tree_node* %3), !dbg !3849
  store i64 %call, i64* %max_size, align 8, !dbg !3850
  %4 = load i64, i64* %max_size, align 8, !dbg !3851
  %cmp1 = icmp sge i64 %4, 0, !dbg !3851
  br i1 %cmp1, label %cond.false3, label %cond.true2, !dbg !3851

cond.true2:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 716, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3851
  br label %cond.end4, !dbg !3851

cond.false3:                                      ; preds = %cond.end
  br label %cond.end4, !dbg !3851

cond.end4:                                        ; preds = %cond.false3, %cond.true2
  %cond5 = phi i32 [ 0, %cond.true2 ], [ 0, %cond.false3 ], !dbg !3851
  %5 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3852
  %decl_common = bitcast %union.tree_node* %5 to %struct.tree_decl_common*, !dbg !3852
  %size_unit = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 4, !dbg !3852
  %6 = load %union.tree_node*, %union.tree_node** %size_unit, align 8, !dbg !3852
  %common6 = bitcast %union.tree_node* %6 to %struct.tree_common*, !dbg !3852
  %type7 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common6, i32 0, i32 2, !dbg !3852
  %7 = load %union.tree_node*, %union.tree_node** %type7, align 8, !dbg !3852
  %8 = load i64, i64* %max_size, align 8, !dbg !3853
  %call8 = call %union.tree_node* @build_int_cst(%union.tree_node* %7, i64 %8), !dbg !3854
  %9 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3855
  %decl_common9 = bitcast %union.tree_node* %9 to %struct.tree_decl_common*, !dbg !3855
  %size_unit10 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common9, i32 0, i32 4, !dbg !3855
  store %union.tree_node* %call8, %union.tree_node** %size_unit10, align 8, !dbg !3856
  %10 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3857
  %decl_common11 = bitcast %union.tree_node* %10 to %struct.tree_decl_common*, !dbg !3857
  %size = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common11, i32 0, i32 1, !dbg !3857
  %11 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !3857
  %common12 = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !3857
  %type13 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common12, i32 0, i32 2, !dbg !3857
  %12 = load %union.tree_node*, %union.tree_node** %type13, align 8, !dbg !3857
  %13 = load i64, i64* %max_size, align 8, !dbg !3858
  %mul = mul nsw i64 %13, 8, !dbg !3859
  %call14 = call %union.tree_node* @build_int_cst(%union.tree_node* %12, i64 %mul), !dbg !3860
  %14 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3861
  %decl_common15 = bitcast %union.tree_node* %14 to %struct.tree_decl_common*, !dbg !3861
  %size16 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common15, i32 0, i32 1, !dbg !3861
  store %union.tree_node* %call14, %union.tree_node** %size16, align 8, !dbg !3862
  ret void, !dbg !3863
}

; Function Attrs: noinline nounwind uwtable
define internal void @omp_add_variable(%struct.gimplify_omp_ctx* %ctx, %union.tree_node* %decl, i32 %flags) #0 !dbg !3864 {
entry:
  %ctx.addr = alloca %struct.gimplify_omp_ctx*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  %flags.addr = alloca i32, align 4
  %n = alloca %struct.splay_tree_node_s*, align 8
  %nflags = alloca i32, align 4
  %t = alloca %union.tree_node*, align 8
  store %struct.gimplify_omp_ctx* %ctx, %struct.gimplify_omp_ctx** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimplify_omp_ctx** %ctx.addr, metadata !3867, metadata !DIExpression()), !dbg !3868
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !3869, metadata !DIExpression()), !dbg !3870
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !3871, metadata !DIExpression()), !dbg !3872
  call void @llvm.dbg.declare(metadata %struct.splay_tree_node_s** %n, metadata !3873, metadata !DIExpression()), !dbg !3874
  call void @llvm.dbg.declare(metadata i32* %nflags, metadata !3875, metadata !DIExpression()), !dbg !3876
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !3877, metadata !DIExpression()), !dbg !3878
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3879
  %1 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !3881
  %cmp = icmp eq %union.tree_node* %0, %1, !dbg !3882
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !3883

lor.lhs.false:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3884
  %common = bitcast %union.tree_node* %2 to %struct.tree_common*, !dbg !3884
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3884
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3884
  %4 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !3885
  %cmp1 = icmp eq %union.tree_node* %3, %4, !dbg !3886
  br i1 %cmp1, label %if.then, label %if.end, !dbg !3887

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %return, !dbg !3888

if.end:                                           ; preds = %lor.lhs.false
  %5 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3889
  %common2 = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !3889
  %type3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2, !dbg !3889
  %6 = load %union.tree_node*, %union.tree_node** %type3, align 8, !dbg !3889
  %base = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !3889
  %7 = bitcast %struct.tree_base* %base to i64*, !dbg !3889
  %bf.load = load i64, i64* %7, align 8, !dbg !3889
  %bf.lshr = lshr i64 %bf.load, 18, !dbg !3889
  %bf.clear = and i64 %bf.lshr, 1, !dbg !3889
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3889
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !3889
  br i1 %tobool, label %if.then12, label %lor.lhs.false4, !dbg !3891

lor.lhs.false4:                                   ; preds = %if.end
  %8 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3892
  %common5 = bitcast %union.tree_node* %8 to %struct.tree_common*, !dbg !3892
  %type6 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5, i32 0, i32 2, !dbg !3892
  %9 = load %union.tree_node*, %union.tree_node** %type6, align 8, !dbg !3892
  %type7 = bitcast %union.tree_node* %9 to %struct.tree_type*, !dbg !3892
  %needs_constructing_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type7, i32 0, i32 6, !dbg !3892
  %bf.load8 = load i32, i32* %needs_constructing_flag, align 4, !dbg !3892
  %bf.lshr9 = lshr i32 %bf.load8, 11, !dbg !3892
  %bf.clear10 = and i32 %bf.lshr9, 1, !dbg !3892
  %tobool11 = icmp ne i32 %bf.clear10, 0, !dbg !3892
  br i1 %tobool11, label %if.then12, label %if.end13, !dbg !3893

if.then12:                                        ; preds = %lor.lhs.false4, %if.end
  %10 = load i32, i32* %flags.addr, align 4, !dbg !3894
  %or = or i32 %10, 1, !dbg !3894
  store i32 %or, i32* %flags.addr, align 4, !dbg !3894
  br label %if.end13, !dbg !3895

if.end13:                                         ; preds = %if.then12, %lor.lhs.false4
  %11 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx.addr, align 8, !dbg !3896
  %variables = getelementptr inbounds %struct.gimplify_omp_ctx, %struct.gimplify_omp_ctx* %11, i32 0, i32 1, !dbg !3897
  %12 = load %struct.splay_tree_s*, %struct.splay_tree_s** %variables, align 8, !dbg !3897
  %13 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3898
  %14 = ptrtoint %union.tree_node* %13 to i64, !dbg !3899
  %call = call %struct.splay_tree_node_s* @splay_tree_lookup(%struct.splay_tree_s* %12, i64 %14), !dbg !3900
  store %struct.splay_tree_node_s* %call, %struct.splay_tree_node_s** %n, align 8, !dbg !3901
  %15 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %n, align 8, !dbg !3902
  %cmp14 = icmp ne %struct.splay_tree_node_s* %15, null, !dbg !3904
  br i1 %cmp14, label %if.then15, label %if.end32, !dbg !3905

if.then15:                                        ; preds = %if.end13
  %16 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %n, align 8, !dbg !3906
  %value = getelementptr inbounds %struct.splay_tree_node_s, %struct.splay_tree_node_s* %16, i32 0, i32 1, !dbg !3906
  %17 = load i64, i64* %value, align 8, !dbg !3906
  %and = and i64 %17, 252, !dbg !3906
  %18 = load i32, i32* %flags.addr, align 4, !dbg !3906
  %conv = zext i32 %18 to i64, !dbg !3906
  %and16 = and i64 %and, %conv, !dbg !3906
  %cmp17 = icmp eq i64 %and16, 0, !dbg !3906
  br i1 %cmp17, label %cond.false, label %cond.true, !dbg !3906

cond.true:                                        ; preds = %if.then15
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 5383, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3906
  br label %cond.end, !dbg !3906

cond.false:                                       ; preds = %if.then15
  br label %cond.end, !dbg !3906

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3906
  %19 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %n, align 8, !dbg !3908
  %value19 = getelementptr inbounds %struct.splay_tree_node_s, %struct.splay_tree_node_s* %19, i32 0, i32 1, !dbg !3909
  %20 = load i64, i64* %value19, align 8, !dbg !3909
  %21 = load i32, i32* %flags.addr, align 4, !dbg !3910
  %conv20 = zext i32 %21 to i64, !dbg !3910
  %or21 = or i64 %20, %conv20, !dbg !3911
  %conv22 = trunc i64 %or21 to i32, !dbg !3908
  store i32 %conv22, i32* %nflags, align 4, !dbg !3912
  %22 = load i32, i32* %nflags, align 4, !dbg !3913
  %and23 = and i32 %22, 252, !dbg !3913
  %cmp24 = icmp eq i32 %and23, 48, !dbg !3913
  br i1 %cmp24, label %cond.false27, label %cond.true26, !dbg !3913

cond.true26:                                      ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 5388, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3913
  br label %cond.end28, !dbg !3913

cond.false27:                                     ; preds = %cond.end
  br label %cond.end28, !dbg !3913

cond.end28:                                       ; preds = %cond.false27, %cond.true26
  %cond29 = phi i32 [ 0, %cond.true26 ], [ 0, %cond.false27 ], !dbg !3913
  %23 = load i32, i32* %nflags, align 4, !dbg !3914
  %conv30 = zext i32 %23 to i64, !dbg !3914
  %24 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %n, align 8, !dbg !3915
  %value31 = getelementptr inbounds %struct.splay_tree_node_s, %struct.splay_tree_node_s* %24, i32 0, i32 1, !dbg !3916
  store i64 %conv30, i64* %value31, align 8, !dbg !3917
  br label %return, !dbg !3918

if.end32:                                         ; preds = %if.end13
  %25 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3919
  %decl_common = bitcast %union.tree_node* %25 to %struct.tree_decl_common*, !dbg !3919
  %size = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 1, !dbg !3919
  %26 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !3919
  %tobool33 = icmp ne %union.tree_node* %26, null, !dbg !3919
  br i1 %tobool33, label %land.lhs.true, label %if.else94, !dbg !3921

land.lhs.true:                                    ; preds = %if.end32
  %27 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3922
  %decl_common34 = bitcast %union.tree_node* %27 to %struct.tree_decl_common*, !dbg !3922
  %size35 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common34, i32 0, i32 1, !dbg !3922
  %28 = load %union.tree_node*, %union.tree_node** %size35, align 8, !dbg !3922
  %base36 = bitcast %union.tree_node* %28 to %struct.tree_base*, !dbg !3922
  %29 = bitcast %struct.tree_base* %base36 to i64*, !dbg !3922
  %bf.load37 = load i64, i64* %29, align 8, !dbg !3922
  %bf.clear38 = and i64 %bf.load37, 65535, !dbg !3922
  %bf.cast39 = trunc i64 %bf.clear38 to i32, !dbg !3922
  %cmp40 = icmp ne i32 %bf.cast39, 23, !dbg !3923
  br i1 %cmp40, label %if.then42, label %if.else94, !dbg !3924

if.then42:                                        ; preds = %land.lhs.true
  %30 = load i32, i32* %flags.addr, align 4, !dbg !3925
  %and43 = and i32 %30, 128, !dbg !3928
  %tobool44 = icmp ne i32 %and43, 0, !dbg !3928
  br i1 %tobool44, label %if.end73, label %if.then45, !dbg !3929

if.then45:                                        ; preds = %if.then42
  %31 = load i32, i32* %flags.addr, align 4, !dbg !3930
  %and46 = and i32 %31, 8, !dbg !3932
  %tobool47 = icmp ne i32 %and46, 0, !dbg !3930
  %32 = zext i1 %tobool47 to i64, !dbg !3930
  %cond48 = select i1 %tobool47, i32 8, i32 16, !dbg !3930
  store i32 %cond48, i32* %nflags, align 4, !dbg !3933
  %33 = load i32, i32* %flags.addr, align 4, !dbg !3934
  %and49 = and i32 %33, 1, !dbg !3935
  %34 = load i32, i32* %nflags, align 4, !dbg !3936
  %or50 = or i32 %34, %and49, !dbg !3936
  store i32 %or50, i32* %nflags, align 4, !dbg !3936
  %35 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3937
  %call51 = call %union.tree_node* @decl_value_expr_lookup(%union.tree_node* %35), !dbg !3937
  store %union.tree_node* %call51, %union.tree_node** %t, align 8, !dbg !3938
  %36 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3939
  %base52 = bitcast %union.tree_node* %36 to %struct.tree_base*, !dbg !3939
  %37 = bitcast %struct.tree_base* %base52 to i64*, !dbg !3939
  %bf.load53 = load i64, i64* %37, align 8, !dbg !3939
  %bf.clear54 = and i64 %bf.load53, 65535, !dbg !3939
  %bf.cast55 = trunc i64 %bf.clear54 to i32, !dbg !3939
  %cmp56 = icmp eq i32 %bf.cast55, 47, !dbg !3939
  br i1 %cmp56, label %cond.false59, label %cond.true58, !dbg !3939

cond.true58:                                      ; preds = %if.then45
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 5407, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3939
  br label %cond.end60, !dbg !3939

cond.false59:                                     ; preds = %if.then45
  br label %cond.end60, !dbg !3939

cond.end60:                                       ; preds = %cond.false59, %cond.true58
  %cond61 = phi i32 [ 0, %cond.true58 ], [ 0, %cond.false59 ], !dbg !3939
  %38 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3940
  %exp = bitcast %union.tree_node* %38 to %struct.tree_exp*, !dbg !3940
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !3940
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !3940
  %39 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !3940
  store %union.tree_node* %39, %union.tree_node** %t, align 8, !dbg !3941
  %40 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3942
  %base62 = bitcast %union.tree_node* %40 to %struct.tree_base*, !dbg !3942
  %41 = bitcast %struct.tree_base* %base62 to i64*, !dbg !3942
  %bf.load63 = load i64, i64* %41, align 8, !dbg !3942
  %bf.clear64 = and i64 %bf.load63, 65535, !dbg !3942
  %bf.cast65 = trunc i64 %bf.clear64 to i32, !dbg !3942
  %idxprom = sext i32 %bf.cast65 to i64, !dbg !3942
  %arrayidx66 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !3942
  %42 = load i32, i32* %arrayidx66, align 4, !dbg !3942
  %cmp67 = icmp eq i32 %42, 3, !dbg !3942
  br i1 %cmp67, label %cond.false70, label %cond.true69, !dbg !3942

cond.true69:                                      ; preds = %cond.end60
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 5409, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3942
  br label %cond.end71, !dbg !3942

cond.false70:                                     ; preds = %cond.end60
  br label %cond.end71, !dbg !3942

cond.end71:                                       ; preds = %cond.false70, %cond.true69
  %cond72 = phi i32 [ 0, %cond.true69 ], [ 0, %cond.false70 ], !dbg !3942
  %43 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx.addr, align 8, !dbg !3943
  %44 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3944
  %45 = load i32, i32* %nflags, align 4, !dbg !3945
  call void @omp_add_variable(%struct.gimplify_omp_ctx* %43, %union.tree_node* %44, i32 %45), !dbg !3946
  br label %if.end73, !dbg !3947

if.end73:                                         ; preds = %cond.end71, %if.then42
  %46 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx.addr, align 8, !dbg !3948
  %47 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3949
  %decl_common74 = bitcast %union.tree_node* %47 to %struct.tree_decl_common*, !dbg !3949
  %size_unit = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common74, i32 0, i32 4, !dbg !3949
  %48 = load %union.tree_node*, %union.tree_node** %size_unit, align 8, !dbg !3949
  call void @omp_firstprivatize_variable(%struct.gimplify_omp_ctx* %46, %union.tree_node* %48), !dbg !3950
  %49 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx.addr, align 8, !dbg !3951
  %50 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3952
  %decl_common75 = bitcast %union.tree_node* %50 to %struct.tree_decl_common*, !dbg !3952
  %size76 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common75, i32 0, i32 1, !dbg !3952
  %51 = load %union.tree_node*, %union.tree_node** %size76, align 8, !dbg !3952
  call void @omp_firstprivatize_variable(%struct.gimplify_omp_ctx* %49, %union.tree_node* %51), !dbg !3953
  %52 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx.addr, align 8, !dbg !3954
  %53 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3955
  %common77 = bitcast %union.tree_node* %53 to %struct.tree_common*, !dbg !3955
  %type78 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common77, i32 0, i32 2, !dbg !3955
  %54 = load %union.tree_node*, %union.tree_node** %type78, align 8, !dbg !3955
  call void @omp_firstprivatize_type_sizes(%struct.gimplify_omp_ctx* %52, %union.tree_node* %54), !dbg !3956
  %55 = load i32, i32* %flags.addr, align 4, !dbg !3957
  %and79 = and i32 %55, 4, !dbg !3959
  %tobool80 = icmp ne i32 %and79, 0, !dbg !3959
  br i1 %tobool80, label %if.then81, label %if.else, !dbg !3960

if.then81:                                        ; preds = %if.end73
  %56 = load i32, i32* %flags.addr, align 4, !dbg !3961
  %and82 = and i32 %56, 3, !dbg !3962
  %or83 = or i32 264, %and82, !dbg !3963
  store i32 %or83, i32* %flags.addr, align 4, !dbg !3964
  br label %if.end93, !dbg !3965

if.else:                                          ; preds = %if.end73
  %57 = load i32, i32* %flags.addr, align 4, !dbg !3966
  %and84 = and i32 %57, 128, !dbg !3968
  %tobool85 = icmp ne i32 %and84, 0, !dbg !3968
  br i1 %tobool85, label %if.end92, label %if.then86, !dbg !3969

if.then86:                                        ; preds = %if.else
  %58 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx.addr, align 8, !dbg !3970
  %59 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3971
  %common87 = bitcast %union.tree_node* %59 to %struct.tree_common*, !dbg !3971
  %type88 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common87, i32 0, i32 2, !dbg !3971
  %60 = load %union.tree_node*, %union.tree_node** %type88, align 8, !dbg !3971
  %type89 = bitcast %union.tree_node* %60 to %struct.tree_type*, !dbg !3971
  %size_unit90 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type89, i32 0, i32 3, !dbg !3971
  %61 = load %union.tree_node*, %union.tree_node** %size_unit90, align 8, !dbg !3971
  %call91 = call zeroext i8 @omp_notice_variable(%struct.gimplify_omp_ctx* %58, %union.tree_node* %61, i8 zeroext 1), !dbg !3972
  br label %if.end92, !dbg !3972

if.end92:                                         ; preds = %if.then86, %if.else
  br label %if.end93

if.end93:                                         ; preds = %if.end92, %if.then81
  br label %if.end128, !dbg !3973

if.else94:                                        ; preds = %land.lhs.true, %if.end32
  %62 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 33, i32 10), align 8, !dbg !3974
  %63 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3976
  %call95 = call zeroext i8 %62(%union.tree_node* %63), !dbg !3977
  %tobool96 = icmp ne i8 %call95, 0, !dbg !3977
  br i1 %tobool96, label %if.then97, label %if.end127, !dbg !3978

if.then97:                                        ; preds = %if.else94
  %64 = load i32, i32* %flags.addr, align 4, !dbg !3979
  %and98 = and i32 %64, 128, !dbg !3979
  %cmp99 = icmp eq i32 %and98, 0, !dbg !3979
  br i1 %cmp99, label %cond.false102, label %cond.true101, !dbg !3979

cond.true101:                                     ; preds = %if.then97
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 5438, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3979
  br label %cond.end103, !dbg !3979

cond.false102:                                    ; preds = %if.then97
  br label %cond.end103, !dbg !3979

cond.end103:                                      ; preds = %cond.false102, %cond.true101
  %cond104 = phi i32 [ 0, %cond.true101 ], [ 0, %cond.false102 ], !dbg !3979
  %65 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx.addr, align 8, !dbg !3981
  %66 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3982
  %common105 = bitcast %union.tree_node* %66 to %struct.tree_common*, !dbg !3982
  %type106 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common105, i32 0, i32 2, !dbg !3982
  %67 = load %union.tree_node*, %union.tree_node** %type106, align 8, !dbg !3982
  call void @omp_firstprivatize_type_sizes(%struct.gimplify_omp_ctx* %65, %union.tree_node* %67), !dbg !3983
  %68 = load i32, i32* %flags.addr, align 4, !dbg !3984
  %and107 = and i32 %68, 4, !dbg !3986
  %cmp108 = icmp eq i32 %and107, 0, !dbg !3987
  br i1 %cmp108, label %if.then110, label %if.end126, !dbg !3988

if.then110:                                       ; preds = %cond.end103
  %69 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3989
  %common111 = bitcast %union.tree_node* %69 to %struct.tree_common*, !dbg !3989
  %type112 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common111, i32 0, i32 2, !dbg !3989
  %70 = load %union.tree_node*, %union.tree_node** %type112, align 8, !dbg !3989
  %common113 = bitcast %union.tree_node* %70 to %struct.tree_common*, !dbg !3989
  %type114 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common113, i32 0, i32 2, !dbg !3989
  %71 = load %union.tree_node*, %union.tree_node** %type114, align 8, !dbg !3989
  %type115 = bitcast %union.tree_node* %71 to %struct.tree_type*, !dbg !3989
  %size_unit116 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type115, i32 0, i32 3, !dbg !3989
  %72 = load %union.tree_node*, %union.tree_node** %size_unit116, align 8, !dbg !3989
  store %union.tree_node* %72, %union.tree_node** %t, align 8, !dbg !3991
  %73 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3992
  %base117 = bitcast %union.tree_node* %73 to %struct.tree_base*, !dbg !3992
  %74 = bitcast %struct.tree_base* %base117 to i64*, !dbg !3992
  %bf.load118 = load i64, i64* %74, align 8, !dbg !3992
  %bf.clear119 = and i64 %bf.load118, 65535, !dbg !3992
  %bf.cast120 = trunc i64 %bf.clear119 to i32, !dbg !3992
  %cmp121 = icmp ne i32 %bf.cast120, 23, !dbg !3994
  br i1 %cmp121, label %if.then123, label %if.end125, !dbg !3995

if.then123:                                       ; preds = %if.then110
  %75 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx.addr, align 8, !dbg !3996
  %76 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3997
  %call124 = call zeroext i8 @omp_notice_variable(%struct.gimplify_omp_ctx* %75, %union.tree_node* %76, i8 zeroext 1), !dbg !3998
  br label %if.end125, !dbg !3998

if.end125:                                        ; preds = %if.then123, %if.then110
  br label %if.end126, !dbg !3999

if.end126:                                        ; preds = %if.end125, %cond.end103
  br label %if.end127, !dbg !4000

if.end127:                                        ; preds = %if.end126, %if.else94
  br label %if.end128

if.end128:                                        ; preds = %if.end127, %if.end93
  %77 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx.addr, align 8, !dbg !4001
  %variables129 = getelementptr inbounds %struct.gimplify_omp_ctx, %struct.gimplify_omp_ctx* %77, i32 0, i32 1, !dbg !4002
  %78 = load %struct.splay_tree_s*, %struct.splay_tree_s** %variables129, align 8, !dbg !4002
  %79 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4003
  %80 = ptrtoint %union.tree_node* %79 to i64, !dbg !4004
  %81 = load i32, i32* %flags.addr, align 4, !dbg !4005
  %conv130 = zext i32 %81 to i64, !dbg !4005
  %call131 = call %struct.splay_tree_node_s* @splay_tree_insert(%struct.splay_tree_s* %78, i64 %80, i64 %conv130), !dbg !4006
  br label %return, !dbg !4007

return:                                           ; preds = %if.end128, %cond.end28, %if.then
  ret void, !dbg !4007
}

declare dso_local %struct.gimple_seq_d* @gimple_body(%union.tree_node*) #3

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @gimple_seq_first_stmt(%struct.gimple_seq_d* %s) #0 !dbg !4008 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  %n = alloca %struct.gimple_seq_node_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !4014, metadata !DIExpression()), !dbg !4015
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_node_d** %n, metadata !4016, metadata !DIExpression()), !dbg !4017
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !4018
  %call = call %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %0), !dbg !4019
  store %struct.gimple_seq_node_d* %call, %struct.gimple_seq_node_d** %n, align 8, !dbg !4017
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %n, align 8, !dbg !4020
  %tobool = icmp ne %struct.gimple_seq_node_d* %1, null, !dbg !4021
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4021

cond.true:                                        ; preds = %entry
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %n, align 8, !dbg !4022
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %2, i32 0, i32 0, !dbg !4023
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4023
  br label %cond.end, !dbg !4021

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4021

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.gimple_statement_d* [ %3, %cond.true ], [ null, %cond.false ], !dbg !4021
  ret %union.gimple_statement_d* %cond, !dbg !4024
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @annotate_all_with_location(%struct.gimple_seq_d* %stmt_p, i32 %location) #0 !dbg !4025 {
entry:
  %stmt_p.addr = alloca %struct.gimple_seq_d*, align 8
  %location.addr = alloca i32, align 4
  %i = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %gs = alloca %union.gimple_statement_d*, align 8
  store %struct.gimple_seq_d* %stmt_p, %struct.gimple_seq_d** %stmt_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %stmt_p.addr, metadata !4028, metadata !DIExpression()), !dbg !4029
  store i32 %location, i32* %location.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %location.addr, metadata !4030, metadata !DIExpression()), !dbg !4031
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !4032, metadata !DIExpression()), !dbg !4039
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmt_p.addr, align 8, !dbg !4040
  %call = call zeroext i8 @gimple_seq_empty_p(%struct.gimple_seq_d* %0), !dbg !4042
  %tobool = icmp ne i8 %call, 0, !dbg !4042
  br i1 %tobool, label %if.then, label %if.end, !dbg !4043

if.then:                                          ; preds = %entry
  br label %for.end, !dbg !4044

if.end:                                           ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmt_p.addr, align 8, !dbg !4045
  call void @gsi_start(%struct.gimple_stmt_iterator* sret %tmp, %struct.gimple_seq_d* %1), !dbg !4047
  %2 = bitcast %struct.gimple_stmt_iterator* %i to i8*, !dbg !4047
  %3 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4047
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2, i8* align 8 %3, i64 24, i1 false), !dbg !4047
  br label %for.cond, !dbg !4048

for.cond:                                         ; preds = %for.inc, %if.end
  %call1 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i), !dbg !4049
  %tobool2 = icmp ne i8 %call1, 0, !dbg !4051
  %lnot = xor i1 %tobool2, true, !dbg !4051
  br i1 %lnot, label %for.body, label %for.end, !dbg !4052

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs, metadata !4053, metadata !DIExpression()), !dbg !4055
  %call3 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i), !dbg !4056
  store %union.gimple_statement_d* %call3, %union.gimple_statement_d** %gs, align 8, !dbg !4055
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs, align 8, !dbg !4057
  %5 = load i32, i32* %location.addr, align 4, !dbg !4058
  call void @annotate_one_with_location(%union.gimple_statement_d* %4, i32 %5), !dbg !4059
  br label %for.inc, !dbg !4060

for.inc:                                          ; preds = %for.body
  call void @gsi_next(%struct.gimple_stmt_iterator* %i), !dbg !4061
  br label %for.cond, !dbg !4062, !llvm.loop !4063

for.end:                                          ; preds = %if.then, %for.cond
  ret void, !dbg !4065
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_seq_empty_p(%struct.gimple_seq_d* %s) #0 !dbg !4066 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !4069, metadata !DIExpression()), !dbg !4070
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !4071
  %cmp = icmp eq %struct.gimple_seq_d* %0, null, !dbg !4072
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !4073

lor.rhs:                                          ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !4074
  %first = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 0, !dbg !4075
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %first, align 8, !dbg !4075
  %cmp1 = icmp eq %struct.gimple_seq_node_d* %2, null, !dbg !4076
  br label %lor.end, !dbg !4073

lor.end:                                          ; preds = %lor.rhs, %entry
  %3 = phi i1 [ true, %entry ], [ %cmp1, %lor.rhs ]
  %lor.ext = zext i1 %3 to i32, !dbg !4073
  %conv = trunc i32 %lor.ext to i8, !dbg !4071
  ret i8 %conv, !dbg !4077
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_start(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.gimple_seq_d* %seq) #0 !dbg !4078 {
entry:
  %seq.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %seq, %struct.gimple_seq_d** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq.addr, metadata !4081, metadata !DIExpression()), !dbg !4082
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !4083, metadata !DIExpression()), !dbg !4084
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !4085
  %call = call %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %0), !dbg !4086
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !4087
  store %struct.gimple_seq_node_d* %call, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !4088
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !4089
  %seq1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !4090
  store %struct.gimple_seq_d* %1, %struct.gimple_seq_d** %seq1, align 8, !dbg !4091
  %ptr2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !4092
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr2, align 8, !dbg !4092
  %tobool = icmp ne %struct.gimple_seq_node_d* %2, null, !dbg !4093
  br i1 %tobool, label %land.lhs.true, label %cond.false, !dbg !4094

land.lhs.true:                                    ; preds = %entry
  %ptr3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !4095
  %3 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr3, align 8, !dbg !4095
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %3, i32 0, i32 0, !dbg !4096
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4096
  %tobool4 = icmp ne %union.gimple_statement_d* %4, null, !dbg !4097
  br i1 %tobool4, label %cond.true, label %cond.false, !dbg !4098

cond.true:                                        ; preds = %land.lhs.true
  %ptr5 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !4099
  %5 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr5, align 8, !dbg !4099
  %stmt6 = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %5, i32 0, i32 0, !dbg !4100
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt6, align 8, !dbg !4100
  %call7 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %6), !dbg !4101
  br label %cond.end, !dbg !4098

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !4098

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.basic_block_def* [ %call7, %cond.true ], [ null, %cond.false ], !dbg !4098
  %bb = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !4102
  store %struct.basic_block_def* %cond, %struct.basic_block_def** %bb, align 8, !dbg !4103
  ret void, !dbg !4104
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !4105 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !4108, metadata !DIExpression()), !dbg !4109
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !4110
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !4110
  %cmp = icmp eq %struct.gimple_seq_node_d* %0, null, !dbg !4111
  %conv = zext i1 %cmp to i32, !dbg !4111
  %conv1 = trunc i32 %conv to i8, !dbg !4112
  ret i8 %conv1, !dbg !4113
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !4114 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !4117, metadata !DIExpression()), !dbg !4118
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !4119
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !4119
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %0, i32 0, i32 0, !dbg !4120
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4120
  ret %union.gimple_statement_d* %1, !dbg !4121
}

; Function Attrs: noinline nounwind uwtable
define internal void @annotate_one_with_location(%union.gimple_statement_d* %gs, i32 %location) #0 !dbg !4122 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %location.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4125, metadata !DIExpression()), !dbg !4126
  store i32 %location, i32* %location.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %location.addr, metadata !4127, metadata !DIExpression()), !dbg !4128
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4129
  %call = call zeroext i8 @gimple_has_location(%union.gimple_statement_d* %0), !dbg !4131
  %tobool = icmp ne i8 %call, 0, !dbg !4131
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !4132

land.lhs.true:                                    ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4133
  %call1 = call zeroext i8 @gimple_do_not_emit_location_p(%union.gimple_statement_d* %1), !dbg !4134
  %tobool2 = icmp ne i8 %call1, 0, !dbg !4134
  br i1 %tobool2, label %if.end, label %land.lhs.true3, !dbg !4135

land.lhs.true3:                                   ; preds = %land.lhs.true
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4136
  %call4 = call zeroext i8 @should_carry_location_p(%union.gimple_statement_d* %2), !dbg !4137
  %conv = zext i8 %call4 to i32, !dbg !4137
  %tobool5 = icmp ne i32 %conv, 0, !dbg !4137
  br i1 %tobool5, label %if.then, label %if.end, !dbg !4138

if.then:                                          ; preds = %land.lhs.true3
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4139
  %4 = load i32, i32* %location.addr, align 4, !dbg !4140
  call void @gimple_set_location(%union.gimple_statement_d* %3, i32 %4), !dbg !4141
  br label %if.end, !dbg !4141

if.end:                                           ; preds = %if.then, %land.lhs.true3, %land.lhs.true, %entry
  ret void, !dbg !4142
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_next(%struct.gimple_stmt_iterator* %i) #0 !dbg !4143 {
entry:
  %i.addr = alloca %struct.gimple_stmt_iterator*, align 8
  store %struct.gimple_stmt_iterator* %i, %struct.gimple_stmt_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %i.addr, metadata !4147, metadata !DIExpression()), !dbg !4148
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !4149
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %0, i32 0, i32 0, !dbg !4150
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !4150
  %next = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %1, i32 0, i32 2, !dbg !4151
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %next, align 8, !dbg !4151
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !4152
  %ptr1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %3, i32 0, i32 0, !dbg !4153
  store %struct.gimple_seq_node_d* %2, %struct.gimple_seq_node_d** %ptr1, align 8, !dbg !4154
  ret void, !dbg !4155
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @unshare_expr(%union.tree_node* %expr) #0 !dbg !4156 {
entry:
  %expr.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !4159, metadata !DIExpression()), !dbg !4160
  %call = call %union.tree_node* @walk_tree_1(%union.tree_node** %expr.addr, %union.tree_node* (%union.tree_node**, i32*, i8*)* @mostly_copy_tree_r, i8* null, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !4161
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4162
  ret %union.tree_node* %0, !dbg !4163
}

declare dso_local %union.tree_node* @walk_tree_1(%union.tree_node**, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)*) #3

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @mostly_copy_tree_r(%union.tree_node** %tp, i32* %walk_subtrees, i8* %data) #0 !dbg !4164 {
entry:
  %tp.addr = alloca %union.tree_node**, align 8
  %walk_subtrees.addr = alloca i32*, align 8
  %data.addr = alloca i8*, align 8
  %code = alloca i32, align 4
  store %union.tree_node** %tp, %union.tree_node*** %tp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %tp.addr, metadata !4168, metadata !DIExpression()), !dbg !4169
  store i32* %walk_subtrees, i32** %walk_subtrees.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %walk_subtrees.addr, metadata !4170, metadata !DIExpression()), !dbg !4171
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !4172, metadata !DIExpression()), !dbg !4173
  call void @llvm.dbg.declare(metadata i32* %code, metadata !4174, metadata !DIExpression()), !dbg !4175
  %0 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4176
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !4176
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !4176
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !4176
  %bf.load = load i64, i64* %2, align 8, !dbg !4176
  %bf.clear = and i64 %bf.load, 65535, !dbg !4176
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4176
  store i32 %bf.cast, i32* %code, align 4, !dbg !4175
  %3 = load i32, i32* %code, align 4, !dbg !4177
  %idxprom = sext i32 %3 to i64, !dbg !4177
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !4177
  %4 = load i32, i32* %arrayidx, align 4, !dbg !4177
  %cmp = icmp eq i32 %4, 2, !dbg !4179
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !4180

lor.lhs.false:                                    ; preds = %entry
  %5 = load i32, i32* %code, align 4, !dbg !4181
  %idxprom1 = sext i32 %5 to i64, !dbg !4181
  %arrayidx2 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom1, !dbg !4181
  %6 = load i32, i32* %arrayidx2, align 4, !dbg !4181
  %cmp3 = icmp eq i32 %6, 3, !dbg !4182
  br i1 %cmp3, label %if.then, label %lor.lhs.false4, !dbg !4183

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %7 = load i32, i32* %code, align 4, !dbg !4184
  %idxprom5 = sext i32 %7 to i64, !dbg !4184
  %arrayidx6 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom5, !dbg !4184
  %8 = load i32, i32* %arrayidx6, align 4, !dbg !4184
  %cmp7 = icmp eq i32 %8, 1, !dbg !4185
  br i1 %cmp7, label %if.then, label %lor.lhs.false8, !dbg !4186

lor.lhs.false8:                                   ; preds = %lor.lhs.false4
  %9 = load i32, i32* %code, align 4, !dbg !4187
  %cmp9 = icmp eq i32 %9, 120, !dbg !4188
  br i1 %cmp9, label %if.then, label %lor.lhs.false10, !dbg !4189

lor.lhs.false10:                                  ; preds = %lor.lhs.false8
  %10 = load i32, i32* %code, align 4, !dbg !4190
  %cmp11 = icmp eq i32 %10, 55, !dbg !4191
  br i1 %cmp11, label %if.then, label %lor.lhs.false12, !dbg !4192

lor.lhs.false12:                                  ; preds = %lor.lhs.false10
  %11 = load i32, i32* %code, align 4, !dbg !4193
  %cmp13 = icmp eq i32 %11, 4, !dbg !4194
  br i1 %cmp13, label %if.then, label %if.else, !dbg !4195

if.then:                                          ; preds = %lor.lhs.false12, %lor.lhs.false10, %lor.lhs.false8, %lor.lhs.false4, %lor.lhs.false, %entry
  %12 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !4196
  store i32 0, i32* %12, align 4, !dbg !4197
  br label %if.end, !dbg !4198

if.else:                                          ; preds = %lor.lhs.false12
  %13 = load i32, i32* %code, align 4, !dbg !4199
  %cmp14 = icmp ne i32 %13, 58, !dbg !4199
  br i1 %cmp14, label %cond.false, label %cond.true, !dbg !4199

cond.true:                                        ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 870, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4199
  br label %cond.end, !dbg !4199

cond.false:                                       ; preds = %if.else
  br label %cond.end, !dbg !4199

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4199
  %14 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4201
  %15 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !4202
  %16 = load i8*, i8** %data.addr, align 8, !dbg !4203
  %call = call %union.tree_node* @copy_tree_r(%union.tree_node** %14, i32* %15, i8* %16), !dbg !4204
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then
  ret %union.tree_node* null, !dbg !4205
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @voidify_wrapper_expr(%union.tree_node* %wrapper, %union.tree_node* %temp) #0 !dbg !4206 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %wrapper.addr = alloca %union.tree_node*, align 8
  %temp.addr = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  %p = alloca %union.tree_node**, align 8
  %i = alloca %struct.tree_stmt_iterator, align 8
  store %union.tree_node* %wrapper, %union.tree_node** %wrapper.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %wrapper.addr, metadata !4209, metadata !DIExpression()), !dbg !4210
  store %union.tree_node* %temp, %union.tree_node** %temp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %temp.addr, metadata !4211, metadata !DIExpression()), !dbg !4212
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !4213, metadata !DIExpression()), !dbg !4214
  %0 = load %union.tree_node*, %union.tree_node** %wrapper.addr, align 8, !dbg !4215
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !4215
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4215
  %1 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !4215
  store %union.tree_node* %1, %union.tree_node** %type, align 8, !dbg !4214
  %2 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4216
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !4216
  br i1 %tobool, label %land.lhs.true, label %if.end102, !dbg !4218

land.lhs.true:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4219
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !4219
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !4219
  %bf.load = load i64, i64* %4, align 8, !dbg !4219
  %bf.clear = and i64 %bf.load, 65535, !dbg !4219
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4219
  %cmp = icmp eq i32 %bf.cast, 19, !dbg !4219
  br i1 %cmp, label %if.end102, label %if.then, !dbg !4220

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %union.tree_node*** %p, metadata !4221, metadata !DIExpression()), !dbg !4223
  store %union.tree_node** %wrapper.addr, %union.tree_node*** %p, align 8, !dbg !4224
  br label %for.cond, !dbg !4226

for.cond:                                         ; preds = %sw.epilog, %if.then
  %5 = load %union.tree_node**, %union.tree_node*** %p, align 8, !dbg !4227
  %tobool2 = icmp ne %union.tree_node** %5, null, !dbg !4227
  br i1 %tobool2, label %land.rhs, label %land.end, !dbg !4229

land.rhs:                                         ; preds = %for.cond
  %6 = load %union.tree_node**, %union.tree_node*** %p, align 8, !dbg !4230
  %7 = load %union.tree_node*, %union.tree_node** %6, align 8, !dbg !4231
  %tobool3 = icmp ne %union.tree_node* %7, null, !dbg !4229
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %8 = phi i1 [ false, %for.cond ], [ %tobool3, %land.rhs ], !dbg !4232
  br i1 %8, label %for.body, label %for.end51, !dbg !4233

for.body:                                         ; preds = %land.end
  %9 = load %union.tree_node**, %union.tree_node*** %p, align 8, !dbg !4234
  %10 = load %union.tree_node*, %union.tree_node** %9, align 8, !dbg !4234
  %base4 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !4234
  %11 = bitcast %struct.tree_base* %base4 to i64*, !dbg !4234
  %bf.load5 = load i64, i64* %11, align 8, !dbg !4234
  %bf.clear6 = and i64 %bf.load5, 65535, !dbg !4234
  %bf.cast7 = trunc i64 %bf.clear6 to i32, !dbg !4234
  switch i32 %bf.cast7, label %sw.default [
    i32 58, label %sw.bb
    i32 61, label %sw.bb13
    i32 131, label %sw.bb13
    i32 130, label %sw.bb13
    i32 147, label %sw.bb23
    i32 52, label %sw.bb33
  ], !dbg !4236

sw.bb:                                            ; preds = %for.body
  %12 = load %union.tree_node**, %union.tree_node*** %p, align 8, !dbg !4237
  %13 = load %union.tree_node*, %union.tree_node** %12, align 8, !dbg !4237
  %base8 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !4237
  %14 = bitcast %struct.tree_base* %base8 to i64*, !dbg !4237
  %bf.load9 = load i64, i64* %14, align 8, !dbg !4239
  %bf.clear10 = and i64 %bf.load9, -65537, !dbg !4239
  %bf.set = or i64 %bf.clear10, 65536, !dbg !4239
  store i64 %bf.set, i64* %14, align 8, !dbg !4239
  %15 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !4240
  %16 = load %union.tree_node**, %union.tree_node*** %p, align 8, !dbg !4241
  %17 = load %union.tree_node*, %union.tree_node** %16, align 8, !dbg !4241
  %common11 = bitcast %union.tree_node* %17 to %struct.tree_common*, !dbg !4241
  %type12 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common11, i32 0, i32 2, !dbg !4241
  store %union.tree_node* %15, %union.tree_node** %type12, align 8, !dbg !4242
  %18 = load %union.tree_node**, %union.tree_node*** %p, align 8, !dbg !4243
  %19 = load %union.tree_node*, %union.tree_node** %18, align 8, !dbg !4243
  %exp = bitcast %union.tree_node* %19 to %struct.tree_exp*, !dbg !4243
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !4243
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !4243
  store %union.tree_node** %arrayidx, %union.tree_node*** %p, align 8, !dbg !4244
  br label %sw.epilog, !dbg !4245

sw.bb13:                                          ; preds = %for.body, %for.body, %for.body
  %20 = load %union.tree_node**, %union.tree_node*** %p, align 8, !dbg !4246
  %21 = load %union.tree_node*, %union.tree_node** %20, align 8, !dbg !4246
  %base14 = bitcast %union.tree_node* %21 to %struct.tree_base*, !dbg !4246
  %22 = bitcast %struct.tree_base* %base14 to i64*, !dbg !4246
  %bf.load15 = load i64, i64* %22, align 8, !dbg !4247
  %bf.clear16 = and i64 %bf.load15, -65537, !dbg !4247
  %bf.set17 = or i64 %bf.clear16, 65536, !dbg !4247
  store i64 %bf.set17, i64* %22, align 8, !dbg !4247
  %23 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !4248
  %24 = load %union.tree_node**, %union.tree_node*** %p, align 8, !dbg !4249
  %25 = load %union.tree_node*, %union.tree_node** %24, align 8, !dbg !4249
  %common18 = bitcast %union.tree_node* %25 to %struct.tree_common*, !dbg !4249
  %type19 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common18, i32 0, i32 2, !dbg !4249
  store %union.tree_node* %23, %union.tree_node** %type19, align 8, !dbg !4250
  %26 = load %union.tree_node**, %union.tree_node*** %p, align 8, !dbg !4251
  %27 = load %union.tree_node*, %union.tree_node** %26, align 8, !dbg !4251
  %exp20 = bitcast %union.tree_node* %27 to %struct.tree_exp*, !dbg !4251
  %operands21 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp20, i32 0, i32 3, !dbg !4251
  %arrayidx22 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands21, i64 0, i64 0, !dbg !4251
  store %union.tree_node** %arrayidx22, %union.tree_node*** %p, align 8, !dbg !4252
  br label %sw.epilog, !dbg !4253

sw.bb23:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata %struct.tree_stmt_iterator* %i, metadata !4254, metadata !DIExpression()), !dbg !4256
  %28 = load %union.tree_node**, %union.tree_node*** %p, align 8, !dbg !4257
  %29 = load %union.tree_node*, %union.tree_node** %28, align 8, !dbg !4258
  %call = call { %struct.tree_statement_list_node*, %union.tree_node* } @tsi_last(%union.tree_node* %29), !dbg !4259
  %30 = bitcast %struct.tree_stmt_iterator* %i to { %struct.tree_statement_list_node*, %union.tree_node* }*, !dbg !4259
  %31 = getelementptr inbounds { %struct.tree_statement_list_node*, %union.tree_node* }, { %struct.tree_statement_list_node*, %union.tree_node* }* %30, i32 0, i32 0, !dbg !4259
  %32 = extractvalue { %struct.tree_statement_list_node*, %union.tree_node* } %call, 0, !dbg !4259
  store %struct.tree_statement_list_node* %32, %struct.tree_statement_list_node** %31, align 8, !dbg !4259
  %33 = getelementptr inbounds { %struct.tree_statement_list_node*, %union.tree_node* }, { %struct.tree_statement_list_node*, %union.tree_node* }* %30, i32 0, i32 1, !dbg !4259
  %34 = extractvalue { %struct.tree_statement_list_node*, %union.tree_node* } %call, 1, !dbg !4259
  store %union.tree_node* %34, %union.tree_node** %33, align 8, !dbg !4259
  %35 = load %union.tree_node**, %union.tree_node*** %p, align 8, !dbg !4260
  %36 = load %union.tree_node*, %union.tree_node** %35, align 8, !dbg !4260
  %base24 = bitcast %union.tree_node* %36 to %struct.tree_base*, !dbg !4260
  %37 = bitcast %struct.tree_base* %base24 to i64*, !dbg !4260
  %bf.load25 = load i64, i64* %37, align 8, !dbg !4261
  %bf.clear26 = and i64 %bf.load25, -65537, !dbg !4261
  %bf.set27 = or i64 %bf.clear26, 65536, !dbg !4261
  store i64 %bf.set27, i64* %37, align 8, !dbg !4261
  %38 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !4262
  %39 = load %union.tree_node**, %union.tree_node*** %p, align 8, !dbg !4263
  %40 = load %union.tree_node*, %union.tree_node** %39, align 8, !dbg !4263
  %common28 = bitcast %union.tree_node* %40 to %struct.tree_common*, !dbg !4263
  %type29 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common28, i32 0, i32 2, !dbg !4263
  store %union.tree_node* %38, %union.tree_node** %type29, align 8, !dbg !4264
  %41 = bitcast %struct.tree_stmt_iterator* %i to { %struct.tree_statement_list_node*, %union.tree_node* }*, !dbg !4265
  %42 = getelementptr inbounds { %struct.tree_statement_list_node*, %union.tree_node* }, { %struct.tree_statement_list_node*, %union.tree_node* }* %41, i32 0, i32 0, !dbg !4265
  %43 = load %struct.tree_statement_list_node*, %struct.tree_statement_list_node** %42, align 8, !dbg !4265
  %44 = getelementptr inbounds { %struct.tree_statement_list_node*, %union.tree_node* }, { %struct.tree_statement_list_node*, %union.tree_node* }* %41, i32 0, i32 1, !dbg !4265
  %45 = load %union.tree_node*, %union.tree_node** %44, align 8, !dbg !4265
  %call30 = call zeroext i8 @tsi_end_p(%struct.tree_statement_list_node* %43, %union.tree_node* %45), !dbg !4265
  %conv = zext i8 %call30 to i32, !dbg !4265
  %tobool31 = icmp ne i32 %conv, 0, !dbg !4265
  br i1 %tobool31, label %cond.true, label %cond.false, !dbg !4265

cond.true:                                        ; preds = %sw.bb23
  br label %cond.end, !dbg !4265

cond.false:                                       ; preds = %sw.bb23
  %46 = bitcast %struct.tree_stmt_iterator* %i to { %struct.tree_statement_list_node*, %union.tree_node* }*, !dbg !4266
  %47 = getelementptr inbounds { %struct.tree_statement_list_node*, %union.tree_node* }, { %struct.tree_statement_list_node*, %union.tree_node* }* %46, i32 0, i32 0, !dbg !4266
  %48 = load %struct.tree_statement_list_node*, %struct.tree_statement_list_node** %47, align 8, !dbg !4266
  %49 = getelementptr inbounds { %struct.tree_statement_list_node*, %union.tree_node* }, { %struct.tree_statement_list_node*, %union.tree_node* }* %46, i32 0, i32 1, !dbg !4266
  %50 = load %union.tree_node*, %union.tree_node** %49, align 8, !dbg !4266
  %call32 = call %union.tree_node** @tsi_stmt_ptr(%struct.tree_statement_list_node* %48, %union.tree_node* %50), !dbg !4266
  br label %cond.end, !dbg !4265

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node** [ null, %cond.true ], [ %call32, %cond.false ], !dbg !4265
  store %union.tree_node** %cond, %union.tree_node*** %p, align 8, !dbg !4267
  br label %sw.epilog, !dbg !4268

sw.bb33:                                          ; preds = %for.body
  br label %for.cond34, !dbg !4269

for.cond34:                                       ; preds = %for.inc, %sw.bb33
  %51 = load %union.tree_node**, %union.tree_node*** %p, align 8, !dbg !4270
  %52 = load %union.tree_node*, %union.tree_node** %51, align 8, !dbg !4270
  %base35 = bitcast %union.tree_node* %52 to %struct.tree_base*, !dbg !4270
  %53 = bitcast %struct.tree_base* %base35 to i64*, !dbg !4270
  %bf.load36 = load i64, i64* %53, align 8, !dbg !4270
  %bf.clear37 = and i64 %bf.load36, 65535, !dbg !4270
  %bf.cast38 = trunc i64 %bf.clear37 to i32, !dbg !4270
  %cmp39 = icmp eq i32 %bf.cast38, 52, !dbg !4273
  br i1 %cmp39, label %for.body41, label %for.end, !dbg !4274

for.body41:                                       ; preds = %for.cond34
  %54 = load %union.tree_node**, %union.tree_node*** %p, align 8, !dbg !4275
  %55 = load %union.tree_node*, %union.tree_node** %54, align 8, !dbg !4275
  %base42 = bitcast %union.tree_node* %55 to %struct.tree_base*, !dbg !4275
  %56 = bitcast %struct.tree_base* %base42 to i64*, !dbg !4275
  %bf.load43 = load i64, i64* %56, align 8, !dbg !4277
  %bf.clear44 = and i64 %bf.load43, -65537, !dbg !4277
  %bf.set45 = or i64 %bf.clear44, 65536, !dbg !4277
  store i64 %bf.set45, i64* %56, align 8, !dbg !4277
  %57 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !4278
  %58 = load %union.tree_node**, %union.tree_node*** %p, align 8, !dbg !4279
  %59 = load %union.tree_node*, %union.tree_node** %58, align 8, !dbg !4279
  %common46 = bitcast %union.tree_node* %59 to %struct.tree_common*, !dbg !4279
  %type47 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common46, i32 0, i32 2, !dbg !4279
  store %union.tree_node* %57, %union.tree_node** %type47, align 8, !dbg !4280
  br label %for.inc, !dbg !4281

for.inc:                                          ; preds = %for.body41
  %60 = load %union.tree_node**, %union.tree_node*** %p, align 8, !dbg !4282
  %61 = load %union.tree_node*, %union.tree_node** %60, align 8, !dbg !4282
  %exp48 = bitcast %union.tree_node* %61 to %struct.tree_exp*, !dbg !4282
  %operands49 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp48, i32 0, i32 3, !dbg !4282
  %arrayidx50 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands49, i64 0, i64 1, !dbg !4282
  store %union.tree_node** %arrayidx50, %union.tree_node*** %p, align 8, !dbg !4283
  br label %for.cond34, !dbg !4284, !llvm.loop !4285

for.end:                                          ; preds = %for.cond34
  br label %sw.epilog, !dbg !4287

sw.default:                                       ; preds = %for.body
  br label %out, !dbg !4288

sw.epilog:                                        ; preds = %for.end, %cond.end, %sw.bb13, %sw.bb
  br label %for.cond, !dbg !4289, !llvm.loop !4290

for.end51:                                        ; preds = %land.end
  br label %out, !dbg !4291

out:                                              ; preds = %for.end51, %sw.default
  call void @llvm.dbg.label(metadata !4292), !dbg !4293
  %62 = load %union.tree_node**, %union.tree_node*** %p, align 8, !dbg !4294
  %cmp52 = icmp eq %union.tree_node** %62, null, !dbg !4296
  br i1 %cmp52, label %if.then75, label %lor.lhs.false, !dbg !4297

lor.lhs.false:                                    ; preds = %out
  %63 = load %union.tree_node**, %union.tree_node*** %p, align 8, !dbg !4298
  %64 = load %union.tree_node*, %union.tree_node** %63, align 8, !dbg !4298
  %base54 = bitcast %union.tree_node* %64 to %struct.tree_base*, !dbg !4298
  %65 = bitcast %struct.tree_base* %base54 to i64*, !dbg !4298
  %bf.load55 = load i64, i64* %65, align 8, !dbg !4298
  %bf.clear56 = and i64 %bf.load55, 65535, !dbg !4298
  %bf.cast57 = trunc i64 %bf.clear56 to i32, !dbg !4298
  %cmp58 = icmp eq i32 %bf.cast57, 116, !dbg !4298
  br i1 %cmp58, label %land.lhs.true60, label %if.else, !dbg !4298

land.lhs.true60:                                  ; preds = %lor.lhs.false
  %66 = load %union.tree_node**, %union.tree_node*** %p, align 8, !dbg !4298
  %67 = load %union.tree_node*, %union.tree_node** %66, align 8, !dbg !4298
  %common61 = bitcast %union.tree_node* %67 to %struct.tree_common*, !dbg !4298
  %type62 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common61, i32 0, i32 2, !dbg !4298
  %68 = load %union.tree_node*, %union.tree_node** %type62, align 8, !dbg !4298
  %base63 = bitcast %union.tree_node* %68 to %struct.tree_base*, !dbg !4298
  %69 = bitcast %struct.tree_base* %base63 to i64*, !dbg !4298
  %bf.load64 = load i64, i64* %69, align 8, !dbg !4298
  %bf.clear65 = and i64 %bf.load64, 65535, !dbg !4298
  %bf.cast66 = trunc i64 %bf.clear65 to i32, !dbg !4298
  %cmp67 = icmp eq i32 %bf.cast66, 19, !dbg !4298
  br i1 %cmp67, label %land.lhs.true69, label %if.else, !dbg !4298

land.lhs.true69:                                  ; preds = %land.lhs.true60
  %70 = load %union.tree_node**, %union.tree_node*** %p, align 8, !dbg !4298
  %71 = load %union.tree_node*, %union.tree_node** %70, align 8, !dbg !4298
  %exp70 = bitcast %union.tree_node* %71 to %struct.tree_exp*, !dbg !4298
  %operands71 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp70, i32 0, i32 3, !dbg !4298
  %arrayidx72 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands71, i64 0, i64 0, !dbg !4298
  %72 = load %union.tree_node*, %union.tree_node** %arrayidx72, align 8, !dbg !4298
  %call73 = call i32 @integer_zerop(%union.tree_node* %72), !dbg !4298
  %tobool74 = icmp ne i32 %call73, 0, !dbg !4298
  br i1 %tobool74, label %if.then75, label %if.else, !dbg !4299

if.then75:                                        ; preds = %land.lhs.true69, %out
  store %union.tree_node* null, %union.tree_node** %temp.addr, align 8, !dbg !4300
  br label %if.end101, !dbg !4301

if.else:                                          ; preds = %land.lhs.true69, %land.lhs.true60, %lor.lhs.false
  %73 = load %union.tree_node*, %union.tree_node** %temp.addr, align 8, !dbg !4302
  %tobool76 = icmp ne %union.tree_node* %73, null, !dbg !4302
  br i1 %tobool76, label %if.then77, label %if.else98, !dbg !4304

if.then77:                                        ; preds = %if.else
  %74 = load %union.tree_node*, %union.tree_node** %temp.addr, align 8, !dbg !4305
  %base78 = bitcast %union.tree_node* %74 to %struct.tree_base*, !dbg !4305
  %75 = bitcast %struct.tree_base* %base78 to i64*, !dbg !4305
  %bf.load79 = load i64, i64* %75, align 8, !dbg !4305
  %bf.clear80 = and i64 %bf.load79, 65535, !dbg !4305
  %bf.cast81 = trunc i64 %bf.clear80 to i32, !dbg !4305
  %cmp82 = icmp eq i32 %bf.cast81, 54, !dbg !4305
  br i1 %cmp82, label %cond.false92, label %lor.lhs.false84, !dbg !4305

lor.lhs.false84:                                  ; preds = %if.then77
  %76 = load %union.tree_node*, %union.tree_node** %temp.addr, align 8, !dbg !4305
  %base85 = bitcast %union.tree_node* %76 to %struct.tree_base*, !dbg !4305
  %77 = bitcast %struct.tree_base* %base85 to i64*, !dbg !4305
  %bf.load86 = load i64, i64* %77, align 8, !dbg !4305
  %bf.clear87 = and i64 %bf.load86, 65535, !dbg !4305
  %bf.cast88 = trunc i64 %bf.clear87 to i32, !dbg !4305
  %cmp89 = icmp eq i32 %bf.cast88, 53, !dbg !4305
  br i1 %cmp89, label %cond.false92, label %cond.true91, !dbg !4305

cond.true91:                                      ; preds = %lor.lhs.false84
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 1038, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4305
  br label %cond.end93, !dbg !4305

cond.false92:                                     ; preds = %lor.lhs.false84, %if.then77
  br label %cond.end93, !dbg !4305

cond.end93:                                       ; preds = %cond.false92, %cond.true91
  %cond94 = phi i32 [ 0, %cond.true91 ], [ 0, %cond.false92 ], !dbg !4305
  %78 = load %union.tree_node**, %union.tree_node*** %p, align 8, !dbg !4307
  %79 = load %union.tree_node*, %union.tree_node** %78, align 8, !dbg !4308
  %80 = load %union.tree_node*, %union.tree_node** %temp.addr, align 8, !dbg !4309
  %exp95 = bitcast %union.tree_node* %80 to %struct.tree_exp*, !dbg !4309
  %operands96 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp95, i32 0, i32 3, !dbg !4309
  %arrayidx97 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands96, i64 0, i64 1, !dbg !4309
  store %union.tree_node* %79, %union.tree_node** %arrayidx97, align 8, !dbg !4310
  %81 = load %union.tree_node*, %union.tree_node** %temp.addr, align 8, !dbg !4311
  %82 = load %union.tree_node**, %union.tree_node*** %p, align 8, !dbg !4312
  store %union.tree_node* %81, %union.tree_node** %82, align 8, !dbg !4313
  br label %if.end, !dbg !4314

if.else98:                                        ; preds = %if.else
  %83 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4315
  %call99 = call %union.tree_node* @create_tmp_var(%union.tree_node* %83, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0)), !dbg !4317
  store %union.tree_node* %call99, %union.tree_node** %temp.addr, align 8, !dbg !4318
  %84 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4319
  %85 = load %union.tree_node*, %union.tree_node** %temp.addr, align 8, !dbg !4319
  %86 = load %union.tree_node**, %union.tree_node*** %p, align 8, !dbg !4319
  %87 = load %union.tree_node*, %union.tree_node** %86, align 8, !dbg !4319
  %call100 = call %union.tree_node* @build2_stat(i32 54, %union.tree_node* %84, %union.tree_node* %85, %union.tree_node* %87), !dbg !4319
  %88 = load %union.tree_node**, %union.tree_node*** %p, align 8, !dbg !4320
  store %union.tree_node* %call100, %union.tree_node** %88, align 8, !dbg !4321
  br label %if.end

if.end:                                           ; preds = %if.else98, %cond.end93
  br label %if.end101

if.end101:                                        ; preds = %if.end, %if.then75
  %89 = load %union.tree_node*, %union.tree_node** %temp.addr, align 8, !dbg !4322
  store %union.tree_node* %89, %union.tree_node** %retval, align 8, !dbg !4323
  br label %return, !dbg !4323

if.end102:                                        ; preds = %land.lhs.true, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !4324
  br label %return, !dbg !4324

return:                                           ; preds = %if.end102, %if.end101
  %90 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !4325
  ret %union.tree_node* %90, !dbg !4325
}

; Function Attrs: noinline nounwind uwtable
define internal { %struct.tree_statement_list_node*, %union.tree_node* } @tsi_last(%union.tree_node* %t) #0 !dbg !4326 {
entry:
  %retval = alloca %struct.tree_stmt_iterator, align 8
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !4329, metadata !DIExpression()), !dbg !4330
  call void @llvm.dbg.declare(metadata %struct.tree_stmt_iterator* %retval, metadata !4331, metadata !DIExpression()), !dbg !4332
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4333
  %stmt_list = bitcast %union.tree_node* %0 to %struct.tree_statement_list*, !dbg !4333
  %tail = getelementptr inbounds %struct.tree_statement_list, %struct.tree_statement_list* %stmt_list, i32 0, i32 2, !dbg !4333
  %1 = load %struct.tree_statement_list_node*, %struct.tree_statement_list_node** %tail, align 8, !dbg !4333
  %ptr = getelementptr inbounds %struct.tree_stmt_iterator, %struct.tree_stmt_iterator* %retval, i32 0, i32 0, !dbg !4334
  store %struct.tree_statement_list_node* %1, %struct.tree_statement_list_node** %ptr, align 8, !dbg !4335
  %2 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4336
  %container = getelementptr inbounds %struct.tree_stmt_iterator, %struct.tree_stmt_iterator* %retval, i32 0, i32 1, !dbg !4337
  store %union.tree_node* %2, %union.tree_node** %container, align 8, !dbg !4338
  %3 = bitcast %struct.tree_stmt_iterator* %retval to { %struct.tree_statement_list_node*, %union.tree_node* }*, !dbg !4339
  %4 = load { %struct.tree_statement_list_node*, %union.tree_node* }, { %struct.tree_statement_list_node*, %union.tree_node* }* %3, align 8, !dbg !4339
  ret { %struct.tree_statement_list_node*, %union.tree_node* } %4, !dbg !4339
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @tsi_end_p(%struct.tree_statement_list_node* %i.coerce0, %union.tree_node* %i.coerce1) #0 !dbg !4340 {
entry:
  %i = alloca %struct.tree_stmt_iterator, align 8
  %0 = bitcast %struct.tree_stmt_iterator* %i to { %struct.tree_statement_list_node*, %union.tree_node* }*
  %1 = getelementptr inbounds { %struct.tree_statement_list_node*, %union.tree_node* }, { %struct.tree_statement_list_node*, %union.tree_node* }* %0, i32 0, i32 0
  store %struct.tree_statement_list_node* %i.coerce0, %struct.tree_statement_list_node** %1, align 8
  %2 = getelementptr inbounds { %struct.tree_statement_list_node*, %union.tree_node* }, { %struct.tree_statement_list_node*, %union.tree_node* }* %0, i32 0, i32 1
  store %union.tree_node* %i.coerce1, %union.tree_node** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.tree_stmt_iterator* %i, metadata !4343, metadata !DIExpression()), !dbg !4344
  %ptr = getelementptr inbounds %struct.tree_stmt_iterator, %struct.tree_stmt_iterator* %i, i32 0, i32 0, !dbg !4345
  %3 = load %struct.tree_statement_list_node*, %struct.tree_statement_list_node** %ptr, align 8, !dbg !4345
  %cmp = icmp eq %struct.tree_statement_list_node* %3, null, !dbg !4346
  %conv = zext i1 %cmp to i32, !dbg !4346
  %conv1 = trunc i32 %conv to i8, !dbg !4347
  ret i8 %conv1, !dbg !4348
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @tsi_stmt_ptr(%struct.tree_statement_list_node* %i.coerce0, %union.tree_node* %i.coerce1) #0 !dbg !4349 {
entry:
  %i = alloca %struct.tree_stmt_iterator, align 8
  %0 = bitcast %struct.tree_stmt_iterator* %i to { %struct.tree_statement_list_node*, %union.tree_node* }*
  %1 = getelementptr inbounds { %struct.tree_statement_list_node*, %union.tree_node* }, { %struct.tree_statement_list_node*, %union.tree_node* }* %0, i32 0, i32 0
  store %struct.tree_statement_list_node* %i.coerce0, %struct.tree_statement_list_node** %1, align 8
  %2 = getelementptr inbounds { %struct.tree_statement_list_node*, %union.tree_node* }, { %struct.tree_statement_list_node*, %union.tree_node* }* %0, i32 0, i32 1
  store %union.tree_node* %i.coerce1, %union.tree_node** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.tree_stmt_iterator* %i, metadata !4352, metadata !DIExpression()), !dbg !4353
  %ptr = getelementptr inbounds %struct.tree_stmt_iterator, %struct.tree_stmt_iterator* %i, i32 0, i32 0, !dbg !4354
  %3 = load %struct.tree_statement_list_node*, %struct.tree_statement_list_node** %ptr, align 8, !dbg !4354
  %stmt = getelementptr inbounds %struct.tree_statement_list_node, %struct.tree_statement_list_node* %3, i32 0, i32 2, !dbg !4355
  ret %union.tree_node** %stmt, !dbg !4356
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

declare dso_local i32 @integer_zerop(%union.tree_node*) #3

declare dso_local %union.tree_node* @build2_stat(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #3

; Function Attrs: noinline nounwind uwtable
define dso_local void @sort_case_labels(%struct.VEC_tree_heap* %label_vec) #0 !dbg !4357 {
entry:
  %label_vec.addr = alloca %struct.VEC_tree_heap*, align 8
  %len = alloca i64, align 8
  store %struct.VEC_tree_heap* %label_vec, %struct.VEC_tree_heap** %label_vec.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %label_vec.addr, metadata !4360, metadata !DIExpression()), !dbg !4361
  call void @llvm.dbg.declare(metadata i64* %len, metadata !4362, metadata !DIExpression()), !dbg !4363
  %0 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %label_vec.addr, align 8, !dbg !4364
  %tobool = icmp ne %struct.VEC_tree_heap* %0, null, !dbg !4364
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4364

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %label_vec.addr, align 8, !dbg !4364
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %1, i32 0, i32 0, !dbg !4364
  br label %cond.end, !dbg !4364

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4364

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4364
  %call = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond), !dbg !4364
  %conv = zext i32 %call to i64, !dbg !4364
  store i64 %conv, i64* %len, align 8, !dbg !4363
  %2 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %label_vec.addr, align 8, !dbg !4365
  %tobool1 = icmp ne %struct.VEC_tree_heap* %2, null, !dbg !4365
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !4365

cond.true2:                                       ; preds = %cond.end
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %label_vec.addr, align 8, !dbg !4365
  %base3 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %3, i32 0, i32 0, !dbg !4365
  br label %cond.end5, !dbg !4365

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !4365

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_tree_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !4365
  %call7 = call %union.tree_node** @VEC_tree_base_address(%struct.VEC_tree_base* %cond6), !dbg !4365
  %4 = bitcast %union.tree_node** %call7 to i8*, !dbg !4365
  %5 = load i64, i64* %len, align 8, !dbg !4366
  call void @spec_qsort(i8* %4, i64 %5, i64 8, i32 (i8*, i8*)* @compare_case_labels), !dbg !4367
  ret void, !dbg !4368
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_length(%struct.VEC_tree_base* %vec_) #0 !dbg !4369 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !4374, metadata !DIExpression()), !dbg !4375
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !4375
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !4375
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4375

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !4375
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %1, i32 0, i32 0, !dbg !4375
  %2 = load i32, i32* %num, align 8, !dbg !4375
  br label %cond.end, !dbg !4375

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4375

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !4375
  ret i32 %cond, !dbg !4375
}

declare dso_local void @spec_qsort(i8*, i64, i64, i32 (i8*, i8*)*) #3

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @VEC_tree_base_address(%struct.VEC_tree_base* %vec_) #0 !dbg !4376 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !4380, metadata !DIExpression()), !dbg !4381
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !4381
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !4381
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4381

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !4381
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %1, i32 0, i32 2, !dbg !4381
  %arraydecay = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 0, !dbg !4381
  br label %cond.end, !dbg !4381

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4381

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node** [ %arraydecay, %cond.true ], [ null, %cond.false ], !dbg !4381
  ret %union.tree_node** %cond, !dbg !4381
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @compare_case_labels(i8* %p1, i8* %p2) #0 !dbg !4382 {
entry:
  %retval = alloca i32, align 4
  %p1.addr = alloca i8*, align 8
  %p2.addr = alloca i8*, align 8
  %case1 = alloca %union.tree_node*, align 8
  %case2 = alloca %union.tree_node*, align 8
  store i8* %p1, i8** %p1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p1.addr, metadata !4383, metadata !DIExpression()), !dbg !4384
  store i8* %p2, i8** %p2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p2.addr, metadata !4385, metadata !DIExpression()), !dbg !4386
  call void @llvm.dbg.declare(metadata %union.tree_node** %case1, metadata !4387, metadata !DIExpression()), !dbg !4388
  %0 = load i8*, i8** %p1.addr, align 8, !dbg !4389
  %1 = bitcast i8* %0 to %union.tree_node**, !dbg !4390
  %2 = load %union.tree_node*, %union.tree_node** %1, align 8, !dbg !4391
  store %union.tree_node* %2, %union.tree_node** %case1, align 8, !dbg !4388
  call void @llvm.dbg.declare(metadata %union.tree_node** %case2, metadata !4392, metadata !DIExpression()), !dbg !4393
  %3 = load i8*, i8** %p2.addr, align 8, !dbg !4394
  %4 = bitcast i8* %3 to %union.tree_node**, !dbg !4395
  %5 = load %union.tree_node*, %union.tree_node** %4, align 8, !dbg !4396
  store %union.tree_node* %5, %union.tree_node** %case2, align 8, !dbg !4393
  %6 = load %union.tree_node*, %union.tree_node** %case1, align 8, !dbg !4397
  %exp = bitcast %union.tree_node* %6 to %struct.tree_exp*, !dbg !4397
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !4397
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !4397
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !4397
  %tobool = icmp ne %union.tree_node* %7, null, !dbg !4397
  br i1 %tobool, label %if.else, label %if.then, !dbg !4399

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4, !dbg !4400
  br label %return, !dbg !4400

if.else:                                          ; preds = %entry
  %8 = load %union.tree_node*, %union.tree_node** %case2, align 8, !dbg !4401
  %exp1 = bitcast %union.tree_node* %8 to %struct.tree_exp*, !dbg !4401
  %operands2 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 3, !dbg !4401
  %arrayidx3 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2, i64 0, i64 0, !dbg !4401
  %9 = load %union.tree_node*, %union.tree_node** %arrayidx3, align 8, !dbg !4401
  %tobool4 = icmp ne %union.tree_node* %9, null, !dbg !4401
  br i1 %tobool4, label %if.else6, label %if.then5, !dbg !4403

if.then5:                                         ; preds = %if.else
  store i32 1, i32* %retval, align 4, !dbg !4404
  br label %return, !dbg !4404

if.else6:                                         ; preds = %if.else
  %10 = load %union.tree_node*, %union.tree_node** %case1, align 8, !dbg !4405
  %exp7 = bitcast %union.tree_node* %10 to %struct.tree_exp*, !dbg !4405
  %operands8 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp7, i32 0, i32 3, !dbg !4405
  %arrayidx9 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands8, i64 0, i64 0, !dbg !4405
  %11 = load %union.tree_node*, %union.tree_node** %arrayidx9, align 8, !dbg !4405
  %12 = load %union.tree_node*, %union.tree_node** %case2, align 8, !dbg !4406
  %exp10 = bitcast %union.tree_node* %12 to %struct.tree_exp*, !dbg !4406
  %operands11 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp10, i32 0, i32 3, !dbg !4406
  %arrayidx12 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands11, i64 0, i64 0, !dbg !4406
  %13 = load %union.tree_node*, %union.tree_node** %arrayidx12, align 8, !dbg !4406
  %call = call i32 @tree_int_cst_compare(%union.tree_node* %11, %union.tree_node* %13), !dbg !4407
  store i32 %call, i32* %retval, align 4, !dbg !4408
  br label %return, !dbg !4408

return:                                           ; preds = %if.else6, %if.then5, %if.then
  %14 = load i32, i32* %retval, align 4, !dbg !4409
  ret i32 %14, !dbg !4409
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @build_and_jump(%union.tree_node** %label_p) #0 !dbg !4410 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %label_p.addr = alloca %union.tree_node**, align 8
  %label = alloca %union.tree_node*, align 8
  store %union.tree_node** %label_p, %union.tree_node*** %label_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %label_p.addr, metadata !4413, metadata !DIExpression()), !dbg !4414
  %0 = load %union.tree_node**, %union.tree_node*** %label_p.addr, align 8, !dbg !4415
  %cmp = icmp eq %union.tree_node** %0, null, !dbg !4417
  br i1 %cmp, label %if.then, label %if.end, !dbg !4418

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !4419
  br label %return, !dbg !4419

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node**, %union.tree_node*** %label_p.addr, align 8, !dbg !4420
  %2 = load %union.tree_node*, %union.tree_node** %1, align 8, !dbg !4422
  %cmp1 = icmp eq %union.tree_node* %2, null, !dbg !4423
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !4424

if.then2:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %label, metadata !4425, metadata !DIExpression()), !dbg !4427
  %call = call %union.tree_node* @create_artificial_label(i32 0), !dbg !4428
  store %union.tree_node* %call, %union.tree_node** %label, align 8, !dbg !4427
  %3 = load %union.tree_node*, %union.tree_node** %label, align 8, !dbg !4429
  %4 = load %union.tree_node**, %union.tree_node*** %label_p.addr, align 8, !dbg !4430
  store %union.tree_node* %3, %union.tree_node** %4, align 8, !dbg !4431
  br label %if.end3, !dbg !4432

if.end3:                                          ; preds = %if.then2, %if.end
  %5 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !4433
  %6 = load %union.tree_node**, %union.tree_node*** %label_p.addr, align 8, !dbg !4433
  %7 = load %union.tree_node*, %union.tree_node** %6, align 8, !dbg !4433
  %call4 = call %union.tree_node* @build1_stat(i32 134, %union.tree_node* %5, %union.tree_node* %7), !dbg !4433
  store %union.tree_node* %call4, %union.tree_node** %retval, align 8, !dbg !4434
  br label %return, !dbg !4434

return:                                           ; preds = %if.end3, %if.then
  %8 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !4435
  ret %union.tree_node* %8, !dbg !4435
}

declare dso_local %union.tree_node* @create_artificial_label(i32) #3

declare dso_local %union.tree_node* @build1_stat(i32, %union.tree_node*, %union.tree_node*) #3

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @force_labels_r(%union.tree_node** %tp, i32* %walk_subtrees, i8* %data) #0 !dbg !4436 {
entry:
  %tp.addr = alloca %union.tree_node**, align 8
  %walk_subtrees.addr = alloca i32*, align 8
  %data.addr = alloca i8*, align 8
  store %union.tree_node** %tp, %union.tree_node*** %tp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %tp.addr, metadata !4437, metadata !DIExpression()), !dbg !4438
  store i32* %walk_subtrees, i32** %walk_subtrees.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %walk_subtrees.addr, metadata !4439, metadata !DIExpression()), !dbg !4440
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !4441, metadata !DIExpression()), !dbg !4442
  %0 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4443
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !4443
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !4443
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !4443
  %bf.load = load i64, i64* %2, align 8, !dbg !4443
  %bf.clear = and i64 %bf.load, 65535, !dbg !4443
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4443
  %idxprom = sext i32 %bf.cast to i64, !dbg !4443
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !4443
  %3 = load i32, i32* %arrayidx, align 4, !dbg !4443
  %cmp = icmp eq i32 %3, 2, !dbg !4443
  br i1 %cmp, label %if.then, label %if.end, !dbg !4445

if.then:                                          ; preds = %entry
  %4 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !4446
  store i32 0, i32* %4, align 4, !dbg !4447
  br label %if.end, !dbg !4448

if.end:                                           ; preds = %if.then, %entry
  %5 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4449
  %6 = load %union.tree_node*, %union.tree_node** %5, align 8, !dbg !4449
  %base1 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !4449
  %7 = bitcast %struct.tree_base* %base1 to i64*, !dbg !4449
  %bf.load2 = load i64, i64* %7, align 8, !dbg !4449
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !4449
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !4449
  %cmp5 = icmp eq i32 %bf.cast4, 30, !dbg !4451
  br i1 %cmp5, label %if.then6, label %if.end10, !dbg !4452

if.then6:                                         ; preds = %if.end
  %8 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4453
  %9 = load %union.tree_node*, %union.tree_node** %8, align 8, !dbg !4453
  %base7 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !4453
  %10 = bitcast %struct.tree_base* %base7 to i64*, !dbg !4453
  %bf.load8 = load i64, i64* %10, align 8, !dbg !4454
  %bf.clear9 = and i64 %bf.load8, -65537, !dbg !4454
  %bf.set = or i64 %bf.clear9, 65536, !dbg !4454
  store i64 %bf.set, i64* %10, align 8, !dbg !4454
  br label %if.end10, !dbg !4453

if.end10:                                         ; preds = %if.then6, %if.end
  ret %union.tree_node* null, !dbg !4455
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @gimple_boolify(%union.tree_node* %expr) #0 !dbg !4456 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  %loc = alloca i32, align 4
  %call26 = alloca %union.tree_node*, align 8
  %fn = alloca %union.tree_node*, align 8
  %arg = alloca %union.tree_node*, align 8
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !4457, metadata !DIExpression()), !dbg !4458
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !4459, metadata !DIExpression()), !dbg !4460
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4461
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !4461
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4461
  %1 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !4461
  store %union.tree_node* %1, %union.tree_node** %type, align 8, !dbg !4460
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !4462, metadata !DIExpression()), !dbg !4463
  %2 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4464
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !4464
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !4464
  %bf.load = load i64, i64* %3, align 8, !dbg !4464
  %bf.clear = and i64 %bf.load, 65535, !dbg !4464
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4464
  %idxprom = sext i32 %bf.cast to i64, !dbg !4464
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !4464
  %4 = load i32, i32* %arrayidx, align 4, !dbg !4464
  %cmp = icmp uge i32 %4, 4, !dbg !4464
  br i1 %cmp, label %land.lhs.true, label %cond.false, !dbg !4464

land.lhs.true:                                    ; preds = %entry
  %5 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4464
  %base2 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !4464
  %6 = bitcast %struct.tree_base* %base2 to i64*, !dbg !4464
  %bf.load3 = load i64, i64* %6, align 8, !dbg !4464
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !4464
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !4464
  %idxprom6 = sext i32 %bf.cast5 to i64, !dbg !4464
  %arrayidx7 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom6, !dbg !4464
  %7 = load i32, i32* %arrayidx7, align 4, !dbg !4464
  %cmp8 = icmp ule i32 %7, 10, !dbg !4464
  br i1 %cmp8, label %cond.true, label %cond.false, !dbg !4464

cond.true:                                        ; preds = %land.lhs.true
  %8 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4464
  %exp = bitcast %union.tree_node* %8 to %struct.tree_exp*, !dbg !4464
  %locus = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 1, !dbg !4464
  %9 = load i32, i32* %locus, align 8, !dbg !4464
  br label %cond.end, !dbg !4464

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !4464

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %9, %cond.true ], [ 0, %cond.false ], !dbg !4464
  store i32 %cond, i32* %loc, align 4, !dbg !4463
  %10 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4465
  %base9 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !4465
  %11 = bitcast %struct.tree_base* %base9 to i64*, !dbg !4465
  %bf.load10 = load i64, i64* %11, align 8, !dbg !4465
  %bf.clear11 = and i64 %bf.load10, 65535, !dbg !4465
  %bf.cast12 = trunc i64 %bf.clear11 to i32, !dbg !4465
  %cmp13 = icmp eq i32 %bf.cast12, 102, !dbg !4467
  br i1 %cmp13, label %land.lhs.true14, label %if.end88, !dbg !4468

land.lhs.true14:                                  ; preds = %cond.end
  %12 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4469
  %exp15 = bitcast %union.tree_node* %12 to %struct.tree_exp*, !dbg !4469
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp15, i32 0, i32 3, !dbg !4469
  %arrayidx16 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !4469
  %13 = load %union.tree_node*, %union.tree_node** %arrayidx16, align 8, !dbg !4469
  %base17 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !4469
  %14 = bitcast %struct.tree_base* %base17 to i64*, !dbg !4469
  %bf.load18 = load i64, i64* %14, align 8, !dbg !4469
  %bf.clear19 = and i64 %bf.load18, 65535, !dbg !4469
  %bf.cast20 = trunc i64 %bf.clear19 to i32, !dbg !4469
  %cmp21 = icmp eq i32 %bf.cast20, 59, !dbg !4470
  br i1 %cmp21, label %land.lhs.true22, label %if.end88, !dbg !4471

land.lhs.true22:                                  ; preds = %land.lhs.true14
  %15 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4472
  %exp23 = bitcast %union.tree_node* %15 to %struct.tree_exp*, !dbg !4472
  %operands24 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp23, i32 0, i32 3, !dbg !4472
  %arrayidx25 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands24, i64 0, i64 1, !dbg !4472
  %16 = load %union.tree_node*, %union.tree_node** %arrayidx25, align 8, !dbg !4472
  %call = call i32 @integer_zerop(%union.tree_node* %16), !dbg !4473
  %tobool = icmp ne i32 %call, 0, !dbg !4473
  br i1 %tobool, label %if.then, label %if.end88, !dbg !4474

if.then:                                          ; preds = %land.lhs.true22
  call void @llvm.dbg.declare(metadata %union.tree_node** %call26, metadata !4475, metadata !DIExpression()), !dbg !4477
  %17 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4478
  %exp27 = bitcast %union.tree_node* %17 to %struct.tree_exp*, !dbg !4478
  %operands28 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp27, i32 0, i32 3, !dbg !4478
  %arrayidx29 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands28, i64 0, i64 0, !dbg !4478
  %18 = load %union.tree_node*, %union.tree_node** %arrayidx29, align 8, !dbg !4478
  store %union.tree_node* %18, %union.tree_node** %call26, align 8, !dbg !4477
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !4479, metadata !DIExpression()), !dbg !4480
  %19 = load %union.tree_node*, %union.tree_node** %call26, align 8, !dbg !4481
  %call30 = call %union.tree_node* @get_callee_fndecl(%union.tree_node* %19), !dbg !4482
  store %union.tree_node* %call30, %union.tree_node** %fn, align 8, !dbg !4480
  %20 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !4483
  %tobool31 = icmp ne %union.tree_node* %20, null, !dbg !4483
  br i1 %tobool31, label %land.lhs.true32, label %if.end87, !dbg !4485

land.lhs.true32:                                  ; preds = %if.then
  %21 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !4486
  %function_decl = bitcast %union.tree_node* %21 to %struct.tree_function_decl*, !dbg !4486
  %built_in_class = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !4486
  %bf.load33 = load i32, i32* %built_in_class, align 8, !dbg !4486
  %bf.lshr = lshr i32 %bf.load33, 11, !dbg !4486
  %bf.clear34 = and i32 %bf.lshr, 3, !dbg !4486
  %cmp35 = icmp eq i32 %bf.clear34, 3, !dbg !4487
  br i1 %cmp35, label %land.lhs.true36, label %if.end87, !dbg !4488

land.lhs.true36:                                  ; preds = %land.lhs.true32
  %22 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !4489
  %function_decl37 = bitcast %union.tree_node* %22 to %struct.tree_function_decl*, !dbg !4489
  %function_code = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl37, i32 0, i32 5, !dbg !4489
  %bf.load38 = load i32, i32* %function_code, align 8, !dbg !4489
  %bf.clear39 = and i32 %bf.load38, 2047, !dbg !4489
  %cmp40 = icmp eq i32 %bf.clear39, 446, !dbg !4490
  br i1 %cmp40, label %land.lhs.true41, label %if.end87, !dbg !4491

land.lhs.true41:                                  ; preds = %land.lhs.true36
  %23 = load %union.tree_node*, %union.tree_node** %call26, align 8, !dbg !4492
  %exp42 = bitcast %union.tree_node* %23 to %struct.tree_exp*, !dbg !4492
  %operands43 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp42, i32 0, i32 3, !dbg !4492
  %arrayidx44 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands43, i64 0, i64 0, !dbg !4492
  %24 = load %union.tree_node*, %union.tree_node** %arrayidx44, align 8, !dbg !4492
  %int_cst = bitcast %union.tree_node* %24 to %struct.tree_int_cst*, !dbg !4492
  %int_cst45 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !4492
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst45, i32 0, i32 0, !dbg !4492
  %25 = load i64, i64* %low, align 8, !dbg !4492
  %conv = trunc i64 %25 to i32, !dbg !4492
  %sub = sub nsw i32 %conv, 3, !dbg !4492
  %cmp46 = icmp eq i32 %sub, 2, !dbg !4493
  br i1 %cmp46, label %if.then48, label %if.end87, !dbg !4494

if.then48:                                        ; preds = %land.lhs.true41
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !4495, metadata !DIExpression()), !dbg !4497
  %26 = load %union.tree_node*, %union.tree_node** %call26, align 8, !dbg !4498
  %exp49 = bitcast %union.tree_node* %26 to %struct.tree_exp*, !dbg !4498
  %operands50 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp49, i32 0, i32 3, !dbg !4498
  %arrayidx51 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands50, i64 0, i64 3, !dbg !4498
  %27 = load %union.tree_node*, %union.tree_node** %arrayidx51, align 8, !dbg !4498
  store %union.tree_node* %27, %union.tree_node** %arg, align 8, !dbg !4497
  %28 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !4499
  %tobool52 = icmp ne %union.tree_node* %28, null, !dbg !4499
  br i1 %tobool52, label %if.then53, label %if.end86, !dbg !4501

if.then53:                                        ; preds = %if.then48
  %29 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !4502
  %base54 = bitcast %union.tree_node* %29 to %struct.tree_base*, !dbg !4502
  %30 = bitcast %struct.tree_base* %base54 to i64*, !dbg !4502
  %bf.load55 = load i64, i64* %30, align 8, !dbg !4502
  %bf.clear56 = and i64 %bf.load55, 65535, !dbg !4502
  %bf.cast57 = trunc i64 %bf.clear56 to i32, !dbg !4502
  %cmp58 = icmp eq i32 %bf.cast57, 116, !dbg !4505
  br i1 %cmp58, label %land.lhs.true60, label %if.end, !dbg !4506

land.lhs.true60:                                  ; preds = %if.then53
  %31 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !4507
  %common61 = bitcast %union.tree_node* %31 to %struct.tree_common*, !dbg !4507
  %type62 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common61, i32 0, i32 2, !dbg !4507
  %32 = load %union.tree_node*, %union.tree_node** %type62, align 8, !dbg !4507
  %33 = load %union.tree_node*, %union.tree_node** %call26, align 8, !dbg !4508
  %common63 = bitcast %union.tree_node* %33 to %struct.tree_common*, !dbg !4508
  %type64 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common63, i32 0, i32 2, !dbg !4508
  %34 = load %union.tree_node*, %union.tree_node** %type64, align 8, !dbg !4508
  %cmp65 = icmp eq %union.tree_node* %32, %34, !dbg !4509
  br i1 %cmp65, label %if.then67, label %if.end, !dbg !4510

if.then67:                                        ; preds = %land.lhs.true60
  %35 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !4511
  %exp68 = bitcast %union.tree_node* %35 to %struct.tree_exp*, !dbg !4511
  %operands69 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp68, i32 0, i32 3, !dbg !4511
  %arrayidx70 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands69, i64 0, i64 0, !dbg !4511
  %36 = load %union.tree_node*, %union.tree_node** %arrayidx70, align 8, !dbg !4511
  store %union.tree_node* %36, %union.tree_node** %arg, align 8, !dbg !4512
  br label %if.end, !dbg !4513

if.end:                                           ; preds = %if.then67, %land.lhs.true60, %if.then53
  %37 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !4514
  %base71 = bitcast %union.tree_node* %37 to %struct.tree_base*, !dbg !4514
  %38 = bitcast %struct.tree_base* %base71 to i64*, !dbg !4514
  %bf.load72 = load i64, i64* %38, align 8, !dbg !4514
  %bf.clear73 = and i64 %bf.load72, 65535, !dbg !4514
  %bf.cast74 = trunc i64 %bf.clear73 to i32, !dbg !4514
  %call75 = call zeroext i8 @truth_value_p(i32 %bf.cast74), !dbg !4516
  %tobool76 = icmp ne i8 %call75, 0, !dbg !4516
  br i1 %tobool76, label %if.then77, label %if.end85, !dbg !4517

if.then77:                                        ; preds = %if.end
  %39 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !4518
  %call78 = call %union.tree_node* @gimple_boolify(%union.tree_node* %39), !dbg !4520
  store %union.tree_node* %call78, %union.tree_node** %arg, align 8, !dbg !4521
  %40 = load i32, i32* %loc, align 4, !dbg !4522
  %41 = load %union.tree_node*, %union.tree_node** %call26, align 8, !dbg !4523
  %common79 = bitcast %union.tree_node* %41 to %struct.tree_common*, !dbg !4523
  %type80 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common79, i32 0, i32 2, !dbg !4523
  %42 = load %union.tree_node*, %union.tree_node** %type80, align 8, !dbg !4523
  %43 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !4524
  %call81 = call %union.tree_node* @fold_convert_loc(i32 %40, %union.tree_node* %42, %union.tree_node* %43), !dbg !4525
  %44 = load %union.tree_node*, %union.tree_node** %call26, align 8, !dbg !4526
  %exp82 = bitcast %union.tree_node* %44 to %struct.tree_exp*, !dbg !4526
  %operands83 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp82, i32 0, i32 3, !dbg !4526
  %arrayidx84 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands83, i64 0, i64 3, !dbg !4526
  store %union.tree_node* %call81, %union.tree_node** %arrayidx84, align 8, !dbg !4527
  br label %if.end85, !dbg !4528

if.end85:                                         ; preds = %if.then77, %if.end
  br label %if.end86, !dbg !4529

if.end86:                                         ; preds = %if.end85, %if.then48
  br label %if.end87, !dbg !4530

if.end87:                                         ; preds = %if.end86, %land.lhs.true41, %land.lhs.true36, %land.lhs.true32, %if.then
  br label %if.end88, !dbg !4531

if.end88:                                         ; preds = %if.end87, %land.lhs.true22, %land.lhs.true14, %cond.end
  %45 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4532
  %base89 = bitcast %union.tree_node* %45 to %struct.tree_base*, !dbg !4532
  %46 = bitcast %struct.tree_base* %base89 to i64*, !dbg !4532
  %bf.load90 = load i64, i64* %46, align 8, !dbg !4532
  %bf.clear91 = and i64 %bf.load90, 65535, !dbg !4532
  %bf.cast92 = trunc i64 %bf.clear91 to i32, !dbg !4532
  %cmp93 = icmp eq i32 %bf.cast92, 7, !dbg !4534
  br i1 %cmp93, label %if.then95, label %if.end96, !dbg !4535

if.then95:                                        ; preds = %if.end88
  %47 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4536
  store %union.tree_node* %47, %union.tree_node** %retval, align 8, !dbg !4537
  br label %return, !dbg !4537

if.end96:                                         ; preds = %if.end88
  %48 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4538
  %base97 = bitcast %union.tree_node* %48 to %struct.tree_base*, !dbg !4538
  %49 = bitcast %struct.tree_base* %base97 to i64*, !dbg !4538
  %bf.load98 = load i64, i64* %49, align 8, !dbg !4538
  %bf.clear99 = and i64 %bf.load98, 65535, !dbg !4538
  %bf.cast100 = trunc i64 %bf.clear99 to i32, !dbg !4538
  switch i32 %bf.cast100, label %sw.default [
    i32 93, label %sw.bb
    i32 94, label %sw.bb
    i32 95, label %sw.bb
    i32 91, label %sw.bb
    i32 92, label %sw.bb
    i32 96, label %sw.bb108
    i32 101, label %sw.bb116
    i32 102, label %sw.bb116
    i32 98, label %sw.bb116
    i32 100, label %sw.bb116
    i32 97, label %sw.bb116
    i32 99, label %sw.bb116
  ], !dbg !4539

sw.bb:                                            ; preds = %if.end96, %if.end96, %if.end96, %if.end96, %if.end96
  %50 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4540
  %exp101 = bitcast %union.tree_node* %50 to %struct.tree_exp*, !dbg !4540
  %operands102 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp101, i32 0, i32 3, !dbg !4540
  %arrayidx103 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands102, i64 0, i64 1, !dbg !4540
  %51 = load %union.tree_node*, %union.tree_node** %arrayidx103, align 8, !dbg !4540
  %call104 = call %union.tree_node* @gimple_boolify(%union.tree_node* %51), !dbg !4542
  %52 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4543
  %exp105 = bitcast %union.tree_node* %52 to %struct.tree_exp*, !dbg !4543
  %operands106 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp105, i32 0, i32 3, !dbg !4543
  %arrayidx107 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands106, i64 0, i64 1, !dbg !4543
  store %union.tree_node* %call104, %union.tree_node** %arrayidx107, align 8, !dbg !4544
  br label %sw.bb108, !dbg !4543

sw.bb108:                                         ; preds = %if.end96, %sw.bb
  %53 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4545
  %exp109 = bitcast %union.tree_node* %53 to %struct.tree_exp*, !dbg !4545
  %operands110 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp109, i32 0, i32 3, !dbg !4545
  %arrayidx111 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands110, i64 0, i64 0, !dbg !4545
  %54 = load %union.tree_node*, %union.tree_node** %arrayidx111, align 8, !dbg !4545
  %call112 = call %union.tree_node* @gimple_boolify(%union.tree_node* %54), !dbg !4546
  %55 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4547
  %exp113 = bitcast %union.tree_node* %55 to %struct.tree_exp*, !dbg !4547
  %operands114 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp113, i32 0, i32 3, !dbg !4547
  %arrayidx115 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands114, i64 0, i64 0, !dbg !4547
  store %union.tree_node* %call112, %union.tree_node** %arrayidx115, align 8, !dbg !4548
  br label %sw.bb116, !dbg !4547

sw.bb116:                                         ; preds = %if.end96, %if.end96, %if.end96, %if.end96, %if.end96, %if.end96, %sw.bb108
  %56 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !4549
  %57 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4550
  %common117 = bitcast %union.tree_node* %57 to %struct.tree_common*, !dbg !4550
  %type118 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common117, i32 0, i32 2, !dbg !4550
  store %union.tree_node* %56, %union.tree_node** %type118, align 8, !dbg !4551
  %58 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4552
  store %union.tree_node* %58, %union.tree_node** %retval, align 8, !dbg !4553
  br label %return, !dbg !4553

sw.default:                                       ; preds = %if.end96
  %59 = load i32, i32* %loc, align 4, !dbg !4554
  %60 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !4555
  %61 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4556
  %call119 = call %union.tree_node* @fold_convert_loc(i32 %59, %union.tree_node* %60, %union.tree_node* %61), !dbg !4557
  store %union.tree_node* %call119, %union.tree_node** %retval, align 8, !dbg !4558
  br label %return, !dbg !4558

return:                                           ; preds = %sw.default, %sw.bb116, %if.then95
  %62 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !4559
  ret %union.tree_node* %62, !dbg !4559
}

declare dso_local %union.tree_node* @get_callee_fndecl(%union.tree_node*) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @truth_value_p(i32 %code) #0 !dbg !4560 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !4563, metadata !DIExpression()), !dbg !4564
  %0 = load i32, i32* %code.addr, align 4, !dbg !4565
  %idxprom = sext i32 %0 to i64, !dbg !4565
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !4565
  %1 = load i32, i32* %arrayidx, align 4, !dbg !4565
  %cmp = icmp eq i32 %1, 5, !dbg !4566
  br i1 %cmp, label %lor.end, label %lor.lhs.false, !dbg !4567

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %code.addr, align 4, !dbg !4568
  %cmp1 = icmp eq i32 %2, 93, !dbg !4569
  br i1 %cmp1, label %lor.end, label %lor.lhs.false2, !dbg !4570

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %3 = load i32, i32* %code.addr, align 4, !dbg !4571
  %cmp3 = icmp eq i32 %3, 91, !dbg !4572
  br i1 %cmp3, label %lor.end, label %lor.lhs.false4, !dbg !4573

lor.lhs.false4:                                   ; preds = %lor.lhs.false2
  %4 = load i32, i32* %code.addr, align 4, !dbg !4574
  %cmp5 = icmp eq i32 %4, 94, !dbg !4575
  br i1 %cmp5, label %lor.end, label %lor.lhs.false6, !dbg !4576

lor.lhs.false6:                                   ; preds = %lor.lhs.false4
  %5 = load i32, i32* %code.addr, align 4, !dbg !4577
  %cmp7 = icmp eq i32 %5, 92, !dbg !4578
  br i1 %cmp7, label %lor.end, label %lor.lhs.false8, !dbg !4579

lor.lhs.false8:                                   ; preds = %lor.lhs.false6
  %6 = load i32, i32* %code.addr, align 4, !dbg !4580
  %cmp9 = icmp eq i32 %6, 95, !dbg !4581
  br i1 %cmp9, label %lor.end, label %lor.rhs, !dbg !4582

lor.rhs:                                          ; preds = %lor.lhs.false8
  %7 = load i32, i32* %code.addr, align 4, !dbg !4583
  %cmp10 = icmp eq i32 %7, 96, !dbg !4584
  br label %lor.end, !dbg !4582

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false8, %lor.lhs.false6, %lor.lhs.false4, %lor.lhs.false2, %lor.lhs.false, %entry
  %8 = phi i1 [ true, %lor.lhs.false8 ], [ true, %lor.lhs.false6 ], [ true, %lor.lhs.false4 ], [ true, %lor.lhs.false2 ], [ true, %lor.lhs.false ], [ true, %entry ], [ %cmp10, %lor.rhs ]
  %lor.ext = zext i1 %8 to i32, !dbg !4582
  %conv = trunc i32 %lor.ext to i8, !dbg !4585
  ret i8 %conv, !dbg !4586
}

declare dso_local %union.tree_node* @fold_convert_loc(i32, %union.tree_node*, %union.tree_node*) #3

; Function Attrs: noinline nounwind uwtable
define dso_local i8 (%union.tree_node*)* @rhs_predicate_for(%union.tree_node* %lhs) #0 !dbg !4587 {
entry:
  %retval = alloca i8 (%union.tree_node*)*, align 8
  %lhs.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !4594, metadata !DIExpression()), !dbg !4595
  %0 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !4596
  %call = call zeroext i8 @is_gimple_reg(%union.tree_node* %0), !dbg !4598
  %tobool = icmp ne i8 %call, 0, !dbg !4598
  br i1 %tobool, label %if.then, label %if.else, !dbg !4599

if.then:                                          ; preds = %entry
  store i8 (%union.tree_node*)* @is_gimple_reg_rhs_or_call, i8 (%union.tree_node*)** %retval, align 8, !dbg !4600
  br label %return, !dbg !4600

if.else:                                          ; preds = %entry
  store i8 (%union.tree_node*)* @is_gimple_mem_rhs_or_call, i8 (%union.tree_node*)** %retval, align 8, !dbg !4601
  br label %return, !dbg !4601

return:                                           ; preds = %if.else, %if.then
  %1 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** %retval, align 8, !dbg !4602
  ret i8 (%union.tree_node*)* %1, !dbg !4602
}

declare dso_local zeroext i8 @is_gimple_reg(%union.tree_node*) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_reg_rhs_or_call(%union.tree_node* %t) #0 !dbg !4603 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !4604, metadata !DIExpression()), !dbg !4605
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4606
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !4606
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !4606
  %bf.load = load i64, i64* %1, align 8, !dbg !4606
  %bf.clear = and i64 %bf.load, 65535, !dbg !4606
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4606
  %call = call i32 @get_gimple_rhs_class(i32 %bf.cast), !dbg !4607
  %cmp = icmp ne i32 %call, 0, !dbg !4608
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !4609

lor.rhs:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4610
  %base1 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !4610
  %3 = bitcast %struct.tree_base* %base1 to i64*, !dbg !4610
  %bf.load2 = load i64, i64* %3, align 8, !dbg !4610
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !4610
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !4610
  %cmp5 = icmp eq i32 %bf.cast4, 59, !dbg !4611
  br label %lor.end, !dbg !4609

lor.end:                                          ; preds = %lor.rhs, %entry
  %4 = phi i1 [ true, %entry ], [ %cmp5, %lor.rhs ]
  %lor.ext = zext i1 %4 to i32, !dbg !4609
  %conv = trunc i32 %lor.ext to i8, !dbg !4612
  ret i8 %conv, !dbg !4613
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_mem_rhs_or_call(%union.tree_node* %t) #0 !dbg !4614 {
entry:
  %retval = alloca i8, align 1
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !4615, metadata !DIExpression()), !dbg !4616
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4617
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !4617
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4617
  %1 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4617
  %call = call zeroext i8 @is_gimple_reg_type(%union.tree_node* %1), !dbg !4619
  %tobool = icmp ne i8 %call, 0, !dbg !4619
  br i1 %tobool, label %if.then, label %if.else, !dbg !4620

if.then:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4621
  %call1 = call zeroext i8 @is_gimple_val(%union.tree_node* %2), !dbg !4622
  store i8 %call1, i8* %retval, align 1, !dbg !4623
  br label %return, !dbg !4623

if.else:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4624
  %call2 = call zeroext i8 @is_gimple_val(%union.tree_node* %3), !dbg !4625
  %conv = zext i8 %call2 to i32, !dbg !4625
  %tobool3 = icmp ne i32 %conv, 0, !dbg !4625
  br i1 %tobool3, label %lor.end, label %lor.lhs.false, !dbg !4626

lor.lhs.false:                                    ; preds = %if.else
  %4 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4627
  %call4 = call zeroext i8 @is_gimple_lvalue(%union.tree_node* %4), !dbg !4628
  %conv5 = zext i8 %call4 to i32, !dbg !4628
  %tobool6 = icmp ne i32 %conv5, 0, !dbg !4628
  br i1 %tobool6, label %lor.end, label %lor.rhs, !dbg !4629

lor.rhs:                                          ; preds = %lor.lhs.false
  %5 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4630
  %base = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !4630
  %6 = bitcast %struct.tree_base* %base to i64*, !dbg !4630
  %bf.load = load i64, i64* %6, align 8, !dbg !4630
  %bf.clear = and i64 %bf.load, 65535, !dbg !4630
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4630
  %cmp = icmp eq i32 %bf.cast, 59, !dbg !4631
  br label %lor.end, !dbg !4629

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %if.else
  %7 = phi i1 [ true, %lor.lhs.false ], [ true, %if.else ], [ %cmp, %lor.rhs ]
  %lor.ext = zext i1 %7 to i32, !dbg !4629
  %conv8 = trunc i32 %lor.ext to i8, !dbg !4632
  store i8 %conv8, i8* %retval, align 1, !dbg !4633
  br label %return, !dbg !4633

return:                                           ; preds = %lor.end, %if.then
  %8 = load i8, i8* %retval, align 1, !dbg !4634
  ret i8 %8, !dbg !4634
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @gimple_fold_indirect_ref(%union.tree_node* %t) #0 !dbg !4635 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %t.addr = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  %sub = alloca %union.tree_node*, align 8
  %subtype = alloca %union.tree_node*, align 8
  %op = alloca %union.tree_node*, align 8
  %optype = alloca %union.tree_node*, align 8
  %type_domain = alloca %union.tree_node*, align 8
  %min_val = alloca %union.tree_node*, align 8
  %part_width = alloca %union.tree_node*, align 8
  %index = alloca %union.tree_node*, align 8
  %op00 = alloca %union.tree_node*, align 8
  %op01 = alloca %union.tree_node*, align 8
  %op00type = alloca %union.tree_node*, align 8
  %offset = alloca i64, align 8
  %part_width146 = alloca %union.tree_node*, align 8
  %part_widthi = alloca i64, align 8
  %indexi = alloca i64, align 8
  %index150 = alloca %union.tree_node*, align 8
  %op00185 = alloca %union.tree_node*, align 8
  %op01189 = alloca %union.tree_node*, align 8
  %op00type193 = alloca %union.tree_node*, align 8
  %size221 = alloca %union.tree_node*, align 8
  %type_domain263 = alloca %union.tree_node*, align 8
  %min_val264 = alloca %union.tree_node*, align 8
  %osub = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !4636, metadata !DIExpression()), !dbg !4637
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !4638, metadata !DIExpression()), !dbg !4639
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4640
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !4640
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4640
  %1 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !4640
  %common2 = bitcast %union.tree_node* %1 to %struct.tree_common*, !dbg !4640
  %type3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2, !dbg !4640
  %2 = load %union.tree_node*, %union.tree_node** %type3, align 8, !dbg !4640
  store %union.tree_node* %2, %union.tree_node** %type, align 8, !dbg !4639
  call void @llvm.dbg.declare(metadata %union.tree_node** %sub, metadata !4641, metadata !DIExpression()), !dbg !4642
  %3 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4643
  store %union.tree_node* %3, %union.tree_node** %sub, align 8, !dbg !4642
  call void @llvm.dbg.declare(metadata %union.tree_node** %subtype, metadata !4644, metadata !DIExpression()), !dbg !4645
  %4 = load %union.tree_node*, %union.tree_node** %sub, align 8, !dbg !4646
  %call = call %union.tree_node* @tree_strip_nop_conversions(%union.tree_node* %4), !dbg !4646
  store %union.tree_node* %call, %union.tree_node** %sub, align 8, !dbg !4646
  %5 = load %union.tree_node*, %union.tree_node** %sub, align 8, !dbg !4647
  %common4 = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !4647
  %type5 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4, i32 0, i32 2, !dbg !4647
  %6 = load %union.tree_node*, %union.tree_node** %type5, align 8, !dbg !4647
  store %union.tree_node* %6, %union.tree_node** %subtype, align 8, !dbg !4648
  %7 = load %union.tree_node*, %union.tree_node** %subtype, align 8, !dbg !4649
  %base = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !4649
  %8 = bitcast %struct.tree_base* %base to i64*, !dbg !4649
  %bf.load = load i64, i64* %8, align 8, !dbg !4649
  %bf.clear = and i64 %bf.load, 65535, !dbg !4649
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4649
  %cmp = icmp eq i32 %bf.cast, 10, !dbg !4649
  br i1 %cmp, label %if.end, label %lor.lhs.false, !dbg !4649

lor.lhs.false:                                    ; preds = %entry
  %9 = load %union.tree_node*, %union.tree_node** %subtype, align 8, !dbg !4649
  %base6 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !4649
  %10 = bitcast %struct.tree_base* %base6 to i64*, !dbg !4649
  %bf.load7 = load i64, i64* %10, align 8, !dbg !4649
  %bf.clear8 = and i64 %bf.load7, 65535, !dbg !4649
  %bf.cast9 = trunc i64 %bf.clear8 to i32, !dbg !4649
  %cmp10 = icmp eq i32 %bf.cast9, 12, !dbg !4649
  br i1 %cmp10, label %if.end, label %if.then, !dbg !4651

if.then:                                          ; preds = %lor.lhs.false
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !4652
  br label %return, !dbg !4652

if.end:                                           ; preds = %lor.lhs.false, %entry
  %11 = load %union.tree_node*, %union.tree_node** %sub, align 8, !dbg !4653
  %base11 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !4653
  %12 = bitcast %struct.tree_base* %base11 to i64*, !dbg !4653
  %bf.load12 = load i64, i64* %12, align 8, !dbg !4653
  %bf.clear13 = and i64 %bf.load12, 65535, !dbg !4653
  %bf.cast14 = trunc i64 %bf.clear13 to i32, !dbg !4653
  %cmp15 = icmp eq i32 %bf.cast14, 121, !dbg !4655
  br i1 %cmp15, label %if.then16, label %if.end94, !dbg !4656

if.then16:                                        ; preds = %if.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %op, metadata !4657, metadata !DIExpression()), !dbg !4659
  %13 = load %union.tree_node*, %union.tree_node** %sub, align 8, !dbg !4660
  %exp = bitcast %union.tree_node* %13 to %struct.tree_exp*, !dbg !4660
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !4660
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !4660
  %14 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !4660
  store %union.tree_node* %14, %union.tree_node** %op, align 8, !dbg !4659
  call void @llvm.dbg.declare(metadata %union.tree_node** %optype, metadata !4661, metadata !DIExpression()), !dbg !4662
  %15 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !4663
  %common17 = bitcast %union.tree_node* %15 to %struct.tree_common*, !dbg !4663
  %type18 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common17, i32 0, i32 2, !dbg !4663
  %16 = load %union.tree_node*, %union.tree_node** %type18, align 8, !dbg !4663
  store %union.tree_node* %16, %union.tree_node** %optype, align 8, !dbg !4662
  %17 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4664
  %18 = load %union.tree_node*, %union.tree_node** %optype, align 8, !dbg !4666
  %call19 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %17, %union.tree_node* %18), !dbg !4667
  %tobool = icmp ne i8 %call19, 0, !dbg !4667
  br i1 %tobool, label %if.then20, label %if.end21, !dbg !4668

if.then20:                                        ; preds = %if.then16
  %19 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !4669
  store %union.tree_node* %19, %union.tree_node** %retval, align 8, !dbg !4670
  br label %return, !dbg !4670

if.end21:                                         ; preds = %if.then16
  %20 = load %union.tree_node*, %union.tree_node** %optype, align 8, !dbg !4671
  %base22 = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !4671
  %21 = bitcast %struct.tree_base* %base22 to i64*, !dbg !4671
  %bf.load23 = load i64, i64* %21, align 8, !dbg !4671
  %bf.clear24 = and i64 %bf.load23, 65535, !dbg !4671
  %bf.cast25 = trunc i64 %bf.clear24 to i32, !dbg !4671
  %cmp26 = icmp eq i32 %bf.cast25, 15, !dbg !4673
  br i1 %cmp26, label %land.lhs.true, label %if.else, !dbg !4674

land.lhs.true:                                    ; preds = %if.end21
  %22 = load %union.tree_node*, %union.tree_node** %optype, align 8, !dbg !4675
  %common27 = bitcast %union.tree_node* %22 to %struct.tree_common*, !dbg !4675
  %type28 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common27, i32 0, i32 2, !dbg !4675
  %23 = load %union.tree_node*, %union.tree_node** %type28, align 8, !dbg !4675
  %type29 = bitcast %union.tree_node* %23 to %struct.tree_type*, !dbg !4675
  %size = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type29, i32 0, i32 2, !dbg !4675
  %24 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !4675
  %base30 = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !4675
  %25 = bitcast %struct.tree_base* %base30 to i64*, !dbg !4675
  %bf.load31 = load i64, i64* %25, align 8, !dbg !4675
  %bf.clear32 = and i64 %bf.load31, 65535, !dbg !4675
  %bf.cast33 = trunc i64 %bf.clear32 to i32, !dbg !4675
  %cmp34 = icmp eq i32 %bf.cast33, 23, !dbg !4676
  br i1 %cmp34, label %land.lhs.true35, label %if.else, !dbg !4677

land.lhs.true35:                                  ; preds = %land.lhs.true
  %26 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4678
  %27 = load %union.tree_node*, %union.tree_node** %optype, align 8, !dbg !4679
  %common36 = bitcast %union.tree_node* %27 to %struct.tree_common*, !dbg !4679
  %type37 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common36, i32 0, i32 2, !dbg !4679
  %28 = load %union.tree_node*, %union.tree_node** %type37, align 8, !dbg !4679
  %call38 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %26, %union.tree_node* %28), !dbg !4680
  %conv = zext i8 %call38 to i32, !dbg !4680
  %tobool39 = icmp ne i32 %conv, 0, !dbg !4680
  br i1 %tobool39, label %if.then40, label %if.else, !dbg !4681

if.then40:                                        ; preds = %land.lhs.true35
  call void @llvm.dbg.declare(metadata %union.tree_node** %type_domain, metadata !4682, metadata !DIExpression()), !dbg !4684
  %29 = load %union.tree_node*, %union.tree_node** %optype, align 8, !dbg !4685
  %type41 = bitcast %union.tree_node* %29 to %struct.tree_type*, !dbg !4685
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type41, i32 0, i32 1, !dbg !4685
  %30 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !4685
  store %union.tree_node* %30, %union.tree_node** %type_domain, align 8, !dbg !4684
  call void @llvm.dbg.declare(metadata %union.tree_node** %min_val, metadata !4686, metadata !DIExpression()), !dbg !4687
  %31 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 17), align 8, !dbg !4688
  store %union.tree_node* %31, %union.tree_node** %min_val, align 8, !dbg !4687
  %32 = load %union.tree_node*, %union.tree_node** %type_domain, align 8, !dbg !4689
  %tobool42 = icmp ne %union.tree_node* %32, null, !dbg !4689
  br i1 %tobool42, label %land.lhs.true43, label %if.end49, !dbg !4691

land.lhs.true43:                                  ; preds = %if.then40
  %33 = load %union.tree_node*, %union.tree_node** %type_domain, align 8, !dbg !4692
  %type44 = bitcast %union.tree_node* %33 to %struct.tree_type*, !dbg !4692
  %minval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type44, i32 0, i32 13, !dbg !4692
  %34 = load %union.tree_node*, %union.tree_node** %minval, align 8, !dbg !4692
  %tobool45 = icmp ne %union.tree_node* %34, null, !dbg !4692
  br i1 %tobool45, label %if.then46, label %if.end49, !dbg !4693

if.then46:                                        ; preds = %land.lhs.true43
  %35 = load %union.tree_node*, %union.tree_node** %type_domain, align 8, !dbg !4694
  %type47 = bitcast %union.tree_node* %35 to %struct.tree_type*, !dbg !4694
  %minval48 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type47, i32 0, i32 13, !dbg !4694
  %36 = load %union.tree_node*, %union.tree_node** %minval48, align 8, !dbg !4694
  store %union.tree_node* %36, %union.tree_node** %min_val, align 8, !dbg !4695
  br label %if.end49, !dbg !4696

if.end49:                                         ; preds = %if.then46, %land.lhs.true43, %if.then40
  %37 = load %union.tree_node*, %union.tree_node** %min_val, align 8, !dbg !4697
  %base50 = bitcast %union.tree_node* %37 to %struct.tree_base*, !dbg !4697
  %38 = bitcast %struct.tree_base* %base50 to i64*, !dbg !4697
  %bf.load51 = load i64, i64* %38, align 8, !dbg !4697
  %bf.clear52 = and i64 %bf.load51, 65535, !dbg !4697
  %bf.cast53 = trunc i64 %bf.clear52 to i32, !dbg !4697
  %cmp54 = icmp eq i32 %bf.cast53, 23, !dbg !4699
  br i1 %cmp54, label %if.then56, label %if.end58, !dbg !4700

if.then56:                                        ; preds = %if.end49
  %39 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4701
  %40 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !4701
  %41 = load %union.tree_node*, %union.tree_node** %min_val, align 8, !dbg !4701
  %call57 = call %union.tree_node* @build4_stat(i32 45, %union.tree_node* %39, %union.tree_node* %40, %union.tree_node* %41, %union.tree_node* null, %union.tree_node* null), !dbg !4701
  store %union.tree_node* %call57, %union.tree_node** %retval, align 8, !dbg !4702
  br label %return, !dbg !4702

if.end58:                                         ; preds = %if.end49
  br label %if.end93, !dbg !4703

if.else:                                          ; preds = %land.lhs.true35, %land.lhs.true, %if.end21
  %42 = load %union.tree_node*, %union.tree_node** %optype, align 8, !dbg !4704
  %base59 = bitcast %union.tree_node* %42 to %struct.tree_base*, !dbg !4704
  %43 = bitcast %struct.tree_base* %base59 to i64*, !dbg !4704
  %bf.load60 = load i64, i64* %43, align 8, !dbg !4704
  %bf.clear61 = and i64 %bf.load60, 65535, !dbg !4704
  %bf.cast62 = trunc i64 %bf.clear61 to i32, !dbg !4704
  %cmp63 = icmp eq i32 %bf.cast62, 13, !dbg !4706
  br i1 %cmp63, label %land.lhs.true65, label %if.else73, !dbg !4707

land.lhs.true65:                                  ; preds = %if.else
  %44 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4708
  %45 = load %union.tree_node*, %union.tree_node** %optype, align 8, !dbg !4709
  %common66 = bitcast %union.tree_node* %45 to %struct.tree_common*, !dbg !4709
  %type67 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common66, i32 0, i32 2, !dbg !4709
  %46 = load %union.tree_node*, %union.tree_node** %type67, align 8, !dbg !4709
  %call68 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %44, %union.tree_node* %46), !dbg !4710
  %conv69 = zext i8 %call68 to i32, !dbg !4710
  %tobool70 = icmp ne i32 %conv69, 0, !dbg !4710
  br i1 %tobool70, label %if.then71, label %if.else73, !dbg !4711

if.then71:                                        ; preds = %land.lhs.true65
  %47 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4712
  %48 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !4712
  %call72 = call %union.tree_node* @fold_build1_stat_loc(i32 0, i32 43, %union.tree_node* %47, %union.tree_node* %48), !dbg !4712
  store %union.tree_node* %call72, %union.tree_node** %retval, align 8, !dbg !4713
  br label %return, !dbg !4713

if.else73:                                        ; preds = %land.lhs.true65, %if.else
  %49 = load %union.tree_node*, %union.tree_node** %optype, align 8, !dbg !4714
  %base74 = bitcast %union.tree_node* %49 to %struct.tree_base*, !dbg !4714
  %50 = bitcast %struct.tree_base* %base74 to i64*, !dbg !4714
  %bf.load75 = load i64, i64* %50, align 8, !dbg !4714
  %bf.clear76 = and i64 %bf.load75, 65535, !dbg !4714
  %bf.cast77 = trunc i64 %bf.clear76 to i32, !dbg !4714
  %cmp78 = icmp eq i32 %bf.cast77, 14, !dbg !4716
  br i1 %cmp78, label %land.lhs.true80, label %if.end91, !dbg !4717

land.lhs.true80:                                  ; preds = %if.else73
  %51 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4718
  %52 = load %union.tree_node*, %union.tree_node** %optype, align 8, !dbg !4719
  %common81 = bitcast %union.tree_node* %52 to %struct.tree_common*, !dbg !4719
  %type82 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common81, i32 0, i32 2, !dbg !4719
  %53 = load %union.tree_node*, %union.tree_node** %type82, align 8, !dbg !4719
  %call83 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %51, %union.tree_node* %53), !dbg !4720
  %conv84 = zext i8 %call83 to i32, !dbg !4720
  %tobool85 = icmp ne i32 %conv84, 0, !dbg !4720
  br i1 %tobool85, label %if.then86, label %if.end91, !dbg !4721

if.then86:                                        ; preds = %land.lhs.true80
  call void @llvm.dbg.declare(metadata %union.tree_node** %part_width, metadata !4722, metadata !DIExpression()), !dbg !4724
  %54 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4725
  %type87 = bitcast %union.tree_node* %54 to %struct.tree_type*, !dbg !4725
  %size88 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type87, i32 0, i32 2, !dbg !4725
  %55 = load %union.tree_node*, %union.tree_node** %size88, align 8, !dbg !4725
  store %union.tree_node* %55, %union.tree_node** %part_width, align 8, !dbg !4724
  call void @llvm.dbg.declare(metadata %union.tree_node** %index, metadata !4726, metadata !DIExpression()), !dbg !4727
  %call89 = call %union.tree_node* @size_int_kind(i64 0, i32 2), !dbg !4728
  store %union.tree_node* %call89, %union.tree_node** %index, align 8, !dbg !4727
  %56 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4729
  %57 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !4729
  %58 = load %union.tree_node*, %union.tree_node** %part_width, align 8, !dbg !4729
  %59 = load %union.tree_node*, %union.tree_node** %index, align 8, !dbg !4729
  %call90 = call %union.tree_node* @fold_build3_stat_loc(i32 0, i32 42, %union.tree_node* %56, %union.tree_node* %57, %union.tree_node* %58, %union.tree_node* %59), !dbg !4729
  store %union.tree_node* %call90, %union.tree_node** %retval, align 8, !dbg !4730
  br label %return, !dbg !4730

if.end91:                                         ; preds = %land.lhs.true80, %if.else73
  br label %if.end92

if.end92:                                         ; preds = %if.end91
  br label %if.end93

if.end93:                                         ; preds = %if.end92, %if.end58
  br label %if.end94, !dbg !4731

if.end94:                                         ; preds = %if.end93, %if.end
  %60 = load %union.tree_node*, %union.tree_node** %sub, align 8, !dbg !4732
  %base95 = bitcast %union.tree_node* %60 to %struct.tree_base*, !dbg !4732
  %61 = bitcast %struct.tree_base* %base95 to i64*, !dbg !4732
  %bf.load96 = load i64, i64* %61, align 8, !dbg !4732
  %bf.clear97 = and i64 %bf.load96, 65535, !dbg !4732
  %bf.cast98 = trunc i64 %bf.clear97 to i32, !dbg !4732
  %cmp99 = icmp eq i32 %bf.cast98, 66, !dbg !4734
  br i1 %cmp99, label %land.lhs.true101, label %if.end167, !dbg !4735

land.lhs.true101:                                 ; preds = %if.end94
  %62 = load %union.tree_node*, %union.tree_node** %sub, align 8, !dbg !4736
  %exp102 = bitcast %union.tree_node* %62 to %struct.tree_exp*, !dbg !4736
  %operands103 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp102, i32 0, i32 3, !dbg !4736
  %arrayidx104 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands103, i64 0, i64 1, !dbg !4736
  %63 = load %union.tree_node*, %union.tree_node** %arrayidx104, align 8, !dbg !4736
  %base105 = bitcast %union.tree_node* %63 to %struct.tree_base*, !dbg !4736
  %64 = bitcast %struct.tree_base* %base105 to i64*, !dbg !4736
  %bf.load106 = load i64, i64* %64, align 8, !dbg !4736
  %bf.clear107 = and i64 %bf.load106, 65535, !dbg !4736
  %bf.cast108 = trunc i64 %bf.clear107 to i32, !dbg !4736
  %cmp109 = icmp eq i32 %bf.cast108, 23, !dbg !4737
  br i1 %cmp109, label %if.then111, label %if.end167, !dbg !4738

if.then111:                                       ; preds = %land.lhs.true101
  call void @llvm.dbg.declare(metadata %union.tree_node** %op00, metadata !4739, metadata !DIExpression()), !dbg !4741
  %65 = load %union.tree_node*, %union.tree_node** %sub, align 8, !dbg !4742
  %exp112 = bitcast %union.tree_node* %65 to %struct.tree_exp*, !dbg !4742
  %operands113 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp112, i32 0, i32 3, !dbg !4742
  %arrayidx114 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands113, i64 0, i64 0, !dbg !4742
  %66 = load %union.tree_node*, %union.tree_node** %arrayidx114, align 8, !dbg !4742
  store %union.tree_node* %66, %union.tree_node** %op00, align 8, !dbg !4741
  call void @llvm.dbg.declare(metadata %union.tree_node** %op01, metadata !4743, metadata !DIExpression()), !dbg !4744
  %67 = load %union.tree_node*, %union.tree_node** %sub, align 8, !dbg !4745
  %exp115 = bitcast %union.tree_node* %67 to %struct.tree_exp*, !dbg !4745
  %operands116 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp115, i32 0, i32 3, !dbg !4745
  %arrayidx117 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands116, i64 0, i64 1, !dbg !4745
  %68 = load %union.tree_node*, %union.tree_node** %arrayidx117, align 8, !dbg !4745
  store %union.tree_node* %68, %union.tree_node** %op01, align 8, !dbg !4744
  call void @llvm.dbg.declare(metadata %union.tree_node** %op00type, metadata !4746, metadata !DIExpression()), !dbg !4747
  %69 = load %union.tree_node*, %union.tree_node** %op00, align 8, !dbg !4748
  %call118 = call %union.tree_node* @tree_strip_nop_conversions(%union.tree_node* %69), !dbg !4748
  store %union.tree_node* %call118, %union.tree_node** %op00, align 8, !dbg !4748
  %70 = load %union.tree_node*, %union.tree_node** %op00, align 8, !dbg !4749
  %common119 = bitcast %union.tree_node* %70 to %struct.tree_common*, !dbg !4749
  %type120 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common119, i32 0, i32 2, !dbg !4749
  %71 = load %union.tree_node*, %union.tree_node** %type120, align 8, !dbg !4749
  store %union.tree_node* %71, %union.tree_node** %op00type, align 8, !dbg !4750
  %72 = load %union.tree_node*, %union.tree_node** %op00, align 8, !dbg !4751
  %base121 = bitcast %union.tree_node* %72 to %struct.tree_base*, !dbg !4751
  %73 = bitcast %struct.tree_base* %base121 to i64*, !dbg !4751
  %bf.load122 = load i64, i64* %73, align 8, !dbg !4751
  %bf.clear123 = and i64 %bf.load122, 65535, !dbg !4751
  %bf.cast124 = trunc i64 %bf.clear123 to i32, !dbg !4751
  %cmp125 = icmp eq i32 %bf.cast124, 121, !dbg !4753
  br i1 %cmp125, label %land.lhs.true127, label %if.end166, !dbg !4754

land.lhs.true127:                                 ; preds = %if.then111
  %74 = load %union.tree_node*, %union.tree_node** %op00type, align 8, !dbg !4755
  %common128 = bitcast %union.tree_node* %74 to %struct.tree_common*, !dbg !4755
  %type129 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common128, i32 0, i32 2, !dbg !4755
  %75 = load %union.tree_node*, %union.tree_node** %type129, align 8, !dbg !4755
  %base130 = bitcast %union.tree_node* %75 to %struct.tree_base*, !dbg !4755
  %76 = bitcast %struct.tree_base* %base130 to i64*, !dbg !4755
  %bf.load131 = load i64, i64* %76, align 8, !dbg !4755
  %bf.clear132 = and i64 %bf.load131, 65535, !dbg !4755
  %bf.cast133 = trunc i64 %bf.clear132 to i32, !dbg !4755
  %cmp134 = icmp eq i32 %bf.cast133, 14, !dbg !4756
  br i1 %cmp134, label %land.lhs.true136, label %if.end166, !dbg !4757

land.lhs.true136:                                 ; preds = %land.lhs.true127
  %77 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4758
  %78 = load %union.tree_node*, %union.tree_node** %op00type, align 8, !dbg !4759
  %common137 = bitcast %union.tree_node* %78 to %struct.tree_common*, !dbg !4759
  %type138 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common137, i32 0, i32 2, !dbg !4759
  %79 = load %union.tree_node*, %union.tree_node** %type138, align 8, !dbg !4759
  %common139 = bitcast %union.tree_node* %79 to %struct.tree_common*, !dbg !4759
  %type140 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common139, i32 0, i32 2, !dbg !4759
  %80 = load %union.tree_node*, %union.tree_node** %type140, align 8, !dbg !4759
  %call141 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %77, %union.tree_node* %80), !dbg !4760
  %conv142 = zext i8 %call141 to i32, !dbg !4760
  %tobool143 = icmp ne i32 %conv142, 0, !dbg !4760
  br i1 %tobool143, label %if.then144, label %if.end166, !dbg !4761

if.then144:                                       ; preds = %land.lhs.true136
  call void @llvm.dbg.declare(metadata i64* %offset, metadata !4762, metadata !DIExpression()), !dbg !4764
  %81 = load %union.tree_node*, %union.tree_node** %op01, align 8, !dbg !4765
  %call145 = call i64 @tree_low_cst(%union.tree_node* %81, i32 0), !dbg !4766
  store i64 %call145, i64* %offset, align 8, !dbg !4764
  call void @llvm.dbg.declare(metadata %union.tree_node** %part_width146, metadata !4767, metadata !DIExpression()), !dbg !4768
  %82 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4769
  %type147 = bitcast %union.tree_node* %82 to %struct.tree_type*, !dbg !4769
  %size148 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type147, i32 0, i32 2, !dbg !4769
  %83 = load %union.tree_node*, %union.tree_node** %size148, align 8, !dbg !4769
  store %union.tree_node* %83, %union.tree_node** %part_width146, align 8, !dbg !4768
  call void @llvm.dbg.declare(metadata i64* %part_widthi, metadata !4770, metadata !DIExpression()), !dbg !4771
  %84 = load %union.tree_node*, %union.tree_node** %part_width146, align 8, !dbg !4772
  %call149 = call i64 @tree_low_cst(%union.tree_node* %84, i32 0), !dbg !4773
  %div = sdiv i64 %call149, 8, !dbg !4774
  store i64 %div, i64* %part_widthi, align 8, !dbg !4771
  call void @llvm.dbg.declare(metadata i64* %indexi, metadata !4775, metadata !DIExpression()), !dbg !4776
  %85 = load i64, i64* %offset, align 8, !dbg !4777
  %mul = mul nsw i64 %85, 8, !dbg !4778
  store i64 %mul, i64* %indexi, align 8, !dbg !4776
  call void @llvm.dbg.declare(metadata %union.tree_node** %index150, metadata !4779, metadata !DIExpression()), !dbg !4780
  %86 = load i64, i64* %indexi, align 8, !dbg !4781
  %call151 = call %union.tree_node* @size_int_kind(i64 %86, i32 2), !dbg !4781
  store %union.tree_node* %call151, %union.tree_node** %index150, align 8, !dbg !4780
  %87 = load i64, i64* %offset, align 8, !dbg !4782
  %88 = load i64, i64* %part_widthi, align 8, !dbg !4784
  %div152 = udiv i64 %87, %88, !dbg !4785
  %89 = load %union.tree_node*, %union.tree_node** %op00type, align 8, !dbg !4786
  %common153 = bitcast %union.tree_node* %89 to %struct.tree_common*, !dbg !4786
  %type154 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common153, i32 0, i32 2, !dbg !4786
  %90 = load %union.tree_node*, %union.tree_node** %type154, align 8, !dbg !4786
  %type155 = bitcast %union.tree_node* %90 to %struct.tree_type*, !dbg !4786
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type155, i32 0, i32 6, !dbg !4786
  %bf.load156 = load i32, i32* %precision, align 4, !dbg !4786
  %bf.clear157 = and i32 %bf.load156, 1023, !dbg !4786
  %sh_prom = zext i32 %bf.clear157 to i64, !dbg !4786
  %shl = shl i64 1, %sh_prom, !dbg !4786
  %cmp158 = icmp ule i64 %div152, %shl, !dbg !4787
  br i1 %cmp158, label %if.then160, label %if.end165, !dbg !4788

if.then160:                                       ; preds = %if.then144
  %91 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4789
  %92 = load %union.tree_node*, %union.tree_node** %op00, align 8, !dbg !4789
  %exp161 = bitcast %union.tree_node* %92 to %struct.tree_exp*, !dbg !4789
  %operands162 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp161, i32 0, i32 3, !dbg !4789
  %arrayidx163 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands162, i64 0, i64 0, !dbg !4789
  %93 = load %union.tree_node*, %union.tree_node** %arrayidx163, align 8, !dbg !4789
  %94 = load %union.tree_node*, %union.tree_node** %part_width146, align 8, !dbg !4789
  %95 = load %union.tree_node*, %union.tree_node** %index150, align 8, !dbg !4789
  %call164 = call %union.tree_node* @fold_build3_stat_loc(i32 0, i32 42, %union.tree_node* %91, %union.tree_node* %93, %union.tree_node* %94, %union.tree_node* %95), !dbg !4789
  store %union.tree_node* %call164, %union.tree_node** %retval, align 8, !dbg !4790
  br label %return, !dbg !4790

if.end165:                                        ; preds = %if.then144
  br label %if.end166, !dbg !4791

if.end166:                                        ; preds = %if.end165, %land.lhs.true136, %land.lhs.true127, %if.then111
  br label %if.end167, !dbg !4792

if.end167:                                        ; preds = %if.end166, %land.lhs.true101, %if.end94
  %96 = load %union.tree_node*, %union.tree_node** %sub, align 8, !dbg !4793
  %base168 = bitcast %union.tree_node* %96 to %struct.tree_base*, !dbg !4793
  %97 = bitcast %struct.tree_base* %base168 to i64*, !dbg !4793
  %bf.load169 = load i64, i64* %97, align 8, !dbg !4793
  %bf.clear170 = and i64 %bf.load169, 65535, !dbg !4793
  %bf.cast171 = trunc i64 %bf.clear170 to i32, !dbg !4793
  %cmp172 = icmp eq i32 %bf.cast171, 66, !dbg !4795
  br i1 %cmp172, label %land.lhs.true174, label %if.end232, !dbg !4796

land.lhs.true174:                                 ; preds = %if.end167
  %98 = load %union.tree_node*, %union.tree_node** %sub, align 8, !dbg !4797
  %exp175 = bitcast %union.tree_node* %98 to %struct.tree_exp*, !dbg !4797
  %operands176 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp175, i32 0, i32 3, !dbg !4797
  %arrayidx177 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands176, i64 0, i64 1, !dbg !4797
  %99 = load %union.tree_node*, %union.tree_node** %arrayidx177, align 8, !dbg !4797
  %base178 = bitcast %union.tree_node* %99 to %struct.tree_base*, !dbg !4797
  %100 = bitcast %struct.tree_base* %base178 to i64*, !dbg !4797
  %bf.load179 = load i64, i64* %100, align 8, !dbg !4797
  %bf.clear180 = and i64 %bf.load179, 65535, !dbg !4797
  %bf.cast181 = trunc i64 %bf.clear180 to i32, !dbg !4797
  %cmp182 = icmp eq i32 %bf.cast181, 23, !dbg !4798
  br i1 %cmp182, label %if.then184, label %if.end232, !dbg !4799

if.then184:                                       ; preds = %land.lhs.true174
  call void @llvm.dbg.declare(metadata %union.tree_node** %op00185, metadata !4800, metadata !DIExpression()), !dbg !4802
  %101 = load %union.tree_node*, %union.tree_node** %sub, align 8, !dbg !4803
  %exp186 = bitcast %union.tree_node* %101 to %struct.tree_exp*, !dbg !4803
  %operands187 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp186, i32 0, i32 3, !dbg !4803
  %arrayidx188 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands187, i64 0, i64 0, !dbg !4803
  %102 = load %union.tree_node*, %union.tree_node** %arrayidx188, align 8, !dbg !4803
  store %union.tree_node* %102, %union.tree_node** %op00185, align 8, !dbg !4802
  call void @llvm.dbg.declare(metadata %union.tree_node** %op01189, metadata !4804, metadata !DIExpression()), !dbg !4805
  %103 = load %union.tree_node*, %union.tree_node** %sub, align 8, !dbg !4806
  %exp190 = bitcast %union.tree_node* %103 to %struct.tree_exp*, !dbg !4806
  %operands191 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp190, i32 0, i32 3, !dbg !4806
  %arrayidx192 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands191, i64 0, i64 1, !dbg !4806
  %104 = load %union.tree_node*, %union.tree_node** %arrayidx192, align 8, !dbg !4806
  store %union.tree_node* %104, %union.tree_node** %op01189, align 8, !dbg !4805
  call void @llvm.dbg.declare(metadata %union.tree_node** %op00type193, metadata !4807, metadata !DIExpression()), !dbg !4808
  %105 = load %union.tree_node*, %union.tree_node** %op00185, align 8, !dbg !4809
  %call194 = call %union.tree_node* @tree_strip_nop_conversions(%union.tree_node* %105), !dbg !4809
  store %union.tree_node* %call194, %union.tree_node** %op00185, align 8, !dbg !4809
  %106 = load %union.tree_node*, %union.tree_node** %op00185, align 8, !dbg !4810
  %common195 = bitcast %union.tree_node* %106 to %struct.tree_common*, !dbg !4810
  %type196 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common195, i32 0, i32 2, !dbg !4810
  %107 = load %union.tree_node*, %union.tree_node** %type196, align 8, !dbg !4810
  store %union.tree_node* %107, %union.tree_node** %op00type193, align 8, !dbg !4811
  %108 = load %union.tree_node*, %union.tree_node** %op00185, align 8, !dbg !4812
  %base197 = bitcast %union.tree_node* %108 to %struct.tree_base*, !dbg !4812
  %109 = bitcast %struct.tree_base* %base197 to i64*, !dbg !4812
  %bf.load198 = load i64, i64* %109, align 8, !dbg !4812
  %bf.clear199 = and i64 %bf.load198, 65535, !dbg !4812
  %bf.cast200 = trunc i64 %bf.clear199 to i32, !dbg !4812
  %cmp201 = icmp eq i32 %bf.cast200, 121, !dbg !4814
  br i1 %cmp201, label %land.lhs.true203, label %if.end231, !dbg !4815

land.lhs.true203:                                 ; preds = %if.then184
  %110 = load %union.tree_node*, %union.tree_node** %op00type193, align 8, !dbg !4816
  %common204 = bitcast %union.tree_node* %110 to %struct.tree_common*, !dbg !4816
  %type205 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common204, i32 0, i32 2, !dbg !4816
  %111 = load %union.tree_node*, %union.tree_node** %type205, align 8, !dbg !4816
  %base206 = bitcast %union.tree_node* %111 to %struct.tree_base*, !dbg !4816
  %112 = bitcast %struct.tree_base* %base206 to i64*, !dbg !4816
  %bf.load207 = load i64, i64* %112, align 8, !dbg !4816
  %bf.clear208 = and i64 %bf.load207, 65535, !dbg !4816
  %bf.cast209 = trunc i64 %bf.clear208 to i32, !dbg !4816
  %cmp210 = icmp eq i32 %bf.cast209, 13, !dbg !4817
  br i1 %cmp210, label %land.lhs.true212, label %if.end231, !dbg !4818

land.lhs.true212:                                 ; preds = %land.lhs.true203
  %113 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4819
  %114 = load %union.tree_node*, %union.tree_node** %op00type193, align 8, !dbg !4820
  %common213 = bitcast %union.tree_node* %114 to %struct.tree_common*, !dbg !4820
  %type214 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common213, i32 0, i32 2, !dbg !4820
  %115 = load %union.tree_node*, %union.tree_node** %type214, align 8, !dbg !4820
  %common215 = bitcast %union.tree_node* %115 to %struct.tree_common*, !dbg !4820
  %type216 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common215, i32 0, i32 2, !dbg !4820
  %116 = load %union.tree_node*, %union.tree_node** %type216, align 8, !dbg !4820
  %call217 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %113, %union.tree_node* %116), !dbg !4821
  %conv218 = zext i8 %call217 to i32, !dbg !4821
  %tobool219 = icmp ne i32 %conv218, 0, !dbg !4821
  br i1 %tobool219, label %if.then220, label %if.end231, !dbg !4822

if.then220:                                       ; preds = %land.lhs.true212
  call void @llvm.dbg.declare(metadata %union.tree_node** %size221, metadata !4823, metadata !DIExpression()), !dbg !4825
  %117 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4826
  %type222 = bitcast %union.tree_node* %117 to %struct.tree_type*, !dbg !4826
  %size_unit = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type222, i32 0, i32 3, !dbg !4826
  %118 = load %union.tree_node*, %union.tree_node** %size_unit, align 8, !dbg !4826
  store %union.tree_node* %118, %union.tree_node** %size221, align 8, !dbg !4825
  %119 = load %union.tree_node*, %union.tree_node** %size221, align 8, !dbg !4827
  %120 = load %union.tree_node*, %union.tree_node** %op01189, align 8, !dbg !4829
  %call223 = call i32 @tree_int_cst_equal(%union.tree_node* %119, %union.tree_node* %120), !dbg !4830
  %tobool224 = icmp ne i32 %call223, 0, !dbg !4830
  br i1 %tobool224, label %if.then225, label %if.end230, !dbg !4831

if.then225:                                       ; preds = %if.then220
  %121 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4832
  %122 = load %union.tree_node*, %union.tree_node** %op00185, align 8, !dbg !4832
  %exp226 = bitcast %union.tree_node* %122 to %struct.tree_exp*, !dbg !4832
  %operands227 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp226, i32 0, i32 3, !dbg !4832
  %arrayidx228 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands227, i64 0, i64 0, !dbg !4832
  %123 = load %union.tree_node*, %union.tree_node** %arrayidx228, align 8, !dbg !4832
  %call229 = call %union.tree_node* @fold_build1_stat_loc(i32 0, i32 44, %union.tree_node* %121, %union.tree_node* %123), !dbg !4832
  store %union.tree_node* %call229, %union.tree_node** %retval, align 8, !dbg !4833
  br label %return, !dbg !4833

if.end230:                                        ; preds = %if.then220
  br label %if.end231, !dbg !4834

if.end231:                                        ; preds = %if.end230, %land.lhs.true212, %land.lhs.true203, %if.then184
  br label %if.end232, !dbg !4835

if.end232:                                        ; preds = %if.end231, %land.lhs.true174, %if.end167
  %124 = load %union.tree_node*, %union.tree_node** %subtype, align 8, !dbg !4836
  %common233 = bitcast %union.tree_node* %124 to %struct.tree_common*, !dbg !4836
  %type234 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common233, i32 0, i32 2, !dbg !4836
  %125 = load %union.tree_node*, %union.tree_node** %type234, align 8, !dbg !4836
  %base235 = bitcast %union.tree_node* %125 to %struct.tree_base*, !dbg !4836
  %126 = bitcast %struct.tree_base* %base235 to i64*, !dbg !4836
  %bf.load236 = load i64, i64* %126, align 8, !dbg !4836
  %bf.clear237 = and i64 %bf.load236, 65535, !dbg !4836
  %bf.cast238 = trunc i64 %bf.clear237 to i32, !dbg !4836
  %cmp239 = icmp eq i32 %bf.cast238, 15, !dbg !4838
  br i1 %cmp239, label %land.lhs.true241, label %if.end294, !dbg !4839

land.lhs.true241:                                 ; preds = %if.end232
  %127 = load %union.tree_node*, %union.tree_node** %subtype, align 8, !dbg !4840
  %common242 = bitcast %union.tree_node* %127 to %struct.tree_common*, !dbg !4840
  %type243 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common242, i32 0, i32 2, !dbg !4840
  %128 = load %union.tree_node*, %union.tree_node** %type243, align 8, !dbg !4840
  %common244 = bitcast %union.tree_node* %128 to %struct.tree_common*, !dbg !4840
  %type245 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common244, i32 0, i32 2, !dbg !4840
  %129 = load %union.tree_node*, %union.tree_node** %type245, align 8, !dbg !4840
  %type246 = bitcast %union.tree_node* %129 to %struct.tree_type*, !dbg !4840
  %size247 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type246, i32 0, i32 2, !dbg !4840
  %130 = load %union.tree_node*, %union.tree_node** %size247, align 8, !dbg !4840
  %base248 = bitcast %union.tree_node* %130 to %struct.tree_base*, !dbg !4840
  %131 = bitcast %struct.tree_base* %base248 to i64*, !dbg !4840
  %bf.load249 = load i64, i64* %131, align 8, !dbg !4840
  %bf.clear250 = and i64 %bf.load249, 65535, !dbg !4840
  %bf.cast251 = trunc i64 %bf.clear250 to i32, !dbg !4840
  %cmp252 = icmp eq i32 %bf.cast251, 23, !dbg !4841
  br i1 %cmp252, label %land.lhs.true254, label %if.end294, !dbg !4842

land.lhs.true254:                                 ; preds = %land.lhs.true241
  %132 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4843
  %133 = load %union.tree_node*, %union.tree_node** %subtype, align 8, !dbg !4844
  %common255 = bitcast %union.tree_node* %133 to %struct.tree_common*, !dbg !4844
  %type256 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common255, i32 0, i32 2, !dbg !4844
  %134 = load %union.tree_node*, %union.tree_node** %type256, align 8, !dbg !4844
  %common257 = bitcast %union.tree_node* %134 to %struct.tree_common*, !dbg !4844
  %type258 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common257, i32 0, i32 2, !dbg !4844
  %135 = load %union.tree_node*, %union.tree_node** %type258, align 8, !dbg !4844
  %call259 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %132, %union.tree_node* %135), !dbg !4845
  %conv260 = zext i8 %call259 to i32, !dbg !4845
  %tobool261 = icmp ne i32 %conv260, 0, !dbg !4845
  br i1 %tobool261, label %if.then262, label %if.end294, !dbg !4846

if.then262:                                       ; preds = %land.lhs.true254
  call void @llvm.dbg.declare(metadata %union.tree_node** %type_domain263, metadata !4847, metadata !DIExpression()), !dbg !4849
  call void @llvm.dbg.declare(metadata %union.tree_node** %min_val264, metadata !4850, metadata !DIExpression()), !dbg !4851
  %136 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 17), align 8, !dbg !4852
  store %union.tree_node* %136, %union.tree_node** %min_val264, align 8, !dbg !4851
  call void @llvm.dbg.declare(metadata %union.tree_node** %osub, metadata !4853, metadata !DIExpression()), !dbg !4854
  %137 = load %union.tree_node*, %union.tree_node** %sub, align 8, !dbg !4855
  store %union.tree_node* %137, %union.tree_node** %osub, align 8, !dbg !4854
  %138 = load %union.tree_node*, %union.tree_node** %sub, align 8, !dbg !4856
  %call265 = call %union.tree_node* @gimple_fold_indirect_ref(%union.tree_node* %138), !dbg !4857
  store %union.tree_node* %call265, %union.tree_node** %sub, align 8, !dbg !4858
  %139 = load %union.tree_node*, %union.tree_node** %sub, align 8, !dbg !4859
  %tobool266 = icmp ne %union.tree_node* %139, null, !dbg !4859
  br i1 %tobool266, label %if.end271, label %if.then267, !dbg !4861

if.then267:                                       ; preds = %if.then262
  %140 = load %union.tree_node*, %union.tree_node** %subtype, align 8, !dbg !4862
  %common268 = bitcast %union.tree_node* %140 to %struct.tree_common*, !dbg !4862
  %type269 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common268, i32 0, i32 2, !dbg !4862
  %141 = load %union.tree_node*, %union.tree_node** %type269, align 8, !dbg !4862
  %142 = load %union.tree_node*, %union.tree_node** %osub, align 8, !dbg !4862
  %call270 = call %union.tree_node* @build1_stat(i32 47, %union.tree_node* %141, %union.tree_node* %142), !dbg !4862
  store %union.tree_node* %call270, %union.tree_node** %sub, align 8, !dbg !4863
  br label %if.end271, !dbg !4864

if.end271:                                        ; preds = %if.then267, %if.then262
  %143 = load %union.tree_node*, %union.tree_node** %sub, align 8, !dbg !4865
  %common272 = bitcast %union.tree_node* %143 to %struct.tree_common*, !dbg !4865
  %type273 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common272, i32 0, i32 2, !dbg !4865
  %144 = load %union.tree_node*, %union.tree_node** %type273, align 8, !dbg !4865
  %type274 = bitcast %union.tree_node* %144 to %struct.tree_type*, !dbg !4865
  %values275 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type274, i32 0, i32 1, !dbg !4865
  %145 = load %union.tree_node*, %union.tree_node** %values275, align 8, !dbg !4865
  store %union.tree_node* %145, %union.tree_node** %type_domain263, align 8, !dbg !4866
  %146 = load %union.tree_node*, %union.tree_node** %type_domain263, align 8, !dbg !4867
  %tobool276 = icmp ne %union.tree_node* %146, null, !dbg !4867
  br i1 %tobool276, label %land.lhs.true277, label %if.end284, !dbg !4869

land.lhs.true277:                                 ; preds = %if.end271
  %147 = load %union.tree_node*, %union.tree_node** %type_domain263, align 8, !dbg !4870
  %type278 = bitcast %union.tree_node* %147 to %struct.tree_type*, !dbg !4870
  %minval279 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type278, i32 0, i32 13, !dbg !4870
  %148 = load %union.tree_node*, %union.tree_node** %minval279, align 8, !dbg !4870
  %tobool280 = icmp ne %union.tree_node* %148, null, !dbg !4870
  br i1 %tobool280, label %if.then281, label %if.end284, !dbg !4871

if.then281:                                       ; preds = %land.lhs.true277
  %149 = load %union.tree_node*, %union.tree_node** %type_domain263, align 8, !dbg !4872
  %type282 = bitcast %union.tree_node* %149 to %struct.tree_type*, !dbg !4872
  %minval283 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type282, i32 0, i32 13, !dbg !4872
  %150 = load %union.tree_node*, %union.tree_node** %minval283, align 8, !dbg !4872
  store %union.tree_node* %150, %union.tree_node** %min_val264, align 8, !dbg !4873
  br label %if.end284, !dbg !4874

if.end284:                                        ; preds = %if.then281, %land.lhs.true277, %if.end271
  %151 = load %union.tree_node*, %union.tree_node** %min_val264, align 8, !dbg !4875
  %base285 = bitcast %union.tree_node* %151 to %struct.tree_base*, !dbg !4875
  %152 = bitcast %struct.tree_base* %base285 to i64*, !dbg !4875
  %bf.load286 = load i64, i64* %152, align 8, !dbg !4875
  %bf.clear287 = and i64 %bf.load286, 65535, !dbg !4875
  %bf.cast288 = trunc i64 %bf.clear287 to i32, !dbg !4875
  %cmp289 = icmp eq i32 %bf.cast288, 23, !dbg !4877
  br i1 %cmp289, label %if.then291, label %if.end293, !dbg !4878

if.then291:                                       ; preds = %if.end284
  %153 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4879
  %154 = load %union.tree_node*, %union.tree_node** %sub, align 8, !dbg !4879
  %155 = load %union.tree_node*, %union.tree_node** %min_val264, align 8, !dbg !4879
  %call292 = call %union.tree_node* @build4_stat(i32 45, %union.tree_node* %153, %union.tree_node* %154, %union.tree_node* %155, %union.tree_node* null, %union.tree_node* null), !dbg !4879
  store %union.tree_node* %call292, %union.tree_node** %retval, align 8, !dbg !4880
  br label %return, !dbg !4880

if.end293:                                        ; preds = %if.end284
  br label %if.end294, !dbg !4881

if.end294:                                        ; preds = %if.end293, %land.lhs.true254, %land.lhs.true241, %if.end232
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !4882
  br label %return, !dbg !4882

return:                                           ; preds = %if.end294, %if.then291, %if.then225, %if.then160, %if.then86, %if.then71, %if.then56, %if.then20, %if.then
  %156 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !4883
  ret %union.tree_node* %156, !dbg !4883
}

declare dso_local %union.tree_node* @tree_strip_nop_conversions(%union.tree_node*) #3

declare dso_local zeroext i8 @useless_type_conversion_p(%union.tree_node*, %union.tree_node*) #3

declare dso_local %union.tree_node* @build4_stat(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*) #3

declare dso_local %union.tree_node* @fold_build1_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*) #3

declare dso_local %union.tree_node* @size_int_kind(i64, i32) #3

declare dso_local %union.tree_node* @fold_build3_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*) #3

declare dso_local i64 @tree_low_cst(%union.tree_node*, i32) #3

declare dso_local i32 @tree_int_cst_equal(%union.tree_node*, %union.tree_node*) #3

declare dso_local %struct.gimple_seq_d* @gimple_seq_alloc() #3

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %s) #0 !dbg !4884 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !4887, metadata !DIExpression()), !dbg !4888
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !4889
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !4889
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4889

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !4890
  %last = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 1, !dbg !4891
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %last, align 8, !dbg !4891
  br label %cond.end, !dbg !4889

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4889

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !4889
  ret %struct.gimple_seq_node_d* %cond, !dbg !4892
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gimplify_expr(%union.tree_node** %expr_p, %struct.gimple_seq_d** %pre_p, %struct.gimple_seq_d** %post_p, i8 (%union.tree_node*)* %gimple_test_f, i32 %fallback) #0 !dbg !4893 {
entry:
  %retval = alloca i32, align 4
  %expr_p.addr = alloca %union.tree_node**, align 8
  %pre_p.addr = alloca %struct.gimple_seq_d**, align 8
  %post_p.addr = alloca %struct.gimple_seq_d**, align 8
  %gimple_test_f.addr = alloca i8 (%union.tree_node*)*, align 8
  %fallback.addr = alloca i32, align 4
  %tmp = alloca %union.tree_node*, align 8
  %internal_pre = alloca %struct.gimple_seq_d*, align 8
  %internal_post = alloca %struct.gimple_seq_d*, align 8
  %save_expr = alloca %union.tree_node*, align 8
  %is_statement = alloca i8, align 1
  %saved_location = alloca i32, align 4
  %ret = alloca i32, align 4
  %pre_last_gsi = alloca %struct.gimple_stmt_iterator, align 8
  %post_last_gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp90 = alloca %struct.gimple_stmt_iterator, align 8
  %tmp91 = alloca %struct.gimple_stmt_iterator, align 8
  %type222 = alloca %union.tree_node*, align 8
  %ix = alloca i64, align 8
  %ce = alloca %struct.constructor_elt_d*, align 8
  %temp = alloca %union.tree_node*, align 8
  %r0 = alloca i32, align 4
  %r1 = alloca i32, align 4
  %r2 = alloca i32, align 4
  %r0437 = alloca i32, align 4
  %r1438 = alloca i32, align 4
  %eval = alloca %struct.gimple_seq_d*, align 8
  %cleanup = alloca %struct.gimple_seq_d*, align 8
  %try_ = alloca %union.gimple_statement_d*, align 8
  %c = alloca %union.gimple_statement_d*, align 8
  %handler = alloca %struct.gimple_seq_d*, align 8
  %ehf = alloca %union.gimple_statement_d*, align 8
  %failure = alloca %struct.gimple_seq_d*, align 8
  %r0539 = alloca i32, align 4
  %r1540 = alloca i32, align 4
  %body = alloca %struct.gimple_seq_d*, align 8
  %g = alloca %union.gimple_statement_d*, align 8
  %type764 = alloca %union.tree_node*, align 8
  %r0828 = alloca i32, align 4
  %r1829 = alloca i32, align 4
  %code = alloca i32, align 4
  %type972 = alloca %union.tree_node*, align 8
  %tmp976 = alloca %union.tree_node*, align 8
  store %union.tree_node** %expr_p, %union.tree_node*** %expr_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %expr_p.addr, metadata !4897, metadata !DIExpression()), !dbg !4898
  store %struct.gimple_seq_d** %pre_p, %struct.gimple_seq_d*** %pre_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %pre_p.addr, metadata !4899, metadata !DIExpression()), !dbg !4900
  store %struct.gimple_seq_d** %post_p, %struct.gimple_seq_d*** %post_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %post_p.addr, metadata !4901, metadata !DIExpression()), !dbg !4902
  store i8 (%union.tree_node*)* %gimple_test_f, i8 (%union.tree_node*)** %gimple_test_f.addr, align 8
  call void @llvm.dbg.declare(metadata i8 (%union.tree_node*)** %gimple_test_f.addr, metadata !4903, metadata !DIExpression()), !dbg !4904
  store i32 %fallback, i32* %fallback.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fallback.addr, metadata !4905, metadata !DIExpression()), !dbg !4906
  call void @llvm.dbg.declare(metadata %union.tree_node** %tmp, metadata !4907, metadata !DIExpression()), !dbg !4908
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %internal_pre, metadata !4909, metadata !DIExpression()), !dbg !4910
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %internal_pre, align 8, !dbg !4910
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %internal_post, metadata !4911, metadata !DIExpression()), !dbg !4912
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %internal_post, align 8, !dbg !4912
  call void @llvm.dbg.declare(metadata %union.tree_node** %save_expr, metadata !4913, metadata !DIExpression()), !dbg !4914
  call void @llvm.dbg.declare(metadata i8* %is_statement, metadata !4915, metadata !DIExpression()), !dbg !4916
  call void @llvm.dbg.declare(metadata i32* %saved_location, metadata !4917, metadata !DIExpression()), !dbg !4918
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !4919, metadata !DIExpression()), !dbg !4920
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %pre_last_gsi, metadata !4921, metadata !DIExpression()), !dbg !4922
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %post_last_gsi, metadata !4923, metadata !DIExpression()), !dbg !4924
  %0 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !4925
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !4926
  store %union.tree_node* %1, %union.tree_node** %save_expr, align 8, !dbg !4927
  %2 = load %union.tree_node*, %union.tree_node** %save_expr, align 8, !dbg !4928
  %cmp = icmp eq %union.tree_node* %2, null, !dbg !4930
  br i1 %cmp, label %if.then, label %if.end, !dbg !4931

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4, !dbg !4932
  br label %return, !dbg !4932

if.end:                                           ; preds = %entry
  %3 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** %gimple_test_f.addr, align 8, !dbg !4933
  %cmp1 = icmp eq i8 (%union.tree_node*)* %3, @is_gimple_stmt, !dbg !4934
  %conv = zext i1 %cmp1 to i32, !dbg !4934
  %conv2 = trunc i32 %conv to i8, !dbg !4933
  store i8 %conv2, i8* %is_statement, align 1, !dbg !4935
  %4 = load i8, i8* %is_statement, align 1, !dbg !4936
  %tobool = icmp ne i8 %4, 0, !dbg !4936
  br i1 %tobool, label %if.then3, label %if.end5, !dbg !4938

if.then3:                                         ; preds = %if.end
  %5 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !4939
  %tobool4 = icmp ne %struct.gimple_seq_d** %5, null, !dbg !4939
  br i1 %tobool4, label %cond.false, label %cond.true, !dbg !4939

cond.true:                                        ; preds = %if.then3
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 6467, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4939
  br label %cond.end, !dbg !4939

cond.false:                                       ; preds = %if.then3
  br label %cond.end, !dbg !4939

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4939
  br label %if.end5, !dbg !4939

if.end5:                                          ; preds = %cond.end, %if.end
  %6 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** %gimple_test_f.addr, align 8, !dbg !4940
  %cmp6 = icmp eq i8 (%union.tree_node*)* %6, @is_gimple_reg, !dbg !4942
  br i1 %cmp6, label %if.then8, label %if.else, !dbg !4943

if.then8:                                         ; preds = %if.end5
  %7 = load i32, i32* %fallback.addr, align 4, !dbg !4944
  %and = and i32 %7, 3, !dbg !4944
  %tobool9 = icmp ne i32 %and, 0, !dbg !4944
  br i1 %tobool9, label %cond.false11, label %cond.true10, !dbg !4944

cond.true10:                                      ; preds = %if.then8
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 6471, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4944
  br label %cond.end12, !dbg !4944

cond.false11:                                     ; preds = %if.then8
  br label %cond.end12, !dbg !4944

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond13 = phi i32 [ 0, %cond.true10 ], [ 0, %cond.false11 ], !dbg !4944
  br label %if.end81, !dbg !4944

if.else:                                          ; preds = %if.end5
  %8 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** %gimple_test_f.addr, align 8, !dbg !4945
  %cmp14 = icmp eq i8 (%union.tree_node*)* %8, @is_gimple_val, !dbg !4947
  br i1 %cmp14, label %if.then36, label %lor.lhs.false, !dbg !4948

lor.lhs.false:                                    ; preds = %if.else
  %9 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** %gimple_test_f.addr, align 8, !dbg !4949
  %cmp16 = icmp eq i8 (%union.tree_node*)* %9, @is_gimple_call_addr, !dbg !4950
  br i1 %cmp16, label %if.then36, label %lor.lhs.false18, !dbg !4951

lor.lhs.false18:                                  ; preds = %lor.lhs.false
  %10 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** %gimple_test_f.addr, align 8, !dbg !4952
  %cmp19 = icmp eq i8 (%union.tree_node*)* %10, @is_gimple_condexpr, !dbg !4953
  br i1 %cmp19, label %if.then36, label %lor.lhs.false21, !dbg !4954

lor.lhs.false21:                                  ; preds = %lor.lhs.false18
  %11 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** %gimple_test_f.addr, align 8, !dbg !4955
  %cmp22 = icmp eq i8 (%union.tree_node*)* %11, @is_gimple_mem_rhs, !dbg !4956
  br i1 %cmp22, label %if.then36, label %lor.lhs.false24, !dbg !4957

lor.lhs.false24:                                  ; preds = %lor.lhs.false21
  %12 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** %gimple_test_f.addr, align 8, !dbg !4958
  %cmp25 = icmp eq i8 (%union.tree_node*)* %12, @is_gimple_mem_rhs_or_call, !dbg !4959
  br i1 %cmp25, label %if.then36, label %lor.lhs.false27, !dbg !4960

lor.lhs.false27:                                  ; preds = %lor.lhs.false24
  %13 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** %gimple_test_f.addr, align 8, !dbg !4961
  %cmp28 = icmp eq i8 (%union.tree_node*)* %13, @is_gimple_reg_rhs, !dbg !4962
  br i1 %cmp28, label %if.then36, label %lor.lhs.false30, !dbg !4963

lor.lhs.false30:                                  ; preds = %lor.lhs.false27
  %14 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** %gimple_test_f.addr, align 8, !dbg !4964
  %cmp31 = icmp eq i8 (%union.tree_node*)* %14, @is_gimple_reg_rhs_or_call, !dbg !4965
  br i1 %cmp31, label %if.then36, label %lor.lhs.false33, !dbg !4966

lor.lhs.false33:                                  ; preds = %lor.lhs.false30
  %15 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** %gimple_test_f.addr, align 8, !dbg !4967
  %cmp34 = icmp eq i8 (%union.tree_node*)* %15, @is_gimple_asm_val, !dbg !4968
  br i1 %cmp34, label %if.then36, label %if.else43, !dbg !4969

if.then36:                                        ; preds = %lor.lhs.false33, %lor.lhs.false30, %lor.lhs.false27, %lor.lhs.false24, %lor.lhs.false21, %lor.lhs.false18, %lor.lhs.false, %if.else
  %16 = load i32, i32* %fallback.addr, align 4, !dbg !4970
  %and37 = and i32 %16, 1, !dbg !4970
  %tobool38 = icmp ne i32 %and37, 0, !dbg !4970
  br i1 %tobool38, label %cond.false40, label %cond.true39, !dbg !4970

cond.true39:                                      ; preds = %if.then36
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 6480, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4970
  br label %cond.end41, !dbg !4970

cond.false40:                                     ; preds = %if.then36
  br label %cond.end41, !dbg !4970

cond.end41:                                       ; preds = %cond.false40, %cond.true39
  %cond42 = phi i32 [ 0, %cond.true39 ], [ 0, %cond.false40 ], !dbg !4970
  br label %if.end80, !dbg !4970

if.else43:                                        ; preds = %lor.lhs.false33
  %17 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** %gimple_test_f.addr, align 8, !dbg !4971
  %cmp44 = icmp eq i8 (%union.tree_node*)* %17, @is_gimple_min_lval, !dbg !4973
  br i1 %cmp44, label %if.then49, label %lor.lhs.false46, !dbg !4974

lor.lhs.false46:                                  ; preds = %if.else43
  %18 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** %gimple_test_f.addr, align 8, !dbg !4975
  %cmp47 = icmp eq i8 (%union.tree_node*)* %18, @is_gimple_lvalue, !dbg !4976
  br i1 %cmp47, label %if.then49, label %if.else56, !dbg !4977

if.then49:                                        ; preds = %lor.lhs.false46, %if.else43
  %19 = load i32, i32* %fallback.addr, align 4, !dbg !4978
  %and50 = and i32 %19, 2, !dbg !4978
  %tobool51 = icmp ne i32 %and50, 0, !dbg !4978
  br i1 %tobool51, label %cond.false53, label %cond.true52, !dbg !4978

cond.true52:                                      ; preds = %if.then49
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 6483, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4978
  br label %cond.end54, !dbg !4978

cond.false53:                                     ; preds = %if.then49
  br label %cond.end54, !dbg !4978

cond.end54:                                       ; preds = %cond.false53, %cond.true52
  %cond55 = phi i32 [ 0, %cond.true52 ], [ 0, %cond.false53 ], !dbg !4978
  br label %if.end79, !dbg !4978

if.else56:                                        ; preds = %lor.lhs.false46
  %20 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** %gimple_test_f.addr, align 8, !dbg !4979
  %cmp57 = icmp eq i8 (%union.tree_node*)* %20, @is_gimple_addressable, !dbg !4981
  br i1 %cmp57, label %if.then59, label %if.else66, !dbg !4982

if.then59:                                        ; preds = %if.else56
  %21 = load i32, i32* %fallback.addr, align 4, !dbg !4983
  %and60 = and i32 %21, 3, !dbg !4983
  %tobool61 = icmp ne i32 %and60, 0, !dbg !4983
  br i1 %tobool61, label %cond.false63, label %cond.true62, !dbg !4983

cond.true62:                                      ; preds = %if.then59
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 6485, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4983
  br label %cond.end64, !dbg !4983

cond.false63:                                     ; preds = %if.then59
  br label %cond.end64, !dbg !4983

cond.end64:                                       ; preds = %cond.false63, %cond.true62
  %cond65 = phi i32 [ 0, %cond.true62 ], [ 0, %cond.false63 ], !dbg !4983
  br label %if.end78, !dbg !4983

if.else66:                                        ; preds = %if.else56
  %22 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** %gimple_test_f.addr, align 8, !dbg !4984
  %cmp67 = icmp eq i8 (%union.tree_node*)* %22, @is_gimple_stmt, !dbg !4986
  br i1 %cmp67, label %if.then69, label %if.else76, !dbg !4987

if.then69:                                        ; preds = %if.else66
  %23 = load i32, i32* %fallback.addr, align 4, !dbg !4988
  %cmp70 = icmp eq i32 %23, 0, !dbg !4988
  br i1 %cmp70, label %cond.false73, label %cond.true72, !dbg !4988

cond.true72:                                      ; preds = %if.then69
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 6487, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4988
  br label %cond.end74, !dbg !4988

cond.false73:                                     ; preds = %if.then69
  br label %cond.end74, !dbg !4988

cond.end74:                                       ; preds = %cond.false73, %cond.true72
  %cond75 = phi i32 [ 0, %cond.true72 ], [ 0, %cond.false73 ], !dbg !4988
  br label %if.end77, !dbg !4988

if.else76:                                        ; preds = %if.else66
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 6493, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4989
  br label %if.end77

if.end77:                                         ; preds = %if.else76, %cond.end74
  br label %if.end78

if.end78:                                         ; preds = %if.end77, %cond.end64
  br label %if.end79

if.end79:                                         ; preds = %if.end78, %cond.end54
  br label %if.end80

if.end80:                                         ; preds = %if.end79, %cond.end41
  br label %if.end81

if.end81:                                         ; preds = %if.end80, %cond.end12
  %24 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !4991
  %cmp82 = icmp eq %struct.gimple_seq_d** %24, null, !dbg !4993
  br i1 %cmp82, label %if.then84, label %if.end85, !dbg !4994

if.then84:                                        ; preds = %if.end81
  store %struct.gimple_seq_d** %internal_pre, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !4995
  br label %if.end85, !dbg !4996

if.end85:                                         ; preds = %if.then84, %if.end81
  %25 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !4997
  %cmp86 = icmp eq %struct.gimple_seq_d** %25, null, !dbg !4999
  br i1 %cmp86, label %if.then88, label %if.end89, !dbg !5000

if.then88:                                        ; preds = %if.end85
  store %struct.gimple_seq_d** %internal_post, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !5001
  br label %if.end89, !dbg !5002

if.end89:                                         ; preds = %if.then88, %if.end85
  %26 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5003
  %27 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %26, align 8, !dbg !5004
  call void @gsi_last(%struct.gimple_stmt_iterator* sret %tmp90, %struct.gimple_seq_d* %27), !dbg !5005
  %28 = bitcast %struct.gimple_stmt_iterator* %pre_last_gsi to i8*, !dbg !5005
  %29 = bitcast %struct.gimple_stmt_iterator* %tmp90 to i8*, !dbg !5005
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %28, i8* align 8 %29, i64 24, i1 false), !dbg !5005
  %30 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !5006
  %31 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %30, align 8, !dbg !5007
  call void @gsi_last(%struct.gimple_stmt_iterator* sret %tmp91, %struct.gimple_seq_d* %31), !dbg !5008
  %32 = bitcast %struct.gimple_stmt_iterator* %post_last_gsi to i8*, !dbg !5008
  %33 = bitcast %struct.gimple_stmt_iterator* %tmp91 to i8*, !dbg !5008
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %32, i8* align 8 %33, i64 24, i1 false), !dbg !5008
  %34 = load i32, i32* @input_location, align 4, !dbg !5009
  store i32 %34, i32* %saved_location, align 4, !dbg !5010
  %35 = load %union.tree_node*, %union.tree_node** %save_expr, align 8, !dbg !5011
  %36 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !5013
  %cmp92 = icmp ne %union.tree_node* %35, %36, !dbg !5014
  br i1 %cmp92, label %land.lhs.true, label %if.end135, !dbg !5015

land.lhs.true:                                    ; preds = %if.end89
  %37 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5016
  %38 = load %union.tree_node*, %union.tree_node** %37, align 8, !dbg !5016
  %base = bitcast %union.tree_node* %38 to %struct.tree_base*, !dbg !5016
  %39 = bitcast %struct.tree_base* %base to i64*, !dbg !5016
  %bf.load = load i64, i64* %39, align 8, !dbg !5016
  %bf.clear = and i64 %bf.load, 65535, !dbg !5016
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5016
  %idxprom = sext i32 %bf.cast to i64, !dbg !5016
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !5016
  %40 = load i32, i32* %arrayidx, align 4, !dbg !5016
  %cmp94 = icmp uge i32 %40, 4, !dbg !5016
  br i1 %cmp94, label %land.lhs.true96, label %cond.false106, !dbg !5016

land.lhs.true96:                                  ; preds = %land.lhs.true
  %41 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5016
  %42 = load %union.tree_node*, %union.tree_node** %41, align 8, !dbg !5016
  %base97 = bitcast %union.tree_node* %42 to %struct.tree_base*, !dbg !5016
  %43 = bitcast %struct.tree_base* %base97 to i64*, !dbg !5016
  %bf.load98 = load i64, i64* %43, align 8, !dbg !5016
  %bf.clear99 = and i64 %bf.load98, 65535, !dbg !5016
  %bf.cast100 = trunc i64 %bf.clear99 to i32, !dbg !5016
  %idxprom101 = sext i32 %bf.cast100 to i64, !dbg !5016
  %arrayidx102 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom101, !dbg !5016
  %44 = load i32, i32* %arrayidx102, align 4, !dbg !5016
  %cmp103 = icmp ule i32 %44, 10, !dbg !5016
  br i1 %cmp103, label %cond.true105, label %cond.false106, !dbg !5016

cond.true105:                                     ; preds = %land.lhs.true96
  %45 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5016
  %46 = load %union.tree_node*, %union.tree_node** %45, align 8, !dbg !5016
  %exp = bitcast %union.tree_node* %46 to %struct.tree_exp*, !dbg !5016
  %locus = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 1, !dbg !5016
  %47 = load i32, i32* %locus, align 8, !dbg !5016
  br label %cond.end107, !dbg !5016

cond.false106:                                    ; preds = %land.lhs.true96, %land.lhs.true
  br label %cond.end107, !dbg !5016

cond.end107:                                      ; preds = %cond.false106, %cond.true105
  %cond108 = phi i32 [ %47, %cond.true105 ], [ 0, %cond.false106 ], !dbg !5016
  %cmp109 = icmp ne i32 %cond108, 0, !dbg !5016
  br i1 %cmp109, label %if.then111, label %if.end135, !dbg !5017

if.then111:                                       ; preds = %cond.end107
  %48 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5018
  %49 = load %union.tree_node*, %union.tree_node** %48, align 8, !dbg !5018
  %base112 = bitcast %union.tree_node* %49 to %struct.tree_base*, !dbg !5018
  %50 = bitcast %struct.tree_base* %base112 to i64*, !dbg !5018
  %bf.load113 = load i64, i64* %50, align 8, !dbg !5018
  %bf.clear114 = and i64 %bf.load113, 65535, !dbg !5018
  %bf.cast115 = trunc i64 %bf.clear114 to i32, !dbg !5018
  %idxprom116 = sext i32 %bf.cast115 to i64, !dbg !5018
  %arrayidx117 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom116, !dbg !5018
  %51 = load i32, i32* %arrayidx117, align 4, !dbg !5018
  %cmp118 = icmp uge i32 %51, 4, !dbg !5018
  br i1 %cmp118, label %land.lhs.true120, label %cond.false132, !dbg !5018

land.lhs.true120:                                 ; preds = %if.then111
  %52 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5018
  %53 = load %union.tree_node*, %union.tree_node** %52, align 8, !dbg !5018
  %base121 = bitcast %union.tree_node* %53 to %struct.tree_base*, !dbg !5018
  %54 = bitcast %struct.tree_base* %base121 to i64*, !dbg !5018
  %bf.load122 = load i64, i64* %54, align 8, !dbg !5018
  %bf.clear123 = and i64 %bf.load122, 65535, !dbg !5018
  %bf.cast124 = trunc i64 %bf.clear123 to i32, !dbg !5018
  %idxprom125 = sext i32 %bf.cast124 to i64, !dbg !5018
  %arrayidx126 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom125, !dbg !5018
  %55 = load i32, i32* %arrayidx126, align 4, !dbg !5018
  %cmp127 = icmp ule i32 %55, 10, !dbg !5018
  br i1 %cmp127, label %cond.true129, label %cond.false132, !dbg !5018

cond.true129:                                     ; preds = %land.lhs.true120
  %56 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5018
  %57 = load %union.tree_node*, %union.tree_node** %56, align 8, !dbg !5018
  %exp130 = bitcast %union.tree_node* %57 to %struct.tree_exp*, !dbg !5018
  %locus131 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp130, i32 0, i32 1, !dbg !5018
  %58 = load i32, i32* %locus131, align 8, !dbg !5018
  br label %cond.end133, !dbg !5018

cond.false132:                                    ; preds = %land.lhs.true120, %if.then111
  br label %cond.end133, !dbg !5018

cond.end133:                                      ; preds = %cond.false132, %cond.true129
  %cond134 = phi i32 [ %58, %cond.true129 ], [ 0, %cond.false132 ], !dbg !5018
  store i32 %cond134, i32* @input_location, align 4, !dbg !5019
  br label %if.end135, !dbg !5020

if.end135:                                        ; preds = %cond.end133, %cond.end107, %if.end89
  br label %do.body, !dbg !5021

do.body:                                          ; preds = %do.cond, %if.end135
  %59 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5022
  %60 = load %union.tree_node*, %union.tree_node** %59, align 8, !dbg !5022
  %call = call %union.tree_node* @tree_ssa_strip_useless_type_conversions(%union.tree_node* %60), !dbg !5022
  %61 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5022
  store %union.tree_node* %call, %union.tree_node** %61, align 8, !dbg !5022
  %62 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5024
  %63 = load %union.tree_node*, %union.tree_node** %62, align 8, !dbg !5025
  store %union.tree_node* %63, %union.tree_node** %save_expr, align 8, !dbg !5026
  %64 = load %union.tree_node*, %union.tree_node** %save_expr, align 8, !dbg !5027
  %65 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !5029
  %cmp136 = icmp eq %union.tree_node* %64, %65, !dbg !5030
  br i1 %cmp136, label %if.then145, label %lor.lhs.false138, !dbg !5031

lor.lhs.false138:                                 ; preds = %do.body
  %66 = load %union.tree_node*, %union.tree_node** %save_expr, align 8, !dbg !5032
  %common = bitcast %union.tree_node* %66 to %struct.tree_common*, !dbg !5032
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5032
  %67 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5032
  %tobool139 = icmp ne %union.tree_node* %67, null, !dbg !5032
  br i1 %tobool139, label %land.lhs.true140, label %if.end146, !dbg !5033

land.lhs.true140:                                 ; preds = %lor.lhs.false138
  %68 = load %union.tree_node*, %union.tree_node** %save_expr, align 8, !dbg !5034
  %common141 = bitcast %union.tree_node* %68 to %struct.tree_common*, !dbg !5034
  %type142 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common141, i32 0, i32 2, !dbg !5034
  %69 = load %union.tree_node*, %union.tree_node** %type142, align 8, !dbg !5034
  %70 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !5035
  %cmp143 = icmp eq %union.tree_node* %69, %70, !dbg !5036
  br i1 %cmp143, label %if.then145, label %if.end146, !dbg !5037

if.then145:                                       ; preds = %land.lhs.true140, %do.body
  store i32 -2, i32* %ret, align 4, !dbg !5038
  br label %do.end, !dbg !5040

if.end146:                                        ; preds = %land.lhs.true140, %lor.lhs.false138
  %71 = load i32 (%union.tree_node**, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, i32 (%union.tree_node**, %struct.gimple_seq_d**, %struct.gimple_seq_d**)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 39), align 8, !dbg !5041
  %72 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5042
  %73 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5043
  %74 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !5044
  %call147 = call i32 %71(%union.tree_node** %72, %struct.gimple_seq_d** %73, %struct.gimple_seq_d** %74), !dbg !5045
  store i32 %call147, i32* %ret, align 4, !dbg !5046
  %75 = load i32, i32* %ret, align 4, !dbg !5047
  %cmp148 = icmp eq i32 %75, 0, !dbg !5049
  br i1 %cmp148, label %if.then150, label %if.else159, !dbg !5050

if.then150:                                       ; preds = %if.end146
  %76 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5051
  %77 = load %union.tree_node*, %union.tree_node** %76, align 8, !dbg !5054
  %cmp151 = icmp eq %union.tree_node* %77, null, !dbg !5055
  br i1 %cmp151, label %if.then153, label %if.end154, !dbg !5056

if.then153:                                       ; preds = %if.then150
  br label %do.end, !dbg !5057

if.end154:                                        ; preds = %if.then150
  %78 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5058
  %79 = load %union.tree_node*, %union.tree_node** %78, align 8, !dbg !5060
  %80 = load %union.tree_node*, %union.tree_node** %save_expr, align 8, !dbg !5061
  %cmp155 = icmp ne %union.tree_node* %79, %80, !dbg !5062
  br i1 %cmp155, label %if.then157, label %if.end158, !dbg !5063

if.then157:                                       ; preds = %if.end154
  br label %do.cond, !dbg !5064

if.end158:                                        ; preds = %if.end154
  br label %if.end164, !dbg !5065

if.else159:                                       ; preds = %if.end146
  %81 = load i32, i32* %ret, align 4, !dbg !5066
  %cmp160 = icmp ne i32 %81, -1, !dbg !5068
  br i1 %cmp160, label %if.then162, label %if.end163, !dbg !5069

if.then162:                                       ; preds = %if.else159
  br label %do.end, !dbg !5070

if.end163:                                        ; preds = %if.else159
  br label %if.end164

if.end164:                                        ; preds = %if.end163, %if.end158
  store i32 0, i32* %ret, align 4, !dbg !5071
  %82 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5072
  %83 = load %union.tree_node*, %union.tree_node** %82, align 8, !dbg !5072
  %base165 = bitcast %union.tree_node* %83 to %struct.tree_base*, !dbg !5072
  %84 = bitcast %struct.tree_base* %base165 to i64*, !dbg !5072
  %bf.load166 = load i64, i64* %84, align 8, !dbg !5072
  %bf.clear167 = and i64 %bf.load166, 65535, !dbg !5072
  %bf.cast168 = trunc i64 %bf.clear167 to i32, !dbg !5072
  switch i32 %bf.cast168, label %sw.default756 [
    i32 128, label %sw.bb
    i32 127, label %sw.bb
    i32 126, label %sw.bb
    i32 125, label %sw.bb
    i32 45, label %sw.bb173
    i32 46, label %sw.bb173
    i32 43, label %sw.bb173
    i32 44, label %sw.bb173
    i32 41, label %sw.bb173
    i32 118, label %sw.bb173
    i32 56, label %sw.bb180
    i32 59, label %sw.bb187
    i32 2, label %sw.bb197
    i32 52, label %sw.bb198
    i32 119, label %sw.bb203
    i32 53, label %sw.bb205
    i32 54, label %sw.bb205
    i32 91, label %sw.bb210
    i32 92, label %sw.bb210
    i32 96, label %sw.bb212
    i32 121, label %sw.bb231
    i32 129, label %sw.bb233
    i32 116, label %sw.bb235
    i32 113, label %sw.bb235
    i32 77, label %sw.bb284
    i32 47, label %sw.bb289
    i32 48, label %sw.bb295
    i32 49, label %sw.bb295
    i32 23, label %sw.bb300
    i32 24, label %sw.bb300
    i32 25, label %sw.bb300
    i32 28, label %sw.bb300
    i32 26, label %sw.bb300
    i32 27, label %sw.bb300
    i32 33, label %sw.bb301
    i32 132, label %sw.bb307
    i32 58, label %sw.bb309
    i32 137, label %sw.bb311
    i32 138, label %sw.bb313
    i32 136, label %sw.bb315
    i32 134, label %sw.bb317
    i32 185, label %sw.bb341
    i32 133, label %sw.bb352
    i32 139, label %sw.bb367
    i32 135, label %sw.bb369
    i32 51, label %sw.bb371
    i32 120, label %sw.bb403
    i32 42, label %sw.bb405
    i32 152, label %sw.bb436
    i32 117, label %sw.bb476
    i32 140, label %sw.bb477
    i32 131, label %sw.bb479
    i32 130, label %sw.bb479
    i32 61, label %sw.bb512
    i32 55, label %sw.bb514
    i32 142, label %sw.bb516
    i32 143, label %sw.bb524
    i32 50, label %sw.bb538
    i32 30, label %sw.bb558
    i32 147, label %sw.bb562
    i32 150, label %sw.bb564
    i32 32, label %sw.bb579
    i32 34, label %sw.bb579
    i32 36, label %sw.bb581
    i32 141, label %sw.bb586
    i32 153, label %sw.bb587
    i32 154, label %sw.bb588
    i32 155, label %sw.bb589
    i32 156, label %sw.bb591
    i32 157, label %sw.bb591
    i32 158, label %sw.bb592
    i32 159, label %sw.bb592
    i32 160, label %sw.bb592
    i32 161, label %sw.bb592
    i32 162, label %sw.bb611
    i32 66, label %sw.bb613
  ], !dbg !5073

sw.bb:                                            ; preds = %if.end164, %if.end164, %if.end164, %if.end164
  %85 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5074
  %86 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5076
  %87 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !5077
  %88 = load i32, i32* %fallback.addr, align 4, !dbg !5078
  %cmp169 = icmp ne i32 %88, 0, !dbg !5079
  %conv170 = zext i1 %cmp169 to i32, !dbg !5079
  %conv171 = trunc i32 %conv170 to i8, !dbg !5078
  %call172 = call i32 @gimplify_self_mod_expr(%union.tree_node** %85, %struct.gimple_seq_d** %86, %struct.gimple_seq_d** %87, i8 zeroext %conv171), !dbg !5080
  store i32 %call172, i32* %ret, align 4, !dbg !5081
  br label %sw.epilog871, !dbg !5082

sw.bb173:                                         ; preds = %if.end164, %if.end164, %if.end164, %if.end164, %if.end164, %if.end164
  %89 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5083
  %90 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5084
  %91 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !5085
  %92 = load i32, i32* %fallback.addr, align 4, !dbg !5086
  %tobool174 = icmp ne i32 %92, 0, !dbg !5086
  br i1 %tobool174, label %cond.true175, label %cond.false176, !dbg !5086

cond.true175:                                     ; preds = %sw.bb173
  %93 = load i32, i32* %fallback.addr, align 4, !dbg !5087
  br label %cond.end177, !dbg !5086

cond.false176:                                    ; preds = %sw.bb173
  br label %cond.end177, !dbg !5086

cond.end177:                                      ; preds = %cond.false176, %cond.true175
  %cond178 = phi i32 [ %93, %cond.true175 ], [ 1, %cond.false176 ], !dbg !5086
  %call179 = call i32 @gimplify_compound_lval(%union.tree_node** %89, %struct.gimple_seq_d** %90, %struct.gimple_seq_d** %91, i32 %cond178), !dbg !5088
  store i32 %call179, i32* %ret, align 4, !dbg !5089
  br label %sw.epilog871, !dbg !5090

sw.bb180:                                         ; preds = %if.end164
  %94 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5091
  %95 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5092
  %96 = load i32, i32* %fallback.addr, align 4, !dbg !5093
  %call181 = call i32 @gimplify_cond_expr(%union.tree_node** %94, %struct.gimple_seq_d** %95, i32 %96), !dbg !5094
  store i32 %call181, i32* %ret, align 4, !dbg !5095
  %97 = load i32, i32* %fallback.addr, align 4, !dbg !5096
  %cmp182 = icmp eq i32 %97, 2, !dbg !5098
  br i1 %cmp182, label %if.then184, label %if.end186, !dbg !5099

if.then184:                                       ; preds = %sw.bb180
  %98 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5100
  %99 = load %union.tree_node*, %union.tree_node** %98, align 8, !dbg !5102
  %100 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5103
  %101 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !5104
  %call185 = call %union.tree_node* @get_initialized_tmp_var(%union.tree_node* %99, %struct.gimple_seq_d** %100, %struct.gimple_seq_d** %101), !dbg !5105
  %102 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5106
  store %union.tree_node* %call185, %union.tree_node** %102, align 8, !dbg !5107
  %103 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5108
  %104 = load %union.tree_node*, %union.tree_node** %103, align 8, !dbg !5109
  call void @mark_addressable(%union.tree_node* %104), !dbg !5110
  br label %if.end186, !dbg !5111

if.end186:                                        ; preds = %if.then184, %sw.bb180
  br label %sw.epilog871, !dbg !5112

sw.bb187:                                         ; preds = %if.end164
  %105 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5113
  %106 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5114
  %107 = load i32, i32* %fallback.addr, align 4, !dbg !5115
  %cmp188 = icmp ne i32 %107, 0, !dbg !5116
  %conv189 = zext i1 %cmp188 to i32, !dbg !5116
  %conv190 = trunc i32 %conv189 to i8, !dbg !5115
  %call191 = call i32 @gimplify_call_expr(%union.tree_node** %105, %struct.gimple_seq_d** %106, i8 zeroext %conv190), !dbg !5117
  store i32 %call191, i32* %ret, align 4, !dbg !5118
  %108 = load i32, i32* %fallback.addr, align 4, !dbg !5119
  %cmp192 = icmp eq i32 %108, 2, !dbg !5121
  br i1 %cmp192, label %if.then194, label %if.end196, !dbg !5122

if.then194:                                       ; preds = %sw.bb187
  %109 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5123
  %110 = load %union.tree_node*, %union.tree_node** %109, align 8, !dbg !5125
  %111 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5126
  %112 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !5127
  %call195 = call %union.tree_node* @get_initialized_tmp_var(%union.tree_node* %110, %struct.gimple_seq_d** %111, %struct.gimple_seq_d** %112), !dbg !5128
  %113 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5129
  store %union.tree_node* %call195, %union.tree_node** %113, align 8, !dbg !5130
  %114 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5131
  %115 = load %union.tree_node*, %union.tree_node** %114, align 8, !dbg !5132
  call void @mark_addressable(%union.tree_node* %115), !dbg !5133
  br label %if.end196, !dbg !5134

if.end196:                                        ; preds = %if.then194, %sw.bb187
  br label %sw.epilog871, !dbg !5135

sw.bb197:                                         ; preds = %if.end164
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 6607, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5136
  br label %sw.bb198, !dbg !5136

sw.bb198:                                         ; preds = %if.end164, %sw.bb197
  %116 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5137
  %117 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5138
  %118 = load i32, i32* %fallback.addr, align 4, !dbg !5139
  %cmp199 = icmp ne i32 %118, 0, !dbg !5140
  %conv200 = zext i1 %cmp199 to i32, !dbg !5140
  %conv201 = trunc i32 %conv200 to i8, !dbg !5139
  %call202 = call i32 @gimplify_compound_expr(%union.tree_node** %116, %struct.gimple_seq_d** %117, i8 zeroext %conv201), !dbg !5141
  store i32 %call202, i32* %ret, align 4, !dbg !5142
  br label %sw.epilog871, !dbg !5143

sw.bb203:                                         ; preds = %if.end164
  %119 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5144
  %120 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5145
  %call204 = call i32 @gimplify_compound_literal_expr(%union.tree_node** %119, %struct.gimple_seq_d** %120), !dbg !5146
  store i32 %call204, i32* %ret, align 4, !dbg !5147
  br label %sw.epilog871, !dbg !5148

sw.bb205:                                         ; preds = %if.end164, %if.end164
  %121 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5149
  %122 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5150
  %123 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !5151
  %124 = load i32, i32* %fallback.addr, align 4, !dbg !5152
  %cmp206 = icmp ne i32 %124, 0, !dbg !5153
  %conv207 = zext i1 %cmp206 to i32, !dbg !5153
  %conv208 = trunc i32 %conv207 to i8, !dbg !5152
  %call209 = call i32 @gimplify_modify_expr(%union.tree_node** %121, %struct.gimple_seq_d** %122, %struct.gimple_seq_d** %123, i8 zeroext %conv208), !dbg !5154
  store i32 %call209, i32* %ret, align 4, !dbg !5155
  br label %sw.epilog871, !dbg !5156

sw.bb210:                                         ; preds = %if.end164, %if.end164
  %125 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5157
  %126 = load i32, i32* %saved_location, align 4, !dbg !5158
  %call211 = call i32 @gimplify_boolean_expr(%union.tree_node** %125, i32 %126), !dbg !5159
  store i32 %call211, i32* %ret, align 4, !dbg !5160
  br label %sw.epilog871, !dbg !5161

sw.bb212:                                         ; preds = %if.end164
  %127 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5162
  %128 = load %union.tree_node*, %union.tree_node** %127, align 8, !dbg !5162
  %common213 = bitcast %union.tree_node* %128 to %struct.tree_common*, !dbg !5162
  %type214 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common213, i32 0, i32 2, !dbg !5162
  %129 = load %union.tree_node*, %union.tree_node** %type214, align 8, !dbg !5162
  %base215 = bitcast %union.tree_node* %129 to %struct.tree_base*, !dbg !5162
  %130 = bitcast %struct.tree_base* %base215 to i64*, !dbg !5162
  %bf.load216 = load i64, i64* %130, align 8, !dbg !5162
  %bf.clear217 = and i64 %bf.load216, 65535, !dbg !5162
  %bf.cast218 = trunc i64 %bf.clear217 to i32, !dbg !5162
  %cmp219 = icmp ne i32 %bf.cast218, 7, !dbg !5164
  br i1 %cmp219, label %if.then221, label %if.end227, !dbg !5165

if.then221:                                       ; preds = %sw.bb212
  call void @llvm.dbg.declare(metadata %union.tree_node** %type222, metadata !5166, metadata !DIExpression()), !dbg !5168
  %131 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5169
  %132 = load %union.tree_node*, %union.tree_node** %131, align 8, !dbg !5169
  %common223 = bitcast %union.tree_node* %132 to %struct.tree_common*, !dbg !5169
  %type224 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common223, i32 0, i32 2, !dbg !5169
  %133 = load %union.tree_node*, %union.tree_node** %type224, align 8, !dbg !5169
  store %union.tree_node* %133, %union.tree_node** %type222, align 8, !dbg !5168
  %134 = load %union.tree_node*, %union.tree_node** %type222, align 8, !dbg !5170
  %135 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5170
  %136 = load %union.tree_node*, %union.tree_node** %135, align 8, !dbg !5170
  %call225 = call %union.tree_node* @gimple_boolify(%union.tree_node* %136), !dbg !5170
  %call226 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %134, %union.tree_node* %call225), !dbg !5170
  %137 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5171
  store %union.tree_node* %call226, %union.tree_node** %137, align 8, !dbg !5172
  store i32 0, i32* %ret, align 4, !dbg !5173
  br label %sw.epilog871, !dbg !5174

if.end227:                                        ; preds = %sw.bb212
  %138 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5175
  %139 = load %union.tree_node*, %union.tree_node** %138, align 8, !dbg !5175
  %exp228 = bitcast %union.tree_node* %139 to %struct.tree_exp*, !dbg !5175
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp228, i32 0, i32 3, !dbg !5175
  %arrayidx229 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !5175
  %140 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5176
  %141 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !5177
  %call230 = call i32 @gimplify_expr(%union.tree_node** %arrayidx229, %struct.gimple_seq_d** %140, %struct.gimple_seq_d** %141, i8 (%union.tree_node*)* @is_gimple_val, i32 1), !dbg !5178
  store i32 %call230, i32* %ret, align 4, !dbg !5179
  %142 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5180
  %143 = load %union.tree_node*, %union.tree_node** %142, align 8, !dbg !5181
  call void @recalculate_side_effects(%union.tree_node* %143), !dbg !5182
  br label %sw.epilog871, !dbg !5183

sw.bb231:                                         ; preds = %if.end164
  %144 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5184
  %145 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5185
  %146 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !5186
  %call232 = call i32 @gimplify_addr_expr(%union.tree_node** %144, %struct.gimple_seq_d** %145, %struct.gimple_seq_d** %146), !dbg !5187
  store i32 %call232, i32* %ret, align 4, !dbg !5188
  br label %sw.epilog871, !dbg !5189

sw.bb233:                                         ; preds = %if.end164
  %147 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5190
  %148 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5191
  %149 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !5192
  %call234 = call i32 @gimplify_va_arg_expr(%union.tree_node** %147, %struct.gimple_seq_d** %148, %struct.gimple_seq_d** %149), !dbg !5193
  store i32 %call234, i32* %ret, align 4, !dbg !5194
  br label %sw.epilog871, !dbg !5195

sw.bb235:                                         ; preds = %if.end164, %if.end164
  %150 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5196
  %151 = load %union.tree_node*, %union.tree_node** %150, align 8, !dbg !5196
  %base236 = bitcast %union.tree_node* %151 to %struct.tree_base*, !dbg !5196
  %152 = bitcast %struct.tree_base* %base236 to i64*, !dbg !5196
  %bf.load237 = load i64, i64* %152, align 8, !dbg !5196
  %bf.clear238 = and i64 %bf.load237, 65535, !dbg !5196
  %bf.cast239 = trunc i64 %bf.clear238 to i32, !dbg !5196
  %cmp240 = icmp eq i32 %bf.cast239, 116, !dbg !5196
  br i1 %cmp240, label %land.lhs.true242, label %if.end258, !dbg !5196

land.lhs.true242:                                 ; preds = %sw.bb235
  %153 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5196
  %154 = load %union.tree_node*, %union.tree_node** %153, align 8, !dbg !5196
  %common243 = bitcast %union.tree_node* %154 to %struct.tree_common*, !dbg !5196
  %type244 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common243, i32 0, i32 2, !dbg !5196
  %155 = load %union.tree_node*, %union.tree_node** %type244, align 8, !dbg !5196
  %base245 = bitcast %union.tree_node* %155 to %struct.tree_base*, !dbg !5196
  %156 = bitcast %struct.tree_base* %base245 to i64*, !dbg !5196
  %bf.load246 = load i64, i64* %156, align 8, !dbg !5196
  %bf.clear247 = and i64 %bf.load246, 65535, !dbg !5196
  %bf.cast248 = trunc i64 %bf.clear247 to i32, !dbg !5196
  %cmp249 = icmp eq i32 %bf.cast248, 19, !dbg !5196
  br i1 %cmp249, label %land.lhs.true251, label %if.end258, !dbg !5196

land.lhs.true251:                                 ; preds = %land.lhs.true242
  %157 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5196
  %158 = load %union.tree_node*, %union.tree_node** %157, align 8, !dbg !5196
  %exp252 = bitcast %union.tree_node* %158 to %struct.tree_exp*, !dbg !5196
  %operands253 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp252, i32 0, i32 3, !dbg !5196
  %arrayidx254 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands253, i64 0, i64 0, !dbg !5196
  %159 = load %union.tree_node*, %union.tree_node** %arrayidx254, align 8, !dbg !5196
  %call255 = call i32 @integer_zerop(%union.tree_node* %159), !dbg !5196
  %tobool256 = icmp ne i32 %call255, 0, !dbg !5196
  br i1 %tobool256, label %if.then257, label %if.end258, !dbg !5198

if.then257:                                       ; preds = %land.lhs.true251
  store i32 1, i32* %ret, align 4, !dbg !5199
  br label %sw.epilog871, !dbg !5201

if.end258:                                        ; preds = %land.lhs.true251, %land.lhs.true242, %sw.bb235
  %160 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5202
  %161 = load %union.tree_node*, %union.tree_node** %160, align 8, !dbg !5202
  %common259 = bitcast %union.tree_node* %161 to %struct.tree_common*, !dbg !5202
  %type260 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common259, i32 0, i32 2, !dbg !5202
  %162 = load %union.tree_node*, %union.tree_node** %type260, align 8, !dbg !5202
  %base261 = bitcast %union.tree_node* %162 to %struct.tree_base*, !dbg !5202
  %163 = bitcast %struct.tree_base* %base261 to i64*, !dbg !5202
  %bf.load262 = load i64, i64* %163, align 8, !dbg !5202
  %bf.clear263 = and i64 %bf.load262, 65535, !dbg !5202
  %bf.cast264 = trunc i64 %bf.clear263 to i32, !dbg !5202
  %cmp265 = icmp eq i32 %bf.cast264, 19, !dbg !5202
  br i1 %cmp265, label %if.then270, label %lor.lhs.false267, !dbg !5204

lor.lhs.false267:                                 ; preds = %if.end258
  %164 = load i32, i32* %fallback.addr, align 4, !dbg !5205
  %cmp268 = icmp eq i32 %164, 0, !dbg !5206
  br i1 %cmp268, label %if.then270, label %if.end274, !dbg !5207

if.then270:                                       ; preds = %lor.lhs.false267, %if.end258
  %165 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5208
  %166 = load %union.tree_node*, %union.tree_node** %165, align 8, !dbg !5208
  %exp271 = bitcast %union.tree_node* %166 to %struct.tree_exp*, !dbg !5208
  %operands272 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp271, i32 0, i32 3, !dbg !5208
  %arrayidx273 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands272, i64 0, i64 0, !dbg !5208
  %167 = load %union.tree_node*, %union.tree_node** %arrayidx273, align 8, !dbg !5208
  %168 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5210
  store %union.tree_node* %167, %union.tree_node** %168, align 8, !dbg !5211
  br label %sw.epilog871, !dbg !5212

if.end274:                                        ; preds = %lor.lhs.false267
  %169 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5213
  %call275 = call i32 @gimplify_conversion(%union.tree_node** %169), !dbg !5214
  store i32 %call275, i32* %ret, align 4, !dbg !5215
  %170 = load i32, i32* %ret, align 4, !dbg !5216
  %cmp276 = icmp eq i32 %170, -2, !dbg !5218
  br i1 %cmp276, label %if.then278, label %if.end279, !dbg !5219

if.then278:                                       ; preds = %if.end274
  br label %sw.epilog871, !dbg !5220

if.end279:                                        ; preds = %if.end274
  %171 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5221
  %172 = load %union.tree_node*, %union.tree_node** %171, align 8, !dbg !5223
  %173 = load %union.tree_node*, %union.tree_node** %save_expr, align 8, !dbg !5224
  %cmp280 = icmp ne %union.tree_node* %172, %173, !dbg !5225
  br i1 %cmp280, label %if.then282, label %if.end283, !dbg !5226

if.then282:                                       ; preds = %if.end279
  br label %sw.epilog871, !dbg !5227

if.end283:                                        ; preds = %if.end279
  br label %sw.bb284, !dbg !5224

sw.bb284:                                         ; preds = %if.end164, %if.end283
  %174 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5228
  %175 = load %union.tree_node*, %union.tree_node** %174, align 8, !dbg !5228
  %exp285 = bitcast %union.tree_node* %175 to %struct.tree_exp*, !dbg !5228
  %operands286 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp285, i32 0, i32 3, !dbg !5228
  %arrayidx287 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands286, i64 0, i64 0, !dbg !5228
  %176 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5229
  %177 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !5230
  %call288 = call i32 @gimplify_expr(%union.tree_node** %arrayidx287, %struct.gimple_seq_d** %176, %struct.gimple_seq_d** %177, i8 (%union.tree_node*)* @is_gimple_val, i32 1), !dbg !5231
  store i32 %call288, i32* %ret, align 4, !dbg !5232
  %178 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5233
  %179 = load %union.tree_node*, %union.tree_node** %178, align 8, !dbg !5234
  call void @recalculate_side_effects(%union.tree_node* %179), !dbg !5235
  br label %sw.epilog871, !dbg !5236

sw.bb289:                                         ; preds = %if.end164
  %180 = load i32, i32* @input_location, align 4, !dbg !5237
  %181 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5238
  %182 = load %union.tree_node*, %union.tree_node** %181, align 8, !dbg !5239
  %call290 = call %union.tree_node* @fold_indirect_ref_loc(i32 %180, %union.tree_node* %182), !dbg !5240
  %183 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5241
  store %union.tree_node* %call290, %union.tree_node** %183, align 8, !dbg !5242
  %184 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5243
  %185 = load %union.tree_node*, %union.tree_node** %184, align 8, !dbg !5245
  %186 = load %union.tree_node*, %union.tree_node** %save_expr, align 8, !dbg !5246
  %cmp291 = icmp ne %union.tree_node* %185, %186, !dbg !5247
  br i1 %cmp291, label %if.then293, label %if.end294, !dbg !5248

if.then293:                                       ; preds = %sw.bb289
  br label %sw.epilog871, !dbg !5249

if.end294:                                        ; preds = %sw.bb289
  br label %sw.bb295, !dbg !5246

sw.bb295:                                         ; preds = %if.end164, %if.end164, %if.end294
  %187 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5250
  %188 = load %union.tree_node*, %union.tree_node** %187, align 8, !dbg !5250
  %exp296 = bitcast %union.tree_node* %188 to %struct.tree_exp*, !dbg !5250
  %operands297 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp296, i32 0, i32 3, !dbg !5250
  %arrayidx298 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands297, i64 0, i64 0, !dbg !5250
  %189 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5251
  %190 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !5252
  %call299 = call i32 @gimplify_expr(%union.tree_node** %arrayidx298, %struct.gimple_seq_d** %189, %struct.gimple_seq_d** %190, i8 (%union.tree_node*)* @is_gimple_reg, i32 1), !dbg !5253
  store i32 %call299, i32* %ret, align 4, !dbg !5254
  %191 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5255
  %192 = load %union.tree_node*, %union.tree_node** %191, align 8, !dbg !5256
  call void @recalculate_side_effects(%union.tree_node* %192), !dbg !5257
  br label %sw.epilog871, !dbg !5258

sw.bb300:                                         ; preds = %if.end164, %if.end164, %if.end164, %if.end164, %if.end164, %if.end164
  store i32 1, i32* %ret, align 4, !dbg !5259
  br label %sw.epilog871, !dbg !5260

sw.bb301:                                         ; preds = %if.end164
  %193 = load i32, i32* %fallback.addr, align 4, !dbg !5261
  %and302 = and i32 %193, 2, !dbg !5263
  %tobool303 = icmp ne i32 %and302, 0, !dbg !5263
  br i1 %tobool303, label %if.then304, label %if.else305, !dbg !5264

if.then304:                                       ; preds = %sw.bb301
  store i32 1, i32* %ret, align 4, !dbg !5265
  br label %if.end306, !dbg !5266

if.else305:                                       ; preds = %sw.bb301
  %194 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5267
  %195 = load %union.tree_node*, %union.tree_node** %194, align 8, !dbg !5267
  %decl_common = bitcast %union.tree_node* %195 to %struct.tree_decl_common*, !dbg !5267
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 5, !dbg !5267
  %196 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !5267
  %197 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5268
  store %union.tree_node* %196, %union.tree_node** %197, align 8, !dbg !5269
  br label %if.end306

if.end306:                                        ; preds = %if.else305, %if.then304
  br label %sw.epilog871, !dbg !5270

sw.bb307:                                         ; preds = %if.end164
  %198 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5271
  %199 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5272
  %call308 = call i32 @gimplify_decl_expr(%union.tree_node** %198, %struct.gimple_seq_d** %199), !dbg !5273
  store i32 %call308, i32* %ret, align 4, !dbg !5274
  br label %sw.epilog871, !dbg !5275

sw.bb309:                                         ; preds = %if.end164
  %200 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5276
  %201 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5277
  %call310 = call i32 @gimplify_bind_expr(%union.tree_node** %200, %struct.gimple_seq_d** %201), !dbg !5278
  store i32 %call310, i32* %ret, align 4, !dbg !5279
  br label %sw.epilog871, !dbg !5280

sw.bb311:                                         ; preds = %if.end164
  %202 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5281
  %203 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5282
  %call312 = call i32 @gimplify_loop_expr(%union.tree_node** %202, %struct.gimple_seq_d** %203), !dbg !5283
  store i32 %call312, i32* %ret, align 4, !dbg !5284
  br label %sw.epilog871, !dbg !5285

sw.bb313:                                         ; preds = %if.end164
  %204 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5286
  %205 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5287
  %call314 = call i32 @gimplify_switch_expr(%union.tree_node** %204, %struct.gimple_seq_d** %205), !dbg !5288
  store i32 %call314, i32* %ret, align 4, !dbg !5289
  br label %sw.epilog871, !dbg !5290

sw.bb315:                                         ; preds = %if.end164
  %206 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5291
  %call316 = call i32 @gimplify_exit_expr(%union.tree_node** %206), !dbg !5292
  store i32 %call316, i32* %ret, align 4, !dbg !5293
  br label %sw.epilog871, !dbg !5294

sw.bb317:                                         ; preds = %if.end164
  %207 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5295
  %208 = load %union.tree_node*, %union.tree_node** %207, align 8, !dbg !5295
  %exp318 = bitcast %union.tree_node* %208 to %struct.tree_exp*, !dbg !5295
  %operands319 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp318, i32 0, i32 3, !dbg !5295
  %arrayidx320 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands319, i64 0, i64 0, !dbg !5295
  %209 = load %union.tree_node*, %union.tree_node** %arrayidx320, align 8, !dbg !5295
  %base321 = bitcast %union.tree_node* %209 to %struct.tree_base*, !dbg !5295
  %210 = bitcast %struct.tree_base* %base321 to i64*, !dbg !5295
  %bf.load322 = load i64, i64* %210, align 8, !dbg !5295
  %bf.clear323 = and i64 %bf.load322, 65535, !dbg !5295
  %bf.cast324 = trunc i64 %bf.clear323 to i32, !dbg !5295
  %cmp325 = icmp ne i32 %bf.cast324, 30, !dbg !5297
  br i1 %cmp325, label %if.then327, label %if.end336, !dbg !5298

if.then327:                                       ; preds = %sw.bb317
  %211 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5299
  %212 = load %union.tree_node*, %union.tree_node** %211, align 8, !dbg !5299
  %exp328 = bitcast %union.tree_node* %212 to %struct.tree_exp*, !dbg !5299
  %operands329 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp328, i32 0, i32 3, !dbg !5299
  %arrayidx330 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands329, i64 0, i64 0, !dbg !5299
  %213 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5301
  %call331 = call i32 @gimplify_expr(%union.tree_node** %arrayidx330, %struct.gimple_seq_d** %213, %struct.gimple_seq_d** null, i8 (%union.tree_node*)* @is_gimple_val, i32 1), !dbg !5302
  store i32 %call331, i32* %ret, align 4, !dbg !5303
  %214 = load i32, i32* %ret, align 4, !dbg !5304
  %cmp332 = icmp eq i32 %214, -2, !dbg !5306
  br i1 %cmp332, label %if.then334, label %if.end335, !dbg !5307

if.then334:                                       ; preds = %if.then327
  br label %sw.epilog871, !dbg !5308

if.end335:                                        ; preds = %if.then327
  br label %if.end336, !dbg !5309

if.end336:                                        ; preds = %if.end335, %sw.bb317
  %215 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5310
  %216 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5311
  %217 = load %union.tree_node*, %union.tree_node** %216, align 8, !dbg !5311
  %exp337 = bitcast %union.tree_node* %217 to %struct.tree_exp*, !dbg !5311
  %operands338 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp337, i32 0, i32 3, !dbg !5311
  %arrayidx339 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands338, i64 0, i64 0, !dbg !5311
  %218 = load %union.tree_node*, %union.tree_node** %arrayidx339, align 8, !dbg !5311
  %call340 = call %union.gimple_statement_d* @gimple_build_goto(%union.tree_node* %218), !dbg !5312
  call void @gimplify_seq_add_stmt(%struct.gimple_seq_d** %215, %union.gimple_statement_d* %call340), !dbg !5313
  br label %sw.epilog871, !dbg !5314

sw.bb341:                                         ; preds = %if.end164
  %219 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5315
  %220 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5316
  %221 = load %union.tree_node*, %union.tree_node** %220, align 8, !dbg !5316
  %exp342 = bitcast %union.tree_node* %221 to %struct.tree_exp*, !dbg !5316
  %operands343 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp342, i32 0, i32 3, !dbg !5316
  %arrayidx344 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands343, i64 0, i64 0, !dbg !5316
  %222 = load %union.tree_node*, %union.tree_node** %arrayidx344, align 8, !dbg !5316
  %call345 = call i64 @tree_low_cst(%union.tree_node* %222, i32 0), !dbg !5316
  %conv346 = trunc i64 %call345 to i32, !dbg !5316
  %223 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5317
  %224 = load %union.tree_node*, %union.tree_node** %223, align 8, !dbg !5317
  %base347 = bitcast %union.tree_node* %224 to %struct.tree_base*, !dbg !5317
  %225 = bitcast %struct.tree_base* %base347 to i64*, !dbg !5317
  %bf.load348 = load i64, i64* %225, align 8, !dbg !5317
  %bf.lshr = lshr i64 %bf.load348, 18, !dbg !5317
  %bf.clear349 = and i64 %bf.lshr, 1, !dbg !5317
  %bf.cast350 = trunc i64 %bf.clear349 to i32, !dbg !5317
  %call351 = call %union.gimple_statement_d* @gimple_build_predict(i32 %conv346, i32 %bf.cast350), !dbg !5318
  call void @gimplify_seq_add_stmt(%struct.gimple_seq_d** %219, %union.gimple_statement_d* %call351), !dbg !5319
  store i32 1, i32* %ret, align 4, !dbg !5320
  br label %sw.epilog871, !dbg !5321

sw.bb352:                                         ; preds = %if.end164
  store i32 1, i32* %ret, align 4, !dbg !5322
  %226 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5323
  %227 = load %union.tree_node*, %union.tree_node** %226, align 8, !dbg !5323
  %exp353 = bitcast %union.tree_node* %227 to %struct.tree_exp*, !dbg !5323
  %operands354 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp353, i32 0, i32 3, !dbg !5323
  %arrayidx355 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands354, i64 0, i64 0, !dbg !5323
  %228 = load %union.tree_node*, %union.tree_node** %arrayidx355, align 8, !dbg !5323
  %call356 = call %union.tree_node* @decl_function_context(%union.tree_node* %228), !dbg !5323
  %229 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !5323
  %cmp357 = icmp eq %union.tree_node* %call356, %229, !dbg !5323
  br i1 %cmp357, label %cond.false360, label %cond.true359, !dbg !5323

cond.true359:                                     ; preds = %sw.bb352
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 6758, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5323
  br label %cond.end361, !dbg !5323

cond.false360:                                    ; preds = %sw.bb352
  br label %cond.end361, !dbg !5323

cond.end361:                                      ; preds = %cond.false360, %cond.true359
  %cond362 = phi i32 [ 0, %cond.true359 ], [ 0, %cond.false360 ], !dbg !5323
  %230 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5324
  %231 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5325
  %232 = load %union.tree_node*, %union.tree_node** %231, align 8, !dbg !5325
  %exp363 = bitcast %union.tree_node* %232 to %struct.tree_exp*, !dbg !5325
  %operands364 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp363, i32 0, i32 3, !dbg !5325
  %arrayidx365 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands364, i64 0, i64 0, !dbg !5325
  %233 = load %union.tree_node*, %union.tree_node** %arrayidx365, align 8, !dbg !5325
  %call366 = call %union.gimple_statement_d* @gimple_build_label(%union.tree_node* %233), !dbg !5326
  call void @gimplify_seq_add_stmt(%struct.gimple_seq_d** %230, %union.gimple_statement_d* %call366), !dbg !5327
  br label %sw.epilog871, !dbg !5328

sw.bb367:                                         ; preds = %if.end164
  %234 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5329
  %235 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5330
  %call368 = call i32 @gimplify_case_label_expr(%union.tree_node** %234, %struct.gimple_seq_d** %235), !dbg !5331
  store i32 %call368, i32* %ret, align 4, !dbg !5332
  br label %sw.epilog871, !dbg !5333

sw.bb369:                                         ; preds = %if.end164
  %236 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5334
  %237 = load %union.tree_node*, %union.tree_node** %236, align 8, !dbg !5335
  %238 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5336
  %call370 = call i32 @gimplify_return_expr(%union.tree_node* %237, %struct.gimple_seq_d** %238), !dbg !5337
  store i32 %call370, i32* %ret, align 4, !dbg !5338
  br label %sw.epilog871, !dbg !5339

sw.bb371:                                         ; preds = %if.end164
  %239 = load i32, i32* %fallback.addr, align 4, !dbg !5340
  %cmp372 = icmp eq i32 %239, 0, !dbg !5342
  br i1 %cmp372, label %if.then374, label %if.else395, !dbg !5343

if.then374:                                       ; preds = %sw.bb371
  call void @llvm.dbg.declare(metadata i64* %ix, metadata !5344, metadata !DIExpression()), !dbg !5346
  call void @llvm.dbg.declare(metadata %struct.constructor_elt_d** %ce, metadata !5347, metadata !DIExpression()), !dbg !5349
  call void @llvm.dbg.declare(metadata %union.tree_node** %temp, metadata !5350, metadata !DIExpression()), !dbg !5351
  store %union.tree_node* null, %union.tree_node** %temp, align 8, !dbg !5351
  store i64 0, i64* %ix, align 8, !dbg !5352
  br label %for.cond, !dbg !5354

for.cond:                                         ; preds = %for.inc, %if.then374
  %240 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5355
  %241 = load %union.tree_node*, %union.tree_node** %240, align 8, !dbg !5355
  %constructor = bitcast %union.tree_node* %241 to %struct.tree_constructor*, !dbg !5355
  %elts = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor, i32 0, i32 1, !dbg !5355
  %242 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts, align 8, !dbg !5355
  %tobool375 = icmp ne %struct.VEC_constructor_elt_gc* %242, null, !dbg !5355
  br i1 %tobool375, label %cond.true376, label %cond.false380, !dbg !5355

cond.true376:                                     ; preds = %for.cond
  %243 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5355
  %244 = load %union.tree_node*, %union.tree_node** %243, align 8, !dbg !5355
  %constructor377 = bitcast %union.tree_node* %244 to %struct.tree_constructor*, !dbg !5355
  %elts378 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor377, i32 0, i32 1, !dbg !5355
  %245 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts378, align 8, !dbg !5355
  %base379 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %245, i32 0, i32 0, !dbg !5355
  br label %cond.end381, !dbg !5355

cond.false380:                                    ; preds = %for.cond
  br label %cond.end381, !dbg !5355

cond.end381:                                      ; preds = %cond.false380, %cond.true376
  %cond382 = phi %struct.VEC_constructor_elt_base* [ %base379, %cond.true376 ], [ null, %cond.false380 ], !dbg !5355
  %246 = load i64, i64* %ix, align 8, !dbg !5355
  %conv383 = trunc i64 %246 to i32, !dbg !5355
  %call384 = call i32 @VEC_constructor_elt_base_iterate(%struct.VEC_constructor_elt_base* %cond382, i32 %conv383, %struct.constructor_elt_d** %ce), !dbg !5355
  %tobool385 = icmp ne i32 %call384, 0, !dbg !5357
  br i1 %tobool385, label %for.body, label %for.end, !dbg !5357

for.body:                                         ; preds = %cond.end381
  %247 = load %struct.constructor_elt_d*, %struct.constructor_elt_d** %ce, align 8, !dbg !5358
  %value = getelementptr inbounds %struct.constructor_elt_d, %struct.constructor_elt_d* %247, i32 0, i32 1, !dbg !5358
  %248 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !5358
  %base386 = bitcast %union.tree_node* %248 to %struct.tree_base*, !dbg !5358
  %249 = bitcast %struct.tree_base* %base386 to i64*, !dbg !5358
  %bf.load387 = load i64, i64* %249, align 8, !dbg !5358
  %bf.lshr388 = lshr i64 %bf.load387, 16, !dbg !5358
  %bf.clear389 = and i64 %bf.lshr388, 1, !dbg !5358
  %bf.cast390 = trunc i64 %bf.clear389 to i32, !dbg !5358
  %tobool391 = icmp ne i32 %bf.cast390, 0, !dbg !5358
  br i1 %tobool391, label %if.then392, label %if.end394, !dbg !5360

if.then392:                                       ; preds = %for.body
  %250 = load %struct.constructor_elt_d*, %struct.constructor_elt_d** %ce, align 8, !dbg !5361
  %value393 = getelementptr inbounds %struct.constructor_elt_d, %struct.constructor_elt_d* %250, i32 0, i32 1, !dbg !5362
  %251 = load %union.tree_node*, %union.tree_node** %value393, align 8, !dbg !5362
  call void @append_to_statement_list(%union.tree_node* %251, %union.tree_node** %temp), !dbg !5363
  br label %if.end394, !dbg !5363

if.end394:                                        ; preds = %if.then392, %for.body
  br label %for.inc, !dbg !5358

for.inc:                                          ; preds = %if.end394
  %252 = load i64, i64* %ix, align 8, !dbg !5364
  %inc = add i64 %252, 1, !dbg !5364
  store i64 %inc, i64* %ix, align 8, !dbg !5364
  br label %for.cond, !dbg !5365, !llvm.loop !5366

for.end:                                          ; preds = %cond.end381
  %253 = load %union.tree_node*, %union.tree_node** %temp, align 8, !dbg !5368
  %254 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5369
  store %union.tree_node* %253, %union.tree_node** %254, align 8, !dbg !5370
  store i32 0, i32* %ret, align 4, !dbg !5371
  br label %if.end402, !dbg !5372

if.else395:                                       ; preds = %sw.bb371
  %255 = load i32, i32* %fallback.addr, align 4, !dbg !5373
  %cmp396 = icmp eq i32 %255, 2, !dbg !5375
  br i1 %cmp396, label %if.then398, label %if.else400, !dbg !5376

if.then398:                                       ; preds = %if.else395
  %256 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5377
  %257 = load %union.tree_node*, %union.tree_node** %256, align 8, !dbg !5379
  %258 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5380
  %259 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !5381
  %call399 = call %union.tree_node* @get_initialized_tmp_var(%union.tree_node* %257, %struct.gimple_seq_d** %258, %struct.gimple_seq_d** %259), !dbg !5382
  %260 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5383
  store %union.tree_node* %call399, %union.tree_node** %260, align 8, !dbg !5384
  %261 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5385
  %262 = load %union.tree_node*, %union.tree_node** %261, align 8, !dbg !5386
  call void @mark_addressable(%union.tree_node* %262), !dbg !5387
  br label %if.end401, !dbg !5388

if.else400:                                       ; preds = %if.else395
  store i32 1, i32* %ret, align 4, !dbg !5389
  br label %if.end401

if.end401:                                        ; preds = %if.else400, %if.then398
  br label %if.end402

if.end402:                                        ; preds = %if.end401, %for.end
  br label %sw.epilog871, !dbg !5390

sw.bb403:                                         ; preds = %if.end164
  %263 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5391
  %264 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5392
  %265 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !5393
  %call404 = call i32 @gimplify_save_expr(%union.tree_node** %263, %struct.gimple_seq_d** %264, %struct.gimple_seq_d** %265), !dbg !5394
  store i32 %call404, i32* %ret, align 4, !dbg !5395
  br label %sw.epilog871, !dbg !5396

sw.bb405:                                         ; preds = %if.end164
  call void @llvm.dbg.declare(metadata i32* %r0, metadata !5397, metadata !DIExpression()), !dbg !5399
  call void @llvm.dbg.declare(metadata i32* %r1, metadata !5400, metadata !DIExpression()), !dbg !5401
  call void @llvm.dbg.declare(metadata i32* %r2, metadata !5402, metadata !DIExpression()), !dbg !5403
  %266 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5404
  %267 = load %union.tree_node*, %union.tree_node** %266, align 8, !dbg !5404
  %exp406 = bitcast %union.tree_node* %267 to %struct.tree_exp*, !dbg !5404
  %operands407 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp406, i32 0, i32 3, !dbg !5404
  %arrayidx408 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands407, i64 0, i64 0, !dbg !5404
  %268 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5405
  %269 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !5406
  %call409 = call i32 @gimplify_expr(%union.tree_node** %arrayidx408, %struct.gimple_seq_d** %268, %struct.gimple_seq_d** %269, i8 (%union.tree_node*)* @is_gimple_lvalue, i32 3), !dbg !5407
  store i32 %call409, i32* %r0, align 4, !dbg !5408
  %270 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5409
  %271 = load %union.tree_node*, %union.tree_node** %270, align 8, !dbg !5409
  %exp410 = bitcast %union.tree_node* %271 to %struct.tree_exp*, !dbg !5409
  %operands411 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp410, i32 0, i32 3, !dbg !5409
  %arrayidx412 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands411, i64 0, i64 1, !dbg !5409
  %272 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5410
  %273 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !5411
  %call413 = call i32 @gimplify_expr(%union.tree_node** %arrayidx412, %struct.gimple_seq_d** %272, %struct.gimple_seq_d** %273, i8 (%union.tree_node*)* @is_gimple_val, i32 1), !dbg !5412
  store i32 %call413, i32* %r1, align 4, !dbg !5413
  %274 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5414
  %275 = load %union.tree_node*, %union.tree_node** %274, align 8, !dbg !5414
  %exp414 = bitcast %union.tree_node* %275 to %struct.tree_exp*, !dbg !5414
  %operands415 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp414, i32 0, i32 3, !dbg !5414
  %arrayidx416 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands415, i64 0, i64 2, !dbg !5414
  %276 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5415
  %277 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !5416
  %call417 = call i32 @gimplify_expr(%union.tree_node** %arrayidx416, %struct.gimple_seq_d** %276, %struct.gimple_seq_d** %277, i8 (%union.tree_node*)* @is_gimple_val, i32 1), !dbg !5417
  store i32 %call417, i32* %r2, align 4, !dbg !5418
  %278 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5419
  %279 = load %union.tree_node*, %union.tree_node** %278, align 8, !dbg !5420
  call void @recalculate_side_effects(%union.tree_node* %279), !dbg !5421
  %280 = load i32, i32* %r0, align 4, !dbg !5422
  %281 = load i32, i32* %r1, align 4, !dbg !5422
  %282 = load i32, i32* %r2, align 4, !dbg !5422
  %cmp418 = icmp slt i32 %281, %282, !dbg !5422
  br i1 %cmp418, label %cond.true420, label %cond.false421, !dbg !5422

cond.true420:                                     ; preds = %sw.bb405
  %283 = load i32, i32* %r1, align 4, !dbg !5422
  br label %cond.end422, !dbg !5422

cond.false421:                                    ; preds = %sw.bb405
  %284 = load i32, i32* %r2, align 4, !dbg !5422
  br label %cond.end422, !dbg !5422

cond.end422:                                      ; preds = %cond.false421, %cond.true420
  %cond423 = phi i32 [ %283, %cond.true420 ], [ %284, %cond.false421 ], !dbg !5422
  %cmp424 = icmp slt i32 %280, %cond423, !dbg !5422
  br i1 %cmp424, label %cond.true426, label %cond.false427, !dbg !5422

cond.true426:                                     ; preds = %cond.end422
  %285 = load i32, i32* %r0, align 4, !dbg !5422
  br label %cond.end434, !dbg !5422

cond.false427:                                    ; preds = %cond.end422
  %286 = load i32, i32* %r1, align 4, !dbg !5422
  %287 = load i32, i32* %r2, align 4, !dbg !5422
  %cmp428 = icmp slt i32 %286, %287, !dbg !5422
  br i1 %cmp428, label %cond.true430, label %cond.false431, !dbg !5422

cond.true430:                                     ; preds = %cond.false427
  %288 = load i32, i32* %r1, align 4, !dbg !5422
  br label %cond.end432, !dbg !5422

cond.false431:                                    ; preds = %cond.false427
  %289 = load i32, i32* %r2, align 4, !dbg !5422
  br label %cond.end432, !dbg !5422

cond.end432:                                      ; preds = %cond.false431, %cond.true430
  %cond433 = phi i32 [ %288, %cond.true430 ], [ %289, %cond.false431 ], !dbg !5422
  br label %cond.end434, !dbg !5422

cond.end434:                                      ; preds = %cond.end432, %cond.true426
  %cond435 = phi i32 [ %285, %cond.true426 ], [ %cond433, %cond.end432 ], !dbg !5422
  store i32 %cond435, i32* %ret, align 4, !dbg !5423
  br label %sw.epilog871, !dbg !5424

sw.bb436:                                         ; preds = %if.end164
  call void @llvm.dbg.declare(metadata i32* %r0437, metadata !5425, metadata !DIExpression()), !dbg !5427
  store i32 1, i32* %r0437, align 4, !dbg !5427
  call void @llvm.dbg.declare(metadata i32* %r1438, metadata !5428, metadata !DIExpression()), !dbg !5429
  store i32 1, i32* %r1438, align 4, !dbg !5429
  %290 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5430
  %291 = load %union.tree_node*, %union.tree_node** %290, align 8, !dbg !5430
  %exp439 = bitcast %union.tree_node* %291 to %struct.tree_exp*, !dbg !5430
  %operands440 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp439, i32 0, i32 3, !dbg !5430
  %arrayidx441 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands440, i64 0, i64 0, !dbg !5430
  %292 = load %union.tree_node*, %union.tree_node** %arrayidx441, align 8, !dbg !5430
  %tobool442 = icmp ne %union.tree_node* %292, null, !dbg !5430
  br i1 %tobool442, label %if.then443, label %if.else448, !dbg !5432

if.then443:                                       ; preds = %sw.bb436
  %293 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5433
  %294 = load %union.tree_node*, %union.tree_node** %293, align 8, !dbg !5433
  %exp444 = bitcast %union.tree_node* %294 to %struct.tree_exp*, !dbg !5433
  %operands445 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp444, i32 0, i32 3, !dbg !5433
  %arrayidx446 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands445, i64 0, i64 0, !dbg !5433
  %295 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5434
  %296 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !5435
  %call447 = call i32 @gimplify_expr(%union.tree_node** %arrayidx446, %struct.gimple_seq_d** %295, %struct.gimple_seq_d** %296, i8 (%union.tree_node*)* @is_gimple_lvalue, i32 3), !dbg !5436
  store i32 %call447, i32* %r0437, align 4, !dbg !5437
  br label %if.end459, !dbg !5438

if.else448:                                       ; preds = %sw.bb436
  %297 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5439
  %298 = load %union.tree_node*, %union.tree_node** %297, align 8, !dbg !5439
  %exp449 = bitcast %union.tree_node* %298 to %struct.tree_exp*, !dbg !5439
  %operands450 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp449, i32 0, i32 3, !dbg !5439
  %arrayidx451 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands450, i64 0, i64 1, !dbg !5439
  %299 = load %union.tree_node*, %union.tree_node** %arrayidx451, align 8, !dbg !5439
  %tobool452 = icmp ne %union.tree_node* %299, null, !dbg !5439
  br i1 %tobool452, label %if.then453, label %if.end458, !dbg !5441

if.then453:                                       ; preds = %if.else448
  %300 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5442
  %301 = load %union.tree_node*, %union.tree_node** %300, align 8, !dbg !5442
  %exp454 = bitcast %union.tree_node* %301 to %struct.tree_exp*, !dbg !5442
  %operands455 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp454, i32 0, i32 3, !dbg !5442
  %arrayidx456 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands455, i64 0, i64 1, !dbg !5442
  %302 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5443
  %303 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !5444
  %call457 = call i32 @gimplify_expr(%union.tree_node** %arrayidx456, %struct.gimple_seq_d** %302, %struct.gimple_seq_d** %303, i8 (%union.tree_node*)* @is_gimple_val, i32 3), !dbg !5445
  store i32 %call457, i32* %r0437, align 4, !dbg !5446
  br label %if.end458, !dbg !5447

if.end458:                                        ; preds = %if.then453, %if.else448
  br label %if.end459

if.end459:                                        ; preds = %if.end458, %if.then443
  %304 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5448
  %305 = load %union.tree_node*, %union.tree_node** %304, align 8, !dbg !5448
  %exp460 = bitcast %union.tree_node* %305 to %struct.tree_exp*, !dbg !5448
  %operands461 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp460, i32 0, i32 3, !dbg !5448
  %arrayidx462 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands461, i64 0, i64 2, !dbg !5448
  %306 = load %union.tree_node*, %union.tree_node** %arrayidx462, align 8, !dbg !5448
  %tobool463 = icmp ne %union.tree_node* %306, null, !dbg !5448
  br i1 %tobool463, label %if.then464, label %if.end469, !dbg !5450

if.then464:                                       ; preds = %if.end459
  %307 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5451
  %308 = load %union.tree_node*, %union.tree_node** %307, align 8, !dbg !5451
  %exp465 = bitcast %union.tree_node* %308 to %struct.tree_exp*, !dbg !5451
  %operands466 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp465, i32 0, i32 3, !dbg !5451
  %arrayidx467 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands466, i64 0, i64 2, !dbg !5451
  %309 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5452
  %310 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !5453
  %call468 = call i32 @gimplify_expr(%union.tree_node** %arrayidx467, %struct.gimple_seq_d** %309, %struct.gimple_seq_d** %310, i8 (%union.tree_node*)* @is_gimple_val, i32 1), !dbg !5454
  store i32 %call468, i32* %r1438, align 4, !dbg !5455
  br label %if.end469, !dbg !5456

if.end469:                                        ; preds = %if.then464, %if.end459
  %311 = load i32, i32* %r0437, align 4, !dbg !5457
  %312 = load i32, i32* %r1438, align 4, !dbg !5457
  %cmp470 = icmp slt i32 %311, %312, !dbg !5457
  br i1 %cmp470, label %cond.true472, label %cond.false473, !dbg !5457

cond.true472:                                     ; preds = %if.end469
  %313 = load i32, i32* %r0437, align 4, !dbg !5457
  br label %cond.end474, !dbg !5457

cond.false473:                                    ; preds = %if.end469
  %314 = load i32, i32* %r1438, align 4, !dbg !5457
  br label %cond.end474, !dbg !5457

cond.end474:                                      ; preds = %cond.false473, %cond.true472
  %cond475 = phi i32 [ %313, %cond.true472 ], [ %314, %cond.false473 ], !dbg !5457
  store i32 %cond475, i32* %ret, align 4, !dbg !5458
  br label %sw.epilog871, !dbg !5459

sw.bb476:                                         ; preds = %if.end164
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 6848, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5460
  br label %sw.bb477, !dbg !5460

sw.bb477:                                         ; preds = %if.end164, %sw.bb476
  %315 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5461
  %316 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5462
  %317 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !5463
  %call478 = call i32 @gimplify_asm_expr(%union.tree_node** %315, %struct.gimple_seq_d** %316, %struct.gimple_seq_d** %317), !dbg !5464
  store i32 %call478, i32* %ret, align 4, !dbg !5465
  br label %sw.epilog871, !dbg !5466

sw.bb479:                                         ; preds = %if.end164, %if.end164
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %eval, metadata !5467, metadata !DIExpression()), !dbg !5469
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %cleanup, metadata !5470, metadata !DIExpression()), !dbg !5471
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %try_, metadata !5472, metadata !DIExpression()), !dbg !5473
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %cleanup, align 8, !dbg !5474
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %eval, align 8, !dbg !5475
  %318 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5476
  %319 = load %union.tree_node*, %union.tree_node** %318, align 8, !dbg !5476
  %exp480 = bitcast %union.tree_node* %319 to %struct.tree_exp*, !dbg !5476
  %operands481 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp480, i32 0, i32 3, !dbg !5476
  %arrayidx482 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands481, i64 0, i64 0, !dbg !5476
  %320 = load %union.tree_node*, %union.tree_node** %arrayidx482, align 8, !dbg !5476
  call void @gimplify_and_add(%union.tree_node* %320, %struct.gimple_seq_d** %eval), !dbg !5477
  %321 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5478
  %322 = load %union.tree_node*, %union.tree_node** %321, align 8, !dbg !5478
  %exp483 = bitcast %union.tree_node* %322 to %struct.tree_exp*, !dbg !5478
  %operands484 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp483, i32 0, i32 3, !dbg !5478
  %arrayidx485 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands484, i64 0, i64 1, !dbg !5478
  %323 = load %union.tree_node*, %union.tree_node** %arrayidx485, align 8, !dbg !5478
  call void @gimplify_and_add(%union.tree_node* %323, %struct.gimple_seq_d** %cleanup), !dbg !5479
  %324 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %cleanup, align 8, !dbg !5480
  %call486 = call zeroext i8 @gimple_seq_empty_p(%struct.gimple_seq_d* %324), !dbg !5482
  %tobool487 = icmp ne i8 %call486, 0, !dbg !5482
  br i1 %tobool487, label %if.then488, label %if.end489, !dbg !5483

if.then488:                                       ; preds = %sw.bb479
  %325 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5484
  %326 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %eval, align 8, !dbg !5486
  call void @gimple_seq_add_seq(%struct.gimple_seq_d** %325, %struct.gimple_seq_d* %326), !dbg !5487
  store i32 1, i32* %ret, align 4, !dbg !5488
  br label %sw.epilog871, !dbg !5489

if.end489:                                        ; preds = %sw.bb479
  %327 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %eval, align 8, !dbg !5490
  %328 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %cleanup, align 8, !dbg !5491
  %329 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5492
  %330 = load %union.tree_node*, %union.tree_node** %329, align 8, !dbg !5492
  %base490 = bitcast %union.tree_node* %330 to %struct.tree_base*, !dbg !5492
  %331 = bitcast %struct.tree_base* %base490 to i64*, !dbg !5492
  %bf.load491 = load i64, i64* %331, align 8, !dbg !5492
  %bf.clear492 = and i64 %bf.load491, 65535, !dbg !5492
  %bf.cast493 = trunc i64 %bf.clear492 to i32, !dbg !5492
  %cmp494 = icmp eq i32 %bf.cast493, 131, !dbg !5493
  %332 = zext i1 %cmp494 to i64, !dbg !5492
  %cond496 = select i1 %cmp494, i32 2, i32 1, !dbg !5492
  %call497 = call %union.gimple_statement_d* @gimple_build_try(%struct.gimple_seq_d* %327, %struct.gimple_seq_d* %328, i32 %cond496), !dbg !5494
  store %union.gimple_statement_d* %call497, %union.gimple_statement_d** %try_, align 8, !dbg !5495
  %333 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5496
  %334 = load %union.tree_node*, %union.tree_node** %333, align 8, !dbg !5496
  %base498 = bitcast %union.tree_node* %334 to %struct.tree_base*, !dbg !5496
  %335 = bitcast %struct.tree_base* %base498 to i64*, !dbg !5496
  %bf.load499 = load i64, i64* %335, align 8, !dbg !5496
  %bf.clear500 = and i64 %bf.load499, 65535, !dbg !5496
  %bf.cast501 = trunc i64 %bf.clear500 to i32, !dbg !5496
  %cmp502 = icmp eq i32 %bf.cast501, 130, !dbg !5498
  br i1 %cmp502, label %if.then504, label %if.end511, !dbg !5499

if.then504:                                       ; preds = %if.end489
  %336 = load %union.gimple_statement_d*, %union.gimple_statement_d** %try_, align 8, !dbg !5500
  %337 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5501
  %338 = load %union.tree_node*, %union.tree_node** %337, align 8, !dbg !5501
  %base505 = bitcast %union.tree_node* %338 to %struct.tree_base*, !dbg !5501
  %339 = bitcast %struct.tree_base* %base505 to i64*, !dbg !5501
  %bf.load506 = load i64, i64* %339, align 8, !dbg !5501
  %bf.lshr507 = lshr i64 %bf.load506, 26, !dbg !5501
  %bf.clear508 = and i64 %bf.lshr507, 1, !dbg !5501
  %bf.cast509 = trunc i64 %bf.clear508 to i32, !dbg !5501
  %conv510 = trunc i32 %bf.cast509 to i8, !dbg !5501
  call void @gimple_try_set_catch_is_cleanup(%union.gimple_statement_d* %336, i8 zeroext %conv510), !dbg !5502
  br label %if.end511, !dbg !5502

if.end511:                                        ; preds = %if.then504, %if.end489
  %340 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5503
  %341 = load %union.gimple_statement_d*, %union.gimple_statement_d** %try_, align 8, !dbg !5504
  call void @gimplify_seq_add_stmt(%struct.gimple_seq_d** %340, %union.gimple_statement_d* %341), !dbg !5505
  store i32 1, i32* %ret, align 4, !dbg !5506
  br label %sw.epilog871, !dbg !5507

sw.bb512:                                         ; preds = %if.end164
  %342 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5508
  %343 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5509
  %call513 = call i32 @gimplify_cleanup_point_expr(%union.tree_node** %342, %struct.gimple_seq_d** %343), !dbg !5510
  store i32 %call513, i32* %ret, align 4, !dbg !5511
  br label %sw.epilog871, !dbg !5512

sw.bb514:                                         ; preds = %if.end164
  %344 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5513
  %345 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5514
  %346 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !5515
  %call515 = call i32 @gimplify_target_expr(%union.tree_node** %344, %struct.gimple_seq_d** %345, %struct.gimple_seq_d** %346), !dbg !5516
  store i32 %call515, i32* %ret, align 4, !dbg !5517
  br label %sw.epilog871, !dbg !5518

sw.bb516:                                         ; preds = %if.end164
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %c, metadata !5519, metadata !DIExpression()), !dbg !5521
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %handler, metadata !5522, metadata !DIExpression()), !dbg !5523
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %handler, align 8, !dbg !5523
  %347 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5524
  %348 = load %union.tree_node*, %union.tree_node** %347, align 8, !dbg !5524
  %exp517 = bitcast %union.tree_node* %348 to %struct.tree_exp*, !dbg !5524
  %operands518 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp517, i32 0, i32 3, !dbg !5524
  %arrayidx519 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands518, i64 0, i64 1, !dbg !5524
  %349 = load %union.tree_node*, %union.tree_node** %arrayidx519, align 8, !dbg !5524
  call void @gimplify_and_add(%union.tree_node* %349, %struct.gimple_seq_d** %handler), !dbg !5525
  %350 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5526
  %351 = load %union.tree_node*, %union.tree_node** %350, align 8, !dbg !5526
  %exp520 = bitcast %union.tree_node* %351 to %struct.tree_exp*, !dbg !5526
  %operands521 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp520, i32 0, i32 3, !dbg !5526
  %arrayidx522 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands521, i64 0, i64 0, !dbg !5526
  %352 = load %union.tree_node*, %union.tree_node** %arrayidx522, align 8, !dbg !5526
  %353 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %handler, align 8, !dbg !5527
  %call523 = call %union.gimple_statement_d* @gimple_build_catch(%union.tree_node* %352, %struct.gimple_seq_d* %353), !dbg !5528
  store %union.gimple_statement_d* %call523, %union.gimple_statement_d** %c, align 8, !dbg !5529
  %354 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5530
  %355 = load %union.gimple_statement_d*, %union.gimple_statement_d** %c, align 8, !dbg !5531
  call void @gimplify_seq_add_stmt(%struct.gimple_seq_d** %354, %union.gimple_statement_d* %355), !dbg !5532
  store i32 1, i32* %ret, align 4, !dbg !5533
  br label %sw.epilog871, !dbg !5534

sw.bb524:                                         ; preds = %if.end164
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %ehf, metadata !5535, metadata !DIExpression()), !dbg !5537
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %failure, metadata !5538, metadata !DIExpression()), !dbg !5539
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %failure, align 8, !dbg !5539
  %356 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5540
  %357 = load %union.tree_node*, %union.tree_node** %356, align 8, !dbg !5540
  %exp525 = bitcast %union.tree_node* %357 to %struct.tree_exp*, !dbg !5540
  %operands526 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp525, i32 0, i32 3, !dbg !5540
  %arrayidx527 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands526, i64 0, i64 1, !dbg !5540
  %358 = load %union.tree_node*, %union.tree_node** %arrayidx527, align 8, !dbg !5540
  call void @gimplify_and_add(%union.tree_node* %358, %struct.gimple_seq_d** %failure), !dbg !5541
  %359 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5542
  %360 = load %union.tree_node*, %union.tree_node** %359, align 8, !dbg !5542
  %exp528 = bitcast %union.tree_node* %360 to %struct.tree_exp*, !dbg !5542
  %operands529 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp528, i32 0, i32 3, !dbg !5542
  %arrayidx530 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands529, i64 0, i64 0, !dbg !5542
  %361 = load %union.tree_node*, %union.tree_node** %arrayidx530, align 8, !dbg !5542
  %362 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %failure, align 8, !dbg !5543
  %call531 = call %union.gimple_statement_d* @gimple_build_eh_filter(%union.tree_node* %361, %struct.gimple_seq_d* %362), !dbg !5544
  store %union.gimple_statement_d* %call531, %union.gimple_statement_d** %ehf, align 8, !dbg !5545
  %363 = load %union.gimple_statement_d*, %union.gimple_statement_d** %ehf, align 8, !dbg !5546
  %364 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5547
  %365 = load %union.tree_node*, %union.tree_node** %364, align 8, !dbg !5547
  %base532 = bitcast %union.tree_node* %365 to %struct.tree_base*, !dbg !5547
  %366 = bitcast %struct.tree_base* %base532 to i64*, !dbg !5547
  %bf.load533 = load i64, i64* %366, align 8, !dbg !5547
  %bf.lshr534 = lshr i64 %bf.load533, 23, !dbg !5547
  %bf.clear535 = and i64 %bf.lshr534, 1, !dbg !5547
  %bf.cast536 = trunc i64 %bf.clear535 to i32, !dbg !5547
  %conv537 = trunc i32 %bf.cast536 to i8, !dbg !5547
  call void @gimple_set_no_warning(%union.gimple_statement_d* %363, i8 zeroext %conv537), !dbg !5548
  %367 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5549
  %368 = load %union.gimple_statement_d*, %union.gimple_statement_d** %ehf, align 8, !dbg !5550
  call void @gimplify_seq_add_stmt(%struct.gimple_seq_d** %367, %union.gimple_statement_d* %368), !dbg !5551
  store i32 1, i32* %ret, align 4, !dbg !5552
  br label %sw.epilog871, !dbg !5553

sw.bb538:                                         ; preds = %if.end164
  call void @llvm.dbg.declare(metadata i32* %r0539, metadata !5554, metadata !DIExpression()), !dbg !5556
  call void @llvm.dbg.declare(metadata i32* %r1540, metadata !5557, metadata !DIExpression()), !dbg !5558
  %369 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5559
  %370 = load %union.tree_node*, %union.tree_node** %369, align 8, !dbg !5559
  %exp541 = bitcast %union.tree_node* %370 to %struct.tree_exp*, !dbg !5559
  %operands542 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp541, i32 0, i32 3, !dbg !5559
  %arrayidx543 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands542, i64 0, i64 1, !dbg !5559
  %371 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5560
  %372 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !5561
  %call544 = call i32 @gimplify_expr(%union.tree_node** %arrayidx543, %struct.gimple_seq_d** %371, %struct.gimple_seq_d** %372, i8 (%union.tree_node*)* @is_gimple_val, i32 1), !dbg !5562
  store i32 %call544, i32* %r0539, align 4, !dbg !5563
  %373 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5564
  %374 = load %union.tree_node*, %union.tree_node** %373, align 8, !dbg !5564
  %exp545 = bitcast %union.tree_node* %374 to %struct.tree_exp*, !dbg !5564
  %operands546 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp545, i32 0, i32 3, !dbg !5564
  %arrayidx547 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands546, i64 0, i64 0, !dbg !5564
  %375 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5565
  %376 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !5566
  %call548 = call i32 @gimplify_expr(%union.tree_node** %arrayidx547, %struct.gimple_seq_d** %375, %struct.gimple_seq_d** %376, i8 (%union.tree_node*)* @is_gimple_val, i32 1), !dbg !5567
  store i32 %call548, i32* %r1540, align 4, !dbg !5568
  %377 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5569
  %378 = load %union.tree_node*, %union.tree_node** %377, align 8, !dbg !5569
  %base549 = bitcast %union.tree_node* %378 to %struct.tree_base*, !dbg !5569
  %379 = bitcast %struct.tree_base* %base549 to i64*, !dbg !5569
  %bf.load550 = load i64, i64* %379, align 8, !dbg !5570
  %bf.clear551 = and i64 %bf.load550, -65537, !dbg !5570
  store i64 %bf.clear551, i64* %379, align 8, !dbg !5570
  %380 = load i32, i32* %r0539, align 4, !dbg !5571
  %381 = load i32, i32* %r1540, align 4, !dbg !5571
  %cmp552 = icmp slt i32 %380, %381, !dbg !5571
  br i1 %cmp552, label %cond.true554, label %cond.false555, !dbg !5571

cond.true554:                                     ; preds = %sw.bb538
  %382 = load i32, i32* %r0539, align 4, !dbg !5571
  br label %cond.end556, !dbg !5571

cond.false555:                                    ; preds = %sw.bb538
  %383 = load i32, i32* %r1540, align 4, !dbg !5571
  br label %cond.end556, !dbg !5571

cond.end556:                                      ; preds = %cond.false555, %cond.true554
  %cond557 = phi i32 [ %382, %cond.true554 ], [ %383, %cond.false555 ], !dbg !5571
  store i32 %cond557, i32* %ret, align 4, !dbg !5572
  br label %sw.epilog871, !dbg !5573

sw.bb558:                                         ; preds = %if.end164
  %384 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5574
  %385 = load %union.tree_node*, %union.tree_node** %384, align 8, !dbg !5574
  %base559 = bitcast %union.tree_node* %385 to %struct.tree_base*, !dbg !5574
  %386 = bitcast %struct.tree_base* %base559 to i64*, !dbg !5574
  %bf.load560 = load i64, i64* %386, align 8, !dbg !5575
  %bf.clear561 = and i64 %bf.load560, -65537, !dbg !5575
  %bf.set = or i64 %bf.clear561, 65536, !dbg !5575
  store i64 %bf.set, i64* %386, align 8, !dbg !5575
  store i32 1, i32* %ret, align 4, !dbg !5576
  br label %sw.epilog871, !dbg !5577

sw.bb562:                                         ; preds = %if.end164
  %387 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5578
  %388 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5579
  %call563 = call i32 @gimplify_statement_list(%union.tree_node** %387, %struct.gimple_seq_d** %388), !dbg !5580
  store i32 %call563, i32* %ret, align 4, !dbg !5581
  br label %sw.epilog871, !dbg !5582

sw.bb564:                                         ; preds = %if.end164
  %389 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5583
  %390 = load %union.tree_node*, %union.tree_node** %389, align 8, !dbg !5583
  %exp565 = bitcast %union.tree_node* %390 to %struct.tree_exp*, !dbg !5583
  %operands566 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp565, i32 0, i32 3, !dbg !5583
  %arrayidx567 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands566, i64 0, i64 0, !dbg !5583
  %391 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5585
  %392 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !5586
  %cmp568 = icmp eq %struct.gimple_seq_d** %392, %internal_post, !dbg !5587
  br i1 %cmp568, label %cond.true570, label %cond.false571, !dbg !5586

cond.true570:                                     ; preds = %sw.bb564
  br label %cond.end572, !dbg !5586

cond.false571:                                    ; preds = %sw.bb564
  %393 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !5588
  br label %cond.end572, !dbg !5586

cond.end572:                                      ; preds = %cond.false571, %cond.true570
  %cond573 = phi %struct.gimple_seq_d** [ null, %cond.true570 ], [ %393, %cond.false571 ], !dbg !5586
  %394 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** %gimple_test_f.addr, align 8, !dbg !5589
  %395 = load i32, i32* %fallback.addr, align 4, !dbg !5590
  %call574 = call i32 @gimplify_expr(%union.tree_node** %arrayidx567, %struct.gimple_seq_d** %391, %struct.gimple_seq_d** %cond573, i8 (%union.tree_node*)* %394, i32 %395), !dbg !5591
  %396 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5592
  %397 = load %union.tree_node*, %union.tree_node** %396, align 8, !dbg !5592
  %exp575 = bitcast %union.tree_node* %397 to %struct.tree_exp*, !dbg !5592
  %operands576 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp575, i32 0, i32 3, !dbg !5592
  %arrayidx577 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands576, i64 0, i64 1, !dbg !5592
  %398 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5593
  %399 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !5594
  %call578 = call i32 @gimplify_expr(%union.tree_node** %arrayidx577, %struct.gimple_seq_d** %398, %struct.gimple_seq_d** %399, i8 (%union.tree_node*)* @is_gimple_val, i32 1), !dbg !5595
  br label %sw.epilog871, !dbg !5596

sw.bb579:                                         ; preds = %if.end164, %if.end164
  %400 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5597
  %call580 = call i32 @gimplify_var_or_parm_decl(%union.tree_node** %400), !dbg !5598
  store i32 %call580, i32* %ret, align 4, !dbg !5599
  br label %sw.epilog871, !dbg !5600

sw.bb581:                                         ; preds = %if.end164
  %401 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** @gimplify_omp_ctxp, align 8, !dbg !5601
  %tobool582 = icmp ne %struct.gimplify_omp_ctx* %401, null, !dbg !5601
  br i1 %tobool582, label %if.then583, label %if.end585, !dbg !5603

if.then583:                                       ; preds = %sw.bb581
  %402 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** @gimplify_omp_ctxp, align 8, !dbg !5604
  %403 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5605
  %404 = load %union.tree_node*, %union.tree_node** %403, align 8, !dbg !5606
  %call584 = call zeroext i8 @omp_notice_variable(%struct.gimplify_omp_ctx* %402, %union.tree_node* %404, i8 zeroext 1), !dbg !5607
  br label %if.end585, !dbg !5607

if.end585:                                        ; preds = %if.then583, %sw.bb581
  store i32 1, i32* %ret, align 4, !dbg !5608
  br label %sw.epilog871, !dbg !5609

sw.bb586:                                         ; preds = %if.end164
  store i32 1, i32* %ret, align 4, !dbg !5610
  br label %sw.epilog871, !dbg !5611

sw.bb587:                                         ; preds = %if.end164
  %405 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5612
  %406 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5613
  call void @gimplify_omp_parallel(%union.tree_node** %405, %struct.gimple_seq_d** %406), !dbg !5614
  store i32 1, i32* %ret, align 4, !dbg !5615
  br label %sw.epilog871, !dbg !5616

sw.bb588:                                         ; preds = %if.end164
  %407 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5617
  %408 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5618
  call void @gimplify_omp_task(%union.tree_node** %407, %struct.gimple_seq_d** %408), !dbg !5619
  store i32 1, i32* %ret, align 4, !dbg !5620
  br label %sw.epilog871, !dbg !5621

sw.bb589:                                         ; preds = %if.end164
  %409 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5622
  %410 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5623
  %call590 = call i32 @gimplify_omp_for(%union.tree_node** %409, %struct.gimple_seq_d** %410), !dbg !5624
  store i32 %call590, i32* %ret, align 4, !dbg !5625
  br label %sw.epilog871, !dbg !5626

sw.bb591:                                         ; preds = %if.end164, %if.end164
  %411 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5627
  %412 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5628
  call void @gimplify_omp_workshare(%union.tree_node** %411, %struct.gimple_seq_d** %412), !dbg !5629
  store i32 1, i32* %ret, align 4, !dbg !5630
  br label %sw.epilog871, !dbg !5631

sw.bb592:                                         ; preds = %if.end164, %if.end164, %if.end164, %if.end164
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %body, metadata !5632, metadata !DIExpression()), !dbg !5634
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %body, align 8, !dbg !5634
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g, metadata !5635, metadata !DIExpression()), !dbg !5636
  %413 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5637
  %414 = load %union.tree_node*, %union.tree_node** %413, align 8, !dbg !5637
  %exp593 = bitcast %union.tree_node* %414 to %struct.tree_exp*, !dbg !5637
  %operands594 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp593, i32 0, i32 3, !dbg !5637
  %arrayidx595 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands594, i64 0, i64 0, !dbg !5637
  %415 = load %union.tree_node*, %union.tree_node** %arrayidx595, align 8, !dbg !5637
  call void @gimplify_and_add(%union.tree_node* %415, %struct.gimple_seq_d** %body), !dbg !5638
  %416 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5639
  %417 = load %union.tree_node*, %union.tree_node** %416, align 8, !dbg !5639
  %base596 = bitcast %union.tree_node* %417 to %struct.tree_base*, !dbg !5639
  %418 = bitcast %struct.tree_base* %base596 to i64*, !dbg !5639
  %bf.load597 = load i64, i64* %418, align 8, !dbg !5639
  %bf.clear598 = and i64 %bf.load597, 65535, !dbg !5639
  %bf.cast599 = trunc i64 %bf.clear598 to i32, !dbg !5639
  switch i32 %bf.cast599, label %sw.default [
    i32 158, label %sw.bb600
    i32 159, label %sw.bb602
    i32 160, label %sw.bb604
    i32 161, label %sw.bb606
  ], !dbg !5640

sw.bb600:                                         ; preds = %sw.bb592
  %419 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %body, align 8, !dbg !5641
  %call601 = call %union.gimple_statement_d* @gimple_build_omp_section(%struct.gimple_seq_d* %419), !dbg !5643
  store %union.gimple_statement_d* %call601, %union.gimple_statement_d** %g, align 8, !dbg !5644
  br label %sw.epilog, !dbg !5645

sw.bb602:                                         ; preds = %sw.bb592
  %420 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %body, align 8, !dbg !5646
  %call603 = call %union.gimple_statement_d* @gimple_build_omp_master(%struct.gimple_seq_d* %420), !dbg !5647
  store %union.gimple_statement_d* %call603, %union.gimple_statement_d** %g, align 8, !dbg !5648
  br label %sw.epilog, !dbg !5649

sw.bb604:                                         ; preds = %sw.bb592
  %421 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %body, align 8, !dbg !5650
  %call605 = call %union.gimple_statement_d* @gimple_build_omp_ordered(%struct.gimple_seq_d* %421), !dbg !5651
  store %union.gimple_statement_d* %call605, %union.gimple_statement_d** %g, align 8, !dbg !5652
  br label %sw.epilog, !dbg !5653

sw.bb606:                                         ; preds = %sw.bb592
  %422 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %body, align 8, !dbg !5654
  %423 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5655
  %424 = load %union.tree_node*, %union.tree_node** %423, align 8, !dbg !5655
  %exp607 = bitcast %union.tree_node* %424 to %struct.tree_exp*, !dbg !5655
  %operands608 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp607, i32 0, i32 3, !dbg !5655
  %arrayidx609 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands608, i64 0, i64 1, !dbg !5655
  %425 = load %union.tree_node*, %union.tree_node** %arrayidx609, align 8, !dbg !5655
  %call610 = call %union.gimple_statement_d* @gimple_build_omp_critical(%struct.gimple_seq_d* %422, %union.tree_node* %425), !dbg !5656
  store %union.gimple_statement_d* %call610, %union.gimple_statement_d** %g, align 8, !dbg !5657
  br label %sw.epilog, !dbg !5658

sw.default:                                       ; preds = %sw.bb592
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 7010, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5659
  br label %sw.epilog, !dbg !5660

sw.epilog:                                        ; preds = %sw.default, %sw.bb606, %sw.bb604, %sw.bb602, %sw.bb600
  %426 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5661
  %427 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g, align 8, !dbg !5662
  call void @gimplify_seq_add_stmt(%struct.gimple_seq_d** %426, %union.gimple_statement_d* %427), !dbg !5663
  store i32 1, i32* %ret, align 4, !dbg !5664
  br label %sw.epilog871, !dbg !5665

sw.bb611:                                         ; preds = %if.end164
  %428 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5666
  %429 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5667
  %call612 = call i32 @gimplify_omp_atomic(%union.tree_node** %428, %struct.gimple_seq_d** %429), !dbg !5668
  store i32 %call612, i32* %ret, align 4, !dbg !5669
  br label %sw.epilog871, !dbg !5670

sw.bb613:                                         ; preds = %if.end164
  %430 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5671
  %431 = load %union.tree_node*, %union.tree_node** %430, align 8, !dbg !5671
  %exp614 = bitcast %union.tree_node* %431 to %struct.tree_exp*, !dbg !5671
  %operands615 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp614, i32 0, i32 3, !dbg !5671
  %arrayidx616 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands615, i64 0, i64 1, !dbg !5671
  %432 = load %union.tree_node*, %union.tree_node** %arrayidx616, align 8, !dbg !5671
  %base617 = bitcast %union.tree_node* %432 to %struct.tree_base*, !dbg !5671
  %433 = bitcast %struct.tree_base* %base617 to i64*, !dbg !5671
  %bf.load618 = load i64, i64* %433, align 8, !dbg !5671
  %bf.clear619 = and i64 %bf.load618, 65535, !dbg !5671
  %bf.cast620 = trunc i64 %bf.clear619 to i32, !dbg !5671
  %cmp621 = icmp eq i32 %bf.cast620, 23, !dbg !5673
  br i1 %cmp621, label %land.lhs.true623, label %if.end658, !dbg !5674

land.lhs.true623:                                 ; preds = %sw.bb613
  %434 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5675
  %435 = load %union.tree_node*, %union.tree_node** %434, align 8, !dbg !5675
  %base624 = bitcast %union.tree_node* %435 to %struct.tree_base*, !dbg !5675
  %436 = bitcast %struct.tree_base* %base624 to i64*, !dbg !5675
  %bf.load625 = load i64, i64* %436, align 8, !dbg !5675
  %bf.clear626 = and i64 %bf.load625, 65535, !dbg !5675
  %bf.cast627 = trunc i64 %bf.clear626 to i32, !dbg !5675
  %idxprom628 = sext i32 %bf.cast627 to i64, !dbg !5675
  %arrayidx629 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom628, !dbg !5675
  %437 = load i32, i32* %arrayidx629, align 4, !dbg !5675
  %cmp630 = icmp uge i32 %437, 4, !dbg !5675
  br i1 %cmp630, label %land.lhs.true632, label %cond.false644, !dbg !5675

land.lhs.true632:                                 ; preds = %land.lhs.true623
  %438 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5675
  %439 = load %union.tree_node*, %union.tree_node** %438, align 8, !dbg !5675
  %base633 = bitcast %union.tree_node* %439 to %struct.tree_base*, !dbg !5675
  %440 = bitcast %struct.tree_base* %base633 to i64*, !dbg !5675
  %bf.load634 = load i64, i64* %440, align 8, !dbg !5675
  %bf.clear635 = and i64 %bf.load634, 65535, !dbg !5675
  %bf.cast636 = trunc i64 %bf.clear635 to i32, !dbg !5675
  %idxprom637 = sext i32 %bf.cast636 to i64, !dbg !5675
  %arrayidx638 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom637, !dbg !5675
  %441 = load i32, i32* %arrayidx638, align 4, !dbg !5675
  %cmp639 = icmp ule i32 %441, 10, !dbg !5675
  br i1 %cmp639, label %cond.true641, label %cond.false644, !dbg !5675

cond.true641:                                     ; preds = %land.lhs.true632
  %442 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5675
  %443 = load %union.tree_node*, %union.tree_node** %442, align 8, !dbg !5675
  %exp642 = bitcast %union.tree_node* %443 to %struct.tree_exp*, !dbg !5675
  %locus643 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp642, i32 0, i32 1, !dbg !5675
  %444 = load i32, i32* %locus643, align 8, !dbg !5675
  br label %cond.end645, !dbg !5675

cond.false644:                                    ; preds = %land.lhs.true632, %land.lhs.true623
  br label %cond.end645, !dbg !5675

cond.end645:                                      ; preds = %cond.false644, %cond.true641
  %cond646 = phi i32 [ %444, %cond.true641 ], [ 0, %cond.false644 ], !dbg !5675
  %445 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5676
  %446 = load %union.tree_node*, %union.tree_node** %445, align 8, !dbg !5676
  %exp647 = bitcast %union.tree_node* %446 to %struct.tree_exp*, !dbg !5676
  %operands648 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp647, i32 0, i32 3, !dbg !5676
  %arrayidx649 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands648, i64 0, i64 0, !dbg !5676
  %447 = load %union.tree_node*, %union.tree_node** %arrayidx649, align 8, !dbg !5676
  %448 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5677
  %449 = load %union.tree_node*, %union.tree_node** %448, align 8, !dbg !5677
  %exp650 = bitcast %union.tree_node* %449 to %struct.tree_exp*, !dbg !5677
  %operands651 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp650, i32 0, i32 3, !dbg !5677
  %arrayidx652 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands651, i64 0, i64 1, !dbg !5677
  %450 = load %union.tree_node*, %union.tree_node** %arrayidx652, align 8, !dbg !5677
  %451 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5678
  %452 = load %union.tree_node*, %union.tree_node** %451, align 8, !dbg !5678
  %common653 = bitcast %union.tree_node* %452 to %struct.tree_common*, !dbg !5678
  %type654 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common653, i32 0, i32 2, !dbg !5678
  %453 = load %union.tree_node*, %union.tree_node** %type654, align 8, !dbg !5678
  %call655 = call %union.tree_node* @maybe_fold_offset_to_address(i32 %cond646, %union.tree_node* %447, %union.tree_node* %450, %union.tree_node* %453), !dbg !5679
  store %union.tree_node* %call655, %union.tree_node** %tmp, align 8, !dbg !5680
  %tobool656 = icmp ne %union.tree_node* %call655, null, !dbg !5680
  br i1 %tobool656, label %if.then657, label %if.end658, !dbg !5681

if.then657:                                       ; preds = %cond.end645
  %454 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !5682
  %455 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5684
  store %union.tree_node* %454, %union.tree_node** %455, align 8, !dbg !5685
  br label %sw.epilog871, !dbg !5686

if.end658:                                        ; preds = %cond.end645, %sw.bb613
  %456 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5687
  %457 = load %union.tree_node*, %union.tree_node** %456, align 8, !dbg !5687
  %exp659 = bitcast %union.tree_node* %457 to %struct.tree_exp*, !dbg !5687
  %operands660 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp659, i32 0, i32 3, !dbg !5687
  %arrayidx661 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands660, i64 0, i64 0, !dbg !5687
  %458 = load %union.tree_node*, %union.tree_node** %arrayidx661, align 8, !dbg !5687
  %base662 = bitcast %union.tree_node* %458 to %struct.tree_base*, !dbg !5687
  %459 = bitcast %struct.tree_base* %base662 to i64*, !dbg !5687
  %bf.load663 = load i64, i64* %459, align 8, !dbg !5687
  %bf.clear664 = and i64 %bf.load663, 65535, !dbg !5687
  %bf.cast665 = trunc i64 %bf.clear664 to i32, !dbg !5687
  %cmp666 = icmp eq i32 %bf.cast665, 116, !dbg !5689
  br i1 %cmp666, label %land.lhs.true668, label %if.end755, !dbg !5690

land.lhs.true668:                                 ; preds = %if.end658
  %460 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5691
  %461 = load %union.tree_node*, %union.tree_node** %460, align 8, !dbg !5691
  %exp669 = bitcast %union.tree_node* %461 to %struct.tree_exp*, !dbg !5691
  %operands670 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp669, i32 0, i32 3, !dbg !5691
  %arrayidx671 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands670, i64 0, i64 1, !dbg !5691
  %462 = load %union.tree_node*, %union.tree_node** %arrayidx671, align 8, !dbg !5691
  %base672 = bitcast %union.tree_node* %462 to %struct.tree_base*, !dbg !5691
  %463 = bitcast %struct.tree_base* %base672 to i64*, !dbg !5691
  %bf.load673 = load i64, i64* %463, align 8, !dbg !5691
  %bf.clear674 = and i64 %bf.load673, 65535, !dbg !5691
  %bf.cast675 = trunc i64 %bf.clear674 to i32, !dbg !5691
  %cmp676 = icmp eq i32 %bf.cast675, 23, !dbg !5692
  br i1 %cmp676, label %land.lhs.true678, label %if.end755, !dbg !5693

land.lhs.true678:                                 ; preds = %land.lhs.true668
  %464 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5694
  %465 = load %union.tree_node*, %union.tree_node** %464, align 8, !dbg !5694
  %exp679 = bitcast %union.tree_node* %465 to %struct.tree_exp*, !dbg !5694
  %operands680 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp679, i32 0, i32 3, !dbg !5694
  %arrayidx681 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands680, i64 0, i64 0, !dbg !5694
  %466 = load %union.tree_node*, %union.tree_node** %arrayidx681, align 8, !dbg !5694
  %exp682 = bitcast %union.tree_node* %466 to %struct.tree_exp*, !dbg !5694
  %operands683 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp682, i32 0, i32 3, !dbg !5694
  %arrayidx684 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands683, i64 0, i64 0, !dbg !5694
  %467 = load %union.tree_node*, %union.tree_node** %arrayidx684, align 8, !dbg !5694
  %common685 = bitcast %union.tree_node* %467 to %struct.tree_common*, !dbg !5694
  %type686 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common685, i32 0, i32 2, !dbg !5694
  %468 = load %union.tree_node*, %union.tree_node** %type686, align 8, !dbg !5694
  %base687 = bitcast %union.tree_node* %468 to %struct.tree_base*, !dbg !5694
  %469 = bitcast %struct.tree_base* %base687 to i64*, !dbg !5694
  %bf.load688 = load i64, i64* %469, align 8, !dbg !5694
  %bf.clear689 = and i64 %bf.load688, 65535, !dbg !5694
  %bf.cast690 = trunc i64 %bf.clear689 to i32, !dbg !5694
  %cmp691 = icmp eq i32 %bf.cast690, 10, !dbg !5694
  br i1 %cmp691, label %land.lhs.true708, label %lor.lhs.false693, !dbg !5694

lor.lhs.false693:                                 ; preds = %land.lhs.true678
  %470 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5694
  %471 = load %union.tree_node*, %union.tree_node** %470, align 8, !dbg !5694
  %exp694 = bitcast %union.tree_node* %471 to %struct.tree_exp*, !dbg !5694
  %operands695 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp694, i32 0, i32 3, !dbg !5694
  %arrayidx696 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands695, i64 0, i64 0, !dbg !5694
  %472 = load %union.tree_node*, %union.tree_node** %arrayidx696, align 8, !dbg !5694
  %exp697 = bitcast %union.tree_node* %472 to %struct.tree_exp*, !dbg !5694
  %operands698 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp697, i32 0, i32 3, !dbg !5694
  %arrayidx699 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands698, i64 0, i64 0, !dbg !5694
  %473 = load %union.tree_node*, %union.tree_node** %arrayidx699, align 8, !dbg !5694
  %common700 = bitcast %union.tree_node* %473 to %struct.tree_common*, !dbg !5694
  %type701 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common700, i32 0, i32 2, !dbg !5694
  %474 = load %union.tree_node*, %union.tree_node** %type701, align 8, !dbg !5694
  %base702 = bitcast %union.tree_node* %474 to %struct.tree_base*, !dbg !5694
  %475 = bitcast %struct.tree_base* %base702 to i64*, !dbg !5694
  %bf.load703 = load i64, i64* %475, align 8, !dbg !5694
  %bf.clear704 = and i64 %bf.load703, 65535, !dbg !5694
  %bf.cast705 = trunc i64 %bf.clear704 to i32, !dbg !5694
  %cmp706 = icmp eq i32 %bf.cast705, 12, !dbg !5694
  br i1 %cmp706, label %land.lhs.true708, label %if.end755, !dbg !5695

land.lhs.true708:                                 ; preds = %lor.lhs.false693, %land.lhs.true678
  %476 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5696
  %477 = load %union.tree_node*, %union.tree_node** %476, align 8, !dbg !5696
  %base709 = bitcast %union.tree_node* %477 to %struct.tree_base*, !dbg !5696
  %478 = bitcast %struct.tree_base* %base709 to i64*, !dbg !5696
  %bf.load710 = load i64, i64* %478, align 8, !dbg !5696
  %bf.clear711 = and i64 %bf.load710, 65535, !dbg !5696
  %bf.cast712 = trunc i64 %bf.clear711 to i32, !dbg !5696
  %idxprom713 = sext i32 %bf.cast712 to i64, !dbg !5696
  %arrayidx714 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom713, !dbg !5696
  %479 = load i32, i32* %arrayidx714, align 4, !dbg !5696
  %cmp715 = icmp uge i32 %479, 4, !dbg !5696
  br i1 %cmp715, label %land.lhs.true717, label %cond.false729, !dbg !5696

land.lhs.true717:                                 ; preds = %land.lhs.true708
  %480 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5696
  %481 = load %union.tree_node*, %union.tree_node** %480, align 8, !dbg !5696
  %base718 = bitcast %union.tree_node* %481 to %struct.tree_base*, !dbg !5696
  %482 = bitcast %struct.tree_base* %base718 to i64*, !dbg !5696
  %bf.load719 = load i64, i64* %482, align 8, !dbg !5696
  %bf.clear720 = and i64 %bf.load719, 65535, !dbg !5696
  %bf.cast721 = trunc i64 %bf.clear720 to i32, !dbg !5696
  %idxprom722 = sext i32 %bf.cast721 to i64, !dbg !5696
  %arrayidx723 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom722, !dbg !5696
  %483 = load i32, i32* %arrayidx723, align 4, !dbg !5696
  %cmp724 = icmp ule i32 %483, 10, !dbg !5696
  br i1 %cmp724, label %cond.true726, label %cond.false729, !dbg !5696

cond.true726:                                     ; preds = %land.lhs.true717
  %484 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5696
  %485 = load %union.tree_node*, %union.tree_node** %484, align 8, !dbg !5696
  %exp727 = bitcast %union.tree_node* %485 to %struct.tree_exp*, !dbg !5696
  %locus728 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp727, i32 0, i32 1, !dbg !5696
  %486 = load i32, i32* %locus728, align 8, !dbg !5696
  br label %cond.end730, !dbg !5696

cond.false729:                                    ; preds = %land.lhs.true717, %land.lhs.true708
  br label %cond.end730, !dbg !5696

cond.end730:                                      ; preds = %cond.false729, %cond.true726
  %cond731 = phi i32 [ %486, %cond.true726 ], [ 0, %cond.false729 ], !dbg !5696
  %487 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5697
  %488 = load %union.tree_node*, %union.tree_node** %487, align 8, !dbg !5697
  %exp732 = bitcast %union.tree_node* %488 to %struct.tree_exp*, !dbg !5697
  %operands733 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp732, i32 0, i32 3, !dbg !5697
  %arrayidx734 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands733, i64 0, i64 0, !dbg !5697
  %489 = load %union.tree_node*, %union.tree_node** %arrayidx734, align 8, !dbg !5697
  %exp735 = bitcast %union.tree_node* %489 to %struct.tree_exp*, !dbg !5697
  %operands736 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp735, i32 0, i32 3, !dbg !5697
  %arrayidx737 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands736, i64 0, i64 0, !dbg !5697
  %490 = load %union.tree_node*, %union.tree_node** %arrayidx737, align 8, !dbg !5697
  %491 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5698
  %492 = load %union.tree_node*, %union.tree_node** %491, align 8, !dbg !5698
  %exp738 = bitcast %union.tree_node* %492 to %struct.tree_exp*, !dbg !5698
  %operands739 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp738, i32 0, i32 3, !dbg !5698
  %arrayidx740 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands739, i64 0, i64 1, !dbg !5698
  %493 = load %union.tree_node*, %union.tree_node** %arrayidx740, align 8, !dbg !5698
  %494 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5699
  %495 = load %union.tree_node*, %union.tree_node** %494, align 8, !dbg !5699
  %exp741 = bitcast %union.tree_node* %495 to %struct.tree_exp*, !dbg !5699
  %operands742 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp741, i32 0, i32 3, !dbg !5699
  %arrayidx743 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands742, i64 0, i64 0, !dbg !5699
  %496 = load %union.tree_node*, %union.tree_node** %arrayidx743, align 8, !dbg !5699
  %exp744 = bitcast %union.tree_node* %496 to %struct.tree_exp*, !dbg !5699
  %operands745 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp744, i32 0, i32 3, !dbg !5699
  %arrayidx746 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands745, i64 0, i64 0, !dbg !5699
  %497 = load %union.tree_node*, %union.tree_node** %arrayidx746, align 8, !dbg !5699
  %common747 = bitcast %union.tree_node* %497 to %struct.tree_common*, !dbg !5699
  %type748 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common747, i32 0, i32 2, !dbg !5699
  %498 = load %union.tree_node*, %union.tree_node** %type748, align 8, !dbg !5699
  %call749 = call %union.tree_node* @maybe_fold_offset_to_address(i32 %cond731, %union.tree_node* %490, %union.tree_node* %493, %union.tree_node* %498), !dbg !5700
  store %union.tree_node* %call749, %union.tree_node** %tmp, align 8, !dbg !5701
  %tobool750 = icmp ne %union.tree_node* %call749, null, !dbg !5701
  br i1 %tobool750, label %if.then751, label %if.end755, !dbg !5702

if.then751:                                       ; preds = %cond.end730
  %499 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5703
  %500 = load %union.tree_node*, %union.tree_node** %499, align 8, !dbg !5703
  %common752 = bitcast %union.tree_node* %500 to %struct.tree_common*, !dbg !5703
  %type753 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common752, i32 0, i32 2, !dbg !5703
  %501 = load %union.tree_node*, %union.tree_node** %type753, align 8, !dbg !5703
  %502 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !5703
  %call754 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %501, %union.tree_node* %502), !dbg !5703
  %503 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5705
  store %union.tree_node* %call754, %union.tree_node** %503, align 8, !dbg !5706
  br label %sw.epilog871, !dbg !5707

if.end755:                                        ; preds = %cond.end730, %lor.lhs.false693, %land.lhs.true668, %if.end658
  br label %sw.default756, !dbg !5708

sw.default756:                                    ; preds = %if.end164, %if.end755
  %504 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5709
  %505 = load %union.tree_node*, %union.tree_node** %504, align 8, !dbg !5709
  %base757 = bitcast %union.tree_node* %505 to %struct.tree_base*, !dbg !5709
  %506 = bitcast %struct.tree_base* %base757 to i64*, !dbg !5709
  %bf.load758 = load i64, i64* %506, align 8, !dbg !5709
  %bf.clear759 = and i64 %bf.load758, 65535, !dbg !5709
  %bf.cast760 = trunc i64 %bf.clear759 to i32, !dbg !5709
  %idxprom761 = sext i32 %bf.cast760 to i64, !dbg !5709
  %arrayidx762 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom761, !dbg !5709
  %507 = load i32, i32* %arrayidx762, align 4, !dbg !5709
  switch i32 %507, label %sw.default845 [
    i32 5, label %sw.bb763
    i32 6, label %sw.bb822
    i32 7, label %sw.bb827
    i32 3, label %sw.bb844
    i32 1, label %sw.bb844
  ], !dbg !5710

sw.bb763:                                         ; preds = %sw.default756
  call void @llvm.dbg.declare(metadata %union.tree_node** %type764, metadata !5711, metadata !DIExpression()), !dbg !5714
  %508 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5715
  %509 = load %union.tree_node*, %union.tree_node** %508, align 8, !dbg !5715
  %exp765 = bitcast %union.tree_node* %509 to %struct.tree_exp*, !dbg !5715
  %operands766 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp765, i32 0, i32 3, !dbg !5715
  %arrayidx767 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands766, i64 0, i64 1, !dbg !5715
  %510 = load %union.tree_node*, %union.tree_node** %arrayidx767, align 8, !dbg !5715
  %common768 = bitcast %union.tree_node* %510 to %struct.tree_common*, !dbg !5715
  %type769 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common768, i32 0, i32 2, !dbg !5715
  %511 = load %union.tree_node*, %union.tree_node** %type769, align 8, !dbg !5715
  store %union.tree_node* %511, %union.tree_node** %type764, align 8, !dbg !5714
  %512 = load %union.tree_node*, %union.tree_node** %type764, align 8, !dbg !5716
  %base770 = bitcast %union.tree_node* %512 to %struct.tree_base*, !dbg !5716
  %513 = bitcast %struct.tree_base* %base770 to i64*, !dbg !5716
  %bf.load771 = load i64, i64* %513, align 8, !dbg !5716
  %bf.clear772 = and i64 %bf.load771, 65535, !dbg !5716
  %bf.cast773 = trunc i64 %bf.clear772 to i32, !dbg !5716
  %cmp774 = icmp eq i32 %bf.cast773, 15, !dbg !5716
  br i1 %cmp774, label %if.else798, label %lor.lhs.false776, !dbg !5716

lor.lhs.false776:                                 ; preds = %sw.bb763
  %514 = load %union.tree_node*, %union.tree_node** %type764, align 8, !dbg !5716
  %base777 = bitcast %union.tree_node* %514 to %struct.tree_base*, !dbg !5716
  %515 = bitcast %struct.tree_base* %base777 to i64*, !dbg !5716
  %bf.load778 = load i64, i64* %515, align 8, !dbg !5716
  %bf.clear779 = and i64 %bf.load778, 65535, !dbg !5716
  %bf.cast780 = trunc i64 %bf.clear779 to i32, !dbg !5716
  %cmp781 = icmp eq i32 %bf.cast780, 16, !dbg !5716
  br i1 %cmp781, label %if.else798, label %lor.lhs.false783, !dbg !5716

lor.lhs.false783:                                 ; preds = %lor.lhs.false776
  %516 = load %union.tree_node*, %union.tree_node** %type764, align 8, !dbg !5716
  %base784 = bitcast %union.tree_node* %516 to %struct.tree_base*, !dbg !5716
  %517 = bitcast %struct.tree_base* %base784 to i64*, !dbg !5716
  %bf.load785 = load i64, i64* %517, align 8, !dbg !5716
  %bf.clear786 = and i64 %bf.load785, 65535, !dbg !5716
  %bf.cast787 = trunc i64 %bf.clear786 to i32, !dbg !5716
  %cmp788 = icmp eq i32 %bf.cast787, 17, !dbg !5716
  br i1 %cmp788, label %if.else798, label %lor.lhs.false790, !dbg !5716

lor.lhs.false790:                                 ; preds = %lor.lhs.false783
  %518 = load %union.tree_node*, %union.tree_node** %type764, align 8, !dbg !5716
  %base791 = bitcast %union.tree_node* %518 to %struct.tree_base*, !dbg !5716
  %519 = bitcast %struct.tree_base* %base791 to i64*, !dbg !5716
  %bf.load792 = load i64, i64* %519, align 8, !dbg !5716
  %bf.clear793 = and i64 %bf.load792, 65535, !dbg !5716
  %bf.cast794 = trunc i64 %bf.clear793 to i32, !dbg !5716
  %cmp795 = icmp eq i32 %bf.cast794, 18, !dbg !5716
  br i1 %cmp795, label %if.else798, label %if.then797, !dbg !5718

if.then797:                                       ; preds = %lor.lhs.false790
  br label %expr_2, !dbg !5719

if.else798:                                       ; preds = %lor.lhs.false790, %lor.lhs.false783, %lor.lhs.false776, %sw.bb763
  %520 = load %union.tree_node*, %union.tree_node** %type764, align 8, !dbg !5720
  %base799 = bitcast %union.tree_node* %520 to %struct.tree_base*, !dbg !5720
  %521 = bitcast %struct.tree_base* %base799 to i64*, !dbg !5720
  %bf.load800 = load i64, i64* %521, align 8, !dbg !5720
  %bf.clear801 = and i64 %bf.load800, 65535, !dbg !5720
  %bf.cast802 = trunc i64 %bf.clear801 to i32, !dbg !5720
  %cmp803 = icmp eq i32 %bf.cast802, 14, !dbg !5720
  br i1 %cmp803, label %cond.true805, label %cond.false807, !dbg !5720

cond.true805:                                     ; preds = %if.else798
  %522 = load %union.tree_node*, %union.tree_node** %type764, align 8, !dbg !5720
  %call806 = call i32 @vector_type_mode(%union.tree_node* %522), !dbg !5720
  br label %cond.end812, !dbg !5720

cond.false807:                                    ; preds = %if.else798
  %523 = load %union.tree_node*, %union.tree_node** %type764, align 8, !dbg !5720
  %type808 = bitcast %union.tree_node* %523 to %struct.tree_type*, !dbg !5720
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type808, i32 0, i32 6, !dbg !5720
  %bf.load809 = load i32, i32* %mode, align 4, !dbg !5720
  %bf.lshr810 = lshr i32 %bf.load809, 16, !dbg !5720
  %bf.clear811 = and i32 %bf.lshr810, 255, !dbg !5720
  br label %cond.end812, !dbg !5720

cond.end812:                                      ; preds = %cond.false807, %cond.true805
  %cond813 = phi i32 [ %call806, %cond.true805 ], [ %bf.clear811, %cond.false807 ], !dbg !5720
  %cmp814 = icmp ne i32 %cond813, 1, !dbg !5722
  br i1 %cmp814, label %if.then816, label %if.else818, !dbg !5723

if.then816:                                       ; preds = %cond.end812
  %524 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5724
  %call817 = call i32 @gimplify_scalar_mode_aggregate_compare(%union.tree_node** %524), !dbg !5725
  store i32 %call817, i32* %ret, align 4, !dbg !5726
  br label %if.end820, !dbg !5727

if.else818:                                       ; preds = %cond.end812
  %525 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5728
  %call819 = call i32 @gimplify_variable_sized_compare(%union.tree_node** %525), !dbg !5729
  store i32 %call819, i32* %ret, align 4, !dbg !5730
  br label %if.end820

if.end820:                                        ; preds = %if.else818, %if.then816
  br label %if.end821

if.end821:                                        ; preds = %if.end820
  br label %sw.epilog870, !dbg !5731

sw.bb822:                                         ; preds = %sw.default756
  %526 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5732
  %527 = load %union.tree_node*, %union.tree_node** %526, align 8, !dbg !5732
  %exp823 = bitcast %union.tree_node* %527 to %struct.tree_exp*, !dbg !5732
  %operands824 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp823, i32 0, i32 3, !dbg !5732
  %arrayidx825 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands824, i64 0, i64 0, !dbg !5732
  %528 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5733
  %529 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !5734
  %call826 = call i32 @gimplify_expr(%union.tree_node** %arrayidx825, %struct.gimple_seq_d** %528, %struct.gimple_seq_d** %529, i8 (%union.tree_node*)* @is_gimple_val, i32 1), !dbg !5735
  store i32 %call826, i32* %ret, align 4, !dbg !5736
  br label %sw.epilog870, !dbg !5737

sw.bb827:                                         ; preds = %sw.default756
  br label %expr_2, !dbg !5737

expr_2:                                           ; preds = %cond.end868, %sw.bb827, %if.then797
  call void @llvm.dbg.label(metadata !5738), !dbg !5739
  call void @llvm.dbg.declare(metadata i32* %r0828, metadata !5740, metadata !DIExpression()), !dbg !5742
  call void @llvm.dbg.declare(metadata i32* %r1829, metadata !5743, metadata !DIExpression()), !dbg !5744
  %530 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5745
  %531 = load %union.tree_node*, %union.tree_node** %530, align 8, !dbg !5745
  %exp830 = bitcast %union.tree_node* %531 to %struct.tree_exp*, !dbg !5745
  %operands831 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp830, i32 0, i32 3, !dbg !5745
  %arrayidx832 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands831, i64 0, i64 0, !dbg !5745
  %532 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5746
  %533 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !5747
  %call833 = call i32 @gimplify_expr(%union.tree_node** %arrayidx832, %struct.gimple_seq_d** %532, %struct.gimple_seq_d** %533, i8 (%union.tree_node*)* @is_gimple_val, i32 1), !dbg !5748
  store i32 %call833, i32* %r0828, align 4, !dbg !5749
  %534 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5750
  %535 = load %union.tree_node*, %union.tree_node** %534, align 8, !dbg !5750
  %exp834 = bitcast %union.tree_node* %535 to %struct.tree_exp*, !dbg !5750
  %operands835 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp834, i32 0, i32 3, !dbg !5750
  %arrayidx836 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands835, i64 0, i64 1, !dbg !5750
  %536 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5751
  %537 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !5752
  %call837 = call i32 @gimplify_expr(%union.tree_node** %arrayidx836, %struct.gimple_seq_d** %536, %struct.gimple_seq_d** %537, i8 (%union.tree_node*)* @is_gimple_val, i32 1), !dbg !5753
  store i32 %call837, i32* %r1829, align 4, !dbg !5754
  %538 = load i32, i32* %r0828, align 4, !dbg !5755
  %539 = load i32, i32* %r1829, align 4, !dbg !5755
  %cmp838 = icmp slt i32 %538, %539, !dbg !5755
  br i1 %cmp838, label %cond.true840, label %cond.false841, !dbg !5755

cond.true840:                                     ; preds = %expr_2
  %540 = load i32, i32* %r0828, align 4, !dbg !5755
  br label %cond.end842, !dbg !5755

cond.false841:                                    ; preds = %expr_2
  %541 = load i32, i32* %r1829, align 4, !dbg !5755
  br label %cond.end842, !dbg !5755

cond.end842:                                      ; preds = %cond.false841, %cond.true840
  %cond843 = phi i32 [ %540, %cond.true840 ], [ %541, %cond.false841 ], !dbg !5755
  store i32 %cond843, i32* %ret, align 4, !dbg !5756
  br label %sw.epilog870, !dbg !5757

sw.bb844:                                         ; preds = %sw.default756, %sw.default756
  store i32 1, i32* %ret, align 4, !dbg !5758
  br label %dont_recalculate, !dbg !5759

sw.default845:                                    ; preds = %sw.default756
  %542 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5760
  %543 = load %union.tree_node*, %union.tree_node** %542, align 8, !dbg !5760
  %base846 = bitcast %union.tree_node* %543 to %struct.tree_base*, !dbg !5760
  %544 = bitcast %struct.tree_base* %base846 to i64*, !dbg !5760
  %bf.load847 = load i64, i64* %544, align 8, !dbg !5760
  %bf.clear848 = and i64 %bf.load847, 65535, !dbg !5760
  %bf.cast849 = trunc i64 %bf.clear848 to i32, !dbg !5760
  %cmp850 = icmp eq i32 %bf.cast849, 93, !dbg !5760
  br i1 %cmp850, label %cond.false867, label %lor.lhs.false852, !dbg !5760

lor.lhs.false852:                                 ; preds = %sw.default845
  %545 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5760
  %546 = load %union.tree_node*, %union.tree_node** %545, align 8, !dbg !5760
  %base853 = bitcast %union.tree_node* %546 to %struct.tree_base*, !dbg !5760
  %547 = bitcast %struct.tree_base* %base853 to i64*, !dbg !5760
  %bf.load854 = load i64, i64* %547, align 8, !dbg !5760
  %bf.clear855 = and i64 %bf.load854, 65535, !dbg !5760
  %bf.cast856 = trunc i64 %bf.clear855 to i32, !dbg !5760
  %cmp857 = icmp eq i32 %bf.cast856, 94, !dbg !5760
  br i1 %cmp857, label %cond.false867, label %lor.lhs.false859, !dbg !5760

lor.lhs.false859:                                 ; preds = %lor.lhs.false852
  %548 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5760
  %549 = load %union.tree_node*, %union.tree_node** %548, align 8, !dbg !5760
  %base860 = bitcast %union.tree_node* %549 to %struct.tree_base*, !dbg !5760
  %550 = bitcast %struct.tree_base* %base860 to i64*, !dbg !5760
  %bf.load861 = load i64, i64* %550, align 8, !dbg !5760
  %bf.clear862 = and i64 %bf.load861, 65535, !dbg !5760
  %bf.cast863 = trunc i64 %bf.clear862 to i32, !dbg !5760
  %cmp864 = icmp eq i32 %bf.cast863, 95, !dbg !5760
  br i1 %cmp864, label %cond.false867, label %cond.true866, !dbg !5760

cond.true866:                                     ; preds = %lor.lhs.false859
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 7106, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5760
  br label %cond.end868, !dbg !5760

cond.false867:                                    ; preds = %lor.lhs.false859, %lor.lhs.false852, %sw.default845
  br label %cond.end868, !dbg !5760

cond.end868:                                      ; preds = %cond.false867, %cond.true866
  %cond869 = phi i32 [ 0, %cond.true866 ], [ 0, %cond.false867 ], !dbg !5760
  br label %expr_2, !dbg !5761

sw.epilog870:                                     ; preds = %cond.end842, %sw.bb822, %if.end821
  %551 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5762
  %552 = load %union.tree_node*, %union.tree_node** %551, align 8, !dbg !5763
  call void @recalculate_side_effects(%union.tree_node* %552), !dbg !5764
  br label %dont_recalculate, !dbg !5764

dont_recalculate:                                 ; preds = %sw.epilog870, %sw.bb844
  call void @llvm.dbg.label(metadata !5765), !dbg !5766
  br label %sw.epilog871, !dbg !5767

sw.epilog871:                                     ; preds = %dont_recalculate, %if.then751, %if.then657, %sw.bb611, %sw.epilog, %sw.bb591, %sw.bb589, %sw.bb588, %sw.bb587, %sw.bb586, %if.end585, %sw.bb579, %cond.end572, %sw.bb562, %sw.bb558, %cond.end556, %sw.bb524, %sw.bb516, %sw.bb514, %sw.bb512, %if.end511, %if.then488, %sw.bb477, %cond.end474, %cond.end434, %sw.bb403, %if.end402, %sw.bb369, %sw.bb367, %cond.end361, %sw.bb341, %if.end336, %if.then334, %sw.bb315, %sw.bb313, %sw.bb311, %sw.bb309, %sw.bb307, %if.end306, %sw.bb300, %sw.bb295, %if.then293, %sw.bb284, %if.then282, %if.then278, %if.then270, %if.then257, %sw.bb233, %sw.bb231, %if.end227, %if.then221, %sw.bb210, %sw.bb205, %sw.bb203, %sw.bb198, %if.end196, %if.end186, %cond.end177, %sw.bb
  %553 = load i32, i32* %ret, align 4, !dbg !5768
  %cmp872 = icmp eq i32 %553, 0, !dbg !5770
  br i1 %cmp872, label %land.lhs.true874, label %if.end881, !dbg !5771

land.lhs.true874:                                 ; preds = %sw.epilog871
  %554 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5772
  %555 = load %union.tree_node*, %union.tree_node** %554, align 8, !dbg !5773
  %cmp875 = icmp eq %union.tree_node* %555, null, !dbg !5774
  br i1 %cmp875, label %if.then880, label %lor.lhs.false877, !dbg !5775

lor.lhs.false877:                                 ; preds = %land.lhs.true874
  %556 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5776
  %557 = load %union.tree_node*, %union.tree_node** %556, align 8, !dbg !5777
  %558 = load %union.tree_node*, %union.tree_node** %save_expr, align 8, !dbg !5778
  %cmp878 = icmp eq %union.tree_node* %557, %558, !dbg !5779
  br i1 %cmp878, label %if.then880, label %if.end881, !dbg !5780

if.then880:                                       ; preds = %lor.lhs.false877, %land.lhs.true874
  store i32 1, i32* %ret, align 4, !dbg !5781
  br label %if.end881, !dbg !5782

if.end881:                                        ; preds = %if.then880, %lor.lhs.false877, %sw.epilog871
  br label %do.cond, !dbg !5783

do.cond:                                          ; preds = %if.end881, %if.then157
  %559 = load i32, i32* %ret, align 4, !dbg !5784
  %cmp882 = icmp eq i32 %559, 0, !dbg !5785
  br i1 %cmp882, label %do.body, label %do.end, !dbg !5783, !llvm.loop !5786

do.end:                                           ; preds = %do.cond, %if.then162, %if.then153, %if.then145
  %560 = load i32, i32* %ret, align 4, !dbg !5788
  %cmp884 = icmp eq i32 %560, -2, !dbg !5790
  br i1 %cmp884, label %if.then886, label %if.end890, !dbg !5791

if.then886:                                       ; preds = %do.end
  %561 = load i8, i8* %is_statement, align 1, !dbg !5792
  %tobool887 = icmp ne i8 %561, 0, !dbg !5792
  br i1 %tobool887, label %if.then888, label %if.end889, !dbg !5795

if.then888:                                       ; preds = %if.then886
  %562 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5796
  store %union.tree_node* null, %union.tree_node** %562, align 8, !dbg !5797
  br label %if.end889, !dbg !5798

if.end889:                                        ; preds = %if.then888, %if.then886
  br label %out, !dbg !5799

if.end890:                                        ; preds = %do.end
  %563 = load i32, i32* %ret, align 4, !dbg !5800
  %cmp891 = icmp ne i32 %563, -1, !dbg !5800
  br i1 %cmp891, label %cond.false894, label %cond.true893, !dbg !5800

cond.true893:                                     ; preds = %if.end890
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 7133, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5800
  br label %cond.end895, !dbg !5800

cond.false894:                                    ; preds = %if.end890
  br label %cond.end895, !dbg !5800

cond.end895:                                      ; preds = %cond.false894, %cond.true893
  %cond896 = phi i32 [ 0, %cond.true893 ], [ 0, %cond.false894 ], !dbg !5800
  %564 = load i32, i32* %fallback.addr, align 4, !dbg !5801
  %cmp897 = icmp eq i32 %564, 0, !dbg !5803
  br i1 %cmp897, label %land.lhs.true899, label %if.end983, !dbg !5804

land.lhs.true899:                                 ; preds = %cond.end895
  %565 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5805
  %566 = load %union.tree_node*, %union.tree_node** %565, align 8, !dbg !5806
  %tobool900 = icmp ne %union.tree_node* %566, null, !dbg !5806
  br i1 %tobool900, label %land.lhs.true901, label %if.end983, !dbg !5807

land.lhs.true901:                                 ; preds = %land.lhs.true899
  %567 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5808
  %568 = load %union.tree_node*, %union.tree_node** %567, align 8, !dbg !5809
  %call902 = call zeroext i8 @is_gimple_stmt(%union.tree_node* %568), !dbg !5810
  %tobool903 = icmp ne i8 %call902, 0, !dbg !5810
  br i1 %tobool903, label %if.end983, label %if.then904, !dbg !5811

if.then904:                                       ; preds = %land.lhs.true901
  %569 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5812
  %570 = load %union.tree_node*, %union.tree_node** %569, align 8, !dbg !5812
  %base905 = bitcast %union.tree_node* %570 to %struct.tree_base*, !dbg !5812
  %571 = bitcast %struct.tree_base* %base905 to i64*, !dbg !5812
  %bf.load906 = load i64, i64* %571, align 8, !dbg !5812
  %bf.lshr907 = lshr i64 %bf.load906, 16, !dbg !5812
  %bf.clear908 = and i64 %bf.lshr907, 1, !dbg !5812
  %bf.cast909 = trunc i64 %bf.clear908 to i32, !dbg !5812
  %tobool910 = icmp ne i32 %bf.cast909, 0, !dbg !5812
  br i1 %tobool910, label %if.else912, label %if.then911, !dbg !5815

if.then911:                                       ; preds = %if.then904
  %572 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5816
  store %union.tree_node* null, %union.tree_node** %572, align 8, !dbg !5817
  br label %if.end982, !dbg !5818

if.else912:                                       ; preds = %if.then904
  %573 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5819
  %574 = load %union.tree_node*, %union.tree_node** %573, align 8, !dbg !5819
  %base913 = bitcast %union.tree_node* %574 to %struct.tree_base*, !dbg !5819
  %575 = bitcast %struct.tree_base* %base913 to i64*, !dbg !5819
  %bf.load914 = load i64, i64* %575, align 8, !dbg !5819
  %bf.lshr915 = lshr i64 %bf.load914, 19, !dbg !5819
  %bf.clear916 = and i64 %bf.lshr915, 1, !dbg !5819
  %bf.cast917 = trunc i64 %bf.clear916 to i32, !dbg !5819
  %tobool918 = icmp ne i32 %bf.cast917, 0, !dbg !5819
  br i1 %tobool918, label %if.else940, label %if.then919, !dbg !5821

if.then919:                                       ; preds = %if.else912
  call void @llvm.dbg.declare(metadata i32* %code, metadata !5822, metadata !DIExpression()), !dbg !5824
  %576 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5825
  %577 = load %union.tree_node*, %union.tree_node** %576, align 8, !dbg !5825
  %base920 = bitcast %union.tree_node* %577 to %struct.tree_base*, !dbg !5825
  %578 = bitcast %struct.tree_base* %base920 to i64*, !dbg !5825
  %bf.load921 = load i64, i64* %578, align 8, !dbg !5825
  %bf.clear922 = and i64 %bf.load921, 65535, !dbg !5825
  %bf.cast923 = trunc i64 %bf.clear922 to i32, !dbg !5825
  store i32 %bf.cast923, i32* %code, align 4, !dbg !5824
  %579 = load i32, i32* %code, align 4, !dbg !5826
  switch i32 %579, label %sw.default938 [
    i32 41, label %sw.bb924
    i32 43, label %sw.bb924
    i32 44, label %sw.bb924
    i32 118, label %sw.bb924
    i32 45, label %sw.bb929
    i32 46, label %sw.bb929
  ], !dbg !5827

sw.bb924:                                         ; preds = %if.then919, %if.then919, %if.then919, %if.then919
  %580 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5828
  %581 = load %union.tree_node*, %union.tree_node** %580, align 8, !dbg !5828
  %exp925 = bitcast %union.tree_node* %581 to %struct.tree_exp*, !dbg !5828
  %operands926 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp925, i32 0, i32 3, !dbg !5828
  %arrayidx927 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands926, i64 0, i64 0, !dbg !5828
  %582 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5830
  %583 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !5831
  %584 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** %gimple_test_f.addr, align 8, !dbg !5832
  %585 = load i32, i32* %fallback.addr, align 4, !dbg !5833
  %call928 = call i32 @gimplify_expr(%union.tree_node** %arrayidx927, %struct.gimple_seq_d** %582, %struct.gimple_seq_d** %583, i8 (%union.tree_node*)* %584, i32 %585), !dbg !5834
  br label %sw.epilog939, !dbg !5835

sw.bb929:                                         ; preds = %if.then919, %if.then919
  %586 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5836
  %587 = load %union.tree_node*, %union.tree_node** %586, align 8, !dbg !5836
  %exp930 = bitcast %union.tree_node* %587 to %struct.tree_exp*, !dbg !5836
  %operands931 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp930, i32 0, i32 3, !dbg !5836
  %arrayidx932 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands931, i64 0, i64 0, !dbg !5836
  %588 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5837
  %589 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !5838
  %590 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** %gimple_test_f.addr, align 8, !dbg !5839
  %591 = load i32, i32* %fallback.addr, align 4, !dbg !5840
  %call933 = call i32 @gimplify_expr(%union.tree_node** %arrayidx932, %struct.gimple_seq_d** %588, %struct.gimple_seq_d** %589, i8 (%union.tree_node*)* %590, i32 %591), !dbg !5841
  %592 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5842
  %593 = load %union.tree_node*, %union.tree_node** %592, align 8, !dbg !5842
  %exp934 = bitcast %union.tree_node* %593 to %struct.tree_exp*, !dbg !5842
  %operands935 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp934, i32 0, i32 3, !dbg !5842
  %arrayidx936 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands935, i64 0, i64 1, !dbg !5842
  %594 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5843
  %595 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !5844
  %596 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** %gimple_test_f.addr, align 8, !dbg !5845
  %597 = load i32, i32* %fallback.addr, align 4, !dbg !5846
  %call937 = call i32 @gimplify_expr(%union.tree_node** %arrayidx936, %struct.gimple_seq_d** %594, %struct.gimple_seq_d** %595, i8 (%union.tree_node*)* %596, i32 %597), !dbg !5847
  br label %sw.epilog939, !dbg !5848

sw.default938:                                    ; preds = %if.then919
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 7168, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5849
  br label %sw.epilog939, !dbg !5850

sw.epilog939:                                     ; preds = %sw.default938, %sw.bb929, %sw.bb924
  %598 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5851
  store %union.tree_node* null, %union.tree_node** %598, align 8, !dbg !5852
  br label %if.end981, !dbg !5853

if.else940:                                       ; preds = %if.else912
  %599 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5854
  %600 = load %union.tree_node*, %union.tree_node** %599, align 8, !dbg !5854
  %common941 = bitcast %union.tree_node* %600 to %struct.tree_common*, !dbg !5854
  %type942 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common941, i32 0, i32 2, !dbg !5854
  %601 = load %union.tree_node*, %union.tree_node** %type942, align 8, !dbg !5854
  %type943 = bitcast %union.tree_node* %601 to %struct.tree_type*, !dbg !5854
  %size = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type943, i32 0, i32 2, !dbg !5854
  %602 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !5854
  %cmp944 = icmp ne %union.tree_node* %602, null, !dbg !5854
  br i1 %cmp944, label %land.lhs.true946, label %if.else979, !dbg !5856

land.lhs.true946:                                 ; preds = %if.else940
  %603 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5857
  %604 = load %union.tree_node*, %union.tree_node** %603, align 8, !dbg !5857
  %common947 = bitcast %union.tree_node* %604 to %struct.tree_common*, !dbg !5857
  %type948 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common947, i32 0, i32 2, !dbg !5857
  %605 = load %union.tree_node*, %union.tree_node** %type948, align 8, !dbg !5857
  %base949 = bitcast %union.tree_node* %605 to %struct.tree_base*, !dbg !5857
  %606 = bitcast %struct.tree_base* %base949 to i64*, !dbg !5857
  %bf.load950 = load i64, i64* %606, align 8, !dbg !5857
  %bf.clear951 = and i64 %bf.load950, 65535, !dbg !5857
  %bf.cast952 = trunc i64 %bf.clear951 to i32, !dbg !5857
  %cmp953 = icmp eq i32 %bf.cast952, 14, !dbg !5857
  br i1 %cmp953, label %cond.true955, label %cond.false959, !dbg !5857

cond.true955:                                     ; preds = %land.lhs.true946
  %607 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5857
  %608 = load %union.tree_node*, %union.tree_node** %607, align 8, !dbg !5857
  %common956 = bitcast %union.tree_node* %608 to %struct.tree_common*, !dbg !5857
  %type957 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common956, i32 0, i32 2, !dbg !5857
  %609 = load %union.tree_node*, %union.tree_node** %type957, align 8, !dbg !5857
  %call958 = call i32 @vector_type_mode(%union.tree_node* %609), !dbg !5857
  br label %cond.end967, !dbg !5857

cond.false959:                                    ; preds = %land.lhs.true946
  %610 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5857
  %611 = load %union.tree_node*, %union.tree_node** %610, align 8, !dbg !5857
  %common960 = bitcast %union.tree_node* %611 to %struct.tree_common*, !dbg !5857
  %type961 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common960, i32 0, i32 2, !dbg !5857
  %612 = load %union.tree_node*, %union.tree_node** %type961, align 8, !dbg !5857
  %type962 = bitcast %union.tree_node* %612 to %struct.tree_type*, !dbg !5857
  %mode963 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type962, i32 0, i32 6, !dbg !5857
  %bf.load964 = load i32, i32* %mode963, align 4, !dbg !5857
  %bf.lshr965 = lshr i32 %bf.load964, 16, !dbg !5857
  %bf.clear966 = and i32 %bf.lshr965, 255, !dbg !5857
  br label %cond.end967, !dbg !5857

cond.end967:                                      ; preds = %cond.false959, %cond.true955
  %cond968 = phi i32 [ %call958, %cond.true955 ], [ %bf.clear966, %cond.false959 ], !dbg !5857
  %cmp969 = icmp ne i32 %cond968, 1, !dbg !5858
  br i1 %cmp969, label %if.then971, label %if.else979, !dbg !5859

if.then971:                                       ; preds = %cond.end967
  call void @llvm.dbg.declare(metadata %union.tree_node** %type972, metadata !5860, metadata !DIExpression()), !dbg !5862
  %613 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5863
  %614 = load %union.tree_node*, %union.tree_node** %613, align 8, !dbg !5863
  %common973 = bitcast %union.tree_node* %614 to %struct.tree_common*, !dbg !5863
  %type974 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common973, i32 0, i32 2, !dbg !5863
  %615 = load %union.tree_node*, %union.tree_node** %type974, align 8, !dbg !5863
  %type975 = bitcast %union.tree_node* %615 to %struct.tree_type*, !dbg !5863
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type975, i32 0, i32 16, !dbg !5863
  %616 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !5863
  store %union.tree_node* %616, %union.tree_node** %type972, align 8, !dbg !5862
  call void @llvm.dbg.declare(metadata %union.tree_node** %tmp976, metadata !5864, metadata !DIExpression()), !dbg !5865
  %617 = load %union.tree_node*, %union.tree_node** %type972, align 8, !dbg !5866
  %call977 = call %union.tree_node* @create_tmp_var_raw(%union.tree_node* %617, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0)), !dbg !5867
  store %union.tree_node* %call977, %union.tree_node** %tmp976, align 8, !dbg !5865
  %618 = load %union.tree_node*, %union.tree_node** %tmp976, align 8, !dbg !5868
  call void @gimple_add_tmp_var(%union.tree_node* %618), !dbg !5869
  %619 = load %union.tree_node*, %union.tree_node** %tmp976, align 8, !dbg !5870
  %620 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5871
  %621 = load %union.tree_node*, %union.tree_node** %620, align 8, !dbg !5872
  %622 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5873
  %call978 = call %union.gimple_statement_d* @gimplify_assign(%union.tree_node* %619, %union.tree_node* %621, %struct.gimple_seq_d** %622), !dbg !5874
  %623 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5875
  store %union.tree_node* null, %union.tree_node** %623, align 8, !dbg !5876
  br label %if.end980, !dbg !5877

if.else979:                                       ; preds = %cond.end967, %if.else940
  %624 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5878
  store %union.tree_node* null, %union.tree_node** %624, align 8, !dbg !5879
  br label %if.end980

if.end980:                                        ; preds = %if.else979, %if.then971
  br label %if.end981

if.end981:                                        ; preds = %if.end980, %sw.epilog939
  br label %if.end982

if.end982:                                        ; preds = %if.end981, %if.then911
  br label %if.end983, !dbg !5880

if.end983:                                        ; preds = %if.end982, %land.lhs.true901, %land.lhs.true899, %cond.end895
  %625 = load i32, i32* %fallback.addr, align 4, !dbg !5881
  %cmp984 = icmp eq i32 %625, 0, !dbg !5883
  br i1 %cmp984, label %if.then989, label %lor.lhs.false986, !dbg !5884

lor.lhs.false986:                                 ; preds = %if.end983
  %626 = load i8, i8* %is_statement, align 1, !dbg !5885
  %conv987 = zext i8 %626 to i32, !dbg !5885
  %tobool988 = icmp ne i32 %conv987, 0, !dbg !5885
  br i1 %tobool988, label %if.then989, label %if.end1005, !dbg !5886

if.then989:                                       ; preds = %lor.lhs.false986, %if.end983
  %627 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5887
  store %union.tree_node* null, %union.tree_node** %627, align 8, !dbg !5889
  %628 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %internal_pre, align 8, !dbg !5890
  %call990 = call zeroext i8 @gimple_seq_empty_p(%struct.gimple_seq_d* %628), !dbg !5892
  %tobool991 = icmp ne i8 %call990, 0, !dbg !5892
  br i1 %tobool991, label %lor.lhs.false992, label %if.then995, !dbg !5893

lor.lhs.false992:                                 ; preds = %if.then989
  %629 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %internal_post, align 8, !dbg !5894
  %call993 = call zeroext i8 @gimple_seq_empty_p(%struct.gimple_seq_d* %629), !dbg !5895
  %tobool994 = icmp ne i8 %call993, 0, !dbg !5895
  br i1 %tobool994, label %if.end996, label %if.then995, !dbg !5896

if.then995:                                       ; preds = %lor.lhs.false992, %if.then989
  %630 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %internal_post, align 8, !dbg !5897
  call void @gimplify_seq_add_seq(%struct.gimple_seq_d** %internal_pre, %struct.gimple_seq_d* %630), !dbg !5899
  %631 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5900
  %632 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %internal_pre, align 8, !dbg !5901
  call void @gimplify_seq_add_seq(%struct.gimple_seq_d** %631, %struct.gimple_seq_d* %632), !dbg !5902
  br label %if.end996, !dbg !5903

if.end996:                                        ; preds = %if.then995, %lor.lhs.false992
  %633 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5904
  %634 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %633, align 8, !dbg !5906
  %call997 = call zeroext i8 @gimple_seq_empty_p(%struct.gimple_seq_d* %634), !dbg !5907
  %tobool998 = icmp ne i8 %call997, 0, !dbg !5907
  br i1 %tobool998, label %if.end1000, label %if.then999, !dbg !5908

if.then999:                                       ; preds = %if.end996
  %635 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5909
  %636 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %635, align 8, !dbg !5910
  %637 = load i32, i32* @input_location, align 4, !dbg !5911
  call void @annotate_all_with_location_after(%struct.gimple_seq_d* %636, %struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %pre_last_gsi, i32 %637), !dbg !5912
  br label %if.end1000, !dbg !5912

if.end1000:                                       ; preds = %if.then999, %if.end996
  %638 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !5913
  %639 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %638, align 8, !dbg !5915
  %call1001 = call zeroext i8 @gimple_seq_empty_p(%struct.gimple_seq_d* %639), !dbg !5916
  %tobool1002 = icmp ne i8 %call1001, 0, !dbg !5916
  br i1 %tobool1002, label %if.end1004, label %if.then1003, !dbg !5917

if.then1003:                                      ; preds = %if.end1000
  %640 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !5918
  %641 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %640, align 8, !dbg !5919
  %642 = load i32, i32* @input_location, align 4, !dbg !5920
  call void @annotate_all_with_location_after(%struct.gimple_seq_d* %641, %struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %post_last_gsi, i32 %642), !dbg !5921
  br label %if.end1004, !dbg !5921

if.end1004:                                       ; preds = %if.then1003, %if.end1000
  br label %out, !dbg !5922

if.end1005:                                       ; preds = %lor.lhs.false986
  %643 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %internal_post, align 8, !dbg !5923
  %call1006 = call zeroext i8 @gimple_seq_empty_p(%struct.gimple_seq_d* %643), !dbg !5925
  %conv1007 = zext i8 %call1006 to i32, !dbg !5925
  %tobool1008 = icmp ne i32 %conv1007, 0, !dbg !5925
  br i1 %tobool1008, label %land.lhs.true1009, label %if.end1014, !dbg !5926

land.lhs.true1009:                                ; preds = %if.end1005
  %644 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** %gimple_test_f.addr, align 8, !dbg !5927
  %645 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5928
  %646 = load %union.tree_node*, %union.tree_node** %645, align 8, !dbg !5929
  %call1010 = call zeroext i8 %644(%union.tree_node* %646), !dbg !5930
  %conv1011 = zext i8 %call1010 to i32, !dbg !5930
  %tobool1012 = icmp ne i32 %conv1011, 0, !dbg !5930
  br i1 %tobool1012, label %if.then1013, label %if.end1014, !dbg !5931

if.then1013:                                      ; preds = %land.lhs.true1009
  br label %out, !dbg !5932

if.end1014:                                       ; preds = %land.lhs.true1009, %if.end1005
  %647 = load i32, i32* %fallback.addr, align 4, !dbg !5933
  %and1015 = and i32 %647, 2, !dbg !5935
  %tobool1016 = icmp ne i32 %and1015, 0, !dbg !5935
  br i1 %tobool1016, label %land.lhs.true1017, label %if.else1033, !dbg !5936

land.lhs.true1017:                                ; preds = %if.end1014
  %648 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %internal_post, align 8, !dbg !5937
  %call1018 = call zeroext i8 @gimple_seq_empty_p(%struct.gimple_seq_d* %648), !dbg !5938
  %conv1019 = zext i8 %call1018 to i32, !dbg !5938
  %tobool1020 = icmp ne i32 %conv1019, 0, !dbg !5938
  br i1 %tobool1020, label %land.lhs.true1021, label %if.else1033, !dbg !5939

land.lhs.true1021:                                ; preds = %land.lhs.true1017
  %649 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5940
  %650 = load %union.tree_node*, %union.tree_node** %649, align 8, !dbg !5941
  %call1022 = call zeroext i8 @is_gimple_addressable(%union.tree_node* %650), !dbg !5942
  %conv1023 = zext i8 %call1022 to i32, !dbg !5942
  %tobool1024 = icmp ne i32 %conv1023, 0, !dbg !5942
  br i1 %tobool1024, label %if.then1025, label %if.else1033, !dbg !5943

if.then1025:                                      ; preds = %land.lhs.true1021
  %651 = load i32, i32* @input_location, align 4, !dbg !5944
  %652 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5946
  %653 = load %union.tree_node*, %union.tree_node** %652, align 8, !dbg !5947
  %call1026 = call %union.tree_node* @build_fold_addr_expr_loc(i32 %651, %union.tree_node* %653), !dbg !5948
  store %union.tree_node* %call1026, %union.tree_node** %tmp, align 8, !dbg !5949
  %654 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5950
  %655 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !5951
  %call1027 = call i32 @gimplify_expr(%union.tree_node** %tmp, %struct.gimple_seq_d** %654, %struct.gimple_seq_d** %655, i8 (%union.tree_node*)* @is_gimple_reg, i32 1), !dbg !5952
  %656 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !5953
  %common1028 = bitcast %union.tree_node* %656 to %struct.tree_common*, !dbg !5953
  %type1029 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1028, i32 0, i32 2, !dbg !5953
  %657 = load %union.tree_node*, %union.tree_node** %type1029, align 8, !dbg !5953
  %common1030 = bitcast %union.tree_node* %657 to %struct.tree_common*, !dbg !5953
  %type1031 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1030, i32 0, i32 2, !dbg !5953
  %658 = load %union.tree_node*, %union.tree_node** %type1031, align 8, !dbg !5953
  %659 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !5953
  %call1032 = call %union.tree_node* @build1_stat(i32 47, %union.tree_node* %658, %union.tree_node* %659), !dbg !5953
  %660 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5954
  store %union.tree_node* %call1032, %union.tree_node** %660, align 8, !dbg !5955
  br label %if.end1094, !dbg !5956

if.else1033:                                      ; preds = %land.lhs.true1021, %land.lhs.true1017, %if.end1014
  %661 = load i32, i32* %fallback.addr, align 4, !dbg !5957
  %and1034 = and i32 %661, 1, !dbg !5959
  %tobool1035 = icmp ne i32 %and1034, 0, !dbg !5959
  br i1 %tobool1035, label %land.lhs.true1036, label %if.else1086, !dbg !5960

land.lhs.true1036:                                ; preds = %if.else1033
  %662 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5961
  %663 = load %union.tree_node*, %union.tree_node** %662, align 8, !dbg !5962
  %call1037 = call zeroext i8 @is_gimple_reg_rhs_or_call(%union.tree_node* %663), !dbg !5963
  %conv1038 = zext i8 %call1037 to i32, !dbg !5963
  %tobool1039 = icmp ne i32 %conv1038, 0, !dbg !5963
  br i1 %tobool1039, label %if.then1040, label %if.else1086, !dbg !5964

if.then1040:                                      ; preds = %land.lhs.true1036
  %664 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5965
  %665 = load %union.tree_node*, %union.tree_node** %664, align 8, !dbg !5965
  %common1041 = bitcast %union.tree_node* %665 to %struct.tree_common*, !dbg !5965
  %type1042 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1041, i32 0, i32 2, !dbg !5965
  %666 = load %union.tree_node*, %union.tree_node** %type1042, align 8, !dbg !5965
  %base1043 = bitcast %union.tree_node* %666 to %struct.tree_base*, !dbg !5965
  %667 = bitcast %struct.tree_base* %base1043 to i64*, !dbg !5965
  %bf.load1044 = load i64, i64* %667, align 8, !dbg !5965
  %bf.clear1045 = and i64 %bf.load1044, 65535, !dbg !5965
  %bf.cast1046 = trunc i64 %bf.clear1045 to i32, !dbg !5965
  %cmp1047 = icmp eq i32 %bf.cast1046, 19, !dbg !5965
  br i1 %cmp1047, label %cond.true1049, label %cond.false1050, !dbg !5965

cond.true1049:                                    ; preds = %if.then1040
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 7289, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5965
  br label %cond.end1051, !dbg !5965

cond.false1050:                                   ; preds = %if.then1040
  br label %cond.end1051, !dbg !5965

cond.end1051:                                     ; preds = %cond.false1050, %cond.true1049
  %cond1052 = phi i32 [ 0, %cond.true1049 ], [ 0, %cond.false1050 ], !dbg !5965
  %668 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %internal_post, align 8, !dbg !5967
  %call1053 = call zeroext i8 @gimple_seq_empty_p(%struct.gimple_seq_d* %668), !dbg !5969
  %tobool1054 = icmp ne i8 %call1053, 0, !dbg !5969
  br i1 %tobool1054, label %lor.lhs.false1055, label %if.then1058, !dbg !5970

lor.lhs.false1055:                                ; preds = %cond.end1051
  %669 = load i32, i32* %fallback.addr, align 4, !dbg !5971
  %and1056 = and i32 %669, 2, !dbg !5972
  %tobool1057 = icmp ne i32 %and1056, 0, !dbg !5972
  br i1 %tobool1057, label %if.then1058, label %if.else1083, !dbg !5973

if.then1058:                                      ; preds = %lor.lhs.false1055, %cond.end1051
  %670 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5974
  %671 = load %union.tree_node*, %union.tree_node** %670, align 8, !dbg !5976
  %672 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5977
  %673 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !5978
  %call1059 = call %union.tree_node* @get_initialized_tmp_var(%union.tree_node* %671, %struct.gimple_seq_d** %672, %struct.gimple_seq_d** %673), !dbg !5979
  %674 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5980
  store %union.tree_node* %call1059, %union.tree_node** %674, align 8, !dbg !5981
  %675 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5982
  %676 = load %union.tree_node*, %union.tree_node** %675, align 8, !dbg !5982
  %common1060 = bitcast %union.tree_node* %676 to %struct.tree_common*, !dbg !5982
  %type1061 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1060, i32 0, i32 2, !dbg !5982
  %677 = load %union.tree_node*, %union.tree_node** %type1061, align 8, !dbg !5982
  %base1062 = bitcast %union.tree_node* %677 to %struct.tree_base*, !dbg !5982
  %678 = bitcast %struct.tree_base* %base1062 to i64*, !dbg !5982
  %bf.load1063 = load i64, i64* %678, align 8, !dbg !5982
  %bf.clear1064 = and i64 %bf.load1063, 65535, !dbg !5982
  %bf.cast1065 = trunc i64 %bf.clear1064 to i32, !dbg !5982
  %cmp1066 = icmp eq i32 %bf.cast1065, 13, !dbg !5984
  br i1 %cmp1066, label %if.then1077, label %lor.lhs.false1068, !dbg !5985

lor.lhs.false1068:                                ; preds = %if.then1058
  %679 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5986
  %680 = load %union.tree_node*, %union.tree_node** %679, align 8, !dbg !5986
  %common1069 = bitcast %union.tree_node* %680 to %struct.tree_common*, !dbg !5986
  %type1070 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1069, i32 0, i32 2, !dbg !5986
  %681 = load %union.tree_node*, %union.tree_node** %type1070, align 8, !dbg !5986
  %base1071 = bitcast %union.tree_node* %681 to %struct.tree_base*, !dbg !5986
  %682 = bitcast %struct.tree_base* %base1071 to i64*, !dbg !5986
  %bf.load1072 = load i64, i64* %682, align 8, !dbg !5986
  %bf.clear1073 = and i64 %bf.load1072, 65535, !dbg !5986
  %bf.cast1074 = trunc i64 %bf.clear1073 to i32, !dbg !5986
  %cmp1075 = icmp eq i32 %bf.cast1074, 14, !dbg !5987
  br i1 %cmp1075, label %if.then1077, label %if.end1082, !dbg !5988

if.then1077:                                      ; preds = %lor.lhs.false1068, %if.then1058
  %683 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5989
  %684 = load %union.tree_node*, %union.tree_node** %683, align 8, !dbg !5989
  %decl_common1078 = bitcast %union.tree_node* %684 to %struct.tree_decl_common*, !dbg !5989
  %gimple_reg_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common1078, i32 0, i32 2, !dbg !5989
  %685 = bitcast i40* %gimple_reg_flag to i64*, !dbg !5989
  %bf.load1079 = load i64, i64* %685, align 8, !dbg !5990
  %bf.clear1080 = and i64 %bf.load1079, -134217729, !dbg !5990
  %bf.set1081 = or i64 %bf.clear1080, 134217728, !dbg !5990
  store i64 %bf.set1081, i64* %685, align 8, !dbg !5990
  br label %if.end1082, !dbg !5989

if.end1082:                                       ; preds = %if.then1077, %lor.lhs.false1068
  br label %if.end1085, !dbg !5991

if.else1083:                                      ; preds = %lor.lhs.false1055
  %686 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5992
  %687 = load %union.tree_node*, %union.tree_node** %686, align 8, !dbg !5993
  %688 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !5994
  %call1084 = call %union.tree_node* @get_formal_tmp_var(%union.tree_node* %687, %struct.gimple_seq_d** %688), !dbg !5995
  %689 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !5996
  store %union.tree_node* %call1084, %union.tree_node** %689, align 8, !dbg !5997
  br label %if.end1085

if.end1085:                                       ; preds = %if.else1083, %if.end1082
  br label %if.end1093, !dbg !5998

if.else1086:                                      ; preds = %land.lhs.true1036, %if.else1033
  %690 = load i32, i32* %fallback.addr, align 4, !dbg !5999
  %and1087 = and i32 %690, 4, !dbg !5999
  %tobool1088 = icmp ne i32 %and1087, 0, !dbg !5999
  br i1 %tobool1088, label %cond.false1090, label %cond.true1089, !dbg !5999

cond.true1089:                                    ; preds = %if.else1086
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 7315, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5999
  br label %cond.end1091, !dbg !5999

cond.false1090:                                   ; preds = %if.else1086
  br label %cond.end1091, !dbg !5999

cond.end1091:                                     ; preds = %cond.false1090, %cond.true1089
  %cond1092 = phi i32 [ 0, %cond.true1089 ], [ 0, %cond.false1090 ], !dbg !5999
  store i32 -2, i32* %ret, align 4, !dbg !6001
  br label %out, !dbg !6002

if.end1093:                                       ; preds = %if.end1085
  br label %if.end1094

if.end1094:                                       ; preds = %if.end1093, %if.then1025
  %691 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** %gimple_test_f.addr, align 8, !dbg !6003
  %692 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !6003
  %693 = load %union.tree_node*, %union.tree_node** %692, align 8, !dbg !6003
  %call1095 = call zeroext i8 %691(%union.tree_node* %693), !dbg !6003
  %tobool1096 = icmp ne i8 %call1095, 0, !dbg !6003
  br i1 %tobool1096, label %cond.false1098, label %cond.true1097, !dbg !6003

cond.true1097:                                    ; preds = %if.end1094
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 7325, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6003
  br label %cond.end1099, !dbg !6003

cond.false1098:                                   ; preds = %if.end1094
  br label %cond.end1099, !dbg !6003

cond.end1099:                                     ; preds = %cond.false1098, %cond.true1097
  %cond1100 = phi i32 [ 0, %cond.true1097 ], [ 0, %cond.false1098 ], !dbg !6003
  %694 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %internal_post, align 8, !dbg !6004
  %call1101 = call zeroext i8 @gimple_seq_empty_p(%struct.gimple_seq_d* %694), !dbg !6006
  %tobool1102 = icmp ne i8 %call1101, 0, !dbg !6006
  br i1 %tobool1102, label %if.end1104, label %if.then1103, !dbg !6007

if.then1103:                                      ; preds = %cond.end1099
  %695 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %internal_post, align 8, !dbg !6008
  %696 = load i32, i32* @input_location, align 4, !dbg !6010
  call void @annotate_all_with_location(%struct.gimple_seq_d* %695, i32 %696), !dbg !6011
  %697 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !6012
  %698 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %internal_post, align 8, !dbg !6013
  call void @gimplify_seq_add_seq(%struct.gimple_seq_d** %697, %struct.gimple_seq_d* %698), !dbg !6014
  br label %if.end1104, !dbg !6015

if.end1104:                                       ; preds = %if.then1103, %cond.end1099
  br label %out, !dbg !6016

out:                                              ; preds = %if.end1104, %cond.end1091, %if.then1013, %if.end1004, %if.end889
  call void @llvm.dbg.label(metadata !6017), !dbg !6018
  %699 = load i32, i32* %saved_location, align 4, !dbg !6019
  store i32 %699, i32* @input_location, align 4, !dbg !6020
  %700 = load i32, i32* %ret, align 4, !dbg !6021
  store i32 %700, i32* %retval, align 4, !dbg !6022
  br label %return, !dbg !6022

return:                                           ; preds = %out, %if.then
  %701 = load i32, i32* %retval, align 4, !dbg !6023
  ret i32 %701, !dbg !6023
}

declare dso_local zeroext i8 @is_gimple_stmt(%union.tree_node*) #3

; Function Attrs: noinline nounwind uwtable
define dso_local void @omp_firstprivatize_variable(%struct.gimplify_omp_ctx* %ctx, %union.tree_node* %decl) #0 !dbg !6024 {
entry:
  %ctx.addr = alloca %struct.gimplify_omp_ctx*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  %n = alloca %struct.splay_tree_node_s*, align 8
  store %struct.gimplify_omp_ctx* %ctx, %struct.gimplify_omp_ctx** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimplify_omp_ctx** %ctx.addr, metadata !6027, metadata !DIExpression()), !dbg !6028
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !6029, metadata !DIExpression()), !dbg !6030
  call void @llvm.dbg.declare(metadata %struct.splay_tree_node_s** %n, metadata !6031, metadata !DIExpression()), !dbg !6032
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6033
  %cmp = icmp eq %union.tree_node* %0, null, !dbg !6035
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !6036

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6037
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !6037
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !6037
  %bf.load = load i64, i64* %2, align 8, !dbg !6037
  %bf.clear = and i64 %bf.load, 65535, !dbg !6037
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6037
  %idxprom = sext i32 %bf.cast to i64, !dbg !6037
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !6037
  %3 = load i32, i32* %arrayidx, align 4, !dbg !6037
  %cmp1 = icmp eq i32 %3, 3, !dbg !6037
  br i1 %cmp1, label %if.end, label %if.then, !dbg !6038

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %do.end, !dbg !6039

if.end:                                           ; preds = %lor.lhs.false
  br label %do.body, !dbg !6040

do.body:                                          ; preds = %do.cond, %if.end
  %4 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx.addr, align 8, !dbg !6041
  %variables = getelementptr inbounds %struct.gimplify_omp_ctx, %struct.gimplify_omp_ctx* %4, i32 0, i32 1, !dbg !6043
  %5 = load %struct.splay_tree_s*, %struct.splay_tree_s** %variables, align 8, !dbg !6043
  %6 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6044
  %7 = ptrtoint %union.tree_node* %6 to i64, !dbg !6045
  %call = call %struct.splay_tree_node_s* @splay_tree_lookup(%struct.splay_tree_s* %5, i64 %7), !dbg !6046
  store %struct.splay_tree_node_s* %call, %struct.splay_tree_node_s** %n, align 8, !dbg !6047
  %8 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %n, align 8, !dbg !6048
  %cmp2 = icmp ne %struct.splay_tree_node_s* %8, null, !dbg !6050
  br i1 %cmp2, label %if.then3, label %if.else9, !dbg !6051

if.then3:                                         ; preds = %do.body
  %9 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %n, align 8, !dbg !6052
  %value = getelementptr inbounds %struct.splay_tree_node_s, %struct.splay_tree_node_s* %9, i32 0, i32 1, !dbg !6055
  %10 = load i64, i64* %value, align 8, !dbg !6055
  %and = and i64 %10, 4, !dbg !6056
  %tobool = icmp ne i64 %and, 0, !dbg !6056
  br i1 %tobool, label %if.then4, label %if.else, !dbg !6057

if.then4:                                         ; preds = %if.then3
  %11 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %n, align 8, !dbg !6058
  %value5 = getelementptr inbounds %struct.splay_tree_node_s, %struct.splay_tree_node_s* %11, i32 0, i32 1, !dbg !6059
  %12 = load i64, i64* %value5, align 8, !dbg !6059
  %and6 = and i64 %12, 1, !dbg !6060
  %or = or i64 16, %and6, !dbg !6061
  %13 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %n, align 8, !dbg !6062
  %value7 = getelementptr inbounds %struct.splay_tree_node_s, %struct.splay_tree_node_s* %13, i32 0, i32 1, !dbg !6063
  store i64 %or, i64* %value7, align 8, !dbg !6064
  br label %if.end8, !dbg !6062

if.else:                                          ; preds = %if.then3
  br label %do.end, !dbg !6065

if.end8:                                          ; preds = %if.then4
  br label %if.end13, !dbg !6066

if.else9:                                         ; preds = %do.body
  %14 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx.addr, align 8, !dbg !6067
  %region_type = getelementptr inbounds %struct.gimplify_omp_ctx, %struct.gimplify_omp_ctx* %14, i32 0, i32 5, !dbg !6069
  %15 = load i32, i32* %region_type, align 8, !dbg !6069
  %cmp10 = icmp ne i32 %15, 0, !dbg !6070
  br i1 %cmp10, label %if.then11, label %if.end12, !dbg !6071

if.then11:                                        ; preds = %if.else9
  %16 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx.addr, align 8, !dbg !6072
  %17 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6073
  call void @omp_add_variable(%struct.gimplify_omp_ctx* %16, %union.tree_node* %17, i32 16), !dbg !6074
  br label %if.end12, !dbg !6074

if.end12:                                         ; preds = %if.then11, %if.else9
  br label %if.end13

if.end13:                                         ; preds = %if.end12, %if.end8
  %18 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx.addr, align 8, !dbg !6075
  %outer_context = getelementptr inbounds %struct.gimplify_omp_ctx, %struct.gimplify_omp_ctx* %18, i32 0, i32 0, !dbg !6076
  %19 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %outer_context, align 8, !dbg !6076
  store %struct.gimplify_omp_ctx* %19, %struct.gimplify_omp_ctx** %ctx.addr, align 8, !dbg !6077
  br label %do.cond, !dbg !6078

do.cond:                                          ; preds = %if.end13
  %20 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx.addr, align 8, !dbg !6079
  %tobool14 = icmp ne %struct.gimplify_omp_ctx* %20, null, !dbg !6078
  br i1 %tobool14, label %do.body, label %do.end, !dbg !6078, !llvm.loop !6080

do.end:                                           ; preds = %if.then, %if.else, %do.cond
  ret void, !dbg !6082
}

declare dso_local %struct.splay_tree_node_s* @splay_tree_lookup(%struct.splay_tree_s*, i64) #3

declare dso_local zeroext i8 @is_gimple_val(%union.tree_node*) #3

declare dso_local zeroext i8 @is_gimple_call_addr(%union.tree_node*) #3

declare dso_local zeroext i8 @is_gimple_condexpr(%union.tree_node*) #3

declare dso_local zeroext i8 @is_gimple_mem_rhs(%union.tree_node*) #3

declare dso_local zeroext i8 @is_gimple_reg_rhs(%union.tree_node*) #3

declare dso_local zeroext i8 @is_gimple_asm_val(%union.tree_node*) #3

declare dso_local zeroext i8 @is_gimple_min_lval(%union.tree_node*) #3

declare dso_local zeroext i8 @is_gimple_lvalue(%union.tree_node*) #3

declare dso_local zeroext i8 @is_gimple_addressable(%union.tree_node*) #3

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_last(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.gimple_seq_d* %seq) #0 !dbg !6083 {
entry:
  %seq.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %seq, %struct.gimple_seq_d** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq.addr, metadata !6084, metadata !DIExpression()), !dbg !6085
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !6086, metadata !DIExpression()), !dbg !6087
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !6088
  %call = call %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %0), !dbg !6089
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !6090
  store %struct.gimple_seq_node_d* %call, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !6091
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !6092
  %seq1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !6093
  store %struct.gimple_seq_d* %1, %struct.gimple_seq_d** %seq1, align 8, !dbg !6094
  %ptr2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !6095
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr2, align 8, !dbg !6095
  %tobool = icmp ne %struct.gimple_seq_node_d* %2, null, !dbg !6096
  br i1 %tobool, label %land.lhs.true, label %cond.false, !dbg !6097

land.lhs.true:                                    ; preds = %entry
  %ptr3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !6098
  %3 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr3, align 8, !dbg !6098
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %3, i32 0, i32 0, !dbg !6099
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6099
  %tobool4 = icmp ne %union.gimple_statement_d* %4, null, !dbg !6100
  br i1 %tobool4, label %cond.true, label %cond.false, !dbg !6101

cond.true:                                        ; preds = %land.lhs.true
  %ptr5 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !6102
  %5 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr5, align 8, !dbg !6102
  %stmt6 = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %5, i32 0, i32 0, !dbg !6103
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt6, align 8, !dbg !6103
  %call7 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %6), !dbg !6104
  br label %cond.end, !dbg !6101

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !6101

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.basic_block_def* [ %call7, %cond.true ], [ null, %cond.false ], !dbg !6101
  %bb = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !6105
  store %struct.basic_block_def* %cond, %struct.basic_block_def** %bb, align 8, !dbg !6106
  ret void, !dbg !6107
}

declare dso_local %union.tree_node* @tree_ssa_strip_useless_type_conversions(%union.tree_node*) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimplify_self_mod_expr(%union.tree_node** %expr_p, %struct.gimple_seq_d** %pre_p, %struct.gimple_seq_d** %post_p, i8 zeroext %want_value) #0 !dbg !6108 {
entry:
  %retval = alloca i32, align 4
  %expr_p.addr = alloca %union.tree_node**, align 8
  %pre_p.addr = alloca %struct.gimple_seq_d**, align 8
  %post_p.addr = alloca %struct.gimple_seq_d**, align 8
  %want_value.addr = alloca i8, align 1
  %code = alloca i32, align 4
  %lhs = alloca %union.tree_node*, align 8
  %lvalue = alloca %union.tree_node*, align 8
  %rhs = alloca %union.tree_node*, align 8
  %t1 = alloca %union.tree_node*, align 8
  %post = alloca %struct.gimple_seq_d*, align 8
  %orig_post_p = alloca %struct.gimple_seq_d**, align 8
  %postfix = alloca i8, align 1
  %arith_code = alloca i32, align 4
  %ret = alloca i32, align 4
  %loc = alloca i32, align 4
  store %union.tree_node** %expr_p, %union.tree_node*** %expr_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %expr_p.addr, metadata !6111, metadata !DIExpression()), !dbg !6112
  store %struct.gimple_seq_d** %pre_p, %struct.gimple_seq_d*** %pre_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %pre_p.addr, metadata !6113, metadata !DIExpression()), !dbg !6114
  store %struct.gimple_seq_d** %post_p, %struct.gimple_seq_d*** %post_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %post_p.addr, metadata !6115, metadata !DIExpression()), !dbg !6116
  store i8 %want_value, i8* %want_value.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %want_value.addr, metadata !6117, metadata !DIExpression()), !dbg !6118
  call void @llvm.dbg.declare(metadata i32* %code, metadata !6119, metadata !DIExpression()), !dbg !6120
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !6121, metadata !DIExpression()), !dbg !6122
  call void @llvm.dbg.declare(metadata %union.tree_node** %lvalue, metadata !6123, metadata !DIExpression()), !dbg !6124
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs, metadata !6125, metadata !DIExpression()), !dbg !6126
  call void @llvm.dbg.declare(metadata %union.tree_node** %t1, metadata !6127, metadata !DIExpression()), !dbg !6128
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %post, metadata !6129, metadata !DIExpression()), !dbg !6130
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %post, align 8, !dbg !6130
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %orig_post_p, metadata !6131, metadata !DIExpression()), !dbg !6132
  %0 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !6133
  store %struct.gimple_seq_d** %0, %struct.gimple_seq_d*** %orig_post_p, align 8, !dbg !6132
  call void @llvm.dbg.declare(metadata i8* %postfix, metadata !6134, metadata !DIExpression()), !dbg !6135
  call void @llvm.dbg.declare(metadata i32* %arith_code, metadata !6136, metadata !DIExpression()), !dbg !6137
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !6138, metadata !DIExpression()), !dbg !6139
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !6140, metadata !DIExpression()), !dbg !6141
  %1 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !6142
  %2 = load %union.tree_node*, %union.tree_node** %1, align 8, !dbg !6142
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !6142
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !6142
  %bf.load = load i64, i64* %3, align 8, !dbg !6142
  %bf.clear = and i64 %bf.load, 65535, !dbg !6142
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6142
  %idxprom = sext i32 %bf.cast to i64, !dbg !6142
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !6142
  %4 = load i32, i32* %arrayidx, align 4, !dbg !6142
  %cmp = icmp uge i32 %4, 4, !dbg !6142
  br i1 %cmp, label %land.lhs.true, label %cond.false, !dbg !6142

land.lhs.true:                                    ; preds = %entry
  %5 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !6142
  %6 = load %union.tree_node*, %union.tree_node** %5, align 8, !dbg !6142
  %base1 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !6142
  %7 = bitcast %struct.tree_base* %base1 to i64*, !dbg !6142
  %bf.load2 = load i64, i64* %7, align 8, !dbg !6142
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !6142
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !6142
  %idxprom5 = sext i32 %bf.cast4 to i64, !dbg !6142
  %arrayidx6 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom5, !dbg !6142
  %8 = load i32, i32* %arrayidx6, align 4, !dbg !6142
  %cmp7 = icmp ule i32 %8, 10, !dbg !6142
  br i1 %cmp7, label %cond.true, label %cond.false, !dbg !6142

cond.true:                                        ; preds = %land.lhs.true
  %9 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !6142
  %10 = load %union.tree_node*, %union.tree_node** %9, align 8, !dbg !6142
  %exp = bitcast %union.tree_node* %10 to %struct.tree_exp*, !dbg !6142
  %locus = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 1, !dbg !6142
  %11 = load i32, i32* %locus, align 8, !dbg !6142
  br label %cond.end, !dbg !6142

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !6142

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %11, %cond.true ], [ 0, %cond.false ], !dbg !6142
  store i32 %cond, i32* %loc, align 4, !dbg !6141
  %12 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !6143
  %13 = load %union.tree_node*, %union.tree_node** %12, align 8, !dbg !6143
  %base8 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !6143
  %14 = bitcast %struct.tree_base* %base8 to i64*, !dbg !6143
  %bf.load9 = load i64, i64* %14, align 8, !dbg !6143
  %bf.clear10 = and i64 %bf.load9, 65535, !dbg !6143
  %bf.cast11 = trunc i64 %bf.clear10 to i32, !dbg !6143
  store i32 %bf.cast11, i32* %code, align 4, !dbg !6144
  %15 = load i32, i32* %code, align 4, !dbg !6145
  %cmp12 = icmp eq i32 %15, 128, !dbg !6145
  br i1 %cmp12, label %cond.false19, label %lor.lhs.false, !dbg !6145

lor.lhs.false:                                    ; preds = %cond.end
  %16 = load i32, i32* %code, align 4, !dbg !6145
  %cmp13 = icmp eq i32 %16, 127, !dbg !6145
  br i1 %cmp13, label %cond.false19, label %lor.lhs.false14, !dbg !6145

lor.lhs.false14:                                  ; preds = %lor.lhs.false
  %17 = load i32, i32* %code, align 4, !dbg !6145
  %cmp15 = icmp eq i32 %17, 126, !dbg !6145
  br i1 %cmp15, label %cond.false19, label %lor.lhs.false16, !dbg !6145

lor.lhs.false16:                                  ; preds = %lor.lhs.false14
  %18 = load i32, i32* %code, align 4, !dbg !6145
  %cmp17 = icmp eq i32 %18, 125, !dbg !6145
  br i1 %cmp17, label %cond.false19, label %cond.true18, !dbg !6145

cond.true18:                                      ; preds = %lor.lhs.false16
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 2087, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6145
  br label %cond.end20, !dbg !6145

cond.false19:                                     ; preds = %lor.lhs.false16, %lor.lhs.false14, %lor.lhs.false, %cond.end
  br label %cond.end20, !dbg !6145

cond.end20:                                       ; preds = %cond.false19, %cond.true18
  %cond21 = phi i32 [ 0, %cond.true18 ], [ 0, %cond.false19 ], !dbg !6145
  %19 = load i32, i32* %code, align 4, !dbg !6146
  %cmp22 = icmp eq i32 %19, 128, !dbg !6148
  br i1 %cmp22, label %if.then, label %lor.lhs.false23, !dbg !6149

lor.lhs.false23:                                  ; preds = %cond.end20
  %20 = load i32, i32* %code, align 4, !dbg !6150
  %cmp24 = icmp eq i32 %20, 127, !dbg !6151
  br i1 %cmp24, label %if.then, label %if.else, !dbg !6152

if.then:                                          ; preds = %lor.lhs.false23, %cond.end20
  %21 = load i8, i8* %want_value.addr, align 1, !dbg !6153
  store i8 %21, i8* %postfix, align 1, !dbg !6154
  br label %if.end, !dbg !6155

if.else:                                          ; preds = %lor.lhs.false23
  store i8 0, i8* %postfix, align 1, !dbg !6156
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %22 = load i8, i8* %postfix, align 1, !dbg !6157
  %tobool = icmp ne i8 %22, 0, !dbg !6157
  br i1 %tobool, label %if.then25, label %if.end26, !dbg !6159

if.then25:                                        ; preds = %if.end
  store %struct.gimple_seq_d** %post, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !6160
  br label %if.end26, !dbg !6161

if.end26:                                         ; preds = %if.then25, %if.end
  %23 = load i32, i32* %code, align 4, !dbg !6162
  %cmp27 = icmp eq i32 %23, 126, !dbg !6164
  br i1 %cmp27, label %if.then30, label %lor.lhs.false28, !dbg !6165

lor.lhs.false28:                                  ; preds = %if.end26
  %24 = load i32, i32* %code, align 4, !dbg !6166
  %cmp29 = icmp eq i32 %24, 128, !dbg !6167
  br i1 %cmp29, label %if.then30, label %if.else31, !dbg !6168

if.then30:                                        ; preds = %lor.lhs.false28, %if.end26
  store i32 63, i32* %arith_code, align 4, !dbg !6169
  br label %if.end32, !dbg !6170

if.else31:                                        ; preds = %lor.lhs.false28
  store i32 64, i32* %arith_code, align 4, !dbg !6171
  br label %if.end32

if.end32:                                         ; preds = %if.else31, %if.then30
  %25 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !6172
  %26 = load %union.tree_node*, %union.tree_node** %25, align 8, !dbg !6172
  %exp33 = bitcast %union.tree_node* %26 to %struct.tree_exp*, !dbg !6172
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp33, i32 0, i32 3, !dbg !6172
  %arrayidx34 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !6172
  %27 = load %union.tree_node*, %union.tree_node** %arrayidx34, align 8, !dbg !6172
  store %union.tree_node* %27, %union.tree_node** %lvalue, align 8, !dbg !6173
  %28 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !6174
  %29 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !6175
  %call = call i32 @gimplify_expr(%union.tree_node** %lvalue, %struct.gimple_seq_d** %28, %struct.gimple_seq_d** %29, i8 (%union.tree_node*)* @is_gimple_lvalue, i32 2), !dbg !6176
  store i32 %call, i32* %ret, align 4, !dbg !6177
  %30 = load i32, i32* %ret, align 4, !dbg !6178
  %cmp35 = icmp eq i32 %30, -2, !dbg !6180
  br i1 %cmp35, label %if.then36, label %if.end37, !dbg !6181

if.then36:                                        ; preds = %if.end32
  %31 = load i32, i32* %ret, align 4, !dbg !6182
  store i32 %31, i32* %retval, align 4, !dbg !6183
  br label %return, !dbg !6183

if.end37:                                         ; preds = %if.end32
  %32 = load %union.tree_node*, %union.tree_node** %lvalue, align 8, !dbg !6184
  store %union.tree_node* %32, %union.tree_node** %lhs, align 8, !dbg !6185
  %33 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !6186
  %34 = load %union.tree_node*, %union.tree_node** %33, align 8, !dbg !6186
  %exp38 = bitcast %union.tree_node* %34 to %struct.tree_exp*, !dbg !6186
  %operands39 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp38, i32 0, i32 3, !dbg !6186
  %arrayidx40 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands39, i64 0, i64 1, !dbg !6186
  %35 = load %union.tree_node*, %union.tree_node** %arrayidx40, align 8, !dbg !6186
  store %union.tree_node* %35, %union.tree_node** %rhs, align 8, !dbg !6187
  %36 = load i8, i8* %postfix, align 1, !dbg !6188
  %tobool41 = icmp ne i8 %36, 0, !dbg !6188
  br i1 %tobool41, label %if.then42, label %if.end54, !dbg !6190

if.then42:                                        ; preds = %if.end37
  %37 = load %union.tree_node*, %union.tree_node** %lvalue, align 8, !dbg !6191
  %call43 = call zeroext i8 @is_gimple_min_lval(%union.tree_node* %37), !dbg !6194
  %tobool44 = icmp ne i8 %call43, 0, !dbg !6194
  br i1 %tobool44, label %if.end49, label %if.then45, !dbg !6195

if.then45:                                        ; preds = %if.then42
  %38 = load %union.tree_node*, %union.tree_node** %lvalue, align 8, !dbg !6196
  call void @mark_addressable(%union.tree_node* %38), !dbg !6198
  %39 = load i32, i32* @input_location, align 4, !dbg !6199
  %40 = load %union.tree_node*, %union.tree_node** %lvalue, align 8, !dbg !6200
  %call46 = call %union.tree_node* @build_fold_addr_expr_loc(i32 %39, %union.tree_node* %40), !dbg !6201
  store %union.tree_node* %call46, %union.tree_node** %lvalue, align 8, !dbg !6202
  %41 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !6203
  %42 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !6204
  %call47 = call i32 @gimplify_expr(%union.tree_node** %lvalue, %struct.gimple_seq_d** %41, %struct.gimple_seq_d** %42, i8 (%union.tree_node*)* @is_gimple_val, i32 1), !dbg !6205
  %43 = load i32, i32* @input_location, align 4, !dbg !6206
  %44 = load %union.tree_node*, %union.tree_node** %lvalue, align 8, !dbg !6207
  %call48 = call %union.tree_node* @build_fold_indirect_ref_loc(i32 %43, %union.tree_node* %44), !dbg !6208
  store %union.tree_node* %call48, %union.tree_node** %lvalue, align 8, !dbg !6209
  br label %if.end49, !dbg !6210

if.end49:                                         ; preds = %if.then45, %if.then42
  %45 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !6211
  %46 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !6212
  %call50 = call i32 @gimplify_expr(%union.tree_node** %lhs, %struct.gimple_seq_d** %45, %struct.gimple_seq_d** %46, i8 (%union.tree_node*)* @is_gimple_val, i32 1), !dbg !6213
  store i32 %call50, i32* %ret, align 4, !dbg !6214
  %47 = load i32, i32* %ret, align 4, !dbg !6215
  %cmp51 = icmp eq i32 %47, -2, !dbg !6217
  br i1 %cmp51, label %if.then52, label %if.end53, !dbg !6218

if.then52:                                        ; preds = %if.end49
  %48 = load i32, i32* %ret, align 4, !dbg !6219
  store i32 %48, i32* %retval, align 4, !dbg !6220
  br label %return, !dbg !6220

if.end53:                                         ; preds = %if.end49
  br label %if.end54, !dbg !6221

if.end54:                                         ; preds = %if.end53, %if.end37
  %49 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6222
  %common = bitcast %union.tree_node* %49 to %struct.tree_common*, !dbg !6222
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6222
  %50 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6222
  %base55 = bitcast %union.tree_node* %50 to %struct.tree_base*, !dbg !6222
  %51 = bitcast %struct.tree_base* %base55 to i64*, !dbg !6222
  %bf.load56 = load i64, i64* %51, align 8, !dbg !6222
  %bf.clear57 = and i64 %bf.load56, 65535, !dbg !6222
  %bf.cast58 = trunc i64 %bf.clear57 to i32, !dbg !6222
  %cmp59 = icmp eq i32 %bf.cast58, 10, !dbg !6222
  br i1 %cmp59, label %if.then68, label %lor.lhs.false60, !dbg !6222

lor.lhs.false60:                                  ; preds = %if.end54
  %52 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6222
  %common61 = bitcast %union.tree_node* %52 to %struct.tree_common*, !dbg !6222
  %type62 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common61, i32 0, i32 2, !dbg !6222
  %53 = load %union.tree_node*, %union.tree_node** %type62, align 8, !dbg !6222
  %base63 = bitcast %union.tree_node* %53 to %struct.tree_base*, !dbg !6222
  %54 = bitcast %struct.tree_base* %base63 to i64*, !dbg !6222
  %bf.load64 = load i64, i64* %54, align 8, !dbg !6222
  %bf.clear65 = and i64 %bf.load64, 65535, !dbg !6222
  %bf.cast66 = trunc i64 %bf.clear65 to i32, !dbg !6222
  %cmp67 = icmp eq i32 %bf.cast66, 12, !dbg !6222
  br i1 %cmp67, label %if.then68, label %if.end76, !dbg !6224

if.then68:                                        ; preds = %lor.lhs.false60, %if.end54
  %55 = load i32, i32* %loc, align 4, !dbg !6225
  %56 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !6227
  %57 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !6228
  %call69 = call %union.tree_node* @fold_convert_loc(i32 %55, %union.tree_node* %56, %union.tree_node* %57), !dbg !6229
  store %union.tree_node* %call69, %union.tree_node** %rhs, align 8, !dbg !6230
  %58 = load i32, i32* %arith_code, align 4, !dbg !6231
  %cmp70 = icmp eq i32 %58, 64, !dbg !6233
  br i1 %cmp70, label %if.then71, label %if.end75, !dbg !6234

if.then71:                                        ; preds = %if.then68
  %59 = load i32, i32* %loc, align 4, !dbg !6235
  %60 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !6235
  %common72 = bitcast %union.tree_node* %60 to %struct.tree_common*, !dbg !6235
  %type73 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common72, i32 0, i32 2, !dbg !6235
  %61 = load %union.tree_node*, %union.tree_node** %type73, align 8, !dbg !6235
  %62 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !6235
  %call74 = call %union.tree_node* @fold_build1_stat_loc(i32 %59, i32 79, %union.tree_node* %61, %union.tree_node* %62), !dbg !6235
  store %union.tree_node* %call74, %union.tree_node** %rhs, align 8, !dbg !6236
  br label %if.end75, !dbg !6237

if.end75:                                         ; preds = %if.then71, %if.then68
  store i32 66, i32* %arith_code, align 4, !dbg !6238
  br label %if.end76, !dbg !6239

if.end76:                                         ; preds = %if.end75, %lor.lhs.false60
  %63 = load i32, i32* %arith_code, align 4, !dbg !6240
  %64 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !6240
  %65 = load %union.tree_node*, %union.tree_node** %64, align 8, !dbg !6240
  %common77 = bitcast %union.tree_node* %65 to %struct.tree_common*, !dbg !6240
  %type78 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common77, i32 0, i32 2, !dbg !6240
  %66 = load %union.tree_node*, %union.tree_node** %type78, align 8, !dbg !6240
  %67 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6240
  %68 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !6240
  %call79 = call %union.tree_node* @build2_stat(i32 %63, %union.tree_node* %66, %union.tree_node* %67, %union.tree_node* %68), !dbg !6240
  store %union.tree_node* %call79, %union.tree_node** %t1, align 8, !dbg !6241
  %69 = load i8, i8* %postfix, align 1, !dbg !6242
  %tobool80 = icmp ne i8 %69, 0, !dbg !6242
  br i1 %tobool80, label %if.then81, label %if.else83, !dbg !6244

if.then81:                                        ; preds = %if.end76
  %70 = load %union.tree_node*, %union.tree_node** %lvalue, align 8, !dbg !6245
  %71 = load %union.tree_node*, %union.tree_node** %t1, align 8, !dbg !6247
  %72 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %orig_post_p, align 8, !dbg !6248
  %call82 = call %union.gimple_statement_d* @gimplify_assign(%union.tree_node* %70, %union.tree_node* %71, %struct.gimple_seq_d** %72), !dbg !6249
  %73 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %orig_post_p, align 8, !dbg !6250
  %74 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %post, align 8, !dbg !6251
  call void @gimplify_seq_add_seq(%struct.gimple_seq_d** %73, %struct.gimple_seq_d* %74), !dbg !6252
  %75 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6253
  %76 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !6254
  store %union.tree_node* %75, %union.tree_node** %76, align 8, !dbg !6255
  store i32 1, i32* %retval, align 4, !dbg !6256
  br label %return, !dbg !6256

if.else83:                                        ; preds = %if.end76
  %77 = load %union.tree_node*, %union.tree_node** %lvalue, align 8, !dbg !6257
  %common84 = bitcast %union.tree_node* %77 to %struct.tree_common*, !dbg !6257
  %type85 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common84, i32 0, i32 2, !dbg !6257
  %78 = load %union.tree_node*, %union.tree_node** %type85, align 8, !dbg !6257
  %79 = load %union.tree_node*, %union.tree_node** %lvalue, align 8, !dbg !6257
  %80 = load %union.tree_node*, %union.tree_node** %t1, align 8, !dbg !6257
  %call86 = call %union.tree_node* @build2_stat(i32 53, %union.tree_node* %78, %union.tree_node* %79, %union.tree_node* %80), !dbg !6257
  %81 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !6259
  store %union.tree_node* %call86, %union.tree_node** %81, align 8, !dbg !6260
  store i32 0, i32* %retval, align 4, !dbg !6261
  br label %return, !dbg !6261

return:                                           ; preds = %if.else83, %if.then81, %if.then52, %if.then36
  %82 = load i32, i32* %retval, align 4, !dbg !6262
  ret i32 %82, !dbg !6262
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimplify_compound_lval(%union.tree_node** %expr_p, %struct.gimple_seq_d** %pre_p, %struct.gimple_seq_d** %post_p, i32 %fallback) #0 !dbg !6263 {
entry:
  %expr_p.addr = alloca %union.tree_node**, align 8
  %pre_p.addr = alloca %struct.gimple_seq_d**, align 8
  %post_p.addr = alloca %struct.gimple_seq_d**, align 8
  %fallback.addr = alloca i32, align 4
  %p = alloca %union.tree_node**, align 8
  %stack = alloca %struct.VEC_tree_heap*, align 8
  %ret = alloca i32, align 4
  %tret = alloca i32, align 4
  %i = alloca i32, align 4
  %loc = alloca i32, align 4
  %t = alloca %union.tree_node*, align 8
  %low = alloca %union.tree_node*, align 8
  %elmt_type = alloca %union.tree_node*, align 8
  %elmt_size = alloca %union.tree_node*, align 8
  %factor = alloca %union.tree_node*, align 8
  %offset = alloca %union.tree_node*, align 8
  %field = alloca %union.tree_node*, align 8
  %factor150 = alloca %union.tree_node*, align 8
  %t197 = alloca %union.tree_node*, align 8
  store %union.tree_node** %expr_p, %union.tree_node*** %expr_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %expr_p.addr, metadata !6266, metadata !DIExpression()), !dbg !6267
  store %struct.gimple_seq_d** %pre_p, %struct.gimple_seq_d*** %pre_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %pre_p.addr, metadata !6268, metadata !DIExpression()), !dbg !6269
  store %struct.gimple_seq_d** %post_p, %struct.gimple_seq_d*** %post_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %post_p.addr, metadata !6270, metadata !DIExpression()), !dbg !6271
  store i32 %fallback, i32* %fallback.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fallback.addr, metadata !6272, metadata !DIExpression()), !dbg !6273
  call void @llvm.dbg.declare(metadata %union.tree_node*** %p, metadata !6274, metadata !DIExpression()), !dbg !6275
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %stack, metadata !6276, metadata !DIExpression()), !dbg !6277
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !6278, metadata !DIExpression()), !dbg !6279
  store i32 0, i32* %ret, align 4, !dbg !6279
  call void @llvm.dbg.declare(metadata i32* %tret, metadata !6280, metadata !DIExpression()), !dbg !6281
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6282, metadata !DIExpression()), !dbg !6283
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !6284, metadata !DIExpression()), !dbg !6285
  %0 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !6286
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !6286
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !6286
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !6286
  %bf.load = load i64, i64* %2, align 8, !dbg !6286
  %bf.clear = and i64 %bf.load, 65535, !dbg !6286
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6286
  %idxprom = sext i32 %bf.cast to i64, !dbg !6286
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !6286
  %3 = load i32, i32* %arrayidx, align 4, !dbg !6286
  %cmp = icmp uge i32 %3, 4, !dbg !6286
  br i1 %cmp, label %land.lhs.true, label %cond.false, !dbg !6286

land.lhs.true:                                    ; preds = %entry
  %4 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !6286
  %5 = load %union.tree_node*, %union.tree_node** %4, align 8, !dbg !6286
  %base1 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !6286
  %6 = bitcast %struct.tree_base* %base1 to i64*, !dbg !6286
  %bf.load2 = load i64, i64* %6, align 8, !dbg !6286
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !6286
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !6286
  %idxprom5 = sext i32 %bf.cast4 to i64, !dbg !6286
  %arrayidx6 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom5, !dbg !6286
  %7 = load i32, i32* %arrayidx6, align 4, !dbg !6286
  %cmp7 = icmp ule i32 %7, 10, !dbg !6286
  br i1 %cmp7, label %cond.true, label %cond.false, !dbg !6286

cond.true:                                        ; preds = %land.lhs.true
  %8 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !6286
  %9 = load %union.tree_node*, %union.tree_node** %8, align 8, !dbg !6286
  %exp = bitcast %union.tree_node* %9 to %struct.tree_exp*, !dbg !6286
  %locus = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 1, !dbg !6286
  %10 = load i32, i32* %locus, align 8, !dbg !6286
  br label %cond.end, !dbg !6286

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !6286

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %10, %cond.true ], [ 0, %cond.false ], !dbg !6286
  store i32 %cond, i32* %loc, align 4, !dbg !6285
  %call = call %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 10), !dbg !6287
  store %struct.VEC_tree_heap* %call, %struct.VEC_tree_heap** %stack, align 8, !dbg !6288
  %11 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !6289
  store %union.tree_node** %11, %union.tree_node*** %p, align 8, !dbg !6291
  br label %for.cond, !dbg !6292

for.cond:                                         ; preds = %for.inc, %cond.end
  br label %restart, !dbg !6293

restart:                                          ; preds = %if.then29, %for.cond
  call void @llvm.dbg.label(metadata !6295), !dbg !6297
  %12 = load %union.tree_node**, %union.tree_node*** %p, align 8, !dbg !6298
  %13 = load %union.tree_node*, %union.tree_node** %12, align 8, !dbg !6298
  %base8 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !6298
  %14 = bitcast %struct.tree_base* %base8 to i64*, !dbg !6298
  %bf.load9 = load i64, i64* %14, align 8, !dbg !6298
  %bf.clear10 = and i64 %bf.load9, 65535, !dbg !6298
  %bf.cast11 = trunc i64 %bf.clear10 to i32, !dbg !6298
  %cmp12 = icmp eq i32 %bf.cast11, 47, !dbg !6300
  br i1 %cmp12, label %if.then, label %if.end, !dbg !6301

if.then:                                          ; preds = %restart
  %15 = load i32, i32* %loc, align 4, !dbg !6302
  %16 = load %union.tree_node**, %union.tree_node*** %p, align 8, !dbg !6303
  %17 = load %union.tree_node*, %union.tree_node** %16, align 8, !dbg !6304
  %call13 = call %union.tree_node* @fold_indirect_ref_loc(i32 %15, %union.tree_node* %17), !dbg !6305
  %18 = load %union.tree_node**, %union.tree_node*** %p, align 8, !dbg !6306
  store %union.tree_node* %call13, %union.tree_node** %18, align 8, !dbg !6307
  br label %if.end, !dbg !6308

if.end:                                           ; preds = %if.then, %restart
  %19 = load %union.tree_node**, %union.tree_node*** %p, align 8, !dbg !6309
  %20 = load %union.tree_node*, %union.tree_node** %19, align 8, !dbg !6311
  %call14 = call zeroext i8 @handled_component_p(%union.tree_node* %20), !dbg !6312
  %tobool = icmp ne i8 %call14, 0, !dbg !6312
  br i1 %tobool, label %if.then15, label %if.else, !dbg !6313

if.then15:                                        ; preds = %if.end
  br label %if.end31, !dbg !6313

if.else:                                          ; preds = %if.end
  %21 = load %union.tree_node**, %union.tree_node*** %p, align 8, !dbg !6314
  %22 = load %union.tree_node*, %union.tree_node** %21, align 8, !dbg !6314
  %base16 = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !6314
  %23 = bitcast %struct.tree_base* %base16 to i64*, !dbg !6314
  %bf.load17 = load i64, i64* %23, align 8, !dbg !6314
  %bf.clear18 = and i64 %bf.load17, 65535, !dbg !6314
  %bf.cast19 = trunc i64 %bf.clear18 to i32, !dbg !6314
  %cmp20 = icmp eq i32 %bf.cast19, 32, !dbg !6316
  br i1 %cmp20, label %land.lhs.true26, label %lor.lhs.false, !dbg !6317

lor.lhs.false:                                    ; preds = %if.else
  %24 = load %union.tree_node**, %union.tree_node*** %p, align 8, !dbg !6318
  %25 = load %union.tree_node*, %union.tree_node** %24, align 8, !dbg !6318
  %base21 = bitcast %union.tree_node* %25 to %struct.tree_base*, !dbg !6318
  %26 = bitcast %struct.tree_base* %base21 to i64*, !dbg !6318
  %bf.load22 = load i64, i64* %26, align 8, !dbg !6318
  %bf.clear23 = and i64 %bf.load22, 65535, !dbg !6318
  %bf.cast24 = trunc i64 %bf.clear23 to i32, !dbg !6318
  %cmp25 = icmp eq i32 %bf.cast24, 34, !dbg !6319
  br i1 %cmp25, label %land.lhs.true26, label %if.else30, !dbg !6320

land.lhs.true26:                                  ; preds = %lor.lhs.false, %if.else
  %27 = load %union.tree_node**, %union.tree_node*** %p, align 8, !dbg !6321
  %call27 = call i32 @gimplify_var_or_parm_decl(%union.tree_node** %27), !dbg !6322
  %cmp28 = icmp eq i32 %call27, 0, !dbg !6323
  br i1 %cmp28, label %if.then29, label %if.else30, !dbg !6324

if.then29:                                        ; preds = %land.lhs.true26
  br label %restart, !dbg !6325

if.else30:                                        ; preds = %land.lhs.true26, %lor.lhs.false
  br label %for.end, !dbg !6326

if.end31:                                         ; preds = %if.then15
  %28 = load %union.tree_node**, %union.tree_node*** %p, align 8, !dbg !6327
  %29 = load %union.tree_node*, %union.tree_node** %28, align 8, !dbg !6327
  %call32 = call %union.tree_node** @VEC_tree_heap_safe_push(%struct.VEC_tree_heap** %stack, %union.tree_node* %29), !dbg !6327
  br label %for.inc, !dbg !6328

for.inc:                                          ; preds = %if.end31
  %30 = load %union.tree_node**, %union.tree_node*** %p, align 8, !dbg !6329
  %31 = load %union.tree_node*, %union.tree_node** %30, align 8, !dbg !6329
  %exp33 = bitcast %union.tree_node* %31 to %struct.tree_exp*, !dbg !6329
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp33, i32 0, i32 3, !dbg !6329
  %arrayidx34 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !6329
  store %union.tree_node** %arrayidx34, %union.tree_node*** %p, align 8, !dbg !6330
  br label %for.cond, !dbg !6331, !llvm.loop !6332

for.end:                                          ; preds = %if.else30
  %32 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %stack, align 8, !dbg !6335
  %tobool35 = icmp ne %struct.VEC_tree_heap* %32, null, !dbg !6335
  br i1 %tobool35, label %cond.true36, label %cond.false38, !dbg !6335

cond.true36:                                      ; preds = %for.end
  %33 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %stack, align 8, !dbg !6335
  %base37 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %33, i32 0, i32 0, !dbg !6335
  br label %cond.end39, !dbg !6335

cond.false38:                                     ; preds = %for.end
  br label %cond.end39, !dbg !6335

cond.end39:                                       ; preds = %cond.false38, %cond.true36
  %cond40 = phi %struct.VEC_tree_base* [ %base37, %cond.true36 ], [ null, %cond.false38 ], !dbg !6335
  %call41 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond40), !dbg !6335
  %tobool42 = icmp ne i32 %call41, 0, !dbg !6335
  br i1 %tobool42, label %cond.false44, label %cond.true43, !dbg !6335

cond.true43:                                      ; preds = %cond.end39
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 1925, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6335
  br label %cond.end45, !dbg !6335

cond.false44:                                     ; preds = %cond.end39
  br label %cond.end45, !dbg !6335

cond.end45:                                       ; preds = %cond.false44, %cond.true43
  %cond46 = phi i32 [ 0, %cond.true43 ], [ 0, %cond.false44 ], !dbg !6335
  %34 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %stack, align 8, !dbg !6336
  %tobool47 = icmp ne %struct.VEC_tree_heap* %34, null, !dbg !6336
  br i1 %tobool47, label %cond.true48, label %cond.false50, !dbg !6336

cond.true48:                                      ; preds = %cond.end45
  %35 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %stack, align 8, !dbg !6336
  %base49 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %35, i32 0, i32 0, !dbg !6336
  br label %cond.end51, !dbg !6336

cond.false50:                                     ; preds = %cond.end45
  br label %cond.end51, !dbg !6336

cond.end51:                                       ; preds = %cond.false50, %cond.true48
  %cond52 = phi %struct.VEC_tree_base* [ %base49, %cond.true48 ], [ null, %cond.false50 ], !dbg !6336
  %call53 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond52), !dbg !6336
  %sub = sub i32 %call53, 1, !dbg !6338
  store i32 %sub, i32* %i, align 4, !dbg !6339
  br label %for.cond54, !dbg !6340

for.cond54:                                       ; preds = %for.inc177, %cond.end51
  %36 = load i32, i32* %i, align 4, !dbg !6341
  %cmp55 = icmp sge i32 %36, 0, !dbg !6343
  br i1 %cmp55, label %for.body, label %for.end178, !dbg !6344

for.body:                                         ; preds = %for.cond54
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !6345, metadata !DIExpression()), !dbg !6347
  %37 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %stack, align 8, !dbg !6348
  %tobool56 = icmp ne %struct.VEC_tree_heap* %37, null, !dbg !6348
  br i1 %tobool56, label %cond.true57, label %cond.false59, !dbg !6348

cond.true57:                                      ; preds = %for.body
  %38 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %stack, align 8, !dbg !6348
  %base58 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %38, i32 0, i32 0, !dbg !6348
  br label %cond.end60, !dbg !6348

cond.false59:                                     ; preds = %for.body
  br label %cond.end60, !dbg !6348

cond.end60:                                       ; preds = %cond.false59, %cond.true57
  %cond61 = phi %struct.VEC_tree_base* [ %base58, %cond.true57 ], [ null, %cond.false59 ], !dbg !6348
  %39 = load i32, i32* %i, align 4, !dbg !6348
  %call62 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond61, i32 %39), !dbg !6348
  store %union.tree_node* %call62, %union.tree_node** %t, align 8, !dbg !6347
  %40 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6349
  %base63 = bitcast %union.tree_node* %40 to %struct.tree_base*, !dbg !6349
  %41 = bitcast %struct.tree_base* %base63 to i64*, !dbg !6349
  %bf.load64 = load i64, i64* %41, align 8, !dbg !6349
  %bf.clear65 = and i64 %bf.load64, 65535, !dbg !6349
  %bf.cast66 = trunc i64 %bf.clear65 to i32, !dbg !6349
  %cmp67 = icmp eq i32 %bf.cast66, 45, !dbg !6351
  br i1 %cmp67, label %if.then74, label %lor.lhs.false68, !dbg !6352

lor.lhs.false68:                                  ; preds = %cond.end60
  %42 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6353
  %base69 = bitcast %union.tree_node* %42 to %struct.tree_base*, !dbg !6353
  %43 = bitcast %struct.tree_base* %base69 to i64*, !dbg !6353
  %bf.load70 = load i64, i64* %43, align 8, !dbg !6353
  %bf.clear71 = and i64 %bf.load70, 65535, !dbg !6353
  %bf.cast72 = trunc i64 %bf.clear71 to i32, !dbg !6353
  %cmp73 = icmp eq i32 %bf.cast72, 46, !dbg !6354
  br i1 %cmp73, label %if.then74, label %if.else132, !dbg !6355

if.then74:                                        ; preds = %lor.lhs.false68, %cond.end60
  %44 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6356
  %exp75 = bitcast %union.tree_node* %44 to %struct.tree_exp*, !dbg !6356
  %operands76 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp75, i32 0, i32 3, !dbg !6356
  %arrayidx77 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands76, i64 0, i64 2, !dbg !6356
  %45 = load %union.tree_node*, %union.tree_node** %arrayidx77, align 8, !dbg !6356
  %cmp78 = icmp eq %union.tree_node* %45, null, !dbg !6359
  br i1 %cmp78, label %if.then79, label %if.end98, !dbg !6360

if.then79:                                        ; preds = %if.then74
  call void @llvm.dbg.declare(metadata %union.tree_node** %low, metadata !6361, metadata !DIExpression()), !dbg !6363
  %46 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6364
  %call80 = call %union.tree_node* @array_ref_low_bound(%union.tree_node* %46), !dbg !6365
  %call81 = call %union.tree_node* @unshare_expr(%union.tree_node* %call80), !dbg !6366
  store %union.tree_node* %call81, %union.tree_node** %low, align 8, !dbg !6363
  %47 = load %union.tree_node*, %union.tree_node** %low, align 8, !dbg !6367
  %call82 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %47), !dbg !6369
  %tobool83 = icmp ne i8 %call82, 0, !dbg !6369
  br i1 %tobool83, label %if.end97, label %if.then84, !dbg !6370

if.then84:                                        ; preds = %if.then79
  %48 = load %union.tree_node*, %union.tree_node** %low, align 8, !dbg !6371
  %49 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6373
  %exp85 = bitcast %union.tree_node* %49 to %struct.tree_exp*, !dbg !6373
  %operands86 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp85, i32 0, i32 3, !dbg !6373
  %arrayidx87 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands86, i64 0, i64 2, !dbg !6373
  store %union.tree_node* %48, %union.tree_node** %arrayidx87, align 8, !dbg !6374
  %50 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6375
  %exp88 = bitcast %union.tree_node* %50 to %struct.tree_exp*, !dbg !6375
  %operands89 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp88, i32 0, i32 3, !dbg !6375
  %arrayidx90 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands89, i64 0, i64 2, !dbg !6375
  %51 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !6376
  %52 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !6377
  %call91 = call i32 @gimplify_expr(%union.tree_node** %arrayidx90, %struct.gimple_seq_d** %51, %struct.gimple_seq_d** %52, i8 (%union.tree_node*)* @is_gimple_reg, i32 1), !dbg !6378
  store i32 %call91, i32* %tret, align 4, !dbg !6379
  %53 = load i32, i32* %ret, align 4, !dbg !6380
  %54 = load i32, i32* %tret, align 4, !dbg !6380
  %cmp92 = icmp slt i32 %53, %54, !dbg !6380
  br i1 %cmp92, label %cond.true93, label %cond.false94, !dbg !6380

cond.true93:                                      ; preds = %if.then84
  %55 = load i32, i32* %ret, align 4, !dbg !6380
  br label %cond.end95, !dbg !6380

cond.false94:                                     ; preds = %if.then84
  %56 = load i32, i32* %tret, align 4, !dbg !6380
  br label %cond.end95, !dbg !6380

cond.end95:                                       ; preds = %cond.false94, %cond.true93
  %cond96 = phi i32 [ %55, %cond.true93 ], [ %56, %cond.false94 ], !dbg !6380
  store i32 %cond96, i32* %ret, align 4, !dbg !6381
  br label %if.end97, !dbg !6382

if.end97:                                         ; preds = %cond.end95, %if.then79
  br label %if.end98, !dbg !6383

if.end98:                                         ; preds = %if.end97, %if.then74
  %57 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6384
  %exp99 = bitcast %union.tree_node* %57 to %struct.tree_exp*, !dbg !6384
  %operands100 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp99, i32 0, i32 3, !dbg !6384
  %arrayidx101 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands100, i64 0, i64 3, !dbg !6384
  %58 = load %union.tree_node*, %union.tree_node** %arrayidx101, align 8, !dbg !6384
  %tobool102 = icmp ne %union.tree_node* %58, null, !dbg !6384
  br i1 %tobool102, label %if.end131, label %if.then103, !dbg !6386

if.then103:                                       ; preds = %if.end98
  call void @llvm.dbg.declare(metadata %union.tree_node** %elmt_type, metadata !6387, metadata !DIExpression()), !dbg !6389
  %59 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6390
  %exp104 = bitcast %union.tree_node* %59 to %struct.tree_exp*, !dbg !6390
  %operands105 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp104, i32 0, i32 3, !dbg !6390
  %arrayidx106 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands105, i64 0, i64 0, !dbg !6390
  %60 = load %union.tree_node*, %union.tree_node** %arrayidx106, align 8, !dbg !6390
  %common = bitcast %union.tree_node* %60 to %struct.tree_common*, !dbg !6390
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6390
  %61 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6390
  %common107 = bitcast %union.tree_node* %61 to %struct.tree_common*, !dbg !6390
  %type108 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common107, i32 0, i32 2, !dbg !6390
  %62 = load %union.tree_node*, %union.tree_node** %type108, align 8, !dbg !6390
  store %union.tree_node* %62, %union.tree_node** %elmt_type, align 8, !dbg !6389
  call void @llvm.dbg.declare(metadata %union.tree_node** %elmt_size, metadata !6391, metadata !DIExpression()), !dbg !6392
  %63 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6393
  %call109 = call %union.tree_node* @array_ref_element_size(%union.tree_node* %63), !dbg !6394
  %call110 = call %union.tree_node* @unshare_expr(%union.tree_node* %call109), !dbg !6395
  store %union.tree_node* %call110, %union.tree_node** %elmt_size, align 8, !dbg !6392
  call void @llvm.dbg.declare(metadata %union.tree_node** %factor, metadata !6396, metadata !DIExpression()), !dbg !6397
  %64 = load %union.tree_node*, %union.tree_node** %elmt_type, align 8, !dbg !6398
  %type111 = bitcast %union.tree_node* %64 to %struct.tree_type*, !dbg !6398
  %align = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type111, i32 0, i32 7, !dbg !6398
  %65 = load i32, i32* %align, align 8, !dbg !6398
  %div = udiv i32 %65, 8, !dbg !6398
  %conv = zext i32 %div to i64, !dbg !6398
  %call112 = call %union.tree_node* @size_int_kind(i64 %conv, i32 0), !dbg !6398
  store %union.tree_node* %call112, %union.tree_node** %factor, align 8, !dbg !6397
  %66 = load i32, i32* %loc, align 4, !dbg !6399
  %67 = load %union.tree_node*, %union.tree_node** %elmt_size, align 8, !dbg !6400
  %68 = load %union.tree_node*, %union.tree_node** %factor, align 8, !dbg !6401
  %call113 = call %union.tree_node* @size_binop_loc(i32 %66, i32 76, %union.tree_node* %67, %union.tree_node* %68), !dbg !6402
  store %union.tree_node* %call113, %union.tree_node** %elmt_size, align 8, !dbg !6403
  %69 = load %union.tree_node*, %union.tree_node** %elmt_size, align 8, !dbg !6404
  %call114 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %69), !dbg !6406
  %tobool115 = icmp ne i8 %call114, 0, !dbg !6406
  br i1 %tobool115, label %if.end130, label %if.then116, !dbg !6407

if.then116:                                       ; preds = %if.then103
  %70 = load %union.tree_node*, %union.tree_node** %elmt_size, align 8, !dbg !6408
  %71 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6410
  %exp117 = bitcast %union.tree_node* %71 to %struct.tree_exp*, !dbg !6410
  %operands118 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp117, i32 0, i32 3, !dbg !6410
  %arrayidx119 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands118, i64 0, i64 3, !dbg !6410
  store %union.tree_node* %70, %union.tree_node** %arrayidx119, align 8, !dbg !6411
  %72 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6412
  %exp120 = bitcast %union.tree_node* %72 to %struct.tree_exp*, !dbg !6412
  %operands121 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp120, i32 0, i32 3, !dbg !6412
  %arrayidx122 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands121, i64 0, i64 3, !dbg !6412
  %73 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !6413
  %74 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !6414
  %call123 = call i32 @gimplify_expr(%union.tree_node** %arrayidx122, %struct.gimple_seq_d** %73, %struct.gimple_seq_d** %74, i8 (%union.tree_node*)* @is_gimple_reg, i32 1), !dbg !6415
  store i32 %call123, i32* %tret, align 4, !dbg !6416
  %75 = load i32, i32* %ret, align 4, !dbg !6417
  %76 = load i32, i32* %tret, align 4, !dbg !6417
  %cmp124 = icmp slt i32 %75, %76, !dbg !6417
  br i1 %cmp124, label %cond.true126, label %cond.false127, !dbg !6417

cond.true126:                                     ; preds = %if.then116
  %77 = load i32, i32* %ret, align 4, !dbg !6417
  br label %cond.end128, !dbg !6417

cond.false127:                                    ; preds = %if.then116
  %78 = load i32, i32* %tret, align 4, !dbg !6417
  br label %cond.end128, !dbg !6417

cond.end128:                                      ; preds = %cond.false127, %cond.true126
  %cond129 = phi i32 [ %77, %cond.true126 ], [ %78, %cond.false127 ], !dbg !6417
  store i32 %cond129, i32* %ret, align 4, !dbg !6418
  br label %if.end130, !dbg !6419

if.end130:                                        ; preds = %cond.end128, %if.then103
  br label %if.end131, !dbg !6420

if.end131:                                        ; preds = %if.end130, %if.end98
  br label %if.end176, !dbg !6421

if.else132:                                       ; preds = %lor.lhs.false68
  %79 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6422
  %base133 = bitcast %union.tree_node* %79 to %struct.tree_base*, !dbg !6422
  %80 = bitcast %struct.tree_base* %base133 to i64*, !dbg !6422
  %bf.load134 = load i64, i64* %80, align 8, !dbg !6422
  %bf.clear135 = and i64 %bf.load134, 65535, !dbg !6422
  %bf.cast136 = trunc i64 %bf.clear135 to i32, !dbg !6422
  %cmp137 = icmp eq i32 %bf.cast136, 41, !dbg !6424
  br i1 %cmp137, label %if.then139, label %if.end175, !dbg !6425

if.then139:                                       ; preds = %if.else132
  %81 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6426
  %exp140 = bitcast %union.tree_node* %81 to %struct.tree_exp*, !dbg !6426
  %operands141 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp140, i32 0, i32 3, !dbg !6426
  %arrayidx142 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands141, i64 0, i64 2, !dbg !6426
  %82 = load %union.tree_node*, %union.tree_node** %arrayidx142, align 8, !dbg !6426
  %tobool143 = icmp ne %union.tree_node* %82, null, !dbg !6426
  br i1 %tobool143, label %if.end174, label %if.then144, !dbg !6429

if.then144:                                       ; preds = %if.then139
  call void @llvm.dbg.declare(metadata %union.tree_node** %offset, metadata !6430, metadata !DIExpression()), !dbg !6432
  %83 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6433
  %call145 = call %union.tree_node* @component_ref_field_offset(%union.tree_node* %83), !dbg !6434
  %call146 = call %union.tree_node* @unshare_expr(%union.tree_node* %call145), !dbg !6435
  store %union.tree_node* %call146, %union.tree_node** %offset, align 8, !dbg !6432
  call void @llvm.dbg.declare(metadata %union.tree_node** %field, metadata !6436, metadata !DIExpression()), !dbg !6437
  %84 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6438
  %exp147 = bitcast %union.tree_node* %84 to %struct.tree_exp*, !dbg !6438
  %operands148 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp147, i32 0, i32 3, !dbg !6438
  %arrayidx149 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands148, i64 0, i64 1, !dbg !6438
  %85 = load %union.tree_node*, %union.tree_node** %arrayidx149, align 8, !dbg !6438
  store %union.tree_node* %85, %union.tree_node** %field, align 8, !dbg !6437
  call void @llvm.dbg.declare(metadata %union.tree_node** %factor150, metadata !6439, metadata !DIExpression()), !dbg !6440
  %86 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !6441
  %decl_common = bitcast %union.tree_node* %86 to %struct.tree_decl_common*, !dbg !6441
  %off_align = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !6441
  %87 = bitcast i40* %off_align to i64*, !dbg !6441
  %bf.load151 = load i64, i64* %87, align 8, !dbg !6441
  %bf.lshr = lshr i64 %bf.load151, 32, !dbg !6441
  %bf.clear152 = and i64 %bf.lshr, 255, !dbg !6441
  %bf.cast153 = trunc i64 %bf.clear152 to i32, !dbg !6441
  %sh_prom = zext i32 %bf.cast153 to i64, !dbg !6441
  %shl = shl i64 1, %sh_prom, !dbg !6441
  %div154 = udiv i64 %shl, 8, !dbg !6441
  %call155 = call %union.tree_node* @size_int_kind(i64 %div154, i32 0), !dbg !6441
  store %union.tree_node* %call155, %union.tree_node** %factor150, align 8, !dbg !6440
  %88 = load i32, i32* %loc, align 4, !dbg !6442
  %89 = load %union.tree_node*, %union.tree_node** %offset, align 8, !dbg !6443
  %90 = load %union.tree_node*, %union.tree_node** %factor150, align 8, !dbg !6444
  %call156 = call %union.tree_node* @size_binop_loc(i32 %88, i32 76, %union.tree_node* %89, %union.tree_node* %90), !dbg !6445
  store %union.tree_node* %call156, %union.tree_node** %offset, align 8, !dbg !6446
  %91 = load %union.tree_node*, %union.tree_node** %offset, align 8, !dbg !6447
  %call157 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %91), !dbg !6449
  %tobool158 = icmp ne i8 %call157, 0, !dbg !6449
  br i1 %tobool158, label %if.end173, label %if.then159, !dbg !6450

if.then159:                                       ; preds = %if.then144
  %92 = load %union.tree_node*, %union.tree_node** %offset, align 8, !dbg !6451
  %93 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6453
  %exp160 = bitcast %union.tree_node* %93 to %struct.tree_exp*, !dbg !6453
  %operands161 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp160, i32 0, i32 3, !dbg !6453
  %arrayidx162 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands161, i64 0, i64 2, !dbg !6453
  store %union.tree_node* %92, %union.tree_node** %arrayidx162, align 8, !dbg !6454
  %94 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6455
  %exp163 = bitcast %union.tree_node* %94 to %struct.tree_exp*, !dbg !6455
  %operands164 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp163, i32 0, i32 3, !dbg !6455
  %arrayidx165 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands164, i64 0, i64 2, !dbg !6455
  %95 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !6456
  %96 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !6457
  %call166 = call i32 @gimplify_expr(%union.tree_node** %arrayidx165, %struct.gimple_seq_d** %95, %struct.gimple_seq_d** %96, i8 (%union.tree_node*)* @is_gimple_reg, i32 1), !dbg !6458
  store i32 %call166, i32* %tret, align 4, !dbg !6459
  %97 = load i32, i32* %ret, align 4, !dbg !6460
  %98 = load i32, i32* %tret, align 4, !dbg !6460
  %cmp167 = icmp slt i32 %97, %98, !dbg !6460
  br i1 %cmp167, label %cond.true169, label %cond.false170, !dbg !6460

cond.true169:                                     ; preds = %if.then159
  %99 = load i32, i32* %ret, align 4, !dbg !6460
  br label %cond.end171, !dbg !6460

cond.false170:                                    ; preds = %if.then159
  %100 = load i32, i32* %tret, align 4, !dbg !6460
  br label %cond.end171, !dbg !6460

cond.end171:                                      ; preds = %cond.false170, %cond.true169
  %cond172 = phi i32 [ %99, %cond.true169 ], [ %100, %cond.false170 ], !dbg !6460
  store i32 %cond172, i32* %ret, align 4, !dbg !6461
  br label %if.end173, !dbg !6462

if.end173:                                        ; preds = %cond.end171, %if.then144
  br label %if.end174, !dbg !6463

if.end174:                                        ; preds = %if.end173, %if.then139
  br label %if.end175, !dbg !6464

if.end175:                                        ; preds = %if.end174, %if.else132
  br label %if.end176

if.end176:                                        ; preds = %if.end175, %if.end131
  br label %for.inc177, !dbg !6465

for.inc177:                                       ; preds = %if.end176
  %101 = load i32, i32* %i, align 4, !dbg !6466
  %dec = add nsw i32 %101, -1, !dbg !6466
  store i32 %dec, i32* %i, align 4, !dbg !6466
  br label %for.cond54, !dbg !6467, !llvm.loop !6468

for.end178:                                       ; preds = %for.cond54
  %102 = load %union.tree_node**, %union.tree_node*** %p, align 8, !dbg !6470
  %103 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !6471
  %104 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !6472
  %105 = load i32, i32* %fallback.addr, align 4, !dbg !6473
  %or = or i32 %105, 2, !dbg !6474
  %call179 = call i32 @gimplify_expr(%union.tree_node** %102, %struct.gimple_seq_d** %103, %struct.gimple_seq_d** %104, i8 (%union.tree_node*)* @is_gimple_min_lval, i32 %or), !dbg !6475
  store i32 %call179, i32* %tret, align 4, !dbg !6476
  %106 = load i32, i32* %ret, align 4, !dbg !6477
  %107 = load i32, i32* %tret, align 4, !dbg !6477
  %cmp180 = icmp slt i32 %106, %107, !dbg !6477
  br i1 %cmp180, label %cond.true182, label %cond.false183, !dbg !6477

cond.true182:                                     ; preds = %for.end178
  %108 = load i32, i32* %ret, align 4, !dbg !6477
  br label %cond.end184, !dbg !6477

cond.false183:                                    ; preds = %for.end178
  %109 = load i32, i32* %tret, align 4, !dbg !6477
  br label %cond.end184, !dbg !6477

cond.end184:                                      ; preds = %cond.false183, %cond.true182
  %cond185 = phi i32 [ %108, %cond.true182 ], [ %109, %cond.false183 ], !dbg !6477
  store i32 %cond185, i32* %ret, align 4, !dbg !6478
  br label %for.cond186, !dbg !6479

for.cond186:                                      ; preds = %if.end265, %cond.end184
  %110 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %stack, align 8, !dbg !6480
  %tobool187 = icmp ne %struct.VEC_tree_heap* %110, null, !dbg !6480
  br i1 %tobool187, label %cond.true188, label %cond.false190, !dbg !6480

cond.true188:                                     ; preds = %for.cond186
  %111 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %stack, align 8, !dbg !6480
  %base189 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %111, i32 0, i32 0, !dbg !6480
  br label %cond.end191, !dbg !6480

cond.false190:                                    ; preds = %for.cond186
  br label %cond.end191, !dbg !6480

cond.end191:                                      ; preds = %cond.false190, %cond.true188
  %cond192 = phi %struct.VEC_tree_base* [ %base189, %cond.true188 ], [ null, %cond.false190 ], !dbg !6480
  %call193 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond192), !dbg !6480
  %cmp194 = icmp ugt i32 %call193, 0, !dbg !6483
  br i1 %cmp194, label %for.body196, label %for.end273, !dbg !6484

for.body196:                                      ; preds = %cond.end191
  call void @llvm.dbg.declare(metadata %union.tree_node** %t197, metadata !6485, metadata !DIExpression()), !dbg !6487
  %112 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %stack, align 8, !dbg !6488
  %tobool198 = icmp ne %struct.VEC_tree_heap* %112, null, !dbg !6488
  br i1 %tobool198, label %cond.true199, label %cond.false201, !dbg !6488

cond.true199:                                     ; preds = %for.body196
  %113 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %stack, align 8, !dbg !6488
  %base200 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %113, i32 0, i32 0, !dbg !6488
  br label %cond.end202, !dbg !6488

cond.false201:                                    ; preds = %for.body196
  br label %cond.end202, !dbg !6488

cond.end202:                                      ; preds = %cond.false201, %cond.true199
  %cond203 = phi %struct.VEC_tree_base* [ %base200, %cond.true199 ], [ null, %cond.false201 ], !dbg !6488
  %call204 = call %union.tree_node* @VEC_tree_base_pop(%struct.VEC_tree_base* %cond203), !dbg !6488
  store %union.tree_node* %call204, %union.tree_node** %t197, align 8, !dbg !6487
  %114 = load %union.tree_node*, %union.tree_node** %t197, align 8, !dbg !6489
  %base205 = bitcast %union.tree_node* %114 to %struct.tree_base*, !dbg !6489
  %115 = bitcast %struct.tree_base* %base205 to i64*, !dbg !6489
  %bf.load206 = load i64, i64* %115, align 8, !dbg !6489
  %bf.clear207 = and i64 %bf.load206, 65535, !dbg !6489
  %bf.cast208 = trunc i64 %bf.clear207 to i32, !dbg !6489
  %cmp209 = icmp eq i32 %bf.cast208, 45, !dbg !6491
  br i1 %cmp209, label %if.then218, label %lor.lhs.false211, !dbg !6492

lor.lhs.false211:                                 ; preds = %cond.end202
  %116 = load %union.tree_node*, %union.tree_node** %t197, align 8, !dbg !6493
  %base212 = bitcast %union.tree_node* %116 to %struct.tree_base*, !dbg !6493
  %117 = bitcast %struct.tree_base* %base212 to i64*, !dbg !6493
  %bf.load213 = load i64, i64* %117, align 8, !dbg !6493
  %bf.clear214 = and i64 %bf.load213, 65535, !dbg !6493
  %bf.cast215 = trunc i64 %bf.clear214 to i32, !dbg !6493
  %cmp216 = icmp eq i32 %bf.cast215, 46, !dbg !6494
  br i1 %cmp216, label %if.then218, label %if.else236, !dbg !6495

if.then218:                                       ; preds = %lor.lhs.false211, %cond.end202
  %118 = load %union.tree_node*, %union.tree_node** %t197, align 8, !dbg !6496
  %exp219 = bitcast %union.tree_node* %118 to %struct.tree_exp*, !dbg !6496
  %operands220 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp219, i32 0, i32 3, !dbg !6496
  %arrayidx221 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands220, i64 0, i64 1, !dbg !6496
  %119 = load %union.tree_node*, %union.tree_node** %arrayidx221, align 8, !dbg !6496
  %call222 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %119), !dbg !6499
  %tobool223 = icmp ne i8 %call222, 0, !dbg !6499
  br i1 %tobool223, label %if.end235, label %if.then224, !dbg !6500

if.then224:                                       ; preds = %if.then218
  %120 = load %union.tree_node*, %union.tree_node** %t197, align 8, !dbg !6501
  %exp225 = bitcast %union.tree_node* %120 to %struct.tree_exp*, !dbg !6501
  %operands226 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp225, i32 0, i32 3, !dbg !6501
  %arrayidx227 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands226, i64 0, i64 1, !dbg !6501
  %121 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !6503
  %122 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !6504
  %call228 = call i32 @gimplify_expr(%union.tree_node** %arrayidx227, %struct.gimple_seq_d** %121, %struct.gimple_seq_d** %122, i8 (%union.tree_node*)* @is_gimple_val, i32 1), !dbg !6505
  store i32 %call228, i32* %tret, align 4, !dbg !6506
  %123 = load i32, i32* %ret, align 4, !dbg !6507
  %124 = load i32, i32* %tret, align 4, !dbg !6507
  %cmp229 = icmp slt i32 %123, %124, !dbg !6507
  br i1 %cmp229, label %cond.true231, label %cond.false232, !dbg !6507

cond.true231:                                     ; preds = %if.then224
  %125 = load i32, i32* %ret, align 4, !dbg !6507
  br label %cond.end233, !dbg !6507

cond.false232:                                    ; preds = %if.then224
  %126 = load i32, i32* %tret, align 4, !dbg !6507
  br label %cond.end233, !dbg !6507

cond.end233:                                      ; preds = %cond.false232, %cond.true231
  %cond234 = phi i32 [ %125, %cond.true231 ], [ %126, %cond.false232 ], !dbg !6507
  store i32 %cond234, i32* %ret, align 4, !dbg !6508
  br label %if.end235, !dbg !6509

if.end235:                                        ; preds = %cond.end233, %if.then218
  br label %if.end265, !dbg !6510

if.else236:                                       ; preds = %lor.lhs.false211
  %127 = load %union.tree_node*, %union.tree_node** %t197, align 8, !dbg !6511
  %base237 = bitcast %union.tree_node* %127 to %struct.tree_base*, !dbg !6511
  %128 = bitcast %struct.tree_base* %base237 to i64*, !dbg !6511
  %bf.load238 = load i64, i64* %128, align 8, !dbg !6511
  %bf.clear239 = and i64 %bf.load238, 65535, !dbg !6511
  %bf.cast240 = trunc i64 %bf.clear239 to i32, !dbg !6511
  %cmp241 = icmp eq i32 %bf.cast240, 42, !dbg !6513
  br i1 %cmp241, label %if.then243, label %if.end264, !dbg !6514

if.then243:                                       ; preds = %if.else236
  %129 = load %union.tree_node*, %union.tree_node** %t197, align 8, !dbg !6515
  %exp244 = bitcast %union.tree_node* %129 to %struct.tree_exp*, !dbg !6515
  %operands245 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp244, i32 0, i32 3, !dbg !6515
  %arrayidx246 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands245, i64 0, i64 1, !dbg !6515
  %130 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !6517
  %131 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !6518
  %call247 = call i32 @gimplify_expr(%union.tree_node** %arrayidx246, %struct.gimple_seq_d** %130, %struct.gimple_seq_d** %131, i8 (%union.tree_node*)* @is_gimple_val, i32 1), !dbg !6519
  store i32 %call247, i32* %tret, align 4, !dbg !6520
  %132 = load i32, i32* %ret, align 4, !dbg !6521
  %133 = load i32, i32* %tret, align 4, !dbg !6521
  %cmp248 = icmp slt i32 %132, %133, !dbg !6521
  br i1 %cmp248, label %cond.true250, label %cond.false251, !dbg !6521

cond.true250:                                     ; preds = %if.then243
  %134 = load i32, i32* %ret, align 4, !dbg !6521
  br label %cond.end252, !dbg !6521

cond.false251:                                    ; preds = %if.then243
  %135 = load i32, i32* %tret, align 4, !dbg !6521
  br label %cond.end252, !dbg !6521

cond.end252:                                      ; preds = %cond.false251, %cond.true250
  %cond253 = phi i32 [ %134, %cond.true250 ], [ %135, %cond.false251 ], !dbg !6521
  store i32 %cond253, i32* %ret, align 4, !dbg !6522
  %136 = load %union.tree_node*, %union.tree_node** %t197, align 8, !dbg !6523
  %exp254 = bitcast %union.tree_node* %136 to %struct.tree_exp*, !dbg !6523
  %operands255 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp254, i32 0, i32 3, !dbg !6523
  %arrayidx256 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands255, i64 0, i64 2, !dbg !6523
  %137 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !6524
  %138 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !6525
  %call257 = call i32 @gimplify_expr(%union.tree_node** %arrayidx256, %struct.gimple_seq_d** %137, %struct.gimple_seq_d** %138, i8 (%union.tree_node*)* @is_gimple_val, i32 1), !dbg !6526
  store i32 %call257, i32* %tret, align 4, !dbg !6527
  %139 = load i32, i32* %ret, align 4, !dbg !6528
  %140 = load i32, i32* %tret, align 4, !dbg !6528
  %cmp258 = icmp slt i32 %139, %140, !dbg !6528
  br i1 %cmp258, label %cond.true260, label %cond.false261, !dbg !6528

cond.true260:                                     ; preds = %cond.end252
  %141 = load i32, i32* %ret, align 4, !dbg !6528
  br label %cond.end262, !dbg !6528

cond.false261:                                    ; preds = %cond.end252
  %142 = load i32, i32* %tret, align 4, !dbg !6528
  br label %cond.end262, !dbg !6528

cond.end262:                                      ; preds = %cond.false261, %cond.true260
  %cond263 = phi i32 [ %141, %cond.true260 ], [ %142, %cond.false261 ], !dbg !6528
  store i32 %cond263, i32* %ret, align 4, !dbg !6529
  br label %if.end264, !dbg !6530

if.end264:                                        ; preds = %cond.end262, %if.else236
  br label %if.end265

if.end265:                                        ; preds = %if.end264, %if.end235
  %143 = load %union.tree_node*, %union.tree_node** %t197, align 8, !dbg !6531
  %exp266 = bitcast %union.tree_node* %143 to %struct.tree_exp*, !dbg !6531
  %operands267 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp266, i32 0, i32 3, !dbg !6531
  %arrayidx268 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands267, i64 0, i64 0, !dbg !6531
  %144 = load %union.tree_node*, %union.tree_node** %arrayidx268, align 8, !dbg !6531
  %call269 = call %union.tree_node* @tree_ssa_strip_useless_type_conversions(%union.tree_node* %144), !dbg !6531
  %145 = load %union.tree_node*, %union.tree_node** %t197, align 8, !dbg !6531
  %exp270 = bitcast %union.tree_node* %145 to %struct.tree_exp*, !dbg !6531
  %operands271 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp270, i32 0, i32 3, !dbg !6531
  %arrayidx272 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands271, i64 0, i64 0, !dbg !6531
  store %union.tree_node* %call269, %union.tree_node** %arrayidx272, align 8, !dbg !6531
  %146 = load %union.tree_node*, %union.tree_node** %t197, align 8, !dbg !6532
  call void @recalculate_side_effects(%union.tree_node* %146), !dbg !6533
  br label %for.cond186, !dbg !6534, !llvm.loop !6535

for.end273:                                       ; preds = %cond.end191
  %147 = load i32, i32* %fallback.addr, align 4, !dbg !6537
  %and = and i32 %147, 1, !dbg !6539
  %tobool274 = icmp ne i32 %and, 0, !dbg !6539
  br i1 %tobool274, label %land.lhs.true275, label %if.end289, !dbg !6540

land.lhs.true275:                                 ; preds = %for.end273
  %148 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !6541
  %149 = load %union.tree_node*, %union.tree_node** %148, align 8, !dbg !6541
  %base276 = bitcast %union.tree_node* %149 to %struct.tree_base*, !dbg !6541
  %150 = bitcast %struct.tree_base* %base276 to i64*, !dbg !6541
  %bf.load277 = load i64, i64* %150, align 8, !dbg !6541
  %bf.clear278 = and i64 %bf.load277, 65535, !dbg !6541
  %bf.cast279 = trunc i64 %bf.clear278 to i32, !dbg !6541
  %cmp280 = icmp eq i32 %bf.cast279, 41, !dbg !6542
  br i1 %cmp280, label %if.then282, label %if.end289, !dbg !6543

if.then282:                                       ; preds = %land.lhs.true275
  %151 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !6544
  call void @canonicalize_component_ref(%union.tree_node** %151), !dbg !6546
  %152 = load i32, i32* %ret, align 4, !dbg !6547
  %cmp283 = icmp slt i32 %152, 0, !dbg !6547
  br i1 %cmp283, label %cond.true285, label %cond.false286, !dbg !6547

cond.true285:                                     ; preds = %if.then282
  %153 = load i32, i32* %ret, align 4, !dbg !6547
  br label %cond.end287, !dbg !6547

cond.false286:                                    ; preds = %if.then282
  br label %cond.end287, !dbg !6547

cond.end287:                                      ; preds = %cond.false286, %cond.true285
  %cond288 = phi i32 [ %153, %cond.true285 ], [ 0, %cond.false286 ], !dbg !6547
  store i32 %cond288, i32* %ret, align 4, !dbg !6548
  br label %if.end289, !dbg !6549

if.end289:                                        ; preds = %cond.end287, %land.lhs.true275, %for.end273
  call void @VEC_tree_heap_free(%struct.VEC_tree_heap** %stack), !dbg !6550
  %154 = load i32, i32* %ret, align 4, !dbg !6551
  ret i32 %154, !dbg !6552
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimplify_cond_expr(%union.tree_node** %expr_p, %struct.gimple_seq_d** %pre_p, i32 %fallback) #0 !dbg !6553 {
entry:
  %retval = alloca i32, align 4
  %expr_p.addr = alloca %union.tree_node**, align 8
  %pre_p.addr = alloca %struct.gimple_seq_d**, align 8
  %fallback.addr = alloca i32, align 4
  %expr = alloca %union.tree_node*, align 8
  %tmp = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  %arm1 = alloca %union.tree_node*, align 8
  %arm2 = alloca %union.tree_node*, align 8
  %ret = alloca i32, align 4
  %label_true = alloca %union.tree_node*, align 8
  %label_false = alloca %union.tree_node*, align 8
  %label_cont = alloca %union.tree_node*, align 8
  %have_then_clause_p = alloca i8, align 1
  %have_else_clause_p = alloca i8, align 1
  %gimple_cond = alloca %union.gimple_statement_d*, align 8
  %pred_code = alloca i32, align 4
  %seq = alloca %struct.gimple_seq_d*, align 8
  %loc = alloca i32, align 4
  %result = alloca %union.tree_node*, align 8
  %type59 = alloca %union.tree_node*, align 8
  %g = alloca %union.gimple_statement_d*, align 8
  store %union.tree_node** %expr_p, %union.tree_node*** %expr_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %expr_p.addr, metadata !6556, metadata !DIExpression()), !dbg !6557
  store %struct.gimple_seq_d** %pre_p, %struct.gimple_seq_d*** %pre_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %pre_p.addr, metadata !6558, metadata !DIExpression()), !dbg !6559
  store i32 %fallback, i32* %fallback.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fallback.addr, metadata !6560, metadata !DIExpression()), !dbg !6561
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr, metadata !6562, metadata !DIExpression()), !dbg !6563
  %0 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !6564
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !6565
  store %union.tree_node* %1, %union.tree_node** %expr, align 8, !dbg !6563
  call void @llvm.dbg.declare(metadata %union.tree_node** %tmp, metadata !6566, metadata !DIExpression()), !dbg !6567
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !6568, metadata !DIExpression()), !dbg !6569
  call void @llvm.dbg.declare(metadata %union.tree_node** %arm1, metadata !6570, metadata !DIExpression()), !dbg !6571
  call void @llvm.dbg.declare(metadata %union.tree_node** %arm2, metadata !6572, metadata !DIExpression()), !dbg !6573
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !6574, metadata !DIExpression()), !dbg !6575
  call void @llvm.dbg.declare(metadata %union.tree_node** %label_true, metadata !6576, metadata !DIExpression()), !dbg !6577
  call void @llvm.dbg.declare(metadata %union.tree_node** %label_false, metadata !6578, metadata !DIExpression()), !dbg !6579
  call void @llvm.dbg.declare(metadata %union.tree_node** %label_cont, metadata !6580, metadata !DIExpression()), !dbg !6581
  call void @llvm.dbg.declare(metadata i8* %have_then_clause_p, metadata !6582, metadata !DIExpression()), !dbg !6583
  call void @llvm.dbg.declare(metadata i8* %have_else_clause_p, metadata !6584, metadata !DIExpression()), !dbg !6585
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gimple_cond, metadata !6586, metadata !DIExpression()), !dbg !6587
  call void @llvm.dbg.declare(metadata i32* %pred_code, metadata !6588, metadata !DIExpression()), !dbg !6589
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !6590, metadata !DIExpression()), !dbg !6591
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %seq, align 8, !dbg !6591
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !6592, metadata !DIExpression()), !dbg !6593
  %2 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !6594
  %3 = load %union.tree_node*, %union.tree_node** %2, align 8, !dbg !6594
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !6594
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !6594
  %bf.load = load i64, i64* %4, align 8, !dbg !6594
  %bf.clear = and i64 %bf.load, 65535, !dbg !6594
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6594
  %idxprom = sext i32 %bf.cast to i64, !dbg !6594
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !6594
  %5 = load i32, i32* %arrayidx, align 4, !dbg !6594
  %cmp = icmp uge i32 %5, 4, !dbg !6594
  br i1 %cmp, label %land.lhs.true, label %cond.false, !dbg !6594

land.lhs.true:                                    ; preds = %entry
  %6 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !6594
  %7 = load %union.tree_node*, %union.tree_node** %6, align 8, !dbg !6594
  %base1 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !6594
  %8 = bitcast %struct.tree_base* %base1 to i64*, !dbg !6594
  %bf.load2 = load i64, i64* %8, align 8, !dbg !6594
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !6594
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !6594
  %idxprom5 = sext i32 %bf.cast4 to i64, !dbg !6594
  %arrayidx6 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom5, !dbg !6594
  %9 = load i32, i32* %arrayidx6, align 4, !dbg !6594
  %cmp7 = icmp ule i32 %9, 10, !dbg !6594
  br i1 %cmp7, label %cond.true, label %cond.false, !dbg !6594

cond.true:                                        ; preds = %land.lhs.true
  %10 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !6594
  %11 = load %union.tree_node*, %union.tree_node** %10, align 8, !dbg !6594
  %exp = bitcast %union.tree_node* %11 to %struct.tree_exp*, !dbg !6594
  %locus = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 1, !dbg !6594
  %12 = load i32, i32* %locus, align 8, !dbg !6594
  br label %cond.end, !dbg !6594

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !6594

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %12, %cond.true ], [ 0, %cond.false ], !dbg !6594
  store i32 %cond, i32* %loc, align 4, !dbg !6593
  %13 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6595
  %common = bitcast %union.tree_node* %13 to %struct.tree_common*, !dbg !6595
  %type8 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6595
  %14 = load %union.tree_node*, %union.tree_node** %type8, align 8, !dbg !6595
  store %union.tree_node* %14, %union.tree_node** %type, align 8, !dbg !6596
  %15 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6597
  %base9 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !6597
  %16 = bitcast %struct.tree_base* %base9 to i64*, !dbg !6597
  %bf.load10 = load i64, i64* %16, align 8, !dbg !6597
  %bf.clear11 = and i64 %bf.load10, 65535, !dbg !6597
  %bf.cast12 = trunc i64 %bf.clear11 to i32, !dbg !6597
  %cmp13 = icmp eq i32 %bf.cast12, 19, !dbg !6597
  br i1 %cmp13, label %if.end147, label %if.then, !dbg !6599

if.then:                                          ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %result, metadata !6600, metadata !DIExpression()), !dbg !6602
  %17 = load i32, i32* %fallback.addr, align 4, !dbg !6603
  %and = and i32 %17, 1, !dbg !6605
  %tobool = icmp ne i32 %and, 0, !dbg !6605
  br i1 %tobool, label %land.lhs.true16, label %lor.lhs.false, !dbg !6606

lor.lhs.false:                                    ; preds = %if.then
  %18 = load i32, i32* %fallback.addr, align 4, !dbg !6607
  %and14 = and i32 %18, 2, !dbg !6608
  %tobool15 = icmp ne i32 %and14, 0, !dbg !6608
  br i1 %tobool15, label %if.else, label %land.lhs.true16, !dbg !6609

land.lhs.true16:                                  ; preds = %lor.lhs.false, %if.then
  %19 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6610
  %base17 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !6610
  %20 = bitcast %struct.tree_base* %base17 to i64*, !dbg !6610
  %bf.load18 = load i64, i64* %20, align 8, !dbg !6610
  %bf.lshr = lshr i64 %bf.load18, 18, !dbg !6610
  %bf.clear19 = and i64 %bf.lshr, 1, !dbg !6610
  %bf.cast20 = trunc i64 %bf.clear19 to i32, !dbg !6610
  %tobool21 = icmp ne i32 %bf.cast20, 0, !dbg !6610
  br i1 %tobool21, label %if.else, label %if.then22, !dbg !6611

if.then22:                                        ; preds = %land.lhs.true16
  %21 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !6612
  %allow_rhs_cond_expr = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %21, i32 0, i32 11, !dbg !6615
  %22 = load i8, i8* %allow_rhs_cond_expr, align 2, !dbg !6615
  %conv = zext i8 %22 to i32, !dbg !6612
  %tobool23 = icmp ne i32 %conv, 0, !dbg !6612
  br i1 %tobool23, label %land.lhs.true24, label %if.end, !dbg !6616

land.lhs.true24:                                  ; preds = %if.then22
  %23 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !6617
  %24 = load %union.tree_node*, %union.tree_node** %23, align 8, !dbg !6617
  %exp25 = bitcast %union.tree_node* %24 to %struct.tree_exp*, !dbg !6617
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp25, i32 0, i32 3, !dbg !6617
  %arrayidx26 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !6617
  %25 = load %union.tree_node*, %union.tree_node** %arrayidx26, align 8, !dbg !6617
  %base27 = bitcast %union.tree_node* %25 to %struct.tree_base*, !dbg !6617
  %26 = bitcast %struct.tree_base* %base27 to i64*, !dbg !6617
  %bf.load28 = load i64, i64* %26, align 8, !dbg !6617
  %bf.lshr29 = lshr i64 %bf.load28, 16, !dbg !6617
  %bf.clear30 = and i64 %bf.lshr29, 1, !dbg !6617
  %bf.cast31 = trunc i64 %bf.clear30 to i32, !dbg !6617
  %tobool32 = icmp ne i32 %bf.cast31, 0, !dbg !6617
  br i1 %tobool32, label %if.end, label %land.lhs.true33, !dbg !6618

land.lhs.true33:                                  ; preds = %land.lhs.true24
  %27 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !6619
  %28 = load %union.tree_node*, %union.tree_node** %27, align 8, !dbg !6619
  %exp34 = bitcast %union.tree_node* %28 to %struct.tree_exp*, !dbg !6619
  %operands35 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp34, i32 0, i32 3, !dbg !6619
  %arrayidx36 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands35, i64 0, i64 1, !dbg !6619
  %29 = load %union.tree_node*, %union.tree_node** %arrayidx36, align 8, !dbg !6619
  %call = call zeroext i8 @generic_expr_could_trap_p(%union.tree_node* %29), !dbg !6620
  %tobool37 = icmp ne i8 %call, 0, !dbg !6620
  br i1 %tobool37, label %if.end, label %land.lhs.true38, !dbg !6621

land.lhs.true38:                                  ; preds = %land.lhs.true33
  %30 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !6622
  %31 = load %union.tree_node*, %union.tree_node** %30, align 8, !dbg !6622
  %exp39 = bitcast %union.tree_node* %31 to %struct.tree_exp*, !dbg !6622
  %operands40 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp39, i32 0, i32 3, !dbg !6622
  %arrayidx41 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands40, i64 0, i64 2, !dbg !6622
  %32 = load %union.tree_node*, %union.tree_node** %arrayidx41, align 8, !dbg !6622
  %base42 = bitcast %union.tree_node* %32 to %struct.tree_base*, !dbg !6622
  %33 = bitcast %struct.tree_base* %base42 to i64*, !dbg !6622
  %bf.load43 = load i64, i64* %33, align 8, !dbg !6622
  %bf.lshr44 = lshr i64 %bf.load43, 16, !dbg !6622
  %bf.clear45 = and i64 %bf.lshr44, 1, !dbg !6622
  %bf.cast46 = trunc i64 %bf.clear45 to i32, !dbg !6622
  %tobool47 = icmp ne i32 %bf.cast46, 0, !dbg !6622
  br i1 %tobool47, label %if.end, label %land.lhs.true48, !dbg !6623

land.lhs.true48:                                  ; preds = %land.lhs.true38
  %34 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !6624
  %35 = load %union.tree_node*, %union.tree_node** %34, align 8, !dbg !6624
  %exp49 = bitcast %union.tree_node* %35 to %struct.tree_exp*, !dbg !6624
  %operands50 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp49, i32 0, i32 3, !dbg !6624
  %arrayidx51 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands50, i64 0, i64 2, !dbg !6624
  %36 = load %union.tree_node*, %union.tree_node** %arrayidx51, align 8, !dbg !6624
  %call52 = call zeroext i8 @generic_expr_could_trap_p(%union.tree_node* %36), !dbg !6625
  %tobool53 = icmp ne i8 %call52, 0, !dbg !6625
  br i1 %tobool53, label %if.end, label %if.then54, !dbg !6626

if.then54:                                        ; preds = %land.lhs.true48
  %37 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !6627
  %38 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !6628
  %call55 = call i32 @gimplify_pure_cond_expr(%union.tree_node** %37, %struct.gimple_seq_d** %38), !dbg !6629
  store i32 %call55, i32* %retval, align 4, !dbg !6630
  br label %return, !dbg !6630

if.end:                                           ; preds = %land.lhs.true48, %land.lhs.true38, %land.lhs.true33, %land.lhs.true24, %if.then22
  %39 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6631
  %common56 = bitcast %union.tree_node* %39 to %struct.tree_common*, !dbg !6631
  %type57 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common56, i32 0, i32 2, !dbg !6631
  %40 = load %union.tree_node*, %union.tree_node** %type57, align 8, !dbg !6631
  %call58 = call %union.tree_node* @create_tmp_var(%union.tree_node* %40, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i64 0, i64 0)), !dbg !6632
  store %union.tree_node* %call58, %union.tree_node** %tmp, align 8, !dbg !6633
  store %union.tree_node* %call58, %union.tree_node** %result, align 8, !dbg !6634
  store i32 1, i32* %ret, align 4, !dbg !6635
  br label %if.end107, !dbg !6636

if.else:                                          ; preds = %land.lhs.true16, %lor.lhs.false
  call void @llvm.dbg.declare(metadata %union.tree_node** %type59, metadata !6637, metadata !DIExpression()), !dbg !6639
  %41 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6640
  %common60 = bitcast %union.tree_node* %41 to %struct.tree_common*, !dbg !6640
  %type61 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common60, i32 0, i32 2, !dbg !6640
  %42 = load %union.tree_node*, %union.tree_node** %type61, align 8, !dbg !6640
  %call62 = call %union.tree_node* @build_pointer_type(%union.tree_node* %42), !dbg !6641
  store %union.tree_node* %call62, %union.tree_node** %type59, align 8, !dbg !6639
  %43 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6642
  %exp63 = bitcast %union.tree_node* %43 to %struct.tree_exp*, !dbg !6642
  %operands64 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp63, i32 0, i32 3, !dbg !6642
  %arrayidx65 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands64, i64 0, i64 1, !dbg !6642
  %44 = load %union.tree_node*, %union.tree_node** %arrayidx65, align 8, !dbg !6642
  %common66 = bitcast %union.tree_node* %44 to %struct.tree_common*, !dbg !6642
  %type67 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common66, i32 0, i32 2, !dbg !6642
  %45 = load %union.tree_node*, %union.tree_node** %type67, align 8, !dbg !6642
  %46 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !6644
  %cmp68 = icmp ne %union.tree_node* %45, %46, !dbg !6645
  br i1 %cmp68, label %if.then70, label %if.end78, !dbg !6646

if.then70:                                        ; preds = %if.else
  %47 = load i32, i32* %loc, align 4, !dbg !6647
  %48 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6648
  %exp71 = bitcast %union.tree_node* %48 to %struct.tree_exp*, !dbg !6648
  %operands72 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp71, i32 0, i32 3, !dbg !6648
  %arrayidx73 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands72, i64 0, i64 1, !dbg !6648
  %49 = load %union.tree_node*, %union.tree_node** %arrayidx73, align 8, !dbg !6648
  %call74 = call %union.tree_node* @build_fold_addr_expr_loc(i32 %47, %union.tree_node* %49), !dbg !6649
  %50 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6650
  %exp75 = bitcast %union.tree_node* %50 to %struct.tree_exp*, !dbg !6650
  %operands76 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp75, i32 0, i32 3, !dbg !6650
  %arrayidx77 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands76, i64 0, i64 1, !dbg !6650
  store %union.tree_node* %call74, %union.tree_node** %arrayidx77, align 8, !dbg !6651
  br label %if.end78, !dbg !6650

if.end78:                                         ; preds = %if.then70, %if.else
  %51 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6652
  %exp79 = bitcast %union.tree_node* %51 to %struct.tree_exp*, !dbg !6652
  %operands80 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp79, i32 0, i32 3, !dbg !6652
  %arrayidx81 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands80, i64 0, i64 2, !dbg !6652
  %52 = load %union.tree_node*, %union.tree_node** %arrayidx81, align 8, !dbg !6652
  %common82 = bitcast %union.tree_node* %52 to %struct.tree_common*, !dbg !6652
  %type83 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common82, i32 0, i32 2, !dbg !6652
  %53 = load %union.tree_node*, %union.tree_node** %type83, align 8, !dbg !6652
  %54 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !6654
  %cmp84 = icmp ne %union.tree_node* %53, %54, !dbg !6655
  br i1 %cmp84, label %if.then86, label %if.end94, !dbg !6656

if.then86:                                        ; preds = %if.end78
  %55 = load i32, i32* %loc, align 4, !dbg !6657
  %56 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6658
  %exp87 = bitcast %union.tree_node* %56 to %struct.tree_exp*, !dbg !6658
  %operands88 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp87, i32 0, i32 3, !dbg !6658
  %arrayidx89 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands88, i64 0, i64 2, !dbg !6658
  %57 = load %union.tree_node*, %union.tree_node** %arrayidx89, align 8, !dbg !6658
  %call90 = call %union.tree_node* @build_fold_addr_expr_loc(i32 %55, %union.tree_node* %57), !dbg !6659
  %58 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6660
  %exp91 = bitcast %union.tree_node* %58 to %struct.tree_exp*, !dbg !6660
  %operands92 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp91, i32 0, i32 3, !dbg !6660
  %arrayidx93 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands92, i64 0, i64 2, !dbg !6660
  store %union.tree_node* %call90, %union.tree_node** %arrayidx93, align 8, !dbg !6661
  br label %if.end94, !dbg !6660

if.end94:                                         ; preds = %if.then86, %if.end78
  %59 = load %union.tree_node*, %union.tree_node** %type59, align 8, !dbg !6662
  %call95 = call %union.tree_node* @create_tmp_var(%union.tree_node* %59, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i64 0, i64 0)), !dbg !6663
  store %union.tree_node* %call95, %union.tree_node** %tmp, align 8, !dbg !6664
  %60 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !6665
  %61 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6665
  %exp96 = bitcast %union.tree_node* %61 to %struct.tree_exp*, !dbg !6665
  %operands97 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp96, i32 0, i32 3, !dbg !6665
  %arrayidx98 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands97, i64 0, i64 0, !dbg !6665
  %62 = load %union.tree_node*, %union.tree_node** %arrayidx98, align 8, !dbg !6665
  %63 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6665
  %exp99 = bitcast %union.tree_node* %63 to %struct.tree_exp*, !dbg !6665
  %operands100 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp99, i32 0, i32 3, !dbg !6665
  %arrayidx101 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands100, i64 0, i64 1, !dbg !6665
  %64 = load %union.tree_node*, %union.tree_node** %arrayidx101, align 8, !dbg !6665
  %65 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6665
  %exp102 = bitcast %union.tree_node* %65 to %struct.tree_exp*, !dbg !6665
  %operands103 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp102, i32 0, i32 3, !dbg !6665
  %arrayidx104 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands103, i64 0, i64 2, !dbg !6665
  %66 = load %union.tree_node*, %union.tree_node** %arrayidx104, align 8, !dbg !6665
  %call105 = call %union.tree_node* @build3_stat(i32 56, %union.tree_node* %60, %union.tree_node* %62, %union.tree_node* %64, %union.tree_node* %66), !dbg !6665
  store %union.tree_node* %call105, %union.tree_node** %expr, align 8, !dbg !6666
  %67 = load i32, i32* %loc, align 4, !dbg !6667
  %68 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !6668
  %call106 = call %union.tree_node* @build_fold_indirect_ref_loc(i32 %67, %union.tree_node* %68), !dbg !6669
  store %union.tree_node* %call106, %union.tree_node** %result, align 8, !dbg !6670
  br label %if.end107

if.end107:                                        ; preds = %if.end94, %if.end
  %69 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6671
  %exp108 = bitcast %union.tree_node* %69 to %struct.tree_exp*, !dbg !6671
  %operands109 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp108, i32 0, i32 3, !dbg !6671
  %arrayidx110 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands109, i64 0, i64 1, !dbg !6671
  %70 = load %union.tree_node*, %union.tree_node** %arrayidx110, align 8, !dbg !6671
  %common111 = bitcast %union.tree_node* %70 to %struct.tree_common*, !dbg !6671
  %type112 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common111, i32 0, i32 2, !dbg !6671
  %71 = load %union.tree_node*, %union.tree_node** %type112, align 8, !dbg !6671
  %72 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !6673
  %cmp113 = icmp ne %union.tree_node* %71, %72, !dbg !6674
  br i1 %cmp113, label %if.then115, label %if.end125, !dbg !6675

if.then115:                                       ; preds = %if.end107
  %73 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !6676
  %common116 = bitcast %union.tree_node* %73 to %struct.tree_common*, !dbg !6676
  %type117 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common116, i32 0, i32 2, !dbg !6676
  %74 = load %union.tree_node*, %union.tree_node** %type117, align 8, !dbg !6676
  %75 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !6676
  %76 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6676
  %exp118 = bitcast %union.tree_node* %76 to %struct.tree_exp*, !dbg !6676
  %operands119 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp118, i32 0, i32 3, !dbg !6676
  %arrayidx120 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands119, i64 0, i64 1, !dbg !6676
  %77 = load %union.tree_node*, %union.tree_node** %arrayidx120, align 8, !dbg !6676
  %call121 = call %union.tree_node* @build2_stat(i32 53, %union.tree_node* %74, %union.tree_node* %75, %union.tree_node* %77), !dbg !6676
  %78 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6677
  %exp122 = bitcast %union.tree_node* %78 to %struct.tree_exp*, !dbg !6677
  %operands123 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp122, i32 0, i32 3, !dbg !6677
  %arrayidx124 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands123, i64 0, i64 1, !dbg !6677
  store %union.tree_node* %call121, %union.tree_node** %arrayidx124, align 8, !dbg !6678
  br label %if.end125, !dbg !6677

if.end125:                                        ; preds = %if.then115, %if.end107
  %79 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6679
  %exp126 = bitcast %union.tree_node* %79 to %struct.tree_exp*, !dbg !6679
  %operands127 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp126, i32 0, i32 3, !dbg !6679
  %arrayidx128 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands127, i64 0, i64 2, !dbg !6679
  %80 = load %union.tree_node*, %union.tree_node** %arrayidx128, align 8, !dbg !6679
  %common129 = bitcast %union.tree_node* %80 to %struct.tree_common*, !dbg !6679
  %type130 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common129, i32 0, i32 2, !dbg !6679
  %81 = load %union.tree_node*, %union.tree_node** %type130, align 8, !dbg !6679
  %82 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !6681
  %cmp131 = icmp ne %union.tree_node* %81, %82, !dbg !6682
  br i1 %cmp131, label %if.then133, label %if.end143, !dbg !6683

if.then133:                                       ; preds = %if.end125
  %83 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !6684
  %common134 = bitcast %union.tree_node* %83 to %struct.tree_common*, !dbg !6684
  %type135 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common134, i32 0, i32 2, !dbg !6684
  %84 = load %union.tree_node*, %union.tree_node** %type135, align 8, !dbg !6684
  %85 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !6684
  %86 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6684
  %exp136 = bitcast %union.tree_node* %86 to %struct.tree_exp*, !dbg !6684
  %operands137 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp136, i32 0, i32 3, !dbg !6684
  %arrayidx138 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands137, i64 0, i64 2, !dbg !6684
  %87 = load %union.tree_node*, %union.tree_node** %arrayidx138, align 8, !dbg !6684
  %call139 = call %union.tree_node* @build2_stat(i32 53, %union.tree_node* %84, %union.tree_node* %85, %union.tree_node* %87), !dbg !6684
  %88 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6685
  %exp140 = bitcast %union.tree_node* %88 to %struct.tree_exp*, !dbg !6685
  %operands141 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp140, i32 0, i32 3, !dbg !6685
  %arrayidx142 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands141, i64 0, i64 2, !dbg !6685
  store %union.tree_node* %call139, %union.tree_node** %arrayidx142, align 8, !dbg !6686
  br label %if.end143, !dbg !6685

if.end143:                                        ; preds = %if.then133, %if.end125
  %89 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !6687
  %90 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6688
  %common144 = bitcast %union.tree_node* %90 to %struct.tree_common*, !dbg !6688
  %type145 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common144, i32 0, i32 2, !dbg !6688
  store %union.tree_node* %89, %union.tree_node** %type145, align 8, !dbg !6689
  %91 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6690
  call void @recalculate_side_effects(%union.tree_node* %91), !dbg !6691
  %92 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !6692
  %call146 = call zeroext i8 @gimplify_stmt(%union.tree_node** %expr, %struct.gimple_seq_d** %92), !dbg !6693
  %93 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !6694
  %94 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !6695
  store %union.tree_node* %93, %union.tree_node** %94, align 8, !dbg !6696
  store i32 1, i32* %retval, align 4, !dbg !6697
  br label %return, !dbg !6697

if.end147:                                        ; preds = %cond.end
  %95 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6698
  %exp148 = bitcast %union.tree_node* %95 to %struct.tree_exp*, !dbg !6698
  %operands149 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp148, i32 0, i32 3, !dbg !6698
  %arrayidx150 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands149, i64 0, i64 0, !dbg !6698
  %96 = load %union.tree_node*, %union.tree_node** %arrayidx150, align 8, !dbg !6698
  %call151 = call %union.tree_node* @gimple_boolify(%union.tree_node* %96), !dbg !6699
  %97 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6700
  %exp152 = bitcast %union.tree_node* %97 to %struct.tree_exp*, !dbg !6700
  %operands153 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp152, i32 0, i32 3, !dbg !6700
  %arrayidx154 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands153, i64 0, i64 0, !dbg !6700
  store %union.tree_node* %call151, %union.tree_node** %arrayidx154, align 8, !dbg !6701
  %98 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6702
  %exp155 = bitcast %union.tree_node* %98 to %struct.tree_exp*, !dbg !6702
  %operands156 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp155, i32 0, i32 3, !dbg !6702
  %arrayidx157 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands156, i64 0, i64 0, !dbg !6702
  %99 = load %union.tree_node*, %union.tree_node** %arrayidx157, align 8, !dbg !6702
  %base158 = bitcast %union.tree_node* %99 to %struct.tree_base*, !dbg !6702
  %100 = bitcast %struct.tree_base* %base158 to i64*, !dbg !6702
  %bf.load159 = load i64, i64* %100, align 8, !dbg !6702
  %bf.clear160 = and i64 %bf.load159, 65535, !dbg !6702
  %bf.cast161 = trunc i64 %bf.clear160 to i32, !dbg !6702
  %cmp162 = icmp eq i32 %bf.cast161, 91, !dbg !6704
  br i1 %cmp162, label %if.then174, label %lor.lhs.false164, !dbg !6705

lor.lhs.false164:                                 ; preds = %if.end147
  %101 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6706
  %exp165 = bitcast %union.tree_node* %101 to %struct.tree_exp*, !dbg !6706
  %operands166 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp165, i32 0, i32 3, !dbg !6706
  %arrayidx167 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands166, i64 0, i64 0, !dbg !6706
  %102 = load %union.tree_node*, %union.tree_node** %arrayidx167, align 8, !dbg !6706
  %base168 = bitcast %union.tree_node* %102 to %struct.tree_base*, !dbg !6706
  %103 = bitcast %struct.tree_base* %base168 to i64*, !dbg !6706
  %bf.load169 = load i64, i64* %103, align 8, !dbg !6706
  %bf.clear170 = and i64 %bf.load169, 65535, !dbg !6706
  %bf.cast171 = trunc i64 %bf.clear170 to i32, !dbg !6706
  %cmp172 = icmp eq i32 %bf.cast171, 92, !dbg !6707
  br i1 %cmp172, label %if.then174, label %if.end181, !dbg !6708

if.then174:                                       ; preds = %lor.lhs.false164, %if.end147
  %104 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6709
  %call175 = call %union.tree_node* @shortcut_cond_expr(%union.tree_node* %104), !dbg !6711
  store %union.tree_node* %call175, %union.tree_node** %expr, align 8, !dbg !6712
  %105 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6713
  %106 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !6715
  %107 = load %union.tree_node*, %union.tree_node** %106, align 8, !dbg !6716
  %cmp176 = icmp ne %union.tree_node* %105, %107, !dbg !6717
  br i1 %cmp176, label %if.then178, label %if.end180, !dbg !6718

if.then178:                                       ; preds = %if.then174
  %108 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6719
  %109 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !6721
  store %union.tree_node* %108, %union.tree_node** %109, align 8, !dbg !6722
  call void @gimple_push_condition(), !dbg !6723
  %110 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !6724
  %call179 = call zeroext i8 @gimplify_stmt(%union.tree_node** %110, %struct.gimple_seq_d** %seq), !dbg !6725
  %111 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !6726
  call void @gimple_pop_condition(%struct.gimple_seq_d** %111), !dbg !6727
  %112 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !6728
  %113 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !6729
  call void @gimple_seq_add_seq(%struct.gimple_seq_d** %112, %struct.gimple_seq_d* %113), !dbg !6730
  store i32 1, i32* %retval, align 4, !dbg !6731
  br label %return, !dbg !6731

if.end180:                                        ; preds = %if.then174
  br label %if.end181, !dbg !6732

if.end181:                                        ; preds = %if.end180, %lor.lhs.false164
  %114 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6733
  %exp182 = bitcast %union.tree_node* %114 to %struct.tree_exp*, !dbg !6733
  %operands183 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp182, i32 0, i32 3, !dbg !6733
  %arrayidx184 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands183, i64 0, i64 0, !dbg !6733
  %115 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !6734
  %call185 = call i32 @gimplify_expr(%union.tree_node** %arrayidx184, %struct.gimple_seq_d** %115, %struct.gimple_seq_d** null, i8 (%union.tree_node*)* @is_gimple_condexpr, i32 1), !dbg !6735
  store i32 %call185, i32* %ret, align 4, !dbg !6736
  %116 = load i32, i32* %ret, align 4, !dbg !6737
  %cmp186 = icmp eq i32 %116, -2, !dbg !6739
  br i1 %cmp186, label %if.then188, label %if.end189, !dbg !6740

if.then188:                                       ; preds = %if.end181
  store i32 -2, i32* %retval, align 4, !dbg !6741
  br label %return, !dbg !6741

if.end189:                                        ; preds = %if.end181
  %117 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6742
  %exp190 = bitcast %union.tree_node* %117 to %struct.tree_exp*, !dbg !6742
  %operands191 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp190, i32 0, i32 3, !dbg !6742
  %arrayidx192 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands191, i64 0, i64 0, !dbg !6742
  %118 = load %union.tree_node*, %union.tree_node** %arrayidx192, align 8, !dbg !6742
  %cmp193 = icmp ne %union.tree_node* %118, null, !dbg !6742
  br i1 %cmp193, label %cond.false196, label %cond.true195, !dbg !6742

cond.true195:                                     ; preds = %if.end189
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 2970, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6742
  br label %cond.end197, !dbg !6742

cond.false196:                                    ; preds = %if.end189
  br label %cond.end197, !dbg !6742

cond.end197:                                      ; preds = %cond.false196, %cond.true195
  %cond198 = phi i32 [ 0, %cond.true195 ], [ 0, %cond.false196 ], !dbg !6742
  call void @gimple_push_condition(), !dbg !6743
  store i8 0, i8* %have_else_clause_p, align 1, !dbg !6744
  store i8 0, i8* %have_then_clause_p, align 1, !dbg !6745
  %119 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6746
  %exp199 = bitcast %union.tree_node* %119 to %struct.tree_exp*, !dbg !6746
  %operands200 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp199, i32 0, i32 3, !dbg !6746
  %arrayidx201 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands200, i64 0, i64 1, !dbg !6746
  %120 = load %union.tree_node*, %union.tree_node** %arrayidx201, align 8, !dbg !6746
  %cmp202 = icmp ne %union.tree_node* %120, null, !dbg !6748
  br i1 %cmp202, label %land.lhs.true204, label %if.else364, !dbg !6749

land.lhs.true204:                                 ; preds = %cond.end197
  %121 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6750
  %exp205 = bitcast %union.tree_node* %121 to %struct.tree_exp*, !dbg !6750
  %operands206 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp205, i32 0, i32 3, !dbg !6750
  %arrayidx207 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands206, i64 0, i64 1, !dbg !6750
  %122 = load %union.tree_node*, %union.tree_node** %arrayidx207, align 8, !dbg !6750
  %base208 = bitcast %union.tree_node* %122 to %struct.tree_base*, !dbg !6750
  %123 = bitcast %struct.tree_base* %base208 to i64*, !dbg !6750
  %bf.load209 = load i64, i64* %123, align 8, !dbg !6750
  %bf.clear210 = and i64 %bf.load209, 65535, !dbg !6750
  %bf.cast211 = trunc i64 %bf.clear210 to i32, !dbg !6750
  %cmp212 = icmp eq i32 %bf.cast211, 134, !dbg !6751
  br i1 %cmp212, label %land.lhs.true214, label %if.else364, !dbg !6752

land.lhs.true214:                                 ; preds = %land.lhs.true204
  %124 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6753
  %exp215 = bitcast %union.tree_node* %124 to %struct.tree_exp*, !dbg !6753
  %operands216 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp215, i32 0, i32 3, !dbg !6753
  %arrayidx217 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands216, i64 0, i64 1, !dbg !6753
  %125 = load %union.tree_node*, %union.tree_node** %arrayidx217, align 8, !dbg !6753
  %exp218 = bitcast %union.tree_node* %125 to %struct.tree_exp*, !dbg !6753
  %operands219 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp218, i32 0, i32 3, !dbg !6753
  %arrayidx220 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands219, i64 0, i64 0, !dbg !6753
  %126 = load %union.tree_node*, %union.tree_node** %arrayidx220, align 8, !dbg !6753
  %base221 = bitcast %union.tree_node* %126 to %struct.tree_base*, !dbg !6753
  %127 = bitcast %struct.tree_base* %base221 to i64*, !dbg !6753
  %bf.load222 = load i64, i64* %127, align 8, !dbg !6753
  %bf.clear223 = and i64 %bf.load222, 65535, !dbg !6753
  %bf.cast224 = trunc i64 %bf.clear223 to i32, !dbg !6753
  %cmp225 = icmp eq i32 %bf.cast224, 30, !dbg !6754
  br i1 %cmp225, label %land.lhs.true227, label %if.else364, !dbg !6755

land.lhs.true227:                                 ; preds = %land.lhs.true214
  %128 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6756
  %exp228 = bitcast %union.tree_node* %128 to %struct.tree_exp*, !dbg !6756
  %operands229 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp228, i32 0, i32 3, !dbg !6756
  %arrayidx230 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands229, i64 0, i64 1, !dbg !6756
  %129 = load %union.tree_node*, %union.tree_node** %arrayidx230, align 8, !dbg !6756
  %exp231 = bitcast %union.tree_node* %129 to %struct.tree_exp*, !dbg !6756
  %operands232 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp231, i32 0, i32 3, !dbg !6756
  %arrayidx233 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands232, i64 0, i64 0, !dbg !6756
  %130 = load %union.tree_node*, %union.tree_node** %arrayidx233, align 8, !dbg !6756
  %decl_minimal = bitcast %union.tree_node* %130 to %struct.tree_decl_minimal*, !dbg !6756
  %context = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 4, !dbg !6756
  %131 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !6756
  %132 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !6757
  %cmp234 = icmp eq %union.tree_node* %131, %132, !dbg !6758
  br i1 %cmp234, label %land.lhs.true236, label %if.else364, !dbg !6759

land.lhs.true236:                                 ; preds = %land.lhs.true227
  %133 = load i32, i32* @optimize, align 4, !dbg !6760
  %tobool237 = icmp ne i32 %133, 0, !dbg !6760
  br i1 %tobool237, label %if.then357, label %lor.lhs.false238, !dbg !6761

lor.lhs.false238:                                 ; preds = %land.lhs.true236
  %134 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6762
  %base239 = bitcast %union.tree_node* %134 to %struct.tree_base*, !dbg !6762
  %135 = bitcast %struct.tree_base* %base239 to i64*, !dbg !6762
  %bf.load240 = load i64, i64* %135, align 8, !dbg !6762
  %bf.clear241 = and i64 %bf.load240, 65535, !dbg !6762
  %bf.cast242 = trunc i64 %bf.clear241 to i32, !dbg !6762
  %idxprom243 = sext i32 %bf.cast242 to i64, !dbg !6762
  %arrayidx244 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom243, !dbg !6762
  %136 = load i32, i32* %arrayidx244, align 4, !dbg !6762
  %cmp245 = icmp uge i32 %136, 4, !dbg !6762
  br i1 %cmp245, label %land.lhs.true247, label %cond.false259, !dbg !6762

land.lhs.true247:                                 ; preds = %lor.lhs.false238
  %137 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6762
  %base248 = bitcast %union.tree_node* %137 to %struct.tree_base*, !dbg !6762
  %138 = bitcast %struct.tree_base* %base248 to i64*, !dbg !6762
  %bf.load249 = load i64, i64* %138, align 8, !dbg !6762
  %bf.clear250 = and i64 %bf.load249, 65535, !dbg !6762
  %bf.cast251 = trunc i64 %bf.clear250 to i32, !dbg !6762
  %idxprom252 = sext i32 %bf.cast251 to i64, !dbg !6762
  %arrayidx253 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom252, !dbg !6762
  %139 = load i32, i32* %arrayidx253, align 4, !dbg !6762
  %cmp254 = icmp ule i32 %139, 10, !dbg !6762
  br i1 %cmp254, label %cond.true256, label %cond.false259, !dbg !6762

cond.true256:                                     ; preds = %land.lhs.true247
  %140 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6762
  %exp257 = bitcast %union.tree_node* %140 to %struct.tree_exp*, !dbg !6762
  %locus258 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp257, i32 0, i32 1, !dbg !6762
  %141 = load i32, i32* %locus258, align 8, !dbg !6762
  br label %cond.end260, !dbg !6762

cond.false259:                                    ; preds = %land.lhs.true247, %lor.lhs.false238
  br label %cond.end260, !dbg !6762

cond.end260:                                      ; preds = %cond.false259, %cond.true256
  %cond261 = phi i32 [ %141, %cond.true256 ], [ 0, %cond.false259 ], !dbg !6762
  %cmp262 = icmp ne i32 %cond261, 0, !dbg !6762
  br i1 %cmp262, label %lor.lhs.false264, label %if.then357, !dbg !6763

lor.lhs.false264:                                 ; preds = %cond.end260
  %142 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6764
  %exp265 = bitcast %union.tree_node* %142 to %struct.tree_exp*, !dbg !6764
  %operands266 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp265, i32 0, i32 3, !dbg !6764
  %arrayidx267 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands266, i64 0, i64 1, !dbg !6764
  %143 = load %union.tree_node*, %union.tree_node** %arrayidx267, align 8, !dbg !6764
  %base268 = bitcast %union.tree_node* %143 to %struct.tree_base*, !dbg !6764
  %144 = bitcast %struct.tree_base* %base268 to i64*, !dbg !6764
  %bf.load269 = load i64, i64* %144, align 8, !dbg !6764
  %bf.clear270 = and i64 %bf.load269, 65535, !dbg !6764
  %bf.cast271 = trunc i64 %bf.clear270 to i32, !dbg !6764
  %idxprom272 = sext i32 %bf.cast271 to i64, !dbg !6764
  %arrayidx273 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom272, !dbg !6764
  %145 = load i32, i32* %arrayidx273, align 4, !dbg !6764
  %cmp274 = icmp uge i32 %145, 4, !dbg !6764
  br i1 %cmp274, label %land.lhs.true276, label %cond.false294, !dbg !6764

land.lhs.true276:                                 ; preds = %lor.lhs.false264
  %146 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6764
  %exp277 = bitcast %union.tree_node* %146 to %struct.tree_exp*, !dbg !6764
  %operands278 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp277, i32 0, i32 3, !dbg !6764
  %arrayidx279 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands278, i64 0, i64 1, !dbg !6764
  %147 = load %union.tree_node*, %union.tree_node** %arrayidx279, align 8, !dbg !6764
  %base280 = bitcast %union.tree_node* %147 to %struct.tree_base*, !dbg !6764
  %148 = bitcast %struct.tree_base* %base280 to i64*, !dbg !6764
  %bf.load281 = load i64, i64* %148, align 8, !dbg !6764
  %bf.clear282 = and i64 %bf.load281, 65535, !dbg !6764
  %bf.cast283 = trunc i64 %bf.clear282 to i32, !dbg !6764
  %idxprom284 = sext i32 %bf.cast283 to i64, !dbg !6764
  %arrayidx285 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom284, !dbg !6764
  %149 = load i32, i32* %arrayidx285, align 4, !dbg !6764
  %cmp286 = icmp ule i32 %149, 10, !dbg !6764
  br i1 %cmp286, label %cond.true288, label %cond.false294, !dbg !6764

cond.true288:                                     ; preds = %land.lhs.true276
  %150 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6764
  %exp289 = bitcast %union.tree_node* %150 to %struct.tree_exp*, !dbg !6764
  %operands290 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp289, i32 0, i32 3, !dbg !6764
  %arrayidx291 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands290, i64 0, i64 1, !dbg !6764
  %151 = load %union.tree_node*, %union.tree_node** %arrayidx291, align 8, !dbg !6764
  %exp292 = bitcast %union.tree_node* %151 to %struct.tree_exp*, !dbg !6764
  %locus293 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp292, i32 0, i32 1, !dbg !6764
  %152 = load i32, i32* %locus293, align 8, !dbg !6764
  br label %cond.end295, !dbg !6764

cond.false294:                                    ; preds = %land.lhs.true276, %lor.lhs.false264
  br label %cond.end295, !dbg !6764

cond.end295:                                      ; preds = %cond.false294, %cond.true288
  %cond296 = phi i32 [ %152, %cond.true288 ], [ 0, %cond.false294 ], !dbg !6764
  %cmp297 = icmp ne i32 %cond296, 0, !dbg !6764
  br i1 %cmp297, label %lor.lhs.false299, label %if.then357, !dbg !6765

lor.lhs.false299:                                 ; preds = %cond.end295
  %153 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6766
  %base300 = bitcast %union.tree_node* %153 to %struct.tree_base*, !dbg !6766
  %154 = bitcast %struct.tree_base* %base300 to i64*, !dbg !6766
  %bf.load301 = load i64, i64* %154, align 8, !dbg !6766
  %bf.clear302 = and i64 %bf.load301, 65535, !dbg !6766
  %bf.cast303 = trunc i64 %bf.clear302 to i32, !dbg !6766
  %idxprom304 = sext i32 %bf.cast303 to i64, !dbg !6766
  %arrayidx305 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom304, !dbg !6766
  %155 = load i32, i32* %arrayidx305, align 4, !dbg !6766
  %cmp306 = icmp uge i32 %155, 4, !dbg !6766
  br i1 %cmp306, label %land.lhs.true308, label %cond.false320, !dbg !6766

land.lhs.true308:                                 ; preds = %lor.lhs.false299
  %156 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6766
  %base309 = bitcast %union.tree_node* %156 to %struct.tree_base*, !dbg !6766
  %157 = bitcast %struct.tree_base* %base309 to i64*, !dbg !6766
  %bf.load310 = load i64, i64* %157, align 8, !dbg !6766
  %bf.clear311 = and i64 %bf.load310, 65535, !dbg !6766
  %bf.cast312 = trunc i64 %bf.clear311 to i32, !dbg !6766
  %idxprom313 = sext i32 %bf.cast312 to i64, !dbg !6766
  %arrayidx314 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom313, !dbg !6766
  %158 = load i32, i32* %arrayidx314, align 4, !dbg !6766
  %cmp315 = icmp ule i32 %158, 10, !dbg !6766
  br i1 %cmp315, label %cond.true317, label %cond.false320, !dbg !6766

cond.true317:                                     ; preds = %land.lhs.true308
  %159 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6766
  %exp318 = bitcast %union.tree_node* %159 to %struct.tree_exp*, !dbg !6766
  %locus319 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp318, i32 0, i32 1, !dbg !6766
  %160 = load i32, i32* %locus319, align 8, !dbg !6766
  br label %cond.end321, !dbg !6766

cond.false320:                                    ; preds = %land.lhs.true308, %lor.lhs.false299
  br label %cond.end321, !dbg !6766

cond.end321:                                      ; preds = %cond.false320, %cond.true317
  %cond322 = phi i32 [ %160, %cond.true317 ], [ 0, %cond.false320 ], !dbg !6766
  %161 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6767
  %exp323 = bitcast %union.tree_node* %161 to %struct.tree_exp*, !dbg !6767
  %operands324 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp323, i32 0, i32 3, !dbg !6767
  %arrayidx325 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands324, i64 0, i64 1, !dbg !6767
  %162 = load %union.tree_node*, %union.tree_node** %arrayidx325, align 8, !dbg !6767
  %base326 = bitcast %union.tree_node* %162 to %struct.tree_base*, !dbg !6767
  %163 = bitcast %struct.tree_base* %base326 to i64*, !dbg !6767
  %bf.load327 = load i64, i64* %163, align 8, !dbg !6767
  %bf.clear328 = and i64 %bf.load327, 65535, !dbg !6767
  %bf.cast329 = trunc i64 %bf.clear328 to i32, !dbg !6767
  %idxprom330 = sext i32 %bf.cast329 to i64, !dbg !6767
  %arrayidx331 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom330, !dbg !6767
  %164 = load i32, i32* %arrayidx331, align 4, !dbg !6767
  %cmp332 = icmp uge i32 %164, 4, !dbg !6767
  br i1 %cmp332, label %land.lhs.true334, label %cond.false352, !dbg !6767

land.lhs.true334:                                 ; preds = %cond.end321
  %165 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6767
  %exp335 = bitcast %union.tree_node* %165 to %struct.tree_exp*, !dbg !6767
  %operands336 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp335, i32 0, i32 3, !dbg !6767
  %arrayidx337 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands336, i64 0, i64 1, !dbg !6767
  %166 = load %union.tree_node*, %union.tree_node** %arrayidx337, align 8, !dbg !6767
  %base338 = bitcast %union.tree_node* %166 to %struct.tree_base*, !dbg !6767
  %167 = bitcast %struct.tree_base* %base338 to i64*, !dbg !6767
  %bf.load339 = load i64, i64* %167, align 8, !dbg !6767
  %bf.clear340 = and i64 %bf.load339, 65535, !dbg !6767
  %bf.cast341 = trunc i64 %bf.clear340 to i32, !dbg !6767
  %idxprom342 = sext i32 %bf.cast341 to i64, !dbg !6767
  %arrayidx343 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom342, !dbg !6767
  %168 = load i32, i32* %arrayidx343, align 4, !dbg !6767
  %cmp344 = icmp ule i32 %168, 10, !dbg !6767
  br i1 %cmp344, label %cond.true346, label %cond.false352, !dbg !6767

cond.true346:                                     ; preds = %land.lhs.true334
  %169 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6767
  %exp347 = bitcast %union.tree_node* %169 to %struct.tree_exp*, !dbg !6767
  %operands348 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp347, i32 0, i32 3, !dbg !6767
  %arrayidx349 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands348, i64 0, i64 1, !dbg !6767
  %170 = load %union.tree_node*, %union.tree_node** %arrayidx349, align 8, !dbg !6767
  %exp350 = bitcast %union.tree_node* %170 to %struct.tree_exp*, !dbg !6767
  %locus351 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp350, i32 0, i32 1, !dbg !6767
  %171 = load i32, i32* %locus351, align 8, !dbg !6767
  br label %cond.end353, !dbg !6767

cond.false352:                                    ; preds = %land.lhs.true334, %cond.end321
  br label %cond.end353, !dbg !6767

cond.end353:                                      ; preds = %cond.false352, %cond.true346
  %cond354 = phi i32 [ %171, %cond.true346 ], [ 0, %cond.false352 ], !dbg !6767
  %cmp355 = icmp eq i32 %cond322, %cond354, !dbg !6768
  br i1 %cmp355, label %if.then357, label %if.else364, !dbg !6769

if.then357:                                       ; preds = %cond.end353, %cond.end295, %cond.end260, %land.lhs.true236
  %172 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6770
  %exp358 = bitcast %union.tree_node* %172 to %struct.tree_exp*, !dbg !6770
  %operands359 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp358, i32 0, i32 3, !dbg !6770
  %arrayidx360 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands359, i64 0, i64 1, !dbg !6770
  %173 = load %union.tree_node*, %union.tree_node** %arrayidx360, align 8, !dbg !6770
  %exp361 = bitcast %union.tree_node* %173 to %struct.tree_exp*, !dbg !6770
  %operands362 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp361, i32 0, i32 3, !dbg !6770
  %arrayidx363 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands362, i64 0, i64 0, !dbg !6770
  %174 = load %union.tree_node*, %union.tree_node** %arrayidx363, align 8, !dbg !6770
  store %union.tree_node* %174, %union.tree_node** %label_true, align 8, !dbg !6772
  store i8 1, i8* %have_then_clause_p, align 1, !dbg !6773
  br label %if.end366, !dbg !6774

if.else364:                                       ; preds = %cond.end353, %land.lhs.true227, %land.lhs.true214, %land.lhs.true204, %cond.end197
  %call365 = call %union.tree_node* @create_artificial_label(i32 0), !dbg !6775
  store %union.tree_node* %call365, %union.tree_node** %label_true, align 8, !dbg !6776
  br label %if.end366

if.end366:                                        ; preds = %if.else364, %if.then357
  %175 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6777
  %exp367 = bitcast %union.tree_node* %175 to %struct.tree_exp*, !dbg !6777
  %operands368 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp367, i32 0, i32 3, !dbg !6777
  %arrayidx369 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands368, i64 0, i64 2, !dbg !6777
  %176 = load %union.tree_node*, %union.tree_node** %arrayidx369, align 8, !dbg !6777
  %cmp370 = icmp ne %union.tree_node* %176, null, !dbg !6779
  br i1 %cmp370, label %land.lhs.true372, label %if.else534, !dbg !6780

land.lhs.true372:                                 ; preds = %if.end366
  %177 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6781
  %exp373 = bitcast %union.tree_node* %177 to %struct.tree_exp*, !dbg !6781
  %operands374 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp373, i32 0, i32 3, !dbg !6781
  %arrayidx375 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands374, i64 0, i64 2, !dbg !6781
  %178 = load %union.tree_node*, %union.tree_node** %arrayidx375, align 8, !dbg !6781
  %base376 = bitcast %union.tree_node* %178 to %struct.tree_base*, !dbg !6781
  %179 = bitcast %struct.tree_base* %base376 to i64*, !dbg !6781
  %bf.load377 = load i64, i64* %179, align 8, !dbg !6781
  %bf.clear378 = and i64 %bf.load377, 65535, !dbg !6781
  %bf.cast379 = trunc i64 %bf.clear378 to i32, !dbg !6781
  %cmp380 = icmp eq i32 %bf.cast379, 134, !dbg !6782
  br i1 %cmp380, label %land.lhs.true382, label %if.else534, !dbg !6783

land.lhs.true382:                                 ; preds = %land.lhs.true372
  %180 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6784
  %exp383 = bitcast %union.tree_node* %180 to %struct.tree_exp*, !dbg !6784
  %operands384 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp383, i32 0, i32 3, !dbg !6784
  %arrayidx385 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands384, i64 0, i64 2, !dbg !6784
  %181 = load %union.tree_node*, %union.tree_node** %arrayidx385, align 8, !dbg !6784
  %exp386 = bitcast %union.tree_node* %181 to %struct.tree_exp*, !dbg !6784
  %operands387 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp386, i32 0, i32 3, !dbg !6784
  %arrayidx388 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands387, i64 0, i64 0, !dbg !6784
  %182 = load %union.tree_node*, %union.tree_node** %arrayidx388, align 8, !dbg !6784
  %base389 = bitcast %union.tree_node* %182 to %struct.tree_base*, !dbg !6784
  %183 = bitcast %struct.tree_base* %base389 to i64*, !dbg !6784
  %bf.load390 = load i64, i64* %183, align 8, !dbg !6784
  %bf.clear391 = and i64 %bf.load390, 65535, !dbg !6784
  %bf.cast392 = trunc i64 %bf.clear391 to i32, !dbg !6784
  %cmp393 = icmp eq i32 %bf.cast392, 30, !dbg !6785
  br i1 %cmp393, label %land.lhs.true395, label %if.else534, !dbg !6786

land.lhs.true395:                                 ; preds = %land.lhs.true382
  %184 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6787
  %exp396 = bitcast %union.tree_node* %184 to %struct.tree_exp*, !dbg !6787
  %operands397 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp396, i32 0, i32 3, !dbg !6787
  %arrayidx398 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands397, i64 0, i64 2, !dbg !6787
  %185 = load %union.tree_node*, %union.tree_node** %arrayidx398, align 8, !dbg !6787
  %exp399 = bitcast %union.tree_node* %185 to %struct.tree_exp*, !dbg !6787
  %operands400 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp399, i32 0, i32 3, !dbg !6787
  %arrayidx401 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands400, i64 0, i64 0, !dbg !6787
  %186 = load %union.tree_node*, %union.tree_node** %arrayidx401, align 8, !dbg !6787
  %decl_minimal402 = bitcast %union.tree_node* %186 to %struct.tree_decl_minimal*, !dbg !6787
  %context403 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal402, i32 0, i32 4, !dbg !6787
  %187 = load %union.tree_node*, %union.tree_node** %context403, align 8, !dbg !6787
  %188 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !6788
  %cmp404 = icmp eq %union.tree_node* %187, %188, !dbg !6789
  br i1 %cmp404, label %land.lhs.true406, label %if.else534, !dbg !6790

land.lhs.true406:                                 ; preds = %land.lhs.true395
  %189 = load i32, i32* @optimize, align 4, !dbg !6791
  %tobool407 = icmp ne i32 %189, 0, !dbg !6791
  br i1 %tobool407, label %if.then527, label %lor.lhs.false408, !dbg !6792

lor.lhs.false408:                                 ; preds = %land.lhs.true406
  %190 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6793
  %base409 = bitcast %union.tree_node* %190 to %struct.tree_base*, !dbg !6793
  %191 = bitcast %struct.tree_base* %base409 to i64*, !dbg !6793
  %bf.load410 = load i64, i64* %191, align 8, !dbg !6793
  %bf.clear411 = and i64 %bf.load410, 65535, !dbg !6793
  %bf.cast412 = trunc i64 %bf.clear411 to i32, !dbg !6793
  %idxprom413 = sext i32 %bf.cast412 to i64, !dbg !6793
  %arrayidx414 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom413, !dbg !6793
  %192 = load i32, i32* %arrayidx414, align 4, !dbg !6793
  %cmp415 = icmp uge i32 %192, 4, !dbg !6793
  br i1 %cmp415, label %land.lhs.true417, label %cond.false429, !dbg !6793

land.lhs.true417:                                 ; preds = %lor.lhs.false408
  %193 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6793
  %base418 = bitcast %union.tree_node* %193 to %struct.tree_base*, !dbg !6793
  %194 = bitcast %struct.tree_base* %base418 to i64*, !dbg !6793
  %bf.load419 = load i64, i64* %194, align 8, !dbg !6793
  %bf.clear420 = and i64 %bf.load419, 65535, !dbg !6793
  %bf.cast421 = trunc i64 %bf.clear420 to i32, !dbg !6793
  %idxprom422 = sext i32 %bf.cast421 to i64, !dbg !6793
  %arrayidx423 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom422, !dbg !6793
  %195 = load i32, i32* %arrayidx423, align 4, !dbg !6793
  %cmp424 = icmp ule i32 %195, 10, !dbg !6793
  br i1 %cmp424, label %cond.true426, label %cond.false429, !dbg !6793

cond.true426:                                     ; preds = %land.lhs.true417
  %196 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6793
  %exp427 = bitcast %union.tree_node* %196 to %struct.tree_exp*, !dbg !6793
  %locus428 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp427, i32 0, i32 1, !dbg !6793
  %197 = load i32, i32* %locus428, align 8, !dbg !6793
  br label %cond.end430, !dbg !6793

cond.false429:                                    ; preds = %land.lhs.true417, %lor.lhs.false408
  br label %cond.end430, !dbg !6793

cond.end430:                                      ; preds = %cond.false429, %cond.true426
  %cond431 = phi i32 [ %197, %cond.true426 ], [ 0, %cond.false429 ], !dbg !6793
  %cmp432 = icmp ne i32 %cond431, 0, !dbg !6793
  br i1 %cmp432, label %lor.lhs.false434, label %if.then527, !dbg !6794

lor.lhs.false434:                                 ; preds = %cond.end430
  %198 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6795
  %exp435 = bitcast %union.tree_node* %198 to %struct.tree_exp*, !dbg !6795
  %operands436 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp435, i32 0, i32 3, !dbg !6795
  %arrayidx437 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands436, i64 0, i64 2, !dbg !6795
  %199 = load %union.tree_node*, %union.tree_node** %arrayidx437, align 8, !dbg !6795
  %base438 = bitcast %union.tree_node* %199 to %struct.tree_base*, !dbg !6795
  %200 = bitcast %struct.tree_base* %base438 to i64*, !dbg !6795
  %bf.load439 = load i64, i64* %200, align 8, !dbg !6795
  %bf.clear440 = and i64 %bf.load439, 65535, !dbg !6795
  %bf.cast441 = trunc i64 %bf.clear440 to i32, !dbg !6795
  %idxprom442 = sext i32 %bf.cast441 to i64, !dbg !6795
  %arrayidx443 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom442, !dbg !6795
  %201 = load i32, i32* %arrayidx443, align 4, !dbg !6795
  %cmp444 = icmp uge i32 %201, 4, !dbg !6795
  br i1 %cmp444, label %land.lhs.true446, label %cond.false464, !dbg !6795

land.lhs.true446:                                 ; preds = %lor.lhs.false434
  %202 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6795
  %exp447 = bitcast %union.tree_node* %202 to %struct.tree_exp*, !dbg !6795
  %operands448 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp447, i32 0, i32 3, !dbg !6795
  %arrayidx449 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands448, i64 0, i64 2, !dbg !6795
  %203 = load %union.tree_node*, %union.tree_node** %arrayidx449, align 8, !dbg !6795
  %base450 = bitcast %union.tree_node* %203 to %struct.tree_base*, !dbg !6795
  %204 = bitcast %struct.tree_base* %base450 to i64*, !dbg !6795
  %bf.load451 = load i64, i64* %204, align 8, !dbg !6795
  %bf.clear452 = and i64 %bf.load451, 65535, !dbg !6795
  %bf.cast453 = trunc i64 %bf.clear452 to i32, !dbg !6795
  %idxprom454 = sext i32 %bf.cast453 to i64, !dbg !6795
  %arrayidx455 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom454, !dbg !6795
  %205 = load i32, i32* %arrayidx455, align 4, !dbg !6795
  %cmp456 = icmp ule i32 %205, 10, !dbg !6795
  br i1 %cmp456, label %cond.true458, label %cond.false464, !dbg !6795

cond.true458:                                     ; preds = %land.lhs.true446
  %206 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6795
  %exp459 = bitcast %union.tree_node* %206 to %struct.tree_exp*, !dbg !6795
  %operands460 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp459, i32 0, i32 3, !dbg !6795
  %arrayidx461 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands460, i64 0, i64 2, !dbg !6795
  %207 = load %union.tree_node*, %union.tree_node** %arrayidx461, align 8, !dbg !6795
  %exp462 = bitcast %union.tree_node* %207 to %struct.tree_exp*, !dbg !6795
  %locus463 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp462, i32 0, i32 1, !dbg !6795
  %208 = load i32, i32* %locus463, align 8, !dbg !6795
  br label %cond.end465, !dbg !6795

cond.false464:                                    ; preds = %land.lhs.true446, %lor.lhs.false434
  br label %cond.end465, !dbg !6795

cond.end465:                                      ; preds = %cond.false464, %cond.true458
  %cond466 = phi i32 [ %208, %cond.true458 ], [ 0, %cond.false464 ], !dbg !6795
  %cmp467 = icmp ne i32 %cond466, 0, !dbg !6795
  br i1 %cmp467, label %lor.lhs.false469, label %if.then527, !dbg !6796

lor.lhs.false469:                                 ; preds = %cond.end465
  %209 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6797
  %base470 = bitcast %union.tree_node* %209 to %struct.tree_base*, !dbg !6797
  %210 = bitcast %struct.tree_base* %base470 to i64*, !dbg !6797
  %bf.load471 = load i64, i64* %210, align 8, !dbg !6797
  %bf.clear472 = and i64 %bf.load471, 65535, !dbg !6797
  %bf.cast473 = trunc i64 %bf.clear472 to i32, !dbg !6797
  %idxprom474 = sext i32 %bf.cast473 to i64, !dbg !6797
  %arrayidx475 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom474, !dbg !6797
  %211 = load i32, i32* %arrayidx475, align 4, !dbg !6797
  %cmp476 = icmp uge i32 %211, 4, !dbg !6797
  br i1 %cmp476, label %land.lhs.true478, label %cond.false490, !dbg !6797

land.lhs.true478:                                 ; preds = %lor.lhs.false469
  %212 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6797
  %base479 = bitcast %union.tree_node* %212 to %struct.tree_base*, !dbg !6797
  %213 = bitcast %struct.tree_base* %base479 to i64*, !dbg !6797
  %bf.load480 = load i64, i64* %213, align 8, !dbg !6797
  %bf.clear481 = and i64 %bf.load480, 65535, !dbg !6797
  %bf.cast482 = trunc i64 %bf.clear481 to i32, !dbg !6797
  %idxprom483 = sext i32 %bf.cast482 to i64, !dbg !6797
  %arrayidx484 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom483, !dbg !6797
  %214 = load i32, i32* %arrayidx484, align 4, !dbg !6797
  %cmp485 = icmp ule i32 %214, 10, !dbg !6797
  br i1 %cmp485, label %cond.true487, label %cond.false490, !dbg !6797

cond.true487:                                     ; preds = %land.lhs.true478
  %215 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6797
  %exp488 = bitcast %union.tree_node* %215 to %struct.tree_exp*, !dbg !6797
  %locus489 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp488, i32 0, i32 1, !dbg !6797
  %216 = load i32, i32* %locus489, align 8, !dbg !6797
  br label %cond.end491, !dbg !6797

cond.false490:                                    ; preds = %land.lhs.true478, %lor.lhs.false469
  br label %cond.end491, !dbg !6797

cond.end491:                                      ; preds = %cond.false490, %cond.true487
  %cond492 = phi i32 [ %216, %cond.true487 ], [ 0, %cond.false490 ], !dbg !6797
  %217 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6798
  %exp493 = bitcast %union.tree_node* %217 to %struct.tree_exp*, !dbg !6798
  %operands494 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp493, i32 0, i32 3, !dbg !6798
  %arrayidx495 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands494, i64 0, i64 2, !dbg !6798
  %218 = load %union.tree_node*, %union.tree_node** %arrayidx495, align 8, !dbg !6798
  %base496 = bitcast %union.tree_node* %218 to %struct.tree_base*, !dbg !6798
  %219 = bitcast %struct.tree_base* %base496 to i64*, !dbg !6798
  %bf.load497 = load i64, i64* %219, align 8, !dbg !6798
  %bf.clear498 = and i64 %bf.load497, 65535, !dbg !6798
  %bf.cast499 = trunc i64 %bf.clear498 to i32, !dbg !6798
  %idxprom500 = sext i32 %bf.cast499 to i64, !dbg !6798
  %arrayidx501 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom500, !dbg !6798
  %220 = load i32, i32* %arrayidx501, align 4, !dbg !6798
  %cmp502 = icmp uge i32 %220, 4, !dbg !6798
  br i1 %cmp502, label %land.lhs.true504, label %cond.false522, !dbg !6798

land.lhs.true504:                                 ; preds = %cond.end491
  %221 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6798
  %exp505 = bitcast %union.tree_node* %221 to %struct.tree_exp*, !dbg !6798
  %operands506 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp505, i32 0, i32 3, !dbg !6798
  %arrayidx507 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands506, i64 0, i64 2, !dbg !6798
  %222 = load %union.tree_node*, %union.tree_node** %arrayidx507, align 8, !dbg !6798
  %base508 = bitcast %union.tree_node* %222 to %struct.tree_base*, !dbg !6798
  %223 = bitcast %struct.tree_base* %base508 to i64*, !dbg !6798
  %bf.load509 = load i64, i64* %223, align 8, !dbg !6798
  %bf.clear510 = and i64 %bf.load509, 65535, !dbg !6798
  %bf.cast511 = trunc i64 %bf.clear510 to i32, !dbg !6798
  %idxprom512 = sext i32 %bf.cast511 to i64, !dbg !6798
  %arrayidx513 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom512, !dbg !6798
  %224 = load i32, i32* %arrayidx513, align 4, !dbg !6798
  %cmp514 = icmp ule i32 %224, 10, !dbg !6798
  br i1 %cmp514, label %cond.true516, label %cond.false522, !dbg !6798

cond.true516:                                     ; preds = %land.lhs.true504
  %225 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6798
  %exp517 = bitcast %union.tree_node* %225 to %struct.tree_exp*, !dbg !6798
  %operands518 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp517, i32 0, i32 3, !dbg !6798
  %arrayidx519 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands518, i64 0, i64 2, !dbg !6798
  %226 = load %union.tree_node*, %union.tree_node** %arrayidx519, align 8, !dbg !6798
  %exp520 = bitcast %union.tree_node* %226 to %struct.tree_exp*, !dbg !6798
  %locus521 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp520, i32 0, i32 1, !dbg !6798
  %227 = load i32, i32* %locus521, align 8, !dbg !6798
  br label %cond.end523, !dbg !6798

cond.false522:                                    ; preds = %land.lhs.true504, %cond.end491
  br label %cond.end523, !dbg !6798

cond.end523:                                      ; preds = %cond.false522, %cond.true516
  %cond524 = phi i32 [ %227, %cond.true516 ], [ 0, %cond.false522 ], !dbg !6798
  %cmp525 = icmp eq i32 %cond492, %cond524, !dbg !6799
  br i1 %cmp525, label %if.then527, label %if.else534, !dbg !6800

if.then527:                                       ; preds = %cond.end523, %cond.end465, %cond.end430, %land.lhs.true406
  %228 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6801
  %exp528 = bitcast %union.tree_node* %228 to %struct.tree_exp*, !dbg !6801
  %operands529 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp528, i32 0, i32 3, !dbg !6801
  %arrayidx530 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands529, i64 0, i64 2, !dbg !6801
  %229 = load %union.tree_node*, %union.tree_node** %arrayidx530, align 8, !dbg !6801
  %exp531 = bitcast %union.tree_node* %229 to %struct.tree_exp*, !dbg !6801
  %operands532 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp531, i32 0, i32 3, !dbg !6801
  %arrayidx533 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands532, i64 0, i64 0, !dbg !6801
  %230 = load %union.tree_node*, %union.tree_node** %arrayidx533, align 8, !dbg !6801
  store %union.tree_node* %230, %union.tree_node** %label_false, align 8, !dbg !6803
  store i8 1, i8* %have_else_clause_p, align 1, !dbg !6804
  br label %if.end536, !dbg !6805

if.else534:                                       ; preds = %cond.end523, %land.lhs.true395, %land.lhs.true382, %land.lhs.true372, %if.end366
  %call535 = call %union.tree_node* @create_artificial_label(i32 0), !dbg !6806
  store %union.tree_node* %call535, %union.tree_node** %label_false, align 8, !dbg !6807
  br label %if.end536

if.end536:                                        ; preds = %if.else534, %if.then527
  %231 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6808
  %exp537 = bitcast %union.tree_node* %231 to %struct.tree_exp*, !dbg !6808
  %operands538 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp537, i32 0, i32 3, !dbg !6808
  %arrayidx539 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands538, i64 0, i64 0, !dbg !6808
  %232 = load %union.tree_node*, %union.tree_node** %arrayidx539, align 8, !dbg !6808
  call void @gimple_cond_get_ops_from_tree(%union.tree_node* %232, i32* %pred_code, %union.tree_node** %arm1, %union.tree_node** %arm2), !dbg !6809
  %233 = load i32, i32* %pred_code, align 4, !dbg !6810
  %234 = load %union.tree_node*, %union.tree_node** %arm1, align 8, !dbg !6811
  %235 = load %union.tree_node*, %union.tree_node** %arm2, align 8, !dbg !6812
  %236 = load %union.tree_node*, %union.tree_node** %label_true, align 8, !dbg !6813
  %237 = load %union.tree_node*, %union.tree_node** %label_false, align 8, !dbg !6814
  %call540 = call %union.gimple_statement_d* @gimple_build_cond(i32 %233, %union.tree_node* %234, %union.tree_node* %235, %union.tree_node* %236, %union.tree_node* %237), !dbg !6815
  store %union.gimple_statement_d* %call540, %union.gimple_statement_d** %gimple_cond, align 8, !dbg !6816
  %238 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gimple_cond, align 8, !dbg !6817
  call void @gimplify_seq_add_stmt(%struct.gimple_seq_d** %seq, %union.gimple_statement_d* %238), !dbg !6818
  store %union.tree_node* null, %union.tree_node** %label_cont, align 8, !dbg !6819
  %239 = load i8, i8* %have_then_clause_p, align 1, !dbg !6820
  %tobool541 = icmp ne i8 %239, 0, !dbg !6820
  br i1 %tobool541, label %if.end579, label %if.then542, !dbg !6822

if.then542:                                       ; preds = %if.end536
  %240 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6823
  %exp543 = bitcast %union.tree_node* %240 to %struct.tree_exp*, !dbg !6823
  %operands544 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp543, i32 0, i32 3, !dbg !6823
  %arrayidx545 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands544, i64 0, i64 1, !dbg !6823
  %241 = load %union.tree_node*, %union.tree_node** %arrayidx545, align 8, !dbg !6823
  %cmp546 = icmp eq %union.tree_node* %241, null, !dbg !6826
  br i1 %cmp546, label %land.lhs.true548, label %if.else557, !dbg !6827

land.lhs.true548:                                 ; preds = %if.then542
  %242 = load i8, i8* %have_else_clause_p, align 1, !dbg !6828
  %tobool549 = icmp ne i8 %242, 0, !dbg !6828
  br i1 %tobool549, label %if.else557, label %land.lhs.true550, !dbg !6829

land.lhs.true550:                                 ; preds = %land.lhs.true548
  %243 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6830
  %exp551 = bitcast %union.tree_node* %243 to %struct.tree_exp*, !dbg !6830
  %operands552 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp551, i32 0, i32 3, !dbg !6830
  %arrayidx553 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands552, i64 0, i64 2, !dbg !6830
  %244 = load %union.tree_node*, %union.tree_node** %arrayidx553, align 8, !dbg !6830
  %cmp554 = icmp ne %union.tree_node* %244, null, !dbg !6831
  br i1 %cmp554, label %if.then556, label %if.else557, !dbg !6832

if.then556:                                       ; preds = %land.lhs.true550
  %245 = load %union.tree_node*, %union.tree_node** %label_true, align 8, !dbg !6833
  store %union.tree_node* %245, %union.tree_node** %label_cont, align 8, !dbg !6834
  br label %if.end578, !dbg !6835

if.else557:                                       ; preds = %land.lhs.true550, %land.lhs.true548, %if.then542
  %246 = load %union.tree_node*, %union.tree_node** %label_true, align 8, !dbg !6836
  %call558 = call %union.gimple_statement_d* @gimple_build_label(%union.tree_node* %246), !dbg !6838
  call void @gimplify_seq_add_stmt(%struct.gimple_seq_d** %seq, %union.gimple_statement_d* %call558), !dbg !6839
  %247 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6840
  %exp559 = bitcast %union.tree_node* %247 to %struct.tree_exp*, !dbg !6840
  %operands560 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp559, i32 0, i32 3, !dbg !6840
  %arrayidx561 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands560, i64 0, i64 1, !dbg !6840
  %call562 = call zeroext i8 @gimplify_stmt(%union.tree_node** %arrayidx561, %struct.gimple_seq_d** %seq), !dbg !6841
  store i8 %call562, i8* %have_then_clause_p, align 1, !dbg !6842
  %248 = load i8, i8* %have_else_clause_p, align 1, !dbg !6843
  %tobool563 = icmp ne i8 %248, 0, !dbg !6843
  br i1 %tobool563, label %if.end577, label %land.lhs.true564, !dbg !6845

land.lhs.true564:                                 ; preds = %if.else557
  %249 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6846
  %exp565 = bitcast %union.tree_node* %249 to %struct.tree_exp*, !dbg !6846
  %operands566 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp565, i32 0, i32 3, !dbg !6846
  %arrayidx567 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands566, i64 0, i64 2, !dbg !6846
  %250 = load %union.tree_node*, %union.tree_node** %arrayidx567, align 8, !dbg !6846
  %cmp568 = icmp ne %union.tree_node* %250, null, !dbg !6847
  br i1 %cmp568, label %land.lhs.true570, label %if.end577, !dbg !6848

land.lhs.true570:                                 ; preds = %land.lhs.true564
  %251 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !6849
  %call571 = call zeroext i8 @gimple_seq_may_fallthru(%struct.gimple_seq_d* %251), !dbg !6850
  %conv572 = zext i8 %call571 to i32, !dbg !6850
  %tobool573 = icmp ne i32 %conv572, 0, !dbg !6850
  br i1 %tobool573, label %if.then574, label %if.end577, !dbg !6851

if.then574:                                       ; preds = %land.lhs.true570
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g, metadata !6852, metadata !DIExpression()), !dbg !6854
  %call575 = call %union.tree_node* @create_artificial_label(i32 0), !dbg !6855
  store %union.tree_node* %call575, %union.tree_node** %label_cont, align 8, !dbg !6856
  %252 = load %union.tree_node*, %union.tree_node** %label_cont, align 8, !dbg !6857
  %call576 = call %union.gimple_statement_d* @gimple_build_goto(%union.tree_node* %252), !dbg !6858
  store %union.gimple_statement_d* %call576, %union.gimple_statement_d** %g, align 8, !dbg !6859
  %253 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g, align 8, !dbg !6860
  call void @gimple_set_do_not_emit_location(%union.gimple_statement_d* %253), !dbg !6861
  %254 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g, align 8, !dbg !6862
  call void @gimplify_seq_add_stmt(%struct.gimple_seq_d** %seq, %union.gimple_statement_d* %254), !dbg !6863
  br label %if.end577, !dbg !6864

if.end577:                                        ; preds = %if.then574, %land.lhs.true570, %land.lhs.true564, %if.else557
  br label %if.end578

if.end578:                                        ; preds = %if.end577, %if.then556
  br label %if.end579, !dbg !6865

if.end579:                                        ; preds = %if.end578, %if.end536
  %255 = load i8, i8* %have_else_clause_p, align 1, !dbg !6866
  %tobool580 = icmp ne i8 %255, 0, !dbg !6866
  br i1 %tobool580, label %if.end587, label %if.then581, !dbg !6868

if.then581:                                       ; preds = %if.end579
  %256 = load %union.tree_node*, %union.tree_node** %label_false, align 8, !dbg !6869
  %call582 = call %union.gimple_statement_d* @gimple_build_label(%union.tree_node* %256), !dbg !6871
  call void @gimplify_seq_add_stmt(%struct.gimple_seq_d** %seq, %union.gimple_statement_d* %call582), !dbg !6872
  %257 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6873
  %exp583 = bitcast %union.tree_node* %257 to %struct.tree_exp*, !dbg !6873
  %operands584 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp583, i32 0, i32 3, !dbg !6873
  %arrayidx585 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands584, i64 0, i64 2, !dbg !6873
  %call586 = call zeroext i8 @gimplify_stmt(%union.tree_node** %arrayidx585, %struct.gimple_seq_d** %seq), !dbg !6874
  store i8 %call586, i8* %have_else_clause_p, align 1, !dbg !6875
  br label %if.end587, !dbg !6876

if.end587:                                        ; preds = %if.then581, %if.end579
  %258 = load %union.tree_node*, %union.tree_node** %label_cont, align 8, !dbg !6877
  %tobool588 = icmp ne %union.tree_node* %258, null, !dbg !6877
  br i1 %tobool588, label %if.then589, label %if.end591, !dbg !6879

if.then589:                                       ; preds = %if.end587
  %259 = load %union.tree_node*, %union.tree_node** %label_cont, align 8, !dbg !6880
  %call590 = call %union.gimple_statement_d* @gimple_build_label(%union.tree_node* %259), !dbg !6881
  call void @gimplify_seq_add_stmt(%struct.gimple_seq_d** %seq, %union.gimple_statement_d* %call590), !dbg !6882
  br label %if.end591, !dbg !6882

if.end591:                                        ; preds = %if.then589, %if.end587
  %260 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !6883
  call void @gimple_pop_condition(%struct.gimple_seq_d** %260), !dbg !6884
  %261 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !6885
  %262 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !6886
  call void @gimple_seq_add_seq(%struct.gimple_seq_d** %261, %struct.gimple_seq_d* %262), !dbg !6887
  %263 = load i32, i32* %ret, align 4, !dbg !6888
  %cmp592 = icmp eq i32 %263, -2, !dbg !6890
  br i1 %cmp592, label %if.then594, label %if.else595, !dbg !6891

if.then594:                                       ; preds = %if.end591
  br label %if.end608, !dbg !6891

if.else595:                                       ; preds = %if.end591
  %264 = load i8, i8* %have_then_clause_p, align 1, !dbg !6892
  %conv596 = zext i8 %264 to i32, !dbg !6892
  %tobool597 = icmp ne i32 %conv596, 0, !dbg !6892
  br i1 %tobool597, label %if.then601, label %lor.lhs.false598, !dbg !6894

lor.lhs.false598:                                 ; preds = %if.else595
  %265 = load i8, i8* %have_else_clause_p, align 1, !dbg !6895
  %conv599 = zext i8 %265 to i32, !dbg !6895
  %tobool600 = icmp ne i32 %conv599, 0, !dbg !6895
  br i1 %tobool600, label %if.then601, label %if.else602, !dbg !6896

if.then601:                                       ; preds = %lor.lhs.false598, %if.else595
  store i32 1, i32* %ret, align 4, !dbg !6897
  br label %if.end607, !dbg !6898

if.else602:                                       ; preds = %lor.lhs.false598
  %266 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6899
  %exp603 = bitcast %union.tree_node* %266 to %struct.tree_exp*, !dbg !6899
  %operands604 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp603, i32 0, i32 3, !dbg !6899
  %arrayidx605 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands604, i64 0, i64 0, !dbg !6899
  %267 = load %union.tree_node*, %union.tree_node** %arrayidx605, align 8, !dbg !6899
  store %union.tree_node* %267, %union.tree_node** %expr, align 8, !dbg !6901
  %268 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !6902
  %call606 = call zeroext i8 @gimplify_stmt(%union.tree_node** %expr, %struct.gimple_seq_d** %268), !dbg !6903
  br label %if.end607

if.end607:                                        ; preds = %if.else602, %if.then601
  br label %if.end608

if.end608:                                        ; preds = %if.end607, %if.then594
  %269 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !6904
  store %union.tree_node* null, %union.tree_node** %269, align 8, !dbg !6905
  %270 = load i32, i32* %ret, align 4, !dbg !6906
  store i32 %270, i32* %retval, align 4, !dbg !6907
  br label %return, !dbg !6907

return:                                           ; preds = %if.end608, %if.then188, %if.then178, %if.end143, %if.then54
  %271 = load i32, i32* %retval, align 4, !dbg !6908
  ret i32 %271, !dbg !6908
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimplify_call_expr(%union.tree_node** %expr_p, %struct.gimple_seq_d** %pre_p, i8 zeroext %want_value) #0 !dbg !6909 {
entry:
  %retval = alloca i32, align 4
  %expr_p.addr = alloca %union.tree_node**, align 8
  %pre_p.addr = alloca %struct.gimple_seq_d**, align 8
  %want_value.addr = alloca i8, align 1
  %fndecl = alloca %union.tree_node*, align 8
  %parms = alloca %union.tree_node*, align 8
  %p = alloca %union.tree_node*, align 8
  %ret = alloca i32, align 4
  %i = alloca i32, align 4
  %nargs = alloca i32, align 4
  %call = alloca %union.gimple_statement_d*, align 8
  %builtin_va_start_p = alloca i8, align 1
  %loc = alloca i32, align 4
  %new_tree = alloca %union.tree_node*, align 8
  %last_arg = alloca %union.tree_node*, align 8
  %last_arg_fndecl = alloca %union.tree_node*, align 8
  %call245 = alloca %union.tree_node*, align 8
  %t = alloca i32, align 4
  %new_tree409 = alloca %union.tree_node*, align 8
  %flags = alloca i32, align 4
  store %union.tree_node** %expr_p, %union.tree_node*** %expr_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %expr_p.addr, metadata !6912, metadata !DIExpression()), !dbg !6913
  store %struct.gimple_seq_d** %pre_p, %struct.gimple_seq_d*** %pre_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %pre_p.addr, metadata !6914, metadata !DIExpression()), !dbg !6915
  store i8 %want_value, i8* %want_value.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %want_value.addr, metadata !6916, metadata !DIExpression()), !dbg !6917
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl, metadata !6918, metadata !DIExpression()), !dbg !6919
  call void @llvm.dbg.declare(metadata %union.tree_node** %parms, metadata !6920, metadata !DIExpression()), !dbg !6921
  call void @llvm.dbg.declare(metadata %union.tree_node** %p, metadata !6922, metadata !DIExpression()), !dbg !6923
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !6924, metadata !DIExpression()), !dbg !6925
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6926, metadata !DIExpression()), !dbg !6927
  call void @llvm.dbg.declare(metadata i32* %nargs, metadata !6928, metadata !DIExpression()), !dbg !6929
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %call, metadata !6930, metadata !DIExpression()), !dbg !6931
  call void @llvm.dbg.declare(metadata i8* %builtin_va_start_p, metadata !6932, metadata !DIExpression()), !dbg !6933
  store i8 0, i8* %builtin_va_start_p, align 1, !dbg !6933
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !6934, metadata !DIExpression()), !dbg !6935
  %0 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !6936
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !6936
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !6936
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !6936
  %bf.load = load i64, i64* %2, align 8, !dbg !6936
  %bf.clear = and i64 %bf.load, 65535, !dbg !6936
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6936
  %idxprom = sext i32 %bf.cast to i64, !dbg !6936
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !6936
  %3 = load i32, i32* %arrayidx, align 4, !dbg !6936
  %cmp = icmp uge i32 %3, 4, !dbg !6936
  br i1 %cmp, label %land.lhs.true, label %cond.false, !dbg !6936

land.lhs.true:                                    ; preds = %entry
  %4 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !6936
  %5 = load %union.tree_node*, %union.tree_node** %4, align 8, !dbg !6936
  %base1 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !6936
  %6 = bitcast %struct.tree_base* %base1 to i64*, !dbg !6936
  %bf.load2 = load i64, i64* %6, align 8, !dbg !6936
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !6936
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !6936
  %idxprom5 = sext i32 %bf.cast4 to i64, !dbg !6936
  %arrayidx6 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom5, !dbg !6936
  %7 = load i32, i32* %arrayidx6, align 4, !dbg !6936
  %cmp7 = icmp ule i32 %7, 10, !dbg !6936
  br i1 %cmp7, label %cond.true, label %cond.false, !dbg !6936

cond.true:                                        ; preds = %land.lhs.true
  %8 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !6936
  %9 = load %union.tree_node*, %union.tree_node** %8, align 8, !dbg !6936
  %exp = bitcast %union.tree_node* %9 to %struct.tree_exp*, !dbg !6936
  %locus = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 1, !dbg !6936
  %10 = load i32, i32* %locus, align 8, !dbg !6936
  br label %cond.end, !dbg !6936

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !6936

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %10, %cond.true ], [ 0, %cond.false ], !dbg !6936
  store i32 %cond, i32* %loc, align 4, !dbg !6935
  %11 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !6937
  %12 = load %union.tree_node*, %union.tree_node** %11, align 8, !dbg !6937
  %base8 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !6937
  %13 = bitcast %struct.tree_base* %base8 to i64*, !dbg !6937
  %bf.load9 = load i64, i64* %13, align 8, !dbg !6937
  %bf.clear10 = and i64 %bf.load9, 65535, !dbg !6937
  %bf.cast11 = trunc i64 %bf.clear10 to i32, !dbg !6937
  %cmp12 = icmp eq i32 %bf.cast11, 59, !dbg !6937
  br i1 %cmp12, label %cond.false14, label %cond.true13, !dbg !6937

cond.true13:                                      ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 2237, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6937
  br label %cond.end15, !dbg !6937

cond.false14:                                     ; preds = %cond.end
  br label %cond.end15, !dbg !6937

cond.end15:                                       ; preds = %cond.false14, %cond.true13
  %cond16 = phi i32 [ 0, %cond.true13 ], [ 0, %cond.false14 ], !dbg !6937
  %14 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !6938
  %15 = load %union.tree_node*, %union.tree_node** %14, align 8, !dbg !6938
  %base17 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !6938
  %16 = bitcast %struct.tree_base* %base17 to i64*, !dbg !6938
  %bf.load18 = load i64, i64* %16, align 8, !dbg !6938
  %bf.clear19 = and i64 %bf.load18, 65535, !dbg !6938
  %bf.cast20 = trunc i64 %bf.clear19 to i32, !dbg !6938
  %idxprom21 = sext i32 %bf.cast20 to i64, !dbg !6938
  %arrayidx22 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom21, !dbg !6938
  %17 = load i32, i32* %arrayidx22, align 4, !dbg !6938
  %cmp23 = icmp uge i32 %17, 4, !dbg !6938
  br i1 %cmp23, label %land.lhs.true24, label %cond.false35, !dbg !6938

land.lhs.true24:                                  ; preds = %cond.end15
  %18 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !6938
  %19 = load %union.tree_node*, %union.tree_node** %18, align 8, !dbg !6938
  %base25 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !6938
  %20 = bitcast %struct.tree_base* %base25 to i64*, !dbg !6938
  %bf.load26 = load i64, i64* %20, align 8, !dbg !6938
  %bf.clear27 = and i64 %bf.load26, 65535, !dbg !6938
  %bf.cast28 = trunc i64 %bf.clear27 to i32, !dbg !6938
  %idxprom29 = sext i32 %bf.cast28 to i64, !dbg !6938
  %arrayidx30 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom29, !dbg !6938
  %21 = load i32, i32* %arrayidx30, align 4, !dbg !6938
  %cmp31 = icmp ule i32 %21, 10, !dbg !6938
  br i1 %cmp31, label %cond.true32, label %cond.false35, !dbg !6938

cond.true32:                                      ; preds = %land.lhs.true24
  %22 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !6938
  %23 = load %union.tree_node*, %union.tree_node** %22, align 8, !dbg !6938
  %exp33 = bitcast %union.tree_node* %23 to %struct.tree_exp*, !dbg !6938
  %locus34 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp33, i32 0, i32 1, !dbg !6938
  %24 = load i32, i32* %locus34, align 8, !dbg !6938
  br label %cond.end36, !dbg !6938

cond.false35:                                     ; preds = %land.lhs.true24, %cond.end15
  br label %cond.end36, !dbg !6938

cond.end36:                                       ; preds = %cond.false35, %cond.true32
  %cond37 = phi i32 [ %24, %cond.true32 ], [ 0, %cond.false35 ], !dbg !6938
  %cmp38 = icmp ne i32 %cond37, 0, !dbg !6938
  br i1 %cmp38, label %if.end, label %if.then, !dbg !6940

if.then:                                          ; preds = %cond.end36
  %25 = load i32, i32* @input_location, align 4, !dbg !6941
  %26 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !6941
  %27 = load %union.tree_node*, %union.tree_node** %26, align 8, !dbg !6941
  %exp39 = bitcast %union.tree_node* %27 to %struct.tree_exp*, !dbg !6941
  %locus40 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp39, i32 0, i32 1, !dbg !6941
  store i32 %25, i32* %locus40, align 8, !dbg !6941
  br label %if.end, !dbg !6941

if.end:                                           ; preds = %if.then, %cond.end36
  %28 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !6942
  %29 = load %union.tree_node*, %union.tree_node** %28, align 8, !dbg !6943
  %call41 = call %union.tree_node* @get_callee_fndecl(%union.tree_node* %29), !dbg !6944
  store %union.tree_node* %call41, %union.tree_node** %fndecl, align 8, !dbg !6945
  %30 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6946
  %tobool = icmp ne %union.tree_node* %30, null, !dbg !6946
  br i1 %tobool, label %land.lhs.true42, label %if.end130, !dbg !6948

land.lhs.true42:                                  ; preds = %if.end
  %31 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6949
  %function_decl = bitcast %union.tree_node* %31 to %struct.tree_function_decl*, !dbg !6949
  %built_in_class = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !6949
  %bf.load43 = load i32, i32* %built_in_class, align 8, !dbg !6949
  %bf.lshr = lshr i32 %bf.load43, 11, !dbg !6949
  %bf.clear44 = and i32 %bf.lshr, 3, !dbg !6949
  %cmp45 = icmp ne i32 %bf.clear44, 0, !dbg !6949
  br i1 %cmp45, label %if.then46, label %if.end130, !dbg !6950

if.then46:                                        ; preds = %land.lhs.true42
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_tree, metadata !6951, metadata !DIExpression()), !dbg !6953
  %32 = load i32, i32* @input_location, align 4, !dbg !6954
  %33 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !6955
  %34 = load %union.tree_node*, %union.tree_node** %33, align 8, !dbg !6956
  %35 = load i8, i8* %want_value.addr, align 1, !dbg !6957
  %tobool47 = icmp ne i8 %35, 0, !dbg !6958
  %lnot = xor i1 %tobool47, true, !dbg !6958
  %lnot.ext = zext i1 %lnot to i32, !dbg !6958
  %conv = trunc i32 %lnot.ext to i8, !dbg !6958
  %call48 = call %union.tree_node* @fold_call_expr(i32 %32, %union.tree_node* %34, i8 zeroext %conv), !dbg !6959
  store %union.tree_node* %call48, %union.tree_node** %new_tree, align 8, !dbg !6953
  %36 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !6960
  %tobool49 = icmp ne %union.tree_node* %36, null, !dbg !6960
  br i1 %tobool49, label %land.lhs.true50, label %if.end54, !dbg !6962

land.lhs.true50:                                  ; preds = %if.then46
  %37 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !6963
  %38 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !6964
  %39 = load %union.tree_node*, %union.tree_node** %38, align 8, !dbg !6965
  %cmp51 = icmp ne %union.tree_node* %37, %39, !dbg !6966
  br i1 %cmp51, label %if.then53, label %if.end54, !dbg !6967

if.then53:                                        ; preds = %land.lhs.true50
  %40 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !6968
  %41 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !6970
  store %union.tree_node* %40, %union.tree_node** %41, align 8, !dbg !6971
  store i32 0, i32* %retval, align 4, !dbg !6972
  br label %return, !dbg !6972

if.end54:                                         ; preds = %land.lhs.true50, %if.then46
  %42 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6973
  %function_decl55 = bitcast %union.tree_node* %42 to %struct.tree_function_decl*, !dbg !6973
  %built_in_class56 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl55, i32 0, i32 5, !dbg !6973
  %bf.load57 = load i32, i32* %built_in_class56, align 8, !dbg !6973
  %bf.lshr58 = lshr i32 %bf.load57, 11, !dbg !6973
  %bf.clear59 = and i32 %bf.lshr58, 3, !dbg !6973
  %cmp60 = icmp eq i32 %bf.clear59, 3, !dbg !6975
  br i1 %cmp60, label %land.lhs.true62, label %if.end129, !dbg !6976

land.lhs.true62:                                  ; preds = %if.end54
  %43 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6977
  %function_decl63 = bitcast %union.tree_node* %43 to %struct.tree_function_decl*, !dbg !6977
  %function_code = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl63, i32 0, i32 5, !dbg !6977
  %bf.load64 = load i32, i32* %function_code, align 8, !dbg !6977
  %bf.clear65 = and i32 %bf.load64, 2047, !dbg !6977
  %cmp66 = icmp eq i32 %bf.clear65, 515, !dbg !6978
  br i1 %cmp66, label %if.then68, label %if.end129, !dbg !6979

if.then68:                                        ; preds = %land.lhs.true62
  store i8 1, i8* %builtin_va_start_p, align 1, !dbg !6980
  %44 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !6982
  %45 = load %union.tree_node*, %union.tree_node** %44, align 8, !dbg !6982
  %exp69 = bitcast %union.tree_node* %45 to %struct.tree_exp*, !dbg !6982
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp69, i32 0, i32 3, !dbg !6982
  %arrayidx70 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !6982
  %46 = load %union.tree_node*, %union.tree_node** %arrayidx70, align 8, !dbg !6982
  %int_cst = bitcast %union.tree_node* %46 to %struct.tree_int_cst*, !dbg !6982
  %int_cst71 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !6982
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst71, i32 0, i32 0, !dbg !6982
  %47 = load i64, i64* %low, align 8, !dbg !6982
  %conv72 = trunc i64 %47 to i32, !dbg !6982
  %sub = sub nsw i32 %conv72, 3, !dbg !6982
  %cmp73 = icmp slt i32 %sub, 2, !dbg !6984
  br i1 %cmp73, label %if.then75, label %if.end100, !dbg !6985

if.then75:                                        ; preds = %if.then68
  call void (i8*, ...) @error(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.7, i64 0, i64 0)), !dbg !6986
  %48 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !6988
  %49 = load %union.tree_node*, %union.tree_node** %48, align 8, !dbg !6988
  %base76 = bitcast %union.tree_node* %49 to %struct.tree_base*, !dbg !6988
  %50 = bitcast %struct.tree_base* %base76 to i64*, !dbg !6988
  %bf.load77 = load i64, i64* %50, align 8, !dbg !6988
  %bf.clear78 = and i64 %bf.load77, 65535, !dbg !6988
  %bf.cast79 = trunc i64 %bf.clear78 to i32, !dbg !6988
  %idxprom80 = sext i32 %bf.cast79 to i64, !dbg !6988
  %arrayidx81 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom80, !dbg !6988
  %51 = load i32, i32* %arrayidx81, align 4, !dbg !6988
  %cmp82 = icmp uge i32 %51, 4, !dbg !6988
  br i1 %cmp82, label %land.lhs.true84, label %cond.false96, !dbg !6988

land.lhs.true84:                                  ; preds = %if.then75
  %52 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !6988
  %53 = load %union.tree_node*, %union.tree_node** %52, align 8, !dbg !6988
  %base85 = bitcast %union.tree_node* %53 to %struct.tree_base*, !dbg !6988
  %54 = bitcast %struct.tree_base* %base85 to i64*, !dbg !6988
  %bf.load86 = load i64, i64* %54, align 8, !dbg !6988
  %bf.clear87 = and i64 %bf.load86, 65535, !dbg !6988
  %bf.cast88 = trunc i64 %bf.clear87 to i32, !dbg !6988
  %idxprom89 = sext i32 %bf.cast88 to i64, !dbg !6988
  %arrayidx90 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom89, !dbg !6988
  %55 = load i32, i32* %arrayidx90, align 4, !dbg !6988
  %cmp91 = icmp ule i32 %55, 10, !dbg !6988
  br i1 %cmp91, label %cond.true93, label %cond.false96, !dbg !6988

cond.true93:                                      ; preds = %land.lhs.true84
  %56 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !6988
  %57 = load %union.tree_node*, %union.tree_node** %56, align 8, !dbg !6988
  %exp94 = bitcast %union.tree_node* %57 to %struct.tree_exp*, !dbg !6988
  %locus95 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp94, i32 0, i32 1, !dbg !6988
  %58 = load i32, i32* %locus95, align 8, !dbg !6988
  br label %cond.end97, !dbg !6988

cond.false96:                                     ; preds = %land.lhs.true84, %if.then75
  br label %cond.end97, !dbg !6988

cond.end97:                                       ; preds = %cond.false96, %cond.true93
  %cond98 = phi i32 [ %58, %cond.true93 ], [ 0, %cond.false96 ], !dbg !6988
  %call99 = call %union.tree_node* @build_empty_stmt(i32 %cond98), !dbg !6989
  %59 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !6990
  store %union.tree_node* %call99, %union.tree_node** %59, align 8, !dbg !6991
  store i32 0, i32* %retval, align 4, !dbg !6992
  br label %return, !dbg !6992

if.end100:                                        ; preds = %if.then68
  %60 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !6993
  %61 = load %union.tree_node*, %union.tree_node** %60, align 8, !dbg !6995
  %call101 = call zeroext i8 @fold_builtin_next_arg(%union.tree_node* %61, i8 zeroext 1), !dbg !6996
  %tobool102 = icmp ne i8 %call101, 0, !dbg !6996
  br i1 %tobool102, label %if.then103, label %if.end128, !dbg !6997

if.then103:                                       ; preds = %if.end100
  %62 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !6998
  %63 = load %union.tree_node*, %union.tree_node** %62, align 8, !dbg !6998
  %base104 = bitcast %union.tree_node* %63 to %struct.tree_base*, !dbg !6998
  %64 = bitcast %struct.tree_base* %base104 to i64*, !dbg !6998
  %bf.load105 = load i64, i64* %64, align 8, !dbg !6998
  %bf.clear106 = and i64 %bf.load105, 65535, !dbg !6998
  %bf.cast107 = trunc i64 %bf.clear106 to i32, !dbg !6998
  %idxprom108 = sext i32 %bf.cast107 to i64, !dbg !6998
  %arrayidx109 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom108, !dbg !6998
  %65 = load i32, i32* %arrayidx109, align 4, !dbg !6998
  %cmp110 = icmp uge i32 %65, 4, !dbg !6998
  br i1 %cmp110, label %land.lhs.true112, label %cond.false124, !dbg !6998

land.lhs.true112:                                 ; preds = %if.then103
  %66 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !6998
  %67 = load %union.tree_node*, %union.tree_node** %66, align 8, !dbg !6998
  %base113 = bitcast %union.tree_node* %67 to %struct.tree_base*, !dbg !6998
  %68 = bitcast %struct.tree_base* %base113 to i64*, !dbg !6998
  %bf.load114 = load i64, i64* %68, align 8, !dbg !6998
  %bf.clear115 = and i64 %bf.load114, 65535, !dbg !6998
  %bf.cast116 = trunc i64 %bf.clear115 to i32, !dbg !6998
  %idxprom117 = sext i32 %bf.cast116 to i64, !dbg !6998
  %arrayidx118 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom117, !dbg !6998
  %69 = load i32, i32* %arrayidx118, align 4, !dbg !6998
  %cmp119 = icmp ule i32 %69, 10, !dbg !6998
  br i1 %cmp119, label %cond.true121, label %cond.false124, !dbg !6998

cond.true121:                                     ; preds = %land.lhs.true112
  %70 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !6998
  %71 = load %union.tree_node*, %union.tree_node** %70, align 8, !dbg !6998
  %exp122 = bitcast %union.tree_node* %71 to %struct.tree_exp*, !dbg !6998
  %locus123 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp122, i32 0, i32 1, !dbg !6998
  %72 = load i32, i32* %locus123, align 8, !dbg !6998
  br label %cond.end125, !dbg !6998

cond.false124:                                    ; preds = %land.lhs.true112, %if.then103
  br label %cond.end125, !dbg !6998

cond.end125:                                      ; preds = %cond.false124, %cond.true121
  %cond126 = phi i32 [ %72, %cond.true121 ], [ 0, %cond.false124 ], !dbg !6998
  %call127 = call %union.tree_node* @build_empty_stmt(i32 %cond126), !dbg !7000
  %73 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7001
  store %union.tree_node* %call127, %union.tree_node** %73, align 8, !dbg !7002
  store i32 0, i32* %retval, align 4, !dbg !7003
  br label %return, !dbg !7003

if.end128:                                        ; preds = %if.end100
  br label %if.end129, !dbg !7004

if.end129:                                        ; preds = %if.end128, %land.lhs.true62, %if.end54
  br label %if.end130, !dbg !7005

if.end130:                                        ; preds = %if.end129, %land.lhs.true42, %if.end
  %74 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7006
  %75 = load %union.tree_node*, %union.tree_node** %74, align 8, !dbg !7006
  %exp131 = bitcast %union.tree_node* %75 to %struct.tree_exp*, !dbg !7006
  %operands132 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp131, i32 0, i32 3, !dbg !7006
  %arrayidx133 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands132, i64 0, i64 1, !dbg !7006
  %76 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !7007
  %call134 = call i32 @gimplify_expr(%union.tree_node** %arrayidx133, %struct.gimple_seq_d** %76, %struct.gimple_seq_d** null, i8 (%union.tree_node*)* @is_gimple_call_addr, i32 1), !dbg !7008
  store i32 %call134, i32* %ret, align 4, !dbg !7009
  %77 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7010
  %78 = load %union.tree_node*, %union.tree_node** %77, align 8, !dbg !7010
  %exp135 = bitcast %union.tree_node* %78 to %struct.tree_exp*, !dbg !7010
  %operands136 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp135, i32 0, i32 3, !dbg !7010
  %arrayidx137 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands136, i64 0, i64 0, !dbg !7010
  %79 = load %union.tree_node*, %union.tree_node** %arrayidx137, align 8, !dbg !7010
  %int_cst138 = bitcast %union.tree_node* %79 to %struct.tree_int_cst*, !dbg !7010
  %int_cst139 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst138, i32 0, i32 1, !dbg !7010
  %low140 = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst139, i32 0, i32 0, !dbg !7010
  %80 = load i64, i64* %low140, align 8, !dbg !7010
  %conv141 = trunc i64 %80 to i32, !dbg !7010
  %sub142 = sub nsw i32 %conv141, 3, !dbg !7010
  store i32 %sub142, i32* %nargs, align 4, !dbg !7011
  %81 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7012
  %82 = load %union.tree_node*, %union.tree_node** %81, align 8, !dbg !7013
  %call143 = call %union.tree_node* @get_callee_fndecl(%union.tree_node* %82), !dbg !7014
  store %union.tree_node* %call143, %union.tree_node** %fndecl, align 8, !dbg !7015
  store %union.tree_node* null, %union.tree_node** %parms, align 8, !dbg !7016
  %83 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !7017
  %tobool144 = icmp ne %union.tree_node* %83, null, !dbg !7017
  br i1 %tobool144, label %if.then145, label %if.else, !dbg !7019

if.then145:                                       ; preds = %if.end130
  %84 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !7020
  %common = bitcast %union.tree_node* %84 to %struct.tree_common*, !dbg !7020
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7020
  %85 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7020
  %type146 = bitcast %union.tree_node* %85 to %struct.tree_type*, !dbg !7020
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type146, i32 0, i32 1, !dbg !7020
  %86 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !7020
  store %union.tree_node* %86, %union.tree_node** %parms, align 8, !dbg !7021
  br label %if.end180, !dbg !7022

if.else:                                          ; preds = %if.end130
  %87 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7023
  %88 = load %union.tree_node*, %union.tree_node** %87, align 8, !dbg !7023
  %exp147 = bitcast %union.tree_node* %88 to %struct.tree_exp*, !dbg !7023
  %operands148 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp147, i32 0, i32 3, !dbg !7023
  %arrayidx149 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands148, i64 0, i64 1, !dbg !7023
  %89 = load %union.tree_node*, %union.tree_node** %arrayidx149, align 8, !dbg !7023
  %common150 = bitcast %union.tree_node* %89 to %struct.tree_common*, !dbg !7023
  %type151 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common150, i32 0, i32 2, !dbg !7023
  %90 = load %union.tree_node*, %union.tree_node** %type151, align 8, !dbg !7023
  %base152 = bitcast %union.tree_node* %90 to %struct.tree_base*, !dbg !7023
  %91 = bitcast %struct.tree_base* %base152 to i64*, !dbg !7023
  %bf.load153 = load i64, i64* %91, align 8, !dbg !7023
  %bf.clear154 = and i64 %bf.load153, 65535, !dbg !7023
  %bf.cast155 = trunc i64 %bf.clear154 to i32, !dbg !7023
  %cmp156 = icmp eq i32 %bf.cast155, 10, !dbg !7023
  br i1 %cmp156, label %if.then169, label %lor.lhs.false, !dbg !7023

lor.lhs.false:                                    ; preds = %if.else
  %92 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7023
  %93 = load %union.tree_node*, %union.tree_node** %92, align 8, !dbg !7023
  %exp158 = bitcast %union.tree_node* %93 to %struct.tree_exp*, !dbg !7023
  %operands159 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp158, i32 0, i32 3, !dbg !7023
  %arrayidx160 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands159, i64 0, i64 1, !dbg !7023
  %94 = load %union.tree_node*, %union.tree_node** %arrayidx160, align 8, !dbg !7023
  %common161 = bitcast %union.tree_node* %94 to %struct.tree_common*, !dbg !7023
  %type162 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common161, i32 0, i32 2, !dbg !7023
  %95 = load %union.tree_node*, %union.tree_node** %type162, align 8, !dbg !7023
  %base163 = bitcast %union.tree_node* %95 to %struct.tree_base*, !dbg !7023
  %96 = bitcast %struct.tree_base* %base163 to i64*, !dbg !7023
  %bf.load164 = load i64, i64* %96, align 8, !dbg !7023
  %bf.clear165 = and i64 %bf.load164, 65535, !dbg !7023
  %bf.cast166 = trunc i64 %bf.clear165 to i32, !dbg !7023
  %cmp167 = icmp eq i32 %bf.cast166, 12, !dbg !7023
  br i1 %cmp167, label %if.then169, label %if.end179, !dbg !7025

if.then169:                                       ; preds = %lor.lhs.false, %if.else
  %97 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7026
  %98 = load %union.tree_node*, %union.tree_node** %97, align 8, !dbg !7026
  %exp170 = bitcast %union.tree_node* %98 to %struct.tree_exp*, !dbg !7026
  %operands171 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp170, i32 0, i32 3, !dbg !7026
  %arrayidx172 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands171, i64 0, i64 1, !dbg !7026
  %99 = load %union.tree_node*, %union.tree_node** %arrayidx172, align 8, !dbg !7026
  %common173 = bitcast %union.tree_node* %99 to %struct.tree_common*, !dbg !7026
  %type174 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common173, i32 0, i32 2, !dbg !7026
  %100 = load %union.tree_node*, %union.tree_node** %type174, align 8, !dbg !7026
  %common175 = bitcast %union.tree_node* %100 to %struct.tree_common*, !dbg !7026
  %type176 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common175, i32 0, i32 2, !dbg !7026
  %101 = load %union.tree_node*, %union.tree_node** %type176, align 8, !dbg !7026
  %type177 = bitcast %union.tree_node* %101 to %struct.tree_type*, !dbg !7026
  %values178 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type177, i32 0, i32 1, !dbg !7026
  %102 = load %union.tree_node*, %union.tree_node** %values178, align 8, !dbg !7026
  store %union.tree_node* %102, %union.tree_node** %parms, align 8, !dbg !7027
  br label %if.end179, !dbg !7028

if.end179:                                        ; preds = %if.then169, %lor.lhs.false
  br label %if.end180

if.end180:                                        ; preds = %if.end179, %if.then145
  %103 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !7029
  %tobool181 = icmp ne %union.tree_node* %103, null, !dbg !7029
  br i1 %tobool181, label %land.lhs.true182, label %if.else187, !dbg !7031

land.lhs.true182:                                 ; preds = %if.end180
  %104 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !7032
  %decl_non_common = bitcast %union.tree_node* %104 to %struct.tree_decl_non_common*, !dbg !7032
  %arguments = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 2, !dbg !7032
  %105 = load %union.tree_node*, %union.tree_node** %arguments, align 8, !dbg !7032
  %tobool183 = icmp ne %union.tree_node* %105, null, !dbg !7032
  br i1 %tobool183, label %if.then184, label %if.else187, !dbg !7033

if.then184:                                       ; preds = %land.lhs.true182
  %106 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !7034
  %decl_non_common185 = bitcast %union.tree_node* %106 to %struct.tree_decl_non_common*, !dbg !7034
  %arguments186 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common185, i32 0, i32 2, !dbg !7034
  %107 = load %union.tree_node*, %union.tree_node** %arguments186, align 8, !dbg !7034
  store %union.tree_node* %107, %union.tree_node** %p, align 8, !dbg !7035
  br label %if.end192, !dbg !7036

if.else187:                                       ; preds = %land.lhs.true182, %if.end180
  %108 = load %union.tree_node*, %union.tree_node** %parms, align 8, !dbg !7037
  %tobool188 = icmp ne %union.tree_node* %108, null, !dbg !7037
  br i1 %tobool188, label %if.then189, label %if.else190, !dbg !7039

if.then189:                                       ; preds = %if.else187
  %109 = load %union.tree_node*, %union.tree_node** %parms, align 8, !dbg !7040
  store %union.tree_node* %109, %union.tree_node** %p, align 8, !dbg !7041
  br label %if.end191, !dbg !7042

if.else190:                                       ; preds = %if.else187
  store %union.tree_node* null, %union.tree_node** %p, align 8, !dbg !7043
  br label %if.end191

if.end191:                                        ; preds = %if.else190, %if.then189
  br label %if.end192

if.end192:                                        ; preds = %if.end191, %if.then184
  store i32 0, i32* %i, align 4, !dbg !7044
  br label %for.cond, !dbg !7046

for.cond:                                         ; preds = %for.inc, %if.end192
  %110 = load i32, i32* %i, align 4, !dbg !7047
  %111 = load i32, i32* %nargs, align 4, !dbg !7049
  %cmp193 = icmp slt i32 %110, %111, !dbg !7050
  br i1 %cmp193, label %land.rhs, label %land.end, !dbg !7051

land.rhs:                                         ; preds = %for.cond
  %112 = load %union.tree_node*, %union.tree_node** %p, align 8, !dbg !7052
  %tobool195 = icmp ne %union.tree_node* %112, null, !dbg !7051
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %113 = phi i1 [ false, %for.cond ], [ %tobool195, %land.rhs ], !dbg !7053
  br i1 %113, label %for.body, label %for.end, !dbg !7054

for.body:                                         ; preds = %land.end
  br label %for.inc, !dbg !7054

for.inc:                                          ; preds = %for.body
  %114 = load i32, i32* %i, align 4, !dbg !7055
  %inc = add nsw i32 %114, 1, !dbg !7055
  store i32 %inc, i32* %i, align 4, !dbg !7055
  %115 = load %union.tree_node*, %union.tree_node** %p, align 8, !dbg !7056
  %common196 = bitcast %union.tree_node* %115 to %struct.tree_common*, !dbg !7056
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common196, i32 0, i32 1, !dbg !7056
  %116 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !7056
  store %union.tree_node* %116, %union.tree_node** %p, align 8, !dbg !7057
  br label %for.cond, !dbg !7058, !llvm.loop !7059

for.end:                                          ; preds = %land.end
  %117 = load %union.tree_node*, %union.tree_node** %p, align 8, !dbg !7061
  %tobool197 = icmp ne %union.tree_node* %117, null, !dbg !7061
  br i1 %tobool197, label %if.end337, label %land.lhs.true198, !dbg !7063

land.lhs.true198:                                 ; preds = %for.end
  %118 = load i32, i32* %i, align 4, !dbg !7064
  %119 = load i32, i32* %nargs, align 4, !dbg !7065
  %cmp199 = icmp slt i32 %118, %119, !dbg !7066
  br i1 %cmp199, label %land.lhs.true201, label %if.end337, !dbg !7067

land.lhs.true201:                                 ; preds = %land.lhs.true198
  %120 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7068
  %121 = load %union.tree_node*, %union.tree_node** %120, align 8, !dbg !7068
  %exp202 = bitcast %union.tree_node* %121 to %struct.tree_exp*, !dbg !7068
  %operands203 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp202, i32 0, i32 3, !dbg !7068
  %122 = load i32, i32* %nargs, align 4, !dbg !7068
  %sub204 = sub nsw i32 %122, 1, !dbg !7068
  %add = add nsw i32 %sub204, 3, !dbg !7068
  %idxprom205 = sext i32 %add to i64, !dbg !7068
  %arrayidx206 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands203, i64 0, i64 %idxprom205, !dbg !7068
  %123 = load %union.tree_node*, %union.tree_node** %arrayidx206, align 8, !dbg !7068
  %base207 = bitcast %union.tree_node* %123 to %struct.tree_base*, !dbg !7068
  %124 = bitcast %struct.tree_base* %base207 to i64*, !dbg !7068
  %bf.load208 = load i64, i64* %124, align 8, !dbg !7068
  %bf.clear209 = and i64 %bf.load208, 65535, !dbg !7068
  %bf.cast210 = trunc i64 %bf.clear209 to i32, !dbg !7068
  %cmp211 = icmp eq i32 %bf.cast210, 59, !dbg !7069
  br i1 %cmp211, label %if.then213, label %if.end337, !dbg !7070

if.then213:                                       ; preds = %land.lhs.true201
  call void @llvm.dbg.declare(metadata %union.tree_node** %last_arg, metadata !7071, metadata !DIExpression()), !dbg !7073
  %125 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7074
  %126 = load %union.tree_node*, %union.tree_node** %125, align 8, !dbg !7074
  %exp214 = bitcast %union.tree_node* %126 to %struct.tree_exp*, !dbg !7074
  %operands215 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp214, i32 0, i32 3, !dbg !7074
  %127 = load i32, i32* %nargs, align 4, !dbg !7074
  %sub216 = sub nsw i32 %127, 1, !dbg !7074
  %add217 = add nsw i32 %sub216, 3, !dbg !7074
  %idxprom218 = sext i32 %add217 to i64, !dbg !7074
  %arrayidx219 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands215, i64 0, i64 %idxprom218, !dbg !7074
  %128 = load %union.tree_node*, %union.tree_node** %arrayidx219, align 8, !dbg !7074
  store %union.tree_node* %128, %union.tree_node** %last_arg, align 8, !dbg !7073
  call void @llvm.dbg.declare(metadata %union.tree_node** %last_arg_fndecl, metadata !7075, metadata !DIExpression()), !dbg !7076
  %129 = load %union.tree_node*, %union.tree_node** %last_arg, align 8, !dbg !7077
  %call220 = call %union.tree_node* @get_callee_fndecl(%union.tree_node* %129), !dbg !7078
  store %union.tree_node* %call220, %union.tree_node** %last_arg_fndecl, align 8, !dbg !7076
  %130 = load %union.tree_node*, %union.tree_node** %last_arg_fndecl, align 8, !dbg !7079
  %tobool221 = icmp ne %union.tree_node* %130, null, !dbg !7079
  br i1 %tobool221, label %land.lhs.true222, label %if.end336, !dbg !7081

land.lhs.true222:                                 ; preds = %if.then213
  %131 = load %union.tree_node*, %union.tree_node** %last_arg_fndecl, align 8, !dbg !7082
  %base223 = bitcast %union.tree_node* %131 to %struct.tree_base*, !dbg !7082
  %132 = bitcast %struct.tree_base* %base223 to i64*, !dbg !7082
  %bf.load224 = load i64, i64* %132, align 8, !dbg !7082
  %bf.clear225 = and i64 %bf.load224, 65535, !dbg !7082
  %bf.cast226 = trunc i64 %bf.clear225 to i32, !dbg !7082
  %cmp227 = icmp eq i32 %bf.cast226, 29, !dbg !7083
  br i1 %cmp227, label %land.lhs.true229, label %if.end336, !dbg !7084

land.lhs.true229:                                 ; preds = %land.lhs.true222
  %133 = load %union.tree_node*, %union.tree_node** %last_arg_fndecl, align 8, !dbg !7085
  %function_decl230 = bitcast %union.tree_node* %133 to %struct.tree_function_decl*, !dbg !7085
  %built_in_class231 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl230, i32 0, i32 5, !dbg !7085
  %bf.load232 = load i32, i32* %built_in_class231, align 8, !dbg !7085
  %bf.lshr233 = lshr i32 %bf.load232, 11, !dbg !7085
  %bf.clear234 = and i32 %bf.lshr233, 3, !dbg !7085
  %cmp235 = icmp eq i32 %bf.clear234, 3, !dbg !7086
  br i1 %cmp235, label %land.lhs.true237, label %if.end336, !dbg !7087

land.lhs.true237:                                 ; preds = %land.lhs.true229
  %134 = load %union.tree_node*, %union.tree_node** %last_arg_fndecl, align 8, !dbg !7088
  %function_decl238 = bitcast %union.tree_node* %134 to %struct.tree_function_decl*, !dbg !7088
  %function_code239 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl238, i32 0, i32 5, !dbg !7088
  %bf.load240 = load i32, i32* %function_code239, align 8, !dbg !7088
  %bf.clear241 = and i32 %bf.load240, 2047, !dbg !7088
  %cmp242 = icmp eq i32 %bf.clear241, 516, !dbg !7089
  br i1 %cmp242, label %if.then244, label %if.end336, !dbg !7090

if.then244:                                       ; preds = %land.lhs.true237
  call void @llvm.dbg.declare(metadata %union.tree_node** %call245, metadata !7091, metadata !DIExpression()), !dbg !7093
  %135 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7094
  %136 = load %union.tree_node*, %union.tree_node** %135, align 8, !dbg !7095
  store %union.tree_node* %136, %union.tree_node** %call245, align 8, !dbg !7093
  %137 = load i32, i32* %nargs, align 4, !dbg !7096
  %dec = add nsw i32 %137, -1, !dbg !7096
  store i32 %dec, i32* %nargs, align 4, !dbg !7096
  %138 = load i32, i32* %loc, align 4, !dbg !7097
  %139 = load %union.tree_node*, %union.tree_node** %call245, align 8, !dbg !7098
  %common246 = bitcast %union.tree_node* %139 to %struct.tree_common*, !dbg !7098
  %type247 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common246, i32 0, i32 2, !dbg !7098
  %140 = load %union.tree_node*, %union.tree_node** %type247, align 8, !dbg !7098
  %141 = load %union.tree_node*, %union.tree_node** %call245, align 8, !dbg !7099
  %exp248 = bitcast %union.tree_node* %141 to %struct.tree_exp*, !dbg !7099
  %operands249 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp248, i32 0, i32 3, !dbg !7099
  %arrayidx250 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands249, i64 0, i64 1, !dbg !7099
  %142 = load %union.tree_node*, %union.tree_node** %arrayidx250, align 8, !dbg !7099
  %143 = load i32, i32* %nargs, align 4, !dbg !7100
  %144 = load %union.tree_node*, %union.tree_node** %call245, align 8, !dbg !7101
  %exp251 = bitcast %union.tree_node* %144 to %struct.tree_exp*, !dbg !7101
  %operands252 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp251, i32 0, i32 3, !dbg !7101
  %arrayidx253 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands252, i64 0, i64 0, !dbg !7101
  %add.ptr = getelementptr inbounds %union.tree_node*, %union.tree_node** %arrayidx253, i64 3, !dbg !7101
  %call254 = call %union.tree_node* @build_call_array_loc(i32 %138, %union.tree_node* %140, %union.tree_node* %142, i32 %143, %union.tree_node** %add.ptr), !dbg !7102
  %145 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7103
  store %union.tree_node* %call254, %union.tree_node** %145, align 8, !dbg !7104
  %146 = load %union.tree_node*, %union.tree_node** %call245, align 8, !dbg !7105
  %exp255 = bitcast %union.tree_node* %146 to %struct.tree_exp*, !dbg !7105
  %operands256 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp255, i32 0, i32 3, !dbg !7105
  %arrayidx257 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands256, i64 0, i64 2, !dbg !7105
  %147 = load %union.tree_node*, %union.tree_node** %arrayidx257, align 8, !dbg !7105
  %148 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7106
  %149 = load %union.tree_node*, %union.tree_node** %148, align 8, !dbg !7106
  %exp258 = bitcast %union.tree_node* %149 to %struct.tree_exp*, !dbg !7106
  %operands259 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp258, i32 0, i32 3, !dbg !7106
  %arrayidx260 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands259, i64 0, i64 2, !dbg !7106
  store %union.tree_node* %147, %union.tree_node** %arrayidx260, align 8, !dbg !7107
  %150 = load %union.tree_node*, %union.tree_node** %call245, align 8, !dbg !7108
  %base261 = bitcast %union.tree_node* %150 to %struct.tree_base*, !dbg !7108
  %151 = bitcast %struct.tree_base* %base261 to i64*, !dbg !7108
  %bf.load262 = load i64, i64* %151, align 8, !dbg !7108
  %bf.lshr263 = lshr i64 %bf.load262, 18, !dbg !7108
  %bf.clear264 = and i64 %bf.lshr263, 1, !dbg !7108
  %bf.cast265 = trunc i64 %bf.clear264 to i32, !dbg !7108
  %152 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7109
  %153 = load %union.tree_node*, %union.tree_node** %152, align 8, !dbg !7109
  %base266 = bitcast %union.tree_node* %153 to %struct.tree_base*, !dbg !7109
  %154 = bitcast %struct.tree_base* %base266 to i64*, !dbg !7109
  %155 = zext i32 %bf.cast265 to i64, !dbg !7110
  %bf.load267 = load i64, i64* %154, align 8, !dbg !7110
  %bf.value = and i64 %155, 1, !dbg !7110
  %bf.shl = shl i64 %bf.value, 18, !dbg !7110
  %bf.clear268 = and i64 %bf.load267, -262145, !dbg !7110
  %bf.set = or i64 %bf.clear268, %bf.shl, !dbg !7110
  store i64 %bf.set, i64* %154, align 8, !dbg !7110
  %bf.result.cast = trunc i64 %bf.value to i32, !dbg !7110
  %156 = load %union.tree_node*, %union.tree_node** %call245, align 8, !dbg !7111
  %base269 = bitcast %union.tree_node* %156 to %struct.tree_base*, !dbg !7111
  %157 = bitcast %struct.tree_base* %base269 to i64*, !dbg !7111
  %bf.load270 = load i64, i64* %157, align 8, !dbg !7111
  %bf.lshr271 = lshr i64 %bf.load270, 28, !dbg !7111
  %bf.clear272 = and i64 %bf.lshr271, 1, !dbg !7111
  %bf.cast273 = trunc i64 %bf.clear272 to i32, !dbg !7111
  %158 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7112
  %159 = load %union.tree_node*, %union.tree_node** %158, align 8, !dbg !7112
  %base274 = bitcast %union.tree_node* %159 to %struct.tree_base*, !dbg !7112
  %160 = bitcast %struct.tree_base* %base274 to i64*, !dbg !7112
  %161 = zext i32 %bf.cast273 to i64, !dbg !7113
  %bf.load275 = load i64, i64* %160, align 8, !dbg !7113
  %bf.value276 = and i64 %161, 1, !dbg !7113
  %bf.shl277 = shl i64 %bf.value276, 28, !dbg !7113
  %bf.clear278 = and i64 %bf.load275, -268435457, !dbg !7113
  %bf.set279 = or i64 %bf.clear278, %bf.shl277, !dbg !7113
  store i64 %bf.set279, i64* %160, align 8, !dbg !7113
  %bf.result.cast280 = trunc i64 %bf.value276 to i32, !dbg !7113
  %162 = load %union.tree_node*, %union.tree_node** %call245, align 8, !dbg !7114
  %base281 = bitcast %union.tree_node* %162 to %struct.tree_base*, !dbg !7114
  %163 = bitcast %struct.tree_base* %base281 to i64*, !dbg !7114
  %bf.load282 = load i64, i64* %163, align 8, !dbg !7114
  %bf.lshr283 = lshr i64 %bf.load282, 29, !dbg !7114
  %bf.clear284 = and i64 %bf.lshr283, 1, !dbg !7114
  %bf.cast285 = trunc i64 %bf.clear284 to i32, !dbg !7114
  %164 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7115
  %165 = load %union.tree_node*, %union.tree_node** %164, align 8, !dbg !7115
  %base286 = bitcast %union.tree_node* %165 to %struct.tree_base*, !dbg !7115
  %166 = bitcast %struct.tree_base* %base286 to i64*, !dbg !7115
  %167 = zext i32 %bf.cast285 to i64, !dbg !7116
  %bf.load287 = load i64, i64* %166, align 8, !dbg !7116
  %bf.value288 = and i64 %167, 1, !dbg !7116
  %bf.shl289 = shl i64 %bf.value288, 29, !dbg !7116
  %bf.clear290 = and i64 %bf.load287, -536870913, !dbg !7116
  %bf.set291 = or i64 %bf.clear290, %bf.shl289, !dbg !7116
  store i64 %bf.set291, i64* %166, align 8, !dbg !7116
  %bf.result.cast292 = trunc i64 %bf.value288 to i32, !dbg !7116
  %168 = load %union.tree_node*, %union.tree_node** %call245, align 8, !dbg !7117
  %base293 = bitcast %union.tree_node* %168 to %struct.tree_base*, !dbg !7117
  %169 = bitcast %struct.tree_base* %base293 to i64*, !dbg !7117
  %bf.load294 = load i64, i64* %169, align 8, !dbg !7117
  %bf.lshr295 = lshr i64 %bf.load294, 26, !dbg !7117
  %bf.clear296 = and i64 %bf.lshr295, 1, !dbg !7117
  %bf.cast297 = trunc i64 %bf.clear296 to i32, !dbg !7117
  %170 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7118
  %171 = load %union.tree_node*, %union.tree_node** %170, align 8, !dbg !7118
  %base298 = bitcast %union.tree_node* %171 to %struct.tree_base*, !dbg !7118
  %172 = bitcast %struct.tree_base* %base298 to i64*, !dbg !7118
  %173 = zext i32 %bf.cast297 to i64, !dbg !7119
  %bf.load299 = load i64, i64* %172, align 8, !dbg !7119
  %bf.value300 = and i64 %173, 1, !dbg !7119
  %bf.shl301 = shl i64 %bf.value300, 26, !dbg !7119
  %bf.clear302 = and i64 %bf.load299, -67108865, !dbg !7119
  %bf.set303 = or i64 %bf.clear302, %bf.shl301, !dbg !7119
  store i64 %bf.set303, i64* %172, align 8, !dbg !7119
  %bf.result.cast304 = trunc i64 %bf.value300 to i32, !dbg !7119
  %174 = load %union.tree_node*, %union.tree_node** %call245, align 8, !dbg !7120
  %base305 = bitcast %union.tree_node* %174 to %struct.tree_base*, !dbg !7120
  %175 = bitcast %struct.tree_base* %base305 to i64*, !dbg !7120
  %bf.load306 = load i64, i64* %175, align 8, !dbg !7120
  %bf.clear307 = and i64 %bf.load306, 65535, !dbg !7120
  %bf.cast308 = trunc i64 %bf.clear307 to i32, !dbg !7120
  %idxprom309 = sext i32 %bf.cast308 to i64, !dbg !7120
  %arrayidx310 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom309, !dbg !7120
  %176 = load i32, i32* %arrayidx310, align 4, !dbg !7120
  %cmp311 = icmp uge i32 %176, 4, !dbg !7120
  br i1 %cmp311, label %land.lhs.true313, label %cond.false325, !dbg !7120

land.lhs.true313:                                 ; preds = %if.then244
  %177 = load %union.tree_node*, %union.tree_node** %call245, align 8, !dbg !7120
  %base314 = bitcast %union.tree_node* %177 to %struct.tree_base*, !dbg !7120
  %178 = bitcast %struct.tree_base* %base314 to i64*, !dbg !7120
  %bf.load315 = load i64, i64* %178, align 8, !dbg !7120
  %bf.clear316 = and i64 %bf.load315, 65535, !dbg !7120
  %bf.cast317 = trunc i64 %bf.clear316 to i32, !dbg !7120
  %idxprom318 = sext i32 %bf.cast317 to i64, !dbg !7120
  %arrayidx319 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom318, !dbg !7120
  %179 = load i32, i32* %arrayidx319, align 4, !dbg !7120
  %cmp320 = icmp ule i32 %179, 10, !dbg !7120
  br i1 %cmp320, label %cond.true322, label %cond.false325, !dbg !7120

cond.true322:                                     ; preds = %land.lhs.true313
  %180 = load %union.tree_node*, %union.tree_node** %call245, align 8, !dbg !7120
  %exp323 = bitcast %union.tree_node* %180 to %struct.tree_exp*, !dbg !7120
  %locus324 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp323, i32 0, i32 1, !dbg !7120
  %181 = load i32, i32* %locus324, align 8, !dbg !7120
  br label %cond.end326, !dbg !7120

cond.false325:                                    ; preds = %land.lhs.true313, %if.then244
  br label %cond.end326, !dbg !7120

cond.end326:                                      ; preds = %cond.false325, %cond.true322
  %cond327 = phi i32 [ %181, %cond.true322 ], [ 0, %cond.false325 ], !dbg !7120
  %182 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7120
  %183 = load %union.tree_node*, %union.tree_node** %182, align 8, !dbg !7120
  %exp328 = bitcast %union.tree_node* %183 to %struct.tree_exp*, !dbg !7120
  %locus329 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp328, i32 0, i32 1, !dbg !7120
  store i32 %cond327, i32* %locus329, align 8, !dbg !7120
  %184 = load %union.tree_node*, %union.tree_node** %call245, align 8, !dbg !7121
  %call330 = call %union.tree_node** @tree_block(%union.tree_node* %184), !dbg !7121
  %185 = load %union.tree_node*, %union.tree_node** %call330, align 8, !dbg !7121
  %186 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7122
  %187 = load %union.tree_node*, %union.tree_node** %186, align 8, !dbg !7122
  %call331 = call %union.tree_node** @tree_block(%union.tree_node* %187), !dbg !7122
  store %union.tree_node* %185, %union.tree_node** %call331, align 8, !dbg !7123
  %188 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7124
  %189 = load %union.tree_node*, %union.tree_node** %188, align 8, !dbg !7124
  %base332 = bitcast %union.tree_node* %189 to %struct.tree_base*, !dbg !7124
  %190 = bitcast %struct.tree_base* %base332 to i64*, !dbg !7124
  %bf.load333 = load i64, i64* %190, align 8, !dbg !7125
  %bf.clear334 = and i64 %bf.load333, -134217729, !dbg !7125
  %bf.set335 = or i64 %bf.clear334, 134217728, !dbg !7125
  store i64 %bf.set335, i64* %190, align 8, !dbg !7125
  br label %if.end336, !dbg !7126

if.end336:                                        ; preds = %cond.end326, %land.lhs.true237, %land.lhs.true229, %land.lhs.true222, %if.then213
  br label %if.end337, !dbg !7127

if.end337:                                        ; preds = %if.end336, %land.lhs.true201, %land.lhs.true198, %for.end
  %191 = load i32, i32* %nargs, align 4, !dbg !7128
  %cmp338 = icmp sgt i32 %191, 0, !dbg !7130
  br i1 %cmp338, label %if.then340, label %if.end388, !dbg !7131

if.then340:                                       ; preds = %if.end337
  %192 = load i32, i32* %nargs, align 4, !dbg !7132
  %sub341 = sub nsw i32 %192, 1, !dbg !7135
  store i32 %sub341, i32* %i, align 4, !dbg !7136
  br label %for.cond342, !dbg !7137

for.cond342:                                      ; preds = %for.inc385, %if.then340
  %193 = load i32, i32* %i, align 4, !dbg !7138
  %cmp343 = icmp sge i32 %193, 0, !dbg !7140
  br i1 %cmp343, label %for.body345, label %for.end387, !dbg !7141

for.body345:                                      ; preds = %for.cond342
  call void @llvm.dbg.declare(metadata i32* %t, metadata !7142, metadata !DIExpression()), !dbg !7144
  %194 = load i32, i32* %i, align 4, !dbg !7145
  %cmp346 = icmp ne i32 %194, 1, !dbg !7147
  br i1 %cmp346, label %if.then350, label %lor.lhs.false348, !dbg !7148

lor.lhs.false348:                                 ; preds = %for.body345
  %195 = load i8, i8* %builtin_va_start_p, align 1, !dbg !7149
  %tobool349 = icmp ne i8 %195, 0, !dbg !7149
  br i1 %tobool349, label %if.end384, label %if.then350, !dbg !7150

if.then350:                                       ; preds = %lor.lhs.false348, %for.body345
  %196 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7151
  %197 = load %union.tree_node*, %union.tree_node** %196, align 8, !dbg !7151
  %exp351 = bitcast %union.tree_node* %197 to %struct.tree_exp*, !dbg !7151
  %operands352 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp351, i32 0, i32 3, !dbg !7151
  %198 = load i32, i32* %i, align 4, !dbg !7151
  %add353 = add nsw i32 %198, 3, !dbg !7151
  %idxprom354 = sext i32 %add353 to i64, !dbg !7151
  %arrayidx355 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands352, i64 0, i64 %idxprom354, !dbg !7151
  %199 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !7153
  %200 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7154
  %201 = load %union.tree_node*, %union.tree_node** %200, align 8, !dbg !7154
  %base356 = bitcast %union.tree_node* %201 to %struct.tree_base*, !dbg !7154
  %202 = bitcast %struct.tree_base* %base356 to i64*, !dbg !7154
  %bf.load357 = load i64, i64* %202, align 8, !dbg !7154
  %bf.clear358 = and i64 %bf.load357, 65535, !dbg !7154
  %bf.cast359 = trunc i64 %bf.clear358 to i32, !dbg !7154
  %idxprom360 = sext i32 %bf.cast359 to i64, !dbg !7154
  %arrayidx361 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom360, !dbg !7154
  %203 = load i32, i32* %arrayidx361, align 4, !dbg !7154
  %cmp362 = icmp uge i32 %203, 4, !dbg !7154
  br i1 %cmp362, label %land.lhs.true364, label %cond.false376, !dbg !7154

land.lhs.true364:                                 ; preds = %if.then350
  %204 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7154
  %205 = load %union.tree_node*, %union.tree_node** %204, align 8, !dbg !7154
  %base365 = bitcast %union.tree_node* %205 to %struct.tree_base*, !dbg !7154
  %206 = bitcast %struct.tree_base* %base365 to i64*, !dbg !7154
  %bf.load366 = load i64, i64* %206, align 8, !dbg !7154
  %bf.clear367 = and i64 %bf.load366, 65535, !dbg !7154
  %bf.cast368 = trunc i64 %bf.clear367 to i32, !dbg !7154
  %idxprom369 = sext i32 %bf.cast368 to i64, !dbg !7154
  %arrayidx370 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom369, !dbg !7154
  %207 = load i32, i32* %arrayidx370, align 4, !dbg !7154
  %cmp371 = icmp ule i32 %207, 10, !dbg !7154
  br i1 %cmp371, label %cond.true373, label %cond.false376, !dbg !7154

cond.true373:                                     ; preds = %land.lhs.true364
  %208 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7154
  %209 = load %union.tree_node*, %union.tree_node** %208, align 8, !dbg !7154
  %exp374 = bitcast %union.tree_node* %209 to %struct.tree_exp*, !dbg !7154
  %locus375 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp374, i32 0, i32 1, !dbg !7154
  %210 = load i32, i32* %locus375, align 8, !dbg !7154
  br label %cond.end377, !dbg !7154

cond.false376:                                    ; preds = %land.lhs.true364, %if.then350
  br label %cond.end377, !dbg !7154

cond.end377:                                      ; preds = %cond.false376, %cond.true373
  %cond378 = phi i32 [ %210, %cond.true373 ], [ 0, %cond.false376 ], !dbg !7154
  %call379 = call i32 @gimplify_arg(%union.tree_node** %arrayidx355, %struct.gimple_seq_d** %199, i32 %cond378), !dbg !7155
  store i32 %call379, i32* %t, align 4, !dbg !7156
  %211 = load i32, i32* %t, align 4, !dbg !7157
  %cmp380 = icmp eq i32 %211, -2, !dbg !7159
  br i1 %cmp380, label %if.then382, label %if.end383, !dbg !7160

if.then382:                                       ; preds = %cond.end377
  store i32 -2, i32* %ret, align 4, !dbg !7161
  br label %if.end383, !dbg !7162

if.end383:                                        ; preds = %if.then382, %cond.end377
  br label %if.end384, !dbg !7163

if.end384:                                        ; preds = %if.end383, %lor.lhs.false348
  br label %for.inc385, !dbg !7164

for.inc385:                                       ; preds = %if.end384
  %212 = load i32, i32* %i, align 4, !dbg !7165
  %dec386 = add nsw i32 %212, -1, !dbg !7165
  store i32 %dec386, i32* %i, align 4, !dbg !7165
  br label %for.cond342, !dbg !7166, !llvm.loop !7167

for.end387:                                       ; preds = %for.cond342
  br label %if.end388, !dbg !7169

if.end388:                                        ; preds = %for.end387, %if.end337
  %213 = load i8, i8* %want_value.addr, align 1, !dbg !7170
  %conv389 = zext i8 %213 to i32, !dbg !7170
  %tobool390 = icmp ne i32 %conv389, 0, !dbg !7170
  br i1 %tobool390, label %land.lhs.true391, label %if.end405, !dbg !7172

land.lhs.true391:                                 ; preds = %if.end388
  %214 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !7173
  %tobool392 = icmp ne %union.tree_node* %214, null, !dbg !7173
  br i1 %tobool392, label %land.lhs.true393, label %if.end405, !dbg !7174

land.lhs.true393:                                 ; preds = %land.lhs.true391
  %215 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !7175
  %common394 = bitcast %union.tree_node* %215 to %struct.tree_common*, !dbg !7175
  %type395 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common394, i32 0, i32 2, !dbg !7175
  %216 = load %union.tree_node*, %union.tree_node** %type395, align 8, !dbg !7175
  %common396 = bitcast %union.tree_node* %216 to %struct.tree_common*, !dbg !7175
  %type397 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common396, i32 0, i32 2, !dbg !7175
  %217 = load %union.tree_node*, %union.tree_node** %type397, align 8, !dbg !7175
  %base398 = bitcast %union.tree_node* %217 to %struct.tree_base*, !dbg !7175
  %218 = bitcast %struct.tree_base* %base398 to i64*, !dbg !7175
  %bf.load399 = load i64, i64* %218, align 8, !dbg !7175
  %bf.clear400 = and i64 %bf.load399, 65535, !dbg !7175
  %bf.cast401 = trunc i64 %bf.clear400 to i32, !dbg !7175
  %cmp402 = icmp eq i32 %bf.cast401, 19, !dbg !7175
  br i1 %cmp402, label %if.then404, label %if.end405, !dbg !7176

if.then404:                                       ; preds = %land.lhs.true393
  %219 = load i32, i32* %loc, align 4, !dbg !7177
  call void (i32, i8*, ...) @error_at(i32 %219, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.8, i64 0, i64 0)), !dbg !7179
  store i32 -2, i32* %ret, align 4, !dbg !7180
  br label %if.end405, !dbg !7181

if.end405:                                        ; preds = %if.then404, %land.lhs.true393, %land.lhs.true391, %if.end388
  %220 = load i32, i32* %ret, align 4, !dbg !7182
  %cmp406 = icmp ne i32 %220, -2, !dbg !7184
  br i1 %cmp406, label %if.then408, label %if.else421, !dbg !7185

if.then408:                                       ; preds = %if.end405
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_tree409, metadata !7186, metadata !DIExpression()), !dbg !7188
  %221 = load i32, i32* @input_location, align 4, !dbg !7189
  %222 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7190
  %223 = load %union.tree_node*, %union.tree_node** %222, align 8, !dbg !7191
  %224 = load i8, i8* %want_value.addr, align 1, !dbg !7192
  %tobool410 = icmp ne i8 %224, 0, !dbg !7193
  %lnot411 = xor i1 %tobool410, true, !dbg !7193
  %lnot.ext412 = zext i1 %lnot411 to i32, !dbg !7193
  %conv413 = trunc i32 %lnot.ext412 to i8, !dbg !7193
  %call414 = call %union.tree_node* @fold_call_expr(i32 %221, %union.tree_node* %223, i8 zeroext %conv413), !dbg !7194
  store %union.tree_node* %call414, %union.tree_node** %new_tree409, align 8, !dbg !7188
  %225 = load %union.tree_node*, %union.tree_node** %new_tree409, align 8, !dbg !7195
  %tobool415 = icmp ne %union.tree_node* %225, null, !dbg !7195
  br i1 %tobool415, label %land.lhs.true416, label %if.end420, !dbg !7197

land.lhs.true416:                                 ; preds = %if.then408
  %226 = load %union.tree_node*, %union.tree_node** %new_tree409, align 8, !dbg !7198
  %227 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7199
  %228 = load %union.tree_node*, %union.tree_node** %227, align 8, !dbg !7200
  %cmp417 = icmp ne %union.tree_node* %226, %228, !dbg !7201
  br i1 %cmp417, label %if.then419, label %if.end420, !dbg !7202

if.then419:                                       ; preds = %land.lhs.true416
  %229 = load %union.tree_node*, %union.tree_node** %new_tree409, align 8, !dbg !7203
  %230 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7205
  store %union.tree_node* %229, %union.tree_node** %230, align 8, !dbg !7206
  store i32 0, i32* %retval, align 4, !dbg !7207
  br label %return, !dbg !7207

if.end420:                                        ; preds = %land.lhs.true416, %if.then408
  br label %if.end422, !dbg !7208

if.else421:                                       ; preds = %if.end405
  %231 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !7209
  %232 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7211
  store %union.tree_node* %231, %union.tree_node** %232, align 8, !dbg !7212
  store i32 -2, i32* %retval, align 4, !dbg !7213
  br label %return, !dbg !7213

if.end422:                                        ; preds = %if.end420
  %233 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7214
  %234 = load %union.tree_node*, %union.tree_node** %233, align 8, !dbg !7214
  %base423 = bitcast %union.tree_node* %234 to %struct.tree_base*, !dbg !7214
  %235 = bitcast %struct.tree_base* %base423 to i64*, !dbg !7214
  %bf.load424 = load i64, i64* %235, align 8, !dbg !7214
  %bf.clear425 = and i64 %bf.load424, 65535, !dbg !7214
  %bf.cast426 = trunc i64 %bf.clear425 to i32, !dbg !7214
  %cmp427 = icmp eq i32 %bf.cast426, 59, !dbg !7216
  br i1 %cmp427, label %if.then429, label %if.end440, !dbg !7217

if.then429:                                       ; preds = %if.end422
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !7218, metadata !DIExpression()), !dbg !7220
  %236 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7221
  %237 = load %union.tree_node*, %union.tree_node** %236, align 8, !dbg !7222
  %call430 = call i32 @call_expr_flags(%union.tree_node* %237), !dbg !7223
  store i32 %call430, i32* %flags, align 4, !dbg !7220
  %238 = load i32, i32* %flags, align 4, !dbg !7224
  %and = and i32 %238, 3, !dbg !7226
  %tobool431 = icmp ne i32 %and, 0, !dbg !7226
  br i1 %tobool431, label %land.lhs.true432, label %if.end439, !dbg !7227

land.lhs.true432:                                 ; preds = %if.then429
  %239 = load i32, i32* %flags, align 4, !dbg !7228
  %and433 = and i32 %239, 4, !dbg !7229
  %tobool434 = icmp ne i32 %and433, 0, !dbg !7229
  br i1 %tobool434, label %if.end439, label %if.then435, !dbg !7230

if.then435:                                       ; preds = %land.lhs.true432
  %240 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7231
  %241 = load %union.tree_node*, %union.tree_node** %240, align 8, !dbg !7231
  %base436 = bitcast %union.tree_node* %241 to %struct.tree_base*, !dbg !7231
  %242 = bitcast %struct.tree_base* %base436 to i64*, !dbg !7231
  %bf.load437 = load i64, i64* %242, align 8, !dbg !7232
  %bf.clear438 = and i64 %bf.load437, -65537, !dbg !7232
  store i64 %bf.clear438, i64* %242, align 8, !dbg !7232
  br label %if.end439, !dbg !7231

if.end439:                                        ; preds = %if.then435, %land.lhs.true432, %if.then429
  br label %if.end440, !dbg !7233

if.end440:                                        ; preds = %if.end439, %if.end422
  %243 = load i8, i8* %want_value.addr, align 1, !dbg !7234
  %tobool441 = icmp ne i8 %243, 0, !dbg !7234
  br i1 %tobool441, label %if.end444, label %if.then442, !dbg !7236

if.then442:                                       ; preds = %if.end440
  %244 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7237
  %245 = load %union.tree_node*, %union.tree_node** %244, align 8, !dbg !7239
  %call443 = call %union.gimple_statement_d* @gimple_build_call_from_tree(%union.tree_node* %245), !dbg !7240
  store %union.gimple_statement_d* %call443, %union.gimple_statement_d** %call, align 8, !dbg !7241
  %246 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !7242
  %247 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call, align 8, !dbg !7243
  call void @gimplify_seq_add_stmt(%struct.gimple_seq_d** %246, %union.gimple_statement_d* %247), !dbg !7244
  %248 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7245
  store %union.tree_node* null, %union.tree_node** %248, align 8, !dbg !7246
  br label %if.end444, !dbg !7247

if.end444:                                        ; preds = %if.then442, %if.end440
  %249 = load i32, i32* %ret, align 4, !dbg !7248
  store i32 %249, i32* %retval, align 4, !dbg !7249
  br label %return, !dbg !7249

return:                                           ; preds = %if.end444, %if.else421, %if.then419, %cond.end125, %cond.end97, %if.then53
  %250 = load i32, i32* %retval, align 4, !dbg !7250
  ret i32 %250, !dbg !7250
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimplify_compound_expr(%union.tree_node** %expr_p, %struct.gimple_seq_d** %pre_p, i8 zeroext %want_value) #0 !dbg !7251 {
entry:
  %retval = alloca i32, align 4
  %expr_p.addr = alloca %union.tree_node**, align 8
  %pre_p.addr = alloca %struct.gimple_seq_d**, align 8
  %want_value.addr = alloca i8, align 1
  %t = alloca %union.tree_node*, align 8
  %sub_p = alloca %union.tree_node**, align 8
  store %union.tree_node** %expr_p, %union.tree_node*** %expr_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %expr_p.addr, metadata !7252, metadata !DIExpression()), !dbg !7253
  store %struct.gimple_seq_d** %pre_p, %struct.gimple_seq_d*** %pre_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %pre_p.addr, metadata !7254, metadata !DIExpression()), !dbg !7255
  store i8 %want_value, i8* %want_value.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %want_value.addr, metadata !7256, metadata !DIExpression()), !dbg !7257
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !7258, metadata !DIExpression()), !dbg !7259
  %0 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7260
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !7261
  store %union.tree_node* %1, %union.tree_node** %t, align 8, !dbg !7259
  br label %do.body, !dbg !7262

do.body:                                          ; preds = %do.cond, %entry
  call void @llvm.dbg.declare(metadata %union.tree_node*** %sub_p, metadata !7263, metadata !DIExpression()), !dbg !7265
  %2 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7266
  %exp = bitcast %union.tree_node* %2 to %struct.tree_exp*, !dbg !7266
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !7266
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !7266
  store %union.tree_node** %arrayidx, %union.tree_node*** %sub_p, align 8, !dbg !7265
  %3 = load %union.tree_node**, %union.tree_node*** %sub_p, align 8, !dbg !7267
  %4 = load %union.tree_node*, %union.tree_node** %3, align 8, !dbg !7267
  %base = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !7267
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !7267
  %bf.load = load i64, i64* %5, align 8, !dbg !7267
  %bf.clear = and i64 %bf.load, 65535, !dbg !7267
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7267
  %cmp = icmp eq i32 %bf.cast, 52, !dbg !7269
  br i1 %cmp, label %if.then, label %if.else, !dbg !7270

if.then:                                          ; preds = %do.body
  %6 = load %union.tree_node**, %union.tree_node*** %sub_p, align 8, !dbg !7271
  %7 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !7272
  %call = call i32 @gimplify_compound_expr(%union.tree_node** %6, %struct.gimple_seq_d** %7, i8 zeroext 0), !dbg !7273
  br label %if.end, !dbg !7273

if.else:                                          ; preds = %do.body
  %8 = load %union.tree_node**, %union.tree_node*** %sub_p, align 8, !dbg !7274
  %9 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !7275
  %call1 = call zeroext i8 @gimplify_stmt(%union.tree_node** %8, %struct.gimple_seq_d** %9), !dbg !7276
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %10 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7277
  %exp2 = bitcast %union.tree_node* %10 to %struct.tree_exp*, !dbg !7277
  %operands3 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp2, i32 0, i32 3, !dbg !7277
  %arrayidx4 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands3, i64 0, i64 1, !dbg !7277
  %11 = load %union.tree_node*, %union.tree_node** %arrayidx4, align 8, !dbg !7277
  store %union.tree_node* %11, %union.tree_node** %t, align 8, !dbg !7278
  br label %do.cond, !dbg !7279

do.cond:                                          ; preds = %if.end
  %12 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7280
  %base5 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !7280
  %13 = bitcast %struct.tree_base* %base5 to i64*, !dbg !7280
  %bf.load6 = load i64, i64* %13, align 8, !dbg !7280
  %bf.clear7 = and i64 %bf.load6, 65535, !dbg !7280
  %bf.cast8 = trunc i64 %bf.clear7 to i32, !dbg !7280
  %cmp9 = icmp eq i32 %bf.cast8, 52, !dbg !7281
  br i1 %cmp9, label %do.body, label %do.end, !dbg !7279, !llvm.loop !7282

do.end:                                           ; preds = %do.cond
  %14 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7284
  %15 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7285
  store %union.tree_node* %14, %union.tree_node** %15, align 8, !dbg !7286
  %16 = load i8, i8* %want_value.addr, align 1, !dbg !7287
  %tobool = icmp ne i8 %16, 0, !dbg !7287
  br i1 %tobool, label %if.then10, label %if.else11, !dbg !7289

if.then10:                                        ; preds = %do.end
  store i32 0, i32* %retval, align 4, !dbg !7290
  br label %return, !dbg !7290

if.else11:                                        ; preds = %do.end
  %17 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7291
  %18 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !7293
  %call12 = call zeroext i8 @gimplify_stmt(%union.tree_node** %17, %struct.gimple_seq_d** %18), !dbg !7294
  store i32 1, i32* %retval, align 4, !dbg !7295
  br label %return, !dbg !7295

return:                                           ; preds = %if.else11, %if.then10
  %19 = load i32, i32* %retval, align 4, !dbg !7296
  ret i32 %19, !dbg !7296
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimplify_compound_literal_expr(%union.tree_node** %expr_p, %struct.gimple_seq_d** %pre_p) #0 !dbg !7297 {
entry:
  %expr_p.addr = alloca %union.tree_node**, align 8
  %pre_p.addr = alloca %struct.gimple_seq_d**, align 8
  %decl_s = alloca %union.tree_node*, align 8
  %decl = alloca %union.tree_node*, align 8
  store %union.tree_node** %expr_p, %union.tree_node*** %expr_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %expr_p.addr, metadata !7300, metadata !DIExpression()), !dbg !7301
  store %struct.gimple_seq_d** %pre_p, %struct.gimple_seq_d*** %pre_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %pre_p.addr, metadata !7302, metadata !DIExpression()), !dbg !7303
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl_s, metadata !7304, metadata !DIExpression()), !dbg !7305
  %0 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7306
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !7306
  %exp = bitcast %union.tree_node* %1 to %struct.tree_exp*, !dbg !7306
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !7306
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !7306
  %2 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !7306
  store %union.tree_node* %2, %union.tree_node** %decl_s, align 8, !dbg !7305
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !7307, metadata !DIExpression()), !dbg !7308
  %3 = load %union.tree_node*, %union.tree_node** %decl_s, align 8, !dbg !7309
  %exp1 = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !7309
  %operands2 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 3, !dbg !7309
  %arrayidx3 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2, i64 0, i64 0, !dbg !7309
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx3, align 8, !dbg !7309
  store %union.tree_node* %4, %union.tree_node** %decl, align 8, !dbg !7308
  %5 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7310
  %6 = load %union.tree_node*, %union.tree_node** %5, align 8, !dbg !7310
  %base = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !7310
  %7 = bitcast %struct.tree_base* %base to i64*, !dbg !7310
  %bf.load = load i64, i64* %7, align 8, !dbg !7310
  %bf.lshr = lshr i64 %bf.load, 18, !dbg !7310
  %bf.clear = and i64 %bf.lshr, 1, !dbg !7310
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7310
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !7310
  br i1 %tobool, label %if.then, label %if.end, !dbg !7312

if.then:                                          ; preds = %entry
  %8 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7313
  %base4 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !7313
  %9 = bitcast %struct.tree_base* %base4 to i64*, !dbg !7313
  %bf.load5 = load i64, i64* %9, align 8, !dbg !7314
  %bf.clear6 = and i64 %bf.load5, -262145, !dbg !7314
  %bf.set = or i64 %bf.clear6, 262144, !dbg !7314
  store i64 %bf.set, i64* %9, align 8, !dbg !7314
  br label %if.end, !dbg !7313

if.end:                                           ; preds = %if.then, %entry
  %10 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7315
  %common = bitcast %union.tree_node* %10 to %struct.tree_common*, !dbg !7315
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7315
  %11 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7315
  %base7 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !7315
  %12 = bitcast %struct.tree_base* %base7 to i64*, !dbg !7315
  %bf.load8 = load i64, i64* %12, align 8, !dbg !7315
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !7315
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !7315
  %cmp = icmp eq i32 %bf.cast10, 13, !dbg !7317
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !7318

lor.lhs.false:                                    ; preds = %if.end
  %13 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7319
  %common11 = bitcast %union.tree_node* %13 to %struct.tree_common*, !dbg !7319
  %type12 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common11, i32 0, i32 2, !dbg !7319
  %14 = load %union.tree_node*, %union.tree_node** %type12, align 8, !dbg !7319
  %base13 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !7319
  %15 = bitcast %struct.tree_base* %base13 to i64*, !dbg !7319
  %bf.load14 = load i64, i64* %15, align 8, !dbg !7319
  %bf.clear15 = and i64 %bf.load14, 65535, !dbg !7319
  %bf.cast16 = trunc i64 %bf.clear15 to i32, !dbg !7319
  %cmp17 = icmp eq i32 %bf.cast16, 14, !dbg !7320
  br i1 %cmp17, label %land.lhs.true, label %if.end30, !dbg !7321

land.lhs.true:                                    ; preds = %lor.lhs.false, %if.end
  %16 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7322
  %base18 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !7322
  %17 = bitcast %struct.tree_base* %base18 to i64*, !dbg !7322
  %bf.load19 = load i64, i64* %17, align 8, !dbg !7322
  %bf.lshr20 = lshr i64 %bf.load19, 19, !dbg !7322
  %bf.clear21 = and i64 %bf.lshr20, 1, !dbg !7322
  %bf.cast22 = trunc i64 %bf.clear21 to i32, !dbg !7322
  %tobool23 = icmp ne i32 %bf.cast22, 0, !dbg !7322
  br i1 %tobool23, label %if.end30, label %land.lhs.true24, !dbg !7323

land.lhs.true24:                                  ; preds = %land.lhs.true
  %18 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7324
  %call = call zeroext i8 @needs_to_live_in_memory(%union.tree_node* %18), !dbg !7325
  %tobool25 = icmp ne i8 %call, 0, !dbg !7325
  br i1 %tobool25, label %if.end30, label %if.then26, !dbg !7326

if.then26:                                        ; preds = %land.lhs.true24
  %19 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7327
  %decl_common = bitcast %union.tree_node* %19 to %struct.tree_decl_common*, !dbg !7327
  %gimple_reg_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !7327
  %20 = bitcast i40* %gimple_reg_flag to i64*, !dbg !7327
  %bf.load27 = load i64, i64* %20, align 8, !dbg !7328
  %bf.clear28 = and i64 %bf.load27, -134217729, !dbg !7328
  %bf.set29 = or i64 %bf.clear28, 134217728, !dbg !7328
  store i64 %bf.set29, i64* %20, align 8, !dbg !7328
  br label %if.end30, !dbg !7327

if.end30:                                         ; preds = %if.then26, %land.lhs.true24, %land.lhs.true, %lor.lhs.false
  %21 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7329
  %decl_minimal = bitcast %union.tree_node* %21 to %struct.tree_decl_minimal*, !dbg !7329
  %name = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 3, !dbg !7329
  %22 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !7329
  %cmp31 = icmp eq %union.tree_node* %22, null, !dbg !7331
  br i1 %cmp31, label %land.lhs.true32, label %if.end38, !dbg !7332

land.lhs.true32:                                  ; preds = %if.end30
  %23 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7333
  %decl_with_vis = bitcast %union.tree_node* %23 to %struct.tree_decl_with_vis*, !dbg !7333
  %seen_in_bind_expr = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 4, !dbg !7333
  %24 = bitcast i24* %seen_in_bind_expr to i32*, !dbg !7333
  %bf.load33 = load i32, i32* %24, align 8, !dbg !7333
  %bf.lshr34 = lshr i32 %bf.load33, 8, !dbg !7333
  %bf.clear35 = and i32 %bf.lshr34, 1, !dbg !7333
  %tobool36 = icmp ne i32 %bf.clear35, 0, !dbg !7333
  br i1 %tobool36, label %if.end38, label %if.then37, !dbg !7334

if.then37:                                        ; preds = %land.lhs.true32
  %25 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7335
  call void @gimple_add_tmp_var(%union.tree_node* %25), !dbg !7336
  br label %if.end38, !dbg !7336

if.end38:                                         ; preds = %if.then37, %land.lhs.true32, %if.end30
  %26 = load %union.tree_node*, %union.tree_node** %decl_s, align 8, !dbg !7337
  %27 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !7338
  call void @gimplify_and_add(%union.tree_node* %26, %struct.gimple_seq_d** %27), !dbg !7339
  %28 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7340
  %29 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7341
  store %union.tree_node* %28, %union.tree_node** %29, align 8, !dbg !7342
  ret i32 0, !dbg !7343
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimplify_modify_expr(%union.tree_node** %expr_p, %struct.gimple_seq_d** %pre_p, %struct.gimple_seq_d** %post_p, i8 zeroext %want_value) #0 !dbg !7344 {
entry:
  %retval = alloca i32, align 4
  %expr_p.addr = alloca %union.tree_node**, align 8
  %pre_p.addr = alloca %struct.gimple_seq_d**, align 8
  %post_p.addr = alloca %struct.gimple_seq_d**, align 8
  %want_value.addr = alloca i8, align 1
  %from_p = alloca %union.tree_node**, align 8
  %to_p = alloca %union.tree_node**, align 8
  %ret = alloca i32, align 4
  %assign = alloca %union.gimple_statement_d*, align 8
  %loc = alloca i32, align 4
  %from = alloca %union.tree_node*, align 8
  %size = alloca %union.tree_node*, align 8
  store %union.tree_node** %expr_p, %union.tree_node*** %expr_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %expr_p.addr, metadata !7345, metadata !DIExpression()), !dbg !7346
  store %struct.gimple_seq_d** %pre_p, %struct.gimple_seq_d*** %pre_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %pre_p.addr, metadata !7347, metadata !DIExpression()), !dbg !7348
  store %struct.gimple_seq_d** %post_p, %struct.gimple_seq_d*** %post_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %post_p.addr, metadata !7349, metadata !DIExpression()), !dbg !7350
  store i8 %want_value, i8* %want_value.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %want_value.addr, metadata !7351, metadata !DIExpression()), !dbg !7352
  call void @llvm.dbg.declare(metadata %union.tree_node*** %from_p, metadata !7353, metadata !DIExpression()), !dbg !7354
  %0 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7355
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !7355
  %exp = bitcast %union.tree_node* %1 to %struct.tree_exp*, !dbg !7355
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !7355
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !7355
  store %union.tree_node** %arrayidx, %union.tree_node*** %from_p, align 8, !dbg !7354
  call void @llvm.dbg.declare(metadata %union.tree_node*** %to_p, metadata !7356, metadata !DIExpression()), !dbg !7357
  %2 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7358
  %3 = load %union.tree_node*, %union.tree_node** %2, align 8, !dbg !7358
  %exp1 = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !7358
  %operands2 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 3, !dbg !7358
  %arrayidx3 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2, i64 0, i64 0, !dbg !7358
  store %union.tree_node** %arrayidx3, %union.tree_node*** %to_p, align 8, !dbg !7357
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !7359, metadata !DIExpression()), !dbg !7360
  store i32 -1, i32* %ret, align 4, !dbg !7360
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %assign, metadata !7361, metadata !DIExpression()), !dbg !7362
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !7363, metadata !DIExpression()), !dbg !7364
  %4 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7365
  %5 = load %union.tree_node*, %union.tree_node** %4, align 8, !dbg !7365
  %base = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !7365
  %6 = bitcast %struct.tree_base* %base to i64*, !dbg !7365
  %bf.load = load i64, i64* %6, align 8, !dbg !7365
  %bf.clear = and i64 %bf.load, 65535, !dbg !7365
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7365
  %idxprom = sext i32 %bf.cast to i64, !dbg !7365
  %arrayidx4 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !7365
  %7 = load i32, i32* %arrayidx4, align 4, !dbg !7365
  %cmp = icmp uge i32 %7, 4, !dbg !7365
  br i1 %cmp, label %land.lhs.true, label %cond.false, !dbg !7365

land.lhs.true:                                    ; preds = %entry
  %8 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7365
  %9 = load %union.tree_node*, %union.tree_node** %8, align 8, !dbg !7365
  %base5 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !7365
  %10 = bitcast %struct.tree_base* %base5 to i64*, !dbg !7365
  %bf.load6 = load i64, i64* %10, align 8, !dbg !7365
  %bf.clear7 = and i64 %bf.load6, 65535, !dbg !7365
  %bf.cast8 = trunc i64 %bf.clear7 to i32, !dbg !7365
  %idxprom9 = sext i32 %bf.cast8 to i64, !dbg !7365
  %arrayidx10 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom9, !dbg !7365
  %11 = load i32, i32* %arrayidx10, align 4, !dbg !7365
  %cmp11 = icmp ule i32 %11, 10, !dbg !7365
  br i1 %cmp11, label %cond.true, label %cond.false, !dbg !7365

cond.true:                                        ; preds = %land.lhs.true
  %12 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7365
  %13 = load %union.tree_node*, %union.tree_node** %12, align 8, !dbg !7365
  %exp12 = bitcast %union.tree_node* %13 to %struct.tree_exp*, !dbg !7365
  %locus = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp12, i32 0, i32 1, !dbg !7365
  %14 = load i32, i32* %locus, align 8, !dbg !7365
  br label %cond.end, !dbg !7365

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !7365

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %14, %cond.true ], [ 0, %cond.false ], !dbg !7365
  store i32 %cond, i32* %loc, align 4, !dbg !7364
  %15 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7366
  %16 = load %union.tree_node*, %union.tree_node** %15, align 8, !dbg !7366
  %base13 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !7366
  %17 = bitcast %struct.tree_base* %base13 to i64*, !dbg !7366
  %bf.load14 = load i64, i64* %17, align 8, !dbg !7366
  %bf.clear15 = and i64 %bf.load14, 65535, !dbg !7366
  %bf.cast16 = trunc i64 %bf.clear15 to i32, !dbg !7366
  %cmp17 = icmp eq i32 %bf.cast16, 53, !dbg !7366
  br i1 %cmp17, label %cond.false24, label %lor.lhs.false, !dbg !7366

lor.lhs.false:                                    ; preds = %cond.end
  %18 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7366
  %19 = load %union.tree_node*, %union.tree_node** %18, align 8, !dbg !7366
  %base18 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !7366
  %20 = bitcast %struct.tree_base* %base18 to i64*, !dbg !7366
  %bf.load19 = load i64, i64* %20, align 8, !dbg !7366
  %bf.clear20 = and i64 %bf.load19, 65535, !dbg !7366
  %bf.cast21 = trunc i64 %bf.clear20 to i32, !dbg !7366
  %cmp22 = icmp eq i32 %bf.cast21, 54, !dbg !7366
  br i1 %cmp22, label %cond.false24, label %cond.true23, !dbg !7366

cond.true23:                                      ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 4411, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7366
  br label %cond.end25, !dbg !7366

cond.false24:                                     ; preds = %lor.lhs.false, %cond.end
  br label %cond.end25, !dbg !7366

cond.end25:                                       ; preds = %cond.false24, %cond.true23
  %cond26 = phi i32 [ 0, %cond.true23 ], [ 0, %cond.false24 ], !dbg !7366
  %21 = load %union.tree_node**, %union.tree_node*** %to_p, align 8, !dbg !7367
  %22 = load %union.tree_node*, %union.tree_node** %21, align 8, !dbg !7367
  %common = bitcast %union.tree_node* %22 to %struct.tree_common*, !dbg !7367
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7367
  %23 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7367
  %base27 = bitcast %union.tree_node* %23 to %struct.tree_base*, !dbg !7367
  %24 = bitcast %struct.tree_base* %base27 to i64*, !dbg !7367
  %bf.load28 = load i64, i64* %24, align 8, !dbg !7367
  %bf.clear29 = and i64 %bf.load28, 65535, !dbg !7367
  %bf.cast30 = trunc i64 %bf.clear29 to i32, !dbg !7367
  %cmp31 = icmp eq i32 %bf.cast30, 10, !dbg !7367
  br i1 %cmp31, label %if.then, label %lor.lhs.false32, !dbg !7367

lor.lhs.false32:                                  ; preds = %cond.end25
  %25 = load %union.tree_node**, %union.tree_node*** %to_p, align 8, !dbg !7367
  %26 = load %union.tree_node*, %union.tree_node** %25, align 8, !dbg !7367
  %common33 = bitcast %union.tree_node* %26 to %struct.tree_common*, !dbg !7367
  %type34 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common33, i32 0, i32 2, !dbg !7367
  %27 = load %union.tree_node*, %union.tree_node** %type34, align 8, !dbg !7367
  %base35 = bitcast %union.tree_node* %27 to %struct.tree_base*, !dbg !7367
  %28 = bitcast %struct.tree_base* %base35 to i64*, !dbg !7367
  %bf.load36 = load i64, i64* %28, align 8, !dbg !7367
  %bf.clear37 = and i64 %bf.load36, 65535, !dbg !7367
  %bf.cast38 = trunc i64 %bf.clear37 to i32, !dbg !7367
  %cmp39 = icmp eq i32 %bf.cast38, 12, !dbg !7367
  br i1 %cmp39, label %if.then, label %if.end49, !dbg !7369

if.then:                                          ; preds = %lor.lhs.false32, %cond.end25
  %29 = load %union.tree_node**, %union.tree_node*** %from_p, align 8, !dbg !7370
  %30 = load %union.tree_node*, %union.tree_node** %29, align 8, !dbg !7370
  %call = call %union.tree_node* @tree_ssa_strip_useless_type_conversions(%union.tree_node* %30), !dbg !7370
  %31 = load %union.tree_node**, %union.tree_node*** %from_p, align 8, !dbg !7370
  store %union.tree_node* %call, %union.tree_node** %31, align 8, !dbg !7370
  %32 = load %union.tree_node**, %union.tree_node*** %to_p, align 8, !dbg !7372
  %33 = load %union.tree_node*, %union.tree_node** %32, align 8, !dbg !7372
  %common40 = bitcast %union.tree_node* %33 to %struct.tree_common*, !dbg !7372
  %type41 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common40, i32 0, i32 2, !dbg !7372
  %34 = load %union.tree_node*, %union.tree_node** %type41, align 8, !dbg !7372
  %35 = load %union.tree_node**, %union.tree_node*** %from_p, align 8, !dbg !7374
  %36 = load %union.tree_node*, %union.tree_node** %35, align 8, !dbg !7374
  %common42 = bitcast %union.tree_node* %36 to %struct.tree_common*, !dbg !7374
  %type43 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common42, i32 0, i32 2, !dbg !7374
  %37 = load %union.tree_node*, %union.tree_node** %type43, align 8, !dbg !7374
  %call44 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %34, %union.tree_node* %37), !dbg !7375
  %tobool = icmp ne i8 %call44, 0, !dbg !7375
  br i1 %tobool, label %if.end, label %if.then45, !dbg !7376

if.then45:                                        ; preds = %if.then
  %38 = load i32, i32* %loc, align 4, !dbg !7377
  %39 = load %union.tree_node**, %union.tree_node*** %to_p, align 8, !dbg !7378
  %40 = load %union.tree_node*, %union.tree_node** %39, align 8, !dbg !7378
  %common46 = bitcast %union.tree_node* %40 to %struct.tree_common*, !dbg !7378
  %type47 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common46, i32 0, i32 2, !dbg !7378
  %41 = load %union.tree_node*, %union.tree_node** %type47, align 8, !dbg !7378
  %42 = load %union.tree_node**, %union.tree_node*** %from_p, align 8, !dbg !7379
  %43 = load %union.tree_node*, %union.tree_node** %42, align 8, !dbg !7380
  %call48 = call %union.tree_node* @fold_convert_loc(i32 %38, %union.tree_node* %41, %union.tree_node* %43), !dbg !7381
  %44 = load %union.tree_node**, %union.tree_node*** %from_p, align 8, !dbg !7382
  store %union.tree_node* %call48, %union.tree_node** %44, align 8, !dbg !7383
  br label %if.end, !dbg !7384

if.end:                                           ; preds = %if.then45, %if.then
  br label %if.end49, !dbg !7385

if.end49:                                         ; preds = %if.end, %lor.lhs.false32
  %45 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7386
  %46 = load %union.tree_node**, %union.tree_node*** %from_p, align 8, !dbg !7387
  %47 = load %union.tree_node**, %union.tree_node*** %to_p, align 8, !dbg !7388
  %48 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !7389
  %49 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !7390
  %50 = load i8, i8* %want_value.addr, align 1, !dbg !7391
  %call50 = call i32 @gimplify_modify_expr_rhs(%union.tree_node** %45, %union.tree_node** %46, %union.tree_node** %47, %struct.gimple_seq_d** %48, %struct.gimple_seq_d** %49, i8 zeroext %50), !dbg !7392
  store i32 %call50, i32* %ret, align 4, !dbg !7393
  %51 = load i32, i32* %ret, align 4, !dbg !7394
  %cmp51 = icmp ne i32 %51, -1, !dbg !7396
  br i1 %cmp51, label %if.then52, label %if.end53, !dbg !7397

if.then52:                                        ; preds = %if.end49
  %52 = load i32, i32* %ret, align 4, !dbg !7398
  store i32 %52, i32* %retval, align 4, !dbg !7399
  br label %return, !dbg !7399

if.end53:                                         ; preds = %if.end49
  %53 = load %union.tree_node**, %union.tree_node*** %from_p, align 8, !dbg !7400
  %54 = load %union.tree_node*, %union.tree_node** %53, align 8, !dbg !7400
  %common54 = bitcast %union.tree_node* %54 to %struct.tree_common*, !dbg !7400
  %type55 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common54, i32 0, i32 2, !dbg !7400
  %55 = load %union.tree_node*, %union.tree_node** %type55, align 8, !dbg !7400
  %call56 = call zeroext i8 @zero_sized_type(%union.tree_node* %55), !dbg !7402
  %conv = zext i8 %call56 to i32, !dbg !7402
  %tobool57 = icmp ne i32 %conv, 0, !dbg !7402
  br i1 %tobool57, label %land.lhs.true58, label %if.end63, !dbg !7403

land.lhs.true58:                                  ; preds = %if.end53
  %56 = load i8, i8* %want_value.addr, align 1, !dbg !7404
  %tobool59 = icmp ne i8 %56, 0, !dbg !7404
  br i1 %tobool59, label %if.end63, label %if.then60, !dbg !7405

if.then60:                                        ; preds = %land.lhs.true58
  %57 = load %union.tree_node**, %union.tree_node*** %from_p, align 8, !dbg !7406
  %58 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !7408
  %call61 = call zeroext i8 @gimplify_stmt(%union.tree_node** %57, %struct.gimple_seq_d** %58), !dbg !7409
  %59 = load %union.tree_node**, %union.tree_node*** %to_p, align 8, !dbg !7410
  %60 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !7411
  %call62 = call zeroext i8 @gimplify_stmt(%union.tree_node** %59, %struct.gimple_seq_d** %60), !dbg !7412
  %61 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7413
  store %union.tree_node* null, %union.tree_node** %61, align 8, !dbg !7414
  store i32 1, i32* %retval, align 4, !dbg !7415
  br label %return, !dbg !7415

if.end63:                                         ; preds = %land.lhs.true58, %if.end53
  %62 = load %union.tree_node**, %union.tree_node*** %from_p, align 8, !dbg !7416
  call void @maybe_with_size_expr(%union.tree_node** %62), !dbg !7417
  %63 = load %union.tree_node**, %union.tree_node*** %to_p, align 8, !dbg !7418
  %64 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !7419
  %65 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !7420
  %call64 = call i32 @gimplify_expr(%union.tree_node** %63, %struct.gimple_seq_d** %64, %struct.gimple_seq_d** %65, i8 (%union.tree_node*)* @is_gimple_lvalue, i32 2), !dbg !7421
  store i32 %call64, i32* %ret, align 4, !dbg !7422
  %66 = load i32, i32* %ret, align 4, !dbg !7423
  %cmp65 = icmp eq i32 %66, -2, !dbg !7425
  br i1 %cmp65, label %if.then67, label %if.end68, !dbg !7426

if.then67:                                        ; preds = %if.end63
  %67 = load i32, i32* %ret, align 4, !dbg !7427
  store i32 %67, i32* %retval, align 4, !dbg !7428
  br label %return, !dbg !7428

if.end68:                                         ; preds = %if.end63
  %68 = load %union.tree_node**, %union.tree_node*** %from_p, align 8, !dbg !7429
  %69 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !7430
  %70 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !7431
  %71 = load %union.tree_node**, %union.tree_node*** %to_p, align 8, !dbg !7432
  %72 = load %union.tree_node*, %union.tree_node** %71, align 8, !dbg !7433
  %call69 = call i8 (%union.tree_node*)* @rhs_predicate_for(%union.tree_node* %72), !dbg !7434
  %call70 = call i32 @gimplify_expr(%union.tree_node** %68, %struct.gimple_seq_d** %69, %struct.gimple_seq_d** %70, i8 (%union.tree_node*)* %call69, i32 1), !dbg !7435
  store i32 %call70, i32* %ret, align 4, !dbg !7436
  %73 = load i32, i32* %ret, align 4, !dbg !7437
  %cmp71 = icmp eq i32 %73, -2, !dbg !7439
  br i1 %cmp71, label %if.then73, label %if.end74, !dbg !7440

if.then73:                                        ; preds = %if.end68
  %74 = load i32, i32* %ret, align 4, !dbg !7441
  store i32 %74, i32* %retval, align 4, !dbg !7442
  br label %return, !dbg !7442

if.end74:                                         ; preds = %if.end68
  %75 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7443
  %76 = load %union.tree_node**, %union.tree_node*** %from_p, align 8, !dbg !7444
  %77 = load %union.tree_node**, %union.tree_node*** %to_p, align 8, !dbg !7445
  %78 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !7446
  %79 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !7447
  %80 = load i8, i8* %want_value.addr, align 1, !dbg !7448
  %call75 = call i32 @gimplify_modify_expr_rhs(%union.tree_node** %75, %union.tree_node** %76, %union.tree_node** %77, %struct.gimple_seq_d** %78, %struct.gimple_seq_d** %79, i8 zeroext %80), !dbg !7449
  store i32 %call75, i32* %ret, align 4, !dbg !7450
  %81 = load i32, i32* %ret, align 4, !dbg !7451
  %cmp76 = icmp ne i32 %81, -1, !dbg !7453
  br i1 %cmp76, label %if.then78, label %if.end79, !dbg !7454

if.then78:                                        ; preds = %if.end74
  %82 = load i32, i32* %ret, align 4, !dbg !7455
  store i32 %82, i32* %retval, align 4, !dbg !7456
  br label %return, !dbg !7456

if.end79:                                         ; preds = %if.end74
  %83 = load %union.tree_node**, %union.tree_node*** %from_p, align 8, !dbg !7457
  %84 = load %union.tree_node*, %union.tree_node** %83, align 8, !dbg !7457
  %base80 = bitcast %union.tree_node* %84 to %struct.tree_base*, !dbg !7457
  %85 = bitcast %struct.tree_base* %base80 to i64*, !dbg !7457
  %bf.load81 = load i64, i64* %85, align 8, !dbg !7457
  %bf.clear82 = and i64 %bf.load81, 65535, !dbg !7457
  %bf.cast83 = trunc i64 %bf.clear82 to i32, !dbg !7457
  %cmp84 = icmp eq i32 %bf.cast83, 150, !dbg !7459
  br i1 %cmp84, label %if.then86, label %if.end107, !dbg !7460

if.then86:                                        ; preds = %if.end79
  call void @llvm.dbg.declare(metadata %union.tree_node** %from, metadata !7461, metadata !DIExpression()), !dbg !7463
  %86 = load %union.tree_node**, %union.tree_node*** %from_p, align 8, !dbg !7464
  %87 = load %union.tree_node*, %union.tree_node** %86, align 8, !dbg !7464
  %exp87 = bitcast %union.tree_node* %87 to %struct.tree_exp*, !dbg !7464
  %operands88 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp87, i32 0, i32 3, !dbg !7464
  %arrayidx89 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands88, i64 0, i64 0, !dbg !7464
  %88 = load %union.tree_node*, %union.tree_node** %arrayidx89, align 8, !dbg !7464
  store %union.tree_node* %88, %union.tree_node** %from, align 8, !dbg !7463
  call void @llvm.dbg.declare(metadata %union.tree_node** %size, metadata !7465, metadata !DIExpression()), !dbg !7466
  %89 = load %union.tree_node**, %union.tree_node*** %from_p, align 8, !dbg !7467
  %90 = load %union.tree_node*, %union.tree_node** %89, align 8, !dbg !7467
  %exp90 = bitcast %union.tree_node* %90 to %struct.tree_exp*, !dbg !7467
  %operands91 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp90, i32 0, i32 3, !dbg !7467
  %arrayidx92 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands91, i64 0, i64 1, !dbg !7467
  %91 = load %union.tree_node*, %union.tree_node** %arrayidx92, align 8, !dbg !7467
  store %union.tree_node* %91, %union.tree_node** %size, align 8, !dbg !7466
  %92 = load %union.tree_node*, %union.tree_node** %from, align 8, !dbg !7468
  %base93 = bitcast %union.tree_node* %92 to %struct.tree_base*, !dbg !7468
  %93 = bitcast %struct.tree_base* %base93 to i64*, !dbg !7468
  %bf.load94 = load i64, i64* %93, align 8, !dbg !7468
  %bf.clear95 = and i64 %bf.load94, 65535, !dbg !7468
  %bf.cast96 = trunc i64 %bf.clear95 to i32, !dbg !7468
  %cmp97 = icmp eq i32 %bf.cast96, 51, !dbg !7470
  br i1 %cmp97, label %if.then99, label %if.end101, !dbg !7471

if.then99:                                        ; preds = %if.then86
  %94 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7472
  %95 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !7473
  %96 = load i8, i8* %want_value.addr, align 1, !dbg !7474
  %97 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !7475
  %call100 = call i32 @gimplify_modify_expr_to_memset(%union.tree_node** %94, %union.tree_node* %95, i8 zeroext %96, %struct.gimple_seq_d** %97), !dbg !7476
  store i32 %call100, i32* %retval, align 4, !dbg !7477
  br label %return, !dbg !7477

if.end101:                                        ; preds = %if.then86
  %98 = load %union.tree_node*, %union.tree_node** %from, align 8, !dbg !7478
  %call102 = call zeroext i8 @is_gimple_addressable(%union.tree_node* %98), !dbg !7480
  %tobool103 = icmp ne i8 %call102, 0, !dbg !7480
  br i1 %tobool103, label %if.then104, label %if.end106, !dbg !7481

if.then104:                                       ; preds = %if.end101
  %99 = load %union.tree_node*, %union.tree_node** %from, align 8, !dbg !7482
  %100 = load %union.tree_node**, %union.tree_node*** %from_p, align 8, !dbg !7484
  store %union.tree_node* %99, %union.tree_node** %100, align 8, !dbg !7485
  %101 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7486
  %102 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !7487
  %103 = load i8, i8* %want_value.addr, align 1, !dbg !7488
  %104 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !7489
  %call105 = call i32 @gimplify_modify_expr_to_memcpy(%union.tree_node** %101, %union.tree_node* %102, i8 zeroext %103, %struct.gimple_seq_d** %104), !dbg !7490
  store i32 %call105, i32* %retval, align 4, !dbg !7491
  br label %return, !dbg !7491

if.end106:                                        ; preds = %if.end101
  br label %if.end107, !dbg !7492

if.end107:                                        ; preds = %if.end106, %if.end79
  %105 = load %union.tree_node**, %union.tree_node*** %to_p, align 8, !dbg !7493
  %106 = load %union.tree_node*, %union.tree_node** %105, align 8, !dbg !7493
  %base108 = bitcast %union.tree_node* %106 to %struct.tree_base*, !dbg !7493
  %107 = bitcast %struct.tree_base* %base108 to i64*, !dbg !7493
  %bf.load109 = load i64, i64* %107, align 8, !dbg !7493
  %bf.clear110 = and i64 %bf.load109, 65535, !dbg !7493
  %bf.cast111 = trunc i64 %bf.clear110 to i32, !dbg !7493
  %cmp112 = icmp eq i32 %bf.cast111, 43, !dbg !7495
  br i1 %cmp112, label %land.lhs.true121, label %lor.lhs.false114, !dbg !7496

lor.lhs.false114:                                 ; preds = %if.end107
  %108 = load %union.tree_node**, %union.tree_node*** %to_p, align 8, !dbg !7497
  %109 = load %union.tree_node*, %union.tree_node** %108, align 8, !dbg !7497
  %base115 = bitcast %union.tree_node* %109 to %struct.tree_base*, !dbg !7497
  %110 = bitcast %struct.tree_base* %base115 to i64*, !dbg !7497
  %bf.load116 = load i64, i64* %110, align 8, !dbg !7497
  %bf.clear117 = and i64 %bf.load116, 65535, !dbg !7497
  %bf.cast118 = trunc i64 %bf.clear117 to i32, !dbg !7497
  %cmp119 = icmp eq i32 %bf.cast118, 44, !dbg !7498
  br i1 %cmp119, label %land.lhs.true121, label %if.end130, !dbg !7499

land.lhs.true121:                                 ; preds = %lor.lhs.false114, %if.end107
  %111 = load %union.tree_node**, %union.tree_node*** %to_p, align 8, !dbg !7500
  %112 = load %union.tree_node*, %union.tree_node** %111, align 8, !dbg !7500
  %exp122 = bitcast %union.tree_node* %112 to %struct.tree_exp*, !dbg !7500
  %operands123 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp122, i32 0, i32 3, !dbg !7500
  %arrayidx124 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands123, i64 0, i64 0, !dbg !7500
  %113 = load %union.tree_node*, %union.tree_node** %arrayidx124, align 8, !dbg !7500
  %call125 = call zeroext i8 @is_gimple_reg(%union.tree_node* %113), !dbg !7501
  %conv126 = zext i8 %call125 to i32, !dbg !7501
  %tobool127 = icmp ne i32 %conv126, 0, !dbg !7501
  br i1 %tobool127, label %if.then128, label %if.end130, !dbg !7502

if.then128:                                       ; preds = %land.lhs.true121
  %114 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7503
  %115 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !7504
  %116 = load i8, i8* %want_value.addr, align 1, !dbg !7505
  %call129 = call i32 @gimplify_modify_expr_complex_part(%union.tree_node** %114, %struct.gimple_seq_d** %115, i8 zeroext %116), !dbg !7506
  store i32 %call129, i32* %retval, align 4, !dbg !7507
  br label %return, !dbg !7507

if.end130:                                        ; preds = %land.lhs.true121, %lor.lhs.false114
  %117 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !7508
  %into_ssa = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %117, i32 0, i32 10, !dbg !7510
  %118 = load i8, i8* %into_ssa, align 1, !dbg !7510
  %tobool131 = icmp ne i8 %118, 0, !dbg !7508
  br i1 %tobool131, label %if.end179, label %land.lhs.true132, !dbg !7511

land.lhs.true132:                                 ; preds = %if.end130
  %119 = load %union.tree_node**, %union.tree_node*** %from_p, align 8, !dbg !7512
  %120 = load %union.tree_node*, %union.tree_node** %119, align 8, !dbg !7512
  %base133 = bitcast %union.tree_node* %120 to %struct.tree_base*, !dbg !7512
  %121 = bitcast %struct.tree_base* %base133 to i64*, !dbg !7512
  %bf.load134 = load i64, i64* %121, align 8, !dbg !7512
  %bf.clear135 = and i64 %bf.load134, 65535, !dbg !7512
  %bf.cast136 = trunc i64 %bf.clear135 to i32, !dbg !7512
  %idxprom137 = sext i32 %bf.cast136 to i64, !dbg !7512
  %arrayidx138 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom137, !dbg !7512
  %122 = load i32, i32* %arrayidx138, align 4, !dbg !7512
  %cmp139 = icmp eq i32 %122, 3, !dbg !7512
  br i1 %cmp139, label %land.lhs.true141, label %if.end179, !dbg !7513

land.lhs.true141:                                 ; preds = %land.lhs.true132
  %123 = load %union.tree_node**, %union.tree_node*** %from_p, align 8, !dbg !7514
  %124 = load %union.tree_node*, %union.tree_node** %123, align 8, !dbg !7514
  %decl_common = bitcast %union.tree_node* %124 to %struct.tree_decl_common*, !dbg !7514
  %ignored_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !7514
  %125 = bitcast i40* %ignored_flag to i64*, !dbg !7514
  %bf.load142 = load i64, i64* %125, align 8, !dbg !7514
  %bf.lshr = lshr i64 %bf.load142, 10, !dbg !7514
  %bf.clear143 = and i64 %bf.lshr, 1, !dbg !7514
  %bf.cast144 = trunc i64 %bf.clear143 to i32, !dbg !7514
  %tobool145 = icmp ne i32 %bf.cast144, 0, !dbg !7514
  br i1 %tobool145, label %land.lhs.true146, label %if.end179, !dbg !7515

land.lhs.true146:                                 ; preds = %land.lhs.true141
  %126 = load %union.tree_node**, %union.tree_node*** %to_p, align 8, !dbg !7516
  %127 = load %union.tree_node*, %union.tree_node** %126, align 8, !dbg !7516
  %base147 = bitcast %union.tree_node* %127 to %struct.tree_base*, !dbg !7516
  %128 = bitcast %struct.tree_base* %base147 to i64*, !dbg !7516
  %bf.load148 = load i64, i64* %128, align 8, !dbg !7516
  %bf.clear149 = and i64 %bf.load148, 65535, !dbg !7516
  %bf.cast150 = trunc i64 %bf.clear149 to i32, !dbg !7516
  %idxprom151 = sext i32 %bf.cast150 to i64, !dbg !7516
  %arrayidx152 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom151, !dbg !7516
  %129 = load i32, i32* %arrayidx152, align 4, !dbg !7516
  %cmp153 = icmp eq i32 %129, 3, !dbg !7516
  br i1 %cmp153, label %land.lhs.true155, label %if.end179, !dbg !7517

land.lhs.true155:                                 ; preds = %land.lhs.true146
  %130 = load %union.tree_node**, %union.tree_node*** %to_p, align 8, !dbg !7518
  %131 = load %union.tree_node*, %union.tree_node** %130, align 8, !dbg !7518
  %decl_common156 = bitcast %union.tree_node* %131 to %struct.tree_decl_common*, !dbg !7518
  %ignored_flag157 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common156, i32 0, i32 2, !dbg !7518
  %132 = bitcast i40* %ignored_flag157 to i64*, !dbg !7518
  %bf.load158 = load i64, i64* %132, align 8, !dbg !7518
  %bf.lshr159 = lshr i64 %bf.load158, 10, !dbg !7518
  %bf.clear160 = and i64 %bf.lshr159, 1, !dbg !7518
  %bf.cast161 = trunc i64 %bf.clear160 to i32, !dbg !7518
  %tobool162 = icmp ne i32 %bf.cast161, 0, !dbg !7518
  br i1 %tobool162, label %if.end179, label %if.then163, !dbg !7519

if.then163:                                       ; preds = %land.lhs.true155
  %133 = load %union.tree_node**, %union.tree_node*** %from_p, align 8, !dbg !7520
  %134 = load %union.tree_node*, %union.tree_node** %133, align 8, !dbg !7520
  %decl_minimal = bitcast %union.tree_node* %134 to %struct.tree_decl_minimal*, !dbg !7520
  %name = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 3, !dbg !7520
  %135 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !7520
  %tobool164 = icmp ne %union.tree_node* %135, null, !dbg !7520
  br i1 %tobool164, label %if.end175, label %land.lhs.true165, !dbg !7523

land.lhs.true165:                                 ; preds = %if.then163
  %136 = load %union.tree_node**, %union.tree_node*** %to_p, align 8, !dbg !7524
  %137 = load %union.tree_node*, %union.tree_node** %136, align 8, !dbg !7524
  %decl_minimal166 = bitcast %union.tree_node* %137 to %struct.tree_decl_minimal*, !dbg !7524
  %name167 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal166, i32 0, i32 3, !dbg !7524
  %138 = load %union.tree_node*, %union.tree_node** %name167, align 8, !dbg !7524
  %tobool168 = icmp ne %union.tree_node* %138, null, !dbg !7524
  br i1 %tobool168, label %if.then169, label %if.end175, !dbg !7525

if.then169:                                       ; preds = %land.lhs.true165
  %139 = load %union.tree_node**, %union.tree_node*** %to_p, align 8, !dbg !7526
  %140 = load %union.tree_node*, %union.tree_node** %139, align 8, !dbg !7526
  %decl_minimal170 = bitcast %union.tree_node* %140 to %struct.tree_decl_minimal*, !dbg !7526
  %name171 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal170, i32 0, i32 3, !dbg !7526
  %141 = load %union.tree_node*, %union.tree_node** %name171, align 8, !dbg !7526
  %identifier = bitcast %union.tree_node* %141 to %struct.tree_identifier*, !dbg !7526
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1, !dbg !7526
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 0, !dbg !7526
  %142 = load i8*, i8** %str, align 8, !dbg !7526
  %call172 = call %union.tree_node* @create_tmp_var_name(i8* %142), !dbg !7527
  %143 = load %union.tree_node**, %union.tree_node*** %from_p, align 8, !dbg !7528
  %144 = load %union.tree_node*, %union.tree_node** %143, align 8, !dbg !7528
  %decl_minimal173 = bitcast %union.tree_node* %144 to %struct.tree_decl_minimal*, !dbg !7528
  %name174 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal173, i32 0, i32 3, !dbg !7528
  store %union.tree_node* %call172, %union.tree_node** %name174, align 8, !dbg !7529
  br label %if.end175, !dbg !7528

if.end175:                                        ; preds = %if.then169, %land.lhs.true165, %if.then163
  %145 = load %union.tree_node**, %union.tree_node*** %from_p, align 8, !dbg !7530
  %146 = load %union.tree_node*, %union.tree_node** %145, align 8, !dbg !7530
  %decl_common176 = bitcast %union.tree_node* %146 to %struct.tree_decl_common*, !dbg !7530
  %debug_expr_is_from = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common176, i32 0, i32 2, !dbg !7530
  %147 = bitcast i40* %debug_expr_is_from to i64*, !dbg !7530
  %bf.load177 = load i64, i64* %147, align 8, !dbg !7531
  %bf.clear178 = and i64 %bf.load177, -16385, !dbg !7531
  %bf.set = or i64 %bf.clear178, 16384, !dbg !7531
  store i64 %bf.set, i64* %147, align 8, !dbg !7531
  %148 = load %union.tree_node**, %union.tree_node*** %from_p, align 8, !dbg !7532
  %149 = load %union.tree_node*, %union.tree_node** %148, align 8, !dbg !7532
  %150 = load %union.tree_node**, %union.tree_node*** %to_p, align 8, !dbg !7532
  %151 = load %union.tree_node*, %union.tree_node** %150, align 8, !dbg !7532
  call void @decl_debug_expr_insert(%union.tree_node* %149, %union.tree_node* %151), !dbg !7532
  br label %if.end179, !dbg !7533

if.end179:                                        ; preds = %if.end175, %land.lhs.true155, %land.lhs.true146, %land.lhs.true141, %land.lhs.true132, %if.end130
  %152 = load %union.tree_node**, %union.tree_node*** %from_p, align 8, !dbg !7534
  %153 = load %union.tree_node*, %union.tree_node** %152, align 8, !dbg !7534
  %base180 = bitcast %union.tree_node* %153 to %struct.tree_base*, !dbg !7534
  %154 = bitcast %struct.tree_base* %base180 to i64*, !dbg !7534
  %bf.load181 = load i64, i64* %154, align 8, !dbg !7534
  %bf.clear182 = and i64 %bf.load181, 65535, !dbg !7534
  %bf.cast183 = trunc i64 %bf.clear182 to i32, !dbg !7534
  %cmp184 = icmp eq i32 %bf.cast183, 59, !dbg !7536
  br i1 %cmp184, label %if.then186, label %if.else, !dbg !7537

if.then186:                                       ; preds = %if.end179
  %155 = load %union.tree_node**, %union.tree_node*** %from_p, align 8, !dbg !7538
  %156 = load %union.tree_node*, %union.tree_node** %155, align 8, !dbg !7540
  %call187 = call %union.gimple_statement_d* @gimple_build_call_from_tree(%union.tree_node* %156), !dbg !7541
  store %union.gimple_statement_d* %call187, %union.gimple_statement_d** %assign, align 8, !dbg !7542
  %157 = load %union.gimple_statement_d*, %union.gimple_statement_d** %assign, align 8, !dbg !7543
  %call188 = call zeroext i8 @gimple_call_noreturn_p(%union.gimple_statement_d* %157), !dbg !7545
  %tobool189 = icmp ne i8 %call188, 0, !dbg !7545
  br i1 %tobool189, label %if.end191, label %if.then190, !dbg !7546

if.then190:                                       ; preds = %if.then186
  %158 = load %union.gimple_statement_d*, %union.gimple_statement_d** %assign, align 8, !dbg !7547
  %159 = load %union.tree_node**, %union.tree_node*** %to_p, align 8, !dbg !7548
  %160 = load %union.tree_node*, %union.tree_node** %159, align 8, !dbg !7549
  call void @gimple_call_set_lhs(%union.gimple_statement_d* %158, %union.tree_node* %160), !dbg !7550
  br label %if.end191, !dbg !7550

if.end191:                                        ; preds = %if.then190, %if.then186
  br label %if.end216, !dbg !7551

if.else:                                          ; preds = %if.end179
  %161 = load %union.tree_node**, %union.tree_node*** %to_p, align 8, !dbg !7552
  %162 = load %union.tree_node*, %union.tree_node** %161, align 8, !dbg !7552
  %163 = load %union.tree_node**, %union.tree_node*** %from_p, align 8, !dbg !7552
  %164 = load %union.tree_node*, %union.tree_node** %163, align 8, !dbg !7552
  %call192 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %162, %union.tree_node* %164), !dbg !7552
  store %union.gimple_statement_d* %call192, %union.gimple_statement_d** %assign, align 8, !dbg !7554
  %165 = load %union.gimple_statement_d*, %union.gimple_statement_d** %assign, align 8, !dbg !7555
  %166 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7556
  %167 = load %union.tree_node*, %union.tree_node** %166, align 8, !dbg !7556
  %base193 = bitcast %union.tree_node* %167 to %struct.tree_base*, !dbg !7556
  %168 = bitcast %struct.tree_base* %base193 to i64*, !dbg !7556
  %bf.load194 = load i64, i64* %168, align 8, !dbg !7556
  %bf.clear195 = and i64 %bf.load194, 65535, !dbg !7556
  %bf.cast196 = trunc i64 %bf.clear195 to i32, !dbg !7556
  %idxprom197 = sext i32 %bf.cast196 to i64, !dbg !7556
  %arrayidx198 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom197, !dbg !7556
  %169 = load i32, i32* %arrayidx198, align 4, !dbg !7556
  %cmp199 = icmp uge i32 %169, 4, !dbg !7556
  br i1 %cmp199, label %land.lhs.true201, label %cond.false213, !dbg !7556

land.lhs.true201:                                 ; preds = %if.else
  %170 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7556
  %171 = load %union.tree_node*, %union.tree_node** %170, align 8, !dbg !7556
  %base202 = bitcast %union.tree_node* %171 to %struct.tree_base*, !dbg !7556
  %172 = bitcast %struct.tree_base* %base202 to i64*, !dbg !7556
  %bf.load203 = load i64, i64* %172, align 8, !dbg !7556
  %bf.clear204 = and i64 %bf.load203, 65535, !dbg !7556
  %bf.cast205 = trunc i64 %bf.clear204 to i32, !dbg !7556
  %idxprom206 = sext i32 %bf.cast205 to i64, !dbg !7556
  %arrayidx207 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom206, !dbg !7556
  %173 = load i32, i32* %arrayidx207, align 4, !dbg !7556
  %cmp208 = icmp ule i32 %173, 10, !dbg !7556
  br i1 %cmp208, label %cond.true210, label %cond.false213, !dbg !7556

cond.true210:                                     ; preds = %land.lhs.true201
  %174 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7556
  %175 = load %union.tree_node*, %union.tree_node** %174, align 8, !dbg !7556
  %exp211 = bitcast %union.tree_node* %175 to %struct.tree_exp*, !dbg !7556
  %locus212 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp211, i32 0, i32 1, !dbg !7556
  %176 = load i32, i32* %locus212, align 8, !dbg !7556
  br label %cond.end214, !dbg !7556

cond.false213:                                    ; preds = %land.lhs.true201, %if.else
  br label %cond.end214, !dbg !7556

cond.end214:                                      ; preds = %cond.false213, %cond.true210
  %cond215 = phi i32 [ %176, %cond.true210 ], [ 0, %cond.false213 ], !dbg !7556
  call void @gimple_set_location(%union.gimple_statement_d* %165, i32 %cond215), !dbg !7557
  br label %if.end216

if.end216:                                        ; preds = %cond.end214, %if.end191
  %177 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !7558
  %178 = load %union.gimple_statement_d*, %union.gimple_statement_d** %assign, align 8, !dbg !7559
  call void @gimplify_seq_add_stmt(%struct.gimple_seq_d** %177, %union.gimple_statement_d* %178), !dbg !7560
  %179 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !7561
  %into_ssa217 = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %179, i32 0, i32 10, !dbg !7563
  %180 = load i8, i8* %into_ssa217, align 1, !dbg !7563
  %conv218 = zext i8 %180 to i32, !dbg !7561
  %tobool219 = icmp ne i32 %conv218, 0, !dbg !7561
  br i1 %tobool219, label %land.lhs.true220, label %if.end236, !dbg !7564

land.lhs.true220:                                 ; preds = %if.end216
  %181 = load %union.tree_node**, %union.tree_node*** %to_p, align 8, !dbg !7565
  %182 = load %union.tree_node*, %union.tree_node** %181, align 8, !dbg !7566
  %call221 = call zeroext i8 @is_gimple_reg(%union.tree_node* %182), !dbg !7567
  %conv222 = zext i8 %call221 to i32, !dbg !7567
  %tobool223 = icmp ne i32 %conv222, 0, !dbg !7567
  br i1 %tobool223, label %if.then224, label %if.end236, !dbg !7568

if.then224:                                       ; preds = %land.lhs.true220
  %183 = load %union.tree_node**, %union.tree_node*** %to_p, align 8, !dbg !7569
  %184 = load %union.tree_node*, %union.tree_node** %183, align 8, !dbg !7569
  %base225 = bitcast %union.tree_node* %184 to %struct.tree_base*, !dbg !7569
  %185 = bitcast %struct.tree_base* %base225 to i64*, !dbg !7569
  %bf.load226 = load i64, i64* %185, align 8, !dbg !7569
  %bf.clear227 = and i64 %bf.load226, 65535, !dbg !7569
  %bf.cast228 = trunc i64 %bf.clear227 to i32, !dbg !7569
  %cmp229 = icmp ne i32 %bf.cast228, 141, !dbg !7569
  br i1 %cmp229, label %cond.false232, label %cond.true231, !dbg !7569

cond.true231:                                     ; preds = %if.then224
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 4538, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7569
  br label %cond.end233, !dbg !7569

cond.false232:                                    ; preds = %if.then224
  br label %cond.end233, !dbg !7569

cond.end233:                                      ; preds = %cond.false232, %cond.true231
  %cond234 = phi i32 [ 0, %cond.true231 ], [ 0, %cond.false232 ], !dbg !7569
  %186 = load %union.tree_node**, %union.tree_node*** %to_p, align 8, !dbg !7571
  %187 = load %union.tree_node*, %union.tree_node** %186, align 8, !dbg !7572
  %188 = load %union.gimple_statement_d*, %union.gimple_statement_d** %assign, align 8, !dbg !7573
  %call235 = call %union.tree_node* @make_ssa_name(%union.tree_node* %187, %union.gimple_statement_d* %188), !dbg !7574
  %189 = load %union.tree_node**, %union.tree_node*** %to_p, align 8, !dbg !7575
  store %union.tree_node* %call235, %union.tree_node** %189, align 8, !dbg !7576
  %190 = load %union.gimple_statement_d*, %union.gimple_statement_d** %assign, align 8, !dbg !7577
  %191 = load %union.tree_node**, %union.tree_node*** %to_p, align 8, !dbg !7578
  %192 = load %union.tree_node*, %union.tree_node** %191, align 8, !dbg !7579
  call void @gimple_set_lhs(%union.gimple_statement_d* %190, %union.tree_node* %192), !dbg !7580
  br label %if.end236, !dbg !7581

if.end236:                                        ; preds = %cond.end233, %land.lhs.true220, %if.end216
  %193 = load i8, i8* %want_value.addr, align 1, !dbg !7582
  %tobool237 = icmp ne i8 %193, 0, !dbg !7582
  br i1 %tobool237, label %if.then238, label %if.else240, !dbg !7584

if.then238:                                       ; preds = %if.end236
  %194 = load %union.tree_node**, %union.tree_node*** %to_p, align 8, !dbg !7585
  %195 = load %union.tree_node*, %union.tree_node** %194, align 8, !dbg !7587
  %call239 = call %union.tree_node* @unshare_expr(%union.tree_node* %195), !dbg !7588
  %196 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7589
  store %union.tree_node* %call239, %union.tree_node** %196, align 8, !dbg !7590
  store i32 0, i32* %retval, align 4, !dbg !7591
  br label %return, !dbg !7591

if.else240:                                       ; preds = %if.end236
  %197 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7592
  store %union.tree_node* null, %union.tree_node** %197, align 8, !dbg !7593
  br label %if.end241

if.end241:                                        ; preds = %if.else240
  store i32 1, i32* %retval, align 4, !dbg !7594
  br label %return, !dbg !7594

return:                                           ; preds = %if.end241, %if.then238, %if.then128, %if.then104, %if.then99, %if.then78, %if.then73, %if.then67, %if.then60, %if.then52
  %198 = load i32, i32* %retval, align 4, !dbg !7595
  ret i32 %198, !dbg !7595
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimplify_boolean_expr(%union.tree_node** %expr_p, i32 %locus) #0 !dbg !7596 {
entry:
  %expr_p.addr = alloca %union.tree_node**, align 8
  %locus.addr = alloca i32, align 4
  %type = alloca %union.tree_node*, align 8
  store %union.tree_node** %expr_p, %union.tree_node*** %expr_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %expr_p.addr, metadata !7599, metadata !DIExpression()), !dbg !7600
  store i32 %locus, i32* %locus.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %locus.addr, metadata !7601, metadata !DIExpression()), !dbg !7602
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !7603, metadata !DIExpression()), !dbg !7604
  %0 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7605
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !7605
  %common = bitcast %union.tree_node* %1 to %struct.tree_common*, !dbg !7605
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7605
  %2 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !7605
  store %union.tree_node* %2, %union.tree_node** %type, align 8, !dbg !7604
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7606
  %4 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7606
  %5 = load %union.tree_node*, %union.tree_node** %4, align 8, !dbg !7606
  %6 = load i32, i32* %locus.addr, align 4, !dbg !7606
  %7 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7606
  %8 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !dbg !7606
  %call = call %union.tree_node* @fold_convert_loc(i32 %6, %union.tree_node* %7, %union.tree_node* %8), !dbg !7606
  %9 = load i32, i32* %locus.addr, align 4, !dbg !7606
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7606
  %11 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 25), align 8, !dbg !7606
  %call2 = call %union.tree_node* @fold_convert_loc(i32 %9, %union.tree_node* %10, %union.tree_node* %11), !dbg !7606
  %call3 = call %union.tree_node* @build3_stat(i32 56, %union.tree_node* %3, %union.tree_node* %5, %union.tree_node* %call, %union.tree_node* %call2), !dbg !7606
  %12 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7607
  store %union.tree_node* %call3, %union.tree_node** %12, align 8, !dbg !7608
  %13 = load i32, i32* %locus.addr, align 4, !dbg !7609
  %14 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7609
  %15 = load %union.tree_node*, %union.tree_node** %14, align 8, !dbg !7609
  %exp = bitcast %union.tree_node* %15 to %struct.tree_exp*, !dbg !7609
  %locus4 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 1, !dbg !7609
  store i32 %13, i32* %locus4, align 8, !dbg !7609
  ret i32 0, !dbg !7610
}

declare dso_local void @recalculate_side_effects(%union.tree_node*) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimplify_addr_expr(%union.tree_node** %expr_p, %struct.gimple_seq_d** %pre_p, %struct.gimple_seq_d** %post_p) #0 !dbg !7611 {
entry:
  %expr_p.addr = alloca %union.tree_node**, align 8
  %pre_p.addr = alloca %struct.gimple_seq_d**, align 8
  %post_p.addr = alloca %struct.gimple_seq_d**, align 8
  %expr = alloca %union.tree_node*, align 8
  %op0 = alloca %union.tree_node*, align 8
  %ret = alloca i32, align 4
  %loc = alloca i32, align 4
  %op00 = alloca %union.tree_node*, align 8
  %t_expr = alloca %union.tree_node*, align 8
  %t_op00 = alloca %union.tree_node*, align 8
  store %union.tree_node** %expr_p, %union.tree_node*** %expr_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %expr_p.addr, metadata !7614, metadata !DIExpression()), !dbg !7615
  store %struct.gimple_seq_d** %pre_p, %struct.gimple_seq_d*** %pre_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %pre_p.addr, metadata !7616, metadata !DIExpression()), !dbg !7617
  store %struct.gimple_seq_d** %post_p, %struct.gimple_seq_d*** %post_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %post_p.addr, metadata !7618, metadata !DIExpression()), !dbg !7619
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr, metadata !7620, metadata !DIExpression()), !dbg !7621
  %0 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7622
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !7623
  store %union.tree_node* %1, %union.tree_node** %expr, align 8, !dbg !7621
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0, metadata !7624, metadata !DIExpression()), !dbg !7625
  %2 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !7626
  %exp = bitcast %union.tree_node* %2 to %struct.tree_exp*, !dbg !7626
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !7626
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !7626
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !7626
  store %union.tree_node* %3, %union.tree_node** %op0, align 8, !dbg !7625
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !7627, metadata !DIExpression()), !dbg !7628
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !7629, metadata !DIExpression()), !dbg !7630
  %4 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7631
  %5 = load %union.tree_node*, %union.tree_node** %4, align 8, !dbg !7631
  %base = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !7631
  %6 = bitcast %struct.tree_base* %base to i64*, !dbg !7631
  %bf.load = load i64, i64* %6, align 8, !dbg !7631
  %bf.clear = and i64 %bf.load, 65535, !dbg !7631
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7631
  %idxprom = sext i32 %bf.cast to i64, !dbg !7631
  %arrayidx1 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !7631
  %7 = load i32, i32* %arrayidx1, align 4, !dbg !7631
  %cmp = icmp uge i32 %7, 4, !dbg !7631
  br i1 %cmp, label %land.lhs.true, label %cond.false, !dbg !7631

land.lhs.true:                                    ; preds = %entry
  %8 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7631
  %9 = load %union.tree_node*, %union.tree_node** %8, align 8, !dbg !7631
  %base2 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !7631
  %10 = bitcast %struct.tree_base* %base2 to i64*, !dbg !7631
  %bf.load3 = load i64, i64* %10, align 8, !dbg !7631
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !7631
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !7631
  %idxprom6 = sext i32 %bf.cast5 to i64, !dbg !7631
  %arrayidx7 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom6, !dbg !7631
  %11 = load i32, i32* %arrayidx7, align 4, !dbg !7631
  %cmp8 = icmp ule i32 %11, 10, !dbg !7631
  br i1 %cmp8, label %cond.true, label %cond.false, !dbg !7631

cond.true:                                        ; preds = %land.lhs.true
  %12 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7631
  %13 = load %union.tree_node*, %union.tree_node** %12, align 8, !dbg !7631
  %exp9 = bitcast %union.tree_node* %13 to %struct.tree_exp*, !dbg !7631
  %locus = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp9, i32 0, i32 1, !dbg !7631
  %14 = load i32, i32* %locus, align 8, !dbg !7631
  br label %cond.end, !dbg !7631

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !7631

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %14, %cond.true ], [ 0, %cond.false ], !dbg !7631
  store i32 %cond, i32* %loc, align 4, !dbg !7630
  %15 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7632
  %base10 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !7632
  %16 = bitcast %struct.tree_base* %base10 to i64*, !dbg !7632
  %bf.load11 = load i64, i64* %16, align 8, !dbg !7632
  %bf.clear12 = and i64 %bf.load11, 65535, !dbg !7632
  %bf.cast13 = trunc i64 %bf.clear12 to i32, !dbg !7632
  switch i32 %bf.cast13, label %sw.default [
    i32 47, label %sw.bb
    i32 49, label %sw.bb
    i32 118, label %sw.bb22
  ], !dbg !7633

sw.bb:                                            ; preds = %cond.end, %cond.end
  br label %do_indirect_ref, !dbg !7634

do_indirect_ref:                                  ; preds = %if.then58, %sw.bb
  call void @llvm.dbg.label(metadata !7635), !dbg !7637
  call void @llvm.dbg.declare(metadata %union.tree_node** %op00, metadata !7638, metadata !DIExpression()), !dbg !7640
  %17 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7641
  %exp14 = bitcast %union.tree_node* %17 to %struct.tree_exp*, !dbg !7641
  %operands15 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp14, i32 0, i32 3, !dbg !7641
  %arrayidx16 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands15, i64 0, i64 0, !dbg !7641
  %18 = load %union.tree_node*, %union.tree_node** %arrayidx16, align 8, !dbg !7641
  store %union.tree_node* %18, %union.tree_node** %op00, align 8, !dbg !7640
  call void @llvm.dbg.declare(metadata %union.tree_node** %t_expr, metadata !7642, metadata !DIExpression()), !dbg !7643
  %19 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !7644
  %common = bitcast %union.tree_node* %19 to %struct.tree_common*, !dbg !7644
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7644
  %20 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7644
  store %union.tree_node* %20, %union.tree_node** %t_expr, align 8, !dbg !7643
  call void @llvm.dbg.declare(metadata %union.tree_node** %t_op00, metadata !7645, metadata !DIExpression()), !dbg !7646
  %21 = load %union.tree_node*, %union.tree_node** %op00, align 8, !dbg !7647
  %common17 = bitcast %union.tree_node* %21 to %struct.tree_common*, !dbg !7647
  %type18 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common17, i32 0, i32 2, !dbg !7647
  %22 = load %union.tree_node*, %union.tree_node** %type18, align 8, !dbg !7647
  store %union.tree_node* %22, %union.tree_node** %t_op00, align 8, !dbg !7646
  %23 = load %union.tree_node*, %union.tree_node** %t_expr, align 8, !dbg !7648
  %24 = load %union.tree_node*, %union.tree_node** %t_op00, align 8, !dbg !7650
  %call = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %23, %union.tree_node* %24), !dbg !7651
  %tobool = icmp ne i8 %call, 0, !dbg !7651
  br i1 %tobool, label %if.end, label %if.then, !dbg !7652

if.then:                                          ; preds = %do_indirect_ref
  %25 = load i32, i32* %loc, align 4, !dbg !7653
  %26 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !7654
  %common19 = bitcast %union.tree_node* %26 to %struct.tree_common*, !dbg !7654
  %type20 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common19, i32 0, i32 2, !dbg !7654
  %27 = load %union.tree_node*, %union.tree_node** %type20, align 8, !dbg !7654
  %28 = load %union.tree_node*, %union.tree_node** %op00, align 8, !dbg !7655
  %call21 = call %union.tree_node* @fold_convert_loc(i32 %25, %union.tree_node* %27, %union.tree_node* %28), !dbg !7656
  store %union.tree_node* %call21, %union.tree_node** %op00, align 8, !dbg !7657
  br label %if.end, !dbg !7658

if.end:                                           ; preds = %if.then, %do_indirect_ref
  %29 = load %union.tree_node*, %union.tree_node** %op00, align 8, !dbg !7659
  %30 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7660
  store %union.tree_node* %29, %union.tree_node** %30, align 8, !dbg !7661
  store i32 0, i32* %ret, align 4, !dbg !7662
  br label %sw.epilog, !dbg !7663

sw.bb22:                                          ; preds = %cond.end
  %31 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7664
  %exp23 = bitcast %union.tree_node* %31 to %struct.tree_exp*, !dbg !7664
  %operands24 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp23, i32 0, i32 3, !dbg !7664
  %arrayidx25 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands24, i64 0, i64 0, !dbg !7664
  %32 = load %union.tree_node*, %union.tree_node** %arrayidx25, align 8, !dbg !7664
  %call26 = call zeroext i8 @tree_ssa_useless_type_conversion(%union.tree_node* %32), !dbg !7666
  %tobool27 = icmp ne i8 %call26, 0, !dbg !7666
  br i1 %tobool27, label %if.then28, label %if.end32, !dbg !7667

if.then28:                                        ; preds = %sw.bb22
  %33 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7668
  %exp29 = bitcast %union.tree_node* %33 to %struct.tree_exp*, !dbg !7668
  %operands30 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp29, i32 0, i32 3, !dbg !7668
  %arrayidx31 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands30, i64 0, i64 0, !dbg !7668
  %34 = load %union.tree_node*, %union.tree_node** %arrayidx31, align 8, !dbg !7668
  store %union.tree_node* %34, %union.tree_node** %op0, align 8, !dbg !7669
  br label %if.end32, !dbg !7670

if.end32:                                         ; preds = %if.then28, %sw.bb22
  %35 = load i32, i32* %loc, align 4, !dbg !7671
  %36 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !7672
  %common33 = bitcast %union.tree_node* %36 to %struct.tree_common*, !dbg !7672
  %type34 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common33, i32 0, i32 2, !dbg !7672
  %37 = load %union.tree_node*, %union.tree_node** %type34, align 8, !dbg !7672
  %38 = load i32, i32* %loc, align 4, !dbg !7673
  %39 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7674
  %exp35 = bitcast %union.tree_node* %39 to %struct.tree_exp*, !dbg !7674
  %operands36 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp35, i32 0, i32 3, !dbg !7674
  %arrayidx37 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands36, i64 0, i64 0, !dbg !7674
  %40 = load %union.tree_node*, %union.tree_node** %arrayidx37, align 8, !dbg !7674
  %call38 = call %union.tree_node* @build_fold_addr_expr_loc(i32 %38, %union.tree_node* %40), !dbg !7675
  %call39 = call %union.tree_node* @fold_convert_loc(i32 %35, %union.tree_node* %37, %union.tree_node* %call38), !dbg !7676
  %41 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7677
  store %union.tree_node* %call39, %union.tree_node** %41, align 8, !dbg !7678
  store i32 0, i32* %ret, align 4, !dbg !7679
  br label %sw.epilog, !dbg !7680

sw.default:                                       ; preds = %cond.end
  %42 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !7681
  %exp40 = bitcast %union.tree_node* %42 to %struct.tree_exp*, !dbg !7681
  %operands41 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp40, i32 0, i32 3, !dbg !7681
  %arrayidx42 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands41, i64 0, i64 0, !dbg !7681
  %43 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !7682
  %44 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !7683
  %call43 = call i32 @gimplify_expr(%union.tree_node** %arrayidx42, %struct.gimple_seq_d** %43, %struct.gimple_seq_d** %44, i8 (%union.tree_node*)* @is_gimple_addressable, i32 3), !dbg !7684
  store i32 %call43, i32* %ret, align 4, !dbg !7685
  %45 = load i32, i32* %ret, align 4, !dbg !7686
  %cmp44 = icmp eq i32 %45, -2, !dbg !7688
  br i1 %cmp44, label %if.then45, label %if.end46, !dbg !7689

if.then45:                                        ; preds = %sw.default
  br label %sw.epilog, !dbg !7690

if.end46:                                         ; preds = %sw.default
  %46 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !7691
  %exp47 = bitcast %union.tree_node* %46 to %struct.tree_exp*, !dbg !7691
  %operands48 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp47, i32 0, i32 3, !dbg !7691
  %arrayidx49 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands48, i64 0, i64 0, !dbg !7691
  %47 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !7692
  call void @prepare_gimple_addressable(%union.tree_node** %arrayidx49, %struct.gimple_seq_d** %47), !dbg !7693
  %48 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !7694
  %exp50 = bitcast %union.tree_node* %48 to %struct.tree_exp*, !dbg !7694
  %operands51 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp50, i32 0, i32 3, !dbg !7694
  %arrayidx52 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands51, i64 0, i64 0, !dbg !7694
  %49 = load %union.tree_node*, %union.tree_node** %arrayidx52, align 8, !dbg !7694
  store %union.tree_node* %49, %union.tree_node** %op0, align 8, !dbg !7695
  %50 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7696
  %base53 = bitcast %union.tree_node* %50 to %struct.tree_base*, !dbg !7696
  %51 = bitcast %struct.tree_base* %base53 to i64*, !dbg !7696
  %bf.load54 = load i64, i64* %51, align 8, !dbg !7696
  %bf.clear55 = and i64 %bf.load54, 65535, !dbg !7696
  %bf.cast56 = trunc i64 %bf.clear55 to i32, !dbg !7696
  %cmp57 = icmp eq i32 %bf.cast56, 47, !dbg !7698
  br i1 %cmp57, label %if.then58, label %if.end59, !dbg !7699

if.then58:                                        ; preds = %if.end46
  br label %do_indirect_ref, !dbg !7700

if.end59:                                         ; preds = %if.end46
  %52 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !7701
  %exp60 = bitcast %union.tree_node* %52 to %struct.tree_exp*, !dbg !7701
  %operands61 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp60, i32 0, i32 3, !dbg !7701
  %arrayidx62 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands61, i64 0, i64 0, !dbg !7701
  %53 = load %union.tree_node*, %union.tree_node** %arrayidx62, align 8, !dbg !7701
  call void @mark_addressable(%union.tree_node* %53), !dbg !7702
  %54 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7703
  %common63 = bitcast %union.tree_node* %54 to %struct.tree_common*, !dbg !7703
  %type64 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common63, i32 0, i32 2, !dbg !7703
  %55 = load %union.tree_node*, %union.tree_node** %type64, align 8, !dbg !7703
  %56 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !7705
  %common65 = bitcast %union.tree_node* %56 to %struct.tree_common*, !dbg !7705
  %type66 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common65, i32 0, i32 2, !dbg !7705
  %57 = load %union.tree_node*, %union.tree_node** %type66, align 8, !dbg !7705
  %common67 = bitcast %union.tree_node* %57 to %struct.tree_common*, !dbg !7705
  %type68 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common67, i32 0, i32 2, !dbg !7705
  %58 = load %union.tree_node*, %union.tree_node** %type68, align 8, !dbg !7705
  %call69 = call zeroext i8 @types_compatible_p(%union.tree_node* %55, %union.tree_node* %58), !dbg !7706
  %tobool70 = icmp ne i8 %call69, 0, !dbg !7706
  br i1 %tobool70, label %if.end73, label %if.then71, !dbg !7707

if.then71:                                        ; preds = %if.end59
  %59 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7708
  %call72 = call %union.tree_node* @build_fold_addr_expr_loc(i32 0, %union.tree_node* %59), !dbg !7708
  %60 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7709
  store %union.tree_node* %call72, %union.tree_node** %60, align 8, !dbg !7710
  br label %if.end73, !dbg !7711

if.end73:                                         ; preds = %if.then71, %if.end59
  %61 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7712
  %62 = load %union.tree_node*, %union.tree_node** %61, align 8, !dbg !7713
  call void @recompute_tree_invariant_for_addr_expr(%union.tree_node* %62), !dbg !7714
  %63 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !7715
  %common74 = bitcast %union.tree_node* %63 to %struct.tree_common*, !dbg !7715
  %type75 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common74, i32 0, i32 2, !dbg !7715
  %64 = load %union.tree_node*, %union.tree_node** %type75, align 8, !dbg !7715
  %65 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7717
  %66 = load %union.tree_node*, %union.tree_node** %65, align 8, !dbg !7717
  %common76 = bitcast %union.tree_node* %66 to %struct.tree_common*, !dbg !7717
  %type77 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common76, i32 0, i32 2, !dbg !7717
  %67 = load %union.tree_node*, %union.tree_node** %type77, align 8, !dbg !7717
  %call78 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %64, %union.tree_node* %67), !dbg !7718
  %tobool79 = icmp ne i8 %call78, 0, !dbg !7718
  br i1 %tobool79, label %if.end84, label %if.then80, !dbg !7719

if.then80:                                        ; preds = %if.end73
  %68 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !7720
  %common81 = bitcast %union.tree_node* %68 to %struct.tree_common*, !dbg !7720
  %type82 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common81, i32 0, i32 2, !dbg !7720
  %69 = load %union.tree_node*, %union.tree_node** %type82, align 8, !dbg !7720
  %70 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7720
  %71 = load %union.tree_node*, %union.tree_node** %70, align 8, !dbg !7720
  %call83 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %69, %union.tree_node* %71), !dbg !7720
  %72 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7721
  store %union.tree_node* %call83, %union.tree_node** %72, align 8, !dbg !7722
  br label %if.end84, !dbg !7723

if.end84:                                         ; preds = %if.then80, %if.end73
  br label %sw.epilog, !dbg !7724

sw.epilog:                                        ; preds = %if.end84, %if.then45, %if.end32, %if.end
  %73 = load i32, i32* %ret, align 4, !dbg !7725
  ret i32 %73, !dbg !7726
}

declare dso_local i32 @gimplify_va_arg_expr(%union.tree_node**, %struct.gimple_seq_d**, %struct.gimple_seq_d**) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimplify_conversion(%union.tree_node** %expr_p) #0 !dbg !7727 {
entry:
  %expr_p.addr = alloca %union.tree_node**, align 8
  %tem = alloca %union.tree_node*, align 8
  %loc = alloca i32, align 4
  %sub = alloca %union.tree_node*, align 8
  store %union.tree_node** %expr_p, %union.tree_node*** %expr_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %expr_p.addr, metadata !7730, metadata !DIExpression()), !dbg !7731
  call void @llvm.dbg.declare(metadata %union.tree_node** %tem, metadata !7732, metadata !DIExpression()), !dbg !7733
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !7734, metadata !DIExpression()), !dbg !7735
  %0 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7736
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !7736
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !7736
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !7736
  %bf.load = load i64, i64* %2, align 8, !dbg !7736
  %bf.clear = and i64 %bf.load, 65535, !dbg !7736
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7736
  %idxprom = sext i32 %bf.cast to i64, !dbg !7736
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !7736
  %3 = load i32, i32* %arrayidx, align 4, !dbg !7736
  %cmp = icmp uge i32 %3, 4, !dbg !7736
  br i1 %cmp, label %land.lhs.true, label %cond.false, !dbg !7736

land.lhs.true:                                    ; preds = %entry
  %4 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7736
  %5 = load %union.tree_node*, %union.tree_node** %4, align 8, !dbg !7736
  %base1 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !7736
  %6 = bitcast %struct.tree_base* %base1 to i64*, !dbg !7736
  %bf.load2 = load i64, i64* %6, align 8, !dbg !7736
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !7736
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !7736
  %idxprom5 = sext i32 %bf.cast4 to i64, !dbg !7736
  %arrayidx6 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom5, !dbg !7736
  %7 = load i32, i32* %arrayidx6, align 4, !dbg !7736
  %cmp7 = icmp ule i32 %7, 10, !dbg !7736
  br i1 %cmp7, label %cond.true, label %cond.false, !dbg !7736

cond.true:                                        ; preds = %land.lhs.true
  %8 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7736
  %9 = load %union.tree_node*, %union.tree_node** %8, align 8, !dbg !7736
  %exp = bitcast %union.tree_node* %9 to %struct.tree_exp*, !dbg !7736
  %locus = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 1, !dbg !7736
  %10 = load i32, i32* %locus, align 8, !dbg !7736
  br label %cond.end, !dbg !7736

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !7736

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %10, %cond.true ], [ 0, %cond.false ], !dbg !7736
  store i32 %cond, i32* %loc, align 4, !dbg !7735
  %11 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7737
  %12 = load %union.tree_node*, %union.tree_node** %11, align 8, !dbg !7737
  %base8 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !7737
  %13 = bitcast %struct.tree_base* %base8 to i64*, !dbg !7737
  %bf.load9 = load i64, i64* %13, align 8, !dbg !7737
  %bf.clear10 = and i64 %bf.load9, 65535, !dbg !7737
  %bf.cast11 = trunc i64 %bf.clear10 to i32, !dbg !7737
  %cmp12 = icmp eq i32 %bf.cast11, 116, !dbg !7737
  br i1 %cmp12, label %cond.false19, label %lor.lhs.false, !dbg !7737

lor.lhs.false:                                    ; preds = %cond.end
  %14 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7737
  %15 = load %union.tree_node*, %union.tree_node** %14, align 8, !dbg !7737
  %base13 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !7737
  %16 = bitcast %struct.tree_base* %base13 to i64*, !dbg !7737
  %bf.load14 = load i64, i64* %16, align 8, !dbg !7737
  %bf.clear15 = and i64 %bf.load14, 65535, !dbg !7737
  %bf.cast16 = trunc i64 %bf.clear15 to i32, !dbg !7737
  %cmp17 = icmp eq i32 %bf.cast16, 113, !dbg !7737
  br i1 %cmp17, label %cond.false19, label %cond.true18, !dbg !7737

cond.true18:                                      ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 1751, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7737
  br label %cond.end20, !dbg !7737

cond.false19:                                     ; preds = %lor.lhs.false, %cond.end
  br label %cond.end20, !dbg !7737

cond.end20:                                       ; preds = %cond.false19, %cond.true18
  %cond21 = phi i32 [ 0, %cond.true18 ], [ 0, %cond.false19 ], !dbg !7737
  %17 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7738
  %18 = load %union.tree_node*, %union.tree_node** %17, align 8, !dbg !7738
  %exp22 = bitcast %union.tree_node* %18 to %struct.tree_exp*, !dbg !7738
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp22, i32 0, i32 3, !dbg !7738
  %arrayidx23 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !7738
  %19 = load %union.tree_node*, %union.tree_node** %arrayidx23, align 8, !dbg !7738
  %call = call %union.tree_node* @tree_strip_sign_nop_conversions(%union.tree_node* %19), !dbg !7738
  %20 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7738
  %21 = load %union.tree_node*, %union.tree_node** %20, align 8, !dbg !7738
  %exp24 = bitcast %union.tree_node* %21 to %struct.tree_exp*, !dbg !7738
  %operands25 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp24, i32 0, i32 3, !dbg !7738
  %arrayidx26 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands25, i64 0, i64 0, !dbg !7738
  store %union.tree_node* %call, %union.tree_node** %arrayidx26, align 8, !dbg !7738
  %22 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7739
  %23 = load %union.tree_node*, %union.tree_node** %22, align 8, !dbg !7741
  %call27 = call zeroext i8 @tree_ssa_useless_type_conversion(%union.tree_node* %23), !dbg !7742
  %tobool = icmp ne i8 %call27, 0, !dbg !7742
  br i1 %tobool, label %if.then, label %if.end, !dbg !7743

if.then:                                          ; preds = %cond.end20
  %24 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7744
  %25 = load %union.tree_node*, %union.tree_node** %24, align 8, !dbg !7744
  %exp28 = bitcast %union.tree_node* %25 to %struct.tree_exp*, !dbg !7744
  %operands29 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp28, i32 0, i32 3, !dbg !7744
  %arrayidx30 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands29, i64 0, i64 0, !dbg !7744
  %26 = load %union.tree_node*, %union.tree_node** %arrayidx30, align 8, !dbg !7744
  %27 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7745
  store %union.tree_node* %26, %union.tree_node** %27, align 8, !dbg !7746
  br label %if.end, !dbg !7747

if.end:                                           ; preds = %if.then, %cond.end20
  %28 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7748
  %29 = load %union.tree_node*, %union.tree_node** %28, align 8, !dbg !7748
  %base31 = bitcast %union.tree_node* %29 to %struct.tree_base*, !dbg !7748
  %30 = bitcast %struct.tree_base* %base31 to i64*, !dbg !7748
  %bf.load32 = load i64, i64* %30, align 8, !dbg !7748
  %bf.clear33 = and i64 %bf.load32, 65535, !dbg !7748
  %bf.cast34 = trunc i64 %bf.clear33 to i32, !dbg !7748
  %cmp35 = icmp eq i32 %bf.cast34, 116, !dbg !7748
  br i1 %cmp35, label %land.lhs.true42, label %lor.lhs.false36, !dbg !7748

lor.lhs.false36:                                  ; preds = %if.end
  %31 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7748
  %32 = load %union.tree_node*, %union.tree_node** %31, align 8, !dbg !7748
  %base37 = bitcast %union.tree_node* %32 to %struct.tree_base*, !dbg !7748
  %33 = bitcast %struct.tree_base* %base37 to i64*, !dbg !7748
  %bf.load38 = load i64, i64* %33, align 8, !dbg !7748
  %bf.clear39 = and i64 %bf.load38, 65535, !dbg !7748
  %bf.cast40 = trunc i64 %bf.clear39 to i32, !dbg !7748
  %cmp41 = icmp eq i32 %bf.cast40, 113, !dbg !7748
  br i1 %cmp41, label %land.lhs.true42, label %if.end108, !dbg !7750

land.lhs.true42:                                  ; preds = %lor.lhs.false36, %if.end
  %34 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7751
  %35 = load %union.tree_node*, %union.tree_node** %34, align 8, !dbg !7751
  %common = bitcast %union.tree_node* %35 to %struct.tree_common*, !dbg !7751
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7751
  %36 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7751
  %base43 = bitcast %union.tree_node* %36 to %struct.tree_base*, !dbg !7751
  %37 = bitcast %struct.tree_base* %base43 to i64*, !dbg !7751
  %bf.load44 = load i64, i64* %37, align 8, !dbg !7751
  %bf.clear45 = and i64 %bf.load44, 65535, !dbg !7751
  %bf.cast46 = trunc i64 %bf.clear45 to i32, !dbg !7751
  %cmp47 = icmp eq i32 %bf.cast46, 10, !dbg !7751
  br i1 %cmp47, label %land.lhs.true56, label %lor.lhs.false48, !dbg !7751

lor.lhs.false48:                                  ; preds = %land.lhs.true42
  %38 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7751
  %39 = load %union.tree_node*, %union.tree_node** %38, align 8, !dbg !7751
  %common49 = bitcast %union.tree_node* %39 to %struct.tree_common*, !dbg !7751
  %type50 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common49, i32 0, i32 2, !dbg !7751
  %40 = load %union.tree_node*, %union.tree_node** %type50, align 8, !dbg !7751
  %base51 = bitcast %union.tree_node* %40 to %struct.tree_base*, !dbg !7751
  %41 = bitcast %struct.tree_base* %base51 to i64*, !dbg !7751
  %bf.load52 = load i64, i64* %41, align 8, !dbg !7751
  %bf.clear53 = and i64 %bf.load52, 65535, !dbg !7751
  %bf.cast54 = trunc i64 %bf.clear53 to i32, !dbg !7751
  %cmp55 = icmp eq i32 %bf.cast54, 12, !dbg !7751
  br i1 %cmp55, label %land.lhs.true56, label %if.end108, !dbg !7752

land.lhs.true56:                                  ; preds = %lor.lhs.false48, %land.lhs.true42
  %42 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7753
  %43 = load %union.tree_node*, %union.tree_node** %42, align 8, !dbg !7753
  %exp57 = bitcast %union.tree_node* %43 to %struct.tree_exp*, !dbg !7753
  %operands58 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp57, i32 0, i32 3, !dbg !7753
  %arrayidx59 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands58, i64 0, i64 0, !dbg !7753
  %44 = load %union.tree_node*, %union.tree_node** %arrayidx59, align 8, !dbg !7753
  %common60 = bitcast %union.tree_node* %44 to %struct.tree_common*, !dbg !7753
  %type61 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common60, i32 0, i32 2, !dbg !7753
  %45 = load %union.tree_node*, %union.tree_node** %type61, align 8, !dbg !7753
  %base62 = bitcast %union.tree_node* %45 to %struct.tree_base*, !dbg !7753
  %46 = bitcast %struct.tree_base* %base62 to i64*, !dbg !7753
  %bf.load63 = load i64, i64* %46, align 8, !dbg !7753
  %bf.clear64 = and i64 %bf.load63, 65535, !dbg !7753
  %bf.cast65 = trunc i64 %bf.clear64 to i32, !dbg !7753
  %cmp66 = icmp eq i32 %bf.cast65, 10, !dbg !7753
  br i1 %cmp66, label %land.lhs.true78, label %lor.lhs.false67, !dbg !7753

lor.lhs.false67:                                  ; preds = %land.lhs.true56
  %47 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7753
  %48 = load %union.tree_node*, %union.tree_node** %47, align 8, !dbg !7753
  %exp68 = bitcast %union.tree_node* %48 to %struct.tree_exp*, !dbg !7753
  %operands69 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp68, i32 0, i32 3, !dbg !7753
  %arrayidx70 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands69, i64 0, i64 0, !dbg !7753
  %49 = load %union.tree_node*, %union.tree_node** %arrayidx70, align 8, !dbg !7753
  %common71 = bitcast %union.tree_node* %49 to %struct.tree_common*, !dbg !7753
  %type72 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common71, i32 0, i32 2, !dbg !7753
  %50 = load %union.tree_node*, %union.tree_node** %type72, align 8, !dbg !7753
  %base73 = bitcast %union.tree_node* %50 to %struct.tree_base*, !dbg !7753
  %51 = bitcast %struct.tree_base* %base73 to i64*, !dbg !7753
  %bf.load74 = load i64, i64* %51, align 8, !dbg !7753
  %bf.clear75 = and i64 %bf.load74, 65535, !dbg !7753
  %bf.cast76 = trunc i64 %bf.clear75 to i32, !dbg !7753
  %cmp77 = icmp eq i32 %bf.cast76, 12, !dbg !7753
  br i1 %cmp77, label %land.lhs.true78, label %if.end108, !dbg !7754

land.lhs.true78:                                  ; preds = %lor.lhs.false67, %land.lhs.true56
  %52 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7755
  %53 = load %union.tree_node*, %union.tree_node** %52, align 8, !dbg !7755
  %base79 = bitcast %union.tree_node* %53 to %struct.tree_base*, !dbg !7755
  %54 = bitcast %struct.tree_base* %base79 to i64*, !dbg !7755
  %bf.load80 = load i64, i64* %54, align 8, !dbg !7755
  %bf.clear81 = and i64 %bf.load80, 65535, !dbg !7755
  %bf.cast82 = trunc i64 %bf.clear81 to i32, !dbg !7755
  %idxprom83 = sext i32 %bf.cast82 to i64, !dbg !7755
  %arrayidx84 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom83, !dbg !7755
  %55 = load i32, i32* %arrayidx84, align 4, !dbg !7755
  %cmp85 = icmp uge i32 %55, 4, !dbg !7755
  br i1 %cmp85, label %land.lhs.true86, label %cond.false97, !dbg !7755

land.lhs.true86:                                  ; preds = %land.lhs.true78
  %56 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7755
  %57 = load %union.tree_node*, %union.tree_node** %56, align 8, !dbg !7755
  %base87 = bitcast %union.tree_node* %57 to %struct.tree_base*, !dbg !7755
  %58 = bitcast %struct.tree_base* %base87 to i64*, !dbg !7755
  %bf.load88 = load i64, i64* %58, align 8, !dbg !7755
  %bf.clear89 = and i64 %bf.load88, 65535, !dbg !7755
  %bf.cast90 = trunc i64 %bf.clear89 to i32, !dbg !7755
  %idxprom91 = sext i32 %bf.cast90 to i64, !dbg !7755
  %arrayidx92 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom91, !dbg !7755
  %59 = load i32, i32* %arrayidx92, align 4, !dbg !7755
  %cmp93 = icmp ule i32 %59, 10, !dbg !7755
  br i1 %cmp93, label %cond.true94, label %cond.false97, !dbg !7755

cond.true94:                                      ; preds = %land.lhs.true86
  %60 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7755
  %61 = load %union.tree_node*, %union.tree_node** %60, align 8, !dbg !7755
  %exp95 = bitcast %union.tree_node* %61 to %struct.tree_exp*, !dbg !7755
  %locus96 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp95, i32 0, i32 1, !dbg !7755
  %62 = load i32, i32* %locus96, align 8, !dbg !7755
  br label %cond.end98, !dbg !7755

cond.false97:                                     ; preds = %land.lhs.true86, %land.lhs.true78
  br label %cond.end98, !dbg !7755

cond.end98:                                       ; preds = %cond.false97, %cond.true94
  %cond99 = phi i32 [ %62, %cond.true94 ], [ 0, %cond.false97 ], !dbg !7755
  %63 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7756
  %64 = load %union.tree_node*, %union.tree_node** %63, align 8, !dbg !7756
  %exp100 = bitcast %union.tree_node* %64 to %struct.tree_exp*, !dbg !7756
  %operands101 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp100, i32 0, i32 3, !dbg !7756
  %arrayidx102 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands101, i64 0, i64 0, !dbg !7756
  %65 = load %union.tree_node*, %union.tree_node** %arrayidx102, align 8, !dbg !7756
  %66 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !7757
  %67 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7758
  %68 = load %union.tree_node*, %union.tree_node** %67, align 8, !dbg !7758
  %common103 = bitcast %union.tree_node* %68 to %struct.tree_common*, !dbg !7758
  %type104 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common103, i32 0, i32 2, !dbg !7758
  %69 = load %union.tree_node*, %union.tree_node** %type104, align 8, !dbg !7758
  %call105 = call %union.tree_node* @maybe_fold_offset_to_address(i32 %cond99, %union.tree_node* %65, %union.tree_node* %66, %union.tree_node* %69), !dbg !7759
  store %union.tree_node* %call105, %union.tree_node** %tem, align 8, !dbg !7760
  %cmp106 = icmp ne %union.tree_node* %call105, null, !dbg !7761
  br i1 %cmp106, label %if.then107, label %if.end108, !dbg !7762

if.then107:                                       ; preds = %cond.end98
  %70 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !7763
  %71 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7764
  store %union.tree_node* %70, %union.tree_node** %71, align 8, !dbg !7765
  br label %if.end108, !dbg !7766

if.end108:                                        ; preds = %if.then107, %cond.end98, %lor.lhs.false67, %lor.lhs.false48, %lor.lhs.false36
  %72 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7767
  %73 = load %union.tree_node*, %union.tree_node** %72, align 8, !dbg !7767
  %base109 = bitcast %union.tree_node* %73 to %struct.tree_base*, !dbg !7767
  %74 = bitcast %struct.tree_base* %base109 to i64*, !dbg !7767
  %bf.load110 = load i64, i64* %74, align 8, !dbg !7767
  %bf.clear111 = and i64 %bf.load110, 65535, !dbg !7767
  %bf.cast112 = trunc i64 %bf.clear111 to i32, !dbg !7767
  %cmp113 = icmp eq i32 %bf.cast112, 116, !dbg !7767
  br i1 %cmp113, label %if.then120, label %lor.lhs.false114, !dbg !7767

lor.lhs.false114:                                 ; preds = %if.end108
  %75 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7767
  %76 = load %union.tree_node*, %union.tree_node** %75, align 8, !dbg !7767
  %base115 = bitcast %union.tree_node* %76 to %struct.tree_base*, !dbg !7767
  %77 = bitcast %struct.tree_base* %base115 to i64*, !dbg !7767
  %bf.load116 = load i64, i64* %77, align 8, !dbg !7767
  %bf.clear117 = and i64 %bf.load116, 65535, !dbg !7767
  %bf.cast118 = trunc i64 %bf.clear117 to i32, !dbg !7767
  %cmp119 = icmp eq i32 %bf.cast118, 113, !dbg !7767
  br i1 %cmp119, label %if.then120, label %if.end141, !dbg !7769

if.then120:                                       ; preds = %lor.lhs.false114, %if.end108
  call void @llvm.dbg.declare(metadata %union.tree_node** %sub, metadata !7770, metadata !DIExpression()), !dbg !7772
  %78 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7773
  %79 = load %union.tree_node*, %union.tree_node** %78, align 8, !dbg !7773
  %exp121 = bitcast %union.tree_node* %79 to %struct.tree_exp*, !dbg !7773
  %operands122 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp121, i32 0, i32 3, !dbg !7773
  %arrayidx123 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands122, i64 0, i64 0, !dbg !7773
  %80 = load %union.tree_node*, %union.tree_node** %arrayidx123, align 8, !dbg !7773
  store %union.tree_node* %80, %union.tree_node** %sub, align 8, !dbg !7772
  %81 = load %union.tree_node*, %union.tree_node** %sub, align 8, !dbg !7774
  %base124 = bitcast %union.tree_node* %81 to %struct.tree_base*, !dbg !7774
  %82 = bitcast %struct.tree_base* %base124 to i64*, !dbg !7774
  %bf.load125 = load i64, i64* %82, align 8, !dbg !7774
  %bf.clear126 = and i64 %bf.load125, 65535, !dbg !7774
  %bf.cast127 = trunc i64 %bf.clear126 to i32, !dbg !7774
  %cmp128 = icmp eq i32 %bf.cast127, 41, !dbg !7776
  br i1 %cmp128, label %if.then129, label %if.else, !dbg !7777

if.then129:                                       ; preds = %if.then120
  %83 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7778
  %84 = load %union.tree_node*, %union.tree_node** %83, align 8, !dbg !7778
  %exp130 = bitcast %union.tree_node* %84 to %struct.tree_exp*, !dbg !7778
  %operands131 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp130, i32 0, i32 3, !dbg !7778
  %arrayidx132 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands131, i64 0, i64 0, !dbg !7778
  call void @canonicalize_component_ref(%union.tree_node** %arrayidx132), !dbg !7779
  br label %if.end140, !dbg !7779

if.else:                                          ; preds = %if.then120
  %85 = load %union.tree_node*, %union.tree_node** %sub, align 8, !dbg !7780
  %base133 = bitcast %union.tree_node* %85 to %struct.tree_base*, !dbg !7780
  %86 = bitcast %struct.tree_base* %base133 to i64*, !dbg !7780
  %bf.load134 = load i64, i64* %86, align 8, !dbg !7780
  %bf.clear135 = and i64 %bf.load134, 65535, !dbg !7780
  %bf.cast136 = trunc i64 %bf.clear135 to i32, !dbg !7780
  %cmp137 = icmp eq i32 %bf.cast136, 121, !dbg !7782
  br i1 %cmp137, label %if.then138, label %if.end139, !dbg !7783

if.then138:                                       ; preds = %if.else
  %87 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7784
  call void @canonicalize_addr_expr(%union.tree_node** %87), !dbg !7785
  br label %if.end139, !dbg !7785

if.end139:                                        ; preds = %if.then138, %if.else
  br label %if.end140

if.end140:                                        ; preds = %if.end139, %if.then129
  br label %if.end141, !dbg !7786

if.end141:                                        ; preds = %if.end140, %lor.lhs.false114
  %88 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7787
  %89 = load %union.tree_node*, %union.tree_node** %88, align 8, !dbg !7787
  %base142 = bitcast %union.tree_node* %89 to %struct.tree_base*, !dbg !7787
  %90 = bitcast %struct.tree_base* %base142 to i64*, !dbg !7787
  %bf.load143 = load i64, i64* %90, align 8, !dbg !7787
  %bf.clear144 = and i64 %bf.load143, 65535, !dbg !7787
  %bf.cast145 = trunc i64 %bf.clear144 to i32, !dbg !7787
  %cmp146 = icmp eq i32 %bf.cast145, 116, !dbg !7787
  br i1 %cmp146, label %land.lhs.true153, label %lor.lhs.false147, !dbg !7787

lor.lhs.false147:                                 ; preds = %if.end141
  %91 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7787
  %92 = load %union.tree_node*, %union.tree_node** %91, align 8, !dbg !7787
  %base148 = bitcast %union.tree_node* %92 to %struct.tree_base*, !dbg !7787
  %93 = bitcast %struct.tree_base* %base148 to i64*, !dbg !7787
  %bf.load149 = load i64, i64* %93, align 8, !dbg !7787
  %bf.clear150 = and i64 %bf.load149, 65535, !dbg !7787
  %bf.cast151 = trunc i64 %bf.clear150 to i32, !dbg !7787
  %cmp152 = icmp eq i32 %bf.cast151, 113, !dbg !7787
  br i1 %cmp152, label %land.lhs.true153, label %if.end165, !dbg !7789

land.lhs.true153:                                 ; preds = %lor.lhs.false147, %if.end141
  %94 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7790
  %95 = load %union.tree_node*, %union.tree_node** %94, align 8, !dbg !7790
  %common154 = bitcast %union.tree_node* %95 to %struct.tree_common*, !dbg !7790
  %type155 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common154, i32 0, i32 2, !dbg !7790
  %96 = load %union.tree_node*, %union.tree_node** %type155, align 8, !dbg !7790
  %call156 = call zeroext i8 @is_gimple_reg_type(%union.tree_node* %96), !dbg !7791
  %tobool157 = icmp ne i8 %call156, 0, !dbg !7791
  br i1 %tobool157, label %if.end165, label %if.then158, !dbg !7792

if.then158:                                       ; preds = %land.lhs.true153
  %97 = load i32, i32* %loc, align 4, !dbg !7793
  %98 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7793
  %99 = load %union.tree_node*, %union.tree_node** %98, align 8, !dbg !7793
  %common159 = bitcast %union.tree_node* %99 to %struct.tree_common*, !dbg !7793
  %type160 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common159, i32 0, i32 2, !dbg !7793
  %100 = load %union.tree_node*, %union.tree_node** %type160, align 8, !dbg !7793
  %101 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7793
  %102 = load %union.tree_node*, %union.tree_node** %101, align 8, !dbg !7793
  %exp161 = bitcast %union.tree_node* %102 to %struct.tree_exp*, !dbg !7793
  %operands162 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp161, i32 0, i32 3, !dbg !7793
  %arrayidx163 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands162, i64 0, i64 0, !dbg !7793
  %103 = load %union.tree_node*, %union.tree_node** %arrayidx163, align 8, !dbg !7793
  %call164 = call %union.tree_node* @fold_build1_stat_loc(i32 %97, i32 118, %union.tree_node* %100, %union.tree_node* %103), !dbg !7793
  %104 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7794
  store %union.tree_node* %call164, %union.tree_node** %104, align 8, !dbg !7795
  br label %if.end165, !dbg !7796

if.end165:                                        ; preds = %if.then158, %land.lhs.true153, %lor.lhs.false147
  ret i32 0, !dbg !7797
}

declare dso_local %union.tree_node* @fold_indirect_ref_loc(i32, %union.tree_node*) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimplify_decl_expr(%union.tree_node** %stmt_p, %struct.gimple_seq_d** %seq_p) #0 !dbg !7798 {
entry:
  %retval = alloca i32, align 4
  %stmt_p.addr = alloca %union.tree_node**, align 8
  %seq_p.addr = alloca %struct.gimple_seq_d**, align 8
  %stmt = alloca %union.tree_node*, align 8
  %decl = alloca %union.tree_node*, align 8
  %init = alloca %union.tree_node*, align 8
  store %union.tree_node** %stmt_p, %union.tree_node*** %stmt_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %stmt_p.addr, metadata !7799, metadata !DIExpression()), !dbg !7800
  store %struct.gimple_seq_d** %seq_p, %struct.gimple_seq_d*** %seq_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %seq_p.addr, metadata !7801, metadata !DIExpression()), !dbg !7802
  call void @llvm.dbg.declare(metadata %union.tree_node** %stmt, metadata !7803, metadata !DIExpression()), !dbg !7804
  %0 = load %union.tree_node**, %union.tree_node*** %stmt_p.addr, align 8, !dbg !7805
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !7806
  store %union.tree_node* %1, %union.tree_node** %stmt, align 8, !dbg !7804
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !7807, metadata !DIExpression()), !dbg !7808
  %2 = load %union.tree_node*, %union.tree_node** %stmt, align 8, !dbg !7809
  %exp = bitcast %union.tree_node* %2 to %struct.tree_exp*, !dbg !7809
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !7809
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !7809
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !7809
  store %union.tree_node* %3, %union.tree_node** %decl, align 8, !dbg !7808
  %4 = load %union.tree_node**, %union.tree_node*** %stmt_p.addr, align 8, !dbg !7810
  store %union.tree_node* null, %union.tree_node** %4, align 8, !dbg !7811
  %5 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7812
  %common = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !7812
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7812
  %6 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7812
  %7 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !7814
  %cmp = icmp eq %union.tree_node* %6, %7, !dbg !7815
  br i1 %cmp, label %if.then, label %if.end, !dbg !7816

if.then:                                          ; preds = %entry
  store i32 -2, i32* %retval, align 4, !dbg !7817
  br label %return, !dbg !7817

if.end:                                           ; preds = %entry
  %8 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7818
  %base = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !7818
  %9 = bitcast %struct.tree_base* %base to i64*, !dbg !7818
  %bf.load = load i64, i64* %9, align 8, !dbg !7818
  %bf.clear = and i64 %bf.load, 65535, !dbg !7818
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7818
  %cmp1 = icmp eq i32 %bf.cast, 35, !dbg !7820
  br i1 %cmp1, label %land.lhs.true, label %lor.lhs.false, !dbg !7821

lor.lhs.false:                                    ; preds = %if.end
  %10 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7822
  %base2 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !7822
  %11 = bitcast %struct.tree_base* %base2 to i64*, !dbg !7822
  %bf.load3 = load i64, i64* %11, align 8, !dbg !7822
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !7822
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !7822
  %cmp6 = icmp eq i32 %bf.cast5, 32, !dbg !7823
  br i1 %cmp6, label %land.lhs.true, label %if.end16, !dbg !7824

land.lhs.true:                                    ; preds = %lor.lhs.false, %if.end
  %12 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7825
  %common7 = bitcast %union.tree_node* %12 to %struct.tree_common*, !dbg !7825
  %type8 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common7, i32 0, i32 2, !dbg !7825
  %13 = load %union.tree_node*, %union.tree_node** %type8, align 8, !dbg !7825
  %base9 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !7825
  %14 = bitcast %struct.tree_base* %base9 to i64*, !dbg !7825
  %bf.load10 = load i64, i64* %14, align 8, !dbg !7825
  %bf.lshr = lshr i64 %bf.load10, 17, !dbg !7825
  %bf.clear11 = and i64 %bf.lshr, 1, !dbg !7825
  %bf.cast12 = trunc i64 %bf.clear11 to i32, !dbg !7825
  %tobool = icmp ne i32 %bf.cast12, 0, !dbg !7825
  br i1 %tobool, label %if.end16, label %if.then13, !dbg !7826

if.then13:                                        ; preds = %land.lhs.true
  %15 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7827
  %common14 = bitcast %union.tree_node* %15 to %struct.tree_common*, !dbg !7827
  %type15 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common14, i32 0, i32 2, !dbg !7827
  %16 = load %union.tree_node*, %union.tree_node** %type15, align 8, !dbg !7827
  %17 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %seq_p.addr, align 8, !dbg !7828
  call void @gimplify_type_sizes(%union.tree_node* %16, %struct.gimple_seq_d** %17), !dbg !7829
  br label %if.end16, !dbg !7829

if.end16:                                         ; preds = %if.then13, %land.lhs.true, %lor.lhs.false
  %18 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7830
  %base17 = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !7830
  %19 = bitcast %struct.tree_base* %base17 to i64*, !dbg !7830
  %bf.load18 = load i64, i64* %19, align 8, !dbg !7830
  %bf.clear19 = and i64 %bf.load18, 65535, !dbg !7830
  %bf.cast20 = trunc i64 %bf.clear19 to i32, !dbg !7830
  %cmp21 = icmp eq i32 %bf.cast20, 32, !dbg !7832
  br i1 %cmp21, label %land.lhs.true22, label %if.end83, !dbg !7833

land.lhs.true22:                                  ; preds = %if.end16
  %20 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7834
  %decl_common = bitcast %union.tree_node* %20 to %struct.tree_decl_common*, !dbg !7834
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !7834
  %21 = bitcast i40* %decl_flag_1 to i64*, !dbg !7834
  %bf.load23 = load i64, i64* %21, align 8, !dbg !7834
  %bf.lshr24 = lshr i64 %bf.load23, 25, !dbg !7834
  %bf.clear25 = and i64 %bf.lshr24, 1, !dbg !7834
  %bf.cast26 = trunc i64 %bf.clear25 to i32, !dbg !7834
  %tobool27 = icmp ne i32 %bf.cast26, 0, !dbg !7834
  br i1 %tobool27, label %if.end83, label %if.then28, !dbg !7835

if.then28:                                        ; preds = %land.lhs.true22
  call void @llvm.dbg.declare(metadata %union.tree_node** %init, metadata !7836, metadata !DIExpression()), !dbg !7838
  %22 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7839
  %decl_common29 = bitcast %union.tree_node* %22 to %struct.tree_decl_common*, !dbg !7839
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common29, i32 0, i32 5, !dbg !7839
  %23 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !7839
  store %union.tree_node* %23, %union.tree_node** %init, align 8, !dbg !7838
  %24 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7840
  %decl_common30 = bitcast %union.tree_node* %24 to %struct.tree_decl_common*, !dbg !7840
  %size_unit = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common30, i32 0, i32 4, !dbg !7840
  %25 = load %union.tree_node*, %union.tree_node** %size_unit, align 8, !dbg !7840
  %base31 = bitcast %union.tree_node* %25 to %struct.tree_base*, !dbg !7840
  %26 = bitcast %struct.tree_base* %base31 to i64*, !dbg !7840
  %bf.load32 = load i64, i64* %26, align 8, !dbg !7840
  %bf.clear33 = and i64 %bf.load32, 65535, !dbg !7840
  %bf.cast34 = trunc i64 %bf.clear33 to i32, !dbg !7840
  %cmp35 = icmp ne i32 %bf.cast34, 23, !dbg !7842
  br i1 %cmp35, label %if.then49, label %lor.lhs.false36, !dbg !7843

lor.lhs.false36:                                  ; preds = %if.then28
  %27 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7844
  %base37 = bitcast %union.tree_node* %27 to %struct.tree_base*, !dbg !7844
  %28 = bitcast %struct.tree_base* %base37 to i64*, !dbg !7844
  %bf.load38 = load i64, i64* %28, align 8, !dbg !7844
  %bf.lshr39 = lshr i64 %bf.load38, 26, !dbg !7844
  %bf.clear40 = and i64 %bf.lshr39, 1, !dbg !7844
  %bf.cast41 = trunc i64 %bf.clear40 to i32, !dbg !7844
  %tobool42 = icmp ne i32 %bf.cast41, 0, !dbg !7844
  br i1 %tobool42, label %if.end50, label %land.lhs.true43, !dbg !7845

land.lhs.true43:                                  ; preds = %lor.lhs.false36
  %29 = load i32, i32* @flag_stack_check, align 4, !dbg !7846
  %cmp44 = icmp eq i32 %29, 1, !dbg !7847
  br i1 %cmp44, label %land.lhs.true45, label %if.end50, !dbg !7848

land.lhs.true45:                                  ; preds = %land.lhs.true43
  %30 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7849
  %decl_common46 = bitcast %union.tree_node* %30 to %struct.tree_decl_common*, !dbg !7849
  %size_unit47 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common46, i32 0, i32 4, !dbg !7849
  %31 = load %union.tree_node*, %union.tree_node** %size_unit47, align 8, !dbg !7849
  %call = call i32 @compare_tree_int(%union.tree_node* %31, i64 40), !dbg !7850
  %cmp48 = icmp sgt i32 %call, 0, !dbg !7851
  br i1 %cmp48, label %if.then49, label %if.end50, !dbg !7852

if.then49:                                        ; preds = %land.lhs.true45, %if.then28
  %32 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7853
  %33 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %seq_p.addr, align 8, !dbg !7854
  call void @gimplify_vla_decl(%union.tree_node* %32, %struct.gimple_seq_d** %33), !dbg !7855
  br label %if.end50, !dbg !7855

if.end50:                                         ; preds = %if.then49, %land.lhs.true45, %land.lhs.true43, %lor.lhs.false36
  %34 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !7856
  %tobool51 = icmp ne %union.tree_node* %34, null, !dbg !7856
  br i1 %tobool51, label %land.lhs.true52, label %if.end67, !dbg !7858

land.lhs.true52:                                  ; preds = %if.end50
  %35 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !7859
  %36 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !7860
  %cmp53 = icmp ne %union.tree_node* %35, %36, !dbg !7861
  br i1 %cmp53, label %if.then54, label %if.end67, !dbg !7862

if.then54:                                        ; preds = %land.lhs.true52
  %37 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7863
  %base55 = bitcast %union.tree_node* %37 to %struct.tree_base*, !dbg !7863
  %38 = bitcast %struct.tree_base* %base55 to i64*, !dbg !7863
  %bf.load56 = load i64, i64* %38, align 8, !dbg !7863
  %bf.lshr57 = lshr i64 %bf.load56, 26, !dbg !7863
  %bf.clear58 = and i64 %bf.lshr57, 1, !dbg !7863
  %bf.cast59 = trunc i64 %bf.clear58 to i32, !dbg !7863
  %tobool60 = icmp ne i32 %bf.cast59, 0, !dbg !7863
  br i1 %tobool60, label %if.else, label %if.then61, !dbg !7866

if.then61:                                        ; preds = %if.then54
  %39 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7867
  %decl_common62 = bitcast %union.tree_node* %39 to %struct.tree_decl_common*, !dbg !7867
  %initial63 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common62, i32 0, i32 5, !dbg !7867
  store %union.tree_node* null, %union.tree_node** %initial63, align 8, !dbg !7869
  %40 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !7870
  %41 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7870
  %42 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !7870
  %call64 = call %union.tree_node* @build2_stat(i32 54, %union.tree_node* %40, %union.tree_node* %41, %union.tree_node* %42), !dbg !7870
  store %union.tree_node* %call64, %union.tree_node** %init, align 8, !dbg !7871
  %43 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !7872
  %44 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %seq_p.addr, align 8, !dbg !7873
  call void @gimplify_and_add(%union.tree_node* %43, %struct.gimple_seq_d** %44), !dbg !7874
  %45 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !7875
  %46 = bitcast %union.tree_node* %45 to i8*, !dbg !7875
  call void @ggc_free(i8* %46), !dbg !7876
  br label %if.end66, !dbg !7877

if.else:                                          ; preds = %if.then54
  %call65 = call %union.tree_node* @walk_tree_1(%union.tree_node** %init, %union.tree_node* (%union.tree_node**, i32*, i8*)* @force_labels_r, i8* null, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !7878
  br label %if.end66

if.end66:                                         ; preds = %if.else, %if.then61
  br label %if.end67, !dbg !7879

if.end67:                                         ; preds = %if.end66, %land.lhs.true52, %if.end50
  %47 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7880
  %decl_with_vis = bitcast %union.tree_node* %47 to %struct.tree_decl_with_vis*, !dbg !7880
  %seen_in_bind_expr = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 4, !dbg !7880
  %48 = bitcast i24* %seen_in_bind_expr to i32*, !dbg !7880
  %bf.load68 = load i32, i32* %48, align 8, !dbg !7880
  %bf.lshr69 = lshr i32 %bf.load68, 8, !dbg !7880
  %bf.clear70 = and i32 %bf.lshr69, 1, !dbg !7880
  %tobool71 = icmp ne i32 %bf.clear70, 0, !dbg !7880
  br i1 %tobool71, label %if.end82, label %land.lhs.true72, !dbg !7882

land.lhs.true72:                                  ; preds = %if.end67
  %49 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7883
  %decl_common73 = bitcast %union.tree_node* %49 to %struct.tree_decl_common*, !dbg !7883
  %artificial_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common73, i32 0, i32 2, !dbg !7883
  %50 = bitcast i40* %artificial_flag to i64*, !dbg !7883
  %bf.load74 = load i64, i64* %50, align 8, !dbg !7883
  %bf.lshr75 = lshr i64 %bf.load74, 12, !dbg !7883
  %bf.clear76 = and i64 %bf.lshr75, 1, !dbg !7883
  %bf.cast77 = trunc i64 %bf.clear76 to i32, !dbg !7883
  %tobool78 = icmp ne i32 %bf.cast77, 0, !dbg !7883
  br i1 %tobool78, label %land.lhs.true79, label %if.end82, !dbg !7884

land.lhs.true79:                                  ; preds = %land.lhs.true72
  %51 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7885
  %decl_minimal = bitcast %union.tree_node* %51 to %struct.tree_decl_minimal*, !dbg !7885
  %name = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 3, !dbg !7885
  %52 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !7885
  %cmp80 = icmp eq %union.tree_node* %52, null, !dbg !7886
  br i1 %cmp80, label %if.then81, label %if.end82, !dbg !7887

if.then81:                                        ; preds = %land.lhs.true79
  %53 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7888
  call void @gimple_add_tmp_var(%union.tree_node* %53), !dbg !7889
  br label %if.end82, !dbg !7889

if.end82:                                         ; preds = %if.then81, %land.lhs.true79, %land.lhs.true72, %if.end67
  br label %if.end83, !dbg !7890

if.end83:                                         ; preds = %if.end82, %land.lhs.true22, %if.end16
  store i32 1, i32* %retval, align 4, !dbg !7891
  br label %return, !dbg !7891

return:                                           ; preds = %if.end83, %if.then
  %54 = load i32, i32* %retval, align 4, !dbg !7892
  ret i32 %54, !dbg !7892
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimplify_bind_expr(%union.tree_node** %expr_p, %struct.gimple_seq_d** %pre_p) #0 !dbg !7893 {
entry:
  %retval = alloca i32, align 4
  %expr_p.addr = alloca %union.tree_node**, align 8
  %pre_p.addr = alloca %struct.gimple_seq_d**, align 8
  %bind_expr = alloca %union.tree_node*, align 8
  %old_save_stack = alloca i8, align 1
  %t = alloca %union.tree_node*, align 8
  %gimple_bind = alloca %union.gimple_statement_d*, align 8
  %body = alloca %struct.gimple_seq_d*, align 8
  %temp = alloca %union.tree_node*, align 8
  %ctx = alloca %struct.gimplify_omp_ctx*, align 8
  %stack_save = alloca %union.gimple_statement_d*, align 8
  %stack_restore = alloca %union.gimple_statement_d*, align 8
  %gs = alloca %union.gimple_statement_d*, align 8
  %cleanup = alloca %struct.gimple_seq_d*, align 8
  %new_body = alloca %struct.gimple_seq_d*, align 8
  store %union.tree_node** %expr_p, %union.tree_node*** %expr_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %expr_p.addr, metadata !7894, metadata !DIExpression()), !dbg !7895
  store %struct.gimple_seq_d** %pre_p, %struct.gimple_seq_d*** %pre_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %pre_p.addr, metadata !7896, metadata !DIExpression()), !dbg !7897
  call void @llvm.dbg.declare(metadata %union.tree_node** %bind_expr, metadata !7898, metadata !DIExpression()), !dbg !7899
  %0 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !7900
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !7901
  store %union.tree_node* %1, %union.tree_node** %bind_expr, align 8, !dbg !7899
  call void @llvm.dbg.declare(metadata i8* %old_save_stack, metadata !7902, metadata !DIExpression()), !dbg !7903
  %2 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !7904
  %save_stack = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %2, i32 0, i32 9, !dbg !7905
  %3 = load i8, i8* %save_stack, align 4, !dbg !7905
  store i8 %3, i8* %old_save_stack, align 1, !dbg !7903
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !7906, metadata !DIExpression()), !dbg !7907
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gimple_bind, metadata !7908, metadata !DIExpression()), !dbg !7909
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %body, metadata !7910, metadata !DIExpression()), !dbg !7911
  call void @llvm.dbg.declare(metadata %union.tree_node** %temp, metadata !7912, metadata !DIExpression()), !dbg !7913
  %4 = load %union.tree_node*, %union.tree_node** %bind_expr, align 8, !dbg !7914
  %call = call %union.tree_node* @voidify_wrapper_expr(%union.tree_node* %4, %union.tree_node* null), !dbg !7915
  store %union.tree_node* %call, %union.tree_node** %temp, align 8, !dbg !7913
  %5 = load %union.tree_node*, %union.tree_node** %bind_expr, align 8, !dbg !7916
  %exp = bitcast %union.tree_node* %5 to %struct.tree_exp*, !dbg !7916
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !7916
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !7916
  %6 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !7916
  store %union.tree_node* %6, %union.tree_node** %t, align 8, !dbg !7918
  br label %for.cond, !dbg !7919

for.cond:                                         ; preds = %for.inc, %entry
  %7 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7920
  %tobool = icmp ne %union.tree_node* %7, null, !dbg !7922
  br i1 %tobool, label %for.body, label %for.end, !dbg !7922

for.body:                                         ; preds = %for.cond
  %8 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7923
  %base = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !7923
  %9 = bitcast %struct.tree_base* %base to i64*, !dbg !7923
  %bf.load = load i64, i64* %9, align 8, !dbg !7923
  %bf.clear = and i64 %bf.load, 65535, !dbg !7923
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7923
  %cmp = icmp eq i32 %bf.cast, 32, !dbg !7926
  br i1 %cmp, label %if.then, label %if.end31, !dbg !7927

if.then:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata %struct.gimplify_omp_ctx** %ctx, metadata !7928, metadata !DIExpression()), !dbg !7930
  %10 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** @gimplify_omp_ctxp, align 8, !dbg !7931
  store %struct.gimplify_omp_ctx* %10, %struct.gimplify_omp_ctx** %ctx, align 8, !dbg !7930
  %11 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx, align 8, !dbg !7932
  %tobool1 = icmp ne %struct.gimplify_omp_ctx* %11, null, !dbg !7932
  br i1 %tobool1, label %land.lhs.true, label %if.end, !dbg !7934

land.lhs.true:                                    ; preds = %if.then
  %12 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7935
  %call2 = call zeroext i8 @is_global_var(%union.tree_node* %12), !dbg !7936
  %tobool3 = icmp ne i8 %call2, 0, !dbg !7936
  br i1 %tobool3, label %if.end, label %land.lhs.true4, !dbg !7937

land.lhs.true4:                                   ; preds = %land.lhs.true
  %13 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7938
  %decl_with_vis = bitcast %union.tree_node* %13 to %struct.tree_decl_with_vis*, !dbg !7938
  %seen_in_bind_expr = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 4, !dbg !7938
  %14 = bitcast i24* %seen_in_bind_expr to i32*, !dbg !7938
  %bf.load5 = load i32, i32* %14, align 8, !dbg !7938
  %bf.lshr = lshr i32 %bf.load5, 8, !dbg !7938
  %bf.clear6 = and i32 %bf.lshr, 1, !dbg !7938
  %tobool7 = icmp ne i32 %bf.clear6, 0, !dbg !7938
  br i1 %tobool7, label %lor.lhs.false, label %if.then10, !dbg !7939

lor.lhs.false:                                    ; preds = %land.lhs.true4
  %15 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx, align 8, !dbg !7940
  %variables = getelementptr inbounds %struct.gimplify_omp_ctx, %struct.gimplify_omp_ctx* %15, i32 0, i32 1, !dbg !7941
  %16 = load %struct.splay_tree_s*, %struct.splay_tree_s** %variables, align 8, !dbg !7941
  %17 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7942
  %18 = ptrtoint %union.tree_node* %17 to i64, !dbg !7943
  %call8 = call %struct.splay_tree_node_s* @splay_tree_lookup(%struct.splay_tree_s* %16, i64 %18), !dbg !7944
  %cmp9 = icmp eq %struct.splay_tree_node_s* %call8, null, !dbg !7945
  br i1 %cmp9, label %if.then10, label %if.end, !dbg !7946

if.then10:                                        ; preds = %lor.lhs.false, %land.lhs.true4
  %19 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** @gimplify_omp_ctxp, align 8, !dbg !7947
  %20 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7948
  call void @omp_add_variable(%struct.gimplify_omp_ctx* %19, %union.tree_node* %20, i32 129), !dbg !7949
  br label %if.end, !dbg !7949

if.end:                                           ; preds = %if.then10, %lor.lhs.false, %land.lhs.true, %if.then
  %21 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7950
  %decl_with_vis11 = bitcast %union.tree_node* %21 to %struct.tree_decl_with_vis*, !dbg !7950
  %seen_in_bind_expr12 = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis11, i32 0, i32 4, !dbg !7950
  %22 = bitcast i24* %seen_in_bind_expr12 to i32*, !dbg !7950
  %bf.load13 = load i32, i32* %22, align 8, !dbg !7951
  %bf.clear14 = and i32 %bf.load13, -257, !dbg !7951
  %bf.set = or i32 %bf.clear14, 256, !dbg !7951
  store i32 %bf.set, i32* %22, align 8, !dbg !7951
  %23 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7952
  %decl_with_vis15 = bitcast %union.tree_node* %23 to %struct.tree_decl_with_vis*, !dbg !7952
  %hard_register = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis15, i32 0, i32 4, !dbg !7952
  %24 = bitcast i24* %hard_register to i32*, !dbg !7952
  %bf.load16 = load i32, i32* %24, align 8, !dbg !7952
  %bf.lshr17 = lshr i32 %bf.load16, 1, !dbg !7952
  %bf.clear18 = and i32 %bf.lshr17, 1, !dbg !7952
  %tobool19 = icmp ne i32 %bf.clear18, 0, !dbg !7952
  br i1 %tobool19, label %land.lhs.true20, label %if.end30, !dbg !7954

land.lhs.true20:                                  ; preds = %if.end
  %25 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7955
  %call21 = call zeroext i8 @is_global_var(%union.tree_node* %25), !dbg !7956
  %tobool22 = icmp ne i8 %call21, 0, !dbg !7956
  br i1 %tobool22, label %if.end30, label %land.lhs.true23, !dbg !7957

land.lhs.true23:                                  ; preds = %land.lhs.true20
  %26 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7958
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %26, i64 0, !dbg !7958
  %tobool24 = icmp ne %struct.function* %add.ptr, null, !dbg !7958
  br i1 %tobool24, label %if.then25, label %if.end30, !dbg !7959

if.then25:                                        ; preds = %land.lhs.true23
  %27 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7960
  %add.ptr26 = getelementptr inbounds %struct.function, %struct.function* %27, i64 0, !dbg !7960
  %has_local_explicit_reg_vars = getelementptr inbounds %struct.function, %struct.function* %add.ptr26, i32 0, i32 20, !dbg !7961
  %bf.load27 = load i32, i32* %has_local_explicit_reg_vars, align 8, !dbg !7962
  %bf.clear28 = and i32 %bf.load27, -536870913, !dbg !7962
  %bf.set29 = or i32 %bf.clear28, 536870912, !dbg !7962
  store i32 %bf.set29, i32* %has_local_explicit_reg_vars, align 8, !dbg !7962
  br label %if.end30, !dbg !7960

if.end30:                                         ; preds = %if.then25, %land.lhs.true23, %land.lhs.true20, %if.end
  br label %if.end31, !dbg !7963

if.end31:                                         ; preds = %if.end30, %for.body
  %28 = load i32, i32* @optimize, align 4, !dbg !7964
  %tobool32 = icmp ne i32 %28, 0, !dbg !7964
  br i1 %tobool32, label %land.lhs.true33, label %if.end74, !dbg !7966

land.lhs.true33:                                  ; preds = %if.end31
  %29 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7967
  %common = bitcast %union.tree_node* %29 to %struct.tree_common*, !dbg !7967
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7967
  %30 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7967
  %base34 = bitcast %union.tree_node* %30 to %struct.tree_base*, !dbg !7967
  %31 = bitcast %struct.tree_base* %base34 to i64*, !dbg !7967
  %bf.load35 = load i64, i64* %31, align 8, !dbg !7967
  %bf.clear36 = and i64 %bf.load35, 65535, !dbg !7967
  %bf.cast37 = trunc i64 %bf.clear36 to i32, !dbg !7967
  %cmp38 = icmp eq i32 %bf.cast37, 13, !dbg !7968
  br i1 %cmp38, label %land.lhs.true47, label %lor.lhs.false39, !dbg !7969

lor.lhs.false39:                                  ; preds = %land.lhs.true33
  %32 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7970
  %common40 = bitcast %union.tree_node* %32 to %struct.tree_common*, !dbg !7970
  %type41 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common40, i32 0, i32 2, !dbg !7970
  %33 = load %union.tree_node*, %union.tree_node** %type41, align 8, !dbg !7970
  %base42 = bitcast %union.tree_node* %33 to %struct.tree_base*, !dbg !7970
  %34 = bitcast %struct.tree_base* %base42 to i64*, !dbg !7970
  %bf.load43 = load i64, i64* %34, align 8, !dbg !7970
  %bf.clear44 = and i64 %bf.load43, 65535, !dbg !7970
  %bf.cast45 = trunc i64 %bf.clear44 to i32, !dbg !7970
  %cmp46 = icmp eq i32 %bf.cast45, 14, !dbg !7971
  br i1 %cmp46, label %land.lhs.true47, label %if.end74, !dbg !7972

land.lhs.true47:                                  ; preds = %lor.lhs.false39, %land.lhs.true33
  %35 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7973
  %base48 = bitcast %union.tree_node* %35 to %struct.tree_base*, !dbg !7973
  %36 = bitcast %struct.tree_base* %base48 to i64*, !dbg !7973
  %bf.load49 = load i64, i64* %36, align 8, !dbg !7973
  %bf.lshr50 = lshr i64 %bf.load49, 19, !dbg !7973
  %bf.clear51 = and i64 %bf.lshr50, 1, !dbg !7973
  %bf.cast52 = trunc i64 %bf.clear51 to i32, !dbg !7973
  %tobool53 = icmp ne i32 %bf.cast52, 0, !dbg !7973
  br i1 %tobool53, label %if.end74, label %land.lhs.true54, !dbg !7974

land.lhs.true54:                                  ; preds = %land.lhs.true47
  %37 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7975
  %base55 = bitcast %union.tree_node* %37 to %struct.tree_base*, !dbg !7975
  %38 = bitcast %struct.tree_base* %base55 to i64*, !dbg !7975
  %bf.load56 = load i64, i64* %38, align 8, !dbg !7975
  %bf.clear57 = and i64 %bf.load56, 65535, !dbg !7975
  %bf.cast58 = trunc i64 %bf.clear57 to i32, !dbg !7975
  %cmp59 = icmp eq i32 %bf.cast58, 32, !dbg !7976
  br i1 %cmp59, label %land.lhs.true60, label %if.end74, !dbg !7977

land.lhs.true60:                                  ; preds = %land.lhs.true54
  %39 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7978
  %decl_with_vis61 = bitcast %union.tree_node* %39 to %struct.tree_decl_with_vis*, !dbg !7978
  %hard_register62 = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis61, i32 0, i32 4, !dbg !7978
  %40 = bitcast i24* %hard_register62 to i32*, !dbg !7978
  %bf.load63 = load i32, i32* %40, align 8, !dbg !7978
  %bf.lshr64 = lshr i32 %bf.load63, 1, !dbg !7978
  %bf.clear65 = and i32 %bf.lshr64, 1, !dbg !7978
  %tobool66 = icmp ne i32 %bf.clear65, 0, !dbg !7978
  br i1 %tobool66, label %if.end74, label %land.lhs.true67, !dbg !7979

land.lhs.true67:                                  ; preds = %land.lhs.true60
  %41 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7980
  %call68 = call zeroext i8 @needs_to_live_in_memory(%union.tree_node* %41), !dbg !7981
  %tobool69 = icmp ne i8 %call68, 0, !dbg !7981
  br i1 %tobool69, label %if.end74, label %if.then70, !dbg !7982

if.then70:                                        ; preds = %land.lhs.true67
  %42 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7983
  %decl_common = bitcast %union.tree_node* %42 to %struct.tree_decl_common*, !dbg !7983
  %gimple_reg_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !7983
  %43 = bitcast i40* %gimple_reg_flag to i64*, !dbg !7983
  %bf.load71 = load i64, i64* %43, align 8, !dbg !7984
  %bf.clear72 = and i64 %bf.load71, -134217729, !dbg !7984
  %bf.set73 = or i64 %bf.clear72, 134217728, !dbg !7984
  store i64 %bf.set73, i64* %43, align 8, !dbg !7984
  br label %if.end74, !dbg !7983

if.end74:                                         ; preds = %if.then70, %land.lhs.true67, %land.lhs.true60, %land.lhs.true54, %land.lhs.true47, %lor.lhs.false39, %if.end31
  br label %for.inc, !dbg !7985

for.inc:                                          ; preds = %if.end74
  %44 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7986
  %common75 = bitcast %union.tree_node* %44 to %struct.tree_common*, !dbg !7986
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common75, i32 0, i32 1, !dbg !7986
  %45 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !7986
  store %union.tree_node* %45, %union.tree_node** %t, align 8, !dbg !7987
  br label %for.cond, !dbg !7988, !llvm.loop !7989

for.end:                                          ; preds = %for.cond
  %46 = load %union.tree_node*, %union.tree_node** %bind_expr, align 8, !dbg !7991
  %exp76 = bitcast %union.tree_node* %46 to %struct.tree_exp*, !dbg !7991
  %operands77 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp76, i32 0, i32 3, !dbg !7991
  %arrayidx78 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands77, i64 0, i64 0, !dbg !7991
  %47 = load %union.tree_node*, %union.tree_node** %arrayidx78, align 8, !dbg !7991
  %48 = load %union.tree_node*, %union.tree_node** %bind_expr, align 8, !dbg !7992
  %exp79 = bitcast %union.tree_node* %48 to %struct.tree_exp*, !dbg !7992
  %operands80 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp79, i32 0, i32 3, !dbg !7992
  %arrayidx81 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands80, i64 0, i64 2, !dbg !7992
  %49 = load %union.tree_node*, %union.tree_node** %arrayidx81, align 8, !dbg !7992
  %call82 = call %union.gimple_statement_d* @gimple_build_bind(%union.tree_node* %47, %struct.gimple_seq_d* null, %union.tree_node* %49), !dbg !7993
  store %union.gimple_statement_d* %call82, %union.gimple_statement_d** %gimple_bind, align 8, !dbg !7994
  %50 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gimple_bind, align 8, !dbg !7995
  call void @gimple_push_bind_expr(%union.gimple_statement_d* %50), !dbg !7996
  %51 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !7997
  %save_stack83 = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %51, i32 0, i32 9, !dbg !7998
  store i8 0, i8* %save_stack83, align 4, !dbg !7999
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %body, align 8, !dbg !8000
  %52 = load %union.tree_node*, %union.tree_node** %bind_expr, align 8, !dbg !8001
  %exp84 = bitcast %union.tree_node* %52 to %struct.tree_exp*, !dbg !8001
  %operands85 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp84, i32 0, i32 3, !dbg !8001
  %arrayidx86 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands85, i64 0, i64 1, !dbg !8001
  %call87 = call zeroext i8 @gimplify_stmt(%union.tree_node** %arrayidx86, %struct.gimple_seq_d** %body), !dbg !8002
  %53 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gimple_bind, align 8, !dbg !8003
  %54 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %body, align 8, !dbg !8004
  call void @gimple_bind_set_body(%union.gimple_statement_d* %53, %struct.gimple_seq_d* %54), !dbg !8005
  %55 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !8006
  %save_stack88 = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %55, i32 0, i32 9, !dbg !8008
  %56 = load i8, i8* %save_stack88, align 4, !dbg !8008
  %tobool89 = icmp ne i8 %56, 0, !dbg !8006
  br i1 %tobool89, label %if.then90, label %if.end93, !dbg !8009

if.then90:                                        ; preds = %for.end
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stack_save, metadata !8010, metadata !DIExpression()), !dbg !8012
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stack_restore, metadata !8013, metadata !DIExpression()), !dbg !8014
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs, metadata !8015, metadata !DIExpression()), !dbg !8016
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %cleanup, metadata !8017, metadata !DIExpression()), !dbg !8018
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %new_body, metadata !8019, metadata !DIExpression()), !dbg !8020
  call void @build_stack_save_restore(%union.gimple_statement_d** %stack_save, %union.gimple_statement_d** %stack_restore), !dbg !8021
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %new_body, align 8, !dbg !8022
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %cleanup, align 8, !dbg !8023
  %57 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stack_restore, align 8, !dbg !8024
  call void @gimplify_seq_add_stmt(%struct.gimple_seq_d** %cleanup, %union.gimple_statement_d* %57), !dbg !8025
  %58 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gimple_bind, align 8, !dbg !8026
  %call91 = call %struct.gimple_seq_d* @gimple_bind_body(%union.gimple_statement_d* %58), !dbg !8027
  %59 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %cleanup, align 8, !dbg !8028
  %call92 = call %union.gimple_statement_d* @gimple_build_try(%struct.gimple_seq_d* %call91, %struct.gimple_seq_d* %59, i32 2), !dbg !8029
  store %union.gimple_statement_d* %call92, %union.gimple_statement_d** %gs, align 8, !dbg !8030
  %60 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stack_save, align 8, !dbg !8031
  call void @gimplify_seq_add_stmt(%struct.gimple_seq_d** %new_body, %union.gimple_statement_d* %60), !dbg !8032
  %61 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs, align 8, !dbg !8033
  call void @gimplify_seq_add_stmt(%struct.gimple_seq_d** %new_body, %union.gimple_statement_d* %61), !dbg !8034
  %62 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gimple_bind, align 8, !dbg !8035
  %63 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %new_body, align 8, !dbg !8036
  call void @gimple_bind_set_body(%union.gimple_statement_d* %62, %struct.gimple_seq_d* %63), !dbg !8037
  br label %if.end93, !dbg !8038

if.end93:                                         ; preds = %if.then90, %for.end
  %64 = load i8, i8* %old_save_stack, align 1, !dbg !8039
  %65 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !8040
  %save_stack94 = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %65, i32 0, i32 9, !dbg !8041
  store i8 %64, i8* %save_stack94, align 4, !dbg !8042
  call void @gimple_pop_bind_expr(), !dbg !8043
  %66 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !8044
  %67 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gimple_bind, align 8, !dbg !8045
  call void @gimplify_seq_add_stmt(%struct.gimple_seq_d** %66, %union.gimple_statement_d* %67), !dbg !8046
  %68 = load %union.tree_node*, %union.tree_node** %temp, align 8, !dbg !8047
  %tobool95 = icmp ne %union.tree_node* %68, null, !dbg !8047
  br i1 %tobool95, label %if.then96, label %if.end97, !dbg !8049

if.then96:                                        ; preds = %if.end93
  %69 = load %union.tree_node*, %union.tree_node** %temp, align 8, !dbg !8050
  %70 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !8052
  store %union.tree_node* %69, %union.tree_node** %70, align 8, !dbg !8053
  store i32 0, i32* %retval, align 4, !dbg !8054
  br label %return, !dbg !8054

if.end97:                                         ; preds = %if.end93
  %71 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !8055
  store %union.tree_node* null, %union.tree_node** %71, align 8, !dbg !8056
  store i32 1, i32* %retval, align 4, !dbg !8057
  br label %return, !dbg !8057

return:                                           ; preds = %if.end97, %if.then96
  %72 = load i32, i32* %retval, align 4, !dbg !8058
  ret i32 %72, !dbg !8058
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimplify_loop_expr(%union.tree_node** %expr_p, %struct.gimple_seq_d** %pre_p) #0 !dbg !8059 {
entry:
  %expr_p.addr = alloca %union.tree_node**, align 8
  %pre_p.addr = alloca %struct.gimple_seq_d**, align 8
  %saved_label = alloca %union.tree_node*, align 8
  %start_label = alloca %union.tree_node*, align 8
  store %union.tree_node** %expr_p, %union.tree_node*** %expr_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %expr_p.addr, metadata !8060, metadata !DIExpression()), !dbg !8061
  store %struct.gimple_seq_d** %pre_p, %struct.gimple_seq_d*** %pre_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %pre_p.addr, metadata !8062, metadata !DIExpression()), !dbg !8063
  call void @llvm.dbg.declare(metadata %union.tree_node** %saved_label, metadata !8064, metadata !DIExpression()), !dbg !8065
  %0 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !8066
  %exit_label = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %0, i32 0, i32 4, !dbg !8067
  %1 = load %union.tree_node*, %union.tree_node** %exit_label, align 8, !dbg !8067
  store %union.tree_node* %1, %union.tree_node** %saved_label, align 8, !dbg !8065
  call void @llvm.dbg.declare(metadata %union.tree_node** %start_label, metadata !8068, metadata !DIExpression()), !dbg !8069
  %call = call %union.tree_node* @create_artificial_label(i32 0), !dbg !8070
  store %union.tree_node* %call, %union.tree_node** %start_label, align 8, !dbg !8069
  %2 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !8071
  %3 = load %union.tree_node*, %union.tree_node** %start_label, align 8, !dbg !8072
  %call1 = call %union.gimple_statement_d* @gimple_build_label(%union.tree_node* %3), !dbg !8073
  call void @gimplify_seq_add_stmt(%struct.gimple_seq_d** %2, %union.gimple_statement_d* %call1), !dbg !8074
  %4 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !8075
  %exit_label2 = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %4, i32 0, i32 4, !dbg !8076
  store %union.tree_node* null, %union.tree_node** %exit_label2, align 8, !dbg !8077
  %5 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !8078
  %6 = load %union.tree_node*, %union.tree_node** %5, align 8, !dbg !8078
  %exp = bitcast %union.tree_node* %6 to %struct.tree_exp*, !dbg !8078
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !8078
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !8078
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !8078
  %8 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !8079
  call void @gimplify_and_add(%union.tree_node* %7, %struct.gimple_seq_d** %8), !dbg !8080
  %9 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !8081
  %10 = load %union.tree_node*, %union.tree_node** %start_label, align 8, !dbg !8082
  %call3 = call %union.gimple_statement_d* @gimple_build_goto(%union.tree_node* %10), !dbg !8083
  call void @gimplify_seq_add_stmt(%struct.gimple_seq_d** %9, %union.gimple_statement_d* %call3), !dbg !8084
  %11 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !8085
  %exit_label4 = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %11, i32 0, i32 4, !dbg !8087
  %12 = load %union.tree_node*, %union.tree_node** %exit_label4, align 8, !dbg !8087
  %tobool = icmp ne %union.tree_node* %12, null, !dbg !8085
  br i1 %tobool, label %if.then, label %if.end, !dbg !8088

if.then:                                          ; preds = %entry
  %13 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !8089
  %14 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !8090
  %exit_label5 = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %14, i32 0, i32 4, !dbg !8091
  %15 = load %union.tree_node*, %union.tree_node** %exit_label5, align 8, !dbg !8091
  %call6 = call %union.gimple_statement_d* @gimple_build_label(%union.tree_node* %15), !dbg !8092
  call void @gimplify_seq_add_stmt(%struct.gimple_seq_d** %13, %union.gimple_statement_d* %call6), !dbg !8093
  br label %if.end, !dbg !8093

if.end:                                           ; preds = %if.then, %entry
  %16 = load %union.tree_node*, %union.tree_node** %saved_label, align 8, !dbg !8094
  %17 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !8095
  %exit_label7 = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %17, i32 0, i32 4, !dbg !8096
  store %union.tree_node* %16, %union.tree_node** %exit_label7, align 8, !dbg !8097
  %18 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !8098
  store %union.tree_node* null, %union.tree_node** %18, align 8, !dbg !8099
  ret i32 1, !dbg !8100
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimplify_switch_expr(%union.tree_node** %expr_p, %struct.gimple_seq_d** %pre_p) #0 !dbg !8101 {
entry:
  %retval = alloca i32, align 4
  %expr_p.addr = alloca %union.tree_node**, align 8
  %pre_p.addr = alloca %struct.gimple_seq_d**, align 8
  %switch_expr = alloca %union.tree_node*, align 8
  %switch_body_seq = alloca %struct.gimple_seq_d*, align 8
  %ret = alloca i32, align 4
  %labels = alloca %struct.VEC_tree_heap*, align 8
  %saved_labels = alloca %struct.VEC_tree_heap*, align 8
  %default_case = alloca %union.tree_node*, align 8
  %i = alloca i64, align 8
  %len = alloca i64, align 8
  %gimple_switch = alloca %union.gimple_statement_d*, align 8
  %elt = alloca %union.tree_node*, align 8
  %low = alloca %union.tree_node*, align 8
  %remove_element = alloca i8, align 1
  %high = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  %low129 = alloca %union.tree_node*, align 8
  %high130 = alloca %union.tree_node*, align 8
  %new_default = alloca %union.gimple_statement_d*, align 8
  store %union.tree_node** %expr_p, %union.tree_node*** %expr_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %expr_p.addr, metadata !8102, metadata !DIExpression()), !dbg !8103
  store %struct.gimple_seq_d** %pre_p, %struct.gimple_seq_d*** %pre_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %pre_p.addr, metadata !8104, metadata !DIExpression()), !dbg !8105
  call void @llvm.dbg.declare(metadata %union.tree_node** %switch_expr, metadata !8106, metadata !DIExpression()), !dbg !8107
  %0 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !8108
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !8109
  store %union.tree_node* %1, %union.tree_node** %switch_expr, align 8, !dbg !8107
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %switch_body_seq, metadata !8110, metadata !DIExpression()), !dbg !8111
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %switch_body_seq, align 8, !dbg !8111
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !8112, metadata !DIExpression()), !dbg !8113
  %2 = load %union.tree_node*, %union.tree_node** %switch_expr, align 8, !dbg !8114
  %exp = bitcast %union.tree_node* %2 to %struct.tree_exp*, !dbg !8114
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !8114
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !8114
  %3 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !8115
  %call = call i32 @gimplify_expr(%union.tree_node** %arrayidx, %struct.gimple_seq_d** %3, %struct.gimple_seq_d** null, i8 (%union.tree_node*)* @is_gimple_val, i32 1), !dbg !8116
  store i32 %call, i32* %ret, align 4, !dbg !8117
  %4 = load i32, i32* %ret, align 4, !dbg !8118
  %cmp = icmp eq i32 %4, -2, !dbg !8120
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !8121

lor.lhs.false:                                    ; preds = %entry
  %5 = load i32, i32* %ret, align 4, !dbg !8122
  %cmp1 = icmp eq i32 %5, -1, !dbg !8123
  br i1 %cmp1, label %if.then, label %if.end, !dbg !8124

if.then:                                          ; preds = %lor.lhs.false, %entry
  %6 = load i32, i32* %ret, align 4, !dbg !8125
  store i32 %6, i32* %retval, align 4, !dbg !8126
  br label %return, !dbg !8126

if.end:                                           ; preds = %lor.lhs.false
  %7 = load %union.tree_node*, %union.tree_node** %switch_expr, align 8, !dbg !8127
  %exp2 = bitcast %union.tree_node* %7 to %struct.tree_exp*, !dbg !8127
  %operands3 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp2, i32 0, i32 3, !dbg !8127
  %arrayidx4 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands3, i64 0, i64 1, !dbg !8127
  %8 = load %union.tree_node*, %union.tree_node** %arrayidx4, align 8, !dbg !8127
  %tobool = icmp ne %union.tree_node* %8, null, !dbg !8127
  br i1 %tobool, label %if.then5, label %if.else259, !dbg !8129

if.then5:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %labels, metadata !8130, metadata !DIExpression()), !dbg !8132
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %saved_labels, metadata !8133, metadata !DIExpression()), !dbg !8134
  call void @llvm.dbg.declare(metadata %union.tree_node** %default_case, metadata !8135, metadata !DIExpression()), !dbg !8136
  store %union.tree_node* null, %union.tree_node** %default_case, align 8, !dbg !8136
  call void @llvm.dbg.declare(metadata i64* %i, metadata !8137, metadata !DIExpression()), !dbg !8138
  call void @llvm.dbg.declare(metadata i64* %len, metadata !8139, metadata !DIExpression()), !dbg !8140
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gimple_switch, metadata !8141, metadata !DIExpression()), !dbg !8142
  %9 = load %union.tree_node*, %union.tree_node** %switch_expr, align 8, !dbg !8143
  %exp6 = bitcast %union.tree_node* %9 to %struct.tree_exp*, !dbg !8143
  %operands7 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp6, i32 0, i32 3, !dbg !8143
  %arrayidx8 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands7, i64 0, i64 2, !dbg !8143
  %10 = load %union.tree_node*, %union.tree_node** %arrayidx8, align 8, !dbg !8143
  %tobool9 = icmp ne %union.tree_node* %10, null, !dbg !8143
  br i1 %tobool9, label %cond.true, label %cond.false, !dbg !8143

cond.true:                                        ; preds = %if.then5
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 1456, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8143
  br label %cond.end, !dbg !8143

cond.false:                                       ; preds = %if.then5
  br label %cond.end, !dbg !8143

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8143
  %11 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !8144
  %case_labels = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %11, i32 0, i32 6, !dbg !8145
  %12 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %case_labels, align 8, !dbg !8145
  store %struct.VEC_tree_heap* %12, %struct.VEC_tree_heap** %saved_labels, align 8, !dbg !8146
  %call10 = call %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 8), !dbg !8147
  %13 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !8148
  %case_labels11 = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %13, i32 0, i32 6, !dbg !8149
  store %struct.VEC_tree_heap* %call10, %struct.VEC_tree_heap** %case_labels11, align 8, !dbg !8150
  %14 = load %union.tree_node*, %union.tree_node** %switch_expr, align 8, !dbg !8151
  %exp12 = bitcast %union.tree_node* %14 to %struct.tree_exp*, !dbg !8151
  %operands13 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp12, i32 0, i32 3, !dbg !8151
  %arrayidx14 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands13, i64 0, i64 1, !dbg !8151
  %call15 = call zeroext i8 @gimplify_stmt(%union.tree_node** %arrayidx14, %struct.gimple_seq_d** %switch_body_seq), !dbg !8152
  %15 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !8153
  %case_labels16 = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %15, i32 0, i32 6, !dbg !8154
  %16 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %case_labels16, align 8, !dbg !8154
  store %struct.VEC_tree_heap* %16, %struct.VEC_tree_heap** %labels, align 8, !dbg !8155
  %17 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %saved_labels, align 8, !dbg !8156
  %18 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !8157
  %case_labels17 = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %18, i32 0, i32 6, !dbg !8158
  store %struct.VEC_tree_heap* %17, %struct.VEC_tree_heap** %case_labels17, align 8, !dbg !8159
  store i64 0, i64* %i, align 8, !dbg !8160
  br label %while.cond, !dbg !8161

while.cond:                                       ; preds = %if.end64, %cond.end
  %19 = load i64, i64* %i, align 8, !dbg !8162
  %20 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %labels, align 8, !dbg !8163
  %tobool18 = icmp ne %struct.VEC_tree_heap* %20, null, !dbg !8163
  br i1 %tobool18, label %cond.true19, label %cond.false20, !dbg !8163

cond.true19:                                      ; preds = %while.cond
  %21 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %labels, align 8, !dbg !8163
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %21, i32 0, i32 0, !dbg !8163
  br label %cond.end21, !dbg !8163

cond.false20:                                     ; preds = %while.cond
  br label %cond.end21, !dbg !8163

cond.end21:                                       ; preds = %cond.false20, %cond.true19
  %cond22 = phi %struct.VEC_tree_base* [ %base, %cond.true19 ], [ null, %cond.false20 ], !dbg !8163
  %call23 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond22), !dbg !8163
  %conv = zext i32 %call23 to i64, !dbg !8163
  %cmp24 = icmp ult i64 %19, %conv, !dbg !8164
  br i1 %cmp24, label %while.body, label %while.end, !dbg !8161

while.body:                                       ; preds = %cond.end21
  call void @llvm.dbg.declare(metadata %union.tree_node** %elt, metadata !8165, metadata !DIExpression()), !dbg !8167
  %22 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %labels, align 8, !dbg !8168
  %tobool26 = icmp ne %struct.VEC_tree_heap* %22, null, !dbg !8168
  br i1 %tobool26, label %cond.true27, label %cond.false29, !dbg !8168

cond.true27:                                      ; preds = %while.body
  %23 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %labels, align 8, !dbg !8168
  %base28 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %23, i32 0, i32 0, !dbg !8168
  br label %cond.end30, !dbg !8168

cond.false29:                                     ; preds = %while.body
  br label %cond.end30, !dbg !8168

cond.end30:                                       ; preds = %cond.false29, %cond.true27
  %cond31 = phi %struct.VEC_tree_base* [ %base28, %cond.true27 ], [ null, %cond.false29 ], !dbg !8168
  %24 = load i64, i64* %i, align 8, !dbg !8168
  %conv32 = trunc i64 %24 to i32, !dbg !8168
  %call33 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond31, i32 %conv32), !dbg !8168
  store %union.tree_node* %call33, %union.tree_node** %elt, align 8, !dbg !8167
  call void @llvm.dbg.declare(metadata %union.tree_node** %low, metadata !8169, metadata !DIExpression()), !dbg !8170
  %25 = load %union.tree_node*, %union.tree_node** %elt, align 8, !dbg !8171
  %exp34 = bitcast %union.tree_node* %25 to %struct.tree_exp*, !dbg !8171
  %operands35 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp34, i32 0, i32 3, !dbg !8171
  %arrayidx36 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands35, i64 0, i64 0, !dbg !8171
  %26 = load %union.tree_node*, %union.tree_node** %arrayidx36, align 8, !dbg !8171
  store %union.tree_node* %26, %union.tree_node** %low, align 8, !dbg !8170
  call void @llvm.dbg.declare(metadata i8* %remove_element, metadata !8172, metadata !DIExpression()), !dbg !8173
  store i8 0, i8* %remove_element, align 1, !dbg !8173
  %27 = load %union.tree_node*, %union.tree_node** %low, align 8, !dbg !8174
  %tobool37 = icmp ne %union.tree_node* %27, null, !dbg !8174
  br i1 %tobool37, label %if.then38, label %if.else, !dbg !8176

if.then38:                                        ; preds = %cond.end30
  call void @llvm.dbg.declare(metadata %union.tree_node** %high, metadata !8177, metadata !DIExpression()), !dbg !8179
  %28 = load %union.tree_node*, %union.tree_node** %elt, align 8, !dbg !8180
  %exp39 = bitcast %union.tree_node* %28 to %struct.tree_exp*, !dbg !8180
  %operands40 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp39, i32 0, i32 3, !dbg !8180
  %arrayidx41 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands40, i64 0, i64 1, !dbg !8180
  %29 = load %union.tree_node*, %union.tree_node** %arrayidx41, align 8, !dbg !8180
  store %union.tree_node* %29, %union.tree_node** %high, align 8, !dbg !8179
  %30 = load %union.tree_node*, %union.tree_node** %high, align 8, !dbg !8181
  %tobool42 = icmp ne %union.tree_node* %30, null, !dbg !8181
  br i1 %tobool42, label %land.lhs.true, label %if.end46, !dbg !8183

land.lhs.true:                                    ; preds = %if.then38
  %31 = load %union.tree_node*, %union.tree_node** %high, align 8, !dbg !8184
  %32 = load %union.tree_node*, %union.tree_node** %low, align 8, !dbg !8185
  %call43 = call i32 @tree_int_cst_lt(%union.tree_node* %31, %union.tree_node* %32), !dbg !8186
  %tobool44 = icmp ne i32 %call43, 0, !dbg !8186
  br i1 %tobool44, label %if.then45, label %if.end46, !dbg !8187

if.then45:                                        ; preds = %land.lhs.true
  store i8 1, i8* %remove_element, align 1, !dbg !8188
  br label %if.end46, !dbg !8189

if.end46:                                         ; preds = %if.then45, %land.lhs.true, %if.then38
  br label %if.end52, !dbg !8190

if.else:                                          ; preds = %cond.end30
  %33 = load %union.tree_node*, %union.tree_node** %default_case, align 8, !dbg !8191
  %tobool47 = icmp ne %union.tree_node* %33, null, !dbg !8191
  br i1 %tobool47, label %cond.true48, label %cond.false49, !dbg !8191

cond.true48:                                      ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 1484, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8191
  br label %cond.end50, !dbg !8191

cond.false49:                                     ; preds = %if.else
  br label %cond.end50, !dbg !8191

cond.end50:                                       ; preds = %cond.false49, %cond.true48
  %cond51 = phi i32 [ 0, %cond.true48 ], [ 0, %cond.false49 ], !dbg !8191
  %34 = load %union.tree_node*, %union.tree_node** %elt, align 8, !dbg !8193
  store %union.tree_node* %34, %union.tree_node** %default_case, align 8, !dbg !8194
  store i8 1, i8* %remove_element, align 1, !dbg !8195
  br label %if.end52

if.end52:                                         ; preds = %cond.end50, %if.end46
  %35 = load i8, i8* %remove_element, align 1, !dbg !8196
  %tobool53 = icmp ne i8 %35, 0, !dbg !8196
  br i1 %tobool53, label %if.then54, label %if.else63, !dbg !8198

if.then54:                                        ; preds = %if.end52
  %36 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %labels, align 8, !dbg !8199
  %tobool55 = icmp ne %struct.VEC_tree_heap* %36, null, !dbg !8199
  br i1 %tobool55, label %cond.true56, label %cond.false58, !dbg !8199

cond.true56:                                      ; preds = %if.then54
  %37 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %labels, align 8, !dbg !8199
  %base57 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %37, i32 0, i32 0, !dbg !8199
  br label %cond.end59, !dbg !8199

cond.false58:                                     ; preds = %if.then54
  br label %cond.end59, !dbg !8199

cond.end59:                                       ; preds = %cond.false58, %cond.true56
  %cond60 = phi %struct.VEC_tree_base* [ %base57, %cond.true56 ], [ null, %cond.false58 ], !dbg !8199
  %38 = load i64, i64* %i, align 8, !dbg !8199
  %conv61 = trunc i64 %38 to i32, !dbg !8199
  %call62 = call %union.tree_node* @VEC_tree_base_ordered_remove(%struct.VEC_tree_base* %cond60, i32 %conv61), !dbg !8199
  br label %if.end64, !dbg !8199

if.else63:                                        ; preds = %if.end52
  %39 = load i64, i64* %i, align 8, !dbg !8200
  %inc = add i64 %39, 1, !dbg !8200
  store i64 %inc, i64* %i, align 8, !dbg !8200
  br label %if.end64

if.end64:                                         ; preds = %if.else63, %cond.end59
  br label %while.cond, !dbg !8161, !llvm.loop !8201

while.end:                                        ; preds = %cond.end21
  %40 = load i64, i64* %i, align 8, !dbg !8203
  store i64 %40, i64* %len, align 8, !dbg !8204
  %41 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %labels, align 8, !dbg !8205
  %tobool65 = icmp ne %struct.VEC_tree_heap* %41, null, !dbg !8205
  br i1 %tobool65, label %cond.true66, label %cond.false68, !dbg !8205

cond.true66:                                      ; preds = %while.end
  %42 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %labels, align 8, !dbg !8205
  %base67 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %42, i32 0, i32 0, !dbg !8205
  br label %cond.end69, !dbg !8205

cond.false68:                                     ; preds = %while.end
  br label %cond.end69, !dbg !8205

cond.end69:                                       ; preds = %cond.false68, %cond.true66
  %cond70 = phi %struct.VEC_tree_base* [ %base67, %cond.true66 ], [ null, %cond.false68 ], !dbg !8205
  %call71 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond70), !dbg !8205
  %cmp72 = icmp eq i32 %call71, 0, !dbg !8205
  br i1 %cmp72, label %if.end75, label %if.then74, !dbg !8207

if.then74:                                        ; preds = %cond.end69
  %43 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %labels, align 8, !dbg !8208
  call void @sort_case_labels(%struct.VEC_tree_heap* %43), !dbg !8209
  br label %if.end75, !dbg !8209

if.end75:                                         ; preds = %if.then74, %cond.end69
  %44 = load %union.tree_node*, %union.tree_node** %default_case, align 8, !dbg !8210
  %tobool76 = icmp ne %union.tree_node* %44, null, !dbg !8210
  br i1 %tobool76, label %if.end254, label %if.then77, !dbg !8212

if.then77:                                        ; preds = %if.end75
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !8213, metadata !DIExpression()), !dbg !8215
  %45 = load %union.tree_node*, %union.tree_node** %switch_expr, align 8, !dbg !8216
  %common = bitcast %union.tree_node* %45 to %struct.tree_common*, !dbg !8216
  %type78 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !8216
  %46 = load %union.tree_node*, %union.tree_node** %type78, align 8, !dbg !8216
  store %union.tree_node* %46, %union.tree_node** %type, align 8, !dbg !8215
  %47 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8217
  %48 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !8219
  %cmp79 = icmp eq %union.tree_node* %47, %48, !dbg !8220
  br i1 %cmp79, label %if.then81, label %if.end87, !dbg !8221

if.then81:                                        ; preds = %if.then77
  %49 = load %union.tree_node*, %union.tree_node** %switch_expr, align 8, !dbg !8222
  %exp82 = bitcast %union.tree_node* %49 to %struct.tree_exp*, !dbg !8222
  %operands83 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp82, i32 0, i32 3, !dbg !8222
  %arrayidx84 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands83, i64 0, i64 0, !dbg !8222
  %50 = load %union.tree_node*, %union.tree_node** %arrayidx84, align 8, !dbg !8222
  %common85 = bitcast %union.tree_node* %50 to %struct.tree_common*, !dbg !8222
  %type86 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common85, i32 0, i32 2, !dbg !8222
  %51 = load %union.tree_node*, %union.tree_node** %type86, align 8, !dbg !8222
  store %union.tree_node* %51, %union.tree_node** %type, align 8, !dbg !8223
  br label %if.end87, !dbg !8224

if.end87:                                         ; preds = %if.then81, %if.then77
  %52 = load i64, i64* %len, align 8, !dbg !8225
  %tobool88 = icmp ne i64 %52, 0, !dbg !8225
  br i1 %tobool88, label %land.lhs.true89, label %if.end244, !dbg !8227

land.lhs.true89:                                  ; preds = %if.end87
  %53 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8228
  %base90 = bitcast %union.tree_node* %53 to %struct.tree_base*, !dbg !8228
  %54 = bitcast %struct.tree_base* %base90 to i64*, !dbg !8228
  %bf.load = load i64, i64* %54, align 8, !dbg !8228
  %bf.clear = and i64 %bf.load, 65535, !dbg !8228
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8228
  %cmp91 = icmp eq i32 %bf.cast, 6, !dbg !8228
  br i1 %cmp91, label %land.lhs.true107, label %lor.lhs.false93, !dbg !8228

lor.lhs.false93:                                  ; preds = %land.lhs.true89
  %55 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8228
  %base94 = bitcast %union.tree_node* %55 to %struct.tree_base*, !dbg !8228
  %56 = bitcast %struct.tree_base* %base94 to i64*, !dbg !8228
  %bf.load95 = load i64, i64* %56, align 8, !dbg !8228
  %bf.clear96 = and i64 %bf.load95, 65535, !dbg !8228
  %bf.cast97 = trunc i64 %bf.clear96 to i32, !dbg !8228
  %cmp98 = icmp eq i32 %bf.cast97, 7, !dbg !8228
  br i1 %cmp98, label %land.lhs.true107, label %lor.lhs.false100, !dbg !8228

lor.lhs.false100:                                 ; preds = %lor.lhs.false93
  %57 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8228
  %base101 = bitcast %union.tree_node* %57 to %struct.tree_base*, !dbg !8228
  %58 = bitcast %struct.tree_base* %base101 to i64*, !dbg !8228
  %bf.load102 = load i64, i64* %58, align 8, !dbg !8228
  %bf.clear103 = and i64 %bf.load102, 65535, !dbg !8228
  %bf.cast104 = trunc i64 %bf.clear103 to i32, !dbg !8228
  %cmp105 = icmp eq i32 %bf.cast104, 8, !dbg !8228
  br i1 %cmp105, label %land.lhs.true107, label %if.end244, !dbg !8229

land.lhs.true107:                                 ; preds = %lor.lhs.false100, %lor.lhs.false93, %land.lhs.true89
  %59 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8230
  %type108 = bitcast %union.tree_node* %59 to %struct.tree_type*, !dbg !8230
  %minval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type108, i32 0, i32 13, !dbg !8230
  %60 = load %union.tree_node*, %union.tree_node** %minval, align 8, !dbg !8230
  %tobool109 = icmp ne %union.tree_node* %60, null, !dbg !8230
  br i1 %tobool109, label %land.lhs.true110, label %if.end244, !dbg !8231

land.lhs.true110:                                 ; preds = %land.lhs.true107
  %61 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8232
  %type111 = bitcast %union.tree_node* %61 to %struct.tree_type*, !dbg !8232
  %maxval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type111, i32 0, i32 14, !dbg !8232
  %62 = load %union.tree_node*, %union.tree_node** %maxval, align 8, !dbg !8232
  %tobool112 = icmp ne %union.tree_node* %62, null, !dbg !8232
  br i1 %tobool112, label %land.lhs.true113, label %if.end244, !dbg !8233

land.lhs.true113:                                 ; preds = %land.lhs.true110
  %63 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %labels, align 8, !dbg !8234
  %tobool114 = icmp ne %struct.VEC_tree_heap* %63, null, !dbg !8234
  br i1 %tobool114, label %cond.true115, label %cond.false117, !dbg !8234

cond.true115:                                     ; preds = %land.lhs.true113
  %64 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %labels, align 8, !dbg !8234
  %base116 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %64, i32 0, i32 0, !dbg !8234
  br label %cond.end118, !dbg !8234

cond.false117:                                    ; preds = %land.lhs.true113
  br label %cond.end118, !dbg !8234

cond.end118:                                      ; preds = %cond.false117, %cond.true115
  %cond119 = phi %struct.VEC_tree_base* [ %base116, %cond.true115 ], [ null, %cond.false117 ], !dbg !8234
  %call120 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond119, i32 0), !dbg !8234
  %exp121 = bitcast %union.tree_node* %call120 to %struct.tree_exp*, !dbg !8234
  %operands122 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp121, i32 0, i32 3, !dbg !8234
  %arrayidx123 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands122, i64 0, i64 0, !dbg !8234
  %65 = load %union.tree_node*, %union.tree_node** %arrayidx123, align 8, !dbg !8234
  %66 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8235
  %type124 = bitcast %union.tree_node* %66 to %struct.tree_type*, !dbg !8235
  %minval125 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type124, i32 0, i32 13, !dbg !8235
  %67 = load %union.tree_node*, %union.tree_node** %minval125, align 8, !dbg !8235
  %call126 = call i32 @tree_int_cst_equal(%union.tree_node* %65, %union.tree_node* %67), !dbg !8236
  %tobool127 = icmp ne i32 %call126, 0, !dbg !8236
  br i1 %tobool127, label %if.then128, label %if.end244, !dbg !8237

if.then128:                                       ; preds = %cond.end118
  call void @llvm.dbg.declare(metadata %union.tree_node** %low129, metadata !8238, metadata !DIExpression()), !dbg !8240
  call void @llvm.dbg.declare(metadata %union.tree_node** %high130, metadata !8241, metadata !DIExpression()), !dbg !8242
  %68 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %labels, align 8, !dbg !8243
  %tobool131 = icmp ne %struct.VEC_tree_heap* %68, null, !dbg !8243
  br i1 %tobool131, label %cond.true132, label %cond.false134, !dbg !8243

cond.true132:                                     ; preds = %if.then128
  %69 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %labels, align 8, !dbg !8243
  %base133 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %69, i32 0, i32 0, !dbg !8243
  br label %cond.end135, !dbg !8243

cond.false134:                                    ; preds = %if.then128
  br label %cond.end135, !dbg !8243

cond.end135:                                      ; preds = %cond.false134, %cond.true132
  %cond136 = phi %struct.VEC_tree_base* [ %base133, %cond.true132 ], [ null, %cond.false134 ], !dbg !8243
  %70 = load i64, i64* %len, align 8, !dbg !8243
  %sub = sub i64 %70, 1, !dbg !8243
  %conv137 = trunc i64 %sub to i32, !dbg !8243
  %call138 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond136, i32 %conv137), !dbg !8243
  %exp139 = bitcast %union.tree_node* %call138 to %struct.tree_exp*, !dbg !8243
  %operands140 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp139, i32 0, i32 3, !dbg !8243
  %arrayidx141 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands140, i64 0, i64 1, !dbg !8243
  %71 = load %union.tree_node*, %union.tree_node** %arrayidx141, align 8, !dbg !8243
  store %union.tree_node* %71, %union.tree_node** %high130, align 8, !dbg !8242
  %72 = load %union.tree_node*, %union.tree_node** %high130, align 8, !dbg !8244
  %tobool142 = icmp ne %union.tree_node* %72, null, !dbg !8244
  br i1 %tobool142, label %if.end156, label %if.then143, !dbg !8246

if.then143:                                       ; preds = %cond.end135
  %73 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %labels, align 8, !dbg !8247
  %tobool144 = icmp ne %struct.VEC_tree_heap* %73, null, !dbg !8247
  br i1 %tobool144, label %cond.true145, label %cond.false147, !dbg !8247

cond.true145:                                     ; preds = %if.then143
  %74 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %labels, align 8, !dbg !8247
  %base146 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %74, i32 0, i32 0, !dbg !8247
  br label %cond.end148, !dbg !8247

cond.false147:                                    ; preds = %if.then143
  br label %cond.end148, !dbg !8247

cond.end148:                                      ; preds = %cond.false147, %cond.true145
  %cond149 = phi %struct.VEC_tree_base* [ %base146, %cond.true145 ], [ null, %cond.false147 ], !dbg !8247
  %75 = load i64, i64* %len, align 8, !dbg !8247
  %sub150 = sub i64 %75, 1, !dbg !8247
  %conv151 = trunc i64 %sub150 to i32, !dbg !8247
  %call152 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond149, i32 %conv151), !dbg !8247
  %exp153 = bitcast %union.tree_node* %call152 to %struct.tree_exp*, !dbg !8247
  %operands154 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp153, i32 0, i32 3, !dbg !8247
  %arrayidx155 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands154, i64 0, i64 0, !dbg !8247
  %76 = load %union.tree_node*, %union.tree_node** %arrayidx155, align 8, !dbg !8247
  store %union.tree_node* %76, %union.tree_node** %high130, align 8, !dbg !8248
  br label %if.end156, !dbg !8249

if.end156:                                        ; preds = %cond.end148, %cond.end135
  %77 = load %union.tree_node*, %union.tree_node** %high130, align 8, !dbg !8250
  %78 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8252
  %type157 = bitcast %union.tree_node* %78 to %struct.tree_type*, !dbg !8252
  %maxval158 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type157, i32 0, i32 14, !dbg !8252
  %79 = load %union.tree_node*, %union.tree_node** %maxval158, align 8, !dbg !8252
  %call159 = call i32 @tree_int_cst_equal(%union.tree_node* %77, %union.tree_node* %79), !dbg !8253
  %tobool160 = icmp ne i32 %call159, 0, !dbg !8253
  br i1 %tobool160, label %if.then161, label %if.end243, !dbg !8254

if.then161:                                       ; preds = %if.end156
  store i64 1, i64* %i, align 8, !dbg !8255
  br label %for.cond, !dbg !8258

for.cond:                                         ; preds = %for.inc, %if.then161
  %80 = load i64, i64* %i, align 8, !dbg !8259
  %81 = load i64, i64* %len, align 8, !dbg !8261
  %cmp162 = icmp ult i64 %80, %81, !dbg !8262
  br i1 %cmp162, label %for.body, label %for.end, !dbg !8263

for.body:                                         ; preds = %for.cond
  %82 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %labels, align 8, !dbg !8264
  %tobool164 = icmp ne %struct.VEC_tree_heap* %82, null, !dbg !8264
  br i1 %tobool164, label %cond.true165, label %cond.false167, !dbg !8264

cond.true165:                                     ; preds = %for.body
  %83 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %labels, align 8, !dbg !8264
  %base166 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %83, i32 0, i32 0, !dbg !8264
  br label %cond.end168, !dbg !8264

cond.false167:                                    ; preds = %for.body
  br label %cond.end168, !dbg !8264

cond.end168:                                      ; preds = %cond.false167, %cond.true165
  %cond169 = phi %struct.VEC_tree_base* [ %base166, %cond.true165 ], [ null, %cond.false167 ], !dbg !8264
  %84 = load i64, i64* %i, align 8, !dbg !8264
  %conv170 = trunc i64 %84 to i32, !dbg !8264
  %call171 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond169, i32 %conv170), !dbg !8264
  %exp172 = bitcast %union.tree_node* %call171 to %struct.tree_exp*, !dbg !8264
  %operands173 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp172, i32 0, i32 3, !dbg !8264
  %arrayidx174 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands173, i64 0, i64 0, !dbg !8264
  %85 = load %union.tree_node*, %union.tree_node** %arrayidx174, align 8, !dbg !8264
  store %union.tree_node* %85, %union.tree_node** %high130, align 8, !dbg !8266
  %86 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %labels, align 8, !dbg !8267
  %tobool175 = icmp ne %struct.VEC_tree_heap* %86, null, !dbg !8267
  br i1 %tobool175, label %cond.true176, label %cond.false178, !dbg !8267

cond.true176:                                     ; preds = %cond.end168
  %87 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %labels, align 8, !dbg !8267
  %base177 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %87, i32 0, i32 0, !dbg !8267
  br label %cond.end179, !dbg !8267

cond.false178:                                    ; preds = %cond.end168
  br label %cond.end179, !dbg !8267

cond.end179:                                      ; preds = %cond.false178, %cond.true176
  %cond180 = phi %struct.VEC_tree_base* [ %base177, %cond.true176 ], [ null, %cond.false178 ], !dbg !8267
  %88 = load i64, i64* %i, align 8, !dbg !8267
  %sub181 = sub i64 %88, 1, !dbg !8267
  %conv182 = trunc i64 %sub181 to i32, !dbg !8267
  %call183 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond180, i32 %conv182), !dbg !8267
  %exp184 = bitcast %union.tree_node* %call183 to %struct.tree_exp*, !dbg !8267
  %operands185 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp184, i32 0, i32 3, !dbg !8267
  %arrayidx186 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands185, i64 0, i64 1, !dbg !8267
  %89 = load %union.tree_node*, %union.tree_node** %arrayidx186, align 8, !dbg !8267
  store %union.tree_node* %89, %union.tree_node** %low129, align 8, !dbg !8268
  %90 = load %union.tree_node*, %union.tree_node** %low129, align 8, !dbg !8269
  %tobool187 = icmp ne %union.tree_node* %90, null, !dbg !8269
  br i1 %tobool187, label %if.end201, label %if.then188, !dbg !8271

if.then188:                                       ; preds = %cond.end179
  %91 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %labels, align 8, !dbg !8272
  %tobool189 = icmp ne %struct.VEC_tree_heap* %91, null, !dbg !8272
  br i1 %tobool189, label %cond.true190, label %cond.false192, !dbg !8272

cond.true190:                                     ; preds = %if.then188
  %92 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %labels, align 8, !dbg !8272
  %base191 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %92, i32 0, i32 0, !dbg !8272
  br label %cond.end193, !dbg !8272

cond.false192:                                    ; preds = %if.then188
  br label %cond.end193, !dbg !8272

cond.end193:                                      ; preds = %cond.false192, %cond.true190
  %cond194 = phi %struct.VEC_tree_base* [ %base191, %cond.true190 ], [ null, %cond.false192 ], !dbg !8272
  %93 = load i64, i64* %i, align 8, !dbg !8272
  %sub195 = sub i64 %93, 1, !dbg !8272
  %conv196 = trunc i64 %sub195 to i32, !dbg !8272
  %call197 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond194, i32 %conv196), !dbg !8272
  %exp198 = bitcast %union.tree_node* %call197 to %struct.tree_exp*, !dbg !8272
  %operands199 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp198, i32 0, i32 3, !dbg !8272
  %arrayidx200 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands199, i64 0, i64 0, !dbg !8272
  %94 = load %union.tree_node*, %union.tree_node** %arrayidx200, align 8, !dbg !8272
  store %union.tree_node* %94, %union.tree_node** %low129, align 8, !dbg !8273
  br label %if.end201, !dbg !8274

if.end201:                                        ; preds = %cond.end193, %cond.end179
  %95 = load %union.tree_node*, %union.tree_node** %low129, align 8, !dbg !8275
  %int_cst = bitcast %union.tree_node* %95 to %struct.tree_int_cst*, !dbg !8275
  %int_cst202 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !8275
  %low203 = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst202, i32 0, i32 0, !dbg !8275
  %96 = load i64, i64* %low203, align 8, !dbg !8275
  %add = add i64 %96, 1, !dbg !8277
  %97 = load %union.tree_node*, %union.tree_node** %high130, align 8, !dbg !8278
  %int_cst204 = bitcast %union.tree_node* %97 to %struct.tree_int_cst*, !dbg !8278
  %int_cst205 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst204, i32 0, i32 1, !dbg !8278
  %low206 = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst205, i32 0, i32 0, !dbg !8278
  %98 = load i64, i64* %low206, align 8, !dbg !8278
  %cmp207 = icmp ne i64 %add, %98, !dbg !8279
  br i1 %cmp207, label %if.then225, label %lor.lhs.false209, !dbg !8280

lor.lhs.false209:                                 ; preds = %if.end201
  %99 = load %union.tree_node*, %union.tree_node** %low129, align 8, !dbg !8281
  %int_cst210 = bitcast %union.tree_node* %99 to %struct.tree_int_cst*, !dbg !8281
  %int_cst211 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst210, i32 0, i32 1, !dbg !8281
  %high212 = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst211, i32 0, i32 1, !dbg !8281
  %100 = load i64, i64* %high212, align 8, !dbg !8281
  %101 = load %union.tree_node*, %union.tree_node** %high130, align 8, !dbg !8282
  %int_cst213 = bitcast %union.tree_node* %101 to %struct.tree_int_cst*, !dbg !8282
  %int_cst214 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst213, i32 0, i32 1, !dbg !8282
  %low215 = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst214, i32 0, i32 0, !dbg !8282
  %102 = load i64, i64* %low215, align 8, !dbg !8282
  %cmp216 = icmp eq i64 %102, 0, !dbg !8283
  %conv217 = zext i1 %cmp216 to i32, !dbg !8283
  %conv218 = sext i32 %conv217 to i64, !dbg !8284
  %add219 = add nsw i64 %100, %conv218, !dbg !8285
  %103 = load %union.tree_node*, %union.tree_node** %high130, align 8, !dbg !8286
  %int_cst220 = bitcast %union.tree_node* %103 to %struct.tree_int_cst*, !dbg !8286
  %int_cst221 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst220, i32 0, i32 1, !dbg !8286
  %high222 = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst221, i32 0, i32 1, !dbg !8286
  %104 = load i64, i64* %high222, align 8, !dbg !8286
  %cmp223 = icmp ne i64 %add219, %104, !dbg !8287
  br i1 %cmp223, label %if.then225, label %if.end226, !dbg !8288

if.then225:                                       ; preds = %lor.lhs.false209, %if.end201
  br label %for.end, !dbg !8289

if.end226:                                        ; preds = %lor.lhs.false209
  br label %for.inc, !dbg !8290

for.inc:                                          ; preds = %if.end226
  %105 = load i64, i64* %i, align 8, !dbg !8291
  %inc227 = add i64 %105, 1, !dbg !8291
  store i64 %inc227, i64* %i, align 8, !dbg !8291
  br label %for.cond, !dbg !8292, !llvm.loop !8293

for.end:                                          ; preds = %if.then225, %for.cond
  %106 = load i64, i64* %i, align 8, !dbg !8295
  %107 = load i64, i64* %len, align 8, !dbg !8297
  %cmp228 = icmp eq i64 %106, %107, !dbg !8298
  br i1 %cmp228, label %if.then230, label %if.end242, !dbg !8299

if.then230:                                       ; preds = %for.end
  %108 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !8300
  %109 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %labels, align 8, !dbg !8300
  %tobool231 = icmp ne %struct.VEC_tree_heap* %109, null, !dbg !8300
  br i1 %tobool231, label %cond.true232, label %cond.false234, !dbg !8300

cond.true232:                                     ; preds = %if.then230
  %110 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %labels, align 8, !dbg !8300
  %base233 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %110, i32 0, i32 0, !dbg !8300
  br label %cond.end235, !dbg !8300

cond.false234:                                    ; preds = %if.then230
  br label %cond.end235, !dbg !8300

cond.end235:                                      ; preds = %cond.false234, %cond.true232
  %cond236 = phi %struct.VEC_tree_base* [ %base233, %cond.true232 ], [ null, %cond.false234 ], !dbg !8300
  %call237 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond236, i32 0), !dbg !8300
  %exp238 = bitcast %union.tree_node* %call237 to %struct.tree_exp*, !dbg !8300
  %operands239 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp238, i32 0, i32 3, !dbg !8300
  %arrayidx240 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands239, i64 0, i64 2, !dbg !8300
  %111 = load %union.tree_node*, %union.tree_node** %arrayidx240, align 8, !dbg !8300
  %call241 = call %union.tree_node* @build3_stat(i32 139, %union.tree_node* %108, %union.tree_node* null, %union.tree_node* null, %union.tree_node* %111), !dbg !8300
  store %union.tree_node* %call241, %union.tree_node** %default_case, align 8, !dbg !8301
  br label %if.end242, !dbg !8302

if.end242:                                        ; preds = %cond.end235, %for.end
  br label %if.end243, !dbg !8303

if.end243:                                        ; preds = %if.end242, %if.end156
  br label %if.end244, !dbg !8304

if.end244:                                        ; preds = %if.end243, %cond.end118, %land.lhs.true110, %land.lhs.true107, %lor.lhs.false100, %if.end87
  %112 = load %union.tree_node*, %union.tree_node** %default_case, align 8, !dbg !8305
  %tobool245 = icmp ne %union.tree_node* %112, null, !dbg !8305
  br i1 %tobool245, label %if.end253, label %if.then246, !dbg !8307

if.then246:                                       ; preds = %if.end244
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %new_default, metadata !8308, metadata !DIExpression()), !dbg !8310
  %113 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !8311
  %call247 = call %union.tree_node* @create_artificial_label(i32 0), !dbg !8311
  %call248 = call %union.tree_node* @build3_stat(i32 139, %union.tree_node* %113, %union.tree_node* null, %union.tree_node* null, %union.tree_node* %call247), !dbg !8311
  store %union.tree_node* %call248, %union.tree_node** %default_case, align 8, !dbg !8312
  %114 = load %union.tree_node*, %union.tree_node** %default_case, align 8, !dbg !8313
  %exp249 = bitcast %union.tree_node* %114 to %struct.tree_exp*, !dbg !8313
  %operands250 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp249, i32 0, i32 3, !dbg !8313
  %arrayidx251 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands250, i64 0, i64 2, !dbg !8313
  %115 = load %union.tree_node*, %union.tree_node** %arrayidx251, align 8, !dbg !8313
  %call252 = call %union.gimple_statement_d* @gimple_build_label(%union.tree_node* %115), !dbg !8314
  store %union.gimple_statement_d* %call252, %union.gimple_statement_d** %new_default, align 8, !dbg !8315
  %116 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_default, align 8, !dbg !8316
  call void @gimplify_seq_add_stmt(%struct.gimple_seq_d** %switch_body_seq, %union.gimple_statement_d* %116), !dbg !8317
  br label %if.end253, !dbg !8318

if.end253:                                        ; preds = %if.then246, %if.end244
  br label %if.end254, !dbg !8319

if.end254:                                        ; preds = %if.end253, %if.end75
  %117 = load %union.tree_node*, %union.tree_node** %switch_expr, align 8, !dbg !8320
  %exp255 = bitcast %union.tree_node* %117 to %struct.tree_exp*, !dbg !8320
  %operands256 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp255, i32 0, i32 3, !dbg !8320
  %arrayidx257 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands256, i64 0, i64 0, !dbg !8320
  %118 = load %union.tree_node*, %union.tree_node** %arrayidx257, align 8, !dbg !8320
  %119 = load %union.tree_node*, %union.tree_node** %default_case, align 8, !dbg !8321
  %120 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %labels, align 8, !dbg !8322
  %call258 = call %union.gimple_statement_d* @gimple_build_switch_vec(%union.tree_node* %118, %union.tree_node* %119, %struct.VEC_tree_heap* %120), !dbg !8323
  store %union.gimple_statement_d* %call258, %union.gimple_statement_d** %gimple_switch, align 8, !dbg !8324
  %121 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !8325
  %122 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gimple_switch, align 8, !dbg !8326
  call void @gimplify_seq_add_stmt(%struct.gimple_seq_d** %121, %union.gimple_statement_d* %122), !dbg !8327
  %123 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !8328
  %124 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %switch_body_seq, align 8, !dbg !8329
  call void @gimplify_seq_add_seq(%struct.gimple_seq_d** %123, %struct.gimple_seq_d* %124), !dbg !8330
  call void @VEC_tree_heap_free(%struct.VEC_tree_heap** %labels), !dbg !8331
  br label %if.end268, !dbg !8332

if.else259:                                       ; preds = %if.end
  %125 = load %union.tree_node*, %union.tree_node** %switch_expr, align 8, !dbg !8333
  %exp260 = bitcast %union.tree_node* %125 to %struct.tree_exp*, !dbg !8333
  %operands261 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp260, i32 0, i32 3, !dbg !8333
  %arrayidx262 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands261, i64 0, i64 2, !dbg !8333
  %126 = load %union.tree_node*, %union.tree_node** %arrayidx262, align 8, !dbg !8333
  %tobool263 = icmp ne %union.tree_node* %126, null, !dbg !8333
  br i1 %tobool263, label %cond.false265, label %cond.true264, !dbg !8333

cond.true264:                                     ; preds = %if.else259
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 1562, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8333
  br label %cond.end266, !dbg !8333

cond.false265:                                    ; preds = %if.else259
  br label %cond.end266, !dbg !8333

cond.end266:                                      ; preds = %cond.false265, %cond.true264
  %cond267 = phi i32 [ 0, %cond.true264 ], [ 0, %cond.false265 ], !dbg !8333
  br label %if.end268

if.end268:                                        ; preds = %cond.end266, %if.end254
  store i32 1, i32* %retval, align 4, !dbg !8334
  br label %return, !dbg !8334

return:                                           ; preds = %if.end268, %if.then
  %127 = load i32, i32* %retval, align 4, !dbg !8335
  ret i32 %127, !dbg !8335
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimplify_exit_expr(%union.tree_node** %expr_p) #0 !dbg !8336 {
entry:
  %expr_p.addr = alloca %union.tree_node**, align 8
  %cond = alloca %union.tree_node*, align 8
  %expr = alloca %union.tree_node*, align 8
  store %union.tree_node** %expr_p, %union.tree_node*** %expr_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %expr_p.addr, metadata !8337, metadata !DIExpression()), !dbg !8338
  call void @llvm.dbg.declare(metadata %union.tree_node** %cond, metadata !8339, metadata !DIExpression()), !dbg !8340
  %0 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !8341
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !8341
  %exp = bitcast %union.tree_node* %1 to %struct.tree_exp*, !dbg !8341
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !8341
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !8341
  %2 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !8341
  store %union.tree_node* %2, %union.tree_node** %cond, align 8, !dbg !8340
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr, metadata !8342, metadata !DIExpression()), !dbg !8343
  %3 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !8344
  %exit_label = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %3, i32 0, i32 4, !dbg !8345
  %call = call %union.tree_node* @build_and_jump(%union.tree_node** %exit_label), !dbg !8346
  store %union.tree_node* %call, %union.tree_node** %expr, align 8, !dbg !8347
  %4 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !8348
  %5 = load %union.tree_node*, %union.tree_node** %cond, align 8, !dbg !8348
  %6 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !8348
  %call1 = call %union.tree_node* @build3_stat(i32 56, %union.tree_node* %4, %union.tree_node* %5, %union.tree_node* %6, %union.tree_node* null), !dbg !8348
  store %union.tree_node* %call1, %union.tree_node** %expr, align 8, !dbg !8349
  %7 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !8350
  %8 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !8351
  store %union.tree_node* %7, %union.tree_node** %8, align 8, !dbg !8352
  ret i32 0, !dbg !8353
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimplify_seq_add_stmt(%struct.gimple_seq_d** %seq_p, %union.gimple_statement_d* %gs) #0 !dbg !8354 {
entry:
  %seq_p.addr = alloca %struct.gimple_seq_d**, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %si = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.gimple_seq_d** %seq_p, %struct.gimple_seq_d*** %seq_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %seq_p.addr, metadata !8357, metadata !DIExpression()), !dbg !8358
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8359, metadata !DIExpression()), !dbg !8360
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %si, metadata !8361, metadata !DIExpression()), !dbg !8362
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8363
  %cmp = icmp eq %union.gimple_statement_d* %0, null, !dbg !8365
  br i1 %cmp, label %if.then, label %if.end, !dbg !8366

if.then:                                          ; preds = %entry
  br label %return, !dbg !8367

if.end:                                           ; preds = %entry
  %1 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %seq_p.addr, align 8, !dbg !8368
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %1, align 8, !dbg !8370
  %cmp1 = icmp eq %struct.gimple_seq_d* %2, null, !dbg !8371
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !8372

if.then2:                                         ; preds = %if.end
  %call = call %struct.gimple_seq_d* @gimple_seq_alloc(), !dbg !8373
  %3 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %seq_p.addr, align 8, !dbg !8374
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %3, align 8, !dbg !8375
  br label %if.end3, !dbg !8376

if.end3:                                          ; preds = %if.then2, %if.end
  %4 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %seq_p.addr, align 8, !dbg !8377
  %5 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %4, align 8, !dbg !8378
  call void @gsi_last(%struct.gimple_stmt_iterator* sret %tmp, %struct.gimple_seq_d* %5), !dbg !8379
  %6 = bitcast %struct.gimple_stmt_iterator* %si to i8*, !dbg !8379
  %7 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !8379
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 24, i1 false), !dbg !8379
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8380
  call void @gsi_insert_after_without_update(%struct.gimple_stmt_iterator* %si, %union.gimple_statement_d* %8, i32 0), !dbg !8381
  br label %return, !dbg !8382

return:                                           ; preds = %if.end3, %if.then
  ret void, !dbg !8382
}

declare dso_local %union.gimple_statement_d* @gimple_build_goto(%union.tree_node*) #3

declare dso_local %union.gimple_statement_d* @gimple_build_predict(i32, i32) #3

declare dso_local %union.tree_node* @decl_function_context(%union.tree_node*) #3

declare dso_local %union.gimple_statement_d* @gimple_build_label(%union.tree_node*) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimplify_case_label_expr(%union.tree_node** %expr_p, %struct.gimple_seq_d** %pre_p) #0 !dbg !8383 {
entry:
  %expr_p.addr = alloca %union.tree_node**, align 8
  %pre_p.addr = alloca %struct.gimple_seq_d**, align 8
  %ctxp = alloca %struct.gimplify_ctx*, align 8
  %gimple_label = alloca %union.gimple_statement_d*, align 8
  store %union.tree_node** %expr_p, %union.tree_node*** %expr_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %expr_p.addr, metadata !8384, metadata !DIExpression()), !dbg !8385
  store %struct.gimple_seq_d** %pre_p, %struct.gimple_seq_d*** %pre_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %pre_p.addr, metadata !8386, metadata !DIExpression()), !dbg !8387
  call void @llvm.dbg.declare(metadata %struct.gimplify_ctx** %ctxp, metadata !8388, metadata !DIExpression()), !dbg !8389
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gimple_label, metadata !8390, metadata !DIExpression()), !dbg !8391
  %0 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !8392
  store %struct.gimplify_ctx* %0, %struct.gimplify_ctx** %ctxp, align 8, !dbg !8394
  br label %for.cond, !dbg !8395

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** %ctxp, align 8, !dbg !8396
  %case_labels = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %1, i32 0, i32 6, !dbg !8399
  %2 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %case_labels, align 8, !dbg !8399
  %tobool = icmp ne %struct.VEC_tree_heap* %2, null, !dbg !8396
  br i1 %tobool, label %if.then, label %if.end, !dbg !8400

if.then:                                          ; preds = %for.cond
  br label %for.end, !dbg !8401

if.end:                                           ; preds = %for.cond
  br label %for.inc, !dbg !8399

for.inc:                                          ; preds = %if.end
  %3 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** %ctxp, align 8, !dbg !8402
  %prev_context = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %3, i32 0, i32 0, !dbg !8403
  %4 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** %prev_context, align 8, !dbg !8403
  store %struct.gimplify_ctx* %4, %struct.gimplify_ctx** %ctxp, align 8, !dbg !8404
  br label %for.cond, !dbg !8405, !llvm.loop !8406

for.end:                                          ; preds = %if.then
  %5 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !8409
  %6 = load %union.tree_node*, %union.tree_node** %5, align 8, !dbg !8409
  %exp = bitcast %union.tree_node* %6 to %struct.tree_exp*, !dbg !8409
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !8409
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 2, !dbg !8409
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !8409
  %call = call %union.gimple_statement_d* @gimple_build_label(%union.tree_node* %7), !dbg !8410
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %gimple_label, align 8, !dbg !8411
  %8 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** %ctxp, align 8, !dbg !8412
  %case_labels1 = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %8, i32 0, i32 6, !dbg !8412
  %9 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !8412
  %10 = load %union.tree_node*, %union.tree_node** %9, align 8, !dbg !8412
  %call2 = call %union.tree_node** @VEC_tree_heap_safe_push(%struct.VEC_tree_heap** %case_labels1, %union.tree_node* %10), !dbg !8412
  %11 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !8413
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gimple_label, align 8, !dbg !8414
  call void @gimplify_seq_add_stmt(%struct.gimple_seq_d** %11, %union.gimple_statement_d* %12), !dbg !8415
  ret i32 1, !dbg !8416
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimplify_return_expr(%union.tree_node* %stmt, %struct.gimple_seq_d** %pre_p) #0 !dbg !8417 {
entry:
  %retval = alloca i32, align 4
  %stmt.addr = alloca %union.tree_node*, align 8
  %pre_p.addr = alloca %struct.gimple_seq_d**, align 8
  %ret = alloca %union.gimple_statement_d*, align 8
  %ret_expr = alloca %union.tree_node*, align 8
  %result_decl = alloca %union.tree_node*, align 8
  %result = alloca %union.tree_node*, align 8
  %ret5 = alloca %union.gimple_statement_d*, align 8
  store %union.tree_node* %stmt, %union.tree_node** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %stmt.addr, metadata !8420, metadata !DIExpression()), !dbg !8421
  store %struct.gimple_seq_d** %pre_p, %struct.gimple_seq_d*** %pre_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %pre_p.addr, metadata !8422, metadata !DIExpression()), !dbg !8423
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %ret, metadata !8424, metadata !DIExpression()), !dbg !8425
  call void @llvm.dbg.declare(metadata %union.tree_node** %ret_expr, metadata !8426, metadata !DIExpression()), !dbg !8427
  %0 = load %union.tree_node*, %union.tree_node** %stmt.addr, align 8, !dbg !8428
  %exp = bitcast %union.tree_node* %0 to %struct.tree_exp*, !dbg !8428
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !8428
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !8428
  %1 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !8428
  store %union.tree_node* %1, %union.tree_node** %ret_expr, align 8, !dbg !8427
  call void @llvm.dbg.declare(metadata %union.tree_node** %result_decl, metadata !8429, metadata !DIExpression()), !dbg !8430
  call void @llvm.dbg.declare(metadata %union.tree_node** %result, metadata !8431, metadata !DIExpression()), !dbg !8432
  %2 = load %union.tree_node*, %union.tree_node** %ret_expr, align 8, !dbg !8433
  %3 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !8435
  %cmp = icmp eq %union.tree_node* %2, %3, !dbg !8436
  br i1 %cmp, label %if.then, label %if.end, !dbg !8437

if.then:                                          ; preds = %entry
  store i32 -2, i32* %retval, align 4, !dbg !8438
  br label %return, !dbg !8438

if.end:                                           ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %ret_expr, align 8, !dbg !8439
  %tobool = icmp ne %union.tree_node* %4, null, !dbg !8439
  br i1 %tobool, label %lor.lhs.false, label %if.then4, !dbg !8441

lor.lhs.false:                                    ; preds = %if.end
  %5 = load %union.tree_node*, %union.tree_node** %ret_expr, align 8, !dbg !8442
  %base = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !8442
  %6 = bitcast %struct.tree_base* %base to i64*, !dbg !8442
  %bf.load = load i64, i64* %6, align 8, !dbg !8442
  %bf.clear = and i64 %bf.load, 65535, !dbg !8442
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8442
  %cmp1 = icmp eq i32 %bf.cast, 36, !dbg !8443
  br i1 %cmp1, label %if.then4, label %lor.lhs.false2, !dbg !8444

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %7 = load %union.tree_node*, %union.tree_node** %ret_expr, align 8, !dbg !8445
  %8 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !8446
  %cmp3 = icmp eq %union.tree_node* %7, %8, !dbg !8447
  br i1 %cmp3, label %if.then4, label %if.end10, !dbg !8448

if.then4:                                         ; preds = %lor.lhs.false2, %lor.lhs.false, %if.end
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %ret5, metadata !8449, metadata !DIExpression()), !dbg !8451
  %9 = load %union.tree_node*, %union.tree_node** %ret_expr, align 8, !dbg !8452
  %call = call %union.gimple_statement_d* @gimple_build_return(%union.tree_node* %9), !dbg !8453
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %ret5, align 8, !dbg !8451
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %ret5, align 8, !dbg !8454
  %11 = load %union.tree_node*, %union.tree_node** %stmt.addr, align 8, !dbg !8455
  %base6 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !8455
  %12 = bitcast %struct.tree_base* %base6 to i64*, !dbg !8455
  %bf.load7 = load i64, i64* %12, align 8, !dbg !8455
  %bf.lshr = lshr i64 %bf.load7, 23, !dbg !8455
  %bf.clear8 = and i64 %bf.lshr, 1, !dbg !8455
  %bf.cast9 = trunc i64 %bf.clear8 to i32, !dbg !8455
  %conv = trunc i32 %bf.cast9 to i8, !dbg !8455
  call void @gimple_set_no_warning(%union.gimple_statement_d* %10, i8 zeroext %conv), !dbg !8456
  %13 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !8457
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %ret5, align 8, !dbg !8458
  call void @gimplify_seq_add_stmt(%struct.gimple_seq_d** %13, %union.gimple_statement_d* %14), !dbg !8459
  store i32 1, i32* %retval, align 4, !dbg !8460
  br label %return, !dbg !8460

if.end10:                                         ; preds = %lor.lhs.false2
  %15 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !8461
  %common = bitcast %union.tree_node* %15 to %struct.tree_common*, !dbg !8461
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !8461
  %16 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8461
  %common11 = bitcast %union.tree_node* %16 to %struct.tree_common*, !dbg !8461
  %type12 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common11, i32 0, i32 2, !dbg !8461
  %17 = load %union.tree_node*, %union.tree_node** %type12, align 8, !dbg !8461
  %base13 = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !8461
  %18 = bitcast %struct.tree_base* %base13 to i64*, !dbg !8461
  %bf.load14 = load i64, i64* %18, align 8, !dbg !8461
  %bf.clear15 = and i64 %bf.load14, 65535, !dbg !8461
  %bf.cast16 = trunc i64 %bf.clear15 to i32, !dbg !8461
  %cmp17 = icmp eq i32 %bf.cast16, 19, !dbg !8461
  br i1 %cmp17, label %if.then19, label %if.else, !dbg !8463

if.then19:                                        ; preds = %if.end10
  store %union.tree_node* null, %union.tree_node** %result_decl, align 8, !dbg !8464
  br label %if.end53, !dbg !8465

if.else:                                          ; preds = %if.end10
  %19 = load %union.tree_node*, %union.tree_node** %ret_expr, align 8, !dbg !8466
  %exp20 = bitcast %union.tree_node* %19 to %struct.tree_exp*, !dbg !8466
  %operands21 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp20, i32 0, i32 3, !dbg !8466
  %arrayidx22 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands21, i64 0, i64 0, !dbg !8466
  %20 = load %union.tree_node*, %union.tree_node** %arrayidx22, align 8, !dbg !8466
  store %union.tree_node* %20, %union.tree_node** %result_decl, align 8, !dbg !8468
  %21 = load %union.tree_node*, %union.tree_node** %result_decl, align 8, !dbg !8469
  %base23 = bitcast %union.tree_node* %21 to %struct.tree_base*, !dbg !8469
  %22 = bitcast %struct.tree_base* %base23 to i64*, !dbg !8469
  %bf.load24 = load i64, i64* %22, align 8, !dbg !8469
  %bf.clear25 = and i64 %bf.load24, 65535, !dbg !8469
  %bf.cast26 = trunc i64 %bf.clear25 to i32, !dbg !8469
  %cmp27 = icmp eq i32 %bf.cast26, 47, !dbg !8471
  br i1 %cmp27, label %if.then29, label %if.end33, !dbg !8472

if.then29:                                        ; preds = %if.else
  %23 = load %union.tree_node*, %union.tree_node** %result_decl, align 8, !dbg !8473
  %exp30 = bitcast %union.tree_node* %23 to %struct.tree_exp*, !dbg !8473
  %operands31 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp30, i32 0, i32 3, !dbg !8473
  %arrayidx32 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands31, i64 0, i64 0, !dbg !8473
  %24 = load %union.tree_node*, %union.tree_node** %arrayidx32, align 8, !dbg !8473
  store %union.tree_node* %24, %union.tree_node** %result_decl, align 8, !dbg !8474
  br label %if.end33, !dbg !8475

if.end33:                                         ; preds = %if.then29, %if.else
  %25 = load %union.tree_node*, %union.tree_node** %ret_expr, align 8, !dbg !8476
  %base34 = bitcast %union.tree_node* %25 to %struct.tree_base*, !dbg !8476
  %26 = bitcast %struct.tree_base* %base34 to i64*, !dbg !8476
  %bf.load35 = load i64, i64* %26, align 8, !dbg !8476
  %bf.clear36 = and i64 %bf.load35, 65535, !dbg !8476
  %bf.cast37 = trunc i64 %bf.clear36 to i32, !dbg !8476
  %cmp38 = icmp eq i32 %bf.cast37, 53, !dbg !8476
  br i1 %cmp38, label %land.lhs.true, label %lor.lhs.false40, !dbg !8476

lor.lhs.false40:                                  ; preds = %if.end33
  %27 = load %union.tree_node*, %union.tree_node** %ret_expr, align 8, !dbg !8476
  %base41 = bitcast %union.tree_node* %27 to %struct.tree_base*, !dbg !8476
  %28 = bitcast %struct.tree_base* %base41 to i64*, !dbg !8476
  %bf.load42 = load i64, i64* %28, align 8, !dbg !8476
  %bf.clear43 = and i64 %bf.load42, 65535, !dbg !8476
  %bf.cast44 = trunc i64 %bf.clear43 to i32, !dbg !8476
  %cmp45 = icmp eq i32 %bf.cast44, 54, !dbg !8476
  br i1 %cmp45, label %land.lhs.true, label %cond.true, !dbg !8476

land.lhs.true:                                    ; preds = %lor.lhs.false40, %if.end33
  %29 = load %union.tree_node*, %union.tree_node** %result_decl, align 8, !dbg !8476
  %base47 = bitcast %union.tree_node* %29 to %struct.tree_base*, !dbg !8476
  %30 = bitcast %struct.tree_base* %base47 to i64*, !dbg !8476
  %bf.load48 = load i64, i64* %30, align 8, !dbg !8476
  %bf.clear49 = and i64 %bf.load48, 65535, !dbg !8476
  %bf.cast50 = trunc i64 %bf.clear49 to i32, !dbg !8476
  %cmp51 = icmp eq i32 %bf.cast50, 36, !dbg !8476
  br i1 %cmp51, label %cond.false, label %cond.true, !dbg !8476

cond.true:                                        ; preds = %land.lhs.true, %lor.lhs.false40
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 1204, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8476
  br label %cond.end, !dbg !8476

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !8476

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8476
  br label %if.end53

if.end53:                                         ; preds = %cond.end, %if.then19
  %31 = load %union.tree_node*, %union.tree_node** %result_decl, align 8, !dbg !8477
  %tobool54 = icmp ne %union.tree_node* %31, null, !dbg !8477
  br i1 %tobool54, label %lor.lhs.false55, label %if.then60, !dbg !8479

lor.lhs.false55:                                  ; preds = %if.end53
  %32 = load %union.tree_node*, %union.tree_node** %result_decl, align 8, !dbg !8480
  %33 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !8481
  %common56 = bitcast %union.tree_node* %33 to %struct.tree_common*, !dbg !8481
  %type57 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common56, i32 0, i32 2, !dbg !8481
  %34 = load %union.tree_node*, %union.tree_node** %type57, align 8, !dbg !8481
  %call58 = call i32 @aggregate_value_p(%union.tree_node* %32, %union.tree_node* %34), !dbg !8482
  %tobool59 = icmp ne i32 %call58, 0, !dbg !8482
  br i1 %tobool59, label %if.then60, label %if.else61, !dbg !8483

if.then60:                                        ; preds = %lor.lhs.false55, %if.end53
  %35 = load %union.tree_node*, %union.tree_node** %result_decl, align 8, !dbg !8484
  store %union.tree_node* %35, %union.tree_node** %result, align 8, !dbg !8485
  br label %if.end96, !dbg !8486

if.else61:                                        ; preds = %lor.lhs.false55
  %36 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !8487
  %return_temp = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %36, i32 0, i32 5, !dbg !8489
  %37 = load %union.tree_node*, %union.tree_node** %return_temp, align 8, !dbg !8489
  %tobool62 = icmp ne %union.tree_node* %37, null, !dbg !8487
  br i1 %tobool62, label %if.then63, label %if.else65, !dbg !8490

if.then63:                                        ; preds = %if.else61
  %38 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !8491
  %return_temp64 = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %38, i32 0, i32 5, !dbg !8492
  %39 = load %union.tree_node*, %union.tree_node** %return_temp64, align 8, !dbg !8492
  store %union.tree_node* %39, %union.tree_node** %result, align 8, !dbg !8493
  br label %if.end95, !dbg !8494

if.else65:                                        ; preds = %if.else61
  %40 = load %union.tree_node*, %union.tree_node** %result_decl, align 8, !dbg !8495
  %common66 = bitcast %union.tree_node* %40 to %struct.tree_common*, !dbg !8495
  %type67 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common66, i32 0, i32 2, !dbg !8495
  %41 = load %union.tree_node*, %union.tree_node** %type67, align 8, !dbg !8495
  %call68 = call %union.tree_node* @create_tmp_var(%union.tree_node* %41, i8* null), !dbg !8497
  store %union.tree_node* %call68, %union.tree_node** %result, align 8, !dbg !8498
  %42 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !8499
  %common69 = bitcast %union.tree_node* %42 to %struct.tree_common*, !dbg !8499
  %type70 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common69, i32 0, i32 2, !dbg !8499
  %43 = load %union.tree_node*, %union.tree_node** %type70, align 8, !dbg !8499
  %base71 = bitcast %union.tree_node* %43 to %struct.tree_base*, !dbg !8499
  %44 = bitcast %struct.tree_base* %base71 to i64*, !dbg !8499
  %bf.load72 = load i64, i64* %44, align 8, !dbg !8499
  %bf.clear73 = and i64 %bf.load72, 65535, !dbg !8499
  %bf.cast74 = trunc i64 %bf.clear73 to i32, !dbg !8499
  %cmp75 = icmp eq i32 %bf.cast74, 13, !dbg !8501
  br i1 %cmp75, label %if.then86, label %lor.lhs.false77, !dbg !8502

lor.lhs.false77:                                  ; preds = %if.else65
  %45 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !8503
  %common78 = bitcast %union.tree_node* %45 to %struct.tree_common*, !dbg !8503
  %type79 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common78, i32 0, i32 2, !dbg !8503
  %46 = load %union.tree_node*, %union.tree_node** %type79, align 8, !dbg !8503
  %base80 = bitcast %union.tree_node* %46 to %struct.tree_base*, !dbg !8503
  %47 = bitcast %struct.tree_base* %base80 to i64*, !dbg !8503
  %bf.load81 = load i64, i64* %47, align 8, !dbg !8503
  %bf.clear82 = and i64 %bf.load81, 65535, !dbg !8503
  %bf.cast83 = trunc i64 %bf.clear82 to i32, !dbg !8503
  %cmp84 = icmp eq i32 %bf.cast83, 14, !dbg !8504
  br i1 %cmp84, label %if.then86, label %if.end89, !dbg !8505

if.then86:                                        ; preds = %lor.lhs.false77, %if.else65
  %48 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !8506
  %decl_common = bitcast %union.tree_node* %48 to %struct.tree_decl_common*, !dbg !8506
  %gimple_reg_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !8506
  %49 = bitcast i40* %gimple_reg_flag to i64*, !dbg !8506
  %bf.load87 = load i64, i64* %49, align 8, !dbg !8507
  %bf.clear88 = and i64 %bf.load87, -134217729, !dbg !8507
  %bf.set = or i64 %bf.clear88, 134217728, !dbg !8507
  store i64 %bf.set, i64* %49, align 8, !dbg !8507
  br label %if.end89, !dbg !8506

if.end89:                                         ; preds = %if.then86, %lor.lhs.false77
  %50 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !8508
  %base90 = bitcast %union.tree_node* %50 to %struct.tree_base*, !dbg !8508
  %51 = bitcast %struct.tree_base* %base90 to i64*, !dbg !8508
  %bf.load91 = load i64, i64* %51, align 8, !dbg !8509
  %bf.clear92 = and i64 %bf.load91, -8388609, !dbg !8509
  %bf.set93 = or i64 %bf.clear92, 8388608, !dbg !8509
  store i64 %bf.set93, i64* %51, align 8, !dbg !8509
  %52 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !8510
  %53 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !8511
  %return_temp94 = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %53, i32 0, i32 5, !dbg !8512
  store %union.tree_node* %52, %union.tree_node** %return_temp94, align 8, !dbg !8513
  br label %if.end95

if.end95:                                         ; preds = %if.end89, %if.then63
  br label %if.end96

if.end96:                                         ; preds = %if.end95, %if.then60
  %54 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !8514
  %55 = load %union.tree_node*, %union.tree_node** %result_decl, align 8, !dbg !8516
  %cmp97 = icmp ne %union.tree_node* %54, %55, !dbg !8517
  br i1 %cmp97, label %if.then99, label %if.end103, !dbg !8518

if.then99:                                        ; preds = %if.end96
  %56 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !8519
  %57 = load %union.tree_node*, %union.tree_node** %ret_expr, align 8, !dbg !8520
  %exp100 = bitcast %union.tree_node* %57 to %struct.tree_exp*, !dbg !8520
  %operands101 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp100, i32 0, i32 3, !dbg !8520
  %arrayidx102 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands101, i64 0, i64 0, !dbg !8520
  store %union.tree_node* %56, %union.tree_node** %arrayidx102, align 8, !dbg !8521
  br label %if.end103, !dbg !8520

if.end103:                                        ; preds = %if.then99, %if.end96
  %58 = load %union.tree_node*, %union.tree_node** %stmt.addr, align 8, !dbg !8522
  %exp104 = bitcast %union.tree_node* %58 to %struct.tree_exp*, !dbg !8522
  %operands105 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp104, i32 0, i32 3, !dbg !8522
  %arrayidx106 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands105, i64 0, i64 0, !dbg !8522
  %59 = load %union.tree_node*, %union.tree_node** %arrayidx106, align 8, !dbg !8522
  %60 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !8523
  call void @gimplify_and_add(%union.tree_node* %59, %struct.gimple_seq_d** %60), !dbg !8524
  %61 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !8525
  %call107 = call %union.gimple_statement_d* @gimple_build_return(%union.tree_node* %61), !dbg !8526
  store %union.gimple_statement_d* %call107, %union.gimple_statement_d** %ret, align 8, !dbg !8527
  %62 = load %union.gimple_statement_d*, %union.gimple_statement_d** %ret, align 8, !dbg !8528
  %63 = load %union.tree_node*, %union.tree_node** %stmt.addr, align 8, !dbg !8529
  %base108 = bitcast %union.tree_node* %63 to %struct.tree_base*, !dbg !8529
  %64 = bitcast %struct.tree_base* %base108 to i64*, !dbg !8529
  %bf.load109 = load i64, i64* %64, align 8, !dbg !8529
  %bf.lshr110 = lshr i64 %bf.load109, 23, !dbg !8529
  %bf.clear111 = and i64 %bf.lshr110, 1, !dbg !8529
  %bf.cast112 = trunc i64 %bf.clear111 to i32, !dbg !8529
  %conv113 = trunc i32 %bf.cast112 to i8, !dbg !8529
  call void @gimple_set_no_warning(%union.gimple_statement_d* %62, i8 zeroext %conv113), !dbg !8530
  %65 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !8531
  %66 = load %union.gimple_statement_d*, %union.gimple_statement_d** %ret, align 8, !dbg !8532
  call void @gimplify_seq_add_stmt(%struct.gimple_seq_d** %65, %union.gimple_statement_d* %66), !dbg !8533
  store i32 1, i32* %retval, align 4, !dbg !8534
  br label %return, !dbg !8534

return:                                           ; preds = %if.end103, %if.then4, %if.then
  %67 = load i32, i32* %retval, align 4, !dbg !8535
  ret i32 %67, !dbg !8535
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_constructor_elt_base_iterate(%struct.VEC_constructor_elt_base* %vec_, i32 %ix_, %struct.constructor_elt_d** %ptr) #0 !dbg !8536 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_constructor_elt_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.constructor_elt_d**, align 8
  store %struct.VEC_constructor_elt_base* %vec_, %struct.VEC_constructor_elt_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_constructor_elt_base** %vec_.addr, metadata !8541, metadata !DIExpression()), !dbg !8542
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !8543, metadata !DIExpression()), !dbg !8542
  store %struct.constructor_elt_d** %ptr, %struct.constructor_elt_d*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.constructor_elt_d*** %ptr.addr, metadata !8544, metadata !DIExpression()), !dbg !8542
  %0 = load %struct.VEC_constructor_elt_base*, %struct.VEC_constructor_elt_base** %vec_.addr, align 8, !dbg !8545
  %tobool = icmp ne %struct.VEC_constructor_elt_base* %0, null, !dbg !8545
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !8545

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !8545
  %2 = load %struct.VEC_constructor_elt_base*, %struct.VEC_constructor_elt_base** %vec_.addr, align 8, !dbg !8545
  %num = getelementptr inbounds %struct.VEC_constructor_elt_base, %struct.VEC_constructor_elt_base* %2, i32 0, i32 0, !dbg !8545
  %3 = load i32, i32* %num, align 8, !dbg !8545
  %cmp = icmp ult i32 %1, %3, !dbg !8545
  br i1 %cmp, label %if.then, label %if.else, !dbg !8542

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_constructor_elt_base*, %struct.VEC_constructor_elt_base** %vec_.addr, align 8, !dbg !8547
  %vec = getelementptr inbounds %struct.VEC_constructor_elt_base, %struct.VEC_constructor_elt_base* %4, i32 0, i32 2, !dbg !8547
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !8547
  %idxprom = zext i32 %5 to i64, !dbg !8547
  %arrayidx = getelementptr inbounds [1 x %struct.constructor_elt_d], [1 x %struct.constructor_elt_d]* %vec, i64 0, i64 %idxprom, !dbg !8547
  %6 = load %struct.constructor_elt_d**, %struct.constructor_elt_d*** %ptr.addr, align 8, !dbg !8547
  store %struct.constructor_elt_d* %arrayidx, %struct.constructor_elt_d** %6, align 8, !dbg !8547
  store i32 1, i32* %retval, align 4, !dbg !8547
  br label %return, !dbg !8547

if.else:                                          ; preds = %land.lhs.true, %entry
  %7 = load %struct.constructor_elt_d**, %struct.constructor_elt_d*** %ptr.addr, align 8, !dbg !8549
  store %struct.constructor_elt_d* null, %struct.constructor_elt_d** %7, align 8, !dbg !8549
  store i32 0, i32* %retval, align 4, !dbg !8549
  br label %return, !dbg !8549

return:                                           ; preds = %if.else, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !8542
  ret i32 %8, !dbg !8542
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimplify_save_expr(%union.tree_node** %expr_p, %struct.gimple_seq_d** %pre_p, %struct.gimple_seq_d** %post_p) #0 !dbg !8551 {
entry:
  %expr_p.addr = alloca %union.tree_node**, align 8
  %pre_p.addr = alloca %struct.gimple_seq_d**, align 8
  %post_p.addr = alloca %struct.gimple_seq_d**, align 8
  %ret = alloca i32, align 4
  %val = alloca %union.tree_node*, align 8
  store %union.tree_node** %expr_p, %union.tree_node*** %expr_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %expr_p.addr, metadata !8552, metadata !DIExpression()), !dbg !8553
  store %struct.gimple_seq_d** %pre_p, %struct.gimple_seq_d*** %pre_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %pre_p.addr, metadata !8554, metadata !DIExpression()), !dbg !8555
  store %struct.gimple_seq_d** %post_p, %struct.gimple_seq_d*** %post_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %post_p.addr, metadata !8556, metadata !DIExpression()), !dbg !8557
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !8558, metadata !DIExpression()), !dbg !8559
  store i32 1, i32* %ret, align 4, !dbg !8559
  call void @llvm.dbg.declare(metadata %union.tree_node** %val, metadata !8560, metadata !DIExpression()), !dbg !8561
  %0 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !8562
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !8562
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !8562
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !8562
  %bf.load = load i64, i64* %2, align 8, !dbg !8562
  %bf.clear = and i64 %bf.load, 65535, !dbg !8562
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8562
  %cmp = icmp eq i32 %bf.cast, 120, !dbg !8562
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !8562

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 4676, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8562
  br label %cond.end, !dbg !8562

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8562

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8562
  %3 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !8563
  %4 = load %union.tree_node*, %union.tree_node** %3, align 8, !dbg !8563
  %exp = bitcast %union.tree_node* %4 to %struct.tree_exp*, !dbg !8563
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !8563
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !8563
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !8563
  store %union.tree_node* %5, %union.tree_node** %val, align 8, !dbg !8564
  %6 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !8565
  %7 = load %union.tree_node*, %union.tree_node** %6, align 8, !dbg !8565
  %base1 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !8565
  %8 = bitcast %struct.tree_base* %base1 to i64*, !dbg !8565
  %bf.load2 = load i64, i64* %8, align 8, !dbg !8565
  %bf.lshr = lshr i64 %bf.load2, 27, !dbg !8565
  %bf.clear3 = and i64 %bf.lshr, 1, !dbg !8565
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !8565
  %tobool = icmp ne i32 %bf.cast4, 0, !dbg !8565
  br i1 %tobool, label %if.end17, label %if.then, !dbg !8567

if.then:                                          ; preds = %cond.end
  %9 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !8568
  %common = bitcast %union.tree_node* %9 to %struct.tree_common*, !dbg !8568
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !8568
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8568
  %11 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !8571
  %cmp5 = icmp eq %union.tree_node* %10, %11, !dbg !8572
  br i1 %cmp5, label %if.then6, label %if.else, !dbg !8573

if.then6:                                         ; preds = %if.then
  %12 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !8574
  %13 = load %union.tree_node*, %union.tree_node** %12, align 8, !dbg !8574
  %exp7 = bitcast %union.tree_node* %13 to %struct.tree_exp*, !dbg !8574
  %operands8 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp7, i32 0, i32 3, !dbg !8574
  %arrayidx9 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands8, i64 0, i64 0, !dbg !8574
  %14 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !8576
  %15 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !8577
  %call = call i32 @gimplify_expr(%union.tree_node** %arrayidx9, %struct.gimple_seq_d** %14, %struct.gimple_seq_d** %15, i8 (%union.tree_node*)* @is_gimple_stmt, i32 0), !dbg !8578
  store i32 %call, i32* %ret, align 4, !dbg !8579
  store %union.tree_node* null, %union.tree_node** %val, align 8, !dbg !8580
  br label %if.end, !dbg !8581

if.else:                                          ; preds = %if.then
  %16 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !8582
  %17 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !8583
  %18 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !8584
  %call10 = call %union.tree_node* @get_initialized_tmp_var(%union.tree_node* %16, %struct.gimple_seq_d** %17, %struct.gimple_seq_d** %18), !dbg !8585
  store %union.tree_node* %call10, %union.tree_node** %val, align 8, !dbg !8586
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then6
  %19 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !8587
  %20 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !8588
  %21 = load %union.tree_node*, %union.tree_node** %20, align 8, !dbg !8588
  %exp11 = bitcast %union.tree_node* %21 to %struct.tree_exp*, !dbg !8588
  %operands12 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp11, i32 0, i32 3, !dbg !8588
  %arrayidx13 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands12, i64 0, i64 0, !dbg !8588
  store %union.tree_node* %19, %union.tree_node** %arrayidx13, align 8, !dbg !8589
  %22 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !8590
  %23 = load %union.tree_node*, %union.tree_node** %22, align 8, !dbg !8590
  %base14 = bitcast %union.tree_node* %23 to %struct.tree_base*, !dbg !8590
  %24 = bitcast %struct.tree_base* %base14 to i64*, !dbg !8590
  %bf.load15 = load i64, i64* %24, align 8, !dbg !8591
  %bf.clear16 = and i64 %bf.load15, -134217729, !dbg !8591
  %bf.set = or i64 %bf.clear16, 134217728, !dbg !8591
  store i64 %bf.set, i64* %24, align 8, !dbg !8591
  br label %if.end17, !dbg !8592

if.end17:                                         ; preds = %if.end, %cond.end
  %25 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !8593
  %26 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !8594
  store %union.tree_node* %25, %union.tree_node** %26, align 8, !dbg !8595
  %27 = load i32, i32* %ret, align 4, !dbg !8596
  ret i32 %27, !dbg !8597
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimplify_asm_expr(%union.tree_node** %expr_p, %struct.gimple_seq_d** %pre_p, %struct.gimple_seq_d** %post_p) #0 !dbg !8598 {
entry:
  %retval = alloca i32, align 4
  %expr_p.addr = alloca %union.tree_node**, align 8
  %pre_p.addr = alloca %struct.gimple_seq_d**, align 8
  %post_p.addr = alloca %struct.gimple_seq_d**, align 8
  %expr = alloca %union.tree_node*, align 8
  %noutputs = alloca i32, align 4
  %oconstraints = alloca i8**, align 8
  %i = alloca i32, align 4
  %link = alloca %union.tree_node*, align 8
  %constraint = alloca i8*, align 8
  %allows_mem = alloca i8, align 1
  %allows_reg = alloca i8, align 1
  %is_inout = alloca i8, align 1
  %ret = alloca i32, align 4
  %tret = alloca i32, align 4
  %stmt = alloca %union.gimple_statement_d*, align 8
  %inputs = alloca %struct.VEC_tree_gc*, align 8
  %outputs = alloca %struct.VEC_tree_gc*, align 8
  %clobbers = alloca %struct.VEC_tree_gc*, align 8
  %labels = alloca %struct.VEC_tree_gc*, align 8
  %link_next = alloca %union.tree_node*, align 8
  %ok = alloca i8, align 1
  %constraint_len = alloca i64, align 8
  %input = alloca %union.tree_node*, align 8
  %buf = alloca [10 x i8], align 1
  %p = alloca i8*, align 8
  %len = alloca i64, align 8
  %buflen = alloca i64, align 8
  %beg = alloca i8*, align 8
  %end = alloca i8*, align 8
  %str51 = alloca i8*, align 8
  %dst = alloca i8*, align 8
  %tem = alloca i8*, align 8
  %mem_p = alloca i8, align 1
  %reg_p = alloca i8, align 1
  %inout_p = alloca i8, align 1
  store %union.tree_node** %expr_p, %union.tree_node*** %expr_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %expr_p.addr, metadata !8599, metadata !DIExpression()), !dbg !8600
  store %struct.gimple_seq_d** %pre_p, %struct.gimple_seq_d*** %pre_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %pre_p.addr, metadata !8601, metadata !DIExpression()), !dbg !8602
  store %struct.gimple_seq_d** %post_p, %struct.gimple_seq_d*** %post_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %post_p.addr, metadata !8603, metadata !DIExpression()), !dbg !8604
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr, metadata !8605, metadata !DIExpression()), !dbg !8606
  call void @llvm.dbg.declare(metadata i32* %noutputs, metadata !8607, metadata !DIExpression()), !dbg !8608
  call void @llvm.dbg.declare(metadata i8*** %oconstraints, metadata !8609, metadata !DIExpression()), !dbg !8610
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8611, metadata !DIExpression()), !dbg !8612
  call void @llvm.dbg.declare(metadata %union.tree_node** %link, metadata !8613, metadata !DIExpression()), !dbg !8614
  call void @llvm.dbg.declare(metadata i8** %constraint, metadata !8615, metadata !DIExpression()), !dbg !8616
  call void @llvm.dbg.declare(metadata i8* %allows_mem, metadata !8617, metadata !DIExpression()), !dbg !8618
  call void @llvm.dbg.declare(metadata i8* %allows_reg, metadata !8619, metadata !DIExpression()), !dbg !8620
  call void @llvm.dbg.declare(metadata i8* %is_inout, metadata !8621, metadata !DIExpression()), !dbg !8622
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !8623, metadata !DIExpression()), !dbg !8624
  call void @llvm.dbg.declare(metadata i32* %tret, metadata !8625, metadata !DIExpression()), !dbg !8626
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !8627, metadata !DIExpression()), !dbg !8628
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_gc** %inputs, metadata !8629, metadata !DIExpression()), !dbg !8630
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_gc** %outputs, metadata !8631, metadata !DIExpression()), !dbg !8632
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_gc** %clobbers, metadata !8633, metadata !DIExpression()), !dbg !8634
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_gc** %labels, metadata !8635, metadata !DIExpression()), !dbg !8636
  call void @llvm.dbg.declare(metadata %union.tree_node** %link_next, metadata !8637, metadata !DIExpression()), !dbg !8638
  %0 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !8639
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !8640
  store %union.tree_node* %1, %union.tree_node** %expr, align 8, !dbg !8641
  %2 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !8642
  %exp = bitcast %union.tree_node* %2 to %struct.tree_exp*, !dbg !8642
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !8642
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !8642
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !8642
  %call = call i32 @list_length(%union.tree_node* %3), !dbg !8643
  store i32 %call, i32* %noutputs, align 4, !dbg !8644
  %4 = load i32, i32* %noutputs, align 4, !dbg !8645
  %conv = sext i32 %4 to i64, !dbg !8645
  %mul = mul i64 %conv, 8, !dbg !8645
  %5 = alloca i8, i64 %mul, align 16, !dbg !8645
  %6 = bitcast i8* %5 to i8**, !dbg !8646
  store i8** %6, i8*** %oconstraints, align 8, !dbg !8647
  store %struct.VEC_tree_gc* null, %struct.VEC_tree_gc** %labels, align 8, !dbg !8648
  store %struct.VEC_tree_gc* null, %struct.VEC_tree_gc** %clobbers, align 8, !dbg !8649
  store %struct.VEC_tree_gc* null, %struct.VEC_tree_gc** %outputs, align 8, !dbg !8650
  store %struct.VEC_tree_gc* null, %struct.VEC_tree_gc** %inputs, align 8, !dbg !8651
  store i32 1, i32* %ret, align 4, !dbg !8652
  store %union.tree_node* null, %union.tree_node** %link_next, align 8, !dbg !8653
  store i32 0, i32* %i, align 4, !dbg !8654
  %7 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !8656
  %exp1 = bitcast %union.tree_node* %7 to %struct.tree_exp*, !dbg !8656
  %operands2 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 3, !dbg !8656
  %arrayidx3 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2, i64 0, i64 1, !dbg !8656
  %8 = load %union.tree_node*, %union.tree_node** %arrayidx3, align 8, !dbg !8656
  store %union.tree_node* %8, %union.tree_node** %link, align 8, !dbg !8657
  br label %for.cond, !dbg !8658

for.cond:                                         ; preds = %for.inc, %entry
  %9 = load %union.tree_node*, %union.tree_node** %link, align 8, !dbg !8659
  %tobool = icmp ne %union.tree_node* %9, null, !dbg !8661
  br i1 %tobool, label %for.body, label %for.end138, !dbg !8661

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i8* %ok, metadata !8662, metadata !DIExpression()), !dbg !8664
  call void @llvm.dbg.declare(metadata i64* %constraint_len, metadata !8665, metadata !DIExpression()), !dbg !8666
  %10 = load %union.tree_node*, %union.tree_node** %link, align 8, !dbg !8667
  %common = bitcast %union.tree_node* %10 to %struct.tree_common*, !dbg !8667
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !8667
  %11 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !8667
  store %union.tree_node* %11, %union.tree_node** %link_next, align 8, !dbg !8668
  %12 = load %union.tree_node*, %union.tree_node** %link, align 8, !dbg !8669
  %list = bitcast %union.tree_node* %12 to %struct.tree_list*, !dbg !8669
  %purpose = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 1, !dbg !8669
  %13 = load %union.tree_node*, %union.tree_node** %purpose, align 8, !dbg !8669
  %list4 = bitcast %union.tree_node* %13 to %struct.tree_list*, !dbg !8669
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list4, i32 0, i32 2, !dbg !8669
  %14 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !8669
  %string = bitcast %union.tree_node* %14 to %struct.tree_string*, !dbg !8669
  %str = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string, i32 0, i32 2, !dbg !8669
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %str, i64 0, i64 0, !dbg !8669
  store i8* %arraydecay, i8** %constraint, align 8, !dbg !8670
  %15 = load i8**, i8*** %oconstraints, align 8, !dbg !8671
  %16 = load i32, i32* %i, align 4, !dbg !8672
  %idxprom = sext i32 %16 to i64, !dbg !8671
  %arrayidx5 = getelementptr inbounds i8*, i8** %15, i64 %idxprom, !dbg !8671
  store i8* %arraydecay, i8** %arrayidx5, align 8, !dbg !8673
  %17 = load i8*, i8** %constraint, align 8, !dbg !8674
  %call6 = call i64 @strlen(i8* %17), !dbg !8675
  store i64 %call6, i64* %constraint_len, align 8, !dbg !8676
  %18 = load i64, i64* %constraint_len, align 8, !dbg !8677
  %cmp = icmp eq i64 %18, 0, !dbg !8679
  br i1 %cmp, label %if.then, label %if.end, !dbg !8680

if.then:                                          ; preds = %for.body
  br label %for.inc, !dbg !8681

if.end:                                           ; preds = %for.body
  %19 = load i32, i32* %i, align 4, !dbg !8682
  %call8 = call zeroext i8 @parse_output_constraint(i8** %constraint, i32 %19, i32 0, i32 0, i8* %allows_mem, i8* %allows_reg, i8* %is_inout), !dbg !8683
  store i8 %call8, i8* %ok, align 1, !dbg !8684
  %20 = load i8, i8* %ok, align 1, !dbg !8685
  %tobool9 = icmp ne i8 %20, 0, !dbg !8685
  br i1 %tobool9, label %if.end11, label %if.then10, !dbg !8687

if.then10:                                        ; preds = %if.end
  store i32 -2, i32* %ret, align 4, !dbg !8688
  store i8 0, i8* %is_inout, align 1, !dbg !8690
  br label %if.end11, !dbg !8691

if.end11:                                         ; preds = %if.then10, %if.end
  %21 = load i8, i8* %allows_reg, align 1, !dbg !8692
  %tobool12 = icmp ne i8 %21, 0, !dbg !8692
  br i1 %tobool12, label %if.end18, label %land.lhs.true, !dbg !8694

land.lhs.true:                                    ; preds = %if.end11
  %22 = load i8, i8* %allows_mem, align 1, !dbg !8695
  %conv13 = zext i8 %22 to i32, !dbg !8695
  %tobool14 = icmp ne i32 %conv13, 0, !dbg !8695
  br i1 %tobool14, label %if.then15, label %if.end18, !dbg !8696

if.then15:                                        ; preds = %land.lhs.true
  %23 = load %union.tree_node*, %union.tree_node** %link, align 8, !dbg !8697
  %list16 = bitcast %union.tree_node* %23 to %struct.tree_list*, !dbg !8697
  %value17 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list16, i32 0, i32 2, !dbg !8697
  %24 = load %union.tree_node*, %union.tree_node** %value17, align 8, !dbg !8697
  call void @mark_addressable(%union.tree_node* %24), !dbg !8698
  br label %if.end18, !dbg !8698

if.end18:                                         ; preds = %if.then15, %land.lhs.true, %if.end11
  %25 = load %union.tree_node*, %union.tree_node** %link, align 8, !dbg !8699
  %list19 = bitcast %union.tree_node* %25 to %struct.tree_list*, !dbg !8699
  %value20 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list19, i32 0, i32 2, !dbg !8699
  %26 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !8700
  %27 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !8701
  %28 = load i8, i8* %is_inout, align 1, !dbg !8702
  %conv21 = zext i8 %28 to i32, !dbg !8702
  %tobool22 = icmp ne i32 %conv21, 0, !dbg !8702
  %29 = zext i1 %tobool22 to i64, !dbg !8702
  %cond = select i1 %tobool22, i8 (%union.tree_node*)* @is_gimple_min_lval, i8 (%union.tree_node*)* @is_gimple_lvalue, !dbg !8702
  %call23 = call i32 @gimplify_expr(%union.tree_node** %value20, %struct.gimple_seq_d** %26, %struct.gimple_seq_d** %27, i8 (%union.tree_node*)* %cond, i32 6), !dbg !8703
  store i32 %call23, i32* %tret, align 4, !dbg !8704
  %30 = load i32, i32* %tret, align 4, !dbg !8705
  %cmp24 = icmp eq i32 %30, -2, !dbg !8707
  br i1 %cmp24, label %if.then26, label %if.end27, !dbg !8708

if.then26:                                        ; preds = %if.end18
  %31 = load i32, i32* %i, align 4, !dbg !8709
  call void (i8*, ...) @error(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.11, i64 0, i64 0), i32 %31), !dbg !8711
  %32 = load i32, i32* %tret, align 4, !dbg !8712
  store i32 %32, i32* %ret, align 4, !dbg !8713
  br label %if.end27, !dbg !8714

if.end27:                                         ; preds = %if.then26, %if.end18
  %33 = load %union.tree_node*, %union.tree_node** %link, align 8, !dbg !8715
  %call28 = call %union.tree_node** @VEC_tree_gc_safe_push(%struct.VEC_tree_gc** %outputs, %union.tree_node* %33), !dbg !8715
  %34 = load %union.tree_node*, %union.tree_node** %link, align 8, !dbg !8716
  %common29 = bitcast %union.tree_node* %34 to %struct.tree_common*, !dbg !8716
  %chain30 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common29, i32 0, i32 1, !dbg !8716
  store %union.tree_node* null, %union.tree_node** %chain30, align 8, !dbg !8717
  %35 = load i8, i8* %is_inout, align 1, !dbg !8718
  %tobool31 = icmp ne i8 %35, 0, !dbg !8718
  br i1 %tobool31, label %if.then32, label %if.end137, !dbg !8720

if.then32:                                        ; preds = %if.end27
  call void @llvm.dbg.declare(metadata %union.tree_node** %input, metadata !8721, metadata !DIExpression()), !dbg !8723
  call void @llvm.dbg.declare(metadata [10 x i8]* %buf, metadata !8724, metadata !DIExpression()), !dbg !8728
  call void @llvm.dbg.declare(metadata i8** %p, metadata !8729, metadata !DIExpression()), !dbg !8730
  %36 = load i8*, i8** %constraint, align 8, !dbg !8731
  %call33 = call i8* @xstrdup(i8* %36), !dbg !8732
  store i8* %call33, i8** %p, align 8, !dbg !8730
  %37 = load i8*, i8** %p, align 8, !dbg !8733
  %arrayidx34 = getelementptr inbounds i8, i8* %37, i64 0, !dbg !8733
  store i8 61, i8* %arrayidx34, align 1, !dbg !8734
  %38 = load i64, i64* %constraint_len, align 8, !dbg !8735
  %conv35 = trunc i64 %38 to i32, !dbg !8735
  %39 = load i8*, i8** %p, align 8, !dbg !8736
  %call36 = call %union.tree_node* @build_string(i32 %conv35, i8* %39), !dbg !8737
  %40 = load %union.tree_node*, %union.tree_node** %link, align 8, !dbg !8738
  %list37 = bitcast %union.tree_node* %40 to %struct.tree_list*, !dbg !8738
  %purpose38 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list37, i32 0, i32 1, !dbg !8738
  %41 = load %union.tree_node*, %union.tree_node** %purpose38, align 8, !dbg !8738
  %list39 = bitcast %union.tree_node* %41 to %struct.tree_list*, !dbg !8738
  %value40 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list39, i32 0, i32 2, !dbg !8738
  store %union.tree_node* %call36, %union.tree_node** %value40, align 8, !dbg !8739
  %42 = load i8, i8* %allows_reg, align 1, !dbg !8740
  %tobool41 = icmp ne i8 %42, 0, !dbg !8740
  br i1 %tobool41, label %if.then42, label %if.else120, !dbg !8742

if.then42:                                        ; preds = %if.then32
  %arraydecay43 = getelementptr inbounds [10 x i8], [10 x i8]* %buf, i64 0, i64 0, !dbg !8743
  %43 = load i32, i32* %i, align 4, !dbg !8745
  %call44 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay43, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i64 0, i64 0), i32 %43), !dbg !8746
  %44 = load i8*, i8** %p, align 8, !dbg !8747
  %call45 = call i8* @strchr(i8* %44, i32 44), !dbg !8749
  %cmp46 = icmp ne i8* %call45, null, !dbg !8750
  br i1 %cmp46, label %if.then48, label %if.else113, !dbg !8751

if.then48:                                        ; preds = %if.then42
  call void @llvm.dbg.declare(metadata i64* %len, metadata !8752, metadata !DIExpression()), !dbg !8754
  store i64 0, i64* %len, align 8, !dbg !8754
  call void @llvm.dbg.declare(metadata i64* %buflen, metadata !8755, metadata !DIExpression()), !dbg !8756
  %arraydecay49 = getelementptr inbounds [10 x i8], [10 x i8]* %buf, i64 0, i64 0, !dbg !8757
  %call50 = call i64 @strlen(i8* %arraydecay49), !dbg !8758
  store i64 %call50, i64* %buflen, align 8, !dbg !8756
  call void @llvm.dbg.declare(metadata i8** %beg, metadata !8759, metadata !DIExpression()), !dbg !8760
  call void @llvm.dbg.declare(metadata i8** %end, metadata !8761, metadata !DIExpression()), !dbg !8762
  call void @llvm.dbg.declare(metadata i8** %str51, metadata !8763, metadata !DIExpression()), !dbg !8764
  call void @llvm.dbg.declare(metadata i8** %dst, metadata !8765, metadata !DIExpression()), !dbg !8766
  %45 = load i8*, i8** %p, align 8, !dbg !8767
  %add.ptr = getelementptr inbounds i8, i8* %45, i64 1, !dbg !8769
  store i8* %add.ptr, i8** %beg, align 8, !dbg !8770
  br label %for.cond52, !dbg !8771

for.cond52:                                       ; preds = %if.end73, %if.then48
  %46 = load i8*, i8** %beg, align 8, !dbg !8772
  %call53 = call i8* @strchr(i8* %46, i32 44), !dbg !8775
  store i8* %call53, i8** %end, align 8, !dbg !8776
  %47 = load i8*, i8** %end, align 8, !dbg !8777
  %cmp54 = icmp eq i8* %47, null, !dbg !8779
  br i1 %cmp54, label %if.then56, label %if.end58, !dbg !8780

if.then56:                                        ; preds = %for.cond52
  %48 = load i8*, i8** %beg, align 8, !dbg !8781
  %call57 = call i8* @strchr(i8* %48, i32 0), !dbg !8782
  store i8* %call57, i8** %end, align 8, !dbg !8783
  br label %if.end58, !dbg !8784

if.end58:                                         ; preds = %if.then56, %for.cond52
  %49 = load i8*, i8** %end, align 8, !dbg !8785
  %50 = load i8*, i8** %beg, align 8, !dbg !8787
  %sub.ptr.lhs.cast = ptrtoint i8* %49 to i64, !dbg !8788
  %sub.ptr.rhs.cast = ptrtoint i8* %50 to i64, !dbg !8788
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !8788
  %51 = load i64, i64* %buflen, align 8, !dbg !8789
  %cmp59 = icmp ult i64 %sub.ptr.sub, %51, !dbg !8790
  br i1 %cmp59, label %if.then61, label %if.else, !dbg !8791

if.then61:                                        ; preds = %if.end58
  %52 = load i64, i64* %buflen, align 8, !dbg !8792
  %add = add i64 %52, 1, !dbg !8793
  %53 = load i64, i64* %len, align 8, !dbg !8794
  %add62 = add i64 %53, %add, !dbg !8794
  store i64 %add62, i64* %len, align 8, !dbg !8794
  br label %if.end68, !dbg !8795

if.else:                                          ; preds = %if.end58
  %54 = load i8*, i8** %end, align 8, !dbg !8796
  %55 = load i8*, i8** %beg, align 8, !dbg !8797
  %sub.ptr.lhs.cast63 = ptrtoint i8* %54 to i64, !dbg !8798
  %sub.ptr.rhs.cast64 = ptrtoint i8* %55 to i64, !dbg !8798
  %sub.ptr.sub65 = sub i64 %sub.ptr.lhs.cast63, %sub.ptr.rhs.cast64, !dbg !8798
  %add66 = add nsw i64 %sub.ptr.sub65, 1, !dbg !8799
  %56 = load i64, i64* %len, align 8, !dbg !8800
  %add67 = add i64 %56, %add66, !dbg !8800
  store i64 %add67, i64* %len, align 8, !dbg !8800
  br label %if.end68

if.end68:                                         ; preds = %if.else, %if.then61
  %57 = load i8*, i8** %end, align 8, !dbg !8801
  %58 = load i8, i8* %57, align 1, !dbg !8803
  %tobool69 = icmp ne i8 %58, 0, !dbg !8803
  br i1 %tobool69, label %if.then70, label %if.else72, !dbg !8804

if.then70:                                        ; preds = %if.end68
  %59 = load i8*, i8** %end, align 8, !dbg !8805
  %add.ptr71 = getelementptr inbounds i8, i8* %59, i64 1, !dbg !8806
  store i8* %add.ptr71, i8** %beg, align 8, !dbg !8807
  br label %if.end73, !dbg !8808

if.else72:                                        ; preds = %if.end68
  br label %for.end, !dbg !8809

if.end73:                                         ; preds = %if.then70
  br label %for.cond52, !dbg !8810, !llvm.loop !8811

for.end:                                          ; preds = %if.else72
  %60 = load i64, i64* %len, align 8, !dbg !8814
  %61 = alloca i8, i64 %60, align 16, !dbg !8814
  store i8* %61, i8** %str51, align 8, !dbg !8815
  %62 = load i8*, i8** %p, align 8, !dbg !8816
  %add.ptr74 = getelementptr inbounds i8, i8* %62, i64 1, !dbg !8818
  store i8* %add.ptr74, i8** %beg, align 8, !dbg !8819
  %63 = load i8*, i8** %str51, align 8, !dbg !8820
  store i8* %63, i8** %dst, align 8, !dbg !8821
  br label %for.cond75, !dbg !8822

for.cond75:                                       ; preds = %if.end106, %for.end
  call void @llvm.dbg.declare(metadata i8** %tem, metadata !8823, metadata !DIExpression()), !dbg !8826
  call void @llvm.dbg.declare(metadata i8* %mem_p, metadata !8827, metadata !DIExpression()), !dbg !8828
  call void @llvm.dbg.declare(metadata i8* %reg_p, metadata !8829, metadata !DIExpression()), !dbg !8830
  call void @llvm.dbg.declare(metadata i8* %inout_p, metadata !8831, metadata !DIExpression()), !dbg !8832
  %64 = load i8*, i8** %beg, align 8, !dbg !8833
  %call76 = call i8* @strchr(i8* %64, i32 44), !dbg !8834
  store i8* %call76, i8** %end, align 8, !dbg !8835
  %65 = load i8*, i8** %end, align 8, !dbg !8836
  %tobool77 = icmp ne i8* %65, null, !dbg !8836
  br i1 %tobool77, label %if.then78, label %if.end79, !dbg !8838

if.then78:                                        ; preds = %for.cond75
  %66 = load i8*, i8** %end, align 8, !dbg !8839
  store i8 0, i8* %66, align 1, !dbg !8840
  br label %if.end79, !dbg !8841

if.end79:                                         ; preds = %if.then78, %for.cond75
  %67 = load i8*, i8** %beg, align 8, !dbg !8842
  %arrayidx80 = getelementptr inbounds i8, i8* %67, i64 -1, !dbg !8842
  store i8 61, i8* %arrayidx80, align 1, !dbg !8843
  %68 = load i8*, i8** %beg, align 8, !dbg !8844
  %add.ptr81 = getelementptr inbounds i8, i8* %68, i64 -1, !dbg !8845
  store i8* %add.ptr81, i8** %tem, align 8, !dbg !8846
  %69 = load i32, i32* %i, align 4, !dbg !8847
  %call82 = call zeroext i8 @parse_output_constraint(i8** %tem, i32 %69, i32 0, i32 0, i8* %mem_p, i8* %reg_p, i8* %inout_p), !dbg !8848
  %70 = load i8*, i8** %dst, align 8, !dbg !8849
  %71 = load i8*, i8** %str51, align 8, !dbg !8851
  %cmp83 = icmp ne i8* %70, %71, !dbg !8852
  br i1 %cmp83, label %if.then85, label %if.end86, !dbg !8853

if.then85:                                        ; preds = %if.end79
  %72 = load i8*, i8** %dst, align 8, !dbg !8854
  %incdec.ptr = getelementptr inbounds i8, i8* %72, i32 1, !dbg !8854
  store i8* %incdec.ptr, i8** %dst, align 8, !dbg !8854
  store i8 44, i8* %72, align 1, !dbg !8855
  br label %if.end86, !dbg !8856

if.end86:                                         ; preds = %if.then85, %if.end79
  %73 = load i8, i8* %reg_p, align 1, !dbg !8857
  %tobool87 = icmp ne i8 %73, 0, !dbg !8857
  br i1 %tobool87, label %if.then88, label %if.else91, !dbg !8859

if.then88:                                        ; preds = %if.end86
  %74 = load i8*, i8** %dst, align 8, !dbg !8860
  %arraydecay89 = getelementptr inbounds [10 x i8], [10 x i8]* %buf, i64 0, i64 0, !dbg !8862
  %75 = load i64, i64* %buflen, align 8, !dbg !8863
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %74, i8* align 1 %arraydecay89, i64 %75, i1 false), !dbg !8862
  %76 = load i64, i64* %buflen, align 8, !dbg !8864
  %77 = load i8*, i8** %dst, align 8, !dbg !8865
  %add.ptr90 = getelementptr inbounds i8, i8* %77, i64 %76, !dbg !8865
  store i8* %add.ptr90, i8** %dst, align 8, !dbg !8865
  br label %if.end101, !dbg !8866

if.else91:                                        ; preds = %if.end86
  %78 = load i8*, i8** %end, align 8, !dbg !8867
  %tobool92 = icmp ne i8* %78, null, !dbg !8867
  br i1 %tobool92, label %if.then93, label %if.else97, !dbg !8870

if.then93:                                        ; preds = %if.else91
  %79 = load i8*, i8** %end, align 8, !dbg !8871
  %80 = load i8*, i8** %beg, align 8, !dbg !8872
  %sub.ptr.lhs.cast94 = ptrtoint i8* %79 to i64, !dbg !8873
  %sub.ptr.rhs.cast95 = ptrtoint i8* %80 to i64, !dbg !8873
  %sub.ptr.sub96 = sub i64 %sub.ptr.lhs.cast94, %sub.ptr.rhs.cast95, !dbg !8873
  store i64 %sub.ptr.sub96, i64* %len, align 8, !dbg !8874
  br label %if.end99, !dbg !8875

if.else97:                                        ; preds = %if.else91
  %81 = load i8*, i8** %beg, align 8, !dbg !8876
  %call98 = call i64 @strlen(i8* %81), !dbg !8877
  store i64 %call98, i64* %len, align 8, !dbg !8878
  br label %if.end99

if.end99:                                         ; preds = %if.else97, %if.then93
  %82 = load i8*, i8** %dst, align 8, !dbg !8879
  %83 = load i8*, i8** %beg, align 8, !dbg !8880
  %84 = load i64, i64* %len, align 8, !dbg !8881
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %82, i8* align 1 %83, i64 %84, i1 false), !dbg !8882
  %85 = load i64, i64* %len, align 8, !dbg !8883
  %86 = load i8*, i8** %dst, align 8, !dbg !8884
  %add.ptr100 = getelementptr inbounds i8, i8* %86, i64 %85, !dbg !8884
  store i8* %add.ptr100, i8** %dst, align 8, !dbg !8884
  br label %if.end101

if.end101:                                        ; preds = %if.end99, %if.then88
  %87 = load i8*, i8** %end, align 8, !dbg !8885
  %tobool102 = icmp ne i8* %87, null, !dbg !8885
  br i1 %tobool102, label %if.then103, label %if.else105, !dbg !8887

if.then103:                                       ; preds = %if.end101
  %88 = load i8*, i8** %end, align 8, !dbg !8888
  %add.ptr104 = getelementptr inbounds i8, i8* %88, i64 1, !dbg !8889
  store i8* %add.ptr104, i8** %beg, align 8, !dbg !8890
  br label %if.end106, !dbg !8891

if.else105:                                       ; preds = %if.end101
  br label %for.end107, !dbg !8892

if.end106:                                        ; preds = %if.then103
  br label %for.cond75, !dbg !8893, !llvm.loop !8894

for.end107:                                       ; preds = %if.else105
  %89 = load i8*, i8** %dst, align 8, !dbg !8897
  store i8 0, i8* %89, align 1, !dbg !8898
  %90 = load i8*, i8** %dst, align 8, !dbg !8899
  %91 = load i8*, i8** %str51, align 8, !dbg !8900
  %sub.ptr.lhs.cast108 = ptrtoint i8* %90 to i64, !dbg !8901
  %sub.ptr.rhs.cast109 = ptrtoint i8* %91 to i64, !dbg !8901
  %sub.ptr.sub110 = sub i64 %sub.ptr.lhs.cast108, %sub.ptr.rhs.cast109, !dbg !8901
  %conv111 = trunc i64 %sub.ptr.sub110 to i32, !dbg !8899
  %92 = load i8*, i8** %str51, align 8, !dbg !8902
  %call112 = call %union.tree_node* @build_string(i32 %conv111, i8* %92), !dbg !8903
  store %union.tree_node* %call112, %union.tree_node** %input, align 8, !dbg !8904
  br label %if.end119, !dbg !8905

if.else113:                                       ; preds = %if.then42
  %arraydecay114 = getelementptr inbounds [10 x i8], [10 x i8]* %buf, i64 0, i64 0, !dbg !8906
  %call115 = call i64 @strlen(i8* %arraydecay114), !dbg !8907
  %conv116 = trunc i64 %call115 to i32, !dbg !8907
  %arraydecay117 = getelementptr inbounds [10 x i8], [10 x i8]* %buf, i64 0, i64 0, !dbg !8908
  %call118 = call %union.tree_node* @build_string(i32 %conv116, i8* %arraydecay117), !dbg !8909
  store %union.tree_node* %call118, %union.tree_node** %input, align 8, !dbg !8910
  br label %if.end119

if.end119:                                        ; preds = %if.else113, %for.end107
  br label %if.end124, !dbg !8911

if.else120:                                       ; preds = %if.then32
  %93 = load i64, i64* %constraint_len, align 8, !dbg !8912
  %sub = sub i64 %93, 1, !dbg !8913
  %conv121 = trunc i64 %sub to i32, !dbg !8912
  %94 = load i8*, i8** %constraint, align 8, !dbg !8914
  %add.ptr122 = getelementptr inbounds i8, i8* %94, i64 1, !dbg !8915
  %call123 = call %union.tree_node* @build_string(i32 %conv121, i8* %add.ptr122), !dbg !8916
  store %union.tree_node* %call123, %union.tree_node** %input, align 8, !dbg !8917
  br label %if.end124

if.end124:                                        ; preds = %if.else120, %if.end119
  %95 = load i8*, i8** %p, align 8, !dbg !8918
  call void @free(i8* %95), !dbg !8919
  %96 = load %union.tree_node*, %union.tree_node** %input, align 8, !dbg !8920
  %call125 = call %union.tree_node* @build_tree_list_stat(%union.tree_node* null, %union.tree_node* %96), !dbg !8920
  %97 = load %union.tree_node*, %union.tree_node** %link, align 8, !dbg !8920
  %list126 = bitcast %union.tree_node* %97 to %struct.tree_list*, !dbg !8920
  %value127 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list126, i32 0, i32 2, !dbg !8920
  %98 = load %union.tree_node*, %union.tree_node** %value127, align 8, !dbg !8920
  %call128 = call %union.tree_node* @unshare_expr(%union.tree_node* %98), !dbg !8920
  %call129 = call %union.tree_node* @build_tree_list_stat(%union.tree_node* %call125, %union.tree_node* %call128), !dbg !8920
  store %union.tree_node* %call129, %union.tree_node** %input, align 8, !dbg !8921
  %99 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !8922
  %exp130 = bitcast %union.tree_node* %99 to %struct.tree_exp*, !dbg !8922
  %operands131 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp130, i32 0, i32 3, !dbg !8922
  %arrayidx132 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands131, i64 0, i64 2, !dbg !8922
  %100 = load %union.tree_node*, %union.tree_node** %arrayidx132, align 8, !dbg !8922
  %101 = load %union.tree_node*, %union.tree_node** %input, align 8, !dbg !8923
  %call133 = call %union.tree_node* @chainon(%union.tree_node* %100, %union.tree_node* %101), !dbg !8924
  %102 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !8925
  %exp134 = bitcast %union.tree_node* %102 to %struct.tree_exp*, !dbg !8925
  %operands135 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp134, i32 0, i32 3, !dbg !8925
  %arrayidx136 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands135, i64 0, i64 2, !dbg !8925
  store %union.tree_node* %call133, %union.tree_node** %arrayidx136, align 8, !dbg !8926
  br label %if.end137, !dbg !8927

if.end137:                                        ; preds = %if.end124, %if.end27
  br label %for.inc, !dbg !8928

for.inc:                                          ; preds = %if.end137, %if.then
  %103 = load i32, i32* %i, align 4, !dbg !8929
  %inc = add nsw i32 %103, 1, !dbg !8929
  store i32 %inc, i32* %i, align 4, !dbg !8929
  %104 = load %union.tree_node*, %union.tree_node** %link_next, align 8, !dbg !8930
  store %union.tree_node* %104, %union.tree_node** %link, align 8, !dbg !8931
  br label %for.cond, !dbg !8932, !llvm.loop !8933

for.end138:                                       ; preds = %for.cond
  store %union.tree_node* null, %union.tree_node** %link_next, align 8, !dbg !8935
  %105 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !8936
  %exp139 = bitcast %union.tree_node* %105 to %struct.tree_exp*, !dbg !8936
  %operands140 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp139, i32 0, i32 3, !dbg !8936
  %arrayidx141 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands140, i64 0, i64 2, !dbg !8936
  %106 = load %union.tree_node*, %union.tree_node** %arrayidx141, align 8, !dbg !8936
  store %union.tree_node* %106, %union.tree_node** %link, align 8, !dbg !8938
  br label %for.cond142, !dbg !8939

for.cond142:                                      ; preds = %for.inc249, %for.end138
  %107 = load %union.tree_node*, %union.tree_node** %link, align 8, !dbg !8940
  %tobool143 = icmp ne %union.tree_node* %107, null, !dbg !8942
  br i1 %tobool143, label %for.body144, label %for.end251, !dbg !8942

for.body144:                                      ; preds = %for.cond142
  %108 = load %union.tree_node*, %union.tree_node** %link, align 8, !dbg !8943
  %common145 = bitcast %union.tree_node* %108 to %struct.tree_common*, !dbg !8943
  %chain146 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common145, i32 0, i32 1, !dbg !8943
  %109 = load %union.tree_node*, %union.tree_node** %chain146, align 8, !dbg !8943
  store %union.tree_node* %109, %union.tree_node** %link_next, align 8, !dbg !8945
  %110 = load %union.tree_node*, %union.tree_node** %link, align 8, !dbg !8946
  %list147 = bitcast %union.tree_node* %110 to %struct.tree_list*, !dbg !8946
  %purpose148 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list147, i32 0, i32 1, !dbg !8946
  %111 = load %union.tree_node*, %union.tree_node** %purpose148, align 8, !dbg !8946
  %list149 = bitcast %union.tree_node* %111 to %struct.tree_list*, !dbg !8946
  %value150 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list149, i32 0, i32 2, !dbg !8946
  %112 = load %union.tree_node*, %union.tree_node** %value150, align 8, !dbg !8946
  %string151 = bitcast %union.tree_node* %112 to %struct.tree_string*, !dbg !8946
  %str152 = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string151, i32 0, i32 2, !dbg !8946
  %arraydecay153 = getelementptr inbounds [1 x i8], [1 x i8]* %str152, i64 0, i64 0, !dbg !8946
  store i8* %arraydecay153, i8** %constraint, align 8, !dbg !8947
  %113 = load i32, i32* %noutputs, align 4, !dbg !8948
  %114 = load i8**, i8*** %oconstraints, align 8, !dbg !8949
  %call154 = call zeroext i8 @parse_input_constraint(i8** %constraint, i32 0, i32 0, i32 %113, i32 0, i8** %114, i8* %allows_mem, i8* %allows_reg), !dbg !8950
  %115 = load %union.tree_node*, %union.tree_node** %link, align 8, !dbg !8951
  %list155 = bitcast %union.tree_node* %115 to %struct.tree_list*, !dbg !8951
  %value156 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list155, i32 0, i32 2, !dbg !8951
  %116 = load %union.tree_node*, %union.tree_node** %value156, align 8, !dbg !8951
  %common157 = bitcast %union.tree_node* %116 to %struct.tree_common*, !dbg !8951
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common157, i32 0, i32 2, !dbg !8951
  %117 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8951
  %base = bitcast %union.tree_node* %117 to %struct.tree_base*, !dbg !8951
  %118 = bitcast %struct.tree_base* %base to i64*, !dbg !8951
  %bf.load = load i64, i64* %118, align 8, !dbg !8951
  %bf.lshr = lshr i64 %bf.load, 18, !dbg !8951
  %bf.clear = and i64 %bf.lshr, 1, !dbg !8951
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8951
  %tobool158 = icmp ne i32 %bf.cast, 0, !dbg !8951
  br i1 %tobool158, label %if.then159, label %if.end164, !dbg !8953

if.then159:                                       ; preds = %for.body144
  %119 = load i8, i8* %allows_mem, align 1, !dbg !8954
  %tobool160 = icmp ne i8 %119, 0, !dbg !8954
  br i1 %tobool160, label %if.then161, label %if.else162, !dbg !8957

if.then161:                                       ; preds = %if.then159
  store i8 0, i8* %allows_reg, align 1, !dbg !8958
  br label %if.end163, !dbg !8959

if.else162:                                       ; preds = %if.then159
  call void (i8*, ...) @error(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.13, i64 0, i64 0)), !dbg !8960
  %120 = load i32, i32* %i, align 4, !dbg !8962
  call void (i8*, ...) @error(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.14, i64 0, i64 0), i32 %120), !dbg !8963
  store i32 -2, i32* %retval, align 4, !dbg !8964
  br label %return, !dbg !8964

if.end163:                                        ; preds = %if.then161
  br label %if.end164, !dbg !8965

if.end164:                                        ; preds = %if.end163, %for.body144
  %121 = load i8, i8* %allows_reg, align 1, !dbg !8966
  %tobool165 = icmp ne i8 %121, 0, !dbg !8966
  br i1 %tobool165, label %if.else237, label %land.lhs.true166, !dbg !8968

land.lhs.true166:                                 ; preds = %if.end164
  %122 = load i8, i8* %allows_mem, align 1, !dbg !8969
  %conv167 = zext i8 %122 to i32, !dbg !8969
  %tobool168 = icmp ne i32 %conv167, 0, !dbg !8969
  br i1 %tobool168, label %if.then169, label %if.else237, !dbg !8970

if.then169:                                       ; preds = %land.lhs.true166
  %123 = load %union.tree_node*, %union.tree_node** %link, align 8, !dbg !8971
  %list170 = bitcast %union.tree_node* %123 to %struct.tree_list*, !dbg !8971
  %value171 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list170, i32 0, i32 2, !dbg !8971
  %124 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !8973
  %125 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !8974
  %call172 = call i32 @gimplify_expr(%union.tree_node** %value171, %struct.gimple_seq_d** %124, %struct.gimple_seq_d** %125, i8 (%union.tree_node*)* @is_gimple_lvalue, i32 6), !dbg !8975
  store i32 %call172, i32* %tret, align 4, !dbg !8976
  %126 = load %union.tree_node*, %union.tree_node** %link, align 8, !dbg !8977
  %list173 = bitcast %union.tree_node* %126 to %struct.tree_list*, !dbg !8977
  %value174 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list173, i32 0, i32 2, !dbg !8977
  %127 = load %union.tree_node*, %union.tree_node** %value174, align 8, !dbg !8977
  call void @mark_addressable(%union.tree_node* %127), !dbg !8978
  %128 = load i32, i32* %tret, align 4, !dbg !8979
  %cmp175 = icmp eq i32 %128, -2, !dbg !8981
  br i1 %cmp175, label %if.then177, label %if.end236, !dbg !8982

if.then177:                                       ; preds = %if.then169
  %129 = load %union.tree_node*, %union.tree_node** %link, align 8, !dbg !8983
  %list178 = bitcast %union.tree_node* %129 to %struct.tree_list*, !dbg !8983
  %value179 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list178, i32 0, i32 2, !dbg !8983
  %130 = load %union.tree_node*, %union.tree_node** %value179, align 8, !dbg !8983
  %base180 = bitcast %union.tree_node* %130 to %struct.tree_base*, !dbg !8983
  %131 = bitcast %struct.tree_base* %base180 to i64*, !dbg !8983
  %bf.load181 = load i64, i64* %131, align 8, !dbg !8983
  %bf.clear182 = and i64 %bf.load181, 65535, !dbg !8983
  %bf.cast183 = trunc i64 %bf.clear182 to i32, !dbg !8983
  %idxprom184 = sext i32 %bf.cast183 to i64, !dbg !8983
  %arrayidx185 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom184, !dbg !8983
  %132 = load i32, i32* %arrayidx185, align 4, !dbg !8983
  %cmp186 = icmp uge i32 %132, 4, !dbg !8983
  br i1 %cmp186, label %land.lhs.true188, label %cond.false, !dbg !8983

land.lhs.true188:                                 ; preds = %if.then177
  %133 = load %union.tree_node*, %union.tree_node** %link, align 8, !dbg !8983
  %list189 = bitcast %union.tree_node* %133 to %struct.tree_list*, !dbg !8983
  %value190 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list189, i32 0, i32 2, !dbg !8983
  %134 = load %union.tree_node*, %union.tree_node** %value190, align 8, !dbg !8983
  %base191 = bitcast %union.tree_node* %134 to %struct.tree_base*, !dbg !8983
  %135 = bitcast %struct.tree_base* %base191 to i64*, !dbg !8983
  %bf.load192 = load i64, i64* %135, align 8, !dbg !8983
  %bf.clear193 = and i64 %bf.load192, 65535, !dbg !8983
  %bf.cast194 = trunc i64 %bf.clear193 to i32, !dbg !8983
  %idxprom195 = sext i32 %bf.cast194 to i64, !dbg !8983
  %arrayidx196 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom195, !dbg !8983
  %136 = load i32, i32* %arrayidx196, align 4, !dbg !8983
  %cmp197 = icmp ule i32 %136, 10, !dbg !8983
  br i1 %cmp197, label %cond.true, label %cond.false, !dbg !8983

cond.true:                                        ; preds = %land.lhs.true188
  %137 = load %union.tree_node*, %union.tree_node** %link, align 8, !dbg !8983
  %list199 = bitcast %union.tree_node* %137 to %struct.tree_list*, !dbg !8983
  %value200 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list199, i32 0, i32 2, !dbg !8983
  %138 = load %union.tree_node*, %union.tree_node** %value200, align 8, !dbg !8983
  %exp201 = bitcast %union.tree_node* %138 to %struct.tree_exp*, !dbg !8983
  %locus = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp201, i32 0, i32 1, !dbg !8983
  %139 = load i32, i32* %locus, align 8, !dbg !8983
  br label %cond.end, !dbg !8983

cond.false:                                       ; preds = %land.lhs.true188, %if.then177
  br label %cond.end, !dbg !8983

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond202 = phi i32 [ %139, %cond.true ], [ 0, %cond.false ], !dbg !8983
  %cmp203 = icmp ne i32 %cond202, 0, !dbg !8983
  br i1 %cmp203, label %if.then205, label %if.end235, !dbg !8986

if.then205:                                       ; preds = %cond.end
  %140 = load %union.tree_node*, %union.tree_node** %link, align 8, !dbg !8987
  %list206 = bitcast %union.tree_node* %140 to %struct.tree_list*, !dbg !8987
  %value207 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list206, i32 0, i32 2, !dbg !8987
  %141 = load %union.tree_node*, %union.tree_node** %value207, align 8, !dbg !8987
  %base208 = bitcast %union.tree_node* %141 to %struct.tree_base*, !dbg !8987
  %142 = bitcast %struct.tree_base* %base208 to i64*, !dbg !8987
  %bf.load209 = load i64, i64* %142, align 8, !dbg !8987
  %bf.clear210 = and i64 %bf.load209, 65535, !dbg !8987
  %bf.cast211 = trunc i64 %bf.clear210 to i32, !dbg !8987
  %idxprom212 = sext i32 %bf.cast211 to i64, !dbg !8987
  %arrayidx213 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom212, !dbg !8987
  %143 = load i32, i32* %arrayidx213, align 4, !dbg !8987
  %cmp214 = icmp uge i32 %143, 4, !dbg !8987
  br i1 %cmp214, label %land.lhs.true216, label %cond.false232, !dbg !8987

land.lhs.true216:                                 ; preds = %if.then205
  %144 = load %union.tree_node*, %union.tree_node** %link, align 8, !dbg !8987
  %list217 = bitcast %union.tree_node* %144 to %struct.tree_list*, !dbg !8987
  %value218 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list217, i32 0, i32 2, !dbg !8987
  %145 = load %union.tree_node*, %union.tree_node** %value218, align 8, !dbg !8987
  %base219 = bitcast %union.tree_node* %145 to %struct.tree_base*, !dbg !8987
  %146 = bitcast %struct.tree_base* %base219 to i64*, !dbg !8987
  %bf.load220 = load i64, i64* %146, align 8, !dbg !8987
  %bf.clear221 = and i64 %bf.load220, 65535, !dbg !8987
  %bf.cast222 = trunc i64 %bf.clear221 to i32, !dbg !8987
  %idxprom223 = sext i32 %bf.cast222 to i64, !dbg !8987
  %arrayidx224 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom223, !dbg !8987
  %147 = load i32, i32* %arrayidx224, align 4, !dbg !8987
  %cmp225 = icmp ule i32 %147, 10, !dbg !8987
  br i1 %cmp225, label %cond.true227, label %cond.false232, !dbg !8987

cond.true227:                                     ; preds = %land.lhs.true216
  %148 = load %union.tree_node*, %union.tree_node** %link, align 8, !dbg !8987
  %list228 = bitcast %union.tree_node* %148 to %struct.tree_list*, !dbg !8987
  %value229 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list228, i32 0, i32 2, !dbg !8987
  %149 = load %union.tree_node*, %union.tree_node** %value229, align 8, !dbg !8987
  %exp230 = bitcast %union.tree_node* %149 to %struct.tree_exp*, !dbg !8987
  %locus231 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp230, i32 0, i32 1, !dbg !8987
  %150 = load i32, i32* %locus231, align 8, !dbg !8987
  br label %cond.end233, !dbg !8987

cond.false232:                                    ; preds = %land.lhs.true216, %if.then205
  br label %cond.end233, !dbg !8987

cond.end233:                                      ; preds = %cond.false232, %cond.true227
  %cond234 = phi i32 [ %150, %cond.true227 ], [ 0, %cond.false232 ], !dbg !8987
  store i32 %cond234, i32* @input_location, align 4, !dbg !8988
  br label %if.end235, !dbg !8989

if.end235:                                        ; preds = %cond.end233, %cond.end
  %151 = load i32, i32* %i, align 4, !dbg !8990
  call void (i8*, ...) @error(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.15, i64 0, i64 0), i32 %151), !dbg !8991
  %152 = load i32, i32* %tret, align 4, !dbg !8992
  store i32 %152, i32* %ret, align 4, !dbg !8993
  br label %if.end236, !dbg !8994

if.end236:                                        ; preds = %if.end235, %if.then169
  br label %if.end245, !dbg !8995

if.else237:                                       ; preds = %land.lhs.true166, %if.end164
  %153 = load %union.tree_node*, %union.tree_node** %link, align 8, !dbg !8996
  %list238 = bitcast %union.tree_node* %153 to %struct.tree_list*, !dbg !8996
  %value239 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list238, i32 0, i32 2, !dbg !8996
  %154 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !8998
  %155 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !8999
  %call240 = call i32 @gimplify_expr(%union.tree_node** %value239, %struct.gimple_seq_d** %154, %struct.gimple_seq_d** %155, i8 (%union.tree_node*)* @is_gimple_asm_val, i32 1), !dbg !9000
  store i32 %call240, i32* %tret, align 4, !dbg !9001
  %156 = load i32, i32* %tret, align 4, !dbg !9002
  %cmp241 = icmp eq i32 %156, -2, !dbg !9004
  br i1 %cmp241, label %if.then243, label %if.end244, !dbg !9005

if.then243:                                       ; preds = %if.else237
  %157 = load i32, i32* %tret, align 4, !dbg !9006
  store i32 %157, i32* %ret, align 4, !dbg !9007
  br label %if.end244, !dbg !9008

if.end244:                                        ; preds = %if.then243, %if.else237
  br label %if.end245

if.end245:                                        ; preds = %if.end244, %if.end236
  %158 = load %union.tree_node*, %union.tree_node** %link, align 8, !dbg !9009
  %common246 = bitcast %union.tree_node* %158 to %struct.tree_common*, !dbg !9009
  %chain247 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common246, i32 0, i32 1, !dbg !9009
  store %union.tree_node* null, %union.tree_node** %chain247, align 8, !dbg !9010
  %159 = load %union.tree_node*, %union.tree_node** %link, align 8, !dbg !9011
  %call248 = call %union.tree_node** @VEC_tree_gc_safe_push(%struct.VEC_tree_gc** %inputs, %union.tree_node* %159), !dbg !9011
  br label %for.inc249, !dbg !9012

for.inc249:                                       ; preds = %if.end245
  %160 = load i32, i32* %i, align 4, !dbg !9013
  %inc250 = add nsw i32 %160, 1, !dbg !9013
  store i32 %inc250, i32* %i, align 4, !dbg !9013
  %161 = load %union.tree_node*, %union.tree_node** %link_next, align 8, !dbg !9014
  store %union.tree_node* %161, %union.tree_node** %link, align 8, !dbg !9015
  br label %for.cond142, !dbg !9016, !llvm.loop !9017

for.end251:                                       ; preds = %for.cond142
  %162 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !9019
  %exp252 = bitcast %union.tree_node* %162 to %struct.tree_exp*, !dbg !9019
  %operands253 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp252, i32 0, i32 3, !dbg !9019
  %arrayidx254 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands253, i64 0, i64 3, !dbg !9019
  %163 = load %union.tree_node*, %union.tree_node** %arrayidx254, align 8, !dbg !9019
  store %union.tree_node* %163, %union.tree_node** %link, align 8, !dbg !9021
  br label %for.cond255, !dbg !9022

for.cond255:                                      ; preds = %for.inc259, %for.end251
  %164 = load %union.tree_node*, %union.tree_node** %link, align 8, !dbg !9023
  %tobool256 = icmp ne %union.tree_node* %164, null, !dbg !9025
  br i1 %tobool256, label %for.body257, label %for.end263, !dbg !9025

for.body257:                                      ; preds = %for.cond255
  %165 = load %union.tree_node*, %union.tree_node** %link, align 8, !dbg !9026
  %call258 = call %union.tree_node** @VEC_tree_gc_safe_push(%struct.VEC_tree_gc** %clobbers, %union.tree_node* %165), !dbg !9026
  br label %for.inc259, !dbg !9026

for.inc259:                                       ; preds = %for.body257
  %166 = load i32, i32* %i, align 4, !dbg !9027
  %inc260 = add nsw i32 %166, 1, !dbg !9027
  store i32 %inc260, i32* %i, align 4, !dbg !9027
  %167 = load %union.tree_node*, %union.tree_node** %link, align 8, !dbg !9028
  %common261 = bitcast %union.tree_node* %167 to %struct.tree_common*, !dbg !9028
  %chain262 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common261, i32 0, i32 1, !dbg !9028
  %168 = load %union.tree_node*, %union.tree_node** %chain262, align 8, !dbg !9028
  store %union.tree_node* %168, %union.tree_node** %link, align 8, !dbg !9029
  br label %for.cond255, !dbg !9030, !llvm.loop !9031

for.end263:                                       ; preds = %for.cond255
  %169 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !9033
  %exp264 = bitcast %union.tree_node* %169 to %struct.tree_exp*, !dbg !9033
  %operands265 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp264, i32 0, i32 3, !dbg !9033
  %arrayidx266 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands265, i64 0, i64 4, !dbg !9033
  %170 = load %union.tree_node*, %union.tree_node** %arrayidx266, align 8, !dbg !9033
  store %union.tree_node* %170, %union.tree_node** %link, align 8, !dbg !9035
  br label %for.cond267, !dbg !9036

for.cond267:                                      ; preds = %for.inc271, %for.end263
  %171 = load %union.tree_node*, %union.tree_node** %link, align 8, !dbg !9037
  %tobool268 = icmp ne %union.tree_node* %171, null, !dbg !9039
  br i1 %tobool268, label %for.body269, label %for.end275, !dbg !9039

for.body269:                                      ; preds = %for.cond267
  %172 = load %union.tree_node*, %union.tree_node** %link, align 8, !dbg !9040
  %call270 = call %union.tree_node** @VEC_tree_gc_safe_push(%struct.VEC_tree_gc** %labels, %union.tree_node* %172), !dbg !9040
  br label %for.inc271, !dbg !9040

for.inc271:                                       ; preds = %for.body269
  %173 = load i32, i32* %i, align 4, !dbg !9041
  %inc272 = add nsw i32 %173, 1, !dbg !9041
  store i32 %inc272, i32* %i, align 4, !dbg !9041
  %174 = load %union.tree_node*, %union.tree_node** %link, align 8, !dbg !9042
  %common273 = bitcast %union.tree_node* %174 to %struct.tree_common*, !dbg !9042
  %chain274 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common273, i32 0, i32 1, !dbg !9042
  %175 = load %union.tree_node*, %union.tree_node** %chain274, align 8, !dbg !9042
  store %union.tree_node* %175, %union.tree_node** %link, align 8, !dbg !9043
  br label %for.cond267, !dbg !9044, !llvm.loop !9045

for.end275:                                       ; preds = %for.cond267
  %176 = load i32, i32* %ret, align 4, !dbg !9047
  %cmp276 = icmp ne i32 %176, -2, !dbg !9049
  br i1 %cmp276, label %if.then278, label %if.end298, !dbg !9050

if.then278:                                       ; preds = %for.end275
  %177 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !9051
  %exp279 = bitcast %union.tree_node* %177 to %struct.tree_exp*, !dbg !9051
  %operands280 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp279, i32 0, i32 3, !dbg !9051
  %arrayidx281 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands280, i64 0, i64 0, !dbg !9051
  %178 = load %union.tree_node*, %union.tree_node** %arrayidx281, align 8, !dbg !9051
  %string282 = bitcast %union.tree_node* %178 to %struct.tree_string*, !dbg !9051
  %str283 = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string282, i32 0, i32 2, !dbg !9051
  %arraydecay284 = getelementptr inbounds [1 x i8], [1 x i8]* %str283, i64 0, i64 0, !dbg !9051
  %179 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %inputs, align 8, !dbg !9053
  %180 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %outputs, align 8, !dbg !9054
  %181 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %clobbers, align 8, !dbg !9055
  %182 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %labels, align 8, !dbg !9056
  %call285 = call %union.gimple_statement_d* @gimple_build_asm_vec(i8* %arraydecay284, %struct.VEC_tree_gc* %179, %struct.VEC_tree_gc* %180, %struct.VEC_tree_gc* %181, %struct.VEC_tree_gc* %182), !dbg !9057
  store %union.gimple_statement_d* %call285, %union.gimple_statement_d** %stmt, align 8, !dbg !9058
  %183 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !9059
  %184 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !9060
  %base286 = bitcast %union.tree_node* %184 to %struct.tree_base*, !dbg !9060
  %185 = bitcast %struct.tree_base* %base286 to i64*, !dbg !9060
  %bf.load287 = load i64, i64* %185, align 8, !dbg !9060
  %bf.lshr288 = lshr i64 %bf.load287, 27, !dbg !9060
  %bf.clear289 = and i64 %bf.lshr288, 1, !dbg !9060
  %bf.cast290 = trunc i64 %bf.clear289 to i32, !dbg !9060
  %conv291 = trunc i32 %bf.cast290 to i8, !dbg !9060
  call void @gimple_asm_set_volatile(%union.gimple_statement_d* %183, i8 zeroext %conv291), !dbg !9061
  %186 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !9062
  %187 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !9063
  %base292 = bitcast %union.tree_node* %187 to %struct.tree_base*, !dbg !9063
  %188 = bitcast %struct.tree_base* %base292 to i64*, !dbg !9063
  %bf.load293 = load i64, i64* %188, align 8, !dbg !9063
  %bf.lshr294 = lshr i64 %bf.load293, 26, !dbg !9063
  %bf.clear295 = and i64 %bf.lshr294, 1, !dbg !9063
  %bf.cast296 = trunc i64 %bf.clear295 to i32, !dbg !9063
  %conv297 = trunc i32 %bf.cast296 to i8, !dbg !9063
  call void @gimple_asm_set_input(%union.gimple_statement_d* %186, i8 zeroext %conv297), !dbg !9064
  %189 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !9065
  %190 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !9066
  call void @gimplify_seq_add_stmt(%struct.gimple_seq_d** %189, %union.gimple_statement_d* %190), !dbg !9067
  br label %if.end298, !dbg !9068

if.end298:                                        ; preds = %if.then278, %for.end275
  %191 = load i32, i32* %ret, align 4, !dbg !9069
  store i32 %191, i32* %retval, align 4, !dbg !9070
  br label %return, !dbg !9070

return:                                           ; preds = %if.end298, %if.else162
  %192 = load i32, i32* %retval, align 4, !dbg !9071
  ret i32 %192, !dbg !9071
}

declare dso_local void @gimple_seq_add_seq(%struct.gimple_seq_d**, %struct.gimple_seq_d*) #3

declare dso_local %union.gimple_statement_d* @gimple_build_try(%struct.gimple_seq_d*, %struct.gimple_seq_d*, i32) #3

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_try_set_catch_is_cleanup(%union.gimple_statement_d* %g, i8 zeroext %catch_is_cleanup) #0 !dbg !9072 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  %catch_is_cleanup.addr = alloca i8, align 1
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !9075, metadata !DIExpression()), !dbg !9076
  store i8 %catch_is_cleanup, i8* %catch_is_cleanup.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %catch_is_cleanup.addr, metadata !9077, metadata !DIExpression()), !dbg !9078
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !9079
  %call = call i32 @gimple_try_kind(%union.gimple_statement_d* %0), !dbg !9079
  %cmp = icmp eq i32 %call, 1, !dbg !9079
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !9079

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.16, i64 0, i64 0), i32 2976, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9079
  br label %cond.end, !dbg !9079

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9079

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9079
  %1 = load i8, i8* %catch_is_cleanup.addr, align 1, !dbg !9080
  %tobool = icmp ne i8 %1, 0, !dbg !9080
  br i1 %tobool, label %if.then, label %if.else, !dbg !9082

if.then:                                          ; preds = %cond.end
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !9083
  %gsbase = bitcast %union.gimple_statement_d* %2 to %struct.gimple_statement_base*, !dbg !9084
  %3 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !9085
  %bf.load = load i32, i32* %3, align 8, !dbg !9086
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !9086
  %or = or i32 %bf.lshr, 4, !dbg !9086
  %bf.load1 = load i32, i32* %3, align 8, !dbg !9086
  %bf.value = and i32 %or, 65535, !dbg !9086
  %bf.shl = shl i32 %bf.value, 16, !dbg !9086
  %bf.clear = and i32 %bf.load1, 65535, !dbg !9086
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !9086
  store i32 %bf.set, i32* %3, align 8, !dbg !9086
  br label %if.end, !dbg !9083

if.else:                                          ; preds = %cond.end
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !9087
  %gsbase2 = bitcast %union.gimple_statement_d* %4 to %struct.gimple_statement_base*, !dbg !9088
  %5 = bitcast %struct.gimple_statement_base* %gsbase2 to i32*, !dbg !9089
  %bf.load3 = load i32, i32* %5, align 8, !dbg !9090
  %bf.lshr4 = lshr i32 %bf.load3, 16, !dbg !9090
  %and = and i32 %bf.lshr4, -5, !dbg !9090
  %bf.load5 = load i32, i32* %5, align 8, !dbg !9090
  %bf.value6 = and i32 %and, 65535, !dbg !9090
  %bf.shl7 = shl i32 %bf.value6, 16, !dbg !9090
  %bf.clear8 = and i32 %bf.load5, 65535, !dbg !9090
  %bf.set9 = or i32 %bf.clear8, %bf.shl7, !dbg !9090
  store i32 %bf.set9, i32* %5, align 8, !dbg !9090
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !9091
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimplify_cleanup_point_expr(%union.tree_node** %expr_p, %struct.gimple_seq_d** %pre_p) #0 !dbg !9092 {
entry:
  %retval = alloca i32, align 4
  %expr_p.addr = alloca %union.tree_node**, align 8
  %pre_p.addr = alloca %struct.gimple_seq_d**, align 8
  %iter = alloca %struct.gimple_stmt_iterator, align 8
  %body_sequence = alloca %struct.gimple_seq_d*, align 8
  %temp = alloca %union.tree_node*, align 8
  %old_conds = alloca i32, align 4
  %old_cleanups = alloca %struct.gimple_seq_d*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %wce = alloca %union.gimple_statement_d*, align 8
  %gtry = alloca %union.gimple_statement_d*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  %kind = alloca i32, align 4
  %tmp21 = alloca %struct.gimple_stmt_iterator, align 8
  store %union.tree_node** %expr_p, %union.tree_node*** %expr_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %expr_p.addr, metadata !9093, metadata !DIExpression()), !dbg !9094
  store %struct.gimple_seq_d** %pre_p, %struct.gimple_seq_d*** %pre_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %pre_p.addr, metadata !9095, metadata !DIExpression()), !dbg !9096
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %iter, metadata !9097, metadata !DIExpression()), !dbg !9098
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %body_sequence, metadata !9099, metadata !DIExpression()), !dbg !9100
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %body_sequence, align 8, !dbg !9100
  call void @llvm.dbg.declare(metadata %union.tree_node** %temp, metadata !9101, metadata !DIExpression()), !dbg !9102
  %0 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !9103
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !9104
  %call = call %union.tree_node* @voidify_wrapper_expr(%union.tree_node* %1, %union.tree_node* null), !dbg !9105
  store %union.tree_node* %call, %union.tree_node** %temp, align 8, !dbg !9102
  call void @llvm.dbg.declare(metadata i32* %old_conds, metadata !9106, metadata !DIExpression()), !dbg !9107
  %2 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !9108
  %conditions = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %2, i32 0, i32 8, !dbg !9109
  %3 = load i32, i32* %conditions, align 8, !dbg !9109
  store i32 %3, i32* %old_conds, align 4, !dbg !9107
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %old_cleanups, metadata !9110, metadata !DIExpression()), !dbg !9111
  %4 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !9112
  %conditional_cleanups = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %4, i32 0, i32 3, !dbg !9113
  %5 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %conditional_cleanups, align 8, !dbg !9113
  store %struct.gimple_seq_d* %5, %struct.gimple_seq_d** %old_cleanups, align 8, !dbg !9111
  %6 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !9114
  %conditions1 = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %6, i32 0, i32 8, !dbg !9115
  store i32 0, i32* %conditions1, align 8, !dbg !9116
  %7 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !9117
  %conditional_cleanups2 = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %7, i32 0, i32 3, !dbg !9118
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %conditional_cleanups2, align 8, !dbg !9119
  %8 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !9120
  %9 = load %union.tree_node*, %union.tree_node** %8, align 8, !dbg !9120
  %exp = bitcast %union.tree_node* %9 to %struct.tree_exp*, !dbg !9120
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !9120
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !9120
  %call3 = call zeroext i8 @gimplify_stmt(%union.tree_node** %arrayidx, %struct.gimple_seq_d** %body_sequence), !dbg !9121
  %10 = load i32, i32* %old_conds, align 4, !dbg !9122
  %11 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !9123
  %conditions4 = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %11, i32 0, i32 8, !dbg !9124
  store i32 %10, i32* %conditions4, align 8, !dbg !9125
  %12 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %old_cleanups, align 8, !dbg !9126
  %13 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !9127
  %conditional_cleanups5 = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %13, i32 0, i32 3, !dbg !9128
  store %struct.gimple_seq_d* %12, %struct.gimple_seq_d** %conditional_cleanups5, align 8, !dbg !9129
  %14 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %body_sequence, align 8, !dbg !9130
  call void @gsi_start(%struct.gimple_stmt_iterator* sret %tmp, %struct.gimple_seq_d* %14), !dbg !9132
  %15 = bitcast %struct.gimple_stmt_iterator* %iter to i8*, !dbg !9132
  %16 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !9132
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %15, i8* align 8 %16, i64 24, i1 false), !dbg !9132
  br label %for.cond, !dbg !9133

for.cond:                                         ; preds = %if.end24, %entry
  %call6 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %iter), !dbg !9134
  %tobool = icmp ne i8 %call6, 0, !dbg !9136
  %lnot = xor i1 %tobool, true, !dbg !9136
  br i1 %lnot, label %for.body, label %for.end, !dbg !9137

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %wce, metadata !9138, metadata !DIExpression()), !dbg !9140
  %call7 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %iter), !dbg !9141
  store %union.gimple_statement_d* %call7, %union.gimple_statement_d** %wce, align 8, !dbg !9140
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %wce, align 8, !dbg !9142
  %call8 = call i32 @gimple_code(%union.gimple_statement_d* %17), !dbg !9144
  %cmp = icmp eq i32 %call8, 34, !dbg !9145
  br i1 %cmp, label %if.then, label %if.else23, !dbg !9146

if.then:                                          ; preds = %for.body
  %call9 = call zeroext i8 @gsi_one_before_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %iter), !dbg !9147
  %tobool10 = icmp ne i8 %call9, 0, !dbg !9147
  br i1 %tobool10, label %if.then11, label %if.else, !dbg !9150

if.then11:                                        ; preds = %if.then
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %wce, align 8, !dbg !9151
  %call12 = call %struct.gimple_seq_d* @gimple_wce_cleanup(%union.gimple_statement_d* %18), !dbg !9153
  call void @gsi_insert_seq_before_without_update(%struct.gimple_stmt_iterator* %iter, %struct.gimple_seq_d* %call12, i32 1), !dbg !9154
  call void @gsi_remove(%struct.gimple_stmt_iterator* %iter, i8 zeroext 1), !dbg !9155
  br label %for.end, !dbg !9156

if.else:                                          ; preds = %if.then
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gtry, metadata !9157, metadata !DIExpression()), !dbg !9159
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !9160, metadata !DIExpression()), !dbg !9161
  call void @llvm.dbg.declare(metadata i32* %kind, metadata !9162, metadata !DIExpression()), !dbg !9163
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %wce, align 8, !dbg !9164
  %call13 = call zeroext i8 @gimple_wce_cleanup_eh_only(%union.gimple_statement_d* %19), !dbg !9166
  %tobool14 = icmp ne i8 %call13, 0, !dbg !9166
  br i1 %tobool14, label %if.then15, label %if.else16, !dbg !9167

if.then15:                                        ; preds = %if.else
  store i32 1, i32* %kind, align 4, !dbg !9168
  br label %if.end, !dbg !9169

if.else16:                                        ; preds = %if.else
  store i32 2, i32* %kind, align 4, !dbg !9170
  br label %if.end

if.end:                                           ; preds = %if.else16, %if.then15
  %call17 = call %struct.gimple_seq_d* @gsi_split_seq_after(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %iter), !dbg !9171
  store %struct.gimple_seq_d* %call17, %struct.gimple_seq_d** %seq, align 8, !dbg !9172
  %20 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !9173
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %wce, align 8, !dbg !9174
  %call18 = call %struct.gimple_seq_d* @gimple_wce_cleanup(%union.gimple_statement_d* %21), !dbg !9175
  %22 = load i32, i32* %kind, align 4, !dbg !9176
  %call19 = call %union.gimple_statement_d* @gimple_build_try(%struct.gimple_seq_d* %20, %struct.gimple_seq_d* %call18, i32 %22), !dbg !9177
  store %union.gimple_statement_d* %call19, %union.gimple_statement_d** %gtry, align 8, !dbg !9178
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gtry, align 8, !dbg !9179
  %call20 = call %union.gimple_statement_d** @gsi_stmt_ptr(%struct.gimple_stmt_iterator* %iter), !dbg !9180
  store %union.gimple_statement_d* %23, %union.gimple_statement_d** %call20, align 8, !dbg !9181
  %24 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !9182
  call void @gsi_start(%struct.gimple_stmt_iterator* sret %tmp21, %struct.gimple_seq_d* %24), !dbg !9183
  %25 = bitcast %struct.gimple_stmt_iterator* %iter to i8*, !dbg !9183
  %26 = bitcast %struct.gimple_stmt_iterator* %tmp21 to i8*, !dbg !9183
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %25, i8* align 8 %26, i64 24, i1 false), !dbg !9183
  br label %if.end22

if.end22:                                         ; preds = %if.end
  br label %if.end24, !dbg !9184

if.else23:                                        ; preds = %for.body
  call void @gsi_next(%struct.gimple_stmt_iterator* %iter), !dbg !9185
  br label %if.end24

if.end24:                                         ; preds = %if.else23, %if.end22
  br label %for.cond, !dbg !9186, !llvm.loop !9187

for.end:                                          ; preds = %if.then11, %for.cond
  %27 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !9189
  %28 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %body_sequence, align 8, !dbg !9190
  call void @gimplify_seq_add_seq(%struct.gimple_seq_d** %27, %struct.gimple_seq_d* %28), !dbg !9191
  %29 = load %union.tree_node*, %union.tree_node** %temp, align 8, !dbg !9192
  %tobool25 = icmp ne %union.tree_node* %29, null, !dbg !9192
  br i1 %tobool25, label %if.then26, label %if.else27, !dbg !9194

if.then26:                                        ; preds = %for.end
  %30 = load %union.tree_node*, %union.tree_node** %temp, align 8, !dbg !9195
  %31 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !9197
  store %union.tree_node* %30, %union.tree_node** %31, align 8, !dbg !9198
  store i32 0, i32* %retval, align 4, !dbg !9199
  br label %return, !dbg !9199

if.else27:                                        ; preds = %for.end
  %32 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !9200
  store %union.tree_node* null, %union.tree_node** %32, align 8, !dbg !9202
  store i32 1, i32* %retval, align 4, !dbg !9203
  br label %return, !dbg !9203

return:                                           ; preds = %if.else27, %if.then26
  %33 = load i32, i32* %retval, align 4, !dbg !9204
  ret i32 %33, !dbg !9204
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimplify_target_expr(%union.tree_node** %expr_p, %struct.gimple_seq_d** %pre_p, %struct.gimple_seq_d** %post_p) #0 !dbg !9205 {
entry:
  %retval = alloca i32, align 4
  %expr_p.addr = alloca %union.tree_node**, align 8
  %pre_p.addr = alloca %struct.gimple_seq_d**, align 8
  %post_p.addr = alloca %struct.gimple_seq_d**, align 8
  %targ = alloca %union.tree_node*, align 8
  %temp = alloca %union.tree_node*, align 8
  %init = alloca %union.tree_node*, align 8
  %ret = alloca i32, align 4
  %init_expr = alloca %union.tree_node*, align 8
  store %union.tree_node** %expr_p, %union.tree_node*** %expr_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %expr_p.addr, metadata !9206, metadata !DIExpression()), !dbg !9207
  store %struct.gimple_seq_d** %pre_p, %struct.gimple_seq_d*** %pre_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %pre_p.addr, metadata !9208, metadata !DIExpression()), !dbg !9209
  store %struct.gimple_seq_d** %post_p, %struct.gimple_seq_d*** %post_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %post_p.addr, metadata !9210, metadata !DIExpression()), !dbg !9211
  call void @llvm.dbg.declare(metadata %union.tree_node** %targ, metadata !9212, metadata !DIExpression()), !dbg !9213
  %0 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !9214
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !9215
  store %union.tree_node* %1, %union.tree_node** %targ, align 8, !dbg !9213
  call void @llvm.dbg.declare(metadata %union.tree_node** %temp, metadata !9216, metadata !DIExpression()), !dbg !9217
  %2 = load %union.tree_node*, %union.tree_node** %targ, align 8, !dbg !9218
  %exp = bitcast %union.tree_node* %2 to %struct.tree_exp*, !dbg !9218
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !9218
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !9218
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !9218
  store %union.tree_node* %3, %union.tree_node** %temp, align 8, !dbg !9217
  call void @llvm.dbg.declare(metadata %union.tree_node** %init, metadata !9219, metadata !DIExpression()), !dbg !9220
  %4 = load %union.tree_node*, %union.tree_node** %targ, align 8, !dbg !9221
  %exp1 = bitcast %union.tree_node* %4 to %struct.tree_exp*, !dbg !9221
  %operands2 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 3, !dbg !9221
  %arrayidx3 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2, i64 0, i64 1, !dbg !9221
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx3, align 8, !dbg !9221
  store %union.tree_node* %5, %union.tree_node** %init, align 8, !dbg !9220
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !9222, metadata !DIExpression()), !dbg !9223
  %6 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !9224
  %tobool = icmp ne %union.tree_node* %6, null, !dbg !9224
  br i1 %tobool, label %if.then, label %if.else55, !dbg !9226

if.then:                                          ; preds = %entry
  %7 = load %union.tree_node*, %union.tree_node** %temp, align 8, !dbg !9227
  %decl_common = bitcast %union.tree_node* %7 to %struct.tree_decl_common*, !dbg !9227
  %size = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 1, !dbg !9227
  %8 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !9227
  %base = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !9227
  %9 = bitcast %struct.tree_base* %base to i64*, !dbg !9227
  %bf.load = load i64, i64* %9, align 8, !dbg !9227
  %bf.clear = and i64 %bf.load, 65535, !dbg !9227
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9227
  %cmp = icmp ne i32 %bf.cast, 23, !dbg !9230
  br i1 %cmp, label %if.then4, label %if.else, !dbg !9231

if.then4:                                         ; preds = %if.then
  %10 = load %union.tree_node*, %union.tree_node** %temp, align 8, !dbg !9232
  %common = bitcast %union.tree_node* %10 to %struct.tree_common*, !dbg !9232
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !9232
  %11 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9232
  %base5 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !9232
  %12 = bitcast %struct.tree_base* %base5 to i64*, !dbg !9232
  %bf.load6 = load i64, i64* %12, align 8, !dbg !9232
  %bf.lshr = lshr i64 %bf.load6, 17, !dbg !9232
  %bf.clear7 = and i64 %bf.lshr, 1, !dbg !9232
  %bf.cast8 = trunc i64 %bf.clear7 to i32, !dbg !9232
  %tobool9 = icmp ne i32 %bf.cast8, 0, !dbg !9232
  br i1 %tobool9, label %if.end, label %if.then10, !dbg !9235

if.then10:                                        ; preds = %if.then4
  %13 = load %union.tree_node*, %union.tree_node** %temp, align 8, !dbg !9236
  %common11 = bitcast %union.tree_node* %13 to %struct.tree_common*, !dbg !9236
  %type12 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common11, i32 0, i32 2, !dbg !9236
  %14 = load %union.tree_node*, %union.tree_node** %type12, align 8, !dbg !9236
  %15 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !9237
  call void @gimplify_type_sizes(%union.tree_node* %14, %struct.gimple_seq_d** %15), !dbg !9238
  br label %if.end, !dbg !9238

if.end:                                           ; preds = %if.then10, %if.then4
  %16 = load %union.tree_node*, %union.tree_node** %temp, align 8, !dbg !9239
  %17 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !9240
  call void @gimplify_vla_decl(%union.tree_node* %16, %struct.gimple_seq_d** %17), !dbg !9241
  br label %if.end13, !dbg !9242

if.else:                                          ; preds = %if.then
  %18 = load %union.tree_node*, %union.tree_node** %temp, align 8, !dbg !9243
  call void @gimple_add_tmp_var(%union.tree_node* %18), !dbg !9244
  br label %if.end13

if.end13:                                         ; preds = %if.else, %if.end
  %19 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !9245
  %common14 = bitcast %union.tree_node* %19 to %struct.tree_common*, !dbg !9245
  %type15 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common14, i32 0, i32 2, !dbg !9245
  %20 = load %union.tree_node*, %union.tree_node** %type15, align 8, !dbg !9245
  %base16 = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !9245
  %21 = bitcast %struct.tree_base* %base16 to i64*, !dbg !9245
  %bf.load17 = load i64, i64* %21, align 8, !dbg !9245
  %bf.clear18 = and i64 %bf.load17, 65535, !dbg !9245
  %bf.cast19 = trunc i64 %bf.clear18 to i32, !dbg !9245
  %cmp20 = icmp eq i32 %bf.cast19, 19, !dbg !9245
  br i1 %cmp20, label %if.then21, label %if.else22, !dbg !9247

if.then21:                                        ; preds = %if.end13
  %22 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !9248
  %23 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !9249
  %call = call i32 @gimplify_expr(%union.tree_node** %init, %struct.gimple_seq_d** %22, %struct.gimple_seq_d** %23, i8 (%union.tree_node*)* @is_gimple_stmt, i32 0), !dbg !9250
  store i32 %call, i32* %ret, align 4, !dbg !9251
  br label %if.end25, !dbg !9252

if.else22:                                        ; preds = %if.end13
  call void @llvm.dbg.declare(metadata %union.tree_node** %init_expr, metadata !9253, metadata !DIExpression()), !dbg !9255
  %24 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !9256
  %25 = load %union.tree_node*, %union.tree_node** %temp, align 8, !dbg !9256
  %26 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !9256
  %call23 = call %union.tree_node* @build2_stat(i32 54, %union.tree_node* %24, %union.tree_node* %25, %union.tree_node* %26), !dbg !9256
  store %union.tree_node* %call23, %union.tree_node** %init_expr, align 8, !dbg !9255
  %27 = load %union.tree_node*, %union.tree_node** %init_expr, align 8, !dbg !9257
  store %union.tree_node* %27, %union.tree_node** %init, align 8, !dbg !9258
  %28 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !9259
  %29 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !9260
  %call24 = call i32 @gimplify_expr(%union.tree_node** %init, %struct.gimple_seq_d** %28, %struct.gimple_seq_d** %29, i8 (%union.tree_node*)* @is_gimple_stmt, i32 0), !dbg !9261
  store i32 %call24, i32* %ret, align 4, !dbg !9262
  store %union.tree_node* null, %union.tree_node** %init, align 8, !dbg !9263
  %30 = load %union.tree_node*, %union.tree_node** %init_expr, align 8, !dbg !9264
  %31 = bitcast %union.tree_node* %30 to i8*, !dbg !9264
  call void @ggc_free(i8* %31), !dbg !9265
  br label %if.end25

if.end25:                                         ; preds = %if.else22, %if.then21
  %32 = load i32, i32* %ret, align 4, !dbg !9266
  %cmp26 = icmp eq i32 %32, -2, !dbg !9268
  br i1 %cmp26, label %if.then27, label %if.end31, !dbg !9269

if.then27:                                        ; preds = %if.end25
  %33 = load %union.tree_node*, %union.tree_node** %targ, align 8, !dbg !9270
  %exp28 = bitcast %union.tree_node* %33 to %struct.tree_exp*, !dbg !9270
  %operands29 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp28, i32 0, i32 3, !dbg !9270
  %arrayidx30 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands29, i64 0, i64 1, !dbg !9270
  store %union.tree_node* null, %union.tree_node** %arrayidx30, align 8, !dbg !9272
  store i32 -2, i32* %retval, align 4, !dbg !9273
  br label %return, !dbg !9273

if.end31:                                         ; preds = %if.end25
  %34 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !9274
  %tobool32 = icmp ne %union.tree_node* %34, null, !dbg !9274
  br i1 %tobool32, label %if.then33, label %if.end34, !dbg !9276

if.then33:                                        ; preds = %if.end31
  %35 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !9277
  %36 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !9278
  call void @gimplify_and_add(%union.tree_node* %35, %struct.gimple_seq_d** %36), !dbg !9279
  br label %if.end34, !dbg !9279

if.end34:                                         ; preds = %if.then33, %if.end31
  %37 = load %union.tree_node*, %union.tree_node** %targ, align 8, !dbg !9280
  %exp35 = bitcast %union.tree_node* %37 to %struct.tree_exp*, !dbg !9280
  %operands36 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp35, i32 0, i32 3, !dbg !9280
  %arrayidx37 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands36, i64 0, i64 2, !dbg !9280
  %38 = load %union.tree_node*, %union.tree_node** %arrayidx37, align 8, !dbg !9280
  %tobool38 = icmp ne %union.tree_node* %38, null, !dbg !9280
  br i1 %tobool38, label %if.then39, label %if.end48, !dbg !9282

if.then39:                                        ; preds = %if.end34
  %39 = load %union.tree_node*, %union.tree_node** %temp, align 8, !dbg !9283
  %40 = load %union.tree_node*, %union.tree_node** %targ, align 8, !dbg !9284
  %exp40 = bitcast %union.tree_node* %40 to %struct.tree_exp*, !dbg !9284
  %operands41 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp40, i32 0, i32 3, !dbg !9284
  %arrayidx42 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands41, i64 0, i64 2, !dbg !9284
  %41 = load %union.tree_node*, %union.tree_node** %arrayidx42, align 8, !dbg !9284
  %42 = load %union.tree_node*, %union.tree_node** %targ, align 8, !dbg !9285
  %base43 = bitcast %union.tree_node* %42 to %struct.tree_base*, !dbg !9285
  %43 = bitcast %struct.tree_base* %base43 to i64*, !dbg !9285
  %bf.load44 = load i64, i64* %43, align 8, !dbg !9285
  %bf.lshr45 = lshr i64 %bf.load44, 26, !dbg !9285
  %bf.clear46 = and i64 %bf.lshr45, 1, !dbg !9285
  %bf.cast47 = trunc i64 %bf.clear46 to i32, !dbg !9285
  %conv = trunc i32 %bf.cast47 to i8, !dbg !9285
  %44 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !9286
  call void @gimple_push_cleanup(%union.tree_node* %39, %union.tree_node* %41, i8 zeroext %conv, %struct.gimple_seq_d** %44), !dbg !9287
  br label %if.end48, !dbg !9287

if.end48:                                         ; preds = %if.then39, %if.end34
  %45 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !9288
  %46 = load %union.tree_node*, %union.tree_node** %targ, align 8, !dbg !9289
  %exp49 = bitcast %union.tree_node* %46 to %struct.tree_exp*, !dbg !9289
  %operands50 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp49, i32 0, i32 3, !dbg !9289
  %arrayidx51 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands50, i64 0, i64 3, !dbg !9289
  store %union.tree_node* %45, %union.tree_node** %arrayidx51, align 8, !dbg !9290
  %47 = load %union.tree_node*, %union.tree_node** %targ, align 8, !dbg !9291
  %exp52 = bitcast %union.tree_node* %47 to %struct.tree_exp*, !dbg !9291
  %operands53 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp52, i32 0, i32 3, !dbg !9291
  %arrayidx54 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands53, i64 0, i64 1, !dbg !9291
  store %union.tree_node* null, %union.tree_node** %arrayidx54, align 8, !dbg !9292
  br label %if.end60, !dbg !9293

if.else55:                                        ; preds = %entry
  %48 = load %union.tree_node*, %union.tree_node** %temp, align 8, !dbg !9294
  %decl_with_vis = bitcast %union.tree_node* %48 to %struct.tree_decl_with_vis*, !dbg !9294
  %seen_in_bind_expr = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 4, !dbg !9294
  %49 = bitcast i24* %seen_in_bind_expr to i32*, !dbg !9294
  %bf.load56 = load i32, i32* %49, align 8, !dbg !9294
  %bf.lshr57 = lshr i32 %bf.load56, 8, !dbg !9294
  %bf.clear58 = and i32 %bf.lshr57, 1, !dbg !9294
  %tobool59 = icmp ne i32 %bf.clear58, 0, !dbg !9294
  br i1 %tobool59, label %cond.false, label %cond.true, !dbg !9294

cond.true:                                        ; preds = %if.else55
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 5246, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9294
  br label %cond.end, !dbg !9294

cond.false:                                       ; preds = %if.else55
  br label %cond.end, !dbg !9294

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9294
  br label %if.end60

if.end60:                                         ; preds = %cond.end, %if.end48
  %50 = load %union.tree_node*, %union.tree_node** %temp, align 8, !dbg !9295
  %51 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !9296
  store %union.tree_node* %50, %union.tree_node** %51, align 8, !dbg !9297
  store i32 0, i32* %retval, align 4, !dbg !9298
  br label %return, !dbg !9298

return:                                           ; preds = %if.end60, %if.then27
  %52 = load i32, i32* %retval, align 4, !dbg !9299
  ret i32 %52, !dbg !9299
}

declare dso_local %union.gimple_statement_d* @gimple_build_catch(%union.tree_node*, %struct.gimple_seq_d*) #3

declare dso_local %union.gimple_statement_d* @gimple_build_eh_filter(%union.tree_node*, %struct.gimple_seq_d*) #3

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_no_warning(%union.gimple_statement_d* %stmt, i8 zeroext %no_warning) #0 !dbg !9300 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %no_warning.addr = alloca i8, align 1
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !9301, metadata !DIExpression()), !dbg !9302
  store i8 %no_warning, i8* %no_warning.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %no_warning.addr, metadata !9303, metadata !DIExpression()), !dbg !9304
  %0 = load i8, i8* %no_warning.addr, align 1, !dbg !9305
  %conv = zext i8 %0 to i32, !dbg !9306
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9307
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !9308
  %2 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !9309
  %bf.load = load i32, i32* %2, align 8, !dbg !9310
  %bf.value = and i32 %conv, 1, !dbg !9310
  %bf.shl = shl i32 %bf.value, 8, !dbg !9310
  %bf.clear = and i32 %bf.load, -257, !dbg !9310
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !9310
  store i32 %bf.set, i32* %2, align 8, !dbg !9310
  ret void, !dbg !9311
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimplify_statement_list(%union.tree_node** %expr_p, %struct.gimple_seq_d** %pre_p) #0 !dbg !9312 {
entry:
  %retval = alloca i32, align 4
  %expr_p.addr = alloca %union.tree_node**, align 8
  %pre_p.addr = alloca %struct.gimple_seq_d**, align 8
  %temp = alloca %union.tree_node*, align 8
  %i = alloca %struct.tree_stmt_iterator, align 8
  store %union.tree_node** %expr_p, %union.tree_node*** %expr_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %expr_p.addr, metadata !9313, metadata !DIExpression()), !dbg !9314
  store %struct.gimple_seq_d** %pre_p, %struct.gimple_seq_d*** %pre_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %pre_p.addr, metadata !9315, metadata !DIExpression()), !dbg !9316
  call void @llvm.dbg.declare(metadata %union.tree_node** %temp, metadata !9317, metadata !DIExpression()), !dbg !9318
  %0 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !9319
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !9320
  %call = call %union.tree_node* @voidify_wrapper_expr(%union.tree_node* %1, %union.tree_node* null), !dbg !9321
  store %union.tree_node* %call, %union.tree_node** %temp, align 8, !dbg !9318
  call void @llvm.dbg.declare(metadata %struct.tree_stmt_iterator* %i, metadata !9322, metadata !DIExpression()), !dbg !9323
  %2 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !9324
  %3 = load %union.tree_node*, %union.tree_node** %2, align 8, !dbg !9325
  %call1 = call { %struct.tree_statement_list_node*, %union.tree_node* } @tsi_start(%union.tree_node* %3), !dbg !9326
  %4 = bitcast %struct.tree_stmt_iterator* %i to { %struct.tree_statement_list_node*, %union.tree_node* }*, !dbg !9326
  %5 = getelementptr inbounds { %struct.tree_statement_list_node*, %union.tree_node* }, { %struct.tree_statement_list_node*, %union.tree_node* }* %4, i32 0, i32 0, !dbg !9326
  %6 = extractvalue { %struct.tree_statement_list_node*, %union.tree_node* } %call1, 0, !dbg !9326
  store %struct.tree_statement_list_node* %6, %struct.tree_statement_list_node** %5, align 8, !dbg !9326
  %7 = getelementptr inbounds { %struct.tree_statement_list_node*, %union.tree_node* }, { %struct.tree_statement_list_node*, %union.tree_node* }* %4, i32 0, i32 1, !dbg !9326
  %8 = extractvalue { %struct.tree_statement_list_node*, %union.tree_node* } %call1, 1, !dbg !9326
  store %union.tree_node* %8, %union.tree_node** %7, align 8, !dbg !9326
  br label %while.cond, !dbg !9327

while.cond:                                       ; preds = %while.body, %entry
  %9 = bitcast %struct.tree_stmt_iterator* %i to { %struct.tree_statement_list_node*, %union.tree_node* }*, !dbg !9328
  %10 = getelementptr inbounds { %struct.tree_statement_list_node*, %union.tree_node* }, { %struct.tree_statement_list_node*, %union.tree_node* }* %9, i32 0, i32 0, !dbg !9328
  %11 = load %struct.tree_statement_list_node*, %struct.tree_statement_list_node** %10, align 8, !dbg !9328
  %12 = getelementptr inbounds { %struct.tree_statement_list_node*, %union.tree_node* }, { %struct.tree_statement_list_node*, %union.tree_node* }* %9, i32 0, i32 1, !dbg !9328
  %13 = load %union.tree_node*, %union.tree_node** %12, align 8, !dbg !9328
  %call2 = call zeroext i8 @tsi_end_p(%struct.tree_statement_list_node* %11, %union.tree_node* %13), !dbg !9328
  %tobool = icmp ne i8 %call2, 0, !dbg !9329
  %lnot = xor i1 %tobool, true, !dbg !9329
  br i1 %lnot, label %while.body, label %while.end, !dbg !9327

while.body:                                       ; preds = %while.cond
  %14 = bitcast %struct.tree_stmt_iterator* %i to { %struct.tree_statement_list_node*, %union.tree_node* }*, !dbg !9330
  %15 = getelementptr inbounds { %struct.tree_statement_list_node*, %union.tree_node* }, { %struct.tree_statement_list_node*, %union.tree_node* }* %14, i32 0, i32 0, !dbg !9330
  %16 = load %struct.tree_statement_list_node*, %struct.tree_statement_list_node** %15, align 8, !dbg !9330
  %17 = getelementptr inbounds { %struct.tree_statement_list_node*, %union.tree_node* }, { %struct.tree_statement_list_node*, %union.tree_node* }* %14, i32 0, i32 1, !dbg !9330
  %18 = load %union.tree_node*, %union.tree_node** %17, align 8, !dbg !9330
  %call3 = call %union.tree_node** @tsi_stmt_ptr(%struct.tree_statement_list_node* %16, %union.tree_node* %18), !dbg !9330
  %19 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !9332
  %call4 = call zeroext i8 @gimplify_stmt(%union.tree_node** %call3, %struct.gimple_seq_d** %19), !dbg !9333
  call void @tsi_delink(%struct.tree_stmt_iterator* %i), !dbg !9334
  br label %while.cond, !dbg !9327, !llvm.loop !9335

while.end:                                        ; preds = %while.cond
  %20 = load %union.tree_node*, %union.tree_node** %temp, align 8, !dbg !9337
  %tobool5 = icmp ne %union.tree_node* %20, null, !dbg !9337
  br i1 %tobool5, label %if.then, label %if.end, !dbg !9339

if.then:                                          ; preds = %while.end
  %21 = load %union.tree_node*, %union.tree_node** %temp, align 8, !dbg !9340
  %22 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !9342
  store %union.tree_node* %21, %union.tree_node** %22, align 8, !dbg !9343
  store i32 0, i32* %retval, align 4, !dbg !9344
  br label %return, !dbg !9344

if.end:                                           ; preds = %while.end
  store i32 1, i32* %retval, align 4, !dbg !9345
  br label %return, !dbg !9345

return:                                           ; preds = %if.end, %if.then
  %23 = load i32, i32* %retval, align 4, !dbg !9346
  ret i32 %23, !dbg !9346
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimplify_var_or_parm_decl(%union.tree_node** %expr_p) #0 !dbg !9347 {
entry:
  %retval = alloca i32, align 4
  %expr_p.addr = alloca %union.tree_node**, align 8
  %decl = alloca %union.tree_node*, align 8
  %value_expr = alloca %union.tree_node*, align 8
  %ctx = alloca %struct.gimplify_omp_ctx*, align 8
  %copy = alloca %union.tree_node*, align 8
  %block = alloca %union.tree_node*, align 8
  store %union.tree_node** %expr_p, %union.tree_node*** %expr_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %expr_p.addr, metadata !9348, metadata !DIExpression()), !dbg !9349
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !9350, metadata !DIExpression()), !dbg !9351
  %0 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !9352
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !9353
  store %union.tree_node* %1, %union.tree_node** %decl, align 8, !dbg !9351
  %2 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !9354
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !9354
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !9354
  %bf.load = load i64, i64* %3, align 8, !dbg !9354
  %bf.clear = and i64 %bf.load, 65535, !dbg !9354
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9354
  %cmp = icmp eq i32 %bf.cast, 32, !dbg !9356
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !9357

land.lhs.true:                                    ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !9358
  %decl_with_vis = bitcast %union.tree_node* %4 to %struct.tree_decl_with_vis*, !dbg !9358
  %seen_in_bind_expr = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 4, !dbg !9358
  %5 = bitcast i24* %seen_in_bind_expr to i32*, !dbg !9358
  %bf.load1 = load i32, i32* %5, align 8, !dbg !9358
  %bf.lshr = lshr i32 %bf.load1, 8, !dbg !9358
  %bf.clear2 = and i32 %bf.lshr, 1, !dbg !9358
  %tobool = icmp ne i32 %bf.clear2, 0, !dbg !9358
  br i1 %tobool, label %if.end, label %land.lhs.true3, !dbg !9359

land.lhs.true3:                                   ; preds = %land.lhs.true
  %6 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !9360
  %base4 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !9360
  %7 = bitcast %struct.tree_base* %base4 to i64*, !dbg !9360
  %bf.load5 = load i64, i64* %7, align 8, !dbg !9360
  %bf.lshr6 = lshr i64 %bf.load5, 26, !dbg !9360
  %bf.clear7 = and i64 %bf.lshr6, 1, !dbg !9360
  %bf.cast8 = trunc i64 %bf.clear7 to i32, !dbg !9360
  %tobool9 = icmp ne i32 %bf.cast8, 0, !dbg !9360
  br i1 %tobool9, label %if.end, label %land.lhs.true10, !dbg !9361

land.lhs.true10:                                  ; preds = %land.lhs.true3
  %8 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !9362
  %decl_common = bitcast %union.tree_node* %8 to %struct.tree_decl_common*, !dbg !9362
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !9362
  %9 = bitcast i40* %decl_flag_1 to i64*, !dbg !9362
  %bf.load11 = load i64, i64* %9, align 8, !dbg !9362
  %bf.lshr12 = lshr i64 %bf.load11, 25, !dbg !9362
  %bf.clear13 = and i64 %bf.lshr12, 1, !dbg !9362
  %bf.cast14 = trunc i64 %bf.clear13 to i32, !dbg !9362
  %tobool15 = icmp ne i32 %bf.cast14, 0, !dbg !9362
  br i1 %tobool15, label %if.end, label %land.lhs.true16, !dbg !9363

land.lhs.true16:                                  ; preds = %land.lhs.true10
  %10 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !9364
  %call = call %union.tree_node* @decl_function_context(%union.tree_node* %10), !dbg !9365
  %11 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !9366
  %cmp17 = icmp eq %union.tree_node* %call, %11, !dbg !9367
  br i1 %cmp17, label %if.then, label %if.end, !dbg !9368

if.then:                                          ; preds = %land.lhs.true16
  %12 = load %struct.diagnostic_context*, %struct.diagnostic_context** @global_dc, align 8, !dbg !9369
  %diagnostic_count = getelementptr inbounds %struct.diagnostic_context, %struct.diagnostic_context* %12, i32 0, i32 1, !dbg !9369
  %arrayidx = getelementptr inbounds [12 x i32], [12 x i32]* %diagnostic_count, i64 0, i64 4, !dbg !9369
  %13 = load i32, i32* %arrayidx, align 8, !dbg !9369
  %tobool18 = icmp ne i32 %13, 0, !dbg !9369
  br i1 %tobool18, label %cond.false, label %lor.lhs.false, !dbg !9369

lor.lhs.false:                                    ; preds = %if.then
  %14 = load %struct.diagnostic_context*, %struct.diagnostic_context** @global_dc, align 8, !dbg !9369
  %diagnostic_count19 = getelementptr inbounds %struct.diagnostic_context, %struct.diagnostic_context* %14, i32 0, i32 1, !dbg !9369
  %arrayidx20 = getelementptr inbounds [12 x i32], [12 x i32]* %diagnostic_count19, i64 0, i64 5, !dbg !9369
  %15 = load i32, i32* %arrayidx20, align 4, !dbg !9369
  %tobool21 = icmp ne i32 %15, 0, !dbg !9369
  br i1 %tobool21, label %cond.false, label %cond.true, !dbg !9369

cond.true:                                        ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 1820, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9369
  br label %cond.end, !dbg !9369

cond.false:                                       ; preds = %lor.lhs.false, %if.then
  br label %cond.end, !dbg !9369

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9369
  store i32 -2, i32* %retval, align 4, !dbg !9371
  br label %return, !dbg !9371

if.end:                                           ; preds = %land.lhs.true16, %land.lhs.true10, %land.lhs.true3, %land.lhs.true, %entry
  %16 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** @gimplify_omp_ctxp, align 8, !dbg !9372
  %tobool22 = icmp ne %struct.gimplify_omp_ctx* %16, null, !dbg !9372
  br i1 %tobool22, label %land.lhs.true23, label %if.end27, !dbg !9374

land.lhs.true23:                                  ; preds = %if.end
  %17 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** @gimplify_omp_ctxp, align 8, !dbg !9375
  %18 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !9376
  %call24 = call zeroext i8 @omp_notice_variable(%struct.gimplify_omp_ctx* %17, %union.tree_node* %18, i8 zeroext 1), !dbg !9377
  %conv = zext i8 %call24 to i32, !dbg !9377
  %tobool25 = icmp ne i32 %conv, 0, !dbg !9377
  br i1 %tobool25, label %if.then26, label %if.end27, !dbg !9378

if.then26:                                        ; preds = %land.lhs.true23
  store i32 1, i32* %retval, align 4, !dbg !9379
  br label %return, !dbg !9379

if.end27:                                         ; preds = %land.lhs.true23, %if.end
  %19 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !9380
  %decl_common28 = bitcast %union.tree_node* %19 to %struct.tree_decl_common*, !dbg !9380
  %decl_flag_2 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common28, i32 0, i32 2, !dbg !9380
  %20 = bitcast i40* %decl_flag_2 to i64*, !dbg !9380
  %bf.load29 = load i64, i64* %20, align 8, !dbg !9380
  %bf.lshr30 = lshr i64 %bf.load29, 26, !dbg !9380
  %bf.clear31 = and i64 %bf.lshr30, 1, !dbg !9380
  %bf.cast32 = trunc i64 %bf.clear31 to i32, !dbg !9380
  %tobool33 = icmp ne i32 %bf.cast32, 0, !dbg !9380
  br i1 %tobool33, label %if.then34, label %if.end98, !dbg !9382

if.then34:                                        ; preds = %if.end27
  call void @llvm.dbg.declare(metadata %union.tree_node** %value_expr, metadata !9383, metadata !DIExpression()), !dbg !9385
  %21 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !9386
  %call35 = call %union.tree_node* @decl_value_expr_lookup(%union.tree_node* %21), !dbg !9386
  store %union.tree_node* %call35, %union.tree_node** %value_expr, align 8, !dbg !9385
  %22 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !9387
  %base36 = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !9387
  %23 = bitcast %struct.tree_base* %base36 to i64*, !dbg !9387
  %bf.load37 = load i64, i64* %23, align 8, !dbg !9387
  %bf.clear38 = and i64 %bf.load37, 65535, !dbg !9387
  %bf.cast39 = trunc i64 %bf.clear38 to i32, !dbg !9387
  %cmp40 = icmp eq i32 %bf.cast39, 32, !dbg !9389
  br i1 %cmp40, label %land.lhs.true42, label %if.end96, !dbg !9390

land.lhs.true42:                                  ; preds = %if.then34
  %24 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !9391
  %decl_common43 = bitcast %union.tree_node* %24 to %struct.tree_decl_common*, !dbg !9391
  %size_unit = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common43, i32 0, i32 4, !dbg !9391
  %25 = load %union.tree_node*, %union.tree_node** %size_unit, align 8, !dbg !9391
  %base44 = bitcast %union.tree_node* %25 to %struct.tree_base*, !dbg !9391
  %26 = bitcast %struct.tree_base* %base44 to i64*, !dbg !9391
  %bf.load45 = load i64, i64* %26, align 8, !dbg !9391
  %bf.clear46 = and i64 %bf.load45, 65535, !dbg !9391
  %bf.cast47 = trunc i64 %bf.clear46 to i32, !dbg !9391
  %cmp48 = icmp ne i32 %bf.cast47, 23, !dbg !9392
  br i1 %cmp48, label %land.lhs.true50, label %if.end96, !dbg !9393

land.lhs.true50:                                  ; preds = %land.lhs.true42
  %27 = load %struct.pointer_set_t*, %struct.pointer_set_t** @nonlocal_vlas, align 8, !dbg !9394
  %cmp51 = icmp ne %struct.pointer_set_t* %27, null, !dbg !9395
  br i1 %cmp51, label %land.lhs.true53, label %if.end96, !dbg !9396

land.lhs.true53:                                  ; preds = %land.lhs.true50
  %28 = load %union.tree_node*, %union.tree_node** %value_expr, align 8, !dbg !9397
  %base54 = bitcast %union.tree_node* %28 to %struct.tree_base*, !dbg !9397
  %29 = bitcast %struct.tree_base* %base54 to i64*, !dbg !9397
  %bf.load55 = load i64, i64* %29, align 8, !dbg !9397
  %bf.clear56 = and i64 %bf.load55, 65535, !dbg !9397
  %bf.cast57 = trunc i64 %bf.clear56 to i32, !dbg !9397
  %cmp58 = icmp eq i32 %bf.cast57, 47, !dbg !9398
  br i1 %cmp58, label %land.lhs.true60, label %if.end96, !dbg !9399

land.lhs.true60:                                  ; preds = %land.lhs.true53
  %30 = load %union.tree_node*, %union.tree_node** %value_expr, align 8, !dbg !9400
  %exp = bitcast %union.tree_node* %30 to %struct.tree_exp*, !dbg !9400
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !9400
  %arrayidx61 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !9400
  %31 = load %union.tree_node*, %union.tree_node** %arrayidx61, align 8, !dbg !9400
  %base62 = bitcast %union.tree_node* %31 to %struct.tree_base*, !dbg !9400
  %32 = bitcast %struct.tree_base* %base62 to i64*, !dbg !9400
  %bf.load63 = load i64, i64* %32, align 8, !dbg !9400
  %bf.clear64 = and i64 %bf.load63, 65535, !dbg !9400
  %bf.cast65 = trunc i64 %bf.clear64 to i32, !dbg !9400
  %cmp66 = icmp eq i32 %bf.cast65, 32, !dbg !9401
  br i1 %cmp66, label %land.lhs.true68, label %if.end96, !dbg !9402

land.lhs.true68:                                  ; preds = %land.lhs.true60
  %33 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !9403
  %call69 = call %union.tree_node* @decl_function_context(%union.tree_node* %33), !dbg !9404
  %34 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !9405
  %cmp70 = icmp ne %union.tree_node* %call69, %34, !dbg !9406
  br i1 %cmp70, label %if.then72, label %if.end96, !dbg !9407

if.then72:                                        ; preds = %land.lhs.true68
  call void @llvm.dbg.declare(metadata %struct.gimplify_omp_ctx** %ctx, metadata !9408, metadata !DIExpression()), !dbg !9410
  %35 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** @gimplify_omp_ctxp, align 8, !dbg !9411
  store %struct.gimplify_omp_ctx* %35, %struct.gimplify_omp_ctx** %ctx, align 8, !dbg !9410
  br label %while.cond, !dbg !9412

while.cond:                                       ; preds = %while.body, %if.then72
  %36 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx, align 8, !dbg !9413
  %tobool73 = icmp ne %struct.gimplify_omp_ctx* %36, null, !dbg !9413
  br i1 %tobool73, label %land.rhs, label %land.end, !dbg !9414

land.rhs:                                         ; preds = %while.cond
  %37 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx, align 8, !dbg !9415
  %region_type = getelementptr inbounds %struct.gimplify_omp_ctx, %struct.gimplify_omp_ctx* %37, i32 0, i32 5, !dbg !9416
  %38 = load i32, i32* %region_type, align 8, !dbg !9416
  %cmp74 = icmp eq i32 %38, 0, !dbg !9417
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %39 = phi i1 [ false, %while.cond ], [ %cmp74, %land.rhs ], !dbg !9418
  br i1 %39, label %while.body, label %while.end, !dbg !9412

while.body:                                       ; preds = %land.end
  %40 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx, align 8, !dbg !9419
  %outer_context = getelementptr inbounds %struct.gimplify_omp_ctx, %struct.gimplify_omp_ctx* %40, i32 0, i32 0, !dbg !9420
  %41 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %outer_context, align 8, !dbg !9420
  store %struct.gimplify_omp_ctx* %41, %struct.gimplify_omp_ctx** %ctx, align 8, !dbg !9421
  br label %while.cond, !dbg !9412, !llvm.loop !9422

while.end:                                        ; preds = %land.end
  %42 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx, align 8, !dbg !9423
  %tobool76 = icmp ne %struct.gimplify_omp_ctx* %42, null, !dbg !9423
  br i1 %tobool76, label %if.end95, label %land.lhs.true77, !dbg !9425

land.lhs.true77:                                  ; preds = %while.end
  %43 = load %struct.pointer_set_t*, %struct.pointer_set_t** @nonlocal_vlas, align 8, !dbg !9426
  %44 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !9427
  %45 = bitcast %union.tree_node* %44 to i8*, !dbg !9427
  %call78 = call i32 @pointer_set_insert(%struct.pointer_set_t* %43, i8* %45), !dbg !9428
  %tobool79 = icmp ne i32 %call78, 0, !dbg !9428
  br i1 %tobool79, label %if.end95, label %if.then80, !dbg !9429

if.then80:                                        ; preds = %land.lhs.true77
  call void @llvm.dbg.declare(metadata %union.tree_node** %copy, metadata !9430, metadata !DIExpression()), !dbg !9432
  %46 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !9433
  %call81 = call %union.tree_node* @copy_node_stat(%union.tree_node* %46), !dbg !9433
  store %union.tree_node* %call81, %union.tree_node** %copy, align 8, !dbg !9432
  call void @llvm.dbg.declare(metadata %union.tree_node** %block, metadata !9434, metadata !DIExpression()), !dbg !9435
  %47 = load void (%union.tree_node*)*, void (%union.tree_node*)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 15), align 8, !dbg !9436
  %48 = load %union.tree_node*, %union.tree_node** %copy, align 8, !dbg !9437
  call void %47(%union.tree_node* %48), !dbg !9438
  %49 = load %union.tree_node*, %union.tree_node** %copy, align 8, !dbg !9439
  call void @set_decl_rtl(%union.tree_node* %49, %struct.rtx_def* null), !dbg !9439
  %50 = load %union.tree_node*, %union.tree_node** %copy, align 8, !dbg !9440
  %base82 = bitcast %union.tree_node* %50 to %struct.tree_base*, !dbg !9440
  %51 = bitcast %struct.tree_base* %base82 to i64*, !dbg !9440
  %bf.load83 = load i64, i64* %51, align 8, !dbg !9441
  %bf.clear84 = and i64 %bf.load83, -16777217, !dbg !9441
  %bf.set = or i64 %bf.clear84, 16777216, !dbg !9441
  store i64 %bf.set, i64* %51, align 8, !dbg !9441
  %52 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !9442
  %decl_common85 = bitcast %union.tree_node* %52 to %struct.tree_decl_common*, !dbg !9442
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common85, i32 0, i32 5, !dbg !9442
  %53 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !9442
  store %union.tree_node* %53, %union.tree_node** %block, align 8, !dbg !9443
  %54 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !9444
  %block86 = bitcast %union.tree_node* %54 to %struct.tree_block*, !dbg !9444
  %vars = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block86, i32 0, i32 3, !dbg !9444
  %55 = load %union.tree_node*, %union.tree_node** %vars, align 8, !dbg !9444
  %56 = load %union.tree_node*, %union.tree_node** %copy, align 8, !dbg !9445
  %common = bitcast %union.tree_node* %56 to %struct.tree_common*, !dbg !9445
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !9445
  store %union.tree_node* %55, %union.tree_node** %chain, align 8, !dbg !9446
  %57 = load %union.tree_node*, %union.tree_node** %copy, align 8, !dbg !9447
  %58 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !9448
  %block87 = bitcast %union.tree_node* %58 to %struct.tree_block*, !dbg !9448
  %vars88 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block87, i32 0, i32 3, !dbg !9448
  store %union.tree_node* %57, %union.tree_node** %vars88, align 8, !dbg !9449
  %59 = load %union.tree_node*, %union.tree_node** %copy, align 8, !dbg !9450
  %60 = load %union.tree_node*, %union.tree_node** %value_expr, align 8, !dbg !9450
  %call89 = call %union.tree_node* @unshare_expr(%union.tree_node* %60), !dbg !9450
  call void @decl_value_expr_insert(%union.tree_node* %59, %union.tree_node* %call89), !dbg !9450
  %61 = load %union.tree_node*, %union.tree_node** %copy, align 8, !dbg !9451
  %decl_common90 = bitcast %union.tree_node* %61 to %struct.tree_decl_common*, !dbg !9451
  %decl_flag_291 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common90, i32 0, i32 2, !dbg !9451
  %62 = bitcast i40* %decl_flag_291 to i64*, !dbg !9451
  %bf.load92 = load i64, i64* %62, align 8, !dbg !9452
  %bf.clear93 = and i64 %bf.load92, -67108865, !dbg !9452
  %bf.set94 = or i64 %bf.clear93, 67108864, !dbg !9452
  store i64 %bf.set94, i64* %62, align 8, !dbg !9452
  br label %if.end95, !dbg !9453

if.end95:                                         ; preds = %if.then80, %land.lhs.true77, %while.end
  br label %if.end96, !dbg !9454

if.end96:                                         ; preds = %if.end95, %land.lhs.true68, %land.lhs.true60, %land.lhs.true53, %land.lhs.true50, %land.lhs.true42, %if.then34
  %63 = load %union.tree_node*, %union.tree_node** %value_expr, align 8, !dbg !9455
  %call97 = call %union.tree_node* @unshare_expr(%union.tree_node* %63), !dbg !9456
  %64 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !9457
  store %union.tree_node* %call97, %union.tree_node** %64, align 8, !dbg !9458
  store i32 0, i32* %retval, align 4, !dbg !9459
  br label %return, !dbg !9459

if.end98:                                         ; preds = %if.end27
  store i32 1, i32* %retval, align 4, !dbg !9460
  br label %return, !dbg !9460

return:                                           ; preds = %if.end98, %if.end96, %if.then26, %cond.end
  %65 = load i32, i32* %retval, align 4, !dbg !9461
  ret i32 %65, !dbg !9461
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @omp_notice_variable(%struct.gimplify_omp_ctx* %ctx, %union.tree_node* %decl, i8 zeroext %in_code) #0 !dbg !9462 {
entry:
  %retval = alloca i8, align 1
  %ctx.addr = alloca %struct.gimplify_omp_ctx*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  %in_code.addr = alloca i8, align 1
  %n = alloca %struct.splay_tree_node_s*, align 8
  %flags = alloca i32, align 4
  %ret = alloca i8, align 1
  %shared = alloca i8, align 1
  %value = alloca %union.tree_node*, align 8
  %default_kind = alloca i32, align 4
  %kind = alloca i32, align 4
  %octx = alloca %struct.gimplify_omp_ctx*, align 8
  %n2 = alloca %struct.splay_tree_node_s*, align 8
  %n2143 = alloca %struct.splay_tree_node_s*, align 8
  %t = alloca %union.tree_node*, align 8
  store %struct.gimplify_omp_ctx* %ctx, %struct.gimplify_omp_ctx** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimplify_omp_ctx** %ctx.addr, metadata !9465, metadata !DIExpression()), !dbg !9466
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !9467, metadata !DIExpression()), !dbg !9468
  store i8 %in_code, i8* %in_code.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %in_code.addr, metadata !9469, metadata !DIExpression()), !dbg !9470
  call void @llvm.dbg.declare(metadata %struct.splay_tree_node_s** %n, metadata !9471, metadata !DIExpression()), !dbg !9472
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !9473, metadata !DIExpression()), !dbg !9474
  %0 = load i8, i8* %in_code.addr, align 1, !dbg !9475
  %conv = zext i8 %0 to i32, !dbg !9475
  %tobool = icmp ne i32 %conv, 0, !dbg !9475
  %1 = zext i1 %tobool to i64, !dbg !9475
  %cond = select i1 %tobool, i32 1, i32 0, !dbg !9475
  store i32 %cond, i32* %flags, align 4, !dbg !9474
  call void @llvm.dbg.declare(metadata i8* %ret, metadata !9476, metadata !DIExpression()), !dbg !9477
  store i8 0, i8* %ret, align 1, !dbg !9477
  call void @llvm.dbg.declare(metadata i8* %shared, metadata !9478, metadata !DIExpression()), !dbg !9479
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9480
  %3 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !9482
  %cmp = icmp eq %union.tree_node* %2, %3, !dbg !9483
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !9484

lor.lhs.false:                                    ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9485
  %common = bitcast %union.tree_node* %4 to %struct.tree_common*, !dbg !9485
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !9485
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9485
  %6 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !9486
  %cmp2 = icmp eq %union.tree_node* %5, %6, !dbg !9487
  br i1 %cmp2, label %if.then, label %if.end, !dbg !9488

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8 0, i8* %retval, align 1, !dbg !9489
  br label %return, !dbg !9489

if.end:                                           ; preds = %lor.lhs.false
  %7 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9490
  %call = call zeroext i8 @is_global_var(%union.tree_node* %7), !dbg !9492
  %tobool4 = icmp ne i8 %call, 0, !dbg !9492
  br i1 %tobool4, label %if.then5, label %if.end34, !dbg !9493

if.then5:                                         ; preds = %if.end
  %8 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9494
  %decl_with_vis = bitcast %union.tree_node* %8 to %struct.tree_decl_with_vis*, !dbg !9494
  %tls_model = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 4, !dbg !9494
  %9 = bitcast i24* %tls_model to i32*, !dbg !9494
  %bf.load = load i32, i32* %9, align 8, !dbg !9494
  %bf.lshr = lshr i32 %bf.load, 13, !dbg !9494
  %bf.clear = and i32 %bf.lshr, 7, !dbg !9494
  %cmp6 = icmp sge i32 %bf.clear, 2, !dbg !9494
  br i1 %cmp6, label %if.then8, label %if.end9, !dbg !9497

if.then8:                                         ; preds = %if.then5
  store i8 0, i8* %retval, align 1, !dbg !9498
  br label %return, !dbg !9498

if.end9:                                          ; preds = %if.then5
  %10 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9499
  %decl_common = bitcast %union.tree_node* %10 to %struct.tree_decl_common*, !dbg !9499
  %decl_flag_2 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !9499
  %11 = bitcast i40* %decl_flag_2 to i64*, !dbg !9499
  %bf.load10 = load i64, i64* %11, align 8, !dbg !9499
  %bf.lshr11 = lshr i64 %bf.load10, 26, !dbg !9499
  %bf.clear12 = and i64 %bf.lshr11, 1, !dbg !9499
  %bf.cast = trunc i64 %bf.clear12 to i32, !dbg !9499
  %tobool13 = icmp ne i32 %bf.cast, 0, !dbg !9499
  br i1 %tobool13, label %if.then14, label %if.end33, !dbg !9501

if.then14:                                        ; preds = %if.end9
  call void @llvm.dbg.declare(metadata %union.tree_node** %value, metadata !9502, metadata !DIExpression()), !dbg !9504
  %12 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9505
  %call15 = call %union.tree_node* @decl_value_expr_lookup(%union.tree_node* %12), !dbg !9505
  %call16 = call %union.tree_node* @get_base_address(%union.tree_node* %call15), !dbg !9506
  store %union.tree_node* %call16, %union.tree_node** %value, align 8, !dbg !9504
  %13 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !9507
  %tobool17 = icmp ne %union.tree_node* %13, null, !dbg !9507
  br i1 %tobool17, label %land.lhs.true, label %if.end32, !dbg !9509

land.lhs.true:                                    ; preds = %if.then14
  %14 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !9510
  %base = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !9510
  %15 = bitcast %struct.tree_base* %base to i64*, !dbg !9510
  %bf.load18 = load i64, i64* %15, align 8, !dbg !9510
  %bf.clear19 = and i64 %bf.load18, 65535, !dbg !9510
  %bf.cast20 = trunc i64 %bf.clear19 to i32, !dbg !9510
  %idxprom = sext i32 %bf.cast20 to i64, !dbg !9510
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !9510
  %16 = load i32, i32* %arrayidx, align 4, !dbg !9510
  %cmp21 = icmp eq i32 %16, 3, !dbg !9510
  br i1 %cmp21, label %land.lhs.true23, label %if.end32, !dbg !9511

land.lhs.true23:                                  ; preds = %land.lhs.true
  %17 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !9512
  %decl_with_vis24 = bitcast %union.tree_node* %17 to %struct.tree_decl_with_vis*, !dbg !9512
  %tls_model25 = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis24, i32 0, i32 4, !dbg !9512
  %18 = bitcast i24* %tls_model25 to i32*, !dbg !9512
  %bf.load26 = load i32, i32* %18, align 8, !dbg !9512
  %bf.lshr27 = lshr i32 %bf.load26, 13, !dbg !9512
  %bf.clear28 = and i32 %bf.lshr27, 7, !dbg !9512
  %cmp29 = icmp sge i32 %bf.clear28, 2, !dbg !9512
  br i1 %cmp29, label %if.then31, label %if.end32, !dbg !9513

if.then31:                                        ; preds = %land.lhs.true23
  store i8 0, i8* %retval, align 1, !dbg !9514
  br label %return, !dbg !9514

if.end32:                                         ; preds = %land.lhs.true23, %land.lhs.true, %if.then14
  br label %if.end33, !dbg !9515

if.end33:                                         ; preds = %if.end32, %if.end9
  br label %if.end34, !dbg !9516

if.end34:                                         ; preds = %if.end33, %if.end
  %19 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx.addr, align 8, !dbg !9517
  %variables = getelementptr inbounds %struct.gimplify_omp_ctx, %struct.gimplify_omp_ctx* %19, i32 0, i32 1, !dbg !9518
  %20 = load %struct.splay_tree_s*, %struct.splay_tree_s** %variables, align 8, !dbg !9518
  %21 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9519
  %22 = ptrtoint %union.tree_node* %21 to i64, !dbg !9520
  %call35 = call %struct.splay_tree_node_s* @splay_tree_lookup(%struct.splay_tree_s* %20, i64 %22), !dbg !9521
  store %struct.splay_tree_node_s* %call35, %struct.splay_tree_node_s** %n, align 8, !dbg !9522
  %23 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %n, align 8, !dbg !9523
  %cmp36 = icmp eq %struct.splay_tree_node_s* %23, null, !dbg !9525
  br i1 %cmp36, label %if.then38, label %if.end121, !dbg !9526

if.then38:                                        ; preds = %if.end34
  call void @llvm.dbg.declare(metadata i32* %default_kind, metadata !9527, metadata !DIExpression()), !dbg !9529
  call void @llvm.dbg.declare(metadata i32* %kind, metadata !9530, metadata !DIExpression()), !dbg !9531
  call void @llvm.dbg.declare(metadata %struct.gimplify_omp_ctx** %octx, metadata !9532, metadata !DIExpression()), !dbg !9533
  %24 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx.addr, align 8, !dbg !9534
  %region_type = getelementptr inbounds %struct.gimplify_omp_ctx, %struct.gimplify_omp_ctx* %24, i32 0, i32 5, !dbg !9536
  %25 = load i32, i32* %region_type, align 8, !dbg !9536
  %cmp39 = icmp eq i32 %25, 0, !dbg !9537
  br i1 %cmp39, label %if.then41, label %if.end42, !dbg !9538

if.then41:                                        ; preds = %if.then38
  br label %do_outer, !dbg !9539

if.end42:                                         ; preds = %if.then38
  %26 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx.addr, align 8, !dbg !9540
  %default_kind43 = getelementptr inbounds %struct.gimplify_omp_ctx, %struct.gimplify_omp_ctx* %26, i32 0, i32 4, !dbg !9541
  %27 = load i32, i32* %default_kind43, align 4, !dbg !9541
  store i32 %27, i32* %default_kind, align 4, !dbg !9542
  %28 = load i32 (%union.tree_node*)*, i32 (%union.tree_node*)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 33, i32 11), align 8, !dbg !9543
  %29 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9544
  %call44 = call i32 %28(%union.tree_node* %29), !dbg !9545
  store i32 %call44, i32* %kind, align 4, !dbg !9546
  %30 = load i32, i32* %kind, align 4, !dbg !9547
  %cmp45 = icmp ne i32 %30, 0, !dbg !9549
  br i1 %cmp45, label %if.then47, label %if.end48, !dbg !9550

if.then47:                                        ; preds = %if.end42
  %31 = load i32, i32* %kind, align 4, !dbg !9551
  store i32 %31, i32* %default_kind, align 4, !dbg !9552
  br label %if.end48, !dbg !9553

if.end48:                                         ; preds = %if.then47, %if.end42
  %32 = load i32, i32* %default_kind, align 4, !dbg !9554
  switch i32 %32, label %sw.default [
    i32 2, label %sw.bb
    i32 1, label %sw.bb49
    i32 3, label %sw.bb50
    i32 4, label %sw.bb52
    i32 0, label %sw.bb54
  ], !dbg !9555

sw.bb:                                            ; preds = %if.end48
  %33 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9556
  %decl_minimal = bitcast %union.tree_node* %33 to %struct.tree_decl_minimal*, !dbg !9556
  %name = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 3, !dbg !9556
  %34 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !9556
  call void (i8*, ...) @error(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.18, i64 0, i64 0), %union.tree_node* %34), !dbg !9558
  %35 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx.addr, align 8, !dbg !9559
  %location = getelementptr inbounds %struct.gimplify_omp_ctx, %struct.gimplify_omp_ctx* %35, i32 0, i32 3, !dbg !9560
  %36 = load i32, i32* %location, align 8, !dbg !9560
  call void (i32, i8*, ...) @error_at(i32 %36, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.19, i64 0, i64 0)), !dbg !9561
  br label %sw.bb49, !dbg !9561

sw.bb49:                                          ; preds = %if.end48, %sw.bb
  %37 = load i32, i32* %flags, align 4, !dbg !9562
  %or = or i32 %37, 4, !dbg !9562
  store i32 %or, i32* %flags, align 4, !dbg !9562
  br label %sw.epilog, !dbg !9563

sw.bb50:                                          ; preds = %if.end48
  %38 = load i32, i32* %flags, align 4, !dbg !9564
  %or51 = or i32 %38, 8, !dbg !9564
  store i32 %or51, i32* %flags, align 4, !dbg !9564
  br label %sw.epilog, !dbg !9565

sw.bb52:                                          ; preds = %if.end48
  %39 = load i32, i32* %flags, align 4, !dbg !9566
  %or53 = or i32 %39, 16, !dbg !9566
  store i32 %or53, i32* %flags, align 4, !dbg !9566
  br label %sw.epilog, !dbg !9567

sw.bb54:                                          ; preds = %if.end48
  %40 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx.addr, align 8, !dbg !9568
  %region_type55 = getelementptr inbounds %struct.gimplify_omp_ctx, %struct.gimplify_omp_ctx* %40, i32 0, i32 5, !dbg !9568
  %41 = load i32, i32* %region_type55, align 8, !dbg !9568
  %cmp56 = icmp eq i32 %41, 1, !dbg !9568
  br i1 %cmp56, label %cond.false, label %cond.true, !dbg !9568

cond.true:                                        ; preds = %sw.bb54
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 5520, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9568
  br label %cond.end, !dbg !9568

cond.false:                                       ; preds = %sw.bb54
  br label %cond.end, !dbg !9568

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond58 = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9568
  %42 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx.addr, align 8, !dbg !9569
  %outer_context = getelementptr inbounds %struct.gimplify_omp_ctx, %struct.gimplify_omp_ctx* %42, i32 0, i32 0, !dbg !9571
  %43 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %outer_context, align 8, !dbg !9571
  %tobool59 = icmp ne %struct.gimplify_omp_ctx* %43, null, !dbg !9569
  br i1 %tobool59, label %if.then60, label %if.end63, !dbg !9572

if.then60:                                        ; preds = %cond.end
  %44 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx.addr, align 8, !dbg !9573
  %outer_context61 = getelementptr inbounds %struct.gimplify_omp_ctx, %struct.gimplify_omp_ctx* %44, i32 0, i32 0, !dbg !9574
  %45 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %outer_context61, align 8, !dbg !9574
  %46 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9575
  %47 = load i8, i8* %in_code.addr, align 1, !dbg !9576
  %call62 = call zeroext i8 @omp_notice_variable(%struct.gimplify_omp_ctx* %45, %union.tree_node* %46, i8 zeroext %47), !dbg !9577
  br label %if.end63, !dbg !9577

if.end63:                                         ; preds = %if.then60, %cond.end
  %48 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx.addr, align 8, !dbg !9578
  %outer_context64 = getelementptr inbounds %struct.gimplify_omp_ctx, %struct.gimplify_omp_ctx* %48, i32 0, i32 0, !dbg !9580
  %49 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %outer_context64, align 8, !dbg !9580
  store %struct.gimplify_omp_ctx* %49, %struct.gimplify_omp_ctx** %octx, align 8, !dbg !9581
  br label %for.cond, !dbg !9582

for.cond:                                         ; preds = %for.inc, %if.end63
  %50 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %octx, align 8, !dbg !9583
  %tobool65 = icmp ne %struct.gimplify_omp_ctx* %50, null, !dbg !9585
  br i1 %tobool65, label %for.body, label %for.end, !dbg !9585

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.splay_tree_node_s** %n2, metadata !9586, metadata !DIExpression()), !dbg !9588
  %51 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %octx, align 8, !dbg !9589
  %variables66 = getelementptr inbounds %struct.gimplify_omp_ctx, %struct.gimplify_omp_ctx* %51, i32 0, i32 1, !dbg !9590
  %52 = load %struct.splay_tree_s*, %struct.splay_tree_s** %variables66, align 8, !dbg !9590
  %53 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9591
  %54 = ptrtoint %union.tree_node* %53 to i64, !dbg !9592
  %call67 = call %struct.splay_tree_node_s* @splay_tree_lookup(%struct.splay_tree_s* %52, i64 %54), !dbg !9593
  store %struct.splay_tree_node_s* %call67, %struct.splay_tree_node_s** %n2, align 8, !dbg !9594
  %55 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %n2, align 8, !dbg !9595
  %tobool68 = icmp ne %struct.splay_tree_node_s* %55, null, !dbg !9595
  br i1 %tobool68, label %land.lhs.true69, label %if.end75, !dbg !9597

land.lhs.true69:                                  ; preds = %for.body
  %56 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %n2, align 8, !dbg !9598
  %value70 = getelementptr inbounds %struct.splay_tree_node_s, %struct.splay_tree_node_s* %56, i32 0, i32 1, !dbg !9599
  %57 = load i64, i64* %value70, align 8, !dbg !9599
  %and = and i64 %57, 252, !dbg !9600
  %cmp71 = icmp ne i64 %and, 4, !dbg !9601
  br i1 %cmp71, label %if.then73, label %if.end75, !dbg !9602

if.then73:                                        ; preds = %land.lhs.true69
  %58 = load i32, i32* %flags, align 4, !dbg !9603
  %or74 = or i32 %58, 16, !dbg !9603
  store i32 %or74, i32* %flags, align 4, !dbg !9603
  br label %for.end, !dbg !9605

if.end75:                                         ; preds = %land.lhs.true69, %for.body
  %59 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %octx, align 8, !dbg !9606
  %region_type76 = getelementptr inbounds %struct.gimplify_omp_ctx, %struct.gimplify_omp_ctx* %59, i32 0, i32 5, !dbg !9608
  %60 = load i32, i32* %region_type76, align 8, !dbg !9608
  %and77 = and i32 %60, 2, !dbg !9609
  %cmp78 = icmp ne i32 %and77, 0, !dbg !9610
  br i1 %cmp78, label %if.then80, label %if.end81, !dbg !9611

if.then80:                                        ; preds = %if.end75
  br label %for.end, !dbg !9612

if.end81:                                         ; preds = %if.end75
  br label %for.inc, !dbg !9613

for.inc:                                          ; preds = %if.end81
  %61 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %octx, align 8, !dbg !9614
  %outer_context82 = getelementptr inbounds %struct.gimplify_omp_ctx, %struct.gimplify_omp_ctx* %61, i32 0, i32 0, !dbg !9615
  %62 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %outer_context82, align 8, !dbg !9615
  store %struct.gimplify_omp_ctx* %62, %struct.gimplify_omp_ctx** %octx, align 8, !dbg !9616
  br label %for.cond, !dbg !9617, !llvm.loop !9618

for.end:                                          ; preds = %if.then80, %if.then73, %for.cond
  %63 = load i32, i32* %flags, align 4, !dbg !9620
  %and83 = and i32 %63, 16, !dbg !9622
  %tobool84 = icmp ne i32 %and83, 0, !dbg !9622
  br i1 %tobool84, label %if.then85, label %if.end86, !dbg !9623

if.then85:                                        ; preds = %for.end
  br label %sw.epilog, !dbg !9624

if.end86:                                         ; preds = %for.end
  %64 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %octx, align 8, !dbg !9625
  %cmp87 = icmp eq %struct.gimplify_omp_ctx* %64, null, !dbg !9627
  br i1 %cmp87, label %land.lhs.true89, label %if.end105, !dbg !9628

land.lhs.true89:                                  ; preds = %if.end86
  %65 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9629
  %base90 = bitcast %union.tree_node* %65 to %struct.tree_base*, !dbg !9629
  %66 = bitcast %struct.tree_base* %base90 to i64*, !dbg !9629
  %bf.load91 = load i64, i64* %66, align 8, !dbg !9629
  %bf.clear92 = and i64 %bf.load91, 65535, !dbg !9629
  %bf.cast93 = trunc i64 %bf.clear92 to i32, !dbg !9629
  %cmp94 = icmp eq i32 %bf.cast93, 34, !dbg !9630
  br i1 %cmp94, label %if.then103, label %lor.lhs.false96, !dbg !9631

lor.lhs.false96:                                  ; preds = %land.lhs.true89
  %67 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9632
  %call97 = call zeroext i8 @is_global_var(%union.tree_node* %67), !dbg !9633
  %tobool98 = icmp ne i8 %call97, 0, !dbg !9633
  br i1 %tobool98, label %if.end105, label %land.lhs.true99, !dbg !9634

land.lhs.true99:                                  ; preds = %lor.lhs.false96
  %68 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9635
  %decl_minimal100 = bitcast %union.tree_node* %68 to %struct.tree_decl_minimal*, !dbg !9635
  %context = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal100, i32 0, i32 4, !dbg !9635
  %69 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !9635
  %70 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !9636
  %cmp101 = icmp eq %union.tree_node* %69, %70, !dbg !9637
  br i1 %cmp101, label %if.then103, label %if.end105, !dbg !9638

if.then103:                                       ; preds = %land.lhs.true99, %land.lhs.true89
  %71 = load i32, i32* %flags, align 4, !dbg !9639
  %or104 = or i32 %71, 16, !dbg !9639
  store i32 %or104, i32* %flags, align 4, !dbg !9639
  br label %sw.epilog, !dbg !9641

if.end105:                                        ; preds = %land.lhs.true99, %lor.lhs.false96, %if.end86
  %72 = load i32, i32* %flags, align 4, !dbg !9642
  %or106 = or i32 %72, 4, !dbg !9642
  store i32 %or106, i32* %flags, align 4, !dbg !9642
  br label %sw.epilog, !dbg !9643

sw.default:                                       ; preds = %if.end48
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 5549, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9644
  br label %sw.epilog, !dbg !9645

sw.epilog:                                        ; preds = %sw.default, %if.end105, %if.then103, %if.then85, %sw.bb52, %sw.bb50, %sw.bb49
  %73 = load i32, i32* %flags, align 4, !dbg !9646
  %and107 = and i32 %73, 8, !dbg !9648
  %tobool108 = icmp ne i32 %and107, 0, !dbg !9648
  br i1 %tobool108, label %land.lhs.true109, label %if.end115, !dbg !9649

land.lhs.true109:                                 ; preds = %sw.epilog
  %74 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 33, i32 14), align 8, !dbg !9650
  %75 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9651
  %call110 = call zeroext i8 %74(%union.tree_node* %75), !dbg !9652
  %conv111 = zext i8 %call110 to i32, !dbg !9652
  %tobool112 = icmp ne i32 %conv111, 0, !dbg !9652
  br i1 %tobool112, label %if.then113, label %if.end115, !dbg !9653

if.then113:                                       ; preds = %land.lhs.true109
  %76 = load i32, i32* %flags, align 4, !dbg !9654
  %or114 = or i32 %76, 512, !dbg !9654
  store i32 %or114, i32* %flags, align 4, !dbg !9654
  br label %if.end115, !dbg !9655

if.end115:                                        ; preds = %if.then113, %land.lhs.true109, %sw.epilog
  %77 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx.addr, align 8, !dbg !9656
  %78 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9657
  %79 = load i32, i32* %flags, align 4, !dbg !9658
  call void @omp_add_variable(%struct.gimplify_omp_ctx* %77, %union.tree_node* %78, i32 %79), !dbg !9659
  %80 = load i32, i32* %flags, align 4, !dbg !9660
  %and116 = and i32 %80, 4, !dbg !9661
  %cmp117 = icmp ne i32 %and116, 0, !dbg !9662
  %conv118 = zext i1 %cmp117 to i32, !dbg !9662
  %conv119 = trunc i32 %conv118 to i8, !dbg !9663
  store i8 %conv119, i8* %shared, align 1, !dbg !9664
  %81 = load i8 (%union.tree_node*, i8)*, i8 (%union.tree_node*, i8)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 33, i32 12), align 8, !dbg !9665
  %82 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9666
  %83 = load i8, i8* %shared, align 1, !dbg !9667
  %call120 = call zeroext i8 %81(%union.tree_node* %82, i8 zeroext %83), !dbg !9668
  store i8 %call120, i8* %ret, align 1, !dbg !9669
  br label %do_outer, !dbg !9670

if.end121:                                        ; preds = %if.end34
  %84 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %n, align 8, !dbg !9671
  %value122 = getelementptr inbounds %struct.splay_tree_node_s, %struct.splay_tree_node_s* %84, i32 0, i32 1, !dbg !9673
  %85 = load i64, i64* %value122, align 8, !dbg !9673
  %and123 = and i64 %85, 129, !dbg !9674
  %cmp124 = icmp eq i64 %and123, 0, !dbg !9675
  br i1 %cmp124, label %land.lhs.true126, label %if.end172, !dbg !9676

land.lhs.true126:                                 ; preds = %if.end121
  %86 = load i32, i32* %flags, align 4, !dbg !9677
  %and127 = and i32 %86, 129, !dbg !9678
  %cmp128 = icmp eq i32 %and127, 1, !dbg !9679
  br i1 %cmp128, label %land.lhs.true130, label %if.end172, !dbg !9680

land.lhs.true130:                                 ; preds = %land.lhs.true126
  %87 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9681
  %decl_common131 = bitcast %union.tree_node* %87 to %struct.tree_decl_common*, !dbg !9681
  %size = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common131, i32 0, i32 1, !dbg !9681
  %88 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !9681
  %tobool132 = icmp ne %union.tree_node* %88, null, !dbg !9681
  br i1 %tobool132, label %land.lhs.true133, label %if.end172, !dbg !9682

land.lhs.true133:                                 ; preds = %land.lhs.true130
  %89 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9683
  %decl_common134 = bitcast %union.tree_node* %89 to %struct.tree_decl_common*, !dbg !9683
  %size135 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common134, i32 0, i32 1, !dbg !9683
  %90 = load %union.tree_node*, %union.tree_node** %size135, align 8, !dbg !9683
  %base136 = bitcast %union.tree_node* %90 to %struct.tree_base*, !dbg !9683
  %91 = bitcast %struct.tree_base* %base136 to i64*, !dbg !9683
  %bf.load137 = load i64, i64* %91, align 8, !dbg !9683
  %bf.clear138 = and i64 %bf.load137, 65535, !dbg !9683
  %bf.cast139 = trunc i64 %bf.clear138 to i32, !dbg !9683
  %cmp140 = icmp ne i32 %bf.cast139, 23, !dbg !9684
  br i1 %cmp140, label %if.then142, label %if.end172, !dbg !9685

if.then142:                                       ; preds = %land.lhs.true133
  call void @llvm.dbg.declare(metadata %struct.splay_tree_node_s** %n2143, metadata !9686, metadata !DIExpression()), !dbg !9688
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !9689, metadata !DIExpression()), !dbg !9690
  %92 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9691
  %call144 = call %union.tree_node* @decl_value_expr_lookup(%union.tree_node* %92), !dbg !9691
  store %union.tree_node* %call144, %union.tree_node** %t, align 8, !dbg !9690
  %93 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !9692
  %base145 = bitcast %union.tree_node* %93 to %struct.tree_base*, !dbg !9692
  %94 = bitcast %struct.tree_base* %base145 to i64*, !dbg !9692
  %bf.load146 = load i64, i64* %94, align 8, !dbg !9692
  %bf.clear147 = and i64 %bf.load146, 65535, !dbg !9692
  %bf.cast148 = trunc i64 %bf.clear147 to i32, !dbg !9692
  %cmp149 = icmp eq i32 %bf.cast148, 47, !dbg !9692
  br i1 %cmp149, label %cond.false152, label %cond.true151, !dbg !9692

cond.true151:                                     ; preds = %if.then142
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 5570, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9692
  br label %cond.end153, !dbg !9692

cond.false152:                                    ; preds = %if.then142
  br label %cond.end153, !dbg !9692

cond.end153:                                      ; preds = %cond.false152, %cond.true151
  %cond154 = phi i32 [ 0, %cond.true151 ], [ 0, %cond.false152 ], !dbg !9692
  %95 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !9693
  %exp = bitcast %union.tree_node* %95 to %struct.tree_exp*, !dbg !9693
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !9693
  %arrayidx155 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !9693
  %96 = load %union.tree_node*, %union.tree_node** %arrayidx155, align 8, !dbg !9693
  store %union.tree_node* %96, %union.tree_node** %t, align 8, !dbg !9694
  %97 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !9695
  %base156 = bitcast %union.tree_node* %97 to %struct.tree_base*, !dbg !9695
  %98 = bitcast %struct.tree_base* %base156 to i64*, !dbg !9695
  %bf.load157 = load i64, i64* %98, align 8, !dbg !9695
  %bf.clear158 = and i64 %bf.load157, 65535, !dbg !9695
  %bf.cast159 = trunc i64 %bf.clear158 to i32, !dbg !9695
  %idxprom160 = sext i32 %bf.cast159 to i64, !dbg !9695
  %arrayidx161 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom160, !dbg !9695
  %99 = load i32, i32* %arrayidx161, align 4, !dbg !9695
  %cmp162 = icmp eq i32 %99, 3, !dbg !9695
  br i1 %cmp162, label %cond.false165, label %cond.true164, !dbg !9695

cond.true164:                                     ; preds = %cond.end153
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 5572, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9695
  br label %cond.end166, !dbg !9695

cond.false165:                                    ; preds = %cond.end153
  br label %cond.end166, !dbg !9695

cond.end166:                                      ; preds = %cond.false165, %cond.true164
  %cond167 = phi i32 [ 0, %cond.true164 ], [ 0, %cond.false165 ], !dbg !9695
  %100 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx.addr, align 8, !dbg !9696
  %variables168 = getelementptr inbounds %struct.gimplify_omp_ctx, %struct.gimplify_omp_ctx* %100, i32 0, i32 1, !dbg !9697
  %101 = load %struct.splay_tree_s*, %struct.splay_tree_s** %variables168, align 8, !dbg !9697
  %102 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !9698
  %103 = ptrtoint %union.tree_node* %102 to i64, !dbg !9699
  %call169 = call %struct.splay_tree_node_s* @splay_tree_lookup(%struct.splay_tree_s* %101, i64 %103), !dbg !9700
  store %struct.splay_tree_node_s* %call169, %struct.splay_tree_node_s** %n2143, align 8, !dbg !9701
  %104 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %n2143, align 8, !dbg !9702
  %value170 = getelementptr inbounds %struct.splay_tree_node_s, %struct.splay_tree_node_s* %104, i32 0, i32 1, !dbg !9703
  %105 = load i64, i64* %value170, align 8, !dbg !9704
  %or171 = or i64 %105, 1, !dbg !9704
  store i64 %or171, i64* %value170, align 8, !dbg !9704
  br label %if.end172, !dbg !9705

if.end172:                                        ; preds = %cond.end166, %land.lhs.true133, %land.lhs.true130, %land.lhs.true126, %if.end121
  %106 = load i32, i32* %flags, align 4, !dbg !9706
  %conv173 = zext i32 %106 to i64, !dbg !9706
  %107 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %n, align 8, !dbg !9707
  %value174 = getelementptr inbounds %struct.splay_tree_node_s, %struct.splay_tree_node_s* %107, i32 0, i32 1, !dbg !9708
  %108 = load i64, i64* %value174, align 8, !dbg !9708
  %or175 = or i64 %conv173, %108, !dbg !9709
  %and176 = and i64 %or175, 4, !dbg !9710
  %cmp177 = icmp ne i64 %and176, 0, !dbg !9711
  %conv178 = zext i1 %cmp177 to i32, !dbg !9711
  %conv179 = trunc i32 %conv178 to i8, !dbg !9712
  store i8 %conv179, i8* %shared, align 1, !dbg !9713
  %109 = load i8 (%union.tree_node*, i8)*, i8 (%union.tree_node*, i8)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 33, i32 12), align 8, !dbg !9714
  %110 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9715
  %111 = load i8, i8* %shared, align 1, !dbg !9716
  %call180 = call zeroext i8 %109(%union.tree_node* %110, i8 zeroext %111), !dbg !9717
  store i8 %call180, i8* %ret, align 1, !dbg !9718
  %112 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %n, align 8, !dbg !9719
  %value181 = getelementptr inbounds %struct.splay_tree_node_s, %struct.splay_tree_node_s* %112, i32 0, i32 1, !dbg !9721
  %113 = load i64, i64* %value181, align 8, !dbg !9721
  %114 = load i32, i32* %flags, align 4, !dbg !9722
  %conv182 = zext i32 %114 to i64, !dbg !9722
  %and183 = and i64 %113, %conv182, !dbg !9723
  %115 = load i32, i32* %flags, align 4, !dbg !9724
  %conv184 = zext i32 %115 to i64, !dbg !9724
  %cmp185 = icmp eq i64 %and183, %conv184, !dbg !9725
  br i1 %cmp185, label %if.then187, label %if.end188, !dbg !9726

if.then187:                                       ; preds = %if.end172
  %116 = load i8, i8* %ret, align 1, !dbg !9727
  store i8 %116, i8* %retval, align 1, !dbg !9728
  br label %return, !dbg !9728

if.end188:                                        ; preds = %if.end172
  %117 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %n, align 8, !dbg !9729
  %value189 = getelementptr inbounds %struct.splay_tree_node_s, %struct.splay_tree_node_s* %117, i32 0, i32 1, !dbg !9730
  %118 = load i64, i64* %value189, align 8, !dbg !9730
  %119 = load i32, i32* %flags, align 4, !dbg !9731
  %conv190 = zext i32 %119 to i64, !dbg !9731
  %or191 = or i64 %conv190, %118, !dbg !9731
  %conv192 = trunc i64 %or191 to i32, !dbg !9731
  store i32 %conv192, i32* %flags, align 4, !dbg !9731
  %120 = load i32, i32* %flags, align 4, !dbg !9732
  %conv193 = zext i32 %120 to i64, !dbg !9732
  %121 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %n, align 8, !dbg !9733
  %value194 = getelementptr inbounds %struct.splay_tree_node_s, %struct.splay_tree_node_s* %121, i32 0, i32 1, !dbg !9734
  store i64 %conv193, i64* %value194, align 8, !dbg !9735
  br label %do_outer, !dbg !9733

do_outer:                                         ; preds = %if.end188, %if.end115, %if.then41
  call void @llvm.dbg.label(metadata !9736), !dbg !9737
  %122 = load i32, i32* %flags, align 4, !dbg !9738
  %and195 = and i32 %122, 8, !dbg !9740
  %tobool196 = icmp ne i32 %and195, 0, !dbg !9740
  br i1 %tobool196, label %land.lhs.true197, label %if.end201, !dbg !9741

land.lhs.true197:                                 ; preds = %do_outer
  %123 = load i32, i32* %flags, align 4, !dbg !9742
  %and198 = and i32 %123, 512, !dbg !9743
  %tobool199 = icmp ne i32 %and198, 0, !dbg !9743
  br i1 %tobool199, label %if.end201, label %if.then200, !dbg !9744

if.then200:                                       ; preds = %land.lhs.true197
  %124 = load i8, i8* %ret, align 1, !dbg !9745
  store i8 %124, i8* %retval, align 1, !dbg !9746
  br label %return, !dbg !9746

if.end201:                                        ; preds = %land.lhs.true197, %do_outer
  %125 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx.addr, align 8, !dbg !9747
  %outer_context202 = getelementptr inbounds %struct.gimplify_omp_ctx, %struct.gimplify_omp_ctx* %125, i32 0, i32 0, !dbg !9749
  %126 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %outer_context202, align 8, !dbg !9749
  %tobool203 = icmp ne %struct.gimplify_omp_ctx* %126, null, !dbg !9747
  br i1 %tobool203, label %land.lhs.true204, label %if.end210, !dbg !9750

land.lhs.true204:                                 ; preds = %if.end201
  %127 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx.addr, align 8, !dbg !9751
  %outer_context205 = getelementptr inbounds %struct.gimplify_omp_ctx, %struct.gimplify_omp_ctx* %127, i32 0, i32 0, !dbg !9752
  %128 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %outer_context205, align 8, !dbg !9752
  %129 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9753
  %130 = load i8, i8* %in_code.addr, align 1, !dbg !9754
  %call206 = call zeroext i8 @omp_notice_variable(%struct.gimplify_omp_ctx* %128, %union.tree_node* %129, i8 zeroext %130), !dbg !9755
  %conv207 = zext i8 %call206 to i32, !dbg !9755
  %tobool208 = icmp ne i32 %conv207, 0, !dbg !9755
  br i1 %tobool208, label %if.then209, label %if.end210, !dbg !9756

if.then209:                                       ; preds = %land.lhs.true204
  store i8 1, i8* %retval, align 1, !dbg !9757
  br label %return, !dbg !9757

if.end210:                                        ; preds = %land.lhs.true204, %if.end201
  %131 = load i8, i8* %ret, align 1, !dbg !9758
  store i8 %131, i8* %retval, align 1, !dbg !9759
  br label %return, !dbg !9759

return:                                           ; preds = %if.end210, %if.then209, %if.then200, %if.then187, %if.then31, %if.then8, %if.then
  %132 = load i8, i8* %retval, align 1, !dbg !9760
  ret i8 %132, !dbg !9760
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimplify_omp_parallel(%union.tree_node** %expr_p, %struct.gimple_seq_d** %pre_p) #0 !dbg !9761 {
entry:
  %expr_p.addr = alloca %union.tree_node**, align 8
  %pre_p.addr = alloca %struct.gimple_seq_d**, align 8
  %expr = alloca %union.tree_node*, align 8
  %g = alloca %union.gimple_statement_d*, align 8
  %body = alloca %struct.gimple_seq_d*, align 8
  %gctx = alloca %struct.gimplify_ctx, align 8
  store %union.tree_node** %expr_p, %union.tree_node*** %expr_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %expr_p.addr, metadata !9764, metadata !DIExpression()), !dbg !9765
  store %struct.gimple_seq_d** %pre_p, %struct.gimple_seq_d*** %pre_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %pre_p.addr, metadata !9766, metadata !DIExpression()), !dbg !9767
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr, metadata !9768, metadata !DIExpression()), !dbg !9769
  %0 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !9770
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !9771
  store %union.tree_node* %1, %union.tree_node** %expr, align 8, !dbg !9769
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g, metadata !9772, metadata !DIExpression()), !dbg !9773
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %body, metadata !9774, metadata !DIExpression()), !dbg !9775
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %body, align 8, !dbg !9775
  call void @llvm.dbg.declare(metadata %struct.gimplify_ctx* %gctx, metadata !9776, metadata !DIExpression()), !dbg !9777
  %2 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !9778
  %exp = bitcast %union.tree_node* %2 to %struct.tree_exp*, !dbg !9778
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !9778
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !9778
  %3 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !9779
  %4 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !9780
  %base = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !9780
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !9780
  %bf.load = load i64, i64* %5, align 8, !dbg !9780
  %bf.lshr = lshr i64 %bf.load, 28, !dbg !9780
  %bf.clear = and i64 %bf.lshr, 1, !dbg !9780
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9780
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !9780
  %6 = zext i1 %tobool to i64, !dbg !9780
  %cond = select i1 %tobool, i32 3, i32 2, !dbg !9780
  call void @gimplify_scan_omp_clauses(%union.tree_node** %arrayidx, %struct.gimple_seq_d** %3, i32 %cond), !dbg !9781
  call void @push_gimplify_context(%struct.gimplify_ctx* %gctx), !dbg !9782
  %7 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !9783
  %exp1 = bitcast %union.tree_node* %7 to %struct.tree_exp*, !dbg !9783
  %operands2 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 3, !dbg !9783
  %arrayidx3 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2, i64 0, i64 0, !dbg !9783
  %8 = load %union.tree_node*, %union.tree_node** %arrayidx3, align 8, !dbg !9783
  %call = call %union.gimple_statement_d* @gimplify_and_return_first(%union.tree_node* %8, %struct.gimple_seq_d** %body), !dbg !9784
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %g, align 8, !dbg !9785
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g, align 8, !dbg !9786
  %call4 = call i32 @gimple_code(%union.gimple_statement_d* %9), !dbg !9788
  %cmp = icmp eq i32 %call4, 10, !dbg !9789
  br i1 %cmp, label %if.then, label %if.else, !dbg !9790

if.then:                                          ; preds = %entry
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g, align 8, !dbg !9791
  call void @pop_gimplify_context(%union.gimple_statement_d* %10), !dbg !9792
  br label %if.end, !dbg !9792

if.else:                                          ; preds = %entry
  call void @pop_gimplify_context(%union.gimple_statement_d* null), !dbg !9793
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %11 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !9794
  %exp5 = bitcast %union.tree_node* %11 to %struct.tree_exp*, !dbg !9794
  %operands6 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5, i32 0, i32 3, !dbg !9794
  %arrayidx7 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands6, i64 0, i64 1, !dbg !9794
  call void @gimplify_adjust_omp_clauses(%union.tree_node** %arrayidx7), !dbg !9795
  %12 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %body, align 8, !dbg !9796
  %13 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !9797
  %exp8 = bitcast %union.tree_node* %13 to %struct.tree_exp*, !dbg !9797
  %operands9 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp8, i32 0, i32 3, !dbg !9797
  %arrayidx10 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands9, i64 0, i64 1, !dbg !9797
  %14 = load %union.tree_node*, %union.tree_node** %arrayidx10, align 8, !dbg !9797
  %call11 = call %union.gimple_statement_d* @gimple_build_omp_parallel(%struct.gimple_seq_d* %12, %union.tree_node* %14, %union.tree_node* null, %union.tree_node* null), !dbg !9798
  store %union.gimple_statement_d* %call11, %union.gimple_statement_d** %g, align 8, !dbg !9799
  %15 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !9800
  %base12 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !9800
  %16 = bitcast %struct.tree_base* %base12 to i64*, !dbg !9800
  %bf.load13 = load i64, i64* %16, align 8, !dbg !9800
  %bf.lshr14 = lshr i64 %bf.load13, 28, !dbg !9800
  %bf.clear15 = and i64 %bf.lshr14, 1, !dbg !9800
  %bf.cast16 = trunc i64 %bf.clear15 to i32, !dbg !9800
  %tobool17 = icmp ne i32 %bf.cast16, 0, !dbg !9800
  br i1 %tobool17, label %if.then18, label %if.end19, !dbg !9802

if.then18:                                        ; preds = %if.end
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g, align 8, !dbg !9803
  call void @gimple_omp_set_subcode(%union.gimple_statement_d* %17, i32 1), !dbg !9804
  br label %if.end19, !dbg !9804

if.end19:                                         ; preds = %if.then18, %if.end
  %18 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !9805
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g, align 8, !dbg !9806
  call void @gimplify_seq_add_stmt(%struct.gimple_seq_d** %18, %union.gimple_statement_d* %19), !dbg !9807
  %20 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !9808
  store %union.tree_node* null, %union.tree_node** %20, align 8, !dbg !9809
  ret void, !dbg !9810
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimplify_omp_task(%union.tree_node** %expr_p, %struct.gimple_seq_d** %pre_p) #0 !dbg !9811 {
entry:
  %expr_p.addr = alloca %union.tree_node**, align 8
  %pre_p.addr = alloca %struct.gimple_seq_d**, align 8
  %expr = alloca %union.tree_node*, align 8
  %g = alloca %union.gimple_statement_d*, align 8
  %body = alloca %struct.gimple_seq_d*, align 8
  %gctx = alloca %struct.gimplify_ctx, align 8
  store %union.tree_node** %expr_p, %union.tree_node*** %expr_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %expr_p.addr, metadata !9812, metadata !DIExpression()), !dbg !9813
  store %struct.gimple_seq_d** %pre_p, %struct.gimple_seq_d*** %pre_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %pre_p.addr, metadata !9814, metadata !DIExpression()), !dbg !9815
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr, metadata !9816, metadata !DIExpression()), !dbg !9817
  %0 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !9818
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !9819
  store %union.tree_node* %1, %union.tree_node** %expr, align 8, !dbg !9817
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g, metadata !9820, metadata !DIExpression()), !dbg !9821
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %body, metadata !9822, metadata !DIExpression()), !dbg !9823
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %body, align 8, !dbg !9823
  call void @llvm.dbg.declare(metadata %struct.gimplify_ctx* %gctx, metadata !9824, metadata !DIExpression()), !dbg !9825
  %2 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !9826
  %exp = bitcast %union.tree_node* %2 to %struct.tree_exp*, !dbg !9826
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !9826
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !9826
  %3 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !9827
  call void @gimplify_scan_omp_clauses(%union.tree_node** %arrayidx, %struct.gimple_seq_d** %3, i32 1), !dbg !9828
  call void @push_gimplify_context(%struct.gimplify_ctx* %gctx), !dbg !9829
  %4 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !9830
  %exp1 = bitcast %union.tree_node* %4 to %struct.tree_exp*, !dbg !9830
  %operands2 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 3, !dbg !9830
  %arrayidx3 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2, i64 0, i64 0, !dbg !9830
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx3, align 8, !dbg !9830
  %call = call %union.gimple_statement_d* @gimplify_and_return_first(%union.tree_node* %5, %struct.gimple_seq_d** %body), !dbg !9831
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %g, align 8, !dbg !9832
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g, align 8, !dbg !9833
  %call4 = call i32 @gimple_code(%union.gimple_statement_d* %6), !dbg !9835
  %cmp = icmp eq i32 %call4, 10, !dbg !9836
  br i1 %cmp, label %if.then, label %if.else, !dbg !9837

if.then:                                          ; preds = %entry
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g, align 8, !dbg !9838
  call void @pop_gimplify_context(%union.gimple_statement_d* %7), !dbg !9839
  br label %if.end, !dbg !9839

if.else:                                          ; preds = %entry
  call void @pop_gimplify_context(%union.gimple_statement_d* null), !dbg !9840
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %8 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !9841
  %exp5 = bitcast %union.tree_node* %8 to %struct.tree_exp*, !dbg !9841
  %operands6 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5, i32 0, i32 3, !dbg !9841
  %arrayidx7 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands6, i64 0, i64 1, !dbg !9841
  call void @gimplify_adjust_omp_clauses(%union.tree_node** %arrayidx7), !dbg !9842
  %9 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %body, align 8, !dbg !9843
  %10 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !9844
  %exp8 = bitcast %union.tree_node* %10 to %struct.tree_exp*, !dbg !9844
  %operands9 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp8, i32 0, i32 3, !dbg !9844
  %arrayidx10 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands9, i64 0, i64 1, !dbg !9844
  %11 = load %union.tree_node*, %union.tree_node** %arrayidx10, align 8, !dbg !9844
  %call11 = call %union.gimple_statement_d* @gimple_build_omp_task(%struct.gimple_seq_d* %9, %union.tree_node* %11, %union.tree_node* null, %union.tree_node* null, %union.tree_node* null, %union.tree_node* null, %union.tree_node* null), !dbg !9845
  store %union.gimple_statement_d* %call11, %union.gimple_statement_d** %g, align 8, !dbg !9846
  %12 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !9847
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g, align 8, !dbg !9848
  call void @gimplify_seq_add_stmt(%struct.gimple_seq_d** %12, %union.gimple_statement_d* %13), !dbg !9849
  %14 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !9850
  store %union.tree_node* null, %union.tree_node** %14, align 8, !dbg !9851
  ret void, !dbg !9852
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimplify_omp_for(%union.tree_node** %expr_p, %struct.gimple_seq_d** %pre_p) #0 !dbg !9853 {
entry:
  %retval = alloca i32, align 4
  %expr_p.addr = alloca %union.tree_node**, align 8
  %pre_p.addr = alloca %struct.gimple_seq_d**, align 8
  %for_stmt = alloca %union.tree_node*, align 8
  %decl = alloca %union.tree_node*, align 8
  %var = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  %ret = alloca i32, align 4
  %tret = alloca i32, align 4
  %gfor = alloca %union.gimple_statement_d*, align 8
  %for_body = alloca %struct.gimple_seq_d*, align 8
  %for_pre_body = alloca %struct.gimple_seq_d*, align 8
  %i = alloca i32, align 4
  %c = alloca %union.tree_node*, align 8
  store %union.tree_node** %expr_p, %union.tree_node*** %expr_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %expr_p.addr, metadata !9854, metadata !DIExpression()), !dbg !9855
  store %struct.gimple_seq_d** %pre_p, %struct.gimple_seq_d*** %pre_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %pre_p.addr, metadata !9856, metadata !DIExpression()), !dbg !9857
  call void @llvm.dbg.declare(metadata %union.tree_node** %for_stmt, metadata !9858, metadata !DIExpression()), !dbg !9859
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !9860, metadata !DIExpression()), !dbg !9861
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !9862, metadata !DIExpression()), !dbg !9863
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !9864, metadata !DIExpression()), !dbg !9865
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !9866, metadata !DIExpression()), !dbg !9867
  store i32 1, i32* %ret, align 4, !dbg !9867
  call void @llvm.dbg.declare(metadata i32* %tret, metadata !9868, metadata !DIExpression()), !dbg !9869
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gfor, metadata !9870, metadata !DIExpression()), !dbg !9871
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %for_body, metadata !9872, metadata !DIExpression()), !dbg !9873
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %for_pre_body, metadata !9874, metadata !DIExpression()), !dbg !9875
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9876, metadata !DIExpression()), !dbg !9877
  %0 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !9878
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !9879
  store %union.tree_node* %1, %union.tree_node** %for_stmt, align 8, !dbg !9880
  %2 = load %union.tree_node*, %union.tree_node** %for_stmt, align 8, !dbg !9881
  %exp = bitcast %union.tree_node* %2 to %struct.tree_exp*, !dbg !9881
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !9881
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !9881
  %3 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !9882
  call void @gimplify_scan_omp_clauses(%union.tree_node** %arrayidx, %struct.gimple_seq_d** %3, i32 0), !dbg !9883
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %for_pre_body, align 8, !dbg !9884
  %4 = load %union.tree_node*, %union.tree_node** %for_stmt, align 8, !dbg !9885
  %exp1 = bitcast %union.tree_node* %4 to %struct.tree_exp*, !dbg !9885
  %operands2 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 3, !dbg !9885
  %arrayidx3 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2, i64 0, i64 5, !dbg !9885
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx3, align 8, !dbg !9885
  call void @gimplify_and_add(%union.tree_node* %5, %struct.gimple_seq_d** %for_pre_body), !dbg !9886
  %6 = load %union.tree_node*, %union.tree_node** %for_stmt, align 8, !dbg !9887
  %exp4 = bitcast %union.tree_node* %6 to %struct.tree_exp*, !dbg !9887
  %operands5 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4, i32 0, i32 3, !dbg !9887
  %arrayidx6 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5, i64 0, i64 5, !dbg !9887
  store %union.tree_node* null, %union.tree_node** %arrayidx6, align 8, !dbg !9888
  %call = call %struct.gimple_seq_d* @gimple_seq_alloc(), !dbg !9889
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %for_body, align 8, !dbg !9890
  %7 = load %union.tree_node*, %union.tree_node** %for_stmt, align 8, !dbg !9891
  %exp7 = bitcast %union.tree_node* %7 to %struct.tree_exp*, !dbg !9891
  %operands8 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp7, i32 0, i32 3, !dbg !9891
  %arrayidx9 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands8, i64 0, i64 2, !dbg !9891
  %8 = load %union.tree_node*, %union.tree_node** %arrayidx9, align 8, !dbg !9891
  %vec = bitcast %union.tree_node* %8 to %struct.tree_vec*, !dbg !9891
  %length = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %vec, i32 0, i32 1, !dbg !9891
  %9 = load i32, i32* %length, align 8, !dbg !9891
  %10 = load %union.tree_node*, %union.tree_node** %for_stmt, align 8, !dbg !9891
  %exp10 = bitcast %union.tree_node* %10 to %struct.tree_exp*, !dbg !9891
  %operands11 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp10, i32 0, i32 3, !dbg !9891
  %arrayidx12 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands11, i64 0, i64 3, !dbg !9891
  %11 = load %union.tree_node*, %union.tree_node** %arrayidx12, align 8, !dbg !9891
  %vec13 = bitcast %union.tree_node* %11 to %struct.tree_vec*, !dbg !9891
  %length14 = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %vec13, i32 0, i32 1, !dbg !9891
  %12 = load i32, i32* %length14, align 8, !dbg !9891
  %cmp = icmp eq i32 %9, %12, !dbg !9891
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !9891

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 6067, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9891
  br label %cond.end, !dbg !9891

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9891

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9891
  %13 = load %union.tree_node*, %union.tree_node** %for_stmt, align 8, !dbg !9892
  %exp15 = bitcast %union.tree_node* %13 to %struct.tree_exp*, !dbg !9892
  %operands16 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp15, i32 0, i32 3, !dbg !9892
  %arrayidx17 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands16, i64 0, i64 2, !dbg !9892
  %14 = load %union.tree_node*, %union.tree_node** %arrayidx17, align 8, !dbg !9892
  %vec18 = bitcast %union.tree_node* %14 to %struct.tree_vec*, !dbg !9892
  %length19 = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %vec18, i32 0, i32 1, !dbg !9892
  %15 = load i32, i32* %length19, align 8, !dbg !9892
  %16 = load %union.tree_node*, %union.tree_node** %for_stmt, align 8, !dbg !9892
  %exp20 = bitcast %union.tree_node* %16 to %struct.tree_exp*, !dbg !9892
  %operands21 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp20, i32 0, i32 3, !dbg !9892
  %arrayidx22 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands21, i64 0, i64 4, !dbg !9892
  %17 = load %union.tree_node*, %union.tree_node** %arrayidx22, align 8, !dbg !9892
  %vec23 = bitcast %union.tree_node* %17 to %struct.tree_vec*, !dbg !9892
  %length24 = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %vec23, i32 0, i32 1, !dbg !9892
  %18 = load i32, i32* %length24, align 8, !dbg !9892
  %cmp25 = icmp eq i32 %15, %18, !dbg !9892
  br i1 %cmp25, label %cond.false27, label %cond.true26, !dbg !9892

cond.true26:                                      ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 6069, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9892
  br label %cond.end28, !dbg !9892

cond.false27:                                     ; preds = %cond.end
  br label %cond.end28, !dbg !9892

cond.end28:                                       ; preds = %cond.false27, %cond.true26
  %cond29 = phi i32 [ 0, %cond.true26 ], [ 0, %cond.false27 ], !dbg !9892
  store i32 0, i32* %i, align 4, !dbg !9893
  br label %for.cond, !dbg !9895

for.cond:                                         ; preds = %for.inc359, %cond.end28
  %19 = load i32, i32* %i, align 4, !dbg !9896
  %20 = load %union.tree_node*, %union.tree_node** %for_stmt, align 8, !dbg !9898
  %exp30 = bitcast %union.tree_node* %20 to %struct.tree_exp*, !dbg !9898
  %operands31 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp30, i32 0, i32 3, !dbg !9898
  %arrayidx32 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands31, i64 0, i64 2, !dbg !9898
  %21 = load %union.tree_node*, %union.tree_node** %arrayidx32, align 8, !dbg !9898
  %vec33 = bitcast %union.tree_node* %21 to %struct.tree_vec*, !dbg !9898
  %length34 = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %vec33, i32 0, i32 1, !dbg !9898
  %22 = load i32, i32* %length34, align 8, !dbg !9898
  %cmp35 = icmp slt i32 %19, %22, !dbg !9899
  br i1 %cmp35, label %for.body, label %for.end360, !dbg !9900

for.body:                                         ; preds = %for.cond
  %23 = load %union.tree_node*, %union.tree_node** %for_stmt, align 8, !dbg !9901
  %exp36 = bitcast %union.tree_node* %23 to %struct.tree_exp*, !dbg !9901
  %operands37 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp36, i32 0, i32 3, !dbg !9901
  %arrayidx38 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands37, i64 0, i64 2, !dbg !9901
  %24 = load %union.tree_node*, %union.tree_node** %arrayidx38, align 8, !dbg !9901
  %vec39 = bitcast %union.tree_node* %24 to %struct.tree_vec*, !dbg !9901
  %a = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %vec39, i32 0, i32 2, !dbg !9901
  %25 = load i32, i32* %i, align 4, !dbg !9901
  %idxprom = sext i32 %25 to i64, !dbg !9901
  %arrayidx40 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %a, i64 0, i64 %idxprom, !dbg !9901
  %26 = load %union.tree_node*, %union.tree_node** %arrayidx40, align 8, !dbg !9901
  store %union.tree_node* %26, %union.tree_node** %t, align 8, !dbg !9903
  %27 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !9904
  %base = bitcast %union.tree_node* %27 to %struct.tree_base*, !dbg !9904
  %28 = bitcast %struct.tree_base* %base to i64*, !dbg !9904
  %bf.load = load i64, i64* %28, align 8, !dbg !9904
  %bf.clear = and i64 %bf.load, 65535, !dbg !9904
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9904
  %cmp41 = icmp eq i32 %bf.cast, 53, !dbg !9904
  br i1 %cmp41, label %cond.false43, label %cond.true42, !dbg !9904

cond.true42:                                      ; preds = %for.body
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 6073, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9904
  br label %cond.end44, !dbg !9904

cond.false43:                                     ; preds = %for.body
  br label %cond.end44, !dbg !9904

cond.end44:                                       ; preds = %cond.false43, %cond.true42
  %cond45 = phi i32 [ 0, %cond.true42 ], [ 0, %cond.false43 ], !dbg !9904
  %29 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !9905
  %exp46 = bitcast %union.tree_node* %29 to %struct.tree_exp*, !dbg !9905
  %operands47 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp46, i32 0, i32 3, !dbg !9905
  %arrayidx48 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands47, i64 0, i64 0, !dbg !9905
  %30 = load %union.tree_node*, %union.tree_node** %arrayidx48, align 8, !dbg !9905
  store %union.tree_node* %30, %union.tree_node** %decl, align 8, !dbg !9906
  %31 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !9907
  %base49 = bitcast %union.tree_node* %31 to %struct.tree_base*, !dbg !9907
  %32 = bitcast %struct.tree_base* %base49 to i64*, !dbg !9907
  %bf.load50 = load i64, i64* %32, align 8, !dbg !9907
  %bf.clear51 = and i64 %bf.load50, 65535, !dbg !9907
  %bf.cast52 = trunc i64 %bf.clear51 to i32, !dbg !9907
  %idxprom53 = sext i32 %bf.cast52 to i64, !dbg !9907
  %arrayidx54 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom53, !dbg !9907
  %33 = load i32, i32* %arrayidx54, align 4, !dbg !9907
  %cmp55 = icmp eq i32 %33, 3, !dbg !9907
  br i1 %cmp55, label %cond.false57, label %cond.true56, !dbg !9907

cond.true56:                                      ; preds = %cond.end44
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 6075, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9907
  br label %cond.end58, !dbg !9907

cond.false57:                                     ; preds = %cond.end44
  br label %cond.end58, !dbg !9907

cond.end58:                                       ; preds = %cond.false57, %cond.true56
  %cond59 = phi i32 [ 0, %cond.true56 ], [ 0, %cond.false57 ], !dbg !9907
  %34 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !9908
  %common = bitcast %union.tree_node* %34 to %struct.tree_common*, !dbg !9908
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !9908
  %35 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9908
  %base60 = bitcast %union.tree_node* %35 to %struct.tree_base*, !dbg !9908
  %36 = bitcast %struct.tree_base* %base60 to i64*, !dbg !9908
  %bf.load61 = load i64, i64* %36, align 8, !dbg !9908
  %bf.clear62 = and i64 %bf.load61, 65535, !dbg !9908
  %bf.cast63 = trunc i64 %bf.clear62 to i32, !dbg !9908
  %cmp64 = icmp eq i32 %bf.cast63, 6, !dbg !9908
  br i1 %cmp64, label %cond.false97, label %lor.lhs.false, !dbg !9908

lor.lhs.false:                                    ; preds = %cond.end58
  %37 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !9908
  %common65 = bitcast %union.tree_node* %37 to %struct.tree_common*, !dbg !9908
  %type66 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common65, i32 0, i32 2, !dbg !9908
  %38 = load %union.tree_node*, %union.tree_node** %type66, align 8, !dbg !9908
  %base67 = bitcast %union.tree_node* %38 to %struct.tree_base*, !dbg !9908
  %39 = bitcast %struct.tree_base* %base67 to i64*, !dbg !9908
  %bf.load68 = load i64, i64* %39, align 8, !dbg !9908
  %bf.clear69 = and i64 %bf.load68, 65535, !dbg !9908
  %bf.cast70 = trunc i64 %bf.clear69 to i32, !dbg !9908
  %cmp71 = icmp eq i32 %bf.cast70, 7, !dbg !9908
  br i1 %cmp71, label %cond.false97, label %lor.lhs.false72, !dbg !9908

lor.lhs.false72:                                  ; preds = %lor.lhs.false
  %40 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !9908
  %common73 = bitcast %union.tree_node* %40 to %struct.tree_common*, !dbg !9908
  %type74 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common73, i32 0, i32 2, !dbg !9908
  %41 = load %union.tree_node*, %union.tree_node** %type74, align 8, !dbg !9908
  %base75 = bitcast %union.tree_node* %41 to %struct.tree_base*, !dbg !9908
  %42 = bitcast %struct.tree_base* %base75 to i64*, !dbg !9908
  %bf.load76 = load i64, i64* %42, align 8, !dbg !9908
  %bf.clear77 = and i64 %bf.load76, 65535, !dbg !9908
  %bf.cast78 = trunc i64 %bf.clear77 to i32, !dbg !9908
  %cmp79 = icmp eq i32 %bf.cast78, 8, !dbg !9908
  br i1 %cmp79, label %cond.false97, label %lor.lhs.false80, !dbg !9908

lor.lhs.false80:                                  ; preds = %lor.lhs.false72
  %43 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !9908
  %common81 = bitcast %union.tree_node* %43 to %struct.tree_common*, !dbg !9908
  %type82 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common81, i32 0, i32 2, !dbg !9908
  %44 = load %union.tree_node*, %union.tree_node** %type82, align 8, !dbg !9908
  %base83 = bitcast %union.tree_node* %44 to %struct.tree_base*, !dbg !9908
  %45 = bitcast %struct.tree_base* %base83 to i64*, !dbg !9908
  %bf.load84 = load i64, i64* %45, align 8, !dbg !9908
  %bf.clear85 = and i64 %bf.load84, 65535, !dbg !9908
  %bf.cast86 = trunc i64 %bf.clear85 to i32, !dbg !9908
  %cmp87 = icmp eq i32 %bf.cast86, 10, !dbg !9908
  br i1 %cmp87, label %cond.false97, label %lor.lhs.false88, !dbg !9908

lor.lhs.false88:                                  ; preds = %lor.lhs.false80
  %46 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !9908
  %common89 = bitcast %union.tree_node* %46 to %struct.tree_common*, !dbg !9908
  %type90 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common89, i32 0, i32 2, !dbg !9908
  %47 = load %union.tree_node*, %union.tree_node** %type90, align 8, !dbg !9908
  %base91 = bitcast %union.tree_node* %47 to %struct.tree_base*, !dbg !9908
  %48 = bitcast %struct.tree_base* %base91 to i64*, !dbg !9908
  %bf.load92 = load i64, i64* %48, align 8, !dbg !9908
  %bf.clear93 = and i64 %bf.load92, 65535, !dbg !9908
  %bf.cast94 = trunc i64 %bf.clear93 to i32, !dbg !9908
  %cmp95 = icmp eq i32 %bf.cast94, 12, !dbg !9908
  br i1 %cmp95, label %cond.false97, label %cond.true96, !dbg !9908

cond.true96:                                      ; preds = %lor.lhs.false88
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 6077, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9908
  br label %cond.end98, !dbg !9908

cond.false97:                                     ; preds = %lor.lhs.false88, %lor.lhs.false80, %lor.lhs.false72, %lor.lhs.false, %cond.end58
  br label %cond.end98, !dbg !9908

cond.end98:                                       ; preds = %cond.false97, %cond.true96
  %cond99 = phi i32 [ 0, %cond.true96 ], [ 0, %cond.false97 ], !dbg !9908
  %49 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** @gimplify_omp_ctxp, align 8, !dbg !9909
  %50 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !9911
  %call100 = call zeroext i8 @omp_is_private(%struct.gimplify_omp_ctx* %49, %union.tree_node* %50), !dbg !9912
  %tobool = icmp ne i8 %call100, 0, !dbg !9912
  br i1 %tobool, label %if.then, label %if.else, !dbg !9913

if.then:                                          ; preds = %cond.end98
  %51 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** @gimplify_omp_ctxp, align 8, !dbg !9914
  %52 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !9915
  %call101 = call zeroext i8 @omp_notice_variable(%struct.gimplify_omp_ctx* %51, %union.tree_node* %52, i8 zeroext 1), !dbg !9916
  br label %if.end, !dbg !9916

if.else:                                          ; preds = %cond.end98
  %53 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** @gimplify_omp_ctxp, align 8, !dbg !9917
  %54 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !9918
  call void @omp_add_variable(%struct.gimplify_omp_ctx* %53, %union.tree_node* %54, i32 9), !dbg !9919
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %55 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !9920
  %call102 = call zeroext i8 @is_gimple_reg(%union.tree_node* %55), !dbg !9922
  %tobool103 = icmp ne i8 %call102, 0, !dbg !9922
  br i1 %tobool103, label %if.else113, label %if.then104, !dbg !9923

if.then104:                                       ; preds = %if.end
  %56 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !9924
  %common105 = bitcast %union.tree_node* %56 to %struct.tree_common*, !dbg !9924
  %type106 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common105, i32 0, i32 2, !dbg !9924
  %57 = load %union.tree_node*, %union.tree_node** %type106, align 8, !dbg !9924
  %58 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !9926
  %call107 = call i8* @get_name(%union.tree_node* %58), !dbg !9927
  %call108 = call %union.tree_node* @create_tmp_var(%union.tree_node* %57, i8* %call107), !dbg !9928
  store %union.tree_node* %call108, %union.tree_node** %var, align 8, !dbg !9929
  %59 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !9930
  %60 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !9931
  %exp109 = bitcast %union.tree_node* %60 to %struct.tree_exp*, !dbg !9931
  %operands110 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp109, i32 0, i32 3, !dbg !9931
  %arrayidx111 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands110, i64 0, i64 0, !dbg !9931
  store %union.tree_node* %59, %union.tree_node** %arrayidx111, align 8, !dbg !9932
  %61 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !9933
  %62 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !9933
  %call112 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %61, %union.tree_node* %62), !dbg !9933
  call void @gimplify_seq_add_stmt(%struct.gimple_seq_d** %for_body, %union.gimple_statement_d* %call112), !dbg !9934
  %63 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** @gimplify_omp_ctxp, align 8, !dbg !9935
  %64 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !9936
  call void @omp_add_variable(%struct.gimplify_omp_ctx* %63, %union.tree_node* %64, i32 9), !dbg !9937
  br label %if.end114, !dbg !9938

if.else113:                                       ; preds = %if.end
  %65 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !9939
  store %union.tree_node* %65, %union.tree_node** %var, align 8, !dbg !9940
  br label %if.end114

if.end114:                                        ; preds = %if.else113, %if.then104
  %66 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !9941
  %exp115 = bitcast %union.tree_node* %66 to %struct.tree_exp*, !dbg !9941
  %operands116 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp115, i32 0, i32 3, !dbg !9941
  %arrayidx117 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands116, i64 0, i64 1, !dbg !9941
  %call118 = call i32 @gimplify_expr(%union.tree_node** %arrayidx117, %struct.gimple_seq_d** %for_pre_body, %struct.gimple_seq_d** null, i8 (%union.tree_node*)* @is_gimple_val, i32 1), !dbg !9942
  store i32 %call118, i32* %tret, align 4, !dbg !9943
  %67 = load i32, i32* %ret, align 4, !dbg !9944
  %68 = load i32, i32* %tret, align 4, !dbg !9944
  %cmp119 = icmp slt i32 %67, %68, !dbg !9944
  br i1 %cmp119, label %cond.true120, label %cond.false121, !dbg !9944

cond.true120:                                     ; preds = %if.end114
  %69 = load i32, i32* %ret, align 4, !dbg !9944
  br label %cond.end122, !dbg !9944

cond.false121:                                    ; preds = %if.end114
  %70 = load i32, i32* %tret, align 4, !dbg !9944
  br label %cond.end122, !dbg !9944

cond.end122:                                      ; preds = %cond.false121, %cond.true120
  %cond123 = phi i32 [ %69, %cond.true120 ], [ %70, %cond.false121 ], !dbg !9944
  store i32 %cond123, i32* %ret, align 4, !dbg !9945
  %71 = load i32, i32* %ret, align 4, !dbg !9946
  %cmp124 = icmp eq i32 %71, -2, !dbg !9948
  br i1 %cmp124, label %if.then125, label %if.end126, !dbg !9949

if.then125:                                       ; preds = %cond.end122
  %72 = load i32, i32* %ret, align 4, !dbg !9950
  store i32 %72, i32* %retval, align 4, !dbg !9951
  br label %return, !dbg !9951

if.end126:                                        ; preds = %cond.end122
  %73 = load %union.tree_node*, %union.tree_node** %for_stmt, align 8, !dbg !9952
  %exp127 = bitcast %union.tree_node* %73 to %struct.tree_exp*, !dbg !9952
  %operands128 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp127, i32 0, i32 3, !dbg !9952
  %arrayidx129 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands128, i64 0, i64 3, !dbg !9952
  %74 = load %union.tree_node*, %union.tree_node** %arrayidx129, align 8, !dbg !9952
  %vec130 = bitcast %union.tree_node* %74 to %struct.tree_vec*, !dbg !9952
  %a131 = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %vec130, i32 0, i32 2, !dbg !9952
  %75 = load i32, i32* %i, align 4, !dbg !9952
  %idxprom132 = sext i32 %75 to i64, !dbg !9952
  %arrayidx133 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %a131, i64 0, i64 %idxprom132, !dbg !9952
  %76 = load %union.tree_node*, %union.tree_node** %arrayidx133, align 8, !dbg !9952
  store %union.tree_node* %76, %union.tree_node** %t, align 8, !dbg !9953
  %77 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !9954
  %base134 = bitcast %union.tree_node* %77 to %struct.tree_base*, !dbg !9954
  %78 = bitcast %struct.tree_base* %base134 to i64*, !dbg !9954
  %bf.load135 = load i64, i64* %78, align 8, !dbg !9954
  %bf.clear136 = and i64 %bf.load135, 65535, !dbg !9954
  %bf.cast137 = trunc i64 %bf.clear136 to i32, !dbg !9954
  %idxprom138 = sext i32 %bf.cast137 to i64, !dbg !9954
  %arrayidx139 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom138, !dbg !9954
  %79 = load i32, i32* %arrayidx139, align 4, !dbg !9954
  %cmp140 = icmp eq i32 %79, 5, !dbg !9954
  br i1 %cmp140, label %cond.false142, label %cond.true141, !dbg !9954

cond.true141:                                     ; preds = %if.end126
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 6108, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9954
  br label %cond.end143, !dbg !9954

cond.false142:                                    ; preds = %if.end126
  br label %cond.end143, !dbg !9954

cond.end143:                                      ; preds = %cond.false142, %cond.true141
  %cond144 = phi i32 [ 0, %cond.true141 ], [ 0, %cond.false142 ], !dbg !9954
  %80 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !9955
  %exp145 = bitcast %union.tree_node* %80 to %struct.tree_exp*, !dbg !9955
  %operands146 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp145, i32 0, i32 3, !dbg !9955
  %arrayidx147 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands146, i64 0, i64 0, !dbg !9955
  %81 = load %union.tree_node*, %union.tree_node** %arrayidx147, align 8, !dbg !9955
  %82 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !9955
  %cmp148 = icmp eq %union.tree_node* %81, %82, !dbg !9955
  br i1 %cmp148, label %cond.false150, label %cond.true149, !dbg !9955

cond.true149:                                     ; preds = %cond.end143
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 6109, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9955
  br label %cond.end151, !dbg !9955

cond.false150:                                    ; preds = %cond.end143
  br label %cond.end151, !dbg !9955

cond.end151:                                      ; preds = %cond.false150, %cond.true149
  %cond152 = phi i32 [ 0, %cond.true149 ], [ 0, %cond.false150 ], !dbg !9955
  %83 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !9956
  %exp153 = bitcast %union.tree_node* %83 to %struct.tree_exp*, !dbg !9956
  %operands154 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp153, i32 0, i32 3, !dbg !9956
  %arrayidx155 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands154, i64 0, i64 1, !dbg !9956
  %call156 = call i32 @gimplify_expr(%union.tree_node** %arrayidx155, %struct.gimple_seq_d** %for_pre_body, %struct.gimple_seq_d** null, i8 (%union.tree_node*)* @is_gimple_val, i32 1), !dbg !9957
  store i32 %call156, i32* %tret, align 4, !dbg !9958
  %84 = load i32, i32* %ret, align 4, !dbg !9959
  %85 = load i32, i32* %tret, align 4, !dbg !9959
  %cmp157 = icmp slt i32 %84, %85, !dbg !9959
  br i1 %cmp157, label %cond.true158, label %cond.false159, !dbg !9959

cond.true158:                                     ; preds = %cond.end151
  %86 = load i32, i32* %ret, align 4, !dbg !9959
  br label %cond.end160, !dbg !9959

cond.false159:                                    ; preds = %cond.end151
  %87 = load i32, i32* %tret, align 4, !dbg !9959
  br label %cond.end160, !dbg !9959

cond.end160:                                      ; preds = %cond.false159, %cond.true158
  %cond161 = phi i32 [ %86, %cond.true158 ], [ %87, %cond.false159 ], !dbg !9959
  store i32 %cond161, i32* %ret, align 4, !dbg !9960
  %88 = load %union.tree_node*, %union.tree_node** %for_stmt, align 8, !dbg !9961
  %exp162 = bitcast %union.tree_node* %88 to %struct.tree_exp*, !dbg !9961
  %operands163 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp162, i32 0, i32 3, !dbg !9961
  %arrayidx164 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands163, i64 0, i64 4, !dbg !9961
  %89 = load %union.tree_node*, %union.tree_node** %arrayidx164, align 8, !dbg !9961
  %vec165 = bitcast %union.tree_node* %89 to %struct.tree_vec*, !dbg !9961
  %a166 = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %vec165, i32 0, i32 2, !dbg !9961
  %90 = load i32, i32* %i, align 4, !dbg !9961
  %idxprom167 = sext i32 %90 to i64, !dbg !9961
  %arrayidx168 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %a166, i64 0, i64 %idxprom167, !dbg !9961
  %91 = load %union.tree_node*, %union.tree_node** %arrayidx168, align 8, !dbg !9961
  store %union.tree_node* %91, %union.tree_node** %t, align 8, !dbg !9962
  %92 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !9963
  %base169 = bitcast %union.tree_node* %92 to %struct.tree_base*, !dbg !9963
  %93 = bitcast %struct.tree_base* %base169 to i64*, !dbg !9963
  %bf.load170 = load i64, i64* %93, align 8, !dbg !9963
  %bf.clear171 = and i64 %bf.load170, 65535, !dbg !9963
  %bf.cast172 = trunc i64 %bf.clear171 to i32, !dbg !9963
  switch i32 %bf.cast172, label %sw.default262 [
    i32 126, label %sw.bb
    i32 128, label %sw.bb
    i32 125, label %sw.bb189
    i32 127, label %sw.bb189
    i32 53, label %sw.bb206
  ], !dbg !9964

sw.bb:                                            ; preds = %cond.end160, %cond.end160
  %94 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !9965
  %common173 = bitcast %union.tree_node* %94 to %struct.tree_common*, !dbg !9965
  %type174 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common173, i32 0, i32 2, !dbg !9965
  %95 = load %union.tree_node*, %union.tree_node** %type174, align 8, !dbg !9965
  %call175 = call %union.tree_node* @build_int_cst(%union.tree_node* %95, i64 1), !dbg !9967
  store %union.tree_node* %call175, %union.tree_node** %t, align 8, !dbg !9968
  %96 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !9969
  %common176 = bitcast %union.tree_node* %96 to %struct.tree_common*, !dbg !9969
  %type177 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common176, i32 0, i32 2, !dbg !9969
  %97 = load %union.tree_node*, %union.tree_node** %type177, align 8, !dbg !9969
  %98 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !9969
  %99 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !9969
  %call178 = call %union.tree_node* @build2_stat(i32 63, %union.tree_node* %97, %union.tree_node* %98, %union.tree_node* %99), !dbg !9969
  store %union.tree_node* %call178, %union.tree_node** %t, align 8, !dbg !9970
  %100 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !9971
  %common179 = bitcast %union.tree_node* %100 to %struct.tree_common*, !dbg !9971
  %type180 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common179, i32 0, i32 2, !dbg !9971
  %101 = load %union.tree_node*, %union.tree_node** %type180, align 8, !dbg !9971
  %102 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !9971
  %103 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !9971
  %call181 = call %union.tree_node* @build2_stat(i32 53, %union.tree_node* %101, %union.tree_node* %102, %union.tree_node* %103), !dbg !9971
  store %union.tree_node* %call181, %union.tree_node** %t, align 8, !dbg !9972
  %104 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !9973
  %105 = load %union.tree_node*, %union.tree_node** %for_stmt, align 8, !dbg !9974
  %exp182 = bitcast %union.tree_node* %105 to %struct.tree_exp*, !dbg !9974
  %operands183 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp182, i32 0, i32 3, !dbg !9974
  %arrayidx184 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands183, i64 0, i64 4, !dbg !9974
  %106 = load %union.tree_node*, %union.tree_node** %arrayidx184, align 8, !dbg !9974
  %vec185 = bitcast %union.tree_node* %106 to %struct.tree_vec*, !dbg !9974
  %a186 = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %vec185, i32 0, i32 2, !dbg !9974
  %107 = load i32, i32* %i, align 4, !dbg !9974
  %idxprom187 = sext i32 %107 to i64, !dbg !9974
  %arrayidx188 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %a186, i64 0, i64 %idxprom187, !dbg !9974
  store %union.tree_node* %104, %union.tree_node** %arrayidx188, align 8, !dbg !9975
  br label %sw.epilog263, !dbg !9976

sw.bb189:                                         ; preds = %cond.end160, %cond.end160
  %108 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !9977
  %common190 = bitcast %union.tree_node* %108 to %struct.tree_common*, !dbg !9977
  %type191 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common190, i32 0, i32 2, !dbg !9977
  %109 = load %union.tree_node*, %union.tree_node** %type191, align 8, !dbg !9977
  %call192 = call %union.tree_node* @build_int_cst(%union.tree_node* %109, i64 -1), !dbg !9978
  store %union.tree_node* %call192, %union.tree_node** %t, align 8, !dbg !9979
  %110 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !9980
  %common193 = bitcast %union.tree_node* %110 to %struct.tree_common*, !dbg !9980
  %type194 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common193, i32 0, i32 2, !dbg !9980
  %111 = load %union.tree_node*, %union.tree_node** %type194, align 8, !dbg !9980
  %112 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !9980
  %113 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !9980
  %call195 = call %union.tree_node* @build2_stat(i32 63, %union.tree_node* %111, %union.tree_node* %112, %union.tree_node* %113), !dbg !9980
  store %union.tree_node* %call195, %union.tree_node** %t, align 8, !dbg !9981
  %114 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !9982
  %common196 = bitcast %union.tree_node* %114 to %struct.tree_common*, !dbg !9982
  %type197 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common196, i32 0, i32 2, !dbg !9982
  %115 = load %union.tree_node*, %union.tree_node** %type197, align 8, !dbg !9982
  %116 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !9982
  %117 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !9982
  %call198 = call %union.tree_node* @build2_stat(i32 53, %union.tree_node* %115, %union.tree_node* %116, %union.tree_node* %117), !dbg !9982
  store %union.tree_node* %call198, %union.tree_node** %t, align 8, !dbg !9983
  %118 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !9984
  %119 = load %union.tree_node*, %union.tree_node** %for_stmt, align 8, !dbg !9985
  %exp199 = bitcast %union.tree_node* %119 to %struct.tree_exp*, !dbg !9985
  %operands200 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp199, i32 0, i32 3, !dbg !9985
  %arrayidx201 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands200, i64 0, i64 4, !dbg !9985
  %120 = load %union.tree_node*, %union.tree_node** %arrayidx201, align 8, !dbg !9985
  %vec202 = bitcast %union.tree_node* %120 to %struct.tree_vec*, !dbg !9985
  %a203 = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %vec202, i32 0, i32 2, !dbg !9985
  %121 = load i32, i32* %i, align 4, !dbg !9985
  %idxprom204 = sext i32 %121 to i64, !dbg !9985
  %arrayidx205 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %a203, i64 0, i64 %idxprom204, !dbg !9985
  store %union.tree_node* %118, %union.tree_node** %arrayidx205, align 8, !dbg !9986
  br label %sw.epilog263, !dbg !9987

sw.bb206:                                         ; preds = %cond.end160
  %122 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !9988
  %exp207 = bitcast %union.tree_node* %122 to %struct.tree_exp*, !dbg !9988
  %operands208 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp207, i32 0, i32 3, !dbg !9988
  %arrayidx209 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands208, i64 0, i64 0, !dbg !9988
  %123 = load %union.tree_node*, %union.tree_node** %arrayidx209, align 8, !dbg !9988
  %124 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !9988
  %cmp210 = icmp eq %union.tree_node* %123, %124, !dbg !9988
  br i1 %cmp210, label %cond.false212, label %cond.true211, !dbg !9988

cond.true211:                                     ; preds = %sw.bb206
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 6136, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9988
  br label %cond.end213, !dbg !9988

cond.false212:                                    ; preds = %sw.bb206
  br label %cond.end213, !dbg !9988

cond.end213:                                      ; preds = %cond.false212, %cond.true211
  %cond214 = phi i32 [ 0, %cond.true211 ], [ 0, %cond.false212 ], !dbg !9988
  %125 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !9989
  %126 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !9990
  %exp215 = bitcast %union.tree_node* %126 to %struct.tree_exp*, !dbg !9990
  %operands216 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp215, i32 0, i32 3, !dbg !9990
  %arrayidx217 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands216, i64 0, i64 0, !dbg !9990
  store %union.tree_node* %125, %union.tree_node** %arrayidx217, align 8, !dbg !9991
  %127 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !9992
  %exp218 = bitcast %union.tree_node* %127 to %struct.tree_exp*, !dbg !9992
  %operands219 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp218, i32 0, i32 3, !dbg !9992
  %arrayidx220 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands219, i64 0, i64 1, !dbg !9992
  %128 = load %union.tree_node*, %union.tree_node** %arrayidx220, align 8, !dbg !9992
  store %union.tree_node* %128, %union.tree_node** %t, align 8, !dbg !9993
  %129 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !9994
  %base221 = bitcast %union.tree_node* %129 to %struct.tree_base*, !dbg !9994
  %130 = bitcast %struct.tree_base* %base221 to i64*, !dbg !9994
  %bf.load222 = load i64, i64* %130, align 8, !dbg !9994
  %bf.clear223 = and i64 %bf.load222, 65535, !dbg !9994
  %bf.cast224 = trunc i64 %bf.clear223 to i32, !dbg !9994
  switch i32 %bf.cast224, label %sw.default [
    i32 63, label %sw.bb225
    i32 64, label %sw.bb241
    i32 66, label %sw.bb241
  ], !dbg !9995

sw.bb225:                                         ; preds = %cond.end213
  %131 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !9996
  %exp226 = bitcast %union.tree_node* %131 to %struct.tree_exp*, !dbg !9996
  %operands227 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp226, i32 0, i32 3, !dbg !9996
  %arrayidx228 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands227, i64 0, i64 1, !dbg !9996
  %132 = load %union.tree_node*, %union.tree_node** %arrayidx228, align 8, !dbg !9996
  %133 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !9999
  %cmp229 = icmp eq %union.tree_node* %132, %133, !dbg !10000
  br i1 %cmp229, label %if.then230, label %if.end240, !dbg !10001

if.then230:                                       ; preds = %sw.bb225
  %134 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10002
  %exp231 = bitcast %union.tree_node* %134 to %struct.tree_exp*, !dbg !10002
  %operands232 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp231, i32 0, i32 3, !dbg !10002
  %arrayidx233 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands232, i64 0, i64 0, !dbg !10002
  %135 = load %union.tree_node*, %union.tree_node** %arrayidx233, align 8, !dbg !10002
  %136 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10004
  %exp234 = bitcast %union.tree_node* %136 to %struct.tree_exp*, !dbg !10004
  %operands235 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp234, i32 0, i32 3, !dbg !10004
  %arrayidx236 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands235, i64 0, i64 1, !dbg !10004
  store %union.tree_node* %135, %union.tree_node** %arrayidx236, align 8, !dbg !10005
  %137 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !10006
  %138 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10007
  %exp237 = bitcast %union.tree_node* %138 to %struct.tree_exp*, !dbg !10007
  %operands238 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp237, i32 0, i32 3, !dbg !10007
  %arrayidx239 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands238, i64 0, i64 0, !dbg !10007
  store %union.tree_node* %137, %union.tree_node** %arrayidx239, align 8, !dbg !10008
  br label %sw.epilog, !dbg !10009

if.end240:                                        ; preds = %sw.bb225
  br label %sw.bb241, !dbg !9999

sw.bb241:                                         ; preds = %cond.end213, %cond.end213, %if.end240
  %139 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10010
  %exp242 = bitcast %union.tree_node* %139 to %struct.tree_exp*, !dbg !10010
  %operands243 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp242, i32 0, i32 3, !dbg !10010
  %arrayidx244 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands243, i64 0, i64 0, !dbg !10010
  %140 = load %union.tree_node*, %union.tree_node** %arrayidx244, align 8, !dbg !10010
  %141 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !10010
  %cmp245 = icmp eq %union.tree_node* %140, %141, !dbg !10010
  br i1 %cmp245, label %cond.false247, label %cond.true246, !dbg !10010

cond.true246:                                     ; preds = %sw.bb241
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 6153, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10010
  br label %cond.end248, !dbg !10010

cond.false247:                                    ; preds = %sw.bb241
  br label %cond.end248, !dbg !10010

cond.end248:                                      ; preds = %cond.false247, %cond.true246
  %cond249 = phi i32 [ 0, %cond.true246 ], [ 0, %cond.false247 ], !dbg !10010
  %142 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !10011
  %143 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10012
  %exp250 = bitcast %union.tree_node* %143 to %struct.tree_exp*, !dbg !10012
  %operands251 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp250, i32 0, i32 3, !dbg !10012
  %arrayidx252 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands251, i64 0, i64 0, !dbg !10012
  store %union.tree_node* %142, %union.tree_node** %arrayidx252, align 8, !dbg !10013
  br label %sw.epilog, !dbg !10014

sw.default:                                       ; preds = %cond.end213
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 6157, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10015
  br label %sw.epilog, !dbg !10016

sw.epilog:                                        ; preds = %sw.default, %cond.end248, %if.then230
  %144 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10017
  %exp253 = bitcast %union.tree_node* %144 to %struct.tree_exp*, !dbg !10017
  %operands254 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp253, i32 0, i32 3, !dbg !10017
  %arrayidx255 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands254, i64 0, i64 1, !dbg !10017
  %call256 = call i32 @gimplify_expr(%union.tree_node** %arrayidx255, %struct.gimple_seq_d** %for_pre_body, %struct.gimple_seq_d** null, i8 (%union.tree_node*)* @is_gimple_val, i32 1), !dbg !10018
  store i32 %call256, i32* %tret, align 4, !dbg !10019
  %145 = load i32, i32* %ret, align 4, !dbg !10020
  %146 = load i32, i32* %tret, align 4, !dbg !10020
  %cmp257 = icmp slt i32 %145, %146, !dbg !10020
  br i1 %cmp257, label %cond.true258, label %cond.false259, !dbg !10020

cond.true258:                                     ; preds = %sw.epilog
  %147 = load i32, i32* %ret, align 4, !dbg !10020
  br label %cond.end260, !dbg !10020

cond.false259:                                    ; preds = %sw.epilog
  %148 = load i32, i32* %tret, align 4, !dbg !10020
  br label %cond.end260, !dbg !10020

cond.end260:                                      ; preds = %cond.false259, %cond.true258
  %cond261 = phi i32 [ %147, %cond.true258 ], [ %148, %cond.false259 ], !dbg !10020
  store i32 %cond261, i32* %ret, align 4, !dbg !10021
  br label %sw.epilog263, !dbg !10022

sw.default262:                                    ; preds = %cond.end160
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 6166, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10023
  br label %sw.epilog263, !dbg !10024

sw.epilog263:                                     ; preds = %sw.default262, %cond.end260, %sw.bb189, %sw.bb
  %149 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !10025
  %150 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !10027
  %cmp264 = icmp ne %union.tree_node* %149, %150, !dbg !10028
  br i1 %cmp264, label %if.then272, label %lor.lhs.false265, !dbg !10029

lor.lhs.false265:                                 ; preds = %sw.epilog263
  %151 = load %union.tree_node*, %union.tree_node** %for_stmt, align 8, !dbg !10030
  %exp266 = bitcast %union.tree_node* %151 to %struct.tree_exp*, !dbg !10030
  %operands267 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp266, i32 0, i32 3, !dbg !10030
  %arrayidx268 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands267, i64 0, i64 2, !dbg !10030
  %152 = load %union.tree_node*, %union.tree_node** %arrayidx268, align 8, !dbg !10030
  %vec269 = bitcast %union.tree_node* %152 to %struct.tree_vec*, !dbg !10030
  %length270 = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %vec269, i32 0, i32 1, !dbg !10030
  %153 = load i32, i32* %length270, align 8, !dbg !10030
  %cmp271 = icmp sgt i32 %153, 1, !dbg !10031
  br i1 %cmp271, label %if.then272, label %if.end358, !dbg !10032

if.then272:                                       ; preds = %lor.lhs.false265, %sw.epilog263
  call void @llvm.dbg.declare(metadata %union.tree_node** %c, metadata !10033, metadata !DIExpression()), !dbg !10035
  %154 = load %union.tree_node*, %union.tree_node** %for_stmt, align 8, !dbg !10036
  %exp273 = bitcast %union.tree_node* %154 to %struct.tree_exp*, !dbg !10036
  %operands274 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp273, i32 0, i32 3, !dbg !10036
  %arrayidx275 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands274, i64 0, i64 1, !dbg !10036
  %155 = load %union.tree_node*, %union.tree_node** %arrayidx275, align 8, !dbg !10036
  store %union.tree_node* %155, %union.tree_node** %c, align 8, !dbg !10038
  br label %for.cond276, !dbg !10039

for.cond276:                                      ; preds = %for.inc, %if.then272
  %156 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !10040
  %tobool277 = icmp ne %union.tree_node* %156, null, !dbg !10042
  br i1 %tobool277, label %for.body278, label %for.end, !dbg !10042

for.body278:                                      ; preds = %for.cond276
  %157 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !10043
  %omp_clause = bitcast %union.tree_node* %157 to %struct.tree_omp_clause*, !dbg !10043
  %code = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause, i32 0, i32 2, !dbg !10043
  %158 = load i32, i32* %code, align 4, !dbg !10043
  %cmp279 = icmp eq i32 %158, 4, !dbg !10045
  br i1 %cmp279, label %land.lhs.true, label %if.end356, !dbg !10046

land.lhs.true:                                    ; preds = %for.body278
  %159 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !10047
  %omp_clause280 = bitcast %union.tree_node* %159 to %struct.tree_omp_clause*, !dbg !10047
  %ops = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause280, i32 0, i32 6, !dbg !10047
  %arrayidx281 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %ops, i64 0, i64 0, !dbg !10047
  %160 = load %union.tree_node*, %union.tree_node** %arrayidx281, align 8, !dbg !10047
  %161 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !10048
  %cmp282 = icmp eq %union.tree_node* %160, %161, !dbg !10049
  br i1 %cmp282, label %land.lhs.true283, label %if.end356, !dbg !10050

land.lhs.true283:                                 ; preds = %land.lhs.true
  %162 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !10051
  %omp_clause284 = bitcast %union.tree_node* %162 to %struct.tree_omp_clause*, !dbg !10051
  %gimple_reduction_init = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause284, i32 0, i32 4, !dbg !10051
  %163 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %gimple_reduction_init, align 8, !dbg !10051
  %cmp285 = icmp eq %struct.gimple_seq_d* %163, null, !dbg !10052
  br i1 %cmp285, label %if.then286, label %if.end356, !dbg !10053

if.then286:                                       ; preds = %land.lhs.true283
  %164 = load %union.tree_node*, %union.tree_node** %for_stmt, align 8, !dbg !10054
  %exp287 = bitcast %union.tree_node* %164 to %struct.tree_exp*, !dbg !10054
  %operands288 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp287, i32 0, i32 3, !dbg !10054
  %arrayidx289 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands288, i64 0, i64 4, !dbg !10054
  %165 = load %union.tree_node*, %union.tree_node** %arrayidx289, align 8, !dbg !10054
  %vec290 = bitcast %union.tree_node* %165 to %struct.tree_vec*, !dbg !10054
  %a291 = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %vec290, i32 0, i32 2, !dbg !10054
  %166 = load i32, i32* %i, align 4, !dbg !10054
  %idxprom292 = sext i32 %166 to i64, !dbg !10054
  %arrayidx293 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %a291, i64 0, i64 %idxprom292, !dbg !10054
  %167 = load %union.tree_node*, %union.tree_node** %arrayidx293, align 8, !dbg !10054
  store %union.tree_node* %167, %union.tree_node** %t, align 8, !dbg !10056
  %168 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10057
  %base294 = bitcast %union.tree_node* %168 to %struct.tree_base*, !dbg !10057
  %169 = bitcast %struct.tree_base* %base294 to i64*, !dbg !10057
  %bf.load295 = load i64, i64* %169, align 8, !dbg !10057
  %bf.clear296 = and i64 %bf.load295, 65535, !dbg !10057
  %bf.cast297 = trunc i64 %bf.clear296 to i32, !dbg !10057
  %cmp298 = icmp eq i32 %bf.cast297, 53, !dbg !10057
  br i1 %cmp298, label %cond.false300, label %cond.true299, !dbg !10057

cond.true299:                                     ; preds = %if.then286
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 6178, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10057
  br label %cond.end301, !dbg !10057

cond.false300:                                    ; preds = %if.then286
  br label %cond.end301, !dbg !10057

cond.end301:                                      ; preds = %cond.false300, %cond.true299
  %cond302 = phi i32 [ 0, %cond.true299 ], [ 0, %cond.false300 ], !dbg !10057
  %170 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10058
  %exp303 = bitcast %union.tree_node* %170 to %struct.tree_exp*, !dbg !10058
  %operands304 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp303, i32 0, i32 3, !dbg !10058
  %arrayidx305 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands304, i64 0, i64 0, !dbg !10058
  %171 = load %union.tree_node*, %union.tree_node** %arrayidx305, align 8, !dbg !10058
  %172 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !10058
  %cmp306 = icmp eq %union.tree_node* %171, %172, !dbg !10058
  br i1 %cmp306, label %cond.false308, label %cond.true307, !dbg !10058

cond.true307:                                     ; preds = %cond.end301
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 6179, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10058
  br label %cond.end309, !dbg !10058

cond.false308:                                    ; preds = %cond.end301
  br label %cond.end309, !dbg !10058

cond.end309:                                      ; preds = %cond.false308, %cond.true307
  %cond310 = phi i32 [ 0, %cond.true307 ], [ 0, %cond.false308 ], !dbg !10058
  %173 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10059
  %exp311 = bitcast %union.tree_node* %173 to %struct.tree_exp*, !dbg !10059
  %operands312 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp311, i32 0, i32 3, !dbg !10059
  %arrayidx313 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands312, i64 0, i64 1, !dbg !10059
  %174 = load %union.tree_node*, %union.tree_node** %arrayidx313, align 8, !dbg !10059
  store %union.tree_node* %174, %union.tree_node** %t, align 8, !dbg !10060
  %175 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10061
  %base314 = bitcast %union.tree_node* %175 to %struct.tree_base*, !dbg !10061
  %176 = bitcast %struct.tree_base* %base314 to i64*, !dbg !10061
  %bf.load315 = load i64, i64* %176, align 8, !dbg !10061
  %bf.clear316 = and i64 %bf.load315, 65535, !dbg !10061
  %bf.cast317 = trunc i64 %bf.clear316 to i32, !dbg !10061
  %cmp318 = icmp eq i32 %bf.cast317, 63, !dbg !10061
  br i1 %cmp318, label %cond.false332, label %lor.lhs.false319, !dbg !10061

lor.lhs.false319:                                 ; preds = %cond.end309
  %177 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10061
  %base320 = bitcast %union.tree_node* %177 to %struct.tree_base*, !dbg !10061
  %178 = bitcast %struct.tree_base* %base320 to i64*, !dbg !10061
  %bf.load321 = load i64, i64* %178, align 8, !dbg !10061
  %bf.clear322 = and i64 %bf.load321, 65535, !dbg !10061
  %bf.cast323 = trunc i64 %bf.clear322 to i32, !dbg !10061
  %cmp324 = icmp eq i32 %bf.cast323, 64, !dbg !10061
  br i1 %cmp324, label %cond.false332, label %lor.lhs.false325, !dbg !10061

lor.lhs.false325:                                 ; preds = %lor.lhs.false319
  %179 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10061
  %base326 = bitcast %union.tree_node* %179 to %struct.tree_base*, !dbg !10061
  %180 = bitcast %struct.tree_base* %base326 to i64*, !dbg !10061
  %bf.load327 = load i64, i64* %180, align 8, !dbg !10061
  %bf.clear328 = and i64 %bf.load327, 65535, !dbg !10061
  %bf.cast329 = trunc i64 %bf.clear328 to i32, !dbg !10061
  %cmp330 = icmp eq i32 %bf.cast329, 66, !dbg !10061
  br i1 %cmp330, label %cond.false332, label %cond.true331, !dbg !10061

cond.true331:                                     ; preds = %lor.lhs.false325
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 6183, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10061
  br label %cond.end333, !dbg !10061

cond.false332:                                    ; preds = %lor.lhs.false325, %lor.lhs.false319, %cond.end309
  br label %cond.end333, !dbg !10061

cond.end333:                                      ; preds = %cond.false332, %cond.true331
  %cond334 = phi i32 [ 0, %cond.true331 ], [ 0, %cond.false332 ], !dbg !10061
  %181 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10062
  %exp335 = bitcast %union.tree_node* %181 to %struct.tree_exp*, !dbg !10062
  %operands336 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp335, i32 0, i32 3, !dbg !10062
  %arrayidx337 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands336, i64 0, i64 0, !dbg !10062
  %182 = load %union.tree_node*, %union.tree_node** %arrayidx337, align 8, !dbg !10062
  %183 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !10062
  %cmp338 = icmp eq %union.tree_node* %182, %183, !dbg !10062
  br i1 %cmp338, label %cond.false340, label %cond.true339, !dbg !10062

cond.true339:                                     ; preds = %cond.end333
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 6184, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10062
  br label %cond.end341, !dbg !10062

cond.false340:                                    ; preds = %cond.end333
  br label %cond.end341, !dbg !10062

cond.end341:                                      ; preds = %cond.false340, %cond.true339
  %cond342 = phi i32 [ 0, %cond.true339 ], [ 0, %cond.false340 ], !dbg !10062
  %184 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10063
  %base343 = bitcast %union.tree_node* %184 to %struct.tree_base*, !dbg !10063
  %185 = bitcast %struct.tree_base* %base343 to i64*, !dbg !10063
  %bf.load344 = load i64, i64* %185, align 8, !dbg !10063
  %bf.clear345 = and i64 %bf.load344, 65535, !dbg !10063
  %bf.cast346 = trunc i64 %bf.clear345 to i32, !dbg !10063
  %186 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !10063
  %common347 = bitcast %union.tree_node* %186 to %struct.tree_common*, !dbg !10063
  %type348 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common347, i32 0, i32 2, !dbg !10063
  %187 = load %union.tree_node*, %union.tree_node** %type348, align 8, !dbg !10063
  %188 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !10063
  %189 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10063
  %exp349 = bitcast %union.tree_node* %189 to %struct.tree_exp*, !dbg !10063
  %operands350 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp349, i32 0, i32 3, !dbg !10063
  %arrayidx351 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands350, i64 0, i64 1, !dbg !10063
  %190 = load %union.tree_node*, %union.tree_node** %arrayidx351, align 8, !dbg !10063
  %call352 = call %union.tree_node* @build2_stat(i32 %bf.cast346, %union.tree_node* %187, %union.tree_node* %188, %union.tree_node* %190), !dbg !10063
  store %union.tree_node* %call352, %union.tree_node** %t, align 8, !dbg !10064
  %191 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !10065
  %192 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10066
  %193 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !10067
  %omp_clause353 = bitcast %union.tree_node* %193 to %struct.tree_omp_clause*, !dbg !10067
  %gimple_reduction_init354 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause353, i32 0, i32 4, !dbg !10067
  %call355 = call %union.gimple_statement_d* @gimplify_assign(%union.tree_node* %191, %union.tree_node* %192, %struct.gimple_seq_d** %gimple_reduction_init354), !dbg !10068
  br label %if.end356, !dbg !10069

if.end356:                                        ; preds = %cond.end341, %land.lhs.true283, %land.lhs.true, %for.body278
  br label %for.inc, !dbg !10070

for.inc:                                          ; preds = %if.end356
  %194 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !10071
  %common357 = bitcast %union.tree_node* %194 to %struct.tree_common*, !dbg !10071
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common357, i32 0, i32 1, !dbg !10071
  %195 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !10071
  store %union.tree_node* %195, %union.tree_node** %c, align 8, !dbg !10072
  br label %for.cond276, !dbg !10073, !llvm.loop !10074

for.end:                                          ; preds = %for.cond276
  br label %if.end358, !dbg !10076

if.end358:                                        ; preds = %for.end, %lor.lhs.false265
  br label %for.inc359, !dbg !10077

for.inc359:                                       ; preds = %if.end358
  %196 = load i32, i32* %i, align 4, !dbg !10078
  %inc = add nsw i32 %196, 1, !dbg !10078
  store i32 %inc, i32* %i, align 4, !dbg !10078
  br label %for.cond, !dbg !10079, !llvm.loop !10080

for.end360:                                       ; preds = %for.cond
  %197 = load %union.tree_node*, %union.tree_node** %for_stmt, align 8, !dbg !10082
  %exp361 = bitcast %union.tree_node* %197 to %struct.tree_exp*, !dbg !10082
  %operands362 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp361, i32 0, i32 3, !dbg !10082
  %arrayidx363 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands362, i64 0, i64 0, !dbg !10082
  %198 = load %union.tree_node*, %union.tree_node** %arrayidx363, align 8, !dbg !10082
  call void @gimplify_and_add(%union.tree_node* %198, %struct.gimple_seq_d** %for_body), !dbg !10083
  %199 = load %union.tree_node*, %union.tree_node** %for_stmt, align 8, !dbg !10084
  %exp364 = bitcast %union.tree_node* %199 to %struct.tree_exp*, !dbg !10084
  %operands365 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp364, i32 0, i32 3, !dbg !10084
  %arrayidx366 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands365, i64 0, i64 1, !dbg !10084
  call void @gimplify_adjust_omp_clauses(%union.tree_node** %arrayidx366), !dbg !10085
  %200 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %for_body, align 8, !dbg !10086
  %201 = load %union.tree_node*, %union.tree_node** %for_stmt, align 8, !dbg !10087
  %exp367 = bitcast %union.tree_node* %201 to %struct.tree_exp*, !dbg !10087
  %operands368 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp367, i32 0, i32 3, !dbg !10087
  %arrayidx369 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands368, i64 0, i64 1, !dbg !10087
  %202 = load %union.tree_node*, %union.tree_node** %arrayidx369, align 8, !dbg !10087
  %203 = load %union.tree_node*, %union.tree_node** %for_stmt, align 8, !dbg !10088
  %exp370 = bitcast %union.tree_node* %203 to %struct.tree_exp*, !dbg !10088
  %operands371 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp370, i32 0, i32 3, !dbg !10088
  %arrayidx372 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands371, i64 0, i64 2, !dbg !10088
  %204 = load %union.tree_node*, %union.tree_node** %arrayidx372, align 8, !dbg !10088
  %vec373 = bitcast %union.tree_node* %204 to %struct.tree_vec*, !dbg !10088
  %length374 = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %vec373, i32 0, i32 1, !dbg !10088
  %205 = load i32, i32* %length374, align 8, !dbg !10088
  %conv = sext i32 %205 to i64, !dbg !10088
  %206 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %for_pre_body, align 8, !dbg !10089
  %call375 = call %union.gimple_statement_d* @gimple_build_omp_for(%struct.gimple_seq_d* %200, %union.tree_node* %202, i64 %conv, %struct.gimple_seq_d* %206), !dbg !10090
  store %union.gimple_statement_d* %call375, %union.gimple_statement_d** %gfor, align 8, !dbg !10091
  store i32 0, i32* %i, align 4, !dbg !10092
  br label %for.cond376, !dbg !10094

for.cond376:                                      ; preds = %for.inc427, %for.end360
  %207 = load i32, i32* %i, align 4, !dbg !10095
  %208 = load %union.tree_node*, %union.tree_node** %for_stmt, align 8, !dbg !10097
  %exp377 = bitcast %union.tree_node* %208 to %struct.tree_exp*, !dbg !10097
  %operands378 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp377, i32 0, i32 3, !dbg !10097
  %arrayidx379 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands378, i64 0, i64 2, !dbg !10097
  %209 = load %union.tree_node*, %union.tree_node** %arrayidx379, align 8, !dbg !10097
  %vec380 = bitcast %union.tree_node* %209 to %struct.tree_vec*, !dbg !10097
  %length381 = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %vec380, i32 0, i32 1, !dbg !10097
  %210 = load i32, i32* %length381, align 8, !dbg !10097
  %cmp382 = icmp slt i32 %207, %210, !dbg !10098
  br i1 %cmp382, label %for.body384, label %for.end429, !dbg !10099

for.body384:                                      ; preds = %for.cond376
  %211 = load %union.tree_node*, %union.tree_node** %for_stmt, align 8, !dbg !10100
  %exp385 = bitcast %union.tree_node* %211 to %struct.tree_exp*, !dbg !10100
  %operands386 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp385, i32 0, i32 3, !dbg !10100
  %arrayidx387 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands386, i64 0, i64 2, !dbg !10100
  %212 = load %union.tree_node*, %union.tree_node** %arrayidx387, align 8, !dbg !10100
  %vec388 = bitcast %union.tree_node* %212 to %struct.tree_vec*, !dbg !10100
  %a389 = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %vec388, i32 0, i32 2, !dbg !10100
  %213 = load i32, i32* %i, align 4, !dbg !10100
  %idxprom390 = sext i32 %213 to i64, !dbg !10100
  %arrayidx391 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %a389, i64 0, i64 %idxprom390, !dbg !10100
  %214 = load %union.tree_node*, %union.tree_node** %arrayidx391, align 8, !dbg !10100
  store %union.tree_node* %214, %union.tree_node** %t, align 8, !dbg !10102
  %215 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gfor, align 8, !dbg !10103
  %216 = load i32, i32* %i, align 4, !dbg !10104
  %conv392 = sext i32 %216 to i64, !dbg !10104
  %217 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10105
  %exp393 = bitcast %union.tree_node* %217 to %struct.tree_exp*, !dbg !10105
  %operands394 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp393, i32 0, i32 3, !dbg !10105
  %arrayidx395 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands394, i64 0, i64 0, !dbg !10105
  %218 = load %union.tree_node*, %union.tree_node** %arrayidx395, align 8, !dbg !10105
  call void @gimple_omp_for_set_index(%union.gimple_statement_d* %215, i64 %conv392, %union.tree_node* %218), !dbg !10106
  %219 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gfor, align 8, !dbg !10107
  %220 = load i32, i32* %i, align 4, !dbg !10108
  %conv396 = sext i32 %220 to i64, !dbg !10108
  %221 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10109
  %exp397 = bitcast %union.tree_node* %221 to %struct.tree_exp*, !dbg !10109
  %operands398 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp397, i32 0, i32 3, !dbg !10109
  %arrayidx399 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands398, i64 0, i64 1, !dbg !10109
  %222 = load %union.tree_node*, %union.tree_node** %arrayidx399, align 8, !dbg !10109
  call void @gimple_omp_for_set_initial(%union.gimple_statement_d* %219, i64 %conv396, %union.tree_node* %222), !dbg !10110
  %223 = load %union.tree_node*, %union.tree_node** %for_stmt, align 8, !dbg !10111
  %exp400 = bitcast %union.tree_node* %223 to %struct.tree_exp*, !dbg !10111
  %operands401 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp400, i32 0, i32 3, !dbg !10111
  %arrayidx402 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands401, i64 0, i64 3, !dbg !10111
  %224 = load %union.tree_node*, %union.tree_node** %arrayidx402, align 8, !dbg !10111
  %vec403 = bitcast %union.tree_node* %224 to %struct.tree_vec*, !dbg !10111
  %a404 = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %vec403, i32 0, i32 2, !dbg !10111
  %225 = load i32, i32* %i, align 4, !dbg !10111
  %idxprom405 = sext i32 %225 to i64, !dbg !10111
  %arrayidx406 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %a404, i64 0, i64 %idxprom405, !dbg !10111
  %226 = load %union.tree_node*, %union.tree_node** %arrayidx406, align 8, !dbg !10111
  store %union.tree_node* %226, %union.tree_node** %t, align 8, !dbg !10112
  %227 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gfor, align 8, !dbg !10113
  %228 = load i32, i32* %i, align 4, !dbg !10114
  %conv407 = sext i32 %228 to i64, !dbg !10114
  %229 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10115
  %base408 = bitcast %union.tree_node* %229 to %struct.tree_base*, !dbg !10115
  %230 = bitcast %struct.tree_base* %base408 to i64*, !dbg !10115
  %bf.load409 = load i64, i64* %230, align 8, !dbg !10115
  %bf.clear410 = and i64 %bf.load409, 65535, !dbg !10115
  %bf.cast411 = trunc i64 %bf.clear410 to i32, !dbg !10115
  call void @gimple_omp_for_set_cond(%union.gimple_statement_d* %227, i64 %conv407, i32 %bf.cast411), !dbg !10116
  %231 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gfor, align 8, !dbg !10117
  %232 = load i32, i32* %i, align 4, !dbg !10118
  %conv412 = sext i32 %232 to i64, !dbg !10118
  %233 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10119
  %exp413 = bitcast %union.tree_node* %233 to %struct.tree_exp*, !dbg !10119
  %operands414 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp413, i32 0, i32 3, !dbg !10119
  %arrayidx415 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands414, i64 0, i64 1, !dbg !10119
  %234 = load %union.tree_node*, %union.tree_node** %arrayidx415, align 8, !dbg !10119
  call void @gimple_omp_for_set_final(%union.gimple_statement_d* %231, i64 %conv412, %union.tree_node* %234), !dbg !10120
  %235 = load %union.tree_node*, %union.tree_node** %for_stmt, align 8, !dbg !10121
  %exp416 = bitcast %union.tree_node* %235 to %struct.tree_exp*, !dbg !10121
  %operands417 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp416, i32 0, i32 3, !dbg !10121
  %arrayidx418 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands417, i64 0, i64 4, !dbg !10121
  %236 = load %union.tree_node*, %union.tree_node** %arrayidx418, align 8, !dbg !10121
  %vec419 = bitcast %union.tree_node* %236 to %struct.tree_vec*, !dbg !10121
  %a420 = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %vec419, i32 0, i32 2, !dbg !10121
  %237 = load i32, i32* %i, align 4, !dbg !10121
  %idxprom421 = sext i32 %237 to i64, !dbg !10121
  %arrayidx422 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %a420, i64 0, i64 %idxprom421, !dbg !10121
  %238 = load %union.tree_node*, %union.tree_node** %arrayidx422, align 8, !dbg !10121
  store %union.tree_node* %238, %union.tree_node** %t, align 8, !dbg !10122
  %239 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gfor, align 8, !dbg !10123
  %240 = load i32, i32* %i, align 4, !dbg !10124
  %conv423 = sext i32 %240 to i64, !dbg !10124
  %241 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10125
  %exp424 = bitcast %union.tree_node* %241 to %struct.tree_exp*, !dbg !10125
  %operands425 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp424, i32 0, i32 3, !dbg !10125
  %arrayidx426 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands425, i64 0, i64 1, !dbg !10125
  %242 = load %union.tree_node*, %union.tree_node** %arrayidx426, align 8, !dbg !10125
  call void @gimple_omp_for_set_incr(%union.gimple_statement_d* %239, i64 %conv423, %union.tree_node* %242), !dbg !10126
  br label %for.inc427, !dbg !10127

for.inc427:                                       ; preds = %for.body384
  %243 = load i32, i32* %i, align 4, !dbg !10128
  %inc428 = add nsw i32 %243, 1, !dbg !10128
  store i32 %inc428, i32* %i, align 4, !dbg !10128
  br label %for.cond376, !dbg !10129, !llvm.loop !10130

for.end429:                                       ; preds = %for.cond376
  %244 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !10132
  %245 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gfor, align 8, !dbg !10133
  call void @gimplify_seq_add_stmt(%struct.gimple_seq_d** %244, %union.gimple_statement_d* %245), !dbg !10134
  %246 = load i32, i32* %ret, align 4, !dbg !10135
  %cmp430 = icmp eq i32 %246, 1, !dbg !10136
  %247 = zext i1 %cmp430 to i64, !dbg !10135
  %cond432 = select i1 %cmp430, i32 1, i32 -2, !dbg !10135
  store i32 %cond432, i32* %retval, align 4, !dbg !10137
  br label %return, !dbg !10137

return:                                           ; preds = %for.end429, %if.then125
  %248 = load i32, i32* %retval, align 4, !dbg !10138
  ret i32 %248, !dbg !10138
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimplify_omp_workshare(%union.tree_node** %expr_p, %struct.gimple_seq_d** %pre_p) #0 !dbg !10139 {
entry:
  %expr_p.addr = alloca %union.tree_node**, align 8
  %pre_p.addr = alloca %struct.gimple_seq_d**, align 8
  %expr = alloca %union.tree_node*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %body = alloca %struct.gimple_seq_d*, align 8
  store %union.tree_node** %expr_p, %union.tree_node*** %expr_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %expr_p.addr, metadata !10140, metadata !DIExpression()), !dbg !10141
  store %struct.gimple_seq_d** %pre_p, %struct.gimple_seq_d*** %pre_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %pre_p.addr, metadata !10142, metadata !DIExpression()), !dbg !10143
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr, metadata !10144, metadata !DIExpression()), !dbg !10145
  %0 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !10146
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !10147
  store %union.tree_node* %1, %union.tree_node** %expr, align 8, !dbg !10145
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !10148, metadata !DIExpression()), !dbg !10149
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %body, metadata !10150, metadata !DIExpression()), !dbg !10151
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %body, align 8, !dbg !10151
  %2 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !10152
  %exp = bitcast %union.tree_node* %2 to %struct.tree_exp*, !dbg !10152
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !10152
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !10152
  %3 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !10153
  call void @gimplify_scan_omp_clauses(%union.tree_node** %arrayidx, %struct.gimple_seq_d** %3, i32 0), !dbg !10154
  %4 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !10155
  %exp1 = bitcast %union.tree_node* %4 to %struct.tree_exp*, !dbg !10155
  %operands2 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 3, !dbg !10155
  %arrayidx3 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2, i64 0, i64 0, !dbg !10155
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx3, align 8, !dbg !10155
  call void @gimplify_and_add(%union.tree_node* %5, %struct.gimple_seq_d** %body), !dbg !10156
  %6 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !10157
  %exp4 = bitcast %union.tree_node* %6 to %struct.tree_exp*, !dbg !10157
  %operands5 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4, i32 0, i32 3, !dbg !10157
  %arrayidx6 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5, i64 0, i64 1, !dbg !10157
  call void @gimplify_adjust_omp_clauses(%union.tree_node** %arrayidx6), !dbg !10158
  %7 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !10159
  %base = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !10159
  %8 = bitcast %struct.tree_base* %base to i64*, !dbg !10159
  %bf.load = load i64, i64* %8, align 8, !dbg !10159
  %bf.clear = and i64 %bf.load, 65535, !dbg !10159
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !10159
  %cmp = icmp eq i32 %bf.cast, 156, !dbg !10161
  br i1 %cmp, label %if.then, label %if.else, !dbg !10162

if.then:                                          ; preds = %entry
  %9 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %body, align 8, !dbg !10163
  %10 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !10164
  %exp7 = bitcast %union.tree_node* %10 to %struct.tree_exp*, !dbg !10164
  %operands8 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp7, i32 0, i32 3, !dbg !10164
  %arrayidx9 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands8, i64 0, i64 1, !dbg !10164
  %11 = load %union.tree_node*, %union.tree_node** %arrayidx9, align 8, !dbg !10164
  %call = call %union.gimple_statement_d* @gimple_build_omp_sections(%struct.gimple_seq_d* %9, %union.tree_node* %11), !dbg !10165
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %stmt, align 8, !dbg !10166
  br label %if.end21, !dbg !10167

if.else:                                          ; preds = %entry
  %12 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !10168
  %base10 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !10168
  %13 = bitcast %struct.tree_base* %base10 to i64*, !dbg !10168
  %bf.load11 = load i64, i64* %13, align 8, !dbg !10168
  %bf.clear12 = and i64 %bf.load11, 65535, !dbg !10168
  %bf.cast13 = trunc i64 %bf.clear12 to i32, !dbg !10168
  %cmp14 = icmp eq i32 %bf.cast13, 157, !dbg !10170
  br i1 %cmp14, label %if.then15, label %if.else20, !dbg !10171

if.then15:                                        ; preds = %if.else
  %14 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %body, align 8, !dbg !10172
  %15 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !10173
  %exp16 = bitcast %union.tree_node* %15 to %struct.tree_exp*, !dbg !10173
  %operands17 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp16, i32 0, i32 3, !dbg !10173
  %arrayidx18 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands17, i64 0, i64 1, !dbg !10173
  %16 = load %union.tree_node*, %union.tree_node** %arrayidx18, align 8, !dbg !10173
  %call19 = call %union.gimple_statement_d* @gimple_build_omp_single(%struct.gimple_seq_d* %14, %union.tree_node* %16), !dbg !10174
  store %union.gimple_statement_d* %call19, %union.gimple_statement_d** %stmt, align 8, !dbg !10175
  br label %if.end, !dbg !10176

if.else20:                                        ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 6236, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10177
  br label %if.end

if.end:                                           ; preds = %if.else20, %if.then15
  br label %if.end21

if.end21:                                         ; preds = %if.end, %if.then
  %17 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !10178
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !10179
  call void @gimplify_seq_add_stmt(%struct.gimple_seq_d** %17, %union.gimple_statement_d* %18), !dbg !10180
  ret void, !dbg !10181
}

declare dso_local %union.gimple_statement_d* @gimple_build_omp_section(%struct.gimple_seq_d*) #3

declare dso_local %union.gimple_statement_d* @gimple_build_omp_master(%struct.gimple_seq_d*) #3

declare dso_local %union.gimple_statement_d* @gimple_build_omp_ordered(%struct.gimple_seq_d*) #3

declare dso_local %union.gimple_statement_d* @gimple_build_omp_critical(%struct.gimple_seq_d*, %union.tree_node*) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimplify_omp_atomic(%union.tree_node** %expr_p, %struct.gimple_seq_d** %pre_p) #0 !dbg !10182 {
entry:
  %retval = alloca i32, align 4
  %expr_p.addr = alloca %union.tree_node**, align 8
  %pre_p.addr = alloca %struct.gimple_seq_d**, align 8
  %addr = alloca %union.tree_node*, align 8
  %rhs = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  %tmp_load = alloca %union.tree_node*, align 8
  store %union.tree_node** %expr_p, %union.tree_node*** %expr_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %expr_p.addr, metadata !10183, metadata !DIExpression()), !dbg !10184
  store %struct.gimple_seq_d** %pre_p, %struct.gimple_seq_d*** %pre_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %pre_p.addr, metadata !10185, metadata !DIExpression()), !dbg !10186
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr, metadata !10187, metadata !DIExpression()), !dbg !10188
  %0 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !10189
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !10189
  %exp = bitcast %union.tree_node* %1 to %struct.tree_exp*, !dbg !10189
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !10189
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !10189
  %2 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !10189
  store %union.tree_node* %2, %union.tree_node** %addr, align 8, !dbg !10188
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs, metadata !10190, metadata !DIExpression()), !dbg !10191
  %3 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !10192
  %4 = load %union.tree_node*, %union.tree_node** %3, align 8, !dbg !10192
  %exp1 = bitcast %union.tree_node* %4 to %struct.tree_exp*, !dbg !10192
  %operands2 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 3, !dbg !10192
  %arrayidx3 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2, i64 0, i64 1, !dbg !10192
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx3, align 8, !dbg !10192
  store %union.tree_node* %5, %union.tree_node** %rhs, align 8, !dbg !10191
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !10193, metadata !DIExpression()), !dbg !10194
  %6 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !10195
  %common = bitcast %union.tree_node* %6 to %struct.tree_common*, !dbg !10195
  %type4 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !10195
  %7 = load %union.tree_node*, %union.tree_node** %type4, align 8, !dbg !10195
  %common5 = bitcast %union.tree_node* %7 to %struct.tree_common*, !dbg !10195
  %type6 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5, i32 0, i32 2, !dbg !10195
  %8 = load %union.tree_node*, %union.tree_node** %type6, align 8, !dbg !10195
  %type7 = bitcast %union.tree_node* %8 to %struct.tree_type*, !dbg !10195
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type7, i32 0, i32 16, !dbg !10195
  %9 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !10195
  store %union.tree_node* %9, %union.tree_node** %type, align 8, !dbg !10194
  call void @llvm.dbg.declare(metadata %union.tree_node** %tmp_load, metadata !10196, metadata !DIExpression()), !dbg !10197
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10198
  %call = call %union.tree_node* @create_tmp_var(%union.tree_node* %10, i8* null), !dbg !10199
  store %union.tree_node* %call, %union.tree_node** %tmp_load, align 8, !dbg !10200
  %11 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10201
  %base = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !10201
  %12 = bitcast %struct.tree_base* %base to i64*, !dbg !10201
  %bf.load = load i64, i64* %12, align 8, !dbg !10201
  %bf.clear = and i64 %bf.load, 65535, !dbg !10201
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !10201
  %cmp = icmp eq i32 %bf.cast, 13, !dbg !10203
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !10204

lor.lhs.false:                                    ; preds = %entry
  %13 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10205
  %base8 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !10205
  %14 = bitcast %struct.tree_base* %base8 to i64*, !dbg !10205
  %bf.load9 = load i64, i64* %14, align 8, !dbg !10205
  %bf.clear10 = and i64 %bf.load9, 65535, !dbg !10205
  %bf.cast11 = trunc i64 %bf.clear10 to i32, !dbg !10205
  %cmp12 = icmp eq i32 %bf.cast11, 14, !dbg !10206
  br i1 %cmp12, label %if.then, label %if.end, !dbg !10207

if.then:                                          ; preds = %lor.lhs.false, %entry
  %15 = load %union.tree_node*, %union.tree_node** %tmp_load, align 8, !dbg !10208
  %decl_common = bitcast %union.tree_node* %15 to %struct.tree_decl_common*, !dbg !10208
  %gimple_reg_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !10208
  %16 = bitcast i40* %gimple_reg_flag to i64*, !dbg !10208
  %bf.load13 = load i64, i64* %16, align 8, !dbg !10209
  %bf.clear14 = and i64 %bf.load13, -134217729, !dbg !10209
  %bf.set = or i64 %bf.clear14, 134217728, !dbg !10209
  store i64 %bf.set, i64* %16, align 8, !dbg !10209
  br label %if.end, !dbg !10208

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %17 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !10210
  %18 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !10212
  %19 = load %union.tree_node*, %union.tree_node** %tmp_load, align 8, !dbg !10213
  %call15 = call i32 @goa_stabilize_expr(%union.tree_node** %rhs, %struct.gimple_seq_d** %17, %union.tree_node* %18, %union.tree_node* %19), !dbg !10214
  %cmp16 = icmp slt i32 %call15, 0, !dbg !10215
  br i1 %cmp16, label %if.then17, label %if.end18, !dbg !10216

if.then17:                                        ; preds = %if.end
  store i32 -2, i32* %retval, align 4, !dbg !10217
  br label %return, !dbg !10217

if.end18:                                         ; preds = %if.end
  %20 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !10218
  %call19 = call i32 @gimplify_expr(%union.tree_node** %addr, %struct.gimple_seq_d** %20, %struct.gimple_seq_d** null, i8 (%union.tree_node*)* @is_gimple_val, i32 1), !dbg !10220
  %cmp20 = icmp ne i32 %call19, 1, !dbg !10221
  br i1 %cmp20, label %if.then21, label %if.end22, !dbg !10222

if.then21:                                        ; preds = %if.end18
  store i32 -2, i32* %retval, align 4, !dbg !10223
  br label %return, !dbg !10223

if.end22:                                         ; preds = %if.end18
  %21 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !10224
  %22 = load %union.tree_node*, %union.tree_node** %tmp_load, align 8, !dbg !10225
  %23 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !10226
  %call23 = call %union.gimple_statement_d* @gimple_build_omp_atomic_load(%union.tree_node* %22, %union.tree_node* %23), !dbg !10227
  call void @gimplify_seq_add_stmt(%struct.gimple_seq_d** %21, %union.gimple_statement_d* %call23), !dbg !10228
  %24 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !10229
  %call24 = call i32 @gimplify_expr(%union.tree_node** %rhs, %struct.gimple_seq_d** %24, %struct.gimple_seq_d** null, i8 (%union.tree_node*)* @is_gimple_val, i32 1), !dbg !10231
  %cmp25 = icmp ne i32 %call24, 1, !dbg !10232
  br i1 %cmp25, label %if.then26, label %if.end27, !dbg !10233

if.then26:                                        ; preds = %if.end22
  store i32 -2, i32* %retval, align 4, !dbg !10234
  br label %return, !dbg !10234

if.end27:                                         ; preds = %if.end22
  %25 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !10235
  %26 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !10236
  %call28 = call %union.gimple_statement_d* @gimple_build_omp_atomic_store(%union.tree_node* %26), !dbg !10237
  call void @gimplify_seq_add_stmt(%struct.gimple_seq_d** %25, %union.gimple_statement_d* %call28), !dbg !10238
  %27 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !10239
  store %union.tree_node* null, %union.tree_node** %27, align 8, !dbg !10240
  store i32 1, i32* %retval, align 4, !dbg !10241
  br label %return, !dbg !10241

return:                                           ; preds = %if.end27, %if.then26, %if.then21, %if.then17
  %28 = load i32, i32* %retval, align 4, !dbg !10242
  ret i32 %28, !dbg !10242
}

declare dso_local %union.tree_node* @maybe_fold_offset_to_address(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #3

declare dso_local i32 @vector_type_mode(%union.tree_node*) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimplify_scalar_mode_aggregate_compare(%union.tree_node** %expr_p) #0 !dbg !10243 {
entry:
  %expr_p.addr = alloca %union.tree_node**, align 8
  %loc = alloca i32, align 4
  %op0 = alloca %union.tree_node*, align 8
  %op1 = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  %scalar_type = alloca %union.tree_node*, align 8
  store %union.tree_node** %expr_p, %union.tree_node*** %expr_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %expr_p.addr, metadata !10244, metadata !DIExpression()), !dbg !10245
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !10246, metadata !DIExpression()), !dbg !10247
  %0 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !10248
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !10248
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !10248
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !10248
  %bf.load = load i64, i64* %2, align 8, !dbg !10248
  %bf.clear = and i64 %bf.load, 65535, !dbg !10248
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !10248
  %idxprom = sext i32 %bf.cast to i64, !dbg !10248
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !10248
  %3 = load i32, i32* %arrayidx, align 4, !dbg !10248
  %cmp = icmp uge i32 %3, 4, !dbg !10248
  br i1 %cmp, label %land.lhs.true, label %cond.false, !dbg !10248

land.lhs.true:                                    ; preds = %entry
  %4 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !10248
  %5 = load %union.tree_node*, %union.tree_node** %4, align 8, !dbg !10248
  %base1 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !10248
  %6 = bitcast %struct.tree_base* %base1 to i64*, !dbg !10248
  %bf.load2 = load i64, i64* %6, align 8, !dbg !10248
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !10248
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !10248
  %idxprom5 = sext i32 %bf.cast4 to i64, !dbg !10248
  %arrayidx6 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom5, !dbg !10248
  %7 = load i32, i32* %arrayidx6, align 4, !dbg !10248
  %cmp7 = icmp ule i32 %7, 10, !dbg !10248
  br i1 %cmp7, label %cond.true, label %cond.false, !dbg !10248

cond.true:                                        ; preds = %land.lhs.true
  %8 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !10248
  %9 = load %union.tree_node*, %union.tree_node** %8, align 8, !dbg !10248
  %exp = bitcast %union.tree_node* %9 to %struct.tree_exp*, !dbg !10248
  %locus = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 1, !dbg !10248
  %10 = load i32, i32* %locus, align 8, !dbg !10248
  br label %cond.end, !dbg !10248

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !10248

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %10, %cond.true ], [ 0, %cond.false ], !dbg !10248
  store i32 %cond, i32* %loc, align 4, !dbg !10247
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0, metadata !10249, metadata !DIExpression()), !dbg !10250
  %11 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !10251
  %12 = load %union.tree_node*, %union.tree_node** %11, align 8, !dbg !10251
  %exp8 = bitcast %union.tree_node* %12 to %struct.tree_exp*, !dbg !10251
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp8, i32 0, i32 3, !dbg !10251
  %arrayidx9 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !10251
  %13 = load %union.tree_node*, %union.tree_node** %arrayidx9, align 8, !dbg !10251
  store %union.tree_node* %13, %union.tree_node** %op0, align 8, !dbg !10250
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1, metadata !10252, metadata !DIExpression()), !dbg !10253
  %14 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !10254
  %15 = load %union.tree_node*, %union.tree_node** %14, align 8, !dbg !10254
  %exp10 = bitcast %union.tree_node* %15 to %struct.tree_exp*, !dbg !10254
  %operands11 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp10, i32 0, i32 3, !dbg !10254
  %arrayidx12 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands11, i64 0, i64 1, !dbg !10254
  %16 = load %union.tree_node*, %union.tree_node** %arrayidx12, align 8, !dbg !10254
  store %union.tree_node* %16, %union.tree_node** %op1, align 8, !dbg !10253
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !10255, metadata !DIExpression()), !dbg !10256
  %17 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !10257
  %common = bitcast %union.tree_node* %17 to %struct.tree_common*, !dbg !10257
  %type13 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !10257
  %18 = load %union.tree_node*, %union.tree_node** %type13, align 8, !dbg !10257
  store %union.tree_node* %18, %union.tree_node** %type, align 8, !dbg !10256
  call void @llvm.dbg.declare(metadata %union.tree_node** %scalar_type, metadata !10258, metadata !DIExpression()), !dbg !10259
  %19 = load %union.tree_node* (i32, i32)*, %union.tree_node* (i32, i32)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 34, i32 2), align 8, !dbg !10260
  %20 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10261
  %base14 = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !10261
  %21 = bitcast %struct.tree_base* %base14 to i64*, !dbg !10261
  %bf.load15 = load i64, i64* %21, align 8, !dbg !10261
  %bf.clear16 = and i64 %bf.load15, 65535, !dbg !10261
  %bf.cast17 = trunc i64 %bf.clear16 to i32, !dbg !10261
  %cmp18 = icmp eq i32 %bf.cast17, 14, !dbg !10261
  br i1 %cmp18, label %cond.true19, label %cond.false20, !dbg !10261

cond.true19:                                      ; preds = %cond.end
  %22 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10261
  %call = call i32 @vector_type_mode(%union.tree_node* %22), !dbg !10261
  br label %cond.end24, !dbg !10261

cond.false20:                                     ; preds = %cond.end
  %23 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10261
  %type21 = bitcast %union.tree_node* %23 to %struct.tree_type*, !dbg !10261
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type21, i32 0, i32 6, !dbg !10261
  %bf.load22 = load i32, i32* %mode, align 4, !dbg !10261
  %bf.lshr = lshr i32 %bf.load22, 16, !dbg !10261
  %bf.clear23 = and i32 %bf.lshr, 255, !dbg !10261
  br label %cond.end24, !dbg !10261

cond.end24:                                       ; preds = %cond.false20, %cond.true19
  %cond25 = phi i32 [ %call, %cond.true19 ], [ %bf.clear23, %cond.false20 ], !dbg !10261
  %call26 = call %union.tree_node* %19(i32 %cond25, i32 1), !dbg !10262
  store %union.tree_node* %call26, %union.tree_node** %scalar_type, align 8, !dbg !10259
  %24 = load i32, i32* %loc, align 4, !dbg !10263
  %25 = load %union.tree_node*, %union.tree_node** %scalar_type, align 8, !dbg !10263
  %26 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !10263
  %call27 = call %union.tree_node* @fold_build1_stat_loc(i32 %24, i32 118, %union.tree_node* %25, %union.tree_node* %26), !dbg !10263
  store %union.tree_node* %call27, %union.tree_node** %op0, align 8, !dbg !10264
  %27 = load i32, i32* %loc, align 4, !dbg !10265
  %28 = load %union.tree_node*, %union.tree_node** %scalar_type, align 8, !dbg !10265
  %29 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !10265
  %call28 = call %union.tree_node* @fold_build1_stat_loc(i32 %27, i32 118, %union.tree_node* %28, %union.tree_node* %29), !dbg !10265
  store %union.tree_node* %call28, %union.tree_node** %op1, align 8, !dbg !10266
  %30 = load i32, i32* %loc, align 4, !dbg !10267
  %31 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !10267
  %32 = load %union.tree_node*, %union.tree_node** %31, align 8, !dbg !10267
  %base29 = bitcast %union.tree_node* %32 to %struct.tree_base*, !dbg !10267
  %33 = bitcast %struct.tree_base* %base29 to i64*, !dbg !10267
  %bf.load30 = load i64, i64* %33, align 8, !dbg !10267
  %bf.clear31 = and i64 %bf.load30, 65535, !dbg !10267
  %bf.cast32 = trunc i64 %bf.clear31 to i32, !dbg !10267
  %34 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !10267
  %35 = load %union.tree_node*, %union.tree_node** %34, align 8, !dbg !10267
  %common33 = bitcast %union.tree_node* %35 to %struct.tree_common*, !dbg !10267
  %type34 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common33, i32 0, i32 2, !dbg !10267
  %36 = load %union.tree_node*, %union.tree_node** %type34, align 8, !dbg !10267
  %37 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !10267
  %38 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !10267
  %call35 = call %union.tree_node* @fold_build2_stat_loc(i32 %30, i32 %bf.cast32, %union.tree_node* %36, %union.tree_node* %37, %union.tree_node* %38), !dbg !10267
  %39 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !10268
  store %union.tree_node* %call35, %union.tree_node** %39, align 8, !dbg !10269
  ret i32 0, !dbg !10270
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimplify_variable_sized_compare(%union.tree_node** %expr_p) #0 !dbg !10271 {
entry:
  %expr_p.addr = alloca %union.tree_node**, align 8
  %op0 = alloca %union.tree_node*, align 8
  %op1 = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  %arg = alloca %union.tree_node*, align 8
  %dest = alloca %union.tree_node*, align 8
  %src = alloca %union.tree_node*, align 8
  %loc = alloca i32, align 4
  store %union.tree_node** %expr_p, %union.tree_node*** %expr_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %expr_p.addr, metadata !10272, metadata !DIExpression()), !dbg !10273
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0, metadata !10274, metadata !DIExpression()), !dbg !10275
  %0 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !10276
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !10276
  %exp = bitcast %union.tree_node* %1 to %struct.tree_exp*, !dbg !10276
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !10276
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !10276
  %2 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !10276
  store %union.tree_node* %2, %union.tree_node** %op0, align 8, !dbg !10275
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1, metadata !10277, metadata !DIExpression()), !dbg !10278
  %3 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !10279
  %4 = load %union.tree_node*, %union.tree_node** %3, align 8, !dbg !10279
  %exp1 = bitcast %union.tree_node* %4 to %struct.tree_exp*, !dbg !10279
  %operands2 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 3, !dbg !10279
  %arrayidx3 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2, i64 0, i64 1, !dbg !10279
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx3, align 8, !dbg !10279
  store %union.tree_node* %5, %union.tree_node** %op1, align 8, !dbg !10278
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !10280, metadata !DIExpression()), !dbg !10281
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !10282, metadata !DIExpression()), !dbg !10283
  call void @llvm.dbg.declare(metadata %union.tree_node** %dest, metadata !10284, metadata !DIExpression()), !dbg !10285
  call void @llvm.dbg.declare(metadata %union.tree_node** %src, metadata !10286, metadata !DIExpression()), !dbg !10287
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !10288, metadata !DIExpression()), !dbg !10289
  %6 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !10290
  %7 = load %union.tree_node*, %union.tree_node** %6, align 8, !dbg !10290
  %base = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !10290
  %8 = bitcast %struct.tree_base* %base to i64*, !dbg !10290
  %bf.load = load i64, i64* %8, align 8, !dbg !10290
  %bf.clear = and i64 %bf.load, 65535, !dbg !10290
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !10290
  %idxprom = sext i32 %bf.cast to i64, !dbg !10290
  %arrayidx4 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !10290
  %9 = load i32, i32* %arrayidx4, align 4, !dbg !10290
  %cmp = icmp uge i32 %9, 4, !dbg !10290
  br i1 %cmp, label %land.lhs.true, label %cond.false, !dbg !10290

land.lhs.true:                                    ; preds = %entry
  %10 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !10290
  %11 = load %union.tree_node*, %union.tree_node** %10, align 8, !dbg !10290
  %base5 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !10290
  %12 = bitcast %struct.tree_base* %base5 to i64*, !dbg !10290
  %bf.load6 = load i64, i64* %12, align 8, !dbg !10290
  %bf.clear7 = and i64 %bf.load6, 65535, !dbg !10290
  %bf.cast8 = trunc i64 %bf.clear7 to i32, !dbg !10290
  %idxprom9 = sext i32 %bf.cast8 to i64, !dbg !10290
  %arrayidx10 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom9, !dbg !10290
  %13 = load i32, i32* %arrayidx10, align 4, !dbg !10290
  %cmp11 = icmp ule i32 %13, 10, !dbg !10290
  br i1 %cmp11, label %cond.true, label %cond.false, !dbg !10290

cond.true:                                        ; preds = %land.lhs.true
  %14 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !10290
  %15 = load %union.tree_node*, %union.tree_node** %14, align 8, !dbg !10290
  %exp12 = bitcast %union.tree_node* %15 to %struct.tree_exp*, !dbg !10290
  %locus = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp12, i32 0, i32 1, !dbg !10290
  %16 = load i32, i32* %locus, align 8, !dbg !10290
  br label %cond.end, !dbg !10290

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !10290

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %16, %cond.true ], [ 0, %cond.false ], !dbg !10290
  store i32 %cond, i32* %loc, align 4, !dbg !10289
  %17 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !10291
  %common = bitcast %union.tree_node* %17 to %struct.tree_common*, !dbg !10291
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !10291
  %18 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10291
  %type13 = bitcast %union.tree_node* %18 to %struct.tree_type*, !dbg !10291
  %size_unit = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type13, i32 0, i32 3, !dbg !10291
  %19 = load %union.tree_node*, %union.tree_node** %size_unit, align 8, !dbg !10291
  store %union.tree_node* %19, %union.tree_node** %arg, align 8, !dbg !10292
  %20 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !10293
  %call = call %union.tree_node* @unshare_expr(%union.tree_node* %20), !dbg !10294
  store %union.tree_node* %call, %union.tree_node** %arg, align 8, !dbg !10295
  %21 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !10296
  %cmp14 = icmp eq %union.tree_node* %21, null, !dbg !10296
  br i1 %cmp14, label %cond.true19, label %lor.lhs.false, !dbg !10296

lor.lhs.false:                                    ; preds = %cond.end
  %22 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !10296
  %base15 = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !10296
  %23 = bitcast %struct.tree_base* %base15 to i64*, !dbg !10296
  %bf.load16 = load i64, i64* %23, align 8, !dbg !10296
  %bf.lshr = lshr i64 %bf.load16, 17, !dbg !10296
  %bf.clear17 = and i64 %bf.lshr, 1, !dbg !10296
  %bf.cast18 = trunc i64 %bf.clear17 to i32, !dbg !10296
  %tobool = icmp ne i32 %bf.cast18, 0, !dbg !10296
  br i1 %tobool, label %cond.true19, label %cond.false20, !dbg !10296

cond.true19:                                      ; preds = %lor.lhs.false, %cond.end
  %24 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !10296
  br label %cond.end22, !dbg !10296

cond.false20:                                     ; preds = %lor.lhs.false
  %25 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !10296
  %26 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !10296
  %call21 = call %union.tree_node* @substitute_placeholder_in_expr(%union.tree_node* %25, %union.tree_node* %26), !dbg !10296
  br label %cond.end22, !dbg !10296

cond.end22:                                       ; preds = %cond.false20, %cond.true19
  %cond23 = phi %union.tree_node* [ %24, %cond.true19 ], [ %call21, %cond.false20 ], !dbg !10296
  store %union.tree_node* %cond23, %union.tree_node** %arg, align 8, !dbg !10297
  %27 = load i32, i32* %loc, align 4, !dbg !10298
  %28 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !10299
  %call24 = call %union.tree_node* @build_fold_addr_expr_loc(i32 %27, %union.tree_node* %28), !dbg !10300
  store %union.tree_node* %call24, %union.tree_node** %src, align 8, !dbg !10301
  %29 = load i32, i32* %loc, align 4, !dbg !10302
  %30 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !10303
  %call25 = call %union.tree_node* @build_fold_addr_expr_loc(i32 %29, %union.tree_node* %30), !dbg !10304
  store %union.tree_node* %call25, %union.tree_node** %dest, align 8, !dbg !10305
  %31 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @implicit_built_in_decls, i64 0, i64 329), align 8, !dbg !10306
  store %union.tree_node* %31, %union.tree_node** %t, align 8, !dbg !10307
  %32 = load i32, i32* %loc, align 4, !dbg !10308
  %33 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10309
  %34 = load %union.tree_node*, %union.tree_node** %dest, align 8, !dbg !10310
  %35 = load %union.tree_node*, %union.tree_node** %src, align 8, !dbg !10311
  %36 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !10312
  %call26 = call %union.tree_node* (i32, %union.tree_node*, i32, ...) @build_call_expr_loc(i32 %32, %union.tree_node* %33, i32 3, %union.tree_node* %34, %union.tree_node* %35, %union.tree_node* %36), !dbg !10313
  store %union.tree_node* %call26, %union.tree_node** %t, align 8, !dbg !10314
  %37 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !10315
  %38 = load %union.tree_node*, %union.tree_node** %37, align 8, !dbg !10315
  %base27 = bitcast %union.tree_node* %38 to %struct.tree_base*, !dbg !10315
  %39 = bitcast %struct.tree_base* %base27 to i64*, !dbg !10315
  %bf.load28 = load i64, i64* %39, align 8, !dbg !10315
  %bf.clear29 = and i64 %bf.load28, 65535, !dbg !10315
  %bf.cast30 = trunc i64 %bf.clear29 to i32, !dbg !10315
  %40 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !10315
  %41 = load %union.tree_node*, %union.tree_node** %40, align 8, !dbg !10315
  %common31 = bitcast %union.tree_node* %41 to %struct.tree_common*, !dbg !10315
  %type32 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common31, i32 0, i32 2, !dbg !10315
  %42 = load %union.tree_node*, %union.tree_node** %type32, align 8, !dbg !10315
  %43 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10315
  %44 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !10315
  %call33 = call %union.tree_node* @build2_stat(i32 %bf.cast30, %union.tree_node* %42, %union.tree_node* %43, %union.tree_node* %44), !dbg !10315
  %45 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !10316
  store %union.tree_node* %call33, %union.tree_node** %45, align 8, !dbg !10317
  ret i32 0, !dbg !10318
}

declare dso_local %union.gimple_statement_d* @gimplify_assign(%union.tree_node*, %union.tree_node*, %struct.gimple_seq_d**) #3

; Function Attrs: noinline nounwind uwtable
define internal void @gimplify_seq_add_seq(%struct.gimple_seq_d** %dst_p, %struct.gimple_seq_d* %src) #0 !dbg !10319 {
entry:
  %dst_p.addr = alloca %struct.gimple_seq_d**, align 8
  %src.addr = alloca %struct.gimple_seq_d*, align 8
  %si = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.gimple_seq_d** %dst_p, %struct.gimple_seq_d*** %dst_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %dst_p.addr, metadata !10322, metadata !DIExpression()), !dbg !10323
  store %struct.gimple_seq_d* %src, %struct.gimple_seq_d** %src.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %src.addr, metadata !10324, metadata !DIExpression()), !dbg !10325
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %si, metadata !10326, metadata !DIExpression()), !dbg !10327
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %src.addr, align 8, !dbg !10328
  %cmp = icmp eq %struct.gimple_seq_d* %0, null, !dbg !10330
  br i1 %cmp, label %if.then, label %if.end, !dbg !10331

if.then:                                          ; preds = %entry
  br label %return, !dbg !10332

if.end:                                           ; preds = %entry
  %1 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %dst_p.addr, align 8, !dbg !10333
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %1, align 8, !dbg !10335
  %cmp1 = icmp eq %struct.gimple_seq_d* %2, null, !dbg !10336
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !10337

if.then2:                                         ; preds = %if.end
  %call = call %struct.gimple_seq_d* @gimple_seq_alloc(), !dbg !10338
  %3 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %dst_p.addr, align 8, !dbg !10339
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %3, align 8, !dbg !10340
  br label %if.end3, !dbg !10341

if.end3:                                          ; preds = %if.then2, %if.end
  %4 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %dst_p.addr, align 8, !dbg !10342
  %5 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %4, align 8, !dbg !10343
  call void @gsi_last(%struct.gimple_stmt_iterator* sret %tmp, %struct.gimple_seq_d* %5), !dbg !10344
  %6 = bitcast %struct.gimple_stmt_iterator* %si to i8*, !dbg !10344
  %7 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !10344
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 24, i1 false), !dbg !10344
  %8 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %src.addr, align 8, !dbg !10345
  call void @gsi_insert_seq_after_without_update(%struct.gimple_stmt_iterator* %si, %struct.gimple_seq_d* %8, i32 0), !dbg !10346
  br label %return, !dbg !10347

return:                                           ; preds = %if.end3, %if.then
  ret void, !dbg !10347
}

; Function Attrs: noinline nounwind uwtable
define internal void @annotate_all_with_location_after(%struct.gimple_seq_d* %seq, %struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi, i32 %location) #0 !dbg !10348 {
entry:
  %seq.addr = alloca %struct.gimple_seq_d*, align 8
  %location.addr = alloca i32, align 4
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.gimple_seq_d* %seq, %struct.gimple_seq_d** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq.addr, metadata !10351, metadata !DIExpression()), !dbg !10352
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !10353, metadata !DIExpression()), !dbg !10354
  store i32 %location, i32* %location.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %location.addr, metadata !10355, metadata !DIExpression()), !dbg !10356
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !10357
  %tobool = icmp ne i8 %call, 0, !dbg !10357
  br i1 %tobool, label %if.then, label %if.else, !dbg !10359

if.then:                                          ; preds = %entry
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !10360
  call void @gsi_start(%struct.gimple_stmt_iterator* sret %tmp, %struct.gimple_seq_d* %0), !dbg !10361
  %1 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !10361
  %2 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !10361
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %2, i64 24, i1 false), !dbg !10361
  br label %if.end, !dbg !10362

if.else:                                          ; preds = %entry
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !10363
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.cond, !dbg !10364

for.cond:                                         ; preds = %for.inc, %if.end
  %call1 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !10365
  %tobool2 = icmp ne i8 %call1, 0, !dbg !10368
  %lnot = xor i1 %tobool2, true, !dbg !10368
  br i1 %lnot, label %for.body, label %for.end, !dbg !10369

for.body:                                         ; preds = %for.cond
  %call3 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !10370
  %3 = load i32, i32* %location.addr, align 4, !dbg !10371
  call void @annotate_one_with_location(%union.gimple_statement_d* %call3, i32 %3), !dbg !10372
  br label %for.inc, !dbg !10372

for.inc:                                          ; preds = %for.body
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !10373
  br label %for.cond, !dbg !10374, !llvm.loop !10375

for.end:                                          ; preds = %for.cond
  ret void, !dbg !10377
}

declare dso_local %union.tree_node* @build_fold_addr_expr_loc(i32, %union.tree_node*) #3

; Function Attrs: noinline nounwind uwtable
define dso_local void @gimplify_type_sizes(%union.tree_node* %type, %struct.gimple_seq_d** %list_p) #0 !dbg !10378 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %list_p.addr = alloca %struct.gimple_seq_d**, align 8
  %field = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !10379, metadata !DIExpression()), !dbg !10380
  store %struct.gimple_seq_d** %list_p, %struct.gimple_seq_d*** %list_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %list_p.addr, metadata !10381, metadata !DIExpression()), !dbg !10382
  call void @llvm.dbg.declare(metadata %union.tree_node** %field, metadata !10383, metadata !DIExpression()), !dbg !10384
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !10385, metadata !DIExpression()), !dbg !10386
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10387
  %cmp = icmp eq %union.tree_node* %0, null, !dbg !10389
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !10390

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10391
  %2 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !10392
  %cmp1 = icmp eq %union.tree_node* %1, %2, !dbg !10393
  br i1 %cmp1, label %if.then, label %if.end, !dbg !10394

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %for.end149, !dbg !10395

if.end:                                           ; preds = %lor.lhs.false
  %3 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10396
  %type2 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !10396
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type2, i32 0, i32 16, !dbg !10396
  %4 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !10396
  store %union.tree_node* %4, %union.tree_node** %type.addr, align 8, !dbg !10397
  %5 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10398
  %base = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !10398
  %6 = bitcast %struct.tree_base* %base to i64*, !dbg !10398
  %bf.load = load i64, i64* %6, align 8, !dbg !10398
  %bf.lshr = lshr i64 %bf.load, 17, !dbg !10398
  %bf.clear = and i64 %bf.lshr, 1, !dbg !10398
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !10398
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !10398
  br i1 %tobool, label %if.then3, label %if.end4, !dbg !10400

if.then3:                                         ; preds = %if.end
  br label %for.end149, !dbg !10401

if.end4:                                          ; preds = %if.end
  %7 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10402
  %base5 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !10402
  %8 = bitcast %struct.tree_base* %base5 to i64*, !dbg !10402
  %bf.load6 = load i64, i64* %8, align 8, !dbg !10403
  %bf.clear7 = and i64 %bf.load6, -131073, !dbg !10403
  %bf.set = or i64 %bf.clear7, 131072, !dbg !10403
  store i64 %bf.set, i64* %8, align 8, !dbg !10403
  %9 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10404
  %base8 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !10404
  %10 = bitcast %struct.tree_base* %base8 to i64*, !dbg !10404
  %bf.load9 = load i64, i64* %10, align 8, !dbg !10404
  %bf.clear10 = and i64 %bf.load9, 65535, !dbg !10404
  %bf.cast11 = trunc i64 %bf.clear10 to i32, !dbg !10404
  switch i32 %bf.cast11, label %sw.default [
    i32 8, label %sw.bb
    i32 6, label %sw.bb
    i32 7, label %sw.bb
    i32 9, label %sw.bb
    i32 11, label %sw.bb
    i32 15, label %sw.bb26
    i32 16, label %sw.bb104
    i32 17, label %sw.bb104
    i32 18, label %sw.bb104
    i32 10, label %sw.bb124
    i32 12, label %sw.bb124
  ], !dbg !10405

sw.bb:                                            ; preds = %if.end4, %if.end4, %if.end4, %if.end4, %if.end4
  %11 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10406
  %type12 = bitcast %union.tree_node* %11 to %struct.tree_type*, !dbg !10406
  %minval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type12, i32 0, i32 13, !dbg !10406
  %12 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %list_p.addr, align 8, !dbg !10408
  call void @gimplify_one_sizepos(%union.tree_node** %minval, %struct.gimple_seq_d** %12), !dbg !10409
  %13 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10410
  %type13 = bitcast %union.tree_node* %13 to %struct.tree_type*, !dbg !10410
  %maxval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type13, i32 0, i32 14, !dbg !10410
  %14 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %list_p.addr, align 8, !dbg !10411
  call void @gimplify_one_sizepos(%union.tree_node** %maxval, %struct.gimple_seq_d** %14), !dbg !10412
  %15 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10413
  %type14 = bitcast %union.tree_node* %15 to %struct.tree_type*, !dbg !10413
  %next_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type14, i32 0, i32 15, !dbg !10413
  %16 = load %union.tree_node*, %union.tree_node** %next_variant, align 8, !dbg !10413
  store %union.tree_node* %16, %union.tree_node** %t, align 8, !dbg !10415
  br label %for.cond, !dbg !10416

for.cond:                                         ; preds = %for.inc, %sw.bb
  %17 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10417
  %tobool15 = icmp ne %union.tree_node* %17, null, !dbg !10419
  br i1 %tobool15, label %for.body, label %for.end, !dbg !10419

for.body:                                         ; preds = %for.cond
  %18 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10420
  %type16 = bitcast %union.tree_node* %18 to %struct.tree_type*, !dbg !10420
  %minval17 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type16, i32 0, i32 13, !dbg !10420
  %19 = load %union.tree_node*, %union.tree_node** %minval17, align 8, !dbg !10420
  %20 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10422
  %type18 = bitcast %union.tree_node* %20 to %struct.tree_type*, !dbg !10422
  %minval19 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type18, i32 0, i32 13, !dbg !10422
  store %union.tree_node* %19, %union.tree_node** %minval19, align 8, !dbg !10423
  %21 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10424
  %type20 = bitcast %union.tree_node* %21 to %struct.tree_type*, !dbg !10424
  %maxval21 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type20, i32 0, i32 14, !dbg !10424
  %22 = load %union.tree_node*, %union.tree_node** %maxval21, align 8, !dbg !10424
  %23 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10425
  %type22 = bitcast %union.tree_node* %23 to %struct.tree_type*, !dbg !10425
  %maxval23 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type22, i32 0, i32 14, !dbg !10425
  store %union.tree_node* %22, %union.tree_node** %maxval23, align 8, !dbg !10426
  br label %for.inc, !dbg !10427

for.inc:                                          ; preds = %for.body
  %24 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10428
  %type24 = bitcast %union.tree_node* %24 to %struct.tree_type*, !dbg !10428
  %next_variant25 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type24, i32 0, i32 15, !dbg !10428
  %25 = load %union.tree_node*, %union.tree_node** %next_variant25, align 8, !dbg !10428
  store %union.tree_node* %25, %union.tree_node** %t, align 8, !dbg !10429
  br label %for.cond, !dbg !10430, !llvm.loop !10431

for.end:                                          ; preds = %for.cond
  br label %sw.epilog, !dbg !10433

sw.bb26:                                          ; preds = %if.end4
  %26 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10434
  %common = bitcast %union.tree_node* %26 to %struct.tree_common*, !dbg !10434
  %type27 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !10434
  %27 = load %union.tree_node*, %union.tree_node** %type27, align 8, !dbg !10434
  %28 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %list_p.addr, align 8, !dbg !10435
  call void @gimplify_type_sizes(%union.tree_node* %27, %struct.gimple_seq_d** %28), !dbg !10436
  %29 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10437
  %type28 = bitcast %union.tree_node* %29 to %struct.tree_type*, !dbg !10437
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type28, i32 0, i32 1, !dbg !10437
  %30 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !10437
  %31 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %list_p.addr, align 8, !dbg !10438
  call void @gimplify_type_sizes(%union.tree_node* %30, %struct.gimple_seq_d** %31), !dbg !10439
  %32 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10440
  %type29 = bitcast %union.tree_node* %32 to %struct.tree_type*, !dbg !10440
  %values30 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type29, i32 0, i32 1, !dbg !10440
  %33 = load %union.tree_node*, %union.tree_node** %values30, align 8, !dbg !10440
  %tobool31 = icmp ne %union.tree_node* %33, null, !dbg !10440
  br i1 %tobool31, label %land.lhs.true, label %if.end103, !dbg !10442

land.lhs.true:                                    ; preds = %sw.bb26
  %34 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10443
  %type32 = bitcast %union.tree_node* %34 to %struct.tree_type*, !dbg !10443
  %values33 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type32, i32 0, i32 1, !dbg !10443
  %35 = load %union.tree_node*, %union.tree_node** %values33, align 8, !dbg !10443
  %base34 = bitcast %union.tree_node* %35 to %struct.tree_base*, !dbg !10443
  %36 = bitcast %struct.tree_base* %base34 to i64*, !dbg !10443
  %bf.load35 = load i64, i64* %36, align 8, !dbg !10443
  %bf.clear36 = and i64 %bf.load35, 65535, !dbg !10443
  %bf.cast37 = trunc i64 %bf.clear36 to i32, !dbg !10443
  %cmp38 = icmp eq i32 %bf.cast37, 6, !dbg !10443
  br i1 %cmp38, label %if.then55, label %lor.lhs.false39, !dbg !10443

lor.lhs.false39:                                  ; preds = %land.lhs.true
  %37 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10443
  %type40 = bitcast %union.tree_node* %37 to %struct.tree_type*, !dbg !10443
  %values41 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type40, i32 0, i32 1, !dbg !10443
  %38 = load %union.tree_node*, %union.tree_node** %values41, align 8, !dbg !10443
  %base42 = bitcast %union.tree_node* %38 to %struct.tree_base*, !dbg !10443
  %39 = bitcast %struct.tree_base* %base42 to i64*, !dbg !10443
  %bf.load43 = load i64, i64* %39, align 8, !dbg !10443
  %bf.clear44 = and i64 %bf.load43, 65535, !dbg !10443
  %bf.cast45 = trunc i64 %bf.clear44 to i32, !dbg !10443
  %cmp46 = icmp eq i32 %bf.cast45, 7, !dbg !10443
  br i1 %cmp46, label %if.then55, label %lor.lhs.false47, !dbg !10443

lor.lhs.false47:                                  ; preds = %lor.lhs.false39
  %40 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10443
  %type48 = bitcast %union.tree_node* %40 to %struct.tree_type*, !dbg !10443
  %values49 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type48, i32 0, i32 1, !dbg !10443
  %41 = load %union.tree_node*, %union.tree_node** %values49, align 8, !dbg !10443
  %base50 = bitcast %union.tree_node* %41 to %struct.tree_base*, !dbg !10443
  %42 = bitcast %struct.tree_base* %base50 to i64*, !dbg !10443
  %bf.load51 = load i64, i64* %42, align 8, !dbg !10443
  %bf.clear52 = and i64 %bf.load51, 65535, !dbg !10443
  %bf.cast53 = trunc i64 %bf.clear52 to i32, !dbg !10443
  %cmp54 = icmp eq i32 %bf.cast53, 8, !dbg !10443
  br i1 %cmp54, label %if.then55, label %if.end103, !dbg !10444

if.then55:                                        ; preds = %lor.lhs.false47, %lor.lhs.false39, %land.lhs.true
  %43 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10445
  %type56 = bitcast %union.tree_node* %43 to %struct.tree_type*, !dbg !10445
  %values57 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type56, i32 0, i32 1, !dbg !10445
  %44 = load %union.tree_node*, %union.tree_node** %values57, align 8, !dbg !10445
  %type58 = bitcast %union.tree_node* %44 to %struct.tree_type*, !dbg !10445
  %minval59 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type58, i32 0, i32 13, !dbg !10445
  %45 = load %union.tree_node*, %union.tree_node** %minval59, align 8, !dbg !10445
  store %union.tree_node* %45, %union.tree_node** %t, align 8, !dbg !10447
  %46 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10448
  %tobool60 = icmp ne %union.tree_node* %46, null, !dbg !10448
  br i1 %tobool60, label %land.lhs.true61, label %if.end77, !dbg !10450

land.lhs.true61:                                  ; preds = %if.then55
  %47 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10451
  %base62 = bitcast %union.tree_node* %47 to %struct.tree_base*, !dbg !10451
  %48 = bitcast %struct.tree_base* %base62 to i64*, !dbg !10451
  %bf.load63 = load i64, i64* %48, align 8, !dbg !10451
  %bf.clear64 = and i64 %bf.load63, 65535, !dbg !10451
  %bf.cast65 = trunc i64 %bf.clear64 to i32, !dbg !10451
  %cmp66 = icmp eq i32 %bf.cast65, 32, !dbg !10452
  br i1 %cmp66, label %land.lhs.true67, label %if.end77, !dbg !10453

land.lhs.true67:                                  ; preds = %land.lhs.true61
  %49 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10454
  %decl_common = bitcast %union.tree_node* %49 to %struct.tree_decl_common*, !dbg !10454
  %artificial_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !10454
  %50 = bitcast i40* %artificial_flag to i64*, !dbg !10454
  %bf.load68 = load i64, i64* %50, align 8, !dbg !10454
  %bf.lshr69 = lshr i64 %bf.load68, 12, !dbg !10454
  %bf.clear70 = and i64 %bf.lshr69, 1, !dbg !10454
  %bf.cast71 = trunc i64 %bf.clear70 to i32, !dbg !10454
  %tobool72 = icmp ne i32 %bf.cast71, 0, !dbg !10454
  br i1 %tobool72, label %if.then73, label %if.end77, !dbg !10455

if.then73:                                        ; preds = %land.lhs.true67
  %51 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10456
  %decl_common74 = bitcast %union.tree_node* %51 to %struct.tree_decl_common*, !dbg !10456
  %ignored_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common74, i32 0, i32 2, !dbg !10456
  %52 = bitcast i40* %ignored_flag to i64*, !dbg !10456
  %bf.load75 = load i64, i64* %52, align 8, !dbg !10457
  %bf.clear76 = and i64 %bf.load75, -1025, !dbg !10457
  store i64 %bf.clear76, i64* %52, align 8, !dbg !10457
  br label %if.end77, !dbg !10456

if.end77:                                         ; preds = %if.then73, %land.lhs.true67, %land.lhs.true61, %if.then55
  %53 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10458
  %type78 = bitcast %union.tree_node* %53 to %struct.tree_type*, !dbg !10458
  %values79 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type78, i32 0, i32 1, !dbg !10458
  %54 = load %union.tree_node*, %union.tree_node** %values79, align 8, !dbg !10458
  %type80 = bitcast %union.tree_node* %54 to %struct.tree_type*, !dbg !10458
  %maxval81 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type80, i32 0, i32 14, !dbg !10458
  %55 = load %union.tree_node*, %union.tree_node** %maxval81, align 8, !dbg !10458
  store %union.tree_node* %55, %union.tree_node** %t, align 8, !dbg !10459
  %56 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10460
  %tobool82 = icmp ne %union.tree_node* %56, null, !dbg !10460
  br i1 %tobool82, label %land.lhs.true83, label %if.end102, !dbg !10462

land.lhs.true83:                                  ; preds = %if.end77
  %57 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10463
  %base84 = bitcast %union.tree_node* %57 to %struct.tree_base*, !dbg !10463
  %58 = bitcast %struct.tree_base* %base84 to i64*, !dbg !10463
  %bf.load85 = load i64, i64* %58, align 8, !dbg !10463
  %bf.clear86 = and i64 %bf.load85, 65535, !dbg !10463
  %bf.cast87 = trunc i64 %bf.clear86 to i32, !dbg !10463
  %cmp88 = icmp eq i32 %bf.cast87, 32, !dbg !10464
  br i1 %cmp88, label %land.lhs.true89, label %if.end102, !dbg !10465

land.lhs.true89:                                  ; preds = %land.lhs.true83
  %59 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10466
  %decl_common90 = bitcast %union.tree_node* %59 to %struct.tree_decl_common*, !dbg !10466
  %artificial_flag91 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common90, i32 0, i32 2, !dbg !10466
  %60 = bitcast i40* %artificial_flag91 to i64*, !dbg !10466
  %bf.load92 = load i64, i64* %60, align 8, !dbg !10466
  %bf.lshr93 = lshr i64 %bf.load92, 12, !dbg !10466
  %bf.clear94 = and i64 %bf.lshr93, 1, !dbg !10466
  %bf.cast95 = trunc i64 %bf.clear94 to i32, !dbg !10466
  %tobool96 = icmp ne i32 %bf.cast95, 0, !dbg !10466
  br i1 %tobool96, label %if.then97, label %if.end102, !dbg !10467

if.then97:                                        ; preds = %land.lhs.true89
  %61 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10468
  %decl_common98 = bitcast %union.tree_node* %61 to %struct.tree_decl_common*, !dbg !10468
  %ignored_flag99 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common98, i32 0, i32 2, !dbg !10468
  %62 = bitcast i40* %ignored_flag99 to i64*, !dbg !10468
  %bf.load100 = load i64, i64* %62, align 8, !dbg !10469
  %bf.clear101 = and i64 %bf.load100, -1025, !dbg !10469
  store i64 %bf.clear101, i64* %62, align 8, !dbg !10469
  br label %if.end102, !dbg !10468

if.end102:                                        ; preds = %if.then97, %land.lhs.true89, %land.lhs.true83, %if.end77
  br label %if.end103, !dbg !10470

if.end103:                                        ; preds = %if.end102, %lor.lhs.false47, %sw.bb26
  br label %sw.epilog, !dbg !10471

sw.bb104:                                         ; preds = %if.end4, %if.end4, %if.end4
  %63 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10472
  %type105 = bitcast %union.tree_node* %63 to %struct.tree_type*, !dbg !10472
  %values106 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type105, i32 0, i32 1, !dbg !10472
  %64 = load %union.tree_node*, %union.tree_node** %values106, align 8, !dbg !10472
  store %union.tree_node* %64, %union.tree_node** %field, align 8, !dbg !10474
  br label %for.cond107, !dbg !10475

for.cond107:                                      ; preds = %for.inc121, %sw.bb104
  %65 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !10476
  %tobool108 = icmp ne %union.tree_node* %65, null, !dbg !10478
  br i1 %tobool108, label %for.body109, label %for.end123, !dbg !10478

for.body109:                                      ; preds = %for.cond107
  %66 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !10479
  %base110 = bitcast %union.tree_node* %66 to %struct.tree_base*, !dbg !10479
  %67 = bitcast %struct.tree_base* %base110 to i64*, !dbg !10479
  %bf.load111 = load i64, i64* %67, align 8, !dbg !10479
  %bf.clear112 = and i64 %bf.load111, 65535, !dbg !10479
  %bf.cast113 = trunc i64 %bf.clear112 to i32, !dbg !10479
  %cmp114 = icmp eq i32 %bf.cast113, 31, !dbg !10481
  br i1 %cmp114, label %if.then115, label %if.end120, !dbg !10482

if.then115:                                       ; preds = %for.body109
  %68 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !10483
  %field_decl = bitcast %union.tree_node* %68 to %struct.tree_field_decl*, !dbg !10483
  %offset = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl, i32 0, i32 1, !dbg !10483
  %69 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %list_p.addr, align 8, !dbg !10485
  call void @gimplify_one_sizepos(%union.tree_node** %offset, %struct.gimple_seq_d** %69), !dbg !10486
  %70 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !10487
  %decl_common116 = bitcast %union.tree_node* %70 to %struct.tree_decl_common*, !dbg !10487
  %size = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common116, i32 0, i32 1, !dbg !10487
  %71 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %list_p.addr, align 8, !dbg !10488
  call void @gimplify_one_sizepos(%union.tree_node** %size, %struct.gimple_seq_d** %71), !dbg !10489
  %72 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !10490
  %decl_common117 = bitcast %union.tree_node* %72 to %struct.tree_decl_common*, !dbg !10490
  %size_unit = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common117, i32 0, i32 4, !dbg !10490
  %73 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %list_p.addr, align 8, !dbg !10491
  call void @gimplify_one_sizepos(%union.tree_node** %size_unit, %struct.gimple_seq_d** %73), !dbg !10492
  %74 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !10493
  %common118 = bitcast %union.tree_node* %74 to %struct.tree_common*, !dbg !10493
  %type119 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common118, i32 0, i32 2, !dbg !10493
  %75 = load %union.tree_node*, %union.tree_node** %type119, align 8, !dbg !10493
  %76 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %list_p.addr, align 8, !dbg !10494
  call void @gimplify_type_sizes(%union.tree_node* %75, %struct.gimple_seq_d** %76), !dbg !10495
  br label %if.end120, !dbg !10496

if.end120:                                        ; preds = %if.then115, %for.body109
  br label %for.inc121, !dbg !10497

for.inc121:                                       ; preds = %if.end120
  %77 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !10498
  %common122 = bitcast %union.tree_node* %77 to %struct.tree_common*, !dbg !10498
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common122, i32 0, i32 1, !dbg !10498
  %78 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !10498
  store %union.tree_node* %78, %union.tree_node** %field, align 8, !dbg !10499
  br label %for.cond107, !dbg !10500, !llvm.loop !10501

for.end123:                                       ; preds = %for.cond107
  br label %sw.epilog, !dbg !10503

sw.bb124:                                         ; preds = %if.end4, %if.end4
  br label %sw.epilog, !dbg !10504

sw.default:                                       ; preds = %if.end4
  br label %sw.epilog, !dbg !10505

sw.epilog:                                        ; preds = %sw.default, %sw.bb124, %for.end123, %if.end103, %for.end
  %79 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10506
  %type125 = bitcast %union.tree_node* %79 to %struct.tree_type*, !dbg !10506
  %size126 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type125, i32 0, i32 2, !dbg !10506
  %80 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %list_p.addr, align 8, !dbg !10507
  call void @gimplify_one_sizepos(%union.tree_node** %size126, %struct.gimple_seq_d** %80), !dbg !10508
  %81 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10509
  %type127 = bitcast %union.tree_node* %81 to %struct.tree_type*, !dbg !10509
  %size_unit128 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type127, i32 0, i32 3, !dbg !10509
  %82 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %list_p.addr, align 8, !dbg !10510
  call void @gimplify_one_sizepos(%union.tree_node** %size_unit128, %struct.gimple_seq_d** %82), !dbg !10511
  %83 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10512
  %type129 = bitcast %union.tree_node* %83 to %struct.tree_type*, !dbg !10512
  %next_variant130 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type129, i32 0, i32 15, !dbg !10512
  %84 = load %union.tree_node*, %union.tree_node** %next_variant130, align 8, !dbg !10512
  store %union.tree_node* %84, %union.tree_node** %t, align 8, !dbg !10514
  br label %for.cond131, !dbg !10515

for.cond131:                                      ; preds = %for.inc146, %sw.epilog
  %85 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10516
  %tobool132 = icmp ne %union.tree_node* %85, null, !dbg !10518
  br i1 %tobool132, label %for.body133, label %for.end149, !dbg !10518

for.body133:                                      ; preds = %for.cond131
  %86 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10519
  %type134 = bitcast %union.tree_node* %86 to %struct.tree_type*, !dbg !10519
  %size135 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type134, i32 0, i32 2, !dbg !10519
  %87 = load %union.tree_node*, %union.tree_node** %size135, align 8, !dbg !10519
  %88 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10521
  %type136 = bitcast %union.tree_node* %88 to %struct.tree_type*, !dbg !10521
  %size137 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type136, i32 0, i32 2, !dbg !10521
  store %union.tree_node* %87, %union.tree_node** %size137, align 8, !dbg !10522
  %89 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10523
  %type138 = bitcast %union.tree_node* %89 to %struct.tree_type*, !dbg !10523
  %size_unit139 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type138, i32 0, i32 3, !dbg !10523
  %90 = load %union.tree_node*, %union.tree_node** %size_unit139, align 8, !dbg !10523
  %91 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10524
  %type140 = bitcast %union.tree_node* %91 to %struct.tree_type*, !dbg !10524
  %size_unit141 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type140, i32 0, i32 3, !dbg !10524
  store %union.tree_node* %90, %union.tree_node** %size_unit141, align 8, !dbg !10525
  %92 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10526
  %base142 = bitcast %union.tree_node* %92 to %struct.tree_base*, !dbg !10526
  %93 = bitcast %struct.tree_base* %base142 to i64*, !dbg !10526
  %bf.load143 = load i64, i64* %93, align 8, !dbg !10527
  %bf.clear144 = and i64 %bf.load143, -131073, !dbg !10527
  %bf.set145 = or i64 %bf.clear144, 131072, !dbg !10527
  store i64 %bf.set145, i64* %93, align 8, !dbg !10527
  br label %for.inc146, !dbg !10528

for.inc146:                                       ; preds = %for.body133
  %94 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10529
  %type147 = bitcast %union.tree_node* %94 to %struct.tree_type*, !dbg !10529
  %next_variant148 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type147, i32 0, i32 15, !dbg !10529
  %95 = load %union.tree_node*, %union.tree_node** %next_variant148, align 8, !dbg !10529
  store %union.tree_node* %95, %union.tree_node** %t, align 8, !dbg !10530
  br label %for.cond131, !dbg !10531, !llvm.loop !10532

for.end149:                                       ; preds = %if.then, %if.then3, %for.cond131
  ret void, !dbg !10534
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gimplify_one_sizepos(%union.tree_node** %expr_p, %struct.gimple_seq_d** %stmt_p) #0 !dbg !10535 {
entry:
  %expr_p.addr = alloca %union.tree_node**, align 8
  %stmt_p.addr = alloca %struct.gimple_seq_d**, align 8
  %type = alloca %union.tree_node*, align 8
  %expr = alloca %union.tree_node*, align 8
  %tmp = alloca %union.tree_node*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  store %union.tree_node** %expr_p, %union.tree_node*** %expr_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %expr_p.addr, metadata !10536, metadata !DIExpression()), !dbg !10537
  store %struct.gimple_seq_d** %stmt_p, %struct.gimple_seq_d*** %stmt_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %stmt_p.addr, metadata !10538, metadata !DIExpression()), !dbg !10539
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !10540, metadata !DIExpression()), !dbg !10541
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr, metadata !10542, metadata !DIExpression()), !dbg !10543
  %0 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !10544
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !10545
  store %union.tree_node* %1, %union.tree_node** %expr, align 8, !dbg !10543
  %2 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !10546
  %cmp = icmp eq %union.tree_node* %2, null, !dbg !10548
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !10549

lor.lhs.false:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !10550
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !10550
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !10550
  %bf.load = load i64, i64* %4, align 8, !dbg !10550
  %bf.lshr = lshr i64 %bf.load, 17, !dbg !10550
  %bf.clear = and i64 %bf.lshr, 1, !dbg !10550
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !10550
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !10550
  br i1 %tobool, label %if.then, label %lor.lhs.false1, !dbg !10551

lor.lhs.false1:                                   ; preds = %lor.lhs.false
  %5 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !10552
  %base2 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !10552
  %6 = bitcast %struct.tree_base* %base2 to i64*, !dbg !10552
  %bf.load3 = load i64, i64* %6, align 8, !dbg !10552
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !10552
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !10552
  %cmp6 = icmp eq i32 %bf.cast5, 32, !dbg !10553
  br i1 %cmp6, label %if.then, label %lor.lhs.false7, !dbg !10554

lor.lhs.false7:                                   ; preds = %lor.lhs.false1
  %7 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !10555
  %cmp8 = icmp ne %union.tree_node* %7, null, !dbg !10555
  br i1 %cmp8, label %land.lhs.true, label %if.end, !dbg !10555

land.lhs.true:                                    ; preds = %lor.lhs.false7
  %8 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !10555
  %base9 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !10555
  %9 = bitcast %struct.tree_base* %base9 to i64*, !dbg !10555
  %bf.load10 = load i64, i64* %9, align 8, !dbg !10555
  %bf.lshr11 = lshr i64 %bf.load10, 17, !dbg !10555
  %bf.clear12 = and i64 %bf.lshr11, 1, !dbg !10555
  %bf.cast13 = trunc i64 %bf.clear12 to i32, !dbg !10555
  %tobool14 = icmp ne i32 %bf.cast13, 0, !dbg !10555
  br i1 %tobool14, label %if.end, label %land.lhs.true15, !dbg !10555

land.lhs.true15:                                  ; preds = %land.lhs.true
  %10 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !10555
  %call = call zeroext i8 @contains_placeholder_p(%union.tree_node* %10), !dbg !10555
  %conv = zext i8 %call to i32, !dbg !10555
  %tobool16 = icmp ne i32 %conv, 0, !dbg !10555
  br i1 %tobool16, label %if.then, label %if.end, !dbg !10556

if.then:                                          ; preds = %land.lhs.true15, %lor.lhs.false1, %lor.lhs.false, %entry
  br label %if.end83, !dbg !10557

if.end:                                           ; preds = %land.lhs.true15, %land.lhs.true, %lor.lhs.false7
  %11 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !10558
  %common = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !10558
  %type17 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !10558
  %12 = load %union.tree_node*, %union.tree_node** %type17, align 8, !dbg !10558
  store %union.tree_node* %12, %union.tree_node** %type, align 8, !dbg !10559
  %13 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !10560
  %call18 = call %union.tree_node* @unshare_expr(%union.tree_node* %13), !dbg !10561
  %14 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !10562
  store %union.tree_node* %call18, %union.tree_node** %14, align 8, !dbg !10563
  %15 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !10564
  %16 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %stmt_p.addr, align 8, !dbg !10565
  %call19 = call i32 @gimplify_expr(%union.tree_node** %15, %struct.gimple_seq_d** %16, %struct.gimple_seq_d** null, i8 (%union.tree_node*)* @is_gimple_val, i32 1), !dbg !10566
  %17 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !10567
  %18 = load %union.tree_node*, %union.tree_node** %17, align 8, !dbg !10568
  store %union.tree_node* %18, %union.tree_node** %expr, align 8, !dbg !10569
  %19 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !10570
  %common20 = bitcast %union.tree_node* %19 to %struct.tree_common*, !dbg !10570
  %type21 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common20, i32 0, i32 2, !dbg !10570
  %20 = load %union.tree_node*, %union.tree_node** %type21, align 8, !dbg !10570
  %21 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10572
  %cmp22 = icmp ne %union.tree_node* %20, %21, !dbg !10573
  br i1 %cmp22, label %land.lhs.true24, label %if.end83, !dbg !10574

land.lhs.true24:                                  ; preds = %if.end
  %22 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10575
  %base25 = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !10575
  %23 = bitcast %struct.tree_base* %base25 to i64*, !dbg !10575
  %bf.load26 = load i64, i64* %23, align 8, !dbg !10575
  %bf.clear27 = and i64 %bf.load26, 65535, !dbg !10575
  %bf.cast28 = trunc i64 %bf.clear27 to i32, !dbg !10575
  %cmp29 = icmp eq i32 %bf.cast28, 8, !dbg !10576
  br i1 %cmp29, label %land.lhs.true31, label %if.end83, !dbg !10577

land.lhs.true31:                                  ; preds = %land.lhs.true24
  %24 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10578
  %type32 = bitcast %union.tree_node* %24 to %struct.tree_type*, !dbg !10578
  %no_force_blk_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type32, i32 0, i32 6, !dbg !10578
  %bf.load33 = load i32, i32* %no_force_blk_flag, align 4, !dbg !10578
  %bf.lshr34 = lshr i32 %bf.load33, 10, !dbg !10578
  %bf.clear35 = and i32 %bf.lshr34, 1, !dbg !10578
  %tobool36 = icmp ne i32 %bf.clear35, 0, !dbg !10578
  br i1 %tobool36, label %if.then37, label %if.end83, !dbg !10579

if.then37:                                        ; preds = %land.lhs.true31
  call void @llvm.dbg.declare(metadata %union.tree_node** %tmp, metadata !10580, metadata !DIExpression()), !dbg !10582
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !10583, metadata !DIExpression()), !dbg !10584
  %25 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10585
  %call38 = call %union.tree_node* @create_tmp_var(%union.tree_node* %25, i8* null), !dbg !10586
  %26 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !10587
  store %union.tree_node* %call38, %union.tree_node** %26, align 8, !dbg !10588
  %27 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10589
  %28 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !10589
  %call39 = call %union.tree_node* @build1_stat(i32 116, %union.tree_node* %27, %union.tree_node* %28), !dbg !10589
  store %union.tree_node* %call39, %union.tree_node** %tmp, align 8, !dbg !10590
  %29 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !10591
  %30 = load %union.tree_node*, %union.tree_node** %29, align 8, !dbg !10592
  %31 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !10593
  %32 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %stmt_p.addr, align 8, !dbg !10594
  %call40 = call %union.gimple_statement_d* @gimplify_assign(%union.tree_node* %30, %union.tree_node* %31, %struct.gimple_seq_d** %32), !dbg !10595
  store %union.gimple_statement_d* %call40, %union.gimple_statement_d** %stmt, align 8, !dbg !10596
  %33 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !10597
  %base41 = bitcast %union.tree_node* %33 to %struct.tree_base*, !dbg !10597
  %34 = bitcast %struct.tree_base* %base41 to i64*, !dbg !10597
  %bf.load42 = load i64, i64* %34, align 8, !dbg !10597
  %bf.clear43 = and i64 %bf.load42, 65535, !dbg !10597
  %bf.cast44 = trunc i64 %bf.clear43 to i32, !dbg !10597
  %idxprom = sext i32 %bf.cast44 to i64, !dbg !10597
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !10597
  %35 = load i32, i32* %arrayidx, align 4, !dbg !10597
  %cmp45 = icmp uge i32 %35, 4, !dbg !10597
  br i1 %cmp45, label %land.lhs.true47, label %cond.false, !dbg !10597

land.lhs.true47:                                  ; preds = %if.then37
  %36 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !10597
  %base48 = bitcast %union.tree_node* %36 to %struct.tree_base*, !dbg !10597
  %37 = bitcast %struct.tree_base* %base48 to i64*, !dbg !10597
  %bf.load49 = load i64, i64* %37, align 8, !dbg !10597
  %bf.clear50 = and i64 %bf.load49, 65535, !dbg !10597
  %bf.cast51 = trunc i64 %bf.clear50 to i32, !dbg !10597
  %idxprom52 = sext i32 %bf.cast51 to i64, !dbg !10597
  %arrayidx53 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom52, !dbg !10597
  %38 = load i32, i32* %arrayidx53, align 4, !dbg !10597
  %cmp54 = icmp ule i32 %38, 10, !dbg !10597
  br i1 %cmp54, label %cond.true, label %cond.false, !dbg !10597

cond.true:                                        ; preds = %land.lhs.true47
  %39 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !10597
  %exp = bitcast %union.tree_node* %39 to %struct.tree_exp*, !dbg !10597
  %locus = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 1, !dbg !10597
  %40 = load i32, i32* %locus, align 8, !dbg !10597
  br label %cond.end, !dbg !10597

cond.false:                                       ; preds = %land.lhs.true47, %if.then37
  br label %cond.end, !dbg !10597

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %40, %cond.true ], [ 0, %cond.false ], !dbg !10597
  %cmp56 = icmp ne i32 %cond, 0, !dbg !10597
  br i1 %cmp56, label %if.then58, label %if.else, !dbg !10599

if.then58:                                        ; preds = %cond.end
  %41 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !10600
  %42 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !10601
  %base59 = bitcast %union.tree_node* %42 to %struct.tree_base*, !dbg !10601
  %43 = bitcast %struct.tree_base* %base59 to i64*, !dbg !10601
  %bf.load60 = load i64, i64* %43, align 8, !dbg !10601
  %bf.clear61 = and i64 %bf.load60, 65535, !dbg !10601
  %bf.cast62 = trunc i64 %bf.clear61 to i32, !dbg !10601
  %idxprom63 = sext i32 %bf.cast62 to i64, !dbg !10601
  %arrayidx64 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom63, !dbg !10601
  %44 = load i32, i32* %arrayidx64, align 4, !dbg !10601
  %cmp65 = icmp uge i32 %44, 4, !dbg !10601
  br i1 %cmp65, label %land.lhs.true67, label %cond.false79, !dbg !10601

land.lhs.true67:                                  ; preds = %if.then58
  %45 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !10601
  %base68 = bitcast %union.tree_node* %45 to %struct.tree_base*, !dbg !10601
  %46 = bitcast %struct.tree_base* %base68 to i64*, !dbg !10601
  %bf.load69 = load i64, i64* %46, align 8, !dbg !10601
  %bf.clear70 = and i64 %bf.load69, 65535, !dbg !10601
  %bf.cast71 = trunc i64 %bf.clear70 to i32, !dbg !10601
  %idxprom72 = sext i32 %bf.cast71 to i64, !dbg !10601
  %arrayidx73 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom72, !dbg !10601
  %47 = load i32, i32* %arrayidx73, align 4, !dbg !10601
  %cmp74 = icmp ule i32 %47, 10, !dbg !10601
  br i1 %cmp74, label %cond.true76, label %cond.false79, !dbg !10601

cond.true76:                                      ; preds = %land.lhs.true67
  %48 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !10601
  %exp77 = bitcast %union.tree_node* %48 to %struct.tree_exp*, !dbg !10601
  %locus78 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp77, i32 0, i32 1, !dbg !10601
  %49 = load i32, i32* %locus78, align 8, !dbg !10601
  br label %cond.end80, !dbg !10601

cond.false79:                                     ; preds = %land.lhs.true67, %if.then58
  br label %cond.end80, !dbg !10601

cond.end80:                                       ; preds = %cond.false79, %cond.true76
  %cond81 = phi i32 [ %49, %cond.true76 ], [ 0, %cond.false79 ], !dbg !10601
  call void @gimple_set_location(%union.gimple_statement_d* %41, i32 %cond81), !dbg !10602
  br label %if.end82, !dbg !10602

if.else:                                          ; preds = %cond.end
  %50 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !10603
  %51 = load i32, i32* @input_location, align 4, !dbg !10604
  call void @gimple_set_location(%union.gimple_statement_d* %50, i32 %51), !dbg !10605
  br label %if.end82

if.end82:                                         ; preds = %if.else, %cond.end80
  br label %if.end83, !dbg !10606

if.end83:                                         ; preds = %if.then, %if.end82, %land.lhs.true31, %land.lhs.true24, %if.end
  ret void, !dbg !10607
}

declare dso_local zeroext i8 @contains_placeholder_p(%union.tree_node*) #3

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_location(%union.gimple_statement_d* %g, i32 %location) #0 !dbg !10608 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  %location.addr = alloca i32, align 4
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !10609, metadata !DIExpression()), !dbg !10610
  store i32 %location, i32* %location.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %location.addr, metadata !10611, metadata !DIExpression()), !dbg !10612
  %0 = load i32, i32* %location.addr, align 4, !dbg !10613
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !10614
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !10615
  %location1 = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 2, !dbg !10616
  store i32 %0, i32* %location1, align 8, !dbg !10617
  ret void, !dbg !10618
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.gimple_statement_d* @gimplify_body(%union.tree_node** %body_p, %union.tree_node* %fndecl, i8 zeroext %do_parms) #0 !dbg !10619 {
entry:
  %body_p.addr = alloca %union.tree_node**, align 8
  %fndecl.addr = alloca %union.tree_node*, align 8
  %do_parms.addr = alloca i8, align 1
  %saved_location = alloca i32, align 4
  %parm_stmts = alloca %struct.gimple_seq_d*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  %outer_bind = alloca %union.gimple_statement_d*, align 8
  %gctx = alloca %struct.gimplify_ctx, align 8
  %parm = alloca %union.tree_node*, align 8
  store %union.tree_node** %body_p, %union.tree_node*** %body_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %body_p.addr, metadata !10622, metadata !DIExpression()), !dbg !10623
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !10624, metadata !DIExpression()), !dbg !10625
  store i8 %do_parms, i8* %do_parms.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %do_parms.addr, metadata !10626, metadata !DIExpression()), !dbg !10627
  call void @llvm.dbg.declare(metadata i32* %saved_location, metadata !10628, metadata !DIExpression()), !dbg !10629
  %0 = load i32, i32* @input_location, align 4, !dbg !10630
  store i32 %0, i32* %saved_location, align 4, !dbg !10629
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %parm_stmts, metadata !10631, metadata !DIExpression()), !dbg !10632
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !10633, metadata !DIExpression()), !dbg !10634
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %outer_bind, metadata !10635, metadata !DIExpression()), !dbg !10636
  call void @llvm.dbg.declare(metadata %struct.gimplify_ctx* %gctx, metadata !10637, metadata !DIExpression()), !dbg !10638
  br label %do.body, !dbg !10639

do.body:                                          ; preds = %entry
  %1 = load i8, i8* @timevar_enable, align 1, !dbg !10640
  %tobool = icmp ne i8 %1, 0, !dbg !10640
  br i1 %tobool, label %if.then, label %if.end, !dbg !10643

if.then:                                          ; preds = %do.body
  call void @timevar_push_1(i32 48), !dbg !10640
  br label %if.end, !dbg !10640

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end, !dbg !10643

do.end:                                           ; preds = %if.end
  call void @default_rtl_profile(), !dbg !10644
  %2 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !10645
  %cmp = icmp eq %struct.gimplify_ctx* %2, null, !dbg !10645
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !10645

cond.true:                                        ; preds = %do.end
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 7506, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10645
  br label %cond.end, !dbg !10645

cond.false:                                       ; preds = %do.end
  br label %cond.end, !dbg !10645

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !10645
  call void @push_gimplify_context(%struct.gimplify_ctx* %gctx), !dbg !10646
  %3 = load %union.tree_node**, %union.tree_node*** %body_p.addr, align 8, !dbg !10647
  %4 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !10648
  call void @unshare_body(%union.tree_node** %3, %union.tree_node* %4), !dbg !10649
  %5 = load %union.tree_node**, %union.tree_node*** %body_p.addr, align 8, !dbg !10650
  %6 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !10651
  call void @unvisit_body(%union.tree_node** %5, %union.tree_node* %6), !dbg !10652
  %7 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !10653
  %call = call %struct.cgraph_node* @cgraph_node(%union.tree_node* %7), !dbg !10655
  %origin = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %call, i32 0, i32 5, !dbg !10656
  %8 = load %struct.cgraph_node*, %struct.cgraph_node** %origin, align 8, !dbg !10656
  %tobool1 = icmp ne %struct.cgraph_node* %8, null, !dbg !10655
  br i1 %tobool1, label %if.then2, label %if.end4, !dbg !10657

if.then2:                                         ; preds = %cond.end
  %call3 = call %struct.pointer_set_t* @pointer_set_create(), !dbg !10658
  store %struct.pointer_set_t* %call3, %struct.pointer_set_t** @nonlocal_vlas, align 8, !dbg !10659
  br label %if.end4, !dbg !10660

if.end4:                                          ; preds = %if.then2, %cond.end
  %9 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !10661
  %decl_minimal = bitcast %union.tree_node* %9 to %struct.tree_decl_minimal*, !dbg !10661
  %locus = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 1, !dbg !10661
  %10 = load i32, i32* %locus, align 8, !dbg !10661
  store i32 %10, i32* @input_location, align 4, !dbg !10662
  %11 = load i8, i8* %do_parms.addr, align 1, !dbg !10663
  %conv = zext i8 %11 to i32, !dbg !10664
  %tobool5 = icmp ne i32 %conv, 0, !dbg !10664
  br i1 %tobool5, label %cond.true6, label %cond.false8, !dbg !10664

cond.true6:                                       ; preds = %if.end4
  %call7 = call %struct.gimple_seq_d* @gimplify_parameters(), !dbg !10665
  br label %cond.end9, !dbg !10664

cond.false8:                                      ; preds = %if.end4
  br label %cond.end9, !dbg !10664

cond.end9:                                        ; preds = %cond.false8, %cond.true6
  %cond10 = phi %struct.gimple_seq_d* [ %call7, %cond.true6 ], [ null, %cond.false8 ], !dbg !10664
  store %struct.gimple_seq_d* %cond10, %struct.gimple_seq_d** %parm_stmts, align 8, !dbg !10666
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %seq, align 8, !dbg !10667
  %12 = load %union.tree_node**, %union.tree_node*** %body_p.addr, align 8, !dbg !10668
  %call11 = call zeroext i8 @gimplify_stmt(%union.tree_node** %12, %struct.gimple_seq_d** %seq), !dbg !10669
  %13 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !10670
  %call12 = call %union.gimple_statement_d* @gimple_seq_first_stmt(%struct.gimple_seq_d* %13), !dbg !10671
  store %union.gimple_statement_d* %call12, %union.gimple_statement_d** %outer_bind, align 8, !dbg !10672
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %outer_bind, align 8, !dbg !10673
  %tobool13 = icmp ne %union.gimple_statement_d* %14, null, !dbg !10673
  br i1 %tobool13, label %if.end16, label %if.then14, !dbg !10675

if.then14:                                        ; preds = %cond.end9
  %call15 = call %union.gimple_statement_d* @gimple_build_nop(), !dbg !10676
  store %union.gimple_statement_d* %call15, %union.gimple_statement_d** %outer_bind, align 8, !dbg !10678
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %outer_bind, align 8, !dbg !10679
  call void @gimplify_seq_add_stmt(%struct.gimple_seq_d** %seq, %union.gimple_statement_d* %15), !dbg !10680
  br label %if.end16, !dbg !10681

if.end16:                                         ; preds = %if.then14, %cond.end9
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %outer_bind, align 8, !dbg !10682
  %call17 = call i32 @gimple_code(%union.gimple_statement_d* %16), !dbg !10684
  %cmp18 = icmp eq i32 %call17, 10, !dbg !10685
  br i1 %cmp18, label %land.lhs.true, label %if.else, !dbg !10686

land.lhs.true:                                    ; preds = %if.end16
  %17 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !10687
  %call20 = call %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %17), !dbg !10688
  %18 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !10689
  %call21 = call %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %18), !dbg !10690
  %cmp22 = icmp eq %struct.gimple_seq_node_d* %call20, %call21, !dbg !10691
  br i1 %cmp22, label %if.then24, label %if.else, !dbg !10692

if.then24:                                        ; preds = %land.lhs.true
  br label %if.end26, !dbg !10692

if.else:                                          ; preds = %land.lhs.true, %if.end16
  %19 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !10693
  %call25 = call %union.gimple_statement_d* @gimple_build_bind(%union.tree_node* null, %struct.gimple_seq_d* %19, %union.tree_node* null), !dbg !10694
  store %union.gimple_statement_d* %call25, %union.gimple_statement_d** %outer_bind, align 8, !dbg !10695
  br label %if.end26

if.end26:                                         ; preds = %if.else, %if.then24
  %20 = load %union.tree_node**, %union.tree_node*** %body_p.addr, align 8, !dbg !10696
  store %union.tree_node* null, %union.tree_node** %20, align 8, !dbg !10697
  %21 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %parm_stmts, align 8, !dbg !10698
  %call27 = call zeroext i8 @gimple_seq_empty_p(%struct.gimple_seq_d* %21), !dbg !10700
  %tobool28 = icmp ne i8 %call27, 0, !dbg !10700
  br i1 %tobool28, label %if.end42, label %if.then29, !dbg !10701

if.then29:                                        ; preds = %if.end26
  call void @llvm.dbg.declare(metadata %union.tree_node** %parm, metadata !10702, metadata !DIExpression()), !dbg !10704
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %outer_bind, align 8, !dbg !10705
  %call30 = call %struct.gimple_seq_d* @gimple_bind_body(%union.gimple_statement_d* %22), !dbg !10706
  call void @gimplify_seq_add_seq(%struct.gimple_seq_d** %parm_stmts, %struct.gimple_seq_d* %call30), !dbg !10707
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %outer_bind, align 8, !dbg !10708
  %24 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %parm_stmts, align 8, !dbg !10709
  call void @gimple_bind_set_body(%union.gimple_statement_d* %23, %struct.gimple_seq_d* %24), !dbg !10710
  %25 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !10711
  %decl_non_common = bitcast %union.tree_node* %25 to %struct.tree_decl_non_common*, !dbg !10711
  %arguments = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 2, !dbg !10711
  %26 = load %union.tree_node*, %union.tree_node** %arguments, align 8, !dbg !10711
  store %union.tree_node* %26, %union.tree_node** %parm, align 8, !dbg !10713
  br label %for.cond, !dbg !10714

for.cond:                                         ; preds = %for.inc, %if.then29
  %27 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !10715
  %tobool31 = icmp ne %union.tree_node* %27, null, !dbg !10717
  br i1 %tobool31, label %for.body, label %for.end, !dbg !10717

for.body:                                         ; preds = %for.cond
  %28 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !10718
  %decl_common = bitcast %union.tree_node* %28 to %struct.tree_decl_common*, !dbg !10718
  %decl_flag_2 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !10718
  %29 = bitcast i40* %decl_flag_2 to i64*, !dbg !10718
  %bf.load = load i64, i64* %29, align 8, !dbg !10718
  %bf.lshr = lshr i64 %bf.load, 26, !dbg !10718
  %bf.clear = and i64 %bf.lshr, 1, !dbg !10718
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !10718
  %tobool32 = icmp ne i32 %bf.cast, 0, !dbg !10718
  br i1 %tobool32, label %if.then33, label %if.end41, !dbg !10720

if.then33:                                        ; preds = %for.body
  %30 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !10721
  %decl_common34 = bitcast %union.tree_node* %30 to %struct.tree_decl_common*, !dbg !10721
  %decl_flag_235 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common34, i32 0, i32 2, !dbg !10721
  %31 = bitcast i40* %decl_flag_235 to i64*, !dbg !10721
  %bf.load36 = load i64, i64* %31, align 8, !dbg !10723
  %bf.clear37 = and i64 %bf.load36, -67108865, !dbg !10723
  store i64 %bf.clear37, i64* %31, align 8, !dbg !10723
  %32 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !10724
  %decl_common38 = bitcast %union.tree_node* %32 to %struct.tree_decl_common*, !dbg !10724
  %ignored_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common38, i32 0, i32 2, !dbg !10724
  %33 = bitcast i40* %ignored_flag to i64*, !dbg !10724
  %bf.load39 = load i64, i64* %33, align 8, !dbg !10725
  %bf.clear40 = and i64 %bf.load39, -1025, !dbg !10725
  store i64 %bf.clear40, i64* %33, align 8, !dbg !10725
  br label %if.end41, !dbg !10726

if.end41:                                         ; preds = %if.then33, %for.body
  br label %for.inc, !dbg !10718

for.inc:                                          ; preds = %if.end41
  %34 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !10727
  %common = bitcast %union.tree_node* %34 to %struct.tree_common*, !dbg !10727
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !10727
  %35 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !10727
  store %union.tree_node* %35, %union.tree_node** %parm, align 8, !dbg !10728
  br label %for.cond, !dbg !10729, !llvm.loop !10730

for.end:                                          ; preds = %for.cond
  br label %if.end42, !dbg !10732

if.end42:                                         ; preds = %for.end, %if.end26
  %36 = load %struct.pointer_set_t*, %struct.pointer_set_t** @nonlocal_vlas, align 8, !dbg !10733
  %tobool43 = icmp ne %struct.pointer_set_t* %36, null, !dbg !10733
  br i1 %tobool43, label %if.then44, label %if.end45, !dbg !10735

if.then44:                                        ; preds = %if.end42
  %37 = load %struct.pointer_set_t*, %struct.pointer_set_t** @nonlocal_vlas, align 8, !dbg !10736
  call void @pointer_set_destroy(%struct.pointer_set_t* %37), !dbg !10738
  store %struct.pointer_set_t* null, %struct.pointer_set_t** @nonlocal_vlas, align 8, !dbg !10739
  br label %if.end45, !dbg !10740

if.end45:                                         ; preds = %if.then44, %if.end42
  %38 = load %union.gimple_statement_d*, %union.gimple_statement_d** %outer_bind, align 8, !dbg !10741
  call void @pop_gimplify_context(%union.gimple_statement_d* %38), !dbg !10742
  %39 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !10743
  %cmp46 = icmp eq %struct.gimplify_ctx* %39, null, !dbg !10743
  br i1 %cmp46, label %cond.false49, label %cond.true48, !dbg !10743

cond.true48:                                      ; preds = %if.end45
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 7571, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10743
  br label %cond.end50, !dbg !10743

cond.false49:                                     ; preds = %if.end45
  br label %cond.end50, !dbg !10743

cond.end50:                                       ; preds = %cond.false49, %cond.true48
  %cond51 = phi i32 [ 0, %cond.true48 ], [ 0, %cond.false49 ], !dbg !10743
  br label %do.body52, !dbg !10744

do.body52:                                        ; preds = %cond.end50
  %40 = load i8, i8* @timevar_enable, align 1, !dbg !10745
  %tobool53 = icmp ne i8 %40, 0, !dbg !10745
  br i1 %tobool53, label %if.then54, label %if.end55, !dbg !10748

if.then54:                                        ; preds = %do.body52
  call void @timevar_pop_1(i32 48), !dbg !10745
  br label %if.end55, !dbg !10745

if.end55:                                         ; preds = %if.then54, %do.body52
  br label %do.end56, !dbg !10748

do.end56:                                         ; preds = %if.end55
  %41 = load i32, i32* %saved_location, align 4, !dbg !10749
  store i32 %41, i32* @input_location, align 4, !dbg !10750
  %42 = load %union.gimple_statement_d*, %union.gimple_statement_d** %outer_bind, align 8, !dbg !10751
  ret %union.gimple_statement_d* %42, !dbg !10752
}

declare dso_local void @timevar_push_1(i32) #3

declare dso_local void @default_rtl_profile() #3

; Function Attrs: noinline nounwind uwtable
define internal void @unshare_body(%union.tree_node** %body_p, %union.tree_node* %fndecl) #0 !dbg !10753 {
entry:
  %body_p.addr = alloca %union.tree_node**, align 8
  %fndecl.addr = alloca %union.tree_node*, align 8
  %cgn = alloca %struct.cgraph_node*, align 8
  store %union.tree_node** %body_p, %union.tree_node*** %body_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %body_p.addr, metadata !10756, metadata !DIExpression()), !dbg !10757
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !10758, metadata !DIExpression()), !dbg !10759
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %cgn, metadata !10760, metadata !DIExpression()), !dbg !10990
  %0 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !10991
  %call = call %struct.cgraph_node* @cgraph_node(%union.tree_node* %0), !dbg !10992
  store %struct.cgraph_node* %call, %struct.cgraph_node** %cgn, align 8, !dbg !10990
  %1 = load %union.tree_node**, %union.tree_node*** %body_p.addr, align 8, !dbg !10993
  %call1 = call %union.tree_node* @walk_tree_1(%union.tree_node** %1, %union.tree_node* (%union.tree_node**, i32*, i8*)* @copy_if_shared_r, i8* null, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !10993
  %2 = load %union.tree_node**, %union.tree_node*** %body_p.addr, align 8, !dbg !10994
  %3 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !10996
  %decl_non_common = bitcast %union.tree_node* %3 to %struct.tree_decl_non_common*, !dbg !10996
  %saved_tree = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 1, !dbg !10996
  %cmp = icmp eq %union.tree_node** %2, %saved_tree, !dbg !10997
  br i1 %cmp, label %if.then, label %if.end, !dbg !10998

if.then:                                          ; preds = %entry
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %cgn, align 8, !dbg !10999
  %nested = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %4, i32 0, i32 6, !dbg !11001
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %nested, align 8, !dbg !11001
  store %struct.cgraph_node* %5, %struct.cgraph_node** %cgn, align 8, !dbg !11002
  br label %for.cond, !dbg !11003

for.cond:                                         ; preds = %for.inc, %if.then
  %6 = load %struct.cgraph_node*, %struct.cgraph_node** %cgn, align 8, !dbg !11004
  %tobool = icmp ne %struct.cgraph_node* %6, null, !dbg !11006
  br i1 %tobool, label %for.body, label %for.end, !dbg !11006

for.body:                                         ; preds = %for.cond
  %7 = load %struct.cgraph_node*, %struct.cgraph_node** %cgn, align 8, !dbg !11007
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %7, i32 0, i32 0, !dbg !11007
  %8 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !11007
  %decl_non_common2 = bitcast %union.tree_node* %8 to %struct.tree_decl_non_common*, !dbg !11007
  %saved_tree3 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common2, i32 0, i32 1, !dbg !11007
  %9 = load %struct.cgraph_node*, %struct.cgraph_node** %cgn, align 8, !dbg !11008
  %decl4 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %9, i32 0, i32 0, !dbg !11009
  %10 = load %union.tree_node*, %union.tree_node** %decl4, align 8, !dbg !11009
  call void @unshare_body(%union.tree_node** %saved_tree3, %union.tree_node* %10), !dbg !11010
  br label %for.inc, !dbg !11010

for.inc:                                          ; preds = %for.body
  %11 = load %struct.cgraph_node*, %struct.cgraph_node** %cgn, align 8, !dbg !11011
  %next_nested = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %11, i32 0, i32 7, !dbg !11012
  %12 = load %struct.cgraph_node*, %struct.cgraph_node** %next_nested, align 8, !dbg !11012
  store %struct.cgraph_node* %12, %struct.cgraph_node** %cgn, align 8, !dbg !11013
  br label %for.cond, !dbg !11014, !llvm.loop !11015

for.end:                                          ; preds = %for.cond
  br label %if.end, !dbg !11016

if.end:                                           ; preds = %for.end, %entry
  ret void, !dbg !11017
}

; Function Attrs: noinline nounwind uwtable
define internal void @unvisit_body(%union.tree_node** %body_p, %union.tree_node* %fndecl) #0 !dbg !11018 {
entry:
  %body_p.addr = alloca %union.tree_node**, align 8
  %fndecl.addr = alloca %union.tree_node*, align 8
  %cgn = alloca %struct.cgraph_node*, align 8
  store %union.tree_node** %body_p, %union.tree_node*** %body_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %body_p.addr, metadata !11019, metadata !DIExpression()), !dbg !11020
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !11021, metadata !DIExpression()), !dbg !11022
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %cgn, metadata !11023, metadata !DIExpression()), !dbg !11024
  %0 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !11025
  %call = call %struct.cgraph_node* @cgraph_node(%union.tree_node* %0), !dbg !11026
  store %struct.cgraph_node* %call, %struct.cgraph_node** %cgn, align 8, !dbg !11024
  %1 = load %union.tree_node**, %union.tree_node*** %body_p.addr, align 8, !dbg !11027
  %call1 = call %union.tree_node* @walk_tree_1(%union.tree_node** %1, %union.tree_node* (%union.tree_node**, i32*, i8*)* @unmark_visited_r, i8* null, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !11027
  %2 = load %union.tree_node**, %union.tree_node*** %body_p.addr, align 8, !dbg !11028
  %3 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !11030
  %decl_non_common = bitcast %union.tree_node* %3 to %struct.tree_decl_non_common*, !dbg !11030
  %saved_tree = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 1, !dbg !11030
  %cmp = icmp eq %union.tree_node** %2, %saved_tree, !dbg !11031
  br i1 %cmp, label %if.then, label %if.end, !dbg !11032

if.then:                                          ; preds = %entry
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %cgn, align 8, !dbg !11033
  %nested = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %4, i32 0, i32 6, !dbg !11035
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %nested, align 8, !dbg !11035
  store %struct.cgraph_node* %5, %struct.cgraph_node** %cgn, align 8, !dbg !11036
  br label %for.cond, !dbg !11037

for.cond:                                         ; preds = %for.inc, %if.then
  %6 = load %struct.cgraph_node*, %struct.cgraph_node** %cgn, align 8, !dbg !11038
  %tobool = icmp ne %struct.cgraph_node* %6, null, !dbg !11040
  br i1 %tobool, label %for.body, label %for.end, !dbg !11040

for.body:                                         ; preds = %for.cond
  %7 = load %struct.cgraph_node*, %struct.cgraph_node** %cgn, align 8, !dbg !11041
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %7, i32 0, i32 0, !dbg !11041
  %8 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !11041
  %decl_non_common2 = bitcast %union.tree_node* %8 to %struct.tree_decl_non_common*, !dbg !11041
  %saved_tree3 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common2, i32 0, i32 1, !dbg !11041
  %9 = load %struct.cgraph_node*, %struct.cgraph_node** %cgn, align 8, !dbg !11042
  %decl4 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %9, i32 0, i32 0, !dbg !11043
  %10 = load %union.tree_node*, %union.tree_node** %decl4, align 8, !dbg !11043
  call void @unvisit_body(%union.tree_node** %saved_tree3, %union.tree_node* %10), !dbg !11044
  br label %for.inc, !dbg !11044

for.inc:                                          ; preds = %for.body
  %11 = load %struct.cgraph_node*, %struct.cgraph_node** %cgn, align 8, !dbg !11045
  %next_nested = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %11, i32 0, i32 7, !dbg !11046
  %12 = load %struct.cgraph_node*, %struct.cgraph_node** %next_nested, align 8, !dbg !11046
  store %struct.cgraph_node* %12, %struct.cgraph_node** %cgn, align 8, !dbg !11047
  br label %for.cond, !dbg !11048, !llvm.loop !11049

for.end:                                          ; preds = %for.cond
  br label %if.end, !dbg !11050

if.end:                                           ; preds = %for.end, %entry
  ret void, !dbg !11051
}

declare dso_local %struct.cgraph_node* @cgraph_node(%union.tree_node*) #3

declare dso_local %struct.pointer_set_t* @pointer_set_create() #3

declare dso_local %struct.gimple_seq_d* @gimplify_parameters() #3

declare dso_local %union.gimple_statement_d* @gimple_build_nop() #3

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %s) #0 !dbg !11052 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !11053, metadata !DIExpression()), !dbg !11054
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !11055
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !11055
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11055

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !11056
  %first = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 0, !dbg !11057
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %first, align 8, !dbg !11057
  br label %cond.end, !dbg !11055

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11055

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !11055
  ret %struct.gimple_seq_node_d* %cond, !dbg !11058
}

declare dso_local %union.gimple_statement_d* @gimple_build_bind(%union.tree_node*, %struct.gimple_seq_d*, %union.tree_node*) #3

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @gimple_bind_body(%union.gimple_statement_d* %gs) #0 !dbg !11059 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !11062, metadata !DIExpression()), !dbg !11063
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !11064
  %gimple_bind = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_bind*, !dbg !11065
  %body = getelementptr inbounds %struct.gimple_statement_bind, %struct.gimple_statement_bind* %gimple_bind, i32 0, i32 3, !dbg !11066
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %body, align 8, !dbg !11066
  ret %struct.gimple_seq_d* %1, !dbg !11067
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_bind_set_body(%union.gimple_statement_d* %gs, %struct.gimple_seq_d* %seq) #0 !dbg !11068 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %seq.addr = alloca %struct.gimple_seq_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !11071, metadata !DIExpression()), !dbg !11072
  store %struct.gimple_seq_d* %seq, %struct.gimple_seq_d** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq.addr, metadata !11073, metadata !DIExpression()), !dbg !11074
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !11075
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !11076
  %gimple_bind = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_bind*, !dbg !11077
  %body = getelementptr inbounds %struct.gimple_statement_bind, %struct.gimple_statement_bind* %gimple_bind, i32 0, i32 3, !dbg !11078
  store %struct.gimple_seq_d* %0, %struct.gimple_seq_d** %body, align 8, !dbg !11079
  ret void, !dbg !11080
}

declare dso_local void @pointer_set_destroy(%struct.pointer_set_t*) #3

declare dso_local void @timevar_pop_1(i32) #3

; Function Attrs: noinline nounwind uwtable
define dso_local void @gimplify_function_tree(%union.tree_node* %fndecl) #0 !dbg !11081 {
entry:
  %fndecl.addr = alloca %union.tree_node*, align 8
  %oldfn = alloca %union.tree_node*, align 8
  %parm = alloca %union.tree_node*, align 8
  %ret = alloca %union.tree_node*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  %bind = alloca %union.gimple_statement_d*, align 8
  %x = alloca %union.tree_node*, align 8
  %new_bind = alloca %union.gimple_statement_d*, align 8
  %tf = alloca %union.gimple_statement_d*, align 8
  %cleanup = alloca %struct.gimple_seq_d*, align 8
  %body = alloca %struct.gimple_seq_d*, align 8
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !11082, metadata !DIExpression()), !dbg !11083
  call void @llvm.dbg.declare(metadata %union.tree_node** %oldfn, metadata !11084, metadata !DIExpression()), !dbg !11085
  call void @llvm.dbg.declare(metadata %union.tree_node** %parm, metadata !11086, metadata !DIExpression()), !dbg !11087
  call void @llvm.dbg.declare(metadata %union.tree_node** %ret, metadata !11088, metadata !DIExpression()), !dbg !11089
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !11090, metadata !DIExpression()), !dbg !11091
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %bind, metadata !11092, metadata !DIExpression()), !dbg !11093
  %0 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !11094
  %call = call %struct.gimple_seq_d* @gimple_body(%union.tree_node* %0), !dbg !11094
  %tobool = icmp ne %struct.gimple_seq_d* %call, null, !dbg !11094
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11094

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 7597, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !11094
  br label %cond.end, !dbg !11094

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11094

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !11094
  %1 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !11095
  store %union.tree_node* %1, %union.tree_node** %oldfn, align 8, !dbg !11096
  %2 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !11097
  store %union.tree_node* %2, %union.tree_node** @current_function_decl, align 8, !dbg !11098
  %3 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !11099
  %function_decl = bitcast %union.tree_node* %3 to %struct.tree_function_decl*, !dbg !11099
  %f = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 1, !dbg !11099
  %4 = load %struct.function*, %struct.function** %f, align 8, !dbg !11099
  %tobool1 = icmp ne %struct.function* %4, null, !dbg !11099
  br i1 %tobool1, label %if.then, label %if.else, !dbg !11101

if.then:                                          ; preds = %cond.end
  %5 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !11102
  %function_decl2 = bitcast %union.tree_node* %5 to %struct.tree_function_decl*, !dbg !11102
  %f3 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl2, i32 0, i32 1, !dbg !11102
  %6 = load %struct.function*, %struct.function** %f3, align 8, !dbg !11102
  call void @push_cfun(%struct.function* %6), !dbg !11103
  br label %if.end, !dbg !11103

if.else:                                          ; preds = %cond.end
  %7 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !11104
  call void @push_struct_function(%union.tree_node* %7), !dbg !11105
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %8 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !11106
  %decl_non_common = bitcast %union.tree_node* %8 to %struct.tree_decl_non_common*, !dbg !11106
  %arguments = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 2, !dbg !11106
  %9 = load %union.tree_node*, %union.tree_node** %arguments, align 8, !dbg !11106
  store %union.tree_node* %9, %union.tree_node** %parm, align 8, !dbg !11108
  br label %for.cond, !dbg !11109

for.cond:                                         ; preds = %for.inc, %if.end
  %10 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !11110
  %tobool4 = icmp ne %union.tree_node* %10, null, !dbg !11112
  br i1 %tobool4, label %for.body, label %for.end, !dbg !11112

for.body:                                         ; preds = %for.cond
  %11 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !11113
  %common = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !11113
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !11113
  %12 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !11113
  %base = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !11113
  %13 = bitcast %struct.tree_base* %base to i64*, !dbg !11113
  %bf.load = load i64, i64* %13, align 8, !dbg !11113
  %bf.clear = and i64 %bf.load, 65535, !dbg !11113
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !11113
  %cmp = icmp eq i32 %bf.cast, 13, !dbg !11116
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !11117

lor.lhs.false:                                    ; preds = %for.body
  %14 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !11118
  %common5 = bitcast %union.tree_node* %14 to %struct.tree_common*, !dbg !11118
  %type6 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5, i32 0, i32 2, !dbg !11118
  %15 = load %union.tree_node*, %union.tree_node** %type6, align 8, !dbg !11118
  %base7 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !11118
  %16 = bitcast %struct.tree_base* %base7 to i64*, !dbg !11118
  %bf.load8 = load i64, i64* %16, align 8, !dbg !11118
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !11118
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !11118
  %cmp11 = icmp eq i32 %bf.cast10, 14, !dbg !11119
  br i1 %cmp11, label %land.lhs.true, label %if.end23, !dbg !11120

land.lhs.true:                                    ; preds = %lor.lhs.false, %for.body
  %17 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !11121
  %base12 = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !11121
  %18 = bitcast %struct.tree_base* %base12 to i64*, !dbg !11121
  %bf.load13 = load i64, i64* %18, align 8, !dbg !11121
  %bf.lshr = lshr i64 %bf.load13, 19, !dbg !11121
  %bf.clear14 = and i64 %bf.lshr, 1, !dbg !11121
  %bf.cast15 = trunc i64 %bf.clear14 to i32, !dbg !11121
  %tobool16 = icmp ne i32 %bf.cast15, 0, !dbg !11121
  br i1 %tobool16, label %if.end23, label %land.lhs.true17, !dbg !11122

land.lhs.true17:                                  ; preds = %land.lhs.true
  %19 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !11123
  %call18 = call zeroext i8 @needs_to_live_in_memory(%union.tree_node* %19), !dbg !11124
  %tobool19 = icmp ne i8 %call18, 0, !dbg !11124
  br i1 %tobool19, label %if.end23, label %if.then20, !dbg !11125

if.then20:                                        ; preds = %land.lhs.true17
  %20 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !11126
  %decl_common = bitcast %union.tree_node* %20 to %struct.tree_decl_common*, !dbg !11126
  %gimple_reg_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !11126
  %21 = bitcast i40* %gimple_reg_flag to i64*, !dbg !11126
  %bf.load21 = load i64, i64* %21, align 8, !dbg !11127
  %bf.clear22 = and i64 %bf.load21, -134217729, !dbg !11127
  %bf.set = or i64 %bf.clear22, 134217728, !dbg !11127
  store i64 %bf.set, i64* %21, align 8, !dbg !11127
  br label %if.end23, !dbg !11126

if.end23:                                         ; preds = %if.then20, %land.lhs.true17, %land.lhs.true, %lor.lhs.false
  br label %for.inc, !dbg !11128

for.inc:                                          ; preds = %if.end23
  %22 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !11129
  %common24 = bitcast %union.tree_node* %22 to %struct.tree_common*, !dbg !11129
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common24, i32 0, i32 1, !dbg !11129
  %23 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !11129
  store %union.tree_node* %23, %union.tree_node** %parm, align 8, !dbg !11130
  br label %for.cond, !dbg !11131, !llvm.loop !11132

for.end:                                          ; preds = %for.cond
  %24 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !11134
  %decl_non_common25 = bitcast %union.tree_node* %24 to %struct.tree_decl_non_common*, !dbg !11134
  %result = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common25, i32 0, i32 3, !dbg !11134
  %25 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !11134
  store %union.tree_node* %25, %union.tree_node** %ret, align 8, !dbg !11135
  %26 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !11136
  %common26 = bitcast %union.tree_node* %26 to %struct.tree_common*, !dbg !11136
  %type27 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common26, i32 0, i32 2, !dbg !11136
  %27 = load %union.tree_node*, %union.tree_node** %type27, align 8, !dbg !11136
  %base28 = bitcast %union.tree_node* %27 to %struct.tree_base*, !dbg !11136
  %28 = bitcast %struct.tree_base* %base28 to i64*, !dbg !11136
  %bf.load29 = load i64, i64* %28, align 8, !dbg !11136
  %bf.clear30 = and i64 %bf.load29, 65535, !dbg !11136
  %bf.cast31 = trunc i64 %bf.clear30 to i32, !dbg !11136
  %cmp32 = icmp eq i32 %bf.cast31, 13, !dbg !11138
  br i1 %cmp32, label %land.lhs.true41, label %lor.lhs.false33, !dbg !11139

lor.lhs.false33:                                  ; preds = %for.end
  %29 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !11140
  %common34 = bitcast %union.tree_node* %29 to %struct.tree_common*, !dbg !11140
  %type35 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common34, i32 0, i32 2, !dbg !11140
  %30 = load %union.tree_node*, %union.tree_node** %type35, align 8, !dbg !11140
  %base36 = bitcast %union.tree_node* %30 to %struct.tree_base*, !dbg !11140
  %31 = bitcast %struct.tree_base* %base36 to i64*, !dbg !11140
  %bf.load37 = load i64, i64* %31, align 8, !dbg !11140
  %bf.clear38 = and i64 %bf.load37, 65535, !dbg !11140
  %bf.cast39 = trunc i64 %bf.clear38 to i32, !dbg !11140
  %cmp40 = icmp eq i32 %bf.cast39, 14, !dbg !11141
  br i1 %cmp40, label %land.lhs.true41, label %if.end50, !dbg !11142

land.lhs.true41:                                  ; preds = %lor.lhs.false33, %for.end
  %32 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !11143
  %call42 = call zeroext i8 @needs_to_live_in_memory(%union.tree_node* %32), !dbg !11144
  %tobool43 = icmp ne i8 %call42, 0, !dbg !11144
  br i1 %tobool43, label %if.end50, label %if.then44, !dbg !11145

if.then44:                                        ; preds = %land.lhs.true41
  %33 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !11146
  %decl_common45 = bitcast %union.tree_node* %33 to %struct.tree_decl_common*, !dbg !11146
  %gimple_reg_flag46 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common45, i32 0, i32 2, !dbg !11146
  %34 = bitcast i40* %gimple_reg_flag46 to i64*, !dbg !11146
  %bf.load47 = load i64, i64* %34, align 8, !dbg !11147
  %bf.clear48 = and i64 %bf.load47, -134217729, !dbg !11147
  %bf.set49 = or i64 %bf.clear48, 134217728, !dbg !11147
  store i64 %bf.set49, i64* %34, align 8, !dbg !11147
  br label %if.end50, !dbg !11146

if.end50:                                         ; preds = %if.then44, %land.lhs.true41, %lor.lhs.false33
  %35 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !11148
  %decl_non_common51 = bitcast %union.tree_node* %35 to %struct.tree_decl_non_common*, !dbg !11148
  %saved_tree = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common51, i32 0, i32 1, !dbg !11148
  %36 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !11149
  %call52 = call %union.gimple_statement_d* @gimplify_body(%union.tree_node** %saved_tree, %union.tree_node* %36, i8 zeroext 1), !dbg !11150
  store %union.gimple_statement_d* %call52, %union.gimple_statement_d** %bind, align 8, !dbg !11151
  %call53 = call %struct.gimple_seq_d* @gimple_seq_alloc(), !dbg !11152
  store %struct.gimple_seq_d* %call53, %struct.gimple_seq_d** %seq, align 8, !dbg !11153
  %37 = load %union.gimple_statement_d*, %union.gimple_statement_d** %bind, align 8, !dbg !11154
  call void @gimple_seq_add_stmt(%struct.gimple_seq_d** %seq, %union.gimple_statement_d* %37), !dbg !11155
  %38 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !11156
  %39 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !11157
  call void @gimple_set_body(%union.tree_node* %38, %struct.gimple_seq_d* %39), !dbg !11158
  %40 = load i32, i32* @flag_instrument_function_entry_exit, align 4, !dbg !11159
  %tobool54 = icmp ne i32 %40, 0, !dbg !11159
  br i1 %tobool54, label %land.lhs.true55, label %if.end71, !dbg !11161

land.lhs.true55:                                  ; preds = %if.end50
  %41 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !11162
  %function_decl56 = bitcast %union.tree_node* %41 to %struct.tree_function_decl*, !dbg !11162
  %no_instrument_function_entry_exit = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl56, i32 0, i32 5, !dbg !11162
  %bf.load57 = load i32, i32* %no_instrument_function_entry_exit, align 8, !dbg !11162
  %bf.lshr58 = lshr i32 %bf.load57, 24, !dbg !11162
  %bf.clear59 = and i32 %bf.lshr58, 1, !dbg !11162
  %tobool60 = icmp ne i32 %bf.clear59, 0, !dbg !11162
  br i1 %tobool60, label %if.end71, label %land.lhs.true61, !dbg !11163

land.lhs.true61:                                  ; preds = %land.lhs.true55
  %42 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !11164
  %call62 = call zeroext i8 @flag_instrument_functions_exclude_p(%union.tree_node* %42), !dbg !11165
  %tobool63 = icmp ne i8 %call62, 0, !dbg !11165
  br i1 %tobool63, label %if.end71, label %if.then64, !dbg !11166

if.then64:                                        ; preds = %land.lhs.true61
  call void @llvm.dbg.declare(metadata %union.tree_node** %x, metadata !11167, metadata !DIExpression()), !dbg !11169
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %new_bind, metadata !11170, metadata !DIExpression()), !dbg !11171
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %tf, metadata !11172, metadata !DIExpression()), !dbg !11173
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %cleanup, metadata !11174, metadata !DIExpression()), !dbg !11175
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %cleanup, align 8, !dbg !11175
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %body, metadata !11176, metadata !DIExpression()), !dbg !11177
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %body, align 8, !dbg !11177
  %43 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @implicit_built_in_decls, i64 0, i64 547), align 8, !dbg !11178
  store %union.tree_node* %43, %union.tree_node** %x, align 8, !dbg !11179
  %44 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !11180
  %call65 = call %union.gimple_statement_d* (%union.tree_node*, i32, ...) @gimple_build_call(%union.tree_node* %44, i32 0), !dbg !11181
  call void @gimplify_seq_add_stmt(%struct.gimple_seq_d** %cleanup, %union.gimple_statement_d* %call65), !dbg !11182
  %45 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !11183
  %46 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %cleanup, align 8, !dbg !11184
  %call66 = call %union.gimple_statement_d* @gimple_build_try(%struct.gimple_seq_d* %45, %struct.gimple_seq_d* %46, i32 2), !dbg !11185
  store %union.gimple_statement_d* %call66, %union.gimple_statement_d** %tf, align 8, !dbg !11186
  %47 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @implicit_built_in_decls, i64 0, i64 546), align 16, !dbg !11187
  store %union.tree_node* %47, %union.tree_node** %x, align 8, !dbg !11188
  %48 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !11189
  %call67 = call %union.gimple_statement_d* (%union.tree_node*, i32, ...) @gimple_build_call(%union.tree_node* %48, i32 0), !dbg !11190
  call void @gimplify_seq_add_stmt(%struct.gimple_seq_d** %body, %union.gimple_statement_d* %call67), !dbg !11191
  %49 = load %union.gimple_statement_d*, %union.gimple_statement_d** %tf, align 8, !dbg !11192
  call void @gimplify_seq_add_stmt(%struct.gimple_seq_d** %body, %union.gimple_statement_d* %49), !dbg !11193
  %50 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %body, align 8, !dbg !11194
  %51 = load %union.gimple_statement_d*, %union.gimple_statement_d** %bind, align 8, !dbg !11195
  %call68 = call %union.tree_node* @gimple_bind_block(%union.gimple_statement_d* %51), !dbg !11196
  %call69 = call %union.gimple_statement_d* @gimple_build_bind(%union.tree_node* null, %struct.gimple_seq_d* %50, %union.tree_node* %call68), !dbg !11197
  store %union.gimple_statement_d* %call69, %union.gimple_statement_d** %new_bind, align 8, !dbg !11198
  %52 = load %union.gimple_statement_d*, %union.gimple_statement_d** %bind, align 8, !dbg !11199
  call void @gimple_bind_set_block(%union.gimple_statement_d* %52, %union.tree_node* null), !dbg !11200
  %call70 = call %struct.gimple_seq_d* @gimple_seq_alloc(), !dbg !11201
  store %struct.gimple_seq_d* %call70, %struct.gimple_seq_d** %seq, align 8, !dbg !11202
  %53 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_bind, align 8, !dbg !11203
  call void @gimple_seq_add_stmt(%struct.gimple_seq_d** %seq, %union.gimple_statement_d* %53), !dbg !11204
  %54 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !11205
  %55 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !11206
  call void @gimple_set_body(%union.tree_node* %54, %struct.gimple_seq_d* %55), !dbg !11207
  br label %if.end71, !dbg !11208

if.end71:                                         ; preds = %if.then64, %land.lhs.true61, %land.lhs.true55, %if.end50
  %56 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !11209
  %decl_non_common72 = bitcast %union.tree_node* %56 to %struct.tree_decl_non_common*, !dbg !11209
  %saved_tree73 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common72, i32 0, i32 1, !dbg !11209
  store %union.tree_node* null, %union.tree_node** %saved_tree73, align 8, !dbg !11210
  %57 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !11211
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %57, i64 0, !dbg !11211
  %curr_properties = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 17, !dbg !11212
  store i32 1, i32* %curr_properties, align 8, !dbg !11213
  %58 = load %union.tree_node*, %union.tree_node** %oldfn, align 8, !dbg !11214
  store %union.tree_node* %58, %union.tree_node** @current_function_decl, align 8, !dbg !11215
  call void @pop_cfun(), !dbg !11216
  ret void, !dbg !11217
}

declare dso_local void @push_cfun(%struct.function*) #3

declare dso_local void @push_struct_function(%union.tree_node*) #3

declare dso_local zeroext i8 @needs_to_live_in_memory(%union.tree_node*) #3

declare dso_local void @gimple_seq_add_stmt(%struct.gimple_seq_d**, %union.gimple_statement_d*) #3

declare dso_local void @gimple_set_body(%union.tree_node*, %struct.gimple_seq_d*) #3

declare dso_local zeroext i8 @flag_instrument_functions_exclude_p(%union.tree_node*) #3

declare dso_local %union.gimple_statement_d* @gimple_build_call(%union.tree_node*, i32, ...) #3

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_bind_set_block(%union.gimple_statement_d* %gs, %union.tree_node* %block) #0 !dbg !11218 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %block.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !11219, metadata !DIExpression()), !dbg !11220
  store %union.tree_node* %block, %union.tree_node** %block.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %block.addr, metadata !11221, metadata !DIExpression()), !dbg !11222
  %0 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !11223
  %cmp = icmp eq %union.tree_node* %0, null, !dbg !11223
  br i1 %cmp, label %cond.false, label %lor.lhs.false, !dbg !11223

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !11223
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !11223
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !11223
  %bf.load = load i64, i64* %2, align 8, !dbg !11223
  %bf.clear = and i64 %bf.load, 65535, !dbg !11223
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !11223
  %cmp1 = icmp eq i32 %bf.cast, 4, !dbg !11223
  br i1 %cmp1, label %cond.false, label %cond.true, !dbg !11223

cond.true:                                        ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.16, i64 0, i64 0), i32 2573, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !11223
  br label %cond.end, !dbg !11223

cond.false:                                       ; preds = %lor.lhs.false, %entry
  br label %cond.end, !dbg !11223

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !11223
  %3 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !11224
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !11225
  %gimple_bind = bitcast %union.gimple_statement_d* %4 to %struct.gimple_statement_bind*, !dbg !11226
  %block2 = getelementptr inbounds %struct.gimple_statement_bind, %struct.gimple_statement_bind* %gimple_bind, i32 0, i32 2, !dbg !11227
  store %union.tree_node* %3, %union.tree_node** %block2, align 8, !dbg !11228
  ret void, !dbg !11229
}

declare dso_local void @pop_cfun() #3

; Function Attrs: noinline nounwind uwtable
define dso_local void @gimple_regimplify_operands(%union.gimple_statement_d* %stmt, %struct.gimple_stmt_iterator* %gsi_p) #0 !dbg !11230 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %gsi_p.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %i = alloca i64, align 8
  %num_ops = alloca i64, align 8
  %orig_lhs = alloca %union.tree_node*, align 8
  %lhs = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  %pre = alloca %struct.gimple_seq_d*, align 8
  %post_stmt = alloca %union.gimple_statement_d*, align 8
  %gctx = alloca %struct.gimplify_ctx, align 8
  %i13 = alloca i64, align 8
  %noutputs = alloca i64, align 8
  %constraint = alloca i8*, align 8
  %oconstraints = alloca i8**, align 8
  %allows_mem = alloca i8, align 1
  %allows_reg = alloca i8, align 1
  %is_inout = alloca i8, align 1
  %op = alloca %union.tree_node*, align 8
  %op31 = alloca %union.tree_node*, align 8
  %op70 = alloca %union.tree_node*, align 8
  %need_temp = alloca i8, align 1
  %fndecl = alloca %union.tree_node*, align 8
  %temp = alloca %union.tree_node*, align 8
  %i309 = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !11233, metadata !DIExpression()), !dbg !11234
  store %struct.gimple_stmt_iterator* %gsi_p, %struct.gimple_stmt_iterator** %gsi_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi_p.addr, metadata !11235, metadata !DIExpression()), !dbg !11236
  call void @llvm.dbg.declare(metadata i64* %i, metadata !11237, metadata !DIExpression()), !dbg !11238
  call void @llvm.dbg.declare(metadata i64* %num_ops, metadata !11239, metadata !DIExpression()), !dbg !11240
  call void @llvm.dbg.declare(metadata %union.tree_node** %orig_lhs, metadata !11241, metadata !DIExpression()), !dbg !11242
  store %union.tree_node* null, %union.tree_node** %orig_lhs, align 8, !dbg !11242
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !11243, metadata !DIExpression()), !dbg !11244
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !11245, metadata !DIExpression()), !dbg !11246
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %pre, metadata !11247, metadata !DIExpression()), !dbg !11248
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %pre, align 8, !dbg !11248
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %post_stmt, metadata !11249, metadata !DIExpression()), !dbg !11250
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %post_stmt, align 8, !dbg !11250
  call void @llvm.dbg.declare(metadata %struct.gimplify_ctx* %gctx, metadata !11251, metadata !DIExpression()), !dbg !11252
  call void @push_gimplify_context(%struct.gimplify_ctx* %gctx), !dbg !11253
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !11254
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !11254
  %call = call zeroext i8 @gimple_in_ssa_p(%struct.function* %add.ptr), !dbg !11255
  %1 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !11256
  %into_ssa = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %1, i32 0, i32 10, !dbg !11257
  store i8 %call, i8* %into_ssa, align 1, !dbg !11258
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11259
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %2), !dbg !11260
  switch i32 %call1, label %sw.default [
    i32 1, label %sw.bb
    i32 5, label %sw.bb6
    i32 19, label %sw.bb9
    i32 7, label %sw.bb12
  ], !dbg !11261

sw.bb:                                            ; preds = %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11262
  %call2 = call %union.tree_node** @gimple_cond_lhs_ptr(%union.gimple_statement_d* %3), !dbg !11264
  %call3 = call i32 @gimplify_expr(%union.tree_node** %call2, %struct.gimple_seq_d** %pre, %struct.gimple_seq_d** null, i8 (%union.tree_node*)* @is_gimple_val, i32 1), !dbg !11265
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11266
  %call4 = call %union.tree_node** @gimple_cond_rhs_ptr(%union.gimple_statement_d* %4), !dbg !11267
  %call5 = call i32 @gimplify_expr(%union.tree_node** %call4, %struct.gimple_seq_d** %pre, %struct.gimple_seq_d** null, i8 (%union.tree_node*)* @is_gimple_val, i32 1), !dbg !11268
  br label %sw.epilog, !dbg !11269

sw.bb6:                                           ; preds = %entry
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11270
  %call7 = call %union.tree_node** @gimple_switch_index_ptr(%union.gimple_statement_d* %5), !dbg !11271
  %call8 = call i32 @gimplify_expr(%union.tree_node** %call7, %struct.gimple_seq_d** %pre, %struct.gimple_seq_d** null, i8 (%union.tree_node*)* @is_gimple_val, i32 1), !dbg !11272
  br label %sw.epilog, !dbg !11273

sw.bb9:                                           ; preds = %entry
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11274
  %call10 = call %union.tree_node** @gimple_omp_atomic_load_rhs_ptr(%union.gimple_statement_d* %6), !dbg !11275
  %call11 = call i32 @gimplify_expr(%union.tree_node** %call10, %struct.gimple_seq_d** %pre, %struct.gimple_seq_d** null, i8 (%union.tree_node*)* @is_gimple_val, i32 1), !dbg !11276
  br label %sw.epilog, !dbg !11277

sw.bb12:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i64* %i13, metadata !11278, metadata !DIExpression()), !dbg !11280
  call void @llvm.dbg.declare(metadata i64* %noutputs, metadata !11281, metadata !DIExpression()), !dbg !11282
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11283
  %call14 = call i32 @gimple_asm_noutputs(%union.gimple_statement_d* %7), !dbg !11284
  %conv = zext i32 %call14 to i64, !dbg !11284
  store i64 %conv, i64* %noutputs, align 8, !dbg !11282
  call void @llvm.dbg.declare(metadata i8** %constraint, metadata !11285, metadata !DIExpression()), !dbg !11286
  call void @llvm.dbg.declare(metadata i8*** %oconstraints, metadata !11287, metadata !DIExpression()), !dbg !11288
  call void @llvm.dbg.declare(metadata i8* %allows_mem, metadata !11289, metadata !DIExpression()), !dbg !11290
  call void @llvm.dbg.declare(metadata i8* %allows_reg, metadata !11291, metadata !DIExpression()), !dbg !11292
  call void @llvm.dbg.declare(metadata i8* %is_inout, metadata !11293, metadata !DIExpression()), !dbg !11294
  %8 = load i64, i64* %noutputs, align 8, !dbg !11295
  %mul = mul i64 %8, 8, !dbg !11295
  %9 = alloca i8, i64 %mul, align 16, !dbg !11295
  %10 = bitcast i8* %9 to i8**, !dbg !11296
  store i8** %10, i8*** %oconstraints, align 8, !dbg !11297
  store i64 0, i64* %i13, align 8, !dbg !11298
  br label %for.cond, !dbg !11300

for.cond:                                         ; preds = %for.inc, %sw.bb12
  %11 = load i64, i64* %i13, align 8, !dbg !11301
  %12 = load i64, i64* %noutputs, align 8, !dbg !11303
  %cmp = icmp ult i64 %11, %12, !dbg !11304
  br i1 %cmp, label %for.body, label %for.end, !dbg !11305

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %op, metadata !11306, metadata !DIExpression()), !dbg !11308
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11309
  %14 = load i64, i64* %i13, align 8, !dbg !11310
  %conv16 = trunc i64 %14 to i32, !dbg !11310
  %call17 = call %union.tree_node* @gimple_asm_output_op(%union.gimple_statement_d* %13, i32 %conv16), !dbg !11311
  store %union.tree_node* %call17, %union.tree_node** %op, align 8, !dbg !11308
  %15 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !11312
  %list = bitcast %union.tree_node* %15 to %struct.tree_list*, !dbg !11312
  %purpose = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 1, !dbg !11312
  %16 = load %union.tree_node*, %union.tree_node** %purpose, align 8, !dbg !11312
  %list18 = bitcast %union.tree_node* %16 to %struct.tree_list*, !dbg !11312
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list18, i32 0, i32 2, !dbg !11312
  %17 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !11312
  %string = bitcast %union.tree_node* %17 to %struct.tree_string*, !dbg !11312
  %str = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string, i32 0, i32 2, !dbg !11312
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %str, i64 0, i64 0, !dbg !11312
  store i8* %arraydecay, i8** %constraint, align 8, !dbg !11313
  %18 = load i8*, i8** %constraint, align 8, !dbg !11314
  %19 = load i8**, i8*** %oconstraints, align 8, !dbg !11315
  %20 = load i64, i64* %i13, align 8, !dbg !11316
  %arrayidx = getelementptr inbounds i8*, i8** %19, i64 %20, !dbg !11315
  store i8* %18, i8** %arrayidx, align 8, !dbg !11317
  %21 = load i64, i64* %i13, align 8, !dbg !11318
  %conv19 = trunc i64 %21 to i32, !dbg !11318
  %call20 = call zeroext i8 @parse_output_constraint(i8** %constraint, i32 %conv19, i32 0, i32 0, i8* %allows_mem, i8* %allows_reg, i8* %is_inout), !dbg !11319
  %22 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !11320
  %list21 = bitcast %union.tree_node* %22 to %struct.tree_list*, !dbg !11320
  %value22 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list21, i32 0, i32 2, !dbg !11320
  %23 = load i8, i8* %is_inout, align 1, !dbg !11321
  %conv23 = zext i8 %23 to i32, !dbg !11321
  %tobool = icmp ne i32 %conv23, 0, !dbg !11321
  %24 = zext i1 %tobool to i64, !dbg !11321
  %cond = select i1 %tobool, i8 (%union.tree_node*)* @is_gimple_min_lval, i8 (%union.tree_node*)* @is_gimple_lvalue, !dbg !11321
  %call24 = call i32 @gimplify_expr(%union.tree_node** %value22, %struct.gimple_seq_d** %pre, %struct.gimple_seq_d** null, i8 (%union.tree_node*)* %cond, i32 6), !dbg !11322
  br label %for.inc, !dbg !11323

for.inc:                                          ; preds = %for.body
  %25 = load i64, i64* %i13, align 8, !dbg !11324
  %inc = add i64 %25, 1, !dbg !11324
  store i64 %inc, i64* %i13, align 8, !dbg !11324
  br label %for.cond, !dbg !11325, !llvm.loop !11326

for.end:                                          ; preds = %for.cond
  store i64 0, i64* %i13, align 8, !dbg !11328
  br label %for.cond25, !dbg !11330

for.cond25:                                       ; preds = %for.inc60, %for.end
  %26 = load i64, i64* %i13, align 8, !dbg !11331
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11333
  %call26 = call i32 @gimple_asm_ninputs(%union.gimple_statement_d* %27), !dbg !11334
  %conv27 = zext i32 %call26 to i64, !dbg !11334
  %cmp28 = icmp ult i64 %26, %conv27, !dbg !11335
  br i1 %cmp28, label %for.body30, label %for.end62, !dbg !11336

for.body30:                                       ; preds = %for.cond25
  call void @llvm.dbg.declare(metadata %union.tree_node** %op31, metadata !11337, metadata !DIExpression()), !dbg !11339
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11340
  %29 = load i64, i64* %i13, align 8, !dbg !11341
  %conv32 = trunc i64 %29 to i32, !dbg !11341
  %call33 = call %union.tree_node* @gimple_asm_input_op(%union.gimple_statement_d* %28, i32 %conv32), !dbg !11342
  store %union.tree_node* %call33, %union.tree_node** %op31, align 8, !dbg !11339
  %30 = load %union.tree_node*, %union.tree_node** %op31, align 8, !dbg !11343
  %list34 = bitcast %union.tree_node* %30 to %struct.tree_list*, !dbg !11343
  %purpose35 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list34, i32 0, i32 1, !dbg !11343
  %31 = load %union.tree_node*, %union.tree_node** %purpose35, align 8, !dbg !11343
  %list36 = bitcast %union.tree_node* %31 to %struct.tree_list*, !dbg !11343
  %value37 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list36, i32 0, i32 2, !dbg !11343
  %32 = load %union.tree_node*, %union.tree_node** %value37, align 8, !dbg !11343
  %string38 = bitcast %union.tree_node* %32 to %struct.tree_string*, !dbg !11343
  %str39 = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string38, i32 0, i32 2, !dbg !11343
  %arraydecay40 = getelementptr inbounds [1 x i8], [1 x i8]* %str39, i64 0, i64 0, !dbg !11343
  store i8* %arraydecay40, i8** %constraint, align 8, !dbg !11344
  %33 = load i64, i64* %noutputs, align 8, !dbg !11345
  %conv41 = trunc i64 %33 to i32, !dbg !11345
  %34 = load i8**, i8*** %oconstraints, align 8, !dbg !11346
  %call42 = call zeroext i8 @parse_input_constraint(i8** %constraint, i32 0, i32 0, i32 %conv41, i32 0, i8** %34, i8* %allows_mem, i8* %allows_reg), !dbg !11347
  %35 = load %union.tree_node*, %union.tree_node** %op31, align 8, !dbg !11348
  %list43 = bitcast %union.tree_node* %35 to %struct.tree_list*, !dbg !11348
  %value44 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list43, i32 0, i32 2, !dbg !11348
  %36 = load %union.tree_node*, %union.tree_node** %value44, align 8, !dbg !11348
  %common = bitcast %union.tree_node* %36 to %struct.tree_common*, !dbg !11348
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !11348
  %37 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !11348
  %base = bitcast %union.tree_node* %37 to %struct.tree_base*, !dbg !11348
  %38 = bitcast %struct.tree_base* %base to i64*, !dbg !11348
  %bf.load = load i64, i64* %38, align 8, !dbg !11348
  %bf.lshr = lshr i64 %bf.load, 18, !dbg !11348
  %bf.clear = and i64 %bf.lshr, 1, !dbg !11348
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !11348
  %tobool45 = icmp ne i32 %bf.cast, 0, !dbg !11348
  br i1 %tobool45, label %land.lhs.true, label %if.end, !dbg !11350

land.lhs.true:                                    ; preds = %for.body30
  %39 = load i8, i8* %allows_mem, align 1, !dbg !11351
  %conv46 = zext i8 %39 to i32, !dbg !11351
  %tobool47 = icmp ne i32 %conv46, 0, !dbg !11351
  br i1 %tobool47, label %if.then, label %if.end, !dbg !11352

if.then:                                          ; preds = %land.lhs.true
  store i8 0, i8* %allows_reg, align 1, !dbg !11353
  br label %if.end, !dbg !11354

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body30
  %40 = load i8, i8* %allows_reg, align 1, !dbg !11355
  %tobool48 = icmp ne i8 %40, 0, !dbg !11355
  br i1 %tobool48, label %if.else, label %land.lhs.true49, !dbg !11357

land.lhs.true49:                                  ; preds = %if.end
  %41 = load i8, i8* %allows_mem, align 1, !dbg !11358
  %conv50 = zext i8 %41 to i32, !dbg !11358
  %tobool51 = icmp ne i32 %conv50, 0, !dbg !11358
  br i1 %tobool51, label %if.then52, label %if.else, !dbg !11359

if.then52:                                        ; preds = %land.lhs.true49
  %42 = load %union.tree_node*, %union.tree_node** %op31, align 8, !dbg !11360
  %list53 = bitcast %union.tree_node* %42 to %struct.tree_list*, !dbg !11360
  %value54 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list53, i32 0, i32 2, !dbg !11360
  %call55 = call i32 @gimplify_expr(%union.tree_node** %value54, %struct.gimple_seq_d** %pre, %struct.gimple_seq_d** null, i8 (%union.tree_node*)* @is_gimple_lvalue, i32 6), !dbg !11361
  br label %if.end59, !dbg !11361

if.else:                                          ; preds = %land.lhs.true49, %if.end
  %43 = load %union.tree_node*, %union.tree_node** %op31, align 8, !dbg !11362
  %list56 = bitcast %union.tree_node* %43 to %struct.tree_list*, !dbg !11362
  %value57 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list56, i32 0, i32 2, !dbg !11362
  %call58 = call i32 @gimplify_expr(%union.tree_node** %value57, %struct.gimple_seq_d** %pre, %struct.gimple_seq_d** null, i8 (%union.tree_node*)* @is_gimple_asm_val, i32 1), !dbg !11363
  br label %if.end59

if.end59:                                         ; preds = %if.else, %if.then52
  br label %for.inc60, !dbg !11364

for.inc60:                                        ; preds = %if.end59
  %44 = load i64, i64* %i13, align 8, !dbg !11365
  %inc61 = add i64 %44, 1, !dbg !11365
  store i64 %inc61, i64* %i13, align 8, !dbg !11365
  br label %for.cond25, !dbg !11366, !llvm.loop !11367

for.end62:                                        ; preds = %for.cond25
  br label %sw.epilog, !dbg !11369

sw.default:                                       ; preds = %entry
  %45 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11370
  %call63 = call i32 @gimple_num_ops(%union.gimple_statement_d* %45), !dbg !11371
  %conv64 = zext i32 %call63 to i64, !dbg !11371
  store i64 %conv64, i64* %num_ops, align 8, !dbg !11372
  %46 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11373
  %call65 = call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %46), !dbg !11374
  store %union.tree_node* %call65, %union.tree_node** %orig_lhs, align 8, !dbg !11375
  %47 = load i64, i64* %num_ops, align 8, !dbg !11376
  store i64 %47, i64* %i, align 8, !dbg !11378
  br label %for.cond66, !dbg !11379

for.cond66:                                       ; preds = %for.inc131, %sw.default
  %48 = load i64, i64* %i, align 8, !dbg !11380
  %cmp67 = icmp ugt i64 %48, 0, !dbg !11382
  br i1 %cmp67, label %for.body69, label %for.end132, !dbg !11383

for.body69:                                       ; preds = %for.cond66
  call void @llvm.dbg.declare(metadata %union.tree_node** %op70, metadata !11384, metadata !DIExpression()), !dbg !11386
  %49 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11387
  %50 = load i64, i64* %i, align 8, !dbg !11388
  %sub = sub i64 %50, 1, !dbg !11389
  %conv71 = trunc i64 %sub to i32, !dbg !11388
  %call72 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %49, i32 %conv71), !dbg !11390
  store %union.tree_node* %call72, %union.tree_node** %op70, align 8, !dbg !11386
  %51 = load %union.tree_node*, %union.tree_node** %op70, align 8, !dbg !11391
  %cmp73 = icmp eq %union.tree_node* %51, null, !dbg !11393
  br i1 %cmp73, label %if.then75, label %if.end76, !dbg !11394

if.then75:                                        ; preds = %for.body69
  br label %for.inc131, !dbg !11395

if.end76:                                         ; preds = %for.body69
  %52 = load i64, i64* %i, align 8, !dbg !11396
  %cmp77 = icmp eq i64 %52, 1, !dbg !11398
  br i1 %cmp77, label %land.lhs.true79, label %if.else88, !dbg !11399

land.lhs.true79:                                  ; preds = %if.end76
  %53 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11400
  %call80 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %53), !dbg !11401
  %conv81 = zext i8 %call80 to i32, !dbg !11401
  %tobool82 = icmp ne i32 %conv81, 0, !dbg !11401
  br i1 %tobool82, label %if.then86, label %lor.lhs.false, !dbg !11402

lor.lhs.false:                                    ; preds = %land.lhs.true79
  %54 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11403
  %call83 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %54), !dbg !11404
  %conv84 = zext i8 %call83 to i32, !dbg !11404
  %tobool85 = icmp ne i32 %conv84, 0, !dbg !11404
  br i1 %tobool85, label %if.then86, label %if.else88, !dbg !11405

if.then86:                                        ; preds = %lor.lhs.false, %land.lhs.true79
  %call87 = call i32 @gimplify_expr(%union.tree_node** %op70, %struct.gimple_seq_d** %pre, %struct.gimple_seq_d** null, i8 (%union.tree_node*)* @is_gimple_lvalue, i32 2), !dbg !11406
  br label %if.end128, !dbg !11406

if.else88:                                        ; preds = %lor.lhs.false, %if.end76
  %55 = load i64, i64* %i, align 8, !dbg !11407
  %cmp89 = icmp eq i64 %55, 2, !dbg !11409
  br i1 %cmp89, label %land.lhs.true91, label %if.else107, !dbg !11410

land.lhs.true91:                                  ; preds = %if.else88
  %56 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11411
  %call92 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %56), !dbg !11412
  %conv93 = zext i8 %call92 to i32, !dbg !11412
  %tobool94 = icmp ne i32 %conv93, 0, !dbg !11412
  br i1 %tobool94, label %land.lhs.true95, label %if.else107, !dbg !11413

land.lhs.true95:                                  ; preds = %land.lhs.true91
  %57 = load i64, i64* %num_ops, align 8, !dbg !11414
  %cmp96 = icmp eq i64 %57, 2, !dbg !11415
  br i1 %cmp96, label %land.lhs.true98, label %if.else107, !dbg !11416

land.lhs.true98:                                  ; preds = %land.lhs.true95
  %58 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11417
  %call99 = call i32 @gimple_expr_code(%union.gimple_statement_d* %58), !dbg !11418
  %call100 = call i32 @get_gimple_rhs_class(i32 %call99), !dbg !11419
  %cmp101 = icmp eq i32 %call100, 3, !dbg !11420
  br i1 %cmp101, label %if.then103, label %if.else107, !dbg !11421

if.then103:                                       ; preds = %land.lhs.true98
  %59 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11422
  %call104 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %59), !dbg !11423
  %call105 = call i8 (%union.tree_node*)* @rhs_predicate_for(%union.tree_node* %call104), !dbg !11424
  %call106 = call i32 @gimplify_expr(%union.tree_node** %op70, %struct.gimple_seq_d** %pre, %struct.gimple_seq_d** null, i8 (%union.tree_node*)* %call105, i32 1), !dbg !11425
  br label %if.end127, !dbg !11425

if.else107:                                       ; preds = %land.lhs.true98, %land.lhs.true95, %land.lhs.true91, %if.else88
  %60 = load i64, i64* %i, align 8, !dbg !11426
  %cmp108 = icmp eq i64 %60, 2, !dbg !11428
  br i1 %cmp108, label %land.lhs.true110, label %if.else124, !dbg !11429

land.lhs.true110:                                 ; preds = %if.else107
  %61 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11430
  %call111 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %61), !dbg !11431
  %conv112 = zext i8 %call111 to i32, !dbg !11431
  %tobool113 = icmp ne i32 %conv112, 0, !dbg !11431
  br i1 %tobool113, label %if.then114, label %if.else124, !dbg !11432

if.then114:                                       ; preds = %land.lhs.true110
  %62 = load %union.tree_node*, %union.tree_node** %op70, align 8, !dbg !11433
  %base115 = bitcast %union.tree_node* %62 to %struct.tree_base*, !dbg !11433
  %63 = bitcast %struct.tree_base* %base115 to i64*, !dbg !11433
  %bf.load116 = load i64, i64* %63, align 8, !dbg !11433
  %bf.clear117 = and i64 %bf.load116, 65535, !dbg !11433
  %bf.cast118 = trunc i64 %bf.clear117 to i32, !dbg !11433
  %cmp119 = icmp eq i32 %bf.cast118, 29, !dbg !11436
  br i1 %cmp119, label %if.then121, label %if.end122, !dbg !11437

if.then121:                                       ; preds = %if.then114
  br label %for.inc131, !dbg !11438

if.end122:                                        ; preds = %if.then114
  %call123 = call i32 @gimplify_expr(%union.tree_node** %op70, %struct.gimple_seq_d** %pre, %struct.gimple_seq_d** null, i8 (%union.tree_node*)* @is_gimple_call_addr, i32 1), !dbg !11439
  br label %if.end126, !dbg !11440

if.else124:                                       ; preds = %land.lhs.true110, %if.else107
  %call125 = call i32 @gimplify_expr(%union.tree_node** %op70, %struct.gimple_seq_d** %pre, %struct.gimple_seq_d** null, i8 (%union.tree_node*)* @is_gimple_val, i32 1), !dbg !11441
  br label %if.end126

if.end126:                                        ; preds = %if.else124, %if.end122
  br label %if.end127

if.end127:                                        ; preds = %if.end126, %if.then103
  br label %if.end128

if.end128:                                        ; preds = %if.end127, %if.then86
  %64 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11442
  %65 = load i64, i64* %i, align 8, !dbg !11443
  %sub129 = sub i64 %65, 1, !dbg !11444
  %conv130 = trunc i64 %sub129 to i32, !dbg !11443
  %66 = load %union.tree_node*, %union.tree_node** %op70, align 8, !dbg !11445
  call void @gimple_set_op(%union.gimple_statement_d* %64, i32 %conv130, %union.tree_node* %66), !dbg !11446
  br label %for.inc131, !dbg !11447

for.inc131:                                       ; preds = %if.end128, %if.then121, %if.then75
  %67 = load i64, i64* %i, align 8, !dbg !11448
  %dec = add i64 %67, -1, !dbg !11448
  store i64 %dec, i64* %i, align 8, !dbg !11448
  br label %for.cond66, !dbg !11449, !llvm.loop !11450

for.end132:                                       ; preds = %for.cond66
  %68 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11452
  %call133 = call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %68), !dbg !11453
  store %union.tree_node* %call133, %union.tree_node** %lhs, align 8, !dbg !11454
  %69 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !11455
  %tobool134 = icmp ne %union.tree_node* %69, null, !dbg !11455
  br i1 %tobool134, label %land.lhs.true135, label %if.end289, !dbg !11457

land.lhs.true135:                                 ; preds = %for.end132
  %70 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !11458
  %call136 = call zeroext i8 @is_gimple_reg(%union.tree_node* %70), !dbg !11459
  %tobool137 = icmp ne i8 %call136, 0, !dbg !11459
  br i1 %tobool137, label %if.end289, label %if.then138, !dbg !11460

if.then138:                                       ; preds = %land.lhs.true135
  call void @llvm.dbg.declare(metadata i8* %need_temp, metadata !11461, metadata !DIExpression()), !dbg !11463
  store i8 0, i8* %need_temp, align 1, !dbg !11463
  %71 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11464
  %call139 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %71), !dbg !11466
  %conv140 = zext i8 %call139 to i32, !dbg !11466
  %tobool141 = icmp ne i32 %conv140, 0, !dbg !11466
  br i1 %tobool141, label %land.lhs.true142, label %if.else155, !dbg !11467

land.lhs.true142:                                 ; preds = %if.then138
  %72 = load i64, i64* %num_ops, align 8, !dbg !11468
  %cmp143 = icmp eq i64 %72, 2, !dbg !11469
  br i1 %cmp143, label %land.lhs.true145, label %if.else155, !dbg !11470

land.lhs.true145:                                 ; preds = %land.lhs.true142
  %73 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11471
  %call146 = call i32 @gimple_expr_code(%union.gimple_statement_d* %73), !dbg !11472
  %call147 = call i32 @get_gimple_rhs_class(i32 %call146), !dbg !11473
  %cmp148 = icmp eq i32 %call147, 3, !dbg !11474
  br i1 %cmp148, label %if.then150, label %if.else155, !dbg !11475

if.then150:                                       ; preds = %land.lhs.true145
  %74 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11476
  %call151 = call %union.tree_node** @gimple_assign_rhs1_ptr(%union.gimple_statement_d* %74), !dbg !11477
  %75 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11478
  %call152 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %75), !dbg !11479
  %call153 = call i8 (%union.tree_node*)* @rhs_predicate_for(%union.tree_node* %call152), !dbg !11480
  %call154 = call i32 @gimplify_expr(%union.tree_node** %call151, %struct.gimple_seq_d** %pre, %struct.gimple_seq_d** null, i8 (%union.tree_node*)* %call153, i32 1), !dbg !11481
  br label %if.end236, !dbg !11481

if.else155:                                       ; preds = %land.lhs.true145, %land.lhs.true142, %if.then138
  %76 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !11482
  %call156 = call zeroext i8 @is_gimple_reg(%union.tree_node* %76), !dbg !11484
  %tobool157 = icmp ne i8 %call156, 0, !dbg !11484
  br i1 %tobool157, label %if.then158, label %if.else181, !dbg !11485

if.then158:                                       ; preds = %if.else155
  %77 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !11486
  %common159 = bitcast %union.tree_node* %77 to %struct.tree_common*, !dbg !11486
  %type160 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common159, i32 0, i32 2, !dbg !11486
  %78 = load %union.tree_node*, %union.tree_node** %type160, align 8, !dbg !11486
  %call161 = call zeroext i8 @is_gimple_reg_type(%union.tree_node* %78), !dbg !11489
  %tobool162 = icmp ne i8 %call161, 0, !dbg !11489
  br i1 %tobool162, label %if.then163, label %if.end180, !dbg !11490

if.then163:                                       ; preds = %if.then158
  %79 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11491
  %call164 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %79), !dbg !11494
  %tobool165 = icmp ne i8 %call164, 0, !dbg !11494
  br i1 %tobool165, label %if.then166, label %if.end175, !dbg !11495

if.then166:                                       ; preds = %if.then163
  %80 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11496
  %call167 = call i32 @gimple_call_flags(%union.gimple_statement_d* %80), !dbg !11498
  %conv168 = sext i32 %call167 to i64, !dbg !11498
  store i64 %conv168, i64* %i, align 8, !dbg !11499
  %81 = load i64, i64* %i, align 8, !dbg !11500
  %and = and i64 %81, 4, !dbg !11502
  %tobool169 = icmp ne i64 %and, 0, !dbg !11502
  br i1 %tobool169, label %if.then173, label %lor.lhs.false170, !dbg !11503

lor.lhs.false170:                                 ; preds = %if.then166
  %82 = load i64, i64* %i, align 8, !dbg !11504
  %and171 = and i64 %82, 3, !dbg !11505
  %tobool172 = icmp ne i64 %and171, 0, !dbg !11505
  br i1 %tobool172, label %if.end174, label %if.then173, !dbg !11506

if.then173:                                       ; preds = %lor.lhs.false170, %if.then166
  store i8 1, i8* %need_temp, align 1, !dbg !11507
  br label %if.end174, !dbg !11508

if.end174:                                        ; preds = %if.then173, %lor.lhs.false170
  br label %if.end175, !dbg !11509

if.end175:                                        ; preds = %if.end174, %if.then163
  %83 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11510
  %call176 = call zeroext i8 @stmt_can_throw_internal(%union.gimple_statement_d* %83), !dbg !11512
  %tobool177 = icmp ne i8 %call176, 0, !dbg !11512
  br i1 %tobool177, label %if.then178, label %if.end179, !dbg !11513

if.then178:                                       ; preds = %if.end175
  store i8 1, i8* %need_temp, align 1, !dbg !11514
  br label %if.end179, !dbg !11515

if.end179:                                        ; preds = %if.then178, %if.end175
  br label %if.end180, !dbg !11516

if.end180:                                        ; preds = %if.end179, %if.then158
  br label %if.end235, !dbg !11517

if.else181:                                       ; preds = %if.else155
  %84 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !11518
  %common182 = bitcast %union.tree_node* %84 to %struct.tree_common*, !dbg !11518
  %type183 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common182, i32 0, i32 2, !dbg !11518
  %85 = load %union.tree_node*, %union.tree_node** %type183, align 8, !dbg !11518
  %call184 = call zeroext i8 @is_gimple_reg_type(%union.tree_node* %85), !dbg !11521
  %tobool185 = icmp ne i8 %call184, 0, !dbg !11521
  br i1 %tobool185, label %if.then186, label %if.else187, !dbg !11522

if.then186:                                       ; preds = %if.else181
  store i8 1, i8* %need_temp, align 1, !dbg !11523
  br label %if.end234, !dbg !11524

if.else187:                                       ; preds = %if.else181
  %86 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !11525
  %common188 = bitcast %union.tree_node* %86 to %struct.tree_common*, !dbg !11525
  %type189 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common188, i32 0, i32 2, !dbg !11525
  %87 = load %union.tree_node*, %union.tree_node** %type189, align 8, !dbg !11525
  %base190 = bitcast %union.tree_node* %87 to %struct.tree_base*, !dbg !11525
  %88 = bitcast %struct.tree_base* %base190 to i64*, !dbg !11525
  %bf.load191 = load i64, i64* %88, align 8, !dbg !11525
  %bf.clear192 = and i64 %bf.load191, 65535, !dbg !11525
  %bf.cast193 = trunc i64 %bf.clear192 to i32, !dbg !11525
  %cmp194 = icmp eq i32 %bf.cast193, 14, !dbg !11525
  br i1 %cmp194, label %cond.true, label %cond.false, !dbg !11525

cond.true:                                        ; preds = %if.else187
  %89 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !11525
  %common196 = bitcast %union.tree_node* %89 to %struct.tree_common*, !dbg !11525
  %type197 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common196, i32 0, i32 2, !dbg !11525
  %90 = load %union.tree_node*, %union.tree_node** %type197, align 8, !dbg !11525
  %call198 = call i32 @vector_type_mode(%union.tree_node* %90), !dbg !11525
  br label %cond.end, !dbg !11525

cond.false:                                       ; preds = %if.else187
  %91 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !11525
  %common199 = bitcast %union.tree_node* %91 to %struct.tree_common*, !dbg !11525
  %type200 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common199, i32 0, i32 2, !dbg !11525
  %92 = load %union.tree_node*, %union.tree_node** %type200, align 8, !dbg !11525
  %type201 = bitcast %union.tree_node* %92 to %struct.tree_type*, !dbg !11525
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type201, i32 0, i32 6, !dbg !11525
  %bf.load202 = load i32, i32* %mode, align 4, !dbg !11525
  %bf.lshr203 = lshr i32 %bf.load202, 16, !dbg !11525
  %bf.clear204 = and i32 %bf.lshr203, 255, !dbg !11525
  br label %cond.end, !dbg !11525

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond205 = phi i32 [ %call198, %cond.true ], [ %bf.clear204, %cond.false ], !dbg !11525
  %cmp206 = icmp ne i32 %cond205, 1, !dbg !11527
  br i1 %cmp206, label %if.then208, label %if.end233, !dbg !11528

if.then208:                                       ; preds = %cond.end
  %93 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11529
  %call209 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %93), !dbg !11532
  %tobool210 = icmp ne i8 %call209, 0, !dbg !11532
  br i1 %tobool210, label %if.then211, label %if.else231, !dbg !11533

if.then211:                                       ; preds = %if.then208
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl, metadata !11534, metadata !DIExpression()), !dbg !11536
  %94 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11537
  %call212 = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %94), !dbg !11538
  store %union.tree_node* %call212, %union.tree_node** %fndecl, align 8, !dbg !11536
  %95 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !11539
  %common213 = bitcast %union.tree_node* %95 to %struct.tree_common*, !dbg !11539
  %type214 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common213, i32 0, i32 2, !dbg !11539
  %96 = load %union.tree_node*, %union.tree_node** %type214, align 8, !dbg !11539
  %97 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !11541
  %call215 = call i32 @aggregate_value_p(%union.tree_node* %96, %union.tree_node* %97), !dbg !11542
  %tobool216 = icmp ne i32 %call215, 0, !dbg !11542
  br i1 %tobool216, label %if.end230, label %land.lhs.true217, !dbg !11543

land.lhs.true217:                                 ; preds = %if.then211
  %98 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !11544
  %tobool218 = icmp ne %union.tree_node* %98, null, !dbg !11544
  br i1 %tobool218, label %land.lhs.true219, label %if.then229, !dbg !11545

land.lhs.true219:                                 ; preds = %land.lhs.true217
  %99 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !11546
  %decl_non_common = bitcast %union.tree_node* %99 to %struct.tree_decl_non_common*, !dbg !11546
  %result = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 3, !dbg !11546
  %100 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !11546
  %tobool220 = icmp ne %union.tree_node* %100, null, !dbg !11546
  br i1 %tobool220, label %land.lhs.true221, label %if.then229, !dbg !11547

land.lhs.true221:                                 ; preds = %land.lhs.true219
  %101 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !11548
  %decl_non_common222 = bitcast %union.tree_node* %101 to %struct.tree_decl_non_common*, !dbg !11548
  %result223 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common222, i32 0, i32 3, !dbg !11548
  %102 = load %union.tree_node*, %union.tree_node** %result223, align 8, !dbg !11548
  %decl_common = bitcast %union.tree_node* %102 to %struct.tree_decl_common*, !dbg !11548
  %decl_by_reference_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !11548
  %103 = bitcast i40* %decl_by_reference_flag to i64*, !dbg !11548
  %bf.load224 = load i64, i64* %103, align 8, !dbg !11548
  %bf.lshr225 = lshr i64 %bf.load224, 28, !dbg !11548
  %bf.clear226 = and i64 %bf.lshr225, 1, !dbg !11548
  %bf.cast227 = trunc i64 %bf.clear226 to i32, !dbg !11548
  %tobool228 = icmp ne i32 %bf.cast227, 0, !dbg !11548
  br i1 %tobool228, label %if.end230, label %if.then229, !dbg !11549

if.then229:                                       ; preds = %land.lhs.true221, %land.lhs.true219, %land.lhs.true217
  store i8 1, i8* %need_temp, align 1, !dbg !11550
  br label %if.end230, !dbg !11551

if.end230:                                        ; preds = %if.then229, %land.lhs.true221, %if.then211
  br label %if.end232, !dbg !11552

if.else231:                                       ; preds = %if.then208
  store i8 1, i8* %need_temp, align 1, !dbg !11553
  br label %if.end232

if.end232:                                        ; preds = %if.else231, %if.end230
  br label %if.end233, !dbg !11554

if.end233:                                        ; preds = %if.end232, %cond.end
  br label %if.end234

if.end234:                                        ; preds = %if.end233, %if.then186
  br label %if.end235

if.end235:                                        ; preds = %if.end234, %if.end180
  br label %if.end236

if.end236:                                        ; preds = %if.end235, %if.then150
  %104 = load i8, i8* %need_temp, align 1, !dbg !11555
  %tobool237 = icmp ne i8 %104, 0, !dbg !11555
  br i1 %tobool237, label %if.then238, label %if.end288, !dbg !11557

if.then238:                                       ; preds = %if.end236
  call void @llvm.dbg.declare(metadata %union.tree_node** %temp, metadata !11558, metadata !DIExpression()), !dbg !11560
  %105 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !11561
  %common239 = bitcast %union.tree_node* %105 to %struct.tree_common*, !dbg !11561
  %type240 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common239, i32 0, i32 2, !dbg !11561
  %106 = load %union.tree_node*, %union.tree_node** %type240, align 8, !dbg !11561
  %call241 = call %union.tree_node* @create_tmp_var(%union.tree_node* %106, i8* null), !dbg !11562
  store %union.tree_node* %call241, %union.tree_node** %temp, align 8, !dbg !11560
  %107 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !11563
  %common242 = bitcast %union.tree_node* %107 to %struct.tree_common*, !dbg !11563
  %type243 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common242, i32 0, i32 2, !dbg !11563
  %108 = load %union.tree_node*, %union.tree_node** %type243, align 8, !dbg !11563
  %base244 = bitcast %union.tree_node* %108 to %struct.tree_base*, !dbg !11563
  %109 = bitcast %struct.tree_base* %base244 to i64*, !dbg !11563
  %bf.load245 = load i64, i64* %109, align 8, !dbg !11563
  %bf.clear246 = and i64 %bf.load245, 65535, !dbg !11563
  %bf.cast247 = trunc i64 %bf.clear246 to i32, !dbg !11563
  %cmp248 = icmp eq i32 %bf.cast247, 13, !dbg !11565
  br i1 %cmp248, label %if.then259, label %lor.lhs.false250, !dbg !11566

lor.lhs.false250:                                 ; preds = %if.then238
  %110 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !11567
  %common251 = bitcast %union.tree_node* %110 to %struct.tree_common*, !dbg !11567
  %type252 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common251, i32 0, i32 2, !dbg !11567
  %111 = load %union.tree_node*, %union.tree_node** %type252, align 8, !dbg !11567
  %base253 = bitcast %union.tree_node* %111 to %struct.tree_base*, !dbg !11567
  %112 = bitcast %struct.tree_base* %base253 to i64*, !dbg !11567
  %bf.load254 = load i64, i64* %112, align 8, !dbg !11567
  %bf.clear255 = and i64 %bf.load254, 65535, !dbg !11567
  %bf.cast256 = trunc i64 %bf.clear255 to i32, !dbg !11567
  %cmp257 = icmp eq i32 %bf.cast256, 14, !dbg !11568
  br i1 %cmp257, label %if.then259, label %if.end263, !dbg !11569

if.then259:                                       ; preds = %lor.lhs.false250, %if.then238
  %113 = load %union.tree_node*, %union.tree_node** %temp, align 8, !dbg !11570
  %decl_common260 = bitcast %union.tree_node* %113 to %struct.tree_decl_common*, !dbg !11570
  %gimple_reg_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common260, i32 0, i32 2, !dbg !11570
  %114 = bitcast i40* %gimple_reg_flag to i64*, !dbg !11570
  %bf.load261 = load i64, i64* %114, align 8, !dbg !11571
  %bf.clear262 = and i64 %bf.load261, -134217729, !dbg !11571
  %bf.set = or i64 %bf.clear262, 134217728, !dbg !11571
  store i64 %bf.set, i64* %114, align 8, !dbg !11571
  br label %if.end263, !dbg !11570

if.end263:                                        ; preds = %if.then259, %lor.lhs.false250
  %115 = load %union.tree_node*, %union.tree_node** %orig_lhs, align 8, !dbg !11572
  %base264 = bitcast %union.tree_node* %115 to %struct.tree_base*, !dbg !11572
  %116 = bitcast %struct.tree_base* %base264 to i64*, !dbg !11572
  %bf.load265 = load i64, i64* %116, align 8, !dbg !11572
  %bf.clear266 = and i64 %bf.load265, 65535, !dbg !11572
  %bf.cast267 = trunc i64 %bf.clear266 to i32, !dbg !11572
  %cmp268 = icmp eq i32 %bf.cast267, 141, !dbg !11574
  br i1 %cmp268, label %if.then270, label %if.end271, !dbg !11575

if.then270:                                       ; preds = %if.end263
  %117 = load %union.tree_node*, %union.tree_node** %orig_lhs, align 8, !dbg !11576
  %ssa_name = bitcast %union.tree_node* %117 to %struct.tree_ssa_name*, !dbg !11576
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !11576
  %118 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !11576
  store %union.tree_node* %118, %union.tree_node** %orig_lhs, align 8, !dbg !11577
  br label %if.end271, !dbg !11578

if.end271:                                        ; preds = %if.then270, %if.end263
  %119 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !11579
  %add.ptr272 = getelementptr inbounds %struct.function, %struct.function* %119, i64 0, !dbg !11579
  %call273 = call zeroext i8 @gimple_in_ssa_p(%struct.function* %add.ptr272), !dbg !11581
  %tobool274 = icmp ne i8 %call273, 0, !dbg !11581
  br i1 %tobool274, label %if.then275, label %if.end277, !dbg !11582

if.then275:                                       ; preds = %if.end271
  %120 = load %union.tree_node*, %union.tree_node** %temp, align 8, !dbg !11583
  %call276 = call %union.tree_node* @make_ssa_name(%union.tree_node* %120, %union.gimple_statement_d* null), !dbg !11584
  store %union.tree_node* %call276, %union.tree_node** %temp, align 8, !dbg !11585
  br label %if.end277, !dbg !11586

if.end277:                                        ; preds = %if.then275, %if.end271
  %121 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11587
  %122 = load %union.tree_node*, %union.tree_node** %temp, align 8, !dbg !11588
  call void @gimple_set_lhs(%union.gimple_statement_d* %121, %union.tree_node* %122), !dbg !11589
  %123 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !11590
  %124 = load %union.tree_node*, %union.tree_node** %temp, align 8, !dbg !11590
  %call278 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %123, %union.tree_node* %124), !dbg !11590
  store %union.gimple_statement_d* %call278, %union.gimple_statement_d** %post_stmt, align 8, !dbg !11591
  %125 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !11592
  %base279 = bitcast %union.tree_node* %125 to %struct.tree_base*, !dbg !11592
  %126 = bitcast %struct.tree_base* %base279 to i64*, !dbg !11592
  %bf.load280 = load i64, i64* %126, align 8, !dbg !11592
  %bf.clear281 = and i64 %bf.load280, 65535, !dbg !11592
  %bf.cast282 = trunc i64 %bf.clear281 to i32, !dbg !11592
  %cmp283 = icmp eq i32 %bf.cast282, 141, !dbg !11594
  br i1 %cmp283, label %if.then285, label %if.end287, !dbg !11595

if.then285:                                       ; preds = %if.end277
  %127 = load %union.gimple_statement_d*, %union.gimple_statement_d** %post_stmt, align 8, !dbg !11596
  %128 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !11597
  %ssa_name286 = bitcast %union.tree_node* %128 to %struct.tree_ssa_name*, !dbg !11597
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name286, i32 0, i32 2, !dbg !11597
  store %union.gimple_statement_d* %127, %union.gimple_statement_d** %def_stmt, align 8, !dbg !11598
  br label %if.end287, !dbg !11597

if.end287:                                        ; preds = %if.then285, %if.end277
  br label %if.end288, !dbg !11599

if.end288:                                        ; preds = %if.end287, %if.end236
  br label %if.end289, !dbg !11600

if.end289:                                        ; preds = %if.end288, %land.lhs.true135, %for.end132
  br label %sw.epilog, !dbg !11601

sw.epilog:                                        ; preds = %if.end289, %for.end62, %sw.bb9, %sw.bb6, %sw.bb
  %129 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !11602
  %add.ptr290 = getelementptr inbounds %struct.function, %struct.function* %129, i64 0, !dbg !11602
  %call291 = call %struct.htab* @gimple_referenced_vars(%struct.function* %add.ptr290), !dbg !11604
  %tobool292 = icmp ne %struct.htab* %call291, null, !dbg !11604
  br i1 %tobool292, label %if.then293, label %if.end301, !dbg !11605

if.then293:                                       ; preds = %sw.epilog
  %130 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !11606
  %temps = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %130, i32 0, i32 2, !dbg !11608
  %131 = load %union.tree_node*, %union.tree_node** %temps, align 8, !dbg !11608
  store %union.tree_node* %131, %union.tree_node** %t, align 8, !dbg !11609
  br label %for.cond294, !dbg !11610

for.cond294:                                      ; preds = %for.inc298, %if.then293
  %132 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !11611
  %tobool295 = icmp ne %union.tree_node* %132, null, !dbg !11613
  br i1 %tobool295, label %for.body296, label %for.end300, !dbg !11613

for.body296:                                      ; preds = %for.cond294
  %133 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !11614
  %call297 = call zeroext i8 @add_referenced_var(%union.tree_node* %133), !dbg !11615
  br label %for.inc298, !dbg !11615

for.inc298:                                       ; preds = %for.body296
  %134 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !11616
  %common299 = bitcast %union.tree_node* %134 to %struct.tree_common*, !dbg !11616
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common299, i32 0, i32 1, !dbg !11616
  %135 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !11616
  store %union.tree_node* %135, %union.tree_node** %t, align 8, !dbg !11617
  br label %for.cond294, !dbg !11618, !llvm.loop !11619

for.end300:                                       ; preds = %for.cond294
  br label %if.end301, !dbg !11620

if.end301:                                        ; preds = %for.end300, %sw.epilog
  %136 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %pre, align 8, !dbg !11621
  %call302 = call zeroext i8 @gimple_seq_empty_p(%struct.gimple_seq_d* %136), !dbg !11623
  %tobool303 = icmp ne i8 %call302, 0, !dbg !11623
  br i1 %tobool303, label %if.end318, label %if.then304, !dbg !11624

if.then304:                                       ; preds = %if.end301
  %137 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !11625
  %add.ptr305 = getelementptr inbounds %struct.function, %struct.function* %137, i64 0, !dbg !11625
  %call306 = call zeroext i8 @gimple_in_ssa_p(%struct.function* %add.ptr305), !dbg !11628
  %tobool307 = icmp ne i8 %call306, 0, !dbg !11628
  br i1 %tobool307, label %if.then308, label %if.end317, !dbg !11629

if.then308:                                       ; preds = %if.then304
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i309, metadata !11630, metadata !DIExpression()), !dbg !11632
  %138 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %pre, align 8, !dbg !11633
  call void @gsi_start(%struct.gimple_stmt_iterator* sret %tmp, %struct.gimple_seq_d* %138), !dbg !11635
  %139 = bitcast %struct.gimple_stmt_iterator* %i309 to i8*, !dbg !11635
  %140 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !11635
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %139, i8* align 8 %140, i64 24, i1 false), !dbg !11635
  br label %for.cond310, !dbg !11636

for.cond310:                                      ; preds = %for.inc315, %if.then308
  %call311 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i309), !dbg !11637
  %tobool312 = icmp ne i8 %call311, 0, !dbg !11639
  %lnot = xor i1 %tobool312, true, !dbg !11639
  br i1 %lnot, label %for.body313, label %for.end316, !dbg !11640

for.body313:                                      ; preds = %for.cond310
  %call314 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i309), !dbg !11641
  call void @mark_symbols_for_renaming(%union.gimple_statement_d* %call314), !dbg !11642
  br label %for.inc315, !dbg !11642

for.inc315:                                       ; preds = %for.body313
  call void @gsi_next(%struct.gimple_stmt_iterator* %i309), !dbg !11643
  br label %for.cond310, !dbg !11644, !llvm.loop !11645

for.end316:                                       ; preds = %for.cond310
  br label %if.end317, !dbg !11647

if.end317:                                        ; preds = %for.end316, %if.then304
  %141 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi_p.addr, align 8, !dbg !11648
  %142 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %pre, align 8, !dbg !11649
  call void @gsi_insert_seq_before(%struct.gimple_stmt_iterator* %141, %struct.gimple_seq_d* %142, i32 1), !dbg !11650
  br label %if.end318, !dbg !11651

if.end318:                                        ; preds = %if.end317, %if.end301
  %143 = load %union.gimple_statement_d*, %union.gimple_statement_d** %post_stmt, align 8, !dbg !11652
  %tobool319 = icmp ne %union.gimple_statement_d* %143, null, !dbg !11652
  br i1 %tobool319, label %if.then320, label %if.end321, !dbg !11654

if.then320:                                       ; preds = %if.end318
  %144 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi_p.addr, align 8, !dbg !11655
  %145 = load %union.gimple_statement_d*, %union.gimple_statement_d** %post_stmt, align 8, !dbg !11656
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %144, %union.gimple_statement_d* %145, i32 0), !dbg !11657
  br label %if.end321, !dbg !11657

if.end321:                                        ; preds = %if.then320, %if.end318
  call void @pop_gimplify_context(%union.gimple_statement_d* null), !dbg !11658
  ret void, !dbg !11659
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_in_ssa_p(%struct.function* %fun) #0 !dbg !11660 {
entry:
  %fun.addr = alloca %struct.function*, align 8
  store %struct.function* %fun, %struct.function** %fun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fun.addr, metadata !11666, metadata !DIExpression()), !dbg !11667
  %0 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !11668
  %tobool = icmp ne %struct.function* %0, null, !dbg !11668
  br i1 %tobool, label %land.lhs.true, label %land.end, !dbg !11669

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !11670
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %1, i32 0, i32 3, !dbg !11671
  %2 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !11671
  %tobool1 = icmp ne %struct.gimple_df* %2, null, !dbg !11670
  br i1 %tobool1, label %land.rhs, label %land.end, !dbg !11672

land.rhs:                                         ; preds = %land.lhs.true
  %3 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !11673
  %gimple_df2 = getelementptr inbounds %struct.function, %struct.function* %3, i32 0, i32 3, !dbg !11674
  %4 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df2, align 8, !dbg !11674
  %in_ssa_p = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %4, i32 0, i32 10, !dbg !11675
  %bf.load = load i8, i8* %in_ssa_p, align 8, !dbg !11675
  %bf.clear = and i8 %bf.load, 1, !dbg !11675
  %bf.cast = zext i8 %bf.clear to i32, !dbg !11675
  %tobool3 = icmp ne i32 %bf.cast, 0, !dbg !11672
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %5 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %tobool3, %land.rhs ], !dbg !11676
  %land.ext = zext i1 %5 to i32, !dbg !11672
  %conv = trunc i32 %land.ext to i8, !dbg !11668
  ret i8 %conv, !dbg !11677
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_cond_lhs_ptr(%union.gimple_statement_d* %gs) #0 !dbg !11678 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !11681, metadata !DIExpression()), !dbg !11682
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !11683
  %call = call %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %0, i32 0), !dbg !11684
  ret %union.tree_node** %call, !dbg !11685
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_cond_rhs_ptr(%union.gimple_statement_d* %gs) #0 !dbg !11686 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !11687, metadata !DIExpression()), !dbg !11688
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !11689
  %call = call %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %0, i32 1), !dbg !11690
  ret %union.tree_node** %call, !dbg !11691
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_switch_index_ptr(%union.gimple_statement_d* %gs) #0 !dbg !11692 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !11693, metadata !DIExpression()), !dbg !11694
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !11695
  %call = call %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %0, i32 0), !dbg !11696
  ret %union.tree_node** %call, !dbg !11697
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_omp_atomic_load_rhs_ptr(%union.gimple_statement_d* %g) #0 !dbg !11698 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !11701, metadata !DIExpression()), !dbg !11702
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !11703
  %gimple_omp_atomic_load = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_omp_atomic_load*, !dbg !11704
  %rhs = getelementptr inbounds %struct.gimple_statement_omp_atomic_load, %struct.gimple_statement_omp_atomic_load* %gimple_omp_atomic_load, i32 0, i32 1, !dbg !11705
  ret %union.tree_node** %rhs, !dbg !11706
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_asm_noutputs(%union.gimple_statement_d* %gs) #0 !dbg !11707 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !11710, metadata !DIExpression()), !dbg !11711
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !11712
  %gimple_asm = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_asm*, !dbg !11713
  %no = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm, i32 0, i32 3, !dbg !11714
  %1 = load i8, i8* %no, align 1, !dbg !11714
  %conv = zext i8 %1 to i32, !dbg !11712
  ret i32 %conv, !dbg !11715
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_asm_output_op(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !11716 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !11719, metadata !DIExpression()), !dbg !11720
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !11721, metadata !DIExpression()), !dbg !11722
  %0 = load i32, i32* %index.addr, align 4, !dbg !11723
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !11723
  %gimple_asm = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_asm*, !dbg !11723
  %no = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm, i32 0, i32 3, !dbg !11723
  %2 = load i8, i8* %no, align 1, !dbg !11723
  %conv = zext i8 %2 to i32, !dbg !11723
  %cmp = icmp ule i32 %0, %conv, !dbg !11723
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !11723

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.16, i64 0, i64 0), i32 2655, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !11723
  br label %cond.end, !dbg !11723

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11723

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !11723
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !11724
  %4 = load i32, i32* %index.addr, align 4, !dbg !11725
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !11726
  %gimple_asm2 = bitcast %union.gimple_statement_d* %5 to %struct.gimple_statement_asm*, !dbg !11727
  %ni = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm2, i32 0, i32 2, !dbg !11728
  %6 = load i8, i8* %ni, align 8, !dbg !11728
  %conv3 = zext i8 %6 to i32, !dbg !11726
  %add = add i32 %4, %conv3, !dbg !11729
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %3, i32 %add), !dbg !11730
  ret %union.tree_node* %call, !dbg !11731
}

declare dso_local zeroext i8 @parse_output_constraint(i8**, i32, i32, i32, i8*, i8*, i8*) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_asm_ninputs(%union.gimple_statement_d* %gs) #0 !dbg !11732 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !11733, metadata !DIExpression()), !dbg !11734
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !11735
  %gimple_asm = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_asm*, !dbg !11736
  %ni = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm, i32 0, i32 2, !dbg !11737
  %1 = load i8, i8* %ni, align 8, !dbg !11737
  %conv = zext i8 %1 to i32, !dbg !11735
  ret i32 %conv, !dbg !11738
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_asm_input_op(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !11739 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !11740, metadata !DIExpression()), !dbg !11741
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !11742, metadata !DIExpression()), !dbg !11743
  %0 = load i32, i32* %index.addr, align 4, !dbg !11744
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !11744
  %gimple_asm = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_asm*, !dbg !11744
  %ni = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm, i32 0, i32 2, !dbg !11744
  %2 = load i8, i8* %ni, align 8, !dbg !11744
  %conv = zext i8 %2 to i32, !dbg !11744
  %cmp = icmp ule i32 %0, %conv, !dbg !11744
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !11744

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.16, i64 0, i64 0), i32 2622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !11744
  br label %cond.end, !dbg !11744

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11744

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !11744
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !11745
  %4 = load i32, i32* %index.addr, align 4, !dbg !11746
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %3, i32 %4), !dbg !11747
  ret %union.tree_node* %call, !dbg !11748
}

declare dso_local zeroext i8 @parse_input_constraint(i8**, i32, i32, i32, i32, i8**, i8*, i8*) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #0 !dbg !11749 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !11750, metadata !DIExpression()), !dbg !11751
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !11752
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !11753
  %num_ops = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 3, !dbg !11754
  %1 = load i32, i32* %num_ops, align 4, !dbg !11754
  ret i32 %1, !dbg !11755
}

declare dso_local %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d*) #3

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !11756 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !11757, metadata !DIExpression()), !dbg !11758
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !11759, metadata !DIExpression()), !dbg !11760
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !11761
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !11763
  %tobool = icmp ne i8 %call, 0, !dbg !11763
  br i1 %tobool, label %if.then, label %if.else, !dbg !11764

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !11765
  %call1 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %1), !dbg !11767
  %2 = load i32, i32* %i.addr, align 4, !dbg !11768
  %idxprom = zext i32 %2 to i64, !dbg !11767
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idxprom, !dbg !11767
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !11767
  store %union.tree_node* %3, %union.tree_node** %retval, align 8, !dbg !11769
  br label %return, !dbg !11769

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !11770
  br label %return, !dbg !11770

return:                                           ; preds = %if.else, %if.then
  %4 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !11771
  ret %union.tree_node* %4, !dbg !11771
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_call(%union.gimple_statement_d* %gs) #0 !dbg !11772 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !11775, metadata !DIExpression()), !dbg !11776
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !11777
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !11778
  %cmp = icmp eq i32 %call, 8, !dbg !11779
  %conv = zext i1 %cmp to i32, !dbg !11779
  %conv1 = trunc i32 %conv to i8, !dbg !11778
  ret i8 %conv1, !dbg !11780
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %gs) #0 !dbg !11781 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !11782, metadata !DIExpression()), !dbg !11783
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !11784
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !11785
  %cmp = icmp eq i32 %call, 6, !dbg !11786
  %conv = zext i1 %cmp to i32, !dbg !11786
  %conv1 = trunc i32 %conv to i8, !dbg !11785
  ret i8 %conv1, !dbg !11787
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_gimple_rhs_class(i32 %code) #0 !dbg !11788 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !11791, metadata !DIExpression()), !dbg !11792
  %0 = load i32, i32* %code.addr, align 4, !dbg !11793
  %idxprom = sext i32 %0 to i64, !dbg !11794
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* @gimple_rhs_class_table, i64 0, i64 %idxprom, !dbg !11794
  %1 = load i8, i8* %arrayidx, align 1, !dbg !11794
  %conv = zext i8 %1 to i32, !dbg !11795
  ret i32 %conv, !dbg !11796
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_expr_code(%union.gimple_statement_d* %stmt) #0 !dbg !11797 {
entry:
  %retval = alloca i32, align 4
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !11800, metadata !DIExpression()), !dbg !11801
  call void @llvm.dbg.declare(metadata i32* %code, metadata !11802, metadata !DIExpression()), !dbg !11803
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11804
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !11805
  store i32 %call, i32* %code, align 4, !dbg !11803
  %1 = load i32, i32* %code, align 4, !dbg !11806
  %cmp = icmp eq i32 %1, 6, !dbg !11808
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !11809

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %code, align 4, !dbg !11810
  %cmp1 = icmp eq i32 %2, 1, !dbg !11811
  br i1 %cmp1, label %if.then, label %if.else, !dbg !11812

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11813
  %gsbase = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_base*, !dbg !11814
  %4 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !11815
  %bf.load = load i32, i32* %4, align 8, !dbg !11815
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !11815
  store i32 %bf.lshr, i32* %retval, align 4, !dbg !11816
  br label %return, !dbg !11816

if.else:                                          ; preds = %lor.lhs.false
  %5 = load i32, i32* %code, align 4, !dbg !11817
  %cmp2 = icmp eq i32 %5, 8, !dbg !11819
  br i1 %cmp2, label %if.then3, label %if.else4, !dbg !11820

if.then3:                                         ; preds = %if.else
  store i32 59, i32* %retval, align 4, !dbg !11821
  br label %return, !dbg !11821

if.else4:                                         ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.16, i64 0, i64 0), i32 1446, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !11822
  br label %if.end

if.end:                                           ; preds = %if.else4
  br label %if.end5

if.end5:                                          ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !11823
  br label %return, !dbg !11823

return:                                           ; preds = %if.end5, %if.then3, %if.then
  %6 = load i32, i32* %retval, align 4, !dbg !11824
  ret i32 %6, !dbg !11824
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %gs) #0 !dbg !11825 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !11826, metadata !DIExpression()), !dbg !11827
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !11828
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !11829
  ret %union.tree_node* %call, !dbg !11830
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_op(%union.gimple_statement_d* %gs, i32 %i, %union.tree_node* %op) #0 !dbg !11831 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  %op.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !11834, metadata !DIExpression()), !dbg !11835
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !11836, metadata !DIExpression()), !dbg !11837
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !11838, metadata !DIExpression()), !dbg !11839
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !11840
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !11840
  %conv = zext i8 %call to i32, !dbg !11840
  %tobool = icmp ne i32 %conv, 0, !dbg !11840
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !11840

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %i.addr, align 4, !dbg !11840
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !11840
  %call1 = call i32 @gimple_num_ops(%union.gimple_statement_d* %2), !dbg !11840
  %cmp = icmp ult i32 %1, %call1, !dbg !11840
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !11840

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.16, i64 0, i64 0), i32 1665, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !11840
  br label %cond.end, !dbg !11840

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !11840

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !11840
  %3 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !11841
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !11842
  %call3 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %4), !dbg !11843
  %5 = load i32, i32* %i.addr, align 4, !dbg !11844
  %idxprom = zext i32 %5 to i64, !dbg !11843
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call3, i64 %idxprom, !dbg !11843
  store %union.tree_node* %3, %union.tree_node** %arrayidx, align 8, !dbg !11845
  ret void, !dbg !11846
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_assign_rhs1_ptr(%union.gimple_statement_d* %gs) #0 !dbg !11847 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !11848, metadata !DIExpression()), !dbg !11849
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !11850
  %call = call %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %0, i32 1), !dbg !11851
  ret %union.tree_node** %call, !dbg !11852
}

declare dso_local zeroext i8 @is_gimple_reg_type(%union.tree_node*) #3

declare dso_local i32 @gimple_call_flags(%union.gimple_statement_d*) #3

declare dso_local zeroext i8 @stmt_can_throw_internal(%union.gimple_statement_d*) #3

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %gs) #0 !dbg !11853 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !11854, metadata !DIExpression()), !dbg !11855
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr, metadata !11856, metadata !DIExpression()), !dbg !11857
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !11858
  %call = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %0), !dbg !11859
  store %union.tree_node* %call, %union.tree_node** %addr, align 8, !dbg !11857
  %1 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !11860
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !11860
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !11860
  %bf.load = load i64, i64* %2, align 8, !dbg !11860
  %bf.clear = and i64 %bf.load, 65535, !dbg !11860
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !11860
  %cmp = icmp eq i32 %bf.cast, 121, !dbg !11862
  br i1 %cmp, label %if.then, label %if.end, !dbg !11863

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !11864
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !11864
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !11864
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !11864
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !11864
  store %union.tree_node* %4, %union.tree_node** %retval, align 8, !dbg !11865
  br label %return, !dbg !11865

if.end:                                           ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !11866
  br label %return, !dbg !11866

return:                                           ; preds = %if.end, %if.then
  %5 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !11867
  ret %union.tree_node* %5, !dbg !11867
}

declare dso_local i32 @aggregate_value_p(%union.tree_node*, %union.tree_node*) #3

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @make_ssa_name(%union.tree_node* %var, %union.gimple_statement_d* %stmt) #0 !dbg !11868 {
entry:
  %var.addr = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !11871, metadata !DIExpression()), !dbg !11872
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !11873, metadata !DIExpression()), !dbg !11874
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !11875
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !11875
  %1 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !11876
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11877
  %call = call %union.tree_node* @make_ssa_name_fn(%struct.function* %add.ptr, %union.tree_node* %1, %union.gimple_statement_d* %2), !dbg !11878
  ret %union.tree_node* %call, !dbg !11879
}

declare dso_local void @gimple_set_lhs(%union.gimple_statement_d*, %union.tree_node*) #3

declare dso_local %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node*, %union.tree_node*) #3

; Function Attrs: noinline nounwind uwtable
define internal %struct.htab* @gimple_referenced_vars(%struct.function* %fun) #0 !dbg !11880 {
entry:
  %retval = alloca %struct.htab*, align 8
  %fun.addr = alloca %struct.function*, align 8
  store %struct.function* %fun, %struct.function** %fun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fun.addr, metadata !11883, metadata !DIExpression()), !dbg !11884
  %0 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !11885
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 3, !dbg !11887
  %1 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !11887
  %tobool = icmp ne %struct.gimple_df* %1, null, !dbg !11885
  br i1 %tobool, label %if.end, label %if.then, !dbg !11888

if.then:                                          ; preds = %entry
  store %struct.htab* null, %struct.htab** %retval, align 8, !dbg !11889
  br label %return, !dbg !11889

if.end:                                           ; preds = %entry
  %2 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !11890
  %gimple_df1 = getelementptr inbounds %struct.function, %struct.function* %2, i32 0, i32 3, !dbg !11891
  %3 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df1, align 8, !dbg !11891
  %referenced_vars = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %3, i32 0, i32 0, !dbg !11892
  %4 = load %struct.htab*, %struct.htab** %referenced_vars, align 8, !dbg !11892
  store %struct.htab* %4, %struct.htab** %retval, align 8, !dbg !11893
  br label %return, !dbg !11893

return:                                           ; preds = %if.end, %if.then
  %5 = load %struct.htab*, %struct.htab** %retval, align 8, !dbg !11894
  ret %struct.htab* %5, !dbg !11894
}

declare dso_local zeroext i8 @add_referenced_var(%union.tree_node*) #3

declare dso_local void @mark_symbols_for_renaming(%union.gimple_statement_d*) #3

declare dso_local void @gsi_insert_seq_before(%struct.gimple_stmt_iterator*, %struct.gimple_seq_d*, i32) #3

declare dso_local void @gsi_insert_after(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i32) #3

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @force_gimple_operand(%union.tree_node* %expr, %struct.gimple_seq_d** %stmts, i8 zeroext %simple, %union.tree_node* %var) #0 !dbg !11895 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %stmts.addr = alloca %struct.gimple_seq_d**, align 8
  %simple.addr = alloca i8, align 1
  %var.addr = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  %ret = alloca i32, align 4
  %gimple_test_f = alloca i8 (%union.tree_node*)*, align 8
  %gctx = alloca %struct.gimplify_ctx, align 8
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !11898, metadata !DIExpression()), !dbg !11899
  store %struct.gimple_seq_d** %stmts, %struct.gimple_seq_d*** %stmts.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %stmts.addr, metadata !11900, metadata !DIExpression()), !dbg !11901
  store i8 %simple, i8* %simple.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %simple.addr, metadata !11902, metadata !DIExpression()), !dbg !11903
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !11904, metadata !DIExpression()), !dbg !11905
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !11906, metadata !DIExpression()), !dbg !11907
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !11908, metadata !DIExpression()), !dbg !11909
  call void @llvm.dbg.declare(metadata i8 (%union.tree_node*)** %gimple_test_f, metadata !11910, metadata !DIExpression()), !dbg !11911
  call void @llvm.dbg.declare(metadata %struct.gimplify_ctx* %gctx, metadata !11912, metadata !DIExpression()), !dbg !11913
  %0 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %stmts.addr, align 8, !dbg !11914
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %0, align 8, !dbg !11915
  %1 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !11916
  %call = call zeroext i8 @is_gimple_val(%union.tree_node* %1), !dbg !11918
  %tobool = icmp ne i8 %call, 0, !dbg !11918
  br i1 %tobool, label %if.then, label %if.end, !dbg !11919

if.then:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !11920
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !11921
  br label %return, !dbg !11921

if.end:                                           ; preds = %entry
  %3 = load i8, i8* %simple.addr, align 1, !dbg !11922
  %conv = zext i8 %3 to i32, !dbg !11922
  %tobool1 = icmp ne i32 %conv, 0, !dbg !11922
  %4 = zext i1 %tobool1 to i64, !dbg !11922
  %cond = select i1 %tobool1, i8 (%union.tree_node*)* @is_gimple_val, i8 (%union.tree_node*)* @is_gimple_reg_rhs, !dbg !11922
  store i8 (%union.tree_node*)* %cond, i8 (%union.tree_node*)** %gimple_test_f, align 8, !dbg !11923
  call void @push_gimplify_context(%struct.gimplify_ctx* %gctx), !dbg !11924
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !11925
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !11925
  %call2 = call zeroext i8 @gimple_in_ssa_p(%struct.function* %add.ptr), !dbg !11926
  %6 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !11927
  %into_ssa = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %6, i32 0, i32 10, !dbg !11928
  store i8 %call2, i8* %into_ssa, align 1, !dbg !11929
  %7 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !11930
  %allow_rhs_cond_expr = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %7, i32 0, i32 11, !dbg !11931
  store i8 1, i8* %allow_rhs_cond_expr, align 2, !dbg !11932
  %8 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !11933
  %tobool3 = icmp ne %union.tree_node* %8, null, !dbg !11933
  br i1 %tobool3, label %if.then4, label %if.end6, !dbg !11935

if.then4:                                         ; preds = %if.end
  %9 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !11936
  %common = bitcast %union.tree_node* %9 to %struct.tree_common*, !dbg !11936
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !11936
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !11936
  %11 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !11936
  %12 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !11936
  %call5 = call %union.tree_node* @build2_stat(i32 53, %union.tree_node* %10, %union.tree_node* %11, %union.tree_node* %12), !dbg !11936
  store %union.tree_node* %call5, %union.tree_node** %expr.addr, align 8, !dbg !11937
  br label %if.end6, !dbg !11938

if.end6:                                          ; preds = %if.then4, %if.end
  %13 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !11939
  %base = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !11939
  %14 = bitcast %struct.tree_base* %base to i64*, !dbg !11939
  %bf.load = load i64, i64* %14, align 8, !dbg !11939
  %bf.clear = and i64 %bf.load, 65535, !dbg !11939
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !11939
  %cmp = icmp ne i32 %bf.cast, 53, !dbg !11941
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !11942

land.lhs.true:                                    ; preds = %if.end6
  %15 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !11943
  %common8 = bitcast %union.tree_node* %15 to %struct.tree_common*, !dbg !11943
  %type9 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common8, i32 0, i32 2, !dbg !11943
  %16 = load %union.tree_node*, %union.tree_node** %type9, align 8, !dbg !11943
  %17 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !11944
  %cmp10 = icmp eq %union.tree_node* %16, %17, !dbg !11945
  br i1 %cmp10, label %if.then12, label %if.else, !dbg !11946

if.then12:                                        ; preds = %land.lhs.true
  %18 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !11947
  %19 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %stmts.addr, align 8, !dbg !11949
  call void @gimplify_and_add(%union.tree_node* %18, %struct.gimple_seq_d** %19), !dbg !11950
  store %union.tree_node* null, %union.tree_node** %expr.addr, align 8, !dbg !11951
  br label %if.end17, !dbg !11952

if.else:                                          ; preds = %land.lhs.true, %if.end6
  %20 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %stmts.addr, align 8, !dbg !11953
  %21 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** %gimple_test_f, align 8, !dbg !11955
  %call13 = call i32 @gimplify_expr(%union.tree_node** %expr.addr, %struct.gimple_seq_d** %20, %struct.gimple_seq_d** null, i8 (%union.tree_node*)* %21, i32 1), !dbg !11956
  store i32 %call13, i32* %ret, align 4, !dbg !11957
  %22 = load i32, i32* %ret, align 4, !dbg !11958
  %cmp14 = icmp ne i32 %22, -2, !dbg !11958
  br i1 %cmp14, label %cond.false, label %cond.true, !dbg !11958

cond.true:                                        ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 7901, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !11958
  br label %cond.end, !dbg !11958

cond.false:                                       ; preds = %if.else
  br label %cond.end, !dbg !11958

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond16 = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !11958
  br label %if.end17

if.end17:                                         ; preds = %cond.end, %if.then12
  %23 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !11959
  %add.ptr18 = getelementptr inbounds %struct.function, %struct.function* %23, i64 0, !dbg !11959
  %call19 = call %struct.htab* @gimple_referenced_vars(%struct.function* %add.ptr18), !dbg !11961
  %tobool20 = icmp ne %struct.htab* %call19, null, !dbg !11961
  br i1 %tobool20, label %if.then21, label %if.end25, !dbg !11962

if.then21:                                        ; preds = %if.end17
  %24 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !11963
  %temps = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %24, i32 0, i32 2, !dbg !11965
  %25 = load %union.tree_node*, %union.tree_node** %temps, align 8, !dbg !11965
  store %union.tree_node* %25, %union.tree_node** %t, align 8, !dbg !11966
  br label %for.cond, !dbg !11967

for.cond:                                         ; preds = %for.inc, %if.then21
  %26 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !11968
  %tobool22 = icmp ne %union.tree_node* %26, null, !dbg !11970
  br i1 %tobool22, label %for.body, label %for.end, !dbg !11970

for.body:                                         ; preds = %for.cond
  %27 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !11971
  %call23 = call zeroext i8 @add_referenced_var(%union.tree_node* %27), !dbg !11972
  br label %for.inc, !dbg !11972

for.inc:                                          ; preds = %for.body
  %28 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !11973
  %common24 = bitcast %union.tree_node* %28 to %struct.tree_common*, !dbg !11973
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common24, i32 0, i32 1, !dbg !11973
  %29 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !11973
  store %union.tree_node* %29, %union.tree_node** %t, align 8, !dbg !11974
  br label %for.cond, !dbg !11975, !llvm.loop !11976

for.end:                                          ; preds = %for.cond
  br label %if.end25, !dbg !11977

if.end25:                                         ; preds = %for.end, %if.end17
  call void @pop_gimplify_context(%union.gimple_statement_d* null), !dbg !11978
  %30 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !11979
  store %union.tree_node* %30, %union.tree_node** %retval, align 8, !dbg !11980
  br label %return, !dbg !11980

return:                                           ; preds = %if.end25, %if.then
  %31 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !11981
  ret %union.tree_node* %31, !dbg !11981
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @force_gimple_operand_gsi(%struct.gimple_stmt_iterator* %gsi, %union.tree_node* %expr, i8 zeroext %simple_p, %union.tree_node* %var, i8 zeroext %before, i32 %m) #0 !dbg !11982 {
entry:
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %simple_p.addr = alloca i8, align 1
  %var.addr = alloca %union.tree_node*, align 8
  %before.addr = alloca i8, align 1
  %m.addr = alloca i32, align 4
  %stmts = alloca %struct.gimple_seq_d*, align 8
  %i = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !11985, metadata !DIExpression()), !dbg !11986
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !11987, metadata !DIExpression()), !dbg !11988
  store i8 %simple_p, i8* %simple_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %simple_p.addr, metadata !11989, metadata !DIExpression()), !dbg !11990
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !11991, metadata !DIExpression()), !dbg !11992
  store i8 %before, i8* %before.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %before.addr, metadata !11993, metadata !DIExpression()), !dbg !11994
  store i32 %m, i32* %m.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %m.addr, metadata !11995, metadata !DIExpression()), !dbg !11996
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %stmts, metadata !11997, metadata !DIExpression()), !dbg !11998
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !11999
  %1 = load i8, i8* %simple_p.addr, align 1, !dbg !12000
  %2 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !12001
  %call = call %union.tree_node* @force_gimple_operand(%union.tree_node* %0, %struct.gimple_seq_d** %stmts, i8 zeroext %1, %union.tree_node* %2), !dbg !12002
  store %union.tree_node* %call, %union.tree_node** %expr.addr, align 8, !dbg !12003
  %3 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !12004
  %call1 = call zeroext i8 @gimple_seq_empty_p(%struct.gimple_seq_d* %3), !dbg !12006
  %tobool = icmp ne i8 %call1, 0, !dbg !12006
  br i1 %tobool, label %if.end11, label %if.then, !dbg !12007

if.then:                                          ; preds = %entry
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !12008
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !12008
  %call2 = call zeroext i8 @gimple_in_ssa_p(%struct.function* %add.ptr), !dbg !12011
  %tobool3 = icmp ne i8 %call2, 0, !dbg !12011
  br i1 %tobool3, label %if.then4, label %if.end, !dbg !12012

if.then4:                                         ; preds = %if.then
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !12013, metadata !DIExpression()), !dbg !12015
  %5 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !12016
  call void @gsi_start(%struct.gimple_stmt_iterator* sret %tmp, %struct.gimple_seq_d* %5), !dbg !12018
  %6 = bitcast %struct.gimple_stmt_iterator* %i to i8*, !dbg !12018
  %7 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !12018
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 24, i1 false), !dbg !12018
  br label %for.cond, !dbg !12019

for.cond:                                         ; preds = %for.inc, %if.then4
  %call5 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i), !dbg !12020
  %tobool6 = icmp ne i8 %call5, 0, !dbg !12022
  %lnot = xor i1 %tobool6, true, !dbg !12022
  br i1 %lnot, label %for.body, label %for.end, !dbg !12023

for.body:                                         ; preds = %for.cond
  %call7 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i), !dbg !12024
  call void @mark_symbols_for_renaming(%union.gimple_statement_d* %call7), !dbg !12025
  br label %for.inc, !dbg !12025

for.inc:                                          ; preds = %for.body
  call void @gsi_next(%struct.gimple_stmt_iterator* %i), !dbg !12026
  br label %for.cond, !dbg !12027, !llvm.loop !12028

for.end:                                          ; preds = %for.cond
  br label %if.end, !dbg !12030

if.end:                                           ; preds = %for.end, %if.then
  %8 = load i8, i8* %before.addr, align 1, !dbg !12031
  %tobool8 = icmp ne i8 %8, 0, !dbg !12031
  br i1 %tobool8, label %if.then9, label %if.else, !dbg !12033

if.then9:                                         ; preds = %if.end
  %9 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !12034
  %10 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !12035
  %11 = load i32, i32* %m.addr, align 4, !dbg !12036
  call void @gsi_insert_seq_before(%struct.gimple_stmt_iterator* %9, %struct.gimple_seq_d* %10, i32 %11), !dbg !12037
  br label %if.end10, !dbg !12037

if.else:                                          ; preds = %if.end
  %12 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !12038
  %13 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !12039
  %14 = load i32, i32* %m.addr, align 4, !dbg !12040
  call void @gsi_insert_seq_after(%struct.gimple_stmt_iterator* %12, %struct.gimple_seq_d* %13, i32 %14), !dbg !12041
  br label %if.end10

if.end10:                                         ; preds = %if.else, %if.then9
  br label %if.end11, !dbg !12042

if.end11:                                         ; preds = %if.end10, %entry
  %15 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !12043
  ret %union.tree_node* %15, !dbg !12044
}

declare dso_local void @gsi_insert_seq_after(%struct.gimple_stmt_iterator*, %struct.gimple_seq_d*, i32) #3

declare dso_local void @free(i8*) #3

declare dso_local %union.tree_node* @alloc_stmt_list() #3

declare dso_local void @tsi_link_after(%struct.tree_stmt_iterator*, %union.tree_node*, i32) #3

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @lookup_tmp_var(%union.tree_node* %val, i8 zeroext %is_formal) #0 !dbg !12045 {
entry:
  %val.addr = alloca %union.tree_node*, align 8
  %is_formal.addr = alloca i8, align 1
  %ret = alloca %union.tree_node*, align 8
  %elt = alloca %struct.gimple_temp_hash_elt, align 8
  %elt_p = alloca %struct.gimple_temp_hash_elt*, align 8
  %slot = alloca i8**, align 8
  store %union.tree_node* %val, %union.tree_node** %val.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val.addr, metadata !12048, metadata !DIExpression()), !dbg !12049
  store i8 %is_formal, i8* %is_formal.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %is_formal.addr, metadata !12050, metadata !DIExpression()), !dbg !12051
  call void @llvm.dbg.declare(metadata %union.tree_node** %ret, metadata !12052, metadata !DIExpression()), !dbg !12053
  %0 = load i32, i32* @optimize, align 4, !dbg !12054
  %tobool = icmp ne i32 %0, 0, !dbg !12054
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !12056

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8, i8* %is_formal.addr, align 1, !dbg !12057
  %tobool1 = icmp ne i8 %1, 0, !dbg !12057
  br i1 %tobool1, label %lor.lhs.false2, label %if.then, !dbg !12058

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %2 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !12059
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !12059
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !12059
  %bf.load = load i64, i64* %3, align 8, !dbg !12059
  %bf.lshr = lshr i64 %bf.load, 16, !dbg !12059
  %bf.clear = and i64 %bf.lshr, 1, !dbg !12059
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !12059
  %tobool3 = icmp ne i32 %bf.cast, 0, !dbg !12059
  br i1 %tobool3, label %if.then, label %if.else, !dbg !12060

if.then:                                          ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  %4 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !12061
  %call = call %union.tree_node* @create_tmp_from_val(%union.tree_node* %4), !dbg !12062
  store %union.tree_node* %call, %union.tree_node** %ret, align 8, !dbg !12063
  br label %if.end18, !dbg !12064

if.else:                                          ; preds = %lor.lhs.false2
  call void @llvm.dbg.declare(metadata %struct.gimple_temp_hash_elt* %elt, metadata !12065, metadata !DIExpression()), !dbg !12067
  call void @llvm.dbg.declare(metadata %struct.gimple_temp_hash_elt** %elt_p, metadata !12068, metadata !DIExpression()), !dbg !12069
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !12070, metadata !DIExpression()), !dbg !12071
  %5 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !12072
  %val4 = getelementptr inbounds %struct.gimple_temp_hash_elt, %struct.gimple_temp_hash_elt* %elt, i32 0, i32 0, !dbg !12073
  store %union.tree_node* %5, %union.tree_node** %val4, align 8, !dbg !12074
  %6 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !12075
  %temp_htab = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %6, i32 0, i32 7, !dbg !12077
  %7 = load %struct.htab*, %struct.htab** %temp_htab, align 8, !dbg !12077
  %cmp = icmp eq %struct.htab* %7, null, !dbg !12078
  br i1 %cmp, label %if.then5, label %if.end, !dbg !12079

if.then5:                                         ; preds = %if.else
  %call6 = call %struct.htab* @htab_create(i64 1000, i32 (i8*)* @gimple_tree_hash, i32 (i8*, i8*)* @gimple_tree_eq, void (i8*)* @free), !dbg !12080
  %8 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !12081
  %temp_htab7 = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %8, i32 0, i32 7, !dbg !12082
  store %struct.htab* %call6, %struct.htab** %temp_htab7, align 8, !dbg !12083
  br label %if.end, !dbg !12081

if.end:                                           ; preds = %if.then5, %if.else
  %9 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !12084
  %temp_htab8 = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %9, i32 0, i32 7, !dbg !12085
  %10 = load %struct.htab*, %struct.htab** %temp_htab8, align 8, !dbg !12085
  %11 = bitcast %struct.gimple_temp_hash_elt* %elt to i8*, !dbg !12086
  %call9 = call i8** @htab_find_slot(%struct.htab* %10, i8* %11, i32 1), !dbg !12087
  store i8** %call9, i8*** %slot, align 8, !dbg !12088
  %12 = load i8**, i8*** %slot, align 8, !dbg !12089
  %13 = load i8*, i8** %12, align 8, !dbg !12091
  %cmp10 = icmp eq i8* %13, null, !dbg !12092
  br i1 %cmp10, label %if.then11, label %if.else15, !dbg !12093

if.then11:                                        ; preds = %if.end
  %call12 = call i8* @xmalloc(i64 16), !dbg !12094
  %14 = bitcast i8* %call12 to %struct.gimple_temp_hash_elt*, !dbg !12094
  store %struct.gimple_temp_hash_elt* %14, %struct.gimple_temp_hash_elt** %elt_p, align 8, !dbg !12096
  %15 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !12097
  %16 = load %struct.gimple_temp_hash_elt*, %struct.gimple_temp_hash_elt** %elt_p, align 8, !dbg !12098
  %val13 = getelementptr inbounds %struct.gimple_temp_hash_elt, %struct.gimple_temp_hash_elt* %16, i32 0, i32 0, !dbg !12099
  store %union.tree_node* %15, %union.tree_node** %val13, align 8, !dbg !12100
  %17 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !12101
  %call14 = call %union.tree_node* @create_tmp_from_val(%union.tree_node* %17), !dbg !12102
  store %union.tree_node* %call14, %union.tree_node** %ret, align 8, !dbg !12103
  %18 = load %struct.gimple_temp_hash_elt*, %struct.gimple_temp_hash_elt** %elt_p, align 8, !dbg !12104
  %temp = getelementptr inbounds %struct.gimple_temp_hash_elt, %struct.gimple_temp_hash_elt* %18, i32 0, i32 1, !dbg !12105
  store %union.tree_node* %call14, %union.tree_node** %temp, align 8, !dbg !12106
  %19 = load %struct.gimple_temp_hash_elt*, %struct.gimple_temp_hash_elt** %elt_p, align 8, !dbg !12107
  %20 = bitcast %struct.gimple_temp_hash_elt* %19 to i8*, !dbg !12108
  %21 = load i8**, i8*** %slot, align 8, !dbg !12109
  store i8* %20, i8** %21, align 8, !dbg !12110
  br label %if.end17, !dbg !12111

if.else15:                                        ; preds = %if.end
  %22 = load i8**, i8*** %slot, align 8, !dbg !12112
  %23 = load i8*, i8** %22, align 8, !dbg !12114
  %24 = bitcast i8* %23 to %struct.gimple_temp_hash_elt*, !dbg !12115
  store %struct.gimple_temp_hash_elt* %24, %struct.gimple_temp_hash_elt** %elt_p, align 8, !dbg !12116
  %25 = load %struct.gimple_temp_hash_elt*, %struct.gimple_temp_hash_elt** %elt_p, align 8, !dbg !12117
  %temp16 = getelementptr inbounds %struct.gimple_temp_hash_elt, %struct.gimple_temp_hash_elt* %25, i32 0, i32 1, !dbg !12118
  %26 = load %union.tree_node*, %union.tree_node** %temp16, align 8, !dbg !12118
  store %union.tree_node* %26, %union.tree_node** %ret, align 8, !dbg !12119
  br label %if.end17

if.end17:                                         ; preds = %if.else15, %if.then11
  br label %if.end18

if.end18:                                         ; preds = %if.end17, %if.then
  %27 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !12120
  ret %union.tree_node* %27, !dbg !12121
}

declare dso_local void @ggc_free(i8*) #3

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @gimple_seq_last_stmt(%struct.gimple_seq_d* %s) #0 !dbg !12122 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  %n = alloca %struct.gimple_seq_node_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !12123, metadata !DIExpression()), !dbg !12124
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_node_d** %n, metadata !12125, metadata !DIExpression()), !dbg !12126
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !12127
  %call = call %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %0), !dbg !12128
  store %struct.gimple_seq_node_d* %call, %struct.gimple_seq_node_d** %n, align 8, !dbg !12126
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %n, align 8, !dbg !12129
  %tobool = icmp ne %struct.gimple_seq_node_d* %1, null, !dbg !12130
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !12130

cond.true:                                        ; preds = %entry
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %n, align 8, !dbg !12131
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %2, i32 0, i32 0, !dbg !12132
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !12132
  br label %cond.end, !dbg !12130

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !12130

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.gimple_statement_d* [ %3, %cond.true ], [ null, %cond.false ], !dbg !12130
  ret %union.gimple_statement_d* %cond, !dbg !12133
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @create_tmp_from_val(%union.tree_node* %val) #0 !dbg !12134 {
entry:
  %val.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %val, %union.tree_node** %val.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val.addr, metadata !12135, metadata !DIExpression()), !dbg !12136
  %0 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !12137
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !12137
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !12137
  %1 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !12137
  %2 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !12138
  %call = call i8* @get_name(%union.tree_node* %2), !dbg !12139
  %call1 = call %union.tree_node* @create_tmp_var(%union.tree_node* %1, i8* %call), !dbg !12140
  ret %union.tree_node* %call1, !dbg !12141
}

declare dso_local %struct.htab* @htab_create(i64, i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_tree_hash(i8* %p) #0 !dbg !12142 {
entry:
  %p.addr = alloca i8*, align 8
  %t = alloca %union.tree_node*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !12143, metadata !DIExpression()), !dbg !12144
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !12145, metadata !DIExpression()), !dbg !12146
  %0 = load i8*, i8** %p.addr, align 8, !dbg !12147
  %1 = bitcast i8* %0 to %struct.gimple_temp_hash_elt*, !dbg !12148
  %val = getelementptr inbounds %struct.gimple_temp_hash_elt, %struct.gimple_temp_hash_elt* %1, i32 0, i32 0, !dbg !12149
  %2 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !12149
  store %union.tree_node* %2, %union.tree_node** %t, align 8, !dbg !12146
  %3 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !12150
  %call = call i32 @iterative_hash_expr(%union.tree_node* %3, i32 0), !dbg !12151
  ret i32 %call, !dbg !12152
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_tree_eq(i8* %p1, i8* %p2) #0 !dbg !12153 {
entry:
  %retval = alloca i32, align 4
  %p1.addr = alloca i8*, align 8
  %p2.addr = alloca i8*, align 8
  %t1 = alloca %union.tree_node*, align 8
  %t2 = alloca %union.tree_node*, align 8
  %code = alloca i32, align 4
  store i8* %p1, i8** %p1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p1.addr, metadata !12154, metadata !DIExpression()), !dbg !12155
  store i8* %p2, i8** %p2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p2.addr, metadata !12156, metadata !DIExpression()), !dbg !12157
  call void @llvm.dbg.declare(metadata %union.tree_node** %t1, metadata !12158, metadata !DIExpression()), !dbg !12159
  %0 = load i8*, i8** %p1.addr, align 8, !dbg !12160
  %1 = bitcast i8* %0 to %struct.gimple_temp_hash_elt*, !dbg !12161
  %val = getelementptr inbounds %struct.gimple_temp_hash_elt, %struct.gimple_temp_hash_elt* %1, i32 0, i32 0, !dbg !12162
  %2 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !12162
  store %union.tree_node* %2, %union.tree_node** %t1, align 8, !dbg !12159
  call void @llvm.dbg.declare(metadata %union.tree_node** %t2, metadata !12163, metadata !DIExpression()), !dbg !12164
  %3 = load i8*, i8** %p2.addr, align 8, !dbg !12165
  %4 = bitcast i8* %3 to %struct.gimple_temp_hash_elt*, !dbg !12166
  %val1 = getelementptr inbounds %struct.gimple_temp_hash_elt, %struct.gimple_temp_hash_elt* %4, i32 0, i32 0, !dbg !12167
  %5 = load %union.tree_node*, %union.tree_node** %val1, align 8, !dbg !12167
  store %union.tree_node* %5, %union.tree_node** %t2, align 8, !dbg !12164
  call void @llvm.dbg.declare(metadata i32* %code, metadata !12168, metadata !DIExpression()), !dbg !12169
  %6 = load %union.tree_node*, %union.tree_node** %t1, align 8, !dbg !12170
  %base = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !12170
  %7 = bitcast %struct.tree_base* %base to i64*, !dbg !12170
  %bf.load = load i64, i64* %7, align 8, !dbg !12170
  %bf.clear = and i64 %bf.load, 65535, !dbg !12170
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !12170
  store i32 %bf.cast, i32* %code, align 4, !dbg !12169
  %8 = load %union.tree_node*, %union.tree_node** %t2, align 8, !dbg !12171
  %base2 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !12171
  %9 = bitcast %struct.tree_base* %base2 to i64*, !dbg !12171
  %bf.load3 = load i64, i64* %9, align 8, !dbg !12171
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !12171
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !12171
  %10 = load i32, i32* %code, align 4, !dbg !12173
  %cmp = icmp ne i32 %bf.cast5, %10, !dbg !12174
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !12175

lor.lhs.false:                                    ; preds = %entry
  %11 = load %union.tree_node*, %union.tree_node** %t1, align 8, !dbg !12176
  %common = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !12176
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !12176
  %12 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !12176
  %13 = load %union.tree_node*, %union.tree_node** %t2, align 8, !dbg !12177
  %common6 = bitcast %union.tree_node* %13 to %struct.tree_common*, !dbg !12177
  %type7 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common6, i32 0, i32 2, !dbg !12177
  %14 = load %union.tree_node*, %union.tree_node** %type7, align 8, !dbg !12177
  %cmp8 = icmp ne %union.tree_node* %12, %14, !dbg !12178
  br i1 %cmp8, label %if.then, label %if.end, !dbg !12179

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 0, i32* %retval, align 4, !dbg !12180
  br label %return, !dbg !12180

if.end:                                           ; preds = %lor.lhs.false
  %15 = load %union.tree_node*, %union.tree_node** %t1, align 8, !dbg !12181
  %16 = load %union.tree_node*, %union.tree_node** %t2, align 8, !dbg !12183
  %call = call i32 @operand_equal_p(%union.tree_node* %15, %union.tree_node* %16, i32 0), !dbg !12184
  %tobool = icmp ne i32 %call, 0, !dbg !12184
  br i1 %tobool, label %if.end10, label %if.then9, !dbg !12185

if.then9:                                         ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !12186
  br label %return, !dbg !12186

if.end10:                                         ; preds = %if.end
  %17 = load i8*, i8** %p1.addr, align 8, !dbg !12187
  %call11 = call i32 @gimple_tree_hash(i8* %17), !dbg !12187
  %18 = load i8*, i8** %p2.addr, align 8, !dbg !12187
  %call12 = call i32 @gimple_tree_hash(i8* %18), !dbg !12187
  %cmp13 = icmp eq i32 %call11, %call12, !dbg !12187
  br i1 %cmp13, label %cond.false, label %cond.true, !dbg !12187

cond.true:                                        ; preds = %if.end10
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 150, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !12187
  br label %cond.end, !dbg !12187

cond.false:                                       ; preds = %if.end10
  br label %cond.end, !dbg !12187

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !12187
  store i32 1, i32* %retval, align 4, !dbg !12188
  br label %return, !dbg !12188

return:                                           ; preds = %cond.end, %if.then9, %if.then
  %19 = load i32, i32* %retval, align 4, !dbg !12189
  ret i32 %19, !dbg !12189
}

declare dso_local i8** @htab_find_slot(%struct.htab*, i8*, i32) #3

declare dso_local i8* @xmalloc(i64) #3

declare dso_local i8* @get_name(%union.tree_node*) #3

declare dso_local i32 @iterative_hash_expr(%union.tree_node*, i32) #3

declare dso_local i32 @operand_equal_p(%union.tree_node*, %union.tree_node*, i32) #3

declare dso_local i64 @max_int_size_in_bytes(%union.tree_node*) #3

declare dso_local %union.tree_node* @build_int_cst(%union.tree_node*, i64) #3

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %g) #0 !dbg !12190 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !12193, metadata !DIExpression()), !dbg !12194
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !12195
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !12196
  %bb = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 4, !dbg !12197
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !12197
  ret %struct.basic_block_def* %1, !dbg !12198
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_location(%union.gimple_statement_d* %g) #0 !dbg !12199 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !12200, metadata !DIExpression()), !dbg !12201
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !12202
  %call = call i32 @gimple_location(%union.gimple_statement_d* %0), !dbg !12203
  %cmp = icmp ne i32 %call, 0, !dbg !12204
  %conv = zext i1 %cmp to i32, !dbg !12204
  %conv1 = trunc i32 %conv to i8, !dbg !12203
  ret i8 %conv1, !dbg !12205
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_do_not_emit_location_p(%union.gimple_statement_d* %g) #0 !dbg !12206 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !12209, metadata !DIExpression()), !dbg !12210
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !12211
  %call = call i32 @gimple_plf(%union.gimple_statement_d* %0, i32 1), !dbg !12212
  %conv = trunc i32 %call to i8, !dbg !12212
  ret i8 %conv, !dbg !12213
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @should_carry_location_p(%union.gimple_statement_d* %gs) #0 !dbg !12214 {
entry:
  %retval = alloca i8, align 1
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !12215, metadata !DIExpression()), !dbg !12216
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !12217
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !12219
  %cmp = icmp eq i32 %call, 4, !dbg !12220
  br i1 %cmp, label %if.then, label %if.end, !dbg !12221

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !12222
  br label %return, !dbg !12222

if.end:                                           ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !12223
  br label %return, !dbg !12223

return:                                           ; preds = %if.end, %if.then
  %1 = load i8, i8* %retval, align 1, !dbg !12224
  ret i8 %1, !dbg !12224
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_location(%union.gimple_statement_d* %g) #0 !dbg !12225 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !12228, metadata !DIExpression()), !dbg !12229
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !12230
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !12231
  %location = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 2, !dbg !12232
  %1 = load i32, i32* %location, align 8, !dbg !12232
  ret i32 %1, !dbg !12233
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_plf(%union.gimple_statement_d* %stmt, i32 %plf) #0 !dbg !12234 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %plf.addr = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !12237, metadata !DIExpression()), !dbg !12238
  store i32 %plf, i32* %plf.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %plf.addr, metadata !12239, metadata !DIExpression()), !dbg !12240
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !12241
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !12242
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !12243
  %bf.load = load i32, i32* %1, align 8, !dbg !12243
  %bf.lshr = lshr i32 %bf.load, 11, !dbg !12243
  %bf.clear = and i32 %bf.lshr, 3, !dbg !12243
  %2 = load i32, i32* %plf.addr, align 4, !dbg !12244
  %and = and i32 %bf.clear, %2, !dbg !12245
  ret i32 %and, !dbg !12246
}

declare dso_local %union.tree_node* @copy_tree_r(%union.tree_node**, i32*, i8*) #3

declare dso_local i32 @tree_int_cst_compare(%union.tree_node*, %union.tree_node*) #3

declare dso_local %union.tree_node* @decl_value_expr_lookup(%union.tree_node*) #3

; Function Attrs: noinline nounwind uwtable
define internal void @omp_firstprivatize_type_sizes(%struct.gimplify_omp_ctx* %ctx, %union.tree_node* %type) #0 !dbg !12247 {
entry:
  %ctx.addr = alloca %struct.gimplify_omp_ctx*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %field = alloca %union.tree_node*, align 8
  store %struct.gimplify_omp_ctx* %ctx, %struct.gimplify_omp_ctx** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimplify_omp_ctx** %ctx.addr, metadata !12248, metadata !DIExpression()), !dbg !12249
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !12250, metadata !DIExpression()), !dbg !12251
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !12252
  %cmp = icmp eq %union.tree_node* %0, null, !dbg !12254
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !12255

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !12256
  %2 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !12257
  %cmp1 = icmp eq %union.tree_node* %1, %2, !dbg !12258
  br i1 %cmp1, label %if.then, label %if.end, !dbg !12259

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %return, !dbg !12260

if.end:                                           ; preds = %lor.lhs.false
  %3 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !12261
  %type2 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !12261
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type2, i32 0, i32 16, !dbg !12261
  %4 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !12261
  store %union.tree_node* %4, %union.tree_node** %type.addr, align 8, !dbg !12262
  %5 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx.addr, align 8, !dbg !12263
  %privatized_types = getelementptr inbounds %struct.gimplify_omp_ctx, %struct.gimplify_omp_ctx* %5, i32 0, i32 2, !dbg !12265
  %6 = load %struct.pointer_set_t*, %struct.pointer_set_t** %privatized_types, align 8, !dbg !12265
  %7 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !12266
  %8 = bitcast %union.tree_node* %7 to i8*, !dbg !12266
  %call = call i32 @pointer_set_insert(%struct.pointer_set_t* %6, i8* %8), !dbg !12267
  %tobool = icmp ne i32 %call, 0, !dbg !12267
  br i1 %tobool, label %if.then3, label %if.end4, !dbg !12268

if.then3:                                         ; preds = %if.end
  br label %return, !dbg !12269

if.end4:                                          ; preds = %if.end
  %9 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !12270
  %base = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !12270
  %10 = bitcast %struct.tree_base* %base to i64*, !dbg !12270
  %bf.load = load i64, i64* %10, align 8, !dbg !12270
  %bf.clear = and i64 %bf.load, 65535, !dbg !12270
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !12270
  switch i32 %bf.cast, label %sw.default [
    i32 8, label %sw.bb
    i32 6, label %sw.bb
    i32 7, label %sw.bb
    i32 9, label %sw.bb
    i32 11, label %sw.bb
    i32 15, label %sw.bb7
    i32 16, label %sw.bb10
    i32 17, label %sw.bb10
    i32 18, label %sw.bb10
    i32 10, label %sw.bb24
    i32 12, label %sw.bb24
  ], !dbg !12271

sw.bb:                                            ; preds = %if.end4, %if.end4, %if.end4, %if.end4, %if.end4
  %11 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx.addr, align 8, !dbg !12272
  %12 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !12274
  %type5 = bitcast %union.tree_node* %12 to %struct.tree_type*, !dbg !12274
  %minval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type5, i32 0, i32 13, !dbg !12274
  %13 = load %union.tree_node*, %union.tree_node** %minval, align 8, !dbg !12274
  call void @omp_firstprivatize_variable(%struct.gimplify_omp_ctx* %11, %union.tree_node* %13), !dbg !12275
  %14 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx.addr, align 8, !dbg !12276
  %15 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !12277
  %type6 = bitcast %union.tree_node* %15 to %struct.tree_type*, !dbg !12277
  %maxval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type6, i32 0, i32 14, !dbg !12277
  %16 = load %union.tree_node*, %union.tree_node** %maxval, align 8, !dbg !12277
  call void @omp_firstprivatize_variable(%struct.gimplify_omp_ctx* %14, %union.tree_node* %16), !dbg !12278
  br label %sw.epilog, !dbg !12279

sw.bb7:                                           ; preds = %if.end4
  %17 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx.addr, align 8, !dbg !12280
  %18 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !12281
  %common = bitcast %union.tree_node* %18 to %struct.tree_common*, !dbg !12281
  %type8 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !12281
  %19 = load %union.tree_node*, %union.tree_node** %type8, align 8, !dbg !12281
  call void @omp_firstprivatize_type_sizes(%struct.gimplify_omp_ctx* %17, %union.tree_node* %19), !dbg !12282
  %20 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx.addr, align 8, !dbg !12283
  %21 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !12284
  %type9 = bitcast %union.tree_node* %21 to %struct.tree_type*, !dbg !12284
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type9, i32 0, i32 1, !dbg !12284
  %22 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !12284
  call void @omp_firstprivatize_type_sizes(%struct.gimplify_omp_ctx* %20, %union.tree_node* %22), !dbg !12285
  br label %sw.epilog, !dbg !12286

sw.bb10:                                          ; preds = %if.end4, %if.end4, %if.end4
  call void @llvm.dbg.declare(metadata %union.tree_node** %field, metadata !12287, metadata !DIExpression()), !dbg !12289
  %23 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !12290
  %type11 = bitcast %union.tree_node* %23 to %struct.tree_type*, !dbg !12290
  %values12 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type11, i32 0, i32 1, !dbg !12290
  %24 = load %union.tree_node*, %union.tree_node** %values12, align 8, !dbg !12290
  store %union.tree_node* %24, %union.tree_node** %field, align 8, !dbg !12292
  br label %for.cond, !dbg !12293

for.cond:                                         ; preds = %for.inc, %sw.bb10
  %25 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !12294
  %tobool13 = icmp ne %union.tree_node* %25, null, !dbg !12296
  br i1 %tobool13, label %for.body, label %for.end, !dbg !12296

for.body:                                         ; preds = %for.cond
  %26 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !12297
  %base14 = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !12297
  %27 = bitcast %struct.tree_base* %base14 to i64*, !dbg !12297
  %bf.load15 = load i64, i64* %27, align 8, !dbg !12297
  %bf.clear16 = and i64 %bf.load15, 65535, !dbg !12297
  %bf.cast17 = trunc i64 %bf.clear16 to i32, !dbg !12297
  %cmp18 = icmp eq i32 %bf.cast17, 31, !dbg !12299
  br i1 %cmp18, label %if.then19, label %if.end22, !dbg !12300

if.then19:                                        ; preds = %for.body
  %28 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx.addr, align 8, !dbg !12301
  %29 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !12303
  %field_decl = bitcast %union.tree_node* %29 to %struct.tree_field_decl*, !dbg !12303
  %offset = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl, i32 0, i32 1, !dbg !12303
  %30 = load %union.tree_node*, %union.tree_node** %offset, align 8, !dbg !12303
  call void @omp_firstprivatize_variable(%struct.gimplify_omp_ctx* %28, %union.tree_node* %30), !dbg !12304
  %31 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx.addr, align 8, !dbg !12305
  %32 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !12306
  %common20 = bitcast %union.tree_node* %32 to %struct.tree_common*, !dbg !12306
  %type21 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common20, i32 0, i32 2, !dbg !12306
  %33 = load %union.tree_node*, %union.tree_node** %type21, align 8, !dbg !12306
  call void @omp_firstprivatize_type_sizes(%struct.gimplify_omp_ctx* %31, %union.tree_node* %33), !dbg !12307
  br label %if.end22, !dbg !12308

if.end22:                                         ; preds = %if.then19, %for.body
  br label %for.inc, !dbg !12309

for.inc:                                          ; preds = %if.end22
  %34 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !12310
  %common23 = bitcast %union.tree_node* %34 to %struct.tree_common*, !dbg !12310
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common23, i32 0, i32 1, !dbg !12310
  %35 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !12310
  store %union.tree_node* %35, %union.tree_node** %field, align 8, !dbg !12311
  br label %for.cond, !dbg !12312, !llvm.loop !12313

for.end:                                          ; preds = %for.cond
  br label %sw.epilog, !dbg !12315

sw.bb24:                                          ; preds = %if.end4, %if.end4
  %36 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx.addr, align 8, !dbg !12316
  %37 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !12317
  %common25 = bitcast %union.tree_node* %37 to %struct.tree_common*, !dbg !12317
  %type26 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common25, i32 0, i32 2, !dbg !12317
  %38 = load %union.tree_node*, %union.tree_node** %type26, align 8, !dbg !12317
  call void @omp_firstprivatize_type_sizes(%struct.gimplify_omp_ctx* %36, %union.tree_node* %38), !dbg !12318
  br label %sw.epilog, !dbg !12319

sw.default:                                       ; preds = %if.end4
  br label %sw.epilog, !dbg !12320

sw.epilog:                                        ; preds = %sw.default, %sw.bb24, %for.end, %sw.bb7, %sw.bb
  %39 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx.addr, align 8, !dbg !12321
  %40 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !12322
  %type27 = bitcast %union.tree_node* %40 to %struct.tree_type*, !dbg !12322
  %size = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type27, i32 0, i32 2, !dbg !12322
  %41 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !12322
  call void @omp_firstprivatize_variable(%struct.gimplify_omp_ctx* %39, %union.tree_node* %41), !dbg !12323
  %42 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx.addr, align 8, !dbg !12324
  %43 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !12325
  %type28 = bitcast %union.tree_node* %43 to %struct.tree_type*, !dbg !12325
  %size_unit = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type28, i32 0, i32 3, !dbg !12325
  %44 = load %union.tree_node*, %union.tree_node** %size_unit, align 8, !dbg !12325
  call void @omp_firstprivatize_variable(%struct.gimplify_omp_ctx* %42, %union.tree_node* %44), !dbg !12326
  %45 = load void (%struct.gimplify_omp_ctx*, %union.tree_node*)*, void (%struct.gimplify_omp_ctx*, %union.tree_node*)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 34, i32 10), align 8, !dbg !12327
  %46 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx.addr, align 8, !dbg !12328
  %47 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !12329
  call void %45(%struct.gimplify_omp_ctx* %46, %union.tree_node* %47), !dbg !12330
  br label %return, !dbg !12331

return:                                           ; preds = %sw.epilog, %if.then3, %if.then
  ret void, !dbg !12331
}

declare dso_local %struct.splay_tree_node_s* @splay_tree_insert(%struct.splay_tree_s*, i64, i64) #3

declare dso_local i32 @pointer_set_insert(%struct.pointer_set_t*, i8*) #3

declare dso_local %union.tree_node* @build_fold_indirect_ref_loc(i32, %union.tree_node*) #3

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 %alloc_) #0 !dbg !12332 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !12335, metadata !DIExpression()), !dbg !12336
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !12336
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !12336
  %1 = bitcast i8* %call to %struct.VEC_tree_heap*, !dbg !12336
  ret %struct.VEC_tree_heap* %1, !dbg !12336
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @VEC_tree_heap_safe_push(%struct.VEC_tree_heap** %vec_, %union.tree_node* %obj_) #0 !dbg !12337 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_heap**, align 8
  %obj_.addr = alloca %union.tree_node*, align 8
  store %struct.VEC_tree_heap** %vec_, %struct.VEC_tree_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vec_.addr, metadata !12341, metadata !DIExpression()), !dbg !12342
  store %union.tree_node* %obj_, %union.tree_node** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_.addr, metadata !12343, metadata !DIExpression()), !dbg !12342
  %0 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !12342
  %call = call i32 @VEC_tree_heap_reserve(%struct.VEC_tree_heap** %0, i32 1), !dbg !12342
  %1 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !12342
  %2 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %1, align 8, !dbg !12342
  %tobool = icmp ne %struct.VEC_tree_heap* %2, null, !dbg !12342
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !12342

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !12342
  %4 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %3, align 8, !dbg !12342
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %4, i32 0, i32 0, !dbg !12342
  br label %cond.end, !dbg !12342

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !12342

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !12342
  %5 = load %union.tree_node*, %union.tree_node** %obj_.addr, align 8, !dbg !12342
  %call1 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond, %union.tree_node* %5), !dbg !12342
  ret %union.tree_node** %call1, !dbg !12342
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %vec_, i32 %ix_) #0 !dbg !12344 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !12347, metadata !DIExpression()), !dbg !12348
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !12349, metadata !DIExpression()), !dbg !12348
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !12348
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !12348
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !12348

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !12348
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !12348
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 0, !dbg !12348
  %3 = load i32, i32* %num, align 8, !dbg !12348
  %cmp = icmp ult i32 %1, %3, !dbg !12348
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !12350
  %land.ext = zext i1 %4 to i32, !dbg !12348
  %5 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !12348
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %5, i32 0, i32 2, !dbg !12348
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !12348
  %idxprom = zext i32 %6 to i64, !dbg !12348
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !12348
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !12348
  ret %union.tree_node* %7, !dbg !12348
}

declare dso_local %union.tree_node* @array_ref_low_bound(%union.tree_node*) #3

declare dso_local zeroext i8 @is_gimple_min_invariant(%union.tree_node*) #3

declare dso_local %union.tree_node* @array_ref_element_size(%union.tree_node*) #3

declare dso_local %union.tree_node* @size_binop_loc(i32, i32, %union.tree_node*, %union.tree_node*) #3

declare dso_local %union.tree_node* @component_ref_field_offset(%union.tree_node*) #3

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @VEC_tree_base_pop(%struct.VEC_tree_base* %vec_) #0 !dbg !12351 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %obj_ = alloca %union.tree_node*, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !12354, metadata !DIExpression()), !dbg !12355
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_, metadata !12356, metadata !DIExpression()), !dbg !12355
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !12355
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %0, i32 0, i32 0, !dbg !12355
  %1 = load i32, i32* %num, align 8, !dbg !12355
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !12355
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 2, !dbg !12355
  %3 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !12355
  %num1 = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %3, i32 0, i32 0, !dbg !12355
  %4 = load i32, i32* %num1, align 8, !dbg !12355
  %dec = add i32 %4, -1, !dbg !12355
  store i32 %dec, i32* %num1, align 8, !dbg !12355
  %idxprom = zext i32 %dec to i64, !dbg !12355
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !12355
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !12355
  store %union.tree_node* %5, %union.tree_node** %obj_, align 8, !dbg !12355
  %6 = load %union.tree_node*, %union.tree_node** %obj_, align 8, !dbg !12355
  ret %union.tree_node* %6, !dbg !12355
}

; Function Attrs: noinline nounwind uwtable
define internal void @canonicalize_component_ref(%union.tree_node** %expr_p) #0 !dbg !12357 {
entry:
  %expr_p.addr = alloca %union.tree_node**, align 8
  %expr = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  %type_quals = alloca i32, align 4
  store %union.tree_node** %expr_p, %union.tree_node*** %expr_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %expr_p.addr, metadata !12360, metadata !DIExpression()), !dbg !12361
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr, metadata !12362, metadata !DIExpression()), !dbg !12363
  %0 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !12364
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !12365
  store %union.tree_node* %1, %union.tree_node** %expr, align 8, !dbg !12363
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !12366, metadata !DIExpression()), !dbg !12367
  %2 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !12368
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !12368
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !12368
  %bf.load = load i64, i64* %3, align 8, !dbg !12368
  %bf.clear = and i64 %bf.load, 65535, !dbg !12368
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !12368
  %cmp = icmp eq i32 %bf.cast, 41, !dbg !12368
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !12368

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 1654, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !12368
  br label %cond.end, !dbg !12368

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !12368

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !12368
  %4 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !12369
  %common = bitcast %union.tree_node* %4 to %struct.tree_common*, !dbg !12369
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !12369
  %5 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !12369
  %base2 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !12369
  %6 = bitcast %struct.tree_base* %base2 to i64*, !dbg !12369
  %bf.load3 = load i64, i64* %6, align 8, !dbg !12369
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !12369
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !12369
  %cmp6 = icmp eq i32 %bf.cast5, 6, !dbg !12369
  br i1 %cmp6, label %if.then, label %lor.lhs.false, !dbg !12369

lor.lhs.false:                                    ; preds = %cond.end
  %7 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !12369
  %common7 = bitcast %union.tree_node* %7 to %struct.tree_common*, !dbg !12369
  %type8 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common7, i32 0, i32 2, !dbg !12369
  %8 = load %union.tree_node*, %union.tree_node** %type8, align 8, !dbg !12369
  %base9 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !12369
  %9 = bitcast %struct.tree_base* %base9 to i64*, !dbg !12369
  %bf.load10 = load i64, i64* %9, align 8, !dbg !12369
  %bf.clear11 = and i64 %bf.load10, 65535, !dbg !12369
  %bf.cast12 = trunc i64 %bf.clear11 to i32, !dbg !12369
  %cmp13 = icmp eq i32 %bf.cast12, 7, !dbg !12369
  br i1 %cmp13, label %if.then, label %lor.lhs.false14, !dbg !12369

lor.lhs.false14:                                  ; preds = %lor.lhs.false
  %10 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !12369
  %common15 = bitcast %union.tree_node* %10 to %struct.tree_common*, !dbg !12369
  %type16 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common15, i32 0, i32 2, !dbg !12369
  %11 = load %union.tree_node*, %union.tree_node** %type16, align 8, !dbg !12369
  %base17 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !12369
  %12 = bitcast %struct.tree_base* %base17 to i64*, !dbg !12369
  %bf.load18 = load i64, i64* %12, align 8, !dbg !12369
  %bf.clear19 = and i64 %bf.load18, 65535, !dbg !12369
  %bf.cast20 = trunc i64 %bf.clear19 to i32, !dbg !12369
  %cmp21 = icmp eq i32 %bf.cast20, 8, !dbg !12369
  br i1 %cmp21, label %if.then, label %if.else, !dbg !12371

if.then:                                          ; preds = %lor.lhs.false14, %lor.lhs.false, %cond.end
  %13 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !12372
  %call = call %union.tree_node* @get_unwidened(%union.tree_node* %13, %union.tree_node* null), !dbg !12372
  %common22 = bitcast %union.tree_node* %call to %struct.tree_common*, !dbg !12372
  %type23 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common22, i32 0, i32 2, !dbg !12372
  %14 = load %union.tree_node*, %union.tree_node** %type23, align 8, !dbg !12372
  store %union.tree_node* %14, %union.tree_node** %type, align 8, !dbg !12373
  br label %if.end, !dbg !12374

if.else:                                          ; preds = %lor.lhs.false14
  %15 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !12375
  %exp = bitcast %union.tree_node* %15 to %struct.tree_exp*, !dbg !12375
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !12375
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !12375
  %16 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !12375
  %common24 = bitcast %union.tree_node* %16 to %struct.tree_common*, !dbg !12375
  %type25 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common24, i32 0, i32 2, !dbg !12375
  %17 = load %union.tree_node*, %union.tree_node** %type25, align 8, !dbg !12375
  store %union.tree_node* %17, %union.tree_node** %type, align 8, !dbg !12376
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %18 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !12377
  %common26 = bitcast %union.tree_node* %18 to %struct.tree_common*, !dbg !12377
  %type27 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common26, i32 0, i32 2, !dbg !12377
  %19 = load %union.tree_node*, %union.tree_node** %type27, align 8, !dbg !12377
  %20 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !12379
  %cmp28 = icmp ne %union.tree_node* %19, %20, !dbg !12380
  br i1 %cmp28, label %if.then29, label %if.end133, !dbg !12381

if.then29:                                        ; preds = %if.end
  call void @llvm.dbg.declare(metadata i32* %type_quals, metadata !12382, metadata !DIExpression()), !dbg !12384
  %21 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !12385
  %base30 = bitcast %union.tree_node* %21 to %struct.tree_base*, !dbg !12385
  %22 = bitcast %struct.tree_base* %base30 to i64*, !dbg !12385
  %bf.load31 = load i64, i64* %22, align 8, !dbg !12385
  %bf.lshr = lshr i64 %bf.load31, 20, !dbg !12385
  %bf.clear32 = and i64 %bf.lshr, 1, !dbg !12385
  %bf.cast33 = trunc i64 %bf.clear32 to i32, !dbg !12385
  %mul = mul nsw i32 %bf.cast33, 1, !dbg !12385
  %23 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !12385
  %base34 = bitcast %union.tree_node* %23 to %struct.tree_base*, !dbg !12385
  %24 = bitcast %struct.tree_base* %base34 to i64*, !dbg !12385
  %bf.load35 = load i64, i64* %24, align 8, !dbg !12385
  %bf.lshr36 = lshr i64 %bf.load35, 19, !dbg !12385
  %bf.clear37 = and i64 %bf.lshr36, 1, !dbg !12385
  %bf.cast38 = trunc i64 %bf.clear37 to i32, !dbg !12385
  %mul39 = mul nsw i32 %bf.cast38, 2, !dbg !12385
  %or = or i32 %mul, %mul39, !dbg !12385
  %25 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !12385
  %type40 = bitcast %union.tree_node* %25 to %struct.tree_type*, !dbg !12385
  %restrict_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type40, i32 0, i32 6, !dbg !12385
  %bf.load41 = load i32, i32* %restrict_flag, align 4, !dbg !12385
  %bf.lshr42 = lshr i32 %bf.load41, 13, !dbg !12385
  %bf.clear43 = and i32 %bf.lshr42, 1, !dbg !12385
  %mul44 = mul nsw i32 %bf.clear43, 4, !dbg !12385
  %or45 = or i32 %or, %mul44, !dbg !12385
  %26 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !12385
  %base46 = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !12385
  %27 = bitcast %struct.tree_base* %base46 to i64*, !dbg !12385
  %bf.load47 = load i64, i64* %27, align 8, !dbg !12385
  %bf.lshr48 = lshr i64 %bf.load47, 56, !dbg !12385
  %bf.cast49 = trunc i64 %bf.lshr48 to i32, !dbg !12385
  %and = and i32 %bf.cast49, 255, !dbg !12385
  %shl = shl i32 %and, 8, !dbg !12385
  %or50 = or i32 %or45, %shl, !dbg !12385
  %28 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !12386
  %exp51 = bitcast %union.tree_node* %28 to %struct.tree_exp*, !dbg !12386
  %operands52 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp51, i32 0, i32 3, !dbg !12386
  %arrayidx53 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands52, i64 0, i64 0, !dbg !12386
  %29 = load %union.tree_node*, %union.tree_node** %arrayidx53, align 8, !dbg !12386
  %common54 = bitcast %union.tree_node* %29 to %struct.tree_common*, !dbg !12386
  %type55 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common54, i32 0, i32 2, !dbg !12386
  %30 = load %union.tree_node*, %union.tree_node** %type55, align 8, !dbg !12386
  %base56 = bitcast %union.tree_node* %30 to %struct.tree_base*, !dbg !12386
  %31 = bitcast %struct.tree_base* %base56 to i64*, !dbg !12386
  %bf.load57 = load i64, i64* %31, align 8, !dbg !12386
  %bf.lshr58 = lshr i64 %bf.load57, 20, !dbg !12386
  %bf.clear59 = and i64 %bf.lshr58, 1, !dbg !12386
  %bf.cast60 = trunc i64 %bf.clear59 to i32, !dbg !12386
  %mul61 = mul nsw i32 %bf.cast60, 1, !dbg !12386
  %32 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !12386
  %exp62 = bitcast %union.tree_node* %32 to %struct.tree_exp*, !dbg !12386
  %operands63 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp62, i32 0, i32 3, !dbg !12386
  %arrayidx64 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands63, i64 0, i64 0, !dbg !12386
  %33 = load %union.tree_node*, %union.tree_node** %arrayidx64, align 8, !dbg !12386
  %common65 = bitcast %union.tree_node* %33 to %struct.tree_common*, !dbg !12386
  %type66 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common65, i32 0, i32 2, !dbg !12386
  %34 = load %union.tree_node*, %union.tree_node** %type66, align 8, !dbg !12386
  %base67 = bitcast %union.tree_node* %34 to %struct.tree_base*, !dbg !12386
  %35 = bitcast %struct.tree_base* %base67 to i64*, !dbg !12386
  %bf.load68 = load i64, i64* %35, align 8, !dbg !12386
  %bf.lshr69 = lshr i64 %bf.load68, 19, !dbg !12386
  %bf.clear70 = and i64 %bf.lshr69, 1, !dbg !12386
  %bf.cast71 = trunc i64 %bf.clear70 to i32, !dbg !12386
  %mul72 = mul nsw i32 %bf.cast71, 2, !dbg !12386
  %or73 = or i32 %mul61, %mul72, !dbg !12386
  %36 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !12386
  %exp74 = bitcast %union.tree_node* %36 to %struct.tree_exp*, !dbg !12386
  %operands75 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp74, i32 0, i32 3, !dbg !12386
  %arrayidx76 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands75, i64 0, i64 0, !dbg !12386
  %37 = load %union.tree_node*, %union.tree_node** %arrayidx76, align 8, !dbg !12386
  %common77 = bitcast %union.tree_node* %37 to %struct.tree_common*, !dbg !12386
  %type78 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common77, i32 0, i32 2, !dbg !12386
  %38 = load %union.tree_node*, %union.tree_node** %type78, align 8, !dbg !12386
  %type79 = bitcast %union.tree_node* %38 to %struct.tree_type*, !dbg !12386
  %restrict_flag80 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type79, i32 0, i32 6, !dbg !12386
  %bf.load81 = load i32, i32* %restrict_flag80, align 4, !dbg !12386
  %bf.lshr82 = lshr i32 %bf.load81, 13, !dbg !12386
  %bf.clear83 = and i32 %bf.lshr82, 1, !dbg !12386
  %mul84 = mul nsw i32 %bf.clear83, 4, !dbg !12386
  %or85 = or i32 %or73, %mul84, !dbg !12386
  %39 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !12386
  %exp86 = bitcast %union.tree_node* %39 to %struct.tree_exp*, !dbg !12386
  %operands87 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp86, i32 0, i32 3, !dbg !12386
  %arrayidx88 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands87, i64 0, i64 0, !dbg !12386
  %40 = load %union.tree_node*, %union.tree_node** %arrayidx88, align 8, !dbg !12386
  %common89 = bitcast %union.tree_node* %40 to %struct.tree_common*, !dbg !12386
  %type90 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common89, i32 0, i32 2, !dbg !12386
  %41 = load %union.tree_node*, %union.tree_node** %type90, align 8, !dbg !12386
  %base91 = bitcast %union.tree_node* %41 to %struct.tree_base*, !dbg !12386
  %42 = bitcast %struct.tree_base* %base91 to i64*, !dbg !12386
  %bf.load92 = load i64, i64* %42, align 8, !dbg !12386
  %bf.lshr93 = lshr i64 %bf.load92, 56, !dbg !12386
  %bf.cast94 = trunc i64 %bf.lshr93 to i32, !dbg !12386
  %and95 = and i32 %bf.cast94, 255, !dbg !12386
  %shl96 = shl i32 %and95, 8, !dbg !12386
  %or97 = or i32 %or85, %shl96, !dbg !12386
  %or98 = or i32 %or50, %or97, !dbg !12387
  store i32 %or98, i32* %type_quals, align 4, !dbg !12388
  %43 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !12389
  %base99 = bitcast %union.tree_node* %43 to %struct.tree_base*, !dbg !12389
  %44 = bitcast %struct.tree_base* %base99 to i64*, !dbg !12389
  %bf.load100 = load i64, i64* %44, align 8, !dbg !12389
  %bf.lshr101 = lshr i64 %bf.load100, 20, !dbg !12389
  %bf.clear102 = and i64 %bf.lshr101, 1, !dbg !12389
  %bf.cast103 = trunc i64 %bf.clear102 to i32, !dbg !12389
  %mul104 = mul nsw i32 %bf.cast103, 1, !dbg !12389
  %45 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !12389
  %base105 = bitcast %union.tree_node* %45 to %struct.tree_base*, !dbg !12389
  %46 = bitcast %struct.tree_base* %base105 to i64*, !dbg !12389
  %bf.load106 = load i64, i64* %46, align 8, !dbg !12389
  %bf.lshr107 = lshr i64 %bf.load106, 19, !dbg !12389
  %bf.clear108 = and i64 %bf.lshr107, 1, !dbg !12389
  %bf.cast109 = trunc i64 %bf.clear108 to i32, !dbg !12389
  %mul110 = mul nsw i32 %bf.cast109, 2, !dbg !12389
  %or111 = or i32 %mul104, %mul110, !dbg !12389
  %47 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !12389
  %type112 = bitcast %union.tree_node* %47 to %struct.tree_type*, !dbg !12389
  %restrict_flag113 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type112, i32 0, i32 6, !dbg !12389
  %bf.load114 = load i32, i32* %restrict_flag113, align 4, !dbg !12389
  %bf.lshr115 = lshr i32 %bf.load114, 13, !dbg !12389
  %bf.clear116 = and i32 %bf.lshr115, 1, !dbg !12389
  %mul117 = mul nsw i32 %bf.clear116, 4, !dbg !12389
  %or118 = or i32 %or111, %mul117, !dbg !12389
  %48 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !12389
  %base119 = bitcast %union.tree_node* %48 to %struct.tree_base*, !dbg !12389
  %49 = bitcast %struct.tree_base* %base119 to i64*, !dbg !12389
  %bf.load120 = load i64, i64* %49, align 8, !dbg !12389
  %bf.lshr121 = lshr i64 %bf.load120, 56, !dbg !12389
  %bf.cast122 = trunc i64 %bf.lshr121 to i32, !dbg !12389
  %and123 = and i32 %bf.cast122, 255, !dbg !12389
  %shl124 = shl i32 %and123, 8, !dbg !12389
  %or125 = or i32 %or118, %shl124, !dbg !12389
  %50 = load i32, i32* %type_quals, align 4, !dbg !12391
  %cmp126 = icmp ne i32 %or125, %50, !dbg !12392
  br i1 %cmp126, label %if.then127, label %if.end130, !dbg !12393

if.then127:                                       ; preds = %if.then29
  %51 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !12394
  %type128 = bitcast %union.tree_node* %51 to %struct.tree_type*, !dbg !12394
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type128, i32 0, i32 16, !dbg !12394
  %52 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !12394
  %53 = load i32, i32* %type_quals, align 4, !dbg !12395
  %call129 = call %union.tree_node* @build_qualified_type(%union.tree_node* %52, i32 %53), !dbg !12396
  store %union.tree_node* %call129, %union.tree_node** %type, align 8, !dbg !12397
  br label %if.end130, !dbg !12398

if.end130:                                        ; preds = %if.then127, %if.then29
  %54 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !12399
  %55 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !12400
  %common131 = bitcast %union.tree_node* %55 to %struct.tree_common*, !dbg !12400
  %type132 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common131, i32 0, i32 2, !dbg !12400
  store %union.tree_node* %54, %union.tree_node** %type132, align 8, !dbg !12401
  br label %if.end133, !dbg !12402

if.end133:                                        ; preds = %if.end130, %if.end
  ret void, !dbg !12403
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_tree_heap_free(%struct.VEC_tree_heap** %vec_) #0 !dbg !12404 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_heap**, align 8
  store %struct.VEC_tree_heap** %vec_, %struct.VEC_tree_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vec_.addr, metadata !12407, metadata !DIExpression()), !dbg !12408
  %0 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !12409
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %0, align 8, !dbg !12409
  %tobool = icmp ne %struct.VEC_tree_heap* %1, null, !dbg !12409
  br i1 %tobool, label %if.then, label %if.end, !dbg !12408

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !12409
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %2, align 8, !dbg !12409
  %4 = bitcast %struct.VEC_tree_heap* %3 to i8*, !dbg !12409
  call void @free(i8* %4), !dbg !12409
  br label %if.end, !dbg !12409

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !12408
  store %struct.VEC_tree_heap* null, %struct.VEC_tree_heap** %5, align 8, !dbg !12408
  ret void, !dbg !12408
}

declare dso_local i8* @vec_heap_p_reserve_exact(i8*, i32) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_heap_reserve(%struct.VEC_tree_heap** %vec_, i32 %alloc_) #0 !dbg !12411 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_tree_heap** %vec_, %struct.VEC_tree_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vec_.addr, metadata !12414, metadata !DIExpression()), !dbg !12415
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !12416, metadata !DIExpression()), !dbg !12415
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !12417, metadata !DIExpression()), !dbg !12415
  %0 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !12415
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %0, align 8, !dbg !12415
  %tobool = icmp ne %struct.VEC_tree_heap* %1, null, !dbg !12415
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !12415

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !12415
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %2, align 8, !dbg !12415
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %3, i32 0, i32 0, !dbg !12415
  br label %cond.end, !dbg !12415

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !12415

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !12415
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !12415
  %call = call i32 @VEC_tree_base_space(%struct.VEC_tree_base* %cond, i32 %4), !dbg !12415
  %tobool1 = icmp ne i32 %call, 0, !dbg !12415
  %lnot = xor i1 %tobool1, true, !dbg !12415
  %lnot.ext = zext i1 %lnot to i32, !dbg !12415
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !12415
  %5 = load i32, i32* %extend, align 4, !dbg !12418
  %tobool2 = icmp ne i32 %5, 0, !dbg !12418
  br i1 %tobool2, label %if.then, label %if.end, !dbg !12415

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !12418
  %7 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %6, align 8, !dbg !12418
  %8 = bitcast %struct.VEC_tree_heap* %7 to i8*, !dbg !12418
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !12418
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !12418
  %10 = bitcast i8* %call3 to %struct.VEC_tree_heap*, !dbg !12418
  %11 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !12418
  store %struct.VEC_tree_heap* %10, %struct.VEC_tree_heap** %11, align 8, !dbg !12418
  br label %if.end, !dbg !12418

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !12415
  ret i32 %12, !dbg !12415
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %vec_, %union.tree_node* %obj_) #0 !dbg !12420 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %obj_.addr = alloca %union.tree_node*, align 8
  %slot_ = alloca %union.tree_node**, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !12423, metadata !DIExpression()), !dbg !12424
  store %union.tree_node* %obj_, %union.tree_node** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_.addr, metadata !12425, metadata !DIExpression()), !dbg !12424
  call void @llvm.dbg.declare(metadata %union.tree_node*** %slot_, metadata !12426, metadata !DIExpression()), !dbg !12424
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !12424
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %0, i32 0, i32 0, !dbg !12424
  %1 = load i32, i32* %num, align 8, !dbg !12424
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !12424
  %alloc = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 1, !dbg !12424
  %3 = load i32, i32* %alloc, align 4, !dbg !12424
  %cmp = icmp ult i32 %1, %3, !dbg !12424
  %conv = zext i1 %cmp to i32, !dbg !12424
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !12424
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 2, !dbg !12424
  %5 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !12424
  %num1 = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %5, i32 0, i32 0, !dbg !12424
  %6 = load i32, i32* %num1, align 8, !dbg !12424
  %inc = add i32 %6, 1, !dbg !12424
  store i32 %inc, i32* %num1, align 8, !dbg !12424
  %idxprom = zext i32 %6 to i64, !dbg !12424
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !12424
  store %union.tree_node** %arrayidx, %union.tree_node*** %slot_, align 8, !dbg !12424
  %7 = load %union.tree_node*, %union.tree_node** %obj_.addr, align 8, !dbg !12424
  %8 = load %union.tree_node**, %union.tree_node*** %slot_, align 8, !dbg !12424
  store %union.tree_node* %7, %union.tree_node** %8, align 8, !dbg !12424
  %9 = load %union.tree_node**, %union.tree_node*** %slot_, align 8, !dbg !12424
  ret %union.tree_node** %9, !dbg !12424
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_space(%struct.VEC_tree_base* %vec_, i32 %alloc_) #0 !dbg !12427 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !12430, metadata !DIExpression()), !dbg !12431
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !12432, metadata !DIExpression()), !dbg !12431
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !12431
  %cmp = icmp sge i32 %0, 0, !dbg !12431
  %conv = zext i1 %cmp to i32, !dbg !12431
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !12431
  %tobool = icmp ne %struct.VEC_tree_base* %1, null, !dbg !12431
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !12431

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !12431
  %alloc = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 1, !dbg !12431
  %3 = load i32, i32* %alloc, align 4, !dbg !12431
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !12431
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 0, !dbg !12431
  %5 = load i32, i32* %num, align 8, !dbg !12431
  %sub = sub i32 %3, %5, !dbg !12431
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !12431
  %cmp1 = icmp uge i32 %sub, %6, !dbg !12431
  %conv2 = zext i1 %cmp1 to i32, !dbg !12431
  br label %cond.end, !dbg !12431

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !12431
  %tobool3 = icmp ne i32 %7, 0, !dbg !12431
  %lnot = xor i1 %tobool3, true, !dbg !12431
  %lnot.ext = zext i1 %lnot to i32, !dbg !12431
  br label %cond.end, !dbg !12431

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !12431
  ret i32 %cond, !dbg !12431
}

declare dso_local i8* @vec_heap_p_reserve(i8*, i32) #3

declare dso_local %union.tree_node* @get_unwidened(%union.tree_node*, %union.tree_node*) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @generic_expr_could_trap_p(%union.tree_node* %expr) #0 !dbg !12433 {
entry:
  %retval = alloca i8, align 1
  %expr.addr = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !12434, metadata !DIExpression()), !dbg !12435
  call void @llvm.dbg.declare(metadata i32* %i, metadata !12436, metadata !DIExpression()), !dbg !12437
  call void @llvm.dbg.declare(metadata i32* %n, metadata !12438, metadata !DIExpression()), !dbg !12439
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !12440
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !12440
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !12442

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !12443
  %call = call zeroext i8 @is_gimple_val(%union.tree_node* %1), !dbg !12444
  %conv = zext i8 %call to i32, !dbg !12444
  %tobool1 = icmp ne i32 %conv, 0, !dbg !12444
  br i1 %tobool1, label %if.then, label %if.end, !dbg !12445

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8 0, i8* %retval, align 1, !dbg !12446
  br label %return, !dbg !12446

if.end:                                           ; preds = %lor.lhs.false
  %2 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !12447
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !12447
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !12447
  %bf.load = load i64, i64* %3, align 8, !dbg !12447
  %bf.clear = and i64 %bf.load, 65535, !dbg !12447
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !12447
  %idxprom = sext i32 %bf.cast to i64, !dbg !12447
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !12447
  %4 = load i32, i32* %arrayidx, align 4, !dbg !12447
  %cmp = icmp uge i32 %4, 4, !dbg !12447
  br i1 %cmp, label %land.lhs.true, label %if.then15, !dbg !12447

land.lhs.true:                                    ; preds = %if.end
  %5 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !12447
  %base3 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !12447
  %6 = bitcast %struct.tree_base* %base3 to i64*, !dbg !12447
  %bf.load4 = load i64, i64* %6, align 8, !dbg !12447
  %bf.clear5 = and i64 %bf.load4, 65535, !dbg !12447
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !12447
  %idxprom7 = sext i32 %bf.cast6 to i64, !dbg !12447
  %arrayidx8 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom7, !dbg !12447
  %7 = load i32, i32* %arrayidx8, align 4, !dbg !12447
  %cmp9 = icmp ule i32 %7, 10, !dbg !12447
  br i1 %cmp9, label %lor.lhs.false11, label %if.then15, !dbg !12449

lor.lhs.false11:                                  ; preds = %land.lhs.true
  %8 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !12450
  %call12 = call zeroext i8 @tree_could_trap_p(%union.tree_node* %8), !dbg !12451
  %conv13 = zext i8 %call12 to i32, !dbg !12451
  %tobool14 = icmp ne i32 %conv13, 0, !dbg !12451
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !12452

if.then15:                                        ; preds = %lor.lhs.false11, %land.lhs.true, %if.end
  store i8 1, i8* %retval, align 1, !dbg !12453
  br label %return, !dbg !12453

if.end16:                                         ; preds = %lor.lhs.false11
  %9 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !12454
  %call17 = call i32 @tree_operand_length(%union.tree_node* %9), !dbg !12454
  store i32 %call17, i32* %n, align 4, !dbg !12455
  store i32 0, i32* %i, align 4, !dbg !12456
  br label %for.cond, !dbg !12458

for.cond:                                         ; preds = %for.inc, %if.end16
  %10 = load i32, i32* %i, align 4, !dbg !12459
  %11 = load i32, i32* %n, align 4, !dbg !12461
  %cmp18 = icmp ult i32 %10, %11, !dbg !12462
  br i1 %cmp18, label %for.body, label %for.end, !dbg !12463

for.body:                                         ; preds = %for.cond
  %12 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !12464
  %exp = bitcast %union.tree_node* %12 to %struct.tree_exp*, !dbg !12464
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !12464
  %13 = load i32, i32* %i, align 4, !dbg !12464
  %idxprom20 = zext i32 %13 to i64, !dbg !12464
  %arrayidx21 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 %idxprom20, !dbg !12464
  %14 = load %union.tree_node*, %union.tree_node** %arrayidx21, align 8, !dbg !12464
  %call22 = call zeroext i8 @generic_expr_could_trap_p(%union.tree_node* %14), !dbg !12466
  %tobool23 = icmp ne i8 %call22, 0, !dbg !12466
  br i1 %tobool23, label %if.then24, label %if.end25, !dbg !12467

if.then24:                                        ; preds = %for.body
  store i8 1, i8* %retval, align 1, !dbg !12468
  br label %return, !dbg !12468

if.end25:                                         ; preds = %for.body
  br label %for.inc, !dbg !12469

for.inc:                                          ; preds = %if.end25
  %15 = load i32, i32* %i, align 4, !dbg !12470
  %inc = add i32 %15, 1, !dbg !12470
  store i32 %inc, i32* %i, align 4, !dbg !12470
  br label %for.cond, !dbg !12471, !llvm.loop !12472

for.end:                                          ; preds = %for.cond
  store i8 0, i8* %retval, align 1, !dbg !12474
  br label %return, !dbg !12474

return:                                           ; preds = %for.end, %if.then24, %if.then15, %if.then
  %16 = load i8, i8* %retval, align 1, !dbg !12475
  ret i8 %16, !dbg !12475
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimplify_pure_cond_expr(%union.tree_node** %expr_p, %struct.gimple_seq_d** %pre_p) #0 !dbg !12476 {
entry:
  %expr_p.addr = alloca %union.tree_node**, align 8
  %pre_p.addr = alloca %struct.gimple_seq_d**, align 8
  %expr = alloca %union.tree_node*, align 8
  %cond = alloca %union.tree_node*, align 8
  %ret = alloca i32, align 4
  %tret = alloca i32, align 4
  %code = alloca i32, align 4
  store %union.tree_node** %expr_p, %union.tree_node*** %expr_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %expr_p.addr, metadata !12477, metadata !DIExpression()), !dbg !12478
  store %struct.gimple_seq_d** %pre_p, %struct.gimple_seq_d*** %pre_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %pre_p.addr, metadata !12479, metadata !DIExpression()), !dbg !12480
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr, metadata !12481, metadata !DIExpression()), !dbg !12482
  %0 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !12483
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !12484
  store %union.tree_node* %1, %union.tree_node** %expr, align 8, !dbg !12482
  call void @llvm.dbg.declare(metadata %union.tree_node** %cond, metadata !12485, metadata !DIExpression()), !dbg !12486
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !12487, metadata !DIExpression()), !dbg !12488
  call void @llvm.dbg.declare(metadata i32* %tret, metadata !12489, metadata !DIExpression()), !dbg !12490
  call void @llvm.dbg.declare(metadata i32* %code, metadata !12491, metadata !DIExpression()), !dbg !12492
  %2 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !12493
  %exp = bitcast %union.tree_node* %2 to %struct.tree_exp*, !dbg !12493
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !12493
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !12493
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !12493
  %call = call %union.tree_node* @gimple_boolify(%union.tree_node* %3), !dbg !12494
  store %union.tree_node* %call, %union.tree_node** %cond, align 8, !dbg !12495
  %4 = load %union.tree_node*, %union.tree_node** %cond, align 8, !dbg !12496
  %base = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !12496
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !12496
  %bf.load = load i64, i64* %5, align 8, !dbg !12496
  %bf.clear = and i64 %bf.load, 65535, !dbg !12496
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !12496
  store i32 %bf.cast, i32* %code, align 4, !dbg !12497
  %6 = load i32, i32* %code, align 4, !dbg !12498
  %cmp = icmp eq i32 %6, 91, !dbg !12500
  br i1 %cmp, label %if.then, label %if.else, !dbg !12501

if.then:                                          ; preds = %entry
  %7 = load %union.tree_node*, %union.tree_node** %cond, align 8, !dbg !12502
  %base1 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !12502
  %8 = bitcast %struct.tree_base* %base1 to i64*, !dbg !12502
  %bf.load2 = load i64, i64* %8, align 8, !dbg !12502
  %bf.clear3 = and i64 %bf.load2, -65536, !dbg !12502
  %bf.set = or i64 %bf.clear3, 93, !dbg !12502
  store i64 %bf.set, i64* %8, align 8, !dbg !12502
  br label %if.end10, !dbg !12502

if.else:                                          ; preds = %entry
  %9 = load i32, i32* %code, align 4, !dbg !12503
  %cmp4 = icmp eq i32 %9, 92, !dbg !12505
  br i1 %cmp4, label %if.then5, label %if.end, !dbg !12506

if.then5:                                         ; preds = %if.else
  %10 = load %union.tree_node*, %union.tree_node** %cond, align 8, !dbg !12507
  %base6 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !12507
  %11 = bitcast %struct.tree_base* %base6 to i64*, !dbg !12507
  %bf.load7 = load i64, i64* %11, align 8, !dbg !12507
  %bf.clear8 = and i64 %bf.load7, -65536, !dbg !12507
  %bf.set9 = or i64 %bf.clear8, 94, !dbg !12507
  store i64 %bf.set9, i64* %11, align 8, !dbg !12507
  br label %if.end, !dbg !12507

if.end:                                           ; preds = %if.then5, %if.else
  br label %if.end10

if.end10:                                         ; preds = %if.end, %if.then
  %12 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !12508
  %call11 = call i32 @gimplify_expr(%union.tree_node** %cond, %struct.gimple_seq_d** %12, %struct.gimple_seq_d** null, i8 (%union.tree_node*)* @is_gimple_condexpr, i32 1), !dbg !12509
  store i32 %call11, i32* %ret, align 4, !dbg !12510
  %13 = load %union.tree_node*, %union.tree_node** %cond, align 8, !dbg !12511
  %14 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !12512
  %15 = load %union.tree_node*, %union.tree_node** %14, align 8, !dbg !12512
  %exp12 = bitcast %union.tree_node* %15 to %struct.tree_exp*, !dbg !12512
  %operands13 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp12, i32 0, i32 3, !dbg !12512
  %arrayidx14 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands13, i64 0, i64 0, !dbg !12512
  store %union.tree_node* %13, %union.tree_node** %arrayidx14, align 8, !dbg !12513
  %16 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !12514
  %exp15 = bitcast %union.tree_node* %16 to %struct.tree_exp*, !dbg !12514
  %operands16 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp15, i32 0, i32 3, !dbg !12514
  %arrayidx17 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands16, i64 0, i64 1, !dbg !12514
  %17 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !12515
  %call18 = call i32 @gimplify_expr(%union.tree_node** %arrayidx17, %struct.gimple_seq_d** %17, %struct.gimple_seq_d** null, i8 (%union.tree_node*)* @is_gimple_val, i32 1), !dbg !12516
  store i32 %call18, i32* %tret, align 4, !dbg !12517
  %18 = load i32, i32* %ret, align 4, !dbg !12518
  %19 = load i32, i32* %tret, align 4, !dbg !12518
  %cmp19 = icmp slt i32 %18, %19, !dbg !12518
  br i1 %cmp19, label %cond.true, label %cond.false, !dbg !12518

cond.true:                                        ; preds = %if.end10
  %20 = load i32, i32* %ret, align 4, !dbg !12518
  br label %cond.end, !dbg !12518

cond.false:                                       ; preds = %if.end10
  %21 = load i32, i32* %tret, align 4, !dbg !12518
  br label %cond.end, !dbg !12518

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond20 = phi i32 [ %20, %cond.true ], [ %21, %cond.false ], !dbg !12518
  store i32 %cond20, i32* %ret, align 4, !dbg !12519
  %22 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !12520
  %exp21 = bitcast %union.tree_node* %22 to %struct.tree_exp*, !dbg !12520
  %operands22 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp21, i32 0, i32 3, !dbg !12520
  %arrayidx23 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands22, i64 0, i64 2, !dbg !12520
  %23 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !12521
  %call24 = call i32 @gimplify_expr(%union.tree_node** %arrayidx23, %struct.gimple_seq_d** %23, %struct.gimple_seq_d** null, i8 (%union.tree_node*)* @is_gimple_val, i32 1), !dbg !12522
  store i32 %call24, i32* %tret, align 4, !dbg !12523
  %24 = load i32, i32* %ret, align 4, !dbg !12524
  %25 = load i32, i32* %tret, align 4, !dbg !12524
  %cmp25 = icmp slt i32 %24, %25, !dbg !12524
  br i1 %cmp25, label %cond.true26, label %cond.false27, !dbg !12524

cond.true26:                                      ; preds = %cond.end
  %26 = load i32, i32* %ret, align 4, !dbg !12524
  br label %cond.end28, !dbg !12524

cond.false27:                                     ; preds = %cond.end
  %27 = load i32, i32* %tret, align 4, !dbg !12524
  br label %cond.end28, !dbg !12524

cond.end28:                                       ; preds = %cond.false27, %cond.true26
  %cond29 = phi i32 [ %26, %cond.true26 ], [ %27, %cond.false27 ], !dbg !12524
  ret i32 %cond29, !dbg !12525
}

declare dso_local %union.tree_node* @build_pointer_type(%union.tree_node*) #3

declare dso_local %union.tree_node* @build3_stat(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*) #3

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @shortcut_cond_expr(%union.tree_node* %expr) #0 !dbg !12526 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %pred = alloca %union.tree_node*, align 8
  %then_ = alloca %union.tree_node*, align 8
  %else_ = alloca %union.tree_node*, align 8
  %true_label = alloca %union.tree_node*, align 8
  %false_label = alloca %union.tree_node*, align 8
  %end_label = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  %true_label_p = alloca %union.tree_node**, align 8
  %false_label_p = alloca %union.tree_node**, align 8
  %emit_end = alloca i8, align 1
  %emit_false = alloca i8, align 1
  %jump_over_else = alloca i8, align 1
  %then_se = alloca i8, align 1
  %else_se = alloca i8, align 1
  %locus = alloca i32, align 4
  %locus156 = alloca i32, align 4
  %last = alloca %union.tree_node*, align 8
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !12527, metadata !DIExpression()), !dbg !12528
  call void @llvm.dbg.declare(metadata %union.tree_node** %pred, metadata !12529, metadata !DIExpression()), !dbg !12530
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !12531
  %exp = bitcast %union.tree_node* %0 to %struct.tree_exp*, !dbg !12531
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !12531
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !12531
  %1 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !12531
  store %union.tree_node* %1, %union.tree_node** %pred, align 8, !dbg !12530
  call void @llvm.dbg.declare(metadata %union.tree_node** %then_, metadata !12532, metadata !DIExpression()), !dbg !12533
  %2 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !12534
  %exp1 = bitcast %union.tree_node* %2 to %struct.tree_exp*, !dbg !12534
  %operands2 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 3, !dbg !12534
  %arrayidx3 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2, i64 0, i64 1, !dbg !12534
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx3, align 8, !dbg !12534
  store %union.tree_node* %3, %union.tree_node** %then_, align 8, !dbg !12533
  call void @llvm.dbg.declare(metadata %union.tree_node** %else_, metadata !12535, metadata !DIExpression()), !dbg !12536
  %4 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !12537
  %exp4 = bitcast %union.tree_node* %4 to %struct.tree_exp*, !dbg !12537
  %operands5 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4, i32 0, i32 3, !dbg !12537
  %arrayidx6 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5, i64 0, i64 2, !dbg !12537
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx6, align 8, !dbg !12537
  store %union.tree_node* %5, %union.tree_node** %else_, align 8, !dbg !12536
  call void @llvm.dbg.declare(metadata %union.tree_node** %true_label, metadata !12538, metadata !DIExpression()), !dbg !12539
  call void @llvm.dbg.declare(metadata %union.tree_node** %false_label, metadata !12540, metadata !DIExpression()), !dbg !12541
  call void @llvm.dbg.declare(metadata %union.tree_node** %end_label, metadata !12542, metadata !DIExpression()), !dbg !12543
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !12544, metadata !DIExpression()), !dbg !12545
  call void @llvm.dbg.declare(metadata %union.tree_node*** %true_label_p, metadata !12546, metadata !DIExpression()), !dbg !12547
  call void @llvm.dbg.declare(metadata %union.tree_node*** %false_label_p, metadata !12548, metadata !DIExpression()), !dbg !12549
  call void @llvm.dbg.declare(metadata i8* %emit_end, metadata !12550, metadata !DIExpression()), !dbg !12551
  call void @llvm.dbg.declare(metadata i8* %emit_false, metadata !12552, metadata !DIExpression()), !dbg !12553
  call void @llvm.dbg.declare(metadata i8* %jump_over_else, metadata !12554, metadata !DIExpression()), !dbg !12555
  call void @llvm.dbg.declare(metadata i8* %then_se, metadata !12556, metadata !DIExpression()), !dbg !12557
  %6 = load %union.tree_node*, %union.tree_node** %then_, align 8, !dbg !12558
  %tobool = icmp ne %union.tree_node* %6, null, !dbg !12558
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !12559

land.rhs:                                         ; preds = %entry
  %7 = load %union.tree_node*, %union.tree_node** %then_, align 8, !dbg !12560
  %base = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !12560
  %8 = bitcast %struct.tree_base* %base to i64*, !dbg !12560
  %bf.load = load i64, i64* %8, align 8, !dbg !12560
  %bf.lshr = lshr i64 %bf.load, 16, !dbg !12560
  %bf.clear = and i64 %bf.lshr, 1, !dbg !12560
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !12560
  %tobool7 = icmp ne i32 %bf.cast, 0, !dbg !12559
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %9 = phi i1 [ false, %entry ], [ %tobool7, %land.rhs ], !dbg !12561
  %land.ext = zext i1 %9 to i32, !dbg !12559
  %conv = trunc i32 %land.ext to i8, !dbg !12558
  store i8 %conv, i8* %then_se, align 1, !dbg !12557
  call void @llvm.dbg.declare(metadata i8* %else_se, metadata !12562, metadata !DIExpression()), !dbg !12563
  %10 = load %union.tree_node*, %union.tree_node** %else_, align 8, !dbg !12564
  %tobool8 = icmp ne %union.tree_node* %10, null, !dbg !12564
  br i1 %tobool8, label %land.rhs9, label %land.end16, !dbg !12565

land.rhs9:                                        ; preds = %land.end
  %11 = load %union.tree_node*, %union.tree_node** %else_, align 8, !dbg !12566
  %base10 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !12566
  %12 = bitcast %struct.tree_base* %base10 to i64*, !dbg !12566
  %bf.load11 = load i64, i64* %12, align 8, !dbg !12566
  %bf.lshr12 = lshr i64 %bf.load11, 16, !dbg !12566
  %bf.clear13 = and i64 %bf.lshr12, 1, !dbg !12566
  %bf.cast14 = trunc i64 %bf.clear13 to i32, !dbg !12566
  %tobool15 = icmp ne i32 %bf.cast14, 0, !dbg !12565
  br label %land.end16

land.end16:                                       ; preds = %land.rhs9, %land.end
  %13 = phi i1 [ false, %land.end ], [ %tobool15, %land.rhs9 ], !dbg !12561
  %land.ext17 = zext i1 %13 to i32, !dbg !12565
  %conv18 = trunc i32 %land.ext17 to i8, !dbg !12564
  store i8 %conv18, i8* %else_se, align 1, !dbg !12563
  %14 = load i8, i8* %else_se, align 1, !dbg !12567
  %tobool19 = icmp ne i8 %14, 0, !dbg !12567
  br i1 %tobool19, label %if.end145, label %if.then, !dbg !12569

if.then:                                          ; preds = %land.end16
  br label %while.cond, !dbg !12570

while.cond:                                       ; preds = %land.end136, %if.then
  %15 = load %union.tree_node*, %union.tree_node** %pred, align 8, !dbg !12572
  %base20 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !12572
  %16 = bitcast %struct.tree_base* %base20 to i64*, !dbg !12572
  %bf.load21 = load i64, i64* %16, align 8, !dbg !12572
  %bf.clear22 = and i64 %bf.load21, 65535, !dbg !12572
  %bf.cast23 = trunc i64 %bf.clear22 to i32, !dbg !12572
  %cmp = icmp eq i32 %bf.cast23, 91, !dbg !12573
  br i1 %cmp, label %while.body, label %while.end, !dbg !12570

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i32* %locus, metadata !12574, metadata !DIExpression()), !dbg !12576
  %17 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !12577
  %base25 = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !12577
  %18 = bitcast %struct.tree_base* %base25 to i64*, !dbg !12577
  %bf.load26 = load i64, i64* %18, align 8, !dbg !12577
  %bf.clear27 = and i64 %bf.load26, 65535, !dbg !12577
  %bf.cast28 = trunc i64 %bf.clear27 to i32, !dbg !12577
  %idxprom = sext i32 %bf.cast28 to i64, !dbg !12577
  %arrayidx29 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !12577
  %19 = load i32, i32* %arrayidx29, align 4, !dbg !12577
  %cmp30 = icmp uge i32 %19, 4, !dbg !12577
  br i1 %cmp30, label %land.lhs.true, label %cond.false, !dbg !12577

land.lhs.true:                                    ; preds = %while.body
  %20 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !12577
  %base32 = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !12577
  %21 = bitcast %struct.tree_base* %base32 to i64*, !dbg !12577
  %bf.load33 = load i64, i64* %21, align 8, !dbg !12577
  %bf.clear34 = and i64 %bf.load33, 65535, !dbg !12577
  %bf.cast35 = trunc i64 %bf.clear34 to i32, !dbg !12577
  %idxprom36 = sext i32 %bf.cast35 to i64, !dbg !12577
  %arrayidx37 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom36, !dbg !12577
  %22 = load i32, i32* %arrayidx37, align 4, !dbg !12577
  %cmp38 = icmp ule i32 %22, 10, !dbg !12577
  br i1 %cmp38, label %cond.true, label %cond.false, !dbg !12577

cond.true:                                        ; preds = %land.lhs.true
  %23 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !12577
  %exp40 = bitcast %union.tree_node* %23 to %struct.tree_exp*, !dbg !12577
  %locus41 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp40, i32 0, i32 1, !dbg !12577
  %24 = load i32, i32* %locus41, align 8, !dbg !12577
  br label %cond.end, !dbg !12577

cond.false:                                       ; preds = %land.lhs.true, %while.body
  br label %cond.end, !dbg !12577

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %24, %cond.true ], [ 0, %cond.false ], !dbg !12577
  %cmp42 = icmp ne i32 %cond, 0, !dbg !12577
  br i1 %cmp42, label %cond.true44, label %cond.false68, !dbg !12577

cond.true44:                                      ; preds = %cond.end
  %25 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !12578
  %base45 = bitcast %union.tree_node* %25 to %struct.tree_base*, !dbg !12578
  %26 = bitcast %struct.tree_base* %base45 to i64*, !dbg !12578
  %bf.load46 = load i64, i64* %26, align 8, !dbg !12578
  %bf.clear47 = and i64 %bf.load46, 65535, !dbg !12578
  %bf.cast48 = trunc i64 %bf.clear47 to i32, !dbg !12578
  %idxprom49 = sext i32 %bf.cast48 to i64, !dbg !12578
  %arrayidx50 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom49, !dbg !12578
  %27 = load i32, i32* %arrayidx50, align 4, !dbg !12578
  %cmp51 = icmp uge i32 %27, 4, !dbg !12578
  br i1 %cmp51, label %land.lhs.true53, label %cond.false65, !dbg !12578

land.lhs.true53:                                  ; preds = %cond.true44
  %28 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !12578
  %base54 = bitcast %union.tree_node* %28 to %struct.tree_base*, !dbg !12578
  %29 = bitcast %struct.tree_base* %base54 to i64*, !dbg !12578
  %bf.load55 = load i64, i64* %29, align 8, !dbg !12578
  %bf.clear56 = and i64 %bf.load55, 65535, !dbg !12578
  %bf.cast57 = trunc i64 %bf.clear56 to i32, !dbg !12578
  %idxprom58 = sext i32 %bf.cast57 to i64, !dbg !12578
  %arrayidx59 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom58, !dbg !12578
  %30 = load i32, i32* %arrayidx59, align 4, !dbg !12578
  %cmp60 = icmp ule i32 %30, 10, !dbg !12578
  br i1 %cmp60, label %cond.true62, label %cond.false65, !dbg !12578

cond.true62:                                      ; preds = %land.lhs.true53
  %31 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !12578
  %exp63 = bitcast %union.tree_node* %31 to %struct.tree_exp*, !dbg !12578
  %locus64 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp63, i32 0, i32 1, !dbg !12578
  %32 = load i32, i32* %locus64, align 8, !dbg !12578
  br label %cond.end66, !dbg !12578

cond.false65:                                     ; preds = %land.lhs.true53, %cond.true44
  br label %cond.end66, !dbg !12578

cond.end66:                                       ; preds = %cond.false65, %cond.true62
  %cond67 = phi i32 [ %32, %cond.true62 ], [ 0, %cond.false65 ], !dbg !12578
  br label %cond.end69, !dbg !12577

cond.false68:                                     ; preds = %cond.end
  %33 = load i32, i32* @input_location, align 4, !dbg !12579
  br label %cond.end69, !dbg !12577

cond.end69:                                       ; preds = %cond.false68, %cond.end66
  %cond70 = phi i32 [ %cond67, %cond.end66 ], [ %33, %cond.false68 ], !dbg !12577
  store i32 %cond70, i32* %locus, align 4, !dbg !12576
  %34 = load %union.tree_node*, %union.tree_node** %pred, align 8, !dbg !12580
  %exp71 = bitcast %union.tree_node* %34 to %struct.tree_exp*, !dbg !12580
  %operands72 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp71, i32 0, i32 3, !dbg !12580
  %arrayidx73 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands72, i64 0, i64 1, !dbg !12580
  %35 = load %union.tree_node*, %union.tree_node** %arrayidx73, align 8, !dbg !12580
  %36 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !12581
  %exp74 = bitcast %union.tree_node* %36 to %struct.tree_exp*, !dbg !12581
  %operands75 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp74, i32 0, i32 3, !dbg !12581
  %arrayidx76 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands75, i64 0, i64 0, !dbg !12581
  store %union.tree_node* %35, %union.tree_node** %arrayidx76, align 8, !dbg !12582
  %37 = load %union.tree_node*, %union.tree_node** %pred, align 8, !dbg !12583
  %base77 = bitcast %union.tree_node* %37 to %struct.tree_base*, !dbg !12583
  %38 = bitcast %struct.tree_base* %base77 to i64*, !dbg !12583
  %bf.load78 = load i64, i64* %38, align 8, !dbg !12583
  %bf.clear79 = and i64 %bf.load78, 65535, !dbg !12583
  %bf.cast80 = trunc i64 %bf.clear79 to i32, !dbg !12583
  %idxprom81 = sext i32 %bf.cast80 to i64, !dbg !12583
  %arrayidx82 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom81, !dbg !12583
  %39 = load i32, i32* %arrayidx82, align 4, !dbg !12583
  %cmp83 = icmp uge i32 %39, 4, !dbg !12583
  br i1 %cmp83, label %land.lhs.true85, label %cond.false97, !dbg !12583

land.lhs.true85:                                  ; preds = %cond.end69
  %40 = load %union.tree_node*, %union.tree_node** %pred, align 8, !dbg !12583
  %base86 = bitcast %union.tree_node* %40 to %struct.tree_base*, !dbg !12583
  %41 = bitcast %struct.tree_base* %base86 to i64*, !dbg !12583
  %bf.load87 = load i64, i64* %41, align 8, !dbg !12583
  %bf.clear88 = and i64 %bf.load87, 65535, !dbg !12583
  %bf.cast89 = trunc i64 %bf.clear88 to i32, !dbg !12583
  %idxprom90 = sext i32 %bf.cast89 to i64, !dbg !12583
  %arrayidx91 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom90, !dbg !12583
  %42 = load i32, i32* %arrayidx91, align 4, !dbg !12583
  %cmp92 = icmp ule i32 %42, 10, !dbg !12583
  br i1 %cmp92, label %cond.true94, label %cond.false97, !dbg !12583

cond.true94:                                      ; preds = %land.lhs.true85
  %43 = load %union.tree_node*, %union.tree_node** %pred, align 8, !dbg !12583
  %exp95 = bitcast %union.tree_node* %43 to %struct.tree_exp*, !dbg !12583
  %locus96 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp95, i32 0, i32 1, !dbg !12583
  %44 = load i32, i32* %locus96, align 8, !dbg !12583
  br label %cond.end98, !dbg !12583

cond.false97:                                     ; preds = %land.lhs.true85, %cond.end69
  br label %cond.end98, !dbg !12583

cond.end98:                                       ; preds = %cond.false97, %cond.true94
  %cond99 = phi i32 [ %44, %cond.true94 ], [ 0, %cond.false97 ], !dbg !12583
  %cmp100 = icmp ne i32 %cond99, 0, !dbg !12583
  br i1 %cmp100, label %if.then102, label %if.end, !dbg !12585

if.then102:                                       ; preds = %cond.end98
  %45 = load %union.tree_node*, %union.tree_node** %pred, align 8, !dbg !12586
  %base103 = bitcast %union.tree_node* %45 to %struct.tree_base*, !dbg !12586
  %46 = bitcast %struct.tree_base* %base103 to i64*, !dbg !12586
  %bf.load104 = load i64, i64* %46, align 8, !dbg !12586
  %bf.clear105 = and i64 %bf.load104, 65535, !dbg !12586
  %bf.cast106 = trunc i64 %bf.clear105 to i32, !dbg !12586
  %idxprom107 = sext i32 %bf.cast106 to i64, !dbg !12586
  %arrayidx108 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom107, !dbg !12586
  %47 = load i32, i32* %arrayidx108, align 4, !dbg !12586
  %cmp109 = icmp uge i32 %47, 4, !dbg !12586
  br i1 %cmp109, label %land.lhs.true111, label %cond.false123, !dbg !12586

land.lhs.true111:                                 ; preds = %if.then102
  %48 = load %union.tree_node*, %union.tree_node** %pred, align 8, !dbg !12586
  %base112 = bitcast %union.tree_node* %48 to %struct.tree_base*, !dbg !12586
  %49 = bitcast %struct.tree_base* %base112 to i64*, !dbg !12586
  %bf.load113 = load i64, i64* %49, align 8, !dbg !12586
  %bf.clear114 = and i64 %bf.load113, 65535, !dbg !12586
  %bf.cast115 = trunc i64 %bf.clear114 to i32, !dbg !12586
  %idxprom116 = sext i32 %bf.cast115 to i64, !dbg !12586
  %arrayidx117 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom116, !dbg !12586
  %50 = load i32, i32* %arrayidx117, align 4, !dbg !12586
  %cmp118 = icmp ule i32 %50, 10, !dbg !12586
  br i1 %cmp118, label %cond.true120, label %cond.false123, !dbg !12586

cond.true120:                                     ; preds = %land.lhs.true111
  %51 = load %union.tree_node*, %union.tree_node** %pred, align 8, !dbg !12586
  %exp121 = bitcast %union.tree_node* %51 to %struct.tree_exp*, !dbg !12586
  %locus122 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp121, i32 0, i32 1, !dbg !12586
  %52 = load i32, i32* %locus122, align 8, !dbg !12586
  br label %cond.end124, !dbg !12586

cond.false123:                                    ; preds = %land.lhs.true111, %if.then102
  br label %cond.end124, !dbg !12586

cond.end124:                                      ; preds = %cond.false123, %cond.true120
  %cond125 = phi i32 [ %52, %cond.true120 ], [ 0, %cond.false123 ], !dbg !12586
  %53 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !12586
  %exp126 = bitcast %union.tree_node* %53 to %struct.tree_exp*, !dbg !12586
  %locus127 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp126, i32 0, i32 1, !dbg !12586
  store i32 %cond125, i32* %locus127, align 8, !dbg !12586
  br label %if.end, !dbg !12586

if.end:                                           ; preds = %cond.end124, %cond.end98
  %54 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !12587
  %call = call %union.tree_node* @shortcut_cond_expr(%union.tree_node* %54), !dbg !12588
  store %union.tree_node* %call, %union.tree_node** %then_, align 8, !dbg !12589
  %55 = load %union.tree_node*, %union.tree_node** %then_, align 8, !dbg !12590
  %tobool128 = icmp ne %union.tree_node* %55, null, !dbg !12590
  br i1 %tobool128, label %land.rhs129, label %land.end136, !dbg !12591

land.rhs129:                                      ; preds = %if.end
  %56 = load %union.tree_node*, %union.tree_node** %then_, align 8, !dbg !12592
  %base130 = bitcast %union.tree_node* %56 to %struct.tree_base*, !dbg !12592
  %57 = bitcast %struct.tree_base* %base130 to i64*, !dbg !12592
  %bf.load131 = load i64, i64* %57, align 8, !dbg !12592
  %bf.lshr132 = lshr i64 %bf.load131, 16, !dbg !12592
  %bf.clear133 = and i64 %bf.lshr132, 1, !dbg !12592
  %bf.cast134 = trunc i64 %bf.clear133 to i32, !dbg !12592
  %tobool135 = icmp ne i32 %bf.cast134, 0, !dbg !12591
  br label %land.end136

land.end136:                                      ; preds = %land.rhs129, %if.end
  %58 = phi i1 [ false, %if.end ], [ %tobool135, %land.rhs129 ], !dbg !12593
  %land.ext137 = zext i1 %58 to i32, !dbg !12591
  %conv138 = trunc i32 %land.ext137 to i8, !dbg !12590
  store i8 %conv138, i8* %then_se, align 1, !dbg !12594
  %59 = load %union.tree_node*, %union.tree_node** %pred, align 8, !dbg !12595
  %exp139 = bitcast %union.tree_node* %59 to %struct.tree_exp*, !dbg !12595
  %operands140 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp139, i32 0, i32 3, !dbg !12595
  %arrayidx141 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands140, i64 0, i64 0, !dbg !12595
  %60 = load %union.tree_node*, %union.tree_node** %arrayidx141, align 8, !dbg !12595
  store %union.tree_node* %60, %union.tree_node** %pred, align 8, !dbg !12596
  %61 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !12597
  %62 = load %union.tree_node*, %union.tree_node** %pred, align 8, !dbg !12597
  %63 = load %union.tree_node*, %union.tree_node** %then_, align 8, !dbg !12597
  %call142 = call %union.tree_node* @build3_stat(i32 56, %union.tree_node* %61, %union.tree_node* %62, %union.tree_node* %63, %union.tree_node* null), !dbg !12597
  store %union.tree_node* %call142, %union.tree_node** %expr.addr, align 8, !dbg !12598
  %64 = load i32, i32* %locus, align 4, !dbg !12599
  %65 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !12599
  %exp143 = bitcast %union.tree_node* %65 to %struct.tree_exp*, !dbg !12599
  %locus144 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp143, i32 0, i32 1, !dbg !12599
  store i32 %64, i32* %locus144, align 8, !dbg !12599
  br label %while.cond, !dbg !12570, !llvm.loop !12600

while.end:                                        ; preds = %while.cond
  br label %if.end145, !dbg !12602

if.end145:                                        ; preds = %while.end, %land.end16
  %66 = load i8, i8* %then_se, align 1, !dbg !12603
  %tobool146 = icmp ne i8 %66, 0, !dbg !12603
  br i1 %tobool146, label %if.end286, label %if.then147, !dbg !12605

if.then147:                                       ; preds = %if.end145
  br label %while.cond148, !dbg !12606

while.cond148:                                    ; preds = %land.end276, %if.then147
  %67 = load %union.tree_node*, %union.tree_node** %pred, align 8, !dbg !12608
  %base149 = bitcast %union.tree_node* %67 to %struct.tree_base*, !dbg !12608
  %68 = bitcast %struct.tree_base* %base149 to i64*, !dbg !12608
  %bf.load150 = load i64, i64* %68, align 8, !dbg !12608
  %bf.clear151 = and i64 %bf.load150, 65535, !dbg !12608
  %bf.cast152 = trunc i64 %bf.clear151 to i32, !dbg !12608
  %cmp153 = icmp eq i32 %bf.cast152, 92, !dbg !12609
  br i1 %cmp153, label %while.body155, label %while.end285, !dbg !12606

while.body155:                                    ; preds = %while.cond148
  call void @llvm.dbg.declare(metadata i32* %locus156, metadata !12610, metadata !DIExpression()), !dbg !12612
  %69 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !12613
  %base157 = bitcast %union.tree_node* %69 to %struct.tree_base*, !dbg !12613
  %70 = bitcast %struct.tree_base* %base157 to i64*, !dbg !12613
  %bf.load158 = load i64, i64* %70, align 8, !dbg !12613
  %bf.clear159 = and i64 %bf.load158, 65535, !dbg !12613
  %bf.cast160 = trunc i64 %bf.clear159 to i32, !dbg !12613
  %idxprom161 = sext i32 %bf.cast160 to i64, !dbg !12613
  %arrayidx162 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom161, !dbg !12613
  %71 = load i32, i32* %arrayidx162, align 4, !dbg !12613
  %cmp163 = icmp uge i32 %71, 4, !dbg !12613
  br i1 %cmp163, label %land.lhs.true165, label %cond.false177, !dbg !12613

land.lhs.true165:                                 ; preds = %while.body155
  %72 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !12613
  %base166 = bitcast %union.tree_node* %72 to %struct.tree_base*, !dbg !12613
  %73 = bitcast %struct.tree_base* %base166 to i64*, !dbg !12613
  %bf.load167 = load i64, i64* %73, align 8, !dbg !12613
  %bf.clear168 = and i64 %bf.load167, 65535, !dbg !12613
  %bf.cast169 = trunc i64 %bf.clear168 to i32, !dbg !12613
  %idxprom170 = sext i32 %bf.cast169 to i64, !dbg !12613
  %arrayidx171 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom170, !dbg !12613
  %74 = load i32, i32* %arrayidx171, align 4, !dbg !12613
  %cmp172 = icmp ule i32 %74, 10, !dbg !12613
  br i1 %cmp172, label %cond.true174, label %cond.false177, !dbg !12613

cond.true174:                                     ; preds = %land.lhs.true165
  %75 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !12613
  %exp175 = bitcast %union.tree_node* %75 to %struct.tree_exp*, !dbg !12613
  %locus176 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp175, i32 0, i32 1, !dbg !12613
  %76 = load i32, i32* %locus176, align 8, !dbg !12613
  br label %cond.end178, !dbg !12613

cond.false177:                                    ; preds = %land.lhs.true165, %while.body155
  br label %cond.end178, !dbg !12613

cond.end178:                                      ; preds = %cond.false177, %cond.true174
  %cond179 = phi i32 [ %76, %cond.true174 ], [ 0, %cond.false177 ], !dbg !12613
  %cmp180 = icmp ne i32 %cond179, 0, !dbg !12613
  br i1 %cmp180, label %cond.true182, label %cond.false206, !dbg !12613

cond.true182:                                     ; preds = %cond.end178
  %77 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !12614
  %base183 = bitcast %union.tree_node* %77 to %struct.tree_base*, !dbg !12614
  %78 = bitcast %struct.tree_base* %base183 to i64*, !dbg !12614
  %bf.load184 = load i64, i64* %78, align 8, !dbg !12614
  %bf.clear185 = and i64 %bf.load184, 65535, !dbg !12614
  %bf.cast186 = trunc i64 %bf.clear185 to i32, !dbg !12614
  %idxprom187 = sext i32 %bf.cast186 to i64, !dbg !12614
  %arrayidx188 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom187, !dbg !12614
  %79 = load i32, i32* %arrayidx188, align 4, !dbg !12614
  %cmp189 = icmp uge i32 %79, 4, !dbg !12614
  br i1 %cmp189, label %land.lhs.true191, label %cond.false203, !dbg !12614

land.lhs.true191:                                 ; preds = %cond.true182
  %80 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !12614
  %base192 = bitcast %union.tree_node* %80 to %struct.tree_base*, !dbg !12614
  %81 = bitcast %struct.tree_base* %base192 to i64*, !dbg !12614
  %bf.load193 = load i64, i64* %81, align 8, !dbg !12614
  %bf.clear194 = and i64 %bf.load193, 65535, !dbg !12614
  %bf.cast195 = trunc i64 %bf.clear194 to i32, !dbg !12614
  %idxprom196 = sext i32 %bf.cast195 to i64, !dbg !12614
  %arrayidx197 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom196, !dbg !12614
  %82 = load i32, i32* %arrayidx197, align 4, !dbg !12614
  %cmp198 = icmp ule i32 %82, 10, !dbg !12614
  br i1 %cmp198, label %cond.true200, label %cond.false203, !dbg !12614

cond.true200:                                     ; preds = %land.lhs.true191
  %83 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !12614
  %exp201 = bitcast %union.tree_node* %83 to %struct.tree_exp*, !dbg !12614
  %locus202 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp201, i32 0, i32 1, !dbg !12614
  %84 = load i32, i32* %locus202, align 8, !dbg !12614
  br label %cond.end204, !dbg !12614

cond.false203:                                    ; preds = %land.lhs.true191, %cond.true182
  br label %cond.end204, !dbg !12614

cond.end204:                                      ; preds = %cond.false203, %cond.true200
  %cond205 = phi i32 [ %84, %cond.true200 ], [ 0, %cond.false203 ], !dbg !12614
  br label %cond.end207, !dbg !12613

cond.false206:                                    ; preds = %cond.end178
  %85 = load i32, i32* @input_location, align 4, !dbg !12615
  br label %cond.end207, !dbg !12613

cond.end207:                                      ; preds = %cond.false206, %cond.end204
  %cond208 = phi i32 [ %cond205, %cond.end204 ], [ %85, %cond.false206 ], !dbg !12613
  store i32 %cond208, i32* %locus156, align 4, !dbg !12612
  %86 = load %union.tree_node*, %union.tree_node** %pred, align 8, !dbg !12616
  %exp209 = bitcast %union.tree_node* %86 to %struct.tree_exp*, !dbg !12616
  %operands210 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp209, i32 0, i32 3, !dbg !12616
  %arrayidx211 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands210, i64 0, i64 1, !dbg !12616
  %87 = load %union.tree_node*, %union.tree_node** %arrayidx211, align 8, !dbg !12616
  %88 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !12617
  %exp212 = bitcast %union.tree_node* %88 to %struct.tree_exp*, !dbg !12617
  %operands213 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp212, i32 0, i32 3, !dbg !12617
  %arrayidx214 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands213, i64 0, i64 0, !dbg !12617
  store %union.tree_node* %87, %union.tree_node** %arrayidx214, align 8, !dbg !12618
  %89 = load %union.tree_node*, %union.tree_node** %pred, align 8, !dbg !12619
  %base215 = bitcast %union.tree_node* %89 to %struct.tree_base*, !dbg !12619
  %90 = bitcast %struct.tree_base* %base215 to i64*, !dbg !12619
  %bf.load216 = load i64, i64* %90, align 8, !dbg !12619
  %bf.clear217 = and i64 %bf.load216, 65535, !dbg !12619
  %bf.cast218 = trunc i64 %bf.clear217 to i32, !dbg !12619
  %idxprom219 = sext i32 %bf.cast218 to i64, !dbg !12619
  %arrayidx220 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom219, !dbg !12619
  %91 = load i32, i32* %arrayidx220, align 4, !dbg !12619
  %cmp221 = icmp uge i32 %91, 4, !dbg !12619
  br i1 %cmp221, label %land.lhs.true223, label %cond.false235, !dbg !12619

land.lhs.true223:                                 ; preds = %cond.end207
  %92 = load %union.tree_node*, %union.tree_node** %pred, align 8, !dbg !12619
  %base224 = bitcast %union.tree_node* %92 to %struct.tree_base*, !dbg !12619
  %93 = bitcast %struct.tree_base* %base224 to i64*, !dbg !12619
  %bf.load225 = load i64, i64* %93, align 8, !dbg !12619
  %bf.clear226 = and i64 %bf.load225, 65535, !dbg !12619
  %bf.cast227 = trunc i64 %bf.clear226 to i32, !dbg !12619
  %idxprom228 = sext i32 %bf.cast227 to i64, !dbg !12619
  %arrayidx229 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom228, !dbg !12619
  %94 = load i32, i32* %arrayidx229, align 4, !dbg !12619
  %cmp230 = icmp ule i32 %94, 10, !dbg !12619
  br i1 %cmp230, label %cond.true232, label %cond.false235, !dbg !12619

cond.true232:                                     ; preds = %land.lhs.true223
  %95 = load %union.tree_node*, %union.tree_node** %pred, align 8, !dbg !12619
  %exp233 = bitcast %union.tree_node* %95 to %struct.tree_exp*, !dbg !12619
  %locus234 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp233, i32 0, i32 1, !dbg !12619
  %96 = load i32, i32* %locus234, align 8, !dbg !12619
  br label %cond.end236, !dbg !12619

cond.false235:                                    ; preds = %land.lhs.true223, %cond.end207
  br label %cond.end236, !dbg !12619

cond.end236:                                      ; preds = %cond.false235, %cond.true232
  %cond237 = phi i32 [ %96, %cond.true232 ], [ 0, %cond.false235 ], !dbg !12619
  %cmp238 = icmp ne i32 %cond237, 0, !dbg !12619
  br i1 %cmp238, label %if.then240, label %if.end266, !dbg !12621

if.then240:                                       ; preds = %cond.end236
  %97 = load %union.tree_node*, %union.tree_node** %pred, align 8, !dbg !12622
  %base241 = bitcast %union.tree_node* %97 to %struct.tree_base*, !dbg !12622
  %98 = bitcast %struct.tree_base* %base241 to i64*, !dbg !12622
  %bf.load242 = load i64, i64* %98, align 8, !dbg !12622
  %bf.clear243 = and i64 %bf.load242, 65535, !dbg !12622
  %bf.cast244 = trunc i64 %bf.clear243 to i32, !dbg !12622
  %idxprom245 = sext i32 %bf.cast244 to i64, !dbg !12622
  %arrayidx246 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom245, !dbg !12622
  %99 = load i32, i32* %arrayidx246, align 4, !dbg !12622
  %cmp247 = icmp uge i32 %99, 4, !dbg !12622
  br i1 %cmp247, label %land.lhs.true249, label %cond.false261, !dbg !12622

land.lhs.true249:                                 ; preds = %if.then240
  %100 = load %union.tree_node*, %union.tree_node** %pred, align 8, !dbg !12622
  %base250 = bitcast %union.tree_node* %100 to %struct.tree_base*, !dbg !12622
  %101 = bitcast %struct.tree_base* %base250 to i64*, !dbg !12622
  %bf.load251 = load i64, i64* %101, align 8, !dbg !12622
  %bf.clear252 = and i64 %bf.load251, 65535, !dbg !12622
  %bf.cast253 = trunc i64 %bf.clear252 to i32, !dbg !12622
  %idxprom254 = sext i32 %bf.cast253 to i64, !dbg !12622
  %arrayidx255 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom254, !dbg !12622
  %102 = load i32, i32* %arrayidx255, align 4, !dbg !12622
  %cmp256 = icmp ule i32 %102, 10, !dbg !12622
  br i1 %cmp256, label %cond.true258, label %cond.false261, !dbg !12622

cond.true258:                                     ; preds = %land.lhs.true249
  %103 = load %union.tree_node*, %union.tree_node** %pred, align 8, !dbg !12622
  %exp259 = bitcast %union.tree_node* %103 to %struct.tree_exp*, !dbg !12622
  %locus260 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp259, i32 0, i32 1, !dbg !12622
  %104 = load i32, i32* %locus260, align 8, !dbg !12622
  br label %cond.end262, !dbg !12622

cond.false261:                                    ; preds = %land.lhs.true249, %if.then240
  br label %cond.end262, !dbg !12622

cond.end262:                                      ; preds = %cond.false261, %cond.true258
  %cond263 = phi i32 [ %104, %cond.true258 ], [ 0, %cond.false261 ], !dbg !12622
  %105 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !12622
  %exp264 = bitcast %union.tree_node* %105 to %struct.tree_exp*, !dbg !12622
  %locus265 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp264, i32 0, i32 1, !dbg !12622
  store i32 %cond263, i32* %locus265, align 8, !dbg !12622
  br label %if.end266, !dbg !12622

if.end266:                                        ; preds = %cond.end262, %cond.end236
  %106 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !12623
  %call267 = call %union.tree_node* @shortcut_cond_expr(%union.tree_node* %106), !dbg !12624
  store %union.tree_node* %call267, %union.tree_node** %else_, align 8, !dbg !12625
  %107 = load %union.tree_node*, %union.tree_node** %else_, align 8, !dbg !12626
  %tobool268 = icmp ne %union.tree_node* %107, null, !dbg !12626
  br i1 %tobool268, label %land.rhs269, label %land.end276, !dbg !12627

land.rhs269:                                      ; preds = %if.end266
  %108 = load %union.tree_node*, %union.tree_node** %else_, align 8, !dbg !12628
  %base270 = bitcast %union.tree_node* %108 to %struct.tree_base*, !dbg !12628
  %109 = bitcast %struct.tree_base* %base270 to i64*, !dbg !12628
  %bf.load271 = load i64, i64* %109, align 8, !dbg !12628
  %bf.lshr272 = lshr i64 %bf.load271, 16, !dbg !12628
  %bf.clear273 = and i64 %bf.lshr272, 1, !dbg !12628
  %bf.cast274 = trunc i64 %bf.clear273 to i32, !dbg !12628
  %tobool275 = icmp ne i32 %bf.cast274, 0, !dbg !12627
  br label %land.end276

land.end276:                                      ; preds = %land.rhs269, %if.end266
  %110 = phi i1 [ false, %if.end266 ], [ %tobool275, %land.rhs269 ], !dbg !12629
  %land.ext277 = zext i1 %110 to i32, !dbg !12627
  %conv278 = trunc i32 %land.ext277 to i8, !dbg !12626
  store i8 %conv278, i8* %else_se, align 1, !dbg !12630
  %111 = load %union.tree_node*, %union.tree_node** %pred, align 8, !dbg !12631
  %exp279 = bitcast %union.tree_node* %111 to %struct.tree_exp*, !dbg !12631
  %operands280 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp279, i32 0, i32 3, !dbg !12631
  %arrayidx281 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands280, i64 0, i64 0, !dbg !12631
  %112 = load %union.tree_node*, %union.tree_node** %arrayidx281, align 8, !dbg !12631
  store %union.tree_node* %112, %union.tree_node** %pred, align 8, !dbg !12632
  %113 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !12633
  %114 = load %union.tree_node*, %union.tree_node** %pred, align 8, !dbg !12633
  %115 = load %union.tree_node*, %union.tree_node** %else_, align 8, !dbg !12633
  %call282 = call %union.tree_node* @build3_stat(i32 56, %union.tree_node* %113, %union.tree_node* %114, %union.tree_node* null, %union.tree_node* %115), !dbg !12633
  store %union.tree_node* %call282, %union.tree_node** %expr.addr, align 8, !dbg !12634
  %116 = load i32, i32* %locus156, align 4, !dbg !12635
  %117 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !12635
  %exp283 = bitcast %union.tree_node* %117 to %struct.tree_exp*, !dbg !12635
  %locus284 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp283, i32 0, i32 1, !dbg !12635
  store i32 %116, i32* %locus284, align 8, !dbg !12635
  br label %while.cond148, !dbg !12606, !llvm.loop !12636

while.end285:                                     ; preds = %while.cond148
  br label %if.end286, !dbg !12638

if.end286:                                        ; preds = %while.end285, %if.end145
  %118 = load %union.tree_node*, %union.tree_node** %pred, align 8, !dbg !12639
  %base287 = bitcast %union.tree_node* %118 to %struct.tree_base*, !dbg !12639
  %119 = bitcast %struct.tree_base* %base287 to i64*, !dbg !12639
  %bf.load288 = load i64, i64* %119, align 8, !dbg !12639
  %bf.clear289 = and i64 %bf.load288, 65535, !dbg !12639
  %bf.cast290 = trunc i64 %bf.clear289 to i32, !dbg !12639
  %cmp291 = icmp ne i32 %bf.cast290, 91, !dbg !12641
  br i1 %cmp291, label %land.lhs.true293, label %if.end301, !dbg !12642

land.lhs.true293:                                 ; preds = %if.end286
  %120 = load %union.tree_node*, %union.tree_node** %pred, align 8, !dbg !12643
  %base294 = bitcast %union.tree_node* %120 to %struct.tree_base*, !dbg !12643
  %121 = bitcast %struct.tree_base* %base294 to i64*, !dbg !12643
  %bf.load295 = load i64, i64* %121, align 8, !dbg !12643
  %bf.clear296 = and i64 %bf.load295, 65535, !dbg !12643
  %bf.cast297 = trunc i64 %bf.clear296 to i32, !dbg !12643
  %cmp298 = icmp ne i32 %bf.cast297, 92, !dbg !12644
  br i1 %cmp298, label %if.then300, label %if.end301, !dbg !12645

if.then300:                                       ; preds = %land.lhs.true293
  %122 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !12646
  store %union.tree_node* %122, %union.tree_node** %retval, align 8, !dbg !12647
  br label %return, !dbg !12647

if.end301:                                        ; preds = %land.lhs.true293, %if.end286
  store %union.tree_node* null, %union.tree_node** %end_label, align 8, !dbg !12648
  store %union.tree_node* null, %union.tree_node** %false_label, align 8, !dbg !12649
  store %union.tree_node* null, %union.tree_node** %true_label, align 8, !dbg !12650
  %123 = load %union.tree_node*, %union.tree_node** %then_, align 8, !dbg !12651
  %tobool302 = icmp ne %union.tree_node* %123, null, !dbg !12651
  br i1 %tobool302, label %land.lhs.true303, label %if.end324, !dbg !12653

land.lhs.true303:                                 ; preds = %if.end301
  %124 = load %union.tree_node*, %union.tree_node** %then_, align 8, !dbg !12654
  %base304 = bitcast %union.tree_node* %124 to %struct.tree_base*, !dbg !12654
  %125 = bitcast %struct.tree_base* %base304 to i64*, !dbg !12654
  %bf.load305 = load i64, i64* %125, align 8, !dbg !12654
  %bf.clear306 = and i64 %bf.load305, 65535, !dbg !12654
  %bf.cast307 = trunc i64 %bf.clear306 to i32, !dbg !12654
  %cmp308 = icmp eq i32 %bf.cast307, 134, !dbg !12655
  br i1 %cmp308, label %land.lhs.true310, label %if.end324, !dbg !12656

land.lhs.true310:                                 ; preds = %land.lhs.true303
  %126 = load %union.tree_node*, %union.tree_node** %then_, align 8, !dbg !12657
  %exp311 = bitcast %union.tree_node* %126 to %struct.tree_exp*, !dbg !12657
  %operands312 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp311, i32 0, i32 3, !dbg !12657
  %arrayidx313 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands312, i64 0, i64 0, !dbg !12657
  %127 = load %union.tree_node*, %union.tree_node** %arrayidx313, align 8, !dbg !12657
  %base314 = bitcast %union.tree_node* %127 to %struct.tree_base*, !dbg !12657
  %128 = bitcast %struct.tree_base* %base314 to i64*, !dbg !12657
  %bf.load315 = load i64, i64* %128, align 8, !dbg !12657
  %bf.clear316 = and i64 %bf.load315, 65535, !dbg !12657
  %bf.cast317 = trunc i64 %bf.clear316 to i32, !dbg !12657
  %cmp318 = icmp eq i32 %bf.cast317, 30, !dbg !12658
  br i1 %cmp318, label %if.then320, label %if.end324, !dbg !12659

if.then320:                                       ; preds = %land.lhs.true310
  %129 = load %union.tree_node*, %union.tree_node** %then_, align 8, !dbg !12660
  %exp321 = bitcast %union.tree_node* %129 to %struct.tree_exp*, !dbg !12660
  %operands322 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp321, i32 0, i32 3, !dbg !12660
  %arrayidx323 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands322, i64 0, i64 0, !dbg !12660
  %130 = load %union.tree_node*, %union.tree_node** %arrayidx323, align 8, !dbg !12660
  store %union.tree_node* %130, %union.tree_node** %true_label, align 8, !dbg !12662
  store %union.tree_node* null, %union.tree_node** %then_, align 8, !dbg !12663
  store i8 0, i8* %then_se, align 1, !dbg !12664
  br label %if.end324, !dbg !12665

if.end324:                                        ; preds = %if.then320, %land.lhs.true310, %land.lhs.true303, %if.end301
  %131 = load %union.tree_node*, %union.tree_node** %else_, align 8, !dbg !12666
  %tobool325 = icmp ne %union.tree_node* %131, null, !dbg !12666
  br i1 %tobool325, label %land.lhs.true326, label %if.end347, !dbg !12668

land.lhs.true326:                                 ; preds = %if.end324
  %132 = load %union.tree_node*, %union.tree_node** %else_, align 8, !dbg !12669
  %base327 = bitcast %union.tree_node* %132 to %struct.tree_base*, !dbg !12669
  %133 = bitcast %struct.tree_base* %base327 to i64*, !dbg !12669
  %bf.load328 = load i64, i64* %133, align 8, !dbg !12669
  %bf.clear329 = and i64 %bf.load328, 65535, !dbg !12669
  %bf.cast330 = trunc i64 %bf.clear329 to i32, !dbg !12669
  %cmp331 = icmp eq i32 %bf.cast330, 134, !dbg !12670
  br i1 %cmp331, label %land.lhs.true333, label %if.end347, !dbg !12671

land.lhs.true333:                                 ; preds = %land.lhs.true326
  %134 = load %union.tree_node*, %union.tree_node** %else_, align 8, !dbg !12672
  %exp334 = bitcast %union.tree_node* %134 to %struct.tree_exp*, !dbg !12672
  %operands335 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp334, i32 0, i32 3, !dbg !12672
  %arrayidx336 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands335, i64 0, i64 0, !dbg !12672
  %135 = load %union.tree_node*, %union.tree_node** %arrayidx336, align 8, !dbg !12672
  %base337 = bitcast %union.tree_node* %135 to %struct.tree_base*, !dbg !12672
  %136 = bitcast %struct.tree_base* %base337 to i64*, !dbg !12672
  %bf.load338 = load i64, i64* %136, align 8, !dbg !12672
  %bf.clear339 = and i64 %bf.load338, 65535, !dbg !12672
  %bf.cast340 = trunc i64 %bf.clear339 to i32, !dbg !12672
  %cmp341 = icmp eq i32 %bf.cast340, 30, !dbg !12673
  br i1 %cmp341, label %if.then343, label %if.end347, !dbg !12674

if.then343:                                       ; preds = %land.lhs.true333
  %137 = load %union.tree_node*, %union.tree_node** %else_, align 8, !dbg !12675
  %exp344 = bitcast %union.tree_node* %137 to %struct.tree_exp*, !dbg !12675
  %operands345 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp344, i32 0, i32 3, !dbg !12675
  %arrayidx346 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands345, i64 0, i64 0, !dbg !12675
  %138 = load %union.tree_node*, %union.tree_node** %arrayidx346, align 8, !dbg !12675
  store %union.tree_node* %138, %union.tree_node** %false_label, align 8, !dbg !12677
  store %union.tree_node* null, %union.tree_node** %else_, align 8, !dbg !12678
  store i8 0, i8* %else_se, align 1, !dbg !12679
  br label %if.end347, !dbg !12680

if.end347:                                        ; preds = %if.then343, %land.lhs.true333, %land.lhs.true326, %if.end324
  %139 = load %union.tree_node*, %union.tree_node** %true_label, align 8, !dbg !12681
  %tobool348 = icmp ne %union.tree_node* %139, null, !dbg !12681
  br i1 %tobool348, label %if.then349, label %if.else, !dbg !12683

if.then349:                                       ; preds = %if.end347
  store %union.tree_node** %true_label, %union.tree_node*** %true_label_p, align 8, !dbg !12684
  br label %if.end350, !dbg !12685

if.else:                                          ; preds = %if.end347
  store %union.tree_node** null, %union.tree_node*** %true_label_p, align 8, !dbg !12686
  br label %if.end350

if.end350:                                        ; preds = %if.else, %if.then349
  %140 = load %union.tree_node*, %union.tree_node** %false_label, align 8, !dbg !12687
  %tobool351 = icmp ne %union.tree_node* %140, null, !dbg !12687
  br i1 %tobool351, label %if.then354, label %lor.lhs.false, !dbg !12689

lor.lhs.false:                                    ; preds = %if.end350
  %141 = load i8, i8* %else_se, align 1, !dbg !12690
  %conv352 = zext i8 %141 to i32, !dbg !12690
  %tobool353 = icmp ne i32 %conv352, 0, !dbg !12690
  br i1 %tobool353, label %if.then354, label %if.else355, !dbg !12691

if.then354:                                       ; preds = %lor.lhs.false, %if.end350
  store %union.tree_node** %false_label, %union.tree_node*** %false_label_p, align 8, !dbg !12692
  br label %if.end356, !dbg !12693

if.else355:                                       ; preds = %lor.lhs.false
  store %union.tree_node** null, %union.tree_node*** %false_label_p, align 8, !dbg !12694
  br label %if.end356

if.end356:                                        ; preds = %if.else355, %if.then354
  %142 = load i8, i8* %then_se, align 1, !dbg !12695
  %tobool357 = icmp ne i8 %142, 0, !dbg !12695
  br i1 %tobool357, label %if.end414, label %land.lhs.true358, !dbg !12697

land.lhs.true358:                                 ; preds = %if.end356
  %143 = load i8, i8* %else_se, align 1, !dbg !12698
  %tobool359 = icmp ne i8 %143, 0, !dbg !12698
  br i1 %tobool359, label %if.end414, label %if.then360, !dbg !12699

if.then360:                                       ; preds = %land.lhs.true358
  %144 = load %union.tree_node*, %union.tree_node** %pred, align 8, !dbg !12700
  %145 = load %union.tree_node**, %union.tree_node*** %true_label_p, align 8, !dbg !12701
  %146 = load %union.tree_node**, %union.tree_node*** %false_label_p, align 8, !dbg !12702
  %147 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !12703
  %base361 = bitcast %union.tree_node* %147 to %struct.tree_base*, !dbg !12703
  %148 = bitcast %struct.tree_base* %base361 to i64*, !dbg !12703
  %bf.load362 = load i64, i64* %148, align 8, !dbg !12703
  %bf.clear363 = and i64 %bf.load362, 65535, !dbg !12703
  %bf.cast364 = trunc i64 %bf.clear363 to i32, !dbg !12703
  %idxprom365 = sext i32 %bf.cast364 to i64, !dbg !12703
  %arrayidx366 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom365, !dbg !12703
  %149 = load i32, i32* %arrayidx366, align 4, !dbg !12703
  %cmp367 = icmp uge i32 %149, 4, !dbg !12703
  br i1 %cmp367, label %land.lhs.true369, label %cond.false381, !dbg !12703

land.lhs.true369:                                 ; preds = %if.then360
  %150 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !12703
  %base370 = bitcast %union.tree_node* %150 to %struct.tree_base*, !dbg !12703
  %151 = bitcast %struct.tree_base* %base370 to i64*, !dbg !12703
  %bf.load371 = load i64, i64* %151, align 8, !dbg !12703
  %bf.clear372 = and i64 %bf.load371, 65535, !dbg !12703
  %bf.cast373 = trunc i64 %bf.clear372 to i32, !dbg !12703
  %idxprom374 = sext i32 %bf.cast373 to i64, !dbg !12703
  %arrayidx375 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom374, !dbg !12703
  %152 = load i32, i32* %arrayidx375, align 4, !dbg !12703
  %cmp376 = icmp ule i32 %152, 10, !dbg !12703
  br i1 %cmp376, label %cond.true378, label %cond.false381, !dbg !12703

cond.true378:                                     ; preds = %land.lhs.true369
  %153 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !12703
  %exp379 = bitcast %union.tree_node* %153 to %struct.tree_exp*, !dbg !12703
  %locus380 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp379, i32 0, i32 1, !dbg !12703
  %154 = load i32, i32* %locus380, align 8, !dbg !12703
  br label %cond.end382, !dbg !12703

cond.false381:                                    ; preds = %land.lhs.true369, %if.then360
  br label %cond.end382, !dbg !12703

cond.end382:                                      ; preds = %cond.false381, %cond.true378
  %cond383 = phi i32 [ %154, %cond.true378 ], [ 0, %cond.false381 ], !dbg !12703
  %cmp384 = icmp ne i32 %cond383, 0, !dbg !12703
  br i1 %cmp384, label %cond.true386, label %cond.false410, !dbg !12703

cond.true386:                                     ; preds = %cond.end382
  %155 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !12704
  %base387 = bitcast %union.tree_node* %155 to %struct.tree_base*, !dbg !12704
  %156 = bitcast %struct.tree_base* %base387 to i64*, !dbg !12704
  %bf.load388 = load i64, i64* %156, align 8, !dbg !12704
  %bf.clear389 = and i64 %bf.load388, 65535, !dbg !12704
  %bf.cast390 = trunc i64 %bf.clear389 to i32, !dbg !12704
  %idxprom391 = sext i32 %bf.cast390 to i64, !dbg !12704
  %arrayidx392 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom391, !dbg !12704
  %157 = load i32, i32* %arrayidx392, align 4, !dbg !12704
  %cmp393 = icmp uge i32 %157, 4, !dbg !12704
  br i1 %cmp393, label %land.lhs.true395, label %cond.false407, !dbg !12704

land.lhs.true395:                                 ; preds = %cond.true386
  %158 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !12704
  %base396 = bitcast %union.tree_node* %158 to %struct.tree_base*, !dbg !12704
  %159 = bitcast %struct.tree_base* %base396 to i64*, !dbg !12704
  %bf.load397 = load i64, i64* %159, align 8, !dbg !12704
  %bf.clear398 = and i64 %bf.load397, 65535, !dbg !12704
  %bf.cast399 = trunc i64 %bf.clear398 to i32, !dbg !12704
  %idxprom400 = sext i32 %bf.cast399 to i64, !dbg !12704
  %arrayidx401 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom400, !dbg !12704
  %160 = load i32, i32* %arrayidx401, align 4, !dbg !12704
  %cmp402 = icmp ule i32 %160, 10, !dbg !12704
  br i1 %cmp402, label %cond.true404, label %cond.false407, !dbg !12704

cond.true404:                                     ; preds = %land.lhs.true395
  %161 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !12704
  %exp405 = bitcast %union.tree_node* %161 to %struct.tree_exp*, !dbg !12704
  %locus406 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp405, i32 0, i32 1, !dbg !12704
  %162 = load i32, i32* %locus406, align 8, !dbg !12704
  br label %cond.end408, !dbg !12704

cond.false407:                                    ; preds = %land.lhs.true395, %cond.true386
  br label %cond.end408, !dbg !12704

cond.end408:                                      ; preds = %cond.false407, %cond.true404
  %cond409 = phi i32 [ %162, %cond.true404 ], [ 0, %cond.false407 ], !dbg !12704
  br label %cond.end411, !dbg !12703

cond.false410:                                    ; preds = %cond.end382
  %163 = load i32, i32* @input_location, align 4, !dbg !12705
  br label %cond.end411, !dbg !12703

cond.end411:                                      ; preds = %cond.false410, %cond.end408
  %cond412 = phi i32 [ %cond409, %cond.end408 ], [ %163, %cond.false410 ], !dbg !12703
  %call413 = call %union.tree_node* @shortcut_cond_r(%union.tree_node* %144, %union.tree_node** %145, %union.tree_node** %146, i32 %cond412), !dbg !12706
  store %union.tree_node* %call413, %union.tree_node** %retval, align 8, !dbg !12707
  br label %return, !dbg !12707

if.end414:                                        ; preds = %land.lhs.true358, %if.end356
  %164 = load i8, i8* %else_se, align 1, !dbg !12708
  %tobool415 = icmp ne i8 %164, 0, !dbg !12708
  br i1 %tobool415, label %if.then416, label %if.else418, !dbg !12710

if.then416:                                       ; preds = %if.end414
  %165 = load %union.tree_node*, %union.tree_node** %else_, align 8, !dbg !12711
  %call417 = call %union.tree_node* @expr_last(%union.tree_node* %165), !dbg !12712
  store %union.tree_node* %call417, %union.tree_node** %t, align 8, !dbg !12713
  br label %if.end424, !dbg !12714

if.else418:                                       ; preds = %if.end414
  %166 = load i8, i8* %then_se, align 1, !dbg !12715
  %tobool419 = icmp ne i8 %166, 0, !dbg !12715
  br i1 %tobool419, label %if.then420, label %if.else422, !dbg !12717

if.then420:                                       ; preds = %if.else418
  %167 = load %union.tree_node*, %union.tree_node** %then_, align 8, !dbg !12718
  %call421 = call %union.tree_node* @expr_last(%union.tree_node* %167), !dbg !12719
  store %union.tree_node* %call421, %union.tree_node** %t, align 8, !dbg !12720
  br label %if.end423, !dbg !12721

if.else422:                                       ; preds = %if.else418
  store %union.tree_node* null, %union.tree_node** %t, align 8, !dbg !12722
  br label %if.end423

if.end423:                                        ; preds = %if.else422, %if.then420
  br label %if.end424

if.end424:                                        ; preds = %if.end423, %if.then416
  %168 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !12723
  %tobool425 = icmp ne %union.tree_node* %168, null, !dbg !12723
  br i1 %tobool425, label %land.lhs.true426, label %if.end437, !dbg !12725

land.lhs.true426:                                 ; preds = %if.end424
  %169 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !12726
  %base427 = bitcast %union.tree_node* %169 to %struct.tree_base*, !dbg !12726
  %170 = bitcast %struct.tree_base* %base427 to i64*, !dbg !12726
  %bf.load428 = load i64, i64* %170, align 8, !dbg !12726
  %bf.clear429 = and i64 %bf.load428, 65535, !dbg !12726
  %bf.cast430 = trunc i64 %bf.clear429 to i32, !dbg !12726
  %cmp431 = icmp eq i32 %bf.cast430, 133, !dbg !12727
  br i1 %cmp431, label %if.then433, label %if.end437, !dbg !12728

if.then433:                                       ; preds = %land.lhs.true426
  %171 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !12729
  %exp434 = bitcast %union.tree_node* %171 to %struct.tree_exp*, !dbg !12729
  %operands435 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp434, i32 0, i32 3, !dbg !12729
  %arrayidx436 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands435, i64 0, i64 0, !dbg !12729
  %172 = load %union.tree_node*, %union.tree_node** %arrayidx436, align 8, !dbg !12729
  store %union.tree_node* %172, %union.tree_node** %end_label, align 8, !dbg !12730
  br label %if.end437, !dbg !12731

if.end437:                                        ; preds = %if.then433, %land.lhs.true426, %if.end424
  %173 = load %union.tree_node**, %union.tree_node*** %false_label_p, align 8, !dbg !12732
  %tobool438 = icmp ne %union.tree_node** %173, null, !dbg !12732
  br i1 %tobool438, label %if.end440, label %if.then439, !dbg !12734

if.then439:                                       ; preds = %if.end437
  store %union.tree_node** %end_label, %union.tree_node*** %false_label_p, align 8, !dbg !12735
  br label %if.end440, !dbg !12736

if.end440:                                        ; preds = %if.then439, %if.end437
  %174 = load %union.tree_node*, %union.tree_node** %end_label, align 8, !dbg !12737
  %cmp441 = icmp eq %union.tree_node* %174, null, !dbg !12738
  %conv442 = zext i1 %cmp441 to i32, !dbg !12738
  %conv443 = trunc i32 %conv442 to i8, !dbg !12739
  store i8 %conv443, i8* %emit_end, align 1, !dbg !12740
  %175 = load %union.tree_node*, %union.tree_node** %false_label, align 8, !dbg !12741
  %cmp444 = icmp eq %union.tree_node* %175, null, !dbg !12742
  %conv445 = zext i1 %cmp444 to i32, !dbg !12742
  %conv446 = trunc i32 %conv445 to i8, !dbg !12743
  store i8 %conv446, i8* %emit_false, align 1, !dbg !12744
  %176 = load %union.tree_node*, %union.tree_node** %then_, align 8, !dbg !12745
  %call447 = call zeroext i8 @block_may_fallthru(%union.tree_node* %176), !dbg !12746
  store i8 %call447, i8* %jump_over_else, align 1, !dbg !12747
  %177 = load %union.tree_node*, %union.tree_node** %pred, align 8, !dbg !12748
  %178 = load %union.tree_node**, %union.tree_node*** %true_label_p, align 8, !dbg !12749
  %179 = load %union.tree_node**, %union.tree_node*** %false_label_p, align 8, !dbg !12750
  %180 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !12751
  %base448 = bitcast %union.tree_node* %180 to %struct.tree_base*, !dbg !12751
  %181 = bitcast %struct.tree_base* %base448 to i64*, !dbg !12751
  %bf.load449 = load i64, i64* %181, align 8, !dbg !12751
  %bf.clear450 = and i64 %bf.load449, 65535, !dbg !12751
  %bf.cast451 = trunc i64 %bf.clear450 to i32, !dbg !12751
  %idxprom452 = sext i32 %bf.cast451 to i64, !dbg !12751
  %arrayidx453 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom452, !dbg !12751
  %182 = load i32, i32* %arrayidx453, align 4, !dbg !12751
  %cmp454 = icmp uge i32 %182, 4, !dbg !12751
  br i1 %cmp454, label %land.lhs.true456, label %cond.false468, !dbg !12751

land.lhs.true456:                                 ; preds = %if.end440
  %183 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !12751
  %base457 = bitcast %union.tree_node* %183 to %struct.tree_base*, !dbg !12751
  %184 = bitcast %struct.tree_base* %base457 to i64*, !dbg !12751
  %bf.load458 = load i64, i64* %184, align 8, !dbg !12751
  %bf.clear459 = and i64 %bf.load458, 65535, !dbg !12751
  %bf.cast460 = trunc i64 %bf.clear459 to i32, !dbg !12751
  %idxprom461 = sext i32 %bf.cast460 to i64, !dbg !12751
  %arrayidx462 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom461, !dbg !12751
  %185 = load i32, i32* %arrayidx462, align 4, !dbg !12751
  %cmp463 = icmp ule i32 %185, 10, !dbg !12751
  br i1 %cmp463, label %cond.true465, label %cond.false468, !dbg !12751

cond.true465:                                     ; preds = %land.lhs.true456
  %186 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !12751
  %exp466 = bitcast %union.tree_node* %186 to %struct.tree_exp*, !dbg !12751
  %locus467 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp466, i32 0, i32 1, !dbg !12751
  %187 = load i32, i32* %locus467, align 8, !dbg !12751
  br label %cond.end469, !dbg !12751

cond.false468:                                    ; preds = %land.lhs.true456, %if.end440
  br label %cond.end469, !dbg !12751

cond.end469:                                      ; preds = %cond.false468, %cond.true465
  %cond470 = phi i32 [ %187, %cond.true465 ], [ 0, %cond.false468 ], !dbg !12751
  %cmp471 = icmp ne i32 %cond470, 0, !dbg !12751
  br i1 %cmp471, label %cond.true473, label %cond.false497, !dbg !12751

cond.true473:                                     ; preds = %cond.end469
  %188 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !12752
  %base474 = bitcast %union.tree_node* %188 to %struct.tree_base*, !dbg !12752
  %189 = bitcast %struct.tree_base* %base474 to i64*, !dbg !12752
  %bf.load475 = load i64, i64* %189, align 8, !dbg !12752
  %bf.clear476 = and i64 %bf.load475, 65535, !dbg !12752
  %bf.cast477 = trunc i64 %bf.clear476 to i32, !dbg !12752
  %idxprom478 = sext i32 %bf.cast477 to i64, !dbg !12752
  %arrayidx479 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom478, !dbg !12752
  %190 = load i32, i32* %arrayidx479, align 4, !dbg !12752
  %cmp480 = icmp uge i32 %190, 4, !dbg !12752
  br i1 %cmp480, label %land.lhs.true482, label %cond.false494, !dbg !12752

land.lhs.true482:                                 ; preds = %cond.true473
  %191 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !12752
  %base483 = bitcast %union.tree_node* %191 to %struct.tree_base*, !dbg !12752
  %192 = bitcast %struct.tree_base* %base483 to i64*, !dbg !12752
  %bf.load484 = load i64, i64* %192, align 8, !dbg !12752
  %bf.clear485 = and i64 %bf.load484, 65535, !dbg !12752
  %bf.cast486 = trunc i64 %bf.clear485 to i32, !dbg !12752
  %idxprom487 = sext i32 %bf.cast486 to i64, !dbg !12752
  %arrayidx488 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom487, !dbg !12752
  %193 = load i32, i32* %arrayidx488, align 4, !dbg !12752
  %cmp489 = icmp ule i32 %193, 10, !dbg !12752
  br i1 %cmp489, label %cond.true491, label %cond.false494, !dbg !12752

cond.true491:                                     ; preds = %land.lhs.true482
  %194 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !12752
  %exp492 = bitcast %union.tree_node* %194 to %struct.tree_exp*, !dbg !12752
  %locus493 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp492, i32 0, i32 1, !dbg !12752
  %195 = load i32, i32* %locus493, align 8, !dbg !12752
  br label %cond.end495, !dbg !12752

cond.false494:                                    ; preds = %land.lhs.true482, %cond.true473
  br label %cond.end495, !dbg !12752

cond.end495:                                      ; preds = %cond.false494, %cond.true491
  %cond496 = phi i32 [ %195, %cond.true491 ], [ 0, %cond.false494 ], !dbg !12752
  br label %cond.end498, !dbg !12751

cond.false497:                                    ; preds = %cond.end469
  %196 = load i32, i32* @input_location, align 4, !dbg !12753
  br label %cond.end498, !dbg !12751

cond.end498:                                      ; preds = %cond.false497, %cond.end495
  %cond499 = phi i32 [ %cond496, %cond.end495 ], [ %196, %cond.false497 ], !dbg !12751
  %call500 = call %union.tree_node* @shortcut_cond_r(%union.tree_node* %177, %union.tree_node** %178, %union.tree_node** %179, i32 %cond499), !dbg !12754
  store %union.tree_node* %call500, %union.tree_node** %pred, align 8, !dbg !12755
  store %union.tree_node* null, %union.tree_node** %expr.addr, align 8, !dbg !12756
  %197 = load %union.tree_node*, %union.tree_node** %pred, align 8, !dbg !12757
  call void @append_to_statement_list(%union.tree_node* %197, %union.tree_node** %expr.addr), !dbg !12758
  %198 = load %union.tree_node*, %union.tree_node** %then_, align 8, !dbg !12759
  call void @append_to_statement_list(%union.tree_node* %198, %union.tree_node** %expr.addr), !dbg !12760
  %199 = load i8, i8* %else_se, align 1, !dbg !12761
  %tobool501 = icmp ne i8 %199, 0, !dbg !12761
  br i1 %tobool501, label %if.then502, label %if.end564, !dbg !12763

if.then502:                                       ; preds = %cond.end498
  %200 = load i8, i8* %jump_over_else, align 1, !dbg !12764
  %tobool503 = icmp ne i8 %200, 0, !dbg !12764
  br i1 %tobool503, label %if.then504, label %if.end559, !dbg !12767

if.then504:                                       ; preds = %if.then502
  call void @llvm.dbg.declare(metadata %union.tree_node** %last, metadata !12768, metadata !DIExpression()), !dbg !12770
  %201 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !12771
  %call505 = call %union.tree_node* @expr_last(%union.tree_node* %201), !dbg !12772
  store %union.tree_node* %call505, %union.tree_node** %last, align 8, !dbg !12770
  %call506 = call %union.tree_node* @build_and_jump(%union.tree_node** %end_label), !dbg !12773
  store %union.tree_node* %call506, %union.tree_node** %t, align 8, !dbg !12774
  %202 = load %union.tree_node*, %union.tree_node** %last, align 8, !dbg !12775
  %base507 = bitcast %union.tree_node* %202 to %struct.tree_base*, !dbg !12775
  %203 = bitcast %struct.tree_base* %base507 to i64*, !dbg !12775
  %bf.load508 = load i64, i64* %203, align 8, !dbg !12775
  %bf.clear509 = and i64 %bf.load508, 65535, !dbg !12775
  %bf.cast510 = trunc i64 %bf.clear509 to i32, !dbg !12775
  %idxprom511 = sext i32 %bf.cast510 to i64, !dbg !12775
  %arrayidx512 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom511, !dbg !12775
  %204 = load i32, i32* %arrayidx512, align 4, !dbg !12775
  %cmp513 = icmp uge i32 %204, 4, !dbg !12775
  br i1 %cmp513, label %land.lhs.true515, label %cond.false527, !dbg !12775

land.lhs.true515:                                 ; preds = %if.then504
  %205 = load %union.tree_node*, %union.tree_node** %last, align 8, !dbg !12775
  %base516 = bitcast %union.tree_node* %205 to %struct.tree_base*, !dbg !12775
  %206 = bitcast %struct.tree_base* %base516 to i64*, !dbg !12775
  %bf.load517 = load i64, i64* %206, align 8, !dbg !12775
  %bf.clear518 = and i64 %bf.load517, 65535, !dbg !12775
  %bf.cast519 = trunc i64 %bf.clear518 to i32, !dbg !12775
  %idxprom520 = sext i32 %bf.cast519 to i64, !dbg !12775
  %arrayidx521 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom520, !dbg !12775
  %207 = load i32, i32* %arrayidx521, align 4, !dbg !12775
  %cmp522 = icmp ule i32 %207, 10, !dbg !12775
  br i1 %cmp522, label %cond.true524, label %cond.false527, !dbg !12775

cond.true524:                                     ; preds = %land.lhs.true515
  %208 = load %union.tree_node*, %union.tree_node** %last, align 8, !dbg !12775
  %exp525 = bitcast %union.tree_node* %208 to %struct.tree_exp*, !dbg !12775
  %locus526 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp525, i32 0, i32 1, !dbg !12775
  %209 = load i32, i32* %locus526, align 8, !dbg !12775
  br label %cond.end528, !dbg !12775

cond.false527:                                    ; preds = %land.lhs.true515, %if.then504
  br label %cond.end528, !dbg !12775

cond.end528:                                      ; preds = %cond.false527, %cond.true524
  %cond529 = phi i32 [ %209, %cond.true524 ], [ 0, %cond.false527 ], !dbg !12775
  %cmp530 = icmp ne i32 %cond529, 0, !dbg !12775
  br i1 %cmp530, label %if.then532, label %if.end558, !dbg !12777

if.then532:                                       ; preds = %cond.end528
  %210 = load %union.tree_node*, %union.tree_node** %last, align 8, !dbg !12778
  %base533 = bitcast %union.tree_node* %210 to %struct.tree_base*, !dbg !12778
  %211 = bitcast %struct.tree_base* %base533 to i64*, !dbg !12778
  %bf.load534 = load i64, i64* %211, align 8, !dbg !12778
  %bf.clear535 = and i64 %bf.load534, 65535, !dbg !12778
  %bf.cast536 = trunc i64 %bf.clear535 to i32, !dbg !12778
  %idxprom537 = sext i32 %bf.cast536 to i64, !dbg !12778
  %arrayidx538 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom537, !dbg !12778
  %212 = load i32, i32* %arrayidx538, align 4, !dbg !12778
  %cmp539 = icmp uge i32 %212, 4, !dbg !12778
  br i1 %cmp539, label %land.lhs.true541, label %cond.false553, !dbg !12778

land.lhs.true541:                                 ; preds = %if.then532
  %213 = load %union.tree_node*, %union.tree_node** %last, align 8, !dbg !12778
  %base542 = bitcast %union.tree_node* %213 to %struct.tree_base*, !dbg !12778
  %214 = bitcast %struct.tree_base* %base542 to i64*, !dbg !12778
  %bf.load543 = load i64, i64* %214, align 8, !dbg !12778
  %bf.clear544 = and i64 %bf.load543, 65535, !dbg !12778
  %bf.cast545 = trunc i64 %bf.clear544 to i32, !dbg !12778
  %idxprom546 = sext i32 %bf.cast545 to i64, !dbg !12778
  %arrayidx547 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom546, !dbg !12778
  %215 = load i32, i32* %arrayidx547, align 4, !dbg !12778
  %cmp548 = icmp ule i32 %215, 10, !dbg !12778
  br i1 %cmp548, label %cond.true550, label %cond.false553, !dbg !12778

cond.true550:                                     ; preds = %land.lhs.true541
  %216 = load %union.tree_node*, %union.tree_node** %last, align 8, !dbg !12778
  %exp551 = bitcast %union.tree_node* %216 to %struct.tree_exp*, !dbg !12778
  %locus552 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp551, i32 0, i32 1, !dbg !12778
  %217 = load i32, i32* %locus552, align 8, !dbg !12778
  br label %cond.end554, !dbg !12778

cond.false553:                                    ; preds = %land.lhs.true541, %if.then532
  br label %cond.end554, !dbg !12778

cond.end554:                                      ; preds = %cond.false553, %cond.true550
  %cond555 = phi i32 [ %217, %cond.true550 ], [ 0, %cond.false553 ], !dbg !12778
  %218 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !12778
  %exp556 = bitcast %union.tree_node* %218 to %struct.tree_exp*, !dbg !12778
  %locus557 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp556, i32 0, i32 1, !dbg !12778
  store i32 %cond555, i32* %locus557, align 8, !dbg !12778
  br label %if.end558, !dbg !12778

if.end558:                                        ; preds = %cond.end554, %cond.end528
  %219 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !12779
  call void @append_to_statement_list(%union.tree_node* %219, %union.tree_node** %expr.addr), !dbg !12780
  br label %if.end559, !dbg !12781

if.end559:                                        ; preds = %if.end558, %if.then502
  %220 = load i8, i8* %emit_false, align 1, !dbg !12782
  %tobool560 = icmp ne i8 %220, 0, !dbg !12782
  br i1 %tobool560, label %if.then561, label %if.end563, !dbg !12784

if.then561:                                       ; preds = %if.end559
  %221 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !12785
  %222 = load %union.tree_node*, %union.tree_node** %false_label, align 8, !dbg !12785
  %call562 = call %union.tree_node* @build1_stat(i32 133, %union.tree_node* %221, %union.tree_node* %222), !dbg !12785
  store %union.tree_node* %call562, %union.tree_node** %t, align 8, !dbg !12787
  %223 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !12788
  call void @append_to_statement_list(%union.tree_node* %223, %union.tree_node** %expr.addr), !dbg !12789
  br label %if.end563, !dbg !12790

if.end563:                                        ; preds = %if.then561, %if.end559
  %224 = load %union.tree_node*, %union.tree_node** %else_, align 8, !dbg !12791
  call void @append_to_statement_list(%union.tree_node* %224, %union.tree_node** %expr.addr), !dbg !12792
  br label %if.end564, !dbg !12793

if.end564:                                        ; preds = %if.end563, %cond.end498
  %225 = load i8, i8* %emit_end, align 1, !dbg !12794
  %conv565 = zext i8 %225 to i32, !dbg !12794
  %tobool566 = icmp ne i32 %conv565, 0, !dbg !12794
  br i1 %tobool566, label %land.lhs.true567, label %if.end571, !dbg !12796

land.lhs.true567:                                 ; preds = %if.end564
  %226 = load %union.tree_node*, %union.tree_node** %end_label, align 8, !dbg !12797
  %tobool568 = icmp ne %union.tree_node* %226, null, !dbg !12797
  br i1 %tobool568, label %if.then569, label %if.end571, !dbg !12798

if.then569:                                       ; preds = %land.lhs.true567
  %227 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !12799
  %228 = load %union.tree_node*, %union.tree_node** %end_label, align 8, !dbg !12799
  %call570 = call %union.tree_node* @build1_stat(i32 133, %union.tree_node* %227, %union.tree_node* %228), !dbg !12799
  store %union.tree_node* %call570, %union.tree_node** %t, align 8, !dbg !12801
  %229 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !12802
  call void @append_to_statement_list(%union.tree_node* %229, %union.tree_node** %expr.addr), !dbg !12803
  br label %if.end571, !dbg !12804

if.end571:                                        ; preds = %if.then569, %land.lhs.true567, %if.end564
  %230 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !12805
  store %union.tree_node* %230, %union.tree_node** %retval, align 8, !dbg !12806
  br label %return, !dbg !12806

return:                                           ; preds = %if.end571, %cond.end411, %if.then300
  %231 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !12807
  ret %union.tree_node* %231, !dbg !12807
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_push_condition() #0 !dbg !12808 {
entry:
  %0 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !12809
  %conditions = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %0, i32 0, i32 8, !dbg !12810
  %1 = load i32, i32* %conditions, align 8, !dbg !12811
  %inc = add nsw i32 %1, 1, !dbg !12811
  store i32 %inc, i32* %conditions, align 8, !dbg !12811
  ret void, !dbg !12812
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_pop_condition(%struct.gimple_seq_d** %pre_p) #0 !dbg !12813 {
entry:
  %pre_p.addr = alloca %struct.gimple_seq_d**, align 8
  %conds = alloca i32, align 4
  store %struct.gimple_seq_d** %pre_p, %struct.gimple_seq_d*** %pre_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %pre_p.addr, metadata !12816, metadata !DIExpression()), !dbg !12817
  call void @llvm.dbg.declare(metadata i32* %conds, metadata !12818, metadata !DIExpression()), !dbg !12819
  %0 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !12820
  %conditions = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %0, i32 0, i32 8, !dbg !12821
  %1 = load i32, i32* %conditions, align 8, !dbg !12822
  %dec = add nsw i32 %1, -1, !dbg !12822
  store i32 %dec, i32* %conditions, align 8, !dbg !12822
  store i32 %dec, i32* %conds, align 4, !dbg !12819
  %2 = load i32, i32* %conds, align 4, !dbg !12823
  %cmp = icmp sge i32 %2, 0, !dbg !12823
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !12823

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 290, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !12823
  br label %cond.end, !dbg !12823

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !12823

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !12823
  %3 = load i32, i32* %conds, align 4, !dbg !12824
  %cmp1 = icmp eq i32 %3, 0, !dbg !12826
  br i1 %cmp1, label %if.then, label %if.end, !dbg !12827

if.then:                                          ; preds = %cond.end
  %4 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !12828
  %5 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !12830
  %conditional_cleanups = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %5, i32 0, i32 3, !dbg !12831
  %6 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %conditional_cleanups, align 8, !dbg !12831
  call void @gimplify_seq_add_seq(%struct.gimple_seq_d** %4, %struct.gimple_seq_d* %6), !dbg !12832
  %7 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !12833
  %conditional_cleanups2 = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %7, i32 0, i32 3, !dbg !12834
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %conditional_cleanups2, align 8, !dbg !12835
  br label %if.end, !dbg !12836

if.end:                                           ; preds = %if.then, %cond.end
  ret void, !dbg !12837
}

declare dso_local void @gimple_cond_get_ops_from_tree(%union.tree_node*, i32*, %union.tree_node**, %union.tree_node**) #3

declare dso_local %union.gimple_statement_d* @gimple_build_cond(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*) #3

declare dso_local zeroext i8 @gimple_seq_may_fallthru(%struct.gimple_seq_d*) #3

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_do_not_emit_location(%union.gimple_statement_d* %g) #0 !dbg !12838 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !12839, metadata !DIExpression()), !dbg !12840
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !12841
  call void @gimple_set_plf(%union.gimple_statement_d* %0, i32 1, i8 zeroext 1), !dbg !12842
  ret void, !dbg !12843
}

declare dso_local zeroext i8 @tree_could_trap_p(%union.tree_node*) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @tree_operand_length(%union.tree_node* %node) #0 !dbg !12844 {
entry:
  %retval = alloca i32, align 4
  %node.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %node, %union.tree_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %node.addr, metadata !12847, metadata !DIExpression()), !dbg !12848
  %0 = load %union.tree_node*, %union.tree_node** %node.addr, align 8, !dbg !12849
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !12849
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !12849
  %bf.load = load i64, i64* %1, align 8, !dbg !12849
  %bf.clear = and i64 %bf.load, 65535, !dbg !12849
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !12849
  %idxprom = sext i32 %bf.cast to i64, !dbg !12849
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !12849
  %2 = load i32, i32* %arrayidx, align 4, !dbg !12849
  %cmp = icmp eq i32 %2, 9, !dbg !12849
  br i1 %cmp, label %if.then, label %if.else, !dbg !12851

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %node.addr, align 8, !dbg !12852
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !12852
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !12852
  %arrayidx1 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !12852
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx1, align 8, !dbg !12852
  %int_cst = bitcast %union.tree_node* %4 to %struct.tree_int_cst*, !dbg !12852
  %int_cst2 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !12852
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst2, i32 0, i32 0, !dbg !12852
  %5 = load i64, i64* %low, align 8, !dbg !12852
  %conv = trunc i64 %5 to i32, !dbg !12852
  store i32 %conv, i32* %retval, align 4, !dbg !12853
  br label %return, !dbg !12853

if.else:                                          ; preds = %entry
  %6 = load %union.tree_node*, %union.tree_node** %node.addr, align 8, !dbg !12854
  %base3 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !12854
  %7 = bitcast %struct.tree_base* %base3 to i64*, !dbg !12854
  %bf.load4 = load i64, i64* %7, align 8, !dbg !12854
  %bf.clear5 = and i64 %bf.load4, 65535, !dbg !12854
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !12854
  %idxprom7 = sext i32 %bf.cast6 to i64, !dbg !12854
  %arrayidx8 = getelementptr inbounds [0 x i8], [0 x i8]* @tree_code_length, i64 0, i64 %idxprom7, !dbg !12854
  %8 = load i8, i8* %arrayidx8, align 1, !dbg !12854
  %conv9 = zext i8 %8 to i32, !dbg !12854
  store i32 %conv9, i32* %retval, align 4, !dbg !12855
  br label %return, !dbg !12855

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !12856
  ret i32 %9, !dbg !12856
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @shortcut_cond_r(%union.tree_node* %pred, %union.tree_node** %true_label_p, %union.tree_node** %false_label_p, i32 %locus) #0 !dbg !12857 {
entry:
  %pred.addr = alloca %union.tree_node*, align 8
  %true_label_p.addr = alloca %union.tree_node**, align 8
  %false_label_p.addr = alloca %union.tree_node**, align 8
  %locus.addr = alloca i32, align 4
  %local_label = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  %expr = alloca %union.tree_node*, align 8
  %new_locus = alloca i32, align 4
  %new_locus54 = alloca i32, align 4
  %new_locus120 = alloca i32, align 4
  store %union.tree_node* %pred, %union.tree_node** %pred.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %pred.addr, metadata !12860, metadata !DIExpression()), !dbg !12861
  store %union.tree_node** %true_label_p, %union.tree_node*** %true_label_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %true_label_p.addr, metadata !12862, metadata !DIExpression()), !dbg !12863
  store %union.tree_node** %false_label_p, %union.tree_node*** %false_label_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %false_label_p.addr, metadata !12864, metadata !DIExpression()), !dbg !12865
  store i32 %locus, i32* %locus.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %locus.addr, metadata !12866, metadata !DIExpression()), !dbg !12867
  call void @llvm.dbg.declare(metadata %union.tree_node** %local_label, metadata !12868, metadata !DIExpression()), !dbg !12869
  store %union.tree_node* null, %union.tree_node** %local_label, align 8, !dbg !12869
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !12870, metadata !DIExpression()), !dbg !12871
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr, metadata !12872, metadata !DIExpression()), !dbg !12873
  store %union.tree_node* null, %union.tree_node** %expr, align 8, !dbg !12873
  %0 = load %union.tree_node*, %union.tree_node** %pred.addr, align 8, !dbg !12874
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !12874
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !12874
  %bf.load = load i64, i64* %1, align 8, !dbg !12874
  %bf.clear = and i64 %bf.load, 65535, !dbg !12874
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !12874
  %cmp = icmp eq i32 %bf.cast, 91, !dbg !12876
  br i1 %cmp, label %if.then, label %if.else, !dbg !12877

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %new_locus, metadata !12878, metadata !DIExpression()), !dbg !12880
  %2 = load %union.tree_node**, %union.tree_node*** %false_label_p.addr, align 8, !dbg !12881
  %cmp1 = icmp eq %union.tree_node** %2, null, !dbg !12883
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !12884

if.then2:                                         ; preds = %if.then
  store %union.tree_node** %local_label, %union.tree_node*** %false_label_p.addr, align 8, !dbg !12885
  br label %if.end, !dbg !12886

if.end:                                           ; preds = %if.then2, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %pred.addr, align 8, !dbg !12887
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !12887
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !12887
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !12887
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !12887
  %5 = load %union.tree_node**, %union.tree_node*** %false_label_p.addr, align 8, !dbg !12888
  %6 = load i32, i32* %locus.addr, align 4, !dbg !12889
  %call = call %union.tree_node* @shortcut_cond_r(%union.tree_node* %4, %union.tree_node** null, %union.tree_node** %5, i32 %6), !dbg !12890
  store %union.tree_node* %call, %union.tree_node** %t, align 8, !dbg !12891
  %7 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !12892
  call void @append_to_statement_list(%union.tree_node* %7, %union.tree_node** %expr), !dbg !12893
  %8 = load %union.tree_node*, %union.tree_node** %pred.addr, align 8, !dbg !12894
  %base3 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !12894
  %9 = bitcast %struct.tree_base* %base3 to i64*, !dbg !12894
  %bf.load4 = load i64, i64* %9, align 8, !dbg !12894
  %bf.clear5 = and i64 %bf.load4, 65535, !dbg !12894
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !12894
  %idxprom = sext i32 %bf.cast6 to i64, !dbg !12894
  %arrayidx7 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !12894
  %10 = load i32, i32* %arrayidx7, align 4, !dbg !12894
  %cmp8 = icmp uge i32 %10, 4, !dbg !12894
  br i1 %cmp8, label %land.lhs.true, label %cond.false, !dbg !12894

land.lhs.true:                                    ; preds = %if.end
  %11 = load %union.tree_node*, %union.tree_node** %pred.addr, align 8, !dbg !12894
  %base9 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !12894
  %12 = bitcast %struct.tree_base* %base9 to i64*, !dbg !12894
  %bf.load10 = load i64, i64* %12, align 8, !dbg !12894
  %bf.clear11 = and i64 %bf.load10, 65535, !dbg !12894
  %bf.cast12 = trunc i64 %bf.clear11 to i32, !dbg !12894
  %idxprom13 = sext i32 %bf.cast12 to i64, !dbg !12894
  %arrayidx14 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom13, !dbg !12894
  %13 = load i32, i32* %arrayidx14, align 4, !dbg !12894
  %cmp15 = icmp ule i32 %13, 10, !dbg !12894
  br i1 %cmp15, label %cond.true, label %cond.false, !dbg !12894

cond.true:                                        ; preds = %land.lhs.true
  %14 = load %union.tree_node*, %union.tree_node** %pred.addr, align 8, !dbg !12894
  %exp16 = bitcast %union.tree_node* %14 to %struct.tree_exp*, !dbg !12894
  %locus17 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp16, i32 0, i32 1, !dbg !12894
  %15 = load i32, i32* %locus17, align 8, !dbg !12894
  br label %cond.end, !dbg !12894

cond.false:                                       ; preds = %land.lhs.true, %if.end
  br label %cond.end, !dbg !12894

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %15, %cond.true ], [ 0, %cond.false ], !dbg !12894
  %cmp18 = icmp ne i32 %cond, 0, !dbg !12894
  br i1 %cmp18, label %cond.true19, label %cond.false41, !dbg !12894

cond.true19:                                      ; preds = %cond.end
  %16 = load %union.tree_node*, %union.tree_node** %pred.addr, align 8, !dbg !12895
  %base20 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !12895
  %17 = bitcast %struct.tree_base* %base20 to i64*, !dbg !12895
  %bf.load21 = load i64, i64* %17, align 8, !dbg !12895
  %bf.clear22 = and i64 %bf.load21, 65535, !dbg !12895
  %bf.cast23 = trunc i64 %bf.clear22 to i32, !dbg !12895
  %idxprom24 = sext i32 %bf.cast23 to i64, !dbg !12895
  %arrayidx25 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom24, !dbg !12895
  %18 = load i32, i32* %arrayidx25, align 4, !dbg !12895
  %cmp26 = icmp uge i32 %18, 4, !dbg !12895
  br i1 %cmp26, label %land.lhs.true27, label %cond.false38, !dbg !12895

land.lhs.true27:                                  ; preds = %cond.true19
  %19 = load %union.tree_node*, %union.tree_node** %pred.addr, align 8, !dbg !12895
  %base28 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !12895
  %20 = bitcast %struct.tree_base* %base28 to i64*, !dbg !12895
  %bf.load29 = load i64, i64* %20, align 8, !dbg !12895
  %bf.clear30 = and i64 %bf.load29, 65535, !dbg !12895
  %bf.cast31 = trunc i64 %bf.clear30 to i32, !dbg !12895
  %idxprom32 = sext i32 %bf.cast31 to i64, !dbg !12895
  %arrayidx33 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom32, !dbg !12895
  %21 = load i32, i32* %arrayidx33, align 4, !dbg !12895
  %cmp34 = icmp ule i32 %21, 10, !dbg !12895
  br i1 %cmp34, label %cond.true35, label %cond.false38, !dbg !12895

cond.true35:                                      ; preds = %land.lhs.true27
  %22 = load %union.tree_node*, %union.tree_node** %pred.addr, align 8, !dbg !12895
  %exp36 = bitcast %union.tree_node* %22 to %struct.tree_exp*, !dbg !12895
  %locus37 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp36, i32 0, i32 1, !dbg !12895
  %23 = load i32, i32* %locus37, align 8, !dbg !12895
  br label %cond.end39, !dbg !12895

cond.false38:                                     ; preds = %land.lhs.true27, %cond.true19
  br label %cond.end39, !dbg !12895

cond.end39:                                       ; preds = %cond.false38, %cond.true35
  %cond40 = phi i32 [ %23, %cond.true35 ], [ 0, %cond.false38 ], !dbg !12895
  br label %cond.end42, !dbg !12894

cond.false41:                                     ; preds = %cond.end
  %24 = load i32, i32* %locus.addr, align 4, !dbg !12896
  br label %cond.end42, !dbg !12894

cond.end42:                                       ; preds = %cond.false41, %cond.end39
  %cond43 = phi i32 [ %cond40, %cond.end39 ], [ %24, %cond.false41 ], !dbg !12894
  store i32 %cond43, i32* %new_locus, align 4, !dbg !12897
  %25 = load %union.tree_node*, %union.tree_node** %pred.addr, align 8, !dbg !12898
  %exp44 = bitcast %union.tree_node* %25 to %struct.tree_exp*, !dbg !12898
  %operands45 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp44, i32 0, i32 3, !dbg !12898
  %arrayidx46 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands45, i64 0, i64 1, !dbg !12898
  %26 = load %union.tree_node*, %union.tree_node** %arrayidx46, align 8, !dbg !12898
  %27 = load %union.tree_node**, %union.tree_node*** %true_label_p.addr, align 8, !dbg !12899
  %28 = load %union.tree_node**, %union.tree_node*** %false_label_p.addr, align 8, !dbg !12900
  %29 = load i32, i32* %new_locus, align 4, !dbg !12901
  %call47 = call %union.tree_node* @shortcut_cond_r(%union.tree_node* %26, %union.tree_node** %27, %union.tree_node** %28, i32 %29), !dbg !12902
  store %union.tree_node* %call47, %union.tree_node** %t, align 8, !dbg !12903
  %30 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !12904
  call void @append_to_statement_list(%union.tree_node* %30, %union.tree_node** %expr), !dbg !12905
  br label %if.end188, !dbg !12906

if.else:                                          ; preds = %entry
  %31 = load %union.tree_node*, %union.tree_node** %pred.addr, align 8, !dbg !12907
  %base48 = bitcast %union.tree_node* %31 to %struct.tree_base*, !dbg !12907
  %32 = bitcast %struct.tree_base* %base48 to i64*, !dbg !12907
  %bf.load49 = load i64, i64* %32, align 8, !dbg !12907
  %bf.clear50 = and i64 %bf.load49, 65535, !dbg !12907
  %bf.cast51 = trunc i64 %bf.clear50 to i32, !dbg !12907
  %cmp52 = icmp eq i32 %bf.cast51, 92, !dbg !12909
  br i1 %cmp52, label %if.then53, label %if.else113, !dbg !12910

if.then53:                                        ; preds = %if.else
  call void @llvm.dbg.declare(metadata i32* %new_locus54, metadata !12911, metadata !DIExpression()), !dbg !12913
  %33 = load %union.tree_node**, %union.tree_node*** %true_label_p.addr, align 8, !dbg !12914
  %cmp55 = icmp eq %union.tree_node** %33, null, !dbg !12916
  br i1 %cmp55, label %if.then56, label %if.end57, !dbg !12917

if.then56:                                        ; preds = %if.then53
  store %union.tree_node** %local_label, %union.tree_node*** %true_label_p.addr, align 8, !dbg !12918
  br label %if.end57, !dbg !12919

if.end57:                                         ; preds = %if.then56, %if.then53
  %34 = load %union.tree_node*, %union.tree_node** %pred.addr, align 8, !dbg !12920
  %exp58 = bitcast %union.tree_node* %34 to %struct.tree_exp*, !dbg !12920
  %operands59 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp58, i32 0, i32 3, !dbg !12920
  %arrayidx60 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands59, i64 0, i64 0, !dbg !12920
  %35 = load %union.tree_node*, %union.tree_node** %arrayidx60, align 8, !dbg !12920
  %36 = load %union.tree_node**, %union.tree_node*** %true_label_p.addr, align 8, !dbg !12921
  %37 = load i32, i32* %locus.addr, align 4, !dbg !12922
  %call61 = call %union.tree_node* @shortcut_cond_r(%union.tree_node* %35, %union.tree_node** %36, %union.tree_node** null, i32 %37), !dbg !12923
  store %union.tree_node* %call61, %union.tree_node** %t, align 8, !dbg !12924
  %38 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !12925
  call void @append_to_statement_list(%union.tree_node* %38, %union.tree_node** %expr), !dbg !12926
  %39 = load %union.tree_node*, %union.tree_node** %pred.addr, align 8, !dbg !12927
  %base62 = bitcast %union.tree_node* %39 to %struct.tree_base*, !dbg !12927
  %40 = bitcast %struct.tree_base* %base62 to i64*, !dbg !12927
  %bf.load63 = load i64, i64* %40, align 8, !dbg !12927
  %bf.clear64 = and i64 %bf.load63, 65535, !dbg !12927
  %bf.cast65 = trunc i64 %bf.clear64 to i32, !dbg !12927
  %idxprom66 = sext i32 %bf.cast65 to i64, !dbg !12927
  %arrayidx67 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom66, !dbg !12927
  %41 = load i32, i32* %arrayidx67, align 4, !dbg !12927
  %cmp68 = icmp uge i32 %41, 4, !dbg !12927
  br i1 %cmp68, label %land.lhs.true69, label %cond.false80, !dbg !12927

land.lhs.true69:                                  ; preds = %if.end57
  %42 = load %union.tree_node*, %union.tree_node** %pred.addr, align 8, !dbg !12927
  %base70 = bitcast %union.tree_node* %42 to %struct.tree_base*, !dbg !12927
  %43 = bitcast %struct.tree_base* %base70 to i64*, !dbg !12927
  %bf.load71 = load i64, i64* %43, align 8, !dbg !12927
  %bf.clear72 = and i64 %bf.load71, 65535, !dbg !12927
  %bf.cast73 = trunc i64 %bf.clear72 to i32, !dbg !12927
  %idxprom74 = sext i32 %bf.cast73 to i64, !dbg !12927
  %arrayidx75 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom74, !dbg !12927
  %44 = load i32, i32* %arrayidx75, align 4, !dbg !12927
  %cmp76 = icmp ule i32 %44, 10, !dbg !12927
  br i1 %cmp76, label %cond.true77, label %cond.false80, !dbg !12927

cond.true77:                                      ; preds = %land.lhs.true69
  %45 = load %union.tree_node*, %union.tree_node** %pred.addr, align 8, !dbg !12927
  %exp78 = bitcast %union.tree_node* %45 to %struct.tree_exp*, !dbg !12927
  %locus79 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp78, i32 0, i32 1, !dbg !12927
  %46 = load i32, i32* %locus79, align 8, !dbg !12927
  br label %cond.end81, !dbg !12927

cond.false80:                                     ; preds = %land.lhs.true69, %if.end57
  br label %cond.end81, !dbg !12927

cond.end81:                                       ; preds = %cond.false80, %cond.true77
  %cond82 = phi i32 [ %46, %cond.true77 ], [ 0, %cond.false80 ], !dbg !12927
  %cmp83 = icmp ne i32 %cond82, 0, !dbg !12927
  br i1 %cmp83, label %cond.true84, label %cond.false106, !dbg !12927

cond.true84:                                      ; preds = %cond.end81
  %47 = load %union.tree_node*, %union.tree_node** %pred.addr, align 8, !dbg !12928
  %base85 = bitcast %union.tree_node* %47 to %struct.tree_base*, !dbg !12928
  %48 = bitcast %struct.tree_base* %base85 to i64*, !dbg !12928
  %bf.load86 = load i64, i64* %48, align 8, !dbg !12928
  %bf.clear87 = and i64 %bf.load86, 65535, !dbg !12928
  %bf.cast88 = trunc i64 %bf.clear87 to i32, !dbg !12928
  %idxprom89 = sext i32 %bf.cast88 to i64, !dbg !12928
  %arrayidx90 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom89, !dbg !12928
  %49 = load i32, i32* %arrayidx90, align 4, !dbg !12928
  %cmp91 = icmp uge i32 %49, 4, !dbg !12928
  br i1 %cmp91, label %land.lhs.true92, label %cond.false103, !dbg !12928

land.lhs.true92:                                  ; preds = %cond.true84
  %50 = load %union.tree_node*, %union.tree_node** %pred.addr, align 8, !dbg !12928
  %base93 = bitcast %union.tree_node* %50 to %struct.tree_base*, !dbg !12928
  %51 = bitcast %struct.tree_base* %base93 to i64*, !dbg !12928
  %bf.load94 = load i64, i64* %51, align 8, !dbg !12928
  %bf.clear95 = and i64 %bf.load94, 65535, !dbg !12928
  %bf.cast96 = trunc i64 %bf.clear95 to i32, !dbg !12928
  %idxprom97 = sext i32 %bf.cast96 to i64, !dbg !12928
  %arrayidx98 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom97, !dbg !12928
  %52 = load i32, i32* %arrayidx98, align 4, !dbg !12928
  %cmp99 = icmp ule i32 %52, 10, !dbg !12928
  br i1 %cmp99, label %cond.true100, label %cond.false103, !dbg !12928

cond.true100:                                     ; preds = %land.lhs.true92
  %53 = load %union.tree_node*, %union.tree_node** %pred.addr, align 8, !dbg !12928
  %exp101 = bitcast %union.tree_node* %53 to %struct.tree_exp*, !dbg !12928
  %locus102 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp101, i32 0, i32 1, !dbg !12928
  %54 = load i32, i32* %locus102, align 8, !dbg !12928
  br label %cond.end104, !dbg !12928

cond.false103:                                    ; preds = %land.lhs.true92, %cond.true84
  br label %cond.end104, !dbg !12928

cond.end104:                                      ; preds = %cond.false103, %cond.true100
  %cond105 = phi i32 [ %54, %cond.true100 ], [ 0, %cond.false103 ], !dbg !12928
  br label %cond.end107, !dbg !12927

cond.false106:                                    ; preds = %cond.end81
  %55 = load i32, i32* %locus.addr, align 4, !dbg !12929
  br label %cond.end107, !dbg !12927

cond.end107:                                      ; preds = %cond.false106, %cond.end104
  %cond108 = phi i32 [ %cond105, %cond.end104 ], [ %55, %cond.false106 ], !dbg !12927
  store i32 %cond108, i32* %new_locus54, align 4, !dbg !12930
  %56 = load %union.tree_node*, %union.tree_node** %pred.addr, align 8, !dbg !12931
  %exp109 = bitcast %union.tree_node* %56 to %struct.tree_exp*, !dbg !12931
  %operands110 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp109, i32 0, i32 3, !dbg !12931
  %arrayidx111 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands110, i64 0, i64 1, !dbg !12931
  %57 = load %union.tree_node*, %union.tree_node** %arrayidx111, align 8, !dbg !12931
  %58 = load %union.tree_node**, %union.tree_node*** %true_label_p.addr, align 8, !dbg !12932
  %59 = load %union.tree_node**, %union.tree_node*** %false_label_p.addr, align 8, !dbg !12933
  %60 = load i32, i32* %new_locus54, align 4, !dbg !12934
  %call112 = call %union.tree_node* @shortcut_cond_r(%union.tree_node* %57, %union.tree_node** %58, %union.tree_node** %59, i32 %60), !dbg !12935
  store %union.tree_node* %call112, %union.tree_node** %t, align 8, !dbg !12936
  %61 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !12937
  call void @append_to_statement_list(%union.tree_node* %61, %union.tree_node** %expr), !dbg !12938
  br label %if.end187, !dbg !12939

if.else113:                                       ; preds = %if.else
  %62 = load %union.tree_node*, %union.tree_node** %pred.addr, align 8, !dbg !12940
  %base114 = bitcast %union.tree_node* %62 to %struct.tree_base*, !dbg !12940
  %63 = bitcast %struct.tree_base* %base114 to i64*, !dbg !12940
  %bf.load115 = load i64, i64* %63, align 8, !dbg !12940
  %bf.clear116 = and i64 %bf.load115, 65535, !dbg !12940
  %bf.cast117 = trunc i64 %bf.clear116 to i32, !dbg !12940
  %cmp118 = icmp eq i32 %bf.cast117, 56, !dbg !12942
  br i1 %cmp118, label %if.then119, label %if.else180, !dbg !12943

if.then119:                                       ; preds = %if.else113
  call void @llvm.dbg.declare(metadata i32* %new_locus120, metadata !12944, metadata !DIExpression()), !dbg !12946
  %64 = load %union.tree_node*, %union.tree_node** %pred.addr, align 8, !dbg !12947
  %base121 = bitcast %union.tree_node* %64 to %struct.tree_base*, !dbg !12947
  %65 = bitcast %struct.tree_base* %base121 to i64*, !dbg !12947
  %bf.load122 = load i64, i64* %65, align 8, !dbg !12947
  %bf.clear123 = and i64 %bf.load122, 65535, !dbg !12947
  %bf.cast124 = trunc i64 %bf.clear123 to i32, !dbg !12947
  %idxprom125 = sext i32 %bf.cast124 to i64, !dbg !12947
  %arrayidx126 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom125, !dbg !12947
  %66 = load i32, i32* %arrayidx126, align 4, !dbg !12947
  %cmp127 = icmp uge i32 %66, 4, !dbg !12947
  br i1 %cmp127, label %land.lhs.true128, label %cond.false139, !dbg !12947

land.lhs.true128:                                 ; preds = %if.then119
  %67 = load %union.tree_node*, %union.tree_node** %pred.addr, align 8, !dbg !12947
  %base129 = bitcast %union.tree_node* %67 to %struct.tree_base*, !dbg !12947
  %68 = bitcast %struct.tree_base* %base129 to i64*, !dbg !12947
  %bf.load130 = load i64, i64* %68, align 8, !dbg !12947
  %bf.clear131 = and i64 %bf.load130, 65535, !dbg !12947
  %bf.cast132 = trunc i64 %bf.clear131 to i32, !dbg !12947
  %idxprom133 = sext i32 %bf.cast132 to i64, !dbg !12947
  %arrayidx134 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom133, !dbg !12947
  %69 = load i32, i32* %arrayidx134, align 4, !dbg !12947
  %cmp135 = icmp ule i32 %69, 10, !dbg !12947
  br i1 %cmp135, label %cond.true136, label %cond.false139, !dbg !12947

cond.true136:                                     ; preds = %land.lhs.true128
  %70 = load %union.tree_node*, %union.tree_node** %pred.addr, align 8, !dbg !12947
  %exp137 = bitcast %union.tree_node* %70 to %struct.tree_exp*, !dbg !12947
  %locus138 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp137, i32 0, i32 1, !dbg !12947
  %71 = load i32, i32* %locus138, align 8, !dbg !12947
  br label %cond.end140, !dbg !12947

cond.false139:                                    ; preds = %land.lhs.true128, %if.then119
  br label %cond.end140, !dbg !12947

cond.end140:                                      ; preds = %cond.false139, %cond.true136
  %cond141 = phi i32 [ %71, %cond.true136 ], [ 0, %cond.false139 ], !dbg !12947
  %cmp142 = icmp ne i32 %cond141, 0, !dbg !12947
  br i1 %cmp142, label %cond.true143, label %cond.false165, !dbg !12947

cond.true143:                                     ; preds = %cond.end140
  %72 = load %union.tree_node*, %union.tree_node** %pred.addr, align 8, !dbg !12948
  %base144 = bitcast %union.tree_node* %72 to %struct.tree_base*, !dbg !12948
  %73 = bitcast %struct.tree_base* %base144 to i64*, !dbg !12948
  %bf.load145 = load i64, i64* %73, align 8, !dbg !12948
  %bf.clear146 = and i64 %bf.load145, 65535, !dbg !12948
  %bf.cast147 = trunc i64 %bf.clear146 to i32, !dbg !12948
  %idxprom148 = sext i32 %bf.cast147 to i64, !dbg !12948
  %arrayidx149 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom148, !dbg !12948
  %74 = load i32, i32* %arrayidx149, align 4, !dbg !12948
  %cmp150 = icmp uge i32 %74, 4, !dbg !12948
  br i1 %cmp150, label %land.lhs.true151, label %cond.false162, !dbg !12948

land.lhs.true151:                                 ; preds = %cond.true143
  %75 = load %union.tree_node*, %union.tree_node** %pred.addr, align 8, !dbg !12948
  %base152 = bitcast %union.tree_node* %75 to %struct.tree_base*, !dbg !12948
  %76 = bitcast %struct.tree_base* %base152 to i64*, !dbg !12948
  %bf.load153 = load i64, i64* %76, align 8, !dbg !12948
  %bf.clear154 = and i64 %bf.load153, 65535, !dbg !12948
  %bf.cast155 = trunc i64 %bf.clear154 to i32, !dbg !12948
  %idxprom156 = sext i32 %bf.cast155 to i64, !dbg !12948
  %arrayidx157 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom156, !dbg !12948
  %77 = load i32, i32* %arrayidx157, align 4, !dbg !12948
  %cmp158 = icmp ule i32 %77, 10, !dbg !12948
  br i1 %cmp158, label %cond.true159, label %cond.false162, !dbg !12948

cond.true159:                                     ; preds = %land.lhs.true151
  %78 = load %union.tree_node*, %union.tree_node** %pred.addr, align 8, !dbg !12948
  %exp160 = bitcast %union.tree_node* %78 to %struct.tree_exp*, !dbg !12948
  %locus161 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp160, i32 0, i32 1, !dbg !12948
  %79 = load i32, i32* %locus161, align 8, !dbg !12948
  br label %cond.end163, !dbg !12948

cond.false162:                                    ; preds = %land.lhs.true151, %cond.true143
  br label %cond.end163, !dbg !12948

cond.end163:                                      ; preds = %cond.false162, %cond.true159
  %cond164 = phi i32 [ %79, %cond.true159 ], [ 0, %cond.false162 ], !dbg !12948
  br label %cond.end166, !dbg !12947

cond.false165:                                    ; preds = %cond.end140
  %80 = load i32, i32* %locus.addr, align 4, !dbg !12949
  br label %cond.end166, !dbg !12947

cond.end166:                                      ; preds = %cond.false165, %cond.end163
  %cond167 = phi i32 [ %cond164, %cond.end163 ], [ %80, %cond.false165 ], !dbg !12947
  store i32 %cond167, i32* %new_locus120, align 4, !dbg !12950
  %81 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !12951
  %82 = load %union.tree_node*, %union.tree_node** %pred.addr, align 8, !dbg !12951
  %exp168 = bitcast %union.tree_node* %82 to %struct.tree_exp*, !dbg !12951
  %operands169 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp168, i32 0, i32 3, !dbg !12951
  %arrayidx170 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands169, i64 0, i64 0, !dbg !12951
  %83 = load %union.tree_node*, %union.tree_node** %arrayidx170, align 8, !dbg !12951
  %84 = load %union.tree_node*, %union.tree_node** %pred.addr, align 8, !dbg !12951
  %exp171 = bitcast %union.tree_node* %84 to %struct.tree_exp*, !dbg !12951
  %operands172 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp171, i32 0, i32 3, !dbg !12951
  %arrayidx173 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands172, i64 0, i64 1, !dbg !12951
  %85 = load %union.tree_node*, %union.tree_node** %arrayidx173, align 8, !dbg !12951
  %86 = load %union.tree_node**, %union.tree_node*** %true_label_p.addr, align 8, !dbg !12951
  %87 = load %union.tree_node**, %union.tree_node*** %false_label_p.addr, align 8, !dbg !12951
  %88 = load i32, i32* %locus.addr, align 4, !dbg !12951
  %call174 = call %union.tree_node* @shortcut_cond_r(%union.tree_node* %85, %union.tree_node** %86, %union.tree_node** %87, i32 %88), !dbg !12951
  %89 = load %union.tree_node*, %union.tree_node** %pred.addr, align 8, !dbg !12951
  %exp175 = bitcast %union.tree_node* %89 to %struct.tree_exp*, !dbg !12951
  %operands176 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp175, i32 0, i32 3, !dbg !12951
  %arrayidx177 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands176, i64 0, i64 2, !dbg !12951
  %90 = load %union.tree_node*, %union.tree_node** %arrayidx177, align 8, !dbg !12951
  %91 = load %union.tree_node**, %union.tree_node*** %true_label_p.addr, align 8, !dbg !12951
  %92 = load %union.tree_node**, %union.tree_node*** %false_label_p.addr, align 8, !dbg !12951
  %93 = load i32, i32* %new_locus120, align 4, !dbg !12951
  %call178 = call %union.tree_node* @shortcut_cond_r(%union.tree_node* %90, %union.tree_node** %91, %union.tree_node** %92, i32 %93), !dbg !12951
  %call179 = call %union.tree_node* @build3_stat(i32 56, %union.tree_node* %81, %union.tree_node* %83, %union.tree_node* %call174, %union.tree_node* %call178), !dbg !12951
  store %union.tree_node* %call179, %union.tree_node** %expr, align 8, !dbg !12952
  br label %if.end186, !dbg !12953

if.else180:                                       ; preds = %if.else113
  %94 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !12954
  %95 = load %union.tree_node*, %union.tree_node** %pred.addr, align 8, !dbg !12954
  %96 = load %union.tree_node**, %union.tree_node*** %true_label_p.addr, align 8, !dbg !12954
  %call181 = call %union.tree_node* @build_and_jump(%union.tree_node** %96), !dbg !12954
  %97 = load %union.tree_node**, %union.tree_node*** %false_label_p.addr, align 8, !dbg !12954
  %call182 = call %union.tree_node* @build_and_jump(%union.tree_node** %97), !dbg !12954
  %call183 = call %union.tree_node* @build3_stat(i32 56, %union.tree_node* %94, %union.tree_node* %95, %union.tree_node* %call181, %union.tree_node* %call182), !dbg !12954
  store %union.tree_node* %call183, %union.tree_node** %expr, align 8, !dbg !12956
  %98 = load i32, i32* %locus.addr, align 4, !dbg !12957
  %99 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !12957
  %exp184 = bitcast %union.tree_node* %99 to %struct.tree_exp*, !dbg !12957
  %locus185 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp184, i32 0, i32 1, !dbg !12957
  store i32 %98, i32* %locus185, align 8, !dbg !12957
  br label %if.end186

if.end186:                                        ; preds = %if.else180, %cond.end166
  br label %if.end187

if.end187:                                        ; preds = %if.end186, %cond.end107
  br label %if.end188

if.end188:                                        ; preds = %if.end187, %cond.end42
  %100 = load %union.tree_node*, %union.tree_node** %local_label, align 8, !dbg !12958
  %tobool = icmp ne %union.tree_node* %100, null, !dbg !12958
  br i1 %tobool, label %if.then189, label %if.end191, !dbg !12960

if.then189:                                       ; preds = %if.end188
  %101 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !12961
  %102 = load %union.tree_node*, %union.tree_node** %local_label, align 8, !dbg !12961
  %call190 = call %union.tree_node* @build1_stat(i32 133, %union.tree_node* %101, %union.tree_node* %102), !dbg !12961
  store %union.tree_node* %call190, %union.tree_node** %t, align 8, !dbg !12963
  %103 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !12964
  call void @append_to_statement_list(%union.tree_node* %103, %union.tree_node** %expr), !dbg !12965
  br label %if.end191, !dbg !12966

if.end191:                                        ; preds = %if.then189, %if.end188
  %104 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !12967
  ret %union.tree_node* %104, !dbg !12968
}

declare dso_local %union.tree_node* @expr_last(%union.tree_node*) #3

declare dso_local zeroext i8 @block_may_fallthru(%union.tree_node*) #3

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_plf(%union.gimple_statement_d* %stmt, i32 %plf, i8 zeroext %val_p) #0 !dbg !12969 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %plf.addr = alloca i32, align 4
  %val_p.addr = alloca i8, align 1
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !12972, metadata !DIExpression()), !dbg !12973
  store i32 %plf, i32* %plf.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %plf.addr, metadata !12974, metadata !DIExpression()), !dbg !12975
  store i8 %val_p, i8* %val_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %val_p.addr, metadata !12976, metadata !DIExpression()), !dbg !12977
  %0 = load i8, i8* %val_p.addr, align 1, !dbg !12978
  %tobool = icmp ne i8 %0, 0, !dbg !12978
  br i1 %tobool, label %if.then, label %if.else, !dbg !12980

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %plf.addr, align 4, !dbg !12981
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !12982
  %gsbase = bitcast %union.gimple_statement_d* %2 to %struct.gimple_statement_base*, !dbg !12983
  %3 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !12984
  %bf.load = load i32, i32* %3, align 8, !dbg !12985
  %bf.lshr = lshr i32 %bf.load, 11, !dbg !12985
  %bf.clear = and i32 %bf.lshr, 3, !dbg !12985
  %or = or i32 %bf.clear, %1, !dbg !12985
  %bf.load1 = load i32, i32* %3, align 8, !dbg !12985
  %bf.value = and i32 %or, 3, !dbg !12985
  %bf.shl = shl i32 %bf.value, 11, !dbg !12985
  %bf.clear2 = and i32 %bf.load1, -6145, !dbg !12985
  %bf.set = or i32 %bf.clear2, %bf.shl, !dbg !12985
  store i32 %bf.set, i32* %3, align 8, !dbg !12985
  br label %if.end, !dbg !12982

if.else:                                          ; preds = %entry
  %4 = load i32, i32* %plf.addr, align 4, !dbg !12986
  %neg = xor i32 %4, -1, !dbg !12987
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !12988
  %gsbase3 = bitcast %union.gimple_statement_d* %5 to %struct.gimple_statement_base*, !dbg !12989
  %6 = bitcast %struct.gimple_statement_base* %gsbase3 to i32*, !dbg !12990
  %bf.load4 = load i32, i32* %6, align 8, !dbg !12991
  %bf.lshr5 = lshr i32 %bf.load4, 11, !dbg !12991
  %bf.clear6 = and i32 %bf.lshr5, 3, !dbg !12991
  %and = and i32 %bf.clear6, %neg, !dbg !12991
  %bf.load7 = load i32, i32* %6, align 8, !dbg !12991
  %bf.value8 = and i32 %and, 3, !dbg !12991
  %bf.shl9 = shl i32 %bf.value8, 11, !dbg !12991
  %bf.clear10 = and i32 %bf.load7, -6145, !dbg !12991
  %bf.set11 = or i32 %bf.clear10, %bf.shl9, !dbg !12991
  store i32 %bf.set11, i32* %6, align 8, !dbg !12991
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !12992
}

declare dso_local %union.tree_node* @fold_call_expr(i32, %union.tree_node*, i8 zeroext) #3

declare dso_local void @error(i8*, ...) #3

declare dso_local %union.tree_node* @build_empty_stmt(i32) #3

declare dso_local zeroext i8 @fold_builtin_next_arg(%union.tree_node*, i8 zeroext) #3

declare dso_local %union.tree_node* @build_call_array_loc(i32, %union.tree_node*, %union.tree_node*, i32, %union.tree_node**) #3

declare dso_local %union.tree_node** @tree_block(%union.tree_node*) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimplify_arg(%union.tree_node** %arg_p, %struct.gimple_seq_d** %pre_p, i32 %call_location) #0 !dbg !12993 {
entry:
  %arg_p.addr = alloca %union.tree_node**, align 8
  %pre_p.addr = alloca %struct.gimple_seq_d**, align 8
  %call_location.addr = alloca i32, align 4
  %test = alloca i8 (%union.tree_node*)*, align 8
  %fb = alloca i32, align 4
  store %union.tree_node** %arg_p, %union.tree_node*** %arg_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %arg_p.addr, metadata !12996, metadata !DIExpression()), !dbg !12997
  store %struct.gimple_seq_d** %pre_p, %struct.gimple_seq_d*** %pre_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %pre_p.addr, metadata !12998, metadata !DIExpression()), !dbg !12999
  store i32 %call_location, i32* %call_location.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %call_location.addr, metadata !13000, metadata !DIExpression()), !dbg !13001
  call void @llvm.dbg.declare(metadata i8 (%union.tree_node*)** %test, metadata !13002, metadata !DIExpression()), !dbg !13003
  call void @llvm.dbg.declare(metadata i32* %fb, metadata !13004, metadata !DIExpression()), !dbg !13005
  %0 = load %union.tree_node**, %union.tree_node*** %arg_p.addr, align 8, !dbg !13006
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !13006
  %common = bitcast %union.tree_node* %1 to %struct.tree_common*, !dbg !13006
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !13006
  %2 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !13006
  %call = call zeroext i8 @is_gimple_reg_type(%union.tree_node* %2), !dbg !13008
  %tobool = icmp ne i8 %call, 0, !dbg !13008
  br i1 %tobool, label %if.then, label %if.else, !dbg !13009

if.then:                                          ; preds = %entry
  store i8 (%union.tree_node*)* @is_gimple_val, i8 (%union.tree_node*)** %test, align 8, !dbg !13010
  store i32 1, i32* %fb, align 4, !dbg !13011
  br label %if.end, !dbg !13012

if.else:                                          ; preds = %entry
  store i8 (%union.tree_node*)* @is_gimple_lvalue, i8 (%union.tree_node*)** %test, align 8, !dbg !13013
  store i32 3, i32* %fb, align 4, !dbg !13014
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %3 = load %union.tree_node**, %union.tree_node*** %arg_p.addr, align 8, !dbg !13015
  call void @maybe_with_size_expr(%union.tree_node** %3), !dbg !13016
  %4 = load %union.tree_node**, %union.tree_node*** %arg_p.addr, align 8, !dbg !13017
  %5 = load %union.tree_node*, %union.tree_node** %4, align 8, !dbg !13018
  %6 = load i32, i32* %call_location.addr, align 4, !dbg !13019
  call void @protected_set_expr_location(%union.tree_node* %5, i32 %6), !dbg !13020
  %7 = load %union.tree_node**, %union.tree_node*** %arg_p.addr, align 8, !dbg !13021
  %8 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !13022
  %9 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** %test, align 8, !dbg !13023
  %10 = load i32, i32* %fb, align 4, !dbg !13024
  %call1 = call i32 @gimplify_expr(%union.tree_node** %7, %struct.gimple_seq_d** %8, %struct.gimple_seq_d** null, i8 (%union.tree_node*)* %9, i32 %10), !dbg !13025
  ret i32 %call1, !dbg !13026
}

declare dso_local void @error_at(i32, i8*, ...) #3

declare dso_local i32 @call_expr_flags(%union.tree_node*) #3

declare dso_local %union.gimple_statement_d* @gimple_build_call_from_tree(%union.tree_node*) #3

; Function Attrs: noinline nounwind uwtable
define internal void @maybe_with_size_expr(%union.tree_node** %expr_p) #0 !dbg !13027 {
entry:
  %expr_p.addr = alloca %union.tree_node**, align 8
  %expr = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  %size = alloca %union.tree_node*, align 8
  store %union.tree_node** %expr_p, %union.tree_node*** %expr_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %expr_p.addr, metadata !13028, metadata !DIExpression()), !dbg !13029
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr, metadata !13030, metadata !DIExpression()), !dbg !13031
  %0 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !13032
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !13033
  store %union.tree_node* %1, %union.tree_node** %expr, align 8, !dbg !13031
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !13034, metadata !DIExpression()), !dbg !13035
  %2 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !13036
  %common = bitcast %union.tree_node* %2 to %struct.tree_common*, !dbg !13036
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !13036
  %3 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !13036
  store %union.tree_node* %3, %union.tree_node** %type, align 8, !dbg !13035
  call void @llvm.dbg.declare(metadata %union.tree_node** %size, metadata !13037, metadata !DIExpression()), !dbg !13038
  %4 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !13039
  %base = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !13039
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !13039
  %bf.load = load i64, i64* %5, align 8, !dbg !13039
  %bf.clear = and i64 %bf.load, 65535, !dbg !13039
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !13039
  %cmp = icmp eq i32 %bf.cast, 150, !dbg !13041
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !13042

lor.lhs.false:                                    ; preds = %entry
  %6 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !13043
  %7 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !13044
  %cmp2 = icmp eq %union.tree_node* %6, %7, !dbg !13045
  br i1 %cmp2, label %if.then, label %if.end, !dbg !13046

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %return, !dbg !13047

if.end:                                           ; preds = %lor.lhs.false
  %8 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !13048
  %type3 = bitcast %union.tree_node* %8 to %struct.tree_type*, !dbg !13048
  %size_unit = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type3, i32 0, i32 3, !dbg !13048
  %9 = load %union.tree_node*, %union.tree_node** %size_unit, align 8, !dbg !13048
  store %union.tree_node* %9, %union.tree_node** %size, align 8, !dbg !13049
  %10 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !13050
  %tobool = icmp ne %union.tree_node* %10, null, !dbg !13050
  br i1 %tobool, label %lor.lhs.false4, label %if.then10, !dbg !13052

lor.lhs.false4:                                   ; preds = %if.end
  %11 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !13053
  %base5 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !13053
  %12 = bitcast %struct.tree_base* %base5 to i64*, !dbg !13053
  %bf.load6 = load i64, i64* %12, align 8, !dbg !13053
  %bf.clear7 = and i64 %bf.load6, 65535, !dbg !13053
  %bf.cast8 = trunc i64 %bf.clear7 to i32, !dbg !13053
  %cmp9 = icmp eq i32 %bf.cast8, 23, !dbg !13054
  br i1 %cmp9, label %if.then10, label %if.end11, !dbg !13055

if.then10:                                        ; preds = %lor.lhs.false4, %if.end
  br label %return, !dbg !13056

if.end11:                                         ; preds = %lor.lhs.false4
  %13 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !13057
  %call = call %union.tree_node* @unshare_expr(%union.tree_node* %13), !dbg !13058
  store %union.tree_node* %call, %union.tree_node** %size, align 8, !dbg !13059
  %14 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !13060
  %cmp12 = icmp eq %union.tree_node* %14, null, !dbg !13060
  br i1 %cmp12, label %cond.true, label %lor.lhs.false13, !dbg !13060

lor.lhs.false13:                                  ; preds = %if.end11
  %15 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !13060
  %base14 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !13060
  %16 = bitcast %struct.tree_base* %base14 to i64*, !dbg !13060
  %bf.load15 = load i64, i64* %16, align 8, !dbg !13060
  %bf.lshr = lshr i64 %bf.load15, 17, !dbg !13060
  %bf.clear16 = and i64 %bf.lshr, 1, !dbg !13060
  %bf.cast17 = trunc i64 %bf.clear16 to i32, !dbg !13060
  %tobool18 = icmp ne i32 %bf.cast17, 0, !dbg !13060
  br i1 %tobool18, label %cond.true, label %cond.false, !dbg !13060

cond.true:                                        ; preds = %lor.lhs.false13, %if.end11
  %17 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !13060
  br label %cond.end, !dbg !13060

cond.false:                                       ; preds = %lor.lhs.false13
  %18 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !13060
  %19 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !13060
  %call19 = call %union.tree_node* @substitute_placeholder_in_expr(%union.tree_node* %18, %union.tree_node* %19), !dbg !13060
  br label %cond.end, !dbg !13060

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %17, %cond.true ], [ %call19, %cond.false ], !dbg !13060
  store %union.tree_node* %cond, %union.tree_node** %size, align 8, !dbg !13061
  %20 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !13062
  %21 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !13062
  %22 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !13062
  %call20 = call %union.tree_node* @build2_stat(i32 150, %union.tree_node* %20, %union.tree_node* %21, %union.tree_node* %22), !dbg !13062
  %23 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !13063
  store %union.tree_node* %call20, %union.tree_node** %23, align 8, !dbg !13064
  br label %return, !dbg !13065

return:                                           ; preds = %cond.end, %if.then10, %if.then
  ret void, !dbg !13065
}

declare dso_local void @protected_set_expr_location(%union.tree_node*, i32) #3

declare dso_local %union.tree_node* @substitute_placeholder_in_expr(%union.tree_node*, %union.tree_node*) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimplify_modify_expr_rhs(%union.tree_node** %expr_p, %union.tree_node** %from_p, %union.tree_node** %to_p, %struct.gimple_seq_d** %pre_p, %struct.gimple_seq_d** %post_p, i8 zeroext %want_value) #0 !dbg !13066 {
entry:
  %retval = alloca i32, align 4
  %expr_p.addr = alloca %union.tree_node**, align 8
  %from_p.addr = alloca %union.tree_node**, align 8
  %to_p.addr = alloca %union.tree_node**, align 8
  %pre_p.addr = alloca %struct.gimple_seq_d**, align 8
  %post_p.addr = alloca %struct.gimple_seq_d**, align 8
  %want_value.addr = alloca i8, align 1
  %ret = alloca i32, align 4
  %old_from = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  %init = alloca %union.tree_node*, align 8
  %code = alloca i32, align 4
  %cond = alloca %union.tree_node*, align 8
  %result = alloca %union.tree_node*, align 8
  %use_target = alloca i8, align 1
  %wrap = alloca %union.tree_node*, align 8
  %t186 = alloca %union.tree_node*, align 8
  %complit = alloca %union.tree_node*, align 8
  %decl_s = alloca %union.tree_node*, align 8
  %decl = alloca %union.tree_node*, align 8
  %init211 = alloca %union.tree_node*, align 8
  store %union.tree_node** %expr_p, %union.tree_node*** %expr_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %expr_p.addr, metadata !13069, metadata !DIExpression()), !dbg !13070
  store %union.tree_node** %from_p, %union.tree_node*** %from_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %from_p.addr, metadata !13071, metadata !DIExpression()), !dbg !13072
  store %union.tree_node** %to_p, %union.tree_node*** %to_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %to_p.addr, metadata !13073, metadata !DIExpression()), !dbg !13074
  store %struct.gimple_seq_d** %pre_p, %struct.gimple_seq_d*** %pre_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %pre_p.addr, metadata !13075, metadata !DIExpression()), !dbg !13076
  store %struct.gimple_seq_d** %post_p, %struct.gimple_seq_d*** %post_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %post_p.addr, metadata !13077, metadata !DIExpression()), !dbg !13078
  store i8 %want_value, i8* %want_value.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %want_value.addr, metadata !13079, metadata !DIExpression()), !dbg !13080
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !13081, metadata !DIExpression()), !dbg !13082
  store i32 0, i32* %ret, align 4, !dbg !13082
  br label %while.cond, !dbg !13083

while.cond:                                       ; preds = %sw.epilog, %entry
  %0 = load i32, i32* %ret, align 4, !dbg !13084
  %cmp = icmp ne i32 %0, -1, !dbg !13085
  br i1 %cmp, label %while.body, label %while.end, !dbg !13083

while.body:                                       ; preds = %while.cond
  %1 = load %union.tree_node**, %union.tree_node*** %from_p.addr, align 8, !dbg !13086
  %2 = load %union.tree_node*, %union.tree_node** %1, align 8, !dbg !13086
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !13086
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !13086
  %bf.load = load i64, i64* %3, align 8, !dbg !13086
  %bf.clear = and i64 %bf.load, 65535, !dbg !13086
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !13086
  switch i32 %bf.cast, label %sw.default [
    i32 32, label %sw.bb
    i32 47, label %sw.bb34
    i32 55, label %sw.bb40
    i32 52, label %sw.bb54
    i32 51, label %sw.bb56
    i32 56, label %sw.bb58
    i32 59, label %sw.bb112
    i32 61, label %sw.bb185
    i32 58, label %sw.bb185
    i32 147, label %sw.bb185
    i32 119, label %sw.bb201
  ], !dbg !13087

sw.bb:                                            ; preds = %while.body
  %4 = load %union.tree_node**, %union.tree_node*** %from_p.addr, align 8, !dbg !13088
  %5 = load %union.tree_node*, %union.tree_node** %4, align 8, !dbg !13088
  %decl_common = bitcast %union.tree_node* %5 to %struct.tree_decl_common*, !dbg !13088
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 5, !dbg !13088
  %6 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !13088
  %tobool = icmp ne %union.tree_node* %6, null, !dbg !13088
  br i1 %tobool, label %land.lhs.true, label %if.end33, !dbg !13091

land.lhs.true:                                    ; preds = %sw.bb
  %7 = load %union.tree_node**, %union.tree_node*** %from_p.addr, align 8, !dbg !13092
  %8 = load %union.tree_node*, %union.tree_node** %7, align 8, !dbg !13092
  %base1 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !13092
  %9 = bitcast %struct.tree_base* %base1 to i64*, !dbg !13092
  %bf.load2 = load i64, i64* %9, align 8, !dbg !13092
  %bf.lshr = lshr i64 %bf.load2, 20, !dbg !13092
  %bf.clear3 = and i64 %bf.lshr, 1, !dbg !13092
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !13092
  %tobool5 = icmp ne i32 %bf.cast4, 0, !dbg !13092
  br i1 %tobool5, label %land.lhs.true6, label %if.end33, !dbg !13093

land.lhs.true6:                                   ; preds = %land.lhs.true
  %10 = load %union.tree_node**, %union.tree_node*** %from_p.addr, align 8, !dbg !13094
  %11 = load %union.tree_node*, %union.tree_node** %10, align 8, !dbg !13094
  %base7 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !13094
  %12 = bitcast %struct.tree_base* %base7 to i64*, !dbg !13094
  %bf.load8 = load i64, i64* %12, align 8, !dbg !13094
  %bf.lshr9 = lshr i64 %bf.load8, 19, !dbg !13094
  %bf.clear10 = and i64 %bf.lshr9, 1, !dbg !13094
  %bf.cast11 = trunc i64 %bf.clear10 to i32, !dbg !13094
  %tobool12 = icmp ne i32 %bf.cast11, 0, !dbg !13094
  br i1 %tobool12, label %if.end33, label %land.lhs.true13, !dbg !13095

land.lhs.true13:                                  ; preds = %land.lhs.true6
  %13 = load %union.tree_node**, %union.tree_node*** %to_p.addr, align 8, !dbg !13096
  %14 = load %union.tree_node*, %union.tree_node** %13, align 8, !dbg !13096
  %base14 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !13096
  %15 = bitcast %struct.tree_base* %base14 to i64*, !dbg !13096
  %bf.load15 = load i64, i64* %15, align 8, !dbg !13096
  %bf.lshr16 = lshr i64 %bf.load15, 19, !dbg !13096
  %bf.clear17 = and i64 %bf.lshr16, 1, !dbg !13096
  %bf.cast18 = trunc i64 %bf.clear17 to i32, !dbg !13096
  %tobool19 = icmp ne i32 %bf.cast18, 0, !dbg !13096
  br i1 %tobool19, label %if.end33, label %land.lhs.true20, !dbg !13097

land.lhs.true20:                                  ; preds = %land.lhs.true13
  %16 = load %union.tree_node**, %union.tree_node*** %from_p.addr, align 8, !dbg !13098
  %17 = load %union.tree_node*, %union.tree_node** %16, align 8, !dbg !13098
  %decl_common21 = bitcast %union.tree_node* %17 to %struct.tree_decl_common*, !dbg !13098
  %initial22 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common21, i32 0, i32 5, !dbg !13098
  %18 = load %union.tree_node*, %union.tree_node** %initial22, align 8, !dbg !13098
  %base23 = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !13098
  %19 = bitcast %struct.tree_base* %base23 to i64*, !dbg !13098
  %bf.load24 = load i64, i64* %19, align 8, !dbg !13098
  %bf.clear25 = and i64 %bf.load24, 65535, !dbg !13098
  %bf.cast26 = trunc i64 %bf.clear25 to i32, !dbg !13098
  %cmp27 = icmp eq i32 %bf.cast26, 51, !dbg !13099
  br i1 %cmp27, label %if.then, label %if.end33, !dbg !13100

if.then:                                          ; preds = %land.lhs.true20
  call void @llvm.dbg.declare(metadata %union.tree_node** %old_from, metadata !13101, metadata !DIExpression()), !dbg !13103
  %20 = load %union.tree_node**, %union.tree_node*** %from_p.addr, align 8, !dbg !13104
  %21 = load %union.tree_node*, %union.tree_node** %20, align 8, !dbg !13105
  store %union.tree_node* %21, %union.tree_node** %old_from, align 8, !dbg !13103
  %22 = load %union.tree_node**, %union.tree_node*** %from_p.addr, align 8, !dbg !13106
  %23 = load %union.tree_node*, %union.tree_node** %22, align 8, !dbg !13106
  %decl_common28 = bitcast %union.tree_node* %23 to %struct.tree_decl_common*, !dbg !13106
  %initial29 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common28, i32 0, i32 5, !dbg !13106
  %24 = load %union.tree_node*, %union.tree_node** %initial29, align 8, !dbg !13106
  %call = call %union.tree_node* @unshare_expr(%union.tree_node* %24), !dbg !13107
  %25 = load %union.tree_node**, %union.tree_node*** %from_p.addr, align 8, !dbg !13108
  store %union.tree_node* %call, %union.tree_node** %25, align 8, !dbg !13109
  %26 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !13110
  %call30 = call i32 @gimplify_init_constructor(%union.tree_node** %26, %struct.gimple_seq_d** null, %struct.gimple_seq_d** null, i8 zeroext 0, i8 zeroext 1), !dbg !13111
  store i32 %call30, i32* %ret, align 4, !dbg !13112
  %27 = load i32, i32* %ret, align 4, !dbg !13113
  %cmp31 = icmp eq i32 %27, -2, !dbg !13115
  br i1 %cmp31, label %if.then32, label %if.else, !dbg !13116

if.then32:                                        ; preds = %if.then
  %28 = load %union.tree_node*, %union.tree_node** %old_from, align 8, !dbg !13117
  %29 = load %union.tree_node**, %union.tree_node*** %from_p.addr, align 8, !dbg !13119
  store %union.tree_node* %28, %union.tree_node** %29, align 8, !dbg !13120
  br label %if.end, !dbg !13121

if.else:                                          ; preds = %if.then
  store i32 0, i32* %ret, align 4, !dbg !13122
  br label %sw.epilog, !dbg !13124

if.end:                                           ; preds = %if.then32
  br label %if.end33, !dbg !13125

if.end33:                                         ; preds = %if.end, %land.lhs.true20, %land.lhs.true13, %land.lhs.true6, %land.lhs.true, %sw.bb
  store i32 -1, i32* %ret, align 4, !dbg !13126
  br label %sw.epilog, !dbg !13127

sw.bb34:                                          ; preds = %while.body
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !13128, metadata !DIExpression()), !dbg !13130
  %30 = load %union.tree_node**, %union.tree_node*** %from_p.addr, align 8, !dbg !13131
  %31 = load %union.tree_node*, %union.tree_node** %30, align 8, !dbg !13131
  %exp = bitcast %union.tree_node* %31 to %struct.tree_exp*, !dbg !13131
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !13131
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !13131
  %32 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !13131
  %call35 = call %union.tree_node* @gimple_fold_indirect_ref_rhs(%union.tree_node* %32), !dbg !13132
  store %union.tree_node* %call35, %union.tree_node** %t, align 8, !dbg !13130
  %33 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !13133
  %tobool36 = icmp ne %union.tree_node* %33, null, !dbg !13133
  br i1 %tobool36, label %if.then37, label %if.else38, !dbg !13135

if.then37:                                        ; preds = %sw.bb34
  %34 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !13136
  %35 = load %union.tree_node**, %union.tree_node*** %from_p.addr, align 8, !dbg !13138
  store %union.tree_node* %34, %union.tree_node** %35, align 8, !dbg !13139
  store i32 0, i32* %ret, align 4, !dbg !13140
  br label %if.end39, !dbg !13141

if.else38:                                        ; preds = %sw.bb34
  store i32 -1, i32* %ret, align 4, !dbg !13142
  br label %if.end39

if.end39:                                         ; preds = %if.else38, %if.then37
  br label %sw.epilog, !dbg !13143

sw.bb40:                                          ; preds = %while.body
  call void @llvm.dbg.declare(metadata %union.tree_node** %init, metadata !13144, metadata !DIExpression()), !dbg !13146
  %36 = load %union.tree_node**, %union.tree_node*** %from_p.addr, align 8, !dbg !13147
  %37 = load %union.tree_node*, %union.tree_node** %36, align 8, !dbg !13147
  %exp41 = bitcast %union.tree_node* %37 to %struct.tree_exp*, !dbg !13147
  %operands42 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp41, i32 0, i32 3, !dbg !13147
  %arrayidx43 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands42, i64 0, i64 1, !dbg !13147
  %38 = load %union.tree_node*, %union.tree_node** %arrayidx43, align 8, !dbg !13147
  store %union.tree_node* %38, %union.tree_node** %init, align 8, !dbg !13146
  %39 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !13148
  %tobool44 = icmp ne %union.tree_node* %39, null, !dbg !13148
  br i1 %tobool44, label %land.lhs.true45, label %if.else52, !dbg !13150

land.lhs.true45:                                  ; preds = %sw.bb40
  %40 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !13151
  %common = bitcast %union.tree_node* %40 to %struct.tree_common*, !dbg !13151
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !13151
  %41 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !13151
  %base46 = bitcast %union.tree_node* %41 to %struct.tree_base*, !dbg !13151
  %42 = bitcast %struct.tree_base* %base46 to i64*, !dbg !13151
  %bf.load47 = load i64, i64* %42, align 8, !dbg !13151
  %bf.clear48 = and i64 %bf.load47, 65535, !dbg !13151
  %bf.cast49 = trunc i64 %bf.clear48 to i32, !dbg !13151
  %cmp50 = icmp eq i32 %bf.cast49, 19, !dbg !13151
  br i1 %cmp50, label %if.else52, label %if.then51, !dbg !13152

if.then51:                                        ; preds = %land.lhs.true45
  %43 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !13153
  %44 = load %union.tree_node**, %union.tree_node*** %from_p.addr, align 8, !dbg !13155
  store %union.tree_node* %43, %union.tree_node** %44, align 8, !dbg !13156
  store i32 0, i32* %ret, align 4, !dbg !13157
  br label %if.end53, !dbg !13158

if.else52:                                        ; preds = %land.lhs.true45, %sw.bb40
  store i32 -1, i32* %ret, align 4, !dbg !13159
  br label %if.end53

if.end53:                                         ; preds = %if.else52, %if.then51
  br label %sw.epilog, !dbg !13160

sw.bb54:                                          ; preds = %while.body
  %45 = load %union.tree_node**, %union.tree_node*** %from_p.addr, align 8, !dbg !13161
  %46 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !13162
  %call55 = call i32 @gimplify_compound_expr(%union.tree_node** %45, %struct.gimple_seq_d** %46, i8 zeroext 1), !dbg !13163
  store i32 0, i32* %ret, align 4, !dbg !13164
  br label %sw.epilog, !dbg !13165

sw.bb56:                                          ; preds = %while.body
  %47 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !13166
  %48 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !13167
  %49 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !13168
  %50 = load i8, i8* %want_value.addr, align 1, !dbg !13169
  %call57 = call i32 @gimplify_init_constructor(%union.tree_node** %47, %struct.gimple_seq_d** %48, %struct.gimple_seq_d** %49, i8 zeroext %50, i8 zeroext 0), !dbg !13170
  store i32 %call57, i32* %retval, align 4, !dbg !13171
  br label %return, !dbg !13171

sw.bb58:                                          ; preds = %while.body
  %51 = load %union.tree_node**, %union.tree_node*** %from_p.addr, align 8, !dbg !13172
  %52 = load %union.tree_node*, %union.tree_node** %51, align 8, !dbg !13172
  %common59 = bitcast %union.tree_node* %52 to %struct.tree_common*, !dbg !13172
  %type60 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common59, i32 0, i32 2, !dbg !13172
  %53 = load %union.tree_node*, %union.tree_node** %type60, align 8, !dbg !13172
  %call61 = call zeroext i8 @is_gimple_reg_type(%union.tree_node* %53), !dbg !13174
  %tobool62 = icmp ne i8 %call61, 0, !dbg !13174
  br i1 %tobool62, label %if.else110, label %if.then63, !dbg !13175

if.then63:                                        ; preds = %sw.bb58
  call void @llvm.dbg.declare(metadata i32* %code, metadata !13176, metadata !DIExpression()), !dbg !13178
  %54 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !13179
  %55 = load %union.tree_node*, %union.tree_node** %54, align 8, !dbg !13179
  %base64 = bitcast %union.tree_node* %55 to %struct.tree_base*, !dbg !13179
  %56 = bitcast %struct.tree_base* %base64 to i64*, !dbg !13179
  %bf.load65 = load i64, i64* %56, align 8, !dbg !13179
  %bf.clear66 = and i64 %bf.load65, 65535, !dbg !13179
  %bf.cast67 = trunc i64 %bf.clear66 to i32, !dbg !13179
  store i32 %bf.cast67, i32* %code, align 4, !dbg !13178
  call void @llvm.dbg.declare(metadata %union.tree_node** %cond, metadata !13180, metadata !DIExpression()), !dbg !13181
  %57 = load %union.tree_node**, %union.tree_node*** %from_p.addr, align 8, !dbg !13182
  %58 = load %union.tree_node*, %union.tree_node** %57, align 8, !dbg !13183
  store %union.tree_node* %58, %union.tree_node** %cond, align 8, !dbg !13181
  call void @llvm.dbg.declare(metadata %union.tree_node** %result, metadata !13184, metadata !DIExpression()), !dbg !13185
  %59 = load %union.tree_node**, %union.tree_node*** %to_p.addr, align 8, !dbg !13186
  %60 = load %union.tree_node*, %union.tree_node** %59, align 8, !dbg !13187
  store %union.tree_node* %60, %union.tree_node** %result, align 8, !dbg !13185
  %61 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !13188
  %62 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !13189
  %call68 = call i32 @gimplify_expr(%union.tree_node** %result, %struct.gimple_seq_d** %61, %struct.gimple_seq_d** %62, i8 (%union.tree_node*)* @is_gimple_lvalue, i32 2), !dbg !13190
  store i32 %call68, i32* %ret, align 4, !dbg !13191
  %63 = load i32, i32* %ret, align 4, !dbg !13192
  %cmp69 = icmp ne i32 %63, -2, !dbg !13194
  br i1 %cmp69, label %if.then70, label %if.end71, !dbg !13195

if.then70:                                        ; preds = %if.then63
  store i32 0, i32* %ret, align 4, !dbg !13196
  br label %if.end71, !dbg !13197

if.end71:                                         ; preds = %if.then70, %if.then63
  %64 = load %union.tree_node*, %union.tree_node** %cond, align 8, !dbg !13198
  %exp72 = bitcast %union.tree_node* %64 to %struct.tree_exp*, !dbg !13198
  %operands73 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp72, i32 0, i32 3, !dbg !13198
  %arrayidx74 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands73, i64 0, i64 1, !dbg !13198
  %65 = load %union.tree_node*, %union.tree_node** %arrayidx74, align 8, !dbg !13198
  %common75 = bitcast %union.tree_node* %65 to %struct.tree_common*, !dbg !13198
  %type76 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common75, i32 0, i32 2, !dbg !13198
  %66 = load %union.tree_node*, %union.tree_node** %type76, align 8, !dbg !13198
  %67 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !13200
  %cmp77 = icmp ne %union.tree_node* %66, %67, !dbg !13201
  br i1 %cmp77, label %if.then78, label %if.end86, !dbg !13202

if.then78:                                        ; preds = %if.end71
  %68 = load i32, i32* %code, align 4, !dbg !13203
  %69 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !13203
  %70 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !13203
  %71 = load %union.tree_node*, %union.tree_node** %cond, align 8, !dbg !13203
  %exp79 = bitcast %union.tree_node* %71 to %struct.tree_exp*, !dbg !13203
  %operands80 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp79, i32 0, i32 3, !dbg !13203
  %arrayidx81 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands80, i64 0, i64 1, !dbg !13203
  %72 = load %union.tree_node*, %union.tree_node** %arrayidx81, align 8, !dbg !13203
  %call82 = call %union.tree_node* @build2_stat(i32 %68, %union.tree_node* %69, %union.tree_node* %70, %union.tree_node* %72), !dbg !13203
  %73 = load %union.tree_node*, %union.tree_node** %cond, align 8, !dbg !13204
  %exp83 = bitcast %union.tree_node* %73 to %struct.tree_exp*, !dbg !13204
  %operands84 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp83, i32 0, i32 3, !dbg !13204
  %arrayidx85 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands84, i64 0, i64 1, !dbg !13204
  store %union.tree_node* %call82, %union.tree_node** %arrayidx85, align 8, !dbg !13205
  br label %if.end86, !dbg !13204

if.end86:                                         ; preds = %if.then78, %if.end71
  %74 = load %union.tree_node*, %union.tree_node** %cond, align 8, !dbg !13206
  %exp87 = bitcast %union.tree_node* %74 to %struct.tree_exp*, !dbg !13206
  %operands88 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp87, i32 0, i32 3, !dbg !13206
  %arrayidx89 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands88, i64 0, i64 2, !dbg !13206
  %75 = load %union.tree_node*, %union.tree_node** %arrayidx89, align 8, !dbg !13206
  %common90 = bitcast %union.tree_node* %75 to %struct.tree_common*, !dbg !13206
  %type91 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common90, i32 0, i32 2, !dbg !13206
  %76 = load %union.tree_node*, %union.tree_node** %type91, align 8, !dbg !13206
  %77 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !13208
  %cmp92 = icmp ne %union.tree_node* %76, %77, !dbg !13209
  br i1 %cmp92, label %if.then93, label %if.end102, !dbg !13210

if.then93:                                        ; preds = %if.end86
  %78 = load i32, i32* %code, align 4, !dbg !13211
  %79 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !13211
  %80 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !13211
  %call94 = call %union.tree_node* @unshare_expr(%union.tree_node* %80), !dbg !13211
  %81 = load %union.tree_node*, %union.tree_node** %cond, align 8, !dbg !13211
  %exp95 = bitcast %union.tree_node* %81 to %struct.tree_exp*, !dbg !13211
  %operands96 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp95, i32 0, i32 3, !dbg !13211
  %arrayidx97 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands96, i64 0, i64 2, !dbg !13211
  %82 = load %union.tree_node*, %union.tree_node** %arrayidx97, align 8, !dbg !13211
  %call98 = call %union.tree_node* @build2_stat(i32 %78, %union.tree_node* %79, %union.tree_node* %call94, %union.tree_node* %82), !dbg !13211
  %83 = load %union.tree_node*, %union.tree_node** %cond, align 8, !dbg !13212
  %exp99 = bitcast %union.tree_node* %83 to %struct.tree_exp*, !dbg !13212
  %operands100 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp99, i32 0, i32 3, !dbg !13212
  %arrayidx101 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands100, i64 0, i64 2, !dbg !13212
  store %union.tree_node* %call98, %union.tree_node** %arrayidx101, align 8, !dbg !13213
  br label %if.end102, !dbg !13212

if.end102:                                        ; preds = %if.then93, %if.end86
  %84 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !13214
  %85 = load %union.tree_node*, %union.tree_node** %cond, align 8, !dbg !13215
  %common103 = bitcast %union.tree_node* %85 to %struct.tree_common*, !dbg !13215
  %type104 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common103, i32 0, i32 2, !dbg !13215
  store %union.tree_node* %84, %union.tree_node** %type104, align 8, !dbg !13216
  %86 = load %union.tree_node*, %union.tree_node** %cond, align 8, !dbg !13217
  call void @recalculate_side_effects(%union.tree_node* %86), !dbg !13218
  %87 = load i8, i8* %want_value.addr, align 1, !dbg !13219
  %tobool105 = icmp ne i8 %87, 0, !dbg !13219
  br i1 %tobool105, label %if.then106, label %if.else108, !dbg !13221

if.then106:                                       ; preds = %if.end102
  %88 = load %union.tree_node*, %union.tree_node** %cond, align 8, !dbg !13222
  %89 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !13224
  call void @gimplify_and_add(%union.tree_node* %88, %struct.gimple_seq_d** %89), !dbg !13225
  %90 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !13226
  %call107 = call %union.tree_node* @unshare_expr(%union.tree_node* %90), !dbg !13227
  %91 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !13228
  store %union.tree_node* %call107, %union.tree_node** %91, align 8, !dbg !13229
  br label %if.end109, !dbg !13230

if.else108:                                       ; preds = %if.end102
  %92 = load %union.tree_node*, %union.tree_node** %cond, align 8, !dbg !13231
  %93 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !13232
  store %union.tree_node* %92, %union.tree_node** %93, align 8, !dbg !13233
  br label %if.end109

if.end109:                                        ; preds = %if.else108, %if.then106
  %94 = load i32, i32* %ret, align 4, !dbg !13234
  store i32 %94, i32* %retval, align 4, !dbg !13235
  br label %return, !dbg !13235

if.else110:                                       ; preds = %sw.bb58
  store i32 -1, i32* %ret, align 4, !dbg !13236
  br label %if.end111

if.end111:                                        ; preds = %if.else110
  br label %sw.epilog, !dbg !13237

sw.bb112:                                         ; preds = %while.body
  %95 = load %union.tree_node**, %union.tree_node*** %from_p.addr, align 8, !dbg !13238
  %96 = load %union.tree_node*, %union.tree_node** %95, align 8, !dbg !13238
  %base113 = bitcast %union.tree_node* %96 to %struct.tree_base*, !dbg !13238
  %97 = bitcast %struct.tree_base* %base113 to i64*, !dbg !13238
  %bf.load114 = load i64, i64* %97, align 8, !dbg !13238
  %bf.lshr115 = lshr i64 %bf.load114, 28, !dbg !13238
  %bf.clear116 = and i64 %bf.lshr115, 1, !dbg !13238
  %bf.cast117 = trunc i64 %bf.clear116 to i32, !dbg !13238
  %tobool118 = icmp ne i32 %bf.cast117, 0, !dbg !13238
  br i1 %tobool118, label %if.end184, label %land.lhs.true119, !dbg !13240

land.lhs.true119:                                 ; preds = %sw.bb112
  %98 = load %union.tree_node**, %union.tree_node*** %from_p.addr, align 8, !dbg !13241
  %99 = load %union.tree_node*, %union.tree_node** %98, align 8, !dbg !13242
  %100 = load %union.tree_node**, %union.tree_node*** %from_p.addr, align 8, !dbg !13243
  %101 = load %union.tree_node*, %union.tree_node** %100, align 8, !dbg !13244
  %call120 = call i32 @aggregate_value_p(%union.tree_node* %99, %union.tree_node* %101), !dbg !13245
  %tobool121 = icmp ne i32 %call120, 0, !dbg !13245
  br i1 %tobool121, label %if.then122, label %if.end184, !dbg !13246

if.then122:                                       ; preds = %land.lhs.true119
  call void @llvm.dbg.declare(metadata i8* %use_target, metadata !13247, metadata !DIExpression()), !dbg !13249
  %102 = load %union.tree_node**, %union.tree_node*** %to_p.addr, align 8, !dbg !13250
  %103 = load %union.tree_node*, %union.tree_node** %102, align 8, !dbg !13252
  %call123 = call i8 (%union.tree_node*)* @rhs_predicate_for(%union.tree_node* %103), !dbg !13253
  %104 = load %union.tree_node**, %union.tree_node*** %from_p.addr, align 8, !dbg !13254
  %105 = load %union.tree_node*, %union.tree_node** %104, align 8, !dbg !13255
  %call124 = call zeroext i8 %call123(%union.tree_node* %105), !dbg !13256
  %tobool125 = icmp ne i8 %call124, 0, !dbg !13256
  br i1 %tobool125, label %if.else127, label %if.then126, !dbg !13257

if.then126:                                       ; preds = %if.then122
  store i8 0, i8* %use_target, align 1, !dbg !13258
  br label %if.end177, !dbg !13259

if.else127:                                       ; preds = %if.then122
  %106 = load %union.tree_node**, %union.tree_node*** %to_p.addr, align 8, !dbg !13260
  %107 = load %union.tree_node*, %union.tree_node** %106, align 8, !dbg !13260
  %base128 = bitcast %union.tree_node* %107 to %struct.tree_base*, !dbg !13260
  %108 = bitcast %struct.tree_base* %base128 to i64*, !dbg !13260
  %bf.load129 = load i64, i64* %108, align 8, !dbg !13260
  %bf.clear130 = and i64 %bf.load129, 65535, !dbg !13260
  %bf.cast131 = trunc i64 %bf.clear130 to i32, !dbg !13260
  %cmp132 = icmp eq i32 %bf.cast131, 36, !dbg !13262
  br i1 %cmp132, label %land.lhs.true133, label %if.else139, !dbg !13263

land.lhs.true133:                                 ; preds = %if.else127
  %109 = load %union.tree_node**, %union.tree_node*** %to_p.addr, align 8, !dbg !13264
  %110 = load %union.tree_node*, %union.tree_node** %109, align 8, !dbg !13264
  %decl_minimal = bitcast %union.tree_node* %110 to %struct.tree_decl_minimal*, !dbg !13264
  %name = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 3, !dbg !13264
  %111 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !13264
  %cmp134 = icmp eq %union.tree_node* %111, null, !dbg !13265
  br i1 %cmp134, label %land.lhs.true135, label %if.else139, !dbg !13266

land.lhs.true135:                                 ; preds = %land.lhs.true133
  %112 = load %union.tree_node**, %union.tree_node*** %to_p.addr, align 8, !dbg !13267
  %113 = load %union.tree_node*, %union.tree_node** %112, align 8, !dbg !13268
  %call136 = call zeroext i8 @needs_to_live_in_memory(%union.tree_node* %113), !dbg !13269
  %conv = zext i8 %call136 to i32, !dbg !13269
  %tobool137 = icmp ne i32 %conv, 0, !dbg !13269
  br i1 %tobool137, label %if.then138, label %if.else139, !dbg !13270

if.then138:                                       ; preds = %land.lhs.true135
  store i8 1, i8* %use_target, align 1, !dbg !13271
  br label %if.end176, !dbg !13272

if.else139:                                       ; preds = %land.lhs.true135, %land.lhs.true133, %if.else127
  %114 = load %union.tree_node**, %union.tree_node*** %to_p.addr, align 8, !dbg !13273
  %115 = load %union.tree_node*, %union.tree_node** %114, align 8, !dbg !13273
  %common140 = bitcast %union.tree_node* %115 to %struct.tree_common*, !dbg !13273
  %type141 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common140, i32 0, i32 2, !dbg !13273
  %116 = load %union.tree_node*, %union.tree_node** %type141, align 8, !dbg !13273
  %call142 = call zeroext i8 @is_gimple_reg_type(%union.tree_node* %116), !dbg !13275
  %conv143 = zext i8 %call142 to i32, !dbg !13275
  %tobool144 = icmp ne i32 %conv143, 0, !dbg !13275
  br i1 %tobool144, label %if.then159, label %lor.lhs.false, !dbg !13276

lor.lhs.false:                                    ; preds = %if.else139
  %117 = load %union.tree_node**, %union.tree_node*** %to_p.addr, align 8, !dbg !13277
  %118 = load %union.tree_node*, %union.tree_node** %117, align 8, !dbg !13277
  %base145 = bitcast %union.tree_node* %118 to %struct.tree_base*, !dbg !13277
  %119 = bitcast %struct.tree_base* %base145 to i64*, !dbg !13277
  %bf.load146 = load i64, i64* %119, align 8, !dbg !13277
  %bf.clear147 = and i64 %bf.load146, 65535, !dbg !13277
  %bf.cast148 = trunc i64 %bf.clear147 to i32, !dbg !13277
  %idxprom = sext i32 %bf.cast148 to i64, !dbg !13277
  %arrayidx149 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !13277
  %120 = load i32, i32* %arrayidx149, align 4, !dbg !13277
  %cmp150 = icmp eq i32 %120, 3, !dbg !13277
  br i1 %cmp150, label %land.lhs.true152, label %if.else160, !dbg !13278

land.lhs.true152:                                 ; preds = %lor.lhs.false
  %121 = load %union.tree_node**, %union.tree_node*** %to_p.addr, align 8, !dbg !13279
  %122 = load %union.tree_node*, %union.tree_node** %121, align 8, !dbg !13279
  %decl_common153 = bitcast %union.tree_node* %122 to %struct.tree_decl_common*, !dbg !13279
  %decl_flag_0 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common153, i32 0, i32 2, !dbg !13279
  %123 = bitcast i40* %decl_flag_0 to i64*, !dbg !13279
  %bf.load154 = load i64, i64* %123, align 8, !dbg !13279
  %bf.lshr155 = lshr i64 %bf.load154, 24, !dbg !13279
  %bf.clear156 = and i64 %bf.lshr155, 1, !dbg !13279
  %bf.cast157 = trunc i64 %bf.clear156 to i32, !dbg !13279
  %tobool158 = icmp ne i32 %bf.cast157, 0, !dbg !13279
  br i1 %tobool158, label %if.then159, label %if.else160, !dbg !13280

if.then159:                                       ; preds = %land.lhs.true152, %if.else139
  store i8 0, i8* %use_target, align 1, !dbg !13281
  br label %if.end175, !dbg !13282

if.else160:                                       ; preds = %land.lhs.true152, %lor.lhs.false
  %124 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !13283
  %125 = load %union.tree_node*, %union.tree_node** %124, align 8, !dbg !13283
  %base161 = bitcast %union.tree_node* %125 to %struct.tree_base*, !dbg !13283
  %126 = bitcast %struct.tree_base* %base161 to i64*, !dbg !13283
  %bf.load162 = load i64, i64* %126, align 8, !dbg !13283
  %bf.clear163 = and i64 %bf.load162, 65535, !dbg !13283
  %bf.cast164 = trunc i64 %bf.clear163 to i32, !dbg !13283
  %cmp165 = icmp eq i32 %bf.cast164, 54, !dbg !13285
  br i1 %cmp165, label %if.then167, label %if.else168, !dbg !13286

if.then167:                                       ; preds = %if.else160
  store i8 1, i8* %use_target, align 1, !dbg !13287
  br label %if.end174, !dbg !13288

if.else168:                                       ; preds = %if.else160
  %127 = load %union.tree_node**, %union.tree_node*** %to_p.addr, align 8, !dbg !13289
  %128 = load %union.tree_node*, %union.tree_node** %127, align 8, !dbg !13291
  %call169 = call zeroext i8 @is_gimple_non_addressable(%union.tree_node* %128), !dbg !13292
  %tobool170 = icmp ne i8 %call169, 0, !dbg !13292
  br i1 %tobool170, label %if.else172, label %if.then171, !dbg !13293

if.then171:                                       ; preds = %if.else168
  store i8 0, i8* %use_target, align 1, !dbg !13294
  br label %if.end173, !dbg !13295

if.else172:                                       ; preds = %if.else168
  store i8 1, i8* %use_target, align 1, !dbg !13296
  br label %if.end173

if.end173:                                        ; preds = %if.else172, %if.then171
  br label %if.end174

if.end174:                                        ; preds = %if.end173, %if.then167
  br label %if.end175

if.end175:                                        ; preds = %if.end174, %if.then159
  br label %if.end176

if.end176:                                        ; preds = %if.end175, %if.then138
  br label %if.end177

if.end177:                                        ; preds = %if.end176, %if.then126
  %129 = load i8, i8* %use_target, align 1, !dbg !13297
  %tobool178 = icmp ne i8 %129, 0, !dbg !13297
  br i1 %tobool178, label %if.then179, label %if.end183, !dbg !13299

if.then179:                                       ; preds = %if.end177
  %130 = load %union.tree_node**, %union.tree_node*** %from_p.addr, align 8, !dbg !13300
  %131 = load %union.tree_node*, %union.tree_node** %130, align 8, !dbg !13300
  %base180 = bitcast %union.tree_node* %131 to %struct.tree_base*, !dbg !13300
  %132 = bitcast %struct.tree_base* %base180 to i64*, !dbg !13300
  %bf.load181 = load i64, i64* %132, align 8, !dbg !13302
  %bf.clear182 = and i64 %bf.load181, -268435457, !dbg !13302
  %bf.set = or i64 %bf.clear182, 268435456, !dbg !13302
  store i64 %bf.set, i64* %132, align 8, !dbg !13302
  %133 = load %union.tree_node**, %union.tree_node*** %to_p.addr, align 8, !dbg !13303
  %134 = load %union.tree_node*, %union.tree_node** %133, align 8, !dbg !13304
  call void @mark_addressable(%union.tree_node* %134), !dbg !13305
  br label %if.end183, !dbg !13306

if.end183:                                        ; preds = %if.then179, %if.end177
  br label %if.end184, !dbg !13307

if.end184:                                        ; preds = %if.end183, %land.lhs.true119, %sw.bb112
  store i32 -1, i32* %ret, align 4, !dbg !13308
  br label %sw.epilog, !dbg !13309

sw.bb185:                                         ; preds = %while.body, %while.body, %while.body
  call void @llvm.dbg.declare(metadata %union.tree_node** %wrap, metadata !13310, metadata !DIExpression()), !dbg !13312
  %135 = load %union.tree_node**, %union.tree_node*** %from_p.addr, align 8, !dbg !13313
  %136 = load %union.tree_node*, %union.tree_node** %135, align 8, !dbg !13314
  store %union.tree_node* %136, %union.tree_node** %wrap, align 8, !dbg !13312
  call void @llvm.dbg.declare(metadata %union.tree_node** %t186, metadata !13315, metadata !DIExpression()), !dbg !13316
  %137 = load %union.tree_node**, %union.tree_node*** %to_p.addr, align 8, !dbg !13317
  %138 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !13318
  %139 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !13319
  %call187 = call i32 @gimplify_expr(%union.tree_node** %137, %struct.gimple_seq_d** %138, %struct.gimple_seq_d** %139, i8 (%union.tree_node*)* @is_gimple_min_lval, i32 2), !dbg !13320
  store i32 %call187, i32* %ret, align 4, !dbg !13321
  %140 = load i32, i32* %ret, align 4, !dbg !13322
  %cmp188 = icmp ne i32 %140, -2, !dbg !13324
  br i1 %cmp188, label %if.then190, label %if.end191, !dbg !13325

if.then190:                                       ; preds = %sw.bb185
  store i32 0, i32* %ret, align 4, !dbg !13326
  br label %if.end191, !dbg !13327

if.end191:                                        ; preds = %if.then190, %sw.bb185
  %141 = load %union.tree_node*, %union.tree_node** %wrap, align 8, !dbg !13328
  %142 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !13329
  %143 = load %union.tree_node*, %union.tree_node** %142, align 8, !dbg !13330
  %call192 = call %union.tree_node* @voidify_wrapper_expr(%union.tree_node* %141, %union.tree_node* %143), !dbg !13331
  store %union.tree_node* %call192, %union.tree_node** %t186, align 8, !dbg !13332
  %144 = load %union.tree_node*, %union.tree_node** %t186, align 8, !dbg !13333
  %145 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !13333
  %146 = load %union.tree_node*, %union.tree_node** %145, align 8, !dbg !13333
  %cmp193 = icmp eq %union.tree_node* %144, %146, !dbg !13333
  br i1 %cmp193, label %cond.false, label %cond.true, !dbg !13333

cond.true:                                        ; preds = %if.end191
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 4301, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !13333
  br label %cond.end, !dbg !13333

cond.false:                                       ; preds = %if.end191
  br label %cond.end, !dbg !13333

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond195 = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !13333
  %147 = load i8, i8* %want_value.addr, align 1, !dbg !13334
  %tobool196 = icmp ne i8 %147, 0, !dbg !13334
  br i1 %tobool196, label %if.then197, label %if.else199, !dbg !13336

if.then197:                                       ; preds = %cond.end
  %148 = load %union.tree_node*, %union.tree_node** %wrap, align 8, !dbg !13337
  %149 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !13339
  call void @gimplify_and_add(%union.tree_node* %148, %struct.gimple_seq_d** %149), !dbg !13340
  %150 = load %union.tree_node**, %union.tree_node*** %to_p.addr, align 8, !dbg !13341
  %151 = load %union.tree_node*, %union.tree_node** %150, align 8, !dbg !13342
  %call198 = call %union.tree_node* @unshare_expr(%union.tree_node* %151), !dbg !13343
  %152 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !13344
  store %union.tree_node* %call198, %union.tree_node** %152, align 8, !dbg !13345
  br label %if.end200, !dbg !13346

if.else199:                                       ; preds = %cond.end
  %153 = load %union.tree_node*, %union.tree_node** %wrap, align 8, !dbg !13347
  %154 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !13348
  store %union.tree_node* %153, %union.tree_node** %154, align 8, !dbg !13349
  br label %if.end200

if.end200:                                        ; preds = %if.else199, %if.then197
  store i32 0, i32* %retval, align 4, !dbg !13350
  br label %return, !dbg !13350

sw.bb201:                                         ; preds = %while.body
  call void @llvm.dbg.declare(metadata %union.tree_node** %complit, metadata !13351, metadata !DIExpression()), !dbg !13353
  %155 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !13354
  %156 = load %union.tree_node*, %union.tree_node** %155, align 8, !dbg !13354
  %exp202 = bitcast %union.tree_node* %156 to %struct.tree_exp*, !dbg !13354
  %operands203 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp202, i32 0, i32 3, !dbg !13354
  %arrayidx204 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands203, i64 0, i64 1, !dbg !13354
  %157 = load %union.tree_node*, %union.tree_node** %arrayidx204, align 8, !dbg !13354
  store %union.tree_node* %157, %union.tree_node** %complit, align 8, !dbg !13353
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl_s, metadata !13355, metadata !DIExpression()), !dbg !13356
  %158 = load %union.tree_node*, %union.tree_node** %complit, align 8, !dbg !13357
  %exp205 = bitcast %union.tree_node* %158 to %struct.tree_exp*, !dbg !13357
  %operands206 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp205, i32 0, i32 3, !dbg !13357
  %arrayidx207 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands206, i64 0, i64 0, !dbg !13357
  %159 = load %union.tree_node*, %union.tree_node** %arrayidx207, align 8, !dbg !13357
  store %union.tree_node* %159, %union.tree_node** %decl_s, align 8, !dbg !13356
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !13358, metadata !DIExpression()), !dbg !13359
  %160 = load %union.tree_node*, %union.tree_node** %decl_s, align 8, !dbg !13360
  %exp208 = bitcast %union.tree_node* %160 to %struct.tree_exp*, !dbg !13360
  %operands209 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp208, i32 0, i32 3, !dbg !13360
  %arrayidx210 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands209, i64 0, i64 0, !dbg !13360
  %161 = load %union.tree_node*, %union.tree_node** %arrayidx210, align 8, !dbg !13360
  store %union.tree_node* %161, %union.tree_node** %decl, align 8, !dbg !13359
  call void @llvm.dbg.declare(metadata %union.tree_node** %init211, metadata !13361, metadata !DIExpression()), !dbg !13362
  %162 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !13363
  %decl_common212 = bitcast %union.tree_node* %162 to %struct.tree_decl_common*, !dbg !13363
  %initial213 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common212, i32 0, i32 5, !dbg !13363
  %163 = load %union.tree_node*, %union.tree_node** %initial213, align 8, !dbg !13363
  store %union.tree_node* %163, %union.tree_node** %init211, align 8, !dbg !13362
  %164 = load %union.tree_node*, %union.tree_node** %complit, align 8, !dbg !13364
  %base214 = bitcast %union.tree_node* %164 to %struct.tree_base*, !dbg !13364
  %165 = bitcast %struct.tree_base* %base214 to i64*, !dbg !13364
  %bf.load215 = load i64, i64* %165, align 8, !dbg !13364
  %bf.lshr216 = lshr i64 %bf.load215, 18, !dbg !13364
  %bf.clear217 = and i64 %bf.lshr216, 1, !dbg !13364
  %bf.cast218 = trunc i64 %bf.clear217 to i32, !dbg !13364
  %tobool219 = icmp ne i32 %bf.cast218, 0, !dbg !13364
  br i1 %tobool219, label %if.end234, label %land.lhs.true220, !dbg !13366

land.lhs.true220:                                 ; preds = %sw.bb201
  %166 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !13367
  %base221 = bitcast %union.tree_node* %166 to %struct.tree_base*, !dbg !13367
  %167 = bitcast %struct.tree_base* %base221 to i64*, !dbg !13367
  %bf.load222 = load i64, i64* %167, align 8, !dbg !13367
  %bf.lshr223 = lshr i64 %bf.load222, 18, !dbg !13367
  %bf.clear224 = and i64 %bf.lshr223, 1, !dbg !13367
  %bf.cast225 = trunc i64 %bf.clear224 to i32, !dbg !13367
  %tobool226 = icmp ne i32 %bf.cast225, 0, !dbg !13367
  br i1 %tobool226, label %if.end234, label %land.lhs.true227, !dbg !13368

land.lhs.true227:                                 ; preds = %land.lhs.true220
  %168 = load %union.tree_node*, %union.tree_node** %init211, align 8, !dbg !13369
  %tobool228 = icmp ne %union.tree_node* %168, null, !dbg !13369
  br i1 %tobool228, label %if.then229, label %if.end234, !dbg !13370

if.then229:                                       ; preds = %land.lhs.true227
  %169 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !13371
  %170 = load %union.tree_node*, %union.tree_node** %169, align 8, !dbg !13371
  %call230 = call %union.tree_node* @copy_node_stat(%union.tree_node* %170), !dbg !13371
  %171 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !13373
  store %union.tree_node* %call230, %union.tree_node** %171, align 8, !dbg !13374
  %172 = load %union.tree_node*, %union.tree_node** %init211, align 8, !dbg !13375
  %173 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !13376
  %174 = load %union.tree_node*, %union.tree_node** %173, align 8, !dbg !13376
  %exp231 = bitcast %union.tree_node* %174 to %struct.tree_exp*, !dbg !13376
  %operands232 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp231, i32 0, i32 3, !dbg !13376
  %arrayidx233 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands232, i64 0, i64 1, !dbg !13376
  store %union.tree_node* %172, %union.tree_node** %arrayidx233, align 8, !dbg !13377
  store i32 0, i32* %retval, align 4, !dbg !13378
  br label %return, !dbg !13378

if.end234:                                        ; preds = %land.lhs.true227, %land.lhs.true220, %sw.bb201
  br label %sw.default, !dbg !13379

sw.default:                                       ; preds = %while.body, %if.end234
  store i32 -1, i32* %ret, align 4, !dbg !13380
  br label %sw.epilog, !dbg !13381

sw.epilog:                                        ; preds = %sw.default, %if.end184, %if.end111, %sw.bb54, %if.end53, %if.end39, %if.end33, %if.else
  br label %while.cond, !dbg !13083, !llvm.loop !13382

while.end:                                        ; preds = %while.cond
  %175 = load i32, i32* %ret, align 4, !dbg !13384
  store i32 %175, i32* %retval, align 4, !dbg !13385
  br label %return, !dbg !13385

return:                                           ; preds = %while.end, %if.then229, %if.end200, %if.end109, %sw.bb56
  %176 = load i32, i32* %retval, align 4, !dbg !13386
  ret i32 %176, !dbg !13386
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @zero_sized_type(%union.tree_node* %type) #0 !dbg !13387 {
entry:
  %retval = alloca i8, align 1
  %type.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !13388, metadata !DIExpression()), !dbg !13389
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !13390
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !13390
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !13390
  %bf.load = load i64, i64* %1, align 8, !dbg !13390
  %bf.clear = and i64 %bf.load, 65535, !dbg !13390
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !13390
  %cmp = icmp eq i32 %bf.cast, 15, !dbg !13390
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !13390

lor.lhs.false:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !13390
  %base1 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !13390
  %3 = bitcast %struct.tree_base* %base1 to i64*, !dbg !13390
  %bf.load2 = load i64, i64* %3, align 8, !dbg !13390
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !13390
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !13390
  %cmp5 = icmp eq i32 %bf.cast4, 16, !dbg !13390
  br i1 %cmp5, label %land.lhs.true, label %lor.lhs.false6, !dbg !13390

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %4 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !13390
  %base7 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !13390
  %5 = bitcast %struct.tree_base* %base7 to i64*, !dbg !13390
  %bf.load8 = load i64, i64* %5, align 8, !dbg !13390
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !13390
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !13390
  %cmp11 = icmp eq i32 %bf.cast10, 17, !dbg !13390
  br i1 %cmp11, label %land.lhs.true, label %lor.lhs.false12, !dbg !13390

lor.lhs.false12:                                  ; preds = %lor.lhs.false6
  %6 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !13390
  %base13 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !13390
  %7 = bitcast %struct.tree_base* %base13 to i64*, !dbg !13390
  %bf.load14 = load i64, i64* %7, align 8, !dbg !13390
  %bf.clear15 = and i64 %bf.load14, 65535, !dbg !13390
  %bf.cast16 = trunc i64 %bf.clear15 to i32, !dbg !13390
  %cmp17 = icmp eq i32 %bf.cast16, 18, !dbg !13390
  br i1 %cmp17, label %land.lhs.true, label %if.end, !dbg !13392

land.lhs.true:                                    ; preds = %lor.lhs.false12, %lor.lhs.false6, %lor.lhs.false, %entry
  %8 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !13393
  %type18 = bitcast %union.tree_node* %8 to %struct.tree_type*, !dbg !13393
  %size = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type18, i32 0, i32 2, !dbg !13393
  %9 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !13393
  %tobool = icmp ne %union.tree_node* %9, null, !dbg !13393
  br i1 %tobool, label %land.lhs.true19, label %if.end, !dbg !13394

land.lhs.true19:                                  ; preds = %land.lhs.true
  %10 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !13395
  %type20 = bitcast %union.tree_node* %10 to %struct.tree_type*, !dbg !13395
  %size21 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type20, i32 0, i32 2, !dbg !13395
  %11 = load %union.tree_node*, %union.tree_node** %size21, align 8, !dbg !13395
  %call = call i32 @integer_zerop(%union.tree_node* %11), !dbg !13396
  %tobool22 = icmp ne i32 %call, 0, !dbg !13396
  br i1 %tobool22, label %if.then, label %if.end, !dbg !13397

if.then:                                          ; preds = %land.lhs.true19
  store i8 1, i8* %retval, align 1, !dbg !13398
  br label %return, !dbg !13398

if.end:                                           ; preds = %land.lhs.true19, %land.lhs.true, %lor.lhs.false12
  store i8 0, i8* %retval, align 1, !dbg !13399
  br label %return, !dbg !13399

return:                                           ; preds = %if.end, %if.then
  %12 = load i8, i8* %retval, align 1, !dbg !13400
  ret i8 %12, !dbg !13400
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimplify_modify_expr_to_memset(%union.tree_node** %expr_p, %union.tree_node* %size, i8 zeroext %want_value, %struct.gimple_seq_d** %seq_p) #0 !dbg !13401 {
entry:
  %retval = alloca i32, align 4
  %expr_p.addr = alloca %union.tree_node**, align 8
  %size.addr = alloca %union.tree_node*, align 8
  %want_value.addr = alloca i8, align 1
  %seq_p.addr = alloca %struct.gimple_seq_d**, align 8
  %t = alloca %union.tree_node*, align 8
  %from = alloca %union.tree_node*, align 8
  %to = alloca %union.tree_node*, align 8
  %to_ptr = alloca %union.tree_node*, align 8
  %gs = alloca %union.gimple_statement_d*, align 8
  %loc = alloca i32, align 4
  store %union.tree_node** %expr_p, %union.tree_node*** %expr_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %expr_p.addr, metadata !13404, metadata !DIExpression()), !dbg !13405
  store %union.tree_node* %size, %union.tree_node** %size.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %size.addr, metadata !13406, metadata !DIExpression()), !dbg !13407
  store i8 %want_value, i8* %want_value.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %want_value.addr, metadata !13408, metadata !DIExpression()), !dbg !13409
  store %struct.gimple_seq_d** %seq_p, %struct.gimple_seq_d*** %seq_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %seq_p.addr, metadata !13410, metadata !DIExpression()), !dbg !13411
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !13412, metadata !DIExpression()), !dbg !13413
  call void @llvm.dbg.declare(metadata %union.tree_node** %from, metadata !13414, metadata !DIExpression()), !dbg !13415
  call void @llvm.dbg.declare(metadata %union.tree_node** %to, metadata !13416, metadata !DIExpression()), !dbg !13417
  call void @llvm.dbg.declare(metadata %union.tree_node** %to_ptr, metadata !13418, metadata !DIExpression()), !dbg !13419
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs, metadata !13420, metadata !DIExpression()), !dbg !13421
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !13422, metadata !DIExpression()), !dbg !13423
  %0 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !13424
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !13424
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !13424
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !13424
  %bf.load = load i64, i64* %2, align 8, !dbg !13424
  %bf.clear = and i64 %bf.load, 65535, !dbg !13424
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !13424
  %idxprom = sext i32 %bf.cast to i64, !dbg !13424
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !13424
  %3 = load i32, i32* %arrayidx, align 4, !dbg !13424
  %cmp = icmp uge i32 %3, 4, !dbg !13424
  br i1 %cmp, label %land.lhs.true, label %cond.false, !dbg !13424

land.lhs.true:                                    ; preds = %entry
  %4 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !13424
  %5 = load %union.tree_node*, %union.tree_node** %4, align 8, !dbg !13424
  %base1 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !13424
  %6 = bitcast %struct.tree_base* %base1 to i64*, !dbg !13424
  %bf.load2 = load i64, i64* %6, align 8, !dbg !13424
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !13424
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !13424
  %idxprom5 = sext i32 %bf.cast4 to i64, !dbg !13424
  %arrayidx6 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom5, !dbg !13424
  %7 = load i32, i32* %arrayidx6, align 4, !dbg !13424
  %cmp7 = icmp ule i32 %7, 10, !dbg !13424
  br i1 %cmp7, label %cond.true, label %cond.false, !dbg !13424

cond.true:                                        ; preds = %land.lhs.true
  %8 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !13424
  %9 = load %union.tree_node*, %union.tree_node** %8, align 8, !dbg !13424
  %exp = bitcast %union.tree_node* %9 to %struct.tree_exp*, !dbg !13424
  %locus = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 1, !dbg !13424
  %10 = load i32, i32* %locus, align 8, !dbg !13424
  br label %cond.end, !dbg !13424

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !13424

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %10, %cond.true ], [ 0, %cond.false ], !dbg !13424
  store i32 %cond, i32* %loc, align 4, !dbg !13423
  %11 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !13425
  %12 = load %union.tree_node*, %union.tree_node** %11, align 8, !dbg !13425
  %exp8 = bitcast %union.tree_node* %12 to %struct.tree_exp*, !dbg !13425
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp8, i32 0, i32 3, !dbg !13425
  %arrayidx9 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !13425
  %13 = load %union.tree_node*, %union.tree_node** %arrayidx9, align 8, !dbg !13425
  store %union.tree_node* %13, %union.tree_node** %from, align 8, !dbg !13426
  %14 = load %union.tree_node*, %union.tree_node** %from, align 8, !dbg !13427
  %base10 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !13427
  %15 = bitcast %struct.tree_base* %base10 to i64*, !dbg !13427
  %bf.load11 = load i64, i64* %15, align 8, !dbg !13427
  %bf.clear12 = and i64 %bf.load11, 65535, !dbg !13427
  %bf.cast13 = trunc i64 %bf.clear12 to i32, !dbg !13427
  %cmp14 = icmp eq i32 %bf.cast13, 150, !dbg !13429
  br i1 %cmp14, label %if.then, label %if.end, !dbg !13430

if.then:                                          ; preds = %cond.end
  %16 = load %union.tree_node*, %union.tree_node** %from, align 8, !dbg !13431
  %exp15 = bitcast %union.tree_node* %16 to %struct.tree_exp*, !dbg !13431
  %operands16 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp15, i32 0, i32 3, !dbg !13431
  %arrayidx17 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands16, i64 0, i64 0, !dbg !13431
  %17 = load %union.tree_node*, %union.tree_node** %arrayidx17, align 8, !dbg !13431
  store %union.tree_node* %17, %union.tree_node** %from, align 8, !dbg !13432
  br label %if.end, !dbg !13433

if.end:                                           ; preds = %if.then, %cond.end
  %18 = load %union.tree_node*, %union.tree_node** %from, align 8, !dbg !13434
  %base18 = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !13434
  %19 = bitcast %struct.tree_base* %base18 to i64*, !dbg !13434
  %bf.load19 = load i64, i64* %19, align 8, !dbg !13434
  %bf.clear20 = and i64 %bf.load19, 65535, !dbg !13434
  %bf.cast21 = trunc i64 %bf.clear20 to i32, !dbg !13434
  %cmp22 = icmp eq i32 %bf.cast21, 51, !dbg !13434
  br i1 %cmp22, label %land.lhs.true23, label %cond.true32, !dbg !13434

land.lhs.true23:                                  ; preds = %if.end
  %20 = load %union.tree_node*, %union.tree_node** %from, align 8, !dbg !13434
  %constructor = bitcast %union.tree_node* %20 to %struct.tree_constructor*, !dbg !13434
  %elts = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor, i32 0, i32 1, !dbg !13434
  %21 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts, align 8, !dbg !13434
  %tobool = icmp ne %struct.VEC_constructor_elt_gc* %21, null, !dbg !13434
  br i1 %tobool, label %cond.true24, label %cond.false28, !dbg !13434

cond.true24:                                      ; preds = %land.lhs.true23
  %22 = load %union.tree_node*, %union.tree_node** %from, align 8, !dbg !13434
  %constructor25 = bitcast %union.tree_node* %22 to %struct.tree_constructor*, !dbg !13434
  %elts26 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor25, i32 0, i32 1, !dbg !13434
  %23 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts26, align 8, !dbg !13434
  %base27 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %23, i32 0, i32 0, !dbg !13434
  br label %cond.end29, !dbg !13434

cond.false28:                                     ; preds = %land.lhs.true23
  br label %cond.end29, !dbg !13434

cond.end29:                                       ; preds = %cond.false28, %cond.true24
  %cond30 = phi %struct.VEC_constructor_elt_base* [ %base27, %cond.true24 ], [ null, %cond.false28 ], !dbg !13434
  %call = call i32 @VEC_constructor_elt_base_length(%struct.VEC_constructor_elt_base* %cond30), !dbg !13434
  %cmp31 = icmp eq i32 %call, 0, !dbg !13434
  br i1 %cmp31, label %cond.false33, label %cond.true32, !dbg !13434

cond.true32:                                      ; preds = %cond.end29, %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 3168, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !13434
  br label %cond.end34, !dbg !13434

cond.false33:                                     ; preds = %cond.end29
  br label %cond.end34, !dbg !13434

cond.end34:                                       ; preds = %cond.false33, %cond.true32
  %cond35 = phi i32 [ 0, %cond.true32 ], [ 0, %cond.false33 ], !dbg !13434
  %24 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !13435
  %25 = load %union.tree_node*, %union.tree_node** %24, align 8, !dbg !13435
  %exp36 = bitcast %union.tree_node* %25 to %struct.tree_exp*, !dbg !13435
  %operands37 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp36, i32 0, i32 3, !dbg !13435
  %arrayidx38 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands37, i64 0, i64 0, !dbg !13435
  %26 = load %union.tree_node*, %union.tree_node** %arrayidx38, align 8, !dbg !13435
  store %union.tree_node* %26, %union.tree_node** %to, align 8, !dbg !13436
  %27 = load i32, i32* %loc, align 4, !dbg !13437
  %28 = load %union.tree_node*, %union.tree_node** %to, align 8, !dbg !13438
  %call39 = call %union.tree_node* @build_fold_addr_expr_loc(i32 %27, %union.tree_node* %28), !dbg !13439
  store %union.tree_node* %call39, %union.tree_node** %to_ptr, align 8, !dbg !13440
  %29 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %seq_p.addr, align 8, !dbg !13441
  %30 = load i32, i32* %loc, align 4, !dbg !13442
  %call40 = call i32 @gimplify_arg(%union.tree_node** %to_ptr, %struct.gimple_seq_d** %29, i32 %30), !dbg !13443
  %31 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @implicit_built_in_decls, i64 0, i64 333), align 8, !dbg !13444
  store %union.tree_node* %31, %union.tree_node** %t, align 8, !dbg !13445
  %32 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !13446
  %33 = load %union.tree_node*, %union.tree_node** %to_ptr, align 8, !dbg !13447
  %34 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !13448
  %35 = load %union.tree_node*, %union.tree_node** %size.addr, align 8, !dbg !13449
  %call41 = call %union.gimple_statement_d* (%union.tree_node*, i32, ...) @gimple_build_call(%union.tree_node* %32, i32 3, %union.tree_node* %33, %union.tree_node* %34, %union.tree_node* %35), !dbg !13450
  store %union.gimple_statement_d* %call41, %union.gimple_statement_d** %gs, align 8, !dbg !13451
  %36 = load i8, i8* %want_value.addr, align 1, !dbg !13452
  %tobool42 = icmp ne i8 %36, 0, !dbg !13452
  br i1 %tobool42, label %if.then43, label %if.end48, !dbg !13454

if.then43:                                        ; preds = %cond.end34
  %37 = load %union.tree_node*, %union.tree_node** %to_ptr, align 8, !dbg !13455
  %common = bitcast %union.tree_node* %37 to %struct.tree_common*, !dbg !13455
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !13455
  %38 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !13455
  %call44 = call %union.tree_node* @create_tmp_var(%union.tree_node* %38, i8* null), !dbg !13457
  store %union.tree_node* %call44, %union.tree_node** %t, align 8, !dbg !13458
  %39 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs, align 8, !dbg !13459
  %40 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !13460
  call void @gimple_call_set_lhs(%union.gimple_statement_d* %39, %union.tree_node* %40), !dbg !13461
  %41 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %seq_p.addr, align 8, !dbg !13462
  %42 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs, align 8, !dbg !13463
  call void @gimplify_seq_add_stmt(%struct.gimple_seq_d** %41, %union.gimple_statement_d* %42), !dbg !13464
  %43 = load %union.tree_node*, %union.tree_node** %to, align 8, !dbg !13465
  %common45 = bitcast %union.tree_node* %43 to %struct.tree_common*, !dbg !13465
  %type46 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common45, i32 0, i32 2, !dbg !13465
  %44 = load %union.tree_node*, %union.tree_node** %type46, align 8, !dbg !13465
  %45 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !13465
  %call47 = call %union.tree_node* @build1_stat(i32 47, %union.tree_node* %44, %union.tree_node* %45), !dbg !13465
  %46 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !13466
  store %union.tree_node* %call47, %union.tree_node** %46, align 8, !dbg !13467
  store i32 1, i32* %retval, align 4, !dbg !13468
  br label %return, !dbg !13468

if.end48:                                         ; preds = %cond.end34
  %47 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %seq_p.addr, align 8, !dbg !13469
  %48 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs, align 8, !dbg !13470
  call void @gimplify_seq_add_stmt(%struct.gimple_seq_d** %47, %union.gimple_statement_d* %48), !dbg !13471
  %49 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !13472
  store %union.tree_node* null, %union.tree_node** %49, align 8, !dbg !13473
  store i32 1, i32* %retval, align 4, !dbg !13474
  br label %return, !dbg !13474

return:                                           ; preds = %if.end48, %if.then43
  %50 = load i32, i32* %retval, align 4, !dbg !13475
  ret i32 %50, !dbg !13475
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimplify_modify_expr_to_memcpy(%union.tree_node** %expr_p, %union.tree_node* %size, i8 zeroext %want_value, %struct.gimple_seq_d** %seq_p) #0 !dbg !13476 {
entry:
  %retval = alloca i32, align 4
  %expr_p.addr = alloca %union.tree_node**, align 8
  %size.addr = alloca %union.tree_node*, align 8
  %want_value.addr = alloca i8, align 1
  %seq_p.addr = alloca %struct.gimple_seq_d**, align 8
  %t = alloca %union.tree_node*, align 8
  %to = alloca %union.tree_node*, align 8
  %to_ptr = alloca %union.tree_node*, align 8
  %from = alloca %union.tree_node*, align 8
  %from_ptr = alloca %union.tree_node*, align 8
  %gs = alloca %union.gimple_statement_d*, align 8
  %loc = alloca i32, align 4
  store %union.tree_node** %expr_p, %union.tree_node*** %expr_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %expr_p.addr, metadata !13477, metadata !DIExpression()), !dbg !13478
  store %union.tree_node* %size, %union.tree_node** %size.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %size.addr, metadata !13479, metadata !DIExpression()), !dbg !13480
  store i8 %want_value, i8* %want_value.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %want_value.addr, metadata !13481, metadata !DIExpression()), !dbg !13482
  store %struct.gimple_seq_d** %seq_p, %struct.gimple_seq_d*** %seq_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %seq_p.addr, metadata !13483, metadata !DIExpression()), !dbg !13484
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !13485, metadata !DIExpression()), !dbg !13486
  call void @llvm.dbg.declare(metadata %union.tree_node** %to, metadata !13487, metadata !DIExpression()), !dbg !13488
  call void @llvm.dbg.declare(metadata %union.tree_node** %to_ptr, metadata !13489, metadata !DIExpression()), !dbg !13490
  call void @llvm.dbg.declare(metadata %union.tree_node** %from, metadata !13491, metadata !DIExpression()), !dbg !13492
  call void @llvm.dbg.declare(metadata %union.tree_node** %from_ptr, metadata !13493, metadata !DIExpression()), !dbg !13494
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs, metadata !13495, metadata !DIExpression()), !dbg !13496
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !13497, metadata !DIExpression()), !dbg !13498
  %0 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !13499
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !13499
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !13499
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !13499
  %bf.load = load i64, i64* %2, align 8, !dbg !13499
  %bf.clear = and i64 %bf.load, 65535, !dbg !13499
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !13499
  %idxprom = sext i32 %bf.cast to i64, !dbg !13499
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !13499
  %3 = load i32, i32* %arrayidx, align 4, !dbg !13499
  %cmp = icmp uge i32 %3, 4, !dbg !13499
  br i1 %cmp, label %land.lhs.true, label %cond.false, !dbg !13499

land.lhs.true:                                    ; preds = %entry
  %4 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !13499
  %5 = load %union.tree_node*, %union.tree_node** %4, align 8, !dbg !13499
  %base1 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !13499
  %6 = bitcast %struct.tree_base* %base1 to i64*, !dbg !13499
  %bf.load2 = load i64, i64* %6, align 8, !dbg !13499
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !13499
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !13499
  %idxprom5 = sext i32 %bf.cast4 to i64, !dbg !13499
  %arrayidx6 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom5, !dbg !13499
  %7 = load i32, i32* %arrayidx6, align 4, !dbg !13499
  %cmp7 = icmp ule i32 %7, 10, !dbg !13499
  br i1 %cmp7, label %cond.true, label %cond.false, !dbg !13499

cond.true:                                        ; preds = %land.lhs.true
  %8 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !13499
  %9 = load %union.tree_node*, %union.tree_node** %8, align 8, !dbg !13499
  %exp = bitcast %union.tree_node* %9 to %struct.tree_exp*, !dbg !13499
  %locus = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 1, !dbg !13499
  %10 = load i32, i32* %locus, align 8, !dbg !13499
  br label %cond.end, !dbg !13499

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !13499

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %10, %cond.true ], [ 0, %cond.false ], !dbg !13499
  store i32 %cond, i32* %loc, align 4, !dbg !13498
  %11 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !13500
  %12 = load %union.tree_node*, %union.tree_node** %11, align 8, !dbg !13500
  %exp8 = bitcast %union.tree_node* %12 to %struct.tree_exp*, !dbg !13500
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp8, i32 0, i32 3, !dbg !13500
  %arrayidx9 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !13500
  %13 = load %union.tree_node*, %union.tree_node** %arrayidx9, align 8, !dbg !13500
  store %union.tree_node* %13, %union.tree_node** %to, align 8, !dbg !13501
  %14 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !13502
  %15 = load %union.tree_node*, %union.tree_node** %14, align 8, !dbg !13502
  %exp10 = bitcast %union.tree_node* %15 to %struct.tree_exp*, !dbg !13502
  %operands11 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp10, i32 0, i32 3, !dbg !13502
  %arrayidx12 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands11, i64 0, i64 1, !dbg !13502
  %16 = load %union.tree_node*, %union.tree_node** %arrayidx12, align 8, !dbg !13502
  store %union.tree_node* %16, %union.tree_node** %from, align 8, !dbg !13503
  %17 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %seq_p.addr, align 8, !dbg !13504
  call void @prepare_gimple_addressable(%union.tree_node** %from, %struct.gimple_seq_d** %17), !dbg !13505
  %18 = load %union.tree_node*, %union.tree_node** %from, align 8, !dbg !13506
  call void @mark_addressable(%union.tree_node* %18), !dbg !13507
  %19 = load i32, i32* %loc, align 4, !dbg !13508
  %20 = load %union.tree_node*, %union.tree_node** %from, align 8, !dbg !13509
  %call = call %union.tree_node* @build_fold_addr_expr_loc(i32 %19, %union.tree_node* %20), !dbg !13510
  store %union.tree_node* %call, %union.tree_node** %from_ptr, align 8, !dbg !13511
  %21 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %seq_p.addr, align 8, !dbg !13512
  %22 = load i32, i32* %loc, align 4, !dbg !13513
  %call13 = call i32 @gimplify_arg(%union.tree_node** %from_ptr, %struct.gimple_seq_d** %21, i32 %22), !dbg !13514
  %23 = load %union.tree_node*, %union.tree_node** %to, align 8, !dbg !13515
  call void @mark_addressable(%union.tree_node* %23), !dbg !13516
  %24 = load i32, i32* %loc, align 4, !dbg !13517
  %25 = load %union.tree_node*, %union.tree_node** %to, align 8, !dbg !13518
  %call14 = call %union.tree_node* @build_fold_addr_expr_loc(i32 %24, %union.tree_node* %25), !dbg !13519
  store %union.tree_node* %call14, %union.tree_node** %to_ptr, align 8, !dbg !13520
  %26 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %seq_p.addr, align 8, !dbg !13521
  %27 = load i32, i32* %loc, align 4, !dbg !13522
  %call15 = call i32 @gimplify_arg(%union.tree_node** %to_ptr, %struct.gimple_seq_d** %26, i32 %27), !dbg !13523
  %28 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @implicit_built_in_decls, i64 0, i64 330), align 16, !dbg !13524
  store %union.tree_node* %28, %union.tree_node** %t, align 8, !dbg !13525
  %29 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !13526
  %30 = load %union.tree_node*, %union.tree_node** %to_ptr, align 8, !dbg !13527
  %31 = load %union.tree_node*, %union.tree_node** %from_ptr, align 8, !dbg !13528
  %32 = load %union.tree_node*, %union.tree_node** %size.addr, align 8, !dbg !13529
  %call16 = call %union.gimple_statement_d* (%union.tree_node*, i32, ...) @gimple_build_call(%union.tree_node* %29, i32 3, %union.tree_node* %30, %union.tree_node* %31, %union.tree_node* %32), !dbg !13530
  store %union.gimple_statement_d* %call16, %union.gimple_statement_d** %gs, align 8, !dbg !13531
  %33 = load i8, i8* %want_value.addr, align 1, !dbg !13532
  %tobool = icmp ne i8 %33, 0, !dbg !13532
  br i1 %tobool, label %if.then, label %if.end, !dbg !13534

if.then:                                          ; preds = %cond.end
  %34 = load %union.tree_node*, %union.tree_node** %to_ptr, align 8, !dbg !13535
  %common = bitcast %union.tree_node* %34 to %struct.tree_common*, !dbg !13535
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !13535
  %35 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !13535
  %call17 = call %union.tree_node* @create_tmp_var(%union.tree_node* %35, i8* null), !dbg !13537
  store %union.tree_node* %call17, %union.tree_node** %t, align 8, !dbg !13538
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs, align 8, !dbg !13539
  %37 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !13540
  call void @gimple_call_set_lhs(%union.gimple_statement_d* %36, %union.tree_node* %37), !dbg !13541
  %38 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %seq_p.addr, align 8, !dbg !13542
  %39 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs, align 8, !dbg !13543
  call void @gimplify_seq_add_stmt(%struct.gimple_seq_d** %38, %union.gimple_statement_d* %39), !dbg !13544
  %40 = load %union.tree_node*, %union.tree_node** %to, align 8, !dbg !13545
  %common18 = bitcast %union.tree_node* %40 to %struct.tree_common*, !dbg !13545
  %type19 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common18, i32 0, i32 2, !dbg !13545
  %41 = load %union.tree_node*, %union.tree_node** %type19, align 8, !dbg !13545
  %42 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !13545
  %call20 = call %union.tree_node* @build1_stat(i32 47, %union.tree_node* %41, %union.tree_node* %42), !dbg !13545
  %43 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !13546
  store %union.tree_node* %call20, %union.tree_node** %43, align 8, !dbg !13547
  store i32 1, i32* %retval, align 4, !dbg !13548
  br label %return, !dbg !13548

if.end:                                           ; preds = %cond.end
  %44 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %seq_p.addr, align 8, !dbg !13549
  %45 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs, align 8, !dbg !13550
  call void @gimplify_seq_add_stmt(%struct.gimple_seq_d** %44, %union.gimple_statement_d* %45), !dbg !13551
  %46 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !13552
  store %union.tree_node* null, %union.tree_node** %46, align 8, !dbg !13553
  store i32 1, i32* %retval, align 4, !dbg !13554
  br label %return, !dbg !13554

return:                                           ; preds = %if.end, %if.then
  %47 = load i32, i32* %retval, align 4, !dbg !13555
  ret i32 %47, !dbg !13555
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimplify_modify_expr_complex_part(%union.tree_node** %expr_p, %struct.gimple_seq_d** %pre_p, i8 zeroext %want_value) #0 !dbg !13556 {
entry:
  %expr_p.addr = alloca %union.tree_node**, align 8
  %pre_p.addr = alloca %struct.gimple_seq_d**, align 8
  %want_value.addr = alloca i8, align 1
  %code = alloca i32, align 4
  %ocode = alloca i32, align 4
  %lhs = alloca %union.tree_node*, align 8
  %rhs = alloca %union.tree_node*, align 8
  %new_rhs = alloca %union.tree_node*, align 8
  %other = alloca %union.tree_node*, align 8
  %realpart = alloca %union.tree_node*, align 8
  %imagpart = alloca %union.tree_node*, align 8
  store %union.tree_node** %expr_p, %union.tree_node*** %expr_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %expr_p.addr, metadata !13557, metadata !DIExpression()), !dbg !13558
  store %struct.gimple_seq_d** %pre_p, %struct.gimple_seq_d*** %pre_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %pre_p.addr, metadata !13559, metadata !DIExpression()), !dbg !13560
  store i8 %want_value, i8* %want_value.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %want_value.addr, metadata !13561, metadata !DIExpression()), !dbg !13562
  call void @llvm.dbg.declare(metadata i32* %code, metadata !13563, metadata !DIExpression()), !dbg !13564
  call void @llvm.dbg.declare(metadata i32* %ocode, metadata !13565, metadata !DIExpression()), !dbg !13566
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !13567, metadata !DIExpression()), !dbg !13568
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs, metadata !13569, metadata !DIExpression()), !dbg !13570
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_rhs, metadata !13571, metadata !DIExpression()), !dbg !13572
  call void @llvm.dbg.declare(metadata %union.tree_node** %other, metadata !13573, metadata !DIExpression()), !dbg !13574
  call void @llvm.dbg.declare(metadata %union.tree_node** %realpart, metadata !13575, metadata !DIExpression()), !dbg !13576
  call void @llvm.dbg.declare(metadata %union.tree_node** %imagpart, metadata !13577, metadata !DIExpression()), !dbg !13578
  %0 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !13579
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !13579
  %exp = bitcast %union.tree_node* %1 to %struct.tree_exp*, !dbg !13579
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !13579
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !13579
  %2 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !13579
  store %union.tree_node* %2, %union.tree_node** %lhs, align 8, !dbg !13580
  %3 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !13581
  %4 = load %union.tree_node*, %union.tree_node** %3, align 8, !dbg !13581
  %exp1 = bitcast %union.tree_node* %4 to %struct.tree_exp*, !dbg !13581
  %operands2 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 3, !dbg !13581
  %arrayidx3 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2, i64 0, i64 1, !dbg !13581
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx3, align 8, !dbg !13581
  store %union.tree_node* %5, %union.tree_node** %rhs, align 8, !dbg !13582
  %6 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !13583
  %base = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !13583
  %7 = bitcast %struct.tree_base* %base to i64*, !dbg !13583
  %bf.load = load i64, i64* %7, align 8, !dbg !13583
  %bf.clear = and i64 %bf.load, 65535, !dbg !13583
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !13583
  store i32 %bf.cast, i32* %code, align 4, !dbg !13584
  %8 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !13585
  %exp4 = bitcast %union.tree_node* %8 to %struct.tree_exp*, !dbg !13585
  %operands5 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4, i32 0, i32 3, !dbg !13585
  %arrayidx6 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5, i64 0, i64 0, !dbg !13585
  %9 = load %union.tree_node*, %union.tree_node** %arrayidx6, align 8, !dbg !13585
  store %union.tree_node* %9, %union.tree_node** %lhs, align 8, !dbg !13586
  %10 = load i32, i32* %code, align 4, !dbg !13587
  %cmp = icmp eq i32 %10, 43, !dbg !13588
  %11 = zext i1 %cmp to i64, !dbg !13587
  %cond = select i1 %cmp, i32 44, i32 43, !dbg !13587
  store i32 %cond, i32* %ocode, align 4, !dbg !13589
  %12 = load i32, i32* %ocode, align 4, !dbg !13590
  %13 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !13590
  %common = bitcast %union.tree_node* %13 to %struct.tree_common*, !dbg !13590
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !13590
  %14 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !13590
  %15 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !13590
  %call = call %union.tree_node* @build1_stat(i32 %12, %union.tree_node* %14, %union.tree_node* %15), !dbg !13590
  store %union.tree_node* %call, %union.tree_node** %other, align 8, !dbg !13591
  %16 = load %union.tree_node*, %union.tree_node** %other, align 8, !dbg !13592
  %17 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !13593
  %call7 = call %union.tree_node* @get_formal_tmp_var(%union.tree_node* %16, %struct.gimple_seq_d** %17), !dbg !13594
  store %union.tree_node* %call7, %union.tree_node** %other, align 8, !dbg !13595
  %18 = load i32, i32* %code, align 4, !dbg !13596
  %cmp8 = icmp eq i32 %18, 43, !dbg !13597
  br i1 %cmp8, label %cond.true, label %cond.false, !dbg !13596

cond.true:                                        ; preds = %entry
  %19 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !13598
  br label %cond.end, !dbg !13596

cond.false:                                       ; preds = %entry
  %20 = load %union.tree_node*, %union.tree_node** %other, align 8, !dbg !13599
  br label %cond.end, !dbg !13596

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond9 = phi %union.tree_node* [ %19, %cond.true ], [ %20, %cond.false ], !dbg !13596
  store %union.tree_node* %cond9, %union.tree_node** %realpart, align 8, !dbg !13600
  %21 = load i32, i32* %code, align 4, !dbg !13601
  %cmp10 = icmp eq i32 %21, 43, !dbg !13602
  br i1 %cmp10, label %cond.true11, label %cond.false12, !dbg !13601

cond.true11:                                      ; preds = %cond.end
  %22 = load %union.tree_node*, %union.tree_node** %other, align 8, !dbg !13603
  br label %cond.end13, !dbg !13601

cond.false12:                                     ; preds = %cond.end
  %23 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !13604
  br label %cond.end13, !dbg !13601

cond.end13:                                       ; preds = %cond.false12, %cond.true11
  %cond14 = phi %union.tree_node* [ %22, %cond.true11 ], [ %23, %cond.false12 ], !dbg !13601
  store %union.tree_node* %cond14, %union.tree_node** %imagpart, align 8, !dbg !13605
  %24 = load %union.tree_node*, %union.tree_node** %realpart, align 8, !dbg !13606
  %base15 = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !13606
  %25 = bitcast %struct.tree_base* %base15 to i64*, !dbg !13606
  %bf.load16 = load i64, i64* %25, align 8, !dbg !13606
  %bf.lshr = lshr i64 %bf.load16, 17, !dbg !13606
  %bf.clear17 = and i64 %bf.lshr, 1, !dbg !13606
  %bf.cast18 = trunc i64 %bf.clear17 to i32, !dbg !13606
  %tobool = icmp ne i32 %bf.cast18, 0, !dbg !13606
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !13608

land.lhs.true:                                    ; preds = %cond.end13
  %26 = load %union.tree_node*, %union.tree_node** %imagpart, align 8, !dbg !13609
  %base19 = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !13609
  %27 = bitcast %struct.tree_base* %base19 to i64*, !dbg !13609
  %bf.load20 = load i64, i64* %27, align 8, !dbg !13609
  %bf.lshr21 = lshr i64 %bf.load20, 17, !dbg !13609
  %bf.clear22 = and i64 %bf.lshr21, 1, !dbg !13609
  %bf.cast23 = trunc i64 %bf.clear22 to i32, !dbg !13609
  %tobool24 = icmp ne i32 %bf.cast23, 0, !dbg !13609
  br i1 %tobool24, label %if.then, label %if.else, !dbg !13610

if.then:                                          ; preds = %land.lhs.true
  %28 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !13611
  %common25 = bitcast %union.tree_node* %28 to %struct.tree_common*, !dbg !13611
  %type26 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common25, i32 0, i32 2, !dbg !13611
  %29 = load %union.tree_node*, %union.tree_node** %type26, align 8, !dbg !13611
  %30 = load %union.tree_node*, %union.tree_node** %realpart, align 8, !dbg !13612
  %31 = load %union.tree_node*, %union.tree_node** %imagpart, align 8, !dbg !13613
  %call27 = call %union.tree_node* @build_complex(%union.tree_node* %29, %union.tree_node* %30, %union.tree_node* %31), !dbg !13614
  store %union.tree_node* %call27, %union.tree_node** %new_rhs, align 8, !dbg !13615
  br label %if.end, !dbg !13616

if.else:                                          ; preds = %land.lhs.true, %cond.end13
  %32 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !13617
  %common28 = bitcast %union.tree_node* %32 to %struct.tree_common*, !dbg !13617
  %type29 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common28, i32 0, i32 2, !dbg !13617
  %33 = load %union.tree_node*, %union.tree_node** %type29, align 8, !dbg !13617
  %34 = load %union.tree_node*, %union.tree_node** %realpart, align 8, !dbg !13617
  %35 = load %union.tree_node*, %union.tree_node** %imagpart, align 8, !dbg !13617
  %call30 = call %union.tree_node* @build2_stat(i32 123, %union.tree_node* %33, %union.tree_node* %34, %union.tree_node* %35), !dbg !13617
  store %union.tree_node* %call30, %union.tree_node** %new_rhs, align 8, !dbg !13618
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %36 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !13619
  %37 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !13620
  %38 = load %union.tree_node*, %union.tree_node** %new_rhs, align 8, !dbg !13620
  %call31 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %37, %union.tree_node* %38), !dbg !13620
  call void @gimplify_seq_add_stmt(%struct.gimple_seq_d** %36, %union.gimple_statement_d* %call31), !dbg !13621
  %39 = load i8, i8* %want_value.addr, align 1, !dbg !13622
  %conv = zext i8 %39 to i32, !dbg !13623
  %tobool32 = icmp ne i32 %conv, 0, !dbg !13623
  br i1 %tobool32, label %cond.true33, label %cond.false34, !dbg !13623

cond.true33:                                      ; preds = %if.end
  %40 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !13624
  br label %cond.end35, !dbg !13623

cond.false34:                                     ; preds = %if.end
  br label %cond.end35, !dbg !13623

cond.end35:                                       ; preds = %cond.false34, %cond.true33
  %cond36 = phi %union.tree_node* [ %40, %cond.true33 ], [ null, %cond.false34 ], !dbg !13623
  %41 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !13625
  store %union.tree_node* %cond36, %union.tree_node** %41, align 8, !dbg !13626
  ret i32 1, !dbg !13627
}

declare dso_local void @decl_debug_expr_insert(%union.tree_node*, %union.tree_node*) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_call_noreturn_p(%union.gimple_statement_d* %s) #0 !dbg !13628 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !13629, metadata !DIExpression()), !dbg !13630
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !13631
  %call = call i32 @gimple_call_flags(%union.gimple_statement_d* %0), !dbg !13632
  %and = and i32 %call, 8, !dbg !13633
  %cmp = icmp ne i32 %and, 0, !dbg !13634
  %conv = zext i1 %cmp to i32, !dbg !13634
  %conv1 = trunc i32 %conv to i8, !dbg !13635
  ret i8 %conv1, !dbg !13636
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_call_set_lhs(%union.gimple_statement_d* %gs, %union.tree_node* %lhs) #0 !dbg !13637 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %lhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !13638, metadata !DIExpression()), !dbg !13639
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !13640, metadata !DIExpression()), !dbg !13641
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !13642
  %1 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !13643
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 0, %union.tree_node* %1), !dbg !13644
  %2 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !13645
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !13645
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !13647

land.lhs.true:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !13648
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !13648
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !13648
  %bf.load = load i64, i64* %4, align 8, !dbg !13648
  %bf.clear = and i64 %bf.load, 65535, !dbg !13648
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !13648
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !13649
  br i1 %cmp, label %if.then, label %if.end, !dbg !13650

if.then:                                          ; preds = %land.lhs.true
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !13651
  %6 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !13652
  %ssa_name = bitcast %union.tree_node* %6 to %struct.tree_ssa_name*, !dbg !13652
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !13652
  store %union.gimple_statement_d* %5, %union.gimple_statement_d** %def_stmt, align 8, !dbg !13653
  br label %if.end, !dbg !13652

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void, !dbg !13654
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimplify_init_constructor(%union.tree_node** %expr_p, %struct.gimple_seq_d** %pre_p, %struct.gimple_seq_d** %post_p, i8 zeroext %want_value, i8 zeroext %notify_temp_creation) #0 !dbg !13655 {
entry:
  %retval = alloca i32, align 4
  %expr_p.addr = alloca %union.tree_node**, align 8
  %pre_p.addr = alloca %struct.gimple_seq_d**, align 8
  %post_p.addr = alloca %struct.gimple_seq_d**, align 8
  %want_value.addr = alloca i8, align 1
  %notify_temp_creation.addr = alloca i8, align 1
  %object = alloca %union.tree_node*, align 8
  %ctor = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  %ret = alloca i32, align 4
  %elts = alloca %struct.VEC_constructor_elt_gc*, align 8
  %preeval_data = alloca %struct.gimplify_init_ctor_preeval_data, align 8
  %num_type_elements = alloca i64, align 8
  %num_ctor_elements = alloca i64, align 8
  %num_nonzero_elements = alloca i64, align 8
  %cleared = alloca i8, align 1
  %valid_const_initializer = alloca i8, align 1
  %size = alloca i64, align 8
  %align = alloca i32, align 4
  %new_tree = alloca %union.tree_node*, align 8
  %temp = alloca %union.tree_node*, align 8
  %r = alloca %union.tree_node*, align 8
  %i = alloca %union.tree_node*, align 8
  %zero = alloca %union.tree_node*, align 8
  %ix = alloca i64, align 8
  %ce = alloca %struct.constructor_elt_d*, align 8
  %constant_p = alloca i8, align 1
  %value365 = alloca %union.tree_node*, align 8
  %tret = alloca i32, align 4
  %lhs = alloca %union.tree_node*, align 8
  %rhs = alloca %union.tree_node*, align 8
  %init = alloca %union.gimple_statement_d*, align 8
  store %union.tree_node** %expr_p, %union.tree_node*** %expr_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %expr_p.addr, metadata !13658, metadata !DIExpression()), !dbg !13659
  store %struct.gimple_seq_d** %pre_p, %struct.gimple_seq_d*** %pre_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %pre_p.addr, metadata !13660, metadata !DIExpression()), !dbg !13661
  store %struct.gimple_seq_d** %post_p, %struct.gimple_seq_d*** %post_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %post_p.addr, metadata !13662, metadata !DIExpression()), !dbg !13663
  store i8 %want_value, i8* %want_value.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %want_value.addr, metadata !13664, metadata !DIExpression()), !dbg !13665
  store i8 %notify_temp_creation, i8* %notify_temp_creation.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %notify_temp_creation.addr, metadata !13666, metadata !DIExpression()), !dbg !13667
  call void @llvm.dbg.declare(metadata %union.tree_node** %object, metadata !13668, metadata !DIExpression()), !dbg !13669
  call void @llvm.dbg.declare(metadata %union.tree_node** %ctor, metadata !13670, metadata !DIExpression()), !dbg !13671
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !13672, metadata !DIExpression()), !dbg !13673
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !13674, metadata !DIExpression()), !dbg !13675
  call void @llvm.dbg.declare(metadata %struct.VEC_constructor_elt_gc** %elts, metadata !13676, metadata !DIExpression()), !dbg !13677
  %0 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !13678
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !13678
  %exp = bitcast %union.tree_node* %1 to %struct.tree_exp*, !dbg !13678
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !13678
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !13678
  %2 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !13678
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !13678
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !13678
  %bf.load = load i64, i64* %3, align 8, !dbg !13678
  %bf.clear = and i64 %bf.load, 65535, !dbg !13678
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !13678
  %cmp = icmp eq i32 %bf.cast, 51, !dbg !13678
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !13678

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 3616, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !13678
  br label %cond.end, !dbg !13678

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !13678

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !13678
  %4 = load i8, i8* %notify_temp_creation.addr, align 1, !dbg !13679
  %tobool = icmp ne i8 %4, 0, !dbg !13679
  br i1 %tobool, label %if.end6, label %if.then, !dbg !13681

if.then:                                          ; preds = %cond.end
  %5 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !13682
  %6 = load %union.tree_node*, %union.tree_node** %5, align 8, !dbg !13682
  %exp1 = bitcast %union.tree_node* %6 to %struct.tree_exp*, !dbg !13682
  %operands2 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 3, !dbg !13682
  %arrayidx3 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2, i64 0, i64 0, !dbg !13682
  %7 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !13684
  %8 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !13685
  %call = call i32 @gimplify_expr(%union.tree_node** %arrayidx3, %struct.gimple_seq_d** %7, %struct.gimple_seq_d** %8, i8 (%union.tree_node*)* @is_gimple_lvalue, i32 2), !dbg !13686
  store i32 %call, i32* %ret, align 4, !dbg !13687
  %9 = load i32, i32* %ret, align 4, !dbg !13688
  %cmp4 = icmp eq i32 %9, -2, !dbg !13690
  br i1 %cmp4, label %if.then5, label %if.end, !dbg !13691

if.then5:                                         ; preds = %if.then
  %10 = load i32, i32* %ret, align 4, !dbg !13692
  store i32 %10, i32* %retval, align 4, !dbg !13693
  br label %return, !dbg !13693

if.end:                                           ; preds = %if.then
  br label %if.end6, !dbg !13694

if.end6:                                          ; preds = %if.end, %cond.end
  %11 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !13695
  %12 = load %union.tree_node*, %union.tree_node** %11, align 8, !dbg !13695
  %exp7 = bitcast %union.tree_node* %12 to %struct.tree_exp*, !dbg !13695
  %operands8 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp7, i32 0, i32 3, !dbg !13695
  %arrayidx9 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands8, i64 0, i64 0, !dbg !13695
  %13 = load %union.tree_node*, %union.tree_node** %arrayidx9, align 8, !dbg !13695
  store %union.tree_node* %13, %union.tree_node** %object, align 8, !dbg !13696
  %14 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !13697
  %15 = load %union.tree_node*, %union.tree_node** %14, align 8, !dbg !13697
  %exp10 = bitcast %union.tree_node* %15 to %struct.tree_exp*, !dbg !13697
  %operands11 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp10, i32 0, i32 3, !dbg !13697
  %arrayidx12 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands11, i64 0, i64 1, !dbg !13697
  %16 = load %union.tree_node*, %union.tree_node** %arrayidx12, align 8, !dbg !13697
  %call13 = call %union.tree_node* @optimize_compound_literals_in_ctor(%union.tree_node* %16), !dbg !13698
  %17 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !13699
  %18 = load %union.tree_node*, %union.tree_node** %17, align 8, !dbg !13699
  %exp14 = bitcast %union.tree_node* %18 to %struct.tree_exp*, !dbg !13699
  %operands15 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp14, i32 0, i32 3, !dbg !13699
  %arrayidx16 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands15, i64 0, i64 1, !dbg !13699
  store %union.tree_node* %call13, %union.tree_node** %arrayidx16, align 8, !dbg !13700
  store %union.tree_node* %call13, %union.tree_node** %ctor, align 8, !dbg !13701
  %19 = load %union.tree_node*, %union.tree_node** %ctor, align 8, !dbg !13702
  %common = bitcast %union.tree_node* %19 to %struct.tree_common*, !dbg !13702
  %type17 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !13702
  %20 = load %union.tree_node*, %union.tree_node** %type17, align 8, !dbg !13702
  store %union.tree_node* %20, %union.tree_node** %type, align 8, !dbg !13703
  %21 = load %union.tree_node*, %union.tree_node** %ctor, align 8, !dbg !13704
  %constructor = bitcast %union.tree_node* %21 to %struct.tree_constructor*, !dbg !13704
  %elts18 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor, i32 0, i32 1, !dbg !13704
  %22 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts18, align 8, !dbg !13704
  store %struct.VEC_constructor_elt_gc* %22, %struct.VEC_constructor_elt_gc** %elts, align 8, !dbg !13705
  store i32 1, i32* %ret, align 4, !dbg !13706
  %23 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !13707
  %base19 = bitcast %union.tree_node* %23 to %struct.tree_base*, !dbg !13707
  %24 = bitcast %struct.tree_base* %base19 to i64*, !dbg !13707
  %bf.load20 = load i64, i64* %24, align 8, !dbg !13707
  %bf.clear21 = and i64 %bf.load20, 65535, !dbg !13707
  %bf.cast22 = trunc i64 %bf.clear21 to i32, !dbg !13707
  switch i32 %bf.cast22, label %sw.default [
    i32 16, label %sw.bb
    i32 17, label %sw.bb
    i32 18, label %sw.bb
    i32 15, label %sw.bb
    i32 13, label %sw.bb272
    i32 14, label %sw.bb354
  ], !dbg !13708

sw.bb:                                            ; preds = %if.end6, %if.end6, %if.end6, %if.end6
  call void @llvm.dbg.declare(metadata %struct.gimplify_init_ctor_preeval_data* %preeval_data, metadata !13709, metadata !DIExpression()), !dbg !13712
  call void @llvm.dbg.declare(metadata i64* %num_type_elements, metadata !13713, metadata !DIExpression()), !dbg !13714
  call void @llvm.dbg.declare(metadata i64* %num_ctor_elements, metadata !13715, metadata !DIExpression()), !dbg !13716
  call void @llvm.dbg.declare(metadata i64* %num_nonzero_elements, metadata !13717, metadata !DIExpression()), !dbg !13718
  call void @llvm.dbg.declare(metadata i8* %cleared, metadata !13719, metadata !DIExpression()), !dbg !13720
  call void @llvm.dbg.declare(metadata i8* %valid_const_initializer, metadata !13721, metadata !DIExpression()), !dbg !13722
  %25 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts, align 8, !dbg !13723
  %tobool23 = icmp ne %struct.VEC_constructor_elt_gc* %25, null, !dbg !13723
  br i1 %tobool23, label %cond.true24, label %cond.false26, !dbg !13723

cond.true24:                                      ; preds = %sw.bb
  %26 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts, align 8, !dbg !13723
  %base25 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %26, i32 0, i32 0, !dbg !13723
  br label %cond.end27, !dbg !13723

cond.false26:                                     ; preds = %sw.bb
  br label %cond.end27, !dbg !13723

cond.end27:                                       ; preds = %cond.false26, %cond.true24
  %cond28 = phi %struct.VEC_constructor_elt_base* [ %base25, %cond.true24 ], [ null, %cond.false26 ], !dbg !13723
  %call29 = call i32 @VEC_constructor_elt_base_length(%struct.VEC_constructor_elt_base* %cond28), !dbg !13723
  %cmp30 = icmp eq i32 %call29, 0, !dbg !13723
  br i1 %cmp30, label %if.then31, label %if.end35, !dbg !13725

if.then31:                                        ; preds = %cond.end27
  %27 = load i8, i8* %notify_temp_creation.addr, align 1, !dbg !13726
  %tobool32 = icmp ne i8 %27, 0, !dbg !13726
  br i1 %tobool32, label %if.then33, label %if.end34, !dbg !13729

if.then33:                                        ; preds = %if.then31
  store i32 0, i32* %retval, align 4, !dbg !13730
  br label %return, !dbg !13730

if.end34:                                         ; preds = %if.then31
  br label %sw.epilog, !dbg !13731

if.end35:                                         ; preds = %cond.end27
  %28 = load %union.tree_node*, %union.tree_node** %ctor, align 8, !dbg !13732
  %call36 = call zeroext i8 @categorize_ctor_elements(%union.tree_node* %28, i64* %num_nonzero_elements, i64* %num_ctor_elements, i8* %cleared), !dbg !13733
  store i8 %call36, i8* %valid_const_initializer, align 1, !dbg !13734
  %29 = load i8, i8* %valid_const_initializer, align 1, !dbg !13735
  %conv = zext i8 %29 to i32, !dbg !13735
  %tobool37 = icmp ne i32 %conv, 0, !dbg !13735
  br i1 %tobool37, label %land.lhs.true, label %if.end78, !dbg !13737

land.lhs.true:                                    ; preds = %if.end35
  %30 = load i64, i64* %num_nonzero_elements, align 8, !dbg !13738
  %cmp38 = icmp sgt i64 %30, 1, !dbg !13739
  br i1 %cmp38, label %land.lhs.true40, label %if.end78, !dbg !13740

land.lhs.true40:                                  ; preds = %land.lhs.true
  %31 = load %union.tree_node*, %union.tree_node** %object, align 8, !dbg !13741
  %base41 = bitcast %union.tree_node* %31 to %struct.tree_base*, !dbg !13741
  %32 = bitcast %struct.tree_base* %base41 to i64*, !dbg !13741
  %bf.load42 = load i64, i64* %32, align 8, !dbg !13741
  %bf.lshr = lshr i64 %bf.load42, 20, !dbg !13741
  %bf.clear43 = and i64 %bf.lshr, 1, !dbg !13741
  %bf.cast44 = trunc i64 %bf.clear43 to i32, !dbg !13741
  %tobool45 = icmp ne i32 %bf.cast44, 0, !dbg !13741
  br i1 %tobool45, label %land.lhs.true46, label %if.end78, !dbg !13742

land.lhs.true46:                                  ; preds = %land.lhs.true40
  %33 = load %union.tree_node*, %union.tree_node** %object, align 8, !dbg !13743
  %base47 = bitcast %union.tree_node* %33 to %struct.tree_base*, !dbg !13743
  %34 = bitcast %struct.tree_base* %base47 to i64*, !dbg !13743
  %bf.load48 = load i64, i64* %34, align 8, !dbg !13743
  %bf.clear49 = and i64 %bf.load48, 65535, !dbg !13743
  %bf.cast50 = trunc i64 %bf.clear49 to i32, !dbg !13743
  %cmp51 = icmp eq i32 %bf.cast50, 32, !dbg !13744
  br i1 %cmp51, label %land.lhs.true53, label %if.end78, !dbg !13745

land.lhs.true53:                                  ; preds = %land.lhs.true46
  %35 = load i32, i32* @flag_merge_constants, align 4, !dbg !13746
  %cmp54 = icmp sge i32 %35, 2, !dbg !13747
  br i1 %cmp54, label %if.then62, label %lor.lhs.false, !dbg !13748

lor.lhs.false:                                    ; preds = %land.lhs.true53
  %36 = load %union.tree_node*, %union.tree_node** %object, align 8, !dbg !13749
  %base56 = bitcast %union.tree_node* %36 to %struct.tree_base*, !dbg !13749
  %37 = bitcast %struct.tree_base* %base56 to i64*, !dbg !13749
  %bf.load57 = load i64, i64* %37, align 8, !dbg !13749
  %bf.lshr58 = lshr i64 %bf.load57, 18, !dbg !13749
  %bf.clear59 = and i64 %bf.lshr58, 1, !dbg !13749
  %bf.cast60 = trunc i64 %bf.clear59 to i32, !dbg !13749
  %tobool61 = icmp ne i32 %bf.cast60, 0, !dbg !13749
  br i1 %tobool61, label %if.end78, label %if.then62, !dbg !13750

if.then62:                                        ; preds = %lor.lhs.false, %land.lhs.true53
  %38 = load i8, i8* %notify_temp_creation.addr, align 1, !dbg !13751
  %tobool63 = icmp ne i8 %38, 0, !dbg !13751
  br i1 %tobool63, label %if.then64, label %if.end65, !dbg !13754

if.then64:                                        ; preds = %if.then62
  store i32 -2, i32* %retval, align 4, !dbg !13755
  br label %return, !dbg !13755

if.end65:                                         ; preds = %if.then62
  %39 = load %union.tree_node*, %union.tree_node** %ctor, align 8, !dbg !13756
  %40 = load %union.tree_node*, %union.tree_node** %object, align 8, !dbg !13757
  %decl_common = bitcast %union.tree_node* %40 to %struct.tree_decl_common*, !dbg !13757
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 5, !dbg !13757
  store %union.tree_node* %39, %union.tree_node** %initial, align 8, !dbg !13758
  %41 = load %union.tree_node*, %union.tree_node** %object, align 8, !dbg !13759
  %base66 = bitcast %union.tree_node* %41 to %struct.tree_base*, !dbg !13759
  %42 = bitcast %struct.tree_base* %base66 to i64*, !dbg !13759
  %bf.load67 = load i64, i64* %42, align 8, !dbg !13760
  %bf.clear68 = and i64 %bf.load67, -67108865, !dbg !13760
  %bf.set = or i64 %bf.clear68, 67108864, !dbg !13760
  store i64 %bf.set, i64* %42, align 8, !dbg !13760
  %43 = load %union.tree_node*, %union.tree_node** %object, align 8, !dbg !13761
  %decl_minimal = bitcast %union.tree_node* %43 to %struct.tree_decl_minimal*, !dbg !13761
  %name = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 3, !dbg !13761
  %44 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !13761
  %tobool69 = icmp ne %union.tree_node* %44, null, !dbg !13761
  br i1 %tobool69, label %if.end74, label %if.then70, !dbg !13763

if.then70:                                        ; preds = %if.end65
  %call71 = call %union.tree_node* @create_tmp_var_name(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)), !dbg !13764
  %45 = load %union.tree_node*, %union.tree_node** %object, align 8, !dbg !13765
  %decl_minimal72 = bitcast %union.tree_node* %45 to %struct.tree_decl_minimal*, !dbg !13765
  %name73 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal72, i32 0, i32 3, !dbg !13765
  store %union.tree_node* %call71, %union.tree_node** %name73, align 8, !dbg !13766
  br label %if.end74, !dbg !13765

if.end74:                                         ; preds = %if.then70, %if.end65
  %46 = load %union.tree_node*, %union.tree_node** %object, align 8, !dbg !13767
  %decl_common75 = bitcast %union.tree_node* %46 to %struct.tree_decl_common*, !dbg !13767
  %initial76 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common75, i32 0, i32 5, !dbg !13767
  %call77 = call %union.tree_node* @walk_tree_1(%union.tree_node** %initial76, %union.tree_node* (%union.tree_node**, i32*, i8*)* @force_labels_r, i8* null, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !13767
  %47 = load %union.tree_node*, %union.tree_node** %object, align 8, !dbg !13768
  call void @lhd_set_decl_assembler_name(%union.tree_node* %47), !dbg !13769
  %48 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !13770
  store %union.tree_node* null, %union.tree_node** %48, align 8, !dbg !13771
  br label %sw.epilog, !dbg !13772

if.end78:                                         ; preds = %lor.lhs.false, %land.lhs.true46, %land.lhs.true40, %land.lhs.true, %if.end35
  %49 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !13773
  %call79 = call i64 @count_type_elements(%union.tree_node* %49, i8 zeroext 1), !dbg !13774
  store i64 %call79, i64* %num_type_elements, align 8, !dbg !13775
  %50 = load i64, i64* %num_type_elements, align 8, !dbg !13776
  %cmp80 = icmp slt i64 %50, 0, !dbg !13778
  br i1 %cmp80, label %land.lhs.true82, label %if.else, !dbg !13779

land.lhs.true82:                                  ; preds = %if.end78
  %51 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !13780
  %call83 = call i64 @int_size_in_bytes(%union.tree_node* %51), !dbg !13781
  %cmp84 = icmp sge i64 %call83, 0, !dbg !13782
  br i1 %cmp84, label %if.then86, label %if.else, !dbg !13783

if.then86:                                        ; preds = %land.lhs.true82
  store i8 1, i8* %cleared, align 1, !dbg !13784
  br label %if.end114, !dbg !13785

if.else:                                          ; preds = %land.lhs.true82, %if.end78
  %52 = load i64, i64* %num_type_elements, align 8, !dbg !13786
  %53 = load i64, i64* %num_nonzero_elements, align 8, !dbg !13788
  %sub = sub nsw i64 %52, %53, !dbg !13789
  %54 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !13790
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %54, i64 0, !dbg !13790
  %call87 = call zeroext i8 @optimize_function_for_speed_p(%struct.function* %add.ptr), !dbg !13790
  %conv88 = zext i8 %call87 to i32, !dbg !13790
  %tobool89 = icmp ne i32 %conv88, 0, !dbg !13790
  br i1 %tobool89, label %cond.true90, label %cond.false98, !dbg !13790

cond.true90:                                      ; preds = %if.else
  %55 = load %struct.processor_costs*, %struct.processor_costs** @ix86_cost, align 8, !dbg !13790
  %move_ratio = getelementptr inbounds %struct.processor_costs, %struct.processor_costs* %55, i32 0, i32 10, !dbg !13790
  %56 = load i32, i32* %move_ratio, align 4, !dbg !13790
  %cmp91 = icmp slt i32 6, %56, !dbg !13790
  br i1 %cmp91, label %cond.true93, label %cond.false94, !dbg !13790

cond.true93:                                      ; preds = %cond.true90
  br label %cond.end96, !dbg !13790

cond.false94:                                     ; preds = %cond.true90
  %57 = load %struct.processor_costs*, %struct.processor_costs** @ix86_cost, align 8, !dbg !13790
  %move_ratio95 = getelementptr inbounds %struct.processor_costs, %struct.processor_costs* %57, i32 0, i32 10, !dbg !13790
  %58 = load i32, i32* %move_ratio95, align 4, !dbg !13790
  br label %cond.end96, !dbg !13790

cond.end96:                                       ; preds = %cond.false94, %cond.true93
  %cond97 = phi i32 [ 6, %cond.true93 ], [ %58, %cond.false94 ], !dbg !13790
  br label %cond.end99, !dbg !13790

cond.false98:                                     ; preds = %if.else
  br label %cond.end99, !dbg !13790

cond.end99:                                       ; preds = %cond.false98, %cond.end96
  %cond100 = phi i32 [ %cond97, %cond.end96 ], [ 2, %cond.false98 ], !dbg !13790
  %conv101 = sext i32 %cond100 to i64, !dbg !13790
  %cmp102 = icmp sgt i64 %sub, %conv101, !dbg !13791
  br i1 %cmp102, label %land.lhs.true104, label %if.else108, !dbg !13792

land.lhs.true104:                                 ; preds = %cond.end99
  %59 = load i64, i64* %num_nonzero_elements, align 8, !dbg !13793
  %60 = load i64, i64* %num_type_elements, align 8, !dbg !13794
  %div = sdiv i64 %60, 4, !dbg !13795
  %cmp105 = icmp slt i64 %59, %div, !dbg !13796
  br i1 %cmp105, label %if.then107, label %if.else108, !dbg !13797

if.then107:                                       ; preds = %land.lhs.true104
  store i8 1, i8* %cleared, align 1, !dbg !13798
  br label %if.end113, !dbg !13799

if.else108:                                       ; preds = %land.lhs.true104, %cond.end99
  %61 = load i64, i64* %num_ctor_elements, align 8, !dbg !13800
  %62 = load i64, i64* %num_type_elements, align 8, !dbg !13802
  %cmp109 = icmp slt i64 %61, %62, !dbg !13803
  br i1 %cmp109, label %if.then111, label %if.end112, !dbg !13804

if.then111:                                       ; preds = %if.else108
  store i8 1, i8* %cleared, align 1, !dbg !13805
  br label %if.end112, !dbg !13806

if.end112:                                        ; preds = %if.then111, %if.else108
  br label %if.end113

if.end113:                                        ; preds = %if.end112, %if.then107
  br label %if.end114

if.end114:                                        ; preds = %if.end113, %if.then86
  %63 = load i8, i8* %valid_const_initializer, align 1, !dbg !13807
  %conv115 = zext i8 %63 to i32, !dbg !13807
  %tobool116 = icmp ne i32 %conv115, 0, !dbg !13807
  br i1 %tobool116, label %land.lhs.true117, label %if.end204, !dbg !13809

land.lhs.true117:                                 ; preds = %if.end114
  %64 = load i8, i8* %cleared, align 1, !dbg !13810
  %conv118 = zext i8 %64 to i32, !dbg !13810
  %tobool119 = icmp ne i32 %conv118, 0, !dbg !13810
  br i1 %tobool119, label %if.end204, label %lor.lhs.false120, !dbg !13811

lor.lhs.false120:                                 ; preds = %land.lhs.true117
  %65 = load i64, i64* %num_nonzero_elements, align 8, !dbg !13812
  %cmp121 = icmp eq i64 %65, 0, !dbg !13813
  br i1 %cmp121, label %if.end204, label %land.lhs.true123, !dbg !13814

land.lhs.true123:                                 ; preds = %lor.lhs.false120
  %66 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !13815
  %base124 = bitcast %union.tree_node* %66 to %struct.tree_base*, !dbg !13815
  %67 = bitcast %struct.tree_base* %base124 to i64*, !dbg !13815
  %bf.load125 = load i64, i64* %67, align 8, !dbg !13815
  %bf.lshr126 = lshr i64 %bf.load125, 18, !dbg !13815
  %bf.clear127 = and i64 %bf.lshr126, 1, !dbg !13815
  %bf.cast128 = trunc i64 %bf.clear127 to i32, !dbg !13815
  %tobool129 = icmp ne i32 %bf.cast128, 0, !dbg !13815
  br i1 %tobool129, label %if.end204, label %if.then130, !dbg !13816

if.then130:                                       ; preds = %land.lhs.true123
  call void @llvm.dbg.declare(metadata i64* %size, metadata !13817, metadata !DIExpression()), !dbg !13819
  %68 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !13820
  %call131 = call i64 @int_size_in_bytes(%union.tree_node* %68), !dbg !13821
  store i64 %call131, i64* %size, align 8, !dbg !13819
  call void @llvm.dbg.declare(metadata i32* %align, metadata !13822, metadata !DIExpression()), !dbg !13823
  %69 = load i64, i64* %size, align 8, !dbg !13824
  %cmp132 = icmp slt i64 %69, 0, !dbg !13826
  br i1 %cmp132, label %if.then134, label %if.end146, !dbg !13827

if.then134:                                       ; preds = %if.then130
  %70 = load %union.tree_node*, %union.tree_node** %object, align 8, !dbg !13828
  %common135 = bitcast %union.tree_node* %70 to %struct.tree_common*, !dbg !13828
  %type136 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common135, i32 0, i32 2, !dbg !13828
  %71 = load %union.tree_node*, %union.tree_node** %type136, align 8, !dbg !13828
  %call137 = call i64 @int_size_in_bytes(%union.tree_node* %71), !dbg !13830
  store i64 %call137, i64* %size, align 8, !dbg !13831
  %72 = load i64, i64* %size, align 8, !dbg !13832
  %cmp138 = icmp sge i64 %72, 0, !dbg !13834
  br i1 %cmp138, label %if.then140, label %if.end145, !dbg !13835

if.then140:                                       ; preds = %if.then134
  %73 = load %union.tree_node*, %union.tree_node** %object, align 8, !dbg !13836
  %common141 = bitcast %union.tree_node* %73 to %struct.tree_common*, !dbg !13836
  %type142 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common141, i32 0, i32 2, !dbg !13836
  %74 = load %union.tree_node*, %union.tree_node** %type142, align 8, !dbg !13836
  store %union.tree_node* %74, %union.tree_node** %type, align 8, !dbg !13837
  %75 = load %union.tree_node*, %union.tree_node** %ctor, align 8, !dbg !13838
  %common143 = bitcast %union.tree_node* %75 to %struct.tree_common*, !dbg !13838
  %type144 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common143, i32 0, i32 2, !dbg !13838
  store %union.tree_node* %74, %union.tree_node** %type144, align 8, !dbg !13839
  br label %if.end145, !dbg !13838

if.end145:                                        ; preds = %if.then140, %if.then134
  br label %if.end146, !dbg !13840

if.end146:                                        ; preds = %if.end145, %if.then130
  %76 = load %union.tree_node*, %union.tree_node** %object, align 8, !dbg !13841
  %base147 = bitcast %union.tree_node* %76 to %struct.tree_base*, !dbg !13841
  %77 = bitcast %struct.tree_base* %base147 to i64*, !dbg !13841
  %bf.load148 = load i64, i64* %77, align 8, !dbg !13841
  %bf.clear149 = and i64 %bf.load148, 65535, !dbg !13841
  %bf.cast150 = trunc i64 %bf.clear149 to i32, !dbg !13841
  %idxprom = sext i32 %bf.cast150 to i64, !dbg !13841
  %arrayidx151 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !13841
  %78 = load i32, i32* %arrayidx151, align 4, !dbg !13841
  %cmp152 = icmp eq i32 %78, 3, !dbg !13841
  br i1 %cmp152, label %if.then154, label %if.else157, !dbg !13843

if.then154:                                       ; preds = %if.end146
  %79 = load %union.tree_node*, %union.tree_node** %object, align 8, !dbg !13844
  %decl_common155 = bitcast %union.tree_node* %79 to %struct.tree_decl_common*, !dbg !13844
  %align156 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common155, i32 0, i32 3, !dbg !13844
  %80 = load i32, i32* %align156, align 8, !dbg !13844
  store i32 %80, i32* %align, align 4, !dbg !13845
  br label %if.end160, !dbg !13846

if.else157:                                       ; preds = %if.end146
  %81 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !13847
  %type158 = bitcast %union.tree_node* %81 to %struct.tree_type*, !dbg !13847
  %align159 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type158, i32 0, i32 7, !dbg !13847
  %82 = load i32, i32* %align159, align 8, !dbg !13847
  store i32 %82, i32* %align, align 4, !dbg !13848
  br label %if.end160

if.end160:                                        ; preds = %if.else157, %if.then154
  %83 = load i64, i64* %size, align 8, !dbg !13849
  %cmp161 = icmp sgt i64 %83, 0, !dbg !13851
  br i1 %cmp161, label %land.lhs.true163, label %if.end203, !dbg !13852

land.lhs.true163:                                 ; preds = %if.end160
  %84 = load i64, i64* %num_nonzero_elements, align 8, !dbg !13853
  %cmp164 = icmp sgt i64 %84, 1, !dbg !13854
  br i1 %cmp164, label %land.lhs.true166, label %if.end203, !dbg !13855

land.lhs.true166:                                 ; preds = %land.lhs.true163
  %85 = load i64, i64* %size, align 8, !dbg !13856
  %86 = load i32, i32* %align, align 4, !dbg !13857
  %call167 = call i32 @can_move_by_pieces(i64 %85, i32 %86), !dbg !13858
  %tobool168 = icmp ne i32 %call167, 0, !dbg !13858
  br i1 %tobool168, label %if.end203, label %if.then169, !dbg !13859

if.then169:                                       ; preds = %land.lhs.true166
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_tree, metadata !13860, metadata !DIExpression()), !dbg !13862
  %87 = load i8, i8* %notify_temp_creation.addr, align 1, !dbg !13863
  %tobool170 = icmp ne i8 %87, 0, !dbg !13863
  br i1 %tobool170, label %if.then171, label %if.end172, !dbg !13865

if.then171:                                       ; preds = %if.then169
  store i32 -2, i32* %retval, align 4, !dbg !13866
  br label %return, !dbg !13866

if.end172:                                        ; preds = %if.then169
  %88 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !13867
  %call173 = call %union.tree_node* @create_tmp_var_raw(%union.tree_node* %88, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)), !dbg !13868
  store %union.tree_node* %call173, %union.tree_node** %new_tree, align 8, !dbg !13869
  %89 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !13870
  call void @gimple_add_tmp_var(%union.tree_node* %89), !dbg !13871
  %90 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !13872
  %base174 = bitcast %union.tree_node* %90 to %struct.tree_base*, !dbg !13872
  %91 = bitcast %struct.tree_base* %base174 to i64*, !dbg !13872
  %bf.load175 = load i64, i64* %91, align 8, !dbg !13873
  %bf.clear176 = and i64 %bf.load175, -67108865, !dbg !13873
  %bf.set177 = or i64 %bf.clear176, 67108864, !dbg !13873
  store i64 %bf.set177, i64* %91, align 8, !dbg !13873
  %92 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !13874
  %base178 = bitcast %union.tree_node* %92 to %struct.tree_base*, !dbg !13874
  %93 = bitcast %struct.tree_base* %base178 to i64*, !dbg !13874
  %bf.load179 = load i64, i64* %93, align 8, !dbg !13875
  %bf.clear180 = and i64 %bf.load179, -1048577, !dbg !13875
  %bf.set181 = or i64 %bf.clear180, 1048576, !dbg !13875
  store i64 %bf.set181, i64* %93, align 8, !dbg !13875
  %94 = load %union.tree_node*, %union.tree_node** %ctor, align 8, !dbg !13876
  %95 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !13877
  %decl_common182 = bitcast %union.tree_node* %95 to %struct.tree_decl_common*, !dbg !13877
  %initial183 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common182, i32 0, i32 5, !dbg !13877
  store %union.tree_node* %94, %union.tree_node** %initial183, align 8, !dbg !13878
  %96 = load i32, i32* %align, align 4, !dbg !13879
  %97 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !13881
  %decl_common184 = bitcast %union.tree_node* %97 to %struct.tree_decl_common*, !dbg !13881
  %align185 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common184, i32 0, i32 3, !dbg !13881
  %98 = load i32, i32* %align185, align 8, !dbg !13881
  %cmp186 = icmp ugt i32 %96, %98, !dbg !13882
  br i1 %cmp186, label %if.then188, label %if.end196, !dbg !13883

if.then188:                                       ; preds = %if.end172
  %99 = load i32, i32* %align, align 4, !dbg !13884
  %100 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !13886
  %decl_common189 = bitcast %union.tree_node* %100 to %struct.tree_decl_common*, !dbg !13886
  %align190 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common189, i32 0, i32 3, !dbg !13886
  store i32 %99, i32* %align190, align 8, !dbg !13887
  %101 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !13888
  %common191 = bitcast %union.tree_node* %101 to %struct.tree_common*, !dbg !13888
  %base192 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common191, i32 0, i32 0, !dbg !13888
  %102 = bitcast %struct.tree_base* %base192 to i64*, !dbg !13888
  %bf.load193 = load i64, i64* %102, align 8, !dbg !13889
  %bf.clear194 = and i64 %bf.load193, -4398046511105, !dbg !13889
  %bf.set195 = or i64 %bf.clear194, 4398046511104, !dbg !13889
  store i64 %bf.set195, i64* %102, align 8, !dbg !13889
  br label %if.end196, !dbg !13890

if.end196:                                        ; preds = %if.then188, %if.end172
  %103 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !13891
  %decl_common197 = bitcast %union.tree_node* %103 to %struct.tree_decl_common*, !dbg !13891
  %initial198 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common197, i32 0, i32 5, !dbg !13891
  %call199 = call %union.tree_node* @walk_tree_1(%union.tree_node** %initial198, %union.tree_node* (%union.tree_node**, i32*, i8*)* @force_labels_r, i8* null, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !13891
  %104 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !13892
  %105 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !13893
  %106 = load %union.tree_node*, %union.tree_node** %105, align 8, !dbg !13893
  %exp200 = bitcast %union.tree_node* %106 to %struct.tree_exp*, !dbg !13893
  %operands201 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp200, i32 0, i32 3, !dbg !13893
  %arrayidx202 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands201, i64 0, i64 1, !dbg !13893
  store %union.tree_node* %104, %union.tree_node** %arrayidx202, align 8, !dbg !13894
  store i32 -1, i32* %retval, align 4, !dbg !13895
  br label %return, !dbg !13895

if.end203:                                        ; preds = %land.lhs.true166, %land.lhs.true163, %if.end160
  br label %if.end204, !dbg !13896

if.end204:                                        ; preds = %if.end203, %land.lhs.true123, %lor.lhs.false120, %land.lhs.true117, %if.end114
  %107 = load %union.tree_node*, %union.tree_node** %object, align 8, !dbg !13897
  %base205 = bitcast %union.tree_node* %107 to %struct.tree_base*, !dbg !13897
  %108 = bitcast %struct.tree_base* %base205 to i64*, !dbg !13897
  %bf.load206 = load i64, i64* %108, align 8, !dbg !13897
  %bf.lshr207 = lshr i64 %bf.load206, 19, !dbg !13897
  %bf.clear208 = and i64 %bf.lshr207, 1, !dbg !13897
  %bf.cast209 = trunc i64 %bf.clear208 to i32, !dbg !13897
  %tobool210 = icmp ne i32 %bf.cast209, 0, !dbg !13897
  br i1 %tobool210, label %land.lhs.true211, label %if.end231, !dbg !13899

land.lhs.true211:                                 ; preds = %if.end204
  %109 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !13900
  %base212 = bitcast %union.tree_node* %109 to %struct.tree_base*, !dbg !13900
  %110 = bitcast %struct.tree_base* %base212 to i64*, !dbg !13900
  %bf.load213 = load i64, i64* %110, align 8, !dbg !13900
  %bf.lshr214 = lshr i64 %bf.load213, 18, !dbg !13900
  %bf.clear215 = and i64 %bf.lshr214, 1, !dbg !13900
  %bf.cast216 = trunc i64 %bf.clear215 to i32, !dbg !13900
  %tobool217 = icmp ne i32 %bf.cast216, 0, !dbg !13900
  br i1 %tobool217, label %if.end231, label %land.lhs.true218, !dbg !13901

land.lhs.true218:                                 ; preds = %land.lhs.true211
  %111 = load i64, i64* %num_nonzero_elements, align 8, !dbg !13902
  %cmp219 = icmp sgt i64 %111, 0, !dbg !13903
  br i1 %cmp219, label %if.then221, label %if.end231, !dbg !13904

if.then221:                                       ; preds = %land.lhs.true218
  call void @llvm.dbg.declare(metadata %union.tree_node** %temp, metadata !13905, metadata !DIExpression()), !dbg !13907
  %112 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !13908
  %type222 = bitcast %union.tree_node* %112 to %struct.tree_type*, !dbg !13908
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type222, i32 0, i32 16, !dbg !13908
  %113 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !13908
  %call223 = call %union.tree_node* @create_tmp_var(%union.tree_node* %113, i8* null), !dbg !13909
  store %union.tree_node* %call223, %union.tree_node** %temp, align 8, !dbg !13907
  %114 = load %union.tree_node*, %union.tree_node** %temp, align 8, !dbg !13910
  %115 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !13911
  %116 = load %union.tree_node*, %union.tree_node** %115, align 8, !dbg !13911
  %exp224 = bitcast %union.tree_node* %116 to %struct.tree_exp*, !dbg !13911
  %operands225 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp224, i32 0, i32 3, !dbg !13911
  %arrayidx226 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands225, i64 0, i64 0, !dbg !13911
  store %union.tree_node* %114, %union.tree_node** %arrayidx226, align 8, !dbg !13912
  %117 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !13913
  %118 = load %union.tree_node*, %union.tree_node** %117, align 8, !dbg !13913
  %common227 = bitcast %union.tree_node* %118 to %struct.tree_common*, !dbg !13913
  %type228 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common227, i32 0, i32 2, !dbg !13913
  %119 = load %union.tree_node*, %union.tree_node** %type228, align 8, !dbg !13913
  %120 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !13913
  %121 = load %union.tree_node*, %union.tree_node** %120, align 8, !dbg !13913
  %122 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !13913
  %123 = load %union.tree_node*, %union.tree_node** %object, align 8, !dbg !13913
  %124 = load %union.tree_node*, %union.tree_node** %temp, align 8, !dbg !13913
  %call229 = call %union.tree_node* @build2_stat(i32 53, %union.tree_node* %122, %union.tree_node* %123, %union.tree_node* %124), !dbg !13913
  %call230 = call %union.tree_node* @build2_stat(i32 52, %union.tree_node* %119, %union.tree_node* %121, %union.tree_node* %call229), !dbg !13913
  %125 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !13914
  store %union.tree_node* %call230, %union.tree_node** %125, align 8, !dbg !13915
  store i32 0, i32* %retval, align 4, !dbg !13916
  br label %return, !dbg !13916

if.end231:                                        ; preds = %land.lhs.true218, %land.lhs.true211, %if.end204
  %126 = load i8, i8* %notify_temp_creation.addr, align 1, !dbg !13917
  %tobool232 = icmp ne i8 %126, 0, !dbg !13917
  br i1 %tobool232, label %if.then233, label %if.end234, !dbg !13919

if.then233:                                       ; preds = %if.end231
  store i32 0, i32* %retval, align 4, !dbg !13920
  br label %return, !dbg !13920

if.end234:                                        ; preds = %if.end231
  %127 = load i64, i64* %num_nonzero_elements, align 8, !dbg !13921
  %cmp235 = icmp sgt i64 %127, 0, !dbg !13923
  br i1 %cmp235, label %if.then237, label %if.end255, !dbg !13924

if.then237:                                       ; preds = %if.end234
  %128 = load %union.tree_node*, %union.tree_node** %object, align 8, !dbg !13925
  %call238 = call %union.tree_node* @get_base_address(%union.tree_node* %128), !dbg !13927
  %lhs_base_decl = getelementptr inbounds %struct.gimplify_init_ctor_preeval_data, %struct.gimplify_init_ctor_preeval_data* %preeval_data, i32 0, i32 0, !dbg !13928
  store %union.tree_node* %call238, %union.tree_node** %lhs_base_decl, align 8, !dbg !13929
  %lhs_base_decl239 = getelementptr inbounds %struct.gimplify_init_ctor_preeval_data, %struct.gimplify_init_ctor_preeval_data* %preeval_data, i32 0, i32 0, !dbg !13930
  %129 = load %union.tree_node*, %union.tree_node** %lhs_base_decl239, align 8, !dbg !13930
  %base240 = bitcast %union.tree_node* %129 to %struct.tree_base*, !dbg !13930
  %130 = bitcast %struct.tree_base* %base240 to i64*, !dbg !13930
  %bf.load241 = load i64, i64* %130, align 8, !dbg !13930
  %bf.clear242 = and i64 %bf.load241, 65535, !dbg !13930
  %bf.cast243 = trunc i64 %bf.clear242 to i32, !dbg !13930
  %idxprom244 = sext i32 %bf.cast243 to i64, !dbg !13930
  %arrayidx245 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom244, !dbg !13930
  %131 = load i32, i32* %arrayidx245, align 4, !dbg !13930
  %cmp246 = icmp eq i32 %131, 3, !dbg !13930
  br i1 %cmp246, label %if.end250, label %if.then248, !dbg !13932

if.then248:                                       ; preds = %if.then237
  %lhs_base_decl249 = getelementptr inbounds %struct.gimplify_init_ctor_preeval_data, %struct.gimplify_init_ctor_preeval_data* %preeval_data, i32 0, i32 0, !dbg !13933
  store %union.tree_node* null, %union.tree_node** %lhs_base_decl249, align 8, !dbg !13934
  br label %if.end250, !dbg !13935

if.end250:                                        ; preds = %if.then248, %if.then237
  %132 = load %union.tree_node*, %union.tree_node** %object, align 8, !dbg !13936
  %call251 = call i32 @get_alias_set(%union.tree_node* %132), !dbg !13937
  %lhs_alias_set = getelementptr inbounds %struct.gimplify_init_ctor_preeval_data, %struct.gimplify_init_ctor_preeval_data* %preeval_data, i32 0, i32 1, !dbg !13938
  store i32 %call251, i32* %lhs_alias_set, align 8, !dbg !13939
  %133 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !13940
  %134 = load %union.tree_node*, %union.tree_node** %133, align 8, !dbg !13940
  %exp252 = bitcast %union.tree_node* %134 to %struct.tree_exp*, !dbg !13940
  %operands253 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp252, i32 0, i32 3, !dbg !13940
  %arrayidx254 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands253, i64 0, i64 1, !dbg !13940
  %135 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !13941
  %136 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !13942
  call void @gimplify_init_ctor_preeval(%union.tree_node** %arrayidx254, %struct.gimple_seq_d** %135, %struct.gimple_seq_d** %136, %struct.gimplify_init_ctor_preeval_data* %preeval_data), !dbg !13943
  br label %if.end255, !dbg !13944

if.end255:                                        ; preds = %if.end250, %if.end234
  %137 = load i8, i8* %cleared, align 1, !dbg !13945
  %tobool256 = icmp ne i8 %137, 0, !dbg !13945
  br i1 %tobool256, label %if.then257, label %if.end265, !dbg !13947

if.then257:                                       ; preds = %if.end255
  %138 = load %union.tree_node*, %union.tree_node** %ctor, align 8, !dbg !13948
  %constructor258 = bitcast %union.tree_node* %138 to %struct.tree_constructor*, !dbg !13948
  %elts259 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor258, i32 0, i32 1, !dbg !13948
  store %struct.VEC_constructor_elt_gc* null, %struct.VEC_constructor_elt_gc** %elts259, align 8, !dbg !13950
  %139 = load %union.tree_node*, %union.tree_node** %ctor, align 8, !dbg !13951
  %base260 = bitcast %union.tree_node* %139 to %struct.tree_base*, !dbg !13951
  %140 = bitcast %struct.tree_base* %base260 to i64*, !dbg !13951
  %bf.load261 = load i64, i64* %140, align 8, !dbg !13952
  %bf.clear262 = and i64 %bf.load261, -65537, !dbg !13952
  store i64 %bf.clear262, i64* %140, align 8, !dbg !13952
  %141 = load %union.tree_node*, %union.tree_node** %object, align 8, !dbg !13953
  %call263 = call %union.tree_node* @unshare_expr(%union.tree_node* %141), !dbg !13954
  store %union.tree_node* %call263, %union.tree_node** %object, align 8, !dbg !13955
  %142 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !13956
  %143 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !13957
  %call264 = call zeroext i8 @gimplify_stmt(%union.tree_node** %142, %struct.gimple_seq_d** %143), !dbg !13958
  br label %if.end265, !dbg !13959

if.end265:                                        ; preds = %if.then257, %if.end255
  %144 = load i8, i8* %cleared, align 1, !dbg !13960
  %tobool266 = icmp ne i8 %144, 0, !dbg !13960
  br i1 %tobool266, label %lor.lhs.false267, label %if.then270, !dbg !13962

lor.lhs.false267:                                 ; preds = %if.end265
  %145 = load i64, i64* %num_nonzero_elements, align 8, !dbg !13963
  %cmp268 = icmp sgt i64 %145, 0, !dbg !13964
  br i1 %cmp268, label %if.then270, label %if.end271, !dbg !13965

if.then270:                                       ; preds = %lor.lhs.false267, %if.end265
  %146 = load %union.tree_node*, %union.tree_node** %object, align 8, !dbg !13966
  %147 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts, align 8, !dbg !13967
  %148 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !13968
  %149 = load i8, i8* %cleared, align 1, !dbg !13969
  call void @gimplify_init_ctor_eval(%union.tree_node* %146, %struct.VEC_constructor_elt_gc* %147, %struct.gimple_seq_d** %148, i8 zeroext %149), !dbg !13970
  br label %if.end271, !dbg !13970

if.end271:                                        ; preds = %if.then270, %lor.lhs.false267
  %150 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !13971
  store %union.tree_node* null, %union.tree_node** %150, align 8, !dbg !13972
  br label %sw.epilog, !dbg !13973

sw.bb272:                                         ; preds = %if.end6
  call void @llvm.dbg.declare(metadata %union.tree_node** %r, metadata !13974, metadata !DIExpression()), !dbg !13976
  call void @llvm.dbg.declare(metadata %union.tree_node** %i, metadata !13977, metadata !DIExpression()), !dbg !13978
  %151 = load i8, i8* %notify_temp_creation.addr, align 1, !dbg !13979
  %tobool273 = icmp ne i8 %151, 0, !dbg !13979
  br i1 %tobool273, label %if.then274, label %if.end275, !dbg !13981

if.then274:                                       ; preds = %sw.bb272
  store i32 0, i32* %retval, align 4, !dbg !13982
  br label %return, !dbg !13982

if.end275:                                        ; preds = %sw.bb272
  %152 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts, align 8, !dbg !13983
  %tobool276 = icmp ne %struct.VEC_constructor_elt_gc* %152, null, !dbg !13983
  br i1 %tobool276, label %cond.true277, label %cond.false279, !dbg !13983

cond.true277:                                     ; preds = %if.end275
  %153 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts, align 8, !dbg !13983
  %base278 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %153, i32 0, i32 0, !dbg !13983
  br label %cond.end280, !dbg !13983

cond.false279:                                    ; preds = %if.end275
  br label %cond.end280, !dbg !13983

cond.end280:                                      ; preds = %cond.false279, %cond.true277
  %cond281 = phi %struct.VEC_constructor_elt_base* [ %base278, %cond.true277 ], [ null, %cond.false279 ], !dbg !13983
  %call282 = call i32 @VEC_constructor_elt_base_length(%struct.VEC_constructor_elt_base* %cond281), !dbg !13983
  %cmp283 = icmp eq i32 %call282, 2, !dbg !13983
  br i1 %cmp283, label %cond.false286, label %cond.true285, !dbg !13983

cond.true285:                                     ; preds = %cond.end280
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 3844, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !13983
  br label %cond.end287, !dbg !13983

cond.false286:                                    ; preds = %cond.end280
  br label %cond.end287, !dbg !13983

cond.end287:                                      ; preds = %cond.false286, %cond.true285
  %cond288 = phi i32 [ 0, %cond.true285 ], [ 0, %cond.false286 ], !dbg !13983
  %154 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts, align 8, !dbg !13984
  %tobool289 = icmp ne %struct.VEC_constructor_elt_gc* %154, null, !dbg !13984
  br i1 %tobool289, label %cond.true290, label %cond.false292, !dbg !13984

cond.true290:                                     ; preds = %cond.end287
  %155 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts, align 8, !dbg !13984
  %base291 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %155, i32 0, i32 0, !dbg !13984
  br label %cond.end293, !dbg !13984

cond.false292:                                    ; preds = %cond.end287
  br label %cond.end293, !dbg !13984

cond.end293:                                      ; preds = %cond.false292, %cond.true290
  %cond294 = phi %struct.VEC_constructor_elt_base* [ %base291, %cond.true290 ], [ null, %cond.false292 ], !dbg !13984
  %call295 = call %struct.constructor_elt_d* @VEC_constructor_elt_base_index(%struct.VEC_constructor_elt_base* %cond294, i32 0), !dbg !13984
  %value = getelementptr inbounds %struct.constructor_elt_d, %struct.constructor_elt_d* %call295, i32 0, i32 1, !dbg !13985
  %156 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !13985
  store %union.tree_node* %156, %union.tree_node** %r, align 8, !dbg !13986
  %157 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts, align 8, !dbg !13987
  %tobool296 = icmp ne %struct.VEC_constructor_elt_gc* %157, null, !dbg !13987
  br i1 %tobool296, label %cond.true297, label %cond.false299, !dbg !13987

cond.true297:                                     ; preds = %cond.end293
  %158 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts, align 8, !dbg !13987
  %base298 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %158, i32 0, i32 0, !dbg !13987
  br label %cond.end300, !dbg !13987

cond.false299:                                    ; preds = %cond.end293
  br label %cond.end300, !dbg !13987

cond.end300:                                      ; preds = %cond.false299, %cond.true297
  %cond301 = phi %struct.VEC_constructor_elt_base* [ %base298, %cond.true297 ], [ null, %cond.false299 ], !dbg !13987
  %call302 = call %struct.constructor_elt_d* @VEC_constructor_elt_base_index(%struct.VEC_constructor_elt_base* %cond301, i32 1), !dbg !13987
  %value303 = getelementptr inbounds %struct.constructor_elt_d, %struct.constructor_elt_d* %call302, i32 0, i32 1, !dbg !13988
  %159 = load %union.tree_node*, %union.tree_node** %value303, align 8, !dbg !13988
  store %union.tree_node* %159, %union.tree_node** %i, align 8, !dbg !13989
  %160 = load %union.tree_node*, %union.tree_node** %r, align 8, !dbg !13990
  %cmp304 = icmp eq %union.tree_node* %160, null, !dbg !13992
  br i1 %cmp304, label %if.then309, label %lor.lhs.false306, !dbg !13993

lor.lhs.false306:                                 ; preds = %cond.end300
  %161 = load %union.tree_node*, %union.tree_node** %i, align 8, !dbg !13994
  %cmp307 = icmp eq %union.tree_node* %161, null, !dbg !13995
  br i1 %cmp307, label %if.then309, label %if.end321, !dbg !13996

if.then309:                                       ; preds = %lor.lhs.false306, %cond.end300
  call void @llvm.dbg.declare(metadata %union.tree_node** %zero, metadata !13997, metadata !DIExpression()), !dbg !13999
  %162 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !14000
  %common310 = bitcast %union.tree_node* %162 to %struct.tree_common*, !dbg !14000
  %type311 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common310, i32 0, i32 2, !dbg !14000
  %163 = load %union.tree_node*, %union.tree_node** %type311, align 8, !dbg !14000
  %164 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !14000
  %call312 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %163, %union.tree_node* %164), !dbg !14000
  store %union.tree_node* %call312, %union.tree_node** %zero, align 8, !dbg !13999
  %165 = load %union.tree_node*, %union.tree_node** %r, align 8, !dbg !14001
  %cmp313 = icmp eq %union.tree_node* %165, null, !dbg !14003
  br i1 %cmp313, label %if.then315, label %if.end316, !dbg !14004

if.then315:                                       ; preds = %if.then309
  %166 = load %union.tree_node*, %union.tree_node** %zero, align 8, !dbg !14005
  store %union.tree_node* %166, %union.tree_node** %r, align 8, !dbg !14006
  br label %if.end316, !dbg !14007

if.end316:                                        ; preds = %if.then315, %if.then309
  %167 = load %union.tree_node*, %union.tree_node** %i, align 8, !dbg !14008
  %cmp317 = icmp eq %union.tree_node* %167, null, !dbg !14010
  br i1 %cmp317, label %if.then319, label %if.end320, !dbg !14011

if.then319:                                       ; preds = %if.end316
  %168 = load %union.tree_node*, %union.tree_node** %zero, align 8, !dbg !14012
  store %union.tree_node* %168, %union.tree_node** %i, align 8, !dbg !14013
  br label %if.end320, !dbg !14014

if.end320:                                        ; preds = %if.then319, %if.end316
  br label %if.end321, !dbg !14015

if.end321:                                        ; preds = %if.end320, %lor.lhs.false306
  %169 = load %union.tree_node*, %union.tree_node** %r, align 8, !dbg !14016
  %base322 = bitcast %union.tree_node* %169 to %struct.tree_base*, !dbg !14016
  %170 = bitcast %struct.tree_base* %base322 to i64*, !dbg !14016
  %bf.load323 = load i64, i64* %170, align 8, !dbg !14016
  %bf.lshr324 = lshr i64 %bf.load323, 17, !dbg !14016
  %bf.clear325 = and i64 %bf.lshr324, 1, !dbg !14016
  %bf.cast326 = trunc i64 %bf.clear325 to i32, !dbg !14016
  %tobool327 = icmp ne i32 %bf.cast326, 0, !dbg !14016
  br i1 %tobool327, label %land.lhs.true328, label %if.else340, !dbg !14018

land.lhs.true328:                                 ; preds = %if.end321
  %171 = load %union.tree_node*, %union.tree_node** %i, align 8, !dbg !14019
  %base329 = bitcast %union.tree_node* %171 to %struct.tree_base*, !dbg !14019
  %172 = bitcast %struct.tree_base* %base329 to i64*, !dbg !14019
  %bf.load330 = load i64, i64* %172, align 8, !dbg !14019
  %bf.lshr331 = lshr i64 %bf.load330, 17, !dbg !14019
  %bf.clear332 = and i64 %bf.lshr331, 1, !dbg !14019
  %bf.cast333 = trunc i64 %bf.clear332 to i32, !dbg !14019
  %tobool334 = icmp ne i32 %bf.cast333, 0, !dbg !14019
  br i1 %tobool334, label %if.then335, label %if.else340, !dbg !14020

if.then335:                                       ; preds = %land.lhs.true328
  %173 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !14021
  %174 = load %union.tree_node*, %union.tree_node** %r, align 8, !dbg !14023
  %175 = load %union.tree_node*, %union.tree_node** %i, align 8, !dbg !14024
  %call336 = call %union.tree_node* @build_complex(%union.tree_node* %173, %union.tree_node* %174, %union.tree_node* %175), !dbg !14025
  store %union.tree_node* %call336, %union.tree_node** %ctor, align 8, !dbg !14026
  %176 = load %union.tree_node*, %union.tree_node** %ctor, align 8, !dbg !14027
  %177 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !14028
  %178 = load %union.tree_node*, %union.tree_node** %177, align 8, !dbg !14028
  %exp337 = bitcast %union.tree_node* %178 to %struct.tree_exp*, !dbg !14028
  %operands338 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp337, i32 0, i32 3, !dbg !14028
  %arrayidx339 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands338, i64 0, i64 1, !dbg !14028
  store %union.tree_node* %176, %union.tree_node** %arrayidx339, align 8, !dbg !14029
  br label %if.end353, !dbg !14030

if.else340:                                       ; preds = %land.lhs.true328, %if.end321
  %179 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !14031
  %180 = load %union.tree_node*, %union.tree_node** %r, align 8, !dbg !14031
  %181 = load %union.tree_node*, %union.tree_node** %i, align 8, !dbg !14031
  %call341 = call %union.tree_node* @build2_stat(i32 123, %union.tree_node* %179, %union.tree_node* %180, %union.tree_node* %181), !dbg !14031
  store %union.tree_node* %call341, %union.tree_node** %ctor, align 8, !dbg !14033
  %182 = load %union.tree_node*, %union.tree_node** %ctor, align 8, !dbg !14034
  %183 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !14035
  %184 = load %union.tree_node*, %union.tree_node** %183, align 8, !dbg !14035
  %exp342 = bitcast %union.tree_node* %184 to %struct.tree_exp*, !dbg !14035
  %operands343 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp342, i32 0, i32 3, !dbg !14035
  %arrayidx344 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands343, i64 0, i64 1, !dbg !14035
  store %union.tree_node* %182, %union.tree_node** %arrayidx344, align 8, !dbg !14036
  %185 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !14037
  %186 = load %union.tree_node*, %union.tree_node** %185, align 8, !dbg !14037
  %exp345 = bitcast %union.tree_node* %186 to %struct.tree_exp*, !dbg !14037
  %operands346 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp345, i32 0, i32 3, !dbg !14037
  %arrayidx347 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands346, i64 0, i64 1, !dbg !14037
  %187 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !14038
  %188 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !14039
  %189 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !14040
  %190 = load %union.tree_node*, %union.tree_node** %189, align 8, !dbg !14040
  %exp348 = bitcast %union.tree_node* %190 to %struct.tree_exp*, !dbg !14040
  %operands349 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp348, i32 0, i32 3, !dbg !14040
  %arrayidx350 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands349, i64 0, i64 0, !dbg !14040
  %191 = load %union.tree_node*, %union.tree_node** %arrayidx350, align 8, !dbg !14040
  %call351 = call i8 (%union.tree_node*)* @rhs_predicate_for(%union.tree_node* %191), !dbg !14041
  %call352 = call i32 @gimplify_expr(%union.tree_node** %arrayidx347, %struct.gimple_seq_d** %187, %struct.gimple_seq_d** %188, i8 (%union.tree_node*)* %call351, i32 1), !dbg !14042
  store i32 %call352, i32* %ret, align 4, !dbg !14043
  br label %if.end353

if.end353:                                        ; preds = %if.else340, %if.then335
  br label %sw.epilog, !dbg !14044

sw.bb354:                                         ; preds = %if.end6
  call void @llvm.dbg.declare(metadata i64* %ix, metadata !14045, metadata !DIExpression()), !dbg !14047
  call void @llvm.dbg.declare(metadata %struct.constructor_elt_d** %ce, metadata !14048, metadata !DIExpression()), !dbg !14049
  %192 = load i8, i8* %notify_temp_creation.addr, align 1, !dbg !14050
  %tobool355 = icmp ne i8 %192, 0, !dbg !14050
  br i1 %tobool355, label %if.then356, label %if.end357, !dbg !14052

if.then356:                                       ; preds = %sw.bb354
  store i32 0, i32* %retval, align 4, !dbg !14053
  br label %return, !dbg !14053

if.end357:                                        ; preds = %sw.bb354
  %193 = load %union.tree_node*, %union.tree_node** %ctor, align 8, !dbg !14054
  %base358 = bitcast %union.tree_node* %193 to %struct.tree_base*, !dbg !14054
  %194 = bitcast %struct.tree_base* %base358 to i64*, !dbg !14054
  %bf.load359 = load i64, i64* %194, align 8, !dbg !14054
  %bf.lshr360 = lshr i64 %bf.load359, 17, !dbg !14054
  %bf.clear361 = and i64 %bf.lshr360, 1, !dbg !14054
  %bf.cast362 = trunc i64 %bf.clear361 to i32, !dbg !14054
  %tobool363 = icmp ne i32 %bf.cast362, 0, !dbg !14054
  br i1 %tobool363, label %if.then364, label %if.end414, !dbg !14056

if.then364:                                       ; preds = %if.end357
  call void @llvm.dbg.declare(metadata i8* %constant_p, metadata !14057, metadata !DIExpression()), !dbg !14059
  store i8 1, i8* %constant_p, align 1, !dbg !14059
  call void @llvm.dbg.declare(metadata %union.tree_node** %value365, metadata !14060, metadata !DIExpression()), !dbg !14061
  store i64 0, i64* %ix, align 8, !dbg !14062
  br label %for.cond, !dbg !14062

for.cond:                                         ; preds = %for.inc, %if.then364
  %195 = load i64, i64* %ix, align 8, !dbg !14064
  %196 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts, align 8, !dbg !14064
  %tobool366 = icmp ne %struct.VEC_constructor_elt_gc* %196, null, !dbg !14064
  br i1 %tobool366, label %cond.true367, label %cond.false369, !dbg !14064

cond.true367:                                     ; preds = %for.cond
  %197 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts, align 8, !dbg !14064
  %base368 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %197, i32 0, i32 0, !dbg !14064
  br label %cond.end370, !dbg !14064

cond.false369:                                    ; preds = %for.cond
  br label %cond.end370, !dbg !14064

cond.end370:                                      ; preds = %cond.false369, %cond.true367
  %cond371 = phi %struct.VEC_constructor_elt_base* [ %base368, %cond.true367 ], [ null, %cond.false369 ], !dbg !14064
  %call372 = call i32 @VEC_constructor_elt_base_length(%struct.VEC_constructor_elt_base* %cond371), !dbg !14064
  %conv373 = zext i32 %call372 to i64, !dbg !14064
  %cmp374 = icmp uge i64 %195, %conv373, !dbg !14064
  br i1 %cmp374, label %cond.true376, label %cond.false377, !dbg !14064

cond.true376:                                     ; preds = %cond.end370
  br label %cond.end387, !dbg !14064

cond.false377:                                    ; preds = %cond.end370
  %198 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts, align 8, !dbg !14064
  %tobool378 = icmp ne %struct.VEC_constructor_elt_gc* %198, null, !dbg !14064
  br i1 %tobool378, label %cond.true379, label %cond.false381, !dbg !14064

cond.true379:                                     ; preds = %cond.false377
  %199 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts, align 8, !dbg !14064
  %base380 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %199, i32 0, i32 0, !dbg !14064
  br label %cond.end382, !dbg !14064

cond.false381:                                    ; preds = %cond.false377
  br label %cond.end382, !dbg !14064

cond.end382:                                      ; preds = %cond.false381, %cond.true379
  %cond383 = phi %struct.VEC_constructor_elt_base* [ %base380, %cond.true379 ], [ null, %cond.false381 ], !dbg !14064
  %200 = load i64, i64* %ix, align 8, !dbg !14064
  %conv384 = trunc i64 %200 to i32, !dbg !14064
  %call385 = call %struct.constructor_elt_d* @VEC_constructor_elt_base_index(%struct.VEC_constructor_elt_base* %cond383, i32 %conv384), !dbg !14064
  %value386 = getelementptr inbounds %struct.constructor_elt_d, %struct.constructor_elt_d* %call385, i32 0, i32 1, !dbg !14064
  %201 = load %union.tree_node*, %union.tree_node** %value386, align 8, !dbg !14064
  store %union.tree_node* %201, %union.tree_node** %value365, align 8, !dbg !14064
  br label %cond.end387, !dbg !14064

cond.end387:                                      ; preds = %cond.end382, %cond.true376
  %cond388 = phi i32 [ 0, %cond.true376 ], [ 1, %cond.end382 ], !dbg !14064
  %tobool389 = icmp ne i32 %cond388, 0, !dbg !14062
  br i1 %tobool389, label %for.body, label %for.end, !dbg !14062

for.body:                                         ; preds = %cond.end387
  %202 = load %union.tree_node*, %union.tree_node** %value365, align 8, !dbg !14066
  %base390 = bitcast %union.tree_node* %202 to %struct.tree_base*, !dbg !14066
  %203 = bitcast %struct.tree_base* %base390 to i64*, !dbg !14066
  %bf.load391 = load i64, i64* %203, align 8, !dbg !14066
  %bf.clear392 = and i64 %bf.load391, 65535, !dbg !14066
  %bf.cast393 = trunc i64 %bf.clear392 to i32, !dbg !14066
  %idxprom394 = sext i32 %bf.cast393 to i64, !dbg !14066
  %arrayidx395 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom394, !dbg !14066
  %204 = load i32, i32* %arrayidx395, align 4, !dbg !14066
  %cmp396 = icmp eq i32 %204, 1, !dbg !14066
  br i1 %cmp396, label %if.end399, label %if.then398, !dbg !14068

if.then398:                                       ; preds = %for.body
  store i8 0, i8* %constant_p, align 1, !dbg !14069
  br label %for.end, !dbg !14071

if.end399:                                        ; preds = %for.body
  br label %for.inc, !dbg !14066

for.inc:                                          ; preds = %if.end399
  %205 = load i64, i64* %ix, align 8, !dbg !14064
  %inc = add i64 %205, 1, !dbg !14064
  store i64 %inc, i64* %ix, align 8, !dbg !14064
  br label %for.cond, !dbg !14064, !llvm.loop !14072

for.end:                                          ; preds = %if.then398, %cond.end387
  %206 = load i8, i8* %constant_p, align 1, !dbg !14074
  %tobool400 = icmp ne i8 %206, 0, !dbg !14074
  br i1 %tobool400, label %if.then401, label %if.end406, !dbg !14076

if.then401:                                       ; preds = %for.end
  %207 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !14077
  %208 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts, align 8, !dbg !14079
  %call402 = call %union.tree_node* @build_vector_from_ctor(%union.tree_node* %207, %struct.VEC_constructor_elt_gc* %208), !dbg !14080
  %209 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !14081
  %210 = load %union.tree_node*, %union.tree_node** %209, align 8, !dbg !14081
  %exp403 = bitcast %union.tree_node* %210 to %struct.tree_exp*, !dbg !14081
  %operands404 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp403, i32 0, i32 3, !dbg !14081
  %arrayidx405 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands404, i64 0, i64 1, !dbg !14081
  store %union.tree_node* %call402, %union.tree_node** %arrayidx405, align 8, !dbg !14082
  br label %sw.epilog, !dbg !14083

if.end406:                                        ; preds = %for.end
  %211 = load %union.tree_node*, %union.tree_node** %ctor, align 8, !dbg !14084
  %212 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !14086
  %call407 = call %union.tree_node* @initializer_constant_valid_p(%union.tree_node* %211, %union.tree_node* %212), !dbg !14087
  %tobool408 = icmp ne %union.tree_node* %call407, null, !dbg !14087
  br i1 %tobool408, label %if.then409, label %if.end410, !dbg !14088

if.then409:                                       ; preds = %if.end406
  br label %sw.epilog, !dbg !14089

if.end410:                                        ; preds = %if.end406
  %213 = load %union.tree_node*, %union.tree_node** %ctor, align 8, !dbg !14090
  %base411 = bitcast %union.tree_node* %213 to %struct.tree_base*, !dbg !14090
  %214 = bitcast %struct.tree_base* %base411 to i64*, !dbg !14090
  %bf.load412 = load i64, i64* %214, align 8, !dbg !14091
  %bf.clear413 = and i64 %bf.load412, -131073, !dbg !14091
  store i64 %bf.clear413, i64* %214, align 8, !dbg !14091
  br label %if.end414, !dbg !14092

if.end414:                                        ; preds = %if.end410, %if.end357
  store i64 0, i64* %ix, align 8, !dbg !14093
  br label %for.cond415, !dbg !14095

for.cond415:                                      ; preds = %for.inc432, %if.end414
  %215 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts, align 8, !dbg !14096
  %tobool416 = icmp ne %struct.VEC_constructor_elt_gc* %215, null, !dbg !14096
  br i1 %tobool416, label %cond.true417, label %cond.false419, !dbg !14096

cond.true417:                                     ; preds = %for.cond415
  %216 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts, align 8, !dbg !14096
  %base418 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %216, i32 0, i32 0, !dbg !14096
  br label %cond.end420, !dbg !14096

cond.false419:                                    ; preds = %for.cond415
  br label %cond.end420, !dbg !14096

cond.end420:                                      ; preds = %cond.false419, %cond.true417
  %cond421 = phi %struct.VEC_constructor_elt_base* [ %base418, %cond.true417 ], [ null, %cond.false419 ], !dbg !14096
  %217 = load i64, i64* %ix, align 8, !dbg !14096
  %conv422 = trunc i64 %217 to i32, !dbg !14096
  %call423 = call i32 @VEC_constructor_elt_base_iterate(%struct.VEC_constructor_elt_base* %cond421, i32 %conv422, %struct.constructor_elt_d** %ce), !dbg !14096
  %tobool424 = icmp ne i32 %call423, 0, !dbg !14098
  br i1 %tobool424, label %for.body425, label %for.end434, !dbg !14098

for.body425:                                      ; preds = %cond.end420
  call void @llvm.dbg.declare(metadata i32* %tret, metadata !14099, metadata !DIExpression()), !dbg !14101
  %218 = load %struct.constructor_elt_d*, %struct.constructor_elt_d** %ce, align 8, !dbg !14102
  %value426 = getelementptr inbounds %struct.constructor_elt_d, %struct.constructor_elt_d* %218, i32 0, i32 1, !dbg !14103
  %219 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !14104
  %220 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !14105
  %call427 = call i32 @gimplify_expr(%union.tree_node** %value426, %struct.gimple_seq_d** %219, %struct.gimple_seq_d** %220, i8 (%union.tree_node*)* @is_gimple_val, i32 1), !dbg !14106
  store i32 %call427, i32* %tret, align 4, !dbg !14107
  %221 = load i32, i32* %tret, align 4, !dbg !14108
  %cmp428 = icmp eq i32 %221, -2, !dbg !14110
  br i1 %cmp428, label %if.then430, label %if.end431, !dbg !14111

if.then430:                                       ; preds = %for.body425
  store i32 -2, i32* %ret, align 4, !dbg !14112
  br label %if.end431, !dbg !14113

if.end431:                                        ; preds = %if.then430, %for.body425
  br label %for.inc432, !dbg !14114

for.inc432:                                       ; preds = %if.end431
  %222 = load i64, i64* %ix, align 8, !dbg !14115
  %inc433 = add i64 %222, 1, !dbg !14115
  store i64 %inc433, i64* %ix, align 8, !dbg !14115
  br label %for.cond415, !dbg !14116, !llvm.loop !14117

for.end434:                                       ; preds = %cond.end420
  %223 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !14119
  %224 = load %union.tree_node*, %union.tree_node** %223, align 8, !dbg !14119
  %exp435 = bitcast %union.tree_node* %224 to %struct.tree_exp*, !dbg !14119
  %operands436 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp435, i32 0, i32 3, !dbg !14119
  %arrayidx437 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands436, i64 0, i64 0, !dbg !14119
  %225 = load %union.tree_node*, %union.tree_node** %arrayidx437, align 8, !dbg !14119
  %call438 = call zeroext i8 @is_gimple_reg(%union.tree_node* %225), !dbg !14121
  %tobool439 = icmp ne i8 %call438, 0, !dbg !14121
  br i1 %tobool439, label %if.end445, label %if.then440, !dbg !14122

if.then440:                                       ; preds = %for.end434
  %226 = load %union.tree_node*, %union.tree_node** %ctor, align 8, !dbg !14123
  %227 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !14124
  %call441 = call %union.tree_node* @get_formal_tmp_var(%union.tree_node* %226, %struct.gimple_seq_d** %227), !dbg !14125
  %228 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !14126
  %229 = load %union.tree_node*, %union.tree_node** %228, align 8, !dbg !14126
  %exp442 = bitcast %union.tree_node* %229 to %struct.tree_exp*, !dbg !14126
  %operands443 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp442, i32 0, i32 3, !dbg !14126
  %arrayidx444 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands443, i64 0, i64 1, !dbg !14126
  store %union.tree_node* %call441, %union.tree_node** %arrayidx444, align 8, !dbg !14127
  br label %if.end445, !dbg !14126

if.end445:                                        ; preds = %if.then440, %for.end434
  br label %sw.epilog, !dbg !14128

sw.default:                                       ; preds = %if.end6
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 3933, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !14129
  br label %sw.epilog, !dbg !14130

sw.epilog:                                        ; preds = %sw.default, %if.end445, %if.then409, %if.then401, %if.end353, %if.end271, %if.end74, %if.end34
  %230 = load i32, i32* %ret, align 4, !dbg !14131
  %cmp446 = icmp eq i32 %230, -2, !dbg !14133
  br i1 %cmp446, label %if.then448, label %if.else449, !dbg !14134

if.then448:                                       ; preds = %sw.epilog
  store i32 -2, i32* %retval, align 4, !dbg !14135
  br label %return, !dbg !14135

if.else449:                                       ; preds = %sw.epilog
  %231 = load i8, i8* %want_value.addr, align 1, !dbg !14136
  %tobool450 = icmp ne i8 %231, 0, !dbg !14136
  br i1 %tobool450, label %if.then451, label %if.else452, !dbg !14138

if.then451:                                       ; preds = %if.else449
  %232 = load %union.tree_node*, %union.tree_node** %object, align 8, !dbg !14139
  %233 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !14141
  store %union.tree_node* %232, %union.tree_node** %233, align 8, !dbg !14142
  store i32 0, i32* %retval, align 4, !dbg !14143
  br label %return, !dbg !14143

if.else452:                                       ; preds = %if.else449
  %234 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !14144
  %235 = load %union.tree_node*, %union.tree_node** %234, align 8, !dbg !14147
  %tobool453 = icmp ne %union.tree_node* %235, null, !dbg !14147
  br i1 %tobool453, label %if.then454, label %if.end462, !dbg !14148

if.then454:                                       ; preds = %if.else452
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !14149, metadata !DIExpression()), !dbg !14151
  %236 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !14152
  %237 = load %union.tree_node*, %union.tree_node** %236, align 8, !dbg !14152
  %exp455 = bitcast %union.tree_node* %237 to %struct.tree_exp*, !dbg !14152
  %operands456 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp455, i32 0, i32 3, !dbg !14152
  %arrayidx457 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands456, i64 0, i64 0, !dbg !14152
  %238 = load %union.tree_node*, %union.tree_node** %arrayidx457, align 8, !dbg !14152
  store %union.tree_node* %238, %union.tree_node** %lhs, align 8, !dbg !14151
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs, metadata !14153, metadata !DIExpression()), !dbg !14154
  %239 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !14155
  %240 = load %union.tree_node*, %union.tree_node** %239, align 8, !dbg !14155
  %exp458 = bitcast %union.tree_node* %240 to %struct.tree_exp*, !dbg !14155
  %operands459 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp458, i32 0, i32 3, !dbg !14155
  %arrayidx460 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands459, i64 0, i64 1, !dbg !14155
  %241 = load %union.tree_node*, %union.tree_node** %arrayidx460, align 8, !dbg !14155
  store %union.tree_node* %241, %union.tree_node** %rhs, align 8, !dbg !14154
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %init, metadata !14156, metadata !DIExpression()), !dbg !14157
  %242 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !14158
  %243 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !14158
  %call461 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %242, %union.tree_node* %243), !dbg !14158
  store %union.gimple_statement_d* %call461, %union.gimple_statement_d** %init, align 8, !dbg !14157
  %244 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !14159
  %245 = load %union.gimple_statement_d*, %union.gimple_statement_d** %init, align 8, !dbg !14160
  call void @gimplify_seq_add_stmt(%struct.gimple_seq_d** %244, %union.gimple_statement_d* %245), !dbg !14161
  %246 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !14162
  store %union.tree_node* null, %union.tree_node** %246, align 8, !dbg !14163
  br label %if.end462, !dbg !14164

if.end462:                                        ; preds = %if.then454, %if.else452
  store i32 1, i32* %retval, align 4, !dbg !14165
  br label %return, !dbg !14165

return:                                           ; preds = %if.end462, %if.then451, %if.then448, %if.then356, %if.then274, %if.then233, %if.then221, %if.end196, %if.then171, %if.then64, %if.then33, %if.then5
  %247 = load i32, i32* %retval, align 4, !dbg !14166
  ret i32 %247, !dbg !14166
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_fold_indirect_ref_rhs(%union.tree_node* %t) #0 !dbg !14167 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !14168, metadata !DIExpression()), !dbg !14169
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !14170
  %call = call %union.tree_node* @gimple_fold_indirect_ref(%union.tree_node* %0), !dbg !14171
  ret %union.tree_node* %call, !dbg !14172
}

declare dso_local zeroext i8 @is_gimple_non_addressable(%union.tree_node*) #3

declare dso_local %union.tree_node* @copy_node_stat(%union.tree_node*) #3

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @optimize_compound_literals_in_ctor(%union.tree_node* %orig_ctor) #0 !dbg !14173 {
entry:
  %orig_ctor.addr = alloca %union.tree_node*, align 8
  %ctor = alloca %union.tree_node*, align 8
  %elts = alloca %struct.VEC_constructor_elt_gc*, align 8
  %idx = alloca i32, align 4
  %num = alloca i32, align 4
  %value = alloca %union.tree_node*, align 8
  %newval = alloca %union.tree_node*, align 8
  %decl_s = alloca %union.tree_node*, align 8
  %decl = alloca %union.tree_node*, align 8
  %init = alloca %union.tree_node*, align 8
  store %union.tree_node* %orig_ctor, %union.tree_node** %orig_ctor.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %orig_ctor.addr, metadata !14174, metadata !DIExpression()), !dbg !14175
  call void @llvm.dbg.declare(metadata %union.tree_node** %ctor, metadata !14176, metadata !DIExpression()), !dbg !14177
  %0 = load %union.tree_node*, %union.tree_node** %orig_ctor.addr, align 8, !dbg !14178
  store %union.tree_node* %0, %union.tree_node** %ctor, align 8, !dbg !14177
  call void @llvm.dbg.declare(metadata %struct.VEC_constructor_elt_gc** %elts, metadata !14179, metadata !DIExpression()), !dbg !14180
  %1 = load %union.tree_node*, %union.tree_node** %ctor, align 8, !dbg !14181
  %constructor = bitcast %union.tree_node* %1 to %struct.tree_constructor*, !dbg !14181
  %elts1 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor, i32 0, i32 1, !dbg !14181
  %2 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts1, align 8, !dbg !14181
  store %struct.VEC_constructor_elt_gc* %2, %struct.VEC_constructor_elt_gc** %elts, align 8, !dbg !14180
  call void @llvm.dbg.declare(metadata i32* %idx, metadata !14182, metadata !DIExpression()), !dbg !14183
  call void @llvm.dbg.declare(metadata i32* %num, metadata !14184, metadata !DIExpression()), !dbg !14185
  %3 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts, align 8, !dbg !14186
  %tobool = icmp ne %struct.VEC_constructor_elt_gc* %3, null, !dbg !14186
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !14186

cond.true:                                        ; preds = %entry
  %4 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts, align 8, !dbg !14186
  %base = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %4, i32 0, i32 0, !dbg !14186
  br label %cond.end, !dbg !14186

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !14186

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_constructor_elt_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !14186
  %call = call i32 @VEC_constructor_elt_base_length(%struct.VEC_constructor_elt_base* %cond), !dbg !14186
  store i32 %call, i32* %num, align 4, !dbg !14185
  store i32 0, i32* %idx, align 4, !dbg !14187
  br label %for.cond, !dbg !14189

for.cond:                                         ; preds = %for.inc, %cond.end
  %5 = load i32, i32* %idx, align 4, !dbg !14190
  %6 = load i32, i32* %num, align 4, !dbg !14192
  %cmp = icmp ult i32 %5, %6, !dbg !14193
  br i1 %cmp, label %for.body, label %for.end, !dbg !14194

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %value, metadata !14195, metadata !DIExpression()), !dbg !14197
  %7 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts, align 8, !dbg !14198
  %tobool2 = icmp ne %struct.VEC_constructor_elt_gc* %7, null, !dbg !14198
  br i1 %tobool2, label %cond.true3, label %cond.false5, !dbg !14198

cond.true3:                                       ; preds = %for.body
  %8 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts, align 8, !dbg !14198
  %base4 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %8, i32 0, i32 0, !dbg !14198
  br label %cond.end6, !dbg !14198

cond.false5:                                      ; preds = %for.body
  br label %cond.end6, !dbg !14198

cond.end6:                                        ; preds = %cond.false5, %cond.true3
  %cond7 = phi %struct.VEC_constructor_elt_base* [ %base4, %cond.true3 ], [ null, %cond.false5 ], !dbg !14198
  %9 = load i32, i32* %idx, align 4, !dbg !14198
  %call8 = call %struct.constructor_elt_d* @VEC_constructor_elt_base_index(%struct.VEC_constructor_elt_base* %cond7, i32 %9), !dbg !14198
  %value9 = getelementptr inbounds %struct.constructor_elt_d, %struct.constructor_elt_d* %call8, i32 0, i32 1, !dbg !14199
  %10 = load %union.tree_node*, %union.tree_node** %value9, align 8, !dbg !14199
  store %union.tree_node* %10, %union.tree_node** %value, align 8, !dbg !14197
  call void @llvm.dbg.declare(metadata %union.tree_node** %newval, metadata !14200, metadata !DIExpression()), !dbg !14201
  %11 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !14202
  store %union.tree_node* %11, %union.tree_node** %newval, align 8, !dbg !14201
  %12 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !14203
  %base10 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !14203
  %13 = bitcast %struct.tree_base* %base10 to i64*, !dbg !14203
  %bf.load = load i64, i64* %13, align 8, !dbg !14203
  %bf.clear = and i64 %bf.load, 65535, !dbg !14203
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !14203
  %cmp11 = icmp eq i32 %bf.cast, 51, !dbg !14205
  br i1 %cmp11, label %if.then, label %if.else, !dbg !14206

if.then:                                          ; preds = %cond.end6
  %14 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !14207
  %call12 = call %union.tree_node* @optimize_compound_literals_in_ctor(%union.tree_node* %14), !dbg !14208
  store %union.tree_node* %call12, %union.tree_node** %newval, align 8, !dbg !14209
  br label %if.end38, !dbg !14210

if.else:                                          ; preds = %cond.end6
  %15 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !14211
  %base13 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !14211
  %16 = bitcast %struct.tree_base* %base13 to i64*, !dbg !14211
  %bf.load14 = load i64, i64* %16, align 8, !dbg !14211
  %bf.clear15 = and i64 %bf.load14, 65535, !dbg !14211
  %bf.cast16 = trunc i64 %bf.clear15 to i32, !dbg !14211
  %cmp17 = icmp eq i32 %bf.cast16, 119, !dbg !14213
  br i1 %cmp17, label %if.then18, label %if.end37, !dbg !14214

if.then18:                                        ; preds = %if.else
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl_s, metadata !14215, metadata !DIExpression()), !dbg !14217
  %17 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !14218
  %exp = bitcast %union.tree_node* %17 to %struct.tree_exp*, !dbg !14218
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !14218
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !14218
  %18 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !14218
  store %union.tree_node* %18, %union.tree_node** %decl_s, align 8, !dbg !14217
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !14219, metadata !DIExpression()), !dbg !14220
  %19 = load %union.tree_node*, %union.tree_node** %decl_s, align 8, !dbg !14221
  %exp19 = bitcast %union.tree_node* %19 to %struct.tree_exp*, !dbg !14221
  %operands20 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp19, i32 0, i32 3, !dbg !14221
  %arrayidx21 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands20, i64 0, i64 0, !dbg !14221
  %20 = load %union.tree_node*, %union.tree_node** %arrayidx21, align 8, !dbg !14221
  store %union.tree_node* %20, %union.tree_node** %decl, align 8, !dbg !14220
  call void @llvm.dbg.declare(metadata %union.tree_node** %init, metadata !14222, metadata !DIExpression()), !dbg !14223
  %21 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !14224
  %decl_common = bitcast %union.tree_node* %21 to %struct.tree_decl_common*, !dbg !14224
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 5, !dbg !14224
  %22 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !14224
  store %union.tree_node* %22, %union.tree_node** %init, align 8, !dbg !14223
  %23 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !14225
  %base22 = bitcast %union.tree_node* %23 to %struct.tree_base*, !dbg !14225
  %24 = bitcast %struct.tree_base* %base22 to i64*, !dbg !14225
  %bf.load23 = load i64, i64* %24, align 8, !dbg !14225
  %bf.lshr = lshr i64 %bf.load23, 18, !dbg !14225
  %bf.clear24 = and i64 %bf.lshr, 1, !dbg !14225
  %bf.cast25 = trunc i64 %bf.clear24 to i32, !dbg !14225
  %tobool26 = icmp ne i32 %bf.cast25, 0, !dbg !14225
  br i1 %tobool26, label %if.end, label %land.lhs.true, !dbg !14227

land.lhs.true:                                    ; preds = %if.then18
  %25 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !14228
  %base27 = bitcast %union.tree_node* %25 to %struct.tree_base*, !dbg !14228
  %26 = bitcast %struct.tree_base* %base27 to i64*, !dbg !14228
  %bf.load28 = load i64, i64* %26, align 8, !dbg !14228
  %bf.lshr29 = lshr i64 %bf.load28, 18, !dbg !14228
  %bf.clear30 = and i64 %bf.lshr29, 1, !dbg !14228
  %bf.cast31 = trunc i64 %bf.clear30 to i32, !dbg !14228
  %tobool32 = icmp ne i32 %bf.cast31, 0, !dbg !14228
  br i1 %tobool32, label %if.end, label %land.lhs.true33, !dbg !14229

land.lhs.true33:                                  ; preds = %land.lhs.true
  %27 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !14230
  %tobool34 = icmp ne %union.tree_node* %27, null, !dbg !14230
  br i1 %tobool34, label %if.then35, label %if.end, !dbg !14231

if.then35:                                        ; preds = %land.lhs.true33
  %28 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !14232
  %call36 = call %union.tree_node* @optimize_compound_literals_in_ctor(%union.tree_node* %28), !dbg !14233
  store %union.tree_node* %call36, %union.tree_node** %newval, align 8, !dbg !14234
  br label %if.end, !dbg !14235

if.end:                                           ; preds = %if.then35, %land.lhs.true33, %land.lhs.true, %if.then18
  br label %if.end37, !dbg !14236

if.end37:                                         ; preds = %if.end, %if.else
  br label %if.end38

if.end38:                                         ; preds = %if.end37, %if.then
  %29 = load %union.tree_node*, %union.tree_node** %newval, align 8, !dbg !14237
  %30 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !14239
  %cmp39 = icmp eq %union.tree_node* %29, %30, !dbg !14240
  br i1 %cmp39, label %if.then40, label %if.end41, !dbg !14241

if.then40:                                        ; preds = %if.end38
  br label %for.inc, !dbg !14242

if.end41:                                         ; preds = %if.end38
  %31 = load %union.tree_node*, %union.tree_node** %ctor, align 8, !dbg !14243
  %32 = load %union.tree_node*, %union.tree_node** %orig_ctor.addr, align 8, !dbg !14245
  %cmp42 = icmp eq %union.tree_node* %31, %32, !dbg !14246
  br i1 %cmp42, label %if.then43, label %if.end56, !dbg !14247

if.then43:                                        ; preds = %if.end41
  %33 = load %union.tree_node*, %union.tree_node** %orig_ctor.addr, align 8, !dbg !14248
  %call44 = call %union.tree_node* @copy_node_stat(%union.tree_node* %33), !dbg !14248
  store %union.tree_node* %call44, %union.tree_node** %ctor, align 8, !dbg !14250
  %34 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts, align 8, !dbg !14251
  %tobool45 = icmp ne %struct.VEC_constructor_elt_gc* %34, null, !dbg !14251
  br i1 %tobool45, label %cond.true46, label %cond.false48, !dbg !14251

cond.true46:                                      ; preds = %if.then43
  %35 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts, align 8, !dbg !14251
  %base47 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %35, i32 0, i32 0, !dbg !14251
  br label %cond.end49, !dbg !14251

cond.false48:                                     ; preds = %if.then43
  br label %cond.end49, !dbg !14251

cond.end49:                                       ; preds = %cond.false48, %cond.true46
  %cond50 = phi %struct.VEC_constructor_elt_base* [ %base47, %cond.true46 ], [ null, %cond.false48 ], !dbg !14251
  %call51 = call %struct.VEC_constructor_elt_gc* @VEC_constructor_elt_gc_copy(%struct.VEC_constructor_elt_base* %cond50), !dbg !14251
  %36 = load %union.tree_node*, %union.tree_node** %ctor, align 8, !dbg !14252
  %constructor52 = bitcast %union.tree_node* %36 to %struct.tree_constructor*, !dbg !14252
  %elts53 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor52, i32 0, i32 1, !dbg !14252
  store %struct.VEC_constructor_elt_gc* %call51, %struct.VEC_constructor_elt_gc** %elts53, align 8, !dbg !14253
  %37 = load %union.tree_node*, %union.tree_node** %ctor, align 8, !dbg !14254
  %constructor54 = bitcast %union.tree_node* %37 to %struct.tree_constructor*, !dbg !14254
  %elts55 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor54, i32 0, i32 1, !dbg !14254
  %38 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts55, align 8, !dbg !14254
  store %struct.VEC_constructor_elt_gc* %38, %struct.VEC_constructor_elt_gc** %elts, align 8, !dbg !14255
  br label %if.end56, !dbg !14256

if.end56:                                         ; preds = %cond.end49, %if.end41
  %39 = load %union.tree_node*, %union.tree_node** %newval, align 8, !dbg !14257
  %40 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts, align 8, !dbg !14258
  %tobool57 = icmp ne %struct.VEC_constructor_elt_gc* %40, null, !dbg !14258
  br i1 %tobool57, label %cond.true58, label %cond.false60, !dbg !14258

cond.true58:                                      ; preds = %if.end56
  %41 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts, align 8, !dbg !14258
  %base59 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %41, i32 0, i32 0, !dbg !14258
  br label %cond.end61, !dbg !14258

cond.false60:                                     ; preds = %if.end56
  br label %cond.end61, !dbg !14258

cond.end61:                                       ; preds = %cond.false60, %cond.true58
  %cond62 = phi %struct.VEC_constructor_elt_base* [ %base59, %cond.true58 ], [ null, %cond.false60 ], !dbg !14258
  %42 = load i32, i32* %idx, align 4, !dbg !14258
  %call63 = call %struct.constructor_elt_d* @VEC_constructor_elt_base_index(%struct.VEC_constructor_elt_base* %cond62, i32 %42), !dbg !14258
  %value64 = getelementptr inbounds %struct.constructor_elt_d, %struct.constructor_elt_d* %call63, i32 0, i32 1, !dbg !14259
  store %union.tree_node* %39, %union.tree_node** %value64, align 8, !dbg !14260
  br label %for.inc, !dbg !14261

for.inc:                                          ; preds = %cond.end61, %if.then40
  %43 = load i32, i32* %idx, align 4, !dbg !14262
  %inc = add i32 %43, 1, !dbg !14262
  store i32 %inc, i32* %idx, align 4, !dbg !14262
  br label %for.cond, !dbg !14263, !llvm.loop !14264

for.end:                                          ; preds = %for.cond
  %44 = load %union.tree_node*, %union.tree_node** %ctor, align 8, !dbg !14266
  ret %union.tree_node* %44, !dbg !14267
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_constructor_elt_base_length(%struct.VEC_constructor_elt_base* %vec_) #0 !dbg !14268 {
entry:
  %vec_.addr = alloca %struct.VEC_constructor_elt_base*, align 8
  store %struct.VEC_constructor_elt_base* %vec_, %struct.VEC_constructor_elt_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_constructor_elt_base** %vec_.addr, metadata !14273, metadata !DIExpression()), !dbg !14274
  %0 = load %struct.VEC_constructor_elt_base*, %struct.VEC_constructor_elt_base** %vec_.addr, align 8, !dbg !14274
  %tobool = icmp ne %struct.VEC_constructor_elt_base* %0, null, !dbg !14274
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !14274

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_constructor_elt_base*, %struct.VEC_constructor_elt_base** %vec_.addr, align 8, !dbg !14274
  %num = getelementptr inbounds %struct.VEC_constructor_elt_base, %struct.VEC_constructor_elt_base* %1, i32 0, i32 0, !dbg !14274
  %2 = load i32, i32* %num, align 8, !dbg !14274
  br label %cond.end, !dbg !14274

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !14274

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !14274
  ret i32 %cond, !dbg !14274
}

declare dso_local zeroext i8 @categorize_ctor_elements(%union.tree_node*, i64*, i64*, i8*) #3

declare dso_local void @lhd_set_decl_assembler_name(%union.tree_node*) #3

declare dso_local i64 @count_type_elements(%union.tree_node*, i8 zeroext) #3

declare dso_local i64 @int_size_in_bytes(%union.tree_node*) #3

declare dso_local zeroext i8 @optimize_function_for_speed_p(%struct.function*) #3

declare dso_local i32 @can_move_by_pieces(i64, i32) #3

declare dso_local %union.tree_node* @get_base_address(%union.tree_node*) #3

declare dso_local i32 @get_alias_set(%union.tree_node*) #3

; Function Attrs: noinline nounwind uwtable
define internal void @gimplify_init_ctor_preeval(%union.tree_node** %expr_p, %struct.gimple_seq_d** %pre_p, %struct.gimple_seq_d** %post_p, %struct.gimplify_init_ctor_preeval_data* %data) #0 !dbg !14275 {
entry:
  %expr_p.addr = alloca %union.tree_node**, align 8
  %pre_p.addr = alloca %struct.gimple_seq_d**, align 8
  %post_p.addr = alloca %struct.gimple_seq_d**, align 8
  %data.addr = alloca %struct.gimplify_init_ctor_preeval_data*, align 8
  %one = alloca i32, align 4
  %ix = alloca i64, align 8
  %ce = alloca %struct.constructor_elt_d*, align 8
  %v = alloca %struct.VEC_constructor_elt_gc*, align 8
  store %union.tree_node** %expr_p, %union.tree_node*** %expr_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %expr_p.addr, metadata !14278, metadata !DIExpression()), !dbg !14279
  store %struct.gimple_seq_d** %pre_p, %struct.gimple_seq_d*** %pre_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %pre_p.addr, metadata !14280, metadata !DIExpression()), !dbg !14281
  store %struct.gimple_seq_d** %post_p, %struct.gimple_seq_d*** %post_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %post_p.addr, metadata !14282, metadata !DIExpression()), !dbg !14283
  store %struct.gimplify_init_ctor_preeval_data* %data, %struct.gimplify_init_ctor_preeval_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimplify_init_ctor_preeval_data** %data.addr, metadata !14284, metadata !DIExpression()), !dbg !14285
  call void @llvm.dbg.declare(metadata i32* %one, metadata !14286, metadata !DIExpression()), !dbg !14287
  %0 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !14288
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !14288
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !14288
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !14288
  %bf.load = load i64, i64* %2, align 8, !dbg !14288
  %bf.lshr = lshr i64 %bf.load, 17, !dbg !14288
  %bf.clear = and i64 %bf.lshr, 1, !dbg !14288
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !14288
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !14288
  br i1 %tobool, label %if.then, label %if.end, !dbg !14290

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !14291
  %4 = load %union.tree_node*, %union.tree_node** %3, align 8, !dbg !14291
  %base1 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !14291
  %5 = bitcast %struct.tree_base* %base1 to i64*, !dbg !14291
  %bf.load2 = load i64, i64* %5, align 8, !dbg !14291
  %bf.lshr3 = lshr i64 %bf.load2, 16, !dbg !14291
  %bf.clear4 = and i64 %bf.lshr3, 1, !dbg !14291
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !14291
  %tobool6 = icmp ne i32 %bf.cast5, 0, !dbg !14291
  br i1 %tobool6, label %cond.true, label %cond.false, !dbg !14291

cond.true:                                        ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 3263, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !14291
  br label %cond.end, !dbg !14291

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !14291

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !14291
  br label %return, !dbg !14293

if.end:                                           ; preds = %entry
  %6 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !14294
  %7 = load %union.tree_node*, %union.tree_node** %6, align 8, !dbg !14294
  %common = bitcast %union.tree_node* %7 to %struct.tree_common*, !dbg !14294
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !14294
  %8 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !14294
  %base7 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !14294
  %9 = bitcast %struct.tree_base* %base7 to i64*, !dbg !14294
  %bf.load8 = load i64, i64* %9, align 8, !dbg !14294
  %bf.lshr9 = lshr i64 %bf.load8, 18, !dbg !14294
  %bf.clear10 = and i64 %bf.lshr9, 1, !dbg !14294
  %bf.cast11 = trunc i64 %bf.clear10 to i32, !dbg !14294
  %tobool12 = icmp ne i32 %bf.cast11, 0, !dbg !14294
  br i1 %tobool12, label %if.then13, label %if.end14, !dbg !14296

if.then13:                                        ; preds = %if.end
  br label %return, !dbg !14297

if.end14:                                         ; preds = %if.end
  %10 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !14298
  %11 = load %union.tree_node*, %union.tree_node** %10, align 8, !dbg !14298
  %base15 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !14298
  %12 = bitcast %struct.tree_base* %base15 to i64*, !dbg !14298
  %bf.load16 = load i64, i64* %12, align 8, !dbg !14298
  %bf.clear17 = and i64 %bf.load16, 65535, !dbg !14298
  %bf.cast18 = trunc i64 %bf.clear17 to i32, !dbg !14298
  %cmp = icmp eq i32 %bf.cast18, 51, !dbg !14300
  br i1 %cmp, label %if.then19, label %if.end27, !dbg !14301

if.then19:                                        ; preds = %if.end14
  call void @llvm.dbg.declare(metadata i64* %ix, metadata !14302, metadata !DIExpression()), !dbg !14304
  call void @llvm.dbg.declare(metadata %struct.constructor_elt_d** %ce, metadata !14305, metadata !DIExpression()), !dbg !14306
  call void @llvm.dbg.declare(metadata %struct.VEC_constructor_elt_gc** %v, metadata !14307, metadata !DIExpression()), !dbg !14308
  %13 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !14309
  %14 = load %union.tree_node*, %union.tree_node** %13, align 8, !dbg !14309
  %constructor = bitcast %union.tree_node* %14 to %struct.tree_constructor*, !dbg !14309
  %elts = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor, i32 0, i32 1, !dbg !14309
  %15 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts, align 8, !dbg !14309
  store %struct.VEC_constructor_elt_gc* %15, %struct.VEC_constructor_elt_gc** %v, align 8, !dbg !14308
  store i64 0, i64* %ix, align 8, !dbg !14310
  br label %for.cond, !dbg !14312

for.cond:                                         ; preds = %for.inc, %if.then19
  %16 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %v, align 8, !dbg !14313
  %tobool20 = icmp ne %struct.VEC_constructor_elt_gc* %16, null, !dbg !14313
  br i1 %tobool20, label %cond.true21, label %cond.false23, !dbg !14313

cond.true21:                                      ; preds = %for.cond
  %17 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %v, align 8, !dbg !14313
  %base22 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %17, i32 0, i32 0, !dbg !14313
  br label %cond.end24, !dbg !14313

cond.false23:                                     ; preds = %for.cond
  br label %cond.end24, !dbg !14313

cond.end24:                                       ; preds = %cond.false23, %cond.true21
  %cond25 = phi %struct.VEC_constructor_elt_base* [ %base22, %cond.true21 ], [ null, %cond.false23 ], !dbg !14313
  %18 = load i64, i64* %ix, align 8, !dbg !14313
  %conv = trunc i64 %18 to i32, !dbg !14313
  %call = call i32 @VEC_constructor_elt_base_iterate(%struct.VEC_constructor_elt_base* %cond25, i32 %conv, %struct.constructor_elt_d** %ce), !dbg !14313
  %tobool26 = icmp ne i32 %call, 0, !dbg !14315
  br i1 %tobool26, label %for.body, label %for.end, !dbg !14315

for.body:                                         ; preds = %cond.end24
  %19 = load %struct.constructor_elt_d*, %struct.constructor_elt_d** %ce, align 8, !dbg !14316
  %value = getelementptr inbounds %struct.constructor_elt_d, %struct.constructor_elt_d* %19, i32 0, i32 1, !dbg !14317
  %20 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !14318
  %21 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !14319
  %22 = load %struct.gimplify_init_ctor_preeval_data*, %struct.gimplify_init_ctor_preeval_data** %data.addr, align 8, !dbg !14320
  call void @gimplify_init_ctor_preeval(%union.tree_node** %value, %struct.gimple_seq_d** %20, %struct.gimple_seq_d** %21, %struct.gimplify_init_ctor_preeval_data* %22), !dbg !14321
  br label %for.inc, !dbg !14321

for.inc:                                          ; preds = %for.body
  %23 = load i64, i64* %ix, align 8, !dbg !14322
  %inc = add i64 %23, 1, !dbg !14322
  store i64 %inc, i64* %ix, align 8, !dbg !14322
  br label %for.cond, !dbg !14323, !llvm.loop !14324

for.end:                                          ; preds = %cond.end24
  br label %return, !dbg !14326

if.end27:                                         ; preds = %if.end14
  %24 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !14327
  call void @maybe_with_size_expr(%union.tree_node** %24), !dbg !14328
  %25 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !14329
  %26 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !14330
  %27 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %post_p.addr, align 8, !dbg !14331
  %call28 = call i32 @gimplify_expr(%union.tree_node** %25, %struct.gimple_seq_d** %26, %struct.gimple_seq_d** %27, i8 (%union.tree_node*)* @is_gimple_mem_rhs, i32 1), !dbg !14332
  store i32 %call28, i32* %one, align 4, !dbg !14333
  %28 = load i32, i32* %one, align 4, !dbg !14334
  %cmp29 = icmp eq i32 %28, -2, !dbg !14336
  br i1 %cmp29, label %if.then31, label %if.end32, !dbg !14337

if.then31:                                        ; preds = %if.end27
  %29 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !14338
  store %union.tree_node* null, %union.tree_node** %29, align 8, !dbg !14340
  br label %return, !dbg !14341

if.end32:                                         ; preds = %if.end27
  %30 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !14342
  %31 = load %union.tree_node*, %union.tree_node** %30, align 8, !dbg !14342
  %base33 = bitcast %union.tree_node* %31 to %struct.tree_base*, !dbg !14342
  %32 = bitcast %struct.tree_base* %base33 to i64*, !dbg !14342
  %bf.load34 = load i64, i64* %32, align 8, !dbg !14342
  %bf.clear35 = and i64 %bf.load34, 65535, !dbg !14342
  %bf.cast36 = trunc i64 %bf.clear35 to i32, !dbg !14342
  %idxprom = sext i32 %bf.cast36 to i64, !dbg !14342
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !14342
  %33 = load i32, i32* %arrayidx, align 4, !dbg !14342
  %cmp37 = icmp eq i32 %33, 3, !dbg !14342
  br i1 %cmp37, label %if.then39, label %if.end40, !dbg !14344

if.then39:                                        ; preds = %if.end32
  br label %return, !dbg !14345

if.end40:                                         ; preds = %if.end32
  %34 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !14346
  %35 = load %union.tree_node*, %union.tree_node** %34, align 8, !dbg !14346
  %common41 = bitcast %union.tree_node* %35 to %struct.tree_common*, !dbg !14346
  %type42 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common41, i32 0, i32 2, !dbg !14346
  %36 = load %union.tree_node*, %union.tree_node** %type42, align 8, !dbg !14346
  %type43 = bitcast %union.tree_node* %36 to %struct.tree_type*, !dbg !14346
  %size = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type43, i32 0, i32 2, !dbg !14346
  %37 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !14346
  %base44 = bitcast %union.tree_node* %37 to %struct.tree_base*, !dbg !14346
  %38 = bitcast %struct.tree_base* %base44 to i64*, !dbg !14346
  %bf.load45 = load i64, i64* %38, align 8, !dbg !14346
  %bf.clear46 = and i64 %bf.load45, 65535, !dbg !14346
  %bf.cast47 = trunc i64 %bf.clear46 to i32, !dbg !14346
  %cmp48 = icmp ne i32 %bf.cast47, 23, !dbg !14348
  br i1 %cmp48, label %if.then50, label %if.end51, !dbg !14349

if.then50:                                        ; preds = %if.end40
  br label %return, !dbg !14350

if.end51:                                         ; preds = %if.end40
  %39 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !14351
  %40 = load %struct.gimplify_init_ctor_preeval_data*, %struct.gimplify_init_ctor_preeval_data** %data.addr, align 8, !dbg !14351
  %41 = bitcast %struct.gimplify_init_ctor_preeval_data* %40 to i8*, !dbg !14351
  %call52 = call %union.tree_node* @walk_tree_1(%union.tree_node** %39, %union.tree_node* (%union.tree_node**, i32*, i8*)* @gimplify_init_ctor_preeval_1, i8* %41, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !14351
  %tobool53 = icmp ne %union.tree_node* %call52, null, !dbg !14351
  br i1 %tobool53, label %if.end55, label %if.then54, !dbg !14353

if.then54:                                        ; preds = %if.end51
  br label %return, !dbg !14354

if.end55:                                         ; preds = %if.end51
  %42 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !14355
  %43 = load %union.tree_node*, %union.tree_node** %42, align 8, !dbg !14356
  %44 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !14357
  %call56 = call %union.tree_node* @get_formal_tmp_var(%union.tree_node* %43, %struct.gimple_seq_d** %44), !dbg !14358
  %45 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !14359
  store %union.tree_node* %call56, %union.tree_node** %45, align 8, !dbg !14360
  br label %return, !dbg !14361

return:                                           ; preds = %if.end55, %if.then54, %if.then50, %if.then39, %if.then31, %for.end, %if.then13, %cond.end
  ret void, !dbg !14361
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimplify_init_ctor_eval(%union.tree_node* %object, %struct.VEC_constructor_elt_gc* %elts, %struct.gimple_seq_d** %pre_p, i8 zeroext %cleared) #0 !dbg !14362 {
entry:
  %object.addr = alloca %union.tree_node*, align 8
  %elts.addr = alloca %struct.VEC_constructor_elt_gc*, align 8
  %pre_p.addr = alloca %struct.gimple_seq_d**, align 8
  %cleared.addr = alloca i8, align 1
  %array_elt_type = alloca %union.tree_node*, align 8
  %ix = alloca i64, align 8
  %purpose = alloca %union.tree_node*, align 8
  %value = alloca %union.tree_node*, align 8
  %cref = alloca %union.tree_node*, align 8
  %lower = alloca %union.tree_node*, align 8
  %upper = alloca %union.tree_node*, align 8
  %init = alloca %union.tree_node*, align 8
  store %union.tree_node* %object, %union.tree_node** %object.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %object.addr, metadata !14365, metadata !DIExpression()), !dbg !14366
  store %struct.VEC_constructor_elt_gc* %elts, %struct.VEC_constructor_elt_gc** %elts.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_constructor_elt_gc** %elts.addr, metadata !14367, metadata !DIExpression()), !dbg !14368
  store %struct.gimple_seq_d** %pre_p, %struct.gimple_seq_d*** %pre_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %pre_p.addr, metadata !14369, metadata !DIExpression()), !dbg !14370
  store i8 %cleared, i8* %cleared.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %cleared.addr, metadata !14371, metadata !DIExpression()), !dbg !14372
  call void @llvm.dbg.declare(metadata %union.tree_node** %array_elt_type, metadata !14373, metadata !DIExpression()), !dbg !14374
  store %union.tree_node* null, %union.tree_node** %array_elt_type, align 8, !dbg !14374
  call void @llvm.dbg.declare(metadata i64* %ix, metadata !14375, metadata !DIExpression()), !dbg !14376
  call void @llvm.dbg.declare(metadata %union.tree_node** %purpose, metadata !14377, metadata !DIExpression()), !dbg !14378
  call void @llvm.dbg.declare(metadata %union.tree_node** %value, metadata !14379, metadata !DIExpression()), !dbg !14380
  %0 = load %union.tree_node*, %union.tree_node** %object.addr, align 8, !dbg !14381
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !14381
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !14381
  %1 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !14381
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !14381
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !14381
  %bf.load = load i64, i64* %2, align 8, !dbg !14381
  %bf.clear = and i64 %bf.load, 65535, !dbg !14381
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !14381
  %cmp = icmp eq i32 %bf.cast, 15, !dbg !14383
  br i1 %cmp, label %if.then, label %if.end, !dbg !14384

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %object.addr, align 8, !dbg !14385
  %common1 = bitcast %union.tree_node* %3 to %struct.tree_common*, !dbg !14385
  %type2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1, i32 0, i32 2, !dbg !14385
  %4 = load %union.tree_node*, %union.tree_node** %type2, align 8, !dbg !14385
  %common3 = bitcast %union.tree_node* %4 to %struct.tree_common*, !dbg !14385
  %type4 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3, i32 0, i32 2, !dbg !14385
  %5 = load %union.tree_node*, %union.tree_node** %type4, align 8, !dbg !14385
  %type5 = bitcast %union.tree_node* %5 to %struct.tree_type*, !dbg !14385
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type5, i32 0, i32 16, !dbg !14385
  %6 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !14385
  store %union.tree_node* %6, %union.tree_node** %array_elt_type, align 8, !dbg !14386
  br label %if.end, !dbg !14387

if.end:                                           ; preds = %if.then, %entry
  store i64 0, i64* %ix, align 8, !dbg !14388
  br label %for.cond, !dbg !14388

for.cond:                                         ; preds = %for.inc, %if.end
  %7 = load i64, i64* %ix, align 8, !dbg !14390
  %8 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts.addr, align 8, !dbg !14390
  %tobool = icmp ne %struct.VEC_constructor_elt_gc* %8, null, !dbg !14390
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !14390

cond.true:                                        ; preds = %for.cond
  %9 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts.addr, align 8, !dbg !14390
  %base6 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %9, i32 0, i32 0, !dbg !14390
  br label %cond.end, !dbg !14390

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !14390

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_constructor_elt_base* [ %base6, %cond.true ], [ null, %cond.false ], !dbg !14390
  %call = call i32 @VEC_constructor_elt_base_length(%struct.VEC_constructor_elt_base* %cond), !dbg !14390
  %conv = zext i32 %call to i64, !dbg !14390
  %cmp7 = icmp uge i64 %7, %conv, !dbg !14390
  br i1 %cmp7, label %cond.true9, label %cond.false10, !dbg !14390

cond.true9:                                       ; preds = %cond.end
  br label %cond.end28, !dbg !14390

cond.false10:                                     ; preds = %cond.end
  %10 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts.addr, align 8, !dbg !14390
  %tobool11 = icmp ne %struct.VEC_constructor_elt_gc* %10, null, !dbg !14390
  br i1 %tobool11, label %cond.true12, label %cond.false14, !dbg !14390

cond.true12:                                      ; preds = %cond.false10
  %11 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts.addr, align 8, !dbg !14390
  %base13 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %11, i32 0, i32 0, !dbg !14390
  br label %cond.end15, !dbg !14390

cond.false14:                                     ; preds = %cond.false10
  br label %cond.end15, !dbg !14390

cond.end15:                                       ; preds = %cond.false14, %cond.true12
  %cond16 = phi %struct.VEC_constructor_elt_base* [ %base13, %cond.true12 ], [ null, %cond.false14 ], !dbg !14390
  %12 = load i64, i64* %ix, align 8, !dbg !14390
  %conv17 = trunc i64 %12 to i32, !dbg !14390
  %call18 = call %struct.constructor_elt_d* @VEC_constructor_elt_base_index(%struct.VEC_constructor_elt_base* %cond16, i32 %conv17), !dbg !14390
  %value19 = getelementptr inbounds %struct.constructor_elt_d, %struct.constructor_elt_d* %call18, i32 0, i32 1, !dbg !14390
  %13 = load %union.tree_node*, %union.tree_node** %value19, align 8, !dbg !14390
  store %union.tree_node* %13, %union.tree_node** %value, align 8, !dbg !14390
  %14 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts.addr, align 8, !dbg !14390
  %tobool20 = icmp ne %struct.VEC_constructor_elt_gc* %14, null, !dbg !14390
  br i1 %tobool20, label %cond.true21, label %cond.false23, !dbg !14390

cond.true21:                                      ; preds = %cond.end15
  %15 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts.addr, align 8, !dbg !14390
  %base22 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %15, i32 0, i32 0, !dbg !14390
  br label %cond.end24, !dbg !14390

cond.false23:                                     ; preds = %cond.end15
  br label %cond.end24, !dbg !14390

cond.end24:                                       ; preds = %cond.false23, %cond.true21
  %cond25 = phi %struct.VEC_constructor_elt_base* [ %base22, %cond.true21 ], [ null, %cond.false23 ], !dbg !14390
  %16 = load i64, i64* %ix, align 8, !dbg !14390
  %conv26 = trunc i64 %16 to i32, !dbg !14390
  %call27 = call %struct.constructor_elt_d* @VEC_constructor_elt_base_index(%struct.VEC_constructor_elt_base* %cond25, i32 %conv26), !dbg !14390
  %index = getelementptr inbounds %struct.constructor_elt_d, %struct.constructor_elt_d* %call27, i32 0, i32 0, !dbg !14390
  %17 = load %union.tree_node*, %union.tree_node** %index, align 8, !dbg !14390
  store %union.tree_node* %17, %union.tree_node** %purpose, align 8, !dbg !14390
  br label %cond.end28, !dbg !14390

cond.end28:                                       ; preds = %cond.end24, %cond.true9
  %cond29 = phi i32 [ 0, %cond.true9 ], [ 1, %cond.end24 ], !dbg !14390
  %tobool30 = icmp ne i32 %cond29, 0, !dbg !14388
  br i1 %tobool30, label %for.body, label %for.end, !dbg !14388

for.body:                                         ; preds = %cond.end28
  call void @llvm.dbg.declare(metadata %union.tree_node** %cref, metadata !14392, metadata !DIExpression()), !dbg !14394
  %18 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !14395
  %cmp31 = icmp eq %union.tree_node* %18, null, !dbg !14397
  br i1 %cmp31, label %if.then33, label %if.end34, !dbg !14398

if.then33:                                        ; preds = %for.body
  br label %for.inc, !dbg !14399

if.end34:                                         ; preds = %for.body
  %19 = load i8, i8* %cleared.addr, align 1, !dbg !14400
  %conv35 = zext i8 %19 to i32, !dbg !14400
  %tobool36 = icmp ne i32 %conv35, 0, !dbg !14400
  br i1 %tobool36, label %land.lhs.true, label %if.end41, !dbg !14402

land.lhs.true:                                    ; preds = %if.end34
  %20 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !14403
  %call37 = call zeroext i8 @initializer_zerop(%union.tree_node* %20), !dbg !14404
  %conv38 = zext i8 %call37 to i32, !dbg !14404
  %tobool39 = icmp ne i32 %conv38, 0, !dbg !14404
  br i1 %tobool39, label %if.then40, label %if.end41, !dbg !14405

if.then40:                                        ; preds = %land.lhs.true
  br label %for.inc, !dbg !14406

if.end41:                                         ; preds = %land.lhs.true, %if.end34
  %21 = load %union.tree_node*, %union.tree_node** %purpose, align 8, !dbg !14407
  %tobool42 = icmp ne %union.tree_node* %21, null, !dbg !14407
  br i1 %tobool42, label %cond.false44, label %cond.true43, !dbg !14407

cond.true43:                                      ; preds = %if.end41
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 3447, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !14407
  br label %cond.end45, !dbg !14407

cond.false44:                                     ; preds = %if.end41
  br label %cond.end45, !dbg !14407

cond.end45:                                       ; preds = %cond.false44, %cond.true43
  %cond46 = phi i32 [ 0, %cond.true43 ], [ 0, %cond.false44 ], !dbg !14407
  %22 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !14408
  %base47 = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !14408
  %23 = bitcast %struct.tree_base* %base47 to i64*, !dbg !14408
  %bf.load48 = load i64, i64* %23, align 8, !dbg !14408
  %bf.lshr = lshr i64 %bf.load48, 16, !dbg !14408
  %bf.clear49 = and i64 %bf.lshr, 1, !dbg !14408
  %bf.cast50 = trunc i64 %bf.clear49 to i32, !dbg !14408
  %tobool51 = icmp ne i32 %bf.cast50, 0, !dbg !14408
  br i1 %tobool51, label %if.end57, label %land.lhs.true52, !dbg !14410

land.lhs.true52:                                  ; preds = %cond.end45
  %24 = load %union.tree_node*, %union.tree_node** %purpose, align 8, !dbg !14411
  %call53 = call zeroext i8 @zero_sized_field_decl(%union.tree_node* %24), !dbg !14412
  %conv54 = zext i8 %call53 to i32, !dbg !14412
  %tobool55 = icmp ne i32 %conv54, 0, !dbg !14412
  br i1 %tobool55, label %if.then56, label %if.end57, !dbg !14413

if.then56:                                        ; preds = %land.lhs.true52
  br label %for.inc, !dbg !14414

if.end57:                                         ; preds = %land.lhs.true52, %cond.end45
  %25 = load %union.tree_node*, %union.tree_node** %purpose, align 8, !dbg !14415
  %base58 = bitcast %union.tree_node* %25 to %struct.tree_base*, !dbg !14415
  %26 = bitcast %struct.tree_base* %base58 to i64*, !dbg !14415
  %bf.load59 = load i64, i64* %26, align 8, !dbg !14415
  %bf.clear60 = and i64 %bf.load59, 65535, !dbg !14415
  %bf.cast61 = trunc i64 %bf.clear60 to i32, !dbg !14415
  %cmp62 = icmp eq i32 %bf.cast61, 111, !dbg !14417
  br i1 %cmp62, label %if.then64, label %if.end72, !dbg !14418

if.then64:                                        ; preds = %if.end57
  call void @llvm.dbg.declare(metadata %union.tree_node** %lower, metadata !14419, metadata !DIExpression()), !dbg !14421
  %27 = load %union.tree_node*, %union.tree_node** %purpose, align 8, !dbg !14422
  %exp = bitcast %union.tree_node* %27 to %struct.tree_exp*, !dbg !14422
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !14422
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !14422
  %28 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !14422
  store %union.tree_node* %28, %union.tree_node** %lower, align 8, !dbg !14421
  call void @llvm.dbg.declare(metadata %union.tree_node** %upper, metadata !14423, metadata !DIExpression()), !dbg !14424
  %29 = load %union.tree_node*, %union.tree_node** %purpose, align 8, !dbg !14425
  %exp65 = bitcast %union.tree_node* %29 to %struct.tree_exp*, !dbg !14425
  %operands66 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp65, i32 0, i32 3, !dbg !14425
  %arrayidx67 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands66, i64 0, i64 1, !dbg !14425
  %30 = load %union.tree_node*, %union.tree_node** %arrayidx67, align 8, !dbg !14425
  store %union.tree_node* %30, %union.tree_node** %upper, align 8, !dbg !14424
  %31 = load %union.tree_node*, %union.tree_node** %lower, align 8, !dbg !14426
  %32 = load %union.tree_node*, %union.tree_node** %upper, align 8, !dbg !14428
  %call68 = call i32 @simple_cst_equal(%union.tree_node* %31, %union.tree_node* %32), !dbg !14429
  %tobool69 = icmp ne i32 %call68, 0, !dbg !14429
  br i1 %tobool69, label %if.then70, label %if.else, !dbg !14430

if.then70:                                        ; preds = %if.then64
  %33 = load %union.tree_node*, %union.tree_node** %upper, align 8, !dbg !14431
  store %union.tree_node* %33, %union.tree_node** %purpose, align 8, !dbg !14432
  br label %if.end71, !dbg !14433

if.else:                                          ; preds = %if.then64
  %34 = load %union.tree_node*, %union.tree_node** %object.addr, align 8, !dbg !14434
  %35 = load %union.tree_node*, %union.tree_node** %lower, align 8, !dbg !14436
  %36 = load %union.tree_node*, %union.tree_node** %upper, align 8, !dbg !14437
  %37 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !14438
  %38 = load %union.tree_node*, %union.tree_node** %array_elt_type, align 8, !dbg !14439
  %39 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !14440
  %40 = load i8, i8* %cleared.addr, align 1, !dbg !14441
  call void @gimplify_init_ctor_eval_range(%union.tree_node* %34, %union.tree_node* %35, %union.tree_node* %36, %union.tree_node* %37, %union.tree_node* %38, %struct.gimple_seq_d** %39, i8 zeroext %40), !dbg !14442
  br label %for.inc, !dbg !14443

if.end71:                                         ; preds = %if.then70
  br label %if.end72, !dbg !14444

if.end72:                                         ; preds = %if.end71, %if.end57
  %41 = load %union.tree_node*, %union.tree_node** %array_elt_type, align 8, !dbg !14445
  %tobool73 = icmp ne %union.tree_node* %41, null, !dbg !14445
  br i1 %tobool73, label %if.then74, label %if.else90, !dbg !14447

if.then74:                                        ; preds = %if.end72
  %42 = load %union.tree_node*, %union.tree_node** %object.addr, align 8, !dbg !14448
  %common75 = bitcast %union.tree_node* %42 to %struct.tree_common*, !dbg !14448
  %type76 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common75, i32 0, i32 2, !dbg !14448
  %43 = load %union.tree_node*, %union.tree_node** %type76, align 8, !dbg !14448
  %type77 = bitcast %union.tree_node* %43 to %struct.tree_type*, !dbg !14448
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type77, i32 0, i32 1, !dbg !14448
  %44 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !14448
  %tobool78 = icmp ne %union.tree_node* %44, null, !dbg !14448
  br i1 %tobool78, label %if.then79, label %if.end87, !dbg !14451

if.then79:                                        ; preds = %if.then74
  %45 = load %union.tree_node*, %union.tree_node** %object.addr, align 8, !dbg !14452
  %common80 = bitcast %union.tree_node* %45 to %struct.tree_common*, !dbg !14452
  %type81 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common80, i32 0, i32 2, !dbg !14452
  %46 = load %union.tree_node*, %union.tree_node** %type81, align 8, !dbg !14452
  %type82 = bitcast %union.tree_node* %46 to %struct.tree_type*, !dbg !14452
  %values83 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type82, i32 0, i32 1, !dbg !14452
  %47 = load %union.tree_node*, %union.tree_node** %values83, align 8, !dbg !14452
  %common84 = bitcast %union.tree_node* %47 to %struct.tree_common*, !dbg !14452
  %type85 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common84, i32 0, i32 2, !dbg !14452
  %48 = load %union.tree_node*, %union.tree_node** %type85, align 8, !dbg !14452
  %49 = load %union.tree_node*, %union.tree_node** %purpose, align 8, !dbg !14452
  %call86 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %48, %union.tree_node* %49), !dbg !14452
  store %union.tree_node* %call86, %union.tree_node** %purpose, align 8, !dbg !14453
  br label %if.end87, !dbg !14454

if.end87:                                         ; preds = %if.then79, %if.then74
  %50 = load %union.tree_node*, %union.tree_node** %array_elt_type, align 8, !dbg !14455
  %51 = load %union.tree_node*, %union.tree_node** %object.addr, align 8, !dbg !14455
  %call88 = call %union.tree_node* @unshare_expr(%union.tree_node* %51), !dbg !14455
  %52 = load %union.tree_node*, %union.tree_node** %purpose, align 8, !dbg !14455
  %call89 = call %union.tree_node* @build4_stat(i32 45, %union.tree_node* %50, %union.tree_node* %call88, %union.tree_node* %52, %union.tree_node* null, %union.tree_node* null), !dbg !14455
  store %union.tree_node* %call89, %union.tree_node** %cref, align 8, !dbg !14456
  br label %if.end105, !dbg !14457

if.else90:                                        ; preds = %if.end72
  %53 = load %union.tree_node*, %union.tree_node** %purpose, align 8, !dbg !14458
  %base91 = bitcast %union.tree_node* %53 to %struct.tree_base*, !dbg !14458
  %54 = bitcast %struct.tree_base* %base91 to i64*, !dbg !14458
  %bf.load92 = load i64, i64* %54, align 8, !dbg !14458
  %bf.clear93 = and i64 %bf.load92, 65535, !dbg !14458
  %bf.cast94 = trunc i64 %bf.clear93 to i32, !dbg !14458
  %cmp95 = icmp eq i32 %bf.cast94, 31, !dbg !14458
  br i1 %cmp95, label %cond.false98, label %cond.true97, !dbg !14458

cond.true97:                                      ; preds = %if.else90
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 3487, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !14458
  br label %cond.end99, !dbg !14458

cond.false98:                                     ; preds = %if.else90
  br label %cond.end99, !dbg !14458

cond.end99:                                       ; preds = %cond.false98, %cond.true97
  %cond100 = phi i32 [ 0, %cond.true97 ], [ 0, %cond.false98 ], !dbg !14458
  %55 = load %union.tree_node*, %union.tree_node** %purpose, align 8, !dbg !14460
  %common101 = bitcast %union.tree_node* %55 to %struct.tree_common*, !dbg !14460
  %type102 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common101, i32 0, i32 2, !dbg !14460
  %56 = load %union.tree_node*, %union.tree_node** %type102, align 8, !dbg !14460
  %57 = load %union.tree_node*, %union.tree_node** %object.addr, align 8, !dbg !14460
  %call103 = call %union.tree_node* @unshare_expr(%union.tree_node* %57), !dbg !14460
  %58 = load %union.tree_node*, %union.tree_node** %purpose, align 8, !dbg !14460
  %call104 = call %union.tree_node* @build3_stat(i32 41, %union.tree_node* %56, %union.tree_node* %call103, %union.tree_node* %58, %union.tree_node* null), !dbg !14460
  store %union.tree_node* %call104, %union.tree_node** %cref, align 8, !dbg !14461
  br label %if.end105

if.end105:                                        ; preds = %cond.end99, %if.end87
  %59 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !14462
  %base106 = bitcast %union.tree_node* %59 to %struct.tree_base*, !dbg !14462
  %60 = bitcast %struct.tree_base* %base106 to i64*, !dbg !14462
  %bf.load107 = load i64, i64* %60, align 8, !dbg !14462
  %bf.clear108 = and i64 %bf.load107, 65535, !dbg !14462
  %bf.cast109 = trunc i64 %bf.clear108 to i32, !dbg !14462
  %cmp110 = icmp eq i32 %bf.cast109, 51, !dbg !14464
  br i1 %cmp110, label %land.lhs.true112, label %if.else123, !dbg !14465

land.lhs.true112:                                 ; preds = %if.end105
  %61 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !14466
  %common113 = bitcast %union.tree_node* %61 to %struct.tree_common*, !dbg !14466
  %type114 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common113, i32 0, i32 2, !dbg !14466
  %62 = load %union.tree_node*, %union.tree_node** %type114, align 8, !dbg !14466
  %base115 = bitcast %union.tree_node* %62 to %struct.tree_base*, !dbg !14466
  %63 = bitcast %struct.tree_base* %base115 to i64*, !dbg !14466
  %bf.load116 = load i64, i64* %63, align 8, !dbg !14466
  %bf.clear117 = and i64 %bf.load116, 65535, !dbg !14466
  %bf.cast118 = trunc i64 %bf.clear117 to i32, !dbg !14466
  %cmp119 = icmp ne i32 %bf.cast118, 14, !dbg !14467
  br i1 %cmp119, label %if.then121, label %if.else123, !dbg !14468

if.then121:                                       ; preds = %land.lhs.true112
  %64 = load %union.tree_node*, %union.tree_node** %cref, align 8, !dbg !14469
  %65 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !14470
  %constructor = bitcast %union.tree_node* %65 to %struct.tree_constructor*, !dbg !14470
  %elts122 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor, i32 0, i32 1, !dbg !14470
  %66 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts122, align 8, !dbg !14470
  %67 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !14471
  %68 = load i8, i8* %cleared.addr, align 1, !dbg !14472
  call void @gimplify_init_ctor_eval(%union.tree_node* %64, %struct.VEC_constructor_elt_gc* %66, %struct.gimple_seq_d** %67, i8 zeroext %68), !dbg !14473
  br label %if.end127, !dbg !14473

if.else123:                                       ; preds = %land.lhs.true112, %if.end105
  call void @llvm.dbg.declare(metadata %union.tree_node** %init, metadata !14474, metadata !DIExpression()), !dbg !14476
  %69 = load %union.tree_node*, %union.tree_node** %cref, align 8, !dbg !14477
  %common124 = bitcast %union.tree_node* %69 to %struct.tree_common*, !dbg !14477
  %type125 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common124, i32 0, i32 2, !dbg !14477
  %70 = load %union.tree_node*, %union.tree_node** %type125, align 8, !dbg !14477
  %71 = load %union.tree_node*, %union.tree_node** %cref, align 8, !dbg !14477
  %72 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !14477
  %call126 = call %union.tree_node* @build2_stat(i32 54, %union.tree_node* %70, %union.tree_node* %71, %union.tree_node* %72), !dbg !14477
  store %union.tree_node* %call126, %union.tree_node** %init, align 8, !dbg !14476
  %73 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !14478
  %74 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !14479
  call void @gimplify_and_add(%union.tree_node* %73, %struct.gimple_seq_d** %74), !dbg !14480
  %75 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !14481
  %76 = bitcast %union.tree_node* %75 to i8*, !dbg !14481
  call void @ggc_free(i8* %76), !dbg !14482
  br label %if.end127

if.end127:                                        ; preds = %if.else123, %if.then121
  br label %for.inc, !dbg !14483

for.inc:                                          ; preds = %if.end127, %if.else, %if.then56, %if.then40, %if.then33
  %77 = load i64, i64* %ix, align 8, !dbg !14390
  %inc = add i64 %77, 1, !dbg !14390
  store i64 %inc, i64* %ix, align 8, !dbg !14390
  br label %for.cond, !dbg !14390, !llvm.loop !14484

for.end:                                          ; preds = %cond.end28
  ret void, !dbg !14486
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.constructor_elt_d* @VEC_constructor_elt_base_index(%struct.VEC_constructor_elt_base* %vec_, i32 %ix_) #0 !dbg !14487 {
entry:
  %vec_.addr = alloca %struct.VEC_constructor_elt_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_constructor_elt_base* %vec_, %struct.VEC_constructor_elt_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_constructor_elt_base** %vec_.addr, metadata !14490, metadata !DIExpression()), !dbg !14491
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !14492, metadata !DIExpression()), !dbg !14491
  %0 = load %struct.VEC_constructor_elt_base*, %struct.VEC_constructor_elt_base** %vec_.addr, align 8, !dbg !14491
  %tobool = icmp ne %struct.VEC_constructor_elt_base* %0, null, !dbg !14491
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !14491

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !14491
  %2 = load %struct.VEC_constructor_elt_base*, %struct.VEC_constructor_elt_base** %vec_.addr, align 8, !dbg !14491
  %num = getelementptr inbounds %struct.VEC_constructor_elt_base, %struct.VEC_constructor_elt_base* %2, i32 0, i32 0, !dbg !14491
  %3 = load i32, i32* %num, align 8, !dbg !14491
  %cmp = icmp ult i32 %1, %3, !dbg !14491
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !14493
  %land.ext = zext i1 %4 to i32, !dbg !14491
  %5 = load %struct.VEC_constructor_elt_base*, %struct.VEC_constructor_elt_base** %vec_.addr, align 8, !dbg !14491
  %vec = getelementptr inbounds %struct.VEC_constructor_elt_base, %struct.VEC_constructor_elt_base* %5, i32 0, i32 2, !dbg !14491
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !14491
  %idxprom = zext i32 %6 to i64, !dbg !14491
  %arrayidx = getelementptr inbounds [1 x %struct.constructor_elt_d], [1 x %struct.constructor_elt_d]* %vec, i64 0, i64 %idxprom, !dbg !14491
  ret %struct.constructor_elt_d* %arrayidx, !dbg !14491
}

declare dso_local %union.tree_node* @build_complex(%union.tree_node*, %union.tree_node*, %union.tree_node*) #3

declare dso_local %union.tree_node* @build_vector_from_ctor(%union.tree_node*, %struct.VEC_constructor_elt_gc*) #3

declare dso_local %union.tree_node* @initializer_constant_valid_p(%union.tree_node*, %union.tree_node*) #3

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_constructor_elt_gc* @VEC_constructor_elt_gc_copy(%struct.VEC_constructor_elt_base* %vec_) #0 !dbg !14494 {
entry:
  %vec_.addr = alloca %struct.VEC_constructor_elt_base*, align 8
  %len_ = alloca i64, align 8
  %new_vec_ = alloca %struct.VEC_constructor_elt_gc*, align 8
  store %struct.VEC_constructor_elt_base* %vec_, %struct.VEC_constructor_elt_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_constructor_elt_base** %vec_.addr, metadata !14497, metadata !DIExpression()), !dbg !14498
  call void @llvm.dbg.declare(metadata i64* %len_, metadata !14499, metadata !DIExpression()), !dbg !14498
  %0 = load %struct.VEC_constructor_elt_base*, %struct.VEC_constructor_elt_base** %vec_.addr, align 8, !dbg !14498
  %tobool = icmp ne %struct.VEC_constructor_elt_base* %0, null, !dbg !14498
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !14498

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_constructor_elt_base*, %struct.VEC_constructor_elt_base** %vec_.addr, align 8, !dbg !14498
  %num = getelementptr inbounds %struct.VEC_constructor_elt_base, %struct.VEC_constructor_elt_base* %1, i32 0, i32 0, !dbg !14498
  %2 = load i32, i32* %num, align 8, !dbg !14498
  br label %cond.end, !dbg !14498

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !14498

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !14498
  %conv = zext i32 %cond to i64, !dbg !14498
  store i64 %conv, i64* %len_, align 8, !dbg !14498
  call void @llvm.dbg.declare(metadata %struct.VEC_constructor_elt_gc** %new_vec_, metadata !14500, metadata !DIExpression()), !dbg !14498
  store %struct.VEC_constructor_elt_gc* null, %struct.VEC_constructor_elt_gc** %new_vec_, align 8, !dbg !14498
  %3 = load i64, i64* %len_, align 8, !dbg !14501
  %tobool1 = icmp ne i64 %3, 0, !dbg !14501
  br i1 %tobool1, label %if.then, label %if.end, !dbg !14498

if.then:                                          ; preds = %cond.end
  %4 = load i64, i64* %len_, align 8, !dbg !14503
  %conv2 = trunc i64 %4 to i32, !dbg !14503
  %call = call i8* @vec_gc_o_reserve_exact(i8* null, i32 %conv2, i64 8, i64 16), !dbg !14503
  %5 = bitcast i8* %call to %struct.VEC_constructor_elt_gc*, !dbg !14503
  store %struct.VEC_constructor_elt_gc* %5, %struct.VEC_constructor_elt_gc** %new_vec_, align 8, !dbg !14503
  %6 = load i64, i64* %len_, align 8, !dbg !14503
  %conv3 = trunc i64 %6 to i32, !dbg !14503
  %7 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %new_vec_, align 8, !dbg !14503
  %base = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %7, i32 0, i32 0, !dbg !14503
  %num4 = getelementptr inbounds %struct.VEC_constructor_elt_base, %struct.VEC_constructor_elt_base* %base, i32 0, i32 0, !dbg !14503
  store i32 %conv3, i32* %num4, align 8, !dbg !14503
  %8 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %new_vec_, align 8, !dbg !14503
  %base5 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %8, i32 0, i32 0, !dbg !14503
  %vec = getelementptr inbounds %struct.VEC_constructor_elt_base, %struct.VEC_constructor_elt_base* %base5, i32 0, i32 2, !dbg !14503
  %arraydecay = getelementptr inbounds [1 x %struct.constructor_elt_d], [1 x %struct.constructor_elt_d]* %vec, i64 0, i64 0, !dbg !14503
  %9 = bitcast %struct.constructor_elt_d* %arraydecay to i8*, !dbg !14503
  %10 = load %struct.VEC_constructor_elt_base*, %struct.VEC_constructor_elt_base** %vec_.addr, align 8, !dbg !14503
  %vec6 = getelementptr inbounds %struct.VEC_constructor_elt_base, %struct.VEC_constructor_elt_base* %10, i32 0, i32 2, !dbg !14503
  %arraydecay7 = getelementptr inbounds [1 x %struct.constructor_elt_d], [1 x %struct.constructor_elt_d]* %vec6, i64 0, i64 0, !dbg !14503
  %11 = bitcast %struct.constructor_elt_d* %arraydecay7 to i8*, !dbg !14503
  %12 = load i64, i64* %len_, align 8, !dbg !14503
  %mul = mul i64 16, %12, !dbg !14503
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %11, i64 %mul, i1 false), !dbg !14503
  br label %if.end, !dbg !14503

if.end:                                           ; preds = %if.then, %cond.end
  %13 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %new_vec_, align 8, !dbg !14498
  ret %struct.VEC_constructor_elt_gc* %13, !dbg !14498
}

declare dso_local i8* @vec_gc_o_reserve_exact(i8*, i32, i64, i64) #3

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimplify_init_ctor_preeval_1(%union.tree_node** %tp, i32* %walk_subtrees, i8* %xdata) #0 !dbg !14505 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %tp.addr = alloca %union.tree_node**, align 8
  %walk_subtrees.addr = alloca i32*, align 8
  %xdata.addr = alloca i8*, align 8
  %data = alloca %struct.gimplify_init_ctor_preeval_data*, align 8
  %t = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  %fntype = alloca %union.tree_node*, align 8
  store %union.tree_node** %tp, %union.tree_node*** %tp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %tp.addr, metadata !14506, metadata !DIExpression()), !dbg !14507
  store i32* %walk_subtrees, i32** %walk_subtrees.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %walk_subtrees.addr, metadata !14508, metadata !DIExpression()), !dbg !14509
  store i8* %xdata, i8** %xdata.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %xdata.addr, metadata !14510, metadata !DIExpression()), !dbg !14511
  call void @llvm.dbg.declare(metadata %struct.gimplify_init_ctor_preeval_data** %data, metadata !14512, metadata !DIExpression()), !dbg !14513
  %0 = load i8*, i8** %xdata.addr, align 8, !dbg !14514
  %1 = bitcast i8* %0 to %struct.gimplify_init_ctor_preeval_data*, !dbg !14515
  store %struct.gimplify_init_ctor_preeval_data* %1, %struct.gimplify_init_ctor_preeval_data** %data, align 8, !dbg !14513
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !14516, metadata !DIExpression()), !dbg !14517
  %2 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !14518
  %3 = load %union.tree_node*, %union.tree_node** %2, align 8, !dbg !14519
  store %union.tree_node* %3, %union.tree_node** %t, align 8, !dbg !14517
  %4 = load %struct.gimplify_init_ctor_preeval_data*, %struct.gimplify_init_ctor_preeval_data** %data, align 8, !dbg !14520
  %lhs_base_decl = getelementptr inbounds %struct.gimplify_init_ctor_preeval_data, %struct.gimplify_init_ctor_preeval_data* %4, i32 0, i32 0, !dbg !14522
  %5 = load %union.tree_node*, %union.tree_node** %lhs_base_decl, align 8, !dbg !14522
  %6 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !14523
  %cmp = icmp eq %union.tree_node* %5, %6, !dbg !14524
  br i1 %cmp, label %if.then, label %if.end, !dbg !14525

if.then:                                          ; preds = %entry
  %7 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !14526
  store %union.tree_node* %7, %union.tree_node** %retval, align 8, !dbg !14527
  br label %return, !dbg !14527

if.end:                                           ; preds = %entry
  %8 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !14528
  %base = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !14528
  %9 = bitcast %struct.tree_base* %base to i64*, !dbg !14528
  %bf.load = load i64, i64* %9, align 8, !dbg !14528
  %bf.clear = and i64 %bf.load, 65535, !dbg !14528
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !14528
  %cmp1 = icmp eq i32 %bf.cast, 47, !dbg !14530
  br i1 %cmp1, label %land.lhs.true, label %if.end13, !dbg !14531

land.lhs.true:                                    ; preds = %if.end
  %10 = load %struct.gimplify_init_ctor_preeval_data*, %struct.gimplify_init_ctor_preeval_data** %data, align 8, !dbg !14532
  %lhs_base_decl2 = getelementptr inbounds %struct.gimplify_init_ctor_preeval_data, %struct.gimplify_init_ctor_preeval_data* %10, i32 0, i32 0, !dbg !14533
  %11 = load %union.tree_node*, %union.tree_node** %lhs_base_decl2, align 8, !dbg !14533
  %tobool = icmp ne %union.tree_node* %11, null, !dbg !14532
  br i1 %tobool, label %lor.lhs.false, label %land.lhs.true9, !dbg !14534

lor.lhs.false:                                    ; preds = %land.lhs.true
  %12 = load %struct.gimplify_init_ctor_preeval_data*, %struct.gimplify_init_ctor_preeval_data** %data, align 8, !dbg !14535
  %lhs_base_decl3 = getelementptr inbounds %struct.gimplify_init_ctor_preeval_data, %struct.gimplify_init_ctor_preeval_data* %12, i32 0, i32 0, !dbg !14535
  %13 = load %union.tree_node*, %union.tree_node** %lhs_base_decl3, align 8, !dbg !14535
  %base4 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !14535
  %14 = bitcast %struct.tree_base* %base4 to i64*, !dbg !14535
  %bf.load5 = load i64, i64* %14, align 8, !dbg !14535
  %bf.lshr = lshr i64 %bf.load5, 18, !dbg !14535
  %bf.clear6 = and i64 %bf.lshr, 1, !dbg !14535
  %bf.cast7 = trunc i64 %bf.clear6 to i32, !dbg !14535
  %tobool8 = icmp ne i32 %bf.cast7, 0, !dbg !14535
  br i1 %tobool8, label %land.lhs.true9, label %if.end13, !dbg !14536

land.lhs.true9:                                   ; preds = %lor.lhs.false, %land.lhs.true
  %15 = load %struct.gimplify_init_ctor_preeval_data*, %struct.gimplify_init_ctor_preeval_data** %data, align 8, !dbg !14537
  %lhs_alias_set = getelementptr inbounds %struct.gimplify_init_ctor_preeval_data, %struct.gimplify_init_ctor_preeval_data* %15, i32 0, i32 1, !dbg !14538
  %16 = load i32, i32* %lhs_alias_set, align 8, !dbg !14538
  %17 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !14539
  %call = call i32 @get_alias_set(%union.tree_node* %17), !dbg !14540
  %call10 = call i32 @alias_sets_conflict_p(i32 %16, i32 %call), !dbg !14541
  %tobool11 = icmp ne i32 %call10, 0, !dbg !14541
  br i1 %tobool11, label %if.then12, label %if.end13, !dbg !14542

if.then12:                                        ; preds = %land.lhs.true9
  %18 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !14543
  store %union.tree_node* %18, %union.tree_node** %retval, align 8, !dbg !14544
  br label %return, !dbg !14544

if.end13:                                         ; preds = %land.lhs.true9, %lor.lhs.false, %if.end
  %19 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !14545
  %base14 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !14545
  %20 = bitcast %struct.tree_base* %base14 to i64*, !dbg !14545
  %bf.load15 = load i64, i64* %20, align 8, !dbg !14545
  %bf.clear16 = and i64 %bf.load15, 65535, !dbg !14545
  %bf.cast17 = trunc i64 %bf.clear16 to i32, !dbg !14545
  %cmp18 = icmp eq i32 %bf.cast17, 59, !dbg !14547
  br i1 %cmp18, label %if.then19, label %if.end61, !dbg !14548

if.then19:                                        ; preds = %if.end13
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !14549, metadata !DIExpression()), !dbg !14551
  call void @llvm.dbg.declare(metadata %union.tree_node** %fntype, metadata !14552, metadata !DIExpression()), !dbg !14553
  %21 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !14554
  %exp = bitcast %union.tree_node* %21 to %struct.tree_exp*, !dbg !14554
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !14554
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !14554
  %22 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !14554
  %common = bitcast %union.tree_node* %22 to %struct.tree_common*, !dbg !14554
  %type20 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !14554
  %23 = load %union.tree_node*, %union.tree_node** %type20, align 8, !dbg !14554
  %common21 = bitcast %union.tree_node* %23 to %struct.tree_common*, !dbg !14554
  %type22 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common21, i32 0, i32 2, !dbg !14554
  %24 = load %union.tree_node*, %union.tree_node** %type22, align 8, !dbg !14554
  store %union.tree_node* %24, %union.tree_node** %fntype, align 8, !dbg !14553
  %25 = load %union.tree_node*, %union.tree_node** %fntype, align 8, !dbg !14555
  %type23 = bitcast %union.tree_node* %25 to %struct.tree_type*, !dbg !14555
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type23, i32 0, i32 1, !dbg !14555
  %26 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !14555
  store %union.tree_node* %26, %union.tree_node** %type, align 8, !dbg !14557
  br label %for.cond, !dbg !14558

for.cond:                                         ; preds = %for.inc, %if.then19
  %27 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !14559
  %tobool24 = icmp ne %union.tree_node* %27, null, !dbg !14561
  br i1 %tobool24, label %for.body, label %for.end, !dbg !14561

for.body:                                         ; preds = %for.cond
  %28 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !14562
  %list = bitcast %union.tree_node* %28 to %struct.tree_list*, !dbg !14562
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !14562
  %29 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !14562
  %base25 = bitcast %union.tree_node* %29 to %struct.tree_base*, !dbg !14562
  %30 = bitcast %struct.tree_base* %base25 to i64*, !dbg !14562
  %bf.load26 = load i64, i64* %30, align 8, !dbg !14562
  %bf.clear27 = and i64 %bf.load26, 65535, !dbg !14562
  %bf.cast28 = trunc i64 %bf.clear27 to i32, !dbg !14562
  %cmp29 = icmp eq i32 %bf.cast28, 10, !dbg !14562
  br i1 %cmp29, label %land.lhs.true38, label %lor.lhs.false30, !dbg !14562

lor.lhs.false30:                                  ; preds = %for.body
  %31 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !14562
  %list31 = bitcast %union.tree_node* %31 to %struct.tree_list*, !dbg !14562
  %value32 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list31, i32 0, i32 2, !dbg !14562
  %32 = load %union.tree_node*, %union.tree_node** %value32, align 8, !dbg !14562
  %base33 = bitcast %union.tree_node* %32 to %struct.tree_base*, !dbg !14562
  %33 = bitcast %struct.tree_base* %base33 to i64*, !dbg !14562
  %bf.load34 = load i64, i64* %33, align 8, !dbg !14562
  %bf.clear35 = and i64 %bf.load34, 65535, !dbg !14562
  %bf.cast36 = trunc i64 %bf.clear35 to i32, !dbg !14562
  %cmp37 = icmp eq i32 %bf.cast36, 12, !dbg !14562
  br i1 %cmp37, label %land.lhs.true38, label %if.end59, !dbg !14564

land.lhs.true38:                                  ; preds = %lor.lhs.false30, %for.body
  %34 = load %struct.gimplify_init_ctor_preeval_data*, %struct.gimplify_init_ctor_preeval_data** %data, align 8, !dbg !14565
  %lhs_base_decl39 = getelementptr inbounds %struct.gimplify_init_ctor_preeval_data, %struct.gimplify_init_ctor_preeval_data* %34, i32 0, i32 0, !dbg !14566
  %35 = load %union.tree_node*, %union.tree_node** %lhs_base_decl39, align 8, !dbg !14566
  %tobool40 = icmp ne %union.tree_node* %35, null, !dbg !14565
  br i1 %tobool40, label %lor.lhs.false41, label %land.lhs.true49, !dbg !14567

lor.lhs.false41:                                  ; preds = %land.lhs.true38
  %36 = load %struct.gimplify_init_ctor_preeval_data*, %struct.gimplify_init_ctor_preeval_data** %data, align 8, !dbg !14568
  %lhs_base_decl42 = getelementptr inbounds %struct.gimplify_init_ctor_preeval_data, %struct.gimplify_init_ctor_preeval_data* %36, i32 0, i32 0, !dbg !14568
  %37 = load %union.tree_node*, %union.tree_node** %lhs_base_decl42, align 8, !dbg !14568
  %base43 = bitcast %union.tree_node* %37 to %struct.tree_base*, !dbg !14568
  %38 = bitcast %struct.tree_base* %base43 to i64*, !dbg !14568
  %bf.load44 = load i64, i64* %38, align 8, !dbg !14568
  %bf.lshr45 = lshr i64 %bf.load44, 18, !dbg !14568
  %bf.clear46 = and i64 %bf.lshr45, 1, !dbg !14568
  %bf.cast47 = trunc i64 %bf.clear46 to i32, !dbg !14568
  %tobool48 = icmp ne i32 %bf.cast47, 0, !dbg !14568
  br i1 %tobool48, label %land.lhs.true49, label %if.end59, !dbg !14569

land.lhs.true49:                                  ; preds = %lor.lhs.false41, %land.lhs.true38
  %39 = load %struct.gimplify_init_ctor_preeval_data*, %struct.gimplify_init_ctor_preeval_data** %data, align 8, !dbg !14570
  %lhs_alias_set50 = getelementptr inbounds %struct.gimplify_init_ctor_preeval_data, %struct.gimplify_init_ctor_preeval_data* %39, i32 0, i32 1, !dbg !14571
  %40 = load i32, i32* %lhs_alias_set50, align 8, !dbg !14571
  %41 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !14572
  %list51 = bitcast %union.tree_node* %41 to %struct.tree_list*, !dbg !14572
  %value52 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list51, i32 0, i32 2, !dbg !14572
  %42 = load %union.tree_node*, %union.tree_node** %value52, align 8, !dbg !14572
  %common53 = bitcast %union.tree_node* %42 to %struct.tree_common*, !dbg !14572
  %type54 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common53, i32 0, i32 2, !dbg !14572
  %43 = load %union.tree_node*, %union.tree_node** %type54, align 8, !dbg !14572
  %call55 = call i32 @get_alias_set(%union.tree_node* %43), !dbg !14573
  %call56 = call i32 @alias_sets_conflict_p(i32 %40, i32 %call55), !dbg !14574
  %tobool57 = icmp ne i32 %call56, 0, !dbg !14574
  br i1 %tobool57, label %if.then58, label %if.end59, !dbg !14575

if.then58:                                        ; preds = %land.lhs.true49
  %44 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !14576
  store %union.tree_node* %44, %union.tree_node** %retval, align 8, !dbg !14577
  br label %return, !dbg !14577

if.end59:                                         ; preds = %land.lhs.true49, %lor.lhs.false41, %lor.lhs.false30
  br label %for.inc, !dbg !14578

for.inc:                                          ; preds = %if.end59
  %45 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !14579
  %common60 = bitcast %union.tree_node* %45 to %struct.tree_common*, !dbg !14579
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common60, i32 0, i32 1, !dbg !14579
  %46 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !14579
  store %union.tree_node* %46, %union.tree_node** %type, align 8, !dbg !14580
  br label %for.cond, !dbg !14581, !llvm.loop !14582

for.end:                                          ; preds = %for.cond
  br label %if.end61, !dbg !14584

if.end61:                                         ; preds = %for.end, %if.end13
  %47 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !14585
  %base62 = bitcast %union.tree_node* %47 to %struct.tree_base*, !dbg !14585
  %48 = bitcast %struct.tree_base* %base62 to i64*, !dbg !14585
  %bf.load63 = load i64, i64* %48, align 8, !dbg !14585
  %bf.clear64 = and i64 %bf.load63, 65535, !dbg !14585
  %bf.cast65 = trunc i64 %bf.clear64 to i32, !dbg !14585
  %idxprom = sext i32 %bf.cast65 to i64, !dbg !14585
  %arrayidx66 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !14585
  %49 = load i32, i32* %arrayidx66, align 4, !dbg !14585
  %cmp67 = icmp eq i32 %49, 2, !dbg !14585
  br i1 %cmp67, label %if.then76, label %lor.lhs.false68, !dbg !14585

lor.lhs.false68:                                  ; preds = %if.end61
  %50 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !14585
  %base69 = bitcast %union.tree_node* %50 to %struct.tree_base*, !dbg !14585
  %51 = bitcast %struct.tree_base* %base69 to i64*, !dbg !14585
  %bf.load70 = load i64, i64* %51, align 8, !dbg !14585
  %bf.clear71 = and i64 %bf.load70, 65535, !dbg !14585
  %bf.cast72 = trunc i64 %bf.clear71 to i32, !dbg !14585
  %idxprom73 = sext i32 %bf.cast72 to i64, !dbg !14585
  %arrayidx74 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom73, !dbg !14585
  %52 = load i32, i32* %arrayidx74, align 4, !dbg !14585
  %cmp75 = icmp eq i32 %52, 3, !dbg !14585
  br i1 %cmp75, label %if.then76, label %if.end77, !dbg !14587

if.then76:                                        ; preds = %lor.lhs.false68, %if.end61
  %53 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !14588
  store i32 0, i32* %53, align 4, !dbg !14589
  br label %if.end77, !dbg !14590

if.end77:                                         ; preds = %if.then76, %lor.lhs.false68
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !14591
  br label %return, !dbg !14591

return:                                           ; preds = %if.end77, %if.then58, %if.then12, %if.then
  %54 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !14592
  ret %union.tree_node* %54, !dbg !14592
}

declare dso_local i32 @alias_sets_conflict_p(i32, i32) #3

declare dso_local zeroext i8 @initializer_zerop(%union.tree_node*) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @zero_sized_field_decl(%union.tree_node* %fdecl) #0 !dbg !14593 {
entry:
  %retval = alloca i8, align 1
  %fdecl.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %fdecl, %union.tree_node** %fdecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fdecl.addr, metadata !14594, metadata !DIExpression()), !dbg !14595
  %0 = load %union.tree_node*, %union.tree_node** %fdecl.addr, align 8, !dbg !14596
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !14596
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !14596
  %bf.load = load i64, i64* %1, align 8, !dbg !14596
  %bf.clear = and i64 %bf.load, 65535, !dbg !14596
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !14596
  %cmp = icmp eq i32 %bf.cast, 31, !dbg !14598
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !14599

land.lhs.true:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %fdecl.addr, align 8, !dbg !14600
  %decl_common = bitcast %union.tree_node* %2 to %struct.tree_decl_common*, !dbg !14600
  %size = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 1, !dbg !14600
  %3 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !14600
  %tobool = icmp ne %union.tree_node* %3, null, !dbg !14600
  br i1 %tobool, label %land.lhs.true1, label %if.end, !dbg !14601

land.lhs.true1:                                   ; preds = %land.lhs.true
  %4 = load %union.tree_node*, %union.tree_node** %fdecl.addr, align 8, !dbg !14602
  %decl_common2 = bitcast %union.tree_node* %4 to %struct.tree_decl_common*, !dbg !14602
  %size3 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common2, i32 0, i32 1, !dbg !14602
  %5 = load %union.tree_node*, %union.tree_node** %size3, align 8, !dbg !14602
  %call = call i32 @integer_zerop(%union.tree_node* %5), !dbg !14603
  %tobool4 = icmp ne i32 %call, 0, !dbg !14603
  br i1 %tobool4, label %if.then, label %if.end, !dbg !14604

if.then:                                          ; preds = %land.lhs.true1
  store i8 1, i8* %retval, align 1, !dbg !14605
  br label %return, !dbg !14605

if.end:                                           ; preds = %land.lhs.true1, %land.lhs.true, %entry
  store i8 0, i8* %retval, align 1, !dbg !14606
  br label %return, !dbg !14606

return:                                           ; preds = %if.end, %if.then
  %6 = load i8, i8* %retval, align 1, !dbg !14607
  ret i8 %6, !dbg !14607
}

declare dso_local i32 @simple_cst_equal(%union.tree_node*, %union.tree_node*) #3

; Function Attrs: noinline nounwind uwtable
define internal void @gimplify_init_ctor_eval_range(%union.tree_node* %object, %union.tree_node* %lower, %union.tree_node* %upper, %union.tree_node* %value, %union.tree_node* %array_elt_type, %struct.gimple_seq_d** %pre_p, i8 zeroext %cleared) #0 !dbg !14608 {
entry:
  %object.addr = alloca %union.tree_node*, align 8
  %lower.addr = alloca %union.tree_node*, align 8
  %upper.addr = alloca %union.tree_node*, align 8
  %value.addr = alloca %union.tree_node*, align 8
  %array_elt_type.addr = alloca %union.tree_node*, align 8
  %pre_p.addr = alloca %struct.gimple_seq_d**, align 8
  %cleared.addr = alloca i8, align 1
  %loop_entry_label = alloca %union.tree_node*, align 8
  %loop_exit_label = alloca %union.tree_node*, align 8
  %fall_thru_label = alloca %union.tree_node*, align 8
  %var = alloca %union.tree_node*, align 8
  %var_type = alloca %union.tree_node*, align 8
  %cref = alloca %union.tree_node*, align 8
  %tmp = alloca %union.tree_node*, align 8
  store %union.tree_node* %object, %union.tree_node** %object.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %object.addr, metadata !14611, metadata !DIExpression()), !dbg !14612
  store %union.tree_node* %lower, %union.tree_node** %lower.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lower.addr, metadata !14613, metadata !DIExpression()), !dbg !14614
  store %union.tree_node* %upper, %union.tree_node** %upper.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %upper.addr, metadata !14615, metadata !DIExpression()), !dbg !14616
  store %union.tree_node* %value, %union.tree_node** %value.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %value.addr, metadata !14617, metadata !DIExpression()), !dbg !14618
  store %union.tree_node* %array_elt_type, %union.tree_node** %array_elt_type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %array_elt_type.addr, metadata !14619, metadata !DIExpression()), !dbg !14620
  store %struct.gimple_seq_d** %pre_p, %struct.gimple_seq_d*** %pre_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %pre_p.addr, metadata !14621, metadata !DIExpression()), !dbg !14622
  store i8 %cleared, i8* %cleared.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %cleared.addr, metadata !14623, metadata !DIExpression()), !dbg !14624
  call void @llvm.dbg.declare(metadata %union.tree_node** %loop_entry_label, metadata !14625, metadata !DIExpression()), !dbg !14626
  call void @llvm.dbg.declare(metadata %union.tree_node** %loop_exit_label, metadata !14627, metadata !DIExpression()), !dbg !14628
  call void @llvm.dbg.declare(metadata %union.tree_node** %fall_thru_label, metadata !14629, metadata !DIExpression()), !dbg !14630
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !14631, metadata !DIExpression()), !dbg !14632
  call void @llvm.dbg.declare(metadata %union.tree_node** %var_type, metadata !14633, metadata !DIExpression()), !dbg !14634
  call void @llvm.dbg.declare(metadata %union.tree_node** %cref, metadata !14635, metadata !DIExpression()), !dbg !14636
  call void @llvm.dbg.declare(metadata %union.tree_node** %tmp, metadata !14637, metadata !DIExpression()), !dbg !14638
  %call = call %union.tree_node* @create_artificial_label(i32 0), !dbg !14639
  store %union.tree_node* %call, %union.tree_node** %loop_entry_label, align 8, !dbg !14640
  %call1 = call %union.tree_node* @create_artificial_label(i32 0), !dbg !14641
  store %union.tree_node* %call1, %union.tree_node** %loop_exit_label, align 8, !dbg !14642
  %call2 = call %union.tree_node* @create_artificial_label(i32 0), !dbg !14643
  store %union.tree_node* %call2, %union.tree_node** %fall_thru_label, align 8, !dbg !14644
  %0 = load %union.tree_node*, %union.tree_node** %upper.addr, align 8, !dbg !14645
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !14645
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !14645
  %1 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !14645
  store %union.tree_node* %1, %union.tree_node** %var_type, align 8, !dbg !14646
  %2 = load %union.tree_node*, %union.tree_node** %var_type, align 8, !dbg !14647
  %call3 = call %union.tree_node* @create_tmp_var(%union.tree_node* %2, i8* null), !dbg !14648
  store %union.tree_node* %call3, %union.tree_node** %var, align 8, !dbg !14649
  %3 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !14650
  %4 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !14651
  %5 = load %union.tree_node*, %union.tree_node** %lower.addr, align 8, !dbg !14651
  %call4 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %4, %union.tree_node* %5), !dbg !14651
  call void @gimplify_seq_add_stmt(%struct.gimple_seq_d** %3, %union.gimple_statement_d* %call4), !dbg !14652
  %6 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !14653
  %7 = load %union.tree_node*, %union.tree_node** %loop_entry_label, align 8, !dbg !14654
  %call5 = call %union.gimple_statement_d* @gimple_build_label(%union.tree_node* %7), !dbg !14655
  call void @gimplify_seq_add_stmt(%struct.gimple_seq_d** %6, %union.gimple_statement_d* %call5), !dbg !14656
  %8 = load %union.tree_node*, %union.tree_node** %array_elt_type.addr, align 8, !dbg !14657
  %9 = load %union.tree_node*, %union.tree_node** %object.addr, align 8, !dbg !14657
  %call6 = call %union.tree_node* @unshare_expr(%union.tree_node* %9), !dbg !14657
  %10 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !14657
  %call7 = call %union.tree_node* @build4_stat(i32 45, %union.tree_node* %8, %union.tree_node* %call6, %union.tree_node* %10, %union.tree_node* null, %union.tree_node* null), !dbg !14657
  store %union.tree_node* %call7, %union.tree_node** %cref, align 8, !dbg !14658
  %11 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !14659
  %base = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !14659
  %12 = bitcast %struct.tree_base* %base to i64*, !dbg !14659
  %bf.load = load i64, i64* %12, align 8, !dbg !14659
  %bf.clear = and i64 %bf.load, 65535, !dbg !14659
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !14659
  %cmp = icmp eq i32 %bf.cast, 51, !dbg !14661
  br i1 %cmp, label %if.then, label %if.else, !dbg !14662

if.then:                                          ; preds = %entry
  %13 = load %union.tree_node*, %union.tree_node** %cref, align 8, !dbg !14663
  %14 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !14664
  %constructor = bitcast %union.tree_node* %14 to %struct.tree_constructor*, !dbg !14664
  %elts = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor, i32 0, i32 1, !dbg !14664
  %15 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts, align 8, !dbg !14664
  %16 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !14665
  %17 = load i8, i8* %cleared.addr, align 1, !dbg !14666
  call void @gimplify_init_ctor_eval(%union.tree_node* %13, %struct.VEC_constructor_elt_gc* %15, %struct.gimple_seq_d** %16, i8 zeroext %17), !dbg !14667
  br label %if.end, !dbg !14667

if.else:                                          ; preds = %entry
  %18 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !14668
  %19 = load %union.tree_node*, %union.tree_node** %cref, align 8, !dbg !14669
  %20 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !14669
  %call8 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %19, %union.tree_node* %20), !dbg !14669
  call void @gimplify_seq_add_stmt(%struct.gimple_seq_d** %18, %union.gimple_statement_d* %call8), !dbg !14670
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %21 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !14671
  %22 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !14672
  %23 = load %union.tree_node*, %union.tree_node** %upper.addr, align 8, !dbg !14673
  %24 = load %union.tree_node*, %union.tree_node** %loop_exit_label, align 8, !dbg !14674
  %25 = load %union.tree_node*, %union.tree_node** %fall_thru_label, align 8, !dbg !14675
  %call9 = call %union.gimple_statement_d* @gimple_build_cond(i32 101, %union.tree_node* %22, %union.tree_node* %23, %union.tree_node* %24, %union.tree_node* %25), !dbg !14676
  call void @gimplify_seq_add_stmt(%struct.gimple_seq_d** %21, %union.gimple_statement_d* %call9), !dbg !14677
  %26 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !14678
  %27 = load %union.tree_node*, %union.tree_node** %fall_thru_label, align 8, !dbg !14679
  %call10 = call %union.gimple_statement_d* @gimple_build_label(%union.tree_node* %27), !dbg !14680
  call void @gimplify_seq_add_stmt(%struct.gimple_seq_d** %26, %union.gimple_statement_d* %call10), !dbg !14681
  %28 = load %union.tree_node*, %union.tree_node** %var_type, align 8, !dbg !14682
  %29 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !14682
  %30 = load %union.tree_node*, %union.tree_node** %var_type, align 8, !dbg !14682
  %31 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 14), align 16, !dbg !14682
  %call11 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %30, %union.tree_node* %31), !dbg !14682
  %call12 = call %union.tree_node* @build2_stat(i32 63, %union.tree_node* %28, %union.tree_node* %29, %union.tree_node* %call11), !dbg !14682
  store %union.tree_node* %call12, %union.tree_node** %tmp, align 8, !dbg !14683
  %32 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !14684
  %33 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !14685
  %34 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !14685
  %call13 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %33, %union.tree_node* %34), !dbg !14685
  call void @gimplify_seq_add_stmt(%struct.gimple_seq_d** %32, %union.gimple_statement_d* %call13), !dbg !14686
  %35 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !14687
  %36 = load %union.tree_node*, %union.tree_node** %loop_entry_label, align 8, !dbg !14688
  %call14 = call %union.gimple_statement_d* @gimple_build_goto(%union.tree_node* %36), !dbg !14689
  call void @gimplify_seq_add_stmt(%struct.gimple_seq_d** %35, %union.gimple_statement_d* %call14), !dbg !14690
  %37 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !14691
  %38 = load %union.tree_node*, %union.tree_node** %loop_exit_label, align 8, !dbg !14692
  %call15 = call %union.gimple_statement_d* @gimple_build_label(%union.tree_node* %38), !dbg !14693
  call void @gimplify_seq_add_stmt(%struct.gimple_seq_d** %37, %union.gimple_statement_d* %call15), !dbg !14694
  ret void, !dbg !14695
}

; Function Attrs: noinline nounwind uwtable
define internal void @prepare_gimple_addressable(%union.tree_node** %expr_p, %struct.gimple_seq_d** %seq_p) #0 !dbg !14696 {
entry:
  %expr_p.addr = alloca %union.tree_node**, align 8
  %seq_p.addr = alloca %struct.gimple_seq_d**, align 8
  store %union.tree_node** %expr_p, %union.tree_node*** %expr_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %expr_p.addr, metadata !14697, metadata !DIExpression()), !dbg !14698
  store %struct.gimple_seq_d** %seq_p, %struct.gimple_seq_d*** %seq_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %seq_p.addr, metadata !14699, metadata !DIExpression()), !dbg !14700
  br label %while.cond, !dbg !14701

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !14702
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !14703
  %call = call zeroext i8 @handled_component_p(%union.tree_node* %1), !dbg !14704
  %tobool = icmp ne i8 %call, 0, !dbg !14701
  br i1 %tobool, label %while.body, label %while.end, !dbg !14701

while.body:                                       ; preds = %while.cond
  %2 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !14705
  %3 = load %union.tree_node*, %union.tree_node** %2, align 8, !dbg !14705
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !14705
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !14705
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !14705
  store %union.tree_node** %arrayidx, %union.tree_node*** %expr_p.addr, align 8, !dbg !14706
  br label %while.cond, !dbg !14701, !llvm.loop !14707

while.end:                                        ; preds = %while.cond
  %4 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !14708
  %5 = load %union.tree_node*, %union.tree_node** %4, align 8, !dbg !14710
  %call1 = call zeroext i8 @is_gimple_reg(%union.tree_node* %5), !dbg !14711
  %tobool2 = icmp ne i8 %call1, 0, !dbg !14711
  br i1 %tobool2, label %if.then, label %if.end, !dbg !14712

if.then:                                          ; preds = %while.end
  %6 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !14713
  %7 = load %union.tree_node*, %union.tree_node** %6, align 8, !dbg !14714
  %8 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %seq_p.addr, align 8, !dbg !14715
  %call3 = call %union.tree_node* @get_initialized_tmp_var(%union.tree_node* %7, %struct.gimple_seq_d** %8, %struct.gimple_seq_d** null), !dbg !14716
  %9 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !14717
  store %union.tree_node* %call3, %union.tree_node** %9, align 8, !dbg !14718
  br label %if.end, !dbg !14719

if.end:                                           ; preds = %if.then, %while.end
  ret void, !dbg !14720
}

declare dso_local zeroext i8 @tree_ssa_useless_type_conversion(%union.tree_node*) #3

declare dso_local zeroext i8 @types_compatible_p(%union.tree_node*, %union.tree_node*) #3

declare dso_local void @recompute_tree_invariant_for_addr_expr(%union.tree_node*) #3

declare dso_local %union.tree_node* @tree_strip_sign_nop_conversions(%union.tree_node*) #3

; Function Attrs: noinline nounwind uwtable
define internal void @canonicalize_addr_expr(%union.tree_node** %expr_p) #0 !dbg !14721 {
entry:
  %expr_p.addr = alloca %union.tree_node**, align 8
  %expr = alloca %union.tree_node*, align 8
  %addr_expr = alloca %union.tree_node*, align 8
  %datype = alloca %union.tree_node*, align 8
  %ddatype = alloca %union.tree_node*, align 8
  %pddatype = alloca %union.tree_node*, align 8
  store %union.tree_node** %expr_p, %union.tree_node*** %expr_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %expr_p.addr, metadata !14722, metadata !DIExpression()), !dbg !14723
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr, metadata !14724, metadata !DIExpression()), !dbg !14725
  %0 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !14726
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !14727
  store %union.tree_node* %1, %union.tree_node** %expr, align 8, !dbg !14725
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr_expr, metadata !14728, metadata !DIExpression()), !dbg !14729
  %2 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !14730
  %exp = bitcast %union.tree_node* %2 to %struct.tree_exp*, !dbg !14730
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !14730
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !14730
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !14730
  store %union.tree_node* %3, %union.tree_node** %addr_expr, align 8, !dbg !14729
  call void @llvm.dbg.declare(metadata %union.tree_node** %datype, metadata !14731, metadata !DIExpression()), !dbg !14732
  call void @llvm.dbg.declare(metadata %union.tree_node** %ddatype, metadata !14733, metadata !DIExpression()), !dbg !14734
  call void @llvm.dbg.declare(metadata %union.tree_node** %pddatype, metadata !14735, metadata !DIExpression()), !dbg !14736
  %4 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !14737
  %common = bitcast %union.tree_node* %4 to %struct.tree_common*, !dbg !14737
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !14737
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !14737
  %base = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !14737
  %6 = bitcast %struct.tree_base* %base to i64*, !dbg !14737
  %bf.load = load i64, i64* %6, align 8, !dbg !14737
  %bf.clear = and i64 %bf.load, 65535, !dbg !14737
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !14737
  %cmp = icmp eq i32 %bf.cast, 10, !dbg !14737
  br i1 %cmp, label %lor.lhs.false8, label %lor.lhs.false, !dbg !14737

lor.lhs.false:                                    ; preds = %entry
  %7 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !14737
  %common1 = bitcast %union.tree_node* %7 to %struct.tree_common*, !dbg !14737
  %type2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1, i32 0, i32 2, !dbg !14737
  %8 = load %union.tree_node*, %union.tree_node** %type2, align 8, !dbg !14737
  %base3 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !14737
  %9 = bitcast %struct.tree_base* %base3 to i64*, !dbg !14737
  %bf.load4 = load i64, i64* %9, align 8, !dbg !14737
  %bf.clear5 = and i64 %bf.load4, 65535, !dbg !14737
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !14737
  %cmp7 = icmp eq i32 %bf.cast6, 12, !dbg !14737
  br i1 %cmp7, label %lor.lhs.false8, label %if.then, !dbg !14739

lor.lhs.false8:                                   ; preds = %lor.lhs.false, %entry
  %10 = load %union.tree_node*, %union.tree_node** %addr_expr, align 8, !dbg !14740
  %base9 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !14740
  %11 = bitcast %struct.tree_base* %base9 to i64*, !dbg !14740
  %bf.load10 = load i64, i64* %11, align 8, !dbg !14740
  %bf.clear11 = and i64 %bf.load10, 65535, !dbg !14740
  %bf.cast12 = trunc i64 %bf.clear11 to i32, !dbg !14740
  %cmp13 = icmp ne i32 %bf.cast12, 121, !dbg !14741
  br i1 %cmp13, label %if.then, label %if.end, !dbg !14742

if.then:                                          ; preds = %lor.lhs.false8, %lor.lhs.false
  br label %if.end82, !dbg !14743

if.end:                                           ; preds = %lor.lhs.false8
  %12 = load %union.tree_node*, %union.tree_node** %addr_expr, align 8, !dbg !14744
  %common14 = bitcast %union.tree_node* %12 to %struct.tree_common*, !dbg !14744
  %type15 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common14, i32 0, i32 2, !dbg !14744
  %13 = load %union.tree_node*, %union.tree_node** %type15, align 8, !dbg !14744
  %common16 = bitcast %union.tree_node* %13 to %struct.tree_common*, !dbg !14744
  %type17 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common16, i32 0, i32 2, !dbg !14744
  %14 = load %union.tree_node*, %union.tree_node** %type17, align 8, !dbg !14744
  store %union.tree_node* %14, %union.tree_node** %datype, align 8, !dbg !14745
  %15 = load %union.tree_node*, %union.tree_node** %datype, align 8, !dbg !14746
  %base18 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !14746
  %16 = bitcast %struct.tree_base* %base18 to i64*, !dbg !14746
  %bf.load19 = load i64, i64* %16, align 8, !dbg !14746
  %bf.clear20 = and i64 %bf.load19, 65535, !dbg !14746
  %bf.cast21 = trunc i64 %bf.clear20 to i32, !dbg !14746
  %cmp22 = icmp ne i32 %bf.cast21, 15, !dbg !14748
  br i1 %cmp22, label %if.then23, label %if.end24, !dbg !14749

if.then23:                                        ; preds = %if.end
  br label %if.end82, !dbg !14750

if.end24:                                         ; preds = %if.end
  %17 = load %union.tree_node*, %union.tree_node** %datype, align 8, !dbg !14751
  %common25 = bitcast %union.tree_node* %17 to %struct.tree_common*, !dbg !14751
  %type26 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common25, i32 0, i32 2, !dbg !14751
  %18 = load %union.tree_node*, %union.tree_node** %type26, align 8, !dbg !14751
  store %union.tree_node* %18, %union.tree_node** %ddatype, align 8, !dbg !14752
  %19 = load %union.tree_node*, %union.tree_node** %ddatype, align 8, !dbg !14753
  %call = call %union.tree_node* @build_pointer_type(%union.tree_node* %19), !dbg !14754
  store %union.tree_node* %call, %union.tree_node** %pddatype, align 8, !dbg !14755
  %20 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !14756
  %common27 = bitcast %union.tree_node* %20 to %struct.tree_common*, !dbg !14756
  %type28 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common27, i32 0, i32 2, !dbg !14756
  %21 = load %union.tree_node*, %union.tree_node** %type28, align 8, !dbg !14756
  %type29 = bitcast %union.tree_node* %21 to %struct.tree_type*, !dbg !14756
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type29, i32 0, i32 16, !dbg !14756
  %22 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !14756
  %23 = load %union.tree_node*, %union.tree_node** %pddatype, align 8, !dbg !14758
  %call30 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %22, %union.tree_node* %23), !dbg !14759
  %tobool = icmp ne i8 %call30, 0, !dbg !14759
  br i1 %tobool, label %if.end32, label %if.then31, !dbg !14760

if.then31:                                        ; preds = %if.end24
  br label %if.end82, !dbg !14761

if.end32:                                         ; preds = %if.end24
  %24 = load %union.tree_node*, %union.tree_node** %ddatype, align 8, !dbg !14762
  %type33 = bitcast %union.tree_node* %24 to %struct.tree_type*, !dbg !14762
  %size_unit = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type33, i32 0, i32 3, !dbg !14762
  %25 = load %union.tree_node*, %union.tree_node** %size_unit, align 8, !dbg !14762
  %tobool34 = icmp ne %union.tree_node* %25, null, !dbg !14762
  br i1 %tobool34, label %lor.lhs.false35, label %if.then61, !dbg !14764

lor.lhs.false35:                                  ; preds = %if.end32
  %26 = load %union.tree_node*, %union.tree_node** %ddatype, align 8, !dbg !14765
  %type36 = bitcast %union.tree_node* %26 to %struct.tree_type*, !dbg !14765
  %size_unit37 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type36, i32 0, i32 3, !dbg !14765
  %27 = load %union.tree_node*, %union.tree_node** %size_unit37, align 8, !dbg !14765
  %base38 = bitcast %union.tree_node* %27 to %struct.tree_base*, !dbg !14765
  %28 = bitcast %struct.tree_base* %base38 to i64*, !dbg !14765
  %bf.load39 = load i64, i64* %28, align 8, !dbg !14765
  %bf.clear40 = and i64 %bf.load39, 65535, !dbg !14765
  %bf.cast41 = trunc i64 %bf.clear40 to i32, !dbg !14765
  %cmp42 = icmp ne i32 %bf.cast41, 23, !dbg !14766
  br i1 %cmp42, label %if.then61, label %lor.lhs.false43, !dbg !14767

lor.lhs.false43:                                  ; preds = %lor.lhs.false35
  %29 = load %union.tree_node*, %union.tree_node** %datype, align 8, !dbg !14768
  %type44 = bitcast %union.tree_node* %29 to %struct.tree_type*, !dbg !14768
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type44, i32 0, i32 1, !dbg !14768
  %30 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !14768
  %tobool45 = icmp ne %union.tree_node* %30, null, !dbg !14768
  br i1 %tobool45, label %lor.lhs.false46, label %if.then61, !dbg !14769

lor.lhs.false46:                                  ; preds = %lor.lhs.false43
  %31 = load %union.tree_node*, %union.tree_node** %datype, align 8, !dbg !14770
  %type47 = bitcast %union.tree_node* %31 to %struct.tree_type*, !dbg !14770
  %values48 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type47, i32 0, i32 1, !dbg !14770
  %32 = load %union.tree_node*, %union.tree_node** %values48, align 8, !dbg !14770
  %type49 = bitcast %union.tree_node* %32 to %struct.tree_type*, !dbg !14770
  %minval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type49, i32 0, i32 13, !dbg !14770
  %33 = load %union.tree_node*, %union.tree_node** %minval, align 8, !dbg !14770
  %tobool50 = icmp ne %union.tree_node* %33, null, !dbg !14770
  br i1 %tobool50, label %lor.lhs.false51, label %if.then61, !dbg !14771

lor.lhs.false51:                                  ; preds = %lor.lhs.false46
  %34 = load %union.tree_node*, %union.tree_node** %datype, align 8, !dbg !14772
  %type52 = bitcast %union.tree_node* %34 to %struct.tree_type*, !dbg !14772
  %values53 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type52, i32 0, i32 1, !dbg !14772
  %35 = load %union.tree_node*, %union.tree_node** %values53, align 8, !dbg !14772
  %type54 = bitcast %union.tree_node* %35 to %struct.tree_type*, !dbg !14772
  %minval55 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type54, i32 0, i32 13, !dbg !14772
  %36 = load %union.tree_node*, %union.tree_node** %minval55, align 8, !dbg !14772
  %base56 = bitcast %union.tree_node* %36 to %struct.tree_base*, !dbg !14772
  %37 = bitcast %struct.tree_base* %base56 to i64*, !dbg !14772
  %bf.load57 = load i64, i64* %37, align 8, !dbg !14772
  %bf.clear58 = and i64 %bf.load57, 65535, !dbg !14772
  %bf.cast59 = trunc i64 %bf.clear58 to i32, !dbg !14772
  %cmp60 = icmp ne i32 %bf.cast59, 23, !dbg !14773
  br i1 %cmp60, label %if.then61, label %if.end62, !dbg !14774

if.then61:                                        ; preds = %lor.lhs.false51, %lor.lhs.false46, %lor.lhs.false43, %lor.lhs.false35, %if.end32
  br label %if.end82, !dbg !14775

if.end62:                                         ; preds = %lor.lhs.false51
  %38 = load %union.tree_node*, %union.tree_node** %ddatype, align 8, !dbg !14776
  %39 = load %union.tree_node*, %union.tree_node** %addr_expr, align 8, !dbg !14776
  %exp63 = bitcast %union.tree_node* %39 to %struct.tree_exp*, !dbg !14776
  %operands64 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp63, i32 0, i32 3, !dbg !14776
  %arrayidx65 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands64, i64 0, i64 0, !dbg !14776
  %40 = load %union.tree_node*, %union.tree_node** %arrayidx65, align 8, !dbg !14776
  %41 = load %union.tree_node*, %union.tree_node** %datype, align 8, !dbg !14776
  %type66 = bitcast %union.tree_node* %41 to %struct.tree_type*, !dbg !14776
  %values67 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type66, i32 0, i32 1, !dbg !14776
  %42 = load %union.tree_node*, %union.tree_node** %values67, align 8, !dbg !14776
  %type68 = bitcast %union.tree_node* %42 to %struct.tree_type*, !dbg !14776
  %minval69 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type68, i32 0, i32 13, !dbg !14776
  %43 = load %union.tree_node*, %union.tree_node** %minval69, align 8, !dbg !14776
  %call70 = call %union.tree_node* @build4_stat(i32 45, %union.tree_node* %38, %union.tree_node* %40, %union.tree_node* %43, %union.tree_node* null, %union.tree_node* null), !dbg !14776
  %44 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !14777
  store %union.tree_node* %call70, %union.tree_node** %44, align 8, !dbg !14778
  %45 = load %union.tree_node*, %union.tree_node** %pddatype, align 8, !dbg !14779
  %46 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !14779
  %47 = load %union.tree_node*, %union.tree_node** %46, align 8, !dbg !14779
  %call71 = call %union.tree_node* @build1_stat(i32 121, %union.tree_node* %45, %union.tree_node* %47), !dbg !14779
  %48 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !14780
  store %union.tree_node* %call71, %union.tree_node** %48, align 8, !dbg !14781
  %49 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !14782
  %common72 = bitcast %union.tree_node* %49 to %struct.tree_common*, !dbg !14782
  %type73 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common72, i32 0, i32 2, !dbg !14782
  %50 = load %union.tree_node*, %union.tree_node** %type73, align 8, !dbg !14782
  %51 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !14784
  %52 = load %union.tree_node*, %union.tree_node** %51, align 8, !dbg !14784
  %common74 = bitcast %union.tree_node* %52 to %struct.tree_common*, !dbg !14784
  %type75 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common74, i32 0, i32 2, !dbg !14784
  %53 = load %union.tree_node*, %union.tree_node** %type75, align 8, !dbg !14784
  %call76 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %50, %union.tree_node* %53), !dbg !14785
  %tobool77 = icmp ne i8 %call76, 0, !dbg !14785
  br i1 %tobool77, label %if.end82, label %if.then78, !dbg !14786

if.then78:                                        ; preds = %if.end62
  %54 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !14787
  %common79 = bitcast %union.tree_node* %54 to %struct.tree_common*, !dbg !14787
  %type80 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common79, i32 0, i32 2, !dbg !14787
  %55 = load %union.tree_node*, %union.tree_node** %type80, align 8, !dbg !14787
  %56 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !14787
  %57 = load %union.tree_node*, %union.tree_node** %56, align 8, !dbg !14787
  %call81 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %55, %union.tree_node* %57), !dbg !14787
  %58 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !14788
  store %union.tree_node* %call81, %union.tree_node** %58, align 8, !dbg !14789
  br label %if.end82, !dbg !14790

if.end82:                                         ; preds = %if.then, %if.then23, %if.then31, %if.then61, %if.then78, %if.end62
  ret void, !dbg !14791
}

declare dso_local i32 @compare_tree_int(%union.tree_node*, i64) #3

; Function Attrs: noinline nounwind uwtable
define internal void @gimplify_vla_decl(%union.tree_node* %decl, %struct.gimple_seq_d** %seq_p) #0 !dbg !14792 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %seq_p.addr = alloca %struct.gimple_seq_d**, align 8
  %t = alloca %union.tree_node*, align 8
  %addr = alloca %union.tree_node*, align 8
  %ptr_type = alloca %union.tree_node*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !14793, metadata !DIExpression()), !dbg !14794
  store %struct.gimple_seq_d** %seq_p, %struct.gimple_seq_d*** %seq_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %seq_p.addr, metadata !14795, metadata !DIExpression()), !dbg !14796
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !14797, metadata !DIExpression()), !dbg !14798
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr, metadata !14799, metadata !DIExpression()), !dbg !14800
  call void @llvm.dbg.declare(metadata %union.tree_node** %ptr_type, metadata !14801, metadata !DIExpression()), !dbg !14802
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !14803
  %decl_common = bitcast %union.tree_node* %0 to %struct.tree_decl_common*, !dbg !14803
  %size = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 1, !dbg !14803
  %1 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %seq_p.addr, align 8, !dbg !14804
  call void @gimplify_one_sizepos(%union.tree_node** %size, %struct.gimple_seq_d** %1), !dbg !14805
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !14806
  %decl_common1 = bitcast %union.tree_node* %2 to %struct.tree_decl_common*, !dbg !14806
  %size_unit = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common1, i32 0, i32 4, !dbg !14806
  %3 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %seq_p.addr, align 8, !dbg !14807
  call void @gimplify_one_sizepos(%union.tree_node** %size_unit, %struct.gimple_seq_d** %3), !dbg !14808
  %4 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !14809
  %common = bitcast %union.tree_node* %4 to %struct.tree_common*, !dbg !14809
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !14809
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !14809
  %call = call %union.tree_node* @build_pointer_type(%union.tree_node* %5), !dbg !14810
  store %union.tree_node* %call, %union.tree_node** %ptr_type, align 8, !dbg !14811
  %6 = load %union.tree_node*, %union.tree_node** %ptr_type, align 8, !dbg !14812
  %7 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !14813
  %call2 = call i8* @get_name(%union.tree_node* %7), !dbg !14814
  %call3 = call %union.tree_node* @create_tmp_var(%union.tree_node* %6, i8* %call2), !dbg !14815
  store %union.tree_node* %call3, %union.tree_node** %addr, align 8, !dbg !14816
  %8 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !14817
  %decl_common4 = bitcast %union.tree_node* %8 to %struct.tree_decl_common*, !dbg !14817
  %ignored_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common4, i32 0, i32 2, !dbg !14817
  %9 = bitcast i40* %ignored_flag to i64*, !dbg !14817
  %bf.load = load i64, i64* %9, align 8, !dbg !14818
  %bf.clear = and i64 %bf.load, -1025, !dbg !14818
  store i64 %bf.clear, i64* %9, align 8, !dbg !14818
  %10 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !14819
  %call5 = call %union.tree_node* @build_fold_indirect_ref_loc(i32 0, %union.tree_node* %10), !dbg !14819
  store %union.tree_node* %call5, %union.tree_node** %t, align 8, !dbg !14820
  %11 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !14821
  %12 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !14821
  call void @decl_value_expr_insert(%union.tree_node* %11, %union.tree_node* %12), !dbg !14821
  %13 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !14822
  %decl_common6 = bitcast %union.tree_node* %13 to %struct.tree_decl_common*, !dbg !14822
  %decl_flag_2 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common6, i32 0, i32 2, !dbg !14822
  %14 = bitcast i40* %decl_flag_2 to i64*, !dbg !14822
  %bf.load7 = load i64, i64* %14, align 8, !dbg !14823
  %bf.clear8 = and i64 %bf.load7, -67108865, !dbg !14823
  %bf.set = or i64 %bf.clear8, 67108864, !dbg !14823
  store i64 %bf.set, i64* %14, align 8, !dbg !14823
  %15 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @built_in_decls, i64 0, i64 415), align 8, !dbg !14824
  store %union.tree_node* %15, %union.tree_node** %t, align 8, !dbg !14825
  %16 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !14826
  %17 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !14826
  %decl_common9 = bitcast %union.tree_node* %17 to %struct.tree_decl_common*, !dbg !14826
  %size_unit10 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common9, i32 0, i32 4, !dbg !14826
  %18 = load %union.tree_node*, %union.tree_node** %size_unit10, align 8, !dbg !14826
  %call11 = call %union.tree_node* (i32, %union.tree_node*, i32, ...) @build_call_expr_loc(i32 0, %union.tree_node* %16, i32 1, %union.tree_node* %18), !dbg !14826
  store %union.tree_node* %call11, %union.tree_node** %t, align 8, !dbg !14827
  %19 = load %union.tree_node*, %union.tree_node** %ptr_type, align 8, !dbg !14828
  %20 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !14828
  %call12 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %19, %union.tree_node* %20), !dbg !14828
  store %union.tree_node* %call12, %union.tree_node** %t, align 8, !dbg !14829
  %21 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !14830
  %common13 = bitcast %union.tree_node* %21 to %struct.tree_common*, !dbg !14830
  %type14 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common13, i32 0, i32 2, !dbg !14830
  %22 = load %union.tree_node*, %union.tree_node** %type14, align 8, !dbg !14830
  %23 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !14830
  %24 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !14830
  %call15 = call %union.tree_node* @build2_stat(i32 53, %union.tree_node* %22, %union.tree_node* %23, %union.tree_node* %24), !dbg !14830
  store %union.tree_node* %call15, %union.tree_node** %t, align 8, !dbg !14831
  %25 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !14832
  %26 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %seq_p.addr, align 8, !dbg !14833
  call void @gimplify_and_add(%union.tree_node* %25, %struct.gimple_seq_d** %26), !dbg !14834
  %27 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !14835
  %save_stack = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %27, i32 0, i32 9, !dbg !14836
  store i8 1, i8* %save_stack, align 4, !dbg !14837
  ret void, !dbg !14838
}

declare dso_local void @decl_value_expr_insert(%union.tree_node*, %union.tree_node*) #3

declare dso_local %union.tree_node* @build_call_expr_loc(i32, %union.tree_node*, i32, ...) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_global_var(%union.tree_node* %t) #0 !dbg !14839 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !14840, metadata !DIExpression()), !dbg !14841
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !14842
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !14842
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !14842
  %bf.load = load i64, i64* %1, align 8, !dbg !14842
  %bf.lshr = lshr i64 %bf.load, 26, !dbg !14842
  %bf.clear = and i64 %bf.lshr, 1, !dbg !14842
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !14842
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !14842
  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !14843

lor.rhs:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !14844
  %decl_common = bitcast %union.tree_node* %2 to %struct.tree_decl_common*, !dbg !14844
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !14844
  %3 = bitcast i40* %decl_flag_1 to i64*, !dbg !14844
  %bf.load1 = load i64, i64* %3, align 8, !dbg !14844
  %bf.lshr2 = lshr i64 %bf.load1, 25, !dbg !14844
  %bf.clear3 = and i64 %bf.lshr2, 1, !dbg !14844
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !14844
  %tobool5 = icmp ne i32 %bf.cast4, 0, !dbg !14843
  br label %lor.end, !dbg !14843

lor.end:                                          ; preds = %lor.rhs, %entry
  %4 = phi i1 [ true, %entry ], [ %tobool5, %lor.rhs ]
  %lor.ext = zext i1 %4 to i32, !dbg !14843
  %conv = trunc i32 %lor.ext to i8, !dbg !14845
  ret i8 %conv, !dbg !14846
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_push_bind_expr(%union.gimple_statement_d* %gimple_bind) #0 !dbg !14847 {
entry:
  %gimple_bind.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gimple_bind, %union.gimple_statement_d** %gimple_bind.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gimple_bind.addr, metadata !14848, metadata !DIExpression()), !dbg !14849
  %0 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !14850
  %bind_expr_stack = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %0, i32 0, i32 1, !dbg !14852
  %1 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %bind_expr_stack, align 8, !dbg !14852
  %cmp = icmp eq %struct.VEC_gimple_heap* %1, null, !dbg !14853
  br i1 %cmp, label %if.then, label %if.end, !dbg !14854

if.then:                                          ; preds = %entry
  %call = call %struct.VEC_gimple_heap* @VEC_gimple_heap_alloc(i32 8), !dbg !14855
  %2 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !14856
  %bind_expr_stack1 = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %2, i32 0, i32 1, !dbg !14857
  store %struct.VEC_gimple_heap* %call, %struct.VEC_gimple_heap** %bind_expr_stack1, align 8, !dbg !14858
  br label %if.end, !dbg !14856

if.end:                                           ; preds = %if.then, %entry
  %3 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !14859
  %bind_expr_stack2 = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %3, i32 0, i32 1, !dbg !14859
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gimple_bind.addr, align 8, !dbg !14859
  %call3 = call %union.gimple_statement_d** @VEC_gimple_heap_safe_push(%struct.VEC_gimple_heap** %bind_expr_stack2, %union.gimple_statement_d* %4), !dbg !14859
  ret void, !dbg !14860
}

; Function Attrs: noinline nounwind uwtable
define internal void @build_stack_save_restore(%union.gimple_statement_d** %save, %union.gimple_statement_d** %restore) #0 !dbg !14861 {
entry:
  %save.addr = alloca %union.gimple_statement_d**, align 8
  %restore.addr = alloca %union.gimple_statement_d**, align 8
  %tmp_var = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d** %save, %union.gimple_statement_d*** %save.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d*** %save.addr, metadata !14864, metadata !DIExpression()), !dbg !14865
  store %union.gimple_statement_d** %restore, %union.gimple_statement_d*** %restore.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d*** %restore.addr, metadata !14866, metadata !DIExpression()), !dbg !14867
  call void @llvm.dbg.declare(metadata %union.tree_node** %tmp_var, metadata !14868, metadata !DIExpression()), !dbg !14869
  %0 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @implicit_built_in_decls, i64 0, i64 526), align 16, !dbg !14870
  %call = call %union.gimple_statement_d* (%union.tree_node*, i32, ...) @gimple_build_call(%union.tree_node* %0, i32 0), !dbg !14871
  %1 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %save.addr, align 8, !dbg !14872
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %1, align 8, !dbg !14873
  %2 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 39), align 8, !dbg !14874
  %call1 = call %union.tree_node* @create_tmp_var(%union.tree_node* %2, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10, i64 0, i64 0)), !dbg !14875
  store %union.tree_node* %call1, %union.tree_node** %tmp_var, align 8, !dbg !14876
  %3 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %save.addr, align 8, !dbg !14877
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %3, align 8, !dbg !14878
  %5 = load %union.tree_node*, %union.tree_node** %tmp_var, align 8, !dbg !14879
  call void @gimple_call_set_lhs(%union.gimple_statement_d* %4, %union.tree_node* %5), !dbg !14880
  %6 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @implicit_built_in_decls, i64 0, i64 527), align 8, !dbg !14881
  %7 = load %union.tree_node*, %union.tree_node** %tmp_var, align 8, !dbg !14882
  %call2 = call %union.gimple_statement_d* (%union.tree_node*, i32, ...) @gimple_build_call(%union.tree_node* %6, i32 1, %union.tree_node* %7), !dbg !14883
  %8 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %restore.addr, align 8, !dbg !14884
  store %union.gimple_statement_d* %call2, %union.gimple_statement_d** %8, align 8, !dbg !14885
  ret void, !dbg !14886
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_pop_bind_expr() #0 !dbg !14887 {
entry:
  %0 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !14888
  %bind_expr_stack = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %0, i32 0, i32 1, !dbg !14888
  %1 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %bind_expr_stack, align 8, !dbg !14888
  %tobool = icmp ne %struct.VEC_gimple_heap* %1, null, !dbg !14888
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !14888

cond.true:                                        ; preds = %entry
  %2 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !14888
  %bind_expr_stack1 = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %2, i32 0, i32 1, !dbg !14888
  %3 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %bind_expr_stack1, align 8, !dbg !14888
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %3, i32 0, i32 0, !dbg !14888
  br label %cond.end, !dbg !14888

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !14888

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !14888
  %call = call %union.gimple_statement_d* @VEC_gimple_base_pop(%struct.VEC_gimple_base* %cond), !dbg !14888
  ret void, !dbg !14889
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_gimple_heap* @VEC_gimple_heap_alloc(i32 %alloc_) #0 !dbg !14890 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !14893, metadata !DIExpression()), !dbg !14894
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !14894
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !14894
  %1 = bitcast i8* %call to %struct.VEC_gimple_heap*, !dbg !14894
  ret %struct.VEC_gimple_heap* %1, !dbg !14894
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d** @VEC_gimple_heap_safe_push(%struct.VEC_gimple_heap** %vec_, %union.gimple_statement_d* %obj_) #0 !dbg !14895 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_heap**, align 8
  %obj_.addr = alloca %union.gimple_statement_d*, align 8
  store %struct.VEC_gimple_heap** %vec_, %struct.VEC_gimple_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap*** %vec_.addr, metadata !14898, metadata !DIExpression()), !dbg !14899
  store %union.gimple_statement_d* %obj_, %union.gimple_statement_d** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %obj_.addr, metadata !14900, metadata !DIExpression()), !dbg !14899
  %0 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !14899
  %call = call i32 @VEC_gimple_heap_reserve(%struct.VEC_gimple_heap** %0, i32 1), !dbg !14899
  %1 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !14899
  %2 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %1, align 8, !dbg !14899
  %tobool = icmp ne %struct.VEC_gimple_heap* %2, null, !dbg !14899
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !14899

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !14899
  %4 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %3, align 8, !dbg !14899
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %4, i32 0, i32 0, !dbg !14899
  br label %cond.end, !dbg !14899

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !14899

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !14899
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %obj_.addr, align 8, !dbg !14899
  %call1 = call %union.gimple_statement_d** @VEC_gimple_base_quick_push(%struct.VEC_gimple_base* %cond, %union.gimple_statement_d* %5), !dbg !14899
  ret %union.gimple_statement_d** %call1, !dbg !14899
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_gimple_heap_reserve(%struct.VEC_gimple_heap** %vec_, i32 %alloc_) #0 !dbg !14901 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_gimple_heap** %vec_, %struct.VEC_gimple_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap*** %vec_.addr, metadata !14904, metadata !DIExpression()), !dbg !14905
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !14906, metadata !DIExpression()), !dbg !14905
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !14907, metadata !DIExpression()), !dbg !14905
  %0 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !14905
  %1 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %0, align 8, !dbg !14905
  %tobool = icmp ne %struct.VEC_gimple_heap* %1, null, !dbg !14905
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !14905

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !14905
  %3 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %2, align 8, !dbg !14905
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %3, i32 0, i32 0, !dbg !14905
  br label %cond.end, !dbg !14905

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !14905

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !14905
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !14905
  %call = call i32 @VEC_gimple_base_space(%struct.VEC_gimple_base* %cond, i32 %4), !dbg !14905
  %tobool1 = icmp ne i32 %call, 0, !dbg !14905
  %lnot = xor i1 %tobool1, true, !dbg !14905
  %lnot.ext = zext i1 %lnot to i32, !dbg !14905
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !14905
  %5 = load i32, i32* %extend, align 4, !dbg !14908
  %tobool2 = icmp ne i32 %5, 0, !dbg !14908
  br i1 %tobool2, label %if.then, label %if.end, !dbg !14905

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !14908
  %7 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %6, align 8, !dbg !14908
  %8 = bitcast %struct.VEC_gimple_heap* %7 to i8*, !dbg !14908
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !14908
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !14908
  %10 = bitcast i8* %call3 to %struct.VEC_gimple_heap*, !dbg !14908
  %11 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !14908
  store %struct.VEC_gimple_heap* %10, %struct.VEC_gimple_heap** %11, align 8, !dbg !14908
  br label %if.end, !dbg !14908

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !14905
  ret i32 %12, !dbg !14905
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d** @VEC_gimple_base_quick_push(%struct.VEC_gimple_base* %vec_, %union.gimple_statement_d* %obj_) #0 !dbg !14910 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_base*, align 8
  %obj_.addr = alloca %union.gimple_statement_d*, align 8
  %slot_ = alloca %union.gimple_statement_d**, align 8
  store %struct.VEC_gimple_base* %vec_, %struct.VEC_gimple_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_base** %vec_.addr, metadata !14914, metadata !DIExpression()), !dbg !14915
  store %union.gimple_statement_d* %obj_, %union.gimple_statement_d** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %obj_.addr, metadata !14916, metadata !DIExpression()), !dbg !14915
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d*** %slot_, metadata !14917, metadata !DIExpression()), !dbg !14915
  %0 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !14915
  %num = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %0, i32 0, i32 0, !dbg !14915
  %1 = load i32, i32* %num, align 8, !dbg !14915
  %2 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !14915
  %alloc = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %2, i32 0, i32 1, !dbg !14915
  %3 = load i32, i32* %alloc, align 4, !dbg !14915
  %cmp = icmp ult i32 %1, %3, !dbg !14915
  %conv = zext i1 %cmp to i32, !dbg !14915
  %4 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !14915
  %vec = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %4, i32 0, i32 2, !dbg !14915
  %5 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !14915
  %num1 = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %5, i32 0, i32 0, !dbg !14915
  %6 = load i32, i32* %num1, align 8, !dbg !14915
  %inc = add i32 %6, 1, !dbg !14915
  store i32 %inc, i32* %num1, align 8, !dbg !14915
  %idxprom = zext i32 %6 to i64, !dbg !14915
  %arrayidx = getelementptr inbounds [1 x %union.gimple_statement_d*], [1 x %union.gimple_statement_d*]* %vec, i64 0, i64 %idxprom, !dbg !14915
  store %union.gimple_statement_d** %arrayidx, %union.gimple_statement_d*** %slot_, align 8, !dbg !14915
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %obj_.addr, align 8, !dbg !14915
  %8 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %slot_, align 8, !dbg !14915
  store %union.gimple_statement_d* %7, %union.gimple_statement_d** %8, align 8, !dbg !14915
  %9 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %slot_, align 8, !dbg !14915
  ret %union.gimple_statement_d** %9, !dbg !14915
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_gimple_base_space(%struct.VEC_gimple_base* %vec_, i32 %alloc_) #0 !dbg !14918 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_gimple_base* %vec_, %struct.VEC_gimple_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_base** %vec_.addr, metadata !14921, metadata !DIExpression()), !dbg !14922
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !14923, metadata !DIExpression()), !dbg !14922
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !14922
  %cmp = icmp sge i32 %0, 0, !dbg !14922
  %conv = zext i1 %cmp to i32, !dbg !14922
  %1 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !14922
  %tobool = icmp ne %struct.VEC_gimple_base* %1, null, !dbg !14922
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !14922

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !14922
  %alloc = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %2, i32 0, i32 1, !dbg !14922
  %3 = load i32, i32* %alloc, align 4, !dbg !14922
  %4 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !14922
  %num = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %4, i32 0, i32 0, !dbg !14922
  %5 = load i32, i32* %num, align 8, !dbg !14922
  %sub = sub i32 %3, %5, !dbg !14922
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !14922
  %cmp1 = icmp uge i32 %sub, %6, !dbg !14922
  %conv2 = zext i1 %cmp1 to i32, !dbg !14922
  br label %cond.end, !dbg !14922

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !14922
  %tobool3 = icmp ne i32 %7, 0, !dbg !14922
  %lnot = xor i1 %tobool3, true, !dbg !14922
  %lnot.ext = zext i1 %lnot to i32, !dbg !14922
  br label %cond.end, !dbg !14922

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !14922
  ret i32 %cond, !dbg !14922
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @VEC_gimple_base_pop(%struct.VEC_gimple_base* %vec_) #0 !dbg !14924 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_base*, align 8
  %obj_ = alloca %union.gimple_statement_d*, align 8
  store %struct.VEC_gimple_base* %vec_, %struct.VEC_gimple_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_base** %vec_.addr, metadata !14927, metadata !DIExpression()), !dbg !14928
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %obj_, metadata !14929, metadata !DIExpression()), !dbg !14928
  %0 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !14928
  %num = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %0, i32 0, i32 0, !dbg !14928
  %1 = load i32, i32* %num, align 8, !dbg !14928
  %2 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !14928
  %vec = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %2, i32 0, i32 2, !dbg !14928
  %3 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !14928
  %num1 = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %3, i32 0, i32 0, !dbg !14928
  %4 = load i32, i32* %num1, align 8, !dbg !14928
  %dec = add i32 %4, -1, !dbg !14928
  store i32 %dec, i32* %num1, align 8, !dbg !14928
  %idxprom = zext i32 %dec to i64, !dbg !14928
  %arrayidx = getelementptr inbounds [1 x %union.gimple_statement_d*], [1 x %union.gimple_statement_d*]* %vec, i64 0, i64 %idxprom, !dbg !14928
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %arrayidx, align 8, !dbg !14928
  store %union.gimple_statement_d* %5, %union.gimple_statement_d** %obj_, align 8, !dbg !14928
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %obj_, align 8, !dbg !14928
  ret %union.gimple_statement_d* %6, !dbg !14928
}

declare dso_local i32 @tree_int_cst_lt(%union.tree_node*, %union.tree_node*) #3

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @VEC_tree_base_ordered_remove(%struct.VEC_tree_base* %vec_, i32 %ix_) #0 !dbg !14930 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %ix_.addr = alloca i32, align 4
  %slot_ = alloca %union.tree_node**, align 8
  %obj_ = alloca %union.tree_node*, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !14933, metadata !DIExpression()), !dbg !14934
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !14935, metadata !DIExpression()), !dbg !14934
  call void @llvm.dbg.declare(metadata %union.tree_node*** %slot_, metadata !14936, metadata !DIExpression()), !dbg !14934
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_, metadata !14937, metadata !DIExpression()), !dbg !14934
  %0 = load i32, i32* %ix_.addr, align 4, !dbg !14934
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !14934
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %1, i32 0, i32 0, !dbg !14934
  %2 = load i32, i32* %num, align 8, !dbg !14934
  %cmp = icmp ult i32 %0, %2, !dbg !14934
  %conv = zext i1 %cmp to i32, !dbg !14934
  %3 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !14934
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %3, i32 0, i32 2, !dbg !14934
  %4 = load i32, i32* %ix_.addr, align 4, !dbg !14934
  %idxprom = zext i32 %4 to i64, !dbg !14934
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !14934
  store %union.tree_node** %arrayidx, %union.tree_node*** %slot_, align 8, !dbg !14934
  %5 = load %union.tree_node**, %union.tree_node*** %slot_, align 8, !dbg !14934
  %6 = load %union.tree_node*, %union.tree_node** %5, align 8, !dbg !14934
  store %union.tree_node* %6, %union.tree_node** %obj_, align 8, !dbg !14934
  %7 = load %union.tree_node**, %union.tree_node*** %slot_, align 8, !dbg !14934
  %8 = bitcast %union.tree_node** %7 to i8*, !dbg !14934
  %9 = load %union.tree_node**, %union.tree_node*** %slot_, align 8, !dbg !14934
  %add.ptr = getelementptr inbounds %union.tree_node*, %union.tree_node** %9, i64 1, !dbg !14934
  %10 = bitcast %union.tree_node** %add.ptr to i8*, !dbg !14934
  %11 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !14934
  %num1 = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %11, i32 0, i32 0, !dbg !14934
  %12 = load i32, i32* %num1, align 8, !dbg !14934
  %dec = add i32 %12, -1, !dbg !14934
  store i32 %dec, i32* %num1, align 8, !dbg !14934
  %13 = load i32, i32* %ix_.addr, align 4, !dbg !14934
  %sub = sub i32 %dec, %13, !dbg !14934
  %conv2 = zext i32 %sub to i64, !dbg !14934
  %mul = mul i64 %conv2, 8, !dbg !14934
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %10, i64 %mul, i1 false), !dbg !14934
  %14 = load %union.tree_node*, %union.tree_node** %obj_, align 8, !dbg !14934
  ret %union.tree_node* %14, !dbg !14934
}

declare dso_local %union.gimple_statement_d* @gimple_build_switch_vec(%union.tree_node*, %union.tree_node*, %struct.VEC_tree_heap*) #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

declare dso_local void @gsi_insert_after_without_update(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i32) #3

declare dso_local %union.gimple_statement_d* @gimple_build_return(%union.tree_node*) #3

declare dso_local i32 @list_length(%union.tree_node*) #3

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @VEC_tree_gc_safe_push(%struct.VEC_tree_gc** %vec_, %union.tree_node* %obj_) #0 !dbg !14938 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_gc**, align 8
  %obj_.addr = alloca %union.tree_node*, align 8
  store %struct.VEC_tree_gc** %vec_, %struct.VEC_tree_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_gc*** %vec_.addr, metadata !14942, metadata !DIExpression()), !dbg !14943
  store %union.tree_node* %obj_, %union.tree_node** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_.addr, metadata !14944, metadata !DIExpression()), !dbg !14943
  %0 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !14943
  %call = call i32 @VEC_tree_gc_reserve(%struct.VEC_tree_gc** %0, i32 1), !dbg !14943
  %1 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !14943
  %2 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %1, align 8, !dbg !14943
  %tobool = icmp ne %struct.VEC_tree_gc* %2, null, !dbg !14943
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !14943

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !14943
  %4 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %3, align 8, !dbg !14943
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %4, i32 0, i32 0, !dbg !14943
  br label %cond.end, !dbg !14943

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !14943

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !14943
  %5 = load %union.tree_node*, %union.tree_node** %obj_.addr, align 8, !dbg !14943
  %call1 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond, %union.tree_node* %5), !dbg !14943
  ret %union.tree_node** %call1, !dbg !14943
}

declare dso_local i8* @xstrdup(i8*) #3

declare dso_local %union.tree_node* @build_string(i32, i8*) #3

declare dso_local i8* @strchr(i8*, i32) #3

declare dso_local %union.tree_node* @build_tree_list_stat(%union.tree_node*, %union.tree_node*) #3

declare dso_local %union.gimple_statement_d* @gimple_build_asm_vec(i8*, %struct.VEC_tree_gc*, %struct.VEC_tree_gc*, %struct.VEC_tree_gc*, %struct.VEC_tree_gc*) #3

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_asm_set_volatile(%union.gimple_statement_d* %gs, i8 zeroext %volatile_p) #0 !dbg !14945 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %volatile_p.addr = alloca i8, align 1
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !14946, metadata !DIExpression()), !dbg !14947
  store i8 %volatile_p, i8* %volatile_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %volatile_p.addr, metadata !14948, metadata !DIExpression()), !dbg !14949
  %0 = load i8, i8* %volatile_p.addr, align 1, !dbg !14950
  %tobool = icmp ne i8 %0, 0, !dbg !14950
  br i1 %tobool, label %if.then, label %if.else, !dbg !14952

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !14953
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !14954
  %2 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !14955
  %bf.load = load i32, i32* %2, align 8, !dbg !14956
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !14956
  %or = or i32 %bf.lshr, 2, !dbg !14956
  %bf.load1 = load i32, i32* %2, align 8, !dbg !14956
  %bf.value = and i32 %or, 65535, !dbg !14956
  %bf.shl = shl i32 %bf.value, 16, !dbg !14956
  %bf.clear = and i32 %bf.load1, 65535, !dbg !14956
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !14956
  store i32 %bf.set, i32* %2, align 8, !dbg !14956
  br label %if.end, !dbg !14953

if.else:                                          ; preds = %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !14957
  %gsbase2 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_base*, !dbg !14958
  %4 = bitcast %struct.gimple_statement_base* %gsbase2 to i32*, !dbg !14959
  %bf.load3 = load i32, i32* %4, align 8, !dbg !14960
  %bf.lshr4 = lshr i32 %bf.load3, 16, !dbg !14960
  %and = and i32 %bf.lshr4, -3, !dbg !14960
  %bf.load5 = load i32, i32* %4, align 8, !dbg !14960
  %bf.value6 = and i32 %and, 65535, !dbg !14960
  %bf.shl7 = shl i32 %bf.value6, 16, !dbg !14960
  %bf.clear8 = and i32 %bf.load5, 65535, !dbg !14960
  %bf.set9 = or i32 %bf.clear8, %bf.shl7, !dbg !14960
  store i32 %bf.set9, i32* %4, align 8, !dbg !14960
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !14961
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_asm_set_input(%union.gimple_statement_d* %gs, i8 zeroext %input_p) #0 !dbg !14962 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %input_p.addr = alloca i8, align 1
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !14963, metadata !DIExpression()), !dbg !14964
  store i8 %input_p, i8* %input_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %input_p.addr, metadata !14965, metadata !DIExpression()), !dbg !14966
  %0 = load i8, i8* %input_p.addr, align 1, !dbg !14967
  %tobool = icmp ne i8 %0, 0, !dbg !14967
  br i1 %tobool, label %if.then, label %if.else, !dbg !14969

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !14970
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !14971
  %2 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !14972
  %bf.load = load i32, i32* %2, align 8, !dbg !14973
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !14973
  %or = or i32 %bf.lshr, 1, !dbg !14973
  %bf.load1 = load i32, i32* %2, align 8, !dbg !14973
  %bf.value = and i32 %or, 65535, !dbg !14973
  %bf.shl = shl i32 %bf.value, 16, !dbg !14973
  %bf.clear = and i32 %bf.load1, 65535, !dbg !14973
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !14973
  store i32 %bf.set, i32* %2, align 8, !dbg !14973
  br label %if.end, !dbg !14970

if.else:                                          ; preds = %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !14974
  %gsbase2 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_base*, !dbg !14975
  %4 = bitcast %struct.gimple_statement_base* %gsbase2 to i32*, !dbg !14976
  %bf.load3 = load i32, i32* %4, align 8, !dbg !14977
  %bf.lshr4 = lshr i32 %bf.load3, 16, !dbg !14977
  %and = and i32 %bf.lshr4, -2, !dbg !14977
  %bf.load5 = load i32, i32* %4, align 8, !dbg !14977
  %bf.value6 = and i32 %and, 65535, !dbg !14977
  %bf.shl7 = shl i32 %bf.value6, 16, !dbg !14977
  %bf.clear8 = and i32 %bf.load5, 65535, !dbg !14977
  %bf.set9 = or i32 %bf.clear8, %bf.shl7, !dbg !14977
  store i32 %bf.set9, i32* %4, align 8, !dbg !14977
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !14978
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_gc_reserve(%struct.VEC_tree_gc** %vec_, i32 %alloc_) #0 !dbg !14979 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_gc**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_tree_gc** %vec_, %struct.VEC_tree_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_gc*** %vec_.addr, metadata !14982, metadata !DIExpression()), !dbg !14983
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !14984, metadata !DIExpression()), !dbg !14983
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !14985, metadata !DIExpression()), !dbg !14983
  %0 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !14983
  %1 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %0, align 8, !dbg !14983
  %tobool = icmp ne %struct.VEC_tree_gc* %1, null, !dbg !14983
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !14983

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !14983
  %3 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %2, align 8, !dbg !14983
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %3, i32 0, i32 0, !dbg !14983
  br label %cond.end, !dbg !14983

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !14983

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !14983
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !14983
  %call = call i32 @VEC_tree_base_space(%struct.VEC_tree_base* %cond, i32 %4), !dbg !14983
  %tobool1 = icmp ne i32 %call, 0, !dbg !14983
  %lnot = xor i1 %tobool1, true, !dbg !14983
  %lnot.ext = zext i1 %lnot to i32, !dbg !14983
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !14983
  %5 = load i32, i32* %extend, align 4, !dbg !14986
  %tobool2 = icmp ne i32 %5, 0, !dbg !14986
  br i1 %tobool2, label %if.then, label %if.end, !dbg !14983

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !14986
  %7 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %6, align 8, !dbg !14986
  %8 = bitcast %struct.VEC_tree_gc* %7 to i8*, !dbg !14986
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !14986
  %call3 = call i8* @vec_gc_p_reserve(i8* %8, i32 %9), !dbg !14986
  %10 = bitcast i8* %call3 to %struct.VEC_tree_gc*, !dbg !14986
  %11 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !14986
  store %struct.VEC_tree_gc* %10, %struct.VEC_tree_gc** %11, align 8, !dbg !14986
  br label %if.end, !dbg !14986

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !14983
  ret i32 %12, !dbg !14983
}

declare dso_local i8* @vec_gc_p_reserve(i8*, i32) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_try_kind(%union.gimple_statement_d* %gs) #0 !dbg !14988 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !14991, metadata !DIExpression()), !dbg !14992
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !14993
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !14994
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !14995
  %bf.load = load i32, i32* %1, align 8, !dbg !14995
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !14995
  %and = and i32 %bf.lshr, 3, !dbg !14996
  ret i32 %and, !dbg !14997
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gsi_one_before_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !14998 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !14999, metadata !DIExpression()), !dbg !15000
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !15001
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !15001
  %cmp = icmp ne %struct.gimple_seq_node_d* %0, null, !dbg !15002
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !15003

land.rhs:                                         ; preds = %entry
  %ptr1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !15004
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr1, align 8, !dbg !15004
  %next = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %1, i32 0, i32 2, !dbg !15005
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %next, align 8, !dbg !15005
  %cmp2 = icmp eq %struct.gimple_seq_node_d* %2, null, !dbg !15006
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %3 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !15007
  %land.ext = zext i1 %3 to i32, !dbg !15003
  %conv = trunc i32 %land.ext to i8, !dbg !15008
  ret i8 %conv, !dbg !15009
}

declare dso_local void @gsi_insert_seq_before_without_update(%struct.gimple_stmt_iterator*, %struct.gimple_seq_d*, i32) #3

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @gimple_wce_cleanup(%union.gimple_statement_d* %gs) #0 !dbg !15010 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !15011, metadata !DIExpression()), !dbg !15012
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !15013
  %gimple_wce = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_wce*, !dbg !15014
  %cleanup = getelementptr inbounds %struct.gimple_statement_wce, %struct.gimple_statement_wce* %gimple_wce, i32 0, i32 1, !dbg !15015
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %cleanup, align 8, !dbg !15015
  ret %struct.gimple_seq_d* %1, !dbg !15016
}

declare dso_local void @gsi_remove(%struct.gimple_stmt_iterator*, i8 zeroext) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_wce_cleanup_eh_only(%union.gimple_statement_d* %gs) #0 !dbg !15017 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !15018, metadata !DIExpression()), !dbg !15019
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !15020
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !15021
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !15022
  %bf.load = load i32, i32* %1, align 8, !dbg !15022
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !15022
  %cmp = icmp ne i32 %bf.lshr, 0, !dbg !15023
  %conv = zext i1 %cmp to i32, !dbg !15023
  %conv1 = trunc i32 %conv to i8, !dbg !15020
  ret i8 %conv1, !dbg !15024
}

declare dso_local %struct.gimple_seq_d* @gsi_split_seq_after(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8) #3

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d** @gsi_stmt_ptr(%struct.gimple_stmt_iterator* %i) #0 !dbg !15025 {
entry:
  %i.addr = alloca %struct.gimple_stmt_iterator*, align 8
  store %struct.gimple_stmt_iterator* %i, %struct.gimple_stmt_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %i.addr, metadata !15028, metadata !DIExpression()), !dbg !15029
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !15030
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %0, i32 0, i32 0, !dbg !15031
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !15031
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %1, i32 0, i32 0, !dbg !15032
  ret %union.gimple_statement_d** %stmt, !dbg !15033
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_push_cleanup(%union.tree_node* %var, %union.tree_node* %cleanup, i8 zeroext %eh_only, %struct.gimple_seq_d** %pre_p) #0 !dbg !15034 {
entry:
  %var.addr = alloca %union.tree_node*, align 8
  %cleanup.addr = alloca %union.tree_node*, align 8
  %eh_only.addr = alloca i8, align 1
  %pre_p.addr = alloca %struct.gimple_seq_d**, align 8
  %wce = alloca %union.gimple_statement_d*, align 8
  %cleanup_stmts = alloca %struct.gimple_seq_d*, align 8
  %flag = alloca %union.tree_node*, align 8
  %ffalse = alloca %union.gimple_statement_d*, align 8
  %ftrue = alloca %union.gimple_statement_d*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !15037, metadata !DIExpression()), !dbg !15038
  store %union.tree_node* %cleanup, %union.tree_node** %cleanup.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %cleanup.addr, metadata !15039, metadata !DIExpression()), !dbg !15040
  store i8 %eh_only, i8* %eh_only.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %eh_only.addr, metadata !15041, metadata !DIExpression()), !dbg !15042
  store %struct.gimple_seq_d** %pre_p, %struct.gimple_seq_d*** %pre_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %pre_p.addr, metadata !15043, metadata !DIExpression()), !dbg !15044
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %wce, metadata !15045, metadata !DIExpression()), !dbg !15046
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %cleanup_stmts, metadata !15047, metadata !DIExpression()), !dbg !15048
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %cleanup_stmts, align 8, !dbg !15048
  %0 = load %struct.diagnostic_context*, %struct.diagnostic_context** @global_dc, align 8, !dbg !15049
  %diagnostic_count = getelementptr inbounds %struct.diagnostic_context, %struct.diagnostic_context* %0, i32 0, i32 1, !dbg !15049
  %arrayidx = getelementptr inbounds [12 x i32], [12 x i32]* %diagnostic_count, i64 0, i64 4, !dbg !15049
  %1 = load i32, i32* %arrayidx, align 8, !dbg !15049
  %tobool = icmp ne i32 %1, 0, !dbg !15049
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !15051

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.diagnostic_context*, %struct.diagnostic_context** @global_dc, align 8, !dbg !15052
  %diagnostic_count1 = getelementptr inbounds %struct.diagnostic_context, %struct.diagnostic_context* %2, i32 0, i32 1, !dbg !15052
  %arrayidx2 = getelementptr inbounds [12 x i32], [12 x i32]* %diagnostic_count1, i64 0, i64 5, !dbg !15052
  %3 = load i32, i32* %arrayidx2, align 4, !dbg !15052
  %tobool3 = icmp ne i32 %3, 0, !dbg !15052
  br i1 %tobool3, label %if.then, label %if.end, !dbg !15053

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %if.end15, !dbg !15054

if.end:                                           ; preds = %lor.lhs.false
  %call = call zeroext i8 @gimple_conditional_context(), !dbg !15055
  %tobool4 = icmp ne i8 %call, 0, !dbg !15055
  br i1 %tobool4, label %if.then5, label %if.else, !dbg !15057

if.then5:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %flag, metadata !15058, metadata !DIExpression()), !dbg !15060
  %4 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !15061
  %call6 = call %union.tree_node* @create_tmp_var(%union.tree_node* %4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i64 0, i64 0)), !dbg !15062
  store %union.tree_node* %call6, %union.tree_node** %flag, align 8, !dbg !15060
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %ffalse, metadata !15063, metadata !DIExpression()), !dbg !15064
  %5 = load %union.tree_node*, %union.tree_node** %flag, align 8, !dbg !15065
  %6 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 25), align 8, !dbg !15065
  %call7 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %5, %union.tree_node* %6), !dbg !15065
  store %union.gimple_statement_d* %call7, %union.gimple_statement_d** %ffalse, align 8, !dbg !15064
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %ftrue, metadata !15066, metadata !DIExpression()), !dbg !15067
  %7 = load %union.tree_node*, %union.tree_node** %flag, align 8, !dbg !15068
  %8 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !dbg !15068
  %call8 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %7, %union.tree_node* %8), !dbg !15068
  store %union.gimple_statement_d* %call8, %union.gimple_statement_d** %ftrue, align 8, !dbg !15067
  %9 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !15069
  %10 = load %union.tree_node*, %union.tree_node** %flag, align 8, !dbg !15069
  %11 = load %union.tree_node*, %union.tree_node** %cleanup.addr, align 8, !dbg !15069
  %call9 = call %union.tree_node* @build3_stat(i32 56, %union.tree_node* %9, %union.tree_node* %10, %union.tree_node* %11, %union.tree_node* null), !dbg !15069
  store %union.tree_node* %call9, %union.tree_node** %cleanup.addr, align 8, !dbg !15070
  %call10 = call zeroext i8 @gimplify_stmt(%union.tree_node** %cleanup.addr, %struct.gimple_seq_d** %cleanup_stmts), !dbg !15071
  %12 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %cleanup_stmts, align 8, !dbg !15072
  %call11 = call %union.gimple_statement_d* @gimple_build_wce(%struct.gimple_seq_d* %12), !dbg !15073
  store %union.gimple_statement_d* %call11, %union.gimple_statement_d** %wce, align 8, !dbg !15074
  %13 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !15075
  %conditional_cleanups = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %13, i32 0, i32 3, !dbg !15076
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %ffalse, align 8, !dbg !15077
  call void @gimplify_seq_add_stmt(%struct.gimple_seq_d** %conditional_cleanups, %union.gimple_statement_d* %14), !dbg !15078
  %15 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !15079
  %conditional_cleanups12 = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %15, i32 0, i32 3, !dbg !15080
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %wce, align 8, !dbg !15081
  call void @gimplify_seq_add_stmt(%struct.gimple_seq_d** %conditional_cleanups12, %union.gimple_statement_d* %16), !dbg !15082
  %17 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !15083
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %ftrue, align 8, !dbg !15084
  call void @gimplify_seq_add_stmt(%struct.gimple_seq_d** %17, %union.gimple_statement_d* %18), !dbg !15085
  %19 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !15086
  %base = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !15086
  %20 = bitcast %struct.tree_base* %base to i64*, !dbg !15086
  %bf.load = load i64, i64* %20, align 8, !dbg !15087
  %bf.clear = and i64 %bf.load, -8388609, !dbg !15087
  %bf.set = or i64 %bf.clear, 8388608, !dbg !15087
  store i64 %bf.set, i64* %20, align 8, !dbg !15087
  br label %if.end15, !dbg !15088

if.else:                                          ; preds = %if.end
  %call13 = call zeroext i8 @gimplify_stmt(%union.tree_node** %cleanup.addr, %struct.gimple_seq_d** %cleanup_stmts), !dbg !15089
  %21 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %cleanup_stmts, align 8, !dbg !15091
  %call14 = call %union.gimple_statement_d* @gimple_build_wce(%struct.gimple_seq_d* %21), !dbg !15092
  store %union.gimple_statement_d* %call14, %union.gimple_statement_d** %wce, align 8, !dbg !15093
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %wce, align 8, !dbg !15094
  %23 = load i8, i8* %eh_only.addr, align 1, !dbg !15095
  call void @gimple_wce_set_cleanup_eh_only(%union.gimple_statement_d* %22, i8 zeroext %23), !dbg !15096
  %24 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !15097
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %wce, align 8, !dbg !15098
  call void @gimplify_seq_add_stmt(%struct.gimple_seq_d** %24, %union.gimple_statement_d* %25), !dbg !15099
  br label %if.end15

if.end15:                                         ; preds = %if.then, %if.else, %if.then5
  ret void, !dbg !15100
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_conditional_context() #0 !dbg !15101 {
entry:
  %0 = load %struct.gimplify_ctx*, %struct.gimplify_ctx** @gimplify_ctxp, align 8, !dbg !15102
  %conditions = getelementptr inbounds %struct.gimplify_ctx, %struct.gimplify_ctx* %0, i32 0, i32 8, !dbg !15103
  %1 = load i32, i32* %conditions, align 8, !dbg !15103
  %cmp = icmp sgt i32 %1, 0, !dbg !15104
  %conv = zext i1 %cmp to i32, !dbg !15104
  %conv1 = trunc i32 %conv to i8, !dbg !15102
  ret i8 %conv1, !dbg !15105
}

declare dso_local %union.gimple_statement_d* @gimple_build_wce(%struct.gimple_seq_d*) #3

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_wce_set_cleanup_eh_only(%union.gimple_statement_d* %gs, i8 zeroext %eh_only_p) #0 !dbg !15106 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %eh_only_p.addr = alloca i8, align 1
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !15107, metadata !DIExpression()), !dbg !15108
  store i8 %eh_only_p, i8* %eh_only_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %eh_only_p.addr, metadata !15109, metadata !DIExpression()), !dbg !15110
  %0 = load i8, i8* %eh_only_p.addr, align 1, !dbg !15111
  %conv = zext i8 %0 to i32, !dbg !15112
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !15113
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !15114
  %2 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !15115
  %bf.load = load i32, i32* %2, align 8, !dbg !15116
  %bf.value = and i32 %conv, 65535, !dbg !15116
  %bf.shl = shl i32 %bf.value, 16, !dbg !15116
  %bf.clear = and i32 %bf.load, 65535, !dbg !15116
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !15116
  store i32 %bf.set, i32* %2, align 8, !dbg !15116
  ret void, !dbg !15117
}

; Function Attrs: noinline nounwind uwtable
define internal { %struct.tree_statement_list_node*, %union.tree_node* } @tsi_start(%union.tree_node* %t) #0 !dbg !15118 {
entry:
  %retval = alloca %struct.tree_stmt_iterator, align 8
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !15119, metadata !DIExpression()), !dbg !15120
  call void @llvm.dbg.declare(metadata %struct.tree_stmt_iterator* %retval, metadata !15121, metadata !DIExpression()), !dbg !15122
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !15123
  %stmt_list = bitcast %union.tree_node* %0 to %struct.tree_statement_list*, !dbg !15123
  %head = getelementptr inbounds %struct.tree_statement_list, %struct.tree_statement_list* %stmt_list, i32 0, i32 1, !dbg !15123
  %1 = load %struct.tree_statement_list_node*, %struct.tree_statement_list_node** %head, align 8, !dbg !15123
  %ptr = getelementptr inbounds %struct.tree_stmt_iterator, %struct.tree_stmt_iterator* %retval, i32 0, i32 0, !dbg !15124
  store %struct.tree_statement_list_node* %1, %struct.tree_statement_list_node** %ptr, align 8, !dbg !15125
  %2 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !15126
  %container = getelementptr inbounds %struct.tree_stmt_iterator, %struct.tree_stmt_iterator* %retval, i32 0, i32 1, !dbg !15127
  store %union.tree_node* %2, %union.tree_node** %container, align 8, !dbg !15128
  %3 = bitcast %struct.tree_stmt_iterator* %retval to { %struct.tree_statement_list_node*, %union.tree_node* }*, !dbg !15129
  %4 = load { %struct.tree_statement_list_node*, %union.tree_node* }, { %struct.tree_statement_list_node*, %union.tree_node* }* %3, align 8, !dbg !15129
  ret { %struct.tree_statement_list_node*, %union.tree_node* } %4, !dbg !15129
}

declare dso_local void @tsi_delink(%struct.tree_stmt_iterator*) #3

declare dso_local void @set_decl_rtl(%union.tree_node*, %struct.rtx_def*) #3

; Function Attrs: noinline nounwind uwtable
define internal void @gimplify_scan_omp_clauses(%union.tree_node** %list_p, %struct.gimple_seq_d** %pre_p, i32 %region_type) #0 !dbg !15130 {
entry:
  %list_p.addr = alloca %union.tree_node**, align 8
  %pre_p.addr = alloca %struct.gimple_seq_d**, align 8
  %region_type.addr = alloca i32, align 4
  %ctx = alloca %struct.gimplify_omp_ctx*, align 8
  %outer_ctx = alloca %struct.gimplify_omp_ctx*, align 8
  %gctx = alloca %struct.gimplify_ctx, align 8
  %c = alloca %union.tree_node*, align 8
  %remove = alloca i8, align 1
  %notice_outer = alloca i8, align 1
  %check_non_private = alloca i8*, align 8
  %flags = alloca i32, align 4
  %decl = alloca %union.tree_node*, align 8
  %bind = alloca %union.tree_node*, align 8
  store %union.tree_node** %list_p, %union.tree_node*** %list_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %list_p.addr, metadata !15133, metadata !DIExpression()), !dbg !15134
  store %struct.gimple_seq_d** %pre_p, %struct.gimple_seq_d*** %pre_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %pre_p.addr, metadata !15135, metadata !DIExpression()), !dbg !15136
  store i32 %region_type, i32* %region_type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %region_type.addr, metadata !15137, metadata !DIExpression()), !dbg !15138
  call void @llvm.dbg.declare(metadata %struct.gimplify_omp_ctx** %ctx, metadata !15139, metadata !DIExpression()), !dbg !15140
  call void @llvm.dbg.declare(metadata %struct.gimplify_omp_ctx** %outer_ctx, metadata !15141, metadata !DIExpression()), !dbg !15142
  call void @llvm.dbg.declare(metadata %struct.gimplify_ctx* %gctx, metadata !15143, metadata !DIExpression()), !dbg !15144
  call void @llvm.dbg.declare(metadata %union.tree_node** %c, metadata !15145, metadata !DIExpression()), !dbg !15146
  %0 = load i32, i32* %region_type.addr, align 4, !dbg !15147
  %call = call %struct.gimplify_omp_ctx* @new_omp_context(i32 %0), !dbg !15148
  store %struct.gimplify_omp_ctx* %call, %struct.gimplify_omp_ctx** %ctx, align 8, !dbg !15149
  %1 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx, align 8, !dbg !15150
  %outer_context = getelementptr inbounds %struct.gimplify_omp_ctx, %struct.gimplify_omp_ctx* %1, i32 0, i32 0, !dbg !15151
  %2 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %outer_context, align 8, !dbg !15151
  store %struct.gimplify_omp_ctx* %2, %struct.gimplify_omp_ctx** %outer_ctx, align 8, !dbg !15152
  br label %while.cond, !dbg !15153

while.cond:                                       ; preds = %if.end148, %entry
  %3 = load %union.tree_node**, %union.tree_node*** %list_p.addr, align 8, !dbg !15154
  %4 = load %union.tree_node*, %union.tree_node** %3, align 8, !dbg !15155
  store %union.tree_node* %4, %union.tree_node** %c, align 8, !dbg !15156
  %cmp = icmp ne %union.tree_node* %4, null, !dbg !15157
  br i1 %cmp, label %while.body, label %while.end, !dbg !15153

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i8* %remove, metadata !15158, metadata !DIExpression()), !dbg !15160
  store i8 0, i8* %remove, align 1, !dbg !15160
  call void @llvm.dbg.declare(metadata i8* %notice_outer, metadata !15161, metadata !DIExpression()), !dbg !15162
  store i8 1, i8* %notice_outer, align 1, !dbg !15162
  call void @llvm.dbg.declare(metadata i8** %check_non_private, metadata !15163, metadata !DIExpression()), !dbg !15164
  store i8* null, i8** %check_non_private, align 8, !dbg !15164
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !15165, metadata !DIExpression()), !dbg !15166
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !15167, metadata !DIExpression()), !dbg !15168
  %5 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15169
  %omp_clause = bitcast %union.tree_node* %5 to %struct.tree_omp_clause*, !dbg !15169
  %code = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause, i32 0, i32 2, !dbg !15169
  %6 = load i32, i32* %code, align 4, !dbg !15169
  switch i32 %6, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb3
    i32 3, label %sw.bb4
    i32 4, label %sw.bb5
    i32 5, label %sw.bb6
    i32 6, label %sw.bb98
    i32 7, label %sw.bb98
    i32 8, label %sw.bb121
    i32 10, label %sw.bb129
    i32 9, label %sw.bb129
    i32 11, label %sw.bb138
    i32 12, label %sw.bb138
    i32 15, label %sw.bb138
    i32 14, label %sw.bb138
    i32 13, label %sw.bb139
  ], !dbg !15170

sw.bb:                                            ; preds = %while.body
  store i32 10, i32* %flags, align 4, !dbg !15171
  %7 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 33, i32 14), align 8, !dbg !15173
  %8 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15175
  %omp_clause1 = bitcast %union.tree_node* %8 to %struct.tree_omp_clause*, !dbg !15175
  %ops = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause1, i32 0, i32 6, !dbg !15175
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %ops, i64 0, i64 0, !dbg !15175
  %9 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !15175
  %call2 = call zeroext i8 %7(%union.tree_node* %9), !dbg !15176
  %tobool = icmp ne i8 %call2, 0, !dbg !15176
  br i1 %tobool, label %if.then, label %if.else, !dbg !15177

if.then:                                          ; preds = %sw.bb
  %10 = load i32, i32* %flags, align 4, !dbg !15178
  %or = or i32 %10, 512, !dbg !15178
  store i32 %or, i32* %flags, align 4, !dbg !15178
  %11 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15180
  %base = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !15180
  %12 = bitcast %struct.tree_base* %base to i64*, !dbg !15180
  %bf.load = load i64, i64* %12, align 8, !dbg !15181
  %bf.clear = and i64 %bf.load, -268435457, !dbg !15181
  %bf.set = or i64 %bf.clear, 268435456, !dbg !15181
  store i64 %bf.set, i64* %12, align 8, !dbg !15181
  br label %if.end, !dbg !15182

if.else:                                          ; preds = %sw.bb
  store i8 0, i8* %notice_outer, align 1, !dbg !15183
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %do_add, !dbg !15184

sw.bb3:                                           ; preds = %while.body
  store i32 6, i32* %flags, align 4, !dbg !15185
  br label %do_add, !dbg !15186

sw.bb4:                                           ; preds = %while.body
  store i32 18, i32* %flags, align 4, !dbg !15187
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.20, i64 0, i64 0), i8** %check_non_private, align 8, !dbg !15188
  br label %do_add, !dbg !15189

sw.bb5:                                           ; preds = %while.body
  store i32 35, i32* %flags, align 4, !dbg !15190
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.21, i64 0, i64 0), i8** %check_non_private, align 8, !dbg !15191
  br label %do_add, !dbg !15192

sw.bb6:                                           ; preds = %while.body
  store i32 67, i32* %flags, align 4, !dbg !15193
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.22, i64 0, i64 0), i8** %check_non_private, align 8, !dbg !15194
  br label %do_add, !dbg !15195

do_add:                                           ; preds = %sw.bb6, %sw.bb5, %sw.bb4, %sw.bb3, %if.end
  call void @llvm.dbg.label(metadata !15196), !dbg !15197
  %13 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15198
  %omp_clause7 = bitcast %union.tree_node* %13 to %struct.tree_omp_clause*, !dbg !15198
  %ops8 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause7, i32 0, i32 6, !dbg !15198
  %arrayidx9 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %ops8, i64 0, i64 0, !dbg !15198
  %14 = load %union.tree_node*, %union.tree_node** %arrayidx9, align 8, !dbg !15198
  store %union.tree_node* %14, %union.tree_node** %decl, align 8, !dbg !15199
  %15 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !15200
  %16 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !15202
  %cmp10 = icmp eq %union.tree_node* %15, %16, !dbg !15203
  br i1 %cmp10, label %if.then12, label %lor.lhs.false, !dbg !15204

lor.lhs.false:                                    ; preds = %do_add
  %17 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !15205
  %common = bitcast %union.tree_node* %17 to %struct.tree_common*, !dbg !15205
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !15205
  %18 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !15205
  %19 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !15206
  %cmp11 = icmp eq %union.tree_node* %18, %19, !dbg !15207
  br i1 %cmp11, label %if.then12, label %if.end13, !dbg !15208

if.then12:                                        ; preds = %lor.lhs.false, %do_add
  store i8 1, i8* %remove, align 1, !dbg !15209
  br label %sw.epilog, !dbg !15211

if.end13:                                         ; preds = %lor.lhs.false
  %20 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx, align 8, !dbg !15212
  %21 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !15213
  %22 = load i32, i32* %flags, align 4, !dbg !15214
  call void @omp_add_variable(%struct.gimplify_omp_ctx* %20, %union.tree_node* %21, i32 %22), !dbg !15215
  %23 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15216
  %omp_clause14 = bitcast %union.tree_node* %23 to %struct.tree_omp_clause*, !dbg !15216
  %code15 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause14, i32 0, i32 2, !dbg !15216
  %24 = load i32, i32* %code15, align 4, !dbg !15216
  %cmp16 = icmp eq i32 %24, 5, !dbg !15218
  br i1 %cmp16, label %land.lhs.true, label %if.else51, !dbg !15219

land.lhs.true:                                    ; preds = %if.end13
  %25 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15220
  %omp_clause17 = bitcast %union.tree_node* %25 to %struct.tree_omp_clause*, !dbg !15220
  %ops18 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause17, i32 0, i32 6, !dbg !15220
  %arrayidx19 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %ops18, i64 0, i64 3, !dbg !15220
  %26 = load %union.tree_node*, %union.tree_node** %arrayidx19, align 8, !dbg !15220
  %tobool20 = icmp ne %union.tree_node* %26, null, !dbg !15220
  br i1 %tobool20, label %if.then21, label %if.else51, !dbg !15221

if.then21:                                        ; preds = %land.lhs.true
  %27 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx, align 8, !dbg !15222
  %28 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15224
  %omp_clause22 = bitcast %union.tree_node* %28 to %struct.tree_omp_clause*, !dbg !15224
  %ops23 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause22, i32 0, i32 6, !dbg !15224
  %arrayidx24 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %ops23, i64 0, i64 3, !dbg !15224
  %29 = load %union.tree_node*, %union.tree_node** %arrayidx24, align 8, !dbg !15224
  call void @omp_add_variable(%struct.gimplify_omp_ctx* %27, %union.tree_node* %29, i32 129), !dbg !15225
  %30 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx, align 8, !dbg !15226
  store %struct.gimplify_omp_ctx* %30, %struct.gimplify_omp_ctx** @gimplify_omp_ctxp, align 8, !dbg !15227
  call void @push_gimplify_context(%struct.gimplify_ctx* %gctx), !dbg !15228
  %call25 = call %struct.gimple_seq_d* @gimple_seq_alloc(), !dbg !15229
  %31 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15230
  %omp_clause26 = bitcast %union.tree_node* %31 to %struct.tree_omp_clause*, !dbg !15230
  %gimple_reduction_init = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause26, i32 0, i32 4, !dbg !15230
  store %struct.gimple_seq_d* %call25, %struct.gimple_seq_d** %gimple_reduction_init, align 8, !dbg !15231
  %call27 = call %struct.gimple_seq_d* @gimple_seq_alloc(), !dbg !15232
  %32 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15233
  %omp_clause28 = bitcast %union.tree_node* %32 to %struct.tree_omp_clause*, !dbg !15233
  %gimple_reduction_merge = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause28, i32 0, i32 5, !dbg !15233
  store %struct.gimple_seq_d* %call27, %struct.gimple_seq_d** %gimple_reduction_merge, align 8, !dbg !15234
  %33 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15235
  %omp_clause29 = bitcast %union.tree_node* %33 to %struct.tree_omp_clause*, !dbg !15235
  %ops30 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause29, i32 0, i32 6, !dbg !15235
  %arrayidx31 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %ops30, i64 0, i64 1, !dbg !15235
  %34 = load %union.tree_node*, %union.tree_node** %arrayidx31, align 8, !dbg !15235
  %35 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15236
  %omp_clause32 = bitcast %union.tree_node* %35 to %struct.tree_omp_clause*, !dbg !15236
  %gimple_reduction_init33 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause32, i32 0, i32 4, !dbg !15236
  call void @gimplify_and_add(%union.tree_node* %34, %struct.gimple_seq_d** %gimple_reduction_init33), !dbg !15237
  %36 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15238
  %omp_clause34 = bitcast %union.tree_node* %36 to %struct.tree_omp_clause*, !dbg !15238
  %gimple_reduction_init35 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause34, i32 0, i32 4, !dbg !15238
  %37 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %gimple_reduction_init35, align 8, !dbg !15238
  %call36 = call %union.gimple_statement_d* @gimple_seq_first_stmt(%struct.gimple_seq_d* %37), !dbg !15239
  call void @pop_gimplify_context(%union.gimple_statement_d* %call36), !dbg !15240
  call void @push_gimplify_context(%struct.gimplify_ctx* %gctx), !dbg !15241
  %38 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15242
  %omp_clause37 = bitcast %union.tree_node* %38 to %struct.tree_omp_clause*, !dbg !15242
  %ops38 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause37, i32 0, i32 6, !dbg !15242
  %arrayidx39 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %ops38, i64 0, i64 2, !dbg !15242
  %39 = load %union.tree_node*, %union.tree_node** %arrayidx39, align 8, !dbg !15242
  %40 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15243
  %omp_clause40 = bitcast %union.tree_node* %40 to %struct.tree_omp_clause*, !dbg !15243
  %gimple_reduction_merge41 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause40, i32 0, i32 5, !dbg !15243
  call void @gimplify_and_add(%union.tree_node* %39, %struct.gimple_seq_d** %gimple_reduction_merge41), !dbg !15244
  %41 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15245
  %omp_clause42 = bitcast %union.tree_node* %41 to %struct.tree_omp_clause*, !dbg !15245
  %gimple_reduction_merge43 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause42, i32 0, i32 5, !dbg !15245
  %42 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %gimple_reduction_merge43, align 8, !dbg !15245
  %call44 = call %union.gimple_statement_d* @gimple_seq_first_stmt(%struct.gimple_seq_d* %42), !dbg !15246
  call void @pop_gimplify_context(%union.gimple_statement_d* %call44), !dbg !15247
  %43 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15248
  %omp_clause45 = bitcast %union.tree_node* %43 to %struct.tree_omp_clause*, !dbg !15248
  %ops46 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause45, i32 0, i32 6, !dbg !15248
  %arrayidx47 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %ops46, i64 0, i64 1, !dbg !15248
  store %union.tree_node* null, %union.tree_node** %arrayidx47, align 8, !dbg !15249
  %44 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15250
  %omp_clause48 = bitcast %union.tree_node* %44 to %struct.tree_omp_clause*, !dbg !15250
  %ops49 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause48, i32 0, i32 6, !dbg !15250
  %arrayidx50 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %ops49, i64 0, i64 2, !dbg !15250
  store %union.tree_node* null, %union.tree_node** %arrayidx50, align 8, !dbg !15251
  %45 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %outer_ctx, align 8, !dbg !15252
  store %struct.gimplify_omp_ctx* %45, %struct.gimplify_omp_ctx** @gimplify_omp_ctxp, align 8, !dbg !15253
  br label %if.end94, !dbg !15254

if.else51:                                        ; preds = %land.lhs.true, %if.end13
  %46 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15255
  %omp_clause52 = bitcast %union.tree_node* %46 to %struct.tree_omp_clause*, !dbg !15255
  %code53 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause52, i32 0, i32 2, !dbg !15255
  %47 = load i32, i32* %code53, align 4, !dbg !15255
  %cmp54 = icmp eq i32 %47, 4, !dbg !15257
  br i1 %cmp54, label %land.lhs.true55, label %if.end93, !dbg !15258

land.lhs.true55:                                  ; preds = %if.else51
  %48 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15259
  %omp_clause56 = bitcast %union.tree_node* %48 to %struct.tree_omp_clause*, !dbg !15259
  %ops57 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause56, i32 0, i32 6, !dbg !15259
  %arrayidx58 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %ops57, i64 0, i64 1, !dbg !15259
  %49 = load %union.tree_node*, %union.tree_node** %arrayidx58, align 8, !dbg !15259
  %tobool59 = icmp ne %union.tree_node* %49, null, !dbg !15259
  br i1 %tobool59, label %if.then60, label %if.end93, !dbg !15260

if.then60:                                        ; preds = %land.lhs.true55
  %50 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx, align 8, !dbg !15261
  store %struct.gimplify_omp_ctx* %50, %struct.gimplify_omp_ctx** @gimplify_omp_ctxp, align 8, !dbg !15263
  call void @push_gimplify_context(%struct.gimplify_ctx* %gctx), !dbg !15264
  %51 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15265
  %omp_clause61 = bitcast %union.tree_node* %51 to %struct.tree_omp_clause*, !dbg !15265
  %ops62 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause61, i32 0, i32 6, !dbg !15265
  %arrayidx63 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %ops62, i64 0, i64 1, !dbg !15265
  %52 = load %union.tree_node*, %union.tree_node** %arrayidx63, align 8, !dbg !15265
  %base64 = bitcast %union.tree_node* %52 to %struct.tree_base*, !dbg !15265
  %53 = bitcast %struct.tree_base* %base64 to i64*, !dbg !15265
  %bf.load65 = load i64, i64* %53, align 8, !dbg !15265
  %bf.clear66 = and i64 %bf.load65, 65535, !dbg !15265
  %bf.cast = trunc i64 %bf.clear66 to i32, !dbg !15265
  %cmp67 = icmp ne i32 %bf.cast, 58, !dbg !15267
  br i1 %cmp67, label %if.then68, label %if.end81, !dbg !15268

if.then68:                                        ; preds = %if.then60
  call void @llvm.dbg.declare(metadata %union.tree_node** %bind, metadata !15269, metadata !DIExpression()), !dbg !15271
  %54 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !15272
  %call69 = call %union.tree_node* @build3_stat(i32 58, %union.tree_node* %54, %union.tree_node* null, %union.tree_node* null, %union.tree_node* null), !dbg !15272
  store %union.tree_node* %call69, %union.tree_node** %bind, align 8, !dbg !15271
  %55 = load %union.tree_node*, %union.tree_node** %bind, align 8, !dbg !15273
  %base70 = bitcast %union.tree_node* %55 to %struct.tree_base*, !dbg !15273
  %56 = bitcast %struct.tree_base* %base70 to i64*, !dbg !15273
  %bf.load71 = load i64, i64* %56, align 8, !dbg !15274
  %bf.clear72 = and i64 %bf.load71, -65537, !dbg !15274
  %bf.set73 = or i64 %bf.clear72, 65536, !dbg !15274
  store i64 %bf.set73, i64* %56, align 8, !dbg !15274
  %57 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15275
  %omp_clause74 = bitcast %union.tree_node* %57 to %struct.tree_omp_clause*, !dbg !15275
  %ops75 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause74, i32 0, i32 6, !dbg !15275
  %arrayidx76 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %ops75, i64 0, i64 1, !dbg !15275
  %58 = load %union.tree_node*, %union.tree_node** %arrayidx76, align 8, !dbg !15275
  %59 = load %union.tree_node*, %union.tree_node** %bind, align 8, !dbg !15276
  %exp = bitcast %union.tree_node* %59 to %struct.tree_exp*, !dbg !15276
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !15276
  %arrayidx77 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !15276
  store %union.tree_node* %58, %union.tree_node** %arrayidx77, align 8, !dbg !15277
  %60 = load %union.tree_node*, %union.tree_node** %bind, align 8, !dbg !15278
  %61 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15279
  %omp_clause78 = bitcast %union.tree_node* %61 to %struct.tree_omp_clause*, !dbg !15279
  %ops79 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause78, i32 0, i32 6, !dbg !15279
  %arrayidx80 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %ops79, i64 0, i64 1, !dbg !15279
  store %union.tree_node* %60, %union.tree_node** %arrayidx80, align 8, !dbg !15280
  br label %if.end81, !dbg !15281

if.end81:                                         ; preds = %if.then68, %if.then60
  %62 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15282
  %omp_clause82 = bitcast %union.tree_node* %62 to %struct.tree_omp_clause*, !dbg !15282
  %ops83 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause82, i32 0, i32 6, !dbg !15282
  %arrayidx84 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %ops83, i64 0, i64 1, !dbg !15282
  %63 = load %union.tree_node*, %union.tree_node** %arrayidx84, align 8, !dbg !15282
  %64 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15283
  %omp_clause85 = bitcast %union.tree_node* %64 to %struct.tree_omp_clause*, !dbg !15283
  %gimple_reduction_init86 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause85, i32 0, i32 4, !dbg !15283
  call void @gimplify_and_add(%union.tree_node* %63, %struct.gimple_seq_d** %gimple_reduction_init86), !dbg !15284
  %65 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15285
  %omp_clause87 = bitcast %union.tree_node* %65 to %struct.tree_omp_clause*, !dbg !15285
  %gimple_reduction_init88 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause87, i32 0, i32 4, !dbg !15285
  %66 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %gimple_reduction_init88, align 8, !dbg !15285
  %call89 = call %union.gimple_statement_d* @gimple_seq_first_stmt(%struct.gimple_seq_d* %66), !dbg !15286
  call void @pop_gimplify_context(%union.gimple_statement_d* %call89), !dbg !15287
  %67 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15288
  %omp_clause90 = bitcast %union.tree_node* %67 to %struct.tree_omp_clause*, !dbg !15288
  %ops91 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause90, i32 0, i32 6, !dbg !15288
  %arrayidx92 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %ops91, i64 0, i64 1, !dbg !15288
  store %union.tree_node* null, %union.tree_node** %arrayidx92, align 8, !dbg !15289
  %68 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %outer_ctx, align 8, !dbg !15290
  store %struct.gimplify_omp_ctx* %68, %struct.gimplify_omp_ctx** @gimplify_omp_ctxp, align 8, !dbg !15291
  br label %if.end93, !dbg !15292

if.end93:                                         ; preds = %if.end81, %land.lhs.true55, %if.else51
  br label %if.end94

if.end94:                                         ; preds = %if.end93, %if.then21
  %69 = load i8, i8* %notice_outer, align 1, !dbg !15293
  %tobool95 = icmp ne i8 %69, 0, !dbg !15293
  br i1 %tobool95, label %if.then96, label %if.end97, !dbg !15295

if.then96:                                        ; preds = %if.end94
  br label %do_notice, !dbg !15296

if.end97:                                         ; preds = %if.end94
  br label %sw.epilog, !dbg !15297

sw.bb98:                                          ; preds = %while.body, %while.body
  %70 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15298
  %omp_clause99 = bitcast %union.tree_node* %70 to %struct.tree_omp_clause*, !dbg !15298
  %ops100 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause99, i32 0, i32 6, !dbg !15298
  %arrayidx101 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %ops100, i64 0, i64 0, !dbg !15298
  %71 = load %union.tree_node*, %union.tree_node** %arrayidx101, align 8, !dbg !15298
  store %union.tree_node* %71, %union.tree_node** %decl, align 8, !dbg !15299
  %72 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !15300
  %73 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !15302
  %cmp102 = icmp eq %union.tree_node* %72, %73, !dbg !15303
  br i1 %cmp102, label %if.then107, label %lor.lhs.false103, !dbg !15304

lor.lhs.false103:                                 ; preds = %sw.bb98
  %74 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !15305
  %common104 = bitcast %union.tree_node* %74 to %struct.tree_common*, !dbg !15305
  %type105 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common104, i32 0, i32 2, !dbg !15305
  %75 = load %union.tree_node*, %union.tree_node** %type105, align 8, !dbg !15305
  %76 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !15306
  %cmp106 = icmp eq %union.tree_node* %75, %76, !dbg !15307
  br i1 %cmp106, label %if.then107, label %if.end108, !dbg !15308

if.then107:                                       ; preds = %lor.lhs.false103, %sw.bb98
  store i8 1, i8* %remove, align 1, !dbg !15309
  br label %sw.epilog, !dbg !15311

if.end108:                                        ; preds = %lor.lhs.false103
  br label %do_notice, !dbg !15306

do_notice:                                        ; preds = %if.end108, %if.then96
  call void @llvm.dbg.label(metadata !15312), !dbg !15313
  %77 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %outer_ctx, align 8, !dbg !15314
  %tobool109 = icmp ne %struct.gimplify_omp_ctx* %77, null, !dbg !15314
  br i1 %tobool109, label %if.then110, label %if.end112, !dbg !15316

if.then110:                                       ; preds = %do_notice
  %78 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %outer_ctx, align 8, !dbg !15317
  %79 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !15318
  %call111 = call zeroext i8 @omp_notice_variable(%struct.gimplify_omp_ctx* %78, %union.tree_node* %79, i8 zeroext 1), !dbg !15319
  br label %if.end112, !dbg !15319

if.end112:                                        ; preds = %if.then110, %do_notice
  %80 = load i8*, i8** %check_non_private, align 8, !dbg !15320
  %tobool113 = icmp ne i8* %80, null, !dbg !15320
  br i1 %tobool113, label %land.lhs.true114, label %if.end120, !dbg !15322

land.lhs.true114:                                 ; preds = %if.end112
  %81 = load i32, i32* %region_type.addr, align 4, !dbg !15323
  %cmp115 = icmp eq i32 %81, 0, !dbg !15324
  br i1 %cmp115, label %land.lhs.true116, label %if.end120, !dbg !15325

land.lhs.true116:                                 ; preds = %land.lhs.true114
  %82 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx, align 8, !dbg !15326
  %83 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !15327
  %call117 = call zeroext i8 @omp_check_private(%struct.gimplify_omp_ctx* %82, %union.tree_node* %83), !dbg !15328
  %conv = zext i8 %call117 to i32, !dbg !15328
  %tobool118 = icmp ne i32 %conv, 0, !dbg !15328
  br i1 %tobool118, label %if.then119, label %if.end120, !dbg !15329

if.then119:                                       ; preds = %land.lhs.true116
  %84 = load i8*, i8** %check_non_private, align 8, !dbg !15330
  %85 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !15332
  %decl_minimal = bitcast %union.tree_node* %85 to %struct.tree_decl_minimal*, !dbg !15332
  %name = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 3, !dbg !15332
  %86 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !15332
  call void (i8*, ...) @error(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.23, i64 0, i64 0), i8* %84, %union.tree_node* %86), !dbg !15333
  store i8 1, i8* %remove, align 1, !dbg !15334
  br label %if.end120, !dbg !15335

if.end120:                                        ; preds = %if.then119, %land.lhs.true116, %land.lhs.true114, %if.end112
  br label %sw.epilog, !dbg !15336

sw.bb121:                                         ; preds = %while.body
  %87 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15337
  %omp_clause122 = bitcast %union.tree_node* %87 to %struct.tree_omp_clause*, !dbg !15337
  %ops123 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause122, i32 0, i32 6, !dbg !15337
  %arrayidx124 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %ops123, i64 0, i64 0, !dbg !15337
  %88 = load %union.tree_node*, %union.tree_node** %arrayidx124, align 8, !dbg !15337
  %call125 = call %union.tree_node* @gimple_boolify(%union.tree_node* %88), !dbg !15338
  %89 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15339
  %omp_clause126 = bitcast %union.tree_node* %89 to %struct.tree_omp_clause*, !dbg !15339
  %ops127 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause126, i32 0, i32 6, !dbg !15339
  %arrayidx128 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %ops127, i64 0, i64 0, !dbg !15339
  store %union.tree_node* %call125, %union.tree_node** %arrayidx128, align 8, !dbg !15340
  br label %sw.bb129, !dbg !15339

sw.bb129:                                         ; preds = %while.body, %while.body, %sw.bb121
  %90 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15341
  %omp_clause130 = bitcast %union.tree_node* %90 to %struct.tree_omp_clause*, !dbg !15341
  %ops131 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause130, i32 0, i32 6, !dbg !15341
  %arrayidx132 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %ops131, i64 0, i64 0, !dbg !15341
  %91 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !15343
  %call133 = call i32 @gimplify_expr(%union.tree_node** %arrayidx132, %struct.gimple_seq_d** %91, %struct.gimple_seq_d** null, i8 (%union.tree_node*)* @is_gimple_val, i32 1), !dbg !15344
  %cmp134 = icmp eq i32 %call133, -2, !dbg !15345
  br i1 %cmp134, label %if.then136, label %if.end137, !dbg !15346

if.then136:                                       ; preds = %sw.bb129
  store i8 1, i8* %remove, align 1, !dbg !15347
  br label %if.end137, !dbg !15348

if.end137:                                        ; preds = %if.then136, %sw.bb129
  br label %sw.epilog, !dbg !15349

sw.bb138:                                         ; preds = %while.body, %while.body, %while.body, %while.body
  br label %sw.epilog, !dbg !15350

sw.bb139:                                         ; preds = %while.body
  %92 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15351
  %omp_clause140 = bitcast %union.tree_node* %92 to %struct.tree_omp_clause*, !dbg !15351
  %subcode = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause140, i32 0, i32 3, !dbg !15351
  %default_kind = bitcast %union.omp_clause_subcode* %subcode to i32*, !dbg !15351
  %93 = load i32, i32* %default_kind, align 8, !dbg !15351
  %94 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx, align 8, !dbg !15352
  %default_kind141 = getelementptr inbounds %struct.gimplify_omp_ctx, %struct.gimplify_omp_ctx* %94, i32 0, i32 4, !dbg !15353
  store i32 %93, i32* %default_kind141, align 4, !dbg !15354
  br label %sw.epilog, !dbg !15355

sw.default:                                       ; preds = %while.body
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 5821, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !15356
  br label %sw.epilog, !dbg !15357

sw.epilog:                                        ; preds = %sw.default, %sw.bb139, %sw.bb138, %if.end137, %if.end120, %if.then107, %if.end97, %if.then12
  %95 = load i8, i8* %remove, align 1, !dbg !15358
  %tobool142 = icmp ne i8 %95, 0, !dbg !15358
  br i1 %tobool142, label %if.then143, label %if.else145, !dbg !15360

if.then143:                                       ; preds = %sw.epilog
  %96 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15361
  %common144 = bitcast %union.tree_node* %96 to %struct.tree_common*, !dbg !15361
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common144, i32 0, i32 1, !dbg !15361
  %97 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !15361
  %98 = load %union.tree_node**, %union.tree_node*** %list_p.addr, align 8, !dbg !15362
  store %union.tree_node* %97, %union.tree_node** %98, align 8, !dbg !15363
  br label %if.end148, !dbg !15364

if.else145:                                       ; preds = %sw.epilog
  %99 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15365
  %common146 = bitcast %union.tree_node* %99 to %struct.tree_common*, !dbg !15365
  %chain147 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common146, i32 0, i32 1, !dbg !15365
  store %union.tree_node** %chain147, %union.tree_node*** %list_p.addr, align 8, !dbg !15366
  br label %if.end148

if.end148:                                        ; preds = %if.else145, %if.then143
  br label %while.cond, !dbg !15153, !llvm.loop !15367

while.end:                                        ; preds = %while.cond
  %100 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx, align 8, !dbg !15369
  store %struct.gimplify_omp_ctx* %100, %struct.gimplify_omp_ctx** @gimplify_omp_ctxp, align 8, !dbg !15370
  ret void, !dbg !15371
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @gimplify_and_return_first(%union.tree_node* %t, %struct.gimple_seq_d** %seq_p) #0 !dbg !15372 {
entry:
  %retval = alloca %union.gimple_statement_d*, align 8
  %t.addr = alloca %union.tree_node*, align 8
  %seq_p.addr = alloca %struct.gimple_seq_d**, align 8
  %last = alloca %struct.gimple_stmt_iterator, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !15375, metadata !DIExpression()), !dbg !15376
  store %struct.gimple_seq_d** %seq_p, %struct.gimple_seq_d*** %seq_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %seq_p.addr, metadata !15377, metadata !DIExpression()), !dbg !15378
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %last, metadata !15379, metadata !DIExpression()), !dbg !15380
  %0 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %seq_p.addr, align 8, !dbg !15381
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %0, align 8, !dbg !15382
  call void @gsi_last(%struct.gimple_stmt_iterator* sret %last, %struct.gimple_seq_d* %1), !dbg !15383
  %2 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !15384
  %3 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %seq_p.addr, align 8, !dbg !15385
  call void @gimplify_and_add(%union.tree_node* %2, %struct.gimple_seq_d** %3), !dbg !15386
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %last), !dbg !15387
  %tobool = icmp ne i8 %call, 0, !dbg !15387
  br i1 %tobool, label %if.else, label %if.then, !dbg !15389

if.then:                                          ; preds = %entry
  call void @gsi_next(%struct.gimple_stmt_iterator* %last), !dbg !15390
  %call1 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %last), !dbg !15392
  store %union.gimple_statement_d* %call1, %union.gimple_statement_d** %retval, align 8, !dbg !15393
  br label %return, !dbg !15393

if.else:                                          ; preds = %entry
  %4 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %seq_p.addr, align 8, !dbg !15394
  %5 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %4, align 8, !dbg !15395
  %call2 = call %union.gimple_statement_d* @gimple_seq_first_stmt(%struct.gimple_seq_d* %5), !dbg !15396
  store %union.gimple_statement_d* %call2, %union.gimple_statement_d** %retval, align 8, !dbg !15397
  br label %return, !dbg !15397

return:                                           ; preds = %if.else, %if.then
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %retval, align 8, !dbg !15398
  ret %union.gimple_statement_d* %6, !dbg !15398
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimplify_adjust_omp_clauses(%union.tree_node** %list_p) #0 !dbg !15399 {
entry:
  %list_p.addr = alloca %union.tree_node**, align 8
  %ctx = alloca %struct.gimplify_omp_ctx*, align 8
  %c = alloca %union.tree_node*, align 8
  %decl = alloca %union.tree_node*, align 8
  %n = alloca %struct.splay_tree_node_s*, align 8
  %remove = alloca i8, align 1
  %shared = alloca i8, align 1
  store %union.tree_node** %list_p, %union.tree_node*** %list_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %list_p.addr, metadata !15400, metadata !DIExpression()), !dbg !15401
  call void @llvm.dbg.declare(metadata %struct.gimplify_omp_ctx** %ctx, metadata !15402, metadata !DIExpression()), !dbg !15403
  %0 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** @gimplify_omp_ctxp, align 8, !dbg !15404
  store %struct.gimplify_omp_ctx* %0, %struct.gimplify_omp_ctx** %ctx, align 8, !dbg !15403
  call void @llvm.dbg.declare(metadata %union.tree_node** %c, metadata !15405, metadata !DIExpression()), !dbg !15406
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !15407, metadata !DIExpression()), !dbg !15408
  br label %while.cond, !dbg !15409

while.cond:                                       ; preds = %if.end46, %entry
  %1 = load %union.tree_node**, %union.tree_node*** %list_p.addr, align 8, !dbg !15410
  %2 = load %union.tree_node*, %union.tree_node** %1, align 8, !dbg !15411
  store %union.tree_node* %2, %union.tree_node** %c, align 8, !dbg !15412
  %cmp = icmp ne %union.tree_node* %2, null, !dbg !15413
  br i1 %cmp, label %while.body, label %while.end, !dbg !15409

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %struct.splay_tree_node_s** %n, metadata !15414, metadata !DIExpression()), !dbg !15416
  call void @llvm.dbg.declare(metadata i8* %remove, metadata !15417, metadata !DIExpression()), !dbg !15418
  store i8 0, i8* %remove, align 1, !dbg !15418
  %3 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15419
  %omp_clause = bitcast %union.tree_node* %3 to %struct.tree_omp_clause*, !dbg !15419
  %code = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause, i32 0, i32 2, !dbg !15419
  %4 = load i32, i32* %code, align 4, !dbg !15419
  switch i32 %4, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb
    i32 3, label %sw.bb
    i32 4, label %sw.bb27
    i32 5, label %sw.bb41
    i32 6, label %sw.bb41
    i32 7, label %sw.bb41
    i32 8, label %sw.bb41
    i32 9, label %sw.bb41
    i32 10, label %sw.bb41
    i32 11, label %sw.bb41
    i32 12, label %sw.bb41
    i32 13, label %sw.bb41
    i32 15, label %sw.bb41
    i32 14, label %sw.bb41
  ], !dbg !15420

sw.bb:                                            ; preds = %while.body, %while.body, %while.body
  %5 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15421
  %omp_clause1 = bitcast %union.tree_node* %5 to %struct.tree_omp_clause*, !dbg !15421
  %ops = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause1, i32 0, i32 6, !dbg !15421
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %ops, i64 0, i64 0, !dbg !15421
  %6 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !15421
  store %union.tree_node* %6, %union.tree_node** %decl, align 8, !dbg !15423
  %7 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx, align 8, !dbg !15424
  %variables = getelementptr inbounds %struct.gimplify_omp_ctx, %struct.gimplify_omp_ctx* %7, i32 0, i32 1, !dbg !15425
  %8 = load %struct.splay_tree_s*, %struct.splay_tree_s** %variables, align 8, !dbg !15425
  %9 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !15426
  %10 = ptrtoint %union.tree_node* %9 to i64, !dbg !15427
  %call = call %struct.splay_tree_node_s* @splay_tree_lookup(%struct.splay_tree_s* %8, i64 %10), !dbg !15428
  store %struct.splay_tree_node_s* %call, %struct.splay_tree_node_s** %n, align 8, !dbg !15429
  %11 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %n, align 8, !dbg !15430
  %value = getelementptr inbounds %struct.splay_tree_node_s, %struct.splay_tree_node_s* %11, i32 0, i32 1, !dbg !15431
  %12 = load i64, i64* %value, align 8, !dbg !15431
  %and = and i64 %12, 1, !dbg !15432
  %tobool = icmp ne i64 %and, 0, !dbg !15433
  %lnot = xor i1 %tobool, true, !dbg !15433
  %lnot.ext = zext i1 %lnot to i32, !dbg !15433
  %conv = trunc i32 %lnot.ext to i8, !dbg !15433
  store i8 %conv, i8* %remove, align 1, !dbg !15434
  %13 = load i8, i8* %remove, align 1, !dbg !15435
  %tobool2 = icmp ne i8 %13, 0, !dbg !15435
  br i1 %tobool2, label %if.end26, label %if.then, !dbg !15437

if.then:                                          ; preds = %sw.bb
  call void @llvm.dbg.declare(metadata i8* %shared, metadata !15438, metadata !DIExpression()), !dbg !15440
  %14 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15441
  %omp_clause3 = bitcast %union.tree_node* %14 to %struct.tree_omp_clause*, !dbg !15441
  %code4 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause3, i32 0, i32 2, !dbg !15441
  %15 = load i32, i32* %code4, align 4, !dbg !15441
  %cmp5 = icmp eq i32 %15, 2, !dbg !15442
  %conv6 = zext i1 %cmp5 to i32, !dbg !15442
  %conv7 = trunc i32 %conv6 to i8, !dbg !15441
  store i8 %conv7, i8* %shared, align 1, !dbg !15440
  %16 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %n, align 8, !dbg !15443
  %value8 = getelementptr inbounds %struct.splay_tree_node_s, %struct.splay_tree_node_s* %16, i32 0, i32 1, !dbg !15445
  %17 = load i64, i64* %value8, align 8, !dbg !15445
  %and9 = and i64 %17, 256, !dbg !15446
  %tobool10 = icmp ne i64 %and9, 0, !dbg !15446
  br i1 %tobool10, label %if.then14, label %lor.lhs.false, !dbg !15447

lor.lhs.false:                                    ; preds = %if.then
  %18 = load i8 (%union.tree_node*, i8)*, i8 (%union.tree_node*, i8)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 33, i32 13), align 8, !dbg !15448
  %19 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !15449
  %20 = load i8, i8* %shared, align 1, !dbg !15450
  %call11 = call zeroext i8 %18(%union.tree_node* %19, i8 zeroext %20), !dbg !15451
  %conv12 = zext i8 %call11 to i32, !dbg !15451
  %tobool13 = icmp ne i32 %conv12, 0, !dbg !15451
  br i1 %tobool13, label %if.then14, label %if.end, !dbg !15452

if.then14:                                        ; preds = %lor.lhs.false, %if.then
  %21 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %n, align 8, !dbg !15453
  %value15 = getelementptr inbounds %struct.splay_tree_node_s, %struct.splay_tree_node_s* %21, i32 0, i32 1, !dbg !15453
  %22 = load i64, i64* %value15, align 8, !dbg !15453
  %and16 = and i64 %22, 256, !dbg !15453
  %cmp17 = icmp eq i64 %and16, 0, !dbg !15453
  br i1 %cmp17, label %cond.false, label %lor.lhs.false19, !dbg !15453

lor.lhs.false19:                                  ; preds = %if.then14
  %23 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %n, align 8, !dbg !15453
  %value20 = getelementptr inbounds %struct.splay_tree_node_s, %struct.splay_tree_node_s* %23, i32 0, i32 1, !dbg !15453
  %24 = load i64, i64* %value20, align 8, !dbg !15453
  %and21 = and i64 %24, 252, !dbg !15453
  %cmp22 = icmp eq i64 %and21, 8, !dbg !15453
  br i1 %cmp22, label %cond.false, label %cond.true, !dbg !15453

cond.true:                                        ; preds = %lor.lhs.false19
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 5927, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !15453
  br label %cond.end, !dbg !15453

cond.false:                                       ; preds = %lor.lhs.false19, %if.then14
  br label %cond.end, !dbg !15453

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !15453
  %25 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15455
  %omp_clause24 = bitcast %union.tree_node* %25 to %struct.tree_omp_clause*, !dbg !15455
  %code25 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause24, i32 0, i32 2, !dbg !15455
  store i32 1, i32* %code25, align 4, !dbg !15455
  %26 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15456
  %base = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !15456
  %27 = bitcast %struct.tree_base* %base to i64*, !dbg !15456
  %bf.load = load i64, i64* %27, align 8, !dbg !15457
  %bf.clear = and i64 %bf.load, -134217729, !dbg !15457
  %bf.set = or i64 %bf.clear, 134217728, !dbg !15457
  store i64 %bf.set, i64* %27, align 8, !dbg !15457
  br label %if.end, !dbg !15458

if.end:                                           ; preds = %cond.end, %lor.lhs.false
  br label %if.end26, !dbg !15459

if.end26:                                         ; preds = %if.end, %sw.bb
  br label %sw.epilog, !dbg !15460

sw.bb27:                                          ; preds = %while.body
  %28 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15461
  %omp_clause28 = bitcast %union.tree_node* %28 to %struct.tree_omp_clause*, !dbg !15461
  %ops29 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause28, i32 0, i32 6, !dbg !15461
  %arrayidx30 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %ops29, i64 0, i64 0, !dbg !15461
  %29 = load %union.tree_node*, %union.tree_node** %arrayidx30, align 8, !dbg !15461
  store %union.tree_node* %29, %union.tree_node** %decl, align 8, !dbg !15462
  %30 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx, align 8, !dbg !15463
  %variables31 = getelementptr inbounds %struct.gimplify_omp_ctx, %struct.gimplify_omp_ctx* %30, i32 0, i32 1, !dbg !15464
  %31 = load %struct.splay_tree_s*, %struct.splay_tree_s** %variables31, align 8, !dbg !15464
  %32 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !15465
  %33 = ptrtoint %union.tree_node* %32 to i64, !dbg !15466
  %call32 = call %struct.splay_tree_node_s* @splay_tree_lookup(%struct.splay_tree_s* %31, i64 %33), !dbg !15467
  store %struct.splay_tree_node_s* %call32, %struct.splay_tree_node_s** %n, align 8, !dbg !15468
  %34 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %n, align 8, !dbg !15469
  %value33 = getelementptr inbounds %struct.splay_tree_node_s, %struct.splay_tree_node_s* %34, i32 0, i32 1, !dbg !15470
  %35 = load i64, i64* %value33, align 8, !dbg !15470
  %and34 = and i64 %35, 16, !dbg !15471
  %cmp35 = icmp ne i64 %and34, 0, !dbg !15472
  %conv36 = zext i1 %cmp35 to i32, !dbg !15472
  %36 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15473
  %base37 = bitcast %union.tree_node* %36 to %struct.tree_base*, !dbg !15473
  %37 = bitcast %struct.tree_base* %base37 to i64*, !dbg !15473
  %38 = zext i32 %conv36 to i64, !dbg !15474
  %bf.load38 = load i64, i64* %37, align 8, !dbg !15474
  %bf.value = and i64 %38, 1, !dbg !15474
  %bf.shl = shl i64 %bf.value, 27, !dbg !15474
  %bf.clear39 = and i64 %bf.load38, -134217729, !dbg !15474
  %bf.set40 = or i64 %bf.clear39, %bf.shl, !dbg !15474
  store i64 %bf.set40, i64* %37, align 8, !dbg !15474
  %bf.result.cast = trunc i64 %bf.value to i32, !dbg !15474
  br label %sw.epilog, !dbg !15475

sw.bb41:                                          ; preds = %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body
  br label %sw.epilog, !dbg !15476

sw.default:                                       ; preds = %while.body
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 5957, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !15477
  br label %sw.epilog, !dbg !15478

sw.epilog:                                        ; preds = %sw.default, %sw.bb41, %sw.bb27, %if.end26
  %39 = load i8, i8* %remove, align 1, !dbg !15479
  %tobool42 = icmp ne i8 %39, 0, !dbg !15479
  br i1 %tobool42, label %if.then43, label %if.else, !dbg !15481

if.then43:                                        ; preds = %sw.epilog
  %40 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15482
  %common = bitcast %union.tree_node* %40 to %struct.tree_common*, !dbg !15482
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !15482
  %41 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !15482
  %42 = load %union.tree_node**, %union.tree_node*** %list_p.addr, align 8, !dbg !15483
  store %union.tree_node* %41, %union.tree_node** %42, align 8, !dbg !15484
  br label %if.end46, !dbg !15485

if.else:                                          ; preds = %sw.epilog
  %43 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15486
  %common44 = bitcast %union.tree_node* %43 to %struct.tree_common*, !dbg !15486
  %chain45 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common44, i32 0, i32 1, !dbg !15486
  store %union.tree_node** %chain45, %union.tree_node*** %list_p.addr, align 8, !dbg !15487
  br label %if.end46

if.end46:                                         ; preds = %if.else, %if.then43
  br label %while.cond, !dbg !15409, !llvm.loop !15488

while.end:                                        ; preds = %while.cond
  %44 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx, align 8, !dbg !15490
  %variables47 = getelementptr inbounds %struct.gimplify_omp_ctx, %struct.gimplify_omp_ctx* %44, i32 0, i32 1, !dbg !15491
  %45 = load %struct.splay_tree_s*, %struct.splay_tree_s** %variables47, align 8, !dbg !15491
  %46 = load %union.tree_node**, %union.tree_node*** %list_p.addr, align 8, !dbg !15492
  %47 = bitcast %union.tree_node** %46 to i8*, !dbg !15492
  %call48 = call i32 @splay_tree_foreach(%struct.splay_tree_s* %45, i32 (%struct.splay_tree_node_s*, i8*)* @gimplify_adjust_omp_clauses_1, i8* %47), !dbg !15493
  %48 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx, align 8, !dbg !15494
  %outer_context = getelementptr inbounds %struct.gimplify_omp_ctx, %struct.gimplify_omp_ctx* %48, i32 0, i32 0, !dbg !15495
  %49 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %outer_context, align 8, !dbg !15495
  store %struct.gimplify_omp_ctx* %49, %struct.gimplify_omp_ctx** @gimplify_omp_ctxp, align 8, !dbg !15496
  %50 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx, align 8, !dbg !15497
  call void @delete_omp_context(%struct.gimplify_omp_ctx* %50), !dbg !15498
  ret void, !dbg !15499
}

declare dso_local %union.gimple_statement_d* @gimple_build_omp_parallel(%struct.gimple_seq_d*, %union.tree_node*, %union.tree_node*, %union.tree_node*) #3

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_omp_set_subcode(%union.gimple_statement_d* %s, i32 %subcode) #0 !dbg !15500 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  %subcode.addr = alloca i32, align 4
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !15503, metadata !DIExpression()), !dbg !15504
  store i32 %subcode, i32* %subcode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %subcode.addr, metadata !15505, metadata !DIExpression()), !dbg !15506
  %0 = load i32, i32* %subcode.addr, align 4, !dbg !15507
  %cmp = icmp ult i32 %0, 65536, !dbg !15507
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !15507

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.16, i64 0, i64 0), i32 1522, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !15507
  br label %cond.end, !dbg !15507

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !15507

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !15507
  %1 = load i32, i32* %subcode.addr, align 4, !dbg !15508
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !15509
  %gsbase = bitcast %union.gimple_statement_d* %2 to %struct.gimple_statement_base*, !dbg !15510
  %3 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !15511
  %bf.load = load i32, i32* %3, align 8, !dbg !15512
  %bf.value = and i32 %1, 65535, !dbg !15512
  %bf.shl = shl i32 %bf.value, 16, !dbg !15512
  %bf.clear = and i32 %bf.load, 65535, !dbg !15512
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !15512
  store i32 %bf.set, i32* %3, align 8, !dbg !15512
  ret void, !dbg !15513
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimplify_omp_ctx* @new_omp_context(i32 %region_type) #0 !dbg !15514 {
entry:
  %region_type.addr = alloca i32, align 4
  %c = alloca %struct.gimplify_omp_ctx*, align 8
  store i32 %region_type, i32* %region_type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %region_type.addr, metadata !15517, metadata !DIExpression()), !dbg !15518
  call void @llvm.dbg.declare(metadata %struct.gimplify_omp_ctx** %c, metadata !15519, metadata !DIExpression()), !dbg !15520
  %call = call i8* @xcalloc(i64 1, i64 40), !dbg !15521
  %0 = bitcast i8* %call to %struct.gimplify_omp_ctx*, !dbg !15521
  store %struct.gimplify_omp_ctx* %0, %struct.gimplify_omp_ctx** %c, align 8, !dbg !15522
  %1 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** @gimplify_omp_ctxp, align 8, !dbg !15523
  %2 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %c, align 8, !dbg !15524
  %outer_context = getelementptr inbounds %struct.gimplify_omp_ctx, %struct.gimplify_omp_ctx* %2, i32 0, i32 0, !dbg !15525
  store %struct.gimplify_omp_ctx* %1, %struct.gimplify_omp_ctx** %outer_context, align 8, !dbg !15526
  %call1 = call %struct.splay_tree_s* @splay_tree_new(i32 (i64, i64)* @splay_tree_compare_decl_uid, void (i64)* null, void (i64)* null), !dbg !15527
  %3 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %c, align 8, !dbg !15528
  %variables = getelementptr inbounds %struct.gimplify_omp_ctx, %struct.gimplify_omp_ctx* %3, i32 0, i32 1, !dbg !15529
  store %struct.splay_tree_s* %call1, %struct.splay_tree_s** %variables, align 8, !dbg !15530
  %call2 = call %struct.pointer_set_t* @pointer_set_create(), !dbg !15531
  %4 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %c, align 8, !dbg !15532
  %privatized_types = getelementptr inbounds %struct.gimplify_omp_ctx, %struct.gimplify_omp_ctx* %4, i32 0, i32 2, !dbg !15533
  store %struct.pointer_set_t* %call2, %struct.pointer_set_t** %privatized_types, align 8, !dbg !15534
  %5 = load i32, i32* @input_location, align 4, !dbg !15535
  %6 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %c, align 8, !dbg !15536
  %location = getelementptr inbounds %struct.gimplify_omp_ctx, %struct.gimplify_omp_ctx* %6, i32 0, i32 3, !dbg !15537
  store i32 %5, i32* %location, align 8, !dbg !15538
  %7 = load i32, i32* %region_type.addr, align 4, !dbg !15539
  %8 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %c, align 8, !dbg !15540
  %region_type3 = getelementptr inbounds %struct.gimplify_omp_ctx, %struct.gimplify_omp_ctx* %8, i32 0, i32 5, !dbg !15541
  store i32 %7, i32* %region_type3, align 8, !dbg !15542
  %9 = load i32, i32* %region_type.addr, align 4, !dbg !15543
  %cmp = icmp ne i32 %9, 1, !dbg !15545
  br i1 %cmp, label %if.then, label %if.else, !dbg !15546

if.then:                                          ; preds = %entry
  %10 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %c, align 8, !dbg !15547
  %default_kind = getelementptr inbounds %struct.gimplify_omp_ctx, %struct.gimplify_omp_ctx* %10, i32 0, i32 4, !dbg !15548
  store i32 1, i32* %default_kind, align 4, !dbg !15549
  br label %if.end, !dbg !15547

if.else:                                          ; preds = %entry
  %11 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %c, align 8, !dbg !15550
  %default_kind4 = getelementptr inbounds %struct.gimplify_omp_ctx, %struct.gimplify_omp_ctx* %11, i32 0, i32 4, !dbg !15551
  store i32 0, i32* %default_kind4, align 4, !dbg !15552
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %12 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %c, align 8, !dbg !15553
  ret %struct.gimplify_omp_ctx* %12, !dbg !15554
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @omp_check_private(%struct.gimplify_omp_ctx* %ctx, %union.tree_node* %decl) #0 !dbg !15555 {
entry:
  %retval = alloca i8, align 1
  %ctx.addr = alloca %struct.gimplify_omp_ctx*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  %n = alloca %struct.splay_tree_node_s*, align 8
  store %struct.gimplify_omp_ctx* %ctx, %struct.gimplify_omp_ctx** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimplify_omp_ctx** %ctx.addr, metadata !15558, metadata !DIExpression()), !dbg !15559
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !15560, metadata !DIExpression()), !dbg !15561
  call void @llvm.dbg.declare(metadata %struct.splay_tree_node_s** %n, metadata !15562, metadata !DIExpression()), !dbg !15563
  br label %do.body, !dbg !15564

do.body:                                          ; preds = %do.cond, %entry
  %0 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx.addr, align 8, !dbg !15565
  %outer_context = getelementptr inbounds %struct.gimplify_omp_ctx, %struct.gimplify_omp_ctx* %0, i32 0, i32 0, !dbg !15567
  %1 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %outer_context, align 8, !dbg !15567
  store %struct.gimplify_omp_ctx* %1, %struct.gimplify_omp_ctx** %ctx.addr, align 8, !dbg !15568
  %2 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx.addr, align 8, !dbg !15569
  %cmp = icmp eq %struct.gimplify_omp_ctx* %2, null, !dbg !15571
  br i1 %cmp, label %if.then, label %if.end, !dbg !15572

if.then:                                          ; preds = %do.body
  %3 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !15573
  %call = call zeroext i8 @is_global_var(%union.tree_node* %3), !dbg !15574
  %conv = zext i8 %call to i32, !dbg !15574
  %tobool = icmp ne i32 %conv, 0, !dbg !15574
  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !15575

lor.rhs:                                          ; preds = %if.then
  %4 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 33, i32 10), align 8, !dbg !15576
  %5 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !15577
  %call1 = call zeroext i8 %4(%union.tree_node* %5), !dbg !15578
  %conv2 = zext i8 %call1 to i32, !dbg !15578
  %tobool3 = icmp ne i32 %conv2, 0, !dbg !15575
  br label %lor.end, !dbg !15575

lor.end:                                          ; preds = %lor.rhs, %if.then
  %6 = phi i1 [ true, %if.then ], [ %tobool3, %lor.rhs ]
  %lnot = xor i1 %6, true, !dbg !15579
  %lnot.ext = zext i1 %lnot to i32, !dbg !15579
  %conv4 = trunc i32 %lnot.ext to i8, !dbg !15579
  store i8 %conv4, i8* %retval, align 1, !dbg !15580
  br label %return, !dbg !15580

if.end:                                           ; preds = %do.body
  %7 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx.addr, align 8, !dbg !15581
  %variables = getelementptr inbounds %struct.gimplify_omp_ctx, %struct.gimplify_omp_ctx* %7, i32 0, i32 1, !dbg !15582
  %8 = load %struct.splay_tree_s*, %struct.splay_tree_s** %variables, align 8, !dbg !15582
  %9 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !15583
  %10 = ptrtoint %union.tree_node* %9 to i64, !dbg !15584
  %call5 = call %struct.splay_tree_node_s* @splay_tree_lookup(%struct.splay_tree_s* %8, i64 %10), !dbg !15585
  store %struct.splay_tree_node_s* %call5, %struct.splay_tree_node_s** %n, align 8, !dbg !15586
  %11 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %n, align 8, !dbg !15587
  %cmp6 = icmp ne %struct.splay_tree_node_s* %11, null, !dbg !15589
  br i1 %cmp6, label %if.then8, label %if.end12, !dbg !15590

if.then8:                                         ; preds = %if.end
  %12 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %n, align 8, !dbg !15591
  %value = getelementptr inbounds %struct.splay_tree_node_s, %struct.splay_tree_node_s* %12, i32 0, i32 1, !dbg !15592
  %13 = load i64, i64* %value, align 8, !dbg !15592
  %and = and i64 %13, 4, !dbg !15593
  %cmp9 = icmp eq i64 %and, 0, !dbg !15594
  %conv10 = zext i1 %cmp9 to i32, !dbg !15594
  %conv11 = trunc i32 %conv10 to i8, !dbg !15595
  store i8 %conv11, i8* %retval, align 1, !dbg !15596
  br label %return, !dbg !15596

if.end12:                                         ; preds = %if.end
  br label %do.cond, !dbg !15597

do.cond:                                          ; preds = %if.end12
  %14 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx.addr, align 8, !dbg !15598
  %region_type = getelementptr inbounds %struct.gimplify_omp_ctx, %struct.gimplify_omp_ctx* %14, i32 0, i32 5, !dbg !15599
  %15 = load i32, i32* %region_type, align 8, !dbg !15599
  %cmp13 = icmp eq i32 %15, 0, !dbg !15600
  br i1 %cmp13, label %do.body, label %do.end, !dbg !15597, !llvm.loop !15601

do.end:                                           ; preds = %do.cond
  store i8 0, i8* %retval, align 1, !dbg !15603
  br label %return, !dbg !15603

return:                                           ; preds = %do.end, %if.then8, %lor.end
  %16 = load i8, i8* %retval, align 1, !dbg !15604
  ret i8 %16, !dbg !15604
}

declare dso_local i8* @xcalloc(i64, i64) #3

declare dso_local %struct.splay_tree_s* @splay_tree_new(i32 (i64, i64)*, void (i64)*, void (i64)*) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @splay_tree_compare_decl_uid(i64 %xa, i64 %xb) #0 !dbg !15605 {
entry:
  %xa.addr = alloca i64, align 8
  %xb.addr = alloca i64, align 8
  %a = alloca %union.tree_node*, align 8
  %b = alloca %union.tree_node*, align 8
  store i64 %xa, i64* %xa.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %xa.addr, metadata !15606, metadata !DIExpression()), !dbg !15607
  store i64 %xb, i64* %xb.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %xb.addr, metadata !15608, metadata !DIExpression()), !dbg !15609
  call void @llvm.dbg.declare(metadata %union.tree_node** %a, metadata !15610, metadata !DIExpression()), !dbg !15611
  %0 = load i64, i64* %xa.addr, align 8, !dbg !15612
  %1 = inttoptr i64 %0 to %union.tree_node*, !dbg !15613
  store %union.tree_node* %1, %union.tree_node** %a, align 8, !dbg !15611
  call void @llvm.dbg.declare(metadata %union.tree_node** %b, metadata !15614, metadata !DIExpression()), !dbg !15615
  %2 = load i64, i64* %xb.addr, align 8, !dbg !15616
  %3 = inttoptr i64 %2 to %union.tree_node*, !dbg !15617
  store %union.tree_node* %3, %union.tree_node** %b, align 8, !dbg !15615
  %4 = load %union.tree_node*, %union.tree_node** %a, align 8, !dbg !15618
  %decl_minimal = bitcast %union.tree_node* %4 to %struct.tree_decl_minimal*, !dbg !15618
  %uid = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 2, !dbg !15618
  %5 = load i32, i32* %uid, align 4, !dbg !15618
  %6 = load %union.tree_node*, %union.tree_node** %b, align 8, !dbg !15619
  %decl_minimal1 = bitcast %union.tree_node* %6 to %struct.tree_decl_minimal*, !dbg !15619
  %uid2 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal1, i32 0, i32 2, !dbg !15619
  %7 = load i32, i32* %uid2, align 4, !dbg !15619
  %sub = sub i32 %5, %7, !dbg !15620
  ret i32 %sub, !dbg !15621
}

declare dso_local i32 @splay_tree_foreach(%struct.splay_tree_s*, i32 (%struct.splay_tree_node_s*, i8*)*, i8*) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimplify_adjust_omp_clauses_1(%struct.splay_tree_node_s* %n, i8* %data) #0 !dbg !15622 {
entry:
  %retval = alloca i32, align 4
  %n.addr = alloca %struct.splay_tree_node_s*, align 8
  %data.addr = alloca i8*, align 8
  %list_p = alloca %union.tree_node**, align 8
  %decl = alloca %union.tree_node*, align 8
  %flags = alloca i32, align 4
  %code = alloca i32, align 4
  %clause = alloca %union.tree_node*, align 8
  %private_debug = alloca i8, align 1
  %ctx = alloca %struct.gimplify_omp_ctx*, align 8
  %on = alloca %struct.splay_tree_node_s*, align 8
  store %struct.splay_tree_node_s* %n, %struct.splay_tree_node_s** %n.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.splay_tree_node_s** %n.addr, metadata !15625, metadata !DIExpression()), !dbg !15626
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !15627, metadata !DIExpression()), !dbg !15628
  call void @llvm.dbg.declare(metadata %union.tree_node*** %list_p, metadata !15629, metadata !DIExpression()), !dbg !15630
  %0 = load i8*, i8** %data.addr, align 8, !dbg !15631
  %1 = bitcast i8* %0 to %union.tree_node**, !dbg !15632
  store %union.tree_node** %1, %union.tree_node*** %list_p, align 8, !dbg !15630
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !15633, metadata !DIExpression()), !dbg !15634
  %2 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %n.addr, align 8, !dbg !15635
  %key = getelementptr inbounds %struct.splay_tree_node_s, %struct.splay_tree_node_s* %2, i32 0, i32 0, !dbg !15636
  %3 = load i64, i64* %key, align 8, !dbg !15636
  %4 = inttoptr i64 %3 to %union.tree_node*, !dbg !15637
  store %union.tree_node* %4, %union.tree_node** %decl, align 8, !dbg !15634
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !15638, metadata !DIExpression()), !dbg !15639
  %5 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %n.addr, align 8, !dbg !15640
  %value = getelementptr inbounds %struct.splay_tree_node_s, %struct.splay_tree_node_s* %5, i32 0, i32 1, !dbg !15641
  %6 = load i64, i64* %value, align 8, !dbg !15641
  %conv = trunc i64 %6 to i32, !dbg !15640
  store i32 %conv, i32* %flags, align 4, !dbg !15639
  call void @llvm.dbg.declare(metadata i32* %code, metadata !15642, metadata !DIExpression()), !dbg !15643
  call void @llvm.dbg.declare(metadata %union.tree_node** %clause, metadata !15644, metadata !DIExpression()), !dbg !15645
  call void @llvm.dbg.declare(metadata i8* %private_debug, metadata !15646, metadata !DIExpression()), !dbg !15647
  %7 = load i32, i32* %flags, align 4, !dbg !15648
  %and = and i32 %7, 130, !dbg !15650
  %tobool = icmp ne i32 %and, 0, !dbg !15650
  br i1 %tobool, label %if.then, label %if.end, !dbg !15651

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !15652
  br label %return, !dbg !15652

if.end:                                           ; preds = %entry
  %8 = load i32, i32* %flags, align 4, !dbg !15653
  %and1 = and i32 %8, 1, !dbg !15655
  %cmp = icmp eq i32 %and1, 0, !dbg !15656
  br i1 %cmp, label %if.then3, label %if.end4, !dbg !15657

if.then3:                                         ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !15658
  br label %return, !dbg !15658

if.end4:                                          ; preds = %if.end
  %9 = load i32, i32* %flags, align 4, !dbg !15659
  %and5 = and i32 %9, 256, !dbg !15661
  %tobool6 = icmp ne i32 %and5, 0, !dbg !15661
  br i1 %tobool6, label %if.then7, label %if.else, !dbg !15662

if.then7:                                         ; preds = %if.end4
  %10 = load i32, i32* %flags, align 4, !dbg !15663
  %and8 = and i32 %10, 252, !dbg !15663
  %cmp9 = icmp eq i32 %and8, 8, !dbg !15663
  br i1 %cmp9, label %cond.false, label %cond.true, !dbg !15663

cond.true:                                        ; preds = %if.then7
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 5852, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !15663
  br label %cond.end, !dbg !15663

cond.false:                                       ; preds = %if.then7
  br label %cond.end, !dbg !15663

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !15663
  store i8 1, i8* %private_debug, align 1, !dbg !15665
  br label %if.end15, !dbg !15666

if.else:                                          ; preds = %if.end4
  %11 = load i8 (%union.tree_node*, i8)*, i8 (%union.tree_node*, i8)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 33, i32 13), align 8, !dbg !15667
  %12 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !15668
  %13 = load i32, i32* %flags, align 4, !dbg !15669
  %and11 = and i32 %13, 4, !dbg !15670
  %tobool12 = icmp ne i32 %and11, 0, !dbg !15671
  %lnot = xor i1 %tobool12, true, !dbg !15671
  %lnot13 = xor i1 %lnot, true, !dbg !15672
  %lnot.ext = zext i1 %lnot13 to i32, !dbg !15672
  %conv14 = trunc i32 %lnot.ext to i8, !dbg !15672
  %call = call zeroext i8 %11(%union.tree_node* %12, i8 zeroext %conv14), !dbg !15673
  store i8 %call, i8* %private_debug, align 1, !dbg !15674
  br label %if.end15

if.end15:                                         ; preds = %if.else, %cond.end
  %14 = load i8, i8* %private_debug, align 1, !dbg !15675
  %tobool16 = icmp ne i8 %14, 0, !dbg !15675
  br i1 %tobool16, label %if.then17, label %if.else18, !dbg !15677

if.then17:                                        ; preds = %if.end15
  store i32 1, i32* %code, align 4, !dbg !15678
  br label %if.end53, !dbg !15679

if.else18:                                        ; preds = %if.end15
  %15 = load i32, i32* %flags, align 4, !dbg !15680
  %and19 = and i32 %15, 4, !dbg !15682
  %tobool20 = icmp ne i32 %and19, 0, !dbg !15682
  br i1 %tobool20, label %if.then21, label %if.else41, !dbg !15683

if.then21:                                        ; preds = %if.else18
  %16 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !15684
  %call22 = call zeroext i8 @is_global_var(%union.tree_node* %16), !dbg !15687
  %tobool23 = icmp ne i8 %call22, 0, !dbg !15687
  br i1 %tobool23, label %if.then24, label %if.end40, !dbg !15688

if.then24:                                        ; preds = %if.then21
  call void @llvm.dbg.declare(metadata %struct.gimplify_omp_ctx** %ctx, metadata !15689, metadata !DIExpression()), !dbg !15691
  %17 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** @gimplify_omp_ctxp, align 8, !dbg !15692
  %outer_context = getelementptr inbounds %struct.gimplify_omp_ctx, %struct.gimplify_omp_ctx* %17, i32 0, i32 0, !dbg !15693
  %18 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %outer_context, align 8, !dbg !15693
  store %struct.gimplify_omp_ctx* %18, %struct.gimplify_omp_ctx** %ctx, align 8, !dbg !15691
  br label %while.cond, !dbg !15694

while.cond:                                       ; preds = %if.end34, %if.then24
  %19 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx, align 8, !dbg !15695
  %cmp25 = icmp ne %struct.gimplify_omp_ctx* %19, null, !dbg !15696
  br i1 %cmp25, label %while.body, label %while.end, !dbg !15694

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %struct.splay_tree_node_s** %on, metadata !15697, metadata !DIExpression()), !dbg !15699
  %20 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx, align 8, !dbg !15700
  %variables = getelementptr inbounds %struct.gimplify_omp_ctx, %struct.gimplify_omp_ctx* %20, i32 0, i32 1, !dbg !15701
  %21 = load %struct.splay_tree_s*, %struct.splay_tree_s** %variables, align 8, !dbg !15701
  %22 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !15702
  %23 = ptrtoint %union.tree_node* %22 to i64, !dbg !15703
  %call27 = call %struct.splay_tree_node_s* @splay_tree_lookup(%struct.splay_tree_s* %21, i64 %23), !dbg !15704
  store %struct.splay_tree_node_s* %call27, %struct.splay_tree_node_s** %on, align 8, !dbg !15699
  %24 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %on, align 8, !dbg !15705
  %tobool28 = icmp ne %struct.splay_tree_node_s* %24, null, !dbg !15705
  br i1 %tobool28, label %land.lhs.true, label %if.end34, !dbg !15707

land.lhs.true:                                    ; preds = %while.body
  %25 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %on, align 8, !dbg !15708
  %value29 = getelementptr inbounds %struct.splay_tree_node_s, %struct.splay_tree_node_s* %25, i32 0, i32 1, !dbg !15709
  %26 = load i64, i64* %value29, align 8, !dbg !15709
  %and30 = and i64 %26, 120, !dbg !15710
  %cmp31 = icmp ne i64 %and30, 0, !dbg !15711
  br i1 %cmp31, label %if.then33, label %if.end34, !dbg !15712

if.then33:                                        ; preds = %land.lhs.true
  br label %while.end, !dbg !15713

if.end34:                                         ; preds = %land.lhs.true, %while.body
  %27 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx, align 8, !dbg !15714
  %outer_context35 = getelementptr inbounds %struct.gimplify_omp_ctx, %struct.gimplify_omp_ctx* %27, i32 0, i32 0, !dbg !15715
  %28 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %outer_context35, align 8, !dbg !15715
  store %struct.gimplify_omp_ctx* %28, %struct.gimplify_omp_ctx** %ctx, align 8, !dbg !15716
  br label %while.cond, !dbg !15694, !llvm.loop !15717

while.end:                                        ; preds = %if.then33, %while.cond
  %29 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx, align 8, !dbg !15719
  %cmp36 = icmp eq %struct.gimplify_omp_ctx* %29, null, !dbg !15721
  br i1 %cmp36, label %if.then38, label %if.end39, !dbg !15722

if.then38:                                        ; preds = %while.end
  store i32 0, i32* %retval, align 4, !dbg !15723
  br label %return, !dbg !15723

if.end39:                                         ; preds = %while.end
  br label %if.end40, !dbg !15724

if.end40:                                         ; preds = %if.end39, %if.then21
  store i32 2, i32* %code, align 4, !dbg !15725
  br label %if.end52, !dbg !15726

if.else41:                                        ; preds = %if.else18
  %30 = load i32, i32* %flags, align 4, !dbg !15727
  %and42 = and i32 %30, 8, !dbg !15729
  %tobool43 = icmp ne i32 %and42, 0, !dbg !15729
  br i1 %tobool43, label %if.then44, label %if.else45, !dbg !15730

if.then44:                                        ; preds = %if.else41
  store i32 1, i32* %code, align 4, !dbg !15731
  br label %if.end51, !dbg !15732

if.else45:                                        ; preds = %if.else41
  %31 = load i32, i32* %flags, align 4, !dbg !15733
  %and46 = and i32 %31, 16, !dbg !15735
  %tobool47 = icmp ne i32 %and46, 0, !dbg !15735
  br i1 %tobool47, label %if.then48, label %if.else49, !dbg !15736

if.then48:                                        ; preds = %if.else45
  store i32 3, i32* %code, align 4, !dbg !15737
  br label %if.end50, !dbg !15738

if.else49:                                        ; preds = %if.else45
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 5885, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !15739
  br label %if.end50

if.end50:                                         ; preds = %if.else49, %if.then48
  br label %if.end51

if.end51:                                         ; preds = %if.end50, %if.then44
  br label %if.end52

if.end52:                                         ; preds = %if.end51, %if.end40
  br label %if.end53

if.end53:                                         ; preds = %if.end52, %if.then17
  %32 = load i32, i32* @input_location, align 4, !dbg !15740
  %33 = load i32, i32* %code, align 4, !dbg !15741
  %call54 = call %union.tree_node* @build_omp_clause(i32 %32, i32 %33), !dbg !15742
  store %union.tree_node* %call54, %union.tree_node** %clause, align 8, !dbg !15743
  %34 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !15744
  %35 = load %union.tree_node*, %union.tree_node** %clause, align 8, !dbg !15745
  %omp_clause = bitcast %union.tree_node* %35 to %struct.tree_omp_clause*, !dbg !15745
  %ops = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause, i32 0, i32 6, !dbg !15745
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %ops, i64 0, i64 0, !dbg !15745
  store %union.tree_node* %34, %union.tree_node** %arrayidx, align 8, !dbg !15746
  %36 = load %union.tree_node**, %union.tree_node*** %list_p, align 8, !dbg !15747
  %37 = load %union.tree_node*, %union.tree_node** %36, align 8, !dbg !15748
  %38 = load %union.tree_node*, %union.tree_node** %clause, align 8, !dbg !15749
  %common = bitcast %union.tree_node* %38 to %struct.tree_common*, !dbg !15749
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !15749
  store %union.tree_node* %37, %union.tree_node** %chain, align 8, !dbg !15750
  %39 = load i8, i8* %private_debug, align 1, !dbg !15751
  %tobool55 = icmp ne i8 %39, 0, !dbg !15751
  br i1 %tobool55, label %if.then56, label %if.else57, !dbg !15753

if.then56:                                        ; preds = %if.end53
  %40 = load %union.tree_node*, %union.tree_node** %clause, align 8, !dbg !15754
  %base = bitcast %union.tree_node* %40 to %struct.tree_base*, !dbg !15754
  %41 = bitcast %struct.tree_base* %base to i64*, !dbg !15754
  %bf.load = load i64, i64* %41, align 8, !dbg !15755
  %bf.clear = and i64 %bf.load, -134217729, !dbg !15755
  %bf.set = or i64 %bf.clear, 134217728, !dbg !15755
  store i64 %bf.set, i64* %41, align 8, !dbg !15755
  br label %if.end69, !dbg !15754

if.else57:                                        ; preds = %if.end53
  %42 = load i32, i32* %code, align 4, !dbg !15756
  %cmp58 = icmp eq i32 %42, 1, !dbg !15758
  br i1 %cmp58, label %land.lhs.true60, label %if.end68, !dbg !15759

land.lhs.true60:                                  ; preds = %if.else57
  %43 = load i32, i32* %flags, align 4, !dbg !15760
  %and61 = and i32 %43, 512, !dbg !15761
  %tobool62 = icmp ne i32 %and61, 0, !dbg !15761
  br i1 %tobool62, label %if.then63, label %if.end68, !dbg !15762

if.then63:                                        ; preds = %land.lhs.true60
  %44 = load %union.tree_node*, %union.tree_node** %clause, align 8, !dbg !15763
  %base64 = bitcast %union.tree_node* %44 to %struct.tree_base*, !dbg !15763
  %45 = bitcast %struct.tree_base* %base64 to i64*, !dbg !15763
  %bf.load65 = load i64, i64* %45, align 8, !dbg !15764
  %bf.clear66 = and i64 %bf.load65, -268435457, !dbg !15764
  %bf.set67 = or i64 %bf.clear66, 268435456, !dbg !15764
  store i64 %bf.set67, i64* %45, align 8, !dbg !15764
  br label %if.end68, !dbg !15763

if.end68:                                         ; preds = %if.then63, %land.lhs.true60, %if.else57
  br label %if.end69

if.end69:                                         ; preds = %if.end68, %if.then56
  %46 = load %union.tree_node*, %union.tree_node** %clause, align 8, !dbg !15765
  %47 = load %union.tree_node**, %union.tree_node*** %list_p, align 8, !dbg !15766
  store %union.tree_node* %46, %union.tree_node** %47, align 8, !dbg !15767
  %48 = load void (%union.tree_node*)*, void (%union.tree_node*)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 33, i32 19), align 8, !dbg !15768
  %49 = load %union.tree_node*, %union.tree_node** %clause, align 8, !dbg !15769
  call void %48(%union.tree_node* %49), !dbg !15770
  store i32 0, i32* %retval, align 4, !dbg !15771
  br label %return, !dbg !15771

return:                                           ; preds = %if.end69, %if.then38, %if.then3, %if.then
  %50 = load i32, i32* %retval, align 4, !dbg !15772
  ret i32 %50, !dbg !15772
}

; Function Attrs: noinline nounwind uwtable
define internal void @delete_omp_context(%struct.gimplify_omp_ctx* %c) #0 !dbg !15773 {
entry:
  %c.addr = alloca %struct.gimplify_omp_ctx*, align 8
  store %struct.gimplify_omp_ctx* %c, %struct.gimplify_omp_ctx** %c.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimplify_omp_ctx** %c.addr, metadata !15776, metadata !DIExpression()), !dbg !15777
  %0 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %c.addr, align 8, !dbg !15778
  %variables = getelementptr inbounds %struct.gimplify_omp_ctx, %struct.gimplify_omp_ctx* %0, i32 0, i32 1, !dbg !15779
  %1 = load %struct.splay_tree_s*, %struct.splay_tree_s** %variables, align 8, !dbg !15779
  call void @splay_tree_delete(%struct.splay_tree_s* %1), !dbg !15780
  %2 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %c.addr, align 8, !dbg !15781
  %privatized_types = getelementptr inbounds %struct.gimplify_omp_ctx, %struct.gimplify_omp_ctx* %2, i32 0, i32 2, !dbg !15782
  %3 = load %struct.pointer_set_t*, %struct.pointer_set_t** %privatized_types, align 8, !dbg !15782
  call void @pointer_set_destroy(%struct.pointer_set_t* %3), !dbg !15783
  %4 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %c.addr, align 8, !dbg !15784
  %5 = bitcast %struct.gimplify_omp_ctx* %4 to i8*, !dbg !15784
  call void @free(i8* %5), !dbg !15784
  ret void, !dbg !15785
}

declare dso_local %union.tree_node* @build_omp_clause(i32, i32) #3

declare dso_local void @splay_tree_delete(%struct.splay_tree_s*) #3

declare dso_local %union.gimple_statement_d* @gimple_build_omp_task(%struct.gimple_seq_d*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @omp_is_private(%struct.gimplify_omp_ctx* %ctx, %union.tree_node* %decl) #0 !dbg !15786 {
entry:
  %retval = alloca i8, align 1
  %ctx.addr = alloca %struct.gimplify_omp_ctx*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  %n = alloca %struct.splay_tree_node_s*, align 8
  store %struct.gimplify_omp_ctx* %ctx, %struct.gimplify_omp_ctx** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimplify_omp_ctx** %ctx.addr, metadata !15787, metadata !DIExpression()), !dbg !15788
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !15789, metadata !DIExpression()), !dbg !15790
  call void @llvm.dbg.declare(metadata %struct.splay_tree_node_s** %n, metadata !15791, metadata !DIExpression()), !dbg !15792
  %0 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx.addr, align 8, !dbg !15793
  %variables = getelementptr inbounds %struct.gimplify_omp_ctx, %struct.gimplify_omp_ctx* %0, i32 0, i32 1, !dbg !15794
  %1 = load %struct.splay_tree_s*, %struct.splay_tree_s** %variables, align 8, !dbg !15794
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !15795
  %3 = ptrtoint %union.tree_node* %2 to i64, !dbg !15796
  %call = call %struct.splay_tree_node_s* @splay_tree_lookup(%struct.splay_tree_s* %1, i64 %3), !dbg !15797
  store %struct.splay_tree_node_s* %call, %struct.splay_tree_node_s** %n, align 8, !dbg !15798
  %4 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %n, align 8, !dbg !15799
  %cmp = icmp ne %struct.splay_tree_node_s* %4, null, !dbg !15801
  br i1 %cmp, label %if.then, label %if.end35, !dbg !15802

if.then:                                          ; preds = %entry
  %5 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %n, align 8, !dbg !15803
  %value = getelementptr inbounds %struct.splay_tree_node_s, %struct.splay_tree_node_s* %5, i32 0, i32 1, !dbg !15806
  %6 = load i64, i64* %value, align 8, !dbg !15806
  %and = and i64 %6, 4, !dbg !15807
  %tobool = icmp ne i64 %and, 0, !dbg !15807
  br i1 %tobool, label %if.then1, label %if.else5, !dbg !15808

if.then1:                                         ; preds = %if.then
  %7 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx.addr, align 8, !dbg !15809
  %8 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** @gimplify_omp_ctxp, align 8, !dbg !15812
  %cmp2 = icmp eq %struct.gimplify_omp_ctx* %7, %8, !dbg !15813
  br i1 %cmp2, label %if.then3, label %if.else, !dbg !15814

if.then3:                                         ; preds = %if.then1
  %9 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !15815
  %decl_minimal = bitcast %union.tree_node* %9 to %struct.tree_decl_minimal*, !dbg !15815
  %name = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 3, !dbg !15815
  %10 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !15815
  call void (i8*, ...) @error(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.24, i64 0, i64 0), %union.tree_node* %10), !dbg !15817
  %11 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %n, align 8, !dbg !15818
  %value4 = getelementptr inbounds %struct.splay_tree_node_s, %struct.splay_tree_node_s* %11, i32 0, i32 1, !dbg !15819
  store i64 8, i64* %value4, align 8, !dbg !15820
  store i8 1, i8* %retval, align 1, !dbg !15821
  br label %return, !dbg !15821

if.else:                                          ; preds = %if.then1
  store i8 0, i8* %retval, align 1, !dbg !15822
  br label %return, !dbg !15822

if.else5:                                         ; preds = %if.then
  %12 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %n, align 8, !dbg !15823
  %value6 = getelementptr inbounds %struct.splay_tree_node_s, %struct.splay_tree_node_s* %12, i32 0, i32 1, !dbg !15825
  %13 = load i64, i64* %value6, align 8, !dbg !15825
  %and7 = and i64 %13, 2, !dbg !15826
  %cmp8 = icmp ne i64 %and7, 0, !dbg !15827
  br i1 %cmp8, label %land.lhs.true, label %if.end28, !dbg !15828

land.lhs.true:                                    ; preds = %if.else5
  %14 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx.addr, align 8, !dbg !15829
  %15 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** @gimplify_omp_ctxp, align 8, !dbg !15830
  %cmp9 = icmp eq %struct.gimplify_omp_ctx* %14, %15, !dbg !15831
  br i1 %cmp9, label %if.then13, label %lor.lhs.false, !dbg !15832

lor.lhs.false:                                    ; preds = %land.lhs.true
  %16 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx.addr, align 8, !dbg !15833
  %region_type = getelementptr inbounds %struct.gimplify_omp_ctx, %struct.gimplify_omp_ctx* %16, i32 0, i32 5, !dbg !15834
  %17 = load i32, i32* %region_type, align 8, !dbg !15834
  %cmp10 = icmp eq i32 %17, 3, !dbg !15835
  br i1 %cmp10, label %land.lhs.true11, label %if.end28, !dbg !15836

land.lhs.true11:                                  ; preds = %lor.lhs.false
  %18 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** @gimplify_omp_ctxp, align 8, !dbg !15837
  %outer_context = getelementptr inbounds %struct.gimplify_omp_ctx, %struct.gimplify_omp_ctx* %18, i32 0, i32 0, !dbg !15838
  %19 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %outer_context, align 8, !dbg !15838
  %20 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx.addr, align 8, !dbg !15839
  %cmp12 = icmp eq %struct.gimplify_omp_ctx* %19, %20, !dbg !15840
  br i1 %cmp12, label %if.then13, label %if.end28, !dbg !15841

if.then13:                                        ; preds = %land.lhs.true11, %land.lhs.true
  %21 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %n, align 8, !dbg !15842
  %value14 = getelementptr inbounds %struct.splay_tree_node_s, %struct.splay_tree_node_s* %21, i32 0, i32 1, !dbg !15845
  %22 = load i64, i64* %value14, align 8, !dbg !15845
  %and15 = and i64 %22, 16, !dbg !15846
  %cmp16 = icmp ne i64 %and15, 0, !dbg !15847
  br i1 %cmp16, label %if.then17, label %if.else20, !dbg !15848

if.then17:                                        ; preds = %if.then13
  %23 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !15849
  %decl_minimal18 = bitcast %union.tree_node* %23 to %struct.tree_decl_minimal*, !dbg !15849
  %name19 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal18, i32 0, i32 3, !dbg !15849
  %24 = load %union.tree_node*, %union.tree_node** %name19, align 8, !dbg !15849
  call void (i8*, ...) @error(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.25, i64 0, i64 0), %union.tree_node* %24), !dbg !15850
  br label %if.end27, !dbg !15850

if.else20:                                        ; preds = %if.then13
  %25 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %n, align 8, !dbg !15851
  %value21 = getelementptr inbounds %struct.splay_tree_node_s, %struct.splay_tree_node_s* %25, i32 0, i32 1, !dbg !15853
  %26 = load i64, i64* %value21, align 8, !dbg !15853
  %and22 = and i64 %26, 64, !dbg !15854
  %cmp23 = icmp ne i64 %and22, 0, !dbg !15855
  br i1 %cmp23, label %if.then24, label %if.end, !dbg !15856

if.then24:                                        ; preds = %if.else20
  %27 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !15857
  %decl_minimal25 = bitcast %union.tree_node* %27 to %struct.tree_decl_minimal*, !dbg !15857
  %name26 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal25, i32 0, i32 3, !dbg !15857
  %28 = load %union.tree_node*, %union.tree_node** %name26, align 8, !dbg !15857
  call void (i8*, ...) @error(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.26, i64 0, i64 0), %union.tree_node* %28), !dbg !15858
  br label %if.end, !dbg !15858

if.end:                                           ; preds = %if.then24, %if.else20
  br label %if.end27

if.end27:                                         ; preds = %if.end, %if.then17
  br label %if.end28, !dbg !15859

if.end28:                                         ; preds = %if.end27, %land.lhs.true11, %lor.lhs.false, %if.else5
  br label %if.end29

if.end29:                                         ; preds = %if.end28
  %29 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx.addr, align 8, !dbg !15860
  %30 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** @gimplify_omp_ctxp, align 8, !dbg !15861
  %cmp30 = icmp eq %struct.gimplify_omp_ctx* %29, %30, !dbg !15862
  br i1 %cmp30, label %lor.end, label %lor.rhs, !dbg !15863

lor.rhs:                                          ; preds = %if.end29
  %31 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx.addr, align 8, !dbg !15864
  %region_type31 = getelementptr inbounds %struct.gimplify_omp_ctx, %struct.gimplify_omp_ctx* %31, i32 0, i32 5, !dbg !15865
  %32 = load i32, i32* %region_type31, align 8, !dbg !15865
  %cmp32 = icmp eq i32 %32, 3, !dbg !15866
  br i1 %cmp32, label %land.rhs, label %land.end, !dbg !15867

land.rhs:                                         ; preds = %lor.rhs
  %33 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** @gimplify_omp_ctxp, align 8, !dbg !15868
  %outer_context33 = getelementptr inbounds %struct.gimplify_omp_ctx, %struct.gimplify_omp_ctx* %33, i32 0, i32 0, !dbg !15869
  %34 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %outer_context33, align 8, !dbg !15869
  %35 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx.addr, align 8, !dbg !15870
  %cmp34 = icmp eq %struct.gimplify_omp_ctx* %34, %35, !dbg !15871
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %36 = phi i1 [ false, %lor.rhs ], [ %cmp34, %land.rhs ], !dbg !15872
  br label %lor.end, !dbg !15863

lor.end:                                          ; preds = %land.end, %if.end29
  %37 = phi i1 [ true, %if.end29 ], [ %36, %land.end ]
  %lor.ext = zext i1 %37 to i32, !dbg !15863
  %conv = trunc i32 %lor.ext to i8, !dbg !15873
  store i8 %conv, i8* %retval, align 1, !dbg !15874
  br label %return, !dbg !15874

if.end35:                                         ; preds = %entry
  %38 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx.addr, align 8, !dbg !15875
  %region_type36 = getelementptr inbounds %struct.gimplify_omp_ctx, %struct.gimplify_omp_ctx* %38, i32 0, i32 5, !dbg !15877
  %39 = load i32, i32* %region_type36, align 8, !dbg !15877
  %cmp37 = icmp ne i32 %39, 0, !dbg !15878
  br i1 %cmp37, label %if.then39, label %if.else40, !dbg !15879

if.then39:                                        ; preds = %if.end35
  store i8 0, i8* %retval, align 1, !dbg !15880
  br label %return, !dbg !15880

if.else40:                                        ; preds = %if.end35
  %40 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx.addr, align 8, !dbg !15881
  %outer_context41 = getelementptr inbounds %struct.gimplify_omp_ctx, %struct.gimplify_omp_ctx* %40, i32 0, i32 0, !dbg !15883
  %41 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %outer_context41, align 8, !dbg !15883
  %tobool42 = icmp ne %struct.gimplify_omp_ctx* %41, null, !dbg !15881
  br i1 %tobool42, label %if.then43, label %if.end46, !dbg !15884

if.then43:                                        ; preds = %if.else40
  %42 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %ctx.addr, align 8, !dbg !15885
  %outer_context44 = getelementptr inbounds %struct.gimplify_omp_ctx, %struct.gimplify_omp_ctx* %42, i32 0, i32 0, !dbg !15886
  %43 = load %struct.gimplify_omp_ctx*, %struct.gimplify_omp_ctx** %outer_context44, align 8, !dbg !15886
  %44 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !15887
  %call45 = call zeroext i8 @omp_is_private(%struct.gimplify_omp_ctx* %43, %union.tree_node* %44), !dbg !15888
  store i8 %call45, i8* %retval, align 1, !dbg !15889
  br label %return, !dbg !15889

if.end46:                                         ; preds = %if.else40
  br label %if.end47

if.end47:                                         ; preds = %if.end46
  store i8 0, i8* %retval, align 1, !dbg !15890
  br label %return, !dbg !15890

return:                                           ; preds = %if.end47, %if.then43, %if.then39, %lor.end, %if.else, %if.then3
  %45 = load i8, i8* %retval, align 1, !dbg !15891
  ret i8 %45, !dbg !15891
}

declare dso_local %union.gimple_statement_d* @gimple_build_omp_for(%struct.gimple_seq_d*, %union.tree_node*, i64, %struct.gimple_seq_d*) #3

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_omp_for_set_index(%union.gimple_statement_d* %gs, i64 %i, %union.tree_node* %index) #0 !dbg !15892 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i64, align 8
  %index.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !15895, metadata !DIExpression()), !dbg !15896
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !15897, metadata !DIExpression()), !dbg !15898
  store %union.tree_node* %index, %union.tree_node** %index.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %index.addr, metadata !15899, metadata !DIExpression()), !dbg !15900
  %0 = load i64, i64* %i.addr, align 8, !dbg !15901
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !15901
  %gimple_omp_for = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_omp_for*, !dbg !15901
  %collapse = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for, i32 0, i32 2, !dbg !15901
  %2 = load i64, i64* %collapse, align 8, !dbg !15901
  %cmp = icmp ult i64 %0, %2, !dbg !15901
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !15901

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.16, i64 0, i64 0), i32 3475, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !15901
  br label %cond.end, !dbg !15901

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !15901

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !15901
  %3 = load %union.tree_node*, %union.tree_node** %index.addr, align 8, !dbg !15902
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !15903
  %gimple_omp_for1 = bitcast %union.gimple_statement_d* %4 to %struct.gimple_statement_omp_for*, !dbg !15904
  %iter = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for1, i32 0, i32 3, !dbg !15905
  %5 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %iter, align 8, !dbg !15905
  %6 = load i64, i64* %i.addr, align 8, !dbg !15906
  %arrayidx = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %5, i64 %6, !dbg !15903
  %index2 = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %arrayidx, i32 0, i32 1, !dbg !15907
  store %union.tree_node* %3, %union.tree_node** %index2, align 8, !dbg !15908
  ret void, !dbg !15909
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_omp_for_set_initial(%union.gimple_statement_d* %gs, i64 %i, %union.tree_node* %initial) #0 !dbg !15910 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i64, align 8
  %initial.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !15911, metadata !DIExpression()), !dbg !15912
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !15913, metadata !DIExpression()), !dbg !15914
  store %union.tree_node* %initial, %union.tree_node** %initial.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %initial.addr, metadata !15915, metadata !DIExpression()), !dbg !15916
  %0 = load i64, i64* %i.addr, align 8, !dbg !15917
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !15917
  %gimple_omp_for = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_omp_for*, !dbg !15917
  %collapse = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for, i32 0, i32 2, !dbg !15917
  %2 = load i64, i64* %collapse, align 8, !dbg !15917
  %cmp = icmp ult i64 %0, %2, !dbg !15917
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !15917

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.16, i64 0, i64 0), i32 3508, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !15917
  br label %cond.end, !dbg !15917

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !15917

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !15917
  %3 = load %union.tree_node*, %union.tree_node** %initial.addr, align 8, !dbg !15918
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !15919
  %gimple_omp_for1 = bitcast %union.gimple_statement_d* %4 to %struct.gimple_statement_omp_for*, !dbg !15920
  %iter = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for1, i32 0, i32 3, !dbg !15921
  %5 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %iter, align 8, !dbg !15921
  %6 = load i64, i64* %i.addr, align 8, !dbg !15922
  %arrayidx = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %5, i64 %6, !dbg !15919
  %initial2 = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %arrayidx, i32 0, i32 2, !dbg !15923
  store %union.tree_node* %3, %union.tree_node** %initial2, align 8, !dbg !15924
  ret void, !dbg !15925
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_omp_for_set_cond(%union.gimple_statement_d* %gs, i64 %i, i32 %cond) #0 !dbg !15926 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i64, align 8
  %cond.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !15929, metadata !DIExpression()), !dbg !15930
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !15931, metadata !DIExpression()), !dbg !15932
  store i32 %cond, i32* %cond.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %cond.addr, metadata !15933, metadata !DIExpression()), !dbg !15934
  %0 = load i32, i32* %cond.addr, align 4, !dbg !15935
  %idxprom = sext i32 %0 to i64, !dbg !15935
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !15935
  %1 = load i32, i32* %arrayidx, align 4, !dbg !15935
  %cmp = icmp eq i32 %1, 5, !dbg !15935
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !15935

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.16, i64 0, i64 0), i32 4076, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !15935
  br label %cond.end, !dbg !15935

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !15935

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond1 = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !15935
  %2 = load i64, i64* %i.addr, align 8, !dbg !15936
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !15936
  %gimple_omp_for = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_omp_for*, !dbg !15936
  %collapse = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for, i32 0, i32 2, !dbg !15936
  %4 = load i64, i64* %collapse, align 8, !dbg !15936
  %cmp2 = icmp ult i64 %2, %4, !dbg !15936
  br i1 %cmp2, label %cond.false4, label %cond.true3, !dbg !15936

cond.true3:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.16, i64 0, i64 0), i32 4077, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !15936
  br label %cond.end5, !dbg !15936

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !15936

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !15936
  %5 = load i32, i32* %cond.addr, align 4, !dbg !15937
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !15938
  %gimple_omp_for7 = bitcast %union.gimple_statement_d* %6 to %struct.gimple_statement_omp_for*, !dbg !15939
  %iter = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for7, i32 0, i32 3, !dbg !15940
  %7 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %iter, align 8, !dbg !15940
  %8 = load i64, i64* %i.addr, align 8, !dbg !15941
  %arrayidx8 = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %7, i64 %8, !dbg !15938
  %cond9 = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %arrayidx8, i32 0, i32 0, !dbg !15942
  store i32 %5, i32* %cond9, align 8, !dbg !15943
  ret void, !dbg !15944
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_omp_for_set_final(%union.gimple_statement_d* %gs, i64 %i, %union.tree_node* %final) #0 !dbg !15945 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i64, align 8
  %final.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !15946, metadata !DIExpression()), !dbg !15947
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !15948, metadata !DIExpression()), !dbg !15949
  store %union.tree_node* %final, %union.tree_node** %final.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %final.addr, metadata !15950, metadata !DIExpression()), !dbg !15951
  %0 = load i64, i64* %i.addr, align 8, !dbg !15952
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !15952
  %gimple_omp_for = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_omp_for*, !dbg !15952
  %collapse = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for, i32 0, i32 2, !dbg !15952
  %2 = load i64, i64* %collapse, align 8, !dbg !15952
  %cmp = icmp ult i64 %0, %2, !dbg !15952
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !15952

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.16, i64 0, i64 0), i32 3541, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !15952
  br label %cond.end, !dbg !15952

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !15952

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !15952
  %3 = load %union.tree_node*, %union.tree_node** %final.addr, align 8, !dbg !15953
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !15954
  %gimple_omp_for1 = bitcast %union.gimple_statement_d* %4 to %struct.gimple_statement_omp_for*, !dbg !15955
  %iter = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for1, i32 0, i32 3, !dbg !15956
  %5 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %iter, align 8, !dbg !15956
  %6 = load i64, i64* %i.addr, align 8, !dbg !15957
  %arrayidx = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %5, i64 %6, !dbg !15954
  %final2 = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %arrayidx, i32 0, i32 3, !dbg !15958
  store %union.tree_node* %3, %union.tree_node** %final2, align 8, !dbg !15959
  ret void, !dbg !15960
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_omp_for_set_incr(%union.gimple_statement_d* %gs, i64 %i, %union.tree_node* %incr) #0 !dbg !15961 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i64, align 8
  %incr.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !15962, metadata !DIExpression()), !dbg !15963
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !15964, metadata !DIExpression()), !dbg !15965
  store %union.tree_node* %incr, %union.tree_node** %incr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %incr.addr, metadata !15966, metadata !DIExpression()), !dbg !15967
  %0 = load i64, i64* %i.addr, align 8, !dbg !15968
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !15968
  %gimple_omp_for = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_omp_for*, !dbg !15968
  %collapse = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for, i32 0, i32 2, !dbg !15968
  %2 = load i64, i64* %collapse, align 8, !dbg !15968
  %cmp = icmp ult i64 %0, %2, !dbg !15968
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !15968

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.16, i64 0, i64 0), i32 3574, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !15968
  br label %cond.end, !dbg !15968

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !15968

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !15968
  %3 = load %union.tree_node*, %union.tree_node** %incr.addr, align 8, !dbg !15969
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !15970
  %gimple_omp_for1 = bitcast %union.gimple_statement_d* %4 to %struct.gimple_statement_omp_for*, !dbg !15971
  %iter = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for1, i32 0, i32 3, !dbg !15972
  %5 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %iter, align 8, !dbg !15972
  %6 = load i64, i64* %i.addr, align 8, !dbg !15973
  %arrayidx = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %5, i64 %6, !dbg !15970
  %incr2 = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %arrayidx, i32 0, i32 4, !dbg !15974
  store %union.tree_node* %3, %union.tree_node** %incr2, align 8, !dbg !15975
  ret void, !dbg !15976
}

declare dso_local %union.gimple_statement_d* @gimple_build_omp_sections(%struct.gimple_seq_d*, %union.tree_node*) #3

declare dso_local %union.gimple_statement_d* @gimple_build_omp_single(%struct.gimple_seq_d*, %union.tree_node*) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @goa_stabilize_expr(%union.tree_node** %expr_p, %struct.gimple_seq_d** %pre_p, %union.tree_node* %lhs_addr, %union.tree_node* %lhs_var) #0 !dbg !15977 {
entry:
  %retval = alloca i32, align 4
  %expr_p.addr = alloca %union.tree_node**, align 8
  %pre_p.addr = alloca %struct.gimple_seq_d**, align 8
  %lhs_addr.addr = alloca %union.tree_node*, align 8
  %lhs_var.addr = alloca %union.tree_node*, align 8
  %expr = alloca %union.tree_node*, align 8
  %saw_lhs = alloca i32, align 4
  %gs = alloca i32, align 4
  store %union.tree_node** %expr_p, %union.tree_node*** %expr_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %expr_p.addr, metadata !15980, metadata !DIExpression()), !dbg !15981
  store %struct.gimple_seq_d** %pre_p, %struct.gimple_seq_d*** %pre_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %pre_p.addr, metadata !15982, metadata !DIExpression()), !dbg !15983
  store %union.tree_node* %lhs_addr, %union.tree_node** %lhs_addr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs_addr.addr, metadata !15984, metadata !DIExpression()), !dbg !15985
  store %union.tree_node* %lhs_var, %union.tree_node** %lhs_var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs_var.addr, metadata !15986, metadata !DIExpression()), !dbg !15987
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr, metadata !15988, metadata !DIExpression()), !dbg !15989
  %0 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !15990
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !15991
  store %union.tree_node* %1, %union.tree_node** %expr, align 8, !dbg !15989
  call void @llvm.dbg.declare(metadata i32* %saw_lhs, metadata !15992, metadata !DIExpression()), !dbg !15993
  %2 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !15994
  %3 = load %union.tree_node*, %union.tree_node** %lhs_addr.addr, align 8, !dbg !15996
  %call = call zeroext i8 @goa_lhs_expr_p(%union.tree_node* %2, %union.tree_node* %3), !dbg !15997
  %tobool = icmp ne i8 %call, 0, !dbg !15997
  br i1 %tobool, label %if.then, label %if.end, !dbg !15998

if.then:                                          ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %lhs_var.addr, align 8, !dbg !15999
  %5 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !16001
  store %union.tree_node* %4, %union.tree_node** %5, align 8, !dbg !16002
  store i32 1, i32* %retval, align 4, !dbg !16003
  br label %return, !dbg !16003

if.end:                                           ; preds = %entry
  %6 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !16004
  %call1 = call zeroext i8 @is_gimple_val(%union.tree_node* %6), !dbg !16006
  %tobool2 = icmp ne i8 %call1, 0, !dbg !16006
  br i1 %tobool2, label %if.then3, label %if.end4, !dbg !16007

if.then3:                                         ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !16008
  br label %return, !dbg !16008

if.end4:                                          ; preds = %if.end
  store i32 0, i32* %saw_lhs, align 4, !dbg !16009
  %7 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !16010
  %base = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !16010
  %8 = bitcast %struct.tree_base* %base to i64*, !dbg !16010
  %bf.load = load i64, i64* %8, align 8, !dbg !16010
  %bf.clear = and i64 %bf.load, 65535, !dbg !16010
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !16010
  %idxprom = sext i32 %bf.cast to i64, !dbg !16010
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !16010
  %9 = load i32, i32* %arrayidx, align 4, !dbg !16010
  switch i32 %9, label %sw.default29 [
    i32 7, label %sw.bb
    i32 5, label %sw.bb
    i32 6, label %sw.bb7
    i32 10, label %sw.bb13
  ], !dbg !16011

sw.bb:                                            ; preds = %if.end4, %if.end4
  %10 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !16012
  %exp = bitcast %union.tree_node* %10 to %struct.tree_exp*, !dbg !16012
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !16012
  %arrayidx5 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !16012
  %11 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !16014
  %12 = load %union.tree_node*, %union.tree_node** %lhs_addr.addr, align 8, !dbg !16015
  %13 = load %union.tree_node*, %union.tree_node** %lhs_var.addr, align 8, !dbg !16016
  %call6 = call i32 @goa_stabilize_expr(%union.tree_node** %arrayidx5, %struct.gimple_seq_d** %11, %union.tree_node* %12, %union.tree_node* %13), !dbg !16017
  %14 = load i32, i32* %saw_lhs, align 4, !dbg !16018
  %or = or i32 %14, %call6, !dbg !16018
  store i32 %or, i32* %saw_lhs, align 4, !dbg !16018
  br label %sw.bb7, !dbg !16019

sw.bb7:                                           ; preds = %if.end4, %sw.bb
  %15 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !16020
  %exp8 = bitcast %union.tree_node* %15 to %struct.tree_exp*, !dbg !16020
  %operands9 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp8, i32 0, i32 3, !dbg !16020
  %arrayidx10 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands9, i64 0, i64 0, !dbg !16020
  %16 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !16021
  %17 = load %union.tree_node*, %union.tree_node** %lhs_addr.addr, align 8, !dbg !16022
  %18 = load %union.tree_node*, %union.tree_node** %lhs_var.addr, align 8, !dbg !16023
  %call11 = call i32 @goa_stabilize_expr(%union.tree_node** %arrayidx10, %struct.gimple_seq_d** %16, %union.tree_node* %17, %union.tree_node* %18), !dbg !16024
  %19 = load i32, i32* %saw_lhs, align 4, !dbg !16025
  %or12 = or i32 %19, %call11, !dbg !16025
  store i32 %or12, i32* %saw_lhs, align 4, !dbg !16025
  br label %sw.epilog30, !dbg !16026

sw.bb13:                                          ; preds = %if.end4
  %20 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !16027
  %base14 = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !16027
  %21 = bitcast %struct.tree_base* %base14 to i64*, !dbg !16027
  %bf.load15 = load i64, i64* %21, align 8, !dbg !16027
  %bf.clear16 = and i64 %bf.load15, 65535, !dbg !16027
  %bf.cast17 = trunc i64 %bf.clear16 to i32, !dbg !16027
  switch i32 %bf.cast17, label %sw.default [
    i32 91, label %sw.bb18
    i32 92, label %sw.bb18
  ], !dbg !16028

sw.bb18:                                          ; preds = %sw.bb13, %sw.bb13
  %22 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !16029
  %exp19 = bitcast %union.tree_node* %22 to %struct.tree_exp*, !dbg !16029
  %operands20 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp19, i32 0, i32 3, !dbg !16029
  %arrayidx21 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands20, i64 0, i64 1, !dbg !16029
  %23 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !16031
  %24 = load %union.tree_node*, %union.tree_node** %lhs_addr.addr, align 8, !dbg !16032
  %25 = load %union.tree_node*, %union.tree_node** %lhs_var.addr, align 8, !dbg !16033
  %call22 = call i32 @goa_stabilize_expr(%union.tree_node** %arrayidx21, %struct.gimple_seq_d** %23, %union.tree_node* %24, %union.tree_node* %25), !dbg !16034
  %26 = load i32, i32* %saw_lhs, align 4, !dbg !16035
  %or23 = or i32 %26, %call22, !dbg !16035
  store i32 %or23, i32* %saw_lhs, align 4, !dbg !16035
  %27 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !16036
  %exp24 = bitcast %union.tree_node* %27 to %struct.tree_exp*, !dbg !16036
  %operands25 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp24, i32 0, i32 3, !dbg !16036
  %arrayidx26 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands25, i64 0, i64 0, !dbg !16036
  %28 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !16037
  %29 = load %union.tree_node*, %union.tree_node** %lhs_addr.addr, align 8, !dbg !16038
  %30 = load %union.tree_node*, %union.tree_node** %lhs_var.addr, align 8, !dbg !16039
  %call27 = call i32 @goa_stabilize_expr(%union.tree_node** %arrayidx26, %struct.gimple_seq_d** %28, %union.tree_node* %29, %union.tree_node* %30), !dbg !16040
  %31 = load i32, i32* %saw_lhs, align 4, !dbg !16041
  %or28 = or i32 %31, %call27, !dbg !16041
  store i32 %or28, i32* %saw_lhs, align 4, !dbg !16041
  br label %sw.epilog, !dbg !16042

sw.default:                                       ; preds = %sw.bb13
  br label %sw.epilog, !dbg !16043

sw.epilog:                                        ; preds = %sw.default, %sw.bb18
  br label %sw.epilog30, !dbg !16044

sw.default29:                                     ; preds = %if.end4
  br label %sw.epilog30, !dbg !16045

sw.epilog30:                                      ; preds = %sw.default29, %sw.epilog, %sw.bb7
  %32 = load i32, i32* %saw_lhs, align 4, !dbg !16046
  %cmp = icmp eq i32 %32, 0, !dbg !16048
  br i1 %cmp, label %if.then31, label %if.end36, !dbg !16049

if.then31:                                        ; preds = %sw.epilog30
  call void @llvm.dbg.declare(metadata i32* %gs, metadata !16050, metadata !DIExpression()), !dbg !16052
  %33 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !16053
  %34 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %pre_p.addr, align 8, !dbg !16054
  %call32 = call i32 @gimplify_expr(%union.tree_node** %33, %struct.gimple_seq_d** %34, %struct.gimple_seq_d** null, i8 (%union.tree_node*)* @is_gimple_val, i32 1), !dbg !16055
  store i32 %call32, i32* %gs, align 4, !dbg !16056
  %35 = load i32, i32* %gs, align 4, !dbg !16057
  %cmp33 = icmp ne i32 %35, 1, !dbg !16059
  br i1 %cmp33, label %if.then34, label %if.end35, !dbg !16060

if.then34:                                        ; preds = %if.then31
  store i32 -1, i32* %saw_lhs, align 4, !dbg !16061
  br label %if.end35, !dbg !16062

if.end35:                                         ; preds = %if.then34, %if.then31
  br label %if.end36, !dbg !16063

if.end36:                                         ; preds = %if.end35, %sw.epilog30
  %36 = load i32, i32* %saw_lhs, align 4, !dbg !16064
  store i32 %36, i32* %retval, align 4, !dbg !16065
  br label %return, !dbg !16065

return:                                           ; preds = %if.end36, %if.then3, %if.then
  %37 = load i32, i32* %retval, align 4, !dbg !16066
  ret i32 %37, !dbg !16066
}

declare dso_local %union.gimple_statement_d* @gimple_build_omp_atomic_load(%union.tree_node*, %union.tree_node*) #3

declare dso_local %union.gimple_statement_d* @gimple_build_omp_atomic_store(%union.tree_node*) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @goa_lhs_expr_p(%union.tree_node* %expr, %union.tree_node* %addr) #0 !dbg !16067 {
entry:
  %retval = alloca i8, align 1
  %expr.addr = alloca %union.tree_node*, align 8
  %addr.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !16070, metadata !DIExpression()), !dbg !16071
  store %union.tree_node* %addr, %union.tree_node** %addr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr.addr, metadata !16072, metadata !DIExpression()), !dbg !16073
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !16074
  %call = call %union.tree_node* @tree_ssa_strip_useless_type_conversions(%union.tree_node* %0), !dbg !16074
  store %union.tree_node* %call, %union.tree_node** %expr.addr, align 8, !dbg !16074
  %1 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !16075
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !16075
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !16075
  %bf.load = load i64, i64* %2, align 8, !dbg !16075
  %bf.clear = and i64 %bf.load, 65535, !dbg !16075
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !16075
  %cmp = icmp eq i32 %bf.cast, 47, !dbg !16077
  br i1 %cmp, label %if.then, label %if.end64, !dbg !16078

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !16079
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !16079
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !16079
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !16079
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !16079
  store %union.tree_node* %4, %union.tree_node** %expr.addr, align 8, !dbg !16081
  br label %while.cond, !dbg !16082

while.cond:                                       ; preds = %while.body, %if.then
  %5 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !16083
  %6 = load %union.tree_node*, %union.tree_node** %addr.addr, align 8, !dbg !16084
  %cmp1 = icmp ne %union.tree_node* %5, %6, !dbg !16085
  br i1 %cmp1, label %land.lhs.true, label %land.end, !dbg !16086

land.lhs.true:                                    ; preds = %while.cond
  %7 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !16087
  %base2 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !16087
  %8 = bitcast %struct.tree_base* %base2 to i64*, !dbg !16087
  %bf.load3 = load i64, i64* %8, align 8, !dbg !16087
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !16087
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !16087
  %cmp6 = icmp eq i32 %bf.cast5, 116, !dbg !16087
  br i1 %cmp6, label %land.lhs.true18, label %lor.lhs.false, !dbg !16087

lor.lhs.false:                                    ; preds = %land.lhs.true
  %9 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !16087
  %base7 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !16087
  %10 = bitcast %struct.tree_base* %base7 to i64*, !dbg !16087
  %bf.load8 = load i64, i64* %10, align 8, !dbg !16087
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !16087
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !16087
  %cmp11 = icmp eq i32 %bf.cast10, 113, !dbg !16087
  br i1 %cmp11, label %land.lhs.true18, label %lor.lhs.false12, !dbg !16088

lor.lhs.false12:                                  ; preds = %lor.lhs.false
  %11 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !16089
  %base13 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !16089
  %12 = bitcast %struct.tree_base* %base13 to i64*, !dbg !16089
  %bf.load14 = load i64, i64* %12, align 8, !dbg !16089
  %bf.clear15 = and i64 %bf.load14, 65535, !dbg !16089
  %bf.cast16 = trunc i64 %bf.clear15 to i32, !dbg !16089
  %cmp17 = icmp eq i32 %bf.cast16, 117, !dbg !16090
  br i1 %cmp17, label %land.lhs.true18, label %land.end, !dbg !16091

land.lhs.true18:                                  ; preds = %lor.lhs.false12, %lor.lhs.false, %land.lhs.true
  %13 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !16092
  %base19 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !16092
  %14 = bitcast %struct.tree_base* %base19 to i64*, !dbg !16092
  %bf.load20 = load i64, i64* %14, align 8, !dbg !16092
  %bf.clear21 = and i64 %bf.load20, 65535, !dbg !16092
  %bf.cast22 = trunc i64 %bf.clear21 to i32, !dbg !16092
  %15 = load %union.tree_node*, %union.tree_node** %addr.addr, align 8, !dbg !16093
  %base23 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !16093
  %16 = bitcast %struct.tree_base* %base23 to i64*, !dbg !16093
  %bf.load24 = load i64, i64* %16, align 8, !dbg !16093
  %bf.clear25 = and i64 %bf.load24, 65535, !dbg !16093
  %bf.cast26 = trunc i64 %bf.clear25 to i32, !dbg !16093
  %cmp27 = icmp eq i32 %bf.cast22, %bf.cast26, !dbg !16094
  br i1 %cmp27, label %land.rhs, label %land.end, !dbg !16095

land.rhs:                                         ; preds = %land.lhs.true18
  %17 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !16096
  %common = bitcast %union.tree_node* %17 to %struct.tree_common*, !dbg !16096
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !16096
  %18 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !16096
  %19 = load %union.tree_node*, %union.tree_node** %addr.addr, align 8, !dbg !16097
  %common28 = bitcast %union.tree_node* %19 to %struct.tree_common*, !dbg !16097
  %type29 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common28, i32 0, i32 2, !dbg !16097
  %20 = load %union.tree_node*, %union.tree_node** %type29, align 8, !dbg !16097
  %call30 = call zeroext i8 @types_compatible_p(%union.tree_node* %18, %union.tree_node* %20), !dbg !16098
  %conv = zext i8 %call30 to i32, !dbg !16098
  %tobool = icmp ne i32 %conv, 0, !dbg !16095
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true18, %lor.lhs.false12, %while.cond
  %21 = phi i1 [ false, %land.lhs.true18 ], [ false, %lor.lhs.false12 ], [ false, %while.cond ], [ %tobool, %land.rhs ], !dbg !16099
  br i1 %21, label %while.body, label %while.end, !dbg !16082

while.body:                                       ; preds = %land.end
  %22 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !16100
  %exp31 = bitcast %union.tree_node* %22 to %struct.tree_exp*, !dbg !16100
  %operands32 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp31, i32 0, i32 3, !dbg !16100
  %arrayidx33 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands32, i64 0, i64 0, !dbg !16100
  %23 = load %union.tree_node*, %union.tree_node** %arrayidx33, align 8, !dbg !16100
  store %union.tree_node* %23, %union.tree_node** %expr.addr, align 8, !dbg !16102
  %24 = load %union.tree_node*, %union.tree_node** %addr.addr, align 8, !dbg !16103
  %exp34 = bitcast %union.tree_node* %24 to %struct.tree_exp*, !dbg !16103
  %operands35 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp34, i32 0, i32 3, !dbg !16103
  %arrayidx36 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands35, i64 0, i64 0, !dbg !16103
  %25 = load %union.tree_node*, %union.tree_node** %arrayidx36, align 8, !dbg !16103
  store %union.tree_node* %25, %union.tree_node** %addr.addr, align 8, !dbg !16104
  br label %while.cond, !dbg !16082, !llvm.loop !16105

while.end:                                        ; preds = %land.end
  %26 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !16107
  %27 = load %union.tree_node*, %union.tree_node** %addr.addr, align 8, !dbg !16109
  %cmp37 = icmp eq %union.tree_node* %26, %27, !dbg !16110
  br i1 %cmp37, label %if.then39, label %if.end, !dbg !16111

if.then39:                                        ; preds = %while.end
  store i8 1, i8* %retval, align 1, !dbg !16112
  br label %return, !dbg !16112

if.end:                                           ; preds = %while.end
  %28 = load %union.tree_node*, %union.tree_node** %addr.addr, align 8, !dbg !16113
  %base40 = bitcast %union.tree_node* %28 to %struct.tree_base*, !dbg !16113
  %29 = bitcast %struct.tree_base* %base40 to i64*, !dbg !16113
  %bf.load41 = load i64, i64* %29, align 8, !dbg !16113
  %bf.clear42 = and i64 %bf.load41, 65535, !dbg !16113
  %bf.cast43 = trunc i64 %bf.clear42 to i32, !dbg !16113
  %cmp44 = icmp eq i32 %bf.cast43, 121, !dbg !16114
  br i1 %cmp44, label %land.lhs.true46, label %land.end62, !dbg !16115

land.lhs.true46:                                  ; preds = %if.end
  %30 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !16116
  %base47 = bitcast %union.tree_node* %30 to %struct.tree_base*, !dbg !16116
  %31 = bitcast %struct.tree_base* %base47 to i64*, !dbg !16116
  %bf.load48 = load i64, i64* %31, align 8, !dbg !16116
  %bf.clear49 = and i64 %bf.load48, 65535, !dbg !16116
  %bf.cast50 = trunc i64 %bf.clear49 to i32, !dbg !16116
  %cmp51 = icmp eq i32 %bf.cast50, 121, !dbg !16117
  br i1 %cmp51, label %land.rhs53, label %land.end62, !dbg !16118

land.rhs53:                                       ; preds = %land.lhs.true46
  %32 = load %union.tree_node*, %union.tree_node** %addr.addr, align 8, !dbg !16119
  %exp54 = bitcast %union.tree_node* %32 to %struct.tree_exp*, !dbg !16119
  %operands55 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp54, i32 0, i32 3, !dbg !16119
  %arrayidx56 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands55, i64 0, i64 0, !dbg !16119
  %33 = load %union.tree_node*, %union.tree_node** %arrayidx56, align 8, !dbg !16119
  %34 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !16120
  %exp57 = bitcast %union.tree_node* %34 to %struct.tree_exp*, !dbg !16120
  %operands58 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp57, i32 0, i32 3, !dbg !16120
  %arrayidx59 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands58, i64 0, i64 0, !dbg !16120
  %35 = load %union.tree_node*, %union.tree_node** %arrayidx59, align 8, !dbg !16120
  %cmp60 = icmp eq %union.tree_node* %33, %35, !dbg !16121
  br label %land.end62

land.end62:                                       ; preds = %land.rhs53, %land.lhs.true46, %if.end
  %36 = phi i1 [ false, %land.lhs.true46 ], [ false, %if.end ], [ %cmp60, %land.rhs53 ], !dbg !16099
  %land.ext = zext i1 %36 to i32, !dbg !16118
  %conv63 = trunc i32 %land.ext to i8, !dbg !16122
  store i8 %conv63, i8* %retval, align 1, !dbg !16123
  br label %return, !dbg !16123

if.end64:                                         ; preds = %entry
  %37 = load %union.tree_node*, %union.tree_node** %addr.addr, align 8, !dbg !16124
  %base65 = bitcast %union.tree_node* %37 to %struct.tree_base*, !dbg !16124
  %38 = bitcast %struct.tree_base* %base65 to i64*, !dbg !16124
  %bf.load66 = load i64, i64* %38, align 8, !dbg !16124
  %bf.clear67 = and i64 %bf.load66, 65535, !dbg !16124
  %bf.cast68 = trunc i64 %bf.clear67 to i32, !dbg !16124
  %cmp69 = icmp eq i32 %bf.cast68, 121, !dbg !16126
  br i1 %cmp69, label %land.lhs.true71, label %if.end78, !dbg !16127

land.lhs.true71:                                  ; preds = %if.end64
  %39 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !16128
  %40 = load %union.tree_node*, %union.tree_node** %addr.addr, align 8, !dbg !16129
  %exp72 = bitcast %union.tree_node* %40 to %struct.tree_exp*, !dbg !16129
  %operands73 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp72, i32 0, i32 3, !dbg !16129
  %arrayidx74 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands73, i64 0, i64 0, !dbg !16129
  %41 = load %union.tree_node*, %union.tree_node** %arrayidx74, align 8, !dbg !16129
  %cmp75 = icmp eq %union.tree_node* %39, %41, !dbg !16130
  br i1 %cmp75, label %if.then77, label %if.end78, !dbg !16131

if.then77:                                        ; preds = %land.lhs.true71
  store i8 1, i8* %retval, align 1, !dbg !16132
  br label %return, !dbg !16132

if.end78:                                         ; preds = %land.lhs.true71, %if.end64
  store i8 0, i8* %retval, align 1, !dbg !16133
  br label %return, !dbg !16133

return:                                           ; preds = %if.end78, %if.then77, %land.end62, %if.then39
  %42 = load i8, i8* %retval, align 1, !dbg !16134
  ret i8 %42, !dbg !16134
}

declare dso_local %union.tree_node* @fold_build2_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #3

declare dso_local void @gsi_insert_seq_after_without_update(%struct.gimple_stmt_iterator*, %struct.gimple_seq_d*, i32) #3

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @copy_if_shared_r(%union.tree_node** %tp, i32* %walk_subtrees, i8* %data) #0 !dbg !16135 {
entry:
  %tp.addr = alloca %union.tree_node**, align 8
  %walk_subtrees.addr = alloca i32*, align 8
  %data.addr = alloca i8*, align 8
  %t = alloca %union.tree_node*, align 8
  %code = alloca i32, align 4
  store %union.tree_node** %tp, %union.tree_node*** %tp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %tp.addr, metadata !16136, metadata !DIExpression()), !dbg !16137
  store i32* %walk_subtrees, i32** %walk_subtrees.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %walk_subtrees.addr, metadata !16138, metadata !DIExpression()), !dbg !16139
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !16140, metadata !DIExpression()), !dbg !16141
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !16142, metadata !DIExpression()), !dbg !16143
  %0 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !16144
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !16145
  store %union.tree_node* %1, %union.tree_node** %t, align 8, !dbg !16143
  call void @llvm.dbg.declare(metadata i32* %code, metadata !16146, metadata !DIExpression()), !dbg !16147
  %2 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16148
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !16148
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !16148
  %bf.load = load i64, i64* %3, align 8, !dbg !16148
  %bf.clear = and i64 %bf.load, 65535, !dbg !16148
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !16148
  store i32 %bf.cast, i32* %code, align 4, !dbg !16147
  %4 = load i32, i32* %code, align 4, !dbg !16149
  %idxprom = sext i32 %4 to i64, !dbg !16149
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !16149
  %5 = load i32, i32* %arrayidx, align 4, !dbg !16149
  %cmp = icmp eq i32 %5, 2, !dbg !16151
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !16152

lor.lhs.false:                                    ; preds = %entry
  %6 = load i32, i32* %code, align 4, !dbg !16153
  %idxprom1 = sext i32 %6 to i64, !dbg !16153
  %arrayidx2 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom1, !dbg !16153
  %7 = load i32, i32* %arrayidx2, align 4, !dbg !16153
  %cmp3 = icmp eq i32 %7, 3, !dbg !16154
  br i1 %cmp3, label %if.then, label %lor.lhs.false4, !dbg !16155

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %8 = load i32, i32* %code, align 4, !dbg !16156
  %idxprom5 = sext i32 %8 to i64, !dbg !16156
  %arrayidx6 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom5, !dbg !16156
  %9 = load i32, i32* %arrayidx6, align 4, !dbg !16156
  %cmp7 = icmp eq i32 %9, 1, !dbg !16157
  br i1 %cmp7, label %if.then, label %if.else16, !dbg !16158

if.then:                                          ; preds = %lor.lhs.false4, %lor.lhs.false, %entry
  %10 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16159
  %base8 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !16159
  %11 = bitcast %struct.tree_base* %base8 to i64*, !dbg !16159
  %bf.load9 = load i64, i64* %11, align 8, !dbg !16159
  %bf.lshr = lshr i64 %bf.load9, 40, !dbg !16159
  %bf.clear10 = and i64 %bf.lshr, 1, !dbg !16159
  %bf.cast11 = trunc i64 %bf.clear10 to i32, !dbg !16159
  %tobool = icmp ne i32 %bf.cast11, 0, !dbg !16159
  br i1 %tobool, label %if.then12, label %if.else, !dbg !16162

if.then12:                                        ; preds = %if.then
  %12 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !16163
  store i32 0, i32* %12, align 4, !dbg !16164
  br label %if.end, !dbg !16165

if.else:                                          ; preds = %if.then
  %13 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16166
  %base13 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !16166
  %14 = bitcast %struct.tree_base* %base13 to i64*, !dbg !16166
  %bf.load14 = load i64, i64* %14, align 8, !dbg !16167
  %bf.clear15 = and i64 %bf.load14, -1099511627777, !dbg !16167
  %bf.set = or i64 %bf.clear15, 1099511627776, !dbg !16167
  store i64 %bf.set, i64* %14, align 8, !dbg !16167
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then12
  br label %if.end30, !dbg !16168

if.else16:                                        ; preds = %lor.lhs.false4
  %15 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16169
  %base17 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !16169
  %16 = bitcast %struct.tree_base* %base17 to i64*, !dbg !16169
  %bf.load18 = load i64, i64* %16, align 8, !dbg !16169
  %bf.lshr19 = lshr i64 %bf.load18, 40, !dbg !16169
  %bf.clear20 = and i64 %bf.lshr19, 1, !dbg !16169
  %bf.cast21 = trunc i64 %bf.clear20 to i32, !dbg !16169
  %tobool22 = icmp ne i32 %bf.cast21, 0, !dbg !16169
  br i1 %tobool22, label %if.then23, label %if.else24, !dbg !16171

if.then23:                                        ; preds = %if.else16
  %17 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !16172
  %call = call %union.tree_node* @walk_tree_1(%union.tree_node** %17, %union.tree_node* (%union.tree_node**, i32*, i8*)* @mostly_copy_tree_r, i8* null, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !16172
  %18 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !16174
  store i32 0, i32* %18, align 4, !dbg !16175
  br label %if.end29, !dbg !16176

if.else24:                                        ; preds = %if.else16
  %19 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16177
  %base25 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !16177
  %20 = bitcast %struct.tree_base* %base25 to i64*, !dbg !16177
  %bf.load26 = load i64, i64* %20, align 8, !dbg !16178
  %bf.clear27 = and i64 %bf.load26, -1099511627777, !dbg !16178
  %bf.set28 = or i64 %bf.clear27, 1099511627776, !dbg !16178
  store i64 %bf.set28, i64* %20, align 8, !dbg !16178
  br label %if.end29

if.end29:                                         ; preds = %if.else24, %if.then23
  br label %if.end30

if.end30:                                         ; preds = %if.end29, %if.end
  ret %union.tree_node* null, !dbg !16179
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @unmark_visited_r(%union.tree_node** %tp, i32* %walk_subtrees, i8* %data) #0 !dbg !16180 {
entry:
  %tp.addr = alloca %union.tree_node**, align 8
  %walk_subtrees.addr = alloca i32*, align 8
  %data.addr = alloca i8*, align 8
  store %union.tree_node** %tp, %union.tree_node*** %tp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %tp.addr, metadata !16181, metadata !DIExpression()), !dbg !16182
  store i32* %walk_subtrees, i32** %walk_subtrees.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %walk_subtrees.addr, metadata !16183, metadata !DIExpression()), !dbg !16184
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !16185, metadata !DIExpression()), !dbg !16186
  %0 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !16187
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !16187
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !16187
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !16187
  %bf.load = load i64, i64* %2, align 8, !dbg !16187
  %bf.lshr = lshr i64 %bf.load, 40, !dbg !16187
  %bf.clear = and i64 %bf.lshr, 1, !dbg !16187
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !16187
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !16187
  br i1 %tobool, label %if.then, label %if.else, !dbg !16189

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !16190
  %4 = load %union.tree_node*, %union.tree_node** %3, align 8, !dbg !16190
  %base1 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !16190
  %5 = bitcast %struct.tree_base* %base1 to i64*, !dbg !16190
  %bf.load2 = load i64, i64* %5, align 8, !dbg !16191
  %bf.clear3 = and i64 %bf.load2, -1099511627777, !dbg !16191
  store i64 %bf.clear3, i64* %5, align 8, !dbg !16191
  br label %if.end, !dbg !16190

if.else:                                          ; preds = %entry
  %6 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !16192
  store i32 0, i32* %6, align 4, !dbg !16193
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret %union.tree_node* null, !dbg !16194
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !16195 {
entry:
  %retval = alloca %union.tree_node**, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !16198, metadata !DIExpression()), !dbg !16199
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !16200, metadata !DIExpression()), !dbg !16201
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !16202
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !16204
  %tobool = icmp ne i8 %call, 0, !dbg !16204
  br i1 %tobool, label %if.then, label %if.else, !dbg !16205

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !16206
  %call1 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %1), !dbg !16208
  %2 = load i32, i32* %i.addr, align 4, !dbg !16209
  %idx.ext = zext i32 %2 to i64, !dbg !16210
  %add.ptr = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idx.ext, !dbg !16210
  store %union.tree_node** %add.ptr, %union.tree_node*** %retval, align 8, !dbg !16211
  br label %return, !dbg !16211

if.else:                                          ; preds = %entry
  store %union.tree_node** null, %union.tree_node*** %retval, align 8, !dbg !16212
  br label %return, !dbg !16212

return:                                           ; preds = %if.else, %if.then
  %3 = load %union.tree_node**, %union.tree_node*** %retval, align 8, !dbg !16213
  ret %union.tree_node** %3, !dbg !16213
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) #0 !dbg !16214 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !16215, metadata !DIExpression()), !dbg !16216
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !16217
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !16218
  %cmp = icmp uge i32 %call, 1, !dbg !16219
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !16220

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !16221
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !16222
  %cmp2 = icmp ule i32 %call1, 9, !dbg !16223
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !16224
  %land.ext = zext i1 %2 to i32, !dbg !16220
  %conv = trunc i32 %land.ext to i8, !dbg !16218
  ret i8 %conv, !dbg !16225
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #0 !dbg !16226 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %off = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !16227, metadata !DIExpression()), !dbg !16228
  call void @llvm.dbg.declare(metadata i64* %off, metadata !16229, metadata !DIExpression()), !dbg !16230
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !16231
  %call = call i32 @gimple_statement_structure(%union.gimple_statement_d* %0), !dbg !16232
  %idxprom = zext i32 %call to i64, !dbg !16233
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* @gimple_ops_offset_, i64 0, i64 %idxprom, !dbg !16233
  %1 = load i64, i64* %arrayidx, align 8, !dbg !16233
  store i64 %1, i64* %off, align 8, !dbg !16234
  %2 = load i64, i64* %off, align 8, !dbg !16235
  %cmp = icmp ne i64 %2, 0, !dbg !16235
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !16235

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.16, i64 0, i64 0), i32 1622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !16235
  br label %cond.end, !dbg !16235

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !16235

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !16235
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !16236
  %4 = bitcast %union.gimple_statement_d* %3 to i8*, !dbg !16237
  %5 = load i64, i64* %off, align 8, !dbg !16238
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %5, !dbg !16239
  %6 = bitcast i8* %add.ptr to %union.tree_node**, !dbg !16240
  ret %union.tree_node** %6, !dbg !16241
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_statement_structure(%union.gimple_statement_d* %gs) #0 !dbg !16242 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !16245, metadata !DIExpression()), !dbg !16246
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !16247
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !16248
  %call1 = call i32 @gss_for_code(i32 %call), !dbg !16249
  ret i32 %call1, !dbg !16250
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gss_for_code(i32 %code) #0 !dbg !16251 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !16254, metadata !DIExpression()), !dbg !16255
  %0 = load i32, i32* %code.addr, align 4, !dbg !16256
  %idxprom = zext i32 %0 to i64, !dbg !16257
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @gss_for_code_, i64 0, i64 %idxprom, !dbg !16257
  %1 = load i32, i32* %arrayidx, align 4, !dbg !16257
  ret i32 %1, !dbg !16258
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %gs) #0 !dbg !16259 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !16260, metadata !DIExpression()), !dbg !16261
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !16262
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !16263
  ret %union.tree_node* %call, !dbg !16264
}

declare dso_local %union.tree_node* @make_ssa_name_fn(%struct.function*, %union.tree_node*, %union.gimple_statement_d*) #3

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!3235, !3236, !3237}
!llvm.ident = !{!3238}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "gimplify_ctxp", scope: !2, file: !3, line: 93, type: !3220, isLocal: true, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !1684, globals: !3196, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "gimplify.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !134, !329, !336, !342, !347, !352, !370, !377, !384, !423, !429, !442, !576, !589, !595, !1315, !1322, !1329, !1336, !1368, !1372, !1378, !1554, !1560, !1565, !1573, !1578, !1582, !1589, !1602, !1618, !1628, !1651, !1658}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !6, line: 7, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133}
!9 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!13 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!14 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!15 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!16 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!17 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!18 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!19 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!20 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!21 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!22 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!23 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!24 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!25 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!26 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!27 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!28 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!29 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!30 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!31 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!32 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!33 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!34 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!35 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!36 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!37 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!38 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!39 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!40 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!41 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!42 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!43 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!44 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!45 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!46 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!47 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!48 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!49 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!50 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!51 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!52 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!53 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!54 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!55 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!56 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!57 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!58 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!59 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!60 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!61 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!62 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!63 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!64 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!65 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!66 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!67 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!68 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!69 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!70 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!71 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!72 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!73 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!74 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!75 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!76 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!77 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!78 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!79 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!80 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!81 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!82 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!83 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!84 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!85 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!86 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!87 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!88 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!89 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!90 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!91 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!92 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!93 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!94 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!95 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!96 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!97 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!98 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!99 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!100 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!101 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!102 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!103 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!104 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!105 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!106 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!107 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!108 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!109 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!110 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!111 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!112 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!113 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!114 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!115 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!116 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!117 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!118 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!119 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!120 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!121 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!122 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!123 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!124 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!125 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!126 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!127 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!128 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!129 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!130 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!131 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!132 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!133 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!134 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !135, line: 39, baseType: !7, size: 32, elements: !136)
!135 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!136 = !{!137, !138, !139, !140, !141, !142, !143, !144, !145, !146, !147, !148, !149, !150, !151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328}
!137 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!138 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!139 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!140 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!141 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!142 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!143 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!144 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!145 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!146 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!147 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!148 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!149 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!150 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!151 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!152 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!153 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!154 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!155 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!156 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!157 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!158 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!159 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!160 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!161 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!162 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!163 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!164 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!165 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!166 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!167 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!168 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!169 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!170 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!171 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!172 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!173 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!174 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!175 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!176 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!177 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!178 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!179 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!180 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!181 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!182 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!183 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!184 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!185 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!186 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!187 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!188 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!189 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!190 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!191 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!192 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!193 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!194 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!195 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!196 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!197 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!198 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!199 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!200 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!201 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!202 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!203 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!204 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!205 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!206 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!207 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!208 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!209 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!210 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!211 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!212 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!213 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!214 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!215 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!216 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!217 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!218 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!219 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!220 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!221 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!222 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!223 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!224 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!225 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!226 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!227 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!228 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!229 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!230 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!231 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!232 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!233 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!234 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!235 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!236 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!237 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!238 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!239 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!240 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!241 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!242 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!243 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!244 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!245 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!246 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!247 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!248 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!249 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!250 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!251 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!252 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!253 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!254 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!255 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!256 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!257 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!258 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!259 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!260 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!261 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!262 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!263 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!264 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!265 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!266 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!267 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!268 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!269 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!270 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!271 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!272 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!273 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!274 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!275 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!276 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!277 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!278 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!279 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!280 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!281 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!282 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!283 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!284 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!285 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!286 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!287 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!288 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!289 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!290 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!291 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!292 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!293 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!294 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!295 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!296 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!297 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!298 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!299 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!300 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!301 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!302 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!303 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!304 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!305 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!306 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!307 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!308 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!309 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!310 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!311 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!312 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!313 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!314 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!315 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!316 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!317 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!318 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!319 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!320 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!321 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!322 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!323 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!324 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!325 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!326 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!327 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!328 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!329 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "eh_region_type", file: !330, line: 30, baseType: !7, size: 32, elements: !331)
!330 = !DIFile(filename: "./except.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!331 = !{!332, !333, !334, !335}
!332 = !DIEnumerator(name: "ERT_CLEANUP", value: 0, isUnsigned: true)
!333 = !DIEnumerator(name: "ERT_TRY", value: 1, isUnsigned: true)
!334 = !DIEnumerator(name: "ERT_ALLOWED_EXCEPTIONS", value: 2, isUnsigned: true)
!335 = !DIEnumerator(name: "ERT_MUST_NOT_THROW", value: 3, isUnsigned: true)
!336 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !337, line: 363, baseType: !7, size: 32, elements: !338)
!337 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!338 = !{!339, !340, !341}
!339 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!340 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!341 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!342 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !337, line: 355, baseType: !7, size: 32, elements: !343)
!343 = !{!344, !345, !346}
!344 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!345 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!346 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!347 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !348, line: 474, baseType: !7, size: 32, elements: !349)
!348 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!349 = !{!350, !351}
!350 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!351 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!352 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !135, line: 280, baseType: !7, size: 32, elements: !353)
!353 = !{!354, !355, !356, !357, !358, !359, !360, !361, !362, !363, !364, !365, !366, !367, !368, !369}
!354 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!355 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!356 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!357 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!358 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!359 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!360 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!361 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!362 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!363 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!364 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!365 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!366 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!367 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!368 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!369 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!370 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !135, line: 1817, baseType: !7, size: 32, elements: !371)
!371 = !{!372, !373, !374, !375, !376}
!372 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!373 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!374 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!375 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!376 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!377 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !135, line: 1805, baseType: !7, size: 32, elements: !378)
!378 = !{!379, !380, !381, !382, !383}
!379 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!380 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!381 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!382 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!383 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!384 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_code", file: !385, line: 51, baseType: !7, size: 32, elements: !386)
!385 = !DIFile(filename: "./gimple.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!386 = !{!387, !388, !389, !390, !391, !392, !393, !394, !395, !396, !397, !398, !399, !400, !401, !402, !403, !404, !405, !406, !407, !408, !409, !410, !411, !412, !413, !414, !415, !416, !417, !418, !419, !420, !421, !422}
!387 = !DIEnumerator(name: "GIMPLE_ERROR_MARK", value: 0, isUnsigned: true)
!388 = !DIEnumerator(name: "GIMPLE_COND", value: 1, isUnsigned: true)
!389 = !DIEnumerator(name: "GIMPLE_DEBUG", value: 2, isUnsigned: true)
!390 = !DIEnumerator(name: "GIMPLE_GOTO", value: 3, isUnsigned: true)
!391 = !DIEnumerator(name: "GIMPLE_LABEL", value: 4, isUnsigned: true)
!392 = !DIEnumerator(name: "GIMPLE_SWITCH", value: 5, isUnsigned: true)
!393 = !DIEnumerator(name: "GIMPLE_ASSIGN", value: 6, isUnsigned: true)
!394 = !DIEnumerator(name: "GIMPLE_ASM", value: 7, isUnsigned: true)
!395 = !DIEnumerator(name: "GIMPLE_CALL", value: 8, isUnsigned: true)
!396 = !DIEnumerator(name: "GIMPLE_RETURN", value: 9, isUnsigned: true)
!397 = !DIEnumerator(name: "GIMPLE_BIND", value: 10, isUnsigned: true)
!398 = !DIEnumerator(name: "GIMPLE_CATCH", value: 11, isUnsigned: true)
!399 = !DIEnumerator(name: "GIMPLE_EH_FILTER", value: 12, isUnsigned: true)
!400 = !DIEnumerator(name: "GIMPLE_EH_MUST_NOT_THROW", value: 13, isUnsigned: true)
!401 = !DIEnumerator(name: "GIMPLE_RESX", value: 14, isUnsigned: true)
!402 = !DIEnumerator(name: "GIMPLE_EH_DISPATCH", value: 15, isUnsigned: true)
!403 = !DIEnumerator(name: "GIMPLE_PHI", value: 16, isUnsigned: true)
!404 = !DIEnumerator(name: "GIMPLE_TRY", value: 17, isUnsigned: true)
!405 = !DIEnumerator(name: "GIMPLE_NOP", value: 18, isUnsigned: true)
!406 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_LOAD", value: 19, isUnsigned: true)
!407 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_STORE", value: 20, isUnsigned: true)
!408 = !DIEnumerator(name: "GIMPLE_OMP_CONTINUE", value: 21, isUnsigned: true)
!409 = !DIEnumerator(name: "GIMPLE_OMP_CRITICAL", value: 22, isUnsigned: true)
!410 = !DIEnumerator(name: "GIMPLE_OMP_FOR", value: 23, isUnsigned: true)
!411 = !DIEnumerator(name: "GIMPLE_OMP_MASTER", value: 24, isUnsigned: true)
!412 = !DIEnumerator(name: "GIMPLE_OMP_ORDERED", value: 25, isUnsigned: true)
!413 = !DIEnumerator(name: "GIMPLE_OMP_PARALLEL", value: 26, isUnsigned: true)
!414 = !DIEnumerator(name: "GIMPLE_OMP_TASK", value: 27, isUnsigned: true)
!415 = !DIEnumerator(name: "GIMPLE_OMP_RETURN", value: 28, isUnsigned: true)
!416 = !DIEnumerator(name: "GIMPLE_OMP_SECTION", value: 29, isUnsigned: true)
!417 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS", value: 30, isUnsigned: true)
!418 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS_SWITCH", value: 31, isUnsigned: true)
!419 = !DIEnumerator(name: "GIMPLE_OMP_SINGLE", value: 32, isUnsigned: true)
!420 = !DIEnumerator(name: "GIMPLE_PREDICT", value: 33, isUnsigned: true)
!421 = !DIEnumerator(name: "GIMPLE_WITH_CLEANUP_EXPR", value: 34, isUnsigned: true)
!422 = !DIEnumerator(name: "LAST_AND_UNUSED_GIMPLE_CODE", value: 35, isUnsigned: true)
!423 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_region_type", file: !3, line: 75, baseType: !7, size: 32, elements: !424)
!424 = !{!425, !426, !427, !428}
!425 = !DIEnumerator(name: "ORT_WORKSHARE", value: 0, isUnsigned: true)
!426 = !DIEnumerator(name: "ORT_TASK", value: 1, isUnsigned: true)
!427 = !DIEnumerator(name: "ORT_PARALLEL", value: 2, isUnsigned: true)
!428 = !DIEnumerator(name: "ORT_COMBINED_PARALLEL", value: 3, isUnsigned: true)
!429 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimplify_omp_var_data", file: !3, line: 58, baseType: !7, size: 32, elements: !430)
!430 = !{!431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441}
!431 = !DIEnumerator(name: "GOVD_SEEN", value: 1, isUnsigned: true)
!432 = !DIEnumerator(name: "GOVD_EXPLICIT", value: 2, isUnsigned: true)
!433 = !DIEnumerator(name: "GOVD_SHARED", value: 4, isUnsigned: true)
!434 = !DIEnumerator(name: "GOVD_PRIVATE", value: 8, isUnsigned: true)
!435 = !DIEnumerator(name: "GOVD_FIRSTPRIVATE", value: 16, isUnsigned: true)
!436 = !DIEnumerator(name: "GOVD_LASTPRIVATE", value: 32, isUnsigned: true)
!437 = !DIEnumerator(name: "GOVD_REDUCTION", value: 64, isUnsigned: true)
!438 = !DIEnumerator(name: "GOVD_LOCAL", value: 128, isUnsigned: true)
!439 = !DIEnumerator(name: "GOVD_DEBUG_PRIVATE", value: 256, isUnsigned: true)
!440 = !DIEnumerator(name: "GOVD_PRIVATE_OUTER_REF", value: 512, isUnsigned: true)
!441 = !DIEnumerator(name: "GOVD_DATA_SHARE_CLASS", value: 252, isUnsigned: true)
!442 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_index", file: !135, line: 3410, baseType: !7, size: 32, elements: !443)
!443 = !{!444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560, !561, !562, !563, !564, !565, !566, !567, !568, !569, !570, !571, !572, !573, !574, !575}
!444 = !DIEnumerator(name: "TI_ERROR_MARK", value: 0, isUnsigned: true)
!445 = !DIEnumerator(name: "TI_INTQI_TYPE", value: 1, isUnsigned: true)
!446 = !DIEnumerator(name: "TI_INTHI_TYPE", value: 2, isUnsigned: true)
!447 = !DIEnumerator(name: "TI_INTSI_TYPE", value: 3, isUnsigned: true)
!448 = !DIEnumerator(name: "TI_INTDI_TYPE", value: 4, isUnsigned: true)
!449 = !DIEnumerator(name: "TI_INTTI_TYPE", value: 5, isUnsigned: true)
!450 = !DIEnumerator(name: "TI_UINTQI_TYPE", value: 6, isUnsigned: true)
!451 = !DIEnumerator(name: "TI_UINTHI_TYPE", value: 7, isUnsigned: true)
!452 = !DIEnumerator(name: "TI_UINTSI_TYPE", value: 8, isUnsigned: true)
!453 = !DIEnumerator(name: "TI_UINTDI_TYPE", value: 9, isUnsigned: true)
!454 = !DIEnumerator(name: "TI_UINTTI_TYPE", value: 10, isUnsigned: true)
!455 = !DIEnumerator(name: "TI_UINT32_TYPE", value: 11, isUnsigned: true)
!456 = !DIEnumerator(name: "TI_UINT64_TYPE", value: 12, isUnsigned: true)
!457 = !DIEnumerator(name: "TI_INTEGER_ZERO", value: 13, isUnsigned: true)
!458 = !DIEnumerator(name: "TI_INTEGER_ONE", value: 14, isUnsigned: true)
!459 = !DIEnumerator(name: "TI_INTEGER_MINUS_ONE", value: 15, isUnsigned: true)
!460 = !DIEnumerator(name: "TI_NULL_POINTER", value: 16, isUnsigned: true)
!461 = !DIEnumerator(name: "TI_SIZE_ZERO", value: 17, isUnsigned: true)
!462 = !DIEnumerator(name: "TI_SIZE_ONE", value: 18, isUnsigned: true)
!463 = !DIEnumerator(name: "TI_BITSIZE_ZERO", value: 19, isUnsigned: true)
!464 = !DIEnumerator(name: "TI_BITSIZE_ONE", value: 20, isUnsigned: true)
!465 = !DIEnumerator(name: "TI_BITSIZE_UNIT", value: 21, isUnsigned: true)
!466 = !DIEnumerator(name: "TI_PUBLIC", value: 22, isUnsigned: true)
!467 = !DIEnumerator(name: "TI_PROTECTED", value: 23, isUnsigned: true)
!468 = !DIEnumerator(name: "TI_PRIVATE", value: 24, isUnsigned: true)
!469 = !DIEnumerator(name: "TI_BOOLEAN_FALSE", value: 25, isUnsigned: true)
!470 = !DIEnumerator(name: "TI_BOOLEAN_TRUE", value: 26, isUnsigned: true)
!471 = !DIEnumerator(name: "TI_COMPLEX_INTEGER_TYPE", value: 27, isUnsigned: true)
!472 = !DIEnumerator(name: "TI_COMPLEX_FLOAT_TYPE", value: 28, isUnsigned: true)
!473 = !DIEnumerator(name: "TI_COMPLEX_DOUBLE_TYPE", value: 29, isUnsigned: true)
!474 = !DIEnumerator(name: "TI_COMPLEX_LONG_DOUBLE_TYPE", value: 30, isUnsigned: true)
!475 = !DIEnumerator(name: "TI_FLOAT_TYPE", value: 31, isUnsigned: true)
!476 = !DIEnumerator(name: "TI_DOUBLE_TYPE", value: 32, isUnsigned: true)
!477 = !DIEnumerator(name: "TI_LONG_DOUBLE_TYPE", value: 33, isUnsigned: true)
!478 = !DIEnumerator(name: "TI_FLOAT_PTR_TYPE", value: 34, isUnsigned: true)
!479 = !DIEnumerator(name: "TI_DOUBLE_PTR_TYPE", value: 35, isUnsigned: true)
!480 = !DIEnumerator(name: "TI_LONG_DOUBLE_PTR_TYPE", value: 36, isUnsigned: true)
!481 = !DIEnumerator(name: "TI_INTEGER_PTR_TYPE", value: 37, isUnsigned: true)
!482 = !DIEnumerator(name: "TI_VOID_TYPE", value: 38, isUnsigned: true)
!483 = !DIEnumerator(name: "TI_PTR_TYPE", value: 39, isUnsigned: true)
!484 = !DIEnumerator(name: "TI_CONST_PTR_TYPE", value: 40, isUnsigned: true)
!485 = !DIEnumerator(name: "TI_SIZE_TYPE", value: 41, isUnsigned: true)
!486 = !DIEnumerator(name: "TI_PID_TYPE", value: 42, isUnsigned: true)
!487 = !DIEnumerator(name: "TI_PTRDIFF_TYPE", value: 43, isUnsigned: true)
!488 = !DIEnumerator(name: "TI_VA_LIST_TYPE", value: 44, isUnsigned: true)
!489 = !DIEnumerator(name: "TI_VA_LIST_GPR_COUNTER_FIELD", value: 45, isUnsigned: true)
!490 = !DIEnumerator(name: "TI_VA_LIST_FPR_COUNTER_FIELD", value: 46, isUnsigned: true)
!491 = !DIEnumerator(name: "TI_BOOLEAN_TYPE", value: 47, isUnsigned: true)
!492 = !DIEnumerator(name: "TI_FILEPTR_TYPE", value: 48, isUnsigned: true)
!493 = !DIEnumerator(name: "TI_DFLOAT32_TYPE", value: 49, isUnsigned: true)
!494 = !DIEnumerator(name: "TI_DFLOAT64_TYPE", value: 50, isUnsigned: true)
!495 = !DIEnumerator(name: "TI_DFLOAT128_TYPE", value: 51, isUnsigned: true)
!496 = !DIEnumerator(name: "TI_DFLOAT32_PTR_TYPE", value: 52, isUnsigned: true)
!497 = !DIEnumerator(name: "TI_DFLOAT64_PTR_TYPE", value: 53, isUnsigned: true)
!498 = !DIEnumerator(name: "TI_DFLOAT128_PTR_TYPE", value: 54, isUnsigned: true)
!499 = !DIEnumerator(name: "TI_VOID_LIST_NODE", value: 55, isUnsigned: true)
!500 = !DIEnumerator(name: "TI_MAIN_IDENTIFIER", value: 56, isUnsigned: true)
!501 = !DIEnumerator(name: "TI_SAT_SFRACT_TYPE", value: 57, isUnsigned: true)
!502 = !DIEnumerator(name: "TI_SAT_FRACT_TYPE", value: 58, isUnsigned: true)
!503 = !DIEnumerator(name: "TI_SAT_LFRACT_TYPE", value: 59, isUnsigned: true)
!504 = !DIEnumerator(name: "TI_SAT_LLFRACT_TYPE", value: 60, isUnsigned: true)
!505 = !DIEnumerator(name: "TI_SAT_USFRACT_TYPE", value: 61, isUnsigned: true)
!506 = !DIEnumerator(name: "TI_SAT_UFRACT_TYPE", value: 62, isUnsigned: true)
!507 = !DIEnumerator(name: "TI_SAT_ULFRACT_TYPE", value: 63, isUnsigned: true)
!508 = !DIEnumerator(name: "TI_SAT_ULLFRACT_TYPE", value: 64, isUnsigned: true)
!509 = !DIEnumerator(name: "TI_SFRACT_TYPE", value: 65, isUnsigned: true)
!510 = !DIEnumerator(name: "TI_FRACT_TYPE", value: 66, isUnsigned: true)
!511 = !DIEnumerator(name: "TI_LFRACT_TYPE", value: 67, isUnsigned: true)
!512 = !DIEnumerator(name: "TI_LLFRACT_TYPE", value: 68, isUnsigned: true)
!513 = !DIEnumerator(name: "TI_USFRACT_TYPE", value: 69, isUnsigned: true)
!514 = !DIEnumerator(name: "TI_UFRACT_TYPE", value: 70, isUnsigned: true)
!515 = !DIEnumerator(name: "TI_ULFRACT_TYPE", value: 71, isUnsigned: true)
!516 = !DIEnumerator(name: "TI_ULLFRACT_TYPE", value: 72, isUnsigned: true)
!517 = !DIEnumerator(name: "TI_SAT_SACCUM_TYPE", value: 73, isUnsigned: true)
!518 = !DIEnumerator(name: "TI_SAT_ACCUM_TYPE", value: 74, isUnsigned: true)
!519 = !DIEnumerator(name: "TI_SAT_LACCUM_TYPE", value: 75, isUnsigned: true)
!520 = !DIEnumerator(name: "TI_SAT_LLACCUM_TYPE", value: 76, isUnsigned: true)
!521 = !DIEnumerator(name: "TI_SAT_USACCUM_TYPE", value: 77, isUnsigned: true)
!522 = !DIEnumerator(name: "TI_SAT_UACCUM_TYPE", value: 78, isUnsigned: true)
!523 = !DIEnumerator(name: "TI_SAT_ULACCUM_TYPE", value: 79, isUnsigned: true)
!524 = !DIEnumerator(name: "TI_SAT_ULLACCUM_TYPE", value: 80, isUnsigned: true)
!525 = !DIEnumerator(name: "TI_SACCUM_TYPE", value: 81, isUnsigned: true)
!526 = !DIEnumerator(name: "TI_ACCUM_TYPE", value: 82, isUnsigned: true)
!527 = !DIEnumerator(name: "TI_LACCUM_TYPE", value: 83, isUnsigned: true)
!528 = !DIEnumerator(name: "TI_LLACCUM_TYPE", value: 84, isUnsigned: true)
!529 = !DIEnumerator(name: "TI_USACCUM_TYPE", value: 85, isUnsigned: true)
!530 = !DIEnumerator(name: "TI_UACCUM_TYPE", value: 86, isUnsigned: true)
!531 = !DIEnumerator(name: "TI_ULACCUM_TYPE", value: 87, isUnsigned: true)
!532 = !DIEnumerator(name: "TI_ULLACCUM_TYPE", value: 88, isUnsigned: true)
!533 = !DIEnumerator(name: "TI_QQ_TYPE", value: 89, isUnsigned: true)
!534 = !DIEnumerator(name: "TI_HQ_TYPE", value: 90, isUnsigned: true)
!535 = !DIEnumerator(name: "TI_SQ_TYPE", value: 91, isUnsigned: true)
!536 = !DIEnumerator(name: "TI_DQ_TYPE", value: 92, isUnsigned: true)
!537 = !DIEnumerator(name: "TI_TQ_TYPE", value: 93, isUnsigned: true)
!538 = !DIEnumerator(name: "TI_UQQ_TYPE", value: 94, isUnsigned: true)
!539 = !DIEnumerator(name: "TI_UHQ_TYPE", value: 95, isUnsigned: true)
!540 = !DIEnumerator(name: "TI_USQ_TYPE", value: 96, isUnsigned: true)
!541 = !DIEnumerator(name: "TI_UDQ_TYPE", value: 97, isUnsigned: true)
!542 = !DIEnumerator(name: "TI_UTQ_TYPE", value: 98, isUnsigned: true)
!543 = !DIEnumerator(name: "TI_SAT_QQ_TYPE", value: 99, isUnsigned: true)
!544 = !DIEnumerator(name: "TI_SAT_HQ_TYPE", value: 100, isUnsigned: true)
!545 = !DIEnumerator(name: "TI_SAT_SQ_TYPE", value: 101, isUnsigned: true)
!546 = !DIEnumerator(name: "TI_SAT_DQ_TYPE", value: 102, isUnsigned: true)
!547 = !DIEnumerator(name: "TI_SAT_TQ_TYPE", value: 103, isUnsigned: true)
!548 = !DIEnumerator(name: "TI_SAT_UQQ_TYPE", value: 104, isUnsigned: true)
!549 = !DIEnumerator(name: "TI_SAT_UHQ_TYPE", value: 105, isUnsigned: true)
!550 = !DIEnumerator(name: "TI_SAT_USQ_TYPE", value: 106, isUnsigned: true)
!551 = !DIEnumerator(name: "TI_SAT_UDQ_TYPE", value: 107, isUnsigned: true)
!552 = !DIEnumerator(name: "TI_SAT_UTQ_TYPE", value: 108, isUnsigned: true)
!553 = !DIEnumerator(name: "TI_HA_TYPE", value: 109, isUnsigned: true)
!554 = !DIEnumerator(name: "TI_SA_TYPE", value: 110, isUnsigned: true)
!555 = !DIEnumerator(name: "TI_DA_TYPE", value: 111, isUnsigned: true)
!556 = !DIEnumerator(name: "TI_TA_TYPE", value: 112, isUnsigned: true)
!557 = !DIEnumerator(name: "TI_UHA_TYPE", value: 113, isUnsigned: true)
!558 = !DIEnumerator(name: "TI_USA_TYPE", value: 114, isUnsigned: true)
!559 = !DIEnumerator(name: "TI_UDA_TYPE", value: 115, isUnsigned: true)
!560 = !DIEnumerator(name: "TI_UTA_TYPE", value: 116, isUnsigned: true)
!561 = !DIEnumerator(name: "TI_SAT_HA_TYPE", value: 117, isUnsigned: true)
!562 = !DIEnumerator(name: "TI_SAT_SA_TYPE", value: 118, isUnsigned: true)
!563 = !DIEnumerator(name: "TI_SAT_DA_TYPE", value: 119, isUnsigned: true)
!564 = !DIEnumerator(name: "TI_SAT_TA_TYPE", value: 120, isUnsigned: true)
!565 = !DIEnumerator(name: "TI_SAT_UHA_TYPE", value: 121, isUnsigned: true)
!566 = !DIEnumerator(name: "TI_SAT_USA_TYPE", value: 122, isUnsigned: true)
!567 = !DIEnumerator(name: "TI_SAT_UDA_TYPE", value: 123, isUnsigned: true)
!568 = !DIEnumerator(name: "TI_SAT_UTA_TYPE", value: 124, isUnsigned: true)
!569 = !DIEnumerator(name: "TI_OPTIMIZATION_DEFAULT", value: 125, isUnsigned: true)
!570 = !DIEnumerator(name: "TI_OPTIMIZATION_CURRENT", value: 126, isUnsigned: true)
!571 = !DIEnumerator(name: "TI_TARGET_OPTION_DEFAULT", value: 127, isUnsigned: true)
!572 = !DIEnumerator(name: "TI_TARGET_OPTION_CURRENT", value: 128, isUnsigned: true)
!573 = !DIEnumerator(name: "TI_CURRENT_TARGET_PRAGMA", value: 129, isUnsigned: true)
!574 = !DIEnumerator(name: "TI_CURRENT_OPTIMIZE_PRAGMA", value: 130, isUnsigned: true)
!575 = !DIEnumerator(name: "TI_MAX", value: 131, isUnsigned: true)
!576 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code_class", file: !135, line: 58, baseType: !7, size: 32, elements: !577)
!577 = !{!578, !579, !580, !581, !582, !583, !584, !585, !586, !587, !588}
!578 = !DIEnumerator(name: "tcc_exceptional", value: 0, isUnsigned: true)
!579 = !DIEnumerator(name: "tcc_constant", value: 1, isUnsigned: true)
!580 = !DIEnumerator(name: "tcc_type", value: 2, isUnsigned: true)
!581 = !DIEnumerator(name: "tcc_declaration", value: 3, isUnsigned: true)
!582 = !DIEnumerator(name: "tcc_reference", value: 4, isUnsigned: true)
!583 = !DIEnumerator(name: "tcc_comparison", value: 5, isUnsigned: true)
!584 = !DIEnumerator(name: "tcc_unary", value: 6, isUnsigned: true)
!585 = !DIEnumerator(name: "tcc_binary", value: 7, isUnsigned: true)
!586 = !DIEnumerator(name: "tcc_statement", value: 8, isUnsigned: true)
!587 = !DIEnumerator(name: "tcc_vl_exp", value: 9, isUnsigned: true)
!588 = !DIEnumerator(name: "tcc_expression", value: 10, isUnsigned: true)
!589 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "built_in_class", file: !135, line: 205, baseType: !7, size: 32, elements: !590)
!590 = !{!591, !592, !593, !594}
!591 = !DIEnumerator(name: "NOT_BUILT_IN", value: 0, isUnsigned: true)
!592 = !DIEnumerator(name: "BUILT_IN_FRONTEND", value: 1, isUnsigned: true)
!593 = !DIEnumerator(name: "BUILT_IN_MD", value: 2, isUnsigned: true)
!594 = !DIEnumerator(name: "BUILT_IN_NORMAL", value: 3, isUnsigned: true)
!595 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "built_in_function", file: !135, line: 220, baseType: !7, size: 32, elements: !596)
!596 = !{!597, !598, !599, !600, !601, !602, !603, !604, !605, !606, !607, !608, !609, !610, !611, !612, !613, !614, !615, !616, !617, !618, !619, !620, !621, !622, !623, !624, !625, !626, !627, !628, !629, !630, !631, !632, !633, !634, !635, !636, !637, !638, !639, !640, !641, !642, !643, !644, !645, !646, !647, !648, !649, !650, !651, !652, !653, !654, !655, !656, !657, !658, !659, !660, !661, !662, !663, !664, !665, !666, !667, !668, !669, !670, !671, !672, !673, !674, !675, !676, !677, !678, !679, !680, !681, !682, !683, !684, !685, !686, !687, !688, !689, !690, !691, !692, !693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707, !708, !709, !710, !711, !712, !713, !714, !715, !716, !717, !718, !719, !720, !721, !722, !723, !724, !725, !726, !727, !728, !729, !730, !731, !732, !733, !734, !735, !736, !737, !738, !739, !740, !741, !742, !743, !744, !745, !746, !747, !748, !749, !750, !751, !752, !753, !754, !755, !756, !757, !758, !759, !760, !761, !762, !763, !764, !765, !766, !767, !768, !769, !770, !771, !772, !773, !774, !775, !776, !777, !778, !779, !780, !781, !782, !783, !784, !785, !786, !787, !788, !789, !790, !791, !792, !793, !794, !795, !796, !797, !798, !799, !800, !801, !802, !803, !804, !805, !806, !807, !808, !809, !810, !811, !812, !813, !814, !815, !816, !817, !818, !819, !820, !821, !822, !823, !824, !825, !826, !827, !828, !829, !830, !831, !832, !833, !834, !835, !836, !837, !838, !839, !840, !841, !842, !843, !844, !845, !846, !847, !848, !849, !850, !851, !852, !853, !854, !855, !856, !857, !858, !859, !860, !861, !862, !863, !864, !865, !866, !867, !868, !869, !870, !871, !872, !873, !874, !875, !876, !877, !878, !879, !880, !881, !882, !883, !884, !885, !886, !887, !888, !889, !890, !891, !892, !893, !894, !895, !896, !897, !898, !899, !900, !901, !902, !903, !904, !905, !906, !907, !908, !909, !910, !911, !912, !913, !914, !915, !916, !917, !918, !919, !920, !921, !922, !923, !924, !925, !926, !927, !928, !929, !930, !931, !932, !933, !934, !935, !936, !937, !938, !939, !940, !941, !942, !943, !944, !945, !946, !947, !948, !949, !950, !951, !952, !953, !954, !955, !956, !957, !958, !959, !960, !961, !962, !963, !964, !965, !966, !967, !968, !969, !970, !971, !972, !973, !974, !975, !976, !977, !978, !979, !980, !981, !982, !983, !984, !985, !986, !987, !988, !989, !990, !991, !992, !993, !994, !995, !996, !997, !998, !999, !1000, !1001, !1002, !1003, !1004, !1005, !1006, !1007, !1008, !1009, !1010, !1011, !1012, !1013, !1014, !1015, !1016, !1017, !1018, !1019, !1020, !1021, !1022, !1023, !1024, !1025, !1026, !1027, !1028, !1029, !1030, !1031, !1032, !1033, !1034, !1035, !1036, !1037, !1038, !1039, !1040, !1041, !1042, !1043, !1044, !1045, !1046, !1047, !1048, !1049, !1050, !1051, !1052, !1053, !1054, !1055, !1056, !1057, !1058, !1059, !1060, !1061, !1062, !1063, !1064, !1065, !1066, !1067, !1068, !1069, !1070, !1071, !1072, !1073, !1074, !1075, !1076, !1077, !1078, !1079, !1080, !1081, !1082, !1083, !1084, !1085, !1086, !1087, !1088, !1089, !1090, !1091, !1092, !1093, !1094, !1095, !1096, !1097, !1098, !1099, !1100, !1101, !1102, !1103, !1104, !1105, !1106, !1107, !1108, !1109, !1110, !1111, !1112, !1113, !1114, !1115, !1116, !1117, !1118, !1119, !1120, !1121, !1122, !1123, !1124, !1125, !1126, !1127, !1128, !1129, !1130, !1131, !1132, !1133, !1134, !1135, !1136, !1137, !1138, !1139, !1140, !1141, !1142, !1143, !1144, !1145, !1146, !1147, !1148, !1149, !1150, !1151, !1152, !1153, !1154, !1155, !1156, !1157, !1158, !1159, !1160, !1161, !1162, !1163, !1164, !1165, !1166, !1167, !1168, !1169, !1170, !1171, !1172, !1173, !1174, !1175, !1176, !1177, !1178, !1179, !1180, !1181, !1182, !1183, !1184, !1185, !1186, !1187, !1188, !1189, !1190, !1191, !1192, !1193, !1194, !1195, !1196, !1197, !1198, !1199, !1200, !1201, !1202, !1203, !1204, !1205, !1206, !1207, !1208, !1209, !1210, !1211, !1212, !1213, !1214, !1215, !1216, !1217, !1218, !1219, !1220, !1221, !1222, !1223, !1224, !1225, !1226, !1227, !1228, !1229, !1230, !1231, !1232, !1233, !1234, !1235, !1236, !1237, !1238, !1239, !1240, !1241, !1242, !1243, !1244, !1245, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258, !1259, !1260, !1261, !1262, !1263, !1264, !1265, !1266, !1267, !1268, !1269, !1270, !1271, !1272, !1273, !1274, !1275, !1276, !1277, !1278, !1279, !1280, !1281, !1282, !1283, !1284, !1285, !1286, !1287, !1288, !1289, !1290, !1291, !1292, !1293, !1294, !1295, !1296, !1297, !1298, !1299, !1300, !1301, !1302, !1303, !1304, !1305, !1306, !1307, !1308, !1309, !1310, !1311, !1312, !1313, !1314}
!597 = !DIEnumerator(name: "BUILT_IN_ACOS", value: 0, isUnsigned: true)
!598 = !DIEnumerator(name: "BUILT_IN_ACOSF", value: 1, isUnsigned: true)
!599 = !DIEnumerator(name: "BUILT_IN_ACOSH", value: 2, isUnsigned: true)
!600 = !DIEnumerator(name: "BUILT_IN_ACOSHF", value: 3, isUnsigned: true)
!601 = !DIEnumerator(name: "BUILT_IN_ACOSHL", value: 4, isUnsigned: true)
!602 = !DIEnumerator(name: "BUILT_IN_ACOSL", value: 5, isUnsigned: true)
!603 = !DIEnumerator(name: "BUILT_IN_ASIN", value: 6, isUnsigned: true)
!604 = !DIEnumerator(name: "BUILT_IN_ASINF", value: 7, isUnsigned: true)
!605 = !DIEnumerator(name: "BUILT_IN_ASINH", value: 8, isUnsigned: true)
!606 = !DIEnumerator(name: "BUILT_IN_ASINHF", value: 9, isUnsigned: true)
!607 = !DIEnumerator(name: "BUILT_IN_ASINHL", value: 10, isUnsigned: true)
!608 = !DIEnumerator(name: "BUILT_IN_ASINL", value: 11, isUnsigned: true)
!609 = !DIEnumerator(name: "BUILT_IN_ATAN", value: 12, isUnsigned: true)
!610 = !DIEnumerator(name: "BUILT_IN_ATAN2", value: 13, isUnsigned: true)
!611 = !DIEnumerator(name: "BUILT_IN_ATAN2F", value: 14, isUnsigned: true)
!612 = !DIEnumerator(name: "BUILT_IN_ATAN2L", value: 15, isUnsigned: true)
!613 = !DIEnumerator(name: "BUILT_IN_ATANF", value: 16, isUnsigned: true)
!614 = !DIEnumerator(name: "BUILT_IN_ATANH", value: 17, isUnsigned: true)
!615 = !DIEnumerator(name: "BUILT_IN_ATANHF", value: 18, isUnsigned: true)
!616 = !DIEnumerator(name: "BUILT_IN_ATANHL", value: 19, isUnsigned: true)
!617 = !DIEnumerator(name: "BUILT_IN_ATANL", value: 20, isUnsigned: true)
!618 = !DIEnumerator(name: "BUILT_IN_CBRT", value: 21, isUnsigned: true)
!619 = !DIEnumerator(name: "BUILT_IN_CBRTF", value: 22, isUnsigned: true)
!620 = !DIEnumerator(name: "BUILT_IN_CBRTL", value: 23, isUnsigned: true)
!621 = !DIEnumerator(name: "BUILT_IN_CEIL", value: 24, isUnsigned: true)
!622 = !DIEnumerator(name: "BUILT_IN_CEILF", value: 25, isUnsigned: true)
!623 = !DIEnumerator(name: "BUILT_IN_CEILL", value: 26, isUnsigned: true)
!624 = !DIEnumerator(name: "BUILT_IN_COPYSIGN", value: 27, isUnsigned: true)
!625 = !DIEnumerator(name: "BUILT_IN_COPYSIGNF", value: 28, isUnsigned: true)
!626 = !DIEnumerator(name: "BUILT_IN_COPYSIGNL", value: 29, isUnsigned: true)
!627 = !DIEnumerator(name: "BUILT_IN_COS", value: 30, isUnsigned: true)
!628 = !DIEnumerator(name: "BUILT_IN_COSF", value: 31, isUnsigned: true)
!629 = !DIEnumerator(name: "BUILT_IN_COSH", value: 32, isUnsigned: true)
!630 = !DIEnumerator(name: "BUILT_IN_COSHF", value: 33, isUnsigned: true)
!631 = !DIEnumerator(name: "BUILT_IN_COSHL", value: 34, isUnsigned: true)
!632 = !DIEnumerator(name: "BUILT_IN_COSL", value: 35, isUnsigned: true)
!633 = !DIEnumerator(name: "BUILT_IN_DREM", value: 36, isUnsigned: true)
!634 = !DIEnumerator(name: "BUILT_IN_DREMF", value: 37, isUnsigned: true)
!635 = !DIEnumerator(name: "BUILT_IN_DREML", value: 38, isUnsigned: true)
!636 = !DIEnumerator(name: "BUILT_IN_ERF", value: 39, isUnsigned: true)
!637 = !DIEnumerator(name: "BUILT_IN_ERFC", value: 40, isUnsigned: true)
!638 = !DIEnumerator(name: "BUILT_IN_ERFCF", value: 41, isUnsigned: true)
!639 = !DIEnumerator(name: "BUILT_IN_ERFCL", value: 42, isUnsigned: true)
!640 = !DIEnumerator(name: "BUILT_IN_ERFF", value: 43, isUnsigned: true)
!641 = !DIEnumerator(name: "BUILT_IN_ERFL", value: 44, isUnsigned: true)
!642 = !DIEnumerator(name: "BUILT_IN_EXP", value: 45, isUnsigned: true)
!643 = !DIEnumerator(name: "BUILT_IN_EXP10", value: 46, isUnsigned: true)
!644 = !DIEnumerator(name: "BUILT_IN_EXP10F", value: 47, isUnsigned: true)
!645 = !DIEnumerator(name: "BUILT_IN_EXP10L", value: 48, isUnsigned: true)
!646 = !DIEnumerator(name: "BUILT_IN_EXP2", value: 49, isUnsigned: true)
!647 = !DIEnumerator(name: "BUILT_IN_EXP2F", value: 50, isUnsigned: true)
!648 = !DIEnumerator(name: "BUILT_IN_EXP2L", value: 51, isUnsigned: true)
!649 = !DIEnumerator(name: "BUILT_IN_EXPF", value: 52, isUnsigned: true)
!650 = !DIEnumerator(name: "BUILT_IN_EXPL", value: 53, isUnsigned: true)
!651 = !DIEnumerator(name: "BUILT_IN_EXPM1", value: 54, isUnsigned: true)
!652 = !DIEnumerator(name: "BUILT_IN_EXPM1F", value: 55, isUnsigned: true)
!653 = !DIEnumerator(name: "BUILT_IN_EXPM1L", value: 56, isUnsigned: true)
!654 = !DIEnumerator(name: "BUILT_IN_FABS", value: 57, isUnsigned: true)
!655 = !DIEnumerator(name: "BUILT_IN_FABSF", value: 58, isUnsigned: true)
!656 = !DIEnumerator(name: "BUILT_IN_FABSL", value: 59, isUnsigned: true)
!657 = !DIEnumerator(name: "BUILT_IN_FDIM", value: 60, isUnsigned: true)
!658 = !DIEnumerator(name: "BUILT_IN_FDIMF", value: 61, isUnsigned: true)
!659 = !DIEnumerator(name: "BUILT_IN_FDIML", value: 62, isUnsigned: true)
!660 = !DIEnumerator(name: "BUILT_IN_FLOOR", value: 63, isUnsigned: true)
!661 = !DIEnumerator(name: "BUILT_IN_FLOORF", value: 64, isUnsigned: true)
!662 = !DIEnumerator(name: "BUILT_IN_FLOORL", value: 65, isUnsigned: true)
!663 = !DIEnumerator(name: "BUILT_IN_FMA", value: 66, isUnsigned: true)
!664 = !DIEnumerator(name: "BUILT_IN_FMAF", value: 67, isUnsigned: true)
!665 = !DIEnumerator(name: "BUILT_IN_FMAL", value: 68, isUnsigned: true)
!666 = !DIEnumerator(name: "BUILT_IN_FMAX", value: 69, isUnsigned: true)
!667 = !DIEnumerator(name: "BUILT_IN_FMAXF", value: 70, isUnsigned: true)
!668 = !DIEnumerator(name: "BUILT_IN_FMAXL", value: 71, isUnsigned: true)
!669 = !DIEnumerator(name: "BUILT_IN_FMIN", value: 72, isUnsigned: true)
!670 = !DIEnumerator(name: "BUILT_IN_FMINF", value: 73, isUnsigned: true)
!671 = !DIEnumerator(name: "BUILT_IN_FMINL", value: 74, isUnsigned: true)
!672 = !DIEnumerator(name: "BUILT_IN_FMOD", value: 75, isUnsigned: true)
!673 = !DIEnumerator(name: "BUILT_IN_FMODF", value: 76, isUnsigned: true)
!674 = !DIEnumerator(name: "BUILT_IN_FMODL", value: 77, isUnsigned: true)
!675 = !DIEnumerator(name: "BUILT_IN_FREXP", value: 78, isUnsigned: true)
!676 = !DIEnumerator(name: "BUILT_IN_FREXPF", value: 79, isUnsigned: true)
!677 = !DIEnumerator(name: "BUILT_IN_FREXPL", value: 80, isUnsigned: true)
!678 = !DIEnumerator(name: "BUILT_IN_GAMMA", value: 81, isUnsigned: true)
!679 = !DIEnumerator(name: "BUILT_IN_GAMMAF", value: 82, isUnsigned: true)
!680 = !DIEnumerator(name: "BUILT_IN_GAMMAL", value: 83, isUnsigned: true)
!681 = !DIEnumerator(name: "BUILT_IN_GAMMA_R", value: 84, isUnsigned: true)
!682 = !DIEnumerator(name: "BUILT_IN_GAMMAF_R", value: 85, isUnsigned: true)
!683 = !DIEnumerator(name: "BUILT_IN_GAMMAL_R", value: 86, isUnsigned: true)
!684 = !DIEnumerator(name: "BUILT_IN_HUGE_VAL", value: 87, isUnsigned: true)
!685 = !DIEnumerator(name: "BUILT_IN_HUGE_VALF", value: 88, isUnsigned: true)
!686 = !DIEnumerator(name: "BUILT_IN_HUGE_VALL", value: 89, isUnsigned: true)
!687 = !DIEnumerator(name: "BUILT_IN_HYPOT", value: 90, isUnsigned: true)
!688 = !DIEnumerator(name: "BUILT_IN_HYPOTF", value: 91, isUnsigned: true)
!689 = !DIEnumerator(name: "BUILT_IN_HYPOTL", value: 92, isUnsigned: true)
!690 = !DIEnumerator(name: "BUILT_IN_ILOGB", value: 93, isUnsigned: true)
!691 = !DIEnumerator(name: "BUILT_IN_ILOGBF", value: 94, isUnsigned: true)
!692 = !DIEnumerator(name: "BUILT_IN_ILOGBL", value: 95, isUnsigned: true)
!693 = !DIEnumerator(name: "BUILT_IN_INF", value: 96, isUnsigned: true)
!694 = !DIEnumerator(name: "BUILT_IN_INFF", value: 97, isUnsigned: true)
!695 = !DIEnumerator(name: "BUILT_IN_INFL", value: 98, isUnsigned: true)
!696 = !DIEnumerator(name: "BUILT_IN_INFD32", value: 99, isUnsigned: true)
!697 = !DIEnumerator(name: "BUILT_IN_INFD64", value: 100, isUnsigned: true)
!698 = !DIEnumerator(name: "BUILT_IN_INFD128", value: 101, isUnsigned: true)
!699 = !DIEnumerator(name: "BUILT_IN_J0", value: 102, isUnsigned: true)
!700 = !DIEnumerator(name: "BUILT_IN_J0F", value: 103, isUnsigned: true)
!701 = !DIEnumerator(name: "BUILT_IN_J0L", value: 104, isUnsigned: true)
!702 = !DIEnumerator(name: "BUILT_IN_J1", value: 105, isUnsigned: true)
!703 = !DIEnumerator(name: "BUILT_IN_J1F", value: 106, isUnsigned: true)
!704 = !DIEnumerator(name: "BUILT_IN_J1L", value: 107, isUnsigned: true)
!705 = !DIEnumerator(name: "BUILT_IN_JN", value: 108, isUnsigned: true)
!706 = !DIEnumerator(name: "BUILT_IN_JNF", value: 109, isUnsigned: true)
!707 = !DIEnumerator(name: "BUILT_IN_JNL", value: 110, isUnsigned: true)
!708 = !DIEnumerator(name: "BUILT_IN_LCEIL", value: 111, isUnsigned: true)
!709 = !DIEnumerator(name: "BUILT_IN_LCEILF", value: 112, isUnsigned: true)
!710 = !DIEnumerator(name: "BUILT_IN_LCEILL", value: 113, isUnsigned: true)
!711 = !DIEnumerator(name: "BUILT_IN_LDEXP", value: 114, isUnsigned: true)
!712 = !DIEnumerator(name: "BUILT_IN_LDEXPF", value: 115, isUnsigned: true)
!713 = !DIEnumerator(name: "BUILT_IN_LDEXPL", value: 116, isUnsigned: true)
!714 = !DIEnumerator(name: "BUILT_IN_LFLOOR", value: 117, isUnsigned: true)
!715 = !DIEnumerator(name: "BUILT_IN_LFLOORF", value: 118, isUnsigned: true)
!716 = !DIEnumerator(name: "BUILT_IN_LFLOORL", value: 119, isUnsigned: true)
!717 = !DIEnumerator(name: "BUILT_IN_LGAMMA", value: 120, isUnsigned: true)
!718 = !DIEnumerator(name: "BUILT_IN_LGAMMAF", value: 121, isUnsigned: true)
!719 = !DIEnumerator(name: "BUILT_IN_LGAMMAL", value: 122, isUnsigned: true)
!720 = !DIEnumerator(name: "BUILT_IN_LGAMMA_R", value: 123, isUnsigned: true)
!721 = !DIEnumerator(name: "BUILT_IN_LGAMMAF_R", value: 124, isUnsigned: true)
!722 = !DIEnumerator(name: "BUILT_IN_LGAMMAL_R", value: 125, isUnsigned: true)
!723 = !DIEnumerator(name: "BUILT_IN_LLCEIL", value: 126, isUnsigned: true)
!724 = !DIEnumerator(name: "BUILT_IN_LLCEILF", value: 127, isUnsigned: true)
!725 = !DIEnumerator(name: "BUILT_IN_LLCEILL", value: 128, isUnsigned: true)
!726 = !DIEnumerator(name: "BUILT_IN_LLFLOOR", value: 129, isUnsigned: true)
!727 = !DIEnumerator(name: "BUILT_IN_LLFLOORF", value: 130, isUnsigned: true)
!728 = !DIEnumerator(name: "BUILT_IN_LLFLOORL", value: 131, isUnsigned: true)
!729 = !DIEnumerator(name: "BUILT_IN_LLRINT", value: 132, isUnsigned: true)
!730 = !DIEnumerator(name: "BUILT_IN_LLRINTF", value: 133, isUnsigned: true)
!731 = !DIEnumerator(name: "BUILT_IN_LLRINTL", value: 134, isUnsigned: true)
!732 = !DIEnumerator(name: "BUILT_IN_LLROUND", value: 135, isUnsigned: true)
!733 = !DIEnumerator(name: "BUILT_IN_LLROUNDF", value: 136, isUnsigned: true)
!734 = !DIEnumerator(name: "BUILT_IN_LLROUNDL", value: 137, isUnsigned: true)
!735 = !DIEnumerator(name: "BUILT_IN_LOG", value: 138, isUnsigned: true)
!736 = !DIEnumerator(name: "BUILT_IN_LOG10", value: 139, isUnsigned: true)
!737 = !DIEnumerator(name: "BUILT_IN_LOG10F", value: 140, isUnsigned: true)
!738 = !DIEnumerator(name: "BUILT_IN_LOG10L", value: 141, isUnsigned: true)
!739 = !DIEnumerator(name: "BUILT_IN_LOG1P", value: 142, isUnsigned: true)
!740 = !DIEnumerator(name: "BUILT_IN_LOG1PF", value: 143, isUnsigned: true)
!741 = !DIEnumerator(name: "BUILT_IN_LOG1PL", value: 144, isUnsigned: true)
!742 = !DIEnumerator(name: "BUILT_IN_LOG2", value: 145, isUnsigned: true)
!743 = !DIEnumerator(name: "BUILT_IN_LOG2F", value: 146, isUnsigned: true)
!744 = !DIEnumerator(name: "BUILT_IN_LOG2L", value: 147, isUnsigned: true)
!745 = !DIEnumerator(name: "BUILT_IN_LOGB", value: 148, isUnsigned: true)
!746 = !DIEnumerator(name: "BUILT_IN_LOGBF", value: 149, isUnsigned: true)
!747 = !DIEnumerator(name: "BUILT_IN_LOGBL", value: 150, isUnsigned: true)
!748 = !DIEnumerator(name: "BUILT_IN_LOGF", value: 151, isUnsigned: true)
!749 = !DIEnumerator(name: "BUILT_IN_LOGL", value: 152, isUnsigned: true)
!750 = !DIEnumerator(name: "BUILT_IN_LRINT", value: 153, isUnsigned: true)
!751 = !DIEnumerator(name: "BUILT_IN_LRINTF", value: 154, isUnsigned: true)
!752 = !DIEnumerator(name: "BUILT_IN_LRINTL", value: 155, isUnsigned: true)
!753 = !DIEnumerator(name: "BUILT_IN_LROUND", value: 156, isUnsigned: true)
!754 = !DIEnumerator(name: "BUILT_IN_LROUNDF", value: 157, isUnsigned: true)
!755 = !DIEnumerator(name: "BUILT_IN_LROUNDL", value: 158, isUnsigned: true)
!756 = !DIEnumerator(name: "BUILT_IN_MODF", value: 159, isUnsigned: true)
!757 = !DIEnumerator(name: "BUILT_IN_MODFF", value: 160, isUnsigned: true)
!758 = !DIEnumerator(name: "BUILT_IN_MODFL", value: 161, isUnsigned: true)
!759 = !DIEnumerator(name: "BUILT_IN_NAN", value: 162, isUnsigned: true)
!760 = !DIEnumerator(name: "BUILT_IN_NANF", value: 163, isUnsigned: true)
!761 = !DIEnumerator(name: "BUILT_IN_NANL", value: 164, isUnsigned: true)
!762 = !DIEnumerator(name: "BUILT_IN_NAND32", value: 165, isUnsigned: true)
!763 = !DIEnumerator(name: "BUILT_IN_NAND64", value: 166, isUnsigned: true)
!764 = !DIEnumerator(name: "BUILT_IN_NAND128", value: 167, isUnsigned: true)
!765 = !DIEnumerator(name: "BUILT_IN_NANS", value: 168, isUnsigned: true)
!766 = !DIEnumerator(name: "BUILT_IN_NANSF", value: 169, isUnsigned: true)
!767 = !DIEnumerator(name: "BUILT_IN_NANSL", value: 170, isUnsigned: true)
!768 = !DIEnumerator(name: "BUILT_IN_NEARBYINT", value: 171, isUnsigned: true)
!769 = !DIEnumerator(name: "BUILT_IN_NEARBYINTF", value: 172, isUnsigned: true)
!770 = !DIEnumerator(name: "BUILT_IN_NEARBYINTL", value: 173, isUnsigned: true)
!771 = !DIEnumerator(name: "BUILT_IN_NEXTAFTER", value: 174, isUnsigned: true)
!772 = !DIEnumerator(name: "BUILT_IN_NEXTAFTERF", value: 175, isUnsigned: true)
!773 = !DIEnumerator(name: "BUILT_IN_NEXTAFTERL", value: 176, isUnsigned: true)
!774 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARD", value: 177, isUnsigned: true)
!775 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARDF", value: 178, isUnsigned: true)
!776 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARDL", value: 179, isUnsigned: true)
!777 = !DIEnumerator(name: "BUILT_IN_POW", value: 180, isUnsigned: true)
!778 = !DIEnumerator(name: "BUILT_IN_POW10", value: 181, isUnsigned: true)
!779 = !DIEnumerator(name: "BUILT_IN_POW10F", value: 182, isUnsigned: true)
!780 = !DIEnumerator(name: "BUILT_IN_POW10L", value: 183, isUnsigned: true)
!781 = !DIEnumerator(name: "BUILT_IN_POWF", value: 184, isUnsigned: true)
!782 = !DIEnumerator(name: "BUILT_IN_POWI", value: 185, isUnsigned: true)
!783 = !DIEnumerator(name: "BUILT_IN_POWIF", value: 186, isUnsigned: true)
!784 = !DIEnumerator(name: "BUILT_IN_POWIL", value: 187, isUnsigned: true)
!785 = !DIEnumerator(name: "BUILT_IN_POWL", value: 188, isUnsigned: true)
!786 = !DIEnumerator(name: "BUILT_IN_REMAINDER", value: 189, isUnsigned: true)
!787 = !DIEnumerator(name: "BUILT_IN_REMAINDERF", value: 190, isUnsigned: true)
!788 = !DIEnumerator(name: "BUILT_IN_REMAINDERL", value: 191, isUnsigned: true)
!789 = !DIEnumerator(name: "BUILT_IN_REMQUO", value: 192, isUnsigned: true)
!790 = !DIEnumerator(name: "BUILT_IN_REMQUOF", value: 193, isUnsigned: true)
!791 = !DIEnumerator(name: "BUILT_IN_REMQUOL", value: 194, isUnsigned: true)
!792 = !DIEnumerator(name: "BUILT_IN_RINT", value: 195, isUnsigned: true)
!793 = !DIEnumerator(name: "BUILT_IN_RINTF", value: 196, isUnsigned: true)
!794 = !DIEnumerator(name: "BUILT_IN_RINTL", value: 197, isUnsigned: true)
!795 = !DIEnumerator(name: "BUILT_IN_ROUND", value: 198, isUnsigned: true)
!796 = !DIEnumerator(name: "BUILT_IN_ROUNDF", value: 199, isUnsigned: true)
!797 = !DIEnumerator(name: "BUILT_IN_ROUNDL", value: 200, isUnsigned: true)
!798 = !DIEnumerator(name: "BUILT_IN_SCALB", value: 201, isUnsigned: true)
!799 = !DIEnumerator(name: "BUILT_IN_SCALBF", value: 202, isUnsigned: true)
!800 = !DIEnumerator(name: "BUILT_IN_SCALBL", value: 203, isUnsigned: true)
!801 = !DIEnumerator(name: "BUILT_IN_SCALBLN", value: 204, isUnsigned: true)
!802 = !DIEnumerator(name: "BUILT_IN_SCALBLNF", value: 205, isUnsigned: true)
!803 = !DIEnumerator(name: "BUILT_IN_SCALBLNL", value: 206, isUnsigned: true)
!804 = !DIEnumerator(name: "BUILT_IN_SCALBN", value: 207, isUnsigned: true)
!805 = !DIEnumerator(name: "BUILT_IN_SCALBNF", value: 208, isUnsigned: true)
!806 = !DIEnumerator(name: "BUILT_IN_SCALBNL", value: 209, isUnsigned: true)
!807 = !DIEnumerator(name: "BUILT_IN_SIGNBIT", value: 210, isUnsigned: true)
!808 = !DIEnumerator(name: "BUILT_IN_SIGNBITF", value: 211, isUnsigned: true)
!809 = !DIEnumerator(name: "BUILT_IN_SIGNBITL", value: 212, isUnsigned: true)
!810 = !DIEnumerator(name: "BUILT_IN_SIGNBITD32", value: 213, isUnsigned: true)
!811 = !DIEnumerator(name: "BUILT_IN_SIGNBITD64", value: 214, isUnsigned: true)
!812 = !DIEnumerator(name: "BUILT_IN_SIGNBITD128", value: 215, isUnsigned: true)
!813 = !DIEnumerator(name: "BUILT_IN_SIGNIFICAND", value: 216, isUnsigned: true)
!814 = !DIEnumerator(name: "BUILT_IN_SIGNIFICANDF", value: 217, isUnsigned: true)
!815 = !DIEnumerator(name: "BUILT_IN_SIGNIFICANDL", value: 218, isUnsigned: true)
!816 = !DIEnumerator(name: "BUILT_IN_SIN", value: 219, isUnsigned: true)
!817 = !DIEnumerator(name: "BUILT_IN_SINCOS", value: 220, isUnsigned: true)
!818 = !DIEnumerator(name: "BUILT_IN_SINCOSF", value: 221, isUnsigned: true)
!819 = !DIEnumerator(name: "BUILT_IN_SINCOSL", value: 222, isUnsigned: true)
!820 = !DIEnumerator(name: "BUILT_IN_SINF", value: 223, isUnsigned: true)
!821 = !DIEnumerator(name: "BUILT_IN_SINH", value: 224, isUnsigned: true)
!822 = !DIEnumerator(name: "BUILT_IN_SINHF", value: 225, isUnsigned: true)
!823 = !DIEnumerator(name: "BUILT_IN_SINHL", value: 226, isUnsigned: true)
!824 = !DIEnumerator(name: "BUILT_IN_SINL", value: 227, isUnsigned: true)
!825 = !DIEnumerator(name: "BUILT_IN_SQRT", value: 228, isUnsigned: true)
!826 = !DIEnumerator(name: "BUILT_IN_SQRTF", value: 229, isUnsigned: true)
!827 = !DIEnumerator(name: "BUILT_IN_SQRTL", value: 230, isUnsigned: true)
!828 = !DIEnumerator(name: "BUILT_IN_TAN", value: 231, isUnsigned: true)
!829 = !DIEnumerator(name: "BUILT_IN_TANF", value: 232, isUnsigned: true)
!830 = !DIEnumerator(name: "BUILT_IN_TANH", value: 233, isUnsigned: true)
!831 = !DIEnumerator(name: "BUILT_IN_TANHF", value: 234, isUnsigned: true)
!832 = !DIEnumerator(name: "BUILT_IN_TANHL", value: 235, isUnsigned: true)
!833 = !DIEnumerator(name: "BUILT_IN_TANL", value: 236, isUnsigned: true)
!834 = !DIEnumerator(name: "BUILT_IN_TGAMMA", value: 237, isUnsigned: true)
!835 = !DIEnumerator(name: "BUILT_IN_TGAMMAF", value: 238, isUnsigned: true)
!836 = !DIEnumerator(name: "BUILT_IN_TGAMMAL", value: 239, isUnsigned: true)
!837 = !DIEnumerator(name: "BUILT_IN_TRUNC", value: 240, isUnsigned: true)
!838 = !DIEnumerator(name: "BUILT_IN_TRUNCF", value: 241, isUnsigned: true)
!839 = !DIEnumerator(name: "BUILT_IN_TRUNCL", value: 242, isUnsigned: true)
!840 = !DIEnumerator(name: "BUILT_IN_Y0", value: 243, isUnsigned: true)
!841 = !DIEnumerator(name: "BUILT_IN_Y0F", value: 244, isUnsigned: true)
!842 = !DIEnumerator(name: "BUILT_IN_Y0L", value: 245, isUnsigned: true)
!843 = !DIEnumerator(name: "BUILT_IN_Y1", value: 246, isUnsigned: true)
!844 = !DIEnumerator(name: "BUILT_IN_Y1F", value: 247, isUnsigned: true)
!845 = !DIEnumerator(name: "BUILT_IN_Y1L", value: 248, isUnsigned: true)
!846 = !DIEnumerator(name: "BUILT_IN_YN", value: 249, isUnsigned: true)
!847 = !DIEnumerator(name: "BUILT_IN_YNF", value: 250, isUnsigned: true)
!848 = !DIEnumerator(name: "BUILT_IN_YNL", value: 251, isUnsigned: true)
!849 = !DIEnumerator(name: "BUILT_IN_CABS", value: 252, isUnsigned: true)
!850 = !DIEnumerator(name: "BUILT_IN_CABSF", value: 253, isUnsigned: true)
!851 = !DIEnumerator(name: "BUILT_IN_CABSL", value: 254, isUnsigned: true)
!852 = !DIEnumerator(name: "BUILT_IN_CACOS", value: 255, isUnsigned: true)
!853 = !DIEnumerator(name: "BUILT_IN_CACOSF", value: 256, isUnsigned: true)
!854 = !DIEnumerator(name: "BUILT_IN_CACOSH", value: 257, isUnsigned: true)
!855 = !DIEnumerator(name: "BUILT_IN_CACOSHF", value: 258, isUnsigned: true)
!856 = !DIEnumerator(name: "BUILT_IN_CACOSHL", value: 259, isUnsigned: true)
!857 = !DIEnumerator(name: "BUILT_IN_CACOSL", value: 260, isUnsigned: true)
!858 = !DIEnumerator(name: "BUILT_IN_CARG", value: 261, isUnsigned: true)
!859 = !DIEnumerator(name: "BUILT_IN_CARGF", value: 262, isUnsigned: true)
!860 = !DIEnumerator(name: "BUILT_IN_CARGL", value: 263, isUnsigned: true)
!861 = !DIEnumerator(name: "BUILT_IN_CASIN", value: 264, isUnsigned: true)
!862 = !DIEnumerator(name: "BUILT_IN_CASINF", value: 265, isUnsigned: true)
!863 = !DIEnumerator(name: "BUILT_IN_CASINH", value: 266, isUnsigned: true)
!864 = !DIEnumerator(name: "BUILT_IN_CASINHF", value: 267, isUnsigned: true)
!865 = !DIEnumerator(name: "BUILT_IN_CASINHL", value: 268, isUnsigned: true)
!866 = !DIEnumerator(name: "BUILT_IN_CASINL", value: 269, isUnsigned: true)
!867 = !DIEnumerator(name: "BUILT_IN_CATAN", value: 270, isUnsigned: true)
!868 = !DIEnumerator(name: "BUILT_IN_CATANF", value: 271, isUnsigned: true)
!869 = !DIEnumerator(name: "BUILT_IN_CATANH", value: 272, isUnsigned: true)
!870 = !DIEnumerator(name: "BUILT_IN_CATANHF", value: 273, isUnsigned: true)
!871 = !DIEnumerator(name: "BUILT_IN_CATANHL", value: 274, isUnsigned: true)
!872 = !DIEnumerator(name: "BUILT_IN_CATANL", value: 275, isUnsigned: true)
!873 = !DIEnumerator(name: "BUILT_IN_CCOS", value: 276, isUnsigned: true)
!874 = !DIEnumerator(name: "BUILT_IN_CCOSF", value: 277, isUnsigned: true)
!875 = !DIEnumerator(name: "BUILT_IN_CCOSH", value: 278, isUnsigned: true)
!876 = !DIEnumerator(name: "BUILT_IN_CCOSHF", value: 279, isUnsigned: true)
!877 = !DIEnumerator(name: "BUILT_IN_CCOSHL", value: 280, isUnsigned: true)
!878 = !DIEnumerator(name: "BUILT_IN_CCOSL", value: 281, isUnsigned: true)
!879 = !DIEnumerator(name: "BUILT_IN_CEXP", value: 282, isUnsigned: true)
!880 = !DIEnumerator(name: "BUILT_IN_CEXPF", value: 283, isUnsigned: true)
!881 = !DIEnumerator(name: "BUILT_IN_CEXPL", value: 284, isUnsigned: true)
!882 = !DIEnumerator(name: "BUILT_IN_CEXPI", value: 285, isUnsigned: true)
!883 = !DIEnumerator(name: "BUILT_IN_CEXPIF", value: 286, isUnsigned: true)
!884 = !DIEnumerator(name: "BUILT_IN_CEXPIL", value: 287, isUnsigned: true)
!885 = !DIEnumerator(name: "BUILT_IN_CIMAG", value: 288, isUnsigned: true)
!886 = !DIEnumerator(name: "BUILT_IN_CIMAGF", value: 289, isUnsigned: true)
!887 = !DIEnumerator(name: "BUILT_IN_CIMAGL", value: 290, isUnsigned: true)
!888 = !DIEnumerator(name: "BUILT_IN_CLOG", value: 291, isUnsigned: true)
!889 = !DIEnumerator(name: "BUILT_IN_CLOGF", value: 292, isUnsigned: true)
!890 = !DIEnumerator(name: "BUILT_IN_CLOGL", value: 293, isUnsigned: true)
!891 = !DIEnumerator(name: "BUILT_IN_CLOG10", value: 294, isUnsigned: true)
!892 = !DIEnumerator(name: "BUILT_IN_CLOG10F", value: 295, isUnsigned: true)
!893 = !DIEnumerator(name: "BUILT_IN_CLOG10L", value: 296, isUnsigned: true)
!894 = !DIEnumerator(name: "BUILT_IN_CONJ", value: 297, isUnsigned: true)
!895 = !DIEnumerator(name: "BUILT_IN_CONJF", value: 298, isUnsigned: true)
!896 = !DIEnumerator(name: "BUILT_IN_CONJL", value: 299, isUnsigned: true)
!897 = !DIEnumerator(name: "BUILT_IN_CPOW", value: 300, isUnsigned: true)
!898 = !DIEnumerator(name: "BUILT_IN_CPOWF", value: 301, isUnsigned: true)
!899 = !DIEnumerator(name: "BUILT_IN_CPOWL", value: 302, isUnsigned: true)
!900 = !DIEnumerator(name: "BUILT_IN_CPROJ", value: 303, isUnsigned: true)
!901 = !DIEnumerator(name: "BUILT_IN_CPROJF", value: 304, isUnsigned: true)
!902 = !DIEnumerator(name: "BUILT_IN_CPROJL", value: 305, isUnsigned: true)
!903 = !DIEnumerator(name: "BUILT_IN_CREAL", value: 306, isUnsigned: true)
!904 = !DIEnumerator(name: "BUILT_IN_CREALF", value: 307, isUnsigned: true)
!905 = !DIEnumerator(name: "BUILT_IN_CREALL", value: 308, isUnsigned: true)
!906 = !DIEnumerator(name: "BUILT_IN_CSIN", value: 309, isUnsigned: true)
!907 = !DIEnumerator(name: "BUILT_IN_CSINF", value: 310, isUnsigned: true)
!908 = !DIEnumerator(name: "BUILT_IN_CSINH", value: 311, isUnsigned: true)
!909 = !DIEnumerator(name: "BUILT_IN_CSINHF", value: 312, isUnsigned: true)
!910 = !DIEnumerator(name: "BUILT_IN_CSINHL", value: 313, isUnsigned: true)
!911 = !DIEnumerator(name: "BUILT_IN_CSINL", value: 314, isUnsigned: true)
!912 = !DIEnumerator(name: "BUILT_IN_CSQRT", value: 315, isUnsigned: true)
!913 = !DIEnumerator(name: "BUILT_IN_CSQRTF", value: 316, isUnsigned: true)
!914 = !DIEnumerator(name: "BUILT_IN_CSQRTL", value: 317, isUnsigned: true)
!915 = !DIEnumerator(name: "BUILT_IN_CTAN", value: 318, isUnsigned: true)
!916 = !DIEnumerator(name: "BUILT_IN_CTANF", value: 319, isUnsigned: true)
!917 = !DIEnumerator(name: "BUILT_IN_CTANH", value: 320, isUnsigned: true)
!918 = !DIEnumerator(name: "BUILT_IN_CTANHF", value: 321, isUnsigned: true)
!919 = !DIEnumerator(name: "BUILT_IN_CTANHL", value: 322, isUnsigned: true)
!920 = !DIEnumerator(name: "BUILT_IN_CTANL", value: 323, isUnsigned: true)
!921 = !DIEnumerator(name: "BUILT_IN_BCMP", value: 324, isUnsigned: true)
!922 = !DIEnumerator(name: "BUILT_IN_BCOPY", value: 325, isUnsigned: true)
!923 = !DIEnumerator(name: "BUILT_IN_BZERO", value: 326, isUnsigned: true)
!924 = !DIEnumerator(name: "BUILT_IN_INDEX", value: 327, isUnsigned: true)
!925 = !DIEnumerator(name: "BUILT_IN_MEMCHR", value: 328, isUnsigned: true)
!926 = !DIEnumerator(name: "BUILT_IN_MEMCMP", value: 329, isUnsigned: true)
!927 = !DIEnumerator(name: "BUILT_IN_MEMCPY", value: 330, isUnsigned: true)
!928 = !DIEnumerator(name: "BUILT_IN_MEMMOVE", value: 331, isUnsigned: true)
!929 = !DIEnumerator(name: "BUILT_IN_MEMPCPY", value: 332, isUnsigned: true)
!930 = !DIEnumerator(name: "BUILT_IN_MEMSET", value: 333, isUnsigned: true)
!931 = !DIEnumerator(name: "BUILT_IN_RINDEX", value: 334, isUnsigned: true)
!932 = !DIEnumerator(name: "BUILT_IN_STPCPY", value: 335, isUnsigned: true)
!933 = !DIEnumerator(name: "BUILT_IN_STPNCPY", value: 336, isUnsigned: true)
!934 = !DIEnumerator(name: "BUILT_IN_STRCASECMP", value: 337, isUnsigned: true)
!935 = !DIEnumerator(name: "BUILT_IN_STRCAT", value: 338, isUnsigned: true)
!936 = !DIEnumerator(name: "BUILT_IN_STRCHR", value: 339, isUnsigned: true)
!937 = !DIEnumerator(name: "BUILT_IN_STRCMP", value: 340, isUnsigned: true)
!938 = !DIEnumerator(name: "BUILT_IN_STRCPY", value: 341, isUnsigned: true)
!939 = !DIEnumerator(name: "BUILT_IN_STRCSPN", value: 342, isUnsigned: true)
!940 = !DIEnumerator(name: "BUILT_IN_STRDUP", value: 343, isUnsigned: true)
!941 = !DIEnumerator(name: "BUILT_IN_STRNDUP", value: 344, isUnsigned: true)
!942 = !DIEnumerator(name: "BUILT_IN_STRLEN", value: 345, isUnsigned: true)
!943 = !DIEnumerator(name: "BUILT_IN_STRNCASECMP", value: 346, isUnsigned: true)
!944 = !DIEnumerator(name: "BUILT_IN_STRNCAT", value: 347, isUnsigned: true)
!945 = !DIEnumerator(name: "BUILT_IN_STRNCMP", value: 348, isUnsigned: true)
!946 = !DIEnumerator(name: "BUILT_IN_STRNCPY", value: 349, isUnsigned: true)
!947 = !DIEnumerator(name: "BUILT_IN_STRPBRK", value: 350, isUnsigned: true)
!948 = !DIEnumerator(name: "BUILT_IN_STRRCHR", value: 351, isUnsigned: true)
!949 = !DIEnumerator(name: "BUILT_IN_STRSPN", value: 352, isUnsigned: true)
!950 = !DIEnumerator(name: "BUILT_IN_STRSTR", value: 353, isUnsigned: true)
!951 = !DIEnumerator(name: "BUILT_IN_FPRINTF", value: 354, isUnsigned: true)
!952 = !DIEnumerator(name: "BUILT_IN_FPRINTF_UNLOCKED", value: 355, isUnsigned: true)
!953 = !DIEnumerator(name: "BUILT_IN_PUTC", value: 356, isUnsigned: true)
!954 = !DIEnumerator(name: "BUILT_IN_PUTC_UNLOCKED", value: 357, isUnsigned: true)
!955 = !DIEnumerator(name: "BUILT_IN_FPUTC", value: 358, isUnsigned: true)
!956 = !DIEnumerator(name: "BUILT_IN_FPUTC_UNLOCKED", value: 359, isUnsigned: true)
!957 = !DIEnumerator(name: "BUILT_IN_FPUTS", value: 360, isUnsigned: true)
!958 = !DIEnumerator(name: "BUILT_IN_FPUTS_UNLOCKED", value: 361, isUnsigned: true)
!959 = !DIEnumerator(name: "BUILT_IN_FSCANF", value: 362, isUnsigned: true)
!960 = !DIEnumerator(name: "BUILT_IN_FWRITE", value: 363, isUnsigned: true)
!961 = !DIEnumerator(name: "BUILT_IN_FWRITE_UNLOCKED", value: 364, isUnsigned: true)
!962 = !DIEnumerator(name: "BUILT_IN_PRINTF", value: 365, isUnsigned: true)
!963 = !DIEnumerator(name: "BUILT_IN_PRINTF_UNLOCKED", value: 366, isUnsigned: true)
!964 = !DIEnumerator(name: "BUILT_IN_PUTCHAR", value: 367, isUnsigned: true)
!965 = !DIEnumerator(name: "BUILT_IN_PUTCHAR_UNLOCKED", value: 368, isUnsigned: true)
!966 = !DIEnumerator(name: "BUILT_IN_PUTS", value: 369, isUnsigned: true)
!967 = !DIEnumerator(name: "BUILT_IN_PUTS_UNLOCKED", value: 370, isUnsigned: true)
!968 = !DIEnumerator(name: "BUILT_IN_SCANF", value: 371, isUnsigned: true)
!969 = !DIEnumerator(name: "BUILT_IN_SNPRINTF", value: 372, isUnsigned: true)
!970 = !DIEnumerator(name: "BUILT_IN_SPRINTF", value: 373, isUnsigned: true)
!971 = !DIEnumerator(name: "BUILT_IN_SSCANF", value: 374, isUnsigned: true)
!972 = !DIEnumerator(name: "BUILT_IN_VFPRINTF", value: 375, isUnsigned: true)
!973 = !DIEnumerator(name: "BUILT_IN_VFSCANF", value: 376, isUnsigned: true)
!974 = !DIEnumerator(name: "BUILT_IN_VPRINTF", value: 377, isUnsigned: true)
!975 = !DIEnumerator(name: "BUILT_IN_VSCANF", value: 378, isUnsigned: true)
!976 = !DIEnumerator(name: "BUILT_IN_VSNPRINTF", value: 379, isUnsigned: true)
!977 = !DIEnumerator(name: "BUILT_IN_VSPRINTF", value: 380, isUnsigned: true)
!978 = !DIEnumerator(name: "BUILT_IN_VSSCANF", value: 381, isUnsigned: true)
!979 = !DIEnumerator(name: "BUILT_IN_ISALNUM", value: 382, isUnsigned: true)
!980 = !DIEnumerator(name: "BUILT_IN_ISALPHA", value: 383, isUnsigned: true)
!981 = !DIEnumerator(name: "BUILT_IN_ISASCII", value: 384, isUnsigned: true)
!982 = !DIEnumerator(name: "BUILT_IN_ISBLANK", value: 385, isUnsigned: true)
!983 = !DIEnumerator(name: "BUILT_IN_ISCNTRL", value: 386, isUnsigned: true)
!984 = !DIEnumerator(name: "BUILT_IN_ISDIGIT", value: 387, isUnsigned: true)
!985 = !DIEnumerator(name: "BUILT_IN_ISGRAPH", value: 388, isUnsigned: true)
!986 = !DIEnumerator(name: "BUILT_IN_ISLOWER", value: 389, isUnsigned: true)
!987 = !DIEnumerator(name: "BUILT_IN_ISPRINT", value: 390, isUnsigned: true)
!988 = !DIEnumerator(name: "BUILT_IN_ISPUNCT", value: 391, isUnsigned: true)
!989 = !DIEnumerator(name: "BUILT_IN_ISSPACE", value: 392, isUnsigned: true)
!990 = !DIEnumerator(name: "BUILT_IN_ISUPPER", value: 393, isUnsigned: true)
!991 = !DIEnumerator(name: "BUILT_IN_ISXDIGIT", value: 394, isUnsigned: true)
!992 = !DIEnumerator(name: "BUILT_IN_TOASCII", value: 395, isUnsigned: true)
!993 = !DIEnumerator(name: "BUILT_IN_TOLOWER", value: 396, isUnsigned: true)
!994 = !DIEnumerator(name: "BUILT_IN_TOUPPER", value: 397, isUnsigned: true)
!995 = !DIEnumerator(name: "BUILT_IN_ISWALNUM", value: 398, isUnsigned: true)
!996 = !DIEnumerator(name: "BUILT_IN_ISWALPHA", value: 399, isUnsigned: true)
!997 = !DIEnumerator(name: "BUILT_IN_ISWBLANK", value: 400, isUnsigned: true)
!998 = !DIEnumerator(name: "BUILT_IN_ISWCNTRL", value: 401, isUnsigned: true)
!999 = !DIEnumerator(name: "BUILT_IN_ISWDIGIT", value: 402, isUnsigned: true)
!1000 = !DIEnumerator(name: "BUILT_IN_ISWGRAPH", value: 403, isUnsigned: true)
!1001 = !DIEnumerator(name: "BUILT_IN_ISWLOWER", value: 404, isUnsigned: true)
!1002 = !DIEnumerator(name: "BUILT_IN_ISWPRINT", value: 405, isUnsigned: true)
!1003 = !DIEnumerator(name: "BUILT_IN_ISWPUNCT", value: 406, isUnsigned: true)
!1004 = !DIEnumerator(name: "BUILT_IN_ISWSPACE", value: 407, isUnsigned: true)
!1005 = !DIEnumerator(name: "BUILT_IN_ISWUPPER", value: 408, isUnsigned: true)
!1006 = !DIEnumerator(name: "BUILT_IN_ISWXDIGIT", value: 409, isUnsigned: true)
!1007 = !DIEnumerator(name: "BUILT_IN_TOWLOWER", value: 410, isUnsigned: true)
!1008 = !DIEnumerator(name: "BUILT_IN_TOWUPPER", value: 411, isUnsigned: true)
!1009 = !DIEnumerator(name: "BUILT_IN_ABORT", value: 412, isUnsigned: true)
!1010 = !DIEnumerator(name: "BUILT_IN_ABS", value: 413, isUnsigned: true)
!1011 = !DIEnumerator(name: "BUILT_IN_AGGREGATE_INCOMING_ADDRESS", value: 414, isUnsigned: true)
!1012 = !DIEnumerator(name: "BUILT_IN_ALLOCA", value: 415, isUnsigned: true)
!1013 = !DIEnumerator(name: "BUILT_IN_APPLY", value: 416, isUnsigned: true)
!1014 = !DIEnumerator(name: "BUILT_IN_APPLY_ARGS", value: 417, isUnsigned: true)
!1015 = !DIEnumerator(name: "BUILT_IN_ARGS_INFO", value: 418, isUnsigned: true)
!1016 = !DIEnumerator(name: "BUILT_IN_BSWAP32", value: 419, isUnsigned: true)
!1017 = !DIEnumerator(name: "BUILT_IN_BSWAP64", value: 420, isUnsigned: true)
!1018 = !DIEnumerator(name: "BUILT_IN_CLEAR_CACHE", value: 421, isUnsigned: true)
!1019 = !DIEnumerator(name: "BUILT_IN_CALLOC", value: 422, isUnsigned: true)
!1020 = !DIEnumerator(name: "BUILT_IN_CLASSIFY_TYPE", value: 423, isUnsigned: true)
!1021 = !DIEnumerator(name: "BUILT_IN_CLZ", value: 424, isUnsigned: true)
!1022 = !DIEnumerator(name: "BUILT_IN_CLZIMAX", value: 425, isUnsigned: true)
!1023 = !DIEnumerator(name: "BUILT_IN_CLZL", value: 426, isUnsigned: true)
!1024 = !DIEnumerator(name: "BUILT_IN_CLZLL", value: 427, isUnsigned: true)
!1025 = !DIEnumerator(name: "BUILT_IN_CONSTANT_P", value: 428, isUnsigned: true)
!1026 = !DIEnumerator(name: "BUILT_IN_CTZ", value: 429, isUnsigned: true)
!1027 = !DIEnumerator(name: "BUILT_IN_CTZIMAX", value: 430, isUnsigned: true)
!1028 = !DIEnumerator(name: "BUILT_IN_CTZL", value: 431, isUnsigned: true)
!1029 = !DIEnumerator(name: "BUILT_IN_CTZLL", value: 432, isUnsigned: true)
!1030 = !DIEnumerator(name: "BUILT_IN_DCGETTEXT", value: 433, isUnsigned: true)
!1031 = !DIEnumerator(name: "BUILT_IN_DGETTEXT", value: 434, isUnsigned: true)
!1032 = !DIEnumerator(name: "BUILT_IN_DWARF_CFA", value: 435, isUnsigned: true)
!1033 = !DIEnumerator(name: "BUILT_IN_DWARF_SP_COLUMN", value: 436, isUnsigned: true)
!1034 = !DIEnumerator(name: "BUILT_IN_EH_RETURN", value: 437, isUnsigned: true)
!1035 = !DIEnumerator(name: "BUILT_IN_EH_RETURN_DATA_REGNO", value: 438, isUnsigned: true)
!1036 = !DIEnumerator(name: "BUILT_IN_EXECL", value: 439, isUnsigned: true)
!1037 = !DIEnumerator(name: "BUILT_IN_EXECLP", value: 440, isUnsigned: true)
!1038 = !DIEnumerator(name: "BUILT_IN_EXECLE", value: 441, isUnsigned: true)
!1039 = !DIEnumerator(name: "BUILT_IN_EXECV", value: 442, isUnsigned: true)
!1040 = !DIEnumerator(name: "BUILT_IN_EXECVP", value: 443, isUnsigned: true)
!1041 = !DIEnumerator(name: "BUILT_IN_EXECVE", value: 444, isUnsigned: true)
!1042 = !DIEnumerator(name: "BUILT_IN_EXIT", value: 445, isUnsigned: true)
!1043 = !DIEnumerator(name: "BUILT_IN_EXPECT", value: 446, isUnsigned: true)
!1044 = !DIEnumerator(name: "BUILT_IN_EXTEND_POINTER", value: 447, isUnsigned: true)
!1045 = !DIEnumerator(name: "BUILT_IN_EXTRACT_RETURN_ADDR", value: 448, isUnsigned: true)
!1046 = !DIEnumerator(name: "BUILT_IN_FFS", value: 449, isUnsigned: true)
!1047 = !DIEnumerator(name: "BUILT_IN_FFSIMAX", value: 450, isUnsigned: true)
!1048 = !DIEnumerator(name: "BUILT_IN_FFSL", value: 451, isUnsigned: true)
!1049 = !DIEnumerator(name: "BUILT_IN_FFSLL", value: 452, isUnsigned: true)
!1050 = !DIEnumerator(name: "BUILT_IN_FORK", value: 453, isUnsigned: true)
!1051 = !DIEnumerator(name: "BUILT_IN_FRAME_ADDRESS", value: 454, isUnsigned: true)
!1052 = !DIEnumerator(name: "BUILT_IN_FREE", value: 455, isUnsigned: true)
!1053 = !DIEnumerator(name: "BUILT_IN_FROB_RETURN_ADDR", value: 456, isUnsigned: true)
!1054 = !DIEnumerator(name: "BUILT_IN_GETTEXT", value: 457, isUnsigned: true)
!1055 = !DIEnumerator(name: "BUILT_IN_IMAXABS", value: 458, isUnsigned: true)
!1056 = !DIEnumerator(name: "BUILT_IN_INIT_DWARF_REG_SIZES", value: 459, isUnsigned: true)
!1057 = !DIEnumerator(name: "BUILT_IN_FINITE", value: 460, isUnsigned: true)
!1058 = !DIEnumerator(name: "BUILT_IN_FINITEF", value: 461, isUnsigned: true)
!1059 = !DIEnumerator(name: "BUILT_IN_FINITEL", value: 462, isUnsigned: true)
!1060 = !DIEnumerator(name: "BUILT_IN_FINITED32", value: 463, isUnsigned: true)
!1061 = !DIEnumerator(name: "BUILT_IN_FINITED64", value: 464, isUnsigned: true)
!1062 = !DIEnumerator(name: "BUILT_IN_FINITED128", value: 465, isUnsigned: true)
!1063 = !DIEnumerator(name: "BUILT_IN_FPCLASSIFY", value: 466, isUnsigned: true)
!1064 = !DIEnumerator(name: "BUILT_IN_ISFINITE", value: 467, isUnsigned: true)
!1065 = !DIEnumerator(name: "BUILT_IN_ISINF_SIGN", value: 468, isUnsigned: true)
!1066 = !DIEnumerator(name: "BUILT_IN_ISINF", value: 469, isUnsigned: true)
!1067 = !DIEnumerator(name: "BUILT_IN_ISINFF", value: 470, isUnsigned: true)
!1068 = !DIEnumerator(name: "BUILT_IN_ISINFL", value: 471, isUnsigned: true)
!1069 = !DIEnumerator(name: "BUILT_IN_ISINFD32", value: 472, isUnsigned: true)
!1070 = !DIEnumerator(name: "BUILT_IN_ISINFD64", value: 473, isUnsigned: true)
!1071 = !DIEnumerator(name: "BUILT_IN_ISINFD128", value: 474, isUnsigned: true)
!1072 = !DIEnumerator(name: "BUILT_IN_ISNAN", value: 475, isUnsigned: true)
!1073 = !DIEnumerator(name: "BUILT_IN_ISNANF", value: 476, isUnsigned: true)
!1074 = !DIEnumerator(name: "BUILT_IN_ISNANL", value: 477, isUnsigned: true)
!1075 = !DIEnumerator(name: "BUILT_IN_ISNAND32", value: 478, isUnsigned: true)
!1076 = !DIEnumerator(name: "BUILT_IN_ISNAND64", value: 479, isUnsigned: true)
!1077 = !DIEnumerator(name: "BUILT_IN_ISNAND128", value: 480, isUnsigned: true)
!1078 = !DIEnumerator(name: "BUILT_IN_ISNORMAL", value: 481, isUnsigned: true)
!1079 = !DIEnumerator(name: "BUILT_IN_ISGREATER", value: 482, isUnsigned: true)
!1080 = !DIEnumerator(name: "BUILT_IN_ISGREATEREQUAL", value: 483, isUnsigned: true)
!1081 = !DIEnumerator(name: "BUILT_IN_ISLESS", value: 484, isUnsigned: true)
!1082 = !DIEnumerator(name: "BUILT_IN_ISLESSEQUAL", value: 485, isUnsigned: true)
!1083 = !DIEnumerator(name: "BUILT_IN_ISLESSGREATER", value: 486, isUnsigned: true)
!1084 = !DIEnumerator(name: "BUILT_IN_ISUNORDERED", value: 487, isUnsigned: true)
!1085 = !DIEnumerator(name: "BUILT_IN_LABS", value: 488, isUnsigned: true)
!1086 = !DIEnumerator(name: "BUILT_IN_LLABS", value: 489, isUnsigned: true)
!1087 = !DIEnumerator(name: "BUILT_IN_LONGJMP", value: 490, isUnsigned: true)
!1088 = !DIEnumerator(name: "BUILT_IN_MALLOC", value: 491, isUnsigned: true)
!1089 = !DIEnumerator(name: "BUILT_IN_NEXT_ARG", value: 492, isUnsigned: true)
!1090 = !DIEnumerator(name: "BUILT_IN_PARITY", value: 493, isUnsigned: true)
!1091 = !DIEnumerator(name: "BUILT_IN_PARITYIMAX", value: 494, isUnsigned: true)
!1092 = !DIEnumerator(name: "BUILT_IN_PARITYL", value: 495, isUnsigned: true)
!1093 = !DIEnumerator(name: "BUILT_IN_PARITYLL", value: 496, isUnsigned: true)
!1094 = !DIEnumerator(name: "BUILT_IN_POPCOUNT", value: 497, isUnsigned: true)
!1095 = !DIEnumerator(name: "BUILT_IN_POPCOUNTIMAX", value: 498, isUnsigned: true)
!1096 = !DIEnumerator(name: "BUILT_IN_POPCOUNTL", value: 499, isUnsigned: true)
!1097 = !DIEnumerator(name: "BUILT_IN_POPCOUNTLL", value: 500, isUnsigned: true)
!1098 = !DIEnumerator(name: "BUILT_IN_PREFETCH", value: 501, isUnsigned: true)
!1099 = !DIEnumerator(name: "BUILT_IN_REALLOC", value: 502, isUnsigned: true)
!1100 = !DIEnumerator(name: "BUILT_IN_RETURN", value: 503, isUnsigned: true)
!1101 = !DIEnumerator(name: "BUILT_IN_RETURN_ADDRESS", value: 504, isUnsigned: true)
!1102 = !DIEnumerator(name: "BUILT_IN_SAVEREGS", value: 505, isUnsigned: true)
!1103 = !DIEnumerator(name: "BUILT_IN_SETJMP", value: 506, isUnsigned: true)
!1104 = !DIEnumerator(name: "BUILT_IN_STRFMON", value: 507, isUnsigned: true)
!1105 = !DIEnumerator(name: "BUILT_IN_STRFTIME", value: 508, isUnsigned: true)
!1106 = !DIEnumerator(name: "BUILT_IN_TRAP", value: 509, isUnsigned: true)
!1107 = !DIEnumerator(name: "BUILT_IN_UNREACHABLE", value: 510, isUnsigned: true)
!1108 = !DIEnumerator(name: "BUILT_IN_UNWIND_INIT", value: 511, isUnsigned: true)
!1109 = !DIEnumerator(name: "BUILT_IN_UPDATE_SETJMP_BUF", value: 512, isUnsigned: true)
!1110 = !DIEnumerator(name: "BUILT_IN_VA_COPY", value: 513, isUnsigned: true)
!1111 = !DIEnumerator(name: "BUILT_IN_VA_END", value: 514, isUnsigned: true)
!1112 = !DIEnumerator(name: "BUILT_IN_VA_START", value: 515, isUnsigned: true)
!1113 = !DIEnumerator(name: "BUILT_IN_VA_ARG_PACK", value: 516, isUnsigned: true)
!1114 = !DIEnumerator(name: "BUILT_IN_VA_ARG_PACK_LEN", value: 517, isUnsigned: true)
!1115 = !DIEnumerator(name: "BUILT_IN__EXIT", value: 518, isUnsigned: true)
!1116 = !DIEnumerator(name: "BUILT_IN__EXIT2", value: 519, isUnsigned: true)
!1117 = !DIEnumerator(name: "BUILT_IN_INIT_TRAMPOLINE", value: 520, isUnsigned: true)
!1118 = !DIEnumerator(name: "BUILT_IN_ADJUST_TRAMPOLINE", value: 521, isUnsigned: true)
!1119 = !DIEnumerator(name: "BUILT_IN_NONLOCAL_GOTO", value: 522, isUnsigned: true)
!1120 = !DIEnumerator(name: "BUILT_IN_SETJMP_SETUP", value: 523, isUnsigned: true)
!1121 = !DIEnumerator(name: "BUILT_IN_SETJMP_DISPATCHER", value: 524, isUnsigned: true)
!1122 = !DIEnumerator(name: "BUILT_IN_SETJMP_RECEIVER", value: 525, isUnsigned: true)
!1123 = !DIEnumerator(name: "BUILT_IN_STACK_SAVE", value: 526, isUnsigned: true)
!1124 = !DIEnumerator(name: "BUILT_IN_STACK_RESTORE", value: 527, isUnsigned: true)
!1125 = !DIEnumerator(name: "BUILT_IN_OBJECT_SIZE", value: 528, isUnsigned: true)
!1126 = !DIEnumerator(name: "BUILT_IN_MEMCPY_CHK", value: 529, isUnsigned: true)
!1127 = !DIEnumerator(name: "BUILT_IN_MEMMOVE_CHK", value: 530, isUnsigned: true)
!1128 = !DIEnumerator(name: "BUILT_IN_MEMPCPY_CHK", value: 531, isUnsigned: true)
!1129 = !DIEnumerator(name: "BUILT_IN_MEMSET_CHK", value: 532, isUnsigned: true)
!1130 = !DIEnumerator(name: "BUILT_IN_STPCPY_CHK", value: 533, isUnsigned: true)
!1131 = !DIEnumerator(name: "BUILT_IN_STRCAT_CHK", value: 534, isUnsigned: true)
!1132 = !DIEnumerator(name: "BUILT_IN_STRCPY_CHK", value: 535, isUnsigned: true)
!1133 = !DIEnumerator(name: "BUILT_IN_STRNCAT_CHK", value: 536, isUnsigned: true)
!1134 = !DIEnumerator(name: "BUILT_IN_STRNCPY_CHK", value: 537, isUnsigned: true)
!1135 = !DIEnumerator(name: "BUILT_IN_SNPRINTF_CHK", value: 538, isUnsigned: true)
!1136 = !DIEnumerator(name: "BUILT_IN_SPRINTF_CHK", value: 539, isUnsigned: true)
!1137 = !DIEnumerator(name: "BUILT_IN_VSNPRINTF_CHK", value: 540, isUnsigned: true)
!1138 = !DIEnumerator(name: "BUILT_IN_VSPRINTF_CHK", value: 541, isUnsigned: true)
!1139 = !DIEnumerator(name: "BUILT_IN_FPRINTF_CHK", value: 542, isUnsigned: true)
!1140 = !DIEnumerator(name: "BUILT_IN_PRINTF_CHK", value: 543, isUnsigned: true)
!1141 = !DIEnumerator(name: "BUILT_IN_VFPRINTF_CHK", value: 544, isUnsigned: true)
!1142 = !DIEnumerator(name: "BUILT_IN_VPRINTF_CHK", value: 545, isUnsigned: true)
!1143 = !DIEnumerator(name: "BUILT_IN_PROFILE_FUNC_ENTER", value: 546, isUnsigned: true)
!1144 = !DIEnumerator(name: "BUILT_IN_PROFILE_FUNC_EXIT", value: 547, isUnsigned: true)
!1145 = !DIEnumerator(name: "BUILT_IN_EMUTLS_GET_ADDRESS", value: 548, isUnsigned: true)
!1146 = !DIEnumerator(name: "BUILT_IN_EMUTLS_REGISTER_COMMON", value: 549, isUnsigned: true)
!1147 = !DIEnumerator(name: "BUILT_IN_UNWIND_RESUME", value: 550, isUnsigned: true)
!1148 = !DIEnumerator(name: "BUILT_IN_CXA_END_CLEANUP", value: 551, isUnsigned: true)
!1149 = !DIEnumerator(name: "BUILT_IN_EH_POINTER", value: 552, isUnsigned: true)
!1150 = !DIEnumerator(name: "BUILT_IN_EH_FILTER", value: 553, isUnsigned: true)
!1151 = !DIEnumerator(name: "BUILT_IN_EH_COPY_VALUES", value: 554, isUnsigned: true)
!1152 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_N", value: 555, isUnsigned: true)
!1153 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_1", value: 556, isUnsigned: true)
!1154 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_2", value: 557, isUnsigned: true)
!1155 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_4", value: 558, isUnsigned: true)
!1156 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_8", value: 559, isUnsigned: true)
!1157 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_16", value: 560, isUnsigned: true)
!1158 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_N", value: 561, isUnsigned: true)
!1159 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_1", value: 562, isUnsigned: true)
!1160 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_2", value: 563, isUnsigned: true)
!1161 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_4", value: 564, isUnsigned: true)
!1162 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_8", value: 565, isUnsigned: true)
!1163 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_16", value: 566, isUnsigned: true)
!1164 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_N", value: 567, isUnsigned: true)
!1165 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_1", value: 568, isUnsigned: true)
!1166 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_2", value: 569, isUnsigned: true)
!1167 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_4", value: 570, isUnsigned: true)
!1168 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_8", value: 571, isUnsigned: true)
!1169 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_16", value: 572, isUnsigned: true)
!1170 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_N", value: 573, isUnsigned: true)
!1171 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_1", value: 574, isUnsigned: true)
!1172 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_2", value: 575, isUnsigned: true)
!1173 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_4", value: 576, isUnsigned: true)
!1174 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_8", value: 577, isUnsigned: true)
!1175 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_16", value: 578, isUnsigned: true)
!1176 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_N", value: 579, isUnsigned: true)
!1177 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_1", value: 580, isUnsigned: true)
!1178 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_2", value: 581, isUnsigned: true)
!1179 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_4", value: 582, isUnsigned: true)
!1180 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_8", value: 583, isUnsigned: true)
!1181 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_16", value: 584, isUnsigned: true)
!1182 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_N", value: 585, isUnsigned: true)
!1183 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_1", value: 586, isUnsigned: true)
!1184 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_2", value: 587, isUnsigned: true)
!1185 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_4", value: 588, isUnsigned: true)
!1186 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_8", value: 589, isUnsigned: true)
!1187 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_16", value: 590, isUnsigned: true)
!1188 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_N", value: 591, isUnsigned: true)
!1189 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_1", value: 592, isUnsigned: true)
!1190 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_2", value: 593, isUnsigned: true)
!1191 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_4", value: 594, isUnsigned: true)
!1192 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_8", value: 595, isUnsigned: true)
!1193 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_16", value: 596, isUnsigned: true)
!1194 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_N", value: 597, isUnsigned: true)
!1195 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_1", value: 598, isUnsigned: true)
!1196 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_2", value: 599, isUnsigned: true)
!1197 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_4", value: 600, isUnsigned: true)
!1198 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_8", value: 601, isUnsigned: true)
!1199 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_16", value: 602, isUnsigned: true)
!1200 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_N", value: 603, isUnsigned: true)
!1201 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_1", value: 604, isUnsigned: true)
!1202 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_2", value: 605, isUnsigned: true)
!1203 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_4", value: 606, isUnsigned: true)
!1204 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_8", value: 607, isUnsigned: true)
!1205 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_16", value: 608, isUnsigned: true)
!1206 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_N", value: 609, isUnsigned: true)
!1207 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_1", value: 610, isUnsigned: true)
!1208 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_2", value: 611, isUnsigned: true)
!1209 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_4", value: 612, isUnsigned: true)
!1210 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_8", value: 613, isUnsigned: true)
!1211 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_16", value: 614, isUnsigned: true)
!1212 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_N", value: 615, isUnsigned: true)
!1213 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_1", value: 616, isUnsigned: true)
!1214 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_2", value: 617, isUnsigned: true)
!1215 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_4", value: 618, isUnsigned: true)
!1216 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_8", value: 619, isUnsigned: true)
!1217 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_16", value: 620, isUnsigned: true)
!1218 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_N", value: 621, isUnsigned: true)
!1219 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_1", value: 622, isUnsigned: true)
!1220 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_2", value: 623, isUnsigned: true)
!1221 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_4", value: 624, isUnsigned: true)
!1222 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_8", value: 625, isUnsigned: true)
!1223 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_16", value: 626, isUnsigned: true)
!1224 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_N", value: 627, isUnsigned: true)
!1225 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_1", value: 628, isUnsigned: true)
!1226 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_2", value: 629, isUnsigned: true)
!1227 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_4", value: 630, isUnsigned: true)
!1228 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_8", value: 631, isUnsigned: true)
!1229 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_16", value: 632, isUnsigned: true)
!1230 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_N", value: 633, isUnsigned: true)
!1231 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_1", value: 634, isUnsigned: true)
!1232 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_2", value: 635, isUnsigned: true)
!1233 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_4", value: 636, isUnsigned: true)
!1234 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_8", value: 637, isUnsigned: true)
!1235 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_16", value: 638, isUnsigned: true)
!1236 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_N", value: 639, isUnsigned: true)
!1237 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_1", value: 640, isUnsigned: true)
!1238 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_2", value: 641, isUnsigned: true)
!1239 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_4", value: 642, isUnsigned: true)
!1240 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_8", value: 643, isUnsigned: true)
!1241 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_16", value: 644, isUnsigned: true)
!1242 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_N", value: 645, isUnsigned: true)
!1243 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_1", value: 646, isUnsigned: true)
!1244 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_2", value: 647, isUnsigned: true)
!1245 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_4", value: 648, isUnsigned: true)
!1246 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_8", value: 649, isUnsigned: true)
!1247 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_16", value: 650, isUnsigned: true)
!1248 = !DIEnumerator(name: "BUILT_IN_SYNCHRONIZE", value: 651, isUnsigned: true)
!1249 = !DIEnumerator(name: "BUILT_IN_OMP_GET_THREAD_NUM", value: 652, isUnsigned: true)
!1250 = !DIEnumerator(name: "BUILT_IN_OMP_GET_NUM_THREADS", value: 653, isUnsigned: true)
!1251 = !DIEnumerator(name: "BUILT_IN_GOMP_ATOMIC_START", value: 654, isUnsigned: true)
!1252 = !DIEnumerator(name: "BUILT_IN_GOMP_ATOMIC_END", value: 655, isUnsigned: true)
!1253 = !DIEnumerator(name: "BUILT_IN_GOMP_BARRIER", value: 656, isUnsigned: true)
!1254 = !DIEnumerator(name: "BUILT_IN_GOMP_TASKWAIT", value: 657, isUnsigned: true)
!1255 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_START", value: 658, isUnsigned: true)
!1256 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_END", value: 659, isUnsigned: true)
!1257 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_NAME_START", value: 660, isUnsigned: true)
!1258 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_NAME_END", value: 661, isUnsigned: true)
!1259 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_STATIC_START", value: 662, isUnsigned: true)
!1260 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_DYNAMIC_START", value: 663, isUnsigned: true)
!1261 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_GUIDED_START", value: 664, isUnsigned: true)
!1262 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_RUNTIME_START", value: 665, isUnsigned: true)
!1263 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_STATIC_START", value: 666, isUnsigned: true)
!1264 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_START", value: 667, isUnsigned: true)
!1265 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_START", value: 668, isUnsigned: true)
!1266 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_START", value: 669, isUnsigned: true)
!1267 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_STATIC_NEXT", value: 670, isUnsigned: true)
!1268 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_DYNAMIC_NEXT", value: 671, isUnsigned: true)
!1269 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_GUIDED_NEXT", value: 672, isUnsigned: true)
!1270 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_RUNTIME_NEXT", value: 673, isUnsigned: true)
!1271 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_STATIC_NEXT", value: 674, isUnsigned: true)
!1272 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_NEXT", value: 675, isUnsigned: true)
!1273 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_NEXT", value: 676, isUnsigned: true)
!1274 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_NEXT", value: 677, isUnsigned: true)
!1275 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_STATIC_START", value: 678, isUnsigned: true)
!1276 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_START", value: 679, isUnsigned: true)
!1277 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_GUIDED_START", value: 680, isUnsigned: true)
!1278 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_RUNTIME_START", value: 681, isUnsigned: true)
!1279 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_START", value: 682, isUnsigned: true)
!1280 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_START", value: 683, isUnsigned: true)
!1281 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_START", value: 684, isUnsigned: true)
!1282 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_START", value: 685, isUnsigned: true)
!1283 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_STATIC_NEXT", value: 686, isUnsigned: true)
!1284 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_NEXT", value: 687, isUnsigned: true)
!1285 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_GUIDED_NEXT", value: 688, isUnsigned: true)
!1286 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_RUNTIME_NEXT", value: 689, isUnsigned: true)
!1287 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_NEXT", value: 690, isUnsigned: true)
!1288 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_NEXT", value: 691, isUnsigned: true)
!1289 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_NEXT", value: 692, isUnsigned: true)
!1290 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_NEXT", value: 693, isUnsigned: true)
!1291 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_STATIC_START", value: 694, isUnsigned: true)
!1292 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_DYNAMIC_START", value: 695, isUnsigned: true)
!1293 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_GUIDED_START", value: 696, isUnsigned: true)
!1294 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_RUNTIME_START", value: 697, isUnsigned: true)
!1295 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_END", value: 698, isUnsigned: true)
!1296 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_END_NOWAIT", value: 699, isUnsigned: true)
!1297 = !DIEnumerator(name: "BUILT_IN_GOMP_ORDERED_START", value: 700, isUnsigned: true)
!1298 = !DIEnumerator(name: "BUILT_IN_GOMP_ORDERED_END", value: 701, isUnsigned: true)
!1299 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_START", value: 702, isUnsigned: true)
!1300 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_END", value: 703, isUnsigned: true)
!1301 = !DIEnumerator(name: "BUILT_IN_GOMP_TASK", value: 704, isUnsigned: true)
!1302 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_START", value: 705, isUnsigned: true)
!1303 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_NEXT", value: 706, isUnsigned: true)
!1304 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_SECTIONS_START", value: 707, isUnsigned: true)
!1305 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_END", value: 708, isUnsigned: true)
!1306 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_END_NOWAIT", value: 709, isUnsigned: true)
!1307 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_START", value: 710, isUnsigned: true)
!1308 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_COPY_START", value: 711, isUnsigned: true)
!1309 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_COPY_END", value: 712, isUnsigned: true)
!1310 = !DIEnumerator(name: "BUILT_IN_COMPLEX_MUL_MIN", value: 713, isUnsigned: true)
!1311 = !DIEnumerator(name: "BUILT_IN_COMPLEX_MUL_MAX", value: 716, isUnsigned: true)
!1312 = !DIEnumerator(name: "BUILT_IN_COMPLEX_DIV_MIN", value: 717, isUnsigned: true)
!1313 = !DIEnumerator(name: "BUILT_IN_COMPLEX_DIV_MAX", value: 720, isUnsigned: true)
!1314 = !DIEnumerator(name: "END_BUILTINS", value: 721, isUnsigned: true)
!1315 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "size_type_kind", file: !135, line: 4288, baseType: !7, size: 32, elements: !1316)
!1316 = !{!1317, !1318, !1319, !1320, !1321}
!1317 = !DIEnumerator(name: "SIZETYPE", value: 0, isUnsigned: true)
!1318 = !DIEnumerator(name: "SSIZETYPE", value: 1, isUnsigned: true)
!1319 = !DIEnumerator(name: "BITSIZETYPE", value: 2, isUnsigned: true)
!1320 = !DIEnumerator(name: "SBITSIZETYPE", value: 3, isUnsigned: true)
!1321 = !DIEnumerator(name: "TYPE_KIND_LAST", value: 4, isUnsigned: true)
!1322 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "fallback", file: !385, line: 957, baseType: !7, size: 32, elements: !1323)
!1323 = !{!1324, !1325, !1326, !1327, !1328}
!1324 = !DIEnumerator(name: "fb_none", value: 0, isUnsigned: true)
!1325 = !DIEnumerator(name: "fb_rvalue", value: 1, isUnsigned: true)
!1326 = !DIEnumerator(name: "fb_lvalue", value: 2, isUnsigned: true)
!1327 = !DIEnumerator(name: "fb_mayfail", value: 4, isUnsigned: true)
!1328 = !DIEnumerator(name: "fb_either", value: 3, isUnsigned: true)
!1329 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimplify_status", file: !385, line: 973, baseType: !1330, size: 32, elements: !1331)
!1330 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!1331 = !{!1332, !1333, !1334, !1335}
!1332 = !DIEnumerator(name: "GS_ERROR", value: -2)
!1333 = !DIEnumerator(name: "GS_UNHANDLED", value: -1)
!1334 = !DIEnumerator(name: "GS_OK", value: 0)
!1335 = !DIEnumerator(name: "GS_ALL_DONE", value: 1)
!1336 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "br_predictor", file: !1337, line: 24, baseType: !7, size: 32, elements: !1338)
!1337 = !DIFile(filename: "./predict.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1338 = !{!1339, !1340, !1341, !1342, !1343, !1344, !1345, !1346, !1347, !1348, !1349, !1350, !1351, !1352, !1353, !1354, !1355, !1356, !1357, !1358, !1359, !1360, !1361, !1362, !1363, !1364, !1365, !1366, !1367}
!1339 = !DIEnumerator(name: "PRED_COMBINED", value: 0, isUnsigned: true)
!1340 = !DIEnumerator(name: "PRED_DS_THEORY", value: 1, isUnsigned: true)
!1341 = !DIEnumerator(name: "PRED_FIRST_MATCH", value: 2, isUnsigned: true)
!1342 = !DIEnumerator(name: "PRED_NO_PREDICTION", value: 3, isUnsigned: true)
!1343 = !DIEnumerator(name: "PRED_UNCONDITIONAL", value: 4, isUnsigned: true)
!1344 = !DIEnumerator(name: "PRED_LOOP_ITERATIONS", value: 5, isUnsigned: true)
!1345 = !DIEnumerator(name: "PRED_BUILTIN_EXPECT", value: 6, isUnsigned: true)
!1346 = !DIEnumerator(name: "PRED_LOOP_ITERATIONS_GUESSED", value: 7, isUnsigned: true)
!1347 = !DIEnumerator(name: "PRED_CONTINUE", value: 8, isUnsigned: true)
!1348 = !DIEnumerator(name: "PRED_NORETURN", value: 9, isUnsigned: true)
!1349 = !DIEnumerator(name: "PRED_COLD_FUNCTION", value: 10, isUnsigned: true)
!1350 = !DIEnumerator(name: "PRED_LOOP_BRANCH", value: 11, isUnsigned: true)
!1351 = !DIEnumerator(name: "PRED_LOOP_EXIT", value: 12, isUnsigned: true)
!1352 = !DIEnumerator(name: "PRED_POINTER", value: 13, isUnsigned: true)
!1353 = !DIEnumerator(name: "PRED_TREE_POINTER", value: 14, isUnsigned: true)
!1354 = !DIEnumerator(name: "PRED_OPCODE_POSITIVE", value: 15, isUnsigned: true)
!1355 = !DIEnumerator(name: "PRED_OPCODE_NONEQUAL", value: 16, isUnsigned: true)
!1356 = !DIEnumerator(name: "PRED_FPOPCODE", value: 17, isUnsigned: true)
!1357 = !DIEnumerator(name: "PRED_TREE_OPCODE_POSITIVE", value: 18, isUnsigned: true)
!1358 = !DIEnumerator(name: "PRED_TREE_OPCODE_NONEQUAL", value: 19, isUnsigned: true)
!1359 = !DIEnumerator(name: "PRED_TREE_FPOPCODE", value: 20, isUnsigned: true)
!1360 = !DIEnumerator(name: "PRED_CALL", value: 21, isUnsigned: true)
!1361 = !DIEnumerator(name: "PRED_TREE_EARLY_RETURN", value: 22, isUnsigned: true)
!1362 = !DIEnumerator(name: "PRED_GOTO", value: 23, isUnsigned: true)
!1363 = !DIEnumerator(name: "PRED_CONST_RETURN", value: 24, isUnsigned: true)
!1364 = !DIEnumerator(name: "PRED_NEGATIVE_RETURN", value: 25, isUnsigned: true)
!1365 = !DIEnumerator(name: "PRED_NULL_RETURN", value: 26, isUnsigned: true)
!1366 = !DIEnumerator(name: "PRED_MUDFLAP", value: 27, isUnsigned: true)
!1367 = !DIEnumerator(name: "END_PREDICTORS", value: 28, isUnsigned: true)
!1368 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "prediction", file: !1337, line: 32, baseType: !7, size: 32, elements: !1369)
!1369 = !{!1370, !1371}
!1370 = !DIEnumerator(name: "NOT_TAKEN", value: 0, isUnsigned: true)
!1371 = !DIEnumerator(name: "TAKEN", value: 1, isUnsigned: true)
!1372 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_try_flags", file: !385, line: 514, baseType: !7, size: 32, elements: !1373)
!1373 = !{!1374, !1375, !1376, !1377}
!1374 = !DIEnumerator(name: "GIMPLE_TRY_CATCH", value: 1, isUnsigned: true)
!1375 = !DIEnumerator(name: "GIMPLE_TRY_FINALLY", value: 2, isUnsigned: true)
!1376 = !DIEnumerator(name: "GIMPLE_TRY_KIND", value: 3, isUnsigned: true)
!1377 = !DIEnumerator(name: "GIMPLE_TRY_CATCH_IS_CLEANUP", value: 4, isUnsigned: true)
!1378 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !1379, line: 74, baseType: !7, size: 32, elements: !1380)
!1379 = !DIFile(filename: "./timevar.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1380 = !{!1381, !1382, !1383, !1384, !1385, !1386, !1387, !1388, !1389, !1390, !1391, !1392, !1393, !1394, !1395, !1396, !1397, !1398, !1399, !1400, !1401, !1402, !1403, !1404, !1405, !1406, !1407, !1408, !1409, !1410, !1411, !1412, !1413, !1414, !1415, !1416, !1417, !1418, !1419, !1420, !1421, !1422, !1423, !1424, !1425, !1426, !1427, !1428, !1429, !1430, !1431, !1432, !1433, !1434, !1435, !1436, !1437, !1438, !1439, !1440, !1441, !1442, !1443, !1444, !1445, !1446, !1447, !1448, !1449, !1450, !1451, !1452, !1453, !1454, !1455, !1456, !1457, !1458, !1459, !1460, !1461, !1462, !1463, !1464, !1465, !1466, !1467, !1468, !1469, !1470, !1471, !1472, !1473, !1474, !1475, !1476, !1477, !1478, !1479, !1480, !1481, !1482, !1483, !1484, !1485, !1486, !1487, !1488, !1489, !1490, !1491, !1492, !1493, !1494, !1495, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510, !1511, !1512, !1513, !1514, !1515, !1516, !1517, !1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540, !1541, !1542, !1543, !1544, !1545, !1546, !1547, !1548, !1549, !1550, !1551, !1552, !1553}
!1381 = !DIEnumerator(name: "TV_NONE", value: 0, isUnsigned: true)
!1382 = !DIEnumerator(name: "TV_TOTAL", value: 1, isUnsigned: true)
!1383 = !DIEnumerator(name: "TV_GC", value: 2, isUnsigned: true)
!1384 = !DIEnumerator(name: "TV_DUMP", value: 3, isUnsigned: true)
!1385 = !DIEnumerator(name: "TV_CGRAPH", value: 4, isUnsigned: true)
!1386 = !DIEnumerator(name: "TV_CGRAPHOPT", value: 5, isUnsigned: true)
!1387 = !DIEnumerator(name: "TV_IPA_CONSTANT_PROP", value: 6, isUnsigned: true)
!1388 = !DIEnumerator(name: "TV_IPA_LTO_GIMPLE_IO", value: 7, isUnsigned: true)
!1389 = !DIEnumerator(name: "TV_IPA_LTO_DECL_IO", value: 8, isUnsigned: true)
!1390 = !DIEnumerator(name: "TV_IPA_LTO_CGRAPH_IO", value: 9, isUnsigned: true)
!1391 = !DIEnumerator(name: "TV_LTO", value: 10, isUnsigned: true)
!1392 = !DIEnumerator(name: "TV_WHOPR_WPA", value: 11, isUnsigned: true)
!1393 = !DIEnumerator(name: "TV_WHOPR_WPA_IO", value: 12, isUnsigned: true)
!1394 = !DIEnumerator(name: "TV_WHOPR_LTRANS", value: 13, isUnsigned: true)
!1395 = !DIEnumerator(name: "TV_WHOPR_WPA_FIXUP", value: 14, isUnsigned: true)
!1396 = !DIEnumerator(name: "TV_WHOPR_WPA_LTRANS_EXEC", value: 15, isUnsigned: true)
!1397 = !DIEnumerator(name: "TV_IPA_REFERENCE", value: 16, isUnsigned: true)
!1398 = !DIEnumerator(name: "TV_IPA_PURE_CONST", value: 17, isUnsigned: true)
!1399 = !DIEnumerator(name: "TV_IPA_TYPE_ESCAPE", value: 18, isUnsigned: true)
!1400 = !DIEnumerator(name: "TV_IPA_PTA", value: 19, isUnsigned: true)
!1401 = !DIEnumerator(name: "TV_IPA_SRA", value: 20, isUnsigned: true)
!1402 = !DIEnumerator(name: "TV_IPA_FREE_LANG_DATA", value: 21, isUnsigned: true)
!1403 = !DIEnumerator(name: "TV_CFG", value: 22, isUnsigned: true)
!1404 = !DIEnumerator(name: "TV_CLEANUP_CFG", value: 23, isUnsigned: true)
!1405 = !DIEnumerator(name: "TV_CFG_VERIFY", value: 24, isUnsigned: true)
!1406 = !DIEnumerator(name: "TV_DELETE_TRIVIALLY_DEAD", value: 25, isUnsigned: true)
!1407 = !DIEnumerator(name: "TV_LIFE", value: 26, isUnsigned: true)
!1408 = !DIEnumerator(name: "TV_LIFE_UPDATE", value: 27, isUnsigned: true)
!1409 = !DIEnumerator(name: "TV_DF_SCAN", value: 28, isUnsigned: true)
!1410 = !DIEnumerator(name: "TV_DF_MD", value: 29, isUnsigned: true)
!1411 = !DIEnumerator(name: "TV_DF_RD", value: 30, isUnsigned: true)
!1412 = !DIEnumerator(name: "TV_DF_LR", value: 31, isUnsigned: true)
!1413 = !DIEnumerator(name: "TV_DF_LIVE", value: 32, isUnsigned: true)
!1414 = !DIEnumerator(name: "TV_DF_UREC", value: 33, isUnsigned: true)
!1415 = !DIEnumerator(name: "TV_DF_CHAIN", value: 34, isUnsigned: true)
!1416 = !DIEnumerator(name: "TV_DF_BYTE_LR", value: 35, isUnsigned: true)
!1417 = !DIEnumerator(name: "TV_DF_NOTE", value: 36, isUnsigned: true)
!1418 = !DIEnumerator(name: "TV_REG_STATS", value: 37, isUnsigned: true)
!1419 = !DIEnumerator(name: "TV_ALIAS_ANALYSIS", value: 38, isUnsigned: true)
!1420 = !DIEnumerator(name: "TV_ALIAS_STMT_WALK", value: 39, isUnsigned: true)
!1421 = !DIEnumerator(name: "TV_REG_SCAN", value: 40, isUnsigned: true)
!1422 = !DIEnumerator(name: "TV_REBUILD_JUMP", value: 41, isUnsigned: true)
!1423 = !DIEnumerator(name: "TV_CPP", value: 42, isUnsigned: true)
!1424 = !DIEnumerator(name: "TV_LEX", value: 43, isUnsigned: true)
!1425 = !DIEnumerator(name: "TV_PARSE", value: 44, isUnsigned: true)
!1426 = !DIEnumerator(name: "TV_NAME_LOOKUP", value: 45, isUnsigned: true)
!1427 = !DIEnumerator(name: "TV_INLINE_HEURISTICS", value: 46, isUnsigned: true)
!1428 = !DIEnumerator(name: "TV_INTEGRATION", value: 47, isUnsigned: true)
!1429 = !DIEnumerator(name: "TV_TREE_GIMPLIFY", value: 48, isUnsigned: true)
!1430 = !DIEnumerator(name: "TV_TREE_EH", value: 49, isUnsigned: true)
!1431 = !DIEnumerator(name: "TV_TREE_CFG", value: 50, isUnsigned: true)
!1432 = !DIEnumerator(name: "TV_TREE_CLEANUP_CFG", value: 51, isUnsigned: true)
!1433 = !DIEnumerator(name: "TV_TREE_VRP", value: 52, isUnsigned: true)
!1434 = !DIEnumerator(name: "TV_TREE_COPY_PROP", value: 53, isUnsigned: true)
!1435 = !DIEnumerator(name: "TV_TREE_STORE_COPY_PROP", value: 54, isUnsigned: true)
!1436 = !DIEnumerator(name: "TV_FIND_REFERENCED_VARS", value: 55, isUnsigned: true)
!1437 = !DIEnumerator(name: "TV_TREE_PTA", value: 56, isUnsigned: true)
!1438 = !DIEnumerator(name: "TV_TREE_INSERT_PHI_NODES", value: 57, isUnsigned: true)
!1439 = !DIEnumerator(name: "TV_TREE_SSA_REWRITE_BLOCKS", value: 58, isUnsigned: true)
!1440 = !DIEnumerator(name: "TV_TREE_SSA_OTHER", value: 59, isUnsigned: true)
!1441 = !DIEnumerator(name: "TV_TREE_SSA_INCREMENTAL", value: 60, isUnsigned: true)
!1442 = !DIEnumerator(name: "TV_TREE_OPS", value: 61, isUnsigned: true)
!1443 = !DIEnumerator(name: "TV_TREE_SSA_DOMINATOR_OPTS", value: 62, isUnsigned: true)
!1444 = !DIEnumerator(name: "TV_TREE_SRA", value: 63, isUnsigned: true)
!1445 = !DIEnumerator(name: "TV_TREE_STORE_CCP", value: 64, isUnsigned: true)
!1446 = !DIEnumerator(name: "TV_TREE_CCP", value: 65, isUnsigned: true)
!1447 = !DIEnumerator(name: "TV_TREE_PHI_CPROP", value: 66, isUnsigned: true)
!1448 = !DIEnumerator(name: "TV_TREE_SPLIT_EDGES", value: 67, isUnsigned: true)
!1449 = !DIEnumerator(name: "TV_TREE_REASSOC", value: 68, isUnsigned: true)
!1450 = !DIEnumerator(name: "TV_TREE_PRE", value: 69, isUnsigned: true)
!1451 = !DIEnumerator(name: "TV_TREE_REDPHI", value: 70, isUnsigned: true)
!1452 = !DIEnumerator(name: "TV_TREE_FRE", value: 71, isUnsigned: true)
!1453 = !DIEnumerator(name: "TV_TREE_SINK", value: 72, isUnsigned: true)
!1454 = !DIEnumerator(name: "TV_TREE_PHIOPT", value: 73, isUnsigned: true)
!1455 = !DIEnumerator(name: "TV_TREE_FORWPROP", value: 74, isUnsigned: true)
!1456 = !DIEnumerator(name: "TV_TREE_PHIPROP", value: 75, isUnsigned: true)
!1457 = !DIEnumerator(name: "TV_TREE_DCE", value: 76, isUnsigned: true)
!1458 = !DIEnumerator(name: "TV_TREE_CD_DCE", value: 77, isUnsigned: true)
!1459 = !DIEnumerator(name: "TV_TREE_CALL_CDCE", value: 78, isUnsigned: true)
!1460 = !DIEnumerator(name: "TV_TREE_DSE", value: 79, isUnsigned: true)
!1461 = !DIEnumerator(name: "TV_TREE_MERGE_PHI", value: 80, isUnsigned: true)
!1462 = !DIEnumerator(name: "TV_TREE_LOOP", value: 81, isUnsigned: true)
!1463 = !DIEnumerator(name: "TV_TREE_LOOP_BOUNDS", value: 82, isUnsigned: true)
!1464 = !DIEnumerator(name: "TV_LIM", value: 83, isUnsigned: true)
!1465 = !DIEnumerator(name: "TV_TREE_LOOP_IVCANON", value: 84, isUnsigned: true)
!1466 = !DIEnumerator(name: "TV_SCEV_CONST", value: 85, isUnsigned: true)
!1467 = !DIEnumerator(name: "TV_TREE_LOOP_UNSWITCH", value: 86, isUnsigned: true)
!1468 = !DIEnumerator(name: "TV_COMPLETE_UNROLL", value: 87, isUnsigned: true)
!1469 = !DIEnumerator(name: "TV_TREE_PARALLELIZE_LOOPS", value: 88, isUnsigned: true)
!1470 = !DIEnumerator(name: "TV_TREE_VECTORIZATION", value: 89, isUnsigned: true)
!1471 = !DIEnumerator(name: "TV_TREE_SLP_VECTORIZATION", value: 90, isUnsigned: true)
!1472 = !DIEnumerator(name: "TV_GRAPHITE_TRANSFORMS", value: 91, isUnsigned: true)
!1473 = !DIEnumerator(name: "TV_GRAPHITE_DATA_DEPS", value: 92, isUnsigned: true)
!1474 = !DIEnumerator(name: "TV_GRAPHITE_CODE_GEN", value: 93, isUnsigned: true)
!1475 = !DIEnumerator(name: "TV_TREE_LINEAR_TRANSFORM", value: 94, isUnsigned: true)
!1476 = !DIEnumerator(name: "TV_TREE_LOOP_DISTRIBUTION", value: 95, isUnsigned: true)
!1477 = !DIEnumerator(name: "TV_CHECK_DATA_DEPS", value: 96, isUnsigned: true)
!1478 = !DIEnumerator(name: "TV_TREE_PREFETCH", value: 97, isUnsigned: true)
!1479 = !DIEnumerator(name: "TV_TREE_LOOP_IVOPTS", value: 98, isUnsigned: true)
!1480 = !DIEnumerator(name: "TV_PREDCOM", value: 99, isUnsigned: true)
!1481 = !DIEnumerator(name: "TV_TREE_LOOP_INIT", value: 100, isUnsigned: true)
!1482 = !DIEnumerator(name: "TV_TREE_LOOP_FINI", value: 101, isUnsigned: true)
!1483 = !DIEnumerator(name: "TV_TREE_CH", value: 102, isUnsigned: true)
!1484 = !DIEnumerator(name: "TV_TREE_SSA_UNCPROP", value: 103, isUnsigned: true)
!1485 = !DIEnumerator(name: "TV_TREE_SSA_TO_NORMAL", value: 104, isUnsigned: true)
!1486 = !DIEnumerator(name: "TV_TREE_NRV", value: 105, isUnsigned: true)
!1487 = !DIEnumerator(name: "TV_TREE_COPY_RENAME", value: 106, isUnsigned: true)
!1488 = !DIEnumerator(name: "TV_TREE_SSA_VERIFY", value: 107, isUnsigned: true)
!1489 = !DIEnumerator(name: "TV_TREE_STMT_VERIFY", value: 108, isUnsigned: true)
!1490 = !DIEnumerator(name: "TV_TREE_SWITCH_CONVERSION", value: 109, isUnsigned: true)
!1491 = !DIEnumerator(name: "TV_CGRAPH_VERIFY", value: 110, isUnsigned: true)
!1492 = !DIEnumerator(name: "TV_DOM_FRONTIERS", value: 111, isUnsigned: true)
!1493 = !DIEnumerator(name: "TV_DOMINANCE", value: 112, isUnsigned: true)
!1494 = !DIEnumerator(name: "TV_CONTROL_DEPENDENCES", value: 113, isUnsigned: true)
!1495 = !DIEnumerator(name: "TV_OVERLOAD", value: 114, isUnsigned: true)
!1496 = !DIEnumerator(name: "TV_TEMPLATE_INSTANTIATION", value: 115, isUnsigned: true)
!1497 = !DIEnumerator(name: "TV_EXPAND", value: 116, isUnsigned: true)
!1498 = !DIEnumerator(name: "TV_VARCONST", value: 117, isUnsigned: true)
!1499 = !DIEnumerator(name: "TV_LOWER_SUBREG", value: 118, isUnsigned: true)
!1500 = !DIEnumerator(name: "TV_JUMP", value: 119, isUnsigned: true)
!1501 = !DIEnumerator(name: "TV_FWPROP", value: 120, isUnsigned: true)
!1502 = !DIEnumerator(name: "TV_CSE", value: 121, isUnsigned: true)
!1503 = !DIEnumerator(name: "TV_DCE", value: 122, isUnsigned: true)
!1504 = !DIEnumerator(name: "TV_DSE1", value: 123, isUnsigned: true)
!1505 = !DIEnumerator(name: "TV_DSE2", value: 124, isUnsigned: true)
!1506 = !DIEnumerator(name: "TV_LOOP", value: 125, isUnsigned: true)
!1507 = !DIEnumerator(name: "TV_LOOP_MOVE_INVARIANTS", value: 126, isUnsigned: true)
!1508 = !DIEnumerator(name: "TV_LOOP_UNSWITCH", value: 127, isUnsigned: true)
!1509 = !DIEnumerator(name: "TV_LOOP_UNROLL", value: 128, isUnsigned: true)
!1510 = !DIEnumerator(name: "TV_LOOP_DOLOOP", value: 129, isUnsigned: true)
!1511 = !DIEnumerator(name: "TV_CPROP", value: 130, isUnsigned: true)
!1512 = !DIEnumerator(name: "TV_PRE", value: 131, isUnsigned: true)
!1513 = !DIEnumerator(name: "TV_HOIST", value: 132, isUnsigned: true)
!1514 = !DIEnumerator(name: "TV_LSM", value: 133, isUnsigned: true)
!1515 = !DIEnumerator(name: "TV_TRACER", value: 134, isUnsigned: true)
!1516 = !DIEnumerator(name: "TV_WEB", value: 135, isUnsigned: true)
!1517 = !DIEnumerator(name: "TV_AUTO_INC_DEC", value: 136, isUnsigned: true)
!1518 = !DIEnumerator(name: "TV_CSE2", value: 137, isUnsigned: true)
!1519 = !DIEnumerator(name: "TV_BRANCH_PROB", value: 138, isUnsigned: true)
!1520 = !DIEnumerator(name: "TV_VPT", value: 139, isUnsigned: true)
!1521 = !DIEnumerator(name: "TV_COMBINE", value: 140, isUnsigned: true)
!1522 = !DIEnumerator(name: "TV_IFCVT", value: 141, isUnsigned: true)
!1523 = !DIEnumerator(name: "TV_REGMOVE", value: 142, isUnsigned: true)
!1524 = !DIEnumerator(name: "TV_MODE_SWITCH", value: 143, isUnsigned: true)
!1525 = !DIEnumerator(name: "TV_SMS", value: 144, isUnsigned: true)
!1526 = !DIEnumerator(name: "TV_SCHED", value: 145, isUnsigned: true)
!1527 = !DIEnumerator(name: "TV_LOCAL_ALLOC", value: 146, isUnsigned: true)
!1528 = !DIEnumerator(name: "TV_GLOBAL_ALLOC", value: 147, isUnsigned: true)
!1529 = !DIEnumerator(name: "TV_IRA", value: 148, isUnsigned: true)
!1530 = !DIEnumerator(name: "TV_RELOAD", value: 149, isUnsigned: true)
!1531 = !DIEnumerator(name: "TV_RELOAD_CSE_REGS", value: 150, isUnsigned: true)
!1532 = !DIEnumerator(name: "TV_SEQABSTR", value: 151, isUnsigned: true)
!1533 = !DIEnumerator(name: "TV_GCSE_AFTER_RELOAD", value: 152, isUnsigned: true)
!1534 = !DIEnumerator(name: "TV_THREAD_PROLOGUE_AND_EPILOGUE", value: 153, isUnsigned: true)
!1535 = !DIEnumerator(name: "TV_IFCVT2", value: 154, isUnsigned: true)
!1536 = !DIEnumerator(name: "TV_COMBINE_STACK_ADJUST", value: 155, isUnsigned: true)
!1537 = !DIEnumerator(name: "TV_PEEPHOLE2", value: 156, isUnsigned: true)
!1538 = !DIEnumerator(name: "TV_RENAME_REGISTERS", value: 157, isUnsigned: true)
!1539 = !DIEnumerator(name: "TV_CPROP_REGISTERS", value: 158, isUnsigned: true)
!1540 = !DIEnumerator(name: "TV_SCHED2", value: 159, isUnsigned: true)
!1541 = !DIEnumerator(name: "TV_MACH_DEP", value: 160, isUnsigned: true)
!1542 = !DIEnumerator(name: "TV_DBR_SCHED", value: 161, isUnsigned: true)
!1543 = !DIEnumerator(name: "TV_REORDER_BLOCKS", value: 162, isUnsigned: true)
!1544 = !DIEnumerator(name: "TV_SHORTEN_BRANCH", value: 163, isUnsigned: true)
!1545 = !DIEnumerator(name: "TV_REG_STACK", value: 164, isUnsigned: true)
!1546 = !DIEnumerator(name: "TV_FINAL", value: 165, isUnsigned: true)
!1547 = !DIEnumerator(name: "TV_SYMOUT", value: 166, isUnsigned: true)
!1548 = !DIEnumerator(name: "TV_VAR_TRACKING", value: 167, isUnsigned: true)
!1549 = !DIEnumerator(name: "TV_TREE_IFCOMBINE", value: 168, isUnsigned: true)
!1550 = !DIEnumerator(name: "TV_PLUGIN_INIT", value: 169, isUnsigned: true)
!1551 = !DIEnumerator(name: "TV_PLUGIN_RUN", value: 170, isUnsigned: true)
!1552 = !DIEnumerator(name: "TV_REST_OF_COMPILATION", value: 171, isUnsigned: true)
!1553 = !DIEnumerator(name: "TIMEVAR_LAST", value: 172, isUnsigned: true)
!1554 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_rhs_class", file: !385, line: 80, baseType: !7, size: 32, elements: !1555)
!1555 = !{!1556, !1557, !1558, !1559}
!1556 = !DIEnumerator(name: "GIMPLE_INVALID_RHS", value: 0, isUnsigned: true)
!1557 = !DIEnumerator(name: "GIMPLE_BINARY_RHS", value: 1, isUnsigned: true)
!1558 = !DIEnumerator(name: "GIMPLE_UNARY_RHS", value: 2, isUnsigned: true)
!1559 = !DIEnumerator(name: "GIMPLE_SINGLE_RHS", value: 3, isUnsigned: true)
!1560 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gsi_iterator_update", file: !385, line: 4603, baseType: !7, size: 32, elements: !1561)
!1561 = !{!1562, !1563, !1564}
!1562 = !DIEnumerator(name: "GSI_NEW_STMT", value: 0, isUnsigned: true)
!1563 = !DIEnumerator(name: "GSI_SAME_STMT", value: 1, isUnsigned: true)
!1564 = !DIEnumerator(name: "GSI_CONTINUE_LINKING", value: 2, isUnsigned: true)
!1565 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tsi_iterator_update", file: !1566, line: 95, baseType: !7, size: 32, elements: !1567)
!1566 = !DIFile(filename: "./tree-iterator.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1567 = !{!1568, !1569, !1570, !1571, !1572}
!1568 = !DIEnumerator(name: "TSI_NEW_STMT", value: 0, isUnsigned: true)
!1569 = !DIEnumerator(name: "TSI_SAME_STMT", value: 1, isUnsigned: true)
!1570 = !DIEnumerator(name: "TSI_CHAIN_START", value: 2, isUnsigned: true)
!1571 = !DIEnumerator(name: "TSI_CHAIN_END", value: 3, isUnsigned: true)
!1572 = !DIEnumerator(name: "TSI_CONTINUE_LINKING", value: 4, isUnsigned: true)
!1573 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "insert_option", file: !1574, line: 147, baseType: !7, size: 32, elements: !1575)
!1574 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1575 = !{!1576, !1577}
!1576 = !DIEnumerator(name: "NO_INSERT", value: 0, isUnsigned: true)
!1577 = !DIEnumerator(name: "INSERT", value: 1, isUnsigned: true)
!1578 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "plf_mask", file: !385, line: 130, baseType: !7, size: 32, elements: !1579)
!1579 = !{!1580, !1581}
!1580 = !DIEnumerator(name: "GF_PLF_1", value: 1, isUnsigned: true)
!1581 = !DIEnumerator(name: "GF_PLF_2", value: 2, isUnsigned: true)
!1582 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "stack_check_type", file: !1583, line: 310, baseType: !7, size: 32, elements: !1584)
!1583 = !DIFile(filename: "./flags.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1584 = !{!1585, !1586, !1587, !1588}
!1585 = !DIEnumerator(name: "NO_STACK_CHECK", value: 0, isUnsigned: true)
!1586 = !DIEnumerator(name: "GENERIC_STACK_CHECK", value: 1, isUnsigned: true)
!1587 = !DIEnumerator(name: "STATIC_BUILTIN_STACK_CHECK", value: 2, isUnsigned: true)
!1588 = !DIEnumerator(name: "FULL_BUILTIN_STACK_CHECK", value: 3, isUnsigned: true)
!1589 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gf_mask", file: !385, line: 100, baseType: !7, size: 32, elements: !1590)
!1590 = !{!1591, !1592, !1593, !1594, !1595, !1596, !1597, !1598, !1599, !1600, !1601}
!1591 = !DIEnumerator(name: "GF_ASM_INPUT", value: 1, isUnsigned: true)
!1592 = !DIEnumerator(name: "GF_ASM_VOLATILE", value: 2, isUnsigned: true)
!1593 = !DIEnumerator(name: "GF_CALL_CANNOT_INLINE", value: 1, isUnsigned: true)
!1594 = !DIEnumerator(name: "GF_CALL_FROM_THUNK", value: 2, isUnsigned: true)
!1595 = !DIEnumerator(name: "GF_CALL_RETURN_SLOT_OPT", value: 4, isUnsigned: true)
!1596 = !DIEnumerator(name: "GF_CALL_TAILCALL", value: 8, isUnsigned: true)
!1597 = !DIEnumerator(name: "GF_CALL_VA_ARG_PACK", value: 16, isUnsigned: true)
!1598 = !DIEnumerator(name: "GF_OMP_PARALLEL_COMBINED", value: 1, isUnsigned: true)
!1599 = !DIEnumerator(name: "GF_OMP_RETURN_NOWAIT", value: 1, isUnsigned: true)
!1600 = !DIEnumerator(name: "GF_OMP_SECTION_LAST", value: 1, isUnsigned: true)
!1601 = !DIEnumerator(name: "GF_PREDICT_TAKEN", value: 32768, isUnsigned: true)
!1602 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !1603, line: 29, baseType: !7, size: 32, elements: !1604)
!1603 = !DIFile(filename: "./diagnostic.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1604 = !{!1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617}
!1605 = !DIEnumerator(name: "DK_UNSPECIFIED", value: 0, isUnsigned: true)
!1606 = !DIEnumerator(name: "DK_IGNORED", value: 1, isUnsigned: true)
!1607 = !DIEnumerator(name: "DK_FATAL", value: 2, isUnsigned: true)
!1608 = !DIEnumerator(name: "DK_ICE", value: 3, isUnsigned: true)
!1609 = !DIEnumerator(name: "DK_ERROR", value: 4, isUnsigned: true)
!1610 = !DIEnumerator(name: "DK_SORRY", value: 5, isUnsigned: true)
!1611 = !DIEnumerator(name: "DK_WARNING", value: 6, isUnsigned: true)
!1612 = !DIEnumerator(name: "DK_ANACHRONISM", value: 7, isUnsigned: true)
!1613 = !DIEnumerator(name: "DK_NOTE", value: 8, isUnsigned: true)
!1614 = !DIEnumerator(name: "DK_DEBUG", value: 9, isUnsigned: true)
!1615 = !DIEnumerator(name: "DK_PEDWARN", value: 10, isUnsigned: true)
!1616 = !DIEnumerator(name: "DK_PERMERROR", value: 11, isUnsigned: true)
!1617 = !DIEnumerator(name: "DK_LAST_DIAGNOSTIC_KIND", value: 12, isUnsigned: true)
!1618 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tls_model", file: !1619, line: 97, baseType: !7, size: 32, elements: !1620)
!1619 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1620 = !{!1621, !1622, !1623, !1624, !1625, !1626, !1627}
!1621 = !DIEnumerator(name: "TLS_MODEL_NONE", value: 0, isUnsigned: true)
!1622 = !DIEnumerator(name: "TLS_MODEL_EMULATED", value: 1, isUnsigned: true)
!1623 = !DIEnumerator(name: "TLS_MODEL_REAL", value: 2, isUnsigned: true)
!1624 = !DIEnumerator(name: "TLS_MODEL_GLOBAL_DYNAMIC", value: 2, isUnsigned: true)
!1625 = !DIEnumerator(name: "TLS_MODEL_LOCAL_DYNAMIC", value: 3, isUnsigned: true)
!1626 = !DIEnumerator(name: "TLS_MODEL_INITIAL_EXEC", value: 4, isUnsigned: true)
!1627 = !DIEnumerator(name: "TLS_MODEL_LOCAL_EXEC", value: 5, isUnsigned: true)
!1628 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !1629, line: 309, baseType: !7, size: 32, elements: !1630)
!1629 = !DIFile(filename: "./cgraph.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1630 = !{!1631, !1632, !1633, !1634, !1635, !1636, !1637, !1638, !1639, !1640, !1641, !1642, !1643, !1644, !1645, !1646, !1647, !1648, !1649, !1650}
!1631 = !DIEnumerator(name: "CIF_OK", value: 0, isUnsigned: true)
!1632 = !DIEnumerator(name: "CIF_UNSPECIFIED", value: 1, isUnsigned: true)
!1633 = !DIEnumerator(name: "CIF_FUNCTION_NOT_CONSIDERED", value: 2, isUnsigned: true)
!1634 = !DIEnumerator(name: "CIF_BODY_NOT_AVAILABLE", value: 3, isUnsigned: true)
!1635 = !DIEnumerator(name: "CIF_REDEFINED_EXTERN_INLINE", value: 4, isUnsigned: true)
!1636 = !DIEnumerator(name: "CIF_FUNCTION_NOT_INLINABLE", value: 5, isUnsigned: true)
!1637 = !DIEnumerator(name: "CIF_FUNCTION_NOT_INLINE_CANDIDATE", value: 6, isUnsigned: true)
!1638 = !DIEnumerator(name: "CIF_LARGE_FUNCTION_GROWTH_LIMIT", value: 7, isUnsigned: true)
!1639 = !DIEnumerator(name: "CIF_LARGE_STACK_FRAME_GROWTH_LIMIT", value: 8, isUnsigned: true)
!1640 = !DIEnumerator(name: "CIF_MAX_INLINE_INSNS_SINGLE_LIMIT", value: 9, isUnsigned: true)
!1641 = !DIEnumerator(name: "CIF_MAX_INLINE_INSNS_AUTO_LIMIT", value: 10, isUnsigned: true)
!1642 = !DIEnumerator(name: "CIF_INLINE_UNIT_GROWTH_LIMIT", value: 11, isUnsigned: true)
!1643 = !DIEnumerator(name: "CIF_RECURSIVE_INLINING", value: 12, isUnsigned: true)
!1644 = !DIEnumerator(name: "CIF_UNLIKELY_CALL", value: 13, isUnsigned: true)
!1645 = !DIEnumerator(name: "CIF_NOT_DECLARED_INLINED", value: 14, isUnsigned: true)
!1646 = !DIEnumerator(name: "CIF_OPTIMIZING_FOR_SIZE", value: 15, isUnsigned: true)
!1647 = !DIEnumerator(name: "CIF_TARGET_OPTION_MISMATCH", value: 16, isUnsigned: true)
!1648 = !DIEnumerator(name: "CIF_MISMATCHED_ARGUMENTS", value: 17, isUnsigned: true)
!1649 = !DIEnumerator(name: "CIF_ORIGINALLY_INDIRECT_CALL", value: 18, isUnsigned: true)
!1650 = !DIEnumerator(name: "CIF_N_REASONS", value: 19, isUnsigned: true)
!1651 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "opt_pass_type", file: !1652, line: 104, baseType: !7, size: 32, elements: !1653)
!1652 = !DIFile(filename: "./tree-pass.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1653 = !{!1654, !1655, !1656, !1657}
!1654 = !DIEnumerator(name: "GIMPLE_PASS", value: 0, isUnsigned: true)
!1655 = !DIEnumerator(name: "RTL_PASS", value: 1, isUnsigned: true)
!1656 = !DIEnumerator(name: "SIMPLE_IPA_PASS", value: 2, isUnsigned: true)
!1657 = !DIEnumerator(name: "IPA_PASS", value: 3, isUnsigned: true)
!1658 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_statement_structure_enum", file: !385, line: 727, baseType: !7, size: 32, elements: !1659)
!1659 = !{!1660, !1661, !1662, !1663, !1664, !1665, !1666, !1667, !1668, !1669, !1670, !1671, !1672, !1673, !1674, !1675, !1676, !1677, !1678, !1679, !1680, !1681, !1682, !1683}
!1660 = !DIEnumerator(name: "GSS_BASE", value: 0, isUnsigned: true)
!1661 = !DIEnumerator(name: "GSS_WITH_OPS", value: 1, isUnsigned: true)
!1662 = !DIEnumerator(name: "GSS_WITH_MEM_OPS_BASE", value: 2, isUnsigned: true)
!1663 = !DIEnumerator(name: "GSS_WITH_MEM_OPS", value: 3, isUnsigned: true)
!1664 = !DIEnumerator(name: "GSS_ASM", value: 4, isUnsigned: true)
!1665 = !DIEnumerator(name: "GSS_BIND", value: 5, isUnsigned: true)
!1666 = !DIEnumerator(name: "GSS_PHI", value: 6, isUnsigned: true)
!1667 = !DIEnumerator(name: "GSS_TRY", value: 7, isUnsigned: true)
!1668 = !DIEnumerator(name: "GSS_CATCH", value: 8, isUnsigned: true)
!1669 = !DIEnumerator(name: "GSS_EH_FILTER", value: 9, isUnsigned: true)
!1670 = !DIEnumerator(name: "GSS_EH_MNT", value: 10, isUnsigned: true)
!1671 = !DIEnumerator(name: "GSS_EH_CTRL", value: 11, isUnsigned: true)
!1672 = !DIEnumerator(name: "GSS_WCE", value: 12, isUnsigned: true)
!1673 = !DIEnumerator(name: "GSS_OMP", value: 13, isUnsigned: true)
!1674 = !DIEnumerator(name: "GSS_OMP_CRITICAL", value: 14, isUnsigned: true)
!1675 = !DIEnumerator(name: "GSS_OMP_FOR", value: 15, isUnsigned: true)
!1676 = !DIEnumerator(name: "GSS_OMP_PARALLEL", value: 16, isUnsigned: true)
!1677 = !DIEnumerator(name: "GSS_OMP_TASK", value: 17, isUnsigned: true)
!1678 = !DIEnumerator(name: "GSS_OMP_SECTIONS", value: 18, isUnsigned: true)
!1679 = !DIEnumerator(name: "GSS_OMP_SINGLE", value: 19, isUnsigned: true)
!1680 = !DIEnumerator(name: "GSS_OMP_CONTINUE", value: 20, isUnsigned: true)
!1681 = !DIEnumerator(name: "GSS_OMP_ATOMIC_LOAD", value: 21, isUnsigned: true)
!1682 = !DIEnumerator(name: "GSS_OMP_ATOMIC_STORE", value: 22, isUnsigned: true)
!1683 = !DIEnumerator(name: "LAST_GSS_ENUM", value: 23, isUnsigned: true)
!1684 = !{!134, !1685, !1686, !1953, !1739, !1814, !1330, !1687, !3114, !3116, !1329, !1336, !1368, !3119, !1888, !3120, !3126, !7, !3128, !3131, !2892, !3136, !3141, !2160, !2568, !1372, !1862, !3146, !2049, !2015, !3194, !1554}
!1685 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!1686 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !1619, line: 56, baseType: !1687)
!1687 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1688, size: 64)
!1688 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !135, line: 3371, size: 1792, elements: !1689)
!1689 = !{!1690, !1723, !1729, !1742, !1761, !1772, !1777, !1787, !1793, !1807, !1819, !1857, !2352, !2380, !2397, !2398, !2403, !2412, !2418, !2423, !2427, !2431, !2765, !2812, !2818, !2824, !2831, !2844, !2858, !2875, !2887, !2909, !2924, !3096}
!1690 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1688, file: !135, line: 3372, baseType: !1691, size: 64)
!1691 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !135, line: 360, size: 64, elements: !1692)
!1692 = !{!1693, !1694, !1695, !1696, !1697, !1698, !1699, !1700, !1701, !1702, !1703, !1704, !1705, !1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722}
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1691, file: !135, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1694 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !1691, file: !135, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1695 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !1691, file: !135, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !1691, file: !135, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1697 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !1691, file: !135, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !1691, file: !135, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1699 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !1691, file: !135, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1700 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !1691, file: !135, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !1691, file: !135, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!1702 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !1691, file: !135, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !1691, file: !135, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1704 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !1691, file: !135, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1705 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !1691, file: !135, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !1691, file: !135, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !1691, file: !135, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !1691, file: !135, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !1691, file: !135, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !1691, file: !135, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1691, file: !135, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1691, file: !135, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1691, file: !135, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1691, file: !135, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1691, file: !135, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1691, file: !135, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1691, file: !135, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1691, file: !135, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !1691, file: !135, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !1691, file: !135, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !1691, file: !135, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !1691, file: !135, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1688, file: !135, line: 3373, baseType: !1724, size: 192)
!1724 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !135, line: 402, size: 192, elements: !1725)
!1725 = !{!1726, !1727, !1728}
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1724, file: !135, line: 403, baseType: !1691, size: 64)
!1727 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !1724, file: !135, line: 404, baseType: !1686, size: 64, offset: 64)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1724, file: !135, line: 405, baseType: !1686, size: 64, offset: 128)
!1729 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1688, file: !135, line: 3374, baseType: !1730, size: 320)
!1730 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !135, line: 1384, size: 320, elements: !1731)
!1731 = !{!1732, !1733}
!1732 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1730, file: !135, line: 1385, baseType: !1724, size: 192)
!1733 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1730, file: !135, line: 1386, baseType: !1734, size: 128, offset: 192)
!1734 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !1735, line: 58, baseType: !1736)
!1735 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1736 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1735, line: 54, size: 128, elements: !1737)
!1737 = !{!1738, !1740}
!1738 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1736, file: !1735, line: 56, baseType: !1739, size: 64)
!1739 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1736, file: !1735, line: 57, baseType: !1741, size: 64, offset: 64)
!1741 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !1688, file: !135, line: 3375, baseType: !1743, size: 256)
!1743 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !135, line: 1397, size: 256, elements: !1744)
!1744 = !{!1745, !1746}
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1743, file: !135, line: 1398, baseType: !1724, size: 192)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !1743, file: !135, line: 1399, baseType: !1747, size: 64, offset: 192)
!1747 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1748, size: 64)
!1748 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !1749, line: 52, size: 256, elements: !1750)
!1749 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1750 = !{!1751, !1752, !1753, !1754, !1755, !1756, !1757}
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !1748, file: !1749, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !1748, file: !1749, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1753 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !1748, file: !1749, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1754 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !1748, file: !1749, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1748, file: !1749, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1756 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !1748, file: !1749, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1757 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !1748, file: !1749, line: 62, baseType: !1758, size: 192, offset: 64)
!1758 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1739, size: 192, elements: !1759)
!1759 = !{!1760}
!1760 = !DISubrange(count: 3)
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !1688, file: !135, line: 3376, baseType: !1762, size: 256)
!1762 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !135, line: 1408, size: 256, elements: !1763)
!1763 = !{!1764, !1765}
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1762, file: !135, line: 1409, baseType: !1724, size: 192)
!1765 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !1762, file: !135, line: 1410, baseType: !1766, size: 64, offset: 192)
!1766 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1767, size: 64)
!1767 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !1768, line: 27, size: 192, elements: !1769)
!1768 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1769 = !{!1770, !1771}
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1767, file: !1768, line: 29, baseType: !1734, size: 128)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1767, file: !1768, line: 30, baseType: !5, size: 32, offset: 128)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !1688, file: !135, line: 3377, baseType: !1773, size: 256)
!1773 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !135, line: 1437, size: 256, elements: !1774)
!1774 = !{!1775, !1776}
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1773, file: !135, line: 1438, baseType: !1724, size: 192)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1773, file: !135, line: 1439, baseType: !1686, size: 64, offset: 192)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1688, file: !135, line: 3378, baseType: !1778, size: 256)
!1778 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !135, line: 1418, size: 256, elements: !1779)
!1779 = !{!1780, !1781, !1782}
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1778, file: !135, line: 1419, baseType: !1724, size: 192)
!1781 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1778, file: !135, line: 1420, baseType: !1330, size: 32, offset: 192)
!1782 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1778, file: !135, line: 1421, baseType: !1783, size: 8, offset: 224)
!1783 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1784, size: 8, elements: !1785)
!1784 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!1785 = !{!1786}
!1786 = !DISubrange(count: 1)
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !1688, file: !135, line: 3379, baseType: !1788, size: 320)
!1788 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !135, line: 1428, size: 320, elements: !1789)
!1789 = !{!1790, !1791, !1792}
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1788, file: !135, line: 1429, baseType: !1724, size: 192)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !1788, file: !135, line: 1430, baseType: !1686, size: 64, offset: 192)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !1788, file: !135, line: 1431, baseType: !1686, size: 64, offset: 256)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !1688, file: !135, line: 3380, baseType: !1794, size: 320)
!1794 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !135, line: 1460, size: 320, elements: !1795)
!1795 = !{!1796, !1797}
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1794, file: !135, line: 1461, baseType: !1724, size: 192)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1794, file: !135, line: 1462, baseType: !1798, size: 128, offset: 192)
!1798 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !1799, line: 31, size: 128, elements: !1800)
!1799 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1800 = !{!1801, !1805, !1806}
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1798, file: !1799, line: 32, baseType: !1802, size: 64)
!1802 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1803, size: 64)
!1803 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1804)
!1804 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !1798, file: !1799, line: 33, baseType: !7, size: 32, offset: 64)
!1806 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !1798, file: !1799, line: 34, baseType: !7, size: 32, offset: 96)
!1807 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !1688, file: !135, line: 3381, baseType: !1808, size: 384)
!1808 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !135, line: 2507, size: 384, elements: !1809)
!1809 = !{!1810, !1811, !1816, !1817, !1818}
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1808, file: !135, line: 2508, baseType: !1724, size: 192)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1808, file: !135, line: 2509, baseType: !1812, size: 32, offset: 192)
!1812 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !1813, line: 58, baseType: !1814)
!1813 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1814 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !1815, line: 44, baseType: !7)
!1815 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1808, file: !135, line: 2510, baseType: !7, size: 32, offset: 224)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1808, file: !135, line: 2511, baseType: !1686, size: 64, offset: 256)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1808, file: !135, line: 2512, baseType: !1686, size: 64, offset: 320)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !1688, file: !135, line: 3382, baseType: !1820, size: 896)
!1820 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !135, line: 2652, size: 896, elements: !1821)
!1821 = !{!1822, !1823, !1824, !1825, !1826, !1827, !1828, !1829, !1830, !1831, !1832, !1833, !1834, !1835, !1836, !1837, !1838, !1839, !1840, !1841, !1842, !1843, !1844, !1845, !1846, !1847, !1848, !1849, !1850, !1851, !1852, !1853, !1854}
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1820, file: !135, line: 2653, baseType: !1808, size: 384)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1820, file: !135, line: 2654, baseType: !1686, size: 64, offset: 384)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1820, file: !135, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!1825 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !1820, file: !135, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!1826 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !1820, file: !135, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!1827 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !1820, file: !135, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!1828 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1820, file: !135, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!1829 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !1820, file: !135, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!1830 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !1820, file: !135, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !1820, file: !135, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!1832 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1820, file: !135, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!1833 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1820, file: !135, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1820, file: !135, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!1835 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1820, file: !135, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!1836 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1820, file: !135, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!1837 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1820, file: !135, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!1838 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1820, file: !135, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!1839 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !1820, file: !135, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!1840 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !1820, file: !135, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !1820, file: !135, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !1820, file: !135, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !1820, file: !135, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!1844 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !1820, file: !135, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!1845 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !1820, file: !135, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!1846 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !1820, file: !135, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !1820, file: !135, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!1848 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !1820, file: !135, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!1849 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1820, file: !135, line: 2703, baseType: !7, size: 32, offset: 512)
!1850 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1820, file: !135, line: 2705, baseType: !1686, size: 64, offset: 576)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1820, file: !135, line: 2706, baseType: !1686, size: 64, offset: 640)
!1852 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1820, file: !135, line: 2707, baseType: !1686, size: 64, offset: 704)
!1853 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1820, file: !135, line: 2708, baseType: !1686, size: 64, offset: 768)
!1854 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1820, file: !135, line: 2711, baseType: !1855, size: 64, offset: 832)
!1855 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1856, size: 64)
!1856 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !135, line: 2711, flags: DIFlagFwdDecl)
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !1688, file: !135, line: 3383, baseType: !1858, size: 960)
!1858 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !135, line: 2756, size: 960, elements: !1859)
!1859 = !{!1860, !1861}
!1860 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1858, file: !135, line: 2757, baseType: !1820, size: 896)
!1861 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1858, file: !135, line: 2758, baseType: !1862, size: 64, offset: 896)
!1862 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !1619, line: 50, baseType: !1863)
!1863 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1864, size: 64)
!1864 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !1865, line: 240, size: 384, elements: !1866)
!1865 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1866 = !{!1867, !1868, !1869, !1870, !1871, !1872, !1873, !1874, !1875, !1876, !1877}
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1864, file: !1865, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1864, file: !1865, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !1864, file: !1865, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !1864, file: !1865, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !1864, file: !1865, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !1864, file: !1865, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !1864, file: !1865, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1864, file: !1865, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !1864, file: !1865, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !1864, file: !1865, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !1864, file: !1865, line: 321, baseType: !1878, size: 320, offset: 64)
!1878 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !1865, line: 315, size: 320, elements: !1879)
!1879 = !{!1880, !2285, !2287, !2350, !2351}
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1878, file: !1865, line: 316, baseType: !1881, size: 64)
!1881 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1882, size: 64, elements: !1785)
!1882 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !1865, line: 183, baseType: !1883)
!1883 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !1865, line: 166, size: 64, elements: !1884)
!1884 = !{!1885, !1886, !1887, !1890, !1891, !1899, !1900, !1912, !1915, !1976, !1977, !2262, !2275, !2282}
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !1883, file: !1865, line: 168, baseType: !1330, size: 32)
!1886 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !1883, file: !1865, line: 169, baseType: !7, size: 32)
!1887 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !1883, file: !1865, line: 170, baseType: !1888, size: 64)
!1888 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1889, size: 64)
!1889 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1784)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !1883, file: !1865, line: 171, baseType: !1862, size: 64)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !1883, file: !1865, line: 172, baseType: !1892, size: 64)
!1892 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !1619, line: 53, baseType: !1893)
!1893 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1894, size: 64)
!1894 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !1865, line: 359, size: 128, elements: !1895)
!1895 = !{!1896, !1897}
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !1894, file: !1865, line: 360, baseType: !1330, size: 32)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !1894, file: !1865, line: 361, baseType: !1898, size: 64, offset: 64)
!1898 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1862, size: 64, elements: !1785)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !1883, file: !1865, line: 173, baseType: !5, size: 32)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !1883, file: !1865, line: 174, baseType: !1901, size: 32)
!1901 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !1865, line: 133, baseType: !1902)
!1902 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1865, line: 115, size: 32, elements: !1903)
!1903 = !{!1904, !1905, !1906, !1907, !1908, !1909, !1910, !1911}
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !1902, file: !1865, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !1902, file: !1865, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !1902, file: !1865, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !1902, file: !1865, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !1902, file: !1865, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1909 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !1902, file: !1865, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !1902, file: !1865, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1911 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !1902, file: !1865, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1912 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !1883, file: !1865, line: 175, baseType: !1913, size: 64)
!1913 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1914, size: 64)
!1914 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !1865, line: 175, flags: DIFlagFwdDecl)
!1915 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !1883, file: !1865, line: 176, baseType: !1916, size: 64)
!1916 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1917, size: 64)
!1917 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !1918, line: 75, size: 256, elements: !1919)
!1918 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1919 = !{!1920, !1934, !1935, !1936}
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1917, file: !1918, line: 76, baseType: !1921, size: 64)
!1921 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1922, size: 64)
!1922 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !1918, line: 68, baseType: !1923)
!1923 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !1918, line: 63, size: 320, elements: !1924)
!1924 = !{!1925, !1927, !1928, !1929}
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1923, file: !1918, line: 64, baseType: !1926, size: 64)
!1926 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1923, size: 64)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1923, file: !1918, line: 65, baseType: !1926, size: 64, offset: 64)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1923, file: !1918, line: 66, baseType: !7, size: 32, offset: 128)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !1923, file: !1918, line: 67, baseType: !1930, size: 128, offset: 192)
!1930 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1931, size: 128, elements: !1932)
!1931 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !1918, line: 29, baseType: !1739)
!1932 = !{!1933}
!1933 = !DISubrange(count: 2)
!1934 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !1917, file: !1918, line: 77, baseType: !1921, size: 64, offset: 64)
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1917, file: !1918, line: 78, baseType: !7, size: 32, offset: 128)
!1936 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1917, file: !1918, line: 79, baseType: !1937, size: 64, offset: 192)
!1937 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1938, size: 64)
!1938 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !1918, line: 49, baseType: !1939)
!1939 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !1918, line: 45, size: 832, elements: !1940)
!1940 = !{!1941, !1942, !1943}
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1939, file: !1918, line: 46, baseType: !1926, size: 64)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !1939, file: !1918, line: 47, baseType: !1916, size: 64, offset: 64)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1939, file: !1918, line: 48, baseType: !1944, size: 704, offset: 128)
!1944 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !1945, line: 164, size: 704, elements: !1946)
!1945 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1946 = !{!1947, !1948, !1959, !1960, !1961, !1962, !1963, !1964, !1968, !1972, !1973, !1974, !1975}
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !1944, file: !1945, line: 166, baseType: !1741, size: 64)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !1944, file: !1945, line: 167, baseType: !1949, size: 64, offset: 64)
!1949 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1950, size: 64)
!1950 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !1945, line: 157, size: 192, elements: !1951)
!1951 = !{!1952, !1954, !1955}
!1952 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1950, file: !1945, line: 159, baseType: !1953, size: 64)
!1953 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1784, size: 64)
!1954 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1950, file: !1945, line: 160, baseType: !1949, size: 64, offset: 64)
!1955 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !1950, file: !1945, line: 161, baseType: !1956, size: 32, offset: 128)
!1956 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1784, size: 32, elements: !1957)
!1957 = !{!1958}
!1958 = !DISubrange(count: 4)
!1959 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !1944, file: !1945, line: 168, baseType: !1953, size: 64, offset: 128)
!1960 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1944, file: !1945, line: 169, baseType: !1953, size: 64, offset: 192)
!1961 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !1944, file: !1945, line: 170, baseType: !1953, size: 64, offset: 256)
!1962 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !1944, file: !1945, line: 171, baseType: !1741, size: 64, offset: 320)
!1963 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !1944, file: !1945, line: 172, baseType: !1330, size: 32, offset: 384)
!1964 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !1944, file: !1945, line: 176, baseType: !1965, size: 64, offset: 448)
!1965 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1966, size: 64)
!1966 = !DISubroutineType(types: !1967)
!1967 = !{!1949, !1685, !1741}
!1968 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !1944, file: !1945, line: 177, baseType: !1969, size: 64, offset: 512)
!1969 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1970, size: 64)
!1970 = !DISubroutineType(types: !1971)
!1971 = !{null, !1685, !1949}
!1972 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !1944, file: !1945, line: 178, baseType: !1685, size: 64, offset: 576)
!1973 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !1944, file: !1945, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!1974 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !1944, file: !1945, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!1975 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !1944, file: !1945, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!1976 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !1883, file: !1865, line: 177, baseType: !1686, size: 64)
!1977 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !1883, file: !1865, line: 178, baseType: !1978, size: 64)
!1978 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1979, size: 64)
!1979 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !337, line: 217, size: 832, elements: !1980)
!1980 = !{!1981, !2227, !2228, !2229, !2232, !2236, !2237, !2238, !2256, !2257, !2258, !2259, !2260, !2261}
!1981 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !1979, file: !337, line: 219, baseType: !1982, size: 64)
!1982 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1983, size: 64)
!1983 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !337, line: 151, baseType: !1984)
!1984 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !337, line: 151, size: 128, elements: !1985)
!1985 = !{!1986}
!1986 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1984, file: !337, line: 151, baseType: !1987, size: 128)
!1987 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !337, line: 150, baseType: !1988)
!1988 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !337, line: 150, size: 128, elements: !1989)
!1989 = !{!1990, !1991, !1992}
!1990 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1988, file: !337, line: 150, baseType: !7, size: 32)
!1991 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1988, file: !337, line: 150, baseType: !7, size: 32, offset: 32)
!1992 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1988, file: !337, line: 150, baseType: !1993, size: 64, offset: 64)
!1993 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1994, size: 64, elements: !1785)
!1994 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !1619, line: 108, baseType: !1995)
!1995 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1996, size: 64)
!1996 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !337, line: 122, size: 512, elements: !1997)
!1997 = !{!1998, !1999, !2000, !2219, !2220, !2221, !2222, !2223, !2224, !2225}
!1998 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !1996, file: !337, line: 124, baseType: !1978, size: 64)
!1999 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !1996, file: !337, line: 125, baseType: !1978, size: 64, offset: 64)
!2000 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !1996, file: !337, line: 131, baseType: !2001, size: 64, offset: 128)
!2001 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !337, line: 128, size: 64, elements: !2002)
!2002 = !{!2003, !2218}
!2003 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !2001, file: !337, line: 129, baseType: !2004, size: 64)
!2004 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !1619, line: 66, baseType: !2005)
!2005 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2006, size: 64)
!2006 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !385, line: 143, size: 192, elements: !2007)
!2007 = !{!2008, !2216, !2217}
!2008 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !2006, file: !385, line: 145, baseType: !2009, size: 64)
!2009 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq_node", file: !1619, line: 69, baseType: !2010)
!2010 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2011, size: 64)
!2011 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_node_d", file: !385, line: 136, size: 192, elements: !2012)
!2012 = !{!2013, !2214, !2215}
!2013 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2011, file: !385, line: 137, baseType: !2014, size: 64)
!2014 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !1619, line: 58, baseType: !2015)
!2015 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2016, size: 64)
!2016 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !385, line: 737, size: 768, elements: !2017)
!2017 = !{!2018, !2035, !2069, !2075, !2080, !2085, !2092, !2098, !2104, !2109, !2123, !2128, !2134, !2139, !2149, !2154, !2172, !2179, !2186, !2192, !2197, !2203, !2209}
!2018 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2016, file: !385, line: 738, baseType: !2019, size: 256)
!2019 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_base", file: !385, line: 271, size: 256, elements: !2020)
!2020 = !{!2021, !2022, !2023, !2024, !2025, !2026, !2027, !2028, !2029, !2030, !2031, !2032, !2033, !2034}
!2021 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2019, file: !385, line: 274, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!2022 = !DIDerivedType(tag: DW_TAG_member, name: "no_warning", scope: !2019, file: !385, line: 277, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!2023 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !2019, file: !385, line: 281, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!2024 = !DIDerivedType(tag: DW_TAG_member, name: "nontemporal_move", scope: !2019, file: !385, line: 284, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!2025 = !DIDerivedType(tag: DW_TAG_member, name: "plf", scope: !2019, file: !385, line: 291, baseType: !7, size: 2, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!2026 = !DIDerivedType(tag: DW_TAG_member, name: "modified", scope: !2019, file: !385, line: 295, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!2027 = !DIDerivedType(tag: DW_TAG_member, name: "has_volatile_ops", scope: !2019, file: !385, line: 298, baseType: !7, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!2028 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !2019, file: !385, line: 301, baseType: !7, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!2029 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !2019, file: !385, line: 307, baseType: !7, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!2030 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2019, file: !385, line: 312, baseType: !7, size: 32, offset: 32)
!2031 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !2019, file: !385, line: 316, baseType: !1812, size: 32, offset: 64)
!2032 = !DIDerivedType(tag: DW_TAG_member, name: "num_ops", scope: !2019, file: !385, line: 319, baseType: !7, size: 32, offset: 96)
!2033 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !2019, file: !385, line: 323, baseType: !1978, size: 64, offset: 128)
!2034 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2019, file: !385, line: 327, baseType: !1686, size: 64, offset: 192)
!2035 = !DIDerivedType(tag: DW_TAG_member, name: "gsops", scope: !2016, file: !385, line: 739, baseType: !2036, size: 448)
!2036 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops", file: !385, line: 350, size: 448, elements: !2037)
!2037 = !{!2038, !2067}
!2038 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !2036, file: !385, line: 353, baseType: !2039, size: 384)
!2039 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops_base", file: !385, line: 333, size: 384, elements: !2040)
!2040 = !{!2041, !2042, !2050}
!2041 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2039, file: !385, line: 336, baseType: !2019, size: 256)
!2042 = !DIDerivedType(tag: DW_TAG_member, name: "def_ops", scope: !2039, file: !385, line: 343, baseType: !2043, size: 64, offset: 256)
!2043 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2044, size: 64)
!2044 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "def_optype_d", file: !2045, line: 37, size: 128, elements: !2046)
!2045 = !DIFile(filename: "./tree-ssa-operands.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2046 = !{!2047, !2048}
!2047 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2044, file: !2045, line: 39, baseType: !2043, size: 64)
!2048 = !DIDerivedType(tag: DW_TAG_member, name: "def_ptr", scope: !2044, file: !2045, line: 40, baseType: !2049, size: 64, offset: 64)
!2049 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1686, size: 64)
!2050 = !DIDerivedType(tag: DW_TAG_member, name: "use_ops", scope: !2039, file: !385, line: 344, baseType: !2051, size: 64, offset: 320)
!2051 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2052, size: 64)
!2052 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "use_optype_d", file: !2045, line: 45, size: 320, elements: !2053)
!2053 = !{!2054, !2055}
!2054 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2052, file: !2045, line: 47, baseType: !2051, size: 64)
!2055 = !DIDerivedType(tag: DW_TAG_member, name: "use_ptr", scope: !2052, file: !2045, line: 48, baseType: !2056, size: 256, offset: 64)
!2056 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !135, line: 1883, size: 256, elements: !2057)
!2057 = !{!2058, !2060, !2061, !2066}
!2058 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2056, file: !135, line: 1884, baseType: !2059, size: 64)
!2059 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2056, size: 64)
!2060 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2056, file: !135, line: 1885, baseType: !2059, size: 64, offset: 64)
!2061 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !2056, file: !135, line: 1891, baseType: !2062, size: 64, offset: 128)
!2062 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !2056, file: !135, line: 1891, size: 64, elements: !2063)
!2063 = !{!2064, !2065}
!2064 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2062, file: !135, line: 1891, baseType: !2014, size: 64)
!2065 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !2062, file: !135, line: 1891, baseType: !1686, size: 64)
!2066 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !2056, file: !135, line: 1892, baseType: !2049, size: 64, offset: 192)
!2067 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2036, file: !385, line: 359, baseType: !2068, size: 64, offset: 384)
!2068 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1686, size: 64, elements: !1785)
!2069 = !DIDerivedType(tag: DW_TAG_member, name: "gsmembase", scope: !2016, file: !385, line: 740, baseType: !2070, size: 512)
!2070 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops_base", file: !385, line: 365, size: 512, elements: !2071)
!2071 = !{!2072, !2073, !2074}
!2072 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !2070, file: !385, line: 368, baseType: !2039, size: 384)
!2073 = !DIDerivedType(tag: DW_TAG_member, name: "vdef", scope: !2070, file: !385, line: 373, baseType: !1686, size: 64, offset: 384)
!2074 = !DIDerivedType(tag: DW_TAG_member, name: "vuse", scope: !2070, file: !385, line: 374, baseType: !1686, size: 64, offset: 448)
!2075 = !DIDerivedType(tag: DW_TAG_member, name: "gsmem", scope: !2016, file: !385, line: 741, baseType: !2076, size: 576)
!2076 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops", file: !385, line: 380, size: 576, elements: !2077)
!2077 = !{!2078, !2079}
!2078 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !2076, file: !385, line: 383, baseType: !2070, size: 512)
!2079 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2076, file: !385, line: 389, baseType: !2068, size: 64, offset: 512)
!2080 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2016, file: !385, line: 742, baseType: !2081, size: 320)
!2081 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp", file: !385, line: 395, size: 320, elements: !2082)
!2082 = !{!2083, !2084}
!2083 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2081, file: !385, line: 397, baseType: !2019, size: 256)
!2084 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !2081, file: !385, line: 400, baseType: !2004, size: 64, offset: 256)
!2085 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_bind", scope: !2016, file: !385, line: 743, baseType: !2086, size: 448)
!2086 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_bind", file: !385, line: 406, size: 448, elements: !2087)
!2087 = !{!2088, !2089, !2090, !2091}
!2088 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2086, file: !385, line: 408, baseType: !2019, size: 256)
!2089 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2086, file: !385, line: 412, baseType: !1686, size: 64, offset: 256)
!2090 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2086, file: !385, line: 420, baseType: !1686, size: 64, offset: 320)
!2091 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !2086, file: !385, line: 423, baseType: !2004, size: 64, offset: 384)
!2092 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_catch", scope: !2016, file: !385, line: 744, baseType: !2093, size: 384)
!2093 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_catch", file: !385, line: 429, size: 384, elements: !2094)
!2094 = !{!2095, !2096, !2097}
!2095 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2093, file: !385, line: 431, baseType: !2019, size: 256)
!2096 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !2093, file: !385, line: 434, baseType: !1686, size: 64, offset: 256)
!2097 = !DIDerivedType(tag: DW_TAG_member, name: "handler", scope: !2093, file: !385, line: 437, baseType: !2004, size: 64, offset: 320)
!2098 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_filter", scope: !2016, file: !385, line: 745, baseType: !2099, size: 384)
!2099 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_filter", file: !385, line: 443, size: 384, elements: !2100)
!2100 = !{!2101, !2102, !2103}
!2101 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2099, file: !385, line: 445, baseType: !2019, size: 256)
!2102 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !2099, file: !385, line: 449, baseType: !1686, size: 64, offset: 256)
!2103 = !DIDerivedType(tag: DW_TAG_member, name: "failure", scope: !2099, file: !385, line: 453, baseType: !2004, size: 64, offset: 320)
!2104 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_mnt", scope: !2016, file: !385, line: 746, baseType: !2105, size: 320)
!2105 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_mnt", file: !385, line: 459, size: 320, elements: !2106)
!2106 = !{!2107, !2108}
!2107 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2105, file: !385, line: 461, baseType: !2019, size: 256)
!2108 = !DIDerivedType(tag: DW_TAG_member, name: "fndecl", scope: !2105, file: !385, line: 464, baseType: !1686, size: 64, offset: 256)
!2109 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_phi", scope: !2016, file: !385, line: 747, baseType: !2110, size: 768)
!2110 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_phi", file: !385, line: 469, size: 768, elements: !2111)
!2111 = !{!2112, !2113, !2114, !2115, !2116}
!2112 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2110, file: !385, line: 471, baseType: !2019, size: 256)
!2113 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !2110, file: !385, line: 474, baseType: !7, size: 32, offset: 256)
!2114 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !2110, file: !385, line: 475, baseType: !7, size: 32, offset: 288)
!2115 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !2110, file: !385, line: 478, baseType: !1686, size: 64, offset: 320)
!2116 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !2110, file: !385, line: 481, baseType: !2117, size: 384, offset: 384)
!2117 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2118, size: 384, elements: !1785)
!2118 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "phi_arg_d", file: !135, line: 1917, size: 384, elements: !2119)
!2119 = !{!2120, !2121, !2122}
!2120 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !2118, file: !135, line: 1920, baseType: !2056, size: 256)
!2121 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !2118, file: !135, line: 1921, baseType: !1686, size: 64, offset: 256)
!2122 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2118, file: !135, line: 1922, baseType: !1812, size: 32, offset: 320)
!2123 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_ctrl", scope: !2016, file: !385, line: 748, baseType: !2124, size: 320)
!2124 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_ctrl", file: !385, line: 487, size: 320, elements: !2125)
!2125 = !{!2126, !2127}
!2126 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2124, file: !385, line: 490, baseType: !2019, size: 256)
!2127 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !2124, file: !385, line: 494, baseType: !1330, size: 32, offset: 256)
!2128 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_try", scope: !2016, file: !385, line: 749, baseType: !2129, size: 384)
!2129 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_try", file: !385, line: 500, size: 384, elements: !2130)
!2130 = !{!2131, !2132, !2133}
!2131 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2129, file: !385, line: 502, baseType: !2019, size: 256)
!2132 = !DIDerivedType(tag: DW_TAG_member, name: "eval", scope: !2129, file: !385, line: 506, baseType: !2004, size: 64, offset: 256)
!2133 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !2129, file: !385, line: 510, baseType: !2004, size: 64, offset: 320)
!2134 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_wce", scope: !2016, file: !385, line: 750, baseType: !2135, size: 320)
!2135 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_wce", file: !385, line: 529, size: 320, elements: !2136)
!2136 = !{!2137, !2138}
!2137 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2135, file: !385, line: 531, baseType: !2019, size: 256)
!2138 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !2135, file: !385, line: 540, baseType: !2004, size: 64, offset: 256)
!2139 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_asm", scope: !2016, file: !385, line: 751, baseType: !2140, size: 704)
!2140 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_asm", file: !385, line: 546, size: 704, elements: !2141)
!2141 = !{!2142, !2143, !2144, !2145, !2146, !2147, !2148}
!2142 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !2140, file: !385, line: 549, baseType: !2070, size: 512)
!2143 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !2140, file: !385, line: 553, baseType: !1888, size: 64, offset: 512)
!2144 = !DIDerivedType(tag: DW_TAG_member, name: "ni", scope: !2140, file: !385, line: 557, baseType: !1804, size: 8, offset: 576)
!2145 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !2140, file: !385, line: 558, baseType: !1804, size: 8, offset: 584)
!2146 = !DIDerivedType(tag: DW_TAG_member, name: "nc", scope: !2140, file: !385, line: 559, baseType: !1804, size: 8, offset: 592)
!2147 = !DIDerivedType(tag: DW_TAG_member, name: "nl", scope: !2140, file: !385, line: 560, baseType: !1804, size: 8, offset: 600)
!2148 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2140, file: !385, line: 566, baseType: !2068, size: 64, offset: 640)
!2149 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_critical", scope: !2016, file: !385, line: 752, baseType: !2150, size: 384)
!2150 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_critical", file: !385, line: 571, size: 384, elements: !2151)
!2151 = !{!2152, !2153}
!2152 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2150, file: !385, line: 573, baseType: !2081, size: 320)
!2153 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2150, file: !385, line: 577, baseType: !1686, size: 64, offset: 320)
!2154 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_for", scope: !2016, file: !385, line: 753, baseType: !2155, size: 576)
!2155 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_for", file: !385, line: 600, size: 576, elements: !2156)
!2156 = !{!2157, !2158, !2159, !2162, !2171}
!2157 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2155, file: !385, line: 602, baseType: !2081, size: 320)
!2158 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2155, file: !385, line: 605, baseType: !1686, size: 64, offset: 320)
!2159 = !DIDerivedType(tag: DW_TAG_member, name: "collapse", scope: !2155, file: !385, line: 609, baseType: !2160, size: 64, offset: 384)
!2160 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !2161, line: 46, baseType: !1739)
!2161 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!2162 = !DIDerivedType(tag: DW_TAG_member, name: "iter", scope: !2155, file: !385, line: 612, baseType: !2163, size: 64, offset: 448)
!2163 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2164, size: 64)
!2164 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_omp_for_iter", file: !385, line: 581, size: 320, elements: !2165)
!2165 = !{!2166, !2167, !2168, !2169, !2170}
!2166 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !2164, file: !385, line: 583, baseType: !134, size: 32)
!2167 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2164, file: !385, line: 586, baseType: !1686, size: 64, offset: 64)
!2168 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !2164, file: !385, line: 589, baseType: !1686, size: 64, offset: 128)
!2169 = !DIDerivedType(tag: DW_TAG_member, name: "final", scope: !2164, file: !385, line: 592, baseType: !1686, size: 64, offset: 192)
!2170 = !DIDerivedType(tag: DW_TAG_member, name: "incr", scope: !2164, file: !385, line: 595, baseType: !1686, size: 64, offset: 256)
!2171 = !DIDerivedType(tag: DW_TAG_member, name: "pre_body", scope: !2155, file: !385, line: 616, baseType: !2004, size: 64, offset: 512)
!2172 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_parallel", scope: !2016, file: !385, line: 754, baseType: !2173, size: 512)
!2173 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_parallel", file: !385, line: 622, size: 512, elements: !2174)
!2174 = !{!2175, !2176, !2177, !2178}
!2175 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2173, file: !385, line: 624, baseType: !2081, size: 320)
!2176 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2173, file: !385, line: 628, baseType: !1686, size: 64, offset: 320)
!2177 = !DIDerivedType(tag: DW_TAG_member, name: "child_fn", scope: !2173, file: !385, line: 632, baseType: !1686, size: 64, offset: 384)
!2178 = !DIDerivedType(tag: DW_TAG_member, name: "data_arg", scope: !2173, file: !385, line: 636, baseType: !1686, size: 64, offset: 448)
!2179 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_task", scope: !2016, file: !385, line: 755, baseType: !2180, size: 704)
!2180 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_task", file: !385, line: 642, size: 704, elements: !2181)
!2181 = !{!2182, !2183, !2184, !2185}
!2182 = !DIDerivedType(tag: DW_TAG_member, name: "par", scope: !2180, file: !385, line: 644, baseType: !2173, size: 512)
!2183 = !DIDerivedType(tag: DW_TAG_member, name: "copy_fn", scope: !2180, file: !385, line: 648, baseType: !1686, size: 64, offset: 512)
!2184 = !DIDerivedType(tag: DW_TAG_member, name: "arg_size", scope: !2180, file: !385, line: 652, baseType: !1686, size: 64, offset: 576)
!2185 = !DIDerivedType(tag: DW_TAG_member, name: "arg_align", scope: !2180, file: !385, line: 653, baseType: !1686, size: 64, offset: 640)
!2186 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_sections", scope: !2016, file: !385, line: 756, baseType: !2187, size: 448)
!2187 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_sections", file: !385, line: 663, size: 448, elements: !2188)
!2188 = !{!2189, !2190, !2191}
!2189 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2187, file: !385, line: 665, baseType: !2081, size: 320)
!2190 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2187, file: !385, line: 668, baseType: !1686, size: 64, offset: 320)
!2191 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !2187, file: !385, line: 673, baseType: !1686, size: 64, offset: 384)
!2192 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_single", scope: !2016, file: !385, line: 757, baseType: !2193, size: 384)
!2193 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_single", file: !385, line: 694, size: 384, elements: !2194)
!2194 = !{!2195, !2196}
!2195 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2193, file: !385, line: 696, baseType: !2081, size: 320)
!2196 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2193, file: !385, line: 699, baseType: !1686, size: 64, offset: 320)
!2197 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_continue", scope: !2016, file: !385, line: 758, baseType: !2198, size: 384)
!2198 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_continue", file: !385, line: 681, size: 384, elements: !2199)
!2199 = !{!2200, !2201, !2202}
!2200 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2198, file: !385, line: 683, baseType: !2019, size: 256)
!2201 = !DIDerivedType(tag: DW_TAG_member, name: "control_def", scope: !2198, file: !385, line: 686, baseType: !1686, size: 64, offset: 256)
!2202 = !DIDerivedType(tag: DW_TAG_member, name: "control_use", scope: !2198, file: !385, line: 689, baseType: !1686, size: 64, offset: 320)
!2203 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_load", scope: !2016, file: !385, line: 759, baseType: !2204, size: 384)
!2204 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_load", file: !385, line: 707, size: 384, elements: !2205)
!2205 = !{!2206, !2207, !2208}
!2206 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2204, file: !385, line: 709, baseType: !2019, size: 256)
!2207 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !2204, file: !385, line: 712, baseType: !1686, size: 64, offset: 256)
!2208 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !2204, file: !385, line: 712, baseType: !1686, size: 64, offset: 320)
!2209 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_store", scope: !2016, file: !385, line: 760, baseType: !2210, size: 320)
!2210 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_store", file: !385, line: 718, size: 320, elements: !2211)
!2211 = !{!2212, !2213}
!2212 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2210, file: !385, line: 720, baseType: !2019, size: 256)
!2213 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2210, file: !385, line: 723, baseType: !1686, size: 64, offset: 256)
!2214 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2011, file: !385, line: 138, baseType: !2010, size: 64, offset: 64)
!2215 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2011, file: !385, line: 139, baseType: !2010, size: 64, offset: 128)
!2216 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !2006, file: !385, line: 146, baseType: !2009, size: 64, offset: 64)
!2217 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !2006, file: !385, line: 152, baseType: !2004, size: 64, offset: 128)
!2218 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !2001, file: !337, line: 130, baseType: !1862, size: 64)
!2219 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1996, file: !337, line: 134, baseType: !1685, size: 64, offset: 192)
!2220 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !1996, file: !337, line: 137, baseType: !1686, size: 64, offset: 256)
!2221 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !1996, file: !337, line: 138, baseType: !1812, size: 32, offset: 320)
!2222 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !1996, file: !337, line: 142, baseType: !7, size: 32, offset: 352)
!2223 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1996, file: !337, line: 144, baseType: !1330, size: 32, offset: 384)
!2224 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !1996, file: !337, line: 145, baseType: !1330, size: 32, offset: 416)
!2225 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1996, file: !337, line: 146, baseType: !2226, size: 64, offset: 448)
!2226 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !337, line: 119, baseType: !1741)
!2227 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !1979, file: !337, line: 220, baseType: !1982, size: 64, offset: 64)
!2228 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1979, file: !337, line: 223, baseType: !1685, size: 64, offset: 128)
!2229 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !1979, file: !337, line: 226, baseType: !2230, size: 64, offset: 192)
!2230 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2231, size: 64)
!2231 = !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !337, line: 185, flags: DIFlagFwdDecl)
!2232 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !1979, file: !337, line: 229, baseType: !2233, size: 128, offset: 256)
!2233 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2234, size: 128, elements: !1932)
!2234 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2235, size: 64)
!2235 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !337, line: 229, flags: DIFlagFwdDecl)
!2236 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !1979, file: !337, line: 232, baseType: !1978, size: 64, offset: 384)
!2237 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !1979, file: !337, line: 233, baseType: !1978, size: 64, offset: 448)
!2238 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !1979, file: !337, line: 238, baseType: !2239, size: 64, offset: 512)
!2239 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !337, line: 235, size: 64, elements: !2240)
!2240 = !{!2241, !2247}
!2241 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !2239, file: !337, line: 236, baseType: !2242, size: 64)
!2242 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2243, size: 64)
!2243 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !337, line: 273, size: 128, elements: !2244)
!2244 = !{!2245, !2246}
!2245 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !2243, file: !337, line: 275, baseType: !2004, size: 64)
!2246 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !2243, file: !337, line: 278, baseType: !2004, size: 64, offset: 64)
!2247 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !2239, file: !337, line: 237, baseType: !2248, size: 64)
!2248 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2249, size: 64)
!2249 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !337, line: 259, size: 320, elements: !2250)
!2250 = !{!2251, !2252, !2253, !2254, !2255}
!2251 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !2249, file: !337, line: 261, baseType: !1862, size: 64)
!2252 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !2249, file: !337, line: 262, baseType: !1862, size: 64, offset: 64)
!2253 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !2249, file: !337, line: 266, baseType: !1862, size: 64, offset: 128)
!2254 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !2249, file: !337, line: 267, baseType: !1862, size: 64, offset: 192)
!2255 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !2249, file: !337, line: 270, baseType: !1330, size: 32, offset: 256)
!2256 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1979, file: !337, line: 241, baseType: !2226, size: 64, offset: 576)
!2257 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1979, file: !337, line: 244, baseType: !1330, size: 32, offset: 640)
!2258 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !1979, file: !337, line: 247, baseType: !1330, size: 32, offset: 672)
!2259 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !1979, file: !337, line: 250, baseType: !1330, size: 32, offset: 704)
!2260 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !1979, file: !337, line: 253, baseType: !1330, size: 32, offset: 736)
!2261 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1979, file: !337, line: 256, baseType: !1330, size: 32, offset: 768)
!2262 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !1883, file: !1865, line: 179, baseType: !2263, size: 64)
!2263 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2264, size: 64)
!2264 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !1865, line: 150, baseType: !2265)
!2265 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !1865, line: 142, size: 320, elements: !2266)
!2266 = !{!2267, !2268, !2269, !2270, !2273, !2274}
!2267 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !2265, file: !1865, line: 144, baseType: !1686, size: 64)
!2268 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2265, file: !1865, line: 145, baseType: !1862, size: 64, offset: 64)
!2269 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2265, file: !1865, line: 146, baseType: !1862, size: 64, offset: 128)
!2270 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !2265, file: !1865, line: 147, baseType: !2271, size: 32, offset: 192)
!2271 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !2272, line: 31, baseType: !1330)
!2272 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2273 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2265, file: !1865, line: 148, baseType: !7, size: 32, offset: 224)
!2274 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !2265, file: !1865, line: 149, baseType: !1804, size: 8, offset: 256)
!2275 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !1883, file: !1865, line: 180, baseType: !2276, size: 64)
!2276 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2277, size: 64)
!2277 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !1865, line: 162, baseType: !2278)
!2278 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !1865, line: 159, size: 128, elements: !2279)
!2279 = !{!2280, !2281}
!2280 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2278, file: !1865, line: 160, baseType: !1686, size: 64)
!2281 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2278, file: !1865, line: 161, baseType: !1741, size: 64, offset: 64)
!2282 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !1883, file: !1865, line: 181, baseType: !2283, size: 64)
!2283 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2284, size: 64)
!2284 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !1865, line: 181, flags: DIFlagFwdDecl)
!2285 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !1878, file: !1865, line: 317, baseType: !2286, size: 64)
!2286 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1741, size: 64, elements: !1785)
!2287 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !1878, file: !1865, line: 318, baseType: !2288, size: 320)
!2288 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !1865, line: 188, size: 320, elements: !2289)
!2289 = !{!2290, !2292, !2349}
!2290 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !2288, file: !1865, line: 190, baseType: !2291, size: 192)
!2291 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1882, size: 192, elements: !1759)
!2292 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2288, file: !1865, line: 193, baseType: !2293, size: 64, offset: 192)
!2293 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2294, size: 64)
!2294 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !1865, line: 206, size: 320, elements: !2295)
!2295 = !{!2296, !2334, !2335, !2336, !2348}
!2296 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !2294, file: !1865, line: 208, baseType: !2297, size: 64)
!2297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2298, size: 64)
!2298 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !1619, line: 62, baseType: !2299)
!2299 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !2300, line: 538, size: 256, elements: !2301)
!2300 = !DIFile(filename: "./output.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2301 = !{!2302, !2306, !2312, !2325}
!2302 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2299, file: !2300, line: 539, baseType: !2303, size: 32)
!2303 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "section_common", file: !2300, line: 482, size: 32, elements: !2304)
!2304 = !{!2305}
!2305 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2303, file: !2300, line: 484, baseType: !7, size: 32)
!2306 = !DIDerivedType(tag: DW_TAG_member, name: "named", scope: !2299, file: !2300, line: 540, baseType: !2307, size: 192)
!2307 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "named_section", file: !2300, line: 488, size: 192, elements: !2308)
!2308 = !{!2309, !2310, !2311}
!2309 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2307, file: !2300, line: 489, baseType: !2303, size: 32)
!2310 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2307, file: !2300, line: 492, baseType: !1888, size: 64, offset: 64)
!2311 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2307, file: !2300, line: 496, baseType: !1686, size: 64, offset: 128)
!2312 = !DIDerivedType(tag: DW_TAG_member, name: "unnamed", scope: !2299, file: !2300, line: 541, baseType: !2313, size: 256)
!2313 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "unnamed_section", file: !2300, line: 504, size: 256, elements: !2314)
!2314 = !{!2315, !2316, !2323, !2324}
!2315 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2313, file: !2300, line: 505, baseType: !2303, size: 32)
!2316 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !2313, file: !2300, line: 509, baseType: !2317, size: 64, offset: 64)
!2317 = !DIDerivedType(tag: DW_TAG_typedef, name: "unnamed_section_callback", file: !2300, line: 501, baseType: !2318)
!2318 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2319, size: 64)
!2319 = !DISubroutineType(types: !2320)
!2320 = !{null, !2321}
!2321 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2322, size: 64)
!2322 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!2323 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !2313, file: !2300, line: 510, baseType: !2321, size: 64, offset: 128)
!2324 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2313, file: !2300, line: 513, baseType: !2297, size: 64, offset: 192)
!2325 = !DIDerivedType(tag: DW_TAG_member, name: "noswitch", scope: !2299, file: !2300, line: 542, baseType: !2326, size: 128)
!2326 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "noswitch_section", file: !2300, line: 530, size: 128, elements: !2327)
!2327 = !{!2328, !2329}
!2328 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2326, file: !2300, line: 531, baseType: !2303, size: 32)
!2329 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !2326, file: !2300, line: 534, baseType: !2330, size: 64, offset: 64)
!2330 = !DIDerivedType(tag: DW_TAG_typedef, name: "noswitch_section_callback", file: !2300, line: 525, baseType: !2331)
!2331 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2332, size: 64)
!2332 = !DISubroutineType(types: !2333)
!2333 = !{!1804, !1686, !1888, !1739, !1739}
!2334 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !2294, file: !1865, line: 211, baseType: !7, size: 32, offset: 64)
!2335 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2294, file: !1865, line: 214, baseType: !1741, size: 64, offset: 128)
!2336 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !2294, file: !1865, line: 224, baseType: !2337, size: 64, offset: 192)
!2337 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2338, size: 64)
!2338 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !1865, line: 202, baseType: !2339)
!2339 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !1865, line: 202, size: 128, elements: !2340)
!2340 = !{!2341}
!2341 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2339, file: !1865, line: 202, baseType: !2342, size: 128)
!2342 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !1865, line: 200, baseType: !2343)
!2343 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !1865, line: 200, size: 128, elements: !2344)
!2344 = !{!2345, !2346, !2347}
!2345 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2343, file: !1865, line: 200, baseType: !7, size: 32)
!2346 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2343, file: !1865, line: 200, baseType: !7, size: 32, offset: 32)
!2347 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2343, file: !1865, line: 200, baseType: !1898, size: 64, offset: 64)
!2348 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !2294, file: !1865, line: 234, baseType: !2337, size: 64, offset: 256)
!2349 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2288, file: !1865, line: 197, baseType: !1741, size: 64, offset: 256)
!2350 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !1878, file: !1865, line: 319, baseType: !1748, size: 256)
!2351 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !1878, file: !1865, line: 320, baseType: !1767, size: 192)
!2352 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !1688, file: !135, line: 3384, baseType: !2353, size: 1472)
!2353 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !135, line: 3114, size: 1472, elements: !2354)
!2354 = !{!2355, !2376, !2377, !2378, !2379}
!2355 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2353, file: !135, line: 3115, baseType: !2356, size: 1216)
!2356 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !135, line: 2984, size: 1216, elements: !2357)
!2357 = !{!2358, !2359, !2360, !2361, !2362, !2363, !2364, !2365, !2366, !2367, !2368, !2369, !2370, !2371, !2372, !2373, !2374, !2375}
!2358 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2356, file: !135, line: 2985, baseType: !1858, size: 960)
!2359 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !2356, file: !135, line: 2986, baseType: !1686, size: 64, offset: 960)
!2360 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !2356, file: !135, line: 2987, baseType: !1686, size: 64, offset: 1024)
!2361 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !2356, file: !135, line: 2988, baseType: !1686, size: 64, offset: 1088)
!2362 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !2356, file: !135, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!2363 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !2356, file: !135, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!2364 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !2356, file: !135, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!2365 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !2356, file: !135, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!2366 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !2356, file: !135, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!2367 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !2356, file: !135, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!2368 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !2356, file: !135, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!2369 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !2356, file: !135, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!2370 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !2356, file: !135, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!2371 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !2356, file: !135, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!2372 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !2356, file: !135, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!2373 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !2356, file: !135, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!2374 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !2356, file: !135, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!2375 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !2356, file: !135, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!2376 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !2353, file: !135, line: 3117, baseType: !1686, size: 64, offset: 1216)
!2377 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !2353, file: !135, line: 3119, baseType: !1686, size: 64, offset: 1280)
!2378 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !2353, file: !135, line: 3121, baseType: !1686, size: 64, offset: 1344)
!2379 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !2353, file: !135, line: 3123, baseType: !1686, size: 64, offset: 1408)
!2380 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !1688, file: !135, line: 3385, baseType: !2381, size: 1088)
!2381 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !135, line: 2874, size: 1088, elements: !2382)
!2382 = !{!2383, !2384, !2385}
!2383 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2381, file: !135, line: 2875, baseType: !1858, size: 960)
!2384 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !2381, file: !135, line: 2876, baseType: !1862, size: 64, offset: 960)
!2385 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2381, file: !135, line: 2877, baseType: !2386, size: 64, offset: 1024)
!2386 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2387, size: 64)
!2387 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !2388, line: 172, size: 128, elements: !2389)
!2388 = !DIFile(filename: "./tree-flow.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2389 = !{!2390, !2391, !2392, !2393, !2394, !2395, !2396}
!2390 = !DIDerivedType(tag: DW_TAG_member, name: "base_var_processed", scope: !2387, file: !2388, line: 174, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!2391 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !2387, file: !2388, line: 178, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!2392 = !DIDerivedType(tag: DW_TAG_member, name: "need_phi_state", scope: !2387, file: !2388, line: 183, baseType: !7, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!2393 = !DIDerivedType(tag: DW_TAG_member, name: "is_heapvar", scope: !2387, file: !2388, line: 187, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!2394 = !DIDerivedType(tag: DW_TAG_member, name: "noalias_state", scope: !2387, file: !2388, line: 192, baseType: !7, size: 2, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!2395 = !DIDerivedType(tag: DW_TAG_member, name: "base_index", scope: !2387, file: !2388, line: 195, baseType: !7, size: 32, offset: 32)
!2396 = !DIDerivedType(tag: DW_TAG_member, name: "current_def", scope: !2387, file: !2388, line: 199, baseType: !1686, size: 64, offset: 64)
!2397 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !1688, file: !135, line: 3386, baseType: !2356, size: 1216)
!2398 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !1688, file: !135, line: 3387, baseType: !2399, size: 1280)
!2399 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !135, line: 3093, size: 1280, elements: !2400)
!2400 = !{!2401, !2402}
!2401 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2399, file: !135, line: 3094, baseType: !2356, size: 1216)
!2402 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2399, file: !135, line: 3095, baseType: !2386, size: 64, offset: 1216)
!2403 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !1688, file: !135, line: 3388, baseType: !2404, size: 1216)
!2404 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !135, line: 2824, size: 1216, elements: !2405)
!2405 = !{!2406, !2407, !2408, !2409, !2410, !2411}
!2406 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2404, file: !135, line: 2825, baseType: !1820, size: 896)
!2407 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2404, file: !135, line: 2827, baseType: !1686, size: 64, offset: 896)
!2408 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !2404, file: !135, line: 2828, baseType: !1686, size: 64, offset: 960)
!2409 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !2404, file: !135, line: 2829, baseType: !1686, size: 64, offset: 1024)
!2410 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !2404, file: !135, line: 2830, baseType: !1686, size: 64, offset: 1088)
!2411 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !2404, file: !135, line: 2831, baseType: !1686, size: 64, offset: 1152)
!2412 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !1688, file: !135, line: 3389, baseType: !2413, size: 1024)
!2413 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !135, line: 2850, size: 1024, elements: !2414)
!2414 = !{!2415, !2416, !2417}
!2415 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2413, file: !135, line: 2851, baseType: !1858, size: 960)
!2416 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !2413, file: !135, line: 2852, baseType: !1330, size: 32, offset: 960)
!2417 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !2413, file: !135, line: 2853, baseType: !1330, size: 32, offset: 992)
!2418 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !1688, file: !135, line: 3390, baseType: !2419, size: 1024)
!2419 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !135, line: 2857, size: 1024, elements: !2420)
!2420 = !{!2421, !2422}
!2421 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2419, file: !135, line: 2858, baseType: !1858, size: 960)
!2422 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2419, file: !135, line: 2859, baseType: !2386, size: 64, offset: 960)
!2423 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !1688, file: !135, line: 3391, baseType: !2424, size: 960)
!2424 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !135, line: 2862, size: 960, elements: !2425)
!2425 = !{!2426}
!2426 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2424, file: !135, line: 2863, baseType: !1858, size: 960)
!2427 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !1688, file: !135, line: 3392, baseType: !2428, size: 1472)
!2428 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !135, line: 3304, size: 1472, elements: !2429)
!2429 = !{!2430}
!2430 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2428, file: !135, line: 3305, baseType: !2353, size: 1472)
!2431 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !1688, file: !135, line: 3393, baseType: !2432, size: 1792)
!2432 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !135, line: 3248, size: 1792, elements: !2433)
!2433 = !{!2434, !2435, !2744, !2745, !2746, !2747, !2748, !2749, !2750, !2751, !2752, !2753, !2754, !2755, !2756, !2757, !2758, !2759, !2760, !2761, !2762, !2763, !2764}
!2434 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2432, file: !135, line: 3249, baseType: !2353, size: 1472)
!2435 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !2432, file: !135, line: 3251, baseType: !2436, size: 64, offset: 1472)
!2436 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2437, size: 64)
!2437 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !2438, line: 463, size: 1152, elements: !2439)
!2438 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2439 = !{!2440, !2598, !2629, !2630, !2685, !2688, !2689, !2690, !2691, !2692, !2693, !2717, !2720, !2721, !2722, !2723, !2724, !2725, !2726, !2727, !2728, !2729, !2730, !2731, !2732, !2733, !2734, !2735, !2736, !2737, !2738, !2739, !2740, !2741, !2742, !2743}
!2440 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !2437, file: !2438, line: 464, baseType: !2441, size: 64)
!2441 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2442, size: 64)
!2442 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !330, line: 194, size: 384, elements: !2443)
!2443 = !{!2444, !2493, !2506, !2520, !2567, !2579}
!2444 = !DIDerivedType(tag: DW_TAG_member, name: "region_tree", scope: !2442, file: !330, line: 197, baseType: !2445, size: 64)
!2445 = !DIDerivedType(tag: DW_TAG_typedef, name: "eh_region", file: !330, line: 182, baseType: !2446)
!2446 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2447, size: 64)
!2447 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_d", file: !330, line: 116, size: 704, elements: !2448)
!2448 = !{!2449, !2450, !2451, !2452, !2453, !2454, !2481, !2490, !2491, !2492}
!2449 = !DIDerivedType(tag: DW_TAG_member, name: "outer", scope: !2447, file: !330, line: 119, baseType: !2446, size: 64)
!2450 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !2447, file: !330, line: 122, baseType: !2446, size: 64, offset: 64)
!2451 = !DIDerivedType(tag: DW_TAG_member, name: "next_peer", scope: !2447, file: !330, line: 123, baseType: !2446, size: 64, offset: 128)
!2452 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2447, file: !330, line: 126, baseType: !1330, size: 32, offset: 192)
!2453 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2447, file: !330, line: 129, baseType: !329, size: 32, offset: 224)
!2454 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !2447, file: !330, line: 165, baseType: !2455, size: 192, offset: 256)
!2455 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "eh_region_u", file: !330, line: 132, size: 192, elements: !2456)
!2456 = !{!2457, !2470, !2476}
!2457 = !DIDerivedType(tag: DW_TAG_member, name: "eh_try", scope: !2455, file: !330, line: 137, baseType: !2458, size: 128)
!2458 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_try", file: !330, line: 133, size: 128, elements: !2459)
!2459 = !{!2460, !2469}
!2460 = !DIDerivedType(tag: DW_TAG_member, name: "first_catch", scope: !2458, file: !330, line: 135, baseType: !2461, size: 64)
!2461 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2462, size: 64)
!2462 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_catch_d", file: !330, line: 93, size: 320, elements: !2463)
!2463 = !{!2464, !2465, !2466, !2467, !2468}
!2464 = !DIDerivedType(tag: DW_TAG_member, name: "next_catch", scope: !2462, file: !330, line: 96, baseType: !2461, size: 64)
!2465 = !DIDerivedType(tag: DW_TAG_member, name: "prev_catch", scope: !2462, file: !330, line: 97, baseType: !2461, size: 64, offset: 64)
!2466 = !DIDerivedType(tag: DW_TAG_member, name: "type_list", scope: !2462, file: !330, line: 101, baseType: !1686, size: 64, offset: 128)
!2467 = !DIDerivedType(tag: DW_TAG_member, name: "filter_list", scope: !2462, file: !330, line: 106, baseType: !1686, size: 64, offset: 192)
!2468 = !DIDerivedType(tag: DW_TAG_member, name: "label", scope: !2462, file: !330, line: 111, baseType: !1686, size: 64, offset: 256)
!2469 = !DIDerivedType(tag: DW_TAG_member, name: "last_catch", scope: !2458, file: !330, line: 136, baseType: !2461, size: 64, offset: 64)
!2470 = !DIDerivedType(tag: DW_TAG_member, name: "allowed", scope: !2455, file: !330, line: 151, baseType: !2471, size: 192)
!2471 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_allowed", file: !330, line: 139, size: 192, elements: !2472)
!2472 = !{!2473, !2474, !2475}
!2473 = !DIDerivedType(tag: DW_TAG_member, name: "type_list", scope: !2471, file: !330, line: 141, baseType: !1686, size: 64)
!2474 = !DIDerivedType(tag: DW_TAG_member, name: "label", scope: !2471, file: !330, line: 145, baseType: !1686, size: 64, offset: 64)
!2475 = !DIDerivedType(tag: DW_TAG_member, name: "filter", scope: !2471, file: !330, line: 150, baseType: !1330, size: 32, offset: 128)
!2476 = !DIDerivedType(tag: DW_TAG_member, name: "must_not_throw", scope: !2455, file: !330, line: 164, baseType: !2477, size: 128)
!2477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_must_not_throw", file: !330, line: 153, size: 128, elements: !2478)
!2478 = !{!2479, !2480}
!2479 = !DIDerivedType(tag: DW_TAG_member, name: "failure_decl", scope: !2477, file: !330, line: 161, baseType: !1686, size: 64)
!2480 = !DIDerivedType(tag: DW_TAG_member, name: "failure_loc", scope: !2477, file: !330, line: 163, baseType: !1812, size: 32, offset: 64)
!2481 = !DIDerivedType(tag: DW_TAG_member, name: "landing_pads", scope: !2447, file: !330, line: 168, baseType: !2482, size: 64, offset: 448)
!2482 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2483, size: 64)
!2483 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_landing_pad_d", file: !330, line: 67, size: 320, elements: !2484)
!2484 = !{!2485, !2486, !2487, !2488, !2489}
!2485 = !DIDerivedType(tag: DW_TAG_member, name: "next_lp", scope: !2483, file: !330, line: 70, baseType: !2482, size: 64)
!2486 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !2483, file: !330, line: 73, baseType: !2446, size: 64, offset: 64)
!2487 = !DIDerivedType(tag: DW_TAG_member, name: "post_landing_pad", scope: !2483, file: !330, line: 78, baseType: !1686, size: 64, offset: 128)
!2488 = !DIDerivedType(tag: DW_TAG_member, name: "landing_pad", scope: !2483, file: !330, line: 85, baseType: !1862, size: 64, offset: 192)
!2489 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2483, file: !330, line: 88, baseType: !1330, size: 32, offset: 256)
!2490 = !DIDerivedType(tag: DW_TAG_member, name: "exc_ptr_reg", scope: !2447, file: !330, line: 173, baseType: !1862, size: 64, offset: 512)
!2491 = !DIDerivedType(tag: DW_TAG_member, name: "filter_reg", scope: !2447, file: !330, line: 173, baseType: !1862, size: 64, offset: 576)
!2492 = !DIDerivedType(tag: DW_TAG_member, name: "use_cxa_end_cleanup", scope: !2447, file: !330, line: 177, baseType: !1804, size: 8, offset: 640)
!2493 = !DIDerivedType(tag: DW_TAG_member, name: "region_array", scope: !2442, file: !330, line: 200, baseType: !2494, size: 64, offset: 64)
!2494 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2495, size: 64)
!2495 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_region_gc", file: !330, line: 185, baseType: !2496)
!2496 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_region_gc", file: !330, line: 185, size: 128, elements: !2497)
!2497 = !{!2498}
!2498 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2496, file: !330, line: 185, baseType: !2499, size: 128)
!2499 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_region_base", file: !330, line: 184, baseType: !2500)
!2500 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_region_base", file: !330, line: 184, size: 128, elements: !2501)
!2501 = !{!2502, !2503, !2504}
!2502 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2500, file: !330, line: 184, baseType: !7, size: 32)
!2503 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2500, file: !330, line: 184, baseType: !7, size: 32, offset: 32)
!2504 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2500, file: !330, line: 184, baseType: !2505, size: 64, offset: 64)
!2505 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2445, size: 64, elements: !1785)
!2506 = !DIDerivedType(tag: DW_TAG_member, name: "lp_array", scope: !2442, file: !330, line: 203, baseType: !2507, size: 64, offset: 128)
!2507 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2508, size: 64)
!2508 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_landing_pad_gc", file: !330, line: 189, baseType: !2509)
!2509 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_landing_pad_gc", file: !330, line: 189, size: 128, elements: !2510)
!2510 = !{!2511}
!2511 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2509, file: !330, line: 189, baseType: !2512, size: 128)
!2512 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_landing_pad_base", file: !330, line: 188, baseType: !2513)
!2513 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_landing_pad_base", file: !330, line: 188, size: 128, elements: !2514)
!2514 = !{!2515, !2516, !2517}
!2515 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2513, file: !330, line: 188, baseType: !7, size: 32)
!2516 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2513, file: !330, line: 188, baseType: !7, size: 32, offset: 32)
!2517 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2513, file: !330, line: 188, baseType: !2518, size: 64, offset: 64)
!2518 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2519, size: 64, elements: !1785)
!2519 = !DIDerivedType(tag: DW_TAG_typedef, name: "eh_landing_pad", file: !330, line: 180, baseType: !2482)
!2520 = !DIDerivedType(tag: DW_TAG_member, name: "throw_stmt_table", scope: !2442, file: !330, line: 207, baseType: !2521, size: 64, offset: 192)
!2521 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !1574, line: 144, baseType: !2522)
!2522 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2523, size: 64)
!2523 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !1574, line: 100, size: 896, elements: !2524)
!2524 = !{!2525, !2531, !2536, !2541, !2543, !2544, !2545, !2546, !2547, !2548, !2553, !2555, !2556, !2561, !2566}
!2525 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !2523, file: !1574, line: 102, baseType: !2526, size: 64)
!2526 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !1574, line: 52, baseType: !2527)
!2527 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2528, size: 64)
!2528 = !DISubroutineType(types: !2529)
!2529 = !{!2530, !2321}
!2530 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !1574, line: 47, baseType: !7)
!2531 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !2523, file: !1574, line: 105, baseType: !2532, size: 64, offset: 64)
!2532 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !1574, line: 59, baseType: !2533)
!2533 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2534, size: 64)
!2534 = !DISubroutineType(types: !2535)
!2535 = !{!1330, !2321, !2321}
!2536 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !2523, file: !1574, line: 108, baseType: !2537, size: 64, offset: 128)
!2537 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !1574, line: 63, baseType: !2538)
!2538 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2539, size: 64)
!2539 = !DISubroutineType(types: !2540)
!2540 = !{null, !1685}
!2541 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !2523, file: !1574, line: 111, baseType: !2542, size: 64, offset: 192)
!2542 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1685, size: 64)
!2543 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2523, file: !1574, line: 114, baseType: !2160, size: 64, offset: 256)
!2544 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !2523, file: !1574, line: 117, baseType: !2160, size: 64, offset: 320)
!2545 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !2523, file: !1574, line: 120, baseType: !2160, size: 64, offset: 384)
!2546 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !2523, file: !1574, line: 124, baseType: !7, size: 32, offset: 448)
!2547 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !2523, file: !1574, line: 128, baseType: !7, size: 32, offset: 480)
!2548 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !2523, file: !1574, line: 131, baseType: !2549, size: 64, offset: 512)
!2549 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !1574, line: 75, baseType: !2550)
!2550 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2551, size: 64)
!2551 = !DISubroutineType(types: !2552)
!2552 = !{!1685, !2160, !2160}
!2553 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !2523, file: !1574, line: 132, baseType: !2554, size: 64, offset: 576)
!2554 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !1574, line: 78, baseType: !2538)
!2555 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !2523, file: !1574, line: 135, baseType: !1685, size: 64, offset: 640)
!2556 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !2523, file: !1574, line: 136, baseType: !2557, size: 64, offset: 704)
!2557 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !1574, line: 82, baseType: !2558)
!2558 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2559, size: 64)
!2559 = !DISubroutineType(types: !2560)
!2560 = !{!1685, !1685, !2160, !2160}
!2561 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !2523, file: !1574, line: 137, baseType: !2562, size: 64, offset: 768)
!2562 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !1574, line: 83, baseType: !2563)
!2563 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2564, size: 64)
!2564 = !DISubroutineType(types: !2565)
!2565 = !{null, !1685, !1685}
!2566 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !2523, file: !1574, line: 141, baseType: !7, size: 32, offset: 832)
!2567 = !DIDerivedType(tag: DW_TAG_member, name: "ttype_data", scope: !2442, file: !330, line: 211, baseType: !2568, size: 64, offset: 256)
!2568 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2569, size: 64)
!2569 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !135, line: 183, baseType: !2570)
!2570 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !135, line: 183, size: 128, elements: !2571)
!2571 = !{!2572}
!2572 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2570, file: !135, line: 183, baseType: !2573, size: 128)
!2573 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !135, line: 182, baseType: !2574)
!2574 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !135, line: 182, size: 128, elements: !2575)
!2575 = !{!2576, !2577, !2578}
!2576 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2574, file: !135, line: 182, baseType: !7, size: 32)
!2577 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2574, file: !135, line: 182, baseType: !7, size: 32, offset: 32)
!2578 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2574, file: !135, line: 182, baseType: !2068, size: 64, offset: 64)
!2579 = !DIDerivedType(tag: DW_TAG_member, name: "ehspec_data", scope: !2442, file: !330, line: 220, baseType: !2580, size: 64, offset: 320)
!2580 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "eh_status_u", file: !330, line: 217, size: 64, elements: !2581)
!2581 = !{!2582, !2583}
!2582 = !DIDerivedType(tag: DW_TAG_member, name: "arm_eabi", scope: !2580, file: !330, line: 218, baseType: !2568, size: 64)
!2583 = !DIDerivedType(tag: DW_TAG_member, name: "other", scope: !2580, file: !330, line: 219, baseType: !2584, size: 64)
!2584 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2585, size: 64)
!2585 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_uchar_gc", file: !2586, line: 29, baseType: !2587)
!2586 = !DIFile(filename: "./vecprim.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2587 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_uchar_gc", file: !2586, line: 29, size: 96, elements: !2588)
!2588 = !{!2589}
!2589 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2587, file: !2586, line: 29, baseType: !2590, size: 96)
!2590 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_uchar_base", file: !2586, line: 27, baseType: !2591)
!2591 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_uchar_base", file: !2586, line: 27, size: 96, elements: !2592)
!2592 = !{!2593, !2594, !2595}
!2593 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2591, file: !2586, line: 27, baseType: !7, size: 32)
!2594 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2591, file: !2586, line: 27, baseType: !7, size: 32, offset: 32)
!2595 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2591, file: !2586, line: 27, baseType: !2596, size: 8, offset: 64)
!2596 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2597, size: 8, elements: !1785)
!2597 = !DIDerivedType(tag: DW_TAG_typedef, name: "uchar", file: !2586, line: 26, baseType: !1804)
!2598 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !2437, file: !2438, line: 467, baseType: !2599, size: 64, offset: 64)
!2599 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2600, size: 64)
!2600 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !337, line: 374, size: 640, elements: !2601)
!2601 = !{!2602, !2604, !2605, !2618, !2619, !2620, !2621, !2622, !2623, !2625, !2627, !2628}
!2602 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !2600, file: !337, line: 377, baseType: !2603, size: 64)
!2603 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !1619, line: 111, baseType: !1978)
!2604 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !2600, file: !337, line: 378, baseType: !2603, size: 64, offset: 64)
!2605 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !2600, file: !337, line: 381, baseType: !2606, size: 64, offset: 128)
!2606 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2607, size: 64)
!2607 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !337, line: 282, baseType: !2608)
!2608 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !337, line: 282, size: 128, elements: !2609)
!2609 = !{!2610}
!2610 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2608, file: !337, line: 282, baseType: !2611, size: 128)
!2611 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !337, line: 281, baseType: !2612)
!2612 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !337, line: 281, size: 128, elements: !2613)
!2613 = !{!2614, !2615, !2616}
!2614 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2612, file: !337, line: 281, baseType: !7, size: 32)
!2615 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2612, file: !337, line: 281, baseType: !7, size: 32, offset: 32)
!2616 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2612, file: !337, line: 281, baseType: !2617, size: 64, offset: 64)
!2617 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2603, size: 64, elements: !1785)
!2618 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !2600, file: !337, line: 384, baseType: !1330, size: 32, offset: 192)
!2619 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !2600, file: !337, line: 387, baseType: !1330, size: 32, offset: 224)
!2620 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !2600, file: !337, line: 390, baseType: !1330, size: 32, offset: 256)
!2621 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !2600, file: !337, line: 394, baseType: !2606, size: 64, offset: 320)
!2622 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !2600, file: !337, line: 396, baseType: !336, size: 32, offset: 384)
!2623 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !2600, file: !337, line: 399, baseType: !2624, size: 64, offset: 416)
!2624 = !DICompositeType(tag: DW_TAG_array_type, baseType: !342, size: 64, elements: !1932)
!2625 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !2600, file: !337, line: 402, baseType: !2626, size: 64, offset: 480)
!2626 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !1932)
!2627 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !2600, file: !337, line: 406, baseType: !1330, size: 32, offset: 544)
!2628 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !2600, file: !337, line: 409, baseType: !1330, size: 32, offset: 576)
!2629 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !2437, file: !2438, line: 470, baseType: !2005, size: 64, offset: 128)
!2630 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !2437, file: !2438, line: 473, baseType: !2631, size: 64, offset: 192)
!2631 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2632, size: 64)
!2632 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !2388, line: 39, size: 1152, elements: !2633)
!2633 = !{!2634, !2635, !2648, !2649, !2650, !2662, !2663, !2667, !2668, !2669, !2670, !2671}
!2634 = !DIDerivedType(tag: DW_TAG_member, name: "referenced_vars", scope: !2632, file: !2388, line: 41, baseType: !2521, size: 64)
!2635 = !DIDerivedType(tag: DW_TAG_member, name: "modified_noreturn_calls", scope: !2632, file: !2388, line: 48, baseType: !2636, size: 64, offset: 64)
!2636 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2637, size: 64)
!2637 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_gc", file: !385, line: 35, baseType: !2638)
!2638 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_gc", file: !385, line: 35, size: 128, elements: !2639)
!2639 = !{!2640}
!2640 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2638, file: !385, line: 35, baseType: !2641, size: 128)
!2641 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_base", file: !385, line: 33, baseType: !2642)
!2642 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_base", file: !385, line: 33, size: 128, elements: !2643)
!2643 = !{!2644, !2645, !2646}
!2644 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2642, file: !385, line: 33, baseType: !7, size: 32)
!2645 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2642, file: !385, line: 33, baseType: !7, size: 32, offset: 32)
!2646 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2642, file: !385, line: 33, baseType: !2647, size: 64, offset: 64)
!2647 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2014, size: 64, elements: !1785)
!2648 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_names", scope: !2632, file: !2388, line: 51, baseType: !2568, size: 64, offset: 128)
!2649 = !DIDerivedType(tag: DW_TAG_member, name: "vop", scope: !2632, file: !2388, line: 54, baseType: !1686, size: 64, offset: 192)
!2650 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !2632, file: !2388, line: 57, baseType: !2651, size: 128, offset: 256)
!2651 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pt_solution", file: !2652, line: 31, size: 128, elements: !2653)
!2652 = !DIFile(filename: "./tree-ssa-alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2653 = !{!2654, !2655, !2656, !2657, !2658, !2659, !2660}
!2654 = !DIDerivedType(tag: DW_TAG_member, name: "anything", scope: !2651, file: !2652, line: 35, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!2655 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal", scope: !2651, file: !2652, line: 39, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!2656 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !2651, file: !2652, line: 42, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!2657 = !DIDerivedType(tag: DW_TAG_member, name: "null", scope: !2651, file: !2652, line: 46, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!2658 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_global", scope: !2651, file: !2652, line: 50, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!2659 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_restrict", scope: !2651, file: !2652, line: 53, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!2660 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2651, file: !2652, line: 56, baseType: !2661, size: 64, offset: 64)
!2661 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !1619, line: 47, baseType: !1916)
!2662 = !DIDerivedType(tag: DW_TAG_member, name: "callused", scope: !2632, file: !2388, line: 60, baseType: !2651, size: 128, offset: 384)
!2663 = !DIDerivedType(tag: DW_TAG_member, name: "decls_to_pointers", scope: !2632, file: !2388, line: 64, baseType: !2664, size: 64, offset: 512)
!2664 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2665, size: 64)
!2665 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_map_t", file: !2666, line: 33, flags: DIFlagFwdDecl)
!2666 = !DIFile(filename: "./pointer-set.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2667 = !DIDerivedType(tag: DW_TAG_member, name: "free_ssanames", scope: !2632, file: !2388, line: 67, baseType: !1686, size: 64, offset: 576)
!2668 = !DIDerivedType(tag: DW_TAG_member, name: "default_defs", scope: !2632, file: !2388, line: 73, baseType: !2521, size: 64, offset: 640)
!2669 = !DIDerivedType(tag: DW_TAG_member, name: "syms_to_rename", scope: !2632, file: !2388, line: 77, baseType: !2661, size: 64, offset: 704)
!2670 = !DIDerivedType(tag: DW_TAG_member, name: "in_ssa_p", scope: !2632, file: !2388, line: 80, baseType: !7, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!2671 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operands", scope: !2632, file: !2388, line: 82, baseType: !2672, size: 320, offset: 832)
!2672 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operands", file: !2045, line: 62, size: 320, elements: !2673)
!2673 = !{!2674, !2680, !2681, !2682, !2683, !2684}
!2674 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory", scope: !2672, file: !2045, line: 63, baseType: !2675, size: 64)
!2675 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2676, size: 64)
!2676 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_memory_d", file: !2045, line: 56, size: 128, elements: !2677)
!2677 = !{!2678, !2679}
!2678 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2676, file: !2045, line: 57, baseType: !2675, size: 64)
!2679 = !DIDerivedType(tag: DW_TAG_member, name: "mem", scope: !2676, file: !2045, line: 58, baseType: !1783, size: 8, offset: 64)
!2680 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory_index", scope: !2672, file: !2045, line: 64, baseType: !7, size: 32, offset: 64)
!2681 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operand_mem_size", scope: !2672, file: !2045, line: 66, baseType: !7, size: 32, offset: 96)
!2682 = !DIDerivedType(tag: DW_TAG_member, name: "ops_active", scope: !2672, file: !2045, line: 68, baseType: !1804, size: 8, offset: 128)
!2683 = !DIDerivedType(tag: DW_TAG_member, name: "free_defs", scope: !2672, file: !2045, line: 70, baseType: !2043, size: 64, offset: 192)
!2684 = !DIDerivedType(tag: DW_TAG_member, name: "free_uses", scope: !2672, file: !2045, line: 71, baseType: !2051, size: 64, offset: 256)
!2685 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !2437, file: !2438, line: 476, baseType: !2686, size: 64, offset: 256)
!2686 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2687, size: 64)
!2687 = !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !2438, line: 476, flags: DIFlagFwdDecl)
!2688 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !2437, file: !2438, line: 479, baseType: !2521, size: 64, offset: 320)
!2689 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2437, file: !2438, line: 484, baseType: !1686, size: 64, offset: 384)
!2690 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !2437, file: !2438, line: 488, baseType: !1686, size: 64, offset: 448)
!2691 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !2437, file: !2438, line: 493, baseType: !1686, size: 64, offset: 512)
!2692 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !2437, file: !2438, line: 496, baseType: !1686, size: 64, offset: 576)
!2693 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !2437, file: !2438, line: 501, baseType: !2694, size: 64, offset: 640)
!2694 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2695, size: 64)
!2695 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !348, line: 2355, size: 576, elements: !2696)
!2696 = !{!2697, !2700, !2701, !2702, !2703, !2705, !2706, !2711, !2712, !2713, !2714, !2715, !2716}
!2697 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !2695, file: !348, line: 2356, baseType: !2698, size: 64)
!2698 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2699, size: 64)
!2699 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !348, line: 2356, flags: DIFlagFwdDecl)
!2700 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !2695, file: !348, line: 2357, baseType: !1888, size: 64, offset: 64)
!2701 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !2695, file: !348, line: 2358, baseType: !1330, size: 32, offset: 128)
!2702 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !2695, file: !348, line: 2359, baseType: !1330, size: 32, offset: 160)
!2703 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !2695, file: !348, line: 2360, baseType: !2704, size: 128, offset: 192)
!2704 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1330, size: 128, elements: !1957)
!2705 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !2695, file: !348, line: 2364, baseType: !1330, size: 32, offset: 320)
!2706 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !2695, file: !348, line: 2367, baseType: !2707, size: 128, offset: 384)
!2707 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !348, line: 2349, size: 128, elements: !2708)
!2708 = !{!2709, !2710}
!2709 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !2707, file: !348, line: 2351, baseType: !1862, size: 64)
!2710 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2707, file: !348, line: 2352, baseType: !1741, size: 64, offset: 64)
!2711 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !2695, file: !348, line: 2371, baseType: !347, size: 32, offset: 512)
!2712 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !2695, file: !348, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!2713 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !2695, file: !348, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!2714 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !2695, file: !348, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!2715 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !2695, file: !348, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!2716 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !2695, file: !348, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!2717 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !2437, file: !2438, line: 504, baseType: !2718, size: 64, offset: 704)
!2718 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2719, size: 64)
!2719 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !2438, line: 504, flags: DIFlagFwdDecl)
!2720 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !2437, file: !2438, line: 507, baseType: !2521, size: 64, offset: 768)
!2721 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !2437, file: !2438, line: 510, baseType: !1330, size: 32, offset: 832)
!2722 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !2437, file: !2438, line: 513, baseType: !1330, size: 32, offset: 864)
!2723 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !2437, file: !2438, line: 516, baseType: !1812, size: 32, offset: 896)
!2724 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !2437, file: !2438, line: 519, baseType: !1812, size: 32, offset: 928)
!2725 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !2437, file: !2438, line: 522, baseType: !7, size: 32, offset: 960)
!2726 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !2437, file: !2438, line: 523, baseType: !7, size: 32, offset: 992)
!2727 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !2437, file: !2438, line: 528, baseType: !1888, size: 64, offset: 1024)
!2728 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !2437, file: !2438, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!2729 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !2437, file: !2438, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!2730 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !2437, file: !2438, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!2731 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !2437, file: !2438, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!2732 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !2437, file: !2438, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!2733 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !2437, file: !2438, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!2734 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !2437, file: !2438, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!2735 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !2437, file: !2438, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!2736 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !2437, file: !2438, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!2737 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !2437, file: !2438, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!2738 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !2437, file: !2438, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!2739 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !2437, file: !2438, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!2740 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !2437, file: !2438, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!2741 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !2437, file: !2438, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!2742 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !2437, file: !2438, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!2743 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !2437, file: !2438, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!2744 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !2432, file: !135, line: 3254, baseType: !1686, size: 64, offset: 1536)
!2745 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !2432, file: !135, line: 3257, baseType: !1686, size: 64, offset: 1600)
!2746 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !2432, file: !135, line: 3258, baseType: !1686, size: 64, offset: 1664)
!2747 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !2432, file: !135, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!2748 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !2432, file: !135, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!2749 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !2432, file: !135, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!2750 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !2432, file: !135, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!2751 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !2432, file: !135, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!2752 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !2432, file: !135, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!2753 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !2432, file: !135, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!2754 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !2432, file: !135, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!2755 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !2432, file: !135, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!2756 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !2432, file: !135, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!2757 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !2432, file: !135, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!2758 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !2432, file: !135, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!2759 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !2432, file: !135, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!2760 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !2432, file: !135, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!2761 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !2432, file: !135, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!2762 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !2432, file: !135, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!2763 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !2432, file: !135, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!2764 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !2432, file: !135, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!2765 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1688, file: !135, line: 3394, baseType: !2766, size: 1344)
!2766 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !135, line: 2279, size: 1344, elements: !2767)
!2767 = !{!2768, !2769, !2770, !2771, !2772, !2773, !2774, !2775, !2776, !2777, !2778, !2779, !2780, !2781, !2782, !2783, !2784, !2785, !2786, !2787, !2788, !2789, !2790, !2791, !2792, !2793, !2801, !2802, !2803, !2804, !2805, !2806, !2807, !2808, !2809}
!2768 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2766, file: !135, line: 2280, baseType: !1724, size: 192)
!2769 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !2766, file: !135, line: 2281, baseType: !1686, size: 64, offset: 192)
!2770 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2766, file: !135, line: 2282, baseType: !1686, size: 64, offset: 256)
!2771 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !2766, file: !135, line: 2283, baseType: !1686, size: 64, offset: 320)
!2772 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !2766, file: !135, line: 2284, baseType: !1686, size: 64, offset: 384)
!2773 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2766, file: !135, line: 2285, baseType: !7, size: 32, offset: 448)
!2774 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !2766, file: !135, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!2775 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !2766, file: !135, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!2776 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !2766, file: !135, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!2777 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !2766, file: !135, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!2778 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !2766, file: !135, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!2779 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !2766, file: !135, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!2780 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2766, file: !135, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!2781 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !2766, file: !135, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!2782 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !2766, file: !135, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!2783 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !2766, file: !135, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!2784 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !2766, file: !135, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!2785 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !2766, file: !135, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!2786 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !2766, file: !135, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!2787 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !2766, file: !135, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!2788 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !2766, file: !135, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!2789 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2766, file: !135, line: 2305, baseType: !7, size: 32, offset: 512)
!2790 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !2766, file: !135, line: 2306, baseType: !2271, size: 32, offset: 544)
!2791 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !2766, file: !135, line: 2307, baseType: !1686, size: 64, offset: 576)
!2792 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !2766, file: !135, line: 2308, baseType: !1686, size: 64, offset: 640)
!2793 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !2766, file: !135, line: 2314, baseType: !2794, size: 64, offset: 704)
!2794 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !135, line: 2309, size: 64, elements: !2795)
!2795 = !{!2796, !2797, !2798}
!2796 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !2794, file: !135, line: 2310, baseType: !1330, size: 32)
!2797 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !2794, file: !135, line: 2311, baseType: !1888, size: 64)
!2798 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !2794, file: !135, line: 2312, baseType: !2799, size: 64)
!2799 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2800, size: 64)
!2800 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !135, line: 2277, flags: DIFlagFwdDecl)
!2801 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2766, file: !135, line: 2315, baseType: !1686, size: 64, offset: 768)
!2802 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !2766, file: !135, line: 2316, baseType: !1686, size: 64, offset: 832)
!2803 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !2766, file: !135, line: 2317, baseType: !1686, size: 64, offset: 896)
!2804 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !2766, file: !135, line: 2318, baseType: !1686, size: 64, offset: 960)
!2805 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !2766, file: !135, line: 2319, baseType: !1686, size: 64, offset: 1024)
!2806 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !2766, file: !135, line: 2320, baseType: !1686, size: 64, offset: 1088)
!2807 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !2766, file: !135, line: 2321, baseType: !1686, size: 64, offset: 1152)
!2808 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !2766, file: !135, line: 2322, baseType: !1686, size: 64, offset: 1216)
!2809 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !2766, file: !135, line: 2324, baseType: !2810, size: 64, offset: 1280)
!2810 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2811, size: 64)
!2811 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !135, line: 2324, flags: DIFlagFwdDecl)
!2812 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !1688, file: !135, line: 3395, baseType: !2813, size: 320)
!2813 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !135, line: 1469, size: 320, elements: !2814)
!2814 = !{!2815, !2816, !2817}
!2815 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2813, file: !135, line: 1470, baseType: !1724, size: 192)
!2816 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !2813, file: !135, line: 1471, baseType: !1686, size: 64, offset: 192)
!2817 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2813, file: !135, line: 1472, baseType: !1686, size: 64, offset: 256)
!2818 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1688, file: !135, line: 3396, baseType: !2819, size: 320)
!2819 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !135, line: 1482, size: 320, elements: !2820)
!2820 = !{!2821, !2822, !2823}
!2821 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2819, file: !135, line: 1483, baseType: !1724, size: 192)
!2822 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !2819, file: !135, line: 1484, baseType: !1330, size: 32, offset: 192)
!2823 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !2819, file: !135, line: 1485, baseType: !2068, size: 64, offset: 256)
!2824 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !1688, file: !135, line: 3397, baseType: !2825, size: 384)
!2825 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !135, line: 1829, size: 384, elements: !2826)
!2826 = !{!2827, !2828, !2829, !2830}
!2827 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2825, file: !135, line: 1830, baseType: !1724, size: 192)
!2828 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2825, file: !135, line: 1831, baseType: !1812, size: 32, offset: 192)
!2829 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2825, file: !135, line: 1832, baseType: !1686, size: 64, offset: 256)
!2830 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !2825, file: !135, line: 1835, baseType: !2068, size: 64, offset: 320)
!2831 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1688, file: !135, line: 3398, baseType: !2832, size: 704)
!2832 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !135, line: 1898, size: 704, elements: !2833)
!2833 = !{!2834, !2835, !2836, !2837, !2838, !2843}
!2834 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2832, file: !135, line: 1899, baseType: !1724, size: 192)
!2835 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !2832, file: !135, line: 1902, baseType: !1686, size: 64, offset: 192)
!2836 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !2832, file: !135, line: 1905, baseType: !2014, size: 64, offset: 256)
!2837 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !2832, file: !135, line: 1908, baseType: !7, size: 32, offset: 320)
!2838 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !2832, file: !135, line: 1911, baseType: !2839, size: 64, offset: 384)
!2839 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2840, size: 64)
!2840 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !2388, line: 117, size: 128, elements: !2841)
!2841 = !{!2842}
!2842 = !DIDerivedType(tag: DW_TAG_member, name: "pt", scope: !2840, file: !2388, line: 120, baseType: !2651, size: 128)
!2843 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !2832, file: !135, line: 1914, baseType: !2056, size: 256, offset: 448)
!2844 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1688, file: !135, line: 3399, baseType: !2845, size: 704)
!2845 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !135, line: 2008, size: 704, elements: !2846)
!2846 = !{!2847, !2848, !2849, !2850, !2851, !2852, !2853, !2854, !2855, !2856, !2857}
!2847 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2845, file: !135, line: 2009, baseType: !1724, size: 192)
!2848 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !2845, file: !135, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!2849 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !2845, file: !135, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!2850 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2845, file: !135, line: 2014, baseType: !1812, size: 32, offset: 224)
!2851 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2845, file: !135, line: 2016, baseType: !1686, size: 64, offset: 256)
!2852 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !2845, file: !135, line: 2017, baseType: !2568, size: 64, offset: 320)
!2853 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !2845, file: !135, line: 2019, baseType: !1686, size: 64, offset: 384)
!2854 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !2845, file: !135, line: 2020, baseType: !1686, size: 64, offset: 448)
!2855 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !2845, file: !135, line: 2021, baseType: !1686, size: 64, offset: 512)
!2856 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !2845, file: !135, line: 2022, baseType: !1686, size: 64, offset: 576)
!2857 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !2845, file: !135, line: 2023, baseType: !1686, size: 64, offset: 640)
!2858 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1688, file: !135, line: 3400, baseType: !2859, size: 832)
!2859 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !135, line: 2430, size: 832, elements: !2860)
!2860 = !{!2861, !2862, !2863, !2864, !2865, !2866, !2867, !2868, !2869, !2870}
!2861 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2859, file: !135, line: 2431, baseType: !1724, size: 192)
!2862 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2859, file: !135, line: 2433, baseType: !1686, size: 64, offset: 192)
!2863 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !2859, file: !135, line: 2434, baseType: !1686, size: 64, offset: 256)
!2864 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !2859, file: !135, line: 2435, baseType: !1686, size: 64, offset: 320)
!2865 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !2859, file: !135, line: 2436, baseType: !1686, size: 64, offset: 384)
!2866 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !2859, file: !135, line: 2437, baseType: !2568, size: 64, offset: 448)
!2867 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !2859, file: !135, line: 2438, baseType: !1686, size: 64, offset: 512)
!2868 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !2859, file: !135, line: 2440, baseType: !1686, size: 64, offset: 576)
!2869 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !2859, file: !135, line: 2441, baseType: !1686, size: 64, offset: 640)
!2870 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !2859, file: !135, line: 2443, baseType: !2871, size: 128, offset: 704)
!2871 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !135, line: 182, baseType: !2872)
!2872 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !135, line: 182, size: 128, elements: !2873)
!2873 = !{!2874}
!2874 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2872, file: !135, line: 182, baseType: !2573, size: 128)
!2875 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !1688, file: !135, line: 3401, baseType: !2876, size: 320)
!2876 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !135, line: 3327, size: 320, elements: !2877)
!2877 = !{!2878, !2879, !2886}
!2878 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2876, file: !135, line: 3329, baseType: !1724, size: 192)
!2879 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !2876, file: !135, line: 3330, baseType: !2880, size: 64, offset: 192)
!2880 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2881, size: 64)
!2881 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !135, line: 3320, size: 192, elements: !2882)
!2882 = !{!2883, !2884, !2885}
!2883 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2881, file: !135, line: 3322, baseType: !2880, size: 64)
!2884 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2881, file: !135, line: 3323, baseType: !2880, size: 64, offset: 64)
!2885 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2881, file: !135, line: 3324, baseType: !1686, size: 64, offset: 128)
!2886 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !2876, file: !135, line: 3331, baseType: !2880, size: 64, offset: 256)
!2887 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !1688, file: !135, line: 3402, baseType: !2888, size: 256)
!2888 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !135, line: 1540, size: 256, elements: !2889)
!2889 = !{!2890, !2891}
!2890 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2888, file: !135, line: 1541, baseType: !1724, size: 192)
!2891 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !2888, file: !135, line: 1542, baseType: !2892, size: 64, offset: 192)
!2892 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2893, size: 64)
!2893 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !135, line: 1538, baseType: !2894)
!2894 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !135, line: 1538, size: 192, elements: !2895)
!2895 = !{!2896}
!2896 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2894, file: !135, line: 1538, baseType: !2897, size: 192)
!2897 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !135, line: 1537, baseType: !2898)
!2898 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !135, line: 1537, size: 192, elements: !2899)
!2899 = !{!2900, !2901, !2902}
!2900 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2898, file: !135, line: 1537, baseType: !7, size: 32)
!2901 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2898, file: !135, line: 1537, baseType: !7, size: 32, offset: 32)
!2902 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2898, file: !135, line: 1537, baseType: !2903, size: 128, offset: 64)
!2903 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2904, size: 128, elements: !1785)
!2904 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !135, line: 1535, baseType: !2905)
!2905 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !135, line: 1532, size: 128, elements: !2906)
!2906 = !{!2907, !2908}
!2907 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2905, file: !135, line: 1533, baseType: !1686, size: 64)
!2908 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2905, file: !135, line: 1534, baseType: !1686, size: 64, offset: 64)
!2909 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !1688, file: !135, line: 3403, baseType: !2910, size: 512)
!2910 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !135, line: 1938, size: 512, elements: !2911)
!2911 = !{!2912, !2913, !2914, !2915, !2921, !2922, !2923}
!2912 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2910, file: !135, line: 1939, baseType: !1724, size: 192)
!2913 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2910, file: !135, line: 1940, baseType: !1812, size: 32, offset: 192)
!2914 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2910, file: !135, line: 1941, baseType: !352, size: 32, offset: 224)
!2915 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !2910, file: !135, line: 1946, baseType: !2916, size: 32, offset: 256)
!2916 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !135, line: 1942, size: 32, elements: !2917)
!2917 = !{!2918, !2919, !2920}
!2918 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !2916, file: !135, line: 1943, baseType: !370, size: 32)
!2919 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !2916, file: !135, line: 1944, baseType: !377, size: 32)
!2920 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !2916, file: !135, line: 1945, baseType: !134, size: 32)
!2921 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !2910, file: !135, line: 1950, baseType: !2004, size: 64, offset: 320)
!2922 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !2910, file: !135, line: 1951, baseType: !2004, size: 64, offset: 384)
!2923 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !2910, file: !135, line: 1953, baseType: !2068, size: 64, offset: 448)
!2924 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !1688, file: !135, line: 3404, baseType: !2925, size: 1664)
!2925 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !135, line: 3337, size: 1664, elements: !2926)
!2926 = !{!2927, !2928}
!2927 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2925, file: !135, line: 3338, baseType: !1724, size: 192)
!2928 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2925, file: !135, line: 3341, baseType: !2929, size: 1472, offset: 192)
!2929 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !2930, line: 410, size: 1472, elements: !2931)
!2930 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2931 = !{!2932, !2933, !2934, !2935, !2936, !2937, !2938, !2939, !2940, !2942, !2943, !2944, !2945, !2946, !2947, !2948, !2949, !2950, !2951, !2952, !2953, !2954, !2955, !2956, !2957, !2958, !2959, !2960, !2961, !2962, !2963, !2964, !2965, !2966, !2967, !2968, !2969, !2970, !2971, !2972, !2973, !2974, !2975, !2976, !2977, !2978, !2979, !2980, !2981, !2982, !2983, !2984, !2985, !2986, !2987, !2988, !2989, !2990, !2991, !2992, !2993, !2994, !2995, !2996, !2997, !2998, !2999, !3000, !3001, !3002, !3003, !3004, !3005, !3006, !3007, !3008, !3009, !3010, !3011, !3012, !3013, !3014, !3015, !3016, !3017, !3018, !3019, !3020, !3021, !3022, !3023, !3024, !3025, !3026, !3027, !3028, !3029, !3030, !3031, !3032, !3033, !3034, !3035, !3036, !3037, !3038, !3039, !3040, !3041, !3042, !3043, !3044, !3045, !3046, !3047, !3048, !3049, !3050, !3051, !3052, !3053, !3054, !3055, !3056, !3057, !3058, !3059, !3060, !3061, !3062, !3063, !3064, !3065, !3066, !3067, !3068, !3069, !3070, !3071, !3072, !3073, !3074, !3075, !3076, !3077, !3078, !3079, !3080, !3081, !3082, !3083, !3084, !3085, !3086, !3087, !3088, !3089, !3090, !3091, !3092, !3093, !3094, !3095}
!2932 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !2929, file: !2930, line: 412, baseType: !1330, size: 32)
!2933 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !2929, file: !2930, line: 413, baseType: !1330, size: 32, offset: 32)
!2934 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !2929, file: !2930, line: 414, baseType: !1330, size: 32, offset: 64)
!2935 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !2929, file: !2930, line: 415, baseType: !1330, size: 32, offset: 96)
!2936 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !2929, file: !2930, line: 416, baseType: !1330, size: 32, offset: 128)
!2937 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !2929, file: !2930, line: 417, baseType: !1330, size: 32, offset: 160)
!2938 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !2929, file: !2930, line: 418, baseType: !1804, size: 8, offset: 192)
!2939 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !2929, file: !2930, line: 419, baseType: !1804, size: 8, offset: 200)
!2940 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !2929, file: !2930, line: 420, baseType: !2941, size: 8, offset: 208)
!2941 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!2942 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !2929, file: !2930, line: 421, baseType: !2941, size: 8, offset: 216)
!2943 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !2929, file: !2930, line: 422, baseType: !2941, size: 8, offset: 224)
!2944 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !2929, file: !2930, line: 423, baseType: !2941, size: 8, offset: 232)
!2945 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !2929, file: !2930, line: 424, baseType: !2941, size: 8, offset: 240)
!2946 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !2929, file: !2930, line: 425, baseType: !2941, size: 8, offset: 248)
!2947 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !2929, file: !2930, line: 426, baseType: !2941, size: 8, offset: 256)
!2948 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !2929, file: !2930, line: 427, baseType: !2941, size: 8, offset: 264)
!2949 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !2929, file: !2930, line: 428, baseType: !2941, size: 8, offset: 272)
!2950 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !2929, file: !2930, line: 429, baseType: !2941, size: 8, offset: 280)
!2951 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !2929, file: !2930, line: 430, baseType: !2941, size: 8, offset: 288)
!2952 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !2929, file: !2930, line: 431, baseType: !2941, size: 8, offset: 296)
!2953 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !2929, file: !2930, line: 432, baseType: !2941, size: 8, offset: 304)
!2954 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !2929, file: !2930, line: 433, baseType: !2941, size: 8, offset: 312)
!2955 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !2929, file: !2930, line: 434, baseType: !2941, size: 8, offset: 320)
!2956 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !2929, file: !2930, line: 435, baseType: !2941, size: 8, offset: 328)
!2957 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !2929, file: !2930, line: 436, baseType: !2941, size: 8, offset: 336)
!2958 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !2929, file: !2930, line: 437, baseType: !2941, size: 8, offset: 344)
!2959 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !2929, file: !2930, line: 438, baseType: !2941, size: 8, offset: 352)
!2960 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !2929, file: !2930, line: 439, baseType: !2941, size: 8, offset: 360)
!2961 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !2929, file: !2930, line: 440, baseType: !2941, size: 8, offset: 368)
!2962 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !2929, file: !2930, line: 441, baseType: !2941, size: 8, offset: 376)
!2963 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !2929, file: !2930, line: 442, baseType: !2941, size: 8, offset: 384)
!2964 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !2929, file: !2930, line: 443, baseType: !2941, size: 8, offset: 392)
!2965 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !2929, file: !2930, line: 444, baseType: !2941, size: 8, offset: 400)
!2966 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !2929, file: !2930, line: 445, baseType: !2941, size: 8, offset: 408)
!2967 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !2929, file: !2930, line: 446, baseType: !2941, size: 8, offset: 416)
!2968 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !2929, file: !2930, line: 447, baseType: !2941, size: 8, offset: 424)
!2969 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !2929, file: !2930, line: 448, baseType: !2941, size: 8, offset: 432)
!2970 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !2929, file: !2930, line: 449, baseType: !2941, size: 8, offset: 440)
!2971 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !2929, file: !2930, line: 450, baseType: !2941, size: 8, offset: 448)
!2972 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !2929, file: !2930, line: 451, baseType: !2941, size: 8, offset: 456)
!2973 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !2929, file: !2930, line: 452, baseType: !2941, size: 8, offset: 464)
!2974 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !2929, file: !2930, line: 453, baseType: !2941, size: 8, offset: 472)
!2975 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !2929, file: !2930, line: 454, baseType: !2941, size: 8, offset: 480)
!2976 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !2929, file: !2930, line: 455, baseType: !2941, size: 8, offset: 488)
!2977 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !2929, file: !2930, line: 456, baseType: !2941, size: 8, offset: 496)
!2978 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !2929, file: !2930, line: 457, baseType: !2941, size: 8, offset: 504)
!2979 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !2929, file: !2930, line: 458, baseType: !2941, size: 8, offset: 512)
!2980 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !2929, file: !2930, line: 459, baseType: !2941, size: 8, offset: 520)
!2981 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !2929, file: !2930, line: 460, baseType: !2941, size: 8, offset: 528)
!2982 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !2929, file: !2930, line: 461, baseType: !2941, size: 8, offset: 536)
!2983 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !2929, file: !2930, line: 462, baseType: !2941, size: 8, offset: 544)
!2984 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !2929, file: !2930, line: 463, baseType: !2941, size: 8, offset: 552)
!2985 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !2929, file: !2930, line: 464, baseType: !2941, size: 8, offset: 560)
!2986 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !2929, file: !2930, line: 465, baseType: !2941, size: 8, offset: 568)
!2987 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !2929, file: !2930, line: 466, baseType: !2941, size: 8, offset: 576)
!2988 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !2929, file: !2930, line: 467, baseType: !2941, size: 8, offset: 584)
!2989 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !2929, file: !2930, line: 468, baseType: !2941, size: 8, offset: 592)
!2990 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !2929, file: !2930, line: 469, baseType: !2941, size: 8, offset: 600)
!2991 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !2929, file: !2930, line: 470, baseType: !2941, size: 8, offset: 608)
!2992 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !2929, file: !2930, line: 471, baseType: !2941, size: 8, offset: 616)
!2993 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !2929, file: !2930, line: 472, baseType: !2941, size: 8, offset: 624)
!2994 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !2929, file: !2930, line: 473, baseType: !2941, size: 8, offset: 632)
!2995 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !2929, file: !2930, line: 474, baseType: !2941, size: 8, offset: 640)
!2996 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !2929, file: !2930, line: 475, baseType: !2941, size: 8, offset: 648)
!2997 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !2929, file: !2930, line: 476, baseType: !2941, size: 8, offset: 656)
!2998 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !2929, file: !2930, line: 477, baseType: !2941, size: 8, offset: 664)
!2999 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !2929, file: !2930, line: 478, baseType: !2941, size: 8, offset: 672)
!3000 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !2929, file: !2930, line: 479, baseType: !2941, size: 8, offset: 680)
!3001 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !2929, file: !2930, line: 480, baseType: !2941, size: 8, offset: 688)
!3002 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !2929, file: !2930, line: 481, baseType: !2941, size: 8, offset: 696)
!3003 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !2929, file: !2930, line: 482, baseType: !2941, size: 8, offset: 704)
!3004 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !2929, file: !2930, line: 483, baseType: !2941, size: 8, offset: 712)
!3005 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !2929, file: !2930, line: 484, baseType: !2941, size: 8, offset: 720)
!3006 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !2929, file: !2930, line: 485, baseType: !2941, size: 8, offset: 728)
!3007 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !2929, file: !2930, line: 486, baseType: !2941, size: 8, offset: 736)
!3008 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !2929, file: !2930, line: 487, baseType: !2941, size: 8, offset: 744)
!3009 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !2929, file: !2930, line: 488, baseType: !2941, size: 8, offset: 752)
!3010 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !2929, file: !2930, line: 489, baseType: !2941, size: 8, offset: 760)
!3011 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !2929, file: !2930, line: 490, baseType: !2941, size: 8, offset: 768)
!3012 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !2929, file: !2930, line: 491, baseType: !2941, size: 8, offset: 776)
!3013 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !2929, file: !2930, line: 492, baseType: !2941, size: 8, offset: 784)
!3014 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !2929, file: !2930, line: 493, baseType: !2941, size: 8, offset: 792)
!3015 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !2929, file: !2930, line: 494, baseType: !2941, size: 8, offset: 800)
!3016 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !2929, file: !2930, line: 495, baseType: !2941, size: 8, offset: 808)
!3017 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !2929, file: !2930, line: 496, baseType: !2941, size: 8, offset: 816)
!3018 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !2929, file: !2930, line: 497, baseType: !2941, size: 8, offset: 824)
!3019 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !2929, file: !2930, line: 498, baseType: !2941, size: 8, offset: 832)
!3020 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !2929, file: !2930, line: 499, baseType: !2941, size: 8, offset: 840)
!3021 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !2929, file: !2930, line: 500, baseType: !2941, size: 8, offset: 848)
!3022 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !2929, file: !2930, line: 501, baseType: !2941, size: 8, offset: 856)
!3023 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !2929, file: !2930, line: 502, baseType: !2941, size: 8, offset: 864)
!3024 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !2929, file: !2930, line: 503, baseType: !2941, size: 8, offset: 872)
!3025 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !2929, file: !2930, line: 504, baseType: !2941, size: 8, offset: 880)
!3026 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !2929, file: !2930, line: 505, baseType: !2941, size: 8, offset: 888)
!3027 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !2929, file: !2930, line: 506, baseType: !2941, size: 8, offset: 896)
!3028 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !2929, file: !2930, line: 507, baseType: !2941, size: 8, offset: 904)
!3029 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !2929, file: !2930, line: 508, baseType: !2941, size: 8, offset: 912)
!3030 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !2929, file: !2930, line: 509, baseType: !2941, size: 8, offset: 920)
!3031 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !2929, file: !2930, line: 510, baseType: !2941, size: 8, offset: 928)
!3032 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !2929, file: !2930, line: 511, baseType: !2941, size: 8, offset: 936)
!3033 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !2929, file: !2930, line: 512, baseType: !2941, size: 8, offset: 944)
!3034 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !2929, file: !2930, line: 513, baseType: !2941, size: 8, offset: 952)
!3035 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !2929, file: !2930, line: 514, baseType: !2941, size: 8, offset: 960)
!3036 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !2929, file: !2930, line: 515, baseType: !2941, size: 8, offset: 968)
!3037 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !2929, file: !2930, line: 516, baseType: !2941, size: 8, offset: 976)
!3038 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !2929, file: !2930, line: 517, baseType: !2941, size: 8, offset: 984)
!3039 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !2929, file: !2930, line: 518, baseType: !2941, size: 8, offset: 992)
!3040 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !2929, file: !2930, line: 519, baseType: !2941, size: 8, offset: 1000)
!3041 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !2929, file: !2930, line: 520, baseType: !2941, size: 8, offset: 1008)
!3042 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !2929, file: !2930, line: 521, baseType: !2941, size: 8, offset: 1016)
!3043 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !2929, file: !2930, line: 522, baseType: !2941, size: 8, offset: 1024)
!3044 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !2929, file: !2930, line: 523, baseType: !2941, size: 8, offset: 1032)
!3045 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !2929, file: !2930, line: 524, baseType: !2941, size: 8, offset: 1040)
!3046 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !2929, file: !2930, line: 525, baseType: !2941, size: 8, offset: 1048)
!3047 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !2929, file: !2930, line: 526, baseType: !2941, size: 8, offset: 1056)
!3048 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !2929, file: !2930, line: 527, baseType: !2941, size: 8, offset: 1064)
!3049 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !2929, file: !2930, line: 528, baseType: !2941, size: 8, offset: 1072)
!3050 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !2929, file: !2930, line: 529, baseType: !2941, size: 8, offset: 1080)
!3051 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !2929, file: !2930, line: 530, baseType: !2941, size: 8, offset: 1088)
!3052 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !2929, file: !2930, line: 531, baseType: !2941, size: 8, offset: 1096)
!3053 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !2929, file: !2930, line: 532, baseType: !2941, size: 8, offset: 1104)
!3054 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !2929, file: !2930, line: 533, baseType: !2941, size: 8, offset: 1112)
!3055 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !2929, file: !2930, line: 534, baseType: !2941, size: 8, offset: 1120)
!3056 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !2929, file: !2930, line: 535, baseType: !2941, size: 8, offset: 1128)
!3057 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !2929, file: !2930, line: 536, baseType: !2941, size: 8, offset: 1136)
!3058 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !2929, file: !2930, line: 537, baseType: !2941, size: 8, offset: 1144)
!3059 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !2929, file: !2930, line: 538, baseType: !2941, size: 8, offset: 1152)
!3060 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !2929, file: !2930, line: 539, baseType: !2941, size: 8, offset: 1160)
!3061 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !2929, file: !2930, line: 540, baseType: !2941, size: 8, offset: 1168)
!3062 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !2929, file: !2930, line: 541, baseType: !2941, size: 8, offset: 1176)
!3063 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !2929, file: !2930, line: 542, baseType: !2941, size: 8, offset: 1184)
!3064 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !2929, file: !2930, line: 543, baseType: !2941, size: 8, offset: 1192)
!3065 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !2929, file: !2930, line: 544, baseType: !2941, size: 8, offset: 1200)
!3066 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !2929, file: !2930, line: 545, baseType: !2941, size: 8, offset: 1208)
!3067 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !2929, file: !2930, line: 546, baseType: !2941, size: 8, offset: 1216)
!3068 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !2929, file: !2930, line: 547, baseType: !2941, size: 8, offset: 1224)
!3069 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !2929, file: !2930, line: 548, baseType: !2941, size: 8, offset: 1232)
!3070 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !2929, file: !2930, line: 549, baseType: !2941, size: 8, offset: 1240)
!3071 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !2929, file: !2930, line: 550, baseType: !2941, size: 8, offset: 1248)
!3072 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !2929, file: !2930, line: 551, baseType: !2941, size: 8, offset: 1256)
!3073 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !2929, file: !2930, line: 552, baseType: !2941, size: 8, offset: 1264)
!3074 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !2929, file: !2930, line: 553, baseType: !2941, size: 8, offset: 1272)
!3075 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !2929, file: !2930, line: 554, baseType: !2941, size: 8, offset: 1280)
!3076 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !2929, file: !2930, line: 555, baseType: !2941, size: 8, offset: 1288)
!3077 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !2929, file: !2930, line: 556, baseType: !2941, size: 8, offset: 1296)
!3078 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !2929, file: !2930, line: 557, baseType: !2941, size: 8, offset: 1304)
!3079 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !2929, file: !2930, line: 558, baseType: !2941, size: 8, offset: 1312)
!3080 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !2929, file: !2930, line: 559, baseType: !2941, size: 8, offset: 1320)
!3081 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !2929, file: !2930, line: 560, baseType: !2941, size: 8, offset: 1328)
!3082 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !2929, file: !2930, line: 561, baseType: !2941, size: 8, offset: 1336)
!3083 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !2929, file: !2930, line: 562, baseType: !2941, size: 8, offset: 1344)
!3084 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !2929, file: !2930, line: 563, baseType: !2941, size: 8, offset: 1352)
!3085 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !2929, file: !2930, line: 564, baseType: !2941, size: 8, offset: 1360)
!3086 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !2929, file: !2930, line: 565, baseType: !2941, size: 8, offset: 1368)
!3087 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !2929, file: !2930, line: 566, baseType: !2941, size: 8, offset: 1376)
!3088 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !2929, file: !2930, line: 567, baseType: !2941, size: 8, offset: 1384)
!3089 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !2929, file: !2930, line: 568, baseType: !2941, size: 8, offset: 1392)
!3090 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !2929, file: !2930, line: 569, baseType: !2941, size: 8, offset: 1400)
!3091 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !2929, file: !2930, line: 570, baseType: !2941, size: 8, offset: 1408)
!3092 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !2929, file: !2930, line: 571, baseType: !2941, size: 8, offset: 1416)
!3093 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !2929, file: !2930, line: 572, baseType: !2941, size: 8, offset: 1424)
!3094 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !2929, file: !2930, line: 573, baseType: !2941, size: 8, offset: 1432)
!3095 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !2929, file: !2930, line: 574, baseType: !2941, size: 8, offset: 1440)
!3096 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !1688, file: !135, line: 3405, baseType: !3097, size: 384)
!3097 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !135, line: 3352, size: 384, elements: !3098)
!3098 = !{!3099, !3100}
!3099 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3097, file: !135, line: 3353, baseType: !1724, size: 192)
!3100 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !3097, file: !135, line: 3356, baseType: !3101, size: 192, offset: 192)
!3101 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !2930, line: 578, size: 192, elements: !3102)
!3102 = !{!3103, !3104, !3105, !3106, !3107, !3108, !3109, !3110, !3111, !3112, !3113}
!3103 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !3101, file: !2930, line: 580, baseType: !1330, size: 32)
!3104 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !3101, file: !2930, line: 581, baseType: !1330, size: 32, offset: 32)
!3105 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !3101, file: !2930, line: 582, baseType: !1330, size: 32, offset: 64)
!3106 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !3101, file: !2930, line: 583, baseType: !1330, size: 32, offset: 96)
!3107 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !3101, file: !2930, line: 584, baseType: !1804, size: 8, offset: 128)
!3108 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !3101, file: !2930, line: 585, baseType: !1804, size: 8, offset: 136)
!3109 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !3101, file: !2930, line: 586, baseType: !1804, size: 8, offset: 144)
!3110 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !3101, file: !2930, line: 587, baseType: !1804, size: 8, offset: 152)
!3111 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !3101, file: !2930, line: 588, baseType: !1804, size: 8, offset: 160)
!3112 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !3101, file: !2930, line: 589, baseType: !1804, size: 8, offset: 168)
!3113 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !3101, file: !2930, line: 590, baseType: !1804, size: 8, offset: 176)
!3114 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3115, size: 64)
!3115 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1688)
!3116 = !DIDerivedType(tag: DW_TAG_typedef, name: "splay_tree_key", file: !3117, line: 62, baseType: !3118)
!3117 = !DIFile(filename: "./include/splay-tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3118 = !DIDerivedType(tag: DW_TAG_typedef, name: "libi_uhostptr_t", file: !3117, line: 41, baseType: !1739)
!3119 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1888, size: 64)
!3120 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3121, size: 64)
!3121 = !DIDerivedType(tag: DW_TAG_typedef, name: "elt_t", file: !3, line: 104, baseType: !3122)
!3122 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_temp_hash_elt", file: !3, line: 100, size: 128, elements: !3123)
!3123 = !{!3124, !3125}
!3124 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !3122, file: !3, line: 102, baseType: !1686, size: 64)
!3125 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !3122, file: !3, line: 103, baseType: !1686, size: 64, offset: 64)
!3126 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3127, size: 64)
!3127 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3121)
!3128 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3129, size: 64)
!3129 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3130)
!3130 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_tree", file: !1619, line: 59, baseType: !3114)
!3131 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3132, size: 64)
!3132 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_heap", file: !135, line: 184, baseType: !3133)
!3133 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_heap", file: !135, line: 184, size: 128, elements: !3134)
!3134 = !{!3135}
!3135 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3133, file: !135, line: 184, baseType: !2573, size: 128)
!3136 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3137, size: 64)
!3137 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimplify_init_ctor_preeval_data", file: !3, line: 3199, size: 128, elements: !3138)
!3138 = !{!3139, !3140}
!3139 = !DIDerivedType(tag: DW_TAG_member, name: "lhs_base_decl", scope: !3137, file: !3, line: 3203, baseType: !1686, size: 64)
!3140 = !DIDerivedType(tag: DW_TAG_member, name: "lhs_alias_set", scope: !3137, file: !3, line: 3206, baseType: !2271, size: 32, offset: 64)
!3141 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3142, size: 64)
!3142 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_heap", file: !385, line: 34, baseType: !3143)
!3143 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_heap", file: !385, line: 34, size: 128, elements: !3144)
!3144 = !{!3145}
!3145 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3143, file: !385, line: 34, baseType: !2641, size: 128)
!3146 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3147, size: 64)
!3147 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimplify_omp_ctx", file: !3, line: 83, size: 320, elements: !3148)
!3148 = !{!3149, !3150, !3188, !3191, !3192, !3193}
!3149 = !DIDerivedType(tag: DW_TAG_member, name: "outer_context", scope: !3147, file: !3, line: 85, baseType: !3146, size: 64)
!3150 = !DIDerivedType(tag: DW_TAG_member, name: "variables", scope: !3147, file: !3, line: 86, baseType: !3151, size: 64, offset: 64)
!3151 = !DIDerivedType(tag: DW_TAG_typedef, name: "splay_tree", file: !3117, line: 128, baseType: !3152)
!3152 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3153, size: 64)
!3153 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "splay_tree_s", file: !3117, line: 109, size: 448, elements: !3154)
!3154 = !{!3155, !3165, !3170, !3175, !3180, !3185, !3187}
!3155 = !DIDerivedType(tag: DW_TAG_member, name: "root", scope: !3153, file: !3117, line: 111, baseType: !3156, size: 64)
!3156 = !DIDerivedType(tag: DW_TAG_typedef, name: "splay_tree_node", file: !3117, line: 66, baseType: !3157)
!3157 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3158, size: 64)
!3158 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "splay_tree_node_s", file: !3117, line: 96, size: 256, elements: !3159)
!3159 = !{!3160, !3161, !3163, !3164}
!3160 = !DIDerivedType(tag: DW_TAG_member, name: "key", scope: !3158, file: !3117, line: 98, baseType: !3116, size: 64)
!3161 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !3158, file: !3117, line: 101, baseType: !3162, size: 64, offset: 64)
!3162 = !DIDerivedType(tag: DW_TAG_typedef, name: "splay_tree_value", file: !3117, line: 63, baseType: !3118)
!3163 = !DIDerivedType(tag: DW_TAG_member, name: "left", scope: !3158, file: !3117, line: 104, baseType: !3156, size: 64, offset: 128)
!3164 = !DIDerivedType(tag: DW_TAG_member, name: "right", scope: !3158, file: !3117, line: 105, baseType: !3156, size: 64, offset: 192)
!3165 = !DIDerivedType(tag: DW_TAG_member, name: "comp", scope: !3153, file: !3117, line: 114, baseType: !3166, size: 64, offset: 64)
!3166 = !DIDerivedType(tag: DW_TAG_typedef, name: "splay_tree_compare_fn", file: !3117, line: 70, baseType: !3167)
!3167 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3168, size: 64)
!3168 = !DISubroutineType(types: !3169)
!3169 = !{!1330, !3116, !3116}
!3170 = !DIDerivedType(tag: DW_TAG_member, name: "delete_key", scope: !3153, file: !3117, line: 117, baseType: !3171, size: 64, offset: 128)
!3171 = !DIDerivedType(tag: DW_TAG_typedef, name: "splay_tree_delete_key_fn", file: !3117, line: 74, baseType: !3172)
!3172 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3173, size: 64)
!3173 = !DISubroutineType(types: !3174)
!3174 = !{null, !3116}
!3175 = !DIDerivedType(tag: DW_TAG_member, name: "delete_value", scope: !3153, file: !3117, line: 120, baseType: !3176, size: 64, offset: 192)
!3176 = !DIDerivedType(tag: DW_TAG_typedef, name: "splay_tree_delete_value_fn", file: !3117, line: 78, baseType: !3177)
!3177 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3178, size: 64)
!3178 = !DISubroutineType(types: !3179)
!3179 = !{null, !3162}
!3180 = !DIDerivedType(tag: DW_TAG_member, name: "allocate", scope: !3153, file: !3117, line: 123, baseType: !3181, size: 64, offset: 256)
!3181 = !DIDerivedType(tag: DW_TAG_typedef, name: "splay_tree_allocate_fn", file: !3117, line: 87, baseType: !3182)
!3182 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3183, size: 64)
!3183 = !DISubroutineType(types: !3184)
!3184 = !{!1685, !1330, !1685}
!3185 = !DIDerivedType(tag: DW_TAG_member, name: "deallocate", scope: !3153, file: !3117, line: 124, baseType: !3186, size: 64, offset: 320)
!3186 = !DIDerivedType(tag: DW_TAG_typedef, name: "splay_tree_deallocate_fn", file: !3117, line: 93, baseType: !2563)
!3187 = !DIDerivedType(tag: DW_TAG_member, name: "allocate_data", scope: !3153, file: !3117, line: 125, baseType: !1685, size: 64, offset: 384)
!3188 = !DIDerivedType(tag: DW_TAG_member, name: "privatized_types", scope: !3147, file: !3, line: 87, baseType: !3189, size: 64, offset: 128)
!3189 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3190, size: 64)
!3190 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_set_t", file: !135, line: 5199, flags: DIFlagFwdDecl)
!3191 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !3147, file: !3, line: 88, baseType: !1812, size: 32, offset: 192)
!3192 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !3147, file: !3, line: 89, baseType: !370, size: 32, offset: 224)
!3193 = !DIDerivedType(tag: DW_TAG_member, name: "region_type", scope: !3147, file: !3, line: 90, baseType: !423, size: 32, offset: 256)
!3194 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3195, size: 64)
!3195 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2016)
!3196 = !{!3197, !3211, !0, !3214, !3216, !3218}
!3197 = !DIGlobalVariableExpression(var: !3198, expr: !DIExpression())
!3198 = distinct !DIGlobalVariable(name: "gt_ggc_r_gt_gimplify_h", scope: !2, file: !3199, line: 24, type: !3200, isLocal: false, isDefinition: true)
!3199 = !DIFile(filename: "./gt-gimplify.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3200 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3201, size: 320, elements: !1785)
!3201 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3202)
!3202 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ggc_root_tab", file: !3203, line: 69, size: 320, elements: !3204)
!3203 = !DIFile(filename: "./ggc.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3204 = !{!3205, !3206, !3207, !3208, !3210}
!3205 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3202, file: !3203, line: 70, baseType: !1685, size: 64)
!3206 = !DIDerivedType(tag: DW_TAG_member, name: "nelt", scope: !3202, file: !3203, line: 71, baseType: !2160, size: 64, offset: 64)
!3207 = !DIDerivedType(tag: DW_TAG_member, name: "stride", scope: !3202, file: !3203, line: 72, baseType: !2160, size: 64, offset: 128)
!3208 = !DIDerivedType(tag: DW_TAG_member, name: "cb", scope: !3202, file: !3203, line: 73, baseType: !3209, size: 64, offset: 192)
!3209 = !DIDerivedType(tag: DW_TAG_typedef, name: "gt_pointer_walker", file: !3203, line: 65, baseType: !2538)
!3210 = !DIDerivedType(tag: DW_TAG_member, name: "pchw", scope: !3202, file: !3203, line: 74, baseType: !3209, size: 64, offset: 256)
!3211 = !DIGlobalVariableExpression(var: !3212, expr: !DIExpression())
!3212 = distinct !DIGlobalVariable(name: "gt_pch_rs_gt_gimplify_h", scope: !2, file: !3199, line: 28, type: !3213, isLocal: false, isDefinition: true)
!3213 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3201, size: 640, elements: !1932)
!3214 = !DIGlobalVariableExpression(var: !3215, expr: !DIExpression())
!3215 = distinct !DIGlobalVariable(name: "gimplify_omp_ctxp", scope: !2, file: !3, line: 94, type: !3146, isLocal: true, isDefinition: true)
!3216 = !DIGlobalVariableExpression(var: !3217, expr: !DIExpression())
!3217 = distinct !DIGlobalVariable(name: "tmp_var_id_num", scope: !2, file: !3, line: 436, type: !7, isLocal: true, isDefinition: true)
!3218 = !DIGlobalVariableExpression(var: !3219, expr: !DIExpression())
!3219 = distinct !DIGlobalVariable(name: "nonlocal_vlas", scope: !2, file: !3, line: 1799, type: !3189, isLocal: true, isDefinition: true)
!3220 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3221, size: 64)
!3221 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimplify_ctx", file: !385, line: 980, size: 576, elements: !3222)
!3222 = !{!3223, !3224, !3225, !3226, !3227, !3228, !3229, !3230, !3231, !3232, !3233, !3234}
!3223 = !DIDerivedType(tag: DW_TAG_member, name: "prev_context", scope: !3221, file: !385, line: 982, baseType: !3220, size: 64)
!3224 = !DIDerivedType(tag: DW_TAG_member, name: "bind_expr_stack", scope: !3221, file: !385, line: 984, baseType: !3141, size: 64, offset: 64)
!3225 = !DIDerivedType(tag: DW_TAG_member, name: "temps", scope: !3221, file: !385, line: 985, baseType: !1686, size: 64, offset: 128)
!3226 = !DIDerivedType(tag: DW_TAG_member, name: "conditional_cleanups", scope: !3221, file: !385, line: 986, baseType: !2004, size: 64, offset: 192)
!3227 = !DIDerivedType(tag: DW_TAG_member, name: "exit_label", scope: !3221, file: !385, line: 987, baseType: !1686, size: 64, offset: 256)
!3228 = !DIDerivedType(tag: DW_TAG_member, name: "return_temp", scope: !3221, file: !385, line: 988, baseType: !1686, size: 64, offset: 320)
!3229 = !DIDerivedType(tag: DW_TAG_member, name: "case_labels", scope: !3221, file: !385, line: 990, baseType: !3131, size: 64, offset: 384)
!3230 = !DIDerivedType(tag: DW_TAG_member, name: "temp_htab", scope: !3221, file: !385, line: 992, baseType: !2521, size: 64, offset: 448)
!3231 = !DIDerivedType(tag: DW_TAG_member, name: "conditions", scope: !3221, file: !385, line: 994, baseType: !1330, size: 32, offset: 512)
!3232 = !DIDerivedType(tag: DW_TAG_member, name: "save_stack", scope: !3221, file: !385, line: 995, baseType: !1804, size: 8, offset: 544)
!3233 = !DIDerivedType(tag: DW_TAG_member, name: "into_ssa", scope: !3221, file: !385, line: 996, baseType: !1804, size: 8, offset: 552)
!3234 = !DIDerivedType(tag: DW_TAG_member, name: "allow_rhs_cond_expr", scope: !3221, file: !385, line: 997, baseType: !1804, size: 8, offset: 560)
!3235 = !{i32 7, !"Dwarf Version", i32 4}
!3236 = !{i32 2, !"Debug Info Version", i32 3}
!3237 = !{i32 1, !"wchar_size", i32 4}
!3238 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!3239 = distinct !DISubprogram(name: "mark_addressable", scope: !3, file: !3, line: 112, type: !3240, scopeLine: 113, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!3240 = !DISubroutineType(types: !3241)
!3241 = !{null, !1686}
!3242 = !{}
!3243 = !DILocalVariable(name: "x", arg: 1, scope: !3239, file: !3, line: 112, type: !1686)
!3244 = !DILocation(line: 112, column: 24, scope: !3239)
!3245 = !DILocation(line: 114, column: 3, scope: !3239)
!3246 = !DILocation(line: 114, column: 31, scope: !3239)
!3247 = !DILocation(line: 114, column: 10, scope: !3239)
!3248 = !DILocation(line: 115, column: 9, scope: !3239)
!3249 = !DILocation(line: 115, column: 7, scope: !3239)
!3250 = distinct !{!3250, !3245, !3248}
!3251 = !DILocation(line: 116, column: 7, scope: !3252)
!3252 = distinct !DILexicalBlock(scope: !3239, file: !3, line: 116, column: 7)
!3253 = !DILocation(line: 116, column: 21, scope: !3252)
!3254 = !DILocation(line: 117, column: 7, scope: !3252)
!3255 = !DILocation(line: 117, column: 10, scope: !3252)
!3256 = !DILocation(line: 117, column: 24, scope: !3252)
!3257 = !DILocation(line: 118, column: 7, scope: !3252)
!3258 = !DILocation(line: 118, column: 10, scope: !3252)
!3259 = !DILocation(line: 118, column: 24, scope: !3252)
!3260 = !DILocation(line: 116, column: 7, scope: !3239)
!3261 = !DILocation(line: 119, column: 5, scope: !3252)
!3262 = !DILocation(line: 120, column: 3, scope: !3239)
!3263 = !DILocation(line: 120, column: 24, scope: !3239)
!3264 = !DILocation(line: 121, column: 1, scope: !3239)
!3265 = distinct !DISubprogram(name: "handled_component_p", scope: !135, file: !135, line: 4551, type: !3266, scopeLine: 4552, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!3266 = !DISubroutineType(types: !3267)
!3267 = !{!1804, !3130}
!3268 = !DILocalVariable(name: "t", arg: 1, scope: !3265, file: !135, line: 4551, type: !3130)
!3269 = !DILocation(line: 4551, column: 33, scope: !3265)
!3270 = !DILocation(line: 4553, column: 11, scope: !3265)
!3271 = !DILocation(line: 4553, column: 3, scope: !3265)
!3272 = !DILocation(line: 4562, column: 7, scope: !3273)
!3273 = distinct !DILexicalBlock(scope: !3265, file: !135, line: 4554, column: 5)
!3274 = !DILocation(line: 4565, column: 7, scope: !3273)
!3275 = !DILocation(line: 4567, column: 1, scope: !3265)
!3276 = distinct !DISubprogram(name: "push_gimplify_context", scope: !3, file: !3, line: 201, type: !3277, scopeLine: 202, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!3277 = !DISubroutineType(types: !3278)
!3278 = !{null, !3220}
!3279 = !DILocalVariable(name: "c", arg: 1, scope: !3276, file: !3, line: 201, type: !3220)
!3280 = !DILocation(line: 201, column: 45, scope: !3276)
!3281 = !DILocation(line: 203, column: 11, scope: !3276)
!3282 = !DILocation(line: 203, column: 3, scope: !3276)
!3283 = !DILocation(line: 204, column: 21, scope: !3276)
!3284 = !DILocation(line: 204, column: 3, scope: !3276)
!3285 = !DILocation(line: 204, column: 6, scope: !3276)
!3286 = !DILocation(line: 204, column: 19, scope: !3276)
!3287 = !DILocation(line: 205, column: 19, scope: !3276)
!3288 = !DILocation(line: 205, column: 17, scope: !3276)
!3289 = !DILocation(line: 206, column: 1, scope: !3276)
!3290 = distinct !DISubprogram(name: "pop_gimplify_context", scope: !3, file: !3, line: 215, type: !3291, scopeLine: 216, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!3291 = !DISubroutineType(types: !3292)
!3292 = !{null, !2014}
!3293 = !DILocalVariable(name: "body", arg: 1, scope: !3290, file: !3, line: 215, type: !2014)
!3294 = !DILocation(line: 215, column: 30, scope: !3290)
!3295 = !DILocalVariable(name: "c", scope: !3290, file: !3, line: 217, type: !3220)
!3296 = !DILocation(line: 217, column: 24, scope: !3290)
!3297 = !DILocation(line: 217, column: 28, scope: !3290)
!3298 = !DILocation(line: 219, column: 3, scope: !3290)
!3299 = !DILocation(line: 221, column: 3, scope: !3290)
!3300 = !DILocation(line: 222, column: 19, scope: !3290)
!3301 = !DILocation(line: 222, column: 22, scope: !3290)
!3302 = !DILocation(line: 222, column: 17, scope: !3290)
!3303 = !DILocation(line: 224, column: 7, scope: !3304)
!3304 = distinct !DILexicalBlock(scope: !3290, file: !3, line: 224, column: 7)
!3305 = !DILocation(line: 224, column: 7, scope: !3290)
!3306 = !DILocation(line: 225, column: 19, scope: !3304)
!3307 = !DILocation(line: 225, column: 22, scope: !3304)
!3308 = !DILocation(line: 225, column: 29, scope: !3304)
!3309 = !DILocation(line: 225, column: 5, scope: !3304)
!3310 = !DILocation(line: 227, column: 18, scope: !3304)
!3311 = !DILocation(line: 227, column: 21, scope: !3304)
!3312 = !DILocation(line: 227, column: 5, scope: !3304)
!3313 = !DILocation(line: 229, column: 7, scope: !3314)
!3314 = distinct !DILexicalBlock(scope: !3290, file: !3, line: 229, column: 7)
!3315 = !DILocation(line: 229, column: 10, scope: !3314)
!3316 = !DILocation(line: 229, column: 7, scope: !3290)
!3317 = !DILocation(line: 230, column: 18, scope: !3314)
!3318 = !DILocation(line: 230, column: 21, scope: !3314)
!3319 = !DILocation(line: 230, column: 5, scope: !3314)
!3320 = !DILocation(line: 231, column: 1, scope: !3290)
!3321 = distinct !DISubprogram(name: "VEC_gimple_base_length", scope: !385, file: !385, line: 33, type: !3322, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!3322 = !DISubroutineType(types: !3323)
!3323 = !{!7, !3324}
!3324 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3325, size: 64)
!3325 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2641)
!3326 = !DILocalVariable(name: "vec_", arg: 1, scope: !3321, file: !385, line: 33, type: !3324)
!3327 = !DILocation(line: 33, column: 1, scope: !3321)
!3328 = distinct !DISubprogram(name: "VEC_gimple_heap_free", scope: !385, file: !385, line: 34, type: !3329, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!3329 = !DISubroutineType(types: !3330)
!3330 = !{null, !3331}
!3331 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3141, size: 64)
!3332 = !DILocalVariable(name: "vec_", arg: 1, scope: !3328, file: !385, line: 34, type: !3331)
!3333 = !DILocation(line: 34, column: 1, scope: !3328)
!3334 = !DILocation(line: 34, column: 1, scope: !3335)
!3335 = distinct !DILexicalBlock(scope: !3328, file: !385, line: 34, column: 1)
!3336 = distinct !DISubprogram(name: "declare_vars", scope: !3, file: !3, line: 664, type: !3337, scopeLine: 665, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!3337 = !DISubroutineType(types: !3338)
!3338 = !{null, !1686, !2014, !1804}
!3339 = !DILocalVariable(name: "vars", arg: 1, scope: !3336, file: !3, line: 664, type: !1686)
!3340 = !DILocation(line: 664, column: 20, scope: !3336)
!3341 = !DILocalVariable(name: "scope", arg: 2, scope: !3336, file: !3, line: 664, type: !2014)
!3342 = !DILocation(line: 664, column: 33, scope: !3336)
!3343 = !DILocalVariable(name: "debug_info", arg: 3, scope: !3336, file: !3, line: 664, type: !1804)
!3344 = !DILocation(line: 664, column: 45, scope: !3336)
!3345 = !DILocalVariable(name: "last", scope: !3336, file: !3, line: 666, type: !1686)
!3346 = !DILocation(line: 666, column: 8, scope: !3336)
!3347 = !DILocation(line: 666, column: 15, scope: !3336)
!3348 = !DILocation(line: 667, column: 7, scope: !3349)
!3349 = distinct !DILexicalBlock(scope: !3336, file: !3, line: 667, column: 7)
!3350 = !DILocation(line: 667, column: 7, scope: !3336)
!3351 = !DILocalVariable(name: "temps", scope: !3352, file: !3, line: 669, type: !1686)
!3352 = distinct !DILexicalBlock(scope: !3349, file: !3, line: 668, column: 5)
!3353 = !DILocation(line: 669, column: 12, scope: !3352)
!3354 = !DILocalVariable(name: "block", scope: !3352, file: !3, line: 669, type: !1686)
!3355 = !DILocation(line: 669, column: 19, scope: !3352)
!3356 = !DILocation(line: 671, column: 7, scope: !3352)
!3357 = !DILocation(line: 673, column: 25, scope: !3352)
!3358 = !DILocation(line: 673, column: 15, scope: !3352)
!3359 = !DILocation(line: 673, column: 13, scope: !3352)
!3360 = !DILocation(line: 675, column: 34, scope: !3352)
!3361 = !DILocation(line: 675, column: 15, scope: !3352)
!3362 = !DILocation(line: 675, column: 13, scope: !3352)
!3363 = !DILocation(line: 676, column: 7, scope: !3352)
!3364 = !DILocation(line: 677, column: 12, scope: !3365)
!3365 = distinct !DILexicalBlock(scope: !3352, file: !3, line: 677, column: 11)
!3366 = !DILocation(line: 677, column: 18, scope: !3365)
!3367 = !DILocation(line: 677, column: 22, scope: !3365)
!3368 = !DILocation(line: 677, column: 11, scope: !3352)
!3369 = !DILocation(line: 679, column: 42, scope: !3370)
!3370 = distinct !DILexicalBlock(scope: !3365, file: !3, line: 678, column: 2)
!3371 = !DILocation(line: 679, column: 24, scope: !3370)
!3372 = !DILocation(line: 679, column: 4, scope: !3370)
!3373 = !DILocation(line: 679, column: 22, scope: !3370)
!3374 = !DILocation(line: 680, column: 26, scope: !3370)
!3375 = !DILocation(line: 680, column: 33, scope: !3370)
!3376 = !DILocation(line: 680, column: 4, scope: !3370)
!3377 = !DILocation(line: 681, column: 2, scope: !3370)
!3378 = !DILocation(line: 688, column: 8, scope: !3379)
!3379 = distinct !DILexicalBlock(scope: !3380, file: !3, line: 688, column: 8)
!3380 = distinct !DILexicalBlock(scope: !3365, file: !3, line: 683, column: 2)
!3381 = !DILocation(line: 688, column: 8, scope: !3380)
!3382 = !DILocation(line: 689, column: 36, scope: !3379)
!3383 = !DILocation(line: 689, column: 56, scope: !3379)
!3384 = !DILocation(line: 689, column: 27, scope: !3379)
!3385 = !DILocation(line: 689, column: 6, scope: !3379)
!3386 = !DILocation(line: 689, column: 25, scope: !3379)
!3387 = !DILocation(line: 692, column: 30, scope: !3388)
!3388 = distinct !DILexicalBlock(scope: !3379, file: !3, line: 691, column: 6)
!3389 = !DILocation(line: 693, column: 42, scope: !3388)
!3390 = !DILocation(line: 693, column: 24, scope: !3388)
!3391 = !DILocation(line: 693, column: 50, scope: !3388)
!3392 = !DILocation(line: 693, column: 15, scope: !3388)
!3393 = !DILocation(line: 692, column: 8, scope: !3388)
!3394 = !DILocation(line: 694, column: 29, scope: !3388)
!3395 = !DILocation(line: 694, column: 8, scope: !3388)
!3396 = !DILocation(line: 694, column: 27, scope: !3388)
!3397 = !DILocation(line: 697, column: 5, scope: !3352)
!3398 = !DILocation(line: 698, column: 1, scope: !3336)
!3399 = distinct !DISubprogram(name: "gimple_current_bind_expr", scope: !3, file: !3, line: 248, type: !3400, scopeLine: 249, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!3400 = !DISubroutineType(types: !3401)
!3401 = !{!2014}
!3402 = !DILocation(line: 250, column: 10, scope: !3399)
!3403 = !DILocation(line: 250, column: 3, scope: !3399)
!3404 = distinct !DISubprogram(name: "VEC_gimple_base_last", scope: !385, file: !385, line: 33, type: !3405, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!3405 = !DISubroutineType(types: !3406)
!3406 = !{!2014, !3324}
!3407 = !DILocalVariable(name: "vec_", arg: 1, scope: !3404, file: !385, line: 33, type: !3324)
!3408 = !DILocation(line: 33, column: 1, scope: !3404)
!3409 = !DILocation(line: 0, scope: !3404)
!3410 = distinct !DISubprogram(name: "gimple_bind_expr_stack", scope: !3, file: !3, line: 256, type: !3411, scopeLine: 257, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!3411 = !DISubroutineType(types: !3412)
!3412 = !{!3141}
!3413 = !DILocation(line: 258, column: 10, scope: !3410)
!3414 = !DILocation(line: 258, column: 25, scope: !3410)
!3415 = !DILocation(line: 258, column: 3, scope: !3410)
!3416 = distinct !DISubprogram(name: "append_to_statement_list", scope: !3, file: !3, line: 369, type: !3417, scopeLine: 370, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!3417 = !DISubroutineType(types: !3418)
!3418 = !{null, !1686, !2049}
!3419 = !DILocalVariable(name: "t", arg: 1, scope: !3416, file: !3, line: 369, type: !1686)
!3420 = !DILocation(line: 369, column: 32, scope: !3416)
!3421 = !DILocalVariable(name: "list_p", arg: 2, scope: !3416, file: !3, line: 369, type: !2049)
!3422 = !DILocation(line: 369, column: 41, scope: !3416)
!3423 = !DILocation(line: 371, column: 7, scope: !3424)
!3424 = distinct !DILexicalBlock(scope: !3416, file: !3, line: 371, column: 7)
!3425 = !DILocation(line: 371, column: 9, scope: !3424)
!3426 = !DILocation(line: 371, column: 12, scope: !3424)
!3427 = !DILocation(line: 371, column: 7, scope: !3416)
!3428 = !DILocation(line: 372, column: 33, scope: !3424)
!3429 = !DILocation(line: 372, column: 36, scope: !3424)
!3430 = !DILocation(line: 372, column: 5, scope: !3424)
!3431 = !DILocation(line: 373, column: 1, scope: !3416)
!3432 = distinct !DISubprogram(name: "append_to_statement_list_1", scope: !3, file: !3, line: 346, type: !3417, scopeLine: 347, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!3433 = !DILocalVariable(name: "t", arg: 1, scope: !3432, file: !3, line: 346, type: !1686)
!3434 = !DILocation(line: 346, column: 34, scope: !3432)
!3435 = !DILocalVariable(name: "list_p", arg: 2, scope: !3432, file: !3, line: 346, type: !2049)
!3436 = !DILocation(line: 346, column: 43, scope: !3432)
!3437 = !DILocalVariable(name: "list", scope: !3432, file: !3, line: 348, type: !1686)
!3438 = !DILocation(line: 348, column: 8, scope: !3432)
!3439 = !DILocation(line: 348, column: 16, scope: !3432)
!3440 = !DILocation(line: 348, column: 15, scope: !3432)
!3441 = !DILocalVariable(name: "i", scope: !3432, file: !3, line: 349, type: !3442)
!3442 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree_stmt_iterator", file: !1566, line: 35, baseType: !3443)
!3443 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1566, line: 32, size: 128, elements: !3444)
!3444 = !{!3445, !3446}
!3445 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !3443, file: !1566, line: 33, baseType: !2880, size: 64)
!3446 = !DIDerivedType(tag: DW_TAG_member, name: "container", scope: !3443, file: !1566, line: 34, baseType: !1686, size: 64, offset: 64)
!3447 = !DILocation(line: 349, column: 22, scope: !3432)
!3448 = !DILocation(line: 351, column: 8, scope: !3449)
!3449 = distinct !DILexicalBlock(scope: !3432, file: !3, line: 351, column: 7)
!3450 = !DILocation(line: 351, column: 7, scope: !3432)
!3451 = !DILocation(line: 353, column: 11, scope: !3452)
!3452 = distinct !DILexicalBlock(scope: !3453, file: !3, line: 353, column: 11)
!3453 = distinct !DILexicalBlock(scope: !3449, file: !3, line: 352, column: 5)
!3454 = !DILocation(line: 353, column: 13, scope: !3452)
!3455 = !DILocation(line: 353, column: 16, scope: !3452)
!3456 = !DILocation(line: 353, column: 30, scope: !3452)
!3457 = !DILocation(line: 353, column: 11, scope: !3453)
!3458 = !DILocation(line: 355, column: 14, scope: !3459)
!3459 = distinct !DILexicalBlock(scope: !3452, file: !3, line: 354, column: 2)
!3460 = !DILocation(line: 355, column: 5, scope: !3459)
!3461 = !DILocation(line: 355, column: 12, scope: !3459)
!3462 = !DILocation(line: 356, column: 4, scope: !3459)
!3463 = !DILocation(line: 358, column: 24, scope: !3453)
!3464 = !DILocation(line: 358, column: 22, scope: !3453)
!3465 = !DILocation(line: 358, column: 8, scope: !3453)
!3466 = !DILocation(line: 358, column: 15, scope: !3453)
!3467 = !DILocation(line: 359, column: 5, scope: !3453)
!3468 = !DILocation(line: 361, column: 17, scope: !3432)
!3469 = !DILocation(line: 361, column: 7, scope: !3432)
!3470 = !DILocation(line: 362, column: 23, scope: !3432)
!3471 = !DILocation(line: 362, column: 3, scope: !3432)
!3472 = !DILocation(line: 363, column: 1, scope: !3432)
!3473 = distinct !DISubprogram(name: "append_to_statement_list_force", scope: !3, file: !3, line: 378, type: !3417, scopeLine: 379, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!3474 = !DILocalVariable(name: "t", arg: 1, scope: !3473, file: !3, line: 378, type: !1686)
!3475 = !DILocation(line: 378, column: 38, scope: !3473)
!3476 = !DILocalVariable(name: "list_p", arg: 2, scope: !3473, file: !3, line: 378, type: !2049)
!3477 = !DILocation(line: 378, column: 47, scope: !3473)
!3478 = !DILocation(line: 380, column: 7, scope: !3479)
!3479 = distinct !DILexicalBlock(scope: !3473, file: !3, line: 380, column: 7)
!3480 = !DILocation(line: 380, column: 9, scope: !3479)
!3481 = !DILocation(line: 380, column: 7, scope: !3473)
!3482 = !DILocation(line: 381, column: 33, scope: !3479)
!3483 = !DILocation(line: 381, column: 36, scope: !3479)
!3484 = !DILocation(line: 381, column: 5, scope: !3479)
!3485 = !DILocation(line: 382, column: 1, scope: !3473)
!3486 = distinct !DISubprogram(name: "gimplify_and_add", scope: !3, file: !3, line: 389, type: !3487, scopeLine: 390, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!3487 = !DISubroutineType(types: !3488)
!3488 = !{null, !1686, !3489}
!3489 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2004, size: 64)
!3490 = !DILocalVariable(name: "t", arg: 1, scope: !3486, file: !3, line: 389, type: !1686)
!3491 = !DILocation(line: 389, column: 24, scope: !3486)
!3492 = !DILocalVariable(name: "seq_p", arg: 2, scope: !3486, file: !3, line: 389, type: !3489)
!3493 = !DILocation(line: 389, column: 39, scope: !3486)
!3494 = !DILocation(line: 391, column: 22, scope: !3486)
!3495 = !DILocation(line: 391, column: 3, scope: !3486)
!3496 = !DILocation(line: 392, column: 1, scope: !3486)
!3497 = distinct !DISubprogram(name: "gimplify_stmt", scope: !3, file: !3, line: 5261, type: !3498, scopeLine: 5262, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!3498 = !DISubroutineType(types: !3499)
!3499 = !{!1804, !2049, !3489}
!3500 = !DILocalVariable(name: "stmt_p", arg: 1, scope: !3497, file: !3, line: 5261, type: !2049)
!3501 = !DILocation(line: 5261, column: 22, scope: !3497)
!3502 = !DILocalVariable(name: "seq_p", arg: 2, scope: !3497, file: !3, line: 5261, type: !3489)
!3503 = !DILocation(line: 5261, column: 42, scope: !3497)
!3504 = !DILocalVariable(name: "last", scope: !3497, file: !3, line: 5263, type: !2009)
!3505 = !DILocation(line: 5263, column: 19, scope: !3497)
!3506 = !DILocation(line: 5265, column: 9, scope: !3507)
!3507 = distinct !DILexicalBlock(scope: !3497, file: !3, line: 5265, column: 7)
!3508 = !DILocation(line: 5265, column: 8, scope: !3507)
!3509 = !DILocation(line: 5265, column: 7, scope: !3497)
!3510 = !DILocation(line: 5266, column: 14, scope: !3507)
!3511 = !DILocation(line: 5266, column: 6, scope: !3507)
!3512 = !DILocation(line: 5266, column: 12, scope: !3507)
!3513 = !DILocation(line: 5266, column: 5, scope: !3507)
!3514 = !DILocation(line: 5268, column: 28, scope: !3497)
!3515 = !DILocation(line: 5268, column: 27, scope: !3497)
!3516 = !DILocation(line: 5268, column: 10, scope: !3497)
!3517 = !DILocation(line: 5268, column: 8, scope: !3497)
!3518 = !DILocation(line: 5269, column: 18, scope: !3497)
!3519 = !DILocation(line: 5269, column: 26, scope: !3497)
!3520 = !DILocation(line: 5269, column: 3, scope: !3497)
!3521 = !DILocation(line: 5270, column: 10, scope: !3497)
!3522 = !DILocation(line: 5270, column: 36, scope: !3497)
!3523 = !DILocation(line: 5270, column: 35, scope: !3497)
!3524 = !DILocation(line: 5270, column: 18, scope: !3497)
!3525 = !DILocation(line: 5270, column: 15, scope: !3497)
!3526 = !DILocation(line: 5270, column: 3, scope: !3497)
!3527 = distinct !DISubprogram(name: "create_tmp_var_name", scope: !3, file: !3, line: 439, type: !3528, scopeLine: 440, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!3528 = !DISubroutineType(types: !3529)
!3529 = !{!1686, !1888}
!3530 = !DILocalVariable(name: "prefix", arg: 1, scope: !3527, file: !3, line: 439, type: !1888)
!3531 = !DILocation(line: 439, column: 34, scope: !3527)
!3532 = !DILocalVariable(name: "tmp_name", scope: !3527, file: !3, line: 441, type: !1953)
!3533 = !DILocation(line: 441, column: 9, scope: !3527)
!3534 = !DILocation(line: 443, column: 7, scope: !3535)
!3535 = distinct !DILexicalBlock(scope: !3527, file: !3, line: 443, column: 7)
!3536 = !DILocation(line: 443, column: 7, scope: !3527)
!3537 = !DILocalVariable(name: "preftmp", scope: !3538, file: !3, line: 445, type: !1953)
!3538 = distinct !DILexicalBlock(scope: !3535, file: !3, line: 444, column: 5)
!3539 = !DILocation(line: 445, column: 13, scope: !3538)
!3540 = !DILocation(line: 445, column: 23, scope: !3538)
!3541 = !DILocation(line: 447, column: 22, scope: !3538)
!3542 = !DILocation(line: 447, column: 39, scope: !3538)
!3543 = !DILocation(line: 447, column: 31, scope: !3538)
!3544 = !DILocation(line: 447, column: 7, scope: !3538)
!3545 = !DILocation(line: 448, column: 16, scope: !3538)
!3546 = !DILocation(line: 448, column: 14, scope: !3538)
!3547 = !DILocation(line: 449, column: 5, scope: !3538)
!3548 = !DILocation(line: 451, column: 3, scope: !3527)
!3549 = !DILocalVariable(name: "name_", scope: !3550, file: !3, line: 451, type: !3551)
!3550 = distinct !DILexicalBlock(scope: !3527, file: !3, line: 451, column: 3)
!3551 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1888)
!3552 = !DILocation(line: 451, column: 3, scope: !3550)
!3553 = !DILocalVariable(name: "output_", scope: !3550, file: !3, line: 451, type: !3554)
!3554 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1953)
!3555 = !DILocation(line: 452, column: 26, scope: !3527)
!3556 = !DILocation(line: 452, column: 10, scope: !3527)
!3557 = !DILocation(line: 452, column: 3, scope: !3527)
!3558 = distinct !DISubprogram(name: "remove_suffix", scope: !3, file: !3, line: 420, type: !3559, scopeLine: 421, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!3559 = !DISubroutineType(types: !3560)
!3560 = !{null, !1953, !1330}
!3561 = !DILocalVariable(name: "name", arg: 1, scope: !3558, file: !3, line: 420, type: !1953)
!3562 = !DILocation(line: 420, column: 22, scope: !3558)
!3563 = !DILocalVariable(name: "len", arg: 2, scope: !3558, file: !3, line: 420, type: !1330)
!3564 = !DILocation(line: 420, column: 32, scope: !3558)
!3565 = !DILocalVariable(name: "i", scope: !3558, file: !3, line: 422, type: !1330)
!3566 = !DILocation(line: 422, column: 7, scope: !3558)
!3567 = !DILocation(line: 424, column: 10, scope: !3568)
!3568 = distinct !DILexicalBlock(scope: !3558, file: !3, line: 424, column: 3)
!3569 = !DILocation(line: 424, column: 8, scope: !3568)
!3570 = !DILocation(line: 424, column: 16, scope: !3571)
!3571 = distinct !DILexicalBlock(scope: !3568, file: !3, line: 424, column: 3)
!3572 = !DILocation(line: 424, column: 18, scope: !3571)
!3573 = !DILocation(line: 424, column: 22, scope: !3571)
!3574 = !DILocation(line: 424, column: 25, scope: !3571)
!3575 = !DILocation(line: 424, column: 31, scope: !3571)
!3576 = !DILocation(line: 424, column: 29, scope: !3571)
!3577 = !DILocation(line: 0, scope: !3571)
!3578 = !DILocation(line: 424, column: 3, scope: !3568)
!3579 = !DILocation(line: 426, column: 11, scope: !3580)
!3580 = distinct !DILexicalBlock(scope: !3581, file: !3, line: 426, column: 11)
!3581 = distinct !DILexicalBlock(scope: !3571, file: !3, line: 425, column: 5)
!3582 = !DILocation(line: 426, column: 16, scope: !3580)
!3583 = !DILocation(line: 426, column: 22, scope: !3580)
!3584 = !DILocation(line: 426, column: 20, scope: !3580)
!3585 = !DILocation(line: 426, column: 25, scope: !3580)
!3586 = !DILocation(line: 426, column: 11, scope: !3581)
!3587 = !DILocation(line: 428, column: 4, scope: !3588)
!3588 = distinct !DILexicalBlock(scope: !3580, file: !3, line: 427, column: 2)
!3589 = !DILocation(line: 428, column: 9, scope: !3588)
!3590 = !DILocation(line: 428, column: 15, scope: !3588)
!3591 = !DILocation(line: 428, column: 13, scope: !3588)
!3592 = !DILocation(line: 428, column: 18, scope: !3588)
!3593 = !DILocation(line: 429, column: 4, scope: !3588)
!3594 = !DILocation(line: 431, column: 5, scope: !3581)
!3595 = !DILocation(line: 424, column: 36, scope: !3571)
!3596 = !DILocation(line: 424, column: 3, scope: !3571)
!3597 = distinct !{!3597, !3578, !3598}
!3598 = !DILocation(line: 431, column: 5, scope: !3568)
!3599 = !DILocation(line: 432, column: 1, scope: !3558)
!3600 = distinct !DISubprogram(name: "create_tmp_var_raw", scope: !3, file: !3, line: 460, type: !3601, scopeLine: 461, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!3601 = !DISubroutineType(types: !3602)
!3602 = !{!1686, !1686, !1888}
!3603 = !DILocalVariable(name: "type", arg: 1, scope: !3600, file: !3, line: 460, type: !1686)
!3604 = !DILocation(line: 460, column: 26, scope: !3600)
!3605 = !DILocalVariable(name: "prefix", arg: 2, scope: !3600, file: !3, line: 460, type: !1888)
!3606 = !DILocation(line: 460, column: 44, scope: !3600)
!3607 = !DILocalVariable(name: "tmp_var", scope: !3600, file: !3, line: 462, type: !1686)
!3608 = !DILocation(line: 462, column: 8, scope: !3600)
!3609 = !DILocalVariable(name: "new_type", scope: !3600, file: !3, line: 463, type: !1686)
!3610 = !DILocation(line: 463, column: 8, scope: !3600)
!3611 = !DILocation(line: 466, column: 14, scope: !3600)
!3612 = !DILocation(line: 466, column: 12, scope: !3600)
!3613 = !DILocation(line: 467, column: 32, scope: !3600)
!3614 = !DILocation(line: 467, column: 3, scope: !3600)
!3615 = !DILocation(line: 467, column: 30, scope: !3600)
!3616 = !DILocation(line: 469, column: 13, scope: !3600)
!3617 = !DILocation(line: 469, column: 11, scope: !3600)
!3618 = !DILocation(line: 474, column: 3, scope: !3600)
!3619 = !DILocation(line: 474, column: 29, scope: !3600)
!3620 = !DILocation(line: 476, column: 3, scope: !3600)
!3621 = !DILocation(line: 476, column: 28, scope: !3600)
!3622 = !DILocation(line: 479, column: 3, scope: !3600)
!3623 = !DILocation(line: 479, column: 27, scope: !3600)
!3624 = !DILocation(line: 481, column: 3, scope: !3600)
!3625 = !DILocation(line: 481, column: 27, scope: !3600)
!3626 = !DILocation(line: 482, column: 3, scope: !3600)
!3627 = !DILocation(line: 482, column: 25, scope: !3600)
!3628 = !DILocation(line: 483, column: 3, scope: !3600)
!3629 = !DILocation(line: 483, column: 23, scope: !3600)
!3630 = !DILocation(line: 485, column: 10, scope: !3600)
!3631 = !DILocation(line: 485, column: 3, scope: !3600)
!3632 = distinct !DISubprogram(name: "create_tmp_var", scope: !3, file: !3, line: 494, type: !3601, scopeLine: 495, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!3633 = !DILocalVariable(name: "type", arg: 1, scope: !3632, file: !3, line: 494, type: !1686)
!3634 = !DILocation(line: 494, column: 22, scope: !3632)
!3635 = !DILocalVariable(name: "prefix", arg: 2, scope: !3632, file: !3, line: 494, type: !1888)
!3636 = !DILocation(line: 494, column: 40, scope: !3632)
!3637 = !DILocalVariable(name: "tmp_var", scope: !3632, file: !3, line: 496, type: !1686)
!3638 = !DILocation(line: 496, column: 8, scope: !3632)
!3639 = !DILocation(line: 504, column: 3, scope: !3632)
!3640 = !DILocation(line: 506, column: 33, scope: !3632)
!3641 = !DILocation(line: 506, column: 39, scope: !3632)
!3642 = !DILocation(line: 506, column: 13, scope: !3632)
!3643 = !DILocation(line: 506, column: 11, scope: !3632)
!3644 = !DILocation(line: 507, column: 23, scope: !3632)
!3645 = !DILocation(line: 507, column: 3, scope: !3632)
!3646 = !DILocation(line: 508, column: 10, scope: !3632)
!3647 = !DILocation(line: 508, column: 3, scope: !3632)
!3648 = distinct !DISubprogram(name: "gimple_add_tmp_var", scope: !3, file: !3, line: 725, type: !3240, scopeLine: 726, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!3649 = !DILocalVariable(name: "tmp", arg: 1, scope: !3648, file: !3, line: 725, type: !1686)
!3650 = !DILocation(line: 725, column: 26, scope: !3648)
!3651 = !DILocation(line: 727, column: 3, scope: !3648)
!3652 = !DILocation(line: 732, column: 23, scope: !3653)
!3653 = distinct !DILexicalBlock(scope: !3648, file: !3, line: 732, column: 7)
!3654 = !DILocation(line: 732, column: 8, scope: !3653)
!3655 = !DILocation(line: 732, column: 7, scope: !3648)
!3656 = !DILocation(line: 733, column: 26, scope: !3653)
!3657 = !DILocation(line: 733, column: 5, scope: !3653)
!3658 = !DILocation(line: 735, column: 24, scope: !3648)
!3659 = !DILocation(line: 735, column: 3, scope: !3648)
!3660 = !DILocation(line: 735, column: 22, scope: !3648)
!3661 = !DILocation(line: 736, column: 3, scope: !3648)
!3662 = !DILocation(line: 736, column: 34, scope: !3648)
!3663 = !DILocation(line: 738, column: 7, scope: !3664)
!3664 = distinct !DILexicalBlock(scope: !3648, file: !3, line: 738, column: 7)
!3665 = !DILocation(line: 738, column: 7, scope: !3648)
!3666 = !DILocation(line: 740, column: 26, scope: !3667)
!3667 = distinct !DILexicalBlock(scope: !3664, file: !3, line: 739, column: 5)
!3668 = !DILocation(line: 740, column: 41, scope: !3667)
!3669 = !DILocation(line: 740, column: 7, scope: !3667)
!3670 = !DILocation(line: 740, column: 24, scope: !3667)
!3671 = !DILocation(line: 741, column: 30, scope: !3667)
!3672 = !DILocation(line: 741, column: 7, scope: !3667)
!3673 = !DILocation(line: 741, column: 22, scope: !3667)
!3674 = !DILocation(line: 741, column: 28, scope: !3667)
!3675 = !DILocation(line: 744, column: 11, scope: !3676)
!3676 = distinct !DILexicalBlock(scope: !3667, file: !3, line: 744, column: 11)
!3677 = !DILocation(line: 744, column: 11, scope: !3667)
!3678 = !DILocalVariable(name: "ctx", scope: !3679, file: !3, line: 746, type: !3146)
!3679 = distinct !DILexicalBlock(scope: !3676, file: !3, line: 745, column: 2)
!3680 = !DILocation(line: 746, column: 29, scope: !3679)
!3681 = !DILocation(line: 746, column: 35, scope: !3679)
!3682 = !DILocation(line: 747, column: 4, scope: !3679)
!3683 = !DILocation(line: 747, column: 11, scope: !3679)
!3684 = !DILocation(line: 747, column: 15, scope: !3679)
!3685 = !DILocation(line: 747, column: 18, scope: !3679)
!3686 = !DILocation(line: 747, column: 23, scope: !3679)
!3687 = !DILocation(line: 747, column: 35, scope: !3679)
!3688 = !DILocation(line: 0, scope: !3679)
!3689 = !DILocation(line: 748, column: 12, scope: !3679)
!3690 = !DILocation(line: 748, column: 17, scope: !3679)
!3691 = !DILocation(line: 748, column: 10, scope: !3679)
!3692 = distinct !{!3692, !3682, !3690}
!3693 = !DILocation(line: 749, column: 8, scope: !3694)
!3694 = distinct !DILexicalBlock(scope: !3679, file: !3, line: 749, column: 8)
!3695 = !DILocation(line: 749, column: 8, scope: !3679)
!3696 = !DILocation(line: 750, column: 24, scope: !3694)
!3697 = !DILocation(line: 750, column: 29, scope: !3694)
!3698 = !DILocation(line: 750, column: 6, scope: !3694)
!3699 = !DILocation(line: 751, column: 2, scope: !3679)
!3700 = !DILocation(line: 752, column: 5, scope: !3667)
!3701 = !DILocation(line: 753, column: 12, scope: !3702)
!3702 = distinct !DILexicalBlock(scope: !3664, file: !3, line: 753, column: 12)
!3703 = !DILocation(line: 753, column: 12, scope: !3664)
!3704 = !DILocation(line: 754, column: 18, scope: !3702)
!3705 = !DILocation(line: 754, column: 5, scope: !3702)
!3706 = !DILocalVariable(name: "body_seq", scope: !3707, file: !3, line: 757, type: !2004)
!3707 = distinct !DILexicalBlock(scope: !3702, file: !3, line: 756, column: 5)
!3708 = !DILocation(line: 757, column: 18, scope: !3707)
!3709 = !DILocation(line: 761, column: 31, scope: !3707)
!3710 = !DILocation(line: 761, column: 18, scope: !3707)
!3711 = !DILocation(line: 761, column: 16, scope: !3707)
!3712 = !DILocation(line: 762, column: 21, scope: !3707)
!3713 = !DILocation(line: 762, column: 49, scope: !3707)
!3714 = !DILocation(line: 762, column: 26, scope: !3707)
!3715 = !DILocation(line: 762, column: 7, scope: !3707)
!3716 = !DILocation(line: 764, column: 1, scope: !3648)
!3717 = distinct !DISubprogram(name: "get_formal_tmp_var", scope: !3, file: !3, line: 646, type: !3718, scopeLine: 647, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!3718 = !DISubroutineType(types: !3719)
!3719 = !{!1686, !1686, !3489}
!3720 = !DILocalVariable(name: "val", arg: 1, scope: !3717, file: !3, line: 646, type: !1686)
!3721 = !DILocation(line: 646, column: 26, scope: !3717)
!3722 = !DILocalVariable(name: "pre_p", arg: 2, scope: !3717, file: !3, line: 646, type: !3489)
!3723 = !DILocation(line: 646, column: 43, scope: !3717)
!3724 = !DILocation(line: 648, column: 32, scope: !3717)
!3725 = !DILocation(line: 648, column: 37, scope: !3717)
!3726 = !DILocation(line: 648, column: 10, scope: !3717)
!3727 = !DILocation(line: 648, column: 3, scope: !3717)
!3728 = distinct !DISubprogram(name: "internal_get_tmp_var", scope: !3, file: !3, line: 594, type: !3729, scopeLine: 596, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!3729 = !DISubroutineType(types: !3730)
!3730 = !{!1686, !1686, !3489, !3489, !1804}
!3731 = !DILocalVariable(name: "val", arg: 1, scope: !3728, file: !3, line: 594, type: !1686)
!3732 = !DILocation(line: 594, column: 28, scope: !3728)
!3733 = !DILocalVariable(name: "pre_p", arg: 2, scope: !3728, file: !3, line: 594, type: !3489)
!3734 = !DILocation(line: 594, column: 45, scope: !3728)
!3735 = !DILocalVariable(name: "post_p", arg: 3, scope: !3728, file: !3, line: 594, type: !3489)
!3736 = !DILocation(line: 594, column: 64, scope: !3728)
!3737 = !DILocalVariable(name: "is_formal", arg: 4, scope: !3728, file: !3, line: 595, type: !1804)
!3738 = !DILocation(line: 595, column: 28, scope: !3728)
!3739 = !DILocalVariable(name: "t", scope: !3728, file: !3, line: 597, type: !1686)
!3740 = !DILocation(line: 597, column: 8, scope: !3728)
!3741 = !DILocalVariable(name: "mod", scope: !3728, file: !3, line: 597, type: !1686)
!3742 = !DILocation(line: 597, column: 11, scope: !3728)
!3743 = !DILocation(line: 601, column: 24, scope: !3728)
!3744 = !DILocation(line: 601, column: 31, scope: !3728)
!3745 = !DILocation(line: 601, column: 3, scope: !3728)
!3746 = !DILocation(line: 604, column: 23, scope: !3728)
!3747 = !DILocation(line: 604, column: 28, scope: !3728)
!3748 = !DILocation(line: 604, column: 7, scope: !3728)
!3749 = !DILocation(line: 604, column: 5, scope: !3728)
!3750 = !DILocation(line: 606, column: 7, scope: !3751)
!3751 = distinct !DILexicalBlock(scope: !3728, file: !3, line: 606, column: 7)
!3752 = !DILocation(line: 607, column: 7, scope: !3751)
!3753 = !DILocation(line: 607, column: 11, scope: !3751)
!3754 = !DILocation(line: 607, column: 37, scope: !3751)
!3755 = !DILocation(line: 608, column: 4, scope: !3751)
!3756 = !DILocation(line: 608, column: 7, scope: !3751)
!3757 = !DILocation(line: 608, column: 33, scope: !3751)
!3758 = !DILocation(line: 606, column: 7, scope: !3728)
!3759 = !DILocation(line: 609, column: 5, scope: !3751)
!3760 = !DILocation(line: 609, column: 27, scope: !3751)
!3761 = !DILocation(line: 611, column: 9, scope: !3728)
!3762 = !DILocation(line: 611, column: 7, scope: !3728)
!3763 = !DILocation(line: 613, column: 7, scope: !3764)
!3764 = distinct !DILexicalBlock(scope: !3728, file: !3, line: 613, column: 7)
!3765 = !DILocation(line: 613, column: 7, scope: !3728)
!3766 = !DILocation(line: 614, column: 5, scope: !3764)
!3767 = !DILocation(line: 616, column: 5, scope: !3764)
!3768 = !DILocation(line: 619, column: 21, scope: !3728)
!3769 = !DILocation(line: 619, column: 26, scope: !3728)
!3770 = !DILocation(line: 619, column: 3, scope: !3728)
!3771 = !DILocation(line: 620, column: 13, scope: !3728)
!3772 = !DILocation(line: 620, column: 3, scope: !3728)
!3773 = !DILocation(line: 624, column: 7, scope: !3774)
!3774 = distinct !DILexicalBlock(scope: !3728, file: !3, line: 624, column: 7)
!3775 = !DILocation(line: 624, column: 22, scope: !3774)
!3776 = !DILocation(line: 624, column: 7, scope: !3728)
!3777 = !DILocalVariable(name: "last", scope: !3778, file: !3, line: 626, type: !2014)
!3778 = distinct !DILexicalBlock(scope: !3774, file: !3, line: 625, column: 5)
!3779 = !DILocation(line: 626, column: 14, scope: !3778)
!3780 = !DILocation(line: 626, column: 44, scope: !3778)
!3781 = !DILocation(line: 626, column: 43, scope: !3778)
!3782 = !DILocation(line: 626, column: 21, scope: !3778)
!3783 = !DILocation(line: 627, column: 27, scope: !3778)
!3784 = !DILocation(line: 627, column: 11, scope: !3778)
!3785 = !DILocation(line: 627, column: 9, scope: !3778)
!3786 = !DILocation(line: 628, column: 5, scope: !3778)
!3787 = !DILocation(line: 630, column: 10, scope: !3728)
!3788 = !DILocation(line: 630, column: 3, scope: !3728)
!3789 = distinct !DISubprogram(name: "get_initialized_tmp_var", scope: !3, file: !3, line: 655, type: !3790, scopeLine: 656, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!3790 = !DISubroutineType(types: !3791)
!3791 = !{!1686, !1686, !3489, !3489}
!3792 = !DILocalVariable(name: "val", arg: 1, scope: !3789, file: !3, line: 655, type: !1686)
!3793 = !DILocation(line: 655, column: 31, scope: !3789)
!3794 = !DILocalVariable(name: "pre_p", arg: 2, scope: !3789, file: !3, line: 655, type: !3489)
!3795 = !DILocation(line: 655, column: 48, scope: !3789)
!3796 = !DILocalVariable(name: "post_p", arg: 3, scope: !3789, file: !3, line: 655, type: !3489)
!3797 = !DILocation(line: 655, column: 67, scope: !3789)
!3798 = !DILocation(line: 657, column: 32, scope: !3789)
!3799 = !DILocation(line: 657, column: 37, scope: !3789)
!3800 = !DILocation(line: 657, column: 44, scope: !3789)
!3801 = !DILocation(line: 657, column: 10, scope: !3789)
!3802 = !DILocation(line: 657, column: 3, scope: !3789)
!3803 = distinct !DISubprogram(name: "gimple_code", scope: !385, file: !385, line: 1052, type: !3804, scopeLine: 1053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!3804 = !DISubroutineType(types: !3805)
!3805 = !{!384, !3806}
!3806 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple", file: !1619, line: 60, baseType: !3194)
!3807 = !DILocalVariable(name: "g", arg: 1, scope: !3803, file: !385, line: 1052, type: !3806)
!3808 = !DILocation(line: 1052, column: 27, scope: !3803)
!3809 = !DILocation(line: 1054, column: 10, scope: !3803)
!3810 = !DILocation(line: 1054, column: 13, scope: !3803)
!3811 = !DILocation(line: 1054, column: 20, scope: !3803)
!3812 = !DILocation(line: 1054, column: 3, scope: !3803)
!3813 = distinct !DISubprogram(name: "gimple_bind_block", scope: !385, file: !385, line: 2559, type: !3814, scopeLine: 2560, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!3814 = !DISubroutineType(types: !3815)
!3815 = !{!1686, !3806}
!3816 = !DILocalVariable(name: "gs", arg: 1, scope: !3813, file: !385, line: 2559, type: !3806)
!3817 = !DILocation(line: 2559, column: 33, scope: !3813)
!3818 = !DILocation(line: 2562, column: 10, scope: !3813)
!3819 = !DILocation(line: 2562, column: 14, scope: !3813)
!3820 = !DILocation(line: 2562, column: 26, scope: !3813)
!3821 = !DILocation(line: 2562, column: 3, scope: !3813)
!3822 = distinct !DISubprogram(name: "gimple_bind_vars", scope: !385, file: !385, line: 2485, type: !3814, scopeLine: 2486, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!3823 = !DILocalVariable(name: "gs", arg: 1, scope: !3822, file: !385, line: 2485, type: !3806)
!3824 = !DILocation(line: 2485, column: 32, scope: !3822)
!3825 = !DILocation(line: 2488, column: 10, scope: !3822)
!3826 = !DILocation(line: 2488, column: 14, scope: !3822)
!3827 = !DILocation(line: 2488, column: 26, scope: !3822)
!3828 = !DILocation(line: 2488, column: 3, scope: !3822)
!3829 = distinct !DISubprogram(name: "gimple_bind_set_vars", scope: !385, file: !385, line: 2496, type: !3830, scopeLine: 2497, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!3830 = !DISubroutineType(types: !3831)
!3831 = !{null, !2014, !1686}
!3832 = !DILocalVariable(name: "gs", arg: 1, scope: !3829, file: !385, line: 2496, type: !2014)
!3833 = !DILocation(line: 2496, column: 30, scope: !3829)
!3834 = !DILocalVariable(name: "vars", arg: 2, scope: !3829, file: !385, line: 2496, type: !1686)
!3835 = !DILocation(line: 2496, column: 39, scope: !3829)
!3836 = !DILocation(line: 2499, column: 26, scope: !3829)
!3837 = !DILocation(line: 2499, column: 3, scope: !3829)
!3838 = !DILocation(line: 2499, column: 7, scope: !3829)
!3839 = !DILocation(line: 2499, column: 19, scope: !3829)
!3840 = !DILocation(line: 2499, column: 24, scope: !3829)
!3841 = !DILocation(line: 2500, column: 1, scope: !3829)
!3842 = distinct !DISubprogram(name: "force_constant_size", scope: !3, file: !3, line: 705, type: !3240, scopeLine: 706, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!3843 = !DILocalVariable(name: "var", arg: 1, scope: !3842, file: !3, line: 705, type: !1686)
!3844 = !DILocation(line: 705, column: 27, scope: !3842)
!3845 = !DILocalVariable(name: "max_size", scope: !3842, file: !3, line: 710, type: !1741)
!3846 = !DILocation(line: 710, column: 17, scope: !3842)
!3847 = !DILocation(line: 712, column: 3, scope: !3842)
!3848 = !DILocation(line: 714, column: 37, scope: !3842)
!3849 = !DILocation(line: 714, column: 14, scope: !3842)
!3850 = !DILocation(line: 714, column: 12, scope: !3842)
!3851 = !DILocation(line: 716, column: 3, scope: !3842)
!3852 = !DILocation(line: 719, column: 22, scope: !3842)
!3853 = !DILocation(line: 719, column: 56, scope: !3842)
!3854 = !DILocation(line: 719, column: 7, scope: !3842)
!3855 = !DILocation(line: 718, column: 3, scope: !3842)
!3856 = !DILocation(line: 719, column: 5, scope: !3842)
!3857 = !DILocation(line: 721, column: 22, scope: !3842)
!3858 = !DILocation(line: 721, column: 51, scope: !3842)
!3859 = !DILocation(line: 721, column: 60, scope: !3842)
!3860 = !DILocation(line: 721, column: 7, scope: !3842)
!3861 = !DILocation(line: 720, column: 3, scope: !3842)
!3862 = !DILocation(line: 721, column: 5, scope: !3842)
!3863 = !DILocation(line: 722, column: 1, scope: !3842)
!3864 = distinct !DISubprogram(name: "omp_add_variable", scope: !3, file: !3, line: 5363, type: !3865, scopeLine: 5364, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!3865 = !DISubroutineType(types: !3866)
!3866 = !{null, !3146, !1686, !7}
!3867 = !DILocalVariable(name: "ctx", arg: 1, scope: !3864, file: !3, line: 5363, type: !3146)
!3868 = !DILocation(line: 5363, column: 44, scope: !3864)
!3869 = !DILocalVariable(name: "decl", arg: 2, scope: !3864, file: !3, line: 5363, type: !1686)
!3870 = !DILocation(line: 5363, column: 54, scope: !3864)
!3871 = !DILocalVariable(name: "flags", arg: 3, scope: !3864, file: !3, line: 5363, type: !7)
!3872 = !DILocation(line: 5363, column: 73, scope: !3864)
!3873 = !DILocalVariable(name: "n", scope: !3864, file: !3, line: 5365, type: !3156)
!3874 = !DILocation(line: 5365, column: 19, scope: !3864)
!3875 = !DILocalVariable(name: "nflags", scope: !3864, file: !3, line: 5366, type: !7)
!3876 = !DILocation(line: 5366, column: 16, scope: !3864)
!3877 = !DILocalVariable(name: "t", scope: !3864, file: !3, line: 5367, type: !1686)
!3878 = !DILocation(line: 5367, column: 8, scope: !3864)
!3879 = !DILocation(line: 5369, column: 7, scope: !3880)
!3880 = distinct !DILexicalBlock(scope: !3864, file: !3, line: 5369, column: 7)
!3881 = !DILocation(line: 5369, column: 15, scope: !3880)
!3882 = !DILocation(line: 5369, column: 12, scope: !3880)
!3883 = !DILocation(line: 5369, column: 31, scope: !3880)
!3884 = !DILocation(line: 5369, column: 34, scope: !3880)
!3885 = !DILocation(line: 5369, column: 54, scope: !3880)
!3886 = !DILocation(line: 5369, column: 51, scope: !3880)
!3887 = !DILocation(line: 5369, column: 7, scope: !3864)
!3888 = !DILocation(line: 5370, column: 5, scope: !3880)
!3889 = !DILocation(line: 5374, column: 7, scope: !3890)
!3890 = distinct !DILexicalBlock(scope: !3864, file: !3, line: 5374, column: 7)
!3891 = !DILocation(line: 5375, column: 7, scope: !3890)
!3892 = !DILocation(line: 5375, column: 10, scope: !3890)
!3893 = !DILocation(line: 5374, column: 7, scope: !3864)
!3894 = !DILocation(line: 5376, column: 11, scope: !3890)
!3895 = !DILocation(line: 5376, column: 5, scope: !3890)
!3896 = !DILocation(line: 5378, column: 26, scope: !3864)
!3897 = !DILocation(line: 5378, column: 31, scope: !3864)
!3898 = !DILocation(line: 5378, column: 58, scope: !3864)
!3899 = !DILocation(line: 5378, column: 42, scope: !3864)
!3900 = !DILocation(line: 5378, column: 7, scope: !3864)
!3901 = !DILocation(line: 5378, column: 5, scope: !3864)
!3902 = !DILocation(line: 5379, column: 7, scope: !3903)
!3903 = distinct !DILexicalBlock(scope: !3864, file: !3, line: 5379, column: 7)
!3904 = !DILocation(line: 5379, column: 9, scope: !3903)
!3905 = !DILocation(line: 5379, column: 7, scope: !3864)
!3906 = !DILocation(line: 5383, column: 7, scope: !3907)
!3907 = distinct !DILexicalBlock(scope: !3903, file: !3, line: 5380, column: 5)
!3908 = !DILocation(line: 5386, column: 16, scope: !3907)
!3909 = !DILocation(line: 5386, column: 19, scope: !3907)
!3910 = !DILocation(line: 5386, column: 27, scope: !3907)
!3911 = !DILocation(line: 5386, column: 25, scope: !3907)
!3912 = !DILocation(line: 5386, column: 14, scope: !3907)
!3913 = !DILocation(line: 5387, column: 7, scope: !3907)
!3914 = !DILocation(line: 5389, column: 18, scope: !3907)
!3915 = !DILocation(line: 5389, column: 7, scope: !3907)
!3916 = !DILocation(line: 5389, column: 10, scope: !3907)
!3917 = !DILocation(line: 5389, column: 16, scope: !3907)
!3918 = !DILocation(line: 5390, column: 7, scope: !3907)
!3919 = !DILocation(line: 5396, column: 7, scope: !3920)
!3920 = distinct !DILexicalBlock(scope: !3864, file: !3, line: 5396, column: 7)
!3921 = !DILocation(line: 5396, column: 24, scope: !3920)
!3922 = !DILocation(line: 5396, column: 27, scope: !3920)
!3923 = !DILocation(line: 5396, column: 56, scope: !3920)
!3924 = !DILocation(line: 5396, column: 7, scope: !3864)
!3925 = !DILocation(line: 5402, column: 13, scope: !3926)
!3926 = distinct !DILexicalBlock(scope: !3927, file: !3, line: 5402, column: 11)
!3927 = distinct !DILexicalBlock(scope: !3920, file: !3, line: 5397, column: 5)
!3928 = !DILocation(line: 5402, column: 19, scope: !3926)
!3929 = !DILocation(line: 5402, column: 11, scope: !3927)
!3930 = !DILocation(line: 5404, column: 13, scope: !3931)
!3931 = distinct !DILexicalBlock(scope: !3926, file: !3, line: 5403, column: 2)
!3932 = !DILocation(line: 5404, column: 19, scope: !3931)
!3933 = !DILocation(line: 5404, column: 11, scope: !3931)
!3934 = !DILocation(line: 5405, column: 14, scope: !3931)
!3935 = !DILocation(line: 5405, column: 20, scope: !3931)
!3936 = !DILocation(line: 5405, column: 11, scope: !3931)
!3937 = !DILocation(line: 5406, column: 8, scope: !3931)
!3938 = !DILocation(line: 5406, column: 6, scope: !3931)
!3939 = !DILocation(line: 5407, column: 4, scope: !3931)
!3940 = !DILocation(line: 5408, column: 8, scope: !3931)
!3941 = !DILocation(line: 5408, column: 6, scope: !3931)
!3942 = !DILocation(line: 5409, column: 4, scope: !3931)
!3943 = !DILocation(line: 5410, column: 22, scope: !3931)
!3944 = !DILocation(line: 5410, column: 27, scope: !3931)
!3945 = !DILocation(line: 5410, column: 30, scope: !3931)
!3946 = !DILocation(line: 5410, column: 4, scope: !3931)
!3947 = !DILocation(line: 5411, column: 2, scope: !3931)
!3948 = !DILocation(line: 5415, column: 36, scope: !3927)
!3949 = !DILocation(line: 5415, column: 41, scope: !3927)
!3950 = !DILocation(line: 5415, column: 7, scope: !3927)
!3951 = !DILocation(line: 5416, column: 36, scope: !3927)
!3952 = !DILocation(line: 5416, column: 41, scope: !3927)
!3953 = !DILocation(line: 5416, column: 7, scope: !3927)
!3954 = !DILocation(line: 5417, column: 38, scope: !3927)
!3955 = !DILocation(line: 5417, column: 43, scope: !3927)
!3956 = !DILocation(line: 5417, column: 7, scope: !3927)
!3957 = !DILocation(line: 5422, column: 11, scope: !3958)
!3958 = distinct !DILexicalBlock(scope: !3927, file: !3, line: 5422, column: 11)
!3959 = !DILocation(line: 5422, column: 17, scope: !3958)
!3960 = !DILocation(line: 5422, column: 11, scope: !3927)
!3961 = !DILocation(line: 5424, column: 6, scope: !3958)
!3962 = !DILocation(line: 5424, column: 12, scope: !3958)
!3963 = !DILocation(line: 5424, column: 3, scope: !3958)
!3964 = !DILocation(line: 5423, column: 8, scope: !3958)
!3965 = !DILocation(line: 5423, column: 2, scope: !3958)
!3966 = !DILocation(line: 5433, column: 19, scope: !3967)
!3967 = distinct !DILexicalBlock(scope: !3958, file: !3, line: 5433, column: 16)
!3968 = !DILocation(line: 5433, column: 25, scope: !3967)
!3969 = !DILocation(line: 5433, column: 16, scope: !3958)
!3970 = !DILocation(line: 5434, column: 23, scope: !3967)
!3971 = !DILocation(line: 5434, column: 28, scope: !3967)
!3972 = !DILocation(line: 5434, column: 2, scope: !3967)
!3973 = !DILocation(line: 5435, column: 5, scope: !3927)
!3974 = !DILocation(line: 5436, column: 29, scope: !3975)
!3975 = distinct !DILexicalBlock(scope: !3920, file: !3, line: 5436, column: 12)
!3976 = !DILocation(line: 5436, column: 57, scope: !3975)
!3977 = !DILocation(line: 5436, column: 12, scope: !3975)
!3978 = !DILocation(line: 5436, column: 12, scope: !3920)
!3979 = !DILocation(line: 5438, column: 7, scope: !3980)
!3980 = distinct !DILexicalBlock(scope: !3975, file: !3, line: 5437, column: 5)
!3981 = !DILocation(line: 5439, column: 38, scope: !3980)
!3982 = !DILocation(line: 5439, column: 43, scope: !3980)
!3983 = !DILocation(line: 5439, column: 7, scope: !3980)
!3984 = !DILocation(line: 5443, column: 12, scope: !3985)
!3985 = distinct !DILexicalBlock(scope: !3980, file: !3, line: 5443, column: 11)
!3986 = !DILocation(line: 5443, column: 18, scope: !3985)
!3987 = !DILocation(line: 5443, column: 33, scope: !3985)
!3988 = !DILocation(line: 5443, column: 11, scope: !3980)
!3989 = !DILocation(line: 5445, column: 8, scope: !3990)
!3990 = distinct !DILexicalBlock(scope: !3985, file: !3, line: 5444, column: 2)
!3991 = !DILocation(line: 5445, column: 6, scope: !3990)
!3992 = !DILocation(line: 5446, column: 8, scope: !3993)
!3993 = distinct !DILexicalBlock(scope: !3990, file: !3, line: 5446, column: 8)
!3994 = !DILocation(line: 5446, column: 22, scope: !3993)
!3995 = !DILocation(line: 5446, column: 8, scope: !3990)
!3996 = !DILocation(line: 5447, column: 27, scope: !3993)
!3997 = !DILocation(line: 5447, column: 32, scope: !3993)
!3998 = !DILocation(line: 5447, column: 6, scope: !3993)
!3999 = !DILocation(line: 5448, column: 2, scope: !3990)
!4000 = !DILocation(line: 5449, column: 5, scope: !3980)
!4001 = !DILocation(line: 5451, column: 22, scope: !3864)
!4002 = !DILocation(line: 5451, column: 27, scope: !3864)
!4003 = !DILocation(line: 5451, column: 54, scope: !3864)
!4004 = !DILocation(line: 5451, column: 38, scope: !3864)
!4005 = !DILocation(line: 5451, column: 60, scope: !3864)
!4006 = !DILocation(line: 5451, column: 3, scope: !3864)
!4007 = !DILocation(line: 5452, column: 1, scope: !3864)
!4008 = distinct !DISubprogram(name: "gimple_seq_first_stmt", scope: !385, file: !385, line: 168, type: !4009, scopeLine: 169, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!4009 = !DISubroutineType(types: !4010)
!4010 = !{!2014, !4011}
!4011 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple_seq", file: !1619, line: 67, baseType: !4012)
!4012 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4013, size: 64)
!4013 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2006)
!4014 = !DILocalVariable(name: "s", arg: 1, scope: !4008, file: !385, line: 168, type: !4011)
!4015 = !DILocation(line: 168, column: 41, scope: !4008)
!4016 = !DILocalVariable(name: "n", scope: !4008, file: !385, line: 170, type: !2009)
!4017 = !DILocation(line: 170, column: 19, scope: !4008)
!4018 = !DILocation(line: 170, column: 41, scope: !4008)
!4019 = !DILocation(line: 170, column: 23, scope: !4008)
!4020 = !DILocation(line: 171, column: 11, scope: !4008)
!4021 = !DILocation(line: 171, column: 10, scope: !4008)
!4022 = !DILocation(line: 171, column: 16, scope: !4008)
!4023 = !DILocation(line: 171, column: 19, scope: !4008)
!4024 = !DILocation(line: 171, column: 3, scope: !4008)
!4025 = distinct !DISubprogram(name: "annotate_all_with_location", scope: !3, file: !3, line: 834, type: !4026, scopeLine: 835, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!4026 = !DISubroutineType(types: !4027)
!4027 = !{null, !2004, !1812}
!4028 = !DILocalVariable(name: "stmt_p", arg: 1, scope: !4025, file: !3, line: 834, type: !2004)
!4029 = !DILocation(line: 834, column: 40, scope: !4025)
!4030 = !DILocalVariable(name: "location", arg: 2, scope: !4025, file: !3, line: 834, type: !1812)
!4031 = !DILocation(line: 834, column: 59, scope: !4025)
!4032 = !DILocalVariable(name: "i", scope: !4025, file: !3, line: 836, type: !4033)
!4033 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_stmt_iterator", file: !385, line: 265, baseType: !4034)
!4034 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !385, line: 254, size: 192, elements: !4035)
!4035 = !{!4036, !4037, !4038}
!4036 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !4034, file: !385, line: 257, baseType: !2009, size: 64)
!4037 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !4034, file: !385, line: 263, baseType: !2004, size: 64, offset: 64)
!4038 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !4034, file: !385, line: 264, baseType: !2603, size: 64, offset: 128)
!4039 = !DILocation(line: 836, column: 24, scope: !4025)
!4040 = !DILocation(line: 838, column: 27, scope: !4041)
!4041 = distinct !DILexicalBlock(scope: !4025, file: !3, line: 838, column: 7)
!4042 = !DILocation(line: 838, column: 7, scope: !4041)
!4043 = !DILocation(line: 838, column: 7, scope: !4025)
!4044 = !DILocation(line: 839, column: 5, scope: !4041)
!4045 = !DILocation(line: 841, column: 23, scope: !4046)
!4046 = distinct !DILexicalBlock(scope: !4025, file: !3, line: 841, column: 3)
!4047 = !DILocation(line: 841, column: 12, scope: !4046)
!4048 = !DILocation(line: 841, column: 8, scope: !4046)
!4049 = !DILocation(line: 841, column: 33, scope: !4050)
!4050 = distinct !DILexicalBlock(scope: !4046, file: !3, line: 841, column: 3)
!4051 = !DILocation(line: 841, column: 32, scope: !4050)
!4052 = !DILocation(line: 841, column: 3, scope: !4046)
!4053 = !DILocalVariable(name: "gs", scope: !4054, file: !3, line: 843, type: !2014)
!4054 = distinct !DILexicalBlock(scope: !4050, file: !3, line: 842, column: 5)
!4055 = !DILocation(line: 843, column: 14, scope: !4054)
!4056 = !DILocation(line: 843, column: 19, scope: !4054)
!4057 = !DILocation(line: 844, column: 35, scope: !4054)
!4058 = !DILocation(line: 844, column: 39, scope: !4054)
!4059 = !DILocation(line: 844, column: 7, scope: !4054)
!4060 = !DILocation(line: 845, column: 5, scope: !4054)
!4061 = !DILocation(line: 841, column: 48, scope: !4050)
!4062 = !DILocation(line: 841, column: 3, scope: !4050)
!4063 = distinct !{!4063, !4052, !4064}
!4064 = !DILocation(line: 845, column: 5, scope: !4046)
!4065 = !DILocation(line: 846, column: 1, scope: !4025)
!4066 = distinct !DISubprogram(name: "gimple_seq_empty_p", scope: !385, file: !385, line: 215, type: !4067, scopeLine: 216, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!4067 = !DISubroutineType(types: !4068)
!4068 = !{!1804, !4011}
!4069 = !DILocalVariable(name: "s", arg: 1, scope: !4066, file: !385, line: 215, type: !4011)
!4070 = !DILocation(line: 215, column: 38, scope: !4066)
!4071 = !DILocation(line: 217, column: 10, scope: !4066)
!4072 = !DILocation(line: 217, column: 12, scope: !4066)
!4073 = !DILocation(line: 217, column: 20, scope: !4066)
!4074 = !DILocation(line: 217, column: 23, scope: !4066)
!4075 = !DILocation(line: 217, column: 26, scope: !4066)
!4076 = !DILocation(line: 217, column: 32, scope: !4066)
!4077 = !DILocation(line: 217, column: 3, scope: !4066)
!4078 = distinct !DISubprogram(name: "gsi_start", scope: !385, file: !385, line: 4403, type: !4079, scopeLine: 4404, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!4079 = !DISubroutineType(types: !4080)
!4080 = !{!4033, !2004}
!4081 = !DILocalVariable(name: "seq", arg: 1, scope: !4078, file: !385, line: 4403, type: !2004)
!4082 = !DILocation(line: 4403, column: 23, scope: !4078)
!4083 = !DILocalVariable(name: "i", scope: !4078, file: !385, line: 4405, type: !4033)
!4084 = !DILocation(line: 4405, column: 24, scope: !4078)
!4085 = !DILocation(line: 4407, column: 29, scope: !4078)
!4086 = !DILocation(line: 4407, column: 11, scope: !4078)
!4087 = !DILocation(line: 4407, column: 5, scope: !4078)
!4088 = !DILocation(line: 4407, column: 9, scope: !4078)
!4089 = !DILocation(line: 4408, column: 11, scope: !4078)
!4090 = !DILocation(line: 4408, column: 5, scope: !4078)
!4091 = !DILocation(line: 4408, column: 9, scope: !4078)
!4092 = !DILocation(line: 4409, column: 13, scope: !4078)
!4093 = !DILocation(line: 4409, column: 11, scope: !4078)
!4094 = !DILocation(line: 4409, column: 17, scope: !4078)
!4095 = !DILocation(line: 4409, column: 22, scope: !4078)
!4096 = !DILocation(line: 4409, column: 27, scope: !4078)
!4097 = !DILocation(line: 4409, column: 20, scope: !4078)
!4098 = !DILocation(line: 4409, column: 10, scope: !4078)
!4099 = !DILocation(line: 4409, column: 48, scope: !4078)
!4100 = !DILocation(line: 4409, column: 53, scope: !4078)
!4101 = !DILocation(line: 4409, column: 35, scope: !4078)
!4102 = !DILocation(line: 4409, column: 5, scope: !4078)
!4103 = !DILocation(line: 4409, column: 8, scope: !4078)
!4104 = !DILocation(line: 4411, column: 3, scope: !4078)
!4105 = distinct !DISubprogram(name: "gsi_end_p", scope: !385, file: !385, line: 4467, type: !4106, scopeLine: 4468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!4106 = !DISubroutineType(types: !4107)
!4107 = !{!1804, !4033}
!4108 = !DILocalVariable(name: "i", arg: 1, scope: !4105, file: !385, line: 4467, type: !4033)
!4109 = !DILocation(line: 4467, column: 33, scope: !4105)
!4110 = !DILocation(line: 4469, column: 12, scope: !4105)
!4111 = !DILocation(line: 4469, column: 16, scope: !4105)
!4112 = !DILocation(line: 4469, column: 10, scope: !4105)
!4113 = !DILocation(line: 4469, column: 3, scope: !4105)
!4114 = distinct !DISubprogram(name: "gsi_stmt", scope: !385, file: !385, line: 4501, type: !4115, scopeLine: 4502, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!4115 = !DISubroutineType(types: !4116)
!4116 = !{!2014, !4033}
!4117 = !DILocalVariable(name: "i", arg: 1, scope: !4114, file: !385, line: 4501, type: !4033)
!4118 = !DILocation(line: 4501, column: 32, scope: !4114)
!4119 = !DILocation(line: 4503, column: 12, scope: !4114)
!4120 = !DILocation(line: 4503, column: 17, scope: !4114)
!4121 = !DILocation(line: 4503, column: 3, scope: !4114)
!4122 = distinct !DISubprogram(name: "annotate_one_with_location", scope: !3, file: !3, line: 804, type: !4123, scopeLine: 805, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!4123 = !DISubroutineType(types: !4124)
!4124 = !{null, !2014, !1812}
!4125 = !DILocalVariable(name: "gs", arg: 1, scope: !4122, file: !3, line: 804, type: !2014)
!4126 = !DILocation(line: 804, column: 36, scope: !4122)
!4127 = !DILocalVariable(name: "location", arg: 2, scope: !4122, file: !3, line: 804, type: !1812)
!4128 = !DILocation(line: 804, column: 51, scope: !4122)
!4129 = !DILocation(line: 806, column: 29, scope: !4130)
!4130 = distinct !DILexicalBlock(scope: !4122, file: !3, line: 806, column: 7)
!4131 = !DILocation(line: 806, column: 8, scope: !4130)
!4132 = !DILocation(line: 807, column: 7, scope: !4130)
!4133 = !DILocation(line: 807, column: 42, scope: !4130)
!4134 = !DILocation(line: 807, column: 11, scope: !4130)
!4135 = !DILocation(line: 808, column: 7, scope: !4130)
!4136 = !DILocation(line: 808, column: 35, scope: !4130)
!4137 = !DILocation(line: 808, column: 10, scope: !4130)
!4138 = !DILocation(line: 806, column: 7, scope: !4122)
!4139 = !DILocation(line: 809, column: 26, scope: !4130)
!4140 = !DILocation(line: 809, column: 30, scope: !4130)
!4141 = !DILocation(line: 809, column: 5, scope: !4130)
!4142 = !DILocation(line: 810, column: 1, scope: !4122)
!4143 = distinct !DISubprogram(name: "gsi_next", scope: !385, file: !385, line: 4485, type: !4144, scopeLine: 4486, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!4144 = !DISubroutineType(types: !4145)
!4145 = !{null, !4146}
!4146 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4033, size: 64)
!4147 = !DILocalVariable(name: "i", arg: 1, scope: !4143, file: !385, line: 4485, type: !4146)
!4148 = !DILocation(line: 4485, column: 33, scope: !4143)
!4149 = !DILocation(line: 4487, column: 12, scope: !4143)
!4150 = !DILocation(line: 4487, column: 15, scope: !4143)
!4151 = !DILocation(line: 4487, column: 20, scope: !4143)
!4152 = !DILocation(line: 4487, column: 3, scope: !4143)
!4153 = !DILocation(line: 4487, column: 6, scope: !4143)
!4154 = !DILocation(line: 4487, column: 10, scope: !4143)
!4155 = !DILocation(line: 4488, column: 1, scope: !4143)
!4156 = distinct !DISubprogram(name: "unshare_expr", scope: !3, file: !3, line: 967, type: !4157, scopeLine: 968, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!4157 = !DISubroutineType(types: !4158)
!4158 = !{!1686, !1686}
!4159 = !DILocalVariable(name: "expr", arg: 1, scope: !4156, file: !3, line: 967, type: !1686)
!4160 = !DILocation(line: 967, column: 20, scope: !4156)
!4161 = !DILocation(line: 969, column: 3, scope: !4156)
!4162 = !DILocation(line: 970, column: 10, scope: !4156)
!4163 = !DILocation(line: 970, column: 3, scope: !4156)
!4164 = distinct !DISubprogram(name: "mostly_copy_tree_r", scope: !3, file: !3, line: 855, type: !4165, scopeLine: 856, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!4165 = !DISubroutineType(types: !4166)
!4166 = !{!1686, !2049, !4167, !1685}
!4167 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1330, size: 64)
!4168 = !DILocalVariable(name: "tp", arg: 1, scope: !4164, file: !3, line: 855, type: !2049)
!4169 = !DILocation(line: 855, column: 27, scope: !4164)
!4170 = !DILocalVariable(name: "walk_subtrees", arg: 2, scope: !4164, file: !3, line: 855, type: !4167)
!4171 = !DILocation(line: 855, column: 36, scope: !4164)
!4172 = !DILocalVariable(name: "data", arg: 3, scope: !4164, file: !3, line: 855, type: !1685)
!4173 = !DILocation(line: 855, column: 57, scope: !4164)
!4174 = !DILocalVariable(name: "code", scope: !4164, file: !3, line: 857, type: !134)
!4175 = !DILocation(line: 857, column: 18, scope: !4164)
!4176 = !DILocation(line: 857, column: 25, scope: !4164)
!4177 = !DILocation(line: 859, column: 7, scope: !4178)
!4178 = distinct !DILexicalBlock(scope: !4164, file: !3, line: 859, column: 7)
!4179 = !DILocation(line: 859, column: 30, scope: !4178)
!4180 = !DILocation(line: 860, column: 7, scope: !4178)
!4181 = !DILocation(line: 860, column: 10, scope: !4178)
!4182 = !DILocation(line: 860, column: 33, scope: !4178)
!4183 = !DILocation(line: 861, column: 7, scope: !4178)
!4184 = !DILocation(line: 861, column: 10, scope: !4178)
!4185 = !DILocation(line: 861, column: 33, scope: !4178)
!4186 = !DILocation(line: 862, column: 7, scope: !4178)
!4187 = !DILocation(line: 862, column: 10, scope: !4178)
!4188 = !DILocation(line: 862, column: 15, scope: !4178)
!4189 = !DILocation(line: 862, column: 28, scope: !4178)
!4190 = !DILocation(line: 862, column: 31, scope: !4178)
!4191 = !DILocation(line: 862, column: 36, scope: !4178)
!4192 = !DILocation(line: 866, column: 7, scope: !4178)
!4193 = !DILocation(line: 866, column: 10, scope: !4178)
!4194 = !DILocation(line: 866, column: 15, scope: !4178)
!4195 = !DILocation(line: 859, column: 7, scope: !4164)
!4196 = !DILocation(line: 867, column: 6, scope: !4178)
!4197 = !DILocation(line: 867, column: 20, scope: !4178)
!4198 = !DILocation(line: 867, column: 5, scope: !4178)
!4199 = !DILocation(line: 870, column: 7, scope: !4200)
!4200 = distinct !DILexicalBlock(scope: !4178, file: !3, line: 869, column: 5)
!4201 = !DILocation(line: 871, column: 20, scope: !4200)
!4202 = !DILocation(line: 871, column: 24, scope: !4200)
!4203 = !DILocation(line: 871, column: 39, scope: !4200)
!4204 = !DILocation(line: 871, column: 7, scope: !4200)
!4205 = !DILocation(line: 874, column: 3, scope: !4164)
!4206 = distinct !DISubprogram(name: "voidify_wrapper_expr", scope: !3, file: !3, line: 979, type: !4207, scopeLine: 980, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!4207 = !DISubroutineType(types: !4208)
!4208 = !{!1686, !1686, !1686}
!4209 = !DILocalVariable(name: "wrapper", arg: 1, scope: !4206, file: !3, line: 979, type: !1686)
!4210 = !DILocation(line: 979, column: 28, scope: !4206)
!4211 = !DILocalVariable(name: "temp", arg: 2, scope: !4206, file: !3, line: 979, type: !1686)
!4212 = !DILocation(line: 979, column: 42, scope: !4206)
!4213 = !DILocalVariable(name: "type", scope: !4206, file: !3, line: 981, type: !1686)
!4214 = !DILocation(line: 981, column: 8, scope: !4206)
!4215 = !DILocation(line: 981, column: 15, scope: !4206)
!4216 = !DILocation(line: 982, column: 7, scope: !4217)
!4217 = distinct !DILexicalBlock(scope: !4206, file: !3, line: 982, column: 7)
!4218 = !DILocation(line: 982, column: 12, scope: !4217)
!4219 = !DILocation(line: 982, column: 16, scope: !4217)
!4220 = !DILocation(line: 982, column: 7, scope: !4206)
!4221 = !DILocalVariable(name: "p", scope: !4222, file: !3, line: 984, type: !2049)
!4222 = distinct !DILexicalBlock(scope: !4217, file: !3, line: 983, column: 5)
!4223 = !DILocation(line: 984, column: 13, scope: !4222)
!4224 = !DILocation(line: 988, column: 14, scope: !4225)
!4225 = distinct !DILexicalBlock(scope: !4222, file: !3, line: 988, column: 7)
!4226 = !DILocation(line: 988, column: 12, scope: !4225)
!4227 = !DILocation(line: 988, column: 26, scope: !4228)
!4228 = distinct !DILexicalBlock(scope: !4225, file: !3, line: 988, column: 7)
!4229 = !DILocation(line: 988, column: 28, scope: !4228)
!4230 = !DILocation(line: 988, column: 32, scope: !4228)
!4231 = !DILocation(line: 988, column: 31, scope: !4228)
!4232 = !DILocation(line: 0, scope: !4228)
!4233 = !DILocation(line: 988, column: 7, scope: !4225)
!4234 = !DILocation(line: 990, column: 12, scope: !4235)
!4235 = distinct !DILexicalBlock(scope: !4228, file: !3, line: 989, column: 2)
!4236 = !DILocation(line: 990, column: 4, scope: !4235)
!4237 = !DILocation(line: 993, column: 8, scope: !4238)
!4238 = distinct !DILexicalBlock(scope: !4235, file: !3, line: 991, column: 6)
!4239 = !DILocation(line: 993, column: 31, scope: !4238)
!4240 = !DILocation(line: 994, column: 25, scope: !4238)
!4241 = !DILocation(line: 994, column: 8, scope: !4238)
!4242 = !DILocation(line: 994, column: 23, scope: !4238)
!4243 = !DILocation(line: 996, column: 13, scope: !4238)
!4244 = !DILocation(line: 996, column: 10, scope: !4238)
!4245 = !DILocation(line: 997, column: 8, scope: !4238)
!4246 = !DILocation(line: 1002, column: 8, scope: !4238)
!4247 = !DILocation(line: 1002, column: 31, scope: !4238)
!4248 = !DILocation(line: 1003, column: 25, scope: !4238)
!4249 = !DILocation(line: 1003, column: 8, scope: !4238)
!4250 = !DILocation(line: 1003, column: 23, scope: !4238)
!4251 = !DILocation(line: 1004, column: 13, scope: !4238)
!4252 = !DILocation(line: 1004, column: 10, scope: !4238)
!4253 = !DILocation(line: 1005, column: 8, scope: !4238)
!4254 = !DILocalVariable(name: "i", scope: !4255, file: !3, line: 1009, type: !3442)
!4255 = distinct !DILexicalBlock(scope: !4238, file: !3, line: 1008, column: 8)
!4256 = !DILocation(line: 1009, column: 22, scope: !4255)
!4257 = !DILocation(line: 1009, column: 37, scope: !4255)
!4258 = !DILocation(line: 1009, column: 36, scope: !4255)
!4259 = !DILocation(line: 1009, column: 26, scope: !4255)
!4260 = !DILocation(line: 1010, column: 3, scope: !4255)
!4261 = !DILocation(line: 1010, column: 26, scope: !4255)
!4262 = !DILocation(line: 1011, column: 20, scope: !4255)
!4263 = !DILocation(line: 1011, column: 3, scope: !4255)
!4264 = !DILocation(line: 1011, column: 18, scope: !4255)
!4265 = !DILocation(line: 1012, column: 7, scope: !4255)
!4266 = !DILocation(line: 1012, column: 30, scope: !4255)
!4267 = !DILocation(line: 1012, column: 5, scope: !4255)
!4268 = !DILocation(line: 1014, column: 8, scope: !4238)
!4269 = !DILocation(line: 1018, column: 8, scope: !4238)
!4270 = !DILocation(line: 1018, column: 15, scope: !4271)
!4271 = distinct !DILexicalBlock(scope: !4272, file: !3, line: 1018, column: 8)
!4272 = distinct !DILexicalBlock(scope: !4238, file: !3, line: 1018, column: 8)
!4273 = !DILocation(line: 1018, column: 30, scope: !4271)
!4274 = !DILocation(line: 1018, column: 8, scope: !4272)
!4275 = !DILocation(line: 1020, column: 5, scope: !4276)
!4276 = distinct !DILexicalBlock(scope: !4271, file: !3, line: 1019, column: 3)
!4277 = !DILocation(line: 1020, column: 28, scope: !4276)
!4278 = !DILocation(line: 1021, column: 22, scope: !4276)
!4279 = !DILocation(line: 1021, column: 5, scope: !4276)
!4280 = !DILocation(line: 1021, column: 20, scope: !4276)
!4281 = !DILocation(line: 1022, column: 3, scope: !4276)
!4282 = !DILocation(line: 1018, column: 53, scope: !4271)
!4283 = !DILocation(line: 1018, column: 50, scope: !4271)
!4284 = !DILocation(line: 1018, column: 8, scope: !4271)
!4285 = distinct !{!4285, !4274, !4286}
!4286 = !DILocation(line: 1022, column: 3, scope: !4272)
!4287 = !DILocation(line: 1023, column: 8, scope: !4238)
!4288 = !DILocation(line: 1026, column: 8, scope: !4238)
!4289 = !DILocation(line: 988, column: 7, scope: !4228)
!4290 = distinct !{!4290, !4233, !4291}
!4291 = !DILocation(line: 1028, column: 2, scope: !4225)
!4292 = !DILabel(scope: !4222, name: "out", file: !3, line: 1030)
!4293 = !DILocation(line: 1030, column: 5, scope: !4222)
!4294 = !DILocation(line: 1031, column: 11, scope: !4295)
!4295 = distinct !DILexicalBlock(scope: !4222, file: !3, line: 1031, column: 11)
!4296 = !DILocation(line: 1031, column: 13, scope: !4295)
!4297 = !DILocation(line: 1031, column: 21, scope: !4295)
!4298 = !DILocation(line: 1031, column: 24, scope: !4295)
!4299 = !DILocation(line: 1031, column: 11, scope: !4222)
!4300 = !DILocation(line: 1032, column: 7, scope: !4295)
!4301 = !DILocation(line: 1032, column: 2, scope: !4295)
!4302 = !DILocation(line: 1033, column: 16, scope: !4303)
!4303 = distinct !DILexicalBlock(scope: !4295, file: !3, line: 1033, column: 16)
!4304 = !DILocation(line: 1033, column: 16, scope: !4295)
!4305 = !DILocation(line: 1037, column: 4, scope: !4306)
!4306 = distinct !DILexicalBlock(scope: !4303, file: !3, line: 1034, column: 2)
!4307 = !DILocation(line: 1039, column: 30, scope: !4306)
!4308 = !DILocation(line: 1039, column: 29, scope: !4306)
!4309 = !DILocation(line: 1039, column: 4, scope: !4306)
!4310 = !DILocation(line: 1039, column: 27, scope: !4306)
!4311 = !DILocation(line: 1040, column: 9, scope: !4306)
!4312 = !DILocation(line: 1040, column: 5, scope: !4306)
!4313 = !DILocation(line: 1040, column: 7, scope: !4306)
!4314 = !DILocation(line: 1041, column: 2, scope: !4306)
!4315 = !DILocation(line: 1044, column: 27, scope: !4316)
!4316 = distinct !DILexicalBlock(scope: !4303, file: !3, line: 1043, column: 2)
!4317 = !DILocation(line: 1044, column: 11, scope: !4316)
!4318 = !DILocation(line: 1044, column: 9, scope: !4316)
!4319 = !DILocation(line: 1045, column: 9, scope: !4316)
!4320 = !DILocation(line: 1045, column: 5, scope: !4316)
!4321 = !DILocation(line: 1045, column: 7, scope: !4316)
!4322 = !DILocation(line: 1048, column: 14, scope: !4222)
!4323 = !DILocation(line: 1048, column: 7, scope: !4222)
!4324 = !DILocation(line: 1051, column: 3, scope: !4206)
!4325 = !DILocation(line: 1052, column: 1, scope: !4206)
!4326 = distinct !DISubprogram(name: "tsi_last", scope: !1566, file: !1566, line: 49, type: !4327, scopeLine: 50, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!4327 = !DISubroutineType(types: !4328)
!4328 = !{!3442, !1686}
!4329 = !DILocalVariable(name: "t", arg: 1, scope: !4326, file: !1566, line: 49, type: !1686)
!4330 = !DILocation(line: 49, column: 16, scope: !4326)
!4331 = !DILocalVariable(name: "i", scope: !4326, file: !1566, line: 51, type: !3442)
!4332 = !DILocation(line: 51, column: 22, scope: !4326)
!4333 = !DILocation(line: 53, column: 11, scope: !4326)
!4334 = !DILocation(line: 53, column: 5, scope: !4326)
!4335 = !DILocation(line: 53, column: 9, scope: !4326)
!4336 = !DILocation(line: 54, column: 17, scope: !4326)
!4337 = !DILocation(line: 54, column: 5, scope: !4326)
!4338 = !DILocation(line: 54, column: 15, scope: !4326)
!4339 = !DILocation(line: 56, column: 3, scope: !4326)
!4340 = distinct !DISubprogram(name: "tsi_end_p", scope: !1566, file: !1566, line: 60, type: !4341, scopeLine: 61, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!4341 = !DISubroutineType(types: !4342)
!4342 = !{!1804, !3442}
!4343 = !DILocalVariable(name: "i", arg: 1, scope: !4340, file: !1566, line: 60, type: !3442)
!4344 = !DILocation(line: 60, column: 31, scope: !4340)
!4345 = !DILocation(line: 62, column: 12, scope: !4340)
!4346 = !DILocation(line: 62, column: 16, scope: !4340)
!4347 = !DILocation(line: 62, column: 10, scope: !4340)
!4348 = !DILocation(line: 62, column: 3, scope: !4340)
!4349 = distinct !DISubprogram(name: "tsi_stmt_ptr", scope: !1566, file: !1566, line: 84, type: !4350, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!4350 = !DISubroutineType(types: !4351)
!4351 = !{!2049, !3442}
!4352 = !DILocalVariable(name: "i", arg: 1, scope: !4349, file: !1566, line: 84, type: !3442)
!4353 = !DILocation(line: 84, column: 34, scope: !4349)
!4354 = !DILocation(line: 86, column: 13, scope: !4349)
!4355 = !DILocation(line: 86, column: 18, scope: !4349)
!4356 = !DILocation(line: 86, column: 3, scope: !4349)
!4357 = distinct !DISubprogram(name: "sort_case_labels", scope: !3, file: !3, line: 1418, type: !4358, scopeLine: 1419, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!4358 = !DISubroutineType(types: !4359)
!4359 = !{null, !3131}
!4360 = !DILocalVariable(name: "label_vec", arg: 1, scope: !4357, file: !3, line: 1418, type: !3131)
!4361 = !DILocation(line: 1418, column: 35, scope: !4357)
!4362 = !DILocalVariable(name: "len", scope: !4357, file: !3, line: 1420, type: !2160)
!4363 = !DILocation(line: 1420, column: 10, scope: !4357)
!4364 = !DILocation(line: 1420, column: 16, scope: !4357)
!4365 = !DILocation(line: 1422, column: 15, scope: !4357)
!4366 = !DILocation(line: 1422, column: 46, scope: !4357)
!4367 = !DILocation(line: 1422, column: 3, scope: !4357)
!4368 = !DILocation(line: 1428, column: 1, scope: !4357)
!4369 = distinct !DISubprogram(name: "VEC_tree_base_length", scope: !135, file: !135, line: 182, type: !4370, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!4370 = !DISubroutineType(types: !4371)
!4371 = !{!7, !4372}
!4372 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4373, size: 64)
!4373 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2573)
!4374 = !DILocalVariable(name: "vec_", arg: 1, scope: !4369, file: !135, line: 182, type: !4372)
!4375 = !DILocation(line: 182, column: 1, scope: !4369)
!4376 = distinct !DISubprogram(name: "VEC_tree_base_address", scope: !135, file: !135, line: 182, type: !4377, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!4377 = !DISubroutineType(types: !4378)
!4378 = !{!2049, !4379}
!4379 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2573, size: 64)
!4380 = !DILocalVariable(name: "vec_", arg: 1, scope: !4376, file: !135, line: 182, type: !4379)
!4381 = !DILocation(line: 182, column: 1, scope: !4376)
!4382 = distinct !DISubprogram(name: "compare_case_labels", scope: !3, file: !3, line: 1400, type: !2534, scopeLine: 1401, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!4383 = !DILocalVariable(name: "p1", arg: 1, scope: !4382, file: !3, line: 1400, type: !2321)
!4384 = !DILocation(line: 1400, column: 34, scope: !4382)
!4385 = !DILocalVariable(name: "p2", arg: 2, scope: !4382, file: !3, line: 1400, type: !2321)
!4386 = !DILocation(line: 1400, column: 50, scope: !4382)
!4387 = !DILocalVariable(name: "case1", scope: !4382, file: !3, line: 1402, type: !3129)
!4388 = !DILocation(line: 1402, column: 20, scope: !4382)
!4389 = !DILocation(line: 1402, column: 48, scope: !4382)
!4390 = !DILocation(line: 1402, column: 29, scope: !4382)
!4391 = !DILocation(line: 1402, column: 28, scope: !4382)
!4392 = !DILocalVariable(name: "case2", scope: !4382, file: !3, line: 1403, type: !3129)
!4393 = !DILocation(line: 1403, column: 20, scope: !4382)
!4394 = !DILocation(line: 1403, column: 48, scope: !4382)
!4395 = !DILocation(line: 1403, column: 29, scope: !4382)
!4396 = !DILocation(line: 1403, column: 28, scope: !4382)
!4397 = !DILocation(line: 1406, column: 8, scope: !4398)
!4398 = distinct !DILexicalBlock(scope: !4382, file: !3, line: 1406, column: 7)
!4399 = !DILocation(line: 1406, column: 7, scope: !4382)
!4400 = !DILocation(line: 1407, column: 5, scope: !4398)
!4401 = !DILocation(line: 1408, column: 13, scope: !4402)
!4402 = distinct !DILexicalBlock(scope: !4398, file: !3, line: 1408, column: 12)
!4403 = !DILocation(line: 1408, column: 12, scope: !4398)
!4404 = !DILocation(line: 1409, column: 5, scope: !4402)
!4405 = !DILocation(line: 1411, column: 34, scope: !4402)
!4406 = !DILocation(line: 1411, column: 52, scope: !4402)
!4407 = !DILocation(line: 1411, column: 12, scope: !4402)
!4408 = !DILocation(line: 1411, column: 5, scope: !4402)
!4409 = !DILocation(line: 1412, column: 1, scope: !4382)
!4410 = distinct !DISubprogram(name: "build_and_jump", scope: !3, file: !3, line: 1592, type: !4411, scopeLine: 1593, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!4411 = !DISubroutineType(types: !4412)
!4412 = !{!1686, !2049}
!4413 = !DILocalVariable(name: "label_p", arg: 1, scope: !4410, file: !3, line: 1592, type: !2049)
!4414 = !DILocation(line: 1592, column: 23, scope: !4410)
!4415 = !DILocation(line: 1594, column: 7, scope: !4416)
!4416 = distinct !DILexicalBlock(scope: !4410, file: !3, line: 1594, column: 7)
!4417 = !DILocation(line: 1594, column: 15, scope: !4416)
!4418 = !DILocation(line: 1594, column: 7, scope: !4410)
!4419 = !DILocation(line: 1596, column: 5, scope: !4416)
!4420 = !DILocation(line: 1598, column: 8, scope: !4421)
!4421 = distinct !DILexicalBlock(scope: !4410, file: !3, line: 1598, column: 7)
!4422 = !DILocation(line: 1598, column: 7, scope: !4421)
!4423 = !DILocation(line: 1598, column: 16, scope: !4421)
!4424 = !DILocation(line: 1598, column: 7, scope: !4410)
!4425 = !DILocalVariable(name: "label", scope: !4426, file: !3, line: 1600, type: !1686)
!4426 = distinct !DILexicalBlock(scope: !4421, file: !3, line: 1599, column: 5)
!4427 = !DILocation(line: 1600, column: 12, scope: !4426)
!4428 = !DILocation(line: 1600, column: 20, scope: !4426)
!4429 = !DILocation(line: 1601, column: 18, scope: !4426)
!4430 = !DILocation(line: 1601, column: 8, scope: !4426)
!4431 = !DILocation(line: 1601, column: 16, scope: !4426)
!4432 = !DILocation(line: 1602, column: 5, scope: !4426)
!4433 = !DILocation(line: 1604, column: 10, scope: !4410)
!4434 = !DILocation(line: 1604, column: 3, scope: !4410)
!4435 = !DILocation(line: 1605, column: 1, scope: !4410)
!4436 = distinct !DISubprogram(name: "force_labels_r", scope: !3, file: !3, line: 1628, type: !4165, scopeLine: 1629, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!4437 = !DILocalVariable(name: "tp", arg: 1, scope: !4436, file: !3, line: 1628, type: !2049)
!4438 = !DILocation(line: 1628, column: 23, scope: !4436)
!4439 = !DILocalVariable(name: "walk_subtrees", arg: 2, scope: !4436, file: !3, line: 1628, type: !4167)
!4440 = !DILocation(line: 1628, column: 32, scope: !4436)
!4441 = !DILocalVariable(name: "data", arg: 3, scope: !4436, file: !3, line: 1628, type: !1685)
!4442 = !DILocation(line: 1628, column: 53, scope: !4436)
!4443 = !DILocation(line: 1630, column: 7, scope: !4444)
!4444 = distinct !DILexicalBlock(scope: !4436, file: !3, line: 1630, column: 7)
!4445 = !DILocation(line: 1630, column: 7, scope: !4436)
!4446 = !DILocation(line: 1631, column: 6, scope: !4444)
!4447 = !DILocation(line: 1631, column: 20, scope: !4444)
!4448 = !DILocation(line: 1631, column: 5, scope: !4444)
!4449 = !DILocation(line: 1632, column: 7, scope: !4450)
!4450 = distinct !DILexicalBlock(scope: !4436, file: !3, line: 1632, column: 7)
!4451 = !DILocation(line: 1632, column: 23, scope: !4450)
!4452 = !DILocation(line: 1632, column: 7, scope: !4436)
!4453 = !DILocation(line: 1633, column: 5, scope: !4450)
!4454 = !DILocation(line: 1633, column: 24, scope: !4450)
!4455 = !DILocation(line: 1635, column: 3, scope: !4436)
!4456 = distinct !DISubprogram(name: "gimple_boolify", scope: !3, file: !3, line: 2723, type: !4157, scopeLine: 2724, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!4457 = !DILocalVariable(name: "expr", arg: 1, scope: !4456, file: !3, line: 2723, type: !1686)
!4458 = !DILocation(line: 2723, column: 22, scope: !4456)
!4459 = !DILocalVariable(name: "type", scope: !4456, file: !3, line: 2725, type: !1686)
!4460 = !DILocation(line: 2725, column: 8, scope: !4456)
!4461 = !DILocation(line: 2725, column: 15, scope: !4456)
!4462 = !DILocalVariable(name: "loc", scope: !4456, file: !3, line: 2726, type: !1812)
!4463 = !DILocation(line: 2726, column: 14, scope: !4456)
!4464 = !DILocation(line: 2726, column: 20, scope: !4456)
!4465 = !DILocation(line: 2728, column: 7, scope: !4466)
!4466 = distinct !DILexicalBlock(scope: !4456, file: !3, line: 2728, column: 7)
!4467 = !DILocation(line: 2728, column: 24, scope: !4466)
!4468 = !DILocation(line: 2729, column: 7, scope: !4466)
!4469 = !DILocation(line: 2729, column: 10, scope: !4466)
!4470 = !DILocation(line: 2729, column: 45, scope: !4466)
!4471 = !DILocation(line: 2730, column: 7, scope: !4466)
!4472 = !DILocation(line: 2730, column: 25, scope: !4466)
!4473 = !DILocation(line: 2730, column: 10, scope: !4466)
!4474 = !DILocation(line: 2728, column: 7, scope: !4456)
!4475 = !DILocalVariable(name: "call", scope: !4476, file: !3, line: 2732, type: !1686)
!4476 = distinct !DILexicalBlock(scope: !4466, file: !3, line: 2731, column: 5)
!4477 = !DILocation(line: 2732, column: 12, scope: !4476)
!4478 = !DILocation(line: 2732, column: 19, scope: !4476)
!4479 = !DILocalVariable(name: "fn", scope: !4476, file: !3, line: 2733, type: !1686)
!4480 = !DILocation(line: 2733, column: 12, scope: !4476)
!4481 = !DILocation(line: 2733, column: 36, scope: !4476)
!4482 = !DILocation(line: 2733, column: 17, scope: !4476)
!4483 = !DILocation(line: 2737, column: 11, scope: !4484)
!4484 = distinct !DILexicalBlock(scope: !4476, file: !3, line: 2737, column: 11)
!4485 = !DILocation(line: 2738, column: 4, scope: !4484)
!4486 = !DILocation(line: 2738, column: 7, scope: !4484)
!4487 = !DILocation(line: 2738, column: 32, scope: !4484)
!4488 = !DILocation(line: 2739, column: 4, scope: !4484)
!4489 = !DILocation(line: 2739, column: 7, scope: !4484)
!4490 = !DILocation(line: 2739, column: 31, scope: !4484)
!4491 = !DILocation(line: 2740, column: 4, scope: !4484)
!4492 = !DILocation(line: 2740, column: 7, scope: !4484)
!4493 = !DILocation(line: 2740, column: 30, scope: !4484)
!4494 = !DILocation(line: 2737, column: 11, scope: !4476)
!4495 = !DILocalVariable(name: "arg", scope: !4496, file: !3, line: 2742, type: !1686)
!4496 = distinct !DILexicalBlock(scope: !4484, file: !3, line: 2741, column: 2)
!4497 = !DILocation(line: 2742, column: 9, scope: !4496)
!4498 = !DILocation(line: 2742, column: 15, scope: !4496)
!4499 = !DILocation(line: 2743, column: 8, scope: !4500)
!4500 = distinct !DILexicalBlock(scope: !4496, file: !3, line: 2743, column: 8)
!4501 = !DILocation(line: 2743, column: 8, scope: !4496)
!4502 = !DILocation(line: 2745, column: 12, scope: !4503)
!4503 = distinct !DILexicalBlock(scope: !4504, file: !3, line: 2745, column: 12)
!4504 = distinct !DILexicalBlock(scope: !4500, file: !3, line: 2744, column: 6)
!4505 = !DILocation(line: 2745, column: 28, scope: !4503)
!4506 = !DILocation(line: 2746, column: 5, scope: !4503)
!4507 = !DILocation(line: 2746, column: 8, scope: !4503)
!4508 = !DILocation(line: 2746, column: 27, scope: !4503)
!4509 = !DILocation(line: 2746, column: 24, scope: !4503)
!4510 = !DILocation(line: 2745, column: 12, scope: !4504)
!4511 = !DILocation(line: 2747, column: 9, scope: !4503)
!4512 = !DILocation(line: 2747, column: 7, scope: !4503)
!4513 = !DILocation(line: 2747, column: 3, scope: !4503)
!4514 = !DILocation(line: 2748, column: 27, scope: !4515)
!4515 = distinct !DILexicalBlock(scope: !4504, file: !3, line: 2748, column: 12)
!4516 = !DILocation(line: 2748, column: 12, scope: !4515)
!4517 = !DILocation(line: 2748, column: 12, scope: !4504)
!4518 = !DILocation(line: 2750, column: 27, scope: !4519)
!4519 = distinct !DILexicalBlock(scope: !4515, file: !3, line: 2749, column: 3)
!4520 = !DILocation(line: 2750, column: 11, scope: !4519)
!4521 = !DILocation(line: 2750, column: 9, scope: !4519)
!4522 = !DILocation(line: 2752, column: 27, scope: !4519)
!4523 = !DILocation(line: 2752, column: 32, scope: !4519)
!4524 = !DILocation(line: 2752, column: 50, scope: !4519)
!4525 = !DILocation(line: 2752, column: 9, scope: !4519)
!4526 = !DILocation(line: 2751, column: 5, scope: !4519)
!4527 = !DILocation(line: 2752, column: 7, scope: !4519)
!4528 = !DILocation(line: 2753, column: 3, scope: !4519)
!4529 = !DILocation(line: 2754, column: 6, scope: !4504)
!4530 = !DILocation(line: 2755, column: 2, scope: !4496)
!4531 = !DILocation(line: 2756, column: 5, scope: !4476)
!4532 = !DILocation(line: 2758, column: 7, scope: !4533)
!4533 = distinct !DILexicalBlock(scope: !4456, file: !3, line: 2758, column: 7)
!4534 = !DILocation(line: 2758, column: 24, scope: !4533)
!4535 = !DILocation(line: 2758, column: 7, scope: !4456)
!4536 = !DILocation(line: 2759, column: 12, scope: !4533)
!4537 = !DILocation(line: 2759, column: 5, scope: !4533)
!4538 = !DILocation(line: 2761, column: 11, scope: !4456)
!4539 = !DILocation(line: 2761, column: 3, scope: !4456)
!4540 = !DILocation(line: 2769, column: 48, scope: !4541)
!4541 = distinct !DILexicalBlock(scope: !4456, file: !3, line: 2762, column: 5)
!4542 = !DILocation(line: 2769, column: 32, scope: !4541)
!4543 = !DILocation(line: 2769, column: 7, scope: !4541)
!4544 = !DILocation(line: 2769, column: 30, scope: !4541)
!4545 = !DILocation(line: 2773, column: 48, scope: !4541)
!4546 = !DILocation(line: 2773, column: 32, scope: !4541)
!4547 = !DILocation(line: 2773, column: 7, scope: !4541)
!4548 = !DILocation(line: 2773, column: 30, scope: !4541)
!4549 = !DILocation(line: 2779, column: 26, scope: !4541)
!4550 = !DILocation(line: 2779, column: 7, scope: !4541)
!4551 = !DILocation(line: 2779, column: 24, scope: !4541)
!4552 = !DILocation(line: 2780, column: 14, scope: !4541)
!4553 = !DILocation(line: 2780, column: 7, scope: !4541)
!4554 = !DILocation(line: 2785, column: 32, scope: !4541)
!4555 = !DILocation(line: 2785, column: 37, scope: !4541)
!4556 = !DILocation(line: 2785, column: 56, scope: !4541)
!4557 = !DILocation(line: 2785, column: 14, scope: !4541)
!4558 = !DILocation(line: 2785, column: 7, scope: !4541)
!4559 = !DILocation(line: 2787, column: 1, scope: !4456)
!4560 = distinct !DISubprogram(name: "truth_value_p", scope: !135, file: !135, line: 4919, type: !4561, scopeLine: 4920, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!4561 = !DISubroutineType(types: !4562)
!4562 = !{!1804, !134}
!4563 = !DILocalVariable(name: "code", arg: 1, scope: !4560, file: !135, line: 4919, type: !134)
!4564 = !DILocation(line: 4919, column: 31, scope: !4560)
!4565 = !DILocation(line: 4921, column: 11, scope: !4560)
!4566 = !DILocation(line: 4921, column: 34, scope: !4560)
!4567 = !DILocation(line: 4922, column: 4, scope: !4560)
!4568 = !DILocation(line: 4922, column: 7, scope: !4560)
!4569 = !DILocation(line: 4922, column: 12, scope: !4560)
!4570 = !DILocation(line: 4922, column: 30, scope: !4560)
!4571 = !DILocation(line: 4922, column: 33, scope: !4560)
!4572 = !DILocation(line: 4922, column: 38, scope: !4560)
!4573 = !DILocation(line: 4923, column: 4, scope: !4560)
!4574 = !DILocation(line: 4923, column: 7, scope: !4560)
!4575 = !DILocation(line: 4923, column: 12, scope: !4560)
!4576 = !DILocation(line: 4923, column: 29, scope: !4560)
!4577 = !DILocation(line: 4923, column: 32, scope: !4560)
!4578 = !DILocation(line: 4923, column: 37, scope: !4560)
!4579 = !DILocation(line: 4924, column: 4, scope: !4560)
!4580 = !DILocation(line: 4924, column: 7, scope: !4560)
!4581 = !DILocation(line: 4924, column: 12, scope: !4560)
!4582 = !DILocation(line: 4924, column: 30, scope: !4560)
!4583 = !DILocation(line: 4924, column: 33, scope: !4560)
!4584 = !DILocation(line: 4924, column: 38, scope: !4560)
!4585 = !DILocation(line: 4921, column: 10, scope: !4560)
!4586 = !DILocation(line: 4921, column: 3, scope: !4560)
!4587 = distinct !DISubprogram(name: "rhs_predicate_for", scope: !3, file: !3, line: 3509, type: !4588, scopeLine: 3510, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!4588 = !DISubroutineType(types: !4589)
!4589 = !{!4590, !1686}
!4590 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_predicate", file: !385, line: 953, baseType: !4591)
!4591 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4592, size: 64)
!4592 = !DISubroutineType(types: !4593)
!4593 = !{!1804, !1686}
!4594 = !DILocalVariable(name: "lhs", arg: 1, scope: !4587, file: !3, line: 3509, type: !1686)
!4595 = !DILocation(line: 3509, column: 25, scope: !4587)
!4596 = !DILocation(line: 3511, column: 22, scope: !4597)
!4597 = distinct !DILexicalBlock(scope: !4587, file: !3, line: 3511, column: 7)
!4598 = !DILocation(line: 3511, column: 7, scope: !4597)
!4599 = !DILocation(line: 3511, column: 7, scope: !4587)
!4600 = !DILocation(line: 3512, column: 5, scope: !4597)
!4601 = !DILocation(line: 3514, column: 5, scope: !4597)
!4602 = !DILocation(line: 3515, column: 1, scope: !4587)
!4603 = distinct !DISubprogram(name: "is_gimple_reg_rhs_or_call", scope: !3, file: !3, line: 569, type: !4592, scopeLine: 570, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!4604 = !DILocalVariable(name: "t", arg: 1, scope: !4603, file: !3, line: 569, type: !1686)
!4605 = !DILocation(line: 569, column: 33, scope: !4603)
!4606 = !DILocation(line: 571, column: 33, scope: !4603)
!4607 = !DILocation(line: 571, column: 11, scope: !4603)
!4608 = !DILocation(line: 571, column: 48, scope: !4603)
!4609 = !DILocation(line: 572, column: 4, scope: !4603)
!4610 = !DILocation(line: 572, column: 7, scope: !4603)
!4611 = !DILocation(line: 572, column: 21, scope: !4603)
!4612 = !DILocation(line: 571, column: 10, scope: !4603)
!4613 = !DILocation(line: 571, column: 3, scope: !4603)
!4614 = distinct !DISubprogram(name: "is_gimple_mem_rhs_or_call", scope: !3, file: !3, line: 580, type: !4592, scopeLine: 581, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!4615 = !DILocalVariable(name: "t", arg: 1, scope: !4614, file: !3, line: 580, type: !1686)
!4616 = !DILocation(line: 580, column: 33, scope: !4614)
!4617 = !DILocation(line: 584, column: 27, scope: !4618)
!4618 = distinct !DILexicalBlock(scope: !4614, file: !3, line: 584, column: 7)
!4619 = !DILocation(line: 584, column: 7, scope: !4618)
!4620 = !DILocation(line: 584, column: 7, scope: !4614)
!4621 = !DILocation(line: 585, column: 27, scope: !4618)
!4622 = !DILocation(line: 585, column: 12, scope: !4618)
!4623 = !DILocation(line: 585, column: 5, scope: !4618)
!4624 = !DILocation(line: 587, column: 28, scope: !4618)
!4625 = !DILocation(line: 587, column: 13, scope: !4618)
!4626 = !DILocation(line: 587, column: 31, scope: !4618)
!4627 = !DILocation(line: 587, column: 52, scope: !4618)
!4628 = !DILocation(line: 587, column: 34, scope: !4618)
!4629 = !DILocation(line: 588, column: 6, scope: !4618)
!4630 = !DILocation(line: 588, column: 9, scope: !4618)
!4631 = !DILocation(line: 588, column: 23, scope: !4618)
!4632 = !DILocation(line: 587, column: 12, scope: !4618)
!4633 = !DILocation(line: 587, column: 5, scope: !4618)
!4634 = !DILocation(line: 589, column: 1, scope: !4614)
!4635 = distinct !DISubprogram(name: "gimple_fold_indirect_ref", scope: !3, file: !3, line: 3967, type: !4157, scopeLine: 3968, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!4636 = !DILocalVariable(name: "t", arg: 1, scope: !4635, file: !3, line: 3967, type: !1686)
!4637 = !DILocation(line: 3967, column: 32, scope: !4635)
!4638 = !DILocalVariable(name: "type", scope: !4635, file: !3, line: 3969, type: !1686)
!4639 = !DILocation(line: 3969, column: 8, scope: !4635)
!4640 = !DILocation(line: 3969, column: 15, scope: !4635)
!4641 = !DILocalVariable(name: "sub", scope: !4635, file: !3, line: 3970, type: !1686)
!4642 = !DILocation(line: 3970, column: 8, scope: !4635)
!4643 = !DILocation(line: 3970, column: 14, scope: !4635)
!4644 = !DILocalVariable(name: "subtype", scope: !4635, file: !3, line: 3971, type: !1686)
!4645 = !DILocation(line: 3971, column: 8, scope: !4635)
!4646 = !DILocation(line: 3973, column: 3, scope: !4635)
!4647 = !DILocation(line: 3974, column: 13, scope: !4635)
!4648 = !DILocation(line: 3974, column: 11, scope: !4635)
!4649 = !DILocation(line: 3975, column: 8, scope: !4650)
!4650 = distinct !DILexicalBlock(scope: !4635, file: !3, line: 3975, column: 7)
!4651 = !DILocation(line: 3975, column: 7, scope: !4635)
!4652 = !DILocation(line: 3976, column: 5, scope: !4650)
!4653 = !DILocation(line: 3978, column: 7, scope: !4654)
!4654 = distinct !DILexicalBlock(scope: !4635, file: !3, line: 3978, column: 7)
!4655 = !DILocation(line: 3978, column: 23, scope: !4654)
!4656 = !DILocation(line: 3978, column: 7, scope: !4635)
!4657 = !DILocalVariable(name: "op", scope: !4658, file: !3, line: 3980, type: !1686)
!4658 = distinct !DILexicalBlock(scope: !4654, file: !3, line: 3979, column: 5)
!4659 = !DILocation(line: 3980, column: 12, scope: !4658)
!4660 = !DILocation(line: 3980, column: 17, scope: !4658)
!4661 = !DILocalVariable(name: "optype", scope: !4658, file: !3, line: 3981, type: !1686)
!4662 = !DILocation(line: 3981, column: 12, scope: !4658)
!4663 = !DILocation(line: 3981, column: 21, scope: !4658)
!4664 = !DILocation(line: 3983, column: 38, scope: !4665)
!4665 = distinct !DILexicalBlock(scope: !4658, file: !3, line: 3983, column: 11)
!4666 = !DILocation(line: 3983, column: 44, scope: !4665)
!4667 = !DILocation(line: 3983, column: 11, scope: !4665)
!4668 = !DILocation(line: 3983, column: 11, scope: !4658)
!4669 = !DILocation(line: 3984, column: 16, scope: !4665)
!4670 = !DILocation(line: 3984, column: 9, scope: !4665)
!4671 = !DILocation(line: 3987, column: 11, scope: !4672)
!4672 = distinct !DILexicalBlock(scope: !4658, file: !3, line: 3987, column: 11)
!4673 = !DILocation(line: 3987, column: 30, scope: !4672)
!4674 = !DILocation(line: 3988, column: 4, scope: !4672)
!4675 = !DILocation(line: 3988, column: 7, scope: !4672)
!4676 = !DILocation(line: 3988, column: 50, scope: !4672)
!4677 = !DILocation(line: 3989, column: 4, scope: !4672)
!4678 = !DILocation(line: 3989, column: 34, scope: !4672)
!4679 = !DILocation(line: 3989, column: 40, scope: !4672)
!4680 = !DILocation(line: 3989, column: 7, scope: !4672)
!4681 = !DILocation(line: 3987, column: 11, scope: !4658)
!4682 = !DILocalVariable(name: "type_domain", scope: !4683, file: !3, line: 3991, type: !1686)
!4683 = distinct !DILexicalBlock(scope: !4672, file: !3, line: 3990, column: 8)
!4684 = !DILocation(line: 3991, column: 15, scope: !4683)
!4685 = !DILocation(line: 3991, column: 29, scope: !4683)
!4686 = !DILocalVariable(name: "min_val", scope: !4683, file: !3, line: 3992, type: !1686)
!4687 = !DILocation(line: 3992, column: 15, scope: !4683)
!4688 = !DILocation(line: 3992, column: 25, scope: !4683)
!4689 = !DILocation(line: 3993, column: 14, scope: !4690)
!4690 = distinct !DILexicalBlock(scope: !4683, file: !3, line: 3993, column: 14)
!4691 = !DILocation(line: 3993, column: 26, scope: !4690)
!4692 = !DILocation(line: 3993, column: 29, scope: !4690)
!4693 = !DILocation(line: 3993, column: 14, scope: !4683)
!4694 = !DILocation(line: 3994, column: 22, scope: !4690)
!4695 = !DILocation(line: 3994, column: 20, scope: !4690)
!4696 = !DILocation(line: 3994, column: 12, scope: !4690)
!4697 = !DILocation(line: 3995, column: 7, scope: !4698)
!4698 = distinct !DILexicalBlock(scope: !4683, file: !3, line: 3995, column: 7)
!4699 = !DILocation(line: 3995, column: 27, scope: !4698)
!4700 = !DILocation(line: 3995, column: 7, scope: !4683)
!4701 = !DILocation(line: 3996, column: 12, scope: !4698)
!4702 = !DILocation(line: 3996, column: 5, scope: !4698)
!4703 = !DILocation(line: 3997, column: 8, scope: !4683)
!4704 = !DILocation(line: 3999, column: 16, scope: !4705)
!4705 = distinct !DILexicalBlock(scope: !4672, file: !3, line: 3999, column: 16)
!4706 = !DILocation(line: 3999, column: 35, scope: !4705)
!4707 = !DILocation(line: 4000, column: 16, scope: !4705)
!4708 = !DILocation(line: 4000, column: 46, scope: !4705)
!4709 = !DILocation(line: 4000, column: 52, scope: !4705)
!4710 = !DILocation(line: 4000, column: 19, scope: !4705)
!4711 = !DILocation(line: 3999, column: 16, scope: !4672)
!4712 = !DILocation(line: 4001, column: 16, scope: !4705)
!4713 = !DILocation(line: 4001, column: 9, scope: !4705)
!4714 = !DILocation(line: 4003, column: 16, scope: !4715)
!4715 = distinct !DILexicalBlock(scope: !4705, file: !3, line: 4003, column: 16)
!4716 = !DILocation(line: 4003, column: 35, scope: !4715)
!4717 = !DILocation(line: 4004, column: 16, scope: !4715)
!4718 = !DILocation(line: 4004, column: 46, scope: !4715)
!4719 = !DILocation(line: 4004, column: 52, scope: !4715)
!4720 = !DILocation(line: 4004, column: 19, scope: !4715)
!4721 = !DILocation(line: 4003, column: 16, scope: !4705)
!4722 = !DILocalVariable(name: "part_width", scope: !4723, file: !3, line: 4006, type: !1686)
!4723 = distinct !DILexicalBlock(scope: !4715, file: !3, line: 4005, column: 9)
!4724 = !DILocation(line: 4006, column: 16, scope: !4723)
!4725 = !DILocation(line: 4006, column: 29, scope: !4723)
!4726 = !DILocalVariable(name: "index", scope: !4723, file: !3, line: 4007, type: !1686)
!4727 = !DILocation(line: 4007, column: 16, scope: !4723)
!4728 = !DILocation(line: 4007, column: 24, scope: !4723)
!4729 = !DILocation(line: 4008, column: 18, scope: !4723)
!4730 = !DILocation(line: 4008, column: 11, scope: !4723)
!4731 = !DILocation(line: 4010, column: 5, scope: !4658)
!4732 = !DILocation(line: 4013, column: 7, scope: !4733)
!4733 = distinct !DILexicalBlock(scope: !4635, file: !3, line: 4013, column: 7)
!4734 = !DILocation(line: 4013, column: 23, scope: !4733)
!4735 = !DILocation(line: 4014, column: 7, scope: !4733)
!4736 = !DILocation(line: 4014, column: 10, scope: !4733)
!4737 = !DILocation(line: 4014, column: 44, scope: !4733)
!4738 = !DILocation(line: 4013, column: 7, scope: !4635)
!4739 = !DILocalVariable(name: "op00", scope: !4740, file: !3, line: 4016, type: !1686)
!4740 = distinct !DILexicalBlock(scope: !4733, file: !3, line: 4015, column: 5)
!4741 = !DILocation(line: 4016, column: 12, scope: !4740)
!4742 = !DILocation(line: 4016, column: 19, scope: !4740)
!4743 = !DILocalVariable(name: "op01", scope: !4740, file: !3, line: 4017, type: !1686)
!4744 = !DILocation(line: 4017, column: 12, scope: !4740)
!4745 = !DILocation(line: 4017, column: 19, scope: !4740)
!4746 = !DILocalVariable(name: "op00type", scope: !4740, file: !3, line: 4018, type: !1686)
!4747 = !DILocation(line: 4018, column: 12, scope: !4740)
!4748 = !DILocation(line: 4020, column: 7, scope: !4740)
!4749 = !DILocation(line: 4021, column: 18, scope: !4740)
!4750 = !DILocation(line: 4021, column: 16, scope: !4740)
!4751 = !DILocation(line: 4022, column: 11, scope: !4752)
!4752 = distinct !DILexicalBlock(scope: !4740, file: !3, line: 4022, column: 11)
!4753 = !DILocation(line: 4022, column: 28, scope: !4752)
!4754 = !DILocation(line: 4023, column: 4, scope: !4752)
!4755 = !DILocation(line: 4023, column: 7, scope: !4752)
!4756 = !DILocation(line: 4023, column: 40, scope: !4752)
!4757 = !DILocation(line: 4024, column: 4, scope: !4752)
!4758 = !DILocation(line: 4024, column: 34, scope: !4752)
!4759 = !DILocation(line: 4024, column: 40, scope: !4752)
!4760 = !DILocation(line: 4024, column: 7, scope: !4752)
!4761 = !DILocation(line: 4022, column: 11, scope: !4740)
!4762 = !DILocalVariable(name: "offset", scope: !4763, file: !3, line: 4026, type: !1741)
!4763 = distinct !DILexicalBlock(scope: !4752, file: !3, line: 4025, column: 2)
!4764 = !DILocation(line: 4026, column: 18, scope: !4763)
!4765 = !DILocation(line: 4026, column: 41, scope: !4763)
!4766 = !DILocation(line: 4026, column: 27, scope: !4763)
!4767 = !DILocalVariable(name: "part_width", scope: !4763, file: !3, line: 4027, type: !1686)
!4768 = !DILocation(line: 4027, column: 9, scope: !4763)
!4769 = !DILocation(line: 4027, column: 22, scope: !4763)
!4770 = !DILocalVariable(name: "part_widthi", scope: !4763, file: !3, line: 4028, type: !1739)
!4771 = !DILocation(line: 4028, column: 27, scope: !4763)
!4772 = !DILocation(line: 4029, column: 22, scope: !4763)
!4773 = !DILocation(line: 4029, column: 8, scope: !4763)
!4774 = !DILocation(line: 4029, column: 37, scope: !4763)
!4775 = !DILocalVariable(name: "indexi", scope: !4763, file: !3, line: 4030, type: !1739)
!4776 = !DILocation(line: 4030, column: 27, scope: !4763)
!4777 = !DILocation(line: 4030, column: 36, scope: !4763)
!4778 = !DILocation(line: 4030, column: 43, scope: !4763)
!4779 = !DILocalVariable(name: "index", scope: !4763, file: !3, line: 4031, type: !1686)
!4780 = !DILocation(line: 4031, column: 9, scope: !4763)
!4781 = !DILocation(line: 4031, column: 17, scope: !4763)
!4782 = !DILocation(line: 4032, column: 8, scope: !4783)
!4783 = distinct !DILexicalBlock(scope: !4763, file: !3, line: 4032, column: 8)
!4784 = !DILocation(line: 4032, column: 17, scope: !4783)
!4785 = !DILocation(line: 4032, column: 15, scope: !4783)
!4786 = !DILocation(line: 4033, column: 11, scope: !4783)
!4787 = !DILocation(line: 4033, column: 8, scope: !4783)
!4788 = !DILocation(line: 4032, column: 8, scope: !4763)
!4789 = !DILocation(line: 4034, column: 13, scope: !4783)
!4790 = !DILocation(line: 4034, column: 6, scope: !4783)
!4791 = !DILocation(line: 4036, column: 2, scope: !4763)
!4792 = !DILocation(line: 4037, column: 5, scope: !4740)
!4793 = !DILocation(line: 4040, column: 7, scope: !4794)
!4794 = distinct !DILexicalBlock(scope: !4635, file: !3, line: 4040, column: 7)
!4795 = !DILocation(line: 4040, column: 23, scope: !4794)
!4796 = !DILocation(line: 4041, column: 7, scope: !4794)
!4797 = !DILocation(line: 4041, column: 10, scope: !4794)
!4798 = !DILocation(line: 4041, column: 44, scope: !4794)
!4799 = !DILocation(line: 4040, column: 7, scope: !4635)
!4800 = !DILocalVariable(name: "op00", scope: !4801, file: !3, line: 4043, type: !1686)
!4801 = distinct !DILexicalBlock(scope: !4794, file: !3, line: 4042, column: 5)
!4802 = !DILocation(line: 4043, column: 12, scope: !4801)
!4803 = !DILocation(line: 4043, column: 19, scope: !4801)
!4804 = !DILocalVariable(name: "op01", scope: !4801, file: !3, line: 4044, type: !1686)
!4805 = !DILocation(line: 4044, column: 12, scope: !4801)
!4806 = !DILocation(line: 4044, column: 19, scope: !4801)
!4807 = !DILocalVariable(name: "op00type", scope: !4801, file: !3, line: 4045, type: !1686)
!4808 = !DILocation(line: 4045, column: 12, scope: !4801)
!4809 = !DILocation(line: 4047, column: 7, scope: !4801)
!4810 = !DILocation(line: 4048, column: 18, scope: !4801)
!4811 = !DILocation(line: 4048, column: 16, scope: !4801)
!4812 = !DILocation(line: 4049, column: 11, scope: !4813)
!4813 = distinct !DILexicalBlock(scope: !4801, file: !3, line: 4049, column: 11)
!4814 = !DILocation(line: 4049, column: 28, scope: !4813)
!4815 = !DILocation(line: 4050, column: 4, scope: !4813)
!4816 = !DILocation(line: 4050, column: 7, scope: !4813)
!4817 = !DILocation(line: 4050, column: 40, scope: !4813)
!4818 = !DILocation(line: 4051, column: 4, scope: !4813)
!4819 = !DILocation(line: 4051, column: 34, scope: !4813)
!4820 = !DILocation(line: 4051, column: 40, scope: !4813)
!4821 = !DILocation(line: 4051, column: 7, scope: !4813)
!4822 = !DILocation(line: 4049, column: 11, scope: !4801)
!4823 = !DILocalVariable(name: "size", scope: !4824, file: !3, line: 4053, type: !1686)
!4824 = distinct !DILexicalBlock(scope: !4813, file: !3, line: 4052, column: 2)
!4825 = !DILocation(line: 4053, column: 9, scope: !4824)
!4826 = !DILocation(line: 4053, column: 16, scope: !4824)
!4827 = !DILocation(line: 4054, column: 28, scope: !4828)
!4828 = distinct !DILexicalBlock(scope: !4824, file: !3, line: 4054, column: 8)
!4829 = !DILocation(line: 4054, column: 34, scope: !4828)
!4830 = !DILocation(line: 4054, column: 8, scope: !4828)
!4831 = !DILocation(line: 4054, column: 8, scope: !4824)
!4832 = !DILocation(line: 4055, column: 13, scope: !4828)
!4833 = !DILocation(line: 4055, column: 6, scope: !4828)
!4834 = !DILocation(line: 4056, column: 2, scope: !4824)
!4835 = !DILocation(line: 4057, column: 5, scope: !4801)
!4836 = !DILocation(line: 4060, column: 7, scope: !4837)
!4837 = distinct !DILexicalBlock(scope: !4635, file: !3, line: 4060, column: 7)
!4838 = !DILocation(line: 4060, column: 39, scope: !4837)
!4839 = !DILocation(line: 4061, column: 7, scope: !4837)
!4840 = !DILocation(line: 4061, column: 10, scope: !4837)
!4841 = !DILocation(line: 4061, column: 66, scope: !4837)
!4842 = !DILocation(line: 4062, column: 7, scope: !4837)
!4843 = !DILocation(line: 4062, column: 37, scope: !4837)
!4844 = !DILocation(line: 4062, column: 43, scope: !4837)
!4845 = !DILocation(line: 4062, column: 10, scope: !4837)
!4846 = !DILocation(line: 4060, column: 7, scope: !4635)
!4847 = !DILocalVariable(name: "type_domain", scope: !4848, file: !3, line: 4064, type: !1686)
!4848 = distinct !DILexicalBlock(scope: !4837, file: !3, line: 4063, column: 5)
!4849 = !DILocation(line: 4064, column: 12, scope: !4848)
!4850 = !DILocalVariable(name: "min_val", scope: !4848, file: !3, line: 4065, type: !1686)
!4851 = !DILocation(line: 4065, column: 12, scope: !4848)
!4852 = !DILocation(line: 4065, column: 22, scope: !4848)
!4853 = !DILocalVariable(name: "osub", scope: !4848, file: !3, line: 4066, type: !1686)
!4854 = !DILocation(line: 4066, column: 12, scope: !4848)
!4855 = !DILocation(line: 4066, column: 19, scope: !4848)
!4856 = !DILocation(line: 4067, column: 39, scope: !4848)
!4857 = !DILocation(line: 4067, column: 13, scope: !4848)
!4858 = !DILocation(line: 4067, column: 11, scope: !4848)
!4859 = !DILocation(line: 4068, column: 13, scope: !4860)
!4860 = distinct !DILexicalBlock(scope: !4848, file: !3, line: 4068, column: 11)
!4861 = !DILocation(line: 4068, column: 11, scope: !4848)
!4862 = !DILocation(line: 4069, column: 8, scope: !4860)
!4863 = !DILocation(line: 4069, column: 6, scope: !4860)
!4864 = !DILocation(line: 4069, column: 2, scope: !4860)
!4865 = !DILocation(line: 4070, column: 21, scope: !4848)
!4866 = !DILocation(line: 4070, column: 19, scope: !4848)
!4867 = !DILocation(line: 4071, column: 11, scope: !4868)
!4868 = distinct !DILexicalBlock(scope: !4848, file: !3, line: 4071, column: 11)
!4869 = !DILocation(line: 4071, column: 23, scope: !4868)
!4870 = !DILocation(line: 4071, column: 26, scope: !4868)
!4871 = !DILocation(line: 4071, column: 11, scope: !4848)
!4872 = !DILocation(line: 4072, column: 19, scope: !4868)
!4873 = !DILocation(line: 4072, column: 17, scope: !4868)
!4874 = !DILocation(line: 4072, column: 9, scope: !4868)
!4875 = !DILocation(line: 4073, column: 11, scope: !4876)
!4876 = distinct !DILexicalBlock(scope: !4848, file: !3, line: 4073, column: 11)
!4877 = !DILocation(line: 4073, column: 31, scope: !4876)
!4878 = !DILocation(line: 4073, column: 11, scope: !4848)
!4879 = !DILocation(line: 4074, column: 9, scope: !4876)
!4880 = !DILocation(line: 4074, column: 2, scope: !4876)
!4881 = !DILocation(line: 4075, column: 5, scope: !4848)
!4882 = !DILocation(line: 4077, column: 3, scope: !4635)
!4883 = !DILocation(line: 4078, column: 1, scope: !4635)
!4884 = distinct !DISubprogram(name: "gimple_seq_last", scope: !385, file: !385, line: 178, type: !4885, scopeLine: 179, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!4885 = !DISubroutineType(types: !4886)
!4886 = !{!2009, !4011}
!4887 = !DILocalVariable(name: "s", arg: 1, scope: !4884, file: !385, line: 178, type: !4011)
!4888 = !DILocation(line: 178, column: 35, scope: !4884)
!4889 = !DILocation(line: 180, column: 10, scope: !4884)
!4890 = !DILocation(line: 180, column: 14, scope: !4884)
!4891 = !DILocation(line: 180, column: 17, scope: !4884)
!4892 = !DILocation(line: 180, column: 3, scope: !4884)
!4893 = distinct !DISubprogram(name: "gimplify_expr", scope: !3, file: !3, line: 6448, type: !4894, scopeLine: 6450, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!4894 = !DISubroutineType(types: !4895)
!4895 = !{!1329, !2049, !3489, !3489, !4591, !4896}
!4896 = !DIDerivedType(tag: DW_TAG_typedef, name: "fallback_t", file: !385, line: 971, baseType: !1330)
!4897 = !DILocalVariable(name: "expr_p", arg: 1, scope: !4893, file: !3, line: 6448, type: !2049)
!4898 = !DILocation(line: 6448, column: 22, scope: !4893)
!4899 = !DILocalVariable(name: "pre_p", arg: 2, scope: !4893, file: !3, line: 6448, type: !3489)
!4900 = !DILocation(line: 6448, column: 42, scope: !4893)
!4901 = !DILocalVariable(name: "post_p", arg: 3, scope: !4893, file: !3, line: 6448, type: !3489)
!4902 = !DILocation(line: 6448, column: 61, scope: !4893)
!4903 = !DILocalVariable(name: "gimple_test_f", arg: 4, scope: !4893, file: !3, line: 6449, type: !4591)
!4904 = !DILocation(line: 6449, column: 16, scope: !4893)
!4905 = !DILocalVariable(name: "fallback", arg: 5, scope: !4893, file: !3, line: 6449, type: !4896)
!4906 = !DILocation(line: 6449, column: 50, scope: !4893)
!4907 = !DILocalVariable(name: "tmp", scope: !4893, file: !3, line: 6451, type: !1686)
!4908 = !DILocation(line: 6451, column: 8, scope: !4893)
!4909 = !DILocalVariable(name: "internal_pre", scope: !4893, file: !3, line: 6452, type: !2004)
!4910 = !DILocation(line: 6452, column: 14, scope: !4893)
!4911 = !DILocalVariable(name: "internal_post", scope: !4893, file: !3, line: 6453, type: !2004)
!4912 = !DILocation(line: 6453, column: 14, scope: !4893)
!4913 = !DILocalVariable(name: "save_expr", scope: !4893, file: !3, line: 6454, type: !1686)
!4914 = !DILocation(line: 6454, column: 8, scope: !4893)
!4915 = !DILocalVariable(name: "is_statement", scope: !4893, file: !3, line: 6455, type: !1804)
!4916 = !DILocation(line: 6455, column: 8, scope: !4893)
!4917 = !DILocalVariable(name: "saved_location", scope: !4893, file: !3, line: 6456, type: !1812)
!4918 = !DILocation(line: 6456, column: 14, scope: !4893)
!4919 = !DILocalVariable(name: "ret", scope: !4893, file: !3, line: 6457, type: !1329)
!4920 = !DILocation(line: 6457, column: 24, scope: !4893)
!4921 = !DILocalVariable(name: "pre_last_gsi", scope: !4893, file: !3, line: 6458, type: !4033)
!4922 = !DILocation(line: 6458, column: 24, scope: !4893)
!4923 = !DILocalVariable(name: "post_last_gsi", scope: !4893, file: !3, line: 6458, type: !4033)
!4924 = !DILocation(line: 6458, column: 38, scope: !4893)
!4925 = !DILocation(line: 6460, column: 16, scope: !4893)
!4926 = !DILocation(line: 6460, column: 15, scope: !4893)
!4927 = !DILocation(line: 6460, column: 13, scope: !4893)
!4928 = !DILocation(line: 6461, column: 7, scope: !4929)
!4929 = distinct !DILexicalBlock(scope: !4893, file: !3, line: 6461, column: 7)
!4930 = !DILocation(line: 6461, column: 17, scope: !4929)
!4931 = !DILocation(line: 6461, column: 7, scope: !4893)
!4932 = !DILocation(line: 6462, column: 5, scope: !4929)
!4933 = !DILocation(line: 6465, column: 18, scope: !4893)
!4934 = !DILocation(line: 6465, column: 32, scope: !4893)
!4935 = !DILocation(line: 6465, column: 16, scope: !4893)
!4936 = !DILocation(line: 6466, column: 7, scope: !4937)
!4937 = distinct !DILexicalBlock(scope: !4893, file: !3, line: 6466, column: 7)
!4938 = !DILocation(line: 6466, column: 7, scope: !4893)
!4939 = !DILocation(line: 6467, column: 5, scope: !4937)
!4940 = !DILocation(line: 6470, column: 7, scope: !4941)
!4941 = distinct !DILexicalBlock(scope: !4893, file: !3, line: 6470, column: 7)
!4942 = !DILocation(line: 6470, column: 21, scope: !4941)
!4943 = !DILocation(line: 6470, column: 7, scope: !4893)
!4944 = !DILocation(line: 6471, column: 5, scope: !4941)
!4945 = !DILocation(line: 6472, column: 12, scope: !4946)
!4946 = distinct !DILexicalBlock(scope: !4941, file: !3, line: 6472, column: 12)
!4947 = !DILocation(line: 6472, column: 26, scope: !4946)
!4948 = !DILocation(line: 6473, column: 12, scope: !4946)
!4949 = !DILocation(line: 6473, column: 15, scope: !4946)
!4950 = !DILocation(line: 6473, column: 29, scope: !4946)
!4951 = !DILocation(line: 6474, column: 12, scope: !4946)
!4952 = !DILocation(line: 6474, column: 15, scope: !4946)
!4953 = !DILocation(line: 6474, column: 29, scope: !4946)
!4954 = !DILocation(line: 6475, column: 12, scope: !4946)
!4955 = !DILocation(line: 6475, column: 15, scope: !4946)
!4956 = !DILocation(line: 6475, column: 29, scope: !4946)
!4957 = !DILocation(line: 6476, column: 12, scope: !4946)
!4958 = !DILocation(line: 6476, column: 15, scope: !4946)
!4959 = !DILocation(line: 6476, column: 29, scope: !4946)
!4960 = !DILocation(line: 6477, column: 12, scope: !4946)
!4961 = !DILocation(line: 6477, column: 15, scope: !4946)
!4962 = !DILocation(line: 6477, column: 29, scope: !4946)
!4963 = !DILocation(line: 6478, column: 12, scope: !4946)
!4964 = !DILocation(line: 6478, column: 15, scope: !4946)
!4965 = !DILocation(line: 6478, column: 29, scope: !4946)
!4966 = !DILocation(line: 6479, column: 12, scope: !4946)
!4967 = !DILocation(line: 6479, column: 15, scope: !4946)
!4968 = !DILocation(line: 6479, column: 29, scope: !4946)
!4969 = !DILocation(line: 6472, column: 12, scope: !4941)
!4970 = !DILocation(line: 6480, column: 5, scope: !4946)
!4971 = !DILocation(line: 6481, column: 12, scope: !4972)
!4972 = distinct !DILexicalBlock(scope: !4946, file: !3, line: 6481, column: 12)
!4973 = !DILocation(line: 6481, column: 26, scope: !4972)
!4974 = !DILocation(line: 6482, column: 5, scope: !4972)
!4975 = !DILocation(line: 6482, column: 8, scope: !4972)
!4976 = !DILocation(line: 6482, column: 22, scope: !4972)
!4977 = !DILocation(line: 6481, column: 12, scope: !4946)
!4978 = !DILocation(line: 6483, column: 5, scope: !4972)
!4979 = !DILocation(line: 6484, column: 12, scope: !4980)
!4980 = distinct !DILexicalBlock(scope: !4972, file: !3, line: 6484, column: 12)
!4981 = !DILocation(line: 6484, column: 26, scope: !4980)
!4982 = !DILocation(line: 6484, column: 12, scope: !4972)
!4983 = !DILocation(line: 6485, column: 5, scope: !4980)
!4984 = !DILocation(line: 6486, column: 12, scope: !4985)
!4985 = distinct !DILexicalBlock(scope: !4980, file: !3, line: 6486, column: 12)
!4986 = !DILocation(line: 6486, column: 26, scope: !4985)
!4987 = !DILocation(line: 6486, column: 12, scope: !4980)
!4988 = !DILocation(line: 6487, column: 5, scope: !4985)
!4989 = !DILocation(line: 6493, column: 7, scope: !4990)
!4990 = distinct !DILexicalBlock(scope: !4985, file: !3, line: 6489, column: 5)
!4991 = !DILocation(line: 6500, column: 7, scope: !4992)
!4992 = distinct !DILexicalBlock(scope: !4893, file: !3, line: 6500, column: 7)
!4993 = !DILocation(line: 6500, column: 13, scope: !4992)
!4994 = !DILocation(line: 6500, column: 7, scope: !4893)
!4995 = !DILocation(line: 6501, column: 11, scope: !4992)
!4996 = !DILocation(line: 6501, column: 5, scope: !4992)
!4997 = !DILocation(line: 6503, column: 7, scope: !4998)
!4998 = distinct !DILexicalBlock(scope: !4893, file: !3, line: 6503, column: 7)
!4999 = !DILocation(line: 6503, column: 14, scope: !4998)
!5000 = !DILocation(line: 6503, column: 7, scope: !4893)
!5001 = !DILocation(line: 6504, column: 12, scope: !4998)
!5002 = !DILocation(line: 6504, column: 5, scope: !4998)
!5003 = !DILocation(line: 6514, column: 29, scope: !4893)
!5004 = !DILocation(line: 6514, column: 28, scope: !4893)
!5005 = !DILocation(line: 6514, column: 18, scope: !4893)
!5006 = !DILocation(line: 6515, column: 30, scope: !4893)
!5007 = !DILocation(line: 6515, column: 29, scope: !4893)
!5008 = !DILocation(line: 6515, column: 19, scope: !4893)
!5009 = !DILocation(line: 6517, column: 20, scope: !4893)
!5010 = !DILocation(line: 6517, column: 18, scope: !4893)
!5011 = !DILocation(line: 6518, column: 7, scope: !5012)
!5012 = distinct !DILexicalBlock(scope: !4893, file: !3, line: 6518, column: 7)
!5013 = !DILocation(line: 6518, column: 20, scope: !5012)
!5014 = !DILocation(line: 6518, column: 17, scope: !5012)
!5015 = !DILocation(line: 6519, column: 7, scope: !5012)
!5016 = !DILocation(line: 6519, column: 10, scope: !5012)
!5017 = !DILocation(line: 6518, column: 7, scope: !4893)
!5018 = !DILocation(line: 6520, column: 22, scope: !5012)
!5019 = !DILocation(line: 6520, column: 20, scope: !5012)
!5020 = !DILocation(line: 6520, column: 5, scope: !5012)
!5021 = !DILocation(line: 6524, column: 3, scope: !4893)
!5022 = !DILocation(line: 6528, column: 7, scope: !5023)
!5023 = distinct !DILexicalBlock(scope: !4893, file: !3, line: 6525, column: 5)
!5024 = !DILocation(line: 6531, column: 20, scope: !5023)
!5025 = !DILocation(line: 6531, column: 19, scope: !5023)
!5026 = !DILocation(line: 6531, column: 17, scope: !5023)
!5027 = !DILocation(line: 6534, column: 11, scope: !5028)
!5028 = distinct !DILexicalBlock(scope: !5023, file: !3, line: 6534, column: 11)
!5029 = !DILocation(line: 6534, column: 24, scope: !5028)
!5030 = !DILocation(line: 6534, column: 21, scope: !5028)
!5031 = !DILocation(line: 6535, column: 4, scope: !5028)
!5032 = !DILocation(line: 6535, column: 8, scope: !5028)
!5033 = !DILocation(line: 6536, column: 8, scope: !5028)
!5034 = !DILocation(line: 6536, column: 11, scope: !5028)
!5035 = !DILocation(line: 6536, column: 36, scope: !5028)
!5036 = !DILocation(line: 6536, column: 33, scope: !5028)
!5037 = !DILocation(line: 6534, column: 11, scope: !5023)
!5038 = !DILocation(line: 6538, column: 8, scope: !5039)
!5039 = distinct !DILexicalBlock(scope: !5028, file: !3, line: 6537, column: 2)
!5040 = !DILocation(line: 6539, column: 4, scope: !5039)
!5041 = !DILocation(line: 6544, column: 18, scope: !5023)
!5042 = !DILocation(line: 6544, column: 33, scope: !5023)
!5043 = !DILocation(line: 6544, column: 41, scope: !5023)
!5044 = !DILocation(line: 6544, column: 48, scope: !5023)
!5045 = !DILocation(line: 6544, column: 7, scope: !5023)
!5046 = !DILocation(line: 6543, column: 11, scope: !5023)
!5047 = !DILocation(line: 6545, column: 11, scope: !5048)
!5048 = distinct !DILexicalBlock(scope: !5023, file: !3, line: 6545, column: 11)
!5049 = !DILocation(line: 6545, column: 15, scope: !5048)
!5050 = !DILocation(line: 6545, column: 11, scope: !5023)
!5051 = !DILocation(line: 6547, column: 9, scope: !5052)
!5052 = distinct !DILexicalBlock(scope: !5053, file: !3, line: 6547, column: 8)
!5053 = distinct !DILexicalBlock(scope: !5048, file: !3, line: 6546, column: 2)
!5054 = !DILocation(line: 6547, column: 8, scope: !5052)
!5055 = !DILocation(line: 6547, column: 16, scope: !5052)
!5056 = !DILocation(line: 6547, column: 8, scope: !5053)
!5057 = !DILocation(line: 6548, column: 6, scope: !5052)
!5058 = !DILocation(line: 6549, column: 9, scope: !5059)
!5059 = distinct !DILexicalBlock(scope: !5053, file: !3, line: 6549, column: 8)
!5060 = !DILocation(line: 6549, column: 8, scope: !5059)
!5061 = !DILocation(line: 6549, column: 19, scope: !5059)
!5062 = !DILocation(line: 6549, column: 16, scope: !5059)
!5063 = !DILocation(line: 6549, column: 8, scope: !5053)
!5064 = !DILocation(line: 6550, column: 6, scope: !5059)
!5065 = !DILocation(line: 6551, column: 2, scope: !5053)
!5066 = !DILocation(line: 6552, column: 16, scope: !5067)
!5067 = distinct !DILexicalBlock(scope: !5048, file: !3, line: 6552, column: 16)
!5068 = !DILocation(line: 6552, column: 20, scope: !5067)
!5069 = !DILocation(line: 6552, column: 16, scope: !5048)
!5070 = !DILocation(line: 6553, column: 2, scope: !5067)
!5071 = !DILocation(line: 6555, column: 11, scope: !5023)
!5072 = !DILocation(line: 6556, column: 15, scope: !5023)
!5073 = !DILocation(line: 6556, column: 7, scope: !5023)
!5074 = !DILocation(line: 6564, column: 34, scope: !5075)
!5075 = distinct !DILexicalBlock(scope: !5023, file: !3, line: 6557, column: 2)
!5076 = !DILocation(line: 6564, column: 42, scope: !5075)
!5077 = !DILocation(line: 6564, column: 49, scope: !5075)
!5078 = !DILocation(line: 6565, column: 6, scope: !5075)
!5079 = !DILocation(line: 6565, column: 15, scope: !5075)
!5080 = !DILocation(line: 6564, column: 10, scope: !5075)
!5081 = !DILocation(line: 6564, column: 8, scope: !5075)
!5082 = !DILocation(line: 6566, column: 4, scope: !5075)
!5083 = !DILocation(line: 6574, column: 34, scope: !5075)
!5084 = !DILocation(line: 6574, column: 42, scope: !5075)
!5085 = !DILocation(line: 6574, column: 49, scope: !5075)
!5086 = !DILocation(line: 6575, column: 6, scope: !5075)
!5087 = !DILocation(line: 6575, column: 17, scope: !5075)
!5088 = !DILocation(line: 6574, column: 10, scope: !5075)
!5089 = !DILocation(line: 6574, column: 8, scope: !5075)
!5090 = !DILocation(line: 6576, column: 4, scope: !5075)
!5091 = !DILocation(line: 6579, column: 30, scope: !5075)
!5092 = !DILocation(line: 6579, column: 38, scope: !5075)
!5093 = !DILocation(line: 6579, column: 45, scope: !5075)
!5094 = !DILocation(line: 6579, column: 10, scope: !5075)
!5095 = !DILocation(line: 6579, column: 8, scope: !5075)
!5096 = !DILocation(line: 6585, column: 8, scope: !5097)
!5097 = distinct !DILexicalBlock(scope: !5075, file: !3, line: 6585, column: 8)
!5098 = !DILocation(line: 6585, column: 17, scope: !5097)
!5099 = !DILocation(line: 6585, column: 8, scope: !5075)
!5100 = !DILocation(line: 6587, column: 44, scope: !5101)
!5101 = distinct !DILexicalBlock(scope: !5097, file: !3, line: 6586, column: 6)
!5102 = !DILocation(line: 6587, column: 43, scope: !5101)
!5103 = !DILocation(line: 6587, column: 52, scope: !5101)
!5104 = !DILocation(line: 6587, column: 59, scope: !5101)
!5105 = !DILocation(line: 6587, column: 18, scope: !5101)
!5106 = !DILocation(line: 6587, column: 9, scope: !5101)
!5107 = !DILocation(line: 6587, column: 16, scope: !5101)
!5108 = !DILocation(line: 6588, column: 27, scope: !5101)
!5109 = !DILocation(line: 6588, column: 26, scope: !5101)
!5110 = !DILocation(line: 6588, column: 8, scope: !5101)
!5111 = !DILocation(line: 6589, column: 6, scope: !5101)
!5112 = !DILocation(line: 6590, column: 4, scope: !5075)
!5113 = !DILocation(line: 6593, column: 30, scope: !5075)
!5114 = !DILocation(line: 6593, column: 38, scope: !5075)
!5115 = !DILocation(line: 6593, column: 45, scope: !5075)
!5116 = !DILocation(line: 6593, column: 54, scope: !5075)
!5117 = !DILocation(line: 6593, column: 10, scope: !5075)
!5118 = !DILocation(line: 6593, column: 8, scope: !5075)
!5119 = !DILocation(line: 6599, column: 8, scope: !5120)
!5120 = distinct !DILexicalBlock(scope: !5075, file: !3, line: 6599, column: 8)
!5121 = !DILocation(line: 6599, column: 17, scope: !5120)
!5122 = !DILocation(line: 6599, column: 8, scope: !5075)
!5123 = !DILocation(line: 6601, column: 44, scope: !5124)
!5124 = distinct !DILexicalBlock(scope: !5120, file: !3, line: 6600, column: 6)
!5125 = !DILocation(line: 6601, column: 43, scope: !5124)
!5126 = !DILocation(line: 6601, column: 52, scope: !5124)
!5127 = !DILocation(line: 6601, column: 59, scope: !5124)
!5128 = !DILocation(line: 6601, column: 18, scope: !5124)
!5129 = !DILocation(line: 6601, column: 9, scope: !5124)
!5130 = !DILocation(line: 6601, column: 16, scope: !5124)
!5131 = !DILocation(line: 6602, column: 27, scope: !5124)
!5132 = !DILocation(line: 6602, column: 26, scope: !5124)
!5133 = !DILocation(line: 6602, column: 8, scope: !5124)
!5134 = !DILocation(line: 6603, column: 6, scope: !5124)
!5135 = !DILocation(line: 6604, column: 4, scope: !5075)
!5136 = !DILocation(line: 6607, column: 4, scope: !5075)
!5137 = !DILocation(line: 6610, column: 34, scope: !5075)
!5138 = !DILocation(line: 6610, column: 42, scope: !5075)
!5139 = !DILocation(line: 6610, column: 49, scope: !5075)
!5140 = !DILocation(line: 6610, column: 58, scope: !5075)
!5141 = !DILocation(line: 6610, column: 10, scope: !5075)
!5142 = !DILocation(line: 6610, column: 8, scope: !5075)
!5143 = !DILocation(line: 6611, column: 4, scope: !5075)
!5144 = !DILocation(line: 6614, column: 42, scope: !5075)
!5145 = !DILocation(line: 6614, column: 50, scope: !5075)
!5146 = !DILocation(line: 6614, column: 10, scope: !5075)
!5147 = !DILocation(line: 6614, column: 8, scope: !5075)
!5148 = !DILocation(line: 6615, column: 4, scope: !5075)
!5149 = !DILocation(line: 6619, column: 32, scope: !5075)
!5150 = !DILocation(line: 6619, column: 40, scope: !5075)
!5151 = !DILocation(line: 6619, column: 47, scope: !5075)
!5152 = !DILocation(line: 6620, column: 11, scope: !5075)
!5153 = !DILocation(line: 6620, column: 20, scope: !5075)
!5154 = !DILocation(line: 6619, column: 10, scope: !5075)
!5155 = !DILocation(line: 6619, column: 8, scope: !5075)
!5156 = !DILocation(line: 6621, column: 4, scope: !5075)
!5157 = !DILocation(line: 6626, column: 33, scope: !5075)
!5158 = !DILocation(line: 6626, column: 41, scope: !5075)
!5159 = !DILocation(line: 6626, column: 10, scope: !5075)
!5160 = !DILocation(line: 6626, column: 8, scope: !5075)
!5161 = !DILocation(line: 6627, column: 4, scope: !5075)
!5162 = !DILocation(line: 6630, column: 8, scope: !5163)
!5163 = distinct !DILexicalBlock(scope: !5075, file: !3, line: 6630, column: 8)
!5164 = !DILocation(line: 6630, column: 40, scope: !5163)
!5165 = !DILocation(line: 6630, column: 8, scope: !5075)
!5166 = !DILocalVariable(name: "type", scope: !5167, file: !3, line: 6632, type: !1686)
!5167 = distinct !DILexicalBlock(scope: !5163, file: !3, line: 6631, column: 6)
!5168 = !DILocation(line: 6632, column: 13, scope: !5167)
!5169 = !DILocation(line: 6632, column: 20, scope: !5167)
!5170 = !DILocation(line: 6633, column: 18, scope: !5167)
!5171 = !DILocation(line: 6633, column: 9, scope: !5167)
!5172 = !DILocation(line: 6633, column: 16, scope: !5167)
!5173 = !DILocation(line: 6634, column: 12, scope: !5167)
!5174 = !DILocation(line: 6635, column: 8, scope: !5167)
!5175 = !DILocation(line: 6638, column: 26, scope: !5075)
!5176 = !DILocation(line: 6638, column: 53, scope: !5075)
!5177 = !DILocation(line: 6638, column: 60, scope: !5075)
!5178 = !DILocation(line: 6638, column: 10, scope: !5075)
!5179 = !DILocation(line: 6638, column: 8, scope: !5075)
!5180 = !DILocation(line: 6640, column: 31, scope: !5075)
!5181 = !DILocation(line: 6640, column: 30, scope: !5075)
!5182 = !DILocation(line: 6640, column: 4, scope: !5075)
!5183 = !DILocation(line: 6641, column: 4, scope: !5075)
!5184 = !DILocation(line: 6644, column: 30, scope: !5075)
!5185 = !DILocation(line: 6644, column: 38, scope: !5075)
!5186 = !DILocation(line: 6644, column: 45, scope: !5075)
!5187 = !DILocation(line: 6644, column: 10, scope: !5075)
!5188 = !DILocation(line: 6644, column: 8, scope: !5075)
!5189 = !DILocation(line: 6645, column: 4, scope: !5075)
!5190 = !DILocation(line: 6648, column: 32, scope: !5075)
!5191 = !DILocation(line: 6648, column: 40, scope: !5075)
!5192 = !DILocation(line: 6648, column: 47, scope: !5075)
!5193 = !DILocation(line: 6648, column: 10, scope: !5075)
!5194 = !DILocation(line: 6648, column: 8, scope: !5075)
!5195 = !DILocation(line: 6649, column: 4, scope: !5075)
!5196 = !DILocation(line: 6652, column: 8, scope: !5197)
!5197 = distinct !DILexicalBlock(scope: !5075, file: !3, line: 6652, column: 8)
!5198 = !DILocation(line: 6652, column: 8, scope: !5075)
!5199 = !DILocation(line: 6654, column: 12, scope: !5200)
!5200 = distinct !DILexicalBlock(scope: !5197, file: !3, line: 6653, column: 6)
!5201 = !DILocation(line: 6655, column: 8, scope: !5200)
!5202 = !DILocation(line: 6658, column: 8, scope: !5203)
!5203 = distinct !DILexicalBlock(scope: !5075, file: !3, line: 6658, column: 8)
!5204 = !DILocation(line: 6659, column: 8, scope: !5203)
!5205 = !DILocation(line: 6659, column: 11, scope: !5203)
!5206 = !DILocation(line: 6659, column: 20, scope: !5203)
!5207 = !DILocation(line: 6658, column: 8, scope: !5075)
!5208 = !DILocation(line: 6663, column: 18, scope: !5209)
!5209 = distinct !DILexicalBlock(scope: !5203, file: !3, line: 6660, column: 6)
!5210 = !DILocation(line: 6663, column: 9, scope: !5209)
!5211 = !DILocation(line: 6663, column: 16, scope: !5209)
!5212 = !DILocation(line: 6664, column: 8, scope: !5209)
!5213 = !DILocation(line: 6667, column: 31, scope: !5075)
!5214 = !DILocation(line: 6667, column: 10, scope: !5075)
!5215 = !DILocation(line: 6667, column: 8, scope: !5075)
!5216 = !DILocation(line: 6668, column: 8, scope: !5217)
!5217 = distinct !DILexicalBlock(scope: !5075, file: !3, line: 6668, column: 8)
!5218 = !DILocation(line: 6668, column: 12, scope: !5217)
!5219 = !DILocation(line: 6668, column: 8, scope: !5075)
!5220 = !DILocation(line: 6669, column: 6, scope: !5217)
!5221 = !DILocation(line: 6670, column: 9, scope: !5222)
!5222 = distinct !DILexicalBlock(scope: !5075, file: !3, line: 6670, column: 8)
!5223 = !DILocation(line: 6670, column: 8, scope: !5222)
!5224 = !DILocation(line: 6670, column: 19, scope: !5222)
!5225 = !DILocation(line: 6670, column: 16, scope: !5222)
!5226 = !DILocation(line: 6670, column: 8, scope: !5075)
!5227 = !DILocation(line: 6671, column: 6, scope: !5222)
!5228 = !DILocation(line: 6676, column: 26, scope: !5075)
!5229 = !DILocation(line: 6676, column: 53, scope: !5075)
!5230 = !DILocation(line: 6676, column: 60, scope: !5075)
!5231 = !DILocation(line: 6676, column: 10, scope: !5075)
!5232 = !DILocation(line: 6676, column: 8, scope: !5075)
!5233 = !DILocation(line: 6678, column: 31, scope: !5075)
!5234 = !DILocation(line: 6678, column: 30, scope: !5075)
!5235 = !DILocation(line: 6678, column: 4, scope: !5075)
!5236 = !DILocation(line: 6679, column: 4, scope: !5075)
!5237 = !DILocation(line: 6682, column: 37, scope: !5075)
!5238 = !DILocation(line: 6682, column: 54, scope: !5075)
!5239 = !DILocation(line: 6682, column: 53, scope: !5075)
!5240 = !DILocation(line: 6682, column: 14, scope: !5075)
!5241 = !DILocation(line: 6682, column: 5, scope: !5075)
!5242 = !DILocation(line: 6682, column: 12, scope: !5075)
!5243 = !DILocation(line: 6683, column: 9, scope: !5244)
!5244 = distinct !DILexicalBlock(scope: !5075, file: !3, line: 6683, column: 8)
!5245 = !DILocation(line: 6683, column: 8, scope: !5244)
!5246 = !DILocation(line: 6683, column: 19, scope: !5244)
!5247 = !DILocation(line: 6683, column: 16, scope: !5244)
!5248 = !DILocation(line: 6683, column: 8, scope: !5075)
!5249 = !DILocation(line: 6684, column: 6, scope: !5244)
!5250 = !DILocation(line: 6688, column: 26, scope: !5075)
!5251 = !DILocation(line: 6688, column: 53, scope: !5075)
!5252 = !DILocation(line: 6688, column: 60, scope: !5075)
!5253 = !DILocation(line: 6688, column: 10, scope: !5075)
!5254 = !DILocation(line: 6688, column: 8, scope: !5075)
!5255 = !DILocation(line: 6690, column: 31, scope: !5075)
!5256 = !DILocation(line: 6690, column: 30, scope: !5075)
!5257 = !DILocation(line: 6690, column: 4, scope: !5075)
!5258 = !DILocation(line: 6691, column: 4, scope: !5075)
!5259 = !DILocation(line: 6700, column: 8, scope: !5075)
!5260 = !DILocation(line: 6701, column: 4, scope: !5075)
!5261 = !DILocation(line: 6708, column: 8, scope: !5262)
!5262 = distinct !DILexicalBlock(scope: !5075, file: !3, line: 6708, column: 8)
!5263 = !DILocation(line: 6708, column: 17, scope: !5262)
!5264 = !DILocation(line: 6708, column: 8, scope: !5075)
!5265 = !DILocation(line: 6709, column: 10, scope: !5262)
!5266 = !DILocation(line: 6709, column: 6, scope: !5262)
!5267 = !DILocation(line: 6711, column: 16, scope: !5262)
!5268 = !DILocation(line: 6711, column: 7, scope: !5262)
!5269 = !DILocation(line: 6711, column: 14, scope: !5262)
!5270 = !DILocation(line: 6712, column: 4, scope: !5075)
!5271 = !DILocation(line: 6715, column: 30, scope: !5075)
!5272 = !DILocation(line: 6715, column: 38, scope: !5075)
!5273 = !DILocation(line: 6715, column: 10, scope: !5075)
!5274 = !DILocation(line: 6715, column: 8, scope: !5075)
!5275 = !DILocation(line: 6716, column: 4, scope: !5075)
!5276 = !DILocation(line: 6719, column: 30, scope: !5075)
!5277 = !DILocation(line: 6719, column: 38, scope: !5075)
!5278 = !DILocation(line: 6719, column: 10, scope: !5075)
!5279 = !DILocation(line: 6719, column: 8, scope: !5075)
!5280 = !DILocation(line: 6720, column: 4, scope: !5075)
!5281 = !DILocation(line: 6723, column: 30, scope: !5075)
!5282 = !DILocation(line: 6723, column: 38, scope: !5075)
!5283 = !DILocation(line: 6723, column: 10, scope: !5075)
!5284 = !DILocation(line: 6723, column: 8, scope: !5075)
!5285 = !DILocation(line: 6724, column: 4, scope: !5075)
!5286 = !DILocation(line: 6727, column: 32, scope: !5075)
!5287 = !DILocation(line: 6727, column: 40, scope: !5075)
!5288 = !DILocation(line: 6727, column: 10, scope: !5075)
!5289 = !DILocation(line: 6727, column: 8, scope: !5075)
!5290 = !DILocation(line: 6728, column: 4, scope: !5075)
!5291 = !DILocation(line: 6731, column: 30, scope: !5075)
!5292 = !DILocation(line: 6731, column: 10, scope: !5075)
!5293 = !DILocation(line: 6731, column: 8, scope: !5075)
!5294 = !DILocation(line: 6732, column: 4, scope: !5075)
!5295 = !DILocation(line: 6737, column: 8, scope: !5296)
!5296 = distinct !DILexicalBlock(scope: !5075, file: !3, line: 6737, column: 8)
!5297 = !DILocation(line: 6737, column: 47, scope: !5296)
!5298 = !DILocation(line: 6737, column: 8, scope: !5075)
!5299 = !DILocation(line: 6739, column: 30, scope: !5300)
!5300 = distinct !DILexicalBlock(scope: !5296, file: !3, line: 6738, column: 6)
!5301 = !DILocation(line: 6739, column: 58, scope: !5300)
!5302 = !DILocation(line: 6739, column: 14, scope: !5300)
!5303 = !DILocation(line: 6739, column: 12, scope: !5300)
!5304 = !DILocation(line: 6741, column: 12, scope: !5305)
!5305 = distinct !DILexicalBlock(scope: !5300, file: !3, line: 6741, column: 12)
!5306 = !DILocation(line: 6741, column: 16, scope: !5305)
!5307 = !DILocation(line: 6741, column: 12, scope: !5300)
!5308 = !DILocation(line: 6742, column: 3, scope: !5305)
!5309 = !DILocation(line: 6743, column: 6, scope: !5300)
!5310 = !DILocation(line: 6744, column: 27, scope: !5075)
!5311 = !DILocation(line: 6745, column: 25, scope: !5075)
!5312 = !DILocation(line: 6745, column: 6, scope: !5075)
!5313 = !DILocation(line: 6744, column: 4, scope: !5075)
!5314 = !DILocation(line: 6746, column: 4, scope: !5075)
!5315 = !DILocation(line: 6749, column: 27, scope: !5075)
!5316 = !DILocation(line: 6750, column: 26, scope: !5075)
!5317 = !DILocation(line: 6751, column: 12, scope: !5075)
!5318 = !DILocation(line: 6750, column: 4, scope: !5075)
!5319 = !DILocation(line: 6749, column: 4, scope: !5075)
!5320 = !DILocation(line: 6752, column: 8, scope: !5075)
!5321 = !DILocation(line: 6753, column: 4, scope: !5075)
!5322 = !DILocation(line: 6756, column: 8, scope: !5075)
!5323 = !DILocation(line: 6757, column: 4, scope: !5075)
!5324 = !DILocation(line: 6759, column: 27, scope: !5075)
!5325 = !DILocation(line: 6760, column: 26, scope: !5075)
!5326 = !DILocation(line: 6760, column: 6, scope: !5075)
!5327 = !DILocation(line: 6759, column: 4, scope: !5075)
!5328 = !DILocation(line: 6761, column: 4, scope: !5075)
!5329 = !DILocation(line: 6764, column: 36, scope: !5075)
!5330 = !DILocation(line: 6764, column: 44, scope: !5075)
!5331 = !DILocation(line: 6764, column: 10, scope: !5075)
!5332 = !DILocation(line: 6764, column: 8, scope: !5075)
!5333 = !DILocation(line: 6765, column: 4, scope: !5075)
!5334 = !DILocation(line: 6768, column: 33, scope: !5075)
!5335 = !DILocation(line: 6768, column: 32, scope: !5075)
!5336 = !DILocation(line: 6768, column: 41, scope: !5075)
!5337 = !DILocation(line: 6768, column: 10, scope: !5075)
!5338 = !DILocation(line: 6768, column: 8, scope: !5075)
!5339 = !DILocation(line: 6769, column: 4, scope: !5075)
!5340 = !DILocation(line: 6775, column: 8, scope: !5341)
!5341 = distinct !DILexicalBlock(scope: !5075, file: !3, line: 6775, column: 8)
!5342 = !DILocation(line: 6775, column: 17, scope: !5341)
!5343 = !DILocation(line: 6775, column: 8, scope: !5075)
!5344 = !DILocalVariable(name: "ix", scope: !5345, file: !3, line: 6777, type: !1739)
!5345 = distinct !DILexicalBlock(scope: !5341, file: !3, line: 6776, column: 6)
!5346 = !DILocation(line: 6777, column: 31, scope: !5345)
!5347 = !DILocalVariable(name: "ce", scope: !5345, file: !3, line: 6778, type: !5348)
!5348 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2904, size: 64)
!5349 = !DILocation(line: 6778, column: 25, scope: !5345)
!5350 = !DILocalVariable(name: "temp", scope: !5345, file: !3, line: 6779, type: !1686)
!5351 = !DILocation(line: 6779, column: 13, scope: !5345)
!5352 = !DILocation(line: 6780, column: 16, scope: !5353)
!5353 = distinct !DILexicalBlock(scope: !5345, file: !3, line: 6780, column: 8)
!5354 = !DILocation(line: 6780, column: 13, scope: !5353)
!5355 = !DILocation(line: 6781, column: 6, scope: !5356)
!5356 = distinct !DILexicalBlock(scope: !5353, file: !3, line: 6780, column: 8)
!5357 = !DILocation(line: 6780, column: 8, scope: !5353)
!5358 = !DILocation(line: 6784, column: 7, scope: !5359)
!5359 = distinct !DILexicalBlock(scope: !5356, file: !3, line: 6784, column: 7)
!5360 = !DILocation(line: 6784, column: 7, scope: !5356)
!5361 = !DILocation(line: 6785, column: 31, scope: !5359)
!5362 = !DILocation(line: 6785, column: 35, scope: !5359)
!5363 = !DILocation(line: 6785, column: 5, scope: !5359)
!5364 = !DILocation(line: 6783, column: 8, scope: !5356)
!5365 = !DILocation(line: 6780, column: 8, scope: !5356)
!5366 = distinct !{!5366, !5357, !5367}
!5367 = !DILocation(line: 6785, column: 47, scope: !5353)
!5368 = !DILocation(line: 6787, column: 18, scope: !5345)
!5369 = !DILocation(line: 6787, column: 9, scope: !5345)
!5370 = !DILocation(line: 6787, column: 16, scope: !5345)
!5371 = !DILocation(line: 6788, column: 12, scope: !5345)
!5372 = !DILocation(line: 6789, column: 6, scope: !5345)
!5373 = !DILocation(line: 6794, column: 13, scope: !5374)
!5374 = distinct !DILexicalBlock(scope: !5341, file: !3, line: 6794, column: 13)
!5375 = !DILocation(line: 6794, column: 22, scope: !5374)
!5376 = !DILocation(line: 6794, column: 13, scope: !5341)
!5377 = !DILocation(line: 6796, column: 44, scope: !5378)
!5378 = distinct !DILexicalBlock(scope: !5374, file: !3, line: 6795, column: 6)
!5379 = !DILocation(line: 6796, column: 43, scope: !5378)
!5380 = !DILocation(line: 6796, column: 52, scope: !5378)
!5381 = !DILocation(line: 6796, column: 59, scope: !5378)
!5382 = !DILocation(line: 6796, column: 18, scope: !5378)
!5383 = !DILocation(line: 6796, column: 9, scope: !5378)
!5384 = !DILocation(line: 6796, column: 16, scope: !5378)
!5385 = !DILocation(line: 6797, column: 27, scope: !5378)
!5386 = !DILocation(line: 6797, column: 26, scope: !5378)
!5387 = !DILocation(line: 6797, column: 8, scope: !5378)
!5388 = !DILocation(line: 6798, column: 6, scope: !5378)
!5389 = !DILocation(line: 6800, column: 10, scope: !5374)
!5390 = !DILocation(line: 6801, column: 4, scope: !5075)
!5391 = !DILocation(line: 6809, column: 30, scope: !5075)
!5392 = !DILocation(line: 6809, column: 38, scope: !5075)
!5393 = !DILocation(line: 6809, column: 45, scope: !5075)
!5394 = !DILocation(line: 6809, column: 10, scope: !5075)
!5395 = !DILocation(line: 6809, column: 8, scope: !5075)
!5396 = !DILocation(line: 6810, column: 4, scope: !5075)
!5397 = !DILocalVariable(name: "r0", scope: !5398, file: !3, line: 6814, type: !1329)
!5398 = distinct !DILexicalBlock(scope: !5075, file: !3, line: 6813, column: 4)
!5399 = !DILocation(line: 6814, column: 27, scope: !5398)
!5400 = !DILocalVariable(name: "r1", scope: !5398, file: !3, line: 6814, type: !1329)
!5401 = !DILocation(line: 6814, column: 31, scope: !5398)
!5402 = !DILocalVariable(name: "r2", scope: !5398, file: !3, line: 6814, type: !1329)
!5403 = !DILocation(line: 6814, column: 35, scope: !5398)
!5404 = !DILocation(line: 6816, column: 27, scope: !5398)
!5405 = !DILocation(line: 6816, column: 54, scope: !5398)
!5406 = !DILocation(line: 6817, column: 5, scope: !5398)
!5407 = !DILocation(line: 6816, column: 11, scope: !5398)
!5408 = !DILocation(line: 6816, column: 9, scope: !5398)
!5409 = !DILocation(line: 6818, column: 27, scope: !5398)
!5410 = !DILocation(line: 6818, column: 54, scope: !5398)
!5411 = !DILocation(line: 6819, column: 5, scope: !5398)
!5412 = !DILocation(line: 6818, column: 11, scope: !5398)
!5413 = !DILocation(line: 6818, column: 9, scope: !5398)
!5414 = !DILocation(line: 6820, column: 27, scope: !5398)
!5415 = !DILocation(line: 6820, column: 54, scope: !5398)
!5416 = !DILocation(line: 6821, column: 5, scope: !5398)
!5417 = !DILocation(line: 6820, column: 11, scope: !5398)
!5418 = !DILocation(line: 6820, column: 9, scope: !5398)
!5419 = !DILocation(line: 6822, column: 33, scope: !5398)
!5420 = !DILocation(line: 6822, column: 32, scope: !5398)
!5421 = !DILocation(line: 6822, column: 6, scope: !5398)
!5422 = !DILocation(line: 6824, column: 12, scope: !5398)
!5423 = !DILocation(line: 6824, column: 10, scope: !5398)
!5424 = !DILocation(line: 6826, column: 4, scope: !5075)
!5425 = !DILocalVariable(name: "r0", scope: !5426, file: !3, line: 6830, type: !1329)
!5426 = distinct !DILexicalBlock(scope: !5075, file: !3, line: 6829, column: 4)
!5427 = !DILocation(line: 6830, column: 27, scope: !5426)
!5428 = !DILocalVariable(name: "r1", scope: !5426, file: !3, line: 6830, type: !1329)
!5429 = !DILocation(line: 6830, column: 45, scope: !5426)
!5430 = !DILocation(line: 6832, column: 10, scope: !5431)
!5431 = distinct !DILexicalBlock(scope: !5426, file: !3, line: 6832, column: 10)
!5432 = !DILocation(line: 6832, column: 10, scope: !5426)
!5433 = !DILocation(line: 6833, column: 29, scope: !5431)
!5434 = !DILocation(line: 6833, column: 51, scope: !5431)
!5435 = !DILocation(line: 6834, column: 7, scope: !5431)
!5436 = !DILocation(line: 6833, column: 13, scope: !5431)
!5437 = !DILocation(line: 6833, column: 11, scope: !5431)
!5438 = !DILocation(line: 6833, column: 8, scope: !5431)
!5439 = !DILocation(line: 6835, column: 15, scope: !5440)
!5440 = distinct !DILexicalBlock(scope: !5431, file: !3, line: 6835, column: 15)
!5441 = !DILocation(line: 6835, column: 15, scope: !5431)
!5442 = !DILocation(line: 6836, column: 29, scope: !5440)
!5443 = !DILocation(line: 6836, column: 49, scope: !5440)
!5444 = !DILocation(line: 6837, column: 7, scope: !5440)
!5445 = !DILocation(line: 6836, column: 13, scope: !5440)
!5446 = !DILocation(line: 6836, column: 11, scope: !5440)
!5447 = !DILocation(line: 6836, column: 8, scope: !5440)
!5448 = !DILocation(line: 6838, column: 10, scope: !5449)
!5449 = distinct !DILexicalBlock(scope: !5426, file: !3, line: 6838, column: 10)
!5450 = !DILocation(line: 6838, column: 10, scope: !5426)
!5451 = !DILocation(line: 6839, column: 29, scope: !5449)
!5452 = !DILocation(line: 6839, column: 50, scope: !5449)
!5453 = !DILocation(line: 6840, column: 7, scope: !5449)
!5454 = !DILocation(line: 6839, column: 13, scope: !5449)
!5455 = !DILocation(line: 6839, column: 11, scope: !5449)
!5456 = !DILocation(line: 6839, column: 8, scope: !5449)
!5457 = !DILocation(line: 6842, column: 12, scope: !5426)
!5458 = !DILocation(line: 6842, column: 10, scope: !5426)
!5459 = !DILocation(line: 6844, column: 4, scope: !5075)
!5460 = !DILocation(line: 6848, column: 4, scope: !5075)
!5461 = !DILocation(line: 6851, column: 29, scope: !5075)
!5462 = !DILocation(line: 6851, column: 37, scope: !5075)
!5463 = !DILocation(line: 6851, column: 44, scope: !5075)
!5464 = !DILocation(line: 6851, column: 10, scope: !5075)
!5465 = !DILocation(line: 6851, column: 8, scope: !5075)
!5466 = !DILocation(line: 6852, column: 4, scope: !5075)
!5467 = !DILocalVariable(name: "eval", scope: !5468, file: !3, line: 6857, type: !2004)
!5468 = distinct !DILexicalBlock(scope: !5075, file: !3, line: 6856, column: 4)
!5469 = !DILocation(line: 6857, column: 17, scope: !5468)
!5470 = !DILocalVariable(name: "cleanup", scope: !5468, file: !3, line: 6857, type: !2004)
!5471 = !DILocation(line: 6857, column: 23, scope: !5468)
!5472 = !DILocalVariable(name: "try_", scope: !5468, file: !3, line: 6858, type: !2014)
!5473 = !DILocation(line: 6858, column: 13, scope: !5468)
!5474 = !DILocation(line: 6860, column: 21, scope: !5468)
!5475 = !DILocation(line: 6860, column: 11, scope: !5468)
!5476 = !DILocation(line: 6861, column: 24, scope: !5468)
!5477 = !DILocation(line: 6861, column: 6, scope: !5468)
!5478 = !DILocation(line: 6862, column: 24, scope: !5468)
!5479 = !DILocation(line: 6862, column: 6, scope: !5468)
!5480 = !DILocation(line: 6864, column: 30, scope: !5481)
!5481 = distinct !DILexicalBlock(scope: !5468, file: !3, line: 6864, column: 10)
!5482 = !DILocation(line: 6864, column: 10, scope: !5481)
!5483 = !DILocation(line: 6864, column: 10, scope: !5468)
!5484 = !DILocation(line: 6866, column: 23, scope: !5485)
!5485 = distinct !DILexicalBlock(scope: !5481, file: !3, line: 6865, column: 8)
!5486 = !DILocation(line: 6866, column: 30, scope: !5485)
!5487 = !DILocation(line: 6866, column: 3, scope: !5485)
!5488 = !DILocation(line: 6867, column: 7, scope: !5485)
!5489 = !DILocation(line: 6868, column: 3, scope: !5485)
!5490 = !DILocation(line: 6870, column: 31, scope: !5468)
!5491 = !DILocation(line: 6870, column: 37, scope: !5468)
!5492 = !DILocation(line: 6871, column: 10, scope: !5468)
!5493 = !DILocation(line: 6871, column: 30, scope: !5468)
!5494 = !DILocation(line: 6870, column: 13, scope: !5468)
!5495 = !DILocation(line: 6870, column: 11, scope: !5468)
!5496 = !DILocation(line: 6874, column: 10, scope: !5497)
!5497 = distinct !DILexicalBlock(scope: !5468, file: !3, line: 6874, column: 10)
!5498 = !DILocation(line: 6874, column: 30, scope: !5497)
!5499 = !DILocation(line: 6874, column: 10, scope: !5468)
!5500 = !DILocation(line: 6875, column: 41, scope: !5497)
!5501 = !DILocation(line: 6876, column: 13, scope: !5497)
!5502 = !DILocation(line: 6875, column: 8, scope: !5497)
!5503 = !DILocation(line: 6877, column: 29, scope: !5468)
!5504 = !DILocation(line: 6877, column: 36, scope: !5468)
!5505 = !DILocation(line: 6877, column: 6, scope: !5468)
!5506 = !DILocation(line: 6878, column: 10, scope: !5468)
!5507 = !DILocation(line: 6879, column: 6, scope: !5468)
!5508 = !DILocation(line: 6883, column: 39, scope: !5075)
!5509 = !DILocation(line: 6883, column: 47, scope: !5075)
!5510 = !DILocation(line: 6883, column: 10, scope: !5075)
!5511 = !DILocation(line: 6883, column: 8, scope: !5075)
!5512 = !DILocation(line: 6884, column: 4, scope: !5075)
!5513 = !DILocation(line: 6887, column: 32, scope: !5075)
!5514 = !DILocation(line: 6887, column: 40, scope: !5075)
!5515 = !DILocation(line: 6887, column: 47, scope: !5075)
!5516 = !DILocation(line: 6887, column: 10, scope: !5075)
!5517 = !DILocation(line: 6887, column: 8, scope: !5075)
!5518 = !DILocation(line: 6888, column: 4, scope: !5075)
!5519 = !DILocalVariable(name: "c", scope: !5520, file: !3, line: 6892, type: !2014)
!5520 = distinct !DILexicalBlock(scope: !5075, file: !3, line: 6891, column: 4)
!5521 = !DILocation(line: 6892, column: 13, scope: !5520)
!5522 = !DILocalVariable(name: "handler", scope: !5520, file: !3, line: 6893, type: !2004)
!5523 = !DILocation(line: 6893, column: 17, scope: !5520)
!5524 = !DILocation(line: 6894, column: 24, scope: !5520)
!5525 = !DILocation(line: 6894, column: 6, scope: !5520)
!5526 = !DILocation(line: 6895, column: 30, scope: !5520)
!5527 = !DILocation(line: 6895, column: 53, scope: !5520)
!5528 = !DILocation(line: 6895, column: 10, scope: !5520)
!5529 = !DILocation(line: 6895, column: 8, scope: !5520)
!5530 = !DILocation(line: 6896, column: 29, scope: !5520)
!5531 = !DILocation(line: 6896, column: 36, scope: !5520)
!5532 = !DILocation(line: 6896, column: 6, scope: !5520)
!5533 = !DILocation(line: 6897, column: 10, scope: !5520)
!5534 = !DILocation(line: 6898, column: 6, scope: !5520)
!5535 = !DILocalVariable(name: "ehf", scope: !5536, file: !3, line: 6903, type: !2014)
!5536 = distinct !DILexicalBlock(scope: !5075, file: !3, line: 6902, column: 4)
!5537 = !DILocation(line: 6903, column: 13, scope: !5536)
!5538 = !DILocalVariable(name: "failure", scope: !5536, file: !3, line: 6904, type: !2004)
!5539 = !DILocation(line: 6904, column: 17, scope: !5536)
!5540 = !DILocation(line: 6906, column: 24, scope: !5536)
!5541 = !DILocation(line: 6906, column: 6, scope: !5536)
!5542 = !DILocation(line: 6907, column: 36, scope: !5536)
!5543 = !DILocation(line: 6907, column: 63, scope: !5536)
!5544 = !DILocation(line: 6907, column: 12, scope: !5536)
!5545 = !DILocation(line: 6907, column: 10, scope: !5536)
!5546 = !DILocation(line: 6908, column: 29, scope: !5536)
!5547 = !DILocation(line: 6908, column: 34, scope: !5536)
!5548 = !DILocation(line: 6908, column: 6, scope: !5536)
!5549 = !DILocation(line: 6909, column: 29, scope: !5536)
!5550 = !DILocation(line: 6909, column: 36, scope: !5536)
!5551 = !DILocation(line: 6909, column: 6, scope: !5536)
!5552 = !DILocation(line: 6910, column: 10, scope: !5536)
!5553 = !DILocation(line: 6911, column: 6, scope: !5536)
!5554 = !DILocalVariable(name: "r0", scope: !5555, file: !3, line: 6916, type: !1329)
!5555 = distinct !DILexicalBlock(scope: !5075, file: !3, line: 6915, column: 4)
!5556 = !DILocation(line: 6916, column: 27, scope: !5555)
!5557 = !DILocalVariable(name: "r1", scope: !5555, file: !3, line: 6916, type: !1329)
!5558 = !DILocation(line: 6916, column: 31, scope: !5555)
!5559 = !DILocation(line: 6917, column: 27, scope: !5555)
!5560 = !DILocation(line: 6917, column: 58, scope: !5555)
!5561 = !DILocation(line: 6918, column: 5, scope: !5555)
!5562 = !DILocation(line: 6917, column: 11, scope: !5555)
!5563 = !DILocation(line: 6917, column: 9, scope: !5555)
!5564 = !DILocation(line: 6919, column: 27, scope: !5555)
!5565 = !DILocation(line: 6919, column: 56, scope: !5555)
!5566 = !DILocation(line: 6920, column: 5, scope: !5555)
!5567 = !DILocation(line: 6919, column: 11, scope: !5555)
!5568 = !DILocation(line: 6919, column: 9, scope: !5555)
!5569 = !DILocation(line: 6921, column: 6, scope: !5555)
!5570 = !DILocation(line: 6921, column: 34, scope: !5555)
!5571 = !DILocation(line: 6922, column: 12, scope: !5555)
!5572 = !DILocation(line: 6922, column: 10, scope: !5555)
!5573 = !DILocation(line: 6924, column: 4, scope: !5075)
!5574 = !DILocation(line: 6930, column: 4, scope: !5075)
!5575 = !DILocation(line: 6930, column: 27, scope: !5075)
!5576 = !DILocation(line: 6931, column: 8, scope: !5075)
!5577 = !DILocation(line: 6932, column: 4, scope: !5075)
!5578 = !DILocation(line: 6935, column: 35, scope: !5075)
!5579 = !DILocation(line: 6935, column: 43, scope: !5075)
!5580 = !DILocation(line: 6935, column: 10, scope: !5075)
!5581 = !DILocation(line: 6935, column: 8, scope: !5075)
!5582 = !DILocation(line: 6936, column: 4, scope: !5075)
!5583 = !DILocation(line: 6940, column: 22, scope: !5584)
!5584 = distinct !DILexicalBlock(scope: !5075, file: !3, line: 6939, column: 4)
!5585 = !DILocation(line: 6940, column: 49, scope: !5584)
!5586 = !DILocation(line: 6941, column: 7, scope: !5584)
!5587 = !DILocation(line: 6941, column: 14, scope: !5584)
!5588 = !DILocation(line: 6941, column: 41, scope: !5584)
!5589 = !DILocation(line: 6942, column: 7, scope: !5584)
!5590 = !DILocation(line: 6942, column: 22, scope: !5584)
!5591 = !DILocation(line: 6940, column: 6, scope: !5584)
!5592 = !DILocation(line: 6943, column: 22, scope: !5584)
!5593 = !DILocation(line: 6943, column: 49, scope: !5584)
!5594 = !DILocation(line: 6943, column: 56, scope: !5584)
!5595 = !DILocation(line: 6943, column: 6, scope: !5584)
!5596 = !DILocation(line: 6946, column: 4, scope: !5075)
!5597 = !DILocation(line: 6950, column: 37, scope: !5075)
!5598 = !DILocation(line: 6950, column: 10, scope: !5075)
!5599 = !DILocation(line: 6950, column: 8, scope: !5075)
!5600 = !DILocation(line: 6951, column: 4, scope: !5075)
!5601 = !DILocation(line: 6955, column: 8, scope: !5602)
!5602 = distinct !DILexicalBlock(scope: !5075, file: !3, line: 6955, column: 8)
!5603 = !DILocation(line: 6955, column: 8, scope: !5075)
!5604 = !DILocation(line: 6956, column: 27, scope: !5602)
!5605 = !DILocation(line: 6956, column: 47, scope: !5602)
!5606 = !DILocation(line: 6956, column: 46, scope: !5602)
!5607 = !DILocation(line: 6956, column: 6, scope: !5602)
!5608 = !DILocation(line: 6957, column: 8, scope: !5075)
!5609 = !DILocation(line: 6958, column: 4, scope: !5075)
!5610 = !DILocation(line: 6962, column: 8, scope: !5075)
!5611 = !DILocation(line: 6963, column: 4, scope: !5075)
!5612 = !DILocation(line: 6966, column: 27, scope: !5075)
!5613 = !DILocation(line: 6966, column: 35, scope: !5075)
!5614 = !DILocation(line: 6966, column: 4, scope: !5075)
!5615 = !DILocation(line: 6967, column: 8, scope: !5075)
!5616 = !DILocation(line: 6968, column: 4, scope: !5075)
!5617 = !DILocation(line: 6971, column: 23, scope: !5075)
!5618 = !DILocation(line: 6971, column: 31, scope: !5075)
!5619 = !DILocation(line: 6971, column: 4, scope: !5075)
!5620 = !DILocation(line: 6972, column: 8, scope: !5075)
!5621 = !DILocation(line: 6973, column: 4, scope: !5075)
!5622 = !DILocation(line: 6976, column: 28, scope: !5075)
!5623 = !DILocation(line: 6976, column: 36, scope: !5075)
!5624 = !DILocation(line: 6976, column: 10, scope: !5075)
!5625 = !DILocation(line: 6976, column: 8, scope: !5075)
!5626 = !DILocation(line: 6977, column: 4, scope: !5075)
!5627 = !DILocation(line: 6981, column: 28, scope: !5075)
!5628 = !DILocation(line: 6981, column: 36, scope: !5075)
!5629 = !DILocation(line: 6981, column: 4, scope: !5075)
!5630 = !DILocation(line: 6982, column: 8, scope: !5075)
!5631 = !DILocation(line: 6983, column: 4, scope: !5075)
!5632 = !DILocalVariable(name: "body", scope: !5633, file: !3, line: 6990, type: !2004)
!5633 = distinct !DILexicalBlock(scope: !5075, file: !3, line: 6989, column: 4)
!5634 = !DILocation(line: 6990, column: 17, scope: !5633)
!5635 = !DILocalVariable(name: "g", scope: !5633, file: !3, line: 6991, type: !2014)
!5636 = !DILocation(line: 6991, column: 13, scope: !5633)
!5637 = !DILocation(line: 6993, column: 24, scope: !5633)
!5638 = !DILocation(line: 6993, column: 6, scope: !5633)
!5639 = !DILocation(line: 6994, column: 14, scope: !5633)
!5640 = !DILocation(line: 6994, column: 6, scope: !5633)
!5641 = !DILocation(line: 6997, column: 40, scope: !5642)
!5642 = distinct !DILexicalBlock(scope: !5633, file: !3, line: 6995, column: 8)
!5643 = !DILocation(line: 6997, column: 14, scope: !5642)
!5644 = !DILocation(line: 6997, column: 12, scope: !5642)
!5645 = !DILocation(line: 6998, column: 10, scope: !5642)
!5646 = !DILocation(line: 7000, column: 39, scope: !5642)
!5647 = !DILocation(line: 7000, column: 14, scope: !5642)
!5648 = !DILocation(line: 7000, column: 12, scope: !5642)
!5649 = !DILocation(line: 7001, column: 3, scope: !5642)
!5650 = !DILocation(line: 7003, column: 33, scope: !5642)
!5651 = !DILocation(line: 7003, column: 7, scope: !5642)
!5652 = !DILocation(line: 7003, column: 5, scope: !5642)
!5653 = !DILocation(line: 7004, column: 3, scope: !5642)
!5654 = !DILocation(line: 7006, column: 34, scope: !5642)
!5655 = !DILocation(line: 7007, column: 17, scope: !5642)
!5656 = !DILocation(line: 7006, column: 7, scope: !5642)
!5657 = !DILocation(line: 7006, column: 5, scope: !5642)
!5658 = !DILocation(line: 7008, column: 3, scope: !5642)
!5659 = !DILocation(line: 7010, column: 3, scope: !5642)
!5660 = !DILocation(line: 7011, column: 8, scope: !5642)
!5661 = !DILocation(line: 7012, column: 29, scope: !5633)
!5662 = !DILocation(line: 7012, column: 36, scope: !5633)
!5663 = !DILocation(line: 7012, column: 6, scope: !5633)
!5664 = !DILocation(line: 7013, column: 10, scope: !5633)
!5665 = !DILocation(line: 7014, column: 6, scope: !5633)
!5666 = !DILocation(line: 7018, column: 31, scope: !5075)
!5667 = !DILocation(line: 7018, column: 39, scope: !5075)
!5668 = !DILocation(line: 7018, column: 10, scope: !5075)
!5669 = !DILocation(line: 7018, column: 8, scope: !5075)
!5670 = !DILocation(line: 7019, column: 4, scope: !5075)
!5671 = !DILocation(line: 7025, column: 8, scope: !5672)
!5672 = distinct !DILexicalBlock(scope: !5075, file: !3, line: 7025, column: 8)
!5673 = !DILocation(line: 7025, column: 46, scope: !5672)
!5674 = !DILocation(line: 7026, column: 8, scope: !5672)
!5675 = !DILocation(line: 7027, column: 6, scope: !5672)
!5676 = !DILocation(line: 7028, column: 6, scope: !5672)
!5677 = !DILocation(line: 7028, column: 33, scope: !5672)
!5678 = !DILocation(line: 7029, column: 6, scope: !5672)
!5679 = !DILocation(line: 7026, column: 18, scope: !5672)
!5680 = !DILocation(line: 7026, column: 16, scope: !5672)
!5681 = !DILocation(line: 7025, column: 8, scope: !5075)
!5682 = !DILocation(line: 7031, column: 18, scope: !5683)
!5683 = distinct !DILexicalBlock(scope: !5672, file: !3, line: 7030, column: 6)
!5684 = !DILocation(line: 7031, column: 9, scope: !5683)
!5685 = !DILocation(line: 7031, column: 16, scope: !5683)
!5686 = !DILocation(line: 7032, column: 8, scope: !5683)
!5687 = !DILocation(line: 7035, column: 8, scope: !5688)
!5688 = distinct !DILexicalBlock(scope: !5075, file: !3, line: 7035, column: 8)
!5689 = !DILocation(line: 7035, column: 46, scope: !5688)
!5690 = !DILocation(line: 7036, column: 8, scope: !5688)
!5691 = !DILocation(line: 7036, column: 11, scope: !5688)
!5692 = !DILocation(line: 7036, column: 49, scope: !5688)
!5693 = !DILocation(line: 7037, column: 8, scope: !5688)
!5694 = !DILocation(line: 7037, column: 11, scope: !5688)
!5695 = !DILocation(line: 7039, column: 8, scope: !5688)
!5696 = !DILocation(line: 7040, column: 6, scope: !5688)
!5697 = !DILocation(line: 7041, column: 6, scope: !5688)
!5698 = !DILocation(line: 7042, column: 6, scope: !5688)
!5699 = !DILocation(line: 7043, column: 6, scope: !5688)
!5700 = !DILocation(line: 7039, column: 18, scope: !5688)
!5701 = !DILocation(line: 7039, column: 16, scope: !5688)
!5702 = !DILocation(line: 7035, column: 8, scope: !5075)
!5703 = !DILocation(line: 7046, column: 26, scope: !5704)
!5704 = distinct !DILexicalBlock(scope: !5688, file: !3, line: 7045, column: 7)
!5705 = !DILocation(line: 7046, column: 17, scope: !5704)
!5706 = !DILocation(line: 7046, column: 24, scope: !5704)
!5707 = !DILocation(line: 7047, column: 9, scope: !5704)
!5708 = !DILocation(line: 7044, column: 14, scope: !5688)
!5709 = !DILocation(line: 7052, column: 12, scope: !5075)
!5710 = !DILocation(line: 7052, column: 4, scope: !5075)
!5711 = !DILocalVariable(name: "type", scope: !5712, file: !3, line: 7065, type: !1686)
!5712 = distinct !DILexicalBlock(scope: !5713, file: !3, line: 7064, column: 3)
!5713 = distinct !DILexicalBlock(scope: !5075, file: !3, line: 7053, column: 6)
!5714 = !DILocation(line: 7065, column: 10, scope: !5712)
!5715 = !DILocation(line: 7065, column: 17, scope: !5712)
!5716 = !DILocation(line: 7067, column: 10, scope: !5717)
!5717 = distinct !DILexicalBlock(scope: !5712, file: !3, line: 7067, column: 9)
!5718 = !DILocation(line: 7067, column: 9, scope: !5712)
!5719 = !DILocation(line: 7068, column: 7, scope: !5717)
!5720 = !DILocation(line: 7069, column: 14, scope: !5721)
!5721 = distinct !DILexicalBlock(scope: !5717, file: !3, line: 7069, column: 14)
!5722 = !DILocation(line: 7069, column: 31, scope: !5721)
!5723 = !DILocation(line: 7069, column: 14, scope: !5717)
!5724 = !DILocation(line: 7070, column: 53, scope: !5721)
!5725 = !DILocation(line: 7070, column: 13, scope: !5721)
!5726 = !DILocation(line: 7070, column: 11, scope: !5721)
!5727 = !DILocation(line: 7070, column: 7, scope: !5721)
!5728 = !DILocation(line: 7072, column: 46, scope: !5721)
!5729 = !DILocation(line: 7072, column: 13, scope: !5721)
!5730 = !DILocation(line: 7072, column: 11, scope: !5721)
!5731 = !DILocation(line: 7074, column: 5, scope: !5712)
!5732 = !DILocation(line: 7080, column: 30, scope: !5713)
!5733 = !DILocation(line: 7080, column: 57, scope: !5713)
!5734 = !DILocation(line: 7081, column: 8, scope: !5713)
!5735 = !DILocation(line: 7080, column: 14, scope: !5713)
!5736 = !DILocation(line: 7080, column: 12, scope: !5713)
!5737 = !DILocation(line: 7082, column: 8, scope: !5713)
!5738 = !DILabel(scope: !5713, name: "expr_2", file: !3, line: 7085)
!5739 = !DILocation(line: 7085, column: 6, scope: !5713)
!5740 = !DILocalVariable(name: "r0", scope: !5741, file: !3, line: 7087, type: !1329)
!5741 = distinct !DILexicalBlock(scope: !5713, file: !3, line: 7086, column: 8)
!5742 = !DILocation(line: 7087, column: 24, scope: !5741)
!5743 = !DILocalVariable(name: "r1", scope: !5741, file: !3, line: 7087, type: !1329)
!5744 = !DILocation(line: 7087, column: 28, scope: !5741)
!5745 = !DILocation(line: 7089, column: 24, scope: !5741)
!5746 = !DILocation(line: 7089, column: 51, scope: !5741)
!5747 = !DILocation(line: 7090, column: 23, scope: !5741)
!5748 = !DILocation(line: 7089, column: 8, scope: !5741)
!5749 = !DILocation(line: 7089, column: 6, scope: !5741)
!5750 = !DILocation(line: 7091, column: 24, scope: !5741)
!5751 = !DILocation(line: 7091, column: 51, scope: !5741)
!5752 = !DILocation(line: 7092, column: 9, scope: !5741)
!5753 = !DILocation(line: 7091, column: 8, scope: !5741)
!5754 = !DILocation(line: 7091, column: 6, scope: !5741)
!5755 = !DILocation(line: 7094, column: 9, scope: !5741)
!5756 = !DILocation(line: 7094, column: 7, scope: !5741)
!5757 = !DILocation(line: 7095, column: 3, scope: !5741)
!5758 = !DILocation(line: 7100, column: 12, scope: !5713)
!5759 = !DILocation(line: 7101, column: 8, scope: !5713)
!5760 = !DILocation(line: 7104, column: 8, scope: !5713)
!5761 = !DILocation(line: 7107, column: 8, scope: !5713)
!5762 = !DILocation(line: 7110, column: 31, scope: !5075)
!5763 = !DILocation(line: 7110, column: 30, scope: !5075)
!5764 = !DILocation(line: 7110, column: 4, scope: !5075)
!5765 = !DILabel(scope: !5075, name: "dont_recalculate", file: !3, line: 7112)
!5766 = !DILocation(line: 7112, column: 2, scope: !5075)
!5767 = !DILocation(line: 7113, column: 4, scope: !5075)
!5768 = !DILocation(line: 7117, column: 11, scope: !5769)
!5769 = distinct !DILexicalBlock(scope: !5023, file: !3, line: 7117, column: 11)
!5770 = !DILocation(line: 7117, column: 15, scope: !5769)
!5771 = !DILocation(line: 7117, column: 24, scope: !5769)
!5772 = !DILocation(line: 7117, column: 29, scope: !5769)
!5773 = !DILocation(line: 7117, column: 28, scope: !5769)
!5774 = !DILocation(line: 7117, column: 36, scope: !5769)
!5775 = !DILocation(line: 7117, column: 44, scope: !5769)
!5776 = !DILocation(line: 7117, column: 48, scope: !5769)
!5777 = !DILocation(line: 7117, column: 47, scope: !5769)
!5778 = !DILocation(line: 7117, column: 58, scope: !5769)
!5779 = !DILocation(line: 7117, column: 55, scope: !5769)
!5780 = !DILocation(line: 7117, column: 11, scope: !5023)
!5781 = !DILocation(line: 7118, column: 6, scope: !5769)
!5782 = !DILocation(line: 7118, column: 2, scope: !5769)
!5783 = !DILocation(line: 7119, column: 5, scope: !5023)
!5784 = !DILocation(line: 7120, column: 10, scope: !4893)
!5785 = !DILocation(line: 7120, column: 14, scope: !4893)
!5786 = distinct !{!5786, !5021, !5787}
!5787 = !DILocation(line: 7120, column: 22, scope: !4893)
!5788 = !DILocation(line: 7124, column: 7, scope: !5789)
!5789 = distinct !DILexicalBlock(scope: !4893, file: !3, line: 7124, column: 7)
!5790 = !DILocation(line: 7124, column: 11, scope: !5789)
!5791 = !DILocation(line: 7124, column: 7, scope: !4893)
!5792 = !DILocation(line: 7126, column: 11, scope: !5793)
!5793 = distinct !DILexicalBlock(scope: !5794, file: !3, line: 7126, column: 11)
!5794 = distinct !DILexicalBlock(scope: !5789, file: !3, line: 7125, column: 5)
!5795 = !DILocation(line: 7126, column: 11, scope: !5794)
!5796 = !DILocation(line: 7127, column: 3, scope: !5793)
!5797 = !DILocation(line: 7127, column: 10, scope: !5793)
!5798 = !DILocation(line: 7127, column: 2, scope: !5793)
!5799 = !DILocation(line: 7128, column: 7, scope: !5794)
!5800 = !DILocation(line: 7133, column: 3, scope: !4893)
!5801 = !DILocation(line: 7135, column: 7, scope: !5802)
!5802 = distinct !DILexicalBlock(scope: !4893, file: !3, line: 7135, column: 7)
!5803 = !DILocation(line: 7135, column: 16, scope: !5802)
!5804 = !DILocation(line: 7135, column: 27, scope: !5802)
!5805 = !DILocation(line: 7135, column: 31, scope: !5802)
!5806 = !DILocation(line: 7135, column: 30, scope: !5802)
!5807 = !DILocation(line: 7135, column: 38, scope: !5802)
!5808 = !DILocation(line: 7135, column: 59, scope: !5802)
!5809 = !DILocation(line: 7135, column: 58, scope: !5802)
!5810 = !DILocation(line: 7135, column: 42, scope: !5802)
!5811 = !DILocation(line: 7135, column: 7, scope: !4893)
!5812 = !DILocation(line: 7139, column: 12, scope: !5813)
!5813 = distinct !DILexicalBlock(scope: !5814, file: !3, line: 7139, column: 11)
!5814 = distinct !DILexicalBlock(scope: !5802, file: !3, line: 7136, column: 5)
!5815 = !DILocation(line: 7139, column: 11, scope: !5814)
!5816 = !DILocation(line: 7140, column: 3, scope: !5813)
!5817 = !DILocation(line: 7140, column: 10, scope: !5813)
!5818 = !DILocation(line: 7140, column: 2, scope: !5813)
!5819 = !DILocation(line: 7141, column: 17, scope: !5820)
!5820 = distinct !DILexicalBlock(scope: !5813, file: !3, line: 7141, column: 16)
!5821 = !DILocation(line: 7141, column: 16, scope: !5813)
!5822 = !DILocalVariable(name: "code", scope: !5823, file: !3, line: 7145, type: !134)
!5823 = distinct !DILexicalBlock(scope: !5820, file: !3, line: 7142, column: 2)
!5824 = !DILocation(line: 7145, column: 19, scope: !5823)
!5825 = !DILocation(line: 7145, column: 26, scope: !5823)
!5826 = !DILocation(line: 7147, column: 12, scope: !5823)
!5827 = !DILocation(line: 7147, column: 4, scope: !5823)
!5828 = !DILocation(line: 7153, column: 24, scope: !5829)
!5829 = distinct !DILexicalBlock(scope: !5823, file: !3, line: 7148, column: 6)
!5830 = !DILocation(line: 7153, column: 51, scope: !5829)
!5831 = !DILocation(line: 7153, column: 58, scope: !5829)
!5832 = !DILocation(line: 7154, column: 9, scope: !5829)
!5833 = !DILocation(line: 7154, column: 24, scope: !5829)
!5834 = !DILocation(line: 7153, column: 8, scope: !5829)
!5835 = !DILocation(line: 7155, column: 8, scope: !5829)
!5836 = !DILocation(line: 7159, column: 24, scope: !5829)
!5837 = !DILocation(line: 7159, column: 51, scope: !5829)
!5838 = !DILocation(line: 7159, column: 58, scope: !5829)
!5839 = !DILocation(line: 7160, column: 9, scope: !5829)
!5840 = !DILocation(line: 7160, column: 24, scope: !5829)
!5841 = !DILocation(line: 7159, column: 8, scope: !5829)
!5842 = !DILocation(line: 7161, column: 24, scope: !5829)
!5843 = !DILocation(line: 7161, column: 51, scope: !5829)
!5844 = !DILocation(line: 7161, column: 58, scope: !5829)
!5845 = !DILocation(line: 7162, column: 9, scope: !5829)
!5846 = !DILocation(line: 7162, column: 24, scope: !5829)
!5847 = !DILocation(line: 7161, column: 8, scope: !5829)
!5848 = !DILocation(line: 7163, column: 8, scope: !5829)
!5849 = !DILocation(line: 7168, column: 8, scope: !5829)
!5850 = !DILocation(line: 7169, column: 6, scope: !5829)
!5851 = !DILocation(line: 7171, column: 5, scope: !5823)
!5852 = !DILocation(line: 7171, column: 12, scope: !5823)
!5853 = !DILocation(line: 7172, column: 2, scope: !5823)
!5854 = !DILocation(line: 7173, column: 16, scope: !5855)
!5855 = distinct !DILexicalBlock(scope: !5820, file: !3, line: 7173, column: 16)
!5856 = !DILocation(line: 7174, column: 9, scope: !5855)
!5857 = !DILocation(line: 7174, column: 12, scope: !5855)
!5858 = !DILocation(line: 7174, column: 44, scope: !5855)
!5859 = !DILocation(line: 7173, column: 16, scope: !5820)
!5860 = !DILocalVariable(name: "type", scope: !5861, file: !3, line: 7178, type: !1686)
!5861 = distinct !DILexicalBlock(scope: !5855, file: !3, line: 7175, column: 2)
!5862 = !DILocation(line: 7178, column: 9, scope: !5861)
!5863 = !DILocation(line: 7178, column: 16, scope: !5861)
!5864 = !DILocalVariable(name: "tmp", scope: !5861, file: !3, line: 7187, type: !1686)
!5865 = !DILocation(line: 7187, column: 9, scope: !5861)
!5866 = !DILocation(line: 7187, column: 35, scope: !5861)
!5867 = !DILocation(line: 7187, column: 15, scope: !5861)
!5868 = !DILocation(line: 7188, column: 24, scope: !5861)
!5869 = !DILocation(line: 7188, column: 4, scope: !5861)
!5870 = !DILocation(line: 7189, column: 21, scope: !5861)
!5871 = !DILocation(line: 7189, column: 27, scope: !5861)
!5872 = !DILocation(line: 7189, column: 26, scope: !5861)
!5873 = !DILocation(line: 7189, column: 35, scope: !5861)
!5874 = !DILocation(line: 7189, column: 4, scope: !5861)
!5875 = !DILocation(line: 7190, column: 5, scope: !5861)
!5876 = !DILocation(line: 7190, column: 12, scope: !5861)
!5877 = !DILocation(line: 7191, column: 2, scope: !5861)
!5878 = !DILocation(line: 7198, column: 3, scope: !5855)
!5879 = !DILocation(line: 7198, column: 10, scope: !5855)
!5880 = !DILocation(line: 7199, column: 5, scope: !5814)
!5881 = !DILocation(line: 7203, column: 7, scope: !5882)
!5882 = distinct !DILexicalBlock(scope: !4893, file: !3, line: 7203, column: 7)
!5883 = !DILocation(line: 7203, column: 16, scope: !5882)
!5884 = !DILocation(line: 7203, column: 27, scope: !5882)
!5885 = !DILocation(line: 7203, column: 30, scope: !5882)
!5886 = !DILocation(line: 7203, column: 7, scope: !4893)
!5887 = !DILocation(line: 7207, column: 8, scope: !5888)
!5888 = distinct !DILexicalBlock(scope: !5882, file: !3, line: 7204, column: 5)
!5889 = !DILocation(line: 7207, column: 15, scope: !5888)
!5890 = !DILocation(line: 7209, column: 32, scope: !5891)
!5891 = distinct !DILexicalBlock(scope: !5888, file: !3, line: 7209, column: 11)
!5892 = !DILocation(line: 7209, column: 12, scope: !5891)
!5893 = !DILocation(line: 7210, column: 4, scope: !5891)
!5894 = !DILocation(line: 7210, column: 28, scope: !5891)
!5895 = !DILocation(line: 7210, column: 8, scope: !5891)
!5896 = !DILocation(line: 7209, column: 11, scope: !5888)
!5897 = !DILocation(line: 7212, column: 41, scope: !5898)
!5898 = distinct !DILexicalBlock(scope: !5891, file: !3, line: 7211, column: 2)
!5899 = !DILocation(line: 7212, column: 4, scope: !5898)
!5900 = !DILocation(line: 7213, column: 26, scope: !5898)
!5901 = !DILocation(line: 7213, column: 33, scope: !5898)
!5902 = !DILocation(line: 7213, column: 4, scope: !5898)
!5903 = !DILocation(line: 7214, column: 2, scope: !5898)
!5904 = !DILocation(line: 7220, column: 33, scope: !5905)
!5905 = distinct !DILexicalBlock(scope: !5888, file: !3, line: 7220, column: 11)
!5906 = !DILocation(line: 7220, column: 32, scope: !5905)
!5907 = !DILocation(line: 7220, column: 12, scope: !5905)
!5908 = !DILocation(line: 7220, column: 11, scope: !5888)
!5909 = !DILocation(line: 7221, column: 37, scope: !5905)
!5910 = !DILocation(line: 7221, column: 36, scope: !5905)
!5911 = !DILocation(line: 7221, column: 58, scope: !5905)
!5912 = !DILocation(line: 7221, column: 2, scope: !5905)
!5913 = !DILocation(line: 7223, column: 33, scope: !5914)
!5914 = distinct !DILexicalBlock(scope: !5888, file: !3, line: 7223, column: 11)
!5915 = !DILocation(line: 7223, column: 32, scope: !5914)
!5916 = !DILocation(line: 7223, column: 12, scope: !5914)
!5917 = !DILocation(line: 7223, column: 11, scope: !5888)
!5918 = !DILocation(line: 7224, column: 37, scope: !5914)
!5919 = !DILocation(line: 7224, column: 36, scope: !5914)
!5920 = !DILocation(line: 7225, column: 8, scope: !5914)
!5921 = !DILocation(line: 7224, column: 2, scope: !5914)
!5922 = !DILocation(line: 7227, column: 7, scope: !5888)
!5923 = !DILocation(line: 7262, column: 27, scope: !5924)
!5924 = distinct !DILexicalBlock(scope: !4893, file: !3, line: 7262, column: 7)
!5925 = !DILocation(line: 7262, column: 7, scope: !5924)
!5926 = !DILocation(line: 7262, column: 42, scope: !5924)
!5927 = !DILocation(line: 7262, column: 47, scope: !5924)
!5928 = !DILocation(line: 7262, column: 64, scope: !5924)
!5929 = !DILocation(line: 7262, column: 63, scope: !5924)
!5930 = !DILocation(line: 7262, column: 45, scope: !5924)
!5931 = !DILocation(line: 7262, column: 7, scope: !4893)
!5932 = !DILocation(line: 7263, column: 5, scope: !5924)
!5933 = !DILocation(line: 7272, column: 8, scope: !5934)
!5934 = distinct !DILexicalBlock(scope: !4893, file: !3, line: 7272, column: 7)
!5935 = !DILocation(line: 7272, column: 17, scope: !5934)
!5936 = !DILocation(line: 7273, column: 7, scope: !5934)
!5937 = !DILocation(line: 7273, column: 30, scope: !5934)
!5938 = !DILocation(line: 7273, column: 10, scope: !5934)
!5939 = !DILocation(line: 7274, column: 7, scope: !5934)
!5940 = !DILocation(line: 7274, column: 34, scope: !5934)
!5941 = !DILocation(line: 7274, column: 33, scope: !5934)
!5942 = !DILocation(line: 7274, column: 10, scope: !5934)
!5943 = !DILocation(line: 7272, column: 7, scope: !4893)
!5944 = !DILocation(line: 7279, column: 39, scope: !5945)
!5945 = distinct !DILexicalBlock(scope: !5934, file: !3, line: 7275, column: 5)
!5946 = !DILocation(line: 7279, column: 56, scope: !5945)
!5947 = !DILocation(line: 7279, column: 55, scope: !5945)
!5948 = !DILocation(line: 7279, column: 13, scope: !5945)
!5949 = !DILocation(line: 7279, column: 11, scope: !5945)
!5950 = !DILocation(line: 7280, column: 28, scope: !5945)
!5951 = !DILocation(line: 7280, column: 35, scope: !5945)
!5952 = !DILocation(line: 7280, column: 7, scope: !5945)
!5953 = !DILocation(line: 7281, column: 17, scope: !5945)
!5954 = !DILocation(line: 7281, column: 8, scope: !5945)
!5955 = !DILocation(line: 7281, column: 15, scope: !5945)
!5956 = !DILocation(line: 7282, column: 5, scope: !5945)
!5957 = !DILocation(line: 7283, column: 13, scope: !5958)
!5958 = distinct !DILexicalBlock(scope: !5934, file: !3, line: 7283, column: 12)
!5959 = !DILocation(line: 7283, column: 22, scope: !5958)
!5960 = !DILocation(line: 7283, column: 35, scope: !5958)
!5961 = !DILocation(line: 7283, column: 66, scope: !5958)
!5962 = !DILocation(line: 7283, column: 65, scope: !5958)
!5963 = !DILocation(line: 7283, column: 38, scope: !5958)
!5964 = !DILocation(line: 7283, column: 12, scope: !5934)
!5965 = !DILocation(line: 7289, column: 7, scope: !5966)
!5966 = distinct !DILexicalBlock(scope: !5958, file: !3, line: 7284, column: 5)
!5967 = !DILocation(line: 7291, column: 32, scope: !5968)
!5968 = distinct !DILexicalBlock(scope: !5966, file: !3, line: 7291, column: 11)
!5969 = !DILocation(line: 7291, column: 12, scope: !5968)
!5970 = !DILocation(line: 7291, column: 47, scope: !5968)
!5971 = !DILocation(line: 7291, column: 51, scope: !5968)
!5972 = !DILocation(line: 7291, column: 60, scope: !5968)
!5973 = !DILocation(line: 7291, column: 11, scope: !5966)
!5974 = !DILocation(line: 7296, column: 40, scope: !5975)
!5975 = distinct !DILexicalBlock(scope: !5968, file: !3, line: 7295, column: 2)
!5976 = !DILocation(line: 7296, column: 39, scope: !5975)
!5977 = !DILocation(line: 7296, column: 48, scope: !5975)
!5978 = !DILocation(line: 7296, column: 55, scope: !5975)
!5979 = !DILocation(line: 7296, column: 14, scope: !5975)
!5980 = !DILocation(line: 7296, column: 5, scope: !5975)
!5981 = !DILocation(line: 7296, column: 12, scope: !5975)
!5982 = !DILocation(line: 7297, column: 8, scope: !5983)
!5983 = distinct !DILexicalBlock(scope: !5975, file: !3, line: 7297, column: 8)
!5984 = !DILocation(line: 7297, column: 40, scope: !5983)
!5985 = !DILocation(line: 7298, column: 8, scope: !5983)
!5986 = !DILocation(line: 7298, column: 11, scope: !5983)
!5987 = !DILocation(line: 7298, column: 43, scope: !5983)
!5988 = !DILocation(line: 7297, column: 8, scope: !5975)
!5989 = !DILocation(line: 7299, column: 6, scope: !5983)
!5990 = !DILocation(line: 7299, column: 34, scope: !5983)
!5991 = !DILocation(line: 7300, column: 2, scope: !5975)
!5992 = !DILocation(line: 7302, column: 33, scope: !5968)
!5993 = !DILocation(line: 7302, column: 32, scope: !5968)
!5994 = !DILocation(line: 7302, column: 41, scope: !5968)
!5995 = !DILocation(line: 7302, column: 12, scope: !5968)
!5996 = !DILocation(line: 7302, column: 3, scope: !5968)
!5997 = !DILocation(line: 7302, column: 10, scope: !5968)
!5998 = !DILocation(line: 7303, column: 5, scope: !5966)
!5999 = !DILocation(line: 7315, column: 7, scope: !6000)
!6000 = distinct !DILexicalBlock(scope: !5958, file: !3, line: 7305, column: 5)
!6001 = !DILocation(line: 7320, column: 11, scope: !6000)
!6002 = !DILocation(line: 7321, column: 7, scope: !6000)
!6003 = !DILocation(line: 7325, column: 3, scope: !4893)
!6004 = !DILocation(line: 7327, column: 28, scope: !6005)
!6005 = distinct !DILexicalBlock(scope: !4893, file: !3, line: 7327, column: 7)
!6006 = !DILocation(line: 7327, column: 8, scope: !6005)
!6007 = !DILocation(line: 7327, column: 7, scope: !4893)
!6008 = !DILocation(line: 7329, column: 35, scope: !6009)
!6009 = distinct !DILexicalBlock(scope: !6005, file: !3, line: 7328, column: 5)
!6010 = !DILocation(line: 7329, column: 50, scope: !6009)
!6011 = !DILocation(line: 7329, column: 7, scope: !6009)
!6012 = !DILocation(line: 7330, column: 29, scope: !6009)
!6013 = !DILocation(line: 7330, column: 36, scope: !6009)
!6014 = !DILocation(line: 7330, column: 7, scope: !6009)
!6015 = !DILocation(line: 7331, column: 5, scope: !6009)
!6016 = !DILocation(line: 7327, column: 41, scope: !6005)
!6017 = !DILabel(scope: !4893, name: "out", file: !3, line: 7333)
!6018 = !DILocation(line: 7333, column: 2, scope: !4893)
!6019 = !DILocation(line: 7334, column: 20, scope: !4893)
!6020 = !DILocation(line: 7334, column: 18, scope: !4893)
!6021 = !DILocation(line: 7335, column: 10, scope: !4893)
!6022 = !DILocation(line: 7335, column: 3, scope: !4893)
!6023 = !DILocation(line: 7336, column: 1, scope: !4893)
!6024 = distinct !DISubprogram(name: "omp_firstprivatize_variable", scope: !3, file: !3, line: 5279, type: !6025, scopeLine: 5280, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!6025 = !DISubroutineType(types: !6026)
!6026 = !{null, !3146, !1686}
!6027 = !DILocalVariable(name: "ctx", arg: 1, scope: !6024, file: !3, line: 5279, type: !3146)
!6028 = !DILocation(line: 5279, column: 55, scope: !6024)
!6029 = !DILocalVariable(name: "decl", arg: 2, scope: !6024, file: !3, line: 5279, type: !1686)
!6030 = !DILocation(line: 5279, column: 65, scope: !6024)
!6031 = !DILocalVariable(name: "n", scope: !6024, file: !3, line: 5281, type: !3156)
!6032 = !DILocation(line: 5281, column: 19, scope: !6024)
!6033 = !DILocation(line: 5283, column: 7, scope: !6034)
!6034 = distinct !DILexicalBlock(scope: !6024, file: !3, line: 5283, column: 7)
!6035 = !DILocation(line: 5283, column: 12, scope: !6034)
!6036 = !DILocation(line: 5283, column: 20, scope: !6034)
!6037 = !DILocation(line: 5283, column: 24, scope: !6034)
!6038 = !DILocation(line: 5283, column: 7, scope: !6024)
!6039 = !DILocation(line: 5284, column: 5, scope: !6034)
!6040 = !DILocation(line: 5286, column: 3, scope: !6024)
!6041 = !DILocation(line: 5288, column: 30, scope: !6042)
!6042 = distinct !DILexicalBlock(scope: !6024, file: !3, line: 5287, column: 5)
!6043 = !DILocation(line: 5288, column: 35, scope: !6042)
!6044 = !DILocation(line: 5288, column: 62, scope: !6042)
!6045 = !DILocation(line: 5288, column: 46, scope: !6042)
!6046 = !DILocation(line: 5288, column: 11, scope: !6042)
!6047 = !DILocation(line: 5288, column: 9, scope: !6042)
!6048 = !DILocation(line: 5289, column: 11, scope: !6049)
!6049 = distinct !DILexicalBlock(scope: !6042, file: !3, line: 5289, column: 11)
!6050 = !DILocation(line: 5289, column: 13, scope: !6049)
!6051 = !DILocation(line: 5289, column: 11, scope: !6042)
!6052 = !DILocation(line: 5291, column: 8, scope: !6053)
!6053 = distinct !DILexicalBlock(scope: !6054, file: !3, line: 5291, column: 8)
!6054 = distinct !DILexicalBlock(scope: !6049, file: !3, line: 5290, column: 2)
!6055 = !DILocation(line: 5291, column: 11, scope: !6053)
!6056 = !DILocation(line: 5291, column: 17, scope: !6053)
!6057 = !DILocation(line: 5291, column: 8, scope: !6054)
!6058 = !DILocation(line: 5292, column: 38, scope: !6053)
!6059 = !DILocation(line: 5292, column: 41, scope: !6053)
!6060 = !DILocation(line: 5292, column: 47, scope: !6053)
!6061 = !DILocation(line: 5292, column: 35, scope: !6053)
!6062 = !DILocation(line: 5292, column: 6, scope: !6053)
!6063 = !DILocation(line: 5292, column: 9, scope: !6053)
!6064 = !DILocation(line: 5292, column: 15, scope: !6053)
!6065 = !DILocation(line: 5294, column: 6, scope: !6053)
!6066 = !DILocation(line: 5295, column: 2, scope: !6054)
!6067 = !DILocation(line: 5296, column: 16, scope: !6068)
!6068 = distinct !DILexicalBlock(scope: !6049, file: !3, line: 5296, column: 16)
!6069 = !DILocation(line: 5296, column: 21, scope: !6068)
!6070 = !DILocation(line: 5296, column: 33, scope: !6068)
!6071 = !DILocation(line: 5296, column: 16, scope: !6049)
!6072 = !DILocation(line: 5297, column: 20, scope: !6068)
!6073 = !DILocation(line: 5297, column: 25, scope: !6068)
!6074 = !DILocation(line: 5297, column: 2, scope: !6068)
!6075 = !DILocation(line: 5299, column: 13, scope: !6042)
!6076 = !DILocation(line: 5299, column: 18, scope: !6042)
!6077 = !DILocation(line: 5299, column: 11, scope: !6042)
!6078 = !DILocation(line: 5300, column: 5, scope: !6042)
!6079 = !DILocation(line: 5301, column: 10, scope: !6024)
!6080 = distinct !{!6080, !6040, !6081}
!6081 = !DILocation(line: 5301, column: 13, scope: !6024)
!6082 = !DILocation(line: 5302, column: 1, scope: !6024)
!6083 = distinct !DISubprogram(name: "gsi_last", scope: !385, file: !385, line: 4435, type: !4079, scopeLine: 4436, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!6084 = !DILocalVariable(name: "seq", arg: 1, scope: !6083, file: !385, line: 4435, type: !2004)
!6085 = !DILocation(line: 4435, column: 22, scope: !6083)
!6086 = !DILocalVariable(name: "i", scope: !6083, file: !385, line: 4437, type: !4033)
!6087 = !DILocation(line: 4437, column: 24, scope: !6083)
!6088 = !DILocation(line: 4439, column: 28, scope: !6083)
!6089 = !DILocation(line: 4439, column: 11, scope: !6083)
!6090 = !DILocation(line: 4439, column: 5, scope: !6083)
!6091 = !DILocation(line: 4439, column: 9, scope: !6083)
!6092 = !DILocation(line: 4440, column: 11, scope: !6083)
!6093 = !DILocation(line: 4440, column: 5, scope: !6083)
!6094 = !DILocation(line: 4440, column: 9, scope: !6083)
!6095 = !DILocation(line: 4441, column: 13, scope: !6083)
!6096 = !DILocation(line: 4441, column: 11, scope: !6083)
!6097 = !DILocation(line: 4441, column: 17, scope: !6083)
!6098 = !DILocation(line: 4441, column: 22, scope: !6083)
!6099 = !DILocation(line: 4441, column: 27, scope: !6083)
!6100 = !DILocation(line: 4441, column: 20, scope: !6083)
!6101 = !DILocation(line: 4441, column: 10, scope: !6083)
!6102 = !DILocation(line: 4441, column: 48, scope: !6083)
!6103 = !DILocation(line: 4441, column: 53, scope: !6083)
!6104 = !DILocation(line: 4441, column: 35, scope: !6083)
!6105 = !DILocation(line: 4441, column: 5, scope: !6083)
!6106 = !DILocation(line: 4441, column: 8, scope: !6083)
!6107 = !DILocation(line: 4443, column: 3, scope: !6083)
!6108 = distinct !DISubprogram(name: "gimplify_self_mod_expr", scope: !3, file: !3, line: 2073, type: !6109, scopeLine: 2075, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!6109 = !DISubroutineType(types: !6110)
!6110 = !{!1329, !2049, !3489, !3489, !1804}
!6111 = !DILocalVariable(name: "expr_p", arg: 1, scope: !6108, file: !3, line: 2073, type: !2049)
!6112 = !DILocation(line: 2073, column: 31, scope: !6108)
!6113 = !DILocalVariable(name: "pre_p", arg: 2, scope: !6108, file: !3, line: 2073, type: !3489)
!6114 = !DILocation(line: 2073, column: 51, scope: !6108)
!6115 = !DILocalVariable(name: "post_p", arg: 3, scope: !6108, file: !3, line: 2073, type: !3489)
!6116 = !DILocation(line: 2073, column: 70, scope: !6108)
!6117 = !DILocalVariable(name: "want_value", arg: 4, scope: !6108, file: !3, line: 2074, type: !1804)
!6118 = !DILocation(line: 2074, column: 9, scope: !6108)
!6119 = !DILocalVariable(name: "code", scope: !6108, file: !3, line: 2076, type: !134)
!6120 = !DILocation(line: 2076, column: 18, scope: !6108)
!6121 = !DILocalVariable(name: "lhs", scope: !6108, file: !3, line: 2077, type: !1686)
!6122 = !DILocation(line: 2077, column: 8, scope: !6108)
!6123 = !DILocalVariable(name: "lvalue", scope: !6108, file: !3, line: 2077, type: !1686)
!6124 = !DILocation(line: 2077, column: 13, scope: !6108)
!6125 = !DILocalVariable(name: "rhs", scope: !6108, file: !3, line: 2077, type: !1686)
!6126 = !DILocation(line: 2077, column: 21, scope: !6108)
!6127 = !DILocalVariable(name: "t1", scope: !6108, file: !3, line: 2077, type: !1686)
!6128 = !DILocation(line: 2077, column: 26, scope: !6108)
!6129 = !DILocalVariable(name: "post", scope: !6108, file: !3, line: 2078, type: !2004)
!6130 = !DILocation(line: 2078, column: 14, scope: !6108)
!6131 = !DILocalVariable(name: "orig_post_p", scope: !6108, file: !3, line: 2078, type: !3489)
!6132 = !DILocation(line: 2078, column: 28, scope: !6108)
!6133 = !DILocation(line: 2078, column: 42, scope: !6108)
!6134 = !DILocalVariable(name: "postfix", scope: !6108, file: !3, line: 2079, type: !1804)
!6135 = !DILocation(line: 2079, column: 8, scope: !6108)
!6136 = !DILocalVariable(name: "arith_code", scope: !6108, file: !3, line: 2080, type: !134)
!6137 = !DILocation(line: 2080, column: 18, scope: !6108)
!6138 = !DILocalVariable(name: "ret", scope: !6108, file: !3, line: 2081, type: !1329)
!6139 = !DILocation(line: 2081, column: 24, scope: !6108)
!6140 = !DILocalVariable(name: "loc", scope: !6108, file: !3, line: 2082, type: !1812)
!6141 = !DILocation(line: 2082, column: 14, scope: !6108)
!6142 = !DILocation(line: 2082, column: 20, scope: !6108)
!6143 = !DILocation(line: 2084, column: 10, scope: !6108)
!6144 = !DILocation(line: 2084, column: 8, scope: !6108)
!6145 = !DILocation(line: 2086, column: 3, scope: !6108)
!6146 = !DILocation(line: 2090, column: 7, scope: !6147)
!6147 = distinct !DILexicalBlock(scope: !6108, file: !3, line: 2090, column: 7)
!6148 = !DILocation(line: 2090, column: 12, scope: !6147)
!6149 = !DILocation(line: 2090, column: 34, scope: !6147)
!6150 = !DILocation(line: 2090, column: 37, scope: !6147)
!6151 = !DILocation(line: 2090, column: 42, scope: !6147)
!6152 = !DILocation(line: 2090, column: 7, scope: !6108)
!6153 = !DILocation(line: 2092, column: 15, scope: !6147)
!6154 = !DILocation(line: 2092, column: 13, scope: !6147)
!6155 = !DILocation(line: 2092, column: 5, scope: !6147)
!6156 = !DILocation(line: 2094, column: 13, scope: !6147)
!6157 = !DILocation(line: 2098, column: 7, scope: !6158)
!6158 = distinct !DILexicalBlock(scope: !6108, file: !3, line: 2098, column: 7)
!6159 = !DILocation(line: 2098, column: 7, scope: !6108)
!6160 = !DILocation(line: 2099, column: 12, scope: !6158)
!6161 = !DILocation(line: 2099, column: 5, scope: !6158)
!6162 = !DILocation(line: 2102, column: 7, scope: !6163)
!6163 = distinct !DILexicalBlock(scope: !6108, file: !3, line: 2102, column: 7)
!6164 = !DILocation(line: 2102, column: 12, scope: !6163)
!6165 = !DILocation(line: 2102, column: 33, scope: !6163)
!6166 = !DILocation(line: 2102, column: 36, scope: !6163)
!6167 = !DILocation(line: 2102, column: 41, scope: !6163)
!6168 = !DILocation(line: 2102, column: 7, scope: !6108)
!6169 = !DILocation(line: 2103, column: 16, scope: !6163)
!6170 = !DILocation(line: 2103, column: 5, scope: !6163)
!6171 = !DILocation(line: 2105, column: 16, scope: !6163)
!6172 = !DILocation(line: 2108, column: 12, scope: !6108)
!6173 = !DILocation(line: 2108, column: 10, scope: !6108)
!6174 = !DILocation(line: 2109, column: 33, scope: !6108)
!6175 = !DILocation(line: 2109, column: 40, scope: !6108)
!6176 = !DILocation(line: 2109, column: 9, scope: !6108)
!6177 = !DILocation(line: 2109, column: 7, scope: !6108)
!6178 = !DILocation(line: 2110, column: 7, scope: !6179)
!6179 = distinct !DILexicalBlock(scope: !6108, file: !3, line: 2110, column: 7)
!6180 = !DILocation(line: 2110, column: 11, scope: !6179)
!6181 = !DILocation(line: 2110, column: 7, scope: !6108)
!6182 = !DILocation(line: 2111, column: 12, scope: !6179)
!6183 = !DILocation(line: 2111, column: 5, scope: !6179)
!6184 = !DILocation(line: 2114, column: 9, scope: !6108)
!6185 = !DILocation(line: 2114, column: 7, scope: !6108)
!6186 = !DILocation(line: 2115, column: 9, scope: !6108)
!6187 = !DILocation(line: 2115, column: 7, scope: !6108)
!6188 = !DILocation(line: 2121, column: 7, scope: !6189)
!6189 = distinct !DILexicalBlock(scope: !6108, file: !3, line: 2121, column: 7)
!6190 = !DILocation(line: 2121, column: 7, scope: !6108)
!6191 = !DILocation(line: 2123, column: 32, scope: !6192)
!6192 = distinct !DILexicalBlock(scope: !6193, file: !3, line: 2123, column: 11)
!6193 = distinct !DILexicalBlock(scope: !6189, file: !3, line: 2122, column: 5)
!6194 = !DILocation(line: 2123, column: 12, scope: !6192)
!6195 = !DILocation(line: 2123, column: 11, scope: !6193)
!6196 = !DILocation(line: 2125, column: 22, scope: !6197)
!6197 = distinct !DILexicalBlock(scope: !6192, file: !3, line: 2124, column: 2)
!6198 = !DILocation(line: 2125, column: 4, scope: !6197)
!6199 = !DILocation(line: 2126, column: 39, scope: !6197)
!6200 = !DILocation(line: 2126, column: 55, scope: !6197)
!6201 = !DILocation(line: 2126, column: 13, scope: !6197)
!6202 = !DILocation(line: 2126, column: 11, scope: !6197)
!6203 = !DILocation(line: 2127, column: 28, scope: !6197)
!6204 = !DILocation(line: 2127, column: 35, scope: !6197)
!6205 = !DILocation(line: 2127, column: 4, scope: !6197)
!6206 = !DILocation(line: 2128, column: 42, scope: !6197)
!6207 = !DILocation(line: 2128, column: 58, scope: !6197)
!6208 = !DILocation(line: 2128, column: 13, scope: !6197)
!6209 = !DILocation(line: 2128, column: 11, scope: !6197)
!6210 = !DILocation(line: 2129, column: 2, scope: !6197)
!6211 = !DILocation(line: 2130, column: 34, scope: !6193)
!6212 = !DILocation(line: 2130, column: 41, scope: !6193)
!6213 = !DILocation(line: 2130, column: 13, scope: !6193)
!6214 = !DILocation(line: 2130, column: 11, scope: !6193)
!6215 = !DILocation(line: 2131, column: 11, scope: !6216)
!6216 = distinct !DILexicalBlock(scope: !6193, file: !3, line: 2131, column: 11)
!6217 = !DILocation(line: 2131, column: 15, scope: !6216)
!6218 = !DILocation(line: 2131, column: 11, scope: !6193)
!6219 = !DILocation(line: 2132, column: 9, scope: !6216)
!6220 = !DILocation(line: 2132, column: 2, scope: !6216)
!6221 = !DILocation(line: 2133, column: 5, scope: !6193)
!6222 = !DILocation(line: 2136, column: 7, scope: !6223)
!6223 = distinct !DILexicalBlock(scope: !6108, file: !3, line: 2136, column: 7)
!6224 = !DILocation(line: 2136, column: 7, scope: !6108)
!6225 = !DILocation(line: 2138, column: 31, scope: !6226)
!6226 = distinct !DILexicalBlock(scope: !6223, file: !3, line: 2137, column: 5)
!6227 = !DILocation(line: 2138, column: 36, scope: !6226)
!6228 = !DILocation(line: 2138, column: 46, scope: !6226)
!6229 = !DILocation(line: 2138, column: 13, scope: !6226)
!6230 = !DILocation(line: 2138, column: 11, scope: !6226)
!6231 = !DILocation(line: 2139, column: 11, scope: !6232)
!6232 = distinct !DILexicalBlock(scope: !6226, file: !3, line: 2139, column: 11)
!6233 = !DILocation(line: 2139, column: 22, scope: !6232)
!6234 = !DILocation(line: 2139, column: 11, scope: !6226)
!6235 = !DILocation(line: 2140, column: 8, scope: !6232)
!6236 = !DILocation(line: 2140, column: 6, scope: !6232)
!6237 = !DILocation(line: 2140, column: 2, scope: !6232)
!6238 = !DILocation(line: 2141, column: 18, scope: !6226)
!6239 = !DILocation(line: 2142, column: 5, scope: !6226)
!6240 = !DILocation(line: 2144, column: 8, scope: !6108)
!6241 = !DILocation(line: 2144, column: 6, scope: !6108)
!6242 = !DILocation(line: 2146, column: 7, scope: !6243)
!6243 = distinct !DILexicalBlock(scope: !6108, file: !3, line: 2146, column: 7)
!6244 = !DILocation(line: 2146, column: 7, scope: !6108)
!6245 = !DILocation(line: 2148, column: 24, scope: !6246)
!6246 = distinct !DILexicalBlock(scope: !6243, file: !3, line: 2147, column: 5)
!6247 = !DILocation(line: 2148, column: 32, scope: !6246)
!6248 = !DILocation(line: 2148, column: 36, scope: !6246)
!6249 = !DILocation(line: 2148, column: 7, scope: !6246)
!6250 = !DILocation(line: 2149, column: 29, scope: !6246)
!6251 = !DILocation(line: 2149, column: 42, scope: !6246)
!6252 = !DILocation(line: 2149, column: 7, scope: !6246)
!6253 = !DILocation(line: 2150, column: 17, scope: !6246)
!6254 = !DILocation(line: 2150, column: 8, scope: !6246)
!6255 = !DILocation(line: 2150, column: 15, scope: !6246)
!6256 = !DILocation(line: 2151, column: 7, scope: !6246)
!6257 = !DILocation(line: 2155, column: 17, scope: !6258)
!6258 = distinct !DILexicalBlock(scope: !6243, file: !3, line: 2154, column: 5)
!6259 = !DILocation(line: 2155, column: 8, scope: !6258)
!6260 = !DILocation(line: 2155, column: 15, scope: !6258)
!6261 = !DILocation(line: 2156, column: 7, scope: !6258)
!6262 = !DILocation(line: 2158, column: 1, scope: !6108)
!6263 = distinct !DISubprogram(name: "gimplify_compound_lval", scope: !3, file: !3, line: 1891, type: !6264, scopeLine: 1893, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!6264 = !DISubroutineType(types: !6265)
!6265 = !{!1329, !2049, !3489, !3489, !4896}
!6266 = !DILocalVariable(name: "expr_p", arg: 1, scope: !6263, file: !3, line: 1891, type: !2049)
!6267 = !DILocation(line: 1891, column: 31, scope: !6263)
!6268 = !DILocalVariable(name: "pre_p", arg: 2, scope: !6263, file: !3, line: 1891, type: !3489)
!6269 = !DILocation(line: 1891, column: 51, scope: !6263)
!6270 = !DILocalVariable(name: "post_p", arg: 3, scope: !6263, file: !3, line: 1891, type: !3489)
!6271 = !DILocation(line: 1891, column: 70, scope: !6263)
!6272 = !DILocalVariable(name: "fallback", arg: 4, scope: !6263, file: !3, line: 1892, type: !4896)
!6273 = !DILocation(line: 1892, column: 15, scope: !6263)
!6274 = !DILocalVariable(name: "p", scope: !6263, file: !3, line: 1894, type: !2049)
!6275 = !DILocation(line: 1894, column: 9, scope: !6263)
!6276 = !DILocalVariable(name: "stack", scope: !6263, file: !3, line: 1895, type: !3131)
!6277 = !DILocation(line: 1895, column: 19, scope: !6263)
!6278 = !DILocalVariable(name: "ret", scope: !6263, file: !3, line: 1896, type: !1329)
!6279 = !DILocation(line: 1896, column: 24, scope: !6263)
!6280 = !DILocalVariable(name: "tret", scope: !6263, file: !3, line: 1896, type: !1329)
!6281 = !DILocation(line: 1896, column: 37, scope: !6263)
!6282 = !DILocalVariable(name: "i", scope: !6263, file: !3, line: 1897, type: !1330)
!6283 = !DILocation(line: 1897, column: 7, scope: !6263)
!6284 = !DILocalVariable(name: "loc", scope: !6263, file: !3, line: 1898, type: !1812)
!6285 = !DILocation(line: 1898, column: 14, scope: !6263)
!6286 = !DILocation(line: 1898, column: 20, scope: !6263)
!6287 = !DILocation(line: 1902, column: 11, scope: !6263)
!6288 = !DILocation(line: 1902, column: 9, scope: !6263)
!6289 = !DILocation(line: 1905, column: 12, scope: !6290)
!6290 = distinct !DILexicalBlock(scope: !6263, file: !3, line: 1905, column: 3)
!6291 = !DILocation(line: 1905, column: 10, scope: !6290)
!6292 = !DILocation(line: 1905, column: 8, scope: !6290)
!6293 = !DILocation(line: 1906, column: 5, scope: !6294)
!6294 = distinct !DILexicalBlock(scope: !6290, file: !3, line: 1905, column: 3)
!6295 = !DILabel(scope: !6296, name: "restart", file: !3, line: 1907)
!6296 = distinct !DILexicalBlock(scope: !6294, file: !3, line: 1906, column: 5)
!6297 = !DILocation(line: 1907, column: 5, scope: !6296)
!6298 = !DILocation(line: 1909, column: 11, scope: !6299)
!6299 = distinct !DILexicalBlock(scope: !6296, file: !3, line: 1909, column: 11)
!6300 = !DILocation(line: 1909, column: 26, scope: !6299)
!6301 = !DILocation(line: 1909, column: 11, scope: !6296)
!6302 = !DILocation(line: 1910, column: 30, scope: !6299)
!6303 = !DILocation(line: 1910, column: 36, scope: !6299)
!6304 = !DILocation(line: 1910, column: 35, scope: !6299)
!6305 = !DILocation(line: 1910, column: 7, scope: !6299)
!6306 = !DILocation(line: 1910, column: 3, scope: !6299)
!6307 = !DILocation(line: 1910, column: 5, scope: !6299)
!6308 = !DILocation(line: 1910, column: 2, scope: !6299)
!6309 = !DILocation(line: 1912, column: 33, scope: !6310)
!6310 = distinct !DILexicalBlock(scope: !6296, file: !3, line: 1912, column: 11)
!6311 = !DILocation(line: 1912, column: 32, scope: !6310)
!6312 = !DILocation(line: 1912, column: 11, scope: !6310)
!6313 = !DILocation(line: 1912, column: 11, scope: !6296)
!6314 = !DILocation(line: 1916, column: 17, scope: !6315)
!6315 = distinct !DILexicalBlock(scope: !6310, file: !3, line: 1916, column: 16)
!6316 = !DILocation(line: 1916, column: 32, scope: !6315)
!6317 = !DILocation(line: 1916, column: 44, scope: !6315)
!6318 = !DILocation(line: 1916, column: 47, scope: !6315)
!6319 = !DILocation(line: 1916, column: 62, scope: !6315)
!6320 = !DILocation(line: 1917, column: 9, scope: !6315)
!6321 = !DILocation(line: 1917, column: 39, scope: !6315)
!6322 = !DILocation(line: 1917, column: 12, scope: !6315)
!6323 = !DILocation(line: 1917, column: 42, scope: !6315)
!6324 = !DILocation(line: 1916, column: 16, scope: !6310)
!6325 = !DILocation(line: 1918, column: 2, scope: !6315)
!6326 = !DILocation(line: 1920, column: 2, scope: !6315)
!6327 = !DILocation(line: 1922, column: 7, scope: !6296)
!6328 = !DILocation(line: 1923, column: 5, scope: !6296)
!6329 = !DILocation(line: 1905, column: 27, scope: !6294)
!6330 = !DILocation(line: 1905, column: 24, scope: !6294)
!6331 = !DILocation(line: 1905, column: 3, scope: !6294)
!6332 = distinct !{!6332, !6333, !6334}
!6333 = !DILocation(line: 1905, column: 3, scope: !6290)
!6334 = !DILocation(line: 1923, column: 5, scope: !6290)
!6335 = !DILocation(line: 1925, column: 3, scope: !6263)
!6336 = !DILocation(line: 1939, column: 12, scope: !6337)
!6337 = distinct !DILexicalBlock(scope: !6263, file: !3, line: 1939, column: 3)
!6338 = !DILocation(line: 1939, column: 37, scope: !6337)
!6339 = !DILocation(line: 1939, column: 10, scope: !6337)
!6340 = !DILocation(line: 1939, column: 8, scope: !6337)
!6341 = !DILocation(line: 1939, column: 42, scope: !6342)
!6342 = distinct !DILexicalBlock(scope: !6337, file: !3, line: 1939, column: 3)
!6343 = !DILocation(line: 1939, column: 44, scope: !6342)
!6344 = !DILocation(line: 1939, column: 3, scope: !6337)
!6345 = !DILocalVariable(name: "t", scope: !6346, file: !3, line: 1941, type: !1686)
!6346 = distinct !DILexicalBlock(scope: !6342, file: !3, line: 1940, column: 5)
!6347 = !DILocation(line: 1941, column: 12, scope: !6346)
!6348 = !DILocation(line: 1941, column: 16, scope: !6346)
!6349 = !DILocation(line: 1943, column: 11, scope: !6350)
!6350 = distinct !DILexicalBlock(scope: !6346, file: !3, line: 1943, column: 11)
!6351 = !DILocation(line: 1943, column: 25, scope: !6350)
!6352 = !DILocation(line: 1943, column: 38, scope: !6350)
!6353 = !DILocation(line: 1943, column: 41, scope: !6350)
!6354 = !DILocation(line: 1943, column: 55, scope: !6350)
!6355 = !DILocation(line: 1943, column: 11, scope: !6346)
!6356 = !DILocation(line: 1948, column: 8, scope: !6357)
!6357 = distinct !DILexicalBlock(scope: !6358, file: !3, line: 1948, column: 8)
!6358 = distinct !DILexicalBlock(scope: !6350, file: !3, line: 1944, column: 2)
!6359 = !DILocation(line: 1948, column: 28, scope: !6357)
!6360 = !DILocation(line: 1948, column: 8, scope: !6358)
!6361 = !DILocalVariable(name: "low", scope: !6362, file: !3, line: 1950, type: !1686)
!6362 = distinct !DILexicalBlock(scope: !6357, file: !3, line: 1949, column: 6)
!6363 = !DILocation(line: 1950, column: 13, scope: !6362)
!6364 = !DILocation(line: 1950, column: 54, scope: !6362)
!6365 = !DILocation(line: 1950, column: 33, scope: !6362)
!6366 = !DILocation(line: 1950, column: 19, scope: !6362)
!6367 = !DILocation(line: 1951, column: 38, scope: !6368)
!6368 = distinct !DILexicalBlock(scope: !6362, file: !3, line: 1951, column: 12)
!6369 = !DILocation(line: 1951, column: 13, scope: !6368)
!6370 = !DILocation(line: 1951, column: 12, scope: !6362)
!6371 = !DILocation(line: 1953, column: 27, scope: !6372)
!6372 = distinct !DILexicalBlock(scope: !6368, file: !3, line: 1952, column: 3)
!6373 = !DILocation(line: 1953, column: 5, scope: !6372)
!6374 = !DILocation(line: 1953, column: 25, scope: !6372)
!6375 = !DILocation(line: 1954, column: 28, scope: !6372)
!6376 = !DILocation(line: 1954, column: 49, scope: !6372)
!6377 = !DILocation(line: 1955, column: 6, scope: !6372)
!6378 = !DILocation(line: 1954, column: 12, scope: !6372)
!6379 = !DILocation(line: 1954, column: 10, scope: !6372)
!6380 = !DILocation(line: 1957, column: 11, scope: !6372)
!6381 = !DILocation(line: 1957, column: 9, scope: !6372)
!6382 = !DILocation(line: 1958, column: 3, scope: !6372)
!6383 = !DILocation(line: 1959, column: 6, scope: !6362)
!6384 = !DILocation(line: 1961, column: 9, scope: !6385)
!6385 = distinct !DILexicalBlock(scope: !6358, file: !3, line: 1961, column: 8)
!6386 = !DILocation(line: 1961, column: 8, scope: !6358)
!6387 = !DILocalVariable(name: "elmt_type", scope: !6388, file: !3, line: 1963, type: !1686)
!6388 = distinct !DILexicalBlock(scope: !6385, file: !3, line: 1962, column: 6)
!6389 = !DILocation(line: 1963, column: 13, scope: !6388)
!6390 = !DILocation(line: 1963, column: 25, scope: !6388)
!6391 = !DILocalVariable(name: "elmt_size", scope: !6388, file: !3, line: 1964, type: !1686)
!6392 = !DILocation(line: 1964, column: 13, scope: !6388)
!6393 = !DILocation(line: 1964, column: 63, scope: !6388)
!6394 = !DILocation(line: 1964, column: 39, scope: !6388)
!6395 = !DILocation(line: 1964, column: 25, scope: !6388)
!6396 = !DILocalVariable(name: "factor", scope: !6388, file: !3, line: 1965, type: !1686)
!6397 = !DILocation(line: 1965, column: 13, scope: !6388)
!6398 = !DILocation(line: 1965, column: 22, scope: !6388)
!6399 = !DILocation(line: 1969, column: 36, scope: !6388)
!6400 = !DILocation(line: 1969, column: 57, scope: !6388)
!6401 = !DILocation(line: 1969, column: 68, scope: !6388)
!6402 = !DILocation(line: 1969, column: 20, scope: !6388)
!6403 = !DILocation(line: 1969, column: 18, scope: !6388)
!6404 = !DILocation(line: 1971, column: 38, scope: !6405)
!6405 = distinct !DILexicalBlock(scope: !6388, file: !3, line: 1971, column: 12)
!6406 = !DILocation(line: 1971, column: 13, scope: !6405)
!6407 = !DILocation(line: 1971, column: 12, scope: !6388)
!6408 = !DILocation(line: 1973, column: 27, scope: !6409)
!6409 = distinct !DILexicalBlock(scope: !6405, file: !3, line: 1972, column: 3)
!6410 = !DILocation(line: 1973, column: 5, scope: !6409)
!6411 = !DILocation(line: 1973, column: 25, scope: !6409)
!6412 = !DILocation(line: 1974, column: 28, scope: !6409)
!6413 = !DILocation(line: 1974, column: 49, scope: !6409)
!6414 = !DILocation(line: 1975, column: 6, scope: !6409)
!6415 = !DILocation(line: 1974, column: 12, scope: !6409)
!6416 = !DILocation(line: 1974, column: 10, scope: !6409)
!6417 = !DILocation(line: 1977, column: 11, scope: !6409)
!6418 = !DILocation(line: 1977, column: 9, scope: !6409)
!6419 = !DILocation(line: 1978, column: 3, scope: !6409)
!6420 = !DILocation(line: 1979, column: 6, scope: !6388)
!6421 = !DILocation(line: 1980, column: 2, scope: !6358)
!6422 = !DILocation(line: 1981, column: 16, scope: !6423)
!6423 = distinct !DILexicalBlock(scope: !6350, file: !3, line: 1981, column: 16)
!6424 = !DILocation(line: 1981, column: 30, scope: !6423)
!6425 = !DILocation(line: 1981, column: 16, scope: !6350)
!6426 = !DILocation(line: 1984, column: 9, scope: !6427)
!6427 = distinct !DILexicalBlock(scope: !6428, file: !3, line: 1984, column: 8)
!6428 = distinct !DILexicalBlock(scope: !6423, file: !3, line: 1982, column: 2)
!6429 = !DILocation(line: 1984, column: 8, scope: !6428)
!6430 = !DILocalVariable(name: "offset", scope: !6431, file: !3, line: 1986, type: !1686)
!6431 = distinct !DILexicalBlock(scope: !6427, file: !3, line: 1985, column: 6)
!6432 = !DILocation(line: 1986, column: 13, scope: !6431)
!6433 = !DILocation(line: 1986, column: 64, scope: !6431)
!6434 = !DILocation(line: 1986, column: 36, scope: !6431)
!6435 = !DILocation(line: 1986, column: 22, scope: !6431)
!6436 = !DILocalVariable(name: "field", scope: !6431, file: !3, line: 1987, type: !1686)
!6437 = !DILocation(line: 1987, column: 13, scope: !6431)
!6438 = !DILocation(line: 1987, column: 21, scope: !6431)
!6439 = !DILocalVariable(name: "factor", scope: !6431, file: !3, line: 1988, type: !1686)
!6440 = !DILocation(line: 1988, column: 13, scope: !6431)
!6441 = !DILocation(line: 1989, column: 5, scope: !6431)
!6442 = !DILocation(line: 1992, column: 33, scope: !6431)
!6443 = !DILocation(line: 1992, column: 54, scope: !6431)
!6444 = !DILocation(line: 1992, column: 62, scope: !6431)
!6445 = !DILocation(line: 1992, column: 17, scope: !6431)
!6446 = !DILocation(line: 1992, column: 15, scope: !6431)
!6447 = !DILocation(line: 1994, column: 38, scope: !6448)
!6448 = distinct !DILexicalBlock(scope: !6431, file: !3, line: 1994, column: 12)
!6449 = !DILocation(line: 1994, column: 13, scope: !6448)
!6450 = !DILocation(line: 1994, column: 12, scope: !6431)
!6451 = !DILocation(line: 1996, column: 27, scope: !6452)
!6452 = distinct !DILexicalBlock(scope: !6448, file: !3, line: 1995, column: 3)
!6453 = !DILocation(line: 1996, column: 5, scope: !6452)
!6454 = !DILocation(line: 1996, column: 25, scope: !6452)
!6455 = !DILocation(line: 1997, column: 28, scope: !6452)
!6456 = !DILocation(line: 1997, column: 49, scope: !6452)
!6457 = !DILocation(line: 1998, column: 6, scope: !6452)
!6458 = !DILocation(line: 1997, column: 12, scope: !6452)
!6459 = !DILocation(line: 1997, column: 10, scope: !6452)
!6460 = !DILocation(line: 2000, column: 11, scope: !6452)
!6461 = !DILocation(line: 2000, column: 9, scope: !6452)
!6462 = !DILocation(line: 2001, column: 3, scope: !6452)
!6463 = !DILocation(line: 2002, column: 6, scope: !6431)
!6464 = !DILocation(line: 2003, column: 2, scope: !6428)
!6465 = !DILocation(line: 2004, column: 5, scope: !6346)
!6466 = !DILocation(line: 1939, column: 51, scope: !6342)
!6467 = !DILocation(line: 1939, column: 3, scope: !6342)
!6468 = distinct !{!6468, !6344, !6469}
!6469 = !DILocation(line: 2004, column: 5, scope: !6337)
!6470 = !DILocation(line: 2009, column: 25, scope: !6263)
!6471 = !DILocation(line: 2009, column: 28, scope: !6263)
!6472 = !DILocation(line: 2009, column: 35, scope: !6263)
!6473 = !DILocation(line: 2010, column: 4, scope: !6263)
!6474 = !DILocation(line: 2010, column: 13, scope: !6263)
!6475 = !DILocation(line: 2009, column: 10, scope: !6263)
!6476 = !DILocation(line: 2009, column: 8, scope: !6263)
!6477 = !DILocation(line: 2011, column: 9, scope: !6263)
!6478 = !DILocation(line: 2011, column: 7, scope: !6263)
!6479 = !DILocation(line: 2015, column: 3, scope: !6263)
!6480 = !DILocation(line: 2015, column: 10, scope: !6481)
!6481 = distinct !DILexicalBlock(scope: !6482, file: !3, line: 2015, column: 3)
!6482 = distinct !DILexicalBlock(scope: !6263, file: !3, line: 2015, column: 3)
!6483 = !DILocation(line: 2015, column: 35, scope: !6481)
!6484 = !DILocation(line: 2015, column: 3, scope: !6482)
!6485 = !DILocalVariable(name: "t", scope: !6486, file: !3, line: 2017, type: !1686)
!6486 = distinct !DILexicalBlock(scope: !6481, file: !3, line: 2016, column: 5)
!6487 = !DILocation(line: 2017, column: 12, scope: !6486)
!6488 = !DILocation(line: 2017, column: 16, scope: !6486)
!6489 = !DILocation(line: 2019, column: 11, scope: !6490)
!6490 = distinct !DILexicalBlock(scope: !6486, file: !3, line: 2019, column: 11)
!6491 = !DILocation(line: 2019, column: 25, scope: !6490)
!6492 = !DILocation(line: 2019, column: 38, scope: !6490)
!6493 = !DILocation(line: 2019, column: 41, scope: !6490)
!6494 = !DILocation(line: 2019, column: 55, scope: !6490)
!6495 = !DILocation(line: 2019, column: 11, scope: !6486)
!6496 = !DILocation(line: 2022, column: 34, scope: !6497)
!6497 = distinct !DILexicalBlock(scope: !6498, file: !3, line: 2022, column: 8)
!6498 = distinct !DILexicalBlock(scope: !6490, file: !3, line: 2020, column: 2)
!6499 = !DILocation(line: 2022, column: 9, scope: !6497)
!6500 = !DILocation(line: 2022, column: 8, scope: !6498)
!6501 = !DILocation(line: 2024, column: 31, scope: !6502)
!6502 = distinct !DILexicalBlock(scope: !6497, file: !3, line: 2023, column: 6)
!6503 = !DILocation(line: 2024, column: 52, scope: !6502)
!6504 = !DILocation(line: 2024, column: 59, scope: !6502)
!6505 = !DILocation(line: 2024, column: 15, scope: !6502)
!6506 = !DILocation(line: 2024, column: 13, scope: !6502)
!6507 = !DILocation(line: 2026, column: 14, scope: !6502)
!6508 = !DILocation(line: 2026, column: 12, scope: !6502)
!6509 = !DILocation(line: 2027, column: 6, scope: !6502)
!6510 = !DILocation(line: 2028, column: 2, scope: !6498)
!6511 = !DILocation(line: 2029, column: 16, scope: !6512)
!6512 = distinct !DILexicalBlock(scope: !6490, file: !3, line: 2029, column: 16)
!6513 = !DILocation(line: 2029, column: 30, scope: !6512)
!6514 = !DILocation(line: 2029, column: 16, scope: !6490)
!6515 = !DILocation(line: 2031, column: 27, scope: !6516)
!6516 = distinct !DILexicalBlock(scope: !6512, file: !3, line: 2030, column: 2)
!6517 = !DILocation(line: 2031, column: 48, scope: !6516)
!6518 = !DILocation(line: 2031, column: 55, scope: !6516)
!6519 = !DILocation(line: 2031, column: 11, scope: !6516)
!6520 = !DILocation(line: 2031, column: 9, scope: !6516)
!6521 = !DILocation(line: 2033, column: 10, scope: !6516)
!6522 = !DILocation(line: 2033, column: 8, scope: !6516)
!6523 = !DILocation(line: 2034, column: 27, scope: !6516)
!6524 = !DILocation(line: 2034, column: 48, scope: !6516)
!6525 = !DILocation(line: 2034, column: 55, scope: !6516)
!6526 = !DILocation(line: 2034, column: 11, scope: !6516)
!6527 = !DILocation(line: 2034, column: 9, scope: !6516)
!6528 = !DILocation(line: 2036, column: 10, scope: !6516)
!6529 = !DILocation(line: 2036, column: 8, scope: !6516)
!6530 = !DILocation(line: 2037, column: 2, scope: !6516)
!6531 = !DILocation(line: 2039, column: 7, scope: !6486)
!6532 = !DILocation(line: 2045, column: 33, scope: !6486)
!6533 = !DILocation(line: 2045, column: 7, scope: !6486)
!6534 = !DILocation(line: 2015, column: 3, scope: !6481)
!6535 = distinct !{!6535, !6484, !6536}
!6536 = !DILocation(line: 2046, column: 5, scope: !6482)
!6537 = !DILocation(line: 2049, column: 8, scope: !6538)
!6538 = distinct !DILexicalBlock(scope: !6263, file: !3, line: 2049, column: 7)
!6539 = !DILocation(line: 2049, column: 17, scope: !6538)
!6540 = !DILocation(line: 2049, column: 30, scope: !6538)
!6541 = !DILocation(line: 2049, column: 33, scope: !6538)
!6542 = !DILocation(line: 2049, column: 53, scope: !6538)
!6543 = !DILocation(line: 2049, column: 7, scope: !6263)
!6544 = !DILocation(line: 2051, column: 35, scope: !6545)
!6545 = distinct !DILexicalBlock(scope: !6538, file: !3, line: 2050, column: 5)
!6546 = !DILocation(line: 2051, column: 7, scope: !6545)
!6547 = !DILocation(line: 2052, column: 13, scope: !6545)
!6548 = !DILocation(line: 2052, column: 11, scope: !6545)
!6549 = !DILocation(line: 2053, column: 5, scope: !6545)
!6550 = !DILocation(line: 2055, column: 3, scope: !6263)
!6551 = !DILocation(line: 2057, column: 10, scope: !6263)
!6552 = !DILocation(line: 2057, column: 3, scope: !6263)
!6553 = distinct !DISubprogram(name: "gimplify_cond_expr", scope: !3, file: !3, line: 2858, type: !6554, scopeLine: 2859, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!6554 = !DISubroutineType(types: !6555)
!6555 = !{!1329, !2049, !3489, !4896}
!6556 = !DILocalVariable(name: "expr_p", arg: 1, scope: !6553, file: !3, line: 2858, type: !2049)
!6557 = !DILocation(line: 2858, column: 27, scope: !6553)
!6558 = !DILocalVariable(name: "pre_p", arg: 2, scope: !6553, file: !3, line: 2858, type: !3489)
!6559 = !DILocation(line: 2858, column: 47, scope: !6553)
!6560 = !DILocalVariable(name: "fallback", arg: 3, scope: !6553, file: !3, line: 2858, type: !4896)
!6561 = !DILocation(line: 2858, column: 65, scope: !6553)
!6562 = !DILocalVariable(name: "expr", scope: !6553, file: !3, line: 2860, type: !1686)
!6563 = !DILocation(line: 2860, column: 8, scope: !6553)
!6564 = !DILocation(line: 2860, column: 16, scope: !6553)
!6565 = !DILocation(line: 2860, column: 15, scope: !6553)
!6566 = !DILocalVariable(name: "tmp", scope: !6553, file: !3, line: 2861, type: !1686)
!6567 = !DILocation(line: 2861, column: 8, scope: !6553)
!6568 = !DILocalVariable(name: "type", scope: !6553, file: !3, line: 2861, type: !1686)
!6569 = !DILocation(line: 2861, column: 13, scope: !6553)
!6570 = !DILocalVariable(name: "arm1", scope: !6553, file: !3, line: 2861, type: !1686)
!6571 = !DILocation(line: 2861, column: 19, scope: !6553)
!6572 = !DILocalVariable(name: "arm2", scope: !6553, file: !3, line: 2861, type: !1686)
!6573 = !DILocation(line: 2861, column: 25, scope: !6553)
!6574 = !DILocalVariable(name: "ret", scope: !6553, file: !3, line: 2862, type: !1329)
!6575 = !DILocation(line: 2862, column: 24, scope: !6553)
!6576 = !DILocalVariable(name: "label_true", scope: !6553, file: !3, line: 2863, type: !1686)
!6577 = !DILocation(line: 2863, column: 8, scope: !6553)
!6578 = !DILocalVariable(name: "label_false", scope: !6553, file: !3, line: 2863, type: !1686)
!6579 = !DILocation(line: 2863, column: 20, scope: !6553)
!6580 = !DILocalVariable(name: "label_cont", scope: !6553, file: !3, line: 2863, type: !1686)
!6581 = !DILocation(line: 2863, column: 33, scope: !6553)
!6582 = !DILocalVariable(name: "have_then_clause_p", scope: !6553, file: !3, line: 2864, type: !1804)
!6583 = !DILocation(line: 2864, column: 8, scope: !6553)
!6584 = !DILocalVariable(name: "have_else_clause_p", scope: !6553, file: !3, line: 2864, type: !1804)
!6585 = !DILocation(line: 2864, column: 28, scope: !6553)
!6586 = !DILocalVariable(name: "gimple_cond", scope: !6553, file: !3, line: 2865, type: !2014)
!6587 = !DILocation(line: 2865, column: 10, scope: !6553)
!6588 = !DILocalVariable(name: "pred_code", scope: !6553, file: !3, line: 2866, type: !134)
!6589 = !DILocation(line: 2866, column: 18, scope: !6553)
!6590 = !DILocalVariable(name: "seq", scope: !6553, file: !3, line: 2867, type: !2004)
!6591 = !DILocation(line: 2867, column: 14, scope: !6553)
!6592 = !DILocalVariable(name: "loc", scope: !6553, file: !3, line: 2868, type: !1812)
!6593 = !DILocation(line: 2868, column: 14, scope: !6553)
!6594 = !DILocation(line: 2868, column: 20, scope: !6553)
!6595 = !DILocation(line: 2870, column: 10, scope: !6553)
!6596 = !DILocation(line: 2870, column: 8, scope: !6553)
!6597 = !DILocation(line: 2874, column: 9, scope: !6598)
!6598 = distinct !DILexicalBlock(scope: !6553, file: !3, line: 2874, column: 7)
!6599 = !DILocation(line: 2874, column: 7, scope: !6553)
!6600 = !DILocalVariable(name: "result", scope: !6601, file: !3, line: 2876, type: !1686)
!6601 = distinct !DILexicalBlock(scope: !6598, file: !3, line: 2875, column: 5)
!6602 = !DILocation(line: 2876, column: 12, scope: !6601)
!6603 = !DILocation(line: 2880, column: 13, scope: !6604)
!6604 = distinct !DILexicalBlock(scope: !6601, file: !3, line: 2880, column: 11)
!6605 = !DILocation(line: 2880, column: 22, scope: !6604)
!6606 = !DILocation(line: 2881, column: 5, scope: !6604)
!6607 = !DILocation(line: 2881, column: 10, scope: !6604)
!6608 = !DILocation(line: 2881, column: 19, scope: !6604)
!6609 = !DILocation(line: 2882, column: 4, scope: !6604)
!6610 = !DILocation(line: 2882, column: 8, scope: !6604)
!6611 = !DILocation(line: 2880, column: 11, scope: !6601)
!6612 = !DILocation(line: 2884, column: 8, scope: !6613)
!6613 = distinct !DILexicalBlock(scope: !6614, file: !3, line: 2884, column: 8)
!6614 = distinct !DILexicalBlock(scope: !6604, file: !3, line: 2883, column: 2)
!6615 = !DILocation(line: 2884, column: 23, scope: !6613)
!6616 = !DILocation(line: 2887, column: 8, scope: !6613)
!6617 = !DILocation(line: 2887, column: 12, scope: !6613)
!6618 = !DILocation(line: 2888, column: 8, scope: !6613)
!6619 = !DILocation(line: 2888, column: 39, scope: !6613)
!6620 = !DILocation(line: 2888, column: 12, scope: !6613)
!6621 = !DILocation(line: 2889, column: 8, scope: !6613)
!6622 = !DILocation(line: 2889, column: 12, scope: !6613)
!6623 = !DILocation(line: 2890, column: 8, scope: !6613)
!6624 = !DILocation(line: 2890, column: 39, scope: !6613)
!6625 = !DILocation(line: 2890, column: 12, scope: !6613)
!6626 = !DILocation(line: 2884, column: 8, scope: !6614)
!6627 = !DILocation(line: 2891, column: 38, scope: !6613)
!6628 = !DILocation(line: 2891, column: 46, scope: !6613)
!6629 = !DILocation(line: 2891, column: 13, scope: !6613)
!6630 = !DILocation(line: 2891, column: 6, scope: !6613)
!6631 = !DILocation(line: 2893, column: 35, scope: !6614)
!6632 = !DILocation(line: 2893, column: 19, scope: !6614)
!6633 = !DILocation(line: 2893, column: 17, scope: !6614)
!6634 = !DILocation(line: 2893, column: 11, scope: !6614)
!6635 = !DILocation(line: 2894, column: 8, scope: !6614)
!6636 = !DILocation(line: 2895, column: 2, scope: !6614)
!6637 = !DILocalVariable(name: "type", scope: !6638, file: !3, line: 2898, type: !1686)
!6638 = distinct !DILexicalBlock(scope: !6604, file: !3, line: 2897, column: 2)
!6639 = !DILocation(line: 2898, column: 9, scope: !6638)
!6640 = !DILocation(line: 2898, column: 36, scope: !6638)
!6641 = !DILocation(line: 2898, column: 16, scope: !6638)
!6642 = !DILocation(line: 2900, column: 8, scope: !6643)
!6643 = distinct !DILexicalBlock(scope: !6638, file: !3, line: 2900, column: 8)
!6644 = !DILocation(line: 2900, column: 46, scope: !6643)
!6645 = !DILocation(line: 2900, column: 43, scope: !6643)
!6646 = !DILocation(line: 2900, column: 8, scope: !6638)
!6647 = !DILocation(line: 2902, column: 34, scope: !6643)
!6648 = !DILocation(line: 2902, column: 39, scope: !6643)
!6649 = !DILocation(line: 2902, column: 8, scope: !6643)
!6650 = !DILocation(line: 2901, column: 6, scope: !6643)
!6651 = !DILocation(line: 2901, column: 29, scope: !6643)
!6652 = !DILocation(line: 2904, column: 8, scope: !6653)
!6653 = distinct !DILexicalBlock(scope: !6638, file: !3, line: 2904, column: 8)
!6654 = !DILocation(line: 2904, column: 46, scope: !6653)
!6655 = !DILocation(line: 2904, column: 43, scope: !6653)
!6656 = !DILocation(line: 2904, column: 8, scope: !6638)
!6657 = !DILocation(line: 2906, column: 34, scope: !6653)
!6658 = !DILocation(line: 2906, column: 39, scope: !6653)
!6659 = !DILocation(line: 2906, column: 8, scope: !6653)
!6660 = !DILocation(line: 2905, column: 6, scope: !6653)
!6661 = !DILocation(line: 2905, column: 29, scope: !6653)
!6662 = !DILocation(line: 2908, column: 26, scope: !6638)
!6663 = !DILocation(line: 2908, column: 10, scope: !6638)
!6664 = !DILocation(line: 2908, column: 8, scope: !6638)
!6665 = !DILocation(line: 2910, column: 11, scope: !6638)
!6666 = !DILocation(line: 2910, column: 9, scope: !6638)
!6667 = !DILocation(line: 2913, column: 42, scope: !6638)
!6668 = !DILocation(line: 2913, column: 47, scope: !6638)
!6669 = !DILocation(line: 2913, column: 13, scope: !6638)
!6670 = !DILocation(line: 2913, column: 11, scope: !6638)
!6671 = !DILocation(line: 2918, column: 11, scope: !6672)
!6672 = distinct !DILexicalBlock(scope: !6601, file: !3, line: 2918, column: 11)
!6673 = !DILocation(line: 2918, column: 49, scope: !6672)
!6674 = !DILocation(line: 2918, column: 46, scope: !6672)
!6675 = !DILocation(line: 2918, column: 11, scope: !6601)
!6676 = !DILocation(line: 2920, column: 6, scope: !6672)
!6677 = !DILocation(line: 2919, column: 2, scope: !6672)
!6678 = !DILocation(line: 2920, column: 4, scope: !6672)
!6679 = !DILocation(line: 2923, column: 11, scope: !6680)
!6680 = distinct !DILexicalBlock(scope: !6601, file: !3, line: 2923, column: 11)
!6681 = !DILocation(line: 2923, column: 49, scope: !6680)
!6682 = !DILocation(line: 2923, column: 46, scope: !6680)
!6683 = !DILocation(line: 2923, column: 11, scope: !6601)
!6684 = !DILocation(line: 2925, column: 6, scope: !6680)
!6685 = !DILocation(line: 2924, column: 2, scope: !6680)
!6686 = !DILocation(line: 2925, column: 4, scope: !6680)
!6687 = !DILocation(line: 2927, column: 26, scope: !6601)
!6688 = !DILocation(line: 2927, column: 7, scope: !6601)
!6689 = !DILocation(line: 2927, column: 24, scope: !6601)
!6690 = !DILocation(line: 2928, column: 33, scope: !6601)
!6691 = !DILocation(line: 2928, column: 7, scope: !6601)
!6692 = !DILocation(line: 2931, column: 29, scope: !6601)
!6693 = !DILocation(line: 2931, column: 7, scope: !6601)
!6694 = !DILocation(line: 2933, column: 17, scope: !6601)
!6695 = !DILocation(line: 2933, column: 8, scope: !6601)
!6696 = !DILocation(line: 2933, column: 15, scope: !6601)
!6697 = !DILocation(line: 2934, column: 7, scope: !6601)
!6698 = !DILocation(line: 2938, column: 44, scope: !6553)
!6699 = !DILocation(line: 2938, column: 28, scope: !6553)
!6700 = !DILocation(line: 2938, column: 3, scope: !6553)
!6701 = !DILocation(line: 2938, column: 26, scope: !6553)
!6702 = !DILocation(line: 2941, column: 7, scope: !6703)
!6703 = distinct !DILexicalBlock(scope: !6553, file: !3, line: 2941, column: 7)
!6704 = !DILocation(line: 2941, column: 42, scope: !6703)
!6705 = !DILocation(line: 2942, column: 7, scope: !6703)
!6706 = !DILocation(line: 2942, column: 10, scope: !6703)
!6707 = !DILocation(line: 2942, column: 45, scope: !6703)
!6708 = !DILocation(line: 2941, column: 7, scope: !6553)
!6709 = !DILocation(line: 2944, column: 34, scope: !6710)
!6710 = distinct !DILexicalBlock(scope: !6703, file: !3, line: 2943, column: 5)
!6711 = !DILocation(line: 2944, column: 14, scope: !6710)
!6712 = !DILocation(line: 2944, column: 12, scope: !6710)
!6713 = !DILocation(line: 2946, column: 11, scope: !6714)
!6714 = distinct !DILexicalBlock(scope: !6710, file: !3, line: 2946, column: 11)
!6715 = !DILocation(line: 2946, column: 20, scope: !6714)
!6716 = !DILocation(line: 2946, column: 19, scope: !6714)
!6717 = !DILocation(line: 2946, column: 16, scope: !6714)
!6718 = !DILocation(line: 2946, column: 11, scope: !6710)
!6719 = !DILocation(line: 2948, column: 14, scope: !6720)
!6720 = distinct !DILexicalBlock(scope: !6714, file: !3, line: 2947, column: 2)
!6721 = !DILocation(line: 2948, column: 5, scope: !6720)
!6722 = !DILocation(line: 2948, column: 12, scope: !6720)
!6723 = !DILocation(line: 2954, column: 4, scope: !6720)
!6724 = !DILocation(line: 2955, column: 19, scope: !6720)
!6725 = !DILocation(line: 2955, column: 4, scope: !6720)
!6726 = !DILocation(line: 2956, column: 26, scope: !6720)
!6727 = !DILocation(line: 2956, column: 4, scope: !6720)
!6728 = !DILocation(line: 2957, column: 24, scope: !6720)
!6729 = !DILocation(line: 2957, column: 31, scope: !6720)
!6730 = !DILocation(line: 2957, column: 4, scope: !6720)
!6731 = !DILocation(line: 2959, column: 4, scope: !6720)
!6732 = !DILocation(line: 2961, column: 5, scope: !6710)
!6733 = !DILocation(line: 2966, column: 25, scope: !6553)
!6734 = !DILocation(line: 2966, column: 49, scope: !6553)
!6735 = !DILocation(line: 2966, column: 9, scope: !6553)
!6736 = !DILocation(line: 2966, column: 7, scope: !6553)
!6737 = !DILocation(line: 2968, column: 7, scope: !6738)
!6738 = distinct !DILexicalBlock(scope: !6553, file: !3, line: 2968, column: 7)
!6739 = !DILocation(line: 2968, column: 11, scope: !6738)
!6740 = !DILocation(line: 2968, column: 7, scope: !6553)
!6741 = !DILocation(line: 2969, column: 5, scope: !6738)
!6742 = !DILocation(line: 2970, column: 3, scope: !6553)
!6743 = !DILocation(line: 2972, column: 3, scope: !6553)
!6744 = !DILocation(line: 2974, column: 43, scope: !6553)
!6745 = !DILocation(line: 2974, column: 22, scope: !6553)
!6746 = !DILocation(line: 2975, column: 7, scope: !6747)
!6747 = distinct !DILexicalBlock(scope: !6553, file: !3, line: 2975, column: 7)
!6748 = !DILocation(line: 2975, column: 30, scope: !6747)
!6749 = !DILocation(line: 2976, column: 7, scope: !6747)
!6750 = !DILocation(line: 2976, column: 10, scope: !6747)
!6751 = !DILocation(line: 2976, column: 45, scope: !6747)
!6752 = !DILocation(line: 2977, column: 7, scope: !6747)
!6753 = !DILocation(line: 2977, column: 10, scope: !6747)
!6754 = !DILocation(line: 2977, column: 64, scope: !6747)
!6755 = !DILocation(line: 2978, column: 7, scope: !6747)
!6756 = !DILocation(line: 2978, column: 11, scope: !6747)
!6757 = !DILocation(line: 2979, column: 7, scope: !6747)
!6758 = !DILocation(line: 2979, column: 4, scope: !6747)
!6759 = !DILocation(line: 2983, column: 7, scope: !6747)
!6760 = !DILocation(line: 2983, column: 11, scope: !6747)
!6761 = !DILocation(line: 2984, column: 4, scope: !6747)
!6762 = !DILocation(line: 2984, column: 8, scope: !6747)
!6763 = !DILocation(line: 2985, column: 4, scope: !6747)
!6764 = !DILocation(line: 2985, column: 8, scope: !6747)
!6765 = !DILocation(line: 2986, column: 4, scope: !6747)
!6766 = !DILocation(line: 2986, column: 7, scope: !6747)
!6767 = !DILocation(line: 2986, column: 31, scope: !6747)
!6768 = !DILocation(line: 2986, column: 28, scope: !6747)
!6769 = !DILocation(line: 2975, column: 7, scope: !6553)
!6770 = !DILocation(line: 2988, column: 20, scope: !6771)
!6771 = distinct !DILexicalBlock(scope: !6747, file: !3, line: 2987, column: 5)
!6772 = !DILocation(line: 2988, column: 18, scope: !6771)
!6773 = !DILocation(line: 2989, column: 26, scope: !6771)
!6774 = !DILocation(line: 2990, column: 5, scope: !6771)
!6775 = !DILocation(line: 2992, column: 18, scope: !6747)
!6776 = !DILocation(line: 2992, column: 16, scope: !6747)
!6777 = !DILocation(line: 2993, column: 7, scope: !6778)
!6778 = distinct !DILexicalBlock(scope: !6553, file: !3, line: 2993, column: 7)
!6779 = !DILocation(line: 2993, column: 30, scope: !6778)
!6780 = !DILocation(line: 2994, column: 7, scope: !6778)
!6781 = !DILocation(line: 2994, column: 10, scope: !6778)
!6782 = !DILocation(line: 2994, column: 45, scope: !6778)
!6783 = !DILocation(line: 2995, column: 7, scope: !6778)
!6784 = !DILocation(line: 2995, column: 10, scope: !6778)
!6785 = !DILocation(line: 2995, column: 64, scope: !6778)
!6786 = !DILocation(line: 2996, column: 7, scope: !6778)
!6787 = !DILocation(line: 2996, column: 11, scope: !6778)
!6788 = !DILocation(line: 2997, column: 7, scope: !6778)
!6789 = !DILocation(line: 2997, column: 4, scope: !6778)
!6790 = !DILocation(line: 3001, column: 7, scope: !6778)
!6791 = !DILocation(line: 3001, column: 11, scope: !6778)
!6792 = !DILocation(line: 3002, column: 4, scope: !6778)
!6793 = !DILocation(line: 3002, column: 8, scope: !6778)
!6794 = !DILocation(line: 3003, column: 4, scope: !6778)
!6795 = !DILocation(line: 3003, column: 8, scope: !6778)
!6796 = !DILocation(line: 3004, column: 4, scope: !6778)
!6797 = !DILocation(line: 3004, column: 7, scope: !6778)
!6798 = !DILocation(line: 3004, column: 31, scope: !6778)
!6799 = !DILocation(line: 3004, column: 28, scope: !6778)
!6800 = !DILocation(line: 2993, column: 7, scope: !6553)
!6801 = !DILocation(line: 3006, column: 21, scope: !6802)
!6802 = distinct !DILexicalBlock(scope: !6778, file: !3, line: 3005, column: 5)
!6803 = !DILocation(line: 3006, column: 19, scope: !6802)
!6804 = !DILocation(line: 3007, column: 26, scope: !6802)
!6805 = !DILocation(line: 3008, column: 5, scope: !6802)
!6806 = !DILocation(line: 3010, column: 19, scope: !6778)
!6807 = !DILocation(line: 3010, column: 17, scope: !6778)
!6808 = !DILocation(line: 3012, column: 34, scope: !6553)
!6809 = !DILocation(line: 3012, column: 3, scope: !6553)
!6810 = !DILocation(line: 3015, column: 36, scope: !6553)
!6811 = !DILocation(line: 3015, column: 47, scope: !6553)
!6812 = !DILocation(line: 3015, column: 53, scope: !6553)
!6813 = !DILocation(line: 3015, column: 59, scope: !6553)
!6814 = !DILocation(line: 3016, column: 36, scope: !6553)
!6815 = !DILocation(line: 3015, column: 17, scope: !6553)
!6816 = !DILocation(line: 3015, column: 15, scope: !6553)
!6817 = !DILocation(line: 3018, column: 32, scope: !6553)
!6818 = !DILocation(line: 3018, column: 3, scope: !6553)
!6819 = !DILocation(line: 3019, column: 14, scope: !6553)
!6820 = !DILocation(line: 3020, column: 8, scope: !6821)
!6821 = distinct !DILexicalBlock(scope: !6553, file: !3, line: 3020, column: 7)
!6822 = !DILocation(line: 3020, column: 7, scope: !6553)
!6823 = !DILocation(line: 3024, column: 11, scope: !6824)
!6824 = distinct !DILexicalBlock(scope: !6825, file: !3, line: 3024, column: 11)
!6825 = distinct !DILexicalBlock(scope: !6821, file: !3, line: 3021, column: 5)
!6826 = !DILocation(line: 3024, column: 34, scope: !6824)
!6827 = !DILocation(line: 3025, column: 4, scope: !6824)
!6828 = !DILocation(line: 3025, column: 8, scope: !6824)
!6829 = !DILocation(line: 3026, column: 4, scope: !6824)
!6830 = !DILocation(line: 3026, column: 7, scope: !6824)
!6831 = !DILocation(line: 3026, column: 30, scope: !6824)
!6832 = !DILocation(line: 3024, column: 11, scope: !6825)
!6833 = !DILocation(line: 3027, column: 15, scope: !6824)
!6834 = !DILocation(line: 3027, column: 13, scope: !6824)
!6835 = !DILocation(line: 3027, column: 2, scope: !6824)
!6836 = !DILocation(line: 3030, column: 53, scope: !6837)
!6837 = distinct !DILexicalBlock(scope: !6824, file: !3, line: 3029, column: 2)
!6838 = !DILocation(line: 3030, column: 33, scope: !6837)
!6839 = !DILocation(line: 3030, column: 4, scope: !6837)
!6840 = !DILocation(line: 3031, column: 41, scope: !6837)
!6841 = !DILocation(line: 3031, column: 25, scope: !6837)
!6842 = !DILocation(line: 3031, column: 23, scope: !6837)
!6843 = !DILocation(line: 3036, column: 9, scope: !6844)
!6844 = distinct !DILexicalBlock(scope: !6837, file: !3, line: 3036, column: 8)
!6845 = !DILocation(line: 3037, column: 8, scope: !6844)
!6846 = !DILocation(line: 3037, column: 11, scope: !6844)
!6847 = !DILocation(line: 3037, column: 34, scope: !6844)
!6848 = !DILocation(line: 3038, column: 8, scope: !6844)
!6849 = !DILocation(line: 3038, column: 36, scope: !6844)
!6850 = !DILocation(line: 3038, column: 11, scope: !6844)
!6851 = !DILocation(line: 3036, column: 8, scope: !6837)
!6852 = !DILocalVariable(name: "g", scope: !6853, file: !3, line: 3040, type: !2014)
!6853 = distinct !DILexicalBlock(scope: !6844, file: !3, line: 3039, column: 6)
!6854 = !DILocation(line: 3040, column: 15, scope: !6853)
!6855 = !DILocation(line: 3041, column: 21, scope: !6853)
!6856 = !DILocation(line: 3041, column: 19, scope: !6853)
!6857 = !DILocation(line: 3043, column: 31, scope: !6853)
!6858 = !DILocation(line: 3043, column: 12, scope: !6853)
!6859 = !DILocation(line: 3043, column: 10, scope: !6853)
!6860 = !DILocation(line: 3051, column: 41, scope: !6853)
!6861 = !DILocation(line: 3051, column: 8, scope: !6853)
!6862 = !DILocation(line: 3053, column: 37, scope: !6853)
!6863 = !DILocation(line: 3053, column: 8, scope: !6853)
!6864 = !DILocation(line: 3054, column: 6, scope: !6853)
!6865 = !DILocation(line: 3056, column: 5, scope: !6825)
!6866 = !DILocation(line: 3057, column: 8, scope: !6867)
!6867 = distinct !DILexicalBlock(scope: !6553, file: !3, line: 3057, column: 7)
!6868 = !DILocation(line: 3057, column: 7, scope: !6553)
!6869 = !DILocation(line: 3059, column: 56, scope: !6870)
!6870 = distinct !DILexicalBlock(scope: !6867, file: !3, line: 3058, column: 5)
!6871 = !DILocation(line: 3059, column: 36, scope: !6870)
!6872 = !DILocation(line: 3059, column: 7, scope: !6870)
!6873 = !DILocation(line: 3060, column: 44, scope: !6870)
!6874 = !DILocation(line: 3060, column: 28, scope: !6870)
!6875 = !DILocation(line: 3060, column: 26, scope: !6870)
!6876 = !DILocation(line: 3061, column: 5, scope: !6870)
!6877 = !DILocation(line: 3062, column: 7, scope: !6878)
!6878 = distinct !DILexicalBlock(scope: !6553, file: !3, line: 3062, column: 7)
!6879 = !DILocation(line: 3062, column: 7, scope: !6553)
!6880 = !DILocation(line: 3063, column: 54, scope: !6878)
!6881 = !DILocation(line: 3063, column: 34, scope: !6878)
!6882 = !DILocation(line: 3063, column: 5, scope: !6878)
!6883 = !DILocation(line: 3065, column: 25, scope: !6553)
!6884 = !DILocation(line: 3065, column: 3, scope: !6553)
!6885 = !DILocation(line: 3066, column: 23, scope: !6553)
!6886 = !DILocation(line: 3066, column: 30, scope: !6553)
!6887 = !DILocation(line: 3066, column: 3, scope: !6553)
!6888 = !DILocation(line: 3068, column: 7, scope: !6889)
!6889 = distinct !DILexicalBlock(scope: !6553, file: !3, line: 3068, column: 7)
!6890 = !DILocation(line: 3068, column: 11, scope: !6889)
!6891 = !DILocation(line: 3068, column: 7, scope: !6553)
!6892 = !DILocation(line: 3070, column: 12, scope: !6893)
!6893 = distinct !DILexicalBlock(scope: !6889, file: !3, line: 3070, column: 12)
!6894 = !DILocation(line: 3070, column: 31, scope: !6893)
!6895 = !DILocation(line: 3070, column: 34, scope: !6893)
!6896 = !DILocation(line: 3070, column: 12, scope: !6889)
!6897 = !DILocation(line: 3071, column: 9, scope: !6893)
!6898 = !DILocation(line: 3071, column: 5, scope: !6893)
!6899 = !DILocation(line: 3075, column: 14, scope: !6900)
!6900 = distinct !DILexicalBlock(scope: !6893, file: !3, line: 3073, column: 5)
!6901 = !DILocation(line: 3075, column: 12, scope: !6900)
!6902 = !DILocation(line: 3076, column: 29, scope: !6900)
!6903 = !DILocation(line: 3076, column: 7, scope: !6900)
!6904 = !DILocation(line: 3079, column: 4, scope: !6553)
!6905 = !DILocation(line: 3079, column: 11, scope: !6553)
!6906 = !DILocation(line: 3080, column: 10, scope: !6553)
!6907 = !DILocation(line: 3080, column: 3, scope: !6553)
!6908 = !DILocation(line: 3081, column: 1, scope: !6553)
!6909 = distinct !DISubprogram(name: "gimplify_call_expr", scope: !3, file: !3, line: 2228, type: !6910, scopeLine: 2229, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!6910 = !DISubroutineType(types: !6911)
!6911 = !{!1329, !2049, !3489, !1804}
!6912 = !DILocalVariable(name: "expr_p", arg: 1, scope: !6909, file: !3, line: 2228, type: !2049)
!6913 = !DILocation(line: 2228, column: 27, scope: !6909)
!6914 = !DILocalVariable(name: "pre_p", arg: 2, scope: !6909, file: !3, line: 2228, type: !3489)
!6915 = !DILocation(line: 2228, column: 47, scope: !6909)
!6916 = !DILocalVariable(name: "want_value", arg: 3, scope: !6909, file: !3, line: 2228, type: !1804)
!6917 = !DILocation(line: 2228, column: 59, scope: !6909)
!6918 = !DILocalVariable(name: "fndecl", scope: !6909, file: !3, line: 2230, type: !1686)
!6919 = !DILocation(line: 2230, column: 8, scope: !6909)
!6920 = !DILocalVariable(name: "parms", scope: !6909, file: !3, line: 2230, type: !1686)
!6921 = !DILocation(line: 2230, column: 16, scope: !6909)
!6922 = !DILocalVariable(name: "p", scope: !6909, file: !3, line: 2230, type: !1686)
!6923 = !DILocation(line: 2230, column: 23, scope: !6909)
!6924 = !DILocalVariable(name: "ret", scope: !6909, file: !3, line: 2231, type: !1329)
!6925 = !DILocation(line: 2231, column: 24, scope: !6909)
!6926 = !DILocalVariable(name: "i", scope: !6909, file: !3, line: 2232, type: !1330)
!6927 = !DILocation(line: 2232, column: 7, scope: !6909)
!6928 = !DILocalVariable(name: "nargs", scope: !6909, file: !3, line: 2232, type: !1330)
!6929 = !DILocation(line: 2232, column: 10, scope: !6909)
!6930 = !DILocalVariable(name: "call", scope: !6909, file: !3, line: 2233, type: !2014)
!6931 = !DILocation(line: 2233, column: 10, scope: !6909)
!6932 = !DILocalVariable(name: "builtin_va_start_p", scope: !6909, file: !3, line: 2234, type: !1804)
!6933 = !DILocation(line: 2234, column: 8, scope: !6909)
!6934 = !DILocalVariable(name: "loc", scope: !6909, file: !3, line: 2235, type: !1812)
!6935 = !DILocation(line: 2235, column: 14, scope: !6909)
!6936 = !DILocation(line: 2235, column: 20, scope: !6909)
!6937 = !DILocation(line: 2237, column: 3, scope: !6909)
!6938 = !DILocation(line: 2241, column: 9, scope: !6939)
!6939 = distinct !DILexicalBlock(scope: !6909, file: !3, line: 2241, column: 7)
!6940 = !DILocation(line: 2241, column: 7, scope: !6909)
!6941 = !DILocation(line: 2242, column: 5, scope: !6939)
!6942 = !DILocation(line: 2256, column: 32, scope: !6909)
!6943 = !DILocation(line: 2256, column: 31, scope: !6909)
!6944 = !DILocation(line: 2256, column: 12, scope: !6909)
!6945 = !DILocation(line: 2256, column: 10, scope: !6909)
!6946 = !DILocation(line: 2257, column: 7, scope: !6947)
!6947 = distinct !DILexicalBlock(scope: !6909, file: !3, line: 2257, column: 7)
!6948 = !DILocation(line: 2257, column: 14, scope: !6947)
!6949 = !DILocation(line: 2257, column: 17, scope: !6947)
!6950 = !DILocation(line: 2257, column: 7, scope: !6909)
!6951 = !DILocalVariable(name: "new_tree", scope: !6952, file: !3, line: 2259, type: !1686)
!6952 = distinct !DILexicalBlock(scope: !6947, file: !3, line: 2258, column: 5)
!6953 = !DILocation(line: 2259, column: 12, scope: !6952)
!6954 = !DILocation(line: 2259, column: 39, scope: !6952)
!6955 = !DILocation(line: 2259, column: 56, scope: !6952)
!6956 = !DILocation(line: 2259, column: 55, scope: !6952)
!6957 = !DILocation(line: 2259, column: 65, scope: !6952)
!6958 = !DILocation(line: 2259, column: 64, scope: !6952)
!6959 = !DILocation(line: 2259, column: 23, scope: !6952)
!6960 = !DILocation(line: 2261, column: 11, scope: !6961)
!6961 = distinct !DILexicalBlock(scope: !6952, file: !3, line: 2261, column: 11)
!6962 = !DILocation(line: 2261, column: 20, scope: !6961)
!6963 = !DILocation(line: 2261, column: 23, scope: !6961)
!6964 = !DILocation(line: 2261, column: 36, scope: !6961)
!6965 = !DILocation(line: 2261, column: 35, scope: !6961)
!6966 = !DILocation(line: 2261, column: 32, scope: !6961)
!6967 = !DILocation(line: 2261, column: 11, scope: !6952)
!6968 = !DILocation(line: 2266, column: 14, scope: !6969)
!6969 = distinct !DILexicalBlock(scope: !6961, file: !3, line: 2262, column: 2)
!6970 = !DILocation(line: 2266, column: 5, scope: !6969)
!6971 = !DILocation(line: 2266, column: 12, scope: !6969)
!6972 = !DILocation(line: 2267, column: 4, scope: !6969)
!6973 = !DILocation(line: 2270, column: 11, scope: !6974)
!6974 = distinct !DILexicalBlock(scope: !6952, file: !3, line: 2270, column: 11)
!6975 = !DILocation(line: 2270, column: 40, scope: !6974)
!6976 = !DILocation(line: 2271, column: 4, scope: !6974)
!6977 = !DILocation(line: 2271, column: 7, scope: !6974)
!6978 = !DILocation(line: 2271, column: 35, scope: !6974)
!6979 = !DILocation(line: 2270, column: 11, scope: !6952)
!6980 = !DILocation(line: 2273, column: 23, scope: !6981)
!6981 = distinct !DILexicalBlock(scope: !6974, file: !3, line: 2272, column: 9)
!6982 = !DILocation(line: 2274, column: 8, scope: !6983)
!6983 = distinct !DILexicalBlock(scope: !6981, file: !3, line: 2274, column: 8)
!6984 = !DILocation(line: 2274, column: 34, scope: !6983)
!6985 = !DILocation(line: 2274, column: 8, scope: !6981)
!6986 = !DILocation(line: 2276, column: 8, scope: !6987)
!6987 = distinct !DILexicalBlock(scope: !6983, file: !3, line: 2275, column: 6)
!6988 = !DILocation(line: 2277, column: 36, scope: !6987)
!6989 = !DILocation(line: 2277, column: 18, scope: !6987)
!6990 = !DILocation(line: 2277, column: 9, scope: !6987)
!6991 = !DILocation(line: 2277, column: 16, scope: !6987)
!6992 = !DILocation(line: 2278, column: 8, scope: !6987)
!6993 = !DILocation(line: 2281, column: 32, scope: !6994)
!6994 = distinct !DILexicalBlock(scope: !6981, file: !3, line: 2281, column: 8)
!6995 = !DILocation(line: 2281, column: 31, scope: !6994)
!6996 = !DILocation(line: 2281, column: 8, scope: !6994)
!6997 = !DILocation(line: 2281, column: 8, scope: !6981)
!6998 = !DILocation(line: 2283, column: 36, scope: !6999)
!6999 = distinct !DILexicalBlock(scope: !6994, file: !3, line: 2282, column: 6)
!7000 = !DILocation(line: 2283, column: 18, scope: !6999)
!7001 = !DILocation(line: 2283, column: 9, scope: !6999)
!7002 = !DILocation(line: 2283, column: 16, scope: !6999)
!7003 = !DILocation(line: 2284, column: 8, scope: !6999)
!7004 = !DILocation(line: 2286, column: 2, scope: !6981)
!7005 = !DILocation(line: 2287, column: 5, scope: !6952)
!7006 = !DILocation(line: 2292, column: 25, scope: !6909)
!7007 = !DILocation(line: 2292, column: 49, scope: !6909)
!7008 = !DILocation(line: 2292, column: 9, scope: !6909)
!7009 = !DILocation(line: 2292, column: 7, scope: !6909)
!7010 = !DILocation(line: 2295, column: 11, scope: !6909)
!7011 = !DILocation(line: 2295, column: 9, scope: !6909)
!7012 = !DILocation(line: 2298, column: 32, scope: !6909)
!7013 = !DILocation(line: 2298, column: 31, scope: !6909)
!7014 = !DILocation(line: 2298, column: 12, scope: !6909)
!7015 = !DILocation(line: 2298, column: 10, scope: !6909)
!7016 = !DILocation(line: 2299, column: 9, scope: !6909)
!7017 = !DILocation(line: 2300, column: 7, scope: !7018)
!7018 = distinct !DILexicalBlock(scope: !6909, file: !3, line: 2300, column: 7)
!7019 = !DILocation(line: 2300, column: 7, scope: !6909)
!7020 = !DILocation(line: 2301, column: 13, scope: !7018)
!7021 = !DILocation(line: 2301, column: 11, scope: !7018)
!7022 = !DILocation(line: 2301, column: 5, scope: !7018)
!7023 = !DILocation(line: 2302, column: 12, scope: !7024)
!7024 = distinct !DILexicalBlock(scope: !7018, file: !3, line: 2302, column: 12)
!7025 = !DILocation(line: 2302, column: 12, scope: !7018)
!7026 = !DILocation(line: 2303, column: 13, scope: !7024)
!7027 = !DILocation(line: 2303, column: 11, scope: !7024)
!7028 = !DILocation(line: 2303, column: 5, scope: !7024)
!7029 = !DILocation(line: 2305, column: 7, scope: !7030)
!7030 = distinct !DILexicalBlock(scope: !6909, file: !3, line: 2305, column: 7)
!7031 = !DILocation(line: 2305, column: 14, scope: !7030)
!7032 = !DILocation(line: 2305, column: 17, scope: !7030)
!7033 = !DILocation(line: 2305, column: 7, scope: !6909)
!7034 = !DILocation(line: 2306, column: 9, scope: !7030)
!7035 = !DILocation(line: 2306, column: 7, scope: !7030)
!7036 = !DILocation(line: 2306, column: 5, scope: !7030)
!7037 = !DILocation(line: 2307, column: 12, scope: !7038)
!7038 = distinct !DILexicalBlock(scope: !7030, file: !3, line: 2307, column: 12)
!7039 = !DILocation(line: 2307, column: 12, scope: !7030)
!7040 = !DILocation(line: 2308, column: 9, scope: !7038)
!7041 = !DILocation(line: 2308, column: 7, scope: !7038)
!7042 = !DILocation(line: 2308, column: 5, scope: !7038)
!7043 = !DILocation(line: 2310, column: 7, scope: !7038)
!7044 = !DILocation(line: 2311, column: 10, scope: !7045)
!7045 = distinct !DILexicalBlock(scope: !6909, file: !3, line: 2311, column: 3)
!7046 = !DILocation(line: 2311, column: 8, scope: !7045)
!7047 = !DILocation(line: 2311, column: 15, scope: !7048)
!7048 = distinct !DILexicalBlock(scope: !7045, file: !3, line: 2311, column: 3)
!7049 = !DILocation(line: 2311, column: 19, scope: !7048)
!7050 = !DILocation(line: 2311, column: 17, scope: !7048)
!7051 = !DILocation(line: 2311, column: 25, scope: !7048)
!7052 = !DILocation(line: 2311, column: 28, scope: !7048)
!7053 = !DILocation(line: 0, scope: !7048)
!7054 = !DILocation(line: 2311, column: 3, scope: !7045)
!7055 = !DILocation(line: 2311, column: 32, scope: !7048)
!7056 = !DILocation(line: 2311, column: 40, scope: !7048)
!7057 = !DILocation(line: 2311, column: 38, scope: !7048)
!7058 = !DILocation(line: 2311, column: 3, scope: !7048)
!7059 = distinct !{!7059, !7054, !7060}
!7060 = !DILocation(line: 2312, column: 5, scope: !7045)
!7061 = !DILocation(line: 2317, column: 8, scope: !7062)
!7062 = distinct !DILexicalBlock(scope: !6909, file: !3, line: 2317, column: 7)
!7063 = !DILocation(line: 2318, column: 7, scope: !7062)
!7064 = !DILocation(line: 2318, column: 10, scope: !7062)
!7065 = !DILocation(line: 2318, column: 14, scope: !7062)
!7066 = !DILocation(line: 2318, column: 12, scope: !7062)
!7067 = !DILocation(line: 2319, column: 7, scope: !7062)
!7068 = !DILocation(line: 2319, column: 10, scope: !7062)
!7069 = !DILocation(line: 2319, column: 57, scope: !7062)
!7070 = !DILocation(line: 2317, column: 7, scope: !6909)
!7071 = !DILocalVariable(name: "last_arg", scope: !7072, file: !3, line: 2321, type: !1686)
!7072 = distinct !DILexicalBlock(scope: !7062, file: !3, line: 2320, column: 5)
!7073 = !DILocation(line: 2321, column: 12, scope: !7072)
!7074 = !DILocation(line: 2321, column: 23, scope: !7072)
!7075 = !DILocalVariable(name: "last_arg_fndecl", scope: !7072, file: !3, line: 2322, type: !1686)
!7076 = !DILocation(line: 2322, column: 12, scope: !7072)
!7077 = !DILocation(line: 2322, column: 49, scope: !7072)
!7078 = !DILocation(line: 2322, column: 30, scope: !7072)
!7079 = !DILocation(line: 2324, column: 11, scope: !7080)
!7080 = distinct !DILexicalBlock(scope: !7072, file: !3, line: 2324, column: 11)
!7081 = !DILocation(line: 2325, column: 4, scope: !7080)
!7082 = !DILocation(line: 2325, column: 7, scope: !7080)
!7083 = !DILocation(line: 2325, column: 35, scope: !7080)
!7084 = !DILocation(line: 2326, column: 4, scope: !7080)
!7085 = !DILocation(line: 2326, column: 7, scope: !7080)
!7086 = !DILocation(line: 2326, column: 45, scope: !7080)
!7087 = !DILocation(line: 2327, column: 4, scope: !7080)
!7088 = !DILocation(line: 2327, column: 7, scope: !7080)
!7089 = !DILocation(line: 2327, column: 44, scope: !7080)
!7090 = !DILocation(line: 2324, column: 11, scope: !7072)
!7091 = !DILocalVariable(name: "call", scope: !7092, file: !3, line: 2329, type: !1686)
!7092 = distinct !DILexicalBlock(scope: !7080, file: !3, line: 2328, column: 2)
!7093 = !DILocation(line: 2329, column: 9, scope: !7092)
!7094 = !DILocation(line: 2329, column: 17, scope: !7092)
!7095 = !DILocation(line: 2329, column: 16, scope: !7092)
!7096 = !DILocation(line: 2331, column: 4, scope: !7092)
!7097 = !DILocation(line: 2332, column: 36, scope: !7092)
!7098 = !DILocation(line: 2332, column: 41, scope: !7092)
!7099 = !DILocation(line: 2333, column: 8, scope: !7092)
!7100 = !DILocation(line: 2334, column: 8, scope: !7092)
!7101 = !DILocation(line: 2334, column: 15, scope: !7092)
!7102 = !DILocation(line: 2332, column: 14, scope: !7092)
!7103 = !DILocation(line: 2332, column: 5, scope: !7092)
!7104 = !DILocation(line: 2332, column: 12, scope: !7092)
!7105 = !DILocation(line: 2338, column: 39, scope: !7092)
!7106 = !DILocation(line: 2338, column: 4, scope: !7092)
!7107 = !DILocation(line: 2338, column: 37, scope: !7092)
!7108 = !DILocation(line: 2339, column: 35, scope: !7092)
!7109 = !DILocation(line: 2339, column: 4, scope: !7092)
!7110 = !DILocation(line: 2339, column: 33, scope: !7092)
!7111 = !DILocation(line: 2341, column: 8, scope: !7092)
!7112 = !DILocation(line: 2340, column: 4, scope: !7092)
!7113 = !DILocation(line: 2341, column: 6, scope: !7092)
!7114 = !DILocation(line: 2342, column: 34, scope: !7092)
!7115 = !DILocation(line: 2342, column: 4, scope: !7092)
!7116 = !DILocation(line: 2342, column: 32, scope: !7092)
!7117 = !DILocation(line: 2343, column: 37, scope: !7092)
!7118 = !DILocation(line: 2343, column: 4, scope: !7092)
!7119 = !DILocation(line: 2343, column: 35, scope: !7092)
!7120 = !DILocation(line: 2344, column: 4, scope: !7092)
!7121 = !DILocation(line: 2345, column: 27, scope: !7092)
!7122 = !DILocation(line: 2345, column: 4, scope: !7092)
!7123 = !DILocation(line: 2345, column: 25, scope: !7092)
!7124 = !DILocation(line: 2348, column: 4, scope: !7092)
!7125 = !DILocation(line: 2348, column: 36, scope: !7092)
!7126 = !DILocation(line: 2349, column: 2, scope: !7092)
!7127 = !DILocation(line: 2350, column: 5, scope: !7072)
!7128 = !DILocation(line: 2353, column: 7, scope: !7129)
!7129 = distinct !DILexicalBlock(scope: !6909, file: !3, line: 2353, column: 7)
!7130 = !DILocation(line: 2353, column: 13, scope: !7129)
!7131 = !DILocation(line: 2353, column: 7, scope: !6909)
!7132 = !DILocation(line: 2355, column: 38, scope: !7133)
!7133 = distinct !DILexicalBlock(scope: !7134, file: !3, line: 2355, column: 7)
!7134 = distinct !DILexicalBlock(scope: !7129, file: !3, line: 2354, column: 5)
!7135 = !DILocation(line: 2355, column: 44, scope: !7133)
!7136 = !DILocation(line: 2355, column: 14, scope: !7133)
!7137 = !DILocation(line: 2355, column: 12, scope: !7133)
!7138 = !DILocation(line: 2356, column: 33, scope: !7139)
!7139 = distinct !DILexicalBlock(scope: !7133, file: !3, line: 2355, column: 7)
!7140 = !DILocation(line: 2356, column: 35, scope: !7139)
!7141 = !DILocation(line: 2355, column: 7, scope: !7133)
!7142 = !DILocalVariable(name: "t", scope: !7143, file: !3, line: 2359, type: !1329)
!7143 = distinct !DILexicalBlock(scope: !7139, file: !3, line: 2358, column: 9)
!7144 = !DILocation(line: 2359, column: 32, scope: !7143)
!7145 = !DILocation(line: 2363, column: 16, scope: !7146)
!7146 = distinct !DILexicalBlock(scope: !7143, file: !3, line: 2363, column: 15)
!7147 = !DILocation(line: 2363, column: 18, scope: !7146)
!7148 = !DILocation(line: 2363, column: 24, scope: !7146)
!7149 = !DILocation(line: 2363, column: 28, scope: !7146)
!7150 = !DILocation(line: 2363, column: 15, scope: !7143)
!7151 = !DILocation(line: 2365, column: 34, scope: !7152)
!7152 = distinct !DILexicalBlock(scope: !7146, file: !3, line: 2364, column: 13)
!7153 = !DILocation(line: 2365, column: 62, scope: !7152)
!7154 = !DILocation(line: 2366, column: 5, scope: !7152)
!7155 = !DILocation(line: 2365, column: 19, scope: !7152)
!7156 = !DILocation(line: 2365, column: 17, scope: !7152)
!7157 = !DILocation(line: 2368, column: 19, scope: !7158)
!7158 = distinct !DILexicalBlock(scope: !7152, file: !3, line: 2368, column: 19)
!7159 = !DILocation(line: 2368, column: 21, scope: !7158)
!7160 = !DILocation(line: 2368, column: 19, scope: !7152)
!7161 = !DILocation(line: 2369, column: 21, scope: !7158)
!7162 = !DILocation(line: 2369, column: 17, scope: !7158)
!7163 = !DILocation(line: 2370, column: 13, scope: !7152)
!7164 = !DILocation(line: 2371, column: 9, scope: !7143)
!7165 = !DILocation(line: 2357, column: 34, scope: !7139)
!7166 = !DILocation(line: 2355, column: 7, scope: !7139)
!7167 = distinct !{!7167, !7141, !7168}
!7168 = !DILocation(line: 2371, column: 9, scope: !7133)
!7169 = !DILocation(line: 2372, column: 5, scope: !7134)
!7170 = !DILocation(line: 2375, column: 7, scope: !7171)
!7171 = distinct !DILexicalBlock(scope: !6909, file: !3, line: 2375, column: 7)
!7172 = !DILocation(line: 2375, column: 18, scope: !7171)
!7173 = !DILocation(line: 2375, column: 21, scope: !7171)
!7174 = !DILocation(line: 2376, column: 7, scope: !7171)
!7175 = !DILocation(line: 2376, column: 10, scope: !7171)
!7176 = !DILocation(line: 2375, column: 7, scope: !6909)
!7177 = !DILocation(line: 2378, column: 17, scope: !7178)
!7178 = distinct !DILexicalBlock(scope: !7171, file: !3, line: 2377, column: 5)
!7179 = !DILocation(line: 2378, column: 7, scope: !7178)
!7180 = !DILocation(line: 2379, column: 11, scope: !7178)
!7181 = !DILocation(line: 2380, column: 5, scope: !7178)
!7182 = !DILocation(line: 2383, column: 7, scope: !7183)
!7183 = distinct !DILexicalBlock(scope: !6909, file: !3, line: 2383, column: 7)
!7184 = !DILocation(line: 2383, column: 11, scope: !7183)
!7185 = !DILocation(line: 2383, column: 7, scope: !6909)
!7186 = !DILocalVariable(name: "new_tree", scope: !7187, file: !3, line: 2385, type: !1686)
!7187 = distinct !DILexicalBlock(scope: !7183, file: !3, line: 2384, column: 5)
!7188 = !DILocation(line: 2385, column: 12, scope: !7187)
!7189 = !DILocation(line: 2385, column: 39, scope: !7187)
!7190 = !DILocation(line: 2385, column: 56, scope: !7187)
!7191 = !DILocation(line: 2385, column: 55, scope: !7187)
!7192 = !DILocation(line: 2385, column: 65, scope: !7187)
!7193 = !DILocation(line: 2385, column: 64, scope: !7187)
!7194 = !DILocation(line: 2385, column: 23, scope: !7187)
!7195 = !DILocation(line: 2387, column: 11, scope: !7196)
!7196 = distinct !DILexicalBlock(scope: !7187, file: !3, line: 2387, column: 11)
!7197 = !DILocation(line: 2387, column: 20, scope: !7196)
!7198 = !DILocation(line: 2387, column: 23, scope: !7196)
!7199 = !DILocation(line: 2387, column: 36, scope: !7196)
!7200 = !DILocation(line: 2387, column: 35, scope: !7196)
!7201 = !DILocation(line: 2387, column: 32, scope: !7196)
!7202 = !DILocation(line: 2387, column: 11, scope: !7187)
!7203 = !DILocation(line: 2392, column: 14, scope: !7204)
!7204 = distinct !DILexicalBlock(scope: !7196, file: !3, line: 2388, column: 2)
!7205 = !DILocation(line: 2392, column: 5, scope: !7204)
!7206 = !DILocation(line: 2392, column: 12, scope: !7204)
!7207 = !DILocation(line: 2393, column: 4, scope: !7204)
!7208 = !DILocation(line: 2395, column: 5, scope: !7187)
!7209 = !DILocation(line: 2398, column: 17, scope: !7210)
!7210 = distinct !DILexicalBlock(scope: !7183, file: !3, line: 2397, column: 5)
!7211 = !DILocation(line: 2398, column: 8, scope: !7210)
!7212 = !DILocation(line: 2398, column: 15, scope: !7210)
!7213 = !DILocation(line: 2399, column: 7, scope: !7210)
!7214 = !DILocation(line: 2405, column: 7, scope: !7215)
!7215 = distinct !DILexicalBlock(scope: !6909, file: !3, line: 2405, column: 7)
!7216 = !DILocation(line: 2405, column: 27, scope: !7215)
!7217 = !DILocation(line: 2405, column: 7, scope: !6909)
!7218 = !DILocalVariable(name: "flags", scope: !7219, file: !3, line: 2407, type: !1330)
!7219 = distinct !DILexicalBlock(scope: !7215, file: !3, line: 2406, column: 5)
!7220 = !DILocation(line: 2407, column: 11, scope: !7219)
!7221 = !DILocation(line: 2407, column: 37, scope: !7219)
!7222 = !DILocation(line: 2407, column: 36, scope: !7219)
!7223 = !DILocation(line: 2407, column: 19, scope: !7219)
!7224 = !DILocation(line: 2408, column: 11, scope: !7225)
!7225 = distinct !DILexicalBlock(scope: !7219, file: !3, line: 2408, column: 11)
!7226 = !DILocation(line: 2408, column: 17, scope: !7225)
!7227 = !DILocation(line: 2410, column: 4, scope: !7225)
!7228 = !DILocation(line: 2410, column: 9, scope: !7225)
!7229 = !DILocation(line: 2410, column: 15, scope: !7225)
!7230 = !DILocation(line: 2408, column: 11, scope: !7219)
!7231 = !DILocation(line: 2411, column: 2, scope: !7225)
!7232 = !DILocation(line: 2411, column: 30, scope: !7225)
!7233 = !DILocation(line: 2412, column: 5, scope: !7219)
!7234 = !DILocation(line: 2422, column: 8, scope: !7235)
!7235 = distinct !DILexicalBlock(scope: !6909, file: !3, line: 2422, column: 7)
!7236 = !DILocation(line: 2422, column: 7, scope: !6909)
!7237 = !DILocation(line: 2426, column: 44, scope: !7238)
!7238 = distinct !DILexicalBlock(scope: !7235, file: !3, line: 2423, column: 5)
!7239 = !DILocation(line: 2426, column: 43, scope: !7238)
!7240 = !DILocation(line: 2426, column: 14, scope: !7238)
!7241 = !DILocation(line: 2426, column: 12, scope: !7238)
!7242 = !DILocation(line: 2427, column: 30, scope: !7238)
!7243 = !DILocation(line: 2427, column: 37, scope: !7238)
!7244 = !DILocation(line: 2427, column: 7, scope: !7238)
!7245 = !DILocation(line: 2428, column: 8, scope: !7238)
!7246 = !DILocation(line: 2428, column: 15, scope: !7238)
!7247 = !DILocation(line: 2429, column: 5, scope: !7238)
!7248 = !DILocation(line: 2431, column: 10, scope: !6909)
!7249 = !DILocation(line: 2431, column: 3, scope: !6909)
!7250 = !DILocation(line: 2432, column: 1, scope: !6909)
!7251 = distinct !DISubprogram(name: "gimplify_compound_expr", scope: !3, file: !3, line: 4635, type: !6910, scopeLine: 4636, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!7252 = !DILocalVariable(name: "expr_p", arg: 1, scope: !7251, file: !3, line: 4635, type: !2049)
!7253 = !DILocation(line: 4635, column: 31, scope: !7251)
!7254 = !DILocalVariable(name: "pre_p", arg: 2, scope: !7251, file: !3, line: 4635, type: !3489)
!7255 = !DILocation(line: 4635, column: 51, scope: !7251)
!7256 = !DILocalVariable(name: "want_value", arg: 3, scope: !7251, file: !3, line: 4635, type: !1804)
!7257 = !DILocation(line: 4635, column: 63, scope: !7251)
!7258 = !DILocalVariable(name: "t", scope: !7251, file: !3, line: 4637, type: !1686)
!7259 = !DILocation(line: 4637, column: 8, scope: !7251)
!7260 = !DILocation(line: 4637, column: 13, scope: !7251)
!7261 = !DILocation(line: 4637, column: 12, scope: !7251)
!7262 = !DILocation(line: 4639, column: 3, scope: !7251)
!7263 = !DILocalVariable(name: "sub_p", scope: !7264, file: !3, line: 4641, type: !2049)
!7264 = distinct !DILexicalBlock(scope: !7251, file: !3, line: 4640, column: 5)
!7265 = !DILocation(line: 4641, column: 13, scope: !7264)
!7266 = !DILocation(line: 4641, column: 22, scope: !7264)
!7267 = !DILocation(line: 4643, column: 11, scope: !7268)
!7268 = distinct !DILexicalBlock(scope: !7264, file: !3, line: 4643, column: 11)
!7269 = !DILocation(line: 4643, column: 30, scope: !7268)
!7270 = !DILocation(line: 4643, column: 11, scope: !7264)
!7271 = !DILocation(line: 4644, column: 26, scope: !7268)
!7272 = !DILocation(line: 4644, column: 33, scope: !7268)
!7273 = !DILocation(line: 4644, column: 2, scope: !7268)
!7274 = !DILocation(line: 4646, column: 17, scope: !7268)
!7275 = !DILocation(line: 4646, column: 24, scope: !7268)
!7276 = !DILocation(line: 4646, column: 2, scope: !7268)
!7277 = !DILocation(line: 4648, column: 11, scope: !7264)
!7278 = !DILocation(line: 4648, column: 9, scope: !7264)
!7279 = !DILocation(line: 4649, column: 5, scope: !7264)
!7280 = !DILocation(line: 4650, column: 10, scope: !7251)
!7281 = !DILocation(line: 4650, column: 24, scope: !7251)
!7282 = distinct !{!7282, !7262, !7283}
!7283 = !DILocation(line: 4650, column: 40, scope: !7251)
!7284 = !DILocation(line: 4652, column: 13, scope: !7251)
!7285 = !DILocation(line: 4652, column: 4, scope: !7251)
!7286 = !DILocation(line: 4652, column: 11, scope: !7251)
!7287 = !DILocation(line: 4653, column: 7, scope: !7288)
!7288 = distinct !DILexicalBlock(scope: !7251, file: !3, line: 4653, column: 7)
!7289 = !DILocation(line: 4653, column: 7, scope: !7251)
!7290 = !DILocation(line: 4654, column: 5, scope: !7288)
!7291 = !DILocation(line: 4657, column: 22, scope: !7292)
!7292 = distinct !DILexicalBlock(scope: !7288, file: !3, line: 4656, column: 5)
!7293 = !DILocation(line: 4657, column: 30, scope: !7292)
!7294 = !DILocation(line: 4657, column: 7, scope: !7292)
!7295 = !DILocation(line: 4658, column: 7, scope: !7292)
!7296 = !DILocation(line: 4660, column: 1, scope: !7251)
!7297 = distinct !DISubprogram(name: "gimplify_compound_literal_expr", scope: !3, file: !3, line: 3522, type: !7298, scopeLine: 3523, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!7298 = !DISubroutineType(types: !7299)
!7299 = !{!1329, !2049, !3489}
!7300 = !DILocalVariable(name: "expr_p", arg: 1, scope: !7297, file: !3, line: 3522, type: !2049)
!7301 = !DILocation(line: 3522, column: 39, scope: !7297)
!7302 = !DILocalVariable(name: "pre_p", arg: 2, scope: !7297, file: !3, line: 3522, type: !3489)
!7303 = !DILocation(line: 3522, column: 59, scope: !7297)
!7304 = !DILocalVariable(name: "decl_s", scope: !7297, file: !3, line: 3524, type: !1686)
!7305 = !DILocation(line: 3524, column: 8, scope: !7297)
!7306 = !DILocation(line: 3524, column: 17, scope: !7297)
!7307 = !DILocalVariable(name: "decl", scope: !7297, file: !3, line: 3525, type: !1686)
!7308 = !DILocation(line: 3525, column: 8, scope: !7297)
!7309 = !DILocation(line: 3525, column: 15, scope: !7297)
!7310 = !DILocation(line: 3529, column: 7, scope: !7311)
!7311 = distinct !DILexicalBlock(scope: !7297, file: !3, line: 3529, column: 7)
!7312 = !DILocation(line: 3529, column: 7, scope: !7297)
!7313 = !DILocation(line: 3530, column: 5, scope: !7311)
!7314 = !DILocation(line: 3530, column: 29, scope: !7311)
!7315 = !DILocation(line: 3535, column: 8, scope: !7316)
!7316 = distinct !DILexicalBlock(scope: !7297, file: !3, line: 3535, column: 7)
!7317 = !DILocation(line: 3535, column: 37, scope: !7316)
!7318 = !DILocation(line: 3536, column: 8, scope: !7316)
!7319 = !DILocation(line: 3536, column: 11, scope: !7316)
!7320 = !DILocation(line: 3536, column: 40, scope: !7316)
!7321 = !DILocation(line: 3537, column: 7, scope: !7316)
!7322 = !DILocation(line: 3537, column: 11, scope: !7316)
!7323 = !DILocation(line: 3538, column: 7, scope: !7316)
!7324 = !DILocation(line: 3538, column: 36, scope: !7316)
!7325 = !DILocation(line: 3538, column: 11, scope: !7316)
!7326 = !DILocation(line: 3535, column: 7, scope: !7297)
!7327 = !DILocation(line: 3539, column: 5, scope: !7316)
!7328 = !DILocation(line: 3539, column: 30, scope: !7316)
!7329 = !DILocation(line: 3544, column: 7, scope: !7330)
!7330 = distinct !DILexicalBlock(scope: !7297, file: !3, line: 3544, column: 7)
!7331 = !DILocation(line: 3544, column: 24, scope: !7330)
!7332 = !DILocation(line: 3544, column: 37, scope: !7330)
!7333 = !DILocation(line: 3544, column: 41, scope: !7330)
!7334 = !DILocation(line: 3544, column: 7, scope: !7297)
!7335 = !DILocation(line: 3545, column: 25, scope: !7330)
!7336 = !DILocation(line: 3545, column: 5, scope: !7330)
!7337 = !DILocation(line: 3547, column: 21, scope: !7297)
!7338 = !DILocation(line: 3547, column: 29, scope: !7297)
!7339 = !DILocation(line: 3547, column: 3, scope: !7297)
!7340 = !DILocation(line: 3548, column: 13, scope: !7297)
!7341 = !DILocation(line: 3548, column: 4, scope: !7297)
!7342 = !DILocation(line: 3548, column: 11, scope: !7297)
!7343 = !DILocation(line: 3549, column: 3, scope: !7297)
!7344 = distinct !DISubprogram(name: "gimplify_modify_expr", scope: !3, file: !3, line: 4401, type: !6109, scopeLine: 4403, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!7345 = !DILocalVariable(name: "expr_p", arg: 1, scope: !7344, file: !3, line: 4401, type: !2049)
!7346 = !DILocation(line: 4401, column: 29, scope: !7344)
!7347 = !DILocalVariable(name: "pre_p", arg: 2, scope: !7344, file: !3, line: 4401, type: !3489)
!7348 = !DILocation(line: 4401, column: 49, scope: !7344)
!7349 = !DILocalVariable(name: "post_p", arg: 3, scope: !7344, file: !3, line: 4401, type: !3489)
!7350 = !DILocation(line: 4401, column: 68, scope: !7344)
!7351 = !DILocalVariable(name: "want_value", arg: 4, scope: !7344, file: !3, line: 4402, type: !1804)
!7352 = !DILocation(line: 4402, column: 14, scope: !7344)
!7353 = !DILocalVariable(name: "from_p", scope: !7344, file: !3, line: 4404, type: !2049)
!7354 = !DILocation(line: 4404, column: 9, scope: !7344)
!7355 = !DILocation(line: 4404, column: 19, scope: !7344)
!7356 = !DILocalVariable(name: "to_p", scope: !7344, file: !3, line: 4405, type: !2049)
!7357 = !DILocation(line: 4405, column: 9, scope: !7344)
!7358 = !DILocation(line: 4405, column: 17, scope: !7344)
!7359 = !DILocalVariable(name: "ret", scope: !7344, file: !3, line: 4406, type: !1329)
!7360 = !DILocation(line: 4406, column: 24, scope: !7344)
!7361 = !DILocalVariable(name: "assign", scope: !7344, file: !3, line: 4407, type: !2014)
!7362 = !DILocation(line: 4407, column: 10, scope: !7344)
!7363 = !DILocalVariable(name: "loc", scope: !7344, file: !3, line: 4408, type: !1812)
!7364 = !DILocation(line: 4408, column: 14, scope: !7344)
!7365 = !DILocation(line: 4408, column: 20, scope: !7344)
!7366 = !DILocation(line: 4410, column: 3, scope: !7344)
!7367 = !DILocation(line: 4416, column: 7, scope: !7368)
!7368 = distinct !DILexicalBlock(scope: !7344, file: !3, line: 4416, column: 7)
!7369 = !DILocation(line: 4416, column: 7, scope: !7344)
!7370 = !DILocation(line: 4418, column: 7, scope: !7371)
!7371 = distinct !DILexicalBlock(scope: !7368, file: !3, line: 4417, column: 5)
!7372 = !DILocation(line: 4419, column: 39, scope: !7373)
!7373 = distinct !DILexicalBlock(scope: !7371, file: !3, line: 4419, column: 11)
!7374 = !DILocation(line: 4419, column: 58, scope: !7373)
!7375 = !DILocation(line: 4419, column: 12, scope: !7373)
!7376 = !DILocation(line: 4419, column: 11, scope: !7371)
!7377 = !DILocation(line: 4420, column: 30, scope: !7373)
!7378 = !DILocation(line: 4420, column: 35, scope: !7373)
!7379 = !DILocation(line: 4420, column: 55, scope: !7373)
!7380 = !DILocation(line: 4420, column: 54, scope: !7373)
!7381 = !DILocation(line: 4420, column: 12, scope: !7373)
!7382 = !DILocation(line: 4420, column: 3, scope: !7373)
!7383 = !DILocation(line: 4420, column: 10, scope: !7373)
!7384 = !DILocation(line: 4420, column: 2, scope: !7373)
!7385 = !DILocation(line: 4421, column: 5, scope: !7371)
!7386 = !DILocation(line: 4424, column: 35, scope: !7344)
!7387 = !DILocation(line: 4424, column: 43, scope: !7344)
!7388 = !DILocation(line: 4424, column: 51, scope: !7344)
!7389 = !DILocation(line: 4424, column: 57, scope: !7344)
!7390 = !DILocation(line: 4424, column: 64, scope: !7344)
!7391 = !DILocation(line: 4425, column: 7, scope: !7344)
!7392 = !DILocation(line: 4424, column: 9, scope: !7344)
!7393 = !DILocation(line: 4424, column: 7, scope: !7344)
!7394 = !DILocation(line: 4426, column: 7, scope: !7395)
!7395 = distinct !DILexicalBlock(scope: !7344, file: !3, line: 4426, column: 7)
!7396 = !DILocation(line: 4426, column: 11, scope: !7395)
!7397 = !DILocation(line: 4426, column: 7, scope: !7344)
!7398 = !DILocation(line: 4427, column: 12, scope: !7395)
!7399 = !DILocation(line: 4427, column: 5, scope: !7395)
!7400 = !DILocation(line: 4433, column: 24, scope: !7401)
!7401 = distinct !DILexicalBlock(scope: !7344, file: !3, line: 4433, column: 7)
!7402 = !DILocation(line: 4433, column: 7, scope: !7401)
!7403 = !DILocation(line: 4433, column: 45, scope: !7401)
!7404 = !DILocation(line: 4433, column: 49, scope: !7401)
!7405 = !DILocation(line: 4433, column: 7, scope: !7344)
!7406 = !DILocation(line: 4435, column: 22, scope: !7407)
!7407 = distinct !DILexicalBlock(scope: !7401, file: !3, line: 4434, column: 5)
!7408 = !DILocation(line: 4435, column: 30, scope: !7407)
!7409 = !DILocation(line: 4435, column: 7, scope: !7407)
!7410 = !DILocation(line: 4436, column: 22, scope: !7407)
!7411 = !DILocation(line: 4436, column: 28, scope: !7407)
!7412 = !DILocation(line: 4436, column: 7, scope: !7407)
!7413 = !DILocation(line: 4437, column: 8, scope: !7407)
!7414 = !DILocation(line: 4437, column: 15, scope: !7407)
!7415 = !DILocation(line: 4438, column: 7, scope: !7407)
!7416 = !DILocation(line: 4447, column: 25, scope: !7344)
!7417 = !DILocation(line: 4447, column: 3, scope: !7344)
!7418 = !DILocation(line: 4449, column: 24, scope: !7344)
!7419 = !DILocation(line: 4449, column: 30, scope: !7344)
!7420 = !DILocation(line: 4449, column: 37, scope: !7344)
!7421 = !DILocation(line: 4449, column: 9, scope: !7344)
!7422 = !DILocation(line: 4449, column: 7, scope: !7344)
!7423 = !DILocation(line: 4450, column: 7, scope: !7424)
!7424 = distinct !DILexicalBlock(scope: !7344, file: !3, line: 4450, column: 7)
!7425 = !DILocation(line: 4450, column: 11, scope: !7424)
!7426 = !DILocation(line: 4450, column: 7, scope: !7344)
!7427 = !DILocation(line: 4451, column: 12, scope: !7424)
!7428 = !DILocation(line: 4451, column: 5, scope: !7424)
!7429 = !DILocation(line: 4465, column: 24, scope: !7344)
!7430 = !DILocation(line: 4465, column: 32, scope: !7344)
!7431 = !DILocation(line: 4465, column: 39, scope: !7344)
!7432 = !DILocation(line: 4465, column: 67, scope: !7344)
!7433 = !DILocation(line: 4465, column: 66, scope: !7344)
!7434 = !DILocation(line: 4465, column: 47, scope: !7344)
!7435 = !DILocation(line: 4465, column: 9, scope: !7344)
!7436 = !DILocation(line: 4465, column: 7, scope: !7344)
!7437 = !DILocation(line: 4467, column: 7, scope: !7438)
!7438 = distinct !DILexicalBlock(scope: !7344, file: !3, line: 4467, column: 7)
!7439 = !DILocation(line: 4467, column: 11, scope: !7438)
!7440 = !DILocation(line: 4467, column: 7, scope: !7344)
!7441 = !DILocation(line: 4468, column: 12, scope: !7438)
!7442 = !DILocation(line: 4468, column: 5, scope: !7438)
!7443 = !DILocation(line: 4471, column: 35, scope: !7344)
!7444 = !DILocation(line: 4471, column: 43, scope: !7344)
!7445 = !DILocation(line: 4471, column: 51, scope: !7344)
!7446 = !DILocation(line: 4471, column: 57, scope: !7344)
!7447 = !DILocation(line: 4471, column: 64, scope: !7344)
!7448 = !DILocation(line: 4472, column: 7, scope: !7344)
!7449 = !DILocation(line: 4471, column: 9, scope: !7344)
!7450 = !DILocation(line: 4471, column: 7, scope: !7344)
!7451 = !DILocation(line: 4473, column: 7, scope: !7452)
!7452 = distinct !DILexicalBlock(scope: !7344, file: !3, line: 4473, column: 7)
!7453 = !DILocation(line: 4473, column: 11, scope: !7452)
!7454 = !DILocation(line: 4473, column: 7, scope: !7344)
!7455 = !DILocation(line: 4474, column: 12, scope: !7452)
!7456 = !DILocation(line: 4474, column: 5, scope: !7452)
!7457 = !DILocation(line: 4479, column: 7, scope: !7458)
!7458 = distinct !DILexicalBlock(scope: !7344, file: !3, line: 4479, column: 7)
!7459 = !DILocation(line: 4479, column: 27, scope: !7458)
!7460 = !DILocation(line: 4479, column: 7, scope: !7344)
!7461 = !DILocalVariable(name: "from", scope: !7462, file: !3, line: 4481, type: !1686)
!7462 = distinct !DILexicalBlock(scope: !7458, file: !3, line: 4480, column: 5)
!7463 = !DILocation(line: 4481, column: 12, scope: !7462)
!7464 = !DILocation(line: 4481, column: 19, scope: !7462)
!7465 = !DILocalVariable(name: "size", scope: !7462, file: !3, line: 4482, type: !1686)
!7466 = !DILocation(line: 4482, column: 12, scope: !7462)
!7467 = !DILocation(line: 4482, column: 19, scope: !7462)
!7468 = !DILocation(line: 4484, column: 11, scope: !7469)
!7469 = distinct !DILexicalBlock(scope: !7462, file: !3, line: 4484, column: 11)
!7470 = !DILocation(line: 4484, column: 28, scope: !7469)
!7471 = !DILocation(line: 4484, column: 11, scope: !7462)
!7472 = !DILocation(line: 4485, column: 41, scope: !7469)
!7473 = !DILocation(line: 4485, column: 49, scope: !7469)
!7474 = !DILocation(line: 4485, column: 55, scope: !7469)
!7475 = !DILocation(line: 4485, column: 67, scope: !7469)
!7476 = !DILocation(line: 4485, column: 9, scope: !7469)
!7477 = !DILocation(line: 4485, column: 2, scope: !7469)
!7478 = !DILocation(line: 4487, column: 34, scope: !7479)
!7479 = distinct !DILexicalBlock(scope: !7462, file: !3, line: 4487, column: 11)
!7480 = !DILocation(line: 4487, column: 11, scope: !7479)
!7481 = !DILocation(line: 4487, column: 11, scope: !7462)
!7482 = !DILocation(line: 4489, column: 14, scope: !7483)
!7483 = distinct !DILexicalBlock(scope: !7479, file: !3, line: 4488, column: 2)
!7484 = !DILocation(line: 4489, column: 5, scope: !7483)
!7485 = !DILocation(line: 4489, column: 12, scope: !7483)
!7486 = !DILocation(line: 4490, column: 43, scope: !7483)
!7487 = !DILocation(line: 4490, column: 51, scope: !7483)
!7488 = !DILocation(line: 4490, column: 57, scope: !7483)
!7489 = !DILocation(line: 4491, column: 14, scope: !7483)
!7490 = !DILocation(line: 4490, column: 11, scope: !7483)
!7491 = !DILocation(line: 4490, column: 4, scope: !7483)
!7492 = !DILocation(line: 4493, column: 5, scope: !7462)
!7493 = !DILocation(line: 4498, column: 8, scope: !7494)
!7494 = distinct !DILexicalBlock(scope: !7344, file: !3, line: 4498, column: 7)
!7495 = !DILocation(line: 4498, column: 26, scope: !7494)
!7496 = !DILocation(line: 4499, column: 8, scope: !7494)
!7497 = !DILocation(line: 4499, column: 11, scope: !7494)
!7498 = !DILocation(line: 4499, column: 29, scope: !7494)
!7499 = !DILocation(line: 4500, column: 7, scope: !7494)
!7500 = !DILocation(line: 4500, column: 25, scope: !7494)
!7501 = !DILocation(line: 4500, column: 10, scope: !7494)
!7502 = !DILocation(line: 4498, column: 7, scope: !7344)
!7503 = !DILocation(line: 4501, column: 47, scope: !7494)
!7504 = !DILocation(line: 4501, column: 55, scope: !7494)
!7505 = !DILocation(line: 4501, column: 62, scope: !7494)
!7506 = !DILocation(line: 4501, column: 12, scope: !7494)
!7507 = !DILocation(line: 4501, column: 5, scope: !7494)
!7508 = !DILocation(line: 4505, column: 8, scope: !7509)
!7509 = distinct !DILexicalBlock(scope: !7344, file: !3, line: 4505, column: 7)
!7510 = !DILocation(line: 4505, column: 23, scope: !7509)
!7511 = !DILocation(line: 4506, column: 7, scope: !7509)
!7512 = !DILocation(line: 4506, column: 10, scope: !7509)
!7513 = !DILocation(line: 4507, column: 7, scope: !7509)
!7514 = !DILocation(line: 4507, column: 10, scope: !7509)
!7515 = !DILocation(line: 4508, column: 7, scope: !7509)
!7516 = !DILocation(line: 4508, column: 10, scope: !7509)
!7517 = !DILocation(line: 4509, column: 7, scope: !7509)
!7518 = !DILocation(line: 4509, column: 11, scope: !7509)
!7519 = !DILocation(line: 4505, column: 7, scope: !7344)
!7520 = !DILocation(line: 4511, column: 12, scope: !7521)
!7521 = distinct !DILexicalBlock(scope: !7522, file: !3, line: 4511, column: 11)
!7522 = distinct !DILexicalBlock(scope: !7509, file: !3, line: 4510, column: 5)
!7523 = !DILocation(line: 4511, column: 32, scope: !7521)
!7524 = !DILocation(line: 4511, column: 35, scope: !7521)
!7525 = !DILocation(line: 4511, column: 11, scope: !7522)
!7526 = !DILocation(line: 4513, column: 27, scope: !7521)
!7527 = !DILocation(line: 4513, column: 6, scope: !7521)
!7528 = !DILocation(line: 4512, column: 2, scope: !7521)
!7529 = !DILocation(line: 4513, column: 4, scope: !7521)
!7530 = !DILocation(line: 4514, column: 7, scope: !7522)
!7531 = !DILocation(line: 4514, column: 41, scope: !7522)
!7532 = !DILocation(line: 4515, column: 7, scope: !7522)
!7533 = !DILocation(line: 4516, column: 4, scope: !7522)
!7534 = !DILocation(line: 4518, column: 7, scope: !7535)
!7535 = distinct !DILexicalBlock(scope: !7344, file: !3, line: 4518, column: 7)
!7536 = !DILocation(line: 4518, column: 27, scope: !7535)
!7537 = !DILocation(line: 4518, column: 7, scope: !7344)
!7538 = !DILocation(line: 4522, column: 46, scope: !7539)
!7539 = distinct !DILexicalBlock(scope: !7535, file: !3, line: 4519, column: 5)
!7540 = !DILocation(line: 4522, column: 45, scope: !7539)
!7541 = !DILocation(line: 4522, column: 16, scope: !7539)
!7542 = !DILocation(line: 4522, column: 14, scope: !7539)
!7543 = !DILocation(line: 4523, column: 36, scope: !7544)
!7544 = distinct !DILexicalBlock(scope: !7539, file: !3, line: 4523, column: 11)
!7545 = !DILocation(line: 4523, column: 12, scope: !7544)
!7546 = !DILocation(line: 4523, column: 11, scope: !7539)
!7547 = !DILocation(line: 4524, column: 23, scope: !7544)
!7548 = !DILocation(line: 4524, column: 32, scope: !7544)
!7549 = !DILocation(line: 4524, column: 31, scope: !7544)
!7550 = !DILocation(line: 4524, column: 2, scope: !7544)
!7551 = !DILocation(line: 4525, column: 5, scope: !7539)
!7552 = !DILocation(line: 4528, column: 16, scope: !7553)
!7553 = distinct !DILexicalBlock(scope: !7535, file: !3, line: 4527, column: 5)
!7554 = !DILocation(line: 4528, column: 14, scope: !7553)
!7555 = !DILocation(line: 4529, column: 28, scope: !7553)
!7556 = !DILocation(line: 4529, column: 36, scope: !7553)
!7557 = !DILocation(line: 4529, column: 7, scope: !7553)
!7558 = !DILocation(line: 4532, column: 26, scope: !7344)
!7559 = !DILocation(line: 4532, column: 33, scope: !7344)
!7560 = !DILocation(line: 4532, column: 3, scope: !7344)
!7561 = !DILocation(line: 4534, column: 7, scope: !7562)
!7562 = distinct !DILexicalBlock(scope: !7344, file: !3, line: 4534, column: 7)
!7563 = !DILocation(line: 4534, column: 22, scope: !7562)
!7564 = !DILocation(line: 4534, column: 31, scope: !7562)
!7565 = !DILocation(line: 4534, column: 50, scope: !7562)
!7566 = !DILocation(line: 4534, column: 49, scope: !7562)
!7567 = !DILocation(line: 4534, column: 34, scope: !7562)
!7568 = !DILocation(line: 4534, column: 7, scope: !7344)
!7569 = !DILocation(line: 4538, column: 7, scope: !7570)
!7570 = distinct !DILexicalBlock(scope: !7562, file: !3, line: 4535, column: 5)
!7571 = !DILocation(line: 4539, column: 31, scope: !7570)
!7572 = !DILocation(line: 4539, column: 30, scope: !7570)
!7573 = !DILocation(line: 4539, column: 37, scope: !7570)
!7574 = !DILocation(line: 4539, column: 15, scope: !7570)
!7575 = !DILocation(line: 4539, column: 8, scope: !7570)
!7576 = !DILocation(line: 4539, column: 13, scope: !7570)
!7577 = !DILocation(line: 4540, column: 23, scope: !7570)
!7578 = !DILocation(line: 4540, column: 32, scope: !7570)
!7579 = !DILocation(line: 4540, column: 31, scope: !7570)
!7580 = !DILocation(line: 4540, column: 7, scope: !7570)
!7581 = !DILocation(line: 4541, column: 5, scope: !7570)
!7582 = !DILocation(line: 4543, column: 7, scope: !7583)
!7583 = distinct !DILexicalBlock(scope: !7344, file: !3, line: 4543, column: 7)
!7584 = !DILocation(line: 4543, column: 7, scope: !7344)
!7585 = !DILocation(line: 4545, column: 32, scope: !7586)
!7586 = distinct !DILexicalBlock(scope: !7583, file: !3, line: 4544, column: 5)
!7587 = !DILocation(line: 4545, column: 31, scope: !7586)
!7588 = !DILocation(line: 4545, column: 17, scope: !7586)
!7589 = !DILocation(line: 4545, column: 8, scope: !7586)
!7590 = !DILocation(line: 4545, column: 15, scope: !7586)
!7591 = !DILocation(line: 4546, column: 7, scope: !7586)
!7592 = !DILocation(line: 4549, column: 6, scope: !7583)
!7593 = !DILocation(line: 4549, column: 13, scope: !7583)
!7594 = !DILocation(line: 4551, column: 3, scope: !7344)
!7595 = !DILocation(line: 4552, column: 1, scope: !7344)
!7596 = distinct !DISubprogram(name: "gimplify_boolean_expr", scope: !3, file: !3, line: 4611, type: !7597, scopeLine: 4612, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!7597 = !DISubroutineType(types: !7598)
!7598 = !{!1329, !2049, !1812}
!7599 = !DILocalVariable(name: "expr_p", arg: 1, scope: !7596, file: !3, line: 4611, type: !2049)
!7600 = !DILocation(line: 4611, column: 30, scope: !7596)
!7601 = !DILocalVariable(name: "locus", arg: 2, scope: !7596, file: !3, line: 4611, type: !1812)
!7602 = !DILocation(line: 4611, column: 49, scope: !7596)
!7603 = !DILocalVariable(name: "type", scope: !7596, file: !3, line: 4614, type: !1686)
!7604 = !DILocation(line: 4614, column: 8, scope: !7596)
!7605 = !DILocation(line: 4614, column: 15, scope: !7596)
!7606 = !DILocation(line: 4616, column: 13, scope: !7596)
!7607 = !DILocation(line: 4616, column: 4, scope: !7596)
!7608 = !DILocation(line: 4616, column: 11, scope: !7596)
!7609 = !DILocation(line: 4620, column: 3, scope: !7596)
!7610 = !DILocation(line: 4622, column: 3, scope: !7596)
!7611 = distinct !DISubprogram(name: "gimplify_addr_expr", scope: !3, file: !3, line: 4717, type: !7612, scopeLine: 4718, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!7612 = !DISubroutineType(types: !7613)
!7613 = !{!1329, !2049, !3489, !3489}
!7614 = !DILocalVariable(name: "expr_p", arg: 1, scope: !7611, file: !3, line: 4717, type: !2049)
!7615 = !DILocation(line: 4717, column: 27, scope: !7611)
!7616 = !DILocalVariable(name: "pre_p", arg: 2, scope: !7611, file: !3, line: 4717, type: !3489)
!7617 = !DILocation(line: 4717, column: 47, scope: !7611)
!7618 = !DILocalVariable(name: "post_p", arg: 3, scope: !7611, file: !3, line: 4717, type: !3489)
!7619 = !DILocation(line: 4717, column: 66, scope: !7611)
!7620 = !DILocalVariable(name: "expr", scope: !7611, file: !3, line: 4719, type: !1686)
!7621 = !DILocation(line: 4719, column: 8, scope: !7611)
!7622 = !DILocation(line: 4719, column: 16, scope: !7611)
!7623 = !DILocation(line: 4719, column: 15, scope: !7611)
!7624 = !DILocalVariable(name: "op0", scope: !7611, file: !3, line: 4720, type: !1686)
!7625 = !DILocation(line: 4720, column: 8, scope: !7611)
!7626 = !DILocation(line: 4720, column: 14, scope: !7611)
!7627 = !DILocalVariable(name: "ret", scope: !7611, file: !3, line: 4721, type: !1329)
!7628 = !DILocation(line: 4721, column: 24, scope: !7611)
!7629 = !DILocalVariable(name: "loc", scope: !7611, file: !3, line: 4722, type: !1812)
!7630 = !DILocation(line: 4722, column: 14, scope: !7611)
!7631 = !DILocation(line: 4722, column: 20, scope: !7611)
!7632 = !DILocation(line: 4724, column: 11, scope: !7611)
!7633 = !DILocation(line: 4724, column: 3, scope: !7611)
!7634 = !DILocation(line: 4725, column: 5, scope: !7611)
!7635 = !DILabel(scope: !7636, name: "do_indirect_ref", file: !3, line: 4728)
!7636 = distinct !DILexicalBlock(scope: !7611, file: !3, line: 4725, column: 5)
!7637 = !DILocation(line: 4728, column: 5, scope: !7636)
!7638 = !DILocalVariable(name: "op00", scope: !7639, file: !3, line: 4739, type: !1686)
!7639 = distinct !DILexicalBlock(scope: !7636, file: !3, line: 4738, column: 7)
!7640 = !DILocation(line: 4739, column: 7, scope: !7639)
!7641 = !DILocation(line: 4739, column: 14, scope: !7639)
!7642 = !DILocalVariable(name: "t_expr", scope: !7639, file: !3, line: 4740, type: !1686)
!7643 = !DILocation(line: 4740, column: 7, scope: !7639)
!7644 = !DILocation(line: 4740, column: 16, scope: !7639)
!7645 = !DILocalVariable(name: "t_op00", scope: !7639, file: !3, line: 4741, type: !1686)
!7646 = !DILocation(line: 4741, column: 7, scope: !7639)
!7647 = !DILocation(line: 4741, column: 16, scope: !7639)
!7648 = !DILocation(line: 4743, column: 41, scope: !7649)
!7649 = distinct !DILexicalBlock(scope: !7639, file: !3, line: 4743, column: 13)
!7650 = !DILocation(line: 4743, column: 49, scope: !7649)
!7651 = !DILocation(line: 4743, column: 14, scope: !7649)
!7652 = !DILocation(line: 4743, column: 13, scope: !7639)
!7653 = !DILocation(line: 4744, column: 29, scope: !7649)
!7654 = !DILocation(line: 4744, column: 34, scope: !7649)
!7655 = !DILocation(line: 4744, column: 52, scope: !7649)
!7656 = !DILocation(line: 4744, column: 11, scope: !7649)
!7657 = !DILocation(line: 4744, column: 9, scope: !7649)
!7658 = !DILocation(line: 4744, column: 4, scope: !7649)
!7659 = !DILocation(line: 4745, column: 19, scope: !7639)
!7660 = !DILocation(line: 4745, column: 10, scope: !7639)
!7661 = !DILocation(line: 4745, column: 17, scope: !7639)
!7662 = !DILocation(line: 4746, column: 13, scope: !7639)
!7663 = !DILocation(line: 4748, column: 7, scope: !7636)
!7664 = !DILocation(line: 4760, column: 45, scope: !7665)
!7665 = distinct !DILexicalBlock(scope: !7636, file: !3, line: 4760, column: 11)
!7666 = !DILocation(line: 4760, column: 11, scope: !7665)
!7667 = !DILocation(line: 4760, column: 11, scope: !7636)
!7668 = !DILocation(line: 4761, column: 8, scope: !7665)
!7669 = !DILocation(line: 4761, column: 6, scope: !7665)
!7670 = !DILocation(line: 4761, column: 2, scope: !7665)
!7671 = !DILocation(line: 4763, column: 35, scope: !7636)
!7672 = !DILocation(line: 4763, column: 40, scope: !7636)
!7673 = !DILocation(line: 4764, column: 33, scope: !7636)
!7674 = !DILocation(line: 4765, column: 8, scope: !7636)
!7675 = !DILocation(line: 4764, column: 7, scope: !7636)
!7676 = !DILocation(line: 4763, column: 17, scope: !7636)
!7677 = !DILocation(line: 4763, column: 8, scope: !7636)
!7678 = !DILocation(line: 4763, column: 15, scope: !7636)
!7679 = !DILocation(line: 4766, column: 11, scope: !7636)
!7680 = !DILocation(line: 4767, column: 7, scope: !7636)
!7681 = !DILocation(line: 4776, column: 29, scope: !7636)
!7682 = !DILocation(line: 4776, column: 53, scope: !7636)
!7683 = !DILocation(line: 4776, column: 60, scope: !7636)
!7684 = !DILocation(line: 4776, column: 13, scope: !7636)
!7685 = !DILocation(line: 4776, column: 11, scope: !7636)
!7686 = !DILocation(line: 4778, column: 11, scope: !7687)
!7687 = distinct !DILexicalBlock(scope: !7636, file: !3, line: 4778, column: 11)
!7688 = !DILocation(line: 4778, column: 15, scope: !7687)
!7689 = !DILocation(line: 4778, column: 11, scope: !7636)
!7690 = !DILocation(line: 4779, column: 2, scope: !7687)
!7691 = !DILocation(line: 4783, column: 36, scope: !7636)
!7692 = !DILocation(line: 4783, column: 60, scope: !7636)
!7693 = !DILocation(line: 4783, column: 7, scope: !7636)
!7694 = !DILocation(line: 4785, column: 13, scope: !7636)
!7695 = !DILocation(line: 4785, column: 11, scope: !7636)
!7696 = !DILocation(line: 4789, column: 11, scope: !7697)
!7697 = distinct !DILexicalBlock(scope: !7636, file: !3, line: 4789, column: 11)
!7698 = !DILocation(line: 4789, column: 27, scope: !7697)
!7699 = !DILocation(line: 4789, column: 11, scope: !7636)
!7700 = !DILocation(line: 4790, column: 2, scope: !7697)
!7701 = !DILocation(line: 4792, column: 25, scope: !7636)
!7702 = !DILocation(line: 4792, column: 7, scope: !7636)
!7703 = !DILocation(line: 4797, column: 32, scope: !7704)
!7704 = distinct !DILexicalBlock(scope: !7636, file: !3, line: 4797, column: 11)
!7705 = !DILocation(line: 4797, column: 49, scope: !7704)
!7706 = !DILocation(line: 4797, column: 12, scope: !7704)
!7707 = !DILocation(line: 4797, column: 11, scope: !7636)
!7708 = !DILocation(line: 4798, column: 12, scope: !7704)
!7709 = !DILocation(line: 4798, column: 3, scope: !7704)
!7710 = !DILocation(line: 4798, column: 10, scope: !7704)
!7711 = !DILocation(line: 4798, column: 2, scope: !7704)
!7712 = !DILocation(line: 4801, column: 48, scope: !7636)
!7713 = !DILocation(line: 4801, column: 47, scope: !7636)
!7714 = !DILocation(line: 4801, column: 7, scope: !7636)
!7715 = !DILocation(line: 4805, column: 39, scope: !7716)
!7716 = distinct !DILexicalBlock(scope: !7636, file: !3, line: 4805, column: 11)
!7717 = !DILocation(line: 4805, column: 57, scope: !7716)
!7718 = !DILocation(line: 4805, column: 12, scope: !7716)
!7719 = !DILocation(line: 4805, column: 11, scope: !7636)
!7720 = !DILocation(line: 4806, column: 12, scope: !7716)
!7721 = !DILocation(line: 4806, column: 3, scope: !7716)
!7722 = !DILocation(line: 4806, column: 10, scope: !7716)
!7723 = !DILocation(line: 4806, column: 2, scope: !7716)
!7724 = !DILocation(line: 4808, column: 7, scope: !7636)
!7725 = !DILocation(line: 4811, column: 10, scope: !7611)
!7726 = !DILocation(line: 4811, column: 3, scope: !7611)
!7727 = distinct !DISubprogram(name: "gimplify_conversion", scope: !3, file: !3, line: 1747, type: !7728, scopeLine: 1748, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!7728 = !DISubroutineType(types: !7729)
!7729 = !{!1329, !2049}
!7730 = !DILocalVariable(name: "expr_p", arg: 1, scope: !7727, file: !3, line: 1747, type: !2049)
!7731 = !DILocation(line: 1747, column: 28, scope: !7727)
!7732 = !DILocalVariable(name: "tem", scope: !7727, file: !3, line: 1749, type: !1686)
!7733 = !DILocation(line: 1749, column: 8, scope: !7727)
!7734 = !DILocalVariable(name: "loc", scope: !7727, file: !3, line: 1750, type: !1812)
!7735 = !DILocation(line: 1750, column: 14, scope: !7727)
!7736 = !DILocation(line: 1750, column: 20, scope: !7727)
!7737 = !DILocation(line: 1751, column: 3, scope: !7727)
!7738 = !DILocation(line: 1754, column: 3, scope: !7727)
!7739 = !DILocation(line: 1757, column: 42, scope: !7740)
!7740 = distinct !DILexicalBlock(scope: !7727, file: !3, line: 1757, column: 7)
!7741 = !DILocation(line: 1757, column: 41, scope: !7740)
!7742 = !DILocation(line: 1757, column: 7, scope: !7740)
!7743 = !DILocation(line: 1757, column: 7, scope: !7727)
!7744 = !DILocation(line: 1758, column: 15, scope: !7740)
!7745 = !DILocation(line: 1758, column: 6, scope: !7740)
!7746 = !DILocation(line: 1758, column: 13, scope: !7740)
!7747 = !DILocation(line: 1758, column: 5, scope: !7740)
!7748 = !DILocation(line: 1763, column: 7, scope: !7749)
!7749 = distinct !DILexicalBlock(scope: !7727, file: !3, line: 1763, column: 7)
!7750 = !DILocation(line: 1764, column: 7, scope: !7749)
!7751 = !DILocation(line: 1764, column: 10, scope: !7749)
!7752 = !DILocation(line: 1765, column: 7, scope: !7749)
!7753 = !DILocation(line: 1765, column: 10, scope: !7749)
!7754 = !DILocation(line: 1766, column: 7, scope: !7749)
!7755 = !DILocation(line: 1767, column: 5, scope: !7749)
!7756 = !DILocation(line: 1767, column: 30, scope: !7749)
!7757 = !DILocation(line: 1768, column: 5, scope: !7749)
!7758 = !DILocation(line: 1768, column: 24, scope: !7749)
!7759 = !DILocation(line: 1766, column: 17, scope: !7749)
!7760 = !DILocation(line: 1766, column: 15, scope: !7749)
!7761 = !DILocation(line: 1768, column: 46, scope: !7749)
!7762 = !DILocation(line: 1763, column: 7, scope: !7727)
!7763 = !DILocation(line: 1769, column: 15, scope: !7749)
!7764 = !DILocation(line: 1769, column: 6, scope: !7749)
!7765 = !DILocation(line: 1769, column: 13, scope: !7749)
!7766 = !DILocation(line: 1769, column: 5, scope: !7749)
!7767 = !DILocation(line: 1773, column: 7, scope: !7768)
!7768 = distinct !DILexicalBlock(scope: !7727, file: !3, line: 1773, column: 7)
!7769 = !DILocation(line: 1773, column: 7, scope: !7727)
!7770 = !DILocalVariable(name: "sub", scope: !7771, file: !3, line: 1775, type: !1686)
!7771 = distinct !DILexicalBlock(scope: !7768, file: !3, line: 1774, column: 5)
!7772 = !DILocation(line: 1775, column: 12, scope: !7771)
!7773 = !DILocation(line: 1775, column: 18, scope: !7771)
!7774 = !DILocation(line: 1780, column: 11, scope: !7775)
!7775 = distinct !DILexicalBlock(scope: !7771, file: !3, line: 1780, column: 11)
!7776 = !DILocation(line: 1780, column: 27, scope: !7775)
!7777 = !DILocation(line: 1780, column: 11, scope: !7771)
!7778 = !DILocation(line: 1781, column: 31, scope: !7775)
!7779 = !DILocation(line: 1781, column: 2, scope: !7775)
!7780 = !DILocation(line: 1785, column: 16, scope: !7781)
!7781 = distinct !DILexicalBlock(scope: !7775, file: !3, line: 1785, column: 16)
!7782 = !DILocation(line: 1785, column: 32, scope: !7781)
!7783 = !DILocation(line: 1785, column: 16, scope: !7775)
!7784 = !DILocation(line: 1786, column: 26, scope: !7781)
!7785 = !DILocation(line: 1786, column: 2, scope: !7781)
!7786 = !DILocation(line: 1787, column: 5, scope: !7771)
!7787 = !DILocation(line: 1791, column: 7, scope: !7788)
!7788 = distinct !DILexicalBlock(scope: !7727, file: !3, line: 1791, column: 7)
!7789 = !DILocation(line: 1791, column: 32, scope: !7788)
!7790 = !DILocation(line: 1791, column: 56, scope: !7788)
!7791 = !DILocation(line: 1791, column: 36, scope: !7788)
!7792 = !DILocation(line: 1791, column: 7, scope: !7727)
!7793 = !DILocation(line: 1792, column: 15, scope: !7788)
!7794 = !DILocation(line: 1792, column: 6, scope: !7788)
!7795 = !DILocation(line: 1792, column: 13, scope: !7788)
!7796 = !DILocation(line: 1792, column: 5, scope: !7788)
!7797 = !DILocation(line: 1795, column: 3, scope: !7727)
!7798 = distinct !DISubprogram(name: "gimplify_decl_expr", scope: !3, file: !3, line: 1290, type: !7298, scopeLine: 1291, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!7799 = !DILocalVariable(name: "stmt_p", arg: 1, scope: !7798, file: !3, line: 1290, type: !2049)
!7800 = !DILocation(line: 1290, column: 27, scope: !7798)
!7801 = !DILocalVariable(name: "seq_p", arg: 2, scope: !7798, file: !3, line: 1290, type: !3489)
!7802 = !DILocation(line: 1290, column: 47, scope: !7798)
!7803 = !DILocalVariable(name: "stmt", scope: !7798, file: !3, line: 1292, type: !1686)
!7804 = !DILocation(line: 1292, column: 8, scope: !7798)
!7805 = !DILocation(line: 1292, column: 16, scope: !7798)
!7806 = !DILocation(line: 1292, column: 15, scope: !7798)
!7807 = !DILocalVariable(name: "decl", scope: !7798, file: !3, line: 1293, type: !1686)
!7808 = !DILocation(line: 1293, column: 8, scope: !7798)
!7809 = !DILocation(line: 1293, column: 15, scope: !7798)
!7810 = !DILocation(line: 1295, column: 4, scope: !7798)
!7811 = !DILocation(line: 1295, column: 11, scope: !7798)
!7812 = !DILocation(line: 1297, column: 7, scope: !7813)
!7813 = distinct !DILexicalBlock(scope: !7798, file: !3, line: 1297, column: 7)
!7814 = !DILocation(line: 1297, column: 27, scope: !7813)
!7815 = !DILocation(line: 1297, column: 24, scope: !7813)
!7816 = !DILocation(line: 1297, column: 7, scope: !7798)
!7817 = !DILocation(line: 1298, column: 5, scope: !7813)
!7818 = !DILocation(line: 1300, column: 8, scope: !7819)
!7819 = distinct !DILexicalBlock(scope: !7798, file: !3, line: 1300, column: 7)
!7820 = !DILocation(line: 1300, column: 25, scope: !7819)
!7821 = !DILocation(line: 1301, column: 8, scope: !7819)
!7822 = !DILocation(line: 1301, column: 11, scope: !7819)
!7823 = !DILocation(line: 1301, column: 28, scope: !7819)
!7824 = !DILocation(line: 1302, column: 7, scope: !7819)
!7825 = !DILocation(line: 1302, column: 11, scope: !7819)
!7826 = !DILocation(line: 1300, column: 7, scope: !7798)
!7827 = !DILocation(line: 1303, column: 26, scope: !7819)
!7828 = !DILocation(line: 1303, column: 44, scope: !7819)
!7829 = !DILocation(line: 1303, column: 5, scope: !7819)
!7830 = !DILocation(line: 1305, column: 7, scope: !7831)
!7831 = distinct !DILexicalBlock(scope: !7798, file: !3, line: 1305, column: 7)
!7832 = !DILocation(line: 1305, column: 24, scope: !7831)
!7833 = !DILocation(line: 1305, column: 36, scope: !7831)
!7834 = !DILocation(line: 1305, column: 40, scope: !7831)
!7835 = !DILocation(line: 1305, column: 7, scope: !7798)
!7836 = !DILocalVariable(name: "init", scope: !7837, file: !3, line: 1307, type: !1686)
!7837 = distinct !DILexicalBlock(scope: !7831, file: !3, line: 1306, column: 5)
!7838 = !DILocation(line: 1307, column: 12, scope: !7837)
!7839 = !DILocation(line: 1307, column: 19, scope: !7837)
!7840 = !DILocation(line: 1309, column: 11, scope: !7841)
!7841 = distinct !DILexicalBlock(scope: !7837, file: !3, line: 1309, column: 11)
!7842 = !DILocation(line: 1309, column: 45, scope: !7841)
!7843 = !DILocation(line: 1310, column: 4, scope: !7841)
!7844 = !DILocation(line: 1310, column: 9, scope: !7841)
!7845 = !DILocation(line: 1311, column: 8, scope: !7841)
!7846 = !DILocation(line: 1311, column: 11, scope: !7841)
!7847 = !DILocation(line: 1311, column: 28, scope: !7841)
!7848 = !DILocation(line: 1312, column: 8, scope: !7841)
!7849 = !DILocation(line: 1312, column: 29, scope: !7841)
!7850 = !DILocation(line: 1312, column: 11, scope: !7841)
!7851 = !DILocation(line: 1313, column: 34, scope: !7841)
!7852 = !DILocation(line: 1309, column: 11, scope: !7837)
!7853 = !DILocation(line: 1314, column: 21, scope: !7841)
!7854 = !DILocation(line: 1314, column: 27, scope: !7841)
!7855 = !DILocation(line: 1314, column: 2, scope: !7841)
!7856 = !DILocation(line: 1316, column: 11, scope: !7857)
!7857 = distinct !DILexicalBlock(scope: !7837, file: !3, line: 1316, column: 11)
!7858 = !DILocation(line: 1316, column: 16, scope: !7857)
!7859 = !DILocation(line: 1316, column: 19, scope: !7857)
!7860 = !DILocation(line: 1316, column: 27, scope: !7857)
!7861 = !DILocation(line: 1316, column: 24, scope: !7857)
!7862 = !DILocation(line: 1316, column: 11, scope: !7837)
!7863 = !DILocation(line: 1318, column: 9, scope: !7864)
!7864 = distinct !DILexicalBlock(scope: !7865, file: !3, line: 1318, column: 8)
!7865 = distinct !DILexicalBlock(scope: !7857, file: !3, line: 1317, column: 2)
!7866 = !DILocation(line: 1318, column: 8, scope: !7865)
!7867 = !DILocation(line: 1320, column: 8, scope: !7868)
!7868 = distinct !DILexicalBlock(scope: !7864, file: !3, line: 1319, column: 6)
!7869 = !DILocation(line: 1320, column: 28, scope: !7868)
!7870 = !DILocation(line: 1321, column: 15, scope: !7868)
!7871 = !DILocation(line: 1321, column: 13, scope: !7868)
!7872 = !DILocation(line: 1322, column: 26, scope: !7868)
!7873 = !DILocation(line: 1322, column: 32, scope: !7868)
!7874 = !DILocation(line: 1322, column: 8, scope: !7868)
!7875 = !DILocation(line: 1323, column: 18, scope: !7868)
!7876 = !DILocation(line: 1323, column: 8, scope: !7868)
!7877 = !DILocation(line: 1324, column: 6, scope: !7868)
!7878 = !DILocation(line: 1328, column: 6, scope: !7864)
!7879 = !DILocation(line: 1329, column: 2, scope: !7865)
!7880 = !DILocation(line: 1335, column: 12, scope: !7881)
!7881 = distinct !DILexicalBlock(scope: !7837, file: !3, line: 1335, column: 11)
!7882 = !DILocation(line: 1336, column: 4, scope: !7881)
!7883 = !DILocation(line: 1336, column: 7, scope: !7881)
!7884 = !DILocation(line: 1336, column: 30, scope: !7881)
!7885 = !DILocation(line: 1336, column: 33, scope: !7881)
!7886 = !DILocation(line: 1336, column: 50, scope: !7881)
!7887 = !DILocation(line: 1335, column: 11, scope: !7837)
!7888 = !DILocation(line: 1337, column: 22, scope: !7881)
!7889 = !DILocation(line: 1337, column: 2, scope: !7881)
!7890 = !DILocation(line: 1338, column: 5, scope: !7837)
!7891 = !DILocation(line: 1340, column: 3, scope: !7798)
!7892 = !DILocation(line: 1341, column: 1, scope: !7798)
!7893 = distinct !DISubprogram(name: "gimplify_bind_expr", scope: !3, file: !3, line: 1073, type: !7298, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!7894 = !DILocalVariable(name: "expr_p", arg: 1, scope: !7893, file: !3, line: 1073, type: !2049)
!7895 = !DILocation(line: 1073, column: 27, scope: !7893)
!7896 = !DILocalVariable(name: "pre_p", arg: 2, scope: !7893, file: !3, line: 1073, type: !3489)
!7897 = !DILocation(line: 1073, column: 47, scope: !7893)
!7898 = !DILocalVariable(name: "bind_expr", scope: !7893, file: !3, line: 1075, type: !1686)
!7899 = !DILocation(line: 1075, column: 8, scope: !7893)
!7900 = !DILocation(line: 1075, column: 21, scope: !7893)
!7901 = !DILocation(line: 1075, column: 20, scope: !7893)
!7902 = !DILocalVariable(name: "old_save_stack", scope: !7893, file: !3, line: 1076, type: !1804)
!7903 = !DILocation(line: 1076, column: 8, scope: !7893)
!7904 = !DILocation(line: 1076, column: 25, scope: !7893)
!7905 = !DILocation(line: 1076, column: 40, scope: !7893)
!7906 = !DILocalVariable(name: "t", scope: !7893, file: !3, line: 1077, type: !1686)
!7907 = !DILocation(line: 1077, column: 8, scope: !7893)
!7908 = !DILocalVariable(name: "gimple_bind", scope: !7893, file: !3, line: 1078, type: !2014)
!7909 = !DILocation(line: 1078, column: 10, scope: !7893)
!7910 = !DILocalVariable(name: "body", scope: !7893, file: !3, line: 1079, type: !2004)
!7911 = !DILocation(line: 1079, column: 14, scope: !7893)
!7912 = !DILocalVariable(name: "temp", scope: !7893, file: !3, line: 1081, type: !1686)
!7913 = !DILocation(line: 1081, column: 8, scope: !7893)
!7914 = !DILocation(line: 1081, column: 37, scope: !7893)
!7915 = !DILocation(line: 1081, column: 15, scope: !7893)
!7916 = !DILocation(line: 1084, column: 12, scope: !7917)
!7917 = distinct !DILexicalBlock(scope: !7893, file: !3, line: 1084, column: 3)
!7918 = !DILocation(line: 1084, column: 10, scope: !7917)
!7919 = !DILocation(line: 1084, column: 8, scope: !7917)
!7920 = !DILocation(line: 1084, column: 40, scope: !7921)
!7921 = distinct !DILexicalBlock(scope: !7917, file: !3, line: 1084, column: 3)
!7922 = !DILocation(line: 1084, column: 3, scope: !7917)
!7923 = !DILocation(line: 1086, column: 11, scope: !7924)
!7924 = distinct !DILexicalBlock(scope: !7925, file: !3, line: 1086, column: 11)
!7925 = distinct !DILexicalBlock(scope: !7921, file: !3, line: 1085, column: 5)
!7926 = !DILocation(line: 1086, column: 25, scope: !7924)
!7927 = !DILocation(line: 1086, column: 11, scope: !7925)
!7928 = !DILocalVariable(name: "ctx", scope: !7929, file: !3, line: 1088, type: !3146)
!7929 = distinct !DILexicalBlock(scope: !7924, file: !3, line: 1087, column: 2)
!7930 = !DILocation(line: 1088, column: 29, scope: !7929)
!7931 = !DILocation(line: 1088, column: 35, scope: !7929)
!7932 = !DILocation(line: 1091, column: 8, scope: !7933)
!7933 = distinct !DILexicalBlock(scope: !7929, file: !3, line: 1091, column: 8)
!7934 = !DILocation(line: 1091, column: 12, scope: !7933)
!7935 = !DILocation(line: 1091, column: 31, scope: !7933)
!7936 = !DILocation(line: 1091, column: 16, scope: !7933)
!7937 = !DILocation(line: 1092, column: 8, scope: !7933)
!7938 = !DILocation(line: 1092, column: 14, scope: !7933)
!7939 = !DILocation(line: 1093, column: 5, scope: !7933)
!7940 = !DILocation(line: 1093, column: 27, scope: !7933)
!7941 = !DILocation(line: 1093, column: 32, scope: !7933)
!7942 = !DILocation(line: 1094, column: 23, scope: !7933)
!7943 = !DILocation(line: 1094, column: 6, scope: !7933)
!7944 = !DILocation(line: 1093, column: 8, scope: !7933)
!7945 = !DILocation(line: 1094, column: 26, scope: !7933)
!7946 = !DILocation(line: 1091, column: 8, scope: !7929)
!7947 = !DILocation(line: 1095, column: 24, scope: !7933)
!7948 = !DILocation(line: 1095, column: 43, scope: !7933)
!7949 = !DILocation(line: 1095, column: 6, scope: !7933)
!7950 = !DILocation(line: 1097, column: 4, scope: !7929)
!7951 = !DILocation(line: 1097, column: 33, scope: !7929)
!7952 = !DILocation(line: 1099, column: 8, scope: !7953)
!7953 = distinct !DILexicalBlock(scope: !7929, file: !3, line: 1099, column: 8)
!7954 = !DILocation(line: 1099, column: 31, scope: !7953)
!7955 = !DILocation(line: 1099, column: 50, scope: !7953)
!7956 = !DILocation(line: 1099, column: 35, scope: !7953)
!7957 = !DILocation(line: 1099, column: 53, scope: !7953)
!7958 = !DILocation(line: 1099, column: 56, scope: !7953)
!7959 = !DILocation(line: 1099, column: 8, scope: !7929)
!7960 = !DILocation(line: 1100, column: 6, scope: !7953)
!7961 = !DILocation(line: 1100, column: 12, scope: !7953)
!7962 = !DILocation(line: 1100, column: 40, scope: !7953)
!7963 = !DILocation(line: 1101, column: 2, scope: !7929)
!7964 = !DILocation(line: 1110, column: 11, scope: !7965)
!7965 = distinct !DILexicalBlock(scope: !7925, file: !3, line: 1110, column: 11)
!7966 = !DILocation(line: 1111, column: 4, scope: !7965)
!7967 = !DILocation(line: 1111, column: 8, scope: !7965)
!7968 = !DILocation(line: 1111, column: 34, scope: !7965)
!7969 = !DILocation(line: 1112, column: 8, scope: !7965)
!7970 = !DILocation(line: 1112, column: 11, scope: !7965)
!7971 = !DILocation(line: 1112, column: 37, scope: !7965)
!7972 = !DILocation(line: 1113, column: 4, scope: !7965)
!7973 = !DILocation(line: 1113, column: 8, scope: !7965)
!7974 = !DILocation(line: 1114, column: 4, scope: !7965)
!7975 = !DILocation(line: 1114, column: 8, scope: !7965)
!7976 = !DILocation(line: 1114, column: 22, scope: !7965)
!7977 = !DILocation(line: 1114, column: 34, scope: !7965)
!7978 = !DILocation(line: 1114, column: 38, scope: !7965)
!7979 = !DILocation(line: 1115, column: 4, scope: !7965)
!7980 = !DILocation(line: 1115, column: 33, scope: !7965)
!7981 = !DILocation(line: 1115, column: 8, scope: !7965)
!7982 = !DILocation(line: 1110, column: 11, scope: !7925)
!7983 = !DILocation(line: 1116, column: 2, scope: !7965)
!7984 = !DILocation(line: 1116, column: 24, scope: !7965)
!7985 = !DILocation(line: 1117, column: 5, scope: !7925)
!7986 = !DILocation(line: 1084, column: 48, scope: !7921)
!7987 = !DILocation(line: 1084, column: 46, scope: !7921)
!7988 = !DILocation(line: 1084, column: 3, scope: !7921)
!7989 = distinct !{!7989, !7922, !7990}
!7990 = !DILocation(line: 1117, column: 5, scope: !7917)
!7991 = !DILocation(line: 1119, column: 36, scope: !7893)
!7992 = !DILocation(line: 1120, column: 36, scope: !7893)
!7993 = !DILocation(line: 1119, column: 17, scope: !7893)
!7994 = !DILocation(line: 1119, column: 15, scope: !7893)
!7995 = !DILocation(line: 1121, column: 26, scope: !7893)
!7996 = !DILocation(line: 1121, column: 3, scope: !7893)
!7997 = !DILocation(line: 1123, column: 3, scope: !7893)
!7998 = !DILocation(line: 1123, column: 18, scope: !7893)
!7999 = !DILocation(line: 1123, column: 29, scope: !7893)
!8000 = !DILocation(line: 1126, column: 8, scope: !7893)
!8001 = !DILocation(line: 1127, column: 19, scope: !7893)
!8002 = !DILocation(line: 1127, column: 3, scope: !7893)
!8003 = !DILocation(line: 1128, column: 25, scope: !7893)
!8004 = !DILocation(line: 1128, column: 38, scope: !7893)
!8005 = !DILocation(line: 1128, column: 3, scope: !7893)
!8006 = !DILocation(line: 1130, column: 7, scope: !8007)
!8007 = distinct !DILexicalBlock(scope: !7893, file: !3, line: 1130, column: 7)
!8008 = !DILocation(line: 1130, column: 22, scope: !8007)
!8009 = !DILocation(line: 1130, column: 7, scope: !7893)
!8010 = !DILocalVariable(name: "stack_save", scope: !8011, file: !3, line: 1132, type: !2014)
!8011 = distinct !DILexicalBlock(scope: !8007, file: !3, line: 1131, column: 5)
!8012 = !DILocation(line: 1132, column: 14, scope: !8011)
!8013 = !DILocalVariable(name: "stack_restore", scope: !8011, file: !3, line: 1132, type: !2014)
!8014 = !DILocation(line: 1132, column: 26, scope: !8011)
!8015 = !DILocalVariable(name: "gs", scope: !8011, file: !3, line: 1132, type: !2014)
!8016 = !DILocation(line: 1132, column: 41, scope: !8011)
!8017 = !DILocalVariable(name: "cleanup", scope: !8011, file: !3, line: 1133, type: !2004)
!8018 = !DILocation(line: 1133, column: 18, scope: !8011)
!8019 = !DILocalVariable(name: "new_body", scope: !8011, file: !3, line: 1133, type: !2004)
!8020 = !DILocation(line: 1133, column: 27, scope: !8011)
!8021 = !DILocation(line: 1138, column: 7, scope: !8011)
!8022 = !DILocation(line: 1140, column: 26, scope: !8011)
!8023 = !DILocation(line: 1140, column: 15, scope: !8011)
!8024 = !DILocation(line: 1141, column: 40, scope: !8011)
!8025 = !DILocation(line: 1141, column: 7, scope: !8011)
!8026 = !DILocation(line: 1142, column: 48, scope: !8011)
!8027 = !DILocation(line: 1142, column: 30, scope: !8011)
!8028 = !DILocation(line: 1142, column: 62, scope: !8011)
!8029 = !DILocation(line: 1142, column: 12, scope: !8011)
!8030 = !DILocation(line: 1142, column: 10, scope: !8011)
!8031 = !DILocation(line: 1145, column: 41, scope: !8011)
!8032 = !DILocation(line: 1145, column: 7, scope: !8011)
!8033 = !DILocation(line: 1146, column: 41, scope: !8011)
!8034 = !DILocation(line: 1146, column: 7, scope: !8011)
!8035 = !DILocation(line: 1147, column: 29, scope: !8011)
!8036 = !DILocation(line: 1147, column: 42, scope: !8011)
!8037 = !DILocation(line: 1147, column: 7, scope: !8011)
!8038 = !DILocation(line: 1148, column: 5, scope: !8011)
!8039 = !DILocation(line: 1150, column: 31, scope: !7893)
!8040 = !DILocation(line: 1150, column: 3, scope: !7893)
!8041 = !DILocation(line: 1150, column: 18, scope: !7893)
!8042 = !DILocation(line: 1150, column: 29, scope: !7893)
!8043 = !DILocation(line: 1151, column: 3, scope: !7893)
!8044 = !DILocation(line: 1153, column: 26, scope: !7893)
!8045 = !DILocation(line: 1153, column: 33, scope: !7893)
!8046 = !DILocation(line: 1153, column: 3, scope: !7893)
!8047 = !DILocation(line: 1155, column: 7, scope: !8048)
!8048 = distinct !DILexicalBlock(scope: !7893, file: !3, line: 1155, column: 7)
!8049 = !DILocation(line: 1155, column: 7, scope: !7893)
!8050 = !DILocation(line: 1157, column: 17, scope: !8051)
!8051 = distinct !DILexicalBlock(scope: !8048, file: !3, line: 1156, column: 5)
!8052 = !DILocation(line: 1157, column: 8, scope: !8051)
!8053 = !DILocation(line: 1157, column: 15, scope: !8051)
!8054 = !DILocation(line: 1158, column: 7, scope: !8051)
!8055 = !DILocation(line: 1161, column: 4, scope: !7893)
!8056 = !DILocation(line: 1161, column: 11, scope: !7893)
!8057 = !DILocation(line: 1162, column: 3, scope: !7893)
!8058 = !DILocation(line: 1163, column: 1, scope: !7893)
!8059 = distinct !DISubprogram(name: "gimplify_loop_expr", scope: !3, file: !3, line: 1348, type: !7298, scopeLine: 1349, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!8060 = !DILocalVariable(name: "expr_p", arg: 1, scope: !8059, file: !3, line: 1348, type: !2049)
!8061 = !DILocation(line: 1348, column: 27, scope: !8059)
!8062 = !DILocalVariable(name: "pre_p", arg: 2, scope: !8059, file: !3, line: 1348, type: !3489)
!8063 = !DILocation(line: 1348, column: 47, scope: !8059)
!8064 = !DILocalVariable(name: "saved_label", scope: !8059, file: !3, line: 1350, type: !1686)
!8065 = !DILocation(line: 1350, column: 8, scope: !8059)
!8066 = !DILocation(line: 1350, column: 22, scope: !8059)
!8067 = !DILocation(line: 1350, column: 37, scope: !8059)
!8068 = !DILocalVariable(name: "start_label", scope: !8059, file: !3, line: 1351, type: !1686)
!8069 = !DILocation(line: 1351, column: 8, scope: !8059)
!8070 = !DILocation(line: 1351, column: 22, scope: !8059)
!8071 = !DILocation(line: 1353, column: 26, scope: !8059)
!8072 = !DILocation(line: 1353, column: 53, scope: !8059)
!8073 = !DILocation(line: 1353, column: 33, scope: !8059)
!8074 = !DILocation(line: 1353, column: 3, scope: !8059)
!8075 = !DILocation(line: 1355, column: 3, scope: !8059)
!8076 = !DILocation(line: 1355, column: 18, scope: !8059)
!8077 = !DILocation(line: 1355, column: 29, scope: !8059)
!8078 = !DILocation(line: 1357, column: 21, scope: !8059)
!8079 = !DILocation(line: 1357, column: 47, scope: !8059)
!8080 = !DILocation(line: 1357, column: 3, scope: !8059)
!8081 = !DILocation(line: 1359, column: 26, scope: !8059)
!8082 = !DILocation(line: 1359, column: 52, scope: !8059)
!8083 = !DILocation(line: 1359, column: 33, scope: !8059)
!8084 = !DILocation(line: 1359, column: 3, scope: !8059)
!8085 = !DILocation(line: 1361, column: 7, scope: !8086)
!8086 = distinct !DILexicalBlock(scope: !8059, file: !3, line: 1361, column: 7)
!8087 = !DILocation(line: 1361, column: 22, scope: !8086)
!8088 = !DILocation(line: 1361, column: 7, scope: !8059)
!8089 = !DILocation(line: 1362, column: 28, scope: !8086)
!8090 = !DILocation(line: 1362, column: 55, scope: !8086)
!8091 = !DILocation(line: 1362, column: 70, scope: !8086)
!8092 = !DILocation(line: 1362, column: 35, scope: !8086)
!8093 = !DILocation(line: 1362, column: 5, scope: !8086)
!8094 = !DILocation(line: 1364, column: 31, scope: !8059)
!8095 = !DILocation(line: 1364, column: 3, scope: !8059)
!8096 = !DILocation(line: 1364, column: 18, scope: !8059)
!8097 = !DILocation(line: 1364, column: 29, scope: !8059)
!8098 = !DILocation(line: 1366, column: 4, scope: !8059)
!8099 = !DILocation(line: 1366, column: 11, scope: !8059)
!8100 = !DILocation(line: 1367, column: 3, scope: !8059)
!8101 = distinct !DISubprogram(name: "gimplify_switch_expr", scope: !3, file: !3, line: 1435, type: !7298, scopeLine: 1436, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!8102 = !DILocalVariable(name: "expr_p", arg: 1, scope: !8101, file: !3, line: 1435, type: !2049)
!8103 = !DILocation(line: 1435, column: 29, scope: !8101)
!8104 = !DILocalVariable(name: "pre_p", arg: 2, scope: !8101, file: !3, line: 1435, type: !3489)
!8105 = !DILocation(line: 1435, column: 49, scope: !8101)
!8106 = !DILocalVariable(name: "switch_expr", scope: !8101, file: !3, line: 1437, type: !1686)
!8107 = !DILocation(line: 1437, column: 8, scope: !8101)
!8108 = !DILocation(line: 1437, column: 23, scope: !8101)
!8109 = !DILocation(line: 1437, column: 22, scope: !8101)
!8110 = !DILocalVariable(name: "switch_body_seq", scope: !8101, file: !3, line: 1438, type: !2004)
!8111 = !DILocation(line: 1438, column: 14, scope: !8101)
!8112 = !DILocalVariable(name: "ret", scope: !8101, file: !3, line: 1439, type: !1329)
!8113 = !DILocation(line: 1439, column: 24, scope: !8101)
!8114 = !DILocation(line: 1441, column: 25, scope: !8101)
!8115 = !DILocation(line: 1441, column: 52, scope: !8101)
!8116 = !DILocation(line: 1441, column: 9, scope: !8101)
!8117 = !DILocation(line: 1441, column: 7, scope: !8101)
!8118 = !DILocation(line: 1443, column: 7, scope: !8119)
!8119 = distinct !DILexicalBlock(scope: !8101, file: !3, line: 1443, column: 7)
!8120 = !DILocation(line: 1443, column: 11, scope: !8119)
!8121 = !DILocation(line: 1443, column: 23, scope: !8119)
!8122 = !DILocation(line: 1443, column: 26, scope: !8119)
!8123 = !DILocation(line: 1443, column: 30, scope: !8119)
!8124 = !DILocation(line: 1443, column: 7, scope: !8101)
!8125 = !DILocation(line: 1444, column: 12, scope: !8119)
!8126 = !DILocation(line: 1444, column: 5, scope: !8119)
!8127 = !DILocation(line: 1446, column: 7, scope: !8128)
!8128 = distinct !DILexicalBlock(scope: !8101, file: !3, line: 1446, column: 7)
!8129 = !DILocation(line: 1446, column: 7, scope: !8101)
!8130 = !DILocalVariable(name: "labels", scope: !8131, file: !3, line: 1448, type: !3131)
!8131 = distinct !DILexicalBlock(scope: !8128, file: !3, line: 1447, column: 5)
!8132 = !DILocation(line: 1448, column: 24, scope: !8131)
!8133 = !DILocalVariable(name: "saved_labels", scope: !8131, file: !3, line: 1449, type: !3131)
!8134 = !DILocation(line: 1449, column: 24, scope: !8131)
!8135 = !DILocalVariable(name: "default_case", scope: !8131, file: !3, line: 1450, type: !1686)
!8136 = !DILocation(line: 1450, column: 12, scope: !8131)
!8137 = !DILocalVariable(name: "i", scope: !8131, file: !3, line: 1451, type: !2160)
!8138 = !DILocation(line: 1451, column: 14, scope: !8131)
!8139 = !DILocalVariable(name: "len", scope: !8131, file: !3, line: 1451, type: !2160)
!8140 = !DILocation(line: 1451, column: 17, scope: !8131)
!8141 = !DILocalVariable(name: "gimple_switch", scope: !8131, file: !3, line: 1452, type: !2014)
!8142 = !DILocation(line: 1452, column: 14, scope: !8131)
!8143 = !DILocation(line: 1456, column: 7, scope: !8131)
!8144 = !DILocation(line: 1460, column: 22, scope: !8131)
!8145 = !DILocation(line: 1460, column: 37, scope: !8131)
!8146 = !DILocation(line: 1460, column: 20, scope: !8131)
!8147 = !DILocation(line: 1461, column: 36, scope: !8131)
!8148 = !DILocation(line: 1461, column: 7, scope: !8131)
!8149 = !DILocation(line: 1461, column: 22, scope: !8131)
!8150 = !DILocation(line: 1461, column: 34, scope: !8131)
!8151 = !DILocation(line: 1463, column: 23, scope: !8131)
!8152 = !DILocation(line: 1463, column: 7, scope: !8131)
!8153 = !DILocation(line: 1464, column: 16, scope: !8131)
!8154 = !DILocation(line: 1464, column: 31, scope: !8131)
!8155 = !DILocation(line: 1464, column: 14, scope: !8131)
!8156 = !DILocation(line: 1465, column: 36, scope: !8131)
!8157 = !DILocation(line: 1465, column: 7, scope: !8131)
!8158 = !DILocation(line: 1465, column: 22, scope: !8131)
!8159 = !DILocation(line: 1465, column: 34, scope: !8131)
!8160 = !DILocation(line: 1467, column: 9, scope: !8131)
!8161 = !DILocation(line: 1468, column: 7, scope: !8131)
!8162 = !DILocation(line: 1468, column: 14, scope: !8131)
!8163 = !DILocation(line: 1468, column: 18, scope: !8131)
!8164 = !DILocation(line: 1468, column: 16, scope: !8131)
!8165 = !DILocalVariable(name: "elt", scope: !8166, file: !3, line: 1470, type: !1686)
!8166 = distinct !DILexicalBlock(scope: !8131, file: !3, line: 1469, column: 2)
!8167 = !DILocation(line: 1470, column: 9, scope: !8166)
!8168 = !DILocation(line: 1470, column: 15, scope: !8166)
!8169 = !DILocalVariable(name: "low", scope: !8166, file: !3, line: 1471, type: !1686)
!8170 = !DILocation(line: 1471, column: 9, scope: !8166)
!8171 = !DILocation(line: 1471, column: 15, scope: !8166)
!8172 = !DILocalVariable(name: "remove_element", scope: !8166, file: !3, line: 1472, type: !1804)
!8173 = !DILocation(line: 1472, column: 9, scope: !8166)
!8174 = !DILocation(line: 1474, column: 8, scope: !8175)
!8175 = distinct !DILexicalBlock(scope: !8166, file: !3, line: 1474, column: 8)
!8176 = !DILocation(line: 1474, column: 8, scope: !8166)
!8177 = !DILocalVariable(name: "high", scope: !8178, file: !3, line: 1477, type: !1686)
!8178 = distinct !DILexicalBlock(scope: !8175, file: !3, line: 1475, column: 6)
!8179 = !DILocation(line: 1477, column: 13, scope: !8178)
!8180 = !DILocation(line: 1477, column: 20, scope: !8178)
!8181 = !DILocation(line: 1478, column: 12, scope: !8182)
!8182 = distinct !DILexicalBlock(scope: !8178, file: !3, line: 1478, column: 12)
!8183 = !DILocation(line: 1478, column: 17, scope: !8182)
!8184 = !DILocation(line: 1478, column: 37, scope: !8182)
!8185 = !DILocation(line: 1478, column: 43, scope: !8182)
!8186 = !DILocation(line: 1478, column: 20, scope: !8182)
!8187 = !DILocation(line: 1478, column: 12, scope: !8178)
!8188 = !DILocation(line: 1479, column: 25, scope: !8182)
!8189 = !DILocation(line: 1479, column: 10, scope: !8182)
!8190 = !DILocation(line: 1480, column: 6, scope: !8178)
!8191 = !DILocation(line: 1484, column: 8, scope: !8192)
!8192 = distinct !DILexicalBlock(scope: !8175, file: !3, line: 1482, column: 6)
!8193 = !DILocation(line: 1485, column: 23, scope: !8192)
!8194 = !DILocation(line: 1485, column: 21, scope: !8192)
!8195 = !DILocation(line: 1486, column: 23, scope: !8192)
!8196 = !DILocation(line: 1489, column: 8, scope: !8197)
!8197 = distinct !DILexicalBlock(scope: !8166, file: !3, line: 1489, column: 8)
!8198 = !DILocation(line: 1489, column: 8, scope: !8166)
!8199 = !DILocation(line: 1490, column: 6, scope: !8197)
!8200 = !DILocation(line: 1492, column: 7, scope: !8197)
!8201 = distinct !{!8201, !8161, !8202}
!8202 = !DILocation(line: 1493, column: 2, scope: !8131)
!8203 = !DILocation(line: 1494, column: 13, scope: !8131)
!8204 = !DILocation(line: 1494, column: 11, scope: !8131)
!8205 = !DILocation(line: 1496, column: 12, scope: !8206)
!8206 = distinct !DILexicalBlock(scope: !8131, file: !3, line: 1496, column: 11)
!8207 = !DILocation(line: 1496, column: 11, scope: !8131)
!8208 = !DILocation(line: 1497, column: 20, scope: !8206)
!8209 = !DILocation(line: 1497, column: 2, scope: !8206)
!8210 = !DILocation(line: 1499, column: 12, scope: !8211)
!8211 = distinct !DILexicalBlock(scope: !8131, file: !3, line: 1499, column: 11)
!8212 = !DILocation(line: 1499, column: 11, scope: !8131)
!8213 = !DILocalVariable(name: "type", scope: !8214, file: !3, line: 1501, type: !1686)
!8214 = distinct !DILexicalBlock(scope: !8211, file: !3, line: 1500, column: 2)
!8215 = !DILocation(line: 1501, column: 9, scope: !8214)
!8216 = !DILocation(line: 1501, column: 16, scope: !8214)
!8217 = !DILocation(line: 1507, column: 8, scope: !8218)
!8218 = distinct !DILexicalBlock(scope: !8214, file: !3, line: 1507, column: 8)
!8219 = !DILocation(line: 1507, column: 16, scope: !8218)
!8220 = !DILocation(line: 1507, column: 13, scope: !8218)
!8221 = !DILocation(line: 1507, column: 8, scope: !8214)
!8222 = !DILocation(line: 1508, column: 13, scope: !8218)
!8223 = !DILocation(line: 1508, column: 11, scope: !8218)
!8224 = !DILocation(line: 1508, column: 6, scope: !8218)
!8225 = !DILocation(line: 1509, column: 8, scope: !8226)
!8226 = distinct !DILexicalBlock(scope: !8214, file: !3, line: 1509, column: 8)
!8227 = !DILocation(line: 1510, column: 8, scope: !8226)
!8228 = !DILocation(line: 1510, column: 11, scope: !8226)
!8229 = !DILocation(line: 1511, column: 8, scope: !8226)
!8230 = !DILocation(line: 1511, column: 11, scope: !8226)
!8231 = !DILocation(line: 1512, column: 8, scope: !8226)
!8232 = !DILocation(line: 1512, column: 11, scope: !8226)
!8233 = !DILocation(line: 1513, column: 8, scope: !8226)
!8234 = !DILocation(line: 1513, column: 31, scope: !8226)
!8235 = !DILocation(line: 1514, column: 10, scope: !8226)
!8236 = !DILocation(line: 1513, column: 11, scope: !8226)
!8237 = !DILocation(line: 1509, column: 8, scope: !8214)
!8238 = !DILocalVariable(name: "low", scope: !8239, file: !3, line: 1516, type: !1686)
!8239 = distinct !DILexicalBlock(scope: !8226, file: !3, line: 1515, column: 6)
!8240 = !DILocation(line: 1516, column: 13, scope: !8239)
!8241 = !DILocalVariable(name: "high", scope: !8239, file: !3, line: 1516, type: !1686)
!8242 = !DILocation(line: 1516, column: 18, scope: !8239)
!8243 = !DILocation(line: 1516, column: 25, scope: !8239)
!8244 = !DILocation(line: 1517, column: 13, scope: !8245)
!8245 = distinct !DILexicalBlock(scope: !8239, file: !3, line: 1517, column: 12)
!8246 = !DILocation(line: 1517, column: 12, scope: !8239)
!8247 = !DILocation(line: 1518, column: 10, scope: !8245)
!8248 = !DILocation(line: 1518, column: 8, scope: !8245)
!8249 = !DILocation(line: 1518, column: 3, scope: !8245)
!8250 = !DILocation(line: 1519, column: 32, scope: !8251)
!8251 = distinct !DILexicalBlock(scope: !8239, file: !3, line: 1519, column: 12)
!8252 = !DILocation(line: 1519, column: 38, scope: !8251)
!8253 = !DILocation(line: 1519, column: 12, scope: !8251)
!8254 = !DILocation(line: 1519, column: 12, scope: !8239)
!8255 = !DILocation(line: 1521, column: 12, scope: !8256)
!8256 = distinct !DILexicalBlock(scope: !8257, file: !3, line: 1521, column: 5)
!8257 = distinct !DILexicalBlock(scope: !8251, file: !3, line: 1520, column: 3)
!8258 = !DILocation(line: 1521, column: 10, scope: !8256)
!8259 = !DILocation(line: 1521, column: 17, scope: !8260)
!8260 = distinct !DILexicalBlock(scope: !8256, file: !3, line: 1521, column: 5)
!8261 = !DILocation(line: 1521, column: 21, scope: !8260)
!8262 = !DILocation(line: 1521, column: 19, scope: !8260)
!8263 = !DILocation(line: 1521, column: 5, scope: !8256)
!8264 = !DILocation(line: 1523, column: 16, scope: !8265)
!8265 = distinct !DILexicalBlock(scope: !8260, file: !3, line: 1522, column: 7)
!8266 = !DILocation(line: 1523, column: 14, scope: !8265)
!8267 = !DILocation(line: 1524, column: 15, scope: !8265)
!8268 = !DILocation(line: 1524, column: 13, scope: !8265)
!8269 = !DILocation(line: 1525, column: 14, scope: !8270)
!8270 = distinct !DILexicalBlock(scope: !8265, file: !3, line: 1525, column: 13)
!8271 = !DILocation(line: 1525, column: 13, scope: !8265)
!8272 = !DILocation(line: 1526, column: 10, scope: !8270)
!8273 = !DILocation(line: 1526, column: 8, scope: !8270)
!8274 = !DILocation(line: 1526, column: 4, scope: !8270)
!8275 = !DILocation(line: 1527, column: 14, scope: !8276)
!8276 = distinct !DILexicalBlock(scope: !8265, file: !3, line: 1527, column: 13)
!8277 = !DILocation(line: 1527, column: 37, scope: !8276)
!8278 = !DILocation(line: 1528, column: 10, scope: !8276)
!8279 = !DILocation(line: 1528, column: 7, scope: !8276)
!8280 = !DILocation(line: 1529, column: 6, scope: !8276)
!8281 = !DILocation(line: 1529, column: 10, scope: !8276)
!8282 = !DILocation(line: 1530, column: 13, scope: !8276)
!8283 = !DILocation(line: 1530, column: 37, scope: !8276)
!8284 = !DILocation(line: 1530, column: 12, scope: !8276)
!8285 = !DILocation(line: 1530, column: 10, scope: !8276)
!8286 = !DILocation(line: 1531, column: 13, scope: !8276)
!8287 = !DILocation(line: 1531, column: 10, scope: !8276)
!8288 = !DILocation(line: 1527, column: 13, scope: !8265)
!8289 = !DILocation(line: 1532, column: 4, scope: !8276)
!8290 = !DILocation(line: 1533, column: 7, scope: !8265)
!8291 = !DILocation(line: 1521, column: 27, scope: !8260)
!8292 = !DILocation(line: 1521, column: 5, scope: !8260)
!8293 = distinct !{!8293, !8263, !8294}
!8294 = !DILocation(line: 1533, column: 7, scope: !8256)
!8295 = !DILocation(line: 1534, column: 9, scope: !8296)
!8296 = distinct !DILexicalBlock(scope: !8257, file: !3, line: 1534, column: 9)
!8297 = !DILocation(line: 1534, column: 14, scope: !8296)
!8298 = !DILocation(line: 1534, column: 11, scope: !8296)
!8299 = !DILocation(line: 1534, column: 9, scope: !8257)
!8300 = !DILocation(line: 1535, column: 22, scope: !8296)
!8301 = !DILocation(line: 1535, column: 20, scope: !8296)
!8302 = !DILocation(line: 1535, column: 7, scope: !8296)
!8303 = !DILocation(line: 1539, column: 3, scope: !8257)
!8304 = !DILocation(line: 1540, column: 6, scope: !8239)
!8305 = !DILocation(line: 1542, column: 9, scope: !8306)
!8306 = distinct !DILexicalBlock(scope: !8214, file: !3, line: 1542, column: 8)
!8307 = !DILocation(line: 1542, column: 8, scope: !8214)
!8308 = !DILocalVariable(name: "new_default", scope: !8309, file: !3, line: 1544, type: !2014)
!8309 = distinct !DILexicalBlock(scope: !8306, file: !3, line: 1543, column: 6)
!8310 = !DILocation(line: 1544, column: 15, scope: !8309)
!8311 = !DILocation(line: 1547, column: 5, scope: !8309)
!8312 = !DILocation(line: 1547, column: 3, scope: !8309)
!8313 = !DILocation(line: 1550, column: 42, scope: !8309)
!8314 = !DILocation(line: 1550, column: 22, scope: !8309)
!8315 = !DILocation(line: 1550, column: 20, scope: !8309)
!8316 = !DILocation(line: 1551, column: 49, scope: !8309)
!8317 = !DILocation(line: 1551, column: 8, scope: !8309)
!8318 = !DILocation(line: 1552, column: 6, scope: !8309)
!8319 = !DILocation(line: 1553, column: 2, scope: !8214)
!8320 = !DILocation(line: 1555, column: 48, scope: !8131)
!8321 = !DILocation(line: 1556, column: 48, scope: !8131)
!8322 = !DILocation(line: 1556, column: 62, scope: !8131)
!8323 = !DILocation(line: 1555, column: 23, scope: !8131)
!8324 = !DILocation(line: 1555, column: 21, scope: !8131)
!8325 = !DILocation(line: 1557, column: 30, scope: !8131)
!8326 = !DILocation(line: 1557, column: 37, scope: !8131)
!8327 = !DILocation(line: 1557, column: 7, scope: !8131)
!8328 = !DILocation(line: 1558, column: 29, scope: !8131)
!8329 = !DILocation(line: 1558, column: 36, scope: !8131)
!8330 = !DILocation(line: 1558, column: 7, scope: !8131)
!8331 = !DILocation(line: 1559, column: 7, scope: !8131)
!8332 = !DILocation(line: 1560, column: 5, scope: !8131)
!8333 = !DILocation(line: 1562, column: 5, scope: !8128)
!8334 = !DILocation(line: 1564, column: 3, scope: !8101)
!8335 = !DILocation(line: 1565, column: 1, scope: !8101)
!8336 = distinct !DISubprogram(name: "gimplify_exit_expr", scope: !3, file: !3, line: 1612, type: !7728, scopeLine: 1613, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!8337 = !DILocalVariable(name: "expr_p", arg: 1, scope: !8336, file: !3, line: 1612, type: !2049)
!8338 = !DILocation(line: 1612, column: 27, scope: !8336)
!8339 = !DILocalVariable(name: "cond", scope: !8336, file: !3, line: 1614, type: !1686)
!8340 = !DILocation(line: 1614, column: 8, scope: !8336)
!8341 = !DILocation(line: 1614, column: 15, scope: !8336)
!8342 = !DILocalVariable(name: "expr", scope: !8336, file: !3, line: 1615, type: !1686)
!8343 = !DILocation(line: 1615, column: 8, scope: !8336)
!8344 = !DILocation(line: 1617, column: 27, scope: !8336)
!8345 = !DILocation(line: 1617, column: 42, scope: !8336)
!8346 = !DILocation(line: 1617, column: 10, scope: !8336)
!8347 = !DILocation(line: 1617, column: 8, scope: !8336)
!8348 = !DILocation(line: 1618, column: 10, scope: !8336)
!8349 = !DILocation(line: 1618, column: 8, scope: !8336)
!8350 = !DILocation(line: 1619, column: 13, scope: !8336)
!8351 = !DILocation(line: 1619, column: 4, scope: !8336)
!8352 = !DILocation(line: 1619, column: 11, scope: !8336)
!8353 = !DILocation(line: 1621, column: 3, scope: !8336)
!8354 = distinct !DISubprogram(name: "gimplify_seq_add_stmt", scope: !3, file: !3, line: 162, type: !8355, scopeLine: 163, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!8355 = !DISubroutineType(types: !8356)
!8356 = !{null, !3489, !2014}
!8357 = !DILocalVariable(name: "seq_p", arg: 1, scope: !8354, file: !3, line: 162, type: !3489)
!8358 = !DILocation(line: 162, column: 36, scope: !8354)
!8359 = !DILocalVariable(name: "gs", arg: 2, scope: !8354, file: !3, line: 162, type: !2014)
!8360 = !DILocation(line: 162, column: 50, scope: !8354)
!8361 = !DILocalVariable(name: "si", scope: !8354, file: !3, line: 164, type: !4033)
!8362 = !DILocation(line: 164, column: 24, scope: !8354)
!8363 = !DILocation(line: 166, column: 7, scope: !8364)
!8364 = distinct !DILexicalBlock(scope: !8354, file: !3, line: 166, column: 7)
!8365 = !DILocation(line: 166, column: 10, scope: !8364)
!8366 = !DILocation(line: 166, column: 7, scope: !8354)
!8367 = !DILocation(line: 167, column: 5, scope: !8364)
!8368 = !DILocation(line: 169, column: 8, scope: !8369)
!8369 = distinct !DILexicalBlock(scope: !8354, file: !3, line: 169, column: 7)
!8370 = !DILocation(line: 169, column: 7, scope: !8369)
!8371 = !DILocation(line: 169, column: 14, scope: !8369)
!8372 = !DILocation(line: 169, column: 7, scope: !8354)
!8373 = !DILocation(line: 170, column: 14, scope: !8369)
!8374 = !DILocation(line: 170, column: 6, scope: !8369)
!8375 = !DILocation(line: 170, column: 12, scope: !8369)
!8376 = !DILocation(line: 170, column: 5, scope: !8369)
!8377 = !DILocation(line: 172, column: 19, scope: !8354)
!8378 = !DILocation(line: 172, column: 18, scope: !8354)
!8379 = !DILocation(line: 172, column: 8, scope: !8354)
!8380 = !DILocation(line: 174, column: 41, scope: !8354)
!8381 = !DILocation(line: 174, column: 3, scope: !8354)
!8382 = !DILocation(line: 175, column: 1, scope: !8354)
!8383 = distinct !DISubprogram(name: "gimplify_case_label_expr", scope: !3, file: !3, line: 1569, type: !7298, scopeLine: 1570, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!8384 = !DILocalVariable(name: "expr_p", arg: 1, scope: !8383, file: !3, line: 1569, type: !2049)
!8385 = !DILocation(line: 1569, column: 33, scope: !8383)
!8386 = !DILocalVariable(name: "pre_p", arg: 2, scope: !8383, file: !3, line: 1569, type: !3489)
!8387 = !DILocation(line: 1569, column: 53, scope: !8383)
!8388 = !DILocalVariable(name: "ctxp", scope: !8383, file: !3, line: 1571, type: !3220)
!8389 = !DILocation(line: 1571, column: 24, scope: !8383)
!8390 = !DILocalVariable(name: "gimple_label", scope: !8383, file: !3, line: 1572, type: !2014)
!8391 = !DILocation(line: 1572, column: 10, scope: !8383)
!8392 = !DILocation(line: 1577, column: 15, scope: !8393)
!8393 = distinct !DILexicalBlock(scope: !8383, file: !3, line: 1577, column: 3)
!8394 = !DILocation(line: 1577, column: 13, scope: !8393)
!8395 = !DILocation(line: 1577, column: 8, scope: !8393)
!8396 = !DILocation(line: 1578, column: 9, scope: !8397)
!8397 = distinct !DILexicalBlock(scope: !8398, file: !3, line: 1578, column: 9)
!8398 = distinct !DILexicalBlock(scope: !8393, file: !3, line: 1577, column: 3)
!8399 = !DILocation(line: 1578, column: 15, scope: !8397)
!8400 = !DILocation(line: 1578, column: 9, scope: !8398)
!8401 = !DILocation(line: 1579, column: 7, scope: !8397)
!8402 = !DILocation(line: 1577, column: 39, scope: !8398)
!8403 = !DILocation(line: 1577, column: 45, scope: !8398)
!8404 = !DILocation(line: 1577, column: 37, scope: !8398)
!8405 = !DILocation(line: 1577, column: 3, scope: !8398)
!8406 = distinct !{!8406, !8407, !8408}
!8407 = !DILocation(line: 1577, column: 3, scope: !8393)
!8408 = !DILocation(line: 1579, column: 7, scope: !8393)
!8409 = !DILocation(line: 1581, column: 38, scope: !8383)
!8410 = !DILocation(line: 1581, column: 18, scope: !8383)
!8411 = !DILocation(line: 1581, column: 16, scope: !8383)
!8412 = !DILocation(line: 1582, column: 3, scope: !8383)
!8413 = !DILocation(line: 1583, column: 26, scope: !8383)
!8414 = !DILocation(line: 1583, column: 33, scope: !8383)
!8415 = !DILocation(line: 1583, column: 3, scope: !8383)
!8416 = !DILocation(line: 1585, column: 3, scope: !8383)
!8417 = distinct !DISubprogram(name: "gimplify_return_expr", scope: !3, file: !3, line: 1173, type: !8418, scopeLine: 1174, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!8418 = !DISubroutineType(types: !8419)
!8419 = !{!1329, !1686, !3489}
!8420 = !DILocalVariable(name: "stmt", arg: 1, scope: !8417, file: !3, line: 1173, type: !1686)
!8421 = !DILocation(line: 1173, column: 28, scope: !8417)
!8422 = !DILocalVariable(name: "pre_p", arg: 2, scope: !8417, file: !3, line: 1173, type: !3489)
!8423 = !DILocation(line: 1173, column: 46, scope: !8417)
!8424 = !DILocalVariable(name: "ret", scope: !8417, file: !3, line: 1175, type: !2014)
!8425 = !DILocation(line: 1175, column: 10, scope: !8417)
!8426 = !DILocalVariable(name: "ret_expr", scope: !8417, file: !3, line: 1176, type: !1686)
!8427 = !DILocation(line: 1176, column: 8, scope: !8417)
!8428 = !DILocation(line: 1176, column: 19, scope: !8417)
!8429 = !DILocalVariable(name: "result_decl", scope: !8417, file: !3, line: 1177, type: !1686)
!8430 = !DILocation(line: 1177, column: 8, scope: !8417)
!8431 = !DILocalVariable(name: "result", scope: !8417, file: !3, line: 1177, type: !1686)
!8432 = !DILocation(line: 1177, column: 21, scope: !8417)
!8433 = !DILocation(line: 1179, column: 7, scope: !8434)
!8434 = distinct !DILexicalBlock(scope: !8417, file: !3, line: 1179, column: 7)
!8435 = !DILocation(line: 1179, column: 19, scope: !8434)
!8436 = !DILocation(line: 1179, column: 16, scope: !8434)
!8437 = !DILocation(line: 1179, column: 7, scope: !8417)
!8438 = !DILocation(line: 1180, column: 5, scope: !8434)
!8439 = !DILocation(line: 1182, column: 8, scope: !8440)
!8440 = distinct !DILexicalBlock(scope: !8417, file: !3, line: 1182, column: 7)
!8441 = !DILocation(line: 1183, column: 7, scope: !8440)
!8442 = !DILocation(line: 1183, column: 10, scope: !8440)
!8443 = !DILocation(line: 1183, column: 31, scope: !8440)
!8444 = !DILocation(line: 1184, column: 7, scope: !8440)
!8445 = !DILocation(line: 1184, column: 10, scope: !8440)
!8446 = !DILocation(line: 1184, column: 22, scope: !8440)
!8447 = !DILocation(line: 1184, column: 19, scope: !8440)
!8448 = !DILocation(line: 1182, column: 7, scope: !8417)
!8449 = !DILocalVariable(name: "ret", scope: !8450, file: !3, line: 1186, type: !2014)
!8450 = distinct !DILexicalBlock(scope: !8440, file: !3, line: 1185, column: 5)
!8451 = !DILocation(line: 1186, column: 14, scope: !8450)
!8452 = !DILocation(line: 1186, column: 41, scope: !8450)
!8453 = !DILocation(line: 1186, column: 20, scope: !8450)
!8454 = !DILocation(line: 1187, column: 30, scope: !8450)
!8455 = !DILocation(line: 1187, column: 35, scope: !8450)
!8456 = !DILocation(line: 1187, column: 7, scope: !8450)
!8457 = !DILocation(line: 1188, column: 30, scope: !8450)
!8458 = !DILocation(line: 1188, column: 37, scope: !8450)
!8459 = !DILocation(line: 1188, column: 7, scope: !8450)
!8460 = !DILocation(line: 1189, column: 7, scope: !8450)
!8461 = !DILocation(line: 1192, column: 7, scope: !8462)
!8462 = distinct !DILexicalBlock(scope: !8417, file: !3, line: 1192, column: 7)
!8463 = !DILocation(line: 1192, column: 7, scope: !8417)
!8464 = !DILocation(line: 1193, column: 17, scope: !8462)
!8465 = !DILocation(line: 1193, column: 5, scope: !8462)
!8466 = !DILocation(line: 1196, column: 21, scope: !8467)
!8467 = distinct !DILexicalBlock(scope: !8462, file: !3, line: 1195, column: 5)
!8468 = !DILocation(line: 1196, column: 19, scope: !8467)
!8469 = !DILocation(line: 1199, column: 11, scope: !8470)
!8470 = distinct !DILexicalBlock(scope: !8467, file: !3, line: 1199, column: 11)
!8471 = !DILocation(line: 1199, column: 35, scope: !8470)
!8472 = !DILocation(line: 1199, column: 11, scope: !8467)
!8473 = !DILocation(line: 1200, column: 16, scope: !8470)
!8474 = !DILocation(line: 1200, column: 14, scope: !8470)
!8475 = !DILocation(line: 1200, column: 2, scope: !8470)
!8476 = !DILocation(line: 1202, column: 7, scope: !8467)
!8477 = !DILocation(line: 1215, column: 8, scope: !8478)
!8478 = distinct !DILexicalBlock(scope: !8417, file: !3, line: 1215, column: 7)
!8479 = !DILocation(line: 1216, column: 7, scope: !8478)
!8480 = !DILocation(line: 1216, column: 29, scope: !8478)
!8481 = !DILocation(line: 1216, column: 42, scope: !8478)
!8482 = !DILocation(line: 1216, column: 10, scope: !8478)
!8483 = !DILocation(line: 1215, column: 7, scope: !8417)
!8484 = !DILocation(line: 1217, column: 14, scope: !8478)
!8485 = !DILocation(line: 1217, column: 12, scope: !8478)
!8486 = !DILocation(line: 1217, column: 5, scope: !8478)
!8487 = !DILocation(line: 1218, column: 12, scope: !8488)
!8488 = distinct !DILexicalBlock(scope: !8478, file: !3, line: 1218, column: 12)
!8489 = !DILocation(line: 1218, column: 27, scope: !8488)
!8490 = !DILocation(line: 1218, column: 12, scope: !8478)
!8491 = !DILocation(line: 1219, column: 14, scope: !8488)
!8492 = !DILocation(line: 1219, column: 29, scope: !8488)
!8493 = !DILocation(line: 1219, column: 12, scope: !8488)
!8494 = !DILocation(line: 1219, column: 5, scope: !8488)
!8495 = !DILocation(line: 1222, column: 32, scope: !8496)
!8496 = distinct !DILexicalBlock(scope: !8488, file: !3, line: 1221, column: 5)
!8497 = !DILocation(line: 1222, column: 16, scope: !8496)
!8498 = !DILocation(line: 1222, column: 14, scope: !8496)
!8499 = !DILocation(line: 1223, column: 11, scope: !8500)
!8500 = distinct !DILexicalBlock(scope: !8496, file: !3, line: 1223, column: 11)
!8501 = !DILocation(line: 1223, column: 42, scope: !8500)
!8502 = !DILocation(line: 1224, column: 11, scope: !8500)
!8503 = !DILocation(line: 1224, column: 14, scope: !8500)
!8504 = !DILocation(line: 1224, column: 45, scope: !8500)
!8505 = !DILocation(line: 1223, column: 11, scope: !8496)
!8506 = !DILocation(line: 1225, column: 9, scope: !8500)
!8507 = !DILocation(line: 1225, column: 36, scope: !8500)
!8508 = !DILocation(line: 1231, column: 7, scope: !8496)
!8509 = !DILocation(line: 1231, column: 32, scope: !8496)
!8510 = !DILocation(line: 1233, column: 36, scope: !8496)
!8511 = !DILocation(line: 1233, column: 7, scope: !8496)
!8512 = !DILocation(line: 1233, column: 22, scope: !8496)
!8513 = !DILocation(line: 1233, column: 34, scope: !8496)
!8514 = !DILocation(line: 1238, column: 7, scope: !8515)
!8515 = distinct !DILexicalBlock(scope: !8417, file: !3, line: 1238, column: 7)
!8516 = !DILocation(line: 1238, column: 17, scope: !8515)
!8517 = !DILocation(line: 1238, column: 14, scope: !8515)
!8518 = !DILocation(line: 1238, column: 7, scope: !8417)
!8519 = !DILocation(line: 1239, column: 34, scope: !8515)
!8520 = !DILocation(line: 1239, column: 5, scope: !8515)
!8521 = !DILocation(line: 1239, column: 32, scope: !8515)
!8522 = !DILocation(line: 1241, column: 21, scope: !8417)
!8523 = !DILocation(line: 1241, column: 45, scope: !8417)
!8524 = !DILocation(line: 1241, column: 3, scope: !8417)
!8525 = !DILocation(line: 1243, column: 30, scope: !8417)
!8526 = !DILocation(line: 1243, column: 9, scope: !8417)
!8527 = !DILocation(line: 1243, column: 7, scope: !8417)
!8528 = !DILocation(line: 1244, column: 26, scope: !8417)
!8529 = !DILocation(line: 1244, column: 31, scope: !8417)
!8530 = !DILocation(line: 1244, column: 3, scope: !8417)
!8531 = !DILocation(line: 1245, column: 26, scope: !8417)
!8532 = !DILocation(line: 1245, column: 33, scope: !8417)
!8533 = !DILocation(line: 1245, column: 3, scope: !8417)
!8534 = !DILocation(line: 1247, column: 3, scope: !8417)
!8535 = !DILocation(line: 1248, column: 1, scope: !8417)
!8536 = distinct !DISubprogram(name: "VEC_constructor_elt_base_iterate", scope: !135, file: !135, line: 1537, type: !8537, scopeLine: 1537, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!8537 = !DISubroutineType(types: !8538)
!8538 = !{!1330, !8539, !7, !8540}
!8539 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2897, size: 64)
!8540 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5348, size: 64)
!8541 = !DILocalVariable(name: "vec_", arg: 1, scope: !8536, file: !135, line: 1537, type: !8539)
!8542 = !DILocation(line: 1537, column: 1, scope: !8536)
!8543 = !DILocalVariable(name: "ix_", arg: 2, scope: !8536, file: !135, line: 1537, type: !7)
!8544 = !DILocalVariable(name: "ptr", arg: 3, scope: !8536, file: !135, line: 1537, type: !8540)
!8545 = !DILocation(line: 1537, column: 1, scope: !8546)
!8546 = distinct !DILexicalBlock(scope: !8536, file: !135, line: 1537, column: 1)
!8547 = !DILocation(line: 1537, column: 1, scope: !8548)
!8548 = distinct !DILexicalBlock(scope: !8546, file: !135, line: 1537, column: 1)
!8549 = !DILocation(line: 1537, column: 1, scope: !8550)
!8550 = distinct !DILexicalBlock(scope: !8546, file: !135, line: 1537, column: 1)
!8551 = distinct !DISubprogram(name: "gimplify_save_expr", scope: !3, file: !3, line: 4671, type: !7612, scopeLine: 4672, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!8552 = !DILocalVariable(name: "expr_p", arg: 1, scope: !8551, file: !3, line: 4671, type: !2049)
!8553 = !DILocation(line: 4671, column: 27, scope: !8551)
!8554 = !DILocalVariable(name: "pre_p", arg: 2, scope: !8551, file: !3, line: 4671, type: !3489)
!8555 = !DILocation(line: 4671, column: 47, scope: !8551)
!8556 = !DILocalVariable(name: "post_p", arg: 3, scope: !8551, file: !3, line: 4671, type: !3489)
!8557 = !DILocation(line: 4671, column: 66, scope: !8551)
!8558 = !DILocalVariable(name: "ret", scope: !8551, file: !3, line: 4673, type: !1329)
!8559 = !DILocation(line: 4673, column: 24, scope: !8551)
!8560 = !DILocalVariable(name: "val", scope: !8551, file: !3, line: 4674, type: !1686)
!8561 = !DILocation(line: 4674, column: 8, scope: !8551)
!8562 = !DILocation(line: 4676, column: 3, scope: !8551)
!8563 = !DILocation(line: 4677, column: 9, scope: !8551)
!8564 = !DILocation(line: 4677, column: 7, scope: !8551)
!8565 = !DILocation(line: 4680, column: 8, scope: !8566)
!8566 = distinct !DILexicalBlock(scope: !8551, file: !3, line: 4680, column: 7)
!8567 = !DILocation(line: 4680, column: 7, scope: !8551)
!8568 = !DILocation(line: 4685, column: 11, scope: !8569)
!8569 = distinct !DILexicalBlock(scope: !8570, file: !3, line: 4685, column: 11)
!8570 = distinct !DILexicalBlock(scope: !8566, file: !3, line: 4681, column: 5)
!8571 = !DILocation(line: 4685, column: 30, scope: !8569)
!8572 = !DILocation(line: 4685, column: 27, scope: !8569)
!8573 = !DILocation(line: 4685, column: 11, scope: !8570)
!8574 = !DILocation(line: 4687, column: 26, scope: !8575)
!8575 = distinct !DILexicalBlock(scope: !8569, file: !3, line: 4686, column: 2)
!8576 = !DILocation(line: 4687, column: 53, scope: !8575)
!8577 = !DILocation(line: 4687, column: 60, scope: !8575)
!8578 = !DILocation(line: 4687, column: 10, scope: !8575)
!8579 = !DILocation(line: 4687, column: 8, scope: !8575)
!8580 = !DILocation(line: 4689, column: 8, scope: !8575)
!8581 = !DILocation(line: 4690, column: 2, scope: !8575)
!8582 = !DILocation(line: 4692, column: 33, scope: !8569)
!8583 = !DILocation(line: 4692, column: 38, scope: !8569)
!8584 = !DILocation(line: 4692, column: 45, scope: !8569)
!8585 = !DILocation(line: 4692, column: 8, scope: !8569)
!8586 = !DILocation(line: 4692, column: 6, scope: !8569)
!8587 = !DILocation(line: 4694, column: 35, scope: !8570)
!8588 = !DILocation(line: 4694, column: 7, scope: !8570)
!8589 = !DILocation(line: 4694, column: 33, scope: !8570)
!8590 = !DILocation(line: 4695, column: 7, scope: !8570)
!8591 = !DILocation(line: 4695, column: 38, scope: !8570)
!8592 = !DILocation(line: 4696, column: 5, scope: !8570)
!8593 = !DILocation(line: 4698, column: 13, scope: !8551)
!8594 = !DILocation(line: 4698, column: 4, scope: !8551)
!8595 = !DILocation(line: 4698, column: 11, scope: !8551)
!8596 = !DILocation(line: 4700, column: 10, scope: !8551)
!8597 = !DILocation(line: 4700, column: 3, scope: !8551)
!8598 = distinct !DISubprogram(name: "gimplify_asm_expr", scope: !3, file: !3, line: 4818, type: !7612, scopeLine: 4819, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!8599 = !DILocalVariable(name: "expr_p", arg: 1, scope: !8598, file: !3, line: 4818, type: !2049)
!8600 = !DILocation(line: 4818, column: 26, scope: !8598)
!8601 = !DILocalVariable(name: "pre_p", arg: 2, scope: !8598, file: !3, line: 4818, type: !3489)
!8602 = !DILocation(line: 4818, column: 46, scope: !8598)
!8603 = !DILocalVariable(name: "post_p", arg: 3, scope: !8598, file: !3, line: 4818, type: !3489)
!8604 = !DILocation(line: 4818, column: 65, scope: !8598)
!8605 = !DILocalVariable(name: "expr", scope: !8598, file: !3, line: 4820, type: !1686)
!8606 = !DILocation(line: 4820, column: 8, scope: !8598)
!8607 = !DILocalVariable(name: "noutputs", scope: !8598, file: !3, line: 4821, type: !1330)
!8608 = !DILocation(line: 4821, column: 7, scope: !8598)
!8609 = !DILocalVariable(name: "oconstraints", scope: !8598, file: !3, line: 4822, type: !3119)
!8610 = !DILocation(line: 4822, column: 16, scope: !8598)
!8611 = !DILocalVariable(name: "i", scope: !8598, file: !3, line: 4823, type: !1330)
!8612 = !DILocation(line: 4823, column: 7, scope: !8598)
!8613 = !DILocalVariable(name: "link", scope: !8598, file: !3, line: 4824, type: !1686)
!8614 = !DILocation(line: 4824, column: 8, scope: !8598)
!8615 = !DILocalVariable(name: "constraint", scope: !8598, file: !3, line: 4825, type: !1888)
!8616 = !DILocation(line: 4825, column: 15, scope: !8598)
!8617 = !DILocalVariable(name: "allows_mem", scope: !8598, file: !3, line: 4826, type: !1804)
!8618 = !DILocation(line: 4826, column: 8, scope: !8598)
!8619 = !DILocalVariable(name: "allows_reg", scope: !8598, file: !3, line: 4826, type: !1804)
!8620 = !DILocation(line: 4826, column: 20, scope: !8598)
!8621 = !DILocalVariable(name: "is_inout", scope: !8598, file: !3, line: 4826, type: !1804)
!8622 = !DILocation(line: 4826, column: 32, scope: !8598)
!8623 = !DILocalVariable(name: "ret", scope: !8598, file: !3, line: 4827, type: !1329)
!8624 = !DILocation(line: 4827, column: 24, scope: !8598)
!8625 = !DILocalVariable(name: "tret", scope: !8598, file: !3, line: 4827, type: !1329)
!8626 = !DILocation(line: 4827, column: 29, scope: !8598)
!8627 = !DILocalVariable(name: "stmt", scope: !8598, file: !3, line: 4828, type: !2014)
!8628 = !DILocation(line: 4828, column: 10, scope: !8598)
!8629 = !DILocalVariable(name: "inputs", scope: !8598, file: !3, line: 4829, type: !2568)
!8630 = !DILocation(line: 4829, column: 18, scope: !8598)
!8631 = !DILocalVariable(name: "outputs", scope: !8598, file: !3, line: 4830, type: !2568)
!8632 = !DILocation(line: 4830, column: 18, scope: !8598)
!8633 = !DILocalVariable(name: "clobbers", scope: !8598, file: !3, line: 4831, type: !2568)
!8634 = !DILocation(line: 4831, column: 18, scope: !8598)
!8635 = !DILocalVariable(name: "labels", scope: !8598, file: !3, line: 4832, type: !2568)
!8636 = !DILocation(line: 4832, column: 18, scope: !8598)
!8637 = !DILocalVariable(name: "link_next", scope: !8598, file: !3, line: 4833, type: !1686)
!8638 = !DILocation(line: 4833, column: 8, scope: !8598)
!8639 = !DILocation(line: 4835, column: 11, scope: !8598)
!8640 = !DILocation(line: 4835, column: 10, scope: !8598)
!8641 = !DILocation(line: 4835, column: 8, scope: !8598)
!8642 = !DILocation(line: 4836, column: 27, scope: !8598)
!8643 = !DILocation(line: 4836, column: 14, scope: !8598)
!8644 = !DILocation(line: 4836, column: 12, scope: !8598)
!8645 = !DILocation(line: 4837, column: 34, scope: !8598)
!8646 = !DILocation(line: 4837, column: 18, scope: !8598)
!8647 = !DILocation(line: 4837, column: 16, scope: !8598)
!8648 = !DILocation(line: 4839, column: 40, scope: !8598)
!8649 = !DILocation(line: 4839, column: 31, scope: !8598)
!8650 = !DILocation(line: 4839, column: 20, scope: !8598)
!8651 = !DILocation(line: 4839, column: 10, scope: !8598)
!8652 = !DILocation(line: 4841, column: 7, scope: !8598)
!8653 = !DILocation(line: 4842, column: 13, scope: !8598)
!8654 = !DILocation(line: 4843, column: 10, scope: !8655)
!8655 = distinct !DILexicalBlock(scope: !8598, file: !3, line: 4843, column: 3)
!8656 = !DILocation(line: 4843, column: 22, scope: !8655)
!8657 = !DILocation(line: 4843, column: 20, scope: !8655)
!8658 = !DILocation(line: 4843, column: 8, scope: !8655)
!8659 = !DILocation(line: 4843, column: 42, scope: !8660)
!8660 = distinct !DILexicalBlock(scope: !8655, file: !3, line: 4843, column: 3)
!8661 = !DILocation(line: 4843, column: 3, scope: !8655)
!8662 = !DILocalVariable(name: "ok", scope: !8663, file: !3, line: 4845, type: !1804)
!8663 = distinct !DILexicalBlock(scope: !8660, file: !3, line: 4844, column: 5)
!8664 = !DILocation(line: 4845, column: 12, scope: !8663)
!8665 = !DILocalVariable(name: "constraint_len", scope: !8663, file: !3, line: 4846, type: !2160)
!8666 = !DILocation(line: 4846, column: 14, scope: !8663)
!8667 = !DILocation(line: 4848, column: 19, scope: !8663)
!8668 = !DILocation(line: 4848, column: 17, scope: !8663)
!8669 = !DILocation(line: 4852, column: 4, scope: !8663)
!8670 = !DILocation(line: 4852, column: 2, scope: !8663)
!8671 = !DILocation(line: 4850, column: 7, scope: !8663)
!8672 = !DILocation(line: 4850, column: 20, scope: !8663)
!8673 = !DILocation(line: 4851, column: 2, scope: !8663)
!8674 = !DILocation(line: 4853, column: 32, scope: !8663)
!8675 = !DILocation(line: 4853, column: 24, scope: !8663)
!8676 = !DILocation(line: 4853, column: 22, scope: !8663)
!8677 = !DILocation(line: 4854, column: 11, scope: !8678)
!8678 = distinct !DILexicalBlock(scope: !8663, file: !3, line: 4854, column: 11)
!8679 = !DILocation(line: 4854, column: 26, scope: !8678)
!8680 = !DILocation(line: 4854, column: 11, scope: !8663)
!8681 = !DILocation(line: 4855, column: 9, scope: !8678)
!8682 = !DILocation(line: 4857, column: 50, scope: !8663)
!8683 = !DILocation(line: 4857, column: 12, scope: !8663)
!8684 = !DILocation(line: 4857, column: 10, scope: !8663)
!8685 = !DILocation(line: 4859, column: 12, scope: !8686)
!8686 = distinct !DILexicalBlock(scope: !8663, file: !3, line: 4859, column: 11)
!8687 = !DILocation(line: 4859, column: 11, scope: !8663)
!8688 = !DILocation(line: 4861, column: 8, scope: !8689)
!8689 = distinct !DILexicalBlock(scope: !8686, file: !3, line: 4860, column: 2)
!8690 = !DILocation(line: 4862, column: 13, scope: !8689)
!8691 = !DILocation(line: 4863, column: 2, scope: !8689)
!8692 = !DILocation(line: 4865, column: 12, scope: !8693)
!8693 = distinct !DILexicalBlock(scope: !8663, file: !3, line: 4865, column: 11)
!8694 = !DILocation(line: 4865, column: 23, scope: !8693)
!8695 = !DILocation(line: 4865, column: 26, scope: !8693)
!8696 = !DILocation(line: 4865, column: 11, scope: !8663)
!8697 = !DILocation(line: 4866, column: 20, scope: !8693)
!8698 = !DILocation(line: 4866, column: 2, scope: !8693)
!8699 = !DILocation(line: 4868, column: 30, scope: !8663)
!8700 = !DILocation(line: 4868, column: 49, scope: !8663)
!8701 = !DILocation(line: 4868, column: 56, scope: !8663)
!8702 = !DILocation(line: 4869, column: 8, scope: !8663)
!8703 = !DILocation(line: 4868, column: 14, scope: !8663)
!8704 = !DILocation(line: 4868, column: 12, scope: !8663)
!8705 = !DILocation(line: 4871, column: 11, scope: !8706)
!8706 = distinct !DILexicalBlock(scope: !8663, file: !3, line: 4871, column: 11)
!8707 = !DILocation(line: 4871, column: 16, scope: !8706)
!8708 = !DILocation(line: 4871, column: 11, scope: !8663)
!8709 = !DILocation(line: 4873, column: 46, scope: !8710)
!8710 = distinct !DILexicalBlock(scope: !8706, file: !3, line: 4872, column: 2)
!8711 = !DILocation(line: 4873, column: 4, scope: !8710)
!8712 = !DILocation(line: 4874, column: 10, scope: !8710)
!8713 = !DILocation(line: 4874, column: 8, scope: !8710)
!8714 = !DILocation(line: 4875, column: 2, scope: !8710)
!8715 = !DILocation(line: 4877, column: 7, scope: !8663)
!8716 = !DILocation(line: 4878, column: 7, scope: !8663)
!8717 = !DILocation(line: 4878, column: 25, scope: !8663)
!8718 = !DILocation(line: 4880, column: 11, scope: !8719)
!8719 = distinct !DILexicalBlock(scope: !8663, file: !3, line: 4880, column: 11)
!8720 = !DILocation(line: 4880, column: 11, scope: !8663)
!8721 = !DILocalVariable(name: "input", scope: !8722, file: !3, line: 4885, type: !1686)
!8722 = distinct !DILexicalBlock(scope: !8719, file: !3, line: 4881, column: 2)
!8723 = !DILocation(line: 4885, column: 9, scope: !8722)
!8724 = !DILocalVariable(name: "buf", scope: !8722, file: !3, line: 4886, type: !8725)
!8725 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1784, size: 80, elements: !8726)
!8726 = !{!8727}
!8727 = !DISubrange(count: 10)
!8728 = !DILocation(line: 4886, column: 9, scope: !8722)
!8729 = !DILocalVariable(name: "p", scope: !8722, file: !3, line: 4889, type: !1953)
!8730 = !DILocation(line: 4889, column: 10, scope: !8722)
!8731 = !DILocation(line: 4889, column: 23, scope: !8722)
!8732 = !DILocation(line: 4889, column: 14, scope: !8722)
!8733 = !DILocation(line: 4890, column: 4, scope: !8722)
!8734 = !DILocation(line: 4890, column: 9, scope: !8722)
!8735 = !DILocation(line: 4891, column: 53, scope: !8722)
!8736 = !DILocation(line: 4891, column: 69, scope: !8722)
!8737 = !DILocation(line: 4891, column: 39, scope: !8722)
!8738 = !DILocation(line: 4891, column: 4, scope: !8722)
!8739 = !DILocation(line: 4891, column: 37, scope: !8722)
!8740 = !DILocation(line: 4894, column: 8, scope: !8741)
!8741 = distinct !DILexicalBlock(scope: !8722, file: !3, line: 4894, column: 8)
!8742 = !DILocation(line: 4894, column: 8, scope: !8722)
!8743 = !DILocation(line: 4896, column: 17, scope: !8744)
!8744 = distinct !DILexicalBlock(scope: !8741, file: !3, line: 4895, column: 6)
!8745 = !DILocation(line: 4896, column: 28, scope: !8744)
!8746 = !DILocation(line: 4896, column: 8, scope: !8744)
!8747 = !DILocation(line: 4902, column: 20, scope: !8748)
!8748 = distinct !DILexicalBlock(scope: !8744, file: !3, line: 4902, column: 12)
!8749 = !DILocation(line: 4902, column: 12, scope: !8748)
!8750 = !DILocation(line: 4902, column: 28, scope: !8748)
!8751 = !DILocation(line: 4902, column: 12, scope: !8744)
!8752 = !DILocalVariable(name: "len", scope: !8753, file: !3, line: 4904, type: !2160)
!8753 = distinct !DILexicalBlock(scope: !8748, file: !3, line: 4903, column: 3)
!8754 = !DILocation(line: 4904, column: 12, scope: !8753)
!8755 = !DILocalVariable(name: "buflen", scope: !8753, file: !3, line: 4904, type: !2160)
!8756 = !DILocation(line: 4904, column: 21, scope: !8753)
!8757 = !DILocation(line: 4904, column: 38, scope: !8753)
!8758 = !DILocation(line: 4904, column: 30, scope: !8753)
!8759 = !DILocalVariable(name: "beg", scope: !8753, file: !3, line: 4905, type: !1953)
!8760 = !DILocation(line: 4905, column: 11, scope: !8753)
!8761 = !DILocalVariable(name: "end", scope: !8753, file: !3, line: 4905, type: !1953)
!8762 = !DILocation(line: 4905, column: 17, scope: !8753)
!8763 = !DILocalVariable(name: "str", scope: !8753, file: !3, line: 4905, type: !1953)
!8764 = !DILocation(line: 4905, column: 23, scope: !8753)
!8765 = !DILocalVariable(name: "dst", scope: !8753, file: !3, line: 4905, type: !1953)
!8766 = !DILocation(line: 4905, column: 29, scope: !8753)
!8767 = !DILocation(line: 4907, column: 16, scope: !8768)
!8768 = distinct !DILexicalBlock(scope: !8753, file: !3, line: 4907, column: 5)
!8769 = !DILocation(line: 4907, column: 18, scope: !8768)
!8770 = !DILocation(line: 4907, column: 14, scope: !8768)
!8771 = !DILocation(line: 4907, column: 10, scope: !8768)
!8772 = !DILocation(line: 4909, column: 23, scope: !8773)
!8773 = distinct !DILexicalBlock(scope: !8774, file: !3, line: 4908, column: 7)
!8774 = distinct !DILexicalBlock(scope: !8768, file: !3, line: 4907, column: 5)
!8775 = !DILocation(line: 4909, column: 15, scope: !8773)
!8776 = !DILocation(line: 4909, column: 13, scope: !8773)
!8777 = !DILocation(line: 4910, column: 13, scope: !8778)
!8778 = distinct !DILexicalBlock(scope: !8773, file: !3, line: 4910, column: 13)
!8779 = !DILocation(line: 4910, column: 17, scope: !8778)
!8780 = !DILocation(line: 4910, column: 13, scope: !8773)
!8781 = !DILocation(line: 4911, column: 18, scope: !8778)
!8782 = !DILocation(line: 4911, column: 10, scope: !8778)
!8783 = !DILocation(line: 4911, column: 8, scope: !8778)
!8784 = !DILocation(line: 4911, column: 4, scope: !8778)
!8785 = !DILocation(line: 4912, column: 23, scope: !8786)
!8786 = distinct !DILexicalBlock(scope: !8773, file: !3, line: 4912, column: 13)
!8787 = !DILocation(line: 4912, column: 29, scope: !8786)
!8788 = !DILocation(line: 4912, column: 27, scope: !8786)
!8789 = !DILocation(line: 4912, column: 36, scope: !8786)
!8790 = !DILocation(line: 4912, column: 34, scope: !8786)
!8791 = !DILocation(line: 4912, column: 13, scope: !8773)
!8792 = !DILocation(line: 4913, column: 11, scope: !8786)
!8793 = !DILocation(line: 4913, column: 18, scope: !8786)
!8794 = !DILocation(line: 4913, column: 8, scope: !8786)
!8795 = !DILocation(line: 4913, column: 4, scope: !8786)
!8796 = !DILocation(line: 4915, column: 11, scope: !8786)
!8797 = !DILocation(line: 4915, column: 17, scope: !8786)
!8798 = !DILocation(line: 4915, column: 15, scope: !8786)
!8799 = !DILocation(line: 4915, column: 21, scope: !8786)
!8800 = !DILocation(line: 4915, column: 8, scope: !8786)
!8801 = !DILocation(line: 4916, column: 14, scope: !8802)
!8802 = distinct !DILexicalBlock(scope: !8773, file: !3, line: 4916, column: 13)
!8803 = !DILocation(line: 4916, column: 13, scope: !8802)
!8804 = !DILocation(line: 4916, column: 13, scope: !8773)
!8805 = !DILocation(line: 4917, column: 10, scope: !8802)
!8806 = !DILocation(line: 4917, column: 14, scope: !8802)
!8807 = !DILocation(line: 4917, column: 8, scope: !8802)
!8808 = !DILocation(line: 4917, column: 4, scope: !8802)
!8809 = !DILocation(line: 4919, column: 4, scope: !8802)
!8810 = !DILocation(line: 4907, column: 5, scope: !8774)
!8811 = distinct !{!8811, !8812, !8813}
!8812 = !DILocation(line: 4907, column: 5, scope: !8768)
!8813 = !DILocation(line: 4920, column: 7, scope: !8768)
!8814 = !DILocation(line: 4922, column: 20, scope: !8753)
!8815 = !DILocation(line: 4922, column: 9, scope: !8753)
!8816 = !DILocation(line: 4923, column: 16, scope: !8817)
!8817 = distinct !DILexicalBlock(scope: !8753, file: !3, line: 4923, column: 5)
!8818 = !DILocation(line: 4923, column: 18, scope: !8817)
!8819 = !DILocation(line: 4923, column: 14, scope: !8817)
!8820 = !DILocation(line: 4923, column: 29, scope: !8817)
!8821 = !DILocation(line: 4923, column: 27, scope: !8817)
!8822 = !DILocation(line: 4923, column: 10, scope: !8817)
!8823 = !DILocalVariable(name: "tem", scope: !8824, file: !3, line: 4925, type: !1888)
!8824 = distinct !DILexicalBlock(scope: !8825, file: !3, line: 4924, column: 7)
!8825 = distinct !DILexicalBlock(scope: !8817, file: !3, line: 4923, column: 5)
!8826 = !DILocation(line: 4925, column: 21, scope: !8824)
!8827 = !DILocalVariable(name: "mem_p", scope: !8824, file: !3, line: 4926, type: !1804)
!8828 = !DILocation(line: 4926, column: 14, scope: !8824)
!8829 = !DILocalVariable(name: "reg_p", scope: !8824, file: !3, line: 4926, type: !1804)
!8830 = !DILocation(line: 4926, column: 21, scope: !8824)
!8831 = !DILocalVariable(name: "inout_p", scope: !8824, file: !3, line: 4926, type: !1804)
!8832 = !DILocation(line: 4926, column: 28, scope: !8824)
!8833 = !DILocation(line: 4928, column: 23, scope: !8824)
!8834 = !DILocation(line: 4928, column: 15, scope: !8824)
!8835 = !DILocation(line: 4928, column: 13, scope: !8824)
!8836 = !DILocation(line: 4929, column: 13, scope: !8837)
!8837 = distinct !DILexicalBlock(scope: !8824, file: !3, line: 4929, column: 13)
!8838 = !DILocation(line: 4929, column: 13, scope: !8824)
!8839 = !DILocation(line: 4930, column: 5, scope: !8837)
!8840 = !DILocation(line: 4930, column: 9, scope: !8837)
!8841 = !DILocation(line: 4930, column: 4, scope: !8837)
!8842 = !DILocation(line: 4931, column: 9, scope: !8824)
!8843 = !DILocation(line: 4931, column: 17, scope: !8824)
!8844 = !DILocation(line: 4932, column: 15, scope: !8824)
!8845 = !DILocation(line: 4932, column: 19, scope: !8824)
!8846 = !DILocation(line: 4932, column: 13, scope: !8824)
!8847 = !DILocation(line: 4933, column: 40, scope: !8824)
!8848 = !DILocation(line: 4933, column: 9, scope: !8824)
!8849 = !DILocation(line: 4935, column: 13, scope: !8850)
!8850 = distinct !DILexicalBlock(scope: !8824, file: !3, line: 4935, column: 13)
!8851 = !DILocation(line: 4935, column: 20, scope: !8850)
!8852 = !DILocation(line: 4935, column: 17, scope: !8850)
!8853 = !DILocation(line: 4935, column: 13, scope: !8824)
!8854 = !DILocation(line: 4936, column: 8, scope: !8850)
!8855 = !DILocation(line: 4936, column: 11, scope: !8850)
!8856 = !DILocation(line: 4936, column: 4, scope: !8850)
!8857 = !DILocation(line: 4937, column: 13, scope: !8858)
!8858 = distinct !DILexicalBlock(scope: !8824, file: !3, line: 4937, column: 13)
!8859 = !DILocation(line: 4937, column: 13, scope: !8824)
!8860 = !DILocation(line: 4939, column: 14, scope: !8861)
!8861 = distinct !DILexicalBlock(scope: !8858, file: !3, line: 4938, column: 4)
!8862 = !DILocation(line: 4939, column: 6, scope: !8861)
!8863 = !DILocation(line: 4939, column: 24, scope: !8861)
!8864 = !DILocation(line: 4940, column: 13, scope: !8861)
!8865 = !DILocation(line: 4940, column: 10, scope: !8861)
!8866 = !DILocation(line: 4941, column: 4, scope: !8861)
!8867 = !DILocation(line: 4944, column: 10, scope: !8868)
!8868 = distinct !DILexicalBlock(scope: !8869, file: !3, line: 4944, column: 10)
!8869 = distinct !DILexicalBlock(scope: !8858, file: !3, line: 4943, column: 4)
!8870 = !DILocation(line: 4944, column: 10, scope: !8869)
!8871 = !DILocation(line: 4945, column: 14, scope: !8868)
!8872 = !DILocation(line: 4945, column: 20, scope: !8868)
!8873 = !DILocation(line: 4945, column: 18, scope: !8868)
!8874 = !DILocation(line: 4945, column: 12, scope: !8868)
!8875 = !DILocation(line: 4945, column: 8, scope: !8868)
!8876 = !DILocation(line: 4947, column: 22, scope: !8868)
!8877 = !DILocation(line: 4947, column: 14, scope: !8868)
!8878 = !DILocation(line: 4947, column: 12, scope: !8868)
!8879 = !DILocation(line: 4948, column: 14, scope: !8869)
!8880 = !DILocation(line: 4948, column: 19, scope: !8869)
!8881 = !DILocation(line: 4948, column: 24, scope: !8869)
!8882 = !DILocation(line: 4948, column: 6, scope: !8869)
!8883 = !DILocation(line: 4949, column: 13, scope: !8869)
!8884 = !DILocation(line: 4949, column: 10, scope: !8869)
!8885 = !DILocation(line: 4951, column: 13, scope: !8886)
!8886 = distinct !DILexicalBlock(scope: !8824, file: !3, line: 4951, column: 13)
!8887 = !DILocation(line: 4951, column: 13, scope: !8824)
!8888 = !DILocation(line: 4952, column: 10, scope: !8886)
!8889 = !DILocation(line: 4952, column: 14, scope: !8886)
!8890 = !DILocation(line: 4952, column: 8, scope: !8886)
!8891 = !DILocation(line: 4952, column: 4, scope: !8886)
!8892 = !DILocation(line: 4954, column: 4, scope: !8886)
!8893 = !DILocation(line: 4923, column: 5, scope: !8825)
!8894 = distinct !{!8894, !8895, !8896}
!8895 = !DILocation(line: 4923, column: 5, scope: !8817)
!8896 = !DILocation(line: 4955, column: 7, scope: !8817)
!8897 = !DILocation(line: 4956, column: 6, scope: !8753)
!8898 = !DILocation(line: 4956, column: 10, scope: !8753)
!8899 = !DILocation(line: 4957, column: 27, scope: !8753)
!8900 = !DILocation(line: 4957, column: 33, scope: !8753)
!8901 = !DILocation(line: 4957, column: 31, scope: !8753)
!8902 = !DILocation(line: 4957, column: 38, scope: !8753)
!8903 = !DILocation(line: 4957, column: 13, scope: !8753)
!8904 = !DILocation(line: 4957, column: 11, scope: !8753)
!8905 = !DILocation(line: 4958, column: 3, scope: !8753)
!8906 = !DILocation(line: 4960, column: 33, scope: !8748)
!8907 = !DILocation(line: 4960, column: 25, scope: !8748)
!8908 = !DILocation(line: 4960, column: 39, scope: !8748)
!8909 = !DILocation(line: 4960, column: 11, scope: !8748)
!8910 = !DILocation(line: 4960, column: 9, scope: !8748)
!8911 = !DILocation(line: 4961, column: 6, scope: !8744)
!8912 = !DILocation(line: 4963, column: 28, scope: !8741)
!8913 = !DILocation(line: 4963, column: 43, scope: !8741)
!8914 = !DILocation(line: 4963, column: 48, scope: !8741)
!8915 = !DILocation(line: 4963, column: 59, scope: !8741)
!8916 = !DILocation(line: 4963, column: 14, scope: !8741)
!8917 = !DILocation(line: 4963, column: 12, scope: !8741)
!8918 = !DILocation(line: 4965, column: 10, scope: !8722)
!8919 = !DILocation(line: 4965, column: 4, scope: !8722)
!8920 = !DILocation(line: 4967, column: 12, scope: !8722)
!8921 = !DILocation(line: 4967, column: 10, scope: !8722)
!8922 = !DILocation(line: 4969, column: 33, scope: !8722)
!8923 = !DILocation(line: 4969, column: 52, scope: !8722)
!8924 = !DILocation(line: 4969, column: 24, scope: !8722)
!8925 = !DILocation(line: 4969, column: 4, scope: !8722)
!8926 = !DILocation(line: 4969, column: 22, scope: !8722)
!8927 = !DILocation(line: 4970, column: 2, scope: !8722)
!8928 = !DILocation(line: 4971, column: 5, scope: !8663)
!8929 = !DILocation(line: 4843, column: 48, scope: !8660)
!8930 = !DILocation(line: 4843, column: 60, scope: !8660)
!8931 = !DILocation(line: 4843, column: 58, scope: !8660)
!8932 = !DILocation(line: 4843, column: 3, scope: !8660)
!8933 = distinct !{!8933, !8661, !8934}
!8934 = !DILocation(line: 4971, column: 5, scope: !8655)
!8935 = !DILocation(line: 4973, column: 13, scope: !8598)
!8936 = !DILocation(line: 4974, column: 15, scope: !8937)
!8937 = distinct !DILexicalBlock(scope: !8598, file: !3, line: 4974, column: 3)
!8938 = !DILocation(line: 4974, column: 13, scope: !8937)
!8939 = !DILocation(line: 4974, column: 8, scope: !8937)
!8940 = !DILocation(line: 4974, column: 34, scope: !8941)
!8941 = distinct !DILexicalBlock(scope: !8937, file: !3, line: 4974, column: 3)
!8942 = !DILocation(line: 4974, column: 3, scope: !8937)
!8943 = !DILocation(line: 4976, column: 19, scope: !8944)
!8944 = distinct !DILexicalBlock(scope: !8941, file: !3, line: 4975, column: 5)
!8945 = !DILocation(line: 4976, column: 17, scope: !8944)
!8946 = !DILocation(line: 4977, column: 20, scope: !8944)
!8947 = !DILocation(line: 4977, column: 18, scope: !8944)
!8948 = !DILocation(line: 4978, column: 50, scope: !8944)
!8949 = !DILocation(line: 4979, column: 10, scope: !8944)
!8950 = !DILocation(line: 4978, column: 7, scope: !8944)
!8951 = !DILocation(line: 4982, column: 11, scope: !8952)
!8952 = distinct !DILexicalBlock(scope: !8944, file: !3, line: 4982, column: 11)
!8953 = !DILocation(line: 4982, column: 11, scope: !8944)
!8954 = !DILocation(line: 4984, column: 8, scope: !8955)
!8955 = distinct !DILexicalBlock(scope: !8956, file: !3, line: 4984, column: 8)
!8956 = distinct !DILexicalBlock(scope: !8952, file: !3, line: 4983, column: 2)
!8957 = !DILocation(line: 4984, column: 8, scope: !8956)
!8958 = !DILocation(line: 4985, column: 17, scope: !8955)
!8959 = !DILocation(line: 4985, column: 6, scope: !8955)
!8960 = !DILocation(line: 4988, column: 8, scope: !8961)
!8961 = distinct !DILexicalBlock(scope: !8955, file: !3, line: 4987, column: 6)
!8962 = !DILocation(line: 4989, column: 58, scope: !8961)
!8963 = !DILocation(line: 4989, column: 8, scope: !8961)
!8964 = !DILocation(line: 4990, column: 8, scope: !8961)
!8965 = !DILocation(line: 4992, column: 2, scope: !8956)
!8966 = !DILocation(line: 4995, column: 12, scope: !8967)
!8967 = distinct !DILexicalBlock(scope: !8944, file: !3, line: 4995, column: 11)
!8968 = !DILocation(line: 4995, column: 23, scope: !8967)
!8969 = !DILocation(line: 4995, column: 26, scope: !8967)
!8970 = !DILocation(line: 4995, column: 11, scope: !8944)
!8971 = !DILocation(line: 4997, column: 27, scope: !8972)
!8972 = distinct !DILexicalBlock(scope: !8967, file: !3, line: 4996, column: 2)
!8973 = !DILocation(line: 4997, column: 46, scope: !8972)
!8974 = !DILocation(line: 4997, column: 53, scope: !8972)
!8975 = !DILocation(line: 4997, column: 11, scope: !8972)
!8976 = !DILocation(line: 4997, column: 9, scope: !8972)
!8977 = !DILocation(line: 4999, column: 22, scope: !8972)
!8978 = !DILocation(line: 4999, column: 4, scope: !8972)
!8979 = !DILocation(line: 5000, column: 8, scope: !8980)
!8980 = distinct !DILexicalBlock(scope: !8972, file: !3, line: 5000, column: 8)
!8981 = !DILocation(line: 5000, column: 13, scope: !8980)
!8982 = !DILocation(line: 5000, column: 8, scope: !8972)
!8983 = !DILocation(line: 5002, column: 12, scope: !8984)
!8984 = distinct !DILexicalBlock(scope: !8985, file: !3, line: 5002, column: 12)
!8985 = distinct !DILexicalBlock(scope: !8980, file: !3, line: 5001, column: 6)
!8986 = !DILocation(line: 5002, column: 12, scope: !8985)
!8987 = !DILocation(line: 5003, column: 27, scope: !8984)
!8988 = !DILocation(line: 5003, column: 25, scope: !8984)
!8989 = !DILocation(line: 5003, column: 10, scope: !8984)
!8990 = !DILocation(line: 5004, column: 62, scope: !8985)
!8991 = !DILocation(line: 5004, column: 8, scope: !8985)
!8992 = !DILocation(line: 5005, column: 14, scope: !8985)
!8993 = !DILocation(line: 5005, column: 12, scope: !8985)
!8994 = !DILocation(line: 5006, column: 6, scope: !8985)
!8995 = !DILocation(line: 5007, column: 2, scope: !8972)
!8996 = !DILocation(line: 5010, column: 27, scope: !8997)
!8997 = distinct !DILexicalBlock(scope: !8967, file: !3, line: 5009, column: 2)
!8998 = !DILocation(line: 5010, column: 46, scope: !8997)
!8999 = !DILocation(line: 5010, column: 53, scope: !8997)
!9000 = !DILocation(line: 5010, column: 11, scope: !8997)
!9001 = !DILocation(line: 5010, column: 9, scope: !8997)
!9002 = !DILocation(line: 5012, column: 8, scope: !9003)
!9003 = distinct !DILexicalBlock(scope: !8997, file: !3, line: 5012, column: 8)
!9004 = !DILocation(line: 5012, column: 13, scope: !9003)
!9005 = !DILocation(line: 5012, column: 8, scope: !8997)
!9006 = !DILocation(line: 5013, column: 12, scope: !9003)
!9007 = !DILocation(line: 5013, column: 10, scope: !9003)
!9008 = !DILocation(line: 5013, column: 6, scope: !9003)
!9009 = !DILocation(line: 5016, column: 7, scope: !8944)
!9010 = !DILocation(line: 5016, column: 25, scope: !8944)
!9011 = !DILocation(line: 5017, column: 7, scope: !8944)
!9012 = !DILocation(line: 5018, column: 5, scope: !8944)
!9013 = !DILocation(line: 4974, column: 40, scope: !8941)
!9014 = !DILocation(line: 4974, column: 52, scope: !8941)
!9015 = !DILocation(line: 4974, column: 50, scope: !8941)
!9016 = !DILocation(line: 4974, column: 3, scope: !8941)
!9017 = distinct !{!9017, !8942, !9018}
!9018 = !DILocation(line: 5018, column: 5, scope: !8937)
!9019 = !DILocation(line: 5020, column: 15, scope: !9020)
!9020 = distinct !DILexicalBlock(scope: !8598, file: !3, line: 5020, column: 3)
!9021 = !DILocation(line: 5020, column: 13, scope: !9020)
!9022 = !DILocation(line: 5020, column: 8, scope: !9020)
!9023 = !DILocation(line: 5020, column: 36, scope: !9024)
!9024 = distinct !DILexicalBlock(scope: !9020, file: !3, line: 5020, column: 3)
!9025 = !DILocation(line: 5020, column: 3, scope: !9020)
!9026 = !DILocation(line: 5021, column: 5, scope: !9024)
!9027 = !DILocation(line: 5020, column: 42, scope: !9024)
!9028 = !DILocation(line: 5020, column: 54, scope: !9024)
!9029 = !DILocation(line: 5020, column: 52, scope: !9024)
!9030 = !DILocation(line: 5020, column: 3, scope: !9024)
!9031 = distinct !{!9031, !9025, !9032}
!9032 = !DILocation(line: 5021, column: 5, scope: !9020)
!9033 = !DILocation(line: 5023, column: 15, scope: !9034)
!9034 = distinct !DILexicalBlock(scope: !8598, file: !3, line: 5023, column: 3)
!9035 = !DILocation(line: 5023, column: 13, scope: !9034)
!9036 = !DILocation(line: 5023, column: 8, scope: !9034)
!9037 = !DILocation(line: 5023, column: 34, scope: !9038)
!9038 = distinct !DILexicalBlock(scope: !9034, file: !3, line: 5023, column: 3)
!9039 = !DILocation(line: 5023, column: 3, scope: !9034)
!9040 = !DILocation(line: 5024, column: 5, scope: !9038)
!9041 = !DILocation(line: 5023, column: 40, scope: !9038)
!9042 = !DILocation(line: 5023, column: 52, scope: !9038)
!9043 = !DILocation(line: 5023, column: 50, scope: !9038)
!9044 = !DILocation(line: 5023, column: 3, scope: !9038)
!9045 = distinct !{!9045, !9039, !9046}
!9046 = !DILocation(line: 5024, column: 5, scope: !9034)
!9047 = !DILocation(line: 5027, column: 7, scope: !9048)
!9048 = distinct !DILexicalBlock(scope: !8598, file: !3, line: 5027, column: 7)
!9049 = !DILocation(line: 5027, column: 11, scope: !9048)
!9050 = !DILocation(line: 5027, column: 7, scope: !8598)
!9051 = !DILocation(line: 5029, column: 36, scope: !9052)
!9052 = distinct !DILexicalBlock(scope: !9048, file: !3, line: 5028, column: 5)
!9053 = !DILocation(line: 5030, column: 8, scope: !9052)
!9054 = !DILocation(line: 5030, column: 16, scope: !9052)
!9055 = !DILocation(line: 5030, column: 25, scope: !9052)
!9056 = !DILocation(line: 5030, column: 35, scope: !9052)
!9057 = !DILocation(line: 5029, column: 14, scope: !9052)
!9058 = !DILocation(line: 5029, column: 12, scope: !9052)
!9059 = !DILocation(line: 5032, column: 32, scope: !9052)
!9060 = !DILocation(line: 5032, column: 38, scope: !9052)
!9061 = !DILocation(line: 5032, column: 7, scope: !9052)
!9062 = !DILocation(line: 5033, column: 29, scope: !9052)
!9063 = !DILocation(line: 5033, column: 35, scope: !9052)
!9064 = !DILocation(line: 5033, column: 7, scope: !9052)
!9065 = !DILocation(line: 5035, column: 30, scope: !9052)
!9066 = !DILocation(line: 5035, column: 37, scope: !9052)
!9067 = !DILocation(line: 5035, column: 7, scope: !9052)
!9068 = !DILocation(line: 5036, column: 5, scope: !9052)
!9069 = !DILocation(line: 5038, column: 10, scope: !8598)
!9070 = !DILocation(line: 5038, column: 3, scope: !8598)
!9071 = !DILocation(line: 5039, column: 1, scope: !8598)
!9072 = distinct !DISubprogram(name: "gimple_try_set_catch_is_cleanup", scope: !385, file: !385, line: 2974, type: !9073, scopeLine: 2975, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!9073 = !DISubroutineType(types: !9074)
!9074 = !{null, !2014, !1804}
!9075 = !DILocalVariable(name: "g", arg: 1, scope: !9072, file: !385, line: 2974, type: !2014)
!9076 = !DILocation(line: 2974, column: 41, scope: !9072)
!9077 = !DILocalVariable(name: "catch_is_cleanup", arg: 2, scope: !9072, file: !385, line: 2974, type: !1804)
!9078 = !DILocation(line: 2974, column: 49, scope: !9072)
!9079 = !DILocation(line: 2976, column: 3, scope: !9072)
!9080 = !DILocation(line: 2977, column: 7, scope: !9081)
!9081 = distinct !DILexicalBlock(scope: !9072, file: !385, line: 2977, column: 7)
!9082 = !DILocation(line: 2977, column: 7, scope: !9072)
!9083 = !DILocation(line: 2978, column: 5, scope: !9081)
!9084 = !DILocation(line: 2978, column: 8, scope: !9081)
!9085 = !DILocation(line: 2978, column: 15, scope: !9081)
!9086 = !DILocation(line: 2978, column: 23, scope: !9081)
!9087 = !DILocation(line: 2980, column: 5, scope: !9081)
!9088 = !DILocation(line: 2980, column: 8, scope: !9081)
!9089 = !DILocation(line: 2980, column: 15, scope: !9081)
!9090 = !DILocation(line: 2980, column: 23, scope: !9081)
!9091 = !DILocation(line: 2981, column: 1, scope: !9072)
!9092 = distinct !DISubprogram(name: "gimplify_cleanup_point_expr", scope: !3, file: !3, line: 5056, type: !7298, scopeLine: 5057, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!9093 = !DILocalVariable(name: "expr_p", arg: 1, scope: !9092, file: !3, line: 5056, type: !2049)
!9094 = !DILocation(line: 5056, column: 36, scope: !9092)
!9095 = !DILocalVariable(name: "pre_p", arg: 2, scope: !9092, file: !3, line: 5056, type: !3489)
!9096 = !DILocation(line: 5056, column: 56, scope: !9092)
!9097 = !DILocalVariable(name: "iter", scope: !9092, file: !3, line: 5058, type: !4033)
!9098 = !DILocation(line: 5058, column: 24, scope: !9092)
!9099 = !DILocalVariable(name: "body_sequence", scope: !9092, file: !3, line: 5059, type: !2004)
!9100 = !DILocation(line: 5059, column: 14, scope: !9092)
!9101 = !DILocalVariable(name: "temp", scope: !9092, file: !3, line: 5061, type: !1686)
!9102 = !DILocation(line: 5061, column: 8, scope: !9092)
!9103 = !DILocation(line: 5061, column: 38, scope: !9092)
!9104 = !DILocation(line: 5061, column: 37, scope: !9092)
!9105 = !DILocation(line: 5061, column: 15, scope: !9092)
!9106 = !DILocalVariable(name: "old_conds", scope: !9092, file: !3, line: 5066, type: !1330)
!9107 = !DILocation(line: 5066, column: 7, scope: !9092)
!9108 = !DILocation(line: 5066, column: 19, scope: !9092)
!9109 = !DILocation(line: 5066, column: 34, scope: !9092)
!9110 = !DILocalVariable(name: "old_cleanups", scope: !9092, file: !3, line: 5067, type: !2004)
!9111 = !DILocation(line: 5067, column: 14, scope: !9092)
!9112 = !DILocation(line: 5067, column: 29, scope: !9092)
!9113 = !DILocation(line: 5067, column: 44, scope: !9092)
!9114 = !DILocation(line: 5068, column: 3, scope: !9092)
!9115 = !DILocation(line: 5068, column: 18, scope: !9092)
!9116 = !DILocation(line: 5068, column: 29, scope: !9092)
!9117 = !DILocation(line: 5069, column: 3, scope: !9092)
!9118 = !DILocation(line: 5069, column: 18, scope: !9092)
!9119 = !DILocation(line: 5069, column: 39, scope: !9092)
!9120 = !DILocation(line: 5071, column: 19, scope: !9092)
!9121 = !DILocation(line: 5071, column: 3, scope: !9092)
!9122 = !DILocation(line: 5073, column: 31, scope: !9092)
!9123 = !DILocation(line: 5073, column: 3, scope: !9092)
!9124 = !DILocation(line: 5073, column: 18, scope: !9092)
!9125 = !DILocation(line: 5073, column: 29, scope: !9092)
!9126 = !DILocation(line: 5074, column: 41, scope: !9092)
!9127 = !DILocation(line: 5074, column: 3, scope: !9092)
!9128 = !DILocation(line: 5074, column: 18, scope: !9092)
!9129 = !DILocation(line: 5074, column: 39, scope: !9092)
!9130 = !DILocation(line: 5076, column: 26, scope: !9131)
!9131 = distinct !DILexicalBlock(scope: !9092, file: !3, line: 5076, column: 3)
!9132 = !DILocation(line: 5076, column: 15, scope: !9131)
!9133 = !DILocation(line: 5076, column: 8, scope: !9131)
!9134 = !DILocation(line: 5076, column: 43, scope: !9135)
!9135 = distinct !DILexicalBlock(scope: !9131, file: !3, line: 5076, column: 3)
!9136 = !DILocation(line: 5076, column: 42, scope: !9135)
!9137 = !DILocation(line: 5076, column: 3, scope: !9131)
!9138 = !DILocalVariable(name: "wce", scope: !9139, file: !3, line: 5078, type: !2014)
!9139 = distinct !DILexicalBlock(scope: !9135, file: !3, line: 5077, column: 5)
!9140 = !DILocation(line: 5078, column: 14, scope: !9139)
!9141 = !DILocation(line: 5078, column: 20, scope: !9139)
!9142 = !DILocation(line: 5080, column: 24, scope: !9143)
!9143 = distinct !DILexicalBlock(scope: !9139, file: !3, line: 5080, column: 11)
!9144 = !DILocation(line: 5080, column: 11, scope: !9143)
!9145 = !DILocation(line: 5080, column: 29, scope: !9143)
!9146 = !DILocation(line: 5080, column: 11, scope: !9139)
!9147 = !DILocation(line: 5082, column: 8, scope: !9148)
!9148 = distinct !DILexicalBlock(scope: !9149, file: !3, line: 5082, column: 8)
!9149 = distinct !DILexicalBlock(scope: !9143, file: !3, line: 5081, column: 2)
!9150 = !DILocation(line: 5082, column: 8, scope: !9149)
!9151 = !DILocation(line: 5087, column: 73, scope: !9152)
!9152 = distinct !DILexicalBlock(scope: !9148, file: !3, line: 5083, column: 6)
!9153 = !DILocation(line: 5087, column: 53, scope: !9152)
!9154 = !DILocation(line: 5086, column: 8, scope: !9152)
!9155 = !DILocation(line: 5089, column: 8, scope: !9152)
!9156 = !DILocation(line: 5090, column: 8, scope: !9152)
!9157 = !DILocalVariable(name: "gtry", scope: !9158, file: !3, line: 5094, type: !2014)
!9158 = distinct !DILexicalBlock(scope: !9148, file: !3, line: 5093, column: 6)
!9159 = !DILocation(line: 5094, column: 15, scope: !9158)
!9160 = !DILocalVariable(name: "seq", scope: !9158, file: !3, line: 5095, type: !2004)
!9161 = !DILocation(line: 5095, column: 19, scope: !9158)
!9162 = !DILocalVariable(name: "kind", scope: !9158, file: !3, line: 5096, type: !1372)
!9163 = !DILocation(line: 5096, column: 30, scope: !9158)
!9164 = !DILocation(line: 5098, column: 40, scope: !9165)
!9165 = distinct !DILexicalBlock(scope: !9158, file: !3, line: 5098, column: 12)
!9166 = !DILocation(line: 5098, column: 12, scope: !9165)
!9167 = !DILocation(line: 5098, column: 12, scope: !9158)
!9168 = !DILocation(line: 5099, column: 8, scope: !9165)
!9169 = !DILocation(line: 5099, column: 3, scope: !9165)
!9170 = !DILocation(line: 5101, column: 8, scope: !9165)
!9171 = !DILocation(line: 5102, column: 14, scope: !9158)
!9172 = !DILocation(line: 5102, column: 12, scope: !9158)
!9173 = !DILocation(line: 5104, column: 33, scope: !9158)
!9174 = !DILocation(line: 5104, column: 58, scope: !9158)
!9175 = !DILocation(line: 5104, column: 38, scope: !9158)
!9176 = !DILocation(line: 5104, column: 64, scope: !9158)
!9177 = !DILocation(line: 5104, column: 15, scope: !9158)
!9178 = !DILocation(line: 5104, column: 13, scope: !9158)
!9179 = !DILocation(line: 5107, column: 39, scope: !9158)
!9180 = !DILocation(line: 5107, column: 16, scope: !9158)
!9181 = !DILocation(line: 5107, column: 37, scope: !9158)
!9182 = !DILocation(line: 5108, column: 26, scope: !9158)
!9183 = !DILocation(line: 5108, column: 15, scope: !9158)
!9184 = !DILocation(line: 5110, column: 2, scope: !9149)
!9185 = !DILocation(line: 5112, column: 2, scope: !9143)
!9186 = !DILocation(line: 5076, column: 3, scope: !9135)
!9187 = distinct !{!9187, !9137, !9188}
!9188 = !DILocation(line: 5113, column: 5, scope: !9131)
!9189 = !DILocation(line: 5115, column: 25, scope: !9092)
!9190 = !DILocation(line: 5115, column: 32, scope: !9092)
!9191 = !DILocation(line: 5115, column: 3, scope: !9092)
!9192 = !DILocation(line: 5116, column: 7, scope: !9193)
!9193 = distinct !DILexicalBlock(scope: !9092, file: !3, line: 5116, column: 7)
!9194 = !DILocation(line: 5116, column: 7, scope: !9092)
!9195 = !DILocation(line: 5118, column: 17, scope: !9196)
!9196 = distinct !DILexicalBlock(scope: !9193, file: !3, line: 5117, column: 5)
!9197 = !DILocation(line: 5118, column: 8, scope: !9196)
!9198 = !DILocation(line: 5118, column: 15, scope: !9196)
!9199 = !DILocation(line: 5119, column: 7, scope: !9196)
!9200 = !DILocation(line: 5123, column: 8, scope: !9201)
!9201 = distinct !DILexicalBlock(scope: !9193, file: !3, line: 5122, column: 5)
!9202 = !DILocation(line: 5123, column: 15, scope: !9201)
!9203 = !DILocation(line: 5124, column: 7, scope: !9201)
!9204 = !DILocation(line: 5126, column: 1, scope: !9092)
!9205 = distinct !DISubprogram(name: "gimplify_target_expr", scope: !3, file: !3, line: 5194, type: !7612, scopeLine: 5195, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!9206 = !DILocalVariable(name: "expr_p", arg: 1, scope: !9205, file: !3, line: 5194, type: !2049)
!9207 = !DILocation(line: 5194, column: 29, scope: !9205)
!9208 = !DILocalVariable(name: "pre_p", arg: 2, scope: !9205, file: !3, line: 5194, type: !3489)
!9209 = !DILocation(line: 5194, column: 49, scope: !9205)
!9210 = !DILocalVariable(name: "post_p", arg: 3, scope: !9205, file: !3, line: 5194, type: !3489)
!9211 = !DILocation(line: 5194, column: 68, scope: !9205)
!9212 = !DILocalVariable(name: "targ", scope: !9205, file: !3, line: 5196, type: !1686)
!9213 = !DILocation(line: 5196, column: 8, scope: !9205)
!9214 = !DILocation(line: 5196, column: 16, scope: !9205)
!9215 = !DILocation(line: 5196, column: 15, scope: !9205)
!9216 = !DILocalVariable(name: "temp", scope: !9205, file: !3, line: 5197, type: !1686)
!9217 = !DILocation(line: 5197, column: 8, scope: !9205)
!9218 = !DILocation(line: 5197, column: 15, scope: !9205)
!9219 = !DILocalVariable(name: "init", scope: !9205, file: !3, line: 5198, type: !1686)
!9220 = !DILocation(line: 5198, column: 8, scope: !9205)
!9221 = !DILocation(line: 5198, column: 15, scope: !9205)
!9222 = !DILocalVariable(name: "ret", scope: !9205, file: !3, line: 5199, type: !1329)
!9223 = !DILocation(line: 5199, column: 24, scope: !9205)
!9224 = !DILocation(line: 5201, column: 7, scope: !9225)
!9225 = distinct !DILexicalBlock(scope: !9205, file: !3, line: 5201, column: 7)
!9226 = !DILocation(line: 5201, column: 7, scope: !9205)
!9227 = !DILocation(line: 5205, column: 11, scope: !9228)
!9228 = distinct !DILexicalBlock(scope: !9229, file: !3, line: 5205, column: 11)
!9229 = distinct !DILexicalBlock(scope: !9225, file: !3, line: 5202, column: 5)
!9230 = !DILocation(line: 5205, column: 40, scope: !9228)
!9231 = !DILocation(line: 5205, column: 11, scope: !9229)
!9232 = !DILocation(line: 5207, column: 9, scope: !9233)
!9233 = distinct !DILexicalBlock(scope: !9234, file: !3, line: 5207, column: 8)
!9234 = distinct !DILexicalBlock(scope: !9228, file: !3, line: 5206, column: 2)
!9235 = !DILocation(line: 5207, column: 8, scope: !9234)
!9236 = !DILocation(line: 5208, column: 27, scope: !9233)
!9237 = !DILocation(line: 5208, column: 45, scope: !9233)
!9238 = !DILocation(line: 5208, column: 6, scope: !9233)
!9239 = !DILocation(line: 5209, column: 23, scope: !9234)
!9240 = !DILocation(line: 5209, column: 29, scope: !9234)
!9241 = !DILocation(line: 5209, column: 4, scope: !9234)
!9242 = !DILocation(line: 5210, column: 2, scope: !9234)
!9243 = !DILocation(line: 5212, column: 22, scope: !9228)
!9244 = !DILocation(line: 5212, column: 2, scope: !9228)
!9245 = !DILocation(line: 5216, column: 11, scope: !9246)
!9246 = distinct !DILexicalBlock(scope: !9229, file: !3, line: 5216, column: 11)
!9247 = !DILocation(line: 5216, column: 11, scope: !9229)
!9248 = !DILocation(line: 5217, column: 30, scope: !9246)
!9249 = !DILocation(line: 5217, column: 37, scope: !9246)
!9250 = !DILocation(line: 5217, column: 8, scope: !9246)
!9251 = !DILocation(line: 5217, column: 6, scope: !9246)
!9252 = !DILocation(line: 5217, column: 2, scope: !9246)
!9253 = !DILocalVariable(name: "init_expr", scope: !9254, file: !3, line: 5220, type: !1686)
!9254 = distinct !DILexicalBlock(scope: !9246, file: !3, line: 5219, column: 2)
!9255 = !DILocation(line: 5220, column: 9, scope: !9254)
!9256 = !DILocation(line: 5220, column: 21, scope: !9254)
!9257 = !DILocation(line: 5221, column: 11, scope: !9254)
!9258 = !DILocation(line: 5221, column: 9, scope: !9254)
!9259 = !DILocation(line: 5222, column: 32, scope: !9254)
!9260 = !DILocation(line: 5222, column: 39, scope: !9254)
!9261 = !DILocation(line: 5222, column: 10, scope: !9254)
!9262 = !DILocation(line: 5222, column: 8, scope: !9254)
!9263 = !DILocation(line: 5223, column: 9, scope: !9254)
!9264 = !DILocation(line: 5224, column: 14, scope: !9254)
!9265 = !DILocation(line: 5224, column: 4, scope: !9254)
!9266 = !DILocation(line: 5226, column: 11, scope: !9267)
!9267 = distinct !DILexicalBlock(scope: !9229, file: !3, line: 5226, column: 11)
!9268 = !DILocation(line: 5226, column: 15, scope: !9267)
!9269 = !DILocation(line: 5226, column: 11, scope: !9229)
!9270 = !DILocation(line: 5229, column: 4, scope: !9271)
!9271 = distinct !DILexicalBlock(scope: !9267, file: !3, line: 5227, column: 2)
!9272 = !DILocation(line: 5229, column: 31, scope: !9271)
!9273 = !DILocation(line: 5230, column: 4, scope: !9271)
!9274 = !DILocation(line: 5232, column: 11, scope: !9275)
!9275 = distinct !DILexicalBlock(scope: !9229, file: !3, line: 5232, column: 11)
!9276 = !DILocation(line: 5232, column: 11, scope: !9229)
!9277 = !DILocation(line: 5233, column: 20, scope: !9275)
!9278 = !DILocation(line: 5233, column: 26, scope: !9275)
!9279 = !DILocation(line: 5233, column: 2, scope: !9275)
!9280 = !DILocation(line: 5236, column: 11, scope: !9281)
!9281 = distinct !DILexicalBlock(scope: !9229, file: !3, line: 5236, column: 11)
!9282 = !DILocation(line: 5236, column: 11, scope: !9229)
!9283 = !DILocation(line: 5237, column: 23, scope: !9281)
!9284 = !DILocation(line: 5237, column: 29, scope: !9281)
!9285 = !DILocation(line: 5238, column: 9, scope: !9281)
!9286 = !DILocation(line: 5238, column: 33, scope: !9281)
!9287 = !DILocation(line: 5237, column: 2, scope: !9281)
!9288 = !DILocation(line: 5241, column: 32, scope: !9229)
!9289 = !DILocation(line: 5241, column: 7, scope: !9229)
!9290 = !DILocation(line: 5241, column: 30, scope: !9229)
!9291 = !DILocation(line: 5242, column: 7, scope: !9229)
!9292 = !DILocation(line: 5242, column: 34, scope: !9229)
!9293 = !DILocation(line: 5243, column: 5, scope: !9229)
!9294 = !DILocation(line: 5246, column: 5, scope: !9225)
!9295 = !DILocation(line: 5248, column: 13, scope: !9205)
!9296 = !DILocation(line: 5248, column: 4, scope: !9205)
!9297 = !DILocation(line: 5248, column: 11, scope: !9205)
!9298 = !DILocation(line: 5249, column: 3, scope: !9205)
!9299 = !DILocation(line: 5250, column: 1, scope: !9205)
!9300 = distinct !DISubprogram(name: "gimple_set_no_warning", scope: !385, file: !385, line: 1209, type: !9073, scopeLine: 1210, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!9301 = !DILocalVariable(name: "stmt", arg: 1, scope: !9300, file: !385, line: 1209, type: !2014)
!9302 = !DILocation(line: 1209, column: 31, scope: !9300)
!9303 = !DILocalVariable(name: "no_warning", arg: 2, scope: !9300, file: !385, line: 1209, type: !1804)
!9304 = !DILocation(line: 1209, column: 42, scope: !9300)
!9305 = !DILocation(line: 1211, column: 40, scope: !9300)
!9306 = !DILocation(line: 1211, column: 29, scope: !9300)
!9307 = !DILocation(line: 1211, column: 3, scope: !9300)
!9308 = !DILocation(line: 1211, column: 9, scope: !9300)
!9309 = !DILocation(line: 1211, column: 16, scope: !9300)
!9310 = !DILocation(line: 1211, column: 27, scope: !9300)
!9311 = !DILocation(line: 1212, column: 1, scope: !9300)
!9312 = distinct !DISubprogram(name: "gimplify_statement_list", scope: !3, file: !3, line: 1374, type: !7298, scopeLine: 1375, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!9313 = !DILocalVariable(name: "expr_p", arg: 1, scope: !9312, file: !3, line: 1374, type: !2049)
!9314 = !DILocation(line: 1374, column: 32, scope: !9312)
!9315 = !DILocalVariable(name: "pre_p", arg: 2, scope: !9312, file: !3, line: 1374, type: !3489)
!9316 = !DILocation(line: 1374, column: 52, scope: !9312)
!9317 = !DILocalVariable(name: "temp", scope: !9312, file: !3, line: 1376, type: !1686)
!9318 = !DILocation(line: 1376, column: 8, scope: !9312)
!9319 = !DILocation(line: 1376, column: 38, scope: !9312)
!9320 = !DILocation(line: 1376, column: 37, scope: !9312)
!9321 = !DILocation(line: 1376, column: 15, scope: !9312)
!9322 = !DILocalVariable(name: "i", scope: !9312, file: !3, line: 1378, type: !3442)
!9323 = !DILocation(line: 1378, column: 22, scope: !9312)
!9324 = !DILocation(line: 1378, column: 38, scope: !9312)
!9325 = !DILocation(line: 1378, column: 37, scope: !9312)
!9326 = !DILocation(line: 1378, column: 26, scope: !9312)
!9327 = !DILocation(line: 1380, column: 3, scope: !9312)
!9328 = !DILocation(line: 1380, column: 11, scope: !9312)
!9329 = !DILocation(line: 1380, column: 10, scope: !9312)
!9330 = !DILocation(line: 1382, column: 22, scope: !9331)
!9331 = distinct !DILexicalBlock(scope: !9312, file: !3, line: 1381, column: 5)
!9332 = !DILocation(line: 1382, column: 40, scope: !9331)
!9333 = !DILocation(line: 1382, column: 7, scope: !9331)
!9334 = !DILocation(line: 1383, column: 7, scope: !9331)
!9335 = distinct !{!9335, !9327, !9336}
!9336 = !DILocation(line: 1384, column: 5, scope: !9312)
!9337 = !DILocation(line: 1386, column: 7, scope: !9338)
!9338 = distinct !DILexicalBlock(scope: !9312, file: !3, line: 1386, column: 7)
!9339 = !DILocation(line: 1386, column: 7, scope: !9312)
!9340 = !DILocation(line: 1388, column: 17, scope: !9341)
!9341 = distinct !DILexicalBlock(scope: !9338, file: !3, line: 1387, column: 5)
!9342 = !DILocation(line: 1388, column: 8, scope: !9341)
!9343 = !DILocation(line: 1388, column: 15, scope: !9341)
!9344 = !DILocation(line: 1389, column: 7, scope: !9341)
!9345 = !DILocation(line: 1392, column: 3, scope: !9312)
!9346 = !DILocation(line: 1393, column: 1, scope: !9312)
!9347 = distinct !DISubprogram(name: "gimplify_var_or_parm_decl", scope: !3, file: !3, line: 1805, type: !7728, scopeLine: 1806, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!9348 = !DILocalVariable(name: "expr_p", arg: 1, scope: !9347, file: !3, line: 1805, type: !2049)
!9349 = !DILocation(line: 1805, column: 34, scope: !9347)
!9350 = !DILocalVariable(name: "decl", scope: !9347, file: !3, line: 1807, type: !1686)
!9351 = !DILocation(line: 1807, column: 8, scope: !9347)
!9352 = !DILocation(line: 1807, column: 16, scope: !9347)
!9353 = !DILocation(line: 1807, column: 15, scope: !9347)
!9354 = !DILocation(line: 1815, column: 7, scope: !9355)
!9355 = distinct !DILexicalBlock(scope: !9347, file: !3, line: 1815, column: 7)
!9356 = !DILocation(line: 1815, column: 24, scope: !9355)
!9357 = !DILocation(line: 1816, column: 7, scope: !9355)
!9358 = !DILocation(line: 1816, column: 11, scope: !9355)
!9359 = !DILocation(line: 1817, column: 7, scope: !9355)
!9360 = !DILocation(line: 1817, column: 11, scope: !9355)
!9361 = !DILocation(line: 1817, column: 30, scope: !9355)
!9362 = !DILocation(line: 1817, column: 34, scope: !9355)
!9363 = !DILocation(line: 1818, column: 7, scope: !9355)
!9364 = !DILocation(line: 1818, column: 33, scope: !9355)
!9365 = !DILocation(line: 1818, column: 10, scope: !9355)
!9366 = !DILocation(line: 1818, column: 42, scope: !9355)
!9367 = !DILocation(line: 1818, column: 39, scope: !9355)
!9368 = !DILocation(line: 1815, column: 7, scope: !9347)
!9369 = !DILocation(line: 1820, column: 7, scope: !9370)
!9370 = distinct !DILexicalBlock(scope: !9355, file: !3, line: 1819, column: 5)
!9371 = !DILocation(line: 1821, column: 7, scope: !9370)
!9372 = !DILocation(line: 1825, column: 7, scope: !9373)
!9373 = distinct !DILexicalBlock(scope: !9347, file: !3, line: 1825, column: 7)
!9374 = !DILocation(line: 1825, column: 25, scope: !9373)
!9375 = !DILocation(line: 1825, column: 49, scope: !9373)
!9376 = !DILocation(line: 1825, column: 68, scope: !9373)
!9377 = !DILocation(line: 1825, column: 28, scope: !9373)
!9378 = !DILocation(line: 1825, column: 7, scope: !9347)
!9379 = !DILocation(line: 1826, column: 5, scope: !9373)
!9380 = !DILocation(line: 1829, column: 7, scope: !9381)
!9381 = distinct !DILexicalBlock(scope: !9347, file: !3, line: 1829, column: 7)
!9382 = !DILocation(line: 1829, column: 7, scope: !9347)
!9383 = !DILocalVariable(name: "value_expr", scope: !9384, file: !3, line: 1831, type: !1686)
!9384 = distinct !DILexicalBlock(scope: !9381, file: !3, line: 1830, column: 5)
!9385 = !DILocation(line: 1831, column: 12, scope: !9384)
!9386 = !DILocation(line: 1831, column: 25, scope: !9384)
!9387 = !DILocation(line: 1835, column: 11, scope: !9388)
!9388 = distinct !DILexicalBlock(scope: !9384, file: !3, line: 1835, column: 11)
!9389 = !DILocation(line: 1835, column: 28, scope: !9388)
!9390 = !DILocation(line: 1836, column: 4, scope: !9388)
!9391 = !DILocation(line: 1836, column: 7, scope: !9388)
!9392 = !DILocation(line: 1836, column: 41, scope: !9388)
!9393 = !DILocation(line: 1837, column: 4, scope: !9388)
!9394 = !DILocation(line: 1837, column: 7, scope: !9388)
!9395 = !DILocation(line: 1837, column: 21, scope: !9388)
!9396 = !DILocation(line: 1838, column: 4, scope: !9388)
!9397 = !DILocation(line: 1838, column: 7, scope: !9388)
!9398 = !DILocation(line: 1838, column: 30, scope: !9388)
!9399 = !DILocation(line: 1839, column: 4, scope: !9388)
!9400 = !DILocation(line: 1839, column: 7, scope: !9388)
!9401 = !DILocation(line: 1839, column: 48, scope: !9388)
!9402 = !DILocation(line: 1840, column: 4, scope: !9388)
!9403 = !DILocation(line: 1840, column: 30, scope: !9388)
!9404 = !DILocation(line: 1840, column: 7, scope: !9388)
!9405 = !DILocation(line: 1840, column: 39, scope: !9388)
!9406 = !DILocation(line: 1840, column: 36, scope: !9388)
!9407 = !DILocation(line: 1835, column: 11, scope: !9384)
!9408 = !DILocalVariable(name: "ctx", scope: !9409, file: !3, line: 1842, type: !3146)
!9409 = distinct !DILexicalBlock(scope: !9388, file: !3, line: 1841, column: 2)
!9410 = !DILocation(line: 1842, column: 29, scope: !9409)
!9411 = !DILocation(line: 1842, column: 35, scope: !9409)
!9412 = !DILocation(line: 1843, column: 4, scope: !9409)
!9413 = !DILocation(line: 1843, column: 11, scope: !9409)
!9414 = !DILocation(line: 1843, column: 15, scope: !9409)
!9415 = !DILocation(line: 1843, column: 18, scope: !9409)
!9416 = !DILocation(line: 1843, column: 23, scope: !9409)
!9417 = !DILocation(line: 1843, column: 35, scope: !9409)
!9418 = !DILocation(line: 0, scope: !9409)
!9419 = !DILocation(line: 1844, column: 12, scope: !9409)
!9420 = !DILocation(line: 1844, column: 17, scope: !9409)
!9421 = !DILocation(line: 1844, column: 10, scope: !9409)
!9422 = distinct !{!9422, !9412, !9420}
!9423 = !DILocation(line: 1845, column: 9, scope: !9424)
!9424 = distinct !DILexicalBlock(scope: !9409, file: !3, line: 1845, column: 8)
!9425 = !DILocation(line: 1845, column: 13, scope: !9424)
!9426 = !DILocation(line: 1845, column: 37, scope: !9424)
!9427 = !DILocation(line: 1845, column: 52, scope: !9424)
!9428 = !DILocation(line: 1845, column: 17, scope: !9424)
!9429 = !DILocation(line: 1845, column: 8, scope: !9409)
!9430 = !DILocalVariable(name: "copy", scope: !9431, file: !3, line: 1847, type: !1686)
!9431 = distinct !DILexicalBlock(scope: !9424, file: !3, line: 1846, column: 6)
!9432 = !DILocation(line: 1847, column: 13, scope: !9431)
!9433 = !DILocation(line: 1847, column: 20, scope: !9431)
!9434 = !DILocalVariable(name: "block", scope: !9431, file: !3, line: 1847, type: !1686)
!9435 = !DILocation(line: 1847, column: 38, scope: !9431)
!9436 = !DILocation(line: 1849, column: 19, scope: !9431)
!9437 = !DILocation(line: 1849, column: 43, scope: !9431)
!9438 = !DILocation(line: 1849, column: 8, scope: !9431)
!9439 = !DILocation(line: 1850, column: 8, scope: !9431)
!9440 = !DILocation(line: 1851, column: 8, scope: !9431)
!9441 = !DILocation(line: 1851, column: 25, scope: !9431)
!9442 = !DILocation(line: 1852, column: 16, scope: !9431)
!9443 = !DILocation(line: 1852, column: 14, scope: !9431)
!9444 = !DILocation(line: 1853, column: 28, scope: !9431)
!9445 = !DILocation(line: 1853, column: 8, scope: !9431)
!9446 = !DILocation(line: 1853, column: 26, scope: !9431)
!9447 = !DILocation(line: 1854, column: 29, scope: !9431)
!9448 = !DILocation(line: 1854, column: 8, scope: !9431)
!9449 = !DILocation(line: 1854, column: 27, scope: !9431)
!9450 = !DILocation(line: 1855, column: 8, scope: !9431)
!9451 = !DILocation(line: 1856, column: 8, scope: !9431)
!9452 = !DILocation(line: 1856, column: 37, scope: !9431)
!9453 = !DILocation(line: 1857, column: 6, scope: !9431)
!9454 = !DILocation(line: 1858, column: 2, scope: !9409)
!9455 = !DILocation(line: 1860, column: 31, scope: !9384)
!9456 = !DILocation(line: 1860, column: 17, scope: !9384)
!9457 = !DILocation(line: 1860, column: 8, scope: !9384)
!9458 = !DILocation(line: 1860, column: 15, scope: !9384)
!9459 = !DILocation(line: 1861, column: 7, scope: !9384)
!9460 = !DILocation(line: 1864, column: 3, scope: !9347)
!9461 = !DILocation(line: 1865, column: 1, scope: !9347)
!9462 = distinct !DISubprogram(name: "omp_notice_variable", scope: !3, file: !3, line: 5461, type: !9463, scopeLine: 5462, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!9463 = !DISubroutineType(types: !9464)
!9464 = !{!1804, !3146, !1686, !1804}
!9465 = !DILocalVariable(name: "ctx", arg: 1, scope: !9462, file: !3, line: 5461, type: !3146)
!9466 = !DILocation(line: 5461, column: 47, scope: !9462)
!9467 = !DILocalVariable(name: "decl", arg: 2, scope: !9462, file: !3, line: 5461, type: !1686)
!9468 = !DILocation(line: 5461, column: 57, scope: !9462)
!9469 = !DILocalVariable(name: "in_code", arg: 3, scope: !9462, file: !3, line: 5461, type: !1804)
!9470 = !DILocation(line: 5461, column: 68, scope: !9462)
!9471 = !DILocalVariable(name: "n", scope: !9462, file: !3, line: 5463, type: !3156)
!9472 = !DILocation(line: 5463, column: 19, scope: !9462)
!9473 = !DILocalVariable(name: "flags", scope: !9462, file: !3, line: 5464, type: !7)
!9474 = !DILocation(line: 5464, column: 12, scope: !9462)
!9475 = !DILocation(line: 5464, column: 20, scope: !9462)
!9476 = !DILocalVariable(name: "ret", scope: !9462, file: !3, line: 5465, type: !1804)
!9477 = !DILocation(line: 5465, column: 8, scope: !9462)
!9478 = !DILocalVariable(name: "shared", scope: !9462, file: !3, line: 5465, type: !1804)
!9479 = !DILocation(line: 5465, column: 21, scope: !9462)
!9480 = !DILocation(line: 5467, column: 7, scope: !9481)
!9481 = distinct !DILexicalBlock(scope: !9462, file: !3, line: 5467, column: 7)
!9482 = !DILocation(line: 5467, column: 15, scope: !9481)
!9483 = !DILocation(line: 5467, column: 12, scope: !9481)
!9484 = !DILocation(line: 5467, column: 31, scope: !9481)
!9485 = !DILocation(line: 5467, column: 34, scope: !9481)
!9486 = !DILocation(line: 5467, column: 54, scope: !9481)
!9487 = !DILocation(line: 5467, column: 51, scope: !9481)
!9488 = !DILocation(line: 5467, column: 7, scope: !9462)
!9489 = !DILocation(line: 5468, column: 5, scope: !9481)
!9490 = !DILocation(line: 5471, column: 22, scope: !9491)
!9491 = distinct !DILexicalBlock(scope: !9462, file: !3, line: 5471, column: 7)
!9492 = !DILocation(line: 5471, column: 7, scope: !9491)
!9493 = !DILocation(line: 5471, column: 7, scope: !9462)
!9494 = !DILocation(line: 5473, column: 11, scope: !9495)
!9495 = distinct !DILexicalBlock(scope: !9496, file: !3, line: 5473, column: 11)
!9496 = distinct !DILexicalBlock(scope: !9491, file: !3, line: 5472, column: 5)
!9497 = !DILocation(line: 5473, column: 11, scope: !9496)
!9498 = !DILocation(line: 5474, column: 2, scope: !9495)
!9499 = !DILocation(line: 5476, column: 11, scope: !9500)
!9500 = distinct !DILexicalBlock(scope: !9496, file: !3, line: 5476, column: 11)
!9501 = !DILocation(line: 5476, column: 11, scope: !9496)
!9502 = !DILocalVariable(name: "value", scope: !9503, file: !3, line: 5478, type: !1686)
!9503 = distinct !DILexicalBlock(scope: !9500, file: !3, line: 5477, column: 2)
!9504 = !DILocation(line: 5478, column: 9, scope: !9503)
!9505 = !DILocation(line: 5478, column: 35, scope: !9503)
!9506 = !DILocation(line: 5478, column: 17, scope: !9503)
!9507 = !DILocation(line: 5480, column: 8, scope: !9508)
!9508 = distinct !DILexicalBlock(scope: !9503, file: !3, line: 5480, column: 8)
!9509 = !DILocation(line: 5480, column: 14, scope: !9508)
!9510 = !DILocation(line: 5480, column: 17, scope: !9508)
!9511 = !DILocation(line: 5480, column: 32, scope: !9508)
!9512 = !DILocation(line: 5480, column: 35, scope: !9508)
!9513 = !DILocation(line: 5480, column: 8, scope: !9503)
!9514 = !DILocation(line: 5481, column: 6, scope: !9508)
!9515 = !DILocation(line: 5482, column: 2, scope: !9503)
!9516 = !DILocation(line: 5483, column: 5, scope: !9496)
!9517 = !DILocation(line: 5485, column: 26, scope: !9462)
!9518 = !DILocation(line: 5485, column: 31, scope: !9462)
!9519 = !DILocation(line: 5485, column: 58, scope: !9462)
!9520 = !DILocation(line: 5485, column: 42, scope: !9462)
!9521 = !DILocation(line: 5485, column: 7, scope: !9462)
!9522 = !DILocation(line: 5485, column: 5, scope: !9462)
!9523 = !DILocation(line: 5486, column: 7, scope: !9524)
!9524 = distinct !DILexicalBlock(scope: !9462, file: !3, line: 5486, column: 7)
!9525 = !DILocation(line: 5486, column: 9, scope: !9524)
!9526 = !DILocation(line: 5486, column: 7, scope: !9462)
!9527 = !DILocalVariable(name: "default_kind", scope: !9528, file: !3, line: 5488, type: !370)
!9528 = distinct !DILexicalBlock(scope: !9524, file: !3, line: 5487, column: 5)
!9529 = !DILocation(line: 5488, column: 36, scope: !9528)
!9530 = !DILocalVariable(name: "kind", scope: !9528, file: !3, line: 5488, type: !370)
!9531 = !DILocation(line: 5488, column: 50, scope: !9528)
!9532 = !DILocalVariable(name: "octx", scope: !9528, file: !3, line: 5489, type: !3146)
!9533 = !DILocation(line: 5489, column: 32, scope: !9528)
!9534 = !DILocation(line: 5491, column: 11, scope: !9535)
!9535 = distinct !DILexicalBlock(scope: !9528, file: !3, line: 5491, column: 11)
!9536 = !DILocation(line: 5491, column: 16, scope: !9535)
!9537 = !DILocation(line: 5491, column: 28, scope: !9535)
!9538 = !DILocation(line: 5491, column: 11, scope: !9528)
!9539 = !DILocation(line: 5492, column: 2, scope: !9535)
!9540 = !DILocation(line: 5497, column: 22, scope: !9528)
!9541 = !DILocation(line: 5497, column: 27, scope: !9528)
!9542 = !DILocation(line: 5497, column: 20, scope: !9528)
!9543 = !DILocation(line: 5498, column: 31, scope: !9528)
!9544 = !DILocation(line: 5498, column: 58, scope: !9528)
!9545 = !DILocation(line: 5498, column: 14, scope: !9528)
!9546 = !DILocation(line: 5498, column: 12, scope: !9528)
!9547 = !DILocation(line: 5499, column: 11, scope: !9548)
!9548 = distinct !DILexicalBlock(scope: !9528, file: !3, line: 5499, column: 11)
!9549 = !DILocation(line: 5499, column: 16, scope: !9548)
!9550 = !DILocation(line: 5499, column: 11, scope: !9528)
!9551 = !DILocation(line: 5500, column: 17, scope: !9548)
!9552 = !DILocation(line: 5500, column: 15, scope: !9548)
!9553 = !DILocation(line: 5500, column: 2, scope: !9548)
!9554 = !DILocation(line: 5502, column: 15, scope: !9528)
!9555 = !DILocation(line: 5502, column: 7, scope: !9528)
!9556 = !DILocation(line: 5506, column: 4, scope: !9557)
!9557 = distinct !DILexicalBlock(scope: !9528, file: !3, line: 5503, column: 2)
!9558 = !DILocation(line: 5505, column: 4, scope: !9557)
!9559 = !DILocation(line: 5507, column: 14, scope: !9557)
!9560 = !DILocation(line: 5507, column: 19, scope: !9557)
!9561 = !DILocation(line: 5507, column: 4, scope: !9557)
!9562 = !DILocation(line: 5510, column: 10, scope: !9557)
!9563 = !DILocation(line: 5511, column: 4, scope: !9557)
!9564 = !DILocation(line: 5513, column: 10, scope: !9557)
!9565 = !DILocation(line: 5514, column: 4, scope: !9557)
!9566 = !DILocation(line: 5516, column: 10, scope: !9557)
!9567 = !DILocation(line: 5517, column: 4, scope: !9557)
!9568 = !DILocation(line: 5520, column: 4, scope: !9557)
!9569 = !DILocation(line: 5521, column: 8, scope: !9570)
!9570 = distinct !DILexicalBlock(scope: !9557, file: !3, line: 5521, column: 8)
!9571 = !DILocation(line: 5521, column: 13, scope: !9570)
!9572 = !DILocation(line: 5521, column: 8, scope: !9557)
!9573 = !DILocation(line: 5522, column: 27, scope: !9570)
!9574 = !DILocation(line: 5522, column: 32, scope: !9570)
!9575 = !DILocation(line: 5522, column: 47, scope: !9570)
!9576 = !DILocation(line: 5522, column: 53, scope: !9570)
!9577 = !DILocation(line: 5522, column: 6, scope: !9570)
!9578 = !DILocation(line: 5523, column: 16, scope: !9579)
!9579 = distinct !DILexicalBlock(scope: !9557, file: !3, line: 5523, column: 4)
!9580 = !DILocation(line: 5523, column: 21, scope: !9579)
!9581 = !DILocation(line: 5523, column: 14, scope: !9579)
!9582 = !DILocation(line: 5523, column: 9, scope: !9579)
!9583 = !DILocation(line: 5523, column: 36, scope: !9584)
!9584 = distinct !DILexicalBlock(scope: !9579, file: !3, line: 5523, column: 4)
!9585 = !DILocation(line: 5523, column: 4, scope: !9579)
!9586 = !DILocalVariable(name: "n2", scope: !9587, file: !3, line: 5525, type: !3156)
!9587 = distinct !DILexicalBlock(scope: !9584, file: !3, line: 5524, column: 6)
!9588 = !DILocation(line: 5525, column: 24, scope: !9587)
!9589 = !DILocation(line: 5527, column: 32, scope: !9587)
!9590 = !DILocation(line: 5527, column: 38, scope: !9587)
!9591 = !DILocation(line: 5527, column: 66, scope: !9587)
!9592 = !DILocation(line: 5527, column: 49, scope: !9587)
!9593 = !DILocation(line: 5527, column: 13, scope: !9587)
!9594 = !DILocation(line: 5527, column: 11, scope: !9587)
!9595 = !DILocation(line: 5528, column: 12, scope: !9596)
!9596 = distinct !DILexicalBlock(scope: !9587, file: !3, line: 5528, column: 12)
!9597 = !DILocation(line: 5528, column: 15, scope: !9596)
!9598 = !DILocation(line: 5528, column: 19, scope: !9596)
!9599 = !DILocation(line: 5528, column: 23, scope: !9596)
!9600 = !DILocation(line: 5528, column: 29, scope: !9596)
!9601 = !DILocation(line: 5528, column: 54, scope: !9596)
!9602 = !DILocation(line: 5528, column: 12, scope: !9587)
!9603 = !DILocation(line: 5530, column: 11, scope: !9604)
!9604 = distinct !DILexicalBlock(scope: !9596, file: !3, line: 5529, column: 3)
!9605 = !DILocation(line: 5531, column: 5, scope: !9604)
!9606 = !DILocation(line: 5533, column: 13, scope: !9607)
!9607 = distinct !DILexicalBlock(scope: !9587, file: !3, line: 5533, column: 12)
!9608 = !DILocation(line: 5533, column: 19, scope: !9607)
!9609 = !DILocation(line: 5533, column: 31, scope: !9607)
!9610 = !DILocation(line: 5533, column: 47, scope: !9607)
!9611 = !DILocation(line: 5533, column: 12, scope: !9587)
!9612 = !DILocation(line: 5534, column: 3, scope: !9607)
!9613 = !DILocation(line: 5535, column: 6, scope: !9587)
!9614 = !DILocation(line: 5523, column: 49, scope: !9584)
!9615 = !DILocation(line: 5523, column: 55, scope: !9584)
!9616 = !DILocation(line: 5523, column: 47, scope: !9584)
!9617 = !DILocation(line: 5523, column: 4, scope: !9584)
!9618 = distinct !{!9618, !9585, !9619}
!9619 = !DILocation(line: 5535, column: 6, scope: !9579)
!9620 = !DILocation(line: 5536, column: 8, scope: !9621)
!9621 = distinct !DILexicalBlock(scope: !9557, file: !3, line: 5536, column: 8)
!9622 = !DILocation(line: 5536, column: 14, scope: !9621)
!9623 = !DILocation(line: 5536, column: 8, scope: !9557)
!9624 = !DILocation(line: 5537, column: 6, scope: !9621)
!9625 = !DILocation(line: 5538, column: 8, scope: !9626)
!9626 = distinct !DILexicalBlock(scope: !9557, file: !3, line: 5538, column: 8)
!9627 = !DILocation(line: 5538, column: 13, scope: !9626)
!9628 = !DILocation(line: 5539, column: 8, scope: !9626)
!9629 = !DILocation(line: 5539, column: 12, scope: !9626)
!9630 = !DILocation(line: 5539, column: 29, scope: !9626)
!9631 = !DILocation(line: 5540, column: 5, scope: !9626)
!9632 = !DILocation(line: 5540, column: 25, scope: !9626)
!9633 = !DILocation(line: 5540, column: 10, scope: !9626)
!9634 = !DILocation(line: 5541, column: 9, scope: !9626)
!9635 = !DILocation(line: 5541, column: 12, scope: !9626)
!9636 = !DILocation(line: 5541, column: 35, scope: !9626)
!9637 = !DILocation(line: 5541, column: 32, scope: !9626)
!9638 = !DILocation(line: 5538, column: 8, scope: !9557)
!9639 = !DILocation(line: 5543, column: 14, scope: !9640)
!9640 = distinct !DILexicalBlock(scope: !9626, file: !3, line: 5542, column: 6)
!9641 = !DILocation(line: 5544, column: 8, scope: !9640)
!9642 = !DILocation(line: 5546, column: 10, scope: !9557)
!9643 = !DILocation(line: 5547, column: 4, scope: !9557)
!9644 = !DILocation(line: 5549, column: 4, scope: !9557)
!9645 = !DILocation(line: 5550, column: 2, scope: !9557)
!9646 = !DILocation(line: 5552, column: 12, scope: !9647)
!9647 = distinct !DILexicalBlock(scope: !9528, file: !3, line: 5552, column: 11)
!9648 = !DILocation(line: 5552, column: 18, scope: !9647)
!9649 = !DILocation(line: 5553, column: 4, scope: !9647)
!9650 = !DILocation(line: 5553, column: 24, scope: !9647)
!9651 = !DILocation(line: 5553, column: 47, scope: !9647)
!9652 = !DILocation(line: 5553, column: 7, scope: !9647)
!9653 = !DILocation(line: 5552, column: 11, scope: !9528)
!9654 = !DILocation(line: 5554, column: 8, scope: !9647)
!9655 = !DILocation(line: 5554, column: 2, scope: !9647)
!9656 = !DILocation(line: 5556, column: 25, scope: !9528)
!9657 = !DILocation(line: 5556, column: 30, scope: !9528)
!9658 = !DILocation(line: 5556, column: 36, scope: !9528)
!9659 = !DILocation(line: 5556, column: 7, scope: !9528)
!9660 = !DILocation(line: 5558, column: 17, scope: !9528)
!9661 = !DILocation(line: 5558, column: 23, scope: !9528)
!9662 = !DILocation(line: 5558, column: 38, scope: !9528)
!9663 = !DILocation(line: 5558, column: 16, scope: !9528)
!9664 = !DILocation(line: 5558, column: 14, scope: !9528)
!9665 = !DILocation(line: 5559, column: 30, scope: !9528)
!9666 = !DILocation(line: 5559, column: 56, scope: !9528)
!9667 = !DILocation(line: 5559, column: 62, scope: !9528)
!9668 = !DILocation(line: 5559, column: 13, scope: !9528)
!9669 = !DILocation(line: 5559, column: 11, scope: !9528)
!9670 = !DILocation(line: 5560, column: 7, scope: !9528)
!9671 = !DILocation(line: 5563, column: 8, scope: !9672)
!9672 = distinct !DILexicalBlock(scope: !9462, file: !3, line: 5563, column: 7)
!9673 = !DILocation(line: 5563, column: 11, scope: !9672)
!9674 = !DILocation(line: 5563, column: 17, scope: !9672)
!9675 = !DILocation(line: 5563, column: 45, scope: !9672)
!9676 = !DILocation(line: 5564, column: 7, scope: !9672)
!9677 = !DILocation(line: 5564, column: 11, scope: !9672)
!9678 = !DILocation(line: 5564, column: 17, scope: !9672)
!9679 = !DILocation(line: 5564, column: 45, scope: !9672)
!9680 = !DILocation(line: 5565, column: 7, scope: !9672)
!9681 = !DILocation(line: 5565, column: 10, scope: !9672)
!9682 = !DILocation(line: 5566, column: 7, scope: !9672)
!9683 = !DILocation(line: 5566, column: 10, scope: !9672)
!9684 = !DILocation(line: 5566, column: 39, scope: !9672)
!9685 = !DILocation(line: 5563, column: 7, scope: !9462)
!9686 = !DILocalVariable(name: "n2", scope: !9687, file: !3, line: 5568, type: !3156)
!9687 = distinct !DILexicalBlock(scope: !9672, file: !3, line: 5567, column: 5)
!9688 = !DILocation(line: 5568, column: 23, scope: !9687)
!9689 = !DILocalVariable(name: "t", scope: !9687, file: !3, line: 5569, type: !1686)
!9690 = !DILocation(line: 5569, column: 12, scope: !9687)
!9691 = !DILocation(line: 5569, column: 16, scope: !9687)
!9692 = !DILocation(line: 5570, column: 7, scope: !9687)
!9693 = !DILocation(line: 5571, column: 11, scope: !9687)
!9694 = !DILocation(line: 5571, column: 9, scope: !9687)
!9695 = !DILocation(line: 5572, column: 7, scope: !9687)
!9696 = !DILocation(line: 5573, column: 31, scope: !9687)
!9697 = !DILocation(line: 5573, column: 36, scope: !9687)
!9698 = !DILocation(line: 5573, column: 64, scope: !9687)
!9699 = !DILocation(line: 5573, column: 47, scope: !9687)
!9700 = !DILocation(line: 5573, column: 12, scope: !9687)
!9701 = !DILocation(line: 5573, column: 10, scope: !9687)
!9702 = !DILocation(line: 5574, column: 7, scope: !9687)
!9703 = !DILocation(line: 5574, column: 11, scope: !9687)
!9704 = !DILocation(line: 5574, column: 17, scope: !9687)
!9705 = !DILocation(line: 5575, column: 5, scope: !9687)
!9706 = !DILocation(line: 5577, column: 14, scope: !9462)
!9707 = !DILocation(line: 5577, column: 22, scope: !9462)
!9708 = !DILocation(line: 5577, column: 25, scope: !9462)
!9709 = !DILocation(line: 5577, column: 20, scope: !9462)
!9710 = !DILocation(line: 5577, column: 32, scope: !9462)
!9711 = !DILocation(line: 5577, column: 47, scope: !9462)
!9712 = !DILocation(line: 5577, column: 12, scope: !9462)
!9713 = !DILocation(line: 5577, column: 10, scope: !9462)
!9714 = !DILocation(line: 5578, column: 26, scope: !9462)
!9715 = !DILocation(line: 5578, column: 52, scope: !9462)
!9716 = !DILocation(line: 5578, column: 58, scope: !9462)
!9717 = !DILocation(line: 5578, column: 9, scope: !9462)
!9718 = !DILocation(line: 5578, column: 7, scope: !9462)
!9719 = !DILocation(line: 5581, column: 8, scope: !9720)
!9720 = distinct !DILexicalBlock(scope: !9462, file: !3, line: 5581, column: 7)
!9721 = !DILocation(line: 5581, column: 11, scope: !9720)
!9722 = !DILocation(line: 5581, column: 19, scope: !9720)
!9723 = !DILocation(line: 5581, column: 17, scope: !9720)
!9724 = !DILocation(line: 5581, column: 29, scope: !9720)
!9725 = !DILocation(line: 5581, column: 26, scope: !9720)
!9726 = !DILocation(line: 5581, column: 7, scope: !9462)
!9727 = !DILocation(line: 5582, column: 12, scope: !9720)
!9728 = !DILocation(line: 5582, column: 5, scope: !9720)
!9729 = !DILocation(line: 5583, column: 12, scope: !9462)
!9730 = !DILocation(line: 5583, column: 15, scope: !9462)
!9731 = !DILocation(line: 5583, column: 9, scope: !9462)
!9732 = !DILocation(line: 5584, column: 14, scope: !9462)
!9733 = !DILocation(line: 5584, column: 3, scope: !9462)
!9734 = !DILocation(line: 5584, column: 6, scope: !9462)
!9735 = !DILocation(line: 5584, column: 12, scope: !9462)
!9736 = !DILabel(scope: !9462, name: "do_outer", file: !3, line: 5586)
!9737 = !DILocation(line: 5586, column: 2, scope: !9462)
!9738 = !DILocation(line: 5589, column: 8, scope: !9739)
!9739 = distinct !DILexicalBlock(scope: !9462, file: !3, line: 5589, column: 7)
!9740 = !DILocation(line: 5589, column: 14, scope: !9739)
!9741 = !DILocation(line: 5589, column: 30, scope: !9739)
!9742 = !DILocation(line: 5589, column: 35, scope: !9739)
!9743 = !DILocation(line: 5589, column: 41, scope: !9739)
!9744 = !DILocation(line: 5589, column: 7, scope: !9462)
!9745 = !DILocation(line: 5590, column: 12, scope: !9739)
!9746 = !DILocation(line: 5590, column: 5, scope: !9739)
!9747 = !DILocation(line: 5591, column: 7, scope: !9748)
!9748 = distinct !DILexicalBlock(scope: !9462, file: !3, line: 5591, column: 7)
!9749 = !DILocation(line: 5591, column: 12, scope: !9748)
!9750 = !DILocation(line: 5592, column: 7, scope: !9748)
!9751 = !DILocation(line: 5592, column: 31, scope: !9748)
!9752 = !DILocation(line: 5592, column: 36, scope: !9748)
!9753 = !DILocation(line: 5592, column: 51, scope: !9748)
!9754 = !DILocation(line: 5592, column: 57, scope: !9748)
!9755 = !DILocation(line: 5592, column: 10, scope: !9748)
!9756 = !DILocation(line: 5591, column: 7, scope: !9462)
!9757 = !DILocation(line: 5593, column: 5, scope: !9748)
!9758 = !DILocation(line: 5594, column: 10, scope: !9462)
!9759 = !DILocation(line: 5594, column: 3, scope: !9462)
!9760 = !DILocation(line: 5595, column: 1, scope: !9462)
!9761 = distinct !DISubprogram(name: "gimplify_omp_parallel", scope: !3, file: !3, line: 5979, type: !9762, scopeLine: 5980, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!9762 = !DISubroutineType(types: !9763)
!9763 = !{null, !2049, !3489}
!9764 = !DILocalVariable(name: "expr_p", arg: 1, scope: !9761, file: !3, line: 5979, type: !2049)
!9765 = !DILocation(line: 5979, column: 30, scope: !9761)
!9766 = !DILocalVariable(name: "pre_p", arg: 2, scope: !9761, file: !3, line: 5979, type: !3489)
!9767 = !DILocation(line: 5979, column: 50, scope: !9761)
!9768 = !DILocalVariable(name: "expr", scope: !9761, file: !3, line: 5981, type: !1686)
!9769 = !DILocation(line: 5981, column: 8, scope: !9761)
!9770 = !DILocation(line: 5981, column: 16, scope: !9761)
!9771 = !DILocation(line: 5981, column: 15, scope: !9761)
!9772 = !DILocalVariable(name: "g", scope: !9761, file: !3, line: 5982, type: !2014)
!9773 = !DILocation(line: 5982, column: 10, scope: !9761)
!9774 = !DILocalVariable(name: "body", scope: !9761, file: !3, line: 5983, type: !2004)
!9775 = !DILocation(line: 5983, column: 14, scope: !9761)
!9776 = !DILocalVariable(name: "gctx", scope: !9761, file: !3, line: 5984, type: !3221)
!9777 = !DILocation(line: 5984, column: 23, scope: !9761)
!9778 = !DILocation(line: 5986, column: 31, scope: !9761)
!9779 = !DILocation(line: 5986, column: 60, scope: !9761)
!9780 = !DILocation(line: 5987, column: 9, scope: !9761)
!9781 = !DILocation(line: 5986, column: 3, scope: !9761)
!9782 = !DILocation(line: 5991, column: 3, scope: !9761)
!9783 = !DILocation(line: 5993, column: 34, scope: !9761)
!9784 = !DILocation(line: 5993, column: 7, scope: !9761)
!9785 = !DILocation(line: 5993, column: 5, scope: !9761)
!9786 = !DILocation(line: 5994, column: 20, scope: !9787)
!9787 = distinct !DILexicalBlock(scope: !9761, file: !3, line: 5994, column: 7)
!9788 = !DILocation(line: 5994, column: 7, scope: !9787)
!9789 = !DILocation(line: 5994, column: 23, scope: !9787)
!9790 = !DILocation(line: 5994, column: 7, scope: !9761)
!9791 = !DILocation(line: 5995, column: 27, scope: !9787)
!9792 = !DILocation(line: 5995, column: 5, scope: !9787)
!9793 = !DILocation(line: 5997, column: 5, scope: !9787)
!9794 = !DILocation(line: 5999, column: 33, scope: !9761)
!9795 = !DILocation(line: 5999, column: 3, scope: !9761)
!9796 = !DILocation(line: 6001, column: 34, scope: !9761)
!9797 = !DILocation(line: 6002, column: 6, scope: !9761)
!9798 = !DILocation(line: 6001, column: 7, scope: !9761)
!9799 = !DILocation(line: 6001, column: 5, scope: !9761)
!9800 = !DILocation(line: 6004, column: 7, scope: !9801)
!9801 = distinct !DILexicalBlock(scope: !9761, file: !3, line: 6004, column: 7)
!9802 = !DILocation(line: 6004, column: 7, scope: !9761)
!9803 = !DILocation(line: 6005, column: 29, scope: !9801)
!9804 = !DILocation(line: 6005, column: 5, scope: !9801)
!9805 = !DILocation(line: 6006, column: 26, scope: !9761)
!9806 = !DILocation(line: 6006, column: 33, scope: !9761)
!9807 = !DILocation(line: 6006, column: 3, scope: !9761)
!9808 = !DILocation(line: 6007, column: 4, scope: !9761)
!9809 = !DILocation(line: 6007, column: 11, scope: !9761)
!9810 = !DILocation(line: 6008, column: 1, scope: !9761)
!9811 = distinct !DISubprogram(name: "gimplify_omp_task", scope: !3, file: !3, line: 6016, type: !9762, scopeLine: 6017, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!9812 = !DILocalVariable(name: "expr_p", arg: 1, scope: !9811, file: !3, line: 6016, type: !2049)
!9813 = !DILocation(line: 6016, column: 26, scope: !9811)
!9814 = !DILocalVariable(name: "pre_p", arg: 2, scope: !9811, file: !3, line: 6016, type: !3489)
!9815 = !DILocation(line: 6016, column: 46, scope: !9811)
!9816 = !DILocalVariable(name: "expr", scope: !9811, file: !3, line: 6018, type: !1686)
!9817 = !DILocation(line: 6018, column: 8, scope: !9811)
!9818 = !DILocation(line: 6018, column: 16, scope: !9811)
!9819 = !DILocation(line: 6018, column: 15, scope: !9811)
!9820 = !DILocalVariable(name: "g", scope: !9811, file: !3, line: 6019, type: !2014)
!9821 = !DILocation(line: 6019, column: 10, scope: !9811)
!9822 = !DILocalVariable(name: "body", scope: !9811, file: !3, line: 6020, type: !2004)
!9823 = !DILocation(line: 6020, column: 14, scope: !9811)
!9824 = !DILocalVariable(name: "gctx", scope: !9811, file: !3, line: 6021, type: !3221)
!9825 = !DILocation(line: 6021, column: 23, scope: !9811)
!9826 = !DILocation(line: 6023, column: 31, scope: !9811)
!9827 = !DILocation(line: 6023, column: 56, scope: !9811)
!9828 = !DILocation(line: 6023, column: 3, scope: !9811)
!9829 = !DILocation(line: 6025, column: 3, scope: !9811)
!9830 = !DILocation(line: 6027, column: 34, scope: !9811)
!9831 = !DILocation(line: 6027, column: 7, scope: !9811)
!9832 = !DILocation(line: 6027, column: 5, scope: !9811)
!9833 = !DILocation(line: 6028, column: 20, scope: !9834)
!9834 = distinct !DILexicalBlock(scope: !9811, file: !3, line: 6028, column: 7)
!9835 = !DILocation(line: 6028, column: 7, scope: !9834)
!9836 = !DILocation(line: 6028, column: 23, scope: !9834)
!9837 = !DILocation(line: 6028, column: 7, scope: !9811)
!9838 = !DILocation(line: 6029, column: 27, scope: !9834)
!9839 = !DILocation(line: 6029, column: 5, scope: !9834)
!9840 = !DILocation(line: 6031, column: 5, scope: !9834)
!9841 = !DILocation(line: 6033, column: 33, scope: !9811)
!9842 = !DILocation(line: 6033, column: 3, scope: !9811)
!9843 = !DILocation(line: 6035, column: 30, scope: !9811)
!9844 = !DILocation(line: 6036, column: 9, scope: !9811)
!9845 = !DILocation(line: 6035, column: 7, scope: !9811)
!9846 = !DILocation(line: 6035, column: 5, scope: !9811)
!9847 = !DILocation(line: 6039, column: 26, scope: !9811)
!9848 = !DILocation(line: 6039, column: 33, scope: !9811)
!9849 = !DILocation(line: 6039, column: 3, scope: !9811)
!9850 = !DILocation(line: 6040, column: 4, scope: !9811)
!9851 = !DILocation(line: 6040, column: 11, scope: !9811)
!9852 = !DILocation(line: 6041, column: 1, scope: !9811)
!9853 = distinct !DISubprogram(name: "gimplify_omp_for", scope: !3, file: !3, line: 6046, type: !7298, scopeLine: 6047, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!9854 = !DILocalVariable(name: "expr_p", arg: 1, scope: !9853, file: !3, line: 6046, type: !2049)
!9855 = !DILocation(line: 6046, column: 25, scope: !9853)
!9856 = !DILocalVariable(name: "pre_p", arg: 2, scope: !9853, file: !3, line: 6046, type: !3489)
!9857 = !DILocation(line: 6046, column: 45, scope: !9853)
!9858 = !DILocalVariable(name: "for_stmt", scope: !9853, file: !3, line: 6048, type: !1686)
!9859 = !DILocation(line: 6048, column: 8, scope: !9853)
!9860 = !DILocalVariable(name: "decl", scope: !9853, file: !3, line: 6048, type: !1686)
!9861 = !DILocation(line: 6048, column: 18, scope: !9853)
!9862 = !DILocalVariable(name: "var", scope: !9853, file: !3, line: 6048, type: !1686)
!9863 = !DILocation(line: 6048, column: 24, scope: !9853)
!9864 = !DILocalVariable(name: "t", scope: !9853, file: !3, line: 6048, type: !1686)
!9865 = !DILocation(line: 6048, column: 29, scope: !9853)
!9866 = !DILocalVariable(name: "ret", scope: !9853, file: !3, line: 6049, type: !1329)
!9867 = !DILocation(line: 6049, column: 24, scope: !9853)
!9868 = !DILocalVariable(name: "tret", scope: !9853, file: !3, line: 6050, type: !1329)
!9869 = !DILocation(line: 6050, column: 24, scope: !9853)
!9870 = !DILocalVariable(name: "gfor", scope: !9853, file: !3, line: 6051, type: !2014)
!9871 = !DILocation(line: 6051, column: 10, scope: !9853)
!9872 = !DILocalVariable(name: "for_body", scope: !9853, file: !3, line: 6052, type: !2004)
!9873 = !DILocation(line: 6052, column: 14, scope: !9853)
!9874 = !DILocalVariable(name: "for_pre_body", scope: !9853, file: !3, line: 6052, type: !2004)
!9875 = !DILocation(line: 6052, column: 24, scope: !9853)
!9876 = !DILocalVariable(name: "i", scope: !9853, file: !3, line: 6053, type: !1330)
!9877 = !DILocation(line: 6053, column: 7, scope: !9853)
!9878 = !DILocation(line: 6055, column: 15, scope: !9853)
!9879 = !DILocation(line: 6055, column: 14, scope: !9853)
!9880 = !DILocation(line: 6055, column: 12, scope: !9853)
!9881 = !DILocation(line: 6057, column: 31, scope: !9853)
!9882 = !DILocation(line: 6057, column: 59, scope: !9853)
!9883 = !DILocation(line: 6057, column: 3, scope: !9853)
!9884 = !DILocation(line: 6061, column: 16, scope: !9853)
!9885 = !DILocation(line: 6062, column: 21, scope: !9853)
!9886 = !DILocation(line: 6062, column: 3, scope: !9853)
!9887 = !DILocation(line: 6063, column: 3, scope: !9853)
!9888 = !DILocation(line: 6063, column: 31, scope: !9853)
!9889 = !DILocation(line: 6065, column: 14, scope: !9853)
!9890 = !DILocation(line: 6065, column: 12, scope: !9853)
!9891 = !DILocation(line: 6066, column: 3, scope: !9853)
!9892 = !DILocation(line: 6068, column: 3, scope: !9853)
!9893 = !DILocation(line: 6070, column: 10, scope: !9894)
!9894 = distinct !DILexicalBlock(scope: !9853, file: !3, line: 6070, column: 3)
!9895 = !DILocation(line: 6070, column: 8, scope: !9894)
!9896 = !DILocation(line: 6070, column: 15, scope: !9897)
!9897 = distinct !DILexicalBlock(scope: !9894, file: !3, line: 6070, column: 3)
!9898 = !DILocation(line: 6070, column: 19, scope: !9897)
!9899 = !DILocation(line: 6070, column: 17, scope: !9897)
!9900 = !DILocation(line: 6070, column: 3, scope: !9894)
!9901 = !DILocation(line: 6072, column: 11, scope: !9902)
!9902 = distinct !DILexicalBlock(scope: !9897, file: !3, line: 6071, column: 5)
!9903 = !DILocation(line: 6072, column: 9, scope: !9902)
!9904 = !DILocation(line: 6073, column: 7, scope: !9902)
!9905 = !DILocation(line: 6074, column: 14, scope: !9902)
!9906 = !DILocation(line: 6074, column: 12, scope: !9902)
!9907 = !DILocation(line: 6075, column: 7, scope: !9902)
!9908 = !DILocation(line: 6076, column: 7, scope: !9902)
!9909 = !DILocation(line: 6080, column: 27, scope: !9910)
!9910 = distinct !DILexicalBlock(scope: !9902, file: !3, line: 6080, column: 11)
!9911 = !DILocation(line: 6080, column: 46, scope: !9910)
!9912 = !DILocation(line: 6080, column: 11, scope: !9910)
!9913 = !DILocation(line: 6080, column: 11, scope: !9902)
!9914 = !DILocation(line: 6081, column: 23, scope: !9910)
!9915 = !DILocation(line: 6081, column: 42, scope: !9910)
!9916 = !DILocation(line: 6081, column: 2, scope: !9910)
!9917 = !DILocation(line: 6083, column: 20, scope: !9910)
!9918 = !DILocation(line: 6083, column: 39, scope: !9910)
!9919 = !DILocation(line: 6083, column: 2, scope: !9910)
!9920 = !DILocation(line: 6088, column: 27, scope: !9921)
!9921 = distinct !DILexicalBlock(scope: !9902, file: !3, line: 6088, column: 11)
!9922 = !DILocation(line: 6088, column: 12, scope: !9921)
!9923 = !DILocation(line: 6088, column: 11, scope: !9902)
!9924 = !DILocation(line: 6090, column: 26, scope: !9925)
!9925 = distinct !DILexicalBlock(scope: !9921, file: !3, line: 6089, column: 2)
!9926 = !DILocation(line: 6090, column: 54, scope: !9925)
!9927 = !DILocation(line: 6090, column: 44, scope: !9925)
!9928 = !DILocation(line: 6090, column: 10, scope: !9925)
!9929 = !DILocation(line: 6090, column: 8, scope: !9925)
!9930 = !DILocation(line: 6091, column: 26, scope: !9925)
!9931 = !DILocation(line: 6091, column: 4, scope: !9925)
!9932 = !DILocation(line: 6091, column: 24, scope: !9925)
!9933 = !DILocation(line: 6093, column: 38, scope: !9925)
!9934 = !DILocation(line: 6093, column: 4, scope: !9925)
!9935 = !DILocation(line: 6095, column: 22, scope: !9925)
!9936 = !DILocation(line: 6095, column: 41, scope: !9925)
!9937 = !DILocation(line: 6095, column: 4, scope: !9925)
!9938 = !DILocation(line: 6096, column: 2, scope: !9925)
!9939 = !DILocation(line: 6098, column: 8, scope: !9921)
!9940 = !DILocation(line: 6098, column: 6, scope: !9921)
!9941 = !DILocation(line: 6100, column: 30, scope: !9902)
!9942 = !DILocation(line: 6100, column: 14, scope: !9902)
!9943 = !DILocation(line: 6100, column: 12, scope: !9902)
!9944 = !DILocation(line: 6102, column: 13, scope: !9902)
!9945 = !DILocation(line: 6102, column: 11, scope: !9902)
!9946 = !DILocation(line: 6103, column: 11, scope: !9947)
!9947 = distinct !DILexicalBlock(scope: !9902, file: !3, line: 6103, column: 11)
!9948 = !DILocation(line: 6103, column: 15, scope: !9947)
!9949 = !DILocation(line: 6103, column: 11, scope: !9902)
!9950 = !DILocation(line: 6104, column: 9, scope: !9947)
!9951 = !DILocation(line: 6104, column: 2, scope: !9947)
!9952 = !DILocation(line: 6107, column: 11, scope: !9902)
!9953 = !DILocation(line: 6107, column: 9, scope: !9902)
!9954 = !DILocation(line: 6108, column: 7, scope: !9902)
!9955 = !DILocation(line: 6109, column: 7, scope: !9902)
!9956 = !DILocation(line: 6111, column: 30, scope: !9902)
!9957 = !DILocation(line: 6111, column: 14, scope: !9902)
!9958 = !DILocation(line: 6111, column: 12, scope: !9902)
!9959 = !DILocation(line: 6113, column: 13, scope: !9902)
!9960 = !DILocation(line: 6113, column: 11, scope: !9902)
!9961 = !DILocation(line: 6116, column: 11, scope: !9902)
!9962 = !DILocation(line: 6116, column: 9, scope: !9902)
!9963 = !DILocation(line: 6117, column: 15, scope: !9902)
!9964 = !DILocation(line: 6117, column: 7, scope: !9902)
!9965 = !DILocation(line: 6121, column: 23, scope: !9966)
!9966 = distinct !DILexicalBlock(scope: !9902, file: !3, line: 6118, column: 2)
!9967 = !DILocation(line: 6121, column: 8, scope: !9966)
!9968 = !DILocation(line: 6121, column: 6, scope: !9966)
!9969 = !DILocation(line: 6122, column: 8, scope: !9966)
!9970 = !DILocation(line: 6122, column: 6, scope: !9966)
!9971 = !DILocation(line: 6123, column: 8, scope: !9966)
!9972 = !DILocation(line: 6123, column: 6, scope: !9966)
!9973 = !DILocation(line: 6124, column: 48, scope: !9966)
!9974 = !DILocation(line: 6124, column: 4, scope: !9966)
!9975 = !DILocation(line: 6124, column: 46, scope: !9966)
!9976 = !DILocation(line: 6125, column: 4, scope: !9966)
!9977 = !DILocation(line: 6129, column: 23, scope: !9966)
!9978 = !DILocation(line: 6129, column: 8, scope: !9966)
!9979 = !DILocation(line: 6129, column: 6, scope: !9966)
!9980 = !DILocation(line: 6130, column: 8, scope: !9966)
!9981 = !DILocation(line: 6130, column: 6, scope: !9966)
!9982 = !DILocation(line: 6131, column: 8, scope: !9966)
!9983 = !DILocation(line: 6131, column: 6, scope: !9966)
!9984 = !DILocation(line: 6132, column: 48, scope: !9966)
!9985 = !DILocation(line: 6132, column: 4, scope: !9966)
!9986 = !DILocation(line: 6132, column: 46, scope: !9966)
!9987 = !DILocation(line: 6133, column: 4, scope: !9966)
!9988 = !DILocation(line: 6136, column: 4, scope: !9966)
!9989 = !DILocation(line: 6137, column: 26, scope: !9966)
!9990 = !DILocation(line: 6137, column: 4, scope: !9966)
!9991 = !DILocation(line: 6137, column: 24, scope: !9966)
!9992 = !DILocation(line: 6139, column: 8, scope: !9966)
!9993 = !DILocation(line: 6139, column: 6, scope: !9966)
!9994 = !DILocation(line: 6140, column: 12, scope: !9966)
!9995 = !DILocation(line: 6140, column: 4, scope: !9966)
!9996 = !DILocation(line: 6143, column: 12, scope: !9997)
!9997 = distinct !DILexicalBlock(scope: !9998, file: !3, line: 6143, column: 12)
!9998 = distinct !DILexicalBlock(scope: !9966, file: !3, line: 6141, column: 6)
!9999 = !DILocation(line: 6143, column: 35, scope: !9997)
!10000 = !DILocation(line: 6143, column: 32, scope: !9997)
!10001 = !DILocation(line: 6143, column: 12, scope: !9998)
!10002 = !DILocation(line: 6145, column: 27, scope: !10003)
!10003 = distinct !DILexicalBlock(scope: !9997, file: !3, line: 6144, column: 3)
!10004 = !DILocation(line: 6145, column: 5, scope: !10003)
!10005 = !DILocation(line: 6145, column: 25, scope: !10003)
!10006 = !DILocation(line: 6146, column: 27, scope: !10003)
!10007 = !DILocation(line: 6146, column: 5, scope: !10003)
!10008 = !DILocation(line: 6146, column: 25, scope: !10003)
!10009 = !DILocation(line: 6147, column: 5, scope: !10003)
!10010 = !DILocation(line: 6153, column: 8, scope: !9998)
!10011 = !DILocation(line: 6154, column: 30, scope: !9998)
!10012 = !DILocation(line: 6154, column: 8, scope: !9998)
!10013 = !DILocation(line: 6154, column: 28, scope: !9998)
!10014 = !DILocation(line: 6155, column: 8, scope: !9998)
!10015 = !DILocation(line: 6157, column: 8, scope: !9998)
!10016 = !DILocation(line: 6158, column: 6, scope: !9998)
!10017 = !DILocation(line: 6160, column: 27, scope: !9966)
!10018 = !DILocation(line: 6160, column: 11, scope: !9966)
!10019 = !DILocation(line: 6160, column: 9, scope: !9966)
!10020 = !DILocation(line: 6162, column: 10, scope: !9966)
!10021 = !DILocation(line: 6162, column: 8, scope: !9966)
!10022 = !DILocation(line: 6163, column: 4, scope: !9966)
!10023 = !DILocation(line: 6166, column: 4, scope: !9966)
!10024 = !DILocation(line: 6167, column: 2, scope: !9966)
!10025 = !DILocation(line: 6169, column: 11, scope: !10026)
!10026 = distinct !DILexicalBlock(scope: !9902, file: !3, line: 6169, column: 11)
!10027 = !DILocation(line: 6169, column: 18, scope: !10026)
!10028 = !DILocation(line: 6169, column: 15, scope: !10026)
!10029 = !DILocation(line: 6169, column: 23, scope: !10026)
!10030 = !DILocation(line: 6169, column: 26, scope: !10026)
!10031 = !DILocation(line: 6169, column: 68, scope: !10026)
!10032 = !DILocation(line: 6169, column: 11, scope: !9902)
!10033 = !DILocalVariable(name: "c", scope: !10034, file: !3, line: 6171, type: !1686)
!10034 = distinct !DILexicalBlock(scope: !10026, file: !3, line: 6170, column: 2)
!10035 = !DILocation(line: 6171, column: 9, scope: !10034)
!10036 = !DILocation(line: 6172, column: 13, scope: !10037)
!10037 = distinct !DILexicalBlock(scope: !10034, file: !3, line: 6172, column: 4)
!10038 = !DILocation(line: 6172, column: 11, scope: !10037)
!10039 = !DILocation(line: 6172, column: 9, scope: !10037)
!10040 = !DILocation(line: 6172, column: 41, scope: !10041)
!10041 = distinct !DILexicalBlock(scope: !10037, file: !3, line: 6172, column: 4)
!10042 = !DILocation(line: 6172, column: 4, scope: !10037)
!10043 = !DILocation(line: 6173, column: 10, scope: !10044)
!10044 = distinct !DILexicalBlock(scope: !10041, file: !3, line: 6173, column: 10)
!10045 = !DILocation(line: 6173, column: 30, scope: !10044)
!10046 = !DILocation(line: 6174, column: 3, scope: !10044)
!10047 = !DILocation(line: 6174, column: 6, scope: !10044)
!10048 = !DILocation(line: 6174, column: 29, scope: !10044)
!10049 = !DILocation(line: 6174, column: 26, scope: !10044)
!10050 = !DILocation(line: 6175, column: 3, scope: !10044)
!10051 = !DILocation(line: 6175, column: 6, scope: !10044)
!10052 = !DILocation(line: 6175, column: 44, scope: !10044)
!10053 = !DILocation(line: 6173, column: 10, scope: !10041)
!10054 = !DILocation(line: 6177, column: 7, scope: !10055)
!10055 = distinct !DILexicalBlock(scope: !10044, file: !3, line: 6176, column: 8)
!10056 = !DILocation(line: 6177, column: 5, scope: !10055)
!10057 = !DILocation(line: 6178, column: 3, scope: !10055)
!10058 = !DILocation(line: 6179, column: 3, scope: !10055)
!10059 = !DILocation(line: 6180, column: 7, scope: !10055)
!10060 = !DILocation(line: 6180, column: 5, scope: !10055)
!10061 = !DILocation(line: 6181, column: 3, scope: !10055)
!10062 = !DILocation(line: 6184, column: 3, scope: !10055)
!10063 = !DILocation(line: 6185, column: 7, scope: !10055)
!10064 = !DILocation(line: 6185, column: 5, scope: !10055)
!10065 = !DILocation(line: 6187, column: 20, scope: !10055)
!10066 = !DILocation(line: 6187, column: 26, scope: !10055)
!10067 = !DILocation(line: 6188, column: 7, scope: !10055)
!10068 = !DILocation(line: 6187, column: 3, scope: !10055)
!10069 = !DILocation(line: 6189, column: 6, scope: !10055)
!10070 = !DILocation(line: 6175, column: 47, scope: !10044)
!10071 = !DILocation(line: 6172, column: 49, scope: !10041)
!10072 = !DILocation(line: 6172, column: 47, scope: !10041)
!10073 = !DILocation(line: 6172, column: 4, scope: !10041)
!10074 = distinct !{!10074, !10042, !10075}
!10075 = !DILocation(line: 6189, column: 6, scope: !10037)
!10076 = !DILocation(line: 6190, column: 2, scope: !10034)
!10077 = !DILocation(line: 6191, column: 5, scope: !9902)
!10078 = !DILocation(line: 6070, column: 63, scope: !9897)
!10079 = !DILocation(line: 6070, column: 3, scope: !9897)
!10080 = distinct !{!10080, !9900, !10081}
!10081 = !DILocation(line: 6191, column: 5, scope: !9894)
!10082 = !DILocation(line: 6193, column: 21, scope: !9853)
!10083 = !DILocation(line: 6193, column: 3, scope: !9853)
!10084 = !DILocation(line: 6195, column: 33, scope: !9853)
!10085 = !DILocation(line: 6195, column: 3, scope: !9853)
!10086 = !DILocation(line: 6197, column: 32, scope: !9853)
!10087 = !DILocation(line: 6197, column: 42, scope: !9853)
!10088 = !DILocation(line: 6198, column: 11, scope: !9853)
!10089 = !DILocation(line: 6199, column: 11, scope: !9853)
!10090 = !DILocation(line: 6197, column: 10, scope: !9853)
!10091 = !DILocation(line: 6197, column: 8, scope: !9853)
!10092 = !DILocation(line: 6201, column: 10, scope: !10093)
!10093 = distinct !DILexicalBlock(scope: !9853, file: !3, line: 6201, column: 3)
!10094 = !DILocation(line: 6201, column: 8, scope: !10093)
!10095 = !DILocation(line: 6201, column: 15, scope: !10096)
!10096 = distinct !DILexicalBlock(scope: !10093, file: !3, line: 6201, column: 3)
!10097 = !DILocation(line: 6201, column: 19, scope: !10096)
!10098 = !DILocation(line: 6201, column: 17, scope: !10096)
!10099 = !DILocation(line: 6201, column: 3, scope: !10093)
!10100 = !DILocation(line: 6203, column: 11, scope: !10101)
!10101 = distinct !DILexicalBlock(scope: !10096, file: !3, line: 6202, column: 5)
!10102 = !DILocation(line: 6203, column: 9, scope: !10101)
!10103 = !DILocation(line: 6204, column: 33, scope: !10101)
!10104 = !DILocation(line: 6204, column: 39, scope: !10101)
!10105 = !DILocation(line: 6204, column: 42, scope: !10101)
!10106 = !DILocation(line: 6204, column: 7, scope: !10101)
!10107 = !DILocation(line: 6205, column: 35, scope: !10101)
!10108 = !DILocation(line: 6205, column: 41, scope: !10101)
!10109 = !DILocation(line: 6205, column: 44, scope: !10101)
!10110 = !DILocation(line: 6205, column: 7, scope: !10101)
!10111 = !DILocation(line: 6206, column: 11, scope: !10101)
!10112 = !DILocation(line: 6206, column: 9, scope: !10101)
!10113 = !DILocation(line: 6207, column: 32, scope: !10101)
!10114 = !DILocation(line: 6207, column: 38, scope: !10101)
!10115 = !DILocation(line: 6207, column: 41, scope: !10101)
!10116 = !DILocation(line: 6207, column: 7, scope: !10101)
!10117 = !DILocation(line: 6208, column: 33, scope: !10101)
!10118 = !DILocation(line: 6208, column: 39, scope: !10101)
!10119 = !DILocation(line: 6208, column: 42, scope: !10101)
!10120 = !DILocation(line: 6208, column: 7, scope: !10101)
!10121 = !DILocation(line: 6209, column: 11, scope: !10101)
!10122 = !DILocation(line: 6209, column: 9, scope: !10101)
!10123 = !DILocation(line: 6210, column: 32, scope: !10101)
!10124 = !DILocation(line: 6210, column: 38, scope: !10101)
!10125 = !DILocation(line: 6210, column: 41, scope: !10101)
!10126 = !DILocation(line: 6210, column: 7, scope: !10101)
!10127 = !DILocation(line: 6211, column: 5, scope: !10101)
!10128 = !DILocation(line: 6201, column: 63, scope: !10096)
!10129 = !DILocation(line: 6201, column: 3, scope: !10096)
!10130 = distinct !{!10130, !10099, !10131}
!10131 = !DILocation(line: 6211, column: 5, scope: !10093)
!10132 = !DILocation(line: 6213, column: 26, scope: !9853)
!10133 = !DILocation(line: 6213, column: 33, scope: !9853)
!10134 = !DILocation(line: 6213, column: 3, scope: !9853)
!10135 = !DILocation(line: 6214, column: 10, scope: !9853)
!10136 = !DILocation(line: 6214, column: 14, scope: !9853)
!10137 = !DILocation(line: 6214, column: 3, scope: !9853)
!10138 = !DILocation(line: 6215, column: 1, scope: !9853)
!10139 = distinct !DISubprogram(name: "gimplify_omp_workshare", scope: !3, file: !3, line: 6221, type: !9762, scopeLine: 6222, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!10140 = !DILocalVariable(name: "expr_p", arg: 1, scope: !10139, file: !3, line: 6221, type: !2049)
!10141 = !DILocation(line: 6221, column: 31, scope: !10139)
!10142 = !DILocalVariable(name: "pre_p", arg: 2, scope: !10139, file: !3, line: 6221, type: !3489)
!10143 = !DILocation(line: 6221, column: 51, scope: !10139)
!10144 = !DILocalVariable(name: "expr", scope: !10139, file: !3, line: 6223, type: !1686)
!10145 = !DILocation(line: 6223, column: 8, scope: !10139)
!10146 = !DILocation(line: 6223, column: 16, scope: !10139)
!10147 = !DILocation(line: 6223, column: 15, scope: !10139)
!10148 = !DILocalVariable(name: "stmt", scope: !10139, file: !3, line: 6224, type: !2014)
!10149 = !DILocation(line: 6224, column: 10, scope: !10139)
!10150 = !DILocalVariable(name: "body", scope: !10139, file: !3, line: 6225, type: !2004)
!10151 = !DILocation(line: 6225, column: 14, scope: !10139)
!10152 = !DILocation(line: 6227, column: 31, scope: !10139)
!10153 = !DILocation(line: 6227, column: 51, scope: !10139)
!10154 = !DILocation(line: 6227, column: 3, scope: !10139)
!10155 = !DILocation(line: 6228, column: 21, scope: !10139)
!10156 = !DILocation(line: 6228, column: 3, scope: !10139)
!10157 = !DILocation(line: 6229, column: 33, scope: !10139)
!10158 = !DILocation(line: 6229, column: 3, scope: !10139)
!10159 = !DILocation(line: 6231, column: 7, scope: !10160)
!10160 = distinct !DILexicalBlock(scope: !10139, file: !3, line: 6231, column: 7)
!10161 = !DILocation(line: 6231, column: 24, scope: !10160)
!10162 = !DILocation(line: 6231, column: 7, scope: !10139)
!10163 = !DILocation(line: 6232, column: 39, scope: !10160)
!10164 = !DILocation(line: 6232, column: 45, scope: !10160)
!10165 = !DILocation(line: 6232, column: 12, scope: !10160)
!10166 = !DILocation(line: 6232, column: 10, scope: !10160)
!10167 = !DILocation(line: 6232, column: 5, scope: !10160)
!10168 = !DILocation(line: 6233, column: 12, scope: !10169)
!10169 = distinct !DILexicalBlock(scope: !10160, file: !3, line: 6233, column: 12)
!10170 = !DILocation(line: 6233, column: 29, scope: !10169)
!10171 = !DILocation(line: 6233, column: 12, scope: !10160)
!10172 = !DILocation(line: 6234, column: 37, scope: !10169)
!10173 = !DILocation(line: 6234, column: 43, scope: !10169)
!10174 = !DILocation(line: 6234, column: 12, scope: !10169)
!10175 = !DILocation(line: 6234, column: 10, scope: !10169)
!10176 = !DILocation(line: 6234, column: 5, scope: !10169)
!10177 = !DILocation(line: 6236, column: 5, scope: !10169)
!10178 = !DILocation(line: 6238, column: 26, scope: !10139)
!10179 = !DILocation(line: 6238, column: 33, scope: !10139)
!10180 = !DILocation(line: 6238, column: 3, scope: !10139)
!10181 = !DILocation(line: 6239, column: 1, scope: !10139)
!10182 = distinct !DISubprogram(name: "gimplify_omp_atomic", scope: !3, file: !3, line: 6340, type: !7298, scopeLine: 6341, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!10183 = !DILocalVariable(name: "expr_p", arg: 1, scope: !10182, file: !3, line: 6340, type: !2049)
!10184 = !DILocation(line: 6340, column: 28, scope: !10182)
!10185 = !DILocalVariable(name: "pre_p", arg: 2, scope: !10182, file: !3, line: 6340, type: !3489)
!10186 = !DILocation(line: 6340, column: 48, scope: !10182)
!10187 = !DILocalVariable(name: "addr", scope: !10182, file: !3, line: 6342, type: !1686)
!10188 = !DILocation(line: 6342, column: 8, scope: !10182)
!10189 = !DILocation(line: 6342, column: 15, scope: !10182)
!10190 = !DILocalVariable(name: "rhs", scope: !10182, file: !3, line: 6343, type: !1686)
!10191 = !DILocation(line: 6343, column: 8, scope: !10182)
!10192 = !DILocation(line: 6343, column: 14, scope: !10182)
!10193 = !DILocalVariable(name: "type", scope: !10182, file: !3, line: 6344, type: !1686)
!10194 = !DILocation(line: 6344, column: 8, scope: !10182)
!10195 = !DILocation(line: 6344, column: 15, scope: !10182)
!10196 = !DILocalVariable(name: "tmp_load", scope: !10182, file: !3, line: 6345, type: !1686)
!10197 = !DILocation(line: 6345, column: 8, scope: !10182)
!10198 = !DILocation(line: 6347, column: 31, scope: !10182)
!10199 = !DILocation(line: 6347, column: 15, scope: !10182)
!10200 = !DILocation(line: 6347, column: 13, scope: !10182)
!10201 = !DILocation(line: 6348, column: 8, scope: !10202)
!10202 = distinct !DILexicalBlock(scope: !10182, file: !3, line: 6348, column: 8)
!10203 = !DILocation(line: 6348, column: 25, scope: !10202)
!10204 = !DILocation(line: 6348, column: 41, scope: !10202)
!10205 = !DILocation(line: 6348, column: 44, scope: !10202)
!10206 = !DILocation(line: 6348, column: 61, scope: !10202)
!10207 = !DILocation(line: 6348, column: 8, scope: !10182)
!10208 = !DILocation(line: 6349, column: 6, scope: !10202)
!10209 = !DILocation(line: 6349, column: 35, scope: !10202)
!10210 = !DILocation(line: 6350, column: 34, scope: !10211)
!10211 = distinct !DILexicalBlock(scope: !10182, file: !3, line: 6350, column: 8)
!10212 = !DILocation(line: 6350, column: 41, scope: !10211)
!10213 = !DILocation(line: 6350, column: 47, scope: !10211)
!10214 = !DILocation(line: 6350, column: 8, scope: !10211)
!10215 = !DILocation(line: 6350, column: 57, scope: !10211)
!10216 = !DILocation(line: 6350, column: 8, scope: !10182)
!10217 = !DILocation(line: 6351, column: 6, scope: !10211)
!10218 = !DILocation(line: 6353, column: 30, scope: !10219)
!10219 = distinct !DILexicalBlock(scope: !10182, file: !3, line: 6353, column: 8)
!10220 = !DILocation(line: 6353, column: 8, scope: !10219)
!10221 = !DILocation(line: 6354, column: 8, scope: !10219)
!10222 = !DILocation(line: 6353, column: 8, scope: !10182)
!10223 = !DILocation(line: 6355, column: 6, scope: !10219)
!10224 = !DILocation(line: 6357, column: 27, scope: !10182)
!10225 = !DILocation(line: 6357, column: 64, scope: !10182)
!10226 = !DILocation(line: 6357, column: 74, scope: !10182)
!10227 = !DILocation(line: 6357, column: 34, scope: !10182)
!10228 = !DILocation(line: 6357, column: 4, scope: !10182)
!10229 = !DILocation(line: 6358, column: 29, scope: !10230)
!10230 = distinct !DILexicalBlock(scope: !10182, file: !3, line: 6358, column: 8)
!10231 = !DILocation(line: 6358, column: 8, scope: !10230)
!10232 = !DILocation(line: 6359, column: 8, scope: !10230)
!10233 = !DILocation(line: 6358, column: 8, scope: !10182)
!10234 = !DILocation(line: 6360, column: 6, scope: !10230)
!10235 = !DILocation(line: 6361, column: 27, scope: !10182)
!10236 = !DILocation(line: 6361, column: 65, scope: !10182)
!10237 = !DILocation(line: 6361, column: 34, scope: !10182)
!10238 = !DILocation(line: 6361, column: 4, scope: !10182)
!10239 = !DILocation(line: 6362, column: 5, scope: !10182)
!10240 = !DILocation(line: 6362, column: 12, scope: !10182)
!10241 = !DILocation(line: 6364, column: 4, scope: !10182)
!10242 = !DILocation(line: 6365, column: 1, scope: !10182)
!10243 = distinct !DISubprogram(name: "gimplify_scalar_mode_aggregate_compare", scope: !3, file: !3, line: 4582, type: !7728, scopeLine: 4583, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!10244 = !DILocalVariable(name: "expr_p", arg: 1, scope: !10243, file: !3, line: 4582, type: !2049)
!10245 = !DILocation(line: 4582, column: 47, scope: !10243)
!10246 = !DILocalVariable(name: "loc", scope: !10243, file: !3, line: 4584, type: !1812)
!10247 = !DILocation(line: 4584, column: 14, scope: !10243)
!10248 = !DILocation(line: 4584, column: 20, scope: !10243)
!10249 = !DILocalVariable(name: "op0", scope: !10243, file: !3, line: 4585, type: !1686)
!10250 = !DILocation(line: 4585, column: 8, scope: !10243)
!10251 = !DILocation(line: 4585, column: 14, scope: !10243)
!10252 = !DILocalVariable(name: "op1", scope: !10243, file: !3, line: 4586, type: !1686)
!10253 = !DILocation(line: 4586, column: 8, scope: !10243)
!10254 = !DILocation(line: 4586, column: 14, scope: !10243)
!10255 = !DILocalVariable(name: "type", scope: !10243, file: !3, line: 4588, type: !1686)
!10256 = !DILocation(line: 4588, column: 8, scope: !10243)
!10257 = !DILocation(line: 4588, column: 15, scope: !10243)
!10258 = !DILocalVariable(name: "scalar_type", scope: !10243, file: !3, line: 4589, type: !1686)
!10259 = !DILocation(line: 4589, column: 8, scope: !10243)
!10260 = !DILocation(line: 4589, column: 39, scope: !10243)
!10261 = !DILocation(line: 4589, column: 54, scope: !10243)
!10262 = !DILocation(line: 4589, column: 22, scope: !10243)
!10263 = !DILocation(line: 4591, column: 9, scope: !10243)
!10264 = !DILocation(line: 4591, column: 7, scope: !10243)
!10265 = !DILocation(line: 4592, column: 9, scope: !10243)
!10266 = !DILocation(line: 4592, column: 7, scope: !10243)
!10267 = !DILocation(line: 4595, column: 7, scope: !10243)
!10268 = !DILocation(line: 4594, column: 4, scope: !10243)
!10269 = !DILocation(line: 4595, column: 5, scope: !10243)
!10270 = !DILocation(line: 4597, column: 3, scope: !10243)
!10271 = distinct !DISubprogram(name: "gimplify_variable_sized_compare", scope: !3, file: !3, line: 4558, type: !7728, scopeLine: 4559, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!10272 = !DILocalVariable(name: "expr_p", arg: 1, scope: !10271, file: !3, line: 4558, type: !2049)
!10273 = !DILocation(line: 4558, column: 40, scope: !10271)
!10274 = !DILocalVariable(name: "op0", scope: !10271, file: !3, line: 4560, type: !1686)
!10275 = !DILocation(line: 4560, column: 8, scope: !10271)
!10276 = !DILocation(line: 4560, column: 14, scope: !10271)
!10277 = !DILocalVariable(name: "op1", scope: !10271, file: !3, line: 4561, type: !1686)
!10278 = !DILocation(line: 4561, column: 8, scope: !10271)
!10279 = !DILocation(line: 4561, column: 14, scope: !10271)
!10280 = !DILocalVariable(name: "t", scope: !10271, file: !3, line: 4562, type: !1686)
!10281 = !DILocation(line: 4562, column: 8, scope: !10271)
!10282 = !DILocalVariable(name: "arg", scope: !10271, file: !3, line: 4562, type: !1686)
!10283 = !DILocation(line: 4562, column: 11, scope: !10271)
!10284 = !DILocalVariable(name: "dest", scope: !10271, file: !3, line: 4562, type: !1686)
!10285 = !DILocation(line: 4562, column: 16, scope: !10271)
!10286 = !DILocalVariable(name: "src", scope: !10271, file: !3, line: 4562, type: !1686)
!10287 = !DILocation(line: 4562, column: 22, scope: !10271)
!10288 = !DILocalVariable(name: "loc", scope: !10271, file: !3, line: 4563, type: !1812)
!10289 = !DILocation(line: 4563, column: 14, scope: !10271)
!10290 = !DILocation(line: 4563, column: 20, scope: !10271)
!10291 = !DILocation(line: 4565, column: 9, scope: !10271)
!10292 = !DILocation(line: 4565, column: 7, scope: !10271)
!10293 = !DILocation(line: 4566, column: 23, scope: !10271)
!10294 = !DILocation(line: 4566, column: 9, scope: !10271)
!10295 = !DILocation(line: 4566, column: 7, scope: !10271)
!10296 = !DILocation(line: 4567, column: 9, scope: !10271)
!10297 = !DILocation(line: 4567, column: 7, scope: !10271)
!10298 = !DILocation(line: 4568, column: 35, scope: !10271)
!10299 = !DILocation(line: 4568, column: 40, scope: !10271)
!10300 = !DILocation(line: 4568, column: 9, scope: !10271)
!10301 = !DILocation(line: 4568, column: 7, scope: !10271)
!10302 = !DILocation(line: 4569, column: 36, scope: !10271)
!10303 = !DILocation(line: 4569, column: 41, scope: !10271)
!10304 = !DILocation(line: 4569, column: 10, scope: !10271)
!10305 = !DILocation(line: 4569, column: 8, scope: !10271)
!10306 = !DILocation(line: 4570, column: 7, scope: !10271)
!10307 = !DILocation(line: 4570, column: 5, scope: !10271)
!10308 = !DILocation(line: 4571, column: 28, scope: !10271)
!10309 = !DILocation(line: 4571, column: 33, scope: !10271)
!10310 = !DILocation(line: 4571, column: 39, scope: !10271)
!10311 = !DILocation(line: 4571, column: 45, scope: !10271)
!10312 = !DILocation(line: 4571, column: 50, scope: !10271)
!10313 = !DILocation(line: 4571, column: 7, scope: !10271)
!10314 = !DILocation(line: 4571, column: 5, scope: !10271)
!10315 = !DILocation(line: 4573, column: 7, scope: !10271)
!10316 = !DILocation(line: 4572, column: 4, scope: !10271)
!10317 = !DILocation(line: 4573, column: 5, scope: !10271)
!10318 = !DILocation(line: 4575, column: 3, scope: !10271)
!10319 = distinct !DISubprogram(name: "gimplify_seq_add_seq", scope: !3, file: !3, line: 184, type: !10320, scopeLine: 185, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!10320 = !DISubroutineType(types: !10321)
!10321 = !{null, !3489, !2004}
!10322 = !DILocalVariable(name: "dst_p", arg: 1, scope: !10319, file: !3, line: 184, type: !3489)
!10323 = !DILocation(line: 184, column: 35, scope: !10319)
!10324 = !DILocalVariable(name: "src", arg: 2, scope: !10319, file: !3, line: 184, type: !2004)
!10325 = !DILocation(line: 184, column: 53, scope: !10319)
!10326 = !DILocalVariable(name: "si", scope: !10319, file: !3, line: 186, type: !4033)
!10327 = !DILocation(line: 186, column: 24, scope: !10319)
!10328 = !DILocation(line: 188, column: 7, scope: !10329)
!10329 = distinct !DILexicalBlock(scope: !10319, file: !3, line: 188, column: 7)
!10330 = !DILocation(line: 188, column: 11, scope: !10329)
!10331 = !DILocation(line: 188, column: 7, scope: !10319)
!10332 = !DILocation(line: 189, column: 5, scope: !10329)
!10333 = !DILocation(line: 191, column: 8, scope: !10334)
!10334 = distinct !DILexicalBlock(scope: !10319, file: !3, line: 191, column: 7)
!10335 = !DILocation(line: 191, column: 7, scope: !10334)
!10336 = !DILocation(line: 191, column: 14, scope: !10334)
!10337 = !DILocation(line: 191, column: 7, scope: !10319)
!10338 = !DILocation(line: 192, column: 14, scope: !10334)
!10339 = !DILocation(line: 192, column: 6, scope: !10334)
!10340 = !DILocation(line: 192, column: 12, scope: !10334)
!10341 = !DILocation(line: 192, column: 5, scope: !10334)
!10342 = !DILocation(line: 194, column: 19, scope: !10319)
!10343 = !DILocation(line: 194, column: 18, scope: !10319)
!10344 = !DILocation(line: 194, column: 8, scope: !10319)
!10345 = !DILocation(line: 195, column: 45, scope: !10319)
!10346 = !DILocation(line: 195, column: 3, scope: !10319)
!10347 = !DILocation(line: 196, column: 1, scope: !10319)
!10348 = distinct !DISubprogram(name: "annotate_all_with_location_after", scope: !3, file: !3, line: 818, type: !10349, scopeLine: 820, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!10349 = !DISubroutineType(types: !10350)
!10350 = !{null, !2004, !4033, !1812}
!10351 = !DILocalVariable(name: "seq", arg: 1, scope: !10348, file: !3, line: 818, type: !2004)
!10352 = !DILocation(line: 818, column: 46, scope: !10348)
!10353 = !DILocalVariable(name: "gsi", arg: 2, scope: !10348, file: !3, line: 818, type: !4033)
!10354 = !DILocation(line: 818, column: 72, scope: !10348)
!10355 = !DILocalVariable(name: "location", arg: 3, scope: !10348, file: !3, line: 819, type: !1812)
!10356 = !DILocation(line: 819, column: 18, scope: !10348)
!10357 = !DILocation(line: 821, column: 7, scope: !10358)
!10358 = distinct !DILexicalBlock(scope: !10348, file: !3, line: 821, column: 7)
!10359 = !DILocation(line: 821, column: 7, scope: !10348)
!10360 = !DILocation(line: 822, column: 22, scope: !10358)
!10361 = !DILocation(line: 822, column: 11, scope: !10358)
!10362 = !DILocation(line: 822, column: 5, scope: !10358)
!10363 = !DILocation(line: 824, column: 5, scope: !10358)
!10364 = !DILocation(line: 826, column: 3, scope: !10348)
!10365 = !DILocation(line: 826, column: 11, scope: !10366)
!10366 = distinct !DILexicalBlock(scope: !10367, file: !3, line: 826, column: 3)
!10367 = distinct !DILexicalBlock(scope: !10348, file: !3, line: 826, column: 3)
!10368 = !DILocation(line: 826, column: 10, scope: !10366)
!10369 = !DILocation(line: 826, column: 3, scope: !10367)
!10370 = !DILocation(line: 827, column: 33, scope: !10366)
!10371 = !DILocation(line: 827, column: 49, scope: !10366)
!10372 = !DILocation(line: 827, column: 5, scope: !10366)
!10373 = !DILocation(line: 826, column: 28, scope: !10366)
!10374 = !DILocation(line: 826, column: 3, scope: !10366)
!10375 = distinct !{!10375, !10369, !10376}
!10376 = !DILocation(line: 827, column: 57, scope: !10367)
!10377 = !DILocation(line: 828, column: 1, scope: !10348)
!10378 = distinct !DISubprogram(name: "gimplify_type_sizes", scope: !3, file: !3, line: 7342, type: !3487, scopeLine: 7343, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!10379 = !DILocalVariable(name: "type", arg: 1, scope: !10378, file: !3, line: 7342, type: !1686)
!10380 = !DILocation(line: 7342, column: 27, scope: !10378)
!10381 = !DILocalVariable(name: "list_p", arg: 2, scope: !10378, file: !3, line: 7342, type: !3489)
!10382 = !DILocation(line: 7342, column: 45, scope: !10378)
!10383 = !DILocalVariable(name: "field", scope: !10378, file: !3, line: 7344, type: !1686)
!10384 = !DILocation(line: 7344, column: 8, scope: !10378)
!10385 = !DILocalVariable(name: "t", scope: !10378, file: !3, line: 7344, type: !1686)
!10386 = !DILocation(line: 7344, column: 15, scope: !10378)
!10387 = !DILocation(line: 7346, column: 7, scope: !10388)
!10388 = distinct !DILexicalBlock(scope: !10378, file: !3, line: 7346, column: 7)
!10389 = !DILocation(line: 7346, column: 12, scope: !10388)
!10390 = !DILocation(line: 7346, column: 20, scope: !10388)
!10391 = !DILocation(line: 7346, column: 23, scope: !10388)
!10392 = !DILocation(line: 7346, column: 31, scope: !10388)
!10393 = !DILocation(line: 7346, column: 28, scope: !10388)
!10394 = !DILocation(line: 7346, column: 7, scope: !10378)
!10395 = !DILocation(line: 7347, column: 5, scope: !10388)
!10396 = !DILocation(line: 7350, column: 10, scope: !10378)
!10397 = !DILocation(line: 7350, column: 8, scope: !10378)
!10398 = !DILocation(line: 7353, column: 7, scope: !10399)
!10399 = distinct !DILexicalBlock(scope: !10378, file: !3, line: 7353, column: 7)
!10400 = !DILocation(line: 7353, column: 7, scope: !10378)
!10401 = !DILocation(line: 7354, column: 5, scope: !10399)
!10402 = !DILocation(line: 7356, column: 3, scope: !10378)
!10403 = !DILocation(line: 7356, column: 32, scope: !10378)
!10404 = !DILocation(line: 7358, column: 11, scope: !10378)
!10405 = !DILocation(line: 7358, column: 3, scope: !10378)
!10406 = !DILocation(line: 7365, column: 30, scope: !10407)
!10407 = distinct !DILexicalBlock(scope: !10378, file: !3, line: 7359, column: 5)
!10408 = !DILocation(line: 7365, column: 53, scope: !10407)
!10409 = !DILocation(line: 7365, column: 7, scope: !10407)
!10410 = !DILocation(line: 7366, column: 30, scope: !10407)
!10411 = !DILocation(line: 7366, column: 53, scope: !10407)
!10412 = !DILocation(line: 7366, column: 7, scope: !10407)
!10413 = !DILocation(line: 7368, column: 16, scope: !10414)
!10414 = distinct !DILexicalBlock(scope: !10407, file: !3, line: 7368, column: 7)
!10415 = !DILocation(line: 7368, column: 14, scope: !10414)
!10416 = !DILocation(line: 7368, column: 12, scope: !10414)
!10417 = !DILocation(line: 7368, column: 42, scope: !10418)
!10418 = distinct !DILexicalBlock(scope: !10414, file: !3, line: 7368, column: 7)
!10419 = !DILocation(line: 7368, column: 7, scope: !10414)
!10420 = !DILocation(line: 7370, column: 25, scope: !10421)
!10421 = distinct !DILexicalBlock(scope: !10418, file: !3, line: 7369, column: 2)
!10422 = !DILocation(line: 7370, column: 4, scope: !10421)
!10423 = !DILocation(line: 7370, column: 23, scope: !10421)
!10424 = !DILocation(line: 7371, column: 25, scope: !10421)
!10425 = !DILocation(line: 7371, column: 4, scope: !10421)
!10426 = !DILocation(line: 7371, column: 23, scope: !10421)
!10427 = !DILocation(line: 7372, column: 2, scope: !10421)
!10428 = !DILocation(line: 7368, column: 49, scope: !10418)
!10429 = !DILocation(line: 7368, column: 47, scope: !10418)
!10430 = !DILocation(line: 7368, column: 7, scope: !10418)
!10431 = distinct !{!10431, !10419, !10432}
!10432 = !DILocation(line: 7372, column: 2, scope: !10414)
!10433 = !DILocation(line: 7373, column: 7, scope: !10407)
!10434 = !DILocation(line: 7377, column: 28, scope: !10407)
!10435 = !DILocation(line: 7377, column: 46, scope: !10407)
!10436 = !DILocation(line: 7377, column: 7, scope: !10407)
!10437 = !DILocation(line: 7378, column: 28, scope: !10407)
!10438 = !DILocation(line: 7378, column: 48, scope: !10407)
!10439 = !DILocation(line: 7378, column: 7, scope: !10407)
!10440 = !DILocation(line: 7382, column: 11, scope: !10441)
!10441 = distinct !DILexicalBlock(scope: !10407, file: !3, line: 7382, column: 11)
!10442 = !DILocation(line: 7383, column: 4, scope: !10441)
!10443 = !DILocation(line: 7383, column: 7, scope: !10441)
!10444 = !DILocation(line: 7382, column: 11, scope: !10407)
!10445 = !DILocation(line: 7385, column: 8, scope: !10446)
!10446 = distinct !DILexicalBlock(scope: !10441, file: !3, line: 7384, column: 2)
!10447 = !DILocation(line: 7385, column: 6, scope: !10446)
!10448 = !DILocation(line: 7386, column: 8, scope: !10449)
!10449 = distinct !DILexicalBlock(scope: !10446, file: !3, line: 7386, column: 8)
!10450 = !DILocation(line: 7386, column: 10, scope: !10449)
!10451 = !DILocation(line: 7386, column: 13, scope: !10449)
!10452 = !DILocation(line: 7386, column: 27, scope: !10449)
!10453 = !DILocation(line: 7386, column: 39, scope: !10449)
!10454 = !DILocation(line: 7386, column: 42, scope: !10449)
!10455 = !DILocation(line: 7386, column: 8, scope: !10446)
!10456 = !DILocation(line: 7387, column: 6, scope: !10449)
!10457 = !DILocation(line: 7387, column: 25, scope: !10449)
!10458 = !DILocation(line: 7388, column: 8, scope: !10446)
!10459 = !DILocation(line: 7388, column: 6, scope: !10446)
!10460 = !DILocation(line: 7389, column: 8, scope: !10461)
!10461 = distinct !DILexicalBlock(scope: !10446, file: !3, line: 7389, column: 8)
!10462 = !DILocation(line: 7389, column: 10, scope: !10461)
!10463 = !DILocation(line: 7389, column: 13, scope: !10461)
!10464 = !DILocation(line: 7389, column: 27, scope: !10461)
!10465 = !DILocation(line: 7389, column: 39, scope: !10461)
!10466 = !DILocation(line: 7389, column: 42, scope: !10461)
!10467 = !DILocation(line: 7389, column: 8, scope: !10446)
!10468 = !DILocation(line: 7390, column: 6, scope: !10461)
!10469 = !DILocation(line: 7390, column: 25, scope: !10461)
!10470 = !DILocation(line: 7391, column: 2, scope: !10446)
!10471 = !DILocation(line: 7392, column: 7, scope: !10407)
!10472 = !DILocation(line: 7397, column: 20, scope: !10473)
!10473 = distinct !DILexicalBlock(scope: !10407, file: !3, line: 7397, column: 7)
!10474 = !DILocation(line: 7397, column: 18, scope: !10473)
!10475 = !DILocation(line: 7397, column: 12, scope: !10473)
!10476 = !DILocation(line: 7397, column: 40, scope: !10477)
!10477 = distinct !DILexicalBlock(scope: !10473, file: !3, line: 7397, column: 7)
!10478 = !DILocation(line: 7397, column: 7, scope: !10473)
!10479 = !DILocation(line: 7398, column: 6, scope: !10480)
!10480 = distinct !DILexicalBlock(scope: !10477, file: !3, line: 7398, column: 6)
!10481 = !DILocation(line: 7398, column: 24, scope: !10480)
!10482 = !DILocation(line: 7398, column: 6, scope: !10477)
!10483 = !DILocation(line: 7400, column: 29, scope: !10484)
!10484 = distinct !DILexicalBlock(scope: !10480, file: !3, line: 7399, column: 4)
!10485 = !DILocation(line: 7400, column: 56, scope: !10484)
!10486 = !DILocation(line: 7400, column: 6, scope: !10484)
!10487 = !DILocation(line: 7401, column: 29, scope: !10484)
!10488 = !DILocation(line: 7401, column: 48, scope: !10484)
!10489 = !DILocation(line: 7401, column: 6, scope: !10484)
!10490 = !DILocation(line: 7402, column: 29, scope: !10484)
!10491 = !DILocation(line: 7402, column: 53, scope: !10484)
!10492 = !DILocation(line: 7402, column: 6, scope: !10484)
!10493 = !DILocation(line: 7403, column: 27, scope: !10484)
!10494 = !DILocation(line: 7403, column: 46, scope: !10484)
!10495 = !DILocation(line: 7403, column: 6, scope: !10484)
!10496 = !DILocation(line: 7404, column: 4, scope: !10484)
!10497 = !DILocation(line: 7398, column: 27, scope: !10480)
!10498 = !DILocation(line: 7397, column: 55, scope: !10477)
!10499 = !DILocation(line: 7397, column: 53, scope: !10477)
!10500 = !DILocation(line: 7397, column: 7, scope: !10477)
!10501 = distinct !{!10501, !10478, !10502}
!10502 = !DILocation(line: 7404, column: 4, scope: !10473)
!10503 = !DILocation(line: 7405, column: 7, scope: !10407)
!10504 = !DILocation(line: 7421, column: 7, scope: !10407)
!10505 = !DILocation(line: 7424, column: 7, scope: !10407)
!10506 = !DILocation(line: 7427, column: 26, scope: !10378)
!10507 = !DILocation(line: 7427, column: 44, scope: !10378)
!10508 = !DILocation(line: 7427, column: 3, scope: !10378)
!10509 = !DILocation(line: 7428, column: 26, scope: !10378)
!10510 = !DILocation(line: 7428, column: 49, scope: !10378)
!10511 = !DILocation(line: 7428, column: 3, scope: !10378)
!10512 = !DILocation(line: 7430, column: 12, scope: !10513)
!10513 = distinct !DILexicalBlock(scope: !10378, file: !3, line: 7430, column: 3)
!10514 = !DILocation(line: 7430, column: 10, scope: !10513)
!10515 = !DILocation(line: 7430, column: 8, scope: !10513)
!10516 = !DILocation(line: 7430, column: 38, scope: !10517)
!10517 = distinct !DILexicalBlock(scope: !10513, file: !3, line: 7430, column: 3)
!10518 = !DILocation(line: 7430, column: 3, scope: !10513)
!10519 = !DILocation(line: 7432, column: 23, scope: !10520)
!10520 = distinct !DILexicalBlock(scope: !10517, file: !3, line: 7431, column: 5)
!10521 = !DILocation(line: 7432, column: 7, scope: !10520)
!10522 = !DILocation(line: 7432, column: 21, scope: !10520)
!10523 = !DILocation(line: 7433, column: 28, scope: !10520)
!10524 = !DILocation(line: 7433, column: 7, scope: !10520)
!10525 = !DILocation(line: 7433, column: 26, scope: !10520)
!10526 = !DILocation(line: 7434, column: 7, scope: !10520)
!10527 = !DILocation(line: 7434, column: 33, scope: !10520)
!10528 = !DILocation(line: 7435, column: 5, scope: !10520)
!10529 = !DILocation(line: 7430, column: 45, scope: !10517)
!10530 = !DILocation(line: 7430, column: 43, scope: !10517)
!10531 = !DILocation(line: 7430, column: 3, scope: !10517)
!10532 = distinct !{!10532, !10518, !10533}
!10533 = !DILocation(line: 7435, column: 5, scope: !10513)
!10534 = !DILocation(line: 7436, column: 1, scope: !10378)
!10535 = distinct !DISubprogram(name: "gimplify_one_sizepos", scope: !3, file: !3, line: 7443, type: !9762, scopeLine: 7444, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!10536 = !DILocalVariable(name: "expr_p", arg: 1, scope: !10535, file: !3, line: 7443, type: !2049)
!10537 = !DILocation(line: 7443, column: 29, scope: !10535)
!10538 = !DILocalVariable(name: "stmt_p", arg: 2, scope: !10535, file: !3, line: 7443, type: !3489)
!10539 = !DILocation(line: 7443, column: 49, scope: !10535)
!10540 = !DILocalVariable(name: "type", scope: !10535, file: !3, line: 7445, type: !1686)
!10541 = !DILocation(line: 7445, column: 8, scope: !10535)
!10542 = !DILocalVariable(name: "expr", scope: !10535, file: !3, line: 7445, type: !1686)
!10543 = !DILocation(line: 7445, column: 14, scope: !10535)
!10544 = !DILocation(line: 7445, column: 22, scope: !10535)
!10545 = !DILocation(line: 7445, column: 21, scope: !10535)
!10546 = !DILocation(line: 7452, column: 7, scope: !10547)
!10547 = distinct !DILexicalBlock(scope: !10535, file: !3, line: 7452, column: 7)
!10548 = !DILocation(line: 7452, column: 12, scope: !10547)
!10549 = !DILocation(line: 7452, column: 25, scope: !10547)
!10550 = !DILocation(line: 7452, column: 28, scope: !10547)
!10551 = !DILocation(line: 7453, column: 7, scope: !10547)
!10552 = !DILocation(line: 7453, column: 10, scope: !10547)
!10553 = !DILocation(line: 7453, column: 27, scope: !10547)
!10554 = !DILocation(line: 7454, column: 7, scope: !10547)
!10555 = !DILocation(line: 7454, column: 10, scope: !10547)
!10556 = !DILocation(line: 7452, column: 7, scope: !10535)
!10557 = !DILocation(line: 7455, column: 5, scope: !10547)
!10558 = !DILocation(line: 7457, column: 10, scope: !10535)
!10559 = !DILocation(line: 7457, column: 8, scope: !10535)
!10560 = !DILocation(line: 7458, column: 27, scope: !10535)
!10561 = !DILocation(line: 7458, column: 13, scope: !10535)
!10562 = !DILocation(line: 7458, column: 4, scope: !10535)
!10563 = !DILocation(line: 7458, column: 11, scope: !10535)
!10564 = !DILocation(line: 7460, column: 18, scope: !10535)
!10565 = !DILocation(line: 7460, column: 26, scope: !10535)
!10566 = !DILocation(line: 7460, column: 3, scope: !10535)
!10567 = !DILocation(line: 7461, column: 11, scope: !10535)
!10568 = !DILocation(line: 7461, column: 10, scope: !10535)
!10569 = !DILocation(line: 7461, column: 8, scope: !10535)
!10570 = !DILocation(line: 7469, column: 7, scope: !10571)
!10571 = distinct !DILexicalBlock(scope: !10535, file: !3, line: 7469, column: 7)
!10572 = !DILocation(line: 7469, column: 27, scope: !10571)
!10573 = !DILocation(line: 7469, column: 24, scope: !10571)
!10574 = !DILocation(line: 7470, column: 7, scope: !10571)
!10575 = !DILocation(line: 7470, column: 10, scope: !10571)
!10576 = !DILocation(line: 7470, column: 27, scope: !10571)
!10577 = !DILocation(line: 7471, column: 7, scope: !10571)
!10578 = !DILocation(line: 7471, column: 10, scope: !10571)
!10579 = !DILocation(line: 7469, column: 7, scope: !10535)
!10580 = !DILocalVariable(name: "tmp", scope: !10581, file: !3, line: 7473, type: !1686)
!10581 = distinct !DILexicalBlock(scope: !10571, file: !3, line: 7472, column: 5)
!10582 = !DILocation(line: 7473, column: 12, scope: !10581)
!10583 = !DILocalVariable(name: "stmt", scope: !10581, file: !3, line: 7474, type: !2014)
!10584 = !DILocation(line: 7474, column: 14, scope: !10581)
!10585 = !DILocation(line: 7476, column: 33, scope: !10581)
!10586 = !DILocation(line: 7476, column: 17, scope: !10581)
!10587 = !DILocation(line: 7476, column: 8, scope: !10581)
!10588 = !DILocation(line: 7476, column: 15, scope: !10581)
!10589 = !DILocation(line: 7477, column: 13, scope: !10581)
!10590 = !DILocation(line: 7477, column: 11, scope: !10581)
!10591 = !DILocation(line: 7478, column: 32, scope: !10581)
!10592 = !DILocation(line: 7478, column: 31, scope: !10581)
!10593 = !DILocation(line: 7478, column: 40, scope: !10581)
!10594 = !DILocation(line: 7478, column: 45, scope: !10581)
!10595 = !DILocation(line: 7478, column: 14, scope: !10581)
!10596 = !DILocation(line: 7478, column: 12, scope: !10581)
!10597 = !DILocation(line: 7479, column: 11, scope: !10598)
!10598 = distinct !DILexicalBlock(scope: !10581, file: !3, line: 7479, column: 11)
!10599 = !DILocation(line: 7479, column: 11, scope: !10581)
!10600 = !DILocation(line: 7480, column: 23, scope: !10598)
!10601 = !DILocation(line: 7480, column: 29, scope: !10598)
!10602 = !DILocation(line: 7480, column: 2, scope: !10598)
!10603 = !DILocation(line: 7482, column: 23, scope: !10598)
!10604 = !DILocation(line: 7482, column: 29, scope: !10598)
!10605 = !DILocation(line: 7482, column: 2, scope: !10598)
!10606 = !DILocation(line: 7483, column: 5, scope: !10581)
!10607 = !DILocation(line: 7484, column: 1, scope: !10535)
!10608 = distinct !DISubprogram(name: "gimple_set_location", scope: !385, file: !385, line: 1156, type: !4123, scopeLine: 1157, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!10609 = !DILocalVariable(name: "g", arg: 1, scope: !10608, file: !385, line: 1156, type: !2014)
!10610 = !DILocation(line: 1156, column: 29, scope: !10608)
!10611 = !DILocalVariable(name: "location", arg: 2, scope: !10608, file: !385, line: 1156, type: !1812)
!10612 = !DILocation(line: 1156, column: 43, scope: !10608)
!10613 = !DILocation(line: 1158, column: 24, scope: !10608)
!10614 = !DILocation(line: 1158, column: 3, scope: !10608)
!10615 = !DILocation(line: 1158, column: 6, scope: !10608)
!10616 = !DILocation(line: 1158, column: 13, scope: !10608)
!10617 = !DILocation(line: 1158, column: 22, scope: !10608)
!10618 = !DILocation(line: 1159, column: 1, scope: !10608)
!10619 = distinct !DISubprogram(name: "gimplify_body", scope: !3, file: !3, line: 7493, type: !10620, scopeLine: 7494, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!10620 = !DISubroutineType(types: !10621)
!10621 = !{!2014, !2049, !1686, !1804}
!10622 = !DILocalVariable(name: "body_p", arg: 1, scope: !10619, file: !3, line: 7493, type: !2049)
!10623 = !DILocation(line: 7493, column: 22, scope: !10619)
!10624 = !DILocalVariable(name: "fndecl", arg: 2, scope: !10619, file: !3, line: 7493, type: !1686)
!10625 = !DILocation(line: 7493, column: 35, scope: !10619)
!10626 = !DILocalVariable(name: "do_parms", arg: 3, scope: !10619, file: !3, line: 7493, type: !1804)
!10627 = !DILocation(line: 7493, column: 48, scope: !10619)
!10628 = !DILocalVariable(name: "saved_location", scope: !10619, file: !3, line: 7495, type: !1812)
!10629 = !DILocation(line: 7495, column: 14, scope: !10619)
!10630 = !DILocation(line: 7495, column: 31, scope: !10619)
!10631 = !DILocalVariable(name: "parm_stmts", scope: !10619, file: !3, line: 7496, type: !2004)
!10632 = !DILocation(line: 7496, column: 14, scope: !10619)
!10633 = !DILocalVariable(name: "seq", scope: !10619, file: !3, line: 7496, type: !2004)
!10634 = !DILocation(line: 7496, column: 26, scope: !10619)
!10635 = !DILocalVariable(name: "outer_bind", scope: !10619, file: !3, line: 7497, type: !2014)
!10636 = !DILocation(line: 7497, column: 10, scope: !10619)
!10637 = !DILocalVariable(name: "gctx", scope: !10619, file: !3, line: 7498, type: !3221)
!10638 = !DILocation(line: 7498, column: 23, scope: !10619)
!10639 = !DILocation(line: 7500, column: 3, scope: !10619)
!10640 = !DILocation(line: 7500, column: 3, scope: !10641)
!10641 = distinct !DILexicalBlock(scope: !10642, file: !3, line: 7500, column: 3)
!10642 = distinct !DILexicalBlock(scope: !10619, file: !3, line: 7500, column: 3)
!10643 = !DILocation(line: 7500, column: 3, scope: !10642)
!10644 = !DILocation(line: 7504, column: 3, scope: !10619)
!10645 = !DILocation(line: 7506, column: 3, scope: !10619)
!10646 = !DILocation(line: 7507, column: 3, scope: !10619)
!10647 = !DILocation(line: 7513, column: 17, scope: !10619)
!10648 = !DILocation(line: 7513, column: 25, scope: !10619)
!10649 = !DILocation(line: 7513, column: 3, scope: !10619)
!10650 = !DILocation(line: 7514, column: 17, scope: !10619)
!10651 = !DILocation(line: 7514, column: 25, scope: !10619)
!10652 = !DILocation(line: 7514, column: 3, scope: !10619)
!10653 = !DILocation(line: 7516, column: 20, scope: !10654)
!10654 = distinct !DILexicalBlock(scope: !10619, file: !3, line: 7516, column: 7)
!10655 = !DILocation(line: 7516, column: 7, scope: !10654)
!10656 = !DILocation(line: 7516, column: 29, scope: !10654)
!10657 = !DILocation(line: 7516, column: 7, scope: !10619)
!10658 = !DILocation(line: 7517, column: 21, scope: !10654)
!10659 = !DILocation(line: 7517, column: 19, scope: !10654)
!10660 = !DILocation(line: 7517, column: 5, scope: !10654)
!10661 = !DILocation(line: 7520, column: 20, scope: !10619)
!10662 = !DILocation(line: 7520, column: 18, scope: !10619)
!10663 = !DILocation(line: 7524, column: 17, scope: !10619)
!10664 = !DILocation(line: 7524, column: 16, scope: !10619)
!10665 = !DILocation(line: 7524, column: 29, scope: !10619)
!10666 = !DILocation(line: 7524, column: 14, scope: !10619)
!10667 = !DILocation(line: 7527, column: 7, scope: !10619)
!10668 = !DILocation(line: 7528, column: 18, scope: !10619)
!10669 = !DILocation(line: 7528, column: 3, scope: !10619)
!10670 = !DILocation(line: 7529, column: 39, scope: !10619)
!10671 = !DILocation(line: 7529, column: 16, scope: !10619)
!10672 = !DILocation(line: 7529, column: 14, scope: !10619)
!10673 = !DILocation(line: 7530, column: 8, scope: !10674)
!10674 = distinct !DILexicalBlock(scope: !10619, file: !3, line: 7530, column: 7)
!10675 = !DILocation(line: 7530, column: 7, scope: !10619)
!10676 = !DILocation(line: 7532, column: 20, scope: !10677)
!10677 = distinct !DILexicalBlock(scope: !10674, file: !3, line: 7531, column: 5)
!10678 = !DILocation(line: 7532, column: 18, scope: !10677)
!10679 = !DILocation(line: 7533, column: 36, scope: !10677)
!10680 = !DILocation(line: 7533, column: 7, scope: !10677)
!10681 = !DILocation(line: 7534, column: 5, scope: !10677)
!10682 = !DILocation(line: 7538, column: 20, scope: !10683)
!10683 = distinct !DILexicalBlock(scope: !10619, file: !3, line: 7538, column: 7)
!10684 = !DILocation(line: 7538, column: 7, scope: !10683)
!10685 = !DILocation(line: 7538, column: 32, scope: !10683)
!10686 = !DILocation(line: 7539, column: 7, scope: !10683)
!10687 = !DILocation(line: 7539, column: 28, scope: !10683)
!10688 = !DILocation(line: 7539, column: 10, scope: !10683)
!10689 = !DILocation(line: 7539, column: 53, scope: !10683)
!10690 = !DILocation(line: 7539, column: 36, scope: !10683)
!10691 = !DILocation(line: 7539, column: 33, scope: !10683)
!10692 = !DILocation(line: 7538, column: 7, scope: !10619)
!10693 = !DILocation(line: 7542, column: 48, scope: !10683)
!10694 = !DILocation(line: 7542, column: 18, scope: !10683)
!10695 = !DILocation(line: 7542, column: 16, scope: !10683)
!10696 = !DILocation(line: 7544, column: 4, scope: !10619)
!10697 = !DILocation(line: 7544, column: 11, scope: !10619)
!10698 = !DILocation(line: 7548, column: 28, scope: !10699)
!10699 = distinct !DILexicalBlock(scope: !10619, file: !3, line: 7548, column: 7)
!10700 = !DILocation(line: 7548, column: 8, scope: !10699)
!10701 = !DILocation(line: 7548, column: 7, scope: !10619)
!10702 = !DILocalVariable(name: "parm", scope: !10703, file: !3, line: 7550, type: !1686)
!10703 = distinct !DILexicalBlock(scope: !10699, file: !3, line: 7549, column: 5)
!10704 = !DILocation(line: 7550, column: 12, scope: !10703)
!10705 = !DILocation(line: 7552, column: 60, scope: !10703)
!10706 = !DILocation(line: 7552, column: 42, scope: !10703)
!10707 = !DILocation(line: 7552, column: 7, scope: !10703)
!10708 = !DILocation(line: 7553, column: 29, scope: !10703)
!10709 = !DILocation(line: 7553, column: 41, scope: !10703)
!10710 = !DILocation(line: 7553, column: 7, scope: !10703)
!10711 = !DILocation(line: 7555, column: 19, scope: !10712)
!10712 = distinct !DILexicalBlock(scope: !10703, file: !3, line: 7555, column: 7)
!10713 = !DILocation(line: 7555, column: 17, scope: !10712)
!10714 = !DILocation(line: 7555, column: 12, scope: !10712)
!10715 = !DILocation(line: 7556, column: 5, scope: !10716)
!10716 = distinct !DILexicalBlock(scope: !10712, file: !3, line: 7555, column: 7)
!10717 = !DILocation(line: 7555, column: 7, scope: !10712)
!10718 = !DILocation(line: 7557, column: 6, scope: !10719)
!10719 = distinct !DILexicalBlock(scope: !10716, file: !3, line: 7557, column: 6)
!10720 = !DILocation(line: 7557, column: 6, scope: !10716)
!10721 = !DILocation(line: 7559, column: 6, scope: !10722)
!10722 = distinct !DILexicalBlock(scope: !10719, file: !3, line: 7558, column: 4)
!10723 = !DILocation(line: 7559, column: 35, scope: !10722)
!10724 = !DILocation(line: 7560, column: 6, scope: !10722)
!10725 = !DILocation(line: 7560, column: 28, scope: !10722)
!10726 = !DILocation(line: 7561, column: 4, scope: !10722)
!10727 = !DILocation(line: 7556, column: 18, scope: !10716)
!10728 = !DILocation(line: 7556, column: 16, scope: !10716)
!10729 = !DILocation(line: 7555, column: 7, scope: !10716)
!10730 = distinct !{!10730, !10717, !10731}
!10731 = !DILocation(line: 7561, column: 4, scope: !10712)
!10732 = !DILocation(line: 7562, column: 5, scope: !10703)
!10733 = !DILocation(line: 7564, column: 7, scope: !10734)
!10734 = distinct !DILexicalBlock(scope: !10619, file: !3, line: 7564, column: 7)
!10735 = !DILocation(line: 7564, column: 7, scope: !10619)
!10736 = !DILocation(line: 7566, column: 28, scope: !10737)
!10737 = distinct !DILexicalBlock(scope: !10734, file: !3, line: 7565, column: 5)
!10738 = !DILocation(line: 7566, column: 7, scope: !10737)
!10739 = !DILocation(line: 7567, column: 21, scope: !10737)
!10740 = !DILocation(line: 7568, column: 5, scope: !10737)
!10741 = !DILocation(line: 7570, column: 25, scope: !10619)
!10742 = !DILocation(line: 7570, column: 3, scope: !10619)
!10743 = !DILocation(line: 7571, column: 3, scope: !10619)
!10744 = !DILocation(line: 7578, column: 3, scope: !10619)
!10745 = !DILocation(line: 7578, column: 3, scope: !10746)
!10746 = distinct !DILexicalBlock(scope: !10747, file: !3, line: 7578, column: 3)
!10747 = distinct !DILexicalBlock(scope: !10619, file: !3, line: 7578, column: 3)
!10748 = !DILocation(line: 7578, column: 3, scope: !10747)
!10749 = !DILocation(line: 7579, column: 20, scope: !10619)
!10750 = !DILocation(line: 7579, column: 18, scope: !10619)
!10751 = !DILocation(line: 7581, column: 10, scope: !10619)
!10752 = !DILocation(line: 7581, column: 3, scope: !10619)
!10753 = distinct !DISubprogram(name: "unshare_body", scope: !3, file: !3, line: 939, type: !10754, scopeLine: 940, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!10754 = !DISubroutineType(types: !10755)
!10755 = !{null, !2049, !1686}
!10756 = !DILocalVariable(name: "body_p", arg: 1, scope: !10753, file: !3, line: 939, type: !2049)
!10757 = !DILocation(line: 939, column: 21, scope: !10753)
!10758 = !DILocalVariable(name: "fndecl", arg: 2, scope: !10753, file: !3, line: 939, type: !1686)
!10759 = !DILocation(line: 939, column: 34, scope: !10753)
!10760 = !DILocalVariable(name: "cgn", scope: !10753, file: !3, line: 941, type: !10761)
!10761 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10762, size: 64)
!10762 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_node", file: !1629, line: 181, size: 2496, elements: !10763)
!10763 = !{!10764, !10765, !10788, !10789, !10790, !10791, !10792, !10793, !10794, !10795, !10796, !10797, !10798, !10799, !10800, !10801, !10802, !10803, !10905, !10927, !10937, !10941, !10967, !10976, !10977, !10978, !10979, !10980, !10981, !10982, !10983, !10984, !10985, !10986, !10987, !10988, !10989}
!10764 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !10762, file: !1629, line: 182, baseType: !1686, size: 64)
!10765 = !DIDerivedType(tag: DW_TAG_member, name: "callees", scope: !10762, file: !1629, line: 183, baseType: !10766, size: 64, offset: 64)
!10766 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10767, size: 64)
!10767 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_edge", file: !1629, line: 314, size: 768, elements: !10768)
!10768 = !{!10769, !10770, !10771, !10772, !10773, !10774, !10775, !10776, !10777, !10778, !10780, !10781, !10782, !10783, !10785, !10786, !10787}
!10769 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !10767, file: !1629, line: 316, baseType: !2226, size: 64)
!10770 = !DIDerivedType(tag: DW_TAG_member, name: "caller", scope: !10767, file: !1629, line: 317, baseType: !10761, size: 64, offset: 64)
!10771 = !DIDerivedType(tag: DW_TAG_member, name: "callee", scope: !10767, file: !1629, line: 318, baseType: !10761, size: 64, offset: 128)
!10772 = !DIDerivedType(tag: DW_TAG_member, name: "prev_caller", scope: !10767, file: !1629, line: 319, baseType: !10766, size: 64, offset: 192)
!10773 = !DIDerivedType(tag: DW_TAG_member, name: "next_caller", scope: !10767, file: !1629, line: 320, baseType: !10766, size: 64, offset: 256)
!10774 = !DIDerivedType(tag: DW_TAG_member, name: "prev_callee", scope: !10767, file: !1629, line: 321, baseType: !10766, size: 64, offset: 320)
!10775 = !DIDerivedType(tag: DW_TAG_member, name: "next_callee", scope: !10767, file: !1629, line: 322, baseType: !10766, size: 64, offset: 384)
!10776 = !DIDerivedType(tag: DW_TAG_member, name: "call_stmt", scope: !10767, file: !1629, line: 323, baseType: !2014, size: 64, offset: 448)
!10777 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !10767, file: !1629, line: 324, baseType: !1685, size: 64, offset: 512)
!10778 = !DIDerivedType(tag: DW_TAG_member, name: "inline_failed", scope: !10767, file: !1629, line: 327, baseType: !10779, size: 32, offset: 576)
!10779 = !DIDerivedType(tag: DW_TAG_typedef, name: "cgraph_inline_failed_t", file: !1629, line: 312, baseType: !1628)
!10780 = !DIDerivedType(tag: DW_TAG_member, name: "lto_stmt_uid", scope: !10767, file: !1629, line: 330, baseType: !7, size: 32, offset: 608)
!10781 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !10767, file: !1629, line: 334, baseType: !1330, size: 32, offset: 640)
!10782 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !10767, file: !1629, line: 336, baseType: !1330, size: 32, offset: 672)
!10783 = !DIDerivedType(tag: DW_TAG_member, name: "loop_nest", scope: !10767, file: !1629, line: 338, baseType: !10784, size: 16, offset: 704)
!10784 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!10785 = !DIDerivedType(tag: DW_TAG_member, name: "indirect_call", scope: !10767, file: !1629, line: 340, baseType: !7, size: 1, offset: 720, flags: DIFlagBitField, extraData: i64 720)
!10786 = !DIDerivedType(tag: DW_TAG_member, name: "call_stmt_cannot_inline_p", scope: !10767, file: !1629, line: 342, baseType: !7, size: 1, offset: 721, flags: DIFlagBitField, extraData: i64 720)
!10787 = !DIDerivedType(tag: DW_TAG_member, name: "can_throw_external", scope: !10767, file: !1629, line: 344, baseType: !7, size: 1, offset: 722, flags: DIFlagBitField, extraData: i64 720)
!10788 = !DIDerivedType(tag: DW_TAG_member, name: "callers", scope: !10762, file: !1629, line: 184, baseType: !10766, size: 64, offset: 128)
!10789 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !10762, file: !1629, line: 185, baseType: !10761, size: 64, offset: 192)
!10790 = !DIDerivedType(tag: DW_TAG_member, name: "previous", scope: !10762, file: !1629, line: 186, baseType: !10761, size: 64, offset: 256)
!10791 = !DIDerivedType(tag: DW_TAG_member, name: "origin", scope: !10762, file: !1629, line: 188, baseType: !10761, size: 64, offset: 320)
!10792 = !DIDerivedType(tag: DW_TAG_member, name: "nested", scope: !10762, file: !1629, line: 190, baseType: !10761, size: 64, offset: 384)
!10793 = !DIDerivedType(tag: DW_TAG_member, name: "next_nested", scope: !10762, file: !1629, line: 192, baseType: !10761, size: 64, offset: 448)
!10794 = !DIDerivedType(tag: DW_TAG_member, name: "next_needed", scope: !10762, file: !1629, line: 194, baseType: !10761, size: 64, offset: 512)
!10795 = !DIDerivedType(tag: DW_TAG_member, name: "next_sibling_clone", scope: !10762, file: !1629, line: 196, baseType: !10761, size: 64, offset: 576)
!10796 = !DIDerivedType(tag: DW_TAG_member, name: "prev_sibling_clone", scope: !10762, file: !1629, line: 197, baseType: !10761, size: 64, offset: 640)
!10797 = !DIDerivedType(tag: DW_TAG_member, name: "clones", scope: !10762, file: !1629, line: 198, baseType: !10761, size: 64, offset: 704)
!10798 = !DIDerivedType(tag: DW_TAG_member, name: "clone_of", scope: !10762, file: !1629, line: 199, baseType: !10761, size: 64, offset: 768)
!10799 = !DIDerivedType(tag: DW_TAG_member, name: "same_body", scope: !10762, file: !1629, line: 202, baseType: !10761, size: 64, offset: 832)
!10800 = !DIDerivedType(tag: DW_TAG_member, name: "same_comdat_group", scope: !10762, file: !1629, line: 204, baseType: !10761, size: 64, offset: 896)
!10801 = !DIDerivedType(tag: DW_TAG_member, name: "call_site_hash", scope: !10762, file: !1629, line: 207, baseType: !2521, size: 64, offset: 960)
!10802 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !10762, file: !1629, line: 209, baseType: !1685, size: 64, offset: 1024)
!10803 = !DIDerivedType(tag: DW_TAG_member, name: "ipa_transforms_to_apply", scope: !10762, file: !1629, line: 214, baseType: !10804, size: 64, offset: 1088)
!10804 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10805, size: 64)
!10805 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_opt_pass_heap", file: !2438, line: 177, baseType: !10806)
!10806 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_opt_pass_heap", file: !2438, line: 177, size: 128, elements: !10807)
!10807 = !{!10808}
!10808 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !10806, file: !2438, line: 177, baseType: !10809, size: 128)
!10809 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_opt_pass_base", file: !2438, line: 176, baseType: !10810)
!10810 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_opt_pass_base", file: !2438, line: 176, size: 128, elements: !10811)
!10811 = !{!10812, !10813, !10814}
!10812 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !10810, file: !2438, line: 176, baseType: !7, size: 32)
!10813 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !10810, file: !2438, line: 176, baseType: !7, size: 32, offset: 32)
!10814 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !10810, file: !2438, line: 176, baseType: !10815, size: 64, offset: 64)
!10815 = !DICompositeType(tag: DW_TAG_array_type, baseType: !10816, size: 64, elements: !1785)
!10816 = !DIDerivedType(tag: DW_TAG_typedef, name: "ipa_opt_pass", file: !2438, line: 174, baseType: !10817)
!10817 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10818, size: 64)
!10818 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ipa_opt_pass_d", file: !1652, line: 173, size: 1152, elements: !10819)
!10819 = !{!10820, !10844, !10848, !10871, !10872, !10876, !10881, !10882, !10886}
!10820 = !DIDerivedType(tag: DW_TAG_member, name: "pass", scope: !10818, file: !1652, line: 175, baseType: !10821, size: 640)
!10821 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "opt_pass", file: !1652, line: 114, size: 640, elements: !10822)
!10822 = !{!10823, !10824, !10825, !10829, !10833, !10835, !10836, !10837, !10839, !10840, !10841, !10842, !10843}
!10823 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !10821, file: !1652, line: 117, baseType: !1651, size: 32)
!10824 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !10821, file: !1652, line: 121, baseType: !1888, size: 64, offset: 64)
!10825 = !DIDerivedType(tag: DW_TAG_member, name: "gate", scope: !10821, file: !1652, line: 125, baseType: !10826, size: 64, offset: 128)
!10826 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10827, size: 64)
!10827 = !DISubroutineType(types: !10828)
!10828 = !{!1804}
!10829 = !DIDerivedType(tag: DW_TAG_member, name: "execute", scope: !10821, file: !1652, line: 130, baseType: !10830, size: 64, offset: 192)
!10830 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10831, size: 64)
!10831 = !DISubroutineType(types: !10832)
!10832 = !{!7}
!10833 = !DIDerivedType(tag: DW_TAG_member, name: "sub", scope: !10821, file: !1652, line: 133, baseType: !10834, size: 64, offset: 256)
!10834 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10821, size: 64)
!10835 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !10821, file: !1652, line: 136, baseType: !10834, size: 64, offset: 320)
!10836 = !DIDerivedType(tag: DW_TAG_member, name: "static_pass_number", scope: !10821, file: !1652, line: 139, baseType: !1330, size: 32, offset: 384)
!10837 = !DIDerivedType(tag: DW_TAG_member, name: "tv_id", scope: !10821, file: !1652, line: 143, baseType: !10838, size: 32, offset: 416)
!10838 = !DIDerivedType(tag: DW_TAG_typedef, name: "timevar_id_t", file: !1379, line: 80, baseType: !1378)
!10839 = !DIDerivedType(tag: DW_TAG_member, name: "properties_required", scope: !10821, file: !1652, line: 146, baseType: !7, size: 32, offset: 448)
!10840 = !DIDerivedType(tag: DW_TAG_member, name: "properties_provided", scope: !10821, file: !1652, line: 147, baseType: !7, size: 32, offset: 480)
!10841 = !DIDerivedType(tag: DW_TAG_member, name: "properties_destroyed", scope: !10821, file: !1652, line: 148, baseType: !7, size: 32, offset: 512)
!10842 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_start", scope: !10821, file: !1652, line: 151, baseType: !7, size: 32, offset: 544)
!10843 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_finish", scope: !10821, file: !1652, line: 152, baseType: !7, size: 32, offset: 576)
!10844 = !DIDerivedType(tag: DW_TAG_member, name: "generate_summary", scope: !10818, file: !1652, line: 179, baseType: !10845, size: 64, offset: 640)
!10845 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10846, size: 64)
!10846 = !DISubroutineType(types: !10847)
!10847 = !{null}
!10848 = !DIDerivedType(tag: DW_TAG_member, name: "write_summary", scope: !10818, file: !1652, line: 182, baseType: !10849, size: 64, offset: 704)
!10849 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10850, size: 64)
!10850 = !DISubroutineType(types: !10851)
!10851 = !{null, !10852}
!10852 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10853, size: 64)
!10853 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_node_set_def", file: !1629, line: 276, size: 192, elements: !10854)
!10854 = !{!10855, !10856, !10870}
!10855 = !DIDerivedType(tag: DW_TAG_member, name: "hashtab", scope: !10853, file: !1629, line: 278, baseType: !2521, size: 64)
!10856 = !DIDerivedType(tag: DW_TAG_member, name: "nodes", scope: !10853, file: !1629, line: 279, baseType: !10857, size: 64, offset: 64)
!10857 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10858, size: 64)
!10858 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_cgraph_node_ptr_gc", file: !1629, line: 272, baseType: !10859)
!10859 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_cgraph_node_ptr_gc", file: !1629, line: 272, size: 128, elements: !10860)
!10860 = !{!10861}
!10861 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !10859, file: !1629, line: 272, baseType: !10862, size: 128)
!10862 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_cgraph_node_ptr_base", file: !1629, line: 270, baseType: !10863)
!10863 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_cgraph_node_ptr_base", file: !1629, line: 270, size: 128, elements: !10864)
!10864 = !{!10865, !10866, !10867}
!10865 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !10863, file: !1629, line: 270, baseType: !7, size: 32)
!10866 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !10863, file: !1629, line: 270, baseType: !7, size: 32, offset: 32)
!10867 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !10863, file: !1629, line: 270, baseType: !10868, size: 64, offset: 64)
!10868 = !DICompositeType(tag: DW_TAG_array_type, baseType: !10869, size: 64, elements: !1785)
!10869 = !DIDerivedType(tag: DW_TAG_typedef, name: "cgraph_node_ptr", file: !1629, line: 268, baseType: !10761)
!10870 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !10853, file: !1629, line: 280, baseType: !1685, size: 64, offset: 128)
!10871 = !DIDerivedType(tag: DW_TAG_member, name: "read_summary", scope: !10818, file: !1652, line: 187, baseType: !10845, size: 64, offset: 768)
!10872 = !DIDerivedType(tag: DW_TAG_member, name: "function_read_summary", scope: !10818, file: !1652, line: 188, baseType: !10873, size: 64, offset: 832)
!10873 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10874, size: 64)
!10874 = !DISubroutineType(types: !10875)
!10875 = !{null, !10761}
!10876 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_fixup", scope: !10818, file: !1652, line: 191, baseType: !10877, size: 64, offset: 896)
!10877 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10878, size: 64)
!10878 = !DISubroutineType(types: !10879)
!10879 = !{null, !10761, !10880}
!10880 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2014, size: 64)
!10881 = !DIDerivedType(tag: DW_TAG_member, name: "function_transform_todo_flags_start", scope: !10818, file: !1652, line: 195, baseType: !7, size: 32, offset: 960)
!10882 = !DIDerivedType(tag: DW_TAG_member, name: "function_transform", scope: !10818, file: !1652, line: 196, baseType: !10883, size: 64, offset: 1024)
!10883 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10884, size: 64)
!10884 = !DISubroutineType(types: !10885)
!10885 = !{!7, !10761}
!10886 = !DIDerivedType(tag: DW_TAG_member, name: "variable_transform", scope: !10818, file: !1652, line: 197, baseType: !10887, size: 64, offset: 1088)
!10887 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10888, size: 64)
!10888 = !DISubroutineType(types: !10889)
!10889 = !{null, !10890}
!10890 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10891, size: 64)
!10891 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "varpool_node", file: !1629, line: 358, size: 320, elements: !10892)
!10892 = !{!10893, !10894, !10895, !10896, !10897, !10898, !10899, !10900, !10901, !10902, !10903, !10904}
!10893 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !10891, file: !1629, line: 359, baseType: !1686, size: 64)
!10894 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !10891, file: !1629, line: 361, baseType: !10890, size: 64, offset: 64)
!10895 = !DIDerivedType(tag: DW_TAG_member, name: "next_needed", scope: !10891, file: !1629, line: 363, baseType: !10890, size: 64, offset: 128)
!10896 = !DIDerivedType(tag: DW_TAG_member, name: "extra_name", scope: !10891, file: !1629, line: 366, baseType: !10890, size: 64, offset: 192)
!10897 = !DIDerivedType(tag: DW_TAG_member, name: "order", scope: !10891, file: !1629, line: 368, baseType: !1330, size: 32, offset: 256)
!10898 = !DIDerivedType(tag: DW_TAG_member, name: "needed", scope: !10891, file: !1629, line: 372, baseType: !7, size: 1, offset: 288, flags: DIFlagBitField, extraData: i64 288)
!10899 = !DIDerivedType(tag: DW_TAG_member, name: "force_output", scope: !10891, file: !1629, line: 375, baseType: !7, size: 1, offset: 289, flags: DIFlagBitField, extraData: i64 288)
!10900 = !DIDerivedType(tag: DW_TAG_member, name: "analyzed", scope: !10891, file: !1629, line: 378, baseType: !7, size: 1, offset: 290, flags: DIFlagBitField, extraData: i64 288)
!10901 = !DIDerivedType(tag: DW_TAG_member, name: "finalized", scope: !10891, file: !1629, line: 380, baseType: !7, size: 1, offset: 291, flags: DIFlagBitField, extraData: i64 288)
!10902 = !DIDerivedType(tag: DW_TAG_member, name: "output", scope: !10891, file: !1629, line: 382, baseType: !7, size: 1, offset: 292, flags: DIFlagBitField, extraData: i64 288)
!10903 = !DIDerivedType(tag: DW_TAG_member, name: "externally_visible", scope: !10891, file: !1629, line: 384, baseType: !7, size: 1, offset: 293, flags: DIFlagBitField, extraData: i64 288)
!10904 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !10891, file: !1629, line: 387, baseType: !7, size: 1, offset: 294, flags: DIFlagBitField, extraData: i64 288)
!10905 = !DIDerivedType(tag: DW_TAG_member, name: "local", scope: !10762, file: !1629, line: 216, baseType: !10906, size: 320, offset: 1152)
!10906 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_local_info", file: !1629, line: 88, size: 320, elements: !10907)
!10907 = !{!10908, !10911, !10919, !10920, !10921, !10922, !10923, !10924, !10925, !10926}
!10908 = !DIDerivedType(tag: DW_TAG_member, name: "lto_file_data", scope: !10906, file: !1629, line: 90, baseType: !10909, size: 64)
!10909 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10910, size: 64)
!10910 = !DICompositeType(tag: DW_TAG_structure_type, name: "lto_file_decl_data", file: !1629, line: 51, flags: DIFlagFwdDecl)
!10911 = !DIDerivedType(tag: DW_TAG_member, name: "inline_summary", scope: !10906, file: !1629, line: 92, baseType: !10912, size: 192, offset: 64)
!10912 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "inline_summary", file: !1629, line: 57, size: 192, elements: !10913)
!10913 = !{!10914, !10915, !10916, !10917, !10918}
!10914 = !DIDerivedType(tag: DW_TAG_member, name: "estimated_self_stack_size", scope: !10912, file: !1629, line: 60, baseType: !1741, size: 64)
!10915 = !DIDerivedType(tag: DW_TAG_member, name: "self_size", scope: !10912, file: !1629, line: 63, baseType: !1330, size: 32, offset: 64)
!10916 = !DIDerivedType(tag: DW_TAG_member, name: "size_inlining_benefit", scope: !10912, file: !1629, line: 65, baseType: !1330, size: 32, offset: 96)
!10917 = !DIDerivedType(tag: DW_TAG_member, name: "self_time", scope: !10912, file: !1629, line: 67, baseType: !1330, size: 32, offset: 128)
!10918 = !DIDerivedType(tag: DW_TAG_member, name: "time_inlining_benefit", scope: !10912, file: !1629, line: 69, baseType: !1330, size: 32, offset: 160)
!10919 = !DIDerivedType(tag: DW_TAG_member, name: "local", scope: !10906, file: !1629, line: 96, baseType: !7, size: 1, offset: 256, flags: DIFlagBitField, extraData: i64 256)
!10920 = !DIDerivedType(tag: DW_TAG_member, name: "externally_visible", scope: !10906, file: !1629, line: 99, baseType: !7, size: 1, offset: 257, flags: DIFlagBitField, extraData: i64 256)
!10921 = !DIDerivedType(tag: DW_TAG_member, name: "finalized", scope: !10906, file: !1629, line: 102, baseType: !7, size: 1, offset: 258, flags: DIFlagBitField, extraData: i64 256)
!10922 = !DIDerivedType(tag: DW_TAG_member, name: "inlinable", scope: !10906, file: !1629, line: 105, baseType: !7, size: 1, offset: 259, flags: DIFlagBitField, extraData: i64 256)
!10923 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !10906, file: !1629, line: 108, baseType: !7, size: 1, offset: 260, flags: DIFlagBitField, extraData: i64 256)
!10924 = !DIDerivedType(tag: DW_TAG_member, name: "redefined_extern_inline", scope: !10906, file: !1629, line: 112, baseType: !7, size: 1, offset: 261, flags: DIFlagBitField, extraData: i64 256)
!10925 = !DIDerivedType(tag: DW_TAG_member, name: "for_functions_valid", scope: !10906, file: !1629, line: 116, baseType: !7, size: 1, offset: 262, flags: DIFlagBitField, extraData: i64 256)
!10926 = !DIDerivedType(tag: DW_TAG_member, name: "vtable_method", scope: !10906, file: !1629, line: 120, baseType: !7, size: 1, offset: 263, flags: DIFlagBitField, extraData: i64 256)
!10927 = !DIDerivedType(tag: DW_TAG_member, name: "global", scope: !10762, file: !1629, line: 217, baseType: !10928, size: 320, offset: 1472)
!10928 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_global_info", file: !1629, line: 126, size: 320, elements: !10929)
!10929 = !{!10930, !10931, !10932, !10933, !10934, !10935, !10936}
!10930 = !DIDerivedType(tag: DW_TAG_member, name: "estimated_stack_size", scope: !10928, file: !1629, line: 128, baseType: !1741, size: 64)
!10931 = !DIDerivedType(tag: DW_TAG_member, name: "stack_frame_offset", scope: !10928, file: !1629, line: 130, baseType: !1741, size: 64, offset: 64)
!10932 = !DIDerivedType(tag: DW_TAG_member, name: "inlined_to", scope: !10928, file: !1629, line: 134, baseType: !10761, size: 64, offset: 128)
!10933 = !DIDerivedType(tag: DW_TAG_member, name: "time", scope: !10928, file: !1629, line: 137, baseType: !1330, size: 32, offset: 192)
!10934 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !10928, file: !1629, line: 138, baseType: !1330, size: 32, offset: 224)
!10935 = !DIDerivedType(tag: DW_TAG_member, name: "estimated_growth", scope: !10928, file: !1629, line: 141, baseType: !1330, size: 32, offset: 256)
!10936 = !DIDerivedType(tag: DW_TAG_member, name: "inlined", scope: !10928, file: !1629, line: 144, baseType: !1804, size: 8, offset: 288)
!10937 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !10762, file: !1629, line: 218, baseType: !10938, size: 32, offset: 1792)
!10938 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_rtl_info", file: !1629, line: 150, size: 32, elements: !10939)
!10939 = !{!10940}
!10940 = !DIDerivedType(tag: DW_TAG_member, name: "preferred_incoming_stack_boundary", scope: !10938, file: !1629, line: 151, baseType: !7, size: 32)
!10941 = !DIDerivedType(tag: DW_TAG_member, name: "clone", scope: !10762, file: !1629, line: 219, baseType: !10942, size: 192, offset: 1856)
!10942 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_clone_info", file: !1629, line: 171, size: 192, elements: !10943)
!10943 = !{!10944, !10965, !10966}
!10944 = !DIDerivedType(tag: DW_TAG_member, name: "tree_map", scope: !10942, file: !1629, line: 173, baseType: !10945, size: 64)
!10945 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10946, size: 64)
!10946 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_replace_map_p_gc", file: !1629, line: 169, baseType: !10947)
!10947 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_replace_map_p_gc", file: !1629, line: 169, size: 128, elements: !10948)
!10948 = !{!10949}
!10949 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !10947, file: !1629, line: 169, baseType: !10950, size: 128)
!10950 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_replace_map_p_base", file: !1629, line: 168, baseType: !10951)
!10951 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_replace_map_p_base", file: !1629, line: 168, size: 128, elements: !10952)
!10952 = !{!10953, !10954, !10955}
!10953 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !10951, file: !1629, line: 168, baseType: !7, size: 32)
!10954 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !10951, file: !1629, line: 168, baseType: !7, size: 32, offset: 32)
!10955 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !10951, file: !1629, line: 168, baseType: !10956, size: 64, offset: 64)
!10956 = !DICompositeType(tag: DW_TAG_array_type, baseType: !10957, size: 64, elements: !1785)
!10957 = !DIDerivedType(tag: DW_TAG_typedef, name: "ipa_replace_map_p", file: !1629, line: 167, baseType: !10958)
!10958 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10959, size: 64)
!10959 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ipa_replace_map", file: !1629, line: 156, size: 192, elements: !10960)
!10960 = !{!10961, !10962, !10963, !10964}
!10961 = !DIDerivedType(tag: DW_TAG_member, name: "old_tree", scope: !10959, file: !1629, line: 159, baseType: !1686, size: 64)
!10962 = !DIDerivedType(tag: DW_TAG_member, name: "new_tree", scope: !10959, file: !1629, line: 161, baseType: !1686, size: 64, offset: 64)
!10963 = !DIDerivedType(tag: DW_TAG_member, name: "replace_p", scope: !10959, file: !1629, line: 163, baseType: !1804, size: 8, offset: 128)
!10964 = !DIDerivedType(tag: DW_TAG_member, name: "ref_p", scope: !10959, file: !1629, line: 165, baseType: !1804, size: 8, offset: 136)
!10965 = !DIDerivedType(tag: DW_TAG_member, name: "args_to_skip", scope: !10942, file: !1629, line: 174, baseType: !2661, size: 64, offset: 64)
!10966 = !DIDerivedType(tag: DW_TAG_member, name: "combined_args_to_skip", scope: !10942, file: !1629, line: 175, baseType: !2661, size: 64, offset: 128)
!10967 = !DIDerivedType(tag: DW_TAG_member, name: "thunk", scope: !10762, file: !1629, line: 220, baseType: !10968, size: 256, offset: 2048)
!10968 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_thunk_info", file: !1629, line: 74, size: 256, elements: !10969)
!10969 = !{!10970, !10971, !10972, !10973, !10974, !10975}
!10970 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_offset", scope: !10968, file: !1629, line: 76, baseType: !1741, size: 64)
!10971 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_value", scope: !10968, file: !1629, line: 77, baseType: !1741, size: 64, offset: 64)
!10972 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !10968, file: !1629, line: 78, baseType: !1686, size: 64, offset: 128)
!10973 = !DIDerivedType(tag: DW_TAG_member, name: "this_adjusting", scope: !10968, file: !1629, line: 79, baseType: !1804, size: 8, offset: 192)
!10974 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_offset_p", scope: !10968, file: !1629, line: 80, baseType: !1804, size: 8, offset: 200)
!10975 = !DIDerivedType(tag: DW_TAG_member, name: "thunk_p", scope: !10968, file: !1629, line: 82, baseType: !1804, size: 8, offset: 208)
!10976 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !10762, file: !1629, line: 223, baseType: !2226, size: 64, offset: 2304)
!10977 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !10762, file: !1629, line: 225, baseType: !1330, size: 32, offset: 2368)
!10978 = !DIDerivedType(tag: DW_TAG_member, name: "order", scope: !10762, file: !1629, line: 227, baseType: !1330, size: 32, offset: 2400)
!10979 = !DIDerivedType(tag: DW_TAG_member, name: "pid", scope: !10762, file: !1629, line: 231, baseType: !1330, size: 32, offset: 2432)
!10980 = !DIDerivedType(tag: DW_TAG_member, name: "needed", scope: !10762, file: !1629, line: 238, baseType: !7, size: 1, offset: 2464, flags: DIFlagBitField, extraData: i64 2464)
!10981 = !DIDerivedType(tag: DW_TAG_member, name: "address_taken", scope: !10762, file: !1629, line: 241, baseType: !7, size: 1, offset: 2465, flags: DIFlagBitField, extraData: i64 2464)
!10982 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_and_needed", scope: !10762, file: !1629, line: 244, baseType: !7, size: 1, offset: 2466, flags: DIFlagBitField, extraData: i64 2464)
!10983 = !DIDerivedType(tag: DW_TAG_member, name: "reachable", scope: !10762, file: !1629, line: 251, baseType: !7, size: 1, offset: 2467, flags: DIFlagBitField, extraData: i64 2464)
!10984 = !DIDerivedType(tag: DW_TAG_member, name: "lowered", scope: !10762, file: !1629, line: 253, baseType: !7, size: 1, offset: 2468, flags: DIFlagBitField, extraData: i64 2464)
!10985 = !DIDerivedType(tag: DW_TAG_member, name: "analyzed", scope: !10762, file: !1629, line: 256, baseType: !7, size: 1, offset: 2469, flags: DIFlagBitField, extraData: i64 2464)
!10986 = !DIDerivedType(tag: DW_TAG_member, name: "process", scope: !10762, file: !1629, line: 258, baseType: !7, size: 1, offset: 2470, flags: DIFlagBitField, extraData: i64 2464)
!10987 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !10762, file: !1629, line: 260, baseType: !7, size: 1, offset: 2471, flags: DIFlagBitField, extraData: i64 2464)
!10988 = !DIDerivedType(tag: DW_TAG_member, name: "finalized_by_frontend", scope: !10762, file: !1629, line: 262, baseType: !7, size: 1, offset: 2472, flags: DIFlagBitField, extraData: i64 2464)
!10989 = !DIDerivedType(tag: DW_TAG_member, name: "same_body_alias", scope: !10762, file: !1629, line: 265, baseType: !7, size: 1, offset: 2473, flags: DIFlagBitField, extraData: i64 2464)
!10990 = !DILocation(line: 941, column: 23, scope: !10753)
!10991 = !DILocation(line: 941, column: 42, scope: !10753)
!10992 = !DILocation(line: 941, column: 29, scope: !10753)
!10993 = !DILocation(line: 943, column: 3, scope: !10753)
!10994 = !DILocation(line: 944, column: 7, scope: !10995)
!10995 = distinct !DILexicalBlock(scope: !10753, file: !3, line: 944, column: 7)
!10996 = !DILocation(line: 944, column: 18, scope: !10995)
!10997 = !DILocation(line: 944, column: 14, scope: !10995)
!10998 = !DILocation(line: 944, column: 7, scope: !10753)
!10999 = !DILocation(line: 945, column: 16, scope: !11000)
!11000 = distinct !DILexicalBlock(scope: !10995, file: !3, line: 945, column: 5)
!11001 = !DILocation(line: 945, column: 21, scope: !11000)
!11002 = !DILocation(line: 945, column: 14, scope: !11000)
!11003 = !DILocation(line: 945, column: 10, scope: !11000)
!11004 = !DILocation(line: 945, column: 29, scope: !11005)
!11005 = distinct !DILexicalBlock(scope: !11000, file: !3, line: 945, column: 5)
!11006 = !DILocation(line: 945, column: 5, scope: !11000)
!11007 = !DILocation(line: 946, column: 22, scope: !11005)
!11008 = !DILocation(line: 946, column: 51, scope: !11005)
!11009 = !DILocation(line: 946, column: 56, scope: !11005)
!11010 = !DILocation(line: 946, column: 7, scope: !11005)
!11011 = !DILocation(line: 945, column: 40, scope: !11005)
!11012 = !DILocation(line: 945, column: 45, scope: !11005)
!11013 = !DILocation(line: 945, column: 38, scope: !11005)
!11014 = !DILocation(line: 945, column: 5, scope: !11005)
!11015 = distinct !{!11015, !11006, !11016}
!11016 = !DILocation(line: 946, column: 60, scope: !11000)
!11017 = !DILocation(line: 947, column: 1, scope: !10753)
!11018 = distinct !DISubprogram(name: "unvisit_body", scope: !3, file: !3, line: 952, type: !10754, scopeLine: 953, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!11019 = !DILocalVariable(name: "body_p", arg: 1, scope: !11018, file: !3, line: 952, type: !2049)
!11020 = !DILocation(line: 952, column: 21, scope: !11018)
!11021 = !DILocalVariable(name: "fndecl", arg: 2, scope: !11018, file: !3, line: 952, type: !1686)
!11022 = !DILocation(line: 952, column: 34, scope: !11018)
!11023 = !DILocalVariable(name: "cgn", scope: !11018, file: !3, line: 954, type: !10761)
!11024 = !DILocation(line: 954, column: 23, scope: !11018)
!11025 = !DILocation(line: 954, column: 42, scope: !11018)
!11026 = !DILocation(line: 954, column: 29, scope: !11018)
!11027 = !DILocation(line: 956, column: 3, scope: !11018)
!11028 = !DILocation(line: 957, column: 7, scope: !11029)
!11029 = distinct !DILexicalBlock(scope: !11018, file: !3, line: 957, column: 7)
!11030 = !DILocation(line: 957, column: 18, scope: !11029)
!11031 = !DILocation(line: 957, column: 14, scope: !11029)
!11032 = !DILocation(line: 957, column: 7, scope: !11018)
!11033 = !DILocation(line: 958, column: 16, scope: !11034)
!11034 = distinct !DILexicalBlock(scope: !11029, file: !3, line: 958, column: 5)
!11035 = !DILocation(line: 958, column: 21, scope: !11034)
!11036 = !DILocation(line: 958, column: 14, scope: !11034)
!11037 = !DILocation(line: 958, column: 10, scope: !11034)
!11038 = !DILocation(line: 958, column: 29, scope: !11039)
!11039 = distinct !DILexicalBlock(scope: !11034, file: !3, line: 958, column: 5)
!11040 = !DILocation(line: 958, column: 5, scope: !11034)
!11041 = !DILocation(line: 959, column: 22, scope: !11039)
!11042 = !DILocation(line: 959, column: 51, scope: !11039)
!11043 = !DILocation(line: 959, column: 56, scope: !11039)
!11044 = !DILocation(line: 959, column: 7, scope: !11039)
!11045 = !DILocation(line: 958, column: 40, scope: !11039)
!11046 = !DILocation(line: 958, column: 45, scope: !11039)
!11047 = !DILocation(line: 958, column: 38, scope: !11039)
!11048 = !DILocation(line: 958, column: 5, scope: !11039)
!11049 = distinct !{!11049, !11040, !11050}
!11050 = !DILocation(line: 959, column: 60, scope: !11034)
!11051 = !DILocation(line: 960, column: 1, scope: !11018)
!11052 = distinct !DISubprogram(name: "gimple_seq_first", scope: !385, file: !385, line: 159, type: !4885, scopeLine: 160, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!11053 = !DILocalVariable(name: "s", arg: 1, scope: !11052, file: !385, line: 159, type: !4011)
!11054 = !DILocation(line: 159, column: 36, scope: !11052)
!11055 = !DILocation(line: 161, column: 10, scope: !11052)
!11056 = !DILocation(line: 161, column: 14, scope: !11052)
!11057 = !DILocation(line: 161, column: 17, scope: !11052)
!11058 = !DILocation(line: 161, column: 3, scope: !11052)
!11059 = distinct !DISubprogram(name: "gimple_bind_body", scope: !385, file: !385, line: 2517, type: !11060, scopeLine: 2518, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!11060 = !DISubroutineType(types: !11061)
!11061 = !{!2004, !2014}
!11062 = !DILocalVariable(name: "gs", arg: 1, scope: !11059, file: !385, line: 2517, type: !2014)
!11063 = !DILocation(line: 2517, column: 26, scope: !11059)
!11064 = !DILocation(line: 2520, column: 10, scope: !11059)
!11065 = !DILocation(line: 2520, column: 14, scope: !11059)
!11066 = !DILocation(line: 2520, column: 26, scope: !11059)
!11067 = !DILocation(line: 2520, column: 3, scope: !11059)
!11068 = distinct !DISubprogram(name: "gimple_bind_set_body", scope: !385, file: !385, line: 2528, type: !11069, scopeLine: 2529, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!11069 = !DISubroutineType(types: !11070)
!11070 = !{null, !2014, !2004}
!11071 = !DILocalVariable(name: "gs", arg: 1, scope: !11068, file: !385, line: 2528, type: !2014)
!11072 = !DILocation(line: 2528, column: 30, scope: !11068)
!11073 = !DILocalVariable(name: "seq", arg: 2, scope: !11068, file: !385, line: 2528, type: !2004)
!11074 = !DILocation(line: 2528, column: 45, scope: !11068)
!11075 = !DILocation(line: 2531, column: 26, scope: !11068)
!11076 = !DILocation(line: 2531, column: 3, scope: !11068)
!11077 = !DILocation(line: 2531, column: 7, scope: !11068)
!11078 = !DILocation(line: 2531, column: 19, scope: !11068)
!11079 = !DILocation(line: 2531, column: 24, scope: !11068)
!11080 = !DILocation(line: 2532, column: 1, scope: !11068)
!11081 = distinct !DISubprogram(name: "gimplify_function_tree", scope: !3, file: !3, line: 7591, type: !3240, scopeLine: 7592, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!11082 = !DILocalVariable(name: "fndecl", arg: 1, scope: !11081, file: !3, line: 7591, type: !1686)
!11083 = !DILocation(line: 7591, column: 30, scope: !11081)
!11084 = !DILocalVariable(name: "oldfn", scope: !11081, file: !3, line: 7593, type: !1686)
!11085 = !DILocation(line: 7593, column: 8, scope: !11081)
!11086 = !DILocalVariable(name: "parm", scope: !11081, file: !3, line: 7593, type: !1686)
!11087 = !DILocation(line: 7593, column: 15, scope: !11081)
!11088 = !DILocalVariable(name: "ret", scope: !11081, file: !3, line: 7593, type: !1686)
!11089 = !DILocation(line: 7593, column: 21, scope: !11081)
!11090 = !DILocalVariable(name: "seq", scope: !11081, file: !3, line: 7594, type: !2004)
!11091 = !DILocation(line: 7594, column: 14, scope: !11081)
!11092 = !DILocalVariable(name: "bind", scope: !11081, file: !3, line: 7595, type: !2014)
!11093 = !DILocation(line: 7595, column: 10, scope: !11081)
!11094 = !DILocation(line: 7597, column: 3, scope: !11081)
!11095 = !DILocation(line: 7599, column: 11, scope: !11081)
!11096 = !DILocation(line: 7599, column: 9, scope: !11081)
!11097 = !DILocation(line: 7600, column: 27, scope: !11081)
!11098 = !DILocation(line: 7600, column: 25, scope: !11081)
!11099 = !DILocation(line: 7601, column: 7, scope: !11100)
!11100 = distinct !DILexicalBlock(scope: !11081, file: !3, line: 7601, column: 7)
!11101 = !DILocation(line: 7601, column: 7, scope: !11081)
!11102 = !DILocation(line: 7602, column: 16, scope: !11100)
!11103 = !DILocation(line: 7602, column: 5, scope: !11100)
!11104 = !DILocation(line: 7604, column: 27, scope: !11100)
!11105 = !DILocation(line: 7604, column: 5, scope: !11100)
!11106 = !DILocation(line: 7606, column: 15, scope: !11107)
!11107 = distinct !DILexicalBlock(scope: !11081, file: !3, line: 7606, column: 3)
!11108 = !DILocation(line: 7606, column: 13, scope: !11107)
!11109 = !DILocation(line: 7606, column: 8, scope: !11107)
!11110 = !DILocation(line: 7606, column: 40, scope: !11111)
!11111 = distinct !DILexicalBlock(scope: !11107, file: !3, line: 7606, column: 3)
!11112 = !DILocation(line: 7606, column: 3, scope: !11107)
!11113 = !DILocation(line: 7611, column: 12, scope: !11114)
!11114 = distinct !DILexicalBlock(scope: !11115, file: !3, line: 7611, column: 11)
!11115 = distinct !DILexicalBlock(scope: !11111, file: !3, line: 7607, column: 5)
!11116 = !DILocation(line: 7611, column: 41, scope: !11114)
!11117 = !DILocation(line: 7612, column: 5, scope: !11114)
!11118 = !DILocation(line: 7612, column: 8, scope: !11114)
!11119 = !DILocation(line: 7612, column: 37, scope: !11114)
!11120 = !DILocation(line: 7613, column: 11, scope: !11114)
!11121 = !DILocation(line: 7613, column: 15, scope: !11114)
!11122 = !DILocation(line: 7614, column: 11, scope: !11114)
!11123 = !DILocation(line: 7614, column: 40, scope: !11114)
!11124 = !DILocation(line: 7614, column: 15, scope: !11114)
!11125 = !DILocation(line: 7611, column: 11, scope: !11115)
!11126 = !DILocation(line: 7615, column: 9, scope: !11114)
!11127 = !DILocation(line: 7615, column: 34, scope: !11114)
!11128 = !DILocation(line: 7616, column: 5, scope: !11115)
!11129 = !DILocation(line: 7606, column: 54, scope: !11111)
!11130 = !DILocation(line: 7606, column: 52, scope: !11111)
!11131 = !DILocation(line: 7606, column: 3, scope: !11111)
!11132 = distinct !{!11132, !11112, !11133}
!11133 = !DILocation(line: 7616, column: 5, scope: !11107)
!11134 = !DILocation(line: 7618, column: 9, scope: !11081)
!11135 = !DILocation(line: 7618, column: 7, scope: !11081)
!11136 = !DILocation(line: 7619, column: 8, scope: !11137)
!11137 = distinct !DILexicalBlock(scope: !11081, file: !3, line: 7619, column: 7)
!11138 = !DILocation(line: 7619, column: 36, scope: !11137)
!11139 = !DILocation(line: 7620, column: 8, scope: !11137)
!11140 = !DILocation(line: 7620, column: 11, scope: !11137)
!11141 = !DILocation(line: 7620, column: 39, scope: !11137)
!11142 = !DILocation(line: 7621, column: 7, scope: !11137)
!11143 = !DILocation(line: 7621, column: 36, scope: !11137)
!11144 = !DILocation(line: 7621, column: 11, scope: !11137)
!11145 = !DILocation(line: 7619, column: 7, scope: !11081)
!11146 = !DILocation(line: 7622, column: 5, scope: !11137)
!11147 = !DILocation(line: 7622, column: 29, scope: !11137)
!11148 = !DILocation(line: 7624, column: 26, scope: !11081)
!11149 = !DILocation(line: 7624, column: 52, scope: !11081)
!11150 = !DILocation(line: 7624, column: 10, scope: !11081)
!11151 = !DILocation(line: 7624, column: 8, scope: !11081)
!11152 = !DILocation(line: 7628, column: 9, scope: !11081)
!11153 = !DILocation(line: 7628, column: 7, scope: !11081)
!11154 = !DILocation(line: 7629, column: 30, scope: !11081)
!11155 = !DILocation(line: 7629, column: 3, scope: !11081)
!11156 = !DILocation(line: 7630, column: 20, scope: !11081)
!11157 = !DILocation(line: 7630, column: 28, scope: !11081)
!11158 = !DILocation(line: 7630, column: 3, scope: !11081)
!11159 = !DILocation(line: 7636, column: 7, scope: !11160)
!11160 = distinct !DILexicalBlock(scope: !11081, file: !3, line: 7636, column: 7)
!11161 = !DILocation(line: 7637, column: 7, scope: !11160)
!11162 = !DILocation(line: 7637, column: 11, scope: !11160)
!11163 = !DILocation(line: 7638, column: 7, scope: !11160)
!11164 = !DILocation(line: 7638, column: 48, scope: !11160)
!11165 = !DILocation(line: 7638, column: 11, scope: !11160)
!11166 = !DILocation(line: 7636, column: 7, scope: !11081)
!11167 = !DILocalVariable(name: "x", scope: !11168, file: !3, line: 7640, type: !1686)
!11168 = distinct !DILexicalBlock(scope: !11160, file: !3, line: 7639, column: 5)
!11169 = !DILocation(line: 7640, column: 12, scope: !11168)
!11170 = !DILocalVariable(name: "new_bind", scope: !11168, file: !3, line: 7641, type: !2014)
!11171 = !DILocation(line: 7641, column: 14, scope: !11168)
!11172 = !DILocalVariable(name: "tf", scope: !11168, file: !3, line: 7642, type: !2014)
!11173 = !DILocation(line: 7642, column: 14, scope: !11168)
!11174 = !DILocalVariable(name: "cleanup", scope: !11168, file: !3, line: 7643, type: !2004)
!11175 = !DILocation(line: 7643, column: 18, scope: !11168)
!11176 = !DILocalVariable(name: "body", scope: !11168, file: !3, line: 7643, type: !2004)
!11177 = !DILocation(line: 7643, column: 34, scope: !11168)
!11178 = !DILocation(line: 7645, column: 11, scope: !11168)
!11179 = !DILocation(line: 7645, column: 9, scope: !11168)
!11180 = !DILocation(line: 7646, column: 59, scope: !11168)
!11181 = !DILocation(line: 7646, column: 40, scope: !11168)
!11182 = !DILocation(line: 7646, column: 7, scope: !11168)
!11183 = !DILocation(line: 7647, column: 30, scope: !11168)
!11184 = !DILocation(line: 7647, column: 35, scope: !11168)
!11185 = !DILocation(line: 7647, column: 12, scope: !11168)
!11186 = !DILocation(line: 7647, column: 10, scope: !11168)
!11187 = !DILocation(line: 7649, column: 11, scope: !11168)
!11188 = !DILocation(line: 7649, column: 9, scope: !11168)
!11189 = !DILocation(line: 7650, column: 56, scope: !11168)
!11190 = !DILocation(line: 7650, column: 37, scope: !11168)
!11191 = !DILocation(line: 7650, column: 7, scope: !11168)
!11192 = !DILocation(line: 7651, column: 37, scope: !11168)
!11193 = !DILocation(line: 7651, column: 7, scope: !11168)
!11194 = !DILocation(line: 7652, column: 43, scope: !11168)
!11195 = !DILocation(line: 7652, column: 68, scope: !11168)
!11196 = !DILocation(line: 7652, column: 49, scope: !11168)
!11197 = !DILocation(line: 7652, column: 18, scope: !11168)
!11198 = !DILocation(line: 7652, column: 16, scope: !11168)
!11199 = !DILocation(line: 7655, column: 30, scope: !11168)
!11200 = !DILocation(line: 7655, column: 7, scope: !11168)
!11201 = !DILocation(line: 7659, column: 13, scope: !11168)
!11202 = !DILocation(line: 7659, column: 11, scope: !11168)
!11203 = !DILocation(line: 7660, column: 34, scope: !11168)
!11204 = !DILocation(line: 7660, column: 7, scope: !11168)
!11205 = !DILocation(line: 7661, column: 24, scope: !11168)
!11206 = !DILocation(line: 7661, column: 32, scope: !11168)
!11207 = !DILocation(line: 7661, column: 7, scope: !11168)
!11208 = !DILocation(line: 7662, column: 5, scope: !11168)
!11209 = !DILocation(line: 7664, column: 3, scope: !11081)
!11210 = !DILocation(line: 7664, column: 28, scope: !11081)
!11211 = !DILocation(line: 7665, column: 3, scope: !11081)
!11212 = !DILocation(line: 7665, column: 9, scope: !11081)
!11213 = !DILocation(line: 7665, column: 25, scope: !11081)
!11214 = !DILocation(line: 7667, column: 27, scope: !11081)
!11215 = !DILocation(line: 7667, column: 25, scope: !11081)
!11216 = !DILocation(line: 7668, column: 3, scope: !11081)
!11217 = !DILocation(line: 7669, column: 1, scope: !11081)
!11218 = distinct !DISubprogram(name: "gimple_bind_set_block", scope: !385, file: !385, line: 2570, type: !3830, scopeLine: 2571, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!11219 = !DILocalVariable(name: "gs", arg: 1, scope: !11218, file: !385, line: 2570, type: !2014)
!11220 = !DILocation(line: 2570, column: 31, scope: !11218)
!11221 = !DILocalVariable(name: "block", arg: 2, scope: !11218, file: !385, line: 2570, type: !1686)
!11222 = !DILocation(line: 2570, column: 40, scope: !11218)
!11223 = !DILocation(line: 2573, column: 3, scope: !11218)
!11224 = !DILocation(line: 2574, column: 27, scope: !11218)
!11225 = !DILocation(line: 2574, column: 3, scope: !11218)
!11226 = !DILocation(line: 2574, column: 7, scope: !11218)
!11227 = !DILocation(line: 2574, column: 19, scope: !11218)
!11228 = !DILocation(line: 2574, column: 25, scope: !11218)
!11229 = !DILocation(line: 2575, column: 1, scope: !11218)
!11230 = distinct !DISubprogram(name: "gimple_regimplify_operands", scope: !3, file: !3, line: 7678, type: !11231, scopeLine: 7679, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!11231 = !DISubroutineType(types: !11232)
!11232 = !{null, !2014, !4146}
!11233 = !DILocalVariable(name: "stmt", arg: 1, scope: !11230, file: !3, line: 7678, type: !2014)
!11234 = !DILocation(line: 7678, column: 36, scope: !11230)
!11235 = !DILocalVariable(name: "gsi_p", arg: 2, scope: !11230, file: !3, line: 7678, type: !4146)
!11236 = !DILocation(line: 7678, column: 64, scope: !11230)
!11237 = !DILocalVariable(name: "i", scope: !11230, file: !3, line: 7680, type: !2160)
!11238 = !DILocation(line: 7680, column: 10, scope: !11230)
!11239 = !DILocalVariable(name: "num_ops", scope: !11230, file: !3, line: 7680, type: !2160)
!11240 = !DILocation(line: 7680, column: 13, scope: !11230)
!11241 = !DILocalVariable(name: "orig_lhs", scope: !11230, file: !3, line: 7681, type: !1686)
!11242 = !DILocation(line: 7681, column: 8, scope: !11230)
!11243 = !DILocalVariable(name: "lhs", scope: !11230, file: !3, line: 7681, type: !1686)
!11244 = !DILocation(line: 7681, column: 30, scope: !11230)
!11245 = !DILocalVariable(name: "t", scope: !11230, file: !3, line: 7681, type: !1686)
!11246 = !DILocation(line: 7681, column: 35, scope: !11230)
!11247 = !DILocalVariable(name: "pre", scope: !11230, file: !3, line: 7682, type: !2004)
!11248 = !DILocation(line: 7682, column: 14, scope: !11230)
!11249 = !DILocalVariable(name: "post_stmt", scope: !11230, file: !3, line: 7683, type: !2014)
!11250 = !DILocation(line: 7683, column: 10, scope: !11230)
!11251 = !DILocalVariable(name: "gctx", scope: !11230, file: !3, line: 7684, type: !3221)
!11252 = !DILocation(line: 7684, column: 23, scope: !11230)
!11253 = !DILocation(line: 7686, column: 3, scope: !11230)
!11254 = !DILocation(line: 7687, column: 46, scope: !11230)
!11255 = !DILocation(line: 7687, column: 29, scope: !11230)
!11256 = !DILocation(line: 7687, column: 3, scope: !11230)
!11257 = !DILocation(line: 7687, column: 18, scope: !11230)
!11258 = !DILocation(line: 7687, column: 27, scope: !11230)
!11259 = !DILocation(line: 7689, column: 24, scope: !11230)
!11260 = !DILocation(line: 7689, column: 11, scope: !11230)
!11261 = !DILocation(line: 7689, column: 3, scope: !11230)
!11262 = !DILocation(line: 7692, column: 43, scope: !11263)
!11263 = distinct !DILexicalBlock(scope: !11230, file: !3, line: 7690, column: 5)
!11264 = !DILocation(line: 7692, column: 22, scope: !11263)
!11265 = !DILocation(line: 7692, column: 7, scope: !11263)
!11266 = !DILocation(line: 7694, column: 43, scope: !11263)
!11267 = !DILocation(line: 7694, column: 22, scope: !11263)
!11268 = !DILocation(line: 7694, column: 7, scope: !11263)
!11269 = !DILocation(line: 7696, column: 7, scope: !11263)
!11270 = !DILocation(line: 7698, column: 47, scope: !11263)
!11271 = !DILocation(line: 7698, column: 22, scope: !11263)
!11272 = !DILocation(line: 7698, column: 7, scope: !11263)
!11273 = !DILocation(line: 7700, column: 7, scope: !11263)
!11274 = !DILocation(line: 7702, column: 54, scope: !11263)
!11275 = !DILocation(line: 7702, column: 22, scope: !11263)
!11276 = !DILocation(line: 7702, column: 7, scope: !11263)
!11277 = !DILocation(line: 7704, column: 7, scope: !11263)
!11278 = !DILocalVariable(name: "i", scope: !11279, file: !3, line: 7707, type: !2160)
!11279 = distinct !DILexicalBlock(scope: !11263, file: !3, line: 7706, column: 7)
!11280 = !DILocation(line: 7707, column: 9, scope: !11279)
!11281 = !DILocalVariable(name: "noutputs", scope: !11279, file: !3, line: 7707, type: !2160)
!11282 = !DILocation(line: 7707, column: 12, scope: !11279)
!11283 = !DILocation(line: 7707, column: 44, scope: !11279)
!11284 = !DILocation(line: 7707, column: 23, scope: !11279)
!11285 = !DILocalVariable(name: "constraint", scope: !11279, file: !3, line: 7708, type: !1888)
!11286 = !DILocation(line: 7708, column: 14, scope: !11279)
!11287 = !DILocalVariable(name: "oconstraints", scope: !11279, file: !3, line: 7708, type: !3119)
!11288 = !DILocation(line: 7708, column: 28, scope: !11279)
!11289 = !DILocalVariable(name: "allows_mem", scope: !11279, file: !3, line: 7709, type: !1804)
!11290 = !DILocation(line: 7709, column: 7, scope: !11279)
!11291 = !DILocalVariable(name: "allows_reg", scope: !11279, file: !3, line: 7709, type: !1804)
!11292 = !DILocation(line: 7709, column: 19, scope: !11279)
!11293 = !DILocalVariable(name: "is_inout", scope: !11279, file: !3, line: 7709, type: !1804)
!11294 = !DILocation(line: 7709, column: 31, scope: !11279)
!11295 = !DILocation(line: 7712, column: 22, scope: !11279)
!11296 = !DILocation(line: 7712, column: 6, scope: !11279)
!11297 = !DILocation(line: 7712, column: 4, scope: !11279)
!11298 = !DILocation(line: 7713, column: 9, scope: !11299)
!11299 = distinct !DILexicalBlock(scope: !11279, file: !3, line: 7713, column: 2)
!11300 = !DILocation(line: 7713, column: 7, scope: !11299)
!11301 = !DILocation(line: 7713, column: 14, scope: !11302)
!11302 = distinct !DILexicalBlock(scope: !11299, file: !3, line: 7713, column: 2)
!11303 = !DILocation(line: 7713, column: 18, scope: !11302)
!11304 = !DILocation(line: 7713, column: 16, scope: !11302)
!11305 = !DILocation(line: 7713, column: 2, scope: !11299)
!11306 = !DILocalVariable(name: "op", scope: !11307, file: !3, line: 7715, type: !1686)
!11307 = distinct !DILexicalBlock(scope: !11302, file: !3, line: 7714, column: 4)
!11308 = !DILocation(line: 7715, column: 11, scope: !11307)
!11309 = !DILocation(line: 7715, column: 38, scope: !11307)
!11310 = !DILocation(line: 7715, column: 44, scope: !11307)
!11311 = !DILocation(line: 7715, column: 16, scope: !11307)
!11312 = !DILocation(line: 7716, column: 19, scope: !11307)
!11313 = !DILocation(line: 7716, column: 17, scope: !11307)
!11314 = !DILocation(line: 7717, column: 24, scope: !11307)
!11315 = !DILocation(line: 7717, column: 6, scope: !11307)
!11316 = !DILocation(line: 7717, column: 19, scope: !11307)
!11317 = !DILocation(line: 7717, column: 22, scope: !11307)
!11318 = !DILocation(line: 7718, column: 44, scope: !11307)
!11319 = !DILocation(line: 7718, column: 6, scope: !11307)
!11320 = !DILocation(line: 7720, column: 22, scope: !11307)
!11321 = !DILocation(line: 7721, column: 7, scope: !11307)
!11322 = !DILocation(line: 7720, column: 6, scope: !11307)
!11323 = !DILocation(line: 7723, column: 4, scope: !11307)
!11324 = !DILocation(line: 7713, column: 29, scope: !11302)
!11325 = !DILocation(line: 7713, column: 2, scope: !11302)
!11326 = distinct !{!11326, !11305, !11327}
!11327 = !DILocation(line: 7723, column: 4, scope: !11299)
!11328 = !DILocation(line: 7724, column: 9, scope: !11329)
!11329 = distinct !DILexicalBlock(scope: !11279, file: !3, line: 7724, column: 2)
!11330 = !DILocation(line: 7724, column: 7, scope: !11329)
!11331 = !DILocation(line: 7724, column: 14, scope: !11332)
!11332 = distinct !DILexicalBlock(scope: !11329, file: !3, line: 7724, column: 2)
!11333 = !DILocation(line: 7724, column: 38, scope: !11332)
!11334 = !DILocation(line: 7724, column: 18, scope: !11332)
!11335 = !DILocation(line: 7724, column: 16, scope: !11332)
!11336 = !DILocation(line: 7724, column: 2, scope: !11329)
!11337 = !DILocalVariable(name: "op", scope: !11338, file: !3, line: 7726, type: !1686)
!11338 = distinct !DILexicalBlock(scope: !11332, file: !3, line: 7725, column: 4)
!11339 = !DILocation(line: 7726, column: 11, scope: !11338)
!11340 = !DILocation(line: 7726, column: 37, scope: !11338)
!11341 = !DILocation(line: 7726, column: 43, scope: !11338)
!11342 = !DILocation(line: 7726, column: 16, scope: !11338)
!11343 = !DILocation(line: 7727, column: 19, scope: !11338)
!11344 = !DILocation(line: 7727, column: 17, scope: !11338)
!11345 = !DILocation(line: 7728, column: 49, scope: !11338)
!11346 = !DILocation(line: 7729, column: 9, scope: !11338)
!11347 = !DILocation(line: 7728, column: 6, scope: !11338)
!11348 = !DILocation(line: 7730, column: 10, scope: !11349)
!11349 = distinct !DILexicalBlock(scope: !11338, file: !3, line: 7730, column: 10)
!11350 = !DILocation(line: 7730, column: 57, scope: !11349)
!11351 = !DILocation(line: 7730, column: 60, scope: !11349)
!11352 = !DILocation(line: 7730, column: 10, scope: !11338)
!11353 = !DILocation(line: 7731, column: 19, scope: !11349)
!11354 = !DILocation(line: 7731, column: 8, scope: !11349)
!11355 = !DILocation(line: 7732, column: 11, scope: !11356)
!11356 = distinct !DILexicalBlock(scope: !11338, file: !3, line: 7732, column: 10)
!11357 = !DILocation(line: 7732, column: 22, scope: !11356)
!11358 = !DILocation(line: 7732, column: 25, scope: !11356)
!11359 = !DILocation(line: 7732, column: 10, scope: !11338)
!11360 = !DILocation(line: 7733, column: 24, scope: !11356)
!11361 = !DILocation(line: 7733, column: 8, scope: !11356)
!11362 = !DILocation(line: 7736, column: 24, scope: !11356)
!11363 = !DILocation(line: 7736, column: 8, scope: !11356)
!11364 = !DILocation(line: 7738, column: 4, scope: !11338)
!11365 = !DILocation(line: 7724, column: 46, scope: !11332)
!11366 = !DILocation(line: 7724, column: 2, scope: !11332)
!11367 = distinct !{!11367, !11336, !11368}
!11368 = !DILocation(line: 7738, column: 4, scope: !11329)
!11369 = !DILocation(line: 7740, column: 7, scope: !11263)
!11370 = !DILocation(line: 7746, column: 33, scope: !11263)
!11371 = !DILocation(line: 7746, column: 17, scope: !11263)
!11372 = !DILocation(line: 7746, column: 15, scope: !11263)
!11373 = !DILocation(line: 7747, column: 34, scope: !11263)
!11374 = !DILocation(line: 7747, column: 18, scope: !11263)
!11375 = !DILocation(line: 7747, column: 16, scope: !11263)
!11376 = !DILocation(line: 7748, column: 16, scope: !11377)
!11377 = distinct !DILexicalBlock(scope: !11263, file: !3, line: 7748, column: 7)
!11378 = !DILocation(line: 7748, column: 14, scope: !11377)
!11379 = !DILocation(line: 7748, column: 12, scope: !11377)
!11380 = !DILocation(line: 7748, column: 25, scope: !11381)
!11381 = distinct !DILexicalBlock(scope: !11377, file: !3, line: 7748, column: 7)
!11382 = !DILocation(line: 7748, column: 27, scope: !11381)
!11383 = !DILocation(line: 7748, column: 7, scope: !11377)
!11384 = !DILocalVariable(name: "op", scope: !11385, file: !3, line: 7750, type: !1686)
!11385 = distinct !DILexicalBlock(scope: !11381, file: !3, line: 7749, column: 2)
!11386 = !DILocation(line: 7750, column: 9, scope: !11385)
!11387 = !DILocation(line: 7750, column: 25, scope: !11385)
!11388 = !DILocation(line: 7750, column: 31, scope: !11385)
!11389 = !DILocation(line: 7750, column: 33, scope: !11385)
!11390 = !DILocation(line: 7750, column: 14, scope: !11385)
!11391 = !DILocation(line: 7751, column: 8, scope: !11392)
!11392 = distinct !DILexicalBlock(scope: !11385, file: !3, line: 7751, column: 8)
!11393 = !DILocation(line: 7751, column: 11, scope: !11392)
!11394 = !DILocation(line: 7751, column: 8, scope: !11385)
!11395 = !DILocation(line: 7752, column: 6, scope: !11392)
!11396 = !DILocation(line: 7753, column: 8, scope: !11397)
!11397 = distinct !DILexicalBlock(scope: !11385, file: !3, line: 7753, column: 8)
!11398 = !DILocation(line: 7753, column: 10, scope: !11397)
!11399 = !DILocation(line: 7753, column: 15, scope: !11397)
!11400 = !DILocation(line: 7753, column: 35, scope: !11397)
!11401 = !DILocation(line: 7753, column: 19, scope: !11397)
!11402 = !DILocation(line: 7753, column: 41, scope: !11397)
!11403 = !DILocation(line: 7753, column: 62, scope: !11397)
!11404 = !DILocation(line: 7753, column: 44, scope: !11397)
!11405 = !DILocation(line: 7753, column: 8, scope: !11385)
!11406 = !DILocation(line: 7754, column: 6, scope: !11397)
!11407 = !DILocation(line: 7755, column: 13, scope: !11408)
!11408 = distinct !DILexicalBlock(scope: !11397, file: !3, line: 7755, column: 13)
!11409 = !DILocation(line: 7755, column: 15, scope: !11408)
!11410 = !DILocation(line: 7756, column: 6, scope: !11408)
!11411 = !DILocation(line: 7756, column: 27, scope: !11408)
!11412 = !DILocation(line: 7756, column: 9, scope: !11408)
!11413 = !DILocation(line: 7757, column: 6, scope: !11408)
!11414 = !DILocation(line: 7757, column: 9, scope: !11408)
!11415 = !DILocation(line: 7757, column: 17, scope: !11408)
!11416 = !DILocation(line: 7758, column: 6, scope: !11408)
!11417 = !DILocation(line: 7758, column: 49, scope: !11408)
!11418 = !DILocation(line: 7758, column: 31, scope: !11408)
!11419 = !DILocation(line: 7758, column: 9, scope: !11408)
!11420 = !DILocation(line: 7759, column: 9, scope: !11408)
!11421 = !DILocation(line: 7755, column: 13, scope: !11397)
!11422 = !DILocation(line: 7761, column: 45, scope: !11408)
!11423 = !DILocation(line: 7761, column: 26, scope: !11408)
!11424 = !DILocation(line: 7761, column: 7, scope: !11408)
!11425 = !DILocation(line: 7760, column: 6, scope: !11408)
!11426 = !DILocation(line: 7763, column: 13, scope: !11427)
!11427 = distinct !DILexicalBlock(scope: !11408, file: !3, line: 7763, column: 13)
!11428 = !DILocation(line: 7763, column: 15, scope: !11427)
!11429 = !DILocation(line: 7763, column: 20, scope: !11427)
!11430 = !DILocation(line: 7763, column: 39, scope: !11427)
!11431 = !DILocation(line: 7763, column: 23, scope: !11427)
!11432 = !DILocation(line: 7763, column: 13, scope: !11408)
!11433 = !DILocation(line: 7765, column: 12, scope: !11434)
!11434 = distinct !DILexicalBlock(scope: !11435, file: !3, line: 7765, column: 12)
!11435 = distinct !DILexicalBlock(scope: !11427, file: !3, line: 7764, column: 6)
!11436 = !DILocation(line: 7765, column: 27, scope: !11434)
!11437 = !DILocation(line: 7765, column: 12, scope: !11435)
!11438 = !DILocation(line: 7766, column: 3, scope: !11434)
!11439 = !DILocation(line: 7767, column: 8, scope: !11435)
!11440 = !DILocation(line: 7768, column: 6, scope: !11435)
!11441 = !DILocation(line: 7770, column: 6, scope: !11427)
!11442 = !DILocation(line: 7771, column: 19, scope: !11385)
!11443 = !DILocation(line: 7771, column: 25, scope: !11385)
!11444 = !DILocation(line: 7771, column: 27, scope: !11385)
!11445 = !DILocation(line: 7771, column: 32, scope: !11385)
!11446 = !DILocation(line: 7771, column: 4, scope: !11385)
!11447 = !DILocation(line: 7772, column: 2, scope: !11385)
!11448 = !DILocation(line: 7748, column: 33, scope: !11381)
!11449 = !DILocation(line: 7748, column: 7, scope: !11381)
!11450 = distinct !{!11450, !11383, !11451}
!11451 = !DILocation(line: 7772, column: 2, scope: !11377)
!11452 = !DILocation(line: 7774, column: 29, scope: !11263)
!11453 = !DILocation(line: 7774, column: 13, scope: !11263)
!11454 = !DILocation(line: 7774, column: 11, scope: !11263)
!11455 = !DILocation(line: 7777, column: 11, scope: !11456)
!11456 = distinct !DILexicalBlock(scope: !11263, file: !3, line: 7777, column: 11)
!11457 = !DILocation(line: 7777, column: 15, scope: !11456)
!11458 = !DILocation(line: 7777, column: 34, scope: !11456)
!11459 = !DILocation(line: 7777, column: 19, scope: !11456)
!11460 = !DILocation(line: 7777, column: 11, scope: !11263)
!11461 = !DILocalVariable(name: "need_temp", scope: !11462, file: !3, line: 7779, type: !1804)
!11462 = distinct !DILexicalBlock(scope: !11456, file: !3, line: 7778, column: 2)
!11463 = !DILocation(line: 7779, column: 9, scope: !11462)
!11464 = !DILocation(line: 7781, column: 26, scope: !11465)
!11465 = distinct !DILexicalBlock(scope: !11462, file: !3, line: 7781, column: 8)
!11466 = !DILocation(line: 7781, column: 8, scope: !11465)
!11467 = !DILocation(line: 7782, column: 8, scope: !11465)
!11468 = !DILocation(line: 7782, column: 11, scope: !11465)
!11469 = !DILocation(line: 7782, column: 19, scope: !11465)
!11470 = !DILocation(line: 7783, column: 8, scope: !11465)
!11471 = !DILocation(line: 7783, column: 51, scope: !11465)
!11472 = !DILocation(line: 7783, column: 33, scope: !11465)
!11473 = !DILocation(line: 7783, column: 11, scope: !11465)
!11474 = !DILocation(line: 7784, column: 4, scope: !11465)
!11475 = !DILocation(line: 7781, column: 8, scope: !11462)
!11476 = !DILocation(line: 7785, column: 45, scope: !11465)
!11477 = !DILocation(line: 7785, column: 21, scope: !11465)
!11478 = !DILocation(line: 7786, column: 45, scope: !11465)
!11479 = !DILocation(line: 7786, column: 26, scope: !11465)
!11480 = !DILocation(line: 7786, column: 7, scope: !11465)
!11481 = !DILocation(line: 7785, column: 6, scope: !11465)
!11482 = !DILocation(line: 7788, column: 28, scope: !11483)
!11483 = distinct !DILexicalBlock(scope: !11465, file: !3, line: 7788, column: 13)
!11484 = !DILocation(line: 7788, column: 13, scope: !11483)
!11485 = !DILocation(line: 7788, column: 13, scope: !11465)
!11486 = !DILocation(line: 7790, column: 32, scope: !11487)
!11487 = distinct !DILexicalBlock(scope: !11488, file: !3, line: 7790, column: 12)
!11488 = distinct !DILexicalBlock(scope: !11483, file: !3, line: 7789, column: 6)
!11489 = !DILocation(line: 7790, column: 12, scope: !11487)
!11490 = !DILocation(line: 7790, column: 12, scope: !11488)
!11491 = !DILocation(line: 7792, column: 25, scope: !11492)
!11492 = distinct !DILexicalBlock(scope: !11493, file: !3, line: 7792, column: 9)
!11493 = distinct !DILexicalBlock(scope: !11487, file: !3, line: 7791, column: 3)
!11494 = !DILocation(line: 7792, column: 9, scope: !11492)
!11495 = !DILocation(line: 7792, column: 9, scope: !11493)
!11496 = !DILocation(line: 7794, column: 32, scope: !11497)
!11497 = distinct !DILexicalBlock(scope: !11492, file: !3, line: 7793, column: 7)
!11498 = !DILocation(line: 7794, column: 13, scope: !11497)
!11499 = !DILocation(line: 7794, column: 11, scope: !11497)
!11500 = !DILocation(line: 7795, column: 14, scope: !11501)
!11501 = distinct !DILexicalBlock(scope: !11497, file: !3, line: 7795, column: 13)
!11502 = !DILocation(line: 7795, column: 16, scope: !11501)
!11503 = !DILocation(line: 7796, column: 6, scope: !11501)
!11504 = !DILocation(line: 7796, column: 11, scope: !11501)
!11505 = !DILocation(line: 7796, column: 13, scope: !11501)
!11506 = !DILocation(line: 7795, column: 13, scope: !11497)
!11507 = !DILocation(line: 7797, column: 14, scope: !11501)
!11508 = !DILocation(line: 7797, column: 4, scope: !11501)
!11509 = !DILocation(line: 7798, column: 7, scope: !11497)
!11510 = !DILocation(line: 7799, column: 34, scope: !11511)
!11511 = distinct !DILexicalBlock(scope: !11493, file: !3, line: 7799, column: 9)
!11512 = !DILocation(line: 7799, column: 9, scope: !11511)
!11513 = !DILocation(line: 7799, column: 9, scope: !11493)
!11514 = !DILocation(line: 7800, column: 17, scope: !11511)
!11515 = !DILocation(line: 7800, column: 7, scope: !11511)
!11516 = !DILocation(line: 7801, column: 3, scope: !11493)
!11517 = !DILocation(line: 7802, column: 6, scope: !11488)
!11518 = !DILocation(line: 7805, column: 32, scope: !11519)
!11519 = distinct !DILexicalBlock(scope: !11520, file: !3, line: 7805, column: 12)
!11520 = distinct !DILexicalBlock(scope: !11483, file: !3, line: 7804, column: 6)
!11521 = !DILocation(line: 7805, column: 12, scope: !11519)
!11522 = !DILocation(line: 7805, column: 12, scope: !11520)
!11523 = !DILocation(line: 7806, column: 13, scope: !11519)
!11524 = !DILocation(line: 7806, column: 3, scope: !11519)
!11525 = !DILocation(line: 7807, column: 17, scope: !11526)
!11526 = distinct !DILexicalBlock(scope: !11519, file: !3, line: 7807, column: 17)
!11527 = !DILocation(line: 7807, column: 45, scope: !11526)
!11528 = !DILocation(line: 7807, column: 17, scope: !11519)
!11529 = !DILocation(line: 7809, column: 25, scope: !11530)
!11530 = distinct !DILexicalBlock(scope: !11531, file: !3, line: 7809, column: 9)
!11531 = distinct !DILexicalBlock(scope: !11526, file: !3, line: 7808, column: 3)
!11532 = !DILocation(line: 7809, column: 9, scope: !11530)
!11533 = !DILocation(line: 7809, column: 9, scope: !11531)
!11534 = !DILocalVariable(name: "fndecl", scope: !11535, file: !3, line: 7811, type: !1686)
!11535 = distinct !DILexicalBlock(scope: !11530, file: !3, line: 7810, column: 7)
!11536 = !DILocation(line: 7811, column: 14, scope: !11535)
!11537 = !DILocation(line: 7811, column: 43, scope: !11535)
!11538 = !DILocation(line: 7811, column: 23, scope: !11535)
!11539 = !DILocation(line: 7813, column: 33, scope: !11540)
!11540 = distinct !DILexicalBlock(scope: !11535, file: !3, line: 7813, column: 13)
!11541 = !DILocation(line: 7813, column: 50, scope: !11540)
!11542 = !DILocation(line: 7813, column: 14, scope: !11540)
!11543 = !DILocation(line: 7814, column: 6, scope: !11540)
!11544 = !DILocation(line: 7814, column: 11, scope: !11540)
!11545 = !DILocation(line: 7814, column: 18, scope: !11540)
!11546 = !DILocation(line: 7814, column: 21, scope: !11540)
!11547 = !DILocation(line: 7815, column: 11, scope: !11540)
!11548 = !DILocation(line: 7815, column: 14, scope: !11540)
!11549 = !DILocation(line: 7813, column: 13, scope: !11535)
!11550 = !DILocation(line: 7816, column: 14, scope: !11540)
!11551 = !DILocation(line: 7816, column: 4, scope: !11540)
!11552 = !DILocation(line: 7817, column: 7, scope: !11535)
!11553 = !DILocation(line: 7819, column: 17, scope: !11530)
!11554 = !DILocation(line: 7820, column: 3, scope: !11531)
!11555 = !DILocation(line: 7822, column: 8, scope: !11556)
!11556 = distinct !DILexicalBlock(scope: !11462, file: !3, line: 7822, column: 8)
!11557 = !DILocation(line: 7822, column: 8, scope: !11462)
!11558 = !DILocalVariable(name: "temp", scope: !11559, file: !3, line: 7824, type: !1686)
!11559 = distinct !DILexicalBlock(scope: !11556, file: !3, line: 7823, column: 6)
!11560 = !DILocation(line: 7824, column: 13, scope: !11559)
!11561 = !DILocation(line: 7824, column: 36, scope: !11559)
!11562 = !DILocation(line: 7824, column: 20, scope: !11559)
!11563 = !DILocation(line: 7826, column: 12, scope: !11564)
!11564 = distinct !DILexicalBlock(scope: !11559, file: !3, line: 7826, column: 12)
!11565 = !DILocation(line: 7826, column: 40, scope: !11564)
!11566 = !DILocation(line: 7827, column: 5, scope: !11564)
!11567 = !DILocation(line: 7827, column: 8, scope: !11564)
!11568 = !DILocation(line: 7827, column: 36, scope: !11564)
!11569 = !DILocation(line: 7826, column: 12, scope: !11559)
!11570 = !DILocation(line: 7828, column: 3, scope: !11564)
!11571 = !DILocation(line: 7828, column: 28, scope: !11564)
!11572 = !DILocation(line: 7829, column: 12, scope: !11573)
!11573 = distinct !DILexicalBlock(scope: !11559, file: !3, line: 7829, column: 12)
!11574 = !DILocation(line: 7829, column: 33, scope: !11573)
!11575 = !DILocation(line: 7829, column: 12, scope: !11559)
!11576 = !DILocation(line: 7830, column: 14, scope: !11573)
!11577 = !DILocation(line: 7830, column: 12, scope: !11573)
!11578 = !DILocation(line: 7830, column: 3, scope: !11573)
!11579 = !DILocation(line: 7832, column: 29, scope: !11580)
!11580 = distinct !DILexicalBlock(scope: !11559, file: !3, line: 7832, column: 12)
!11581 = !DILocation(line: 7832, column: 12, scope: !11580)
!11582 = !DILocation(line: 7832, column: 12, scope: !11559)
!11583 = !DILocation(line: 7833, column: 25, scope: !11580)
!11584 = !DILocation(line: 7833, column: 10, scope: !11580)
!11585 = !DILocation(line: 7833, column: 8, scope: !11580)
!11586 = !DILocation(line: 7833, column: 3, scope: !11580)
!11587 = !DILocation(line: 7834, column: 24, scope: !11559)
!11588 = !DILocation(line: 7834, column: 30, scope: !11559)
!11589 = !DILocation(line: 7834, column: 8, scope: !11559)
!11590 = !DILocation(line: 7835, column: 20, scope: !11559)
!11591 = !DILocation(line: 7835, column: 18, scope: !11559)
!11592 = !DILocation(line: 7836, column: 12, scope: !11593)
!11593 = distinct !DILexicalBlock(scope: !11559, file: !3, line: 7836, column: 12)
!11594 = !DILocation(line: 7836, column: 28, scope: !11593)
!11595 = !DILocation(line: 7836, column: 12, scope: !11559)
!11596 = !DILocation(line: 7837, column: 29, scope: !11593)
!11597 = !DILocation(line: 7837, column: 3, scope: !11593)
!11598 = !DILocation(line: 7837, column: 27, scope: !11593)
!11599 = !DILocation(line: 7838, column: 6, scope: !11559)
!11600 = !DILocation(line: 7839, column: 2, scope: !11462)
!11601 = !DILocation(line: 7840, column: 7, scope: !11263)
!11602 = !DILocation(line: 7843, column: 31, scope: !11603)
!11603 = distinct !DILexicalBlock(scope: !11230, file: !3, line: 7843, column: 7)
!11604 = !DILocation(line: 7843, column: 7, scope: !11603)
!11605 = !DILocation(line: 7843, column: 7, scope: !11230)
!11606 = !DILocation(line: 7844, column: 14, scope: !11607)
!11607 = distinct !DILexicalBlock(scope: !11603, file: !3, line: 7844, column: 5)
!11608 = !DILocation(line: 7844, column: 29, scope: !11607)
!11609 = !DILocation(line: 7844, column: 12, scope: !11607)
!11610 = !DILocation(line: 7844, column: 10, scope: !11607)
!11611 = !DILocation(line: 7844, column: 36, scope: !11612)
!11612 = distinct !DILexicalBlock(scope: !11607, file: !3, line: 7844, column: 5)
!11613 = !DILocation(line: 7844, column: 5, scope: !11607)
!11614 = !DILocation(line: 7845, column: 27, scope: !11612)
!11615 = !DILocation(line: 7845, column: 7, scope: !11612)
!11616 = !DILocation(line: 7844, column: 44, scope: !11612)
!11617 = !DILocation(line: 7844, column: 42, scope: !11612)
!11618 = !DILocation(line: 7844, column: 5, scope: !11612)
!11619 = distinct !{!11619, !11613, !11620}
!11620 = !DILocation(line: 7845, column: 28, scope: !11607)
!11621 = !DILocation(line: 7847, column: 28, scope: !11622)
!11622 = distinct !DILexicalBlock(scope: !11230, file: !3, line: 7847, column: 7)
!11623 = !DILocation(line: 7847, column: 8, scope: !11622)
!11624 = !DILocation(line: 7847, column: 7, scope: !11230)
!11625 = !DILocation(line: 7849, column: 28, scope: !11626)
!11626 = distinct !DILexicalBlock(scope: !11627, file: !3, line: 7849, column: 11)
!11627 = distinct !DILexicalBlock(scope: !11622, file: !3, line: 7848, column: 5)
!11628 = !DILocation(line: 7849, column: 11, scope: !11626)
!11629 = !DILocation(line: 7849, column: 11, scope: !11627)
!11630 = !DILocalVariable(name: "i", scope: !11631, file: !3, line: 7851, type: !4033)
!11631 = distinct !DILexicalBlock(scope: !11626, file: !3, line: 7850, column: 2)
!11632 = !DILocation(line: 7851, column: 25, scope: !11631)
!11633 = !DILocation(line: 7853, column: 24, scope: !11634)
!11634 = distinct !DILexicalBlock(scope: !11631, file: !3, line: 7853, column: 4)
!11635 = !DILocation(line: 7853, column: 13, scope: !11634)
!11636 = !DILocation(line: 7853, column: 9, scope: !11634)
!11637 = !DILocation(line: 7853, column: 31, scope: !11638)
!11638 = distinct !DILexicalBlock(scope: !11634, file: !3, line: 7853, column: 4)
!11639 = !DILocation(line: 7853, column: 30, scope: !11638)
!11640 = !DILocation(line: 7853, column: 4, scope: !11634)
!11641 = !DILocation(line: 7854, column: 33, scope: !11638)
!11642 = !DILocation(line: 7854, column: 6, scope: !11638)
!11643 = !DILocation(line: 7853, column: 46, scope: !11638)
!11644 = !DILocation(line: 7853, column: 4, scope: !11638)
!11645 = distinct !{!11645, !11640, !11646}
!11646 = !DILocation(line: 7854, column: 45, scope: !11634)
!11647 = !DILocation(line: 7855, column: 2, scope: !11631)
!11648 = !DILocation(line: 7856, column: 30, scope: !11627)
!11649 = !DILocation(line: 7856, column: 37, scope: !11627)
!11650 = !DILocation(line: 7856, column: 7, scope: !11627)
!11651 = !DILocation(line: 7857, column: 5, scope: !11627)
!11652 = !DILocation(line: 7858, column: 7, scope: !11653)
!11653 = distinct !DILexicalBlock(scope: !11230, file: !3, line: 7858, column: 7)
!11654 = !DILocation(line: 7858, column: 7, scope: !11230)
!11655 = !DILocation(line: 7859, column: 23, scope: !11653)
!11656 = !DILocation(line: 7859, column: 30, scope: !11653)
!11657 = !DILocation(line: 7859, column: 5, scope: !11653)
!11658 = !DILocation(line: 7861, column: 3, scope: !11230)
!11659 = !DILocation(line: 7862, column: 1, scope: !11230)
!11660 = distinct !DISubprogram(name: "gimple_in_ssa_p", scope: !11661, file: !11661, line: 33, type: !11662, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!11661 = !DIFile(filename: "./tree-flow-inline.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!11662 = !DISubroutineType(types: !11663)
!11663 = !{!1804, !11664}
!11664 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11665, size: 64)
!11665 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2437)
!11666 = !DILocalVariable(name: "fun", arg: 1, scope: !11660, file: !11661, line: 33, type: !11664)
!11667 = !DILocation(line: 33, column: 41, scope: !11660)
!11668 = !DILocation(line: 35, column: 10, scope: !11660)
!11669 = !DILocation(line: 35, column: 14, scope: !11660)
!11670 = !DILocation(line: 35, column: 17, scope: !11660)
!11671 = !DILocation(line: 35, column: 22, scope: !11660)
!11672 = !DILocation(line: 35, column: 32, scope: !11660)
!11673 = !DILocation(line: 35, column: 35, scope: !11660)
!11674 = !DILocation(line: 35, column: 40, scope: !11660)
!11675 = !DILocation(line: 35, column: 51, scope: !11660)
!11676 = !DILocation(line: 0, scope: !11660)
!11677 = !DILocation(line: 35, column: 3, scope: !11660)
!11678 = distinct !DISubprogram(name: "gimple_cond_lhs_ptr", scope: !385, file: !385, line: 2251, type: !11679, scopeLine: 2252, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!11679 = !DISubroutineType(types: !11680)
!11680 = !{!2049, !3806}
!11681 = !DILocalVariable(name: "gs", arg: 1, scope: !11678, file: !385, line: 2251, type: !3806)
!11682 = !DILocation(line: 2251, column: 35, scope: !11678)
!11683 = !DILocation(line: 2254, column: 25, scope: !11678)
!11684 = !DILocation(line: 2254, column: 10, scope: !11678)
!11685 = !DILocation(line: 2254, column: 3, scope: !11678)
!11686 = distinct !DISubprogram(name: "gimple_cond_rhs_ptr", scope: !385, file: !385, line: 2281, type: !11679, scopeLine: 2282, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!11687 = !DILocalVariable(name: "gs", arg: 1, scope: !11686, file: !385, line: 2281, type: !3806)
!11688 = !DILocation(line: 2281, column: 35, scope: !11686)
!11689 = !DILocation(line: 2284, column: 25, scope: !11686)
!11690 = !DILocation(line: 2284, column: 10, scope: !11686)
!11691 = !DILocation(line: 2284, column: 3, scope: !11686)
!11692 = distinct !DISubprogram(name: "gimple_switch_index_ptr", scope: !385, file: !385, line: 3190, type: !11679, scopeLine: 3191, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!11693 = !DILocalVariable(name: "gs", arg: 1, scope: !11692, file: !385, line: 3190, type: !3806)
!11694 = !DILocation(line: 3190, column: 39, scope: !11692)
!11695 = !DILocation(line: 3193, column: 25, scope: !11692)
!11696 = !DILocation(line: 3193, column: 10, scope: !11692)
!11697 = !DILocation(line: 3193, column: 3, scope: !11692)
!11698 = distinct !DISubprogram(name: "gimple_omp_atomic_load_rhs_ptr", scope: !385, file: !385, line: 4176, type: !11699, scopeLine: 4177, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!11699 = !DISubroutineType(types: !11700)
!11700 = !{!2049, !2014}
!11701 = !DILocalVariable(name: "g", arg: 1, scope: !11698, file: !385, line: 4176, type: !2014)
!11702 = !DILocation(line: 4176, column: 40, scope: !11698)
!11703 = !DILocation(line: 4179, column: 11, scope: !11698)
!11704 = !DILocation(line: 4179, column: 14, scope: !11698)
!11705 = !DILocation(line: 4179, column: 37, scope: !11698)
!11706 = !DILocation(line: 4179, column: 3, scope: !11698)
!11707 = distinct !DISubprogram(name: "gimple_asm_noutputs", scope: !385, file: !385, line: 2591, type: !11708, scopeLine: 2592, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!11708 = !DISubroutineType(types: !11709)
!11709 = !{!7, !3806}
!11710 = !DILocalVariable(name: "gs", arg: 1, scope: !11707, file: !385, line: 2591, type: !3806)
!11711 = !DILocation(line: 2591, column: 35, scope: !11707)
!11712 = !DILocation(line: 2594, column: 10, scope: !11707)
!11713 = !DILocation(line: 2594, column: 14, scope: !11707)
!11714 = !DILocation(line: 2594, column: 25, scope: !11707)
!11715 = !DILocation(line: 2594, column: 3, scope: !11707)
!11716 = distinct !DISubprogram(name: "gimple_asm_output_op", scope: !385, file: !385, line: 2652, type: !11717, scopeLine: 2653, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!11717 = !DISubroutineType(types: !11718)
!11718 = !{!1686, !3806, !7}
!11719 = !DILocalVariable(name: "gs", arg: 1, scope: !11716, file: !385, line: 2652, type: !3806)
!11720 = !DILocation(line: 2652, column: 36, scope: !11716)
!11721 = !DILocalVariable(name: "index", arg: 2, scope: !11716, file: !385, line: 2652, type: !7)
!11722 = !DILocation(line: 2652, column: 49, scope: !11716)
!11723 = !DILocation(line: 2655, column: 3, scope: !11716)
!11724 = !DILocation(line: 2656, column: 21, scope: !11716)
!11725 = !DILocation(line: 2656, column: 25, scope: !11716)
!11726 = !DILocation(line: 2656, column: 33, scope: !11716)
!11727 = !DILocation(line: 2656, column: 37, scope: !11716)
!11728 = !DILocation(line: 2656, column: 48, scope: !11716)
!11729 = !DILocation(line: 2656, column: 31, scope: !11716)
!11730 = !DILocation(line: 2656, column: 10, scope: !11716)
!11731 = !DILocation(line: 2656, column: 3, scope: !11716)
!11732 = distinct !DISubprogram(name: "gimple_asm_ninputs", scope: !385, file: !385, line: 2581, type: !11708, scopeLine: 2582, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!11733 = !DILocalVariable(name: "gs", arg: 1, scope: !11732, file: !385, line: 2581, type: !3806)
!11734 = !DILocation(line: 2581, column: 34, scope: !11732)
!11735 = !DILocation(line: 2584, column: 10, scope: !11732)
!11736 = !DILocation(line: 2584, column: 14, scope: !11732)
!11737 = !DILocation(line: 2584, column: 25, scope: !11732)
!11738 = !DILocation(line: 2584, column: 3, scope: !11732)
!11739 = distinct !DISubprogram(name: "gimple_asm_input_op", scope: !385, file: !385, line: 2619, type: !11717, scopeLine: 2620, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!11740 = !DILocalVariable(name: "gs", arg: 1, scope: !11739, file: !385, line: 2619, type: !3806)
!11741 = !DILocation(line: 2619, column: 35, scope: !11739)
!11742 = !DILocalVariable(name: "index", arg: 2, scope: !11739, file: !385, line: 2619, type: !7)
!11743 = !DILocation(line: 2619, column: 48, scope: !11739)
!11744 = !DILocation(line: 2622, column: 3, scope: !11739)
!11745 = !DILocation(line: 2623, column: 21, scope: !11739)
!11746 = !DILocation(line: 2623, column: 25, scope: !11739)
!11747 = !DILocation(line: 2623, column: 10, scope: !11739)
!11748 = !DILocation(line: 2623, column: 3, scope: !11739)
!11749 = distinct !DISubprogram(name: "gimple_num_ops", scope: !385, file: !385, line: 1596, type: !11708, scopeLine: 1597, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!11750 = !DILocalVariable(name: "gs", arg: 1, scope: !11749, file: !385, line: 1596, type: !3806)
!11751 = !DILocation(line: 1596, column: 30, scope: !11749)
!11752 = !DILocation(line: 1598, column: 10, scope: !11749)
!11753 = !DILocation(line: 1598, column: 14, scope: !11749)
!11754 = !DILocation(line: 1598, column: 21, scope: !11749)
!11755 = !DILocation(line: 1598, column: 3, scope: !11749)
!11756 = distinct !DISubprogram(name: "gimple_op", scope: !385, file: !385, line: 1631, type: !11717, scopeLine: 1632, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!11757 = !DILocalVariable(name: "gs", arg: 1, scope: !11756, file: !385, line: 1631, type: !3806)
!11758 = !DILocation(line: 1631, column: 25, scope: !11756)
!11759 = !DILocalVariable(name: "i", arg: 2, scope: !11756, file: !385, line: 1631, type: !7)
!11760 = !DILocation(line: 1631, column: 38, scope: !11756)
!11761 = !DILocation(line: 1633, column: 23, scope: !11762)
!11762 = distinct !DILexicalBlock(scope: !11756, file: !385, line: 1633, column: 7)
!11763 = !DILocation(line: 1633, column: 7, scope: !11762)
!11764 = !DILocation(line: 1633, column: 7, scope: !11756)
!11765 = !DILocation(line: 1638, column: 26, scope: !11766)
!11766 = distinct !DILexicalBlock(scope: !11762, file: !385, line: 1634, column: 5)
!11767 = !DILocation(line: 1638, column: 14, scope: !11766)
!11768 = !DILocation(line: 1638, column: 50, scope: !11766)
!11769 = !DILocation(line: 1638, column: 7, scope: !11766)
!11770 = !DILocation(line: 1641, column: 5, scope: !11762)
!11771 = !DILocation(line: 1642, column: 1, scope: !11756)
!11772 = distinct !DISubprogram(name: "is_gimple_call", scope: !385, file: !385, line: 1870, type: !11773, scopeLine: 1871, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!11773 = !DISubroutineType(types: !11774)
!11774 = !{!1804, !3806}
!11775 = !DILocalVariable(name: "gs", arg: 1, scope: !11772, file: !385, line: 1870, type: !3806)
!11776 = !DILocation(line: 1870, column: 30, scope: !11772)
!11777 = !DILocation(line: 1872, column: 23, scope: !11772)
!11778 = !DILocation(line: 1872, column: 10, scope: !11772)
!11779 = !DILocation(line: 1872, column: 27, scope: !11772)
!11780 = !DILocation(line: 1872, column: 3, scope: !11772)
!11781 = distinct !DISubprogram(name: "is_gimple_assign", scope: !385, file: !385, line: 1677, type: !11773, scopeLine: 1678, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!11782 = !DILocalVariable(name: "gs", arg: 1, scope: !11781, file: !385, line: 1677, type: !3806)
!11783 = !DILocation(line: 1677, column: 32, scope: !11781)
!11784 = !DILocation(line: 1679, column: 23, scope: !11781)
!11785 = !DILocation(line: 1679, column: 10, scope: !11781)
!11786 = !DILocation(line: 1679, column: 27, scope: !11781)
!11787 = !DILocation(line: 1679, column: 3, scope: !11781)
!11788 = distinct !DISubprogram(name: "get_gimple_rhs_class", scope: !385, file: !385, line: 1686, type: !11789, scopeLine: 1687, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!11789 = !DISubroutineType(types: !11790)
!11790 = !{!1554, !134}
!11791 = !DILocalVariable(name: "code", arg: 1, scope: !11788, file: !385, line: 1686, type: !134)
!11792 = !DILocation(line: 1686, column: 38, scope: !11788)
!11793 = !DILocation(line: 1688, column: 63, scope: !11788)
!11794 = !DILocation(line: 1688, column: 34, scope: !11788)
!11795 = !DILocation(line: 1688, column: 10, scope: !11788)
!11796 = !DILocation(line: 1688, column: 3, scope: !11788)
!11797 = distinct !DISubprogram(name: "gimple_expr_code", scope: !385, file: !385, line: 1438, type: !11798, scopeLine: 1439, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!11798 = !DISubroutineType(types: !11799)
!11799 = !{!134, !3806}
!11800 = !DILocalVariable(name: "stmt", arg: 1, scope: !11797, file: !385, line: 1438, type: !3806)
!11801 = !DILocation(line: 1438, column: 32, scope: !11797)
!11802 = !DILocalVariable(name: "code", scope: !11797, file: !385, line: 1440, type: !384)
!11803 = !DILocation(line: 1440, column: 20, scope: !11797)
!11804 = !DILocation(line: 1440, column: 40, scope: !11797)
!11805 = !DILocation(line: 1440, column: 27, scope: !11797)
!11806 = !DILocation(line: 1441, column: 7, scope: !11807)
!11807 = distinct !DILexicalBlock(scope: !11797, file: !385, line: 1441, column: 7)
!11808 = !DILocation(line: 1441, column: 12, scope: !11807)
!11809 = !DILocation(line: 1441, column: 29, scope: !11807)
!11810 = !DILocation(line: 1441, column: 32, scope: !11807)
!11811 = !DILocation(line: 1441, column: 37, scope: !11807)
!11812 = !DILocation(line: 1441, column: 7, scope: !11797)
!11813 = !DILocation(line: 1442, column: 29, scope: !11807)
!11814 = !DILocation(line: 1442, column: 35, scope: !11807)
!11815 = !DILocation(line: 1442, column: 42, scope: !11807)
!11816 = !DILocation(line: 1442, column: 5, scope: !11807)
!11817 = !DILocation(line: 1443, column: 12, scope: !11818)
!11818 = distinct !DILexicalBlock(scope: !11807, file: !385, line: 1443, column: 12)
!11819 = !DILocation(line: 1443, column: 17, scope: !11818)
!11820 = !DILocation(line: 1443, column: 12, scope: !11807)
!11821 = !DILocation(line: 1444, column: 5, scope: !11818)
!11822 = !DILocation(line: 1446, column: 5, scope: !11818)
!11823 = !DILocation(line: 1448, column: 5, scope: !11797)
!11824 = !DILocation(line: 1450, column: 1, scope: !11797)
!11825 = distinct !DISubprogram(name: "gimple_assign_lhs", scope: !385, file: !385, line: 1694, type: !3814, scopeLine: 1695, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!11826 = !DILocalVariable(name: "gs", arg: 1, scope: !11825, file: !385, line: 1694, type: !3806)
!11827 = !DILocation(line: 1694, column: 33, scope: !11825)
!11828 = !DILocation(line: 1697, column: 21, scope: !11825)
!11829 = !DILocation(line: 1697, column: 10, scope: !11825)
!11830 = !DILocation(line: 1697, column: 3, scope: !11825)
!11831 = distinct !DISubprogram(name: "gimple_set_op", scope: !385, file: !385, line: 1663, type: !11832, scopeLine: 1664, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!11832 = !DISubroutineType(types: !11833)
!11833 = !{null, !2014, !7, !1686}
!11834 = !DILocalVariable(name: "gs", arg: 1, scope: !11831, file: !385, line: 1663, type: !2014)
!11835 = !DILocation(line: 1663, column: 23, scope: !11831)
!11836 = !DILocalVariable(name: "i", arg: 2, scope: !11831, file: !385, line: 1663, type: !7)
!11837 = !DILocation(line: 1663, column: 36, scope: !11831)
!11838 = !DILocalVariable(name: "op", arg: 3, scope: !11831, file: !385, line: 1663, type: !1686)
!11839 = !DILocation(line: 1663, column: 44, scope: !11831)
!11840 = !DILocation(line: 1665, column: 3, scope: !11831)
!11841 = !DILocation(line: 1671, column: 24, scope: !11831)
!11842 = !DILocation(line: 1671, column: 15, scope: !11831)
!11843 = !DILocation(line: 1671, column: 3, scope: !11831)
!11844 = !DILocation(line: 1671, column: 19, scope: !11831)
!11845 = !DILocation(line: 1671, column: 22, scope: !11831)
!11846 = !DILocation(line: 1672, column: 1, scope: !11831)
!11847 = distinct !DISubprogram(name: "gimple_assign_rhs1_ptr", scope: !385, file: !385, line: 1738, type: !11679, scopeLine: 1739, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!11848 = !DILocalVariable(name: "gs", arg: 1, scope: !11847, file: !385, line: 1738, type: !3806)
!11849 = !DILocation(line: 1738, column: 38, scope: !11847)
!11850 = !DILocation(line: 1741, column: 25, scope: !11847)
!11851 = !DILocation(line: 1741, column: 10, scope: !11847)
!11852 = !DILocation(line: 1741, column: 3, scope: !11847)
!11853 = distinct !DISubprogram(name: "gimple_call_fndecl", scope: !385, file: !385, line: 1954, type: !3814, scopeLine: 1955, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!11854 = !DILocalVariable(name: "gs", arg: 1, scope: !11853, file: !385, line: 1954, type: !3806)
!11855 = !DILocation(line: 1954, column: 34, scope: !11853)
!11856 = !DILocalVariable(name: "addr", scope: !11853, file: !385, line: 1956, type: !1686)
!11857 = !DILocation(line: 1956, column: 8, scope: !11853)
!11858 = !DILocation(line: 1956, column: 31, scope: !11853)
!11859 = !DILocation(line: 1956, column: 15, scope: !11853)
!11860 = !DILocation(line: 1957, column: 7, scope: !11861)
!11861 = distinct !DILexicalBlock(scope: !11853, file: !385, line: 1957, column: 7)
!11862 = !DILocation(line: 1957, column: 24, scope: !11861)
!11863 = !DILocation(line: 1957, column: 7, scope: !11853)
!11864 = !DILocation(line: 1958, column: 12, scope: !11861)
!11865 = !DILocation(line: 1958, column: 5, scope: !11861)
!11866 = !DILocation(line: 1959, column: 3, scope: !11853)
!11867 = !DILocation(line: 1960, column: 1, scope: !11853)
!11868 = distinct !DISubprogram(name: "make_ssa_name", scope: !11661, file: !11661, line: 1245, type: !11869, scopeLine: 1246, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!11869 = !DISubroutineType(types: !11870)
!11870 = !{!1686, !1686, !2014}
!11871 = !DILocalVariable(name: "var", arg: 1, scope: !11868, file: !11661, line: 1245, type: !1686)
!11872 = !DILocation(line: 1245, column: 21, scope: !11868)
!11873 = !DILocalVariable(name: "stmt", arg: 2, scope: !11868, file: !11661, line: 1245, type: !2014)
!11874 = !DILocation(line: 1245, column: 33, scope: !11868)
!11875 = !DILocation(line: 1247, column: 28, scope: !11868)
!11876 = !DILocation(line: 1247, column: 34, scope: !11868)
!11877 = !DILocation(line: 1247, column: 39, scope: !11868)
!11878 = !DILocation(line: 1247, column: 10, scope: !11868)
!11879 = !DILocation(line: 1247, column: 3, scope: !11868)
!11880 = distinct !DISubprogram(name: "gimple_referenced_vars", scope: !11661, file: !11661, line: 40, type: !11881, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!11881 = !DISubroutineType(types: !11882)
!11882 = !{!2521, !11664}
!11883 = !DILocalVariable(name: "fun", arg: 1, scope: !11880, file: !11661, line: 40, type: !11664)
!11884 = !DILocation(line: 40, column: 48, scope: !11880)
!11885 = !DILocation(line: 42, column: 8, scope: !11886)
!11886 = distinct !DILexicalBlock(scope: !11880, file: !11661, line: 42, column: 7)
!11887 = !DILocation(line: 42, column: 13, scope: !11886)
!11888 = !DILocation(line: 42, column: 7, scope: !11880)
!11889 = !DILocation(line: 43, column: 5, scope: !11886)
!11890 = !DILocation(line: 44, column: 10, scope: !11880)
!11891 = !DILocation(line: 44, column: 15, scope: !11880)
!11892 = !DILocation(line: 44, column: 26, scope: !11880)
!11893 = !DILocation(line: 44, column: 3, scope: !11880)
!11894 = !DILocation(line: 45, column: 1, scope: !11880)
!11895 = distinct !DISubprogram(name: "force_gimple_operand", scope: !3, file: !3, line: 7871, type: !11896, scopeLine: 7872, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!11896 = !DISubroutineType(types: !11897)
!11897 = !{!1686, !1686, !3489, !1804, !1686}
!11898 = !DILocalVariable(name: "expr", arg: 1, scope: !11895, file: !3, line: 7871, type: !1686)
!11899 = !DILocation(line: 7871, column: 28, scope: !11895)
!11900 = !DILocalVariable(name: "stmts", arg: 2, scope: !11895, file: !3, line: 7871, type: !3489)
!11901 = !DILocation(line: 7871, column: 46, scope: !11895)
!11902 = !DILocalVariable(name: "simple", arg: 3, scope: !11895, file: !3, line: 7871, type: !1804)
!11903 = !DILocation(line: 7871, column: 58, scope: !11895)
!11904 = !DILocalVariable(name: "var", arg: 4, scope: !11895, file: !3, line: 7871, type: !1686)
!11905 = !DILocation(line: 7871, column: 71, scope: !11895)
!11906 = !DILocalVariable(name: "t", scope: !11895, file: !3, line: 7873, type: !1686)
!11907 = !DILocation(line: 7873, column: 8, scope: !11895)
!11908 = !DILocalVariable(name: "ret", scope: !11895, file: !3, line: 7874, type: !1329)
!11909 = !DILocation(line: 7874, column: 24, scope: !11895)
!11910 = !DILocalVariable(name: "gimple_test_f", scope: !11895, file: !3, line: 7875, type: !4590)
!11911 = !DILocation(line: 7875, column: 20, scope: !11895)
!11912 = !DILocalVariable(name: "gctx", scope: !11895, file: !3, line: 7876, type: !3221)
!11913 = !DILocation(line: 7876, column: 23, scope: !11895)
!11914 = !DILocation(line: 7878, column: 4, scope: !11895)
!11915 = !DILocation(line: 7878, column: 10, scope: !11895)
!11916 = !DILocation(line: 7880, column: 22, scope: !11917)
!11917 = distinct !DILexicalBlock(scope: !11895, file: !3, line: 7880, column: 7)
!11918 = !DILocation(line: 7880, column: 7, scope: !11917)
!11919 = !DILocation(line: 7880, column: 7, scope: !11895)
!11920 = !DILocation(line: 7881, column: 12, scope: !11917)
!11921 = !DILocation(line: 7881, column: 5, scope: !11917)
!11922 = !DILocation(line: 7883, column: 19, scope: !11895)
!11923 = !DILocation(line: 7883, column: 17, scope: !11895)
!11924 = !DILocation(line: 7885, column: 3, scope: !11895)
!11925 = !DILocation(line: 7886, column: 46, scope: !11895)
!11926 = !DILocation(line: 7886, column: 29, scope: !11895)
!11927 = !DILocation(line: 7886, column: 3, scope: !11895)
!11928 = !DILocation(line: 7886, column: 18, scope: !11895)
!11929 = !DILocation(line: 7886, column: 27, scope: !11895)
!11930 = !DILocation(line: 7887, column: 3, scope: !11895)
!11931 = !DILocation(line: 7887, column: 18, scope: !11895)
!11932 = !DILocation(line: 7887, column: 38, scope: !11895)
!11933 = !DILocation(line: 7889, column: 7, scope: !11934)
!11934 = distinct !DILexicalBlock(scope: !11895, file: !3, line: 7889, column: 7)
!11935 = !DILocation(line: 7889, column: 7, scope: !11895)
!11936 = !DILocation(line: 7890, column: 12, scope: !11934)
!11937 = !DILocation(line: 7890, column: 10, scope: !11934)
!11938 = !DILocation(line: 7890, column: 5, scope: !11934)
!11939 = !DILocation(line: 7892, column: 7, scope: !11940)
!11940 = distinct !DILexicalBlock(scope: !11895, file: !3, line: 7892, column: 7)
!11941 = !DILocation(line: 7892, column: 24, scope: !11940)
!11942 = !DILocation(line: 7893, column: 7, scope: !11940)
!11943 = !DILocation(line: 7893, column: 10, scope: !11940)
!11944 = !DILocation(line: 7893, column: 30, scope: !11940)
!11945 = !DILocation(line: 7893, column: 27, scope: !11940)
!11946 = !DILocation(line: 7892, column: 7, scope: !11895)
!11947 = !DILocation(line: 7895, column: 25, scope: !11948)
!11948 = distinct !DILexicalBlock(scope: !11940, file: !3, line: 7894, column: 5)
!11949 = !DILocation(line: 7895, column: 31, scope: !11948)
!11950 = !DILocation(line: 7895, column: 7, scope: !11948)
!11951 = !DILocation(line: 7896, column: 12, scope: !11948)
!11952 = !DILocation(line: 7897, column: 5, scope: !11948)
!11953 = !DILocation(line: 7900, column: 35, scope: !11954)
!11954 = distinct !DILexicalBlock(scope: !11940, file: !3, line: 7899, column: 5)
!11955 = !DILocation(line: 7900, column: 48, scope: !11954)
!11956 = !DILocation(line: 7900, column: 13, scope: !11954)
!11957 = !DILocation(line: 7900, column: 11, scope: !11954)
!11958 = !DILocation(line: 7901, column: 7, scope: !11954)
!11959 = !DILocation(line: 7904, column: 31, scope: !11960)
!11960 = distinct !DILexicalBlock(scope: !11895, file: !3, line: 7904, column: 7)
!11961 = !DILocation(line: 7904, column: 7, scope: !11960)
!11962 = !DILocation(line: 7904, column: 7, scope: !11895)
!11963 = !DILocation(line: 7905, column: 14, scope: !11964)
!11964 = distinct !DILexicalBlock(scope: !11960, file: !3, line: 7905, column: 5)
!11965 = !DILocation(line: 7905, column: 29, scope: !11964)
!11966 = !DILocation(line: 7905, column: 12, scope: !11964)
!11967 = !DILocation(line: 7905, column: 10, scope: !11964)
!11968 = !DILocation(line: 7905, column: 36, scope: !11969)
!11969 = distinct !DILexicalBlock(scope: !11964, file: !3, line: 7905, column: 5)
!11970 = !DILocation(line: 7905, column: 5, scope: !11964)
!11971 = !DILocation(line: 7906, column: 27, scope: !11969)
!11972 = !DILocation(line: 7906, column: 7, scope: !11969)
!11973 = !DILocation(line: 7905, column: 44, scope: !11969)
!11974 = !DILocation(line: 7905, column: 42, scope: !11969)
!11975 = !DILocation(line: 7905, column: 5, scope: !11969)
!11976 = distinct !{!11976, !11970, !11977}
!11977 = !DILocation(line: 7906, column: 28, scope: !11964)
!11978 = !DILocation(line: 7908, column: 3, scope: !11895)
!11979 = !DILocation(line: 7910, column: 10, scope: !11895)
!11980 = !DILocation(line: 7910, column: 3, scope: !11895)
!11981 = !DILocation(line: 7911, column: 1, scope: !11895)
!11982 = distinct !DISubprogram(name: "force_gimple_operand_gsi", scope: !3, file: !3, line: 7920, type: !11983, scopeLine: 7923, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!11983 = !DISubroutineType(types: !11984)
!11984 = !{!1686, !4146, !1686, !1804, !1686, !1804, !1560}
!11985 = !DILocalVariable(name: "gsi", arg: 1, scope: !11982, file: !3, line: 7920, type: !4146)
!11986 = !DILocation(line: 7920, column: 49, scope: !11982)
!11987 = !DILocalVariable(name: "expr", arg: 2, scope: !11982, file: !3, line: 7920, type: !1686)
!11988 = !DILocation(line: 7920, column: 59, scope: !11982)
!11989 = !DILocalVariable(name: "simple_p", arg: 3, scope: !11982, file: !3, line: 7921, type: !1804)
!11990 = !DILocation(line: 7921, column: 11, scope: !11982)
!11991 = !DILocalVariable(name: "var", arg: 4, scope: !11982, file: !3, line: 7921, type: !1686)
!11992 = !DILocation(line: 7921, column: 26, scope: !11982)
!11993 = !DILocalVariable(name: "before", arg: 5, scope: !11982, file: !3, line: 7921, type: !1804)
!11994 = !DILocation(line: 7921, column: 36, scope: !11982)
!11995 = !DILocalVariable(name: "m", arg: 6, scope: !11982, file: !3, line: 7922, type: !1560)
!11996 = !DILocation(line: 7922, column: 31, scope: !11982)
!11997 = !DILocalVariable(name: "stmts", scope: !11982, file: !3, line: 7924, type: !2004)
!11998 = !DILocation(line: 7924, column: 14, scope: !11982)
!11999 = !DILocation(line: 7926, column: 32, scope: !11982)
!12000 = !DILocation(line: 7926, column: 46, scope: !11982)
!12001 = !DILocation(line: 7926, column: 56, scope: !11982)
!12002 = !DILocation(line: 7926, column: 10, scope: !11982)
!12003 = !DILocation(line: 7926, column: 8, scope: !11982)
!12004 = !DILocation(line: 7928, column: 28, scope: !12005)
!12005 = distinct !DILexicalBlock(scope: !11982, file: !3, line: 7928, column: 7)
!12006 = !DILocation(line: 7928, column: 8, scope: !12005)
!12007 = !DILocation(line: 7928, column: 7, scope: !11982)
!12008 = !DILocation(line: 7930, column: 28, scope: !12009)
!12009 = distinct !DILexicalBlock(scope: !12010, file: !3, line: 7930, column: 11)
!12010 = distinct !DILexicalBlock(scope: !12005, file: !3, line: 7929, column: 5)
!12011 = !DILocation(line: 7930, column: 11, scope: !12009)
!12012 = !DILocation(line: 7930, column: 11, scope: !12010)
!12013 = !DILocalVariable(name: "i", scope: !12014, file: !3, line: 7932, type: !4033)
!12014 = distinct !DILexicalBlock(scope: !12009, file: !3, line: 7931, column: 2)
!12015 = !DILocation(line: 7932, column: 25, scope: !12014)
!12016 = !DILocation(line: 7934, column: 24, scope: !12017)
!12017 = distinct !DILexicalBlock(scope: !12014, file: !3, line: 7934, column: 4)
!12018 = !DILocation(line: 7934, column: 13, scope: !12017)
!12019 = !DILocation(line: 7934, column: 9, scope: !12017)
!12020 = !DILocation(line: 7934, column: 33, scope: !12021)
!12021 = distinct !DILexicalBlock(scope: !12017, file: !3, line: 7934, column: 4)
!12022 = !DILocation(line: 7934, column: 32, scope: !12021)
!12023 = !DILocation(line: 7934, column: 4, scope: !12017)
!12024 = !DILocation(line: 7935, column: 33, scope: !12021)
!12025 = !DILocation(line: 7935, column: 6, scope: !12021)
!12026 = !DILocation(line: 7934, column: 48, scope: !12021)
!12027 = !DILocation(line: 7934, column: 4, scope: !12021)
!12028 = distinct !{!12028, !12023, !12029}
!12029 = !DILocation(line: 7935, column: 45, scope: !12017)
!12030 = !DILocation(line: 7936, column: 2, scope: !12014)
!12031 = !DILocation(line: 7938, column: 11, scope: !12032)
!12032 = distinct !DILexicalBlock(scope: !12010, file: !3, line: 7938, column: 11)
!12033 = !DILocation(line: 7938, column: 11, scope: !12010)
!12034 = !DILocation(line: 7939, column: 25, scope: !12032)
!12035 = !DILocation(line: 7939, column: 30, scope: !12032)
!12036 = !DILocation(line: 7939, column: 37, scope: !12032)
!12037 = !DILocation(line: 7939, column: 2, scope: !12032)
!12038 = !DILocation(line: 7941, column: 24, scope: !12032)
!12039 = !DILocation(line: 7941, column: 29, scope: !12032)
!12040 = !DILocation(line: 7941, column: 36, scope: !12032)
!12041 = !DILocation(line: 7941, column: 2, scope: !12032)
!12042 = !DILocation(line: 7942, column: 5, scope: !12010)
!12043 = !DILocation(line: 7944, column: 10, scope: !11982)
!12044 = !DILocation(line: 7944, column: 3, scope: !11982)
!12045 = distinct !DISubprogram(name: "lookup_tmp_var", scope: !3, file: !3, line: 524, type: !12046, scopeLine: 525, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!12046 = !DISubroutineType(types: !12047)
!12047 = !{!1686, !1686, !1804}
!12048 = !DILocalVariable(name: "val", arg: 1, scope: !12045, file: !3, line: 524, type: !1686)
!12049 = !DILocation(line: 524, column: 22, scope: !12045)
!12050 = !DILocalVariable(name: "is_formal", arg: 2, scope: !12045, file: !3, line: 524, type: !1804)
!12051 = !DILocation(line: 524, column: 32, scope: !12045)
!12052 = !DILocalVariable(name: "ret", scope: !12045, file: !3, line: 526, type: !1686)
!12053 = !DILocation(line: 526, column: 8, scope: !12045)
!12054 = !DILocation(line: 533, column: 8, scope: !12055)
!12055 = distinct !DILexicalBlock(scope: !12045, file: !3, line: 533, column: 7)
!12056 = !DILocation(line: 533, column: 17, scope: !12055)
!12057 = !DILocation(line: 533, column: 21, scope: !12055)
!12058 = !DILocation(line: 533, column: 31, scope: !12055)
!12059 = !DILocation(line: 533, column: 34, scope: !12055)
!12060 = !DILocation(line: 533, column: 7, scope: !12045)
!12061 = !DILocation(line: 534, column: 32, scope: !12055)
!12062 = !DILocation(line: 534, column: 11, scope: !12055)
!12063 = !DILocation(line: 534, column: 9, scope: !12055)
!12064 = !DILocation(line: 534, column: 5, scope: !12055)
!12065 = !DILocalVariable(name: "elt", scope: !12066, file: !3, line: 537, type: !3121)
!12066 = distinct !DILexicalBlock(scope: !12055, file: !3, line: 536, column: 5)
!12067 = !DILocation(line: 537, column: 13, scope: !12066)
!12068 = !DILocalVariable(name: "elt_p", scope: !12066, file: !3, line: 537, type: !3120)
!12069 = !DILocation(line: 537, column: 19, scope: !12066)
!12070 = !DILocalVariable(name: "slot", scope: !12066, file: !3, line: 538, type: !2542)
!12071 = !DILocation(line: 538, column: 14, scope: !12066)
!12072 = !DILocation(line: 540, column: 17, scope: !12066)
!12073 = !DILocation(line: 540, column: 11, scope: !12066)
!12074 = !DILocation(line: 540, column: 15, scope: !12066)
!12075 = !DILocation(line: 541, column: 11, scope: !12076)
!12076 = distinct !DILexicalBlock(scope: !12066, file: !3, line: 541, column: 11)
!12077 = !DILocation(line: 541, column: 26, scope: !12076)
!12078 = !DILocation(line: 541, column: 36, scope: !12076)
!12079 = !DILocation(line: 541, column: 11, scope: !12066)
!12080 = !DILocation(line: 543, column: 6, scope: !12076)
!12081 = !DILocation(line: 542, column: 9, scope: !12076)
!12082 = !DILocation(line: 542, column: 24, scope: !12076)
!12083 = !DILocation(line: 543, column: 4, scope: !12076)
!12084 = !DILocation(line: 544, column: 30, scope: !12066)
!12085 = !DILocation(line: 544, column: 45, scope: !12066)
!12086 = !DILocation(line: 544, column: 56, scope: !12066)
!12087 = !DILocation(line: 544, column: 14, scope: !12066)
!12088 = !DILocation(line: 544, column: 12, scope: !12066)
!12089 = !DILocation(line: 545, column: 12, scope: !12090)
!12090 = distinct !DILexicalBlock(scope: !12066, file: !3, line: 545, column: 11)
!12091 = !DILocation(line: 545, column: 11, scope: !12090)
!12092 = !DILocation(line: 545, column: 17, scope: !12090)
!12093 = !DILocation(line: 545, column: 11, scope: !12066)
!12094 = !DILocation(line: 547, column: 12, scope: !12095)
!12095 = distinct !DILexicalBlock(scope: !12090, file: !3, line: 546, column: 2)
!12096 = !DILocation(line: 547, column: 10, scope: !12095)
!12097 = !DILocation(line: 548, column: 17, scope: !12095)
!12098 = !DILocation(line: 548, column: 4, scope: !12095)
!12099 = !DILocation(line: 548, column: 11, scope: !12095)
!12100 = !DILocation(line: 548, column: 15, scope: !12095)
!12101 = !DILocation(line: 549, column: 45, scope: !12095)
!12102 = !DILocation(line: 549, column: 24, scope: !12095)
!12103 = !DILocation(line: 549, column: 22, scope: !12095)
!12104 = !DILocation(line: 549, column: 4, scope: !12095)
!12105 = !DILocation(line: 549, column: 11, scope: !12095)
!12106 = !DILocation(line: 549, column: 16, scope: !12095)
!12107 = !DILocation(line: 550, column: 21, scope: !12095)
!12108 = !DILocation(line: 550, column: 12, scope: !12095)
!12109 = !DILocation(line: 550, column: 5, scope: !12095)
!12110 = !DILocation(line: 550, column: 10, scope: !12095)
!12111 = !DILocation(line: 551, column: 2, scope: !12095)
!12112 = !DILocation(line: 554, column: 23, scope: !12113)
!12113 = distinct !DILexicalBlock(scope: !12090, file: !3, line: 553, column: 2)
!12114 = !DILocation(line: 554, column: 22, scope: !12113)
!12115 = !DILocation(line: 554, column: 12, scope: !12113)
!12116 = !DILocation(line: 554, column: 10, scope: !12113)
!12117 = !DILocation(line: 555, column: 17, scope: !12113)
!12118 = !DILocation(line: 555, column: 24, scope: !12113)
!12119 = !DILocation(line: 555, column: 15, scope: !12113)
!12120 = !DILocation(line: 559, column: 10, scope: !12045)
!12121 = !DILocation(line: 559, column: 3, scope: !12045)
!12122 = distinct !DISubprogram(name: "gimple_seq_last_stmt", scope: !385, file: !385, line: 187, type: !4009, scopeLine: 188, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!12123 = !DILocalVariable(name: "s", arg: 1, scope: !12122, file: !385, line: 187, type: !4011)
!12124 = !DILocation(line: 187, column: 40, scope: !12122)
!12125 = !DILocalVariable(name: "n", scope: !12122, file: !385, line: 189, type: !2009)
!12126 = !DILocation(line: 189, column: 19, scope: !12122)
!12127 = !DILocation(line: 189, column: 40, scope: !12122)
!12128 = !DILocation(line: 189, column: 23, scope: !12122)
!12129 = !DILocation(line: 190, column: 11, scope: !12122)
!12130 = !DILocation(line: 190, column: 10, scope: !12122)
!12131 = !DILocation(line: 190, column: 16, scope: !12122)
!12132 = !DILocation(line: 190, column: 19, scope: !12122)
!12133 = !DILocation(line: 190, column: 3, scope: !12122)
!12134 = distinct !DISubprogram(name: "create_tmp_from_val", scope: !3, file: !3, line: 515, type: !4157, scopeLine: 516, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!12135 = !DILocalVariable(name: "val", arg: 1, scope: !12134, file: !3, line: 515, type: !1686)
!12136 = !DILocation(line: 515, column: 27, scope: !12134)
!12137 = !DILocation(line: 517, column: 26, scope: !12134)
!12138 = !DILocation(line: 517, column: 53, scope: !12134)
!12139 = !DILocation(line: 517, column: 43, scope: !12134)
!12140 = !DILocation(line: 517, column: 10, scope: !12134)
!12141 = !DILocation(line: 517, column: 3, scope: !12134)
!12142 = distinct !DISubprogram(name: "gimple_tree_hash", scope: !3, file: !3, line: 126, type: !2528, scopeLine: 127, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!12143 = !DILocalVariable(name: "p", arg: 1, scope: !12142, file: !3, line: 126, type: !2321)
!12144 = !DILocation(line: 126, column: 31, scope: !12142)
!12145 = !DILocalVariable(name: "t", scope: !12142, file: !3, line: 128, type: !1686)
!12146 = !DILocation(line: 128, column: 8, scope: !12142)
!12147 = !DILocation(line: 128, column: 29, scope: !12142)
!12148 = !DILocation(line: 128, column: 13, scope: !12142)
!12149 = !DILocation(line: 128, column: 33, scope: !12142)
!12150 = !DILocation(line: 129, column: 31, scope: !12142)
!12151 = !DILocation(line: 129, column: 10, scope: !12142)
!12152 = !DILocation(line: 129, column: 3, scope: !12142)
!12153 = distinct !DISubprogram(name: "gimple_tree_eq", scope: !3, file: !3, line: 135, type: !2534, scopeLine: 136, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!12154 = !DILocalVariable(name: "p1", arg: 1, scope: !12153, file: !3, line: 135, type: !2321)
!12155 = !DILocation(line: 135, column: 29, scope: !12153)
!12156 = !DILocalVariable(name: "p2", arg: 2, scope: !12153, file: !3, line: 135, type: !2321)
!12157 = !DILocation(line: 135, column: 45, scope: !12153)
!12158 = !DILocalVariable(name: "t1", scope: !12153, file: !3, line: 137, type: !1686)
!12159 = !DILocation(line: 137, column: 8, scope: !12153)
!12160 = !DILocation(line: 137, column: 30, scope: !12153)
!12161 = !DILocation(line: 137, column: 14, scope: !12153)
!12162 = !DILocation(line: 137, column: 35, scope: !12153)
!12163 = !DILocalVariable(name: "t2", scope: !12153, file: !3, line: 138, type: !1686)
!12164 = !DILocation(line: 138, column: 8, scope: !12153)
!12165 = !DILocation(line: 138, column: 30, scope: !12153)
!12166 = !DILocation(line: 138, column: 14, scope: !12153)
!12167 = !DILocation(line: 138, column: 35, scope: !12153)
!12168 = !DILocalVariable(name: "code", scope: !12153, file: !3, line: 139, type: !134)
!12169 = !DILocation(line: 139, column: 18, scope: !12153)
!12170 = !DILocation(line: 139, column: 25, scope: !12153)
!12171 = !DILocation(line: 141, column: 7, scope: !12172)
!12172 = distinct !DILexicalBlock(scope: !12153, file: !3, line: 141, column: 7)
!12173 = !DILocation(line: 141, column: 25, scope: !12172)
!12174 = !DILocation(line: 141, column: 22, scope: !12172)
!12175 = !DILocation(line: 142, column: 7, scope: !12172)
!12176 = !DILocation(line: 142, column: 10, scope: !12172)
!12177 = !DILocation(line: 142, column: 28, scope: !12172)
!12178 = !DILocation(line: 142, column: 25, scope: !12172)
!12179 = !DILocation(line: 141, column: 7, scope: !12153)
!12180 = !DILocation(line: 143, column: 5, scope: !12172)
!12181 = !DILocation(line: 145, column: 25, scope: !12182)
!12182 = distinct !DILexicalBlock(scope: !12153, file: !3, line: 145, column: 7)
!12183 = !DILocation(line: 145, column: 29, scope: !12182)
!12184 = !DILocation(line: 145, column: 8, scope: !12182)
!12185 = !DILocation(line: 145, column: 7, scope: !12153)
!12186 = !DILocation(line: 146, column: 5, scope: !12182)
!12187 = !DILocation(line: 150, column: 3, scope: !12153)
!12188 = !DILocation(line: 152, column: 3, scope: !12153)
!12189 = !DILocation(line: 153, column: 1, scope: !12153)
!12190 = distinct !DISubprogram(name: "gimple_bb", scope: !385, file: !385, line: 1112, type: !12191, scopeLine: 1113, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!12191 = !DISubroutineType(types: !12192)
!12192 = !{!1978, !3806}
!12193 = !DILocalVariable(name: "g", arg: 1, scope: !12190, file: !385, line: 1112, type: !3806)
!12194 = !DILocation(line: 1112, column: 25, scope: !12190)
!12195 = !DILocation(line: 1114, column: 10, scope: !12190)
!12196 = !DILocation(line: 1114, column: 13, scope: !12190)
!12197 = !DILocation(line: 1114, column: 20, scope: !12190)
!12198 = !DILocation(line: 1114, column: 3, scope: !12190)
!12199 = distinct !DISubprogram(name: "gimple_has_location", scope: !385, file: !385, line: 1165, type: !11773, scopeLine: 1166, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!12200 = !DILocalVariable(name: "g", arg: 1, scope: !12199, file: !385, line: 1165, type: !3806)
!12201 = !DILocation(line: 1165, column: 35, scope: !12199)
!12202 = !DILocation(line: 1167, column: 27, scope: !12199)
!12203 = !DILocation(line: 1167, column: 10, scope: !12199)
!12204 = !DILocation(line: 1167, column: 30, scope: !12199)
!12205 = !DILocation(line: 1167, column: 3, scope: !12199)
!12206 = distinct !DISubprogram(name: "gimple_do_not_emit_location_p", scope: !3, file: !3, line: 785, type: !12207, scopeLine: 786, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!12207 = !DISubroutineType(types: !12208)
!12208 = !{!1804, !2014}
!12209 = !DILocalVariable(name: "g", arg: 1, scope: !12206, file: !3, line: 785, type: !2014)
!12210 = !DILocation(line: 785, column: 39, scope: !12206)
!12211 = !DILocation(line: 787, column: 22, scope: !12206)
!12212 = !DILocation(line: 787, column: 10, scope: !12206)
!12213 = !DILocation(line: 787, column: 3, scope: !12206)
!12214 = distinct !DISubprogram(name: "should_carry_location_p", scope: !3, file: !3, line: 769, type: !12207, scopeLine: 770, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!12215 = !DILocalVariable(name: "gs", arg: 1, scope: !12214, file: !3, line: 769, type: !2014)
!12216 = !DILocation(line: 769, column: 33, scope: !12214)
!12217 = !DILocation(line: 774, column: 20, scope: !12218)
!12218 = distinct !DILexicalBlock(scope: !12214, file: !3, line: 774, column: 7)
!12219 = !DILocation(line: 774, column: 7, scope: !12218)
!12220 = !DILocation(line: 774, column: 24, scope: !12218)
!12221 = !DILocation(line: 774, column: 7, scope: !12214)
!12222 = !DILocation(line: 775, column: 5, scope: !12218)
!12223 = !DILocation(line: 777, column: 3, scope: !12214)
!12224 = !DILocation(line: 778, column: 1, scope: !12214)
!12225 = distinct !DISubprogram(name: "gimple_location", scope: !385, file: !385, line: 1139, type: !12226, scopeLine: 1140, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!12226 = !DISubroutineType(types: !12227)
!12227 = !{!1812, !3806}
!12228 = !DILocalVariable(name: "g", arg: 1, scope: !12225, file: !385, line: 1139, type: !3806)
!12229 = !DILocation(line: 1139, column: 31, scope: !12225)
!12230 = !DILocation(line: 1141, column: 10, scope: !12225)
!12231 = !DILocation(line: 1141, column: 13, scope: !12225)
!12232 = !DILocation(line: 1141, column: 20, scope: !12225)
!12233 = !DILocation(line: 1141, column: 3, scope: !12225)
!12234 = distinct !DISubprogram(name: "gimple_plf", scope: !385, file: !385, line: 1247, type: !12235, scopeLine: 1248, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!12235 = !DISubroutineType(types: !12236)
!12236 = !{!7, !2014, !1578}
!12237 = !DILocalVariable(name: "stmt", arg: 1, scope: !12234, file: !385, line: 1247, type: !2014)
!12238 = !DILocation(line: 1247, column: 20, scope: !12234)
!12239 = !DILocalVariable(name: "plf", arg: 2, scope: !12234, file: !385, line: 1247, type: !1578)
!12240 = !DILocation(line: 1247, column: 40, scope: !12234)
!12241 = !DILocation(line: 1249, column: 10, scope: !12234)
!12242 = !DILocation(line: 1249, column: 16, scope: !12234)
!12243 = !DILocation(line: 1249, column: 23, scope: !12234)
!12244 = !DILocation(line: 1249, column: 45, scope: !12234)
!12245 = !DILocation(line: 1249, column: 27, scope: !12234)
!12246 = !DILocation(line: 1249, column: 3, scope: !12234)
!12247 = distinct !DISubprogram(name: "omp_firstprivatize_type_sizes", scope: !3, file: !3, line: 5307, type: !6025, scopeLine: 5308, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!12248 = !DILocalVariable(name: "ctx", arg: 1, scope: !12247, file: !3, line: 5307, type: !3146)
!12249 = !DILocation(line: 5307, column: 57, scope: !12247)
!12250 = !DILocalVariable(name: "type", arg: 2, scope: !12247, file: !3, line: 5307, type: !1686)
!12251 = !DILocation(line: 5307, column: 67, scope: !12247)
!12252 = !DILocation(line: 5309, column: 7, scope: !12253)
!12253 = distinct !DILexicalBlock(scope: !12247, file: !3, line: 5309, column: 7)
!12254 = !DILocation(line: 5309, column: 12, scope: !12253)
!12255 = !DILocation(line: 5309, column: 20, scope: !12253)
!12256 = !DILocation(line: 5309, column: 23, scope: !12253)
!12257 = !DILocation(line: 5309, column: 31, scope: !12253)
!12258 = !DILocation(line: 5309, column: 28, scope: !12253)
!12259 = !DILocation(line: 5309, column: 7, scope: !12247)
!12260 = !DILocation(line: 5310, column: 5, scope: !12253)
!12261 = !DILocation(line: 5311, column: 10, scope: !12247)
!12262 = !DILocation(line: 5311, column: 8, scope: !12247)
!12263 = !DILocation(line: 5313, column: 27, scope: !12264)
!12264 = distinct !DILexicalBlock(scope: !12247, file: !3, line: 5313, column: 7)
!12265 = !DILocation(line: 5313, column: 32, scope: !12264)
!12266 = !DILocation(line: 5313, column: 50, scope: !12264)
!12267 = !DILocation(line: 5313, column: 7, scope: !12264)
!12268 = !DILocation(line: 5313, column: 7, scope: !12247)
!12269 = !DILocation(line: 5314, column: 5, scope: !12264)
!12270 = !DILocation(line: 5316, column: 11, scope: !12247)
!12271 = !DILocation(line: 5316, column: 3, scope: !12247)
!12272 = !DILocation(line: 5323, column: 36, scope: !12273)
!12273 = distinct !DILexicalBlock(scope: !12247, file: !3, line: 5317, column: 5)
!12274 = !DILocation(line: 5323, column: 41, scope: !12273)
!12275 = !DILocation(line: 5323, column: 7, scope: !12273)
!12276 = !DILocation(line: 5324, column: 36, scope: !12273)
!12277 = !DILocation(line: 5324, column: 41, scope: !12273)
!12278 = !DILocation(line: 5324, column: 7, scope: !12273)
!12279 = !DILocation(line: 5325, column: 7, scope: !12273)
!12280 = !DILocation(line: 5328, column: 38, scope: !12273)
!12281 = !DILocation(line: 5328, column: 43, scope: !12273)
!12282 = !DILocation(line: 5328, column: 7, scope: !12273)
!12283 = !DILocation(line: 5329, column: 38, scope: !12273)
!12284 = !DILocation(line: 5329, column: 43, scope: !12273)
!12285 = !DILocation(line: 5329, column: 7, scope: !12273)
!12286 = !DILocation(line: 5330, column: 7, scope: !12273)
!12287 = !DILocalVariable(name: "field", scope: !12288, file: !3, line: 5336, type: !1686)
!12288 = distinct !DILexicalBlock(scope: !12273, file: !3, line: 5335, column: 7)
!12289 = !DILocation(line: 5336, column: 7, scope: !12288)
!12290 = !DILocation(line: 5337, column: 15, scope: !12291)
!12291 = distinct !DILexicalBlock(scope: !12288, file: !3, line: 5337, column: 2)
!12292 = !DILocation(line: 5337, column: 13, scope: !12291)
!12293 = !DILocation(line: 5337, column: 7, scope: !12291)
!12294 = !DILocation(line: 5337, column: 35, scope: !12295)
!12295 = distinct !DILexicalBlock(scope: !12291, file: !3, line: 5337, column: 2)
!12296 = !DILocation(line: 5337, column: 2, scope: !12291)
!12297 = !DILocation(line: 5338, column: 8, scope: !12298)
!12298 = distinct !DILexicalBlock(scope: !12295, file: !3, line: 5338, column: 8)
!12299 = !DILocation(line: 5338, column: 26, scope: !12298)
!12300 = !DILocation(line: 5338, column: 8, scope: !12295)
!12301 = !DILocation(line: 5340, column: 37, scope: !12302)
!12302 = distinct !DILexicalBlock(scope: !12298, file: !3, line: 5339, column: 6)
!12303 = !DILocation(line: 5340, column: 42, scope: !12302)
!12304 = !DILocation(line: 5340, column: 8, scope: !12302)
!12305 = !DILocation(line: 5341, column: 39, scope: !12302)
!12306 = !DILocation(line: 5341, column: 44, scope: !12302)
!12307 = !DILocation(line: 5341, column: 8, scope: !12302)
!12308 = !DILocation(line: 5342, column: 6, scope: !12302)
!12309 = !DILocation(line: 5338, column: 29, scope: !12298)
!12310 = !DILocation(line: 5337, column: 50, scope: !12295)
!12311 = !DILocation(line: 5337, column: 48, scope: !12295)
!12312 = !DILocation(line: 5337, column: 2, scope: !12295)
!12313 = distinct !{!12313, !12296, !12314}
!12314 = !DILocation(line: 5342, column: 6, scope: !12291)
!12315 = !DILocation(line: 5344, column: 7, scope: !12273)
!12316 = !DILocation(line: 5348, column: 38, scope: !12273)
!12317 = !DILocation(line: 5348, column: 43, scope: !12273)
!12318 = !DILocation(line: 5348, column: 7, scope: !12273)
!12319 = !DILocation(line: 5349, column: 7, scope: !12273)
!12320 = !DILocation(line: 5352, column: 7, scope: !12273)
!12321 = !DILocation(line: 5355, column: 32, scope: !12247)
!12322 = !DILocation(line: 5355, column: 37, scope: !12247)
!12323 = !DILocation(line: 5355, column: 3, scope: !12247)
!12324 = !DILocation(line: 5356, column: 32, scope: !12247)
!12325 = !DILocation(line: 5356, column: 37, scope: !12247)
!12326 = !DILocation(line: 5356, column: 3, scope: !12247)
!12327 = !DILocation(line: 5357, column: 20, scope: !12247)
!12328 = !DILocation(line: 5357, column: 51, scope: !12247)
!12329 = !DILocation(line: 5357, column: 56, scope: !12247)
!12330 = !DILocation(line: 5357, column: 3, scope: !12247)
!12331 = !DILocation(line: 5358, column: 1, scope: !12247)
!12332 = distinct !DISubprogram(name: "VEC_tree_heap_alloc", scope: !135, file: !135, line: 184, type: !12333, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!12333 = !DISubroutineType(types: !12334)
!12334 = !{!3131, !1330}
!12335 = !DILocalVariable(name: "alloc_", arg: 1, scope: !12332, file: !135, line: 184, type: !1330)
!12336 = !DILocation(line: 184, column: 1, scope: !12332)
!12337 = distinct !DISubprogram(name: "VEC_tree_heap_safe_push", scope: !135, file: !135, line: 184, type: !12338, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!12338 = !DISubroutineType(types: !12339)
!12339 = !{!2049, !12340, !1686}
!12340 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3131, size: 64)
!12341 = !DILocalVariable(name: "vec_", arg: 1, scope: !12337, file: !135, line: 184, type: !12340)
!12342 = !DILocation(line: 184, column: 1, scope: !12337)
!12343 = !DILocalVariable(name: "obj_", arg: 2, scope: !12337, file: !135, line: 184, type: !1686)
!12344 = distinct !DISubprogram(name: "VEC_tree_base_index", scope: !135, file: !135, line: 182, type: !12345, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!12345 = !DISubroutineType(types: !12346)
!12346 = !{!1686, !4372, !7}
!12347 = !DILocalVariable(name: "vec_", arg: 1, scope: !12344, file: !135, line: 182, type: !4372)
!12348 = !DILocation(line: 182, column: 1, scope: !12344)
!12349 = !DILocalVariable(name: "ix_", arg: 2, scope: !12344, file: !135, line: 182, type: !7)
!12350 = !DILocation(line: 0, scope: !12344)
!12351 = distinct !DISubprogram(name: "VEC_tree_base_pop", scope: !135, file: !135, line: 182, type: !12352, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!12352 = !DISubroutineType(types: !12353)
!12353 = !{!1686, !4379}
!12354 = !DILocalVariable(name: "vec_", arg: 1, scope: !12351, file: !135, line: 182, type: !4379)
!12355 = !DILocation(line: 182, column: 1, scope: !12351)
!12356 = !DILocalVariable(name: "obj_", scope: !12351, file: !135, line: 182, type: !1686)
!12357 = distinct !DISubprogram(name: "canonicalize_component_ref", scope: !3, file: !3, line: 1649, type: !12358, scopeLine: 1650, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!12358 = !DISubroutineType(types: !12359)
!12359 = !{null, !2049}
!12360 = !DILocalVariable(name: "expr_p", arg: 1, scope: !12357, file: !3, line: 1649, type: !2049)
!12361 = !DILocation(line: 1649, column: 35, scope: !12357)
!12362 = !DILocalVariable(name: "expr", scope: !12357, file: !3, line: 1651, type: !1686)
!12363 = !DILocation(line: 1651, column: 8, scope: !12357)
!12364 = !DILocation(line: 1651, column: 16, scope: !12357)
!12365 = !DILocation(line: 1651, column: 15, scope: !12357)
!12366 = !DILocalVariable(name: "type", scope: !12357, file: !3, line: 1652, type: !1686)
!12367 = !DILocation(line: 1652, column: 8, scope: !12357)
!12368 = !DILocation(line: 1654, column: 3, scope: !12357)
!12369 = !DILocation(line: 1656, column: 7, scope: !12370)
!12370 = distinct !DILexicalBlock(scope: !12357, file: !3, line: 1656, column: 7)
!12371 = !DILocation(line: 1656, column: 7, scope: !12357)
!12372 = !DILocation(line: 1657, column: 12, scope: !12370)
!12373 = !DILocation(line: 1657, column: 10, scope: !12370)
!12374 = !DILocation(line: 1657, column: 5, scope: !12370)
!12375 = !DILocation(line: 1659, column: 12, scope: !12370)
!12376 = !DILocation(line: 1659, column: 10, scope: !12370)
!12377 = !DILocation(line: 1664, column: 7, scope: !12378)
!12378 = distinct !DILexicalBlock(scope: !12357, file: !3, line: 1664, column: 7)
!12379 = !DILocation(line: 1664, column: 27, scope: !12378)
!12380 = !DILocation(line: 1664, column: 24, scope: !12378)
!12381 = !DILocation(line: 1664, column: 7, scope: !12357)
!12382 = !DILocalVariable(name: "type_quals", scope: !12383, file: !3, line: 1669, type: !1330)
!12383 = distinct !DILexicalBlock(scope: !12378, file: !3, line: 1665, column: 5)
!12384 = !DILocation(line: 1669, column: 11, scope: !12383)
!12385 = !DILocation(line: 1673, column: 20, scope: !12383)
!12386 = !DILocation(line: 1674, column: 4, scope: !12383)
!12387 = !DILocation(line: 1674, column: 2, scope: !12383)
!12388 = !DILocation(line: 1673, column: 18, scope: !12383)
!12389 = !DILocation(line: 1675, column: 11, scope: !12390)
!12390 = distinct !DILexicalBlock(scope: !12383, file: !3, line: 1675, column: 11)
!12391 = !DILocation(line: 1675, column: 32, scope: !12390)
!12392 = !DILocation(line: 1675, column: 29, scope: !12390)
!12393 = !DILocation(line: 1675, column: 11, scope: !12383)
!12394 = !DILocation(line: 1676, column: 31, scope: !12390)
!12395 = !DILocation(line: 1676, column: 57, scope: !12390)
!12396 = !DILocation(line: 1676, column: 9, scope: !12390)
!12397 = !DILocation(line: 1676, column: 7, scope: !12390)
!12398 = !DILocation(line: 1676, column: 2, scope: !12390)
!12399 = !DILocation(line: 1679, column: 26, scope: !12383)
!12400 = !DILocation(line: 1679, column: 7, scope: !12383)
!12401 = !DILocation(line: 1679, column: 24, scope: !12383)
!12402 = !DILocation(line: 1686, column: 5, scope: !12383)
!12403 = !DILocation(line: 1687, column: 1, scope: !12357)
!12404 = distinct !DISubprogram(name: "VEC_tree_heap_free", scope: !135, file: !135, line: 184, type: !12405, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!12405 = !DISubroutineType(types: !12406)
!12406 = !{null, !12340}
!12407 = !DILocalVariable(name: "vec_", arg: 1, scope: !12404, file: !135, line: 184, type: !12340)
!12408 = !DILocation(line: 184, column: 1, scope: !12404)
!12409 = !DILocation(line: 184, column: 1, scope: !12410)
!12410 = distinct !DILexicalBlock(scope: !12404, file: !135, line: 184, column: 1)
!12411 = distinct !DISubprogram(name: "VEC_tree_heap_reserve", scope: !135, file: !135, line: 184, type: !12412, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!12412 = !DISubroutineType(types: !12413)
!12413 = !{!1330, !12340, !1330}
!12414 = !DILocalVariable(name: "vec_", arg: 1, scope: !12411, file: !135, line: 184, type: !12340)
!12415 = !DILocation(line: 184, column: 1, scope: !12411)
!12416 = !DILocalVariable(name: "alloc_", arg: 2, scope: !12411, file: !135, line: 184, type: !1330)
!12417 = !DILocalVariable(name: "extend", scope: !12411, file: !135, line: 184, type: !1330)
!12418 = !DILocation(line: 184, column: 1, scope: !12419)
!12419 = distinct !DILexicalBlock(scope: !12411, file: !135, line: 184, column: 1)
!12420 = distinct !DISubprogram(name: "VEC_tree_base_quick_push", scope: !135, file: !135, line: 182, type: !12421, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!12421 = !DISubroutineType(types: !12422)
!12422 = !{!2049, !4379, !1686}
!12423 = !DILocalVariable(name: "vec_", arg: 1, scope: !12420, file: !135, line: 182, type: !4379)
!12424 = !DILocation(line: 182, column: 1, scope: !12420)
!12425 = !DILocalVariable(name: "obj_", arg: 2, scope: !12420, file: !135, line: 182, type: !1686)
!12426 = !DILocalVariable(name: "slot_", scope: !12420, file: !135, line: 182, type: !2049)
!12427 = distinct !DISubprogram(name: "VEC_tree_base_space", scope: !135, file: !135, line: 182, type: !12428, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!12428 = !DISubroutineType(types: !12429)
!12429 = !{!1330, !4379, !1330}
!12430 = !DILocalVariable(name: "vec_", arg: 1, scope: !12427, file: !135, line: 182, type: !4379)
!12431 = !DILocation(line: 182, column: 1, scope: !12427)
!12432 = !DILocalVariable(name: "alloc_", arg: 2, scope: !12427, file: !135, line: 182, type: !1330)
!12433 = distinct !DISubprogram(name: "generic_expr_could_trap_p", scope: !3, file: !3, line: 2825, type: !4592, scopeLine: 2826, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!12434 = !DILocalVariable(name: "expr", arg: 1, scope: !12433, file: !3, line: 2825, type: !1686)
!12435 = !DILocation(line: 2825, column: 33, scope: !12433)
!12436 = !DILocalVariable(name: "i", scope: !12433, file: !3, line: 2827, type: !7)
!12437 = !DILocation(line: 2827, column: 12, scope: !12433)
!12438 = !DILocalVariable(name: "n", scope: !12433, file: !3, line: 2827, type: !7)
!12439 = !DILocation(line: 2827, column: 15, scope: !12433)
!12440 = !DILocation(line: 2829, column: 8, scope: !12441)
!12441 = distinct !DILexicalBlock(scope: !12433, file: !3, line: 2829, column: 7)
!12442 = !DILocation(line: 2829, column: 13, scope: !12441)
!12443 = !DILocation(line: 2829, column: 31, scope: !12441)
!12444 = !DILocation(line: 2829, column: 16, scope: !12441)
!12445 = !DILocation(line: 2829, column: 7, scope: !12433)
!12446 = !DILocation(line: 2830, column: 5, scope: !12441)
!12447 = !DILocation(line: 2832, column: 8, scope: !12448)
!12448 = distinct !DILexicalBlock(scope: !12433, file: !3, line: 2832, column: 7)
!12449 = !DILocation(line: 2832, column: 22, scope: !12448)
!12450 = !DILocation(line: 2832, column: 44, scope: !12448)
!12451 = !DILocation(line: 2832, column: 25, scope: !12448)
!12452 = !DILocation(line: 2832, column: 7, scope: !12433)
!12453 = !DILocation(line: 2833, column: 5, scope: !12448)
!12454 = !DILocation(line: 2835, column: 7, scope: !12433)
!12455 = !DILocation(line: 2835, column: 5, scope: !12433)
!12456 = !DILocation(line: 2836, column: 10, scope: !12457)
!12457 = distinct !DILexicalBlock(scope: !12433, file: !3, line: 2836, column: 3)
!12458 = !DILocation(line: 2836, column: 8, scope: !12457)
!12459 = !DILocation(line: 2836, column: 15, scope: !12460)
!12460 = distinct !DILexicalBlock(scope: !12457, file: !3, line: 2836, column: 3)
!12461 = !DILocation(line: 2836, column: 19, scope: !12460)
!12462 = !DILocation(line: 2836, column: 17, scope: !12460)
!12463 = !DILocation(line: 2836, column: 3, scope: !12457)
!12464 = !DILocation(line: 2837, column: 36, scope: !12465)
!12465 = distinct !DILexicalBlock(scope: !12460, file: !3, line: 2837, column: 9)
!12466 = !DILocation(line: 2837, column: 9, scope: !12465)
!12467 = !DILocation(line: 2837, column: 9, scope: !12460)
!12468 = !DILocation(line: 2838, column: 7, scope: !12465)
!12469 = !DILocation(line: 2837, column: 58, scope: !12465)
!12470 = !DILocation(line: 2836, column: 23, scope: !12460)
!12471 = !DILocation(line: 2836, column: 3, scope: !12460)
!12472 = distinct !{!12472, !12463, !12473}
!12473 = !DILocation(line: 2838, column: 14, scope: !12457)
!12474 = !DILocation(line: 2840, column: 3, scope: !12433)
!12475 = !DILocation(line: 2841, column: 1, scope: !12433)
!12476 = distinct !DISubprogram(name: "gimplify_pure_cond_expr", scope: !3, file: !3, line: 2793, type: !7298, scopeLine: 2794, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!12477 = !DILocalVariable(name: "expr_p", arg: 1, scope: !12476, file: !3, line: 2793, type: !2049)
!12478 = !DILocation(line: 2793, column: 32, scope: !12476)
!12479 = !DILocalVariable(name: "pre_p", arg: 2, scope: !12476, file: !3, line: 2793, type: !3489)
!12480 = !DILocation(line: 2793, column: 52, scope: !12476)
!12481 = !DILocalVariable(name: "expr", scope: !12476, file: !3, line: 2795, type: !1686)
!12482 = !DILocation(line: 2795, column: 8, scope: !12476)
!12483 = !DILocation(line: 2795, column: 16, scope: !12476)
!12484 = !DILocation(line: 2795, column: 15, scope: !12476)
!12485 = !DILocalVariable(name: "cond", scope: !12476, file: !3, line: 2795, type: !1686)
!12486 = !DILocation(line: 2795, column: 24, scope: !12476)
!12487 = !DILocalVariable(name: "ret", scope: !12476, file: !3, line: 2796, type: !1329)
!12488 = !DILocation(line: 2796, column: 24, scope: !12476)
!12489 = !DILocalVariable(name: "tret", scope: !12476, file: !3, line: 2796, type: !1329)
!12490 = !DILocation(line: 2796, column: 29, scope: !12476)
!12491 = !DILocalVariable(name: "code", scope: !12476, file: !3, line: 2797, type: !134)
!12492 = !DILocation(line: 2797, column: 18, scope: !12476)
!12493 = !DILocation(line: 2799, column: 26, scope: !12476)
!12494 = !DILocation(line: 2799, column: 10, scope: !12476)
!12495 = !DILocation(line: 2799, column: 8, scope: !12476)
!12496 = !DILocation(line: 2803, column: 10, scope: !12476)
!12497 = !DILocation(line: 2803, column: 8, scope: !12476)
!12498 = !DILocation(line: 2804, column: 7, scope: !12499)
!12499 = distinct !DILexicalBlock(scope: !12476, file: !3, line: 2804, column: 7)
!12500 = !DILocation(line: 2804, column: 12, scope: !12499)
!12501 = !DILocation(line: 2804, column: 7, scope: !12476)
!12502 = !DILocation(line: 2805, column: 5, scope: !12499)
!12503 = !DILocation(line: 2806, column: 12, scope: !12504)
!12504 = distinct !DILexicalBlock(scope: !12499, file: !3, line: 2806, column: 12)
!12505 = !DILocation(line: 2806, column: 17, scope: !12504)
!12506 = !DILocation(line: 2806, column: 12, scope: !12499)
!12507 = !DILocation(line: 2807, column: 5, scope: !12504)
!12508 = !DILocation(line: 2808, column: 31, scope: !12476)
!12509 = !DILocation(line: 2808, column: 9, scope: !12476)
!12510 = !DILocation(line: 2808, column: 7, scope: !12476)
!12511 = !DILocation(line: 2809, column: 30, scope: !12476)
!12512 = !DILocation(line: 2809, column: 3, scope: !12476)
!12513 = !DILocation(line: 2809, column: 28, scope: !12476)
!12514 = !DILocation(line: 2811, column: 26, scope: !12476)
!12515 = !DILocation(line: 2811, column: 49, scope: !12476)
!12516 = !DILocation(line: 2811, column: 10, scope: !12476)
!12517 = !DILocation(line: 2811, column: 8, scope: !12476)
!12518 = !DILocation(line: 2813, column: 9, scope: !12476)
!12519 = !DILocation(line: 2813, column: 7, scope: !12476)
!12520 = !DILocation(line: 2814, column: 26, scope: !12476)
!12521 = !DILocation(line: 2814, column: 49, scope: !12476)
!12522 = !DILocation(line: 2814, column: 10, scope: !12476)
!12523 = !DILocation(line: 2814, column: 8, scope: !12476)
!12524 = !DILocation(line: 2817, column: 10, scope: !12476)
!12525 = !DILocation(line: 2817, column: 3, scope: !12476)
!12526 = distinct !DISubprogram(name: "shortcut_cond_expr", scope: !3, file: !3, line: 2544, type: !4157, scopeLine: 2545, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!12527 = !DILocalVariable(name: "expr", arg: 1, scope: !12526, file: !3, line: 2544, type: !1686)
!12528 = !DILocation(line: 2544, column: 26, scope: !12526)
!12529 = !DILocalVariable(name: "pred", scope: !12526, file: !3, line: 2546, type: !1686)
!12530 = !DILocation(line: 2546, column: 8, scope: !12526)
!12531 = !DILocation(line: 2546, column: 15, scope: !12526)
!12532 = !DILocalVariable(name: "then_", scope: !12526, file: !3, line: 2547, type: !1686)
!12533 = !DILocation(line: 2547, column: 8, scope: !12526)
!12534 = !DILocation(line: 2547, column: 16, scope: !12526)
!12535 = !DILocalVariable(name: "else_", scope: !12526, file: !3, line: 2548, type: !1686)
!12536 = !DILocation(line: 2548, column: 8, scope: !12526)
!12537 = !DILocation(line: 2548, column: 16, scope: !12526)
!12538 = !DILocalVariable(name: "true_label", scope: !12526, file: !3, line: 2549, type: !1686)
!12539 = !DILocation(line: 2549, column: 8, scope: !12526)
!12540 = !DILocalVariable(name: "false_label", scope: !12526, file: !3, line: 2549, type: !1686)
!12541 = !DILocation(line: 2549, column: 20, scope: !12526)
!12542 = !DILocalVariable(name: "end_label", scope: !12526, file: !3, line: 2549, type: !1686)
!12543 = !DILocation(line: 2549, column: 33, scope: !12526)
!12544 = !DILocalVariable(name: "t", scope: !12526, file: !3, line: 2549, type: !1686)
!12545 = !DILocation(line: 2549, column: 44, scope: !12526)
!12546 = !DILocalVariable(name: "true_label_p", scope: !12526, file: !3, line: 2550, type: !2049)
!12547 = !DILocation(line: 2550, column: 9, scope: !12526)
!12548 = !DILocalVariable(name: "false_label_p", scope: !12526, file: !3, line: 2551, type: !2049)
!12549 = !DILocation(line: 2551, column: 9, scope: !12526)
!12550 = !DILocalVariable(name: "emit_end", scope: !12526, file: !3, line: 2552, type: !1804)
!12551 = !DILocation(line: 2552, column: 8, scope: !12526)
!12552 = !DILocalVariable(name: "emit_false", scope: !12526, file: !3, line: 2552, type: !1804)
!12553 = !DILocation(line: 2552, column: 18, scope: !12526)
!12554 = !DILocalVariable(name: "jump_over_else", scope: !12526, file: !3, line: 2552, type: !1804)
!12555 = !DILocation(line: 2552, column: 30, scope: !12526)
!12556 = !DILocalVariable(name: "then_se", scope: !12526, file: !3, line: 2553, type: !1804)
!12557 = !DILocation(line: 2553, column: 8, scope: !12526)
!12558 = !DILocation(line: 2553, column: 18, scope: !12526)
!12559 = !DILocation(line: 2553, column: 24, scope: !12526)
!12560 = !DILocation(line: 2553, column: 27, scope: !12526)
!12561 = !DILocation(line: 0, scope: !12526)
!12562 = !DILocalVariable(name: "else_se", scope: !12526, file: !3, line: 2554, type: !1804)
!12563 = !DILocation(line: 2554, column: 8, scope: !12526)
!12564 = !DILocation(line: 2554, column: 18, scope: !12526)
!12565 = !DILocation(line: 2554, column: 24, scope: !12526)
!12566 = !DILocation(line: 2554, column: 27, scope: !12526)
!12567 = !DILocation(line: 2557, column: 8, scope: !12568)
!12568 = distinct !DILexicalBlock(scope: !12526, file: !3, line: 2557, column: 7)
!12569 = !DILocation(line: 2557, column: 7, scope: !12526)
!12570 = !DILocation(line: 2563, column: 7, scope: !12571)
!12571 = distinct !DILexicalBlock(scope: !12568, file: !3, line: 2558, column: 5)
!12572 = !DILocation(line: 2563, column: 14, scope: !12571)
!12573 = !DILocation(line: 2563, column: 31, scope: !12571)
!12574 = !DILocalVariable(name: "locus", scope: !12575, file: !3, line: 2566, type: !1812)
!12575 = distinct !DILexicalBlock(scope: !12571, file: !3, line: 2564, column: 2)
!12576 = !DILocation(line: 2566, column: 15, scope: !12575)
!12577 = !DILocation(line: 2566, column: 23, scope: !12575)
!12578 = !DILocation(line: 2567, column: 11, scope: !12575)
!12579 = !DILocation(line: 2567, column: 34, scope: !12575)
!12580 = !DILocation(line: 2568, column: 29, scope: !12575)
!12581 = !DILocation(line: 2568, column: 4, scope: !12575)
!12582 = !DILocation(line: 2568, column: 27, scope: !12575)
!12583 = !DILocation(line: 2570, column: 8, scope: !12584)
!12584 = distinct !DILexicalBlock(scope: !12575, file: !3, line: 2570, column: 8)
!12585 = !DILocation(line: 2570, column: 8, scope: !12575)
!12586 = !DILocation(line: 2571, column: 6, scope: !12584)
!12587 = !DILocation(line: 2572, column: 32, scope: !12575)
!12588 = !DILocation(line: 2572, column: 12, scope: !12575)
!12589 = !DILocation(line: 2572, column: 10, scope: !12575)
!12590 = !DILocation(line: 2573, column: 14, scope: !12575)
!12591 = !DILocation(line: 2573, column: 20, scope: !12575)
!12592 = !DILocation(line: 2573, column: 23, scope: !12575)
!12593 = !DILocation(line: 0, scope: !12575)
!12594 = !DILocation(line: 2573, column: 12, scope: !12575)
!12595 = !DILocation(line: 2574, column: 11, scope: !12575)
!12596 = !DILocation(line: 2574, column: 9, scope: !12575)
!12597 = !DILocation(line: 2575, column: 11, scope: !12575)
!12598 = !DILocation(line: 2575, column: 9, scope: !12575)
!12599 = !DILocation(line: 2576, column: 4, scope: !12575)
!12600 = distinct !{!12600, !12570, !12601}
!12601 = !DILocation(line: 2577, column: 2, scope: !12571)
!12602 = !DILocation(line: 2578, column: 5, scope: !12571)
!12603 = !DILocation(line: 2580, column: 8, scope: !12604)
!12604 = distinct !DILexicalBlock(scope: !12526, file: !3, line: 2580, column: 7)
!12605 = !DILocation(line: 2580, column: 7, scope: !12526)
!12606 = !DILocation(line: 2586, column: 7, scope: !12607)
!12607 = distinct !DILexicalBlock(scope: !12604, file: !3, line: 2581, column: 5)
!12608 = !DILocation(line: 2586, column: 14, scope: !12607)
!12609 = !DILocation(line: 2586, column: 31, scope: !12607)
!12610 = !DILocalVariable(name: "locus", scope: !12611, file: !3, line: 2589, type: !1812)
!12611 = distinct !DILexicalBlock(scope: !12607, file: !3, line: 2587, column: 2)
!12612 = !DILocation(line: 2589, column: 15, scope: !12611)
!12613 = !DILocation(line: 2589, column: 23, scope: !12611)
!12614 = !DILocation(line: 2590, column: 11, scope: !12611)
!12615 = !DILocation(line: 2590, column: 34, scope: !12611)
!12616 = !DILocation(line: 2591, column: 29, scope: !12611)
!12617 = !DILocation(line: 2591, column: 4, scope: !12611)
!12618 = !DILocation(line: 2591, column: 27, scope: !12611)
!12619 = !DILocation(line: 2593, column: 8, scope: !12620)
!12620 = distinct !DILexicalBlock(scope: !12611, file: !3, line: 2593, column: 8)
!12621 = !DILocation(line: 2593, column: 8, scope: !12611)
!12622 = !DILocation(line: 2594, column: 6, scope: !12620)
!12623 = !DILocation(line: 2595, column: 32, scope: !12611)
!12624 = !DILocation(line: 2595, column: 12, scope: !12611)
!12625 = !DILocation(line: 2595, column: 10, scope: !12611)
!12626 = !DILocation(line: 2596, column: 14, scope: !12611)
!12627 = !DILocation(line: 2596, column: 20, scope: !12611)
!12628 = !DILocation(line: 2596, column: 23, scope: !12611)
!12629 = !DILocation(line: 0, scope: !12611)
!12630 = !DILocation(line: 2596, column: 12, scope: !12611)
!12631 = !DILocation(line: 2597, column: 11, scope: !12611)
!12632 = !DILocation(line: 2597, column: 9, scope: !12611)
!12633 = !DILocation(line: 2598, column: 11, scope: !12611)
!12634 = !DILocation(line: 2598, column: 9, scope: !12611)
!12635 = !DILocation(line: 2599, column: 4, scope: !12611)
!12636 = distinct !{!12636, !12606, !12637}
!12637 = !DILocation(line: 2600, column: 2, scope: !12607)
!12638 = !DILocation(line: 2601, column: 5, scope: !12607)
!12639 = !DILocation(line: 2604, column: 7, scope: !12640)
!12640 = distinct !DILexicalBlock(scope: !12526, file: !3, line: 2604, column: 7)
!12641 = !DILocation(line: 2604, column: 24, scope: !12640)
!12642 = !DILocation(line: 2605, column: 7, scope: !12640)
!12643 = !DILocation(line: 2605, column: 10, scope: !12640)
!12644 = !DILocation(line: 2605, column: 27, scope: !12640)
!12645 = !DILocation(line: 2604, column: 7, scope: !12526)
!12646 = !DILocation(line: 2606, column: 12, scope: !12640)
!12647 = !DILocation(line: 2606, column: 5, scope: !12640)
!12648 = !DILocation(line: 2616, column: 40, scope: !12526)
!12649 = !DILocation(line: 2616, column: 28, scope: !12526)
!12650 = !DILocation(line: 2616, column: 14, scope: !12526)
!12651 = !DILocation(line: 2621, column: 7, scope: !12652)
!12652 = distinct !DILexicalBlock(scope: !12526, file: !3, line: 2621, column: 7)
!12653 = !DILocation(line: 2622, column: 7, scope: !12652)
!12654 = !DILocation(line: 2622, column: 10, scope: !12652)
!12655 = !DILocation(line: 2622, column: 28, scope: !12652)
!12656 = !DILocation(line: 2623, column: 7, scope: !12652)
!12657 = !DILocation(line: 2623, column: 10, scope: !12652)
!12658 = !DILocation(line: 2623, column: 47, scope: !12652)
!12659 = !DILocation(line: 2621, column: 7, scope: !12526)
!12660 = !DILocation(line: 2625, column: 20, scope: !12661)
!12661 = distinct !DILexicalBlock(scope: !12652, file: !3, line: 2624, column: 5)
!12662 = !DILocation(line: 2625, column: 18, scope: !12661)
!12663 = !DILocation(line: 2626, column: 13, scope: !12661)
!12664 = !DILocation(line: 2627, column: 15, scope: !12661)
!12665 = !DILocation(line: 2628, column: 5, scope: !12661)
!12666 = !DILocation(line: 2630, column: 7, scope: !12667)
!12667 = distinct !DILexicalBlock(scope: !12526, file: !3, line: 2630, column: 7)
!12668 = !DILocation(line: 2631, column: 7, scope: !12667)
!12669 = !DILocation(line: 2631, column: 10, scope: !12667)
!12670 = !DILocation(line: 2631, column: 28, scope: !12667)
!12671 = !DILocation(line: 2632, column: 7, scope: !12667)
!12672 = !DILocation(line: 2632, column: 10, scope: !12667)
!12673 = !DILocation(line: 2632, column: 47, scope: !12667)
!12674 = !DILocation(line: 2630, column: 7, scope: !12526)
!12675 = !DILocation(line: 2634, column: 21, scope: !12676)
!12676 = distinct !DILexicalBlock(scope: !12667, file: !3, line: 2633, column: 5)
!12677 = !DILocation(line: 2634, column: 19, scope: !12676)
!12678 = !DILocation(line: 2635, column: 13, scope: !12676)
!12679 = !DILocation(line: 2636, column: 15, scope: !12676)
!12680 = !DILocation(line: 2637, column: 5, scope: !12676)
!12681 = !DILocation(line: 2640, column: 7, scope: !12682)
!12682 = distinct !DILexicalBlock(scope: !12526, file: !3, line: 2640, column: 7)
!12683 = !DILocation(line: 2640, column: 7, scope: !12526)
!12684 = !DILocation(line: 2641, column: 18, scope: !12682)
!12685 = !DILocation(line: 2641, column: 5, scope: !12682)
!12686 = !DILocation(line: 2643, column: 18, scope: !12682)
!12687 = !DILocation(line: 2646, column: 7, scope: !12688)
!12688 = distinct !DILexicalBlock(scope: !12526, file: !3, line: 2646, column: 7)
!12689 = !DILocation(line: 2646, column: 19, scope: !12688)
!12690 = !DILocation(line: 2646, column: 22, scope: !12688)
!12691 = !DILocation(line: 2646, column: 7, scope: !12526)
!12692 = !DILocation(line: 2647, column: 19, scope: !12688)
!12693 = !DILocation(line: 2647, column: 5, scope: !12688)
!12694 = !DILocation(line: 2649, column: 19, scope: !12688)
!12695 = !DILocation(line: 2652, column: 8, scope: !12696)
!12696 = distinct !DILexicalBlock(scope: !12526, file: !3, line: 2652, column: 7)
!12697 = !DILocation(line: 2652, column: 16, scope: !12696)
!12698 = !DILocation(line: 2652, column: 20, scope: !12696)
!12699 = !DILocation(line: 2652, column: 7, scope: !12526)
!12700 = !DILocation(line: 2653, column: 29, scope: !12696)
!12701 = !DILocation(line: 2653, column: 35, scope: !12696)
!12702 = !DILocation(line: 2653, column: 49, scope: !12696)
!12703 = !DILocation(line: 2654, column: 8, scope: !12696)
!12704 = !DILocation(line: 2655, column: 10, scope: !12696)
!12705 = !DILocation(line: 2655, column: 33, scope: !12696)
!12706 = !DILocation(line: 2653, column: 12, scope: !12696)
!12707 = !DILocation(line: 2653, column: 5, scope: !12696)
!12708 = !DILocation(line: 2658, column: 7, scope: !12709)
!12709 = distinct !DILexicalBlock(scope: !12526, file: !3, line: 2658, column: 7)
!12710 = !DILocation(line: 2658, column: 7, scope: !12526)
!12711 = !DILocation(line: 2659, column: 20, scope: !12709)
!12712 = !DILocation(line: 2659, column: 9, scope: !12709)
!12713 = !DILocation(line: 2659, column: 7, scope: !12709)
!12714 = !DILocation(line: 2659, column: 5, scope: !12709)
!12715 = !DILocation(line: 2660, column: 12, scope: !12716)
!12716 = distinct !DILexicalBlock(scope: !12709, file: !3, line: 2660, column: 12)
!12717 = !DILocation(line: 2660, column: 12, scope: !12709)
!12718 = !DILocation(line: 2661, column: 20, scope: !12716)
!12719 = !DILocation(line: 2661, column: 9, scope: !12716)
!12720 = !DILocation(line: 2661, column: 7, scope: !12716)
!12721 = !DILocation(line: 2661, column: 5, scope: !12716)
!12722 = !DILocation(line: 2663, column: 7, scope: !12716)
!12723 = !DILocation(line: 2664, column: 7, scope: !12724)
!12724 = distinct !DILexicalBlock(scope: !12526, file: !3, line: 2664, column: 7)
!12725 = !DILocation(line: 2664, column: 9, scope: !12724)
!12726 = !DILocation(line: 2664, column: 12, scope: !12724)
!12727 = !DILocation(line: 2664, column: 26, scope: !12724)
!12728 = !DILocation(line: 2664, column: 7, scope: !12526)
!12729 = !DILocation(line: 2665, column: 17, scope: !12724)
!12730 = !DILocation(line: 2665, column: 15, scope: !12724)
!12731 = !DILocation(line: 2665, column: 5, scope: !12724)
!12732 = !DILocation(line: 2669, column: 8, scope: !12733)
!12733 = distinct !DILexicalBlock(scope: !12526, file: !3, line: 2669, column: 7)
!12734 = !DILocation(line: 2669, column: 7, scope: !12526)
!12735 = !DILocation(line: 2670, column: 19, scope: !12733)
!12736 = !DILocation(line: 2670, column: 5, scope: !12733)
!12737 = !DILocation(line: 2673, column: 15, scope: !12526)
!12738 = !DILocation(line: 2673, column: 25, scope: !12526)
!12739 = !DILocation(line: 2673, column: 14, scope: !12526)
!12740 = !DILocation(line: 2673, column: 12, scope: !12526)
!12741 = !DILocation(line: 2674, column: 17, scope: !12526)
!12742 = !DILocation(line: 2674, column: 29, scope: !12526)
!12743 = !DILocation(line: 2674, column: 16, scope: !12526)
!12744 = !DILocation(line: 2674, column: 14, scope: !12526)
!12745 = !DILocation(line: 2684, column: 40, scope: !12526)
!12746 = !DILocation(line: 2684, column: 20, scope: !12526)
!12747 = !DILocation(line: 2684, column: 18, scope: !12526)
!12748 = !DILocation(line: 2686, column: 27, scope: !12526)
!12749 = !DILocation(line: 2686, column: 33, scope: !12526)
!12750 = !DILocation(line: 2686, column: 47, scope: !12526)
!12751 = !DILocation(line: 2687, column: 6, scope: !12526)
!12752 = !DILocation(line: 2688, column: 8, scope: !12526)
!12753 = !DILocation(line: 2688, column: 31, scope: !12526)
!12754 = !DILocation(line: 2686, column: 10, scope: !12526)
!12755 = !DILocation(line: 2686, column: 8, scope: !12526)
!12756 = !DILocation(line: 2690, column: 8, scope: !12526)
!12757 = !DILocation(line: 2691, column: 29, scope: !12526)
!12758 = !DILocation(line: 2691, column: 3, scope: !12526)
!12759 = !DILocation(line: 2693, column: 29, scope: !12526)
!12760 = !DILocation(line: 2693, column: 3, scope: !12526)
!12761 = !DILocation(line: 2694, column: 7, scope: !12762)
!12762 = distinct !DILexicalBlock(scope: !12526, file: !3, line: 2694, column: 7)
!12763 = !DILocation(line: 2694, column: 7, scope: !12526)
!12764 = !DILocation(line: 2696, column: 11, scope: !12765)
!12765 = distinct !DILexicalBlock(scope: !12766, file: !3, line: 2696, column: 11)
!12766 = distinct !DILexicalBlock(scope: !12762, file: !3, line: 2695, column: 5)
!12767 = !DILocation(line: 2696, column: 11, scope: !12766)
!12768 = !DILocalVariable(name: "last", scope: !12769, file: !3, line: 2698, type: !1686)
!12769 = distinct !DILexicalBlock(scope: !12765, file: !3, line: 2697, column: 2)
!12770 = !DILocation(line: 2698, column: 9, scope: !12769)
!12771 = !DILocation(line: 2698, column: 27, scope: !12769)
!12772 = !DILocation(line: 2698, column: 16, scope: !12769)
!12773 = !DILocation(line: 2699, column: 8, scope: !12769)
!12774 = !DILocation(line: 2699, column: 6, scope: !12769)
!12775 = !DILocation(line: 2700, column: 8, scope: !12776)
!12776 = distinct !DILexicalBlock(scope: !12769, file: !3, line: 2700, column: 8)
!12777 = !DILocation(line: 2700, column: 8, scope: !12769)
!12778 = !DILocation(line: 2701, column: 6, scope: !12776)
!12779 = !DILocation(line: 2702, column: 30, scope: !12769)
!12780 = !DILocation(line: 2702, column: 4, scope: !12769)
!12781 = !DILocation(line: 2703, column: 2, scope: !12769)
!12782 = !DILocation(line: 2704, column: 11, scope: !12783)
!12783 = distinct !DILexicalBlock(scope: !12766, file: !3, line: 2704, column: 11)
!12784 = !DILocation(line: 2704, column: 11, scope: !12766)
!12785 = !DILocation(line: 2706, column: 8, scope: !12786)
!12786 = distinct !DILexicalBlock(scope: !12783, file: !3, line: 2705, column: 2)
!12787 = !DILocation(line: 2706, column: 6, scope: !12786)
!12788 = !DILocation(line: 2707, column: 30, scope: !12786)
!12789 = !DILocation(line: 2707, column: 4, scope: !12786)
!12790 = !DILocation(line: 2708, column: 2, scope: !12786)
!12791 = !DILocation(line: 2709, column: 33, scope: !12766)
!12792 = !DILocation(line: 2709, column: 7, scope: !12766)
!12793 = !DILocation(line: 2710, column: 5, scope: !12766)
!12794 = !DILocation(line: 2711, column: 7, scope: !12795)
!12795 = distinct !DILexicalBlock(scope: !12526, file: !3, line: 2711, column: 7)
!12796 = !DILocation(line: 2711, column: 16, scope: !12795)
!12797 = !DILocation(line: 2711, column: 19, scope: !12795)
!12798 = !DILocation(line: 2711, column: 7, scope: !12526)
!12799 = !DILocation(line: 2713, column: 11, scope: !12800)
!12800 = distinct !DILexicalBlock(scope: !12795, file: !3, line: 2712, column: 5)
!12801 = !DILocation(line: 2713, column: 9, scope: !12800)
!12802 = !DILocation(line: 2714, column: 33, scope: !12800)
!12803 = !DILocation(line: 2714, column: 7, scope: !12800)
!12804 = !DILocation(line: 2715, column: 5, scope: !12800)
!12805 = !DILocation(line: 2717, column: 10, scope: !12526)
!12806 = !DILocation(line: 2717, column: 3, scope: !12526)
!12807 = !DILocation(line: 2718, column: 1, scope: !12526)
!12808 = distinct !DISubprogram(name: "gimple_push_condition", scope: !3, file: !3, line: 273, type: !10846, scopeLine: 274, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!12809 = !DILocation(line: 279, column: 6, scope: !12808)
!12810 = !DILocation(line: 279, column: 21, scope: !12808)
!12811 = !DILocation(line: 279, column: 3, scope: !12808)
!12812 = !DILocation(line: 280, column: 1, scope: !12808)
!12813 = distinct !DISubprogram(name: "gimple_pop_condition", scope: !3, file: !3, line: 286, type: !12814, scopeLine: 287, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!12814 = !DISubroutineType(types: !12815)
!12815 = !{null, !3489}
!12816 = !DILocalVariable(name: "pre_p", arg: 1, scope: !12813, file: !3, line: 286, type: !3489)
!12817 = !DILocation(line: 286, column: 35, scope: !12813)
!12818 = !DILocalVariable(name: "conds", scope: !12813, file: !3, line: 288, type: !1330)
!12819 = !DILocation(line: 288, column: 7, scope: !12813)
!12820 = !DILocation(line: 288, column: 18, scope: !12813)
!12821 = !DILocation(line: 288, column: 33, scope: !12813)
!12822 = !DILocation(line: 288, column: 15, scope: !12813)
!12823 = !DILocation(line: 290, column: 3, scope: !12813)
!12824 = !DILocation(line: 291, column: 7, scope: !12825)
!12825 = distinct !DILexicalBlock(scope: !12813, file: !3, line: 291, column: 7)
!12826 = !DILocation(line: 291, column: 13, scope: !12825)
!12827 = !DILocation(line: 291, column: 7, scope: !12813)
!12828 = !DILocation(line: 293, column: 29, scope: !12829)
!12829 = distinct !DILexicalBlock(scope: !12825, file: !3, line: 292, column: 5)
!12830 = !DILocation(line: 293, column: 36, scope: !12829)
!12831 = !DILocation(line: 293, column: 51, scope: !12829)
!12832 = !DILocation(line: 293, column: 7, scope: !12829)
!12833 = !DILocation(line: 294, column: 7, scope: !12829)
!12834 = !DILocation(line: 294, column: 22, scope: !12829)
!12835 = !DILocation(line: 294, column: 43, scope: !12829)
!12836 = !DILocation(line: 295, column: 5, scope: !12829)
!12837 = !DILocation(line: 296, column: 1, scope: !12813)
!12838 = distinct !DISubprogram(name: "gimple_set_do_not_emit_location", scope: !3, file: !3, line: 794, type: !3291, scopeLine: 795, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!12839 = !DILocalVariable(name: "g", arg: 1, scope: !12838, file: !3, line: 794, type: !2014)
!12840 = !DILocation(line: 794, column: 41, scope: !12838)
!12841 = !DILocation(line: 798, column: 19, scope: !12838)
!12842 = !DILocation(line: 798, column: 3, scope: !12838)
!12843 = !DILocation(line: 799, column: 1, scope: !12838)
!12844 = distinct !DISubprogram(name: "tree_operand_length", scope: !135, file: !135, line: 5347, type: !12845, scopeLine: 5348, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!12845 = !DISubroutineType(types: !12846)
!12846 = !{!1330, !3130}
!12847 = !DILocalVariable(name: "node", arg: 1, scope: !12844, file: !135, line: 5347, type: !3130)
!12848 = !DILocation(line: 5347, column: 33, scope: !12844)
!12849 = !DILocation(line: 5349, column: 7, scope: !12850)
!12850 = distinct !DILexicalBlock(scope: !12844, file: !135, line: 5349, column: 7)
!12851 = !DILocation(line: 5349, column: 7, scope: !12844)
!12852 = !DILocation(line: 5350, column: 12, scope: !12850)
!12853 = !DILocation(line: 5350, column: 5, scope: !12850)
!12854 = !DILocation(line: 5352, column: 12, scope: !12850)
!12855 = !DILocation(line: 5352, column: 5, scope: !12850)
!12856 = !DILocation(line: 5353, column: 1, scope: !12844)
!12857 = distinct !DISubprogram(name: "shortcut_cond_r", scope: !3, file: !3, line: 2448, type: !12858, scopeLine: 2450, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!12858 = !DISubroutineType(types: !12859)
!12859 = !{!1686, !1686, !2049, !2049, !1812}
!12860 = !DILocalVariable(name: "pred", arg: 1, scope: !12857, file: !3, line: 2448, type: !1686)
!12861 = !DILocation(line: 2448, column: 23, scope: !12857)
!12862 = !DILocalVariable(name: "true_label_p", arg: 2, scope: !12857, file: !3, line: 2448, type: !2049)
!12863 = !DILocation(line: 2448, column: 35, scope: !12857)
!12864 = !DILocalVariable(name: "false_label_p", arg: 3, scope: !12857, file: !3, line: 2448, type: !2049)
!12865 = !DILocation(line: 2448, column: 55, scope: !12857)
!12866 = !DILocalVariable(name: "locus", arg: 4, scope: !12857, file: !3, line: 2449, type: !1812)
!12867 = !DILocation(line: 2449, column: 15, scope: !12857)
!12868 = !DILocalVariable(name: "local_label", scope: !12857, file: !3, line: 2451, type: !1686)
!12869 = !DILocation(line: 2451, column: 8, scope: !12857)
!12870 = !DILocalVariable(name: "t", scope: !12857, file: !3, line: 2452, type: !1686)
!12871 = !DILocation(line: 2452, column: 8, scope: !12857)
!12872 = !DILocalVariable(name: "expr", scope: !12857, file: !3, line: 2452, type: !1686)
!12873 = !DILocation(line: 2452, column: 11, scope: !12857)
!12874 = !DILocation(line: 2457, column: 7, scope: !12875)
!12875 = distinct !DILexicalBlock(scope: !12857, file: !3, line: 2457, column: 7)
!12876 = !DILocation(line: 2457, column: 24, scope: !12875)
!12877 = !DILocation(line: 2457, column: 7, scope: !12857)
!12878 = !DILocalVariable(name: "new_locus", scope: !12879, file: !3, line: 2459, type: !1812)
!12879 = distinct !DILexicalBlock(scope: !12875, file: !3, line: 2458, column: 5)
!12880 = !DILocation(line: 2459, column: 18, scope: !12879)
!12881 = !DILocation(line: 2467, column: 11, scope: !12882)
!12882 = distinct !DILexicalBlock(scope: !12879, file: !3, line: 2467, column: 11)
!12883 = !DILocation(line: 2467, column: 25, scope: !12882)
!12884 = !DILocation(line: 2467, column: 11, scope: !12879)
!12885 = !DILocation(line: 2468, column: 16, scope: !12882)
!12886 = !DILocation(line: 2468, column: 2, scope: !12882)
!12887 = !DILocation(line: 2471, column: 28, scope: !12879)
!12888 = !DILocation(line: 2471, column: 58, scope: !12879)
!12889 = !DILocation(line: 2471, column: 73, scope: !12879)
!12890 = !DILocation(line: 2471, column: 11, scope: !12879)
!12891 = !DILocation(line: 2471, column: 9, scope: !12879)
!12892 = !DILocation(line: 2472, column: 33, scope: !12879)
!12893 = !DILocation(line: 2472, column: 7, scope: !12879)
!12894 = !DILocation(line: 2475, column: 19, scope: !12879)
!12895 = !DILocation(line: 2475, column: 46, scope: !12879)
!12896 = !DILocation(line: 2475, column: 69, scope: !12879)
!12897 = !DILocation(line: 2475, column: 17, scope: !12879)
!12898 = !DILocation(line: 2476, column: 28, scope: !12879)
!12899 = !DILocation(line: 2476, column: 52, scope: !12879)
!12900 = !DILocation(line: 2476, column: 66, scope: !12879)
!12901 = !DILocation(line: 2477, column: 7, scope: !12879)
!12902 = !DILocation(line: 2476, column: 11, scope: !12879)
!12903 = !DILocation(line: 2476, column: 9, scope: !12879)
!12904 = !DILocation(line: 2478, column: 33, scope: !12879)
!12905 = !DILocation(line: 2478, column: 7, scope: !12879)
!12906 = !DILocation(line: 2479, column: 5, scope: !12879)
!12907 = !DILocation(line: 2480, column: 12, scope: !12908)
!12908 = distinct !DILexicalBlock(scope: !12875, file: !3, line: 2480, column: 12)
!12909 = !DILocation(line: 2480, column: 29, scope: !12908)
!12910 = !DILocation(line: 2480, column: 12, scope: !12875)
!12911 = !DILocalVariable(name: "new_locus", scope: !12912, file: !3, line: 2482, type: !1812)
!12912 = distinct !DILexicalBlock(scope: !12908, file: !3, line: 2481, column: 5)
!12913 = !DILocation(line: 2482, column: 18, scope: !12912)
!12914 = !DILocation(line: 2490, column: 11, scope: !12915)
!12915 = distinct !DILexicalBlock(scope: !12912, file: !3, line: 2490, column: 11)
!12916 = !DILocation(line: 2490, column: 24, scope: !12915)
!12917 = !DILocation(line: 2490, column: 11, scope: !12912)
!12918 = !DILocation(line: 2491, column: 15, scope: !12915)
!12919 = !DILocation(line: 2491, column: 2, scope: !12915)
!12920 = !DILocation(line: 2494, column: 28, scope: !12912)
!12921 = !DILocation(line: 2494, column: 52, scope: !12912)
!12922 = !DILocation(line: 2494, column: 72, scope: !12912)
!12923 = !DILocation(line: 2494, column: 11, scope: !12912)
!12924 = !DILocation(line: 2494, column: 9, scope: !12912)
!12925 = !DILocation(line: 2495, column: 33, scope: !12912)
!12926 = !DILocation(line: 2495, column: 7, scope: !12912)
!12927 = !DILocation(line: 2498, column: 19, scope: !12912)
!12928 = !DILocation(line: 2498, column: 46, scope: !12912)
!12929 = !DILocation(line: 2498, column: 69, scope: !12912)
!12930 = !DILocation(line: 2498, column: 17, scope: !12912)
!12931 = !DILocation(line: 2499, column: 28, scope: !12912)
!12932 = !DILocation(line: 2499, column: 52, scope: !12912)
!12933 = !DILocation(line: 2499, column: 66, scope: !12912)
!12934 = !DILocation(line: 2500, column: 7, scope: !12912)
!12935 = !DILocation(line: 2499, column: 11, scope: !12912)
!12936 = !DILocation(line: 2499, column: 9, scope: !12912)
!12937 = !DILocation(line: 2501, column: 33, scope: !12912)
!12938 = !DILocation(line: 2501, column: 7, scope: !12912)
!12939 = !DILocation(line: 2502, column: 5, scope: !12912)
!12940 = !DILocation(line: 2503, column: 12, scope: !12941)
!12941 = distinct !DILexicalBlock(scope: !12908, file: !3, line: 2503, column: 12)
!12942 = !DILocation(line: 2503, column: 29, scope: !12941)
!12943 = !DILocation(line: 2503, column: 12, scope: !12908)
!12944 = !DILocalVariable(name: "new_locus", scope: !12945, file: !3, line: 2505, type: !1812)
!12945 = distinct !DILexicalBlock(scope: !12941, file: !3, line: 2504, column: 5)
!12946 = !DILocation(line: 2505, column: 18, scope: !12945)
!12947 = !DILocation(line: 2515, column: 19, scope: !12945)
!12948 = !DILocation(line: 2515, column: 46, scope: !12945)
!12949 = !DILocation(line: 2515, column: 69, scope: !12945)
!12950 = !DILocation(line: 2515, column: 17, scope: !12945)
!12951 = !DILocation(line: 2516, column: 14, scope: !12945)
!12952 = !DILocation(line: 2516, column: 12, scope: !12945)
!12953 = !DILocation(line: 2521, column: 5, scope: !12945)
!12954 = !DILocation(line: 2524, column: 14, scope: !12955)
!12955 = distinct !DILexicalBlock(scope: !12941, file: !3, line: 2523, column: 5)
!12956 = !DILocation(line: 2524, column: 12, scope: !12955)
!12957 = !DILocation(line: 2527, column: 7, scope: !12955)
!12958 = !DILocation(line: 2530, column: 7, scope: !12959)
!12959 = distinct !DILexicalBlock(scope: !12857, file: !3, line: 2530, column: 7)
!12960 = !DILocation(line: 2530, column: 7, scope: !12857)
!12961 = !DILocation(line: 2532, column: 11, scope: !12962)
!12962 = distinct !DILexicalBlock(scope: !12959, file: !3, line: 2531, column: 5)
!12963 = !DILocation(line: 2532, column: 9, scope: !12962)
!12964 = !DILocation(line: 2533, column: 33, scope: !12962)
!12965 = !DILocation(line: 2533, column: 7, scope: !12962)
!12966 = !DILocation(line: 2534, column: 5, scope: !12962)
!12967 = !DILocation(line: 2536, column: 10, scope: !12857)
!12968 = !DILocation(line: 2536, column: 3, scope: !12857)
!12969 = distinct !DISubprogram(name: "gimple_set_plf", scope: !385, file: !385, line: 1235, type: !12970, scopeLine: 1236, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!12970 = !DISubroutineType(types: !12971)
!12971 = !{null, !2014, !1578, !1804}
!12972 = !DILocalVariable(name: "stmt", arg: 1, scope: !12969, file: !385, line: 1235, type: !2014)
!12973 = !DILocation(line: 1235, column: 24, scope: !12969)
!12974 = !DILocalVariable(name: "plf", arg: 2, scope: !12969, file: !385, line: 1235, type: !1578)
!12975 = !DILocation(line: 1235, column: 44, scope: !12969)
!12976 = !DILocalVariable(name: "val_p", arg: 3, scope: !12969, file: !385, line: 1235, type: !1804)
!12977 = !DILocation(line: 1235, column: 54, scope: !12969)
!12978 = !DILocation(line: 1237, column: 7, scope: !12979)
!12979 = distinct !DILexicalBlock(scope: !12969, file: !385, line: 1237, column: 7)
!12980 = !DILocation(line: 1237, column: 7, scope: !12969)
!12981 = !DILocation(line: 1238, column: 40, scope: !12979)
!12982 = !DILocation(line: 1238, column: 5, scope: !12979)
!12983 = !DILocation(line: 1238, column: 11, scope: !12979)
!12984 = !DILocation(line: 1238, column: 18, scope: !12979)
!12985 = !DILocation(line: 1238, column: 22, scope: !12979)
!12986 = !DILocation(line: 1240, column: 42, scope: !12979)
!12987 = !DILocation(line: 1240, column: 25, scope: !12979)
!12988 = !DILocation(line: 1240, column: 5, scope: !12979)
!12989 = !DILocation(line: 1240, column: 11, scope: !12979)
!12990 = !DILocation(line: 1240, column: 18, scope: !12979)
!12991 = !DILocation(line: 1240, column: 22, scope: !12979)
!12992 = !DILocation(line: 1241, column: 1, scope: !12969)
!12993 = distinct !DISubprogram(name: "gimplify_arg", scope: !3, file: !3, line: 2193, type: !12994, scopeLine: 2194, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!12994 = !DISubroutineType(types: !12995)
!12995 = !{!1329, !2049, !3489, !1812}
!12996 = !DILocalVariable(name: "arg_p", arg: 1, scope: !12993, file: !3, line: 2193, type: !2049)
!12997 = !DILocation(line: 2193, column: 21, scope: !12993)
!12998 = !DILocalVariable(name: "pre_p", arg: 2, scope: !12993, file: !3, line: 2193, type: !3489)
!12999 = !DILocation(line: 2193, column: 40, scope: !12993)
!13000 = !DILocalVariable(name: "call_location", arg: 3, scope: !12993, file: !3, line: 2193, type: !1812)
!13001 = !DILocation(line: 2193, column: 58, scope: !12993)
!13002 = !DILocalVariable(name: "test", scope: !12993, file: !3, line: 2195, type: !4591)
!13003 = !DILocation(line: 2195, column: 10, scope: !12993)
!13004 = !DILocalVariable(name: "fb", scope: !12993, file: !3, line: 2196, type: !4896)
!13005 = !DILocation(line: 2196, column: 14, scope: !12993)
!13006 = !DILocation(line: 2203, column: 27, scope: !13007)
!13007 = distinct !DILexicalBlock(scope: !12993, file: !3, line: 2203, column: 7)
!13008 = !DILocation(line: 2203, column: 7, scope: !13007)
!13009 = !DILocation(line: 2203, column: 7, scope: !12993)
!13010 = !DILocation(line: 2204, column: 10, scope: !13007)
!13011 = !DILocation(line: 2204, column: 30, scope: !13007)
!13012 = !DILocation(line: 2204, column: 5, scope: !13007)
!13013 = !DILocation(line: 2206, column: 10, scope: !13007)
!13014 = !DILocation(line: 2206, column: 33, scope: !13007)
!13015 = !DILocation(line: 2209, column: 25, scope: !12993)
!13016 = !DILocation(line: 2209, column: 3, scope: !12993)
!13017 = !DILocation(line: 2214, column: 33, scope: !12993)
!13018 = !DILocation(line: 2214, column: 32, scope: !12993)
!13019 = !DILocation(line: 2214, column: 40, scope: !12993)
!13020 = !DILocation(line: 2214, column: 3, scope: !12993)
!13021 = !DILocation(line: 2220, column: 25, scope: !12993)
!13022 = !DILocation(line: 2220, column: 32, scope: !12993)
!13023 = !DILocation(line: 2220, column: 45, scope: !12993)
!13024 = !DILocation(line: 2220, column: 51, scope: !12993)
!13025 = !DILocation(line: 2220, column: 10, scope: !12993)
!13026 = !DILocation(line: 2220, column: 3, scope: !12993)
!13027 = distinct !DISubprogram(name: "maybe_with_size_expr", scope: !3, file: !3, line: 2164, type: !12358, scopeLine: 2165, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!13028 = !DILocalVariable(name: "expr_p", arg: 1, scope: !13027, file: !3, line: 2164, type: !2049)
!13029 = !DILocation(line: 2164, column: 29, scope: !13027)
!13030 = !DILocalVariable(name: "expr", scope: !13027, file: !3, line: 2166, type: !1686)
!13031 = !DILocation(line: 2166, column: 8, scope: !13027)
!13032 = !DILocation(line: 2166, column: 16, scope: !13027)
!13033 = !DILocation(line: 2166, column: 15, scope: !13027)
!13034 = !DILocalVariable(name: "type", scope: !13027, file: !3, line: 2167, type: !1686)
!13035 = !DILocation(line: 2167, column: 8, scope: !13027)
!13036 = !DILocation(line: 2167, column: 15, scope: !13027)
!13037 = !DILocalVariable(name: "size", scope: !13027, file: !3, line: 2168, type: !1686)
!13038 = !DILocation(line: 2168, column: 8, scope: !13027)
!13039 = !DILocation(line: 2172, column: 7, scope: !13040)
!13040 = distinct !DILexicalBlock(scope: !13027, file: !3, line: 2172, column: 7)
!13041 = !DILocation(line: 2172, column: 24, scope: !13040)
!13042 = !DILocation(line: 2173, column: 7, scope: !13040)
!13043 = !DILocation(line: 2173, column: 10, scope: !13040)
!13044 = !DILocation(line: 2173, column: 18, scope: !13040)
!13045 = !DILocation(line: 2173, column: 15, scope: !13040)
!13046 = !DILocation(line: 2172, column: 7, scope: !13027)
!13047 = !DILocation(line: 2174, column: 5, scope: !13040)
!13048 = !DILocation(line: 2177, column: 10, scope: !13027)
!13049 = !DILocation(line: 2177, column: 8, scope: !13027)
!13050 = !DILocation(line: 2178, column: 8, scope: !13051)
!13051 = distinct !DILexicalBlock(scope: !13027, file: !3, line: 2178, column: 7)
!13052 = !DILocation(line: 2178, column: 13, scope: !13051)
!13053 = !DILocation(line: 2178, column: 16, scope: !13051)
!13054 = !DILocation(line: 2178, column: 33, scope: !13051)
!13055 = !DILocation(line: 2178, column: 7, scope: !13027)
!13056 = !DILocation(line: 2179, column: 5, scope: !13051)
!13057 = !DILocation(line: 2182, column: 24, scope: !13027)
!13058 = !DILocation(line: 2182, column: 10, scope: !13027)
!13059 = !DILocation(line: 2182, column: 8, scope: !13027)
!13060 = !DILocation(line: 2183, column: 10, scope: !13027)
!13061 = !DILocation(line: 2183, column: 8, scope: !13027)
!13062 = !DILocation(line: 2184, column: 13, scope: !13027)
!13063 = !DILocation(line: 2184, column: 4, scope: !13027)
!13064 = !DILocation(line: 2184, column: 11, scope: !13027)
!13065 = !DILocation(line: 2185, column: 1, scope: !13027)
!13066 = distinct !DISubprogram(name: "gimplify_modify_expr_rhs", scope: !3, file: !3, line: 4098, type: !13067, scopeLine: 4101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!13067 = !DISubroutineType(types: !13068)
!13068 = !{!1329, !2049, !2049, !2049, !3489, !3489, !1804}
!13069 = !DILocalVariable(name: "expr_p", arg: 1, scope: !13066, file: !3, line: 4098, type: !2049)
!13070 = !DILocation(line: 4098, column: 33, scope: !13066)
!13071 = !DILocalVariable(name: "from_p", arg: 2, scope: !13066, file: !3, line: 4098, type: !2049)
!13072 = !DILocation(line: 4098, column: 47, scope: !13066)
!13073 = !DILocalVariable(name: "to_p", arg: 3, scope: !13066, file: !3, line: 4098, type: !2049)
!13074 = !DILocation(line: 4098, column: 61, scope: !13066)
!13075 = !DILocalVariable(name: "pre_p", arg: 4, scope: !13066, file: !3, line: 4099, type: !3489)
!13076 = !DILocation(line: 4099, column: 18, scope: !13066)
!13077 = !DILocalVariable(name: "post_p", arg: 5, scope: !13066, file: !3, line: 4099, type: !3489)
!13078 = !DILocation(line: 4099, column: 37, scope: !13066)
!13079 = !DILocalVariable(name: "want_value", arg: 6, scope: !13066, file: !3, line: 4100, type: !1804)
!13080 = !DILocation(line: 4100, column: 11, scope: !13066)
!13081 = !DILocalVariable(name: "ret", scope: !13066, file: !3, line: 4102, type: !1329)
!13082 = !DILocation(line: 4102, column: 24, scope: !13066)
!13083 = !DILocation(line: 4104, column: 3, scope: !13066)
!13084 = !DILocation(line: 4104, column: 10, scope: !13066)
!13085 = !DILocation(line: 4104, column: 14, scope: !13066)
!13086 = !DILocation(line: 4105, column: 13, scope: !13066)
!13087 = !DILocation(line: 4105, column: 5, scope: !13066)
!13088 = !DILocation(line: 4112, column: 6, scope: !13089)
!13089 = distinct !DILexicalBlock(scope: !13090, file: !3, line: 4112, column: 6)
!13090 = distinct !DILexicalBlock(scope: !13066, file: !3, line: 4106, column: 7)
!13091 = !DILocation(line: 4113, column: 6, scope: !13089)
!13092 = !DILocation(line: 4113, column: 9, scope: !13089)
!13093 = !DILocation(line: 4114, column: 6, scope: !13089)
!13094 = !DILocation(line: 4114, column: 10, scope: !13089)
!13095 = !DILocation(line: 4115, column: 6, scope: !13089)
!13096 = !DILocation(line: 4115, column: 10, scope: !13089)
!13097 = !DILocation(line: 4116, column: 6, scope: !13089)
!13098 = !DILocation(line: 4116, column: 9, scope: !13089)
!13099 = !DILocation(line: 4116, column: 44, scope: !13089)
!13100 = !DILocation(line: 4112, column: 6, scope: !13090)
!13101 = !DILocalVariable(name: "old_from", scope: !13102, file: !3, line: 4118, type: !1686)
!13102 = distinct !DILexicalBlock(scope: !13089, file: !3, line: 4117, column: 4)
!13103 = !DILocation(line: 4118, column: 11, scope: !13102)
!13104 = !DILocation(line: 4118, column: 23, scope: !13102)
!13105 = !DILocation(line: 4118, column: 22, scope: !13102)
!13106 = !DILocation(line: 4121, column: 30, scope: !13102)
!13107 = !DILocation(line: 4121, column: 16, scope: !13102)
!13108 = !DILocation(line: 4121, column: 7, scope: !13102)
!13109 = !DILocation(line: 4121, column: 14, scope: !13102)
!13110 = !DILocation(line: 4125, column: 39, scope: !13102)
!13111 = !DILocation(line: 4125, column: 12, scope: !13102)
!13112 = !DILocation(line: 4125, column: 10, scope: !13102)
!13113 = !DILocation(line: 4126, column: 10, scope: !13114)
!13114 = distinct !DILexicalBlock(scope: !13102, file: !3, line: 4126, column: 10)
!13115 = !DILocation(line: 4126, column: 14, scope: !13114)
!13116 = !DILocation(line: 4126, column: 10, scope: !13102)
!13117 = !DILocation(line: 4128, column: 13, scope: !13118)
!13118 = distinct !DILexicalBlock(scope: !13114, file: !3, line: 4127, column: 8)
!13119 = !DILocation(line: 4128, column: 4, scope: !13118)
!13120 = !DILocation(line: 4128, column: 11, scope: !13118)
!13121 = !DILocation(line: 4130, column: 8, scope: !13118)
!13122 = !DILocation(line: 4133, column: 7, scope: !13123)
!13123 = distinct !DILexicalBlock(scope: !13114, file: !3, line: 4132, column: 8)
!13124 = !DILocation(line: 4134, column: 3, scope: !13123)
!13125 = !DILocation(line: 4136, column: 4, scope: !13102)
!13126 = !DILocation(line: 4137, column: 6, scope: !13090)
!13127 = !DILocation(line: 4138, column: 2, scope: !13090)
!13128 = !DILocalVariable(name: "t", scope: !13129, file: !3, line: 4150, type: !1686)
!13129 = distinct !DILexicalBlock(scope: !13090, file: !3, line: 4140, column: 2)
!13130 = !DILocation(line: 4150, column: 9, scope: !13129)
!13131 = !DILocation(line: 4150, column: 43, scope: !13129)
!13132 = !DILocation(line: 4150, column: 13, scope: !13129)
!13133 = !DILocation(line: 4151, column: 8, scope: !13134)
!13134 = distinct !DILexicalBlock(scope: !13129, file: !3, line: 4151, column: 8)
!13135 = !DILocation(line: 4151, column: 8, scope: !13129)
!13136 = !DILocation(line: 4153, column: 18, scope: !13137)
!13137 = distinct !DILexicalBlock(scope: !13134, file: !3, line: 4152, column: 6)
!13138 = !DILocation(line: 4153, column: 9, scope: !13137)
!13139 = !DILocation(line: 4153, column: 16, scope: !13137)
!13140 = !DILocation(line: 4154, column: 12, scope: !13137)
!13141 = !DILocation(line: 4155, column: 6, scope: !13137)
!13142 = !DILocation(line: 4157, column: 10, scope: !13134)
!13143 = !DILocation(line: 4158, column: 4, scope: !13129)
!13144 = !DILocalVariable(name: "init", scope: !13145, file: !3, line: 4173, type: !1686)
!13145 = distinct !DILexicalBlock(scope: !13090, file: !3, line: 4162, column: 2)
!13146 = !DILocation(line: 4173, column: 9, scope: !13145)
!13147 = !DILocation(line: 4173, column: 16, scope: !13145)
!13148 = !DILocation(line: 4175, column: 8, scope: !13149)
!13149 = distinct !DILexicalBlock(scope: !13145, file: !3, line: 4175, column: 8)
!13150 = !DILocation(line: 4176, column: 8, scope: !13149)
!13151 = !DILocation(line: 4176, column: 12, scope: !13149)
!13152 = !DILocation(line: 4175, column: 8, scope: !13145)
!13153 = !DILocation(line: 4178, column: 18, scope: !13154)
!13154 = distinct !DILexicalBlock(scope: !13149, file: !3, line: 4177, column: 6)
!13155 = !DILocation(line: 4178, column: 9, scope: !13154)
!13156 = !DILocation(line: 4178, column: 16, scope: !13154)
!13157 = !DILocation(line: 4179, column: 12, scope: !13154)
!13158 = !DILocation(line: 4180, column: 6, scope: !13154)
!13159 = !DILocation(line: 4182, column: 10, scope: !13149)
!13160 = !DILocation(line: 4184, column: 2, scope: !13090)
!13161 = !DILocation(line: 4189, column: 26, scope: !13090)
!13162 = !DILocation(line: 4189, column: 34, scope: !13090)
!13163 = !DILocation(line: 4189, column: 2, scope: !13090)
!13164 = !DILocation(line: 4190, column: 6, scope: !13090)
!13165 = !DILocation(line: 4191, column: 2, scope: !13090)
!13166 = !DILocation(line: 4196, column: 36, scope: !13090)
!13167 = !DILocation(line: 4196, column: 44, scope: !13090)
!13168 = !DILocation(line: 4196, column: 51, scope: !13090)
!13169 = !DILocation(line: 4196, column: 59, scope: !13090)
!13170 = !DILocation(line: 4196, column: 9, scope: !13090)
!13171 = !DILocation(line: 4196, column: 2, scope: !13090)
!13172 = !DILocation(line: 4204, column: 27, scope: !13173)
!13173 = distinct !DILexicalBlock(scope: !13090, file: !3, line: 4204, column: 6)
!13174 = !DILocation(line: 4204, column: 7, scope: !13173)
!13175 = !DILocation(line: 4204, column: 6, scope: !13090)
!13176 = !DILocalVariable(name: "code", scope: !13177, file: !3, line: 4207, type: !134)
!13177 = distinct !DILexicalBlock(scope: !13173, file: !3, line: 4205, column: 4)
!13178 = !DILocation(line: 4207, column: 21, scope: !13177)
!13179 = !DILocation(line: 4207, column: 28, scope: !13177)
!13180 = !DILocalVariable(name: "cond", scope: !13177, file: !3, line: 4208, type: !1686)
!13181 = !DILocation(line: 4208, column: 11, scope: !13177)
!13182 = !DILocation(line: 4208, column: 19, scope: !13177)
!13183 = !DILocation(line: 4208, column: 18, scope: !13177)
!13184 = !DILocalVariable(name: "result", scope: !13177, file: !3, line: 4209, type: !1686)
!13185 = !DILocation(line: 4209, column: 11, scope: !13177)
!13186 = !DILocation(line: 4209, column: 21, scope: !13177)
!13187 = !DILocation(line: 4209, column: 20, scope: !13177)
!13188 = !DILocation(line: 4211, column: 36, scope: !13177)
!13189 = !DILocation(line: 4211, column: 43, scope: !13177)
!13190 = !DILocation(line: 4211, column: 12, scope: !13177)
!13191 = !DILocation(line: 4211, column: 10, scope: !13177)
!13192 = !DILocation(line: 4213, column: 10, scope: !13193)
!13193 = distinct !DILexicalBlock(scope: !13177, file: !3, line: 4213, column: 10)
!13194 = !DILocation(line: 4213, column: 14, scope: !13193)
!13195 = !DILocation(line: 4213, column: 10, scope: !13177)
!13196 = !DILocation(line: 4214, column: 12, scope: !13193)
!13197 = !DILocation(line: 4214, column: 8, scope: !13193)
!13198 = !DILocation(line: 4216, column: 10, scope: !13199)
!13199 = distinct !DILexicalBlock(scope: !13177, file: !3, line: 4216, column: 10)
!13200 = !DILocation(line: 4216, column: 48, scope: !13199)
!13201 = !DILocation(line: 4216, column: 45, scope: !13199)
!13202 = !DILocation(line: 4216, column: 10, scope: !13177)
!13203 = !DILocation(line: 4218, column: 5, scope: !13199)
!13204 = !DILocation(line: 4217, column: 8, scope: !13199)
!13205 = !DILocation(line: 4218, column: 3, scope: !13199)
!13206 = !DILocation(line: 4220, column: 10, scope: !13207)
!13207 = distinct !DILexicalBlock(scope: !13177, file: !3, line: 4220, column: 10)
!13208 = !DILocation(line: 4220, column: 48, scope: !13207)
!13209 = !DILocation(line: 4220, column: 45, scope: !13207)
!13210 = !DILocation(line: 4220, column: 10, scope: !13177)
!13211 = !DILocation(line: 4222, column: 5, scope: !13207)
!13212 = !DILocation(line: 4221, column: 8, scope: !13207)
!13213 = !DILocation(line: 4222, column: 3, scope: !13207)
!13214 = !DILocation(line: 4225, column: 25, scope: !13177)
!13215 = !DILocation(line: 4225, column: 6, scope: !13177)
!13216 = !DILocation(line: 4225, column: 23, scope: !13177)
!13217 = !DILocation(line: 4226, column: 32, scope: !13177)
!13218 = !DILocation(line: 4226, column: 6, scope: !13177)
!13219 = !DILocation(line: 4228, column: 10, scope: !13220)
!13220 = distinct !DILexicalBlock(scope: !13177, file: !3, line: 4228, column: 10)
!13221 = !DILocation(line: 4228, column: 10, scope: !13177)
!13222 = !DILocation(line: 4230, column: 21, scope: !13223)
!13223 = distinct !DILexicalBlock(scope: !13220, file: !3, line: 4229, column: 8)
!13224 = !DILocation(line: 4230, column: 27, scope: !13223)
!13225 = !DILocation(line: 4230, column: 3, scope: !13223)
!13226 = !DILocation(line: 4231, column: 27, scope: !13223)
!13227 = !DILocation(line: 4231, column: 13, scope: !13223)
!13228 = !DILocation(line: 4231, column: 4, scope: !13223)
!13229 = !DILocation(line: 4231, column: 11, scope: !13223)
!13230 = !DILocation(line: 4232, column: 8, scope: !13223)
!13231 = !DILocation(line: 4234, column: 18, scope: !13220)
!13232 = !DILocation(line: 4234, column: 9, scope: !13220)
!13233 = !DILocation(line: 4234, column: 16, scope: !13220)
!13234 = !DILocation(line: 4235, column: 13, scope: !13177)
!13235 = !DILocation(line: 4235, column: 6, scope: !13177)
!13236 = !DILocation(line: 4238, column: 8, scope: !13173)
!13237 = !DILocation(line: 4239, column: 2, scope: !13090)
!13238 = !DILocation(line: 4244, column: 7, scope: !13239)
!13239 = distinct !DILexicalBlock(scope: !13090, file: !3, line: 4244, column: 6)
!13240 = !DILocation(line: 4245, column: 6, scope: !13239)
!13241 = !DILocation(line: 4245, column: 29, scope: !13239)
!13242 = !DILocation(line: 4245, column: 28, scope: !13239)
!13243 = !DILocation(line: 4245, column: 38, scope: !13239)
!13244 = !DILocation(line: 4245, column: 37, scope: !13239)
!13245 = !DILocation(line: 4245, column: 9, scope: !13239)
!13246 = !DILocation(line: 4244, column: 6, scope: !13090)
!13247 = !DILocalVariable(name: "use_target", scope: !13248, file: !3, line: 4247, type: !1804)
!13248 = distinct !DILexicalBlock(scope: !13239, file: !3, line: 4246, column: 4)
!13249 = !DILocation(line: 4247, column: 11, scope: !13248)
!13250 = !DILocation(line: 4249, column: 32, scope: !13251)
!13251 = distinct !DILexicalBlock(scope: !13248, file: !3, line: 4249, column: 10)
!13252 = !DILocation(line: 4249, column: 31, scope: !13251)
!13253 = !DILocation(line: 4249, column: 12, scope: !13251)
!13254 = !DILocation(line: 4249, column: 40, scope: !13251)
!13255 = !DILocation(line: 4249, column: 39, scope: !13251)
!13256 = !DILocation(line: 4249, column: 11, scope: !13251)
!13257 = !DILocation(line: 4249, column: 10, scope: !13248)
!13258 = !DILocation(line: 4251, column: 19, scope: !13251)
!13259 = !DILocation(line: 4251, column: 8, scope: !13251)
!13260 = !DILocation(line: 4252, column: 15, scope: !13261)
!13261 = distinct !DILexicalBlock(scope: !13251, file: !3, line: 4252, column: 15)
!13262 = !DILocation(line: 4252, column: 33, scope: !13261)
!13263 = !DILocation(line: 4253, column: 8, scope: !13261)
!13264 = !DILocation(line: 4253, column: 11, scope: !13261)
!13265 = !DILocation(line: 4253, column: 29, scope: !13261)
!13266 = !DILocation(line: 4254, column: 8, scope: !13261)
!13267 = !DILocation(line: 4254, column: 37, scope: !13261)
!13268 = !DILocation(line: 4254, column: 36, scope: !13261)
!13269 = !DILocation(line: 4254, column: 11, scope: !13261)
!13270 = !DILocation(line: 4252, column: 15, scope: !13251)
!13271 = !DILocation(line: 4256, column: 19, scope: !13261)
!13272 = !DILocation(line: 4256, column: 8, scope: !13261)
!13273 = !DILocation(line: 4257, column: 35, scope: !13274)
!13274 = distinct !DILexicalBlock(scope: !13261, file: !3, line: 4257, column: 15)
!13275 = !DILocation(line: 4257, column: 15, scope: !13274)
!13276 = !DILocation(line: 4258, column: 8, scope: !13274)
!13277 = !DILocation(line: 4258, column: 12, scope: !13274)
!13278 = !DILocation(line: 4258, column: 27, scope: !13274)
!13279 = !DILocation(line: 4258, column: 30, scope: !13274)
!13280 = !DILocation(line: 4257, column: 15, scope: !13261)
!13281 = !DILocation(line: 4260, column: 19, scope: !13274)
!13282 = !DILocation(line: 4260, column: 8, scope: !13274)
!13283 = !DILocation(line: 4261, column: 15, scope: !13284)
!13284 = distinct !DILexicalBlock(scope: !13274, file: !3, line: 4261, column: 15)
!13285 = !DILocation(line: 4261, column: 35, scope: !13284)
!13286 = !DILocation(line: 4261, column: 15, scope: !13274)
!13287 = !DILocation(line: 4264, column: 19, scope: !13284)
!13288 = !DILocation(line: 4264, column: 8, scope: !13284)
!13289 = !DILocation(line: 4265, column: 44, scope: !13290)
!13290 = distinct !DILexicalBlock(scope: !13284, file: !3, line: 4265, column: 15)
!13291 = !DILocation(line: 4265, column: 43, scope: !13290)
!13292 = !DILocation(line: 4265, column: 16, scope: !13290)
!13293 = !DILocation(line: 4265, column: 15, scope: !13284)
!13294 = !DILocation(line: 4272, column: 19, scope: !13290)
!13295 = !DILocation(line: 4272, column: 8, scope: !13290)
!13296 = !DILocation(line: 4274, column: 19, scope: !13290)
!13297 = !DILocation(line: 4276, column: 10, scope: !13298)
!13298 = distinct !DILexicalBlock(scope: !13248, file: !3, line: 4276, column: 10)
!13299 = !DILocation(line: 4276, column: 10, scope: !13248)
!13300 = !DILocation(line: 4278, column: 3, scope: !13301)
!13301 = distinct !DILexicalBlock(scope: !13298, file: !3, line: 4277, column: 8)
!13302 = !DILocation(line: 4278, column: 39, scope: !13301)
!13303 = !DILocation(line: 4279, column: 22, scope: !13301)
!13304 = !DILocation(line: 4279, column: 21, scope: !13301)
!13305 = !DILocation(line: 4279, column: 3, scope: !13301)
!13306 = !DILocation(line: 4280, column: 8, scope: !13301)
!13307 = !DILocation(line: 4281, column: 4, scope: !13248)
!13308 = !DILocation(line: 4283, column: 6, scope: !13090)
!13309 = !DILocation(line: 4284, column: 2, scope: !13090)
!13310 = !DILocalVariable(name: "wrap", scope: !13311, file: !3, line: 4292, type: !1686)
!13311 = distinct !DILexicalBlock(scope: !13090, file: !3, line: 4291, column: 2)
!13312 = !DILocation(line: 4292, column: 9, scope: !13311)
!13313 = !DILocation(line: 4292, column: 17, scope: !13311)
!13314 = !DILocation(line: 4292, column: 16, scope: !13311)
!13315 = !DILocalVariable(name: "t", scope: !13311, file: !3, line: 4293, type: !1686)
!13316 = !DILocation(line: 4293, column: 9, scope: !13311)
!13317 = !DILocation(line: 4295, column: 25, scope: !13311)
!13318 = !DILocation(line: 4295, column: 31, scope: !13311)
!13319 = !DILocation(line: 4295, column: 38, scope: !13311)
!13320 = !DILocation(line: 4295, column: 10, scope: !13311)
!13321 = !DILocation(line: 4295, column: 8, scope: !13311)
!13322 = !DILocation(line: 4297, column: 8, scope: !13323)
!13323 = distinct !DILexicalBlock(scope: !13311, file: !3, line: 4297, column: 8)
!13324 = !DILocation(line: 4297, column: 12, scope: !13323)
!13325 = !DILocation(line: 4297, column: 8, scope: !13311)
!13326 = !DILocation(line: 4298, column: 10, scope: !13323)
!13327 = !DILocation(line: 4298, column: 6, scope: !13323)
!13328 = !DILocation(line: 4300, column: 30, scope: !13311)
!13329 = !DILocation(line: 4300, column: 37, scope: !13311)
!13330 = !DILocation(line: 4300, column: 36, scope: !13311)
!13331 = !DILocation(line: 4300, column: 8, scope: !13311)
!13332 = !DILocation(line: 4300, column: 6, scope: !13311)
!13333 = !DILocation(line: 4301, column: 4, scope: !13311)
!13334 = !DILocation(line: 4303, column: 8, scope: !13335)
!13335 = distinct !DILexicalBlock(scope: !13311, file: !3, line: 4303, column: 8)
!13336 = !DILocation(line: 4303, column: 8, scope: !13311)
!13337 = !DILocation(line: 4305, column: 26, scope: !13338)
!13338 = distinct !DILexicalBlock(scope: !13335, file: !3, line: 4304, column: 6)
!13339 = !DILocation(line: 4305, column: 32, scope: !13338)
!13340 = !DILocation(line: 4305, column: 8, scope: !13338)
!13341 = !DILocation(line: 4306, column: 33, scope: !13338)
!13342 = !DILocation(line: 4306, column: 32, scope: !13338)
!13343 = !DILocation(line: 4306, column: 18, scope: !13338)
!13344 = !DILocation(line: 4306, column: 9, scope: !13338)
!13345 = !DILocation(line: 4306, column: 16, scope: !13338)
!13346 = !DILocation(line: 4307, column: 6, scope: !13338)
!13347 = !DILocation(line: 4309, column: 16, scope: !13335)
!13348 = !DILocation(line: 4309, column: 7, scope: !13335)
!13349 = !DILocation(line: 4309, column: 14, scope: !13335)
!13350 = !DILocation(line: 4310, column: 4, scope: !13311)
!13351 = !DILocalVariable(name: "complit", scope: !13352, file: !3, line: 4315, type: !1686)
!13352 = distinct !DILexicalBlock(scope: !13090, file: !3, line: 4314, column: 2)
!13353 = !DILocation(line: 4315, column: 9, scope: !13352)
!13354 = !DILocation(line: 4315, column: 19, scope: !13352)
!13355 = !DILocalVariable(name: "decl_s", scope: !13352, file: !3, line: 4316, type: !1686)
!13356 = !DILocation(line: 4316, column: 9, scope: !13352)
!13357 = !DILocation(line: 4316, column: 18, scope: !13352)
!13358 = !DILocalVariable(name: "decl", scope: !13352, file: !3, line: 4317, type: !1686)
!13359 = !DILocation(line: 4317, column: 9, scope: !13352)
!13360 = !DILocation(line: 4317, column: 16, scope: !13352)
!13361 = !DILocalVariable(name: "init", scope: !13352, file: !3, line: 4318, type: !1686)
!13362 = !DILocation(line: 4318, column: 9, scope: !13352)
!13363 = !DILocation(line: 4318, column: 16, scope: !13352)
!13364 = !DILocation(line: 4323, column: 9, scope: !13365)
!13365 = distinct !DILexicalBlock(scope: !13352, file: !3, line: 4323, column: 8)
!13366 = !DILocation(line: 4324, column: 8, scope: !13365)
!13367 = !DILocation(line: 4324, column: 12, scope: !13365)
!13368 = !DILocation(line: 4325, column: 8, scope: !13365)
!13369 = !DILocation(line: 4325, column: 11, scope: !13365)
!13370 = !DILocation(line: 4323, column: 8, scope: !13352)
!13371 = !DILocation(line: 4327, column: 18, scope: !13372)
!13372 = distinct !DILexicalBlock(scope: !13365, file: !3, line: 4326, column: 6)
!13373 = !DILocation(line: 4327, column: 9, scope: !13372)
!13374 = !DILocation(line: 4327, column: 16, scope: !13372)
!13375 = !DILocation(line: 4328, column: 36, scope: !13372)
!13376 = !DILocation(line: 4328, column: 8, scope: !13372)
!13377 = !DILocation(line: 4328, column: 34, scope: !13372)
!13378 = !DILocation(line: 4329, column: 8, scope: !13372)
!13379 = !DILocation(line: 4331, column: 2, scope: !13352)
!13380 = !DILocation(line: 4334, column: 6, scope: !13090)
!13381 = !DILocation(line: 4335, column: 2, scope: !13090)
!13382 = distinct !{!13382, !13083, !13383}
!13383 = !DILocation(line: 4336, column: 7, scope: !13066)
!13384 = !DILocation(line: 4338, column: 10, scope: !13066)
!13385 = !DILocation(line: 4338, column: 3, scope: !13066)
!13386 = !DILocation(line: 4339, column: 1, scope: !13066)
!13387 = distinct !DISubprogram(name: "zero_sized_type", scope: !3, file: !3, line: 3409, type: !3266, scopeLine: 3410, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!13388 = !DILocalVariable(name: "type", arg: 1, scope: !13387, file: !3, line: 3409, type: !3130)
!13389 = !DILocation(line: 3409, column: 29, scope: !13387)
!13390 = !DILocation(line: 3411, column: 7, scope: !13391)
!13391 = distinct !DILexicalBlock(scope: !13387, file: !3, line: 3411, column: 7)
!13392 = !DILocation(line: 3411, column: 31, scope: !13391)
!13393 = !DILocation(line: 3411, column: 34, scope: !13391)
!13394 = !DILocation(line: 3412, column: 7, scope: !13391)
!13395 = !DILocation(line: 3412, column: 25, scope: !13391)
!13396 = !DILocation(line: 3412, column: 10, scope: !13391)
!13397 = !DILocation(line: 3411, column: 7, scope: !13387)
!13398 = !DILocation(line: 3413, column: 5, scope: !13391)
!13399 = !DILocation(line: 3414, column: 3, scope: !13387)
!13400 = !DILocation(line: 3415, column: 1, scope: !13387)
!13401 = distinct !DISubprogram(name: "gimplify_modify_expr_to_memset", scope: !3, file: !3, line: 3153, type: !13402, scopeLine: 3155, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!13402 = !DISubroutineType(types: !13403)
!13403 = !{!1329, !2049, !1686, !1804, !3489}
!13404 = !DILocalVariable(name: "expr_p", arg: 1, scope: !13401, file: !3, line: 3153, type: !2049)
!13405 = !DILocation(line: 3153, column: 39, scope: !13401)
!13406 = !DILocalVariable(name: "size", arg: 2, scope: !13401, file: !3, line: 3153, type: !1686)
!13407 = !DILocation(line: 3153, column: 52, scope: !13401)
!13408 = !DILocalVariable(name: "want_value", arg: 3, scope: !13401, file: !3, line: 3153, type: !1804)
!13409 = !DILocation(line: 3153, column: 63, scope: !13401)
!13410 = !DILocalVariable(name: "seq_p", arg: 4, scope: !13401, file: !3, line: 3154, type: !3489)
!13411 = !DILocation(line: 3154, column: 21, scope: !13401)
!13412 = !DILocalVariable(name: "t", scope: !13401, file: !3, line: 3156, type: !1686)
!13413 = !DILocation(line: 3156, column: 8, scope: !13401)
!13414 = !DILocalVariable(name: "from", scope: !13401, file: !3, line: 3156, type: !1686)
!13415 = !DILocation(line: 3156, column: 11, scope: !13401)
!13416 = !DILocalVariable(name: "to", scope: !13401, file: !3, line: 3156, type: !1686)
!13417 = !DILocation(line: 3156, column: 17, scope: !13401)
!13418 = !DILocalVariable(name: "to_ptr", scope: !13401, file: !3, line: 3156, type: !1686)
!13419 = !DILocation(line: 3156, column: 21, scope: !13401)
!13420 = !DILocalVariable(name: "gs", scope: !13401, file: !3, line: 3157, type: !2014)
!13421 = !DILocation(line: 3157, column: 10, scope: !13401)
!13422 = !DILocalVariable(name: "loc", scope: !13401, file: !3, line: 3158, type: !1812)
!13423 = !DILocation(line: 3158, column: 14, scope: !13401)
!13424 = !DILocation(line: 3158, column: 20, scope: !13401)
!13425 = !DILocation(line: 3163, column: 10, scope: !13401)
!13426 = !DILocation(line: 3163, column: 8, scope: !13401)
!13427 = !DILocation(line: 3164, column: 7, scope: !13428)
!13428 = distinct !DILexicalBlock(scope: !13401, file: !3, line: 3164, column: 7)
!13429 = !DILocation(line: 3164, column: 24, scope: !13428)
!13430 = !DILocation(line: 3164, column: 7, scope: !13401)
!13431 = !DILocation(line: 3165, column: 12, scope: !13428)
!13432 = !DILocation(line: 3165, column: 10, scope: !13428)
!13433 = !DILocation(line: 3165, column: 5, scope: !13428)
!13434 = !DILocation(line: 3167, column: 3, scope: !13401)
!13435 = !DILocation(line: 3171, column: 8, scope: !13401)
!13436 = !DILocation(line: 3171, column: 6, scope: !13401)
!13437 = !DILocation(line: 3173, column: 38, scope: !13401)
!13438 = !DILocation(line: 3173, column: 43, scope: !13401)
!13439 = !DILocation(line: 3173, column: 12, scope: !13401)
!13440 = !DILocation(line: 3173, column: 10, scope: !13401)
!13441 = !DILocation(line: 3174, column: 26, scope: !13401)
!13442 = !DILocation(line: 3174, column: 33, scope: !13401)
!13443 = !DILocation(line: 3174, column: 3, scope: !13401)
!13444 = !DILocation(line: 3175, column: 7, scope: !13401)
!13445 = !DILocation(line: 3175, column: 5, scope: !13401)
!13446 = !DILocation(line: 3177, column: 27, scope: !13401)
!13447 = !DILocation(line: 3177, column: 33, scope: !13401)
!13448 = !DILocation(line: 3177, column: 41, scope: !13401)
!13449 = !DILocation(line: 3177, column: 60, scope: !13401)
!13450 = !DILocation(line: 3177, column: 8, scope: !13401)
!13451 = !DILocation(line: 3177, column: 6, scope: !13401)
!13452 = !DILocation(line: 3179, column: 7, scope: !13453)
!13453 = distinct !DILexicalBlock(scope: !13401, file: !3, line: 3179, column: 7)
!13454 = !DILocation(line: 3179, column: 7, scope: !13401)
!13455 = !DILocation(line: 3182, column: 27, scope: !13456)
!13456 = distinct !DILexicalBlock(scope: !13453, file: !3, line: 3180, column: 5)
!13457 = !DILocation(line: 3182, column: 11, scope: !13456)
!13458 = !DILocation(line: 3182, column: 9, scope: !13456)
!13459 = !DILocation(line: 3183, column: 28, scope: !13456)
!13460 = !DILocation(line: 3183, column: 32, scope: !13456)
!13461 = !DILocation(line: 3183, column: 7, scope: !13456)
!13462 = !DILocation(line: 3184, column: 30, scope: !13456)
!13463 = !DILocation(line: 3184, column: 37, scope: !13456)
!13464 = !DILocation(line: 3184, column: 7, scope: !13456)
!13465 = !DILocation(line: 3186, column: 17, scope: !13456)
!13466 = !DILocation(line: 3186, column: 8, scope: !13456)
!13467 = !DILocation(line: 3186, column: 15, scope: !13456)
!13468 = !DILocation(line: 3187, column: 7, scope: !13456)
!13469 = !DILocation(line: 3190, column: 26, scope: !13401)
!13470 = !DILocation(line: 3190, column: 33, scope: !13401)
!13471 = !DILocation(line: 3190, column: 3, scope: !13401)
!13472 = !DILocation(line: 3191, column: 4, scope: !13401)
!13473 = !DILocation(line: 3191, column: 11, scope: !13401)
!13474 = !DILocation(line: 3192, column: 3, scope: !13401)
!13475 = !DILocation(line: 3193, column: 1, scope: !13401)
!13476 = distinct !DISubprogram(name: "gimplify_modify_expr_to_memcpy", scope: !3, file: !3, line: 3106, type: !13402, scopeLine: 3108, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!13477 = !DILocalVariable(name: "expr_p", arg: 1, scope: !13476, file: !3, line: 3106, type: !2049)
!13478 = !DILocation(line: 3106, column: 39, scope: !13476)
!13479 = !DILocalVariable(name: "size", arg: 2, scope: !13476, file: !3, line: 3106, type: !1686)
!13480 = !DILocation(line: 3106, column: 52, scope: !13476)
!13481 = !DILocalVariable(name: "want_value", arg: 3, scope: !13476, file: !3, line: 3106, type: !1804)
!13482 = !DILocation(line: 3106, column: 63, scope: !13476)
!13483 = !DILocalVariable(name: "seq_p", arg: 4, scope: !13476, file: !3, line: 3107, type: !3489)
!13484 = !DILocation(line: 3107, column: 21, scope: !13476)
!13485 = !DILocalVariable(name: "t", scope: !13476, file: !3, line: 3109, type: !1686)
!13486 = !DILocation(line: 3109, column: 8, scope: !13476)
!13487 = !DILocalVariable(name: "to", scope: !13476, file: !3, line: 3109, type: !1686)
!13488 = !DILocation(line: 3109, column: 11, scope: !13476)
!13489 = !DILocalVariable(name: "to_ptr", scope: !13476, file: !3, line: 3109, type: !1686)
!13490 = !DILocation(line: 3109, column: 15, scope: !13476)
!13491 = !DILocalVariable(name: "from", scope: !13476, file: !3, line: 3109, type: !1686)
!13492 = !DILocation(line: 3109, column: 23, scope: !13476)
!13493 = !DILocalVariable(name: "from_ptr", scope: !13476, file: !3, line: 3109, type: !1686)
!13494 = !DILocation(line: 3109, column: 29, scope: !13476)
!13495 = !DILocalVariable(name: "gs", scope: !13476, file: !3, line: 3110, type: !2014)
!13496 = !DILocation(line: 3110, column: 10, scope: !13476)
!13497 = !DILocalVariable(name: "loc", scope: !13476, file: !3, line: 3111, type: !1812)
!13498 = !DILocation(line: 3111, column: 14, scope: !13476)
!13499 = !DILocation(line: 3111, column: 20, scope: !13476)
!13500 = !DILocation(line: 3113, column: 8, scope: !13476)
!13501 = !DILocation(line: 3113, column: 6, scope: !13476)
!13502 = !DILocation(line: 3114, column: 10, scope: !13476)
!13503 = !DILocation(line: 3114, column: 8, scope: !13476)
!13504 = !DILocation(line: 3118, column: 38, scope: !13476)
!13505 = !DILocation(line: 3118, column: 3, scope: !13476)
!13506 = !DILocation(line: 3120, column: 21, scope: !13476)
!13507 = !DILocation(line: 3120, column: 3, scope: !13476)
!13508 = !DILocation(line: 3121, column: 40, scope: !13476)
!13509 = !DILocation(line: 3121, column: 45, scope: !13476)
!13510 = !DILocation(line: 3121, column: 14, scope: !13476)
!13511 = !DILocation(line: 3121, column: 12, scope: !13476)
!13512 = !DILocation(line: 3122, column: 28, scope: !13476)
!13513 = !DILocation(line: 3122, column: 35, scope: !13476)
!13514 = !DILocation(line: 3122, column: 3, scope: !13476)
!13515 = !DILocation(line: 3124, column: 21, scope: !13476)
!13516 = !DILocation(line: 3124, column: 3, scope: !13476)
!13517 = !DILocation(line: 3125, column: 38, scope: !13476)
!13518 = !DILocation(line: 3125, column: 43, scope: !13476)
!13519 = !DILocation(line: 3125, column: 12, scope: !13476)
!13520 = !DILocation(line: 3125, column: 10, scope: !13476)
!13521 = !DILocation(line: 3126, column: 26, scope: !13476)
!13522 = !DILocation(line: 3126, column: 33, scope: !13476)
!13523 = !DILocation(line: 3126, column: 3, scope: !13476)
!13524 = !DILocation(line: 3128, column: 7, scope: !13476)
!13525 = !DILocation(line: 3128, column: 5, scope: !13476)
!13526 = !DILocation(line: 3130, column: 27, scope: !13476)
!13527 = !DILocation(line: 3130, column: 33, scope: !13476)
!13528 = !DILocation(line: 3130, column: 41, scope: !13476)
!13529 = !DILocation(line: 3130, column: 51, scope: !13476)
!13530 = !DILocation(line: 3130, column: 8, scope: !13476)
!13531 = !DILocation(line: 3130, column: 6, scope: !13476)
!13532 = !DILocation(line: 3132, column: 7, scope: !13533)
!13533 = distinct !DILexicalBlock(scope: !13476, file: !3, line: 3132, column: 7)
!13534 = !DILocation(line: 3132, column: 7, scope: !13476)
!13535 = !DILocation(line: 3135, column: 27, scope: !13536)
!13536 = distinct !DILexicalBlock(scope: !13533, file: !3, line: 3133, column: 5)
!13537 = !DILocation(line: 3135, column: 11, scope: !13536)
!13538 = !DILocation(line: 3135, column: 9, scope: !13536)
!13539 = !DILocation(line: 3136, column: 28, scope: !13536)
!13540 = !DILocation(line: 3136, column: 32, scope: !13536)
!13541 = !DILocation(line: 3136, column: 7, scope: !13536)
!13542 = !DILocation(line: 3137, column: 30, scope: !13536)
!13543 = !DILocation(line: 3137, column: 37, scope: !13536)
!13544 = !DILocation(line: 3137, column: 7, scope: !13536)
!13545 = !DILocation(line: 3139, column: 17, scope: !13536)
!13546 = !DILocation(line: 3139, column: 8, scope: !13536)
!13547 = !DILocation(line: 3139, column: 15, scope: !13536)
!13548 = !DILocation(line: 3140, column: 7, scope: !13536)
!13549 = !DILocation(line: 3143, column: 26, scope: !13476)
!13550 = !DILocation(line: 3143, column: 33, scope: !13476)
!13551 = !DILocation(line: 3143, column: 3, scope: !13476)
!13552 = !DILocation(line: 3144, column: 4, scope: !13476)
!13553 = !DILocation(line: 3144, column: 11, scope: !13476)
!13554 = !DILocation(line: 3145, column: 3, scope: !13476)
!13555 = !DILocation(line: 3146, column: 1, scope: !13476)
!13556 = distinct !DISubprogram(name: "gimplify_modify_expr_complex_part", scope: !3, file: !3, line: 4355, type: !6910, scopeLine: 4357, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!13557 = !DILocalVariable(name: "expr_p", arg: 1, scope: !13556, file: !3, line: 4355, type: !2049)
!13558 = !DILocation(line: 4355, column: 42, scope: !13556)
!13559 = !DILocalVariable(name: "pre_p", arg: 2, scope: !13556, file: !3, line: 4355, type: !3489)
!13560 = !DILocation(line: 4355, column: 62, scope: !13556)
!13561 = !DILocalVariable(name: "want_value", arg: 3, scope: !13556, file: !3, line: 4356, type: !1804)
!13562 = !DILocation(line: 4356, column: 41, scope: !13556)
!13563 = !DILocalVariable(name: "code", scope: !13556, file: !3, line: 4358, type: !134)
!13564 = !DILocation(line: 4358, column: 18, scope: !13556)
!13565 = !DILocalVariable(name: "ocode", scope: !13556, file: !3, line: 4358, type: !134)
!13566 = !DILocation(line: 4358, column: 24, scope: !13556)
!13567 = !DILocalVariable(name: "lhs", scope: !13556, file: !3, line: 4359, type: !1686)
!13568 = !DILocation(line: 4359, column: 8, scope: !13556)
!13569 = !DILocalVariable(name: "rhs", scope: !13556, file: !3, line: 4359, type: !1686)
!13570 = !DILocation(line: 4359, column: 13, scope: !13556)
!13571 = !DILocalVariable(name: "new_rhs", scope: !13556, file: !3, line: 4359, type: !1686)
!13572 = !DILocation(line: 4359, column: 18, scope: !13556)
!13573 = !DILocalVariable(name: "other", scope: !13556, file: !3, line: 4359, type: !1686)
!13574 = !DILocation(line: 4359, column: 27, scope: !13556)
!13575 = !DILocalVariable(name: "realpart", scope: !13556, file: !3, line: 4359, type: !1686)
!13576 = !DILocation(line: 4359, column: 34, scope: !13556)
!13577 = !DILocalVariable(name: "imagpart", scope: !13556, file: !3, line: 4359, type: !1686)
!13578 = !DILocation(line: 4359, column: 44, scope: !13556)
!13579 = !DILocation(line: 4361, column: 9, scope: !13556)
!13580 = !DILocation(line: 4361, column: 7, scope: !13556)
!13581 = !DILocation(line: 4362, column: 9, scope: !13556)
!13582 = !DILocation(line: 4362, column: 7, scope: !13556)
!13583 = !DILocation(line: 4363, column: 10, scope: !13556)
!13584 = !DILocation(line: 4363, column: 8, scope: !13556)
!13585 = !DILocation(line: 4364, column: 9, scope: !13556)
!13586 = !DILocation(line: 4364, column: 7, scope: !13556)
!13587 = !DILocation(line: 4366, column: 11, scope: !13556)
!13588 = !DILocation(line: 4366, column: 16, scope: !13556)
!13589 = !DILocation(line: 4366, column: 9, scope: !13556)
!13590 = !DILocation(line: 4367, column: 11, scope: !13556)
!13591 = !DILocation(line: 4367, column: 9, scope: !13556)
!13592 = !DILocation(line: 4368, column: 31, scope: !13556)
!13593 = !DILocation(line: 4368, column: 38, scope: !13556)
!13594 = !DILocation(line: 4368, column: 11, scope: !13556)
!13595 = !DILocation(line: 4368, column: 9, scope: !13556)
!13596 = !DILocation(line: 4370, column: 14, scope: !13556)
!13597 = !DILocation(line: 4370, column: 19, scope: !13556)
!13598 = !DILocation(line: 4370, column: 38, scope: !13556)
!13599 = !DILocation(line: 4370, column: 44, scope: !13556)
!13600 = !DILocation(line: 4370, column: 12, scope: !13556)
!13601 = !DILocation(line: 4371, column: 14, scope: !13556)
!13602 = !DILocation(line: 4371, column: 19, scope: !13556)
!13603 = !DILocation(line: 4371, column: 38, scope: !13556)
!13604 = !DILocation(line: 4371, column: 46, scope: !13556)
!13605 = !DILocation(line: 4371, column: 12, scope: !13556)
!13606 = !DILocation(line: 4373, column: 7, scope: !13607)
!13607 = distinct !DILexicalBlock(scope: !13556, file: !3, line: 4373, column: 7)
!13608 = !DILocation(line: 4373, column: 32, scope: !13607)
!13609 = !DILocation(line: 4373, column: 35, scope: !13607)
!13610 = !DILocation(line: 4373, column: 7, scope: !13556)
!13611 = !DILocation(line: 4374, column: 30, scope: !13607)
!13612 = !DILocation(line: 4374, column: 47, scope: !13607)
!13613 = !DILocation(line: 4374, column: 57, scope: !13607)
!13614 = !DILocation(line: 4374, column: 15, scope: !13607)
!13615 = !DILocation(line: 4374, column: 13, scope: !13607)
!13616 = !DILocation(line: 4374, column: 5, scope: !13607)
!13617 = !DILocation(line: 4376, column: 15, scope: !13607)
!13618 = !DILocation(line: 4376, column: 13, scope: !13607)
!13619 = !DILocation(line: 4378, column: 26, scope: !13556)
!13620 = !DILocation(line: 4378, column: 33, scope: !13556)
!13621 = !DILocation(line: 4378, column: 3, scope: !13556)
!13622 = !DILocation(line: 4379, column: 14, scope: !13556)
!13623 = !DILocation(line: 4379, column: 13, scope: !13556)
!13624 = !DILocation(line: 4379, column: 28, scope: !13556)
!13625 = !DILocation(line: 4379, column: 4, scope: !13556)
!13626 = !DILocation(line: 4379, column: 11, scope: !13556)
!13627 = !DILocation(line: 4381, column: 3, scope: !13556)
!13628 = distinct !DISubprogram(name: "gimple_call_noreturn_p", scope: !385, file: !385, line: 2178, type: !12207, scopeLine: 2179, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!13629 = !DILocalVariable(name: "s", arg: 1, scope: !13628, file: !385, line: 2178, type: !2014)
!13630 = !DILocation(line: 2178, column: 32, scope: !13628)
!13631 = !DILocation(line: 2181, column: 30, scope: !13628)
!13632 = !DILocation(line: 2181, column: 11, scope: !13628)
!13633 = !DILocation(line: 2181, column: 33, scope: !13628)
!13634 = !DILocation(line: 2181, column: 49, scope: !13628)
!13635 = !DILocation(line: 2181, column: 10, scope: !13628)
!13636 = !DILocation(line: 2181, column: 3, scope: !13628)
!13637 = distinct !DISubprogram(name: "gimple_call_set_lhs", scope: !385, file: !385, line: 1898, type: !3830, scopeLine: 1899, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!13638 = !DILocalVariable(name: "gs", arg: 1, scope: !13637, file: !385, line: 1898, type: !2014)
!13639 = !DILocation(line: 1898, column: 29, scope: !13637)
!13640 = !DILocalVariable(name: "lhs", arg: 2, scope: !13637, file: !385, line: 1898, type: !1686)
!13641 = !DILocation(line: 1898, column: 38, scope: !13637)
!13642 = !DILocation(line: 1901, column: 18, scope: !13637)
!13643 = !DILocation(line: 1901, column: 25, scope: !13637)
!13644 = !DILocation(line: 1901, column: 3, scope: !13637)
!13645 = !DILocation(line: 1902, column: 7, scope: !13646)
!13646 = distinct !DILexicalBlock(scope: !13637, file: !385, line: 1902, column: 7)
!13647 = !DILocation(line: 1902, column: 11, scope: !13646)
!13648 = !DILocation(line: 1902, column: 14, scope: !13646)
!13649 = !DILocation(line: 1902, column: 30, scope: !13646)
!13650 = !DILocation(line: 1902, column: 7, scope: !13637)
!13651 = !DILocation(line: 1903, column: 31, scope: !13646)
!13652 = !DILocation(line: 1903, column: 5, scope: !13646)
!13653 = !DILocation(line: 1903, column: 29, scope: !13646)
!13654 = !DILocation(line: 1904, column: 1, scope: !13637)
!13655 = distinct !DISubprogram(name: "gimplify_init_constructor", scope: !3, file: !3, line: 3609, type: !13656, scopeLine: 3611, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!13656 = !DISubroutineType(types: !13657)
!13657 = !{!1329, !2049, !3489, !3489, !1804, !1804}
!13658 = !DILocalVariable(name: "expr_p", arg: 1, scope: !13655, file: !3, line: 3609, type: !2049)
!13659 = !DILocation(line: 3609, column: 34, scope: !13655)
!13660 = !DILocalVariable(name: "pre_p", arg: 2, scope: !13655, file: !3, line: 3609, type: !3489)
!13661 = !DILocation(line: 3609, column: 54, scope: !13655)
!13662 = !DILocalVariable(name: "post_p", arg: 3, scope: !13655, file: !3, line: 3609, type: !3489)
!13663 = !DILocation(line: 3609, column: 73, scope: !13655)
!13664 = !DILocalVariable(name: "want_value", arg: 4, scope: !13655, file: !3, line: 3610, type: !1804)
!13665 = !DILocation(line: 3610, column: 12, scope: !13655)
!13666 = !DILocalVariable(name: "notify_temp_creation", arg: 5, scope: !13655, file: !3, line: 3610, type: !1804)
!13667 = !DILocation(line: 3610, column: 29, scope: !13655)
!13668 = !DILocalVariable(name: "object", scope: !13655, file: !3, line: 3612, type: !1686)
!13669 = !DILocation(line: 3612, column: 8, scope: !13655)
!13670 = !DILocalVariable(name: "ctor", scope: !13655, file: !3, line: 3612, type: !1686)
!13671 = !DILocation(line: 3612, column: 16, scope: !13655)
!13672 = !DILocalVariable(name: "type", scope: !13655, file: !3, line: 3612, type: !1686)
!13673 = !DILocation(line: 3612, column: 22, scope: !13655)
!13674 = !DILocalVariable(name: "ret", scope: !13655, file: !3, line: 3613, type: !1329)
!13675 = !DILocation(line: 3613, column: 24, scope: !13655)
!13676 = !DILocalVariable(name: "elts", scope: !13655, file: !3, line: 3614, type: !2892)
!13677 = !DILocation(line: 3614, column: 28, scope: !13655)
!13678 = !DILocation(line: 3616, column: 3, scope: !13655)
!13679 = !DILocation(line: 3618, column: 8, scope: !13680)
!13680 = distinct !DILexicalBlock(scope: !13655, file: !3, line: 3618, column: 7)
!13681 = !DILocation(line: 3618, column: 7, scope: !13655)
!13682 = !DILocation(line: 3620, column: 29, scope: !13683)
!13683 = distinct !DILexicalBlock(scope: !13680, file: !3, line: 3619, column: 5)
!13684 = !DILocation(line: 3620, column: 56, scope: !13683)
!13685 = !DILocation(line: 3620, column: 63, scope: !13683)
!13686 = !DILocation(line: 3620, column: 13, scope: !13683)
!13687 = !DILocation(line: 3620, column: 11, scope: !13683)
!13688 = !DILocation(line: 3622, column: 11, scope: !13689)
!13689 = distinct !DILexicalBlock(scope: !13683, file: !3, line: 3622, column: 11)
!13690 = !DILocation(line: 3622, column: 15, scope: !13689)
!13691 = !DILocation(line: 3622, column: 11, scope: !13683)
!13692 = !DILocation(line: 3623, column: 9, scope: !13689)
!13693 = !DILocation(line: 3623, column: 2, scope: !13689)
!13694 = !DILocation(line: 3624, column: 5, scope: !13683)
!13695 = !DILocation(line: 3626, column: 12, scope: !13655)
!13696 = !DILocation(line: 3626, column: 10, scope: !13655)
!13697 = !DILocation(line: 3628, column: 41, scope: !13655)
!13698 = !DILocation(line: 3628, column: 5, scope: !13655)
!13699 = !DILocation(line: 3627, column: 10, scope: !13655)
!13700 = !DILocation(line: 3627, column: 36, scope: !13655)
!13701 = !DILocation(line: 3627, column: 8, scope: !13655)
!13702 = !DILocation(line: 3629, column: 10, scope: !13655)
!13703 = !DILocation(line: 3629, column: 8, scope: !13655)
!13704 = !DILocation(line: 3630, column: 10, scope: !13655)
!13705 = !DILocation(line: 3630, column: 8, scope: !13655)
!13706 = !DILocation(line: 3631, column: 7, scope: !13655)
!13707 = !DILocation(line: 3633, column: 11, scope: !13655)
!13708 = !DILocation(line: 3633, column: 3, scope: !13655)
!13709 = !DILocalVariable(name: "preeval_data", scope: !13710, file: !3, line: 3640, type: !3137)
!13710 = distinct !DILexicalBlock(scope: !13711, file: !3, line: 3639, column: 7)
!13711 = distinct !DILexicalBlock(scope: !13655, file: !3, line: 3634, column: 5)
!13712 = !DILocation(line: 3640, column: 41, scope: !13710)
!13713 = !DILocalVariable(name: "num_type_elements", scope: !13710, file: !3, line: 3641, type: !1741)
!13714 = !DILocation(line: 3641, column: 16, scope: !13710)
!13715 = !DILocalVariable(name: "num_ctor_elements", scope: !13710, file: !3, line: 3641, type: !1741)
!13716 = !DILocation(line: 3641, column: 35, scope: !13710)
!13717 = !DILocalVariable(name: "num_nonzero_elements", scope: !13710, file: !3, line: 3642, type: !1741)
!13718 = !DILocation(line: 3642, column: 16, scope: !13710)
!13719 = !DILocalVariable(name: "cleared", scope: !13710, file: !3, line: 3643, type: !1804)
!13720 = !DILocation(line: 3643, column: 7, scope: !13710)
!13721 = !DILocalVariable(name: "valid_const_initializer", scope: !13710, file: !3, line: 3643, type: !1804)
!13722 = !DILocation(line: 3643, column: 16, scope: !13710)
!13723 = !DILocation(line: 3648, column: 6, scope: !13724)
!13724 = distinct !DILexicalBlock(scope: !13710, file: !3, line: 3648, column: 6)
!13725 = !DILocation(line: 3648, column: 6, scope: !13710)
!13726 = !DILocation(line: 3650, column: 10, scope: !13727)
!13727 = distinct !DILexicalBlock(scope: !13728, file: !3, line: 3650, column: 10)
!13728 = distinct !DILexicalBlock(scope: !13724, file: !3, line: 3649, column: 4)
!13729 = !DILocation(line: 3650, column: 10, scope: !13728)
!13730 = !DILocation(line: 3651, column: 8, scope: !13727)
!13731 = !DILocation(line: 3652, column: 6, scope: !13728)
!13732 = !DILocation(line: 3659, column: 32, scope: !13710)
!13733 = !DILocation(line: 3659, column: 6, scope: !13710)
!13734 = !DILocation(line: 3659, column: 4, scope: !13710)
!13735 = !DILocation(line: 3664, column: 6, scope: !13736)
!13736 = distinct !DILexicalBlock(scope: !13710, file: !3, line: 3664, column: 6)
!13737 = !DILocation(line: 3665, column: 6, scope: !13736)
!13738 = !DILocation(line: 3665, column: 9, scope: !13736)
!13739 = !DILocation(line: 3665, column: 30, scope: !13736)
!13740 = !DILocation(line: 3666, column: 6, scope: !13736)
!13741 = !DILocation(line: 3666, column: 9, scope: !13736)
!13742 = !DILocation(line: 3667, column: 6, scope: !13736)
!13743 = !DILocation(line: 3667, column: 9, scope: !13736)
!13744 = !DILocation(line: 3667, column: 28, scope: !13736)
!13745 = !DILocation(line: 3668, column: 6, scope: !13736)
!13746 = !DILocation(line: 3668, column: 10, scope: !13736)
!13747 = !DILocation(line: 3668, column: 31, scope: !13736)
!13748 = !DILocation(line: 3668, column: 36, scope: !13736)
!13749 = !DILocation(line: 3668, column: 40, scope: !13736)
!13750 = !DILocation(line: 3664, column: 6, scope: !13710)
!13751 = !DILocation(line: 3670, column: 10, scope: !13752)
!13752 = distinct !DILexicalBlock(scope: !13753, file: !3, line: 3670, column: 10)
!13753 = distinct !DILexicalBlock(scope: !13736, file: !3, line: 3669, column: 4)
!13754 = !DILocation(line: 3670, column: 10, scope: !13753)
!13755 = !DILocation(line: 3671, column: 8, scope: !13752)
!13756 = !DILocation(line: 3672, column: 30, scope: !13753)
!13757 = !DILocation(line: 3672, column: 6, scope: !13753)
!13758 = !DILocation(line: 3672, column: 28, scope: !13753)
!13759 = !DILocation(line: 3673, column: 6, scope: !13753)
!13760 = !DILocation(line: 3673, column: 27, scope: !13753)
!13761 = !DILocation(line: 3674, column: 11, scope: !13762)
!13762 = distinct !DILexicalBlock(scope: !13753, file: !3, line: 3674, column: 10)
!13763 = !DILocation(line: 3674, column: 10, scope: !13753)
!13764 = !DILocation(line: 3675, column: 29, scope: !13762)
!13765 = !DILocation(line: 3675, column: 8, scope: !13762)
!13766 = !DILocation(line: 3675, column: 27, scope: !13762)
!13767 = !DILocation(line: 3676, column: 6, scope: !13753)
!13768 = !DILocation(line: 3685, column: 35, scope: !13753)
!13769 = !DILocation(line: 3685, column: 6, scope: !13753)
!13770 = !DILocation(line: 3687, column: 7, scope: !13753)
!13771 = !DILocation(line: 3687, column: 14, scope: !13753)
!13772 = !DILocation(line: 3688, column: 6, scope: !13753)
!13773 = !DILocation(line: 3698, column: 43, scope: !13710)
!13774 = !DILocation(line: 3698, column: 22, scope: !13710)
!13775 = !DILocation(line: 3698, column: 20, scope: !13710)
!13776 = !DILocation(line: 3704, column: 6, scope: !13777)
!13777 = distinct !DILexicalBlock(scope: !13710, file: !3, line: 3704, column: 6)
!13778 = !DILocation(line: 3704, column: 24, scope: !13777)
!13779 = !DILocation(line: 3704, column: 28, scope: !13777)
!13780 = !DILocation(line: 3704, column: 50, scope: !13777)
!13781 = !DILocation(line: 3704, column: 31, scope: !13777)
!13782 = !DILocation(line: 3704, column: 56, scope: !13777)
!13783 = !DILocation(line: 3704, column: 6, scope: !13710)
!13784 = !DILocation(line: 3705, column: 12, scope: !13777)
!13785 = !DILocation(line: 3705, column: 4, scope: !13777)
!13786 = !DILocation(line: 3707, column: 11, scope: !13787)
!13787 = distinct !DILexicalBlock(scope: !13777, file: !3, line: 3707, column: 11)
!13788 = !DILocation(line: 3707, column: 31, scope: !13787)
!13789 = !DILocation(line: 3707, column: 29, scope: !13787)
!13790 = !DILocation(line: 3708, column: 6, scope: !13787)
!13791 = !DILocation(line: 3708, column: 4, scope: !13787)
!13792 = !DILocation(line: 3709, column: 4, scope: !13787)
!13793 = !DILocation(line: 3709, column: 7, scope: !13787)
!13794 = !DILocation(line: 3709, column: 30, scope: !13787)
!13795 = !DILocation(line: 3709, column: 47, scope: !13787)
!13796 = !DILocation(line: 3709, column: 28, scope: !13787)
!13797 = !DILocation(line: 3707, column: 11, scope: !13777)
!13798 = !DILocation(line: 3710, column: 12, scope: !13787)
!13799 = !DILocation(line: 3710, column: 4, scope: !13787)
!13800 = !DILocation(line: 3716, column: 11, scope: !13801)
!13801 = distinct !DILexicalBlock(scope: !13787, file: !3, line: 3716, column: 11)
!13802 = !DILocation(line: 3716, column: 31, scope: !13801)
!13803 = !DILocation(line: 3716, column: 29, scope: !13801)
!13804 = !DILocation(line: 3716, column: 11, scope: !13787)
!13805 = !DILocation(line: 3717, column: 12, scope: !13801)
!13806 = !DILocation(line: 3717, column: 4, scope: !13801)
!13807 = !DILocation(line: 3728, column: 6, scope: !13808)
!13808 = distinct !DILexicalBlock(scope: !13710, file: !3, line: 3728, column: 6)
!13809 = !DILocation(line: 3729, column: 6, scope: !13808)
!13810 = !DILocation(line: 3729, column: 11, scope: !13808)
!13811 = !DILocation(line: 3729, column: 19, scope: !13808)
!13812 = !DILocation(line: 3729, column: 22, scope: !13808)
!13813 = !DILocation(line: 3729, column: 43, scope: !13808)
!13814 = !DILocation(line: 3730, column: 6, scope: !13808)
!13815 = !DILocation(line: 3730, column: 10, scope: !13808)
!13816 = !DILocation(line: 3728, column: 6, scope: !13710)
!13817 = !DILocalVariable(name: "size", scope: !13818, file: !3, line: 3732, type: !1741)
!13818 = distinct !DILexicalBlock(scope: !13808, file: !3, line: 3731, column: 4)
!13819 = !DILocation(line: 3732, column: 20, scope: !13818)
!13820 = !DILocation(line: 3732, column: 46, scope: !13818)
!13821 = !DILocation(line: 3732, column: 27, scope: !13818)
!13822 = !DILocalVariable(name: "align", scope: !13818, file: !3, line: 3733, type: !7)
!13823 = !DILocation(line: 3733, column: 19, scope: !13818)
!13824 = !DILocation(line: 3738, column: 10, scope: !13825)
!13825 = distinct !DILexicalBlock(scope: !13818, file: !3, line: 3738, column: 10)
!13826 = !DILocation(line: 3738, column: 15, scope: !13825)
!13827 = !DILocation(line: 3738, column: 10, scope: !13818)
!13828 = !DILocation(line: 3740, column: 29, scope: !13829)
!13829 = distinct !DILexicalBlock(scope: !13825, file: !3, line: 3739, column: 8)
!13830 = !DILocation(line: 3740, column: 10, scope: !13829)
!13831 = !DILocation(line: 3740, column: 8, scope: !13829)
!13832 = !DILocation(line: 3741, column: 7, scope: !13833)
!13833 = distinct !DILexicalBlock(scope: !13829, file: !3, line: 3741, column: 7)
!13834 = !DILocation(line: 3741, column: 12, scope: !13833)
!13835 = !DILocation(line: 3741, column: 7, scope: !13829)
!13836 = !DILocation(line: 3742, column: 31, scope: !13833)
!13837 = !DILocation(line: 3742, column: 29, scope: !13833)
!13838 = !DILocation(line: 3742, column: 5, scope: !13833)
!13839 = !DILocation(line: 3742, column: 22, scope: !13833)
!13840 = !DILocation(line: 3743, column: 8, scope: !13829)
!13841 = !DILocation(line: 3747, column: 10, scope: !13842)
!13842 = distinct !DILexicalBlock(scope: !13818, file: !3, line: 3747, column: 10)
!13843 = !DILocation(line: 3747, column: 10, scope: !13818)
!13844 = !DILocation(line: 3748, column: 16, scope: !13842)
!13845 = !DILocation(line: 3748, column: 14, scope: !13842)
!13846 = !DILocation(line: 3748, column: 8, scope: !13842)
!13847 = !DILocation(line: 3750, column: 16, scope: !13842)
!13848 = !DILocation(line: 3750, column: 14, scope: !13842)
!13849 = !DILocation(line: 3752, column: 10, scope: !13850)
!13850 = distinct !DILexicalBlock(scope: !13818, file: !3, line: 3752, column: 10)
!13851 = !DILocation(line: 3752, column: 15, scope: !13850)
!13852 = !DILocation(line: 3753, column: 3, scope: !13850)
!13853 = !DILocation(line: 3753, column: 6, scope: !13850)
!13854 = !DILocation(line: 3753, column: 27, scope: !13850)
!13855 = !DILocation(line: 3754, column: 3, scope: !13850)
!13856 = !DILocation(line: 3754, column: 27, scope: !13850)
!13857 = !DILocation(line: 3754, column: 33, scope: !13850)
!13858 = !DILocation(line: 3754, column: 7, scope: !13850)
!13859 = !DILocation(line: 3752, column: 10, scope: !13818)
!13860 = !DILocalVariable(name: "new_tree", scope: !13861, file: !3, line: 3756, type: !1686)
!13861 = distinct !DILexicalBlock(scope: !13850, file: !3, line: 3755, column: 8)
!13862 = !DILocation(line: 3756, column: 8, scope: !13861)
!13863 = !DILocation(line: 3758, column: 7, scope: !13864)
!13864 = distinct !DILexicalBlock(scope: !13861, file: !3, line: 3758, column: 7)
!13865 = !DILocation(line: 3758, column: 7, scope: !13861)
!13866 = !DILocation(line: 3759, column: 5, scope: !13864)
!13867 = !DILocation(line: 3761, column: 34, scope: !13861)
!13868 = !DILocation(line: 3761, column: 14, scope: !13861)
!13869 = !DILocation(line: 3761, column: 12, scope: !13861)
!13870 = !DILocation(line: 3763, column: 23, scope: !13861)
!13871 = !DILocation(line: 3763, column: 3, scope: !13861)
!13872 = !DILocation(line: 3764, column: 3, scope: !13861)
!13873 = !DILocation(line: 3764, column: 26, scope: !13861)
!13874 = !DILocation(line: 3765, column: 3, scope: !13861)
!13875 = !DILocation(line: 3765, column: 28, scope: !13861)
!13876 = !DILocation(line: 3766, column: 29, scope: !13861)
!13877 = !DILocation(line: 3766, column: 3, scope: !13861)
!13878 = !DILocation(line: 3766, column: 27, scope: !13861)
!13879 = !DILocation(line: 3767, column: 7, scope: !13880)
!13880 = distinct !DILexicalBlock(scope: !13861, file: !3, line: 3767, column: 7)
!13881 = !DILocation(line: 3767, column: 15, scope: !13880)
!13882 = !DILocation(line: 3767, column: 13, scope: !13880)
!13883 = !DILocation(line: 3767, column: 7, scope: !13861)
!13884 = !DILocation(line: 3769, column: 31, scope: !13885)
!13885 = distinct !DILexicalBlock(scope: !13880, file: !3, line: 3768, column: 5)
!13886 = !DILocation(line: 3769, column: 7, scope: !13885)
!13887 = !DILocation(line: 3769, column: 29, scope: !13885)
!13888 = !DILocation(line: 3770, column: 7, scope: !13885)
!13889 = !DILocation(line: 3770, column: 34, scope: !13885)
!13890 = !DILocation(line: 3771, column: 5, scope: !13885)
!13891 = !DILocation(line: 3772, column: 10, scope: !13861)
!13892 = !DILocation(line: 3774, column: 31, scope: !13861)
!13893 = !DILocation(line: 3774, column: 3, scope: !13861)
!13894 = !DILocation(line: 3774, column: 29, scope: !13861)
!13895 = !DILocation(line: 3779, column: 3, scope: !13861)
!13896 = !DILocation(line: 3781, column: 4, scope: !13818)
!13897 = !DILocation(line: 3785, column: 6, scope: !13898)
!13898 = distinct !DILexicalBlock(scope: !13710, file: !3, line: 3785, column: 6)
!13899 = !DILocation(line: 3786, column: 6, scope: !13898)
!13900 = !DILocation(line: 3786, column: 10, scope: !13898)
!13901 = !DILocation(line: 3787, column: 6, scope: !13898)
!13902 = !DILocation(line: 3787, column: 9, scope: !13898)
!13903 = !DILocation(line: 3787, column: 30, scope: !13898)
!13904 = !DILocation(line: 3785, column: 6, scope: !13710)
!13905 = !DILocalVariable(name: "temp", scope: !13906, file: !3, line: 3789, type: !1686)
!13906 = distinct !DILexicalBlock(scope: !13898, file: !3, line: 3788, column: 4)
!13907 = !DILocation(line: 3789, column: 11, scope: !13906)
!13908 = !DILocation(line: 3789, column: 34, scope: !13906)
!13909 = !DILocation(line: 3789, column: 18, scope: !13906)
!13910 = !DILocation(line: 3790, column: 34, scope: !13906)
!13911 = !DILocation(line: 3790, column: 6, scope: !13906)
!13912 = !DILocation(line: 3790, column: 32, scope: !13906)
!13913 = !DILocation(line: 3791, column: 16, scope: !13906)
!13914 = !DILocation(line: 3791, column: 7, scope: !13906)
!13915 = !DILocation(line: 3791, column: 14, scope: !13906)
!13916 = !DILocation(line: 3795, column: 6, scope: !13906)
!13917 = !DILocation(line: 3798, column: 6, scope: !13918)
!13918 = distinct !DILexicalBlock(scope: !13710, file: !3, line: 3798, column: 6)
!13919 = !DILocation(line: 3798, column: 6, scope: !13710)
!13920 = !DILocation(line: 3799, column: 4, scope: !13918)
!13921 = !DILocation(line: 3804, column: 6, scope: !13922)
!13922 = distinct !DILexicalBlock(scope: !13710, file: !3, line: 3804, column: 6)
!13923 = !DILocation(line: 3804, column: 27, scope: !13922)
!13924 = !DILocation(line: 3804, column: 6, scope: !13710)
!13925 = !DILocation(line: 3806, column: 53, scope: !13926)
!13926 = distinct !DILexicalBlock(scope: !13922, file: !3, line: 3805, column: 4)
!13927 = !DILocation(line: 3806, column: 35, scope: !13926)
!13928 = !DILocation(line: 3806, column: 19, scope: !13926)
!13929 = !DILocation(line: 3806, column: 33, scope: !13926)
!13930 = !DILocation(line: 3807, column: 11, scope: !13931)
!13931 = distinct !DILexicalBlock(scope: !13926, file: !3, line: 3807, column: 10)
!13932 = !DILocation(line: 3807, column: 10, scope: !13926)
!13933 = !DILocation(line: 3808, column: 21, scope: !13931)
!13934 = !DILocation(line: 3808, column: 35, scope: !13931)
!13935 = !DILocation(line: 3808, column: 8, scope: !13931)
!13936 = !DILocation(line: 3809, column: 50, scope: !13926)
!13937 = !DILocation(line: 3809, column: 35, scope: !13926)
!13938 = !DILocation(line: 3809, column: 19, scope: !13926)
!13939 = !DILocation(line: 3809, column: 33, scope: !13926)
!13940 = !DILocation(line: 3811, column: 35, scope: !13926)
!13941 = !DILocation(line: 3812, column: 6, scope: !13926)
!13942 = !DILocation(line: 3812, column: 13, scope: !13926)
!13943 = !DILocation(line: 3811, column: 6, scope: !13926)
!13944 = !DILocation(line: 3813, column: 4, scope: !13926)
!13945 = !DILocation(line: 3815, column: 6, scope: !13946)
!13946 = distinct !DILexicalBlock(scope: !13710, file: !3, line: 3815, column: 6)
!13947 = !DILocation(line: 3815, column: 6, scope: !13710)
!13948 = !DILocation(line: 3820, column: 6, scope: !13949)
!13949 = distinct !DILexicalBlock(scope: !13946, file: !3, line: 3816, column: 4)
!13950 = !DILocation(line: 3820, column: 30, scope: !13949)
!13951 = !DILocation(line: 3821, column: 6, scope: !13949)
!13952 = !DILocation(line: 3821, column: 31, scope: !13949)
!13953 = !DILocation(line: 3822, column: 29, scope: !13949)
!13954 = !DILocation(line: 3822, column: 15, scope: !13949)
!13955 = !DILocation(line: 3822, column: 13, scope: !13949)
!13956 = !DILocation(line: 3823, column: 21, scope: !13949)
!13957 = !DILocation(line: 3823, column: 29, scope: !13949)
!13958 = !DILocation(line: 3823, column: 6, scope: !13949)
!13959 = !DILocation(line: 3824, column: 4, scope: !13949)
!13960 = !DILocation(line: 3829, column: 7, scope: !13961)
!13961 = distinct !DILexicalBlock(scope: !13710, file: !3, line: 3829, column: 6)
!13962 = !DILocation(line: 3829, column: 15, scope: !13961)
!13963 = !DILocation(line: 3829, column: 18, scope: !13961)
!13964 = !DILocation(line: 3829, column: 39, scope: !13961)
!13965 = !DILocation(line: 3829, column: 6, scope: !13710)
!13966 = !DILocation(line: 3830, column: 29, scope: !13961)
!13967 = !DILocation(line: 3830, column: 37, scope: !13961)
!13968 = !DILocation(line: 3830, column: 43, scope: !13961)
!13969 = !DILocation(line: 3830, column: 50, scope: !13961)
!13970 = !DILocation(line: 3830, column: 4, scope: !13961)
!13971 = !DILocation(line: 3832, column: 3, scope: !13710)
!13972 = !DILocation(line: 3832, column: 10, scope: !13710)
!13973 = !DILocation(line: 3834, column: 7, scope: !13711)
!13974 = !DILocalVariable(name: "r", scope: !13975, file: !3, line: 3838, type: !1686)
!13975 = distinct !DILexicalBlock(scope: !13711, file: !3, line: 3837, column: 7)
!13976 = !DILocation(line: 3838, column: 7, scope: !13975)
!13977 = !DILocalVariable(name: "i", scope: !13975, file: !3, line: 3838, type: !1686)
!13978 = !DILocation(line: 3838, column: 10, scope: !13975)
!13979 = !DILocation(line: 3840, column: 6, scope: !13980)
!13980 = distinct !DILexicalBlock(scope: !13975, file: !3, line: 3840, column: 6)
!13981 = !DILocation(line: 3840, column: 6, scope: !13975)
!13982 = !DILocation(line: 3841, column: 4, scope: !13980)
!13983 = !DILocation(line: 3844, column: 2, scope: !13975)
!13984 = !DILocation(line: 3845, column: 6, scope: !13975)
!13985 = !DILocation(line: 3845, column: 44, scope: !13975)
!13986 = !DILocation(line: 3845, column: 4, scope: !13975)
!13987 = !DILocation(line: 3846, column: 6, scope: !13975)
!13988 = !DILocation(line: 3846, column: 44, scope: !13975)
!13989 = !DILocation(line: 3846, column: 4, scope: !13975)
!13990 = !DILocation(line: 3847, column: 6, scope: !13991)
!13991 = distinct !DILexicalBlock(scope: !13975, file: !3, line: 3847, column: 6)
!13992 = !DILocation(line: 3847, column: 8, scope: !13991)
!13993 = !DILocation(line: 3847, column: 16, scope: !13991)
!13994 = !DILocation(line: 3847, column: 19, scope: !13991)
!13995 = !DILocation(line: 3847, column: 21, scope: !13991)
!13996 = !DILocation(line: 3847, column: 6, scope: !13975)
!13997 = !DILocalVariable(name: "zero", scope: !13998, file: !3, line: 3849, type: !1686)
!13998 = distinct !DILexicalBlock(scope: !13991, file: !3, line: 3848, column: 4)
!13999 = !DILocation(line: 3849, column: 11, scope: !13998)
!14000 = !DILocation(line: 3849, column: 18, scope: !13998)
!14001 = !DILocation(line: 3850, column: 10, scope: !14002)
!14002 = distinct !DILexicalBlock(scope: !13998, file: !3, line: 3850, column: 10)
!14003 = !DILocation(line: 3850, column: 12, scope: !14002)
!14004 = !DILocation(line: 3850, column: 10, scope: !13998)
!14005 = !DILocation(line: 3851, column: 12, scope: !14002)
!14006 = !DILocation(line: 3851, column: 10, scope: !14002)
!14007 = !DILocation(line: 3851, column: 8, scope: !14002)
!14008 = !DILocation(line: 3852, column: 10, scope: !14009)
!14009 = distinct !DILexicalBlock(scope: !13998, file: !3, line: 3852, column: 10)
!14010 = !DILocation(line: 3852, column: 12, scope: !14009)
!14011 = !DILocation(line: 3852, column: 10, scope: !13998)
!14012 = !DILocation(line: 3853, column: 12, scope: !14009)
!14013 = !DILocation(line: 3853, column: 10, scope: !14009)
!14014 = !DILocation(line: 3853, column: 8, scope: !14009)
!14015 = !DILocation(line: 3854, column: 4, scope: !13998)
!14016 = !DILocation(line: 3858, column: 6, scope: !14017)
!14017 = distinct !DILexicalBlock(scope: !13975, file: !3, line: 3858, column: 6)
!14018 = !DILocation(line: 3858, column: 24, scope: !14017)
!14019 = !DILocation(line: 3858, column: 27, scope: !14017)
!14020 = !DILocation(line: 3858, column: 6, scope: !13975)
!14021 = !DILocation(line: 3860, column: 28, scope: !14022)
!14022 = distinct !DILexicalBlock(scope: !14017, file: !3, line: 3859, column: 4)
!14023 = !DILocation(line: 3860, column: 34, scope: !14022)
!14024 = !DILocation(line: 3860, column: 37, scope: !14022)
!14025 = !DILocation(line: 3860, column: 13, scope: !14022)
!14026 = !DILocation(line: 3860, column: 11, scope: !14022)
!14027 = !DILocation(line: 3861, column: 34, scope: !14022)
!14028 = !DILocation(line: 3861, column: 6, scope: !14022)
!14029 = !DILocation(line: 3861, column: 32, scope: !14022)
!14030 = !DILocation(line: 3862, column: 4, scope: !14022)
!14031 = !DILocation(line: 3865, column: 13, scope: !14032)
!14032 = distinct !DILexicalBlock(scope: !14017, file: !3, line: 3864, column: 4)
!14033 = !DILocation(line: 3865, column: 11, scope: !14032)
!14034 = !DILocation(line: 3866, column: 34, scope: !14032)
!14035 = !DILocation(line: 3866, column: 6, scope: !14032)
!14036 = !DILocation(line: 3866, column: 32, scope: !14032)
!14037 = !DILocation(line: 3867, column: 28, scope: !14032)
!14038 = !DILocation(line: 3868, column: 6, scope: !14032)
!14039 = !DILocation(line: 3869, column: 6, scope: !14032)
!14040 = !DILocation(line: 3870, column: 25, scope: !14032)
!14041 = !DILocation(line: 3870, column: 6, scope: !14032)
!14042 = !DILocation(line: 3867, column: 12, scope: !14032)
!14043 = !DILocation(line: 3867, column: 10, scope: !14032)
!14044 = !DILocation(line: 3874, column: 7, scope: !13711)
!14045 = !DILocalVariable(name: "ix", scope: !14046, file: !3, line: 3878, type: !1739)
!14046 = distinct !DILexicalBlock(scope: !13711, file: !3, line: 3877, column: 7)
!14047 = !DILocation(line: 3878, column: 25, scope: !14046)
!14048 = !DILocalVariable(name: "ce", scope: !14046, file: !3, line: 3879, type: !5348)
!14049 = !DILocation(line: 3879, column: 19, scope: !14046)
!14050 = !DILocation(line: 3881, column: 6, scope: !14051)
!14051 = distinct !DILexicalBlock(scope: !14046, file: !3, line: 3881, column: 6)
!14052 = !DILocation(line: 3881, column: 6, scope: !14046)
!14053 = !DILocation(line: 3882, column: 4, scope: !14051)
!14054 = !DILocation(line: 3885, column: 6, scope: !14055)
!14055 = distinct !DILexicalBlock(scope: !14046, file: !3, line: 3885, column: 6)
!14056 = !DILocation(line: 3885, column: 6, scope: !14046)
!14057 = !DILocalVariable(name: "constant_p", scope: !14058, file: !3, line: 3887, type: !1804)
!14058 = distinct !DILexicalBlock(scope: !14055, file: !3, line: 3886, column: 4)
!14059 = !DILocation(line: 3887, column: 11, scope: !14058)
!14060 = !DILocalVariable(name: "value", scope: !14058, file: !3, line: 3888, type: !1686)
!14061 = !DILocation(line: 3888, column: 11, scope: !14058)
!14062 = !DILocation(line: 3894, column: 6, scope: !14063)
!14063 = distinct !DILexicalBlock(scope: !14058, file: !3, line: 3894, column: 6)
!14064 = !DILocation(line: 3894, column: 6, scope: !14065)
!14065 = distinct !DILexicalBlock(scope: !14063, file: !3, line: 3894, column: 6)
!14066 = !DILocation(line: 3895, column: 13, scope: !14067)
!14067 = distinct !DILexicalBlock(scope: !14065, file: !3, line: 3895, column: 12)
!14068 = !DILocation(line: 3895, column: 12, scope: !14065)
!14069 = !DILocation(line: 3897, column: 16, scope: !14070)
!14070 = distinct !DILexicalBlock(scope: !14067, file: !3, line: 3896, column: 3)
!14071 = !DILocation(line: 3898, column: 5, scope: !14070)
!14072 = distinct !{!14072, !14062, !14073}
!14073 = !DILocation(line: 3899, column: 3, scope: !14063)
!14074 = !DILocation(line: 3901, column: 10, scope: !14075)
!14075 = distinct !DILexicalBlock(scope: !14058, file: !3, line: 3901, column: 10)
!14076 = !DILocation(line: 3901, column: 10, scope: !14058)
!14077 = !DILocation(line: 3903, column: 55, scope: !14078)
!14078 = distinct !DILexicalBlock(scope: !14075, file: !3, line: 3902, column: 8)
!14079 = !DILocation(line: 3903, column: 61, scope: !14078)
!14080 = !DILocation(line: 3903, column: 31, scope: !14078)
!14081 = !DILocation(line: 3903, column: 3, scope: !14078)
!14082 = !DILocation(line: 3903, column: 29, scope: !14078)
!14083 = !DILocation(line: 3904, column: 3, scope: !14078)
!14084 = !DILocation(line: 3910, column: 40, scope: !14085)
!14085 = distinct !DILexicalBlock(scope: !14058, file: !3, line: 3910, column: 10)
!14086 = !DILocation(line: 3910, column: 46, scope: !14085)
!14087 = !DILocation(line: 3910, column: 10, scope: !14085)
!14088 = !DILocation(line: 3910, column: 10, scope: !14058)
!14089 = !DILocation(line: 3911, column: 8, scope: !14085)
!14090 = !DILocation(line: 3913, column: 6, scope: !14058)
!14091 = !DILocation(line: 3913, column: 27, scope: !14058)
!14092 = !DILocation(line: 3914, column: 4, scope: !14058)
!14093 = !DILocation(line: 3918, column: 10, scope: !14094)
!14094 = distinct !DILexicalBlock(scope: !14046, file: !3, line: 3918, column: 2)
!14095 = !DILocation(line: 3918, column: 7, scope: !14094)
!14096 = !DILocation(line: 3918, column: 15, scope: !14097)
!14097 = distinct !DILexicalBlock(scope: !14094, file: !3, line: 3918, column: 2)
!14098 = !DILocation(line: 3918, column: 2, scope: !14094)
!14099 = !DILocalVariable(name: "tret", scope: !14100, file: !3, line: 3920, type: !1329)
!14100 = distinct !DILexicalBlock(scope: !14097, file: !3, line: 3919, column: 4)
!14101 = !DILocation(line: 3920, column: 27, scope: !14100)
!14102 = !DILocation(line: 3921, column: 29, scope: !14100)
!14103 = !DILocation(line: 3921, column: 33, scope: !14100)
!14104 = !DILocation(line: 3921, column: 40, scope: !14100)
!14105 = !DILocation(line: 3921, column: 47, scope: !14100)
!14106 = !DILocation(line: 3921, column: 13, scope: !14100)
!14107 = !DILocation(line: 3921, column: 11, scope: !14100)
!14108 = !DILocation(line: 3923, column: 10, scope: !14109)
!14109 = distinct !DILexicalBlock(scope: !14100, file: !3, line: 3923, column: 10)
!14110 = !DILocation(line: 3923, column: 15, scope: !14109)
!14111 = !DILocation(line: 3923, column: 10, scope: !14100)
!14112 = !DILocation(line: 3924, column: 12, scope: !14109)
!14113 = !DILocation(line: 3924, column: 8, scope: !14109)
!14114 = !DILocation(line: 3925, column: 4, scope: !14100)
!14115 = !DILocation(line: 3918, column: 62, scope: !14097)
!14116 = !DILocation(line: 3918, column: 2, scope: !14097)
!14117 = distinct !{!14117, !14098, !14118}
!14118 = !DILocation(line: 3925, column: 4, scope: !14094)
!14119 = !DILocation(line: 3926, column: 22, scope: !14120)
!14120 = distinct !DILexicalBlock(scope: !14046, file: !3, line: 3926, column: 6)
!14121 = !DILocation(line: 3926, column: 7, scope: !14120)
!14122 = !DILocation(line: 3926, column: 6, scope: !14046)
!14123 = !DILocation(line: 3927, column: 52, scope: !14120)
!14124 = !DILocation(line: 3927, column: 58, scope: !14120)
!14125 = !DILocation(line: 3927, column: 32, scope: !14120)
!14126 = !DILocation(line: 3927, column: 4, scope: !14120)
!14127 = !DILocation(line: 3927, column: 30, scope: !14120)
!14128 = !DILocation(line: 3929, column: 7, scope: !13711)
!14129 = !DILocation(line: 3933, column: 7, scope: !13711)
!14130 = !DILocation(line: 3934, column: 5, scope: !13711)
!14131 = !DILocation(line: 3936, column: 7, scope: !14132)
!14132 = distinct !DILexicalBlock(scope: !13655, file: !3, line: 3936, column: 7)
!14133 = !DILocation(line: 3936, column: 11, scope: !14132)
!14134 = !DILocation(line: 3936, column: 7, scope: !13655)
!14135 = !DILocation(line: 3937, column: 5, scope: !14132)
!14136 = !DILocation(line: 3938, column: 12, scope: !14137)
!14137 = distinct !DILexicalBlock(scope: !14132, file: !3, line: 3938, column: 12)
!14138 = !DILocation(line: 3938, column: 12, scope: !14132)
!14139 = !DILocation(line: 3940, column: 17, scope: !14140)
!14140 = distinct !DILexicalBlock(scope: !14137, file: !3, line: 3939, column: 5)
!14141 = !DILocation(line: 3940, column: 8, scope: !14140)
!14142 = !DILocation(line: 3940, column: 15, scope: !14140)
!14143 = !DILocation(line: 3941, column: 7, scope: !14140)
!14144 = !DILocation(line: 3947, column: 12, scope: !14145)
!14145 = distinct !DILexicalBlock(scope: !14146, file: !3, line: 3947, column: 11)
!14146 = distinct !DILexicalBlock(scope: !14137, file: !3, line: 3944, column: 5)
!14147 = !DILocation(line: 3947, column: 11, scope: !14145)
!14148 = !DILocation(line: 3947, column: 11, scope: !14146)
!14149 = !DILocalVariable(name: "lhs", scope: !14150, file: !3, line: 3949, type: !1686)
!14150 = distinct !DILexicalBlock(scope: !14145, file: !3, line: 3948, column: 2)
!14151 = !DILocation(line: 3949, column: 9, scope: !14150)
!14152 = !DILocation(line: 3949, column: 15, scope: !14150)
!14153 = !DILocalVariable(name: "rhs", scope: !14150, file: !3, line: 3950, type: !1686)
!14154 = !DILocation(line: 3950, column: 9, scope: !14150)
!14155 = !DILocation(line: 3950, column: 15, scope: !14150)
!14156 = !DILocalVariable(name: "init", scope: !14150, file: !3, line: 3951, type: !2014)
!14157 = !DILocation(line: 3951, column: 11, scope: !14150)
!14158 = !DILocation(line: 3951, column: 18, scope: !14150)
!14159 = !DILocation(line: 3952, column: 27, scope: !14150)
!14160 = !DILocation(line: 3952, column: 34, scope: !14150)
!14161 = !DILocation(line: 3952, column: 4, scope: !14150)
!14162 = !DILocation(line: 3953, column: 5, scope: !14150)
!14163 = !DILocation(line: 3953, column: 12, scope: !14150)
!14164 = !DILocation(line: 3954, column: 2, scope: !14150)
!14165 = !DILocation(line: 3956, column: 7, scope: !14146)
!14166 = !DILocation(line: 3958, column: 1, scope: !13655)
!14167 = distinct !DISubprogram(name: "gimple_fold_indirect_ref_rhs", scope: !3, file: !3, line: 4088, type: !4157, scopeLine: 4089, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!14168 = !DILocalVariable(name: "t", arg: 1, scope: !14167, file: !3, line: 4088, type: !1686)
!14169 = !DILocation(line: 4088, column: 36, scope: !14167)
!14170 = !DILocation(line: 4090, column: 36, scope: !14167)
!14171 = !DILocation(line: 4090, column: 10, scope: !14167)
!14172 = !DILocation(line: 4090, column: 3, scope: !14167)
!14173 = distinct !DISubprogram(name: "optimize_compound_literals_in_ctor", scope: !3, file: !3, line: 3556, type: !4157, scopeLine: 3557, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!14174 = !DILocalVariable(name: "orig_ctor", arg: 1, scope: !14173, file: !3, line: 3556, type: !1686)
!14175 = !DILocation(line: 3556, column: 42, scope: !14173)
!14176 = !DILocalVariable(name: "ctor", scope: !14173, file: !3, line: 3558, type: !1686)
!14177 = !DILocation(line: 3558, column: 8, scope: !14173)
!14178 = !DILocation(line: 3558, column: 15, scope: !14173)
!14179 = !DILocalVariable(name: "elts", scope: !14173, file: !3, line: 3559, type: !2892)
!14180 = !DILocation(line: 3559, column: 28, scope: !14173)
!14181 = !DILocation(line: 3559, column: 35, scope: !14173)
!14182 = !DILocalVariable(name: "idx", scope: !14173, file: !3, line: 3560, type: !7)
!14183 = !DILocation(line: 3560, column: 16, scope: !14173)
!14184 = !DILocalVariable(name: "num", scope: !14173, file: !3, line: 3560, type: !7)
!14185 = !DILocation(line: 3560, column: 21, scope: !14173)
!14186 = !DILocation(line: 3560, column: 27, scope: !14173)
!14187 = !DILocation(line: 3562, column: 12, scope: !14188)
!14188 = distinct !DILexicalBlock(scope: !14173, file: !3, line: 3562, column: 3)
!14189 = !DILocation(line: 3562, column: 8, scope: !14188)
!14190 = !DILocation(line: 3562, column: 17, scope: !14191)
!14191 = distinct !DILexicalBlock(scope: !14188, file: !3, line: 3562, column: 3)
!14192 = !DILocation(line: 3562, column: 23, scope: !14191)
!14193 = !DILocation(line: 3562, column: 21, scope: !14191)
!14194 = !DILocation(line: 3562, column: 3, scope: !14188)
!14195 = !DILocalVariable(name: "value", scope: !14196, file: !3, line: 3564, type: !1686)
!14196 = distinct !DILexicalBlock(scope: !14191, file: !3, line: 3563, column: 5)
!14197 = !DILocation(line: 3564, column: 12, scope: !14196)
!14198 = !DILocation(line: 3564, column: 20, scope: !14196)
!14199 = !DILocation(line: 3564, column: 60, scope: !14196)
!14200 = !DILocalVariable(name: "newval", scope: !14196, file: !3, line: 3565, type: !1686)
!14201 = !DILocation(line: 3565, column: 12, scope: !14196)
!14202 = !DILocation(line: 3565, column: 21, scope: !14196)
!14203 = !DILocation(line: 3566, column: 11, scope: !14204)
!14204 = distinct !DILexicalBlock(scope: !14196, file: !3, line: 3566, column: 11)
!14205 = !DILocation(line: 3566, column: 29, scope: !14204)
!14206 = !DILocation(line: 3566, column: 11, scope: !14196)
!14207 = !DILocation(line: 3567, column: 47, scope: !14204)
!14208 = !DILocation(line: 3567, column: 11, scope: !14204)
!14209 = !DILocation(line: 3567, column: 9, scope: !14204)
!14210 = !DILocation(line: 3567, column: 2, scope: !14204)
!14211 = !DILocation(line: 3568, column: 16, scope: !14212)
!14212 = distinct !DILexicalBlock(scope: !14204, file: !3, line: 3568, column: 16)
!14213 = !DILocation(line: 3568, column: 34, scope: !14212)
!14214 = !DILocation(line: 3568, column: 16, scope: !14204)
!14215 = !DILocalVariable(name: "decl_s", scope: !14216, file: !3, line: 3570, type: !1686)
!14216 = distinct !DILexicalBlock(scope: !14212, file: !3, line: 3569, column: 2)
!14217 = !DILocation(line: 3570, column: 9, scope: !14216)
!14218 = !DILocation(line: 3570, column: 18, scope: !14216)
!14219 = !DILocalVariable(name: "decl", scope: !14216, file: !3, line: 3571, type: !1686)
!14220 = !DILocation(line: 3571, column: 9, scope: !14216)
!14221 = !DILocation(line: 3571, column: 16, scope: !14216)
!14222 = !DILocalVariable(name: "init", scope: !14216, file: !3, line: 3572, type: !1686)
!14223 = !DILocation(line: 3572, column: 9, scope: !14216)
!14224 = !DILocation(line: 3572, column: 16, scope: !14216)
!14225 = !DILocation(line: 3574, column: 9, scope: !14226)
!14226 = distinct !DILexicalBlock(scope: !14216, file: !3, line: 3574, column: 8)
!14227 = !DILocation(line: 3575, column: 8, scope: !14226)
!14228 = !DILocation(line: 3575, column: 12, scope: !14226)
!14229 = !DILocation(line: 3576, column: 8, scope: !14226)
!14230 = !DILocation(line: 3576, column: 11, scope: !14226)
!14231 = !DILocation(line: 3574, column: 8, scope: !14216)
!14232 = !DILocation(line: 3577, column: 51, scope: !14226)
!14233 = !DILocation(line: 3577, column: 15, scope: !14226)
!14234 = !DILocation(line: 3577, column: 13, scope: !14226)
!14235 = !DILocation(line: 3577, column: 6, scope: !14226)
!14236 = !DILocation(line: 3578, column: 2, scope: !14216)
!14237 = !DILocation(line: 3579, column: 11, scope: !14238)
!14238 = distinct !DILexicalBlock(scope: !14196, file: !3, line: 3579, column: 11)
!14239 = !DILocation(line: 3579, column: 21, scope: !14238)
!14240 = !DILocation(line: 3579, column: 18, scope: !14238)
!14241 = !DILocation(line: 3579, column: 11, scope: !14196)
!14242 = !DILocation(line: 3580, column: 2, scope: !14238)
!14243 = !DILocation(line: 3582, column: 11, scope: !14244)
!14244 = distinct !DILexicalBlock(scope: !14196, file: !3, line: 3582, column: 11)
!14245 = !DILocation(line: 3582, column: 19, scope: !14244)
!14246 = !DILocation(line: 3582, column: 16, scope: !14244)
!14247 = !DILocation(line: 3582, column: 11, scope: !14196)
!14248 = !DILocation(line: 3584, column: 11, scope: !14249)
!14249 = distinct !DILexicalBlock(scope: !14244, file: !3, line: 3583, column: 2)
!14250 = !DILocation(line: 3584, column: 9, scope: !14249)
!14251 = !DILocation(line: 3585, column: 30, scope: !14249)
!14252 = !DILocation(line: 3585, column: 4, scope: !14249)
!14253 = !DILocation(line: 3585, column: 28, scope: !14249)
!14254 = !DILocation(line: 3586, column: 11, scope: !14249)
!14255 = !DILocation(line: 3586, column: 9, scope: !14249)
!14256 = !DILocation(line: 3587, column: 2, scope: !14249)
!14257 = !DILocation(line: 3588, column: 55, scope: !14196)
!14258 = !DILocation(line: 3588, column: 7, scope: !14196)
!14259 = !DILocation(line: 3588, column: 47, scope: !14196)
!14260 = !DILocation(line: 3588, column: 53, scope: !14196)
!14261 = !DILocation(line: 3589, column: 5, scope: !14196)
!14262 = !DILocation(line: 3562, column: 31, scope: !14191)
!14263 = !DILocation(line: 3562, column: 3, scope: !14191)
!14264 = distinct !{!14264, !14194, !14265}
!14265 = !DILocation(line: 3589, column: 5, scope: !14188)
!14266 = !DILocation(line: 3590, column: 10, scope: !14173)
!14267 = !DILocation(line: 3590, column: 3, scope: !14173)
!14268 = distinct !DISubprogram(name: "VEC_constructor_elt_base_length", scope: !135, file: !135, line: 1537, type: !14269, scopeLine: 1537, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!14269 = !DISubroutineType(types: !14270)
!14270 = !{!7, !14271}
!14271 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !14272, size: 64)
!14272 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2897)
!14273 = !DILocalVariable(name: "vec_", arg: 1, scope: !14268, file: !135, line: 1537, type: !14271)
!14274 = !DILocation(line: 1537, column: 1, scope: !14268)
!14275 = distinct !DISubprogram(name: "gimplify_init_ctor_preeval", scope: !3, file: !3, line: 3253, type: !14276, scopeLine: 3255, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!14276 = !DISubroutineType(types: !14277)
!14277 = !{null, !2049, !3489, !3489, !3136}
!14278 = !DILocalVariable(name: "expr_p", arg: 1, scope: !14275, file: !3, line: 3253, type: !2049)
!14279 = !DILocation(line: 3253, column: 35, scope: !14275)
!14280 = !DILocalVariable(name: "pre_p", arg: 2, scope: !14275, file: !3, line: 3253, type: !3489)
!14281 = !DILocation(line: 3253, column: 55, scope: !14275)
!14282 = !DILocalVariable(name: "post_p", arg: 3, scope: !14275, file: !3, line: 3253, type: !3489)
!14283 = !DILocation(line: 3253, column: 74, scope: !14275)
!14284 = !DILocalVariable(name: "data", arg: 4, scope: !14275, file: !3, line: 3254, type: !3136)
!14285 = !DILocation(line: 3254, column: 48, scope: !14275)
!14286 = !DILocalVariable(name: "one", scope: !14275, file: !3, line: 3256, type: !1329)
!14287 = !DILocation(line: 3256, column: 24, scope: !14275)
!14288 = !DILocation(line: 3259, column: 7, scope: !14289)
!14289 = distinct !DILexicalBlock(scope: !14275, file: !3, line: 3259, column: 7)
!14290 = !DILocation(line: 3259, column: 7, scope: !14275)
!14291 = !DILocation(line: 3263, column: 7, scope: !14292)
!14292 = distinct !DILexicalBlock(scope: !14289, file: !3, line: 3260, column: 5)
!14293 = !DILocation(line: 3264, column: 7, scope: !14292)
!14294 = !DILocation(line: 3268, column: 7, scope: !14295)
!14295 = distinct !DILexicalBlock(scope: !14275, file: !3, line: 3268, column: 7)
!14296 = !DILocation(line: 3268, column: 7, scope: !14275)
!14297 = !DILocation(line: 3269, column: 5, scope: !14295)
!14298 = !DILocation(line: 3272, column: 7, scope: !14299)
!14299 = distinct !DILexicalBlock(scope: !14275, file: !3, line: 3272, column: 7)
!14300 = !DILocation(line: 3272, column: 27, scope: !14299)
!14301 = !DILocation(line: 3272, column: 7, scope: !14275)
!14302 = !DILocalVariable(name: "ix", scope: !14303, file: !3, line: 3274, type: !1739)
!14303 = distinct !DILexicalBlock(scope: !14299, file: !3, line: 3273, column: 5)
!14304 = !DILocation(line: 3274, column: 30, scope: !14303)
!14305 = !DILocalVariable(name: "ce", scope: !14303, file: !3, line: 3275, type: !5348)
!14306 = !DILocation(line: 3275, column: 24, scope: !14303)
!14307 = !DILocalVariable(name: "v", scope: !14303, file: !3, line: 3276, type: !2892)
!14308 = !DILocation(line: 3276, column: 32, scope: !14303)
!14309 = !DILocation(line: 3276, column: 36, scope: !14303)
!14310 = !DILocation(line: 3278, column: 15, scope: !14311)
!14311 = distinct !DILexicalBlock(scope: !14303, file: !3, line: 3278, column: 7)
!14312 = !DILocation(line: 3278, column: 12, scope: !14311)
!14313 = !DILocation(line: 3278, column: 20, scope: !14314)
!14314 = distinct !DILexicalBlock(scope: !14311, file: !3, line: 3278, column: 7)
!14315 = !DILocation(line: 3278, column: 7, scope: !14311)
!14316 = !DILocation(line: 3279, column: 31, scope: !14314)
!14317 = !DILocation(line: 3279, column: 35, scope: !14314)
!14318 = !DILocation(line: 3279, column: 42, scope: !14314)
!14319 = !DILocation(line: 3279, column: 49, scope: !14314)
!14320 = !DILocation(line: 3279, column: 57, scope: !14314)
!14321 = !DILocation(line: 3279, column: 2, scope: !14314)
!14322 = !DILocation(line: 3278, column: 64, scope: !14314)
!14323 = !DILocation(line: 3278, column: 7, scope: !14314)
!14324 = distinct !{!14324, !14315, !14325}
!14325 = !DILocation(line: 3279, column: 61, scope: !14311)
!14326 = !DILocation(line: 3281, column: 7, scope: !14303)
!14327 = !DILocation(line: 3285, column: 25, scope: !14275)
!14328 = !DILocation(line: 3285, column: 3, scope: !14275)
!14329 = !DILocation(line: 3293, column: 24, scope: !14275)
!14330 = !DILocation(line: 3293, column: 32, scope: !14275)
!14331 = !DILocation(line: 3293, column: 39, scope: !14275)
!14332 = !DILocation(line: 3293, column: 9, scope: !14275)
!14333 = !DILocation(line: 3293, column: 7, scope: !14275)
!14334 = !DILocation(line: 3294, column: 7, scope: !14335)
!14335 = distinct !DILexicalBlock(scope: !14275, file: !3, line: 3294, column: 7)
!14336 = !DILocation(line: 3294, column: 11, scope: !14335)
!14337 = !DILocation(line: 3294, column: 7, scope: !14275)
!14338 = !DILocation(line: 3296, column: 8, scope: !14339)
!14339 = distinct !DILexicalBlock(scope: !14335, file: !3, line: 3295, column: 5)
!14340 = !DILocation(line: 3296, column: 15, scope: !14339)
!14341 = !DILocation(line: 3297, column: 7, scope: !14339)
!14342 = !DILocation(line: 3304, column: 7, scope: !14343)
!14343 = distinct !DILexicalBlock(scope: !14275, file: !3, line: 3304, column: 7)
!14344 = !DILocation(line: 3304, column: 7, scope: !14275)
!14345 = !DILocation(line: 3305, column: 5, scope: !14343)
!14346 = !DILocation(line: 3309, column: 7, scope: !14347)
!14347 = distinct !DILexicalBlock(scope: !14275, file: !3, line: 3309, column: 7)
!14348 = !DILocation(line: 3309, column: 51, scope: !14347)
!14349 = !DILocation(line: 3309, column: 7, scope: !14275)
!14350 = !DILocation(line: 3310, column: 5, scope: !14347)
!14351 = !DILocation(line: 3313, column: 8, scope: !14352)
!14352 = distinct !DILexicalBlock(scope: !14275, file: !3, line: 3313, column: 7)
!14353 = !DILocation(line: 3313, column: 7, scope: !14275)
!14354 = !DILocation(line: 3314, column: 5, scope: !14352)
!14355 = !DILocation(line: 3317, column: 34, scope: !14275)
!14356 = !DILocation(line: 3317, column: 33, scope: !14275)
!14357 = !DILocation(line: 3317, column: 42, scope: !14275)
!14358 = !DILocation(line: 3317, column: 13, scope: !14275)
!14359 = !DILocation(line: 3317, column: 4, scope: !14275)
!14360 = !DILocation(line: 3317, column: 11, scope: !14275)
!14361 = !DILocation(line: 3318, column: 1, scope: !14275)
!14362 = distinct !DISubprogram(name: "gimplify_init_ctor_eval", scope: !3, file: !3, line: 3424, type: !14363, scopeLine: 3426, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!14363 = !DISubroutineType(types: !14364)
!14364 = !{null, !1686, !2892, !3489, !1804}
!14365 = !DILocalVariable(name: "object", arg: 1, scope: !14362, file: !3, line: 3424, type: !1686)
!14366 = !DILocation(line: 3424, column: 31, scope: !14362)
!14367 = !DILocalVariable(name: "elts", arg: 2, scope: !14362, file: !3, line: 3424, type: !2892)
!14368 = !DILocation(line: 3424, column: 64, scope: !14362)
!14369 = !DILocalVariable(name: "pre_p", arg: 3, scope: !14362, file: !3, line: 3425, type: !3489)
!14370 = !DILocation(line: 3425, column: 17, scope: !14362)
!14371 = !DILocalVariable(name: "cleared", arg: 4, scope: !14362, file: !3, line: 3425, type: !1804)
!14372 = !DILocation(line: 3425, column: 29, scope: !14362)
!14373 = !DILocalVariable(name: "array_elt_type", scope: !14362, file: !3, line: 3427, type: !1686)
!14374 = !DILocation(line: 3427, column: 8, scope: !14362)
!14375 = !DILocalVariable(name: "ix", scope: !14362, file: !3, line: 3428, type: !1739)
!14376 = !DILocation(line: 3428, column: 26, scope: !14362)
!14377 = !DILocalVariable(name: "purpose", scope: !14362, file: !3, line: 3429, type: !1686)
!14378 = !DILocation(line: 3429, column: 8, scope: !14362)
!14379 = !DILocalVariable(name: "value", scope: !14362, file: !3, line: 3429, type: !1686)
!14380 = !DILocation(line: 3429, column: 17, scope: !14362)
!14381 = !DILocation(line: 3431, column: 7, scope: !14382)
!14382 = distinct !DILexicalBlock(scope: !14362, file: !3, line: 3431, column: 7)
!14383 = !DILocation(line: 3431, column: 38, scope: !14382)
!14384 = !DILocation(line: 3431, column: 7, scope: !14362)
!14385 = !DILocation(line: 3432, column: 22, scope: !14382)
!14386 = !DILocation(line: 3432, column: 20, scope: !14382)
!14387 = !DILocation(line: 3432, column: 5, scope: !14382)
!14388 = !DILocation(line: 3434, column: 3, scope: !14389)
!14389 = distinct !DILexicalBlock(scope: !14362, file: !3, line: 3434, column: 3)
!14390 = !DILocation(line: 3434, column: 3, scope: !14391)
!14391 = distinct !DILexicalBlock(scope: !14389, file: !3, line: 3434, column: 3)
!14392 = !DILocalVariable(name: "cref", scope: !14393, file: !3, line: 3436, type: !1686)
!14393 = distinct !DILexicalBlock(scope: !14391, file: !3, line: 3435, column: 5)
!14394 = !DILocation(line: 3436, column: 12, scope: !14393)
!14395 = !DILocation(line: 3439, column: 11, scope: !14396)
!14396 = distinct !DILexicalBlock(scope: !14393, file: !3, line: 3439, column: 11)
!14397 = !DILocation(line: 3439, column: 17, scope: !14396)
!14398 = !DILocation(line: 3439, column: 11, scope: !14393)
!14399 = !DILocation(line: 3440, column: 2, scope: !14396)
!14400 = !DILocation(line: 3442, column: 11, scope: !14401)
!14401 = distinct !DILexicalBlock(scope: !14393, file: !3, line: 3442, column: 11)
!14402 = !DILocation(line: 3442, column: 19, scope: !14401)
!14403 = !DILocation(line: 3442, column: 41, scope: !14401)
!14404 = !DILocation(line: 3442, column: 22, scope: !14401)
!14405 = !DILocation(line: 3442, column: 11, scope: !14393)
!14406 = !DILocation(line: 3443, column: 2, scope: !14401)
!14407 = !DILocation(line: 3447, column: 7, scope: !14393)
!14408 = !DILocation(line: 3454, column: 13, scope: !14409)
!14409 = distinct !DILexicalBlock(scope: !14393, file: !3, line: 3454, column: 11)
!14410 = !DILocation(line: 3454, column: 39, scope: !14409)
!14411 = !DILocation(line: 3454, column: 65, scope: !14409)
!14412 = !DILocation(line: 3454, column: 42, scope: !14409)
!14413 = !DILocation(line: 3454, column: 11, scope: !14393)
!14414 = !DILocation(line: 3455, column: 2, scope: !14409)
!14415 = !DILocation(line: 3459, column: 11, scope: !14416)
!14416 = distinct !DILexicalBlock(scope: !14393, file: !3, line: 3459, column: 11)
!14417 = !DILocation(line: 3459, column: 31, scope: !14416)
!14418 = !DILocation(line: 3459, column: 11, scope: !14393)
!14419 = !DILocalVariable(name: "lower", scope: !14420, file: !3, line: 3461, type: !1686)
!14420 = distinct !DILexicalBlock(scope: !14416, file: !3, line: 3460, column: 2)
!14421 = !DILocation(line: 3461, column: 9, scope: !14420)
!14422 = !DILocation(line: 3461, column: 17, scope: !14420)
!14423 = !DILocalVariable(name: "upper", scope: !14420, file: !3, line: 3462, type: !1686)
!14424 = !DILocation(line: 3462, column: 9, scope: !14420)
!14425 = !DILocation(line: 3462, column: 17, scope: !14420)
!14426 = !DILocation(line: 3466, column: 26, scope: !14427)
!14427 = distinct !DILexicalBlock(scope: !14420, file: !3, line: 3466, column: 8)
!14428 = !DILocation(line: 3466, column: 33, scope: !14427)
!14429 = !DILocation(line: 3466, column: 8, scope: !14427)
!14430 = !DILocation(line: 3466, column: 8, scope: !14420)
!14431 = !DILocation(line: 3467, column: 16, scope: !14427)
!14432 = !DILocation(line: 3467, column: 14, scope: !14427)
!14433 = !DILocation(line: 3467, column: 6, scope: !14427)
!14434 = !DILocation(line: 3470, column: 39, scope: !14435)
!14435 = distinct !DILexicalBlock(scope: !14427, file: !3, line: 3469, column: 6)
!14436 = !DILocation(line: 3470, column: 47, scope: !14435)
!14437 = !DILocation(line: 3470, column: 54, scope: !14435)
!14438 = !DILocation(line: 3470, column: 61, scope: !14435)
!14439 = !DILocation(line: 3471, column: 11, scope: !14435)
!14440 = !DILocation(line: 3471, column: 27, scope: !14435)
!14441 = !DILocation(line: 3471, column: 34, scope: !14435)
!14442 = !DILocation(line: 3470, column: 8, scope: !14435)
!14443 = !DILocation(line: 3472, column: 8, scope: !14435)
!14444 = !DILocation(line: 3474, column: 2, scope: !14420)
!14445 = !DILocation(line: 3476, column: 11, scope: !14446)
!14446 = distinct !DILexicalBlock(scope: !14393, file: !3, line: 3476, column: 11)
!14447 = !DILocation(line: 3476, column: 11, scope: !14393)
!14448 = !DILocation(line: 3479, column: 8, scope: !14449)
!14449 = distinct !DILexicalBlock(scope: !14450, file: !3, line: 3479, column: 8)
!14450 = distinct !DILexicalBlock(scope: !14446, file: !3, line: 3477, column: 2)
!14451 = !DILocation(line: 3479, column: 8, scope: !14450)
!14452 = !DILocation(line: 3480, column: 16, scope: !14449)
!14453 = !DILocation(line: 3480, column: 14, scope: !14449)
!14454 = !DILocation(line: 3480, column: 6, scope: !14449)
!14455 = !DILocation(line: 3482, column: 11, scope: !14450)
!14456 = !DILocation(line: 3482, column: 9, scope: !14450)
!14457 = !DILocation(line: 3484, column: 2, scope: !14450)
!14458 = !DILocation(line: 3487, column: 4, scope: !14459)
!14459 = distinct !DILexicalBlock(scope: !14446, file: !3, line: 3486, column: 2)
!14460 = !DILocation(line: 3488, column: 11, scope: !14459)
!14461 = !DILocation(line: 3488, column: 9, scope: !14459)
!14462 = !DILocation(line: 3492, column: 11, scope: !14463)
!14463 = distinct !DILexicalBlock(scope: !14393, file: !3, line: 3492, column: 11)
!14464 = !DILocation(line: 3492, column: 29, scope: !14463)
!14465 = !DILocation(line: 3493, column: 4, scope: !14463)
!14466 = !DILocation(line: 3493, column: 7, scope: !14463)
!14467 = !DILocation(line: 3493, column: 37, scope: !14463)
!14468 = !DILocation(line: 3492, column: 11, scope: !14393)
!14469 = !DILocation(line: 3494, column: 27, scope: !14463)
!14470 = !DILocation(line: 3494, column: 33, scope: !14463)
!14471 = !DILocation(line: 3495, column: 6, scope: !14463)
!14472 = !DILocation(line: 3495, column: 13, scope: !14463)
!14473 = !DILocation(line: 3494, column: 2, scope: !14463)
!14474 = !DILocalVariable(name: "init", scope: !14475, file: !3, line: 3498, type: !1686)
!14475 = distinct !DILexicalBlock(scope: !14463, file: !3, line: 3497, column: 2)
!14476 = !DILocation(line: 3498, column: 9, scope: !14475)
!14477 = !DILocation(line: 3498, column: 16, scope: !14475)
!14478 = !DILocation(line: 3499, column: 22, scope: !14475)
!14479 = !DILocation(line: 3499, column: 28, scope: !14475)
!14480 = !DILocation(line: 3499, column: 4, scope: !14475)
!14481 = !DILocation(line: 3500, column: 14, scope: !14475)
!14482 = !DILocation(line: 3500, column: 4, scope: !14475)
!14483 = !DILocation(line: 3502, column: 5, scope: !14393)
!14484 = distinct !{!14484, !14388, !14485}
!14485 = !DILocation(line: 3502, column: 5, scope: !14389)
!14486 = !DILocation(line: 3503, column: 1, scope: !14362)
!14487 = distinct !DISubprogram(name: "VEC_constructor_elt_base_index", scope: !135, file: !135, line: 1537, type: !14488, scopeLine: 1537, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!14488 = !DISubroutineType(types: !14489)
!14489 = !{!5348, !8539, !7}
!14490 = !DILocalVariable(name: "vec_", arg: 1, scope: !14487, file: !135, line: 1537, type: !8539)
!14491 = !DILocation(line: 1537, column: 1, scope: !14487)
!14492 = !DILocalVariable(name: "ix_", arg: 2, scope: !14487, file: !135, line: 1537, type: !7)
!14493 = !DILocation(line: 0, scope: !14487)
!14494 = distinct !DISubprogram(name: "VEC_constructor_elt_gc_copy", scope: !135, file: !135, line: 1538, type: !14495, scopeLine: 1538, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!14495 = !DISubroutineType(types: !14496)
!14496 = !{!2892, !8539}
!14497 = !DILocalVariable(name: "vec_", arg: 1, scope: !14494, file: !135, line: 1538, type: !8539)
!14498 = !DILocation(line: 1538, column: 1, scope: !14494)
!14499 = !DILocalVariable(name: "len_", scope: !14494, file: !135, line: 1538, type: !2160)
!14500 = !DILocalVariable(name: "new_vec_", scope: !14494, file: !135, line: 1538, type: !2892)
!14501 = !DILocation(line: 1538, column: 1, scope: !14502)
!14502 = distinct !DILexicalBlock(scope: !14494, file: !135, line: 1538, column: 1)
!14503 = !DILocation(line: 1538, column: 1, scope: !14504)
!14504 = distinct !DILexicalBlock(scope: !14502, file: !135, line: 1538, column: 1)
!14505 = distinct !DISubprogram(name: "gimplify_init_ctor_preeval_1", scope: !3, file: !3, line: 3210, type: !4165, scopeLine: 3211, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!14506 = !DILocalVariable(name: "tp", arg: 1, scope: !14505, file: !3, line: 3210, type: !2049)
!14507 = !DILocation(line: 3210, column: 37, scope: !14505)
!14508 = !DILocalVariable(name: "walk_subtrees", arg: 2, scope: !14505, file: !3, line: 3210, type: !4167)
!14509 = !DILocation(line: 3210, column: 46, scope: !14505)
!14510 = !DILocalVariable(name: "xdata", arg: 3, scope: !14505, file: !3, line: 3210, type: !1685)
!14511 = !DILocation(line: 3210, column: 67, scope: !14505)
!14512 = !DILocalVariable(name: "data", scope: !14505, file: !3, line: 3212, type: !3136)
!14513 = !DILocation(line: 3212, column: 43, scope: !14505)
!14514 = !DILocation(line: 3213, column: 50, scope: !14505)
!14515 = !DILocation(line: 3213, column: 7, scope: !14505)
!14516 = !DILocalVariable(name: "t", scope: !14505, file: !3, line: 3214, type: !1686)
!14517 = !DILocation(line: 3214, column: 8, scope: !14505)
!14518 = !DILocation(line: 3214, column: 13, scope: !14505)
!14519 = !DILocation(line: 3214, column: 12, scope: !14505)
!14520 = !DILocation(line: 3217, column: 7, scope: !14521)
!14521 = distinct !DILexicalBlock(scope: !14505, file: !3, line: 3217, column: 7)
!14522 = !DILocation(line: 3217, column: 13, scope: !14521)
!14523 = !DILocation(line: 3217, column: 30, scope: !14521)
!14524 = !DILocation(line: 3217, column: 27, scope: !14521)
!14525 = !DILocation(line: 3217, column: 7, scope: !14505)
!14526 = !DILocation(line: 3218, column: 12, scope: !14521)
!14527 = !DILocation(line: 3218, column: 5, scope: !14521)
!14528 = !DILocation(line: 3223, column: 7, scope: !14529)
!14529 = distinct !DILexicalBlock(scope: !14505, file: !3, line: 3223, column: 7)
!14530 = !DILocation(line: 3223, column: 21, scope: !14529)
!14531 = !DILocation(line: 3224, column: 7, scope: !14529)
!14532 = !DILocation(line: 3224, column: 12, scope: !14529)
!14533 = !DILocation(line: 3224, column: 18, scope: !14529)
!14534 = !DILocation(line: 3224, column: 32, scope: !14529)
!14535 = !DILocation(line: 3224, column: 35, scope: !14529)
!14536 = !DILocation(line: 3225, column: 7, scope: !14529)
!14537 = !DILocation(line: 3225, column: 33, scope: !14529)
!14538 = !DILocation(line: 3225, column: 39, scope: !14529)
!14539 = !DILocation(line: 3225, column: 69, scope: !14529)
!14540 = !DILocation(line: 3225, column: 54, scope: !14529)
!14541 = !DILocation(line: 3225, column: 10, scope: !14529)
!14542 = !DILocation(line: 3223, column: 7, scope: !14505)
!14543 = !DILocation(line: 3226, column: 12, scope: !14529)
!14544 = !DILocation(line: 3226, column: 5, scope: !14529)
!14545 = !DILocation(line: 3230, column: 7, scope: !14546)
!14546 = distinct !DILexicalBlock(scope: !14505, file: !3, line: 3230, column: 7)
!14547 = !DILocation(line: 3230, column: 21, scope: !14546)
!14548 = !DILocation(line: 3230, column: 7, scope: !14505)
!14549 = !DILocalVariable(name: "type", scope: !14550, file: !3, line: 3232, type: !1686)
!14550 = distinct !DILexicalBlock(scope: !14546, file: !3, line: 3231, column: 5)
!14551 = !DILocation(line: 3232, column: 12, scope: !14550)
!14552 = !DILocalVariable(name: "fntype", scope: !14550, file: !3, line: 3232, type: !1686)
!14553 = !DILocation(line: 3232, column: 18, scope: !14550)
!14554 = !DILocation(line: 3232, column: 27, scope: !14550)
!14555 = !DILocation(line: 3234, column: 19, scope: !14556)
!14556 = distinct !DILexicalBlock(scope: !14550, file: !3, line: 3234, column: 7)
!14557 = !DILocation(line: 3234, column: 17, scope: !14556)
!14558 = !DILocation(line: 3234, column: 12, scope: !14556)
!14559 = !DILocation(line: 3234, column: 44, scope: !14560)
!14560 = distinct !DILexicalBlock(scope: !14556, file: !3, line: 3234, column: 7)
!14561 = !DILocation(line: 3234, column: 7, scope: !14556)
!14562 = !DILocation(line: 3235, column: 6, scope: !14563)
!14563 = distinct !DILexicalBlock(scope: !14560, file: !3, line: 3235, column: 6)
!14564 = !DILocation(line: 3236, column: 6, scope: !14563)
!14565 = !DILocation(line: 3236, column: 11, scope: !14563)
!14566 = !DILocation(line: 3236, column: 17, scope: !14563)
!14567 = !DILocation(line: 3236, column: 31, scope: !14563)
!14568 = !DILocation(line: 3236, column: 34, scope: !14563)
!14569 = !DILocation(line: 3237, column: 6, scope: !14563)
!14570 = !DILocation(line: 3237, column: 32, scope: !14563)
!14571 = !DILocation(line: 3237, column: 38, scope: !14563)
!14572 = !DILocation(line: 3239, column: 14, scope: !14563)
!14573 = !DILocation(line: 3238, column: 11, scope: !14563)
!14574 = !DILocation(line: 3237, column: 9, scope: !14563)
!14575 = !DILocation(line: 3235, column: 6, scope: !14560)
!14576 = !DILocation(line: 3240, column: 11, scope: !14563)
!14577 = !DILocation(line: 3240, column: 4, scope: !14563)
!14578 = !DILocation(line: 3239, column: 44, scope: !14563)
!14579 = !DILocation(line: 3234, column: 57, scope: !14560)
!14580 = !DILocation(line: 3234, column: 55, scope: !14560)
!14581 = !DILocation(line: 3234, column: 7, scope: !14560)
!14582 = distinct !{!14582, !14561, !14583}
!14583 = !DILocation(line: 3240, column: 11, scope: !14556)
!14584 = !DILocation(line: 3241, column: 5, scope: !14550)
!14585 = !DILocation(line: 3243, column: 7, scope: !14586)
!14586 = distinct !DILexicalBlock(scope: !14505, file: !3, line: 3243, column: 7)
!14587 = !DILocation(line: 3243, column: 7, scope: !14505)
!14588 = !DILocation(line: 3244, column: 6, scope: !14586)
!14589 = !DILocation(line: 3244, column: 20, scope: !14586)
!14590 = !DILocation(line: 3244, column: 5, scope: !14586)
!14591 = !DILocation(line: 3245, column: 3, scope: !14505)
!14592 = !DILocation(line: 3246, column: 1, scope: !14505)
!14593 = distinct !DISubprogram(name: "zero_sized_field_decl", scope: !3, file: !3, line: 3398, type: !3266, scopeLine: 3399, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!14594 = !DILocalVariable(name: "fdecl", arg: 1, scope: !14593, file: !3, line: 3398, type: !3130)
!14595 = !DILocation(line: 3398, column: 35, scope: !14593)
!14596 = !DILocation(line: 3400, column: 7, scope: !14597)
!14597 = distinct !DILexicalBlock(scope: !14593, file: !3, line: 3400, column: 7)
!14598 = !DILocation(line: 3400, column: 25, scope: !14597)
!14599 = !DILocation(line: 3400, column: 39, scope: !14597)
!14600 = !DILocation(line: 3400, column: 42, scope: !14597)
!14601 = !DILocation(line: 3401, column: 7, scope: !14597)
!14602 = !DILocation(line: 3401, column: 25, scope: !14597)
!14603 = !DILocation(line: 3401, column: 10, scope: !14597)
!14604 = !DILocation(line: 3400, column: 7, scope: !14593)
!14605 = !DILocation(line: 3402, column: 5, scope: !14597)
!14606 = !DILocation(line: 3403, column: 3, scope: !14593)
!14607 = !DILocation(line: 3404, column: 1, scope: !14593)
!14608 = distinct !DISubprogram(name: "gimplify_init_ctor_eval_range", scope: !3, file: !3, line: 3342, type: !14609, scopeLine: 3345, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!14609 = !DISubroutineType(types: !14610)
!14610 = !{null, !1686, !1686, !1686, !1686, !1686, !3489, !1804}
!14611 = !DILocalVariable(name: "object", arg: 1, scope: !14608, file: !3, line: 3342, type: !1686)
!14612 = !DILocation(line: 3342, column: 37, scope: !14608)
!14613 = !DILocalVariable(name: "lower", arg: 2, scope: !14608, file: !3, line: 3342, type: !1686)
!14614 = !DILocation(line: 3342, column: 50, scope: !14608)
!14615 = !DILocalVariable(name: "upper", arg: 3, scope: !14608, file: !3, line: 3342, type: !1686)
!14616 = !DILocation(line: 3342, column: 62, scope: !14608)
!14617 = !DILocalVariable(name: "value", arg: 4, scope: !14608, file: !3, line: 3343, type: !1686)
!14618 = !DILocation(line: 3343, column: 16, scope: !14608)
!14619 = !DILocalVariable(name: "array_elt_type", arg: 5, scope: !14608, file: !3, line: 3343, type: !1686)
!14620 = !DILocation(line: 3343, column: 28, scope: !14608)
!14621 = !DILocalVariable(name: "pre_p", arg: 6, scope: !14608, file: !3, line: 3344, type: !3489)
!14622 = !DILocation(line: 3344, column: 23, scope: !14608)
!14623 = !DILocalVariable(name: "cleared", arg: 7, scope: !14608, file: !3, line: 3344, type: !1804)
!14624 = !DILocation(line: 3344, column: 35, scope: !14608)
!14625 = !DILocalVariable(name: "loop_entry_label", scope: !14608, file: !3, line: 3346, type: !1686)
!14626 = !DILocation(line: 3346, column: 8, scope: !14608)
!14627 = !DILocalVariable(name: "loop_exit_label", scope: !14608, file: !3, line: 3346, type: !1686)
!14628 = !DILocation(line: 3346, column: 26, scope: !14608)
!14629 = !DILocalVariable(name: "fall_thru_label", scope: !14608, file: !3, line: 3346, type: !1686)
!14630 = !DILocation(line: 3346, column: 43, scope: !14608)
!14631 = !DILocalVariable(name: "var", scope: !14608, file: !3, line: 3347, type: !1686)
!14632 = !DILocation(line: 3347, column: 8, scope: !14608)
!14633 = !DILocalVariable(name: "var_type", scope: !14608, file: !3, line: 3347, type: !1686)
!14634 = !DILocation(line: 3347, column: 13, scope: !14608)
!14635 = !DILocalVariable(name: "cref", scope: !14608, file: !3, line: 3347, type: !1686)
!14636 = !DILocation(line: 3347, column: 23, scope: !14608)
!14637 = !DILocalVariable(name: "tmp", scope: !14608, file: !3, line: 3347, type: !1686)
!14638 = !DILocation(line: 3347, column: 29, scope: !14608)
!14639 = !DILocation(line: 3349, column: 22, scope: !14608)
!14640 = !DILocation(line: 3349, column: 20, scope: !14608)
!14641 = !DILocation(line: 3350, column: 21, scope: !14608)
!14642 = !DILocation(line: 3350, column: 19, scope: !14608)
!14643 = !DILocation(line: 3351, column: 21, scope: !14608)
!14644 = !DILocation(line: 3351, column: 19, scope: !14608)
!14645 = !DILocation(line: 3354, column: 14, scope: !14608)
!14646 = !DILocation(line: 3354, column: 12, scope: !14608)
!14647 = !DILocation(line: 3355, column: 25, scope: !14608)
!14648 = !DILocation(line: 3355, column: 9, scope: !14608)
!14649 = !DILocation(line: 3355, column: 7, scope: !14608)
!14650 = !DILocation(line: 3356, column: 26, scope: !14608)
!14651 = !DILocation(line: 3356, column: 33, scope: !14608)
!14652 = !DILocation(line: 3356, column: 3, scope: !14608)
!14653 = !DILocation(line: 3359, column: 26, scope: !14608)
!14654 = !DILocation(line: 3359, column: 53, scope: !14608)
!14655 = !DILocation(line: 3359, column: 33, scope: !14608)
!14656 = !DILocation(line: 3359, column: 3, scope: !14608)
!14657 = !DILocation(line: 3362, column: 10, scope: !14608)
!14658 = !DILocation(line: 3362, column: 8, scope: !14608)
!14659 = !DILocation(line: 3368, column: 7, scope: !14660)
!14660 = distinct !DILexicalBlock(scope: !14608, file: !3, line: 3368, column: 7)
!14661 = !DILocation(line: 3368, column: 25, scope: !14660)
!14662 = !DILocation(line: 3368, column: 7, scope: !14608)
!14663 = !DILocation(line: 3371, column: 30, scope: !14660)
!14664 = !DILocation(line: 3371, column: 36, scope: !14660)
!14665 = !DILocation(line: 3372, column: 9, scope: !14660)
!14666 = !DILocation(line: 3372, column: 16, scope: !14660)
!14667 = !DILocation(line: 3371, column: 5, scope: !14660)
!14668 = !DILocation(line: 3374, column: 28, scope: !14660)
!14669 = !DILocation(line: 3374, column: 35, scope: !14660)
!14670 = !DILocation(line: 3374, column: 5, scope: !14660)
!14671 = !DILocation(line: 3377, column: 26, scope: !14608)
!14672 = !DILocation(line: 3378, column: 33, scope: !14608)
!14673 = !DILocation(line: 3378, column: 38, scope: !14608)
!14674 = !DILocation(line: 3379, column: 10, scope: !14608)
!14675 = !DILocation(line: 3379, column: 27, scope: !14608)
!14676 = !DILocation(line: 3378, column: 5, scope: !14608)
!14677 = !DILocation(line: 3377, column: 3, scope: !14608)
!14678 = !DILocation(line: 3381, column: 26, scope: !14608)
!14679 = !DILocation(line: 3381, column: 53, scope: !14608)
!14680 = !DILocation(line: 3381, column: 33, scope: !14608)
!14681 = !DILocation(line: 3381, column: 3, scope: !14608)
!14682 = !DILocation(line: 3384, column: 9, scope: !14608)
!14683 = !DILocation(line: 3384, column: 7, scope: !14608)
!14684 = !DILocation(line: 3386, column: 26, scope: !14608)
!14685 = !DILocation(line: 3386, column: 33, scope: !14608)
!14686 = !DILocation(line: 3386, column: 3, scope: !14608)
!14687 = !DILocation(line: 3389, column: 26, scope: !14608)
!14688 = !DILocation(line: 3389, column: 52, scope: !14608)
!14689 = !DILocation(line: 3389, column: 33, scope: !14608)
!14690 = !DILocation(line: 3389, column: 3, scope: !14608)
!14691 = !DILocation(line: 3392, column: 26, scope: !14608)
!14692 = !DILocation(line: 3392, column: 53, scope: !14608)
!14693 = !DILocation(line: 3392, column: 33, scope: !14608)
!14694 = !DILocation(line: 3392, column: 3, scope: !14608)
!14695 = !DILocation(line: 3393, column: 1, scope: !14608)
!14696 = distinct !DISubprogram(name: "prepare_gimple_addressable", scope: !3, file: !3, line: 3094, type: !9762, scopeLine: 3095, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!14697 = !DILocalVariable(name: "expr_p", arg: 1, scope: !14696, file: !3, line: 3094, type: !2049)
!14698 = !DILocation(line: 3094, column: 35, scope: !14696)
!14699 = !DILocalVariable(name: "seq_p", arg: 2, scope: !14696, file: !3, line: 3094, type: !3489)
!14700 = !DILocation(line: 3094, column: 55, scope: !14696)
!14701 = !DILocation(line: 3096, column: 3, scope: !14696)
!14702 = !DILocation(line: 3096, column: 32, scope: !14696)
!14703 = !DILocation(line: 3096, column: 31, scope: !14696)
!14704 = !DILocation(line: 3096, column: 10, scope: !14696)
!14705 = !DILocation(line: 3097, column: 15, scope: !14696)
!14706 = !DILocation(line: 3097, column: 12, scope: !14696)
!14707 = distinct !{!14707, !14701, !14705}
!14708 = !DILocation(line: 3098, column: 23, scope: !14709)
!14709 = distinct !DILexicalBlock(scope: !14696, file: !3, line: 3098, column: 7)
!14710 = !DILocation(line: 3098, column: 22, scope: !14709)
!14711 = !DILocation(line: 3098, column: 7, scope: !14709)
!14712 = !DILocation(line: 3098, column: 7, scope: !14696)
!14713 = !DILocation(line: 3099, column: 41, scope: !14709)
!14714 = !DILocation(line: 3099, column: 40, scope: !14709)
!14715 = !DILocation(line: 3099, column: 49, scope: !14709)
!14716 = !DILocation(line: 3099, column: 15, scope: !14709)
!14717 = !DILocation(line: 3099, column: 6, scope: !14709)
!14718 = !DILocation(line: 3099, column: 13, scope: !14709)
!14719 = !DILocation(line: 3099, column: 5, scope: !14709)
!14720 = !DILocation(line: 3100, column: 1, scope: !14696)
!14721 = distinct !DISubprogram(name: "canonicalize_addr_expr", scope: !3, file: !3, line: 1701, type: !12358, scopeLine: 1702, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!14722 = !DILocalVariable(name: "expr_p", arg: 1, scope: !14721, file: !3, line: 1701, type: !2049)
!14723 = !DILocation(line: 1701, column: 31, scope: !14721)
!14724 = !DILocalVariable(name: "expr", scope: !14721, file: !3, line: 1703, type: !1686)
!14725 = !DILocation(line: 1703, column: 8, scope: !14721)
!14726 = !DILocation(line: 1703, column: 16, scope: !14721)
!14727 = !DILocation(line: 1703, column: 15, scope: !14721)
!14728 = !DILocalVariable(name: "addr_expr", scope: !14721, file: !3, line: 1704, type: !1686)
!14729 = !DILocation(line: 1704, column: 8, scope: !14721)
!14730 = !DILocation(line: 1704, column: 20, scope: !14721)
!14731 = !DILocalVariable(name: "datype", scope: !14721, file: !3, line: 1705, type: !1686)
!14732 = !DILocation(line: 1705, column: 8, scope: !14721)
!14733 = !DILocalVariable(name: "ddatype", scope: !14721, file: !3, line: 1705, type: !1686)
!14734 = !DILocation(line: 1705, column: 16, scope: !14721)
!14735 = !DILocalVariable(name: "pddatype", scope: !14721, file: !3, line: 1705, type: !1686)
!14736 = !DILocation(line: 1705, column: 25, scope: !14721)
!14737 = !DILocation(line: 1708, column: 8, scope: !14738)
!14738 = distinct !DILexicalBlock(scope: !14721, file: !3, line: 1708, column: 7)
!14739 = !DILocation(line: 1709, column: 7, scope: !14738)
!14740 = !DILocation(line: 1709, column: 10, scope: !14738)
!14741 = !DILocation(line: 1709, column: 32, scope: !14738)
!14742 = !DILocation(line: 1708, column: 7, scope: !14721)
!14743 = !DILocation(line: 1710, column: 5, scope: !14738)
!14744 = !DILocation(line: 1713, column: 12, scope: !14721)
!14745 = !DILocation(line: 1713, column: 10, scope: !14721)
!14746 = !DILocation(line: 1714, column: 7, scope: !14747)
!14747 = distinct !DILexicalBlock(scope: !14721, file: !3, line: 1714, column: 7)
!14748 = !DILocation(line: 1714, column: 26, scope: !14747)
!14749 = !DILocation(line: 1714, column: 7, scope: !14721)
!14750 = !DILocation(line: 1715, column: 5, scope: !14747)
!14751 = !DILocation(line: 1719, column: 13, scope: !14721)
!14752 = !DILocation(line: 1719, column: 11, scope: !14721)
!14753 = !DILocation(line: 1720, column: 34, scope: !14721)
!14754 = !DILocation(line: 1720, column: 14, scope: !14721)
!14755 = !DILocation(line: 1720, column: 12, scope: !14721)
!14756 = !DILocation(line: 1721, column: 35, scope: !14757)
!14757 = distinct !DILexicalBlock(scope: !14721, file: !3, line: 1721, column: 7)
!14758 = !DILocation(line: 1722, column: 7, scope: !14757)
!14759 = !DILocation(line: 1721, column: 8, scope: !14757)
!14760 = !DILocation(line: 1721, column: 7, scope: !14721)
!14761 = !DILocation(line: 1723, column: 5, scope: !14757)
!14762 = !DILocation(line: 1726, column: 8, scope: !14763)
!14763 = distinct !DILexicalBlock(scope: !14721, file: !3, line: 1726, column: 7)
!14764 = !DILocation(line: 1727, column: 7, scope: !14763)
!14765 = !DILocation(line: 1727, column: 10, scope: !14763)
!14766 = !DILocation(line: 1727, column: 47, scope: !14763)
!14767 = !DILocation(line: 1728, column: 7, scope: !14763)
!14768 = !DILocation(line: 1728, column: 11, scope: !14763)
!14769 = !DILocation(line: 1728, column: 32, scope: !14763)
!14770 = !DILocation(line: 1728, column: 36, scope: !14763)
!14771 = !DILocation(line: 1729, column: 7, scope: !14763)
!14772 = !DILocation(line: 1729, column: 10, scope: !14763)
!14773 = !DILocation(line: 1729, column: 60, scope: !14763)
!14774 = !DILocation(line: 1726, column: 7, scope: !14721)
!14775 = !DILocation(line: 1730, column: 5, scope: !14763)
!14776 = !DILocation(line: 1733, column: 13, scope: !14721)
!14777 = !DILocation(line: 1733, column: 4, scope: !14721)
!14778 = !DILocation(line: 1733, column: 11, scope: !14721)
!14779 = !DILocation(line: 1736, column: 13, scope: !14721)
!14780 = !DILocation(line: 1736, column: 4, scope: !14721)
!14781 = !DILocation(line: 1736, column: 11, scope: !14721)
!14782 = !DILocation(line: 1739, column: 35, scope: !14783)
!14783 = distinct !DILexicalBlock(scope: !14721, file: !3, line: 1739, column: 7)
!14784 = !DILocation(line: 1739, column: 53, scope: !14783)
!14785 = !DILocation(line: 1739, column: 8, scope: !14783)
!14786 = !DILocation(line: 1739, column: 7, scope: !14721)
!14787 = !DILocation(line: 1740, column: 15, scope: !14783)
!14788 = !DILocation(line: 1740, column: 6, scope: !14783)
!14789 = !DILocation(line: 1740, column: 13, scope: !14783)
!14790 = !DILocation(line: 1740, column: 5, scope: !14783)
!14791 = !DILocation(line: 1741, column: 1, scope: !14721)
!14792 = distinct !DISubprogram(name: "gimplify_vla_decl", scope: !3, file: !3, line: 1251, type: !3487, scopeLine: 1252, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!14793 = !DILocalVariable(name: "decl", arg: 1, scope: !14792, file: !3, line: 1251, type: !1686)
!14794 = !DILocation(line: 1251, column: 25, scope: !14792)
!14795 = !DILocalVariable(name: "seq_p", arg: 2, scope: !14792, file: !3, line: 1251, type: !3489)
!14796 = !DILocation(line: 1251, column: 43, scope: !14792)
!14797 = !DILocalVariable(name: "t", scope: !14792, file: !3, line: 1256, type: !1686)
!14798 = !DILocation(line: 1256, column: 8, scope: !14792)
!14799 = !DILocalVariable(name: "addr", scope: !14792, file: !3, line: 1256, type: !1686)
!14800 = !DILocation(line: 1256, column: 11, scope: !14792)
!14801 = !DILocalVariable(name: "ptr_type", scope: !14792, file: !3, line: 1256, type: !1686)
!14802 = !DILocation(line: 1256, column: 17, scope: !14792)
!14803 = !DILocation(line: 1258, column: 26, scope: !14792)
!14804 = !DILocation(line: 1258, column: 44, scope: !14792)
!14805 = !DILocation(line: 1258, column: 3, scope: !14792)
!14806 = !DILocation(line: 1259, column: 26, scope: !14792)
!14807 = !DILocation(line: 1259, column: 49, scope: !14792)
!14808 = !DILocation(line: 1259, column: 3, scope: !14792)
!14809 = !DILocation(line: 1266, column: 34, scope: !14792)
!14810 = !DILocation(line: 1266, column: 14, scope: !14792)
!14811 = !DILocation(line: 1266, column: 12, scope: !14792)
!14812 = !DILocation(line: 1267, column: 26, scope: !14792)
!14813 = !DILocation(line: 1267, column: 46, scope: !14792)
!14814 = !DILocation(line: 1267, column: 36, scope: !14792)
!14815 = !DILocation(line: 1267, column: 10, scope: !14792)
!14816 = !DILocation(line: 1267, column: 8, scope: !14792)
!14817 = !DILocation(line: 1268, column: 3, scope: !14792)
!14818 = !DILocation(line: 1268, column: 25, scope: !14792)
!14819 = !DILocation(line: 1269, column: 7, scope: !14792)
!14820 = !DILocation(line: 1269, column: 5, scope: !14792)
!14821 = !DILocation(line: 1270, column: 3, scope: !14792)
!14822 = !DILocation(line: 1271, column: 3, scope: !14792)
!14823 = !DILocation(line: 1271, column: 32, scope: !14792)
!14824 = !DILocation(line: 1273, column: 7, scope: !14792)
!14825 = !DILocation(line: 1273, column: 5, scope: !14792)
!14826 = !DILocation(line: 1274, column: 7, scope: !14792)
!14827 = !DILocation(line: 1274, column: 5, scope: !14792)
!14828 = !DILocation(line: 1275, column: 7, scope: !14792)
!14829 = !DILocation(line: 1275, column: 5, scope: !14792)
!14830 = !DILocation(line: 1276, column: 7, scope: !14792)
!14831 = !DILocation(line: 1276, column: 5, scope: !14792)
!14832 = !DILocation(line: 1278, column: 21, scope: !14792)
!14833 = !DILocation(line: 1278, column: 24, scope: !14792)
!14834 = !DILocation(line: 1278, column: 3, scope: !14792)
!14835 = !DILocation(line: 1282, column: 3, scope: !14792)
!14836 = !DILocation(line: 1282, column: 18, scope: !14792)
!14837 = !DILocation(line: 1282, column: 29, scope: !14792)
!14838 = !DILocation(line: 1283, column: 1, scope: !14792)
!14839 = distinct !DISubprogram(name: "is_global_var", scope: !11661, file: !11661, line: 575, type: !3266, scopeLine: 576, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!14840 = !DILocalVariable(name: "t", arg: 1, scope: !14839, file: !11661, line: 575, type: !3130)
!14841 = !DILocation(line: 575, column: 27, scope: !14839)
!14842 = !DILocation(line: 577, column: 11, scope: !14839)
!14843 = !DILocation(line: 577, column: 27, scope: !14839)
!14844 = !DILocation(line: 577, column: 30, scope: !14839)
!14845 = !DILocation(line: 577, column: 10, scope: !14839)
!14846 = !DILocation(line: 577, column: 3, scope: !14839)
!14847 = distinct !DISubprogram(name: "gimple_push_bind_expr", scope: !3, file: !3, line: 234, type: !3291, scopeLine: 235, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!14848 = !DILocalVariable(name: "gimple_bind", arg: 1, scope: !14847, file: !3, line: 234, type: !2014)
!14849 = !DILocation(line: 234, column: 31, scope: !14847)
!14850 = !DILocation(line: 236, column: 7, scope: !14851)
!14851 = distinct !DILexicalBlock(scope: !14847, file: !3, line: 236, column: 7)
!14852 = !DILocation(line: 236, column: 22, scope: !14851)
!14853 = !DILocation(line: 236, column: 38, scope: !14851)
!14854 = !DILocation(line: 236, column: 7, scope: !14847)
!14855 = !DILocation(line: 237, column: 38, scope: !14851)
!14856 = !DILocation(line: 237, column: 5, scope: !14851)
!14857 = !DILocation(line: 237, column: 20, scope: !14851)
!14858 = !DILocation(line: 237, column: 36, scope: !14851)
!14859 = !DILocation(line: 238, column: 3, scope: !14847)
!14860 = !DILocation(line: 239, column: 1, scope: !14847)
!14861 = distinct !DISubprogram(name: "build_stack_save_restore", scope: !3, file: !3, line: 1058, type: !14862, scopeLine: 1059, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!14862 = !DISubroutineType(types: !14863)
!14863 = !{null, !10880, !10880}
!14864 = !DILocalVariable(name: "save", arg: 1, scope: !14861, file: !3, line: 1058, type: !10880)
!14865 = !DILocation(line: 1058, column: 35, scope: !14861)
!14866 = !DILocalVariable(name: "restore", arg: 2, scope: !14861, file: !3, line: 1058, type: !10880)
!14867 = !DILocation(line: 1058, column: 49, scope: !14861)
!14868 = !DILocalVariable(name: "tmp_var", scope: !14861, file: !3, line: 1060, type: !1686)
!14869 = !DILocation(line: 1060, column: 8, scope: !14861)
!14870 = !DILocation(line: 1062, column: 30, scope: !14861)
!14871 = !DILocation(line: 1062, column: 11, scope: !14861)
!14872 = !DILocation(line: 1062, column: 4, scope: !14861)
!14873 = !DILocation(line: 1062, column: 9, scope: !14861)
!14874 = !DILocation(line: 1063, column: 29, scope: !14861)
!14875 = !DILocation(line: 1063, column: 13, scope: !14861)
!14876 = !DILocation(line: 1063, column: 11, scope: !14861)
!14877 = !DILocation(line: 1064, column: 25, scope: !14861)
!14878 = !DILocation(line: 1064, column: 24, scope: !14861)
!14879 = !DILocation(line: 1064, column: 31, scope: !14861)
!14880 = !DILocation(line: 1064, column: 3, scope: !14861)
!14881 = !DILocation(line: 1066, column: 33, scope: !14861)
!14882 = !DILocation(line: 1067, column: 11, scope: !14861)
!14883 = !DILocation(line: 1066, column: 14, scope: !14861)
!14884 = !DILocation(line: 1066, column: 4, scope: !14861)
!14885 = !DILocation(line: 1066, column: 12, scope: !14861)
!14886 = !DILocation(line: 1068, column: 1, scope: !14861)
!14887 = distinct !DISubprogram(name: "gimple_pop_bind_expr", scope: !3, file: !3, line: 242, type: !10846, scopeLine: 243, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!14888 = !DILocation(line: 244, column: 3, scope: !14887)
!14889 = !DILocation(line: 245, column: 1, scope: !14887)
!14890 = distinct !DISubprogram(name: "VEC_gimple_heap_alloc", scope: !385, file: !385, line: 34, type: !14891, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!14891 = !DISubroutineType(types: !14892)
!14892 = !{!3141, !1330}
!14893 = !DILocalVariable(name: "alloc_", arg: 1, scope: !14890, file: !385, line: 34, type: !1330)
!14894 = !DILocation(line: 34, column: 1, scope: !14890)
!14895 = distinct !DISubprogram(name: "VEC_gimple_heap_safe_push", scope: !385, file: !385, line: 34, type: !14896, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!14896 = !DISubroutineType(types: !14897)
!14897 = !{!10880, !3331, !2014}
!14898 = !DILocalVariable(name: "vec_", arg: 1, scope: !14895, file: !385, line: 34, type: !3331)
!14899 = !DILocation(line: 34, column: 1, scope: !14895)
!14900 = !DILocalVariable(name: "obj_", arg: 2, scope: !14895, file: !385, line: 34, type: !2014)
!14901 = distinct !DISubprogram(name: "VEC_gimple_heap_reserve", scope: !385, file: !385, line: 34, type: !14902, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!14902 = !DISubroutineType(types: !14903)
!14903 = !{!1330, !3331, !1330}
!14904 = !DILocalVariable(name: "vec_", arg: 1, scope: !14901, file: !385, line: 34, type: !3331)
!14905 = !DILocation(line: 34, column: 1, scope: !14901)
!14906 = !DILocalVariable(name: "alloc_", arg: 2, scope: !14901, file: !385, line: 34, type: !1330)
!14907 = !DILocalVariable(name: "extend", scope: !14901, file: !385, line: 34, type: !1330)
!14908 = !DILocation(line: 34, column: 1, scope: !14909)
!14909 = distinct !DILexicalBlock(scope: !14901, file: !385, line: 34, column: 1)
!14910 = distinct !DISubprogram(name: "VEC_gimple_base_quick_push", scope: !385, file: !385, line: 33, type: !14911, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!14911 = !DISubroutineType(types: !14912)
!14912 = !{!10880, !14913, !2014}
!14913 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2641, size: 64)
!14914 = !DILocalVariable(name: "vec_", arg: 1, scope: !14910, file: !385, line: 33, type: !14913)
!14915 = !DILocation(line: 33, column: 1, scope: !14910)
!14916 = !DILocalVariable(name: "obj_", arg: 2, scope: !14910, file: !385, line: 33, type: !2014)
!14917 = !DILocalVariable(name: "slot_", scope: !14910, file: !385, line: 33, type: !10880)
!14918 = distinct !DISubprogram(name: "VEC_gimple_base_space", scope: !385, file: !385, line: 33, type: !14919, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!14919 = !DISubroutineType(types: !14920)
!14920 = !{!1330, !14913, !1330}
!14921 = !DILocalVariable(name: "vec_", arg: 1, scope: !14918, file: !385, line: 33, type: !14913)
!14922 = !DILocation(line: 33, column: 1, scope: !14918)
!14923 = !DILocalVariable(name: "alloc_", arg: 2, scope: !14918, file: !385, line: 33, type: !1330)
!14924 = distinct !DISubprogram(name: "VEC_gimple_base_pop", scope: !385, file: !385, line: 33, type: !14925, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!14925 = !DISubroutineType(types: !14926)
!14926 = !{!2014, !14913}
!14927 = !DILocalVariable(name: "vec_", arg: 1, scope: !14924, file: !385, line: 33, type: !14913)
!14928 = !DILocation(line: 33, column: 1, scope: !14924)
!14929 = !DILocalVariable(name: "obj_", scope: !14924, file: !385, line: 33, type: !2014)
!14930 = distinct !DISubprogram(name: "VEC_tree_base_ordered_remove", scope: !135, file: !135, line: 182, type: !14931, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!14931 = !DISubroutineType(types: !14932)
!14932 = !{!1686, !4379, !7}
!14933 = !DILocalVariable(name: "vec_", arg: 1, scope: !14930, file: !135, line: 182, type: !4379)
!14934 = !DILocation(line: 182, column: 1, scope: !14930)
!14935 = !DILocalVariable(name: "ix_", arg: 2, scope: !14930, file: !135, line: 182, type: !7)
!14936 = !DILocalVariable(name: "slot_", scope: !14930, file: !135, line: 182, type: !2049)
!14937 = !DILocalVariable(name: "obj_", scope: !14930, file: !135, line: 182, type: !1686)
!14938 = distinct !DISubprogram(name: "VEC_tree_gc_safe_push", scope: !135, file: !135, line: 183, type: !14939, scopeLine: 183, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!14939 = !DISubroutineType(types: !14940)
!14940 = !{!2049, !14941, !1686}
!14941 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2568, size: 64)
!14942 = !DILocalVariable(name: "vec_", arg: 1, scope: !14938, file: !135, line: 183, type: !14941)
!14943 = !DILocation(line: 183, column: 1, scope: !14938)
!14944 = !DILocalVariable(name: "obj_", arg: 2, scope: !14938, file: !135, line: 183, type: !1686)
!14945 = distinct !DISubprogram(name: "gimple_asm_set_volatile", scope: !385, file: !385, line: 2749, type: !9073, scopeLine: 2750, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!14946 = !DILocalVariable(name: "gs", arg: 1, scope: !14945, file: !385, line: 2749, type: !2014)
!14947 = !DILocation(line: 2749, column: 33, scope: !14945)
!14948 = !DILocalVariable(name: "volatile_p", arg: 2, scope: !14945, file: !385, line: 2749, type: !1804)
!14949 = !DILocation(line: 2749, column: 42, scope: !14945)
!14950 = !DILocation(line: 2752, column: 7, scope: !14951)
!14951 = distinct !DILexicalBlock(scope: !14945, file: !385, line: 2752, column: 7)
!14952 = !DILocation(line: 2752, column: 7, scope: !14945)
!14953 = !DILocation(line: 2753, column: 5, scope: !14951)
!14954 = !DILocation(line: 2753, column: 9, scope: !14951)
!14955 = !DILocation(line: 2753, column: 16, scope: !14951)
!14956 = !DILocation(line: 2753, column: 24, scope: !14951)
!14957 = !DILocation(line: 2755, column: 5, scope: !14951)
!14958 = !DILocation(line: 2755, column: 9, scope: !14951)
!14959 = !DILocation(line: 2755, column: 16, scope: !14951)
!14960 = !DILocation(line: 2755, column: 24, scope: !14951)
!14961 = !DILocation(line: 2756, column: 1, scope: !14945)
!14962 = distinct !DISubprogram(name: "gimple_asm_set_input", scope: !385, file: !385, line: 2762, type: !9073, scopeLine: 2763, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!14963 = !DILocalVariable(name: "gs", arg: 1, scope: !14962, file: !385, line: 2762, type: !2014)
!14964 = !DILocation(line: 2762, column: 30, scope: !14962)
!14965 = !DILocalVariable(name: "input_p", arg: 2, scope: !14962, file: !385, line: 2762, type: !1804)
!14966 = !DILocation(line: 2762, column: 39, scope: !14962)
!14967 = !DILocation(line: 2765, column: 7, scope: !14968)
!14968 = distinct !DILexicalBlock(scope: !14962, file: !385, line: 2765, column: 7)
!14969 = !DILocation(line: 2765, column: 7, scope: !14962)
!14970 = !DILocation(line: 2766, column: 5, scope: !14968)
!14971 = !DILocation(line: 2766, column: 9, scope: !14968)
!14972 = !DILocation(line: 2766, column: 16, scope: !14968)
!14973 = !DILocation(line: 2766, column: 24, scope: !14968)
!14974 = !DILocation(line: 2768, column: 5, scope: !14968)
!14975 = !DILocation(line: 2768, column: 9, scope: !14968)
!14976 = !DILocation(line: 2768, column: 16, scope: !14968)
!14977 = !DILocation(line: 2768, column: 24, scope: !14968)
!14978 = !DILocation(line: 2769, column: 1, scope: !14962)
!14979 = distinct !DISubprogram(name: "VEC_tree_gc_reserve", scope: !135, file: !135, line: 183, type: !14980, scopeLine: 183, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!14980 = !DISubroutineType(types: !14981)
!14981 = !{!1330, !14941, !1330}
!14982 = !DILocalVariable(name: "vec_", arg: 1, scope: !14979, file: !135, line: 183, type: !14941)
!14983 = !DILocation(line: 183, column: 1, scope: !14979)
!14984 = !DILocalVariable(name: "alloc_", arg: 2, scope: !14979, file: !135, line: 183, type: !1330)
!14985 = !DILocalVariable(name: "extend", scope: !14979, file: !135, line: 183, type: !1330)
!14986 = !DILocation(line: 183, column: 1, scope: !14987)
!14987 = distinct !DILexicalBlock(scope: !14979, file: !135, line: 183, column: 1)
!14988 = distinct !DISubprogram(name: "gimple_try_kind", scope: !385, file: !385, line: 2921, type: !14989, scopeLine: 2922, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!14989 = !DISubroutineType(types: !14990)
!14990 = !{!1372, !3806}
!14991 = !DILocalVariable(name: "gs", arg: 1, scope: !14988, file: !385, line: 2921, type: !3806)
!14992 = !DILocation(line: 2921, column: 31, scope: !14988)
!14993 = !DILocation(line: 2924, column: 35, scope: !14988)
!14994 = !DILocation(line: 2924, column: 39, scope: !14988)
!14995 = !DILocation(line: 2924, column: 46, scope: !14988)
!14996 = !DILocation(line: 2924, column: 54, scope: !14988)
!14997 = !DILocation(line: 2924, column: 3, scope: !14988)
!14998 = distinct !DISubprogram(name: "gsi_one_before_end_p", scope: !385, file: !385, line: 4476, type: !4106, scopeLine: 4477, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!14999 = !DILocalVariable(name: "i", arg: 1, scope: !14998, file: !385, line: 4476, type: !4033)
!15000 = !DILocation(line: 4476, column: 44, scope: !14998)
!15001 = !DILocation(line: 4478, column: 12, scope: !14998)
!15002 = !DILocation(line: 4478, column: 16, scope: !14998)
!15003 = !DILocation(line: 4478, column: 24, scope: !14998)
!15004 = !DILocation(line: 4478, column: 29, scope: !14998)
!15005 = !DILocation(line: 4478, column: 34, scope: !14998)
!15006 = !DILocation(line: 4478, column: 39, scope: !14998)
!15007 = !DILocation(line: 0, scope: !14998)
!15008 = !DILocation(line: 4478, column: 10, scope: !14998)
!15009 = !DILocation(line: 4478, column: 3, scope: !14998)
!15010 = distinct !DISubprogram(name: "gimple_wce_cleanup", scope: !385, file: !385, line: 3009, type: !11060, scopeLine: 3010, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!15011 = !DILocalVariable(name: "gs", arg: 1, scope: !15010, file: !385, line: 3009, type: !2014)
!15012 = !DILocation(line: 3009, column: 28, scope: !15010)
!15013 = !DILocation(line: 3012, column: 10, scope: !15010)
!15014 = !DILocation(line: 3012, column: 14, scope: !15010)
!15015 = !DILocation(line: 3012, column: 25, scope: !15010)
!15016 = !DILocation(line: 3012, column: 3, scope: !15010)
!15017 = distinct !DISubprogram(name: "gimple_wce_cleanup_eh_only", scope: !385, file: !385, line: 3029, type: !11773, scopeLine: 3030, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!15018 = !DILocalVariable(name: "gs", arg: 1, scope: !15017, file: !385, line: 3029, type: !3806)
!15019 = !DILocation(line: 3029, column: 42, scope: !15017)
!15020 = !DILocation(line: 3032, column: 10, scope: !15017)
!15021 = !DILocation(line: 3032, column: 14, scope: !15017)
!15022 = !DILocation(line: 3032, column: 21, scope: !15017)
!15023 = !DILocation(line: 3032, column: 29, scope: !15017)
!15024 = !DILocation(line: 3032, column: 3, scope: !15017)
!15025 = distinct !DISubprogram(name: "gsi_stmt_ptr", scope: !385, file: !385, line: 4579, type: !15026, scopeLine: 4580, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!15026 = !DISubroutineType(types: !15027)
!15027 = !{!10880, !4146}
!15028 = !DILocalVariable(name: "i", arg: 1, scope: !15025, file: !385, line: 4579, type: !4146)
!15029 = !DILocation(line: 4579, column: 37, scope: !15025)
!15030 = !DILocation(line: 4581, column: 11, scope: !15025)
!15031 = !DILocation(line: 4581, column: 14, scope: !15025)
!15032 = !DILocation(line: 4581, column: 19, scope: !15025)
!15033 = !DILocation(line: 4581, column: 3, scope: !15025)
!15034 = distinct !DISubprogram(name: "gimple_push_cleanup", scope: !3, file: !3, line: 5133, type: !15035, scopeLine: 5134, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!15035 = !DISubroutineType(types: !15036)
!15036 = !{null, !1686, !1686, !1804, !3489}
!15037 = !DILocalVariable(name: "var", arg: 1, scope: !15034, file: !3, line: 5133, type: !1686)
!15038 = !DILocation(line: 5133, column: 27, scope: !15034)
!15039 = !DILocalVariable(name: "cleanup", arg: 2, scope: !15034, file: !3, line: 5133, type: !1686)
!15040 = !DILocation(line: 5133, column: 37, scope: !15034)
!15041 = !DILocalVariable(name: "eh_only", arg: 3, scope: !15034, file: !3, line: 5133, type: !1804)
!15042 = !DILocation(line: 5133, column: 51, scope: !15034)
!15043 = !DILocalVariable(name: "pre_p", arg: 4, scope: !15034, file: !3, line: 5133, type: !3489)
!15044 = !DILocation(line: 5133, column: 72, scope: !15034)
!15045 = !DILocalVariable(name: "wce", scope: !15034, file: !3, line: 5135, type: !2014)
!15046 = !DILocation(line: 5135, column: 10, scope: !15034)
!15047 = !DILocalVariable(name: "cleanup_stmts", scope: !15034, file: !3, line: 5136, type: !2004)
!15048 = !DILocation(line: 5136, column: 14, scope: !15034)
!15049 = !DILocation(line: 5140, column: 7, scope: !15050)
!15050 = distinct !DILexicalBlock(scope: !15034, file: !3, line: 5140, column: 7)
!15051 = !DILocation(line: 5140, column: 18, scope: !15050)
!15052 = !DILocation(line: 5140, column: 21, scope: !15050)
!15053 = !DILocation(line: 5140, column: 7, scope: !15034)
!15054 = !DILocation(line: 5141, column: 5, scope: !15050)
!15055 = !DILocation(line: 5143, column: 7, scope: !15056)
!15056 = distinct !DILexicalBlock(scope: !15034, file: !3, line: 5143, column: 7)
!15057 = !DILocation(line: 5143, column: 7, scope: !15034)
!15058 = !DILocalVariable(name: "flag", scope: !15059, file: !3, line: 5165, type: !1686)
!15059 = distinct !DILexicalBlock(scope: !15056, file: !3, line: 5144, column: 5)
!15060 = !DILocation(line: 5165, column: 12, scope: !15059)
!15061 = !DILocation(line: 5165, column: 35, scope: !15059)
!15062 = !DILocation(line: 5165, column: 19, scope: !15059)
!15063 = !DILocalVariable(name: "ffalse", scope: !15059, file: !3, line: 5166, type: !2014)
!15064 = !DILocation(line: 5166, column: 14, scope: !15059)
!15065 = !DILocation(line: 5166, column: 23, scope: !15059)
!15066 = !DILocalVariable(name: "ftrue", scope: !15059, file: !3, line: 5167, type: !2014)
!15067 = !DILocation(line: 5167, column: 14, scope: !15059)
!15068 = !DILocation(line: 5167, column: 22, scope: !15059)
!15069 = !DILocation(line: 5169, column: 17, scope: !15059)
!15070 = !DILocation(line: 5169, column: 15, scope: !15059)
!15071 = !DILocation(line: 5170, column: 7, scope: !15059)
!15072 = !DILocation(line: 5171, column: 31, scope: !15059)
!15073 = !DILocation(line: 5171, column: 13, scope: !15059)
!15074 = !DILocation(line: 5171, column: 11, scope: !15059)
!15075 = !DILocation(line: 5173, column: 31, scope: !15059)
!15076 = !DILocation(line: 5173, column: 46, scope: !15059)
!15077 = !DILocation(line: 5173, column: 68, scope: !15059)
!15078 = !DILocation(line: 5173, column: 7, scope: !15059)
!15079 = !DILocation(line: 5174, column: 31, scope: !15059)
!15080 = !DILocation(line: 5174, column: 46, scope: !15059)
!15081 = !DILocation(line: 5174, column: 68, scope: !15059)
!15082 = !DILocation(line: 5174, column: 7, scope: !15059)
!15083 = !DILocation(line: 5175, column: 30, scope: !15059)
!15084 = !DILocation(line: 5175, column: 37, scope: !15059)
!15085 = !DILocation(line: 5175, column: 7, scope: !15059)
!15086 = !DILocation(line: 5180, column: 7, scope: !15059)
!15087 = !DILocation(line: 5180, column: 29, scope: !15059)
!15088 = !DILocation(line: 5181, column: 5, scope: !15059)
!15089 = !DILocation(line: 5184, column: 7, scope: !15090)
!15090 = distinct !DILexicalBlock(scope: !15056, file: !3, line: 5183, column: 5)
!15091 = !DILocation(line: 5185, column: 31, scope: !15090)
!15092 = !DILocation(line: 5185, column: 13, scope: !15090)
!15093 = !DILocation(line: 5185, column: 11, scope: !15090)
!15094 = !DILocation(line: 5186, column: 39, scope: !15090)
!15095 = !DILocation(line: 5186, column: 44, scope: !15090)
!15096 = !DILocation(line: 5186, column: 7, scope: !15090)
!15097 = !DILocation(line: 5187, column: 30, scope: !15090)
!15098 = !DILocation(line: 5187, column: 37, scope: !15090)
!15099 = !DILocation(line: 5187, column: 7, scope: !15090)
!15100 = !DILocation(line: 5189, column: 1, scope: !15034)
!15101 = distinct !DISubprogram(name: "gimple_conditional_context", scope: !3, file: !3, line: 265, type: !10827, scopeLine: 266, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!15102 = !DILocation(line: 267, column: 10, scope: !15101)
!15103 = !DILocation(line: 267, column: 25, scope: !15101)
!15104 = !DILocation(line: 267, column: 36, scope: !15101)
!15105 = !DILocation(line: 267, column: 3, scope: !15101)
!15106 = distinct !DISubprogram(name: "gimple_wce_set_cleanup_eh_only", scope: !385, file: !385, line: 3039, type: !9073, scopeLine: 3040, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!15107 = !DILocalVariable(name: "gs", arg: 1, scope: !15106, file: !385, line: 3039, type: !2014)
!15108 = !DILocation(line: 3039, column: 40, scope: !15106)
!15109 = !DILocalVariable(name: "eh_only_p", arg: 2, scope: !15106, file: !385, line: 3039, type: !1804)
!15110 = !DILocation(line: 3039, column: 49, scope: !15106)
!15111 = !DILocation(line: 3042, column: 39, scope: !15106)
!15112 = !DILocation(line: 3042, column: 24, scope: !15106)
!15113 = !DILocation(line: 3042, column: 3, scope: !15106)
!15114 = !DILocation(line: 3042, column: 7, scope: !15106)
!15115 = !DILocation(line: 3042, column: 14, scope: !15106)
!15116 = !DILocation(line: 3042, column: 22, scope: !15106)
!15117 = !DILocation(line: 3043, column: 1, scope: !15106)
!15118 = distinct !DISubprogram(name: "tsi_start", scope: !1566, file: !1566, line: 38, type: !4327, scopeLine: 39, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!15119 = !DILocalVariable(name: "t", arg: 1, scope: !15118, file: !1566, line: 38, type: !1686)
!15120 = !DILocation(line: 38, column: 17, scope: !15118)
!15121 = !DILocalVariable(name: "i", scope: !15118, file: !1566, line: 40, type: !3442)
!15122 = !DILocation(line: 40, column: 22, scope: !15118)
!15123 = !DILocation(line: 42, column: 11, scope: !15118)
!15124 = !DILocation(line: 42, column: 5, scope: !15118)
!15125 = !DILocation(line: 42, column: 9, scope: !15118)
!15126 = !DILocation(line: 43, column: 17, scope: !15118)
!15127 = !DILocation(line: 43, column: 5, scope: !15118)
!15128 = !DILocation(line: 43, column: 15, scope: !15118)
!15129 = !DILocation(line: 45, column: 3, scope: !15118)
!15130 = distinct !DISubprogram(name: "gimplify_scan_omp_clauses", scope: !3, file: !3, line: 5673, type: !15131, scopeLine: 5675, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!15131 = !DISubroutineType(types: !15132)
!15132 = !{null, !2049, !3489, !423}
!15133 = !DILocalVariable(name: "list_p", arg: 1, scope: !15130, file: !3, line: 5673, type: !2049)
!15134 = !DILocation(line: 5673, column: 34, scope: !15130)
!15135 = !DILocalVariable(name: "pre_p", arg: 2, scope: !15130, file: !3, line: 5673, type: !3489)
!15136 = !DILocation(line: 5673, column: 54, scope: !15130)
!15137 = !DILocalVariable(name: "region_type", arg: 3, scope: !15130, file: !3, line: 5674, type: !423)
!15138 = !DILocation(line: 5674, column: 28, scope: !15130)
!15139 = !DILocalVariable(name: "ctx", scope: !15130, file: !3, line: 5676, type: !3146)
!15140 = !DILocation(line: 5676, column: 28, scope: !15130)
!15141 = !DILocalVariable(name: "outer_ctx", scope: !15130, file: !3, line: 5676, type: !3146)
!15142 = !DILocation(line: 5676, column: 34, scope: !15130)
!15143 = !DILocalVariable(name: "gctx", scope: !15130, file: !3, line: 5677, type: !3221)
!15144 = !DILocation(line: 5677, column: 23, scope: !15130)
!15145 = !DILocalVariable(name: "c", scope: !15130, file: !3, line: 5678, type: !1686)
!15146 = !DILocation(line: 5678, column: 8, scope: !15130)
!15147 = !DILocation(line: 5680, column: 26, scope: !15130)
!15148 = !DILocation(line: 5680, column: 9, scope: !15130)
!15149 = !DILocation(line: 5680, column: 7, scope: !15130)
!15150 = !DILocation(line: 5681, column: 15, scope: !15130)
!15151 = !DILocation(line: 5681, column: 20, scope: !15130)
!15152 = !DILocation(line: 5681, column: 13, scope: !15130)
!15153 = !DILocation(line: 5683, column: 3, scope: !15130)
!15154 = !DILocation(line: 5683, column: 16, scope: !15130)
!15155 = !DILocation(line: 5683, column: 15, scope: !15130)
!15156 = !DILocation(line: 5683, column: 13, scope: !15130)
!15157 = !DILocation(line: 5683, column: 24, scope: !15130)
!15158 = !DILocalVariable(name: "remove", scope: !15159, file: !3, line: 5685, type: !1804)
!15159 = distinct !DILexicalBlock(scope: !15130, file: !3, line: 5684, column: 5)
!15160 = !DILocation(line: 5685, column: 12, scope: !15159)
!15161 = !DILocalVariable(name: "notice_outer", scope: !15159, file: !3, line: 5686, type: !1804)
!15162 = !DILocation(line: 5686, column: 12, scope: !15159)
!15163 = !DILocalVariable(name: "check_non_private", scope: !15159, file: !3, line: 5687, type: !1888)
!15164 = !DILocation(line: 5687, column: 19, scope: !15159)
!15165 = !DILocalVariable(name: "flags", scope: !15159, file: !3, line: 5688, type: !7)
!15166 = !DILocation(line: 5688, column: 20, scope: !15159)
!15167 = !DILocalVariable(name: "decl", scope: !15159, file: !3, line: 5689, type: !1686)
!15168 = !DILocation(line: 5689, column: 12, scope: !15159)
!15169 = !DILocation(line: 5691, column: 15, scope: !15159)
!15170 = !DILocation(line: 5691, column: 7, scope: !15159)
!15171 = !DILocation(line: 5694, column: 10, scope: !15172)
!15172 = distinct !DILexicalBlock(scope: !15159, file: !3, line: 5692, column: 2)
!15173 = !DILocation(line: 5695, column: 25, scope: !15174)
!15174 = distinct !DILexicalBlock(scope: !15172, file: !3, line: 5695, column: 8)
!15175 = !DILocation(line: 5695, column: 48, scope: !15174)
!15176 = !DILocation(line: 5695, column: 8, scope: !15174)
!15177 = !DILocation(line: 5695, column: 8, scope: !15172)
!15178 = !DILocation(line: 5697, column: 14, scope: !15179)
!15179 = distinct !DILexicalBlock(scope: !15174, file: !3, line: 5696, column: 6)
!15180 = !DILocation(line: 5698, column: 8, scope: !15179)
!15181 = !DILocation(line: 5698, column: 41, scope: !15179)
!15182 = !DILocation(line: 5699, column: 6, scope: !15179)
!15183 = !DILocation(line: 5701, column: 19, scope: !15174)
!15184 = !DILocation(line: 5702, column: 4, scope: !15172)
!15185 = !DILocation(line: 5704, column: 10, scope: !15172)
!15186 = !DILocation(line: 5705, column: 4, scope: !15172)
!15187 = !DILocation(line: 5707, column: 10, scope: !15172)
!15188 = !DILocation(line: 5708, column: 22, scope: !15172)
!15189 = !DILocation(line: 5709, column: 4, scope: !15172)
!15190 = !DILocation(line: 5711, column: 10, scope: !15172)
!15191 = !DILocation(line: 5712, column: 22, scope: !15172)
!15192 = !DILocation(line: 5713, column: 4, scope: !15172)
!15193 = !DILocation(line: 5715, column: 10, scope: !15172)
!15194 = !DILocation(line: 5716, column: 22, scope: !15172)
!15195 = !DILocation(line: 5717, column: 4, scope: !15172)
!15196 = !DILabel(scope: !15172, name: "do_add", file: !3, line: 5719)
!15197 = !DILocation(line: 5719, column: 2, scope: !15172)
!15198 = !DILocation(line: 5720, column: 11, scope: !15172)
!15199 = !DILocation(line: 5720, column: 9, scope: !15172)
!15200 = !DILocation(line: 5721, column: 8, scope: !15201)
!15201 = distinct !DILexicalBlock(scope: !15172, file: !3, line: 5721, column: 8)
!15202 = !DILocation(line: 5721, column: 16, scope: !15201)
!15203 = !DILocation(line: 5721, column: 13, scope: !15201)
!15204 = !DILocation(line: 5721, column: 32, scope: !15201)
!15205 = !DILocation(line: 5721, column: 35, scope: !15201)
!15206 = !DILocation(line: 5721, column: 55, scope: !15201)
!15207 = !DILocation(line: 5721, column: 52, scope: !15201)
!15208 = !DILocation(line: 5721, column: 8, scope: !15172)
!15209 = !DILocation(line: 5723, column: 15, scope: !15210)
!15210 = distinct !DILexicalBlock(scope: !15201, file: !3, line: 5722, column: 6)
!15211 = !DILocation(line: 5724, column: 8, scope: !15210)
!15212 = !DILocation(line: 5726, column: 22, scope: !15172)
!15213 = !DILocation(line: 5726, column: 27, scope: !15172)
!15214 = !DILocation(line: 5726, column: 33, scope: !15172)
!15215 = !DILocation(line: 5726, column: 4, scope: !15172)
!15216 = !DILocation(line: 5727, column: 8, scope: !15217)
!15217 = distinct !DILexicalBlock(scope: !15172, file: !3, line: 5727, column: 8)
!15218 = !DILocation(line: 5727, column: 28, scope: !15217)
!15219 = !DILocation(line: 5728, column: 8, scope: !15217)
!15220 = !DILocation(line: 5728, column: 11, scope: !15217)
!15221 = !DILocation(line: 5727, column: 8, scope: !15172)
!15222 = !DILocation(line: 5730, column: 26, scope: !15223)
!15223 = distinct !DILexicalBlock(scope: !15217, file: !3, line: 5729, column: 6)
!15224 = !DILocation(line: 5730, column: 31, scope: !15223)
!15225 = !DILocation(line: 5730, column: 8, scope: !15223)
!15226 = !DILocation(line: 5732, column: 28, scope: !15223)
!15227 = !DILocation(line: 5732, column: 26, scope: !15223)
!15228 = !DILocation(line: 5733, column: 8, scope: !15223)
!15229 = !DILocation(line: 5735, column: 47, scope: !15223)
!15230 = !DILocation(line: 5735, column: 8, scope: !15223)
!15231 = !DILocation(line: 5735, column: 45, scope: !15223)
!15232 = !DILocation(line: 5736, column: 48, scope: !15223)
!15233 = !DILocation(line: 5736, column: 8, scope: !15223)
!15234 = !DILocation(line: 5736, column: 46, scope: !15223)
!15235 = !DILocation(line: 5738, column: 26, scope: !15223)
!15236 = !DILocation(line: 5739, column: 8, scope: !15223)
!15237 = !DILocation(line: 5738, column: 8, scope: !15223)
!15238 = !DILocation(line: 5741, column: 27, scope: !15223)
!15239 = !DILocation(line: 5741, column: 4, scope: !15223)
!15240 = !DILocation(line: 5740, column: 8, scope: !15223)
!15241 = !DILocation(line: 5742, column: 8, scope: !15223)
!15242 = !DILocation(line: 5743, column: 26, scope: !15223)
!15243 = !DILocation(line: 5744, column: 8, scope: !15223)
!15244 = !DILocation(line: 5743, column: 8, scope: !15223)
!15245 = !DILocation(line: 5746, column: 27, scope: !15223)
!15246 = !DILocation(line: 5746, column: 4, scope: !15223)
!15247 = !DILocation(line: 5745, column: 8, scope: !15223)
!15248 = !DILocation(line: 5747, column: 8, scope: !15223)
!15249 = !DILocation(line: 5747, column: 38, scope: !15223)
!15250 = !DILocation(line: 5748, column: 8, scope: !15223)
!15251 = !DILocation(line: 5748, column: 39, scope: !15223)
!15252 = !DILocation(line: 5750, column: 28, scope: !15223)
!15253 = !DILocation(line: 5750, column: 26, scope: !15223)
!15254 = !DILocation(line: 5751, column: 6, scope: !15223)
!15255 = !DILocation(line: 5752, column: 13, scope: !15256)
!15256 = distinct !DILexicalBlock(scope: !15217, file: !3, line: 5752, column: 13)
!15257 = !DILocation(line: 5752, column: 33, scope: !15256)
!15258 = !DILocation(line: 5753, column: 6, scope: !15256)
!15259 = !DILocation(line: 5753, column: 9, scope: !15256)
!15260 = !DILocation(line: 5752, column: 13, scope: !15217)
!15261 = !DILocation(line: 5755, column: 28, scope: !15262)
!15262 = distinct !DILexicalBlock(scope: !15256, file: !3, line: 5754, column: 6)
!15263 = !DILocation(line: 5755, column: 26, scope: !15262)
!15264 = !DILocation(line: 5756, column: 8, scope: !15262)
!15265 = !DILocation(line: 5757, column: 12, scope: !15266)
!15266 = distinct !DILexicalBlock(scope: !15262, file: !3, line: 5757, column: 12)
!15267 = !DILocation(line: 5757, column: 56, scope: !15266)
!15268 = !DILocation(line: 5757, column: 12, scope: !15262)
!15269 = !DILocalVariable(name: "bind", scope: !15270, file: !3, line: 5759, type: !1686)
!15270 = distinct !DILexicalBlock(scope: !15266, file: !3, line: 5758, column: 3)
!15271 = !DILocation(line: 5759, column: 10, scope: !15270)
!15272 = !DILocation(line: 5759, column: 17, scope: !15270)
!15273 = !DILocation(line: 5761, column: 5, scope: !15270)
!15274 = !DILocation(line: 5761, column: 30, scope: !15270)
!15275 = !DILocation(line: 5762, column: 29, scope: !15270)
!15276 = !DILocation(line: 5762, column: 5, scope: !15270)
!15277 = !DILocation(line: 5762, column: 27, scope: !15270)
!15278 = !DILocation(line: 5763, column: 39, scope: !15270)
!15279 = !DILocation(line: 5763, column: 5, scope: !15270)
!15280 = !DILocation(line: 5763, column: 37, scope: !15270)
!15281 = !DILocation(line: 5764, column: 3, scope: !15270)
!15282 = !DILocation(line: 5765, column: 26, scope: !15262)
!15283 = !DILocation(line: 5766, column: 6, scope: !15262)
!15284 = !DILocation(line: 5765, column: 8, scope: !15262)
!15285 = !DILocation(line: 5768, column: 27, scope: !15262)
!15286 = !DILocation(line: 5768, column: 4, scope: !15262)
!15287 = !DILocation(line: 5767, column: 8, scope: !15262)
!15288 = !DILocation(line: 5769, column: 8, scope: !15262)
!15289 = !DILocation(line: 5769, column: 40, scope: !15262)
!15290 = !DILocation(line: 5771, column: 28, scope: !15262)
!15291 = !DILocation(line: 5771, column: 26, scope: !15262)
!15292 = !DILocation(line: 5772, column: 6, scope: !15262)
!15293 = !DILocation(line: 5773, column: 8, scope: !15294)
!15294 = distinct !DILexicalBlock(scope: !15172, file: !3, line: 5773, column: 8)
!15295 = !DILocation(line: 5773, column: 8, scope: !15172)
!15296 = !DILocation(line: 5774, column: 6, scope: !15294)
!15297 = !DILocation(line: 5775, column: 4, scope: !15172)
!15298 = !DILocation(line: 5779, column: 11, scope: !15172)
!15299 = !DILocation(line: 5779, column: 9, scope: !15172)
!15300 = !DILocation(line: 5780, column: 8, scope: !15301)
!15301 = distinct !DILexicalBlock(scope: !15172, file: !3, line: 5780, column: 8)
!15302 = !DILocation(line: 5780, column: 16, scope: !15301)
!15303 = !DILocation(line: 5780, column: 13, scope: !15301)
!15304 = !DILocation(line: 5780, column: 32, scope: !15301)
!15305 = !DILocation(line: 5780, column: 35, scope: !15301)
!15306 = !DILocation(line: 5780, column: 55, scope: !15301)
!15307 = !DILocation(line: 5780, column: 52, scope: !15301)
!15308 = !DILocation(line: 5780, column: 8, scope: !15172)
!15309 = !DILocation(line: 5782, column: 15, scope: !15310)
!15310 = distinct !DILexicalBlock(scope: !15301, file: !3, line: 5781, column: 6)
!15311 = !DILocation(line: 5783, column: 8, scope: !15310)
!15312 = !DILabel(scope: !15172, name: "do_notice", file: !3, line: 5785)
!15313 = !DILocation(line: 5785, column: 2, scope: !15172)
!15314 = !DILocation(line: 5786, column: 8, scope: !15315)
!15315 = distinct !DILexicalBlock(scope: !15172, file: !3, line: 5786, column: 8)
!15316 = !DILocation(line: 5786, column: 8, scope: !15172)
!15317 = !DILocation(line: 5787, column: 27, scope: !15315)
!15318 = !DILocation(line: 5787, column: 38, scope: !15315)
!15319 = !DILocation(line: 5787, column: 6, scope: !15315)
!15320 = !DILocation(line: 5788, column: 8, scope: !15321)
!15321 = distinct !DILexicalBlock(scope: !15172, file: !3, line: 5788, column: 8)
!15322 = !DILocation(line: 5789, column: 8, scope: !15321)
!15323 = !DILocation(line: 5789, column: 11, scope: !15321)
!15324 = !DILocation(line: 5789, column: 23, scope: !15321)
!15325 = !DILocation(line: 5790, column: 8, scope: !15321)
!15326 = !DILocation(line: 5790, column: 30, scope: !15321)
!15327 = !DILocation(line: 5790, column: 35, scope: !15321)
!15328 = !DILocation(line: 5790, column: 11, scope: !15321)
!15329 = !DILocation(line: 5788, column: 8, scope: !15172)
!15330 = !DILocation(line: 5793, column: 8, scope: !15331)
!15331 = distinct !DILexicalBlock(scope: !15321, file: !3, line: 5791, column: 6)
!15332 = !DILocation(line: 5793, column: 27, scope: !15331)
!15333 = !DILocation(line: 5792, column: 8, scope: !15331)
!15334 = !DILocation(line: 5794, column: 15, scope: !15331)
!15335 = !DILocation(line: 5795, column: 6, scope: !15331)
!15336 = !DILocation(line: 5796, column: 4, scope: !15172)
!15337 = !DILocation(line: 5800, column: 24, scope: !15172)
!15338 = !DILocation(line: 5800, column: 8, scope: !15172)
!15339 = !DILocation(line: 5799, column: 4, scope: !15172)
!15340 = !DILocation(line: 5800, column: 6, scope: !15172)
!15341 = !DILocation(line: 5805, column: 24, scope: !15342)
!15342 = distinct !DILexicalBlock(scope: !15172, file: !3, line: 5805, column: 8)
!15343 = !DILocation(line: 5805, column: 51, scope: !15342)
!15344 = !DILocation(line: 5805, column: 8, scope: !15342)
!15345 = !DILocation(line: 5806, column: 35, scope: !15342)
!15346 = !DILocation(line: 5805, column: 8, scope: !15172)
!15347 = !DILocation(line: 5807, column: 15, scope: !15342)
!15348 = !DILocation(line: 5807, column: 8, scope: !15342)
!15349 = !DILocation(line: 5808, column: 4, scope: !15172)
!15350 = !DILocation(line: 5814, column: 4, scope: !15172)
!15351 = !DILocation(line: 5817, column: 24, scope: !15172)
!15352 = !DILocation(line: 5817, column: 4, scope: !15172)
!15353 = !DILocation(line: 5817, column: 9, scope: !15172)
!15354 = !DILocation(line: 5817, column: 22, scope: !15172)
!15355 = !DILocation(line: 5818, column: 4, scope: !15172)
!15356 = !DILocation(line: 5821, column: 4, scope: !15172)
!15357 = !DILocation(line: 5822, column: 2, scope: !15172)
!15358 = !DILocation(line: 5824, column: 11, scope: !15359)
!15359 = distinct !DILexicalBlock(scope: !15159, file: !3, line: 5824, column: 11)
!15360 = !DILocation(line: 5824, column: 11, scope: !15159)
!15361 = !DILocation(line: 5825, column: 12, scope: !15359)
!15362 = !DILocation(line: 5825, column: 3, scope: !15359)
!15363 = !DILocation(line: 5825, column: 10, scope: !15359)
!15364 = !DILocation(line: 5825, column: 2, scope: !15359)
!15365 = !DILocation(line: 5827, column: 12, scope: !15359)
!15366 = !DILocation(line: 5827, column: 9, scope: !15359)
!15367 = distinct !{!15367, !15153, !15368}
!15368 = !DILocation(line: 5828, column: 5, scope: !15130)
!15369 = !DILocation(line: 5830, column: 23, scope: !15130)
!15370 = !DILocation(line: 5830, column: 21, scope: !15130)
!15371 = !DILocation(line: 5831, column: 1, scope: !15130)
!15372 = distinct !DISubprogram(name: "gimplify_and_return_first", scope: !3, file: !3, line: 399, type: !15373, scopeLine: 400, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!15373 = !DISubroutineType(types: !15374)
!15374 = !{!2014, !1686, !3489}
!15375 = !DILocalVariable(name: "t", arg: 1, scope: !15372, file: !3, line: 399, type: !1686)
!15376 = !DILocation(line: 399, column: 33, scope: !15372)
!15377 = !DILocalVariable(name: "seq_p", arg: 2, scope: !15372, file: !3, line: 399, type: !3489)
!15378 = !DILocation(line: 399, column: 48, scope: !15372)
!15379 = !DILocalVariable(name: "last", scope: !15372, file: !3, line: 401, type: !4033)
!15380 = !DILocation(line: 401, column: 24, scope: !15372)
!15381 = !DILocation(line: 401, column: 42, scope: !15372)
!15382 = !DILocation(line: 401, column: 41, scope: !15372)
!15383 = !DILocation(line: 401, column: 31, scope: !15372)
!15384 = !DILocation(line: 403, column: 21, scope: !15372)
!15385 = !DILocation(line: 403, column: 24, scope: !15372)
!15386 = !DILocation(line: 403, column: 3, scope: !15372)
!15387 = !DILocation(line: 405, column: 8, scope: !15388)
!15388 = distinct !DILexicalBlock(scope: !15372, file: !3, line: 405, column: 7)
!15389 = !DILocation(line: 405, column: 7, scope: !15372)
!15390 = !DILocation(line: 407, column: 7, scope: !15391)
!15391 = distinct !DILexicalBlock(scope: !15388, file: !3, line: 406, column: 5)
!15392 = !DILocation(line: 408, column: 14, scope: !15391)
!15393 = !DILocation(line: 408, column: 7, scope: !15391)
!15394 = !DILocation(line: 411, column: 36, scope: !15388)
!15395 = !DILocation(line: 411, column: 35, scope: !15388)
!15396 = !DILocation(line: 411, column: 12, scope: !15388)
!15397 = !DILocation(line: 411, column: 5, scope: !15388)
!15398 = !DILocation(line: 412, column: 1, scope: !15372)
!15399 = distinct !DISubprogram(name: "gimplify_adjust_omp_clauses", scope: !3, file: !3, line: 5901, type: !12358, scopeLine: 5902, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!15400 = !DILocalVariable(name: "list_p", arg: 1, scope: !15399, file: !3, line: 5901, type: !2049)
!15401 = !DILocation(line: 5901, column: 36, scope: !15399)
!15402 = !DILocalVariable(name: "ctx", scope: !15399, file: !3, line: 5903, type: !3146)
!15403 = !DILocation(line: 5903, column: 28, scope: !15399)
!15404 = !DILocation(line: 5903, column: 34, scope: !15399)
!15405 = !DILocalVariable(name: "c", scope: !15399, file: !3, line: 5904, type: !1686)
!15406 = !DILocation(line: 5904, column: 8, scope: !15399)
!15407 = !DILocalVariable(name: "decl", scope: !15399, file: !3, line: 5904, type: !1686)
!15408 = !DILocation(line: 5904, column: 11, scope: !15399)
!15409 = !DILocation(line: 5906, column: 3, scope: !15399)
!15410 = !DILocation(line: 5906, column: 16, scope: !15399)
!15411 = !DILocation(line: 5906, column: 15, scope: !15399)
!15412 = !DILocation(line: 5906, column: 13, scope: !15399)
!15413 = !DILocation(line: 5906, column: 24, scope: !15399)
!15414 = !DILocalVariable(name: "n", scope: !15415, file: !3, line: 5908, type: !3156)
!15415 = distinct !DILexicalBlock(scope: !15399, file: !3, line: 5907, column: 5)
!15416 = !DILocation(line: 5908, column: 23, scope: !15415)
!15417 = !DILocalVariable(name: "remove", scope: !15415, file: !3, line: 5909, type: !1804)
!15418 = !DILocation(line: 5909, column: 12, scope: !15415)
!15419 = !DILocation(line: 5911, column: 15, scope: !15415)
!15420 = !DILocation(line: 5911, column: 7, scope: !15415)
!15421 = !DILocation(line: 5916, column: 11, scope: !15422)
!15422 = distinct !DILexicalBlock(scope: !15415, file: !3, line: 5912, column: 2)
!15423 = !DILocation(line: 5916, column: 9, scope: !15422)
!15424 = !DILocation(line: 5917, column: 27, scope: !15422)
!15425 = !DILocation(line: 5917, column: 32, scope: !15422)
!15426 = !DILocation(line: 5917, column: 60, scope: !15422)
!15427 = !DILocation(line: 5917, column: 43, scope: !15422)
!15428 = !DILocation(line: 5917, column: 8, scope: !15422)
!15429 = !DILocation(line: 5917, column: 6, scope: !15422)
!15430 = !DILocation(line: 5918, column: 15, scope: !15422)
!15431 = !DILocation(line: 5918, column: 18, scope: !15422)
!15432 = !DILocation(line: 5918, column: 24, scope: !15422)
!15433 = !DILocation(line: 5918, column: 13, scope: !15422)
!15434 = !DILocation(line: 5918, column: 11, scope: !15422)
!15435 = !DILocation(line: 5919, column: 10, scope: !15436)
!15436 = distinct !DILexicalBlock(scope: !15422, file: !3, line: 5919, column: 8)
!15437 = !DILocation(line: 5919, column: 8, scope: !15422)
!15438 = !DILocalVariable(name: "shared", scope: !15439, file: !3, line: 5921, type: !1804)
!15439 = distinct !DILexicalBlock(scope: !15436, file: !3, line: 5920, column: 6)
!15440 = !DILocation(line: 5921, column: 13, scope: !15439)
!15441 = !DILocation(line: 5921, column: 22, scope: !15439)
!15442 = !DILocation(line: 5921, column: 42, scope: !15439)
!15443 = !DILocation(line: 5922, column: 13, scope: !15444)
!15444 = distinct !DILexicalBlock(scope: !15439, file: !3, line: 5922, column: 12)
!15445 = !DILocation(line: 5922, column: 16, scope: !15444)
!15446 = !DILocation(line: 5922, column: 22, scope: !15444)
!15447 = !DILocation(line: 5923, column: 5, scope: !15444)
!15448 = !DILocation(line: 5923, column: 25, scope: !15444)
!15449 = !DILocation(line: 5923, column: 51, scope: !15444)
!15450 = !DILocation(line: 5923, column: 57, scope: !15444)
!15451 = !DILocation(line: 5923, column: 8, scope: !15444)
!15452 = !DILocation(line: 5922, column: 12, scope: !15439)
!15453 = !DILocation(line: 5925, column: 5, scope: !15454)
!15454 = distinct !DILexicalBlock(scope: !15444, file: !3, line: 5924, column: 3)
!15455 = !DILocation(line: 5928, column: 5, scope: !15454)
!15456 = !DILocation(line: 5929, column: 5, scope: !15454)
!15457 = !DILocation(line: 5929, column: 34, scope: !15454)
!15458 = !DILocation(line: 5930, column: 3, scope: !15454)
!15459 = !DILocation(line: 5931, column: 6, scope: !15439)
!15460 = !DILocation(line: 5932, column: 4, scope: !15422)
!15461 = !DILocation(line: 5937, column: 11, scope: !15422)
!15462 = !DILocation(line: 5937, column: 9, scope: !15422)
!15463 = !DILocation(line: 5938, column: 27, scope: !15422)
!15464 = !DILocation(line: 5938, column: 32, scope: !15422)
!15465 = !DILocation(line: 5938, column: 60, scope: !15422)
!15466 = !DILocation(line: 5938, column: 43, scope: !15422)
!15467 = !DILocation(line: 5938, column: 8, scope: !15422)
!15468 = !DILocation(line: 5938, column: 6, scope: !15422)
!15469 = !DILocation(line: 5940, column: 9, scope: !15422)
!15470 = !DILocation(line: 5940, column: 12, scope: !15422)
!15471 = !DILocation(line: 5940, column: 18, scope: !15422)
!15472 = !DILocation(line: 5940, column: 39, scope: !15422)
!15473 = !DILocation(line: 5939, column: 4, scope: !15422)
!15474 = !DILocation(line: 5940, column: 6, scope: !15422)
!15475 = !DILocation(line: 5941, column: 4, scope: !15422)
!15476 = !DILocation(line: 5954, column: 4, scope: !15422)
!15477 = !DILocation(line: 5957, column: 4, scope: !15422)
!15478 = !DILocation(line: 5958, column: 2, scope: !15422)
!15479 = !DILocation(line: 5960, column: 11, scope: !15480)
!15480 = distinct !DILexicalBlock(scope: !15415, file: !3, line: 5960, column: 11)
!15481 = !DILocation(line: 5960, column: 11, scope: !15415)
!15482 = !DILocation(line: 5961, column: 12, scope: !15480)
!15483 = !DILocation(line: 5961, column: 3, scope: !15480)
!15484 = !DILocation(line: 5961, column: 10, scope: !15480)
!15485 = !DILocation(line: 5961, column: 2, scope: !15480)
!15486 = !DILocation(line: 5963, column: 12, scope: !15480)
!15487 = !DILocation(line: 5963, column: 9, scope: !15480)
!15488 = distinct !{!15488, !15409, !15489}
!15489 = !DILocation(line: 5964, column: 5, scope: !15399)
!15490 = !DILocation(line: 5967, column: 23, scope: !15399)
!15491 = !DILocation(line: 5967, column: 28, scope: !15399)
!15492 = !DILocation(line: 5967, column: 70, scope: !15399)
!15493 = !DILocation(line: 5967, column: 3, scope: !15399)
!15494 = !DILocation(line: 5969, column: 23, scope: !15399)
!15495 = !DILocation(line: 5969, column: 28, scope: !15399)
!15496 = !DILocation(line: 5969, column: 21, scope: !15399)
!15497 = !DILocation(line: 5970, column: 23, scope: !15399)
!15498 = !DILocation(line: 5970, column: 3, scope: !15399)
!15499 = !DILocation(line: 5971, column: 1, scope: !15399)
!15500 = distinct !DISubprogram(name: "gimple_omp_set_subcode", scope: !385, file: !385, line: 1518, type: !15501, scopeLine: 1519, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!15501 = !DISubroutineType(types: !15502)
!15502 = !{null, !2014, !7}
!15503 = !DILocalVariable(name: "s", arg: 1, scope: !15500, file: !385, line: 1518, type: !2014)
!15504 = !DILocation(line: 1518, column: 32, scope: !15500)
!15505 = !DILocalVariable(name: "subcode", arg: 2, scope: !15500, file: !385, line: 1518, type: !7)
!15506 = !DILocation(line: 1518, column: 48, scope: !15500)
!15507 = !DILocation(line: 1522, column: 3, scope: !15500)
!15508 = !DILocation(line: 1523, column: 23, scope: !15500)
!15509 = !DILocation(line: 1523, column: 3, scope: !15500)
!15510 = !DILocation(line: 1523, column: 6, scope: !15500)
!15511 = !DILocation(line: 1523, column: 13, scope: !15500)
!15512 = !DILocation(line: 1523, column: 21, scope: !15500)
!15513 = !DILocation(line: 1524, column: 1, scope: !15500)
!15514 = distinct !DISubprogram(name: "new_omp_context", scope: !3, file: !3, line: 312, type: !15515, scopeLine: 313, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!15515 = !DISubroutineType(types: !15516)
!15516 = !{!3146, !423}
!15517 = !DILocalVariable(name: "region_type", arg: 1, scope: !15514, file: !3, line: 312, type: !423)
!15518 = !DILocation(line: 312, column: 39, scope: !15514)
!15519 = !DILocalVariable(name: "c", scope: !15514, file: !3, line: 314, type: !3146)
!15520 = !DILocation(line: 314, column: 28, scope: !15514)
!15521 = !DILocation(line: 316, column: 7, scope: !15514)
!15522 = !DILocation(line: 316, column: 5, scope: !15514)
!15523 = !DILocation(line: 317, column: 22, scope: !15514)
!15524 = !DILocation(line: 317, column: 3, scope: !15514)
!15525 = !DILocation(line: 317, column: 6, scope: !15514)
!15526 = !DILocation(line: 317, column: 20, scope: !15514)
!15527 = !DILocation(line: 318, column: 18, scope: !15514)
!15528 = !DILocation(line: 318, column: 3, scope: !15514)
!15529 = !DILocation(line: 318, column: 6, scope: !15514)
!15530 = !DILocation(line: 318, column: 16, scope: !15514)
!15531 = !DILocation(line: 319, column: 25, scope: !15514)
!15532 = !DILocation(line: 319, column: 3, scope: !15514)
!15533 = !DILocation(line: 319, column: 6, scope: !15514)
!15534 = !DILocation(line: 319, column: 23, scope: !15514)
!15535 = !DILocation(line: 320, column: 17, scope: !15514)
!15536 = !DILocation(line: 320, column: 3, scope: !15514)
!15537 = !DILocation(line: 320, column: 6, scope: !15514)
!15538 = !DILocation(line: 320, column: 15, scope: !15514)
!15539 = !DILocation(line: 321, column: 20, scope: !15514)
!15540 = !DILocation(line: 321, column: 3, scope: !15514)
!15541 = !DILocation(line: 321, column: 6, scope: !15514)
!15542 = !DILocation(line: 321, column: 18, scope: !15514)
!15543 = !DILocation(line: 322, column: 7, scope: !15544)
!15544 = distinct !DILexicalBlock(scope: !15514, file: !3, line: 322, column: 7)
!15545 = !DILocation(line: 322, column: 19, scope: !15544)
!15546 = !DILocation(line: 322, column: 7, scope: !15514)
!15547 = !DILocation(line: 323, column: 5, scope: !15544)
!15548 = !DILocation(line: 323, column: 8, scope: !15544)
!15549 = !DILocation(line: 323, column: 21, scope: !15544)
!15550 = !DILocation(line: 325, column: 5, scope: !15544)
!15551 = !DILocation(line: 325, column: 8, scope: !15544)
!15552 = !DILocation(line: 325, column: 21, scope: !15544)
!15553 = !DILocation(line: 327, column: 10, scope: !15514)
!15554 = !DILocation(line: 327, column: 3, scope: !15514)
!15555 = distinct !DISubprogram(name: "omp_check_private", scope: !3, file: !3, line: 5649, type: !15556, scopeLine: 5650, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!15556 = !DISubroutineType(types: !15557)
!15557 = !{!1804, !3146, !1686}
!15558 = !DILocalVariable(name: "ctx", arg: 1, scope: !15555, file: !3, line: 5649, type: !3146)
!15559 = !DILocation(line: 5649, column: 45, scope: !15555)
!15560 = !DILocalVariable(name: "decl", arg: 2, scope: !15555, file: !3, line: 5649, type: !1686)
!15561 = !DILocation(line: 5649, column: 55, scope: !15555)
!15562 = !DILocalVariable(name: "n", scope: !15555, file: !3, line: 5651, type: !3156)
!15563 = !DILocation(line: 5651, column: 19, scope: !15555)
!15564 = !DILocation(line: 5653, column: 3, scope: !15555)
!15565 = !DILocation(line: 5655, column: 13, scope: !15566)
!15566 = distinct !DILexicalBlock(scope: !15555, file: !3, line: 5654, column: 5)
!15567 = !DILocation(line: 5655, column: 18, scope: !15566)
!15568 = !DILocation(line: 5655, column: 11, scope: !15566)
!15569 = !DILocation(line: 5656, column: 11, scope: !15570)
!15570 = distinct !DILexicalBlock(scope: !15566, file: !3, line: 5656, column: 11)
!15571 = !DILocation(line: 5656, column: 15, scope: !15570)
!15572 = !DILocation(line: 5656, column: 11, scope: !15566)
!15573 = !DILocation(line: 5657, column: 26, scope: !15570)
!15574 = !DILocation(line: 5657, column: 11, scope: !15570)
!15575 = !DILocation(line: 5659, column: 4, scope: !15570)
!15576 = !DILocation(line: 5659, column: 24, scope: !15570)
!15577 = !DILocation(line: 5659, column: 52, scope: !15570)
!15578 = !DILocation(line: 5659, column: 7, scope: !15570)
!15579 = !DILocation(line: 5657, column: 9, scope: !15570)
!15580 = !DILocation(line: 5657, column: 2, scope: !15570)
!15581 = !DILocation(line: 5661, column: 30, scope: !15566)
!15582 = !DILocation(line: 5661, column: 35, scope: !15566)
!15583 = !DILocation(line: 5661, column: 63, scope: !15566)
!15584 = !DILocation(line: 5661, column: 46, scope: !15566)
!15585 = !DILocation(line: 5661, column: 11, scope: !15566)
!15586 = !DILocation(line: 5661, column: 9, scope: !15566)
!15587 = !DILocation(line: 5662, column: 11, scope: !15588)
!15588 = distinct !DILexicalBlock(scope: !15566, file: !3, line: 5662, column: 11)
!15589 = !DILocation(line: 5662, column: 13, scope: !15588)
!15590 = !DILocation(line: 5662, column: 11, scope: !15566)
!15591 = !DILocation(line: 5663, column: 10, scope: !15588)
!15592 = !DILocation(line: 5663, column: 13, scope: !15588)
!15593 = !DILocation(line: 5663, column: 19, scope: !15588)
!15594 = !DILocation(line: 5663, column: 34, scope: !15588)
!15595 = !DILocation(line: 5663, column: 9, scope: !15588)
!15596 = !DILocation(line: 5663, column: 2, scope: !15588)
!15597 = !DILocation(line: 5664, column: 5, scope: !15566)
!15598 = !DILocation(line: 5665, column: 10, scope: !15555)
!15599 = !DILocation(line: 5665, column: 15, scope: !15555)
!15600 = !DILocation(line: 5665, column: 27, scope: !15555)
!15601 = distinct !{!15601, !15564, !15602}
!15602 = !DILocation(line: 5665, column: 43, scope: !15555)
!15603 = !DILocation(line: 5666, column: 3, scope: !15555)
!15604 = !DILocation(line: 5667, column: 1, scope: !15555)
!15605 = distinct !DISubprogram(name: "splay_tree_compare_decl_uid", scope: !3, file: !3, line: 301, type: !3168, scopeLine: 302, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!15606 = !DILocalVariable(name: "xa", arg: 1, scope: !15605, file: !3, line: 301, type: !3116)
!15607 = !DILocation(line: 301, column: 45, scope: !15605)
!15608 = !DILocalVariable(name: "xb", arg: 2, scope: !15605, file: !3, line: 301, type: !3116)
!15609 = !DILocation(line: 301, column: 64, scope: !15605)
!15610 = !DILocalVariable(name: "a", scope: !15605, file: !3, line: 303, type: !1686)
!15611 = !DILocation(line: 303, column: 8, scope: !15605)
!15612 = !DILocation(line: 303, column: 19, scope: !15605)
!15613 = !DILocation(line: 303, column: 12, scope: !15605)
!15614 = !DILocalVariable(name: "b", scope: !15605, file: !3, line: 304, type: !1686)
!15615 = !DILocation(line: 304, column: 8, scope: !15605)
!15616 = !DILocation(line: 304, column: 19, scope: !15605)
!15617 = !DILocation(line: 304, column: 12, scope: !15605)
!15618 = !DILocation(line: 306, column: 10, scope: !15605)
!15619 = !DILocation(line: 306, column: 25, scope: !15605)
!15620 = !DILocation(line: 306, column: 23, scope: !15605)
!15621 = !DILocation(line: 306, column: 3, scope: !15605)
!15622 = distinct !DISubprogram(name: "gimplify_adjust_omp_clauses_1", scope: !3, file: !3, line: 5837, type: !15623, scopeLine: 5838, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!15623 = !DISubroutineType(types: !15624)
!15624 = !{!1330, !3156, !1685}
!15625 = !DILocalVariable(name: "n", arg: 1, scope: !15622, file: !3, line: 5837, type: !3156)
!15626 = !DILocation(line: 5837, column: 48, scope: !15622)
!15627 = !DILocalVariable(name: "data", arg: 2, scope: !15622, file: !3, line: 5837, type: !1685)
!15628 = !DILocation(line: 5837, column: 57, scope: !15622)
!15629 = !DILocalVariable(name: "list_p", scope: !15622, file: !3, line: 5839, type: !2049)
!15630 = !DILocation(line: 5839, column: 9, scope: !15622)
!15631 = !DILocation(line: 5839, column: 27, scope: !15622)
!15632 = !DILocation(line: 5839, column: 18, scope: !15622)
!15633 = !DILocalVariable(name: "decl", scope: !15622, file: !3, line: 5840, type: !1686)
!15634 = !DILocation(line: 5840, column: 8, scope: !15622)
!15635 = !DILocation(line: 5840, column: 22, scope: !15622)
!15636 = !DILocation(line: 5840, column: 25, scope: !15622)
!15637 = !DILocation(line: 5840, column: 15, scope: !15622)
!15638 = !DILocalVariable(name: "flags", scope: !15622, file: !3, line: 5841, type: !7)
!15639 = !DILocation(line: 5841, column: 12, scope: !15622)
!15640 = !DILocation(line: 5841, column: 20, scope: !15622)
!15641 = !DILocation(line: 5841, column: 23, scope: !15622)
!15642 = !DILocalVariable(name: "code", scope: !15622, file: !3, line: 5842, type: !352)
!15643 = !DILocation(line: 5842, column: 24, scope: !15622)
!15644 = !DILocalVariable(name: "clause", scope: !15622, file: !3, line: 5843, type: !1686)
!15645 = !DILocation(line: 5843, column: 8, scope: !15622)
!15646 = !DILocalVariable(name: "private_debug", scope: !15622, file: !3, line: 5844, type: !1804)
!15647 = !DILocation(line: 5844, column: 8, scope: !15622)
!15648 = !DILocation(line: 5846, column: 7, scope: !15649)
!15649 = distinct !DILexicalBlock(scope: !15622, file: !3, line: 5846, column: 7)
!15650 = !DILocation(line: 5846, column: 13, scope: !15649)
!15651 = !DILocation(line: 5846, column: 7, scope: !15622)
!15652 = !DILocation(line: 5847, column: 5, scope: !15649)
!15653 = !DILocation(line: 5848, column: 8, scope: !15654)
!15654 = distinct !DILexicalBlock(scope: !15622, file: !3, line: 5848, column: 7)
!15655 = !DILocation(line: 5848, column: 14, scope: !15654)
!15656 = !DILocation(line: 5848, column: 27, scope: !15654)
!15657 = !DILocation(line: 5848, column: 7, scope: !15622)
!15658 = !DILocation(line: 5849, column: 5, scope: !15654)
!15659 = !DILocation(line: 5850, column: 7, scope: !15660)
!15660 = distinct !DILexicalBlock(scope: !15622, file: !3, line: 5850, column: 7)
!15661 = !DILocation(line: 5850, column: 13, scope: !15660)
!15662 = !DILocation(line: 5850, column: 7, scope: !15622)
!15663 = !DILocation(line: 5852, column: 7, scope: !15664)
!15664 = distinct !DILexicalBlock(scope: !15660, file: !3, line: 5851, column: 5)
!15665 = !DILocation(line: 5853, column: 21, scope: !15664)
!15666 = !DILocation(line: 5854, column: 5, scope: !15664)
!15667 = !DILocation(line: 5857, column: 26, scope: !15660)
!15668 = !DILocation(line: 5857, column: 52, scope: !15660)
!15669 = !DILocation(line: 5858, column: 13, scope: !15660)
!15670 = !DILocation(line: 5858, column: 19, scope: !15660)
!15671 = !DILocation(line: 5858, column: 11, scope: !15660)
!15672 = !DILocation(line: 5858, column: 10, scope: !15660)
!15673 = !DILocation(line: 5857, column: 9, scope: !15660)
!15674 = !DILocation(line: 5857, column: 7, scope: !15660)
!15675 = !DILocation(line: 5859, column: 7, scope: !15676)
!15676 = distinct !DILexicalBlock(scope: !15622, file: !3, line: 5859, column: 7)
!15677 = !DILocation(line: 5859, column: 7, scope: !15622)
!15678 = !DILocation(line: 5860, column: 10, scope: !15676)
!15679 = !DILocation(line: 5860, column: 5, scope: !15676)
!15680 = !DILocation(line: 5861, column: 12, scope: !15681)
!15681 = distinct !DILexicalBlock(scope: !15676, file: !3, line: 5861, column: 12)
!15682 = !DILocation(line: 5861, column: 18, scope: !15681)
!15683 = !DILocation(line: 5861, column: 12, scope: !15676)
!15684 = !DILocation(line: 5863, column: 26, scope: !15685)
!15685 = distinct !DILexicalBlock(scope: !15686, file: !3, line: 5863, column: 11)
!15686 = distinct !DILexicalBlock(scope: !15681, file: !3, line: 5862, column: 5)
!15687 = !DILocation(line: 5863, column: 11, scope: !15685)
!15688 = !DILocation(line: 5863, column: 11, scope: !15686)
!15689 = !DILocalVariable(name: "ctx", scope: !15690, file: !3, line: 5865, type: !3146)
!15690 = distinct !DILexicalBlock(scope: !15685, file: !3, line: 5864, column: 2)
!15691 = !DILocation(line: 5865, column: 29, scope: !15690)
!15692 = !DILocation(line: 5865, column: 35, scope: !15690)
!15693 = !DILocation(line: 5865, column: 54, scope: !15690)
!15694 = !DILocation(line: 5866, column: 4, scope: !15690)
!15695 = !DILocation(line: 5866, column: 11, scope: !15690)
!15696 = !DILocation(line: 5866, column: 15, scope: !15690)
!15697 = !DILocalVariable(name: "on", scope: !15698, file: !3, line: 5868, type: !3156)
!15698 = distinct !DILexicalBlock(scope: !15690, file: !3, line: 5867, column: 6)
!15699 = !DILocation(line: 5868, column: 24, scope: !15698)
!15700 = !DILocation(line: 5869, column: 24, scope: !15698)
!15701 = !DILocation(line: 5869, column: 29, scope: !15698)
!15702 = !DILocation(line: 5869, column: 57, scope: !15698)
!15703 = !DILocation(line: 5869, column: 40, scope: !15698)
!15704 = !DILocation(line: 5869, column: 5, scope: !15698)
!15705 = !DILocation(line: 5870, column: 12, scope: !15706)
!15706 = distinct !DILexicalBlock(scope: !15698, file: !3, line: 5870, column: 12)
!15707 = !DILocation(line: 5870, column: 15, scope: !15706)
!15708 = !DILocation(line: 5870, column: 19, scope: !15706)
!15709 = !DILocation(line: 5870, column: 23, scope: !15706)
!15710 = !DILocation(line: 5870, column: 29, scope: !15706)
!15711 = !DILocation(line: 5871, column: 45, scope: !15706)
!15712 = !DILocation(line: 5870, column: 12, scope: !15698)
!15713 = !DILocation(line: 5872, column: 3, scope: !15706)
!15714 = !DILocation(line: 5873, column: 14, scope: !15698)
!15715 = !DILocation(line: 5873, column: 19, scope: !15698)
!15716 = !DILocation(line: 5873, column: 12, scope: !15698)
!15717 = distinct !{!15717, !15694, !15718}
!15718 = !DILocation(line: 5874, column: 6, scope: !15690)
!15719 = !DILocation(line: 5875, column: 8, scope: !15720)
!15720 = distinct !DILexicalBlock(scope: !15690, file: !3, line: 5875, column: 8)
!15721 = !DILocation(line: 5875, column: 12, scope: !15720)
!15722 = !DILocation(line: 5875, column: 8, scope: !15690)
!15723 = !DILocation(line: 5876, column: 6, scope: !15720)
!15724 = !DILocation(line: 5877, column: 2, scope: !15690)
!15725 = !DILocation(line: 5878, column: 12, scope: !15686)
!15726 = !DILocation(line: 5879, column: 5, scope: !15686)
!15727 = !DILocation(line: 5880, column: 12, scope: !15728)
!15728 = distinct !DILexicalBlock(scope: !15681, file: !3, line: 5880, column: 12)
!15729 = !DILocation(line: 5880, column: 18, scope: !15728)
!15730 = !DILocation(line: 5880, column: 12, scope: !15681)
!15731 = !DILocation(line: 5881, column: 10, scope: !15728)
!15732 = !DILocation(line: 5881, column: 5, scope: !15728)
!15733 = !DILocation(line: 5882, column: 12, scope: !15734)
!15734 = distinct !DILexicalBlock(scope: !15728, file: !3, line: 5882, column: 12)
!15735 = !DILocation(line: 5882, column: 18, scope: !15734)
!15736 = !DILocation(line: 5882, column: 12, scope: !15728)
!15737 = !DILocation(line: 5883, column: 10, scope: !15734)
!15738 = !DILocation(line: 5883, column: 5, scope: !15734)
!15739 = !DILocation(line: 5885, column: 5, scope: !15734)
!15740 = !DILocation(line: 5887, column: 30, scope: !15622)
!15741 = !DILocation(line: 5887, column: 46, scope: !15622)
!15742 = !DILocation(line: 5887, column: 12, scope: !15622)
!15743 = !DILocation(line: 5887, column: 10, scope: !15622)
!15744 = !DILocation(line: 5888, column: 30, scope: !15622)
!15745 = !DILocation(line: 5888, column: 3, scope: !15622)
!15746 = !DILocation(line: 5888, column: 28, scope: !15622)
!15747 = !DILocation(line: 5889, column: 32, scope: !15622)
!15748 = !DILocation(line: 5889, column: 31, scope: !15622)
!15749 = !DILocation(line: 5889, column: 3, scope: !15622)
!15750 = !DILocation(line: 5889, column: 29, scope: !15622)
!15751 = !DILocation(line: 5890, column: 7, scope: !15752)
!15752 = distinct !DILexicalBlock(scope: !15622, file: !3, line: 5890, column: 7)
!15753 = !DILocation(line: 5890, column: 7, scope: !15622)
!15754 = !DILocation(line: 5891, column: 5, scope: !15752)
!15755 = !DILocation(line: 5891, column: 39, scope: !15752)
!15756 = !DILocation(line: 5892, column: 12, scope: !15757)
!15757 = distinct !DILexicalBlock(scope: !15752, file: !3, line: 5892, column: 12)
!15758 = !DILocation(line: 5892, column: 17, scope: !15757)
!15759 = !DILocation(line: 5892, column: 39, scope: !15757)
!15760 = !DILocation(line: 5892, column: 43, scope: !15757)
!15761 = !DILocation(line: 5892, column: 49, scope: !15757)
!15762 = !DILocation(line: 5892, column: 12, scope: !15752)
!15763 = !DILocation(line: 5893, column: 5, scope: !15757)
!15764 = !DILocation(line: 5893, column: 43, scope: !15757)
!15765 = !DILocation(line: 5894, column: 13, scope: !15622)
!15766 = !DILocation(line: 5894, column: 4, scope: !15622)
!15767 = !DILocation(line: 5894, column: 11, scope: !15622)
!15768 = !DILocation(line: 5895, column: 20, scope: !15622)
!15769 = !DILocation(line: 5895, column: 39, scope: !15622)
!15770 = !DILocation(line: 5895, column: 3, scope: !15622)
!15771 = !DILocation(line: 5897, column: 3, scope: !15622)
!15772 = !DILocation(line: 5898, column: 1, scope: !15622)
!15773 = distinct !DISubprogram(name: "delete_omp_context", scope: !3, file: !3, line: 333, type: !15774, scopeLine: 334, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!15774 = !DISubroutineType(types: !15775)
!15775 = !{null, !3146}
!15776 = !DILocalVariable(name: "c", arg: 1, scope: !15773, file: !3, line: 333, type: !3146)
!15777 = !DILocation(line: 333, column: 46, scope: !15773)
!15778 = !DILocation(line: 335, column: 22, scope: !15773)
!15779 = !DILocation(line: 335, column: 25, scope: !15773)
!15780 = !DILocation(line: 335, column: 3, scope: !15773)
!15781 = !DILocation(line: 336, column: 24, scope: !15773)
!15782 = !DILocation(line: 336, column: 27, scope: !15773)
!15783 = !DILocation(line: 336, column: 3, scope: !15773)
!15784 = !DILocation(line: 337, column: 3, scope: !15773)
!15785 = !DILocation(line: 338, column: 1, scope: !15773)
!15786 = distinct !DISubprogram(name: "omp_is_private", scope: !3, file: !3, line: 5601, type: !15556, scopeLine: 5602, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!15787 = !DILocalVariable(name: "ctx", arg: 1, scope: !15786, file: !3, line: 5601, type: !3146)
!15788 = !DILocation(line: 5601, column: 42, scope: !15786)
!15789 = !DILocalVariable(name: "decl", arg: 2, scope: !15786, file: !3, line: 5601, type: !1686)
!15790 = !DILocation(line: 5601, column: 52, scope: !15786)
!15791 = !DILocalVariable(name: "n", scope: !15786, file: !3, line: 5603, type: !3156)
!15792 = !DILocation(line: 5603, column: 19, scope: !15786)
!15793 = !DILocation(line: 5605, column: 26, scope: !15786)
!15794 = !DILocation(line: 5605, column: 31, scope: !15786)
!15795 = !DILocation(line: 5605, column: 58, scope: !15786)
!15796 = !DILocation(line: 5605, column: 42, scope: !15786)
!15797 = !DILocation(line: 5605, column: 7, scope: !15786)
!15798 = !DILocation(line: 5605, column: 5, scope: !15786)
!15799 = !DILocation(line: 5606, column: 7, scope: !15800)
!15800 = distinct !DILexicalBlock(scope: !15786, file: !3, line: 5606, column: 7)
!15801 = !DILocation(line: 5606, column: 9, scope: !15800)
!15802 = !DILocation(line: 5606, column: 7, scope: !15786)
!15803 = !DILocation(line: 5608, column: 11, scope: !15804)
!15804 = distinct !DILexicalBlock(scope: !15805, file: !3, line: 5608, column: 11)
!15805 = distinct !DILexicalBlock(scope: !15800, file: !3, line: 5607, column: 5)
!15806 = !DILocation(line: 5608, column: 14, scope: !15804)
!15807 = !DILocation(line: 5608, column: 20, scope: !15804)
!15808 = !DILocation(line: 5608, column: 11, scope: !15805)
!15809 = !DILocation(line: 5610, column: 8, scope: !15810)
!15810 = distinct !DILexicalBlock(scope: !15811, file: !3, line: 5610, column: 8)
!15811 = distinct !DILexicalBlock(scope: !15804, file: !3, line: 5609, column: 2)
!15812 = !DILocation(line: 5610, column: 15, scope: !15810)
!15813 = !DILocation(line: 5610, column: 12, scope: !15810)
!15814 = !DILocation(line: 5610, column: 8, scope: !15811)
!15815 = !DILocation(line: 5613, column: 8, scope: !15816)
!15816 = distinct !DILexicalBlock(scope: !15810, file: !3, line: 5611, column: 6)
!15817 = !DILocation(line: 5612, column: 8, scope: !15816)
!15818 = !DILocation(line: 5614, column: 8, scope: !15816)
!15819 = !DILocation(line: 5614, column: 11, scope: !15816)
!15820 = !DILocation(line: 5614, column: 17, scope: !15816)
!15821 = !DILocation(line: 5615, column: 8, scope: !15816)
!15822 = !DILocation(line: 5618, column: 6, scope: !15810)
!15823 = !DILocation(line: 5620, column: 17, scope: !15824)
!15824 = distinct !DILexicalBlock(scope: !15804, file: !3, line: 5620, column: 16)
!15825 = !DILocation(line: 5620, column: 20, scope: !15824)
!15826 = !DILocation(line: 5620, column: 26, scope: !15824)
!15827 = !DILocation(line: 5620, column: 43, scope: !15824)
!15828 = !DILocation(line: 5621, column: 9, scope: !15824)
!15829 = !DILocation(line: 5621, column: 13, scope: !15824)
!15830 = !DILocation(line: 5621, column: 20, scope: !15824)
!15831 = !DILocation(line: 5621, column: 17, scope: !15824)
!15832 = !DILocation(line: 5622, column: 6, scope: !15824)
!15833 = !DILocation(line: 5622, column: 10, scope: !15824)
!15834 = !DILocation(line: 5622, column: 15, scope: !15824)
!15835 = !DILocation(line: 5622, column: 27, scope: !15824)
!15836 = !DILocation(line: 5623, column: 10, scope: !15824)
!15837 = !DILocation(line: 5623, column: 13, scope: !15824)
!15838 = !DILocation(line: 5623, column: 32, scope: !15824)
!15839 = !DILocation(line: 5623, column: 49, scope: !15824)
!15840 = !DILocation(line: 5623, column: 46, scope: !15824)
!15841 = !DILocation(line: 5620, column: 16, scope: !15804)
!15842 = !DILocation(line: 5625, column: 9, scope: !15843)
!15843 = distinct !DILexicalBlock(scope: !15844, file: !3, line: 5625, column: 8)
!15844 = distinct !DILexicalBlock(scope: !15824, file: !3, line: 5624, column: 2)
!15845 = !DILocation(line: 5625, column: 12, scope: !15843)
!15846 = !DILocation(line: 5625, column: 18, scope: !15843)
!15847 = !DILocation(line: 5625, column: 39, scope: !15843)
!15848 = !DILocation(line: 5625, column: 8, scope: !15844)
!15849 = !DILocation(line: 5627, column: 6, scope: !15843)
!15850 = !DILocation(line: 5626, column: 6, scope: !15843)
!15851 = !DILocation(line: 5628, column: 14, scope: !15852)
!15852 = distinct !DILexicalBlock(scope: !15843, file: !3, line: 5628, column: 13)
!15853 = !DILocation(line: 5628, column: 17, scope: !15852)
!15854 = !DILocation(line: 5628, column: 23, scope: !15852)
!15855 = !DILocation(line: 5628, column: 41, scope: !15852)
!15856 = !DILocation(line: 5628, column: 13, scope: !15843)
!15857 = !DILocation(line: 5630, column: 6, scope: !15852)
!15858 = !DILocation(line: 5629, column: 6, scope: !15852)
!15859 = !DILocation(line: 5631, column: 2, scope: !15844)
!15860 = !DILocation(line: 5632, column: 15, scope: !15805)
!15861 = !DILocation(line: 5632, column: 22, scope: !15805)
!15862 = !DILocation(line: 5632, column: 19, scope: !15805)
!15863 = !DILocation(line: 5633, column: 8, scope: !15805)
!15864 = !DILocation(line: 5633, column: 12, scope: !15805)
!15865 = !DILocation(line: 5633, column: 17, scope: !15805)
!15866 = !DILocation(line: 5633, column: 29, scope: !15805)
!15867 = !DILocation(line: 5634, column: 5, scope: !15805)
!15868 = !DILocation(line: 5634, column: 8, scope: !15805)
!15869 = !DILocation(line: 5634, column: 27, scope: !15805)
!15870 = !DILocation(line: 5634, column: 44, scope: !15805)
!15871 = !DILocation(line: 5634, column: 41, scope: !15805)
!15872 = !DILocation(line: 0, scope: !15805)
!15873 = !DILocation(line: 5632, column: 14, scope: !15805)
!15874 = !DILocation(line: 5632, column: 7, scope: !15805)
!15875 = !DILocation(line: 5637, column: 7, scope: !15876)
!15876 = distinct !DILexicalBlock(scope: !15786, file: !3, line: 5637, column: 7)
!15877 = !DILocation(line: 5637, column: 12, scope: !15876)
!15878 = !DILocation(line: 5637, column: 24, scope: !15876)
!15879 = !DILocation(line: 5637, column: 7, scope: !15786)
!15880 = !DILocation(line: 5638, column: 5, scope: !15876)
!15881 = !DILocation(line: 5639, column: 12, scope: !15882)
!15882 = distinct !DILexicalBlock(scope: !15876, file: !3, line: 5639, column: 12)
!15883 = !DILocation(line: 5639, column: 17, scope: !15882)
!15884 = !DILocation(line: 5639, column: 12, scope: !15876)
!15885 = !DILocation(line: 5640, column: 28, scope: !15882)
!15886 = !DILocation(line: 5640, column: 33, scope: !15882)
!15887 = !DILocation(line: 5640, column: 48, scope: !15882)
!15888 = !DILocation(line: 5640, column: 12, scope: !15882)
!15889 = !DILocation(line: 5640, column: 5, scope: !15882)
!15890 = !DILocation(line: 5641, column: 3, scope: !15786)
!15891 = !DILocation(line: 5642, column: 1, scope: !15786)
!15892 = distinct !DISubprogram(name: "gimple_omp_for_set_index", scope: !385, file: !385, line: 3472, type: !15893, scopeLine: 3473, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!15893 = !DISubroutineType(types: !15894)
!15894 = !{null, !2014, !2160, !1686}
!15895 = !DILocalVariable(name: "gs", arg: 1, scope: !15892, file: !385, line: 3472, type: !2014)
!15896 = !DILocation(line: 3472, column: 34, scope: !15892)
!15897 = !DILocalVariable(name: "i", arg: 2, scope: !15892, file: !385, line: 3472, type: !2160)
!15898 = !DILocation(line: 3472, column: 45, scope: !15892)
!15899 = !DILocalVariable(name: "index", arg: 3, scope: !15892, file: !385, line: 3472, type: !1686)
!15900 = !DILocation(line: 3472, column: 53, scope: !15892)
!15901 = !DILocation(line: 3475, column: 3, scope: !15892)
!15902 = !DILocation(line: 3476, column: 38, scope: !15892)
!15903 = !DILocation(line: 3476, column: 3, scope: !15892)
!15904 = !DILocation(line: 3476, column: 7, scope: !15892)
!15905 = !DILocation(line: 3476, column: 22, scope: !15892)
!15906 = !DILocation(line: 3476, column: 27, scope: !15892)
!15907 = !DILocation(line: 3476, column: 30, scope: !15892)
!15908 = !DILocation(line: 3476, column: 36, scope: !15892)
!15909 = !DILocation(line: 3477, column: 1, scope: !15892)
!15910 = distinct !DISubprogram(name: "gimple_omp_for_set_initial", scope: !385, file: !385, line: 3505, type: !15893, scopeLine: 3506, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!15911 = !DILocalVariable(name: "gs", arg: 1, scope: !15910, file: !385, line: 3505, type: !2014)
!15912 = !DILocation(line: 3505, column: 36, scope: !15910)
!15913 = !DILocalVariable(name: "i", arg: 2, scope: !15910, file: !385, line: 3505, type: !2160)
!15914 = !DILocation(line: 3505, column: 47, scope: !15910)
!15915 = !DILocalVariable(name: "initial", arg: 3, scope: !15910, file: !385, line: 3505, type: !1686)
!15916 = !DILocation(line: 3505, column: 55, scope: !15910)
!15917 = !DILocation(line: 3508, column: 3, scope: !15910)
!15918 = !DILocation(line: 3509, column: 40, scope: !15910)
!15919 = !DILocation(line: 3509, column: 3, scope: !15910)
!15920 = !DILocation(line: 3509, column: 7, scope: !15910)
!15921 = !DILocation(line: 3509, column: 22, scope: !15910)
!15922 = !DILocation(line: 3509, column: 27, scope: !15910)
!15923 = !DILocation(line: 3509, column: 30, scope: !15910)
!15924 = !DILocation(line: 3509, column: 38, scope: !15910)
!15925 = !DILocation(line: 3510, column: 1, scope: !15910)
!15926 = distinct !DISubprogram(name: "gimple_omp_for_set_cond", scope: !385, file: !385, line: 4073, type: !15927, scopeLine: 4074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!15927 = !DISubroutineType(types: !15928)
!15928 = !{null, !2014, !2160, !134}
!15929 = !DILocalVariable(name: "gs", arg: 1, scope: !15926, file: !385, line: 4073, type: !2014)
!15930 = !DILocation(line: 4073, column: 33, scope: !15926)
!15931 = !DILocalVariable(name: "i", arg: 2, scope: !15926, file: !385, line: 4073, type: !2160)
!15932 = !DILocation(line: 4073, column: 44, scope: !15926)
!15933 = !DILocalVariable(name: "cond", arg: 3, scope: !15926, file: !385, line: 4073, type: !134)
!15934 = !DILocation(line: 4073, column: 62, scope: !15926)
!15935 = !DILocation(line: 4076, column: 3, scope: !15926)
!15936 = !DILocation(line: 4077, column: 3, scope: !15926)
!15937 = !DILocation(line: 4078, column: 37, scope: !15926)
!15938 = !DILocation(line: 4078, column: 3, scope: !15926)
!15939 = !DILocation(line: 4078, column: 7, scope: !15926)
!15940 = !DILocation(line: 4078, column: 22, scope: !15926)
!15941 = !DILocation(line: 4078, column: 27, scope: !15926)
!15942 = !DILocation(line: 4078, column: 30, scope: !15926)
!15943 = !DILocation(line: 4078, column: 35, scope: !15926)
!15944 = !DILocation(line: 4079, column: 1, scope: !15926)
!15945 = distinct !DISubprogram(name: "gimple_omp_for_set_final", scope: !385, file: !385, line: 3538, type: !15893, scopeLine: 3539, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!15946 = !DILocalVariable(name: "gs", arg: 1, scope: !15945, file: !385, line: 3538, type: !2014)
!15947 = !DILocation(line: 3538, column: 34, scope: !15945)
!15948 = !DILocalVariable(name: "i", arg: 2, scope: !15945, file: !385, line: 3538, type: !2160)
!15949 = !DILocation(line: 3538, column: 45, scope: !15945)
!15950 = !DILocalVariable(name: "final", arg: 3, scope: !15945, file: !385, line: 3538, type: !1686)
!15951 = !DILocation(line: 3538, column: 53, scope: !15945)
!15952 = !DILocation(line: 3541, column: 3, scope: !15945)
!15953 = !DILocation(line: 3542, column: 38, scope: !15945)
!15954 = !DILocation(line: 3542, column: 3, scope: !15945)
!15955 = !DILocation(line: 3542, column: 7, scope: !15945)
!15956 = !DILocation(line: 3542, column: 22, scope: !15945)
!15957 = !DILocation(line: 3542, column: 27, scope: !15945)
!15958 = !DILocation(line: 3542, column: 30, scope: !15945)
!15959 = !DILocation(line: 3542, column: 36, scope: !15945)
!15960 = !DILocation(line: 3543, column: 1, scope: !15945)
!15961 = distinct !DISubprogram(name: "gimple_omp_for_set_incr", scope: !385, file: !385, line: 3571, type: !15893, scopeLine: 3572, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!15962 = !DILocalVariable(name: "gs", arg: 1, scope: !15961, file: !385, line: 3571, type: !2014)
!15963 = !DILocation(line: 3571, column: 33, scope: !15961)
!15964 = !DILocalVariable(name: "i", arg: 2, scope: !15961, file: !385, line: 3571, type: !2160)
!15965 = !DILocation(line: 3571, column: 44, scope: !15961)
!15966 = !DILocalVariable(name: "incr", arg: 3, scope: !15961, file: !385, line: 3571, type: !1686)
!15967 = !DILocation(line: 3571, column: 52, scope: !15961)
!15968 = !DILocation(line: 3574, column: 3, scope: !15961)
!15969 = !DILocation(line: 3575, column: 37, scope: !15961)
!15970 = !DILocation(line: 3575, column: 3, scope: !15961)
!15971 = !DILocation(line: 3575, column: 7, scope: !15961)
!15972 = !DILocation(line: 3575, column: 22, scope: !15961)
!15973 = !DILocation(line: 3575, column: 27, scope: !15961)
!15974 = !DILocation(line: 3575, column: 30, scope: !15961)
!15975 = !DILocation(line: 3575, column: 35, scope: !15961)
!15976 = !DILocation(line: 3576, column: 1, scope: !15961)
!15977 = distinct !DISubprogram(name: "goa_stabilize_expr", scope: !3, file: !3, line: 6282, type: !15978, scopeLine: 6284, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!15978 = !DISubroutineType(types: !15979)
!15979 = !{!1330, !2049, !3489, !1686, !1686}
!15980 = !DILocalVariable(name: "expr_p", arg: 1, scope: !15977, file: !3, line: 6282, type: !2049)
!15981 = !DILocation(line: 6282, column: 27, scope: !15977)
!15982 = !DILocalVariable(name: "pre_p", arg: 2, scope: !15977, file: !3, line: 6282, type: !3489)
!15983 = !DILocation(line: 6282, column: 47, scope: !15977)
!15984 = !DILocalVariable(name: "lhs_addr", arg: 3, scope: !15977, file: !3, line: 6282, type: !1686)
!15985 = !DILocation(line: 6282, column: 59, scope: !15977)
!15986 = !DILocalVariable(name: "lhs_var", arg: 4, scope: !15977, file: !3, line: 6283, type: !1686)
!15987 = !DILocation(line: 6283, column: 12, scope: !15977)
!15988 = !DILocalVariable(name: "expr", scope: !15977, file: !3, line: 6285, type: !1686)
!15989 = !DILocation(line: 6285, column: 8, scope: !15977)
!15990 = !DILocation(line: 6285, column: 16, scope: !15977)
!15991 = !DILocation(line: 6285, column: 15, scope: !15977)
!15992 = !DILocalVariable(name: "saw_lhs", scope: !15977, file: !3, line: 6286, type: !1330)
!15993 = !DILocation(line: 6286, column: 7, scope: !15977)
!15994 = !DILocation(line: 6288, column: 23, scope: !15995)
!15995 = distinct !DILexicalBlock(scope: !15977, file: !3, line: 6288, column: 7)
!15996 = !DILocation(line: 6288, column: 29, scope: !15995)
!15997 = !DILocation(line: 6288, column: 7, scope: !15995)
!15998 = !DILocation(line: 6288, column: 7, scope: !15977)
!15999 = !DILocation(line: 6290, column: 17, scope: !16000)
!16000 = distinct !DILexicalBlock(scope: !15995, file: !3, line: 6289, column: 5)
!16001 = !DILocation(line: 6290, column: 8, scope: !16000)
!16002 = !DILocation(line: 6290, column: 15, scope: !16000)
!16003 = !DILocation(line: 6291, column: 7, scope: !16000)
!16004 = !DILocation(line: 6293, column: 22, scope: !16005)
!16005 = distinct !DILexicalBlock(scope: !15977, file: !3, line: 6293, column: 7)
!16006 = !DILocation(line: 6293, column: 7, scope: !16005)
!16007 = !DILocation(line: 6293, column: 7, scope: !15977)
!16008 = !DILocation(line: 6294, column: 5, scope: !16005)
!16009 = !DILocation(line: 6296, column: 11, scope: !15977)
!16010 = !DILocation(line: 6297, column: 11, scope: !15977)
!16011 = !DILocation(line: 6297, column: 3, scope: !15977)
!16012 = !DILocation(line: 6301, column: 39, scope: !16013)
!16013 = distinct !DILexicalBlock(scope: !15977, file: !3, line: 6298, column: 5)
!16014 = !DILocation(line: 6301, column: 63, scope: !16013)
!16015 = !DILocation(line: 6301, column: 70, scope: !16013)
!16016 = !DILocation(line: 6302, column: 10, scope: !16013)
!16017 = !DILocation(line: 6301, column: 18, scope: !16013)
!16018 = !DILocation(line: 6301, column: 15, scope: !16013)
!16019 = !DILocation(line: 6301, column: 7, scope: !16013)
!16020 = !DILocation(line: 6304, column: 39, scope: !16013)
!16021 = !DILocation(line: 6304, column: 63, scope: !16013)
!16022 = !DILocation(line: 6304, column: 70, scope: !16013)
!16023 = !DILocation(line: 6305, column: 10, scope: !16013)
!16024 = !DILocation(line: 6304, column: 18, scope: !16013)
!16025 = !DILocation(line: 6304, column: 15, scope: !16013)
!16026 = !DILocation(line: 6306, column: 7, scope: !16013)
!16027 = !DILocation(line: 6308, column: 15, scope: !16013)
!16028 = !DILocation(line: 6308, column: 7, scope: !16013)
!16029 = !DILocation(line: 6312, column: 36, scope: !16030)
!16030 = distinct !DILexicalBlock(scope: !16013, file: !3, line: 6309, column: 2)
!16031 = !DILocation(line: 6312, column: 60, scope: !16030)
!16032 = !DILocation(line: 6313, column: 7, scope: !16030)
!16033 = !DILocation(line: 6313, column: 17, scope: !16030)
!16034 = !DILocation(line: 6312, column: 15, scope: !16030)
!16035 = !DILocation(line: 6312, column: 12, scope: !16030)
!16036 = !DILocation(line: 6314, column: 36, scope: !16030)
!16037 = !DILocation(line: 6314, column: 60, scope: !16030)
!16038 = !DILocation(line: 6315, column: 7, scope: !16030)
!16039 = !DILocation(line: 6315, column: 17, scope: !16030)
!16040 = !DILocation(line: 6314, column: 15, scope: !16030)
!16041 = !DILocation(line: 6314, column: 12, scope: !16030)
!16042 = !DILocation(line: 6316, column: 4, scope: !16030)
!16043 = !DILocation(line: 6318, column: 4, scope: !16030)
!16044 = !DILocation(line: 6320, column: 7, scope: !16013)
!16045 = !DILocation(line: 6322, column: 7, scope: !16013)
!16046 = !DILocation(line: 6325, column: 7, scope: !16047)
!16047 = distinct !DILexicalBlock(scope: !15977, file: !3, line: 6325, column: 7)
!16048 = !DILocation(line: 6325, column: 15, scope: !16047)
!16049 = !DILocation(line: 6325, column: 7, scope: !15977)
!16050 = !DILocalVariable(name: "gs", scope: !16051, file: !3, line: 6327, type: !1329)
!16051 = distinct !DILexicalBlock(scope: !16047, file: !3, line: 6326, column: 5)
!16052 = !DILocation(line: 6327, column: 28, scope: !16051)
!16053 = !DILocation(line: 6328, column: 27, scope: !16051)
!16054 = !DILocation(line: 6328, column: 35, scope: !16051)
!16055 = !DILocation(line: 6328, column: 12, scope: !16051)
!16056 = !DILocation(line: 6328, column: 10, scope: !16051)
!16057 = !DILocation(line: 6329, column: 11, scope: !16058)
!16058 = distinct !DILexicalBlock(scope: !16051, file: !3, line: 6329, column: 11)
!16059 = !DILocation(line: 6329, column: 14, scope: !16058)
!16060 = !DILocation(line: 6329, column: 11, scope: !16051)
!16061 = !DILocation(line: 6330, column: 10, scope: !16058)
!16062 = !DILocation(line: 6330, column: 2, scope: !16058)
!16063 = !DILocation(line: 6331, column: 5, scope: !16051)
!16064 = !DILocation(line: 6333, column: 10, scope: !15977)
!16065 = !DILocation(line: 6333, column: 3, scope: !15977)
!16066 = !DILocation(line: 6334, column: 1, scope: !15977)
!16067 = distinct !DISubprogram(name: "goa_lhs_expr_p", scope: !3, file: !3, line: 6246, type: !16068, scopeLine: 6247, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!16068 = !DISubroutineType(types: !16069)
!16069 = !{!1804, !1686, !1686}
!16070 = !DILocalVariable(name: "expr", arg: 1, scope: !16067, file: !3, line: 6246, type: !1686)
!16071 = !DILocation(line: 6246, column: 22, scope: !16067)
!16072 = !DILocalVariable(name: "addr", arg: 2, scope: !16067, file: !3, line: 6246, type: !1686)
!16073 = !DILocation(line: 6246, column: 33, scope: !16067)
!16074 = !DILocation(line: 6251, column: 3, scope: !16067)
!16075 = !DILocation(line: 6253, column: 7, scope: !16076)
!16076 = distinct !DILexicalBlock(scope: !16067, file: !3, line: 6253, column: 7)
!16077 = !DILocation(line: 6253, column: 24, scope: !16076)
!16078 = !DILocation(line: 6253, column: 7, scope: !16067)
!16079 = !DILocation(line: 6255, column: 14, scope: !16080)
!16080 = distinct !DILexicalBlock(scope: !16076, file: !3, line: 6254, column: 5)
!16081 = !DILocation(line: 6255, column: 12, scope: !16080)
!16082 = !DILocation(line: 6256, column: 7, scope: !16080)
!16083 = !DILocation(line: 6256, column: 14, scope: !16080)
!16084 = !DILocation(line: 6256, column: 22, scope: !16080)
!16085 = !DILocation(line: 6256, column: 19, scope: !16080)
!16086 = !DILocation(line: 6257, column: 7, scope: !16080)
!16087 = !DILocation(line: 6257, column: 11, scope: !16080)
!16088 = !DILocation(line: 6258, column: 4, scope: !16080)
!16089 = !DILocation(line: 6258, column: 7, scope: !16080)
!16090 = !DILocation(line: 6258, column: 24, scope: !16080)
!16091 = !DILocation(line: 6259, column: 7, scope: !16080)
!16092 = !DILocation(line: 6259, column: 10, scope: !16080)
!16093 = !DILocation(line: 6259, column: 30, scope: !16080)
!16094 = !DILocation(line: 6259, column: 27, scope: !16080)
!16095 = !DILocation(line: 6260, column: 7, scope: !16080)
!16096 = !DILocation(line: 6260, column: 30, scope: !16080)
!16097 = !DILocation(line: 6260, column: 48, scope: !16080)
!16098 = !DILocation(line: 6260, column: 10, scope: !16080)
!16099 = !DILocation(line: 0, scope: !16080)
!16100 = !DILocation(line: 6262, column: 11, scope: !16101)
!16101 = distinct !DILexicalBlock(scope: !16080, file: !3, line: 6261, column: 2)
!16102 = !DILocation(line: 6262, column: 9, scope: !16101)
!16103 = !DILocation(line: 6263, column: 11, scope: !16101)
!16104 = !DILocation(line: 6263, column: 9, scope: !16101)
!16105 = distinct !{!16105, !16082, !16106}
!16106 = !DILocation(line: 6264, column: 2, scope: !16080)
!16107 = !DILocation(line: 6265, column: 11, scope: !16108)
!16108 = distinct !DILexicalBlock(scope: !16080, file: !3, line: 6265, column: 11)
!16109 = !DILocation(line: 6265, column: 19, scope: !16108)
!16110 = !DILocation(line: 6265, column: 16, scope: !16108)
!16111 = !DILocation(line: 6265, column: 11, scope: !16080)
!16112 = !DILocation(line: 6266, column: 2, scope: !16108)
!16113 = !DILocation(line: 6267, column: 15, scope: !16080)
!16114 = !DILocation(line: 6267, column: 32, scope: !16080)
!16115 = !DILocation(line: 6268, column: 8, scope: !16080)
!16116 = !DILocation(line: 6268, column: 11, scope: !16080)
!16117 = !DILocation(line: 6268, column: 28, scope: !16080)
!16118 = !DILocation(line: 6269, column: 8, scope: !16080)
!16119 = !DILocation(line: 6269, column: 11, scope: !16080)
!16120 = !DILocation(line: 6269, column: 37, scope: !16080)
!16121 = !DILocation(line: 6269, column: 34, scope: !16080)
!16122 = !DILocation(line: 6267, column: 14, scope: !16080)
!16123 = !DILocation(line: 6267, column: 7, scope: !16080)
!16124 = !DILocation(line: 6271, column: 7, scope: !16125)
!16125 = distinct !DILexicalBlock(scope: !16067, file: !3, line: 6271, column: 7)
!16126 = !DILocation(line: 6271, column: 24, scope: !16125)
!16127 = !DILocation(line: 6271, column: 37, scope: !16125)
!16128 = !DILocation(line: 6271, column: 40, scope: !16125)
!16129 = !DILocation(line: 6271, column: 48, scope: !16125)
!16130 = !DILocation(line: 6271, column: 45, scope: !16125)
!16131 = !DILocation(line: 6271, column: 7, scope: !16067)
!16132 = !DILocation(line: 6272, column: 5, scope: !16125)
!16133 = !DILocation(line: 6273, column: 3, scope: !16067)
!16134 = !DILocation(line: 6274, column: 1, scope: !16067)
!16135 = distinct !DISubprogram(name: "copy_if_shared_r", scope: !3, file: !3, line: 887, type: !4165, scopeLine: 889, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!16136 = !DILocalVariable(name: "tp", arg: 1, scope: !16135, file: !3, line: 887, type: !2049)
!16137 = !DILocation(line: 887, column: 25, scope: !16135)
!16138 = !DILocalVariable(name: "walk_subtrees", arg: 2, scope: !16135, file: !3, line: 887, type: !4167)
!16139 = !DILocation(line: 887, column: 34, scope: !16135)
!16140 = !DILocalVariable(name: "data", arg: 3, scope: !16135, file: !3, line: 888, type: !1685)
!16141 = !DILocation(line: 888, column: 11, scope: !16135)
!16142 = !DILocalVariable(name: "t", scope: !16135, file: !3, line: 890, type: !1686)
!16143 = !DILocation(line: 890, column: 8, scope: !16135)
!16144 = !DILocation(line: 890, column: 13, scope: !16135)
!16145 = !DILocation(line: 890, column: 12, scope: !16135)
!16146 = !DILocalVariable(name: "code", scope: !16135, file: !3, line: 891, type: !134)
!16147 = !DILocation(line: 891, column: 18, scope: !16135)
!16148 = !DILocation(line: 891, column: 25, scope: !16135)
!16149 = !DILocation(line: 897, column: 7, scope: !16150)
!16150 = distinct !DILexicalBlock(scope: !16135, file: !3, line: 897, column: 7)
!16151 = !DILocation(line: 897, column: 30, scope: !16150)
!16152 = !DILocation(line: 898, column: 7, scope: !16150)
!16153 = !DILocation(line: 898, column: 10, scope: !16150)
!16154 = !DILocation(line: 898, column: 33, scope: !16150)
!16155 = !DILocation(line: 899, column: 7, scope: !16150)
!16156 = !DILocation(line: 899, column: 10, scope: !16150)
!16157 = !DILocation(line: 899, column: 33, scope: !16150)
!16158 = !DILocation(line: 897, column: 7, scope: !16135)
!16159 = !DILocation(line: 901, column: 11, scope: !16160)
!16160 = distinct !DILexicalBlock(scope: !16161, file: !3, line: 901, column: 11)
!16161 = distinct !DILexicalBlock(scope: !16150, file: !3, line: 900, column: 5)
!16162 = !DILocation(line: 901, column: 11, scope: !16161)
!16163 = !DILocation(line: 902, column: 3, scope: !16160)
!16164 = !DILocation(line: 902, column: 17, scope: !16160)
!16165 = !DILocation(line: 902, column: 2, scope: !16160)
!16166 = !DILocation(line: 904, column: 2, scope: !16160)
!16167 = !DILocation(line: 904, column: 19, scope: !16160)
!16168 = !DILocation(line: 905, column: 5, scope: !16161)
!16169 = !DILocation(line: 909, column: 12, scope: !16170)
!16170 = distinct !DILexicalBlock(scope: !16150, file: !3, line: 909, column: 12)
!16171 = !DILocation(line: 909, column: 12, scope: !16150)
!16172 = !DILocation(line: 911, column: 7, scope: !16173)
!16173 = distinct !DILexicalBlock(scope: !16170, file: !3, line: 910, column: 5)
!16174 = !DILocation(line: 912, column: 8, scope: !16173)
!16175 = !DILocation(line: 912, column: 22, scope: !16173)
!16176 = !DILocation(line: 913, column: 5, scope: !16173)
!16177 = !DILocation(line: 917, column: 5, scope: !16170)
!16178 = !DILocation(line: 917, column: 22, scope: !16170)
!16179 = !DILocation(line: 919, column: 3, scope: !16135)
!16180 = distinct !DISubprogram(name: "unmark_visited_r", scope: !3, file: !3, line: 923, type: !4165, scopeLine: 925, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!16181 = !DILocalVariable(name: "tp", arg: 1, scope: !16180, file: !3, line: 923, type: !2049)
!16182 = !DILocation(line: 923, column: 25, scope: !16180)
!16183 = !DILocalVariable(name: "walk_subtrees", arg: 2, scope: !16180, file: !3, line: 923, type: !4167)
!16184 = !DILocation(line: 923, column: 34, scope: !16180)
!16185 = !DILocalVariable(name: "data", arg: 3, scope: !16180, file: !3, line: 924, type: !1685)
!16186 = !DILocation(line: 924, column: 11, scope: !16180)
!16187 = !DILocation(line: 926, column: 7, scope: !16188)
!16188 = distinct !DILexicalBlock(scope: !16180, file: !3, line: 926, column: 7)
!16189 = !DILocation(line: 926, column: 7, scope: !16180)
!16190 = !DILocation(line: 927, column: 5, scope: !16188)
!16191 = !DILocation(line: 927, column: 24, scope: !16188)
!16192 = !DILocation(line: 929, column: 6, scope: !16188)
!16193 = !DILocation(line: 929, column: 20, scope: !16188)
!16194 = !DILocation(line: 931, column: 3, scope: !16180)
!16195 = distinct !DISubprogram(name: "gimple_op_ptr", scope: !385, file: !385, line: 1647, type: !16196, scopeLine: 1648, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!16196 = !DISubroutineType(types: !16197)
!16197 = !{!2049, !3806, !7}
!16198 = !DILocalVariable(name: "gs", arg: 1, scope: !16195, file: !385, line: 1647, type: !3806)
!16199 = !DILocation(line: 1647, column: 29, scope: !16195)
!16200 = !DILocalVariable(name: "i", arg: 2, scope: !16195, file: !385, line: 1647, type: !7)
!16201 = !DILocation(line: 1647, column: 42, scope: !16195)
!16202 = !DILocation(line: 1649, column: 23, scope: !16203)
!16203 = distinct !DILexicalBlock(scope: !16195, file: !385, line: 1649, column: 7)
!16204 = !DILocation(line: 1649, column: 7, scope: !16203)
!16205 = !DILocation(line: 1649, column: 7, scope: !16195)
!16206 = !DILocation(line: 1654, column: 26, scope: !16207)
!16207 = distinct !DILexicalBlock(scope: !16203, file: !385, line: 1650, column: 5)
!16208 = !DILocation(line: 1654, column: 14, scope: !16207)
!16209 = !DILocation(line: 1654, column: 52, scope: !16207)
!16210 = !DILocation(line: 1654, column: 50, scope: !16207)
!16211 = !DILocation(line: 1654, column: 7, scope: !16207)
!16212 = !DILocation(line: 1657, column: 5, scope: !16203)
!16213 = !DILocation(line: 1658, column: 1, scope: !16195)
!16214 = distinct !DISubprogram(name: "gimple_has_ops", scope: !385, file: !385, line: 1274, type: !11773, scopeLine: 1275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!16215 = !DILocalVariable(name: "g", arg: 1, scope: !16214, file: !385, line: 1274, type: !3806)
!16216 = !DILocation(line: 1274, column: 30, scope: !16214)
!16217 = !DILocation(line: 1276, column: 23, scope: !16214)
!16218 = !DILocation(line: 1276, column: 10, scope: !16214)
!16219 = !DILocation(line: 1276, column: 26, scope: !16214)
!16220 = !DILocation(line: 1276, column: 41, scope: !16214)
!16221 = !DILocation(line: 1276, column: 57, scope: !16214)
!16222 = !DILocation(line: 1276, column: 44, scope: !16214)
!16223 = !DILocation(line: 1276, column: 60, scope: !16214)
!16224 = !DILocation(line: 0, scope: !16214)
!16225 = !DILocation(line: 1276, column: 3, scope: !16214)
!16226 = distinct !DISubprogram(name: "gimple_ops", scope: !385, file: !385, line: 1614, type: !11699, scopeLine: 1615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!16227 = !DILocalVariable(name: "gs", arg: 1, scope: !16226, file: !385, line: 1614, type: !2014)
!16228 = !DILocation(line: 1614, column: 20, scope: !16226)
!16229 = !DILocalVariable(name: "off", scope: !16226, file: !385, line: 1616, type: !2160)
!16230 = !DILocation(line: 1616, column: 10, scope: !16226)
!16231 = !DILocation(line: 1621, column: 56, scope: !16226)
!16232 = !DILocation(line: 1621, column: 28, scope: !16226)
!16233 = !DILocation(line: 1621, column: 9, scope: !16226)
!16234 = !DILocation(line: 1621, column: 7, scope: !16226)
!16235 = !DILocation(line: 1622, column: 3, scope: !16226)
!16236 = !DILocation(line: 1624, column: 29, scope: !16226)
!16237 = !DILocation(line: 1624, column: 20, scope: !16226)
!16238 = !DILocation(line: 1624, column: 34, scope: !16226)
!16239 = !DILocation(line: 1624, column: 32, scope: !16226)
!16240 = !DILocation(line: 1624, column: 10, scope: !16226)
!16241 = !DILocation(line: 1624, column: 3, scope: !16226)
!16242 = distinct !DISubprogram(name: "gimple_statement_structure", scope: !385, file: !385, line: 1073, type: !16243, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!16243 = !DISubroutineType(types: !16244)
!16244 = !{!1658, !2014}
!16245 = !DILocalVariable(name: "gs", arg: 1, scope: !16242, file: !385, line: 1073, type: !2014)
!16246 = !DILocation(line: 1073, column: 36, scope: !16242)
!16247 = !DILocation(line: 1075, column: 37, scope: !16242)
!16248 = !DILocation(line: 1075, column: 24, scope: !16242)
!16249 = !DILocation(line: 1075, column: 10, scope: !16242)
!16250 = !DILocation(line: 1075, column: 3, scope: !16242)
!16251 = distinct !DISubprogram(name: "gss_for_code", scope: !385, file: !385, line: 1061, type: !16252, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!16252 = !DISubroutineType(types: !16253)
!16253 = !{!1658, !384}
!16254 = !DILocalVariable(name: "code", arg: 1, scope: !16251, file: !385, line: 1061, type: !384)
!16255 = !DILocation(line: 1061, column: 32, scope: !16251)
!16256 = !DILocation(line: 1066, column: 24, scope: !16251)
!16257 = !DILocation(line: 1066, column: 10, scope: !16251)
!16258 = !DILocation(line: 1066, column: 3, scope: !16251)
!16259 = distinct !DISubprogram(name: "gimple_call_fn", scope: !385, file: !385, line: 1911, type: !3814, scopeLine: 1912, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3242)
!16260 = !DILocalVariable(name: "gs", arg: 1, scope: !16259, file: !385, line: 1911, type: !3806)
!16261 = !DILocation(line: 1911, column: 30, scope: !16259)
!16262 = !DILocation(line: 1914, column: 21, scope: !16259)
!16263 = !DILocation(line: 1914, column: 10, scope: !16259)
!16264 = !DILocation(line: 1914, column: 3, scope: !16259)
