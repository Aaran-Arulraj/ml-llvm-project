; ModuleID = 'blender/source/blender/bmesh/tools/bmesh_bevel.c'
source_filename = "blender/source/blender/bmesh/tools/bmesh_bevel.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.BMesh = type { i32, i32, i32, i32, i32, i32, i32, i8, i8, %struct.BLI_mempool*, %struct.BLI_mempool*, %struct.BLI_mempool*, %struct.BLI_mempool*, %struct.BMVert**, %struct.BMEdge**, %struct.BMFace**, i32, i32, i32, %struct.BLI_mempool*, %struct.BLI_mempool*, %struct.BLI_mempool*, i32, %struct.BMOperator*, %struct.CustomData, %struct.CustomData, %struct.CustomData, %struct.CustomData, i16, i32, i32, i32, %struct.ListBase, %struct.BMFace*, %struct.ListBase, i8* }
%struct.BMVert = type { %struct.BMHeader, %struct.BMFlagLayer*, [3 x float], [3 x float], %struct.BMEdge* }
%struct.BMHeader = type { i8*, i32, i8, i8, i8 }
%struct.BMFlagLayer = type { i16 }
%struct.BMEdge = type { %struct.BMHeader, %struct.BMFlagLayer*, %struct.BMVert*, %struct.BMVert*, %struct.BMLoop*, %struct.BMDiskLink, %struct.BMDiskLink }
%struct.BMLoop = type { %struct.BMHeader, %struct.BMVert*, %struct.BMEdge*, %struct.BMFace*, %struct.BMLoop*, %struct.BMLoop*, %struct.BMLoop*, %struct.BMLoop* }
%struct.BMDiskLink = type { %struct.BMEdge*, %struct.BMEdge* }
%struct.BLI_mempool = type opaque
%struct.BMOperator = type { [16 x %struct.BMOpSlot], [16 x %struct.BMOpSlot], void (%struct.BMesh*, %struct.BMOperator*)*, %struct.MemArena*, i32, i32, i32 }
%struct.BMOpSlot = type { i8*, i32, %union.eBMOpSlotSubType_Union, i32, %union.anon }
%union.eBMOpSlotSubType_Union = type { i32 }
%union.anon = type { i8*, [8 x i8] }
%struct.MemArena = type opaque
%struct.CustomData = type { %struct.CustomDataLayer*, [41 x i32], i32, i32, i32, %struct.BLI_mempool*, %struct.CustomDataExternal* }
%struct.CustomDataLayer = type { i32, i32, i32, i32, i32, i32, i32, i32, [64 x i8], i8* }
%struct.CustomDataExternal = type { [1024 x i8] }
%struct.BMFace = type { %struct.BMHeader, %struct.BMFlagLayer*, %struct.BMLoop*, i32, [3 x float], i16 }
%struct.ListBase = type { i8*, i8* }
%struct.MDeformVert = type { %struct.MDeformWeight*, i32, i32 }
%struct.MDeformWeight = type { i32, float }
%struct.BMIter = type { %union.anon.0, void (i8*)*, i8* (i8*)*, i32, i8 }
%union.anon.0 = type { %struct.BMIter__face_of_vert }
%struct.BMIter__face_of_vert = type { %struct.BMVert*, %struct.BMLoop*, %struct.BMLoop*, %struct.BMEdge*, %struct.BMEdge* }
%struct.BevVert = type { %struct.BMVert*, i32, i32, i32, float, i8, i8, %struct.EdgeHalf*, %struct.BMEdge**, %struct.VMesh* }
%struct.EdgeHalf = type { %struct.EdgeHalf*, %struct.EdgeHalf*, %struct.BMEdge*, %struct.BMFace*, %struct.BMFace*, %struct.BoundVert*, %struct.BoundVert*, i32, float, float, float, float, i8, i8, i8 }
%struct.BoundVert = type { %struct.BoundVert*, %struct.BoundVert*, %struct.NewVert, %struct.EdgeHalf*, %struct.EdgeHalf*, %struct.EdgeHalf*, i32, %struct.Profile, i8 }
%struct.NewVert = type { %struct.BMVert*, [3 x float] }
%struct.Profile = type { float, [3 x float], [3 x float], [3 x float], [3 x float], [3 x float], [3 x float], float*, float* }
%struct.VMesh = type { %struct.NewVert*, %struct.BoundVert*, i32, i32, i32 }
%struct.BevelParams = type { %struct.GHash*, %struct.MemArena*, %struct.ProfileSpacing, float, i32, i32, float, i8, i8, i8, i8, %struct.MDeformVert*, i32, i32 }
%struct.GHash = type opaque
%struct.ProfileSpacing = type { float*, float*, i32 }
%struct.GHashIterator = type { %struct.GHash*, %struct.Entry*, i32 }
%struct.Entry = type opaque
%struct._GSQueue = type opaque
%struct.BMIter__elem_of_mesh = type { %struct.BLI_mempool_iter }
%struct.BLI_mempool_iter = type { %struct.BLI_mempool*, %struct.BLI_mempool_chunk*, i32 }
%struct.BLI_mempool_chunk = type opaque
%struct.BMIter__edge_of_vert = type { %struct.BMVert*, %struct.BMEdge*, %struct.BMEdge* }
%struct.BMIter__loop_of_vert = type { %struct.BMVert*, %struct.BMLoop*, %struct.BMLoop*, %struct.BMEdge*, %struct.BMEdge* }
%struct.BMIter__vert_of_edge = type { %struct.BMEdge* }
%struct.BMIter__face_of_edge = type { %struct.BMEdge*, %struct.BMLoop*, %struct.BMLoop* }
%struct.BMIter__vert_of_face = type { %struct.BMFace*, %struct.BMLoop*, %struct.BMLoop* }
%struct.BMIter__edge_of_face = type { %struct.BMFace*, %struct.BMLoop*, %struct.BMLoop* }
%struct.BMIter__loop_of_face = type { %struct.BMFace*, %struct.BMLoop*, %struct.BMLoop* }
%struct.BMIter__loop_of_loop = type { %struct.BMLoop*, %struct.BMLoop*, %struct.BMLoop* }
%struct.BMIter__loop_of_edge = type { %struct.BMEdge*, %struct.BMLoop*, %struct.BMLoop* }
%struct._gh_Entry = type { i8*, i8*, i8* }
%struct.MLoopUV = type { [2 x float], i32 }

@__func__.BM_mesh_bevel = private unnamed_addr constant [14 x i8] c"BM_mesh_bevel\00", align 1
@MEM_allocN_len = external dso_local global i64 (i8*)*, align 8
@.str = private unnamed_addr constant [13 x i8] c"BLI_array.vv\00", align 1
@.str.1 = private unnamed_addr constant [13 x i8] c"BLI_array.vf\00", align 1
@MEM_freeN = external dso_local global void (i8*)*, align 8
@.str.2 = private unnamed_addr constant [13 x i8] c"BLI_array.ee\00", align 1
@.str.3 = private unnamed_addr constant [17 x i8] c"BLI_array.vv_fix\00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local void @BM_mesh_bevel(%struct.BMesh* %bm, float %offset, i32 %offset_type, float %segments, float %profile, i8 zeroext %vertex_only, i8 zeroext %use_weights, i8 zeroext %limit_offset, %struct.MDeformVert* %dvert, i32 %vertex_group, i32 %mat) #0 !dbg !318 {
entry:
  %bm.addr = alloca %struct.BMesh*, align 8
  %offset.addr = alloca float, align 4
  %offset_type.addr = alloca i32, align 4
  %segments.addr = alloca float, align 4
  %profile.addr = alloca float, align 4
  %vertex_only.addr = alloca i8, align 1
  %use_weights.addr = alloca i8, align 1
  %limit_offset.addr = alloca i8, align 1
  %dvert.addr = alloca %struct.MDeformVert*, align 8
  %vertex_group.addr = alloca i32, align 4
  %mat.addr = alloca i32, align 4
  %iter = alloca %struct.BMIter, align 8
  %v = alloca %struct.BMVert*, align 8
  %v_next = alloca %struct.BMVert*, align 8
  %e = alloca %struct.BMEdge*, align 8
  %bv = alloca %struct.BevVert*, align 8
  %bp = alloca %struct.BevelParams, align 8
  store %struct.BMesh* %bm, %struct.BMesh** %bm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMesh** %bm.addr, metadata !476, metadata !DIExpression()), !dbg !477
  store float %offset, float* %offset.addr, align 4
  call void @llvm.dbg.declare(metadata float* %offset.addr, metadata !478, metadata !DIExpression()), !dbg !479
  store i32 %offset_type, i32* %offset_type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %offset_type.addr, metadata !480, metadata !DIExpression()), !dbg !481
  store float %segments, float* %segments.addr, align 4
  call void @llvm.dbg.declare(metadata float* %segments.addr, metadata !482, metadata !DIExpression()), !dbg !483
  store float %profile, float* %profile.addr, align 4
  call void @llvm.dbg.declare(metadata float* %profile.addr, metadata !484, metadata !DIExpression()), !dbg !485
  store i8 %vertex_only, i8* %vertex_only.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %vertex_only.addr, metadata !486, metadata !DIExpression()), !dbg !487
  store i8 %use_weights, i8* %use_weights.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %use_weights.addr, metadata !488, metadata !DIExpression()), !dbg !489
  store i8 %limit_offset, i8* %limit_offset.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %limit_offset.addr, metadata !490, metadata !DIExpression()), !dbg !491
  store %struct.MDeformVert* %dvert, %struct.MDeformVert** %dvert.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.MDeformVert** %dvert.addr, metadata !492, metadata !DIExpression()), !dbg !493
  store i32 %vertex_group, i32* %vertex_group.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %vertex_group.addr, metadata !494, metadata !DIExpression()), !dbg !495
  store i32 %mat, i32* %mat.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mat.addr, metadata !496, metadata !DIExpression()), !dbg !497
  call void @llvm.dbg.declare(metadata %struct.BMIter* %iter, metadata !498, metadata !DIExpression()), !dbg !586
  call void @llvm.dbg.declare(metadata %struct.BMVert** %v, metadata !587, metadata !DIExpression()), !dbg !588
  call void @llvm.dbg.declare(metadata %struct.BMVert** %v_next, metadata !589, metadata !DIExpression()), !dbg !590
  call void @llvm.dbg.declare(metadata %struct.BMEdge** %e, metadata !591, metadata !DIExpression()), !dbg !592
  call void @llvm.dbg.declare(metadata %struct.BevVert** %bv, metadata !593, metadata !DIExpression()), !dbg !594
  call void @llvm.dbg.declare(metadata %struct.BevelParams* %bp, metadata !595, metadata !DIExpression()), !dbg !621
  %0 = bitcast %struct.BevelParams* %bp to i8*, !dbg !621
  call void @llvm.memset.p0i8.i64(i8* align 8 %0, i8 0, i64 80, i1 false), !dbg !621
  %1 = load float, float* %offset.addr, align 4, !dbg !622
  %offset1 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %bp, i32 0, i32 3, !dbg !623
  store float %1, float* %offset1, align 8, !dbg !624
  %2 = load i32, i32* %offset_type.addr, align 4, !dbg !625
  %offset_type2 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %bp, i32 0, i32 4, !dbg !626
  store i32 %2, i32* %offset_type2, align 4, !dbg !627
  %3 = load float, float* %segments.addr, align 4, !dbg !628
  %conv = fptosi float %3 to i32, !dbg !628
  %seg = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %bp, i32 0, i32 5, !dbg !629
  store i32 %conv, i32* %seg, align 8, !dbg !630
  %4 = load float, float* %profile.addr, align 4, !dbg !631
  %mul = fmul float 4.000000e+00, %4, !dbg !632
  %pro_super_r = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %bp, i32 0, i32 6, !dbg !633
  store float %mul, float* %pro_super_r, align 4, !dbg !634
  %5 = load i8, i8* %vertex_only.addr, align 1, !dbg !635
  %vertex_only3 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %bp, i32 0, i32 7, !dbg !636
  store i8 %5, i8* %vertex_only3, align 8, !dbg !637
  %6 = load i8, i8* %use_weights.addr, align 1, !dbg !638
  %use_weights4 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %bp, i32 0, i32 8, !dbg !639
  store i8 %6, i8* %use_weights4, align 1, !dbg !640
  %preserve_widths = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %bp, i32 0, i32 9, !dbg !641
  store i8 0, i8* %preserve_widths, align 2, !dbg !642
  %7 = load i8, i8* %limit_offset.addr, align 1, !dbg !643
  %limit_offset5 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %bp, i32 0, i32 10, !dbg !644
  store i8 %7, i8* %limit_offset5, align 1, !dbg !645
  %8 = load %struct.MDeformVert*, %struct.MDeformVert** %dvert.addr, align 8, !dbg !646
  %dvert6 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %bp, i32 0, i32 11, !dbg !647
  store %struct.MDeformVert* %8, %struct.MDeformVert** %dvert6, align 8, !dbg !648
  %9 = load i32, i32* %vertex_group.addr, align 4, !dbg !649
  %vertex_group7 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %bp, i32 0, i32 12, !dbg !650
  store i32 %9, i32* %vertex_group7, align 8, !dbg !651
  %10 = load i32, i32* %mat.addr, align 4, !dbg !652
  %mat_nr = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %bp, i32 0, i32 13, !dbg !653
  store i32 %10, i32* %mat_nr, align 4, !dbg !654
  %pro_super_r8 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %bp, i32 0, i32 6, !dbg !655
  %11 = load float, float* %pro_super_r8, align 4, !dbg !655
  %cmp = fcmp olt float %11, 0x3FE3333340000000, !dbg !657
  br i1 %cmp, label %if.then, label %if.end, !dbg !658

if.then:                                          ; preds = %entry
  %pro_super_r10 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %bp, i32 0, i32 6, !dbg !659
  store float 0x3FE3333340000000, float* %pro_super_r10, align 4, !dbg !660
  br label %if.end, !dbg !661

if.end:                                           ; preds = %if.then, %entry
  %offset11 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %bp, i32 0, i32 3, !dbg !662
  %12 = load float, float* %offset11, align 8, !dbg !662
  %cmp12 = fcmp ogt float %12, 0.000000e+00, !dbg !664
  br i1 %cmp12, label %if.then14, label %if.end95, !dbg !665

if.then14:                                        ; preds = %if.end
  %call = call %struct.GHash* @BLI_ghash_ptr_new(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__func__.BM_mesh_bevel, i64 0, i64 0)), !dbg !666
  %vert_hash = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %bp, i32 0, i32 0, !dbg !668
  store %struct.GHash* %call, %struct.GHash** %vert_hash, align 8, !dbg !669
  %call15 = call %struct.MemArena* @BLI_memarena_new(i64 65528, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__func__.BM_mesh_bevel, i64 0, i64 0)), !dbg !670
  %mem_arena = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %bp, i32 0, i32 1, !dbg !671
  store %struct.MemArena* %call15, %struct.MemArena** %mem_arena, align 8, !dbg !672
  %mem_arena16 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %bp, i32 0, i32 1, !dbg !673
  %13 = load %struct.MemArena*, %struct.MemArena** %mem_arena16, align 8, !dbg !673
  call void @BLI_memarena_use_calloc(%struct.MemArena* %13), !dbg !674
  call void @set_profile_spacing(%struct.BevelParams* %bp), !dbg !675
  %14 = load i8, i8* %limit_offset.addr, align 1, !dbg !676
  %tobool = icmp ne i8 %14, 0, !dbg !676
  br i1 %tobool, label %if.then17, label %if.end20, !dbg !678

if.then17:                                        ; preds = %if.then14
  %15 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !679
  %call18 = call float @bevel_limit_offset(%struct.BMesh* %15, %struct.BevelParams* %bp), !dbg !680
  %offset19 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %bp, i32 0, i32 3, !dbg !681
  store float %call18, float* %offset19, align 8, !dbg !682
  br label %if.end20, !dbg !683

if.end20:                                         ; preds = %if.then17, %if.then14
  %16 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !684
  %call21 = call i8* @BM_iter_new(%struct.BMIter* %iter, %struct.BMesh* %16, i8 zeroext 1, i8* null), !dbg !684
  %17 = bitcast i8* %call21 to %struct.BMVert*, !dbg !684
  store %struct.BMVert* %17, %struct.BMVert** %v, align 8, !dbg !684
  br label %for.cond, !dbg !684

for.cond:                                         ; preds = %for.inc, %if.end20
  %18 = load %struct.BMVert*, %struct.BMVert** %v, align 8, !dbg !686
  %tobool22 = icmp ne %struct.BMVert* %18, null, !dbg !684
  br i1 %tobool22, label %for.body, label %for.end, !dbg !684

for.body:                                         ; preds = %for.cond
  %19 = load %struct.BMVert*, %struct.BMVert** %v, align 8, !dbg !688
  %head = getelementptr inbounds %struct.BMVert, %struct.BMVert* %19, i32 0, i32 0, !dbg !688
  %call23 = call zeroext i8 @_bm_elem_flag_test(%struct.BMHeader* %head, i8 zeroext 16), !dbg !688
  %tobool24 = icmp ne i8 %call23, 0, !dbg !688
  br i1 %tobool24, label %if.then25, label %if.end30, !dbg !691

if.then25:                                        ; preds = %for.body
  %20 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !692
  %21 = load %struct.BMVert*, %struct.BMVert** %v, align 8, !dbg !694
  %call26 = call %struct.BevVert* @bevel_vert_construct(%struct.BMesh* %20, %struct.BevelParams* %bp, %struct.BMVert* %21), !dbg !695
  store %struct.BevVert* %call26, %struct.BevVert** %bv, align 8, !dbg !696
  %22 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !697
  %tobool27 = icmp ne %struct.BevVert* %22, null, !dbg !697
  br i1 %tobool27, label %if.then28, label %if.end29, !dbg !699

if.then28:                                        ; preds = %if.then25
  %23 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !700
  call void @build_boundary(%struct.BevelParams* %bp, %struct.BevVert* %23, i8 zeroext 1), !dbg !701
  br label %if.end29, !dbg !701

if.end29:                                         ; preds = %if.then28, %if.then25
  br label %if.end30, !dbg !702

if.end30:                                         ; preds = %if.end29, %for.body
  br label %for.inc, !dbg !703

for.inc:                                          ; preds = %if.end30
  %call31 = call i8* @BM_iter_step(%struct.BMIter* %iter), !dbg !686
  %24 = bitcast i8* %call31 to %struct.BMVert*, !dbg !686
  store %struct.BMVert* %24, %struct.BMVert** %v, align 8, !dbg !686
  br label %for.cond, !dbg !686, !llvm.loop !704

for.end:                                          ; preds = %for.cond
  %vertex_only32 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %bp, i32 0, i32 7, !dbg !706
  %25 = load i8, i8* %vertex_only32, align 8, !dbg !706
  %tobool33 = icmp ne i8 %25, 0, !dbg !708
  br i1 %tobool33, label %if.end35, label %if.then34, !dbg !709

if.then34:                                        ; preds = %for.end
  call void @adjust_offsets(%struct.BevelParams* %bp), !dbg !710
  br label %if.end35, !dbg !712

if.end35:                                         ; preds = %if.then34, %for.end
  %26 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !713
  %call36 = call i8* @BM_iter_new(%struct.BMIter* %iter, %struct.BMesh* %26, i8 zeroext 1, i8* null), !dbg !713
  %27 = bitcast i8* %call36 to %struct.BMVert*, !dbg !713
  store %struct.BMVert* %27, %struct.BMVert** %v, align 8, !dbg !713
  br label %for.cond37, !dbg !713

for.cond37:                                       ; preds = %for.inc49, %if.end35
  %28 = load %struct.BMVert*, %struct.BMVert** %v, align 8, !dbg !715
  %tobool38 = icmp ne %struct.BMVert* %28, null, !dbg !713
  br i1 %tobool38, label %for.body39, label %for.end51, !dbg !713

for.body39:                                       ; preds = %for.cond37
  %29 = load %struct.BMVert*, %struct.BMVert** %v, align 8, !dbg !717
  %head40 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %29, i32 0, i32 0, !dbg !717
  %call41 = call zeroext i8 @_bm_elem_flag_test(%struct.BMHeader* %head40, i8 zeroext 16), !dbg !717
  %tobool42 = icmp ne i8 %call41, 0, !dbg !717
  br i1 %tobool42, label %if.then43, label %if.end48, !dbg !720

if.then43:                                        ; preds = %for.body39
  %30 = load %struct.BMVert*, %struct.BMVert** %v, align 8, !dbg !721
  %call44 = call %struct.BevVert* @find_bevvert(%struct.BevelParams* %bp, %struct.BMVert* %30), !dbg !723
  store %struct.BevVert* %call44, %struct.BevVert** %bv, align 8, !dbg !724
  %31 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !725
  %tobool45 = icmp ne %struct.BevVert* %31, null, !dbg !725
  br i1 %tobool45, label %if.then46, label %if.end47, !dbg !727

if.then46:                                        ; preds = %if.then43
  %32 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !728
  %33 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !729
  call void @build_vmesh(%struct.BevelParams* %bp, %struct.BMesh* %32, %struct.BevVert* %33), !dbg !730
  br label %if.end47, !dbg !730

if.end47:                                         ; preds = %if.then46, %if.then43
  br label %if.end48, !dbg !731

if.end48:                                         ; preds = %if.end47, %for.body39
  br label %for.inc49, !dbg !732

for.inc49:                                        ; preds = %if.end48
  %call50 = call i8* @BM_iter_step(%struct.BMIter* %iter), !dbg !715
  %34 = bitcast i8* %call50 to %struct.BMVert*, !dbg !715
  store %struct.BMVert* %34, %struct.BMVert** %v, align 8, !dbg !715
  br label %for.cond37, !dbg !715, !llvm.loop !733

for.end51:                                        ; preds = %for.cond37
  %vertex_only52 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %bp, i32 0, i32 7, !dbg !735
  %35 = load i8, i8* %vertex_only52, align 8, !dbg !735
  %tobool53 = icmp ne i8 %35, 0, !dbg !737
  br i1 %tobool53, label %if.end67, label %if.then54, !dbg !738

if.then54:                                        ; preds = %for.end51
  %36 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !739
  %call55 = call i8* @BM_iter_new(%struct.BMIter* %iter, %struct.BMesh* %36, i8 zeroext 2, i8* null), !dbg !739
  %37 = bitcast i8* %call55 to %struct.BMEdge*, !dbg !739
  store %struct.BMEdge* %37, %struct.BMEdge** %e, align 8, !dbg !739
  br label %for.cond56, !dbg !739

for.cond56:                                       ; preds = %for.inc64, %if.then54
  %38 = load %struct.BMEdge*, %struct.BMEdge** %e, align 8, !dbg !742
  %tobool57 = icmp ne %struct.BMEdge* %38, null, !dbg !739
  br i1 %tobool57, label %for.body58, label %for.end66, !dbg !739

for.body58:                                       ; preds = %for.cond56
  %39 = load %struct.BMEdge*, %struct.BMEdge** %e, align 8, !dbg !744
  %head59 = getelementptr inbounds %struct.BMEdge, %struct.BMEdge* %39, i32 0, i32 0, !dbg !744
  %call60 = call zeroext i8 @_bm_elem_flag_test(%struct.BMHeader* %head59, i8 zeroext 16), !dbg !744
  %tobool61 = icmp ne i8 %call60, 0, !dbg !744
  br i1 %tobool61, label %if.then62, label %if.end63, !dbg !747

if.then62:                                        ; preds = %for.body58
  %40 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !748
  %41 = load %struct.BMEdge*, %struct.BMEdge** %e, align 8, !dbg !750
  call void @bevel_build_edge_polygons(%struct.BMesh* %40, %struct.BevelParams* %bp, %struct.BMEdge* %41), !dbg !751
  br label %if.end63, !dbg !752

if.end63:                                         ; preds = %if.then62, %for.body58
  br label %for.inc64, !dbg !753

for.inc64:                                        ; preds = %if.end63
  %call65 = call i8* @BM_iter_step(%struct.BMIter* %iter), !dbg !742
  %42 = bitcast i8* %call65 to %struct.BMEdge*, !dbg !742
  store %struct.BMEdge* %42, %struct.BMEdge** %e, align 8, !dbg !742
  br label %for.cond56, !dbg !742, !llvm.loop !754

for.end66:                                        ; preds = %for.cond56
  br label %if.end67, !dbg !756

if.end67:                                         ; preds = %for.end66, %for.end51
  %43 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !757
  %call68 = call i8* @BM_iter_new(%struct.BMIter* %iter, %struct.BMesh* %43, i8 zeroext 1, i8* null), !dbg !757
  %44 = bitcast i8* %call68 to %struct.BMVert*, !dbg !757
  store %struct.BMVert* %44, %struct.BMVert** %v, align 8, !dbg !757
  br label %for.cond69, !dbg !757

for.cond69:                                       ; preds = %for.inc77, %if.end67
  %45 = load %struct.BMVert*, %struct.BMVert** %v, align 8, !dbg !759
  %tobool70 = icmp ne %struct.BMVert* %45, null, !dbg !757
  br i1 %tobool70, label %for.body71, label %for.end79, !dbg !757

for.body71:                                       ; preds = %for.cond69
  %46 = load %struct.BMVert*, %struct.BMVert** %v, align 8, !dbg !761
  %head72 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %46, i32 0, i32 0, !dbg !761
  %call73 = call zeroext i8 @_bm_elem_flag_test(%struct.BMHeader* %head72, i8 zeroext 16), !dbg !761
  %tobool74 = icmp ne i8 %call73, 0, !dbg !761
  br i1 %tobool74, label %if.then75, label %if.end76, !dbg !764

if.then75:                                        ; preds = %for.body71
  %47 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !765
  %48 = load %struct.BMVert*, %struct.BMVert** %v, align 8, !dbg !767
  call void @bevel_rebuild_existing_polygons(%struct.BMesh* %47, %struct.BevelParams* %bp, %struct.BMVert* %48), !dbg !768
  %49 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !769
  %50 = load %struct.BMVert*, %struct.BMVert** %v, align 8, !dbg !770
  call void @bevel_reattach_wires(%struct.BMesh* %49, %struct.BevelParams* %bp, %struct.BMVert* %50), !dbg !771
  br label %if.end76, !dbg !772

if.end76:                                         ; preds = %if.then75, %for.body71
  br label %for.inc77, !dbg !773

for.inc77:                                        ; preds = %if.end76
  %call78 = call i8* @BM_iter_step(%struct.BMIter* %iter), !dbg !759
  %51 = bitcast i8* %call78 to %struct.BMVert*, !dbg !759
  store %struct.BMVert* %51, %struct.BMVert** %v, align 8, !dbg !759
  br label %for.cond69, !dbg !759, !llvm.loop !774

for.end79:                                        ; preds = %for.cond69
  %52 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !776
  %call80 = call i8* @BM_iter_new(%struct.BMIter* %iter, %struct.BMesh* %52, i8 zeroext 1, i8* null), !dbg !776
  %53 = bitcast i8* %call80 to %struct.BMVert*, !dbg !776
  store %struct.BMVert* %53, %struct.BMVert** %v, align 8, !dbg !776
  br label %for.cond81, !dbg !776

for.cond81:                                       ; preds = %for.inc91, %for.end79
  %54 = load %struct.BMVert*, %struct.BMVert** %v, align 8, !dbg !778
  %tobool82 = icmp ne %struct.BMVert* %54, null, !dbg !778
  br i1 %tobool82, label %cond.true, label %cond.false, !dbg !778

cond.true:                                        ; preds = %for.cond81
  %call83 = call i8* @BM_iter_step(%struct.BMIter* %iter), !dbg !778
  %55 = bitcast i8* %call83 to %struct.BMVert*, !dbg !778
  store %struct.BMVert* %55, %struct.BMVert** %v_next, align 8, !dbg !778
  br label %cond.end, !dbg !778

cond.false:                                       ; preds = %for.cond81
  br label %cond.end, !dbg !778

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 1, %cond.true ], [ 0, %cond.false ], !dbg !778
  %tobool84 = icmp ne i32 %cond, 0, !dbg !776
  br i1 %tobool84, label %for.body85, label %for.end92, !dbg !776

for.body85:                                       ; preds = %cond.end
  %56 = load %struct.BMVert*, %struct.BMVert** %v, align 8, !dbg !780
  %head86 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %56, i32 0, i32 0, !dbg !780
  %call87 = call zeroext i8 @_bm_elem_flag_test(%struct.BMHeader* %head86, i8 zeroext 16), !dbg !780
  %tobool88 = icmp ne i8 %call87, 0, !dbg !780
  br i1 %tobool88, label %if.then89, label %if.end90, !dbg !783

if.then89:                                        ; preds = %for.body85
  %57 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !784
  %58 = load %struct.BMVert*, %struct.BMVert** %v, align 8, !dbg !786
  call void @BM_vert_kill(%struct.BMesh* %57, %struct.BMVert* %58), !dbg !787
  br label %if.end90, !dbg !788

if.end90:                                         ; preds = %if.then89, %for.body85
  br label %for.inc91, !dbg !789

for.inc91:                                        ; preds = %if.end90
  %59 = load %struct.BMVert*, %struct.BMVert** %v_next, align 8, !dbg !778
  store %struct.BMVert* %59, %struct.BMVert** %v, align 8, !dbg !778
  br label %for.cond81, !dbg !778, !llvm.loop !790

for.end92:                                        ; preds = %cond.end
  %vert_hash93 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %bp, i32 0, i32 0, !dbg !792
  %60 = load %struct.GHash*, %struct.GHash** %vert_hash93, align 8, !dbg !792
  call void @BLI_ghash_free(%struct.GHash* %60, void (i8*)* null, void (i8*)* null), !dbg !793
  %mem_arena94 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %bp, i32 0, i32 1, !dbg !794
  %61 = load %struct.MemArena*, %struct.MemArena** %mem_arena94, align 8, !dbg !794
  call void @BLI_memarena_free(%struct.MemArena* %61), !dbg !795
  br label %if.end95, !dbg !796

if.end95:                                         ; preds = %for.end92, %if.end
  ret void, !dbg !797
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare dso_local %struct.GHash* @BLI_ghash_ptr_new(i8*) #3

declare dso_local %struct.MemArena* @BLI_memarena_new(i64, i8*) #3

declare dso_local void @BLI_memarena_use_calloc(%struct.MemArena*) #3

; Function Attrs: noinline nounwind uwtable
define internal void @set_profile_spacing(%struct.BevelParams* %bp) #0 !dbg !798 {
entry:
  %bp.addr = alloca %struct.BevelParams*, align 8
  %seg = alloca i32, align 4
  %seg_2 = alloca i32, align 4
  store %struct.BevelParams* %bp, %struct.BevelParams** %bp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BevelParams** %bp.addr, metadata !802, metadata !DIExpression()), !dbg !803
  call void @llvm.dbg.declare(metadata i32* %seg, metadata !804, metadata !DIExpression()), !dbg !805
  call void @llvm.dbg.declare(metadata i32* %seg_2, metadata !806, metadata !DIExpression()), !dbg !807
  %0 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !808
  %seg1 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %0, i32 0, i32 5, !dbg !809
  %1 = load i32, i32* %seg1, align 8, !dbg !809
  store i32 %1, i32* %seg, align 4, !dbg !810
  %2 = load i32, i32* %seg, align 4, !dbg !811
  %cmp = icmp sgt i32 %2, 1, !dbg !813
  br i1 %cmp, label %if.then, label %if.else28, !dbg !814

if.then:                                          ; preds = %entry
  %3 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !815
  %mem_arena = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %3, i32 0, i32 1, !dbg !817
  %4 = load %struct.MemArena*, %struct.MemArena** %mem_arena, align 8, !dbg !817
  %5 = load i32, i32* %seg, align 4, !dbg !818
  %add = add nsw i32 %5, 1, !dbg !819
  %conv = sext i32 %add to i64, !dbg !820
  %mul = mul i64 %conv, 4, !dbg !821
  %call = call i8* @BLI_memarena_alloc(%struct.MemArena* %4, i64 %mul), !dbg !822
  %6 = bitcast i8* %call to float*, !dbg !823
  %7 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !824
  %pro_spacing = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %7, i32 0, i32 2, !dbg !825
  %uvals = getelementptr inbounds %struct.ProfileSpacing, %struct.ProfileSpacing* %pro_spacing, i32 0, i32 0, !dbg !826
  store float* %6, float** %uvals, align 8, !dbg !827
  %8 = load i32, i32* %seg, align 4, !dbg !828
  %9 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !829
  %pro_super_r = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %9, i32 0, i32 6, !dbg !830
  %10 = load float, float* %pro_super_r, align 4, !dbg !830
  %11 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !831
  %pro_spacing2 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %11, i32 0, i32 2, !dbg !832
  %uvals3 = getelementptr inbounds %struct.ProfileSpacing, %struct.ProfileSpacing* %pro_spacing2, i32 0, i32 0, !dbg !833
  %12 = load float*, float** %uvals3, align 8, !dbg !833
  call void @find_even_superellipse_params(i32 %8, float %10, float* %12), !dbg !834
  %13 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !835
  %seg4 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %13, i32 0, i32 5, !dbg !836
  %14 = load i32, i32* %seg4, align 8, !dbg !836
  %call5 = call i32 @power_of_2_max_i(i32 %14), !dbg !837
  store i32 %call5, i32* %seg_2, align 4, !dbg !838
  %15 = load i32, i32* %seg_2, align 4, !dbg !839
  %cmp6 = icmp eq i32 %15, 2, !dbg !841
  br i1 %cmp6, label %if.then8, label %if.end, !dbg !842

if.then8:                                         ; preds = %if.then
  store i32 4, i32* %seg_2, align 4, !dbg !843
  br label %if.end, !dbg !844

if.end:                                           ; preds = %if.then8, %if.then
  %16 = load i32, i32* %seg_2, align 4, !dbg !845
  %17 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !846
  %pro_spacing9 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %17, i32 0, i32 2, !dbg !847
  %seg_210 = getelementptr inbounds %struct.ProfileSpacing, %struct.ProfileSpacing* %pro_spacing9, i32 0, i32 2, !dbg !848
  store i32 %16, i32* %seg_210, align 8, !dbg !849
  %18 = load i32, i32* %seg_2, align 4, !dbg !850
  %19 = load i32, i32* %seg, align 4, !dbg !852
  %cmp11 = icmp eq i32 %18, %19, !dbg !853
  br i1 %cmp11, label %if.then13, label %if.else, !dbg !854

if.then13:                                        ; preds = %if.end
  %20 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !855
  %pro_spacing14 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %20, i32 0, i32 2, !dbg !857
  %uvals15 = getelementptr inbounds %struct.ProfileSpacing, %struct.ProfileSpacing* %pro_spacing14, i32 0, i32 0, !dbg !858
  %21 = load float*, float** %uvals15, align 8, !dbg !858
  %22 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !859
  %pro_spacing16 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %22, i32 0, i32 2, !dbg !860
  %uvals_2 = getelementptr inbounds %struct.ProfileSpacing, %struct.ProfileSpacing* %pro_spacing16, i32 0, i32 1, !dbg !861
  store float* %21, float** %uvals_2, align 8, !dbg !862
  br label %if.end27, !dbg !863

if.else:                                          ; preds = %if.end
  %23 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !864
  %mem_arena17 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %23, i32 0, i32 1, !dbg !866
  %24 = load %struct.MemArena*, %struct.MemArena** %mem_arena17, align 8, !dbg !866
  %25 = load i32, i32* %seg_2, align 4, !dbg !867
  %add18 = add nsw i32 %25, 1, !dbg !868
  %conv19 = sext i32 %add18 to i64, !dbg !869
  %mul20 = mul i64 %conv19, 4, !dbg !870
  %call21 = call i8* @BLI_memarena_alloc(%struct.MemArena* %24, i64 %mul20), !dbg !871
  %26 = bitcast i8* %call21 to float*, !dbg !872
  %27 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !873
  %pro_spacing22 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %27, i32 0, i32 2, !dbg !874
  %uvals_223 = getelementptr inbounds %struct.ProfileSpacing, %struct.ProfileSpacing* %pro_spacing22, i32 0, i32 1, !dbg !875
  store float* %26, float** %uvals_223, align 8, !dbg !876
  %28 = load i32, i32* %seg_2, align 4, !dbg !877
  %29 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !878
  %pro_super_r24 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %29, i32 0, i32 6, !dbg !879
  %30 = load float, float* %pro_super_r24, align 4, !dbg !879
  %31 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !880
  %pro_spacing25 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %31, i32 0, i32 2, !dbg !881
  %uvals_226 = getelementptr inbounds %struct.ProfileSpacing, %struct.ProfileSpacing* %pro_spacing25, i32 0, i32 1, !dbg !882
  %32 = load float*, float** %uvals_226, align 8, !dbg !882
  call void @find_even_superellipse_params(i32 %28, float %30, float* %32), !dbg !883
  br label %if.end27

if.end27:                                         ; preds = %if.else, %if.then13
  br label %if.end35, !dbg !884

if.else28:                                        ; preds = %entry
  %33 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !885
  %pro_spacing29 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %33, i32 0, i32 2, !dbg !887
  %uvals30 = getelementptr inbounds %struct.ProfileSpacing, %struct.ProfileSpacing* %pro_spacing29, i32 0, i32 0, !dbg !888
  store float* null, float** %uvals30, align 8, !dbg !889
  %34 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !890
  %pro_spacing31 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %34, i32 0, i32 2, !dbg !891
  %uvals_232 = getelementptr inbounds %struct.ProfileSpacing, %struct.ProfileSpacing* %pro_spacing31, i32 0, i32 1, !dbg !892
  store float* null, float** %uvals_232, align 8, !dbg !893
  %35 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !894
  %pro_spacing33 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %35, i32 0, i32 2, !dbg !895
  %seg_234 = getelementptr inbounds %struct.ProfileSpacing, %struct.ProfileSpacing* %pro_spacing33, i32 0, i32 2, !dbg !896
  store i32 0, i32* %seg_234, align 8, !dbg !897
  br label %if.end35

if.end35:                                         ; preds = %if.else28, %if.end27
  ret void, !dbg !898
}

; Function Attrs: noinline nounwind uwtable
define internal float @bevel_limit_offset(%struct.BMesh* %bm, %struct.BevelParams* %bp) #0 !dbg !899 {
entry:
  %retval = alloca float, align 4
  %bm.addr = alloca %struct.BMesh*, align 8
  %bp.addr = alloca %struct.BevelParams*, align 8
  %v = alloca %struct.BMVert*, align 8
  %e = alloca %struct.BMEdge*, align 8
  %v_iter = alloca %struct.BMIter, align 8
  %e_iter = alloca %struct.BMIter, align 8
  %limited_offset = alloca float, align 4
  %half_elen = alloca float, align 4
  %vbeveled = alloca i8, align 1
  store %struct.BMesh* %bm, %struct.BMesh** %bm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMesh** %bm.addr, metadata !902, metadata !DIExpression()), !dbg !903
  store %struct.BevelParams* %bp, %struct.BevelParams** %bp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BevelParams** %bp.addr, metadata !904, metadata !DIExpression()), !dbg !905
  call void @llvm.dbg.declare(metadata %struct.BMVert** %v, metadata !906, metadata !DIExpression()), !dbg !907
  call void @llvm.dbg.declare(metadata %struct.BMEdge** %e, metadata !908, metadata !DIExpression()), !dbg !909
  call void @llvm.dbg.declare(metadata %struct.BMIter* %v_iter, metadata !910, metadata !DIExpression()), !dbg !911
  call void @llvm.dbg.declare(metadata %struct.BMIter* %e_iter, metadata !912, metadata !DIExpression()), !dbg !913
  call void @llvm.dbg.declare(metadata float* %limited_offset, metadata !914, metadata !DIExpression()), !dbg !915
  call void @llvm.dbg.declare(metadata float* %half_elen, metadata !916, metadata !DIExpression()), !dbg !917
  call void @llvm.dbg.declare(metadata i8* %vbeveled, metadata !918, metadata !DIExpression()), !dbg !919
  %0 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !920
  %offset = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %0, i32 0, i32 3, !dbg !921
  %1 = load float, float* %offset, align 8, !dbg !921
  store float %1, float* %limited_offset, align 4, !dbg !922
  %2 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !923
  %offset_type = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %2, i32 0, i32 4, !dbg !925
  %3 = load i32, i32* %offset_type, align 4, !dbg !925
  %cmp = icmp eq i32 %3, 3, !dbg !926
  br i1 %cmp, label %if.then, label %if.end3, !dbg !927

if.then:                                          ; preds = %entry
  %4 = load float, float* %limited_offset, align 4, !dbg !928
  %cmp1 = fcmp ogt float %4, 5.000000e+01, !dbg !931
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !932

if.then2:                                         ; preds = %if.then
  store float 5.000000e+01, float* %limited_offset, align 4, !dbg !933
  br label %if.end, !dbg !934

if.end:                                           ; preds = %if.then2, %if.then
  %5 = load float, float* %limited_offset, align 4, !dbg !935
  store float %5, float* %retval, align 4, !dbg !936
  br label %return, !dbg !936

if.end3:                                          ; preds = %entry
  %6 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !937
  %call = call i8* @BM_iter_new(%struct.BMIter* %v_iter, %struct.BMesh* %6, i8 zeroext 1, i8* null), !dbg !937
  %7 = bitcast i8* %call to %struct.BMVert*, !dbg !937
  store %struct.BMVert* %7, %struct.BMVert** %v, align 8, !dbg !937
  br label %for.cond, !dbg !937

for.cond:                                         ; preds = %for.inc36, %if.end3
  %8 = load %struct.BMVert*, %struct.BMVert** %v, align 8, !dbg !939
  %tobool = icmp ne %struct.BMVert* %8, null, !dbg !937
  br i1 %tobool, label %for.body, label %for.end38, !dbg !937

for.body:                                         ; preds = %for.cond
  %9 = load %struct.BMVert*, %struct.BMVert** %v, align 8, !dbg !941
  %head = getelementptr inbounds %struct.BMVert, %struct.BMVert* %9, i32 0, i32 0, !dbg !941
  %call4 = call zeroext i8 @_bm_elem_flag_test(%struct.BMHeader* %head, i8 zeroext 16), !dbg !941
  %tobool5 = icmp ne i8 %call4, 0, !dbg !941
  br i1 %tobool5, label %if.then6, label %if.end35, !dbg !944

if.then6:                                         ; preds = %for.body
  %10 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !945
  %vertex_only = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %10, i32 0, i32 7, !dbg !948
  %11 = load i8, i8* %vertex_only, align 8, !dbg !948
  %tobool7 = icmp ne i8 %11, 0, !dbg !945
  br i1 %tobool7, label %if.then8, label %if.else, !dbg !949

if.then8:                                         ; preds = %if.then6
  store i8 1, i8* %vbeveled, align 1, !dbg !950
  br label %if.end20, !dbg !952

if.else:                                          ; preds = %if.then6
  store i8 0, i8* %vbeveled, align 1, !dbg !953
  %12 = load %struct.BMVert*, %struct.BMVert** %v, align 8, !dbg !955
  %13 = bitcast %struct.BMVert* %12 to i8*, !dbg !955
  %call9 = call i8* @BM_iter_new(%struct.BMIter* %e_iter, %struct.BMesh* null, i8 zeroext 4, i8* %13), !dbg !955
  %14 = bitcast i8* %call9 to %struct.BMEdge*, !dbg !955
  store %struct.BMEdge* %14, %struct.BMEdge** %e, align 8, !dbg !955
  br label %for.cond10, !dbg !955

for.cond10:                                       ; preds = %for.inc, %if.else
  %15 = load %struct.BMEdge*, %struct.BMEdge** %e, align 8, !dbg !957
  %tobool11 = icmp ne %struct.BMEdge* %15, null, !dbg !955
  br i1 %tobool11, label %for.body12, label %for.end, !dbg !955

for.body12:                                       ; preds = %for.cond10
  %16 = load %struct.BMEdge*, %struct.BMEdge** %e, align 8, !dbg !959
  %17 = load %struct.BMVert*, %struct.BMVert** %v, align 8, !dbg !959
  %call13 = call %struct.BMVert* @BM_edge_other_vert(%struct.BMEdge* %16, %struct.BMVert* %17), !dbg !959
  %head14 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %call13, i32 0, i32 0, !dbg !959
  %call15 = call zeroext i8 @_bm_elem_flag_test(%struct.BMHeader* %head14, i8 zeroext 16), !dbg !959
  %tobool16 = icmp ne i8 %call15, 0, !dbg !959
  br i1 %tobool16, label %if.then17, label %if.end18, !dbg !962

if.then17:                                        ; preds = %for.body12
  store i8 1, i8* %vbeveled, align 1, !dbg !963
  br label %for.end, !dbg !965

if.end18:                                         ; preds = %for.body12
  br label %for.inc, !dbg !966

for.inc:                                          ; preds = %if.end18
  %call19 = call i8* @BM_iter_step(%struct.BMIter* %e_iter), !dbg !957
  %18 = bitcast i8* %call19 to %struct.BMEdge*, !dbg !957
  store %struct.BMEdge* %18, %struct.BMEdge** %e, align 8, !dbg !957
  br label %for.cond10, !dbg !957, !llvm.loop !967

for.end:                                          ; preds = %if.then17, %for.cond10
  br label %if.end20

if.end20:                                         ; preds = %for.end, %if.then8
  %19 = load i8, i8* %vbeveled, align 1, !dbg !969
  %tobool21 = icmp ne i8 %19, 0, !dbg !969
  br i1 %tobool21, label %if.then22, label %if.end34, !dbg !971

if.then22:                                        ; preds = %if.end20
  %20 = load %struct.BMVert*, %struct.BMVert** %v, align 8, !dbg !972
  %21 = bitcast %struct.BMVert* %20 to i8*, !dbg !972
  %call23 = call i8* @BM_iter_new(%struct.BMIter* %e_iter, %struct.BMesh* null, i8 zeroext 4, i8* %21), !dbg !972
  %22 = bitcast i8* %call23 to %struct.BMEdge*, !dbg !972
  store %struct.BMEdge* %22, %struct.BMEdge** %e, align 8, !dbg !972
  br label %for.cond24, !dbg !972

for.cond24:                                       ; preds = %for.inc31, %if.then22
  %23 = load %struct.BMEdge*, %struct.BMEdge** %e, align 8, !dbg !975
  %tobool25 = icmp ne %struct.BMEdge* %23, null, !dbg !972
  br i1 %tobool25, label %for.body26, label %for.end33, !dbg !972

for.body26:                                       ; preds = %for.cond24
  %24 = load %struct.BMEdge*, %struct.BMEdge** %e, align 8, !dbg !977
  %call27 = call float @BM_edge_calc_length(%struct.BMEdge* %24), !dbg !979
  %mul = fmul float 5.000000e-01, %call27, !dbg !980
  store float %mul, float* %half_elen, align 4, !dbg !981
  %25 = load float, float* %half_elen, align 4, !dbg !982
  %26 = load float, float* %limited_offset, align 4, !dbg !984
  %cmp28 = fcmp olt float %25, %26, !dbg !985
  br i1 %cmp28, label %if.then29, label %if.end30, !dbg !986

if.then29:                                        ; preds = %for.body26
  %27 = load float, float* %half_elen, align 4, !dbg !987
  store float %27, float* %limited_offset, align 4, !dbg !988
  br label %if.end30, !dbg !989

if.end30:                                         ; preds = %if.then29, %for.body26
  br label %for.inc31, !dbg !990

for.inc31:                                        ; preds = %if.end30
  %call32 = call i8* @BM_iter_step(%struct.BMIter* %e_iter), !dbg !975
  %28 = bitcast i8* %call32 to %struct.BMEdge*, !dbg !975
  store %struct.BMEdge* %28, %struct.BMEdge** %e, align 8, !dbg !975
  br label %for.cond24, !dbg !975, !llvm.loop !991

for.end33:                                        ; preds = %for.cond24
  br label %if.end34, !dbg !993

if.end34:                                         ; preds = %for.end33, %if.end20
  br label %if.end35, !dbg !994

if.end35:                                         ; preds = %if.end34, %for.body
  br label %for.inc36, !dbg !995

for.inc36:                                        ; preds = %if.end35
  %call37 = call i8* @BM_iter_step(%struct.BMIter* %v_iter), !dbg !939
  %29 = bitcast i8* %call37 to %struct.BMVert*, !dbg !939
  store %struct.BMVert* %29, %struct.BMVert** %v, align 8, !dbg !939
  br label %for.cond, !dbg !939, !llvm.loop !996

for.end38:                                        ; preds = %for.cond
  %30 = load float, float* %limited_offset, align 4, !dbg !998
  store float %30, float* %retval, align 4, !dbg !999
  br label %return, !dbg !999

return:                                           ; preds = %for.end38, %if.end
  %31 = load float, float* %retval, align 4, !dbg !1000
  ret float %31, !dbg !1000
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @BM_iter_new(%struct.BMIter* %iter, %struct.BMesh* %bm, i8 zeroext %itype, i8* %data) #0 !dbg !1001 {
entry:
  %retval = alloca i8*, align 8
  %iter.addr = alloca %struct.BMIter*, align 8
  %bm.addr = alloca %struct.BMesh*, align 8
  %itype.addr = alloca i8, align 1
  %data.addr = alloca i8*, align 8
  store %struct.BMIter* %iter, %struct.BMIter** %iter.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMIter** %iter.addr, metadata !1006, metadata !DIExpression()), !dbg !1007
  store %struct.BMesh* %bm, %struct.BMesh** %bm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMesh** %bm.addr, metadata !1008, metadata !DIExpression()), !dbg !1009
  store i8 %itype, i8* %itype.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %itype.addr, metadata !1010, metadata !DIExpression()), !dbg !1011
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !1012, metadata !DIExpression()), !dbg !1013
  %0 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !1014
  %1 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !1014
  %2 = load i8, i8* %itype.addr, align 1, !dbg !1014
  %3 = load i8*, i8** %data.addr, align 8, !dbg !1014
  %call = call zeroext i8 @BM_iter_init(%struct.BMIter* %0, %struct.BMesh* %1, i8 zeroext %2, i8* %3), !dbg !1014
  %tobool = icmp ne i8 %call, 0, !dbg !1014
  br i1 %tobool, label %if.then, label %if.else, !dbg !1016

if.then:                                          ; preds = %entry
  %4 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !1017
  %call1 = call i8* @BM_iter_step(%struct.BMIter* %4), !dbg !1019
  store i8* %call1, i8** %retval, align 8, !dbg !1020
  br label %return, !dbg !1020

if.else:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8, !dbg !1021
  br label %return, !dbg !1021

return:                                           ; preds = %if.else, %if.then
  %5 = load i8*, i8** %retval, align 8, !dbg !1023
  ret i8* %5, !dbg !1023
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @_bm_elem_flag_test(%struct.BMHeader* %head, i8 zeroext %hflag) #0 !dbg !1024 {
entry:
  %head.addr = alloca %struct.BMHeader*, align 8
  %hflag.addr = alloca i8, align 1
  store %struct.BMHeader* %head, %struct.BMHeader** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMHeader** %head.addr, metadata !1030, metadata !DIExpression()), !dbg !1031
  store i8 %hflag, i8* %hflag.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %hflag.addr, metadata !1032, metadata !DIExpression()), !dbg !1033
  %0 = load %struct.BMHeader*, %struct.BMHeader** %head.addr, align 8, !dbg !1034
  %hflag1 = getelementptr inbounds %struct.BMHeader, %struct.BMHeader* %0, i32 0, i32 3, !dbg !1035
  %1 = load i8, i8* %hflag1, align 1, !dbg !1035
  %conv = zext i8 %1 to i32, !dbg !1034
  %2 = load i8, i8* %hflag.addr, align 1, !dbg !1036
  %conv2 = zext i8 %2 to i32, !dbg !1036
  %and = and i32 %conv, %conv2, !dbg !1037
  %conv3 = trunc i32 %and to i8, !dbg !1034
  ret i8 %conv3, !dbg !1038
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.BevVert* @bevel_vert_construct(%struct.BMesh* %bm, %struct.BevelParams* %bp, %struct.BMVert* %v) #0 !dbg !1039 {
entry:
  %retval = alloca %struct.BevVert*, align 8
  %bm.addr = alloca %struct.BMesh*, align 8
  %bp.addr = alloca %struct.BevelParams*, align 8
  %v.addr = alloca %struct.BMVert*, align 8
  %bme = alloca %struct.BMEdge*, align 8
  %bv = alloca %struct.BevVert*, align 8
  %bme2 = alloca %struct.BMEdge*, align 8
  %unflagged_bme = alloca %struct.BMEdge*, align 8
  %first_bme = alloca %struct.BMEdge*, align 8
  %f = alloca %struct.BMFace*, align 8
  %v1 = alloca %struct.BMVert*, align 8
  %v2 = alloca %struct.BMVert*, align 8
  %iter = alloca %struct.BMIter, align 8
  %iter2 = alloca %struct.BMIter, align 8
  %e = alloca %struct.EdgeHalf*, align 8
  %weight = alloca float, align 4
  %z = alloca float, align 4
  %i = alloca i32, align 4
  %found_shared_face = alloca i32, align 4
  %ccw_test_sum = alloca i32, align 4
  %nsel = alloca i32, align 4
  %ntot = alloca i32, align 4
  %nwire = alloca i32, align 4
  %fcnt = alloca i32, align 4
  %sw_ap = alloca %struct.EdgeHalf, align 8
  %sw_ap285 = alloca %struct.BMFace*, align 8
  %sw_ap302 = alloca %struct.BMFace*, align 8
  %sw_ap335 = alloca %struct.BMFace*, align 8
  store %struct.BMesh* %bm, %struct.BMesh** %bm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMesh** %bm.addr, metadata !1042, metadata !DIExpression()), !dbg !1043
  store %struct.BevelParams* %bp, %struct.BevelParams** %bp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BevelParams** %bp.addr, metadata !1044, metadata !DIExpression()), !dbg !1045
  store %struct.BMVert* %v, %struct.BMVert** %v.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMVert** %v.addr, metadata !1046, metadata !DIExpression()), !dbg !1047
  call void @llvm.dbg.declare(metadata %struct.BMEdge** %bme, metadata !1048, metadata !DIExpression()), !dbg !1049
  call void @llvm.dbg.declare(metadata %struct.BevVert** %bv, metadata !1050, metadata !DIExpression()), !dbg !1051
  call void @llvm.dbg.declare(metadata %struct.BMEdge** %bme2, metadata !1052, metadata !DIExpression()), !dbg !1053
  call void @llvm.dbg.declare(metadata %struct.BMEdge** %unflagged_bme, metadata !1054, metadata !DIExpression()), !dbg !1055
  call void @llvm.dbg.declare(metadata %struct.BMEdge** %first_bme, metadata !1056, metadata !DIExpression()), !dbg !1057
  call void @llvm.dbg.declare(metadata %struct.BMFace** %f, metadata !1058, metadata !DIExpression()), !dbg !1059
  call void @llvm.dbg.declare(metadata %struct.BMVert** %v1, metadata !1060, metadata !DIExpression()), !dbg !1061
  call void @llvm.dbg.declare(metadata %struct.BMVert** %v2, metadata !1062, metadata !DIExpression()), !dbg !1063
  call void @llvm.dbg.declare(metadata %struct.BMIter* %iter, metadata !1064, metadata !DIExpression()), !dbg !1065
  call void @llvm.dbg.declare(metadata %struct.BMIter* %iter2, metadata !1066, metadata !DIExpression()), !dbg !1067
  call void @llvm.dbg.declare(metadata %struct.EdgeHalf** %e, metadata !1068, metadata !DIExpression()), !dbg !1069
  call void @llvm.dbg.declare(metadata float* %weight, metadata !1070, metadata !DIExpression()), !dbg !1071
  call void @llvm.dbg.declare(metadata float* %z, metadata !1072, metadata !DIExpression()), !dbg !1073
  call void @llvm.dbg.declare(metadata i32* %i, metadata !1074, metadata !DIExpression()), !dbg !1075
  call void @llvm.dbg.declare(metadata i32* %found_shared_face, metadata !1076, metadata !DIExpression()), !dbg !1077
  call void @llvm.dbg.declare(metadata i32* %ccw_test_sum, metadata !1078, metadata !DIExpression()), !dbg !1079
  call void @llvm.dbg.declare(metadata i32* %nsel, metadata !1080, metadata !DIExpression()), !dbg !1081
  store i32 0, i32* %nsel, align 4, !dbg !1081
  call void @llvm.dbg.declare(metadata i32* %ntot, metadata !1082, metadata !DIExpression()), !dbg !1083
  store i32 0, i32* %ntot, align 4, !dbg !1083
  call void @llvm.dbg.declare(metadata i32* %nwire, metadata !1084, metadata !DIExpression()), !dbg !1085
  store i32 0, i32* %nwire, align 4, !dbg !1085
  call void @llvm.dbg.declare(metadata i32* %fcnt, metadata !1086, metadata !DIExpression()), !dbg !1087
  store %struct.BMEdge* null, %struct.BMEdge** %first_bme, align 8, !dbg !1088
  %0 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !1089
  %1 = bitcast %struct.BMVert* %0 to i8*, !dbg !1089
  %call = call i8* @BM_iter_new(%struct.BMIter* %iter, %struct.BMesh* null, i8 zeroext 4, i8* %1), !dbg !1089
  %2 = bitcast i8* %call to %struct.BMEdge*, !dbg !1089
  store %struct.BMEdge* %2, %struct.BMEdge** %bme, align 8, !dbg !1089
  br label %for.cond, !dbg !1089

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load %struct.BMEdge*, %struct.BMEdge** %bme, align 8, !dbg !1091
  %tobool = icmp ne %struct.BMEdge* %3, null, !dbg !1089
  br i1 %tobool, label %for.body, label %for.end, !dbg !1089

for.body:                                         ; preds = %for.cond
  %4 = load %struct.BMEdge*, %struct.BMEdge** %bme, align 8, !dbg !1093
  %call1 = call i32 @BM_edge_face_count(%struct.BMEdge* %4), !dbg !1095
  store i32 %call1, i32* %fcnt, align 4, !dbg !1096
  %5 = load %struct.BMEdge*, %struct.BMEdge** %bme, align 8, !dbg !1097
  %head = getelementptr inbounds %struct.BMEdge, %struct.BMEdge* %5, i32 0, i32 0, !dbg !1097
  %api_flag = getelementptr inbounds %struct.BMHeader, %struct.BMHeader* %head, i32 0, i32 4, !dbg !1097
  %6 = load i8, i8* %api_flag, align 2, !dbg !1097
  %conv = zext i8 %6 to i32, !dbg !1097
  %and = and i32 %conv, -5, !dbg !1097
  %conv2 = trunc i32 %and to i8, !dbg !1097
  store i8 %conv2, i8* %api_flag, align 2, !dbg !1097
  %7 = load %struct.BMEdge*, %struct.BMEdge** %bme, align 8, !dbg !1099
  %head3 = getelementptr inbounds %struct.BMEdge, %struct.BMEdge* %7, i32 0, i32 0, !dbg !1099
  %call4 = call zeroext i8 @_bm_elem_flag_test(%struct.BMHeader* %head3, i8 zeroext 16), !dbg !1099
  %conv5 = zext i8 %call4 to i32, !dbg !1099
  %tobool6 = icmp ne i32 %conv5, 0, !dbg !1099
  br i1 %tobool6, label %land.lhs.true, label %if.end10, !dbg !1101

land.lhs.true:                                    ; preds = %for.body
  %8 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !1102
  %vertex_only = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %8, i32 0, i32 7, !dbg !1103
  %9 = load i8, i8* %vertex_only, align 8, !dbg !1103
  %tobool7 = icmp ne i8 %9, 0, !dbg !1102
  br i1 %tobool7, label %if.end10, label %if.then, !dbg !1104

if.then:                                          ; preds = %land.lhs.true
  %10 = load i32, i32* %nsel, align 4, !dbg !1105
  %inc = add nsw i32 %10, 1, !dbg !1105
  store i32 %inc, i32* %nsel, align 4, !dbg !1105
  %11 = load %struct.BMEdge*, %struct.BMEdge** %first_bme, align 8, !dbg !1107
  %tobool8 = icmp ne %struct.BMEdge* %11, null, !dbg !1107
  br i1 %tobool8, label %if.end, label %if.then9, !dbg !1109

if.then9:                                         ; preds = %if.then
  %12 = load %struct.BMEdge*, %struct.BMEdge** %bme, align 8, !dbg !1110
  store %struct.BMEdge* %12, %struct.BMEdge** %first_bme, align 8, !dbg !1111
  br label %if.end, !dbg !1112

if.end:                                           ; preds = %if.then9, %if.then
  br label %if.end10, !dbg !1113

if.end10:                                         ; preds = %if.end, %land.lhs.true, %for.body
  %13 = load i32, i32* %fcnt, align 4, !dbg !1114
  %cmp = icmp eq i32 %13, 1, !dbg !1116
  br i1 %cmp, label %if.then12, label %if.end13, !dbg !1117

if.then12:                                        ; preds = %if.end10
  %14 = load %struct.BMEdge*, %struct.BMEdge** %bme, align 8, !dbg !1118
  store %struct.BMEdge* %14, %struct.BMEdge** %first_bme, align 8, !dbg !1120
  br label %if.end13, !dbg !1121

if.end13:                                         ; preds = %if.then12, %if.end10
  %15 = load i32, i32* %fcnt, align 4, !dbg !1122
  %cmp14 = icmp sgt i32 %15, 0, !dbg !1124
  br i1 %cmp14, label %if.then19, label %lor.lhs.false, !dbg !1125

lor.lhs.false:                                    ; preds = %if.end13
  %16 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !1126
  %vertex_only16 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %16, i32 0, i32 7, !dbg !1127
  %17 = load i8, i8* %vertex_only16, align 8, !dbg !1127
  %conv17 = zext i8 %17 to i32, !dbg !1126
  %tobool18 = icmp ne i32 %conv17, 0, !dbg !1126
  br i1 %tobool18, label %if.then19, label %if.end21, !dbg !1128

if.then19:                                        ; preds = %lor.lhs.false, %if.end13
  %18 = load i32, i32* %ntot, align 4, !dbg !1129
  %inc20 = add nsw i32 %18, 1, !dbg !1129
  store i32 %inc20, i32* %ntot, align 4, !dbg !1129
  br label %if.end21, !dbg !1130

if.end21:                                         ; preds = %if.then19, %lor.lhs.false
  %19 = load %struct.BMEdge*, %struct.BMEdge** %bme, align 8, !dbg !1131
  %call22 = call zeroext i8 @BM_edge_is_wire(%struct.BMEdge* %19), !dbg !1133
  %tobool23 = icmp ne i8 %call22, 0, !dbg !1133
  br i1 %tobool23, label %if.then24, label %if.end34, !dbg !1134

if.then24:                                        ; preds = %if.end21
  %20 = load i32, i32* %nwire, align 4, !dbg !1135
  %inc25 = add nsw i32 %20, 1, !dbg !1135
  store i32 %inc25, i32* %nwire, align 4, !dbg !1135
  %21 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !1137
  %vertex_only26 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %21, i32 0, i32 7, !dbg !1139
  %22 = load i8, i8* %vertex_only26, align 8, !dbg !1139
  %tobool27 = icmp ne i8 %22, 0, !dbg !1137
  br i1 %tobool27, label %if.end33, label %if.then28, !dbg !1140

if.then28:                                        ; preds = %if.then24
  %23 = load %struct.BMEdge*, %struct.BMEdge** %bme, align 8, !dbg !1141
  %head29 = getelementptr inbounds %struct.BMEdge, %struct.BMEdge* %23, i32 0, i32 0, !dbg !1141
  %api_flag30 = getelementptr inbounds %struct.BMHeader, %struct.BMHeader* %head29, i32 0, i32 4, !dbg !1141
  %24 = load i8, i8* %api_flag30, align 2, !dbg !1141
  %conv31 = zext i8 %24 to i32, !dbg !1141
  %or = or i32 %conv31, 4, !dbg !1141
  %conv32 = trunc i32 %or to i8, !dbg !1141
  store i8 %conv32, i8* %api_flag30, align 2, !dbg !1141
  br label %if.end33, !dbg !1141

if.end33:                                         ; preds = %if.then28, %if.then24
  br label %if.end34, !dbg !1143

if.end34:                                         ; preds = %if.end33, %if.end21
  br label %for.inc, !dbg !1144

for.inc:                                          ; preds = %if.end34
  %call35 = call i8* @BM_iter_step(%struct.BMIter* %iter), !dbg !1091
  %25 = bitcast i8* %call35 to %struct.BMEdge*, !dbg !1091
  store %struct.BMEdge* %25, %struct.BMEdge** %bme, align 8, !dbg !1091
  br label %for.cond, !dbg !1091, !llvm.loop !1145

for.end:                                          ; preds = %for.cond
  %26 = load %struct.BMEdge*, %struct.BMEdge** %first_bme, align 8, !dbg !1147
  %tobool36 = icmp ne %struct.BMEdge* %26, null, !dbg !1147
  br i1 %tobool36, label %if.end39, label %if.then37, !dbg !1149

if.then37:                                        ; preds = %for.end
  %27 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !1150
  %e38 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %27, i32 0, i32 4, !dbg !1151
  %28 = load %struct.BMEdge*, %struct.BMEdge** %e38, align 8, !dbg !1151
  store %struct.BMEdge* %28, %struct.BMEdge** %first_bme, align 8, !dbg !1152
  br label %if.end39, !dbg !1153

if.end39:                                         ; preds = %if.then37, %for.end
  %29 = load i32, i32* %nsel, align 4, !dbg !1154
  %cmp40 = icmp eq i32 %29, 0, !dbg !1156
  br i1 %cmp40, label %land.lhs.true42, label %lor.lhs.false45, !dbg !1157

land.lhs.true42:                                  ; preds = %if.end39
  %30 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !1158
  %vertex_only43 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %30, i32 0, i32 7, !dbg !1159
  %31 = load i8, i8* %vertex_only43, align 8, !dbg !1159
  %tobool44 = icmp ne i8 %31, 0, !dbg !1158
  br i1 %tobool44, label %lor.lhs.false45, label %if.then52, !dbg !1160

lor.lhs.false45:                                  ; preds = %land.lhs.true42, %if.end39
  %32 = load i32, i32* %ntot, align 4, !dbg !1161
  %cmp46 = icmp slt i32 %32, 2, !dbg !1162
  br i1 %cmp46, label %land.lhs.true48, label %if.end54, !dbg !1163

land.lhs.true48:                                  ; preds = %lor.lhs.false45
  %33 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !1164
  %vertex_only49 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %33, i32 0, i32 7, !dbg !1165
  %34 = load i8, i8* %vertex_only49, align 8, !dbg !1165
  %conv50 = zext i8 %34 to i32, !dbg !1164
  %tobool51 = icmp ne i32 %conv50, 0, !dbg !1164
  br i1 %tobool51, label %if.then52, label %if.end54, !dbg !1166

if.then52:                                        ; preds = %land.lhs.true48, %land.lhs.true42
  %35 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !1167
  %head53 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %35, i32 0, i32 0, !dbg !1167
  call void @_bm_elem_flag_disable(%struct.BMHeader* %head53, i8 zeroext 16), !dbg !1167
  store %struct.BevVert* null, %struct.BevVert** %retval, align 8, !dbg !1169
  br label %return, !dbg !1169

if.end54:                                         ; preds = %land.lhs.true48, %lor.lhs.false45
  %36 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !1170
  %mem_arena = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %36, i32 0, i32 1, !dbg !1171
  %37 = load %struct.MemArena*, %struct.MemArena** %mem_arena, align 8, !dbg !1171
  %call55 = call i8* @BLI_memarena_alloc(%struct.MemArena* %37, i64 56), !dbg !1172
  %38 = bitcast i8* %call55 to %struct.BevVert*, !dbg !1173
  store %struct.BevVert* %38, %struct.BevVert** %bv, align 8, !dbg !1174
  %39 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !1175
  %40 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !1176
  %v56 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %40, i32 0, i32 0, !dbg !1177
  store %struct.BMVert* %39, %struct.BMVert** %v56, align 8, !dbg !1178
  %41 = load i32, i32* %ntot, align 4, !dbg !1179
  %42 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !1180
  %edgecount = getelementptr inbounds %struct.BevVert, %struct.BevVert* %42, i32 0, i32 1, !dbg !1181
  store i32 %41, i32* %edgecount, align 8, !dbg !1182
  %43 = load i32, i32* %nsel, align 4, !dbg !1183
  %44 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !1184
  %selcount = getelementptr inbounds %struct.BevVert, %struct.BevVert* %44, i32 0, i32 2, !dbg !1185
  store i32 %43, i32* %selcount, align 4, !dbg !1186
  %45 = load i32, i32* %nwire, align 4, !dbg !1187
  %46 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !1188
  %wirecount = getelementptr inbounds %struct.BevVert, %struct.BevVert* %46, i32 0, i32 3, !dbg !1189
  store i32 %45, i32* %wirecount, align 8, !dbg !1190
  %47 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !1191
  %offset = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %47, i32 0, i32 3, !dbg !1192
  %48 = load float, float* %offset, align 8, !dbg !1192
  %49 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !1193
  %offset57 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %49, i32 0, i32 4, !dbg !1194
  store float %48, float* %offset57, align 4, !dbg !1195
  %50 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !1196
  %mem_arena58 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %50, i32 0, i32 1, !dbg !1197
  %51 = load %struct.MemArena*, %struct.MemArena** %mem_arena58, align 8, !dbg !1197
  %52 = load i32, i32* %ntot, align 4, !dbg !1198
  %conv59 = sext i32 %52 to i64, !dbg !1198
  %mul = mul i64 %conv59, 80, !dbg !1199
  %call60 = call i8* @BLI_memarena_alloc(%struct.MemArena* %51, i64 %mul), !dbg !1200
  %53 = bitcast i8* %call60 to %struct.EdgeHalf*, !dbg !1201
  %54 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !1202
  %edges = getelementptr inbounds %struct.BevVert, %struct.BevVert* %54, i32 0, i32 7, !dbg !1203
  store %struct.EdgeHalf* %53, %struct.EdgeHalf** %edges, align 8, !dbg !1204
  %55 = load i32, i32* %nwire, align 4, !dbg !1205
  %tobool61 = icmp ne i32 %55, 0, !dbg !1205
  br i1 %tobool61, label %if.then62, label %if.else, !dbg !1207

if.then62:                                        ; preds = %if.end54
  %56 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !1208
  %mem_arena63 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %56, i32 0, i32 1, !dbg !1209
  %57 = load %struct.MemArena*, %struct.MemArena** %mem_arena63, align 8, !dbg !1209
  %58 = load i32, i32* %nwire, align 4, !dbg !1210
  %conv64 = sext i32 %58 to i64, !dbg !1210
  %mul65 = mul i64 %conv64, 8, !dbg !1211
  %call66 = call i8* @BLI_memarena_alloc(%struct.MemArena* %57, i64 %mul65), !dbg !1212
  %59 = bitcast i8* %call66 to %struct.BMEdge**, !dbg !1213
  %60 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !1214
  %wire_edges = getelementptr inbounds %struct.BevVert, %struct.BevVert* %60, i32 0, i32 8, !dbg !1215
  store %struct.BMEdge** %59, %struct.BMEdge*** %wire_edges, align 8, !dbg !1216
  br label %if.end68, !dbg !1214

if.else:                                          ; preds = %if.end54
  %61 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !1217
  %wire_edges67 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %61, i32 0, i32 8, !dbg !1218
  store %struct.BMEdge** null, %struct.BMEdge*** %wire_edges67, align 8, !dbg !1219
  br label %if.end68

if.end68:                                         ; preds = %if.else, %if.then62
  %62 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !1220
  %mem_arena69 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %62, i32 0, i32 1, !dbg !1221
  %63 = load %struct.MemArena*, %struct.MemArena** %mem_arena69, align 8, !dbg !1221
  %call70 = call i8* @BLI_memarena_alloc(%struct.MemArena* %63, i64 32), !dbg !1222
  %64 = bitcast i8* %call70 to %struct.VMesh*, !dbg !1223
  %65 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !1224
  %vmesh = getelementptr inbounds %struct.BevVert, %struct.BevVert* %65, i32 0, i32 9, !dbg !1225
  store %struct.VMesh* %64, %struct.VMesh** %vmesh, align 8, !dbg !1226
  %66 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !1227
  %seg = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %66, i32 0, i32 5, !dbg !1228
  %67 = load i32, i32* %seg, align 8, !dbg !1228
  %68 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !1229
  %vmesh71 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %68, i32 0, i32 9, !dbg !1230
  %69 = load %struct.VMesh*, %struct.VMesh** %vmesh71, align 8, !dbg !1230
  %seg72 = getelementptr inbounds %struct.VMesh, %struct.VMesh* %69, i32 0, i32 3, !dbg !1231
  store i32 %67, i32* %seg72, align 4, !dbg !1232
  %70 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !1233
  %vertex_only73 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %70, i32 0, i32 7, !dbg !1235
  %71 = load i8, i8* %vertex_only73, align 8, !dbg !1235
  %tobool74 = icmp ne i8 %71, 0, !dbg !1233
  br i1 %tobool74, label %if.then75, label %if.end102, !dbg !1236

if.then75:                                        ; preds = %if.end68
  %72 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !1237
  %dvert = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %72, i32 0, i32 11, !dbg !1240
  %73 = load %struct.MDeformVert*, %struct.MDeformVert** %dvert, align 8, !dbg !1240
  %cmp76 = icmp ne %struct.MDeformVert* %73, null, !dbg !1241
  br i1 %cmp76, label %land.lhs.true78, label %if.else94, !dbg !1242

land.lhs.true78:                                  ; preds = %if.then75
  %74 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !1243
  %vertex_group = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %74, i32 0, i32 12, !dbg !1244
  %75 = load i32, i32* %vertex_group, align 8, !dbg !1244
  %cmp79 = icmp ne i32 %75, -1, !dbg !1245
  br i1 %cmp79, label %if.then81, label %if.else94, !dbg !1246

if.then81:                                        ; preds = %land.lhs.true78
  %76 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !1247
  %dvert82 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %76, i32 0, i32 11, !dbg !1249
  %77 = load %struct.MDeformVert*, %struct.MDeformVert** %dvert82, align 8, !dbg !1249
  %78 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !1250
  %head83 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %78, i32 0, i32 0, !dbg !1250
  %call84 = call i32 @_bm_elem_index_get(%struct.BMHeader* %head83), !dbg !1250
  %idx.ext = sext i32 %call84 to i64, !dbg !1251
  %add.ptr = getelementptr inbounds %struct.MDeformVert, %struct.MDeformVert* %77, i64 %idx.ext, !dbg !1251
  %79 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !1252
  %vertex_group85 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %79, i32 0, i32 12, !dbg !1253
  %80 = load i32, i32* %vertex_group85, align 8, !dbg !1253
  %call86 = call float @defvert_find_weight(%struct.MDeformVert* %add.ptr, i32 %80), !dbg !1254
  store float %call86, float* %weight, align 4, !dbg !1255
  %81 = load float, float* %weight, align 4, !dbg !1256
  %cmp87 = fcmp ole float %81, 0.000000e+00, !dbg !1258
  br i1 %cmp87, label %if.then89, label %if.end91, !dbg !1259

if.then89:                                        ; preds = %if.then81
  %82 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !1260
  %head90 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %82, i32 0, i32 0, !dbg !1260
  call void @_bm_elem_flag_disable(%struct.BMHeader* %head90, i8 zeroext 16), !dbg !1260
  store %struct.BevVert* null, %struct.BevVert** %retval, align 8, !dbg !1262
  br label %return, !dbg !1262

if.end91:                                         ; preds = %if.then81
  %83 = load float, float* %weight, align 4, !dbg !1263
  %84 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !1264
  %offset92 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %84, i32 0, i32 4, !dbg !1265
  %85 = load float, float* %offset92, align 4, !dbg !1266
  %mul93 = fmul float %85, %83, !dbg !1266
  store float %mul93, float* %offset92, align 4, !dbg !1266
  br label %if.end101, !dbg !1267

if.else94:                                        ; preds = %land.lhs.true78, %if.then75
  %86 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !1268
  %use_weights = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %86, i32 0, i32 8, !dbg !1270
  %87 = load i8, i8* %use_weights, align 1, !dbg !1270
  %tobool95 = icmp ne i8 %87, 0, !dbg !1268
  br i1 %tobool95, label %if.then96, label %if.end100, !dbg !1271

if.then96:                                        ; preds = %if.else94
  %88 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !1272
  %vdata = getelementptr inbounds %struct.BMesh, %struct.BMesh* %88, i32 0, i32 24, !dbg !1274
  %89 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !1275
  %90 = bitcast %struct.BMVert* %89 to i8*, !dbg !1275
  %call97 = call float @BM_elem_float_data_get(%struct.CustomData* %vdata, i8* %90, i32 29), !dbg !1276
  store float %call97, float* %weight, align 4, !dbg !1277
  %91 = load float, float* %weight, align 4, !dbg !1278
  %92 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !1279
  %offset98 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %92, i32 0, i32 4, !dbg !1280
  %93 = load float, float* %offset98, align 4, !dbg !1281
  %mul99 = fmul float %93, %91, !dbg !1281
  store float %mul99, float* %offset98, align 4, !dbg !1281
  br label %if.end100, !dbg !1282

if.end100:                                        ; preds = %if.then96, %if.else94
  br label %if.end101

if.end101:                                        ; preds = %if.end100, %if.end91
  br label %if.end102, !dbg !1283

if.end102:                                        ; preds = %if.end101, %if.end68
  %94 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !1284
  %vert_hash = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %94, i32 0, i32 0, !dbg !1285
  %95 = load %struct.GHash*, %struct.GHash** %vert_hash, align 8, !dbg !1285
  %96 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !1286
  %97 = bitcast %struct.BMVert* %96 to i8*, !dbg !1286
  %98 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !1287
  %99 = bitcast %struct.BevVert* %98 to i8*, !dbg !1287
  call void @BLI_ghash_insert(%struct.GHash* %95, i8* %97, i8* %99), !dbg !1288
  store i32 0, i32* %i, align 4, !dbg !1289
  %100 = load %struct.BMEdge*, %struct.BMEdge** %first_bme, align 8, !dbg !1290
  store %struct.BMEdge* %100, %struct.BMEdge** %bme, align 8, !dbg !1291
  %101 = load %struct.BMEdge*, %struct.BMEdge** %bme, align 8, !dbg !1292
  %head103 = getelementptr inbounds %struct.BMEdge, %struct.BMEdge* %101, i32 0, i32 0, !dbg !1292
  %api_flag104 = getelementptr inbounds %struct.BMHeader, %struct.BMHeader* %head103, i32 0, i32 4, !dbg !1292
  %102 = load i8, i8* %api_flag104, align 2, !dbg !1292
  %conv105 = zext i8 %102 to i32, !dbg !1292
  %or106 = or i32 %conv105, 4, !dbg !1292
  %conv107 = trunc i32 %or106 to i8, !dbg !1292
  store i8 %conv107, i8* %api_flag104, align 2, !dbg !1292
  %103 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !1294
  %edges108 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %103, i32 0, i32 7, !dbg !1295
  %104 = load %struct.EdgeHalf*, %struct.EdgeHalf** %edges108, align 8, !dbg !1295
  %arrayidx = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %104, i64 0, !dbg !1294
  store %struct.EdgeHalf* %arrayidx, %struct.EdgeHalf** %e, align 8, !dbg !1296
  %105 = load %struct.BMEdge*, %struct.BMEdge** %bme, align 8, !dbg !1297
  %106 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1298
  %e109 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %106, i32 0, i32 2, !dbg !1299
  store %struct.BMEdge* %105, %struct.BMEdge** %e109, align 8, !dbg !1300
  store i32 0, i32* %i, align 4, !dbg !1301
  br label %for.cond110, !dbg !1303

for.cond110:                                      ; preds = %for.inc187, %if.end102
  %107 = load i32, i32* %i, align 4, !dbg !1304
  %108 = load i32, i32* %ntot, align 4, !dbg !1306
  %cmp111 = icmp slt i32 %107, %108, !dbg !1307
  br i1 %cmp111, label %for.body113, label %for.end189, !dbg !1308

for.body113:                                      ; preds = %for.cond110
  %109 = load i32, i32* %i, align 4, !dbg !1309
  %cmp114 = icmp sgt i32 %109, 0, !dbg !1312
  br i1 %cmp114, label %if.then116, label %if.end162, !dbg !1313

if.then116:                                       ; preds = %for.body113
  store i32 0, i32* %found_shared_face, align 4, !dbg !1314
  store %struct.BMEdge* null, %struct.BMEdge** %unflagged_bme, align 8, !dbg !1316
  %110 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !1317
  %111 = bitcast %struct.BMVert* %110 to i8*, !dbg !1317
  %call117 = call i8* @BM_iter_new(%struct.BMIter* %iter, %struct.BMesh* null, i8 zeroext 4, i8* %111), !dbg !1317
  %112 = bitcast i8* %call117 to %struct.BMEdge*, !dbg !1317
  store %struct.BMEdge* %112, %struct.BMEdge** %bme2, align 8, !dbg !1317
  br label %for.cond118, !dbg !1317

for.cond118:                                      ; preds = %for.inc148, %if.then116
  %113 = load %struct.BMEdge*, %struct.BMEdge** %bme2, align 8, !dbg !1319
  %tobool119 = icmp ne %struct.BMEdge* %113, null, !dbg !1317
  br i1 %tobool119, label %for.body120, label %for.end150, !dbg !1317

for.body120:                                      ; preds = %for.cond118
  %114 = load %struct.BMEdge*, %struct.BMEdge** %bme2, align 8, !dbg !1321
  %head121 = getelementptr inbounds %struct.BMEdge, %struct.BMEdge* %114, i32 0, i32 0, !dbg !1321
  %api_flag122 = getelementptr inbounds %struct.BMHeader, %struct.BMHeader* %head121, i32 0, i32 4, !dbg !1321
  %115 = load i8, i8* %api_flag122, align 2, !dbg !1321
  %conv123 = zext i8 %115 to i32, !dbg !1321
  %and124 = and i32 %conv123, 4, !dbg !1321
  %tobool125 = icmp ne i32 %and124, 0, !dbg !1321
  br i1 %tobool125, label %if.then126, label %if.end127, !dbg !1324

if.then126:                                       ; preds = %for.body120
  br label %for.inc148, !dbg !1325

if.end127:                                        ; preds = %for.body120
  %116 = load %struct.BMEdge*, %struct.BMEdge** %unflagged_bme, align 8, !dbg !1326
  %tobool128 = icmp ne %struct.BMEdge* %116, null, !dbg !1326
  br i1 %tobool128, label %if.end130, label %if.then129, !dbg !1328

if.then129:                                       ; preds = %if.end127
  %117 = load %struct.BMEdge*, %struct.BMEdge** %bme2, align 8, !dbg !1329
  store %struct.BMEdge* %117, %struct.BMEdge** %unflagged_bme, align 8, !dbg !1330
  br label %if.end130, !dbg !1331

if.end130:                                        ; preds = %if.then129, %if.end127
  %118 = load %struct.BMEdge*, %struct.BMEdge** %bme, align 8, !dbg !1332
  %l = getelementptr inbounds %struct.BMEdge, %struct.BMEdge* %118, i32 0, i32 4, !dbg !1334
  %119 = load %struct.BMLoop*, %struct.BMLoop** %l, align 8, !dbg !1334
  %tobool131 = icmp ne %struct.BMLoop* %119, null, !dbg !1332
  br i1 %tobool131, label %if.end133, label %if.then132, !dbg !1335

if.then132:                                       ; preds = %if.end130
  br label %for.inc148, !dbg !1336

if.end133:                                        ; preds = %if.end130
  %120 = load %struct.BMEdge*, %struct.BMEdge** %bme2, align 8, !dbg !1337
  %121 = bitcast %struct.BMEdge* %120 to i8*, !dbg !1337
  %call134 = call i8* @BM_iter_new(%struct.BMIter* %iter2, %struct.BMesh* null, i8 zeroext 8, i8* %121), !dbg !1337
  %122 = bitcast i8* %call134 to %struct.BMFace*, !dbg !1337
  store %struct.BMFace* %122, %struct.BMFace** %f, align 8, !dbg !1337
  br label %for.cond135, !dbg !1337

for.cond135:                                      ; preds = %for.inc142, %if.end133
  %123 = load %struct.BMFace*, %struct.BMFace** %f, align 8, !dbg !1339
  %tobool136 = icmp ne %struct.BMFace* %123, null, !dbg !1337
  br i1 %tobool136, label %for.body137, label %for.end144, !dbg !1337

for.body137:                                      ; preds = %for.cond135
  %124 = load %struct.BMFace*, %struct.BMFace** %f, align 8, !dbg !1341
  %125 = load %struct.BMEdge*, %struct.BMEdge** %bme, align 8, !dbg !1344
  %call138 = call %struct.BMLoop* @BM_face_edge_share_loop(%struct.BMFace* %124, %struct.BMEdge* %125), !dbg !1345
  %tobool139 = icmp ne %struct.BMLoop* %call138, null, !dbg !1345
  br i1 %tobool139, label %if.then140, label %if.end141, !dbg !1346

if.then140:                                       ; preds = %for.body137
  store i32 1, i32* %found_shared_face, align 4, !dbg !1347
  br label %for.end144, !dbg !1349

if.end141:                                        ; preds = %for.body137
  br label %for.inc142, !dbg !1350

for.inc142:                                       ; preds = %if.end141
  %call143 = call i8* @BM_iter_step(%struct.BMIter* %iter2), !dbg !1339
  %126 = bitcast i8* %call143 to %struct.BMFace*, !dbg !1339
  store %struct.BMFace* %126, %struct.BMFace** %f, align 8, !dbg !1339
  br label %for.cond135, !dbg !1339, !llvm.loop !1351

for.end144:                                       ; preds = %if.then140, %for.cond135
  %127 = load i32, i32* %found_shared_face, align 4, !dbg !1353
  %tobool145 = icmp ne i32 %127, 0, !dbg !1353
  br i1 %tobool145, label %if.then146, label %if.end147, !dbg !1355

if.then146:                                       ; preds = %for.end144
  br label %for.end150, !dbg !1356

if.end147:                                        ; preds = %for.end144
  br label %for.inc148, !dbg !1357

for.inc148:                                       ; preds = %if.end147, %if.then132, %if.then126
  %call149 = call i8* @BM_iter_step(%struct.BMIter* %iter), !dbg !1319
  %128 = bitcast i8* %call149 to %struct.BMEdge*, !dbg !1319
  store %struct.BMEdge* %128, %struct.BMEdge** %bme2, align 8, !dbg !1319
  br label %for.cond118, !dbg !1319, !llvm.loop !1358

for.end150:                                       ; preds = %if.then146, %for.cond118
  %129 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !1360
  %edges151 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %129, i32 0, i32 7, !dbg !1361
  %130 = load %struct.EdgeHalf*, %struct.EdgeHalf** %edges151, align 8, !dbg !1361
  %131 = load i32, i32* %i, align 4, !dbg !1362
  %idxprom = sext i32 %131 to i64, !dbg !1360
  %arrayidx152 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %130, i64 %idxprom, !dbg !1360
  store %struct.EdgeHalf* %arrayidx152, %struct.EdgeHalf** %e, align 8, !dbg !1363
  %132 = load i32, i32* %found_shared_face, align 4, !dbg !1364
  %tobool153 = icmp ne i32 %132, 0, !dbg !1364
  br i1 %tobool153, label %if.then154, label %if.else159, !dbg !1366

if.then154:                                       ; preds = %for.end150
  %133 = load %struct.BMEdge*, %struct.BMEdge** %bme2, align 8, !dbg !1367
  %134 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1369
  %e155 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %134, i32 0, i32 2, !dbg !1370
  store %struct.BMEdge* %133, %struct.BMEdge** %e155, align 8, !dbg !1371
  %135 = load %struct.BMFace*, %struct.BMFace** %f, align 8, !dbg !1372
  %136 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1373
  %fprev = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %136, i32 0, i32 3, !dbg !1374
  store %struct.BMFace* %135, %struct.BMFace** %fprev, align 8, !dbg !1375
  %137 = load %struct.BMFace*, %struct.BMFace** %f, align 8, !dbg !1376
  %138 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !1377
  %edges156 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %138, i32 0, i32 7, !dbg !1378
  %139 = load %struct.EdgeHalf*, %struct.EdgeHalf** %edges156, align 8, !dbg !1378
  %140 = load i32, i32* %i, align 4, !dbg !1379
  %sub = sub nsw i32 %140, 1, !dbg !1380
  %idxprom157 = sext i32 %sub to i64, !dbg !1377
  %arrayidx158 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %139, i64 %idxprom157, !dbg !1377
  %fnext = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %arrayidx158, i32 0, i32 4, !dbg !1381
  store %struct.BMFace* %137, %struct.BMFace** %fnext, align 8, !dbg !1382
  br label %if.end161, !dbg !1383

if.else159:                                       ; preds = %for.end150
  %141 = load %struct.BMEdge*, %struct.BMEdge** %unflagged_bme, align 8, !dbg !1384
  %142 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1386
  %e160 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %142, i32 0, i32 2, !dbg !1387
  store %struct.BMEdge* %141, %struct.BMEdge** %e160, align 8, !dbg !1388
  br label %if.end161

if.end161:                                        ; preds = %if.else159, %if.then154
  br label %if.end162, !dbg !1389

if.end162:                                        ; preds = %if.end161, %for.body113
  %143 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1390
  %e163 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %143, i32 0, i32 2, !dbg !1391
  %144 = load %struct.BMEdge*, %struct.BMEdge** %e163, align 8, !dbg !1391
  store %struct.BMEdge* %144, %struct.BMEdge** %bme, align 8, !dbg !1392
  %145 = load %struct.BMEdge*, %struct.BMEdge** %bme, align 8, !dbg !1393
  %head164 = getelementptr inbounds %struct.BMEdge, %struct.BMEdge* %145, i32 0, i32 0, !dbg !1393
  %api_flag165 = getelementptr inbounds %struct.BMHeader, %struct.BMHeader* %head164, i32 0, i32 4, !dbg !1393
  %146 = load i8, i8* %api_flag165, align 2, !dbg !1393
  %conv166 = zext i8 %146 to i32, !dbg !1393
  %or167 = or i32 %conv166, 4, !dbg !1393
  %conv168 = trunc i32 %or167 to i8, !dbg !1393
  store i8 %conv168, i8* %api_flag165, align 2, !dbg !1393
  %147 = load %struct.BMEdge*, %struct.BMEdge** %bme, align 8, !dbg !1395
  %head169 = getelementptr inbounds %struct.BMEdge, %struct.BMEdge* %147, i32 0, i32 0, !dbg !1395
  %call170 = call zeroext i8 @_bm_elem_flag_test(%struct.BMHeader* %head169, i8 zeroext 16), !dbg !1395
  %conv171 = zext i8 %call170 to i32, !dbg !1395
  %tobool172 = icmp ne i32 %conv171, 0, !dbg !1395
  br i1 %tobool172, label %land.lhs.true173, label %if.else179, !dbg !1397

land.lhs.true173:                                 ; preds = %if.end162
  %148 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !1398
  %vertex_only174 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %148, i32 0, i32 7, !dbg !1399
  %149 = load i8, i8* %vertex_only174, align 8, !dbg !1399
  %tobool175 = icmp ne i8 %149, 0, !dbg !1398
  br i1 %tobool175, label %if.else179, label %if.then176, !dbg !1400

if.then176:                                       ; preds = %land.lhs.true173
  %150 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1401
  %is_bev = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %150, i32 0, i32 12, !dbg !1403
  store i8 1, i8* %is_bev, align 4, !dbg !1404
  %151 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !1405
  %seg177 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %151, i32 0, i32 5, !dbg !1406
  %152 = load i32, i32* %seg177, align 8, !dbg !1406
  %153 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1407
  %seg178 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %153, i32 0, i32 7, !dbg !1408
  store i32 %152, i32* %seg178, align 8, !dbg !1409
  br label %if.end182, !dbg !1410

if.else179:                                       ; preds = %land.lhs.true173, %if.end162
  %154 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1411
  %is_bev180 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %154, i32 0, i32 12, !dbg !1413
  store i8 0, i8* %is_bev180, align 4, !dbg !1414
  %155 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1415
  %seg181 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %155, i32 0, i32 7, !dbg !1416
  store i32 0, i32* %seg181, align 8, !dbg !1417
  br label %if.end182

if.end182:                                        ; preds = %if.else179, %if.then176
  %156 = load %struct.BMEdge*, %struct.BMEdge** %bme, align 8, !dbg !1418
  %v2183 = getelementptr inbounds %struct.BMEdge, %struct.BMEdge* %156, i32 0, i32 3, !dbg !1419
  %157 = load %struct.BMVert*, %struct.BMVert** %v2183, align 8, !dbg !1419
  %158 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !1420
  %cmp184 = icmp eq %struct.BMVert* %157, %158, !dbg !1421
  %conv185 = zext i1 %cmp184 to i32, !dbg !1421
  %conv186 = trunc i32 %conv185 to i8, !dbg !1422
  %159 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1423
  %is_rev = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %159, i32 0, i32 13, !dbg !1424
  store i8 %conv186, i8* %is_rev, align 1, !dbg !1425
  br label %for.inc187, !dbg !1426

for.inc187:                                       ; preds = %if.end182
  %160 = load i32, i32* %i, align 4, !dbg !1427
  %inc188 = add nsw i32 %160, 1, !dbg !1427
  store i32 %inc188, i32* %i, align 4, !dbg !1427
  br label %for.cond110, !dbg !1428, !llvm.loop !1429

for.end189:                                       ; preds = %for.cond110
  %161 = load %struct.BMEdge*, %struct.BMEdge** %bme, align 8, !dbg !1431
  %162 = bitcast %struct.BMEdge* %161 to i8*, !dbg !1431
  %call190 = call i8* @BM_iter_new(%struct.BMIter* %iter2, %struct.BMesh* null, i8 zeroext 8, i8* %162), !dbg !1431
  %163 = bitcast i8* %call190 to %struct.BMFace*, !dbg !1431
  store %struct.BMFace* %163, %struct.BMFace** %f, align 8, !dbg !1431
  br label %for.cond191, !dbg !1431

for.cond191:                                      ; preds = %for.inc222, %for.end189
  %164 = load %struct.BMFace*, %struct.BMFace** %f, align 8, !dbg !1433
  %tobool192 = icmp ne %struct.BMFace* %164, null, !dbg !1431
  br i1 %tobool192, label %for.body193, label %for.end224, !dbg !1431

for.body193:                                      ; preds = %for.cond191
  %165 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !1435
  %edges194 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %165, i32 0, i32 7, !dbg !1438
  %166 = load %struct.EdgeHalf*, %struct.EdgeHalf** %edges194, align 8, !dbg !1438
  %arrayidx195 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %166, i64 0, !dbg !1435
  %e196 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %arrayidx195, i32 0, i32 2, !dbg !1439
  %167 = load %struct.BMEdge*, %struct.BMEdge** %e196, align 8, !dbg !1439
  %l197 = getelementptr inbounds %struct.BMEdge, %struct.BMEdge* %167, i32 0, i32 4, !dbg !1440
  %168 = load %struct.BMLoop*, %struct.BMLoop** %l197, align 8, !dbg !1440
  %tobool198 = icmp ne %struct.BMLoop* %168, null, !dbg !1435
  br i1 %tobool198, label %land.lhs.true199, label %if.end221, !dbg !1441

land.lhs.true199:                                 ; preds = %for.body193
  %169 = load %struct.BMFace*, %struct.BMFace** %f, align 8, !dbg !1442
  %170 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !1443
  %edges200 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %170, i32 0, i32 7, !dbg !1444
  %171 = load %struct.EdgeHalf*, %struct.EdgeHalf** %edges200, align 8, !dbg !1444
  %arrayidx201 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %171, i64 0, !dbg !1443
  %e202 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %arrayidx201, i32 0, i32 2, !dbg !1445
  %172 = load %struct.BMEdge*, %struct.BMEdge** %e202, align 8, !dbg !1445
  %call203 = call %struct.BMLoop* @BM_face_edge_share_loop(%struct.BMFace* %169, %struct.BMEdge* %172), !dbg !1446
  %tobool204 = icmp ne %struct.BMLoop* %call203, null, !dbg !1446
  br i1 %tobool204, label %if.then205, label %if.end221, !dbg !1447

if.then205:                                       ; preds = %land.lhs.true199
  %173 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !1448
  %edges206 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %173, i32 0, i32 7, !dbg !1451
  %174 = load %struct.EdgeHalf*, %struct.EdgeHalf** %edges206, align 8, !dbg !1451
  %arrayidx207 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %174, i64 0, !dbg !1448
  %fnext208 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %arrayidx207, i32 0, i32 4, !dbg !1452
  %175 = load %struct.BMFace*, %struct.BMFace** %fnext208, align 8, !dbg !1452
  %176 = load %struct.BMFace*, %struct.BMFace** %f, align 8, !dbg !1453
  %cmp209 = icmp eq %struct.BMFace* %175, %176, !dbg !1454
  br i1 %cmp209, label %if.then211, label %if.end212, !dbg !1455

if.then211:                                       ; preds = %if.then205
  br label %for.inc222, !dbg !1456

if.end212:                                        ; preds = %if.then205
  %177 = load %struct.BMFace*, %struct.BMFace** %f, align 8, !dbg !1457
  %178 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !1458
  %edges213 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %178, i32 0, i32 7, !dbg !1459
  %179 = load %struct.EdgeHalf*, %struct.EdgeHalf** %edges213, align 8, !dbg !1459
  %180 = load i32, i32* %ntot, align 4, !dbg !1460
  %sub214 = sub nsw i32 %180, 1, !dbg !1461
  %idxprom215 = sext i32 %sub214 to i64, !dbg !1458
  %arrayidx216 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %179, i64 %idxprom215, !dbg !1458
  %fnext217 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %arrayidx216, i32 0, i32 4, !dbg !1462
  store %struct.BMFace* %177, %struct.BMFace** %fnext217, align 8, !dbg !1463
  %181 = load %struct.BMFace*, %struct.BMFace** %f, align 8, !dbg !1464
  %182 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !1465
  %edges218 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %182, i32 0, i32 7, !dbg !1466
  %183 = load %struct.EdgeHalf*, %struct.EdgeHalf** %edges218, align 8, !dbg !1466
  %arrayidx219 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %183, i64 0, !dbg !1465
  %fprev220 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %arrayidx219, i32 0, i32 3, !dbg !1467
  store %struct.BMFace* %181, %struct.BMFace** %fprev220, align 8, !dbg !1468
  br label %for.end224, !dbg !1469

if.end221:                                        ; preds = %land.lhs.true199, %for.body193
  br label %for.inc222, !dbg !1470

for.inc222:                                       ; preds = %if.end221, %if.then211
  %call223 = call i8* @BM_iter_step(%struct.BMIter* %iter2), !dbg !1433
  %184 = bitcast i8* %call223 to %struct.BMFace*, !dbg !1433
  store %struct.BMFace* %184, %struct.BMFace** %f, align 8, !dbg !1433
  br label %for.cond191, !dbg !1433, !llvm.loop !1471

for.end224:                                       ; preds = %if.end212, %for.cond191
  %185 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !1473
  %186 = bitcast %struct.BMVert* %185 to i8*, !dbg !1473
  %call225 = call i8* @BM_iter_new(%struct.BMIter* %iter, %struct.BMesh* null, i8 zeroext 4, i8* %186), !dbg !1473
  %187 = bitcast i8* %call225 to %struct.BMEdge*, !dbg !1473
  store %struct.BMEdge* %187, %struct.BMEdge** %bme, align 8, !dbg !1473
  br label %for.cond226, !dbg !1473

for.cond226:                                      ; preds = %for.inc234, %for.end224
  %188 = load %struct.BMEdge*, %struct.BMEdge** %bme, align 8, !dbg !1475
  %tobool227 = icmp ne %struct.BMEdge* %188, null, !dbg !1473
  br i1 %tobool227, label %for.body228, label %for.end236, !dbg !1473

for.body228:                                      ; preds = %for.cond226
  %189 = load %struct.BMEdge*, %struct.BMEdge** %bme, align 8, !dbg !1477
  %head229 = getelementptr inbounds %struct.BMEdge, %struct.BMEdge* %189, i32 0, i32 0, !dbg !1477
  %api_flag230 = getelementptr inbounds %struct.BMHeader, %struct.BMHeader* %head229, i32 0, i32 4, !dbg !1477
  %190 = load i8, i8* %api_flag230, align 2, !dbg !1477
  %conv231 = zext i8 %190 to i32, !dbg !1477
  %and232 = and i32 %conv231, -5, !dbg !1477
  %conv233 = trunc i32 %and232 to i8, !dbg !1477
  store i8 %conv233, i8* %api_flag230, align 2, !dbg !1477
  br label %for.inc234, !dbg !1480

for.inc234:                                       ; preds = %for.body228
  %call235 = call i8* @BM_iter_step(%struct.BMIter* %iter), !dbg !1475
  %191 = bitcast i8* %call235 to %struct.BMEdge*, !dbg !1475
  store %struct.BMEdge* %191, %struct.BMEdge** %bme, align 8, !dbg !1475
  br label %for.cond226, !dbg !1475, !llvm.loop !1481

for.end236:                                       ; preds = %for.cond226
  %192 = load i32, i32* %ntot, align 4, !dbg !1483
  %cmp237 = icmp sgt i32 %192, 1, !dbg !1485
  br i1 %cmp237, label %if.then239, label %if.end354, !dbg !1486

if.then239:                                       ; preds = %for.end236
  store i32 0, i32* %ccw_test_sum, align 4, !dbg !1487
  store i32 0, i32* %i, align 4, !dbg !1489
  br label %for.cond240, !dbg !1491

for.cond240:                                      ; preds = %for.inc258, %if.then239
  %193 = load i32, i32* %i, align 4, !dbg !1492
  %194 = load i32, i32* %ntot, align 4, !dbg !1494
  %cmp241 = icmp slt i32 %193, %194, !dbg !1495
  br i1 %cmp241, label %for.body243, label %for.end260, !dbg !1496

for.body243:                                      ; preds = %for.cond240
  %195 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !1497
  %edges244 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %195, i32 0, i32 7, !dbg !1498
  %196 = load %struct.EdgeHalf*, %struct.EdgeHalf** %edges244, align 8, !dbg !1498
  %197 = load i32, i32* %i, align 4, !dbg !1499
  %idxprom245 = sext i32 %197 to i64, !dbg !1497
  %arrayidx246 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %196, i64 %idxprom245, !dbg !1497
  %e247 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %arrayidx246, i32 0, i32 2, !dbg !1500
  %198 = load %struct.BMEdge*, %struct.BMEdge** %e247, align 8, !dbg !1500
  %199 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !1501
  %edges248 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %199, i32 0, i32 7, !dbg !1502
  %200 = load %struct.EdgeHalf*, %struct.EdgeHalf** %edges248, align 8, !dbg !1502
  %201 = load i32, i32* %i, align 4, !dbg !1503
  %add = add nsw i32 %201, 1, !dbg !1504
  %202 = load i32, i32* %ntot, align 4, !dbg !1505
  %rem = srem i32 %add, %202, !dbg !1506
  %idxprom249 = sext i32 %rem to i64, !dbg !1501
  %arrayidx250 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %200, i64 %idxprom249, !dbg !1501
  %e251 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %arrayidx250, i32 0, i32 2, !dbg !1507
  %203 = load %struct.BMEdge*, %struct.BMEdge** %e251, align 8, !dbg !1507
  %204 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !1508
  %edges252 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %204, i32 0, i32 7, !dbg !1509
  %205 = load %struct.EdgeHalf*, %struct.EdgeHalf** %edges252, align 8, !dbg !1509
  %206 = load i32, i32* %i, align 4, !dbg !1510
  %idxprom253 = sext i32 %206 to i64, !dbg !1508
  %arrayidx254 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %205, i64 %idxprom253, !dbg !1508
  %fnext255 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %arrayidx254, i32 0, i32 4, !dbg !1511
  %207 = load %struct.BMFace*, %struct.BMFace** %fnext255, align 8, !dbg !1511
  %call256 = call i32 @bev_ccw_test(%struct.BMEdge* %198, %struct.BMEdge* %203, %struct.BMFace* %207), !dbg !1512
  %208 = load i32, i32* %ccw_test_sum, align 4, !dbg !1513
  %add257 = add nsw i32 %208, %call256, !dbg !1513
  store i32 %add257, i32* %ccw_test_sum, align 4, !dbg !1513
  br label %for.inc258, !dbg !1514

for.inc258:                                       ; preds = %for.body243
  %209 = load i32, i32* %i, align 4, !dbg !1515
  %inc259 = add nsw i32 %209, 1, !dbg !1515
  store i32 %inc259, i32* %i, align 4, !dbg !1515
  br label %for.cond240, !dbg !1516, !llvm.loop !1517

for.end260:                                       ; preds = %for.cond240
  %210 = load i32, i32* %ccw_test_sum, align 4, !dbg !1519
  %cmp261 = icmp slt i32 %210, 0, !dbg !1521
  br i1 %cmp261, label %if.then263, label %if.end353, !dbg !1522

if.then263:                                       ; preds = %for.end260
  store i32 0, i32* %i, align 4, !dbg !1523
  br label %for.cond264, !dbg !1526

for.cond264:                                      ; preds = %for.inc327, %if.then263
  %211 = load i32, i32* %i, align 4, !dbg !1527
  %212 = load i32, i32* %ntot, align 4, !dbg !1529
  %div = sdiv i32 %212, 2, !dbg !1530
  %sub265 = sub nsw i32 %div, 1, !dbg !1531
  %cmp266 = icmp sle i32 %211, %sub265, !dbg !1532
  br i1 %cmp266, label %for.body268, label %for.end329, !dbg !1533

for.body268:                                      ; preds = %for.cond264
  call void @llvm.dbg.declare(metadata %struct.EdgeHalf* %sw_ap, metadata !1534, metadata !DIExpression()), !dbg !1537
  %213 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !1537
  %edges269 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %213, i32 0, i32 7, !dbg !1537
  %214 = load %struct.EdgeHalf*, %struct.EdgeHalf** %edges269, align 8, !dbg !1537
  %215 = load i32, i32* %i, align 4, !dbg !1537
  %idxprom270 = sext i32 %215 to i64, !dbg !1537
  %arrayidx271 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %214, i64 %idxprom270, !dbg !1537
  %216 = bitcast %struct.EdgeHalf* %sw_ap to i8*, !dbg !1537
  %217 = bitcast %struct.EdgeHalf* %arrayidx271 to i8*, !dbg !1537
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %216, i8* align 8 %217, i64 80, i1 false), !dbg !1537
  %218 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !1537
  %edges272 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %218, i32 0, i32 7, !dbg !1537
  %219 = load %struct.EdgeHalf*, %struct.EdgeHalf** %edges272, align 8, !dbg !1537
  %220 = load i32, i32* %i, align 4, !dbg !1537
  %idxprom273 = sext i32 %220 to i64, !dbg !1537
  %arrayidx274 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %219, i64 %idxprom273, !dbg !1537
  %221 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !1537
  %edges275 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %221, i32 0, i32 7, !dbg !1537
  %222 = load %struct.EdgeHalf*, %struct.EdgeHalf** %edges275, align 8, !dbg !1537
  %223 = load i32, i32* %ntot, align 4, !dbg !1537
  %224 = load i32, i32* %i, align 4, !dbg !1537
  %sub276 = sub nsw i32 %223, %224, !dbg !1537
  %sub277 = sub nsw i32 %sub276, 1, !dbg !1537
  %idxprom278 = sext i32 %sub277 to i64, !dbg !1537
  %arrayidx279 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %222, i64 %idxprom278, !dbg !1537
  %225 = bitcast %struct.EdgeHalf* %arrayidx274 to i8*, !dbg !1537
  %226 = bitcast %struct.EdgeHalf* %arrayidx279 to i8*, !dbg !1537
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %225, i8* align 8 %226, i64 80, i1 false), !dbg !1537
  %227 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !1537
  %edges280 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %227, i32 0, i32 7, !dbg !1537
  %228 = load %struct.EdgeHalf*, %struct.EdgeHalf** %edges280, align 8, !dbg !1537
  %229 = load i32, i32* %ntot, align 4, !dbg !1537
  %230 = load i32, i32* %i, align 4, !dbg !1537
  %sub281 = sub nsw i32 %229, %230, !dbg !1537
  %sub282 = sub nsw i32 %sub281, 1, !dbg !1537
  %idxprom283 = sext i32 %sub282 to i64, !dbg !1537
  %arrayidx284 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %228, i64 %idxprom283, !dbg !1537
  %231 = bitcast %struct.EdgeHalf* %arrayidx284 to i8*, !dbg !1537
  %232 = bitcast %struct.EdgeHalf* %sw_ap to i8*, !dbg !1537
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %231, i8* align 8 %232, i64 80, i1 false), !dbg !1537
  call void @llvm.dbg.declare(metadata %struct.BMFace** %sw_ap285, metadata !1538, metadata !DIExpression()), !dbg !1540
  %233 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !1540
  %edges286 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %233, i32 0, i32 7, !dbg !1540
  %234 = load %struct.EdgeHalf*, %struct.EdgeHalf** %edges286, align 8, !dbg !1540
  %235 = load i32, i32* %i, align 4, !dbg !1540
  %idxprom287 = sext i32 %235 to i64, !dbg !1540
  %arrayidx288 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %234, i64 %idxprom287, !dbg !1540
  %fprev289 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %arrayidx288, i32 0, i32 3, !dbg !1540
  %236 = load %struct.BMFace*, %struct.BMFace** %fprev289, align 8, !dbg !1540
  store %struct.BMFace* %236, %struct.BMFace** %sw_ap285, align 8, !dbg !1540
  %237 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !1540
  %edges290 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %237, i32 0, i32 7, !dbg !1540
  %238 = load %struct.EdgeHalf*, %struct.EdgeHalf** %edges290, align 8, !dbg !1540
  %239 = load i32, i32* %i, align 4, !dbg !1540
  %idxprom291 = sext i32 %239 to i64, !dbg !1540
  %arrayidx292 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %238, i64 %idxprom291, !dbg !1540
  %fnext293 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %arrayidx292, i32 0, i32 4, !dbg !1540
  %240 = load %struct.BMFace*, %struct.BMFace** %fnext293, align 8, !dbg !1540
  %241 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !1540
  %edges294 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %241, i32 0, i32 7, !dbg !1540
  %242 = load %struct.EdgeHalf*, %struct.EdgeHalf** %edges294, align 8, !dbg !1540
  %243 = load i32, i32* %i, align 4, !dbg !1540
  %idxprom295 = sext i32 %243 to i64, !dbg !1540
  %arrayidx296 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %242, i64 %idxprom295, !dbg !1540
  %fprev297 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %arrayidx296, i32 0, i32 3, !dbg !1540
  store %struct.BMFace* %240, %struct.BMFace** %fprev297, align 8, !dbg !1540
  %244 = load %struct.BMFace*, %struct.BMFace** %sw_ap285, align 8, !dbg !1540
  %245 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !1540
  %edges298 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %245, i32 0, i32 7, !dbg !1540
  %246 = load %struct.EdgeHalf*, %struct.EdgeHalf** %edges298, align 8, !dbg !1540
  %247 = load i32, i32* %i, align 4, !dbg !1540
  %idxprom299 = sext i32 %247 to i64, !dbg !1540
  %arrayidx300 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %246, i64 %idxprom299, !dbg !1540
  %fnext301 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %arrayidx300, i32 0, i32 4, !dbg !1540
  store %struct.BMFace* %244, %struct.BMFace** %fnext301, align 8, !dbg !1540
  call void @llvm.dbg.declare(metadata %struct.BMFace** %sw_ap302, metadata !1541, metadata !DIExpression()), !dbg !1543
  %248 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !1543
  %edges303 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %248, i32 0, i32 7, !dbg !1543
  %249 = load %struct.EdgeHalf*, %struct.EdgeHalf** %edges303, align 8, !dbg !1543
  %250 = load i32, i32* %ntot, align 4, !dbg !1543
  %251 = load i32, i32* %i, align 4, !dbg !1543
  %sub304 = sub nsw i32 %250, %251, !dbg !1543
  %sub305 = sub nsw i32 %sub304, 1, !dbg !1543
  %idxprom306 = sext i32 %sub305 to i64, !dbg !1543
  %arrayidx307 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %249, i64 %idxprom306, !dbg !1543
  %fprev308 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %arrayidx307, i32 0, i32 3, !dbg !1543
  %252 = load %struct.BMFace*, %struct.BMFace** %fprev308, align 8, !dbg !1543
  store %struct.BMFace* %252, %struct.BMFace** %sw_ap302, align 8, !dbg !1543
  %253 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !1543
  %edges309 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %253, i32 0, i32 7, !dbg !1543
  %254 = load %struct.EdgeHalf*, %struct.EdgeHalf** %edges309, align 8, !dbg !1543
  %255 = load i32, i32* %ntot, align 4, !dbg !1543
  %256 = load i32, i32* %i, align 4, !dbg !1543
  %sub310 = sub nsw i32 %255, %256, !dbg !1543
  %sub311 = sub nsw i32 %sub310, 1, !dbg !1543
  %idxprom312 = sext i32 %sub311 to i64, !dbg !1543
  %arrayidx313 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %254, i64 %idxprom312, !dbg !1543
  %fnext314 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %arrayidx313, i32 0, i32 4, !dbg !1543
  %257 = load %struct.BMFace*, %struct.BMFace** %fnext314, align 8, !dbg !1543
  %258 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !1543
  %edges315 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %258, i32 0, i32 7, !dbg !1543
  %259 = load %struct.EdgeHalf*, %struct.EdgeHalf** %edges315, align 8, !dbg !1543
  %260 = load i32, i32* %ntot, align 4, !dbg !1543
  %261 = load i32, i32* %i, align 4, !dbg !1543
  %sub316 = sub nsw i32 %260, %261, !dbg !1543
  %sub317 = sub nsw i32 %sub316, 1, !dbg !1543
  %idxprom318 = sext i32 %sub317 to i64, !dbg !1543
  %arrayidx319 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %259, i64 %idxprom318, !dbg !1543
  %fprev320 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %arrayidx319, i32 0, i32 3, !dbg !1543
  store %struct.BMFace* %257, %struct.BMFace** %fprev320, align 8, !dbg !1543
  %262 = load %struct.BMFace*, %struct.BMFace** %sw_ap302, align 8, !dbg !1543
  %263 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !1543
  %edges321 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %263, i32 0, i32 7, !dbg !1543
  %264 = load %struct.EdgeHalf*, %struct.EdgeHalf** %edges321, align 8, !dbg !1543
  %265 = load i32, i32* %ntot, align 4, !dbg !1543
  %266 = load i32, i32* %i, align 4, !dbg !1543
  %sub322 = sub nsw i32 %265, %266, !dbg !1543
  %sub323 = sub nsw i32 %sub322, 1, !dbg !1543
  %idxprom324 = sext i32 %sub323 to i64, !dbg !1543
  %arrayidx325 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %264, i64 %idxprom324, !dbg !1543
  %fnext326 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %arrayidx325, i32 0, i32 4, !dbg !1543
  store %struct.BMFace* %262, %struct.BMFace** %fnext326, align 8, !dbg !1543
  br label %for.inc327, !dbg !1544

for.inc327:                                       ; preds = %for.body268
  %267 = load i32, i32* %i, align 4, !dbg !1545
  %inc328 = add nsw i32 %267, 1, !dbg !1545
  store i32 %inc328, i32* %i, align 4, !dbg !1545
  br label %for.cond264, !dbg !1546, !llvm.loop !1547

for.end329:                                       ; preds = %for.cond264
  %268 = load i32, i32* %ntot, align 4, !dbg !1549
  %rem330 = srem i32 %268, 2, !dbg !1551
  %cmp331 = icmp eq i32 %rem330, 1, !dbg !1552
  br i1 %cmp331, label %if.then333, label %if.end352, !dbg !1553

if.then333:                                       ; preds = %for.end329
  %269 = load i32, i32* %ntot, align 4, !dbg !1554
  %div334 = sdiv i32 %269, 2, !dbg !1556
  store i32 %div334, i32* %i, align 4, !dbg !1557
  call void @llvm.dbg.declare(metadata %struct.BMFace** %sw_ap335, metadata !1558, metadata !DIExpression()), !dbg !1560
  %270 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !1560
  %edges336 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %270, i32 0, i32 7, !dbg !1560
  %271 = load %struct.EdgeHalf*, %struct.EdgeHalf** %edges336, align 8, !dbg !1560
  %272 = load i32, i32* %i, align 4, !dbg !1560
  %idxprom337 = sext i32 %272 to i64, !dbg !1560
  %arrayidx338 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %271, i64 %idxprom337, !dbg !1560
  %fprev339 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %arrayidx338, i32 0, i32 3, !dbg !1560
  %273 = load %struct.BMFace*, %struct.BMFace** %fprev339, align 8, !dbg !1560
  store %struct.BMFace* %273, %struct.BMFace** %sw_ap335, align 8, !dbg !1560
  %274 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !1560
  %edges340 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %274, i32 0, i32 7, !dbg !1560
  %275 = load %struct.EdgeHalf*, %struct.EdgeHalf** %edges340, align 8, !dbg !1560
  %276 = load i32, i32* %i, align 4, !dbg !1560
  %idxprom341 = sext i32 %276 to i64, !dbg !1560
  %arrayidx342 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %275, i64 %idxprom341, !dbg !1560
  %fnext343 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %arrayidx342, i32 0, i32 4, !dbg !1560
  %277 = load %struct.BMFace*, %struct.BMFace** %fnext343, align 8, !dbg !1560
  %278 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !1560
  %edges344 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %278, i32 0, i32 7, !dbg !1560
  %279 = load %struct.EdgeHalf*, %struct.EdgeHalf** %edges344, align 8, !dbg !1560
  %280 = load i32, i32* %i, align 4, !dbg !1560
  %idxprom345 = sext i32 %280 to i64, !dbg !1560
  %arrayidx346 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %279, i64 %idxprom345, !dbg !1560
  %fprev347 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %arrayidx346, i32 0, i32 3, !dbg !1560
  store %struct.BMFace* %277, %struct.BMFace** %fprev347, align 8, !dbg !1560
  %281 = load %struct.BMFace*, %struct.BMFace** %sw_ap335, align 8, !dbg !1560
  %282 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !1560
  %edges348 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %282, i32 0, i32 7, !dbg !1560
  %283 = load %struct.EdgeHalf*, %struct.EdgeHalf** %edges348, align 8, !dbg !1560
  %284 = load i32, i32* %i, align 4, !dbg !1560
  %idxprom349 = sext i32 %284 to i64, !dbg !1560
  %arrayidx350 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %283, i64 %idxprom349, !dbg !1560
  %fnext351 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %arrayidx350, i32 0, i32 4, !dbg !1560
  store %struct.BMFace* %281, %struct.BMFace** %fnext351, align 8, !dbg !1560
  br label %if.end352, !dbg !1561

if.end352:                                        ; preds = %if.then333, %for.end329
  br label %if.end353, !dbg !1562

if.end353:                                        ; preds = %if.end352, %for.end260
  br label %if.end354, !dbg !1563

if.end354:                                        ; preds = %if.end353, %for.end236
  store i32 0, i32* %i, align 4, !dbg !1564
  %285 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !1566
  %edges355 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %285, i32 0, i32 7, !dbg !1567
  %286 = load %struct.EdgeHalf*, %struct.EdgeHalf** %edges355, align 8, !dbg !1567
  store %struct.EdgeHalf* %286, %struct.EdgeHalf** %e, align 8, !dbg !1568
  br label %for.cond356, !dbg !1569

for.cond356:                                      ; preds = %for.inc486, %if.end354
  %287 = load i32, i32* %i, align 4, !dbg !1570
  %288 = load i32, i32* %ntot, align 4, !dbg !1572
  %cmp357 = icmp slt i32 %287, %288, !dbg !1573
  br i1 %cmp357, label %for.body359, label %for.end488, !dbg !1574

for.body359:                                      ; preds = %for.cond356
  %289 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !1575
  %edges360 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %289, i32 0, i32 7, !dbg !1577
  %290 = load %struct.EdgeHalf*, %struct.EdgeHalf** %edges360, align 8, !dbg !1577
  %291 = load i32, i32* %i, align 4, !dbg !1578
  %add361 = add nsw i32 %291, 1, !dbg !1579
  %292 = load i32, i32* %ntot, align 4, !dbg !1580
  %rem362 = srem i32 %add361, %292, !dbg !1581
  %idxprom363 = sext i32 %rem362 to i64, !dbg !1575
  %arrayidx364 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %290, i64 %idxprom363, !dbg !1575
  %293 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1582
  %next = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %293, i32 0, i32 0, !dbg !1583
  store %struct.EdgeHalf* %arrayidx364, %struct.EdgeHalf** %next, align 8, !dbg !1584
  %294 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !1585
  %edges365 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %294, i32 0, i32 7, !dbg !1586
  %295 = load %struct.EdgeHalf*, %struct.EdgeHalf** %edges365, align 8, !dbg !1586
  %296 = load i32, i32* %i, align 4, !dbg !1587
  %297 = load i32, i32* %ntot, align 4, !dbg !1588
  %add366 = add nsw i32 %296, %297, !dbg !1589
  %sub367 = sub nsw i32 %add366, 1, !dbg !1590
  %298 = load i32, i32* %ntot, align 4, !dbg !1591
  %rem368 = srem i32 %sub367, %298, !dbg !1592
  %idxprom369 = sext i32 %rem368 to i64, !dbg !1585
  %arrayidx370 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %295, i64 %idxprom369, !dbg !1585
  %299 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1593
  %prev = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %299, i32 0, i32 1, !dbg !1594
  store %struct.EdgeHalf* %arrayidx370, %struct.EdgeHalf** %prev, align 8, !dbg !1595
  %300 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1596
  %is_bev371 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %300, i32 0, i32 12, !dbg !1598
  %301 = load i8, i8* %is_bev371, align 4, !dbg !1598
  %tobool372 = icmp ne i8 %301, 0, !dbg !1596
  br i1 %tobool372, label %if.then373, label %if.else465, !dbg !1599

if.then373:                                       ; preds = %for.body359
  %302 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !1600
  %offset_type = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %302, i32 0, i32 4, !dbg !1602
  %303 = load i32, i32* %offset_type, align 4, !dbg !1602
  switch i32 %303, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb375
    i32 2, label %sw.bb391
    i32 3, label %sw.bb406
  ], !dbg !1603

sw.bb:                                            ; preds = %if.then373
  %304 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !1604
  %offset374 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %304, i32 0, i32 3, !dbg !1606
  %305 = load float, float* %offset374, align 8, !dbg !1606
  %306 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1607
  %offset_l_spec = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %306, i32 0, i32 10, !dbg !1608
  store float %305, float* %offset_l_spec, align 4, !dbg !1609
  br label %sw.epilog, !dbg !1610

sw.bb375:                                         ; preds = %if.then373
  %307 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1611
  %call376 = call float @edge_face_angle(%struct.EdgeHalf* %307), !dbg !1612
  %div377 = fdiv float %call376, 2.000000e+00, !dbg !1613
  %call378 = call float @sinf(float %div377) #5, !dbg !1614
  %mul379 = fmul float 2.000000e+00, %call378, !dbg !1615
  %308 = call float @llvm.fabs.f32(float %mul379), !dbg !1616
  store float %308, float* %z, align 4, !dbg !1617
  %309 = load float, float* %z, align 4, !dbg !1618
  %cmp380 = fcmp olt float %309, 0x3EB0C6F7A0000000, !dbg !1620
  br i1 %cmp380, label %if.then382, label %if.else386, !dbg !1621

if.then382:                                       ; preds = %sw.bb375
  %310 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !1622
  %offset383 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %310, i32 0, i32 3, !dbg !1623
  %311 = load float, float* %offset383, align 8, !dbg !1623
  %mul384 = fmul float 0x3F847AE140000000, %311, !dbg !1624
  %312 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1625
  %offset_l_spec385 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %312, i32 0, i32 10, !dbg !1626
  store float %mul384, float* %offset_l_spec385, align 4, !dbg !1627
  br label %if.end390, !dbg !1625

if.else386:                                       ; preds = %sw.bb375
  %313 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !1628
  %offset387 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %313, i32 0, i32 3, !dbg !1629
  %314 = load float, float* %offset387, align 8, !dbg !1629
  %315 = load float, float* %z, align 4, !dbg !1630
  %div388 = fdiv float %314, %315, !dbg !1631
  %316 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1632
  %offset_l_spec389 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %316, i32 0, i32 10, !dbg !1633
  store float %div388, float* %offset_l_spec389, align 4, !dbg !1634
  br label %if.end390

if.end390:                                        ; preds = %if.else386, %if.then382
  br label %sw.epilog, !dbg !1635

sw.bb391:                                         ; preds = %if.then373
  %317 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1636
  %call392 = call float @edge_face_angle(%struct.EdgeHalf* %317), !dbg !1637
  %div393 = fdiv float %call392, 2.000000e+00, !dbg !1638
  %call394 = call float @cosf(float %div393) #5, !dbg !1639
  %318 = call float @llvm.fabs.f32(float %call394), !dbg !1640
  store float %318, float* %z, align 4, !dbg !1641
  %319 = load float, float* %z, align 4, !dbg !1642
  %cmp395 = fcmp olt float %319, 0x3EB0C6F7A0000000, !dbg !1644
  br i1 %cmp395, label %if.then397, label %if.else401, !dbg !1645

if.then397:                                       ; preds = %sw.bb391
  %320 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !1646
  %offset398 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %320, i32 0, i32 3, !dbg !1647
  %321 = load float, float* %offset398, align 8, !dbg !1647
  %mul399 = fmul float 0x3F847AE140000000, %321, !dbg !1648
  %322 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1649
  %offset_l_spec400 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %322, i32 0, i32 10, !dbg !1650
  store float %mul399, float* %offset_l_spec400, align 4, !dbg !1651
  br label %if.end405, !dbg !1649

if.else401:                                       ; preds = %sw.bb391
  %323 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !1652
  %offset402 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %323, i32 0, i32 3, !dbg !1653
  %324 = load float, float* %offset402, align 8, !dbg !1653
  %325 = load float, float* %z, align 4, !dbg !1654
  %div403 = fdiv float %324, %325, !dbg !1655
  %326 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1656
  %offset_l_spec404 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %326, i32 0, i32 10, !dbg !1657
  store float %div403, float* %offset_l_spec404, align 4, !dbg !1658
  br label %if.end405

if.end405:                                        ; preds = %if.else401, %if.then397
  br label %sw.epilog, !dbg !1659

sw.bb406:                                         ; preds = %if.then373
  %327 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1660
  %prev407 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %327, i32 0, i32 1, !dbg !1661
  %328 = load %struct.EdgeHalf*, %struct.EdgeHalf** %prev407, align 8, !dbg !1661
  %e408 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %328, i32 0, i32 2, !dbg !1662
  %329 = load %struct.BMEdge*, %struct.BMEdge** %e408, align 8, !dbg !1662
  %330 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !1663
  %call409 = call %struct.BMVert* @BM_edge_other_vert(%struct.BMEdge* %329, %struct.BMVert* %330), !dbg !1664
  store %struct.BMVert* %call409, %struct.BMVert** %v1, align 8, !dbg !1665
  %331 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1666
  %e410 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %331, i32 0, i32 2, !dbg !1667
  %332 = load %struct.BMEdge*, %struct.BMEdge** %e410, align 8, !dbg !1667
  %333 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !1668
  %call411 = call %struct.BMVert* @BM_edge_other_vert(%struct.BMEdge* %332, %struct.BMVert* %333), !dbg !1669
  store %struct.BMVert* %call411, %struct.BMVert** %v2, align 8, !dbg !1670
  %334 = load %struct.BMVert*, %struct.BMVert** %v1, align 8, !dbg !1671
  %co = getelementptr inbounds %struct.BMVert, %struct.BMVert* %334, i32 0, i32 2, !dbg !1672
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !1671
  %335 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !1673
  %co412 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %335, i32 0, i32 2, !dbg !1674
  %arraydecay413 = getelementptr inbounds [3 x float], [3 x float]* %co412, i64 0, i64 0, !dbg !1673
  %336 = load %struct.BMVert*, %struct.BMVert** %v2, align 8, !dbg !1675
  %co414 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %336, i32 0, i32 2, !dbg !1676
  %arraydecay415 = getelementptr inbounds [3 x float], [3 x float]* %co414, i64 0, i64 0, !dbg !1675
  %call416 = call float @angle_v3v3v3(float* %arraydecay, float* %arraydecay413, float* %arraydecay415), !dbg !1677
  %call417 = call float @sinf(float %call416) #5, !dbg !1678
  store float %call417, float* %z, align 4, !dbg !1679
  %337 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1680
  %prev418 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %337, i32 0, i32 1, !dbg !1681
  %338 = load %struct.EdgeHalf*, %struct.EdgeHalf** %prev418, align 8, !dbg !1681
  %e419 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %338, i32 0, i32 2, !dbg !1682
  %339 = load %struct.BMEdge*, %struct.BMEdge** %e419, align 8, !dbg !1682
  %call420 = call float @BM_edge_calc_length(%struct.BMEdge* %339), !dbg !1683
  %340 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !1684
  %offset421 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %340, i32 0, i32 3, !dbg !1685
  %341 = load float, float* %offset421, align 8, !dbg !1685
  %mul422 = fmul float %call420, %341, !dbg !1686
  %342 = load float, float* %z, align 4, !dbg !1687
  %mul423 = fmul float %mul422, %342, !dbg !1688
  %div424 = fdiv float %mul423, 1.000000e+02, !dbg !1689
  %343 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1690
  %offset_l_spec425 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %343, i32 0, i32 10, !dbg !1691
  store float %div424, float* %offset_l_spec425, align 4, !dbg !1692
  %344 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1693
  %e426 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %344, i32 0, i32 2, !dbg !1694
  %345 = load %struct.BMEdge*, %struct.BMEdge** %e426, align 8, !dbg !1694
  %346 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !1695
  %call427 = call %struct.BMVert* @BM_edge_other_vert(%struct.BMEdge* %345, %struct.BMVert* %346), !dbg !1696
  store %struct.BMVert* %call427, %struct.BMVert** %v1, align 8, !dbg !1697
  %347 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1698
  %next428 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %347, i32 0, i32 0, !dbg !1699
  %348 = load %struct.EdgeHalf*, %struct.EdgeHalf** %next428, align 8, !dbg !1699
  %e429 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %348, i32 0, i32 2, !dbg !1700
  %349 = load %struct.BMEdge*, %struct.BMEdge** %e429, align 8, !dbg !1700
  %350 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !1701
  %call430 = call %struct.BMVert* @BM_edge_other_vert(%struct.BMEdge* %349, %struct.BMVert* %350), !dbg !1702
  store %struct.BMVert* %call430, %struct.BMVert** %v2, align 8, !dbg !1703
  %351 = load %struct.BMVert*, %struct.BMVert** %v1, align 8, !dbg !1704
  %co431 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %351, i32 0, i32 2, !dbg !1705
  %arraydecay432 = getelementptr inbounds [3 x float], [3 x float]* %co431, i64 0, i64 0, !dbg !1704
  %352 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !1706
  %co433 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %352, i32 0, i32 2, !dbg !1707
  %arraydecay434 = getelementptr inbounds [3 x float], [3 x float]* %co433, i64 0, i64 0, !dbg !1706
  %353 = load %struct.BMVert*, %struct.BMVert** %v2, align 8, !dbg !1708
  %co435 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %353, i32 0, i32 2, !dbg !1709
  %arraydecay436 = getelementptr inbounds [3 x float], [3 x float]* %co435, i64 0, i64 0, !dbg !1708
  %call437 = call float @angle_v3v3v3(float* %arraydecay432, float* %arraydecay434, float* %arraydecay436), !dbg !1710
  %call438 = call float @sinf(float %call437) #5, !dbg !1711
  store float %call438, float* %z, align 4, !dbg !1712
  %354 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1713
  %next439 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %354, i32 0, i32 0, !dbg !1714
  %355 = load %struct.EdgeHalf*, %struct.EdgeHalf** %next439, align 8, !dbg !1714
  %e440 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %355, i32 0, i32 2, !dbg !1715
  %356 = load %struct.BMEdge*, %struct.BMEdge** %e440, align 8, !dbg !1715
  %call441 = call float @BM_edge_calc_length(%struct.BMEdge* %356), !dbg !1716
  %357 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !1717
  %offset442 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %357, i32 0, i32 3, !dbg !1718
  %358 = load float, float* %offset442, align 8, !dbg !1718
  %mul443 = fmul float %call441, %358, !dbg !1719
  %359 = load float, float* %z, align 4, !dbg !1720
  %mul444 = fmul float %mul443, %359, !dbg !1721
  %div445 = fdiv float %mul444, 1.000000e+02, !dbg !1722
  %360 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1723
  %offset_r_spec = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %360, i32 0, i32 11, !dbg !1724
  store float %div445, float* %offset_r_spec, align 8, !dbg !1725
  br label %sw.epilog, !dbg !1726

sw.default:                                       ; preds = %if.then373
  %361 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !1727
  %offset446 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %361, i32 0, i32 3, !dbg !1728
  %362 = load float, float* %offset446, align 8, !dbg !1728
  %363 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1729
  %offset_l_spec447 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %363, i32 0, i32 10, !dbg !1730
  store float %362, float* %offset_l_spec447, align 4, !dbg !1731
  br label %sw.epilog, !dbg !1732

sw.epilog:                                        ; preds = %sw.default, %sw.bb406, %if.end405, %if.end390, %sw.bb
  %364 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !1733
  %offset_type448 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %364, i32 0, i32 4, !dbg !1735
  %365 = load i32, i32* %offset_type448, align 4, !dbg !1735
  %cmp449 = icmp ne i32 %365, 3, !dbg !1736
  br i1 %cmp449, label %if.then451, label %if.end454, !dbg !1737

if.then451:                                       ; preds = %sw.epilog
  %366 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1738
  %offset_l_spec452 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %366, i32 0, i32 10, !dbg !1739
  %367 = load float, float* %offset_l_spec452, align 4, !dbg !1739
  %368 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1740
  %offset_r_spec453 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %368, i32 0, i32 11, !dbg !1741
  store float %367, float* %offset_r_spec453, align 8, !dbg !1742
  br label %if.end454, !dbg !1740

if.end454:                                        ; preds = %if.then451, %sw.epilog
  %369 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !1743
  %use_weights455 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %369, i32 0, i32 8, !dbg !1745
  %370 = load i8, i8* %use_weights455, align 1, !dbg !1745
  %tobool456 = icmp ne i8 %370, 0, !dbg !1743
  br i1 %tobool456, label %if.then457, label %if.end464, !dbg !1746

if.then457:                                       ; preds = %if.end454
  %371 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !1747
  %edata = getelementptr inbounds %struct.BMesh, %struct.BMesh* %371, i32 0, i32 25, !dbg !1749
  %372 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1750
  %e458 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %372, i32 0, i32 2, !dbg !1751
  %373 = load %struct.BMEdge*, %struct.BMEdge** %e458, align 8, !dbg !1751
  %374 = bitcast %struct.BMEdge* %373 to i8*, !dbg !1750
  %call459 = call float @BM_elem_float_data_get(%struct.CustomData* %edata, i8* %374, i32 29), !dbg !1752
  store float %call459, float* %weight, align 4, !dbg !1753
  %375 = load float, float* %weight, align 4, !dbg !1754
  %376 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1755
  %offset_l_spec460 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %376, i32 0, i32 10, !dbg !1756
  %377 = load float, float* %offset_l_spec460, align 4, !dbg !1757
  %mul461 = fmul float %377, %375, !dbg !1757
  store float %mul461, float* %offset_l_spec460, align 4, !dbg !1757
  %378 = load float, float* %weight, align 4, !dbg !1758
  %379 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1759
  %offset_r_spec462 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %379, i32 0, i32 11, !dbg !1760
  %380 = load float, float* %offset_r_spec462, align 8, !dbg !1761
  %mul463 = fmul float %380, %378, !dbg !1761
  store float %mul463, float* %offset_r_spec462, align 8, !dbg !1761
  br label %if.end464, !dbg !1762

if.end464:                                        ; preds = %if.then457, %if.end454
  br label %if.end468, !dbg !1763

if.else465:                                       ; preds = %for.body359
  %381 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1764
  %offset_r_spec466 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %381, i32 0, i32 11, !dbg !1766
  store float 0.000000e+00, float* %offset_r_spec466, align 8, !dbg !1767
  %382 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1768
  %offset_l_spec467 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %382, i32 0, i32 10, !dbg !1769
  store float 0.000000e+00, float* %offset_l_spec467, align 4, !dbg !1770
  br label %if.end468

if.end468:                                        ; preds = %if.else465, %if.end464
  %383 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1771
  %offset_l_spec469 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %383, i32 0, i32 10, !dbg !1772
  %384 = load float, float* %offset_l_spec469, align 4, !dbg !1772
  %385 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1773
  %offset_l = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %385, i32 0, i32 8, !dbg !1774
  store float %384, float* %offset_l, align 4, !dbg !1775
  %386 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1776
  %offset_r_spec470 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %386, i32 0, i32 11, !dbg !1777
  %387 = load float, float* %offset_r_spec470, align 8, !dbg !1777
  %388 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1778
  %offset_r = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %388, i32 0, i32 9, !dbg !1779
  store float %387, float* %offset_r, align 8, !dbg !1780
  %389 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1781
  %fprev471 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %389, i32 0, i32 3, !dbg !1783
  %390 = load %struct.BMFace*, %struct.BMFace** %fprev471, align 8, !dbg !1783
  %tobool472 = icmp ne %struct.BMFace* %390, null, !dbg !1781
  br i1 %tobool472, label %land.lhs.true473, label %if.else483, !dbg !1784

land.lhs.true473:                                 ; preds = %if.end468
  %391 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1785
  %fnext474 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %391, i32 0, i32 4, !dbg !1786
  %392 = load %struct.BMFace*, %struct.BMFace** %fnext474, align 8, !dbg !1786
  %tobool475 = icmp ne %struct.BMFace* %392, null, !dbg !1785
  br i1 %tobool475, label %if.then476, label %if.else483, !dbg !1787

if.then476:                                       ; preds = %land.lhs.true473
  %393 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !1788
  %394 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1789
  %e477 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %394, i32 0, i32 2, !dbg !1790
  %395 = load %struct.BMEdge*, %struct.BMEdge** %e477, align 8, !dbg !1790
  %396 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1791
  %fprev478 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %396, i32 0, i32 3, !dbg !1792
  %397 = load %struct.BMFace*, %struct.BMFace** %fprev478, align 8, !dbg !1792
  %398 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1793
  %fnext479 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %398, i32 0, i32 4, !dbg !1794
  %399 = load %struct.BMFace*, %struct.BMFace** %fnext479, align 8, !dbg !1794
  %call480 = call zeroext i8 @contig_ldata_across_edge(%struct.BMesh* %393, %struct.BMEdge* %395, %struct.BMFace* %397, %struct.BMFace* %399), !dbg !1795
  %tobool481 = icmp ne i8 %call480, 0, !dbg !1796
  %lnot = xor i1 %tobool481, true, !dbg !1796
  %lnot.ext = zext i1 %lnot to i32, !dbg !1796
  %conv482 = trunc i32 %lnot.ext to i8, !dbg !1796
  %400 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1797
  %is_seam = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %400, i32 0, i32 14, !dbg !1798
  store i8 %conv482, i8* %is_seam, align 2, !dbg !1799
  br label %if.end485, !dbg !1797

if.else483:                                       ; preds = %land.lhs.true473, %if.end468
  %401 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1800
  %is_seam484 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %401, i32 0, i32 14, !dbg !1801
  store i8 1, i8* %is_seam484, align 2, !dbg !1802
  br label %if.end485

if.end485:                                        ; preds = %if.else483, %if.then476
  br label %for.inc486, !dbg !1803

for.inc486:                                       ; preds = %if.end485
  %402 = load i32, i32* %i, align 4, !dbg !1804
  %inc487 = add nsw i32 %402, 1, !dbg !1804
  store i32 %inc487, i32* %i, align 4, !dbg !1804
  %403 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1805
  %incdec.ptr = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %403, i32 1, !dbg !1805
  store %struct.EdgeHalf* %incdec.ptr, %struct.EdgeHalf** %e, align 8, !dbg !1805
  br label %for.cond356, !dbg !1806, !llvm.loop !1807

for.end488:                                       ; preds = %for.cond356
  %404 = load i32, i32* %nwire, align 4, !dbg !1809
  %tobool489 = icmp ne i32 %404, 0, !dbg !1809
  br i1 %tobool489, label %if.then490, label %if.end506, !dbg !1811

if.then490:                                       ; preds = %for.end488
  store i32 0, i32* %i, align 4, !dbg !1812
  %405 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !1814
  %406 = bitcast %struct.BMVert* %405 to i8*, !dbg !1814
  %call491 = call i8* @BM_iter_new(%struct.BMIter* %iter, %struct.BMesh* null, i8 zeroext 4, i8* %406), !dbg !1814
  %407 = bitcast i8* %call491 to %struct.BMEdge*, !dbg !1814
  store %struct.BMEdge* %407, %struct.BMEdge** %bme, align 8, !dbg !1814
  br label %for.cond492, !dbg !1814

for.cond492:                                      ; preds = %for.inc503, %if.then490
  %408 = load %struct.BMEdge*, %struct.BMEdge** %bme, align 8, !dbg !1816
  %tobool493 = icmp ne %struct.BMEdge* %408, null, !dbg !1814
  br i1 %tobool493, label %for.body494, label %for.end505, !dbg !1814

for.body494:                                      ; preds = %for.cond492
  %409 = load %struct.BMEdge*, %struct.BMEdge** %bme, align 8, !dbg !1818
  %call495 = call zeroext i8 @BM_edge_is_wire(%struct.BMEdge* %409), !dbg !1821
  %tobool496 = icmp ne i8 %call495, 0, !dbg !1821
  br i1 %tobool496, label %if.then497, label %if.end502, !dbg !1822

if.then497:                                       ; preds = %for.body494
  %410 = load %struct.BMEdge*, %struct.BMEdge** %bme, align 8, !dbg !1823
  %411 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !1825
  %wire_edges498 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %411, i32 0, i32 8, !dbg !1826
  %412 = load %struct.BMEdge**, %struct.BMEdge*** %wire_edges498, align 8, !dbg !1826
  %413 = load i32, i32* %i, align 4, !dbg !1827
  %inc499 = add nsw i32 %413, 1, !dbg !1827
  store i32 %inc499, i32* %i, align 4, !dbg !1827
  %idxprom500 = sext i32 %413 to i64, !dbg !1825
  %arrayidx501 = getelementptr inbounds %struct.BMEdge*, %struct.BMEdge** %412, i64 %idxprom500, !dbg !1825
  store %struct.BMEdge* %410, %struct.BMEdge** %arrayidx501, align 8, !dbg !1828
  br label %if.end502, !dbg !1829

if.end502:                                        ; preds = %if.then497, %for.body494
  br label %for.inc503, !dbg !1830

for.inc503:                                       ; preds = %if.end502
  %call504 = call i8* @BM_iter_step(%struct.BMIter* %iter), !dbg !1816
  %414 = bitcast i8* %call504 to %struct.BMEdge*, !dbg !1816
  store %struct.BMEdge* %414, %struct.BMEdge** %bme, align 8, !dbg !1816
  br label %for.cond492, !dbg !1816, !llvm.loop !1831

for.end505:                                       ; preds = %for.cond492
  br label %if.end506, !dbg !1833

if.end506:                                        ; preds = %for.end505, %for.end488
  %415 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !1834
  store %struct.BevVert* %415, %struct.BevVert** %retval, align 8, !dbg !1835
  br label %return, !dbg !1835

return:                                           ; preds = %if.end506, %if.then89, %if.then52
  %416 = load %struct.BevVert*, %struct.BevVert** %retval, align 8, !dbg !1836
  ret %struct.BevVert* %416, !dbg !1836
}

; Function Attrs: noinline nounwind uwtable
define internal void @build_boundary(%struct.BevelParams* %bp, %struct.BevVert* %bv, i8 zeroext %construct) #0 !dbg !1837 {
entry:
  %bp.addr = alloca %struct.BevelParams*, align 8
  %bv.addr = alloca %struct.BevVert*, align 8
  %construct.addr = alloca i8, align 1
  %mem_arena = alloca %struct.MemArena*, align 8
  %efirst = alloca %struct.EdgeHalf*, align 8
  %e = alloca %struct.EdgeHalf*, align 8
  %eother = alloca %struct.EdgeHalf*, align 8
  %v = alloca %struct.BoundVert*, align 8
  %bvother = alloca %struct.BevVert*, align 8
  %vm = alloca %struct.VMesh*, align 8
  %co = alloca [3 x float], align 4
  %no = alloca float*, align 8
  %lastd = alloca float, align 4
  store %struct.BevelParams* %bp, %struct.BevelParams** %bp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BevelParams** %bp.addr, metadata !1840, metadata !DIExpression()), !dbg !1841
  store %struct.BevVert* %bv, %struct.BevVert** %bv.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BevVert** %bv.addr, metadata !1842, metadata !DIExpression()), !dbg !1843
  store i8 %construct, i8* %construct.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %construct.addr, metadata !1844, metadata !DIExpression()), !dbg !1845
  call void @llvm.dbg.declare(metadata %struct.MemArena** %mem_arena, metadata !1846, metadata !DIExpression()), !dbg !1847
  %0 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !1848
  %mem_arena1 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %0, i32 0, i32 1, !dbg !1849
  %1 = load %struct.MemArena*, %struct.MemArena** %mem_arena1, align 8, !dbg !1849
  store %struct.MemArena* %1, %struct.MemArena** %mem_arena, align 8, !dbg !1847
  call void @llvm.dbg.declare(metadata %struct.EdgeHalf** %efirst, metadata !1850, metadata !DIExpression()), !dbg !1851
  call void @llvm.dbg.declare(metadata %struct.EdgeHalf** %e, metadata !1852, metadata !DIExpression()), !dbg !1853
  call void @llvm.dbg.declare(metadata %struct.EdgeHalf** %eother, metadata !1854, metadata !DIExpression()), !dbg !1855
  call void @llvm.dbg.declare(metadata %struct.BoundVert** %v, metadata !1856, metadata !DIExpression()), !dbg !1857
  call void @llvm.dbg.declare(metadata %struct.BevVert** %bvother, metadata !1858, metadata !DIExpression()), !dbg !1859
  call void @llvm.dbg.declare(metadata %struct.VMesh** %vm, metadata !1860, metadata !DIExpression()), !dbg !1861
  call void @llvm.dbg.declare(metadata [3 x float]* %co, metadata !1862, metadata !DIExpression()), !dbg !1863
  call void @llvm.dbg.declare(metadata float** %no, metadata !1864, metadata !DIExpression()), !dbg !1866
  call void @llvm.dbg.declare(metadata float* %lastd, metadata !1867, metadata !DIExpression()), !dbg !1868
  %2 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !1869
  %vmesh = getelementptr inbounds %struct.BevVert, %struct.BevVert* %2, i32 0, i32 9, !dbg !1870
  %3 = load %struct.VMesh*, %struct.VMesh** %vmesh, align 8, !dbg !1870
  store %struct.VMesh* %3, %struct.VMesh** %vm, align 8, !dbg !1871
  %4 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !1872
  %vertex_only = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %4, i32 0, i32 7, !dbg !1874
  %5 = load i8, i8* %vertex_only, align 8, !dbg !1874
  %tobool = icmp ne i8 %5, 0, !dbg !1872
  br i1 %tobool, label %if.then, label %if.else, !dbg !1875

if.then:                                          ; preds = %entry
  %6 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !1876
  %edges = getelementptr inbounds %struct.BevVert, %struct.BevVert* %6, i32 0, i32 7, !dbg !1878
  %7 = load %struct.EdgeHalf*, %struct.EdgeHalf** %edges, align 8, !dbg !1878
  %arrayidx = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %7, i64 0, !dbg !1876
  store %struct.EdgeHalf* %arrayidx, %struct.EdgeHalf** %efirst, align 8, !dbg !1879
  store %struct.EdgeHalf* %arrayidx, %struct.EdgeHalf** %e, align 8, !dbg !1880
  br label %if.end15, !dbg !1881

if.else:                                          ; preds = %entry
  %8 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !1882
  %call = call %struct.EdgeHalf* @next_bev(%struct.BevVert* %8, %struct.EdgeHalf* null), !dbg !1884
  store %struct.EdgeHalf* %call, %struct.EdgeHalf** %efirst, align 8, !dbg !1885
  store %struct.EdgeHalf* %call, %struct.EdgeHalf** %e, align 8, !dbg !1886
  br label %do.body, !dbg !1887

do.body:                                          ; preds = %do.cond, %if.else
  %9 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !1888
  %10 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1890
  %call2 = call %struct.EdgeHalf* @find_other_end_edge_half(%struct.BevelParams* %9, %struct.EdgeHalf* %10, %struct.BevVert** %bvother), !dbg !1891
  store %struct.EdgeHalf* %call2, %struct.EdgeHalf** %eother, align 8, !dbg !1892
  %11 = load %struct.EdgeHalf*, %struct.EdgeHalf** %eother, align 8, !dbg !1893
  %tobool3 = icmp ne %struct.EdgeHalf* %11, null, !dbg !1893
  br i1 %tobool3, label %land.lhs.true, label %if.else10, !dbg !1895

land.lhs.true:                                    ; preds = %do.body
  %12 = load %struct.BevVert*, %struct.BevVert** %bvother, align 8, !dbg !1896
  %visited = getelementptr inbounds %struct.BevVert, %struct.BevVert* %12, i32 0, i32 6, !dbg !1897
  %13 = load i8, i8* %visited, align 1, !dbg !1897
  %conv = zext i8 %13 to i32, !dbg !1896
  %tobool4 = icmp ne i32 %conv, 0, !dbg !1896
  br i1 %tobool4, label %land.lhs.true5, label %if.else10, !dbg !1898

land.lhs.true5:                                   ; preds = %land.lhs.true
  %14 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !1899
  %offset_type = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %14, i32 0, i32 4, !dbg !1900
  %15 = load i32, i32* %offset_type, align 4, !dbg !1900
  %cmp = icmp ne i32 %15, 3, !dbg !1901
  br i1 %cmp, label %if.then7, label %if.else10, !dbg !1902

if.then7:                                         ; preds = %land.lhs.true5
  %16 = load %struct.EdgeHalf*, %struct.EdgeHalf** %eother, align 8, !dbg !1903
  %offset_r = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %16, i32 0, i32 9, !dbg !1905
  %17 = load float, float* %offset_r, align 8, !dbg !1905
  %18 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1906
  %offset_l = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %18, i32 0, i32 8, !dbg !1907
  store float %17, float* %offset_l, align 4, !dbg !1908
  %19 = load %struct.EdgeHalf*, %struct.EdgeHalf** %eother, align 8, !dbg !1909
  %offset_l8 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %19, i32 0, i32 8, !dbg !1910
  %20 = load float, float* %offset_l8, align 4, !dbg !1910
  %21 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1911
  %offset_r9 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %21, i32 0, i32 9, !dbg !1912
  store float %20, float* %offset_r9, align 8, !dbg !1913
  br label %if.end, !dbg !1914

if.else10:                                        ; preds = %land.lhs.true5, %land.lhs.true, %do.body
  %22 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1915
  %offset_l_spec = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %22, i32 0, i32 10, !dbg !1917
  %23 = load float, float* %offset_l_spec, align 4, !dbg !1917
  %24 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1918
  %offset_l11 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %24, i32 0, i32 8, !dbg !1919
  store float %23, float* %offset_l11, align 4, !dbg !1920
  %25 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1921
  %offset_r_spec = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %25, i32 0, i32 11, !dbg !1922
  %26 = load float, float* %offset_r_spec, align 8, !dbg !1922
  %27 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1923
  %offset_r12 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %27, i32 0, i32 9, !dbg !1924
  store float %26, float* %offset_r12, align 8, !dbg !1925
  br label %if.end

if.end:                                           ; preds = %if.else10, %if.then7
  br label %do.cond, !dbg !1926

do.cond:                                          ; preds = %if.end
  %28 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1927
  %next = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %28, i32 0, i32 0, !dbg !1928
  %29 = load %struct.EdgeHalf*, %struct.EdgeHalf** %next, align 8, !dbg !1928
  store %struct.EdgeHalf* %29, %struct.EdgeHalf** %e, align 8, !dbg !1929
  %30 = load %struct.EdgeHalf*, %struct.EdgeHalf** %efirst, align 8, !dbg !1930
  %cmp13 = icmp ne %struct.EdgeHalf* %29, %30, !dbg !1931
  br i1 %cmp13, label %do.body, label %do.end, !dbg !1926, !llvm.loop !1932

do.end:                                           ; preds = %do.cond
  %31 = load %struct.EdgeHalf*, %struct.EdgeHalf** %efirst, align 8, !dbg !1934
  store %struct.EdgeHalf* %31, %struct.EdgeHalf** %e, align 8, !dbg !1935
  br label %if.end15

if.end15:                                         ; preds = %do.end, %if.then
  %32 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !1936
  %edgecount = getelementptr inbounds %struct.BevVert, %struct.BevVert* %32, i32 0, i32 1, !dbg !1938
  %33 = load i32, i32* %edgecount, align 8, !dbg !1938
  %cmp16 = icmp eq i32 %33, 2, !dbg !1939
  br i1 %cmp16, label %land.lhs.true18, label %if.end93, !dbg !1940

land.lhs.true18:                                  ; preds = %if.end15
  %34 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !1941
  %selcount = getelementptr inbounds %struct.BevVert, %struct.BevVert* %34, i32 0, i32 2, !dbg !1942
  %35 = load i32, i32* %selcount, align 4, !dbg !1942
  %cmp19 = icmp eq i32 %35, 1, !dbg !1943
  br i1 %cmp19, label %if.then21, label %if.end93, !dbg !1944

if.then21:                                        ; preds = %land.lhs.true18
  %36 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1945
  %fprev = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %36, i32 0, i32 3, !dbg !1947
  %37 = load %struct.BMFace*, %struct.BMFace** %fprev, align 8, !dbg !1947
  %tobool22 = icmp ne %struct.BMFace* %37, null, !dbg !1945
  br i1 %tobool22, label %cond.true, label %cond.false, !dbg !1945

cond.true:                                        ; preds = %if.then21
  %38 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1948
  %fprev23 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %38, i32 0, i32 3, !dbg !1949
  %39 = load %struct.BMFace*, %struct.BMFace** %fprev23, align 8, !dbg !1949
  %no24 = getelementptr inbounds %struct.BMFace, %struct.BMFace* %39, i32 0, i32 4, !dbg !1950
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %no24, i64 0, i64 0, !dbg !1948
  br label %cond.end31, !dbg !1945

cond.false:                                       ; preds = %if.then21
  %40 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1951
  %fnext = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %40, i32 0, i32 4, !dbg !1952
  %41 = load %struct.BMFace*, %struct.BMFace** %fnext, align 8, !dbg !1952
  %tobool25 = icmp ne %struct.BMFace* %41, null, !dbg !1951
  br i1 %tobool25, label %cond.true26, label %cond.false30, !dbg !1951

cond.true26:                                      ; preds = %cond.false
  %42 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1953
  %fnext27 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %42, i32 0, i32 4, !dbg !1954
  %43 = load %struct.BMFace*, %struct.BMFace** %fnext27, align 8, !dbg !1954
  %no28 = getelementptr inbounds %struct.BMFace, %struct.BMFace* %43, i32 0, i32 4, !dbg !1955
  %arraydecay29 = getelementptr inbounds [3 x float], [3 x float]* %no28, i64 0, i64 0, !dbg !1953
  br label %cond.end, !dbg !1951

cond.false30:                                     ; preds = %cond.false
  br label %cond.end, !dbg !1951

cond.end:                                         ; preds = %cond.false30, %cond.true26
  %cond = phi float* [ %arraydecay29, %cond.true26 ], [ null, %cond.false30 ], !dbg !1951
  br label %cond.end31, !dbg !1945

cond.end31:                                       ; preds = %cond.end, %cond.true
  %cond32 = phi float* [ %arraydecay, %cond.true ], [ %cond, %cond.end ], !dbg !1945
  store float* %cond32, float** %no, align 8, !dbg !1956
  %44 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1957
  %45 = load float*, float** %no, align 8, !dbg !1958
  %arraydecay33 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !1959
  call void @offset_in_plane(%struct.EdgeHalf* %44, float* %45, i8 zeroext 1, float* %arraydecay33), !dbg !1960
  %46 = load i8, i8* %construct.addr, align 1, !dbg !1961
  %tobool34 = icmp ne i8 %46, 0, !dbg !1961
  br i1 %tobool34, label %if.then35, label %if.else39, !dbg !1963

if.then35:                                        ; preds = %cond.end31
  %47 = load %struct.MemArena*, %struct.MemArena** %mem_arena, align 8, !dbg !1964
  %48 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !1966
  %arraydecay36 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !1967
  %call37 = call %struct.BoundVert* @add_new_bound_vert(%struct.MemArena* %47, %struct.VMesh* %48, float* %arraydecay36), !dbg !1968
  store %struct.BoundVert* %call37, %struct.BoundVert** %v, align 8, !dbg !1969
  %49 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1970
  %50 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !1971
  %ebev = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %50, i32 0, i32 5, !dbg !1972
  store %struct.EdgeHalf* %49, %struct.EdgeHalf** %ebev, align 8, !dbg !1973
  %51 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !1974
  %elast = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %51, i32 0, i32 4, !dbg !1975
  store %struct.EdgeHalf* %49, %struct.EdgeHalf** %elast, align 8, !dbg !1976
  %52 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !1977
  %efirst38 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %52, i32 0, i32 3, !dbg !1978
  store %struct.EdgeHalf* %49, %struct.EdgeHalf** %efirst38, align 8, !dbg !1979
  %53 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !1980
  %54 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1981
  %leftv = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %54, i32 0, i32 5, !dbg !1982
  store %struct.BoundVert* %53, %struct.BoundVert** %leftv, align 8, !dbg !1983
  br label %if.end42, !dbg !1984

if.else39:                                        ; preds = %cond.end31
  %55 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1985
  %leftv40 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %55, i32 0, i32 5, !dbg !1987
  %56 = load %struct.BoundVert*, %struct.BoundVert** %leftv40, align 8, !dbg !1987
  %arraydecay41 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !1988
  call void @adjust_bound_vert(%struct.BoundVert* %56, float* %arraydecay41), !dbg !1989
  br label %if.end42

if.end42:                                         ; preds = %if.else39, %if.then35
  %57 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1990
  %fnext43 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %57, i32 0, i32 4, !dbg !1991
  %58 = load %struct.BMFace*, %struct.BMFace** %fnext43, align 8, !dbg !1991
  %tobool44 = icmp ne %struct.BMFace* %58, null, !dbg !1990
  br i1 %tobool44, label %cond.true45, label %cond.false49, !dbg !1990

cond.true45:                                      ; preds = %if.end42
  %59 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1992
  %fnext46 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %59, i32 0, i32 4, !dbg !1993
  %60 = load %struct.BMFace*, %struct.BMFace** %fnext46, align 8, !dbg !1993
  %no47 = getelementptr inbounds %struct.BMFace, %struct.BMFace* %60, i32 0, i32 4, !dbg !1994
  %arraydecay48 = getelementptr inbounds [3 x float], [3 x float]* %no47, i64 0, i64 0, !dbg !1992
  br label %cond.end59, !dbg !1990

cond.false49:                                     ; preds = %if.end42
  %61 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1995
  %fprev50 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %61, i32 0, i32 3, !dbg !1996
  %62 = load %struct.BMFace*, %struct.BMFace** %fprev50, align 8, !dbg !1996
  %tobool51 = icmp ne %struct.BMFace* %62, null, !dbg !1995
  br i1 %tobool51, label %cond.true52, label %cond.false56, !dbg !1995

cond.true52:                                      ; preds = %cond.false49
  %63 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !1997
  %fprev53 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %63, i32 0, i32 3, !dbg !1998
  %64 = load %struct.BMFace*, %struct.BMFace** %fprev53, align 8, !dbg !1998
  %no54 = getelementptr inbounds %struct.BMFace, %struct.BMFace* %64, i32 0, i32 4, !dbg !1999
  %arraydecay55 = getelementptr inbounds [3 x float], [3 x float]* %no54, i64 0, i64 0, !dbg !1997
  br label %cond.end57, !dbg !1995

cond.false56:                                     ; preds = %cond.false49
  br label %cond.end57, !dbg !1995

cond.end57:                                       ; preds = %cond.false56, %cond.true52
  %cond58 = phi float* [ %arraydecay55, %cond.true52 ], [ null, %cond.false56 ], !dbg !1995
  br label %cond.end59, !dbg !1990

cond.end59:                                       ; preds = %cond.end57, %cond.true45
  %cond60 = phi float* [ %arraydecay48, %cond.true45 ], [ %cond58, %cond.end57 ], !dbg !1990
  store float* %cond60, float** %no, align 8, !dbg !2000
  %65 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2001
  %66 = load float*, float** %no, align 8, !dbg !2002
  %arraydecay61 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !2003
  call void @offset_in_plane(%struct.EdgeHalf* %65, float* %66, i8 zeroext 0, float* %arraydecay61), !dbg !2004
  %67 = load i8, i8* %construct.addr, align 1, !dbg !2005
  %tobool62 = icmp ne i8 %67, 0, !dbg !2005
  br i1 %tobool62, label %if.then63, label %if.else68, !dbg !2007

if.then63:                                        ; preds = %cond.end59
  %68 = load %struct.MemArena*, %struct.MemArena** %mem_arena, align 8, !dbg !2008
  %69 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !2010
  %arraydecay64 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !2011
  %call65 = call %struct.BoundVert* @add_new_bound_vert(%struct.MemArena* %68, %struct.VMesh* %69, float* %arraydecay64), !dbg !2012
  store %struct.BoundVert* %call65, %struct.BoundVert** %v, align 8, !dbg !2013
  %70 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2014
  %71 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !2015
  %elast66 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %71, i32 0, i32 4, !dbg !2016
  store %struct.EdgeHalf* %70, %struct.EdgeHalf** %elast66, align 8, !dbg !2017
  %72 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !2018
  %efirst67 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %72, i32 0, i32 3, !dbg !2019
  store %struct.EdgeHalf* %70, %struct.EdgeHalf** %efirst67, align 8, !dbg !2020
  %73 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !2021
  %74 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2022
  %rightv = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %74, i32 0, i32 6, !dbg !2023
  store %struct.BoundVert* %73, %struct.BoundVert** %rightv, align 8, !dbg !2024
  br label %if.end71, !dbg !2025

if.else68:                                        ; preds = %cond.end59
  %75 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2026
  %rightv69 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %75, i32 0, i32 6, !dbg !2028
  %76 = load %struct.BoundVert*, %struct.BoundVert** %rightv69, align 8, !dbg !2028
  %arraydecay70 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !2029
  call void @adjust_bound_vert(%struct.BoundVert* %76, float* %arraydecay70), !dbg !2030
  br label %if.end71

if.end71:                                         ; preds = %if.else68, %if.then63
  %77 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2031
  %next72 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %77, i32 0, i32 0, !dbg !2032
  %78 = load %struct.EdgeHalf*, %struct.EdgeHalf** %next72, align 8, !dbg !2032
  %79 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !2033
  %v73 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %79, i32 0, i32 0, !dbg !2034
  %80 = load %struct.BMVert*, %struct.BMVert** %v73, align 8, !dbg !2034
  %81 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2035
  %offset_l74 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %81, i32 0, i32 8, !dbg !2036
  %82 = load float, float* %offset_l74, align 4, !dbg !2036
  %arraydecay75 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !2037
  call void @slide_dist(%struct.EdgeHalf* %78, %struct.BMVert* %80, float %82, float* %arraydecay75), !dbg !2038
  %83 = load i8, i8* %construct.addr, align 1, !dbg !2039
  %tobool76 = icmp ne i8 %83, 0, !dbg !2039
  br i1 %tobool76, label %if.then77, label %if.else87, !dbg !2041

if.then77:                                        ; preds = %if.end71
  %84 = load %struct.MemArena*, %struct.MemArena** %mem_arena, align 8, !dbg !2042
  %85 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !2044
  %arraydecay78 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !2045
  %call79 = call %struct.BoundVert* @add_new_bound_vert(%struct.MemArena* %84, %struct.VMesh* %85, float* %arraydecay78), !dbg !2046
  store %struct.BoundVert* %call79, %struct.BoundVert** %v, align 8, !dbg !2047
  %86 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2048
  %next80 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %86, i32 0, i32 0, !dbg !2049
  %87 = load %struct.EdgeHalf*, %struct.EdgeHalf** %next80, align 8, !dbg !2049
  %88 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !2050
  %elast81 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %88, i32 0, i32 4, !dbg !2051
  store %struct.EdgeHalf* %87, %struct.EdgeHalf** %elast81, align 8, !dbg !2052
  %89 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !2053
  %efirst82 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %89, i32 0, i32 3, !dbg !2054
  store %struct.EdgeHalf* %87, %struct.EdgeHalf** %efirst82, align 8, !dbg !2055
  %90 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !2056
  %91 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2057
  %next83 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %91, i32 0, i32 0, !dbg !2058
  %92 = load %struct.EdgeHalf*, %struct.EdgeHalf** %next83, align 8, !dbg !2058
  %rightv84 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %92, i32 0, i32 6, !dbg !2059
  store %struct.BoundVert* %90, %struct.BoundVert** %rightv84, align 8, !dbg !2060
  %93 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2061
  %next85 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %93, i32 0, i32 0, !dbg !2062
  %94 = load %struct.EdgeHalf*, %struct.EdgeHalf** %next85, align 8, !dbg !2062
  %leftv86 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %94, i32 0, i32 5, !dbg !2063
  store %struct.BoundVert* %90, %struct.BoundVert** %leftv86, align 8, !dbg !2064
  %95 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !2065
  %mesh_kind = getelementptr inbounds %struct.VMesh, %struct.VMesh* %95, i32 0, i32 4, !dbg !2066
  store i32 3, i32* %mesh_kind, align 8, !dbg !2067
  %96 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !2068
  call void @set_bound_vert_seams(%struct.BevVert* %96), !dbg !2069
  br label %if.end91, !dbg !2070

if.else87:                                        ; preds = %if.end71
  %97 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2071
  %next88 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %97, i32 0, i32 0, !dbg !2073
  %98 = load %struct.EdgeHalf*, %struct.EdgeHalf** %next88, align 8, !dbg !2073
  %leftv89 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %98, i32 0, i32 5, !dbg !2074
  %99 = load %struct.BoundVert*, %struct.BoundVert** %leftv89, align 8, !dbg !2074
  %arraydecay90 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !2075
  call void @adjust_bound_vert(%struct.BoundVert* %99, float* %arraydecay90), !dbg !2076
  br label %if.end91

if.end91:                                         ; preds = %if.else87, %if.then77
  %100 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !2077
  %101 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !2078
  %boundstart = getelementptr inbounds %struct.VMesh, %struct.VMesh* %101, i32 0, i32 1, !dbg !2079
  %102 = load %struct.BoundVert*, %struct.BoundVert** %boundstart, align 8, !dbg !2079
  call void @set_profile_params(%struct.BevelParams* %100, %struct.BoundVert* %102), !dbg !2080
  %103 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !2081
  %104 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !2082
  %boundstart92 = getelementptr inbounds %struct.VMesh, %struct.VMesh* %104, i32 0, i32 1, !dbg !2083
  %105 = load %struct.BoundVert*, %struct.BoundVert** %boundstart92, align 8, !dbg !2083
  call void @calculate_profile(%struct.BevelParams* %103, %struct.BoundVert* %105), !dbg !2084
  br label %if.end325, !dbg !2085

if.end93:                                         ; preds = %land.lhs.true18, %if.end15
  %106 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !2086
  %vertex_only94 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %106, i32 0, i32 7, !dbg !2087
  %107 = load i8, i8* %vertex_only94, align 8, !dbg !2087
  %conv95 = zext i8 %107 to i32, !dbg !2086
  %tobool96 = icmp ne i32 %conv95, 0, !dbg !2086
  br i1 %tobool96, label %cond.true97, label %cond.false98, !dbg !2086

cond.true97:                                      ; preds = %if.end93
  %108 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !2088
  %offset = getelementptr inbounds %struct.BevVert, %struct.BevVert* %108, i32 0, i32 4, !dbg !2089
  %109 = load float, float* %offset, align 4, !dbg !2089
  br label %cond.end100, !dbg !2086

cond.false98:                                     ; preds = %if.end93
  %110 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2090
  %offset_l99 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %110, i32 0, i32 8, !dbg !2091
  %111 = load float, float* %offset_l99, align 4, !dbg !2091
  br label %cond.end100, !dbg !2086

cond.end100:                                      ; preds = %cond.false98, %cond.true97
  %cond101 = phi float [ %109, %cond.true97 ], [ %111, %cond.false98 ], !dbg !2086
  store float %cond101, float* %lastd, align 4, !dbg !2092
  br label %do.body102, !dbg !2093

do.body102:                                       ; preds = %do.cond239, %cond.end100
  %112 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2094
  %is_bev = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %112, i32 0, i32 12, !dbg !2097
  %113 = load i8, i8* %is_bev, align 4, !dbg !2097
  %tobool103 = icmp ne i8 %113, 0, !dbg !2094
  br i1 %tobool103, label %if.then104, label %if.else194, !dbg !2098

if.then104:                                       ; preds = %do.body102
  %114 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2099
  %prev = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %114, i32 0, i32 1, !dbg !2102
  %115 = load %struct.EdgeHalf*, %struct.EdgeHalf** %prev, align 8, !dbg !2102
  %is_bev105 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %115, i32 0, i32 12, !dbg !2103
  %116 = load i8, i8* %is_bev105, align 4, !dbg !2103
  %tobool106 = icmp ne i8 %116, 0, !dbg !2099
  br i1 %tobool106, label %if.then107, label %if.else127, !dbg !2104

if.then107:                                       ; preds = %if.then104
  %117 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2105
  %prev108 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %117, i32 0, i32 1, !dbg !2107
  %118 = load %struct.EdgeHalf*, %struct.EdgeHalf** %prev108, align 8, !dbg !2107
  %119 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2108
  %120 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !2109
  %v109 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %120, i32 0, i32 0, !dbg !2110
  %121 = load %struct.BMVert*, %struct.BMVert** %v109, align 8, !dbg !2110
  %122 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2111
  %fprev110 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %122, i32 0, i32 3, !dbg !2112
  %123 = load %struct.BMFace*, %struct.BMFace** %fprev110, align 8, !dbg !2112
  %arraydecay111 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !2113
  call void @offset_meet(%struct.EdgeHalf* %118, %struct.EdgeHalf* %119, %struct.BMVert* %121, %struct.BMFace* %123, float* %arraydecay111), !dbg !2114
  %124 = load i8, i8* %construct.addr, align 1, !dbg !2115
  %tobool112 = icmp ne i8 %124, 0, !dbg !2115
  br i1 %tobool112, label %if.then113, label %if.else123, !dbg !2117

if.then113:                                       ; preds = %if.then107
  %125 = load %struct.MemArena*, %struct.MemArena** %mem_arena, align 8, !dbg !2118
  %126 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !2120
  %arraydecay114 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !2121
  %call115 = call %struct.BoundVert* @add_new_bound_vert(%struct.MemArena* %125, %struct.VMesh* %126, float* %arraydecay114), !dbg !2122
  store %struct.BoundVert* %call115, %struct.BoundVert** %v, align 8, !dbg !2123
  %127 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2124
  %prev116 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %127, i32 0, i32 1, !dbg !2125
  %128 = load %struct.EdgeHalf*, %struct.EdgeHalf** %prev116, align 8, !dbg !2125
  %129 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !2126
  %efirst117 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %129, i32 0, i32 3, !dbg !2127
  store %struct.EdgeHalf* %128, %struct.EdgeHalf** %efirst117, align 8, !dbg !2128
  %130 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2129
  %131 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !2130
  %ebev118 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %131, i32 0, i32 5, !dbg !2131
  store %struct.EdgeHalf* %130, %struct.EdgeHalf** %ebev118, align 8, !dbg !2132
  %132 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !2133
  %elast119 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %132, i32 0, i32 4, !dbg !2134
  store %struct.EdgeHalf* %130, %struct.EdgeHalf** %elast119, align 8, !dbg !2135
  %133 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !2136
  %134 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2137
  %leftv120 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %134, i32 0, i32 5, !dbg !2138
  store %struct.BoundVert* %133, %struct.BoundVert** %leftv120, align 8, !dbg !2139
  %135 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !2140
  %136 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2141
  %prev121 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %136, i32 0, i32 1, !dbg !2142
  %137 = load %struct.EdgeHalf*, %struct.EdgeHalf** %prev121, align 8, !dbg !2142
  %rightv122 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %137, i32 0, i32 6, !dbg !2143
  store %struct.BoundVert* %135, %struct.BoundVert** %rightv122, align 8, !dbg !2144
  br label %if.end126, !dbg !2145

if.else123:                                       ; preds = %if.then107
  %138 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2146
  %leftv124 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %138, i32 0, i32 5, !dbg !2148
  %139 = load %struct.BoundVert*, %struct.BoundVert** %leftv124, align 8, !dbg !2148
  store %struct.BoundVert* %139, %struct.BoundVert** %v, align 8, !dbg !2149
  %140 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !2150
  %arraydecay125 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !2151
  call void @adjust_bound_vert(%struct.BoundVert* %140, float* %arraydecay125), !dbg !2152
  br label %if.end126

if.end126:                                        ; preds = %if.else123, %if.then113
  br label %if.end187, !dbg !2153

if.else127:                                       ; preds = %if.then104
  %141 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2154
  %prev128 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %141, i32 0, i32 1, !dbg !2157
  %142 = load %struct.EdgeHalf*, %struct.EdgeHalf** %prev128, align 8, !dbg !2157
  %prev129 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %142, i32 0, i32 1, !dbg !2158
  %143 = load %struct.EdgeHalf*, %struct.EdgeHalf** %prev129, align 8, !dbg !2158
  %is_bev130 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %143, i32 0, i32 12, !dbg !2159
  %144 = load i8, i8* %is_bev130, align 4, !dbg !2159
  %tobool131 = icmp ne i8 %144, 0, !dbg !2154
  br i1 %tobool131, label %if.then132, label %if.else166, !dbg !2160

if.then132:                                       ; preds = %if.else127
  %145 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !2161
  %preserve_widths = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %145, i32 0, i32 9, !dbg !2164
  %146 = load i8, i8* %preserve_widths, align 2, !dbg !2164
  %tobool133 = icmp ne i8 %146, 0, !dbg !2161
  br i1 %tobool133, label %if.then134, label %if.else140, !dbg !2165

if.then134:                                       ; preds = %if.then132
  %147 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !2166
  %148 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2167
  %prev135 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %148, i32 0, i32 1, !dbg !2168
  %149 = load %struct.EdgeHalf*, %struct.EdgeHalf** %prev135, align 8, !dbg !2168
  %prev136 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %149, i32 0, i32 1, !dbg !2169
  %150 = load %struct.EdgeHalf*, %struct.EdgeHalf** %prev136, align 8, !dbg !2169
  %151 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2170
  %152 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2171
  %prev137 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %152, i32 0, i32 1, !dbg !2172
  %153 = load %struct.EdgeHalf*, %struct.EdgeHalf** %prev137, align 8, !dbg !2172
  %154 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !2173
  %v138 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %154, i32 0, i32 0, !dbg !2174
  %155 = load %struct.BMVert*, %struct.BMVert** %v138, align 8, !dbg !2174
  %arraydecay139 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !2175
  call void @offset_in_two_planes(%struct.BevelParams* %147, %struct.EdgeHalf* %150, %struct.EdgeHalf* %151, %struct.EdgeHalf* %153, %struct.BMVert* %155, float* %arraydecay139), !dbg !2176
  br label %if.end146, !dbg !2176

if.else140:                                       ; preds = %if.then132
  %156 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !2177
  %157 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2178
  %prev141 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %157, i32 0, i32 1, !dbg !2179
  %158 = load %struct.EdgeHalf*, %struct.EdgeHalf** %prev141, align 8, !dbg !2179
  %prev142 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %158, i32 0, i32 1, !dbg !2180
  %159 = load %struct.EdgeHalf*, %struct.EdgeHalf** %prev142, align 8, !dbg !2180
  %160 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2181
  %161 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2182
  %prev143 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %161, i32 0, i32 1, !dbg !2183
  %162 = load %struct.EdgeHalf*, %struct.EdgeHalf** %prev143, align 8, !dbg !2183
  %163 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !2184
  %v144 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %163, i32 0, i32 0, !dbg !2185
  %164 = load %struct.BMVert*, %struct.BMVert** %v144, align 8, !dbg !2185
  %arraydecay145 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !2186
  call void @offset_on_edge_between(%struct.BevelParams* %156, %struct.EdgeHalf* %159, %struct.EdgeHalf* %160, %struct.EdgeHalf* %162, %struct.BMVert* %164, float* %arraydecay145), !dbg !2187
  br label %if.end146

if.end146:                                        ; preds = %if.else140, %if.then134
  %165 = load i8, i8* %construct.addr, align 1, !dbg !2188
  %tobool147 = icmp ne i8 %165, 0, !dbg !2188
  br i1 %tobool147, label %if.then148, label %if.else162, !dbg !2190

if.then148:                                       ; preds = %if.end146
  %166 = load %struct.MemArena*, %struct.MemArena** %mem_arena, align 8, !dbg !2191
  %167 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !2193
  %arraydecay149 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !2194
  %call150 = call %struct.BoundVert* @add_new_bound_vert(%struct.MemArena* %166, %struct.VMesh* %167, float* %arraydecay149), !dbg !2195
  store %struct.BoundVert* %call150, %struct.BoundVert** %v, align 8, !dbg !2196
  %168 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2197
  %prev151 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %168, i32 0, i32 1, !dbg !2198
  %169 = load %struct.EdgeHalf*, %struct.EdgeHalf** %prev151, align 8, !dbg !2198
  %prev152 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %169, i32 0, i32 1, !dbg !2199
  %170 = load %struct.EdgeHalf*, %struct.EdgeHalf** %prev152, align 8, !dbg !2199
  %171 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !2200
  %efirst153 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %171, i32 0, i32 3, !dbg !2201
  store %struct.EdgeHalf* %170, %struct.EdgeHalf** %efirst153, align 8, !dbg !2202
  %172 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2203
  %173 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !2204
  %ebev154 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %173, i32 0, i32 5, !dbg !2205
  store %struct.EdgeHalf* %172, %struct.EdgeHalf** %ebev154, align 8, !dbg !2206
  %174 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !2207
  %elast155 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %174, i32 0, i32 4, !dbg !2208
  store %struct.EdgeHalf* %172, %struct.EdgeHalf** %elast155, align 8, !dbg !2209
  %175 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !2210
  %176 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2211
  %leftv156 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %176, i32 0, i32 5, !dbg !2212
  store %struct.BoundVert* %175, %struct.BoundVert** %leftv156, align 8, !dbg !2213
  %177 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !2214
  %178 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2215
  %prev157 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %178, i32 0, i32 1, !dbg !2216
  %179 = load %struct.EdgeHalf*, %struct.EdgeHalf** %prev157, align 8, !dbg !2216
  %leftv158 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %179, i32 0, i32 5, !dbg !2217
  store %struct.BoundVert* %177, %struct.BoundVert** %leftv158, align 8, !dbg !2218
  %180 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !2219
  %181 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2220
  %prev159 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %181, i32 0, i32 1, !dbg !2221
  %182 = load %struct.EdgeHalf*, %struct.EdgeHalf** %prev159, align 8, !dbg !2221
  %prev160 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %182, i32 0, i32 1, !dbg !2222
  %183 = load %struct.EdgeHalf*, %struct.EdgeHalf** %prev160, align 8, !dbg !2222
  %rightv161 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %183, i32 0, i32 6, !dbg !2223
  store %struct.BoundVert* %180, %struct.BoundVert** %rightv161, align 8, !dbg !2224
  br label %if.end165, !dbg !2225

if.else162:                                       ; preds = %if.end146
  %184 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2226
  %leftv163 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %184, i32 0, i32 5, !dbg !2228
  %185 = load %struct.BoundVert*, %struct.BoundVert** %leftv163, align 8, !dbg !2228
  store %struct.BoundVert* %185, %struct.BoundVert** %v, align 8, !dbg !2229
  %186 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !2230
  %arraydecay164 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !2231
  call void @adjust_bound_vert(%struct.BoundVert* %186, float* %arraydecay164), !dbg !2232
  br label %if.end165

if.end165:                                        ; preds = %if.else162, %if.then148
  br label %if.end186, !dbg !2233

if.else166:                                       ; preds = %if.else127
  %187 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2234
  %prev167 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %187, i32 0, i32 1, !dbg !2236
  %188 = load %struct.EdgeHalf*, %struct.EdgeHalf** %prev167, align 8, !dbg !2236
  %189 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2237
  %190 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !2238
  %v168 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %190, i32 0, i32 0, !dbg !2239
  %191 = load %struct.BMVert*, %struct.BMVert** %v168, align 8, !dbg !2239
  %192 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2240
  %fprev169 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %192, i32 0, i32 3, !dbg !2241
  %193 = load %struct.BMFace*, %struct.BMFace** %fprev169, align 8, !dbg !2241
  %arraydecay170 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !2242
  call void @offset_meet(%struct.EdgeHalf* %188, %struct.EdgeHalf* %189, %struct.BMVert* %191, %struct.BMFace* %193, float* %arraydecay170), !dbg !2243
  %194 = load i8, i8* %construct.addr, align 1, !dbg !2244
  %tobool171 = icmp ne i8 %194, 0, !dbg !2244
  br i1 %tobool171, label %if.then172, label %if.else182, !dbg !2246

if.then172:                                       ; preds = %if.else166
  %195 = load %struct.MemArena*, %struct.MemArena** %mem_arena, align 8, !dbg !2247
  %196 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !2249
  %arraydecay173 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !2250
  %call174 = call %struct.BoundVert* @add_new_bound_vert(%struct.MemArena* %195, %struct.VMesh* %196, float* %arraydecay173), !dbg !2251
  store %struct.BoundVert* %call174, %struct.BoundVert** %v, align 8, !dbg !2252
  %197 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2253
  %prev175 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %197, i32 0, i32 1, !dbg !2254
  %198 = load %struct.EdgeHalf*, %struct.EdgeHalf** %prev175, align 8, !dbg !2254
  %199 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !2255
  %efirst176 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %199, i32 0, i32 3, !dbg !2256
  store %struct.EdgeHalf* %198, %struct.EdgeHalf** %efirst176, align 8, !dbg !2257
  %200 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2258
  %201 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !2259
  %ebev177 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %201, i32 0, i32 5, !dbg !2260
  store %struct.EdgeHalf* %200, %struct.EdgeHalf** %ebev177, align 8, !dbg !2261
  %202 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !2262
  %elast178 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %202, i32 0, i32 4, !dbg !2263
  store %struct.EdgeHalf* %200, %struct.EdgeHalf** %elast178, align 8, !dbg !2264
  %203 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !2265
  %204 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2266
  %leftv179 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %204, i32 0, i32 5, !dbg !2267
  store %struct.BoundVert* %203, %struct.BoundVert** %leftv179, align 8, !dbg !2268
  %205 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !2269
  %206 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2270
  %prev180 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %206, i32 0, i32 1, !dbg !2271
  %207 = load %struct.EdgeHalf*, %struct.EdgeHalf** %prev180, align 8, !dbg !2271
  %leftv181 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %207, i32 0, i32 5, !dbg !2272
  store %struct.BoundVert* %205, %struct.BoundVert** %leftv181, align 8, !dbg !2273
  br label %if.end185, !dbg !2274

if.else182:                                       ; preds = %if.else166
  %208 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2275
  %leftv183 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %208, i32 0, i32 5, !dbg !2277
  %209 = load %struct.BoundVert*, %struct.BoundVert** %leftv183, align 8, !dbg !2277
  store %struct.BoundVert* %209, %struct.BoundVert** %v, align 8, !dbg !2278
  %210 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !2279
  %arraydecay184 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !2280
  call void @adjust_bound_vert(%struct.BoundVert* %210, float* %arraydecay184), !dbg !2281
  br label %if.end185

if.end185:                                        ; preds = %if.else182, %if.then172
  br label %if.end186

if.end186:                                        ; preds = %if.end185, %if.end165
  br label %if.end187

if.end187:                                        ; preds = %if.end186, %if.end126
  %211 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !2282
  %v188 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %211, i32 0, i32 0, !dbg !2283
  %212 = load %struct.BMVert*, %struct.BMVert** %v188, align 8, !dbg !2283
  %co189 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %212, i32 0, i32 2, !dbg !2284
  %arraydecay190 = getelementptr inbounds [3 x float], [3 x float]* %co189, i64 0, i64 0, !dbg !2282
  %213 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !2285
  %nv = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %213, i32 0, i32 2, !dbg !2286
  %co191 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %nv, i32 0, i32 1, !dbg !2287
  %arraydecay192 = getelementptr inbounds [3 x float], [3 x float]* %co191, i64 0, i64 0, !dbg !2285
  %call193 = call float @len_v3v3(float* %arraydecay190, float* %arraydecay192), !dbg !2288
  store float %call193, float* %lastd, align 4, !dbg !2289
  br label %if.end238, !dbg !2290

if.else194:                                       ; preds = %do.body102
  %214 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2291
  %next195 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %214, i32 0, i32 0, !dbg !2294
  %215 = load %struct.EdgeHalf*, %struct.EdgeHalf** %next195, align 8, !dbg !2294
  %is_bev196 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %215, i32 0, i32 12, !dbg !2295
  %216 = load i8, i8* %is_bev196, align 4, !dbg !2295
  %tobool197 = icmp ne i8 %216, 0, !dbg !2291
  br i1 %tobool197, label %if.then198, label %if.else199, !dbg !2296

if.then198:                                       ; preds = %if.else194
  br label %if.end237, !dbg !2297

if.else199:                                       ; preds = %if.else194
  %217 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2299
  %prev200 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %217, i32 0, i32 1, !dbg !2301
  %218 = load %struct.EdgeHalf*, %struct.EdgeHalf** %prev200, align 8, !dbg !2301
  %is_bev201 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %218, i32 0, i32 12, !dbg !2302
  %219 = load i8, i8* %is_bev201, align 4, !dbg !2302
  %tobool202 = icmp ne i8 %219, 0, !dbg !2299
  br i1 %tobool202, label %if.then203, label %if.else222, !dbg !2303

if.then203:                                       ; preds = %if.else199
  %220 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2304
  %prev204 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %220, i32 0, i32 1, !dbg !2306
  %221 = load %struct.EdgeHalf*, %struct.EdgeHalf** %prev204, align 8, !dbg !2306
  %222 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2307
  %223 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !2308
  %v205 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %223, i32 0, i32 0, !dbg !2309
  %224 = load %struct.BMVert*, %struct.BMVert** %v205, align 8, !dbg !2309
  %225 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2310
  %fprev206 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %225, i32 0, i32 3, !dbg !2311
  %226 = load %struct.BMFace*, %struct.BMFace** %fprev206, align 8, !dbg !2311
  %arraydecay207 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !2312
  call void @offset_meet(%struct.EdgeHalf* %221, %struct.EdgeHalf* %222, %struct.BMVert* %224, %struct.BMFace* %226, float* %arraydecay207), !dbg !2313
  %227 = load i8, i8* %construct.addr, align 1, !dbg !2314
  %tobool208 = icmp ne i8 %227, 0, !dbg !2314
  br i1 %tobool208, label %if.then209, label %if.else218, !dbg !2316

if.then209:                                       ; preds = %if.then203
  %228 = load %struct.MemArena*, %struct.MemArena** %mem_arena, align 8, !dbg !2317
  %229 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !2319
  %arraydecay210 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !2320
  %call211 = call %struct.BoundVert* @add_new_bound_vert(%struct.MemArena* %228, %struct.VMesh* %229, float* %arraydecay210), !dbg !2321
  store %struct.BoundVert* %call211, %struct.BoundVert** %v, align 8, !dbg !2322
  %230 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2323
  %prev212 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %230, i32 0, i32 1, !dbg !2324
  %231 = load %struct.EdgeHalf*, %struct.EdgeHalf** %prev212, align 8, !dbg !2324
  %232 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !2325
  %efirst213 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %232, i32 0, i32 3, !dbg !2326
  store %struct.EdgeHalf* %231, %struct.EdgeHalf** %efirst213, align 8, !dbg !2327
  %233 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2328
  %234 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !2329
  %elast214 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %234, i32 0, i32 4, !dbg !2330
  store %struct.EdgeHalf* %233, %struct.EdgeHalf** %elast214, align 8, !dbg !2331
  %235 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !2332
  %236 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2333
  %leftv215 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %236, i32 0, i32 5, !dbg !2334
  store %struct.BoundVert* %235, %struct.BoundVert** %leftv215, align 8, !dbg !2335
  %237 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !2336
  %238 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2337
  %prev216 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %238, i32 0, i32 1, !dbg !2338
  %239 = load %struct.EdgeHalf*, %struct.EdgeHalf** %prev216, align 8, !dbg !2338
  %rightv217 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %239, i32 0, i32 6, !dbg !2339
  store %struct.BoundVert* %237, %struct.BoundVert** %rightv217, align 8, !dbg !2340
  br label %if.end221, !dbg !2341

if.else218:                                       ; preds = %if.then203
  %240 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2342
  %leftv219 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %240, i32 0, i32 5, !dbg !2344
  %241 = load %struct.BoundVert*, %struct.BoundVert** %leftv219, align 8, !dbg !2344
  %arraydecay220 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !2345
  call void @adjust_bound_vert(%struct.BoundVert* %241, float* %arraydecay220), !dbg !2346
  br label %if.end221

if.end221:                                        ; preds = %if.else218, %if.then209
  br label %if.end236, !dbg !2347

if.else222:                                       ; preds = %if.else199
  %242 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2348
  %243 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !2350
  %v223 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %243, i32 0, i32 0, !dbg !2351
  %244 = load %struct.BMVert*, %struct.BMVert** %v223, align 8, !dbg !2351
  %245 = load float, float* %lastd, align 4, !dbg !2352
  %arraydecay224 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !2353
  call void @slide_dist(%struct.EdgeHalf* %242, %struct.BMVert* %244, float %245, float* %arraydecay224), !dbg !2354
  %246 = load i8, i8* %construct.addr, align 1, !dbg !2355
  %tobool225 = icmp ne i8 %246, 0, !dbg !2355
  br i1 %tobool225, label %if.then226, label %if.else232, !dbg !2357

if.then226:                                       ; preds = %if.else222
  %247 = load %struct.MemArena*, %struct.MemArena** %mem_arena, align 8, !dbg !2358
  %248 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !2360
  %arraydecay227 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !2361
  %call228 = call %struct.BoundVert* @add_new_bound_vert(%struct.MemArena* %247, %struct.VMesh* %248, float* %arraydecay227), !dbg !2362
  store %struct.BoundVert* %call228, %struct.BoundVert** %v, align 8, !dbg !2363
  %249 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2364
  %250 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !2365
  %elast229 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %250, i32 0, i32 4, !dbg !2366
  store %struct.EdgeHalf* %249, %struct.EdgeHalf** %elast229, align 8, !dbg !2367
  %251 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !2368
  %efirst230 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %251, i32 0, i32 3, !dbg !2369
  store %struct.EdgeHalf* %249, %struct.EdgeHalf** %efirst230, align 8, !dbg !2370
  %252 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !2371
  %253 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2372
  %leftv231 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %253, i32 0, i32 5, !dbg !2373
  store %struct.BoundVert* %252, %struct.BoundVert** %leftv231, align 8, !dbg !2374
  br label %if.end235, !dbg !2375

if.else232:                                       ; preds = %if.else222
  %254 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2376
  %leftv233 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %254, i32 0, i32 5, !dbg !2378
  %255 = load %struct.BoundVert*, %struct.BoundVert** %leftv233, align 8, !dbg !2378
  %arraydecay234 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !2379
  call void @adjust_bound_vert(%struct.BoundVert* %255, float* %arraydecay234), !dbg !2380
  br label %if.end235

if.end235:                                        ; preds = %if.else232, %if.then226
  br label %if.end236

if.end236:                                        ; preds = %if.end235, %if.end221
  br label %if.end237

if.end237:                                        ; preds = %if.end236, %if.then198
  br label %if.end238

if.end238:                                        ; preds = %if.end237, %if.end187
  br label %do.cond239, !dbg !2381

do.cond239:                                       ; preds = %if.end238
  %256 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2382
  %next240 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %256, i32 0, i32 0, !dbg !2383
  %257 = load %struct.EdgeHalf*, %struct.EdgeHalf** %next240, align 8, !dbg !2383
  store %struct.EdgeHalf* %257, %struct.EdgeHalf** %e, align 8, !dbg !2384
  %258 = load %struct.EdgeHalf*, %struct.EdgeHalf** %efirst, align 8, !dbg !2385
  %cmp241 = icmp ne %struct.EdgeHalf* %257, %258, !dbg !2386
  br i1 %cmp241, label %do.body102, label %do.end243, !dbg !2381, !llvm.loop !2387

do.end243:                                        ; preds = %do.cond239
  %259 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !2389
  %boundstart244 = getelementptr inbounds %struct.VMesh, %struct.VMesh* %259, i32 0, i32 1, !dbg !2390
  %260 = load %struct.BoundVert*, %struct.BoundVert** %boundstart244, align 8, !dbg !2390
  store %struct.BoundVert* %260, %struct.BoundVert** %v, align 8, !dbg !2391
  br label %do.body245, !dbg !2392

do.body245:                                       ; preds = %do.cond246, %do.end243
  %261 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !2393
  %262 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !2395
  call void @set_profile_params(%struct.BevelParams* %261, %struct.BoundVert* %262), !dbg !2396
  %263 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !2397
  %264 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !2398
  call void @calculate_profile(%struct.BevelParams* %263, %struct.BoundVert* %264), !dbg !2399
  br label %do.cond246, !dbg !2400

do.cond246:                                       ; preds = %do.body245
  %265 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !2401
  %next247 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %265, i32 0, i32 0, !dbg !2402
  %266 = load %struct.BoundVert*, %struct.BoundVert** %next247, align 8, !dbg !2402
  store %struct.BoundVert* %266, %struct.BoundVert** %v, align 8, !dbg !2403
  %267 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !2404
  %boundstart248 = getelementptr inbounds %struct.VMesh, %struct.VMesh* %267, i32 0, i32 1, !dbg !2405
  %268 = load %struct.BoundVert*, %struct.BoundVert** %boundstart248, align 8, !dbg !2405
  %cmp249 = icmp ne %struct.BoundVert* %266, %268, !dbg !2406
  br i1 %cmp249, label %do.body245, label %do.end251, !dbg !2400, !llvm.loop !2407

do.end251:                                        ; preds = %do.cond246
  %269 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !2409
  %selcount252 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %269, i32 0, i32 2, !dbg !2411
  %270 = load i32, i32* %selcount252, align 4, !dbg !2411
  %cmp253 = icmp eq i32 %270, 1, !dbg !2412
  br i1 %cmp253, label %land.lhs.true255, label %if.end264, !dbg !2413

land.lhs.true255:                                 ; preds = %do.end251
  %271 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !2414
  %edgecount256 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %271, i32 0, i32 1, !dbg !2415
  %272 = load i32, i32* %edgecount256, align 8, !dbg !2415
  %cmp257 = icmp sge i32 %272, 3, !dbg !2416
  br i1 %cmp257, label %if.then259, label %if.end264, !dbg !2417

if.then259:                                       ; preds = %land.lhs.true255
  %273 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !2418
  %boundstart260 = getelementptr inbounds %struct.VMesh, %struct.VMesh* %273, i32 0, i32 1, !dbg !2420
  %274 = load %struct.BoundVert*, %struct.BoundVert** %boundstart260, align 8, !dbg !2420
  store %struct.BoundVert* %274, %struct.BoundVert** %v, align 8, !dbg !2421
  %275 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !2422
  %276 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !2423
  %efirst261 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %276, i32 0, i32 3, !dbg !2424
  %277 = load %struct.EdgeHalf*, %struct.EdgeHalf** %efirst261, align 8, !dbg !2424
  %278 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !2425
  %next262 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %278, i32 0, i32 0, !dbg !2426
  %279 = load %struct.BoundVert*, %struct.BoundVert** %next262, align 8, !dbg !2426
  %elast263 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %279, i32 0, i32 4, !dbg !2427
  %280 = load %struct.EdgeHalf*, %struct.EdgeHalf** %elast263, align 8, !dbg !2427
  call void @move_profile_plane(%struct.BoundVert* %275, %struct.EdgeHalf* %277, %struct.EdgeHalf* %280), !dbg !2428
  %281 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !2429
  %282 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !2430
  call void @calculate_profile(%struct.BevelParams* %281, %struct.BoundVert* %282), !dbg !2431
  br label %if.end264, !dbg !2432

if.end264:                                        ; preds = %if.then259, %land.lhs.true255, %do.end251
  %283 = load i8, i8* %construct.addr, align 1, !dbg !2433
  %tobool265 = icmp ne i8 %283, 0, !dbg !2433
  br i1 %tobool265, label %if.then266, label %if.end325, !dbg !2435

if.then266:                                       ; preds = %if.end264
  %284 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !2436
  call void @set_bound_vert_seams(%struct.BevVert* %284), !dbg !2438
  %285 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !2439
  %vertex_only267 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %285, i32 0, i32 7, !dbg !2441
  %286 = load i8, i8* %vertex_only267, align 8, !dbg !2441
  %tobool268 = icmp ne i8 %286, 0, !dbg !2439
  br i1 %tobool268, label %if.then269, label %if.else283, !dbg !2442

if.then269:                                       ; preds = %if.then266
  %287 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !2443
  %count = getelementptr inbounds %struct.VMesh, %struct.VMesh* %287, i32 0, i32 2, !dbg !2446
  %288 = load i32, i32* %count, align 8, !dbg !2446
  %cmp270 = icmp eq i32 %288, 2, !dbg !2447
  br i1 %cmp270, label %if.then272, label %if.else274, !dbg !2448

if.then272:                                       ; preds = %if.then269
  %289 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !2449
  %mesh_kind273 = getelementptr inbounds %struct.VMesh, %struct.VMesh* %289, i32 0, i32 4, !dbg !2450
  store i32 0, i32* %mesh_kind273, align 8, !dbg !2451
  br label %if.end282, !dbg !2449

if.else274:                                       ; preds = %if.then269
  %290 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !2452
  %seg = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %290, i32 0, i32 5, !dbg !2454
  %291 = load i32, i32* %seg, align 8, !dbg !2454
  %cmp275 = icmp sgt i32 %291, 1, !dbg !2455
  br i1 %cmp275, label %if.then277, label %if.else279, !dbg !2456

if.then277:                                       ; preds = %if.else274
  %292 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !2457
  %mesh_kind278 = getelementptr inbounds %struct.VMesh, %struct.VMesh* %292, i32 0, i32 4, !dbg !2458
  store i32 2, i32* %mesh_kind278, align 8, !dbg !2459
  br label %if.end281, !dbg !2457

if.else279:                                       ; preds = %if.else274
  %293 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !2460
  %mesh_kind280 = getelementptr inbounds %struct.VMesh, %struct.VMesh* %293, i32 0, i32 4, !dbg !2461
  store i32 1, i32* %mesh_kind280, align 8, !dbg !2462
  br label %if.end281

if.end281:                                        ; preds = %if.else279, %if.then277
  br label %if.end282

if.end282:                                        ; preds = %if.end281, %if.then272
  br label %if.end324, !dbg !2463

if.else283:                                       ; preds = %if.then266
  %294 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !2464
  %count284 = getelementptr inbounds %struct.VMesh, %struct.VMesh* %294, i32 0, i32 2, !dbg !2466
  %295 = load i32, i32* %count284, align 8, !dbg !2466
  %cmp285 = icmp eq i32 %295, 2, !dbg !2467
  br i1 %cmp285, label %land.lhs.true287, label %if.else293, !dbg !2468

land.lhs.true287:                                 ; preds = %if.else283
  %296 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !2469
  %edgecount288 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %296, i32 0, i32 1, !dbg !2470
  %297 = load i32, i32* %edgecount288, align 8, !dbg !2470
  %cmp289 = icmp eq i32 %297, 3, !dbg !2471
  br i1 %cmp289, label %if.then291, label %if.else293, !dbg !2472

if.then291:                                       ; preds = %land.lhs.true287
  %298 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !2473
  %mesh_kind292 = getelementptr inbounds %struct.VMesh, %struct.VMesh* %298, i32 0, i32 4, !dbg !2475
  store i32 0, i32* %mesh_kind292, align 8, !dbg !2476
  br label %if.end323, !dbg !2477

if.else293:                                       ; preds = %land.lhs.true287, %if.else283
  %299 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !2478
  %selcount294 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %299, i32 0, i32 2, !dbg !2480
  %300 = load i32, i32* %selcount294, align 4, !dbg !2480
  %cmp295 = icmp eq i32 %300, 2, !dbg !2481
  br i1 %cmp295, label %if.then297, label %if.else299, !dbg !2482

if.then297:                                       ; preds = %if.else293
  %301 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !2483
  %mesh_kind298 = getelementptr inbounds %struct.VMesh, %struct.VMesh* %301, i32 0, i32 4, !dbg !2485
  store i32 4, i32* %mesh_kind298, align 8, !dbg !2486
  br label %if.end322, !dbg !2487

if.else299:                                       ; preds = %if.else293
  %302 = load %struct.EdgeHalf*, %struct.EdgeHalf** %efirst, align 8, !dbg !2488
  %seg300 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %302, i32 0, i32 7, !dbg !2490
  %303 = load i32, i32* %seg300, align 8, !dbg !2490
  %cmp301 = icmp eq i32 %303, 1, !dbg !2491
  br i1 %cmp301, label %if.then306, label %lor.lhs.false, !dbg !2492

lor.lhs.false:                                    ; preds = %if.else299
  %304 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !2493
  %selcount303 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %304, i32 0, i32 2, !dbg !2494
  %305 = load i32, i32* %selcount303, align 4, !dbg !2494
  %cmp304 = icmp eq i32 %305, 1, !dbg !2495
  br i1 %cmp304, label %if.then306, label %if.else319, !dbg !2496

if.then306:                                       ; preds = %lor.lhs.false, %if.else299
  %306 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !2497
  %count307 = getelementptr inbounds %struct.VMesh, %struct.VMesh* %306, i32 0, i32 2, !dbg !2500
  %307 = load i32, i32* %count307, align 8, !dbg !2500
  %cmp308 = icmp eq i32 %307, 3, !dbg !2501
  br i1 %cmp308, label %land.lhs.true310, label %if.else316, !dbg !2502

land.lhs.true310:                                 ; preds = %if.then306
  %308 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !2503
  %selcount311 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %308, i32 0, i32 2, !dbg !2504
  %309 = load i32, i32* %selcount311, align 4, !dbg !2504
  %cmp312 = icmp eq i32 %309, 1, !dbg !2505
  br i1 %cmp312, label %if.then314, label %if.else316, !dbg !2506

if.then314:                                       ; preds = %land.lhs.true310
  %310 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !2507
  %mesh_kind315 = getelementptr inbounds %struct.VMesh, %struct.VMesh* %310, i32 0, i32 4, !dbg !2509
  store i32 3, i32* %mesh_kind315, align 8, !dbg !2510
  br label %if.end318, !dbg !2511

if.else316:                                       ; preds = %land.lhs.true310, %if.then306
  %311 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !2512
  %mesh_kind317 = getelementptr inbounds %struct.VMesh, %struct.VMesh* %311, i32 0, i32 4, !dbg !2514
  store i32 1, i32* %mesh_kind317, align 8, !dbg !2515
  br label %if.end318

if.end318:                                        ; preds = %if.else316, %if.then314
  br label %if.end321, !dbg !2516

if.else319:                                       ; preds = %lor.lhs.false
  %312 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !2517
  %mesh_kind320 = getelementptr inbounds %struct.VMesh, %struct.VMesh* %312, i32 0, i32 4, !dbg !2519
  store i32 2, i32* %mesh_kind320, align 8, !dbg !2520
  br label %if.end321

if.end321:                                        ; preds = %if.else319, %if.end318
  br label %if.end322

if.end322:                                        ; preds = %if.end321, %if.then297
  br label %if.end323

if.end323:                                        ; preds = %if.end322, %if.then291
  br label %if.end324

if.end324:                                        ; preds = %if.end323, %if.end282
  br label %if.end325, !dbg !2521

if.end325:                                        ; preds = %if.end91, %if.end324, %if.end264
  ret void, !dbg !2522
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @BM_iter_step(%struct.BMIter* %iter) #0 !dbg !2523 {
entry:
  %iter.addr = alloca %struct.BMIter*, align 8
  store %struct.BMIter* %iter, %struct.BMIter** %iter.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMIter** %iter.addr, metadata !2526, metadata !DIExpression()), !dbg !2527
  %0 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !2528
  %step = getelementptr inbounds %struct.BMIter, %struct.BMIter* %0, i32 0, i32 2, !dbg !2529
  %1 = load i8* (i8*)*, i8* (i8*)** %step, align 8, !dbg !2529
  %2 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !2530
  %3 = bitcast %struct.BMIter* %2 to i8*, !dbg !2530
  %call = call i8* %1(i8* %3), !dbg !2528
  ret i8* %call, !dbg !2531
}

; Function Attrs: noinline nounwind uwtable
define internal void @adjust_offsets(%struct.BevelParams* %bp) #0 !dbg !2532 {
entry:
  %bp.addr = alloca %struct.BevelParams*, align 8
  %bv = alloca %struct.BevVert*, align 8
  %searchbv = alloca %struct.BevVert*, align 8
  %bvother = alloca %struct.BevVert*, align 8
  %i = alloca i32, align 4
  %searchi = alloca i32, align 4
  %giter = alloca %struct.GHashIterator, align 8
  %e = alloca %struct.EdgeHalf*, align 8
  %efirst = alloca %struct.EdgeHalf*, align 8
  %eother = alloca %struct.EdgeHalf*, align 8
  %q = alloca %struct._GSQueue*, align 8
  store %struct.BevelParams* %bp, %struct.BevelParams** %bp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BevelParams** %bp.addr, metadata !2533, metadata !DIExpression()), !dbg !2534
  call void @llvm.dbg.declare(metadata %struct.BevVert** %bv, metadata !2535, metadata !DIExpression()), !dbg !2536
  call void @llvm.dbg.declare(metadata %struct.BevVert** %searchbv, metadata !2537, metadata !DIExpression()), !dbg !2538
  call void @llvm.dbg.declare(metadata %struct.BevVert** %bvother, metadata !2539, metadata !DIExpression()), !dbg !2540
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2541, metadata !DIExpression()), !dbg !2542
  call void @llvm.dbg.declare(metadata i32* %searchi, metadata !2543, metadata !DIExpression()), !dbg !2544
  call void @llvm.dbg.declare(metadata %struct.GHashIterator* %giter, metadata !2545, metadata !DIExpression()), !dbg !2554
  call void @llvm.dbg.declare(metadata %struct.EdgeHalf** %e, metadata !2555, metadata !DIExpression()), !dbg !2556
  call void @llvm.dbg.declare(metadata %struct.EdgeHalf** %efirst, metadata !2557, metadata !DIExpression()), !dbg !2558
  call void @llvm.dbg.declare(metadata %struct.EdgeHalf** %eother, metadata !2559, metadata !DIExpression()), !dbg !2560
  call void @llvm.dbg.declare(metadata %struct._GSQueue** %q, metadata !2561, metadata !DIExpression()), !dbg !2566
  %0 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !2567
  %vert_hash = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %0, i32 0, i32 0, !dbg !2567
  %1 = load %struct.GHash*, %struct.GHash** %vert_hash, align 8, !dbg !2567
  call void @BLI_ghashIterator_init(%struct.GHashIterator* %giter, %struct.GHash* %1), !dbg !2567
  br label %for.cond, !dbg !2567

for.cond:                                         ; preds = %for.inc, %entry
  %call = call zeroext i8 @BLI_ghashIterator_done(%struct.GHashIterator* %giter), !dbg !2569
  %conv = zext i8 %call to i32, !dbg !2569
  %cmp = icmp eq i32 %conv, 0, !dbg !2569
  br i1 %cmp, label %for.body, label %for.end, !dbg !2567

for.body:                                         ; preds = %for.cond
  %call2 = call i8* @BLI_ghashIterator_getValue(%struct.GHashIterator* %giter), !dbg !2571
  %2 = bitcast i8* %call2 to %struct.BevVert*, !dbg !2571
  store %struct.BevVert* %2, %struct.BevVert** %bv, align 8, !dbg !2573
  %3 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !2574
  %visited = getelementptr inbounds %struct.BevVert, %struct.BevVert* %3, i32 0, i32 6, !dbg !2575
  store i8 0, i8* %visited, align 1, !dbg !2576
  br label %for.inc, !dbg !2577

for.inc:                                          ; preds = %for.body
  call void @BLI_ghashIterator_step(%struct.GHashIterator* %giter), !dbg !2569
  br label %for.cond, !dbg !2569, !llvm.loop !2578

for.end:                                          ; preds = %for.cond
  %call3 = call %struct._GSQueue* @BLI_gsqueue_new(i64 8), !dbg !2580
  store %struct._GSQueue* %call3, %struct._GSQueue** %q, align 8, !dbg !2581
  br label %for.cond4, !dbg !2582

for.cond4:                                        ; preds = %while.end, %for.end
  store %struct.BevVert* null, %struct.BevVert** %searchbv, align 8, !dbg !2583
  store i32 -1, i32* %searchi, align 4, !dbg !2587
  %4 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !2588
  %vert_hash5 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %4, i32 0, i32 0, !dbg !2588
  %5 = load %struct.GHash*, %struct.GHash** %vert_hash5, align 8, !dbg !2588
  call void @BLI_ghashIterator_init(%struct.GHashIterator* %giter, %struct.GHash* %5), !dbg !2588
  br label %for.cond6, !dbg !2588

for.cond6:                                        ; preds = %for.inc23, %for.cond4
  %call7 = call zeroext i8 @BLI_ghashIterator_done(%struct.GHashIterator* %giter), !dbg !2590
  %conv8 = zext i8 %call7 to i32, !dbg !2590
  %cmp9 = icmp eq i32 %conv8, 0, !dbg !2590
  br i1 %cmp9, label %for.body11, label %for.end24, !dbg !2588

for.body11:                                       ; preds = %for.cond6
  %call12 = call i8* @BLI_ghashIterator_getValue(%struct.GHashIterator* %giter), !dbg !2592
  %6 = bitcast i8* %call12 to %struct.BevVert*, !dbg !2592
  store %struct.BevVert* %6, %struct.BevVert** %bv, align 8, !dbg !2594
  %7 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !2595
  %visited13 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %7, i32 0, i32 6, !dbg !2597
  %8 = load i8, i8* %visited13, align 1, !dbg !2597
  %tobool = icmp ne i8 %8, 0, !dbg !2595
  br i1 %tobool, label %if.end22, label %land.lhs.true, !dbg !2598

land.lhs.true:                                    ; preds = %for.body11
  %9 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !2599
  %call14 = call zeroext i8 @any_edge_half_offset_changed(%struct.BevVert* %9), !dbg !2600
  %conv15 = zext i8 %call14 to i32, !dbg !2600
  %tobool16 = icmp ne i32 %conv15, 0, !dbg !2600
  br i1 %tobool16, label %if.then, label %if.end22, !dbg !2601

if.then:                                          ; preds = %land.lhs.true
  %10 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !2602
  %v = getelementptr inbounds %struct.BevVert, %struct.BevVert* %10, i32 0, i32 0, !dbg !2602
  %11 = load %struct.BMVert*, %struct.BMVert** %v, align 8, !dbg !2602
  %head = getelementptr inbounds %struct.BMVert, %struct.BMVert* %11, i32 0, i32 0, !dbg !2602
  %call17 = call i32 @_bm_elem_index_get(%struct.BMHeader* %head), !dbg !2602
  store i32 %call17, i32* %i, align 4, !dbg !2604
  %12 = load %struct.BevVert*, %struct.BevVert** %searchbv, align 8, !dbg !2605
  %tobool18 = icmp ne %struct.BevVert* %12, null, !dbg !2605
  br i1 %tobool18, label %lor.lhs.false, label %if.then21, !dbg !2607

lor.lhs.false:                                    ; preds = %if.then
  %13 = load i32, i32* %i, align 4, !dbg !2608
  %14 = load i32, i32* %searchi, align 4, !dbg !2609
  %cmp19 = icmp slt i32 %13, %14, !dbg !2610
  br i1 %cmp19, label %if.then21, label %if.end, !dbg !2611

if.then21:                                        ; preds = %lor.lhs.false, %if.then
  %15 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !2612
  store %struct.BevVert* %15, %struct.BevVert** %searchbv, align 8, !dbg !2614
  %16 = load i32, i32* %i, align 4, !dbg !2615
  store i32 %16, i32* %searchi, align 4, !dbg !2616
  br label %if.end, !dbg !2617

if.end:                                           ; preds = %if.then21, %lor.lhs.false
  br label %if.end22, !dbg !2618

if.end22:                                         ; preds = %if.end, %land.lhs.true, %for.body11
  br label %for.inc23, !dbg !2619

for.inc23:                                        ; preds = %if.end22
  call void @BLI_ghashIterator_step(%struct.GHashIterator* %giter), !dbg !2590
  br label %for.cond6, !dbg !2590, !llvm.loop !2620

for.end24:                                        ; preds = %for.cond6
  %17 = load %struct.BevVert*, %struct.BevVert** %searchbv, align 8, !dbg !2622
  %cmp25 = icmp eq %struct.BevVert* %17, null, !dbg !2624
  br i1 %cmp25, label %if.then27, label %if.end28, !dbg !2625

if.then27:                                        ; preds = %for.end24
  br label %for.end49, !dbg !2626

if.end28:                                         ; preds = %for.end24
  %18 = load %struct._GSQueue*, %struct._GSQueue** %q, align 8, !dbg !2627
  %19 = bitcast %struct.BevVert** %searchbv to i8*, !dbg !2628
  call void @BLI_gsqueue_push(%struct._GSQueue* %18, i8* %19), !dbg !2629
  br label %while.cond, !dbg !2630

while.cond:                                       ; preds = %do.end, %if.then33, %if.end28
  %20 = load %struct._GSQueue*, %struct._GSQueue** %q, align 8, !dbg !2631
  %call29 = call zeroext i8 @BLI_gsqueue_is_empty(%struct._GSQueue* %20), !dbg !2632
  %tobool30 = icmp ne i8 %call29, 0, !dbg !2633
  %lnot = xor i1 %tobool30, true, !dbg !2633
  br i1 %lnot, label %while.body, label %while.end, !dbg !2630

while.body:                                       ; preds = %while.cond
  %21 = load %struct._GSQueue*, %struct._GSQueue** %q, align 8, !dbg !2634
  %22 = bitcast %struct.BevVert** %bv to i8*, !dbg !2636
  call void @BLI_gsqueue_pop(%struct._GSQueue* %21, i8* %22), !dbg !2637
  %23 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !2638
  %visited31 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %23, i32 0, i32 6, !dbg !2640
  %24 = load i8, i8* %visited31, align 1, !dbg !2640
  %tobool32 = icmp ne i8 %24, 0, !dbg !2638
  br i1 %tobool32, label %if.then33, label %if.end34, !dbg !2641

if.then33:                                        ; preds = %while.body
  br label %while.cond, !dbg !2642, !llvm.loop !2643

if.end34:                                         ; preds = %while.body
  %25 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !2645
  %visited35 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %25, i32 0, i32 6, !dbg !2646
  store i8 1, i8* %visited35, align 1, !dbg !2647
  %26 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !2648
  %27 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !2649
  call void @build_boundary(%struct.BevelParams* %26, %struct.BevVert* %27, i8 zeroext 0), !dbg !2650
  %28 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !2651
  %edges = getelementptr inbounds %struct.BevVert, %struct.BevVert* %28, i32 0, i32 7, !dbg !2652
  %29 = load %struct.EdgeHalf*, %struct.EdgeHalf** %edges, align 8, !dbg !2652
  %arrayidx = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %29, i64 0, !dbg !2651
  store %struct.EdgeHalf* %arrayidx, %struct.EdgeHalf** %efirst, align 8, !dbg !2653
  store %struct.EdgeHalf* %arrayidx, %struct.EdgeHalf** %e, align 8, !dbg !2654
  br label %do.body, !dbg !2655

do.body:                                          ; preds = %do.cond, %if.end34
  %30 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !2656
  %31 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2658
  %call36 = call %struct.EdgeHalf* @find_other_end_edge_half(%struct.BevelParams* %30, %struct.EdgeHalf* %31, %struct.BevVert** %bvother), !dbg !2659
  store %struct.EdgeHalf* %call36, %struct.EdgeHalf** %eother, align 8, !dbg !2660
  %32 = load %struct.EdgeHalf*, %struct.EdgeHalf** %eother, align 8, !dbg !2661
  %tobool37 = icmp ne %struct.EdgeHalf* %32, null, !dbg !2661
  br i1 %tobool37, label %land.lhs.true38, label %if.end46, !dbg !2663

land.lhs.true38:                                  ; preds = %do.body
  %33 = load %struct.BevVert*, %struct.BevVert** %bvother, align 8, !dbg !2664
  %visited39 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %33, i32 0, i32 6, !dbg !2665
  %34 = load i8, i8* %visited39, align 1, !dbg !2665
  %tobool40 = icmp ne i8 %34, 0, !dbg !2664
  br i1 %tobool40, label %if.end46, label %land.lhs.true41, !dbg !2666

land.lhs.true41:                                  ; preds = %land.lhs.true38
  %35 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2667
  %call42 = call zeroext i8 @edge_half_offset_changed(%struct.EdgeHalf* %35), !dbg !2668
  %conv43 = zext i8 %call42 to i32, !dbg !2668
  %tobool44 = icmp ne i32 %conv43, 0, !dbg !2668
  br i1 %tobool44, label %if.then45, label %if.end46, !dbg !2669

if.then45:                                        ; preds = %land.lhs.true41
  %36 = load %struct._GSQueue*, %struct._GSQueue** %q, align 8, !dbg !2670
  %37 = bitcast %struct.BevVert** %bvother to i8*, !dbg !2672
  call void @BLI_gsqueue_push(%struct._GSQueue* %36, i8* %37), !dbg !2673
  br label %if.end46, !dbg !2674

if.end46:                                         ; preds = %if.then45, %land.lhs.true41, %land.lhs.true38, %do.body
  br label %do.cond, !dbg !2675

do.cond:                                          ; preds = %if.end46
  %38 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !2676
  %next = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %38, i32 0, i32 0, !dbg !2677
  %39 = load %struct.EdgeHalf*, %struct.EdgeHalf** %next, align 8, !dbg !2677
  store %struct.EdgeHalf* %39, %struct.EdgeHalf** %e, align 8, !dbg !2678
  %40 = load %struct.EdgeHalf*, %struct.EdgeHalf** %efirst, align 8, !dbg !2679
  %cmp47 = icmp ne %struct.EdgeHalf* %39, %40, !dbg !2680
  br i1 %cmp47, label %do.body, label %do.end, !dbg !2675, !llvm.loop !2681

do.end:                                           ; preds = %do.cond
  br label %while.cond, !dbg !2630, !llvm.loop !2643

while.end:                                        ; preds = %while.cond
  br label %for.cond4, !dbg !2683, !llvm.loop !2684

for.end49:                                        ; preds = %if.then27
  %41 = load %struct._GSQueue*, %struct._GSQueue** %q, align 8, !dbg !2687
  call void @BLI_gsqueue_free(%struct._GSQueue* %41), !dbg !2688
  ret void, !dbg !2689
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.BevVert* @find_bevvert(%struct.BevelParams* %bp, %struct.BMVert* %bmv) #0 !dbg !2690 {
entry:
  %bp.addr = alloca %struct.BevelParams*, align 8
  %bmv.addr = alloca %struct.BMVert*, align 8
  store %struct.BevelParams* %bp, %struct.BevelParams** %bp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BevelParams** %bp.addr, metadata !2693, metadata !DIExpression()), !dbg !2694
  store %struct.BMVert* %bmv, %struct.BMVert** %bmv.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMVert** %bmv.addr, metadata !2695, metadata !DIExpression()), !dbg !2696
  %0 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !2697
  %vert_hash = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %0, i32 0, i32 0, !dbg !2698
  %1 = load %struct.GHash*, %struct.GHash** %vert_hash, align 8, !dbg !2698
  %2 = load %struct.BMVert*, %struct.BMVert** %bmv.addr, align 8, !dbg !2699
  %3 = bitcast %struct.BMVert* %2 to i8*, !dbg !2699
  %call = call i8* @BLI_ghash_lookup(%struct.GHash* %1, i8* %3), !dbg !2700
  %4 = bitcast i8* %call to %struct.BevVert*, !dbg !2700
  ret %struct.BevVert* %4, !dbg !2701
}

; Function Attrs: noinline nounwind uwtable
define internal void @build_vmesh(%struct.BevelParams* %bp, %struct.BMesh* %bm, %struct.BevVert* %bv) #0 !dbg !2702 {
entry:
  %bp.addr = alloca %struct.BevelParams*, align 8
  %bm.addr = alloca %struct.BMesh*, align 8
  %bv.addr = alloca %struct.BevVert*, align 8
  %mem_arena = alloca %struct.MemArena*, align 8
  %vm = alloca %struct.VMesh*, align 8
  %v = alloca %struct.BoundVert*, align 8
  %weld1 = alloca %struct.BoundVert*, align 8
  %weld2 = alloca %struct.BoundVert*, align 8
  %n = alloca i32, align 4
  %ns = alloca i32, align 4
  %ns2 = alloca i32, align 4
  %i = alloca i32, align 4
  %k = alloca i32, align 4
  %weld = alloca i32, align 4
  %va = alloca float*, align 8
  %vb = alloca float*, align 8
  %co = alloca [3 x float], align 4
  store %struct.BevelParams* %bp, %struct.BevelParams** %bp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BevelParams** %bp.addr, metadata !2705, metadata !DIExpression()), !dbg !2706
  store %struct.BMesh* %bm, %struct.BMesh** %bm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMesh** %bm.addr, metadata !2707, metadata !DIExpression()), !dbg !2708
  store %struct.BevVert* %bv, %struct.BevVert** %bv.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BevVert** %bv.addr, metadata !2709, metadata !DIExpression()), !dbg !2710
  call void @llvm.dbg.declare(metadata %struct.MemArena** %mem_arena, metadata !2711, metadata !DIExpression()), !dbg !2712
  %0 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !2713
  %mem_arena1 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %0, i32 0, i32 1, !dbg !2714
  %1 = load %struct.MemArena*, %struct.MemArena** %mem_arena1, align 8, !dbg !2714
  store %struct.MemArena* %1, %struct.MemArena** %mem_arena, align 8, !dbg !2712
  call void @llvm.dbg.declare(metadata %struct.VMesh** %vm, metadata !2715, metadata !DIExpression()), !dbg !2716
  %2 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !2717
  %vmesh = getelementptr inbounds %struct.BevVert, %struct.BevVert* %2, i32 0, i32 9, !dbg !2718
  %3 = load %struct.VMesh*, %struct.VMesh** %vmesh, align 8, !dbg !2718
  store %struct.VMesh* %3, %struct.VMesh** %vm, align 8, !dbg !2716
  call void @llvm.dbg.declare(metadata %struct.BoundVert** %v, metadata !2719, metadata !DIExpression()), !dbg !2720
  call void @llvm.dbg.declare(metadata %struct.BoundVert** %weld1, metadata !2721, metadata !DIExpression()), !dbg !2722
  call void @llvm.dbg.declare(metadata %struct.BoundVert** %weld2, metadata !2723, metadata !DIExpression()), !dbg !2724
  call void @llvm.dbg.declare(metadata i32* %n, metadata !2725, metadata !DIExpression()), !dbg !2726
  call void @llvm.dbg.declare(metadata i32* %ns, metadata !2727, metadata !DIExpression()), !dbg !2728
  call void @llvm.dbg.declare(metadata i32* %ns2, metadata !2729, metadata !DIExpression()), !dbg !2730
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2731, metadata !DIExpression()), !dbg !2732
  call void @llvm.dbg.declare(metadata i32* %k, metadata !2733, metadata !DIExpression()), !dbg !2734
  call void @llvm.dbg.declare(metadata i32* %weld, metadata !2735, metadata !DIExpression()), !dbg !2736
  call void @llvm.dbg.declare(metadata float** %va, metadata !2737, metadata !DIExpression()), !dbg !2738
  call void @llvm.dbg.declare(metadata float** %vb, metadata !2739, metadata !DIExpression()), !dbg !2740
  call void @llvm.dbg.declare(metadata [3 x float]* %co, metadata !2741, metadata !DIExpression()), !dbg !2742
  %4 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !2743
  %count = getelementptr inbounds %struct.VMesh, %struct.VMesh* %4, i32 0, i32 2, !dbg !2744
  %5 = load i32, i32* %count, align 8, !dbg !2744
  store i32 %5, i32* %n, align 4, !dbg !2745
  %6 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !2746
  %seg = getelementptr inbounds %struct.VMesh, %struct.VMesh* %6, i32 0, i32 3, !dbg !2747
  %7 = load i32, i32* %seg, align 4, !dbg !2747
  store i32 %7, i32* %ns, align 4, !dbg !2748
  %8 = load i32, i32* %ns, align 4, !dbg !2749
  %div = sdiv i32 %8, 2, !dbg !2750
  store i32 %div, i32* %ns2, align 4, !dbg !2751
  %9 = load %struct.MemArena*, %struct.MemArena** %mem_arena, align 8, !dbg !2752
  %10 = load i32, i32* %n, align 4, !dbg !2753
  %11 = load i32, i32* %ns2, align 4, !dbg !2754
  %add = add nsw i32 %11, 1, !dbg !2755
  %mul = mul nsw i32 %10, %add, !dbg !2756
  %12 = load i32, i32* %ns, align 4, !dbg !2757
  %add2 = add nsw i32 %12, 1, !dbg !2758
  %mul3 = mul nsw i32 %mul, %add2, !dbg !2759
  %conv = sext i32 %mul3 to i64, !dbg !2753
  %mul4 = mul i64 %conv, 24, !dbg !2760
  %call = call i8* @BLI_memarena_alloc(%struct.MemArena* %9, i64 %mul4), !dbg !2761
  %13 = bitcast i8* %call to %struct.NewVert*, !dbg !2762
  %14 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !2763
  %mesh = getelementptr inbounds %struct.VMesh, %struct.VMesh* %14, i32 0, i32 0, !dbg !2764
  store %struct.NewVert* %13, %struct.NewVert** %mesh, align 8, !dbg !2765
  %15 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !2766
  %selcount = getelementptr inbounds %struct.BevVert, %struct.BevVert* %15, i32 0, i32 2, !dbg !2767
  %16 = load i32, i32* %selcount, align 4, !dbg !2767
  %cmp = icmp eq i32 %16, 2, !dbg !2768
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !2769

land.rhs:                                         ; preds = %entry
  %17 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !2770
  %count6 = getelementptr inbounds %struct.VMesh, %struct.VMesh* %17, i32 0, i32 2, !dbg !2771
  %18 = load i32, i32* %count6, align 8, !dbg !2771
  %cmp7 = icmp eq i32 %18, 2, !dbg !2772
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %19 = phi i1 [ false, %entry ], [ %cmp7, %land.rhs ], !dbg !2773
  %land.ext = zext i1 %19 to i32, !dbg !2769
  store i32 %land.ext, i32* %weld, align 4, !dbg !2774
  store %struct.BoundVert* null, %struct.BoundVert** %weld2, align 8, !dbg !2775
  store %struct.BoundVert* null, %struct.BoundVert** %weld1, align 8, !dbg !2776
  %20 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !2777
  %boundstart = getelementptr inbounds %struct.VMesh, %struct.VMesh* %20, i32 0, i32 1, !dbg !2778
  %21 = load %struct.BoundVert*, %struct.BoundVert** %boundstart, align 8, !dbg !2778
  store %struct.BoundVert* %21, %struct.BoundVert** %v, align 8, !dbg !2779
  br label %do.body, !dbg !2780

do.body:                                          ; preds = %do.cond, %land.end
  %22 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !2781
  %index = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %22, i32 0, i32 6, !dbg !2783
  %23 = load i32, i32* %index, align 8, !dbg !2783
  store i32 %23, i32* %i, align 4, !dbg !2784
  %24 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !2785
  %25 = load i32, i32* %i, align 4, !dbg !2786
  %call9 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %24, i32 %25, i32 0, i32 0), !dbg !2787
  %co10 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call9, i32 0, i32 1, !dbg !2788
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %co10, i64 0, i64 0, !dbg !2787
  %26 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !2789
  %nv = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %26, i32 0, i32 2, !dbg !2790
  %co11 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %nv, i32 0, i32 1, !dbg !2791
  %arraydecay12 = getelementptr inbounds [3 x float], [3 x float]* %co11, i64 0, i64 0, !dbg !2789
  call void @copy_v3_v3(float* %arraydecay, float* %arraydecay12), !dbg !2792
  %27 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !2793
  %28 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !2794
  %29 = load i32, i32* %i, align 4, !dbg !2795
  %30 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !2796
  %v13 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %30, i32 0, i32 0, !dbg !2797
  %31 = load %struct.BMVert*, %struct.BMVert** %v13, align 8, !dbg !2797
  call void @create_mesh_bmvert(%struct.BMesh* %27, %struct.VMesh* %28, i32 %29, i32 0, i32 0, %struct.BMVert* %31), !dbg !2798
  %32 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !2799
  %33 = load i32, i32* %i, align 4, !dbg !2800
  %call14 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %32, i32 %33, i32 0, i32 0), !dbg !2801
  %v15 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call14, i32 0, i32 0, !dbg !2802
  %34 = load %struct.BMVert*, %struct.BMVert** %v15, align 8, !dbg !2802
  %35 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !2803
  %nv16 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %35, i32 0, i32 2, !dbg !2804
  %v17 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %nv16, i32 0, i32 0, !dbg !2805
  store %struct.BMVert* %34, %struct.BMVert** %v17, align 8, !dbg !2806
  %36 = load i32, i32* %weld, align 4, !dbg !2807
  %tobool = icmp ne i32 %36, 0, !dbg !2807
  br i1 %tobool, label %land.lhs.true, label %if.end21, !dbg !2809

land.lhs.true:                                    ; preds = %do.body
  %37 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !2810
  %ebev = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %37, i32 0, i32 5, !dbg !2811
  %38 = load %struct.EdgeHalf*, %struct.EdgeHalf** %ebev, align 8, !dbg !2811
  %tobool18 = icmp ne %struct.EdgeHalf* %38, null, !dbg !2810
  br i1 %tobool18, label %if.then, label %if.end21, !dbg !2812

if.then:                                          ; preds = %land.lhs.true
  %39 = load %struct.BoundVert*, %struct.BoundVert** %weld1, align 8, !dbg !2813
  %tobool19 = icmp ne %struct.BoundVert* %39, null, !dbg !2813
  br i1 %tobool19, label %if.else, label %if.then20, !dbg !2816

if.then20:                                        ; preds = %if.then
  %40 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !2817
  store %struct.BoundVert* %40, %struct.BoundVert** %weld1, align 8, !dbg !2818
  br label %if.end, !dbg !2819

if.else:                                          ; preds = %if.then
  %41 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !2820
  store %struct.BoundVert* %41, %struct.BoundVert** %weld2, align 8, !dbg !2822
  %42 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !2823
  %43 = load %struct.BoundVert*, %struct.BoundVert** %weld1, align 8, !dbg !2824
  %44 = load %struct.BoundVert*, %struct.BoundVert** %weld2, align 8, !dbg !2825
  call void @move_weld_profile_planes(%struct.BevVert* %42, %struct.BoundVert* %43, %struct.BoundVert* %44), !dbg !2826
  %45 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !2827
  %46 = load %struct.BoundVert*, %struct.BoundVert** %weld1, align 8, !dbg !2828
  call void @calculate_profile(%struct.BevelParams* %45, %struct.BoundVert* %46), !dbg !2829
  %47 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !2830
  %48 = load %struct.BoundVert*, %struct.BoundVert** %weld2, align 8, !dbg !2831
  call void @calculate_profile(%struct.BevelParams* %47, %struct.BoundVert* %48), !dbg !2832
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then20
  br label %if.end21, !dbg !2833

if.end21:                                         ; preds = %if.end, %land.lhs.true, %do.body
  br label %do.cond, !dbg !2834

do.cond:                                          ; preds = %if.end21
  %49 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !2835
  %next = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %49, i32 0, i32 0, !dbg !2836
  %50 = load %struct.BoundVert*, %struct.BoundVert** %next, align 8, !dbg !2836
  store %struct.BoundVert* %50, %struct.BoundVert** %v, align 8, !dbg !2837
  %51 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !2838
  %boundstart22 = getelementptr inbounds %struct.VMesh, %struct.VMesh* %51, i32 0, i32 1, !dbg !2839
  %52 = load %struct.BoundVert*, %struct.BoundVert** %boundstart22, align 8, !dbg !2839
  %cmp23 = icmp ne %struct.BoundVert* %50, %52, !dbg !2840
  br i1 %cmp23, label %do.body, label %do.end, !dbg !2834, !llvm.loop !2841

do.end:                                           ; preds = %do.cond
  %53 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !2843
  %boundstart25 = getelementptr inbounds %struct.VMesh, %struct.VMesh* %53, i32 0, i32 1, !dbg !2844
  %54 = load %struct.BoundVert*, %struct.BoundVert** %boundstart25, align 8, !dbg !2844
  store %struct.BoundVert* %54, %struct.BoundVert** %v, align 8, !dbg !2845
  br label %do.body26, !dbg !2846

do.body26:                                        ; preds = %do.cond48, %do.end
  %55 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !2847
  %index27 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %55, i32 0, i32 6, !dbg !2849
  %56 = load i32, i32* %index27, align 8, !dbg !2849
  store i32 %56, i32* %i, align 4, !dbg !2850
  %57 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !2851
  %58 = load i32, i32* %i, align 4, !dbg !2852
  %59 = load i32, i32* %ns, align 4, !dbg !2853
  %60 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !2854
  %next28 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %60, i32 0, i32 0, !dbg !2855
  %61 = load %struct.BoundVert*, %struct.BoundVert** %next28, align 8, !dbg !2855
  %index29 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %61, i32 0, i32 6, !dbg !2856
  %62 = load i32, i32* %index29, align 8, !dbg !2856
  call void @copy_mesh_vert(%struct.VMesh* %57, i32 %58, i32 0, i32 %59, i32 %62, i32 0, i32 0), !dbg !2857
  store i32 1, i32* %k, align 4, !dbg !2858
  br label %for.cond, !dbg !2860

for.cond:                                         ; preds = %for.inc, %do.body26
  %63 = load i32, i32* %k, align 4, !dbg !2861
  %64 = load i32, i32* %ns, align 4, !dbg !2863
  %cmp30 = icmp slt i32 %63, %64, !dbg !2864
  br i1 %cmp30, label %for.body, label %for.end, !dbg !2865

for.body:                                         ; preds = %for.cond
  %65 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !2866
  %ebev32 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %65, i32 0, i32 5, !dbg !2869
  %66 = load %struct.EdgeHalf*, %struct.EdgeHalf** %ebev32, align 8, !dbg !2869
  %tobool33 = icmp ne %struct.EdgeHalf* %66, null, !dbg !2866
  br i1 %tobool33, label %land.lhs.true34, label %if.end47, !dbg !2870

land.lhs.true34:                                  ; preds = %for.body
  %67 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !2871
  %mesh_kind = getelementptr inbounds %struct.VMesh, %struct.VMesh* %67, i32 0, i32 4, !dbg !2872
  %68 = load i32, i32* %mesh_kind, align 8, !dbg !2872
  %cmp35 = icmp ne i32 %68, 2, !dbg !2873
  br i1 %cmp35, label %if.then37, label %if.end47, !dbg !2874

if.then37:                                        ; preds = %land.lhs.true34
  %69 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !2875
  %70 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !2877
  %profile = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %70, i32 0, i32 7, !dbg !2878
  %71 = load i32, i32* %k, align 4, !dbg !2879
  %72 = load i32, i32* %ns, align 4, !dbg !2880
  %arraydecay38 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !2881
  call void @get_profile_point(%struct.BevelParams* %69, %struct.Profile* %profile, i32 %71, i32 %72, float* %arraydecay38), !dbg !2882
  %73 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !2883
  %74 = load i32, i32* %i, align 4, !dbg !2884
  %75 = load i32, i32* %k, align 4, !dbg !2885
  %call39 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %73, i32 %74, i32 0, i32 %75), !dbg !2886
  %co40 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call39, i32 0, i32 1, !dbg !2887
  %arraydecay41 = getelementptr inbounds [3 x float], [3 x float]* %co40, i64 0, i64 0, !dbg !2886
  %arraydecay42 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !2888
  call void @copy_v3_v3(float* %arraydecay41, float* %arraydecay42), !dbg !2889
  %76 = load i32, i32* %weld, align 4, !dbg !2890
  %tobool43 = icmp ne i32 %76, 0, !dbg !2890
  br i1 %tobool43, label %if.end46, label %if.then44, !dbg !2892

if.then44:                                        ; preds = %if.then37
  %77 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !2893
  %78 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !2894
  %79 = load i32, i32* %i, align 4, !dbg !2895
  %80 = load i32, i32* %k, align 4, !dbg !2896
  %81 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !2897
  %v45 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %81, i32 0, i32 0, !dbg !2898
  %82 = load %struct.BMVert*, %struct.BMVert** %v45, align 8, !dbg !2898
  call void @create_mesh_bmvert(%struct.BMesh* %77, %struct.VMesh* %78, i32 %79, i32 0, i32 %80, %struct.BMVert* %82), !dbg !2899
  br label %if.end46, !dbg !2899

if.end46:                                         ; preds = %if.then44, %if.then37
  br label %if.end47, !dbg !2900

if.end47:                                         ; preds = %if.end46, %land.lhs.true34, %for.body
  br label %for.inc, !dbg !2901

for.inc:                                          ; preds = %if.end47
  %83 = load i32, i32* %k, align 4, !dbg !2902
  %inc = add nsw i32 %83, 1, !dbg !2902
  store i32 %inc, i32* %k, align 4, !dbg !2902
  br label %for.cond, !dbg !2903, !llvm.loop !2904

for.end:                                          ; preds = %for.cond
  br label %do.cond48, !dbg !2906

do.cond48:                                        ; preds = %for.end
  %84 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !2907
  %next49 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %84, i32 0, i32 0, !dbg !2908
  %85 = load %struct.BoundVert*, %struct.BoundVert** %next49, align 8, !dbg !2908
  store %struct.BoundVert* %85, %struct.BoundVert** %v, align 8, !dbg !2909
  %86 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !2910
  %boundstart50 = getelementptr inbounds %struct.VMesh, %struct.VMesh* %86, i32 0, i32 1, !dbg !2911
  %87 = load %struct.BoundVert*, %struct.BoundVert** %boundstart50, align 8, !dbg !2911
  %cmp51 = icmp ne %struct.BoundVert* %85, %87, !dbg !2912
  br i1 %cmp51, label %do.body26, label %do.end53, !dbg !2906, !llvm.loop !2913

do.end53:                                         ; preds = %do.cond48
  %88 = load i32, i32* %weld, align 4, !dbg !2915
  %tobool54 = icmp ne i32 %88, 0, !dbg !2915
  br i1 %tobool54, label %if.then55, label %if.end115, !dbg !2917

if.then55:                                        ; preds = %do.end53
  %89 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !2918
  %mesh_kind56 = getelementptr inbounds %struct.VMesh, %struct.VMesh* %89, i32 0, i32 4, !dbg !2920
  store i32 0, i32* %mesh_kind56, align 8, !dbg !2921
  store i32 1, i32* %k, align 4, !dbg !2922
  br label %for.cond57, !dbg !2924

for.cond57:                                       ; preds = %for.inc102, %if.then55
  %90 = load i32, i32* %k, align 4, !dbg !2925
  %91 = load i32, i32* %ns, align 4, !dbg !2927
  %cmp58 = icmp slt i32 %90, %91, !dbg !2928
  br i1 %cmp58, label %for.body60, label %for.end104, !dbg !2929

for.body60:                                       ; preds = %for.cond57
  %92 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !2930
  %93 = load %struct.BoundVert*, %struct.BoundVert** %weld1, align 8, !dbg !2932
  %index61 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %93, i32 0, i32 6, !dbg !2933
  %94 = load i32, i32* %index61, align 8, !dbg !2933
  %95 = load i32, i32* %k, align 4, !dbg !2934
  %call62 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %92, i32 %94, i32 0, i32 %95), !dbg !2935
  %co63 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call62, i32 0, i32 1, !dbg !2936
  %arraydecay64 = getelementptr inbounds [3 x float], [3 x float]* %co63, i64 0, i64 0, !dbg !2935
  store float* %arraydecay64, float** %va, align 8, !dbg !2937
  %96 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !2938
  %97 = load %struct.BoundVert*, %struct.BoundVert** %weld2, align 8, !dbg !2939
  %index65 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %97, i32 0, i32 6, !dbg !2940
  %98 = load i32, i32* %index65, align 8, !dbg !2940
  %99 = load i32, i32* %ns, align 4, !dbg !2941
  %100 = load i32, i32* %k, align 4, !dbg !2942
  %sub = sub nsw i32 %99, %100, !dbg !2943
  %call66 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %96, i32 %98, i32 0, i32 %sub), !dbg !2944
  %co67 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call66, i32 0, i32 1, !dbg !2945
  %arraydecay68 = getelementptr inbounds [3 x float], [3 x float]* %co67, i64 0, i64 0, !dbg !2944
  store float* %arraydecay68, float** %vb, align 8, !dbg !2946
  %101 = load %struct.BoundVert*, %struct.BoundVert** %weld1, align 8, !dbg !2947
  %profile69 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %101, i32 0, i32 7, !dbg !2949
  %super_r = getelementptr inbounds %struct.Profile, %struct.Profile* %profile69, i32 0, i32 0, !dbg !2950
  %102 = load float, float* %super_r, align 8, !dbg !2950
  %cmp70 = fcmp oeq float %102, 1.000000e+00, !dbg !2951
  br i1 %cmp70, label %land.lhs.true72, label %if.else79, !dbg !2952

land.lhs.true72:                                  ; preds = %for.body60
  %103 = load %struct.BoundVert*, %struct.BoundVert** %weld2, align 8, !dbg !2953
  %profile73 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %103, i32 0, i32 7, !dbg !2954
  %super_r74 = getelementptr inbounds %struct.Profile, %struct.Profile* %profile73, i32 0, i32 0, !dbg !2955
  %104 = load float, float* %super_r74, align 8, !dbg !2955
  %cmp75 = fcmp une float %104, 1.000000e+00, !dbg !2956
  br i1 %cmp75, label %if.then77, label %if.else79, !dbg !2957

if.then77:                                        ; preds = %land.lhs.true72
  %arraydecay78 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !2958
  %105 = load float*, float** %vb, align 8, !dbg !2960
  call void @copy_v3_v3(float* %arraydecay78, float* %105), !dbg !2961
  br label %if.end94, !dbg !2962

if.else79:                                        ; preds = %land.lhs.true72, %for.body60
  %106 = load %struct.BoundVert*, %struct.BoundVert** %weld2, align 8, !dbg !2963
  %profile80 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %106, i32 0, i32 7, !dbg !2965
  %super_r81 = getelementptr inbounds %struct.Profile, %struct.Profile* %profile80, i32 0, i32 0, !dbg !2966
  %107 = load float, float* %super_r81, align 8, !dbg !2966
  %cmp82 = fcmp oeq float %107, 1.000000e+00, !dbg !2967
  br i1 %cmp82, label %land.lhs.true84, label %if.else91, !dbg !2968

land.lhs.true84:                                  ; preds = %if.else79
  %108 = load %struct.BoundVert*, %struct.BoundVert** %weld1, align 8, !dbg !2969
  %profile85 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %108, i32 0, i32 7, !dbg !2970
  %super_r86 = getelementptr inbounds %struct.Profile, %struct.Profile* %profile85, i32 0, i32 0, !dbg !2971
  %109 = load float, float* %super_r86, align 8, !dbg !2971
  %cmp87 = fcmp une float %109, 1.000000e+00, !dbg !2972
  br i1 %cmp87, label %if.then89, label %if.else91, !dbg !2973

if.then89:                                        ; preds = %land.lhs.true84
  %arraydecay90 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !2974
  %110 = load float*, float** %va, align 8, !dbg !2976
  call void @copy_v3_v3(float* %arraydecay90, float* %110), !dbg !2977
  br label %if.end93, !dbg !2978

if.else91:                                        ; preds = %land.lhs.true84, %if.else79
  %arraydecay92 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !2979
  %111 = load float*, float** %va, align 8, !dbg !2981
  %112 = load float*, float** %vb, align 8, !dbg !2982
  call void @mid_v3_v3v3(float* %arraydecay92, float* %111, float* %112), !dbg !2983
  br label %if.end93

if.end93:                                         ; preds = %if.else91, %if.then89
  br label %if.end94

if.end94:                                         ; preds = %if.end93, %if.then77
  %113 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !2984
  %114 = load %struct.BoundVert*, %struct.BoundVert** %weld1, align 8, !dbg !2985
  %index95 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %114, i32 0, i32 6, !dbg !2986
  %115 = load i32, i32* %index95, align 8, !dbg !2986
  %116 = load i32, i32* %k, align 4, !dbg !2987
  %call96 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %113, i32 %115, i32 0, i32 %116), !dbg !2988
  %co97 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call96, i32 0, i32 1, !dbg !2989
  %arraydecay98 = getelementptr inbounds [3 x float], [3 x float]* %co97, i64 0, i64 0, !dbg !2988
  %arraydecay99 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !2990
  call void @copy_v3_v3(float* %arraydecay98, float* %arraydecay99), !dbg !2991
  %117 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !2992
  %118 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !2993
  %119 = load %struct.BoundVert*, %struct.BoundVert** %weld1, align 8, !dbg !2994
  %index100 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %119, i32 0, i32 6, !dbg !2995
  %120 = load i32, i32* %index100, align 8, !dbg !2995
  %121 = load i32, i32* %k, align 4, !dbg !2996
  %122 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !2997
  %v101 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %122, i32 0, i32 0, !dbg !2998
  %123 = load %struct.BMVert*, %struct.BMVert** %v101, align 8, !dbg !2998
  call void @create_mesh_bmvert(%struct.BMesh* %117, %struct.VMesh* %118, i32 %120, i32 0, i32 %121, %struct.BMVert* %123), !dbg !2999
  br label %for.inc102, !dbg !3000

for.inc102:                                       ; preds = %if.end94
  %124 = load i32, i32* %k, align 4, !dbg !3001
  %inc103 = add nsw i32 %124, 1, !dbg !3001
  store i32 %inc103, i32* %k, align 4, !dbg !3001
  br label %for.cond57, !dbg !3002, !llvm.loop !3003

for.end104:                                       ; preds = %for.cond57
  store i32 1, i32* %k, align 4, !dbg !3005
  br label %for.cond105, !dbg !3007

for.cond105:                                      ; preds = %for.inc112, %for.end104
  %125 = load i32, i32* %k, align 4, !dbg !3008
  %126 = load i32, i32* %ns, align 4, !dbg !3010
  %cmp106 = icmp slt i32 %125, %126, !dbg !3011
  br i1 %cmp106, label %for.body108, label %for.end114, !dbg !3012

for.body108:                                      ; preds = %for.cond105
  %127 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !3013
  %128 = load %struct.BoundVert*, %struct.BoundVert** %weld2, align 8, !dbg !3014
  %index109 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %128, i32 0, i32 6, !dbg !3015
  %129 = load i32, i32* %index109, align 8, !dbg !3015
  %130 = load i32, i32* %ns, align 4, !dbg !3016
  %131 = load i32, i32* %k, align 4, !dbg !3017
  %sub110 = sub nsw i32 %130, %131, !dbg !3018
  %132 = load %struct.BoundVert*, %struct.BoundVert** %weld1, align 8, !dbg !3019
  %index111 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %132, i32 0, i32 6, !dbg !3020
  %133 = load i32, i32* %index111, align 8, !dbg !3020
  %134 = load i32, i32* %k, align 4, !dbg !3021
  call void @copy_mesh_vert(%struct.VMesh* %127, i32 %129, i32 0, i32 %sub110, i32 %133, i32 0, i32 %134), !dbg !3022
  br label %for.inc112, !dbg !3022

for.inc112:                                       ; preds = %for.body108
  %135 = load i32, i32* %k, align 4, !dbg !3023
  %inc113 = add nsw i32 %135, 1, !dbg !3023
  store i32 %inc113, i32* %k, align 4, !dbg !3023
  br label %for.cond105, !dbg !3024, !llvm.loop !3025

for.end114:                                       ; preds = %for.cond105
  br label %if.end115, !dbg !3027

if.end115:                                        ; preds = %for.end114, %do.end53
  %136 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !3028
  %mesh_kind116 = getelementptr inbounds %struct.VMesh, %struct.VMesh* %136, i32 0, i32 4, !dbg !3029
  %137 = load i32, i32* %mesh_kind116, align 8, !dbg !3029
  switch i32 %137, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb126
    i32 2, label %sw.bb128
    i32 3, label %sw.bb129
    i32 4, label %sw.bb130
  ], !dbg !3030

sw.bb:                                            ; preds = %if.end115
  %138 = load i32, i32* %n, align 4, !dbg !3031
  %cmp117 = icmp eq i32 %138, 2, !dbg !3034
  br i1 %cmp117, label %land.lhs.true119, label %if.end125, !dbg !3035

land.lhs.true119:                                 ; preds = %sw.bb
  %139 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !3036
  %v120 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %139, i32 0, i32 0, !dbg !3037
  %140 = load %struct.BMVert*, %struct.BMVert** %v120, align 8, !dbg !3037
  %call121 = call i32 @BM_vert_face_count(%struct.BMVert* %140), !dbg !3038
  %cmp122 = icmp eq i32 %call121, 0, !dbg !3039
  br i1 %cmp122, label %if.then124, label %if.end125, !dbg !3040

if.then124:                                       ; preds = %land.lhs.true119
  %141 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !3041
  %142 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !3042
  call void @bevel_build_one_wire(%struct.BMesh* %141, %struct.BevVert* %142), !dbg !3043
  br label %if.end125, !dbg !3043

if.end125:                                        ; preds = %if.then124, %land.lhs.true119, %sw.bb
  br label %sw.epilog, !dbg !3044

sw.bb126:                                         ; preds = %if.end115
  %143 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !3045
  %144 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !3046
  %145 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !3047
  %call127 = call %struct.BMFace* @bevel_build_poly(%struct.BevelParams* %143, %struct.BMesh* %144, %struct.BevVert* %145), !dbg !3048
  br label %sw.epilog, !dbg !3049

sw.bb128:                                         ; preds = %if.end115
  %146 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !3050
  %147 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !3051
  %148 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !3052
  call void @bevel_build_rings(%struct.BevelParams* %146, %struct.BMesh* %147, %struct.BevVert* %148), !dbg !3053
  br label %sw.epilog, !dbg !3054

sw.bb129:                                         ; preds = %if.end115
  %149 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !3055
  %150 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !3056
  %151 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !3057
  call void @bevel_build_trifan(%struct.BevelParams* %149, %struct.BMesh* %150, %struct.BevVert* %151), !dbg !3058
  br label %sw.epilog, !dbg !3059

sw.bb130:                                         ; preds = %if.end115
  %152 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !3060
  %153 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !3061
  %154 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !3062
  call void @bevel_build_quadstrip(%struct.BevelParams* %152, %struct.BMesh* %153, %struct.BevVert* %154), !dbg !3063
  br label %sw.epilog, !dbg !3064

sw.epilog:                                        ; preds = %if.end115, %sw.bb130, %sw.bb129, %sw.bb128, %sw.bb126, %if.end125
  ret void, !dbg !3065
}

; Function Attrs: noinline nounwind uwtable
define internal void @bevel_build_edge_polygons(%struct.BMesh* %bm, %struct.BevelParams* %bp, %struct.BMEdge* %bme) #0 !dbg !3066 {
entry:
  %bm.addr = alloca %struct.BMesh*, align 8
  %bp.addr = alloca %struct.BevelParams*, align 8
  %bme.addr = alloca %struct.BMEdge*, align 8
  %bv1 = alloca %struct.BevVert*, align 8
  %bv2 = alloca %struct.BevVert*, align 8
  %bmv1 = alloca %struct.BMVert*, align 8
  %bmv2 = alloca %struct.BMVert*, align 8
  %bmv3 = alloca %struct.BMVert*, align 8
  %bmv4 = alloca %struct.BMVert*, align 8
  %bmv1i = alloca %struct.BMVert*, align 8
  %bmv2i = alloca %struct.BMVert*, align 8
  %bmv3i = alloca %struct.BMVert*, align 8
  %bmv4i = alloca %struct.BMVert*, align 8
  %vm1 = alloca %struct.VMesh*, align 8
  %vm2 = alloca %struct.VMesh*, align 8
  %e1 = alloca %struct.EdgeHalf*, align 8
  %e2 = alloca %struct.EdgeHalf*, align 8
  %bme1 = alloca %struct.BMEdge*, align 8
  %bme2 = alloca %struct.BMEdge*, align 8
  %f1 = alloca %struct.BMFace*, align 8
  %f2 = alloca %struct.BMFace*, align 8
  %f = alloca %struct.BMFace*, align 8
  %k = alloca i32, align 4
  %nseg = alloca i32, align 4
  %i1 = alloca i32, align 4
  %i2 = alloca i32, align 4
  %odd = alloca i32, align 4
  %mid = alloca i32, align 4
  %mat_nr = alloca i32, align 4
  store %struct.BMesh* %bm, %struct.BMesh** %bm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMesh** %bm.addr, metadata !3069, metadata !DIExpression()), !dbg !3070
  store %struct.BevelParams* %bp, %struct.BevelParams** %bp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BevelParams** %bp.addr, metadata !3071, metadata !DIExpression()), !dbg !3072
  store %struct.BMEdge* %bme, %struct.BMEdge** %bme.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMEdge** %bme.addr, metadata !3073, metadata !DIExpression()), !dbg !3074
  call void @llvm.dbg.declare(metadata %struct.BevVert** %bv1, metadata !3075, metadata !DIExpression()), !dbg !3076
  call void @llvm.dbg.declare(metadata %struct.BevVert** %bv2, metadata !3077, metadata !DIExpression()), !dbg !3078
  call void @llvm.dbg.declare(metadata %struct.BMVert** %bmv1, metadata !3079, metadata !DIExpression()), !dbg !3080
  call void @llvm.dbg.declare(metadata %struct.BMVert** %bmv2, metadata !3081, metadata !DIExpression()), !dbg !3082
  call void @llvm.dbg.declare(metadata %struct.BMVert** %bmv3, metadata !3083, metadata !DIExpression()), !dbg !3084
  call void @llvm.dbg.declare(metadata %struct.BMVert** %bmv4, metadata !3085, metadata !DIExpression()), !dbg !3086
  call void @llvm.dbg.declare(metadata %struct.BMVert** %bmv1i, metadata !3087, metadata !DIExpression()), !dbg !3088
  call void @llvm.dbg.declare(metadata %struct.BMVert** %bmv2i, metadata !3089, metadata !DIExpression()), !dbg !3090
  call void @llvm.dbg.declare(metadata %struct.BMVert** %bmv3i, metadata !3091, metadata !DIExpression()), !dbg !3092
  call void @llvm.dbg.declare(metadata %struct.BMVert** %bmv4i, metadata !3093, metadata !DIExpression()), !dbg !3094
  call void @llvm.dbg.declare(metadata %struct.VMesh** %vm1, metadata !3095, metadata !DIExpression()), !dbg !3096
  call void @llvm.dbg.declare(metadata %struct.VMesh** %vm2, metadata !3097, metadata !DIExpression()), !dbg !3098
  call void @llvm.dbg.declare(metadata %struct.EdgeHalf** %e1, metadata !3099, metadata !DIExpression()), !dbg !3100
  call void @llvm.dbg.declare(metadata %struct.EdgeHalf** %e2, metadata !3101, metadata !DIExpression()), !dbg !3102
  call void @llvm.dbg.declare(metadata %struct.BMEdge** %bme1, metadata !3103, metadata !DIExpression()), !dbg !3104
  call void @llvm.dbg.declare(metadata %struct.BMEdge** %bme2, metadata !3105, metadata !DIExpression()), !dbg !3106
  call void @llvm.dbg.declare(metadata %struct.BMFace** %f1, metadata !3107, metadata !DIExpression()), !dbg !3108
  call void @llvm.dbg.declare(metadata %struct.BMFace** %f2, metadata !3109, metadata !DIExpression()), !dbg !3110
  call void @llvm.dbg.declare(metadata %struct.BMFace** %f, metadata !3111, metadata !DIExpression()), !dbg !3112
  call void @llvm.dbg.declare(metadata i32* %k, metadata !3113, metadata !DIExpression()), !dbg !3114
  call void @llvm.dbg.declare(metadata i32* %nseg, metadata !3115, metadata !DIExpression()), !dbg !3116
  call void @llvm.dbg.declare(metadata i32* %i1, metadata !3117, metadata !DIExpression()), !dbg !3118
  call void @llvm.dbg.declare(metadata i32* %i2, metadata !3119, metadata !DIExpression()), !dbg !3120
  call void @llvm.dbg.declare(metadata i32* %odd, metadata !3121, metadata !DIExpression()), !dbg !3122
  call void @llvm.dbg.declare(metadata i32* %mid, metadata !3123, metadata !DIExpression()), !dbg !3124
  call void @llvm.dbg.declare(metadata i32* %mat_nr, metadata !3125, metadata !DIExpression()), !dbg !3126
  %0 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !3127
  %mat_nr1 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %0, i32 0, i32 13, !dbg !3128
  %1 = load i32, i32* %mat_nr1, align 4, !dbg !3128
  store i32 %1, i32* %mat_nr, align 4, !dbg !3126
  %2 = load %struct.BMEdge*, %struct.BMEdge** %bme.addr, align 8, !dbg !3129
  %call = call zeroext i8 @BM_edge_is_manifold(%struct.BMEdge* %2), !dbg !3131
  %tobool = icmp ne i8 %call, 0, !dbg !3131
  br i1 %tobool, label %if.end, label %if.then, !dbg !3132

if.then:                                          ; preds = %entry
  br label %if.end69, !dbg !3133

if.end:                                           ; preds = %entry
  %3 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !3134
  %4 = load %struct.BMEdge*, %struct.BMEdge** %bme.addr, align 8, !dbg !3135
  %v1 = getelementptr inbounds %struct.BMEdge, %struct.BMEdge* %4, i32 0, i32 2, !dbg !3136
  %5 = load %struct.BMVert*, %struct.BMVert** %v1, align 8, !dbg !3136
  %call2 = call %struct.BevVert* @find_bevvert(%struct.BevelParams* %3, %struct.BMVert* %5), !dbg !3137
  store %struct.BevVert* %call2, %struct.BevVert** %bv1, align 8, !dbg !3138
  %6 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !3139
  %7 = load %struct.BMEdge*, %struct.BMEdge** %bme.addr, align 8, !dbg !3140
  %v2 = getelementptr inbounds %struct.BMEdge, %struct.BMEdge* %7, i32 0, i32 3, !dbg !3141
  %8 = load %struct.BMVert*, %struct.BMVert** %v2, align 8, !dbg !3141
  %call3 = call %struct.BevVert* @find_bevvert(%struct.BevelParams* %6, %struct.BMVert* %8), !dbg !3142
  store %struct.BevVert* %call3, %struct.BevVert** %bv2, align 8, !dbg !3143
  %9 = load %struct.BevVert*, %struct.BevVert** %bv1, align 8, !dbg !3144
  %10 = load %struct.BMEdge*, %struct.BMEdge** %bme.addr, align 8, !dbg !3145
  %call4 = call %struct.EdgeHalf* @find_edge_half(%struct.BevVert* %9, %struct.BMEdge* %10), !dbg !3146
  store %struct.EdgeHalf* %call4, %struct.EdgeHalf** %e1, align 8, !dbg !3147
  %11 = load %struct.BevVert*, %struct.BevVert** %bv2, align 8, !dbg !3148
  %12 = load %struct.BMEdge*, %struct.BMEdge** %bme.addr, align 8, !dbg !3149
  %call5 = call %struct.EdgeHalf* @find_edge_half(%struct.BevVert* %11, %struct.BMEdge* %12), !dbg !3150
  store %struct.EdgeHalf* %call5, %struct.EdgeHalf** %e2, align 8, !dbg !3151
  %13 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e1, align 8, !dbg !3152
  %seg = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %13, i32 0, i32 7, !dbg !3153
  %14 = load i32, i32* %seg, align 8, !dbg !3153
  store i32 %14, i32* %nseg, align 4, !dbg !3154
  %15 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e1, align 8, !dbg !3155
  %leftv = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %15, i32 0, i32 5, !dbg !3156
  %16 = load %struct.BoundVert*, %struct.BoundVert** %leftv, align 8, !dbg !3156
  %nv = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %16, i32 0, i32 2, !dbg !3157
  %v = getelementptr inbounds %struct.NewVert, %struct.NewVert* %nv, i32 0, i32 0, !dbg !3158
  %17 = load %struct.BMVert*, %struct.BMVert** %v, align 8, !dbg !3158
  store %struct.BMVert* %17, %struct.BMVert** %bmv1, align 8, !dbg !3159
  %18 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e1, align 8, !dbg !3160
  %rightv = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %18, i32 0, i32 6, !dbg !3161
  %19 = load %struct.BoundVert*, %struct.BoundVert** %rightv, align 8, !dbg !3161
  %nv6 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %19, i32 0, i32 2, !dbg !3162
  %v7 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %nv6, i32 0, i32 0, !dbg !3163
  %20 = load %struct.BMVert*, %struct.BMVert** %v7, align 8, !dbg !3163
  store %struct.BMVert* %20, %struct.BMVert** %bmv4, align 8, !dbg !3164
  %21 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e2, align 8, !dbg !3165
  %rightv8 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %21, i32 0, i32 6, !dbg !3166
  %22 = load %struct.BoundVert*, %struct.BoundVert** %rightv8, align 8, !dbg !3166
  %nv9 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %22, i32 0, i32 2, !dbg !3167
  %v10 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %nv9, i32 0, i32 0, !dbg !3168
  %23 = load %struct.BMVert*, %struct.BMVert** %v10, align 8, !dbg !3168
  store %struct.BMVert* %23, %struct.BMVert** %bmv2, align 8, !dbg !3169
  %24 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e2, align 8, !dbg !3170
  %leftv11 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %24, i32 0, i32 5, !dbg !3171
  %25 = load %struct.BoundVert*, %struct.BoundVert** %leftv11, align 8, !dbg !3171
  %nv12 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %25, i32 0, i32 2, !dbg !3172
  %v13 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %nv12, i32 0, i32 0, !dbg !3173
  %26 = load %struct.BMVert*, %struct.BMVert** %v13, align 8, !dbg !3173
  store %struct.BMVert* %26, %struct.BMVert** %bmv3, align 8, !dbg !3174
  %27 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e1, align 8, !dbg !3175
  %fprev = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %27, i32 0, i32 3, !dbg !3176
  %28 = load %struct.BMFace*, %struct.BMFace** %fprev, align 8, !dbg !3176
  store %struct.BMFace* %28, %struct.BMFace** %f1, align 8, !dbg !3177
  %29 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e1, align 8, !dbg !3178
  %fnext = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %29, i32 0, i32 4, !dbg !3179
  %30 = load %struct.BMFace*, %struct.BMFace** %fnext, align 8, !dbg !3179
  store %struct.BMFace* %30, %struct.BMFace** %f2, align 8, !dbg !3180
  %31 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e1, align 8, !dbg !3181
  %leftv14 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %31, i32 0, i32 5, !dbg !3182
  %32 = load %struct.BoundVert*, %struct.BoundVert** %leftv14, align 8, !dbg !3182
  %index = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %32, i32 0, i32 6, !dbg !3183
  %33 = load i32, i32* %index, align 8, !dbg !3183
  store i32 %33, i32* %i1, align 4, !dbg !3184
  %34 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e2, align 8, !dbg !3185
  %leftv15 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %34, i32 0, i32 5, !dbg !3186
  %35 = load %struct.BoundVert*, %struct.BoundVert** %leftv15, align 8, !dbg !3186
  %index16 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %35, i32 0, i32 6, !dbg !3187
  %36 = load i32, i32* %index16, align 8, !dbg !3187
  store i32 %36, i32* %i2, align 4, !dbg !3188
  %37 = load %struct.BevVert*, %struct.BevVert** %bv1, align 8, !dbg !3189
  %vmesh = getelementptr inbounds %struct.BevVert, %struct.BevVert* %37, i32 0, i32 9, !dbg !3190
  %38 = load %struct.VMesh*, %struct.VMesh** %vmesh, align 8, !dbg !3190
  store %struct.VMesh* %38, %struct.VMesh** %vm1, align 8, !dbg !3191
  %39 = load %struct.BevVert*, %struct.BevVert** %bv2, align 8, !dbg !3192
  %vmesh17 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %39, i32 0, i32 9, !dbg !3193
  %40 = load %struct.VMesh*, %struct.VMesh** %vmesh17, align 8, !dbg !3193
  store %struct.VMesh* %40, %struct.VMesh** %vm2, align 8, !dbg !3194
  %41 = load i32, i32* %nseg, align 4, !dbg !3195
  %cmp = icmp eq i32 %41, 1, !dbg !3197
  br i1 %cmp, label %if.then18, label %if.else, !dbg !3198

if.then18:                                        ; preds = %if.end
  %42 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !3199
  %43 = load %struct.BMVert*, %struct.BMVert** %bmv1, align 8, !dbg !3201
  %44 = load %struct.BMVert*, %struct.BMVert** %bmv2, align 8, !dbg !3202
  %45 = load %struct.BMVert*, %struct.BMVert** %bmv3, align 8, !dbg !3203
  %46 = load %struct.BMVert*, %struct.BMVert** %bmv4, align 8, !dbg !3204
  %47 = load %struct.BMFace*, %struct.BMFace** %f1, align 8, !dbg !3205
  %48 = load %struct.BMFace*, %struct.BMFace** %f2, align 8, !dbg !3206
  %49 = load i32, i32* %mat_nr, align 4, !dbg !3207
  %50 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e1, align 8, !dbg !3208
  %is_seam = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %50, i32 0, i32 14, !dbg !3209
  %51 = load i8, i8* %is_seam, align 2, !dbg !3209
  %call19 = call %struct.BMFace* @bev_create_quad_straddle(%struct.BMesh* %42, %struct.BMVert* %43, %struct.BMVert* %44, %struct.BMVert* %45, %struct.BMVert* %46, %struct.BMFace* %47, %struct.BMFace* %48, i32 %49, i8 zeroext %51), !dbg !3210
  br label %if.end44, !dbg !3211

if.else:                                          ; preds = %if.end
  %52 = load %struct.BMVert*, %struct.BMVert** %bmv1, align 8, !dbg !3212
  store %struct.BMVert* %52, %struct.BMVert** %bmv1i, align 8, !dbg !3214
  %53 = load %struct.BMVert*, %struct.BMVert** %bmv2, align 8, !dbg !3215
  store %struct.BMVert* %53, %struct.BMVert** %bmv2i, align 8, !dbg !3216
  %54 = load i32, i32* %nseg, align 4, !dbg !3217
  %rem = srem i32 %54, 2, !dbg !3218
  store i32 %rem, i32* %odd, align 4, !dbg !3219
  %55 = load i32, i32* %nseg, align 4, !dbg !3220
  %div = sdiv i32 %55, 2, !dbg !3221
  store i32 %div, i32* %mid, align 4, !dbg !3222
  store i32 1, i32* %k, align 4, !dbg !3223
  br label %for.cond, !dbg !3225

for.cond:                                         ; preds = %for.inc, %if.else
  %56 = load i32, i32* %k, align 4, !dbg !3226
  %57 = load i32, i32* %nseg, align 4, !dbg !3228
  %cmp20 = icmp sle i32 %56, %57, !dbg !3229
  br i1 %cmp20, label %for.body, label %for.end, !dbg !3230

for.body:                                         ; preds = %for.cond
  %58 = load %struct.VMesh*, %struct.VMesh** %vm1, align 8, !dbg !3231
  %59 = load i32, i32* %i1, align 4, !dbg !3233
  %60 = load i32, i32* %k, align 4, !dbg !3234
  %call21 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %58, i32 %59, i32 0, i32 %60), !dbg !3235
  %v22 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call21, i32 0, i32 0, !dbg !3236
  %61 = load %struct.BMVert*, %struct.BMVert** %v22, align 8, !dbg !3236
  store %struct.BMVert* %61, %struct.BMVert** %bmv4i, align 8, !dbg !3237
  %62 = load %struct.VMesh*, %struct.VMesh** %vm2, align 8, !dbg !3238
  %63 = load i32, i32* %i2, align 4, !dbg !3239
  %64 = load i32, i32* %nseg, align 4, !dbg !3240
  %65 = load i32, i32* %k, align 4, !dbg !3241
  %sub = sub nsw i32 %64, %65, !dbg !3242
  %call23 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %62, i32 %63, i32 0, i32 %sub), !dbg !3243
  %v24 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call23, i32 0, i32 0, !dbg !3244
  %66 = load %struct.BMVert*, %struct.BMVert** %v24, align 8, !dbg !3244
  store %struct.BMVert* %66, %struct.BMVert** %bmv3i, align 8, !dbg !3245
  %67 = load i32, i32* %odd, align 4, !dbg !3246
  %tobool25 = icmp ne i32 %67, 0, !dbg !3246
  br i1 %tobool25, label %land.lhs.true, label %if.else30, !dbg !3248

land.lhs.true:                                    ; preds = %for.body
  %68 = load i32, i32* %k, align 4, !dbg !3249
  %69 = load i32, i32* %mid, align 4, !dbg !3250
  %add = add nsw i32 %69, 1, !dbg !3251
  %cmp26 = icmp eq i32 %68, %add, !dbg !3252
  br i1 %cmp26, label %if.then27, label %if.else30, !dbg !3253

if.then27:                                        ; preds = %land.lhs.true
  %70 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !3254
  %71 = load %struct.BMVert*, %struct.BMVert** %bmv1i, align 8, !dbg !3256
  %72 = load %struct.BMVert*, %struct.BMVert** %bmv2i, align 8, !dbg !3257
  %73 = load %struct.BMVert*, %struct.BMVert** %bmv3i, align 8, !dbg !3258
  %74 = load %struct.BMVert*, %struct.BMVert** %bmv4i, align 8, !dbg !3259
  %75 = load %struct.BMFace*, %struct.BMFace** %f1, align 8, !dbg !3260
  %76 = load %struct.BMFace*, %struct.BMFace** %f2, align 8, !dbg !3261
  %77 = load i32, i32* %mat_nr, align 4, !dbg !3262
  %78 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e1, align 8, !dbg !3263
  %is_seam28 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %78, i32 0, i32 14, !dbg !3264
  %79 = load i8, i8* %is_seam28, align 2, !dbg !3264
  %call29 = call %struct.BMFace* @bev_create_quad_straddle(%struct.BMesh* %70, %struct.BMVert* %71, %struct.BMVert* %72, %struct.BMVert* %73, %struct.BMVert* %74, %struct.BMFace* %75, %struct.BMFace* %76, i32 %77, i8 zeroext %79), !dbg !3265
  br label %if.end33, !dbg !3266

if.else30:                                        ; preds = %land.lhs.true, %for.body
  %80 = load i32, i32* %k, align 4, !dbg !3267
  %81 = load i32, i32* %mid, align 4, !dbg !3269
  %cmp31 = icmp sle i32 %80, %81, !dbg !3270
  br i1 %cmp31, label %cond.true, label %cond.false, !dbg !3271

cond.true:                                        ; preds = %if.else30
  %82 = load %struct.BMFace*, %struct.BMFace** %f1, align 8, !dbg !3272
  br label %cond.end, !dbg !3271

cond.false:                                       ; preds = %if.else30
  %83 = load %struct.BMFace*, %struct.BMFace** %f2, align 8, !dbg !3273
  br label %cond.end, !dbg !3271

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.BMFace* [ %82, %cond.true ], [ %83, %cond.false ], !dbg !3271
  store %struct.BMFace* %cond, %struct.BMFace** %f, align 8, !dbg !3274
  %84 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !3275
  %85 = load %struct.BMVert*, %struct.BMVert** %bmv1i, align 8, !dbg !3276
  %86 = load %struct.BMVert*, %struct.BMVert** %bmv2i, align 8, !dbg !3277
  %87 = load %struct.BMVert*, %struct.BMVert** %bmv3i, align 8, !dbg !3278
  %88 = load %struct.BMVert*, %struct.BMVert** %bmv4i, align 8, !dbg !3279
  %89 = load %struct.BMFace*, %struct.BMFace** %f, align 8, !dbg !3280
  %90 = load i32, i32* %mat_nr, align 4, !dbg !3281
  %call32 = call %struct.BMFace* @bev_create_quad_tri(%struct.BMesh* %84, %struct.BMVert* %85, %struct.BMVert* %86, %struct.BMVert* %87, %struct.BMVert* %88, %struct.BMFace* %89, i32 %90, i8 zeroext 1), !dbg !3282
  br label %if.end33

if.end33:                                         ; preds = %cond.end, %if.then27
  %91 = load %struct.BMVert*, %struct.BMVert** %bmv4i, align 8, !dbg !3283
  store %struct.BMVert* %91, %struct.BMVert** %bmv1i, align 8, !dbg !3284
  %92 = load %struct.BMVert*, %struct.BMVert** %bmv3i, align 8, !dbg !3285
  store %struct.BMVert* %92, %struct.BMVert** %bmv2i, align 8, !dbg !3286
  br label %for.inc, !dbg !3287

for.inc:                                          ; preds = %if.end33
  %93 = load i32, i32* %k, align 4, !dbg !3288
  %inc = add nsw i32 %93, 1, !dbg !3288
  store i32 %inc, i32* %k, align 4, !dbg !3288
  br label %for.cond, !dbg !3289, !llvm.loop !3290

for.end:                                          ; preds = %for.cond
  %94 = load i32, i32* %odd, align 4, !dbg !3292
  %tobool34 = icmp ne i32 %94, 0, !dbg !3292
  br i1 %tobool34, label %if.end43, label %land.lhs.true35, !dbg !3294

land.lhs.true35:                                  ; preds = %for.end
  %95 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e1, align 8, !dbg !3295
  %is_seam36 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %95, i32 0, i32 14, !dbg !3296
  %96 = load i8, i8* %is_seam36, align 2, !dbg !3296
  %tobool37 = icmp ne i8 %96, 0, !dbg !3295
  br i1 %tobool37, label %if.end43, label %if.then38, !dbg !3297

if.then38:                                        ; preds = %land.lhs.true35
  %97 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !3298
  %98 = load %struct.VMesh*, %struct.VMesh** %vm1, align 8, !dbg !3300
  %99 = load i32, i32* %i1, align 4, !dbg !3301
  %100 = load i32, i32* %mid, align 4, !dbg !3302
  %call39 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %98, i32 %99, i32 0, i32 %100), !dbg !3303
  %v40 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call39, i32 0, i32 0, !dbg !3304
  %101 = load %struct.BMVert*, %struct.BMVert** %v40, align 8, !dbg !3304
  call void @bev_merge_uvs(%struct.BMesh* %97, %struct.BMVert* %101), !dbg !3305
  %102 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !3306
  %103 = load %struct.VMesh*, %struct.VMesh** %vm2, align 8, !dbg !3307
  %104 = load i32, i32* %i2, align 4, !dbg !3308
  %105 = load i32, i32* %mid, align 4, !dbg !3309
  %call41 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %103, i32 %104, i32 0, i32 %105), !dbg !3310
  %v42 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call41, i32 0, i32 0, !dbg !3311
  %106 = load %struct.BMVert*, %struct.BMVert** %v42, align 8, !dbg !3311
  call void @bev_merge_uvs(%struct.BMesh* %102, %struct.BMVert* %106), !dbg !3312
  br label %if.end43, !dbg !3313

if.end43:                                         ; preds = %if.then38, %land.lhs.true35, %for.end
  br label %if.end44

if.end44:                                         ; preds = %if.end43, %if.then18
  %107 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e1, align 8, !dbg !3314
  %is_seam45 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %107, i32 0, i32 14, !dbg !3316
  %108 = load i8, i8* %is_seam45, align 2, !dbg !3316
  %tobool46 = icmp ne i8 %108, 0, !dbg !3314
  br i1 %tobool46, label %if.end51, label %land.lhs.true47, !dbg !3317

land.lhs.true47:                                  ; preds = %if.end44
  %109 = load %struct.BevVert*, %struct.BevVert** %bv1, align 8, !dbg !3318
  %vmesh48 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %109, i32 0, i32 9, !dbg !3319
  %110 = load %struct.VMesh*, %struct.VMesh** %vmesh48, align 8, !dbg !3319
  %mesh_kind = getelementptr inbounds %struct.VMesh, %struct.VMesh* %110, i32 0, i32 4, !dbg !3320
  %111 = load i32, i32* %mesh_kind, align 8, !dbg !3320
  %cmp49 = icmp eq i32 %111, 0, !dbg !3321
  br i1 %cmp49, label %if.then50, label %if.end51, !dbg !3322

if.then50:                                        ; preds = %land.lhs.true47
  %112 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !3323
  %113 = load %struct.BevVert*, %struct.BevVert** %bv1, align 8, !dbg !3324
  %114 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e1, align 8, !dbg !3325
  call void @bev_merge_end_uvs(%struct.BMesh* %112, %struct.BevVert* %113, %struct.EdgeHalf* %114), !dbg !3326
  br label %if.end51, !dbg !3326

if.end51:                                         ; preds = %if.then50, %land.lhs.true47, %if.end44
  %115 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e2, align 8, !dbg !3327
  %is_seam52 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %115, i32 0, i32 14, !dbg !3329
  %116 = load i8, i8* %is_seam52, align 2, !dbg !3329
  %tobool53 = icmp ne i8 %116, 0, !dbg !3327
  br i1 %tobool53, label %if.end59, label %land.lhs.true54, !dbg !3330

land.lhs.true54:                                  ; preds = %if.end51
  %117 = load %struct.BevVert*, %struct.BevVert** %bv2, align 8, !dbg !3331
  %vmesh55 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %117, i32 0, i32 9, !dbg !3332
  %118 = load %struct.VMesh*, %struct.VMesh** %vmesh55, align 8, !dbg !3332
  %mesh_kind56 = getelementptr inbounds %struct.VMesh, %struct.VMesh* %118, i32 0, i32 4, !dbg !3333
  %119 = load i32, i32* %mesh_kind56, align 8, !dbg !3333
  %cmp57 = icmp eq i32 %119, 0, !dbg !3334
  br i1 %cmp57, label %if.then58, label %if.end59, !dbg !3335

if.then58:                                        ; preds = %land.lhs.true54
  %120 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !3336
  %121 = load %struct.BevVert*, %struct.BevVert** %bv2, align 8, !dbg !3337
  %122 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e2, align 8, !dbg !3338
  call void @bev_merge_end_uvs(%struct.BMesh* %120, %struct.BevVert* %121, %struct.EdgeHalf* %122), !dbg !3339
  br label %if.end59, !dbg !3339

if.end59:                                         ; preds = %if.then58, %land.lhs.true54, %if.end51
  %123 = load %struct.BMVert*, %struct.BMVert** %bmv1, align 8, !dbg !3340
  %124 = load %struct.BMVert*, %struct.BMVert** %bmv2, align 8, !dbg !3341
  %call60 = call %struct.BMEdge* @BM_edge_exists(%struct.BMVert* %123, %struct.BMVert* %124), !dbg !3342
  store %struct.BMEdge* %call60, %struct.BMEdge** %bme1, align 8, !dbg !3343
  %125 = load %struct.BMVert*, %struct.BMVert** %bmv3, align 8, !dbg !3344
  %126 = load %struct.BMVert*, %struct.BMVert** %bmv4, align 8, !dbg !3345
  %call61 = call %struct.BMEdge* @BM_edge_exists(%struct.BMVert* %125, %struct.BMVert* %126), !dbg !3346
  store %struct.BMEdge* %call61, %struct.BMEdge** %bme2, align 8, !dbg !3347
  %127 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !3348
  %128 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !3349
  %129 = load %struct.BMEdge*, %struct.BMEdge** %bme.addr, align 8, !dbg !3350
  %130 = bitcast %struct.BMEdge* %129 to i8*, !dbg !3350
  %131 = load %struct.BMEdge*, %struct.BMEdge** %bme1, align 8, !dbg !3351
  %132 = bitcast %struct.BMEdge* %131 to i8*, !dbg !3351
  call void @BM_elem_attrs_copy(%struct.BMesh* %127, %struct.BMesh* %128, i8* %130, i8* %132), !dbg !3352
  %133 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !3353
  %134 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !3354
  %135 = load %struct.BMEdge*, %struct.BMEdge** %bme.addr, align 8, !dbg !3355
  %136 = bitcast %struct.BMEdge* %135 to i8*, !dbg !3355
  %137 = load %struct.BMEdge*, %struct.BMEdge** %bme2, align 8, !dbg !3356
  %138 = bitcast %struct.BMEdge* %137 to i8*, !dbg !3356
  call void @BM_elem_attrs_copy(%struct.BMesh* %133, %struct.BMesh* %134, i8* %136, i8* %138), !dbg !3357
  %139 = load %struct.BevVert*, %struct.BevVert** %bv1, align 8, !dbg !3358
  %call62 = call zeroext i8 @bevvert_is_weld_cross(%struct.BevVert* %139), !dbg !3360
  %tobool63 = icmp ne i8 %call62, 0, !dbg !3360
  br i1 %tobool63, label %if.then64, label %if.end65, !dbg !3361

if.then64:                                        ; preds = %if.end59
  %140 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !3362
  %141 = load %struct.BevVert*, %struct.BevVert** %bv1, align 8, !dbg !3364
  %142 = load %struct.VMesh*, %struct.VMesh** %vm1, align 8, !dbg !3365
  %143 = load i32, i32* %i1, align 4, !dbg !3366
  %144 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e1, align 8, !dbg !3367
  call void @weld_cross_attrs_copy(%struct.BMesh* %140, %struct.BevVert* %141, %struct.VMesh* %142, i32 %143, %struct.EdgeHalf* %144), !dbg !3368
  br label %if.end65, !dbg !3369

if.end65:                                         ; preds = %if.then64, %if.end59
  %145 = load %struct.BevVert*, %struct.BevVert** %bv2, align 8, !dbg !3370
  %call66 = call zeroext i8 @bevvert_is_weld_cross(%struct.BevVert* %145), !dbg !3372
  %tobool67 = icmp ne i8 %call66, 0, !dbg !3372
  br i1 %tobool67, label %if.then68, label %if.end69, !dbg !3373

if.then68:                                        ; preds = %if.end65
  %146 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !3374
  %147 = load %struct.BevVert*, %struct.BevVert** %bv2, align 8, !dbg !3376
  %148 = load %struct.VMesh*, %struct.VMesh** %vm2, align 8, !dbg !3377
  %149 = load i32, i32* %i2, align 4, !dbg !3378
  %150 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e2, align 8, !dbg !3379
  call void @weld_cross_attrs_copy(%struct.BMesh* %146, %struct.BevVert* %147, %struct.VMesh* %148, i32 %149, %struct.EdgeHalf* %150), !dbg !3380
  br label %if.end69, !dbg !3381

if.end69:                                         ; preds = %if.then, %if.then68, %if.end65
  ret void, !dbg !3382
}

; Function Attrs: noinline nounwind uwtable
define internal void @bevel_rebuild_existing_polygons(%struct.BMesh* %bm, %struct.BevelParams* %bp, %struct.BMVert* %v) #0 !dbg !3383 {
entry:
  %bm.addr = alloca %struct.BMesh*, align 8
  %bp.addr = alloca %struct.BevelParams*, align 8
  %v.addr = alloca %struct.BMVert*, align 8
  %faces_stack = alloca [16 x i8*], align 16
  %faces_len = alloca i32, align 4
  %f_index = alloca i32, align 4
  %faces = alloca %struct.BMFace**, align 8
  %f = alloca %struct.BMFace*, align 8
  store %struct.BMesh* %bm, %struct.BMesh** %bm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMesh** %bm.addr, metadata !3386, metadata !DIExpression()), !dbg !3387
  store %struct.BevelParams* %bp, %struct.BevelParams** %bp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BevelParams** %bp.addr, metadata !3388, metadata !DIExpression()), !dbg !3389
  store %struct.BMVert* %v, %struct.BMVert** %v.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMVert** %v.addr, metadata !3390, metadata !DIExpression()), !dbg !3391
  call void @llvm.dbg.declare(metadata [16 x i8*]* %faces_stack, metadata !3392, metadata !DIExpression()), !dbg !3394
  call void @llvm.dbg.declare(metadata i32* %faces_len, metadata !3395, metadata !DIExpression()), !dbg !3396
  call void @llvm.dbg.declare(metadata i32* %f_index, metadata !3397, metadata !DIExpression()), !dbg !3398
  call void @llvm.dbg.declare(metadata %struct.BMFace*** %faces, metadata !3399, metadata !DIExpression()), !dbg !3400
  %0 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !3401
  %1 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !3402
  %2 = bitcast %struct.BMVert* %1 to i8*, !dbg !3402
  %arraydecay = getelementptr inbounds [16 x i8*], [16 x i8*]* %faces_stack, i64 0, i64 0, !dbg !3403
  %call = call i8* @BM_iter_as_arrayN(%struct.BMesh* %0, i8 zeroext 5, i8* %2, i32* %faces_len, i8** %arraydecay, i32 16), !dbg !3404
  %3 = bitcast i8* %call to %struct.BMFace**, !dbg !3404
  store %struct.BMFace** %3, %struct.BMFace*** %faces, align 8, !dbg !3400
  %4 = load %struct.BMFace**, %struct.BMFace*** %faces, align 8, !dbg !3405
  %cmp = icmp ne %struct.BMFace** %4, null, !dbg !3405
  br i1 %cmp, label %if.then, label %if.end8, !dbg !3407

if.then:                                          ; preds = %entry
  store i32 0, i32* %f_index, align 4, !dbg !3408
  br label %for.cond, !dbg !3411

for.cond:                                         ; preds = %for.inc, %if.then
  %5 = load i32, i32* %f_index, align 4, !dbg !3412
  %6 = load i32, i32* %faces_len, align 4, !dbg !3414
  %cmp1 = icmp slt i32 %5, %6, !dbg !3415
  br i1 %cmp1, label %for.body, label %for.end, !dbg !3416

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.BMFace** %f, metadata !3417, metadata !DIExpression()), !dbg !3419
  %7 = load %struct.BMFace**, %struct.BMFace*** %faces, align 8, !dbg !3420
  %8 = load i32, i32* %f_index, align 4, !dbg !3421
  %idxprom = sext i32 %8 to i64, !dbg !3420
  %arrayidx = getelementptr inbounds %struct.BMFace*, %struct.BMFace** %7, i64 %idxprom, !dbg !3420
  %9 = load %struct.BMFace*, %struct.BMFace** %arrayidx, align 8, !dbg !3420
  store %struct.BMFace* %9, %struct.BMFace** %f, align 8, !dbg !3419
  %10 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !3422
  %11 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !3424
  %12 = load %struct.BMFace*, %struct.BMFace** %f, align 8, !dbg !3425
  %call2 = call zeroext i8 @bev_rebuild_polygon(%struct.BMesh* %10, %struct.BevelParams* %11, %struct.BMFace* %12), !dbg !3426
  %tobool = icmp ne i8 %call2, 0, !dbg !3426
  br i1 %tobool, label %if.then3, label %if.end, !dbg !3427

if.then3:                                         ; preds = %for.body
  %13 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !3428
  %14 = load %struct.BMFace*, %struct.BMFace** %f, align 8, !dbg !3430
  call void @BM_face_kill(%struct.BMesh* %13, %struct.BMFace* %14), !dbg !3431
  br label %if.end, !dbg !3432

if.end:                                           ; preds = %if.then3, %for.body
  br label %for.inc, !dbg !3433

for.inc:                                          ; preds = %if.end
  %15 = load i32, i32* %f_index, align 4, !dbg !3434
  %inc = add nsw i32 %15, 1, !dbg !3434
  store i32 %inc, i32* %f_index, align 4, !dbg !3434
  br label %for.cond, !dbg !3435, !llvm.loop !3436

for.end:                                          ; preds = %for.cond
  %16 = load %struct.BMFace**, %struct.BMFace*** %faces, align 8, !dbg !3438
  %arraydecay4 = getelementptr inbounds [16 x i8*], [16 x i8*]* %faces_stack, i64 0, i64 0, !dbg !3440
  %17 = bitcast i8** %arraydecay4 to %struct.BMFace**, !dbg !3441
  %cmp5 = icmp ne %struct.BMFace** %16, %17, !dbg !3442
  br i1 %cmp5, label %if.then6, label %if.end7, !dbg !3443

if.then6:                                         ; preds = %for.end
  %18 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !3444
  %19 = load %struct.BMFace**, %struct.BMFace*** %faces, align 8, !dbg !3446
  %20 = bitcast %struct.BMFace** %19 to i8*, !dbg !3446
  call void %18(i8* %20), !dbg !3444
  br label %if.end7, !dbg !3447

if.end7:                                          ; preds = %if.then6, %for.end
  br label %if.end8, !dbg !3448

if.end8:                                          ; preds = %if.end7, %entry
  ret void, !dbg !3449
}

; Function Attrs: noinline nounwind uwtable
define internal void @bevel_reattach_wires(%struct.BMesh* %bm, %struct.BevelParams* %bp, %struct.BMVert* %v) #0 !dbg !3450 {
entry:
  %bm.addr = alloca %struct.BMesh*, align 8
  %bp.addr = alloca %struct.BevelParams*, align 8
  %v.addr = alloca %struct.BMVert*, align 8
  %e = alloca %struct.BMEdge*, align 8
  %vclosest = alloca %struct.BMVert*, align 8
  %vother = alloca %struct.BMVert*, align 8
  %votherclosest = alloca %struct.BMVert*, align 8
  %bv = alloca %struct.BevVert*, align 8
  %bvother = alloca %struct.BevVert*, align 8
  %bndv = alloca %struct.BoundVert*, align 8
  %bndvother = alloca %struct.BoundVert*, align 8
  %d = alloca float, align 4
  %dclosest = alloca float, align 4
  %i = alloca i32, align 4
  store %struct.BMesh* %bm, %struct.BMesh** %bm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMesh** %bm.addr, metadata !3451, metadata !DIExpression()), !dbg !3452
  store %struct.BevelParams* %bp, %struct.BevelParams** %bp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BevelParams** %bp.addr, metadata !3453, metadata !DIExpression()), !dbg !3454
  store %struct.BMVert* %v, %struct.BMVert** %v.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMVert** %v.addr, metadata !3455, metadata !DIExpression()), !dbg !3456
  call void @llvm.dbg.declare(metadata %struct.BMEdge** %e, metadata !3457, metadata !DIExpression()), !dbg !3458
  call void @llvm.dbg.declare(metadata %struct.BMVert** %vclosest, metadata !3459, metadata !DIExpression()), !dbg !3460
  call void @llvm.dbg.declare(metadata %struct.BMVert** %vother, metadata !3461, metadata !DIExpression()), !dbg !3462
  call void @llvm.dbg.declare(metadata %struct.BMVert** %votherclosest, metadata !3463, metadata !DIExpression()), !dbg !3464
  call void @llvm.dbg.declare(metadata %struct.BevVert** %bv, metadata !3465, metadata !DIExpression()), !dbg !3466
  call void @llvm.dbg.declare(metadata %struct.BevVert** %bvother, metadata !3467, metadata !DIExpression()), !dbg !3468
  call void @llvm.dbg.declare(metadata %struct.BoundVert** %bndv, metadata !3469, metadata !DIExpression()), !dbg !3470
  call void @llvm.dbg.declare(metadata %struct.BoundVert** %bndvother, metadata !3471, metadata !DIExpression()), !dbg !3472
  call void @llvm.dbg.declare(metadata float* %d, metadata !3473, metadata !DIExpression()), !dbg !3474
  call void @llvm.dbg.declare(metadata float* %dclosest, metadata !3475, metadata !DIExpression()), !dbg !3476
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3477, metadata !DIExpression()), !dbg !3478
  %0 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !3479
  %1 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !3480
  %call = call %struct.BevVert* @find_bevvert(%struct.BevelParams* %0, %struct.BMVert* %1), !dbg !3481
  store %struct.BevVert* %call, %struct.BevVert** %bv, align 8, !dbg !3482
  %2 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !3483
  %tobool = icmp ne %struct.BevVert* %2, null, !dbg !3483
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !3485

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !3486
  %wirecount = getelementptr inbounds %struct.BevVert, %struct.BevVert* %3, i32 0, i32 3, !dbg !3487
  %4 = load i32, i32* %wirecount, align 8, !dbg !3487
  %cmp = icmp eq i32 %4, 0, !dbg !3488
  br i1 %cmp, label %if.then, label %lor.lhs.false1, !dbg !3489

lor.lhs.false1:                                   ; preds = %lor.lhs.false
  %5 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !3490
  %vmesh = getelementptr inbounds %struct.BevVert, %struct.BevVert* %5, i32 0, i32 9, !dbg !3491
  %6 = load %struct.VMesh*, %struct.VMesh** %vmesh, align 8, !dbg !3491
  %tobool2 = icmp ne %struct.VMesh* %6, null, !dbg !3490
  br i1 %tobool2, label %if.end, label %if.then, !dbg !3492

if.then:                                          ; preds = %lor.lhs.false1, %lor.lhs.false, %entry
  br label %for.end, !dbg !3493

if.end:                                           ; preds = %lor.lhs.false1
  store i32 0, i32* %i, align 4, !dbg !3494
  br label %for.cond, !dbg !3496

for.cond:                                         ; preds = %for.inc, %if.end
  %7 = load i32, i32* %i, align 4, !dbg !3497
  %8 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !3499
  %wirecount3 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %8, i32 0, i32 3, !dbg !3500
  %9 = load i32, i32* %wirecount3, align 8, !dbg !3500
  %cmp4 = icmp slt i32 %7, %9, !dbg !3501
  br i1 %cmp4, label %for.body, label %for.end, !dbg !3502

for.body:                                         ; preds = %for.cond
  %10 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !3503
  %wire_edges = getelementptr inbounds %struct.BevVert, %struct.BevVert* %10, i32 0, i32 8, !dbg !3505
  %11 = load %struct.BMEdge**, %struct.BMEdge*** %wire_edges, align 8, !dbg !3505
  %12 = load i32, i32* %i, align 4, !dbg !3506
  %idxprom = sext i32 %12 to i64, !dbg !3503
  %arrayidx = getelementptr inbounds %struct.BMEdge*, %struct.BMEdge** %11, i64 %idxprom, !dbg !3503
  %13 = load %struct.BMEdge*, %struct.BMEdge** %arrayidx, align 8, !dbg !3503
  store %struct.BMEdge* %13, %struct.BMEdge** %e, align 8, !dbg !3507
  store %struct.BMVert* null, %struct.BMVert** %vclosest, align 8, !dbg !3508
  store float 0x47EFFFFFE0000000, float* %dclosest, align 4, !dbg !3509
  store %struct.BMVert* null, %struct.BMVert** %votherclosest, align 8, !dbg !3510
  %14 = load %struct.BMEdge*, %struct.BMEdge** %e, align 8, !dbg !3511
  %15 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !3512
  %call5 = call %struct.BMVert* @BM_edge_other_vert(%struct.BMEdge* %14, %struct.BMVert* %15), !dbg !3513
  store %struct.BMVert* %call5, %struct.BMVert** %vother, align 8, !dbg !3514
  store %struct.BevVert* null, %struct.BevVert** %bvother, align 8, !dbg !3515
  %16 = load %struct.BMVert*, %struct.BMVert** %vother, align 8, !dbg !3516
  %head = getelementptr inbounds %struct.BMVert, %struct.BMVert* %16, i32 0, i32 0, !dbg !3516
  %call6 = call zeroext i8 @_bm_elem_flag_test(%struct.BMHeader* %head, i8 zeroext 16), !dbg !3516
  %tobool7 = icmp ne i8 %call6, 0, !dbg !3516
  br i1 %tobool7, label %if.then8, label %if.end16, !dbg !3518

if.then8:                                         ; preds = %for.body
  %17 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !3519
  %18 = load %struct.BMVert*, %struct.BMVert** %vother, align 8, !dbg !3521
  %call9 = call %struct.BevVert* @find_bevvert(%struct.BevelParams* %17, %struct.BMVert* %18), !dbg !3522
  store %struct.BevVert* %call9, %struct.BevVert** %bvother, align 8, !dbg !3523
  %19 = load %struct.BevVert*, %struct.BevVert** %bvother, align 8, !dbg !3524
  %tobool10 = icmp ne %struct.BevVert* %19, null, !dbg !3524
  br i1 %tobool10, label %lor.lhs.false11, label %if.then14, !dbg !3526

lor.lhs.false11:                                  ; preds = %if.then8
  %20 = load %struct.BevVert*, %struct.BevVert** %bvother, align 8, !dbg !3527
  %vmesh12 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %20, i32 0, i32 9, !dbg !3528
  %21 = load %struct.VMesh*, %struct.VMesh** %vmesh12, align 8, !dbg !3528
  %tobool13 = icmp ne %struct.VMesh* %21, null, !dbg !3527
  br i1 %tobool13, label %if.end15, label %if.then14, !dbg !3529

if.then14:                                        ; preds = %lor.lhs.false11, %if.then8
  br label %for.end, !dbg !3530

if.end15:                                         ; preds = %lor.lhs.false11
  br label %if.end16, !dbg !3531

if.end16:                                         ; preds = %if.end15, %for.body
  %22 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !3532
  %vmesh17 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %22, i32 0, i32 9, !dbg !3533
  %23 = load %struct.VMesh*, %struct.VMesh** %vmesh17, align 8, !dbg !3533
  %boundstart = getelementptr inbounds %struct.VMesh, %struct.VMesh* %23, i32 0, i32 1, !dbg !3534
  %24 = load %struct.BoundVert*, %struct.BoundVert** %boundstart, align 8, !dbg !3534
  store %struct.BoundVert* %24, %struct.BoundVert** %bndv, align 8, !dbg !3535
  br label %do.body, !dbg !3536

do.body:                                          ; preds = %do.cond49, %if.end16
  %25 = load %struct.BevVert*, %struct.BevVert** %bvother, align 8, !dbg !3537
  %tobool18 = icmp ne %struct.BevVert* %25, null, !dbg !3537
  br i1 %tobool18, label %if.then19, label %if.else, !dbg !3540

if.then19:                                        ; preds = %do.body
  %26 = load %struct.BevVert*, %struct.BevVert** %bvother, align 8, !dbg !3541
  %vmesh20 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %26, i32 0, i32 9, !dbg !3543
  %27 = load %struct.VMesh*, %struct.VMesh** %vmesh20, align 8, !dbg !3543
  %boundstart21 = getelementptr inbounds %struct.VMesh, %struct.VMesh* %27, i32 0, i32 1, !dbg !3544
  %28 = load %struct.BoundVert*, %struct.BoundVert** %boundstart21, align 8, !dbg !3544
  store %struct.BoundVert* %28, %struct.BoundVert** %bndvother, align 8, !dbg !3545
  br label %do.body22, !dbg !3546

do.body22:                                        ; preds = %do.cond, %if.then19
  %29 = load %struct.BoundVert*, %struct.BoundVert** %bndvother, align 8, !dbg !3547
  %nv = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %29, i32 0, i32 2, !dbg !3549
  %co = getelementptr inbounds %struct.NewVert, %struct.NewVert* %nv, i32 0, i32 1, !dbg !3550
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !3547
  %30 = load %struct.BoundVert*, %struct.BoundVert** %bndv, align 8, !dbg !3551
  %nv23 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %30, i32 0, i32 2, !dbg !3552
  %co24 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %nv23, i32 0, i32 1, !dbg !3553
  %arraydecay25 = getelementptr inbounds [3 x float], [3 x float]* %co24, i64 0, i64 0, !dbg !3551
  %call26 = call float @len_squared_v3v3(float* %arraydecay, float* %arraydecay25), !dbg !3554
  store float %call26, float* %d, align 4, !dbg !3555
  %31 = load float, float* %d, align 4, !dbg !3556
  %32 = load float, float* %dclosest, align 4, !dbg !3558
  %cmp27 = fcmp olt float %31, %32, !dbg !3559
  br i1 %cmp27, label %if.then28, label %if.end33, !dbg !3560

if.then28:                                        ; preds = %do.body22
  %33 = load %struct.BoundVert*, %struct.BoundVert** %bndv, align 8, !dbg !3561
  %nv29 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %33, i32 0, i32 2, !dbg !3563
  %v30 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %nv29, i32 0, i32 0, !dbg !3564
  %34 = load %struct.BMVert*, %struct.BMVert** %v30, align 8, !dbg !3564
  store %struct.BMVert* %34, %struct.BMVert** %vclosest, align 8, !dbg !3565
  %35 = load %struct.BoundVert*, %struct.BoundVert** %bndvother, align 8, !dbg !3566
  %nv31 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %35, i32 0, i32 2, !dbg !3567
  %v32 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %nv31, i32 0, i32 0, !dbg !3568
  %36 = load %struct.BMVert*, %struct.BMVert** %v32, align 8, !dbg !3568
  store %struct.BMVert* %36, %struct.BMVert** %votherclosest, align 8, !dbg !3569
  %37 = load float, float* %d, align 4, !dbg !3570
  store float %37, float* %dclosest, align 4, !dbg !3571
  br label %if.end33, !dbg !3572

if.end33:                                         ; preds = %if.then28, %do.body22
  br label %do.cond, !dbg !3573

do.cond:                                          ; preds = %if.end33
  %38 = load %struct.BoundVert*, %struct.BoundVert** %bndvother, align 8, !dbg !3574
  %next = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %38, i32 0, i32 0, !dbg !3575
  %39 = load %struct.BoundVert*, %struct.BoundVert** %next, align 8, !dbg !3575
  store %struct.BoundVert* %39, %struct.BoundVert** %bndvother, align 8, !dbg !3576
  %40 = load %struct.BevVert*, %struct.BevVert** %bvother, align 8, !dbg !3577
  %vmesh34 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %40, i32 0, i32 9, !dbg !3578
  %41 = load %struct.VMesh*, %struct.VMesh** %vmesh34, align 8, !dbg !3578
  %boundstart35 = getelementptr inbounds %struct.VMesh, %struct.VMesh* %41, i32 0, i32 1, !dbg !3579
  %42 = load %struct.BoundVert*, %struct.BoundVert** %boundstart35, align 8, !dbg !3579
  %cmp36 = icmp ne %struct.BoundVert* %39, %42, !dbg !3580
  br i1 %cmp36, label %do.body22, label %do.end, !dbg !3573, !llvm.loop !3581

do.end:                                           ; preds = %do.cond
  br label %if.end48, !dbg !3583

if.else:                                          ; preds = %do.body
  %43 = load %struct.BMVert*, %struct.BMVert** %vother, align 8, !dbg !3584
  %co37 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %43, i32 0, i32 2, !dbg !3586
  %arraydecay38 = getelementptr inbounds [3 x float], [3 x float]* %co37, i64 0, i64 0, !dbg !3584
  %44 = load %struct.BoundVert*, %struct.BoundVert** %bndv, align 8, !dbg !3587
  %nv39 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %44, i32 0, i32 2, !dbg !3588
  %co40 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %nv39, i32 0, i32 1, !dbg !3589
  %arraydecay41 = getelementptr inbounds [3 x float], [3 x float]* %co40, i64 0, i64 0, !dbg !3587
  %call42 = call float @len_squared_v3v3(float* %arraydecay38, float* %arraydecay41), !dbg !3590
  store float %call42, float* %d, align 4, !dbg !3591
  %45 = load float, float* %d, align 4, !dbg !3592
  %46 = load float, float* %dclosest, align 4, !dbg !3594
  %cmp43 = fcmp olt float %45, %46, !dbg !3595
  br i1 %cmp43, label %if.then44, label %if.end47, !dbg !3596

if.then44:                                        ; preds = %if.else
  %47 = load %struct.BoundVert*, %struct.BoundVert** %bndv, align 8, !dbg !3597
  %nv45 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %47, i32 0, i32 2, !dbg !3599
  %v46 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %nv45, i32 0, i32 0, !dbg !3600
  %48 = load %struct.BMVert*, %struct.BMVert** %v46, align 8, !dbg !3600
  store %struct.BMVert* %48, %struct.BMVert** %vclosest, align 8, !dbg !3601
  %49 = load %struct.BMVert*, %struct.BMVert** %vother, align 8, !dbg !3602
  store %struct.BMVert* %49, %struct.BMVert** %votherclosest, align 8, !dbg !3603
  %50 = load float, float* %d, align 4, !dbg !3604
  store float %50, float* %dclosest, align 4, !dbg !3605
  br label %if.end47, !dbg !3606

if.end47:                                         ; preds = %if.then44, %if.else
  br label %if.end48

if.end48:                                         ; preds = %if.end47, %do.end
  br label %do.cond49, !dbg !3607

do.cond49:                                        ; preds = %if.end48
  %51 = load %struct.BoundVert*, %struct.BoundVert** %bndv, align 8, !dbg !3608
  %next50 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %51, i32 0, i32 0, !dbg !3609
  %52 = load %struct.BoundVert*, %struct.BoundVert** %next50, align 8, !dbg !3609
  store %struct.BoundVert* %52, %struct.BoundVert** %bndv, align 8, !dbg !3610
  %53 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !3611
  %vmesh51 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %53, i32 0, i32 9, !dbg !3612
  %54 = load %struct.VMesh*, %struct.VMesh** %vmesh51, align 8, !dbg !3612
  %boundstart52 = getelementptr inbounds %struct.VMesh, %struct.VMesh* %54, i32 0, i32 1, !dbg !3613
  %55 = load %struct.BoundVert*, %struct.BoundVert** %boundstart52, align 8, !dbg !3613
  %cmp53 = icmp ne %struct.BoundVert* %52, %55, !dbg !3614
  br i1 %cmp53, label %do.body, label %do.end54, !dbg !3607, !llvm.loop !3615

do.end54:                                         ; preds = %do.cond49
  %56 = load %struct.BMVert*, %struct.BMVert** %vclosest, align 8, !dbg !3617
  %tobool55 = icmp ne %struct.BMVert* %56, null, !dbg !3617
  br i1 %tobool55, label %if.then56, label %if.end58, !dbg !3619

if.then56:                                        ; preds = %do.end54
  %57 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !3620
  %58 = load %struct.BMVert*, %struct.BMVert** %vclosest, align 8, !dbg !3621
  %59 = load %struct.BMVert*, %struct.BMVert** %votherclosest, align 8, !dbg !3622
  %60 = load %struct.BMEdge*, %struct.BMEdge** %e, align 8, !dbg !3623
  %call57 = call %struct.BMEdge* @BM_edge_create(%struct.BMesh* %57, %struct.BMVert* %58, %struct.BMVert* %59, %struct.BMEdge* %60, i32 2), !dbg !3624
  br label %if.end58, !dbg !3624

if.end58:                                         ; preds = %if.then56, %do.end54
  br label %for.inc, !dbg !3625

for.inc:                                          ; preds = %if.end58
  %61 = load i32, i32* %i, align 4, !dbg !3626
  %inc = add nsw i32 %61, 1, !dbg !3626
  store i32 %inc, i32* %i, align 4, !dbg !3626
  br label %for.cond, !dbg !3627, !llvm.loop !3628

for.end:                                          ; preds = %if.then, %if.then14, %for.cond
  ret void, !dbg !3630
}

declare dso_local void @BM_vert_kill(%struct.BMesh*, %struct.BMVert*) #3

declare dso_local void @BLI_ghash_free(%struct.GHash*, void (i8*)*, void (i8*)*) #3

declare dso_local void @BLI_memarena_free(%struct.MemArena*) #3

declare dso_local i8* @BLI_memarena_alloc(%struct.MemArena*, i64) #3

; Function Attrs: noinline nounwind uwtable
define internal void @find_even_superellipse_params(i32 %n, float %r, float* %r_params) #0 !dbg !3631 {
entry:
  %n.addr = alloca i32, align 4
  %r.addr = alloca float, align 4
  %r_params.addr = alloca float*, align 8
  %d2low = alloca float, align 4
  %d2high = alloca float, align 4
  %d2 = alloca float, align 4
  %d2final = alloca float, align 4
  %u = alloca float, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %n2 = alloca i32, align 4
  %maxiters = alloca i32, align 4
  %d2tol = alloca float, align 4
  %umax = alloca float, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !3634, metadata !DIExpression()), !dbg !3635
  store float %r, float* %r.addr, align 4
  call void @llvm.dbg.declare(metadata float* %r.addr, metadata !3636, metadata !DIExpression()), !dbg !3637
  store float* %r_params, float** %r_params.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r_params.addr, metadata !3638, metadata !DIExpression()), !dbg !3639
  call void @llvm.dbg.declare(metadata float* %d2low, metadata !3640, metadata !DIExpression()), !dbg !3641
  call void @llvm.dbg.declare(metadata float* %d2high, metadata !3642, metadata !DIExpression()), !dbg !3643
  call void @llvm.dbg.declare(metadata float* %d2, metadata !3644, metadata !DIExpression()), !dbg !3645
  call void @llvm.dbg.declare(metadata float* %d2final, metadata !3646, metadata !DIExpression()), !dbg !3647
  call void @llvm.dbg.declare(metadata float* %u, metadata !3648, metadata !DIExpression()), !dbg !3649
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3650, metadata !DIExpression()), !dbg !3651
  call void @llvm.dbg.declare(metadata i32* %j, metadata !3652, metadata !DIExpression()), !dbg !3653
  call void @llvm.dbg.declare(metadata i32* %n2, metadata !3654, metadata !DIExpression()), !dbg !3655
  call void @llvm.dbg.declare(metadata i32* %maxiters, metadata !3656, metadata !DIExpression()), !dbg !3657
  store i32 40, i32* %maxiters, align 4, !dbg !3657
  call void @llvm.dbg.declare(metadata float* %d2tol, metadata !3658, metadata !DIExpression()), !dbg !3659
  store float 0x3EB0C6F7A0000000, float* %d2tol, align 4, !dbg !3659
  call void @llvm.dbg.declare(metadata float* %umax, metadata !3660, metadata !DIExpression()), !dbg !3661
  store float 2.000000e+00, float* %umax, align 4, !dbg !3661
  %0 = load float, float* %r.addr, align 4, !dbg !3662
  %cmp = fcmp oeq float %0, 2.000000e+00, !dbg !3664
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !3665

lor.lhs.false:                                    ; preds = %entry
  %1 = load float, float* %r.addr, align 4, !dbg !3666
  %cmp1 = fcmp oeq float %1, 1.000000e+00, !dbg !3667
  br i1 %cmp1, label %if.then, label %lor.lhs.false2, !dbg !3668

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %2 = load i32, i32* %n.addr, align 4, !dbg !3669
  %rem = srem i32 %2, 2, !dbg !3670
  %cmp3 = icmp eq i32 %rem, 0, !dbg !3671
  br i1 %cmp3, label %land.lhs.true, label %if.end, !dbg !3672

land.lhs.true:                                    ; preds = %lor.lhs.false2
  %3 = load float, float* %r.addr, align 4, !dbg !3673
  %cmp4 = fcmp oeq float %3, 0.000000e+00, !dbg !3674
  br i1 %cmp4, label %if.then, label %lor.lhs.false5, !dbg !3675

lor.lhs.false5:                                   ; preds = %land.lhs.true
  %4 = load float, float* %r.addr, align 4, !dbg !3676
  %cmp6 = fcmp oeq float %4, 4.000000e+00, !dbg !3677
  br i1 %cmp6, label %if.then, label %if.end, !dbg !3678

if.then:                                          ; preds = %lor.lhs.false5, %land.lhs.true, %lor.lhs.false, %entry
  store i32 0, i32* %i, align 4, !dbg !3679
  br label %for.cond, !dbg !3682

for.cond:                                         ; preds = %for.inc, %if.then
  %5 = load i32, i32* %i, align 4, !dbg !3683
  %6 = load i32, i32* %n.addr, align 4, !dbg !3685
  %cmp7 = icmp sle i32 %5, %6, !dbg !3686
  br i1 %cmp7, label %for.body, label %for.end, !dbg !3687

for.body:                                         ; preds = %for.cond
  %7 = load i32, i32* %i, align 4, !dbg !3688
  %conv = sitofp i32 %7 to float, !dbg !3688
  %mul = fmul float %conv, 2.000000e+00, !dbg !3689
  %8 = load i32, i32* %n.addr, align 4, !dbg !3690
  %conv8 = sitofp i32 %8 to float, !dbg !3691
  %div = fdiv float %mul, %conv8, !dbg !3692
  %9 = load float*, float** %r_params.addr, align 8, !dbg !3693
  %10 = load i32, i32* %i, align 4, !dbg !3694
  %idxprom = sext i32 %10 to i64, !dbg !3693
  %arrayidx = getelementptr inbounds float, float* %9, i64 %idxprom, !dbg !3693
  store float %div, float* %arrayidx, align 4, !dbg !3695
  br label %for.inc, !dbg !3693

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4, !dbg !3696
  %inc = add nsw i32 %11, 1, !dbg !3696
  store i32 %inc, i32* %i, align 4, !dbg !3696
  br label %for.cond, !dbg !3697, !llvm.loop !3698

for.end:                                          ; preds = %for.cond
  br label %return, !dbg !3700

if.end:                                           ; preds = %lor.lhs.false5, %lor.lhs.false2
  %12 = load float, float* %r.addr, align 4, !dbg !3701
  %cmp9 = fcmp oeq float %12, 0.000000e+00, !dbg !3703
  br i1 %cmp9, label %if.then14, label %lor.lhs.false11, !dbg !3704

lor.lhs.false11:                                  ; preds = %if.end
  %13 = load float, float* %r.addr, align 4, !dbg !3705
  %cmp12 = fcmp oeq float %13, 4.000000e+00, !dbg !3706
  br i1 %cmp12, label %if.then14, label %if.end37, !dbg !3707

if.then14:                                        ; preds = %lor.lhs.false11, %if.end
  %14 = load i32, i32* %n.addr, align 4, !dbg !3708
  %div15 = sdiv i32 %14, 2, !dbg !3710
  store i32 %div15, i32* %n2, align 4, !dbg !3711
  %15 = load i32, i32* %n2, align 4, !dbg !3712
  %conv16 = sitofp i32 %15 to float, !dbg !3712
  %mul17 = fmul float 2.000000e+00, %conv16, !dbg !3713
  %sub = fsub float %mul17, 0x3FF6A09E60000000, !dbg !3714
  %16 = load i32, i32* %n2, align 4, !dbg !3715
  %conv18 = sitofp i32 %16 to float, !dbg !3715
  %mul19 = fmul float 2.000000e+00, %conv18, !dbg !3716
  %17 = load i32, i32* %n2, align 4, !dbg !3717
  %conv20 = sitofp i32 %17 to float, !dbg !3717
  %mul21 = fmul float %mul19, %conv20, !dbg !3718
  %sub22 = fsub float %mul21, 1.000000e+00, !dbg !3719
  %div23 = fdiv float %sub, %sub22, !dbg !3720
  store float %div23, float* %u, align 4, !dbg !3721
  store i32 0, i32* %i, align 4, !dbg !3722
  br label %for.cond24, !dbg !3724

for.cond24:                                       ; preds = %for.inc32, %if.then14
  %18 = load i32, i32* %i, align 4, !dbg !3725
  %19 = load i32, i32* %n.addr, align 4, !dbg !3727
  %cmp25 = icmp slt i32 %18, %19, !dbg !3728
  br i1 %cmp25, label %for.body27, label %for.end34, !dbg !3729

for.body27:                                       ; preds = %for.cond24
  %20 = load i32, i32* %i, align 4, !dbg !3730
  %conv28 = sitofp i32 %20 to float, !dbg !3730
  %21 = load float, float* %u, align 4, !dbg !3731
  %mul29 = fmul float %conv28, %21, !dbg !3732
  %22 = load float*, float** %r_params.addr, align 8, !dbg !3733
  %23 = load i32, i32* %i, align 4, !dbg !3734
  %idxprom30 = sext i32 %23 to i64, !dbg !3733
  %arrayidx31 = getelementptr inbounds float, float* %22, i64 %idxprom30, !dbg !3733
  store float %mul29, float* %arrayidx31, align 4, !dbg !3735
  br label %for.inc32, !dbg !3733

for.inc32:                                        ; preds = %for.body27
  %24 = load i32, i32* %i, align 4, !dbg !3736
  %inc33 = add nsw i32 %24, 1, !dbg !3736
  store i32 %inc33, i32* %i, align 4, !dbg !3736
  br label %for.cond24, !dbg !3737, !llvm.loop !3738

for.end34:                                        ; preds = %for.cond24
  %25 = load float*, float** %r_params.addr, align 8, !dbg !3740
  %26 = load i32, i32* %n.addr, align 4, !dbg !3741
  %idxprom35 = sext i32 %26 to i64, !dbg !3740
  %arrayidx36 = getelementptr inbounds float, float* %25, i64 %idxprom35, !dbg !3740
  store float 2.000000e+00, float* %arrayidx36, align 4, !dbg !3742
  br label %if.end37, !dbg !3743

if.end37:                                         ; preds = %for.end34, %lor.lhs.false11
  %27 = load i32, i32* %n.addr, align 4, !dbg !3744
  %28 = load i32, i32* %n.addr, align 4, !dbg !3745
  %mul38 = mul nsw i32 %27, %28, !dbg !3746
  %conv39 = sitofp i32 %mul38 to float, !dbg !3747
  %div40 = fdiv float 2.000000e+00, %conv39, !dbg !3748
  store float %div40, float* %d2low, align 4, !dbg !3749
  %29 = load float, float* %d2low, align 4, !dbg !3750
  %mul41 = fmul float 2.000000e+00, %29, !dbg !3751
  store float %mul41, float* %d2high, align 4, !dbg !3752
  store i32 0, i32* %i, align 4, !dbg !3753
  br label %for.cond42, !dbg !3755

for.cond42:                                       ; preds = %for.inc76, %if.end37
  %30 = load i32, i32* %i, align 4, !dbg !3756
  %cmp43 = icmp slt i32 %30, 40, !dbg !3758
  br i1 %cmp43, label %land.rhs, label %land.end, !dbg !3759

land.rhs:                                         ; preds = %for.cond42
  %31 = load float, float* %d2high, align 4, !dbg !3760
  %32 = load float, float* %d2low, align 4, !dbg !3761
  %sub45 = fsub float %31, %32, !dbg !3762
  %33 = call float @llvm.fabs.f32(float %sub45), !dbg !3763
  %cmp46 = fcmp ogt float %33, 0x3EB0C6F7A0000000, !dbg !3764
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond42
  %34 = phi i1 [ false, %for.cond42 ], [ %cmp46, %land.rhs ], !dbg !3765
  br i1 %34, label %for.body48, label %for.end78, !dbg !3766

for.body48:                                       ; preds = %land.end
  %35 = load float, float* %d2low, align 4, !dbg !3767
  %36 = load float, float* %d2high, align 4, !dbg !3769
  %add = fadd float %35, %36, !dbg !3770
  %mul49 = fmul float 5.000000e-01, %add, !dbg !3771
  store float %mul49, float* %d2, align 4, !dbg !3772
  store float 0.000000e+00, float* %u, align 4, !dbg !3773
  store i32 0, i32* %j, align 4, !dbg !3774
  br label %for.cond50, !dbg !3776

for.cond50:                                       ; preds = %for.inc59, %for.body48
  %37 = load i32, i32* %j, align 4, !dbg !3777
  %38 = load i32, i32* %n.addr, align 4, !dbg !3779
  %sub51 = sub nsw i32 %38, 1, !dbg !3780
  %cmp52 = icmp slt i32 %37, %sub51, !dbg !3781
  br i1 %cmp52, label %for.body54, label %for.end61, !dbg !3782

for.body54:                                       ; preds = %for.cond50
  %39 = load float, float* %u, align 4, !dbg !3783
  %40 = load float, float* %d2, align 4, !dbg !3785
  %41 = load float, float* %r.addr, align 4, !dbg !3786
  %call = call float @find_superellipse_chord_u(float %39, float %40, float %41), !dbg !3787
  store float %call, float* %u, align 4, !dbg !3788
  %42 = load float, float* %u, align 4, !dbg !3789
  %cmp55 = fcmp oeq float %42, -1.000000e+00, !dbg !3791
  br i1 %cmp55, label %if.then57, label %if.end58, !dbg !3792

if.then57:                                        ; preds = %for.body54
  br label %for.end61, !dbg !3793

if.end58:                                         ; preds = %for.body54
  br label %for.inc59, !dbg !3794

for.inc59:                                        ; preds = %if.end58
  %43 = load i32, i32* %j, align 4, !dbg !3795
  %inc60 = add nsw i32 %43, 1, !dbg !3795
  store i32 %inc60, i32* %j, align 4, !dbg !3795
  br label %for.cond50, !dbg !3796, !llvm.loop !3797

for.end61:                                        ; preds = %if.then57, %for.cond50
  %44 = load float, float* %u, align 4, !dbg !3799
  %cmp62 = fcmp oeq float %44, -1.000000e+00, !dbg !3801
  br i1 %cmp62, label %if.then64, label %if.end65, !dbg !3802

if.then64:                                        ; preds = %for.end61
  %45 = load float, float* %d2, align 4, !dbg !3803
  store float %45, float* %d2high, align 4, !dbg !3805
  br label %for.inc76, !dbg !3806

if.end65:                                         ; preds = %for.end61
  %46 = load float, float* %u, align 4, !dbg !3807
  %47 = load float, float* %r.addr, align 4, !dbg !3808
  %call66 = call float @superellipse_chord_length_squared(float %46, float 2.000000e+00, float %47), !dbg !3809
  store float %call66, float* %d2final, align 4, !dbg !3810
  %48 = load float, float* %d2final, align 4, !dbg !3811
  %49 = load float, float* %d2, align 4, !dbg !3813
  %sub67 = fsub float %48, %49, !dbg !3814
  %50 = call float @llvm.fabs.f32(float %sub67), !dbg !3815
  %cmp68 = fcmp ole float %50, 0x3EB0C6F7A0000000, !dbg !3816
  br i1 %cmp68, label %if.then70, label %if.end71, !dbg !3817

if.then70:                                        ; preds = %if.end65
  br label %for.end78, !dbg !3818

if.end71:                                         ; preds = %if.end65
  %51 = load float, float* %d2final, align 4, !dbg !3819
  %52 = load float, float* %d2, align 4, !dbg !3821
  %cmp72 = fcmp olt float %51, %52, !dbg !3822
  br i1 %cmp72, label %if.then74, label %if.else, !dbg !3823

if.then74:                                        ; preds = %if.end71
  %53 = load float, float* %d2, align 4, !dbg !3824
  store float %53, float* %d2high, align 4, !dbg !3825
  br label %if.end75, !dbg !3826

if.else:                                          ; preds = %if.end71
  %54 = load float, float* %d2, align 4, !dbg !3827
  store float %54, float* %d2low, align 4, !dbg !3828
  br label %if.end75

if.end75:                                         ; preds = %if.else, %if.then74
  br label %for.inc76, !dbg !3829

for.inc76:                                        ; preds = %if.end75, %if.then64
  %55 = load i32, i32* %i, align 4, !dbg !3830
  %inc77 = add nsw i32 %55, 1, !dbg !3830
  store i32 %inc77, i32* %i, align 4, !dbg !3830
  br label %for.cond42, !dbg !3831, !llvm.loop !3832

for.end78:                                        ; preds = %if.then70, %land.end
  store float 0.000000e+00, float* %u, align 4, !dbg !3834
  store i32 0, i32* %i, align 4, !dbg !3835
  br label %for.cond79, !dbg !3837

for.cond79:                                       ; preds = %for.inc86, %for.end78
  %56 = load i32, i32* %i, align 4, !dbg !3838
  %57 = load i32, i32* %n.addr, align 4, !dbg !3840
  %cmp80 = icmp slt i32 %56, %57, !dbg !3841
  br i1 %cmp80, label %for.body82, label %for.end88, !dbg !3842

for.body82:                                       ; preds = %for.cond79
  %58 = load float, float* %u, align 4, !dbg !3843
  %59 = load float*, float** %r_params.addr, align 8, !dbg !3845
  %60 = load i32, i32* %i, align 4, !dbg !3846
  %idxprom83 = sext i32 %60 to i64, !dbg !3845
  %arrayidx84 = getelementptr inbounds float, float* %59, i64 %idxprom83, !dbg !3845
  store float %58, float* %arrayidx84, align 4, !dbg !3847
  %61 = load float, float* %u, align 4, !dbg !3848
  %62 = load float, float* %d2, align 4, !dbg !3849
  %63 = load float, float* %r.addr, align 4, !dbg !3850
  %call85 = call float @find_superellipse_chord_u(float %61, float %62, float %63), !dbg !3851
  store float %call85, float* %u, align 4, !dbg !3852
  br label %for.inc86, !dbg !3853

for.inc86:                                        ; preds = %for.body82
  %64 = load i32, i32* %i, align 4, !dbg !3854
  %inc87 = add nsw i32 %64, 1, !dbg !3854
  store i32 %inc87, i32* %i, align 4, !dbg !3854
  br label %for.cond79, !dbg !3855, !llvm.loop !3856

for.end88:                                        ; preds = %for.cond79
  %65 = load float*, float** %r_params.addr, align 8, !dbg !3858
  %66 = load i32, i32* %n.addr, align 4, !dbg !3859
  %idxprom89 = sext i32 %66 to i64, !dbg !3858
  %arrayidx90 = getelementptr inbounds float, float* %65, i64 %idxprom89, !dbg !3858
  store float 2.000000e+00, float* %arrayidx90, align 4, !dbg !3860
  br label %return, !dbg !3861

return:                                           ; preds = %for.end88, %for.end
  ret void, !dbg !3861
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @power_of_2_max_i(i32 %n) #0 !dbg !3862 {
entry:
  %retval = alloca i32, align 4
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !3866, metadata !DIExpression()), !dbg !3867
  %0 = load i32, i32* %n.addr, align 4, !dbg !3868
  %call = call i32 @is_power_of_2_i(i32 %0), !dbg !3870
  %tobool = icmp ne i32 %call, 0, !dbg !3870
  br i1 %tobool, label %if.then, label %if.end, !dbg !3871

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4, !dbg !3872
  store i32 %1, i32* %retval, align 4, !dbg !3873
  br label %return, !dbg !3873

if.end:                                           ; preds = %entry
  br label %do.body, !dbg !3874

do.body:                                          ; preds = %do.cond, %if.end
  %2 = load i32, i32* %n.addr, align 4, !dbg !3875
  %3 = load i32, i32* %n.addr, align 4, !dbg !3877
  %sub = sub nsw i32 %3, 1, !dbg !3878
  %and = and i32 %2, %sub, !dbg !3879
  store i32 %and, i32* %n.addr, align 4, !dbg !3880
  br label %do.cond, !dbg !3881

do.cond:                                          ; preds = %do.body
  %4 = load i32, i32* %n.addr, align 4, !dbg !3882
  %call1 = call i32 @is_power_of_2_i(i32 %4), !dbg !3883
  %tobool2 = icmp ne i32 %call1, 0, !dbg !3884
  %lnot = xor i1 %tobool2, true, !dbg !3884
  br i1 %lnot, label %do.body, label %do.end, !dbg !3881, !llvm.loop !3885

do.end:                                           ; preds = %do.cond
  %5 = load i32, i32* %n.addr, align 4, !dbg !3887
  %mul = mul nsw i32 %5, 2, !dbg !3888
  store i32 %mul, i32* %retval, align 4, !dbg !3889
  br label %return, !dbg !3889

return:                                           ; preds = %do.end, %if.then
  %6 = load i32, i32* %retval, align 4, !dbg !3890
  ret i32 %6, !dbg !3890
}

; Function Attrs: nounwind readnone speculatable willreturn
declare float @llvm.fabs.f32(float) #1

; Function Attrs: noinline nounwind uwtable
define internal float @find_superellipse_chord_u(float %u0, float %d2goal, float %r) #0 !dbg !3891 {
entry:
  %retval = alloca float, align 4
  %u0.addr = alloca float, align 4
  %d2goal.addr = alloca float, align 4
  %r.addr = alloca float, align 4
  %ulow = alloca float, align 4
  %uhigh = alloca float, align 4
  %u = alloca float, align 4
  %d2 = alloca float, align 4
  %d2max = alloca float, align 4
  %dtol = alloca float, align 4
  %utol = alloca float, align 4
  %umax = alloca float, align 4
  store float %u0, float* %u0.addr, align 4
  call void @llvm.dbg.declare(metadata float* %u0.addr, metadata !3894, metadata !DIExpression()), !dbg !3895
  store float %d2goal, float* %d2goal.addr, align 4
  call void @llvm.dbg.declare(metadata float* %d2goal.addr, metadata !3896, metadata !DIExpression()), !dbg !3897
  store float %r, float* %r.addr, align 4
  call void @llvm.dbg.declare(metadata float* %r.addr, metadata !3898, metadata !DIExpression()), !dbg !3899
  call void @llvm.dbg.declare(metadata float* %ulow, metadata !3900, metadata !DIExpression()), !dbg !3901
  call void @llvm.dbg.declare(metadata float* %uhigh, metadata !3902, metadata !DIExpression()), !dbg !3903
  call void @llvm.dbg.declare(metadata float* %u, metadata !3904, metadata !DIExpression()), !dbg !3905
  call void @llvm.dbg.declare(metadata float* %d2, metadata !3906, metadata !DIExpression()), !dbg !3907
  call void @llvm.dbg.declare(metadata float* %d2max, metadata !3908, metadata !DIExpression()), !dbg !3909
  call void @llvm.dbg.declare(metadata float* %dtol, metadata !3910, metadata !DIExpression()), !dbg !3911
  store float 0x3F1A36E2E0000000, float* %dtol, align 4, !dbg !3911
  call void @llvm.dbg.declare(metadata float* %utol, metadata !3912, metadata !DIExpression()), !dbg !3913
  store float 0x3EB0C6F7A0000000, float* %utol, align 4, !dbg !3913
  call void @llvm.dbg.declare(metadata float* %umax, metadata !3914, metadata !DIExpression()), !dbg !3915
  store float 2.000000e+00, float* %umax, align 4, !dbg !3915
  %0 = load float, float* %d2goal.addr, align 4, !dbg !3916
  %cmp = fcmp oeq float %0, 0.000000e+00, !dbg !3918
  br i1 %cmp, label %if.then, label %if.end, !dbg !3919

if.then:                                          ; preds = %entry
  %1 = load float, float* %u0.addr, align 4, !dbg !3920
  store float %1, float* %retval, align 4, !dbg !3921
  br label %return, !dbg !3921

if.end:                                           ; preds = %entry
  %2 = load float, float* %u0.addr, align 4, !dbg !3922
  %3 = load float, float* %r.addr, align 4, !dbg !3923
  %call = call float @superellipse_chord_length_squared(float %2, float 2.000000e+00, float %3), !dbg !3924
  store float %call, float* %d2max, align 4, !dbg !3925
  %4 = load float, float* %d2goal.addr, align 4, !dbg !3926
  %5 = load float, float* %d2max, align 4, !dbg !3928
  %sub = fsub float %4, %5, !dbg !3929
  %6 = call float @llvm.fabs.f32(float %sub), !dbg !3930
  %cmp1 = fcmp ole float %6, 0x3F1A36E2E0000000, !dbg !3931
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !3932

if.then2:                                         ; preds = %if.end
  store float 2.000000e+00, float* %retval, align 4, !dbg !3933
  br label %return, !dbg !3933

if.end3:                                          ; preds = %if.end
  %7 = load float, float* %d2goal.addr, align 4, !dbg !3934
  %8 = load float, float* %d2max, align 4, !dbg !3936
  %sub4 = fsub float %7, %8, !dbg !3937
  %cmp5 = fcmp ogt float %sub4, 0x3F1A36E2E0000000, !dbg !3938
  br i1 %cmp5, label %if.then6, label %if.end7, !dbg !3939

if.then6:                                         ; preds = %if.end3
  store float -1.000000e+00, float* %retval, align 4, !dbg !3940
  br label %return, !dbg !3940

if.end7:                                          ; preds = %if.end3
  %9 = load float, float* %u0.addr, align 4, !dbg !3941
  store float %9, float* %ulow, align 4, !dbg !3942
  store float 2.000000e+00, float* %uhigh, align 4, !dbg !3943
  br label %do.body, !dbg !3944

do.body:                                          ; preds = %do.cond, %if.end7
  %10 = load float, float* %ulow, align 4, !dbg !3945
  %11 = load float, float* %uhigh, align 4, !dbg !3947
  %add = fadd float %10, %11, !dbg !3948
  %mul = fmul float 5.000000e-01, %add, !dbg !3949
  store float %mul, float* %u, align 4, !dbg !3950
  %12 = load float, float* %u0.addr, align 4, !dbg !3951
  %13 = load float, float* %u, align 4, !dbg !3952
  %14 = load float, float* %r.addr, align 4, !dbg !3953
  %call8 = call float @superellipse_chord_length_squared(float %12, float %13, float %14), !dbg !3954
  store float %call8, float* %d2, align 4, !dbg !3955
  %15 = load float, float* %d2goal.addr, align 4, !dbg !3956
  %16 = load float, float* %d2, align 4, !dbg !3958
  %sub9 = fsub float %15, %16, !dbg !3959
  %17 = call float @llvm.fabs.f32(float %sub9), !dbg !3960
  %cmp10 = fcmp ole float %17, 0x3F1A36E2E0000000, !dbg !3961
  br i1 %cmp10, label %if.then11, label %if.end12, !dbg !3962

if.then11:                                        ; preds = %do.body
  br label %do.end, !dbg !3963

if.end12:                                         ; preds = %do.body
  %18 = load float, float* %d2, align 4, !dbg !3964
  %19 = load float, float* %d2goal.addr, align 4, !dbg !3966
  %cmp13 = fcmp olt float %18, %19, !dbg !3967
  br i1 %cmp13, label %if.then14, label %if.else, !dbg !3968

if.then14:                                        ; preds = %if.end12
  %20 = load float, float* %u, align 4, !dbg !3969
  store float %20, float* %ulow, align 4, !dbg !3970
  br label %if.end15, !dbg !3971

if.else:                                          ; preds = %if.end12
  %21 = load float, float* %u, align 4, !dbg !3972
  store float %21, float* %uhigh, align 4, !dbg !3973
  br label %if.end15

if.end15:                                         ; preds = %if.else, %if.then14
  br label %do.cond, !dbg !3974

do.cond:                                          ; preds = %if.end15
  %22 = load float, float* %uhigh, align 4, !dbg !3975
  %23 = load float, float* %ulow, align 4, !dbg !3976
  %sub16 = fsub float %22, %23, !dbg !3977
  %24 = call float @llvm.fabs.f32(float %sub16), !dbg !3978
  %cmp17 = fcmp ogt float %24, 0x3EB0C6F7A0000000, !dbg !3979
  br i1 %cmp17, label %do.body, label %do.end, !dbg !3974, !llvm.loop !3980

do.end:                                           ; preds = %do.cond, %if.then11
  %25 = load float, float* %u, align 4, !dbg !3982
  store float %25, float* %retval, align 4, !dbg !3983
  br label %return, !dbg !3983

return:                                           ; preds = %do.end, %if.then6, %if.then2, %if.then
  %26 = load float, float* %retval, align 4, !dbg !3984
  ret float %26, !dbg !3984
}

; Function Attrs: noinline nounwind uwtable
define internal float @superellipse_chord_length_squared(float %u0, float %u1, float %r) #0 !dbg !3985 {
entry:
  %u0.addr = alloca float, align 4
  %u1.addr = alloca float, align 4
  %r.addr = alloca float, align 4
  %a = alloca [2 x float], align 4
  %b = alloca [2 x float], align 4
  store float %u0, float* %u0.addr, align 4
  call void @llvm.dbg.declare(metadata float* %u0.addr, metadata !3986, metadata !DIExpression()), !dbg !3987
  store float %u1, float* %u1.addr, align 4
  call void @llvm.dbg.declare(metadata float* %u1.addr, metadata !3988, metadata !DIExpression()), !dbg !3989
  store float %r, float* %r.addr, align 4
  call void @llvm.dbg.declare(metadata float* %r.addr, metadata !3990, metadata !DIExpression()), !dbg !3991
  call void @llvm.dbg.declare(metadata [2 x float]* %a, metadata !3992, metadata !DIExpression()), !dbg !3996
  call void @llvm.dbg.declare(metadata [2 x float]* %b, metadata !3997, metadata !DIExpression()), !dbg !3998
  %0 = load float, float* %u0.addr, align 4, !dbg !3999
  %1 = load float, float* %r.addr, align 4, !dbg !4000
  %arraydecay = getelementptr inbounds [2 x float], [2 x float]* %a, i64 0, i64 0, !dbg !4001
  call void @superellipse_co(float %0, float %1, float* %arraydecay), !dbg !4002
  %2 = load float, float* %u1.addr, align 4, !dbg !4003
  %3 = load float, float* %r.addr, align 4, !dbg !4004
  %arraydecay1 = getelementptr inbounds [2 x float], [2 x float]* %b, i64 0, i64 0, !dbg !4005
  call void @superellipse_co(float %2, float %3, float* %arraydecay1), !dbg !4006
  %arraydecay2 = getelementptr inbounds [2 x float], [2 x float]* %a, i64 0, i64 0, !dbg !4007
  %arraydecay3 = getelementptr inbounds [2 x float], [2 x float]* %b, i64 0, i64 0, !dbg !4008
  %call = call float @len_squared_v2v2(float* %arraydecay2, float* %arraydecay3), !dbg !4009
  ret float %call, !dbg !4010
}

; Function Attrs: noinline nounwind uwtable
define internal void @superellipse_co(float %u, float %r, float* %r_co) #0 !dbg !4011 {
entry:
  %u.addr = alloca float, align 4
  %r.addr = alloca float, align 4
  %r_co.addr = alloca float*, align 8
  %t = alloca float, align 4
  store float %u, float* %u.addr, align 4
  call void @llvm.dbg.declare(metadata float* %u.addr, metadata !4014, metadata !DIExpression()), !dbg !4015
  store float %r, float* %r.addr, align 4
  call void @llvm.dbg.declare(metadata float* %r.addr, metadata !4016, metadata !DIExpression()), !dbg !4017
  store float* %r_co, float** %r_co.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r_co.addr, metadata !4018, metadata !DIExpression()), !dbg !4019
  call void @llvm.dbg.declare(metadata float* %t, metadata !4020, metadata !DIExpression()), !dbg !4021
  %0 = load float, float* %u.addr, align 4, !dbg !4022
  %cmp = fcmp ole float %0, 0.000000e+00, !dbg !4024
  br i1 %cmp, label %if.then, label %if.else, !dbg !4025

if.then:                                          ; preds = %entry
  %1 = load float*, float** %r_co.addr, align 8, !dbg !4026
  %arrayidx = getelementptr inbounds float, float* %1, i64 0, !dbg !4026
  store float 0.000000e+00, float* %arrayidx, align 4, !dbg !4028
  %2 = load float*, float** %r_co.addr, align 8, !dbg !4029
  %arrayidx1 = getelementptr inbounds float, float* %2, i64 1, !dbg !4029
  store float 1.000000e+00, float* %arrayidx1, align 4, !dbg !4030
  br label %if.end60, !dbg !4031

if.else:                                          ; preds = %entry
  %3 = load float, float* %u.addr, align 4, !dbg !4032
  %cmp2 = fcmp oge float %3, 2.000000e+00, !dbg !4034
  br i1 %cmp2, label %if.then3, label %if.else6, !dbg !4035

if.then3:                                         ; preds = %if.else
  %4 = load float*, float** %r_co.addr, align 8, !dbg !4036
  %arrayidx4 = getelementptr inbounds float, float* %4, i64 0, !dbg !4036
  store float 1.000000e+00, float* %arrayidx4, align 4, !dbg !4038
  %5 = load float*, float** %r_co.addr, align 8, !dbg !4039
  %arrayidx5 = getelementptr inbounds float, float* %5, i64 1, !dbg !4039
  store float 0.000000e+00, float* %arrayidx5, align 4, !dbg !4040
  br label %if.end59, !dbg !4041

if.else6:                                         ; preds = %if.else
  %6 = load float, float* %r.addr, align 4, !dbg !4042
  %cmp7 = fcmp oeq float %6, 1.000000e+00, !dbg !4044
  br i1 %cmp7, label %if.then8, label %if.else11, !dbg !4045

if.then8:                                         ; preds = %if.else6
  %7 = load float, float* %u.addr, align 4, !dbg !4046
  %div = fdiv float %7, 2.000000e+00, !dbg !4048
  store float %div, float* %t, align 4, !dbg !4049
  %8 = load float, float* %t, align 4, !dbg !4050
  %9 = load float*, float** %r_co.addr, align 8, !dbg !4051
  %arrayidx9 = getelementptr inbounds float, float* %9, i64 0, !dbg !4051
  store float %8, float* %arrayidx9, align 4, !dbg !4052
  %10 = load float, float* %t, align 4, !dbg !4053
  %sub = fsub float 1.000000e+00, %10, !dbg !4054
  %11 = load float*, float** %r_co.addr, align 8, !dbg !4055
  %arrayidx10 = getelementptr inbounds float, float* %11, i64 1, !dbg !4055
  store float %sub, float* %arrayidx10, align 4, !dbg !4056
  br label %if.end58, !dbg !4057

if.else11:                                        ; preds = %if.else6
  %12 = load float, float* %r.addr, align 4, !dbg !4058
  %cmp12 = fcmp oeq float %12, 0.000000e+00, !dbg !4060
  br i1 %cmp12, label %if.then13, label %if.else23, !dbg !4061

if.then13:                                        ; preds = %if.else11
  %13 = load float, float* %u.addr, align 4, !dbg !4062
  %cmp14 = fcmp olt float %13, 1.000000e+00, !dbg !4065
  br i1 %cmp14, label %if.then15, label %if.else19, !dbg !4066

if.then15:                                        ; preds = %if.then13
  %14 = load float*, float** %r_co.addr, align 8, !dbg !4067
  %arrayidx16 = getelementptr inbounds float, float* %14, i64 0, !dbg !4067
  store float 0.000000e+00, float* %arrayidx16, align 4, !dbg !4069
  %15 = load float, float* %u.addr, align 4, !dbg !4070
  %sub17 = fsub float 1.000000e+00, %15, !dbg !4071
  %16 = load float*, float** %r_co.addr, align 8, !dbg !4072
  %arrayidx18 = getelementptr inbounds float, float* %16, i64 1, !dbg !4072
  store float %sub17, float* %arrayidx18, align 4, !dbg !4073
  br label %if.end, !dbg !4074

if.else19:                                        ; preds = %if.then13
  %17 = load float, float* %u.addr, align 4, !dbg !4075
  %sub20 = fsub float %17, 1.000000e+00, !dbg !4077
  %18 = load float*, float** %r_co.addr, align 8, !dbg !4078
  %arrayidx21 = getelementptr inbounds float, float* %18, i64 0, !dbg !4078
  store float %sub20, float* %arrayidx21, align 4, !dbg !4079
  %19 = load float*, float** %r_co.addr, align 8, !dbg !4080
  %arrayidx22 = getelementptr inbounds float, float* %19, i64 1, !dbg !4080
  store float 0.000000e+00, float* %arrayidx22, align 4, !dbg !4081
  br label %if.end

if.end:                                           ; preds = %if.else19, %if.then15
  br label %if.end57, !dbg !4082

if.else23:                                        ; preds = %if.else11
  %20 = load float, float* %r.addr, align 4, !dbg !4083
  %cmp24 = fcmp oeq float %20, 4.000000e+00, !dbg !4085
  br i1 %cmp24, label %if.then25, label %if.else35, !dbg !4086

if.then25:                                        ; preds = %if.else23
  %21 = load float, float* %u.addr, align 4, !dbg !4087
  %cmp26 = fcmp olt float %21, 1.000000e+00, !dbg !4090
  br i1 %cmp26, label %if.then27, label %if.else30, !dbg !4091

if.then27:                                        ; preds = %if.then25
  %22 = load float, float* %u.addr, align 4, !dbg !4092
  %23 = load float*, float** %r_co.addr, align 8, !dbg !4094
  %arrayidx28 = getelementptr inbounds float, float* %23, i64 0, !dbg !4094
  store float %22, float* %arrayidx28, align 4, !dbg !4095
  %24 = load float*, float** %r_co.addr, align 8, !dbg !4096
  %arrayidx29 = getelementptr inbounds float, float* %24, i64 1, !dbg !4096
  store float 1.000000e+00, float* %arrayidx29, align 4, !dbg !4097
  br label %if.end34, !dbg !4098

if.else30:                                        ; preds = %if.then25
  %25 = load float*, float** %r_co.addr, align 8, !dbg !4099
  %arrayidx31 = getelementptr inbounds float, float* %25, i64 0, !dbg !4099
  store float 1.000000e+00, float* %arrayidx31, align 4, !dbg !4101
  %26 = load float, float* %u.addr, align 4, !dbg !4102
  %sub32 = fsub float 2.000000e+00, %26, !dbg !4103
  %27 = load float*, float** %r_co.addr, align 8, !dbg !4104
  %arrayidx33 = getelementptr inbounds float, float* %27, i64 1, !dbg !4104
  store float %sub32, float* %arrayidx33, align 4, !dbg !4105
  br label %if.end34

if.end34:                                         ; preds = %if.else30, %if.then27
  br label %if.end56, !dbg !4106

if.else35:                                        ; preds = %if.else23
  %28 = load float, float* %u.addr, align 4, !dbg !4107
  %mul = fmul float %28, 0x400921FB60000000, !dbg !4109
  %div36 = fdiv float %mul, 4.000000e+00, !dbg !4110
  store float %div36, float* %t, align 4, !dbg !4111
  %29 = load float, float* %t, align 4, !dbg !4112
  %call = call float @sinf(float %29) #5, !dbg !4113
  %30 = load float*, float** %r_co.addr, align 8, !dbg !4114
  %arrayidx37 = getelementptr inbounds float, float* %30, i64 0, !dbg !4114
  store float %call, float* %arrayidx37, align 4, !dbg !4115
  %31 = load float, float* %t, align 4, !dbg !4116
  %call38 = call float @cosf(float %31) #5, !dbg !4117
  %32 = load float*, float** %r_co.addr, align 8, !dbg !4118
  %arrayidx39 = getelementptr inbounds float, float* %32, i64 1, !dbg !4118
  store float %call38, float* %arrayidx39, align 4, !dbg !4119
  %33 = load float, float* %r.addr, align 4, !dbg !4120
  %cmp40 = fcmp une float %33, 4.000000e+00, !dbg !4122
  br i1 %cmp40, label %if.then41, label %if.end55, !dbg !4123

if.then41:                                        ; preds = %if.else35
  %34 = load float*, float** %r_co.addr, align 8, !dbg !4124
  %arrayidx42 = getelementptr inbounds float, float* %34, i64 0, !dbg !4124
  %35 = load float, float* %arrayidx42, align 4, !dbg !4124
  %conv = fpext float %35 to double, !dbg !4124
  %36 = load float, float* %r.addr, align 4, !dbg !4126
  %div43 = fdiv float 2.000000e+00, %36, !dbg !4127
  %conv44 = fpext float %div43 to double, !dbg !4128
  %call45 = call double @pow(double %conv, double %conv44) #5, !dbg !4129
  %conv46 = fptrunc double %call45 to float, !dbg !4129
  %37 = load float*, float** %r_co.addr, align 8, !dbg !4130
  %arrayidx47 = getelementptr inbounds float, float* %37, i64 0, !dbg !4130
  store float %conv46, float* %arrayidx47, align 4, !dbg !4131
  %38 = load float*, float** %r_co.addr, align 8, !dbg !4132
  %arrayidx48 = getelementptr inbounds float, float* %38, i64 1, !dbg !4132
  %39 = load float, float* %arrayidx48, align 4, !dbg !4132
  %conv49 = fpext float %39 to double, !dbg !4132
  %40 = load float, float* %r.addr, align 4, !dbg !4133
  %div50 = fdiv float 2.000000e+00, %40, !dbg !4134
  %conv51 = fpext float %div50 to double, !dbg !4135
  %call52 = call double @pow(double %conv49, double %conv51) #5, !dbg !4136
  %conv53 = fptrunc double %call52 to float, !dbg !4136
  %41 = load float*, float** %r_co.addr, align 8, !dbg !4137
  %arrayidx54 = getelementptr inbounds float, float* %41, i64 1, !dbg !4137
  store float %conv53, float* %arrayidx54, align 4, !dbg !4138
  br label %if.end55, !dbg !4139

if.end55:                                         ; preds = %if.then41, %if.else35
  br label %if.end56

if.end56:                                         ; preds = %if.end55, %if.end34
  br label %if.end57

if.end57:                                         ; preds = %if.end56, %if.end
  br label %if.end58

if.end58:                                         ; preds = %if.end57, %if.then8
  br label %if.end59

if.end59:                                         ; preds = %if.end58, %if.then3
  br label %if.end60

if.end60:                                         ; preds = %if.end59, %if.then
  ret void, !dbg !4140
}

; Function Attrs: noinline nounwind uwtable
define internal float @len_squared_v2v2(float* %a, float* %b) #0 !dbg !4141 {
entry:
  %a.addr = alloca float*, align 8
  %b.addr = alloca float*, align 8
  %d = alloca [2 x float], align 4
  store float* %a, float** %a.addr, align 8
  call void @llvm.dbg.declare(metadata float** %a.addr, metadata !4145, metadata !DIExpression()), !dbg !4146
  store float* %b, float** %b.addr, align 8
  call void @llvm.dbg.declare(metadata float** %b.addr, metadata !4147, metadata !DIExpression()), !dbg !4148
  call void @llvm.dbg.declare(metadata [2 x float]* %d, metadata !4149, metadata !DIExpression()), !dbg !4150
  %arraydecay = getelementptr inbounds [2 x float], [2 x float]* %d, i64 0, i64 0, !dbg !4151
  %0 = load float*, float** %b.addr, align 8, !dbg !4152
  %1 = load float*, float** %a.addr, align 8, !dbg !4153
  call void @sub_v2_v2v2(float* %arraydecay, float* %0, float* %1), !dbg !4154
  %arraydecay1 = getelementptr inbounds [2 x float], [2 x float]* %d, i64 0, i64 0, !dbg !4155
  %arraydecay2 = getelementptr inbounds [2 x float], [2 x float]* %d, i64 0, i64 0, !dbg !4156
  %call = call float @dot_v2v2(float* %arraydecay1, float* %arraydecay2), !dbg !4157
  ret float %call, !dbg !4158
}

; Function Attrs: nounwind
declare dso_local float @sinf(float) #4

; Function Attrs: nounwind
declare dso_local float @cosf(float) #4

; Function Attrs: nounwind
declare dso_local double @pow(double, double) #4

; Function Attrs: noinline nounwind uwtable
define internal void @sub_v2_v2v2(float* %r, float* %a, float* %b) #0 !dbg !4159 {
entry:
  %r.addr = alloca float*, align 8
  %a.addr = alloca float*, align 8
  %b.addr = alloca float*, align 8
  store float* %r, float** %r.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r.addr, metadata !4162, metadata !DIExpression()), !dbg !4163
  store float* %a, float** %a.addr, align 8
  call void @llvm.dbg.declare(metadata float** %a.addr, metadata !4164, metadata !DIExpression()), !dbg !4165
  store float* %b, float** %b.addr, align 8
  call void @llvm.dbg.declare(metadata float** %b.addr, metadata !4166, metadata !DIExpression()), !dbg !4167
  %0 = load float*, float** %a.addr, align 8, !dbg !4168
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !4168
  %1 = load float, float* %arrayidx, align 4, !dbg !4168
  %2 = load float*, float** %b.addr, align 8, !dbg !4169
  %arrayidx1 = getelementptr inbounds float, float* %2, i64 0, !dbg !4169
  %3 = load float, float* %arrayidx1, align 4, !dbg !4169
  %sub = fsub float %1, %3, !dbg !4170
  %4 = load float*, float** %r.addr, align 8, !dbg !4171
  %arrayidx2 = getelementptr inbounds float, float* %4, i64 0, !dbg !4171
  store float %sub, float* %arrayidx2, align 4, !dbg !4172
  %5 = load float*, float** %a.addr, align 8, !dbg !4173
  %arrayidx3 = getelementptr inbounds float, float* %5, i64 1, !dbg !4173
  %6 = load float, float* %arrayidx3, align 4, !dbg !4173
  %7 = load float*, float** %b.addr, align 8, !dbg !4174
  %arrayidx4 = getelementptr inbounds float, float* %7, i64 1, !dbg !4174
  %8 = load float, float* %arrayidx4, align 4, !dbg !4174
  %sub5 = fsub float %6, %8, !dbg !4175
  %9 = load float*, float** %r.addr, align 8, !dbg !4176
  %arrayidx6 = getelementptr inbounds float, float* %9, i64 1, !dbg !4176
  store float %sub5, float* %arrayidx6, align 4, !dbg !4177
  ret void, !dbg !4178
}

; Function Attrs: noinline nounwind uwtable
define internal float @dot_v2v2(float* %a, float* %b) #0 !dbg !4179 {
entry:
  %a.addr = alloca float*, align 8
  %b.addr = alloca float*, align 8
  store float* %a, float** %a.addr, align 8
  call void @llvm.dbg.declare(metadata float** %a.addr, metadata !4180, metadata !DIExpression()), !dbg !4181
  store float* %b, float** %b.addr, align 8
  call void @llvm.dbg.declare(metadata float** %b.addr, metadata !4182, metadata !DIExpression()), !dbg !4183
  %0 = load float*, float** %a.addr, align 8, !dbg !4184
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !4184
  %1 = load float, float* %arrayidx, align 4, !dbg !4184
  %2 = load float*, float** %b.addr, align 8, !dbg !4185
  %arrayidx1 = getelementptr inbounds float, float* %2, i64 0, !dbg !4185
  %3 = load float, float* %arrayidx1, align 4, !dbg !4185
  %mul = fmul float %1, %3, !dbg !4186
  %4 = load float*, float** %a.addr, align 8, !dbg !4187
  %arrayidx2 = getelementptr inbounds float, float* %4, i64 1, !dbg !4187
  %5 = load float, float* %arrayidx2, align 4, !dbg !4187
  %6 = load float*, float** %b.addr, align 8, !dbg !4188
  %arrayidx3 = getelementptr inbounds float, float* %6, i64 1, !dbg !4188
  %7 = load float, float* %arrayidx3, align 4, !dbg !4188
  %mul4 = fmul float %5, %7, !dbg !4189
  %add = fadd float %mul, %mul4, !dbg !4190
  ret float %add, !dbg !4191
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @is_power_of_2_i(i32 %n) #0 !dbg !4192 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !4193, metadata !DIExpression()), !dbg !4194
  %0 = load i32, i32* %n.addr, align 4, !dbg !4195
  %1 = load i32, i32* %n.addr, align 4, !dbg !4196
  %sub = sub nsw i32 %1, 1, !dbg !4197
  %and = and i32 %0, %sub, !dbg !4198
  %cmp = icmp eq i32 %and, 0, !dbg !4199
  %conv = zext i1 %cmp to i32, !dbg !4199
  ret i32 %conv, !dbg !4200
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.BMVert* @BM_edge_other_vert(%struct.BMEdge* %e, %struct.BMVert* %v) #0 !dbg !4201 {
entry:
  %retval = alloca %struct.BMVert*, align 8
  %e.addr = alloca %struct.BMEdge*, align 8
  %v.addr = alloca %struct.BMVert*, align 8
  store %struct.BMEdge* %e, %struct.BMEdge** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMEdge** %e.addr, metadata !4207, metadata !DIExpression()), !dbg !4208
  store %struct.BMVert* %v, %struct.BMVert** %v.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMVert** %v.addr, metadata !4209, metadata !DIExpression()), !dbg !4210
  %0 = load %struct.BMEdge*, %struct.BMEdge** %e.addr, align 8, !dbg !4211
  %v1 = getelementptr inbounds %struct.BMEdge, %struct.BMEdge* %0, i32 0, i32 2, !dbg !4213
  %1 = load %struct.BMVert*, %struct.BMVert** %v1, align 8, !dbg !4213
  %2 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !4214
  %cmp = icmp eq %struct.BMVert* %1, %2, !dbg !4215
  br i1 %cmp, label %if.then, label %if.else, !dbg !4216

if.then:                                          ; preds = %entry
  %3 = load %struct.BMEdge*, %struct.BMEdge** %e.addr, align 8, !dbg !4217
  %v2 = getelementptr inbounds %struct.BMEdge, %struct.BMEdge* %3, i32 0, i32 3, !dbg !4219
  %4 = load %struct.BMVert*, %struct.BMVert** %v2, align 8, !dbg !4219
  store %struct.BMVert* %4, %struct.BMVert** %retval, align 8, !dbg !4220
  br label %return, !dbg !4220

if.else:                                          ; preds = %entry
  %5 = load %struct.BMEdge*, %struct.BMEdge** %e.addr, align 8, !dbg !4221
  %v21 = getelementptr inbounds %struct.BMEdge, %struct.BMEdge* %5, i32 0, i32 3, !dbg !4223
  %6 = load %struct.BMVert*, %struct.BMVert** %v21, align 8, !dbg !4223
  %7 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !4224
  %cmp2 = icmp eq %struct.BMVert* %6, %7, !dbg !4225
  br i1 %cmp2, label %if.then3, label %if.end, !dbg !4226

if.then3:                                         ; preds = %if.else
  %8 = load %struct.BMEdge*, %struct.BMEdge** %e.addr, align 8, !dbg !4227
  %v14 = getelementptr inbounds %struct.BMEdge, %struct.BMEdge* %8, i32 0, i32 2, !dbg !4229
  %9 = load %struct.BMVert*, %struct.BMVert** %v14, align 8, !dbg !4229
  store %struct.BMVert* %9, %struct.BMVert** %retval, align 8, !dbg !4230
  br label %return, !dbg !4230

if.end:                                           ; preds = %if.else
  br label %if.end5

if.end5:                                          ; preds = %if.end
  store %struct.BMVert* null, %struct.BMVert** %retval, align 8, !dbg !4231
  br label %return, !dbg !4231

return:                                           ; preds = %if.end5, %if.then3, %if.then
  %10 = load %struct.BMVert*, %struct.BMVert** %retval, align 8, !dbg !4232
  ret %struct.BMVert* %10, !dbg !4232
}

declare dso_local float @BM_edge_calc_length(%struct.BMEdge*) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @BM_iter_init(%struct.BMIter* %iter, %struct.BMesh* %bm, i8 zeroext %itype, i8* %data) #0 !dbg !4233 {
entry:
  %retval = alloca i8, align 1
  %iter.addr = alloca %struct.BMIter*, align 8
  %bm.addr = alloca %struct.BMesh*, align 8
  %itype.addr = alloca i8, align 1
  %data.addr = alloca i8*, align 8
  store %struct.BMIter* %iter, %struct.BMIter** %iter.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMIter** %iter.addr, metadata !4236, metadata !DIExpression()), !dbg !4237
  store %struct.BMesh* %bm, %struct.BMesh** %bm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMesh** %bm.addr, metadata !4238, metadata !DIExpression()), !dbg !4239
  store i8 %itype, i8* %itype.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %itype.addr, metadata !4240, metadata !DIExpression()), !dbg !4241
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !4242, metadata !DIExpression()), !dbg !4243
  %0 = load i8, i8* %itype.addr, align 1, !dbg !4244
  %1 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !4245
  %itype1 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %1, i32 0, i32 4, !dbg !4246
  store i8 %0, i8* %itype1, align 4, !dbg !4247
  %2 = load i8, i8* %itype.addr, align 1, !dbg !4248
  %conv = zext i8 %2 to i32, !dbg !4249
  switch i32 %conv, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb3
    i32 3, label %sw.bb10
    i32 4, label %sw.bb17
    i32 5, label %sw.bb21
    i32 6, label %sw.bb26
    i32 7, label %sw.bb31
    i32 8, label %sw.bb35
    i32 9, label %sw.bb40
    i32 10, label %sw.bb44
    i32 11, label %sw.bb49
    i32 13, label %sw.bb54
    i32 14, label %sw.bb58
  ], !dbg !4250

sw.bb:                                            ; preds = %entry
  %3 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !4251
  %begin = getelementptr inbounds %struct.BMIter, %struct.BMIter* %3, i32 0, i32 1, !dbg !4253
  store void (i8*)* bitcast (void (%struct.BMIter__elem_of_mesh*)* @bmiter__elem_of_mesh_begin to void (i8*)*), void (i8*)** %begin, align 8, !dbg !4254
  %4 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !4255
  %step = getelementptr inbounds %struct.BMIter, %struct.BMIter* %4, i32 0, i32 2, !dbg !4256
  store i8* (i8*)* bitcast (i8* (%struct.BMIter__elem_of_mesh*)* @bmiter__elem_of_mesh_step to i8* (i8*)*), i8* (i8*)** %step, align 8, !dbg !4257
  %5 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !4258
  %vpool = getelementptr inbounds %struct.BMesh, %struct.BMesh* %5, i32 0, i32 9, !dbg !4259
  %6 = load %struct.BLI_mempool*, %struct.BLI_mempool** %vpool, align 8, !dbg !4259
  %7 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !4260
  %data2 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %7, i32 0, i32 0, !dbg !4261
  %elem_of_mesh = bitcast %union.anon.0* %data2 to %struct.BMIter__elem_of_mesh*, !dbg !4262
  %pooliter = getelementptr inbounds %struct.BMIter__elem_of_mesh, %struct.BMIter__elem_of_mesh* %elem_of_mesh, i32 0, i32 0, !dbg !4263
  %pool = getelementptr inbounds %struct.BLI_mempool_iter, %struct.BLI_mempool_iter* %pooliter, i32 0, i32 0, !dbg !4264
  store %struct.BLI_mempool* %6, %struct.BLI_mempool** %pool, align 8, !dbg !4265
  br label %sw.epilog, !dbg !4266

sw.bb3:                                           ; preds = %entry
  %8 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !4267
  %begin4 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %8, i32 0, i32 1, !dbg !4268
  store void (i8*)* bitcast (void (%struct.BMIter__elem_of_mesh*)* @bmiter__elem_of_mesh_begin to void (i8*)*), void (i8*)** %begin4, align 8, !dbg !4269
  %9 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !4270
  %step5 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %9, i32 0, i32 2, !dbg !4271
  store i8* (i8*)* bitcast (i8* (%struct.BMIter__elem_of_mesh*)* @bmiter__elem_of_mesh_step to i8* (i8*)*), i8* (i8*)** %step5, align 8, !dbg !4272
  %10 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !4273
  %epool = getelementptr inbounds %struct.BMesh, %struct.BMesh* %10, i32 0, i32 10, !dbg !4274
  %11 = load %struct.BLI_mempool*, %struct.BLI_mempool** %epool, align 8, !dbg !4274
  %12 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !4275
  %data6 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %12, i32 0, i32 0, !dbg !4276
  %elem_of_mesh7 = bitcast %union.anon.0* %data6 to %struct.BMIter__elem_of_mesh*, !dbg !4277
  %pooliter8 = getelementptr inbounds %struct.BMIter__elem_of_mesh, %struct.BMIter__elem_of_mesh* %elem_of_mesh7, i32 0, i32 0, !dbg !4278
  %pool9 = getelementptr inbounds %struct.BLI_mempool_iter, %struct.BLI_mempool_iter* %pooliter8, i32 0, i32 0, !dbg !4279
  store %struct.BLI_mempool* %11, %struct.BLI_mempool** %pool9, align 8, !dbg !4280
  br label %sw.epilog, !dbg !4281

sw.bb10:                                          ; preds = %entry
  %13 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !4282
  %begin11 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %13, i32 0, i32 1, !dbg !4283
  store void (i8*)* bitcast (void (%struct.BMIter__elem_of_mesh*)* @bmiter__elem_of_mesh_begin to void (i8*)*), void (i8*)** %begin11, align 8, !dbg !4284
  %14 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !4285
  %step12 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %14, i32 0, i32 2, !dbg !4286
  store i8* (i8*)* bitcast (i8* (%struct.BMIter__elem_of_mesh*)* @bmiter__elem_of_mesh_step to i8* (i8*)*), i8* (i8*)** %step12, align 8, !dbg !4287
  %15 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !4288
  %fpool = getelementptr inbounds %struct.BMesh, %struct.BMesh* %15, i32 0, i32 12, !dbg !4289
  %16 = load %struct.BLI_mempool*, %struct.BLI_mempool** %fpool, align 8, !dbg !4289
  %17 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !4290
  %data13 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %17, i32 0, i32 0, !dbg !4291
  %elem_of_mesh14 = bitcast %union.anon.0* %data13 to %struct.BMIter__elem_of_mesh*, !dbg !4292
  %pooliter15 = getelementptr inbounds %struct.BMIter__elem_of_mesh, %struct.BMIter__elem_of_mesh* %elem_of_mesh14, i32 0, i32 0, !dbg !4293
  %pool16 = getelementptr inbounds %struct.BLI_mempool_iter, %struct.BLI_mempool_iter* %pooliter15, i32 0, i32 0, !dbg !4294
  store %struct.BLI_mempool* %16, %struct.BLI_mempool** %pool16, align 8, !dbg !4295
  br label %sw.epilog, !dbg !4296

sw.bb17:                                          ; preds = %entry
  %18 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !4297
  %begin18 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %18, i32 0, i32 1, !dbg !4298
  store void (i8*)* bitcast (void (%struct.BMIter__edge_of_vert*)* @bmiter__edge_of_vert_begin to void (i8*)*), void (i8*)** %begin18, align 8, !dbg !4299
  %19 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !4300
  %step19 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %19, i32 0, i32 2, !dbg !4301
  store i8* (i8*)* bitcast (i8* (%struct.BMIter__edge_of_vert*)* @bmiter__edge_of_vert_step to i8* (i8*)*), i8* (i8*)** %step19, align 8, !dbg !4302
  %20 = load i8*, i8** %data.addr, align 8, !dbg !4303
  %21 = bitcast i8* %20 to %struct.BMVert*, !dbg !4304
  %22 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !4305
  %data20 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %22, i32 0, i32 0, !dbg !4306
  %edge_of_vert = bitcast %union.anon.0* %data20 to %struct.BMIter__edge_of_vert*, !dbg !4307
  %vdata = getelementptr inbounds %struct.BMIter__edge_of_vert, %struct.BMIter__edge_of_vert* %edge_of_vert, i32 0, i32 0, !dbg !4308
  store %struct.BMVert* %21, %struct.BMVert** %vdata, align 8, !dbg !4309
  br label %sw.epilog, !dbg !4310

sw.bb21:                                          ; preds = %entry
  %23 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !4311
  %begin22 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %23, i32 0, i32 1, !dbg !4312
  store void (i8*)* bitcast (void (%struct.BMIter__face_of_vert*)* @bmiter__face_of_vert_begin to void (i8*)*), void (i8*)** %begin22, align 8, !dbg !4313
  %24 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !4314
  %step23 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %24, i32 0, i32 2, !dbg !4315
  store i8* (i8*)* bitcast (i8* (%struct.BMIter__face_of_vert*)* @bmiter__face_of_vert_step to i8* (i8*)*), i8* (i8*)** %step23, align 8, !dbg !4316
  %25 = load i8*, i8** %data.addr, align 8, !dbg !4317
  %26 = bitcast i8* %25 to %struct.BMVert*, !dbg !4318
  %27 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !4319
  %data24 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %27, i32 0, i32 0, !dbg !4320
  %face_of_vert = bitcast %union.anon.0* %data24 to %struct.BMIter__face_of_vert*, !dbg !4321
  %vdata25 = getelementptr inbounds %struct.BMIter__face_of_vert, %struct.BMIter__face_of_vert* %face_of_vert, i32 0, i32 0, !dbg !4322
  store %struct.BMVert* %26, %struct.BMVert** %vdata25, align 8, !dbg !4323
  br label %sw.epilog, !dbg !4324

sw.bb26:                                          ; preds = %entry
  %28 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !4325
  %begin27 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %28, i32 0, i32 1, !dbg !4326
  store void (i8*)* bitcast (void (%struct.BMIter__loop_of_vert*)* @bmiter__loop_of_vert_begin to void (i8*)*), void (i8*)** %begin27, align 8, !dbg !4327
  %29 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !4328
  %step28 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %29, i32 0, i32 2, !dbg !4329
  store i8* (i8*)* bitcast (i8* (%struct.BMIter__loop_of_vert*)* @bmiter__loop_of_vert_step to i8* (i8*)*), i8* (i8*)** %step28, align 8, !dbg !4330
  %30 = load i8*, i8** %data.addr, align 8, !dbg !4331
  %31 = bitcast i8* %30 to %struct.BMVert*, !dbg !4332
  %32 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !4333
  %data29 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %32, i32 0, i32 0, !dbg !4334
  %loop_of_vert = bitcast %union.anon.0* %data29 to %struct.BMIter__loop_of_vert*, !dbg !4335
  %vdata30 = getelementptr inbounds %struct.BMIter__loop_of_vert, %struct.BMIter__loop_of_vert* %loop_of_vert, i32 0, i32 0, !dbg !4336
  store %struct.BMVert* %31, %struct.BMVert** %vdata30, align 8, !dbg !4337
  br label %sw.epilog, !dbg !4338

sw.bb31:                                          ; preds = %entry
  %33 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !4339
  %begin32 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %33, i32 0, i32 1, !dbg !4340
  store void (i8*)* bitcast (void (%struct.BMIter__vert_of_edge*)* @bmiter__vert_of_edge_begin to void (i8*)*), void (i8*)** %begin32, align 8, !dbg !4341
  %34 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !4342
  %step33 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %34, i32 0, i32 2, !dbg !4343
  store i8* (i8*)* bitcast (i8* (%struct.BMIter__vert_of_edge*)* @bmiter__vert_of_edge_step to i8* (i8*)*), i8* (i8*)** %step33, align 8, !dbg !4344
  %35 = load i8*, i8** %data.addr, align 8, !dbg !4345
  %36 = bitcast i8* %35 to %struct.BMEdge*, !dbg !4346
  %37 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !4347
  %data34 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %37, i32 0, i32 0, !dbg !4348
  %vert_of_edge = bitcast %union.anon.0* %data34 to %struct.BMIter__vert_of_edge*, !dbg !4349
  %edata = getelementptr inbounds %struct.BMIter__vert_of_edge, %struct.BMIter__vert_of_edge* %vert_of_edge, i32 0, i32 0, !dbg !4350
  store %struct.BMEdge* %36, %struct.BMEdge** %edata, align 8, !dbg !4351
  br label %sw.epilog, !dbg !4352

sw.bb35:                                          ; preds = %entry
  %38 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !4353
  %begin36 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %38, i32 0, i32 1, !dbg !4354
  store void (i8*)* bitcast (void (%struct.BMIter__face_of_edge*)* @bmiter__face_of_edge_begin to void (i8*)*), void (i8*)** %begin36, align 8, !dbg !4355
  %39 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !4356
  %step37 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %39, i32 0, i32 2, !dbg !4357
  store i8* (i8*)* bitcast (i8* (%struct.BMIter__face_of_edge*)* @bmiter__face_of_edge_step to i8* (i8*)*), i8* (i8*)** %step37, align 8, !dbg !4358
  %40 = load i8*, i8** %data.addr, align 8, !dbg !4359
  %41 = bitcast i8* %40 to %struct.BMEdge*, !dbg !4360
  %42 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !4361
  %data38 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %42, i32 0, i32 0, !dbg !4362
  %face_of_edge = bitcast %union.anon.0* %data38 to %struct.BMIter__face_of_edge*, !dbg !4363
  %edata39 = getelementptr inbounds %struct.BMIter__face_of_edge, %struct.BMIter__face_of_edge* %face_of_edge, i32 0, i32 0, !dbg !4364
  store %struct.BMEdge* %41, %struct.BMEdge** %edata39, align 8, !dbg !4365
  br label %sw.epilog, !dbg !4366

sw.bb40:                                          ; preds = %entry
  %43 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !4367
  %begin41 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %43, i32 0, i32 1, !dbg !4368
  store void (i8*)* bitcast (void (%struct.BMIter__vert_of_face*)* @bmiter__vert_of_face_begin to void (i8*)*), void (i8*)** %begin41, align 8, !dbg !4369
  %44 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !4370
  %step42 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %44, i32 0, i32 2, !dbg !4371
  store i8* (i8*)* bitcast (i8* (%struct.BMIter__vert_of_face*)* @bmiter__vert_of_face_step to i8* (i8*)*), i8* (i8*)** %step42, align 8, !dbg !4372
  %45 = load i8*, i8** %data.addr, align 8, !dbg !4373
  %46 = bitcast i8* %45 to %struct.BMFace*, !dbg !4374
  %47 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !4375
  %data43 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %47, i32 0, i32 0, !dbg !4376
  %vert_of_face = bitcast %union.anon.0* %data43 to %struct.BMIter__vert_of_face*, !dbg !4377
  %pdata = getelementptr inbounds %struct.BMIter__vert_of_face, %struct.BMIter__vert_of_face* %vert_of_face, i32 0, i32 0, !dbg !4378
  store %struct.BMFace* %46, %struct.BMFace** %pdata, align 8, !dbg !4379
  br label %sw.epilog, !dbg !4380

sw.bb44:                                          ; preds = %entry
  %48 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !4381
  %begin45 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %48, i32 0, i32 1, !dbg !4382
  store void (i8*)* bitcast (void (%struct.BMIter__edge_of_face*)* @bmiter__edge_of_face_begin to void (i8*)*), void (i8*)** %begin45, align 8, !dbg !4383
  %49 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !4384
  %step46 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %49, i32 0, i32 2, !dbg !4385
  store i8* (i8*)* bitcast (i8* (%struct.BMIter__edge_of_face*)* @bmiter__edge_of_face_step to i8* (i8*)*), i8* (i8*)** %step46, align 8, !dbg !4386
  %50 = load i8*, i8** %data.addr, align 8, !dbg !4387
  %51 = bitcast i8* %50 to %struct.BMFace*, !dbg !4388
  %52 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !4389
  %data47 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %52, i32 0, i32 0, !dbg !4390
  %edge_of_face = bitcast %union.anon.0* %data47 to %struct.BMIter__edge_of_face*, !dbg !4391
  %pdata48 = getelementptr inbounds %struct.BMIter__edge_of_face, %struct.BMIter__edge_of_face* %edge_of_face, i32 0, i32 0, !dbg !4392
  store %struct.BMFace* %51, %struct.BMFace** %pdata48, align 8, !dbg !4393
  br label %sw.epilog, !dbg !4394

sw.bb49:                                          ; preds = %entry
  %53 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !4395
  %begin50 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %53, i32 0, i32 1, !dbg !4396
  store void (i8*)* bitcast (void (%struct.BMIter__loop_of_face*)* @bmiter__loop_of_face_begin to void (i8*)*), void (i8*)** %begin50, align 8, !dbg !4397
  %54 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !4398
  %step51 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %54, i32 0, i32 2, !dbg !4399
  store i8* (i8*)* bitcast (i8* (%struct.BMIter__loop_of_face*)* @bmiter__loop_of_face_step to i8* (i8*)*), i8* (i8*)** %step51, align 8, !dbg !4400
  %55 = load i8*, i8** %data.addr, align 8, !dbg !4401
  %56 = bitcast i8* %55 to %struct.BMFace*, !dbg !4402
  %57 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !4403
  %data52 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %57, i32 0, i32 0, !dbg !4404
  %loop_of_face = bitcast %union.anon.0* %data52 to %struct.BMIter__loop_of_face*, !dbg !4405
  %pdata53 = getelementptr inbounds %struct.BMIter__loop_of_face, %struct.BMIter__loop_of_face* %loop_of_face, i32 0, i32 0, !dbg !4406
  store %struct.BMFace* %56, %struct.BMFace** %pdata53, align 8, !dbg !4407
  br label %sw.epilog, !dbg !4408

sw.bb54:                                          ; preds = %entry
  %58 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !4409
  %begin55 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %58, i32 0, i32 1, !dbg !4410
  store void (i8*)* bitcast (void (%struct.BMIter__loop_of_loop*)* @bmiter__loop_of_loop_begin to void (i8*)*), void (i8*)** %begin55, align 8, !dbg !4411
  %59 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !4412
  %step56 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %59, i32 0, i32 2, !dbg !4413
  store i8* (i8*)* bitcast (i8* (%struct.BMIter__loop_of_loop*)* @bmiter__loop_of_loop_step to i8* (i8*)*), i8* (i8*)** %step56, align 8, !dbg !4414
  %60 = load i8*, i8** %data.addr, align 8, !dbg !4415
  %61 = bitcast i8* %60 to %struct.BMLoop*, !dbg !4416
  %62 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !4417
  %data57 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %62, i32 0, i32 0, !dbg !4418
  %loop_of_loop = bitcast %union.anon.0* %data57 to %struct.BMIter__loop_of_loop*, !dbg !4419
  %ldata = getelementptr inbounds %struct.BMIter__loop_of_loop, %struct.BMIter__loop_of_loop* %loop_of_loop, i32 0, i32 0, !dbg !4420
  store %struct.BMLoop* %61, %struct.BMLoop** %ldata, align 8, !dbg !4421
  br label %sw.epilog, !dbg !4422

sw.bb58:                                          ; preds = %entry
  %63 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !4423
  %begin59 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %63, i32 0, i32 1, !dbg !4424
  store void (i8*)* bitcast (void (%struct.BMIter__loop_of_edge*)* @bmiter__loop_of_edge_begin to void (i8*)*), void (i8*)** %begin59, align 8, !dbg !4425
  %64 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !4426
  %step60 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %64, i32 0, i32 2, !dbg !4427
  store i8* (i8*)* bitcast (i8* (%struct.BMIter__loop_of_edge*)* @bmiter__loop_of_edge_step to i8* (i8*)*), i8* (i8*)** %step60, align 8, !dbg !4428
  %65 = load i8*, i8** %data.addr, align 8, !dbg !4429
  %66 = bitcast i8* %65 to %struct.BMEdge*, !dbg !4430
  %67 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !4431
  %data61 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %67, i32 0, i32 0, !dbg !4432
  %loop_of_edge = bitcast %union.anon.0* %data61 to %struct.BMIter__loop_of_edge*, !dbg !4433
  %edata62 = getelementptr inbounds %struct.BMIter__loop_of_edge, %struct.BMIter__loop_of_edge* %loop_of_edge, i32 0, i32 0, !dbg !4434
  store %struct.BMEdge* %66, %struct.BMEdge** %edata62, align 8, !dbg !4435
  br label %sw.epilog, !dbg !4436

sw.default:                                       ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !4437
  br label %return, !dbg !4437

sw.epilog:                                        ; preds = %sw.bb58, %sw.bb54, %sw.bb49, %sw.bb44, %sw.bb40, %sw.bb35, %sw.bb31, %sw.bb26, %sw.bb21, %sw.bb17, %sw.bb10, %sw.bb3, %sw.bb
  %68 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !4438
  %begin63 = getelementptr inbounds %struct.BMIter, %struct.BMIter* %68, i32 0, i32 1, !dbg !4439
  %69 = load void (i8*)*, void (i8*)** %begin63, align 8, !dbg !4439
  %70 = load %struct.BMIter*, %struct.BMIter** %iter.addr, align 8, !dbg !4440
  %71 = bitcast %struct.BMIter* %70 to i8*, !dbg !4440
  call void %69(i8* %71), !dbg !4438
  store i8 1, i8* %retval, align 1, !dbg !4441
  br label %return, !dbg !4441

return:                                           ; preds = %sw.epilog, %sw.default
  %72 = load i8, i8* %retval, align 1, !dbg !4442
  ret i8 %72, !dbg !4442
}

declare dso_local void @bmiter__elem_of_mesh_begin(%struct.BMIter__elem_of_mesh*) #3

declare dso_local i8* @bmiter__elem_of_mesh_step(%struct.BMIter__elem_of_mesh*) #3

declare dso_local void @bmiter__edge_of_vert_begin(%struct.BMIter__edge_of_vert*) #3

declare dso_local i8* @bmiter__edge_of_vert_step(%struct.BMIter__edge_of_vert*) #3

declare dso_local void @bmiter__face_of_vert_begin(%struct.BMIter__face_of_vert*) #3

declare dso_local i8* @bmiter__face_of_vert_step(%struct.BMIter__face_of_vert*) #3

declare dso_local void @bmiter__loop_of_vert_begin(%struct.BMIter__loop_of_vert*) #3

declare dso_local i8* @bmiter__loop_of_vert_step(%struct.BMIter__loop_of_vert*) #3

declare dso_local void @bmiter__vert_of_edge_begin(%struct.BMIter__vert_of_edge*) #3

declare dso_local i8* @bmiter__vert_of_edge_step(%struct.BMIter__vert_of_edge*) #3

declare dso_local void @bmiter__face_of_edge_begin(%struct.BMIter__face_of_edge*) #3

declare dso_local i8* @bmiter__face_of_edge_step(%struct.BMIter__face_of_edge*) #3

declare dso_local void @bmiter__vert_of_face_begin(%struct.BMIter__vert_of_face*) #3

declare dso_local i8* @bmiter__vert_of_face_step(%struct.BMIter__vert_of_face*) #3

declare dso_local void @bmiter__edge_of_face_begin(%struct.BMIter__edge_of_face*) #3

declare dso_local i8* @bmiter__edge_of_face_step(%struct.BMIter__edge_of_face*) #3

declare dso_local void @bmiter__loop_of_face_begin(%struct.BMIter__loop_of_face*) #3

declare dso_local i8* @bmiter__loop_of_face_step(%struct.BMIter__loop_of_face*) #3

declare dso_local void @bmiter__loop_of_loop_begin(%struct.BMIter__loop_of_loop*) #3

declare dso_local i8* @bmiter__loop_of_loop_step(%struct.BMIter__loop_of_loop*) #3

declare dso_local void @bmiter__loop_of_edge_begin(%struct.BMIter__loop_of_edge*) #3

declare dso_local i8* @bmiter__loop_of_edge_step(%struct.BMIter__loop_of_edge*) #3

declare dso_local i32 @BM_edge_face_count(%struct.BMEdge*) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @BM_edge_is_wire(%struct.BMEdge* %e) #0 !dbg !4443 {
entry:
  %e.addr = alloca %struct.BMEdge*, align 8
  store %struct.BMEdge* %e, %struct.BMEdge** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMEdge** %e.addr, metadata !4448, metadata !DIExpression()), !dbg !4449
  %0 = load %struct.BMEdge*, %struct.BMEdge** %e.addr, align 8, !dbg !4450
  %l = getelementptr inbounds %struct.BMEdge, %struct.BMEdge* %0, i32 0, i32 4, !dbg !4451
  %1 = load %struct.BMLoop*, %struct.BMLoop** %l, align 8, !dbg !4451
  %cmp = icmp eq %struct.BMLoop* %1, null, !dbg !4452
  %conv = zext i1 %cmp to i32, !dbg !4452
  %conv1 = trunc i32 %conv to i8, !dbg !4453
  ret i8 %conv1, !dbg !4454
}

; Function Attrs: noinline nounwind uwtable
define internal void @_bm_elem_flag_disable(%struct.BMHeader* %head, i8 zeroext %hflag) #0 !dbg !4455 {
entry:
  %head.addr = alloca %struct.BMHeader*, align 8
  %hflag.addr = alloca i8, align 1
  store %struct.BMHeader* %head, %struct.BMHeader** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMHeader** %head.addr, metadata !4459, metadata !DIExpression()), !dbg !4460
  store i8 %hflag, i8* %hflag.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %hflag.addr, metadata !4461, metadata !DIExpression()), !dbg !4462
  %0 = load i8, i8* %hflag.addr, align 1, !dbg !4463
  %conv = zext i8 %0 to i32, !dbg !4463
  %neg = xor i32 %conv, -1, !dbg !4464
  %conv1 = trunc i32 %neg to i8, !dbg !4465
  %conv2 = zext i8 %conv1 to i32, !dbg !4465
  %1 = load %struct.BMHeader*, %struct.BMHeader** %head.addr, align 8, !dbg !4466
  %hflag3 = getelementptr inbounds %struct.BMHeader, %struct.BMHeader* %1, i32 0, i32 3, !dbg !4467
  %2 = load i8, i8* %hflag3, align 1, !dbg !4468
  %conv4 = zext i8 %2 to i32, !dbg !4468
  %and = and i32 %conv4, %conv2, !dbg !4468
  %conv5 = trunc i32 %and to i8, !dbg !4468
  store i8 %conv5, i8* %hflag3, align 1, !dbg !4468
  ret void, !dbg !4469
}

declare dso_local float @defvert_find_weight(%struct.MDeformVert*, i32) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @_bm_elem_index_get(%struct.BMHeader* %head) #0 !dbg !4470 {
entry:
  %head.addr = alloca %struct.BMHeader*, align 8
  store %struct.BMHeader* %head, %struct.BMHeader** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMHeader** %head.addr, metadata !4473, metadata !DIExpression()), !dbg !4474
  %0 = load %struct.BMHeader*, %struct.BMHeader** %head.addr, align 8, !dbg !4475
  %index = getelementptr inbounds %struct.BMHeader, %struct.BMHeader* %0, i32 0, i32 1, !dbg !4476
  %1 = load i32, i32* %index, align 8, !dbg !4476
  ret i32 %1, !dbg !4477
}

declare dso_local float @BM_elem_float_data_get(%struct.CustomData*, i8*, i32) #3

declare dso_local void @BLI_ghash_insert(%struct.GHash*, i8*, i8*) #3

declare dso_local %struct.BMLoop* @BM_face_edge_share_loop(%struct.BMFace*, %struct.BMEdge*) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @bev_ccw_test(%struct.BMEdge* %a, %struct.BMEdge* %b, %struct.BMFace* %f) #0 !dbg !4478 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca %struct.BMEdge*, align 8
  %b.addr = alloca %struct.BMEdge*, align 8
  %f.addr = alloca %struct.BMFace*, align 8
  %la = alloca %struct.BMLoop*, align 8
  %lb = alloca %struct.BMLoop*, align 8
  store %struct.BMEdge* %a, %struct.BMEdge** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMEdge** %a.addr, metadata !4481, metadata !DIExpression()), !dbg !4482
  store %struct.BMEdge* %b, %struct.BMEdge** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMEdge** %b.addr, metadata !4483, metadata !DIExpression()), !dbg !4484
  store %struct.BMFace* %f, %struct.BMFace** %f.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMFace** %f.addr, metadata !4485, metadata !DIExpression()), !dbg !4486
  call void @llvm.dbg.declare(metadata %struct.BMLoop** %la, metadata !4487, metadata !DIExpression()), !dbg !4488
  call void @llvm.dbg.declare(metadata %struct.BMLoop** %lb, metadata !4489, metadata !DIExpression()), !dbg !4490
  %0 = load %struct.BMFace*, %struct.BMFace** %f.addr, align 8, !dbg !4491
  %tobool = icmp ne %struct.BMFace* %0, null, !dbg !4491
  br i1 %tobool, label %if.end, label %if.then, !dbg !4493

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !4494
  br label %return, !dbg !4494

if.end:                                           ; preds = %entry
  %1 = load %struct.BMFace*, %struct.BMFace** %f.addr, align 8, !dbg !4495
  %2 = load %struct.BMEdge*, %struct.BMEdge** %a.addr, align 8, !dbg !4496
  %call = call %struct.BMLoop* @BM_face_edge_share_loop(%struct.BMFace* %1, %struct.BMEdge* %2), !dbg !4497
  store %struct.BMLoop* %call, %struct.BMLoop** %la, align 8, !dbg !4498
  %3 = load %struct.BMFace*, %struct.BMFace** %f.addr, align 8, !dbg !4499
  %4 = load %struct.BMEdge*, %struct.BMEdge** %b.addr, align 8, !dbg !4500
  %call1 = call %struct.BMLoop* @BM_face_edge_share_loop(%struct.BMFace* %3, %struct.BMEdge* %4), !dbg !4501
  store %struct.BMLoop* %call1, %struct.BMLoop** %lb, align 8, !dbg !4502
  %5 = load %struct.BMLoop*, %struct.BMLoop** %la, align 8, !dbg !4503
  %tobool2 = icmp ne %struct.BMLoop* %5, null, !dbg !4503
  br i1 %tobool2, label %lor.lhs.false, label %if.then4, !dbg !4505

lor.lhs.false:                                    ; preds = %if.end
  %6 = load %struct.BMLoop*, %struct.BMLoop** %lb, align 8, !dbg !4506
  %tobool3 = icmp ne %struct.BMLoop* %6, null, !dbg !4506
  br i1 %tobool3, label %if.end5, label %if.then4, !dbg !4507

if.then4:                                         ; preds = %lor.lhs.false, %if.end
  store i32 0, i32* %retval, align 4, !dbg !4508
  br label %return, !dbg !4508

if.end5:                                          ; preds = %lor.lhs.false
  %7 = load %struct.BMLoop*, %struct.BMLoop** %lb, align 8, !dbg !4509
  %next = getelementptr inbounds %struct.BMLoop, %struct.BMLoop* %7, i32 0, i32 6, !dbg !4510
  %8 = load %struct.BMLoop*, %struct.BMLoop** %next, align 8, !dbg !4510
  %9 = load %struct.BMLoop*, %struct.BMLoop** %la, align 8, !dbg !4511
  %cmp = icmp eq %struct.BMLoop* %8, %9, !dbg !4512
  %10 = zext i1 %cmp to i64, !dbg !4509
  %cond = select i1 %cmp, i32 1, i32 -1, !dbg !4509
  store i32 %cond, i32* %retval, align 4, !dbg !4513
  br label %return, !dbg !4513

return:                                           ; preds = %if.end5, %if.then4, %if.then
  %11 = load i32, i32* %retval, align 4, !dbg !4514
  ret i32 %11, !dbg !4514
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

; Function Attrs: noinline nounwind uwtable
define internal float @edge_face_angle(%struct.EdgeHalf* %e) #0 !dbg !4515 {
entry:
  %retval = alloca float, align 4
  %e.addr = alloca %struct.EdgeHalf*, align 8
  store %struct.EdgeHalf* %e, %struct.EdgeHalf** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.EdgeHalf** %e.addr, metadata !4518, metadata !DIExpression()), !dbg !4519
  %0 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e.addr, align 8, !dbg !4520
  %fprev = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %0, i32 0, i32 3, !dbg !4522
  %1 = load %struct.BMFace*, %struct.BMFace** %fprev, align 8, !dbg !4522
  %tobool = icmp ne %struct.BMFace* %1, null, !dbg !4520
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !4523

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e.addr, align 8, !dbg !4524
  %fnext = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %2, i32 0, i32 4, !dbg !4525
  %3 = load %struct.BMFace*, %struct.BMFace** %fnext, align 8, !dbg !4525
  %tobool1 = icmp ne %struct.BMFace* %3, null, !dbg !4524
  br i1 %tobool1, label %if.then, label %if.else, !dbg !4526

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e.addr, align 8, !dbg !4527
  %fprev2 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %4, i32 0, i32 3, !dbg !4529
  %5 = load %struct.BMFace*, %struct.BMFace** %fprev2, align 8, !dbg !4529
  %no = getelementptr inbounds %struct.BMFace, %struct.BMFace* %5, i32 0, i32 4, !dbg !4530
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %no, i64 0, i64 0, !dbg !4527
  %6 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e.addr, align 8, !dbg !4531
  %fnext3 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %6, i32 0, i32 4, !dbg !4532
  %7 = load %struct.BMFace*, %struct.BMFace** %fnext3, align 8, !dbg !4532
  %no4 = getelementptr inbounds %struct.BMFace, %struct.BMFace* %7, i32 0, i32 4, !dbg !4533
  %arraydecay5 = getelementptr inbounds [3 x float], [3 x float]* %no4, i64 0, i64 0, !dbg !4531
  %call = call float @angle_normalized_v3v3(float* %arraydecay, float* %arraydecay5), !dbg !4534
  %sub = fsub float 0x400921FB60000000, %call, !dbg !4535
  store float %sub, float* %retval, align 4, !dbg !4536
  br label %return, !dbg !4536

if.else:                                          ; preds = %land.lhs.true, %entry
  store float 0.000000e+00, float* %retval, align 4, !dbg !4537
  br label %return, !dbg !4537

return:                                           ; preds = %if.else, %if.then
  %8 = load float, float* %retval, align 4, !dbg !4539
  ret float %8, !dbg !4539
}

declare dso_local float @angle_v3v3v3(float*, float*, float*) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @contig_ldata_across_edge(%struct.BMesh* %bm, %struct.BMEdge* %e, %struct.BMFace* %f1, %struct.BMFace* %f2) #0 !dbg !4540 {
entry:
  %retval = alloca i8, align 1
  %bm.addr = alloca %struct.BMesh*, align 8
  %e.addr = alloca %struct.BMEdge*, align 8
  %f1.addr = alloca %struct.BMFace*, align 8
  %f2.addr = alloca %struct.BMFace*, align 8
  %lef1 = alloca %struct.BMLoop*, align 8
  %lef2 = alloca %struct.BMLoop*, align 8
  %lv1f1 = alloca %struct.BMLoop*, align 8
  %lv1f2 = alloca %struct.BMLoop*, align 8
  %lv2f1 = alloca %struct.BMLoop*, align 8
  %lv2f2 = alloca %struct.BMLoop*, align 8
  %v1 = alloca %struct.BMVert*, align 8
  %v2 = alloca %struct.BMVert*, align 8
  %i = alloca i32, align 4
  %sw_ap = alloca %struct.BMLoop*, align 8
  store %struct.BMesh* %bm, %struct.BMesh** %bm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMesh** %bm.addr, metadata !4543, metadata !DIExpression()), !dbg !4544
  store %struct.BMEdge* %e, %struct.BMEdge** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMEdge** %e.addr, metadata !4545, metadata !DIExpression()), !dbg !4546
  store %struct.BMFace* %f1, %struct.BMFace** %f1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMFace** %f1.addr, metadata !4547, metadata !DIExpression()), !dbg !4548
  store %struct.BMFace* %f2, %struct.BMFace** %f2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMFace** %f2.addr, metadata !4549, metadata !DIExpression()), !dbg !4550
  call void @llvm.dbg.declare(metadata %struct.BMLoop** %lef1, metadata !4551, metadata !DIExpression()), !dbg !4552
  call void @llvm.dbg.declare(metadata %struct.BMLoop** %lef2, metadata !4553, metadata !DIExpression()), !dbg !4554
  call void @llvm.dbg.declare(metadata %struct.BMLoop** %lv1f1, metadata !4555, metadata !DIExpression()), !dbg !4556
  call void @llvm.dbg.declare(metadata %struct.BMLoop** %lv1f2, metadata !4557, metadata !DIExpression()), !dbg !4558
  call void @llvm.dbg.declare(metadata %struct.BMLoop** %lv2f1, metadata !4559, metadata !DIExpression()), !dbg !4560
  call void @llvm.dbg.declare(metadata %struct.BMLoop** %lv2f2, metadata !4561, metadata !DIExpression()), !dbg !4562
  call void @llvm.dbg.declare(metadata %struct.BMVert** %v1, metadata !4563, metadata !DIExpression()), !dbg !4564
  call void @llvm.dbg.declare(metadata %struct.BMVert** %v2, metadata !4565, metadata !DIExpression()), !dbg !4566
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4567, metadata !DIExpression()), !dbg !4568
  %0 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !4569
  %ldata = getelementptr inbounds %struct.BMesh, %struct.BMesh* %0, i32 0, i32 26, !dbg !4571
  %totlayer = getelementptr inbounds %struct.CustomData, %struct.CustomData* %ldata, i32 0, i32 2, !dbg !4572
  %1 = load i32, i32* %totlayer, align 4, !dbg !4572
  %cmp = icmp eq i32 %1, 0, !dbg !4573
  br i1 %cmp, label %if.then, label %if.end, !dbg !4574

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !4575
  br label %return, !dbg !4575

if.end:                                           ; preds = %entry
  %2 = load %struct.BMEdge*, %struct.BMEdge** %e.addr, align 8, !dbg !4576
  %v11 = getelementptr inbounds %struct.BMEdge, %struct.BMEdge* %2, i32 0, i32 2, !dbg !4577
  %3 = load %struct.BMVert*, %struct.BMVert** %v11, align 8, !dbg !4577
  store %struct.BMVert* %3, %struct.BMVert** %v1, align 8, !dbg !4578
  %4 = load %struct.BMEdge*, %struct.BMEdge** %e.addr, align 8, !dbg !4579
  %v22 = getelementptr inbounds %struct.BMEdge, %struct.BMEdge* %4, i32 0, i32 3, !dbg !4580
  %5 = load %struct.BMVert*, %struct.BMVert** %v22, align 8, !dbg !4580
  store %struct.BMVert* %5, %struct.BMVert** %v2, align 8, !dbg !4581
  %6 = load %struct.BMEdge*, %struct.BMEdge** %e.addr, align 8, !dbg !4582
  %call = call zeroext i8 @BM_edge_loop_pair(%struct.BMEdge* %6, %struct.BMLoop** %lef1, %struct.BMLoop** %lef2), !dbg !4584
  %tobool = icmp ne i8 %call, 0, !dbg !4584
  br i1 %tobool, label %if.end4, label %if.then3, !dbg !4585

if.then3:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !4586
  br label %return, !dbg !4586

if.end4:                                          ; preds = %if.end
  %7 = load %struct.BMLoop*, %struct.BMLoop** %lef1, align 8, !dbg !4587
  %f = getelementptr inbounds %struct.BMLoop, %struct.BMLoop* %7, i32 0, i32 3, !dbg !4589
  %8 = load %struct.BMFace*, %struct.BMFace** %f, align 8, !dbg !4589
  %9 = load %struct.BMFace*, %struct.BMFace** %f2.addr, align 8, !dbg !4590
  %cmp5 = icmp eq %struct.BMFace* %8, %9, !dbg !4591
  br i1 %cmp5, label %if.then6, label %if.end7, !dbg !4592

if.then6:                                         ; preds = %if.end4
  call void @llvm.dbg.declare(metadata %struct.BMLoop** %sw_ap, metadata !4593, metadata !DIExpression()), !dbg !4596
  %10 = load %struct.BMLoop*, %struct.BMLoop** %lef1, align 8, !dbg !4596
  store %struct.BMLoop* %10, %struct.BMLoop** %sw_ap, align 8, !dbg !4596
  %11 = load %struct.BMLoop*, %struct.BMLoop** %lef2, align 8, !dbg !4596
  store %struct.BMLoop* %11, %struct.BMLoop** %lef1, align 8, !dbg !4596
  %12 = load %struct.BMLoop*, %struct.BMLoop** %sw_ap, align 8, !dbg !4596
  store %struct.BMLoop* %12, %struct.BMLoop** %lef2, align 8, !dbg !4596
  br label %if.end7, !dbg !4597

if.end7:                                          ; preds = %if.then6, %if.end4
  %13 = load %struct.BMLoop*, %struct.BMLoop** %lef1, align 8, !dbg !4598
  %v = getelementptr inbounds %struct.BMLoop, %struct.BMLoop* %13, i32 0, i32 1, !dbg !4600
  %14 = load %struct.BMVert*, %struct.BMVert** %v, align 8, !dbg !4600
  %15 = load %struct.BMVert*, %struct.BMVert** %v1, align 8, !dbg !4601
  %cmp8 = icmp eq %struct.BMVert* %14, %15, !dbg !4602
  br i1 %cmp8, label %if.then9, label %if.else, !dbg !4603

if.then9:                                         ; preds = %if.end7
  %16 = load %struct.BMLoop*, %struct.BMLoop** %lef1, align 8, !dbg !4604
  store %struct.BMLoop* %16, %struct.BMLoop** %lv1f1, align 8, !dbg !4606
  %17 = load %struct.BMFace*, %struct.BMFace** %f1.addr, align 8, !dbg !4607
  %18 = load %struct.BMEdge*, %struct.BMEdge** %e.addr, align 8, !dbg !4608
  %19 = load %struct.BMVert*, %struct.BMVert** %v2, align 8, !dbg !4609
  %call10 = call %struct.BMLoop* @BM_face_other_edge_loop(%struct.BMFace* %17, %struct.BMEdge* %18, %struct.BMVert* %19), !dbg !4610
  store %struct.BMLoop* %call10, %struct.BMLoop** %lv2f1, align 8, !dbg !4611
  br label %if.end12, !dbg !4612

if.else:                                          ; preds = %if.end7
  %20 = load %struct.BMLoop*, %struct.BMLoop** %lef1, align 8, !dbg !4613
  store %struct.BMLoop* %20, %struct.BMLoop** %lv2f1, align 8, !dbg !4615
  %21 = load %struct.BMFace*, %struct.BMFace** %f1.addr, align 8, !dbg !4616
  %22 = load %struct.BMEdge*, %struct.BMEdge** %e.addr, align 8, !dbg !4617
  %23 = load %struct.BMVert*, %struct.BMVert** %v1, align 8, !dbg !4618
  %call11 = call %struct.BMLoop* @BM_face_other_edge_loop(%struct.BMFace* %21, %struct.BMEdge* %22, %struct.BMVert* %23), !dbg !4619
  store %struct.BMLoop* %call11, %struct.BMLoop** %lv1f1, align 8, !dbg !4620
  br label %if.end12

if.end12:                                         ; preds = %if.else, %if.then9
  %24 = load %struct.BMLoop*, %struct.BMLoop** %lef2, align 8, !dbg !4621
  %v13 = getelementptr inbounds %struct.BMLoop, %struct.BMLoop* %24, i32 0, i32 1, !dbg !4623
  %25 = load %struct.BMVert*, %struct.BMVert** %v13, align 8, !dbg !4623
  %26 = load %struct.BMVert*, %struct.BMVert** %v1, align 8, !dbg !4624
  %cmp14 = icmp eq %struct.BMVert* %25, %26, !dbg !4625
  br i1 %cmp14, label %if.then15, label %if.else17, !dbg !4626

if.then15:                                        ; preds = %if.end12
  %27 = load %struct.BMLoop*, %struct.BMLoop** %lef2, align 8, !dbg !4627
  store %struct.BMLoop* %27, %struct.BMLoop** %lv1f2, align 8, !dbg !4629
  %28 = load %struct.BMFace*, %struct.BMFace** %f2.addr, align 8, !dbg !4630
  %29 = load %struct.BMEdge*, %struct.BMEdge** %e.addr, align 8, !dbg !4631
  %30 = load %struct.BMVert*, %struct.BMVert** %v2, align 8, !dbg !4632
  %call16 = call %struct.BMLoop* @BM_face_other_edge_loop(%struct.BMFace* %28, %struct.BMEdge* %29, %struct.BMVert* %30), !dbg !4633
  store %struct.BMLoop* %call16, %struct.BMLoop** %lv2f2, align 8, !dbg !4634
  br label %if.end19, !dbg !4635

if.else17:                                        ; preds = %if.end12
  %31 = load %struct.BMLoop*, %struct.BMLoop** %lef2, align 8, !dbg !4636
  store %struct.BMLoop* %31, %struct.BMLoop** %lv2f2, align 8, !dbg !4638
  %32 = load %struct.BMFace*, %struct.BMFace** %f2.addr, align 8, !dbg !4639
  %33 = load %struct.BMEdge*, %struct.BMEdge** %e.addr, align 8, !dbg !4640
  %34 = load %struct.BMVert*, %struct.BMVert** %v1, align 8, !dbg !4641
  %call18 = call %struct.BMLoop* @BM_face_other_edge_loop(%struct.BMFace* %32, %struct.BMEdge* %33, %struct.BMVert* %34), !dbg !4642
  store %struct.BMLoop* %call18, %struct.BMLoop** %lv1f2, align 8, !dbg !4643
  br label %if.end19

if.end19:                                         ; preds = %if.else17, %if.then15
  store i32 0, i32* %i, align 4, !dbg !4644
  br label %for.cond, !dbg !4646

for.cond:                                         ; preds = %for.inc, %if.end19
  %35 = load i32, i32* %i, align 4, !dbg !4647
  %36 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !4649
  %ldata20 = getelementptr inbounds %struct.BMesh, %struct.BMesh* %36, i32 0, i32 26, !dbg !4650
  %totlayer21 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %ldata20, i32 0, i32 2, !dbg !4651
  %37 = load i32, i32* %totlayer21, align 4, !dbg !4651
  %cmp22 = icmp slt i32 %35, %37, !dbg !4652
  br i1 %cmp22, label %for.body, label %for.end, !dbg !4653

for.body:                                         ; preds = %for.cond
  %38 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !4654
  %ldata23 = getelementptr inbounds %struct.BMesh, %struct.BMesh* %38, i32 0, i32 26, !dbg !4657
  %39 = load i32, i32* %i, align 4, !dbg !4658
  %call24 = call zeroext i8 @CustomData_layer_has_math(%struct.CustomData* %ldata23, i32 %39), !dbg !4659
  %conv = zext i8 %call24 to i32, !dbg !4659
  %tobool25 = icmp ne i32 %conv, 0, !dbg !4659
  br i1 %tobool25, label %land.lhs.true, label %if.end31, !dbg !4660

land.lhs.true:                                    ; preds = %for.body
  %40 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !4661
  %41 = load %struct.BMLoop*, %struct.BMLoop** %lv1f1, align 8, !dbg !4662
  %42 = load %struct.BMLoop*, %struct.BMLoop** %lv1f2, align 8, !dbg !4663
  %43 = load i32, i32* %i, align 4, !dbg !4664
  %call26 = call zeroext i8 @contig_ldata_across_loops(%struct.BMesh* %40, %struct.BMLoop* %41, %struct.BMLoop* %42, i32 %43), !dbg !4665
  %tobool27 = icmp ne i8 %call26, 0, !dbg !4665
  br i1 %tobool27, label %lor.lhs.false, label %if.then30, !dbg !4666

lor.lhs.false:                                    ; preds = %land.lhs.true
  %44 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !4667
  %45 = load %struct.BMLoop*, %struct.BMLoop** %lv2f1, align 8, !dbg !4668
  %46 = load %struct.BMLoop*, %struct.BMLoop** %lv2f2, align 8, !dbg !4669
  %47 = load i32, i32* %i, align 4, !dbg !4670
  %call28 = call zeroext i8 @contig_ldata_across_loops(%struct.BMesh* %44, %struct.BMLoop* %45, %struct.BMLoop* %46, i32 %47), !dbg !4671
  %tobool29 = icmp ne i8 %call28, 0, !dbg !4671
  br i1 %tobool29, label %if.end31, label %if.then30, !dbg !4672

if.then30:                                        ; preds = %lor.lhs.false, %land.lhs.true
  store i8 0, i8* %retval, align 1, !dbg !4673
  br label %return, !dbg !4673

if.end31:                                         ; preds = %lor.lhs.false, %for.body
  br label %for.inc, !dbg !4675

for.inc:                                          ; preds = %if.end31
  %48 = load i32, i32* %i, align 4, !dbg !4676
  %inc = add nsw i32 %48, 1, !dbg !4676
  store i32 %inc, i32* %i, align 4, !dbg !4676
  br label %for.cond, !dbg !4677, !llvm.loop !4678

for.end:                                          ; preds = %for.cond
  store i8 1, i8* %retval, align 1, !dbg !4680
  br label %return, !dbg !4680

return:                                           ; preds = %for.end, %if.then30, %if.then3, %if.then
  %49 = load i8, i8* %retval, align 1, !dbg !4681
  ret i8 %49, !dbg !4681
}

declare dso_local float @angle_normalized_v3v3(float*, float*) #3

declare dso_local zeroext i8 @BM_edge_loop_pair(%struct.BMEdge*, %struct.BMLoop**, %struct.BMLoop**) #3

declare dso_local %struct.BMLoop* @BM_face_other_edge_loop(%struct.BMFace*, %struct.BMEdge*, %struct.BMVert*) #3

declare dso_local zeroext i8 @CustomData_layer_has_math(%struct.CustomData*, i32) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @contig_ldata_across_loops(%struct.BMesh* %bm, %struct.BMLoop* %l1, %struct.BMLoop* %l2, i32 %layer_index) #0 !dbg !4682 {
entry:
  %bm.addr = alloca %struct.BMesh*, align 8
  %l1.addr = alloca %struct.BMLoop*, align 8
  %l2.addr = alloca %struct.BMLoop*, align 8
  %layer_index.addr = alloca i32, align 4
  %offset = alloca i32, align 4
  %type = alloca i32, align 4
  store %struct.BMesh* %bm, %struct.BMesh** %bm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMesh** %bm.addr, metadata !4685, metadata !DIExpression()), !dbg !4686
  store %struct.BMLoop* %l1, %struct.BMLoop** %l1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMLoop** %l1.addr, metadata !4687, metadata !DIExpression()), !dbg !4688
  store %struct.BMLoop* %l2, %struct.BMLoop** %l2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMLoop** %l2.addr, metadata !4689, metadata !DIExpression()), !dbg !4690
  store i32 %layer_index, i32* %layer_index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %layer_index.addr, metadata !4691, metadata !DIExpression()), !dbg !4692
  call void @llvm.dbg.declare(metadata i32* %offset, metadata !4693, metadata !DIExpression()), !dbg !4694
  %0 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !4695
  %ldata = getelementptr inbounds %struct.BMesh, %struct.BMesh* %0, i32 0, i32 26, !dbg !4696
  %layers = getelementptr inbounds %struct.CustomData, %struct.CustomData* %ldata, i32 0, i32 0, !dbg !4697
  %1 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers, align 8, !dbg !4697
  %2 = load i32, i32* %layer_index.addr, align 4, !dbg !4698
  %idxprom = sext i32 %2 to i64, !dbg !4695
  %arrayidx = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %1, i64 %idxprom, !dbg !4695
  %offset1 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx, i32 0, i32 1, !dbg !4699
  %3 = load i32, i32* %offset1, align 4, !dbg !4699
  store i32 %3, i32* %offset, align 4, !dbg !4694
  call void @llvm.dbg.declare(metadata i32* %type, metadata !4700, metadata !DIExpression()), !dbg !4701
  %4 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !4702
  %ldata2 = getelementptr inbounds %struct.BMesh, %struct.BMesh* %4, i32 0, i32 26, !dbg !4703
  %layers3 = getelementptr inbounds %struct.CustomData, %struct.CustomData* %ldata2, i32 0, i32 0, !dbg !4704
  %5 = load %struct.CustomDataLayer*, %struct.CustomDataLayer** %layers3, align 8, !dbg !4704
  %6 = load i32, i32* %layer_index.addr, align 4, !dbg !4705
  %idxprom4 = sext i32 %6 to i64, !dbg !4702
  %arrayidx5 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %5, i64 %idxprom4, !dbg !4702
  %type6 = getelementptr inbounds %struct.CustomDataLayer, %struct.CustomDataLayer* %arrayidx5, i32 0, i32 0, !dbg !4706
  %7 = load i32, i32* %type6, align 8, !dbg !4706
  store i32 %7, i32* %type, align 4, !dbg !4701
  %8 = load i32, i32* %type, align 4, !dbg !4707
  %9 = load %struct.BMLoop*, %struct.BMLoop** %l1.addr, align 8, !dbg !4708
  %head = getelementptr inbounds %struct.BMLoop, %struct.BMLoop* %9, i32 0, i32 0, !dbg !4709
  %data = getelementptr inbounds %struct.BMHeader, %struct.BMHeader* %head, i32 0, i32 0, !dbg !4710
  %10 = load i8*, i8** %data, align 8, !dbg !4710
  %11 = load i32, i32* %offset, align 4, !dbg !4711
  %idx.ext = sext i32 %11 to i64, !dbg !4712
  %add.ptr = getelementptr inbounds i8, i8* %10, i64 %idx.ext, !dbg !4712
  %12 = load %struct.BMLoop*, %struct.BMLoop** %l2.addr, align 8, !dbg !4713
  %head7 = getelementptr inbounds %struct.BMLoop, %struct.BMLoop* %12, i32 0, i32 0, !dbg !4714
  %data8 = getelementptr inbounds %struct.BMHeader, %struct.BMHeader* %head7, i32 0, i32 0, !dbg !4715
  %13 = load i8*, i8** %data8, align 8, !dbg !4715
  %14 = load i32, i32* %offset, align 4, !dbg !4716
  %idx.ext9 = sext i32 %14 to i64, !dbg !4717
  %add.ptr10 = getelementptr inbounds i8, i8* %13, i64 %idx.ext9, !dbg !4717
  %call = call zeroext i8 @CustomData_data_equals(i32 %8, i8* %add.ptr, i8* %add.ptr10), !dbg !4718
  ret i8 %call, !dbg !4719
}

declare dso_local zeroext i8 @CustomData_data_equals(i32, i8*, i8*) #3

; Function Attrs: noinline nounwind uwtable
define internal %struct.EdgeHalf* @next_bev(%struct.BevVert* %bv, %struct.EdgeHalf* %from_e) #0 !dbg !4720 {
entry:
  %retval = alloca %struct.EdgeHalf*, align 8
  %bv.addr = alloca %struct.BevVert*, align 8
  %from_e.addr = alloca %struct.EdgeHalf*, align 8
  %e = alloca %struct.EdgeHalf*, align 8
  store %struct.BevVert* %bv, %struct.BevVert** %bv.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BevVert** %bv.addr, metadata !4723, metadata !DIExpression()), !dbg !4724
  store %struct.EdgeHalf* %from_e, %struct.EdgeHalf** %from_e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.EdgeHalf** %from_e.addr, metadata !4725, metadata !DIExpression()), !dbg !4726
  call void @llvm.dbg.declare(metadata %struct.EdgeHalf** %e, metadata !4727, metadata !DIExpression()), !dbg !4728
  %0 = load %struct.EdgeHalf*, %struct.EdgeHalf** %from_e.addr, align 8, !dbg !4729
  %cmp = icmp eq %struct.EdgeHalf* %0, null, !dbg !4731
  br i1 %cmp, label %if.then, label %if.end, !dbg !4732

if.then:                                          ; preds = %entry
  %1 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !4733
  %edges = getelementptr inbounds %struct.BevVert, %struct.BevVert* %1, i32 0, i32 7, !dbg !4734
  %2 = load %struct.EdgeHalf*, %struct.EdgeHalf** %edges, align 8, !dbg !4734
  %3 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !4735
  %edgecount = getelementptr inbounds %struct.BevVert, %struct.BevVert* %3, i32 0, i32 1, !dbg !4736
  %4 = load i32, i32* %edgecount, align 8, !dbg !4736
  %sub = sub nsw i32 %4, 1, !dbg !4737
  %idxprom = sext i32 %sub to i64, !dbg !4733
  %arrayidx = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %2, i64 %idxprom, !dbg !4733
  store %struct.EdgeHalf* %arrayidx, %struct.EdgeHalf** %from_e.addr, align 8, !dbg !4738
  br label %if.end, !dbg !4739

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.EdgeHalf*, %struct.EdgeHalf** %from_e.addr, align 8, !dbg !4740
  store %struct.EdgeHalf* %5, %struct.EdgeHalf** %e, align 8, !dbg !4741
  br label %do.body, !dbg !4742

do.body:                                          ; preds = %do.cond, %if.end
  %6 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !4743
  %is_bev = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %6, i32 0, i32 12, !dbg !4746
  %7 = load i8, i8* %is_bev, align 4, !dbg !4746
  %tobool = icmp ne i8 %7, 0, !dbg !4743
  br i1 %tobool, label %if.then1, label %if.end2, !dbg !4747

if.then1:                                         ; preds = %do.body
  %8 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !4748
  store %struct.EdgeHalf* %8, %struct.EdgeHalf** %retval, align 8, !dbg !4750
  br label %return, !dbg !4750

if.end2:                                          ; preds = %do.body
  br label %do.cond, !dbg !4751

do.cond:                                          ; preds = %if.end2
  %9 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !4752
  %next = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %9, i32 0, i32 0, !dbg !4753
  %10 = load %struct.EdgeHalf*, %struct.EdgeHalf** %next, align 8, !dbg !4753
  store %struct.EdgeHalf* %10, %struct.EdgeHalf** %e, align 8, !dbg !4754
  %11 = load %struct.EdgeHalf*, %struct.EdgeHalf** %from_e.addr, align 8, !dbg !4755
  %cmp3 = icmp ne %struct.EdgeHalf* %10, %11, !dbg !4756
  br i1 %cmp3, label %do.body, label %do.end, !dbg !4751, !llvm.loop !4757

do.end:                                           ; preds = %do.cond
  store %struct.EdgeHalf* null, %struct.EdgeHalf** %retval, align 8, !dbg !4759
  br label %return, !dbg !4759

return:                                           ; preds = %do.end, %if.then1
  %12 = load %struct.EdgeHalf*, %struct.EdgeHalf** %retval, align 8, !dbg !4760
  ret %struct.EdgeHalf* %12, !dbg !4760
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.EdgeHalf* @find_other_end_edge_half(%struct.BevelParams* %bp, %struct.EdgeHalf* %e, %struct.BevVert** %r_bvother) #0 !dbg !4761 {
entry:
  %retval = alloca %struct.EdgeHalf*, align 8
  %bp.addr = alloca %struct.BevelParams*, align 8
  %e.addr = alloca %struct.EdgeHalf*, align 8
  %r_bvother.addr = alloca %struct.BevVert**, align 8
  %bvo = alloca %struct.BevVert*, align 8
  %eother = alloca %struct.EdgeHalf*, align 8
  store %struct.BevelParams* %bp, %struct.BevelParams** %bp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BevelParams** %bp.addr, metadata !4765, metadata !DIExpression()), !dbg !4766
  store %struct.EdgeHalf* %e, %struct.EdgeHalf** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.EdgeHalf** %e.addr, metadata !4767, metadata !DIExpression()), !dbg !4768
  store %struct.BevVert** %r_bvother, %struct.BevVert*** %r_bvother.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BevVert*** %r_bvother.addr, metadata !4769, metadata !DIExpression()), !dbg !4770
  call void @llvm.dbg.declare(metadata %struct.BevVert** %bvo, metadata !4771, metadata !DIExpression()), !dbg !4772
  call void @llvm.dbg.declare(metadata %struct.EdgeHalf** %eother, metadata !4773, metadata !DIExpression()), !dbg !4774
  %0 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !4775
  %1 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e.addr, align 8, !dbg !4776
  %is_rev = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %1, i32 0, i32 13, !dbg !4777
  %2 = load i8, i8* %is_rev, align 1, !dbg !4777
  %conv = zext i8 %2 to i32, !dbg !4776
  %tobool = icmp ne i32 %conv, 0, !dbg !4776
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4776

cond.true:                                        ; preds = %entry
  %3 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e.addr, align 8, !dbg !4778
  %e1 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %3, i32 0, i32 2, !dbg !4779
  %4 = load %struct.BMEdge*, %struct.BMEdge** %e1, align 8, !dbg !4779
  %v1 = getelementptr inbounds %struct.BMEdge, %struct.BMEdge* %4, i32 0, i32 2, !dbg !4780
  %5 = load %struct.BMVert*, %struct.BMVert** %v1, align 8, !dbg !4780
  br label %cond.end, !dbg !4776

cond.false:                                       ; preds = %entry
  %6 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e.addr, align 8, !dbg !4781
  %e2 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %6, i32 0, i32 2, !dbg !4782
  %7 = load %struct.BMEdge*, %struct.BMEdge** %e2, align 8, !dbg !4782
  %v2 = getelementptr inbounds %struct.BMEdge, %struct.BMEdge* %7, i32 0, i32 3, !dbg !4783
  %8 = load %struct.BMVert*, %struct.BMVert** %v2, align 8, !dbg !4783
  br label %cond.end, !dbg !4776

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.BMVert* [ %5, %cond.true ], [ %8, %cond.false ], !dbg !4776
  %call = call %struct.BevVert* @find_bevvert(%struct.BevelParams* %0, %struct.BMVert* %cond), !dbg !4784
  store %struct.BevVert* %call, %struct.BevVert** %bvo, align 8, !dbg !4785
  %9 = load %struct.BevVert*, %struct.BevVert** %bvo, align 8, !dbg !4786
  %tobool3 = icmp ne %struct.BevVert* %9, null, !dbg !4786
  br i1 %tobool3, label %if.then, label %if.else, !dbg !4788

if.then:                                          ; preds = %cond.end
  %10 = load %struct.BevVert**, %struct.BevVert*** %r_bvother.addr, align 8, !dbg !4789
  %tobool4 = icmp ne %struct.BevVert** %10, null, !dbg !4789
  br i1 %tobool4, label %if.then5, label %if.end, !dbg !4792

if.then5:                                         ; preds = %if.then
  %11 = load %struct.BevVert*, %struct.BevVert** %bvo, align 8, !dbg !4793
  %12 = load %struct.BevVert**, %struct.BevVert*** %r_bvother.addr, align 8, !dbg !4794
  store %struct.BevVert* %11, %struct.BevVert** %12, align 8, !dbg !4795
  br label %if.end, !dbg !4796

if.end:                                           ; preds = %if.then5, %if.then
  %13 = load %struct.BevVert*, %struct.BevVert** %bvo, align 8, !dbg !4797
  %14 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e.addr, align 8, !dbg !4798
  %e6 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %14, i32 0, i32 2, !dbg !4799
  %15 = load %struct.BMEdge*, %struct.BMEdge** %e6, align 8, !dbg !4799
  %call7 = call %struct.EdgeHalf* @find_edge_half(%struct.BevVert* %13, %struct.BMEdge* %15), !dbg !4800
  store %struct.EdgeHalf* %call7, %struct.EdgeHalf** %eother, align 8, !dbg !4801
  %16 = load %struct.EdgeHalf*, %struct.EdgeHalf** %eother, align 8, !dbg !4802
  store %struct.EdgeHalf* %16, %struct.EdgeHalf** %retval, align 8, !dbg !4803
  br label %return, !dbg !4803

if.else:                                          ; preds = %cond.end
  %17 = load %struct.BevVert**, %struct.BevVert*** %r_bvother.addr, align 8, !dbg !4804
  %tobool8 = icmp ne %struct.BevVert** %17, null, !dbg !4804
  br i1 %tobool8, label %if.then9, label %if.end10, !dbg !4806

if.then9:                                         ; preds = %if.else
  %18 = load %struct.BevVert**, %struct.BevVert*** %r_bvother.addr, align 8, !dbg !4807
  store %struct.BevVert* null, %struct.BevVert** %18, align 8, !dbg !4809
  br label %if.end10, !dbg !4810

if.end10:                                         ; preds = %if.then9, %if.else
  br label %if.end11

if.end11:                                         ; preds = %if.end10
  store %struct.EdgeHalf* null, %struct.EdgeHalf** %retval, align 8, !dbg !4811
  br label %return, !dbg !4811

return:                                           ; preds = %if.end11, %if.end
  %19 = load %struct.EdgeHalf*, %struct.EdgeHalf** %retval, align 8, !dbg !4812
  ret %struct.EdgeHalf* %19, !dbg !4812
}

; Function Attrs: noinline nounwind uwtable
define internal void @offset_in_plane(%struct.EdgeHalf* %e, float* %plane_no, i8 zeroext %left, float* %r) #0 !dbg !4813 {
entry:
  %e.addr = alloca %struct.EdgeHalf*, align 8
  %plane_no.addr = alloca float*, align 8
  %left.addr = alloca i8, align 1
  %r.addr = alloca float*, align 8
  %dir = alloca [3 x float], align 4
  %no = alloca [3 x float], align 4
  %fdir = alloca [3 x float], align 4
  %v = alloca %struct.BMVert*, align 8
  store %struct.EdgeHalf* %e, %struct.EdgeHalf** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.EdgeHalf** %e.addr, metadata !4816, metadata !DIExpression()), !dbg !4817
  store float* %plane_no, float** %plane_no.addr, align 8
  call void @llvm.dbg.declare(metadata float** %plane_no.addr, metadata !4818, metadata !DIExpression()), !dbg !4819
  store i8 %left, i8* %left.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %left.addr, metadata !4820, metadata !DIExpression()), !dbg !4821
  store float* %r, float** %r.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r.addr, metadata !4822, metadata !DIExpression()), !dbg !4823
  call void @llvm.dbg.declare(metadata [3 x float]* %dir, metadata !4824, metadata !DIExpression()), !dbg !4825
  call void @llvm.dbg.declare(metadata [3 x float]* %no, metadata !4826, metadata !DIExpression()), !dbg !4827
  call void @llvm.dbg.declare(metadata [3 x float]* %fdir, metadata !4828, metadata !DIExpression()), !dbg !4829
  call void @llvm.dbg.declare(metadata %struct.BMVert** %v, metadata !4830, metadata !DIExpression()), !dbg !4831
  %0 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e.addr, align 8, !dbg !4832
  %is_rev = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %0, i32 0, i32 13, !dbg !4833
  %1 = load i8, i8* %is_rev, align 1, !dbg !4833
  %conv = zext i8 %1 to i32, !dbg !4832
  %tobool = icmp ne i32 %conv, 0, !dbg !4832
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4832

cond.true:                                        ; preds = %entry
  %2 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e.addr, align 8, !dbg !4834
  %e1 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %2, i32 0, i32 2, !dbg !4835
  %3 = load %struct.BMEdge*, %struct.BMEdge** %e1, align 8, !dbg !4835
  %v2 = getelementptr inbounds %struct.BMEdge, %struct.BMEdge* %3, i32 0, i32 3, !dbg !4836
  %4 = load %struct.BMVert*, %struct.BMVert** %v2, align 8, !dbg !4836
  br label %cond.end, !dbg !4832

cond.false:                                       ; preds = %entry
  %5 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e.addr, align 8, !dbg !4837
  %e2 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %5, i32 0, i32 2, !dbg !4838
  %6 = load %struct.BMEdge*, %struct.BMEdge** %e2, align 8, !dbg !4838
  %v1 = getelementptr inbounds %struct.BMEdge, %struct.BMEdge* %6, i32 0, i32 2, !dbg !4839
  %7 = load %struct.BMVert*, %struct.BMVert** %v1, align 8, !dbg !4839
  br label %cond.end, !dbg !4832

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.BMVert* [ %4, %cond.true ], [ %7, %cond.false ], !dbg !4832
  store %struct.BMVert* %cond, %struct.BMVert** %v, align 8, !dbg !4840
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %dir, i64 0, i64 0, !dbg !4841
  %8 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e.addr, align 8, !dbg !4842
  %e3 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %8, i32 0, i32 2, !dbg !4843
  %9 = load %struct.BMEdge*, %struct.BMEdge** %e3, align 8, !dbg !4843
  %10 = load %struct.BMVert*, %struct.BMVert** %v, align 8, !dbg !4844
  %call = call %struct.BMVert* @BM_edge_other_vert(%struct.BMEdge* %9, %struct.BMVert* %10), !dbg !4845
  %co = getelementptr inbounds %struct.BMVert, %struct.BMVert* %call, i32 0, i32 2, !dbg !4846
  %arraydecay4 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !4845
  %11 = load %struct.BMVert*, %struct.BMVert** %v, align 8, !dbg !4847
  %co5 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %11, i32 0, i32 2, !dbg !4848
  %arraydecay6 = getelementptr inbounds [3 x float], [3 x float]* %co5, i64 0, i64 0, !dbg !4847
  call void @sub_v3_v3v3(float* %arraydecay, float* %arraydecay4, float* %arraydecay6), !dbg !4849
  %arraydecay7 = getelementptr inbounds [3 x float], [3 x float]* %dir, i64 0, i64 0, !dbg !4850
  %call8 = call float @normalize_v3(float* %arraydecay7), !dbg !4851
  %12 = load float*, float** %plane_no.addr, align 8, !dbg !4852
  %tobool9 = icmp ne float* %12, null, !dbg !4852
  br i1 %tobool9, label %if.then, label %if.else, !dbg !4854

if.then:                                          ; preds = %cond.end
  %arraydecay10 = getelementptr inbounds [3 x float], [3 x float]* %no, i64 0, i64 0, !dbg !4855
  %13 = load float*, float** %plane_no.addr, align 8, !dbg !4857
  call void @copy_v3_v3(float* %arraydecay10, float* %13), !dbg !4858
  br label %if.end18, !dbg !4859

if.else:                                          ; preds = %cond.end
  %arraydecay11 = getelementptr inbounds [3 x float], [3 x float]* %no, i64 0, i64 0, !dbg !4860
  call void @zero_v3(float* %arraydecay11), !dbg !4862
  %arrayidx = getelementptr inbounds [3 x float], [3 x float]* %dir, i64 0, i64 0, !dbg !4863
  %14 = load float, float* %arrayidx, align 4, !dbg !4863
  %15 = call float @llvm.fabs.f32(float %14), !dbg !4865
  %arrayidx12 = getelementptr inbounds [3 x float], [3 x float]* %dir, i64 0, i64 1, !dbg !4866
  %16 = load float, float* %arrayidx12, align 4, !dbg !4866
  %17 = call float @llvm.fabs.f32(float %16), !dbg !4867
  %cmp = fcmp olt float %15, %17, !dbg !4868
  br i1 %cmp, label %if.then14, label %if.else16, !dbg !4869

if.then14:                                        ; preds = %if.else
  %arrayidx15 = getelementptr inbounds [3 x float], [3 x float]* %no, i64 0, i64 0, !dbg !4870
  store float 1.000000e+00, float* %arrayidx15, align 4, !dbg !4871
  br label %if.end, !dbg !4870

if.else16:                                        ; preds = %if.else
  %arrayidx17 = getelementptr inbounds [3 x float], [3 x float]* %no, i64 0, i64 1, !dbg !4872
  store float 1.000000e+00, float* %arrayidx17, align 4, !dbg !4873
  br label %if.end

if.end:                                           ; preds = %if.else16, %if.then14
  br label %if.end18

if.end18:                                         ; preds = %if.end, %if.then
  %18 = load i8, i8* %left.addr, align 1, !dbg !4874
  %tobool19 = icmp ne i8 %18, 0, !dbg !4874
  br i1 %tobool19, label %if.then20, label %if.else24, !dbg !4876

if.then20:                                        ; preds = %if.end18
  %arraydecay21 = getelementptr inbounds [3 x float], [3 x float]* %fdir, i64 0, i64 0, !dbg !4877
  %arraydecay22 = getelementptr inbounds [3 x float], [3 x float]* %dir, i64 0, i64 0, !dbg !4878
  %arraydecay23 = getelementptr inbounds [3 x float], [3 x float]* %no, i64 0, i64 0, !dbg !4879
  call void @cross_v3_v3v3(float* %arraydecay21, float* %arraydecay22, float* %arraydecay23), !dbg !4880
  br label %if.end28, !dbg !4880

if.else24:                                        ; preds = %if.end18
  %arraydecay25 = getelementptr inbounds [3 x float], [3 x float]* %fdir, i64 0, i64 0, !dbg !4881
  %arraydecay26 = getelementptr inbounds [3 x float], [3 x float]* %no, i64 0, i64 0, !dbg !4882
  %arraydecay27 = getelementptr inbounds [3 x float], [3 x float]* %dir, i64 0, i64 0, !dbg !4883
  call void @cross_v3_v3v3(float* %arraydecay25, float* %arraydecay26, float* %arraydecay27), !dbg !4884
  br label %if.end28

if.end28:                                         ; preds = %if.else24, %if.then20
  %arraydecay29 = getelementptr inbounds [3 x float], [3 x float]* %fdir, i64 0, i64 0, !dbg !4885
  %call30 = call float @normalize_v3(float* %arraydecay29), !dbg !4886
  %19 = load float*, float** %r.addr, align 8, !dbg !4887
  %20 = load %struct.BMVert*, %struct.BMVert** %v, align 8, !dbg !4888
  %co31 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %20, i32 0, i32 2, !dbg !4889
  %arraydecay32 = getelementptr inbounds [3 x float], [3 x float]* %co31, i64 0, i64 0, !dbg !4888
  call void @copy_v3_v3(float* %19, float* %arraydecay32), !dbg !4890
  %21 = load float*, float** %r.addr, align 8, !dbg !4891
  %arraydecay33 = getelementptr inbounds [3 x float], [3 x float]* %fdir, i64 0, i64 0, !dbg !4892
  %22 = load i8, i8* %left.addr, align 1, !dbg !4893
  %conv34 = zext i8 %22 to i32, !dbg !4893
  %tobool35 = icmp ne i32 %conv34, 0, !dbg !4893
  br i1 %tobool35, label %cond.true36, label %cond.false37, !dbg !4893

cond.true36:                                      ; preds = %if.end28
  %23 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e.addr, align 8, !dbg !4894
  %offset_l = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %23, i32 0, i32 8, !dbg !4895
  %24 = load float, float* %offset_l, align 4, !dbg !4895
  br label %cond.end38, !dbg !4893

cond.false37:                                     ; preds = %if.end28
  %25 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e.addr, align 8, !dbg !4896
  %offset_r = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %25, i32 0, i32 9, !dbg !4897
  %26 = load float, float* %offset_r, align 8, !dbg !4897
  br label %cond.end38, !dbg !4893

cond.end38:                                       ; preds = %cond.false37, %cond.true36
  %cond39 = phi float [ %24, %cond.true36 ], [ %26, %cond.false37 ], !dbg !4893
  call void @madd_v3_v3fl(float* %21, float* %arraydecay33, float %cond39), !dbg !4898
  ret void, !dbg !4899
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.BoundVert* @add_new_bound_vert(%struct.MemArena* %mem_arena, %struct.VMesh* %vm, float* %co) #0 !dbg !4900 {
entry:
  %mem_arena.addr = alloca %struct.MemArena*, align 8
  %vm.addr = alloca %struct.VMesh*, align 8
  %co.addr = alloca float*, align 8
  %ans = alloca %struct.BoundVert*, align 8
  %tail = alloca %struct.BoundVert*, align 8
  store %struct.MemArena* %mem_arena, %struct.MemArena** %mem_arena.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.MemArena** %mem_arena.addr, metadata !4903, metadata !DIExpression()), !dbg !4904
  store %struct.VMesh* %vm, %struct.VMesh** %vm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VMesh** %vm.addr, metadata !4905, metadata !DIExpression()), !dbg !4906
  store float* %co, float** %co.addr, align 8
  call void @llvm.dbg.declare(metadata float** %co.addr, metadata !4907, metadata !DIExpression()), !dbg !4908
  call void @llvm.dbg.declare(metadata %struct.BoundVert** %ans, metadata !4909, metadata !DIExpression()), !dbg !4910
  %0 = load %struct.MemArena*, %struct.MemArena** %mem_arena.addr, align 8, !dbg !4911
  %call = call i8* @BLI_memarena_alloc(%struct.MemArena* %0, i64 176), !dbg !4912
  %1 = bitcast i8* %call to %struct.BoundVert*, !dbg !4913
  store %struct.BoundVert* %1, %struct.BoundVert** %ans, align 8, !dbg !4910
  %2 = load %struct.BoundVert*, %struct.BoundVert** %ans, align 8, !dbg !4914
  %nv = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %2, i32 0, i32 2, !dbg !4915
  %co1 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %nv, i32 0, i32 1, !dbg !4916
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %co1, i64 0, i64 0, !dbg !4914
  %3 = load float*, float** %co.addr, align 8, !dbg !4917
  call void @copy_v3_v3(float* %arraydecay, float* %3), !dbg !4918
  %4 = load %struct.VMesh*, %struct.VMesh** %vm.addr, align 8, !dbg !4919
  %boundstart = getelementptr inbounds %struct.VMesh, %struct.VMesh* %4, i32 0, i32 1, !dbg !4921
  %5 = load %struct.BoundVert*, %struct.BoundVert** %boundstart, align 8, !dbg !4921
  %tobool = icmp ne %struct.BoundVert* %5, null, !dbg !4919
  br i1 %tobool, label %if.else, label %if.then, !dbg !4922

if.then:                                          ; preds = %entry
  %6 = load %struct.BoundVert*, %struct.BoundVert** %ans, align 8, !dbg !4923
  %index = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %6, i32 0, i32 6, !dbg !4925
  store i32 0, i32* %index, align 8, !dbg !4926
  %7 = load %struct.BoundVert*, %struct.BoundVert** %ans, align 8, !dbg !4927
  %8 = load %struct.VMesh*, %struct.VMesh** %vm.addr, align 8, !dbg !4928
  %boundstart2 = getelementptr inbounds %struct.VMesh, %struct.VMesh* %8, i32 0, i32 1, !dbg !4929
  store %struct.BoundVert* %7, %struct.BoundVert** %boundstart2, align 8, !dbg !4930
  %9 = load %struct.BoundVert*, %struct.BoundVert** %ans, align 8, !dbg !4931
  %10 = load %struct.BoundVert*, %struct.BoundVert** %ans, align 8, !dbg !4932
  %prev = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %10, i32 0, i32 1, !dbg !4933
  store %struct.BoundVert* %9, %struct.BoundVert** %prev, align 8, !dbg !4934
  %11 = load %struct.BoundVert*, %struct.BoundVert** %ans, align 8, !dbg !4935
  %next = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %11, i32 0, i32 0, !dbg !4936
  store %struct.BoundVert* %9, %struct.BoundVert** %next, align 8, !dbg !4937
  br label %if.end, !dbg !4938

if.else:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.BoundVert** %tail, metadata !4939, metadata !DIExpression()), !dbg !4941
  %12 = load %struct.VMesh*, %struct.VMesh** %vm.addr, align 8, !dbg !4942
  %boundstart3 = getelementptr inbounds %struct.VMesh, %struct.VMesh* %12, i32 0, i32 1, !dbg !4943
  %13 = load %struct.BoundVert*, %struct.BoundVert** %boundstart3, align 8, !dbg !4943
  %prev4 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %13, i32 0, i32 1, !dbg !4944
  %14 = load %struct.BoundVert*, %struct.BoundVert** %prev4, align 8, !dbg !4944
  store %struct.BoundVert* %14, %struct.BoundVert** %tail, align 8, !dbg !4941
  %15 = load %struct.BoundVert*, %struct.BoundVert** %tail, align 8, !dbg !4945
  %index5 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %15, i32 0, i32 6, !dbg !4946
  %16 = load i32, i32* %index5, align 8, !dbg !4946
  %add = add nsw i32 %16, 1, !dbg !4947
  %17 = load %struct.BoundVert*, %struct.BoundVert** %ans, align 8, !dbg !4948
  %index6 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %17, i32 0, i32 6, !dbg !4949
  store i32 %add, i32* %index6, align 8, !dbg !4950
  %18 = load %struct.BoundVert*, %struct.BoundVert** %tail, align 8, !dbg !4951
  %19 = load %struct.BoundVert*, %struct.BoundVert** %ans, align 8, !dbg !4952
  %prev7 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %19, i32 0, i32 1, !dbg !4953
  store %struct.BoundVert* %18, %struct.BoundVert** %prev7, align 8, !dbg !4954
  %20 = load %struct.VMesh*, %struct.VMesh** %vm.addr, align 8, !dbg !4955
  %boundstart8 = getelementptr inbounds %struct.VMesh, %struct.VMesh* %20, i32 0, i32 1, !dbg !4956
  %21 = load %struct.BoundVert*, %struct.BoundVert** %boundstart8, align 8, !dbg !4956
  %22 = load %struct.BoundVert*, %struct.BoundVert** %ans, align 8, !dbg !4957
  %next9 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %22, i32 0, i32 0, !dbg !4958
  store %struct.BoundVert* %21, %struct.BoundVert** %next9, align 8, !dbg !4959
  %23 = load %struct.BoundVert*, %struct.BoundVert** %ans, align 8, !dbg !4960
  %24 = load %struct.BoundVert*, %struct.BoundVert** %tail, align 8, !dbg !4961
  %next10 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %24, i32 0, i32 0, !dbg !4962
  store %struct.BoundVert* %23, %struct.BoundVert** %next10, align 8, !dbg !4963
  %25 = load %struct.BoundVert*, %struct.BoundVert** %ans, align 8, !dbg !4964
  %26 = load %struct.VMesh*, %struct.VMesh** %vm.addr, align 8, !dbg !4965
  %boundstart11 = getelementptr inbounds %struct.VMesh, %struct.VMesh* %26, i32 0, i32 1, !dbg !4966
  %27 = load %struct.BoundVert*, %struct.BoundVert** %boundstart11, align 8, !dbg !4966
  %prev12 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %27, i32 0, i32 1, !dbg !4967
  store %struct.BoundVert* %25, %struct.BoundVert** %prev12, align 8, !dbg !4968
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %28 = load %struct.BoundVert*, %struct.BoundVert** %ans, align 8, !dbg !4969
  %profile = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %28, i32 0, i32 7, !dbg !4970
  %super_r = getelementptr inbounds %struct.Profile, %struct.Profile* %profile, i32 0, i32 0, !dbg !4971
  store float 1.000000e+00, float* %super_r, align 8, !dbg !4972
  %29 = load %struct.VMesh*, %struct.VMesh** %vm.addr, align 8, !dbg !4973
  %count = getelementptr inbounds %struct.VMesh, %struct.VMesh* %29, i32 0, i32 2, !dbg !4974
  %30 = load i32, i32* %count, align 8, !dbg !4975
  %inc = add nsw i32 %30, 1, !dbg !4975
  store i32 %inc, i32* %count, align 8, !dbg !4975
  %31 = load %struct.BoundVert*, %struct.BoundVert** %ans, align 8, !dbg !4976
  ret %struct.BoundVert* %31, !dbg !4977
}

; Function Attrs: noinline nounwind uwtable
define internal void @adjust_bound_vert(%struct.BoundVert* %bv, float* %co) #0 !dbg !4978 {
entry:
  %bv.addr = alloca %struct.BoundVert*, align 8
  %co.addr = alloca float*, align 8
  store %struct.BoundVert* %bv, %struct.BoundVert** %bv.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BoundVert** %bv.addr, metadata !4981, metadata !DIExpression()), !dbg !4982
  store float* %co, float** %co.addr, align 8
  call void @llvm.dbg.declare(metadata float** %co.addr, metadata !4983, metadata !DIExpression()), !dbg !4984
  %0 = load %struct.BoundVert*, %struct.BoundVert** %bv.addr, align 8, !dbg !4985
  %nv = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %0, i32 0, i32 2, !dbg !4986
  %co1 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %nv, i32 0, i32 1, !dbg !4987
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %co1, i64 0, i64 0, !dbg !4985
  %1 = load float*, float** %co.addr, align 8, !dbg !4988
  call void @copy_v3_v3(float* %arraydecay, float* %1), !dbg !4989
  ret void, !dbg !4990
}

; Function Attrs: noinline nounwind uwtable
define internal void @slide_dist(%struct.EdgeHalf* %e, %struct.BMVert* %v, float %d, float* %slideco) #0 !dbg !4991 {
entry:
  %e.addr = alloca %struct.EdgeHalf*, align 8
  %v.addr = alloca %struct.BMVert*, align 8
  %d.addr = alloca float, align 4
  %slideco.addr = alloca float*, align 8
  %dir = alloca [3 x float], align 4
  %len = alloca float, align 4
  store %struct.EdgeHalf* %e, %struct.EdgeHalf** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.EdgeHalf** %e.addr, metadata !4994, metadata !DIExpression()), !dbg !4995
  store %struct.BMVert* %v, %struct.BMVert** %v.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMVert** %v.addr, metadata !4996, metadata !DIExpression()), !dbg !4997
  store float %d, float* %d.addr, align 4
  call void @llvm.dbg.declare(metadata float* %d.addr, metadata !4998, metadata !DIExpression()), !dbg !4999
  store float* %slideco, float** %slideco.addr, align 8
  call void @llvm.dbg.declare(metadata float** %slideco.addr, metadata !5000, metadata !DIExpression()), !dbg !5001
  call void @llvm.dbg.declare(metadata [3 x float]* %dir, metadata !5002, metadata !DIExpression()), !dbg !5003
  call void @llvm.dbg.declare(metadata float* %len, metadata !5004, metadata !DIExpression()), !dbg !5005
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %dir, i64 0, i64 0, !dbg !5006
  %0 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !5007
  %co = getelementptr inbounds %struct.BMVert, %struct.BMVert* %0, i32 0, i32 2, !dbg !5008
  %arraydecay1 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !5007
  %1 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e.addr, align 8, !dbg !5009
  %e2 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %1, i32 0, i32 2, !dbg !5010
  %2 = load %struct.BMEdge*, %struct.BMEdge** %e2, align 8, !dbg !5010
  %3 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !5011
  %call = call %struct.BMVert* @BM_edge_other_vert(%struct.BMEdge* %2, %struct.BMVert* %3), !dbg !5012
  %co3 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %call, i32 0, i32 2, !dbg !5013
  %arraydecay4 = getelementptr inbounds [3 x float], [3 x float]* %co3, i64 0, i64 0, !dbg !5012
  call void @sub_v3_v3v3(float* %arraydecay, float* %arraydecay1, float* %arraydecay4), !dbg !5014
  %arraydecay5 = getelementptr inbounds [3 x float], [3 x float]* %dir, i64 0, i64 0, !dbg !5015
  %call6 = call float @normalize_v3(float* %arraydecay5), !dbg !5016
  store float %call6, float* %len, align 4, !dbg !5017
  %4 = load float, float* %d.addr, align 4, !dbg !5018
  %5 = load float, float* %len, align 4, !dbg !5020
  %cmp = fcmp ogt float %4, %5, !dbg !5021
  br i1 %cmp, label %if.then, label %if.end, !dbg !5022

if.then:                                          ; preds = %entry
  %6 = load float, float* %len, align 4, !dbg !5023
  %sub = fsub float %6, 0x3F0A36E2E0000000, !dbg !5024
  store float %sub, float* %d.addr, align 4, !dbg !5025
  br label %if.end, !dbg !5026

if.end:                                           ; preds = %if.then, %entry
  %7 = load float*, float** %slideco.addr, align 8, !dbg !5027
  %8 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !5028
  %co7 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %8, i32 0, i32 2, !dbg !5029
  %arraydecay8 = getelementptr inbounds [3 x float], [3 x float]* %co7, i64 0, i64 0, !dbg !5028
  call void @copy_v3_v3(float* %7, float* %arraydecay8), !dbg !5030
  %9 = load float*, float** %slideco.addr, align 8, !dbg !5031
  %arraydecay9 = getelementptr inbounds [3 x float], [3 x float]* %dir, i64 0, i64 0, !dbg !5032
  %10 = load float, float* %d.addr, align 4, !dbg !5033
  %fneg = fneg float %10, !dbg !5034
  call void @madd_v3_v3fl(float* %9, float* %arraydecay9, float %fneg), !dbg !5035
  ret void, !dbg !5036
}

; Function Attrs: noinline nounwind uwtable
define internal void @set_bound_vert_seams(%struct.BevVert* %bv) #0 !dbg !5037 {
entry:
  %bv.addr = alloca %struct.BevVert*, align 8
  %v = alloca %struct.BoundVert*, align 8
  %e = alloca %struct.EdgeHalf*, align 8
  store %struct.BevVert* %bv, %struct.BevVert** %bv.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BevVert** %bv.addr, metadata !5040, metadata !DIExpression()), !dbg !5041
  call void @llvm.dbg.declare(metadata %struct.BoundVert** %v, metadata !5042, metadata !DIExpression()), !dbg !5043
  call void @llvm.dbg.declare(metadata %struct.EdgeHalf** %e, metadata !5044, metadata !DIExpression()), !dbg !5045
  %0 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !5046
  %any_seam = getelementptr inbounds %struct.BevVert, %struct.BevVert* %0, i32 0, i32 5, !dbg !5047
  store i8 0, i8* %any_seam, align 8, !dbg !5048
  %1 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !5049
  %vmesh = getelementptr inbounds %struct.BevVert, %struct.BevVert* %1, i32 0, i32 9, !dbg !5050
  %2 = load %struct.VMesh*, %struct.VMesh** %vmesh, align 8, !dbg !5050
  %boundstart = getelementptr inbounds %struct.VMesh, %struct.VMesh* %2, i32 0, i32 1, !dbg !5051
  %3 = load %struct.BoundVert*, %struct.BoundVert** %boundstart, align 8, !dbg !5051
  store %struct.BoundVert* %3, %struct.BoundVert** %v, align 8, !dbg !5052
  br label %do.body, !dbg !5053

do.body:                                          ; preds = %do.cond, %entry
  %4 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !5054
  %any_seam1 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %4, i32 0, i32 8, !dbg !5056
  store i8 0, i8* %any_seam1, align 8, !dbg !5057
  %5 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !5058
  %efirst = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %5, i32 0, i32 3, !dbg !5060
  %6 = load %struct.EdgeHalf*, %struct.EdgeHalf** %efirst, align 8, !dbg !5060
  store %struct.EdgeHalf* %6, %struct.EdgeHalf** %e, align 8, !dbg !5061
  br label %for.cond, !dbg !5062

for.cond:                                         ; preds = %for.inc, %do.body
  %7 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !5063
  %tobool = icmp ne %struct.EdgeHalf* %7, null, !dbg !5065
  br i1 %tobool, label %for.body, label %for.end, !dbg !5065

for.body:                                         ; preds = %for.cond
  %8 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !5066
  %is_seam = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %8, i32 0, i32 14, !dbg !5068
  %9 = load i8, i8* %is_seam, align 2, !dbg !5068
  %conv = zext i8 %9 to i32, !dbg !5066
  %10 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !5069
  %any_seam2 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %10, i32 0, i32 8, !dbg !5070
  %11 = load i8, i8* %any_seam2, align 8, !dbg !5071
  %conv3 = zext i8 %11 to i32, !dbg !5071
  %or = or i32 %conv3, %conv, !dbg !5071
  %conv4 = trunc i32 %or to i8, !dbg !5071
  store i8 %conv4, i8* %any_seam2, align 8, !dbg !5071
  %12 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !5072
  %13 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !5074
  %elast = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %13, i32 0, i32 4, !dbg !5075
  %14 = load %struct.EdgeHalf*, %struct.EdgeHalf** %elast, align 8, !dbg !5075
  %cmp = icmp eq %struct.EdgeHalf* %12, %14, !dbg !5076
  br i1 %cmp, label %if.then, label %if.end, !dbg !5077

if.then:                                          ; preds = %for.body
  br label %for.end, !dbg !5078

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !5079

for.inc:                                          ; preds = %if.end
  %15 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !5080
  %next = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %15, i32 0, i32 0, !dbg !5081
  %16 = load %struct.EdgeHalf*, %struct.EdgeHalf** %next, align 8, !dbg !5081
  store %struct.EdgeHalf* %16, %struct.EdgeHalf** %e, align 8, !dbg !5082
  br label %for.cond, !dbg !5083, !llvm.loop !5084

for.end:                                          ; preds = %if.then, %for.cond
  %17 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !5086
  %any_seam6 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %17, i32 0, i32 8, !dbg !5087
  %18 = load i8, i8* %any_seam6, align 8, !dbg !5087
  %conv7 = zext i8 %18 to i32, !dbg !5086
  %19 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !5088
  %any_seam8 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %19, i32 0, i32 5, !dbg !5089
  %20 = load i8, i8* %any_seam8, align 8, !dbg !5090
  %conv9 = zext i8 %20 to i32, !dbg !5090
  %or10 = or i32 %conv9, %conv7, !dbg !5090
  %conv11 = trunc i32 %or10 to i8, !dbg !5090
  store i8 %conv11, i8* %any_seam8, align 8, !dbg !5090
  br label %do.cond, !dbg !5091

do.cond:                                          ; preds = %for.end
  %21 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !5092
  %next12 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %21, i32 0, i32 0, !dbg !5093
  %22 = load %struct.BoundVert*, %struct.BoundVert** %next12, align 8, !dbg !5093
  store %struct.BoundVert* %22, %struct.BoundVert** %v, align 8, !dbg !5094
  %23 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !5095
  %vmesh13 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %23, i32 0, i32 9, !dbg !5096
  %24 = load %struct.VMesh*, %struct.VMesh** %vmesh13, align 8, !dbg !5096
  %boundstart14 = getelementptr inbounds %struct.VMesh, %struct.VMesh* %24, i32 0, i32 1, !dbg !5097
  %25 = load %struct.BoundVert*, %struct.BoundVert** %boundstart14, align 8, !dbg !5097
  %cmp15 = icmp ne %struct.BoundVert* %22, %25, !dbg !5098
  br i1 %cmp15, label %do.body, label %do.end, !dbg !5091, !llvm.loop !5099

do.end:                                           ; preds = %do.cond
  ret void, !dbg !5101
}

; Function Attrs: noinline nounwind uwtable
define internal void @set_profile_params(%struct.BevelParams* %bp, %struct.BoundVert* %bndv) #0 !dbg !5102 {
entry:
  %bp.addr = alloca %struct.BevelParams*, align 8
  %bndv.addr = alloca %struct.BoundVert*, align 8
  %e = alloca %struct.EdgeHalf*, align 8
  %pro = alloca %struct.Profile*, align 8
  %co1 = alloca [3 x float], align 4
  %co2 = alloca [3 x float], align 4
  %co3 = alloca [3 x float], align 4
  %d1 = alloca [3 x float], align 4
  %d2 = alloca [3 x float], align 4
  %d3 = alloca [3 x float], align 4
  %l = alloca float, align 4
  %do_linear_interp = alloca i8, align 1
  store %struct.BevelParams* %bp, %struct.BevelParams** %bp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BevelParams** %bp.addr, metadata !5105, metadata !DIExpression()), !dbg !5106
  store %struct.BoundVert* %bndv, %struct.BoundVert** %bndv.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BoundVert** %bndv.addr, metadata !5107, metadata !DIExpression()), !dbg !5108
  call void @llvm.dbg.declare(metadata %struct.EdgeHalf** %e, metadata !5109, metadata !DIExpression()), !dbg !5110
  call void @llvm.dbg.declare(metadata %struct.Profile** %pro, metadata !5111, metadata !DIExpression()), !dbg !5113
  call void @llvm.dbg.declare(metadata [3 x float]* %co1, metadata !5114, metadata !DIExpression()), !dbg !5115
  call void @llvm.dbg.declare(metadata [3 x float]* %co2, metadata !5116, metadata !DIExpression()), !dbg !5117
  call void @llvm.dbg.declare(metadata [3 x float]* %co3, metadata !5118, metadata !DIExpression()), !dbg !5119
  call void @llvm.dbg.declare(metadata [3 x float]* %d1, metadata !5120, metadata !DIExpression()), !dbg !5121
  call void @llvm.dbg.declare(metadata [3 x float]* %d2, metadata !5122, metadata !DIExpression()), !dbg !5123
  call void @llvm.dbg.declare(metadata [3 x float]* %d3, metadata !5124, metadata !DIExpression()), !dbg !5125
  call void @llvm.dbg.declare(metadata float* %l, metadata !5126, metadata !DIExpression()), !dbg !5127
  call void @llvm.dbg.declare(metadata i8* %do_linear_interp, metadata !5128, metadata !DIExpression()), !dbg !5129
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %co1, i64 0, i64 0, !dbg !5130
  %0 = load %struct.BoundVert*, %struct.BoundVert** %bndv.addr, align 8, !dbg !5131
  %nv = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %0, i32 0, i32 2, !dbg !5132
  %co = getelementptr inbounds %struct.NewVert, %struct.NewVert* %nv, i32 0, i32 1, !dbg !5133
  %arraydecay1 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !5131
  call void @copy_v3_v3(float* %arraydecay, float* %arraydecay1), !dbg !5134
  %arraydecay2 = getelementptr inbounds [3 x float], [3 x float]* %co2, i64 0, i64 0, !dbg !5135
  %1 = load %struct.BoundVert*, %struct.BoundVert** %bndv.addr, align 8, !dbg !5136
  %next = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %1, i32 0, i32 0, !dbg !5137
  %2 = load %struct.BoundVert*, %struct.BoundVert** %next, align 8, !dbg !5137
  %nv3 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %2, i32 0, i32 2, !dbg !5138
  %co4 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %nv3, i32 0, i32 1, !dbg !5139
  %arraydecay5 = getelementptr inbounds [3 x float], [3 x float]* %co4, i64 0, i64 0, !dbg !5136
  call void @copy_v3_v3(float* %arraydecay2, float* %arraydecay5), !dbg !5140
  %3 = load %struct.BoundVert*, %struct.BoundVert** %bndv.addr, align 8, !dbg !5141
  %profile = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %3, i32 0, i32 7, !dbg !5142
  store %struct.Profile* %profile, %struct.Profile** %pro, align 8, !dbg !5143
  %4 = load %struct.BoundVert*, %struct.BoundVert** %bndv.addr, align 8, !dbg !5144
  %ebev = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %4, i32 0, i32 5, !dbg !5145
  %5 = load %struct.EdgeHalf*, %struct.EdgeHalf** %ebev, align 8, !dbg !5145
  store %struct.EdgeHalf* %5, %struct.EdgeHalf** %e, align 8, !dbg !5146
  store i8 1, i8* %do_linear_interp, align 1, !dbg !5147
  %6 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !5148
  %tobool = icmp ne %struct.EdgeHalf* %6, null, !dbg !5148
  br i1 %tobool, label %if.then, label %if.end93, !dbg !5150

if.then:                                          ; preds = %entry
  store i8 0, i8* %do_linear_interp, align 1, !dbg !5151
  %7 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !5153
  %pro_super_r = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %7, i32 0, i32 6, !dbg !5154
  %8 = load float, float* %pro_super_r, align 4, !dbg !5154
  %9 = load %struct.Profile*, %struct.Profile** %pro, align 8, !dbg !5155
  %super_r = getelementptr inbounds %struct.Profile, %struct.Profile* %9, i32 0, i32 0, !dbg !5156
  store float %8, float* %super_r, align 8, !dbg !5157
  %10 = load %struct.Profile*, %struct.Profile** %pro, align 8, !dbg !5158
  %proj_dir = getelementptr inbounds %struct.Profile, %struct.Profile* %10, i32 0, i32 6, !dbg !5159
  %arraydecay6 = getelementptr inbounds [3 x float], [3 x float]* %proj_dir, i64 0, i64 0, !dbg !5158
  %11 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !5160
  %e7 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %11, i32 0, i32 2, !dbg !5161
  %12 = load %struct.BMEdge*, %struct.BMEdge** %e7, align 8, !dbg !5161
  %v1 = getelementptr inbounds %struct.BMEdge, %struct.BMEdge* %12, i32 0, i32 2, !dbg !5162
  %13 = load %struct.BMVert*, %struct.BMVert** %v1, align 8, !dbg !5162
  %co8 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %13, i32 0, i32 2, !dbg !5163
  %arraydecay9 = getelementptr inbounds [3 x float], [3 x float]* %co8, i64 0, i64 0, !dbg !5160
  %14 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !5164
  %e10 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %14, i32 0, i32 2, !dbg !5165
  %15 = load %struct.BMEdge*, %struct.BMEdge** %e10, align 8, !dbg !5165
  %v2 = getelementptr inbounds %struct.BMEdge, %struct.BMEdge* %15, i32 0, i32 3, !dbg !5166
  %16 = load %struct.BMVert*, %struct.BMVert** %v2, align 8, !dbg !5166
  %co11 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %16, i32 0, i32 2, !dbg !5167
  %arraydecay12 = getelementptr inbounds [3 x float], [3 x float]* %co11, i64 0, i64 0, !dbg !5164
  call void @sub_v3_v3v3(float* %arraydecay6, float* %arraydecay9, float* %arraydecay12), !dbg !5168
  %17 = load %struct.Profile*, %struct.Profile** %pro, align 8, !dbg !5169
  %proj_dir13 = getelementptr inbounds %struct.Profile, %struct.Profile* %17, i32 0, i32 6, !dbg !5170
  %arraydecay14 = getelementptr inbounds [3 x float], [3 x float]* %proj_dir13, i64 0, i64 0, !dbg !5169
  %call = call float @normalize_v3(float* %arraydecay14), !dbg !5171
  %18 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !5172
  %e15 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %18, i32 0, i32 2, !dbg !5173
  %19 = load %struct.BMEdge*, %struct.BMEdge** %e15, align 8, !dbg !5173
  %arraydecay16 = getelementptr inbounds [3 x float], [3 x float]* %co1, i64 0, i64 0, !dbg !5174
  %arraydecay17 = getelementptr inbounds [3 x float], [3 x float]* %co2, i64 0, i64 0, !dbg !5175
  %20 = load %struct.Profile*, %struct.Profile** %pro, align 8, !dbg !5176
  %midco = getelementptr inbounds %struct.Profile, %struct.Profile* %20, i32 0, i32 2, !dbg !5177
  %arraydecay18 = getelementptr inbounds [3 x float], [3 x float]* %midco, i64 0, i64 0, !dbg !5176
  call void @project_to_edge(%struct.BMEdge* %19, float* %arraydecay16, float* %arraydecay17, float* %arraydecay18), !dbg !5178
  %arraydecay19 = getelementptr inbounds [3 x float], [3 x float]* %co3, i64 0, i64 0, !dbg !5179
  %arraydecay20 = getelementptr inbounds [3 x float], [3 x float]* %co1, i64 0, i64 0, !dbg !5180
  %21 = load %struct.Profile*, %struct.Profile** %pro, align 8, !dbg !5181
  %proj_dir21 = getelementptr inbounds %struct.Profile, %struct.Profile* %21, i32 0, i32 6, !dbg !5182
  %arraydecay22 = getelementptr inbounds [3 x float], [3 x float]* %proj_dir21, i64 0, i64 0, !dbg !5181
  call void @add_v3_v3v3(float* %arraydecay19, float* %arraydecay20, float* %arraydecay22), !dbg !5183
  %22 = load %struct.Profile*, %struct.Profile** %pro, align 8, !dbg !5184
  %coa = getelementptr inbounds %struct.Profile, %struct.Profile* %22, i32 0, i32 1, !dbg !5186
  %arraydecay23 = getelementptr inbounds [3 x float], [3 x float]* %coa, i64 0, i64 0, !dbg !5184
  %arraydecay24 = getelementptr inbounds [3 x float], [3 x float]* %co1, i64 0, i64 0, !dbg !5187
  %arraydecay25 = getelementptr inbounds [3 x float], [3 x float]* %co3, i64 0, i64 0, !dbg !5188
  %23 = load %struct.Profile*, %struct.Profile** %pro, align 8, !dbg !5189
  %midco26 = getelementptr inbounds %struct.Profile, %struct.Profile* %23, i32 0, i32 2, !dbg !5190
  %arraydecay27 = getelementptr inbounds [3 x float], [3 x float]* %midco26, i64 0, i64 0, !dbg !5189
  %24 = load %struct.Profile*, %struct.Profile** %pro, align 8, !dbg !5191
  %proj_dir28 = getelementptr inbounds %struct.Profile, %struct.Profile* %24, i32 0, i32 6, !dbg !5192
  %arraydecay29 = getelementptr inbounds [3 x float], [3 x float]* %proj_dir28, i64 0, i64 0, !dbg !5191
  %call30 = call zeroext i8 @isect_line_plane_v3(float* %arraydecay23, float* %arraydecay24, float* %arraydecay25, float* %arraydecay27, float* %arraydecay29), !dbg !5193
  %tobool31 = icmp ne i8 %call30, 0, !dbg !5193
  br i1 %tobool31, label %if.end, label %if.then32, !dbg !5194

if.then32:                                        ; preds = %if.then
  %25 = load %struct.Profile*, %struct.Profile** %pro, align 8, !dbg !5195
  %coa33 = getelementptr inbounds %struct.Profile, %struct.Profile* %25, i32 0, i32 1, !dbg !5197
  %arraydecay34 = getelementptr inbounds [3 x float], [3 x float]* %coa33, i64 0, i64 0, !dbg !5195
  %arraydecay35 = getelementptr inbounds [3 x float], [3 x float]* %co1, i64 0, i64 0, !dbg !5198
  call void @copy_v3_v3(float* %arraydecay34, float* %arraydecay35), !dbg !5199
  br label %if.end, !dbg !5200

if.end:                                           ; preds = %if.then32, %if.then
  %arraydecay36 = getelementptr inbounds [3 x float], [3 x float]* %co3, i64 0, i64 0, !dbg !5201
  %arraydecay37 = getelementptr inbounds [3 x float], [3 x float]* %co2, i64 0, i64 0, !dbg !5202
  %26 = load %struct.Profile*, %struct.Profile** %pro, align 8, !dbg !5203
  %proj_dir38 = getelementptr inbounds %struct.Profile, %struct.Profile* %26, i32 0, i32 6, !dbg !5204
  %arraydecay39 = getelementptr inbounds [3 x float], [3 x float]* %proj_dir38, i64 0, i64 0, !dbg !5203
  call void @add_v3_v3v3(float* %arraydecay36, float* %arraydecay37, float* %arraydecay39), !dbg !5205
  %27 = load %struct.Profile*, %struct.Profile** %pro, align 8, !dbg !5206
  %cob = getelementptr inbounds %struct.Profile, %struct.Profile* %27, i32 0, i32 3, !dbg !5208
  %arraydecay40 = getelementptr inbounds [3 x float], [3 x float]* %cob, i64 0, i64 0, !dbg !5206
  %arraydecay41 = getelementptr inbounds [3 x float], [3 x float]* %co2, i64 0, i64 0, !dbg !5209
  %arraydecay42 = getelementptr inbounds [3 x float], [3 x float]* %co3, i64 0, i64 0, !dbg !5210
  %28 = load %struct.Profile*, %struct.Profile** %pro, align 8, !dbg !5211
  %midco43 = getelementptr inbounds %struct.Profile, %struct.Profile* %28, i32 0, i32 2, !dbg !5212
  %arraydecay44 = getelementptr inbounds [3 x float], [3 x float]* %midco43, i64 0, i64 0, !dbg !5211
  %29 = load %struct.Profile*, %struct.Profile** %pro, align 8, !dbg !5213
  %proj_dir45 = getelementptr inbounds %struct.Profile, %struct.Profile* %29, i32 0, i32 6, !dbg !5214
  %arraydecay46 = getelementptr inbounds [3 x float], [3 x float]* %proj_dir45, i64 0, i64 0, !dbg !5213
  %call47 = call zeroext i8 @isect_line_plane_v3(float* %arraydecay40, float* %arraydecay41, float* %arraydecay42, float* %arraydecay44, float* %arraydecay46), !dbg !5215
  %tobool48 = icmp ne i8 %call47, 0, !dbg !5215
  br i1 %tobool48, label %if.end53, label %if.then49, !dbg !5216

if.then49:                                        ; preds = %if.end
  %30 = load %struct.Profile*, %struct.Profile** %pro, align 8, !dbg !5217
  %cob50 = getelementptr inbounds %struct.Profile, %struct.Profile* %30, i32 0, i32 3, !dbg !5219
  %arraydecay51 = getelementptr inbounds [3 x float], [3 x float]* %cob50, i64 0, i64 0, !dbg !5217
  %arraydecay52 = getelementptr inbounds [3 x float], [3 x float]* %co2, i64 0, i64 0, !dbg !5220
  call void @copy_v3_v3(float* %arraydecay51, float* %arraydecay52), !dbg !5221
  br label %if.end53, !dbg !5222

if.end53:                                         ; preds = %if.then49, %if.end
  %arraydecay54 = getelementptr inbounds [3 x float], [3 x float]* %d1, i64 0, i64 0, !dbg !5223
  %31 = load %struct.Profile*, %struct.Profile** %pro, align 8, !dbg !5224
  %midco55 = getelementptr inbounds %struct.Profile, %struct.Profile* %31, i32 0, i32 2, !dbg !5225
  %arraydecay56 = getelementptr inbounds [3 x float], [3 x float]* %midco55, i64 0, i64 0, !dbg !5224
  %arraydecay57 = getelementptr inbounds [3 x float], [3 x float]* %co1, i64 0, i64 0, !dbg !5226
  call void @sub_v3_v3v3(float* %arraydecay54, float* %arraydecay56, float* %arraydecay57), !dbg !5227
  %arraydecay58 = getelementptr inbounds [3 x float], [3 x float]* %d2, i64 0, i64 0, !dbg !5228
  %32 = load %struct.Profile*, %struct.Profile** %pro, align 8, !dbg !5229
  %midco59 = getelementptr inbounds %struct.Profile, %struct.Profile* %32, i32 0, i32 2, !dbg !5230
  %arraydecay60 = getelementptr inbounds [3 x float], [3 x float]* %midco59, i64 0, i64 0, !dbg !5229
  %arraydecay61 = getelementptr inbounds [3 x float], [3 x float]* %co2, i64 0, i64 0, !dbg !5231
  call void @sub_v3_v3v3(float* %arraydecay58, float* %arraydecay60, float* %arraydecay61), !dbg !5232
  %arraydecay62 = getelementptr inbounds [3 x float], [3 x float]* %d1, i64 0, i64 0, !dbg !5233
  %call63 = call float @normalize_v3(float* %arraydecay62), !dbg !5234
  %arraydecay64 = getelementptr inbounds [3 x float], [3 x float]* %d2, i64 0, i64 0, !dbg !5235
  %call65 = call float @normalize_v3(float* %arraydecay64), !dbg !5236
  %33 = load %struct.Profile*, %struct.Profile** %pro, align 8, !dbg !5237
  %plane_no = getelementptr inbounds %struct.Profile, %struct.Profile* %33, i32 0, i32 4, !dbg !5238
  %arraydecay66 = getelementptr inbounds [3 x float], [3 x float]* %plane_no, i64 0, i64 0, !dbg !5237
  %arraydecay67 = getelementptr inbounds [3 x float], [3 x float]* %d1, i64 0, i64 0, !dbg !5239
  %arraydecay68 = getelementptr inbounds [3 x float], [3 x float]* %d2, i64 0, i64 0, !dbg !5240
  call void @cross_v3_v3v3(float* %arraydecay66, float* %arraydecay67, float* %arraydecay68), !dbg !5241
  %34 = load %struct.Profile*, %struct.Profile** %pro, align 8, !dbg !5242
  %plane_no69 = getelementptr inbounds %struct.Profile, %struct.Profile* %34, i32 0, i32 4, !dbg !5243
  %arraydecay70 = getelementptr inbounds [3 x float], [3 x float]* %plane_no69, i64 0, i64 0, !dbg !5242
  %call71 = call float @normalize_v3(float* %arraydecay70), !dbg !5244
  store float %call71, float* %l, align 4, !dbg !5245
  %35 = load float, float* %l, align 4, !dbg !5246
  %cmp = fcmp ole float %35, 0x3F1A36E2E0000000, !dbg !5248
  br i1 %cmp, label %if.then72, label %if.end90, !dbg !5249

if.then72:                                        ; preds = %if.end53
  %arraydecay73 = getelementptr inbounds [3 x float], [3 x float]* %d3, i64 0, i64 0, !dbg !5250
  %arraydecay74 = getelementptr inbounds [3 x float], [3 x float]* %d1, i64 0, i64 0, !dbg !5252
  %36 = load %struct.Profile*, %struct.Profile** %pro, align 8, !dbg !5253
  %proj_dir75 = getelementptr inbounds %struct.Profile, %struct.Profile* %36, i32 0, i32 6, !dbg !5254
  %arraydecay76 = getelementptr inbounds [3 x float], [3 x float]* %proj_dir75, i64 0, i64 0, !dbg !5253
  call void @cross_v3_v3v3(float* %arraydecay73, float* %arraydecay74, float* %arraydecay76), !dbg !5255
  %arraydecay77 = getelementptr inbounds [3 x float], [3 x float]* %d3, i64 0, i64 0, !dbg !5256
  %call78 = call float @normalize_v3(float* %arraydecay77), !dbg !5257
  %37 = load %struct.Profile*, %struct.Profile** %pro, align 8, !dbg !5258
  %plane_no79 = getelementptr inbounds %struct.Profile, %struct.Profile* %37, i32 0, i32 4, !dbg !5259
  %arraydecay80 = getelementptr inbounds [3 x float], [3 x float]* %plane_no79, i64 0, i64 0, !dbg !5258
  %arraydecay81 = getelementptr inbounds [3 x float], [3 x float]* %d1, i64 0, i64 0, !dbg !5260
  %arraydecay82 = getelementptr inbounds [3 x float], [3 x float]* %d3, i64 0, i64 0, !dbg !5261
  call void @cross_v3_v3v3(float* %arraydecay80, float* %arraydecay81, float* %arraydecay82), !dbg !5262
  %38 = load %struct.Profile*, %struct.Profile** %pro, align 8, !dbg !5263
  %plane_no83 = getelementptr inbounds %struct.Profile, %struct.Profile* %38, i32 0, i32 4, !dbg !5264
  %arraydecay84 = getelementptr inbounds [3 x float], [3 x float]* %plane_no83, i64 0, i64 0, !dbg !5263
  %call85 = call float @normalize_v3(float* %arraydecay84), !dbg !5265
  store float %call85, float* %l, align 4, !dbg !5266
  %39 = load float, float* %l, align 4, !dbg !5267
  %cmp86 = fcmp ole float %39, 0x3F1A36E2E0000000, !dbg !5269
  br i1 %cmp86, label %if.then87, label %if.end88, !dbg !5270

if.then87:                                        ; preds = %if.then72
  store i8 1, i8* %do_linear_interp, align 1, !dbg !5271
  br label %if.end88, !dbg !5273

if.end88:                                         ; preds = %if.then87, %if.then72
  %40 = load %struct.Profile*, %struct.Profile** %pro, align 8, !dbg !5274
  %super_r89 = getelementptr inbounds %struct.Profile, %struct.Profile* %40, i32 0, i32 0, !dbg !5275
  store float 1.000000e+00, float* %super_r89, align 8, !dbg !5276
  br label %if.end90, !dbg !5277

if.end90:                                         ; preds = %if.end88, %if.end53
  %41 = load %struct.Profile*, %struct.Profile** %pro, align 8, !dbg !5278
  %plane_co = getelementptr inbounds %struct.Profile, %struct.Profile* %41, i32 0, i32 5, !dbg !5279
  %arraydecay91 = getelementptr inbounds [3 x float], [3 x float]* %plane_co, i64 0, i64 0, !dbg !5278
  %arraydecay92 = getelementptr inbounds [3 x float], [3 x float]* %co1, i64 0, i64 0, !dbg !5280
  call void @copy_v3_v3(float* %arraydecay91, float* %arraydecay92), !dbg !5281
  br label %if.end93, !dbg !5282

if.end93:                                         ; preds = %if.end90, %entry
  %42 = load i8, i8* %do_linear_interp, align 1, !dbg !5283
  %tobool94 = icmp ne i8 %42, 0, !dbg !5283
  br i1 %tobool94, label %if.then95, label %if.end113, !dbg !5285

if.then95:                                        ; preds = %if.end93
  %43 = load %struct.Profile*, %struct.Profile** %pro, align 8, !dbg !5286
  %super_r96 = getelementptr inbounds %struct.Profile, %struct.Profile* %43, i32 0, i32 0, !dbg !5288
  store float 1.000000e+00, float* %super_r96, align 8, !dbg !5289
  %44 = load %struct.Profile*, %struct.Profile** %pro, align 8, !dbg !5290
  %coa97 = getelementptr inbounds %struct.Profile, %struct.Profile* %44, i32 0, i32 1, !dbg !5291
  %arraydecay98 = getelementptr inbounds [3 x float], [3 x float]* %coa97, i64 0, i64 0, !dbg !5290
  %arraydecay99 = getelementptr inbounds [3 x float], [3 x float]* %co1, i64 0, i64 0, !dbg !5292
  call void @copy_v3_v3(float* %arraydecay98, float* %arraydecay99), !dbg !5293
  %45 = load %struct.Profile*, %struct.Profile** %pro, align 8, !dbg !5294
  %cob100 = getelementptr inbounds %struct.Profile, %struct.Profile* %45, i32 0, i32 3, !dbg !5295
  %arraydecay101 = getelementptr inbounds [3 x float], [3 x float]* %cob100, i64 0, i64 0, !dbg !5294
  %arraydecay102 = getelementptr inbounds [3 x float], [3 x float]* %co2, i64 0, i64 0, !dbg !5296
  call void @copy_v3_v3(float* %arraydecay101, float* %arraydecay102), !dbg !5297
  %46 = load %struct.Profile*, %struct.Profile** %pro, align 8, !dbg !5298
  %midco103 = getelementptr inbounds %struct.Profile, %struct.Profile* %46, i32 0, i32 2, !dbg !5299
  %arraydecay104 = getelementptr inbounds [3 x float], [3 x float]* %midco103, i64 0, i64 0, !dbg !5298
  %arraydecay105 = getelementptr inbounds [3 x float], [3 x float]* %co1, i64 0, i64 0, !dbg !5300
  %arraydecay106 = getelementptr inbounds [3 x float], [3 x float]* %co2, i64 0, i64 0, !dbg !5301
  call void @mid_v3_v3v3(float* %arraydecay104, float* %arraydecay105, float* %arraydecay106), !dbg !5302
  %47 = load %struct.Profile*, %struct.Profile** %pro, align 8, !dbg !5303
  %plane_co107 = getelementptr inbounds %struct.Profile, %struct.Profile* %47, i32 0, i32 5, !dbg !5304
  %arraydecay108 = getelementptr inbounds [3 x float], [3 x float]* %plane_co107, i64 0, i64 0, !dbg !5303
  call void @zero_v3(float* %arraydecay108), !dbg !5305
  %48 = load %struct.Profile*, %struct.Profile** %pro, align 8, !dbg !5306
  %plane_no109 = getelementptr inbounds %struct.Profile, %struct.Profile* %48, i32 0, i32 4, !dbg !5307
  %arraydecay110 = getelementptr inbounds [3 x float], [3 x float]* %plane_no109, i64 0, i64 0, !dbg !5306
  call void @zero_v3(float* %arraydecay110), !dbg !5308
  %49 = load %struct.Profile*, %struct.Profile** %pro, align 8, !dbg !5309
  %proj_dir111 = getelementptr inbounds %struct.Profile, %struct.Profile* %49, i32 0, i32 6, !dbg !5310
  %arraydecay112 = getelementptr inbounds [3 x float], [3 x float]* %proj_dir111, i64 0, i64 0, !dbg !5309
  call void @zero_v3(float* %arraydecay112), !dbg !5311
  br label %if.end113, !dbg !5312

if.end113:                                        ; preds = %if.then95, %if.end93
  ret void, !dbg !5313
}

; Function Attrs: noinline nounwind uwtable
define internal void @calculate_profile(%struct.BevelParams* %bp, %struct.BoundVert* %bndv) #0 !dbg !5314 {
entry:
  %bp.addr = alloca %struct.BevelParams*, align 8
  %bndv.addr = alloca %struct.BoundVert*, align 8
  %i = alloca i32, align 4
  %k = alloca i32, align 4
  %ns = alloca i32, align 4
  %uvals = alloca float*, align 8
  %co = alloca [3 x float], align 4
  %co2 = alloca [3 x float], align 4
  %p = alloca [3 x float], align 4
  %m = alloca [4 x [4 x float]], align 16
  %prof_co = alloca float*, align 8
  %prof_co_k = alloca float*, align 8
  %r = alloca float, align 4
  %need_2 = alloca i8, align 1
  %map_ok = alloca i8, align 1
  %pro = alloca %struct.Profile*, align 8
  store %struct.BevelParams* %bp, %struct.BevelParams** %bp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BevelParams** %bp.addr, metadata !5315, metadata !DIExpression()), !dbg !5316
  store %struct.BoundVert* %bndv, %struct.BoundVert** %bndv.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BoundVert** %bndv.addr, metadata !5317, metadata !DIExpression()), !dbg !5318
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5319, metadata !DIExpression()), !dbg !5320
  call void @llvm.dbg.declare(metadata i32* %k, metadata !5321, metadata !DIExpression()), !dbg !5322
  call void @llvm.dbg.declare(metadata i32* %ns, metadata !5323, metadata !DIExpression()), !dbg !5324
  call void @llvm.dbg.declare(metadata float** %uvals, metadata !5325, metadata !DIExpression()), !dbg !5326
  call void @llvm.dbg.declare(metadata [3 x float]* %co, metadata !5327, metadata !DIExpression()), !dbg !5328
  call void @llvm.dbg.declare(metadata [3 x float]* %co2, metadata !5329, metadata !DIExpression()), !dbg !5330
  call void @llvm.dbg.declare(metadata [3 x float]* %p, metadata !5331, metadata !DIExpression()), !dbg !5332
  call void @llvm.dbg.declare(metadata [4 x [4 x float]]* %m, metadata !5333, metadata !DIExpression()), !dbg !5337
  call void @llvm.dbg.declare(metadata float** %prof_co, metadata !5338, metadata !DIExpression()), !dbg !5339
  call void @llvm.dbg.declare(metadata float** %prof_co_k, metadata !5340, metadata !DIExpression()), !dbg !5341
  call void @llvm.dbg.declare(metadata float* %r, metadata !5342, metadata !DIExpression()), !dbg !5343
  call void @llvm.dbg.declare(metadata i8* %need_2, metadata !5344, metadata !DIExpression()), !dbg !5345
  call void @llvm.dbg.declare(metadata i8* %map_ok, metadata !5346, metadata !DIExpression()), !dbg !5347
  call void @llvm.dbg.declare(metadata %struct.Profile** %pro, metadata !5348, metadata !DIExpression()), !dbg !5349
  %0 = load %struct.BoundVert*, %struct.BoundVert** %bndv.addr, align 8, !dbg !5350
  %profile = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %0, i32 0, i32 7, !dbg !5351
  store %struct.Profile* %profile, %struct.Profile** %pro, align 8, !dbg !5349
  %1 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !5352
  %seg = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %1, i32 0, i32 5, !dbg !5354
  %2 = load i32, i32* %seg, align 8, !dbg !5354
  %cmp = icmp eq i32 %2, 1, !dbg !5355
  br i1 %cmp, label %if.then, label %if.end, !dbg !5356

if.then:                                          ; preds = %entry
  br label %for.end110, !dbg !5357

if.end:                                           ; preds = %entry
  %3 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !5358
  %seg1 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %3, i32 0, i32 5, !dbg !5359
  %4 = load i32, i32* %seg1, align 8, !dbg !5359
  %5 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !5360
  %pro_spacing = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %5, i32 0, i32 2, !dbg !5361
  %seg_2 = getelementptr inbounds %struct.ProfileSpacing, %struct.ProfileSpacing* %pro_spacing, i32 0, i32 2, !dbg !5362
  %6 = load i32, i32* %seg_2, align 8, !dbg !5362
  %cmp2 = icmp ne i32 %4, %6, !dbg !5363
  %conv = zext i1 %cmp2 to i32, !dbg !5363
  %conv3 = trunc i32 %conv to i8, !dbg !5358
  store i8 %conv3, i8* %need_2, align 1, !dbg !5364
  %7 = load %struct.Profile*, %struct.Profile** %pro, align 8, !dbg !5365
  %prof_co4 = getelementptr inbounds %struct.Profile, %struct.Profile* %7, i32 0, i32 7, !dbg !5367
  %8 = load float*, float** %prof_co4, align 8, !dbg !5367
  %tobool = icmp ne float* %8, null, !dbg !5365
  br i1 %tobool, label %if.end23, label %if.then5, !dbg !5368

if.then5:                                         ; preds = %if.end
  %9 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !5369
  %mem_arena = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %9, i32 0, i32 1, !dbg !5371
  %10 = load %struct.MemArena*, %struct.MemArena** %mem_arena, align 8, !dbg !5371
  %11 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !5372
  %seg6 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %11, i32 0, i32 5, !dbg !5373
  %12 = load i32, i32* %seg6, align 8, !dbg !5373
  %add = add nsw i32 %12, 1, !dbg !5374
  %mul = mul nsw i32 %add, 3, !dbg !5375
  %conv7 = sext i32 %mul to i64, !dbg !5376
  %mul8 = mul i64 %conv7, 4, !dbg !5377
  %call = call i8* @BLI_memarena_alloc(%struct.MemArena* %10, i64 %mul8), !dbg !5378
  %13 = bitcast i8* %call to float*, !dbg !5379
  %14 = load %struct.Profile*, %struct.Profile** %pro, align 8, !dbg !5380
  %prof_co9 = getelementptr inbounds %struct.Profile, %struct.Profile* %14, i32 0, i32 7, !dbg !5381
  store float* %13, float** %prof_co9, align 8, !dbg !5382
  %15 = load i8, i8* %need_2, align 1, !dbg !5383
  %tobool10 = icmp ne i8 %15, 0, !dbg !5383
  br i1 %tobool10, label %if.then11, label %if.else, !dbg !5385

if.then11:                                        ; preds = %if.then5
  %16 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !5386
  %mem_arena12 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %16, i32 0, i32 1, !dbg !5387
  %17 = load %struct.MemArena*, %struct.MemArena** %mem_arena12, align 8, !dbg !5387
  %18 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !5388
  %pro_spacing13 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %18, i32 0, i32 2, !dbg !5389
  %seg_214 = getelementptr inbounds %struct.ProfileSpacing, %struct.ProfileSpacing* %pro_spacing13, i32 0, i32 2, !dbg !5390
  %19 = load i32, i32* %seg_214, align 8, !dbg !5390
  %add15 = add nsw i32 %19, 1, !dbg !5391
  %mul16 = mul nsw i32 %add15, 3, !dbg !5392
  %conv17 = sext i32 %mul16 to i64, !dbg !5393
  %mul18 = mul i64 %conv17, 4, !dbg !5394
  %call19 = call i8* @BLI_memarena_alloc(%struct.MemArena* %17, i64 %mul18), !dbg !5395
  %20 = bitcast i8* %call19 to float*, !dbg !5396
  %21 = load %struct.Profile*, %struct.Profile** %pro, align 8, !dbg !5397
  %prof_co_2 = getelementptr inbounds %struct.Profile, %struct.Profile* %21, i32 0, i32 8, !dbg !5398
  store float* %20, float** %prof_co_2, align 8, !dbg !5399
  br label %if.end22, !dbg !5397

if.else:                                          ; preds = %if.then5
  %22 = load %struct.Profile*, %struct.Profile** %pro, align 8, !dbg !5400
  %prof_co20 = getelementptr inbounds %struct.Profile, %struct.Profile* %22, i32 0, i32 7, !dbg !5401
  %23 = load float*, float** %prof_co20, align 8, !dbg !5401
  %24 = load %struct.Profile*, %struct.Profile** %pro, align 8, !dbg !5402
  %prof_co_221 = getelementptr inbounds %struct.Profile, %struct.Profile* %24, i32 0, i32 8, !dbg !5403
  store float* %23, float** %prof_co_221, align 8, !dbg !5404
  br label %if.end22

if.end22:                                         ; preds = %if.else, %if.then11
  br label %if.end23, !dbg !5405

if.end23:                                         ; preds = %if.end22, %if.end
  %25 = load %struct.Profile*, %struct.Profile** %pro, align 8, !dbg !5406
  %super_r = getelementptr inbounds %struct.Profile, %struct.Profile* %25, i32 0, i32 0, !dbg !5407
  %26 = load float, float* %super_r, align 8, !dbg !5407
  store float %26, float* %r, align 4, !dbg !5408
  %27 = load float, float* %r, align 4, !dbg !5409
  %cmp24 = fcmp oeq float %27, 1.000000e+00, !dbg !5411
  br i1 %cmp24, label %if.then26, label %if.else27, !dbg !5412

if.then26:                                        ; preds = %if.end23
  store i8 0, i8* %map_ok, align 1, !dbg !5413
  br label %if.end32, !dbg !5414

if.else27:                                        ; preds = %if.end23
  %28 = load %struct.Profile*, %struct.Profile** %pro, align 8, !dbg !5415
  %coa = getelementptr inbounds %struct.Profile, %struct.Profile* %28, i32 0, i32 1, !dbg !5416
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %coa, i64 0, i64 0, !dbg !5415
  %29 = load %struct.Profile*, %struct.Profile** %pro, align 8, !dbg !5417
  %midco = getelementptr inbounds %struct.Profile, %struct.Profile* %29, i32 0, i32 2, !dbg !5418
  %arraydecay28 = getelementptr inbounds [3 x float], [3 x float]* %midco, i64 0, i64 0, !dbg !5417
  %30 = load %struct.Profile*, %struct.Profile** %pro, align 8, !dbg !5419
  %cob = getelementptr inbounds %struct.Profile, %struct.Profile* %30, i32 0, i32 3, !dbg !5420
  %arraydecay29 = getelementptr inbounds [3 x float], [3 x float]* %cob, i64 0, i64 0, !dbg !5419
  %arraydecay30 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m, i64 0, i64 0, !dbg !5421
  %call31 = call zeroext i8 @make_unit_square_map(float* %arraydecay, float* %arraydecay28, float* %arraydecay29, [4 x float]* %arraydecay30), !dbg !5422
  store i8 %call31, i8* %map_ok, align 1, !dbg !5423
  br label %if.end32

if.end32:                                         ; preds = %if.else27, %if.then26
  store i32 0, i32* %i, align 4, !dbg !5424
  br label %for.cond, !dbg !5426

for.cond:                                         ; preds = %for.inc108, %if.end32
  %31 = load i32, i32* %i, align 4, !dbg !5427
  %cmp33 = icmp slt i32 %31, 2, !dbg !5429
  br i1 %cmp33, label %for.body, label %for.end110, !dbg !5430

for.body:                                         ; preds = %for.cond
  %32 = load i32, i32* %i, align 4, !dbg !5431
  %cmp35 = icmp eq i32 %32, 0, !dbg !5434
  br i1 %cmp35, label %if.then37, label %if.else42, !dbg !5435

if.then37:                                        ; preds = %for.body
  %33 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !5436
  %seg38 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %33, i32 0, i32 5, !dbg !5438
  %34 = load i32, i32* %seg38, align 8, !dbg !5438
  store i32 %34, i32* %ns, align 4, !dbg !5439
  %35 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !5440
  %pro_spacing39 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %35, i32 0, i32 2, !dbg !5441
  %uvals40 = getelementptr inbounds %struct.ProfileSpacing, %struct.ProfileSpacing* %pro_spacing39, i32 0, i32 0, !dbg !5442
  %36 = load float*, float** %uvals40, align 8, !dbg !5442
  store float* %36, float** %uvals, align 8, !dbg !5443
  %37 = load %struct.Profile*, %struct.Profile** %pro, align 8, !dbg !5444
  %prof_co41 = getelementptr inbounds %struct.Profile, %struct.Profile* %37, i32 0, i32 7, !dbg !5445
  %38 = load float*, float** %prof_co41, align 8, !dbg !5445
  store float* %38, float** %prof_co, align 8, !dbg !5446
  br label %if.end50, !dbg !5447

if.else42:                                        ; preds = %for.body
  %39 = load i8, i8* %need_2, align 1, !dbg !5448
  %tobool43 = icmp ne i8 %39, 0, !dbg !5448
  br i1 %tobool43, label %if.end45, label %if.then44, !dbg !5451

if.then44:                                        ; preds = %if.else42
  br label %for.end110, !dbg !5452

if.end45:                                         ; preds = %if.else42
  %40 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !5453
  %pro_spacing46 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %40, i32 0, i32 2, !dbg !5454
  %seg_247 = getelementptr inbounds %struct.ProfileSpacing, %struct.ProfileSpacing* %pro_spacing46, i32 0, i32 2, !dbg !5455
  %41 = load i32, i32* %seg_247, align 8, !dbg !5455
  store i32 %41, i32* %ns, align 4, !dbg !5456
  %42 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !5457
  %pro_spacing48 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %42, i32 0, i32 2, !dbg !5458
  %uvals_2 = getelementptr inbounds %struct.ProfileSpacing, %struct.ProfileSpacing* %pro_spacing48, i32 0, i32 1, !dbg !5459
  %43 = load float*, float** %uvals_2, align 8, !dbg !5459
  store float* %43, float** %uvals, align 8, !dbg !5460
  %44 = load %struct.Profile*, %struct.Profile** %pro, align 8, !dbg !5461
  %prof_co_249 = getelementptr inbounds %struct.Profile, %struct.Profile* %44, i32 0, i32 8, !dbg !5462
  %45 = load float*, float** %prof_co_249, align 8, !dbg !5462
  store float* %45, float** %prof_co, align 8, !dbg !5463
  br label %if.end50

if.end50:                                         ; preds = %if.end45, %if.then37
  store i32 0, i32* %k, align 4, !dbg !5464
  br label %for.cond51, !dbg !5466

for.cond51:                                       ; preds = %for.inc, %if.end50
  %46 = load i32, i32* %k, align 4, !dbg !5467
  %47 = load i32, i32* %ns, align 4, !dbg !5469
  %cmp52 = icmp sle i32 %46, %47, !dbg !5470
  br i1 %cmp52, label %for.body54, label %for.end, !dbg !5471

for.body54:                                       ; preds = %for.cond51
  %48 = load i32, i32* %k, align 4, !dbg !5472
  %cmp55 = icmp eq i32 %48, 0, !dbg !5475
  br i1 %cmp55, label %if.then57, label %if.else61, !dbg !5476

if.then57:                                        ; preds = %for.body54
  %arraydecay58 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !5477
  %49 = load %struct.Profile*, %struct.Profile** %pro, align 8, !dbg !5478
  %coa59 = getelementptr inbounds %struct.Profile, %struct.Profile* %49, i32 0, i32 1, !dbg !5479
  %arraydecay60 = getelementptr inbounds [3 x float], [3 x float]* %coa59, i64 0, i64 0, !dbg !5478
  call void @copy_v3_v3(float* %arraydecay58, float* %arraydecay60), !dbg !5480
  br label %if.end86, !dbg !5480

if.else61:                                        ; preds = %for.body54
  %50 = load i32, i32* %k, align 4, !dbg !5481
  %51 = load i32, i32* %ns, align 4, !dbg !5483
  %cmp62 = icmp eq i32 %50, %51, !dbg !5484
  br i1 %cmp62, label %if.then64, label %if.else68, !dbg !5485

if.then64:                                        ; preds = %if.else61
  %arraydecay65 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !5486
  %52 = load %struct.Profile*, %struct.Profile** %pro, align 8, !dbg !5487
  %cob66 = getelementptr inbounds %struct.Profile, %struct.Profile* %52, i32 0, i32 3, !dbg !5488
  %arraydecay67 = getelementptr inbounds [3 x float], [3 x float]* %cob66, i64 0, i64 0, !dbg !5487
  call void @copy_v3_v3(float* %arraydecay65, float* %arraydecay67), !dbg !5489
  br label %if.end85, !dbg !5489

if.else68:                                        ; preds = %if.else61
  %53 = load i8, i8* %map_ok, align 1, !dbg !5490
  %tobool69 = icmp ne i8 %53, 0, !dbg !5490
  br i1 %tobool69, label %if.then70, label %if.else76, !dbg !5493

if.then70:                                        ; preds = %if.else68
  %54 = load float*, float** %uvals, align 8, !dbg !5494
  %55 = load i32, i32* %k, align 4, !dbg !5496
  %idxprom = sext i32 %55 to i64, !dbg !5494
  %arrayidx = getelementptr inbounds float, float* %54, i64 %idxprom, !dbg !5494
  %56 = load float, float* %arrayidx, align 4, !dbg !5494
  %57 = load float, float* %r, align 4, !dbg !5497
  %arraydecay71 = getelementptr inbounds [3 x float], [3 x float]* %p, i64 0, i64 0, !dbg !5498
  call void @superellipse_co(float %56, float %57, float* %arraydecay71), !dbg !5499
  %arrayidx72 = getelementptr inbounds [3 x float], [3 x float]* %p, i64 0, i64 2, !dbg !5500
  store float 0.000000e+00, float* %arrayidx72, align 4, !dbg !5501
  %arraydecay73 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !5502
  %arraydecay74 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m, i64 0, i64 0, !dbg !5503
  %arraydecay75 = getelementptr inbounds [3 x float], [3 x float]* %p, i64 0, i64 0, !dbg !5504
  call void @mul_v3_m4v3(float* %arraydecay73, [4 x float]* %arraydecay74, float* %arraydecay75), !dbg !5505
  br label %if.end84, !dbg !5506

if.else76:                                        ; preds = %if.else68
  %arraydecay77 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !5507
  %58 = load %struct.Profile*, %struct.Profile** %pro, align 8, !dbg !5509
  %coa78 = getelementptr inbounds %struct.Profile, %struct.Profile* %58, i32 0, i32 1, !dbg !5510
  %arraydecay79 = getelementptr inbounds [3 x float], [3 x float]* %coa78, i64 0, i64 0, !dbg !5509
  %59 = load %struct.Profile*, %struct.Profile** %pro, align 8, !dbg !5511
  %cob80 = getelementptr inbounds %struct.Profile, %struct.Profile* %59, i32 0, i32 3, !dbg !5512
  %arraydecay81 = getelementptr inbounds [3 x float], [3 x float]* %cob80, i64 0, i64 0, !dbg !5511
  %60 = load i32, i32* %k, align 4, !dbg !5513
  %conv82 = sitofp i32 %60 to float, !dbg !5514
  %61 = load i32, i32* %ns, align 4, !dbg !5515
  %conv83 = sitofp i32 %61 to float, !dbg !5516
  %div = fdiv float %conv82, %conv83, !dbg !5517
  call void @interp_v3_v3v3(float* %arraydecay77, float* %arraydecay79, float* %arraydecay81, float %div), !dbg !5518
  br label %if.end84

if.end84:                                         ; preds = %if.else76, %if.then70
  br label %if.end85

if.end85:                                         ; preds = %if.end84, %if.then64
  br label %if.end86

if.end86:                                         ; preds = %if.end85, %if.then57
  %62 = load float*, float** %prof_co, align 8, !dbg !5519
  %63 = load i32, i32* %k, align 4, !dbg !5520
  %mul87 = mul nsw i32 3, %63, !dbg !5521
  %idx.ext = sext i32 %mul87 to i64, !dbg !5522
  %add.ptr = getelementptr inbounds float, float* %62, i64 %idx.ext, !dbg !5522
  store float* %add.ptr, float** %prof_co_k, align 8, !dbg !5523
  %64 = load %struct.Profile*, %struct.Profile** %pro, align 8, !dbg !5524
  %proj_dir = getelementptr inbounds %struct.Profile, %struct.Profile* %64, i32 0, i32 6, !dbg !5526
  %arraydecay88 = getelementptr inbounds [3 x float], [3 x float]* %proj_dir, i64 0, i64 0, !dbg !5524
  %call89 = call zeroext i8 @is_zero_v3(float* %arraydecay88), !dbg !5527
  %tobool90 = icmp ne i8 %call89, 0, !dbg !5527
  br i1 %tobool90, label %if.else105, label %if.then91, !dbg !5528

if.then91:                                        ; preds = %if.end86
  %arraydecay92 = getelementptr inbounds [3 x float], [3 x float]* %co2, i64 0, i64 0, !dbg !5529
  %arraydecay93 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !5531
  %65 = load %struct.Profile*, %struct.Profile** %pro, align 8, !dbg !5532
  %proj_dir94 = getelementptr inbounds %struct.Profile, %struct.Profile* %65, i32 0, i32 6, !dbg !5533
  %arraydecay95 = getelementptr inbounds [3 x float], [3 x float]* %proj_dir94, i64 0, i64 0, !dbg !5532
  call void @add_v3_v3v3(float* %arraydecay92, float* %arraydecay93, float* %arraydecay95), !dbg !5534
  %66 = load float*, float** %prof_co_k, align 8, !dbg !5535
  %arraydecay96 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !5537
  %arraydecay97 = getelementptr inbounds [3 x float], [3 x float]* %co2, i64 0, i64 0, !dbg !5538
  %67 = load %struct.Profile*, %struct.Profile** %pro, align 8, !dbg !5539
  %plane_co = getelementptr inbounds %struct.Profile, %struct.Profile* %67, i32 0, i32 5, !dbg !5540
  %arraydecay98 = getelementptr inbounds [3 x float], [3 x float]* %plane_co, i64 0, i64 0, !dbg !5539
  %68 = load %struct.Profile*, %struct.Profile** %pro, align 8, !dbg !5541
  %plane_no = getelementptr inbounds %struct.Profile, %struct.Profile* %68, i32 0, i32 4, !dbg !5542
  %arraydecay99 = getelementptr inbounds [3 x float], [3 x float]* %plane_no, i64 0, i64 0, !dbg !5541
  %call100 = call zeroext i8 @isect_line_plane_v3(float* %66, float* %arraydecay96, float* %arraydecay97, float* %arraydecay98, float* %arraydecay99), !dbg !5543
  %tobool101 = icmp ne i8 %call100, 0, !dbg !5543
  br i1 %tobool101, label %if.end104, label %if.then102, !dbg !5544

if.then102:                                       ; preds = %if.then91
  %69 = load float*, float** %prof_co_k, align 8, !dbg !5545
  %arraydecay103 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !5547
  call void @copy_v3_v3(float* %69, float* %arraydecay103), !dbg !5548
  br label %if.end104, !dbg !5549

if.end104:                                        ; preds = %if.then102, %if.then91
  br label %if.end107, !dbg !5550

if.else105:                                       ; preds = %if.end86
  %70 = load float*, float** %prof_co_k, align 8, !dbg !5551
  %arraydecay106 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !5553
  call void @copy_v3_v3(float* %70, float* %arraydecay106), !dbg !5554
  br label %if.end107

if.end107:                                        ; preds = %if.else105, %if.end104
  br label %for.inc, !dbg !5555

for.inc:                                          ; preds = %if.end107
  %71 = load i32, i32* %k, align 4, !dbg !5556
  %inc = add nsw i32 %71, 1, !dbg !5556
  store i32 %inc, i32* %k, align 4, !dbg !5556
  br label %for.cond51, !dbg !5557, !llvm.loop !5558

for.end:                                          ; preds = %for.cond51
  br label %for.inc108, !dbg !5560

for.inc108:                                       ; preds = %for.end
  %72 = load i32, i32* %i, align 4, !dbg !5561
  %inc109 = add nsw i32 %72, 1, !dbg !5561
  store i32 %inc109, i32* %i, align 4, !dbg !5561
  br label %for.cond, !dbg !5562, !llvm.loop !5563

for.end110:                                       ; preds = %if.then, %if.then44, %for.cond
  ret void, !dbg !5565
}

; Function Attrs: noinline nounwind uwtable
define internal void @offset_meet(%struct.EdgeHalf* %e1, %struct.EdgeHalf* %e2, %struct.BMVert* %v, %struct.BMFace* %f, float* %meetco) #0 !dbg !5566 {
entry:
  %e1.addr = alloca %struct.EdgeHalf*, align 8
  %e2.addr = alloca %struct.EdgeHalf*, align 8
  %v.addr = alloca %struct.BMVert*, align 8
  %f.addr = alloca %struct.BMFace*, align 8
  %meetco.addr = alloca float*, align 8
  %dir1 = alloca [3 x float], align 4
  %dir2 = alloca [3 x float], align 4
  %norm_v = alloca [3 x float], align 4
  %norm_perp1 = alloca [3 x float], align 4
  %norm_perp2 = alloca [3 x float], align 4
  %off1a = alloca [3 x float], align 4
  %off1b = alloca [3 x float], align 4
  %off2a = alloca [3 x float], align 4
  %off2b = alloca [3 x float], align 4
  %isect2 = alloca [3 x float], align 4
  %ang = alloca float, align 4
  %d = alloca float, align 4
  %closer_v = alloca %struct.BMVert*, align 8
  store %struct.EdgeHalf* %e1, %struct.EdgeHalf** %e1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.EdgeHalf** %e1.addr, metadata !5569, metadata !DIExpression()), !dbg !5570
  store %struct.EdgeHalf* %e2, %struct.EdgeHalf** %e2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.EdgeHalf** %e2.addr, metadata !5571, metadata !DIExpression()), !dbg !5572
  store %struct.BMVert* %v, %struct.BMVert** %v.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMVert** %v.addr, metadata !5573, metadata !DIExpression()), !dbg !5574
  store %struct.BMFace* %f, %struct.BMFace** %f.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMFace** %f.addr, metadata !5575, metadata !DIExpression()), !dbg !5576
  store float* %meetco, float** %meetco.addr, align 8
  call void @llvm.dbg.declare(metadata float** %meetco.addr, metadata !5577, metadata !DIExpression()), !dbg !5578
  call void @llvm.dbg.declare(metadata [3 x float]* %dir1, metadata !5579, metadata !DIExpression()), !dbg !5580
  call void @llvm.dbg.declare(metadata [3 x float]* %dir2, metadata !5581, metadata !DIExpression()), !dbg !5582
  call void @llvm.dbg.declare(metadata [3 x float]* %norm_v, metadata !5583, metadata !DIExpression()), !dbg !5584
  call void @llvm.dbg.declare(metadata [3 x float]* %norm_perp1, metadata !5585, metadata !DIExpression()), !dbg !5586
  call void @llvm.dbg.declare(metadata [3 x float]* %norm_perp2, metadata !5587, metadata !DIExpression()), !dbg !5588
  call void @llvm.dbg.declare(metadata [3 x float]* %off1a, metadata !5589, metadata !DIExpression()), !dbg !5590
  call void @llvm.dbg.declare(metadata [3 x float]* %off1b, metadata !5591, metadata !DIExpression()), !dbg !5592
  call void @llvm.dbg.declare(metadata [3 x float]* %off2a, metadata !5593, metadata !DIExpression()), !dbg !5594
  call void @llvm.dbg.declare(metadata [3 x float]* %off2b, metadata !5595, metadata !DIExpression()), !dbg !5596
  call void @llvm.dbg.declare(metadata [3 x float]* %isect2, metadata !5597, metadata !DIExpression()), !dbg !5598
  call void @llvm.dbg.declare(metadata float* %ang, metadata !5599, metadata !DIExpression()), !dbg !5600
  call void @llvm.dbg.declare(metadata float* %d, metadata !5601, metadata !DIExpression()), !dbg !5602
  call void @llvm.dbg.declare(metadata %struct.BMVert** %closer_v, metadata !5603, metadata !DIExpression()), !dbg !5604
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %dir1, i64 0, i64 0, !dbg !5605
  %0 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !5606
  %co = getelementptr inbounds %struct.BMVert, %struct.BMVert* %0, i32 0, i32 2, !dbg !5607
  %arraydecay1 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !5606
  %1 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e1.addr, align 8, !dbg !5608
  %e = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %1, i32 0, i32 2, !dbg !5609
  %2 = load %struct.BMEdge*, %struct.BMEdge** %e, align 8, !dbg !5609
  %3 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !5610
  %call = call %struct.BMVert* @BM_edge_other_vert(%struct.BMEdge* %2, %struct.BMVert* %3), !dbg !5611
  %co2 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %call, i32 0, i32 2, !dbg !5612
  %arraydecay3 = getelementptr inbounds [3 x float], [3 x float]* %co2, i64 0, i64 0, !dbg !5611
  call void @sub_v3_v3v3(float* %arraydecay, float* %arraydecay1, float* %arraydecay3), !dbg !5613
  %arraydecay4 = getelementptr inbounds [3 x float], [3 x float]* %dir2, i64 0, i64 0, !dbg !5614
  %4 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e2.addr, align 8, !dbg !5615
  %e5 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %4, i32 0, i32 2, !dbg !5616
  %5 = load %struct.BMEdge*, %struct.BMEdge** %e5, align 8, !dbg !5616
  %6 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !5617
  %call6 = call %struct.BMVert* @BM_edge_other_vert(%struct.BMEdge* %5, %struct.BMVert* %6), !dbg !5618
  %co7 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %call6, i32 0, i32 2, !dbg !5619
  %arraydecay8 = getelementptr inbounds [3 x float], [3 x float]* %co7, i64 0, i64 0, !dbg !5618
  %7 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !5620
  %co9 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %7, i32 0, i32 2, !dbg !5621
  %arraydecay10 = getelementptr inbounds [3 x float], [3 x float]* %co9, i64 0, i64 0, !dbg !5620
  call void @sub_v3_v3v3(float* %arraydecay4, float* %arraydecay8, float* %arraydecay10), !dbg !5622
  %arraydecay11 = getelementptr inbounds [3 x float], [3 x float]* %dir1, i64 0, i64 0, !dbg !5623
  %arraydecay12 = getelementptr inbounds [3 x float], [3 x float]* %dir2, i64 0, i64 0, !dbg !5624
  %call13 = call float @angle_v3v3(float* %arraydecay11, float* %arraydecay12), !dbg !5625
  store float %call13, float* %ang, align 4, !dbg !5626
  %8 = load float, float* %ang, align 4, !dbg !5627
  %cmp = fcmp olt float %8, 0x3F1A36E2E0000000, !dbg !5629
  br i1 %cmp, label %if.then, label %if.else43, !dbg !5630

if.then:                                          ; preds = %entry
  %9 = load %struct.BMFace*, %struct.BMFace** %f.addr, align 8, !dbg !5631
  %tobool = icmp ne %struct.BMFace* %9, null, !dbg !5631
  br i1 %tobool, label %if.then14, label %if.else, !dbg !5634

if.then14:                                        ; preds = %if.then
  %arraydecay15 = getelementptr inbounds [3 x float], [3 x float]* %norm_v, i64 0, i64 0, !dbg !5635
  %10 = load %struct.BMFace*, %struct.BMFace** %f.addr, align 8, !dbg !5636
  %no = getelementptr inbounds %struct.BMFace, %struct.BMFace* %10, i32 0, i32 4, !dbg !5637
  %arraydecay16 = getelementptr inbounds [3 x float], [3 x float]* %no, i64 0, i64 0, !dbg !5636
  call void @copy_v3_v3(float* %arraydecay15, float* %arraydecay16), !dbg !5638
  br label %if.end, !dbg !5638

if.else:                                          ; preds = %if.then
  %arraydecay17 = getelementptr inbounds [3 x float], [3 x float]* %norm_v, i64 0, i64 0, !dbg !5639
  %11 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !5640
  %no18 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %11, i32 0, i32 3, !dbg !5641
  %arraydecay19 = getelementptr inbounds [3 x float], [3 x float]* %no18, i64 0, i64 0, !dbg !5640
  call void @copy_v3_v3(float* %arraydecay17, float* %arraydecay19), !dbg !5642
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then14
  %arraydecay20 = getelementptr inbounds [3 x float], [3 x float]* %norm_perp1, i64 0, i64 0, !dbg !5643
  %arraydecay21 = getelementptr inbounds [3 x float], [3 x float]* %dir1, i64 0, i64 0, !dbg !5644
  %arraydecay22 = getelementptr inbounds [3 x float], [3 x float]* %norm_v, i64 0, i64 0, !dbg !5645
  call void @cross_v3_v3v3(float* %arraydecay20, float* %arraydecay21, float* %arraydecay22), !dbg !5646
  %arraydecay23 = getelementptr inbounds [3 x float], [3 x float]* %norm_perp1, i64 0, i64 0, !dbg !5647
  %call24 = call float @normalize_v3(float* %arraydecay23), !dbg !5648
  %arraydecay25 = getelementptr inbounds [3 x float], [3 x float]* %off1a, i64 0, i64 0, !dbg !5649
  %12 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !5650
  %co26 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %12, i32 0, i32 2, !dbg !5651
  %arraydecay27 = getelementptr inbounds [3 x float], [3 x float]* %co26, i64 0, i64 0, !dbg !5650
  call void @copy_v3_v3(float* %arraydecay25, float* %arraydecay27), !dbg !5652
  %13 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e1.addr, align 8, !dbg !5653
  %offset_r = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %13, i32 0, i32 9, !dbg !5654
  %14 = load float, float* %offset_r, align 8, !dbg !5654
  %15 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e2.addr, align 8, !dbg !5655
  %offset_l = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %15, i32 0, i32 8, !dbg !5656
  %16 = load float, float* %offset_l, align 4, !dbg !5656
  %call28 = call float @max_ff(float %14, float %16), !dbg !5657
  store float %call28, float* %d, align 4, !dbg !5658
  %arraydecay29 = getelementptr inbounds [3 x float], [3 x float]* %off1a, i64 0, i64 0, !dbg !5659
  %arraydecay30 = getelementptr inbounds [3 x float], [3 x float]* %norm_perp1, i64 0, i64 0, !dbg !5660
  %17 = load float, float* %d, align 4, !dbg !5661
  call void @madd_v3_v3fl(float* %arraydecay29, float* %arraydecay30, float %17), !dbg !5662
  %18 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e1.addr, align 8, !dbg !5663
  %offset_r31 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %18, i32 0, i32 9, !dbg !5665
  %19 = load float, float* %offset_r31, align 8, !dbg !5665
  %20 = load float, float* %d, align 4, !dbg !5666
  %cmp32 = fcmp une float %19, %20, !dbg !5667
  br i1 %cmp32, label %if.then33, label %if.else35, !dbg !5668

if.then33:                                        ; preds = %if.end
  %21 = load float, float* %d, align 4, !dbg !5669
  %22 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e1.addr, align 8, !dbg !5670
  %offset_r34 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %22, i32 0, i32 9, !dbg !5671
  store float %21, float* %offset_r34, align 8, !dbg !5672
  br label %if.end41, !dbg !5670

if.else35:                                        ; preds = %if.end
  %23 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e2.addr, align 8, !dbg !5673
  %offset_l36 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %23, i32 0, i32 8, !dbg !5675
  %24 = load float, float* %offset_l36, align 4, !dbg !5675
  %25 = load float, float* %d, align 4, !dbg !5676
  %cmp37 = fcmp une float %24, %25, !dbg !5677
  br i1 %cmp37, label %if.then38, label %if.end40, !dbg !5678

if.then38:                                        ; preds = %if.else35
  %26 = load float, float* %d, align 4, !dbg !5679
  %27 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e2.addr, align 8, !dbg !5680
  %offset_l39 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %27, i32 0, i32 8, !dbg !5681
  store float %26, float* %offset_l39, align 4, !dbg !5682
  br label %if.end40, !dbg !5680

if.end40:                                         ; preds = %if.then38, %if.else35
  br label %if.end41

if.end41:                                         ; preds = %if.end40, %if.then33
  %28 = load float*, float** %meetco.addr, align 8, !dbg !5683
  %arraydecay42 = getelementptr inbounds [3 x float], [3 x float]* %off1a, i64 0, i64 0, !dbg !5684
  call void @copy_v3_v3(float* %28, float* %arraydecay42), !dbg !5685
  br label %if.end157, !dbg !5686

if.else43:                                        ; preds = %entry
  %29 = load float, float* %ang, align 4, !dbg !5687
  %sub = fsub float %29, 0x400921FB60000000, !dbg !5689
  %30 = call float @llvm.fabs.f32(float %sub), !dbg !5690
  %cmp44 = fcmp olt float %30, 0x3F1A36E2E0000000, !dbg !5691
  br i1 %cmp44, label %if.then45, label %if.else60, !dbg !5692

if.then45:                                        ; preds = %if.else43
  %31 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e1.addr, align 8, !dbg !5693
  %offset_r46 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %31, i32 0, i32 9, !dbg !5695
  %32 = load float, float* %offset_r46, align 8, !dbg !5695
  %33 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e2.addr, align 8, !dbg !5696
  %offset_l47 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %33, i32 0, i32 8, !dbg !5697
  %34 = load float, float* %offset_l47, align 4, !dbg !5697
  %call48 = call float @max_ff(float %32, float %34), !dbg !5698
  store float %call48, float* %d, align 4, !dbg !5699
  %35 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e2.addr, align 8, !dbg !5700
  %36 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !5701
  %37 = load float, float* %d, align 4, !dbg !5702
  %38 = load float*, float** %meetco.addr, align 8, !dbg !5703
  call void @slide_dist(%struct.EdgeHalf* %35, %struct.BMVert* %36, float %37, float* %38), !dbg !5704
  %39 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e1.addr, align 8, !dbg !5705
  %offset_r49 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %39, i32 0, i32 9, !dbg !5707
  %40 = load float, float* %offset_r49, align 8, !dbg !5707
  %41 = load float, float* %d, align 4, !dbg !5708
  %cmp50 = fcmp une float %40, %41, !dbg !5709
  br i1 %cmp50, label %if.then51, label %if.else53, !dbg !5710

if.then51:                                        ; preds = %if.then45
  %42 = load float, float* %d, align 4, !dbg !5711
  %43 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e1.addr, align 8, !dbg !5712
  %offset_r52 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %43, i32 0, i32 9, !dbg !5713
  store float %42, float* %offset_r52, align 8, !dbg !5714
  br label %if.end59, !dbg !5712

if.else53:                                        ; preds = %if.then45
  %44 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e2.addr, align 8, !dbg !5715
  %offset_l54 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %44, i32 0, i32 8, !dbg !5717
  %45 = load float, float* %offset_l54, align 4, !dbg !5717
  %46 = load float, float* %d, align 4, !dbg !5718
  %cmp55 = fcmp une float %45, %46, !dbg !5719
  br i1 %cmp55, label %if.then56, label %if.end58, !dbg !5720

if.then56:                                        ; preds = %if.else53
  %47 = load float, float* %d, align 4, !dbg !5721
  %48 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e2.addr, align 8, !dbg !5722
  %offset_l57 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %48, i32 0, i32 8, !dbg !5723
  store float %47, float* %offset_l57, align 4, !dbg !5724
  br label %if.end58, !dbg !5722

if.end58:                                         ; preds = %if.then56, %if.else53
  br label %if.end59

if.end59:                                         ; preds = %if.end58, %if.then51
  br label %if.end156, !dbg !5725

if.else60:                                        ; preds = %if.else43
  %arraydecay61 = getelementptr inbounds [3 x float], [3 x float]* %norm_v, i64 0, i64 0, !dbg !5726
  %arraydecay62 = getelementptr inbounds [3 x float], [3 x float]* %dir2, i64 0, i64 0, !dbg !5728
  %arraydecay63 = getelementptr inbounds [3 x float], [3 x float]* %dir1, i64 0, i64 0, !dbg !5729
  call void @cross_v3_v3v3(float* %arraydecay61, float* %arraydecay62, float* %arraydecay63), !dbg !5730
  %arraydecay64 = getelementptr inbounds [3 x float], [3 x float]* %norm_v, i64 0, i64 0, !dbg !5731
  %call65 = call float @normalize_v3(float* %arraydecay64), !dbg !5732
  %arraydecay66 = getelementptr inbounds [3 x float], [3 x float]* %norm_v, i64 0, i64 0, !dbg !5733
  %49 = load %struct.BMFace*, %struct.BMFace** %f.addr, align 8, !dbg !5735
  %tobool67 = icmp ne %struct.BMFace* %49, null, !dbg !5735
  br i1 %tobool67, label %cond.true, label %cond.false, !dbg !5735

cond.true:                                        ; preds = %if.else60
  %50 = load %struct.BMFace*, %struct.BMFace** %f.addr, align 8, !dbg !5736
  %no68 = getelementptr inbounds %struct.BMFace, %struct.BMFace* %50, i32 0, i32 4, !dbg !5737
  %arraydecay69 = getelementptr inbounds [3 x float], [3 x float]* %no68, i64 0, i64 0, !dbg !5736
  br label %cond.end, !dbg !5735

cond.false:                                       ; preds = %if.else60
  %51 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !5738
  %no70 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %51, i32 0, i32 3, !dbg !5739
  %arraydecay71 = getelementptr inbounds [3 x float], [3 x float]* %no70, i64 0, i64 0, !dbg !5738
  br label %cond.end, !dbg !5735

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi float* [ %arraydecay69, %cond.true ], [ %arraydecay71, %cond.false ], !dbg !5735
  %call72 = call float @dot_v3v3(float* %arraydecay66, float* %cond), !dbg !5740
  %cmp73 = fcmp olt float %call72, 0.000000e+00, !dbg !5741
  br i1 %cmp73, label %if.then74, label %if.end76, !dbg !5742

if.then74:                                        ; preds = %cond.end
  %arraydecay75 = getelementptr inbounds [3 x float], [3 x float]* %norm_v, i64 0, i64 0, !dbg !5743
  call void @negate_v3(float* %arraydecay75), !dbg !5744
  br label %if.end76, !dbg !5744

if.end76:                                         ; preds = %if.then74, %cond.end
  %arraydecay77 = getelementptr inbounds [3 x float], [3 x float]* %norm_perp1, i64 0, i64 0, !dbg !5745
  %arraydecay78 = getelementptr inbounds [3 x float], [3 x float]* %dir1, i64 0, i64 0, !dbg !5746
  %arraydecay79 = getelementptr inbounds [3 x float], [3 x float]* %norm_v, i64 0, i64 0, !dbg !5747
  call void @cross_v3_v3v3(float* %arraydecay77, float* %arraydecay78, float* %arraydecay79), !dbg !5748
  %arraydecay80 = getelementptr inbounds [3 x float], [3 x float]* %norm_perp2, i64 0, i64 0, !dbg !5749
  %arraydecay81 = getelementptr inbounds [3 x float], [3 x float]* %dir2, i64 0, i64 0, !dbg !5750
  %arraydecay82 = getelementptr inbounds [3 x float], [3 x float]* %norm_v, i64 0, i64 0, !dbg !5751
  call void @cross_v3_v3v3(float* %arraydecay80, float* %arraydecay81, float* %arraydecay82), !dbg !5752
  %arraydecay83 = getelementptr inbounds [3 x float], [3 x float]* %norm_perp1, i64 0, i64 0, !dbg !5753
  %call84 = call float @normalize_v3(float* %arraydecay83), !dbg !5754
  %arraydecay85 = getelementptr inbounds [3 x float], [3 x float]* %norm_perp2, i64 0, i64 0, !dbg !5755
  %call86 = call float @normalize_v3(float* %arraydecay85), !dbg !5756
  %arraydecay87 = getelementptr inbounds [3 x float], [3 x float]* %off1a, i64 0, i64 0, !dbg !5757
  %52 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !5758
  %co88 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %52, i32 0, i32 2, !dbg !5759
  %arraydecay89 = getelementptr inbounds [3 x float], [3 x float]* %co88, i64 0, i64 0, !dbg !5758
  call void @copy_v3_v3(float* %arraydecay87, float* %arraydecay89), !dbg !5760
  %arraydecay90 = getelementptr inbounds [3 x float], [3 x float]* %off1a, i64 0, i64 0, !dbg !5761
  %arraydecay91 = getelementptr inbounds [3 x float], [3 x float]* %norm_perp1, i64 0, i64 0, !dbg !5762
  %53 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e1.addr, align 8, !dbg !5763
  %offset_r92 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %53, i32 0, i32 9, !dbg !5764
  %54 = load float, float* %offset_r92, align 8, !dbg !5764
  call void @madd_v3_v3fl(float* %arraydecay90, float* %arraydecay91, float %54), !dbg !5765
  %arraydecay93 = getelementptr inbounds [3 x float], [3 x float]* %off1b, i64 0, i64 0, !dbg !5766
  %arraydecay94 = getelementptr inbounds [3 x float], [3 x float]* %off1a, i64 0, i64 0, !dbg !5767
  %arraydecay95 = getelementptr inbounds [3 x float], [3 x float]* %dir1, i64 0, i64 0, !dbg !5768
  call void @add_v3_v3v3(float* %arraydecay93, float* %arraydecay94, float* %arraydecay95), !dbg !5769
  %arraydecay96 = getelementptr inbounds [3 x float], [3 x float]* %off2a, i64 0, i64 0, !dbg !5770
  %55 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !5771
  %co97 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %55, i32 0, i32 2, !dbg !5772
  %arraydecay98 = getelementptr inbounds [3 x float], [3 x float]* %co97, i64 0, i64 0, !dbg !5771
  call void @copy_v3_v3(float* %arraydecay96, float* %arraydecay98), !dbg !5773
  %arraydecay99 = getelementptr inbounds [3 x float], [3 x float]* %off2a, i64 0, i64 0, !dbg !5774
  %arraydecay100 = getelementptr inbounds [3 x float], [3 x float]* %norm_perp2, i64 0, i64 0, !dbg !5775
  %56 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e2.addr, align 8, !dbg !5776
  %offset_l101 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %56, i32 0, i32 8, !dbg !5777
  %57 = load float, float* %offset_l101, align 4, !dbg !5777
  call void @madd_v3_v3fl(float* %arraydecay99, float* %arraydecay100, float %57), !dbg !5778
  %arraydecay102 = getelementptr inbounds [3 x float], [3 x float]* %off2b, i64 0, i64 0, !dbg !5779
  %arraydecay103 = getelementptr inbounds [3 x float], [3 x float]* %off2a, i64 0, i64 0, !dbg !5780
  %arraydecay104 = getelementptr inbounds [3 x float], [3 x float]* %dir2, i64 0, i64 0, !dbg !5781
  call void @add_v3_v3v3(float* %arraydecay102, float* %arraydecay103, float* %arraydecay104), !dbg !5782
  %arraydecay105 = getelementptr inbounds [3 x float], [3 x float]* %off1a, i64 0, i64 0, !dbg !5783
  %arraydecay106 = getelementptr inbounds [3 x float], [3 x float]* %off1b, i64 0, i64 0, !dbg !5785
  %arraydecay107 = getelementptr inbounds [3 x float], [3 x float]* %off2a, i64 0, i64 0, !dbg !5786
  %arraydecay108 = getelementptr inbounds [3 x float], [3 x float]* %off2b, i64 0, i64 0, !dbg !5787
  %58 = load float*, float** %meetco.addr, align 8, !dbg !5788
  %arraydecay109 = getelementptr inbounds [3 x float], [3 x float]* %isect2, i64 0, i64 0, !dbg !5789
  %call110 = call i32 @isect_line_line_v3(float* %arraydecay105, float* %arraydecay106, float* %arraydecay107, float* %arraydecay108, float* %58, float* %arraydecay109), !dbg !5790
  %tobool111 = icmp ne i32 %call110, 0, !dbg !5790
  br i1 %tobool111, label %if.else127, label %if.then112, !dbg !5791

if.then112:                                       ; preds = %if.end76
  %59 = load float*, float** %meetco.addr, align 8, !dbg !5792
  %arraydecay113 = getelementptr inbounds [3 x float], [3 x float]* %off1a, i64 0, i64 0, !dbg !5794
  call void @copy_v3_v3(float* %59, float* %arraydecay113), !dbg !5795
  %60 = load float*, float** %meetco.addr, align 8, !dbg !5796
  %61 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !5797
  %co114 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %61, i32 0, i32 2, !dbg !5798
  %arraydecay115 = getelementptr inbounds [3 x float], [3 x float]* %co114, i64 0, i64 0, !dbg !5797
  %62 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e2.addr, align 8, !dbg !5799
  %e116 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %62, i32 0, i32 2, !dbg !5800
  %63 = load %struct.BMEdge*, %struct.BMEdge** %e116, align 8, !dbg !5800
  %64 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !5801
  %call117 = call %struct.BMVert* @BM_edge_other_vert(%struct.BMEdge* %63, %struct.BMVert* %64), !dbg !5802
  %co118 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %call117, i32 0, i32 2, !dbg !5803
  %arraydecay119 = getelementptr inbounds [3 x float], [3 x float]* %co118, i64 0, i64 0, !dbg !5802
  %call120 = call float @dist_to_line_v3(float* %60, float* %arraydecay115, float* %arraydecay119), !dbg !5804
  store float %call120, float* %d, align 4, !dbg !5805
  %65 = load float, float* %d, align 4, !dbg !5806
  %66 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e2.addr, align 8, !dbg !5808
  %offset_l121 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %66, i32 0, i32 8, !dbg !5809
  %67 = load float, float* %offset_l121, align 4, !dbg !5809
  %sub122 = fsub float %65, %67, !dbg !5810
  %68 = call float @llvm.fabs.f32(float %sub122), !dbg !5811
  %cmp123 = fcmp ogt float %68, 0x3EB0C6F7A0000000, !dbg !5812
  br i1 %cmp123, label %if.then124, label %if.end126, !dbg !5813

if.then124:                                       ; preds = %if.then112
  %69 = load float, float* %d, align 4, !dbg !5814
  %70 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e2.addr, align 8, !dbg !5815
  %offset_l125 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %70, i32 0, i32 8, !dbg !5816
  store float %69, float* %offset_l125, align 4, !dbg !5817
  br label %if.end126, !dbg !5815

if.end126:                                        ; preds = %if.then124, %if.then112
  br label %if.end155, !dbg !5818

if.else127:                                       ; preds = %if.end76
  %71 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e1.addr, align 8, !dbg !5819
  %offset_r128 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %71, i32 0, i32 9, !dbg !5822
  %72 = load float, float* %offset_r128, align 8, !dbg !5822
  %cmp129 = fcmp oeq float %72, 0.000000e+00, !dbg !5823
  br i1 %cmp129, label %land.lhs.true, label %if.end139, !dbg !5824

land.lhs.true:                                    ; preds = %if.else127
  %73 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e1.addr, align 8, !dbg !5825
  %74 = load float*, float** %meetco.addr, align 8, !dbg !5826
  %call130 = call zeroext i8 @is_outside_edge(%struct.EdgeHalf* %73, float* %74, %struct.BMVert** %closer_v), !dbg !5827
  %conv = zext i8 %call130 to i32, !dbg !5827
  %tobool131 = icmp ne i32 %conv, 0, !dbg !5827
  br i1 %tobool131, label %if.then132, label %if.end139, !dbg !5828

if.then132:                                       ; preds = %land.lhs.true
  %75 = load float*, float** %meetco.addr, align 8, !dbg !5829
  %76 = load %struct.BMVert*, %struct.BMVert** %closer_v, align 8, !dbg !5831
  %co133 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %76, i32 0, i32 2, !dbg !5832
  %arraydecay134 = getelementptr inbounds [3 x float], [3 x float]* %co133, i64 0, i64 0, !dbg !5831
  call void @copy_v3_v3(float* %75, float* %arraydecay134), !dbg !5833
  %77 = load float*, float** %meetco.addr, align 8, !dbg !5834
  %78 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !5835
  %co135 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %78, i32 0, i32 2, !dbg !5836
  %arraydecay136 = getelementptr inbounds [3 x float], [3 x float]* %co135, i64 0, i64 0, !dbg !5835
  %call137 = call float @len_v3v3(float* %77, float* %arraydecay136), !dbg !5837
  %79 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e2.addr, align 8, !dbg !5838
  %offset_l138 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %79, i32 0, i32 8, !dbg !5839
  store float %call137, float* %offset_l138, align 4, !dbg !5840
  br label %if.end139, !dbg !5841

if.end139:                                        ; preds = %if.then132, %land.lhs.true, %if.else127
  %80 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e2.addr, align 8, !dbg !5842
  %offset_l140 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %80, i32 0, i32 8, !dbg !5844
  %81 = load float, float* %offset_l140, align 4, !dbg !5844
  %cmp141 = fcmp oeq float %81, 0.000000e+00, !dbg !5845
  br i1 %cmp141, label %land.lhs.true143, label %if.end154, !dbg !5846

land.lhs.true143:                                 ; preds = %if.end139
  %82 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e2.addr, align 8, !dbg !5847
  %83 = load float*, float** %meetco.addr, align 8, !dbg !5848
  %call144 = call zeroext i8 @is_outside_edge(%struct.EdgeHalf* %82, float* %83, %struct.BMVert** %closer_v), !dbg !5849
  %conv145 = zext i8 %call144 to i32, !dbg !5849
  %tobool146 = icmp ne i32 %conv145, 0, !dbg !5849
  br i1 %tobool146, label %if.then147, label %if.end154, !dbg !5850

if.then147:                                       ; preds = %land.lhs.true143
  %84 = load float*, float** %meetco.addr, align 8, !dbg !5851
  %85 = load %struct.BMVert*, %struct.BMVert** %closer_v, align 8, !dbg !5853
  %co148 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %85, i32 0, i32 2, !dbg !5854
  %arraydecay149 = getelementptr inbounds [3 x float], [3 x float]* %co148, i64 0, i64 0, !dbg !5853
  call void @copy_v3_v3(float* %84, float* %arraydecay149), !dbg !5855
  %86 = load float*, float** %meetco.addr, align 8, !dbg !5856
  %87 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !5857
  %co150 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %87, i32 0, i32 2, !dbg !5858
  %arraydecay151 = getelementptr inbounds [3 x float], [3 x float]* %co150, i64 0, i64 0, !dbg !5857
  %call152 = call float @len_v3v3(float* %86, float* %arraydecay151), !dbg !5859
  %88 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e1.addr, align 8, !dbg !5860
  %offset_r153 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %88, i32 0, i32 9, !dbg !5861
  store float %call152, float* %offset_r153, align 8, !dbg !5862
  br label %if.end154, !dbg !5863

if.end154:                                        ; preds = %if.then147, %land.lhs.true143, %if.end139
  br label %if.end155

if.end155:                                        ; preds = %if.end154, %if.end126
  br label %if.end156

if.end156:                                        ; preds = %if.end155, %if.end59
  br label %if.end157

if.end157:                                        ; preds = %if.end156, %if.end41
  ret void, !dbg !5864
}

; Function Attrs: noinline nounwind uwtable
define internal void @offset_in_two_planes(%struct.BevelParams* %bp, %struct.EdgeHalf* %e1, %struct.EdgeHalf* %e2, %struct.EdgeHalf* %emid, %struct.BMVert* %v, float* %meetco) #0 !dbg !5865 {
entry:
  %bp.addr = alloca %struct.BevelParams*, align 8
  %e1.addr = alloca %struct.EdgeHalf*, align 8
  %e2.addr = alloca %struct.EdgeHalf*, align 8
  %emid.addr = alloca %struct.EdgeHalf*, align 8
  %v.addr = alloca %struct.BMVert*, align 8
  %meetco.addr = alloca float*, align 8
  %dir1 = alloca [3 x float], align 4
  %dir2 = alloca [3 x float], align 4
  %dirmid = alloca [3 x float], align 4
  %norm_perp1 = alloca [3 x float], align 4
  %norm_perp2 = alloca [3 x float], align 4
  %off1a = alloca [3 x float], align 4
  %off1b = alloca [3 x float], align 4
  %off2a = alloca [3 x float], align 4
  %off2b = alloca [3 x float], align 4
  %isect2 = alloca [3 x float], align 4
  %f1no = alloca [3 x float], align 4
  %f2no = alloca [3 x float], align 4
  %ang = alloca float, align 4
  %d = alloca float, align 4
  %iret = alloca i32, align 4
  store %struct.BevelParams* %bp, %struct.BevelParams** %bp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BevelParams** %bp.addr, metadata !5868, metadata !DIExpression()), !dbg !5869
  store %struct.EdgeHalf* %e1, %struct.EdgeHalf** %e1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.EdgeHalf** %e1.addr, metadata !5870, metadata !DIExpression()), !dbg !5871
  store %struct.EdgeHalf* %e2, %struct.EdgeHalf** %e2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.EdgeHalf** %e2.addr, metadata !5872, metadata !DIExpression()), !dbg !5873
  store %struct.EdgeHalf* %emid, %struct.EdgeHalf** %emid.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.EdgeHalf** %emid.addr, metadata !5874, metadata !DIExpression()), !dbg !5875
  store %struct.BMVert* %v, %struct.BMVert** %v.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMVert** %v.addr, metadata !5876, metadata !DIExpression()), !dbg !5877
  store float* %meetco, float** %meetco.addr, align 8
  call void @llvm.dbg.declare(metadata float** %meetco.addr, metadata !5878, metadata !DIExpression()), !dbg !5879
  call void @llvm.dbg.declare(metadata [3 x float]* %dir1, metadata !5880, metadata !DIExpression()), !dbg !5881
  call void @llvm.dbg.declare(metadata [3 x float]* %dir2, metadata !5882, metadata !DIExpression()), !dbg !5883
  call void @llvm.dbg.declare(metadata [3 x float]* %dirmid, metadata !5884, metadata !DIExpression()), !dbg !5885
  call void @llvm.dbg.declare(metadata [3 x float]* %norm_perp1, metadata !5886, metadata !DIExpression()), !dbg !5887
  call void @llvm.dbg.declare(metadata [3 x float]* %norm_perp2, metadata !5888, metadata !DIExpression()), !dbg !5889
  call void @llvm.dbg.declare(metadata [3 x float]* %off1a, metadata !5890, metadata !DIExpression()), !dbg !5891
  call void @llvm.dbg.declare(metadata [3 x float]* %off1b, metadata !5892, metadata !DIExpression()), !dbg !5893
  call void @llvm.dbg.declare(metadata [3 x float]* %off2a, metadata !5894, metadata !DIExpression()), !dbg !5895
  call void @llvm.dbg.declare(metadata [3 x float]* %off2b, metadata !5896, metadata !DIExpression()), !dbg !5897
  call void @llvm.dbg.declare(metadata [3 x float]* %isect2, metadata !5898, metadata !DIExpression()), !dbg !5899
  call void @llvm.dbg.declare(metadata [3 x float]* %f1no, metadata !5900, metadata !DIExpression()), !dbg !5901
  call void @llvm.dbg.declare(metadata [3 x float]* %f2no, metadata !5902, metadata !DIExpression()), !dbg !5903
  call void @llvm.dbg.declare(metadata float* %ang, metadata !5904, metadata !DIExpression()), !dbg !5905
  call void @llvm.dbg.declare(metadata float* %d, metadata !5906, metadata !DIExpression()), !dbg !5907
  call void @llvm.dbg.declare(metadata i32* %iret, metadata !5908, metadata !DIExpression()), !dbg !5909
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %dir1, i64 0, i64 0, !dbg !5910
  %0 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !5911
  %co = getelementptr inbounds %struct.BMVert, %struct.BMVert* %0, i32 0, i32 2, !dbg !5912
  %arraydecay1 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !5911
  %1 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e1.addr, align 8, !dbg !5913
  %e = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %1, i32 0, i32 2, !dbg !5914
  %2 = load %struct.BMEdge*, %struct.BMEdge** %e, align 8, !dbg !5914
  %3 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !5915
  %call = call %struct.BMVert* @BM_edge_other_vert(%struct.BMEdge* %2, %struct.BMVert* %3), !dbg !5916
  %co2 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %call, i32 0, i32 2, !dbg !5917
  %arraydecay3 = getelementptr inbounds [3 x float], [3 x float]* %co2, i64 0, i64 0, !dbg !5916
  call void @sub_v3_v3v3(float* %arraydecay, float* %arraydecay1, float* %arraydecay3), !dbg !5918
  %arraydecay4 = getelementptr inbounds [3 x float], [3 x float]* %dir2, i64 0, i64 0, !dbg !5919
  %4 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e2.addr, align 8, !dbg !5920
  %e5 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %4, i32 0, i32 2, !dbg !5921
  %5 = load %struct.BMEdge*, %struct.BMEdge** %e5, align 8, !dbg !5921
  %6 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !5922
  %call6 = call %struct.BMVert* @BM_edge_other_vert(%struct.BMEdge* %5, %struct.BMVert* %6), !dbg !5923
  %co7 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %call6, i32 0, i32 2, !dbg !5924
  %arraydecay8 = getelementptr inbounds [3 x float], [3 x float]* %co7, i64 0, i64 0, !dbg !5923
  %7 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !5925
  %co9 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %7, i32 0, i32 2, !dbg !5926
  %arraydecay10 = getelementptr inbounds [3 x float], [3 x float]* %co9, i64 0, i64 0, !dbg !5925
  call void @sub_v3_v3v3(float* %arraydecay4, float* %arraydecay8, float* %arraydecay10), !dbg !5927
  %arraydecay11 = getelementptr inbounds [3 x float], [3 x float]* %dirmid, i64 0, i64 0, !dbg !5928
  %8 = load %struct.EdgeHalf*, %struct.EdgeHalf** %emid.addr, align 8, !dbg !5929
  %e12 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %8, i32 0, i32 2, !dbg !5930
  %9 = load %struct.BMEdge*, %struct.BMEdge** %e12, align 8, !dbg !5930
  %10 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !5931
  %call13 = call %struct.BMVert* @BM_edge_other_vert(%struct.BMEdge* %9, %struct.BMVert* %10), !dbg !5932
  %co14 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %call13, i32 0, i32 2, !dbg !5933
  %arraydecay15 = getelementptr inbounds [3 x float], [3 x float]* %co14, i64 0, i64 0, !dbg !5932
  %11 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !5934
  %co16 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %11, i32 0, i32 2, !dbg !5935
  %arraydecay17 = getelementptr inbounds [3 x float], [3 x float]* %co16, i64 0, i64 0, !dbg !5934
  call void @sub_v3_v3v3(float* %arraydecay11, float* %arraydecay15, float* %arraydecay17), !dbg !5936
  %arraydecay18 = getelementptr inbounds [3 x float], [3 x float]* %f1no, i64 0, i64 0, !dbg !5937
  %arraydecay19 = getelementptr inbounds [3 x float], [3 x float]* %dirmid, i64 0, i64 0, !dbg !5938
  %arraydecay20 = getelementptr inbounds [3 x float], [3 x float]* %dir1, i64 0, i64 0, !dbg !5939
  call void @cross_v3_v3v3(float* %arraydecay18, float* %arraydecay19, float* %arraydecay20), !dbg !5940
  %arraydecay21 = getelementptr inbounds [3 x float], [3 x float]* %f2no, i64 0, i64 0, !dbg !5941
  %arraydecay22 = getelementptr inbounds [3 x float], [3 x float]* %dirmid, i64 0, i64 0, !dbg !5942
  %arraydecay23 = getelementptr inbounds [3 x float], [3 x float]* %dir2, i64 0, i64 0, !dbg !5943
  call void @cross_v3_v3v3(float* %arraydecay21, float* %arraydecay22, float* %arraydecay23), !dbg !5944
  %arraydecay24 = getelementptr inbounds [3 x float], [3 x float]* %f1no, i64 0, i64 0, !dbg !5945
  %12 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !5947
  %no = getelementptr inbounds %struct.BMVert, %struct.BMVert* %12, i32 0, i32 3, !dbg !5948
  %arraydecay25 = getelementptr inbounds [3 x float], [3 x float]* %no, i64 0, i64 0, !dbg !5947
  %call26 = call float @dot_v3v3(float* %arraydecay24, float* %arraydecay25), !dbg !5949
  %cmp = fcmp olt float %call26, 0.000000e+00, !dbg !5950
  br i1 %cmp, label %if.then, label %if.end, !dbg !5951

if.then:                                          ; preds = %entry
  %arraydecay27 = getelementptr inbounds [3 x float], [3 x float]* %f1no, i64 0, i64 0, !dbg !5952
  call void @negate_v3(float* %arraydecay27), !dbg !5953
  br label %if.end, !dbg !5953

if.end:                                           ; preds = %if.then, %entry
  %arraydecay28 = getelementptr inbounds [3 x float], [3 x float]* %f2no, i64 0, i64 0, !dbg !5954
  %13 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !5956
  %no29 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %13, i32 0, i32 3, !dbg !5957
  %arraydecay30 = getelementptr inbounds [3 x float], [3 x float]* %no29, i64 0, i64 0, !dbg !5956
  %call31 = call float @dot_v3v3(float* %arraydecay28, float* %arraydecay30), !dbg !5958
  %cmp32 = fcmp olt float %call31, 0.000000e+00, !dbg !5959
  br i1 %cmp32, label %if.then33, label %if.end35, !dbg !5960

if.then33:                                        ; preds = %if.end
  %arraydecay34 = getelementptr inbounds [3 x float], [3 x float]* %f2no, i64 0, i64 0, !dbg !5961
  call void @negate_v3(float* %arraydecay34), !dbg !5962
  br label %if.end35, !dbg !5962

if.end35:                                         ; preds = %if.then33, %if.end
  %arraydecay36 = getelementptr inbounds [3 x float], [3 x float]* %norm_perp1, i64 0, i64 0, !dbg !5963
  %arraydecay37 = getelementptr inbounds [3 x float], [3 x float]* %dir1, i64 0, i64 0, !dbg !5964
  %arraydecay38 = getelementptr inbounds [3 x float], [3 x float]* %f1no, i64 0, i64 0, !dbg !5965
  call void @cross_v3_v3v3(float* %arraydecay36, float* %arraydecay37, float* %arraydecay38), !dbg !5966
  %arraydecay39 = getelementptr inbounds [3 x float], [3 x float]* %norm_perp1, i64 0, i64 0, !dbg !5967
  %call40 = call float @normalize_v3(float* %arraydecay39), !dbg !5968
  %arraydecay41 = getelementptr inbounds [3 x float], [3 x float]* %norm_perp2, i64 0, i64 0, !dbg !5969
  %arraydecay42 = getelementptr inbounds [3 x float], [3 x float]* %dir2, i64 0, i64 0, !dbg !5970
  %arraydecay43 = getelementptr inbounds [3 x float], [3 x float]* %f2no, i64 0, i64 0, !dbg !5971
  call void @cross_v3_v3v3(float* %arraydecay41, float* %arraydecay42, float* %arraydecay43), !dbg !5972
  %arraydecay44 = getelementptr inbounds [3 x float], [3 x float]* %norm_perp2, i64 0, i64 0, !dbg !5973
  %call45 = call float @normalize_v3(float* %arraydecay44), !dbg !5974
  %arraydecay46 = getelementptr inbounds [3 x float], [3 x float]* %off1a, i64 0, i64 0, !dbg !5975
  %14 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !5976
  %co47 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %14, i32 0, i32 2, !dbg !5977
  %arraydecay48 = getelementptr inbounds [3 x float], [3 x float]* %co47, i64 0, i64 0, !dbg !5976
  call void @copy_v3_v3(float* %arraydecay46, float* %arraydecay48), !dbg !5978
  %arraydecay49 = getelementptr inbounds [3 x float], [3 x float]* %off1a, i64 0, i64 0, !dbg !5979
  %arraydecay50 = getelementptr inbounds [3 x float], [3 x float]* %norm_perp1, i64 0, i64 0, !dbg !5980
  %15 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e1.addr, align 8, !dbg !5981
  %offset_r = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %15, i32 0, i32 9, !dbg !5982
  %16 = load float, float* %offset_r, align 8, !dbg !5982
  call void @madd_v3_v3fl(float* %arraydecay49, float* %arraydecay50, float %16), !dbg !5983
  %arraydecay51 = getelementptr inbounds [3 x float], [3 x float]* %off1b, i64 0, i64 0, !dbg !5984
  %arraydecay52 = getelementptr inbounds [3 x float], [3 x float]* %off1a, i64 0, i64 0, !dbg !5985
  %arraydecay53 = getelementptr inbounds [3 x float], [3 x float]* %dir1, i64 0, i64 0, !dbg !5986
  call void @sub_v3_v3v3(float* %arraydecay51, float* %arraydecay52, float* %arraydecay53), !dbg !5987
  %arraydecay54 = getelementptr inbounds [3 x float], [3 x float]* %off2a, i64 0, i64 0, !dbg !5988
  %17 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !5989
  %co55 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %17, i32 0, i32 2, !dbg !5990
  %arraydecay56 = getelementptr inbounds [3 x float], [3 x float]* %co55, i64 0, i64 0, !dbg !5989
  call void @copy_v3_v3(float* %arraydecay54, float* %arraydecay56), !dbg !5991
  %arraydecay57 = getelementptr inbounds [3 x float], [3 x float]* %off2a, i64 0, i64 0, !dbg !5992
  %arraydecay58 = getelementptr inbounds [3 x float], [3 x float]* %norm_perp2, i64 0, i64 0, !dbg !5993
  %18 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e2.addr, align 8, !dbg !5994
  %offset_l = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %18, i32 0, i32 8, !dbg !5995
  %19 = load float, float* %offset_l, align 4, !dbg !5995
  call void @madd_v3_v3fl(float* %arraydecay57, float* %arraydecay58, float %19), !dbg !5996
  %arraydecay59 = getelementptr inbounds [3 x float], [3 x float]* %off2b, i64 0, i64 0, !dbg !5997
  %arraydecay60 = getelementptr inbounds [3 x float], [3 x float]* %off2a, i64 0, i64 0, !dbg !5998
  %arraydecay61 = getelementptr inbounds [3 x float], [3 x float]* %dir2, i64 0, i64 0, !dbg !5999
  call void @add_v3_v3v3(float* %arraydecay59, float* %arraydecay60, float* %arraydecay61), !dbg !6000
  %arraydecay62 = getelementptr inbounds [3 x float], [3 x float]* %dir1, i64 0, i64 0, !dbg !6001
  %arraydecay63 = getelementptr inbounds [3 x float], [3 x float]* %dir2, i64 0, i64 0, !dbg !6002
  %call64 = call float @angle_v3v3(float* %arraydecay62, float* %arraydecay63), !dbg !6003
  store float %call64, float* %ang, align 4, !dbg !6004
  %20 = load float, float* %ang, align 4, !dbg !6005
  %cmp65 = fcmp olt float %20, 0x3F1A36E2E0000000, !dbg !6007
  br i1 %cmp65, label %if.then66, label %if.else, !dbg !6008

if.then66:                                        ; preds = %if.end35
  %21 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !6009
  %22 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e1.addr, align 8, !dbg !6011
  %23 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e2.addr, align 8, !dbg !6012
  %24 = load %struct.EdgeHalf*, %struct.EdgeHalf** %emid.addr, align 8, !dbg !6013
  %25 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !6014
  %26 = load float*, float** %meetco.addr, align 8, !dbg !6015
  call void @offset_on_edge_between(%struct.BevelParams* %21, %struct.EdgeHalf* %22, %struct.EdgeHalf* %23, %struct.EdgeHalf* %24, %struct.BMVert* %25, float* %26), !dbg !6016
  br label %if.end117, !dbg !6017

if.else:                                          ; preds = %if.end35
  %27 = load float, float* %ang, align 4, !dbg !6018
  %sub = fsub float %27, 0x400921FB60000000, !dbg !6020
  %28 = call float @llvm.fabs.f32(float %sub), !dbg !6021
  %cmp67 = fcmp olt float %28, 0x3F1A36E2E0000000, !dbg !6022
  br i1 %cmp67, label %if.then68, label %if.else83, !dbg !6023

if.then68:                                        ; preds = %if.else
  %29 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e2.addr, align 8, !dbg !6024
  %30 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !6026
  %31 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e2.addr, align 8, !dbg !6027
  %offset_l69 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %31, i32 0, i32 8, !dbg !6028
  %32 = load float, float* %offset_l69, align 4, !dbg !6028
  %33 = load float*, float** %meetco.addr, align 8, !dbg !6029
  call void @slide_dist(%struct.EdgeHalf* %29, %struct.BMVert* %30, float %32, float* %33), !dbg !6030
  %34 = load float*, float** %meetco.addr, align 8, !dbg !6031
  %35 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !6032
  %co70 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %35, i32 0, i32 2, !dbg !6033
  %arraydecay71 = getelementptr inbounds [3 x float], [3 x float]* %co70, i64 0, i64 0, !dbg !6032
  %36 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e1.addr, align 8, !dbg !6034
  %e72 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %36, i32 0, i32 2, !dbg !6035
  %37 = load %struct.BMEdge*, %struct.BMEdge** %e72, align 8, !dbg !6035
  %38 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !6036
  %call73 = call %struct.BMVert* @BM_edge_other_vert(%struct.BMEdge* %37, %struct.BMVert* %38), !dbg !6037
  %co74 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %call73, i32 0, i32 2, !dbg !6038
  %arraydecay75 = getelementptr inbounds [3 x float], [3 x float]* %co74, i64 0, i64 0, !dbg !6037
  %call76 = call float @dist_to_line_v3(float* %34, float* %arraydecay71, float* %arraydecay75), !dbg !6039
  store float %call76, float* %d, align 4, !dbg !6040
  %39 = load float, float* %d, align 4, !dbg !6041
  %40 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e1.addr, align 8, !dbg !6043
  %offset_r77 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %40, i32 0, i32 9, !dbg !6044
  %41 = load float, float* %offset_r77, align 8, !dbg !6044
  %sub78 = fsub float %39, %41, !dbg !6045
  %42 = call float @llvm.fabs.f32(float %sub78), !dbg !6046
  %cmp79 = fcmp ogt float %42, 0x3EB0C6F7A0000000, !dbg !6047
  br i1 %cmp79, label %if.then80, label %if.end82, !dbg !6048

if.then80:                                        ; preds = %if.then68
  %43 = load float, float* %d, align 4, !dbg !6049
  %44 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e1.addr, align 8, !dbg !6050
  %offset_r81 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %44, i32 0, i32 9, !dbg !6051
  store float %43, float* %offset_r81, align 8, !dbg !6052
  br label %if.end82, !dbg !6050

if.end82:                                         ; preds = %if.then80, %if.then68
  br label %if.end116, !dbg !6053

if.else83:                                        ; preds = %if.else
  %arraydecay84 = getelementptr inbounds [3 x float], [3 x float]* %off1a, i64 0, i64 0, !dbg !6054
  %arraydecay85 = getelementptr inbounds [3 x float], [3 x float]* %off1b, i64 0, i64 0, !dbg !6056
  %arraydecay86 = getelementptr inbounds [3 x float], [3 x float]* %off2a, i64 0, i64 0, !dbg !6057
  %arraydecay87 = getelementptr inbounds [3 x float], [3 x float]* %off2b, i64 0, i64 0, !dbg !6058
  %45 = load float*, float** %meetco.addr, align 8, !dbg !6059
  %arraydecay88 = getelementptr inbounds [3 x float], [3 x float]* %isect2, i64 0, i64 0, !dbg !6060
  %call89 = call i32 @isect_line_line_v3(float* %arraydecay84, float* %arraydecay85, float* %arraydecay86, float* %arraydecay87, float* %45, float* %arraydecay88), !dbg !6061
  store i32 %call89, i32* %iret, align 4, !dbg !6062
  %46 = load i32, i32* %iret, align 4, !dbg !6063
  %cmp90 = icmp eq i32 %46, 0, !dbg !6065
  br i1 %cmp90, label %if.then91, label %if.else106, !dbg !6066

if.then91:                                        ; preds = %if.else83
  %47 = load float*, float** %meetco.addr, align 8, !dbg !6067
  %arraydecay92 = getelementptr inbounds [3 x float], [3 x float]* %off1a, i64 0, i64 0, !dbg !6069
  call void @copy_v3_v3(float* %47, float* %arraydecay92), !dbg !6070
  %48 = load float*, float** %meetco.addr, align 8, !dbg !6071
  %49 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !6072
  %co93 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %49, i32 0, i32 2, !dbg !6073
  %arraydecay94 = getelementptr inbounds [3 x float], [3 x float]* %co93, i64 0, i64 0, !dbg !6072
  %50 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e2.addr, align 8, !dbg !6074
  %e95 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %50, i32 0, i32 2, !dbg !6075
  %51 = load %struct.BMEdge*, %struct.BMEdge** %e95, align 8, !dbg !6075
  %52 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !6076
  %call96 = call %struct.BMVert* @BM_edge_other_vert(%struct.BMEdge* %51, %struct.BMVert* %52), !dbg !6077
  %co97 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %call96, i32 0, i32 2, !dbg !6078
  %arraydecay98 = getelementptr inbounds [3 x float], [3 x float]* %co97, i64 0, i64 0, !dbg !6077
  %call99 = call float @dist_to_line_v3(float* %48, float* %arraydecay94, float* %arraydecay98), !dbg !6079
  store float %call99, float* %d, align 4, !dbg !6080
  %53 = load float, float* %d, align 4, !dbg !6081
  %54 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e2.addr, align 8, !dbg !6083
  %offset_l100 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %54, i32 0, i32 8, !dbg !6084
  %55 = load float, float* %offset_l100, align 4, !dbg !6084
  %sub101 = fsub float %53, %55, !dbg !6085
  %56 = call float @llvm.fabs.f32(float %sub101), !dbg !6086
  %cmp102 = fcmp ogt float %56, 0x3EB0C6F7A0000000, !dbg !6087
  br i1 %cmp102, label %if.then103, label %if.end105, !dbg !6088

if.then103:                                       ; preds = %if.then91
  %57 = load float, float* %d, align 4, !dbg !6089
  %58 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e2.addr, align 8, !dbg !6090
  %offset_l104 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %58, i32 0, i32 8, !dbg !6091
  store float %57, float* %offset_l104, align 4, !dbg !6092
  br label %if.end105, !dbg !6090

if.end105:                                        ; preds = %if.then103, %if.then91
  br label %if.end115, !dbg !6093

if.else106:                                       ; preds = %if.else83
  %59 = load i32, i32* %iret, align 4, !dbg !6094
  %cmp107 = icmp eq i32 %59, 2, !dbg !6096
  br i1 %cmp107, label %if.then108, label %if.end114, !dbg !6097

if.then108:                                       ; preds = %if.else106
  %60 = load float*, float** %meetco.addr, align 8, !dbg !6098
  %arraydecay109 = getelementptr inbounds [3 x float], [3 x float]* %isect2, i64 0, i64 0, !dbg !6101
  %call110 = call float @len_squared_v3v3(float* %60, float* %arraydecay109), !dbg !6102
  %cmp111 = fcmp ogt float %call110, 0x3DDB7CDFE0000000, !dbg !6103
  br i1 %cmp111, label %if.then112, label %if.end113, !dbg !6104

if.then112:                                       ; preds = %if.then108
  %61 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !6105
  %62 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e1.addr, align 8, !dbg !6107
  %63 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e2.addr, align 8, !dbg !6108
  %64 = load %struct.EdgeHalf*, %struct.EdgeHalf** %emid.addr, align 8, !dbg !6109
  %65 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !6110
  %66 = load float*, float** %meetco.addr, align 8, !dbg !6111
  call void @offset_on_edge_between(%struct.BevelParams* %61, %struct.EdgeHalf* %62, %struct.EdgeHalf* %63, %struct.EdgeHalf* %64, %struct.BMVert* %65, float* %66), !dbg !6112
  br label %if.end113, !dbg !6113

if.end113:                                        ; preds = %if.then112, %if.then108
  br label %if.end114, !dbg !6114

if.end114:                                        ; preds = %if.end113, %if.else106
  br label %if.end115

if.end115:                                        ; preds = %if.end114, %if.end105
  br label %if.end116

if.end116:                                        ; preds = %if.end115, %if.end82
  br label %if.end117

if.end117:                                        ; preds = %if.end116, %if.then66
  ret void, !dbg !6115
}

; Function Attrs: noinline nounwind uwtable
define internal void @offset_on_edge_between(%struct.BevelParams* %bp, %struct.EdgeHalf* %e1, %struct.EdgeHalf* %e2, %struct.EdgeHalf* %emid, %struct.BMVert* %v, float* %meetco) #0 !dbg !6116 {
entry:
  %bp.addr = alloca %struct.BevelParams*, align 8
  %e1.addr = alloca %struct.EdgeHalf*, align 8
  %e2.addr = alloca %struct.EdgeHalf*, align 8
  %emid.addr = alloca %struct.EdgeHalf*, align 8
  %v.addr = alloca %struct.BMVert*, align 8
  %meetco.addr = alloca float*, align 8
  %d = alloca float, align 4
  %ang1 = alloca float, align 4
  %ang2 = alloca float, align 4
  %sina1 = alloca float, align 4
  %sina2 = alloca float, align 4
  %lambda = alloca float, align 4
  %meet1 = alloca [3 x float], align 4
  %meet2 = alloca [3 x float], align 4
  %visited1 = alloca i8, align 1
  %visited2 = alloca i8, align 1
  %ok1 = alloca i8, align 1
  %ok2 = alloca i8, align 1
  store %struct.BevelParams* %bp, %struct.BevelParams** %bp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BevelParams** %bp.addr, metadata !6117, metadata !DIExpression()), !dbg !6118
  store %struct.EdgeHalf* %e1, %struct.EdgeHalf** %e1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.EdgeHalf** %e1.addr, metadata !6119, metadata !DIExpression()), !dbg !6120
  store %struct.EdgeHalf* %e2, %struct.EdgeHalf** %e2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.EdgeHalf** %e2.addr, metadata !6121, metadata !DIExpression()), !dbg !6122
  store %struct.EdgeHalf* %emid, %struct.EdgeHalf** %emid.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.EdgeHalf** %emid.addr, metadata !6123, metadata !DIExpression()), !dbg !6124
  store %struct.BMVert* %v, %struct.BMVert** %v.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMVert** %v.addr, metadata !6125, metadata !DIExpression()), !dbg !6126
  store float* %meetco, float** %meetco.addr, align 8
  call void @llvm.dbg.declare(metadata float** %meetco.addr, metadata !6127, metadata !DIExpression()), !dbg !6128
  call void @llvm.dbg.declare(metadata float* %d, metadata !6129, metadata !DIExpression()), !dbg !6130
  call void @llvm.dbg.declare(metadata float* %ang1, metadata !6131, metadata !DIExpression()), !dbg !6132
  call void @llvm.dbg.declare(metadata float* %ang2, metadata !6133, metadata !DIExpression()), !dbg !6134
  call void @llvm.dbg.declare(metadata float* %sina1, metadata !6135, metadata !DIExpression()), !dbg !6136
  call void @llvm.dbg.declare(metadata float* %sina2, metadata !6137, metadata !DIExpression()), !dbg !6138
  call void @llvm.dbg.declare(metadata float* %lambda, metadata !6139, metadata !DIExpression()), !dbg !6140
  call void @llvm.dbg.declare(metadata [3 x float]* %meet1, metadata !6141, metadata !DIExpression()), !dbg !6142
  call void @llvm.dbg.declare(metadata [3 x float]* %meet2, metadata !6143, metadata !DIExpression()), !dbg !6144
  call void @llvm.dbg.declare(metadata i8* %visited1, metadata !6145, metadata !DIExpression()), !dbg !6146
  call void @llvm.dbg.declare(metadata i8* %visited2, metadata !6147, metadata !DIExpression()), !dbg !6148
  call void @llvm.dbg.declare(metadata i8* %ok1, metadata !6149, metadata !DIExpression()), !dbg !6150
  call void @llvm.dbg.declare(metadata i8* %ok2, metadata !6151, metadata !DIExpression()), !dbg !6152
  %0 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !6153
  %1 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e1.addr, align 8, !dbg !6154
  %call = call zeroext i8 @other_edge_half_visited(%struct.BevelParams* %0, %struct.EdgeHalf* %1), !dbg !6155
  store i8 %call, i8* %visited1, align 1, !dbg !6156
  %2 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !6157
  %3 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e2.addr, align 8, !dbg !6158
  %call1 = call zeroext i8 @other_edge_half_visited(%struct.BevelParams* %2, %struct.EdgeHalf* %3), !dbg !6159
  store i8 %call1, i8* %visited2, align 1, !dbg !6160
  %4 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e1.addr, align 8, !dbg !6161
  %5 = load %struct.EdgeHalf*, %struct.EdgeHalf** %emid.addr, align 8, !dbg !6162
  %6 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !6163
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %meet1, i64 0, i64 0, !dbg !6164
  %call2 = call zeroext i8 @offset_meet_edge(%struct.EdgeHalf* %4, %struct.EdgeHalf* %5, %struct.BMVert* %6, float* %arraydecay, float* %ang1), !dbg !6165
  store i8 %call2, i8* %ok1, align 1, !dbg !6166
  %7 = load %struct.EdgeHalf*, %struct.EdgeHalf** %emid.addr, align 8, !dbg !6167
  %8 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e2.addr, align 8, !dbg !6168
  %9 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !6169
  %arraydecay3 = getelementptr inbounds [3 x float], [3 x float]* %meet2, i64 0, i64 0, !dbg !6170
  %call4 = call zeroext i8 @offset_meet_edge(%struct.EdgeHalf* %7, %struct.EdgeHalf* %8, %struct.BMVert* %9, float* %arraydecay3, float* %ang2), !dbg !6171
  store i8 %call4, i8* %ok2, align 1, !dbg !6172
  %10 = load i8, i8* %ok1, align 1, !dbg !6173
  %conv = zext i8 %10 to i32, !dbg !6173
  %tobool = icmp ne i32 %conv, 0, !dbg !6173
  br i1 %tobool, label %land.lhs.true, label %if.else27, !dbg !6175

land.lhs.true:                                    ; preds = %entry
  %11 = load i8, i8* %ok2, align 1, !dbg !6176
  %conv5 = zext i8 %11 to i32, !dbg !6176
  %tobool6 = icmp ne i32 %conv5, 0, !dbg !6176
  br i1 %tobool6, label %if.then, label %if.else27, !dbg !6177

if.then:                                          ; preds = %land.lhs.true
  %12 = load i8, i8* %visited1, align 1, !dbg !6178
  %conv7 = zext i8 %12 to i32, !dbg !6178
  %tobool8 = icmp ne i32 %conv7, 0, !dbg !6178
  br i1 %tobool8, label %land.lhs.true9, label %if.else, !dbg !6181

land.lhs.true9:                                   ; preds = %if.then
  %13 = load i8, i8* %visited2, align 1, !dbg !6182
  %tobool10 = icmp ne i8 %13, 0, !dbg !6182
  br i1 %tobool10, label %if.else, label %if.then11, !dbg !6183

if.then11:                                        ; preds = %land.lhs.true9
  %14 = load float*, float** %meetco.addr, align 8, !dbg !6184
  %arraydecay12 = getelementptr inbounds [3 x float], [3 x float]* %meet1, i64 0, i64 0, !dbg !6186
  call void @copy_v3_v3(float* %14, float* %arraydecay12), !dbg !6187
  br label %if.end26, !dbg !6188

if.else:                                          ; preds = %land.lhs.true9, %if.then
  %15 = load i8, i8* %visited1, align 1, !dbg !6189
  %tobool13 = icmp ne i8 %15, 0, !dbg !6189
  br i1 %tobool13, label %if.else19, label %land.lhs.true14, !dbg !6191

land.lhs.true14:                                  ; preds = %if.else
  %16 = load i8, i8* %visited2, align 1, !dbg !6192
  %conv15 = zext i8 %16 to i32, !dbg !6192
  %tobool16 = icmp ne i32 %conv15, 0, !dbg !6192
  br i1 %tobool16, label %if.then17, label %if.else19, !dbg !6193

if.then17:                                        ; preds = %land.lhs.true14
  %17 = load float*, float** %meetco.addr, align 8, !dbg !6194
  %arraydecay18 = getelementptr inbounds [3 x float], [3 x float]* %meet2, i64 0, i64 0, !dbg !6196
  call void @copy_v3_v3(float* %17, float* %arraydecay18), !dbg !6197
  br label %if.end, !dbg !6198

if.else19:                                        ; preds = %land.lhs.true14, %if.else
  %18 = load float, float* %ang1, align 4, !dbg !6199
  %call20 = call float @sinf(float %18) #5, !dbg !6201
  store float %call20, float* %sina1, align 4, !dbg !6202
  %19 = load float, float* %ang2, align 4, !dbg !6203
  %call21 = call float @sinf(float %19) #5, !dbg !6204
  store float %call21, float* %sina2, align 4, !dbg !6205
  %20 = load float, float* %sina2, align 4, !dbg !6206
  %21 = load float, float* %sina2, align 4, !dbg !6207
  %mul = fmul float %20, %21, !dbg !6208
  %22 = load float, float* %sina1, align 4, !dbg !6209
  %23 = load float, float* %sina1, align 4, !dbg !6210
  %mul22 = fmul float %22, %23, !dbg !6211
  %24 = load float, float* %sina2, align 4, !dbg !6212
  %25 = load float, float* %sina2, align 4, !dbg !6213
  %mul23 = fmul float %24, %25, !dbg !6214
  %add = fadd float %mul22, %mul23, !dbg !6215
  %div = fdiv float %mul, %add, !dbg !6216
  store float %div, float* %lambda, align 4, !dbg !6217
  %26 = load float*, float** %meetco.addr, align 8, !dbg !6218
  %arraydecay24 = getelementptr inbounds [3 x float], [3 x float]* %meet1, i64 0, i64 0, !dbg !6219
  %arraydecay25 = getelementptr inbounds [3 x float], [3 x float]* %meet2, i64 0, i64 0, !dbg !6220
  %27 = load float, float* %lambda, align 4, !dbg !6221
  call void @interp_v3_v3v3(float* %26, float* %arraydecay24, float* %arraydecay25, float %27), !dbg !6222
  br label %if.end

if.end:                                           ; preds = %if.else19, %if.then17
  br label %if.end26

if.end26:                                         ; preds = %if.end, %if.then11
  br label %if.end44, !dbg !6223

if.else27:                                        ; preds = %land.lhs.true, %entry
  %28 = load i8, i8* %ok1, align 1, !dbg !6224
  %conv28 = zext i8 %28 to i32, !dbg !6224
  %tobool29 = icmp ne i32 %conv28, 0, !dbg !6224
  br i1 %tobool29, label %land.lhs.true30, label %if.else34, !dbg !6226

land.lhs.true30:                                  ; preds = %if.else27
  %29 = load i8, i8* %ok2, align 1, !dbg !6227
  %tobool31 = icmp ne i8 %29, 0, !dbg !6227
  br i1 %tobool31, label %if.else34, label %if.then32, !dbg !6228

if.then32:                                        ; preds = %land.lhs.true30
  %30 = load float*, float** %meetco.addr, align 8, !dbg !6229
  %arraydecay33 = getelementptr inbounds [3 x float], [3 x float]* %meet1, i64 0, i64 0, !dbg !6231
  call void @copy_v3_v3(float* %30, float* %arraydecay33), !dbg !6232
  br label %if.end43, !dbg !6233

if.else34:                                        ; preds = %land.lhs.true30, %if.else27
  %31 = load i8, i8* %ok1, align 1, !dbg !6234
  %tobool35 = icmp ne i8 %31, 0, !dbg !6234
  br i1 %tobool35, label %if.else41, label %land.lhs.true36, !dbg !6236

land.lhs.true36:                                  ; preds = %if.else34
  %32 = load i8, i8* %ok2, align 1, !dbg !6237
  %conv37 = zext i8 %32 to i32, !dbg !6237
  %tobool38 = icmp ne i32 %conv37, 0, !dbg !6237
  br i1 %tobool38, label %if.then39, label %if.else41, !dbg !6238

if.then39:                                        ; preds = %land.lhs.true36
  %33 = load float*, float** %meetco.addr, align 8, !dbg !6239
  %arraydecay40 = getelementptr inbounds [3 x float], [3 x float]* %meet2, i64 0, i64 0, !dbg !6241
  call void @copy_v3_v3(float* %33, float* %arraydecay40), !dbg !6242
  br label %if.end42, !dbg !6243

if.else41:                                        ; preds = %land.lhs.true36, %if.else34
  %34 = load %struct.EdgeHalf*, %struct.EdgeHalf** %emid.addr, align 8, !dbg !6244
  %35 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !6246
  %36 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e1.addr, align 8, !dbg !6247
  %offset_r = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %36, i32 0, i32 9, !dbg !6248
  %37 = load float, float* %offset_r, align 8, !dbg !6248
  %38 = load float*, float** %meetco.addr, align 8, !dbg !6249
  call void @slide_dist(%struct.EdgeHalf* %34, %struct.BMVert* %35, float %37, float* %38), !dbg !6250
  br label %if.end42

if.end42:                                         ; preds = %if.else41, %if.then39
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %if.then32
  br label %if.end44

if.end44:                                         ; preds = %if.end43, %if.end26
  %39 = load float*, float** %meetco.addr, align 8, !dbg !6251
  %40 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !6252
  %co = getelementptr inbounds %struct.BMVert, %struct.BMVert* %40, i32 0, i32 2, !dbg !6253
  %arraydecay45 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !6252
  %41 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e1.addr, align 8, !dbg !6254
  %e = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %41, i32 0, i32 2, !dbg !6255
  %42 = load %struct.BMEdge*, %struct.BMEdge** %e, align 8, !dbg !6255
  %43 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !6256
  %call46 = call %struct.BMVert* @BM_edge_other_vert(%struct.BMEdge* %42, %struct.BMVert* %43), !dbg !6257
  %co47 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %call46, i32 0, i32 2, !dbg !6258
  %arraydecay48 = getelementptr inbounds [3 x float], [3 x float]* %co47, i64 0, i64 0, !dbg !6257
  %call49 = call float @dist_to_line_v3(float* %39, float* %arraydecay45, float* %arraydecay48), !dbg !6259
  store float %call49, float* %d, align 4, !dbg !6260
  %44 = load float, float* %d, align 4, !dbg !6261
  %45 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e1.addr, align 8, !dbg !6263
  %offset_r50 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %45, i32 0, i32 9, !dbg !6264
  %46 = load float, float* %offset_r50, align 8, !dbg !6264
  %sub = fsub float %44, %46, !dbg !6265
  %47 = call float @llvm.fabs.f32(float %sub), !dbg !6266
  %cmp = fcmp ogt float %47, 0x3EB0C6F7A0000000, !dbg !6267
  br i1 %cmp, label %if.then52, label %if.end54, !dbg !6268

if.then52:                                        ; preds = %if.end44
  %48 = load float, float* %d, align 4, !dbg !6269
  %49 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e1.addr, align 8, !dbg !6270
  %offset_r53 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %49, i32 0, i32 9, !dbg !6271
  store float %48, float* %offset_r53, align 8, !dbg !6272
  br label %if.end54, !dbg !6270

if.end54:                                         ; preds = %if.then52, %if.end44
  %50 = load float*, float** %meetco.addr, align 8, !dbg !6273
  %51 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !6274
  %co55 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %51, i32 0, i32 2, !dbg !6275
  %arraydecay56 = getelementptr inbounds [3 x float], [3 x float]* %co55, i64 0, i64 0, !dbg !6274
  %52 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e2.addr, align 8, !dbg !6276
  %e57 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %52, i32 0, i32 2, !dbg !6277
  %53 = load %struct.BMEdge*, %struct.BMEdge** %e57, align 8, !dbg !6277
  %54 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !6278
  %call58 = call %struct.BMVert* @BM_edge_other_vert(%struct.BMEdge* %53, %struct.BMVert* %54), !dbg !6279
  %co59 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %call58, i32 0, i32 2, !dbg !6280
  %arraydecay60 = getelementptr inbounds [3 x float], [3 x float]* %co59, i64 0, i64 0, !dbg !6279
  %call61 = call float @dist_to_line_v3(float* %50, float* %arraydecay56, float* %arraydecay60), !dbg !6281
  store float %call61, float* %d, align 4, !dbg !6282
  %55 = load float, float* %d, align 4, !dbg !6283
  %56 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e2.addr, align 8, !dbg !6285
  %offset_l = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %56, i32 0, i32 8, !dbg !6286
  %57 = load float, float* %offset_l, align 4, !dbg !6286
  %sub62 = fsub float %55, %57, !dbg !6287
  %58 = call float @llvm.fabs.f32(float %sub62), !dbg !6288
  %cmp63 = fcmp ogt float %58, 0x3EB0C6F7A0000000, !dbg !6289
  br i1 %cmp63, label %if.then65, label %if.end67, !dbg !6290

if.then65:                                        ; preds = %if.end54
  %59 = load float, float* %d, align 4, !dbg !6291
  %60 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e2.addr, align 8, !dbg !6292
  %offset_l66 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %60, i32 0, i32 8, !dbg !6293
  store float %59, float* %offset_l66, align 4, !dbg !6294
  br label %if.end67, !dbg !6292

if.end67:                                         ; preds = %if.then65, %if.end54
  ret void, !dbg !6295
}

; Function Attrs: noinline nounwind uwtable
define internal float @len_v3v3(float* %a, float* %b) #0 !dbg !6296 {
entry:
  %a.addr = alloca float*, align 8
  %b.addr = alloca float*, align 8
  %d = alloca [3 x float], align 4
  store float* %a, float** %a.addr, align 8
  call void @llvm.dbg.declare(metadata float** %a.addr, metadata !6297, metadata !DIExpression()), !dbg !6298
  store float* %b, float** %b.addr, align 8
  call void @llvm.dbg.declare(metadata float** %b.addr, metadata !6299, metadata !DIExpression()), !dbg !6300
  call void @llvm.dbg.declare(metadata [3 x float]* %d, metadata !6301, metadata !DIExpression()), !dbg !6302
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %d, i64 0, i64 0, !dbg !6303
  %0 = load float*, float** %b.addr, align 8, !dbg !6304
  %1 = load float*, float** %a.addr, align 8, !dbg !6305
  call void @sub_v3_v3v3(float* %arraydecay, float* %0, float* %1), !dbg !6306
  %arraydecay1 = getelementptr inbounds [3 x float], [3 x float]* %d, i64 0, i64 0, !dbg !6307
  %call = call float @len_v3(float* %arraydecay1), !dbg !6308
  ret float %call, !dbg !6309
}

; Function Attrs: noinline nounwind uwtable
define internal void @move_profile_plane(%struct.BoundVert* %bndv, %struct.EdgeHalf* %e1, %struct.EdgeHalf* %e2) #0 !dbg !6310 {
entry:
  %bndv.addr = alloca %struct.BoundVert*, align 8
  %e1.addr = alloca %struct.EdgeHalf*, align 8
  %e2.addr = alloca %struct.EdgeHalf*, align 8
  %d1 = alloca [3 x float], align 4
  %d2 = alloca [3 x float], align 4
  %no = alloca [3 x float], align 4
  %no2 = alloca [3 x float], align 4
  %dot = alloca float, align 4
  store %struct.BoundVert* %bndv, %struct.BoundVert** %bndv.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BoundVert** %bndv.addr, metadata !6313, metadata !DIExpression()), !dbg !6314
  store %struct.EdgeHalf* %e1, %struct.EdgeHalf** %e1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.EdgeHalf** %e1.addr, metadata !6315, metadata !DIExpression()), !dbg !6316
  store %struct.EdgeHalf* %e2, %struct.EdgeHalf** %e2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.EdgeHalf** %e2.addr, metadata !6317, metadata !DIExpression()), !dbg !6318
  call void @llvm.dbg.declare(metadata [3 x float]* %d1, metadata !6319, metadata !DIExpression()), !dbg !6320
  call void @llvm.dbg.declare(metadata [3 x float]* %d2, metadata !6321, metadata !DIExpression()), !dbg !6322
  call void @llvm.dbg.declare(metadata [3 x float]* %no, metadata !6323, metadata !DIExpression()), !dbg !6324
  call void @llvm.dbg.declare(metadata [3 x float]* %no2, metadata !6325, metadata !DIExpression()), !dbg !6326
  call void @llvm.dbg.declare(metadata float* %dot, metadata !6327, metadata !DIExpression()), !dbg !6328
  %0 = load %struct.BoundVert*, %struct.BoundVert** %bndv.addr, align 8, !dbg !6329
  %profile = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %0, i32 0, i32 7, !dbg !6331
  %proj_dir = getelementptr inbounds %struct.Profile, %struct.Profile* %profile, i32 0, i32 6, !dbg !6332
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %proj_dir, i64 0, i64 0, !dbg !6329
  %call = call zeroext i8 @is_zero_v3(float* %arraydecay), !dbg !6333
  %tobool = icmp ne i8 %call, 0, !dbg !6333
  br i1 %tobool, label %if.then, label %if.end, !dbg !6334

if.then:                                          ; preds = %entry
  br label %if.end38, !dbg !6335

if.end:                                           ; preds = %entry
  %arraydecay1 = getelementptr inbounds [3 x float], [3 x float]* %d1, i64 0, i64 0, !dbg !6336
  %1 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e1.addr, align 8, !dbg !6337
  %e = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %1, i32 0, i32 2, !dbg !6338
  %2 = load %struct.BMEdge*, %struct.BMEdge** %e, align 8, !dbg !6338
  %v1 = getelementptr inbounds %struct.BMEdge, %struct.BMEdge* %2, i32 0, i32 2, !dbg !6339
  %3 = load %struct.BMVert*, %struct.BMVert** %v1, align 8, !dbg !6339
  %co = getelementptr inbounds %struct.BMVert, %struct.BMVert* %3, i32 0, i32 2, !dbg !6340
  %arraydecay2 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !6337
  %4 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e1.addr, align 8, !dbg !6341
  %e3 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %4, i32 0, i32 2, !dbg !6342
  %5 = load %struct.BMEdge*, %struct.BMEdge** %e3, align 8, !dbg !6342
  %v2 = getelementptr inbounds %struct.BMEdge, %struct.BMEdge* %5, i32 0, i32 3, !dbg !6343
  %6 = load %struct.BMVert*, %struct.BMVert** %v2, align 8, !dbg !6343
  %co4 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %6, i32 0, i32 2, !dbg !6344
  %arraydecay5 = getelementptr inbounds [3 x float], [3 x float]* %co4, i64 0, i64 0, !dbg !6341
  call void @sub_v3_v3v3(float* %arraydecay1, float* %arraydecay2, float* %arraydecay5), !dbg !6345
  %arraydecay6 = getelementptr inbounds [3 x float], [3 x float]* %d2, i64 0, i64 0, !dbg !6346
  %7 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e2.addr, align 8, !dbg !6347
  %e7 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %7, i32 0, i32 2, !dbg !6348
  %8 = load %struct.BMEdge*, %struct.BMEdge** %e7, align 8, !dbg !6348
  %v18 = getelementptr inbounds %struct.BMEdge, %struct.BMEdge* %8, i32 0, i32 2, !dbg !6349
  %9 = load %struct.BMVert*, %struct.BMVert** %v18, align 8, !dbg !6349
  %co9 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %9, i32 0, i32 2, !dbg !6350
  %arraydecay10 = getelementptr inbounds [3 x float], [3 x float]* %co9, i64 0, i64 0, !dbg !6347
  %10 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e2.addr, align 8, !dbg !6351
  %e11 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %10, i32 0, i32 2, !dbg !6352
  %11 = load %struct.BMEdge*, %struct.BMEdge** %e11, align 8, !dbg !6352
  %v212 = getelementptr inbounds %struct.BMEdge, %struct.BMEdge* %11, i32 0, i32 3, !dbg !6353
  %12 = load %struct.BMVert*, %struct.BMVert** %v212, align 8, !dbg !6353
  %co13 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %12, i32 0, i32 2, !dbg !6354
  %arraydecay14 = getelementptr inbounds [3 x float], [3 x float]* %co13, i64 0, i64 0, !dbg !6351
  call void @sub_v3_v3v3(float* %arraydecay6, float* %arraydecay10, float* %arraydecay14), !dbg !6355
  %arraydecay15 = getelementptr inbounds [3 x float], [3 x float]* %no, i64 0, i64 0, !dbg !6356
  %arraydecay16 = getelementptr inbounds [3 x float], [3 x float]* %d1, i64 0, i64 0, !dbg !6357
  %arraydecay17 = getelementptr inbounds [3 x float], [3 x float]* %d2, i64 0, i64 0, !dbg !6358
  call void @cross_v3_v3v3(float* %arraydecay15, float* %arraydecay16, float* %arraydecay17), !dbg !6359
  %arraydecay18 = getelementptr inbounds [3 x float], [3 x float]* %no2, i64 0, i64 0, !dbg !6360
  %arraydecay19 = getelementptr inbounds [3 x float], [3 x float]* %d1, i64 0, i64 0, !dbg !6361
  %13 = load %struct.BoundVert*, %struct.BoundVert** %bndv.addr, align 8, !dbg !6362
  %profile20 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %13, i32 0, i32 7, !dbg !6363
  %proj_dir21 = getelementptr inbounds %struct.Profile, %struct.Profile* %profile20, i32 0, i32 6, !dbg !6364
  %arraydecay22 = getelementptr inbounds [3 x float], [3 x float]* %proj_dir21, i64 0, i64 0, !dbg !6362
  call void @cross_v3_v3v3(float* %arraydecay18, float* %arraydecay19, float* %arraydecay22), !dbg !6365
  %arraydecay23 = getelementptr inbounds [3 x float], [3 x float]* %no, i64 0, i64 0, !dbg !6366
  %call24 = call float @normalize_v3(float* %arraydecay23), !dbg !6368
  %cmp = fcmp ogt float %call24, 0x3F1A36E2E0000000, !dbg !6369
  br i1 %cmp, label %land.lhs.true, label %if.end38, !dbg !6370

land.lhs.true:                                    ; preds = %if.end
  %arraydecay25 = getelementptr inbounds [3 x float], [3 x float]* %no2, i64 0, i64 0, !dbg !6371
  %call26 = call float @normalize_v3(float* %arraydecay25), !dbg !6372
  %cmp27 = fcmp ogt float %call26, 0x3F1A36E2E0000000, !dbg !6373
  br i1 %cmp27, label %if.then28, label %if.end38, !dbg !6374

if.then28:                                        ; preds = %land.lhs.true
  %arraydecay29 = getelementptr inbounds [3 x float], [3 x float]* %no, i64 0, i64 0, !dbg !6375
  %arraydecay30 = getelementptr inbounds [3 x float], [3 x float]* %no2, i64 0, i64 0, !dbg !6377
  %call31 = call float @dot_v3v3(float* %arraydecay29, float* %arraydecay30), !dbg !6378
  %14 = call float @llvm.fabs.f32(float %call31), !dbg !6379
  store float %14, float* %dot, align 4, !dbg !6380
  %15 = load float, float* %dot, align 4, !dbg !6381
  %sub = fsub float %15, 1.000000e+00, !dbg !6383
  %16 = call float @llvm.fabs.f32(float %sub), !dbg !6384
  %cmp32 = fcmp ogt float %16, 0x3F1A36E2E0000000, !dbg !6385
  br i1 %cmp32, label %if.then33, label %if.end37, !dbg !6386

if.then33:                                        ; preds = %if.then28
  %17 = load %struct.BoundVert*, %struct.BoundVert** %bndv.addr, align 8, !dbg !6387
  %profile34 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %17, i32 0, i32 7, !dbg !6388
  %plane_no = getelementptr inbounds %struct.Profile, %struct.Profile* %profile34, i32 0, i32 4, !dbg !6389
  %arraydecay35 = getelementptr inbounds [3 x float], [3 x float]* %plane_no, i64 0, i64 0, !dbg !6387
  %arraydecay36 = getelementptr inbounds [3 x float], [3 x float]* %no, i64 0, i64 0, !dbg !6390
  call void @copy_v3_v3(float* %arraydecay35, float* %arraydecay36), !dbg !6391
  br label %if.end37, !dbg !6391

if.end37:                                         ; preds = %if.then33, %if.then28
  br label %if.end38, !dbg !6392

if.end38:                                         ; preds = %if.then, %if.end37, %land.lhs.true, %if.end
  ret void, !dbg !6393
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.EdgeHalf* @find_edge_half(%struct.BevVert* %bv, %struct.BMEdge* %bme) #0 !dbg !6394 {
entry:
  %retval = alloca %struct.EdgeHalf*, align 8
  %bv.addr = alloca %struct.BevVert*, align 8
  %bme.addr = alloca %struct.BMEdge*, align 8
  %i = alloca i32, align 4
  store %struct.BevVert* %bv, %struct.BevVert** %bv.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BevVert** %bv.addr, metadata !6397, metadata !DIExpression()), !dbg !6398
  store %struct.BMEdge* %bme, %struct.BMEdge** %bme.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMEdge** %bme.addr, metadata !6399, metadata !DIExpression()), !dbg !6400
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6401, metadata !DIExpression()), !dbg !6402
  store i32 0, i32* %i, align 4, !dbg !6403
  br label %for.cond, !dbg !6405

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !6406
  %1 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !6408
  %edgecount = getelementptr inbounds %struct.BevVert, %struct.BevVert* %1, i32 0, i32 1, !dbg !6409
  %2 = load i32, i32* %edgecount, align 8, !dbg !6409
  %cmp = icmp slt i32 %0, %2, !dbg !6410
  br i1 %cmp, label %for.body, label %for.end, !dbg !6411

for.body:                                         ; preds = %for.cond
  %3 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !6412
  %edges = getelementptr inbounds %struct.BevVert, %struct.BevVert* %3, i32 0, i32 7, !dbg !6415
  %4 = load %struct.EdgeHalf*, %struct.EdgeHalf** %edges, align 8, !dbg !6415
  %5 = load i32, i32* %i, align 4, !dbg !6416
  %idxprom = sext i32 %5 to i64, !dbg !6412
  %arrayidx = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %4, i64 %idxprom, !dbg !6412
  %e = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %arrayidx, i32 0, i32 2, !dbg !6417
  %6 = load %struct.BMEdge*, %struct.BMEdge** %e, align 8, !dbg !6417
  %7 = load %struct.BMEdge*, %struct.BMEdge** %bme.addr, align 8, !dbg !6418
  %cmp1 = icmp eq %struct.BMEdge* %6, %7, !dbg !6419
  br i1 %cmp1, label %if.then, label %if.end, !dbg !6420

if.then:                                          ; preds = %for.body
  %8 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !6421
  %edges2 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %8, i32 0, i32 7, !dbg !6422
  %9 = load %struct.EdgeHalf*, %struct.EdgeHalf** %edges2, align 8, !dbg !6422
  %10 = load i32, i32* %i, align 4, !dbg !6423
  %idxprom3 = sext i32 %10 to i64, !dbg !6421
  %arrayidx4 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %9, i64 %idxprom3, !dbg !6421
  store %struct.EdgeHalf* %arrayidx4, %struct.EdgeHalf** %retval, align 8, !dbg !6424
  br label %return, !dbg !6424

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !6425

for.inc:                                          ; preds = %if.end
  %11 = load i32, i32* %i, align 4, !dbg !6426
  %inc = add nsw i32 %11, 1, !dbg !6426
  store i32 %inc, i32* %i, align 4, !dbg !6426
  br label %for.cond, !dbg !6427, !llvm.loop !6428

for.end:                                          ; preds = %for.cond
  store %struct.EdgeHalf* null, %struct.EdgeHalf** %retval, align 8, !dbg !6430
  br label %return, !dbg !6430

return:                                           ; preds = %for.end, %if.then
  %12 = load %struct.EdgeHalf*, %struct.EdgeHalf** %retval, align 8, !dbg !6431
  ret %struct.EdgeHalf* %12, !dbg !6431
}

; Function Attrs: noinline nounwind uwtable
define internal void @sub_v3_v3v3(float* %r, float* %a, float* %b) #0 !dbg !6432 {
entry:
  %r.addr = alloca float*, align 8
  %a.addr = alloca float*, align 8
  %b.addr = alloca float*, align 8
  store float* %r, float** %r.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r.addr, metadata !6433, metadata !DIExpression()), !dbg !6434
  store float* %a, float** %a.addr, align 8
  call void @llvm.dbg.declare(metadata float** %a.addr, metadata !6435, metadata !DIExpression()), !dbg !6436
  store float* %b, float** %b.addr, align 8
  call void @llvm.dbg.declare(metadata float** %b.addr, metadata !6437, metadata !DIExpression()), !dbg !6438
  %0 = load float*, float** %a.addr, align 8, !dbg !6439
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !6439
  %1 = load float, float* %arrayidx, align 4, !dbg !6439
  %2 = load float*, float** %b.addr, align 8, !dbg !6440
  %arrayidx1 = getelementptr inbounds float, float* %2, i64 0, !dbg !6440
  %3 = load float, float* %arrayidx1, align 4, !dbg !6440
  %sub = fsub float %1, %3, !dbg !6441
  %4 = load float*, float** %r.addr, align 8, !dbg !6442
  %arrayidx2 = getelementptr inbounds float, float* %4, i64 0, !dbg !6442
  store float %sub, float* %arrayidx2, align 4, !dbg !6443
  %5 = load float*, float** %a.addr, align 8, !dbg !6444
  %arrayidx3 = getelementptr inbounds float, float* %5, i64 1, !dbg !6444
  %6 = load float, float* %arrayidx3, align 4, !dbg !6444
  %7 = load float*, float** %b.addr, align 8, !dbg !6445
  %arrayidx4 = getelementptr inbounds float, float* %7, i64 1, !dbg !6445
  %8 = load float, float* %arrayidx4, align 4, !dbg !6445
  %sub5 = fsub float %6, %8, !dbg !6446
  %9 = load float*, float** %r.addr, align 8, !dbg !6447
  %arrayidx6 = getelementptr inbounds float, float* %9, i64 1, !dbg !6447
  store float %sub5, float* %arrayidx6, align 4, !dbg !6448
  %10 = load float*, float** %a.addr, align 8, !dbg !6449
  %arrayidx7 = getelementptr inbounds float, float* %10, i64 2, !dbg !6449
  %11 = load float, float* %arrayidx7, align 4, !dbg !6449
  %12 = load float*, float** %b.addr, align 8, !dbg !6450
  %arrayidx8 = getelementptr inbounds float, float* %12, i64 2, !dbg !6450
  %13 = load float, float* %arrayidx8, align 4, !dbg !6450
  %sub9 = fsub float %11, %13, !dbg !6451
  %14 = load float*, float** %r.addr, align 8, !dbg !6452
  %arrayidx10 = getelementptr inbounds float, float* %14, i64 2, !dbg !6452
  store float %sub9, float* %arrayidx10, align 4, !dbg !6453
  ret void, !dbg !6454
}

; Function Attrs: noinline nounwind uwtable
define internal float @normalize_v3(float* %n) #0 !dbg !6455 {
entry:
  %n.addr = alloca float*, align 8
  store float* %n, float** %n.addr, align 8
  call void @llvm.dbg.declare(metadata float** %n.addr, metadata !6458, metadata !DIExpression()), !dbg !6459
  %0 = load float*, float** %n.addr, align 8, !dbg !6460
  %1 = load float*, float** %n.addr, align 8, !dbg !6461
  %call = call float @normalize_v3_v3(float* %0, float* %1), !dbg !6462
  ret float %call, !dbg !6463
}

; Function Attrs: noinline nounwind uwtable
define internal void @copy_v3_v3(float* %r, float* %a) #0 !dbg !6464 {
entry:
  %r.addr = alloca float*, align 8
  %a.addr = alloca float*, align 8
  store float* %r, float** %r.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r.addr, metadata !6467, metadata !DIExpression()), !dbg !6468
  store float* %a, float** %a.addr, align 8
  call void @llvm.dbg.declare(metadata float** %a.addr, metadata !6469, metadata !DIExpression()), !dbg !6470
  %0 = load float*, float** %a.addr, align 8, !dbg !6471
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !6471
  %1 = load float, float* %arrayidx, align 4, !dbg !6471
  %2 = load float*, float** %r.addr, align 8, !dbg !6472
  %arrayidx1 = getelementptr inbounds float, float* %2, i64 0, !dbg !6472
  store float %1, float* %arrayidx1, align 4, !dbg !6473
  %3 = load float*, float** %a.addr, align 8, !dbg !6474
  %arrayidx2 = getelementptr inbounds float, float* %3, i64 1, !dbg !6474
  %4 = load float, float* %arrayidx2, align 4, !dbg !6474
  %5 = load float*, float** %r.addr, align 8, !dbg !6475
  %arrayidx3 = getelementptr inbounds float, float* %5, i64 1, !dbg !6475
  store float %4, float* %arrayidx3, align 4, !dbg !6476
  %6 = load float*, float** %a.addr, align 8, !dbg !6477
  %arrayidx4 = getelementptr inbounds float, float* %6, i64 2, !dbg !6477
  %7 = load float, float* %arrayidx4, align 4, !dbg !6477
  %8 = load float*, float** %r.addr, align 8, !dbg !6478
  %arrayidx5 = getelementptr inbounds float, float* %8, i64 2, !dbg !6478
  store float %7, float* %arrayidx5, align 4, !dbg !6479
  ret void, !dbg !6480
}

; Function Attrs: noinline nounwind uwtable
define internal void @zero_v3(float* %r) #0 !dbg !6481 {
entry:
  %r.addr = alloca float*, align 8
  store float* %r, float** %r.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r.addr, metadata !6484, metadata !DIExpression()), !dbg !6485
  %0 = load float*, float** %r.addr, align 8, !dbg !6486
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !6486
  store float 0.000000e+00, float* %arrayidx, align 4, !dbg !6487
  %1 = load float*, float** %r.addr, align 8, !dbg !6488
  %arrayidx1 = getelementptr inbounds float, float* %1, i64 1, !dbg !6488
  store float 0.000000e+00, float* %arrayidx1, align 4, !dbg !6489
  %2 = load float*, float** %r.addr, align 8, !dbg !6490
  %arrayidx2 = getelementptr inbounds float, float* %2, i64 2, !dbg !6490
  store float 0.000000e+00, float* %arrayidx2, align 4, !dbg !6491
  ret void, !dbg !6492
}

; Function Attrs: noinline nounwind uwtable
define internal void @cross_v3_v3v3(float* %r, float* %a, float* %b) #0 !dbg !6493 {
entry:
  %r.addr = alloca float*, align 8
  %a.addr = alloca float*, align 8
  %b.addr = alloca float*, align 8
  store float* %r, float** %r.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r.addr, metadata !6494, metadata !DIExpression()), !dbg !6495
  store float* %a, float** %a.addr, align 8
  call void @llvm.dbg.declare(metadata float** %a.addr, metadata !6496, metadata !DIExpression()), !dbg !6497
  store float* %b, float** %b.addr, align 8
  call void @llvm.dbg.declare(metadata float** %b.addr, metadata !6498, metadata !DIExpression()), !dbg !6499
  %0 = load float*, float** %a.addr, align 8, !dbg !6500
  %arrayidx = getelementptr inbounds float, float* %0, i64 1, !dbg !6500
  %1 = load float, float* %arrayidx, align 4, !dbg !6500
  %2 = load float*, float** %b.addr, align 8, !dbg !6501
  %arrayidx1 = getelementptr inbounds float, float* %2, i64 2, !dbg !6501
  %3 = load float, float* %arrayidx1, align 4, !dbg !6501
  %mul = fmul float %1, %3, !dbg !6502
  %4 = load float*, float** %a.addr, align 8, !dbg !6503
  %arrayidx2 = getelementptr inbounds float, float* %4, i64 2, !dbg !6503
  %5 = load float, float* %arrayidx2, align 4, !dbg !6503
  %6 = load float*, float** %b.addr, align 8, !dbg !6504
  %arrayidx3 = getelementptr inbounds float, float* %6, i64 1, !dbg !6504
  %7 = load float, float* %arrayidx3, align 4, !dbg !6504
  %mul4 = fmul float %5, %7, !dbg !6505
  %sub = fsub float %mul, %mul4, !dbg !6506
  %8 = load float*, float** %r.addr, align 8, !dbg !6507
  %arrayidx5 = getelementptr inbounds float, float* %8, i64 0, !dbg !6507
  store float %sub, float* %arrayidx5, align 4, !dbg !6508
  %9 = load float*, float** %a.addr, align 8, !dbg !6509
  %arrayidx6 = getelementptr inbounds float, float* %9, i64 2, !dbg !6509
  %10 = load float, float* %arrayidx6, align 4, !dbg !6509
  %11 = load float*, float** %b.addr, align 8, !dbg !6510
  %arrayidx7 = getelementptr inbounds float, float* %11, i64 0, !dbg !6510
  %12 = load float, float* %arrayidx7, align 4, !dbg !6510
  %mul8 = fmul float %10, %12, !dbg !6511
  %13 = load float*, float** %a.addr, align 8, !dbg !6512
  %arrayidx9 = getelementptr inbounds float, float* %13, i64 0, !dbg !6512
  %14 = load float, float* %arrayidx9, align 4, !dbg !6512
  %15 = load float*, float** %b.addr, align 8, !dbg !6513
  %arrayidx10 = getelementptr inbounds float, float* %15, i64 2, !dbg !6513
  %16 = load float, float* %arrayidx10, align 4, !dbg !6513
  %mul11 = fmul float %14, %16, !dbg !6514
  %sub12 = fsub float %mul8, %mul11, !dbg !6515
  %17 = load float*, float** %r.addr, align 8, !dbg !6516
  %arrayidx13 = getelementptr inbounds float, float* %17, i64 1, !dbg !6516
  store float %sub12, float* %arrayidx13, align 4, !dbg !6517
  %18 = load float*, float** %a.addr, align 8, !dbg !6518
  %arrayidx14 = getelementptr inbounds float, float* %18, i64 0, !dbg !6518
  %19 = load float, float* %arrayidx14, align 4, !dbg !6518
  %20 = load float*, float** %b.addr, align 8, !dbg !6519
  %arrayidx15 = getelementptr inbounds float, float* %20, i64 1, !dbg !6519
  %21 = load float, float* %arrayidx15, align 4, !dbg !6519
  %mul16 = fmul float %19, %21, !dbg !6520
  %22 = load float*, float** %a.addr, align 8, !dbg !6521
  %arrayidx17 = getelementptr inbounds float, float* %22, i64 1, !dbg !6521
  %23 = load float, float* %arrayidx17, align 4, !dbg !6521
  %24 = load float*, float** %b.addr, align 8, !dbg !6522
  %arrayidx18 = getelementptr inbounds float, float* %24, i64 0, !dbg !6522
  %25 = load float, float* %arrayidx18, align 4, !dbg !6522
  %mul19 = fmul float %23, %25, !dbg !6523
  %sub20 = fsub float %mul16, %mul19, !dbg !6524
  %26 = load float*, float** %r.addr, align 8, !dbg !6525
  %arrayidx21 = getelementptr inbounds float, float* %26, i64 2, !dbg !6525
  store float %sub20, float* %arrayidx21, align 4, !dbg !6526
  ret void, !dbg !6527
}

; Function Attrs: noinline nounwind uwtable
define internal void @madd_v3_v3fl(float* %r, float* %a, float %f) #0 !dbg !6528 {
entry:
  %r.addr = alloca float*, align 8
  %a.addr = alloca float*, align 8
  %f.addr = alloca float, align 4
  store float* %r, float** %r.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r.addr, metadata !6531, metadata !DIExpression()), !dbg !6532
  store float* %a, float** %a.addr, align 8
  call void @llvm.dbg.declare(metadata float** %a.addr, metadata !6533, metadata !DIExpression()), !dbg !6534
  store float %f, float* %f.addr, align 4
  call void @llvm.dbg.declare(metadata float* %f.addr, metadata !6535, metadata !DIExpression()), !dbg !6536
  %0 = load float*, float** %a.addr, align 8, !dbg !6537
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !6537
  %1 = load float, float* %arrayidx, align 4, !dbg !6537
  %2 = load float, float* %f.addr, align 4, !dbg !6538
  %mul = fmul float %1, %2, !dbg !6539
  %3 = load float*, float** %r.addr, align 8, !dbg !6540
  %arrayidx1 = getelementptr inbounds float, float* %3, i64 0, !dbg !6540
  %4 = load float, float* %arrayidx1, align 4, !dbg !6541
  %add = fadd float %4, %mul, !dbg !6541
  store float %add, float* %arrayidx1, align 4, !dbg !6541
  %5 = load float*, float** %a.addr, align 8, !dbg !6542
  %arrayidx2 = getelementptr inbounds float, float* %5, i64 1, !dbg !6542
  %6 = load float, float* %arrayidx2, align 4, !dbg !6542
  %7 = load float, float* %f.addr, align 4, !dbg !6543
  %mul3 = fmul float %6, %7, !dbg !6544
  %8 = load float*, float** %r.addr, align 8, !dbg !6545
  %arrayidx4 = getelementptr inbounds float, float* %8, i64 1, !dbg !6545
  %9 = load float, float* %arrayidx4, align 4, !dbg !6546
  %add5 = fadd float %9, %mul3, !dbg !6546
  store float %add5, float* %arrayidx4, align 4, !dbg !6546
  %10 = load float*, float** %a.addr, align 8, !dbg !6547
  %arrayidx6 = getelementptr inbounds float, float* %10, i64 2, !dbg !6547
  %11 = load float, float* %arrayidx6, align 4, !dbg !6547
  %12 = load float, float* %f.addr, align 4, !dbg !6548
  %mul7 = fmul float %11, %12, !dbg !6549
  %13 = load float*, float** %r.addr, align 8, !dbg !6550
  %arrayidx8 = getelementptr inbounds float, float* %13, i64 2, !dbg !6550
  %14 = load float, float* %arrayidx8, align 4, !dbg !6551
  %add9 = fadd float %14, %mul7, !dbg !6551
  store float %add9, float* %arrayidx8, align 4, !dbg !6551
  ret void, !dbg !6552
}

; Function Attrs: noinline nounwind uwtable
define internal float @normalize_v3_v3(float* %r, float* %a) #0 !dbg !6553 {
entry:
  %r.addr = alloca float*, align 8
  %a.addr = alloca float*, align 8
  %d = alloca float, align 4
  store float* %r, float** %r.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r.addr, metadata !6556, metadata !DIExpression()), !dbg !6557
  store float* %a, float** %a.addr, align 8
  call void @llvm.dbg.declare(metadata float** %a.addr, metadata !6558, metadata !DIExpression()), !dbg !6559
  call void @llvm.dbg.declare(metadata float* %d, metadata !6560, metadata !DIExpression()), !dbg !6561
  %0 = load float*, float** %a.addr, align 8, !dbg !6562
  %1 = load float*, float** %a.addr, align 8, !dbg !6563
  %call = call float @dot_v3v3(float* %0, float* %1), !dbg !6564
  store float %call, float* %d, align 4, !dbg !6561
  %2 = load float, float* %d, align 4, !dbg !6565
  %cmp = fcmp ogt float %2, 0x38AA95A5C0000000, !dbg !6567
  br i1 %cmp, label %if.then, label %if.else, !dbg !6568

if.then:                                          ; preds = %entry
  %3 = load float, float* %d, align 4, !dbg !6569
  %call1 = call float @sqrtf(float %3) #5, !dbg !6571
  store float %call1, float* %d, align 4, !dbg !6572
  %4 = load float*, float** %r.addr, align 8, !dbg !6573
  %5 = load float*, float** %a.addr, align 8, !dbg !6574
  %6 = load float, float* %d, align 4, !dbg !6575
  %div = fdiv float 1.000000e+00, %6, !dbg !6576
  call void @mul_v3_v3fl(float* %4, float* %5, float %div), !dbg !6577
  br label %if.end, !dbg !6578

if.else:                                          ; preds = %entry
  %7 = load float*, float** %r.addr, align 8, !dbg !6579
  call void @zero_v3(float* %7), !dbg !6581
  store float 0.000000e+00, float* %d, align 4, !dbg !6582
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %8 = load float, float* %d, align 4, !dbg !6583
  ret float %8, !dbg !6584
}

; Function Attrs: noinline nounwind uwtable
define internal float @dot_v3v3(float* %a, float* %b) #0 !dbg !6585 {
entry:
  %a.addr = alloca float*, align 8
  %b.addr = alloca float*, align 8
  store float* %a, float** %a.addr, align 8
  call void @llvm.dbg.declare(metadata float** %a.addr, metadata !6586, metadata !DIExpression()), !dbg !6587
  store float* %b, float** %b.addr, align 8
  call void @llvm.dbg.declare(metadata float** %b.addr, metadata !6588, metadata !DIExpression()), !dbg !6589
  %0 = load float*, float** %a.addr, align 8, !dbg !6590
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !6590
  %1 = load float, float* %arrayidx, align 4, !dbg !6590
  %2 = load float*, float** %b.addr, align 8, !dbg !6591
  %arrayidx1 = getelementptr inbounds float, float* %2, i64 0, !dbg !6591
  %3 = load float, float* %arrayidx1, align 4, !dbg !6591
  %mul = fmul float %1, %3, !dbg !6592
  %4 = load float*, float** %a.addr, align 8, !dbg !6593
  %arrayidx2 = getelementptr inbounds float, float* %4, i64 1, !dbg !6593
  %5 = load float, float* %arrayidx2, align 4, !dbg !6593
  %6 = load float*, float** %b.addr, align 8, !dbg !6594
  %arrayidx3 = getelementptr inbounds float, float* %6, i64 1, !dbg !6594
  %7 = load float, float* %arrayidx3, align 4, !dbg !6594
  %mul4 = fmul float %5, %7, !dbg !6595
  %add = fadd float %mul, %mul4, !dbg !6596
  %8 = load float*, float** %a.addr, align 8, !dbg !6597
  %arrayidx5 = getelementptr inbounds float, float* %8, i64 2, !dbg !6597
  %9 = load float, float* %arrayidx5, align 4, !dbg !6597
  %10 = load float*, float** %b.addr, align 8, !dbg !6598
  %arrayidx6 = getelementptr inbounds float, float* %10, i64 2, !dbg !6598
  %11 = load float, float* %arrayidx6, align 4, !dbg !6598
  %mul7 = fmul float %9, %11, !dbg !6599
  %add8 = fadd float %add, %mul7, !dbg !6600
  ret float %add8, !dbg !6601
}

; Function Attrs: nounwind
declare dso_local float @sqrtf(float) #4

; Function Attrs: noinline nounwind uwtable
define internal void @mul_v3_v3fl(float* %r, float* %a, float %f) #0 !dbg !6602 {
entry:
  %r.addr = alloca float*, align 8
  %a.addr = alloca float*, align 8
  %f.addr = alloca float, align 4
  store float* %r, float** %r.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r.addr, metadata !6603, metadata !DIExpression()), !dbg !6604
  store float* %a, float** %a.addr, align 8
  call void @llvm.dbg.declare(metadata float** %a.addr, metadata !6605, metadata !DIExpression()), !dbg !6606
  store float %f, float* %f.addr, align 4
  call void @llvm.dbg.declare(metadata float* %f.addr, metadata !6607, metadata !DIExpression()), !dbg !6608
  %0 = load float*, float** %a.addr, align 8, !dbg !6609
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !6609
  %1 = load float, float* %arrayidx, align 4, !dbg !6609
  %2 = load float, float* %f.addr, align 4, !dbg !6610
  %mul = fmul float %1, %2, !dbg !6611
  %3 = load float*, float** %r.addr, align 8, !dbg !6612
  %arrayidx1 = getelementptr inbounds float, float* %3, i64 0, !dbg !6612
  store float %mul, float* %arrayidx1, align 4, !dbg !6613
  %4 = load float*, float** %a.addr, align 8, !dbg !6614
  %arrayidx2 = getelementptr inbounds float, float* %4, i64 1, !dbg !6614
  %5 = load float, float* %arrayidx2, align 4, !dbg !6614
  %6 = load float, float* %f.addr, align 4, !dbg !6615
  %mul3 = fmul float %5, %6, !dbg !6616
  %7 = load float*, float** %r.addr, align 8, !dbg !6617
  %arrayidx4 = getelementptr inbounds float, float* %7, i64 1, !dbg !6617
  store float %mul3, float* %arrayidx4, align 4, !dbg !6618
  %8 = load float*, float** %a.addr, align 8, !dbg !6619
  %arrayidx5 = getelementptr inbounds float, float* %8, i64 2, !dbg !6619
  %9 = load float, float* %arrayidx5, align 4, !dbg !6619
  %10 = load float, float* %f.addr, align 4, !dbg !6620
  %mul6 = fmul float %9, %10, !dbg !6621
  %11 = load float*, float** %r.addr, align 8, !dbg !6622
  %arrayidx7 = getelementptr inbounds float, float* %11, i64 2, !dbg !6622
  store float %mul6, float* %arrayidx7, align 4, !dbg !6623
  ret void, !dbg !6624
}

; Function Attrs: noinline nounwind uwtable
define internal void @project_to_edge(%struct.BMEdge* %e, float* %co_a, float* %co_b, float* %projco) #0 !dbg !6625 {
entry:
  %e.addr = alloca %struct.BMEdge*, align 8
  %co_a.addr = alloca float*, align 8
  %co_b.addr = alloca float*, align 8
  %projco.addr = alloca float*, align 8
  %otherco = alloca [3 x float], align 4
  store %struct.BMEdge* %e, %struct.BMEdge** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMEdge** %e.addr, metadata !6628, metadata !DIExpression()), !dbg !6629
  store float* %co_a, float** %co_a.addr, align 8
  call void @llvm.dbg.declare(metadata float** %co_a.addr, metadata !6630, metadata !DIExpression()), !dbg !6631
  store float* %co_b, float** %co_b.addr, align 8
  call void @llvm.dbg.declare(metadata float** %co_b.addr, metadata !6632, metadata !DIExpression()), !dbg !6633
  store float* %projco, float** %projco.addr, align 8
  call void @llvm.dbg.declare(metadata float** %projco.addr, metadata !6634, metadata !DIExpression()), !dbg !6635
  call void @llvm.dbg.declare(metadata [3 x float]* %otherco, metadata !6636, metadata !DIExpression()), !dbg !6637
  %0 = load %struct.BMEdge*, %struct.BMEdge** %e.addr, align 8, !dbg !6638
  %v1 = getelementptr inbounds %struct.BMEdge, %struct.BMEdge* %0, i32 0, i32 2, !dbg !6640
  %1 = load %struct.BMVert*, %struct.BMVert** %v1, align 8, !dbg !6640
  %co = getelementptr inbounds %struct.BMVert, %struct.BMVert* %1, i32 0, i32 2, !dbg !6641
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !6638
  %2 = load %struct.BMEdge*, %struct.BMEdge** %e.addr, align 8, !dbg !6642
  %v2 = getelementptr inbounds %struct.BMEdge, %struct.BMEdge* %2, i32 0, i32 3, !dbg !6643
  %3 = load %struct.BMVert*, %struct.BMVert** %v2, align 8, !dbg !6643
  %co1 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %3, i32 0, i32 2, !dbg !6644
  %arraydecay2 = getelementptr inbounds [3 x float], [3 x float]* %co1, i64 0, i64 0, !dbg !6642
  %4 = load float*, float** %co_a.addr, align 8, !dbg !6645
  %5 = load float*, float** %co_b.addr, align 8, !dbg !6646
  %6 = load float*, float** %projco.addr, align 8, !dbg !6647
  %arraydecay3 = getelementptr inbounds [3 x float], [3 x float]* %otherco, i64 0, i64 0, !dbg !6648
  %call = call i32 @isect_line_line_v3(float* %arraydecay, float* %arraydecay2, float* %4, float* %5, float* %6, float* %arraydecay3), !dbg !6649
  %tobool = icmp ne i32 %call, 0, !dbg !6649
  br i1 %tobool, label %if.end, label %if.then, !dbg !6650

if.then:                                          ; preds = %entry
  %7 = load float*, float** %projco.addr, align 8, !dbg !6651
  %8 = load %struct.BMEdge*, %struct.BMEdge** %e.addr, align 8, !dbg !6653
  %v14 = getelementptr inbounds %struct.BMEdge, %struct.BMEdge* %8, i32 0, i32 2, !dbg !6654
  %9 = load %struct.BMVert*, %struct.BMVert** %v14, align 8, !dbg !6654
  %co5 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %9, i32 0, i32 2, !dbg !6655
  %arraydecay6 = getelementptr inbounds [3 x float], [3 x float]* %co5, i64 0, i64 0, !dbg !6653
  call void @copy_v3_v3(float* %7, float* %arraydecay6), !dbg !6656
  br label %if.end, !dbg !6657

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !6658
}

; Function Attrs: noinline nounwind uwtable
define internal void @add_v3_v3v3(float* %r, float* %a, float* %b) #0 !dbg !6659 {
entry:
  %r.addr = alloca float*, align 8
  %a.addr = alloca float*, align 8
  %b.addr = alloca float*, align 8
  store float* %r, float** %r.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r.addr, metadata !6660, metadata !DIExpression()), !dbg !6661
  store float* %a, float** %a.addr, align 8
  call void @llvm.dbg.declare(metadata float** %a.addr, metadata !6662, metadata !DIExpression()), !dbg !6663
  store float* %b, float** %b.addr, align 8
  call void @llvm.dbg.declare(metadata float** %b.addr, metadata !6664, metadata !DIExpression()), !dbg !6665
  %0 = load float*, float** %a.addr, align 8, !dbg !6666
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !6666
  %1 = load float, float* %arrayidx, align 4, !dbg !6666
  %2 = load float*, float** %b.addr, align 8, !dbg !6667
  %arrayidx1 = getelementptr inbounds float, float* %2, i64 0, !dbg !6667
  %3 = load float, float* %arrayidx1, align 4, !dbg !6667
  %add = fadd float %1, %3, !dbg !6668
  %4 = load float*, float** %r.addr, align 8, !dbg !6669
  %arrayidx2 = getelementptr inbounds float, float* %4, i64 0, !dbg !6669
  store float %add, float* %arrayidx2, align 4, !dbg !6670
  %5 = load float*, float** %a.addr, align 8, !dbg !6671
  %arrayidx3 = getelementptr inbounds float, float* %5, i64 1, !dbg !6671
  %6 = load float, float* %arrayidx3, align 4, !dbg !6671
  %7 = load float*, float** %b.addr, align 8, !dbg !6672
  %arrayidx4 = getelementptr inbounds float, float* %7, i64 1, !dbg !6672
  %8 = load float, float* %arrayidx4, align 4, !dbg !6672
  %add5 = fadd float %6, %8, !dbg !6673
  %9 = load float*, float** %r.addr, align 8, !dbg !6674
  %arrayidx6 = getelementptr inbounds float, float* %9, i64 1, !dbg !6674
  store float %add5, float* %arrayidx6, align 4, !dbg !6675
  %10 = load float*, float** %a.addr, align 8, !dbg !6676
  %arrayidx7 = getelementptr inbounds float, float* %10, i64 2, !dbg !6676
  %11 = load float, float* %arrayidx7, align 4, !dbg !6676
  %12 = load float*, float** %b.addr, align 8, !dbg !6677
  %arrayidx8 = getelementptr inbounds float, float* %12, i64 2, !dbg !6677
  %13 = load float, float* %arrayidx8, align 4, !dbg !6677
  %add9 = fadd float %11, %13, !dbg !6678
  %14 = load float*, float** %r.addr, align 8, !dbg !6679
  %arrayidx10 = getelementptr inbounds float, float* %14, i64 2, !dbg !6679
  store float %add9, float* %arrayidx10, align 4, !dbg !6680
  ret void, !dbg !6681
}

declare dso_local zeroext i8 @isect_line_plane_v3(float*, float*, float*, float*, float*) #3

declare dso_local void @mid_v3_v3v3(float*, float*, float*) #3

declare dso_local i32 @isect_line_line_v3(float*, float*, float*, float*, float*, float*) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @make_unit_square_map(float* %va, float* %vmid, float* %vb, [4 x float]* %r_mat) #0 !dbg !6682 {
entry:
  %retval = alloca i8, align 1
  %va.addr = alloca float*, align 8
  %vmid.addr = alloca float*, align 8
  %vb.addr = alloca float*, align 8
  %r_mat.addr = alloca [4 x float]*, align 8
  %vo = alloca [3 x float], align 4
  %vd = alloca [3 x float], align 4
  %vb_vmid = alloca [3 x float], align 4
  %va_vmid = alloca [3 x float], align 4
  %vddir = alloca [3 x float], align 4
  store float* %va, float** %va.addr, align 8
  call void @llvm.dbg.declare(metadata float** %va.addr, metadata !6688, metadata !DIExpression()), !dbg !6689
  store float* %vmid, float** %vmid.addr, align 8
  call void @llvm.dbg.declare(metadata float** %vmid.addr, metadata !6690, metadata !DIExpression()), !dbg !6691
  store float* %vb, float** %vb.addr, align 8
  call void @llvm.dbg.declare(metadata float** %vb.addr, metadata !6692, metadata !DIExpression()), !dbg !6693
  store [4 x float]* %r_mat, [4 x float]** %r_mat.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %r_mat.addr, metadata !6694, metadata !DIExpression()), !dbg !6695
  call void @llvm.dbg.declare(metadata [3 x float]* %vo, metadata !6696, metadata !DIExpression()), !dbg !6697
  call void @llvm.dbg.declare(metadata [3 x float]* %vd, metadata !6698, metadata !DIExpression()), !dbg !6699
  call void @llvm.dbg.declare(metadata [3 x float]* %vb_vmid, metadata !6700, metadata !DIExpression()), !dbg !6701
  call void @llvm.dbg.declare(metadata [3 x float]* %va_vmid, metadata !6702, metadata !DIExpression()), !dbg !6703
  call void @llvm.dbg.declare(metadata [3 x float]* %vddir, metadata !6704, metadata !DIExpression()), !dbg !6705
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %va_vmid, i64 0, i64 0, !dbg !6706
  %0 = load float*, float** %vmid.addr, align 8, !dbg !6707
  %1 = load float*, float** %va.addr, align 8, !dbg !6708
  call void @sub_v3_v3v3(float* %arraydecay, float* %0, float* %1), !dbg !6709
  %arraydecay1 = getelementptr inbounds [3 x float], [3 x float]* %vb_vmid, i64 0, i64 0, !dbg !6710
  %2 = load float*, float** %vmid.addr, align 8, !dbg !6711
  %3 = load float*, float** %vb.addr, align 8, !dbg !6712
  call void @sub_v3_v3v3(float* %arraydecay1, float* %2, float* %3), !dbg !6713
  %arraydecay2 = getelementptr inbounds [3 x float], [3 x float]* %va_vmid, i64 0, i64 0, !dbg !6714
  %arraydecay3 = getelementptr inbounds [3 x float], [3 x float]* %vb_vmid, i64 0, i64 0, !dbg !6716
  %call = call float @angle_v3v3(float* %arraydecay2, float* %arraydecay3), !dbg !6717
  %sub = fsub float %call, 0x400921FB60000000, !dbg !6718
  %4 = call float @llvm.fabs.f32(float %sub), !dbg !6719
  %cmp = fcmp ogt float %4, 0x3F1A36E2E0000000, !dbg !6720
  br i1 %cmp, label %if.then, label %if.else, !dbg !6721

if.then:                                          ; preds = %entry
  %arraydecay4 = getelementptr inbounds [3 x float], [3 x float]* %vo, i64 0, i64 0, !dbg !6722
  %5 = load float*, float** %va.addr, align 8, !dbg !6724
  %arraydecay5 = getelementptr inbounds [3 x float], [3 x float]* %vb_vmid, i64 0, i64 0, !dbg !6725
  call void @sub_v3_v3v3(float* %arraydecay4, float* %5, float* %arraydecay5), !dbg !6726
  %arraydecay6 = getelementptr inbounds [3 x float], [3 x float]* %vddir, i64 0, i64 0, !dbg !6727
  %arraydecay7 = getelementptr inbounds [3 x float], [3 x float]* %vb_vmid, i64 0, i64 0, !dbg !6728
  %arraydecay8 = getelementptr inbounds [3 x float], [3 x float]* %va_vmid, i64 0, i64 0, !dbg !6729
  call void @cross_v3_v3v3(float* %arraydecay6, float* %arraydecay7, float* %arraydecay8), !dbg !6730
  %arraydecay9 = getelementptr inbounds [3 x float], [3 x float]* %vddir, i64 0, i64 0, !dbg !6731
  %call10 = call float @normalize_v3(float* %arraydecay9), !dbg !6732
  %arraydecay11 = getelementptr inbounds [3 x float], [3 x float]* %vd, i64 0, i64 0, !dbg !6733
  %arraydecay12 = getelementptr inbounds [3 x float], [3 x float]* %vo, i64 0, i64 0, !dbg !6734
  %arraydecay13 = getelementptr inbounds [3 x float], [3 x float]* %vddir, i64 0, i64 0, !dbg !6735
  call void @add_v3_v3v3(float* %arraydecay11, float* %arraydecay12, float* %arraydecay13), !dbg !6736
  %6 = load [4 x float]*, [4 x float]** %r_mat.addr, align 8, !dbg !6737
  %arrayidx = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, !dbg !6737
  %arrayidx14 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx, i64 0, i64 0, !dbg !6737
  %7 = load float*, float** %vmid.addr, align 8, !dbg !6738
  %8 = load float*, float** %va.addr, align 8, !dbg !6739
  call void @sub_v3_v3v3(float* %arrayidx14, float* %7, float* %8), !dbg !6740
  %9 = load [4 x float]*, [4 x float]** %r_mat.addr, align 8, !dbg !6741
  %arrayidx15 = getelementptr inbounds [4 x float], [4 x float]* %9, i64 0, !dbg !6741
  %arrayidx16 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx15, i64 0, i64 3, !dbg !6741
  store float 0.000000e+00, float* %arrayidx16, align 4, !dbg !6742
  %10 = load [4 x float]*, [4 x float]** %r_mat.addr, align 8, !dbg !6743
  %arrayidx17 = getelementptr inbounds [4 x float], [4 x float]* %10, i64 1, !dbg !6743
  %arrayidx18 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx17, i64 0, i64 0, !dbg !6743
  %11 = load float*, float** %vmid.addr, align 8, !dbg !6744
  %12 = load float*, float** %vb.addr, align 8, !dbg !6745
  call void @sub_v3_v3v3(float* %arrayidx18, float* %11, float* %12), !dbg !6746
  %13 = load [4 x float]*, [4 x float]** %r_mat.addr, align 8, !dbg !6747
  %arrayidx19 = getelementptr inbounds [4 x float], [4 x float]* %13, i64 1, !dbg !6747
  %arrayidx20 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx19, i64 0, i64 3, !dbg !6747
  store float 0.000000e+00, float* %arrayidx20, align 4, !dbg !6748
  %14 = load [4 x float]*, [4 x float]** %r_mat.addr, align 8, !dbg !6749
  %arrayidx21 = getelementptr inbounds [4 x float], [4 x float]* %14, i64 2, !dbg !6749
  %arrayidx22 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx21, i64 0, i64 0, !dbg !6749
  %15 = load float*, float** %vmid.addr, align 8, !dbg !6750
  %arraydecay23 = getelementptr inbounds [3 x float], [3 x float]* %vd, i64 0, i64 0, !dbg !6751
  call void @add_v3_v3v3(float* %arrayidx22, float* %15, float* %arraydecay23), !dbg !6752
  %16 = load [4 x float]*, [4 x float]** %r_mat.addr, align 8, !dbg !6753
  %arrayidx24 = getelementptr inbounds [4 x float], [4 x float]* %16, i64 2, !dbg !6753
  %arrayidx25 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx24, i64 0, i64 0, !dbg !6753
  %17 = load float*, float** %va.addr, align 8, !dbg !6754
  call void @sub_v3_v3(float* %arrayidx25, float* %17), !dbg !6755
  %18 = load [4 x float]*, [4 x float]** %r_mat.addr, align 8, !dbg !6756
  %arrayidx26 = getelementptr inbounds [4 x float], [4 x float]* %18, i64 2, !dbg !6756
  %arrayidx27 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx26, i64 0, i64 0, !dbg !6756
  %19 = load float*, float** %vb.addr, align 8, !dbg !6757
  call void @sub_v3_v3(float* %arrayidx27, float* %19), !dbg !6758
  %20 = load [4 x float]*, [4 x float]** %r_mat.addr, align 8, !dbg !6759
  %arrayidx28 = getelementptr inbounds [4 x float], [4 x float]* %20, i64 2, !dbg !6759
  %arrayidx29 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx28, i64 0, i64 3, !dbg !6759
  store float 0.000000e+00, float* %arrayidx29, align 4, !dbg !6760
  %21 = load [4 x float]*, [4 x float]** %r_mat.addr, align 8, !dbg !6761
  %arrayidx30 = getelementptr inbounds [4 x float], [4 x float]* %21, i64 3, !dbg !6761
  %arrayidx31 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx30, i64 0, i64 0, !dbg !6761
  %22 = load float*, float** %va.addr, align 8, !dbg !6762
  %23 = load float*, float** %vb.addr, align 8, !dbg !6763
  call void @add_v3_v3v3(float* %arrayidx31, float* %22, float* %23), !dbg !6764
  %24 = load [4 x float]*, [4 x float]** %r_mat.addr, align 8, !dbg !6765
  %arrayidx32 = getelementptr inbounds [4 x float], [4 x float]* %24, i64 3, !dbg !6765
  %arrayidx33 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx32, i64 0, i64 0, !dbg !6765
  %25 = load float*, float** %vmid.addr, align 8, !dbg !6766
  call void @sub_v3_v3(float* %arrayidx33, float* %25), !dbg !6767
  %26 = load [4 x float]*, [4 x float]** %r_mat.addr, align 8, !dbg !6768
  %arrayidx34 = getelementptr inbounds [4 x float], [4 x float]* %26, i64 3, !dbg !6768
  %arrayidx35 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx34, i64 0, i64 3, !dbg !6768
  store float 1.000000e+00, float* %arrayidx35, align 4, !dbg !6769
  store i8 1, i8* %retval, align 1, !dbg !6770
  br label %return, !dbg !6770

if.else:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !6771
  br label %return, !dbg !6771

return:                                           ; preds = %if.else, %if.then
  %27 = load i8, i8* %retval, align 1, !dbg !6772
  ret i8 %27, !dbg !6772
}

declare dso_local void @mul_v3_m4v3(float*, [4 x float]*, float*) #3

declare dso_local void @interp_v3_v3v3(float*, float*, float*, float) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_zero_v3(float* %v) #0 !dbg !6773 {
entry:
  %v.addr = alloca float*, align 8
  store float* %v, float** %v.addr, align 8
  call void @llvm.dbg.declare(metadata float** %v.addr, metadata !6776, metadata !DIExpression()), !dbg !6777
  %0 = load float*, float** %v.addr, align 8, !dbg !6778
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !6778
  %1 = load float, float* %arrayidx, align 4, !dbg !6778
  %cmp = fcmp oeq float %1, 0.000000e+00, !dbg !6779
  br i1 %cmp, label %land.lhs.true, label %land.end, !dbg !6780

land.lhs.true:                                    ; preds = %entry
  %2 = load float*, float** %v.addr, align 8, !dbg !6781
  %arrayidx1 = getelementptr inbounds float, float* %2, i64 1, !dbg !6781
  %3 = load float, float* %arrayidx1, align 4, !dbg !6781
  %cmp2 = fcmp oeq float %3, 0.000000e+00, !dbg !6782
  br i1 %cmp2, label %land.rhs, label %land.end, !dbg !6783

land.rhs:                                         ; preds = %land.lhs.true
  %4 = load float*, float** %v.addr, align 8, !dbg !6784
  %arrayidx3 = getelementptr inbounds float, float* %4, i64 2, !dbg !6784
  %5 = load float, float* %arrayidx3, align 4, !dbg !6784
  %cmp4 = fcmp oeq float %5, 0.000000e+00, !dbg !6785
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %6 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %cmp4, %land.rhs ], !dbg !6786
  %land.ext = zext i1 %6 to i32, !dbg !6783
  %conv = trunc i32 %land.ext to i8, !dbg !6787
  ret i8 %conv, !dbg !6788
}

declare dso_local float @angle_v3v3(float*, float*) #3

; Function Attrs: noinline nounwind uwtable
define internal void @sub_v3_v3(float* %r, float* %a) #0 !dbg !6789 {
entry:
  %r.addr = alloca float*, align 8
  %a.addr = alloca float*, align 8
  store float* %r, float** %r.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r.addr, metadata !6790, metadata !DIExpression()), !dbg !6791
  store float* %a, float** %a.addr, align 8
  call void @llvm.dbg.declare(metadata float** %a.addr, metadata !6792, metadata !DIExpression()), !dbg !6793
  %0 = load float*, float** %a.addr, align 8, !dbg !6794
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !6794
  %1 = load float, float* %arrayidx, align 4, !dbg !6794
  %2 = load float*, float** %r.addr, align 8, !dbg !6795
  %arrayidx1 = getelementptr inbounds float, float* %2, i64 0, !dbg !6795
  %3 = load float, float* %arrayidx1, align 4, !dbg !6796
  %sub = fsub float %3, %1, !dbg !6796
  store float %sub, float* %arrayidx1, align 4, !dbg !6796
  %4 = load float*, float** %a.addr, align 8, !dbg !6797
  %arrayidx2 = getelementptr inbounds float, float* %4, i64 1, !dbg !6797
  %5 = load float, float* %arrayidx2, align 4, !dbg !6797
  %6 = load float*, float** %r.addr, align 8, !dbg !6798
  %arrayidx3 = getelementptr inbounds float, float* %6, i64 1, !dbg !6798
  %7 = load float, float* %arrayidx3, align 4, !dbg !6799
  %sub4 = fsub float %7, %5, !dbg !6799
  store float %sub4, float* %arrayidx3, align 4, !dbg !6799
  %8 = load float*, float** %a.addr, align 8, !dbg !6800
  %arrayidx5 = getelementptr inbounds float, float* %8, i64 2, !dbg !6800
  %9 = load float, float* %arrayidx5, align 4, !dbg !6800
  %10 = load float*, float** %r.addr, align 8, !dbg !6801
  %arrayidx6 = getelementptr inbounds float, float* %10, i64 2, !dbg !6801
  %11 = load float, float* %arrayidx6, align 4, !dbg !6802
  %sub7 = fsub float %11, %9, !dbg !6802
  store float %sub7, float* %arrayidx6, align 4, !dbg !6802
  ret void, !dbg !6803
}

; Function Attrs: noinline nounwind uwtable
define internal float @max_ff(float %a, float %b) #0 !dbg !6804 {
entry:
  %a.addr = alloca float, align 4
  %b.addr = alloca float, align 4
  store float %a, float* %a.addr, align 4
  call void @llvm.dbg.declare(metadata float* %a.addr, metadata !6807, metadata !DIExpression()), !dbg !6808
  store float %b, float* %b.addr, align 4
  call void @llvm.dbg.declare(metadata float* %b.addr, metadata !6809, metadata !DIExpression()), !dbg !6810
  %0 = load float, float* %a.addr, align 4, !dbg !6811
  %1 = load float, float* %b.addr, align 4, !dbg !6812
  %cmp = fcmp ogt float %0, %1, !dbg !6813
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !6814

cond.true:                                        ; preds = %entry
  %2 = load float, float* %a.addr, align 4, !dbg !6815
  br label %cond.end, !dbg !6814

cond.false:                                       ; preds = %entry
  %3 = load float, float* %b.addr, align 4, !dbg !6816
  br label %cond.end, !dbg !6814

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi float [ %2, %cond.true ], [ %3, %cond.false ], !dbg !6814
  ret float %cond, !dbg !6817
}

; Function Attrs: noinline nounwind uwtable
define internal void @negate_v3(float* %r) #0 !dbg !6818 {
entry:
  %r.addr = alloca float*, align 8
  store float* %r, float** %r.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r.addr, metadata !6819, metadata !DIExpression()), !dbg !6820
  %0 = load float*, float** %r.addr, align 8, !dbg !6821
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !6821
  %1 = load float, float* %arrayidx, align 4, !dbg !6821
  %fneg = fneg float %1, !dbg !6822
  %2 = load float*, float** %r.addr, align 8, !dbg !6823
  %arrayidx1 = getelementptr inbounds float, float* %2, i64 0, !dbg !6823
  store float %fneg, float* %arrayidx1, align 4, !dbg !6824
  %3 = load float*, float** %r.addr, align 8, !dbg !6825
  %arrayidx2 = getelementptr inbounds float, float* %3, i64 1, !dbg !6825
  %4 = load float, float* %arrayidx2, align 4, !dbg !6825
  %fneg3 = fneg float %4, !dbg !6826
  %5 = load float*, float** %r.addr, align 8, !dbg !6827
  %arrayidx4 = getelementptr inbounds float, float* %5, i64 1, !dbg !6827
  store float %fneg3, float* %arrayidx4, align 4, !dbg !6828
  %6 = load float*, float** %r.addr, align 8, !dbg !6829
  %arrayidx5 = getelementptr inbounds float, float* %6, i64 2, !dbg !6829
  %7 = load float, float* %arrayidx5, align 4, !dbg !6829
  %fneg6 = fneg float %7, !dbg !6830
  %8 = load float*, float** %r.addr, align 8, !dbg !6831
  %arrayidx7 = getelementptr inbounds float, float* %8, i64 2, !dbg !6831
  store float %fneg6, float* %arrayidx7, align 4, !dbg !6832
  ret void, !dbg !6833
}

declare dso_local float @dist_to_line_v3(float*, float*, float*) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_outside_edge(%struct.EdgeHalf* %e, float* %co, %struct.BMVert** %ret_closer_v) #0 !dbg !6834 {
entry:
  %retval = alloca i8, align 1
  %e.addr = alloca %struct.EdgeHalf*, align 8
  %co.addr = alloca float*, align 8
  %ret_closer_v.addr = alloca %struct.BMVert**, align 8
  %d_squared = alloca float, align 4
  store %struct.EdgeHalf* %e, %struct.EdgeHalf** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.EdgeHalf** %e.addr, metadata !6837, metadata !DIExpression()), !dbg !6838
  store float* %co, float** %co.addr, align 8
  call void @llvm.dbg.declare(metadata float** %co.addr, metadata !6839, metadata !DIExpression()), !dbg !6840
  store %struct.BMVert** %ret_closer_v, %struct.BMVert*** %ret_closer_v.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMVert*** %ret_closer_v.addr, metadata !6841, metadata !DIExpression()), !dbg !6842
  call void @llvm.dbg.declare(metadata float* %d_squared, metadata !6843, metadata !DIExpression()), !dbg !6844
  %0 = load float*, float** %co.addr, align 8, !dbg !6845
  %1 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e.addr, align 8, !dbg !6846
  %e1 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %1, i32 0, i32 2, !dbg !6847
  %2 = load %struct.BMEdge*, %struct.BMEdge** %e1, align 8, !dbg !6847
  %v1 = getelementptr inbounds %struct.BMEdge, %struct.BMEdge* %2, i32 0, i32 2, !dbg !6848
  %3 = load %struct.BMVert*, %struct.BMVert** %v1, align 8, !dbg !6848
  %co2 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %3, i32 0, i32 2, !dbg !6849
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %co2, i64 0, i64 0, !dbg !6846
  %4 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e.addr, align 8, !dbg !6850
  %e3 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %4, i32 0, i32 2, !dbg !6851
  %5 = load %struct.BMEdge*, %struct.BMEdge** %e3, align 8, !dbg !6851
  %v2 = getelementptr inbounds %struct.BMEdge, %struct.BMEdge* %5, i32 0, i32 3, !dbg !6852
  %6 = load %struct.BMVert*, %struct.BMVert** %v2, align 8, !dbg !6852
  %co4 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %6, i32 0, i32 2, !dbg !6853
  %arraydecay5 = getelementptr inbounds [3 x float], [3 x float]* %co4, i64 0, i64 0, !dbg !6850
  %call = call float @dist_squared_to_line_segment_v3(float* %0, float* %arraydecay, float* %arraydecay5), !dbg !6854
  store float %call, float* %d_squared, align 4, !dbg !6855
  %7 = load float, float* %d_squared, align 4, !dbg !6856
  %cmp = fcmp ogt float %7, 0x3E45798EC0000000, !dbg !6858
  br i1 %cmp, label %if.then, label %if.else22, !dbg !6859

if.then:                                          ; preds = %entry
  %8 = load float*, float** %co.addr, align 8, !dbg !6860
  %9 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e.addr, align 8, !dbg !6863
  %e6 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %9, i32 0, i32 2, !dbg !6864
  %10 = load %struct.BMEdge*, %struct.BMEdge** %e6, align 8, !dbg !6864
  %v17 = getelementptr inbounds %struct.BMEdge, %struct.BMEdge* %10, i32 0, i32 2, !dbg !6865
  %11 = load %struct.BMVert*, %struct.BMVert** %v17, align 8, !dbg !6865
  %co8 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %11, i32 0, i32 2, !dbg !6866
  %arraydecay9 = getelementptr inbounds [3 x float], [3 x float]* %co8, i64 0, i64 0, !dbg !6863
  %call10 = call float @len_squared_v3v3(float* %8, float* %arraydecay9), !dbg !6867
  %12 = load float*, float** %co.addr, align 8, !dbg !6868
  %13 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e.addr, align 8, !dbg !6869
  %e11 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %13, i32 0, i32 2, !dbg !6870
  %14 = load %struct.BMEdge*, %struct.BMEdge** %e11, align 8, !dbg !6870
  %v212 = getelementptr inbounds %struct.BMEdge, %struct.BMEdge* %14, i32 0, i32 3, !dbg !6871
  %15 = load %struct.BMVert*, %struct.BMVert** %v212, align 8, !dbg !6871
  %co13 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %15, i32 0, i32 2, !dbg !6872
  %arraydecay14 = getelementptr inbounds [3 x float], [3 x float]* %co13, i64 0, i64 0, !dbg !6869
  %call15 = call float @len_squared_v3v3(float* %12, float* %arraydecay14), !dbg !6873
  %cmp16 = fcmp ogt float %call10, %call15, !dbg !6874
  br i1 %cmp16, label %if.then17, label %if.else, !dbg !6875

if.then17:                                        ; preds = %if.then
  %16 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e.addr, align 8, !dbg !6876
  %e18 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %16, i32 0, i32 2, !dbg !6877
  %17 = load %struct.BMEdge*, %struct.BMEdge** %e18, align 8, !dbg !6877
  %v219 = getelementptr inbounds %struct.BMEdge, %struct.BMEdge* %17, i32 0, i32 3, !dbg !6878
  %18 = load %struct.BMVert*, %struct.BMVert** %v219, align 8, !dbg !6878
  %19 = load %struct.BMVert**, %struct.BMVert*** %ret_closer_v.addr, align 8, !dbg !6879
  store %struct.BMVert* %18, %struct.BMVert** %19, align 8, !dbg !6880
  br label %if.end, !dbg !6881

if.else:                                          ; preds = %if.then
  %20 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e.addr, align 8, !dbg !6882
  %e20 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %20, i32 0, i32 2, !dbg !6883
  %21 = load %struct.BMEdge*, %struct.BMEdge** %e20, align 8, !dbg !6883
  %v121 = getelementptr inbounds %struct.BMEdge, %struct.BMEdge* %21, i32 0, i32 2, !dbg !6884
  %22 = load %struct.BMVert*, %struct.BMVert** %v121, align 8, !dbg !6884
  %23 = load %struct.BMVert**, %struct.BMVert*** %ret_closer_v.addr, align 8, !dbg !6885
  store %struct.BMVert* %22, %struct.BMVert** %23, align 8, !dbg !6886
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then17
  store i8 1, i8* %retval, align 1, !dbg !6887
  br label %return, !dbg !6887

if.else22:                                        ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !6888
  br label %return, !dbg !6888

return:                                           ; preds = %if.else22, %if.end
  %24 = load i8, i8* %retval, align 1, !dbg !6890
  ret i8 %24, !dbg !6890
}

declare dso_local float @dist_squared_to_line_segment_v3(float*, float*, float*) #3

; Function Attrs: noinline nounwind uwtable
define internal float @len_squared_v3v3(float* %a, float* %b) #0 !dbg !6891 {
entry:
  %a.addr = alloca float*, align 8
  %b.addr = alloca float*, align 8
  %d = alloca [3 x float], align 4
  store float* %a, float** %a.addr, align 8
  call void @llvm.dbg.declare(metadata float** %a.addr, metadata !6892, metadata !DIExpression()), !dbg !6893
  store float* %b, float** %b.addr, align 8
  call void @llvm.dbg.declare(metadata float** %b.addr, metadata !6894, metadata !DIExpression()), !dbg !6895
  call void @llvm.dbg.declare(metadata [3 x float]* %d, metadata !6896, metadata !DIExpression()), !dbg !6897
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %d, i64 0, i64 0, !dbg !6898
  %0 = load float*, float** %b.addr, align 8, !dbg !6899
  %1 = load float*, float** %a.addr, align 8, !dbg !6900
  call void @sub_v3_v3v3(float* %arraydecay, float* %0, float* %1), !dbg !6901
  %arraydecay1 = getelementptr inbounds [3 x float], [3 x float]* %d, i64 0, i64 0, !dbg !6902
  %arraydecay2 = getelementptr inbounds [3 x float], [3 x float]* %d, i64 0, i64 0, !dbg !6903
  %call = call float @dot_v3v3(float* %arraydecay1, float* %arraydecay2), !dbg !6904
  ret float %call, !dbg !6905
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @other_edge_half_visited(%struct.BevelParams* %bp, %struct.EdgeHalf* %e) #0 !dbg !6906 {
entry:
  %retval = alloca i8, align 1
  %bp.addr = alloca %struct.BevelParams*, align 8
  %e.addr = alloca %struct.EdgeHalf*, align 8
  %bvo = alloca %struct.BevVert*, align 8
  store %struct.BevelParams* %bp, %struct.BevelParams** %bp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BevelParams** %bp.addr, metadata !6909, metadata !DIExpression()), !dbg !6910
  store %struct.EdgeHalf* %e, %struct.EdgeHalf** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.EdgeHalf** %e.addr, metadata !6911, metadata !DIExpression()), !dbg !6912
  call void @llvm.dbg.declare(metadata %struct.BevVert** %bvo, metadata !6913, metadata !DIExpression()), !dbg !6914
  %0 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !6915
  %1 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e.addr, align 8, !dbg !6916
  %is_rev = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %1, i32 0, i32 13, !dbg !6917
  %2 = load i8, i8* %is_rev, align 1, !dbg !6917
  %conv = zext i8 %2 to i32, !dbg !6916
  %tobool = icmp ne i32 %conv, 0, !dbg !6916
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6916

cond.true:                                        ; preds = %entry
  %3 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e.addr, align 8, !dbg !6918
  %e1 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %3, i32 0, i32 2, !dbg !6919
  %4 = load %struct.BMEdge*, %struct.BMEdge** %e1, align 8, !dbg !6919
  %v1 = getelementptr inbounds %struct.BMEdge, %struct.BMEdge* %4, i32 0, i32 2, !dbg !6920
  %5 = load %struct.BMVert*, %struct.BMVert** %v1, align 8, !dbg !6920
  br label %cond.end, !dbg !6916

cond.false:                                       ; preds = %entry
  %6 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e.addr, align 8, !dbg !6921
  %e2 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %6, i32 0, i32 2, !dbg !6922
  %7 = load %struct.BMEdge*, %struct.BMEdge** %e2, align 8, !dbg !6922
  %v2 = getelementptr inbounds %struct.BMEdge, %struct.BMEdge* %7, i32 0, i32 3, !dbg !6923
  %8 = load %struct.BMVert*, %struct.BMVert** %v2, align 8, !dbg !6923
  br label %cond.end, !dbg !6916

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.BMVert* [ %5, %cond.true ], [ %8, %cond.false ], !dbg !6916
  %call = call %struct.BevVert* @find_bevvert(%struct.BevelParams* %0, %struct.BMVert* %cond), !dbg !6924
  store %struct.BevVert* %call, %struct.BevVert** %bvo, align 8, !dbg !6925
  %9 = load %struct.BevVert*, %struct.BevVert** %bvo, align 8, !dbg !6926
  %tobool3 = icmp ne %struct.BevVert* %9, null, !dbg !6926
  br i1 %tobool3, label %if.then, label %if.else, !dbg !6928

if.then:                                          ; preds = %cond.end
  %10 = load %struct.BevVert*, %struct.BevVert** %bvo, align 8, !dbg !6929
  %visited = getelementptr inbounds %struct.BevVert, %struct.BevVert* %10, i32 0, i32 6, !dbg !6930
  %11 = load i8, i8* %visited, align 1, !dbg !6930
  store i8 %11, i8* %retval, align 1, !dbg !6931
  br label %return, !dbg !6931

if.else:                                          ; preds = %cond.end
  store i8 0, i8* %retval, align 1, !dbg !6932
  br label %return, !dbg !6932

return:                                           ; preds = %if.else, %if.then
  %12 = load i8, i8* %retval, align 1, !dbg !6933
  ret i8 %12, !dbg !6933
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @offset_meet_edge(%struct.EdgeHalf* %e1, %struct.EdgeHalf* %e2, %struct.BMVert* %v, float* %meetco, float* %r_angle) #0 !dbg !6934 {
entry:
  %retval = alloca i8, align 1
  %e1.addr = alloca %struct.EdgeHalf*, align 8
  %e2.addr = alloca %struct.EdgeHalf*, align 8
  %v.addr = alloca %struct.BMVert*, align 8
  %meetco.addr = alloca float*, align 8
  %r_angle.addr = alloca float*, align 8
  %dir1 = alloca [3 x float], align 4
  %dir2 = alloca [3 x float], align 4
  %fno = alloca [3 x float], align 4
  %ang = alloca float, align 4
  %sinang = alloca float, align 4
  store %struct.EdgeHalf* %e1, %struct.EdgeHalf** %e1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.EdgeHalf** %e1.addr, metadata !6937, metadata !DIExpression()), !dbg !6938
  store %struct.EdgeHalf* %e2, %struct.EdgeHalf** %e2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.EdgeHalf** %e2.addr, metadata !6939, metadata !DIExpression()), !dbg !6940
  store %struct.BMVert* %v, %struct.BMVert** %v.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMVert** %v.addr, metadata !6941, metadata !DIExpression()), !dbg !6942
  store float* %meetco, float** %meetco.addr, align 8
  call void @llvm.dbg.declare(metadata float** %meetco.addr, metadata !6943, metadata !DIExpression()), !dbg !6944
  store float* %r_angle, float** %r_angle.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r_angle.addr, metadata !6945, metadata !DIExpression()), !dbg !6946
  call void @llvm.dbg.declare(metadata [3 x float]* %dir1, metadata !6947, metadata !DIExpression()), !dbg !6948
  call void @llvm.dbg.declare(metadata [3 x float]* %dir2, metadata !6949, metadata !DIExpression()), !dbg !6950
  call void @llvm.dbg.declare(metadata [3 x float]* %fno, metadata !6951, metadata !DIExpression()), !dbg !6952
  call void @llvm.dbg.declare(metadata float* %ang, metadata !6953, metadata !DIExpression()), !dbg !6954
  call void @llvm.dbg.declare(metadata float* %sinang, metadata !6955, metadata !DIExpression()), !dbg !6956
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %dir1, i64 0, i64 0, !dbg !6957
  %0 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e1.addr, align 8, !dbg !6958
  %e = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %0, i32 0, i32 2, !dbg !6959
  %1 = load %struct.BMEdge*, %struct.BMEdge** %e, align 8, !dbg !6959
  %2 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !6960
  %call = call %struct.BMVert* @BM_edge_other_vert(%struct.BMEdge* %1, %struct.BMVert* %2), !dbg !6961
  %co = getelementptr inbounds %struct.BMVert, %struct.BMVert* %call, i32 0, i32 2, !dbg !6962
  %arraydecay1 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !6961
  %3 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !6963
  %co2 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %3, i32 0, i32 2, !dbg !6964
  %arraydecay3 = getelementptr inbounds [3 x float], [3 x float]* %co2, i64 0, i64 0, !dbg !6963
  call void @sub_v3_v3v3(float* %arraydecay, float* %arraydecay1, float* %arraydecay3), !dbg !6965
  %arraydecay4 = getelementptr inbounds [3 x float], [3 x float]* %dir2, i64 0, i64 0, !dbg !6966
  %4 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e2.addr, align 8, !dbg !6967
  %e5 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %4, i32 0, i32 2, !dbg !6968
  %5 = load %struct.BMEdge*, %struct.BMEdge** %e5, align 8, !dbg !6968
  %6 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !6969
  %call6 = call %struct.BMVert* @BM_edge_other_vert(%struct.BMEdge* %5, %struct.BMVert* %6), !dbg !6970
  %co7 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %call6, i32 0, i32 2, !dbg !6971
  %arraydecay8 = getelementptr inbounds [3 x float], [3 x float]* %co7, i64 0, i64 0, !dbg !6970
  %7 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !6972
  %co9 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %7, i32 0, i32 2, !dbg !6973
  %arraydecay10 = getelementptr inbounds [3 x float], [3 x float]* %co9, i64 0, i64 0, !dbg !6972
  call void @sub_v3_v3v3(float* %arraydecay4, float* %arraydecay8, float* %arraydecay10), !dbg !6974
  %arraydecay11 = getelementptr inbounds [3 x float], [3 x float]* %dir1, i64 0, i64 0, !dbg !6975
  %call12 = call float @normalize_v3(float* %arraydecay11), !dbg !6976
  %arraydecay13 = getelementptr inbounds [3 x float], [3 x float]* %dir2, i64 0, i64 0, !dbg !6977
  %call14 = call float @normalize_v3(float* %arraydecay13), !dbg !6978
  %arraydecay15 = getelementptr inbounds [3 x float], [3 x float]* %dir1, i64 0, i64 0, !dbg !6979
  %arraydecay16 = getelementptr inbounds [3 x float], [3 x float]* %dir2, i64 0, i64 0, !dbg !6980
  %call17 = call float @angle_normalized_v3v3(float* %arraydecay15, float* %arraydecay16), !dbg !6981
  store float %call17, float* %ang, align 4, !dbg !6982
  %8 = load float, float* %ang, align 4, !dbg !6983
  %cmp = fcmp olt float %8, 0x3EB0C6F7A0000000, !dbg !6985
  br i1 %cmp, label %if.then, label %if.end19, !dbg !6986

if.then:                                          ; preds = %entry
  %9 = load float*, float** %r_angle.addr, align 8, !dbg !6987
  %tobool = icmp ne float* %9, null, !dbg !6987
  br i1 %tobool, label %if.then18, label %if.end, !dbg !6990

if.then18:                                        ; preds = %if.then
  %10 = load float*, float** %r_angle.addr, align 8, !dbg !6991
  store float 0.000000e+00, float* %10, align 4, !dbg !6992
  br label %if.end, !dbg !6993

if.end:                                           ; preds = %if.then18, %if.then
  store i8 0, i8* %retval, align 1, !dbg !6994
  br label %return, !dbg !6994

if.end19:                                         ; preds = %entry
  %arraydecay20 = getelementptr inbounds [3 x float], [3 x float]* %fno, i64 0, i64 0, !dbg !6995
  %arraydecay21 = getelementptr inbounds [3 x float], [3 x float]* %dir1, i64 0, i64 0, !dbg !6996
  %arraydecay22 = getelementptr inbounds [3 x float], [3 x float]* %dir2, i64 0, i64 0, !dbg !6997
  call void @cross_v3_v3v3(float* %arraydecay20, float* %arraydecay21, float* %arraydecay22), !dbg !6998
  %arraydecay23 = getelementptr inbounds [3 x float], [3 x float]* %fno, i64 0, i64 0, !dbg !6999
  %11 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !7001
  %no = getelementptr inbounds %struct.BMVert, %struct.BMVert* %11, i32 0, i32 3, !dbg !7002
  %arraydecay24 = getelementptr inbounds [3 x float], [3 x float]* %no, i64 0, i64 0, !dbg !7001
  %call25 = call float @dot_v3v3(float* %arraydecay23, float* %arraydecay24), !dbg !7003
  %cmp26 = fcmp olt float %call25, 0.000000e+00, !dbg !7004
  br i1 %cmp26, label %if.then27, label %if.end28, !dbg !7005

if.then27:                                        ; preds = %if.end19
  %12 = load float, float* %ang, align 4, !dbg !7006
  %sub = fsub float 0x401921FB60000000, %12, !dbg !7007
  store float %sub, float* %ang, align 4, !dbg !7008
  br label %if.end28, !dbg !7009

if.end28:                                         ; preds = %if.then27, %if.end19
  %13 = load float*, float** %r_angle.addr, align 8, !dbg !7010
  %tobool29 = icmp ne float* %13, null, !dbg !7010
  br i1 %tobool29, label %if.then30, label %if.end31, !dbg !7012

if.then30:                                        ; preds = %if.end28
  %14 = load float, float* %ang, align 4, !dbg !7013
  %15 = load float*, float** %r_angle.addr, align 8, !dbg !7014
  store float %14, float* %15, align 4, !dbg !7015
  br label %if.end31, !dbg !7016

if.end31:                                         ; preds = %if.then30, %if.end28
  %16 = load float, float* %ang, align 4, !dbg !7017
  %sub32 = fsub float %16, 0x400921FB60000000, !dbg !7019
  %cmp33 = fcmp ogt float %sub32, 0x3EB0C6F7A0000000, !dbg !7020
  br i1 %cmp33, label %if.then34, label %if.end35, !dbg !7021

if.then34:                                        ; preds = %if.end31
  store i8 0, i8* %retval, align 1, !dbg !7022
  br label %return, !dbg !7022

if.end35:                                         ; preds = %if.end31
  %17 = load float, float* %ang, align 4, !dbg !7023
  %call36 = call float @sinf(float %17) #5, !dbg !7024
  store float %call36, float* %sinang, align 4, !dbg !7025
  %18 = load float*, float** %meetco.addr, align 8, !dbg !7026
  %19 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !7027
  %co37 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %19, i32 0, i32 2, !dbg !7028
  %arraydecay38 = getelementptr inbounds [3 x float], [3 x float]* %co37, i64 0, i64 0, !dbg !7027
  call void @copy_v3_v3(float* %18, float* %arraydecay38), !dbg !7029
  %20 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e1.addr, align 8, !dbg !7030
  %offset_r = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %20, i32 0, i32 9, !dbg !7032
  %21 = load float, float* %offset_r, align 8, !dbg !7032
  %cmp39 = fcmp oeq float %21, 0.000000e+00, !dbg !7033
  br i1 %cmp39, label %if.then40, label %if.else, !dbg !7034

if.then40:                                        ; preds = %if.end35
  %22 = load float*, float** %meetco.addr, align 8, !dbg !7035
  %arraydecay41 = getelementptr inbounds [3 x float], [3 x float]* %dir1, i64 0, i64 0, !dbg !7036
  %23 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e2.addr, align 8, !dbg !7037
  %offset_l = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %23, i32 0, i32 8, !dbg !7038
  %24 = load float, float* %offset_l, align 4, !dbg !7038
  %25 = load float, float* %sinang, align 4, !dbg !7039
  %div = fdiv float %24, %25, !dbg !7040
  call void @madd_v3_v3fl(float* %22, float* %arraydecay41, float %div), !dbg !7041
  br label %if.end45, !dbg !7041

if.else:                                          ; preds = %if.end35
  %26 = load float*, float** %meetco.addr, align 8, !dbg !7042
  %arraydecay42 = getelementptr inbounds [3 x float], [3 x float]* %dir2, i64 0, i64 0, !dbg !7043
  %27 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e1.addr, align 8, !dbg !7044
  %offset_r43 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %27, i32 0, i32 9, !dbg !7045
  %28 = load float, float* %offset_r43, align 8, !dbg !7045
  %29 = load float, float* %sinang, align 4, !dbg !7046
  %div44 = fdiv float %28, %29, !dbg !7047
  call void @madd_v3_v3fl(float* %26, float* %arraydecay42, float %div44), !dbg !7048
  br label %if.end45

if.end45:                                         ; preds = %if.else, %if.then40
  store i8 1, i8* %retval, align 1, !dbg !7049
  br label %return, !dbg !7049

return:                                           ; preds = %if.end45, %if.then34, %if.end
  %30 = load i8, i8* %retval, align 1, !dbg !7050
  ret i8 %30, !dbg !7050
}

; Function Attrs: noinline nounwind uwtable
define internal float @len_v3(float* %a) #0 !dbg !7051 {
entry:
  %a.addr = alloca float*, align 8
  store float* %a, float** %a.addr, align 8
  call void @llvm.dbg.declare(metadata float** %a.addr, metadata !7054, metadata !DIExpression()), !dbg !7055
  %0 = load float*, float** %a.addr, align 8, !dbg !7056
  %1 = load float*, float** %a.addr, align 8, !dbg !7057
  %call = call float @dot_v3v3(float* %0, float* %1), !dbg !7058
  %call1 = call float @sqrtf(float %call) #5, !dbg !7059
  ret float %call1, !dbg !7060
}

declare dso_local void @BLI_ghashIterator_init(%struct.GHashIterator*, %struct.GHash*) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @BLI_ghashIterator_done(%struct.GHashIterator* %ghi) #0 !dbg !7061 {
entry:
  %ghi.addr = alloca %struct.GHashIterator*, align 8
  store %struct.GHashIterator* %ghi, %struct.GHashIterator** %ghi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.GHashIterator** %ghi.addr, metadata !7065, metadata !DIExpression()), !dbg !7066
  %0 = load %struct.GHashIterator*, %struct.GHashIterator** %ghi.addr, align 8, !dbg !7067
  %curEntry = getelementptr inbounds %struct.GHashIterator, %struct.GHashIterator* %0, i32 0, i32 1, !dbg !7068
  %1 = load %struct.Entry*, %struct.Entry** %curEntry, align 8, !dbg !7068
  %tobool = icmp ne %struct.Entry* %1, null, !dbg !7069
  %lnot = xor i1 %tobool, true, !dbg !7069
  %lnot.ext = zext i1 %lnot to i32, !dbg !7069
  %conv = trunc i32 %lnot.ext to i8, !dbg !7069
  ret i8 %conv, !dbg !7070
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @BLI_ghashIterator_getValue(%struct.GHashIterator* %ghi) #0 !dbg !7071 {
entry:
  %ghi.addr = alloca %struct.GHashIterator*, align 8
  store %struct.GHashIterator* %ghi, %struct.GHashIterator** %ghi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.GHashIterator** %ghi.addr, metadata !7074, metadata !DIExpression()), !dbg !7075
  %0 = load %struct.GHashIterator*, %struct.GHashIterator** %ghi.addr, align 8, !dbg !7076
  %curEntry = getelementptr inbounds %struct.GHashIterator, %struct.GHashIterator* %0, i32 0, i32 1, !dbg !7077
  %1 = load %struct.Entry*, %struct.Entry** %curEntry, align 8, !dbg !7077
  %2 = bitcast %struct.Entry* %1 to %struct._gh_Entry*, !dbg !7078
  %val = getelementptr inbounds %struct._gh_Entry, %struct._gh_Entry* %2, i32 0, i32 2, !dbg !7078
  %3 = load i8*, i8** %val, align 8, !dbg !7078
  ret i8* %3, !dbg !7079
}

declare dso_local void @BLI_ghashIterator_step(%struct.GHashIterator*) #3

declare dso_local %struct._GSQueue* @BLI_gsqueue_new(i64) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @any_edge_half_offset_changed(%struct.BevVert* %bv) #0 !dbg !7080 {
entry:
  %retval = alloca i8, align 1
  %bv.addr = alloca %struct.BevVert*, align 8
  %i = alloca i32, align 4
  store %struct.BevVert* %bv, %struct.BevVert** %bv.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BevVert** %bv.addr, metadata !7083, metadata !DIExpression()), !dbg !7084
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7085, metadata !DIExpression()), !dbg !7086
  store i32 0, i32* %i, align 4, !dbg !7087
  br label %for.cond, !dbg !7089

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !7090
  %1 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !7092
  %edgecount = getelementptr inbounds %struct.BevVert, %struct.BevVert* %1, i32 0, i32 1, !dbg !7093
  %2 = load i32, i32* %edgecount, align 8, !dbg !7093
  %cmp = icmp slt i32 %0, %2, !dbg !7094
  br i1 %cmp, label %for.body, label %for.end, !dbg !7095

for.body:                                         ; preds = %for.cond
  %3 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !7096
  %edges = getelementptr inbounds %struct.BevVert, %struct.BevVert* %3, i32 0, i32 7, !dbg !7099
  %4 = load %struct.EdgeHalf*, %struct.EdgeHalf** %edges, align 8, !dbg !7099
  %5 = load i32, i32* %i, align 4, !dbg !7100
  %idxprom = sext i32 %5 to i64, !dbg !7096
  %arrayidx = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %4, i64 %idxprom, !dbg !7096
  %call = call zeroext i8 @edge_half_offset_changed(%struct.EdgeHalf* %arrayidx), !dbg !7101
  %tobool = icmp ne i8 %call, 0, !dbg !7101
  br i1 %tobool, label %if.then, label %if.end, !dbg !7102

if.then:                                          ; preds = %for.body
  store i8 1, i8* %retval, align 1, !dbg !7103
  br label %return, !dbg !7103

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !7104

for.inc:                                          ; preds = %if.end
  %6 = load i32, i32* %i, align 4, !dbg !7105
  %inc = add nsw i32 %6, 1, !dbg !7105
  store i32 %inc, i32* %i, align 4, !dbg !7105
  br label %for.cond, !dbg !7106, !llvm.loop !7107

for.end:                                          ; preds = %for.cond
  store i8 0, i8* %retval, align 1, !dbg !7109
  br label %return, !dbg !7109

return:                                           ; preds = %for.end, %if.then
  %7 = load i8, i8* %retval, align 1, !dbg !7110
  ret i8 %7, !dbg !7110
}

declare dso_local void @BLI_gsqueue_push(%struct._GSQueue*, i8*) #3

declare dso_local zeroext i8 @BLI_gsqueue_is_empty(%struct._GSQueue*) #3

declare dso_local void @BLI_gsqueue_pop(%struct._GSQueue*, i8*) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @edge_half_offset_changed(%struct.EdgeHalf* %e) #0 !dbg !7111 {
entry:
  %e.addr = alloca %struct.EdgeHalf*, align 8
  store %struct.EdgeHalf* %e, %struct.EdgeHalf** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.EdgeHalf** %e.addr, metadata !7114, metadata !DIExpression()), !dbg !7115
  %0 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e.addr, align 8, !dbg !7116
  %offset_l = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %0, i32 0, i32 8, !dbg !7117
  %1 = load float, float* %offset_l, align 4, !dbg !7117
  %2 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e.addr, align 8, !dbg !7118
  %offset_l_spec = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %2, i32 0, i32 10, !dbg !7119
  %3 = load float, float* %offset_l_spec, align 4, !dbg !7119
  %cmp = fcmp une float %1, %3, !dbg !7120
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !7121

lor.rhs:                                          ; preds = %entry
  %4 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e.addr, align 8, !dbg !7122
  %offset_r = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %4, i32 0, i32 9, !dbg !7123
  %5 = load float, float* %offset_r, align 8, !dbg !7123
  %6 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e.addr, align 8, !dbg !7124
  %offset_r_spec = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %6, i32 0, i32 11, !dbg !7125
  %7 = load float, float* %offset_r_spec, align 8, !dbg !7125
  %cmp1 = fcmp une float %5, %7, !dbg !7126
  br label %lor.end, !dbg !7121

lor.end:                                          ; preds = %lor.rhs, %entry
  %8 = phi i1 [ true, %entry ], [ %cmp1, %lor.rhs ]
  %lor.ext = zext i1 %8 to i32, !dbg !7121
  %conv = trunc i32 %lor.ext to i8, !dbg !7116
  ret i8 %conv, !dbg !7127
}

declare dso_local void @BLI_gsqueue_free(%struct._GSQueue*) #3

declare dso_local i8* @BLI_ghash_lookup(%struct.GHash*, i8*) #3

; Function Attrs: noinline nounwind uwtable
define internal %struct.NewVert* @mesh_vert(%struct.VMesh* %vm, i32 %i, i32 %j, i32 %k) #0 !dbg !7128 {
entry:
  %vm.addr = alloca %struct.VMesh*, align 8
  %i.addr = alloca i32, align 4
  %j.addr = alloca i32, align 4
  %k.addr = alloca i32, align 4
  %nj = alloca i32, align 4
  %nk = alloca i32, align 4
  store %struct.VMesh* %vm, %struct.VMesh** %vm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VMesh** %vm.addr, metadata !7131, metadata !DIExpression()), !dbg !7132
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !7133, metadata !DIExpression()), !dbg !7134
  store i32 %j, i32* %j.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %j.addr, metadata !7135, metadata !DIExpression()), !dbg !7136
  store i32 %k, i32* %k.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %k.addr, metadata !7137, metadata !DIExpression()), !dbg !7138
  call void @llvm.dbg.declare(metadata i32* %nj, metadata !7139, metadata !DIExpression()), !dbg !7140
  %0 = load %struct.VMesh*, %struct.VMesh** %vm.addr, align 8, !dbg !7141
  %seg = getelementptr inbounds %struct.VMesh, %struct.VMesh* %0, i32 0, i32 3, !dbg !7142
  %1 = load i32, i32* %seg, align 4, !dbg !7142
  %div = sdiv i32 %1, 2, !dbg !7143
  %add = add nsw i32 %div, 1, !dbg !7144
  store i32 %add, i32* %nj, align 4, !dbg !7140
  call void @llvm.dbg.declare(metadata i32* %nk, metadata !7145, metadata !DIExpression()), !dbg !7146
  %2 = load %struct.VMesh*, %struct.VMesh** %vm.addr, align 8, !dbg !7147
  %seg1 = getelementptr inbounds %struct.VMesh, %struct.VMesh* %2, i32 0, i32 3, !dbg !7148
  %3 = load i32, i32* %seg1, align 4, !dbg !7148
  %add2 = add nsw i32 %3, 1, !dbg !7149
  store i32 %add2, i32* %nk, align 4, !dbg !7146
  %4 = load %struct.VMesh*, %struct.VMesh** %vm.addr, align 8, !dbg !7150
  %mesh = getelementptr inbounds %struct.VMesh, %struct.VMesh* %4, i32 0, i32 0, !dbg !7151
  %5 = load %struct.NewVert*, %struct.NewVert** %mesh, align 8, !dbg !7151
  %6 = load i32, i32* %i.addr, align 4, !dbg !7152
  %7 = load i32, i32* %nk, align 4, !dbg !7153
  %mul = mul nsw i32 %6, %7, !dbg !7154
  %8 = load i32, i32* %nj, align 4, !dbg !7155
  %mul3 = mul nsw i32 %mul, %8, !dbg !7156
  %9 = load i32, i32* %j.addr, align 4, !dbg !7157
  %10 = load i32, i32* %nk, align 4, !dbg !7158
  %mul4 = mul nsw i32 %9, %10, !dbg !7159
  %add5 = add nsw i32 %mul3, %mul4, !dbg !7160
  %11 = load i32, i32* %k.addr, align 4, !dbg !7161
  %add6 = add nsw i32 %add5, %11, !dbg !7162
  %idxprom = sext i32 %add6 to i64, !dbg !7150
  %arrayidx = getelementptr inbounds %struct.NewVert, %struct.NewVert* %5, i64 %idxprom, !dbg !7150
  ret %struct.NewVert* %arrayidx, !dbg !7163
}

; Function Attrs: noinline nounwind uwtable
define internal void @create_mesh_bmvert(%struct.BMesh* %bm, %struct.VMesh* %vm, i32 %i, i32 %j, i32 %k, %struct.BMVert* %eg) #0 !dbg !7164 {
entry:
  %bm.addr = alloca %struct.BMesh*, align 8
  %vm.addr = alloca %struct.VMesh*, align 8
  %i.addr = alloca i32, align 4
  %j.addr = alloca i32, align 4
  %k.addr = alloca i32, align 4
  %eg.addr = alloca %struct.BMVert*, align 8
  %nv = alloca %struct.NewVert*, align 8
  store %struct.BMesh* %bm, %struct.BMesh** %bm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMesh** %bm.addr, metadata !7167, metadata !DIExpression()), !dbg !7168
  store %struct.VMesh* %vm, %struct.VMesh** %vm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VMesh** %vm.addr, metadata !7169, metadata !DIExpression()), !dbg !7170
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !7171, metadata !DIExpression()), !dbg !7172
  store i32 %j, i32* %j.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %j.addr, metadata !7173, metadata !DIExpression()), !dbg !7174
  store i32 %k, i32* %k.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %k.addr, metadata !7175, metadata !DIExpression()), !dbg !7176
  store %struct.BMVert* %eg, %struct.BMVert** %eg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMVert** %eg.addr, metadata !7177, metadata !DIExpression()), !dbg !7178
  call void @llvm.dbg.declare(metadata %struct.NewVert** %nv, metadata !7179, metadata !DIExpression()), !dbg !7180
  %0 = load %struct.VMesh*, %struct.VMesh** %vm.addr, align 8, !dbg !7181
  %1 = load i32, i32* %i.addr, align 4, !dbg !7182
  %2 = load i32, i32* %j.addr, align 4, !dbg !7183
  %3 = load i32, i32* %k.addr, align 4, !dbg !7184
  %call = call %struct.NewVert* @mesh_vert(%struct.VMesh* %0, i32 %1, i32 %2, i32 %3), !dbg !7185
  store %struct.NewVert* %call, %struct.NewVert** %nv, align 8, !dbg !7180
  %4 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !7186
  %5 = load %struct.NewVert*, %struct.NewVert** %nv, align 8, !dbg !7187
  %co = getelementptr inbounds %struct.NewVert, %struct.NewVert* %5, i32 0, i32 1, !dbg !7188
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !7187
  %6 = load %struct.BMVert*, %struct.BMVert** %eg.addr, align 8, !dbg !7189
  %call1 = call %struct.BMVert* @BM_vert_create(%struct.BMesh* %4, float* %arraydecay, %struct.BMVert* %6, i32 0), !dbg !7190
  %7 = load %struct.NewVert*, %struct.NewVert** %nv, align 8, !dbg !7191
  %v = getelementptr inbounds %struct.NewVert, %struct.NewVert* %7, i32 0, i32 0, !dbg !7192
  store %struct.BMVert* %call1, %struct.BMVert** %v, align 8, !dbg !7193
  %8 = load %struct.NewVert*, %struct.NewVert** %nv, align 8, !dbg !7194
  %v2 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %8, i32 0, i32 0, !dbg !7194
  %9 = load %struct.BMVert*, %struct.BMVert** %v2, align 8, !dbg !7194
  %head = getelementptr inbounds %struct.BMVert, %struct.BMVert* %9, i32 0, i32 0, !dbg !7194
  call void @_bm_elem_flag_disable(%struct.BMHeader* %head, i8 zeroext 16), !dbg !7194
  ret void, !dbg !7195
}

; Function Attrs: noinline nounwind uwtable
define internal void @move_weld_profile_planes(%struct.BevVert* %bv, %struct.BoundVert* %bndv1, %struct.BoundVert* %bndv2) #0 !dbg !7196 {
entry:
  %bv.addr = alloca %struct.BevVert*, align 8
  %bndv1.addr = alloca %struct.BoundVert*, align 8
  %bndv2.addr = alloca %struct.BoundVert*, align 8
  %d1 = alloca [3 x float], align 4
  %d2 = alloca [3 x float], align 4
  %no = alloca [3 x float], align 4
  %no2 = alloca [3 x float], align 4
  %no3 = alloca [3 x float], align 4
  %dot1 = alloca float, align 4
  %dot2 = alloca float, align 4
  %l1 = alloca float, align 4
  %l2 = alloca float, align 4
  %l3 = alloca float, align 4
  store %struct.BevVert* %bv, %struct.BevVert** %bv.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BevVert** %bv.addr, metadata !7199, metadata !DIExpression()), !dbg !7200
  store %struct.BoundVert* %bndv1, %struct.BoundVert** %bndv1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BoundVert** %bndv1.addr, metadata !7201, metadata !DIExpression()), !dbg !7202
  store %struct.BoundVert* %bndv2, %struct.BoundVert** %bndv2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BoundVert** %bndv2.addr, metadata !7203, metadata !DIExpression()), !dbg !7204
  call void @llvm.dbg.declare(metadata [3 x float]* %d1, metadata !7205, metadata !DIExpression()), !dbg !7206
  call void @llvm.dbg.declare(metadata [3 x float]* %d2, metadata !7207, metadata !DIExpression()), !dbg !7208
  call void @llvm.dbg.declare(metadata [3 x float]* %no, metadata !7209, metadata !DIExpression()), !dbg !7210
  call void @llvm.dbg.declare(metadata [3 x float]* %no2, metadata !7211, metadata !DIExpression()), !dbg !7212
  call void @llvm.dbg.declare(metadata [3 x float]* %no3, metadata !7213, metadata !DIExpression()), !dbg !7214
  call void @llvm.dbg.declare(metadata float* %dot1, metadata !7215, metadata !DIExpression()), !dbg !7216
  call void @llvm.dbg.declare(metadata float* %dot2, metadata !7217, metadata !DIExpression()), !dbg !7218
  call void @llvm.dbg.declare(metadata float* %l1, metadata !7219, metadata !DIExpression()), !dbg !7220
  call void @llvm.dbg.declare(metadata float* %l2, metadata !7221, metadata !DIExpression()), !dbg !7222
  call void @llvm.dbg.declare(metadata float* %l3, metadata !7223, metadata !DIExpression()), !dbg !7224
  %0 = load %struct.BoundVert*, %struct.BoundVert** %bndv1.addr, align 8, !dbg !7225
  %profile = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %0, i32 0, i32 7, !dbg !7227
  %proj_dir = getelementptr inbounds %struct.Profile, %struct.Profile* %profile, i32 0, i32 6, !dbg !7228
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %proj_dir, i64 0, i64 0, !dbg !7225
  %call = call zeroext i8 @is_zero_v3(float* %arraydecay), !dbg !7229
  %conv = zext i8 %call to i32, !dbg !7229
  %tobool = icmp ne i32 %conv, 0, !dbg !7229
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !7230

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.BoundVert*, %struct.BoundVert** %bndv2.addr, align 8, !dbg !7231
  %profile1 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %1, i32 0, i32 7, !dbg !7232
  %proj_dir2 = getelementptr inbounds %struct.Profile, %struct.Profile* %profile1, i32 0, i32 6, !dbg !7233
  %arraydecay3 = getelementptr inbounds [3 x float], [3 x float]* %proj_dir2, i64 0, i64 0, !dbg !7231
  %call4 = call zeroext i8 @is_zero_v3(float* %arraydecay3), !dbg !7234
  %conv5 = zext i8 %call4 to i32, !dbg !7234
  %tobool6 = icmp ne i32 %conv5, 0, !dbg !7234
  br i1 %tobool6, label %if.then, label %if.end, !dbg !7235

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %if.end66, !dbg !7236

if.end:                                           ; preds = %lor.lhs.false
  %arraydecay7 = getelementptr inbounds [3 x float], [3 x float]* %d1, i64 0, i64 0, !dbg !7237
  %2 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !7238
  %v = getelementptr inbounds %struct.BevVert, %struct.BevVert* %2, i32 0, i32 0, !dbg !7239
  %3 = load %struct.BMVert*, %struct.BMVert** %v, align 8, !dbg !7239
  %co = getelementptr inbounds %struct.BMVert, %struct.BMVert* %3, i32 0, i32 2, !dbg !7240
  %arraydecay8 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !7238
  %4 = load %struct.BoundVert*, %struct.BoundVert** %bndv1.addr, align 8, !dbg !7241
  %nv = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %4, i32 0, i32 2, !dbg !7242
  %co9 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %nv, i32 0, i32 1, !dbg !7243
  %arraydecay10 = getelementptr inbounds [3 x float], [3 x float]* %co9, i64 0, i64 0, !dbg !7241
  call void @sub_v3_v3v3(float* %arraydecay7, float* %arraydecay8, float* %arraydecay10), !dbg !7244
  %arraydecay11 = getelementptr inbounds [3 x float], [3 x float]* %d2, i64 0, i64 0, !dbg !7245
  %5 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !7246
  %v12 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %5, i32 0, i32 0, !dbg !7247
  %6 = load %struct.BMVert*, %struct.BMVert** %v12, align 8, !dbg !7247
  %co13 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %6, i32 0, i32 2, !dbg !7248
  %arraydecay14 = getelementptr inbounds [3 x float], [3 x float]* %co13, i64 0, i64 0, !dbg !7246
  %7 = load %struct.BoundVert*, %struct.BoundVert** %bndv2.addr, align 8, !dbg !7249
  %nv15 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %7, i32 0, i32 2, !dbg !7250
  %co16 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %nv15, i32 0, i32 1, !dbg !7251
  %arraydecay17 = getelementptr inbounds [3 x float], [3 x float]* %co16, i64 0, i64 0, !dbg !7249
  call void @sub_v3_v3v3(float* %arraydecay11, float* %arraydecay14, float* %arraydecay17), !dbg !7252
  %arraydecay18 = getelementptr inbounds [3 x float], [3 x float]* %no, i64 0, i64 0, !dbg !7253
  %arraydecay19 = getelementptr inbounds [3 x float], [3 x float]* %d1, i64 0, i64 0, !dbg !7254
  %arraydecay20 = getelementptr inbounds [3 x float], [3 x float]* %d2, i64 0, i64 0, !dbg !7255
  call void @cross_v3_v3v3(float* %arraydecay18, float* %arraydecay19, float* %arraydecay20), !dbg !7256
  %arraydecay21 = getelementptr inbounds [3 x float], [3 x float]* %no, i64 0, i64 0, !dbg !7257
  %call22 = call float @normalize_v3(float* %arraydecay21), !dbg !7258
  store float %call22, float* %l1, align 4, !dbg !7259
  %arraydecay23 = getelementptr inbounds [3 x float], [3 x float]* %no2, i64 0, i64 0, !dbg !7260
  %arraydecay24 = getelementptr inbounds [3 x float], [3 x float]* %d1, i64 0, i64 0, !dbg !7261
  %8 = load %struct.BoundVert*, %struct.BoundVert** %bndv1.addr, align 8, !dbg !7262
  %profile25 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %8, i32 0, i32 7, !dbg !7263
  %proj_dir26 = getelementptr inbounds %struct.Profile, %struct.Profile* %profile25, i32 0, i32 6, !dbg !7264
  %arraydecay27 = getelementptr inbounds [3 x float], [3 x float]* %proj_dir26, i64 0, i64 0, !dbg !7262
  call void @cross_v3_v3v3(float* %arraydecay23, float* %arraydecay24, float* %arraydecay27), !dbg !7265
  %arraydecay28 = getelementptr inbounds [3 x float], [3 x float]* %no2, i64 0, i64 0, !dbg !7266
  %call29 = call float @normalize_v3(float* %arraydecay28), !dbg !7267
  store float %call29, float* %l2, align 4, !dbg !7268
  %arraydecay30 = getelementptr inbounds [3 x float], [3 x float]* %no3, i64 0, i64 0, !dbg !7269
  %arraydecay31 = getelementptr inbounds [3 x float], [3 x float]* %d2, i64 0, i64 0, !dbg !7270
  %9 = load %struct.BoundVert*, %struct.BoundVert** %bndv2.addr, align 8, !dbg !7271
  %profile32 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %9, i32 0, i32 7, !dbg !7272
  %proj_dir33 = getelementptr inbounds %struct.Profile, %struct.Profile* %profile32, i32 0, i32 6, !dbg !7273
  %arraydecay34 = getelementptr inbounds [3 x float], [3 x float]* %proj_dir33, i64 0, i64 0, !dbg !7271
  call void @cross_v3_v3v3(float* %arraydecay30, float* %arraydecay31, float* %arraydecay34), !dbg !7274
  %arraydecay35 = getelementptr inbounds [3 x float], [3 x float]* %no3, i64 0, i64 0, !dbg !7275
  %call36 = call float @normalize_v3(float* %arraydecay35), !dbg !7276
  store float %call36, float* %l3, align 4, !dbg !7277
  %10 = load float, float* %l1, align 4, !dbg !7278
  %cmp = fcmp ogt float %10, 0x3EB0C6F7A0000000, !dbg !7280
  br i1 %cmp, label %land.lhs.true, label %if.end66, !dbg !7281

land.lhs.true:                                    ; preds = %if.end
  %11 = load float, float* %l2, align 4, !dbg !7282
  %cmp38 = fcmp ogt float %11, 0x3EB0C6F7A0000000, !dbg !7283
  br i1 %cmp38, label %if.then43, label %lor.lhs.false40, !dbg !7284

lor.lhs.false40:                                  ; preds = %land.lhs.true
  %12 = load float, float* %l3, align 4, !dbg !7285
  %cmp41 = fcmp ogt float %12, 0x3EB0C6F7A0000000, !dbg !7286
  br i1 %cmp41, label %if.then43, label %if.end66, !dbg !7287

if.then43:                                        ; preds = %lor.lhs.false40, %land.lhs.true
  %arraydecay44 = getelementptr inbounds [3 x float], [3 x float]* %no, i64 0, i64 0, !dbg !7288
  %arraydecay45 = getelementptr inbounds [3 x float], [3 x float]* %no2, i64 0, i64 0, !dbg !7290
  %call46 = call float @dot_v3v3(float* %arraydecay44, float* %arraydecay45), !dbg !7291
  %13 = call float @llvm.fabs.f32(float %call46), !dbg !7292
  store float %13, float* %dot1, align 4, !dbg !7293
  %arraydecay47 = getelementptr inbounds [3 x float], [3 x float]* %no, i64 0, i64 0, !dbg !7294
  %arraydecay48 = getelementptr inbounds [3 x float], [3 x float]* %no3, i64 0, i64 0, !dbg !7295
  %call49 = call float @dot_v3v3(float* %arraydecay47, float* %arraydecay48), !dbg !7296
  %14 = call float @llvm.fabs.f32(float %call49), !dbg !7297
  store float %14, float* %dot2, align 4, !dbg !7298
  %15 = load float, float* %dot1, align 4, !dbg !7299
  %sub = fsub float %15, 1.000000e+00, !dbg !7301
  %16 = call float @llvm.fabs.f32(float %sub), !dbg !7302
  %cmp50 = fcmp ogt float %16, 0x3EB0C6F7A0000000, !dbg !7303
  br i1 %cmp50, label %if.then52, label %if.end56, !dbg !7304

if.then52:                                        ; preds = %if.then43
  %17 = load %struct.BoundVert*, %struct.BoundVert** %bndv1.addr, align 8, !dbg !7305
  %profile53 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %17, i32 0, i32 7, !dbg !7306
  %plane_no = getelementptr inbounds %struct.Profile, %struct.Profile* %profile53, i32 0, i32 4, !dbg !7307
  %arraydecay54 = getelementptr inbounds [3 x float], [3 x float]* %plane_no, i64 0, i64 0, !dbg !7305
  %arraydecay55 = getelementptr inbounds [3 x float], [3 x float]* %no, i64 0, i64 0, !dbg !7308
  call void @copy_v3_v3(float* %arraydecay54, float* %arraydecay55), !dbg !7309
  br label %if.end56, !dbg !7309

if.end56:                                         ; preds = %if.then52, %if.then43
  %18 = load float, float* %dot2, align 4, !dbg !7310
  %sub57 = fsub float %18, 1.000000e+00, !dbg !7312
  %19 = call float @llvm.fabs.f32(float %sub57), !dbg !7313
  %cmp58 = fcmp ogt float %19, 0x3EB0C6F7A0000000, !dbg !7314
  br i1 %cmp58, label %if.then60, label %if.end65, !dbg !7315

if.then60:                                        ; preds = %if.end56
  %20 = load %struct.BoundVert*, %struct.BoundVert** %bndv2.addr, align 8, !dbg !7316
  %profile61 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %20, i32 0, i32 7, !dbg !7317
  %plane_no62 = getelementptr inbounds %struct.Profile, %struct.Profile* %profile61, i32 0, i32 4, !dbg !7318
  %arraydecay63 = getelementptr inbounds [3 x float], [3 x float]* %plane_no62, i64 0, i64 0, !dbg !7316
  %arraydecay64 = getelementptr inbounds [3 x float], [3 x float]* %no, i64 0, i64 0, !dbg !7319
  call void @copy_v3_v3(float* %arraydecay63, float* %arraydecay64), !dbg !7320
  br label %if.end65, !dbg !7320

if.end65:                                         ; preds = %if.then60, %if.end56
  br label %if.end66, !dbg !7321

if.end66:                                         ; preds = %if.then, %if.end65, %lor.lhs.false40, %if.end
  ret void, !dbg !7322
}

; Function Attrs: noinline nounwind uwtable
define internal void @copy_mesh_vert(%struct.VMesh* %vm, i32 %ito, i32 %jto, i32 %kto, i32 %ifrom, i32 %jfrom, i32 %kfrom) #0 !dbg !7323 {
entry:
  %vm.addr = alloca %struct.VMesh*, align 8
  %ito.addr = alloca i32, align 4
  %jto.addr = alloca i32, align 4
  %kto.addr = alloca i32, align 4
  %ifrom.addr = alloca i32, align 4
  %jfrom.addr = alloca i32, align 4
  %kfrom.addr = alloca i32, align 4
  %nvto = alloca %struct.NewVert*, align 8
  %nvfrom = alloca %struct.NewVert*, align 8
  store %struct.VMesh* %vm, %struct.VMesh** %vm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VMesh** %vm.addr, metadata !7326, metadata !DIExpression()), !dbg !7327
  store i32 %ito, i32* %ito.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ito.addr, metadata !7328, metadata !DIExpression()), !dbg !7329
  store i32 %jto, i32* %jto.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %jto.addr, metadata !7330, metadata !DIExpression()), !dbg !7331
  store i32 %kto, i32* %kto.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %kto.addr, metadata !7332, metadata !DIExpression()), !dbg !7333
  store i32 %ifrom, i32* %ifrom.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ifrom.addr, metadata !7334, metadata !DIExpression()), !dbg !7335
  store i32 %jfrom, i32* %jfrom.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %jfrom.addr, metadata !7336, metadata !DIExpression()), !dbg !7337
  store i32 %kfrom, i32* %kfrom.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %kfrom.addr, metadata !7338, metadata !DIExpression()), !dbg !7339
  call void @llvm.dbg.declare(metadata %struct.NewVert** %nvto, metadata !7340, metadata !DIExpression()), !dbg !7341
  call void @llvm.dbg.declare(metadata %struct.NewVert** %nvfrom, metadata !7342, metadata !DIExpression()), !dbg !7343
  %0 = load %struct.VMesh*, %struct.VMesh** %vm.addr, align 8, !dbg !7344
  %1 = load i32, i32* %ito.addr, align 4, !dbg !7345
  %2 = load i32, i32* %jto.addr, align 4, !dbg !7346
  %3 = load i32, i32* %kto.addr, align 4, !dbg !7347
  %call = call %struct.NewVert* @mesh_vert(%struct.VMesh* %0, i32 %1, i32 %2, i32 %3), !dbg !7348
  store %struct.NewVert* %call, %struct.NewVert** %nvto, align 8, !dbg !7349
  %4 = load %struct.VMesh*, %struct.VMesh** %vm.addr, align 8, !dbg !7350
  %5 = load i32, i32* %ifrom.addr, align 4, !dbg !7351
  %6 = load i32, i32* %jfrom.addr, align 4, !dbg !7352
  %7 = load i32, i32* %kfrom.addr, align 4, !dbg !7353
  %call1 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %4, i32 %5, i32 %6, i32 %7), !dbg !7354
  store %struct.NewVert* %call1, %struct.NewVert** %nvfrom, align 8, !dbg !7355
  %8 = load %struct.NewVert*, %struct.NewVert** %nvfrom, align 8, !dbg !7356
  %v = getelementptr inbounds %struct.NewVert, %struct.NewVert* %8, i32 0, i32 0, !dbg !7357
  %9 = load %struct.BMVert*, %struct.BMVert** %v, align 8, !dbg !7357
  %10 = load %struct.NewVert*, %struct.NewVert** %nvto, align 8, !dbg !7358
  %v2 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %10, i32 0, i32 0, !dbg !7359
  store %struct.BMVert* %9, %struct.BMVert** %v2, align 8, !dbg !7360
  %11 = load %struct.NewVert*, %struct.NewVert** %nvto, align 8, !dbg !7361
  %co = getelementptr inbounds %struct.NewVert, %struct.NewVert* %11, i32 0, i32 1, !dbg !7362
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !7361
  %12 = load %struct.NewVert*, %struct.NewVert** %nvfrom, align 8, !dbg !7363
  %co3 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %12, i32 0, i32 1, !dbg !7364
  %arraydecay4 = getelementptr inbounds [3 x float], [3 x float]* %co3, i64 0, i64 0, !dbg !7363
  call void @copy_v3_v3(float* %arraydecay, float* %arraydecay4), !dbg !7365
  ret void, !dbg !7366
}

; Function Attrs: noinline nounwind uwtable
define internal void @get_profile_point(%struct.BevelParams* %bp, %struct.Profile* %pro, i32 %i, i32 %n, float* %r_co) #0 !dbg !7367 {
entry:
  %bp.addr = alloca %struct.BevelParams*, align 8
  %pro.addr = alloca %struct.Profile*, align 8
  %i.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %r_co.addr = alloca float*, align 8
  %d = alloca i32, align 4
  store %struct.BevelParams* %bp, %struct.BevelParams** %bp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BevelParams** %bp.addr, metadata !7372, metadata !DIExpression()), !dbg !7373
  store %struct.Profile* %pro, %struct.Profile** %pro.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Profile** %pro.addr, metadata !7374, metadata !DIExpression()), !dbg !7375
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !7376, metadata !DIExpression()), !dbg !7377
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !7378, metadata !DIExpression()), !dbg !7379
  store float* %r_co, float** %r_co.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r_co.addr, metadata !7380, metadata !DIExpression()), !dbg !7381
  call void @llvm.dbg.declare(metadata i32* %d, metadata !7382, metadata !DIExpression()), !dbg !7383
  %0 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !7384
  %seg = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %0, i32 0, i32 5, !dbg !7386
  %1 = load i32, i32* %seg, align 8, !dbg !7386
  %cmp = icmp eq i32 %1, 1, !dbg !7387
  br i1 %cmp, label %if.then, label %if.else4, !dbg !7388

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %i.addr, align 4, !dbg !7389
  %cmp1 = icmp eq i32 %2, 0, !dbg !7392
  br i1 %cmp1, label %if.then2, label %if.else, !dbg !7393

if.then2:                                         ; preds = %if.then
  %3 = load float*, float** %r_co.addr, align 8, !dbg !7394
  %4 = load %struct.Profile*, %struct.Profile** %pro.addr, align 8, !dbg !7395
  %coa = getelementptr inbounds %struct.Profile, %struct.Profile* %4, i32 0, i32 1, !dbg !7396
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %coa, i64 0, i64 0, !dbg !7395
  call void @copy_v3_v3(float* %3, float* %arraydecay), !dbg !7397
  br label %if.end, !dbg !7397

if.else:                                          ; preds = %if.then
  %5 = load float*, float** %r_co.addr, align 8, !dbg !7398
  %6 = load %struct.Profile*, %struct.Profile** %pro.addr, align 8, !dbg !7399
  %cob = getelementptr inbounds %struct.Profile, %struct.Profile* %6, i32 0, i32 3, !dbg !7400
  %arraydecay3 = getelementptr inbounds [3 x float], [3 x float]* %cob, i64 0, i64 0, !dbg !7399
  call void @copy_v3_v3(float* %5, float* %arraydecay3), !dbg !7401
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then2
  br label %if.end14, !dbg !7402

if.else4:                                         ; preds = %entry
  %7 = load i32, i32* %n.addr, align 4, !dbg !7403
  %8 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !7406
  %seg5 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %8, i32 0, i32 5, !dbg !7407
  %9 = load i32, i32* %seg5, align 8, !dbg !7407
  %cmp6 = icmp eq i32 %7, %9, !dbg !7408
  br i1 %cmp6, label %if.then7, label %if.else8, !dbg !7409

if.then7:                                         ; preds = %if.else4
  %10 = load float*, float** %r_co.addr, align 8, !dbg !7410
  %11 = load %struct.Profile*, %struct.Profile** %pro.addr, align 8, !dbg !7412
  %prof_co = getelementptr inbounds %struct.Profile, %struct.Profile* %11, i32 0, i32 7, !dbg !7413
  %12 = load float*, float** %prof_co, align 8, !dbg !7413
  %13 = load i32, i32* %i.addr, align 4, !dbg !7414
  %mul = mul nsw i32 3, %13, !dbg !7415
  %idx.ext = sext i32 %mul to i64, !dbg !7416
  %add.ptr = getelementptr inbounds float, float* %12, i64 %idx.ext, !dbg !7416
  call void @copy_v3_v3(float* %10, float* %add.ptr), !dbg !7417
  br label %if.end13, !dbg !7418

if.else8:                                         ; preds = %if.else4
  %14 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !7419
  %pro_spacing = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %14, i32 0, i32 2, !dbg !7421
  %seg_2 = getelementptr inbounds %struct.ProfileSpacing, %struct.ProfileSpacing* %pro_spacing, i32 0, i32 2, !dbg !7422
  %15 = load i32, i32* %seg_2, align 8, !dbg !7422
  %16 = load i32, i32* %n.addr, align 4, !dbg !7423
  %div = sdiv i32 %15, %16, !dbg !7424
  store i32 %div, i32* %d, align 4, !dbg !7425
  %17 = load float*, float** %r_co.addr, align 8, !dbg !7426
  %18 = load %struct.Profile*, %struct.Profile** %pro.addr, align 8, !dbg !7427
  %prof_co_2 = getelementptr inbounds %struct.Profile, %struct.Profile* %18, i32 0, i32 8, !dbg !7428
  %19 = load float*, float** %prof_co_2, align 8, !dbg !7428
  %20 = load i32, i32* %i.addr, align 4, !dbg !7429
  %mul9 = mul nsw i32 3, %20, !dbg !7430
  %21 = load i32, i32* %d, align 4, !dbg !7431
  %mul10 = mul nsw i32 %mul9, %21, !dbg !7432
  %idx.ext11 = sext i32 %mul10 to i64, !dbg !7433
  %add.ptr12 = getelementptr inbounds float, float* %19, i64 %idx.ext11, !dbg !7433
  call void @copy_v3_v3(float* %17, float* %add.ptr12), !dbg !7434
  br label %if.end13

if.end13:                                         ; preds = %if.else8, %if.then7
  br label %if.end14

if.end14:                                         ; preds = %if.end13, %if.end
  ret void, !dbg !7435
}

declare dso_local i32 @BM_vert_face_count(%struct.BMVert*) #3

; Function Attrs: noinline nounwind uwtable
define internal void @bevel_build_one_wire(%struct.BMesh* %bm, %struct.BevVert* %bv) #0 !dbg !7436 {
entry:
  %bm.addr = alloca %struct.BMesh*, align 8
  %bv.addr = alloca %struct.BevVert*, align 8
  %vm = alloca %struct.VMesh*, align 8
  %v1 = alloca %struct.BMVert*, align 8
  %v2 = alloca %struct.BMVert*, align 8
  %e_eg = alloca %struct.BMEdge*, align 8
  store %struct.BMesh* %bm, %struct.BMesh** %bm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMesh** %bm.addr, metadata !7439, metadata !DIExpression()), !dbg !7440
  store %struct.BevVert* %bv, %struct.BevVert** %bv.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BevVert** %bv.addr, metadata !7441, metadata !DIExpression()), !dbg !7442
  call void @llvm.dbg.declare(metadata %struct.VMesh** %vm, metadata !7443, metadata !DIExpression()), !dbg !7444
  %0 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !7445
  %vmesh = getelementptr inbounds %struct.BevVert, %struct.BevVert* %0, i32 0, i32 9, !dbg !7446
  %1 = load %struct.VMesh*, %struct.VMesh** %vmesh, align 8, !dbg !7446
  store %struct.VMesh* %1, %struct.VMesh** %vm, align 8, !dbg !7444
  call void @llvm.dbg.declare(metadata %struct.BMVert** %v1, metadata !7447, metadata !DIExpression()), !dbg !7448
  call void @llvm.dbg.declare(metadata %struct.BMVert** %v2, metadata !7449, metadata !DIExpression()), !dbg !7450
  call void @llvm.dbg.declare(metadata %struct.BMEdge** %e_eg, metadata !7451, metadata !DIExpression()), !dbg !7452
  %2 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !7453
  %call = call %struct.NewVert* @mesh_vert(%struct.VMesh* %2, i32 0, i32 0, i32 0), !dbg !7454
  %v = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call, i32 0, i32 0, !dbg !7455
  %3 = load %struct.BMVert*, %struct.BMVert** %v, align 8, !dbg !7455
  store %struct.BMVert* %3, %struct.BMVert** %v1, align 8, !dbg !7456
  %4 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !7457
  %call1 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %4, i32 1, i32 0, i32 0), !dbg !7458
  %v3 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call1, i32 0, i32 0, !dbg !7459
  %5 = load %struct.BMVert*, %struct.BMVert** %v3, align 8, !dbg !7459
  store %struct.BMVert* %5, %struct.BMVert** %v2, align 8, !dbg !7460
  %6 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !7461
  %edges = getelementptr inbounds %struct.BevVert, %struct.BevVert* %6, i32 0, i32 7, !dbg !7462
  %7 = load %struct.EdgeHalf*, %struct.EdgeHalf** %edges, align 8, !dbg !7462
  %arrayidx = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %7, i64 0, !dbg !7461
  %e = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %arrayidx, i32 0, i32 2, !dbg !7463
  %8 = load %struct.BMEdge*, %struct.BMEdge** %e, align 8, !dbg !7463
  store %struct.BMEdge* %8, %struct.BMEdge** %e_eg, align 8, !dbg !7464
  %9 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !7465
  %10 = load %struct.BMVert*, %struct.BMVert** %v1, align 8, !dbg !7466
  %11 = load %struct.BMVert*, %struct.BMVert** %v2, align 8, !dbg !7467
  %12 = load %struct.BMEdge*, %struct.BMEdge** %e_eg, align 8, !dbg !7468
  %call4 = call %struct.BMEdge* @BM_edge_create(%struct.BMesh* %9, %struct.BMVert* %10, %struct.BMVert* %11, %struct.BMEdge* %12, i32 2), !dbg !7469
  ret void, !dbg !7470
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.BMFace* @bevel_build_poly(%struct.BevelParams* %bp, %struct.BMesh* %bm, %struct.BevVert* %bv) #0 !dbg !7471 {
entry:
  %bp.addr = alloca %struct.BevelParams*, align 8
  %bm.addr = alloca %struct.BMesh*, align 8
  %bv.addr = alloca %struct.BevVert*, align 8
  %f = alloca %struct.BMFace*, align 8
  %n = alloca i32, align 4
  %k = alloca i32, align 4
  %vm = alloca %struct.VMesh*, align 8
  %v = alloca %struct.BoundVert*, align 8
  %frep = alloca %struct.BMFace*, align 8
  %vv = alloca %struct.BMVert**, align 8
  %vf = alloca %struct.BMFace**, align 8
  %_vv_count = alloca i32, align 4
  %_vv_static = alloca [32 x i8*], align 16
  %_vf_count = alloca i32, align 4
  %_vf_static = alloca [32 x i8*], align 16
  store %struct.BevelParams* %bp, %struct.BevelParams** %bp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BevelParams** %bp.addr, metadata !7474, metadata !DIExpression()), !dbg !7475
  store %struct.BMesh* %bm, %struct.BMesh** %bm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMesh** %bm.addr, metadata !7476, metadata !DIExpression()), !dbg !7477
  store %struct.BevVert* %bv, %struct.BevVert** %bv.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BevVert** %bv.addr, metadata !7478, metadata !DIExpression()), !dbg !7479
  call void @llvm.dbg.declare(metadata %struct.BMFace** %f, metadata !7480, metadata !DIExpression()), !dbg !7481
  call void @llvm.dbg.declare(metadata i32* %n, metadata !7482, metadata !DIExpression()), !dbg !7483
  call void @llvm.dbg.declare(metadata i32* %k, metadata !7484, metadata !DIExpression()), !dbg !7485
  call void @llvm.dbg.declare(metadata %struct.VMesh** %vm, metadata !7486, metadata !DIExpression()), !dbg !7487
  %0 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !7488
  %vmesh = getelementptr inbounds %struct.BevVert, %struct.BevVert* %0, i32 0, i32 9, !dbg !7489
  %1 = load %struct.VMesh*, %struct.VMesh** %vmesh, align 8, !dbg !7489
  store %struct.VMesh* %1, %struct.VMesh** %vm, align 8, !dbg !7487
  call void @llvm.dbg.declare(metadata %struct.BoundVert** %v, metadata !7490, metadata !DIExpression()), !dbg !7491
  call void @llvm.dbg.declare(metadata %struct.BMFace** %frep, metadata !7492, metadata !DIExpression()), !dbg !7493
  call void @llvm.dbg.declare(metadata %struct.BMVert*** %vv, metadata !7494, metadata !DIExpression()), !dbg !7495
  store %struct.BMVert** null, %struct.BMVert*** %vv, align 8, !dbg !7495
  call void @llvm.dbg.declare(metadata %struct.BMFace*** %vf, metadata !7496, metadata !DIExpression()), !dbg !7497
  store %struct.BMFace** null, %struct.BMFace*** %vf, align 8, !dbg !7497
  call void @llvm.dbg.declare(metadata i32* %_vv_count, metadata !7498, metadata !DIExpression()), !dbg !7499
  store i32 0, i32* %_vv_count, align 4, !dbg !7499
  call void @llvm.dbg.declare(metadata [32 x i8*]* %_vv_static, metadata !7500, metadata !DIExpression()), !dbg !7499
  call void @llvm.dbg.declare(metadata i32* %_vf_count, metadata !7504, metadata !DIExpression()), !dbg !7505
  store i32 0, i32* %_vf_count, align 4, !dbg !7505
  call void @llvm.dbg.declare(metadata [32 x i8*]* %_vf_static, metadata !7506, metadata !DIExpression()), !dbg !7505
  %2 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !7507
  %boundstart = getelementptr inbounds %struct.VMesh, %struct.VMesh* %2, i32 0, i32 1, !dbg !7508
  %3 = load %struct.BoundVert*, %struct.BoundVert** %boundstart, align 8, !dbg !7508
  %call = call %struct.BMFace* @boundvert_rep_face(%struct.BoundVert* %3), !dbg !7509
  store %struct.BMFace* %call, %struct.BMFace** %frep, align 8, !dbg !7510
  %4 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !7511
  %boundstart1 = getelementptr inbounds %struct.VMesh, %struct.VMesh* %4, i32 0, i32 1, !dbg !7512
  %5 = load %struct.BoundVert*, %struct.BoundVert** %boundstart1, align 8, !dbg !7512
  store %struct.BoundVert* %5, %struct.BoundVert** %v, align 8, !dbg !7513
  store i32 0, i32* %n, align 4, !dbg !7514
  br label %do.body, !dbg !7515

do.body:                                          ; preds = %do.cond, %entry
  %6 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !7516
  %7 = bitcast %struct.BMVert** %6 to i8*, !dbg !7516
  %cmp = icmp eq i8* %7, null, !dbg !7516
  br i1 %cmp, label %land.lhs.true, label %cond.false, !dbg !7516

land.lhs.true:                                    ; preds = %do.body
  %8 = load i32, i32* %_vv_count, align 4, !dbg !7516
  %add = add nsw i32 %8, 1, !dbg !7516
  %conv = sext i32 %add to i64, !dbg !7516
  %cmp2 = icmp uge i64 32, %conv, !dbg !7516
  br i1 %cmp2, label %cond.true, label %cond.false, !dbg !7516

cond.true:                                        ; preds = %land.lhs.true
  %arraydecay = getelementptr inbounds [32 x i8*], [32 x i8*]* %_vv_static, i64 0, i64 0, !dbg !7516
  %9 = bitcast i8** %arraydecay to i8*, !dbg !7516
  %10 = bitcast i8* %9 to %struct.BMVert**, !dbg !7516
  store %struct.BMVert** %10, %struct.BMVert*** %vv, align 8, !dbg !7516
  br label %cond.end27, !dbg !7516

cond.false:                                       ; preds = %land.lhs.true, %do.body
  %11 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !7516
  %12 = bitcast %struct.BMVert** %11 to i8*, !dbg !7516
  %arraydecay4 = getelementptr inbounds [32 x i8*], [32 x i8*]* %_vv_static, i64 0, i64 0, !dbg !7516
  %13 = bitcast i8** %arraydecay4 to i8*, !dbg !7516
  %cmp5 = icmp eq i8* %12, %13, !dbg !7516
  br i1 %cmp5, label %land.lhs.true7, label %cond.false11, !dbg !7516

land.lhs.true7:                                   ; preds = %cond.false
  %14 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !7516
  %15 = bitcast %struct.BMVert** %14 to i8*, !dbg !7516
  %cmp8 = icmp ne i8* %15, null, !dbg !7516
  br i1 %cmp8, label %cond.true10, label %cond.false11, !dbg !7516

cond.true10:                                      ; preds = %land.lhs.true7
  br label %cond.end17, !dbg !7516

cond.false11:                                     ; preds = %land.lhs.true7, %cond.false
  %16 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !7516
  %cmp12 = icmp eq %struct.BMVert** %16, null, !dbg !7516
  br i1 %cmp12, label %cond.true14, label %cond.false15, !dbg !7516

cond.true14:                                      ; preds = %cond.false11
  br label %cond.end, !dbg !7516

cond.false15:                                     ; preds = %cond.false11
  %17 = load i64 (i8*)*, i64 (i8*)** @MEM_allocN_len, align 8, !dbg !7516
  %18 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !7516
  %19 = bitcast %struct.BMVert** %18 to i8*, !dbg !7516
  %call16 = call i64 %17(i8* %19), !dbg !7516
  %div = udiv i64 %call16, 8, !dbg !7516
  br label %cond.end, !dbg !7516

cond.end:                                         ; preds = %cond.false15, %cond.true14
  %cond = phi i64 [ 0, %cond.true14 ], [ %div, %cond.false15 ], !dbg !7516
  br label %cond.end17, !dbg !7516

cond.end17:                                       ; preds = %cond.end, %cond.true10
  %cond18 = phi i64 [ 32, %cond.true10 ], [ %cond, %cond.end ], !dbg !7516
  %20 = load i32, i32* %_vv_count, align 4, !dbg !7516
  %add19 = add nsw i32 %20, 1, !dbg !7516
  %conv20 = sext i32 %add19 to i64, !dbg !7516
  %cmp21 = icmp uge i64 %cond18, %conv20, !dbg !7516
  br i1 %cmp21, label %cond.true23, label %cond.false24, !dbg !7516

cond.true23:                                      ; preds = %cond.end17
  br label %cond.end26, !dbg !7516

cond.false24:                                     ; preds = %cond.end17
  %21 = bitcast %struct.BMVert*** %vv to i8**, !dbg !7516
  %arraydecay25 = getelementptr inbounds [32 x i8*], [32 x i8*]* %_vv_static, i64 0, i64 0, !dbg !7516
  %22 = bitcast i8** %arraydecay25 to i8*, !dbg !7516
  %23 = load i32, i32* %_vv_count, align 4, !dbg !7516
  call void @_bli_array_grow_func(i8** %21, i8* %22, i32 8, i32 %23, i32 1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0)), !dbg !7516
  br label %cond.end26, !dbg !7516

cond.end26:                                       ; preds = %cond.false24, %cond.true23
  br label %cond.end27, !dbg !7516

cond.end27:                                       ; preds = %cond.end26, %cond.true
  %24 = load i32, i32* %_vv_count, align 4, !dbg !7516
  %add28 = add nsw i32 %24, 1, !dbg !7516
  store i32 %add28, i32* %_vv_count, align 4, !dbg !7516
  %25 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !7516
  %nv = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %25, i32 0, i32 2, !dbg !7516
  %v29 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %nv, i32 0, i32 0, !dbg !7516
  %26 = load %struct.BMVert*, %struct.BMVert** %v29, align 8, !dbg !7516
  %27 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !7516
  %28 = load i32, i32* %_vv_count, align 4, !dbg !7516
  %sub = sub nsw i32 %28, 1, !dbg !7516
  %idxprom = sext i32 %sub to i64, !dbg !7516
  %arrayidx = getelementptr inbounds %struct.BMVert*, %struct.BMVert** %27, i64 %idxprom, !dbg !7516
  store %struct.BMVert* %26, %struct.BMVert** %arrayidx, align 8, !dbg !7516
  %29 = load %struct.BMFace**, %struct.BMFace*** %vf, align 8, !dbg !7518
  %30 = bitcast %struct.BMFace** %29 to i8*, !dbg !7518
  %cmp30 = icmp eq i8* %30, null, !dbg !7518
  br i1 %cmp30, label %land.lhs.true32, label %cond.false39, !dbg !7518

land.lhs.true32:                                  ; preds = %cond.end27
  %31 = load i32, i32* %_vf_count, align 4, !dbg !7518
  %add33 = add nsw i32 %31, 1, !dbg !7518
  %conv34 = sext i32 %add33 to i64, !dbg !7518
  %cmp35 = icmp uge i64 32, %conv34, !dbg !7518
  br i1 %cmp35, label %cond.true37, label %cond.false39, !dbg !7518

cond.true37:                                      ; preds = %land.lhs.true32
  %arraydecay38 = getelementptr inbounds [32 x i8*], [32 x i8*]* %_vf_static, i64 0, i64 0, !dbg !7518
  %32 = bitcast i8** %arraydecay38 to i8*, !dbg !7518
  %33 = bitcast i8* %32 to %struct.BMFace**, !dbg !7518
  store %struct.BMFace** %33, %struct.BMFace*** %vf, align 8, !dbg !7518
  br label %cond.end66, !dbg !7518

cond.false39:                                     ; preds = %land.lhs.true32, %cond.end27
  %34 = load %struct.BMFace**, %struct.BMFace*** %vf, align 8, !dbg !7518
  %35 = bitcast %struct.BMFace** %34 to i8*, !dbg !7518
  %arraydecay40 = getelementptr inbounds [32 x i8*], [32 x i8*]* %_vf_static, i64 0, i64 0, !dbg !7518
  %36 = bitcast i8** %arraydecay40 to i8*, !dbg !7518
  %cmp41 = icmp eq i8* %35, %36, !dbg !7518
  br i1 %cmp41, label %land.lhs.true43, label %cond.false47, !dbg !7518

land.lhs.true43:                                  ; preds = %cond.false39
  %37 = load %struct.BMFace**, %struct.BMFace*** %vf, align 8, !dbg !7518
  %38 = bitcast %struct.BMFace** %37 to i8*, !dbg !7518
  %cmp44 = icmp ne i8* %38, null, !dbg !7518
  br i1 %cmp44, label %cond.true46, label %cond.false47, !dbg !7518

cond.true46:                                      ; preds = %land.lhs.true43
  br label %cond.end56, !dbg !7518

cond.false47:                                     ; preds = %land.lhs.true43, %cond.false39
  %39 = load %struct.BMFace**, %struct.BMFace*** %vf, align 8, !dbg !7518
  %cmp48 = icmp eq %struct.BMFace** %39, null, !dbg !7518
  br i1 %cmp48, label %cond.true50, label %cond.false51, !dbg !7518

cond.true50:                                      ; preds = %cond.false47
  br label %cond.end54, !dbg !7518

cond.false51:                                     ; preds = %cond.false47
  %40 = load i64 (i8*)*, i64 (i8*)** @MEM_allocN_len, align 8, !dbg !7518
  %41 = load %struct.BMFace**, %struct.BMFace*** %vf, align 8, !dbg !7518
  %42 = bitcast %struct.BMFace** %41 to i8*, !dbg !7518
  %call52 = call i64 %40(i8* %42), !dbg !7518
  %div53 = udiv i64 %call52, 8, !dbg !7518
  br label %cond.end54, !dbg !7518

cond.end54:                                       ; preds = %cond.false51, %cond.true50
  %cond55 = phi i64 [ 0, %cond.true50 ], [ %div53, %cond.false51 ], !dbg !7518
  br label %cond.end56, !dbg !7518

cond.end56:                                       ; preds = %cond.end54, %cond.true46
  %cond57 = phi i64 [ 32, %cond.true46 ], [ %cond55, %cond.end54 ], !dbg !7518
  %43 = load i32, i32* %_vf_count, align 4, !dbg !7518
  %add58 = add nsw i32 %43, 1, !dbg !7518
  %conv59 = sext i32 %add58 to i64, !dbg !7518
  %cmp60 = icmp uge i64 %cond57, %conv59, !dbg !7518
  br i1 %cmp60, label %cond.true62, label %cond.false63, !dbg !7518

cond.true62:                                      ; preds = %cond.end56
  br label %cond.end65, !dbg !7518

cond.false63:                                     ; preds = %cond.end56
  %44 = bitcast %struct.BMFace*** %vf to i8**, !dbg !7518
  %arraydecay64 = getelementptr inbounds [32 x i8*], [32 x i8*]* %_vf_static, i64 0, i64 0, !dbg !7518
  %45 = bitcast i8** %arraydecay64 to i8*, !dbg !7518
  %46 = load i32, i32* %_vf_count, align 4, !dbg !7518
  call void @_bli_array_grow_func(i8** %44, i8* %45, i32 8, i32 %46, i32 1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0)), !dbg !7518
  br label %cond.end65, !dbg !7518

cond.end65:                                       ; preds = %cond.false63, %cond.true62
  br label %cond.end66, !dbg !7518

cond.end66:                                       ; preds = %cond.end65, %cond.true37
  %47 = load i32, i32* %_vf_count, align 4, !dbg !7518
  %add67 = add nsw i32 %47, 1, !dbg !7518
  store i32 %add67, i32* %_vf_count, align 4, !dbg !7518
  %48 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !7518
  %any_seam = getelementptr inbounds %struct.BevVert, %struct.BevVert* %48, i32 0, i32 5, !dbg !7518
  %49 = load i8, i8* %any_seam, align 8, !dbg !7518
  %conv68 = zext i8 %49 to i32, !dbg !7518
  %tobool = icmp ne i32 %conv68, 0, !dbg !7518
  br i1 %tobool, label %cond.true69, label %cond.false70, !dbg !7518

cond.true69:                                      ; preds = %cond.end66
  %50 = load %struct.BMFace*, %struct.BMFace** %frep, align 8, !dbg !7518
  br label %cond.end72, !dbg !7518

cond.false70:                                     ; preds = %cond.end66
  %51 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !7518
  %call71 = call %struct.BMFace* @boundvert_rep_face(%struct.BoundVert* %51), !dbg !7518
  br label %cond.end72, !dbg !7518

cond.end72:                                       ; preds = %cond.false70, %cond.true69
  %cond73 = phi %struct.BMFace* [ %50, %cond.true69 ], [ %call71, %cond.false70 ], !dbg !7518
  %52 = load %struct.BMFace**, %struct.BMFace*** %vf, align 8, !dbg !7518
  %53 = load i32, i32* %_vf_count, align 4, !dbg !7518
  %sub74 = sub nsw i32 %53, 1, !dbg !7518
  %idxprom75 = sext i32 %sub74 to i64, !dbg !7518
  %arrayidx76 = getelementptr inbounds %struct.BMFace*, %struct.BMFace** %52, i64 %idxprom75, !dbg !7518
  store %struct.BMFace* %cond73, %struct.BMFace** %arrayidx76, align 8, !dbg !7518
  %54 = load i32, i32* %n, align 4, !dbg !7519
  %inc = add nsw i32 %54, 1, !dbg !7519
  store i32 %inc, i32* %n, align 4, !dbg !7519
  %55 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !7520
  %ebev = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %55, i32 0, i32 5, !dbg !7522
  %56 = load %struct.EdgeHalf*, %struct.EdgeHalf** %ebev, align 8, !dbg !7522
  %tobool77 = icmp ne %struct.EdgeHalf* %56, null, !dbg !7520
  br i1 %tobool77, label %land.lhs.true78, label %if.end, !dbg !7523

land.lhs.true78:                                  ; preds = %cond.end72
  %57 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !7524
  %ebev79 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %57, i32 0, i32 5, !dbg !7525
  %58 = load %struct.EdgeHalf*, %struct.EdgeHalf** %ebev79, align 8, !dbg !7525
  %seg = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %58, i32 0, i32 7, !dbg !7526
  %59 = load i32, i32* %seg, align 8, !dbg !7526
  %cmp80 = icmp sgt i32 %59, 1, !dbg !7527
  br i1 %cmp80, label %if.then, label %if.end, !dbg !7528

if.then:                                          ; preds = %land.lhs.true78
  store i32 1, i32* %k, align 4, !dbg !7529
  br label %for.cond, !dbg !7532

for.cond:                                         ; preds = %for.inc, %if.then
  %60 = load i32, i32* %k, align 4, !dbg !7533
  %61 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !7535
  %ebev82 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %61, i32 0, i32 5, !dbg !7536
  %62 = load %struct.EdgeHalf*, %struct.EdgeHalf** %ebev82, align 8, !dbg !7536
  %seg83 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %62, i32 0, i32 7, !dbg !7537
  %63 = load i32, i32* %seg83, align 8, !dbg !7537
  %cmp84 = icmp slt i32 %60, %63, !dbg !7538
  br i1 %cmp84, label %for.body, label %for.end, !dbg !7539

for.body:                                         ; preds = %for.cond
  %64 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !7540
  %65 = bitcast %struct.BMVert** %64 to i8*, !dbg !7540
  %cmp86 = icmp eq i8* %65, null, !dbg !7540
  br i1 %cmp86, label %land.lhs.true88, label %cond.false95, !dbg !7540

land.lhs.true88:                                  ; preds = %for.body
  %66 = load i32, i32* %_vv_count, align 4, !dbg !7540
  %add89 = add nsw i32 %66, 1, !dbg !7540
  %conv90 = sext i32 %add89 to i64, !dbg !7540
  %cmp91 = icmp uge i64 32, %conv90, !dbg !7540
  br i1 %cmp91, label %cond.true93, label %cond.false95, !dbg !7540

cond.true93:                                      ; preds = %land.lhs.true88
  %arraydecay94 = getelementptr inbounds [32 x i8*], [32 x i8*]* %_vv_static, i64 0, i64 0, !dbg !7540
  %67 = bitcast i8** %arraydecay94 to i8*, !dbg !7540
  %68 = bitcast i8* %67 to %struct.BMVert**, !dbg !7540
  store %struct.BMVert** %68, %struct.BMVert*** %vv, align 8, !dbg !7540
  br label %cond.end122, !dbg !7540

cond.false95:                                     ; preds = %land.lhs.true88, %for.body
  %69 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !7540
  %70 = bitcast %struct.BMVert** %69 to i8*, !dbg !7540
  %arraydecay96 = getelementptr inbounds [32 x i8*], [32 x i8*]* %_vv_static, i64 0, i64 0, !dbg !7540
  %71 = bitcast i8** %arraydecay96 to i8*, !dbg !7540
  %cmp97 = icmp eq i8* %70, %71, !dbg !7540
  br i1 %cmp97, label %land.lhs.true99, label %cond.false103, !dbg !7540

land.lhs.true99:                                  ; preds = %cond.false95
  %72 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !7540
  %73 = bitcast %struct.BMVert** %72 to i8*, !dbg !7540
  %cmp100 = icmp ne i8* %73, null, !dbg !7540
  br i1 %cmp100, label %cond.true102, label %cond.false103, !dbg !7540

cond.true102:                                     ; preds = %land.lhs.true99
  br label %cond.end112, !dbg !7540

cond.false103:                                    ; preds = %land.lhs.true99, %cond.false95
  %74 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !7540
  %cmp104 = icmp eq %struct.BMVert** %74, null, !dbg !7540
  br i1 %cmp104, label %cond.true106, label %cond.false107, !dbg !7540

cond.true106:                                     ; preds = %cond.false103
  br label %cond.end110, !dbg !7540

cond.false107:                                    ; preds = %cond.false103
  %75 = load i64 (i8*)*, i64 (i8*)** @MEM_allocN_len, align 8, !dbg !7540
  %76 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !7540
  %77 = bitcast %struct.BMVert** %76 to i8*, !dbg !7540
  %call108 = call i64 %75(i8* %77), !dbg !7540
  %div109 = udiv i64 %call108, 8, !dbg !7540
  br label %cond.end110, !dbg !7540

cond.end110:                                      ; preds = %cond.false107, %cond.true106
  %cond111 = phi i64 [ 0, %cond.true106 ], [ %div109, %cond.false107 ], !dbg !7540
  br label %cond.end112, !dbg !7540

cond.end112:                                      ; preds = %cond.end110, %cond.true102
  %cond113 = phi i64 [ 32, %cond.true102 ], [ %cond111, %cond.end110 ], !dbg !7540
  %78 = load i32, i32* %_vv_count, align 4, !dbg !7540
  %add114 = add nsw i32 %78, 1, !dbg !7540
  %conv115 = sext i32 %add114 to i64, !dbg !7540
  %cmp116 = icmp uge i64 %cond113, %conv115, !dbg !7540
  br i1 %cmp116, label %cond.true118, label %cond.false119, !dbg !7540

cond.true118:                                     ; preds = %cond.end112
  br label %cond.end121, !dbg !7540

cond.false119:                                    ; preds = %cond.end112
  %79 = bitcast %struct.BMVert*** %vv to i8**, !dbg !7540
  %arraydecay120 = getelementptr inbounds [32 x i8*], [32 x i8*]* %_vv_static, i64 0, i64 0, !dbg !7540
  %80 = bitcast i8** %arraydecay120 to i8*, !dbg !7540
  %81 = load i32, i32* %_vv_count, align 4, !dbg !7540
  call void @_bli_array_grow_func(i8** %79, i8* %80, i32 8, i32 %81, i32 1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0)), !dbg !7540
  br label %cond.end121, !dbg !7540

cond.end121:                                      ; preds = %cond.false119, %cond.true118
  br label %cond.end122, !dbg !7540

cond.end122:                                      ; preds = %cond.end121, %cond.true93
  %82 = load i32, i32* %_vv_count, align 4, !dbg !7540
  %add123 = add nsw i32 %82, 1, !dbg !7540
  store i32 %add123, i32* %_vv_count, align 4, !dbg !7540
  %83 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !7540
  %84 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !7540
  %index = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %84, i32 0, i32 6, !dbg !7540
  %85 = load i32, i32* %index, align 8, !dbg !7540
  %86 = load i32, i32* %k, align 4, !dbg !7540
  %call124 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %83, i32 %85, i32 0, i32 %86), !dbg !7540
  %v125 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call124, i32 0, i32 0, !dbg !7540
  %87 = load %struct.BMVert*, %struct.BMVert** %v125, align 8, !dbg !7540
  %88 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !7540
  %89 = load i32, i32* %_vv_count, align 4, !dbg !7540
  %sub126 = sub nsw i32 %89, 1, !dbg !7540
  %idxprom127 = sext i32 %sub126 to i64, !dbg !7540
  %arrayidx128 = getelementptr inbounds %struct.BMVert*, %struct.BMVert** %88, i64 %idxprom127, !dbg !7540
  store %struct.BMVert* %87, %struct.BMVert** %arrayidx128, align 8, !dbg !7540
  %90 = load %struct.BMFace**, %struct.BMFace*** %vf, align 8, !dbg !7542
  %91 = bitcast %struct.BMFace** %90 to i8*, !dbg !7542
  %cmp129 = icmp eq i8* %91, null, !dbg !7542
  br i1 %cmp129, label %land.lhs.true131, label %cond.false138, !dbg !7542

land.lhs.true131:                                 ; preds = %cond.end122
  %92 = load i32, i32* %_vf_count, align 4, !dbg !7542
  %add132 = add nsw i32 %92, 1, !dbg !7542
  %conv133 = sext i32 %add132 to i64, !dbg !7542
  %cmp134 = icmp uge i64 32, %conv133, !dbg !7542
  br i1 %cmp134, label %cond.true136, label %cond.false138, !dbg !7542

cond.true136:                                     ; preds = %land.lhs.true131
  %arraydecay137 = getelementptr inbounds [32 x i8*], [32 x i8*]* %_vf_static, i64 0, i64 0, !dbg !7542
  %93 = bitcast i8** %arraydecay137 to i8*, !dbg !7542
  %94 = bitcast i8* %93 to %struct.BMFace**, !dbg !7542
  store %struct.BMFace** %94, %struct.BMFace*** %vf, align 8, !dbg !7542
  br label %cond.end165, !dbg !7542

cond.false138:                                    ; preds = %land.lhs.true131, %cond.end122
  %95 = load %struct.BMFace**, %struct.BMFace*** %vf, align 8, !dbg !7542
  %96 = bitcast %struct.BMFace** %95 to i8*, !dbg !7542
  %arraydecay139 = getelementptr inbounds [32 x i8*], [32 x i8*]* %_vf_static, i64 0, i64 0, !dbg !7542
  %97 = bitcast i8** %arraydecay139 to i8*, !dbg !7542
  %cmp140 = icmp eq i8* %96, %97, !dbg !7542
  br i1 %cmp140, label %land.lhs.true142, label %cond.false146, !dbg !7542

land.lhs.true142:                                 ; preds = %cond.false138
  %98 = load %struct.BMFace**, %struct.BMFace*** %vf, align 8, !dbg !7542
  %99 = bitcast %struct.BMFace** %98 to i8*, !dbg !7542
  %cmp143 = icmp ne i8* %99, null, !dbg !7542
  br i1 %cmp143, label %cond.true145, label %cond.false146, !dbg !7542

cond.true145:                                     ; preds = %land.lhs.true142
  br label %cond.end155, !dbg !7542

cond.false146:                                    ; preds = %land.lhs.true142, %cond.false138
  %100 = load %struct.BMFace**, %struct.BMFace*** %vf, align 8, !dbg !7542
  %cmp147 = icmp eq %struct.BMFace** %100, null, !dbg !7542
  br i1 %cmp147, label %cond.true149, label %cond.false150, !dbg !7542

cond.true149:                                     ; preds = %cond.false146
  br label %cond.end153, !dbg !7542

cond.false150:                                    ; preds = %cond.false146
  %101 = load i64 (i8*)*, i64 (i8*)** @MEM_allocN_len, align 8, !dbg !7542
  %102 = load %struct.BMFace**, %struct.BMFace*** %vf, align 8, !dbg !7542
  %103 = bitcast %struct.BMFace** %102 to i8*, !dbg !7542
  %call151 = call i64 %101(i8* %103), !dbg !7542
  %div152 = udiv i64 %call151, 8, !dbg !7542
  br label %cond.end153, !dbg !7542

cond.end153:                                      ; preds = %cond.false150, %cond.true149
  %cond154 = phi i64 [ 0, %cond.true149 ], [ %div152, %cond.false150 ], !dbg !7542
  br label %cond.end155, !dbg !7542

cond.end155:                                      ; preds = %cond.end153, %cond.true145
  %cond156 = phi i64 [ 32, %cond.true145 ], [ %cond154, %cond.end153 ], !dbg !7542
  %104 = load i32, i32* %_vf_count, align 4, !dbg !7542
  %add157 = add nsw i32 %104, 1, !dbg !7542
  %conv158 = sext i32 %add157 to i64, !dbg !7542
  %cmp159 = icmp uge i64 %cond156, %conv158, !dbg !7542
  br i1 %cmp159, label %cond.true161, label %cond.false162, !dbg !7542

cond.true161:                                     ; preds = %cond.end155
  br label %cond.end164, !dbg !7542

cond.false162:                                    ; preds = %cond.end155
  %105 = bitcast %struct.BMFace*** %vf to i8**, !dbg !7542
  %arraydecay163 = getelementptr inbounds [32 x i8*], [32 x i8*]* %_vf_static, i64 0, i64 0, !dbg !7542
  %106 = bitcast i8** %arraydecay163 to i8*, !dbg !7542
  %107 = load i32, i32* %_vf_count, align 4, !dbg !7542
  call void @_bli_array_grow_func(i8** %105, i8* %106, i32 8, i32 %107, i32 1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0)), !dbg !7542
  br label %cond.end164, !dbg !7542

cond.end164:                                      ; preds = %cond.false162, %cond.true161
  br label %cond.end165, !dbg !7542

cond.end165:                                      ; preds = %cond.end164, %cond.true136
  %108 = load i32, i32* %_vf_count, align 4, !dbg !7542
  %add166 = add nsw i32 %108, 1, !dbg !7542
  store i32 %add166, i32* %_vf_count, align 4, !dbg !7542
  %109 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !7542
  %any_seam167 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %109, i32 0, i32 5, !dbg !7542
  %110 = load i8, i8* %any_seam167, align 8, !dbg !7542
  %conv168 = zext i8 %110 to i32, !dbg !7542
  %tobool169 = icmp ne i32 %conv168, 0, !dbg !7542
  br i1 %tobool169, label %cond.true170, label %cond.false171, !dbg !7542

cond.true170:                                     ; preds = %cond.end165
  %111 = load %struct.BMFace*, %struct.BMFace** %frep, align 8, !dbg !7542
  br label %cond.end173, !dbg !7542

cond.false171:                                    ; preds = %cond.end165
  %112 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !7542
  %call172 = call %struct.BMFace* @boundvert_rep_face(%struct.BoundVert* %112), !dbg !7542
  br label %cond.end173, !dbg !7542

cond.end173:                                      ; preds = %cond.false171, %cond.true170
  %cond174 = phi %struct.BMFace* [ %111, %cond.true170 ], [ %call172, %cond.false171 ], !dbg !7542
  %113 = load %struct.BMFace**, %struct.BMFace*** %vf, align 8, !dbg !7542
  %114 = load i32, i32* %_vf_count, align 4, !dbg !7542
  %sub175 = sub nsw i32 %114, 1, !dbg !7542
  %idxprom176 = sext i32 %sub175 to i64, !dbg !7542
  %arrayidx177 = getelementptr inbounds %struct.BMFace*, %struct.BMFace** %113, i64 %idxprom176, !dbg !7542
  store %struct.BMFace* %cond174, %struct.BMFace** %arrayidx177, align 8, !dbg !7542
  %115 = load i32, i32* %n, align 4, !dbg !7543
  %inc178 = add nsw i32 %115, 1, !dbg !7543
  store i32 %inc178, i32* %n, align 4, !dbg !7543
  br label %for.inc, !dbg !7544

for.inc:                                          ; preds = %cond.end173
  %116 = load i32, i32* %k, align 4, !dbg !7545
  %inc179 = add nsw i32 %116, 1, !dbg !7545
  store i32 %inc179, i32* %k, align 4, !dbg !7545
  br label %for.cond, !dbg !7546, !llvm.loop !7547

for.end:                                          ; preds = %for.cond
  br label %if.end, !dbg !7549

if.end:                                           ; preds = %for.end, %land.lhs.true78, %cond.end72
  br label %do.cond, !dbg !7550

do.cond:                                          ; preds = %if.end
  %117 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !7551
  %next = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %117, i32 0, i32 0, !dbg !7552
  %118 = load %struct.BoundVert*, %struct.BoundVert** %next, align 8, !dbg !7552
  store %struct.BoundVert* %118, %struct.BoundVert** %v, align 8, !dbg !7553
  %119 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !7554
  %boundstart180 = getelementptr inbounds %struct.VMesh, %struct.VMesh* %119, i32 0, i32 1, !dbg !7555
  %120 = load %struct.BoundVert*, %struct.BoundVert** %boundstart180, align 8, !dbg !7555
  %cmp181 = icmp ne %struct.BoundVert* %118, %120, !dbg !7556
  br i1 %cmp181, label %do.body, label %do.end, !dbg !7550, !llvm.loop !7557

do.end:                                           ; preds = %do.cond
  %121 = load i32, i32* %n, align 4, !dbg !7559
  %cmp183 = icmp sgt i32 %121, 2, !dbg !7561
  br i1 %cmp183, label %if.then185, label %if.else, !dbg !7562

if.then185:                                       ; preds = %do.end
  %122 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !7563
  %123 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !7565
  %124 = load i32, i32* %n, align 4, !dbg !7566
  %125 = load %struct.BMFace**, %struct.BMFace*** %vf, align 8, !dbg !7567
  %126 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !7568
  %call186 = call %struct.BMFace* @boundvert_rep_face(%struct.BoundVert* %126), !dbg !7569
  %127 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !7570
  %mat_nr = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %127, i32 0, i32 13, !dbg !7571
  %128 = load i32, i32* %mat_nr, align 4, !dbg !7571
  %call187 = call %struct.BMFace* @bev_create_ngon(%struct.BMesh* %122, %struct.BMVert** %123, i32 %124, %struct.BMFace** %125, %struct.BMFace* %call186, i32 %128, i8 zeroext 1), !dbg !7572
  store %struct.BMFace* %call187, %struct.BMFace** %f, align 8, !dbg !7573
  br label %if.end188, !dbg !7574

if.else:                                          ; preds = %do.end
  store %struct.BMFace* null, %struct.BMFace** %f, align 8, !dbg !7575
  br label %if.end188

if.end188:                                        ; preds = %if.else, %if.then185
  %129 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !7577
  %tobool189 = icmp ne %struct.BMVert** %129, null, !dbg !7577
  br i1 %tobool189, label %land.lhs.true190, label %if.end196, !dbg !7577

land.lhs.true190:                                 ; preds = %if.end188
  %130 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !7577
  %131 = bitcast %struct.BMVert** %130 to i8*, !dbg !7577
  %arraydecay191 = getelementptr inbounds [32 x i8*], [32 x i8*]* %_vv_static, i64 0, i64 0, !dbg !7577
  %132 = bitcast i8** %arraydecay191 to i8*, !dbg !7577
  %cmp192 = icmp ne i8* %131, %132, !dbg !7577
  br i1 %cmp192, label %if.then194, label %if.end196, !dbg !7579

if.then194:                                       ; preds = %land.lhs.true190
  %133 = load i32, i32* %_vv_count, align 4, !dbg !7580
  %arraydecay195 = getelementptr inbounds [32 x i8*], [32 x i8*]* %_vv_static, i64 0, i64 0, !dbg !7580
  %134 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !7580
  %135 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !7580
  %136 = bitcast %struct.BMVert** %135 to i8*, !dbg !7580
  call void %134(i8* %136), !dbg !7580
  br label %if.end196, !dbg !7580

if.end196:                                        ; preds = %if.then194, %land.lhs.true190, %if.end188
  %137 = load %struct.BMFace*, %struct.BMFace** %f, align 8, !dbg !7582
  ret %struct.BMFace* %137, !dbg !7583
}

; Function Attrs: noinline nounwind uwtable
define internal void @bevel_build_rings(%struct.BevelParams* %bp, %struct.BMesh* %bm, %struct.BevVert* %bv) #0 !dbg !7584 {
entry:
  %bp.addr = alloca %struct.BevelParams*, align 8
  %bm.addr = alloca %struct.BMesh*, align 8
  %bv.addr = alloca %struct.BevVert*, align 8
  %n = alloca i32, align 4
  %ns = alloca i32, align 4
  %ns2 = alloca i32, align 4
  %odd = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %ring = alloca i32, align 4
  %vm1 = alloca %struct.VMesh*, align 8
  %vm = alloca %struct.VMesh*, align 8
  %v = alloca %struct.BoundVert*, align 8
  %bmv1 = alloca %struct.BMVert*, align 8
  %bmv2 = alloca %struct.BMVert*, align 8
  %bmv3 = alloca %struct.BMVert*, align 8
  %bmv4 = alloca %struct.BMVert*, align 8
  %f = alloca %struct.BMFace*, align 8
  %f2 = alloca %struct.BMFace*, align 8
  %f23 = alloca %struct.BMFace*, align 8
  %vpipe = alloca %struct.BoundVert*, align 8
  %mat_nr = alloca i32, align 4
  %v_uv = alloca %struct.BMVert*, align 8
  %vv = alloca %struct.BMVert**, align 8
  %vf = alloca %struct.BMFace**, align 8
  %_vv_count = alloca i32, align 4
  %_vv_static = alloca [32 x i8*], align 16
  %_vf_count = alloca i32, align 4
  %_vf_static = alloca [32 x i8*], align 16
  store %struct.BevelParams* %bp, %struct.BevelParams** %bp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BevelParams** %bp.addr, metadata !7585, metadata !DIExpression()), !dbg !7586
  store %struct.BMesh* %bm, %struct.BMesh** %bm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMesh** %bm.addr, metadata !7587, metadata !DIExpression()), !dbg !7588
  store %struct.BevVert* %bv, %struct.BevVert** %bv.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BevVert** %bv.addr, metadata !7589, metadata !DIExpression()), !dbg !7590
  call void @llvm.dbg.declare(metadata i32* %n, metadata !7591, metadata !DIExpression()), !dbg !7592
  call void @llvm.dbg.declare(metadata i32* %ns, metadata !7593, metadata !DIExpression()), !dbg !7594
  call void @llvm.dbg.declare(metadata i32* %ns2, metadata !7595, metadata !DIExpression()), !dbg !7596
  call void @llvm.dbg.declare(metadata i32* %odd, metadata !7597, metadata !DIExpression()), !dbg !7598
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7599, metadata !DIExpression()), !dbg !7600
  call void @llvm.dbg.declare(metadata i32* %j, metadata !7601, metadata !DIExpression()), !dbg !7602
  call void @llvm.dbg.declare(metadata i32* %k, metadata !7603, metadata !DIExpression()), !dbg !7604
  call void @llvm.dbg.declare(metadata i32* %ring, metadata !7605, metadata !DIExpression()), !dbg !7606
  call void @llvm.dbg.declare(metadata %struct.VMesh** %vm1, metadata !7607, metadata !DIExpression()), !dbg !7608
  call void @llvm.dbg.declare(metadata %struct.VMesh** %vm, metadata !7609, metadata !DIExpression()), !dbg !7610
  call void @llvm.dbg.declare(metadata %struct.BoundVert** %v, metadata !7611, metadata !DIExpression()), !dbg !7612
  call void @llvm.dbg.declare(metadata %struct.BMVert** %bmv1, metadata !7613, metadata !DIExpression()), !dbg !7614
  call void @llvm.dbg.declare(metadata %struct.BMVert** %bmv2, metadata !7615, metadata !DIExpression()), !dbg !7616
  call void @llvm.dbg.declare(metadata %struct.BMVert** %bmv3, metadata !7617, metadata !DIExpression()), !dbg !7618
  call void @llvm.dbg.declare(metadata %struct.BMVert** %bmv4, metadata !7619, metadata !DIExpression()), !dbg !7620
  call void @llvm.dbg.declare(metadata %struct.BMFace** %f, metadata !7621, metadata !DIExpression()), !dbg !7622
  call void @llvm.dbg.declare(metadata %struct.BMFace** %f2, metadata !7623, metadata !DIExpression()), !dbg !7624
  call void @llvm.dbg.declare(metadata %struct.BMFace** %f23, metadata !7625, metadata !DIExpression()), !dbg !7626
  call void @llvm.dbg.declare(metadata %struct.BoundVert** %vpipe, metadata !7627, metadata !DIExpression()), !dbg !7628
  call void @llvm.dbg.declare(metadata i32* %mat_nr, metadata !7629, metadata !DIExpression()), !dbg !7630
  %0 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !7631
  %mat_nr1 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %0, i32 0, i32 13, !dbg !7632
  %1 = load i32, i32* %mat_nr1, align 4, !dbg !7632
  store i32 %1, i32* %mat_nr, align 4, !dbg !7630
  %2 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !7633
  %vmesh = getelementptr inbounds %struct.BevVert, %struct.BevVert* %2, i32 0, i32 9, !dbg !7634
  %3 = load %struct.VMesh*, %struct.VMesh** %vmesh, align 8, !dbg !7634
  %count = getelementptr inbounds %struct.VMesh, %struct.VMesh* %3, i32 0, i32 2, !dbg !7635
  %4 = load i32, i32* %count, align 8, !dbg !7635
  store i32 %4, i32* %n, align 4, !dbg !7636
  %5 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !7637
  %vmesh2 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %5, i32 0, i32 9, !dbg !7638
  %6 = load %struct.VMesh*, %struct.VMesh** %vmesh2, align 8, !dbg !7638
  %seg = getelementptr inbounds %struct.VMesh, %struct.VMesh* %6, i32 0, i32 3, !dbg !7639
  %7 = load i32, i32* %seg, align 4, !dbg !7639
  store i32 %7, i32* %ns, align 4, !dbg !7640
  %8 = load i32, i32* %ns, align 4, !dbg !7641
  %div = sdiv i32 %8, 2, !dbg !7642
  store i32 %div, i32* %ns2, align 4, !dbg !7643
  %9 = load i32, i32* %ns, align 4, !dbg !7644
  %rem = srem i32 %9, 2, !dbg !7645
  store i32 %rem, i32* %odd, align 4, !dbg !7646
  %10 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !7647
  %call = call %struct.BoundVert* @pipe_test(%struct.BevVert* %10), !dbg !7648
  store %struct.BoundVert* %call, %struct.BoundVert** %vpipe, align 8, !dbg !7649
  %11 = load %struct.BoundVert*, %struct.BoundVert** %vpipe, align 8, !dbg !7650
  %tobool = icmp ne %struct.BoundVert* %11, null, !dbg !7650
  br i1 %tobool, label %if.then, label %if.else, !dbg !7652

if.then:                                          ; preds = %entry
  %12 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !7653
  %13 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !7654
  %14 = load %struct.BoundVert*, %struct.BoundVert** %vpipe, align 8, !dbg !7655
  %call3 = call %struct.VMesh* @pipe_adj_vmesh(%struct.BevelParams* %12, %struct.BevVert* %13, %struct.BoundVert* %14), !dbg !7656
  store %struct.VMesh* %call3, %struct.VMesh** %vm1, align 8, !dbg !7657
  br label %if.end10, !dbg !7658

if.else:                                          ; preds = %entry
  %15 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !7659
  %16 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !7661
  %call4 = call zeroext i8 @tri_corner_test(%struct.BevelParams* %15, %struct.BevVert* %16), !dbg !7662
  %tobool5 = icmp ne i8 %call4, 0, !dbg !7662
  br i1 %tobool5, label %if.then6, label %if.else8, !dbg !7663

if.then6:                                         ; preds = %if.else
  %17 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !7664
  %18 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !7665
  %call7 = call %struct.VMesh* @tri_corner_adj_vmesh(%struct.BevelParams* %17, %struct.BevVert* %18), !dbg !7666
  store %struct.VMesh* %call7, %struct.VMesh** %vm1, align 8, !dbg !7667
  br label %if.end, !dbg !7668

if.else8:                                         ; preds = %if.else
  %19 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !7669
  %20 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !7670
  %call9 = call %struct.VMesh* @adj_vmesh(%struct.BevelParams* %19, %struct.BevVert* %20), !dbg !7671
  store %struct.VMesh* %call9, %struct.VMesh** %vm1, align 8, !dbg !7672
  br label %if.end

if.end:                                           ; preds = %if.else8, %if.then6
  br label %if.end10

if.end10:                                         ; preds = %if.end, %if.then
  %21 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !7673
  %vmesh11 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %21, i32 0, i32 9, !dbg !7674
  %22 = load %struct.VMesh*, %struct.VMesh** %vmesh11, align 8, !dbg !7674
  store %struct.VMesh* %22, %struct.VMesh** %vm, align 8, !dbg !7675
  store i32 0, i32* %i, align 4, !dbg !7676
  br label %for.cond, !dbg !7678

for.cond:                                         ; preds = %for.inc35, %if.end10
  %23 = load i32, i32* %i, align 4, !dbg !7679
  %24 = load i32, i32* %n, align 4, !dbg !7681
  %cmp = icmp slt i32 %23, %24, !dbg !7682
  br i1 %cmp, label %for.body, label %for.end37, !dbg !7683

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4, !dbg !7684
  br label %for.cond12, !dbg !7687

for.cond12:                                       ; preds = %for.inc32, %for.body
  %25 = load i32, i32* %j, align 4, !dbg !7688
  %26 = load i32, i32* %ns2, align 4, !dbg !7690
  %cmp13 = icmp sle i32 %25, %26, !dbg !7691
  br i1 %cmp13, label %for.body14, label %for.end34, !dbg !7692

for.body14:                                       ; preds = %for.cond12
  store i32 0, i32* %k, align 4, !dbg !7693
  br label %for.cond15, !dbg !7696

for.cond15:                                       ; preds = %for.inc, %for.body14
  %27 = load i32, i32* %k, align 4, !dbg !7697
  %28 = load i32, i32* %ns, align 4, !dbg !7699
  %cmp16 = icmp sle i32 %27, %28, !dbg !7700
  br i1 %cmp16, label %for.body17, label %for.end, !dbg !7701

for.body17:                                       ; preds = %for.cond15
  %29 = load i32, i32* %j, align 4, !dbg !7702
  %cmp18 = icmp eq i32 %29, 0, !dbg !7705
  br i1 %cmp18, label %land.lhs.true, label %if.end22, !dbg !7706

land.lhs.true:                                    ; preds = %for.body17
  %30 = load i32, i32* %k, align 4, !dbg !7707
  %cmp19 = icmp eq i32 %30, 0, !dbg !7708
  br i1 %cmp19, label %if.then21, label %lor.lhs.false, !dbg !7709

lor.lhs.false:                                    ; preds = %land.lhs.true
  %31 = load i32, i32* %k, align 4, !dbg !7710
  %32 = load i32, i32* %ns, align 4, !dbg !7711
  %cmp20 = icmp eq i32 %31, %32, !dbg !7712
  br i1 %cmp20, label %if.then21, label %if.end22, !dbg !7713

if.then21:                                        ; preds = %lor.lhs.false, %land.lhs.true
  br label %for.inc, !dbg !7714

if.end22:                                         ; preds = %lor.lhs.false, %for.body17
  %33 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !7715
  %34 = load i32, i32* %i, align 4, !dbg !7717
  %35 = load i32, i32* %j, align 4, !dbg !7718
  %36 = load i32, i32* %k, align 4, !dbg !7719
  %call23 = call zeroext i8 @is_canon(%struct.VMesh* %33, i32 %34, i32 %35, i32 %36), !dbg !7720
  %tobool24 = icmp ne i8 %call23, 0, !dbg !7720
  br i1 %tobool24, label %if.end26, label %if.then25, !dbg !7721

if.then25:                                        ; preds = %if.end22
  br label %for.inc, !dbg !7722

if.end26:                                         ; preds = %if.end22
  %37 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !7723
  %38 = load i32, i32* %i, align 4, !dbg !7724
  %39 = load i32, i32* %j, align 4, !dbg !7725
  %40 = load i32, i32* %k, align 4, !dbg !7726
  %call27 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %37, i32 %38, i32 %39, i32 %40), !dbg !7727
  %co = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call27, i32 0, i32 1, !dbg !7728
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !7727
  %41 = load %struct.VMesh*, %struct.VMesh** %vm1, align 8, !dbg !7729
  %42 = load i32, i32* %i, align 4, !dbg !7730
  %43 = load i32, i32* %j, align 4, !dbg !7731
  %44 = load i32, i32* %k, align 4, !dbg !7732
  %call28 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %41, i32 %42, i32 %43, i32 %44), !dbg !7733
  %co29 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call28, i32 0, i32 1, !dbg !7734
  %arraydecay30 = getelementptr inbounds [3 x float], [3 x float]* %co29, i64 0, i64 0, !dbg !7733
  call void @copy_v3_v3(float* %arraydecay, float* %arraydecay30), !dbg !7735
  %45 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !7736
  %46 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !7737
  %47 = load i32, i32* %i, align 4, !dbg !7738
  %48 = load i32, i32* %j, align 4, !dbg !7739
  %49 = load i32, i32* %k, align 4, !dbg !7740
  %50 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !7741
  %v31 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %50, i32 0, i32 0, !dbg !7742
  %51 = load %struct.BMVert*, %struct.BMVert** %v31, align 8, !dbg !7742
  call void @create_mesh_bmvert(%struct.BMesh* %45, %struct.VMesh* %46, i32 %47, i32 %48, i32 %49, %struct.BMVert* %51), !dbg !7743
  br label %for.inc, !dbg !7744

for.inc:                                          ; preds = %if.end26, %if.then25, %if.then21
  %52 = load i32, i32* %k, align 4, !dbg !7745
  %inc = add nsw i32 %52, 1, !dbg !7745
  store i32 %inc, i32* %k, align 4, !dbg !7745
  br label %for.cond15, !dbg !7746, !llvm.loop !7747

for.end:                                          ; preds = %for.cond15
  br label %for.inc32, !dbg !7749

for.inc32:                                        ; preds = %for.end
  %53 = load i32, i32* %j, align 4, !dbg !7750
  %inc33 = add nsw i32 %53, 1, !dbg !7750
  store i32 %inc33, i32* %j, align 4, !dbg !7750
  br label %for.cond12, !dbg !7751, !llvm.loop !7752

for.end34:                                        ; preds = %for.cond12
  br label %for.inc35, !dbg !7754

for.inc35:                                        ; preds = %for.end34
  %54 = load i32, i32* %i, align 4, !dbg !7755
  %inc36 = add nsw i32 %54, 1, !dbg !7755
  store i32 %inc36, i32* %i, align 4, !dbg !7755
  br label %for.cond, !dbg !7756, !llvm.loop !7757

for.end37:                                        ; preds = %for.cond
  %55 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !7759
  call void @vmesh_copy_equiv_verts(%struct.VMesh* %55), !dbg !7760
  %56 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !7761
  %boundstart = getelementptr inbounds %struct.VMesh, %struct.VMesh* %56, i32 0, i32 1, !dbg !7762
  %57 = load %struct.BoundVert*, %struct.BoundVert** %boundstart, align 8, !dbg !7762
  store %struct.BoundVert* %57, %struct.BoundVert** %v, align 8, !dbg !7763
  br label %do.body, !dbg !7764

do.body:                                          ; preds = %do.cond, %for.end37
  %58 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !7765
  %index = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %58, i32 0, i32 6, !dbg !7767
  %59 = load i32, i32* %index, align 8, !dbg !7767
  store i32 %59, i32* %i, align 4, !dbg !7768
  %60 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !7769
  %call38 = call %struct.BMFace* @boundvert_rep_face(%struct.BoundVert* %60), !dbg !7770
  store %struct.BMFace* %call38, %struct.BMFace** %f, align 8, !dbg !7771
  %61 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !7772
  %next = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %61, i32 0, i32 0, !dbg !7773
  %62 = load %struct.BoundVert*, %struct.BoundVert** %next, align 8, !dbg !7773
  %call39 = call %struct.BMFace* @boundvert_rep_face(%struct.BoundVert* %62), !dbg !7774
  store %struct.BMFace* %call39, %struct.BMFace** %f2, align 8, !dbg !7775
  store i32 0, i32* %j, align 4, !dbg !7776
  br label %for.cond40, !dbg !7778

for.cond40:                                       ; preds = %for.inc71, %do.body
  %63 = load i32, i32* %j, align 4, !dbg !7779
  %64 = load i32, i32* %ns2, align 4, !dbg !7781
  %cmp41 = icmp slt i32 %63, %64, !dbg !7782
  br i1 %cmp41, label %for.body42, label %for.end73, !dbg !7783

for.body42:                                       ; preds = %for.cond40
  store i32 0, i32* %k, align 4, !dbg !7784
  br label %for.cond43, !dbg !7787

for.cond43:                                       ; preds = %for.inc68, %for.body42
  %65 = load i32, i32* %k, align 4, !dbg !7788
  %66 = load i32, i32* %ns2, align 4, !dbg !7790
  %67 = load i32, i32* %odd, align 4, !dbg !7791
  %add = add nsw i32 %66, %67, !dbg !7792
  %cmp44 = icmp slt i32 %65, %add, !dbg !7793
  br i1 %cmp44, label %for.body45, label %for.end70, !dbg !7794

for.body45:                                       ; preds = %for.cond43
  %68 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !7795
  %69 = load i32, i32* %i, align 4, !dbg !7797
  %70 = load i32, i32* %j, align 4, !dbg !7798
  %71 = load i32, i32* %k, align 4, !dbg !7799
  %call46 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %68, i32 %69, i32 %70, i32 %71), !dbg !7800
  %v47 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call46, i32 0, i32 0, !dbg !7801
  %72 = load %struct.BMVert*, %struct.BMVert** %v47, align 8, !dbg !7801
  store %struct.BMVert* %72, %struct.BMVert** %bmv1, align 8, !dbg !7802
  %73 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !7803
  %74 = load i32, i32* %i, align 4, !dbg !7804
  %75 = load i32, i32* %j, align 4, !dbg !7805
  %76 = load i32, i32* %k, align 4, !dbg !7806
  %add48 = add nsw i32 %76, 1, !dbg !7807
  %call49 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %73, i32 %74, i32 %75, i32 %add48), !dbg !7808
  %v50 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call49, i32 0, i32 0, !dbg !7809
  %77 = load %struct.BMVert*, %struct.BMVert** %v50, align 8, !dbg !7809
  store %struct.BMVert* %77, %struct.BMVert** %bmv2, align 8, !dbg !7810
  %78 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !7811
  %79 = load i32, i32* %i, align 4, !dbg !7812
  %80 = load i32, i32* %j, align 4, !dbg !7813
  %add51 = add nsw i32 %80, 1, !dbg !7814
  %81 = load i32, i32* %k, align 4, !dbg !7815
  %add52 = add nsw i32 %81, 1, !dbg !7816
  %call53 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %78, i32 %79, i32 %add51, i32 %add52), !dbg !7817
  %v54 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call53, i32 0, i32 0, !dbg !7818
  %82 = load %struct.BMVert*, %struct.BMVert** %v54, align 8, !dbg !7818
  store %struct.BMVert* %82, %struct.BMVert** %bmv3, align 8, !dbg !7819
  %83 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !7820
  %84 = load i32, i32* %i, align 4, !dbg !7821
  %85 = load i32, i32* %j, align 4, !dbg !7822
  %add55 = add nsw i32 %85, 1, !dbg !7823
  %86 = load i32, i32* %k, align 4, !dbg !7824
  %call56 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %83, i32 %84, i32 %add55, i32 %86), !dbg !7825
  %v57 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call56, i32 0, i32 0, !dbg !7826
  %87 = load %struct.BMVert*, %struct.BMVert** %v57, align 8, !dbg !7826
  store %struct.BMVert* %87, %struct.BMVert** %bmv4, align 8, !dbg !7827
  %88 = load %struct.BMFace*, %struct.BMFace** %f, align 8, !dbg !7828
  store %struct.BMFace* %88, %struct.BMFace** %f23, align 8, !dbg !7829
  %89 = load i32, i32* %odd, align 4, !dbg !7830
  %tobool58 = icmp ne i32 %89, 0, !dbg !7830
  br i1 %tobool58, label %land.lhs.true59, label %if.end66, !dbg !7832

land.lhs.true59:                                  ; preds = %for.body45
  %90 = load i32, i32* %k, align 4, !dbg !7833
  %91 = load i32, i32* %ns2, align 4, !dbg !7834
  %cmp60 = icmp eq i32 %90, %91, !dbg !7835
  br i1 %cmp60, label %land.lhs.true61, label %if.end66, !dbg !7836

land.lhs.true61:                                  ; preds = %land.lhs.true59
  %92 = load %struct.BMFace*, %struct.BMFace** %f2, align 8, !dbg !7837
  %tobool62 = icmp ne %struct.BMFace* %92, null, !dbg !7837
  br i1 %tobool62, label %land.lhs.true63, label %if.end66, !dbg !7838

land.lhs.true63:                                  ; preds = %land.lhs.true61
  %93 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !7839
  %any_seam = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %93, i32 0, i32 8, !dbg !7840
  %94 = load i8, i8* %any_seam, align 8, !dbg !7840
  %tobool64 = icmp ne i8 %94, 0, !dbg !7839
  br i1 %tobool64, label %if.end66, label %if.then65, !dbg !7841

if.then65:                                        ; preds = %land.lhs.true63
  %95 = load %struct.BMFace*, %struct.BMFace** %f2, align 8, !dbg !7842
  store %struct.BMFace* %95, %struct.BMFace** %f23, align 8, !dbg !7843
  br label %if.end66, !dbg !7844

if.end66:                                         ; preds = %if.then65, %land.lhs.true63, %land.lhs.true61, %land.lhs.true59, %for.body45
  %96 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !7845
  %97 = load %struct.BMVert*, %struct.BMVert** %bmv1, align 8, !dbg !7846
  %98 = load %struct.BMVert*, %struct.BMVert** %bmv2, align 8, !dbg !7847
  %99 = load %struct.BMVert*, %struct.BMVert** %bmv3, align 8, !dbg !7848
  %100 = load %struct.BMVert*, %struct.BMVert** %bmv4, align 8, !dbg !7849
  %101 = load %struct.BMFace*, %struct.BMFace** %f, align 8, !dbg !7850
  %102 = load %struct.BMFace*, %struct.BMFace** %f23, align 8, !dbg !7851
  %103 = load %struct.BMFace*, %struct.BMFace** %f23, align 8, !dbg !7852
  %104 = load %struct.BMFace*, %struct.BMFace** %f, align 8, !dbg !7853
  %105 = load i32, i32* %mat_nr, align 4, !dbg !7854
  %call67 = call %struct.BMFace* @bev_create_quad_tri_ex(%struct.BMesh* %96, %struct.BMVert* %97, %struct.BMVert* %98, %struct.BMVert* %99, %struct.BMVert* %100, %struct.BMFace* %101, %struct.BMFace* %102, %struct.BMFace* %103, %struct.BMFace* %104, i32 %105), !dbg !7855
  br label %for.inc68, !dbg !7856

for.inc68:                                        ; preds = %if.end66
  %106 = load i32, i32* %k, align 4, !dbg !7857
  %inc69 = add nsw i32 %106, 1, !dbg !7857
  store i32 %inc69, i32* %k, align 4, !dbg !7857
  br label %for.cond43, !dbg !7858, !llvm.loop !7859

for.end70:                                        ; preds = %for.cond43
  br label %for.inc71, !dbg !7861

for.inc71:                                        ; preds = %for.end70
  %107 = load i32, i32* %j, align 4, !dbg !7862
  %inc72 = add nsw i32 %107, 1, !dbg !7862
  store i32 %inc72, i32* %j, align 4, !dbg !7862
  br label %for.cond40, !dbg !7863, !llvm.loop !7864

for.end73:                                        ; preds = %for.cond40
  br label %do.cond, !dbg !7866

do.cond:                                          ; preds = %for.end73
  %108 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !7867
  %next74 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %108, i32 0, i32 0, !dbg !7868
  %109 = load %struct.BoundVert*, %struct.BoundVert** %next74, align 8, !dbg !7868
  store %struct.BoundVert* %109, %struct.BoundVert** %v, align 8, !dbg !7869
  %110 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !7870
  %boundstart75 = getelementptr inbounds %struct.VMesh, %struct.VMesh* %110, i32 0, i32 1, !dbg !7871
  %111 = load %struct.BoundVert*, %struct.BoundVert** %boundstart75, align 8, !dbg !7871
  %cmp76 = icmp ne %struct.BoundVert* %109, %111, !dbg !7872
  br i1 %cmp76, label %do.body, label %do.end, !dbg !7866, !llvm.loop !7873

do.end:                                           ; preds = %do.cond
  %112 = load i32, i32* %odd, align 4, !dbg !7875
  %tobool77 = icmp ne i32 %112, 0, !dbg !7875
  br i1 %tobool77, label %if.end108, label %if.then78, !dbg !7877

if.then78:                                        ; preds = %do.end
  %113 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !7878
  %boundstart79 = getelementptr inbounds %struct.VMesh, %struct.VMesh* %113, i32 0, i32 1, !dbg !7880
  %114 = load %struct.BoundVert*, %struct.BoundVert** %boundstart79, align 8, !dbg !7880
  store %struct.BoundVert* %114, %struct.BoundVert** %v, align 8, !dbg !7881
  br label %do.body80, !dbg !7882

do.body80:                                        ; preds = %do.cond97, %if.then78
  %115 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !7883
  %index81 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %115, i32 0, i32 6, !dbg !7885
  %116 = load i32, i32* %index81, align 8, !dbg !7885
  store i32 %116, i32* %i, align 4, !dbg !7886
  %117 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !7887
  %any_seam82 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %117, i32 0, i32 8, !dbg !7889
  %118 = load i8, i8* %any_seam82, align 8, !dbg !7889
  %tobool83 = icmp ne i8 %118, 0, !dbg !7887
  br i1 %tobool83, label %if.end96, label %if.then84, !dbg !7890

if.then84:                                        ; preds = %do.body80
  store i32 1, i32* %ring, align 4, !dbg !7891
  br label %for.cond85, !dbg !7894

for.cond85:                                       ; preds = %for.inc93, %if.then84
  %119 = load i32, i32* %ring, align 4, !dbg !7895
  %120 = load i32, i32* %ns2, align 4, !dbg !7897
  %cmp86 = icmp slt i32 %119, %120, !dbg !7898
  br i1 %cmp86, label %for.body87, label %for.end95, !dbg !7899

for.body87:                                       ; preds = %for.cond85
  call void @llvm.dbg.declare(metadata %struct.BMVert** %v_uv, metadata !7900, metadata !DIExpression()), !dbg !7902
  %121 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !7903
  %122 = load i32, i32* %i, align 4, !dbg !7904
  %123 = load i32, i32* %ring, align 4, !dbg !7905
  %124 = load i32, i32* %ns2, align 4, !dbg !7906
  %call88 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %121, i32 %122, i32 %123, i32 %124), !dbg !7907
  %v89 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call88, i32 0, i32 0, !dbg !7908
  %125 = load %struct.BMVert*, %struct.BMVert** %v89, align 8, !dbg !7908
  store %struct.BMVert* %125, %struct.BMVert** %v_uv, align 8, !dbg !7902
  %126 = load %struct.BMVert*, %struct.BMVert** %v_uv, align 8, !dbg !7909
  %tobool90 = icmp ne %struct.BMVert* %126, null, !dbg !7909
  br i1 %tobool90, label %if.then91, label %if.end92, !dbg !7911

if.then91:                                        ; preds = %for.body87
  %127 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !7912
  %128 = load %struct.BMVert*, %struct.BMVert** %v_uv, align 8, !dbg !7914
  call void @bev_merge_uvs(%struct.BMesh* %127, %struct.BMVert* %128), !dbg !7915
  br label %if.end92, !dbg !7916

if.end92:                                         ; preds = %if.then91, %for.body87
  br label %for.inc93, !dbg !7917

for.inc93:                                        ; preds = %if.end92
  %129 = load i32, i32* %ring, align 4, !dbg !7918
  %inc94 = add nsw i32 %129, 1, !dbg !7918
  store i32 %inc94, i32* %ring, align 4, !dbg !7918
  br label %for.cond85, !dbg !7919, !llvm.loop !7920

for.end95:                                        ; preds = %for.cond85
  br label %if.end96, !dbg !7922

if.end96:                                         ; preds = %for.end95, %do.body80
  br label %do.cond97, !dbg !7923

do.cond97:                                        ; preds = %if.end96
  %130 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !7924
  %next98 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %130, i32 0, i32 0, !dbg !7925
  %131 = load %struct.BoundVert*, %struct.BoundVert** %next98, align 8, !dbg !7925
  store %struct.BoundVert* %131, %struct.BoundVert** %v, align 8, !dbg !7926
  %132 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !7927
  %boundstart99 = getelementptr inbounds %struct.VMesh, %struct.VMesh* %132, i32 0, i32 1, !dbg !7928
  %133 = load %struct.BoundVert*, %struct.BoundVert** %boundstart99, align 8, !dbg !7928
  %cmp100 = icmp ne %struct.BoundVert* %131, %133, !dbg !7929
  br i1 %cmp100, label %do.body80, label %do.end101, !dbg !7923, !llvm.loop !7930

do.end101:                                        ; preds = %do.cond97
  %134 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !7932
  %any_seam102 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %134, i32 0, i32 5, !dbg !7934
  %135 = load i8, i8* %any_seam102, align 8, !dbg !7934
  %tobool103 = icmp ne i8 %135, 0, !dbg !7932
  br i1 %tobool103, label %if.end107, label %if.then104, !dbg !7935

if.then104:                                       ; preds = %do.end101
  %136 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !7936
  %137 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !7937
  %138 = load i32, i32* %ns2, align 4, !dbg !7938
  %139 = load i32, i32* %ns2, align 4, !dbg !7939
  %call105 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %137, i32 0, i32 %138, i32 %139), !dbg !7940
  %v106 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call105, i32 0, i32 0, !dbg !7941
  %140 = load %struct.BMVert*, %struct.BMVert** %v106, align 8, !dbg !7941
  call void @bev_merge_uvs(%struct.BMesh* %136, %struct.BMVert* %140), !dbg !7942
  br label %if.end107, !dbg !7942

if.end107:                                        ; preds = %if.then104, %do.end101
  br label %if.end108, !dbg !7943

if.end108:                                        ; preds = %if.end107, %do.end
  %141 = load i32, i32* %odd, align 4, !dbg !7944
  %tobool109 = icmp ne i32 %141, 0, !dbg !7944
  br i1 %tobool109, label %if.then110, label %if.end214, !dbg !7946

if.then110:                                       ; preds = %if.end108
  call void @llvm.dbg.declare(metadata %struct.BMVert*** %vv, metadata !7947, metadata !DIExpression()), !dbg !7949
  store %struct.BMVert** null, %struct.BMVert*** %vv, align 8, !dbg !7949
  call void @llvm.dbg.declare(metadata %struct.BMFace*** %vf, metadata !7950, metadata !DIExpression()), !dbg !7951
  store %struct.BMFace** null, %struct.BMFace*** %vf, align 8, !dbg !7951
  call void @llvm.dbg.declare(metadata i32* %_vv_count, metadata !7952, metadata !DIExpression()), !dbg !7953
  store i32 0, i32* %_vv_count, align 4, !dbg !7953
  call void @llvm.dbg.declare(metadata [32 x i8*]* %_vv_static, metadata !7954, metadata !DIExpression()), !dbg !7953
  call void @llvm.dbg.declare(metadata i32* %_vf_count, metadata !7955, metadata !DIExpression()), !dbg !7956
  store i32 0, i32* %_vf_count, align 4, !dbg !7956
  call void @llvm.dbg.declare(metadata [32 x i8*]* %_vf_static, metadata !7957, metadata !DIExpression()), !dbg !7956
  %142 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !7958
  %boundstart111 = getelementptr inbounds %struct.VMesh, %struct.VMesh* %142, i32 0, i32 1, !dbg !7959
  %143 = load %struct.BoundVert*, %struct.BoundVert** %boundstart111, align 8, !dbg !7959
  store %struct.BoundVert* %143, %struct.BoundVert** %v, align 8, !dbg !7960
  br label %do.body112, !dbg !7961

do.body112:                                       ; preds = %do.cond197, %if.then110
  %144 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !7962
  %index113 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %144, i32 0, i32 6, !dbg !7964
  %145 = load i32, i32* %index113, align 8, !dbg !7964
  store i32 %145, i32* %i, align 4, !dbg !7965
  %146 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !7966
  %147 = bitcast %struct.BMVert** %146 to i8*, !dbg !7966
  %cmp114 = icmp eq i8* %147, null, !dbg !7966
  br i1 %cmp114, label %land.lhs.true115, label %cond.false, !dbg !7966

land.lhs.true115:                                 ; preds = %do.body112
  %148 = load i32, i32* %_vv_count, align 4, !dbg !7966
  %add116 = add nsw i32 %148, 1, !dbg !7966
  %conv = sext i32 %add116 to i64, !dbg !7966
  %cmp117 = icmp uge i64 32, %conv, !dbg !7966
  br i1 %cmp117, label %cond.true, label %cond.false, !dbg !7966

cond.true:                                        ; preds = %land.lhs.true115
  %arraydecay119 = getelementptr inbounds [32 x i8*], [32 x i8*]* %_vv_static, i64 0, i64 0, !dbg !7966
  %149 = bitcast i8** %arraydecay119 to i8*, !dbg !7966
  %150 = bitcast i8* %149 to %struct.BMVert**, !dbg !7966
  store %struct.BMVert** %150, %struct.BMVert*** %vv, align 8, !dbg !7966
  br label %cond.end144, !dbg !7966

cond.false:                                       ; preds = %land.lhs.true115, %do.body112
  %151 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !7966
  %152 = bitcast %struct.BMVert** %151 to i8*, !dbg !7966
  %arraydecay120 = getelementptr inbounds [32 x i8*], [32 x i8*]* %_vv_static, i64 0, i64 0, !dbg !7966
  %153 = bitcast i8** %arraydecay120 to i8*, !dbg !7966
  %cmp121 = icmp eq i8* %152, %153, !dbg !7966
  br i1 %cmp121, label %land.lhs.true123, label %cond.false127, !dbg !7966

land.lhs.true123:                                 ; preds = %cond.false
  %154 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !7966
  %155 = bitcast %struct.BMVert** %154 to i8*, !dbg !7966
  %cmp124 = icmp ne i8* %155, null, !dbg !7966
  br i1 %cmp124, label %cond.true126, label %cond.false127, !dbg !7966

cond.true126:                                     ; preds = %land.lhs.true123
  br label %cond.end134, !dbg !7966

cond.false127:                                    ; preds = %land.lhs.true123, %cond.false
  %156 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !7966
  %cmp128 = icmp eq %struct.BMVert** %156, null, !dbg !7966
  br i1 %cmp128, label %cond.true130, label %cond.false131, !dbg !7966

cond.true130:                                     ; preds = %cond.false127
  br label %cond.end, !dbg !7966

cond.false131:                                    ; preds = %cond.false127
  %157 = load i64 (i8*)*, i64 (i8*)** @MEM_allocN_len, align 8, !dbg !7966
  %158 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !7966
  %159 = bitcast %struct.BMVert** %158 to i8*, !dbg !7966
  %call132 = call i64 %157(i8* %159), !dbg !7966
  %div133 = udiv i64 %call132, 8, !dbg !7966
  br label %cond.end, !dbg !7966

cond.end:                                         ; preds = %cond.false131, %cond.true130
  %cond = phi i64 [ 0, %cond.true130 ], [ %div133, %cond.false131 ], !dbg !7966
  br label %cond.end134, !dbg !7966

cond.end134:                                      ; preds = %cond.end, %cond.true126
  %cond135 = phi i64 [ 32, %cond.true126 ], [ %cond, %cond.end ], !dbg !7966
  %160 = load i32, i32* %_vv_count, align 4, !dbg !7966
  %add136 = add nsw i32 %160, 1, !dbg !7966
  %conv137 = sext i32 %add136 to i64, !dbg !7966
  %cmp138 = icmp uge i64 %cond135, %conv137, !dbg !7966
  br i1 %cmp138, label %cond.true140, label %cond.false141, !dbg !7966

cond.true140:                                     ; preds = %cond.end134
  br label %cond.end143, !dbg !7966

cond.false141:                                    ; preds = %cond.end134
  %161 = bitcast %struct.BMVert*** %vv to i8**, !dbg !7966
  %arraydecay142 = getelementptr inbounds [32 x i8*], [32 x i8*]* %_vv_static, i64 0, i64 0, !dbg !7966
  %162 = bitcast i8** %arraydecay142 to i8*, !dbg !7966
  %163 = load i32, i32* %_vv_count, align 4, !dbg !7966
  call void @_bli_array_grow_func(i8** %161, i8* %162, i32 8, i32 %163, i32 1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0)), !dbg !7966
  br label %cond.end143, !dbg !7966

cond.end143:                                      ; preds = %cond.false141, %cond.true140
  br label %cond.end144, !dbg !7966

cond.end144:                                      ; preds = %cond.end143, %cond.true
  %164 = load i32, i32* %_vv_count, align 4, !dbg !7966
  %add145 = add nsw i32 %164, 1, !dbg !7966
  store i32 %add145, i32* %_vv_count, align 4, !dbg !7966
  %165 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !7966
  %166 = load i32, i32* %i, align 4, !dbg !7966
  %167 = load i32, i32* %ns2, align 4, !dbg !7966
  %168 = load i32, i32* %ns2, align 4, !dbg !7966
  %call146 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %165, i32 %166, i32 %167, i32 %168), !dbg !7966
  %v147 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call146, i32 0, i32 0, !dbg !7966
  %169 = load %struct.BMVert*, %struct.BMVert** %v147, align 8, !dbg !7966
  %170 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !7966
  %171 = load i32, i32* %_vv_count, align 4, !dbg !7966
  %sub = sub nsw i32 %171, 1, !dbg !7966
  %idxprom = sext i32 %sub to i64, !dbg !7966
  %arrayidx = getelementptr inbounds %struct.BMVert*, %struct.BMVert** %170, i64 %idxprom, !dbg !7966
  store %struct.BMVert* %169, %struct.BMVert** %arrayidx, align 8, !dbg !7966
  %172 = load %struct.BMFace**, %struct.BMFace*** %vf, align 8, !dbg !7967
  %173 = bitcast %struct.BMFace** %172 to i8*, !dbg !7967
  %cmp148 = icmp eq i8* %173, null, !dbg !7967
  br i1 %cmp148, label %land.lhs.true150, label %cond.false157, !dbg !7967

land.lhs.true150:                                 ; preds = %cond.end144
  %174 = load i32, i32* %_vf_count, align 4, !dbg !7967
  %add151 = add nsw i32 %174, 1, !dbg !7967
  %conv152 = sext i32 %add151 to i64, !dbg !7967
  %cmp153 = icmp uge i64 32, %conv152, !dbg !7967
  br i1 %cmp153, label %cond.true155, label %cond.false157, !dbg !7967

cond.true155:                                     ; preds = %land.lhs.true150
  %arraydecay156 = getelementptr inbounds [32 x i8*], [32 x i8*]* %_vf_static, i64 0, i64 0, !dbg !7967
  %175 = bitcast i8** %arraydecay156 to i8*, !dbg !7967
  %176 = bitcast i8* %175 to %struct.BMFace**, !dbg !7967
  store %struct.BMFace** %176, %struct.BMFace*** %vf, align 8, !dbg !7967
  br label %cond.end184, !dbg !7967

cond.false157:                                    ; preds = %land.lhs.true150, %cond.end144
  %177 = load %struct.BMFace**, %struct.BMFace*** %vf, align 8, !dbg !7967
  %178 = bitcast %struct.BMFace** %177 to i8*, !dbg !7967
  %arraydecay158 = getelementptr inbounds [32 x i8*], [32 x i8*]* %_vf_static, i64 0, i64 0, !dbg !7967
  %179 = bitcast i8** %arraydecay158 to i8*, !dbg !7967
  %cmp159 = icmp eq i8* %178, %179, !dbg !7967
  br i1 %cmp159, label %land.lhs.true161, label %cond.false165, !dbg !7967

land.lhs.true161:                                 ; preds = %cond.false157
  %180 = load %struct.BMFace**, %struct.BMFace*** %vf, align 8, !dbg !7967
  %181 = bitcast %struct.BMFace** %180 to i8*, !dbg !7967
  %cmp162 = icmp ne i8* %181, null, !dbg !7967
  br i1 %cmp162, label %cond.true164, label %cond.false165, !dbg !7967

cond.true164:                                     ; preds = %land.lhs.true161
  br label %cond.end174, !dbg !7967

cond.false165:                                    ; preds = %land.lhs.true161, %cond.false157
  %182 = load %struct.BMFace**, %struct.BMFace*** %vf, align 8, !dbg !7967
  %cmp166 = icmp eq %struct.BMFace** %182, null, !dbg !7967
  br i1 %cmp166, label %cond.true168, label %cond.false169, !dbg !7967

cond.true168:                                     ; preds = %cond.false165
  br label %cond.end172, !dbg !7967

cond.false169:                                    ; preds = %cond.false165
  %183 = load i64 (i8*)*, i64 (i8*)** @MEM_allocN_len, align 8, !dbg !7967
  %184 = load %struct.BMFace**, %struct.BMFace*** %vf, align 8, !dbg !7967
  %185 = bitcast %struct.BMFace** %184 to i8*, !dbg !7967
  %call170 = call i64 %183(i8* %185), !dbg !7967
  %div171 = udiv i64 %call170, 8, !dbg !7967
  br label %cond.end172, !dbg !7967

cond.end172:                                      ; preds = %cond.false169, %cond.true168
  %cond173 = phi i64 [ 0, %cond.true168 ], [ %div171, %cond.false169 ], !dbg !7967
  br label %cond.end174, !dbg !7967

cond.end174:                                      ; preds = %cond.end172, %cond.true164
  %cond175 = phi i64 [ 32, %cond.true164 ], [ %cond173, %cond.end172 ], !dbg !7967
  %186 = load i32, i32* %_vf_count, align 4, !dbg !7967
  %add176 = add nsw i32 %186, 1, !dbg !7967
  %conv177 = sext i32 %add176 to i64, !dbg !7967
  %cmp178 = icmp uge i64 %cond175, %conv177, !dbg !7967
  br i1 %cmp178, label %cond.true180, label %cond.false181, !dbg !7967

cond.true180:                                     ; preds = %cond.end174
  br label %cond.end183, !dbg !7967

cond.false181:                                    ; preds = %cond.end174
  %187 = bitcast %struct.BMFace*** %vf to i8**, !dbg !7967
  %arraydecay182 = getelementptr inbounds [32 x i8*], [32 x i8*]* %_vf_static, i64 0, i64 0, !dbg !7967
  %188 = bitcast i8** %arraydecay182 to i8*, !dbg !7967
  %189 = load i32, i32* %_vf_count, align 4, !dbg !7967
  call void @_bli_array_grow_func(i8** %187, i8* %188, i32 8, i32 %189, i32 1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0)), !dbg !7967
  br label %cond.end183, !dbg !7967

cond.end183:                                      ; preds = %cond.false181, %cond.true180
  br label %cond.end184, !dbg !7967

cond.end184:                                      ; preds = %cond.end183, %cond.true155
  %190 = load i32, i32* %_vf_count, align 4, !dbg !7967
  %add185 = add nsw i32 %190, 1, !dbg !7967
  store i32 %add185, i32* %_vf_count, align 4, !dbg !7967
  %191 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !7967
  %any_seam186 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %191, i32 0, i32 8, !dbg !7967
  %192 = load i8, i8* %any_seam186, align 8, !dbg !7967
  %conv187 = zext i8 %192 to i32, !dbg !7967
  %tobool188 = icmp ne i32 %conv187, 0, !dbg !7967
  br i1 %tobool188, label %cond.true189, label %cond.false190, !dbg !7967

cond.true189:                                     ; preds = %cond.end184
  %193 = load %struct.BMFace*, %struct.BMFace** %f, align 8, !dbg !7967
  br label %cond.end192, !dbg !7967

cond.false190:                                    ; preds = %cond.end184
  %194 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !7967
  %call191 = call %struct.BMFace* @boundvert_rep_face(%struct.BoundVert* %194), !dbg !7967
  br label %cond.end192, !dbg !7967

cond.end192:                                      ; preds = %cond.false190, %cond.true189
  %cond193 = phi %struct.BMFace* [ %193, %cond.true189 ], [ %call191, %cond.false190 ], !dbg !7967
  %195 = load %struct.BMFace**, %struct.BMFace*** %vf, align 8, !dbg !7967
  %196 = load i32, i32* %_vf_count, align 4, !dbg !7967
  %sub194 = sub nsw i32 %196, 1, !dbg !7967
  %idxprom195 = sext i32 %sub194 to i64, !dbg !7967
  %arrayidx196 = getelementptr inbounds %struct.BMFace*, %struct.BMFace** %195, i64 %idxprom195, !dbg !7967
  store %struct.BMFace* %cond193, %struct.BMFace** %arrayidx196, align 8, !dbg !7967
  br label %do.cond197, !dbg !7968

do.cond197:                                       ; preds = %cond.end192
  %197 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !7969
  %next198 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %197, i32 0, i32 0, !dbg !7970
  %198 = load %struct.BoundVert*, %struct.BoundVert** %next198, align 8, !dbg !7970
  store %struct.BoundVert* %198, %struct.BoundVert** %v, align 8, !dbg !7971
  %199 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !7972
  %boundstart199 = getelementptr inbounds %struct.VMesh, %struct.VMesh* %199, i32 0, i32 1, !dbg !7973
  %200 = load %struct.BoundVert*, %struct.BoundVert** %boundstart199, align 8, !dbg !7973
  %cmp200 = icmp ne %struct.BoundVert* %198, %200, !dbg !7974
  br i1 %cmp200, label %do.body112, label %do.end202, !dbg !7968, !llvm.loop !7975

do.end202:                                        ; preds = %do.cond197
  %201 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !7977
  %boundstart203 = getelementptr inbounds %struct.VMesh, %struct.VMesh* %201, i32 0, i32 1, !dbg !7978
  %202 = load %struct.BoundVert*, %struct.BoundVert** %boundstart203, align 8, !dbg !7978
  %call204 = call %struct.BMFace* @boundvert_rep_face(%struct.BoundVert* %202), !dbg !7979
  store %struct.BMFace* %call204, %struct.BMFace** %f, align 8, !dbg !7980
  %203 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !7981
  %204 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !7982
  %205 = load i32, i32* %_vv_count, align 4, !dbg !7983
  %206 = load %struct.BMFace**, %struct.BMFace*** %vf, align 8, !dbg !7984
  %207 = load %struct.BMFace*, %struct.BMFace** %f, align 8, !dbg !7985
  %208 = load i32, i32* %mat_nr, align 4, !dbg !7986
  %call205 = call %struct.BMFace* @bev_create_ngon(%struct.BMesh* %203, %struct.BMVert** %204, i32 %205, %struct.BMFace** %206, %struct.BMFace* %207, i32 %208, i8 zeroext 1), !dbg !7987
  %209 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !7988
  %tobool206 = icmp ne %struct.BMVert** %209, null, !dbg !7988
  br i1 %tobool206, label %land.lhs.true207, label %if.end213, !dbg !7988

land.lhs.true207:                                 ; preds = %do.end202
  %210 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !7988
  %211 = bitcast %struct.BMVert** %210 to i8*, !dbg !7988
  %arraydecay208 = getelementptr inbounds [32 x i8*], [32 x i8*]* %_vv_static, i64 0, i64 0, !dbg !7988
  %212 = bitcast i8** %arraydecay208 to i8*, !dbg !7988
  %cmp209 = icmp ne i8* %211, %212, !dbg !7988
  br i1 %cmp209, label %if.then211, label %if.end213, !dbg !7990

if.then211:                                       ; preds = %land.lhs.true207
  %213 = load i32, i32* %_vv_count, align 4, !dbg !7991
  %arraydecay212 = getelementptr inbounds [32 x i8*], [32 x i8*]* %_vv_static, i64 0, i64 0, !dbg !7991
  %214 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !7991
  %215 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !7991
  %216 = bitcast %struct.BMVert** %215 to i8*, !dbg !7991
  call void %214(i8* %216), !dbg !7991
  br label %if.end213, !dbg !7991

if.end213:                                        ; preds = %if.then211, %land.lhs.true207, %do.end202
  br label %if.end214, !dbg !7993

if.end214:                                        ; preds = %if.end213, %if.end108
  ret void, !dbg !7994
}

; Function Attrs: noinline nounwind uwtable
define internal void @bevel_build_trifan(%struct.BevelParams* %bp, %struct.BMesh* %bm, %struct.BevVert* %bv) #0 !dbg !7995 {
entry:
  %bp.addr = alloca %struct.BevelParams*, align 8
  %bm.addr = alloca %struct.BMesh*, align 8
  %bv.addr = alloca %struct.BevVert*, align 8
  %f = alloca %struct.BMFace*, align 8
  %l_fan = alloca %struct.BMLoop*, align 8
  %v_fan = alloca %struct.BMVert*, align 8
  %l_new = alloca %struct.BMLoop*, align 8
  %f_new = alloca %struct.BMFace*, align 8
  store %struct.BevelParams* %bp, %struct.BevelParams** %bp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BevelParams** %bp.addr, metadata !7996, metadata !DIExpression()), !dbg !7997
  store %struct.BMesh* %bm, %struct.BMesh** %bm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMesh** %bm.addr, metadata !7998, metadata !DIExpression()), !dbg !7999
  store %struct.BevVert* %bv, %struct.BevVert** %bv.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BevVert** %bv.addr, metadata !8000, metadata !DIExpression()), !dbg !8001
  call void @llvm.dbg.declare(metadata %struct.BMFace** %f, metadata !8002, metadata !DIExpression()), !dbg !8003
  %0 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !8004
  %1 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !8005
  %2 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !8006
  %call = call %struct.BMFace* @bevel_build_poly(%struct.BevelParams* %0, %struct.BMesh* %1, %struct.BevVert* %2), !dbg !8007
  store %struct.BMFace* %call, %struct.BMFace** %f, align 8, !dbg !8008
  %3 = load %struct.BMFace*, %struct.BMFace** %f, align 8, !dbg !8009
  %tobool = icmp ne %struct.BMFace* %3, null, !dbg !8009
  br i1 %tobool, label %if.then, label %if.end45, !dbg !8011

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.BMLoop** %l_fan, metadata !8012, metadata !DIExpression()), !dbg !8014
  %4 = load %struct.BMFace*, %struct.BMFace** %f, align 8, !dbg !8015
  %l_first = getelementptr inbounds %struct.BMFace, %struct.BMFace* %4, i32 0, i32 2, !dbg !8015
  %5 = load %struct.BMLoop*, %struct.BMLoop** %l_first, align 8, !dbg !8015
  %prev = getelementptr inbounds %struct.BMLoop, %struct.BMLoop* %5, i32 0, i32 7, !dbg !8016
  %6 = load %struct.BMLoop*, %struct.BMLoop** %prev, align 8, !dbg !8016
  store %struct.BMLoop* %6, %struct.BMLoop** %l_fan, align 8, !dbg !8014
  call void @llvm.dbg.declare(metadata %struct.BMVert** %v_fan, metadata !8017, metadata !DIExpression()), !dbg !8018
  %7 = load %struct.BMLoop*, %struct.BMLoop** %l_fan, align 8, !dbg !8019
  %v = getelementptr inbounds %struct.BMLoop, %struct.BMLoop* %7, i32 0, i32 1, !dbg !8020
  %8 = load %struct.BMVert*, %struct.BMVert** %v, align 8, !dbg !8020
  store %struct.BMVert* %8, %struct.BMVert** %v_fan, align 8, !dbg !8018
  br label %while.cond, !dbg !8021

while.cond:                                       ; preds = %if.end44, %if.then
  %9 = load %struct.BMFace*, %struct.BMFace** %f, align 8, !dbg !8022
  %len = getelementptr inbounds %struct.BMFace, %struct.BMFace* %9, i32 0, i32 3, !dbg !8023
  %10 = load i32, i32* %len, align 8, !dbg !8023
  %cmp = icmp sgt i32 %10, 3, !dbg !8024
  br i1 %cmp, label %while.body, label %while.end, !dbg !8021

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %struct.BMLoop** %l_new, metadata !8025, metadata !DIExpression()), !dbg !8027
  call void @llvm.dbg.declare(metadata %struct.BMFace** %f_new, metadata !8028, metadata !DIExpression()), !dbg !8029
  %11 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !8030
  %12 = load %struct.BMFace*, %struct.BMFace** %f, align 8, !dbg !8031
  %13 = load %struct.BMLoop*, %struct.BMLoop** %l_fan, align 8, !dbg !8032
  %14 = load %struct.BMLoop*, %struct.BMLoop** %l_fan, align 8, !dbg !8033
  %next = getelementptr inbounds %struct.BMLoop, %struct.BMLoop* %14, i32 0, i32 6, !dbg !8034
  %15 = load %struct.BMLoop*, %struct.BMLoop** %next, align 8, !dbg !8034
  %next1 = getelementptr inbounds %struct.BMLoop, %struct.BMLoop* %15, i32 0, i32 6, !dbg !8035
  %16 = load %struct.BMLoop*, %struct.BMLoop** %next1, align 8, !dbg !8035
  %call2 = call %struct.BMFace* @BM_face_split(%struct.BMesh* %11, %struct.BMFace* %12, %struct.BMLoop* %13, %struct.BMLoop* %16, %struct.BMLoop** %l_new, %struct.BMEdge* null, i8 zeroext 0), !dbg !8036
  store %struct.BMFace* %call2, %struct.BMFace** %f_new, align 8, !dbg !8037
  %17 = load %struct.BMFace*, %struct.BMFace** %f_new, align 8, !dbg !8038
  %len3 = getelementptr inbounds %struct.BMFace, %struct.BMFace* %17, i32 0, i32 3, !dbg !8040
  %18 = load i32, i32* %len3, align 8, !dbg !8040
  %19 = load %struct.BMFace*, %struct.BMFace** %f, align 8, !dbg !8041
  %len4 = getelementptr inbounds %struct.BMFace, %struct.BMFace* %19, i32 0, i32 3, !dbg !8042
  %20 = load i32, i32* %len4, align 8, !dbg !8042
  %cmp5 = icmp sgt i32 %18, %20, !dbg !8043
  br i1 %cmp5, label %if.then6, label %if.else24, !dbg !8044

if.then6:                                         ; preds = %while.body
  %21 = load %struct.BMFace*, %struct.BMFace** %f_new, align 8, !dbg !8045
  store %struct.BMFace* %21, %struct.BMFace** %f, align 8, !dbg !8047
  %22 = load %struct.BMLoop*, %struct.BMLoop** %l_new, align 8, !dbg !8048
  %v7 = getelementptr inbounds %struct.BMLoop, %struct.BMLoop* %22, i32 0, i32 1, !dbg !8050
  %23 = load %struct.BMVert*, %struct.BMVert** %v7, align 8, !dbg !8050
  %24 = load %struct.BMVert*, %struct.BMVert** %v_fan, align 8, !dbg !8051
  %cmp8 = icmp eq %struct.BMVert* %23, %24, !dbg !8052
  br i1 %cmp8, label %if.then9, label %if.else, !dbg !8053

if.then9:                                         ; preds = %if.then6
  %25 = load %struct.BMLoop*, %struct.BMLoop** %l_new, align 8, !dbg !8054
  store %struct.BMLoop* %25, %struct.BMLoop** %l_fan, align 8, !dbg !8056
  br label %if.end23, !dbg !8057

if.else:                                          ; preds = %if.then6
  %26 = load %struct.BMLoop*, %struct.BMLoop** %l_new, align 8, !dbg !8058
  %next10 = getelementptr inbounds %struct.BMLoop, %struct.BMLoop* %26, i32 0, i32 6, !dbg !8060
  %27 = load %struct.BMLoop*, %struct.BMLoop** %next10, align 8, !dbg !8060
  %v11 = getelementptr inbounds %struct.BMLoop, %struct.BMLoop* %27, i32 0, i32 1, !dbg !8061
  %28 = load %struct.BMVert*, %struct.BMVert** %v11, align 8, !dbg !8061
  %29 = load %struct.BMVert*, %struct.BMVert** %v_fan, align 8, !dbg !8062
  %cmp12 = icmp eq %struct.BMVert* %28, %29, !dbg !8063
  br i1 %cmp12, label %if.then13, label %if.else15, !dbg !8064

if.then13:                                        ; preds = %if.else
  %30 = load %struct.BMLoop*, %struct.BMLoop** %l_new, align 8, !dbg !8065
  %next14 = getelementptr inbounds %struct.BMLoop, %struct.BMLoop* %30, i32 0, i32 6, !dbg !8067
  %31 = load %struct.BMLoop*, %struct.BMLoop** %next14, align 8, !dbg !8067
  store %struct.BMLoop* %31, %struct.BMLoop** %l_fan, align 8, !dbg !8068
  br label %if.end22, !dbg !8069

if.else15:                                        ; preds = %if.else
  %32 = load %struct.BMLoop*, %struct.BMLoop** %l_new, align 8, !dbg !8070
  %prev16 = getelementptr inbounds %struct.BMLoop, %struct.BMLoop* %32, i32 0, i32 7, !dbg !8072
  %33 = load %struct.BMLoop*, %struct.BMLoop** %prev16, align 8, !dbg !8072
  %v17 = getelementptr inbounds %struct.BMLoop, %struct.BMLoop* %33, i32 0, i32 1, !dbg !8073
  %34 = load %struct.BMVert*, %struct.BMVert** %v17, align 8, !dbg !8073
  %35 = load %struct.BMVert*, %struct.BMVert** %v_fan, align 8, !dbg !8074
  %cmp18 = icmp eq %struct.BMVert* %34, %35, !dbg !8075
  br i1 %cmp18, label %if.then19, label %if.else21, !dbg !8076

if.then19:                                        ; preds = %if.else15
  %36 = load %struct.BMLoop*, %struct.BMLoop** %l_new, align 8, !dbg !8077
  %prev20 = getelementptr inbounds %struct.BMLoop, %struct.BMLoop* %36, i32 0, i32 7, !dbg !8079
  %37 = load %struct.BMLoop*, %struct.BMLoop** %prev20, align 8, !dbg !8079
  store %struct.BMLoop* %37, %struct.BMLoop** %l_fan, align 8, !dbg !8080
  br label %if.end, !dbg !8081

if.else21:                                        ; preds = %if.else15
  br label %if.end

if.end:                                           ; preds = %if.else21, %if.then19
  br label %if.end22

if.end22:                                         ; preds = %if.end, %if.then13
  br label %if.end23

if.end23:                                         ; preds = %if.end22, %if.then9
  br label %if.end44, !dbg !8082

if.else24:                                        ; preds = %while.body
  %38 = load %struct.BMLoop*, %struct.BMLoop** %l_fan, align 8, !dbg !8083
  %v25 = getelementptr inbounds %struct.BMLoop, %struct.BMLoop* %38, i32 0, i32 1, !dbg !8086
  %39 = load %struct.BMVert*, %struct.BMVert** %v25, align 8, !dbg !8086
  %40 = load %struct.BMVert*, %struct.BMVert** %v_fan, align 8, !dbg !8087
  %cmp26 = icmp eq %struct.BMVert* %39, %40, !dbg !8088
  br i1 %cmp26, label %if.then27, label %if.else28, !dbg !8089

if.then27:                                        ; preds = %if.else24
  br label %if.end43, !dbg !8090

if.else28:                                        ; preds = %if.else24
  %41 = load %struct.BMLoop*, %struct.BMLoop** %l_fan, align 8, !dbg !8092
  %next29 = getelementptr inbounds %struct.BMLoop, %struct.BMLoop* %41, i32 0, i32 6, !dbg !8094
  %42 = load %struct.BMLoop*, %struct.BMLoop** %next29, align 8, !dbg !8094
  %v30 = getelementptr inbounds %struct.BMLoop, %struct.BMLoop* %42, i32 0, i32 1, !dbg !8095
  %43 = load %struct.BMVert*, %struct.BMVert** %v30, align 8, !dbg !8095
  %44 = load %struct.BMVert*, %struct.BMVert** %v_fan, align 8, !dbg !8096
  %cmp31 = icmp eq %struct.BMVert* %43, %44, !dbg !8097
  br i1 %cmp31, label %if.then32, label %if.else34, !dbg !8098

if.then32:                                        ; preds = %if.else28
  %45 = load %struct.BMLoop*, %struct.BMLoop** %l_fan, align 8, !dbg !8099
  %next33 = getelementptr inbounds %struct.BMLoop, %struct.BMLoop* %45, i32 0, i32 6, !dbg !8101
  %46 = load %struct.BMLoop*, %struct.BMLoop** %next33, align 8, !dbg !8101
  store %struct.BMLoop* %46, %struct.BMLoop** %l_fan, align 8, !dbg !8102
  br label %if.end42, !dbg !8103

if.else34:                                        ; preds = %if.else28
  %47 = load %struct.BMLoop*, %struct.BMLoop** %l_fan, align 8, !dbg !8104
  %prev35 = getelementptr inbounds %struct.BMLoop, %struct.BMLoop* %47, i32 0, i32 7, !dbg !8106
  %48 = load %struct.BMLoop*, %struct.BMLoop** %prev35, align 8, !dbg !8106
  %v36 = getelementptr inbounds %struct.BMLoop, %struct.BMLoop* %48, i32 0, i32 1, !dbg !8107
  %49 = load %struct.BMVert*, %struct.BMVert** %v36, align 8, !dbg !8107
  %50 = load %struct.BMVert*, %struct.BMVert** %v_fan, align 8, !dbg !8108
  %cmp37 = icmp eq %struct.BMVert* %49, %50, !dbg !8109
  br i1 %cmp37, label %if.then38, label %if.else40, !dbg !8110

if.then38:                                        ; preds = %if.else34
  %51 = load %struct.BMLoop*, %struct.BMLoop** %l_fan, align 8, !dbg !8111
  %prev39 = getelementptr inbounds %struct.BMLoop, %struct.BMLoop* %51, i32 0, i32 7, !dbg !8113
  %52 = load %struct.BMLoop*, %struct.BMLoop** %prev39, align 8, !dbg !8113
  store %struct.BMLoop* %52, %struct.BMLoop** %l_fan, align 8, !dbg !8114
  br label %if.end41, !dbg !8115

if.else40:                                        ; preds = %if.else34
  br label %if.end41

if.end41:                                         ; preds = %if.else40, %if.then38
  br label %if.end42

if.end42:                                         ; preds = %if.end41, %if.then32
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %if.then27
  br label %if.end44

if.end44:                                         ; preds = %if.end43, %if.end23
  br label %while.cond, !dbg !8021, !llvm.loop !8116

while.end:                                        ; preds = %while.cond
  br label %if.end45, !dbg !8118

if.end45:                                         ; preds = %while.end, %entry
  ret void, !dbg !8119
}

; Function Attrs: noinline nounwind uwtable
define internal void @bevel_build_quadstrip(%struct.BevelParams* %bp, %struct.BMesh* %bm, %struct.BevVert* %bv) #0 !dbg !8120 {
entry:
  %bp.addr = alloca %struct.BevelParams*, align 8
  %bm.addr = alloca %struct.BMesh*, align 8
  %bv.addr = alloca %struct.BevVert*, align 8
  %f = alloca %struct.BMFace*, align 8
  %eh_a = alloca %struct.EdgeHalf*, align 8
  %eh_b = alloca %struct.EdgeHalf*, align 8
  %l_a = alloca %struct.BMLoop*, align 8
  %l_b = alloca %struct.BMLoop*, align 8
  %split_count = alloca i32, align 4
  %l_new = alloca %struct.BMLoop*, align 8
  store %struct.BevelParams* %bp, %struct.BevelParams** %bp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BevelParams** %bp.addr, metadata !8121, metadata !DIExpression()), !dbg !8122
  store %struct.BMesh* %bm, %struct.BMesh** %bm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMesh** %bm.addr, metadata !8123, metadata !DIExpression()), !dbg !8124
  store %struct.BevVert* %bv, %struct.BevVert** %bv.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BevVert** %bv.addr, metadata !8125, metadata !DIExpression()), !dbg !8126
  call void @llvm.dbg.declare(metadata %struct.BMFace** %f, metadata !8127, metadata !DIExpression()), !dbg !8128
  %0 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !8129
  %1 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !8130
  %2 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !8131
  %call = call %struct.BMFace* @bevel_build_poly(%struct.BevelParams* %0, %struct.BMesh* %1, %struct.BevVert* %2), !dbg !8132
  store %struct.BMFace* %call, %struct.BMFace** %f, align 8, !dbg !8133
  %3 = load %struct.BMFace*, %struct.BMFace** %f, align 8, !dbg !8134
  %tobool = icmp ne %struct.BMFace* %3, null, !dbg !8134
  br i1 %tobool, label %if.then, label %if.end20, !dbg !8136

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.EdgeHalf** %eh_a, metadata !8137, metadata !DIExpression()), !dbg !8139
  %4 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !8140
  %vmesh = getelementptr inbounds %struct.BevVert, %struct.BevVert* %4, i32 0, i32 9, !dbg !8141
  %5 = load %struct.VMesh*, %struct.VMesh** %vmesh, align 8, !dbg !8141
  %boundstart = getelementptr inbounds %struct.VMesh, %struct.VMesh* %5, i32 0, i32 1, !dbg !8142
  %6 = load %struct.BoundVert*, %struct.BoundVert** %boundstart, align 8, !dbg !8142
  %elast = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %6, i32 0, i32 4, !dbg !8143
  %7 = load %struct.EdgeHalf*, %struct.EdgeHalf** %elast, align 8, !dbg !8143
  store %struct.EdgeHalf* %7, %struct.EdgeHalf** %eh_a, align 8, !dbg !8139
  call void @llvm.dbg.declare(metadata %struct.EdgeHalf** %eh_b, metadata !8144, metadata !DIExpression()), !dbg !8145
  %8 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !8146
  %9 = load %struct.EdgeHalf*, %struct.EdgeHalf** %eh_a, align 8, !dbg !8147
  %next = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %9, i32 0, i32 0, !dbg !8148
  %10 = load %struct.EdgeHalf*, %struct.EdgeHalf** %next, align 8, !dbg !8148
  %call1 = call %struct.EdgeHalf* @next_bev(%struct.BevVert* %8, %struct.EdgeHalf* %10), !dbg !8149
  store %struct.EdgeHalf* %call1, %struct.EdgeHalf** %eh_b, align 8, !dbg !8145
  call void @llvm.dbg.declare(metadata %struct.BMLoop** %l_a, metadata !8150, metadata !DIExpression()), !dbg !8151
  %11 = load %struct.BMFace*, %struct.BMFace** %f, align 8, !dbg !8152
  %12 = load %struct.EdgeHalf*, %struct.EdgeHalf** %eh_a, align 8, !dbg !8153
  %rightv = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %12, i32 0, i32 6, !dbg !8154
  %13 = load %struct.BoundVert*, %struct.BoundVert** %rightv, align 8, !dbg !8154
  %nv = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %13, i32 0, i32 2, !dbg !8155
  %v = getelementptr inbounds %struct.NewVert, %struct.NewVert* %nv, i32 0, i32 0, !dbg !8156
  %14 = load %struct.BMVert*, %struct.BMVert** %v, align 8, !dbg !8156
  %call2 = call %struct.BMLoop* @BM_face_vert_share_loop(%struct.BMFace* %11, %struct.BMVert* %14), !dbg !8157
  store %struct.BMLoop* %call2, %struct.BMLoop** %l_a, align 8, !dbg !8151
  call void @llvm.dbg.declare(metadata %struct.BMLoop** %l_b, metadata !8158, metadata !DIExpression()), !dbg !8159
  %15 = load %struct.BMFace*, %struct.BMFace** %f, align 8, !dbg !8160
  %16 = load %struct.EdgeHalf*, %struct.EdgeHalf** %eh_b, align 8, !dbg !8161
  %leftv = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %16, i32 0, i32 5, !dbg !8162
  %17 = load %struct.BoundVert*, %struct.BoundVert** %leftv, align 8, !dbg !8162
  %nv3 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %17, i32 0, i32 2, !dbg !8163
  %v4 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %nv3, i32 0, i32 0, !dbg !8164
  %18 = load %struct.BMVert*, %struct.BMVert** %v4, align 8, !dbg !8164
  %call5 = call %struct.BMLoop* @BM_face_vert_share_loop(%struct.BMFace* %15, %struct.BMVert* %18), !dbg !8165
  store %struct.BMLoop* %call5, %struct.BMLoop** %l_b, align 8, !dbg !8159
  call void @llvm.dbg.declare(metadata i32* %split_count, metadata !8166, metadata !DIExpression()), !dbg !8167
  %19 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !8168
  %vmesh6 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %19, i32 0, i32 9, !dbg !8169
  %20 = load %struct.VMesh*, %struct.VMesh** %vmesh6, align 8, !dbg !8169
  %seg = getelementptr inbounds %struct.VMesh, %struct.VMesh* %20, i32 0, i32 3, !dbg !8170
  %21 = load i32, i32* %seg, align 4, !dbg !8170
  %add = add nsw i32 %21, 1, !dbg !8171
  store i32 %add, i32* %split_count, align 4, !dbg !8167
  br label %while.cond, !dbg !8172

while.cond:                                       ; preds = %if.end, %if.then
  %22 = load %struct.BMFace*, %struct.BMFace** %f, align 8, !dbg !8173
  %len = getelementptr inbounds %struct.BMFace, %struct.BMFace* %22, i32 0, i32 3, !dbg !8174
  %23 = load i32, i32* %len, align 8, !dbg !8174
  %cmp = icmp sgt i32 %23, 4, !dbg !8175
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !8176

land.rhs:                                         ; preds = %while.cond
  %24 = load i32, i32* %split_count, align 4, !dbg !8177
  %cmp7 = icmp sgt i32 %24, 0, !dbg !8178
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %25 = phi i1 [ false, %while.cond ], [ %cmp7, %land.rhs ], !dbg !8179
  br i1 %25, label %while.body, label %while.end, !dbg !8172

while.body:                                       ; preds = %land.end
  call void @llvm.dbg.declare(metadata %struct.BMLoop** %l_new, metadata !8180, metadata !DIExpression()), !dbg !8182
  %26 = load %struct.BMLoop*, %struct.BMLoop** %l_a, align 8, !dbg !8183
  %v8 = getelementptr inbounds %struct.BMLoop, %struct.BMLoop* %26, i32 0, i32 1, !dbg !8185
  %27 = load %struct.BMVert*, %struct.BMVert** %v8, align 8, !dbg !8185
  %28 = load %struct.BMLoop*, %struct.BMLoop** %l_b, align 8, !dbg !8186
  %v9 = getelementptr inbounds %struct.BMLoop, %struct.BMLoop* %28, i32 0, i32 1, !dbg !8187
  %29 = load %struct.BMVert*, %struct.BMVert** %v9, align 8, !dbg !8187
  %cmp10 = icmp eq %struct.BMVert* %27, %29, !dbg !8188
  br i1 %cmp10, label %if.then13, label %lor.lhs.false, !dbg !8189

lor.lhs.false:                                    ; preds = %while.body
  %30 = load %struct.BMLoop*, %struct.BMLoop** %l_a, align 8, !dbg !8190
  %next11 = getelementptr inbounds %struct.BMLoop, %struct.BMLoop* %30, i32 0, i32 6, !dbg !8191
  %31 = load %struct.BMLoop*, %struct.BMLoop** %next11, align 8, !dbg !8191
  %32 = load %struct.BMLoop*, %struct.BMLoop** %l_b, align 8, !dbg !8192
  %cmp12 = icmp eq %struct.BMLoop* %31, %32, !dbg !8193
  br i1 %cmp12, label %if.then13, label %if.else, !dbg !8194

if.then13:                                        ; preds = %lor.lhs.false, %while.body
  %33 = load %struct.BMLoop*, %struct.BMLoop** %l_a, align 8, !dbg !8195
  %prev = getelementptr inbounds %struct.BMLoop, %struct.BMLoop* %33, i32 0, i32 7, !dbg !8197
  %34 = load %struct.BMLoop*, %struct.BMLoop** %prev, align 8, !dbg !8197
  store %struct.BMLoop* %34, %struct.BMLoop** %l_a, align 8, !dbg !8198
  %35 = load %struct.BMLoop*, %struct.BMLoop** %l_b, align 8, !dbg !8199
  %next14 = getelementptr inbounds %struct.BMLoop, %struct.BMLoop* %35, i32 0, i32 6, !dbg !8200
  %36 = load %struct.BMLoop*, %struct.BMLoop** %next14, align 8, !dbg !8200
  store %struct.BMLoop* %36, %struct.BMLoop** %l_b, align 8, !dbg !8201
  br label %if.end, !dbg !8202

if.else:                                          ; preds = %lor.lhs.false
  %37 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !8203
  %38 = load %struct.BMFace*, %struct.BMFace** %f, align 8, !dbg !8205
  %39 = load %struct.BMLoop*, %struct.BMLoop** %l_a, align 8, !dbg !8206
  %40 = load %struct.BMLoop*, %struct.BMLoop** %l_b, align 8, !dbg !8207
  %call15 = call %struct.BMFace* @BM_face_split(%struct.BMesh* %37, %struct.BMFace* %38, %struct.BMLoop* %39, %struct.BMLoop* %40, %struct.BMLoop** %l_new, %struct.BMEdge* null, i8 zeroext 0), !dbg !8208
  %41 = load %struct.BMLoop*, %struct.BMLoop** %l_new, align 8, !dbg !8209
  %f16 = getelementptr inbounds %struct.BMLoop, %struct.BMLoop* %41, i32 0, i32 3, !dbg !8210
  %42 = load %struct.BMFace*, %struct.BMFace** %f16, align 8, !dbg !8210
  store %struct.BMFace* %42, %struct.BMFace** %f, align 8, !dbg !8211
  %43 = load %struct.BMLoop*, %struct.BMLoop** %l_new, align 8, !dbg !8212
  %prev17 = getelementptr inbounds %struct.BMLoop, %struct.BMLoop* %43, i32 0, i32 7, !dbg !8213
  %44 = load %struct.BMLoop*, %struct.BMLoop** %prev17, align 8, !dbg !8213
  store %struct.BMLoop* %44, %struct.BMLoop** %l_a, align 8, !dbg !8214
  %45 = load %struct.BMLoop*, %struct.BMLoop** %l_new, align 8, !dbg !8215
  %next18 = getelementptr inbounds %struct.BMLoop, %struct.BMLoop* %45, i32 0, i32 6, !dbg !8216
  %46 = load %struct.BMLoop*, %struct.BMLoop** %next18, align 8, !dbg !8216
  %next19 = getelementptr inbounds %struct.BMLoop, %struct.BMLoop* %46, i32 0, i32 6, !dbg !8217
  %47 = load %struct.BMLoop*, %struct.BMLoop** %next19, align 8, !dbg !8217
  store %struct.BMLoop* %47, %struct.BMLoop** %l_b, align 8, !dbg !8218
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then13
  %48 = load i32, i32* %split_count, align 4, !dbg !8219
  %dec = add nsw i32 %48, -1, !dbg !8219
  store i32 %dec, i32* %split_count, align 4, !dbg !8219
  br label %while.cond, !dbg !8172, !llvm.loop !8220

while.end:                                        ; preds = %land.end
  br label %if.end20, !dbg !8222

if.end20:                                         ; preds = %while.end, %entry
  ret void, !dbg !8223
}

declare dso_local %struct.BMVert* @BM_vert_create(%struct.BMesh*, float*, %struct.BMVert*, i32) #3

declare dso_local %struct.BMEdge* @BM_edge_create(%struct.BMesh*, %struct.BMVert*, %struct.BMVert*, %struct.BMEdge*, i32) #3

; Function Attrs: noinline nounwind uwtable
define internal %struct.BMFace* @boundvert_rep_face(%struct.BoundVert* %v) #0 !dbg !8224 {
entry:
  %retval = alloca %struct.BMFace*, align 8
  %v.addr = alloca %struct.BoundVert*, align 8
  store %struct.BoundVert* %v, %struct.BoundVert** %v.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BoundVert** %v.addr, metadata !8227, metadata !DIExpression()), !dbg !8228
  %0 = load %struct.BoundVert*, %struct.BoundVert** %v.addr, align 8, !dbg !8229
  %efirst = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %0, i32 0, i32 3, !dbg !8231
  %1 = load %struct.EdgeHalf*, %struct.EdgeHalf** %efirst, align 8, !dbg !8231
  %fnext = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %1, i32 0, i32 4, !dbg !8232
  %2 = load %struct.BMFace*, %struct.BMFace** %fnext, align 8, !dbg !8232
  %3 = load %struct.BoundVert*, %struct.BoundVert** %v.addr, align 8, !dbg !8233
  %elast = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %3, i32 0, i32 4, !dbg !8234
  %4 = load %struct.EdgeHalf*, %struct.EdgeHalf** %elast, align 8, !dbg !8234
  %fprev = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %4, i32 0, i32 3, !dbg !8235
  %5 = load %struct.BMFace*, %struct.BMFace** %fprev, align 8, !dbg !8235
  %cmp = icmp eq %struct.BMFace* %2, %5, !dbg !8236
  br i1 %cmp, label %if.then, label %if.else, !dbg !8237

if.then:                                          ; preds = %entry
  %6 = load %struct.BoundVert*, %struct.BoundVert** %v.addr, align 8, !dbg !8238
  %efirst1 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %6, i32 0, i32 3, !dbg !8239
  %7 = load %struct.EdgeHalf*, %struct.EdgeHalf** %efirst1, align 8, !dbg !8239
  %fnext2 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %7, i32 0, i32 4, !dbg !8240
  %8 = load %struct.BMFace*, %struct.BMFace** %fnext2, align 8, !dbg !8240
  store %struct.BMFace* %8, %struct.BMFace** %retval, align 8, !dbg !8241
  br label %return, !dbg !8241

if.else:                                          ; preds = %entry
  %9 = load %struct.BoundVert*, %struct.BoundVert** %v.addr, align 8, !dbg !8242
  %efirst3 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %9, i32 0, i32 3, !dbg !8244
  %10 = load %struct.EdgeHalf*, %struct.EdgeHalf** %efirst3, align 8, !dbg !8244
  %fnext4 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %10, i32 0, i32 4, !dbg !8245
  %11 = load %struct.BMFace*, %struct.BMFace** %fnext4, align 8, !dbg !8245
  %tobool = icmp ne %struct.BMFace* %11, null, !dbg !8242
  br i1 %tobool, label %if.then5, label %if.else8, !dbg !8246

if.then5:                                         ; preds = %if.else
  %12 = load %struct.BoundVert*, %struct.BoundVert** %v.addr, align 8, !dbg !8247
  %efirst6 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %12, i32 0, i32 3, !dbg !8248
  %13 = load %struct.EdgeHalf*, %struct.EdgeHalf** %efirst6, align 8, !dbg !8248
  %fnext7 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %13, i32 0, i32 4, !dbg !8249
  %14 = load %struct.BMFace*, %struct.BMFace** %fnext7, align 8, !dbg !8249
  store %struct.BMFace* %14, %struct.BMFace** %retval, align 8, !dbg !8250
  br label %return, !dbg !8250

if.else8:                                         ; preds = %if.else
  %15 = load %struct.BoundVert*, %struct.BoundVert** %v.addr, align 8, !dbg !8251
  %elast9 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %15, i32 0, i32 4, !dbg !8252
  %16 = load %struct.EdgeHalf*, %struct.EdgeHalf** %elast9, align 8, !dbg !8252
  %fprev10 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %16, i32 0, i32 3, !dbg !8253
  %17 = load %struct.BMFace*, %struct.BMFace** %fprev10, align 8, !dbg !8253
  store %struct.BMFace* %17, %struct.BMFace** %retval, align 8, !dbg !8254
  br label %return, !dbg !8254

return:                                           ; preds = %if.else8, %if.then5, %if.then
  %18 = load %struct.BMFace*, %struct.BMFace** %retval, align 8, !dbg !8255
  ret %struct.BMFace* %18, !dbg !8255
}

declare dso_local void @_bli_array_grow_func(i8**, i8*, i32, i32, i32, i8*) #3

; Function Attrs: noinline nounwind uwtable
define internal %struct.BMFace* @bev_create_ngon(%struct.BMesh* %bm, %struct.BMVert** %vert_arr, i32 %totv, %struct.BMFace** %face_arr, %struct.BMFace* %facerep, i32 %mat_nr, i8 zeroext %do_interp) #0 !dbg !8256 {
entry:
  %bm.addr = alloca %struct.BMesh*, align 8
  %vert_arr.addr = alloca %struct.BMVert**, align 8
  %totv.addr = alloca i32, align 4
  %face_arr.addr = alloca %struct.BMFace**, align 8
  %facerep.addr = alloca %struct.BMFace*, align 8
  %mat_nr.addr = alloca i32, align 4
  %do_interp.addr = alloca i8, align 1
  %iter = alloca %struct.BMIter, align 8
  %l = alloca %struct.BMLoop*, align 8
  %f = alloca %struct.BMFace*, align 8
  %interp_f = alloca %struct.BMFace*, align 8
  %i = alloca i32, align 4
  store %struct.BMesh* %bm, %struct.BMesh** %bm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMesh** %bm.addr, metadata !8259, metadata !DIExpression()), !dbg !8260
  store %struct.BMVert** %vert_arr, %struct.BMVert*** %vert_arr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMVert*** %vert_arr.addr, metadata !8261, metadata !DIExpression()), !dbg !8262
  store i32 %totv, i32* %totv.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %totv.addr, metadata !8263, metadata !DIExpression()), !dbg !8264
  store %struct.BMFace** %face_arr, %struct.BMFace*** %face_arr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMFace*** %face_arr.addr, metadata !8265, metadata !DIExpression()), !dbg !8266
  store %struct.BMFace* %facerep, %struct.BMFace** %facerep.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMFace** %facerep.addr, metadata !8267, metadata !DIExpression()), !dbg !8268
  store i32 %mat_nr, i32* %mat_nr.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mat_nr.addr, metadata !8269, metadata !DIExpression()), !dbg !8270
  store i8 %do_interp, i8* %do_interp.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %do_interp.addr, metadata !8271, metadata !DIExpression()), !dbg !8272
  call void @llvm.dbg.declare(metadata %struct.BMIter* %iter, metadata !8273, metadata !DIExpression()), !dbg !8274
  call void @llvm.dbg.declare(metadata %struct.BMLoop** %l, metadata !8275, metadata !DIExpression()), !dbg !8276
  call void @llvm.dbg.declare(metadata %struct.BMFace** %f, metadata !8277, metadata !DIExpression()), !dbg !8278
  call void @llvm.dbg.declare(metadata %struct.BMFace** %interp_f, metadata !8279, metadata !DIExpression()), !dbg !8280
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8281, metadata !DIExpression()), !dbg !8282
  %0 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !8283
  %1 = load %struct.BMVert**, %struct.BMVert*** %vert_arr.addr, align 8, !dbg !8284
  %2 = load i32, i32* %totv.addr, align 4, !dbg !8285
  %3 = load %struct.BMFace*, %struct.BMFace** %facerep.addr, align 8, !dbg !8286
  %call = call %struct.BMFace* @BM_face_create_verts(%struct.BMesh* %0, %struct.BMVert** %1, i32 %2, %struct.BMFace* %3, i32 0, i8 zeroext 1), !dbg !8287
  store %struct.BMFace* %call, %struct.BMFace** %f, align 8, !dbg !8288
  %4 = load %struct.BMFace*, %struct.BMFace** %facerep.addr, align 8, !dbg !8289
  %tobool = icmp ne %struct.BMFace* %4, null, !dbg !8289
  br i1 %tobool, label %land.lhs.true3, label %lor.lhs.false, !dbg !8291

lor.lhs.false:                                    ; preds = %entry
  %5 = load %struct.BMFace**, %struct.BMFace*** %face_arr.addr, align 8, !dbg !8292
  %tobool1 = icmp ne %struct.BMFace** %5, null, !dbg !8292
  br i1 %tobool1, label %land.lhs.true, label %if.end19, !dbg !8293

land.lhs.true:                                    ; preds = %lor.lhs.false
  %6 = load %struct.BMFace**, %struct.BMFace*** %face_arr.addr, align 8, !dbg !8294
  %arrayidx = getelementptr inbounds %struct.BMFace*, %struct.BMFace** %6, i64 0, !dbg !8294
  %7 = load %struct.BMFace*, %struct.BMFace** %arrayidx, align 8, !dbg !8294
  %tobool2 = icmp ne %struct.BMFace* %7, null, !dbg !8294
  br i1 %tobool2, label %land.lhs.true3, label %if.end19, !dbg !8295

land.lhs.true3:                                   ; preds = %land.lhs.true, %entry
  %8 = load %struct.BMFace*, %struct.BMFace** %f, align 8, !dbg !8296
  %tobool4 = icmp ne %struct.BMFace* %8, null, !dbg !8296
  br i1 %tobool4, label %if.then, label %if.end19, !dbg !8297

if.then:                                          ; preds = %land.lhs.true3
  %9 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !8298
  %10 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !8300
  %11 = load %struct.BMFace*, %struct.BMFace** %facerep.addr, align 8, !dbg !8301
  %tobool5 = icmp ne %struct.BMFace* %11, null, !dbg !8301
  br i1 %tobool5, label %cond.true, label %cond.false, !dbg !8301

cond.true:                                        ; preds = %if.then
  %12 = load %struct.BMFace*, %struct.BMFace** %facerep.addr, align 8, !dbg !8302
  br label %cond.end, !dbg !8301

cond.false:                                       ; preds = %if.then
  %13 = load %struct.BMFace**, %struct.BMFace*** %face_arr.addr, align 8, !dbg !8303
  %arrayidx6 = getelementptr inbounds %struct.BMFace*, %struct.BMFace** %13, i64 0, !dbg !8303
  %14 = load %struct.BMFace*, %struct.BMFace** %arrayidx6, align 8, !dbg !8303
  br label %cond.end, !dbg !8301

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.BMFace* [ %12, %cond.true ], [ %14, %cond.false ], !dbg !8301
  %15 = bitcast %struct.BMFace* %cond to i8*, !dbg !8301
  %16 = load %struct.BMFace*, %struct.BMFace** %f, align 8, !dbg !8304
  %17 = bitcast %struct.BMFace* %16 to i8*, !dbg !8304
  call void @BM_elem_attrs_copy(%struct.BMesh* %9, %struct.BMesh* %10, i8* %15, i8* %17), !dbg !8305
  %18 = load i8, i8* %do_interp.addr, align 1, !dbg !8306
  %tobool7 = icmp ne i8 %18, 0, !dbg !8306
  br i1 %tobool7, label %if.then8, label %if.end18, !dbg !8308

if.then8:                                         ; preds = %cond.end
  store i32 0, i32* %i, align 4, !dbg !8309
  %19 = load %struct.BMFace*, %struct.BMFace** %f, align 8, !dbg !8311
  %20 = bitcast %struct.BMFace* %19 to i8*, !dbg !8311
  %call9 = call i8* @BM_iter_new(%struct.BMIter* %iter, %struct.BMesh* null, i8 zeroext 11, i8* %20), !dbg !8311
  %21 = bitcast i8* %call9 to %struct.BMLoop*, !dbg !8311
  store %struct.BMLoop* %21, %struct.BMLoop** %l, align 8, !dbg !8311
  br label %for.cond, !dbg !8311

for.cond:                                         ; preds = %for.inc, %if.then8
  %22 = load %struct.BMLoop*, %struct.BMLoop** %l, align 8, !dbg !8313
  %tobool10 = icmp ne %struct.BMLoop* %22, null, !dbg !8311
  br i1 %tobool10, label %for.body, label %for.end, !dbg !8311

for.body:                                         ; preds = %for.cond
  %23 = load %struct.BMFace**, %struct.BMFace*** %face_arr.addr, align 8, !dbg !8315
  %tobool11 = icmp ne %struct.BMFace** %23, null, !dbg !8315
  br i1 %tobool11, label %if.then12, label %if.else, !dbg !8318

if.then12:                                        ; preds = %for.body
  %24 = load %struct.BMFace**, %struct.BMFace*** %face_arr.addr, align 8, !dbg !8319
  %25 = load i32, i32* %i, align 4, !dbg !8321
  %idxprom = sext i32 %25 to i64, !dbg !8319
  %arrayidx13 = getelementptr inbounds %struct.BMFace*, %struct.BMFace** %24, i64 %idxprom, !dbg !8319
  %26 = load %struct.BMFace*, %struct.BMFace** %arrayidx13, align 8, !dbg !8319
  store %struct.BMFace* %26, %struct.BMFace** %interp_f, align 8, !dbg !8322
  br label %if.end, !dbg !8323

if.else:                                          ; preds = %for.body
  %27 = load %struct.BMFace*, %struct.BMFace** %facerep.addr, align 8, !dbg !8324
  store %struct.BMFace* %27, %struct.BMFace** %interp_f, align 8, !dbg !8326
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then12
  %28 = load %struct.BMFace*, %struct.BMFace** %interp_f, align 8, !dbg !8327
  %tobool14 = icmp ne %struct.BMFace* %28, null, !dbg !8327
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !8329

if.then15:                                        ; preds = %if.end
  %29 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !8330
  %30 = load %struct.BMLoop*, %struct.BMLoop** %l, align 8, !dbg !8331
  %31 = load %struct.BMFace*, %struct.BMFace** %interp_f, align 8, !dbg !8332
  call void @BM_loop_interp_from_face(%struct.BMesh* %29, %struct.BMLoop* %30, %struct.BMFace* %31, i8 zeroext 1, i8 zeroext 1), !dbg !8333
  br label %if.end16, !dbg !8333

if.end16:                                         ; preds = %if.then15, %if.end
  %32 = load i32, i32* %i, align 4, !dbg !8334
  %inc = add nsw i32 %32, 1, !dbg !8334
  store i32 %inc, i32* %i, align 4, !dbg !8334
  br label %for.inc, !dbg !8335

for.inc:                                          ; preds = %if.end16
  %call17 = call i8* @BM_iter_step(%struct.BMIter* %iter), !dbg !8313
  %33 = bitcast i8* %call17 to %struct.BMLoop*, !dbg !8313
  store %struct.BMLoop* %33, %struct.BMLoop** %l, align 8, !dbg !8313
  br label %for.cond, !dbg !8313, !llvm.loop !8336

for.end:                                          ; preds = %for.cond
  br label %if.end18, !dbg !8338

if.end18:                                         ; preds = %for.end, %cond.end
  br label %if.end19, !dbg !8339

if.end19:                                         ; preds = %if.end18, %land.lhs.true3, %land.lhs.true, %lor.lhs.false
  %34 = load %struct.BMFace*, %struct.BMFace** %f, align 8, !dbg !8340
  %tobool20 = icmp ne %struct.BMFace* %34, null, !dbg !8340
  br i1 %tobool20, label %if.then21, label %if.end22, !dbg !8342

if.then21:                                        ; preds = %if.end19
  %35 = load %struct.BMFace*, %struct.BMFace** %f, align 8, !dbg !8343
  %head = getelementptr inbounds %struct.BMFace, %struct.BMFace* %35, i32 0, i32 0, !dbg !8343
  call void @_bm_elem_flag_enable(%struct.BMHeader* %head, i8 zeroext 16), !dbg !8343
  br label %if.end22, !dbg !8345

if.end22:                                         ; preds = %if.then21, %if.end19
  %36 = load i32, i32* %mat_nr.addr, align 4, !dbg !8346
  %cmp = icmp sge i32 %36, 0, !dbg !8348
  br i1 %cmp, label %if.then23, label %if.end25, !dbg !8349

if.then23:                                        ; preds = %if.end22
  %37 = load i32, i32* %mat_nr.addr, align 4, !dbg !8350
  %conv = trunc i32 %37 to i16, !dbg !8350
  %38 = load %struct.BMFace*, %struct.BMFace** %f, align 8, !dbg !8351
  %mat_nr24 = getelementptr inbounds %struct.BMFace, %struct.BMFace* %38, i32 0, i32 5, !dbg !8352
  store i16 %conv, i16* %mat_nr24, align 8, !dbg !8353
  br label %if.end25, !dbg !8351

if.end25:                                         ; preds = %if.then23, %if.end22
  %39 = load %struct.BMFace*, %struct.BMFace** %f, align 8, !dbg !8354
  ret %struct.BMFace* %39, !dbg !8355
}

declare dso_local %struct.BMFace* @BM_face_create_verts(%struct.BMesh*, %struct.BMVert**, i32, %struct.BMFace*, i32, i8 zeroext) #3

declare dso_local void @BM_elem_attrs_copy(%struct.BMesh*, %struct.BMesh*, i8*, i8*) #3

declare dso_local void @BM_loop_interp_from_face(%struct.BMesh*, %struct.BMLoop*, %struct.BMFace*, i8 zeroext, i8 zeroext) #3

; Function Attrs: noinline nounwind uwtable
define internal void @_bm_elem_flag_enable(%struct.BMHeader* %head, i8 zeroext %hflag) #0 !dbg !8356 {
entry:
  %head.addr = alloca %struct.BMHeader*, align 8
  %hflag.addr = alloca i8, align 1
  store %struct.BMHeader* %head, %struct.BMHeader** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMHeader** %head.addr, metadata !8357, metadata !DIExpression()), !dbg !8358
  store i8 %hflag, i8* %hflag.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %hflag.addr, metadata !8359, metadata !DIExpression()), !dbg !8360
  %0 = load i8, i8* %hflag.addr, align 1, !dbg !8361
  %conv = zext i8 %0 to i32, !dbg !8361
  %1 = load %struct.BMHeader*, %struct.BMHeader** %head.addr, align 8, !dbg !8362
  %hflag1 = getelementptr inbounds %struct.BMHeader, %struct.BMHeader* %1, i32 0, i32 3, !dbg !8363
  %2 = load i8, i8* %hflag1, align 1, !dbg !8364
  %conv2 = zext i8 %2 to i32, !dbg !8364
  %or = or i32 %conv2, %conv, !dbg !8364
  %conv3 = trunc i32 %or to i8, !dbg !8364
  store i8 %conv3, i8* %hflag1, align 1, !dbg !8364
  ret void, !dbg !8365
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.BoundVert* @pipe_test(%struct.BevVert* %bv) #0 !dbg !8366 {
entry:
  %retval = alloca %struct.BoundVert*, align 8
  %bv.addr = alloca %struct.BevVert*, align 8
  %e = alloca %struct.EdgeHalf*, align 8
  %epipe = alloca %struct.EdgeHalf*, align 8
  %vm = alloca %struct.VMesh*, align 8
  %v1 = alloca %struct.BoundVert*, align 8
  %v2 = alloca %struct.BoundVert*, align 8
  %v3 = alloca %struct.BoundVert*, align 8
  %dir1 = alloca [3 x float], align 4
  %dir3 = alloca [3 x float], align 4
  store %struct.BevVert* %bv, %struct.BevVert** %bv.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BevVert** %bv.addr, metadata !8369, metadata !DIExpression()), !dbg !8370
  call void @llvm.dbg.declare(metadata %struct.EdgeHalf** %e, metadata !8371, metadata !DIExpression()), !dbg !8372
  call void @llvm.dbg.declare(metadata %struct.EdgeHalf** %epipe, metadata !8373, metadata !DIExpression()), !dbg !8374
  call void @llvm.dbg.declare(metadata %struct.VMesh** %vm, metadata !8375, metadata !DIExpression()), !dbg !8376
  call void @llvm.dbg.declare(metadata %struct.BoundVert** %v1, metadata !8377, metadata !DIExpression()), !dbg !8378
  call void @llvm.dbg.declare(metadata %struct.BoundVert** %v2, metadata !8379, metadata !DIExpression()), !dbg !8380
  call void @llvm.dbg.declare(metadata %struct.BoundVert** %v3, metadata !8381, metadata !DIExpression()), !dbg !8382
  call void @llvm.dbg.declare(metadata [3 x float]* %dir1, metadata !8383, metadata !DIExpression()), !dbg !8384
  call void @llvm.dbg.declare(metadata [3 x float]* %dir3, metadata !8385, metadata !DIExpression()), !dbg !8386
  %0 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !8387
  %vmesh = getelementptr inbounds %struct.BevVert, %struct.BevVert* %0, i32 0, i32 9, !dbg !8388
  %1 = load %struct.VMesh*, %struct.VMesh** %vmesh, align 8, !dbg !8388
  store %struct.VMesh* %1, %struct.VMesh** %vm, align 8, !dbg !8389
  %2 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !8390
  %count = getelementptr inbounds %struct.VMesh, %struct.VMesh* %2, i32 0, i32 2, !dbg !8392
  %3 = load i32, i32* %count, align 8, !dbg !8392
  %cmp = icmp slt i32 %3, 3, !dbg !8393
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !8394

lor.lhs.false:                                    ; preds = %entry
  %4 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !8395
  %count1 = getelementptr inbounds %struct.VMesh, %struct.VMesh* %4, i32 0, i32 2, !dbg !8396
  %5 = load i32, i32* %count1, align 8, !dbg !8396
  %cmp2 = icmp sgt i32 %5, 4, !dbg !8397
  br i1 %cmp2, label %if.then, label %lor.lhs.false3, !dbg !8398

lor.lhs.false3:                                   ; preds = %lor.lhs.false
  %6 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !8399
  %selcount = getelementptr inbounds %struct.BevVert, %struct.BevVert* %6, i32 0, i32 2, !dbg !8400
  %7 = load i32, i32* %selcount, align 4, !dbg !8400
  %cmp4 = icmp slt i32 %7, 3, !dbg !8401
  br i1 %cmp4, label %if.then, label %lor.lhs.false5, !dbg !8402

lor.lhs.false5:                                   ; preds = %lor.lhs.false3
  %8 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !8403
  %selcount6 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %8, i32 0, i32 2, !dbg !8404
  %9 = load i32, i32* %selcount6, align 4, !dbg !8404
  %cmp7 = icmp sgt i32 %9, 4, !dbg !8405
  br i1 %cmp7, label %if.then, label %if.end, !dbg !8406

if.then:                                          ; preds = %lor.lhs.false5, %lor.lhs.false3, %lor.lhs.false, %entry
  store %struct.BoundVert* null, %struct.BoundVert** %retval, align 8, !dbg !8407
  br label %return, !dbg !8407

if.end:                                           ; preds = %lor.lhs.false5
  store %struct.EdgeHalf* null, %struct.EdgeHalf** %epipe, align 8, !dbg !8408
  %10 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !8409
  %boundstart = getelementptr inbounds %struct.VMesh, %struct.VMesh* %10, i32 0, i32 1, !dbg !8410
  %11 = load %struct.BoundVert*, %struct.BoundVert** %boundstart, align 8, !dbg !8410
  store %struct.BoundVert* %11, %struct.BoundVert** %v1, align 8, !dbg !8411
  br label %do.body, !dbg !8412

do.body:                                          ; preds = %do.cond, %if.end
  %12 = load %struct.BoundVert*, %struct.BoundVert** %v1, align 8, !dbg !8413
  %next = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %12, i32 0, i32 0, !dbg !8415
  %13 = load %struct.BoundVert*, %struct.BoundVert** %next, align 8, !dbg !8415
  store %struct.BoundVert* %13, %struct.BoundVert** %v2, align 8, !dbg !8416
  %14 = load %struct.BoundVert*, %struct.BoundVert** %v2, align 8, !dbg !8417
  %next8 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %14, i32 0, i32 0, !dbg !8418
  %15 = load %struct.BoundVert*, %struct.BoundVert** %next8, align 8, !dbg !8418
  store %struct.BoundVert* %15, %struct.BoundVert** %v3, align 8, !dbg !8419
  %16 = load %struct.BoundVert*, %struct.BoundVert** %v1, align 8, !dbg !8420
  %ebev = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %16, i32 0, i32 5, !dbg !8422
  %17 = load %struct.EdgeHalf*, %struct.EdgeHalf** %ebev, align 8, !dbg !8422
  %tobool = icmp ne %struct.EdgeHalf* %17, null, !dbg !8420
  br i1 %tobool, label %land.lhs.true, label %if.end42, !dbg !8423

land.lhs.true:                                    ; preds = %do.body
  %18 = load %struct.BoundVert*, %struct.BoundVert** %v2, align 8, !dbg !8424
  %ebev9 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %18, i32 0, i32 5, !dbg !8425
  %19 = load %struct.EdgeHalf*, %struct.EdgeHalf** %ebev9, align 8, !dbg !8425
  %tobool10 = icmp ne %struct.EdgeHalf* %19, null, !dbg !8424
  br i1 %tobool10, label %land.lhs.true11, label %if.end42, !dbg !8426

land.lhs.true11:                                  ; preds = %land.lhs.true
  %20 = load %struct.BoundVert*, %struct.BoundVert** %v3, align 8, !dbg !8427
  %ebev12 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %20, i32 0, i32 5, !dbg !8428
  %21 = load %struct.EdgeHalf*, %struct.EdgeHalf** %ebev12, align 8, !dbg !8428
  %tobool13 = icmp ne %struct.EdgeHalf* %21, null, !dbg !8427
  br i1 %tobool13, label %if.then14, label %if.end42, !dbg !8429

if.then14:                                        ; preds = %land.lhs.true11
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %dir1, i64 0, i64 0, !dbg !8430
  %22 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !8432
  %v = getelementptr inbounds %struct.BevVert, %struct.BevVert* %22, i32 0, i32 0, !dbg !8433
  %23 = load %struct.BMVert*, %struct.BMVert** %v, align 8, !dbg !8433
  %co = getelementptr inbounds %struct.BMVert, %struct.BMVert* %23, i32 0, i32 2, !dbg !8434
  %arraydecay15 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !8432
  %24 = load %struct.BoundVert*, %struct.BoundVert** %v1, align 8, !dbg !8435
  %ebev16 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %24, i32 0, i32 5, !dbg !8436
  %25 = load %struct.EdgeHalf*, %struct.EdgeHalf** %ebev16, align 8, !dbg !8436
  %e17 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %25, i32 0, i32 2, !dbg !8437
  %26 = load %struct.BMEdge*, %struct.BMEdge** %e17, align 8, !dbg !8437
  %27 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !8438
  %v18 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %27, i32 0, i32 0, !dbg !8439
  %28 = load %struct.BMVert*, %struct.BMVert** %v18, align 8, !dbg !8439
  %call = call %struct.BMVert* @BM_edge_other_vert(%struct.BMEdge* %26, %struct.BMVert* %28), !dbg !8440
  %co19 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %call, i32 0, i32 2, !dbg !8441
  %arraydecay20 = getelementptr inbounds [3 x float], [3 x float]* %co19, i64 0, i64 0, !dbg !8440
  call void @sub_v3_v3v3(float* %arraydecay, float* %arraydecay15, float* %arraydecay20), !dbg !8442
  %arraydecay21 = getelementptr inbounds [3 x float], [3 x float]* %dir3, i64 0, i64 0, !dbg !8443
  %29 = load %struct.BoundVert*, %struct.BoundVert** %v3, align 8, !dbg !8444
  %ebev22 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %29, i32 0, i32 5, !dbg !8445
  %30 = load %struct.EdgeHalf*, %struct.EdgeHalf** %ebev22, align 8, !dbg !8445
  %e23 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %30, i32 0, i32 2, !dbg !8446
  %31 = load %struct.BMEdge*, %struct.BMEdge** %e23, align 8, !dbg !8446
  %32 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !8447
  %v24 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %32, i32 0, i32 0, !dbg !8448
  %33 = load %struct.BMVert*, %struct.BMVert** %v24, align 8, !dbg !8448
  %call25 = call %struct.BMVert* @BM_edge_other_vert(%struct.BMEdge* %31, %struct.BMVert* %33), !dbg !8449
  %co26 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %call25, i32 0, i32 2, !dbg !8450
  %arraydecay27 = getelementptr inbounds [3 x float], [3 x float]* %co26, i64 0, i64 0, !dbg !8449
  %34 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !8451
  %v28 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %34, i32 0, i32 0, !dbg !8452
  %35 = load %struct.BMVert*, %struct.BMVert** %v28, align 8, !dbg !8452
  %co29 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %35, i32 0, i32 2, !dbg !8453
  %arraydecay30 = getelementptr inbounds [3 x float], [3 x float]* %co29, i64 0, i64 0, !dbg !8451
  call void @sub_v3_v3v3(float* %arraydecay21, float* %arraydecay27, float* %arraydecay30), !dbg !8454
  %arraydecay31 = getelementptr inbounds [3 x float], [3 x float]* %dir1, i64 0, i64 0, !dbg !8455
  %call32 = call float @normalize_v3(float* %arraydecay31), !dbg !8456
  %arraydecay33 = getelementptr inbounds [3 x float], [3 x float]* %dir3, i64 0, i64 0, !dbg !8457
  %call34 = call float @normalize_v3(float* %arraydecay33), !dbg !8458
  %arraydecay35 = getelementptr inbounds [3 x float], [3 x float]* %dir1, i64 0, i64 0, !dbg !8459
  %arraydecay36 = getelementptr inbounds [3 x float], [3 x float]* %dir3, i64 0, i64 0, !dbg !8461
  %call37 = call float @angle_normalized_v3v3(float* %arraydecay35, float* %arraydecay36), !dbg !8462
  %cmp38 = fcmp olt float %call37, 0x3F1A36E2E0000000, !dbg !8463
  br i1 %cmp38, label %if.then39, label %if.end41, !dbg !8464

if.then39:                                        ; preds = %if.then14
  %36 = load %struct.BoundVert*, %struct.BoundVert** %v1, align 8, !dbg !8465
  %ebev40 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %36, i32 0, i32 5, !dbg !8467
  %37 = load %struct.EdgeHalf*, %struct.EdgeHalf** %ebev40, align 8, !dbg !8467
  store %struct.EdgeHalf* %37, %struct.EdgeHalf** %epipe, align 8, !dbg !8468
  br label %do.end, !dbg !8469

if.end41:                                         ; preds = %if.then14
  br label %if.end42, !dbg !8470

if.end42:                                         ; preds = %if.end41, %land.lhs.true11, %land.lhs.true, %do.body
  br label %do.cond, !dbg !8471

do.cond:                                          ; preds = %if.end42
  %38 = load %struct.BoundVert*, %struct.BoundVert** %v1, align 8, !dbg !8472
  %next43 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %38, i32 0, i32 0, !dbg !8473
  %39 = load %struct.BoundVert*, %struct.BoundVert** %next43, align 8, !dbg !8473
  store %struct.BoundVert* %39, %struct.BoundVert** %v1, align 8, !dbg !8474
  %40 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !8475
  %boundstart44 = getelementptr inbounds %struct.VMesh, %struct.VMesh* %40, i32 0, i32 1, !dbg !8476
  %41 = load %struct.BoundVert*, %struct.BoundVert** %boundstart44, align 8, !dbg !8476
  %cmp45 = icmp ne %struct.BoundVert* %39, %41, !dbg !8477
  br i1 %cmp45, label %do.body, label %do.end, !dbg !8471, !llvm.loop !8478

do.end:                                           ; preds = %do.cond, %if.then39
  %42 = load %struct.EdgeHalf*, %struct.EdgeHalf** %epipe, align 8, !dbg !8480
  %tobool46 = icmp ne %struct.EdgeHalf* %42, null, !dbg !8480
  br i1 %tobool46, label %if.end48, label %if.then47, !dbg !8482

if.then47:                                        ; preds = %do.end
  store %struct.BoundVert* null, %struct.BoundVert** %retval, align 8, !dbg !8483
  br label %return, !dbg !8483

if.end48:                                         ; preds = %do.end
  %43 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !8484
  %edges = getelementptr inbounds %struct.BevVert, %struct.BevVert* %43, i32 0, i32 7, !dbg !8486
  %44 = load %struct.EdgeHalf*, %struct.EdgeHalf** %edges, align 8, !dbg !8486
  %arrayidx = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %44, i64 0, !dbg !8484
  store %struct.EdgeHalf* %arrayidx, %struct.EdgeHalf** %e, align 8, !dbg !8487
  br label %for.cond, !dbg !8488

for.cond:                                         ; preds = %for.inc, %if.end48
  %45 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !8489
  %46 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !8491
  %edges49 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %46, i32 0, i32 7, !dbg !8492
  %47 = load %struct.EdgeHalf*, %struct.EdgeHalf** %edges49, align 8, !dbg !8492
  %48 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !8493
  %edgecount = getelementptr inbounds %struct.BevVert, %struct.BevVert* %48, i32 0, i32 1, !dbg !8494
  %49 = load i32, i32* %edgecount, align 8, !dbg !8494
  %idxprom = sext i32 %49 to i64, !dbg !8491
  %arrayidx50 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %47, i64 %idxprom, !dbg !8491
  %cmp51 = icmp ne %struct.EdgeHalf* %45, %arrayidx50, !dbg !8495
  br i1 %cmp51, label %for.body, label %for.end, !dbg !8496

for.body:                                         ; preds = %for.cond
  %50 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !8497
  %fnext = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %50, i32 0, i32 4, !dbg !8500
  %51 = load %struct.BMFace*, %struct.BMFace** %fnext, align 8, !dbg !8500
  %tobool52 = icmp ne %struct.BMFace* %51, null, !dbg !8497
  br i1 %tobool52, label %if.then53, label %if.end61, !dbg !8501

if.then53:                                        ; preds = %for.body
  %arraydecay54 = getelementptr inbounds [3 x float], [3 x float]* %dir1, i64 0, i64 0, !dbg !8502
  %52 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !8505
  %fnext55 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %52, i32 0, i32 4, !dbg !8506
  %53 = load %struct.BMFace*, %struct.BMFace** %fnext55, align 8, !dbg !8506
  %no = getelementptr inbounds %struct.BMFace, %struct.BMFace* %53, i32 0, i32 4, !dbg !8507
  %arraydecay56 = getelementptr inbounds [3 x float], [3 x float]* %no, i64 0, i64 0, !dbg !8505
  %call57 = call float @dot_v3v3(float* %arraydecay54, float* %arraydecay56), !dbg !8508
  %cmp58 = fcmp ogt float %call57, 0x3EB0C6F7A0000000, !dbg !8509
  br i1 %cmp58, label %if.then59, label %if.end60, !dbg !8510

if.then59:                                        ; preds = %if.then53
  store %struct.BoundVert* null, %struct.BoundVert** %retval, align 8, !dbg !8511
  br label %return, !dbg !8511

if.end60:                                         ; preds = %if.then53
  br label %if.end61, !dbg !8512

if.end61:                                         ; preds = %if.end60, %for.body
  br label %for.inc, !dbg !8513

for.inc:                                          ; preds = %if.end61
  %54 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !8514
  %incdec.ptr = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %54, i32 1, !dbg !8514
  store %struct.EdgeHalf* %incdec.ptr, %struct.EdgeHalf** %e, align 8, !dbg !8514
  br label %for.cond, !dbg !8515, !llvm.loop !8516

for.end:                                          ; preds = %for.cond
  %55 = load %struct.BoundVert*, %struct.BoundVert** %v1, align 8, !dbg !8518
  store %struct.BoundVert* %55, %struct.BoundVert** %retval, align 8, !dbg !8519
  br label %return, !dbg !8519

return:                                           ; preds = %for.end, %if.then59, %if.then47, %if.then
  %56 = load %struct.BoundVert*, %struct.BoundVert** %retval, align 8, !dbg !8520
  ret %struct.BoundVert* %56, !dbg !8520
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VMesh* @pipe_adj_vmesh(%struct.BevelParams* %bp, %struct.BevVert* %bv, %struct.BoundVert* %vpipe) #0 !dbg !8521 {
entry:
  %bp.addr = alloca %struct.BevelParams*, align 8
  %bv.addr = alloca %struct.BevVert*, align 8
  %vpipe.addr = alloca %struct.BoundVert*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %n = alloca i32, align 4
  %ns = alloca i32, align 4
  %ns2 = alloca i32, align 4
  %ipipe1 = alloca i32, align 4
  %ipipe2 = alloca i32, align 4
  %vm = alloca %struct.VMesh*, align 8
  %even = alloca i8, align 1
  %midline = alloca i8, align 1
  store %struct.BevelParams* %bp, %struct.BevelParams** %bp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BevelParams** %bp.addr, metadata !8524, metadata !DIExpression()), !dbg !8525
  store %struct.BevVert* %bv, %struct.BevVert** %bv.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BevVert** %bv.addr, metadata !8526, metadata !DIExpression()), !dbg !8527
  store %struct.BoundVert* %vpipe, %struct.BoundVert** %vpipe.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BoundVert** %vpipe.addr, metadata !8528, metadata !DIExpression()), !dbg !8529
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8530, metadata !DIExpression()), !dbg !8531
  call void @llvm.dbg.declare(metadata i32* %j, metadata !8532, metadata !DIExpression()), !dbg !8533
  call void @llvm.dbg.declare(metadata i32* %k, metadata !8534, metadata !DIExpression()), !dbg !8535
  call void @llvm.dbg.declare(metadata i32* %n, metadata !8536, metadata !DIExpression()), !dbg !8537
  call void @llvm.dbg.declare(metadata i32* %ns, metadata !8538, metadata !DIExpression()), !dbg !8539
  call void @llvm.dbg.declare(metadata i32* %ns2, metadata !8540, metadata !DIExpression()), !dbg !8541
  call void @llvm.dbg.declare(metadata i32* %ipipe1, metadata !8542, metadata !DIExpression()), !dbg !8543
  call void @llvm.dbg.declare(metadata i32* %ipipe2, metadata !8544, metadata !DIExpression()), !dbg !8545
  call void @llvm.dbg.declare(metadata %struct.VMesh** %vm, metadata !8546, metadata !DIExpression()), !dbg !8547
  call void @llvm.dbg.declare(metadata i8* %even, metadata !8548, metadata !DIExpression()), !dbg !8549
  call void @llvm.dbg.declare(metadata i8* %midline, metadata !8550, metadata !DIExpression()), !dbg !8551
  %0 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !8552
  %1 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !8553
  %call = call %struct.VMesh* @adj_vmesh(%struct.BevelParams* %0, %struct.BevVert* %1), !dbg !8554
  store %struct.VMesh* %call, %struct.VMesh** %vm, align 8, !dbg !8555
  %2 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !8556
  %vmesh = getelementptr inbounds %struct.BevVert, %struct.BevVert* %2, i32 0, i32 9, !dbg !8557
  %3 = load %struct.VMesh*, %struct.VMesh** %vmesh, align 8, !dbg !8557
  %count = getelementptr inbounds %struct.VMesh, %struct.VMesh* %3, i32 0, i32 2, !dbg !8558
  %4 = load i32, i32* %count, align 8, !dbg !8558
  store i32 %4, i32* %n, align 4, !dbg !8559
  %5 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !8560
  %vmesh1 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %5, i32 0, i32 9, !dbg !8561
  %6 = load %struct.VMesh*, %struct.VMesh** %vmesh1, align 8, !dbg !8561
  %seg = getelementptr inbounds %struct.VMesh, %struct.VMesh* %6, i32 0, i32 3, !dbg !8562
  %7 = load i32, i32* %seg, align 4, !dbg !8562
  store i32 %7, i32* %ns, align 4, !dbg !8563
  %8 = load i32, i32* %ns, align 4, !dbg !8564
  %div = sdiv i32 %8, 2, !dbg !8565
  store i32 %div, i32* %ns2, align 4, !dbg !8566
  %9 = load i32, i32* %ns, align 4, !dbg !8567
  %rem = srem i32 %9, 2, !dbg !8568
  %cmp = icmp eq i32 %rem, 0, !dbg !8569
  %conv = zext i1 %cmp to i32, !dbg !8569
  %conv2 = trunc i32 %conv to i8, !dbg !8570
  store i8 %conv2, i8* %even, align 1, !dbg !8571
  %10 = load %struct.BoundVert*, %struct.BoundVert** %vpipe.addr, align 8, !dbg !8572
  %index = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %10, i32 0, i32 6, !dbg !8573
  %11 = load i32, i32* %index, align 8, !dbg !8573
  store i32 %11, i32* %ipipe1, align 4, !dbg !8574
  %12 = load %struct.BoundVert*, %struct.BoundVert** %vpipe.addr, align 8, !dbg !8575
  %next = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %12, i32 0, i32 0, !dbg !8576
  %13 = load %struct.BoundVert*, %struct.BoundVert** %next, align 8, !dbg !8576
  %next3 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %13, i32 0, i32 0, !dbg !8577
  %14 = load %struct.BoundVert*, %struct.BoundVert** %next3, align 8, !dbg !8577
  %index4 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %14, i32 0, i32 6, !dbg !8578
  %15 = load i32, i32* %index4, align 8, !dbg !8578
  store i32 %15, i32* %ipipe2, align 4, !dbg !8579
  store i32 0, i32* %i, align 4, !dbg !8580
  br label %for.cond, !dbg !8582

for.cond:                                         ; preds = %for.inc36, %entry
  %16 = load i32, i32* %i, align 4, !dbg !8583
  %17 = load i32, i32* %n, align 4, !dbg !8585
  %cmp5 = icmp slt i32 %16, %17, !dbg !8586
  br i1 %cmp5, label %for.body, label %for.end38, !dbg !8587

for.body:                                         ; preds = %for.cond
  store i32 1, i32* %j, align 4, !dbg !8588
  br label %for.cond7, !dbg !8591

for.cond7:                                        ; preds = %for.inc33, %for.body
  %18 = load i32, i32* %j, align 4, !dbg !8592
  %19 = load i32, i32* %ns2, align 4, !dbg !8594
  %cmp8 = icmp sle i32 %18, %19, !dbg !8595
  br i1 %cmp8, label %for.body10, label %for.end35, !dbg !8596

for.body10:                                       ; preds = %for.cond7
  store i32 0, i32* %k, align 4, !dbg !8597
  br label %for.cond11, !dbg !8600

for.cond11:                                       ; preds = %for.inc, %for.body10
  %20 = load i32, i32* %k, align 4, !dbg !8601
  %21 = load i32, i32* %ns2, align 4, !dbg !8603
  %cmp12 = icmp sle i32 %20, %21, !dbg !8604
  br i1 %cmp12, label %for.body14, label %for.end, !dbg !8605

for.body14:                                       ; preds = %for.cond11
  %22 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !8606
  %23 = load i32, i32* %i, align 4, !dbg !8609
  %24 = load i32, i32* %j, align 4, !dbg !8610
  %25 = load i32, i32* %k, align 4, !dbg !8611
  %call15 = call zeroext i8 @is_canon(%struct.VMesh* %22, i32 %23, i32 %24, i32 %25), !dbg !8612
  %tobool = icmp ne i8 %call15, 0, !dbg !8612
  br i1 %tobool, label %if.end, label %if.then, !dbg !8613

if.then:                                          ; preds = %for.body14
  br label %for.inc, !dbg !8614

if.end:                                           ; preds = %for.body14
  %26 = load i8, i8* %even, align 1, !dbg !8615
  %conv16 = zext i8 %26 to i32, !dbg !8615
  %tobool17 = icmp ne i32 %conv16, 0, !dbg !8615
  br i1 %tobool17, label %land.lhs.true, label %land.end, !dbg !8616

land.lhs.true:                                    ; preds = %if.end
  %27 = load i32, i32* %k, align 4, !dbg !8617
  %28 = load i32, i32* %ns2, align 4, !dbg !8618
  %cmp18 = icmp eq i32 %27, %28, !dbg !8619
  br i1 %cmp18, label %land.rhs, label %land.end, !dbg !8620

land.rhs:                                         ; preds = %land.lhs.true
  %29 = load i32, i32* %i, align 4, !dbg !8621
  %cmp20 = icmp eq i32 %29, 0, !dbg !8622
  br i1 %cmp20, label %land.lhs.true22, label %lor.rhs, !dbg !8623

land.lhs.true22:                                  ; preds = %land.rhs
  %30 = load i32, i32* %j, align 4, !dbg !8624
  %31 = load i32, i32* %ns2, align 4, !dbg !8625
  %cmp23 = icmp eq i32 %30, %31, !dbg !8626
  br i1 %cmp23, label %lor.end30, label %lor.rhs, !dbg !8627

lor.rhs:                                          ; preds = %land.lhs.true22, %land.rhs
  %32 = load i32, i32* %i, align 4, !dbg !8628
  %33 = load i32, i32* %ipipe1, align 4, !dbg !8629
  %cmp25 = icmp eq i32 %32, %33, !dbg !8630
  br i1 %cmp25, label %lor.end, label %lor.rhs27, !dbg !8631

lor.rhs27:                                        ; preds = %lor.rhs
  %34 = load i32, i32* %i, align 4, !dbg !8632
  %35 = load i32, i32* %ipipe2, align 4, !dbg !8633
  %cmp28 = icmp eq i32 %34, %35, !dbg !8634
  br label %lor.end, !dbg !8631

lor.end:                                          ; preds = %lor.rhs27, %lor.rhs
  %36 = phi i1 [ true, %lor.rhs ], [ %cmp28, %lor.rhs27 ]
  br label %lor.end30, !dbg !8627

lor.end30:                                        ; preds = %lor.end, %land.lhs.true22
  %37 = phi i1 [ true, %land.lhs.true22 ], [ %36, %lor.end ]
  br label %land.end

land.end:                                         ; preds = %lor.end30, %land.lhs.true, %if.end
  %38 = phi i1 [ false, %land.lhs.true ], [ false, %if.end ], [ %37, %lor.end30 ], !dbg !8635
  %land.ext = zext i1 %38 to i32, !dbg !8620
  %conv31 = trunc i32 %land.ext to i8, !dbg !8615
  store i8 %conv31, i8* %midline, align 1, !dbg !8636
  %39 = load %struct.BoundVert*, %struct.BoundVert** %vpipe.addr, align 8, !dbg !8637
  %40 = load i8, i8* %midline, align 1, !dbg !8638
  %41 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !8639
  %42 = load i32, i32* %i, align 4, !dbg !8640
  %43 = load i32, i32* %j, align 4, !dbg !8641
  %44 = load i32, i32* %k, align 4, !dbg !8642
  %call32 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %41, i32 %42, i32 %43, i32 %44), !dbg !8643
  %co = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call32, i32 0, i32 1, !dbg !8644
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !8643
  call void @snap_to_pipe_profile(%struct.BoundVert* %39, i8 zeroext %40, float* %arraydecay), !dbg !8645
  br label %for.inc, !dbg !8646

for.inc:                                          ; preds = %land.end, %if.then
  %45 = load i32, i32* %k, align 4, !dbg !8647
  %inc = add nsw i32 %45, 1, !dbg !8647
  store i32 %inc, i32* %k, align 4, !dbg !8647
  br label %for.cond11, !dbg !8648, !llvm.loop !8649

for.end:                                          ; preds = %for.cond11
  br label %for.inc33, !dbg !8651

for.inc33:                                        ; preds = %for.end
  %46 = load i32, i32* %j, align 4, !dbg !8652
  %inc34 = add nsw i32 %46, 1, !dbg !8652
  store i32 %inc34, i32* %j, align 4, !dbg !8652
  br label %for.cond7, !dbg !8653, !llvm.loop !8654

for.end35:                                        ; preds = %for.cond7
  br label %for.inc36, !dbg !8656

for.inc36:                                        ; preds = %for.end35
  %47 = load i32, i32* %i, align 4, !dbg !8657
  %inc37 = add nsw i32 %47, 1, !dbg !8657
  store i32 %inc37, i32* %i, align 4, !dbg !8657
  br label %for.cond, !dbg !8658, !llvm.loop !8659

for.end38:                                        ; preds = %for.cond
  %48 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !8661
  ret %struct.VMesh* %48, !dbg !8662
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @tri_corner_test(%struct.BevelParams* %bp, %struct.BevVert* %bv) #0 !dbg !8663 {
entry:
  %retval = alloca i8, align 1
  %bp.addr = alloca %struct.BevelParams*, align 8
  %bv.addr = alloca %struct.BevVert*, align 8
  %ang = alloca float, align 4
  %totang = alloca float, align 4
  %angdiff = alloca float, align 4
  %e = alloca %struct.EdgeHalf*, align 8
  %i = alloca i32, align 4
  store %struct.BevelParams* %bp, %struct.BevelParams** %bp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BevelParams** %bp.addr, metadata !8666, metadata !DIExpression()), !dbg !8667
  store %struct.BevVert* %bv, %struct.BevVert** %bv.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BevVert** %bv.addr, metadata !8668, metadata !DIExpression()), !dbg !8669
  call void @llvm.dbg.declare(metadata float* %ang, metadata !8670, metadata !DIExpression()), !dbg !8671
  call void @llvm.dbg.declare(metadata float* %totang, metadata !8672, metadata !DIExpression()), !dbg !8673
  call void @llvm.dbg.declare(metadata float* %angdiff, metadata !8674, metadata !DIExpression()), !dbg !8675
  call void @llvm.dbg.declare(metadata %struct.EdgeHalf** %e, metadata !8676, metadata !DIExpression()), !dbg !8677
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8678, metadata !DIExpression()), !dbg !8679
  %0 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !8680
  %edgecount = getelementptr inbounds %struct.BevVert, %struct.BevVert* %0, i32 0, i32 1, !dbg !8682
  %1 = load i32, i32* %edgecount, align 8, !dbg !8682
  %cmp = icmp ne i32 %1, 3, !dbg !8683
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !8684

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !8685
  %selcount = getelementptr inbounds %struct.BevVert, %struct.BevVert* %2, i32 0, i32 2, !dbg !8686
  %3 = load i32, i32* %selcount, align 4, !dbg !8686
  %cmp1 = icmp ne i32 %3, 3, !dbg !8687
  br i1 %cmp1, label %if.then, label %if.end, !dbg !8688

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8 0, i8* %retval, align 1, !dbg !8689
  br label %return, !dbg !8689

if.end:                                           ; preds = %lor.lhs.false
  store float 0.000000e+00, float* %totang, align 4, !dbg !8690
  store i32 0, i32* %i, align 4, !dbg !8691
  br label %for.cond, !dbg !8693

for.cond:                                         ; preds = %for.inc, %if.end
  %4 = load i32, i32* %i, align 4, !dbg !8694
  %cmp2 = icmp slt i32 %4, 3, !dbg !8696
  br i1 %cmp2, label %for.body, label %for.end, !dbg !8697

for.body:                                         ; preds = %for.cond
  %5 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !8698
  %edges = getelementptr inbounds %struct.BevVert, %struct.BevVert* %5, i32 0, i32 7, !dbg !8700
  %6 = load %struct.EdgeHalf*, %struct.EdgeHalf** %edges, align 8, !dbg !8700
  %7 = load i32, i32* %i, align 4, !dbg !8701
  %idxprom = sext i32 %7 to i64, !dbg !8698
  %arrayidx = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %6, i64 %idxprom, !dbg !8698
  store %struct.EdgeHalf* %arrayidx, %struct.EdgeHalf** %e, align 8, !dbg !8702
  %8 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !8703
  %e3 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %8, i32 0, i32 2, !dbg !8704
  %9 = load %struct.BMEdge*, %struct.BMEdge** %e3, align 8, !dbg !8704
  %call = call float @BM_edge_calc_face_angle_signed_ex(%struct.BMEdge* %9, float 0.000000e+00), !dbg !8705
  store float %call, float* %ang, align 4, !dbg !8706
  %10 = load float, float* %ang, align 4, !dbg !8707
  %cmp4 = fcmp ole float %10, 0x3FE921FB60000000, !dbg !8709
  br i1 %cmp4, label %if.then7, label %lor.lhs.false5, !dbg !8710

lor.lhs.false5:                                   ; preds = %for.body
  %11 = load float, float* %ang, align 4, !dbg !8711
  %cmp6 = fcmp oge float %11, 0x4002D97C80000000, !dbg !8712
  br i1 %cmp6, label %if.then7, label %if.end8, !dbg !8713

if.then7:                                         ; preds = %lor.lhs.false5, %for.body
  store i8 0, i8* %retval, align 1, !dbg !8714
  br label %return, !dbg !8714

if.end8:                                          ; preds = %lor.lhs.false5
  %12 = load float, float* %ang, align 4, !dbg !8715
  %13 = load float, float* %totang, align 4, !dbg !8716
  %add = fadd float %13, %12, !dbg !8716
  store float %add, float* %totang, align 4, !dbg !8716
  br label %for.inc, !dbg !8717

for.inc:                                          ; preds = %if.end8
  %14 = load i32, i32* %i, align 4, !dbg !8718
  %inc = add nsw i32 %14, 1, !dbg !8718
  store i32 %inc, i32* %i, align 4, !dbg !8718
  br label %for.cond, !dbg !8719, !llvm.loop !8720

for.end:                                          ; preds = %for.cond
  %15 = load float, float* %totang, align 4, !dbg !8722
  %sub = fsub float %15, 0x4012D97C80000000, !dbg !8723
  %16 = call float @llvm.fabs.f32(float %sub), !dbg !8724
  store float %16, float* %angdiff, align 4, !dbg !8725
  %17 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !8726
  %pro_super_r = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %17, i32 0, i32 6, !dbg !8728
  %18 = load float, float* %pro_super_r, align 4, !dbg !8728
  %cmp9 = fcmp oeq float %18, 4.000000e+00, !dbg !8729
  br i1 %cmp9, label %land.lhs.true, label %lor.lhs.false11, !dbg !8730

land.lhs.true:                                    ; preds = %for.end
  %19 = load float, float* %angdiff, align 4, !dbg !8731
  %cmp10 = fcmp ogt float %19, 0x3FC921FB60000000, !dbg !8732
  br i1 %cmp10, label %if.then13, label %lor.lhs.false11, !dbg !8733

lor.lhs.false11:                                  ; preds = %land.lhs.true, %for.end
  %20 = load float, float* %angdiff, align 4, !dbg !8734
  %cmp12 = fcmp ogt float %20, 0x3FE921FB60000000, !dbg !8735
  br i1 %cmp12, label %if.then13, label %if.end14, !dbg !8736

if.then13:                                        ; preds = %lor.lhs.false11, %land.lhs.true
  store i8 0, i8* %retval, align 1, !dbg !8737
  br label %return, !dbg !8737

if.end14:                                         ; preds = %lor.lhs.false11
  store i8 1, i8* %retval, align 1, !dbg !8739
  br label %return, !dbg !8739

return:                                           ; preds = %if.end14, %if.then13, %if.then7, %if.then
  %21 = load i8, i8* %retval, align 1, !dbg !8740
  ret i8 %21, !dbg !8740
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VMesh* @tri_corner_adj_vmesh(%struct.BevelParams* %bp, %struct.BevVert* %bv) #0 !dbg !8741 {
entry:
  %bp.addr = alloca %struct.BevelParams*, align 8
  %bv.addr = alloca %struct.BevVert*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %ns = alloca i32, align 4
  %ns2 = alloca i32, align 4
  %co0 = alloca [3 x float], align 4
  %co1 = alloca [3 x float], align 4
  %co2 = alloca [3 x float], align 4
  %mat = alloca [4 x [4 x float]], align 16
  %v = alloca [4 x float], align 16
  %vm = alloca %struct.VMesh*, align 8
  %bndv = alloca %struct.BoundVert*, align 8
  store %struct.BevelParams* %bp, %struct.BevelParams** %bp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BevelParams** %bp.addr, metadata !8744, metadata !DIExpression()), !dbg !8745
  store %struct.BevVert* %bv, %struct.BevVert** %bv.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BevVert** %bv.addr, metadata !8746, metadata !DIExpression()), !dbg !8747
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8748, metadata !DIExpression()), !dbg !8749
  call void @llvm.dbg.declare(metadata i32* %j, metadata !8750, metadata !DIExpression()), !dbg !8751
  call void @llvm.dbg.declare(metadata i32* %k, metadata !8752, metadata !DIExpression()), !dbg !8753
  call void @llvm.dbg.declare(metadata i32* %ns, metadata !8754, metadata !DIExpression()), !dbg !8755
  call void @llvm.dbg.declare(metadata i32* %ns2, metadata !8756, metadata !DIExpression()), !dbg !8757
  call void @llvm.dbg.declare(metadata [3 x float]* %co0, metadata !8758, metadata !DIExpression()), !dbg !8759
  call void @llvm.dbg.declare(metadata [3 x float]* %co1, metadata !8760, metadata !DIExpression()), !dbg !8761
  call void @llvm.dbg.declare(metadata [3 x float]* %co2, metadata !8762, metadata !DIExpression()), !dbg !8763
  call void @llvm.dbg.declare(metadata [4 x [4 x float]]* %mat, metadata !8764, metadata !DIExpression()), !dbg !8765
  call void @llvm.dbg.declare(metadata [4 x float]* %v, metadata !8766, metadata !DIExpression()), !dbg !8767
  call void @llvm.dbg.declare(metadata %struct.VMesh** %vm, metadata !8768, metadata !DIExpression()), !dbg !8769
  call void @llvm.dbg.declare(metadata %struct.BoundVert** %bndv, metadata !8770, metadata !DIExpression()), !dbg !8771
  %0 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !8772
  %vmesh = getelementptr inbounds %struct.BevVert, %struct.BevVert* %0, i32 0, i32 9, !dbg !8773
  %1 = load %struct.VMesh*, %struct.VMesh** %vmesh, align 8, !dbg !8773
  %boundstart = getelementptr inbounds %struct.VMesh, %struct.VMesh* %1, i32 0, i32 1, !dbg !8774
  %2 = load %struct.BoundVert*, %struct.BoundVert** %boundstart, align 8, !dbg !8774
  store %struct.BoundVert* %2, %struct.BoundVert** %bndv, align 8, !dbg !8775
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %co0, i64 0, i64 0, !dbg !8776
  %3 = load %struct.BoundVert*, %struct.BoundVert** %bndv, align 8, !dbg !8777
  %nv = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %3, i32 0, i32 2, !dbg !8778
  %co = getelementptr inbounds %struct.NewVert, %struct.NewVert* %nv, i32 0, i32 1, !dbg !8779
  %arraydecay1 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !8777
  call void @copy_v3_v3(float* %arraydecay, float* %arraydecay1), !dbg !8780
  %4 = load %struct.BoundVert*, %struct.BoundVert** %bndv, align 8, !dbg !8781
  %next = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %4, i32 0, i32 0, !dbg !8782
  %5 = load %struct.BoundVert*, %struct.BoundVert** %next, align 8, !dbg !8782
  store %struct.BoundVert* %5, %struct.BoundVert** %bndv, align 8, !dbg !8783
  %arraydecay2 = getelementptr inbounds [3 x float], [3 x float]* %co1, i64 0, i64 0, !dbg !8784
  %6 = load %struct.BoundVert*, %struct.BoundVert** %bndv, align 8, !dbg !8785
  %nv3 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %6, i32 0, i32 2, !dbg !8786
  %co4 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %nv3, i32 0, i32 1, !dbg !8787
  %arraydecay5 = getelementptr inbounds [3 x float], [3 x float]* %co4, i64 0, i64 0, !dbg !8785
  call void @copy_v3_v3(float* %arraydecay2, float* %arraydecay5), !dbg !8788
  %7 = load %struct.BoundVert*, %struct.BoundVert** %bndv, align 8, !dbg !8789
  %next6 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %7, i32 0, i32 0, !dbg !8790
  %8 = load %struct.BoundVert*, %struct.BoundVert** %next6, align 8, !dbg !8790
  store %struct.BoundVert* %8, %struct.BoundVert** %bndv, align 8, !dbg !8791
  %arraydecay7 = getelementptr inbounds [3 x float], [3 x float]* %co2, i64 0, i64 0, !dbg !8792
  %9 = load %struct.BoundVert*, %struct.BoundVert** %bndv, align 8, !dbg !8793
  %nv8 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %9, i32 0, i32 2, !dbg !8794
  %co9 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %nv8, i32 0, i32 1, !dbg !8795
  %arraydecay10 = getelementptr inbounds [3 x float], [3 x float]* %co9, i64 0, i64 0, !dbg !8793
  call void @copy_v3_v3(float* %arraydecay7, float* %arraydecay10), !dbg !8796
  %arraydecay11 = getelementptr inbounds [3 x float], [3 x float]* %co0, i64 0, i64 0, !dbg !8797
  %arraydecay12 = getelementptr inbounds [3 x float], [3 x float]* %co1, i64 0, i64 0, !dbg !8798
  %arraydecay13 = getelementptr inbounds [3 x float], [3 x float]* %co2, i64 0, i64 0, !dbg !8799
  %10 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !8800
  %v14 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %10, i32 0, i32 0, !dbg !8801
  %11 = load %struct.BMVert*, %struct.BMVert** %v14, align 8, !dbg !8801
  %co15 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %11, i32 0, i32 2, !dbg !8802
  %arraydecay16 = getelementptr inbounds [3 x float], [3 x float]* %co15, i64 0, i64 0, !dbg !8800
  %arraydecay17 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %mat, i64 0, i64 0, !dbg !8803
  call void @make_unit_cube_map(float* %arraydecay11, float* %arraydecay12, float* %arraydecay13, float* %arraydecay16, [4 x float]* %arraydecay17), !dbg !8804
  %12 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !8805
  %seg = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %12, i32 0, i32 5, !dbg !8806
  %13 = load i32, i32* %seg, align 8, !dbg !8806
  store i32 %13, i32* %ns, align 4, !dbg !8807
  %14 = load i32, i32* %ns, align 4, !dbg !8808
  %div = sdiv i32 %14, 2, !dbg !8809
  store i32 %div, i32* %ns2, align 4, !dbg !8810
  %15 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !8811
  %call = call %struct.VMesh* @make_cube_corner_adj_vmesh(%struct.BevelParams* %15), !dbg !8812
  store %struct.VMesh* %call, %struct.VMesh** %vm, align 8, !dbg !8813
  store i32 0, i32* %i, align 4, !dbg !8814
  br label %for.cond, !dbg !8816

for.cond:                                         ; preds = %for.inc37, %entry
  %16 = load i32, i32* %i, align 4, !dbg !8817
  %cmp = icmp slt i32 %16, 3, !dbg !8819
  br i1 %cmp, label %for.body, label %for.end39, !dbg !8820

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4, !dbg !8821
  br label %for.cond18, !dbg !8824

for.cond18:                                       ; preds = %for.inc34, %for.body
  %17 = load i32, i32* %j, align 4, !dbg !8825
  %18 = load i32, i32* %ns2, align 4, !dbg !8827
  %cmp19 = icmp sle i32 %17, %18, !dbg !8828
  br i1 %cmp19, label %for.body20, label %for.end36, !dbg !8829

for.body20:                                       ; preds = %for.cond18
  store i32 0, i32* %k, align 4, !dbg !8830
  br label %for.cond21, !dbg !8833

for.cond21:                                       ; preds = %for.inc, %for.body20
  %19 = load i32, i32* %k, align 4, !dbg !8834
  %20 = load i32, i32* %ns, align 4, !dbg !8836
  %cmp22 = icmp sle i32 %19, %20, !dbg !8837
  br i1 %cmp22, label %for.body23, label %for.end, !dbg !8838

for.body23:                                       ; preds = %for.cond21
  %arraydecay24 = getelementptr inbounds [4 x float], [4 x float]* %v, i64 0, i64 0, !dbg !8839
  %21 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !8841
  %22 = load i32, i32* %i, align 4, !dbg !8842
  %23 = load i32, i32* %j, align 4, !dbg !8843
  %24 = load i32, i32* %k, align 4, !dbg !8844
  %call25 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %21, i32 %22, i32 %23, i32 %24), !dbg !8845
  %co26 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call25, i32 0, i32 1, !dbg !8846
  %arraydecay27 = getelementptr inbounds [3 x float], [3 x float]* %co26, i64 0, i64 0, !dbg !8845
  call void @copy_v3_v3(float* %arraydecay24, float* %arraydecay27), !dbg !8847
  %arrayidx = getelementptr inbounds [4 x float], [4 x float]* %v, i64 0, i64 3, !dbg !8848
  store float 1.000000e+00, float* %arrayidx, align 4, !dbg !8849
  %arraydecay28 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %mat, i64 0, i64 0, !dbg !8850
  %arraydecay29 = getelementptr inbounds [4 x float], [4 x float]* %v, i64 0, i64 0, !dbg !8851
  call void @mul_m4_v4([4 x float]* %arraydecay28, float* %arraydecay29), !dbg !8852
  %25 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !8853
  %26 = load i32, i32* %i, align 4, !dbg !8854
  %27 = load i32, i32* %j, align 4, !dbg !8855
  %28 = load i32, i32* %k, align 4, !dbg !8856
  %call30 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %25, i32 %26, i32 %27, i32 %28), !dbg !8857
  %co31 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call30, i32 0, i32 1, !dbg !8858
  %arraydecay32 = getelementptr inbounds [3 x float], [3 x float]* %co31, i64 0, i64 0, !dbg !8857
  %arraydecay33 = getelementptr inbounds [4 x float], [4 x float]* %v, i64 0, i64 0, !dbg !8859
  call void @copy_v3_v3(float* %arraydecay32, float* %arraydecay33), !dbg !8860
  br label %for.inc, !dbg !8861

for.inc:                                          ; preds = %for.body23
  %29 = load i32, i32* %k, align 4, !dbg !8862
  %inc = add nsw i32 %29, 1, !dbg !8862
  store i32 %inc, i32* %k, align 4, !dbg !8862
  br label %for.cond21, !dbg !8863, !llvm.loop !8864

for.end:                                          ; preds = %for.cond21
  br label %for.inc34, !dbg !8866

for.inc34:                                        ; preds = %for.end
  %30 = load i32, i32* %j, align 4, !dbg !8867
  %inc35 = add nsw i32 %30, 1, !dbg !8867
  store i32 %inc35, i32* %j, align 4, !dbg !8867
  br label %for.cond18, !dbg !8868, !llvm.loop !8869

for.end36:                                        ; preds = %for.cond18
  br label %for.inc37, !dbg !8871

for.inc37:                                        ; preds = %for.end36
  %31 = load i32, i32* %i, align 4, !dbg !8872
  %inc38 = add nsw i32 %31, 1, !dbg !8872
  store i32 %inc38, i32* %i, align 4, !dbg !8872
  br label %for.cond, !dbg !8873, !llvm.loop !8874

for.end39:                                        ; preds = %for.cond
  %32 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !8876
  ret %struct.VMesh* %32, !dbg !8877
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VMesh* @adj_vmesh(%struct.BevelParams* %bp, %struct.BevVert* %bv) #0 !dbg !8878 {
entry:
  %bp.addr = alloca %struct.BevelParams*, align 8
  %bv.addr = alloca %struct.BevVert*, align 8
  %n = alloca i32, align 4
  %ns = alloca i32, align 4
  %i = alloca i32, align 4
  %vm0 = alloca %struct.VMesh*, align 8
  %vm1 = alloca %struct.VMesh*, align 8
  %co = alloca [3 x float], align 4
  %coa = alloca [3 x float], align 4
  %cob = alloca [3 x float], align 4
  %dir = alloca [3 x float], align 4
  %bndv = alloca %struct.BoundVert*, align 8
  %mem_arena = alloca %struct.MemArena*, align 8
  %r = alloca float, align 4
  %fac = alloca float, align 4
  %fullness = alloca float, align 4
  store %struct.BevelParams* %bp, %struct.BevelParams** %bp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BevelParams** %bp.addr, metadata !8879, metadata !DIExpression()), !dbg !8880
  store %struct.BevVert* %bv, %struct.BevVert** %bv.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BevVert** %bv.addr, metadata !8881, metadata !DIExpression()), !dbg !8882
  call void @llvm.dbg.declare(metadata i32* %n, metadata !8883, metadata !DIExpression()), !dbg !8884
  call void @llvm.dbg.declare(metadata i32* %ns, metadata !8885, metadata !DIExpression()), !dbg !8886
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8887, metadata !DIExpression()), !dbg !8888
  call void @llvm.dbg.declare(metadata %struct.VMesh** %vm0, metadata !8889, metadata !DIExpression()), !dbg !8890
  call void @llvm.dbg.declare(metadata %struct.VMesh** %vm1, metadata !8891, metadata !DIExpression()), !dbg !8892
  call void @llvm.dbg.declare(metadata [3 x float]* %co, metadata !8893, metadata !DIExpression()), !dbg !8894
  call void @llvm.dbg.declare(metadata [3 x float]* %coa, metadata !8895, metadata !DIExpression()), !dbg !8896
  call void @llvm.dbg.declare(metadata [3 x float]* %cob, metadata !8897, metadata !DIExpression()), !dbg !8898
  call void @llvm.dbg.declare(metadata [3 x float]* %dir, metadata !8899, metadata !DIExpression()), !dbg !8900
  call void @llvm.dbg.declare(metadata %struct.BoundVert** %bndv, metadata !8901, metadata !DIExpression()), !dbg !8902
  call void @llvm.dbg.declare(metadata %struct.MemArena** %mem_arena, metadata !8903, metadata !DIExpression()), !dbg !8904
  %0 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !8905
  %mem_arena1 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %0, i32 0, i32 1, !dbg !8906
  %1 = load %struct.MemArena*, %struct.MemArena** %mem_arena1, align 8, !dbg !8906
  store %struct.MemArena* %1, %struct.MemArena** %mem_arena, align 8, !dbg !8904
  call void @llvm.dbg.declare(metadata float* %r, metadata !8907, metadata !DIExpression()), !dbg !8908
  call void @llvm.dbg.declare(metadata float* %fac, metadata !8909, metadata !DIExpression()), !dbg !8910
  call void @llvm.dbg.declare(metadata float* %fullness, metadata !8911, metadata !DIExpression()), !dbg !8912
  %2 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !8913
  %vmesh = getelementptr inbounds %struct.BevVert, %struct.BevVert* %2, i32 0, i32 9, !dbg !8914
  %3 = load %struct.VMesh*, %struct.VMesh** %vmesh, align 8, !dbg !8914
  %count = getelementptr inbounds %struct.VMesh, %struct.VMesh* %3, i32 0, i32 2, !dbg !8915
  %4 = load i32, i32* %count, align 8, !dbg !8915
  store i32 %4, i32* %n, align 4, !dbg !8916
  %5 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !8917
  %vmesh2 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %5, i32 0, i32 9, !dbg !8918
  %6 = load %struct.VMesh*, %struct.VMesh** %vmesh2, align 8, !dbg !8918
  %seg = getelementptr inbounds %struct.VMesh, %struct.VMesh* %6, i32 0, i32 3, !dbg !8919
  %7 = load i32, i32* %seg, align 4, !dbg !8919
  store i32 %7, i32* %ns, align 4, !dbg !8920
  %8 = load %struct.MemArena*, %struct.MemArena** %mem_arena, align 8, !dbg !8921
  %9 = load i32, i32* %n, align 4, !dbg !8922
  %10 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !8923
  %vmesh3 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %10, i32 0, i32 9, !dbg !8924
  %11 = load %struct.VMesh*, %struct.VMesh** %vmesh3, align 8, !dbg !8924
  %boundstart = getelementptr inbounds %struct.VMesh, %struct.VMesh* %11, i32 0, i32 1, !dbg !8925
  %12 = load %struct.BoundVert*, %struct.BoundVert** %boundstart, align 8, !dbg !8925
  %call = call %struct.VMesh* @new_adj_vmesh(%struct.MemArena* %8, i32 %9, i32 2, %struct.BoundVert* %12), !dbg !8926
  store %struct.VMesh* %call, %struct.VMesh** %vm0, align 8, !dbg !8927
  %13 = load %struct.VMesh*, %struct.VMesh** %vm0, align 8, !dbg !8928
  %boundstart4 = getelementptr inbounds %struct.VMesh, %struct.VMesh* %13, i32 0, i32 1, !dbg !8929
  %14 = load %struct.BoundVert*, %struct.BoundVert** %boundstart4, align 8, !dbg !8929
  store %struct.BoundVert* %14, %struct.BoundVert** %bndv, align 8, !dbg !8930
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !8931
  call void @zero_v3(float* %arraydecay), !dbg !8932
  store i32 0, i32* %i, align 4, !dbg !8933
  br label %for.cond, !dbg !8935

for.cond:                                         ; preds = %for.inc, %entry
  %15 = load i32, i32* %i, align 4, !dbg !8936
  %16 = load i32, i32* %n, align 4, !dbg !8938
  %cmp = icmp slt i32 %15, %16, !dbg !8939
  br i1 %cmp, label %for.body, label %for.end, !dbg !8940

for.body:                                         ; preds = %for.cond
  %17 = load %struct.VMesh*, %struct.VMesh** %vm0, align 8, !dbg !8941
  %18 = load i32, i32* %i, align 4, !dbg !8943
  %call5 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %17, i32 %18, i32 0, i32 0), !dbg !8944
  %co6 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call5, i32 0, i32 1, !dbg !8945
  %arraydecay7 = getelementptr inbounds [3 x float], [3 x float]* %co6, i64 0, i64 0, !dbg !8944
  %19 = load %struct.BoundVert*, %struct.BoundVert** %bndv, align 8, !dbg !8946
  %nv = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %19, i32 0, i32 2, !dbg !8947
  %co8 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %nv, i32 0, i32 1, !dbg !8948
  %arraydecay9 = getelementptr inbounds [3 x float], [3 x float]* %co8, i64 0, i64 0, !dbg !8946
  call void @copy_v3_v3(float* %arraydecay7, float* %arraydecay9), !dbg !8949
  %20 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !8950
  %21 = load %struct.BoundVert*, %struct.BoundVert** %bndv, align 8, !dbg !8951
  %profile = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %21, i32 0, i32 7, !dbg !8952
  %22 = load %struct.VMesh*, %struct.VMesh** %vm0, align 8, !dbg !8953
  %23 = load i32, i32* %i, align 4, !dbg !8954
  %call10 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %22, i32 %23, i32 0, i32 1), !dbg !8955
  %co11 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call10, i32 0, i32 1, !dbg !8956
  %arraydecay12 = getelementptr inbounds [3 x float], [3 x float]* %co11, i64 0, i64 0, !dbg !8955
  call void @get_profile_point(%struct.BevelParams* %20, %struct.Profile* %profile, i32 1, i32 2, float* %arraydecay12), !dbg !8957
  %arraydecay13 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !8958
  %24 = load %struct.BoundVert*, %struct.BoundVert** %bndv, align 8, !dbg !8959
  %nv14 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %24, i32 0, i32 2, !dbg !8960
  %co15 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %nv14, i32 0, i32 1, !dbg !8961
  %arraydecay16 = getelementptr inbounds [3 x float], [3 x float]* %co15, i64 0, i64 0, !dbg !8959
  call void @add_v3_v3(float* %arraydecay13, float* %arraydecay16), !dbg !8962
  %25 = load %struct.BoundVert*, %struct.BoundVert** %bndv, align 8, !dbg !8963
  %next = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %25, i32 0, i32 0, !dbg !8964
  %26 = load %struct.BoundVert*, %struct.BoundVert** %next, align 8, !dbg !8964
  store %struct.BoundVert* %26, %struct.BoundVert** %bndv, align 8, !dbg !8965
  br label %for.inc, !dbg !8966

for.inc:                                          ; preds = %for.body
  %27 = load i32, i32* %i, align 4, !dbg !8967
  %inc = add nsw i32 %27, 1, !dbg !8967
  store i32 %inc, i32* %i, align 4, !dbg !8967
  br label %for.cond, !dbg !8968, !llvm.loop !8969

for.end:                                          ; preds = %for.cond
  %arraydecay17 = getelementptr inbounds [3 x float], [3 x float]* %coa, i64 0, i64 0, !dbg !8971
  %28 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !8972
  %v = getelementptr inbounds %struct.BevVert, %struct.BevVert* %28, i32 0, i32 0, !dbg !8973
  %29 = load %struct.BMVert*, %struct.BMVert** %v, align 8, !dbg !8973
  %co18 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %29, i32 0, i32 2, !dbg !8974
  %arraydecay19 = getelementptr inbounds [3 x float], [3 x float]* %co18, i64 0, i64 0, !dbg !8972
  call void @copy_v3_v3(float* %arraydecay17, float* %arraydecay19), !dbg !8975
  %arraydecay20 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !8976
  %30 = load i32, i32* %n, align 4, !dbg !8977
  %conv = sitofp i32 %30 to float, !dbg !8978
  %div = fdiv float 1.000000e+00, %conv, !dbg !8979
  call void @mul_v3_fl(float* %arraydecay20, float %div), !dbg !8980
  %arraydecay21 = getelementptr inbounds [3 x float], [3 x float]* %cob, i64 0, i64 0, !dbg !8981
  %arraydecay22 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !8982
  %arraydecay23 = getelementptr inbounds [3 x float], [3 x float]* %coa, i64 0, i64 0, !dbg !8983
  call void @sub_v3_v3v3(float* %arraydecay21, float* %arraydecay22, float* %arraydecay23), !dbg !8984
  %arraydecay24 = getelementptr inbounds [3 x float], [3 x float]* %cob, i64 0, i64 0, !dbg !8985
  %arraydecay25 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !8986
  call void @add_v3_v3(float* %arraydecay24, float* %arraydecay25), !dbg !8987
  %31 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !8988
  %pro_super_r = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %31, i32 0, i32 6, !dbg !8989
  %32 = load float, float* %pro_super_r, align 4, !dbg !8989
  store float %32, float* %r, align 4, !dbg !8990
  %33 = load float, float* %r, align 4, !dbg !8991
  %cmp26 = fcmp oeq float %33, 1.000000e+00, !dbg !8993
  br i1 %cmp26, label %if.then, label %if.else, !dbg !8994

if.then:                                          ; preds = %for.end
  store float 0.000000e+00, float* %fullness, align 4, !dbg !8995
  br label %if.end42, !dbg !8996

if.else:                                          ; preds = %for.end
  %34 = load float, float* %r, align 4, !dbg !8997
  %cmp28 = fcmp ogt float %34, 1.000000e+00, !dbg !8999
  br i1 %cmp28, label %if.then30, label %if.else39, !dbg !9000

if.then30:                                        ; preds = %if.else
  %35 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !9001
  %vertex_only = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %35, i32 0, i32 7, !dbg !9004
  %36 = load i8, i8* %vertex_only, align 8, !dbg !9004
  %tobool = icmp ne i8 %36, 0, !dbg !9001
  br i1 %tobool, label %if.then31, label %if.else32, !dbg !9005

if.then31:                                        ; preds = %if.then30
  store float 2.500000e-01, float* %fac, align 4, !dbg !9006
  br label %if.end37, !dbg !9007

if.else32:                                        ; preds = %if.then30
  %37 = load float, float* %r, align 4, !dbg !9008
  %cmp33 = fcmp oeq float %37, 4.000000e+00, !dbg !9010
  br i1 %cmp33, label %if.then35, label %if.else36, !dbg !9011

if.then35:                                        ; preds = %if.else32
  store float -2.000000e+00, float* %fac, align 4, !dbg !9012
  br label %if.end, !dbg !9013

if.else36:                                        ; preds = %if.else32
  store float 5.000000e-01, float* %fac, align 4, !dbg !9014
  br label %if.end

if.end:                                           ; preds = %if.else36, %if.then35
  br label %if.end37

if.end37:                                         ; preds = %if.end, %if.then31
  %38 = load float, float* %fac, align 4, !dbg !9015
  %39 = load float, float* %r, align 4, !dbg !9016
  %div38 = fdiv float %38, %39, !dbg !9017
  %sub = fsub float 1.000000e+00, %div38, !dbg !9018
  store float %sub, float* %fullness, align 4, !dbg !9019
  br label %if.end41, !dbg !9020

if.else39:                                        ; preds = %if.else
  %40 = load float, float* %r, align 4, !dbg !9021
  %sub40 = fsub float %40, 1.000000e+00, !dbg !9023
  store float %sub40, float* %fullness, align 4, !dbg !9024
  br label %if.end41

if.end41:                                         ; preds = %if.else39, %if.end37
  br label %if.end42

if.end42:                                         ; preds = %if.end41, %if.then
  %arraydecay43 = getelementptr inbounds [3 x float], [3 x float]* %dir, i64 0, i64 0, !dbg !9025
  %arraydecay44 = getelementptr inbounds [3 x float], [3 x float]* %coa, i64 0, i64 0, !dbg !9026
  %arraydecay45 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !9027
  call void @sub_v3_v3v3(float* %arraydecay43, float* %arraydecay44, float* %arraydecay45), !dbg !9028
  %arraydecay46 = getelementptr inbounds [3 x float], [3 x float]* %dir, i64 0, i64 0, !dbg !9029
  %call47 = call float @len_squared_v3(float* %arraydecay46), !dbg !9031
  %cmp48 = fcmp ogt float %call47, 0x3D71979980000000, !dbg !9032
  br i1 %cmp48, label %if.then50, label %if.end53, !dbg !9033

if.then50:                                        ; preds = %if.end42
  %arraydecay51 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !9034
  %arraydecay52 = getelementptr inbounds [3 x float], [3 x float]* %dir, i64 0, i64 0, !dbg !9035
  %41 = load float, float* %fullness, align 4, !dbg !9036
  call void @madd_v3_v3fl(float* %arraydecay51, float* %arraydecay52, float %41), !dbg !9037
  br label %if.end53, !dbg !9037

if.end53:                                         ; preds = %if.then50, %if.end42
  %42 = load %struct.VMesh*, %struct.VMesh** %vm0, align 8, !dbg !9038
  %call54 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %42, i32 0, i32 1, i32 1), !dbg !9039
  %co55 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call54, i32 0, i32 1, !dbg !9040
  %arraydecay56 = getelementptr inbounds [3 x float], [3 x float]* %co55, i64 0, i64 0, !dbg !9039
  %arraydecay57 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !9041
  call void @copy_v3_v3(float* %arraydecay56, float* %arraydecay57), !dbg !9042
  %43 = load %struct.VMesh*, %struct.VMesh** %vm0, align 8, !dbg !9043
  call void @vmesh_copy_equiv_verts(%struct.VMesh* %43), !dbg !9044
  %44 = load %struct.VMesh*, %struct.VMesh** %vm0, align 8, !dbg !9045
  store %struct.VMesh* %44, %struct.VMesh** %vm1, align 8, !dbg !9046
  br label %do.body, !dbg !9047

do.body:                                          ; preds = %do.cond, %if.end53
  %45 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !9048
  %46 = load %struct.VMesh*, %struct.VMesh** %vm1, align 8, !dbg !9050
  %call58 = call %struct.VMesh* @cubic_subdiv(%struct.BevelParams* %45, %struct.VMesh* %46), !dbg !9051
  store %struct.VMesh* %call58, %struct.VMesh** %vm1, align 8, !dbg !9052
  br label %do.cond, !dbg !9053

do.cond:                                          ; preds = %do.body
  %47 = load %struct.VMesh*, %struct.VMesh** %vm1, align 8, !dbg !9054
  %seg59 = getelementptr inbounds %struct.VMesh, %struct.VMesh* %47, i32 0, i32 3, !dbg !9055
  %48 = load i32, i32* %seg59, align 4, !dbg !9055
  %49 = load i32, i32* %ns, align 4, !dbg !9056
  %cmp60 = icmp slt i32 %48, %49, !dbg !9057
  br i1 %cmp60, label %do.body, label %do.end, !dbg !9053, !llvm.loop !9058

do.end:                                           ; preds = %do.cond
  %50 = load %struct.VMesh*, %struct.VMesh** %vm1, align 8, !dbg !9060
  %seg62 = getelementptr inbounds %struct.VMesh, %struct.VMesh* %50, i32 0, i32 3, !dbg !9062
  %51 = load i32, i32* %seg62, align 4, !dbg !9062
  %52 = load i32, i32* %ns, align 4, !dbg !9063
  %cmp63 = icmp ne i32 %51, %52, !dbg !9064
  br i1 %cmp63, label %if.then65, label %if.end67, !dbg !9065

if.then65:                                        ; preds = %do.end
  %53 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !9066
  %54 = load %struct.VMesh*, %struct.VMesh** %vm1, align 8, !dbg !9067
  %55 = load i32, i32* %ns, align 4, !dbg !9068
  %call66 = call %struct.VMesh* @interp_vmesh(%struct.BevelParams* %53, %struct.VMesh* %54, i32 %55), !dbg !9069
  store %struct.VMesh* %call66, %struct.VMesh** %vm1, align 8, !dbg !9070
  br label %if.end67, !dbg !9071

if.end67:                                         ; preds = %if.then65, %do.end
  %56 = load %struct.VMesh*, %struct.VMesh** %vm1, align 8, !dbg !9072
  ret %struct.VMesh* %56, !dbg !9073
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_canon(%struct.VMesh* %vm, i32 %i, i32 %j, i32 %k) #0 !dbg !9074 {
entry:
  %retval = alloca i8, align 1
  %vm.addr = alloca %struct.VMesh*, align 8
  %i.addr = alloca i32, align 4
  %j.addr = alloca i32, align 4
  %k.addr = alloca i32, align 4
  %ns2 = alloca i32, align 4
  store %struct.VMesh* %vm, %struct.VMesh** %vm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VMesh** %vm.addr, metadata !9077, metadata !DIExpression()), !dbg !9078
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !9079, metadata !DIExpression()), !dbg !9080
  store i32 %j, i32* %j.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %j.addr, metadata !9081, metadata !DIExpression()), !dbg !9082
  store i32 %k, i32* %k.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %k.addr, metadata !9083, metadata !DIExpression()), !dbg !9084
  call void @llvm.dbg.declare(metadata i32* %ns2, metadata !9085, metadata !DIExpression()), !dbg !9086
  %0 = load %struct.VMesh*, %struct.VMesh** %vm.addr, align 8, !dbg !9087
  %seg = getelementptr inbounds %struct.VMesh, %struct.VMesh* %0, i32 0, i32 3, !dbg !9088
  %1 = load i32, i32* %seg, align 4, !dbg !9088
  %div = sdiv i32 %1, 2, !dbg !9089
  store i32 %div, i32* %ns2, align 4, !dbg !9086
  %2 = load %struct.VMesh*, %struct.VMesh** %vm.addr, align 8, !dbg !9090
  %seg1 = getelementptr inbounds %struct.VMesh, %struct.VMesh* %2, i32 0, i32 3, !dbg !9092
  %3 = load i32, i32* %seg1, align 4, !dbg !9092
  %rem = srem i32 %3, 2, !dbg !9093
  %cmp = icmp eq i32 %rem, 1, !dbg !9094
  br i1 %cmp, label %if.then, label %if.else, !dbg !9095

if.then:                                          ; preds = %entry
  %4 = load i32, i32* %j.addr, align 4, !dbg !9096
  %5 = load i32, i32* %ns2, align 4, !dbg !9097
  %cmp2 = icmp sle i32 %4, %5, !dbg !9098
  br i1 %cmp2, label %land.rhs, label %land.end, !dbg !9099

land.rhs:                                         ; preds = %if.then
  %6 = load i32, i32* %k.addr, align 4, !dbg !9100
  %7 = load i32, i32* %ns2, align 4, !dbg !9101
  %cmp3 = icmp sle i32 %6, %7, !dbg !9102
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then
  %8 = phi i1 [ false, %if.then ], [ %cmp3, %land.rhs ], !dbg !9103
  %land.ext = zext i1 %8 to i32, !dbg !9099
  %conv = trunc i32 %land.ext to i8, !dbg !9104
  store i8 %conv, i8* %retval, align 1, !dbg !9105
  br label %return, !dbg !9105

if.else:                                          ; preds = %entry
  %9 = load i32, i32* %j.addr, align 4, !dbg !9106
  %10 = load i32, i32* %ns2, align 4, !dbg !9107
  %cmp4 = icmp slt i32 %9, %10, !dbg !9108
  br i1 %cmp4, label %land.lhs.true, label %lor.rhs, !dbg !9109

land.lhs.true:                                    ; preds = %if.else
  %11 = load i32, i32* %k.addr, align 4, !dbg !9110
  %12 = load i32, i32* %ns2, align 4, !dbg !9111
  %cmp6 = icmp sle i32 %11, %12, !dbg !9112
  br i1 %cmp6, label %lor.end, label %lor.rhs, !dbg !9113

lor.rhs:                                          ; preds = %land.lhs.true, %if.else
  %13 = load i32, i32* %j.addr, align 4, !dbg !9114
  %14 = load i32, i32* %ns2, align 4, !dbg !9115
  %cmp8 = icmp eq i32 %13, %14, !dbg !9116
  br i1 %cmp8, label %land.lhs.true10, label %land.end16, !dbg !9117

land.lhs.true10:                                  ; preds = %lor.rhs
  %15 = load i32, i32* %k.addr, align 4, !dbg !9118
  %16 = load i32, i32* %ns2, align 4, !dbg !9119
  %cmp11 = icmp eq i32 %15, %16, !dbg !9120
  br i1 %cmp11, label %land.rhs13, label %land.end16, !dbg !9121

land.rhs13:                                       ; preds = %land.lhs.true10
  %17 = load i32, i32* %i.addr, align 4, !dbg !9122
  %cmp14 = icmp eq i32 %17, 0, !dbg !9123
  br label %land.end16

land.end16:                                       ; preds = %land.rhs13, %land.lhs.true10, %lor.rhs
  %18 = phi i1 [ false, %land.lhs.true10 ], [ false, %lor.rhs ], [ %cmp14, %land.rhs13 ], !dbg !9103
  br label %lor.end, !dbg !9113

lor.end:                                          ; preds = %land.end16, %land.lhs.true
  %19 = phi i1 [ true, %land.lhs.true ], [ %18, %land.end16 ]
  %lor.ext = zext i1 %19 to i32, !dbg !9113
  %conv18 = trunc i32 %lor.ext to i8, !dbg !9124
  store i8 %conv18, i8* %retval, align 1, !dbg !9125
  br label %return, !dbg !9125

return:                                           ; preds = %lor.end, %land.end
  %20 = load i8, i8* %retval, align 1, !dbg !9126
  ret i8 %20, !dbg !9126
}

; Function Attrs: noinline nounwind uwtable
define internal void @vmesh_copy_equiv_verts(%struct.VMesh* %vm) #0 !dbg !9127 {
entry:
  %vm.addr = alloca %struct.VMesh*, align 8
  %n = alloca i32, align 4
  %ns = alloca i32, align 4
  %ns2 = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %v0 = alloca %struct.NewVert*, align 8
  %v1 = alloca %struct.NewVert*, align 8
  store %struct.VMesh* %vm, %struct.VMesh** %vm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VMesh** %vm.addr, metadata !9130, metadata !DIExpression()), !dbg !9131
  call void @llvm.dbg.declare(metadata i32* %n, metadata !9132, metadata !DIExpression()), !dbg !9133
  call void @llvm.dbg.declare(metadata i32* %ns, metadata !9134, metadata !DIExpression()), !dbg !9135
  call void @llvm.dbg.declare(metadata i32* %ns2, metadata !9136, metadata !DIExpression()), !dbg !9137
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9138, metadata !DIExpression()), !dbg !9139
  call void @llvm.dbg.declare(metadata i32* %j, metadata !9140, metadata !DIExpression()), !dbg !9141
  call void @llvm.dbg.declare(metadata i32* %k, metadata !9142, metadata !DIExpression()), !dbg !9143
  call void @llvm.dbg.declare(metadata %struct.NewVert** %v0, metadata !9144, metadata !DIExpression()), !dbg !9145
  call void @llvm.dbg.declare(metadata %struct.NewVert** %v1, metadata !9146, metadata !DIExpression()), !dbg !9147
  %0 = load %struct.VMesh*, %struct.VMesh** %vm.addr, align 8, !dbg !9148
  %count = getelementptr inbounds %struct.VMesh, %struct.VMesh* %0, i32 0, i32 2, !dbg !9149
  %1 = load i32, i32* %count, align 8, !dbg !9149
  store i32 %1, i32* %n, align 4, !dbg !9150
  %2 = load %struct.VMesh*, %struct.VMesh** %vm.addr, align 8, !dbg !9151
  %seg = getelementptr inbounds %struct.VMesh, %struct.VMesh* %2, i32 0, i32 3, !dbg !9152
  %3 = load i32, i32* %seg, align 4, !dbg !9152
  store i32 %3, i32* %ns, align 4, !dbg !9153
  %4 = load i32, i32* %ns, align 4, !dbg !9154
  %div = sdiv i32 %4, 2, !dbg !9155
  store i32 %div, i32* %ns2, align 4, !dbg !9156
  store i32 0, i32* %i, align 4, !dbg !9157
  br label %for.cond, !dbg !9159

for.cond:                                         ; preds = %for.inc15, %entry
  %5 = load i32, i32* %i, align 4, !dbg !9160
  %6 = load i32, i32* %n, align 4, !dbg !9162
  %cmp = icmp slt i32 %5, %6, !dbg !9163
  br i1 %cmp, label %for.body, label %for.end17, !dbg !9164

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4, !dbg !9165
  br label %for.cond1, !dbg !9168

for.cond1:                                        ; preds = %for.inc12, %for.body
  %7 = load i32, i32* %j, align 4, !dbg !9169
  %8 = load i32, i32* %ns2, align 4, !dbg !9171
  %cmp2 = icmp sle i32 %7, %8, !dbg !9172
  br i1 %cmp2, label %for.body3, label %for.end14, !dbg !9173

for.body3:                                        ; preds = %for.cond1
  store i32 0, i32* %k, align 4, !dbg !9174
  br label %for.cond4, !dbg !9177

for.cond4:                                        ; preds = %for.inc, %for.body3
  %9 = load i32, i32* %k, align 4, !dbg !9178
  %10 = load i32, i32* %ns, align 4, !dbg !9180
  %cmp5 = icmp sle i32 %9, %10, !dbg !9181
  br i1 %cmp5, label %for.body6, label %for.end, !dbg !9182

for.body6:                                        ; preds = %for.cond4
  %11 = load %struct.VMesh*, %struct.VMesh** %vm.addr, align 8, !dbg !9183
  %12 = load i32, i32* %i, align 4, !dbg !9186
  %13 = load i32, i32* %j, align 4, !dbg !9187
  %14 = load i32, i32* %k, align 4, !dbg !9188
  %call = call zeroext i8 @is_canon(%struct.VMesh* %11, i32 %12, i32 %13, i32 %14), !dbg !9189
  %tobool = icmp ne i8 %call, 0, !dbg !9189
  br i1 %tobool, label %if.then, label %if.end, !dbg !9190

if.then:                                          ; preds = %for.body6
  br label %for.inc, !dbg !9191

if.end:                                           ; preds = %for.body6
  %15 = load %struct.VMesh*, %struct.VMesh** %vm.addr, align 8, !dbg !9192
  %16 = load i32, i32* %i, align 4, !dbg !9193
  %17 = load i32, i32* %j, align 4, !dbg !9194
  %18 = load i32, i32* %k, align 4, !dbg !9195
  %call7 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %15, i32 %16, i32 %17, i32 %18), !dbg !9196
  store %struct.NewVert* %call7, %struct.NewVert** %v1, align 8, !dbg !9197
  %19 = load %struct.VMesh*, %struct.VMesh** %vm.addr, align 8, !dbg !9198
  %20 = load i32, i32* %i, align 4, !dbg !9199
  %21 = load i32, i32* %j, align 4, !dbg !9200
  %22 = load i32, i32* %k, align 4, !dbg !9201
  %call8 = call %struct.NewVert* @mesh_vert_canon(%struct.VMesh* %19, i32 %20, i32 %21, i32 %22), !dbg !9202
  store %struct.NewVert* %call8, %struct.NewVert** %v0, align 8, !dbg !9203
  %23 = load %struct.NewVert*, %struct.NewVert** %v1, align 8, !dbg !9204
  %co = getelementptr inbounds %struct.NewVert, %struct.NewVert* %23, i32 0, i32 1, !dbg !9205
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !9204
  %24 = load %struct.NewVert*, %struct.NewVert** %v0, align 8, !dbg !9206
  %co9 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %24, i32 0, i32 1, !dbg !9207
  %arraydecay10 = getelementptr inbounds [3 x float], [3 x float]* %co9, i64 0, i64 0, !dbg !9206
  call void @copy_v3_v3(float* %arraydecay, float* %arraydecay10), !dbg !9208
  %25 = load %struct.NewVert*, %struct.NewVert** %v0, align 8, !dbg !9209
  %v = getelementptr inbounds %struct.NewVert, %struct.NewVert* %25, i32 0, i32 0, !dbg !9210
  %26 = load %struct.BMVert*, %struct.BMVert** %v, align 8, !dbg !9210
  %27 = load %struct.NewVert*, %struct.NewVert** %v1, align 8, !dbg !9211
  %v11 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %27, i32 0, i32 0, !dbg !9212
  store %struct.BMVert* %26, %struct.BMVert** %v11, align 8, !dbg !9213
  br label %for.inc, !dbg !9214

for.inc:                                          ; preds = %if.end, %if.then
  %28 = load i32, i32* %k, align 4, !dbg !9215
  %inc = add nsw i32 %28, 1, !dbg !9215
  store i32 %inc, i32* %k, align 4, !dbg !9215
  br label %for.cond4, !dbg !9216, !llvm.loop !9217

for.end:                                          ; preds = %for.cond4
  br label %for.inc12, !dbg !9219

for.inc12:                                        ; preds = %for.end
  %29 = load i32, i32* %j, align 4, !dbg !9220
  %inc13 = add nsw i32 %29, 1, !dbg !9220
  store i32 %inc13, i32* %j, align 4, !dbg !9220
  br label %for.cond1, !dbg !9221, !llvm.loop !9222

for.end14:                                        ; preds = %for.cond1
  br label %for.inc15, !dbg !9224

for.inc15:                                        ; preds = %for.end14
  %30 = load i32, i32* %i, align 4, !dbg !9225
  %inc16 = add nsw i32 %30, 1, !dbg !9225
  store i32 %inc16, i32* %i, align 4, !dbg !9225
  br label %for.cond, !dbg !9226, !llvm.loop !9227

for.end17:                                        ; preds = %for.cond
  ret void, !dbg !9229
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.BMFace* @bev_create_quad_tri_ex(%struct.BMesh* %bm, %struct.BMVert* %v1, %struct.BMVert* %v2, %struct.BMVert* %v3, %struct.BMVert* %v4, %struct.BMFace* %f1, %struct.BMFace* %f2, %struct.BMFace* %f3, %struct.BMFace* %f4, i32 %mat_nr) #0 !dbg !9230 {
entry:
  %bm.addr = alloca %struct.BMesh*, align 8
  %v1.addr = alloca %struct.BMVert*, align 8
  %v2.addr = alloca %struct.BMVert*, align 8
  %v3.addr = alloca %struct.BMVert*, align 8
  %v4.addr = alloca %struct.BMVert*, align 8
  %f1.addr = alloca %struct.BMFace*, align 8
  %f2.addr = alloca %struct.BMFace*, align 8
  %f3.addr = alloca %struct.BMFace*, align 8
  %f4.addr = alloca %struct.BMFace*, align 8
  %mat_nr.addr = alloca i32, align 4
  %varr = alloca [4 x %struct.BMVert*], align 16
  %farr = alloca [4 x %struct.BMFace*], align 16
  store %struct.BMesh* %bm, %struct.BMesh** %bm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMesh** %bm.addr, metadata !9233, metadata !DIExpression()), !dbg !9234
  store %struct.BMVert* %v1, %struct.BMVert** %v1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMVert** %v1.addr, metadata !9235, metadata !DIExpression()), !dbg !9236
  store %struct.BMVert* %v2, %struct.BMVert** %v2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMVert** %v2.addr, metadata !9237, metadata !DIExpression()), !dbg !9238
  store %struct.BMVert* %v3, %struct.BMVert** %v3.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMVert** %v3.addr, metadata !9239, metadata !DIExpression()), !dbg !9240
  store %struct.BMVert* %v4, %struct.BMVert** %v4.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMVert** %v4.addr, metadata !9241, metadata !DIExpression()), !dbg !9242
  store %struct.BMFace* %f1, %struct.BMFace** %f1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMFace** %f1.addr, metadata !9243, metadata !DIExpression()), !dbg !9244
  store %struct.BMFace* %f2, %struct.BMFace** %f2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMFace** %f2.addr, metadata !9245, metadata !DIExpression()), !dbg !9246
  store %struct.BMFace* %f3, %struct.BMFace** %f3.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMFace** %f3.addr, metadata !9247, metadata !DIExpression()), !dbg !9248
  store %struct.BMFace* %f4, %struct.BMFace** %f4.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMFace** %f4.addr, metadata !9249, metadata !DIExpression()), !dbg !9250
  store i32 %mat_nr, i32* %mat_nr.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mat_nr.addr, metadata !9251, metadata !DIExpression()), !dbg !9252
  call void @llvm.dbg.declare(metadata [4 x %struct.BMVert*]* %varr, metadata !9253, metadata !DIExpression()), !dbg !9255
  %arrayinit.begin = getelementptr inbounds [4 x %struct.BMVert*], [4 x %struct.BMVert*]* %varr, i64 0, i64 0, !dbg !9256
  %0 = load %struct.BMVert*, %struct.BMVert** %v1.addr, align 8, !dbg !9257
  store %struct.BMVert* %0, %struct.BMVert** %arrayinit.begin, align 8, !dbg !9256
  %arrayinit.element = getelementptr inbounds %struct.BMVert*, %struct.BMVert** %arrayinit.begin, i64 1, !dbg !9256
  %1 = load %struct.BMVert*, %struct.BMVert** %v2.addr, align 8, !dbg !9258
  store %struct.BMVert* %1, %struct.BMVert** %arrayinit.element, align 8, !dbg !9256
  %arrayinit.element1 = getelementptr inbounds %struct.BMVert*, %struct.BMVert** %arrayinit.element, i64 1, !dbg !9256
  %2 = load %struct.BMVert*, %struct.BMVert** %v3.addr, align 8, !dbg !9259
  store %struct.BMVert* %2, %struct.BMVert** %arrayinit.element1, align 8, !dbg !9256
  %arrayinit.element2 = getelementptr inbounds %struct.BMVert*, %struct.BMVert** %arrayinit.element1, i64 1, !dbg !9256
  %3 = load %struct.BMVert*, %struct.BMVert** %v4.addr, align 8, !dbg !9260
  store %struct.BMVert* %3, %struct.BMVert** %arrayinit.element2, align 8, !dbg !9256
  call void @llvm.dbg.declare(metadata [4 x %struct.BMFace*]* %farr, metadata !9261, metadata !DIExpression()), !dbg !9263
  %arrayinit.begin3 = getelementptr inbounds [4 x %struct.BMFace*], [4 x %struct.BMFace*]* %farr, i64 0, i64 0, !dbg !9264
  %4 = load %struct.BMFace*, %struct.BMFace** %f1.addr, align 8, !dbg !9265
  store %struct.BMFace* %4, %struct.BMFace** %arrayinit.begin3, align 8, !dbg !9264
  %arrayinit.element4 = getelementptr inbounds %struct.BMFace*, %struct.BMFace** %arrayinit.begin3, i64 1, !dbg !9264
  %5 = load %struct.BMFace*, %struct.BMFace** %f2.addr, align 8, !dbg !9266
  store %struct.BMFace* %5, %struct.BMFace** %arrayinit.element4, align 8, !dbg !9264
  %arrayinit.element5 = getelementptr inbounds %struct.BMFace*, %struct.BMFace** %arrayinit.element4, i64 1, !dbg !9264
  %6 = load %struct.BMFace*, %struct.BMFace** %f3.addr, align 8, !dbg !9267
  store %struct.BMFace* %6, %struct.BMFace** %arrayinit.element5, align 8, !dbg !9264
  %arrayinit.element6 = getelementptr inbounds %struct.BMFace*, %struct.BMFace** %arrayinit.element5, i64 1, !dbg !9264
  %7 = load %struct.BMFace*, %struct.BMFace** %f4.addr, align 8, !dbg !9268
  store %struct.BMFace* %7, %struct.BMFace** %arrayinit.element6, align 8, !dbg !9264
  %8 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !9269
  %arraydecay = getelementptr inbounds [4 x %struct.BMVert*], [4 x %struct.BMVert*]* %varr, i64 0, i64 0, !dbg !9270
  %9 = load %struct.BMVert*, %struct.BMVert** %v4.addr, align 8, !dbg !9271
  %tobool = icmp ne %struct.BMVert* %9, null, !dbg !9271
  %10 = zext i1 %tobool to i64, !dbg !9271
  %cond = select i1 %tobool, i32 4, i32 3, !dbg !9271
  %arraydecay7 = getelementptr inbounds [4 x %struct.BMFace*], [4 x %struct.BMFace*]* %farr, i64 0, i64 0, !dbg !9272
  %11 = load %struct.BMFace*, %struct.BMFace** %f1.addr, align 8, !dbg !9273
  %12 = load i32, i32* %mat_nr.addr, align 4, !dbg !9274
  %call = call %struct.BMFace* @bev_create_ngon(%struct.BMesh* %8, %struct.BMVert** %arraydecay, i32 %cond, %struct.BMFace** %arraydecay7, %struct.BMFace* %11, i32 %12, i8 zeroext 1), !dbg !9275
  ret %struct.BMFace* %call, !dbg !9276
}

; Function Attrs: noinline nounwind uwtable
define internal void @bev_merge_uvs(%struct.BMesh* %bm, %struct.BMVert* %v) #0 !dbg !9277 {
entry:
  %bm.addr = alloca %struct.BMesh*, align 8
  %v.addr = alloca %struct.BMVert*, align 8
  %iter = alloca %struct.BMIter, align 8
  %luv = alloca %struct.MLoopUV*, align 8
  %l = alloca %struct.BMLoop*, align 8
  %uv = alloca [2 x float], align 4
  %n = alloca i32, align 4
  %cd_loop_uv_offset = alloca i32, align 4
  store %struct.BMesh* %bm, %struct.BMesh** %bm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMesh** %bm.addr, metadata !9280, metadata !DIExpression()), !dbg !9281
  store %struct.BMVert* %v, %struct.BMVert** %v.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMVert** %v.addr, metadata !9282, metadata !DIExpression()), !dbg !9283
  call void @llvm.dbg.declare(metadata %struct.BMIter* %iter, metadata !9284, metadata !DIExpression()), !dbg !9285
  call void @llvm.dbg.declare(metadata %struct.MLoopUV** %luv, metadata !9286, metadata !DIExpression()), !dbg !9293
  call void @llvm.dbg.declare(metadata %struct.BMLoop** %l, metadata !9294, metadata !DIExpression()), !dbg !9295
  call void @llvm.dbg.declare(metadata [2 x float]* %uv, metadata !9296, metadata !DIExpression()), !dbg !9297
  call void @llvm.dbg.declare(metadata i32* %n, metadata !9298, metadata !DIExpression()), !dbg !9299
  call void @llvm.dbg.declare(metadata i32* %cd_loop_uv_offset, metadata !9300, metadata !DIExpression()), !dbg !9301
  %0 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !9302
  %ldata = getelementptr inbounds %struct.BMesh, %struct.BMesh* %0, i32 0, i32 26, !dbg !9303
  %call = call i32 @CustomData_get_offset(%struct.CustomData* %ldata, i32 16), !dbg !9304
  store i32 %call, i32* %cd_loop_uv_offset, align 4, !dbg !9301
  %1 = load i32, i32* %cd_loop_uv_offset, align 4, !dbg !9305
  %cmp = icmp eq i32 %1, -1, !dbg !9307
  br i1 %cmp, label %if.then, label %if.end, !dbg !9308

if.then:                                          ; preds = %entry
  br label %if.end23, !dbg !9309

if.end:                                           ; preds = %entry
  store i32 0, i32* %n, align 4, !dbg !9310
  %arraydecay = getelementptr inbounds [2 x float], [2 x float]* %uv, i64 0, i64 0, !dbg !9311
  call void @zero_v2(float* %arraydecay), !dbg !9312
  %2 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !9313
  %3 = bitcast %struct.BMVert* %2 to i8*, !dbg !9313
  %call1 = call i8* @BM_iter_new(%struct.BMIter* %iter, %struct.BMesh* null, i8 zeroext 6, i8* %3), !dbg !9313
  %4 = bitcast i8* %call1 to %struct.BMLoop*, !dbg !9313
  store %struct.BMLoop* %4, %struct.BMLoop** %l, align 8, !dbg !9313
  br label %for.cond, !dbg !9313

for.cond:                                         ; preds = %for.inc, %if.end
  %5 = load %struct.BMLoop*, %struct.BMLoop** %l, align 8, !dbg !9315
  %tobool = icmp ne %struct.BMLoop* %5, null, !dbg !9313
  br i1 %tobool, label %for.body, label %for.end, !dbg !9313

for.body:                                         ; preds = %for.cond
  %6 = load %struct.BMLoop*, %struct.BMLoop** %l, align 8, !dbg !9317
  %head = getelementptr inbounds %struct.BMLoop, %struct.BMLoop* %6, i32 0, i32 0, !dbg !9317
  %data = getelementptr inbounds %struct.BMHeader, %struct.BMHeader* %head, i32 0, i32 0, !dbg !9317
  %7 = load i8*, i8** %data, align 8, !dbg !9317
  %8 = load i32, i32* %cd_loop_uv_offset, align 4, !dbg !9317
  %idx.ext = sext i32 %8 to i64, !dbg !9317
  %add.ptr = getelementptr inbounds i8, i8* %7, i64 %idx.ext, !dbg !9317
  %9 = bitcast i8* %add.ptr to %struct.MLoopUV*, !dbg !9317
  store %struct.MLoopUV* %9, %struct.MLoopUV** %luv, align 8, !dbg !9319
  %arraydecay2 = getelementptr inbounds [2 x float], [2 x float]* %uv, i64 0, i64 0, !dbg !9320
  %10 = load %struct.MLoopUV*, %struct.MLoopUV** %luv, align 8, !dbg !9321
  %uv3 = getelementptr inbounds %struct.MLoopUV, %struct.MLoopUV* %10, i32 0, i32 0, !dbg !9322
  %arraydecay4 = getelementptr inbounds [2 x float], [2 x float]* %uv3, i64 0, i64 0, !dbg !9321
  call void @add_v2_v2(float* %arraydecay2, float* %arraydecay4), !dbg !9323
  %11 = load i32, i32* %n, align 4, !dbg !9324
  %inc = add nsw i32 %11, 1, !dbg !9324
  store i32 %inc, i32* %n, align 4, !dbg !9324
  br label %for.inc, !dbg !9325

for.inc:                                          ; preds = %for.body
  %call5 = call i8* @BM_iter_step(%struct.BMIter* %iter), !dbg !9315
  %12 = bitcast i8* %call5 to %struct.BMLoop*, !dbg !9315
  store %struct.BMLoop* %12, %struct.BMLoop** %l, align 8, !dbg !9315
  br label %for.cond, !dbg !9315, !llvm.loop !9326

for.end:                                          ; preds = %for.cond
  %13 = load i32, i32* %n, align 4, !dbg !9328
  %cmp6 = icmp sgt i32 %13, 1, !dbg !9330
  br i1 %cmp6, label %if.then7, label %if.end23, !dbg !9331

if.then7:                                         ; preds = %for.end
  %arraydecay8 = getelementptr inbounds [2 x float], [2 x float]* %uv, i64 0, i64 0, !dbg !9332
  %14 = load i32, i32* %n, align 4, !dbg !9334
  %conv = sitofp i32 %14 to float, !dbg !9335
  %div = fdiv float 1.000000e+00, %conv, !dbg !9336
  call void @mul_v2_fl(float* %arraydecay8, float %div), !dbg !9337
  %15 = load %struct.BMVert*, %struct.BMVert** %v.addr, align 8, !dbg !9338
  %16 = bitcast %struct.BMVert* %15 to i8*, !dbg !9338
  %call9 = call i8* @BM_iter_new(%struct.BMIter* %iter, %struct.BMesh* null, i8 zeroext 6, i8* %16), !dbg !9338
  %17 = bitcast i8* %call9 to %struct.BMLoop*, !dbg !9338
  store %struct.BMLoop* %17, %struct.BMLoop** %l, align 8, !dbg !9338
  br label %for.cond10, !dbg !9338

for.cond10:                                       ; preds = %for.inc20, %if.then7
  %18 = load %struct.BMLoop*, %struct.BMLoop** %l, align 8, !dbg !9340
  %tobool11 = icmp ne %struct.BMLoop* %18, null, !dbg !9338
  br i1 %tobool11, label %for.body12, label %for.end22, !dbg !9338

for.body12:                                       ; preds = %for.cond10
  %19 = load %struct.BMLoop*, %struct.BMLoop** %l, align 8, !dbg !9342
  %head13 = getelementptr inbounds %struct.BMLoop, %struct.BMLoop* %19, i32 0, i32 0, !dbg !9342
  %data14 = getelementptr inbounds %struct.BMHeader, %struct.BMHeader* %head13, i32 0, i32 0, !dbg !9342
  %20 = load i8*, i8** %data14, align 8, !dbg !9342
  %21 = load i32, i32* %cd_loop_uv_offset, align 4, !dbg !9342
  %idx.ext15 = sext i32 %21 to i64, !dbg !9342
  %add.ptr16 = getelementptr inbounds i8, i8* %20, i64 %idx.ext15, !dbg !9342
  %22 = bitcast i8* %add.ptr16 to %struct.MLoopUV*, !dbg !9342
  store %struct.MLoopUV* %22, %struct.MLoopUV** %luv, align 8, !dbg !9344
  %23 = load %struct.MLoopUV*, %struct.MLoopUV** %luv, align 8, !dbg !9345
  %uv17 = getelementptr inbounds %struct.MLoopUV, %struct.MLoopUV* %23, i32 0, i32 0, !dbg !9346
  %arraydecay18 = getelementptr inbounds [2 x float], [2 x float]* %uv17, i64 0, i64 0, !dbg !9345
  %arraydecay19 = getelementptr inbounds [2 x float], [2 x float]* %uv, i64 0, i64 0, !dbg !9347
  call void @copy_v2_v2(float* %arraydecay18, float* %arraydecay19), !dbg !9348
  br label %for.inc20, !dbg !9349

for.inc20:                                        ; preds = %for.body12
  %call21 = call i8* @BM_iter_step(%struct.BMIter* %iter), !dbg !9340
  %24 = bitcast i8* %call21 to %struct.BMLoop*, !dbg !9340
  store %struct.BMLoop* %24, %struct.BMLoop** %l, align 8, !dbg !9340
  br label %for.cond10, !dbg !9340, !llvm.loop !9350

for.end22:                                        ; preds = %for.cond10
  br label %if.end23, !dbg !9352

if.end23:                                         ; preds = %if.then, %for.end22, %for.end
  ret void, !dbg !9353
}

; Function Attrs: noinline nounwind uwtable
define internal void @snap_to_pipe_profile(%struct.BoundVert* %vpipe, i8 zeroext %midline, float* %co) #0 !dbg !9354 {
entry:
  %vpipe.addr = alloca %struct.BoundVert*, align 8
  %midline.addr = alloca i8, align 1
  %co.addr = alloca float*, align 8
  %va = alloca [3 x float], align 4
  %vb = alloca [3 x float], align 4
  %edir = alloca [3 x float], align 4
  %va0 = alloca [3 x float], align 4
  %vb0 = alloca [3 x float], align 4
  %vmid0 = alloca [3 x float], align 4
  %plane = alloca [4 x float], align 16
  %m = alloca [4 x [4 x float]], align 16
  %minv = alloca [4 x [4 x float]], align 16
  %p = alloca [3 x float], align 4
  %snap = alloca [3 x float], align 4
  %pro = alloca %struct.Profile*, align 8
  %e = alloca %struct.EdgeHalf*, align 8
  store %struct.BoundVert* %vpipe, %struct.BoundVert** %vpipe.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BoundVert** %vpipe.addr, metadata !9357, metadata !DIExpression()), !dbg !9358
  store i8 %midline, i8* %midline.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %midline.addr, metadata !9359, metadata !DIExpression()), !dbg !9360
  store float* %co, float** %co.addr, align 8
  call void @llvm.dbg.declare(metadata float** %co.addr, metadata !9361, metadata !DIExpression()), !dbg !9362
  call void @llvm.dbg.declare(metadata [3 x float]* %va, metadata !9363, metadata !DIExpression()), !dbg !9364
  call void @llvm.dbg.declare(metadata [3 x float]* %vb, metadata !9365, metadata !DIExpression()), !dbg !9366
  call void @llvm.dbg.declare(metadata [3 x float]* %edir, metadata !9367, metadata !DIExpression()), !dbg !9368
  call void @llvm.dbg.declare(metadata [3 x float]* %va0, metadata !9369, metadata !DIExpression()), !dbg !9370
  call void @llvm.dbg.declare(metadata [3 x float]* %vb0, metadata !9371, metadata !DIExpression()), !dbg !9372
  call void @llvm.dbg.declare(metadata [3 x float]* %vmid0, metadata !9373, metadata !DIExpression()), !dbg !9374
  call void @llvm.dbg.declare(metadata [4 x float]* %plane, metadata !9375, metadata !DIExpression()), !dbg !9376
  call void @llvm.dbg.declare(metadata [4 x [4 x float]]* %m, metadata !9377, metadata !DIExpression()), !dbg !9378
  call void @llvm.dbg.declare(metadata [4 x [4 x float]]* %minv, metadata !9379, metadata !DIExpression()), !dbg !9380
  call void @llvm.dbg.declare(metadata [3 x float]* %p, metadata !9381, metadata !DIExpression()), !dbg !9382
  call void @llvm.dbg.declare(metadata [3 x float]* %snap, metadata !9383, metadata !DIExpression()), !dbg !9384
  call void @llvm.dbg.declare(metadata %struct.Profile** %pro, metadata !9385, metadata !DIExpression()), !dbg !9386
  %0 = load %struct.BoundVert*, %struct.BoundVert** %vpipe.addr, align 8, !dbg !9387
  %profile = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %0, i32 0, i32 7, !dbg !9388
  store %struct.Profile* %profile, %struct.Profile** %pro, align 8, !dbg !9386
  call void @llvm.dbg.declare(metadata %struct.EdgeHalf** %e, metadata !9389, metadata !DIExpression()), !dbg !9390
  %1 = load %struct.BoundVert*, %struct.BoundVert** %vpipe.addr, align 8, !dbg !9391
  %ebev = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %1, i32 0, i32 5, !dbg !9392
  %2 = load %struct.EdgeHalf*, %struct.EdgeHalf** %ebev, align 8, !dbg !9392
  store %struct.EdgeHalf* %2, %struct.EdgeHalf** %e, align 8, !dbg !9390
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %va, i64 0, i64 0, !dbg !9393
  %3 = load %struct.Profile*, %struct.Profile** %pro, align 8, !dbg !9394
  %coa = getelementptr inbounds %struct.Profile, %struct.Profile* %3, i32 0, i32 1, !dbg !9395
  %arraydecay1 = getelementptr inbounds [3 x float], [3 x float]* %coa, i64 0, i64 0, !dbg !9394
  call void @copy_v3_v3(float* %arraydecay, float* %arraydecay1), !dbg !9396
  %arraydecay2 = getelementptr inbounds [3 x float], [3 x float]* %vb, i64 0, i64 0, !dbg !9397
  %4 = load %struct.Profile*, %struct.Profile** %pro, align 8, !dbg !9398
  %cob = getelementptr inbounds %struct.Profile, %struct.Profile* %4, i32 0, i32 3, !dbg !9399
  %arraydecay3 = getelementptr inbounds [3 x float], [3 x float]* %cob, i64 0, i64 0, !dbg !9398
  call void @copy_v3_v3(float* %arraydecay2, float* %arraydecay3), !dbg !9400
  %arraydecay4 = getelementptr inbounds [3 x float], [3 x float]* %edir, i64 0, i64 0, !dbg !9401
  %5 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !9402
  %e5 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %5, i32 0, i32 2, !dbg !9403
  %6 = load %struct.BMEdge*, %struct.BMEdge** %e5, align 8, !dbg !9403
  %v1 = getelementptr inbounds %struct.BMEdge, %struct.BMEdge* %6, i32 0, i32 2, !dbg !9404
  %7 = load %struct.BMVert*, %struct.BMVert** %v1, align 8, !dbg !9404
  %co6 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %7, i32 0, i32 2, !dbg !9405
  %arraydecay7 = getelementptr inbounds [3 x float], [3 x float]* %co6, i64 0, i64 0, !dbg !9402
  %8 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !9406
  %e8 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %8, i32 0, i32 2, !dbg !9407
  %9 = load %struct.BMEdge*, %struct.BMEdge** %e8, align 8, !dbg !9407
  %v2 = getelementptr inbounds %struct.BMEdge, %struct.BMEdge* %9, i32 0, i32 3, !dbg !9408
  %10 = load %struct.BMVert*, %struct.BMVert** %v2, align 8, !dbg !9408
  %co9 = getelementptr inbounds %struct.BMVert, %struct.BMVert* %10, i32 0, i32 2, !dbg !9409
  %arraydecay10 = getelementptr inbounds [3 x float], [3 x float]* %co9, i64 0, i64 0, !dbg !9406
  call void @sub_v3_v3v3(float* %arraydecay4, float* %arraydecay7, float* %arraydecay10), !dbg !9410
  %arraydecay11 = getelementptr inbounds [4 x float], [4 x float]* %plane, i64 0, i64 0, !dbg !9411
  %11 = load float*, float** %co.addr, align 8, !dbg !9412
  %arraydecay12 = getelementptr inbounds [3 x float], [3 x float]* %edir, i64 0, i64 0, !dbg !9413
  call void @plane_from_point_normal_v3(float* %arraydecay11, float* %11, float* %arraydecay12), !dbg !9414
  %arraydecay13 = getelementptr inbounds [3 x float], [3 x float]* %va0, i64 0, i64 0, !dbg !9415
  %arraydecay14 = getelementptr inbounds [4 x float], [4 x float]* %plane, i64 0, i64 0, !dbg !9416
  %arraydecay15 = getelementptr inbounds [3 x float], [3 x float]* %va, i64 0, i64 0, !dbg !9417
  call void @closest_to_plane_v3(float* %arraydecay13, float* %arraydecay14, float* %arraydecay15), !dbg !9418
  %arraydecay16 = getelementptr inbounds [3 x float], [3 x float]* %vb0, i64 0, i64 0, !dbg !9419
  %arraydecay17 = getelementptr inbounds [4 x float], [4 x float]* %plane, i64 0, i64 0, !dbg !9420
  %arraydecay18 = getelementptr inbounds [3 x float], [3 x float]* %vb, i64 0, i64 0, !dbg !9421
  call void @closest_to_plane_v3(float* %arraydecay16, float* %arraydecay17, float* %arraydecay18), !dbg !9422
  %arraydecay19 = getelementptr inbounds [3 x float], [3 x float]* %vmid0, i64 0, i64 0, !dbg !9423
  %arraydecay20 = getelementptr inbounds [4 x float], [4 x float]* %plane, i64 0, i64 0, !dbg !9424
  %12 = load %struct.Profile*, %struct.Profile** %pro, align 8, !dbg !9425
  %midco = getelementptr inbounds %struct.Profile, %struct.Profile* %12, i32 0, i32 2, !dbg !9426
  %arraydecay21 = getelementptr inbounds [3 x float], [3 x float]* %midco, i64 0, i64 0, !dbg !9425
  call void @closest_to_plane_v3(float* %arraydecay19, float* %arraydecay20, float* %arraydecay21), !dbg !9427
  %arraydecay22 = getelementptr inbounds [3 x float], [3 x float]* %va0, i64 0, i64 0, !dbg !9428
  %arraydecay23 = getelementptr inbounds [3 x float], [3 x float]* %vmid0, i64 0, i64 0, !dbg !9430
  %arraydecay24 = getelementptr inbounds [3 x float], [3 x float]* %vb0, i64 0, i64 0, !dbg !9431
  %arraydecay25 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m, i64 0, i64 0, !dbg !9432
  %call = call zeroext i8 @make_unit_square_map(float* %arraydecay22, float* %arraydecay23, float* %arraydecay24, [4 x float]* %arraydecay25), !dbg !9433
  %tobool = icmp ne i8 %call, 0, !dbg !9433
  br i1 %tobool, label %if.then, label %if.else, !dbg !9434

if.then:                                          ; preds = %entry
  %arraydecay26 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %minv, i64 0, i64 0, !dbg !9435
  %arraydecay27 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m, i64 0, i64 0, !dbg !9438
  %call28 = call zeroext i8 @invert_m4_m4([4 x float]* %arraydecay26, [4 x float]* %arraydecay27), !dbg !9439
  %tobool29 = icmp ne i8 %call28, 0, !dbg !9439
  br i1 %tobool29, label %if.end, label %if.then30, !dbg !9440

if.then30:                                        ; preds = %if.then
  br label %if.end42, !dbg !9441

if.end:                                           ; preds = %if.then
  %arraydecay31 = getelementptr inbounds [3 x float], [3 x float]* %p, i64 0, i64 0, !dbg !9443
  %arraydecay32 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %minv, i64 0, i64 0, !dbg !9444
  %13 = load float*, float** %co.addr, align 8, !dbg !9445
  call void @mul_v3_m4v3(float* %arraydecay31, [4 x float]* %arraydecay32, float* %13), !dbg !9446
  %arraydecay33 = getelementptr inbounds [3 x float], [3 x float]* %p, i64 0, i64 0, !dbg !9447
  %14 = load %struct.Profile*, %struct.Profile** %pro, align 8, !dbg !9448
  %super_r = getelementptr inbounds %struct.Profile, %struct.Profile* %14, i32 0, i32 0, !dbg !9449
  %15 = load float, float* %super_r, align 8, !dbg !9449
  %16 = load i8, i8* %midline.addr, align 1, !dbg !9450
  call void @snap_to_superellipsoid(float* %arraydecay33, float %15, i8 zeroext %16), !dbg !9451
  %arraydecay34 = getelementptr inbounds [3 x float], [3 x float]* %snap, i64 0, i64 0, !dbg !9452
  %arraydecay35 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m, i64 0, i64 0, !dbg !9453
  %arraydecay36 = getelementptr inbounds [3 x float], [3 x float]* %p, i64 0, i64 0, !dbg !9454
  call void @mul_v3_m4v3(float* %arraydecay34, [4 x float]* %arraydecay35, float* %arraydecay36), !dbg !9455
  %17 = load float*, float** %co.addr, align 8, !dbg !9456
  %arraydecay37 = getelementptr inbounds [3 x float], [3 x float]* %snap, i64 0, i64 0, !dbg !9457
  call void @copy_v3_v3(float* %17, float* %arraydecay37), !dbg !9458
  br label %if.end42, !dbg !9459

if.else:                                          ; preds = %entry
  %arraydecay38 = getelementptr inbounds [3 x float], [3 x float]* %p, i64 0, i64 0, !dbg !9460
  %18 = load float*, float** %co.addr, align 8, !dbg !9462
  %arraydecay39 = getelementptr inbounds [3 x float], [3 x float]* %va0, i64 0, i64 0, !dbg !9463
  %arraydecay40 = getelementptr inbounds [3 x float], [3 x float]* %vb0, i64 0, i64 0, !dbg !9464
  call void @closest_to_line_segment_v3(float* %arraydecay38, float* %18, float* %arraydecay39, float* %arraydecay40), !dbg !9465
  %19 = load float*, float** %co.addr, align 8, !dbg !9466
  %arraydecay41 = getelementptr inbounds [3 x float], [3 x float]* %p, i64 0, i64 0, !dbg !9467
  call void @copy_v3_v3(float* %19, float* %arraydecay41), !dbg !9468
  br label %if.end42

if.end42:                                         ; preds = %if.then30, %if.else, %if.end
  ret void, !dbg !9469
}

declare dso_local void @plane_from_point_normal_v3(float*, float*, float*) #3

declare dso_local void @closest_to_plane_v3(float*, float*, float*) #3

declare dso_local zeroext i8 @invert_m4_m4([4 x float]*, [4 x float]*) #3

; Function Attrs: noinline nounwind uwtable
define internal void @snap_to_superellipsoid(float* %co, float %super_r, i8 zeroext %midline) #0 !dbg !9470 {
entry:
  %co.addr = alloca float*, align 8
  %super_r.addr = alloca float, align 4
  %midline.addr = alloca i8, align 1
  %a = alloca float, align 4
  %b = alloca float, align 4
  %c = alloca float, align 4
  %x = alloca float, align 4
  %y = alloca float, align 4
  %z = alloca float, align 4
  %r = alloca float, align 4
  %rinv = alloca float, align 4
  %dx = alloca float, align 4
  %dy = alloca float, align 4
  store float* %co, float** %co.addr, align 8
  call void @llvm.dbg.declare(metadata float** %co.addr, metadata !9473, metadata !DIExpression()), !dbg !9474
  store float %super_r, float* %super_r.addr, align 4
  call void @llvm.dbg.declare(metadata float* %super_r.addr, metadata !9475, metadata !DIExpression()), !dbg !9476
  store i8 %midline, i8* %midline.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %midline.addr, metadata !9477, metadata !DIExpression()), !dbg !9478
  call void @llvm.dbg.declare(metadata float* %a, metadata !9479, metadata !DIExpression()), !dbg !9480
  call void @llvm.dbg.declare(metadata float* %b, metadata !9481, metadata !DIExpression()), !dbg !9482
  call void @llvm.dbg.declare(metadata float* %c, metadata !9483, metadata !DIExpression()), !dbg !9484
  call void @llvm.dbg.declare(metadata float* %x, metadata !9485, metadata !DIExpression()), !dbg !9486
  call void @llvm.dbg.declare(metadata float* %y, metadata !9487, metadata !DIExpression()), !dbg !9488
  call void @llvm.dbg.declare(metadata float* %z, metadata !9489, metadata !DIExpression()), !dbg !9490
  call void @llvm.dbg.declare(metadata float* %r, metadata !9491, metadata !DIExpression()), !dbg !9492
  call void @llvm.dbg.declare(metadata float* %rinv, metadata !9493, metadata !DIExpression()), !dbg !9494
  call void @llvm.dbg.declare(metadata float* %dx, metadata !9495, metadata !DIExpression()), !dbg !9496
  call void @llvm.dbg.declare(metadata float* %dy, metadata !9497, metadata !DIExpression()), !dbg !9498
  %0 = load float, float* %super_r.addr, align 4, !dbg !9499
  store float %0, float* %r, align 4, !dbg !9500
  %1 = load float, float* %r, align 4, !dbg !9501
  %cmp = fcmp oeq float %1, 2.000000e+00, !dbg !9503
  br i1 %cmp, label %if.then, label %if.end, !dbg !9504

if.then:                                          ; preds = %entry
  %2 = load float*, float** %co.addr, align 8, !dbg !9505
  %call = call float @normalize_v3(float* %2), !dbg !9507
  br label %return, !dbg !9508

if.end:                                           ; preds = %entry
  %3 = load float*, float** %co.addr, align 8, !dbg !9509
  %arrayidx = getelementptr inbounds float, float* %3, i64 0, !dbg !9509
  %4 = load float, float* %arrayidx, align 4, !dbg !9509
  %call1 = call float @max_ff(float 0.000000e+00, float %4), !dbg !9510
  store float %call1, float* %a, align 4, !dbg !9511
  store float %call1, float* %x, align 4, !dbg !9512
  %5 = load float*, float** %co.addr, align 8, !dbg !9513
  %arrayidx2 = getelementptr inbounds float, float* %5, i64 1, !dbg !9513
  %6 = load float, float* %arrayidx2, align 4, !dbg !9513
  %call3 = call float @max_ff(float 0.000000e+00, float %6), !dbg !9514
  store float %call3, float* %b, align 4, !dbg !9515
  store float %call3, float* %y, align 4, !dbg !9516
  %7 = load float*, float** %co.addr, align 8, !dbg !9517
  %arrayidx4 = getelementptr inbounds float, float* %7, i64 2, !dbg !9517
  %8 = load float, float* %arrayidx4, align 4, !dbg !9517
  %call5 = call float @max_ff(float 0.000000e+00, float %8), !dbg !9518
  store float %call5, float* %c, align 4, !dbg !9519
  store float %call5, float* %z, align 4, !dbg !9520
  %9 = load float, float* %r, align 4, !dbg !9521
  %cmp6 = fcmp oeq float %9, 4.000000e+00, !dbg !9523
  br i1 %cmp6, label %if.then8, label %lor.lhs.false, !dbg !9524

lor.lhs.false:                                    ; preds = %if.end
  %10 = load float, float* %r, align 4, !dbg !9525
  %cmp7 = fcmp oeq float %10, 0.000000e+00, !dbg !9526
  br i1 %cmp7, label %if.then8, label %if.else42, !dbg !9527

if.then8:                                         ; preds = %lor.lhs.false, %if.end
  store float 0.000000e+00, float* %z, align 4, !dbg !9528
  %11 = load float, float* %x, align 4, !dbg !9530
  %call9 = call float @min_ff(float 1.000000e+00, float %11), !dbg !9531
  store float %call9, float* %x, align 4, !dbg !9532
  %12 = load float, float* %y, align 4, !dbg !9533
  %call10 = call float @min_ff(float 1.000000e+00, float %12), !dbg !9534
  store float %call10, float* %y, align 4, !dbg !9535
  %13 = load float, float* %r, align 4, !dbg !9536
  %cmp11 = fcmp oeq float %13, 4.000000e+00, !dbg !9538
  br i1 %cmp11, label %if.then12, label %if.else23, !dbg !9539

if.then12:                                        ; preds = %if.then8
  %14 = load float, float* %x, align 4, !dbg !9540
  %sub = fsub float 1.000000e+00, %14, !dbg !9542
  store float %sub, float* %dx, align 4, !dbg !9543
  %15 = load float, float* %y, align 4, !dbg !9544
  %sub13 = fsub float 1.000000e+00, %15, !dbg !9545
  store float %sub13, float* %dy, align 4, !dbg !9546
  %16 = load float, float* %dx, align 4, !dbg !9547
  %17 = load float, float* %dy, align 4, !dbg !9549
  %cmp14 = fcmp olt float %16, %17, !dbg !9550
  br i1 %cmp14, label %if.then15, label %if.else, !dbg !9551

if.then15:                                        ; preds = %if.then12
  store float 1.000000e+00, float* %x, align 4, !dbg !9552
  %18 = load i8, i8* %midline.addr, align 1, !dbg !9554
  %conv = zext i8 %18 to i32, !dbg !9554
  %tobool = icmp ne i32 %conv, 0, !dbg !9554
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9554

cond.true:                                        ; preds = %if.then15
  br label %cond.end, !dbg !9554

cond.false:                                       ; preds = %if.then15
  %19 = load float, float* %y, align 4, !dbg !9555
  br label %cond.end, !dbg !9554

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi float [ 1.000000e+00, %cond.true ], [ %19, %cond.false ], !dbg !9554
  store float %cond, float* %y, align 4, !dbg !9556
  br label %if.end22, !dbg !9557

if.else:                                          ; preds = %if.then12
  store float 1.000000e+00, float* %y, align 4, !dbg !9558
  %20 = load i8, i8* %midline.addr, align 1, !dbg !9560
  %conv16 = zext i8 %20 to i32, !dbg !9560
  %tobool17 = icmp ne i32 %conv16, 0, !dbg !9560
  br i1 %tobool17, label %cond.true18, label %cond.false19, !dbg !9560

cond.true18:                                      ; preds = %if.else
  br label %cond.end20, !dbg !9560

cond.false19:                                     ; preds = %if.else
  %21 = load float, float* %x, align 4, !dbg !9561
  br label %cond.end20, !dbg !9560

cond.end20:                                       ; preds = %cond.false19, %cond.true18
  %cond21 = phi float [ 1.000000e+00, %cond.true18 ], [ %21, %cond.false19 ], !dbg !9560
  store float %cond21, float* %x, align 4, !dbg !9562
  br label %if.end22

if.end22:                                         ; preds = %cond.end20, %cond.end
  br label %if.end41, !dbg !9563

if.else23:                                        ; preds = %if.then8
  %22 = load float, float* %x, align 4, !dbg !9564
  %23 = load float, float* %y, align 4, !dbg !9567
  %cmp24 = fcmp olt float %22, %23, !dbg !9568
  br i1 %cmp24, label %if.then26, label %if.else33, !dbg !9569

if.then26:                                        ; preds = %if.else23
  store float 0.000000e+00, float* %x, align 4, !dbg !9570
  %24 = load i8, i8* %midline.addr, align 1, !dbg !9572
  %conv27 = zext i8 %24 to i32, !dbg !9572
  %tobool28 = icmp ne i32 %conv27, 0, !dbg !9572
  br i1 %tobool28, label %cond.true29, label %cond.false30, !dbg !9572

cond.true29:                                      ; preds = %if.then26
  br label %cond.end31, !dbg !9572

cond.false30:                                     ; preds = %if.then26
  %25 = load float, float* %y, align 4, !dbg !9573
  br label %cond.end31, !dbg !9572

cond.end31:                                       ; preds = %cond.false30, %cond.true29
  %cond32 = phi float [ 0.000000e+00, %cond.true29 ], [ %25, %cond.false30 ], !dbg !9572
  store float %cond32, float* %y, align 4, !dbg !9574
  br label %if.end40, !dbg !9575

if.else33:                                        ; preds = %if.else23
  store float 0.000000e+00, float* %y, align 4, !dbg !9576
  %26 = load i8, i8* %midline.addr, align 1, !dbg !9578
  %conv34 = zext i8 %26 to i32, !dbg !9578
  %tobool35 = icmp ne i32 %conv34, 0, !dbg !9578
  br i1 %tobool35, label %cond.true36, label %cond.false37, !dbg !9578

cond.true36:                                      ; preds = %if.else33
  br label %cond.end38, !dbg !9578

cond.false37:                                     ; preds = %if.else33
  %27 = load float, float* %x, align 4, !dbg !9579
  br label %cond.end38, !dbg !9578

cond.end38:                                       ; preds = %cond.false37, %cond.true36
  %cond39 = phi float [ 0.000000e+00, %cond.true36 ], [ %27, %cond.false37 ], !dbg !9578
  store float %cond39, float* %x, align 4, !dbg !9580
  br label %if.end40

if.end40:                                         ; preds = %cond.end38, %cond.end31
  br label %if.end41

if.end41:                                         ; preds = %if.end40, %if.end22
  br label %if.end71, !dbg !9581

if.else42:                                        ; preds = %lor.lhs.false
  %28 = load float, float* %r, align 4, !dbg !9582
  %div = fdiv float 1.000000e+00, %28, !dbg !9584
  store float %div, float* %rinv, align 4, !dbg !9585
  %29 = load float, float* %a, align 4, !dbg !9586
  %cmp43 = fcmp oeq float %29, 0.000000e+00, !dbg !9588
  br i1 %cmp43, label %if.then45, label %if.else57, !dbg !9589

if.then45:                                        ; preds = %if.else42
  %30 = load float, float* %b, align 4, !dbg !9590
  %cmp46 = fcmp oeq float %30, 0.000000e+00, !dbg !9593
  br i1 %cmp46, label %if.then48, label %if.else50, !dbg !9594

if.then48:                                        ; preds = %if.then45
  store float 0.000000e+00, float* %x, align 4, !dbg !9595
  store float 0.000000e+00, float* %y, align 4, !dbg !9597
  %31 = load float, float* %c, align 4, !dbg !9598
  %32 = load float, float* %rinv, align 4, !dbg !9599
  %call49 = call float @powf(float %31, float %32) #5, !dbg !9600
  store float %call49, float* %z, align 4, !dbg !9601
  br label %if.end56, !dbg !9602

if.else50:                                        ; preds = %if.then45
  store float 0.000000e+00, float* %x, align 4, !dbg !9603
  %33 = load float, float* %c, align 4, !dbg !9605
  %34 = load float, float* %b, align 4, !dbg !9606
  %div51 = fdiv float %33, %34, !dbg !9607
  %35 = load float, float* %r, align 4, !dbg !9608
  %call52 = call float @powf(float %div51, float %35) #5, !dbg !9609
  %add = fadd float 1.000000e+00, %call52, !dbg !9610
  %div53 = fdiv float 1.000000e+00, %add, !dbg !9611
  %36 = load float, float* %rinv, align 4, !dbg !9612
  %call54 = call float @powf(float %div53, float %36) #5, !dbg !9613
  store float %call54, float* %y, align 4, !dbg !9614
  %37 = load float, float* %c, align 4, !dbg !9615
  %38 = load float, float* %y, align 4, !dbg !9616
  %mul = fmul float %37, %38, !dbg !9617
  %39 = load float, float* %b, align 4, !dbg !9618
  %div55 = fdiv float %mul, %39, !dbg !9619
  store float %div55, float* %z, align 4, !dbg !9620
  br label %if.end56

if.end56:                                         ; preds = %if.else50, %if.then48
  br label %if.end70, !dbg !9621

if.else57:                                        ; preds = %if.else42
  %40 = load float, float* %b, align 4, !dbg !9622
  %41 = load float, float* %a, align 4, !dbg !9624
  %div58 = fdiv float %40, %41, !dbg !9625
  %42 = load float, float* %r, align 4, !dbg !9626
  %call59 = call float @powf(float %div58, float %42) #5, !dbg !9627
  %add60 = fadd float 1.000000e+00, %call59, !dbg !9628
  %43 = load float, float* %c, align 4, !dbg !9629
  %44 = load float, float* %a, align 4, !dbg !9630
  %div61 = fdiv float %43, %44, !dbg !9631
  %45 = load float, float* %r, align 4, !dbg !9632
  %call62 = call float @powf(float %div61, float %45) #5, !dbg !9633
  %add63 = fadd float %add60, %call62, !dbg !9634
  %div64 = fdiv float 1.000000e+00, %add63, !dbg !9635
  %46 = load float, float* %rinv, align 4, !dbg !9636
  %call65 = call float @powf(float %div64, float %46) #5, !dbg !9637
  store float %call65, float* %x, align 4, !dbg !9638
  %47 = load float, float* %b, align 4, !dbg !9639
  %48 = load float, float* %x, align 4, !dbg !9640
  %mul66 = fmul float %47, %48, !dbg !9641
  %49 = load float, float* %a, align 4, !dbg !9642
  %div67 = fdiv float %mul66, %49, !dbg !9643
  store float %div67, float* %y, align 4, !dbg !9644
  %50 = load float, float* %c, align 4, !dbg !9645
  %51 = load float, float* %x, align 4, !dbg !9646
  %mul68 = fmul float %50, %51, !dbg !9647
  %52 = load float, float* %a, align 4, !dbg !9648
  %div69 = fdiv float %mul68, %52, !dbg !9649
  store float %div69, float* %z, align 4, !dbg !9650
  br label %if.end70

if.end70:                                         ; preds = %if.else57, %if.end56
  br label %if.end71

if.end71:                                         ; preds = %if.end70, %if.end41
  %53 = load float, float* %x, align 4, !dbg !9651
  %54 = load float*, float** %co.addr, align 8, !dbg !9652
  %arrayidx72 = getelementptr inbounds float, float* %54, i64 0, !dbg !9652
  store float %53, float* %arrayidx72, align 4, !dbg !9653
  %55 = load float, float* %y, align 4, !dbg !9654
  %56 = load float*, float** %co.addr, align 8, !dbg !9655
  %arrayidx73 = getelementptr inbounds float, float* %56, i64 1, !dbg !9655
  store float %55, float* %arrayidx73, align 4, !dbg !9656
  %57 = load float, float* %z, align 4, !dbg !9657
  %58 = load float*, float** %co.addr, align 8, !dbg !9658
  %arrayidx74 = getelementptr inbounds float, float* %58, i64 2, !dbg !9658
  store float %57, float* %arrayidx74, align 4, !dbg !9659
  br label %return, !dbg !9660

return:                                           ; preds = %if.end71, %if.then
  ret void, !dbg !9660
}

declare dso_local void @closest_to_line_segment_v3(float*, float*, float*, float*) #3

; Function Attrs: noinline nounwind uwtable
define internal float @min_ff(float %a, float %b) #0 !dbg !9661 {
entry:
  %a.addr = alloca float, align 4
  %b.addr = alloca float, align 4
  store float %a, float* %a.addr, align 4
  call void @llvm.dbg.declare(metadata float* %a.addr, metadata !9662, metadata !DIExpression()), !dbg !9663
  store float %b, float* %b.addr, align 4
  call void @llvm.dbg.declare(metadata float* %b.addr, metadata !9664, metadata !DIExpression()), !dbg !9665
  %0 = load float, float* %a.addr, align 4, !dbg !9666
  %1 = load float, float* %b.addr, align 4, !dbg !9667
  %cmp = fcmp olt float %0, %1, !dbg !9668
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !9669

cond.true:                                        ; preds = %entry
  %2 = load float, float* %a.addr, align 4, !dbg !9670
  br label %cond.end, !dbg !9669

cond.false:                                       ; preds = %entry
  %3 = load float, float* %b.addr, align 4, !dbg !9671
  br label %cond.end, !dbg !9669

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi float [ %2, %cond.true ], [ %3, %cond.false ], !dbg !9669
  ret float %cond, !dbg !9672
}

; Function Attrs: nounwind
declare dso_local float @powf(float, float) #4

declare dso_local float @BM_edge_calc_face_angle_signed_ex(%struct.BMEdge*, float) #3

; Function Attrs: noinline nounwind uwtable
define internal void @make_unit_cube_map(float* %va, float* %vb, float* %vc, float* %vd, [4 x float]* %r_mat) #0 !dbg !9673 {
entry:
  %va.addr = alloca float*, align 8
  %vb.addr = alloca float*, align 8
  %vc.addr = alloca float*, align 8
  %vd.addr = alloca float*, align 8
  %r_mat.addr = alloca [4 x float]*, align 8
  store float* %va, float** %va.addr, align 8
  call void @llvm.dbg.declare(metadata float** %va.addr, metadata !9676, metadata !DIExpression()), !dbg !9677
  store float* %vb, float** %vb.addr, align 8
  call void @llvm.dbg.declare(metadata float** %vb.addr, metadata !9678, metadata !DIExpression()), !dbg !9679
  store float* %vc, float** %vc.addr, align 8
  call void @llvm.dbg.declare(metadata float** %vc.addr, metadata !9680, metadata !DIExpression()), !dbg !9681
  store float* %vd, float** %vd.addr, align 8
  call void @llvm.dbg.declare(metadata float** %vd.addr, metadata !9682, metadata !DIExpression()), !dbg !9683
  store [4 x float]* %r_mat, [4 x float]** %r_mat.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %r_mat.addr, metadata !9684, metadata !DIExpression()), !dbg !9685
  %0 = load [4 x float]*, [4 x float]** %r_mat.addr, align 8, !dbg !9686
  %arrayidx = getelementptr inbounds [4 x float], [4 x float]* %0, i64 0, !dbg !9686
  %arraydecay = getelementptr inbounds [4 x float], [4 x float]* %arrayidx, i64 0, i64 0, !dbg !9686
  %1 = load float*, float** %va.addr, align 8, !dbg !9687
  call void @copy_v3_v3(float* %arraydecay, float* %1), !dbg !9688
  %2 = load [4 x float]*, [4 x float]** %r_mat.addr, align 8, !dbg !9689
  %arrayidx1 = getelementptr inbounds [4 x float], [4 x float]* %2, i64 0, !dbg !9689
  %arraydecay2 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx1, i64 0, i64 0, !dbg !9689
  %3 = load float*, float** %vb.addr, align 8, !dbg !9690
  call void @sub_v3_v3(float* %arraydecay2, float* %3), !dbg !9691
  %4 = load [4 x float]*, [4 x float]** %r_mat.addr, align 8, !dbg !9692
  %arrayidx3 = getelementptr inbounds [4 x float], [4 x float]* %4, i64 0, !dbg !9692
  %arraydecay4 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx3, i64 0, i64 0, !dbg !9692
  %5 = load float*, float** %vc.addr, align 8, !dbg !9693
  call void @sub_v3_v3(float* %arraydecay4, float* %5), !dbg !9694
  %6 = load [4 x float]*, [4 x float]** %r_mat.addr, align 8, !dbg !9695
  %arrayidx5 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, !dbg !9695
  %arraydecay6 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx5, i64 0, i64 0, !dbg !9695
  %7 = load float*, float** %vd.addr, align 8, !dbg !9696
  call void @add_v3_v3(float* %arraydecay6, float* %7), !dbg !9697
  %8 = load [4 x float]*, [4 x float]** %r_mat.addr, align 8, !dbg !9698
  %arrayidx7 = getelementptr inbounds [4 x float], [4 x float]* %8, i64 0, !dbg !9698
  %arraydecay8 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx7, i64 0, i64 0, !dbg !9698
  call void @mul_v3_fl(float* %arraydecay8, float 5.000000e-01), !dbg !9699
  %9 = load [4 x float]*, [4 x float]** %r_mat.addr, align 8, !dbg !9700
  %arrayidx9 = getelementptr inbounds [4 x float], [4 x float]* %9, i64 0, !dbg !9700
  %arrayidx10 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx9, i64 0, i64 3, !dbg !9700
  store float 0.000000e+00, float* %arrayidx10, align 4, !dbg !9701
  %10 = load [4 x float]*, [4 x float]** %r_mat.addr, align 8, !dbg !9702
  %arrayidx11 = getelementptr inbounds [4 x float], [4 x float]* %10, i64 1, !dbg !9702
  %arraydecay12 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx11, i64 0, i64 0, !dbg !9702
  %11 = load float*, float** %vb.addr, align 8, !dbg !9703
  call void @copy_v3_v3(float* %arraydecay12, float* %11), !dbg !9704
  %12 = load [4 x float]*, [4 x float]** %r_mat.addr, align 8, !dbg !9705
  %arrayidx13 = getelementptr inbounds [4 x float], [4 x float]* %12, i64 1, !dbg !9705
  %arraydecay14 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx13, i64 0, i64 0, !dbg !9705
  %13 = load float*, float** %va.addr, align 8, !dbg !9706
  call void @sub_v3_v3(float* %arraydecay14, float* %13), !dbg !9707
  %14 = load [4 x float]*, [4 x float]** %r_mat.addr, align 8, !dbg !9708
  %arrayidx15 = getelementptr inbounds [4 x float], [4 x float]* %14, i64 1, !dbg !9708
  %arraydecay16 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx15, i64 0, i64 0, !dbg !9708
  %15 = load float*, float** %vc.addr, align 8, !dbg !9709
  call void @sub_v3_v3(float* %arraydecay16, float* %15), !dbg !9710
  %16 = load [4 x float]*, [4 x float]** %r_mat.addr, align 8, !dbg !9711
  %arrayidx17 = getelementptr inbounds [4 x float], [4 x float]* %16, i64 1, !dbg !9711
  %arraydecay18 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx17, i64 0, i64 0, !dbg !9711
  %17 = load float*, float** %vd.addr, align 8, !dbg !9712
  call void @add_v3_v3(float* %arraydecay18, float* %17), !dbg !9713
  %18 = load [4 x float]*, [4 x float]** %r_mat.addr, align 8, !dbg !9714
  %arrayidx19 = getelementptr inbounds [4 x float], [4 x float]* %18, i64 1, !dbg !9714
  %arraydecay20 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx19, i64 0, i64 0, !dbg !9714
  call void @mul_v3_fl(float* %arraydecay20, float 5.000000e-01), !dbg !9715
  %19 = load [4 x float]*, [4 x float]** %r_mat.addr, align 8, !dbg !9716
  %arrayidx21 = getelementptr inbounds [4 x float], [4 x float]* %19, i64 1, !dbg !9716
  %arrayidx22 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx21, i64 0, i64 3, !dbg !9716
  store float 0.000000e+00, float* %arrayidx22, align 4, !dbg !9717
  %20 = load [4 x float]*, [4 x float]** %r_mat.addr, align 8, !dbg !9718
  %arrayidx23 = getelementptr inbounds [4 x float], [4 x float]* %20, i64 2, !dbg !9718
  %arraydecay24 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx23, i64 0, i64 0, !dbg !9718
  %21 = load float*, float** %vc.addr, align 8, !dbg !9719
  call void @copy_v3_v3(float* %arraydecay24, float* %21), !dbg !9720
  %22 = load [4 x float]*, [4 x float]** %r_mat.addr, align 8, !dbg !9721
  %arrayidx25 = getelementptr inbounds [4 x float], [4 x float]* %22, i64 2, !dbg !9721
  %arraydecay26 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx25, i64 0, i64 0, !dbg !9721
  %23 = load float*, float** %va.addr, align 8, !dbg !9722
  call void @sub_v3_v3(float* %arraydecay26, float* %23), !dbg !9723
  %24 = load [4 x float]*, [4 x float]** %r_mat.addr, align 8, !dbg !9724
  %arrayidx27 = getelementptr inbounds [4 x float], [4 x float]* %24, i64 2, !dbg !9724
  %arraydecay28 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx27, i64 0, i64 0, !dbg !9724
  %25 = load float*, float** %vb.addr, align 8, !dbg !9725
  call void @sub_v3_v3(float* %arraydecay28, float* %25), !dbg !9726
  %26 = load [4 x float]*, [4 x float]** %r_mat.addr, align 8, !dbg !9727
  %arrayidx29 = getelementptr inbounds [4 x float], [4 x float]* %26, i64 2, !dbg !9727
  %arraydecay30 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx29, i64 0, i64 0, !dbg !9727
  %27 = load float*, float** %vd.addr, align 8, !dbg !9728
  call void @add_v3_v3(float* %arraydecay30, float* %27), !dbg !9729
  %28 = load [4 x float]*, [4 x float]** %r_mat.addr, align 8, !dbg !9730
  %arrayidx31 = getelementptr inbounds [4 x float], [4 x float]* %28, i64 2, !dbg !9730
  %arraydecay32 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx31, i64 0, i64 0, !dbg !9730
  call void @mul_v3_fl(float* %arraydecay32, float 5.000000e-01), !dbg !9731
  %29 = load [4 x float]*, [4 x float]** %r_mat.addr, align 8, !dbg !9732
  %arrayidx33 = getelementptr inbounds [4 x float], [4 x float]* %29, i64 2, !dbg !9732
  %arrayidx34 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx33, i64 0, i64 3, !dbg !9732
  store float 0.000000e+00, float* %arrayidx34, align 4, !dbg !9733
  %30 = load [4 x float]*, [4 x float]** %r_mat.addr, align 8, !dbg !9734
  %arrayidx35 = getelementptr inbounds [4 x float], [4 x float]* %30, i64 3, !dbg !9734
  %arraydecay36 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx35, i64 0, i64 0, !dbg !9734
  %31 = load float*, float** %va.addr, align 8, !dbg !9735
  call void @copy_v3_v3(float* %arraydecay36, float* %31), !dbg !9736
  %32 = load [4 x float]*, [4 x float]** %r_mat.addr, align 8, !dbg !9737
  %arrayidx37 = getelementptr inbounds [4 x float], [4 x float]* %32, i64 3, !dbg !9737
  %arraydecay38 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx37, i64 0, i64 0, !dbg !9737
  %33 = load float*, float** %vb.addr, align 8, !dbg !9738
  call void @add_v3_v3(float* %arraydecay38, float* %33), !dbg !9739
  %34 = load [4 x float]*, [4 x float]** %r_mat.addr, align 8, !dbg !9740
  %arrayidx39 = getelementptr inbounds [4 x float], [4 x float]* %34, i64 3, !dbg !9740
  %arraydecay40 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx39, i64 0, i64 0, !dbg !9740
  %35 = load float*, float** %vc.addr, align 8, !dbg !9741
  call void @add_v3_v3(float* %arraydecay40, float* %35), !dbg !9742
  %36 = load [4 x float]*, [4 x float]** %r_mat.addr, align 8, !dbg !9743
  %arrayidx41 = getelementptr inbounds [4 x float], [4 x float]* %36, i64 3, !dbg !9743
  %arraydecay42 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx41, i64 0, i64 0, !dbg !9743
  %37 = load float*, float** %vd.addr, align 8, !dbg !9744
  call void @sub_v3_v3(float* %arraydecay42, float* %37), !dbg !9745
  %38 = load [4 x float]*, [4 x float]** %r_mat.addr, align 8, !dbg !9746
  %arrayidx43 = getelementptr inbounds [4 x float], [4 x float]* %38, i64 3, !dbg !9746
  %arraydecay44 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx43, i64 0, i64 0, !dbg !9746
  call void @mul_v3_fl(float* %arraydecay44, float 5.000000e-01), !dbg !9747
  %39 = load [4 x float]*, [4 x float]** %r_mat.addr, align 8, !dbg !9748
  %arrayidx45 = getelementptr inbounds [4 x float], [4 x float]* %39, i64 3, !dbg !9748
  %arrayidx46 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx45, i64 0, i64 3, !dbg !9748
  store float 1.000000e+00, float* %arrayidx46, align 4, !dbg !9749
  ret void, !dbg !9750
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VMesh* @make_cube_corner_adj_vmesh(%struct.BevelParams* %bp) #0 !dbg !9751 {
entry:
  %retval = alloca %struct.VMesh*, align 8
  %bp.addr = alloca %struct.BevelParams*, align 8
  %mem_arena = alloca %struct.MemArena*, align 8
  %nseg = alloca i32, align 4
  %r = alloca float, align 4
  %vm0 = alloca %struct.VMesh*, align 8
  %vm1 = alloca %struct.VMesh*, align 8
  %bndv = alloca %struct.BoundVert*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %ns2 = alloca i32, align 4
  %co = alloca [3 x float], align 4
  %coc = alloca [3 x float], align 4
  %w = alloca float, align 4
  store %struct.BevelParams* %bp, %struct.BevelParams** %bp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BevelParams** %bp.addr, metadata !9754, metadata !DIExpression()), !dbg !9755
  call void @llvm.dbg.declare(metadata %struct.MemArena** %mem_arena, metadata !9756, metadata !DIExpression()), !dbg !9757
  %0 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !9758
  %mem_arena1 = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %0, i32 0, i32 1, !dbg !9759
  %1 = load %struct.MemArena*, %struct.MemArena** %mem_arena1, align 8, !dbg !9759
  store %struct.MemArena* %1, %struct.MemArena** %mem_arena, align 8, !dbg !9757
  call void @llvm.dbg.declare(metadata i32* %nseg, metadata !9760, metadata !DIExpression()), !dbg !9761
  %2 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !9762
  %seg = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %2, i32 0, i32 5, !dbg !9763
  %3 = load i32, i32* %seg, align 8, !dbg !9763
  store i32 %3, i32* %nseg, align 4, !dbg !9761
  call void @llvm.dbg.declare(metadata float* %r, metadata !9764, metadata !DIExpression()), !dbg !9765
  %4 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !9766
  %pro_super_r = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %4, i32 0, i32 6, !dbg !9767
  %5 = load float, float* %pro_super_r, align 4, !dbg !9767
  store float %5, float* %r, align 4, !dbg !9765
  call void @llvm.dbg.declare(metadata %struct.VMesh** %vm0, metadata !9768, metadata !DIExpression()), !dbg !9769
  call void @llvm.dbg.declare(metadata %struct.VMesh** %vm1, metadata !9770, metadata !DIExpression()), !dbg !9771
  call void @llvm.dbg.declare(metadata %struct.BoundVert** %bndv, metadata !9772, metadata !DIExpression()), !dbg !9773
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9774, metadata !DIExpression()), !dbg !9775
  call void @llvm.dbg.declare(metadata i32* %j, metadata !9776, metadata !DIExpression()), !dbg !9777
  call void @llvm.dbg.declare(metadata i32* %k, metadata !9778, metadata !DIExpression()), !dbg !9779
  call void @llvm.dbg.declare(metadata i32* %ns2, metadata !9780, metadata !DIExpression()), !dbg !9781
  call void @llvm.dbg.declare(metadata [3 x float]* %co, metadata !9782, metadata !DIExpression()), !dbg !9783
  call void @llvm.dbg.declare(metadata [3 x float]* %coc, metadata !9784, metadata !DIExpression()), !dbg !9785
  call void @llvm.dbg.declare(metadata float* %w, metadata !9786, metadata !DIExpression()), !dbg !9787
  %6 = load float, float* %r, align 4, !dbg !9788
  %cmp = fcmp oeq float %6, 4.000000e+00, !dbg !9790
  br i1 %cmp, label %if.then, label %if.end, !dbg !9791

if.then:                                          ; preds = %entry
  %7 = load %struct.MemArena*, %struct.MemArena** %mem_arena, align 8, !dbg !9792
  %8 = load i32, i32* %nseg, align 4, !dbg !9793
  %call = call %struct.VMesh* @make_cube_corner_straight(%struct.MemArena* %7, i32 %8), !dbg !9794
  store %struct.VMesh* %call, %struct.VMesh** %retval, align 8, !dbg !9795
  br label %return, !dbg !9795

if.end:                                           ; preds = %entry
  %9 = load %struct.MemArena*, %struct.MemArena** %mem_arena, align 8, !dbg !9796
  %call2 = call %struct.VMesh* @new_adj_vmesh(%struct.MemArena* %9, i32 3, i32 2, %struct.BoundVert* null), !dbg !9797
  store %struct.VMesh* %call2, %struct.VMesh** %vm0, align 8, !dbg !9798
  %10 = load %struct.VMesh*, %struct.VMesh** %vm0, align 8, !dbg !9799
  %count = getelementptr inbounds %struct.VMesh, %struct.VMesh* %10, i32 0, i32 2, !dbg !9800
  store i32 0, i32* %count, align 8, !dbg !9801
  store i32 0, i32* %i, align 4, !dbg !9802
  br label %for.cond, !dbg !9804

for.cond:                                         ; preds = %for.inc, %if.end
  %11 = load i32, i32* %i, align 4, !dbg !9805
  %cmp3 = icmp slt i32 %11, 3, !dbg !9807
  br i1 %cmp3, label %for.body, label %for.end, !dbg !9808

for.body:                                         ; preds = %for.cond
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !9809
  call void @zero_v3(float* %arraydecay), !dbg !9811
  %12 = load i32, i32* %i, align 4, !dbg !9812
  %idxprom = sext i32 %12 to i64, !dbg !9813
  %arrayidx = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 %idxprom, !dbg !9813
  store float 1.000000e+00, float* %arrayidx, align 4, !dbg !9814
  %13 = load %struct.MemArena*, %struct.MemArena** %mem_arena, align 8, !dbg !9815
  %14 = load %struct.VMesh*, %struct.VMesh** %vm0, align 8, !dbg !9816
  %arraydecay4 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !9817
  %call5 = call %struct.BoundVert* @add_new_bound_vert(%struct.MemArena* %13, %struct.VMesh* %14, float* %arraydecay4), !dbg !9818
  br label %for.inc, !dbg !9819

for.inc:                                          ; preds = %for.body
  %15 = load i32, i32* %i, align 4, !dbg !9820
  %inc = add nsw i32 %15, 1, !dbg !9820
  store i32 %inc, i32* %i, align 4, !dbg !9820
  br label %for.cond, !dbg !9821, !llvm.loop !9822

for.end:                                          ; preds = %for.cond
  %16 = load %struct.VMesh*, %struct.VMesh** %vm0, align 8, !dbg !9824
  %boundstart = getelementptr inbounds %struct.VMesh, %struct.VMesh* %16, i32 0, i32 1, !dbg !9825
  %17 = load %struct.BoundVert*, %struct.BoundVert** %boundstart, align 8, !dbg !9825
  store %struct.BoundVert* %17, %struct.BoundVert** %bndv, align 8, !dbg !9826
  store i32 0, i32* %i, align 4, !dbg !9827
  br label %for.cond6, !dbg !9829

for.cond6:                                        ; preds = %for.inc58, %for.end
  %18 = load i32, i32* %i, align 4, !dbg !9830
  %cmp7 = icmp slt i32 %18, 3, !dbg !9832
  br i1 %cmp7, label %for.body8, label %for.end60, !dbg !9833

for.body8:                                        ; preds = %for.cond6
  %19 = load i32, i32* %i, align 4, !dbg !9834
  %idxprom9 = sext i32 %19 to i64, !dbg !9836
  %arrayidx10 = getelementptr inbounds [3 x float], [3 x float]* %coc, i64 0, i64 %idxprom9, !dbg !9836
  store float 1.000000e+00, float* %arrayidx10, align 4, !dbg !9837
  %20 = load i32, i32* %i, align 4, !dbg !9838
  %add = add nsw i32 %20, 1, !dbg !9839
  %rem = srem i32 %add, 3, !dbg !9840
  %idxprom11 = sext i32 %rem to i64, !dbg !9841
  %arrayidx12 = getelementptr inbounds [3 x float], [3 x float]* %coc, i64 0, i64 %idxprom11, !dbg !9841
  store float 1.000000e+00, float* %arrayidx12, align 4, !dbg !9842
  %21 = load i32, i32* %i, align 4, !dbg !9843
  %add13 = add nsw i32 %21, 2, !dbg !9844
  %rem14 = srem i32 %add13, 3, !dbg !9845
  %idxprom15 = sext i32 %rem14 to i64, !dbg !9846
  %arrayidx16 = getelementptr inbounds [3 x float], [3 x float]* %coc, i64 0, i64 %idxprom15, !dbg !9846
  store float 0.000000e+00, float* %arrayidx16, align 4, !dbg !9847
  %22 = load float, float* %r, align 4, !dbg !9848
  %23 = load %struct.BoundVert*, %struct.BoundVert** %bndv, align 8, !dbg !9849
  %profile = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %23, i32 0, i32 7, !dbg !9850
  %super_r = getelementptr inbounds %struct.Profile, %struct.Profile* %profile, i32 0, i32 0, !dbg !9851
  store float %22, float* %super_r, align 8, !dbg !9852
  %24 = load %struct.BoundVert*, %struct.BoundVert** %bndv, align 8, !dbg !9853
  %profile17 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %24, i32 0, i32 7, !dbg !9854
  %coa = getelementptr inbounds %struct.Profile, %struct.Profile* %profile17, i32 0, i32 1, !dbg !9855
  %arraydecay18 = getelementptr inbounds [3 x float], [3 x float]* %coa, i64 0, i64 0, !dbg !9853
  %25 = load %struct.BoundVert*, %struct.BoundVert** %bndv, align 8, !dbg !9856
  %nv = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %25, i32 0, i32 2, !dbg !9857
  %co19 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %nv, i32 0, i32 1, !dbg !9858
  %arraydecay20 = getelementptr inbounds [3 x float], [3 x float]* %co19, i64 0, i64 0, !dbg !9856
  call void @copy_v3_v3(float* %arraydecay18, float* %arraydecay20), !dbg !9859
  %26 = load %struct.BoundVert*, %struct.BoundVert** %bndv, align 8, !dbg !9860
  %profile21 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %26, i32 0, i32 7, !dbg !9861
  %cob = getelementptr inbounds %struct.Profile, %struct.Profile* %profile21, i32 0, i32 3, !dbg !9862
  %arraydecay22 = getelementptr inbounds [3 x float], [3 x float]* %cob, i64 0, i64 0, !dbg !9860
  %27 = load %struct.BoundVert*, %struct.BoundVert** %bndv, align 8, !dbg !9863
  %next = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %27, i32 0, i32 0, !dbg !9864
  %28 = load %struct.BoundVert*, %struct.BoundVert** %next, align 8, !dbg !9864
  %nv23 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %28, i32 0, i32 2, !dbg !9865
  %co24 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %nv23, i32 0, i32 1, !dbg !9866
  %arraydecay25 = getelementptr inbounds [3 x float], [3 x float]* %co24, i64 0, i64 0, !dbg !9863
  call void @copy_v3_v3(float* %arraydecay22, float* %arraydecay25), !dbg !9867
  %29 = load %struct.BoundVert*, %struct.BoundVert** %bndv, align 8, !dbg !9868
  %profile26 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %29, i32 0, i32 7, !dbg !9869
  %midco = getelementptr inbounds %struct.Profile, %struct.Profile* %profile26, i32 0, i32 2, !dbg !9870
  %arraydecay27 = getelementptr inbounds [3 x float], [3 x float]* %midco, i64 0, i64 0, !dbg !9868
  %arraydecay28 = getelementptr inbounds [3 x float], [3 x float]* %coc, i64 0, i64 0, !dbg !9871
  call void @copy_v3_v3(float* %arraydecay27, float* %arraydecay28), !dbg !9872
  %30 = load %struct.VMesh*, %struct.VMesh** %vm0, align 8, !dbg !9873
  %31 = load i32, i32* %i, align 4, !dbg !9874
  %call29 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %30, i32 %31, i32 0, i32 0), !dbg !9875
  %co30 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call29, i32 0, i32 1, !dbg !9876
  %arraydecay31 = getelementptr inbounds [3 x float], [3 x float]* %co30, i64 0, i64 0, !dbg !9875
  %32 = load %struct.BoundVert*, %struct.BoundVert** %bndv, align 8, !dbg !9877
  %profile32 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %32, i32 0, i32 7, !dbg !9878
  %coa33 = getelementptr inbounds %struct.Profile, %struct.Profile* %profile32, i32 0, i32 1, !dbg !9879
  %arraydecay34 = getelementptr inbounds [3 x float], [3 x float]* %coa33, i64 0, i64 0, !dbg !9877
  call void @copy_v3_v3(float* %arraydecay31, float* %arraydecay34), !dbg !9880
  %33 = load %struct.BoundVert*, %struct.BoundVert** %bndv, align 8, !dbg !9881
  %profile35 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %33, i32 0, i32 7, !dbg !9882
  %plane_co = getelementptr inbounds %struct.Profile, %struct.Profile* %profile35, i32 0, i32 5, !dbg !9883
  %arraydecay36 = getelementptr inbounds [3 x float], [3 x float]* %plane_co, i64 0, i64 0, !dbg !9881
  %34 = load %struct.BoundVert*, %struct.BoundVert** %bndv, align 8, !dbg !9884
  %profile37 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %34, i32 0, i32 7, !dbg !9885
  %coa38 = getelementptr inbounds %struct.Profile, %struct.Profile* %profile37, i32 0, i32 1, !dbg !9886
  %arraydecay39 = getelementptr inbounds [3 x float], [3 x float]* %coa38, i64 0, i64 0, !dbg !9884
  call void @copy_v3_v3(float* %arraydecay36, float* %arraydecay39), !dbg !9887
  %35 = load %struct.BoundVert*, %struct.BoundVert** %bndv, align 8, !dbg !9888
  %profile40 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %35, i32 0, i32 7, !dbg !9889
  %plane_no = getelementptr inbounds %struct.Profile, %struct.Profile* %profile40, i32 0, i32 4, !dbg !9890
  %arraydecay41 = getelementptr inbounds [3 x float], [3 x float]* %plane_no, i64 0, i64 0, !dbg !9888
  %36 = load %struct.BoundVert*, %struct.BoundVert** %bndv, align 8, !dbg !9891
  %profile42 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %36, i32 0, i32 7, !dbg !9892
  %coa43 = getelementptr inbounds %struct.Profile, %struct.Profile* %profile42, i32 0, i32 1, !dbg !9893
  %arraydecay44 = getelementptr inbounds [3 x float], [3 x float]* %coa43, i64 0, i64 0, !dbg !9891
  %37 = load %struct.BoundVert*, %struct.BoundVert** %bndv, align 8, !dbg !9894
  %profile45 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %37, i32 0, i32 7, !dbg !9895
  %cob46 = getelementptr inbounds %struct.Profile, %struct.Profile* %profile45, i32 0, i32 3, !dbg !9896
  %arraydecay47 = getelementptr inbounds [3 x float], [3 x float]* %cob46, i64 0, i64 0, !dbg !9894
  call void @cross_v3_v3v3(float* %arraydecay41, float* %arraydecay44, float* %arraydecay47), !dbg !9897
  %38 = load %struct.BoundVert*, %struct.BoundVert** %bndv, align 8, !dbg !9898
  %profile48 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %38, i32 0, i32 7, !dbg !9899
  %proj_dir = getelementptr inbounds %struct.Profile, %struct.Profile* %profile48, i32 0, i32 6, !dbg !9900
  %arraydecay49 = getelementptr inbounds [3 x float], [3 x float]* %proj_dir, i64 0, i64 0, !dbg !9898
  %39 = load %struct.BoundVert*, %struct.BoundVert** %bndv, align 8, !dbg !9901
  %profile50 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %39, i32 0, i32 7, !dbg !9902
  %plane_no51 = getelementptr inbounds %struct.Profile, %struct.Profile* %profile50, i32 0, i32 4, !dbg !9903
  %arraydecay52 = getelementptr inbounds [3 x float], [3 x float]* %plane_no51, i64 0, i64 0, !dbg !9901
  call void @copy_v3_v3(float* %arraydecay49, float* %arraydecay52), !dbg !9904
  %40 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !9905
  %41 = load %struct.BoundVert*, %struct.BoundVert** %bndv, align 8, !dbg !9906
  call void @calculate_profile(%struct.BevelParams* %40, %struct.BoundVert* %41), !dbg !9907
  %42 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !9908
  %43 = load %struct.BoundVert*, %struct.BoundVert** %bndv, align 8, !dbg !9909
  %profile53 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %43, i32 0, i32 7, !dbg !9910
  %44 = load %struct.VMesh*, %struct.VMesh** %vm0, align 8, !dbg !9911
  %45 = load i32, i32* %i, align 4, !dbg !9912
  %call54 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %44, i32 %45, i32 0, i32 1), !dbg !9913
  %co55 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call54, i32 0, i32 1, !dbg !9914
  %arraydecay56 = getelementptr inbounds [3 x float], [3 x float]* %co55, i64 0, i64 0, !dbg !9913
  call void @get_profile_point(%struct.BevelParams* %42, %struct.Profile* %profile53, i32 1, i32 2, float* %arraydecay56), !dbg !9915
  %46 = load %struct.BoundVert*, %struct.BoundVert** %bndv, align 8, !dbg !9916
  %next57 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %46, i32 0, i32 0, !dbg !9917
  %47 = load %struct.BoundVert*, %struct.BoundVert** %next57, align 8, !dbg !9917
  store %struct.BoundVert* %47, %struct.BoundVert** %bndv, align 8, !dbg !9918
  br label %for.inc58, !dbg !9919

for.inc58:                                        ; preds = %for.body8
  %48 = load i32, i32* %i, align 4, !dbg !9920
  %inc59 = add nsw i32 %48, 1, !dbg !9920
  store i32 %inc59, i32* %i, align 4, !dbg !9920
  br label %for.cond6, !dbg !9921, !llvm.loop !9922

for.end60:                                        ; preds = %for.cond6
  store float 0x3FE279A740000000, float* %w, align 4, !dbg !9924
  %49 = load float, float* %w, align 4, !dbg !9925
  %arrayidx61 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !9926
  store float %49, float* %arrayidx61, align 4, !dbg !9927
  %50 = load float, float* %w, align 4, !dbg !9928
  %arrayidx62 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 1, !dbg !9929
  store float %50, float* %arrayidx62, align 4, !dbg !9930
  %51 = load float, float* %w, align 4, !dbg !9931
  %arrayidx63 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 2, !dbg !9932
  store float %51, float* %arrayidx63, align 4, !dbg !9933
  %52 = load i32, i32* %nseg, align 4, !dbg !9934
  %cmp64 = icmp sgt i32 %52, 2, !dbg !9936
  br i1 %cmp64, label %if.then65, label %if.end74, !dbg !9937

if.then65:                                        ; preds = %for.end60
  %53 = load float, float* %r, align 4, !dbg !9938
  %cmp66 = fcmp ogt float %53, 1.500000e+00, !dbg !9941
  br i1 %cmp66, label %if.then67, label %if.else, !dbg !9942

if.then67:                                        ; preds = %if.then65
  %arraydecay68 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !9943
  call void @mul_v3_fl(float* %arraydecay68, float 0x3FF6666660000000), !dbg !9944
  br label %if.end73, !dbg !9944

if.else:                                          ; preds = %if.then65
  %54 = load float, float* %r, align 4, !dbg !9945
  %cmp69 = fcmp olt float %54, 7.500000e-01, !dbg !9947
  br i1 %cmp69, label %if.then70, label %if.end72, !dbg !9948

if.then70:                                        ; preds = %if.else
  %arraydecay71 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !9949
  call void @mul_v3_fl(float* %arraydecay71, float 0x3FE3333340000000), !dbg !9950
  br label %if.end72, !dbg !9950

if.end72:                                         ; preds = %if.then70, %if.else
  br label %if.end73

if.end73:                                         ; preds = %if.end72, %if.then67
  br label %if.end74, !dbg !9951

if.end74:                                         ; preds = %if.end73, %for.end60
  %55 = load %struct.VMesh*, %struct.VMesh** %vm0, align 8, !dbg !9952
  %call75 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %55, i32 0, i32 1, i32 1), !dbg !9953
  %co76 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call75, i32 0, i32 1, !dbg !9954
  %arraydecay77 = getelementptr inbounds [3 x float], [3 x float]* %co76, i64 0, i64 0, !dbg !9953
  %arraydecay78 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !9955
  call void @copy_v3_v3(float* %arraydecay77, float* %arraydecay78), !dbg !9956
  %56 = load %struct.VMesh*, %struct.VMesh** %vm0, align 8, !dbg !9957
  call void @vmesh_copy_equiv_verts(%struct.VMesh* %56), !dbg !9958
  %57 = load %struct.VMesh*, %struct.VMesh** %vm0, align 8, !dbg !9959
  store %struct.VMesh* %57, %struct.VMesh** %vm1, align 8, !dbg !9960
  br label %while.cond, !dbg !9961

while.cond:                                       ; preds = %while.body, %if.end74
  %58 = load %struct.VMesh*, %struct.VMesh** %vm1, align 8, !dbg !9962
  %seg79 = getelementptr inbounds %struct.VMesh, %struct.VMesh* %58, i32 0, i32 3, !dbg !9963
  %59 = load i32, i32* %seg79, align 4, !dbg !9963
  %60 = load i32, i32* %nseg, align 4, !dbg !9964
  %cmp80 = icmp slt i32 %59, %60, !dbg !9965
  br i1 %cmp80, label %while.body, label %while.end, !dbg !9961

while.body:                                       ; preds = %while.cond
  %61 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !9966
  %62 = load %struct.VMesh*, %struct.VMesh** %vm1, align 8, !dbg !9968
  %call81 = call %struct.VMesh* @cubic_subdiv(%struct.BevelParams* %61, %struct.VMesh* %62), !dbg !9969
  store %struct.VMesh* %call81, %struct.VMesh** %vm1, align 8, !dbg !9970
  br label %while.cond, !dbg !9961, !llvm.loop !9971

while.end:                                        ; preds = %while.cond
  %63 = load %struct.VMesh*, %struct.VMesh** %vm1, align 8, !dbg !9973
  %seg82 = getelementptr inbounds %struct.VMesh, %struct.VMesh* %63, i32 0, i32 3, !dbg !9975
  %64 = load i32, i32* %seg82, align 4, !dbg !9975
  %65 = load i32, i32* %nseg, align 4, !dbg !9976
  %cmp83 = icmp ne i32 %64, %65, !dbg !9977
  br i1 %cmp83, label %if.then84, label %if.end86, !dbg !9978

if.then84:                                        ; preds = %while.end
  %66 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !9979
  %67 = load %struct.VMesh*, %struct.VMesh** %vm1, align 8, !dbg !9980
  %68 = load i32, i32* %nseg, align 4, !dbg !9981
  %call85 = call %struct.VMesh* @interp_vmesh(%struct.BevelParams* %66, %struct.VMesh* %67, i32 %68), !dbg !9982
  store %struct.VMesh* %call85, %struct.VMesh** %vm1, align 8, !dbg !9983
  br label %if.end86, !dbg !9984

if.end86:                                         ; preds = %if.then84, %while.end
  %69 = load i32, i32* %nseg, align 4, !dbg !9985
  %div = sdiv i32 %69, 2, !dbg !9986
  store i32 %div, i32* %ns2, align 4, !dbg !9987
  store i32 0, i32* %i, align 4, !dbg !9988
  br label %for.cond87, !dbg !9990

for.cond87:                                       ; preds = %for.inc105, %if.end86
  %70 = load i32, i32* %i, align 4, !dbg !9991
  %cmp88 = icmp slt i32 %70, 3, !dbg !9993
  br i1 %cmp88, label %for.body89, label %for.end107, !dbg !9994

for.body89:                                       ; preds = %for.cond87
  store i32 0, i32* %j, align 4, !dbg !9995
  br label %for.cond90, !dbg !9998

for.cond90:                                       ; preds = %for.inc102, %for.body89
  %71 = load i32, i32* %j, align 4, !dbg !9999
  %72 = load i32, i32* %ns2, align 4, !dbg !10001
  %cmp91 = icmp sle i32 %71, %72, !dbg !10002
  br i1 %cmp91, label %for.body92, label %for.end104, !dbg !10003

for.body92:                                       ; preds = %for.cond90
  store i32 0, i32* %k, align 4, !dbg !10004
  br label %for.cond93, !dbg !10007

for.cond93:                                       ; preds = %for.inc99, %for.body92
  %73 = load i32, i32* %k, align 4, !dbg !10008
  %74 = load i32, i32* %nseg, align 4, !dbg !10010
  %cmp94 = icmp sle i32 %73, %74, !dbg !10011
  br i1 %cmp94, label %for.body95, label %for.end101, !dbg !10012

for.body95:                                       ; preds = %for.cond93
  %75 = load %struct.VMesh*, %struct.VMesh** %vm1, align 8, !dbg !10013
  %76 = load i32, i32* %i, align 4, !dbg !10015
  %77 = load i32, i32* %j, align 4, !dbg !10016
  %78 = load i32, i32* %k, align 4, !dbg !10017
  %call96 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %75, i32 %76, i32 %77, i32 %78), !dbg !10018
  %co97 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call96, i32 0, i32 1, !dbg !10019
  %arraydecay98 = getelementptr inbounds [3 x float], [3 x float]* %co97, i64 0, i64 0, !dbg !10018
  %79 = load float, float* %r, align 4, !dbg !10020
  call void @snap_to_superellipsoid(float* %arraydecay98, float %79, i8 zeroext 0), !dbg !10021
  br label %for.inc99, !dbg !10022

for.inc99:                                        ; preds = %for.body95
  %80 = load i32, i32* %k, align 4, !dbg !10023
  %inc100 = add nsw i32 %80, 1, !dbg !10023
  store i32 %inc100, i32* %k, align 4, !dbg !10023
  br label %for.cond93, !dbg !10024, !llvm.loop !10025

for.end101:                                       ; preds = %for.cond93
  br label %for.inc102, !dbg !10027

for.inc102:                                       ; preds = %for.end101
  %81 = load i32, i32* %j, align 4, !dbg !10028
  %inc103 = add nsw i32 %81, 1, !dbg !10028
  store i32 %inc103, i32* %j, align 4, !dbg !10028
  br label %for.cond90, !dbg !10029, !llvm.loop !10030

for.end104:                                       ; preds = %for.cond90
  br label %for.inc105, !dbg !10032

for.inc105:                                       ; preds = %for.end104
  %82 = load i32, i32* %i, align 4, !dbg !10033
  %inc106 = add nsw i32 %82, 1, !dbg !10033
  store i32 %inc106, i32* %i, align 4, !dbg !10033
  br label %for.cond87, !dbg !10034, !llvm.loop !10035

for.end107:                                       ; preds = %for.cond87
  %83 = load %struct.VMesh*, %struct.VMesh** %vm1, align 8, !dbg !10037
  store %struct.VMesh* %83, %struct.VMesh** %retval, align 8, !dbg !10038
  br label %return, !dbg !10038

return:                                           ; preds = %for.end107, %if.then
  %84 = load %struct.VMesh*, %struct.VMesh** %retval, align 8, !dbg !10039
  ret %struct.VMesh* %84, !dbg !10039
}

declare dso_local void @mul_m4_v4([4 x float]*, float*) #3

; Function Attrs: noinline nounwind uwtable
define internal void @add_v3_v3(float* %r, float* %a) #0 !dbg !10040 {
entry:
  %r.addr = alloca float*, align 8
  %a.addr = alloca float*, align 8
  store float* %r, float** %r.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r.addr, metadata !10041, metadata !DIExpression()), !dbg !10042
  store float* %a, float** %a.addr, align 8
  call void @llvm.dbg.declare(metadata float** %a.addr, metadata !10043, metadata !DIExpression()), !dbg !10044
  %0 = load float*, float** %a.addr, align 8, !dbg !10045
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !10045
  %1 = load float, float* %arrayidx, align 4, !dbg !10045
  %2 = load float*, float** %r.addr, align 8, !dbg !10046
  %arrayidx1 = getelementptr inbounds float, float* %2, i64 0, !dbg !10046
  %3 = load float, float* %arrayidx1, align 4, !dbg !10047
  %add = fadd float %3, %1, !dbg !10047
  store float %add, float* %arrayidx1, align 4, !dbg !10047
  %4 = load float*, float** %a.addr, align 8, !dbg !10048
  %arrayidx2 = getelementptr inbounds float, float* %4, i64 1, !dbg !10048
  %5 = load float, float* %arrayidx2, align 4, !dbg !10048
  %6 = load float*, float** %r.addr, align 8, !dbg !10049
  %arrayidx3 = getelementptr inbounds float, float* %6, i64 1, !dbg !10049
  %7 = load float, float* %arrayidx3, align 4, !dbg !10050
  %add4 = fadd float %7, %5, !dbg !10050
  store float %add4, float* %arrayidx3, align 4, !dbg !10050
  %8 = load float*, float** %a.addr, align 8, !dbg !10051
  %arrayidx5 = getelementptr inbounds float, float* %8, i64 2, !dbg !10051
  %9 = load float, float* %arrayidx5, align 4, !dbg !10051
  %10 = load float*, float** %r.addr, align 8, !dbg !10052
  %arrayidx6 = getelementptr inbounds float, float* %10, i64 2, !dbg !10052
  %11 = load float, float* %arrayidx6, align 4, !dbg !10053
  %add7 = fadd float %11, %9, !dbg !10053
  store float %add7, float* %arrayidx6, align 4, !dbg !10053
  ret void, !dbg !10054
}

; Function Attrs: noinline nounwind uwtable
define internal void @mul_v3_fl(float* %r, float %f) #0 !dbg !10055 {
entry:
  %r.addr = alloca float*, align 8
  %f.addr = alloca float, align 4
  store float* %r, float** %r.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r.addr, metadata !10058, metadata !DIExpression()), !dbg !10059
  store float %f, float* %f.addr, align 4
  call void @llvm.dbg.declare(metadata float* %f.addr, metadata !10060, metadata !DIExpression()), !dbg !10061
  %0 = load float, float* %f.addr, align 4, !dbg !10062
  %1 = load float*, float** %r.addr, align 8, !dbg !10063
  %arrayidx = getelementptr inbounds float, float* %1, i64 0, !dbg !10063
  %2 = load float, float* %arrayidx, align 4, !dbg !10064
  %mul = fmul float %2, %0, !dbg !10064
  store float %mul, float* %arrayidx, align 4, !dbg !10064
  %3 = load float, float* %f.addr, align 4, !dbg !10065
  %4 = load float*, float** %r.addr, align 8, !dbg !10066
  %arrayidx1 = getelementptr inbounds float, float* %4, i64 1, !dbg !10066
  %5 = load float, float* %arrayidx1, align 4, !dbg !10067
  %mul2 = fmul float %5, %3, !dbg !10067
  store float %mul2, float* %arrayidx1, align 4, !dbg !10067
  %6 = load float, float* %f.addr, align 4, !dbg !10068
  %7 = load float*, float** %r.addr, align 8, !dbg !10069
  %arrayidx3 = getelementptr inbounds float, float* %7, i64 2, !dbg !10069
  %8 = load float, float* %arrayidx3, align 4, !dbg !10070
  %mul4 = fmul float %8, %6, !dbg !10070
  store float %mul4, float* %arrayidx3, align 4, !dbg !10070
  ret void, !dbg !10071
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VMesh* @make_cube_corner_straight(%struct.MemArena* %mem_arena, i32 %nseg) #0 !dbg !10072 {
entry:
  %mem_arena.addr = alloca %struct.MemArena*, align 8
  %nseg.addr = alloca i32, align 4
  %vm = alloca %struct.VMesh*, align 8
  %co = alloca [3 x float], align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %ns2 = alloca i32, align 4
  store %struct.MemArena* %mem_arena, %struct.MemArena** %mem_arena.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.MemArena** %mem_arena.addr, metadata !10075, metadata !DIExpression()), !dbg !10076
  store i32 %nseg, i32* %nseg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %nseg.addr, metadata !10077, metadata !DIExpression()), !dbg !10078
  call void @llvm.dbg.declare(metadata %struct.VMesh** %vm, metadata !10079, metadata !DIExpression()), !dbg !10080
  call void @llvm.dbg.declare(metadata [3 x float]* %co, metadata !10081, metadata !DIExpression()), !dbg !10082
  call void @llvm.dbg.declare(metadata i32* %i, metadata !10083, metadata !DIExpression()), !dbg !10084
  call void @llvm.dbg.declare(metadata i32* %j, metadata !10085, metadata !DIExpression()), !dbg !10086
  call void @llvm.dbg.declare(metadata i32* %k, metadata !10087, metadata !DIExpression()), !dbg !10088
  call void @llvm.dbg.declare(metadata i32* %ns2, metadata !10089, metadata !DIExpression()), !dbg !10090
  %0 = load i32, i32* %nseg.addr, align 4, !dbg !10091
  %div = sdiv i32 %0, 2, !dbg !10092
  store i32 %div, i32* %ns2, align 4, !dbg !10093
  %1 = load %struct.MemArena*, %struct.MemArena** %mem_arena.addr, align 8, !dbg !10094
  %2 = load i32, i32* %nseg.addr, align 4, !dbg !10095
  %call = call %struct.VMesh* @new_adj_vmesh(%struct.MemArena* %1, i32 3, i32 %2, %struct.BoundVert* null), !dbg !10096
  store %struct.VMesh* %call, %struct.VMesh** %vm, align 8, !dbg !10097
  %3 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !10098
  %count = getelementptr inbounds %struct.VMesh, %struct.VMesh* %3, i32 0, i32 2, !dbg !10099
  store i32 0, i32* %count, align 8, !dbg !10100
  store i32 0, i32* %i, align 4, !dbg !10101
  br label %for.cond, !dbg !10103

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4, !dbg !10104
  %cmp = icmp slt i32 %4, 3, !dbg !10106
  br i1 %cmp, label %for.body, label %for.end, !dbg !10107

for.body:                                         ; preds = %for.cond
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !10108
  call void @zero_v3(float* %arraydecay), !dbg !10110
  %5 = load i32, i32* %i, align 4, !dbg !10111
  %idxprom = sext i32 %5 to i64, !dbg !10112
  %arrayidx = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 %idxprom, !dbg !10112
  store float 1.000000e+00, float* %arrayidx, align 4, !dbg !10113
  %6 = load %struct.MemArena*, %struct.MemArena** %mem_arena.addr, align 8, !dbg !10114
  %7 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !10115
  %arraydecay1 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !10116
  %call2 = call %struct.BoundVert* @add_new_bound_vert(%struct.MemArena* %6, %struct.VMesh* %7, float* %arraydecay1), !dbg !10117
  br label %for.inc, !dbg !10118

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4, !dbg !10119
  %inc = add nsw i32 %8, 1, !dbg !10119
  store i32 %inc, i32* %i, align 4, !dbg !10119
  br label %for.cond, !dbg !10120, !llvm.loop !10121

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4, !dbg !10123
  br label %for.cond3, !dbg !10125

for.cond3:                                        ; preds = %for.inc37, %for.end
  %9 = load i32, i32* %i, align 4, !dbg !10126
  %cmp4 = icmp slt i32 %9, 3, !dbg !10128
  br i1 %cmp4, label %for.body5, label %for.end39, !dbg !10129

for.body5:                                        ; preds = %for.cond3
  store i32 0, i32* %j, align 4, !dbg !10130
  br label %for.cond6, !dbg !10133

for.cond6:                                        ; preds = %for.inc34, %for.body5
  %10 = load i32, i32* %j, align 4, !dbg !10134
  %11 = load i32, i32* %ns2, align 4, !dbg !10136
  %cmp7 = icmp sle i32 %10, %11, !dbg !10137
  br i1 %cmp7, label %for.body8, label %for.end36, !dbg !10138

for.body8:                                        ; preds = %for.cond6
  store i32 0, i32* %k, align 4, !dbg !10139
  br label %for.cond9, !dbg !10142

for.cond9:                                        ; preds = %for.inc31, %for.body8
  %12 = load i32, i32* %k, align 4, !dbg !10143
  %13 = load i32, i32* %ns2, align 4, !dbg !10145
  %cmp10 = icmp sle i32 %12, %13, !dbg !10146
  br i1 %cmp10, label %for.body11, label %for.end33, !dbg !10147

for.body11:                                       ; preds = %for.cond9
  %14 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !10148
  %15 = load i32, i32* %i, align 4, !dbg !10151
  %16 = load i32, i32* %j, align 4, !dbg !10152
  %17 = load i32, i32* %k, align 4, !dbg !10153
  %call12 = call zeroext i8 @is_canon(%struct.VMesh* %14, i32 %15, i32 %16, i32 %17), !dbg !10154
  %tobool = icmp ne i8 %call12, 0, !dbg !10154
  br i1 %tobool, label %if.end, label %if.then, !dbg !10155

if.then:                                          ; preds = %for.body11
  br label %for.inc31, !dbg !10156

if.end:                                           ; preds = %for.body11
  %18 = load i32, i32* %i, align 4, !dbg !10157
  %idxprom13 = sext i32 %18 to i64, !dbg !10158
  %arrayidx14 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 %idxprom13, !dbg !10158
  store float 1.000000e+00, float* %arrayidx14, align 4, !dbg !10159
  %19 = load i32, i32* %k, align 4, !dbg !10160
  %conv = sitofp i32 %19 to float, !dbg !10161
  %mul = fmul float %conv, 2.000000e+00, !dbg !10162
  %20 = load i32, i32* %nseg.addr, align 4, !dbg !10163
  %conv15 = sitofp i32 %20 to float, !dbg !10164
  %div16 = fdiv float %mul, %conv15, !dbg !10165
  %21 = load i32, i32* %i, align 4, !dbg !10166
  %add = add nsw i32 %21, 1, !dbg !10167
  %rem = srem i32 %add, 3, !dbg !10168
  %idxprom17 = sext i32 %rem to i64, !dbg !10169
  %arrayidx18 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 %idxprom17, !dbg !10169
  store float %div16, float* %arrayidx18, align 4, !dbg !10170
  %22 = load i32, i32* %j, align 4, !dbg !10171
  %conv19 = sitofp i32 %22 to float, !dbg !10172
  %mul20 = fmul float %conv19, 2.000000e+00, !dbg !10173
  %23 = load i32, i32* %nseg.addr, align 4, !dbg !10174
  %conv21 = sitofp i32 %23 to float, !dbg !10175
  %div22 = fdiv float %mul20, %conv21, !dbg !10176
  %24 = load i32, i32* %i, align 4, !dbg !10177
  %add23 = add nsw i32 %24, 2, !dbg !10178
  %rem24 = srem i32 %add23, 3, !dbg !10179
  %idxprom25 = sext i32 %rem24 to i64, !dbg !10180
  %arrayidx26 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 %idxprom25, !dbg !10180
  store float %div22, float* %arrayidx26, align 4, !dbg !10181
  %25 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !10182
  %26 = load i32, i32* %i, align 4, !dbg !10183
  %27 = load i32, i32* %j, align 4, !dbg !10184
  %28 = load i32, i32* %k, align 4, !dbg !10185
  %call27 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %25, i32 %26, i32 %27, i32 %28), !dbg !10186
  %co28 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call27, i32 0, i32 1, !dbg !10187
  %arraydecay29 = getelementptr inbounds [3 x float], [3 x float]* %co28, i64 0, i64 0, !dbg !10186
  %arraydecay30 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !10188
  call void @copy_v3_v3(float* %arraydecay29, float* %arraydecay30), !dbg !10189
  br label %for.inc31, !dbg !10190

for.inc31:                                        ; preds = %if.end, %if.then
  %29 = load i32, i32* %k, align 4, !dbg !10191
  %inc32 = add nsw i32 %29, 1, !dbg !10191
  store i32 %inc32, i32* %k, align 4, !dbg !10191
  br label %for.cond9, !dbg !10192, !llvm.loop !10193

for.end33:                                        ; preds = %for.cond9
  br label %for.inc34, !dbg !10195

for.inc34:                                        ; preds = %for.end33
  %30 = load i32, i32* %j, align 4, !dbg !10196
  %inc35 = add nsw i32 %30, 1, !dbg !10196
  store i32 %inc35, i32* %j, align 4, !dbg !10196
  br label %for.cond6, !dbg !10197, !llvm.loop !10198

for.end36:                                        ; preds = %for.cond6
  br label %for.inc37, !dbg !10200

for.inc37:                                        ; preds = %for.end36
  %31 = load i32, i32* %i, align 4, !dbg !10201
  %inc38 = add nsw i32 %31, 1, !dbg !10201
  store i32 %inc38, i32* %i, align 4, !dbg !10201
  br label %for.cond3, !dbg !10202, !llvm.loop !10203

for.end39:                                        ; preds = %for.cond3
  %32 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !10205
  call void @vmesh_copy_equiv_verts(%struct.VMesh* %32), !dbg !10206
  %33 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !10207
  ret %struct.VMesh* %33, !dbg !10208
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VMesh* @new_adj_vmesh(%struct.MemArena* %mem_arena, i32 %count, i32 %seg, %struct.BoundVert* %bounds) #0 !dbg !10209 {
entry:
  %mem_arena.addr = alloca %struct.MemArena*, align 8
  %count.addr = alloca i32, align 4
  %seg.addr = alloca i32, align 4
  %bounds.addr = alloca %struct.BoundVert*, align 8
  %vm = alloca %struct.VMesh*, align 8
  store %struct.MemArena* %mem_arena, %struct.MemArena** %mem_arena.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.MemArena** %mem_arena.addr, metadata !10212, metadata !DIExpression()), !dbg !10213
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !10214, metadata !DIExpression()), !dbg !10215
  store i32 %seg, i32* %seg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %seg.addr, metadata !10216, metadata !DIExpression()), !dbg !10217
  store %struct.BoundVert* %bounds, %struct.BoundVert** %bounds.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BoundVert** %bounds.addr, metadata !10218, metadata !DIExpression()), !dbg !10219
  call void @llvm.dbg.declare(metadata %struct.VMesh** %vm, metadata !10220, metadata !DIExpression()), !dbg !10221
  %0 = load %struct.MemArena*, %struct.MemArena** %mem_arena.addr, align 8, !dbg !10222
  %call = call i8* @BLI_memarena_alloc(%struct.MemArena* %0, i64 32), !dbg !10223
  %1 = bitcast i8* %call to %struct.VMesh*, !dbg !10224
  store %struct.VMesh* %1, %struct.VMesh** %vm, align 8, !dbg !10225
  %2 = load i32, i32* %count.addr, align 4, !dbg !10226
  %3 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !10227
  %count1 = getelementptr inbounds %struct.VMesh, %struct.VMesh* %3, i32 0, i32 2, !dbg !10228
  store i32 %2, i32* %count1, align 8, !dbg !10229
  %4 = load i32, i32* %seg.addr, align 4, !dbg !10230
  %5 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !10231
  %seg2 = getelementptr inbounds %struct.VMesh, %struct.VMesh* %5, i32 0, i32 3, !dbg !10232
  store i32 %4, i32* %seg2, align 4, !dbg !10233
  %6 = load %struct.BoundVert*, %struct.BoundVert** %bounds.addr, align 8, !dbg !10234
  %7 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !10235
  %boundstart = getelementptr inbounds %struct.VMesh, %struct.VMesh* %7, i32 0, i32 1, !dbg !10236
  store %struct.BoundVert* %6, %struct.BoundVert** %boundstart, align 8, !dbg !10237
  %8 = load %struct.MemArena*, %struct.MemArena** %mem_arena.addr, align 8, !dbg !10238
  %9 = load i32, i32* %count.addr, align 4, !dbg !10239
  %10 = load i32, i32* %seg.addr, align 4, !dbg !10240
  %div = sdiv i32 %10, 2, !dbg !10241
  %add = add nsw i32 1, %div, !dbg !10242
  %mul = mul nsw i32 %9, %add, !dbg !10243
  %11 = load i32, i32* %seg.addr, align 4, !dbg !10244
  %add3 = add nsw i32 1, %11, !dbg !10245
  %mul4 = mul nsw i32 %mul, %add3, !dbg !10246
  %conv = sext i32 %mul4 to i64, !dbg !10239
  %mul5 = mul i64 %conv, 24, !dbg !10247
  %call6 = call i8* @BLI_memarena_alloc(%struct.MemArena* %8, i64 %mul5), !dbg !10248
  %12 = bitcast i8* %call6 to %struct.NewVert*, !dbg !10249
  %13 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !10250
  %mesh = getelementptr inbounds %struct.VMesh, %struct.VMesh* %13, i32 0, i32 0, !dbg !10251
  store %struct.NewVert* %12, %struct.NewVert** %mesh, align 8, !dbg !10252
  %14 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !10253
  %mesh_kind = getelementptr inbounds %struct.VMesh, %struct.VMesh* %14, i32 0, i32 4, !dbg !10254
  store i32 2, i32* %mesh_kind, align 8, !dbg !10255
  %15 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !10256
  ret %struct.VMesh* %15, !dbg !10257
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VMesh* @cubic_subdiv(%struct.BevelParams* %bp, %struct.VMesh* %vm0) #0 !dbg !10258 {
entry:
  %bp.addr = alloca %struct.BevelParams*, align 8
  %vm0.addr = alloca %struct.VMesh*, align 8
  %n = alloca i32, align 4
  %ns0 = alloca i32, align 4
  %ns20 = alloca i32, align 4
  %ns1 = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %inext = alloca i32, align 4
  %co = alloca [3 x float], align 4
  %co1 = alloca [3 x float], align 4
  %co2 = alloca [3 x float], align 4
  %acc = alloca [3 x float], align 4
  %beta = alloca float, align 4
  %gamma = alloca float, align 4
  %vm1 = alloca %struct.VMesh*, align 8
  %bndv = alloca %struct.BoundVert*, align 8
  store %struct.BevelParams* %bp, %struct.BevelParams** %bp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BevelParams** %bp.addr, metadata !10261, metadata !DIExpression()), !dbg !10262
  store %struct.VMesh* %vm0, %struct.VMesh** %vm0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VMesh** %vm0.addr, metadata !10263, metadata !DIExpression()), !dbg !10264
  call void @llvm.dbg.declare(metadata i32* %n, metadata !10265, metadata !DIExpression()), !dbg !10266
  call void @llvm.dbg.declare(metadata i32* %ns0, metadata !10267, metadata !DIExpression()), !dbg !10268
  call void @llvm.dbg.declare(metadata i32* %ns20, metadata !10269, metadata !DIExpression()), !dbg !10270
  call void @llvm.dbg.declare(metadata i32* %ns1, metadata !10271, metadata !DIExpression()), !dbg !10272
  call void @llvm.dbg.declare(metadata i32* %i, metadata !10273, metadata !DIExpression()), !dbg !10274
  call void @llvm.dbg.declare(metadata i32* %j, metadata !10275, metadata !DIExpression()), !dbg !10276
  call void @llvm.dbg.declare(metadata i32* %k, metadata !10277, metadata !DIExpression()), !dbg !10278
  call void @llvm.dbg.declare(metadata i32* %inext, metadata !10279, metadata !DIExpression()), !dbg !10280
  call void @llvm.dbg.declare(metadata [3 x float]* %co, metadata !10281, metadata !DIExpression()), !dbg !10282
  call void @llvm.dbg.declare(metadata [3 x float]* %co1, metadata !10283, metadata !DIExpression()), !dbg !10284
  call void @llvm.dbg.declare(metadata [3 x float]* %co2, metadata !10285, metadata !DIExpression()), !dbg !10286
  call void @llvm.dbg.declare(metadata [3 x float]* %acc, metadata !10287, metadata !DIExpression()), !dbg !10288
  call void @llvm.dbg.declare(metadata float* %beta, metadata !10289, metadata !DIExpression()), !dbg !10290
  call void @llvm.dbg.declare(metadata float* %gamma, metadata !10291, metadata !DIExpression()), !dbg !10292
  call void @llvm.dbg.declare(metadata %struct.VMesh** %vm1, metadata !10293, metadata !DIExpression()), !dbg !10294
  call void @llvm.dbg.declare(metadata %struct.BoundVert** %bndv, metadata !10295, metadata !DIExpression()), !dbg !10296
  %0 = load %struct.VMesh*, %struct.VMesh** %vm0.addr, align 8, !dbg !10297
  %count = getelementptr inbounds %struct.VMesh, %struct.VMesh* %0, i32 0, i32 2, !dbg !10298
  %1 = load i32, i32* %count, align 8, !dbg !10298
  store i32 %1, i32* %n, align 4, !dbg !10299
  %2 = load %struct.VMesh*, %struct.VMesh** %vm0.addr, align 8, !dbg !10300
  %seg = getelementptr inbounds %struct.VMesh, %struct.VMesh* %2, i32 0, i32 3, !dbg !10301
  %3 = load i32, i32* %seg, align 4, !dbg !10301
  store i32 %3, i32* %ns0, align 4, !dbg !10302
  %4 = load i32, i32* %ns0, align 4, !dbg !10303
  %div = sdiv i32 %4, 2, !dbg !10304
  store i32 %div, i32* %ns20, align 4, !dbg !10305
  %5 = load i32, i32* %ns0, align 4, !dbg !10306
  %mul = mul nsw i32 2, %5, !dbg !10307
  store i32 %mul, i32* %ns1, align 4, !dbg !10308
  %6 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !10309
  %mem_arena = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %6, i32 0, i32 1, !dbg !10310
  %7 = load %struct.MemArena*, %struct.MemArena** %mem_arena, align 8, !dbg !10310
  %8 = load i32, i32* %n, align 4, !dbg !10311
  %9 = load i32, i32* %ns1, align 4, !dbg !10312
  %10 = load %struct.VMesh*, %struct.VMesh** %vm0.addr, align 8, !dbg !10313
  %boundstart = getelementptr inbounds %struct.VMesh, %struct.VMesh* %10, i32 0, i32 1, !dbg !10314
  %11 = load %struct.BoundVert*, %struct.BoundVert** %boundstart, align 8, !dbg !10314
  %call = call %struct.VMesh* @new_adj_vmesh(%struct.MemArena* %7, i32 %8, i32 %9, %struct.BoundVert* %11), !dbg !10315
  store %struct.VMesh* %call, %struct.VMesh** %vm1, align 8, !dbg !10316
  store i32 0, i32* %i, align 4, !dbg !10317
  br label %for.cond, !dbg !10319

for.cond:                                         ; preds = %for.inc34, %entry
  %12 = load i32, i32* %i, align 4, !dbg !10320
  %13 = load i32, i32* %n, align 4, !dbg !10322
  %cmp = icmp slt i32 %12, %13, !dbg !10323
  br i1 %cmp, label %for.body, label %for.end36, !dbg !10324

for.body:                                         ; preds = %for.cond
  %14 = load %struct.VMesh*, %struct.VMesh** %vm1, align 8, !dbg !10325
  %15 = load i32, i32* %i, align 4, !dbg !10327
  %call1 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %14, i32 %15, i32 0, i32 0), !dbg !10328
  %co3 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call1, i32 0, i32 1, !dbg !10329
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %co3, i64 0, i64 0, !dbg !10328
  %16 = load %struct.VMesh*, %struct.VMesh** %vm0.addr, align 8, !dbg !10330
  %17 = load i32, i32* %i, align 4, !dbg !10331
  %call4 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %16, i32 %17, i32 0, i32 0), !dbg !10332
  %co5 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call4, i32 0, i32 1, !dbg !10333
  %arraydecay6 = getelementptr inbounds [3 x float], [3 x float]* %co5, i64 0, i64 0, !dbg !10332
  call void @copy_v3_v3(float* %arraydecay, float* %arraydecay6), !dbg !10334
  store i32 1, i32* %k, align 4, !dbg !10335
  br label %for.cond7, !dbg !10337

for.cond7:                                        ; preds = %for.inc, %for.body
  %18 = load i32, i32* %k, align 4, !dbg !10338
  %19 = load i32, i32* %ns0, align 4, !dbg !10340
  %cmp8 = icmp slt i32 %18, %19, !dbg !10341
  br i1 %cmp8, label %for.body9, label %for.end, !dbg !10342

for.body9:                                        ; preds = %for.cond7
  %arraydecay10 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !10343
  %20 = load %struct.VMesh*, %struct.VMesh** %vm0.addr, align 8, !dbg !10345
  %21 = load i32, i32* %i, align 4, !dbg !10346
  %22 = load i32, i32* %k, align 4, !dbg !10347
  %call11 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %20, i32 %21, i32 0, i32 %22), !dbg !10348
  %co12 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call11, i32 0, i32 1, !dbg !10349
  %arraydecay13 = getelementptr inbounds [3 x float], [3 x float]* %co12, i64 0, i64 0, !dbg !10348
  call void @copy_v3_v3(float* %arraydecay10, float* %arraydecay13), !dbg !10350
  %arraydecay14 = getelementptr inbounds [3 x float], [3 x float]* %co1, i64 0, i64 0, !dbg !10351
  %23 = load %struct.VMesh*, %struct.VMesh** %vm0.addr, align 8, !dbg !10352
  %24 = load i32, i32* %i, align 4, !dbg !10353
  %25 = load i32, i32* %k, align 4, !dbg !10354
  %sub = sub nsw i32 %25, 1, !dbg !10355
  %call15 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %23, i32 %24, i32 0, i32 %sub), !dbg !10356
  %co16 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call15, i32 0, i32 1, !dbg !10357
  %arraydecay17 = getelementptr inbounds [3 x float], [3 x float]* %co16, i64 0, i64 0, !dbg !10356
  call void @copy_v3_v3(float* %arraydecay14, float* %arraydecay17), !dbg !10358
  %arraydecay18 = getelementptr inbounds [3 x float], [3 x float]* %co2, i64 0, i64 0, !dbg !10359
  %26 = load %struct.VMesh*, %struct.VMesh** %vm0.addr, align 8, !dbg !10360
  %27 = load i32, i32* %i, align 4, !dbg !10361
  %28 = load i32, i32* %k, align 4, !dbg !10362
  %add = add nsw i32 %28, 1, !dbg !10363
  %call19 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %26, i32 %27, i32 0, i32 %add), !dbg !10364
  %co20 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call19, i32 0, i32 1, !dbg !10365
  %arraydecay21 = getelementptr inbounds [3 x float], [3 x float]* %co20, i64 0, i64 0, !dbg !10364
  call void @copy_v3_v3(float* %arraydecay18, float* %arraydecay21), !dbg !10366
  %arraydecay22 = getelementptr inbounds [3 x float], [3 x float]* %acc, i64 0, i64 0, !dbg !10367
  %arraydecay23 = getelementptr inbounds [3 x float], [3 x float]* %co1, i64 0, i64 0, !dbg !10368
  %arraydecay24 = getelementptr inbounds [3 x float], [3 x float]* %co2, i64 0, i64 0, !dbg !10369
  call void @add_v3_v3v3(float* %arraydecay22, float* %arraydecay23, float* %arraydecay24), !dbg !10370
  %arraydecay25 = getelementptr inbounds [3 x float], [3 x float]* %acc, i64 0, i64 0, !dbg !10371
  %arraydecay26 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !10372
  call void @madd_v3_v3fl(float* %arraydecay25, float* %arraydecay26, float -2.000000e+00), !dbg !10373
  %arraydecay27 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !10374
  %arraydecay28 = getelementptr inbounds [3 x float], [3 x float]* %acc, i64 0, i64 0, !dbg !10375
  call void @madd_v3_v3fl(float* %arraydecay27, float* %arraydecay28, float 0xBFC5555560000000), !dbg !10376
  %29 = load %struct.VMesh*, %struct.VMesh** %vm1, align 8, !dbg !10377
  %30 = load i32, i32* %i, align 4, !dbg !10378
  %31 = load i32, i32* %k, align 4, !dbg !10379
  %mul29 = mul nsw i32 2, %31, !dbg !10380
  %call30 = call %struct.NewVert* @mesh_vert_canon(%struct.VMesh* %29, i32 %30, i32 0, i32 %mul29), !dbg !10381
  %co31 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call30, i32 0, i32 1, !dbg !10382
  %arraydecay32 = getelementptr inbounds [3 x float], [3 x float]* %co31, i64 0, i64 0, !dbg !10381
  %arraydecay33 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !10383
  call void @copy_v3_v3(float* %arraydecay32, float* %arraydecay33), !dbg !10384
  br label %for.inc, !dbg !10385

for.inc:                                          ; preds = %for.body9
  %32 = load i32, i32* %k, align 4, !dbg !10386
  %inc = add nsw i32 %32, 1, !dbg !10386
  store i32 %inc, i32* %k, align 4, !dbg !10386
  br label %for.cond7, !dbg !10387, !llvm.loop !10388

for.end:                                          ; preds = %for.cond7
  br label %for.inc34, !dbg !10390

for.inc34:                                        ; preds = %for.end
  %33 = load i32, i32* %i, align 4, !dbg !10391
  %inc35 = add nsw i32 %33, 1, !dbg !10391
  store i32 %inc35, i32* %i, align 4, !dbg !10391
  br label %for.cond, !dbg !10392, !llvm.loop !10393

for.end36:                                        ; preds = %for.cond
  %34 = load %struct.VMesh*, %struct.VMesh** %vm1, align 8, !dbg !10395
  %boundstart37 = getelementptr inbounds %struct.VMesh, %struct.VMesh* %34, i32 0, i32 1, !dbg !10396
  %35 = load %struct.BoundVert*, %struct.BoundVert** %boundstart37, align 8, !dbg !10396
  store %struct.BoundVert* %35, %struct.BoundVert** %bndv, align 8, !dbg !10397
  store i32 0, i32* %i, align 4, !dbg !10398
  br label %for.cond38, !dbg !10400

for.cond38:                                       ; preds = %for.inc69, %for.end36
  %36 = load i32, i32* %i, align 4, !dbg !10401
  %37 = load i32, i32* %n, align 4, !dbg !10403
  %cmp39 = icmp slt i32 %36, %37, !dbg !10404
  br i1 %cmp39, label %for.body40, label %for.end71, !dbg !10405

for.body40:                                       ; preds = %for.cond38
  store i32 1, i32* %k, align 4, !dbg !10406
  br label %for.cond41, !dbg !10409

for.cond41:                                       ; preds = %for.inc66, %for.body40
  %38 = load i32, i32* %k, align 4, !dbg !10410
  %39 = load i32, i32* %ns1, align 4, !dbg !10412
  %cmp42 = icmp slt i32 %38, %39, !dbg !10413
  br i1 %cmp42, label %for.body43, label %for.end68, !dbg !10414

for.body43:                                       ; preds = %for.cond41
  %40 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !10415
  %41 = load %struct.BoundVert*, %struct.BoundVert** %bndv, align 8, !dbg !10417
  %profile = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %41, i32 0, i32 7, !dbg !10418
  %42 = load i32, i32* %k, align 4, !dbg !10419
  %43 = load i32, i32* %ns1, align 4, !dbg !10420
  %arraydecay44 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !10421
  call void @get_profile_point(%struct.BevelParams* %40, %struct.Profile* %profile, i32 %42, i32 %43, float* %arraydecay44), !dbg !10422
  %arraydecay45 = getelementptr inbounds [3 x float], [3 x float]* %co1, i64 0, i64 0, !dbg !10423
  %44 = load %struct.VMesh*, %struct.VMesh** %vm1, align 8, !dbg !10424
  %45 = load i32, i32* %i, align 4, !dbg !10425
  %46 = load i32, i32* %k, align 4, !dbg !10426
  %sub46 = sub nsw i32 %46, 1, !dbg !10427
  %call47 = call %struct.NewVert* @mesh_vert_canon(%struct.VMesh* %44, i32 %45, i32 0, i32 %sub46), !dbg !10428
  %co48 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call47, i32 0, i32 1, !dbg !10429
  %arraydecay49 = getelementptr inbounds [3 x float], [3 x float]* %co48, i64 0, i64 0, !dbg !10428
  call void @copy_v3_v3(float* %arraydecay45, float* %arraydecay49), !dbg !10430
  %arraydecay50 = getelementptr inbounds [3 x float], [3 x float]* %co2, i64 0, i64 0, !dbg !10431
  %47 = load %struct.VMesh*, %struct.VMesh** %vm1, align 8, !dbg !10432
  %48 = load i32, i32* %i, align 4, !dbg !10433
  %49 = load i32, i32* %k, align 4, !dbg !10434
  %add51 = add nsw i32 %49, 1, !dbg !10435
  %call52 = call %struct.NewVert* @mesh_vert_canon(%struct.VMesh* %47, i32 %48, i32 0, i32 %add51), !dbg !10436
  %co53 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call52, i32 0, i32 1, !dbg !10437
  %arraydecay54 = getelementptr inbounds [3 x float], [3 x float]* %co53, i64 0, i64 0, !dbg !10436
  call void @copy_v3_v3(float* %arraydecay50, float* %arraydecay54), !dbg !10438
  %arraydecay55 = getelementptr inbounds [3 x float], [3 x float]* %acc, i64 0, i64 0, !dbg !10439
  %arraydecay56 = getelementptr inbounds [3 x float], [3 x float]* %co1, i64 0, i64 0, !dbg !10440
  %arraydecay57 = getelementptr inbounds [3 x float], [3 x float]* %co2, i64 0, i64 0, !dbg !10441
  call void @add_v3_v3v3(float* %arraydecay55, float* %arraydecay56, float* %arraydecay57), !dbg !10442
  %arraydecay58 = getelementptr inbounds [3 x float], [3 x float]* %acc, i64 0, i64 0, !dbg !10443
  %arraydecay59 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !10444
  call void @madd_v3_v3fl(float* %arraydecay58, float* %arraydecay59, float -2.000000e+00), !dbg !10445
  %arraydecay60 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !10446
  %arraydecay61 = getelementptr inbounds [3 x float], [3 x float]* %acc, i64 0, i64 0, !dbg !10447
  call void @madd_v3_v3fl(float* %arraydecay60, float* %arraydecay61, float 0xBFC5555560000000), !dbg !10448
  %50 = load %struct.VMesh*, %struct.VMesh** %vm1, align 8, !dbg !10449
  %51 = load i32, i32* %i, align 4, !dbg !10450
  %52 = load i32, i32* %k, align 4, !dbg !10451
  %call62 = call %struct.NewVert* @mesh_vert_canon(%struct.VMesh* %50, i32 %51, i32 0, i32 %52), !dbg !10452
  %co63 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call62, i32 0, i32 1, !dbg !10453
  %arraydecay64 = getelementptr inbounds [3 x float], [3 x float]* %co63, i64 0, i64 0, !dbg !10452
  %arraydecay65 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !10454
  call void @copy_v3_v3(float* %arraydecay64, float* %arraydecay65), !dbg !10455
  br label %for.inc66, !dbg !10456

for.inc66:                                        ; preds = %for.body43
  %53 = load i32, i32* %k, align 4, !dbg !10457
  %add67 = add nsw i32 %53, 2, !dbg !10457
  store i32 %add67, i32* %k, align 4, !dbg !10457
  br label %for.cond41, !dbg !10458, !llvm.loop !10459

for.end68:                                        ; preds = %for.cond41
  %54 = load %struct.BoundVert*, %struct.BoundVert** %bndv, align 8, !dbg !10461
  %next = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %54, i32 0, i32 0, !dbg !10462
  %55 = load %struct.BoundVert*, %struct.BoundVert** %next, align 8, !dbg !10462
  store %struct.BoundVert* %55, %struct.BoundVert** %bndv, align 8, !dbg !10463
  br label %for.inc69, !dbg !10464

for.inc69:                                        ; preds = %for.end68
  %56 = load i32, i32* %i, align 4, !dbg !10465
  %inc70 = add nsw i32 %56, 1, !dbg !10465
  store i32 %inc70, i32* %i, align 4, !dbg !10465
  br label %for.cond38, !dbg !10466, !llvm.loop !10467

for.end71:                                        ; preds = %for.cond38
  %57 = load %struct.VMesh*, %struct.VMesh** %vm1, align 8, !dbg !10469
  call void @vmesh_copy_equiv_verts(%struct.VMesh* %57), !dbg !10470
  store i32 0, i32* %i, align 4, !dbg !10471
  br label %for.cond72, !dbg !10473

for.cond72:                                       ; preds = %for.inc88, %for.end71
  %58 = load i32, i32* %i, align 4, !dbg !10474
  %59 = load i32, i32* %n, align 4, !dbg !10476
  %cmp73 = icmp slt i32 %58, %59, !dbg !10477
  br i1 %cmp73, label %for.body74, label %for.end90, !dbg !10478

for.body74:                                       ; preds = %for.cond72
  store i32 0, i32* %k, align 4, !dbg !10479
  br label %for.cond75, !dbg !10482

for.cond75:                                       ; preds = %for.inc85, %for.body74
  %60 = load i32, i32* %k, align 4, !dbg !10483
  %61 = load i32, i32* %ns0, align 4, !dbg !10485
  %cmp76 = icmp slt i32 %60, %61, !dbg !10486
  br i1 %cmp76, label %for.body77, label %for.end87, !dbg !10487

for.body77:                                       ; preds = %for.cond75
  %62 = load %struct.VMesh*, %struct.VMesh** %vm0.addr, align 8, !dbg !10488
  %63 = load i32, i32* %i, align 4, !dbg !10490
  %64 = load i32, i32* %k, align 4, !dbg !10491
  %call78 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %62, i32 %63, i32 0, i32 %64), !dbg !10492
  %co79 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call78, i32 0, i32 1, !dbg !10493
  %arraydecay80 = getelementptr inbounds [3 x float], [3 x float]* %co79, i64 0, i64 0, !dbg !10492
  %65 = load %struct.VMesh*, %struct.VMesh** %vm1, align 8, !dbg !10494
  %66 = load i32, i32* %i, align 4, !dbg !10495
  %67 = load i32, i32* %k, align 4, !dbg !10496
  %mul81 = mul nsw i32 2, %67, !dbg !10497
  %call82 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %65, i32 %66, i32 0, i32 %mul81), !dbg !10498
  %co83 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call82, i32 0, i32 1, !dbg !10499
  %arraydecay84 = getelementptr inbounds [3 x float], [3 x float]* %co83, i64 0, i64 0, !dbg !10498
  call void @copy_v3_v3(float* %arraydecay80, float* %arraydecay84), !dbg !10500
  br label %for.inc85, !dbg !10501

for.inc85:                                        ; preds = %for.body77
  %68 = load i32, i32* %k, align 4, !dbg !10502
  %inc86 = add nsw i32 %68, 1, !dbg !10502
  store i32 %inc86, i32* %k, align 4, !dbg !10502
  br label %for.cond75, !dbg !10503, !llvm.loop !10504

for.end87:                                        ; preds = %for.cond75
  br label %for.inc88, !dbg !10506

for.inc88:                                        ; preds = %for.end87
  %69 = load i32, i32* %i, align 4, !dbg !10507
  %inc89 = add nsw i32 %69, 1, !dbg !10507
  store i32 %inc89, i32* %i, align 4, !dbg !10507
  br label %for.cond72, !dbg !10508, !llvm.loop !10509

for.end90:                                        ; preds = %for.cond72
  %70 = load %struct.VMesh*, %struct.VMesh** %vm0.addr, align 8, !dbg !10511
  call void @vmesh_copy_equiv_verts(%struct.VMesh* %70), !dbg !10512
  store i32 0, i32* %i, align 4, !dbg !10513
  br label %for.cond91, !dbg !10515

for.cond91:                                       ; preds = %for.inc123, %for.end90
  %71 = load i32, i32* %i, align 4, !dbg !10516
  %72 = load i32, i32* %n, align 4, !dbg !10518
  %cmp92 = icmp slt i32 %71, %72, !dbg !10519
  br i1 %cmp92, label %for.body93, label %for.end125, !dbg !10520

for.body93:                                       ; preds = %for.cond91
  store i32 0, i32* %j, align 4, !dbg !10521
  br label %for.cond94, !dbg !10524

for.cond94:                                       ; preds = %for.inc120, %for.body93
  %73 = load i32, i32* %j, align 4, !dbg !10525
  %74 = load i32, i32* %ns20, align 4, !dbg !10527
  %cmp95 = icmp slt i32 %73, %74, !dbg !10528
  br i1 %cmp95, label %for.body96, label %for.end122, !dbg !10529

for.body96:                                       ; preds = %for.cond94
  store i32 0, i32* %k, align 4, !dbg !10530
  br label %for.cond97, !dbg !10533

for.cond97:                                       ; preds = %for.inc117, %for.body96
  %75 = load i32, i32* %k, align 4, !dbg !10534
  %76 = load i32, i32* %ns20, align 4, !dbg !10536
  %cmp98 = icmp slt i32 %75, %76, !dbg !10537
  br i1 %cmp98, label %for.body99, label %for.end119, !dbg !10538

for.body99:                                       ; preds = %for.cond97
  %arraydecay100 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !10539
  %77 = load %struct.VMesh*, %struct.VMesh** %vm0.addr, align 8, !dbg !10541
  %78 = load i32, i32* %i, align 4, !dbg !10542
  %79 = load i32, i32* %j, align 4, !dbg !10543
  %80 = load i32, i32* %k, align 4, !dbg !10544
  %call101 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %77, i32 %78, i32 %79, i32 %80), !dbg !10545
  %81 = load %struct.VMesh*, %struct.VMesh** %vm0.addr, align 8, !dbg !10546
  %82 = load i32, i32* %i, align 4, !dbg !10547
  %83 = load i32, i32* %j, align 4, !dbg !10548
  %84 = load i32, i32* %k, align 4, !dbg !10549
  %add102 = add nsw i32 %84, 1, !dbg !10550
  %call103 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %81, i32 %82, i32 %83, i32 %add102), !dbg !10551
  %85 = load %struct.VMesh*, %struct.VMesh** %vm0.addr, align 8, !dbg !10552
  %86 = load i32, i32* %i, align 4, !dbg !10553
  %87 = load i32, i32* %j, align 4, !dbg !10554
  %add104 = add nsw i32 %87, 1, !dbg !10555
  %88 = load i32, i32* %k, align 4, !dbg !10556
  %call105 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %85, i32 %86, i32 %add104, i32 %88), !dbg !10557
  %89 = load %struct.VMesh*, %struct.VMesh** %vm0.addr, align 8, !dbg !10558
  %90 = load i32, i32* %i, align 4, !dbg !10559
  %91 = load i32, i32* %j, align 4, !dbg !10560
  %add106 = add nsw i32 %91, 1, !dbg !10561
  %92 = load i32, i32* %k, align 4, !dbg !10562
  %add107 = add nsw i32 %92, 1, !dbg !10563
  %call108 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %89, i32 %90, i32 %add106, i32 %add107), !dbg !10564
  call void @avg4(float* %arraydecay100, %struct.NewVert* %call101, %struct.NewVert* %call103, %struct.NewVert* %call105, %struct.NewVert* %call108), !dbg !10565
  %93 = load %struct.VMesh*, %struct.VMesh** %vm1, align 8, !dbg !10566
  %94 = load i32, i32* %i, align 4, !dbg !10567
  %95 = load i32, i32* %j, align 4, !dbg !10568
  %mul109 = mul nsw i32 2, %95, !dbg !10569
  %add110 = add nsw i32 %mul109, 1, !dbg !10570
  %96 = load i32, i32* %k, align 4, !dbg !10571
  %mul111 = mul nsw i32 2, %96, !dbg !10572
  %add112 = add nsw i32 %mul111, 1, !dbg !10573
  %call113 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %93, i32 %94, i32 %add110, i32 %add112), !dbg !10574
  %co114 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call113, i32 0, i32 1, !dbg !10575
  %arraydecay115 = getelementptr inbounds [3 x float], [3 x float]* %co114, i64 0, i64 0, !dbg !10574
  %arraydecay116 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !10576
  call void @copy_v3_v3(float* %arraydecay115, float* %arraydecay116), !dbg !10577
  br label %for.inc117, !dbg !10578

for.inc117:                                       ; preds = %for.body99
  %97 = load i32, i32* %k, align 4, !dbg !10579
  %inc118 = add nsw i32 %97, 1, !dbg !10579
  store i32 %inc118, i32* %k, align 4, !dbg !10579
  br label %for.cond97, !dbg !10580, !llvm.loop !10581

for.end119:                                       ; preds = %for.cond97
  br label %for.inc120, !dbg !10583

for.inc120:                                       ; preds = %for.end119
  %98 = load i32, i32* %j, align 4, !dbg !10584
  %inc121 = add nsw i32 %98, 1, !dbg !10584
  store i32 %inc121, i32* %j, align 4, !dbg !10584
  br label %for.cond94, !dbg !10585, !llvm.loop !10586

for.end122:                                       ; preds = %for.cond94
  br label %for.inc123, !dbg !10588

for.inc123:                                       ; preds = %for.end122
  %99 = load i32, i32* %i, align 4, !dbg !10589
  %inc124 = add nsw i32 %99, 1, !dbg !10589
  store i32 %inc124, i32* %i, align 4, !dbg !10589
  br label %for.cond91, !dbg !10590, !llvm.loop !10591

for.end125:                                       ; preds = %for.cond91
  store i32 0, i32* %i, align 4, !dbg !10593
  br label %for.cond126, !dbg !10595

for.cond126:                                      ; preds = %for.inc162, %for.end125
  %100 = load i32, i32* %i, align 4, !dbg !10596
  %101 = load i32, i32* %n, align 4, !dbg !10598
  %cmp127 = icmp slt i32 %100, %101, !dbg !10599
  br i1 %cmp127, label %for.body128, label %for.end164, !dbg !10600

for.body128:                                      ; preds = %for.cond126
  store i32 0, i32* %j, align 4, !dbg !10601
  br label %for.cond129, !dbg !10604

for.cond129:                                      ; preds = %for.inc159, %for.body128
  %102 = load i32, i32* %j, align 4, !dbg !10605
  %103 = load i32, i32* %ns20, align 4, !dbg !10607
  %cmp130 = icmp slt i32 %102, %103, !dbg !10608
  br i1 %cmp130, label %for.body131, label %for.end161, !dbg !10609

for.body131:                                      ; preds = %for.cond129
  store i32 1, i32* %k, align 4, !dbg !10610
  br label %for.cond132, !dbg !10613

for.cond132:                                      ; preds = %for.inc156, %for.body131
  %104 = load i32, i32* %k, align 4, !dbg !10614
  %105 = load i32, i32* %ns20, align 4, !dbg !10616
  %cmp133 = icmp sle i32 %104, %105, !dbg !10617
  br i1 %cmp133, label %for.body134, label %for.end158, !dbg !10618

for.body134:                                      ; preds = %for.cond132
  %arraydecay135 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !10619
  %106 = load %struct.VMesh*, %struct.VMesh** %vm0.addr, align 8, !dbg !10621
  %107 = load i32, i32* %i, align 4, !dbg !10622
  %108 = load i32, i32* %j, align 4, !dbg !10623
  %109 = load i32, i32* %k, align 4, !dbg !10624
  %call136 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %106, i32 %107, i32 %108, i32 %109), !dbg !10625
  %110 = load %struct.VMesh*, %struct.VMesh** %vm0.addr, align 8, !dbg !10626
  %111 = load i32, i32* %i, align 4, !dbg !10627
  %112 = load i32, i32* %j, align 4, !dbg !10628
  %add137 = add nsw i32 %112, 1, !dbg !10629
  %113 = load i32, i32* %k, align 4, !dbg !10630
  %call138 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %110, i32 %111, i32 %add137, i32 %113), !dbg !10631
  %114 = load %struct.VMesh*, %struct.VMesh** %vm1, align 8, !dbg !10632
  %115 = load i32, i32* %i, align 4, !dbg !10633
  %116 = load i32, i32* %j, align 4, !dbg !10634
  %mul139 = mul nsw i32 2, %116, !dbg !10635
  %add140 = add nsw i32 %mul139, 1, !dbg !10636
  %117 = load i32, i32* %k, align 4, !dbg !10637
  %mul141 = mul nsw i32 2, %117, !dbg !10638
  %sub142 = sub nsw i32 %mul141, 1, !dbg !10639
  %call143 = call %struct.NewVert* @mesh_vert_canon(%struct.VMesh* %114, i32 %115, i32 %add140, i32 %sub142), !dbg !10640
  %118 = load %struct.VMesh*, %struct.VMesh** %vm1, align 8, !dbg !10641
  %119 = load i32, i32* %i, align 4, !dbg !10642
  %120 = load i32, i32* %j, align 4, !dbg !10643
  %mul144 = mul nsw i32 2, %120, !dbg !10644
  %add145 = add nsw i32 %mul144, 1, !dbg !10645
  %121 = load i32, i32* %k, align 4, !dbg !10646
  %mul146 = mul nsw i32 2, %121, !dbg !10647
  %add147 = add nsw i32 %mul146, 1, !dbg !10648
  %call148 = call %struct.NewVert* @mesh_vert_canon(%struct.VMesh* %118, i32 %119, i32 %add145, i32 %add147), !dbg !10649
  call void @avg4(float* %arraydecay135, %struct.NewVert* %call136, %struct.NewVert* %call138, %struct.NewVert* %call143, %struct.NewVert* %call148), !dbg !10650
  %122 = load %struct.VMesh*, %struct.VMesh** %vm1, align 8, !dbg !10651
  %123 = load i32, i32* %i, align 4, !dbg !10652
  %124 = load i32, i32* %j, align 4, !dbg !10653
  %mul149 = mul nsw i32 2, %124, !dbg !10654
  %add150 = add nsw i32 %mul149, 1, !dbg !10655
  %125 = load i32, i32* %k, align 4, !dbg !10656
  %mul151 = mul nsw i32 2, %125, !dbg !10657
  %call152 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %122, i32 %123, i32 %add150, i32 %mul151), !dbg !10658
  %co153 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call152, i32 0, i32 1, !dbg !10659
  %arraydecay154 = getelementptr inbounds [3 x float], [3 x float]* %co153, i64 0, i64 0, !dbg !10658
  %arraydecay155 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !10660
  call void @copy_v3_v3(float* %arraydecay154, float* %arraydecay155), !dbg !10661
  br label %for.inc156, !dbg !10662

for.inc156:                                       ; preds = %for.body134
  %126 = load i32, i32* %k, align 4, !dbg !10663
  %inc157 = add nsw i32 %126, 1, !dbg !10663
  store i32 %inc157, i32* %k, align 4, !dbg !10663
  br label %for.cond132, !dbg !10664, !llvm.loop !10665

for.end158:                                       ; preds = %for.cond132
  br label %for.inc159, !dbg !10667

for.inc159:                                       ; preds = %for.end158
  %127 = load i32, i32* %j, align 4, !dbg !10668
  %inc160 = add nsw i32 %127, 1, !dbg !10668
  store i32 %inc160, i32* %j, align 4, !dbg !10668
  br label %for.cond129, !dbg !10669, !llvm.loop !10670

for.end161:                                       ; preds = %for.cond129
  br label %for.inc162, !dbg !10672

for.inc162:                                       ; preds = %for.end161
  %128 = load i32, i32* %i, align 4, !dbg !10673
  %inc163 = add nsw i32 %128, 1, !dbg !10673
  store i32 %inc163, i32* %i, align 4, !dbg !10673
  br label %for.cond126, !dbg !10674, !llvm.loop !10675

for.end164:                                       ; preds = %for.cond126
  store i32 0, i32* %i, align 4, !dbg !10677
  br label %for.cond165, !dbg !10679

for.cond165:                                      ; preds = %for.inc201, %for.end164
  %129 = load i32, i32* %i, align 4, !dbg !10680
  %130 = load i32, i32* %n, align 4, !dbg !10682
  %cmp166 = icmp slt i32 %129, %130, !dbg !10683
  br i1 %cmp166, label %for.body167, label %for.end203, !dbg !10684

for.body167:                                      ; preds = %for.cond165
  store i32 1, i32* %j, align 4, !dbg !10685
  br label %for.cond168, !dbg !10688

for.cond168:                                      ; preds = %for.inc198, %for.body167
  %131 = load i32, i32* %j, align 4, !dbg !10689
  %132 = load i32, i32* %ns20, align 4, !dbg !10691
  %cmp169 = icmp slt i32 %131, %132, !dbg !10692
  br i1 %cmp169, label %for.body170, label %for.end200, !dbg !10693

for.body170:                                      ; preds = %for.cond168
  store i32 0, i32* %k, align 4, !dbg !10694
  br label %for.cond171, !dbg !10697

for.cond171:                                      ; preds = %for.inc195, %for.body170
  %133 = load i32, i32* %k, align 4, !dbg !10698
  %134 = load i32, i32* %ns20, align 4, !dbg !10700
  %cmp172 = icmp slt i32 %133, %134, !dbg !10701
  br i1 %cmp172, label %for.body173, label %for.end197, !dbg !10702

for.body173:                                      ; preds = %for.cond171
  %arraydecay174 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !10703
  %135 = load %struct.VMesh*, %struct.VMesh** %vm0.addr, align 8, !dbg !10705
  %136 = load i32, i32* %i, align 4, !dbg !10706
  %137 = load i32, i32* %j, align 4, !dbg !10707
  %138 = load i32, i32* %k, align 4, !dbg !10708
  %call175 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %135, i32 %136, i32 %137, i32 %138), !dbg !10709
  %139 = load %struct.VMesh*, %struct.VMesh** %vm0.addr, align 8, !dbg !10710
  %140 = load i32, i32* %i, align 4, !dbg !10711
  %141 = load i32, i32* %j, align 4, !dbg !10712
  %142 = load i32, i32* %k, align 4, !dbg !10713
  %add176 = add nsw i32 %142, 1, !dbg !10714
  %call177 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %139, i32 %140, i32 %141, i32 %add176), !dbg !10715
  %143 = load %struct.VMesh*, %struct.VMesh** %vm1, align 8, !dbg !10716
  %144 = load i32, i32* %i, align 4, !dbg !10717
  %145 = load i32, i32* %j, align 4, !dbg !10718
  %mul178 = mul nsw i32 2, %145, !dbg !10719
  %sub179 = sub nsw i32 %mul178, 1, !dbg !10720
  %146 = load i32, i32* %k, align 4, !dbg !10721
  %mul180 = mul nsw i32 2, %146, !dbg !10722
  %add181 = add nsw i32 %mul180, 1, !dbg !10723
  %call182 = call %struct.NewVert* @mesh_vert_canon(%struct.VMesh* %143, i32 %144, i32 %sub179, i32 %add181), !dbg !10724
  %147 = load %struct.VMesh*, %struct.VMesh** %vm1, align 8, !dbg !10725
  %148 = load i32, i32* %i, align 4, !dbg !10726
  %149 = load i32, i32* %j, align 4, !dbg !10727
  %mul183 = mul nsw i32 2, %149, !dbg !10728
  %add184 = add nsw i32 %mul183, 1, !dbg !10729
  %150 = load i32, i32* %k, align 4, !dbg !10730
  %mul185 = mul nsw i32 2, %150, !dbg !10731
  %add186 = add nsw i32 %mul185, 1, !dbg !10732
  %call187 = call %struct.NewVert* @mesh_vert_canon(%struct.VMesh* %147, i32 %148, i32 %add184, i32 %add186), !dbg !10733
  call void @avg4(float* %arraydecay174, %struct.NewVert* %call175, %struct.NewVert* %call177, %struct.NewVert* %call182, %struct.NewVert* %call187), !dbg !10734
  %151 = load %struct.VMesh*, %struct.VMesh** %vm1, align 8, !dbg !10735
  %152 = load i32, i32* %i, align 4, !dbg !10736
  %153 = load i32, i32* %j, align 4, !dbg !10737
  %mul188 = mul nsw i32 2, %153, !dbg !10738
  %154 = load i32, i32* %k, align 4, !dbg !10739
  %mul189 = mul nsw i32 2, %154, !dbg !10740
  %add190 = add nsw i32 %mul189, 1, !dbg !10741
  %call191 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %151, i32 %152, i32 %mul188, i32 %add190), !dbg !10742
  %co192 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call191, i32 0, i32 1, !dbg !10743
  %arraydecay193 = getelementptr inbounds [3 x float], [3 x float]* %co192, i64 0, i64 0, !dbg !10742
  %arraydecay194 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !10744
  call void @copy_v3_v3(float* %arraydecay193, float* %arraydecay194), !dbg !10745
  br label %for.inc195, !dbg !10746

for.inc195:                                       ; preds = %for.body173
  %155 = load i32, i32* %k, align 4, !dbg !10747
  %inc196 = add nsw i32 %155, 1, !dbg !10747
  store i32 %inc196, i32* %k, align 4, !dbg !10747
  br label %for.cond171, !dbg !10748, !llvm.loop !10749

for.end197:                                       ; preds = %for.cond171
  br label %for.inc198, !dbg !10751

for.inc198:                                       ; preds = %for.end197
  %156 = load i32, i32* %j, align 4, !dbg !10752
  %inc199 = add nsw i32 %156, 1, !dbg !10752
  store i32 %inc199, i32* %j, align 4, !dbg !10752
  br label %for.cond168, !dbg !10753, !llvm.loop !10754

for.end200:                                       ; preds = %for.cond168
  br label %for.inc201, !dbg !10756

for.inc201:                                       ; preds = %for.end200
  %157 = load i32, i32* %i, align 4, !dbg !10757
  %inc202 = add nsw i32 %157, 1, !dbg !10757
  store i32 %inc202, i32* %i, align 4, !dbg !10757
  br label %for.cond165, !dbg !10758, !llvm.loop !10759

for.end203:                                       ; preds = %for.cond165
  store float 2.500000e-01, float* %gamma, align 4, !dbg !10761
  %158 = load float, float* %gamma, align 4, !dbg !10762
  %fneg = fneg float %158, !dbg !10763
  store float %fneg, float* %beta, align 4, !dbg !10764
  store i32 0, i32* %i, align 4, !dbg !10765
  br label %for.cond204, !dbg !10767

for.cond204:                                      ; preds = %for.inc271, %for.end203
  %159 = load i32, i32* %i, align 4, !dbg !10768
  %160 = load i32, i32* %n, align 4, !dbg !10770
  %cmp205 = icmp slt i32 %159, %160, !dbg !10771
  br i1 %cmp205, label %for.body206, label %for.end273, !dbg !10772

for.body206:                                      ; preds = %for.cond204
  store i32 1, i32* %j, align 4, !dbg !10773
  br label %for.cond207, !dbg !10776

for.cond207:                                      ; preds = %for.inc268, %for.body206
  %161 = load i32, i32* %j, align 4, !dbg !10777
  %162 = load i32, i32* %ns20, align 4, !dbg !10779
  %cmp208 = icmp slt i32 %161, %162, !dbg !10780
  br i1 %cmp208, label %for.body209, label %for.end270, !dbg !10781

for.body209:                                      ; preds = %for.cond207
  store i32 1, i32* %k, align 4, !dbg !10782
  br label %for.cond210, !dbg !10785

for.cond210:                                      ; preds = %for.inc265, %for.body209
  %163 = load i32, i32* %k, align 4, !dbg !10786
  %164 = load i32, i32* %ns20, align 4, !dbg !10788
  %cmp211 = icmp sle i32 %163, %164, !dbg !10789
  br i1 %cmp211, label %for.body212, label %for.end267, !dbg !10790

for.body212:                                      ; preds = %for.cond210
  %arraydecay213 = getelementptr inbounds [3 x float], [3 x float]* %co1, i64 0, i64 0, !dbg !10791
  %165 = load %struct.VMesh*, %struct.VMesh** %vm1, align 8, !dbg !10793
  %166 = load i32, i32* %i, align 4, !dbg !10794
  %167 = load i32, i32* %j, align 4, !dbg !10795
  %mul214 = mul nsw i32 2, %167, !dbg !10796
  %168 = load i32, i32* %k, align 4, !dbg !10797
  %mul215 = mul nsw i32 2, %168, !dbg !10798
  %sub216 = sub nsw i32 %mul215, 1, !dbg !10799
  %call217 = call %struct.NewVert* @mesh_vert_canon(%struct.VMesh* %165, i32 %166, i32 %mul214, i32 %sub216), !dbg !10800
  %169 = load %struct.VMesh*, %struct.VMesh** %vm1, align 8, !dbg !10801
  %170 = load i32, i32* %i, align 4, !dbg !10802
  %171 = load i32, i32* %j, align 4, !dbg !10803
  %mul218 = mul nsw i32 2, %171, !dbg !10804
  %172 = load i32, i32* %k, align 4, !dbg !10805
  %mul219 = mul nsw i32 2, %172, !dbg !10806
  %add220 = add nsw i32 %mul219, 1, !dbg !10807
  %call221 = call %struct.NewVert* @mesh_vert_canon(%struct.VMesh* %169, i32 %170, i32 %mul218, i32 %add220), !dbg !10808
  %173 = load %struct.VMesh*, %struct.VMesh** %vm1, align 8, !dbg !10809
  %174 = load i32, i32* %i, align 4, !dbg !10810
  %175 = load i32, i32* %j, align 4, !dbg !10811
  %mul222 = mul nsw i32 2, %175, !dbg !10812
  %sub223 = sub nsw i32 %mul222, 1, !dbg !10813
  %176 = load i32, i32* %k, align 4, !dbg !10814
  %mul224 = mul nsw i32 2, %176, !dbg !10815
  %call225 = call %struct.NewVert* @mesh_vert_canon(%struct.VMesh* %173, i32 %174, i32 %sub223, i32 %mul224), !dbg !10816
  %177 = load %struct.VMesh*, %struct.VMesh** %vm1, align 8, !dbg !10817
  %178 = load i32, i32* %i, align 4, !dbg !10818
  %179 = load i32, i32* %j, align 4, !dbg !10819
  %mul226 = mul nsw i32 2, %179, !dbg !10820
  %add227 = add nsw i32 %mul226, 1, !dbg !10821
  %180 = load i32, i32* %k, align 4, !dbg !10822
  %mul228 = mul nsw i32 2, %180, !dbg !10823
  %call229 = call %struct.NewVert* @mesh_vert_canon(%struct.VMesh* %177, i32 %178, i32 %add227, i32 %mul228), !dbg !10824
  call void @avg4(float* %arraydecay213, %struct.NewVert* %call217, %struct.NewVert* %call221, %struct.NewVert* %call225, %struct.NewVert* %call229), !dbg !10825
  %arraydecay230 = getelementptr inbounds [3 x float], [3 x float]* %co2, i64 0, i64 0, !dbg !10826
  %181 = load %struct.VMesh*, %struct.VMesh** %vm1, align 8, !dbg !10827
  %182 = load i32, i32* %i, align 4, !dbg !10828
  %183 = load i32, i32* %j, align 4, !dbg !10829
  %mul231 = mul nsw i32 2, %183, !dbg !10830
  %sub232 = sub nsw i32 %mul231, 1, !dbg !10831
  %184 = load i32, i32* %k, align 4, !dbg !10832
  %mul233 = mul nsw i32 2, %184, !dbg !10833
  %sub234 = sub nsw i32 %mul233, 1, !dbg !10834
  %call235 = call %struct.NewVert* @mesh_vert_canon(%struct.VMesh* %181, i32 %182, i32 %sub232, i32 %sub234), !dbg !10835
  %185 = load %struct.VMesh*, %struct.VMesh** %vm1, align 8, !dbg !10836
  %186 = load i32, i32* %i, align 4, !dbg !10837
  %187 = load i32, i32* %j, align 4, !dbg !10838
  %mul236 = mul nsw i32 2, %187, !dbg !10839
  %add237 = add nsw i32 %mul236, 1, !dbg !10840
  %188 = load i32, i32* %k, align 4, !dbg !10841
  %mul238 = mul nsw i32 2, %188, !dbg !10842
  %sub239 = sub nsw i32 %mul238, 1, !dbg !10843
  %call240 = call %struct.NewVert* @mesh_vert_canon(%struct.VMesh* %185, i32 %186, i32 %add237, i32 %sub239), !dbg !10844
  %189 = load %struct.VMesh*, %struct.VMesh** %vm1, align 8, !dbg !10845
  %190 = load i32, i32* %i, align 4, !dbg !10846
  %191 = load i32, i32* %j, align 4, !dbg !10847
  %mul241 = mul nsw i32 2, %191, !dbg !10848
  %sub242 = sub nsw i32 %mul241, 1, !dbg !10849
  %192 = load i32, i32* %k, align 4, !dbg !10850
  %mul243 = mul nsw i32 2, %192, !dbg !10851
  %add244 = add nsw i32 %mul243, 1, !dbg !10852
  %call245 = call %struct.NewVert* @mesh_vert_canon(%struct.VMesh* %189, i32 %190, i32 %sub242, i32 %add244), !dbg !10853
  %193 = load %struct.VMesh*, %struct.VMesh** %vm1, align 8, !dbg !10854
  %194 = load i32, i32* %i, align 4, !dbg !10855
  %195 = load i32, i32* %j, align 4, !dbg !10856
  %mul246 = mul nsw i32 2, %195, !dbg !10857
  %add247 = add nsw i32 %mul246, 1, !dbg !10858
  %196 = load i32, i32* %k, align 4, !dbg !10859
  %mul248 = mul nsw i32 2, %196, !dbg !10860
  %add249 = add nsw i32 %mul248, 1, !dbg !10861
  %call250 = call %struct.NewVert* @mesh_vert_canon(%struct.VMesh* %193, i32 %194, i32 %add247, i32 %add249), !dbg !10862
  call void @avg4(float* %arraydecay230, %struct.NewVert* %call235, %struct.NewVert* %call240, %struct.NewVert* %call245, %struct.NewVert* %call250), !dbg !10863
  %arraydecay251 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !10864
  %arraydecay252 = getelementptr inbounds [3 x float], [3 x float]* %co1, i64 0, i64 0, !dbg !10865
  call void @copy_v3_v3(float* %arraydecay251, float* %arraydecay252), !dbg !10866
  %arraydecay253 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !10867
  %arraydecay254 = getelementptr inbounds [3 x float], [3 x float]* %co2, i64 0, i64 0, !dbg !10868
  %197 = load float, float* %beta, align 4, !dbg !10869
  call void @madd_v3_v3fl(float* %arraydecay253, float* %arraydecay254, float %197), !dbg !10870
  %arraydecay255 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !10871
  %198 = load %struct.VMesh*, %struct.VMesh** %vm0.addr, align 8, !dbg !10872
  %199 = load i32, i32* %i, align 4, !dbg !10873
  %200 = load i32, i32* %j, align 4, !dbg !10874
  %201 = load i32, i32* %k, align 4, !dbg !10875
  %call256 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %198, i32 %199, i32 %200, i32 %201), !dbg !10876
  %co257 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call256, i32 0, i32 1, !dbg !10877
  %arraydecay258 = getelementptr inbounds [3 x float], [3 x float]* %co257, i64 0, i64 0, !dbg !10876
  %202 = load float, float* %gamma, align 4, !dbg !10878
  call void @madd_v3_v3fl(float* %arraydecay255, float* %arraydecay258, float %202), !dbg !10879
  %203 = load %struct.VMesh*, %struct.VMesh** %vm1, align 8, !dbg !10880
  %204 = load i32, i32* %i, align 4, !dbg !10881
  %205 = load i32, i32* %j, align 4, !dbg !10882
  %mul259 = mul nsw i32 2, %205, !dbg !10883
  %206 = load i32, i32* %k, align 4, !dbg !10884
  %mul260 = mul nsw i32 2, %206, !dbg !10885
  %call261 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %203, i32 %204, i32 %mul259, i32 %mul260), !dbg !10886
  %co262 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call261, i32 0, i32 1, !dbg !10887
  %arraydecay263 = getelementptr inbounds [3 x float], [3 x float]* %co262, i64 0, i64 0, !dbg !10886
  %arraydecay264 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !10888
  call void @copy_v3_v3(float* %arraydecay263, float* %arraydecay264), !dbg !10889
  br label %for.inc265, !dbg !10890

for.inc265:                                       ; preds = %for.body212
  %207 = load i32, i32* %k, align 4, !dbg !10891
  %inc266 = add nsw i32 %207, 1, !dbg !10891
  store i32 %inc266, i32* %k, align 4, !dbg !10891
  br label %for.cond210, !dbg !10892, !llvm.loop !10893

for.end267:                                       ; preds = %for.cond210
  br label %for.inc268, !dbg !10895

for.inc268:                                       ; preds = %for.end267
  %208 = load i32, i32* %j, align 4, !dbg !10896
  %inc269 = add nsw i32 %208, 1, !dbg !10896
  store i32 %inc269, i32* %j, align 4, !dbg !10896
  br label %for.cond207, !dbg !10897, !llvm.loop !10898

for.end270:                                       ; preds = %for.cond207
  br label %for.inc271, !dbg !10900

for.inc271:                                       ; preds = %for.end270
  %209 = load i32, i32* %i, align 4, !dbg !10901
  %inc272 = add nsw i32 %209, 1, !dbg !10901
  store i32 %inc272, i32* %i, align 4, !dbg !10901
  br label %for.cond204, !dbg !10902, !llvm.loop !10903

for.end273:                                       ; preds = %for.cond204
  %210 = load %struct.VMesh*, %struct.VMesh** %vm1, align 8, !dbg !10905
  call void @vmesh_copy_equiv_verts(%struct.VMesh* %210), !dbg !10906
  %211 = load i32, i32* %n, align 4, !dbg !10907
  %call274 = call float @sabin_gamma(i32 %211), !dbg !10908
  store float %call274, float* %gamma, align 4, !dbg !10909
  %212 = load float, float* %gamma, align 4, !dbg !10910
  %fneg275 = fneg float %212, !dbg !10911
  store float %fneg275, float* %beta, align 4, !dbg !10912
  %arraydecay276 = getelementptr inbounds [3 x float], [3 x float]* %co1, i64 0, i64 0, !dbg !10913
  call void @zero_v3(float* %arraydecay276), !dbg !10914
  %arraydecay277 = getelementptr inbounds [3 x float], [3 x float]* %co2, i64 0, i64 0, !dbg !10915
  call void @zero_v3(float* %arraydecay277), !dbg !10916
  store i32 0, i32* %i, align 4, !dbg !10917
  br label %for.cond278, !dbg !10919

for.cond278:                                      ; preds = %for.inc298, %for.end273
  %213 = load i32, i32* %i, align 4, !dbg !10920
  %214 = load i32, i32* %n, align 4, !dbg !10922
  %cmp279 = icmp slt i32 %213, %214, !dbg !10923
  br i1 %cmp279, label %for.body280, label %for.end300, !dbg !10924

for.body280:                                      ; preds = %for.cond278
  %arraydecay281 = getelementptr inbounds [3 x float], [3 x float]* %co1, i64 0, i64 0, !dbg !10925
  %215 = load %struct.VMesh*, %struct.VMesh** %vm1, align 8, !dbg !10927
  %216 = load i32, i32* %i, align 4, !dbg !10928
  %217 = load i32, i32* %ns0, align 4, !dbg !10929
  %218 = load i32, i32* %ns0, align 4, !dbg !10930
  %sub282 = sub nsw i32 %218, 1, !dbg !10931
  %call283 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %215, i32 %216, i32 %217, i32 %sub282), !dbg !10932
  %co284 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call283, i32 0, i32 1, !dbg !10933
  %arraydecay285 = getelementptr inbounds [3 x float], [3 x float]* %co284, i64 0, i64 0, !dbg !10932
  call void @add_v3_v3(float* %arraydecay281, float* %arraydecay285), !dbg !10934
  %arraydecay286 = getelementptr inbounds [3 x float], [3 x float]* %co2, i64 0, i64 0, !dbg !10935
  %219 = load %struct.VMesh*, %struct.VMesh** %vm1, align 8, !dbg !10936
  %220 = load i32, i32* %i, align 4, !dbg !10937
  %221 = load i32, i32* %ns0, align 4, !dbg !10938
  %sub287 = sub nsw i32 %221, 1, !dbg !10939
  %222 = load i32, i32* %ns0, align 4, !dbg !10940
  %sub288 = sub nsw i32 %222, 1, !dbg !10941
  %call289 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %219, i32 %220, i32 %sub287, i32 %sub288), !dbg !10942
  %co290 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call289, i32 0, i32 1, !dbg !10943
  %arraydecay291 = getelementptr inbounds [3 x float], [3 x float]* %co290, i64 0, i64 0, !dbg !10942
  call void @add_v3_v3(float* %arraydecay286, float* %arraydecay291), !dbg !10944
  %arraydecay292 = getelementptr inbounds [3 x float], [3 x float]* %co2, i64 0, i64 0, !dbg !10945
  %223 = load %struct.VMesh*, %struct.VMesh** %vm1, align 8, !dbg !10946
  %224 = load i32, i32* %i, align 4, !dbg !10947
  %225 = load i32, i32* %ns0, align 4, !dbg !10948
  %sub293 = sub nsw i32 %225, 1, !dbg !10949
  %226 = load i32, i32* %ns0, align 4, !dbg !10950
  %add294 = add nsw i32 %226, 1, !dbg !10951
  %call295 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %223, i32 %224, i32 %sub293, i32 %add294), !dbg !10952
  %co296 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call295, i32 0, i32 1, !dbg !10953
  %arraydecay297 = getelementptr inbounds [3 x float], [3 x float]* %co296, i64 0, i64 0, !dbg !10952
  call void @add_v3_v3(float* %arraydecay292, float* %arraydecay297), !dbg !10954
  br label %for.inc298, !dbg !10955

for.inc298:                                       ; preds = %for.body280
  %227 = load i32, i32* %i, align 4, !dbg !10956
  %inc299 = add nsw i32 %227, 1, !dbg !10956
  store i32 %inc299, i32* %i, align 4, !dbg !10956
  br label %for.cond278, !dbg !10957, !llvm.loop !10958

for.end300:                                       ; preds = %for.cond278
  %arraydecay301 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !10960
  %arraydecay302 = getelementptr inbounds [3 x float], [3 x float]* %co1, i64 0, i64 0, !dbg !10961
  call void @copy_v3_v3(float* %arraydecay301, float* %arraydecay302), !dbg !10962
  %arraydecay303 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !10963
  %228 = load i32, i32* %n, align 4, !dbg !10964
  %conv = sitofp i32 %228 to float, !dbg !10965
  %div304 = fdiv float 1.000000e+00, %conv, !dbg !10966
  call void @mul_v3_fl(float* %arraydecay303, float %div304), !dbg !10967
  %arraydecay305 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !10968
  %arraydecay306 = getelementptr inbounds [3 x float], [3 x float]* %co2, i64 0, i64 0, !dbg !10969
  %229 = load float, float* %beta, align 4, !dbg !10970
  %230 = load i32, i32* %n, align 4, !dbg !10971
  %conv307 = sitofp i32 %230 to float, !dbg !10972
  %mul308 = fmul float 2.000000e+00, %conv307, !dbg !10973
  %div309 = fdiv float %229, %mul308, !dbg !10974
  call void @madd_v3_v3fl(float* %arraydecay305, float* %arraydecay306, float %div309), !dbg !10975
  %arraydecay310 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !10976
  %231 = load %struct.VMesh*, %struct.VMesh** %vm0.addr, align 8, !dbg !10977
  %232 = load i32, i32* %ns20, align 4, !dbg !10978
  %233 = load i32, i32* %ns20, align 4, !dbg !10979
  %call311 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %231, i32 0, i32 %232, i32 %233), !dbg !10980
  %co312 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call311, i32 0, i32 1, !dbg !10981
  %arraydecay313 = getelementptr inbounds [3 x float], [3 x float]* %co312, i64 0, i64 0, !dbg !10980
  %234 = load float, float* %gamma, align 4, !dbg !10982
  call void @madd_v3_v3fl(float* %arraydecay310, float* %arraydecay313, float %234), !dbg !10983
  store i32 0, i32* %i, align 4, !dbg !10984
  br label %for.cond314, !dbg !10986

for.cond314:                                      ; preds = %for.inc322, %for.end300
  %235 = load i32, i32* %i, align 4, !dbg !10987
  %236 = load i32, i32* %n, align 4, !dbg !10989
  %cmp315 = icmp slt i32 %235, %236, !dbg !10990
  br i1 %cmp315, label %for.body317, label %for.end324, !dbg !10991

for.body317:                                      ; preds = %for.cond314
  %237 = load %struct.VMesh*, %struct.VMesh** %vm1, align 8, !dbg !10992
  %238 = load i32, i32* %i, align 4, !dbg !10993
  %239 = load i32, i32* %ns0, align 4, !dbg !10994
  %240 = load i32, i32* %ns0, align 4, !dbg !10995
  %call318 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %237, i32 %238, i32 %239, i32 %240), !dbg !10996
  %co319 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call318, i32 0, i32 1, !dbg !10997
  %arraydecay320 = getelementptr inbounds [3 x float], [3 x float]* %co319, i64 0, i64 0, !dbg !10996
  %arraydecay321 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !10998
  call void @copy_v3_v3(float* %arraydecay320, float* %arraydecay321), !dbg !10999
  br label %for.inc322, !dbg !10999

for.inc322:                                       ; preds = %for.body317
  %241 = load i32, i32* %i, align 4, !dbg !11000
  %inc323 = add nsw i32 %241, 1, !dbg !11000
  store i32 %inc323, i32* %i, align 4, !dbg !11000
  br label %for.cond314, !dbg !11001, !llvm.loop !11002

for.end324:                                       ; preds = %for.cond314
  %242 = load %struct.VMesh*, %struct.VMesh** %vm1, align 8, !dbg !11004
  %boundstart325 = getelementptr inbounds %struct.VMesh, %struct.VMesh* %242, i32 0, i32 1, !dbg !11005
  %243 = load %struct.BoundVert*, %struct.BoundVert** %boundstart325, align 8, !dbg !11005
  store %struct.BoundVert* %243, %struct.BoundVert** %bndv, align 8, !dbg !11006
  store i32 0, i32* %i, align 4, !dbg !11007
  br label %for.cond326, !dbg !11009

for.cond326:                                      ; preds = %for.inc354, %for.end324
  %244 = load i32, i32* %i, align 4, !dbg !11010
  %245 = load i32, i32* %n, align 4, !dbg !11012
  %cmp327 = icmp slt i32 %244, %245, !dbg !11013
  br i1 %cmp327, label %for.body329, label %for.end356, !dbg !11014

for.body329:                                      ; preds = %for.cond326
  %246 = load i32, i32* %i, align 4, !dbg !11015
  %add330 = add nsw i32 %246, 1, !dbg !11017
  %247 = load i32, i32* %n, align 4, !dbg !11018
  %rem = srem i32 %add330, %247, !dbg !11019
  store i32 %rem, i32* %inext, align 4, !dbg !11020
  store i32 0, i32* %k, align 4, !dbg !11021
  br label %for.cond331, !dbg !11023

for.cond331:                                      ; preds = %for.inc350, %for.body329
  %248 = load i32, i32* %k, align 4, !dbg !11024
  %249 = load i32, i32* %ns1, align 4, !dbg !11026
  %cmp332 = icmp sle i32 %248, %249, !dbg !11027
  br i1 %cmp332, label %for.body334, label %for.end352, !dbg !11028

for.body334:                                      ; preds = %for.cond331
  %250 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !11029
  %251 = load %struct.BoundVert*, %struct.BoundVert** %bndv, align 8, !dbg !11031
  %profile335 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %251, i32 0, i32 7, !dbg !11032
  %252 = load i32, i32* %k, align 4, !dbg !11033
  %253 = load i32, i32* %ns1, align 4, !dbg !11034
  %arraydecay336 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !11035
  call void @get_profile_point(%struct.BevelParams* %250, %struct.Profile* %profile335, i32 %252, i32 %253, float* %arraydecay336), !dbg !11036
  %254 = load %struct.VMesh*, %struct.VMesh** %vm1, align 8, !dbg !11037
  %255 = load i32, i32* %i, align 4, !dbg !11038
  %256 = load i32, i32* %k, align 4, !dbg !11039
  %call337 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %254, i32 %255, i32 0, i32 %256), !dbg !11040
  %co338 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call337, i32 0, i32 1, !dbg !11041
  %arraydecay339 = getelementptr inbounds [3 x float], [3 x float]* %co338, i64 0, i64 0, !dbg !11040
  %arraydecay340 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !11042
  call void @copy_v3_v3(float* %arraydecay339, float* %arraydecay340), !dbg !11043
  %257 = load i32, i32* %k, align 4, !dbg !11044
  %258 = load i32, i32* %ns0, align 4, !dbg !11046
  %cmp341 = icmp sge i32 %257, %258, !dbg !11047
  br i1 %cmp341, label %land.lhs.true, label %if.end, !dbg !11048

land.lhs.true:                                    ; preds = %for.body334
  %259 = load i32, i32* %k, align 4, !dbg !11049
  %260 = load i32, i32* %ns1, align 4, !dbg !11050
  %cmp343 = icmp slt i32 %259, %260, !dbg !11051
  br i1 %cmp343, label %if.then, label %if.end, !dbg !11052

if.then:                                          ; preds = %land.lhs.true
  %261 = load %struct.VMesh*, %struct.VMesh** %vm1, align 8, !dbg !11053
  %262 = load i32, i32* %inext, align 4, !dbg !11055
  %263 = load i32, i32* %ns1, align 4, !dbg !11056
  %264 = load i32, i32* %k, align 4, !dbg !11057
  %sub345 = sub nsw i32 %263, %264, !dbg !11058
  %call346 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %261, i32 %262, i32 %sub345, i32 0), !dbg !11059
  %co347 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call346, i32 0, i32 1, !dbg !11060
  %arraydecay348 = getelementptr inbounds [3 x float], [3 x float]* %co347, i64 0, i64 0, !dbg !11059
  %arraydecay349 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !11061
  call void @copy_v3_v3(float* %arraydecay348, float* %arraydecay349), !dbg !11062
  br label %if.end, !dbg !11063

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body334
  br label %for.inc350, !dbg !11064

for.inc350:                                       ; preds = %if.end
  %265 = load i32, i32* %k, align 4, !dbg !11065
  %inc351 = add nsw i32 %265, 1, !dbg !11065
  store i32 %inc351, i32* %k, align 4, !dbg !11065
  br label %for.cond331, !dbg !11066, !llvm.loop !11067

for.end352:                                       ; preds = %for.cond331
  %266 = load %struct.BoundVert*, %struct.BoundVert** %bndv, align 8, !dbg !11069
  %next353 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %266, i32 0, i32 0, !dbg !11070
  %267 = load %struct.BoundVert*, %struct.BoundVert** %next353, align 8, !dbg !11070
  store %struct.BoundVert* %267, %struct.BoundVert** %bndv, align 8, !dbg !11071
  br label %for.inc354, !dbg !11072

for.inc354:                                       ; preds = %for.end352
  %268 = load i32, i32* %i, align 4, !dbg !11073
  %inc355 = add nsw i32 %268, 1, !dbg !11073
  store i32 %inc355, i32* %i, align 4, !dbg !11073
  br label %for.cond326, !dbg !11074, !llvm.loop !11075

for.end356:                                       ; preds = %for.cond326
  %269 = load %struct.VMesh*, %struct.VMesh** %vm1, align 8, !dbg !11077
  ret %struct.VMesh* %269, !dbg !11078
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VMesh* @interp_vmesh(%struct.BevelParams* %bp, %struct.VMesh* %vm0, i32 %nseg) #0 !dbg !11079 {
entry:
  %bp.addr = alloca %struct.BevelParams*, align 8
  %vm0.addr = alloca %struct.VMesh*, align 8
  %nseg.addr = alloca i32, align 4
  %n = alloca i32, align 4
  %ns0 = alloca i32, align 4
  %nseg2 = alloca i32, align 4
  %odd = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %j0 = alloca i32, align 4
  %k0 = alloca i32, align 4
  %k0prev = alloca i32, align 4
  %prev_frac = alloca float*, align 8
  %frac = alloca float*, align 8
  %new_frac = alloca float*, align 8
  %prev_new_frac = alloca float*, align 8
  %f = alloca float, align 4
  %restj = alloca float, align 4
  %restk = alloca float, align 4
  %restkprev = alloca float, align 4
  %quad = alloca [4 x [3 x float]], align 16
  %co = alloca [3 x float], align 4
  %center = alloca [3 x float], align 4
  %vm1 = alloca %struct.VMesh*, align 8
  %bndv = alloca %struct.BoundVert*, align 8
  store %struct.BevelParams* %bp, %struct.BevelParams** %bp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BevelParams** %bp.addr, metadata !11082, metadata !DIExpression()), !dbg !11083
  store %struct.VMesh* %vm0, %struct.VMesh** %vm0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VMesh** %vm0.addr, metadata !11084, metadata !DIExpression()), !dbg !11085
  store i32 %nseg, i32* %nseg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %nseg.addr, metadata !11086, metadata !DIExpression()), !dbg !11087
  call void @llvm.dbg.declare(metadata i32* %n, metadata !11088, metadata !DIExpression()), !dbg !11089
  call void @llvm.dbg.declare(metadata i32* %ns0, metadata !11090, metadata !DIExpression()), !dbg !11091
  call void @llvm.dbg.declare(metadata i32* %nseg2, metadata !11092, metadata !DIExpression()), !dbg !11093
  call void @llvm.dbg.declare(metadata i32* %odd, metadata !11094, metadata !DIExpression()), !dbg !11095
  call void @llvm.dbg.declare(metadata i32* %i, metadata !11096, metadata !DIExpression()), !dbg !11097
  call void @llvm.dbg.declare(metadata i32* %j, metadata !11098, metadata !DIExpression()), !dbg !11099
  call void @llvm.dbg.declare(metadata i32* %k, metadata !11100, metadata !DIExpression()), !dbg !11101
  call void @llvm.dbg.declare(metadata i32* %j0, metadata !11102, metadata !DIExpression()), !dbg !11103
  call void @llvm.dbg.declare(metadata i32* %k0, metadata !11104, metadata !DIExpression()), !dbg !11105
  call void @llvm.dbg.declare(metadata i32* %k0prev, metadata !11106, metadata !DIExpression()), !dbg !11107
  call void @llvm.dbg.declare(metadata float** %prev_frac, metadata !11108, metadata !DIExpression()), !dbg !11109
  call void @llvm.dbg.declare(metadata float** %frac, metadata !11110, metadata !DIExpression()), !dbg !11111
  call void @llvm.dbg.declare(metadata float** %new_frac, metadata !11112, metadata !DIExpression()), !dbg !11113
  call void @llvm.dbg.declare(metadata float** %prev_new_frac, metadata !11114, metadata !DIExpression()), !dbg !11115
  call void @llvm.dbg.declare(metadata float* %f, metadata !11116, metadata !DIExpression()), !dbg !11117
  call void @llvm.dbg.declare(metadata float* %restj, metadata !11118, metadata !DIExpression()), !dbg !11119
  call void @llvm.dbg.declare(metadata float* %restk, metadata !11120, metadata !DIExpression()), !dbg !11121
  call void @llvm.dbg.declare(metadata float* %restkprev, metadata !11122, metadata !DIExpression()), !dbg !11123
  call void @llvm.dbg.declare(metadata [4 x [3 x float]]* %quad, metadata !11124, metadata !DIExpression()), !dbg !11127
  call void @llvm.dbg.declare(metadata [3 x float]* %co, metadata !11128, metadata !DIExpression()), !dbg !11129
  call void @llvm.dbg.declare(metadata [3 x float]* %center, metadata !11130, metadata !DIExpression()), !dbg !11131
  call void @llvm.dbg.declare(metadata %struct.VMesh** %vm1, metadata !11132, metadata !DIExpression()), !dbg !11133
  call void @llvm.dbg.declare(metadata %struct.BoundVert** %bndv, metadata !11134, metadata !DIExpression()), !dbg !11135
  %0 = load %struct.VMesh*, %struct.VMesh** %vm0.addr, align 8, !dbg !11136
  %count = getelementptr inbounds %struct.VMesh, %struct.VMesh* %0, i32 0, i32 2, !dbg !11137
  %1 = load i32, i32* %count, align 8, !dbg !11137
  store i32 %1, i32* %n, align 4, !dbg !11138
  %2 = load %struct.VMesh*, %struct.VMesh** %vm0.addr, align 8, !dbg !11139
  %seg = getelementptr inbounds %struct.VMesh, %struct.VMesh* %2, i32 0, i32 3, !dbg !11140
  %3 = load i32, i32* %seg, align 4, !dbg !11140
  store i32 %3, i32* %ns0, align 4, !dbg !11141
  %4 = load i32, i32* %nseg.addr, align 4, !dbg !11142
  %div = sdiv i32 %4, 2, !dbg !11143
  store i32 %div, i32* %nseg2, align 4, !dbg !11144
  %5 = load i32, i32* %nseg.addr, align 4, !dbg !11145
  %rem = srem i32 %5, 2, !dbg !11146
  store i32 %rem, i32* %odd, align 4, !dbg !11147
  %6 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !11148
  %mem_arena = getelementptr inbounds %struct.BevelParams, %struct.BevelParams* %6, i32 0, i32 1, !dbg !11149
  %7 = load %struct.MemArena*, %struct.MemArena** %mem_arena, align 8, !dbg !11149
  %8 = load i32, i32* %n, align 4, !dbg !11150
  %9 = load i32, i32* %nseg.addr, align 4, !dbg !11151
  %10 = load %struct.VMesh*, %struct.VMesh** %vm0.addr, align 8, !dbg !11152
  %boundstart = getelementptr inbounds %struct.VMesh, %struct.VMesh* %10, i32 0, i32 1, !dbg !11153
  %11 = load %struct.BoundVert*, %struct.BoundVert** %boundstart, align 8, !dbg !11153
  %call = call %struct.VMesh* @new_adj_vmesh(%struct.MemArena* %7, i32 %8, i32 %9, %struct.BoundVert* %11), !dbg !11154
  store %struct.VMesh* %call, %struct.VMesh** %vm1, align 8, !dbg !11155
  %12 = load i32, i32* %ns0, align 4, !dbg !11156
  %add = add nsw i32 %12, 1, !dbg !11156
  %conv = sext i32 %add to i64, !dbg !11156
  %mul = mul i64 4, %conv, !dbg !11156
  %13 = alloca i8, i64 %mul, align 16, !dbg !11156
  %14 = bitcast i8* %13 to float*, !dbg !11156
  store float* %14, float** %prev_frac, align 8, !dbg !11157
  %15 = load i32, i32* %ns0, align 4, !dbg !11158
  %add1 = add nsw i32 %15, 1, !dbg !11158
  %conv2 = sext i32 %add1 to i64, !dbg !11158
  %mul3 = mul i64 4, %conv2, !dbg !11158
  %16 = alloca i8, i64 %mul3, align 16, !dbg !11158
  %17 = bitcast i8* %16 to float*, !dbg !11158
  store float* %17, float** %frac, align 8, !dbg !11159
  %18 = load i32, i32* %nseg.addr, align 4, !dbg !11160
  %add4 = add nsw i32 %18, 1, !dbg !11160
  %conv5 = sext i32 %add4 to i64, !dbg !11160
  %mul6 = mul i64 4, %conv5, !dbg !11160
  %19 = alloca i8, i64 %mul6, align 16, !dbg !11160
  %20 = bitcast i8* %19 to float*, !dbg !11160
  store float* %20, float** %new_frac, align 8, !dbg !11161
  %21 = load i32, i32* %nseg.addr, align 4, !dbg !11162
  %add7 = add nsw i32 %21, 1, !dbg !11162
  %conv8 = sext i32 %add7 to i64, !dbg !11162
  %mul9 = mul i64 4, %conv8, !dbg !11162
  %22 = alloca i8, i64 %mul9, align 16, !dbg !11162
  %23 = bitcast i8* %22 to float*, !dbg !11162
  store float* %23, float** %prev_new_frac, align 8, !dbg !11163
  %24 = load %struct.VMesh*, %struct.VMesh** %vm0.addr, align 8, !dbg !11164
  %25 = load float*, float** %prev_frac, align 8, !dbg !11165
  %26 = load i32, i32* %n, align 4, !dbg !11166
  %sub = sub nsw i32 %26, 1, !dbg !11167
  call void @fill_vmesh_fracs(%struct.VMesh* %24, float* %25, i32 %sub), !dbg !11168
  %27 = load %struct.VMesh*, %struct.VMesh** %vm0.addr, align 8, !dbg !11169
  %boundstart10 = getelementptr inbounds %struct.VMesh, %struct.VMesh* %27, i32 0, i32 1, !dbg !11170
  %28 = load %struct.BoundVert*, %struct.BoundVert** %boundstart10, align 8, !dbg !11170
  store %struct.BoundVert* %28, %struct.BoundVert** %bndv, align 8, !dbg !11171
  %29 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !11172
  %30 = load %struct.BoundVert*, %struct.BoundVert** %bndv, align 8, !dbg !11173
  %prev = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %30, i32 0, i32 1, !dbg !11174
  %31 = load %struct.BoundVert*, %struct.BoundVert** %prev, align 8, !dbg !11174
  %32 = load float*, float** %prev_new_frac, align 8, !dbg !11175
  %33 = load i32, i32* %nseg.addr, align 4, !dbg !11176
  call void @fill_profile_fracs(%struct.BevelParams* %29, %struct.BoundVert* %31, float* %32, i32 %33), !dbg !11177
  store i32 0, i32* %i, align 4, !dbg !11178
  br label %for.cond, !dbg !11180

for.cond:                                         ; preds = %for.inc81, %entry
  %34 = load i32, i32* %i, align 4, !dbg !11181
  %35 = load i32, i32* %n, align 4, !dbg !11183
  %cmp = icmp slt i32 %34, %35, !dbg !11184
  br i1 %cmp, label %for.body, label %for.end83, !dbg !11185

for.body:                                         ; preds = %for.cond
  %36 = load %struct.VMesh*, %struct.VMesh** %vm0.addr, align 8, !dbg !11186
  %37 = load float*, float** %frac, align 8, !dbg !11188
  %38 = load i32, i32* %i, align 4, !dbg !11189
  call void @fill_vmesh_fracs(%struct.VMesh* %36, float* %37, i32 %38), !dbg !11190
  %39 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !11191
  %40 = load %struct.BoundVert*, %struct.BoundVert** %bndv, align 8, !dbg !11192
  %41 = load float*, float** %new_frac, align 8, !dbg !11193
  %42 = load i32, i32* %nseg.addr, align 4, !dbg !11194
  call void @fill_profile_fracs(%struct.BevelParams* %39, %struct.BoundVert* %40, float* %41, i32 %42), !dbg !11195
  store i32 0, i32* %j, align 4, !dbg !11196
  br label %for.cond12, !dbg !11198

for.cond12:                                       ; preds = %for.inc72, %for.body
  %43 = load i32, i32* %j, align 4, !dbg !11199
  %44 = load i32, i32* %nseg2, align 4, !dbg !11201
  %sub13 = sub nsw i32 %44, 1, !dbg !11202
  %45 = load i32, i32* %odd, align 4, !dbg !11203
  %add14 = add nsw i32 %sub13, %45, !dbg !11204
  %cmp15 = icmp sle i32 %43, %add14, !dbg !11205
  br i1 %cmp15, label %for.body17, label %for.end74, !dbg !11206

for.body17:                                       ; preds = %for.cond12
  store i32 0, i32* %k, align 4, !dbg !11207
  br label %for.cond18, !dbg !11210

for.cond18:                                       ; preds = %for.inc, %for.body17
  %46 = load i32, i32* %k, align 4, !dbg !11211
  %47 = load i32, i32* %nseg2, align 4, !dbg !11213
  %cmp19 = icmp sle i32 %46, %47, !dbg !11214
  br i1 %cmp19, label %for.body21, label %for.end, !dbg !11215

for.body21:                                       ; preds = %for.cond18
  %48 = load float*, float** %new_frac, align 8, !dbg !11216
  %49 = load i32, i32* %k, align 4, !dbg !11218
  %idxprom = sext i32 %49 to i64, !dbg !11216
  %arrayidx = getelementptr inbounds float, float* %48, i64 %idxprom, !dbg !11216
  %50 = load float, float* %arrayidx, align 4, !dbg !11216
  store float %50, float* %f, align 4, !dbg !11219
  %51 = load float*, float** %frac, align 8, !dbg !11220
  %52 = load i32, i32* %ns0, align 4, !dbg !11221
  %53 = load float, float* %f, align 4, !dbg !11222
  %call22 = call i32 @interp_range(float* %51, i32 %52, float %53, float* %restk), !dbg !11223
  store i32 %call22, i32* %k0, align 4, !dbg !11224
  %54 = load float*, float** %prev_new_frac, align 8, !dbg !11225
  %55 = load i32, i32* %nseg.addr, align 4, !dbg !11226
  %56 = load i32, i32* %j, align 4, !dbg !11227
  %sub23 = sub nsw i32 %55, %56, !dbg !11228
  %idxprom24 = sext i32 %sub23 to i64, !dbg !11225
  %arrayidx25 = getelementptr inbounds float, float* %54, i64 %idxprom24, !dbg !11225
  %57 = load float, float* %arrayidx25, align 4, !dbg !11225
  store float %57, float* %f, align 4, !dbg !11229
  %58 = load float*, float** %prev_frac, align 8, !dbg !11230
  %59 = load i32, i32* %ns0, align 4, !dbg !11231
  %60 = load float, float* %f, align 4, !dbg !11232
  %call26 = call i32 @interp_range(float* %58, i32 %59, float %60, float* %restkprev), !dbg !11233
  store i32 %call26, i32* %k0prev, align 4, !dbg !11234
  %61 = load i32, i32* %ns0, align 4, !dbg !11235
  %62 = load i32, i32* %k0prev, align 4, !dbg !11236
  %sub27 = sub nsw i32 %61, %62, !dbg !11237
  store i32 %sub27, i32* %j0, align 4, !dbg !11238
  %63 = load float, float* %restkprev, align 4, !dbg !11239
  %fneg = fneg float %63, !dbg !11240
  store float %fneg, float* %restj, align 4, !dbg !11241
  %64 = load float, float* %restj, align 4, !dbg !11242
  %cmp28 = fcmp ogt float %64, 0xBEB0C6F7A0000000, !dbg !11244
  br i1 %cmp28, label %if.then, label %if.else, !dbg !11245

if.then:                                          ; preds = %for.body21
  store float 0.000000e+00, float* %restj, align 4, !dbg !11246
  br label %if.end, !dbg !11248

if.else:                                          ; preds = %for.body21
  %65 = load i32, i32* %j0, align 4, !dbg !11249
  %sub30 = sub nsw i32 %65, 1, !dbg !11251
  store i32 %sub30, i32* %j0, align 4, !dbg !11252
  %66 = load float, float* %restj, align 4, !dbg !11253
  %add31 = fadd float 1.000000e+00, %66, !dbg !11254
  store float %add31, float* %restj, align 4, !dbg !11255
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %67 = load float, float* %restj, align 4, !dbg !11256
  %cmp32 = fcmp olt float %67, 0x3EB0C6F7A0000000, !dbg !11258
  br i1 %cmp32, label %land.lhs.true, label %if.else40, !dbg !11259

land.lhs.true:                                    ; preds = %if.end
  %68 = load float, float* %restk, align 4, !dbg !11260
  %cmp34 = fcmp olt float %68, 0x3EB0C6F7A0000000, !dbg !11261
  br i1 %cmp34, label %if.then36, label %if.else40, !dbg !11262

if.then36:                                        ; preds = %land.lhs.true
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !11263
  %69 = load %struct.VMesh*, %struct.VMesh** %vm0.addr, align 8, !dbg !11265
  %70 = load i32, i32* %i, align 4, !dbg !11266
  %71 = load i32, i32* %j0, align 4, !dbg !11267
  %72 = load i32, i32* %k0, align 4, !dbg !11268
  %call37 = call %struct.NewVert* @mesh_vert_canon(%struct.VMesh* %69, i32 %70, i32 %71, i32 %72), !dbg !11269
  %co38 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call37, i32 0, i32 1, !dbg !11270
  %arraydecay39 = getelementptr inbounds [3 x float], [3 x float]* %co38, i64 0, i64 0, !dbg !11269
  call void @copy_v3_v3(float* %arraydecay, float* %arraydecay39), !dbg !11271
  br label %if.end67, !dbg !11272

if.else40:                                        ; preds = %land.lhs.true, %if.end
  %arrayidx41 = getelementptr inbounds [4 x [3 x float]], [4 x [3 x float]]* %quad, i64 0, i64 0, !dbg !11273
  %arraydecay42 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx41, i64 0, i64 0, !dbg !11273
  %73 = load %struct.VMesh*, %struct.VMesh** %vm0.addr, align 8, !dbg !11275
  %74 = load i32, i32* %i, align 4, !dbg !11276
  %75 = load i32, i32* %j0, align 4, !dbg !11277
  %76 = load i32, i32* %k0, align 4, !dbg !11278
  %call43 = call %struct.NewVert* @mesh_vert_canon(%struct.VMesh* %73, i32 %74, i32 %75, i32 %76), !dbg !11279
  %co44 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call43, i32 0, i32 1, !dbg !11280
  %arraydecay45 = getelementptr inbounds [3 x float], [3 x float]* %co44, i64 0, i64 0, !dbg !11279
  call void @copy_v3_v3(float* %arraydecay42, float* %arraydecay45), !dbg !11281
  %arrayidx46 = getelementptr inbounds [4 x [3 x float]], [4 x [3 x float]]* %quad, i64 0, i64 1, !dbg !11282
  %arraydecay47 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx46, i64 0, i64 0, !dbg !11282
  %77 = load %struct.VMesh*, %struct.VMesh** %vm0.addr, align 8, !dbg !11283
  %78 = load i32, i32* %i, align 4, !dbg !11284
  %79 = load i32, i32* %j0, align 4, !dbg !11285
  %80 = load i32, i32* %k0, align 4, !dbg !11286
  %add48 = add nsw i32 %80, 1, !dbg !11287
  %call49 = call %struct.NewVert* @mesh_vert_canon(%struct.VMesh* %77, i32 %78, i32 %79, i32 %add48), !dbg !11288
  %co50 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call49, i32 0, i32 1, !dbg !11289
  %arraydecay51 = getelementptr inbounds [3 x float], [3 x float]* %co50, i64 0, i64 0, !dbg !11288
  call void @copy_v3_v3(float* %arraydecay47, float* %arraydecay51), !dbg !11290
  %arrayidx52 = getelementptr inbounds [4 x [3 x float]], [4 x [3 x float]]* %quad, i64 0, i64 2, !dbg !11291
  %arraydecay53 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx52, i64 0, i64 0, !dbg !11291
  %81 = load %struct.VMesh*, %struct.VMesh** %vm0.addr, align 8, !dbg !11292
  %82 = load i32, i32* %i, align 4, !dbg !11293
  %83 = load i32, i32* %j0, align 4, !dbg !11294
  %add54 = add nsw i32 %83, 1, !dbg !11295
  %84 = load i32, i32* %k0, align 4, !dbg !11296
  %add55 = add nsw i32 %84, 1, !dbg !11297
  %call56 = call %struct.NewVert* @mesh_vert_canon(%struct.VMesh* %81, i32 %82, i32 %add54, i32 %add55), !dbg !11298
  %co57 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call56, i32 0, i32 1, !dbg !11299
  %arraydecay58 = getelementptr inbounds [3 x float], [3 x float]* %co57, i64 0, i64 0, !dbg !11298
  call void @copy_v3_v3(float* %arraydecay53, float* %arraydecay58), !dbg !11300
  %arrayidx59 = getelementptr inbounds [4 x [3 x float]], [4 x [3 x float]]* %quad, i64 0, i64 3, !dbg !11301
  %arraydecay60 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx59, i64 0, i64 0, !dbg !11301
  %85 = load %struct.VMesh*, %struct.VMesh** %vm0.addr, align 8, !dbg !11302
  %86 = load i32, i32* %i, align 4, !dbg !11303
  %87 = load i32, i32* %j0, align 4, !dbg !11304
  %add61 = add nsw i32 %87, 1, !dbg !11305
  %88 = load i32, i32* %k0, align 4, !dbg !11306
  %call62 = call %struct.NewVert* @mesh_vert_canon(%struct.VMesh* %85, i32 %86, i32 %add61, i32 %88), !dbg !11307
  %co63 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call62, i32 0, i32 1, !dbg !11308
  %arraydecay64 = getelementptr inbounds [3 x float], [3 x float]* %co63, i64 0, i64 0, !dbg !11307
  call void @copy_v3_v3(float* %arraydecay60, float* %arraydecay64), !dbg !11309
  %arraydecay65 = getelementptr inbounds [4 x [3 x float]], [4 x [3 x float]]* %quad, i64 0, i64 0, !dbg !11310
  %89 = load float, float* %restk, align 4, !dbg !11311
  %90 = load float, float* %restj, align 4, !dbg !11312
  %arraydecay66 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !11313
  call void @interp_bilinear_quad_v3([3 x float]* %arraydecay65, float %89, float %90, float* %arraydecay66), !dbg !11314
  br label %if.end67

if.end67:                                         ; preds = %if.else40, %if.then36
  %91 = load %struct.VMesh*, %struct.VMesh** %vm1, align 8, !dbg !11315
  %92 = load i32, i32* %i, align 4, !dbg !11316
  %93 = load i32, i32* %j, align 4, !dbg !11317
  %94 = load i32, i32* %k, align 4, !dbg !11318
  %call68 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %91, i32 %92, i32 %93, i32 %94), !dbg !11319
  %co69 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call68, i32 0, i32 1, !dbg !11320
  %arraydecay70 = getelementptr inbounds [3 x float], [3 x float]* %co69, i64 0, i64 0, !dbg !11319
  %arraydecay71 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !11321
  call void @copy_v3_v3(float* %arraydecay70, float* %arraydecay71), !dbg !11322
  br label %for.inc, !dbg !11323

for.inc:                                          ; preds = %if.end67
  %95 = load i32, i32* %k, align 4, !dbg !11324
  %inc = add nsw i32 %95, 1, !dbg !11324
  store i32 %inc, i32* %k, align 4, !dbg !11324
  br label %for.cond18, !dbg !11325, !llvm.loop !11326

for.end:                                          ; preds = %for.cond18
  br label %for.inc72, !dbg !11328

for.inc72:                                        ; preds = %for.end
  %96 = load i32, i32* %j, align 4, !dbg !11329
  %inc73 = add nsw i32 %96, 1, !dbg !11329
  store i32 %inc73, i32* %j, align 4, !dbg !11329
  br label %for.cond12, !dbg !11330, !llvm.loop !11331

for.end74:                                        ; preds = %for.cond12
  %97 = load %struct.BoundVert*, %struct.BoundVert** %bndv, align 8, !dbg !11333
  %next = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %97, i32 0, i32 0, !dbg !11334
  %98 = load %struct.BoundVert*, %struct.BoundVert** %next, align 8, !dbg !11334
  store %struct.BoundVert* %98, %struct.BoundVert** %bndv, align 8, !dbg !11335
  %99 = load float*, float** %prev_frac, align 8, !dbg !11336
  %100 = bitcast float* %99 to i8*, !dbg !11337
  %101 = load float*, float** %frac, align 8, !dbg !11338
  %102 = bitcast float* %101 to i8*, !dbg !11337
  %103 = load i32, i32* %ns0, align 4, !dbg !11339
  %add75 = add nsw i32 %103, 1, !dbg !11340
  %conv76 = sext i32 %add75 to i64, !dbg !11341
  %mul77 = mul i64 %conv76, 4, !dbg !11342
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %100, i8* align 4 %102, i64 %mul77, i1 false), !dbg !11337
  %104 = load float*, float** %prev_new_frac, align 8, !dbg !11343
  %105 = bitcast float* %104 to i8*, !dbg !11344
  %106 = load float*, float** %new_frac, align 8, !dbg !11345
  %107 = bitcast float* %106 to i8*, !dbg !11344
  %108 = load i32, i32* %nseg.addr, align 4, !dbg !11346
  %add78 = add nsw i32 %108, 1, !dbg !11347
  %conv79 = sext i32 %add78 to i64, !dbg !11348
  %mul80 = mul i64 %conv79, 4, !dbg !11349
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %105, i8* align 4 %107, i64 %mul80, i1 false), !dbg !11344
  br label %for.inc81, !dbg !11350

for.inc81:                                        ; preds = %for.end74
  %109 = load i32, i32* %i, align 4, !dbg !11351
  %inc82 = add nsw i32 %109, 1, !dbg !11351
  store i32 %inc82, i32* %i, align 4, !dbg !11351
  br label %for.cond, !dbg !11352, !llvm.loop !11353

for.end83:                                        ; preds = %for.cond
  %110 = load i32, i32* %odd, align 4, !dbg !11355
  %tobool = icmp ne i32 %110, 0, !dbg !11355
  br i1 %tobool, label %if.end90, label %if.then84, !dbg !11357

if.then84:                                        ; preds = %for.end83
  %111 = load %struct.VMesh*, %struct.VMesh** %vm0.addr, align 8, !dbg !11358
  %arraydecay85 = getelementptr inbounds [3 x float], [3 x float]* %center, i64 0, i64 0, !dbg !11360
  call void @vmesh_center(%struct.VMesh* %111, float* %arraydecay85), !dbg !11361
  %112 = load %struct.VMesh*, %struct.VMesh** %vm1, align 8, !dbg !11362
  %113 = load i32, i32* %nseg2, align 4, !dbg !11363
  %114 = load i32, i32* %nseg2, align 4, !dbg !11364
  %call86 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %112, i32 0, i32 %113, i32 %114), !dbg !11365
  %co87 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call86, i32 0, i32 1, !dbg !11366
  %arraydecay88 = getelementptr inbounds [3 x float], [3 x float]* %co87, i64 0, i64 0, !dbg !11365
  %arraydecay89 = getelementptr inbounds [3 x float], [3 x float]* %center, i64 0, i64 0, !dbg !11367
  call void @copy_v3_v3(float* %arraydecay88, float* %arraydecay89), !dbg !11368
  br label %if.end90, !dbg !11369

if.end90:                                         ; preds = %if.then84, %for.end83
  %115 = load %struct.VMesh*, %struct.VMesh** %vm1, align 8, !dbg !11370
  call void @vmesh_copy_equiv_verts(%struct.VMesh* %115), !dbg !11371
  %116 = load %struct.VMesh*, %struct.VMesh** %vm1, align 8, !dbg !11372
  ret %struct.VMesh* %116, !dbg !11373
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.NewVert* @mesh_vert_canon(%struct.VMesh* %vm, i32 %i, i32 %j, i32 %k) #0 !dbg !11374 {
entry:
  %vm.addr = alloca %struct.VMesh*, align 8
  %i.addr = alloca i32, align 4
  %j.addr = alloca i32, align 4
  %k.addr = alloca i32, align 4
  %n = alloca i32, align 4
  %ns = alloca i32, align 4
  %ns2 = alloca i32, align 4
  %odd = alloca i32, align 4
  %ans = alloca %struct.NewVert*, align 8
  store %struct.VMesh* %vm, %struct.VMesh** %vm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VMesh** %vm.addr, metadata !11375, metadata !DIExpression()), !dbg !11376
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !11377, metadata !DIExpression()), !dbg !11378
  store i32 %j, i32* %j.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %j.addr, metadata !11379, metadata !DIExpression()), !dbg !11380
  store i32 %k, i32* %k.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %k.addr, metadata !11381, metadata !DIExpression()), !dbg !11382
  call void @llvm.dbg.declare(metadata i32* %n, metadata !11383, metadata !DIExpression()), !dbg !11384
  call void @llvm.dbg.declare(metadata i32* %ns, metadata !11385, metadata !DIExpression()), !dbg !11386
  call void @llvm.dbg.declare(metadata i32* %ns2, metadata !11387, metadata !DIExpression()), !dbg !11388
  call void @llvm.dbg.declare(metadata i32* %odd, metadata !11389, metadata !DIExpression()), !dbg !11390
  call void @llvm.dbg.declare(metadata %struct.NewVert** %ans, metadata !11391, metadata !DIExpression()), !dbg !11392
  %0 = load %struct.VMesh*, %struct.VMesh** %vm.addr, align 8, !dbg !11393
  %count = getelementptr inbounds %struct.VMesh, %struct.VMesh* %0, i32 0, i32 2, !dbg !11394
  %1 = load i32, i32* %count, align 8, !dbg !11394
  store i32 %1, i32* %n, align 4, !dbg !11395
  %2 = load %struct.VMesh*, %struct.VMesh** %vm.addr, align 8, !dbg !11396
  %seg = getelementptr inbounds %struct.VMesh, %struct.VMesh* %2, i32 0, i32 3, !dbg !11397
  %3 = load i32, i32* %seg, align 4, !dbg !11397
  store i32 %3, i32* %ns, align 4, !dbg !11398
  %4 = load i32, i32* %ns, align 4, !dbg !11399
  %div = sdiv i32 %4, 2, !dbg !11400
  store i32 %div, i32* %ns2, align 4, !dbg !11401
  %5 = load i32, i32* %ns, align 4, !dbg !11402
  %rem = srem i32 %5, 2, !dbg !11403
  store i32 %rem, i32* %odd, align 4, !dbg !11404
  %6 = load i32, i32* %odd, align 4, !dbg !11405
  %tobool = icmp ne i32 %6, 0, !dbg !11405
  br i1 %tobool, label %if.else, label %land.lhs.true, !dbg !11407

land.lhs.true:                                    ; preds = %entry
  %7 = load i32, i32* %j.addr, align 4, !dbg !11408
  %8 = load i32, i32* %ns2, align 4, !dbg !11409
  %cmp = icmp eq i32 %7, %8, !dbg !11410
  br i1 %cmp, label %land.lhs.true1, label %if.else, !dbg !11411

land.lhs.true1:                                   ; preds = %land.lhs.true
  %9 = load i32, i32* %k.addr, align 4, !dbg !11412
  %10 = load i32, i32* %ns2, align 4, !dbg !11413
  %cmp2 = icmp eq i32 %9, %10, !dbg !11414
  br i1 %cmp2, label %if.then, label %if.else, !dbg !11415

if.then:                                          ; preds = %land.lhs.true1
  %11 = load %struct.VMesh*, %struct.VMesh** %vm.addr, align 8, !dbg !11416
  %12 = load i32, i32* %j.addr, align 4, !dbg !11417
  %13 = load i32, i32* %k.addr, align 4, !dbg !11418
  %call = call %struct.NewVert* @mesh_vert(%struct.VMesh* %11, i32 0, i32 %12, i32 %13), !dbg !11419
  store %struct.NewVert* %call, %struct.NewVert** %ans, align 8, !dbg !11420
  br label %if.end22, !dbg !11421

if.else:                                          ; preds = %land.lhs.true1, %land.lhs.true, %entry
  %14 = load i32, i32* %j.addr, align 4, !dbg !11422
  %15 = load i32, i32* %ns2, align 4, !dbg !11424
  %sub = sub nsw i32 %15, 1, !dbg !11425
  %16 = load i32, i32* %odd, align 4, !dbg !11426
  %add = add nsw i32 %sub, %16, !dbg !11427
  %cmp3 = icmp sle i32 %14, %add, !dbg !11428
  br i1 %cmp3, label %land.lhs.true4, label %if.else8, !dbg !11429

land.lhs.true4:                                   ; preds = %if.else
  %17 = load i32, i32* %k.addr, align 4, !dbg !11430
  %18 = load i32, i32* %ns2, align 4, !dbg !11431
  %cmp5 = icmp sle i32 %17, %18, !dbg !11432
  br i1 %cmp5, label %if.then6, label %if.else8, !dbg !11433

if.then6:                                         ; preds = %land.lhs.true4
  %19 = load %struct.VMesh*, %struct.VMesh** %vm.addr, align 8, !dbg !11434
  %20 = load i32, i32* %i.addr, align 4, !dbg !11435
  %21 = load i32, i32* %j.addr, align 4, !dbg !11436
  %22 = load i32, i32* %k.addr, align 4, !dbg !11437
  %call7 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %19, i32 %20, i32 %21, i32 %22), !dbg !11438
  store %struct.NewVert* %call7, %struct.NewVert** %ans, align 8, !dbg !11439
  br label %if.end21, !dbg !11440

if.else8:                                         ; preds = %land.lhs.true4, %if.else
  %23 = load i32, i32* %k.addr, align 4, !dbg !11441
  %24 = load i32, i32* %ns2, align 4, !dbg !11443
  %cmp9 = icmp sle i32 %23, %24, !dbg !11444
  br i1 %cmp9, label %if.then10, label %if.else16, !dbg !11445

if.then10:                                        ; preds = %if.else8
  %25 = load %struct.VMesh*, %struct.VMesh** %vm.addr, align 8, !dbg !11446
  %26 = load i32, i32* %i.addr, align 4, !dbg !11447
  %27 = load i32, i32* %n, align 4, !dbg !11448
  %add11 = add nsw i32 %26, %27, !dbg !11449
  %sub12 = sub nsw i32 %add11, 1, !dbg !11450
  %28 = load i32, i32* %n, align 4, !dbg !11451
  %rem13 = srem i32 %sub12, %28, !dbg !11452
  %29 = load i32, i32* %k.addr, align 4, !dbg !11453
  %30 = load i32, i32* %ns, align 4, !dbg !11454
  %31 = load i32, i32* %j.addr, align 4, !dbg !11455
  %sub14 = sub nsw i32 %30, %31, !dbg !11456
  %call15 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %25, i32 %rem13, i32 %29, i32 %sub14), !dbg !11457
  store %struct.NewVert* %call15, %struct.NewVert** %ans, align 8, !dbg !11458
  br label %if.end, !dbg !11459

if.else16:                                        ; preds = %if.else8
  %32 = load %struct.VMesh*, %struct.VMesh** %vm.addr, align 8, !dbg !11460
  %33 = load i32, i32* %i.addr, align 4, !dbg !11461
  %add17 = add nsw i32 %33, 1, !dbg !11462
  %34 = load i32, i32* %n, align 4, !dbg !11463
  %rem18 = srem i32 %add17, %34, !dbg !11464
  %35 = load i32, i32* %ns, align 4, !dbg !11465
  %36 = load i32, i32* %k.addr, align 4, !dbg !11466
  %sub19 = sub nsw i32 %35, %36, !dbg !11467
  %37 = load i32, i32* %j.addr, align 4, !dbg !11468
  %call20 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %32, i32 %rem18, i32 %sub19, i32 %37), !dbg !11469
  store %struct.NewVert* %call20, %struct.NewVert** %ans, align 8, !dbg !11470
  br label %if.end

if.end:                                           ; preds = %if.else16, %if.then10
  br label %if.end21

if.end21:                                         ; preds = %if.end, %if.then6
  br label %if.end22

if.end22:                                         ; preds = %if.end21, %if.then
  %38 = load %struct.NewVert*, %struct.NewVert** %ans, align 8, !dbg !11471
  ret %struct.NewVert* %38, !dbg !11472
}

; Function Attrs: noinline nounwind uwtable
define internal void @avg4(float* %co, %struct.NewVert* %v0, %struct.NewVert* %v1, %struct.NewVert* %v2, %struct.NewVert* %v3) #0 !dbg !11473 {
entry:
  %co.addr = alloca float*, align 8
  %v0.addr = alloca %struct.NewVert*, align 8
  %v1.addr = alloca %struct.NewVert*, align 8
  %v2.addr = alloca %struct.NewVert*, align 8
  %v3.addr = alloca %struct.NewVert*, align 8
  store float* %co, float** %co.addr, align 8
  call void @llvm.dbg.declare(metadata float** %co.addr, metadata !11478, metadata !DIExpression()), !dbg !11479
  store %struct.NewVert* %v0, %struct.NewVert** %v0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.NewVert** %v0.addr, metadata !11480, metadata !DIExpression()), !dbg !11481
  store %struct.NewVert* %v1, %struct.NewVert** %v1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.NewVert** %v1.addr, metadata !11482, metadata !DIExpression()), !dbg !11483
  store %struct.NewVert* %v2, %struct.NewVert** %v2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.NewVert** %v2.addr, metadata !11484, metadata !DIExpression()), !dbg !11485
  store %struct.NewVert* %v3, %struct.NewVert** %v3.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.NewVert** %v3.addr, metadata !11486, metadata !DIExpression()), !dbg !11487
  %0 = load float*, float** %co.addr, align 8, !dbg !11488
  %1 = load %struct.NewVert*, %struct.NewVert** %v0.addr, align 8, !dbg !11489
  %co1 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %1, i32 0, i32 1, !dbg !11490
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %co1, i64 0, i64 0, !dbg !11489
  %2 = load %struct.NewVert*, %struct.NewVert** %v1.addr, align 8, !dbg !11491
  %co2 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %2, i32 0, i32 1, !dbg !11492
  %arraydecay3 = getelementptr inbounds [3 x float], [3 x float]* %co2, i64 0, i64 0, !dbg !11491
  call void @add_v3_v3v3(float* %0, float* %arraydecay, float* %arraydecay3), !dbg !11493
  %3 = load float*, float** %co.addr, align 8, !dbg !11494
  %4 = load %struct.NewVert*, %struct.NewVert** %v2.addr, align 8, !dbg !11495
  %co4 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %4, i32 0, i32 1, !dbg !11496
  %arraydecay5 = getelementptr inbounds [3 x float], [3 x float]* %co4, i64 0, i64 0, !dbg !11495
  call void @add_v3_v3(float* %3, float* %arraydecay5), !dbg !11497
  %5 = load float*, float** %co.addr, align 8, !dbg !11498
  %6 = load %struct.NewVert*, %struct.NewVert** %v3.addr, align 8, !dbg !11499
  %co6 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %6, i32 0, i32 1, !dbg !11500
  %arraydecay7 = getelementptr inbounds [3 x float], [3 x float]* %co6, i64 0, i64 0, !dbg !11499
  call void @add_v3_v3(float* %5, float* %arraydecay7), !dbg !11501
  %7 = load float*, float** %co.addr, align 8, !dbg !11502
  call void @mul_v3_fl(float* %7, float 2.500000e-01), !dbg !11503
  ret void, !dbg !11504
}

; Function Attrs: noinline nounwind uwtable
define internal float @sabin_gamma(i32 %n) #0 !dbg !11505 {
entry:
  %retval = alloca float, align 4
  %n.addr = alloca i32, align 4
  %ans = alloca double, align 8
  %k = alloca double, align 8
  %k2 = alloca double, align 8
  %k4 = alloca double, align 8
  %k6 = alloca double, align 8
  %x = alloca double, align 8
  %y = alloca double, align 8
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !11508, metadata !DIExpression()), !dbg !11509
  call void @llvm.dbg.declare(metadata double* %ans, metadata !11510, metadata !DIExpression()), !dbg !11511
  call void @llvm.dbg.declare(metadata double* %k, metadata !11512, metadata !DIExpression()), !dbg !11513
  call void @llvm.dbg.declare(metadata double* %k2, metadata !11514, metadata !DIExpression()), !dbg !11515
  call void @llvm.dbg.declare(metadata double* %k4, metadata !11516, metadata !DIExpression()), !dbg !11517
  call void @llvm.dbg.declare(metadata double* %k6, metadata !11518, metadata !DIExpression()), !dbg !11519
  call void @llvm.dbg.declare(metadata double* %x, metadata !11520, metadata !DIExpression()), !dbg !11521
  call void @llvm.dbg.declare(metadata double* %y, metadata !11522, metadata !DIExpression()), !dbg !11523
  %0 = load i32, i32* %n.addr, align 4, !dbg !11524
  %cmp = icmp slt i32 %0, 3, !dbg !11526
  br i1 %cmp, label %if.then, label %if.else, !dbg !11527

if.then:                                          ; preds = %entry
  store float 0.000000e+00, float* %retval, align 4, !dbg !11528
  br label %return, !dbg !11528

if.else:                                          ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4, !dbg !11529
  %cmp1 = icmp eq i32 %1, 3, !dbg !11531
  br i1 %cmp1, label %if.then2, label %if.else3, !dbg !11532

if.then2:                                         ; preds = %if.else
  store double 0x3FB0B410C0000000, double* %ans, align 8, !dbg !11533
  br label %if.end41, !dbg !11534

if.else3:                                         ; preds = %if.else
  %2 = load i32, i32* %n.addr, align 4, !dbg !11535
  %cmp4 = icmp eq i32 %2, 4, !dbg !11537
  br i1 %cmp4, label %if.then5, label %if.else6, !dbg !11538

if.then5:                                         ; preds = %if.else3
  store double 2.500000e-01, double* %ans, align 8, !dbg !11539
  br label %if.end40, !dbg !11540

if.else6:                                         ; preds = %if.else3
  %3 = load i32, i32* %n.addr, align 4, !dbg !11541
  %cmp7 = icmp eq i32 %3, 5, !dbg !11543
  br i1 %cmp7, label %if.then8, label %if.else9, !dbg !11544

if.then8:                                         ; preds = %if.else6
  store double 0x3FD9BA18C0000000, double* %ans, align 8, !dbg !11545
  br label %if.end39, !dbg !11546

if.else9:                                         ; preds = %if.else6
  %4 = load i32, i32* %n.addr, align 4, !dbg !11547
  %cmp10 = icmp eq i32 %4, 6, !dbg !11549
  br i1 %cmp10, label %if.then11, label %if.else12, !dbg !11550

if.then11:                                        ; preds = %if.else9
  store double 0x3FE0BFE220000000, double* %ans, align 8, !dbg !11551
  br label %if.end, !dbg !11552

if.else12:                                        ; preds = %if.else9
  %5 = load i32, i32* %n.addr, align 4, !dbg !11553
  %conv = sitofp i32 %5 to double, !dbg !11555
  %div = fdiv double 0x400921FB54442D18, %conv, !dbg !11556
  %call = call double @cos(double %div) #5, !dbg !11557
  store double %call, double* %k, align 8, !dbg !11558
  %6 = load double, double* %k, align 8, !dbg !11559
  %7 = load double, double* %k, align 8, !dbg !11560
  %mul = fmul double %6, %7, !dbg !11561
  store double %mul, double* %k2, align 8, !dbg !11562
  %8 = load double, double* %k2, align 8, !dbg !11563
  %9 = load double, double* %k2, align 8, !dbg !11564
  %mul13 = fmul double %8, %9, !dbg !11565
  store double %mul13, double* %k4, align 8, !dbg !11566
  %10 = load double, double* %k4, align 8, !dbg !11567
  %11 = load double, double* %k2, align 8, !dbg !11568
  %mul14 = fmul double %10, %11, !dbg !11569
  store double %mul14, double* %k6, align 8, !dbg !11570
  %12 = load double, double* %k6, align 8, !dbg !11571
  %mul15 = fmul double 6.400000e+01, %12, !dbg !11572
  %13 = load double, double* %k4, align 8, !dbg !11573
  %mul16 = fmul double 1.440000e+02, %13, !dbg !11574
  %sub = fsub double %mul15, %mul16, !dbg !11575
  %14 = load double, double* %k2, align 8, !dbg !11576
  %mul17 = fmul double 1.350000e+02, %14, !dbg !11577
  %add = fadd double %sub, %mul17, !dbg !11578
  %sub18 = fsub double %add, 2.700000e+01, !dbg !11579
  %call19 = call double @sqrt(double %sub18) #5, !dbg !11580
  %mul20 = fmul double 0x3FFBB67AE8584CAA, %call19, !dbg !11581
  %15 = load double, double* %k, align 8, !dbg !11582
  %mul21 = fmul double 9.000000e+00, %15, !dbg !11583
  %add22 = fadd double %mul20, %mul21, !dbg !11584
  %call23 = call double @pow(double %add22, double 0x3FD5555555555555) #5, !dbg !11585
  store double %call23, double* %y, align 8, !dbg !11586
  %16 = load double, double* %y, align 8, !dbg !11587
  %mul24 = fmul double 0x3FDEC49B0C1853F1, %16, !dbg !11588
  %17 = load double, double* %k2, align 8, !dbg !11589
  %mul25 = fmul double 1.200000e+01, %17, !dbg !11590
  %sub26 = fsub double %mul25, 9.000000e+00, !dbg !11591
  %mul27 = fmul double 0x3FCD955AA4F104A0, %sub26, !dbg !11592
  %18 = load double, double* %y, align 8, !dbg !11593
  %div28 = fdiv double %mul27, %18, !dbg !11594
  %sub29 = fsub double %mul24, %div28, !dbg !11595
  store double %sub29, double* %x, align 8, !dbg !11596
  %19 = load double, double* %k, align 8, !dbg !11597
  %20 = load double, double* %x, align 8, !dbg !11598
  %mul30 = fmul double %19, %20, !dbg !11599
  %21 = load double, double* %k2, align 8, !dbg !11600
  %mul31 = fmul double 2.000000e+00, %21, !dbg !11601
  %add32 = fadd double %mul30, %mul31, !dbg !11602
  %sub33 = fsub double %add32, 1.000000e+00, !dbg !11603
  %22 = load double, double* %x, align 8, !dbg !11604
  %23 = load double, double* %x, align 8, !dbg !11605
  %mul34 = fmul double %22, %23, !dbg !11606
  %24 = load double, double* %k, align 8, !dbg !11607
  %25 = load double, double* %x, align 8, !dbg !11608
  %mul35 = fmul double %24, %25, !dbg !11609
  %add36 = fadd double %mul35, 1.000000e+00, !dbg !11610
  %mul37 = fmul double %mul34, %add36, !dbg !11611
  %div38 = fdiv double %sub33, %mul37, !dbg !11612
  store double %div38, double* %ans, align 8, !dbg !11613
  br label %if.end

if.end:                                           ; preds = %if.else12, %if.then11
  br label %if.end39

if.end39:                                         ; preds = %if.end, %if.then8
  br label %if.end40

if.end40:                                         ; preds = %if.end39, %if.then5
  br label %if.end41

if.end41:                                         ; preds = %if.end40, %if.then2
  br label %if.end42

if.end42:                                         ; preds = %if.end41
  %26 = load double, double* %ans, align 8, !dbg !11614
  %conv43 = fptrunc double %26 to float, !dbg !11615
  store float %conv43, float* %retval, align 4, !dbg !11616
  br label %return, !dbg !11616

return:                                           ; preds = %if.end42, %if.then
  %27 = load float, float* %retval, align 4, !dbg !11617
  ret float %27, !dbg !11617
}

; Function Attrs: nounwind
declare dso_local double @cos(double) #4

; Function Attrs: nounwind
declare dso_local double @sqrt(double) #4

; Function Attrs: noinline nounwind uwtable
define internal void @fill_vmesh_fracs(%struct.VMesh* %vm, float* %frac, i32 %i) #0 !dbg !11618 {
entry:
  %vm.addr = alloca %struct.VMesh*, align 8
  %frac.addr = alloca float*, align 8
  %i.addr = alloca i32, align 4
  %k = alloca i32, align 4
  %ns = alloca i32, align 4
  %total = alloca float, align 4
  store %struct.VMesh* %vm, %struct.VMesh** %vm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VMesh** %vm.addr, metadata !11621, metadata !DIExpression()), !dbg !11622
  store float* %frac, float** %frac.addr, align 8
  call void @llvm.dbg.declare(metadata float** %frac.addr, metadata !11623, metadata !DIExpression()), !dbg !11624
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !11625, metadata !DIExpression()), !dbg !11626
  call void @llvm.dbg.declare(metadata i32* %k, metadata !11627, metadata !DIExpression()), !dbg !11628
  call void @llvm.dbg.declare(metadata i32* %ns, metadata !11629, metadata !DIExpression()), !dbg !11630
  call void @llvm.dbg.declare(metadata float* %total, metadata !11631, metadata !DIExpression()), !dbg !11632
  store float 0.000000e+00, float* %total, align 4, !dbg !11632
  %0 = load %struct.VMesh*, %struct.VMesh** %vm.addr, align 8, !dbg !11633
  %seg = getelementptr inbounds %struct.VMesh, %struct.VMesh* %0, i32 0, i32 3, !dbg !11634
  %1 = load i32, i32* %seg, align 4, !dbg !11634
  store i32 %1, i32* %ns, align 4, !dbg !11635
  %2 = load float*, float** %frac.addr, align 8, !dbg !11636
  %arrayidx = getelementptr inbounds float, float* %2, i64 0, !dbg !11636
  store float 0.000000e+00, float* %arrayidx, align 4, !dbg !11637
  store i32 0, i32* %k, align 4, !dbg !11638
  br label %for.cond, !dbg !11640

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %k, align 4, !dbg !11641
  %4 = load i32, i32* %ns, align 4, !dbg !11643
  %cmp = icmp slt i32 %3, %4, !dbg !11644
  br i1 %cmp, label %for.body, label %for.end, !dbg !11645

for.body:                                         ; preds = %for.cond
  %5 = load %struct.VMesh*, %struct.VMesh** %vm.addr, align 8, !dbg !11646
  %6 = load i32, i32* %i.addr, align 4, !dbg !11648
  %7 = load i32, i32* %k, align 4, !dbg !11649
  %call = call %struct.NewVert* @mesh_vert(%struct.VMesh* %5, i32 %6, i32 0, i32 %7), !dbg !11650
  %co = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call, i32 0, i32 1, !dbg !11651
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !11650
  %8 = load %struct.VMesh*, %struct.VMesh** %vm.addr, align 8, !dbg !11652
  %9 = load i32, i32* %i.addr, align 4, !dbg !11653
  %10 = load i32, i32* %k, align 4, !dbg !11654
  %add = add nsw i32 %10, 1, !dbg !11655
  %call1 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %8, i32 %9, i32 0, i32 %add), !dbg !11656
  %co2 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call1, i32 0, i32 1, !dbg !11657
  %arraydecay3 = getelementptr inbounds [3 x float], [3 x float]* %co2, i64 0, i64 0, !dbg !11656
  %call4 = call float @len_v3v3(float* %arraydecay, float* %arraydecay3), !dbg !11658
  %11 = load float, float* %total, align 4, !dbg !11659
  %add5 = fadd float %11, %call4, !dbg !11659
  store float %add5, float* %total, align 4, !dbg !11659
  %12 = load float, float* %total, align 4, !dbg !11660
  %13 = load float*, float** %frac.addr, align 8, !dbg !11661
  %14 = load i32, i32* %k, align 4, !dbg !11662
  %add6 = add nsw i32 %14, 1, !dbg !11663
  %idxprom = sext i32 %add6 to i64, !dbg !11661
  %arrayidx7 = getelementptr inbounds float, float* %13, i64 %idxprom, !dbg !11661
  store float %12, float* %arrayidx7, align 4, !dbg !11664
  br label %for.inc, !dbg !11665

for.inc:                                          ; preds = %for.body
  %15 = load i32, i32* %k, align 4, !dbg !11666
  %inc = add nsw i32 %15, 1, !dbg !11666
  store i32 %inc, i32* %k, align 4, !dbg !11666
  br label %for.cond, !dbg !11667, !llvm.loop !11668

for.end:                                          ; preds = %for.cond
  %16 = load float, float* %total, align 4, !dbg !11670
  %cmp8 = fcmp ogt float %16, 0x3EB0C6F7A0000000, !dbg !11672
  br i1 %cmp8, label %if.then, label %if.end, !dbg !11673

if.then:                                          ; preds = %for.end
  store i32 1, i32* %k, align 4, !dbg !11674
  br label %for.cond9, !dbg !11677

for.cond9:                                        ; preds = %for.inc14, %if.then
  %17 = load i32, i32* %k, align 4, !dbg !11678
  %18 = load i32, i32* %ns, align 4, !dbg !11680
  %cmp10 = icmp sle i32 %17, %18, !dbg !11681
  br i1 %cmp10, label %for.body11, label %for.end16, !dbg !11682

for.body11:                                       ; preds = %for.cond9
  %19 = load float, float* %total, align 4, !dbg !11683
  %20 = load float*, float** %frac.addr, align 8, !dbg !11684
  %21 = load i32, i32* %k, align 4, !dbg !11685
  %idxprom12 = sext i32 %21 to i64, !dbg !11684
  %arrayidx13 = getelementptr inbounds float, float* %20, i64 %idxprom12, !dbg !11684
  %22 = load float, float* %arrayidx13, align 4, !dbg !11686
  %div = fdiv float %22, %19, !dbg !11686
  store float %div, float* %arrayidx13, align 4, !dbg !11686
  br label %for.inc14, !dbg !11684

for.inc14:                                        ; preds = %for.body11
  %23 = load i32, i32* %k, align 4, !dbg !11687
  %inc15 = add nsw i32 %23, 1, !dbg !11687
  store i32 %inc15, i32* %k, align 4, !dbg !11687
  br label %for.cond9, !dbg !11688, !llvm.loop !11689

for.end16:                                        ; preds = %for.cond9
  br label %if.end, !dbg !11691

if.end:                                           ; preds = %for.end16, %for.end
  ret void, !dbg !11692
}

; Function Attrs: noinline nounwind uwtable
define internal void @fill_profile_fracs(%struct.BevelParams* %bp, %struct.BoundVert* %bndv, float* %frac, i32 %ns) #0 !dbg !11693 {
entry:
  %bp.addr = alloca %struct.BevelParams*, align 8
  %bndv.addr = alloca %struct.BoundVert*, align 8
  %frac.addr = alloca float*, align 8
  %ns.addr = alloca i32, align 4
  %k = alloca i32, align 4
  %co = alloca [3 x float], align 4
  %nextco = alloca [3 x float], align 4
  %total = alloca float, align 4
  store %struct.BevelParams* %bp, %struct.BevelParams** %bp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BevelParams** %bp.addr, metadata !11696, metadata !DIExpression()), !dbg !11697
  store %struct.BoundVert* %bndv, %struct.BoundVert** %bndv.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BoundVert** %bndv.addr, metadata !11698, metadata !DIExpression()), !dbg !11699
  store float* %frac, float** %frac.addr, align 8
  call void @llvm.dbg.declare(metadata float** %frac.addr, metadata !11700, metadata !DIExpression()), !dbg !11701
  store i32 %ns, i32* %ns.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ns.addr, metadata !11702, metadata !DIExpression()), !dbg !11703
  call void @llvm.dbg.declare(metadata i32* %k, metadata !11704, metadata !DIExpression()), !dbg !11705
  call void @llvm.dbg.declare(metadata [3 x float]* %co, metadata !11706, metadata !DIExpression()), !dbg !11707
  call void @llvm.dbg.declare(metadata [3 x float]* %nextco, metadata !11708, metadata !DIExpression()), !dbg !11709
  call void @llvm.dbg.declare(metadata float* %total, metadata !11710, metadata !DIExpression()), !dbg !11711
  store float 0.000000e+00, float* %total, align 4, !dbg !11711
  %0 = load float*, float** %frac.addr, align 8, !dbg !11712
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !11712
  store float 0.000000e+00, float* %arrayidx, align 4, !dbg !11713
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !11714
  %1 = load %struct.BoundVert*, %struct.BoundVert** %bndv.addr, align 8, !dbg !11715
  %nv = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %1, i32 0, i32 2, !dbg !11716
  %co1 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %nv, i32 0, i32 1, !dbg !11717
  %arraydecay2 = getelementptr inbounds [3 x float], [3 x float]* %co1, i64 0, i64 0, !dbg !11715
  call void @copy_v3_v3(float* %arraydecay, float* %arraydecay2), !dbg !11718
  store i32 0, i32* %k, align 4, !dbg !11719
  br label %for.cond, !dbg !11721

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %k, align 4, !dbg !11722
  %3 = load i32, i32* %ns.addr, align 4, !dbg !11724
  %cmp = icmp slt i32 %2, %3, !dbg !11725
  br i1 %cmp, label %for.body, label %for.end, !dbg !11726

for.body:                                         ; preds = %for.cond
  %4 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !11727
  %5 = load %struct.BoundVert*, %struct.BoundVert** %bndv.addr, align 8, !dbg !11729
  %profile = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %5, i32 0, i32 7, !dbg !11730
  %6 = load i32, i32* %k, align 4, !dbg !11731
  %add = add nsw i32 %6, 1, !dbg !11732
  %7 = load i32, i32* %ns.addr, align 4, !dbg !11733
  %arraydecay3 = getelementptr inbounds [3 x float], [3 x float]* %nextco, i64 0, i64 0, !dbg !11734
  call void @get_profile_point(%struct.BevelParams* %4, %struct.Profile* %profile, i32 %add, i32 %7, float* %arraydecay3), !dbg !11735
  %arraydecay4 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !11736
  %arraydecay5 = getelementptr inbounds [3 x float], [3 x float]* %nextco, i64 0, i64 0, !dbg !11737
  %call = call float @len_v3v3(float* %arraydecay4, float* %arraydecay5), !dbg !11738
  %8 = load float, float* %total, align 4, !dbg !11739
  %add6 = fadd float %8, %call, !dbg !11739
  store float %add6, float* %total, align 4, !dbg !11739
  %9 = load float, float* %total, align 4, !dbg !11740
  %10 = load float*, float** %frac.addr, align 8, !dbg !11741
  %11 = load i32, i32* %k, align 4, !dbg !11742
  %add7 = add nsw i32 %11, 1, !dbg !11743
  %idxprom = sext i32 %add7 to i64, !dbg !11741
  %arrayidx8 = getelementptr inbounds float, float* %10, i64 %idxprom, !dbg !11741
  store float %9, float* %arrayidx8, align 4, !dbg !11744
  %arraydecay9 = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !11745
  %arraydecay10 = getelementptr inbounds [3 x float], [3 x float]* %nextco, i64 0, i64 0, !dbg !11746
  call void @copy_v3_v3(float* %arraydecay9, float* %arraydecay10), !dbg !11747
  br label %for.inc, !dbg !11748

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %k, align 4, !dbg !11749
  %inc = add nsw i32 %12, 1, !dbg !11749
  store i32 %inc, i32* %k, align 4, !dbg !11749
  br label %for.cond, !dbg !11750, !llvm.loop !11751

for.end:                                          ; preds = %for.cond
  %13 = load float, float* %total, align 4, !dbg !11753
  %cmp11 = fcmp ogt float %13, 0x3EB0C6F7A0000000, !dbg !11755
  br i1 %cmp11, label %if.then, label %if.end, !dbg !11756

if.then:                                          ; preds = %for.end
  store i32 1, i32* %k, align 4, !dbg !11757
  br label %for.cond12, !dbg !11760

for.cond12:                                       ; preds = %for.inc17, %if.then
  %14 = load i32, i32* %k, align 4, !dbg !11761
  %15 = load i32, i32* %ns.addr, align 4, !dbg !11763
  %cmp13 = icmp sle i32 %14, %15, !dbg !11764
  br i1 %cmp13, label %for.body14, label %for.end19, !dbg !11765

for.body14:                                       ; preds = %for.cond12
  %16 = load float, float* %total, align 4, !dbg !11766
  %17 = load float*, float** %frac.addr, align 8, !dbg !11768
  %18 = load i32, i32* %k, align 4, !dbg !11769
  %idxprom15 = sext i32 %18 to i64, !dbg !11768
  %arrayidx16 = getelementptr inbounds float, float* %17, i64 %idxprom15, !dbg !11768
  %19 = load float, float* %arrayidx16, align 4, !dbg !11770
  %div = fdiv float %19, %16, !dbg !11770
  store float %div, float* %arrayidx16, align 4, !dbg !11770
  br label %for.inc17, !dbg !11771

for.inc17:                                        ; preds = %for.body14
  %20 = load i32, i32* %k, align 4, !dbg !11772
  %inc18 = add nsw i32 %20, 1, !dbg !11772
  store i32 %inc18, i32* %k, align 4, !dbg !11772
  br label %for.cond12, !dbg !11773, !llvm.loop !11774

for.end19:                                        ; preds = %for.cond12
  br label %if.end, !dbg !11776

if.end:                                           ; preds = %for.end19, %for.end
  ret void, !dbg !11777
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @interp_range(float* %frac, i32 %n, float %f, float* %r_rest) #0 !dbg !11778 {
entry:
  %retval = alloca i32, align 4
  %frac.addr = alloca float*, align 8
  %n.addr = alloca i32, align 4
  %f.addr = alloca float, align 4
  %r_rest.addr = alloca float*, align 8
  %i = alloca i32, align 4
  %rest = alloca float, align 4
  store float* %frac, float** %frac.addr, align 8
  call void @llvm.dbg.declare(metadata float** %frac.addr, metadata !11781, metadata !DIExpression()), !dbg !11782
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !11783, metadata !DIExpression()), !dbg !11784
  store float %f, float* %f.addr, align 4
  call void @llvm.dbg.declare(metadata float* %f.addr, metadata !11785, metadata !DIExpression()), !dbg !11786
  store float* %r_rest, float** %r_rest.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r_rest.addr, metadata !11787, metadata !DIExpression()), !dbg !11788
  call void @llvm.dbg.declare(metadata i32* %i, metadata !11789, metadata !DIExpression()), !dbg !11790
  call void @llvm.dbg.declare(metadata float* %rest, metadata !11791, metadata !DIExpression()), !dbg !11792
  store i32 0, i32* %i, align 4, !dbg !11793
  br label %for.cond, !dbg !11795

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !11796
  %1 = load i32, i32* %n.addr, align 4, !dbg !11798
  %cmp = icmp slt i32 %0, %1, !dbg !11799
  br i1 %cmp, label %for.body, label %for.end, !dbg !11800

for.body:                                         ; preds = %for.cond
  %2 = load float, float* %f.addr, align 4, !dbg !11801
  %3 = load float*, float** %frac.addr, align 8, !dbg !11804
  %4 = load i32, i32* %i, align 4, !dbg !11805
  %add = add nsw i32 %4, 1, !dbg !11806
  %idxprom = sext i32 %add to i64, !dbg !11804
  %arrayidx = getelementptr inbounds float, float* %3, i64 %idxprom, !dbg !11804
  %5 = load float, float* %arrayidx, align 4, !dbg !11804
  %cmp1 = fcmp ole float %2, %5, !dbg !11807
  br i1 %cmp1, label %if.then, label %if.end17, !dbg !11808

if.then:                                          ; preds = %for.body
  %6 = load float, float* %f.addr, align 4, !dbg !11809
  %7 = load float*, float** %frac.addr, align 8, !dbg !11811
  %8 = load i32, i32* %i, align 4, !dbg !11812
  %idxprom2 = sext i32 %8 to i64, !dbg !11811
  %arrayidx3 = getelementptr inbounds float, float* %7, i64 %idxprom2, !dbg !11811
  %9 = load float, float* %arrayidx3, align 4, !dbg !11811
  %sub = fsub float %6, %9, !dbg !11813
  store float %sub, float* %rest, align 4, !dbg !11814
  %10 = load float, float* %rest, align 4, !dbg !11815
  %cmp4 = fcmp oeq float %10, 0.000000e+00, !dbg !11817
  br i1 %cmp4, label %if.then5, label %if.else, !dbg !11818

if.then5:                                         ; preds = %if.then
  %11 = load float*, float** %r_rest.addr, align 8, !dbg !11819
  store float 0.000000e+00, float* %11, align 4, !dbg !11820
  br label %if.end, !dbg !11821

if.else:                                          ; preds = %if.then
  %12 = load float, float* %rest, align 4, !dbg !11822
  %13 = load float*, float** %frac.addr, align 8, !dbg !11823
  %14 = load i32, i32* %i, align 4, !dbg !11824
  %add6 = add nsw i32 %14, 1, !dbg !11825
  %idxprom7 = sext i32 %add6 to i64, !dbg !11823
  %arrayidx8 = getelementptr inbounds float, float* %13, i64 %idxprom7, !dbg !11823
  %15 = load float, float* %arrayidx8, align 4, !dbg !11823
  %16 = load float*, float** %frac.addr, align 8, !dbg !11826
  %17 = load i32, i32* %i, align 4, !dbg !11827
  %idxprom9 = sext i32 %17 to i64, !dbg !11826
  %arrayidx10 = getelementptr inbounds float, float* %16, i64 %idxprom9, !dbg !11826
  %18 = load float, float* %arrayidx10, align 4, !dbg !11826
  %sub11 = fsub float %15, %18, !dbg !11828
  %div = fdiv float %12, %sub11, !dbg !11829
  %19 = load float*, float** %r_rest.addr, align 8, !dbg !11830
  store float %div, float* %19, align 4, !dbg !11831
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then5
  %20 = load i32, i32* %i, align 4, !dbg !11832
  %21 = load i32, i32* %n.addr, align 4, !dbg !11834
  %sub12 = sub nsw i32 %21, 1, !dbg !11835
  %cmp13 = icmp eq i32 %20, %sub12, !dbg !11836
  br i1 %cmp13, label %land.lhs.true, label %if.end16, !dbg !11837

land.lhs.true:                                    ; preds = %if.end
  %22 = load float*, float** %r_rest.addr, align 8, !dbg !11838
  %23 = load float, float* %22, align 4, !dbg !11839
  %cmp14 = fcmp oeq float %23, 1.000000e+00, !dbg !11840
  br i1 %cmp14, label %if.then15, label %if.end16, !dbg !11841

if.then15:                                        ; preds = %land.lhs.true
  %24 = load i32, i32* %n.addr, align 4, !dbg !11842
  store i32 %24, i32* %i, align 4, !dbg !11844
  %25 = load float*, float** %r_rest.addr, align 8, !dbg !11845
  store float 0.000000e+00, float* %25, align 4, !dbg !11846
  br label %if.end16, !dbg !11847

if.end16:                                         ; preds = %if.then15, %land.lhs.true, %if.end
  %26 = load i32, i32* %i, align 4, !dbg !11848
  store i32 %26, i32* %retval, align 4, !dbg !11849
  br label %return, !dbg !11849

if.end17:                                         ; preds = %for.body
  br label %for.inc, !dbg !11850

for.inc:                                          ; preds = %if.end17
  %27 = load i32, i32* %i, align 4, !dbg !11851
  %inc = add nsw i32 %27, 1, !dbg !11851
  store i32 %inc, i32* %i, align 4, !dbg !11851
  br label %for.cond, !dbg !11852, !llvm.loop !11853

for.end:                                          ; preds = %for.cond
  %28 = load float*, float** %r_rest.addr, align 8, !dbg !11855
  store float 0.000000e+00, float* %28, align 4, !dbg !11856
  %29 = load i32, i32* %n.addr, align 4, !dbg !11857
  store i32 %29, i32* %retval, align 4, !dbg !11858
  br label %return, !dbg !11858

return:                                           ; preds = %for.end, %if.end16
  %30 = load i32, i32* %retval, align 4, !dbg !11859
  ret i32 %30, !dbg !11859
}

declare dso_local void @interp_bilinear_quad_v3([3 x float]*, float, float, float*) #3

; Function Attrs: noinline nounwind uwtable
define internal void @vmesh_center(%struct.VMesh* %vm, float* %r_cent) #0 !dbg !11860 {
entry:
  %vm.addr = alloca %struct.VMesh*, align 8
  %r_cent.addr = alloca float*, align 8
  %n = alloca i32, align 4
  %ns2 = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.VMesh* %vm, %struct.VMesh** %vm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VMesh** %vm.addr, metadata !11863, metadata !DIExpression()), !dbg !11864
  store float* %r_cent, float** %r_cent.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r_cent.addr, metadata !11865, metadata !DIExpression()), !dbg !11866
  call void @llvm.dbg.declare(metadata i32* %n, metadata !11867, metadata !DIExpression()), !dbg !11868
  call void @llvm.dbg.declare(metadata i32* %ns2, metadata !11869, metadata !DIExpression()), !dbg !11870
  call void @llvm.dbg.declare(metadata i32* %i, metadata !11871, metadata !DIExpression()), !dbg !11872
  %0 = load %struct.VMesh*, %struct.VMesh** %vm.addr, align 8, !dbg !11873
  %count = getelementptr inbounds %struct.VMesh, %struct.VMesh* %0, i32 0, i32 2, !dbg !11874
  %1 = load i32, i32* %count, align 8, !dbg !11874
  store i32 %1, i32* %n, align 4, !dbg !11875
  %2 = load %struct.VMesh*, %struct.VMesh** %vm.addr, align 8, !dbg !11876
  %seg = getelementptr inbounds %struct.VMesh, %struct.VMesh* %2, i32 0, i32 3, !dbg !11877
  %3 = load i32, i32* %seg, align 4, !dbg !11877
  %div = sdiv i32 %3, 2, !dbg !11878
  store i32 %div, i32* %ns2, align 4, !dbg !11879
  %4 = load %struct.VMesh*, %struct.VMesh** %vm.addr, align 8, !dbg !11880
  %seg1 = getelementptr inbounds %struct.VMesh, %struct.VMesh* %4, i32 0, i32 3, !dbg !11882
  %5 = load i32, i32* %seg1, align 4, !dbg !11882
  %rem = srem i32 %5, 2, !dbg !11883
  %tobool = icmp ne i32 %rem, 0, !dbg !11883
  br i1 %tobool, label %if.then, label %if.else, !dbg !11884

if.then:                                          ; preds = %entry
  %6 = load float*, float** %r_cent.addr, align 8, !dbg !11885
  call void @zero_v3(float* %6), !dbg !11887
  store i32 0, i32* %i, align 4, !dbg !11888
  br label %for.cond, !dbg !11890

for.cond:                                         ; preds = %for.inc, %if.then
  %7 = load i32, i32* %i, align 4, !dbg !11891
  %8 = load i32, i32* %n, align 4, !dbg !11893
  %cmp = icmp slt i32 %7, %8, !dbg !11894
  br i1 %cmp, label %for.body, label %for.end, !dbg !11895

for.body:                                         ; preds = %for.cond
  %9 = load float*, float** %r_cent.addr, align 8, !dbg !11896
  %10 = load %struct.VMesh*, %struct.VMesh** %vm.addr, align 8, !dbg !11898
  %11 = load i32, i32* %i, align 4, !dbg !11899
  %12 = load i32, i32* %ns2, align 4, !dbg !11900
  %13 = load i32, i32* %ns2, align 4, !dbg !11901
  %call = call %struct.NewVert* @mesh_vert(%struct.VMesh* %10, i32 %11, i32 %12, i32 %13), !dbg !11902
  %co = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call, i32 0, i32 1, !dbg !11903
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %co, i64 0, i64 0, !dbg !11902
  call void @add_v3_v3(float* %9, float* %arraydecay), !dbg !11904
  br label %for.inc, !dbg !11905

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %i, align 4, !dbg !11906
  %inc = add nsw i32 %14, 1, !dbg !11906
  store i32 %inc, i32* %i, align 4, !dbg !11906
  br label %for.cond, !dbg !11907, !llvm.loop !11908

for.end:                                          ; preds = %for.cond
  %15 = load float*, float** %r_cent.addr, align 8, !dbg !11910
  %16 = load i32, i32* %n, align 4, !dbg !11911
  %conv = sitofp i32 %16 to float, !dbg !11912
  %div2 = fdiv float 1.000000e+00, %conv, !dbg !11913
  call void @mul_v3_fl(float* %15, float %div2), !dbg !11914
  br label %if.end, !dbg !11915

if.else:                                          ; preds = %entry
  %17 = load float*, float** %r_cent.addr, align 8, !dbg !11916
  %18 = load %struct.VMesh*, %struct.VMesh** %vm.addr, align 8, !dbg !11918
  %19 = load i32, i32* %ns2, align 4, !dbg !11919
  %20 = load i32, i32* %ns2, align 4, !dbg !11920
  %call3 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %18, i32 0, i32 %19, i32 %20), !dbg !11921
  %co4 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call3, i32 0, i32 1, !dbg !11922
  %arraydecay5 = getelementptr inbounds [3 x float], [3 x float]* %co4, i64 0, i64 0, !dbg !11921
  call void @copy_v3_v3(float* %17, float* %arraydecay5), !dbg !11923
  br label %if.end

if.end:                                           ; preds = %if.else, %for.end
  ret void, !dbg !11924
}

; Function Attrs: noinline nounwind uwtable
define internal float @len_squared_v3(float* %v) #0 !dbg !11925 {
entry:
  %v.addr = alloca float*, align 8
  store float* %v, float** %v.addr, align 8
  call void @llvm.dbg.declare(metadata float** %v.addr, metadata !11926, metadata !DIExpression()), !dbg !11927
  %0 = load float*, float** %v.addr, align 8, !dbg !11928
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !11928
  %1 = load float, float* %arrayidx, align 4, !dbg !11928
  %2 = load float*, float** %v.addr, align 8, !dbg !11929
  %arrayidx1 = getelementptr inbounds float, float* %2, i64 0, !dbg !11929
  %3 = load float, float* %arrayidx1, align 4, !dbg !11929
  %mul = fmul float %1, %3, !dbg !11930
  %4 = load float*, float** %v.addr, align 8, !dbg !11931
  %arrayidx2 = getelementptr inbounds float, float* %4, i64 1, !dbg !11931
  %5 = load float, float* %arrayidx2, align 4, !dbg !11931
  %6 = load float*, float** %v.addr, align 8, !dbg !11932
  %arrayidx3 = getelementptr inbounds float, float* %6, i64 1, !dbg !11932
  %7 = load float, float* %arrayidx3, align 4, !dbg !11932
  %mul4 = fmul float %5, %7, !dbg !11933
  %add = fadd float %mul, %mul4, !dbg !11934
  %8 = load float*, float** %v.addr, align 8, !dbg !11935
  %arrayidx5 = getelementptr inbounds float, float* %8, i64 2, !dbg !11935
  %9 = load float, float* %arrayidx5, align 4, !dbg !11935
  %10 = load float*, float** %v.addr, align 8, !dbg !11936
  %arrayidx6 = getelementptr inbounds float, float* %10, i64 2, !dbg !11936
  %11 = load float, float* %arrayidx6, align 4, !dbg !11936
  %mul7 = fmul float %9, %11, !dbg !11937
  %add8 = fadd float %add, %mul7, !dbg !11938
  ret float %add8, !dbg !11939
}

declare dso_local i32 @CustomData_get_offset(%struct.CustomData*, i32) #3

; Function Attrs: noinline nounwind uwtable
define internal void @zero_v2(float* %r) #0 !dbg !11940 {
entry:
  %r.addr = alloca float*, align 8
  store float* %r, float** %r.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r.addr, metadata !11941, metadata !DIExpression()), !dbg !11942
  %0 = load float*, float** %r.addr, align 8, !dbg !11943
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !11943
  store float 0.000000e+00, float* %arrayidx, align 4, !dbg !11944
  %1 = load float*, float** %r.addr, align 8, !dbg !11945
  %arrayidx1 = getelementptr inbounds float, float* %1, i64 1, !dbg !11945
  store float 0.000000e+00, float* %arrayidx1, align 4, !dbg !11946
  ret void, !dbg !11947
}

; Function Attrs: noinline nounwind uwtable
define internal void @add_v2_v2(float* %r, float* %a) #0 !dbg !11948 {
entry:
  %r.addr = alloca float*, align 8
  %a.addr = alloca float*, align 8
  store float* %r, float** %r.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r.addr, metadata !11949, metadata !DIExpression()), !dbg !11950
  store float* %a, float** %a.addr, align 8
  call void @llvm.dbg.declare(metadata float** %a.addr, metadata !11951, metadata !DIExpression()), !dbg !11952
  %0 = load float*, float** %a.addr, align 8, !dbg !11953
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !11953
  %1 = load float, float* %arrayidx, align 4, !dbg !11953
  %2 = load float*, float** %r.addr, align 8, !dbg !11954
  %arrayidx1 = getelementptr inbounds float, float* %2, i64 0, !dbg !11954
  %3 = load float, float* %arrayidx1, align 4, !dbg !11955
  %add = fadd float %3, %1, !dbg !11955
  store float %add, float* %arrayidx1, align 4, !dbg !11955
  %4 = load float*, float** %a.addr, align 8, !dbg !11956
  %arrayidx2 = getelementptr inbounds float, float* %4, i64 1, !dbg !11956
  %5 = load float, float* %arrayidx2, align 4, !dbg !11956
  %6 = load float*, float** %r.addr, align 8, !dbg !11957
  %arrayidx3 = getelementptr inbounds float, float* %6, i64 1, !dbg !11957
  %7 = load float, float* %arrayidx3, align 4, !dbg !11958
  %add4 = fadd float %7, %5, !dbg !11958
  store float %add4, float* %arrayidx3, align 4, !dbg !11958
  ret void, !dbg !11959
}

; Function Attrs: noinline nounwind uwtable
define internal void @mul_v2_fl(float* %r, float %f) #0 !dbg !11960 {
entry:
  %r.addr = alloca float*, align 8
  %f.addr = alloca float, align 4
  store float* %r, float** %r.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r.addr, metadata !11961, metadata !DIExpression()), !dbg !11962
  store float %f, float* %f.addr, align 4
  call void @llvm.dbg.declare(metadata float* %f.addr, metadata !11963, metadata !DIExpression()), !dbg !11964
  %0 = load float, float* %f.addr, align 4, !dbg !11965
  %1 = load float*, float** %r.addr, align 8, !dbg !11966
  %arrayidx = getelementptr inbounds float, float* %1, i64 0, !dbg !11966
  %2 = load float, float* %arrayidx, align 4, !dbg !11967
  %mul = fmul float %2, %0, !dbg !11967
  store float %mul, float* %arrayidx, align 4, !dbg !11967
  %3 = load float, float* %f.addr, align 4, !dbg !11968
  %4 = load float*, float** %r.addr, align 8, !dbg !11969
  %arrayidx1 = getelementptr inbounds float, float* %4, i64 1, !dbg !11969
  %5 = load float, float* %arrayidx1, align 4, !dbg !11970
  %mul2 = fmul float %5, %3, !dbg !11970
  store float %mul2, float* %arrayidx1, align 4, !dbg !11970
  ret void, !dbg !11971
}

; Function Attrs: noinline nounwind uwtable
define internal void @copy_v2_v2(float* %r, float* %a) #0 !dbg !11972 {
entry:
  %r.addr = alloca float*, align 8
  %a.addr = alloca float*, align 8
  store float* %r, float** %r.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r.addr, metadata !11973, metadata !DIExpression()), !dbg !11974
  store float* %a, float** %a.addr, align 8
  call void @llvm.dbg.declare(metadata float** %a.addr, metadata !11975, metadata !DIExpression()), !dbg !11976
  %0 = load float*, float** %a.addr, align 8, !dbg !11977
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !11977
  %1 = load float, float* %arrayidx, align 4, !dbg !11977
  %2 = load float*, float** %r.addr, align 8, !dbg !11978
  %arrayidx1 = getelementptr inbounds float, float* %2, i64 0, !dbg !11978
  store float %1, float* %arrayidx1, align 4, !dbg !11979
  %3 = load float*, float** %a.addr, align 8, !dbg !11980
  %arrayidx2 = getelementptr inbounds float, float* %3, i64 1, !dbg !11980
  %4 = load float, float* %arrayidx2, align 4, !dbg !11980
  %5 = load float*, float** %r.addr, align 8, !dbg !11981
  %arrayidx3 = getelementptr inbounds float, float* %5, i64 1, !dbg !11981
  store float %4, float* %arrayidx3, align 4, !dbg !11982
  ret void, !dbg !11983
}

declare dso_local %struct.BMFace* @BM_face_split(%struct.BMesh*, %struct.BMFace*, %struct.BMLoop*, %struct.BMLoop*, %struct.BMLoop**, %struct.BMEdge*, i8 zeroext) #3

declare dso_local %struct.BMLoop* @BM_face_vert_share_loop(%struct.BMFace*, %struct.BMVert*) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @BM_edge_is_manifold(%struct.BMEdge* %e) #0 !dbg !11984 {
entry:
  %e.addr = alloca %struct.BMEdge*, align 8
  %l = alloca %struct.BMLoop*, align 8
  store %struct.BMEdge* %e, %struct.BMEdge** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMEdge** %e.addr, metadata !11985, metadata !DIExpression()), !dbg !11986
  call void @llvm.dbg.declare(metadata %struct.BMLoop** %l, metadata !11987, metadata !DIExpression()), !dbg !11990
  %0 = load %struct.BMEdge*, %struct.BMEdge** %e.addr, align 8, !dbg !11991
  %l1 = getelementptr inbounds %struct.BMEdge, %struct.BMEdge* %0, i32 0, i32 4, !dbg !11992
  %1 = load %struct.BMLoop*, %struct.BMLoop** %l1, align 8, !dbg !11992
  store %struct.BMLoop* %1, %struct.BMLoop** %l, align 8, !dbg !11990
  %2 = load %struct.BMLoop*, %struct.BMLoop** %l, align 8, !dbg !11993
  %tobool = icmp ne %struct.BMLoop* %2, null, !dbg !11993
  br i1 %tobool, label %land.lhs.true, label %land.end, !dbg !11994

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.BMLoop*, %struct.BMLoop** %l, align 8, !dbg !11995
  %radial_next = getelementptr inbounds %struct.BMLoop, %struct.BMLoop* %3, i32 0, i32 4, !dbg !11996
  %4 = load %struct.BMLoop*, %struct.BMLoop** %radial_next, align 8, !dbg !11996
  %5 = load %struct.BMLoop*, %struct.BMLoop** %l, align 8, !dbg !11997
  %cmp = icmp ne %struct.BMLoop* %4, %5, !dbg !11998
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !11999

land.rhs:                                         ; preds = %land.lhs.true
  %6 = load %struct.BMLoop*, %struct.BMLoop** %l, align 8, !dbg !12000
  %radial_next2 = getelementptr inbounds %struct.BMLoop, %struct.BMLoop* %6, i32 0, i32 4, !dbg !12001
  %7 = load %struct.BMLoop*, %struct.BMLoop** %radial_next2, align 8, !dbg !12001
  %radial_next3 = getelementptr inbounds %struct.BMLoop, %struct.BMLoop* %7, i32 0, i32 4, !dbg !12002
  %8 = load %struct.BMLoop*, %struct.BMLoop** %radial_next3, align 8, !dbg !12002
  %9 = load %struct.BMLoop*, %struct.BMLoop** %l, align 8, !dbg !12003
  %cmp4 = icmp eq %struct.BMLoop* %8, %9, !dbg !12004
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %10 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %cmp4, %land.rhs ], !dbg !12005
  %land.ext = zext i1 %10 to i32, !dbg !11999
  %conv = trunc i32 %land.ext to i8, !dbg !12006
  ret i8 %conv, !dbg !12007
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.BMFace* @bev_create_quad_straddle(%struct.BMesh* %bm, %struct.BMVert* %v1, %struct.BMVert* %v2, %struct.BMVert* %v3, %struct.BMVert* %v4, %struct.BMFace* %f1, %struct.BMFace* %f2, i32 %mat_nr, i8 zeroext %is_seam) #0 !dbg !12008 {
entry:
  %retval = alloca %struct.BMFace*, align 8
  %bm.addr = alloca %struct.BMesh*, align 8
  %v1.addr = alloca %struct.BMVert*, align 8
  %v2.addr = alloca %struct.BMVert*, align 8
  %v3.addr = alloca %struct.BMVert*, align 8
  %v4.addr = alloca %struct.BMVert*, align 8
  %f1.addr = alloca %struct.BMFace*, align 8
  %f2.addr = alloca %struct.BMFace*, align 8
  %mat_nr.addr = alloca i32, align 4
  %is_seam.addr = alloca i8, align 1
  %f = alloca %struct.BMFace*, align 8
  %facerep = alloca %struct.BMFace*, align 8
  %l = alloca %struct.BMLoop*, align 8
  %iter = alloca %struct.BMIter, align 8
  store %struct.BMesh* %bm, %struct.BMesh** %bm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMesh** %bm.addr, metadata !12011, metadata !DIExpression()), !dbg !12012
  store %struct.BMVert* %v1, %struct.BMVert** %v1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMVert** %v1.addr, metadata !12013, metadata !DIExpression()), !dbg !12014
  store %struct.BMVert* %v2, %struct.BMVert** %v2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMVert** %v2.addr, metadata !12015, metadata !DIExpression()), !dbg !12016
  store %struct.BMVert* %v3, %struct.BMVert** %v3.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMVert** %v3.addr, metadata !12017, metadata !DIExpression()), !dbg !12018
  store %struct.BMVert* %v4, %struct.BMVert** %v4.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMVert** %v4.addr, metadata !12019, metadata !DIExpression()), !dbg !12020
  store %struct.BMFace* %f1, %struct.BMFace** %f1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMFace** %f1.addr, metadata !12021, metadata !DIExpression()), !dbg !12022
  store %struct.BMFace* %f2, %struct.BMFace** %f2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMFace** %f2.addr, metadata !12023, metadata !DIExpression()), !dbg !12024
  store i32 %mat_nr, i32* %mat_nr.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mat_nr.addr, metadata !12025, metadata !DIExpression()), !dbg !12026
  store i8 %is_seam, i8* %is_seam.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %is_seam.addr, metadata !12027, metadata !DIExpression()), !dbg !12028
  call void @llvm.dbg.declare(metadata %struct.BMFace** %f, metadata !12029, metadata !DIExpression()), !dbg !12030
  call void @llvm.dbg.declare(metadata %struct.BMFace** %facerep, metadata !12031, metadata !DIExpression()), !dbg !12032
  call void @llvm.dbg.declare(metadata %struct.BMLoop** %l, metadata !12033, metadata !DIExpression()), !dbg !12034
  call void @llvm.dbg.declare(metadata %struct.BMIter* %iter, metadata !12035, metadata !DIExpression()), !dbg !12036
  %0 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !12037
  %1 = load %struct.BMVert*, %struct.BMVert** %v1.addr, align 8, !dbg !12038
  %2 = load %struct.BMVert*, %struct.BMVert** %v2.addr, align 8, !dbg !12039
  %3 = load %struct.BMVert*, %struct.BMVert** %v3.addr, align 8, !dbg !12040
  %4 = load %struct.BMVert*, %struct.BMVert** %v4.addr, align 8, !dbg !12041
  %5 = load %struct.BMFace*, %struct.BMFace** %f1.addr, align 8, !dbg !12042
  %6 = load i32, i32* %mat_nr.addr, align 4, !dbg !12043
  %call = call %struct.BMFace* @bev_create_quad_tri(%struct.BMesh* %0, %struct.BMVert* %1, %struct.BMVert* %2, %struct.BMVert* %3, %struct.BMVert* %4, %struct.BMFace* %5, i32 %6, i8 zeroext 0), !dbg !12044
  store %struct.BMFace* %call, %struct.BMFace** %f, align 8, !dbg !12045
  %7 = load %struct.BMFace*, %struct.BMFace** %f, align 8, !dbg !12046
  %tobool = icmp ne %struct.BMFace* %7, null, !dbg !12046
  br i1 %tobool, label %if.end, label %if.then, !dbg !12048

if.then:                                          ; preds = %entry
  store %struct.BMFace* null, %struct.BMFace** %retval, align 8, !dbg !12049
  br label %return, !dbg !12049

if.end:                                           ; preds = %entry
  %8 = load %struct.BMFace*, %struct.BMFace** %f, align 8, !dbg !12050
  %9 = bitcast %struct.BMFace* %8 to i8*, !dbg !12050
  %call1 = call i8* @BM_iter_new(%struct.BMIter* %iter, %struct.BMesh* null, i8 zeroext 11, i8* %9), !dbg !12050
  %10 = bitcast i8* %call1 to %struct.BMLoop*, !dbg !12050
  store %struct.BMLoop* %10, %struct.BMLoop** %l, align 8, !dbg !12050
  br label %for.cond, !dbg !12050

for.cond:                                         ; preds = %for.inc, %if.end
  %11 = load %struct.BMLoop*, %struct.BMLoop** %l, align 8, !dbg !12052
  %tobool2 = icmp ne %struct.BMLoop* %11, null, !dbg !12050
  br i1 %tobool2, label %for.body, label %for.end, !dbg !12050

for.body:                                         ; preds = %for.cond
  %12 = load i8, i8* %is_seam.addr, align 1, !dbg !12054
  %conv = zext i8 %12 to i32, !dbg !12054
  %tobool3 = icmp ne i32 %conv, 0, !dbg !12054
  br i1 %tobool3, label %if.then9, label %lor.lhs.false, !dbg !12057

lor.lhs.false:                                    ; preds = %for.body
  %13 = load %struct.BMLoop*, %struct.BMLoop** %l, align 8, !dbg !12058
  %v = getelementptr inbounds %struct.BMLoop, %struct.BMLoop* %13, i32 0, i32 1, !dbg !12059
  %14 = load %struct.BMVert*, %struct.BMVert** %v, align 8, !dbg !12059
  %15 = load %struct.BMVert*, %struct.BMVert** %v1.addr, align 8, !dbg !12060
  %cmp = icmp eq %struct.BMVert* %14, %15, !dbg !12061
  br i1 %cmp, label %if.then9, label %lor.lhs.false5, !dbg !12062

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %16 = load %struct.BMLoop*, %struct.BMLoop** %l, align 8, !dbg !12063
  %v6 = getelementptr inbounds %struct.BMLoop, %struct.BMLoop* %16, i32 0, i32 1, !dbg !12064
  %17 = load %struct.BMVert*, %struct.BMVert** %v6, align 8, !dbg !12064
  %18 = load %struct.BMVert*, %struct.BMVert** %v2.addr, align 8, !dbg !12065
  %cmp7 = icmp eq %struct.BMVert* %17, %18, !dbg !12066
  br i1 %cmp7, label %if.then9, label %if.else, !dbg !12067

if.then9:                                         ; preds = %lor.lhs.false5, %lor.lhs.false, %for.body
  %19 = load %struct.BMFace*, %struct.BMFace** %f1.addr, align 8, !dbg !12068
  store %struct.BMFace* %19, %struct.BMFace** %facerep, align 8, !dbg !12069
  br label %if.end10, !dbg !12070

if.else:                                          ; preds = %lor.lhs.false5
  %20 = load %struct.BMFace*, %struct.BMFace** %f2.addr, align 8, !dbg !12071
  store %struct.BMFace* %20, %struct.BMFace** %facerep, align 8, !dbg !12072
  br label %if.end10

if.end10:                                         ; preds = %if.else, %if.then9
  %21 = load %struct.BMFace*, %struct.BMFace** %facerep, align 8, !dbg !12073
  %tobool11 = icmp ne %struct.BMFace* %21, null, !dbg !12073
  br i1 %tobool11, label %if.then12, label %if.end13, !dbg !12075

if.then12:                                        ; preds = %if.end10
  %22 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !12076
  %23 = load %struct.BMLoop*, %struct.BMLoop** %l, align 8, !dbg !12077
  %24 = load %struct.BMFace*, %struct.BMFace** %facerep, align 8, !dbg !12078
  call void @BM_loop_interp_from_face(%struct.BMesh* %22, %struct.BMLoop* %23, %struct.BMFace* %24, i8 zeroext 1, i8 zeroext 1), !dbg !12079
  br label %if.end13, !dbg !12079

if.end13:                                         ; preds = %if.then12, %if.end10
  br label %for.inc, !dbg !12080

for.inc:                                          ; preds = %if.end13
  %call14 = call i8* @BM_iter_step(%struct.BMIter* %iter), !dbg !12052
  %25 = bitcast i8* %call14 to %struct.BMLoop*, !dbg !12052
  store %struct.BMLoop* %25, %struct.BMLoop** %l, align 8, !dbg !12052
  br label %for.cond, !dbg !12052, !llvm.loop !12081

for.end:                                          ; preds = %for.cond
  %26 = load %struct.BMFace*, %struct.BMFace** %f, align 8, !dbg !12083
  store %struct.BMFace* %26, %struct.BMFace** %retval, align 8, !dbg !12084
  br label %return, !dbg !12084

return:                                           ; preds = %for.end, %if.then
  %27 = load %struct.BMFace*, %struct.BMFace** %retval, align 8, !dbg !12085
  ret %struct.BMFace* %27, !dbg !12085
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.BMFace* @bev_create_quad_tri(%struct.BMesh* %bm, %struct.BMVert* %v1, %struct.BMVert* %v2, %struct.BMVert* %v3, %struct.BMVert* %v4, %struct.BMFace* %facerep, i32 %mat_nr, i8 zeroext %do_interp) #0 !dbg !12086 {
entry:
  %bm.addr = alloca %struct.BMesh*, align 8
  %v1.addr = alloca %struct.BMVert*, align 8
  %v2.addr = alloca %struct.BMVert*, align 8
  %v3.addr = alloca %struct.BMVert*, align 8
  %v4.addr = alloca %struct.BMVert*, align 8
  %facerep.addr = alloca %struct.BMFace*, align 8
  %mat_nr.addr = alloca i32, align 4
  %do_interp.addr = alloca i8, align 1
  %varr = alloca [4 x %struct.BMVert*], align 16
  store %struct.BMesh* %bm, %struct.BMesh** %bm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMesh** %bm.addr, metadata !12089, metadata !DIExpression()), !dbg !12090
  store %struct.BMVert* %v1, %struct.BMVert** %v1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMVert** %v1.addr, metadata !12091, metadata !DIExpression()), !dbg !12092
  store %struct.BMVert* %v2, %struct.BMVert** %v2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMVert** %v2.addr, metadata !12093, metadata !DIExpression()), !dbg !12094
  store %struct.BMVert* %v3, %struct.BMVert** %v3.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMVert** %v3.addr, metadata !12095, metadata !DIExpression()), !dbg !12096
  store %struct.BMVert* %v4, %struct.BMVert** %v4.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMVert** %v4.addr, metadata !12097, metadata !DIExpression()), !dbg !12098
  store %struct.BMFace* %facerep, %struct.BMFace** %facerep.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMFace** %facerep.addr, metadata !12099, metadata !DIExpression()), !dbg !12100
  store i32 %mat_nr, i32* %mat_nr.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mat_nr.addr, metadata !12101, metadata !DIExpression()), !dbg !12102
  store i8 %do_interp, i8* %do_interp.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %do_interp.addr, metadata !12103, metadata !DIExpression()), !dbg !12104
  call void @llvm.dbg.declare(metadata [4 x %struct.BMVert*]* %varr, metadata !12105, metadata !DIExpression()), !dbg !12106
  %arrayinit.begin = getelementptr inbounds [4 x %struct.BMVert*], [4 x %struct.BMVert*]* %varr, i64 0, i64 0, !dbg !12107
  %0 = load %struct.BMVert*, %struct.BMVert** %v1.addr, align 8, !dbg !12108
  store %struct.BMVert* %0, %struct.BMVert** %arrayinit.begin, align 8, !dbg !12107
  %arrayinit.element = getelementptr inbounds %struct.BMVert*, %struct.BMVert** %arrayinit.begin, i64 1, !dbg !12107
  %1 = load %struct.BMVert*, %struct.BMVert** %v2.addr, align 8, !dbg !12109
  store %struct.BMVert* %1, %struct.BMVert** %arrayinit.element, align 8, !dbg !12107
  %arrayinit.element1 = getelementptr inbounds %struct.BMVert*, %struct.BMVert** %arrayinit.element, i64 1, !dbg !12107
  %2 = load %struct.BMVert*, %struct.BMVert** %v3.addr, align 8, !dbg !12110
  store %struct.BMVert* %2, %struct.BMVert** %arrayinit.element1, align 8, !dbg !12107
  %arrayinit.element2 = getelementptr inbounds %struct.BMVert*, %struct.BMVert** %arrayinit.element1, i64 1, !dbg !12107
  %3 = load %struct.BMVert*, %struct.BMVert** %v4.addr, align 8, !dbg !12111
  store %struct.BMVert* %3, %struct.BMVert** %arrayinit.element2, align 8, !dbg !12107
  %4 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !12112
  %arraydecay = getelementptr inbounds [4 x %struct.BMVert*], [4 x %struct.BMVert*]* %varr, i64 0, i64 0, !dbg !12113
  %5 = load %struct.BMVert*, %struct.BMVert** %v4.addr, align 8, !dbg !12114
  %tobool = icmp ne %struct.BMVert* %5, null, !dbg !12114
  %6 = zext i1 %tobool to i64, !dbg !12114
  %cond = select i1 %tobool, i32 4, i32 3, !dbg !12114
  %7 = load %struct.BMFace*, %struct.BMFace** %facerep.addr, align 8, !dbg !12115
  %8 = load i32, i32* %mat_nr.addr, align 4, !dbg !12116
  %9 = load i8, i8* %do_interp.addr, align 1, !dbg !12117
  %call = call %struct.BMFace* @bev_create_ngon(%struct.BMesh* %4, %struct.BMVert** %arraydecay, i32 %cond, %struct.BMFace** null, %struct.BMFace* %7, i32 %8, i8 zeroext %9), !dbg !12118
  ret %struct.BMFace* %call, !dbg !12119
}

; Function Attrs: noinline nounwind uwtable
define internal void @bev_merge_end_uvs(%struct.BMesh* %bm, %struct.BevVert* %bv, %struct.EdgeHalf* %e) #0 !dbg !12120 {
entry:
  %bm.addr = alloca %struct.BMesh*, align 8
  %bv.addr = alloca %struct.BevVert*, align 8
  %e.addr = alloca %struct.EdgeHalf*, align 8
  %vm = alloca %struct.VMesh*, align 8
  %i = alloca i32, align 4
  %k = alloca i32, align 4
  %nseg = alloca i32, align 4
  store %struct.BMesh* %bm, %struct.BMesh** %bm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMesh** %bm.addr, metadata !12123, metadata !DIExpression()), !dbg !12124
  store %struct.BevVert* %bv, %struct.BevVert** %bv.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BevVert** %bv.addr, metadata !12125, metadata !DIExpression()), !dbg !12126
  store %struct.EdgeHalf* %e, %struct.EdgeHalf** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.EdgeHalf** %e.addr, metadata !12127, metadata !DIExpression()), !dbg !12128
  call void @llvm.dbg.declare(metadata %struct.VMesh** %vm, metadata !12129, metadata !DIExpression()), !dbg !12130
  %0 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !12131
  %vmesh = getelementptr inbounds %struct.BevVert, %struct.BevVert* %0, i32 0, i32 9, !dbg !12132
  %1 = load %struct.VMesh*, %struct.VMesh** %vmesh, align 8, !dbg !12132
  store %struct.VMesh* %1, %struct.VMesh** %vm, align 8, !dbg !12130
  call void @llvm.dbg.declare(metadata i32* %i, metadata !12133, metadata !DIExpression()), !dbg !12134
  call void @llvm.dbg.declare(metadata i32* %k, metadata !12135, metadata !DIExpression()), !dbg !12136
  call void @llvm.dbg.declare(metadata i32* %nseg, metadata !12137, metadata !DIExpression()), !dbg !12138
  %2 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e.addr, align 8, !dbg !12139
  %seg = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %2, i32 0, i32 7, !dbg !12140
  %3 = load i32, i32* %seg, align 8, !dbg !12140
  store i32 %3, i32* %nseg, align 4, !dbg !12141
  %4 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e.addr, align 8, !dbg !12142
  %leftv = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %4, i32 0, i32 5, !dbg !12143
  %5 = load %struct.BoundVert*, %struct.BoundVert** %leftv, align 8, !dbg !12143
  %index = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %5, i32 0, i32 6, !dbg !12144
  %6 = load i32, i32* %index, align 8, !dbg !12144
  store i32 %6, i32* %i, align 4, !dbg !12145
  store i32 1, i32* %k, align 4, !dbg !12146
  br label %for.cond, !dbg !12148

for.cond:                                         ; preds = %for.inc, %entry
  %7 = load i32, i32* %k, align 4, !dbg !12149
  %8 = load i32, i32* %nseg, align 4, !dbg !12151
  %cmp = icmp slt i32 %7, %8, !dbg !12152
  br i1 %cmp, label %for.body, label %for.end, !dbg !12153

for.body:                                         ; preds = %for.cond
  %9 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !12154
  %10 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !12156
  %11 = load i32, i32* %i, align 4, !dbg !12157
  %12 = load i32, i32* %k, align 4, !dbg !12158
  %call = call %struct.NewVert* @mesh_vert(%struct.VMesh* %10, i32 %11, i32 0, i32 %12), !dbg !12159
  %v = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call, i32 0, i32 0, !dbg !12160
  %13 = load %struct.BMVert*, %struct.BMVert** %v, align 8, !dbg !12160
  call void @bev_merge_uvs(%struct.BMesh* %9, %struct.BMVert* %13), !dbg !12161
  br label %for.inc, !dbg !12162

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %k, align 4, !dbg !12163
  %inc = add nsw i32 %14, 1, !dbg !12163
  store i32 %inc, i32* %k, align 4, !dbg !12163
  br label %for.cond, !dbg !12164, !llvm.loop !12165

for.end:                                          ; preds = %for.cond
  ret void, !dbg !12167
}

declare dso_local %struct.BMEdge* @BM_edge_exists(%struct.BMVert*, %struct.BMVert*) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @bevvert_is_weld_cross(%struct.BevVert* %bv) #0 !dbg !12168 {
entry:
  %bv.addr = alloca %struct.BevVert*, align 8
  store %struct.BevVert* %bv, %struct.BevVert** %bv.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BevVert** %bv.addr, metadata !12169, metadata !DIExpression()), !dbg !12170
  %0 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !12171
  %edgecount = getelementptr inbounds %struct.BevVert, %struct.BevVert* %0, i32 0, i32 1, !dbg !12172
  %1 = load i32, i32* %edgecount, align 8, !dbg !12172
  %cmp = icmp eq i32 %1, 4, !dbg !12173
  br i1 %cmp, label %land.lhs.true, label %land.end19, !dbg !12174

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !12175
  %selcount = getelementptr inbounds %struct.BevVert, %struct.BevVert* %2, i32 0, i32 2, !dbg !12176
  %3 = load i32, i32* %selcount, align 4, !dbg !12176
  %cmp1 = icmp eq i32 %3, 2, !dbg !12177
  br i1 %cmp1, label %land.rhs, label %land.end19, !dbg !12178

land.rhs:                                         ; preds = %land.lhs.true
  %4 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !12179
  %edges = getelementptr inbounds %struct.BevVert, %struct.BevVert* %4, i32 0, i32 7, !dbg !12180
  %5 = load %struct.EdgeHalf*, %struct.EdgeHalf** %edges, align 8, !dbg !12180
  %arrayidx = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %5, i64 0, !dbg !12179
  %is_bev = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %arrayidx, i32 0, i32 12, !dbg !12181
  %6 = load i8, i8* %is_bev, align 4, !dbg !12181
  %conv = zext i8 %6 to i32, !dbg !12179
  %tobool = icmp ne i32 %conv, 0, !dbg !12179
  br i1 %tobool, label %land.lhs.true2, label %lor.rhs, !dbg !12182

land.lhs.true2:                                   ; preds = %land.rhs
  %7 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !12183
  %edges3 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %7, i32 0, i32 7, !dbg !12184
  %8 = load %struct.EdgeHalf*, %struct.EdgeHalf** %edges3, align 8, !dbg !12184
  %arrayidx4 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %8, i64 2, !dbg !12183
  %is_bev5 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %arrayidx4, i32 0, i32 12, !dbg !12185
  %9 = load i8, i8* %is_bev5, align 4, !dbg !12185
  %conv6 = zext i8 %9 to i32, !dbg !12183
  %tobool7 = icmp ne i32 %conv6, 0, !dbg !12183
  br i1 %tobool7, label %lor.end, label %lor.rhs, !dbg !12186

lor.rhs:                                          ; preds = %land.lhs.true2, %land.rhs
  %10 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !12187
  %edges8 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %10, i32 0, i32 7, !dbg !12188
  %11 = load %struct.EdgeHalf*, %struct.EdgeHalf** %edges8, align 8, !dbg !12188
  %arrayidx9 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %11, i64 1, !dbg !12187
  %is_bev10 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %arrayidx9, i32 0, i32 12, !dbg !12189
  %12 = load i8, i8* %is_bev10, align 4, !dbg !12189
  %conv11 = zext i8 %12 to i32, !dbg !12187
  %tobool12 = icmp ne i32 %conv11, 0, !dbg !12187
  br i1 %tobool12, label %land.rhs13, label %land.end, !dbg !12190

land.rhs13:                                       ; preds = %lor.rhs
  %13 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !12191
  %edges14 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %13, i32 0, i32 7, !dbg !12192
  %14 = load %struct.EdgeHalf*, %struct.EdgeHalf** %edges14, align 8, !dbg !12192
  %arrayidx15 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %14, i64 3, !dbg !12191
  %is_bev16 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %arrayidx15, i32 0, i32 12, !dbg !12193
  %15 = load i8, i8* %is_bev16, align 4, !dbg !12193
  %conv17 = zext i8 %15 to i32, !dbg !12191
  %tobool18 = icmp ne i32 %conv17, 0, !dbg !12190
  br label %land.end

land.end:                                         ; preds = %land.rhs13, %lor.rhs
  %16 = phi i1 [ false, %lor.rhs ], [ %tobool18, %land.rhs13 ], !dbg !12194
  br label %lor.end, !dbg !12186

lor.end:                                          ; preds = %land.end, %land.lhs.true2
  %17 = phi i1 [ true, %land.lhs.true2 ], [ %16, %land.end ]
  br label %land.end19

land.end19:                                       ; preds = %lor.end, %land.lhs.true, %entry
  %18 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %17, %lor.end ], !dbg !12194
  %land.ext = zext i1 %18 to i32, !dbg !12178
  %conv20 = trunc i32 %land.ext to i8, !dbg !12195
  ret i8 %conv20, !dbg !12196
}

; Function Attrs: noinline nounwind uwtable
define internal void @weld_cross_attrs_copy(%struct.BMesh* %bm, %struct.BevVert* %bv, %struct.VMesh* %vm, i32 %vmindex, %struct.EdgeHalf* %e) #0 !dbg !12197 {
entry:
  %bm.addr = alloca %struct.BMesh*, align 8
  %bv.addr = alloca %struct.BevVert*, align 8
  %vm.addr = alloca %struct.VMesh*, align 8
  %vmindex.addr = alloca i32, align 4
  %e.addr = alloca %struct.EdgeHalf*, align 8
  %bme_prev = alloca %struct.BMEdge*, align 8
  %bme_next = alloca %struct.BMEdge*, align 8
  %bme = alloca %struct.BMEdge*, align 8
  %i = alloca i32, align 4
  %nseg = alloca i32, align 4
  %disable_seam = alloca i8, align 1
  %enable_smooth = alloca i8, align 1
  store %struct.BMesh* %bm, %struct.BMesh** %bm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMesh** %bm.addr, metadata !12200, metadata !DIExpression()), !dbg !12201
  store %struct.BevVert* %bv, %struct.BevVert** %bv.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BevVert** %bv.addr, metadata !12202, metadata !DIExpression()), !dbg !12203
  store %struct.VMesh* %vm, %struct.VMesh** %vm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VMesh** %vm.addr, metadata !12204, metadata !DIExpression()), !dbg !12205
  store i32 %vmindex, i32* %vmindex.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %vmindex.addr, metadata !12206, metadata !DIExpression()), !dbg !12207
  store %struct.EdgeHalf* %e, %struct.EdgeHalf** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.EdgeHalf** %e.addr, metadata !12208, metadata !DIExpression()), !dbg !12209
  call void @llvm.dbg.declare(metadata %struct.BMEdge** %bme_prev, metadata !12210, metadata !DIExpression()), !dbg !12211
  call void @llvm.dbg.declare(metadata %struct.BMEdge** %bme_next, metadata !12212, metadata !DIExpression()), !dbg !12213
  call void @llvm.dbg.declare(metadata %struct.BMEdge** %bme, metadata !12214, metadata !DIExpression()), !dbg !12215
  call void @llvm.dbg.declare(metadata i32* %i, metadata !12216, metadata !DIExpression()), !dbg !12217
  call void @llvm.dbg.declare(metadata i32* %nseg, metadata !12218, metadata !DIExpression()), !dbg !12219
  call void @llvm.dbg.declare(metadata i8* %disable_seam, metadata !12220, metadata !DIExpression()), !dbg !12221
  call void @llvm.dbg.declare(metadata i8* %enable_smooth, metadata !12222, metadata !DIExpression()), !dbg !12223
  store %struct.BMEdge* null, %struct.BMEdge** %bme_next, align 8, !dbg !12224
  store %struct.BMEdge* null, %struct.BMEdge** %bme_prev, align 8, !dbg !12225
  store i32 0, i32* %i, align 4, !dbg !12226
  br label %for.cond, !dbg !12228

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !12229
  %cmp = icmp slt i32 %0, 4, !dbg !12231
  br i1 %cmp, label %for.body, label %for.end, !dbg !12232

for.body:                                         ; preds = %for.cond
  %1 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !12233
  %edges = getelementptr inbounds %struct.BevVert, %struct.BevVert* %1, i32 0, i32 7, !dbg !12236
  %2 = load %struct.EdgeHalf*, %struct.EdgeHalf** %edges, align 8, !dbg !12236
  %3 = load i32, i32* %i, align 4, !dbg !12237
  %idxprom = sext i32 %3 to i64, !dbg !12233
  %arrayidx = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %2, i64 %idxprom, !dbg !12233
  %4 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e.addr, align 8, !dbg !12238
  %cmp1 = icmp eq %struct.EdgeHalf* %arrayidx, %4, !dbg !12239
  br i1 %cmp1, label %if.then, label %if.end, !dbg !12240

if.then:                                          ; preds = %for.body
  %5 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !12241
  %edges2 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %5, i32 0, i32 7, !dbg !12243
  %6 = load %struct.EdgeHalf*, %struct.EdgeHalf** %edges2, align 8, !dbg !12243
  %7 = load i32, i32* %i, align 4, !dbg !12244
  %add = add nsw i32 %7, 3, !dbg !12245
  %rem = srem i32 %add, 4, !dbg !12246
  %idxprom3 = sext i32 %rem to i64, !dbg !12241
  %arrayidx4 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %6, i64 %idxprom3, !dbg !12241
  %e5 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %arrayidx4, i32 0, i32 2, !dbg !12247
  %8 = load %struct.BMEdge*, %struct.BMEdge** %e5, align 8, !dbg !12247
  store %struct.BMEdge* %8, %struct.BMEdge** %bme_prev, align 8, !dbg !12248
  %9 = load %struct.BevVert*, %struct.BevVert** %bv.addr, align 8, !dbg !12249
  %edges6 = getelementptr inbounds %struct.BevVert, %struct.BevVert* %9, i32 0, i32 7, !dbg !12250
  %10 = load %struct.EdgeHalf*, %struct.EdgeHalf** %edges6, align 8, !dbg !12250
  %11 = load i32, i32* %i, align 4, !dbg !12251
  %add7 = add nsw i32 %11, 1, !dbg !12252
  %rem8 = srem i32 %add7, 4, !dbg !12253
  %idxprom9 = sext i32 %rem8 to i64, !dbg !12249
  %arrayidx10 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %10, i64 %idxprom9, !dbg !12249
  %e11 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %arrayidx10, i32 0, i32 2, !dbg !12254
  %12 = load %struct.BMEdge*, %struct.BMEdge** %e11, align 8, !dbg !12254
  store %struct.BMEdge* %12, %struct.BMEdge** %bme_next, align 8, !dbg !12255
  br label %for.end, !dbg !12256

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !12257

for.inc:                                          ; preds = %if.end
  %13 = load i32, i32* %i, align 4, !dbg !12258
  %inc = add nsw i32 %13, 1, !dbg !12258
  store i32 %inc, i32* %i, align 4, !dbg !12258
  br label %for.cond, !dbg !12259, !llvm.loop !12260

for.end:                                          ; preds = %if.then, %for.cond
  %14 = load %struct.BMEdge*, %struct.BMEdge** %bme_prev, align 8, !dbg !12262
  %head = getelementptr inbounds %struct.BMEdge, %struct.BMEdge* %14, i32 0, i32 0, !dbg !12262
  %call = call zeroext i8 @_bm_elem_flag_test(%struct.BMHeader* %head, i8 zeroext 4), !dbg !12262
  %conv = zext i8 %call to i32, !dbg !12262
  %15 = load %struct.BMEdge*, %struct.BMEdge** %bme_next, align 8, !dbg !12263
  %head12 = getelementptr inbounds %struct.BMEdge, %struct.BMEdge* %15, i32 0, i32 0, !dbg !12263
  %call13 = call zeroext i8 @_bm_elem_flag_test(%struct.BMHeader* %head12, i8 zeroext 4), !dbg !12263
  %conv14 = zext i8 %call13 to i32, !dbg !12263
  %cmp15 = icmp ne i32 %conv, %conv14, !dbg !12264
  %conv16 = zext i1 %cmp15 to i32, !dbg !12264
  %conv17 = trunc i32 %conv16 to i8, !dbg !12262
  store i8 %conv17, i8* %disable_seam, align 1, !dbg !12265
  %16 = load %struct.BMEdge*, %struct.BMEdge** %bme_prev, align 8, !dbg !12266
  %head18 = getelementptr inbounds %struct.BMEdge, %struct.BMEdge* %16, i32 0, i32 0, !dbg !12266
  %call19 = call zeroext i8 @_bm_elem_flag_test(%struct.BMHeader* %head18, i8 zeroext 8), !dbg !12266
  %conv20 = zext i8 %call19 to i32, !dbg !12266
  %17 = load %struct.BMEdge*, %struct.BMEdge** %bme_next, align 8, !dbg !12267
  %head21 = getelementptr inbounds %struct.BMEdge, %struct.BMEdge* %17, i32 0, i32 0, !dbg !12267
  %call22 = call zeroext i8 @_bm_elem_flag_test(%struct.BMHeader* %head21, i8 zeroext 8), !dbg !12267
  %conv23 = zext i8 %call22 to i32, !dbg !12267
  %cmp24 = icmp ne i32 %conv20, %conv23, !dbg !12268
  %conv25 = zext i1 %cmp24 to i32, !dbg !12268
  %conv26 = trunc i32 %conv25 to i8, !dbg !12266
  store i8 %conv26, i8* %enable_smooth, align 1, !dbg !12269
  %18 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e.addr, align 8, !dbg !12270
  %seg = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %18, i32 0, i32 7, !dbg !12271
  %19 = load i32, i32* %seg, align 8, !dbg !12271
  store i32 %19, i32* %nseg, align 4, !dbg !12272
  store i32 0, i32* %i, align 4, !dbg !12273
  br label %for.cond27, !dbg !12275

for.cond27:                                       ; preds = %for.inc43, %for.end
  %20 = load i32, i32* %i, align 4, !dbg !12276
  %21 = load i32, i32* %nseg, align 4, !dbg !12278
  %cmp28 = icmp slt i32 %20, %21, !dbg !12279
  br i1 %cmp28, label %for.body30, label %for.end45, !dbg !12280

for.body30:                                       ; preds = %for.cond27
  %22 = load %struct.VMesh*, %struct.VMesh** %vm.addr, align 8, !dbg !12281
  %23 = load i32, i32* %vmindex.addr, align 4, !dbg !12283
  %24 = load i32, i32* %i, align 4, !dbg !12284
  %call31 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %22, i32 %23, i32 0, i32 %24), !dbg !12285
  %v = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call31, i32 0, i32 0, !dbg !12286
  %25 = load %struct.BMVert*, %struct.BMVert** %v, align 8, !dbg !12286
  %26 = load %struct.VMesh*, %struct.VMesh** %vm.addr, align 8, !dbg !12287
  %27 = load i32, i32* %vmindex.addr, align 4, !dbg !12288
  %28 = load i32, i32* %i, align 4, !dbg !12289
  %add32 = add nsw i32 %28, 1, !dbg !12290
  %call33 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %26, i32 %27, i32 0, i32 %add32), !dbg !12291
  %v34 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call33, i32 0, i32 0, !dbg !12292
  %29 = load %struct.BMVert*, %struct.BMVert** %v34, align 8, !dbg !12292
  %call35 = call %struct.BMEdge* @BM_edge_exists(%struct.BMVert* %25, %struct.BMVert* %29), !dbg !12293
  store %struct.BMEdge* %call35, %struct.BMEdge** %bme, align 8, !dbg !12294
  %30 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !12295
  %31 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !12296
  %32 = load %struct.BMEdge*, %struct.BMEdge** %bme_prev, align 8, !dbg !12297
  %33 = bitcast %struct.BMEdge* %32 to i8*, !dbg !12297
  %34 = load %struct.BMEdge*, %struct.BMEdge** %bme, align 8, !dbg !12298
  %35 = bitcast %struct.BMEdge* %34 to i8*, !dbg !12298
  call void @BM_elem_attrs_copy(%struct.BMesh* %30, %struct.BMesh* %31, i8* %33, i8* %35), !dbg !12299
  %36 = load i8, i8* %disable_seam, align 1, !dbg !12300
  %tobool = icmp ne i8 %36, 0, !dbg !12300
  br i1 %tobool, label %if.then36, label %if.end38, !dbg !12302

if.then36:                                        ; preds = %for.body30
  %37 = load %struct.BMEdge*, %struct.BMEdge** %bme, align 8, !dbg !12303
  %head37 = getelementptr inbounds %struct.BMEdge, %struct.BMEdge* %37, i32 0, i32 0, !dbg !12303
  call void @_bm_elem_flag_disable(%struct.BMHeader* %head37, i8 zeroext 4), !dbg !12303
  br label %if.end38, !dbg !12303

if.end38:                                         ; preds = %if.then36, %for.body30
  %38 = load i8, i8* %enable_smooth, align 1, !dbg !12304
  %tobool39 = icmp ne i8 %38, 0, !dbg !12304
  br i1 %tobool39, label %if.then40, label %if.end42, !dbg !12306

if.then40:                                        ; preds = %if.end38
  %39 = load %struct.BMEdge*, %struct.BMEdge** %bme, align 8, !dbg !12307
  %head41 = getelementptr inbounds %struct.BMEdge, %struct.BMEdge* %39, i32 0, i32 0, !dbg !12307
  call void @_bm_elem_flag_enable(%struct.BMHeader* %head41, i8 zeroext 8), !dbg !12307
  br label %if.end42, !dbg !12307

if.end42:                                         ; preds = %if.then40, %if.end38
  br label %for.inc43, !dbg !12308

for.inc43:                                        ; preds = %if.end42
  %40 = load i32, i32* %i, align 4, !dbg !12309
  %inc44 = add nsw i32 %40, 1, !dbg !12309
  store i32 %inc44, i32* %i, align 4, !dbg !12309
  br label %for.cond27, !dbg !12310, !llvm.loop !12311

for.end45:                                        ; preds = %for.cond27
  ret void, !dbg !12313
}

declare dso_local i8* @BM_iter_as_arrayN(%struct.BMesh*, i8 zeroext, i8*, i32*, i8**, i32) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @bev_rebuild_polygon(%struct.BMesh* %bm, %struct.BevelParams* %bp, %struct.BMFace* %f) #0 !dbg !12314 {
entry:
  %bm.addr = alloca %struct.BMesh*, align 8
  %bp.addr = alloca %struct.BevelParams*, align 8
  %f.addr = alloca %struct.BMFace*, align 8
  %liter = alloca %struct.BMIter, align 8
  %l = alloca %struct.BMLoop*, align 8
  %lprev = alloca %struct.BMLoop*, align 8
  %bv = alloca %struct.BevVert*, align 8
  %v = alloca %struct.BoundVert*, align 8
  %vstart = alloca %struct.BoundVert*, align 8
  %vend = alloca %struct.BoundVert*, align 8
  %e = alloca %struct.EdgeHalf*, align 8
  %eprev = alloca %struct.EdgeHalf*, align 8
  %vm = alloca %struct.VMesh*, align 8
  %i = alloca i32, align 4
  %k = alloca i32, align 4
  %n = alloca i32, align 4
  %do_rebuild = alloca i8, align 1
  %bmv = alloca %struct.BMVert*, align 8
  %bme = alloca %struct.BMEdge*, align 8
  %bme_new = alloca %struct.BMEdge*, align 8
  %bme_prev = alloca %struct.BMEdge*, align 8
  %f_new = alloca %struct.BMFace*, align 8
  %vv = alloca %struct.BMVert**, align 8
  %vv_fix = alloca %struct.BMVert**, align 8
  %ee = alloca %struct.BMEdge**, align 8
  %_vv_count = alloca i32, align 4
  %_vv_static = alloca [32 x i8*], align 16
  %_vv_fix_count = alloca i32, align 4
  %_vv_fix_static = alloca [32 x i8*], align 16
  %_ee_count = alloca i32, align 4
  %_ee_static = alloca [32 x i8*], align 16
  store %struct.BMesh* %bm, %struct.BMesh** %bm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMesh** %bm.addr, metadata !12317, metadata !DIExpression()), !dbg !12318
  store %struct.BevelParams* %bp, %struct.BevelParams** %bp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BevelParams** %bp.addr, metadata !12319, metadata !DIExpression()), !dbg !12320
  store %struct.BMFace* %f, %struct.BMFace** %f.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.BMFace** %f.addr, metadata !12321, metadata !DIExpression()), !dbg !12322
  call void @llvm.dbg.declare(metadata %struct.BMIter* %liter, metadata !12323, metadata !DIExpression()), !dbg !12324
  call void @llvm.dbg.declare(metadata %struct.BMLoop** %l, metadata !12325, metadata !DIExpression()), !dbg !12326
  call void @llvm.dbg.declare(metadata %struct.BMLoop** %lprev, metadata !12327, metadata !DIExpression()), !dbg !12328
  call void @llvm.dbg.declare(metadata %struct.BevVert** %bv, metadata !12329, metadata !DIExpression()), !dbg !12330
  call void @llvm.dbg.declare(metadata %struct.BoundVert** %v, metadata !12331, metadata !DIExpression()), !dbg !12332
  call void @llvm.dbg.declare(metadata %struct.BoundVert** %vstart, metadata !12333, metadata !DIExpression()), !dbg !12334
  call void @llvm.dbg.declare(metadata %struct.BoundVert** %vend, metadata !12335, metadata !DIExpression()), !dbg !12336
  call void @llvm.dbg.declare(metadata %struct.EdgeHalf** %e, metadata !12337, metadata !DIExpression()), !dbg !12338
  call void @llvm.dbg.declare(metadata %struct.EdgeHalf** %eprev, metadata !12339, metadata !DIExpression()), !dbg !12340
  call void @llvm.dbg.declare(metadata %struct.VMesh** %vm, metadata !12341, metadata !DIExpression()), !dbg !12342
  call void @llvm.dbg.declare(metadata i32* %i, metadata !12343, metadata !DIExpression()), !dbg !12344
  call void @llvm.dbg.declare(metadata i32* %k, metadata !12345, metadata !DIExpression()), !dbg !12346
  call void @llvm.dbg.declare(metadata i32* %n, metadata !12347, metadata !DIExpression()), !dbg !12348
  call void @llvm.dbg.declare(metadata i8* %do_rebuild, metadata !12349, metadata !DIExpression()), !dbg !12350
  store i8 0, i8* %do_rebuild, align 1, !dbg !12350
  call void @llvm.dbg.declare(metadata %struct.BMVert** %bmv, metadata !12351, metadata !DIExpression()), !dbg !12352
  call void @llvm.dbg.declare(metadata %struct.BMEdge** %bme, metadata !12353, metadata !DIExpression()), !dbg !12354
  call void @llvm.dbg.declare(metadata %struct.BMEdge** %bme_new, metadata !12355, metadata !DIExpression()), !dbg !12356
  call void @llvm.dbg.declare(metadata %struct.BMEdge** %bme_prev, metadata !12357, metadata !DIExpression()), !dbg !12358
  call void @llvm.dbg.declare(metadata %struct.BMFace** %f_new, metadata !12359, metadata !DIExpression()), !dbg !12360
  call void @llvm.dbg.declare(metadata %struct.BMVert*** %vv, metadata !12361, metadata !DIExpression()), !dbg !12362
  store %struct.BMVert** null, %struct.BMVert*** %vv, align 8, !dbg !12362
  call void @llvm.dbg.declare(metadata %struct.BMVert*** %vv_fix, metadata !12363, metadata !DIExpression()), !dbg !12364
  store %struct.BMVert** null, %struct.BMVert*** %vv_fix, align 8, !dbg !12364
  call void @llvm.dbg.declare(metadata %struct.BMEdge*** %ee, metadata !12365, metadata !DIExpression()), !dbg !12366
  store %struct.BMEdge** null, %struct.BMEdge*** %ee, align 8, !dbg !12366
  call void @llvm.dbg.declare(metadata i32* %_vv_count, metadata !12367, metadata !DIExpression()), !dbg !12368
  store i32 0, i32* %_vv_count, align 4, !dbg !12368
  call void @llvm.dbg.declare(metadata [32 x i8*]* %_vv_static, metadata !12369, metadata !DIExpression()), !dbg !12368
  call void @llvm.dbg.declare(metadata i32* %_vv_fix_count, metadata !12370, metadata !DIExpression()), !dbg !12371
  store i32 0, i32* %_vv_fix_count, align 4, !dbg !12371
  call void @llvm.dbg.declare(metadata [32 x i8*]* %_vv_fix_static, metadata !12372, metadata !DIExpression()), !dbg !12371
  call void @llvm.dbg.declare(metadata i32* %_ee_count, metadata !12373, metadata !DIExpression()), !dbg !12374
  store i32 0, i32* %_ee_count, align 4, !dbg !12374
  call void @llvm.dbg.declare(metadata [32 x i8*]* %_ee_static, metadata !12375, metadata !DIExpression()), !dbg !12374
  %0 = load %struct.BMFace*, %struct.BMFace** %f.addr, align 8, !dbg !12376
  %1 = bitcast %struct.BMFace* %0 to i8*, !dbg !12376
  %call = call i8* @BM_iter_new(%struct.BMIter* %liter, %struct.BMesh* null, i8 zeroext 11, i8* %1), !dbg !12376
  %2 = bitcast i8* %call to %struct.BMLoop*, !dbg !12376
  store %struct.BMLoop* %2, %struct.BMLoop** %l, align 8, !dbg !12376
  br label %for.cond, !dbg !12376

for.cond:                                         ; preds = %for.inc517, %entry
  %3 = load %struct.BMLoop*, %struct.BMLoop** %l, align 8, !dbg !12378
  %tobool = icmp ne %struct.BMLoop* %3, null, !dbg !12376
  br i1 %tobool, label %for.body, label %for.end519, !dbg !12376

for.body:                                         ; preds = %for.cond
  %4 = load %struct.BMLoop*, %struct.BMLoop** %l, align 8, !dbg !12380
  %v1 = getelementptr inbounds %struct.BMLoop, %struct.BMLoop* %4, i32 0, i32 1, !dbg !12380
  %5 = load %struct.BMVert*, %struct.BMVert** %v1, align 8, !dbg !12380
  %head = getelementptr inbounds %struct.BMVert, %struct.BMVert* %5, i32 0, i32 0, !dbg !12380
  %call2 = call zeroext i8 @_bm_elem_flag_test(%struct.BMHeader* %head, i8 zeroext 16), !dbg !12380
  %tobool3 = icmp ne i8 %call2, 0, !dbg !12380
  br i1 %tobool3, label %if.then, label %if.else431, !dbg !12383

if.then:                                          ; preds = %for.body
  %6 = load %struct.BMLoop*, %struct.BMLoop** %l, align 8, !dbg !12384
  %prev = getelementptr inbounds %struct.BMLoop, %struct.BMLoop* %6, i32 0, i32 7, !dbg !12386
  %7 = load %struct.BMLoop*, %struct.BMLoop** %prev, align 8, !dbg !12386
  store %struct.BMLoop* %7, %struct.BMLoop** %lprev, align 8, !dbg !12387
  %8 = load %struct.BevelParams*, %struct.BevelParams** %bp.addr, align 8, !dbg !12388
  %9 = load %struct.BMLoop*, %struct.BMLoop** %l, align 8, !dbg !12389
  %v4 = getelementptr inbounds %struct.BMLoop, %struct.BMLoop* %9, i32 0, i32 1, !dbg !12390
  %10 = load %struct.BMVert*, %struct.BMVert** %v4, align 8, !dbg !12390
  %call5 = call %struct.BevVert* @find_bevvert(%struct.BevelParams* %8, %struct.BMVert* %10), !dbg !12391
  store %struct.BevVert* %call5, %struct.BevVert** %bv, align 8, !dbg !12392
  %11 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !12393
  %12 = load %struct.BMLoop*, %struct.BMLoop** %l, align 8, !dbg !12394
  %e6 = getelementptr inbounds %struct.BMLoop, %struct.BMLoop* %12, i32 0, i32 2, !dbg !12395
  %13 = load %struct.BMEdge*, %struct.BMEdge** %e6, align 8, !dbg !12395
  %call7 = call %struct.EdgeHalf* @find_edge_half(%struct.BevVert* %11, %struct.BMEdge* %13), !dbg !12396
  store %struct.EdgeHalf* %call7, %struct.EdgeHalf** %e, align 8, !dbg !12397
  %14 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !12398
  %e8 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %14, i32 0, i32 2, !dbg !12399
  %15 = load %struct.BMEdge*, %struct.BMEdge** %e8, align 8, !dbg !12399
  store %struct.BMEdge* %15, %struct.BMEdge** %bme, align 8, !dbg !12400
  %16 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !12401
  %17 = load %struct.BMLoop*, %struct.BMLoop** %lprev, align 8, !dbg !12402
  %e9 = getelementptr inbounds %struct.BMLoop, %struct.BMLoop* %17, i32 0, i32 2, !dbg !12403
  %18 = load %struct.BMEdge*, %struct.BMEdge** %e9, align 8, !dbg !12403
  %call10 = call %struct.EdgeHalf* @find_edge_half(%struct.BevVert* %16, %struct.BMEdge* %18), !dbg !12404
  store %struct.EdgeHalf* %call10, %struct.EdgeHalf** %eprev, align 8, !dbg !12405
  %19 = load %struct.EdgeHalf*, %struct.EdgeHalf** %eprev, align 8, !dbg !12406
  %leftv = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %19, i32 0, i32 5, !dbg !12407
  %20 = load %struct.BoundVert*, %struct.BoundVert** %leftv, align 8, !dbg !12407
  store %struct.BoundVert* %20, %struct.BoundVert** %vstart, align 8, !dbg !12408
  %21 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !12409
  %is_bev = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %21, i32 0, i32 12, !dbg !12411
  %22 = load i8, i8* %is_bev, align 4, !dbg !12411
  %tobool11 = icmp ne i8 %22, 0, !dbg !12409
  br i1 %tobool11, label %if.then12, label %if.else, !dbg !12412

if.then12:                                        ; preds = %if.then
  %23 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !12413
  %rightv = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %23, i32 0, i32 6, !dbg !12414
  %24 = load %struct.BoundVert*, %struct.BoundVert** %rightv, align 8, !dbg !12414
  store %struct.BoundVert* %24, %struct.BoundVert** %vend, align 8, !dbg !12415
  br label %if.end, !dbg !12416

if.else:                                          ; preds = %if.then
  %25 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !12417
  %leftv13 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %25, i32 0, i32 5, !dbg !12418
  %26 = load %struct.BoundVert*, %struct.BoundVert** %leftv13, align 8, !dbg !12418
  store %struct.BoundVert* %26, %struct.BoundVert** %vend, align 8, !dbg !12419
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then12
  %27 = load %struct.BoundVert*, %struct.BoundVert** %vstart, align 8, !dbg !12420
  store %struct.BoundVert* %27, %struct.BoundVert** %v, align 8, !dbg !12421
  %28 = load %struct.BevVert*, %struct.BevVert** %bv, align 8, !dbg !12422
  %vmesh = getelementptr inbounds %struct.BevVert, %struct.BevVert* %28, i32 0, i32 9, !dbg !12423
  %29 = load %struct.VMesh*, %struct.VMesh** %vmesh, align 8, !dbg !12423
  store %struct.VMesh* %29, %struct.VMesh** %vm, align 8, !dbg !12424
  %30 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !12425
  %31 = bitcast %struct.BMVert** %30 to i8*, !dbg !12425
  %cmp = icmp eq i8* %31, null, !dbg !12425
  br i1 %cmp, label %land.lhs.true, label %cond.false, !dbg !12425

land.lhs.true:                                    ; preds = %if.end
  %32 = load i32, i32* %_vv_count, align 4, !dbg !12425
  %add = add nsw i32 %32, 1, !dbg !12425
  %conv = sext i32 %add to i64, !dbg !12425
  %cmp14 = icmp uge i64 32, %conv, !dbg !12425
  br i1 %cmp14, label %cond.true, label %cond.false, !dbg !12425

cond.true:                                        ; preds = %land.lhs.true
  %arraydecay = getelementptr inbounds [32 x i8*], [32 x i8*]* %_vv_static, i64 0, i64 0, !dbg !12425
  %33 = bitcast i8** %arraydecay to i8*, !dbg !12425
  %34 = bitcast i8* %33 to %struct.BMVert**, !dbg !12425
  store %struct.BMVert** %34, %struct.BMVert*** %vv, align 8, !dbg !12425
  br label %cond.end39, !dbg !12425

cond.false:                                       ; preds = %land.lhs.true, %if.end
  %35 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !12425
  %36 = bitcast %struct.BMVert** %35 to i8*, !dbg !12425
  %arraydecay16 = getelementptr inbounds [32 x i8*], [32 x i8*]* %_vv_static, i64 0, i64 0, !dbg !12425
  %37 = bitcast i8** %arraydecay16 to i8*, !dbg !12425
  %cmp17 = icmp eq i8* %36, %37, !dbg !12425
  br i1 %cmp17, label %land.lhs.true19, label %cond.false23, !dbg !12425

land.lhs.true19:                                  ; preds = %cond.false
  %38 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !12425
  %39 = bitcast %struct.BMVert** %38 to i8*, !dbg !12425
  %cmp20 = icmp ne i8* %39, null, !dbg !12425
  br i1 %cmp20, label %cond.true22, label %cond.false23, !dbg !12425

cond.true22:                                      ; preds = %land.lhs.true19
  br label %cond.end29, !dbg !12425

cond.false23:                                     ; preds = %land.lhs.true19, %cond.false
  %40 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !12425
  %cmp24 = icmp eq %struct.BMVert** %40, null, !dbg !12425
  br i1 %cmp24, label %cond.true26, label %cond.false27, !dbg !12425

cond.true26:                                      ; preds = %cond.false23
  br label %cond.end, !dbg !12425

cond.false27:                                     ; preds = %cond.false23
  %41 = load i64 (i8*)*, i64 (i8*)** @MEM_allocN_len, align 8, !dbg !12425
  %42 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !12425
  %43 = bitcast %struct.BMVert** %42 to i8*, !dbg !12425
  %call28 = call i64 %41(i8* %43), !dbg !12425
  %div = udiv i64 %call28, 8, !dbg !12425
  br label %cond.end, !dbg !12425

cond.end:                                         ; preds = %cond.false27, %cond.true26
  %cond = phi i64 [ 0, %cond.true26 ], [ %div, %cond.false27 ], !dbg !12425
  br label %cond.end29, !dbg !12425

cond.end29:                                       ; preds = %cond.end, %cond.true22
  %cond30 = phi i64 [ 32, %cond.true22 ], [ %cond, %cond.end ], !dbg !12425
  %44 = load i32, i32* %_vv_count, align 4, !dbg !12425
  %add31 = add nsw i32 %44, 1, !dbg !12425
  %conv32 = sext i32 %add31 to i64, !dbg !12425
  %cmp33 = icmp uge i64 %cond30, %conv32, !dbg !12425
  br i1 %cmp33, label %cond.true35, label %cond.false36, !dbg !12425

cond.true35:                                      ; preds = %cond.end29
  br label %cond.end38, !dbg !12425

cond.false36:                                     ; preds = %cond.end29
  %45 = bitcast %struct.BMVert*** %vv to i8**, !dbg !12425
  %arraydecay37 = getelementptr inbounds [32 x i8*], [32 x i8*]* %_vv_static, i64 0, i64 0, !dbg !12425
  %46 = bitcast i8** %arraydecay37 to i8*, !dbg !12425
  %47 = load i32, i32* %_vv_count, align 4, !dbg !12425
  call void @_bli_array_grow_func(i8** %45, i8* %46, i32 8, i32 %47, i32 1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0)), !dbg !12425
  br label %cond.end38, !dbg !12425

cond.end38:                                       ; preds = %cond.false36, %cond.true35
  br label %cond.end39, !dbg !12425

cond.end39:                                       ; preds = %cond.end38, %cond.true
  %48 = load i32, i32* %_vv_count, align 4, !dbg !12425
  %add40 = add nsw i32 %48, 1, !dbg !12425
  store i32 %add40, i32* %_vv_count, align 4, !dbg !12425
  %49 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !12425
  %nv = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %49, i32 0, i32 2, !dbg !12425
  %v41 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %nv, i32 0, i32 0, !dbg !12425
  %50 = load %struct.BMVert*, %struct.BMVert** %v41, align 8, !dbg !12425
  %51 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !12425
  %52 = load i32, i32* %_vv_count, align 4, !dbg !12425
  %sub = sub nsw i32 %52, 1, !dbg !12425
  %idxprom = sext i32 %sub to i64, !dbg !12425
  %arrayidx = getelementptr inbounds %struct.BMVert*, %struct.BMVert** %51, i64 %idxprom, !dbg !12425
  store %struct.BMVert* %50, %struct.BMVert** %arrayidx, align 8, !dbg !12425
  %53 = load %struct.BMEdge**, %struct.BMEdge*** %ee, align 8, !dbg !12426
  %54 = bitcast %struct.BMEdge** %53 to i8*, !dbg !12426
  %cmp42 = icmp eq i8* %54, null, !dbg !12426
  br i1 %cmp42, label %land.lhs.true44, label %cond.false51, !dbg !12426

land.lhs.true44:                                  ; preds = %cond.end39
  %55 = load i32, i32* %_ee_count, align 4, !dbg !12426
  %add45 = add nsw i32 %55, 1, !dbg !12426
  %conv46 = sext i32 %add45 to i64, !dbg !12426
  %cmp47 = icmp uge i64 32, %conv46, !dbg !12426
  br i1 %cmp47, label %cond.true49, label %cond.false51, !dbg !12426

cond.true49:                                      ; preds = %land.lhs.true44
  %arraydecay50 = getelementptr inbounds [32 x i8*], [32 x i8*]* %_ee_static, i64 0, i64 0, !dbg !12426
  %56 = bitcast i8** %arraydecay50 to i8*, !dbg !12426
  %57 = bitcast i8* %56 to %struct.BMEdge**, !dbg !12426
  store %struct.BMEdge** %57, %struct.BMEdge*** %ee, align 8, !dbg !12426
  br label %cond.end78, !dbg !12426

cond.false51:                                     ; preds = %land.lhs.true44, %cond.end39
  %58 = load %struct.BMEdge**, %struct.BMEdge*** %ee, align 8, !dbg !12426
  %59 = bitcast %struct.BMEdge** %58 to i8*, !dbg !12426
  %arraydecay52 = getelementptr inbounds [32 x i8*], [32 x i8*]* %_ee_static, i64 0, i64 0, !dbg !12426
  %60 = bitcast i8** %arraydecay52 to i8*, !dbg !12426
  %cmp53 = icmp eq i8* %59, %60, !dbg !12426
  br i1 %cmp53, label %land.lhs.true55, label %cond.false59, !dbg !12426

land.lhs.true55:                                  ; preds = %cond.false51
  %61 = load %struct.BMEdge**, %struct.BMEdge*** %ee, align 8, !dbg !12426
  %62 = bitcast %struct.BMEdge** %61 to i8*, !dbg !12426
  %cmp56 = icmp ne i8* %62, null, !dbg !12426
  br i1 %cmp56, label %cond.true58, label %cond.false59, !dbg !12426

cond.true58:                                      ; preds = %land.lhs.true55
  br label %cond.end68, !dbg !12426

cond.false59:                                     ; preds = %land.lhs.true55, %cond.false51
  %63 = load %struct.BMEdge**, %struct.BMEdge*** %ee, align 8, !dbg !12426
  %cmp60 = icmp eq %struct.BMEdge** %63, null, !dbg !12426
  br i1 %cmp60, label %cond.true62, label %cond.false63, !dbg !12426

cond.true62:                                      ; preds = %cond.false59
  br label %cond.end66, !dbg !12426

cond.false63:                                     ; preds = %cond.false59
  %64 = load i64 (i8*)*, i64 (i8*)** @MEM_allocN_len, align 8, !dbg !12426
  %65 = load %struct.BMEdge**, %struct.BMEdge*** %ee, align 8, !dbg !12426
  %66 = bitcast %struct.BMEdge** %65 to i8*, !dbg !12426
  %call64 = call i64 %64(i8* %66), !dbg !12426
  %div65 = udiv i64 %call64, 8, !dbg !12426
  br label %cond.end66, !dbg !12426

cond.end66:                                       ; preds = %cond.false63, %cond.true62
  %cond67 = phi i64 [ 0, %cond.true62 ], [ %div65, %cond.false63 ], !dbg !12426
  br label %cond.end68, !dbg !12426

cond.end68:                                       ; preds = %cond.end66, %cond.true58
  %cond69 = phi i64 [ 32, %cond.true58 ], [ %cond67, %cond.end66 ], !dbg !12426
  %67 = load i32, i32* %_ee_count, align 4, !dbg !12426
  %add70 = add nsw i32 %67, 1, !dbg !12426
  %conv71 = sext i32 %add70 to i64, !dbg !12426
  %cmp72 = icmp uge i64 %cond69, %conv71, !dbg !12426
  br i1 %cmp72, label %cond.true74, label %cond.false75, !dbg !12426

cond.true74:                                      ; preds = %cond.end68
  br label %cond.end77, !dbg !12426

cond.false75:                                     ; preds = %cond.end68
  %68 = bitcast %struct.BMEdge*** %ee to i8**, !dbg !12426
  %arraydecay76 = getelementptr inbounds [32 x i8*], [32 x i8*]* %_ee_static, i64 0, i64 0, !dbg !12426
  %69 = bitcast i8** %arraydecay76 to i8*, !dbg !12426
  %70 = load i32, i32* %_ee_count, align 4, !dbg !12426
  call void @_bli_array_grow_func(i8** %68, i8* %69, i32 8, i32 %70, i32 1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0)), !dbg !12426
  br label %cond.end77, !dbg !12426

cond.end77:                                       ; preds = %cond.false75, %cond.true74
  br label %cond.end78, !dbg !12426

cond.end78:                                       ; preds = %cond.end77, %cond.true49
  %71 = load i32, i32* %_ee_count, align 4, !dbg !12426
  %add79 = add nsw i32 %71, 1, !dbg !12426
  store i32 %add79, i32* %_ee_count, align 4, !dbg !12426
  %72 = load %struct.BMEdge*, %struct.BMEdge** %bme, align 8, !dbg !12426
  %73 = load %struct.BMEdge**, %struct.BMEdge*** %ee, align 8, !dbg !12426
  %74 = load i32, i32* %_ee_count, align 4, !dbg !12426
  %sub80 = sub nsw i32 %74, 1, !dbg !12426
  %idxprom81 = sext i32 %sub80 to i64, !dbg !12426
  %arrayidx82 = getelementptr inbounds %struct.BMEdge*, %struct.BMEdge** %73, i64 %idxprom81, !dbg !12426
  store %struct.BMEdge* %72, %struct.BMEdge** %arrayidx82, align 8, !dbg !12426
  br label %while.cond, !dbg !12427

while.cond:                                       ; preds = %cond.end426, %cond.end78
  %75 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !12428
  %76 = load %struct.BoundVert*, %struct.BoundVert** %vend, align 8, !dbg !12429
  %cmp83 = icmp ne %struct.BoundVert* %75, %76, !dbg !12430
  br i1 %cmp83, label %while.body, label %while.end, !dbg !12427

while.body:                                       ; preds = %while.cond
  %77 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !12431
  %mesh_kind = getelementptr inbounds %struct.VMesh, %struct.VMesh* %77, i32 0, i32 4, !dbg !12434
  %78 = load i32, i32* %mesh_kind, align 8, !dbg !12434
  %cmp85 = icmp eq i32 %78, 0, !dbg !12435
  br i1 %cmp85, label %land.lhs.true87, label %if.else236, !dbg !12436

land.lhs.true87:                                  ; preds = %while.body
  %79 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !12437
  %ebev = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %79, i32 0, i32 5, !dbg !12438
  %80 = load %struct.EdgeHalf*, %struct.EdgeHalf** %ebev, align 8, !dbg !12438
  %tobool88 = icmp ne %struct.EdgeHalf* %80, null, !dbg !12437
  br i1 %tobool88, label %land.lhs.true89, label %if.else236, !dbg !12439

land.lhs.true89:                                  ; preds = %land.lhs.true87
  %81 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !12440
  %ebev90 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %81, i32 0, i32 5, !dbg !12441
  %82 = load %struct.EdgeHalf*, %struct.EdgeHalf** %ebev90, align 8, !dbg !12441
  %seg = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %82, i32 0, i32 7, !dbg !12442
  %83 = load i32, i32* %seg, align 8, !dbg !12442
  %cmp91 = icmp sgt i32 %83, 1, !dbg !12443
  br i1 %cmp91, label %land.lhs.true93, label %if.else236, !dbg !12444

land.lhs.true93:                                  ; preds = %land.lhs.true89
  %84 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !12445
  %ebev94 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %84, i32 0, i32 5, !dbg !12446
  %85 = load %struct.EdgeHalf*, %struct.EdgeHalf** %ebev94, align 8, !dbg !12446
  %86 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !12447
  %cmp95 = icmp ne %struct.EdgeHalf* %85, %86, !dbg !12448
  br i1 %cmp95, label %land.lhs.true97, label %if.else236, !dbg !12449

land.lhs.true97:                                  ; preds = %land.lhs.true93
  %87 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !12450
  %ebev98 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %87, i32 0, i32 5, !dbg !12451
  %88 = load %struct.EdgeHalf*, %struct.EdgeHalf** %ebev98, align 8, !dbg !12451
  %89 = load %struct.EdgeHalf*, %struct.EdgeHalf** %eprev, align 8, !dbg !12452
  %cmp99 = icmp ne %struct.EdgeHalf* %88, %89, !dbg !12453
  br i1 %cmp99, label %if.then101, label %if.else236, !dbg !12454

if.then101:                                       ; preds = %land.lhs.true97
  %90 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !12455
  %index = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %90, i32 0, i32 6, !dbg !12457
  %91 = load i32, i32* %index, align 8, !dbg !12457
  store i32 %91, i32* %i, align 4, !dbg !12458
  %92 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !12459
  %ebev102 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %92, i32 0, i32 5, !dbg !12460
  %93 = load %struct.EdgeHalf*, %struct.EdgeHalf** %ebev102, align 8, !dbg !12460
  store %struct.EdgeHalf* %93, %struct.EdgeHalf** %e, align 8, !dbg !12461
  store i32 1, i32* %k, align 4, !dbg !12462
  br label %for.cond103, !dbg !12464

for.cond103:                                      ; preds = %for.inc, %if.then101
  %94 = load i32, i32* %k, align 4, !dbg !12465
  %95 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !12467
  %seg104 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %95, i32 0, i32 7, !dbg !12468
  %96 = load i32, i32* %seg104, align 8, !dbg !12468
  %cmp105 = icmp slt i32 %94, %96, !dbg !12469
  br i1 %cmp105, label %for.body107, label %for.end, !dbg !12470

for.body107:                                      ; preds = %for.cond103
  %97 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !12471
  %98 = load i32, i32* %i, align 4, !dbg !12473
  %99 = load i32, i32* %k, align 4, !dbg !12474
  %call108 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %97, i32 %98, i32 0, i32 %99), !dbg !12475
  %v109 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call108, i32 0, i32 0, !dbg !12476
  %100 = load %struct.BMVert*, %struct.BMVert** %v109, align 8, !dbg !12476
  store %struct.BMVert* %100, %struct.BMVert** %bmv, align 8, !dbg !12477
  %101 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !12478
  %102 = bitcast %struct.BMVert** %101 to i8*, !dbg !12478
  %cmp110 = icmp eq i8* %102, null, !dbg !12478
  br i1 %cmp110, label %land.lhs.true112, label %cond.false119, !dbg !12478

land.lhs.true112:                                 ; preds = %for.body107
  %103 = load i32, i32* %_vv_count, align 4, !dbg !12478
  %add113 = add nsw i32 %103, 1, !dbg !12478
  %conv114 = sext i32 %add113 to i64, !dbg !12478
  %cmp115 = icmp uge i64 32, %conv114, !dbg !12478
  br i1 %cmp115, label %cond.true117, label %cond.false119, !dbg !12478

cond.true117:                                     ; preds = %land.lhs.true112
  %arraydecay118 = getelementptr inbounds [32 x i8*], [32 x i8*]* %_vv_static, i64 0, i64 0, !dbg !12478
  %104 = bitcast i8** %arraydecay118 to i8*, !dbg !12478
  %105 = bitcast i8* %104 to %struct.BMVert**, !dbg !12478
  store %struct.BMVert** %105, %struct.BMVert*** %vv, align 8, !dbg !12478
  br label %cond.end146, !dbg !12478

cond.false119:                                    ; preds = %land.lhs.true112, %for.body107
  %106 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !12478
  %107 = bitcast %struct.BMVert** %106 to i8*, !dbg !12478
  %arraydecay120 = getelementptr inbounds [32 x i8*], [32 x i8*]* %_vv_static, i64 0, i64 0, !dbg !12478
  %108 = bitcast i8** %arraydecay120 to i8*, !dbg !12478
  %cmp121 = icmp eq i8* %107, %108, !dbg !12478
  br i1 %cmp121, label %land.lhs.true123, label %cond.false127, !dbg !12478

land.lhs.true123:                                 ; preds = %cond.false119
  %109 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !12478
  %110 = bitcast %struct.BMVert** %109 to i8*, !dbg !12478
  %cmp124 = icmp ne i8* %110, null, !dbg !12478
  br i1 %cmp124, label %cond.true126, label %cond.false127, !dbg !12478

cond.true126:                                     ; preds = %land.lhs.true123
  br label %cond.end136, !dbg !12478

cond.false127:                                    ; preds = %land.lhs.true123, %cond.false119
  %111 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !12478
  %cmp128 = icmp eq %struct.BMVert** %111, null, !dbg !12478
  br i1 %cmp128, label %cond.true130, label %cond.false131, !dbg !12478

cond.true130:                                     ; preds = %cond.false127
  br label %cond.end134, !dbg !12478

cond.false131:                                    ; preds = %cond.false127
  %112 = load i64 (i8*)*, i64 (i8*)** @MEM_allocN_len, align 8, !dbg !12478
  %113 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !12478
  %114 = bitcast %struct.BMVert** %113 to i8*, !dbg !12478
  %call132 = call i64 %112(i8* %114), !dbg !12478
  %div133 = udiv i64 %call132, 8, !dbg !12478
  br label %cond.end134, !dbg !12478

cond.end134:                                      ; preds = %cond.false131, %cond.true130
  %cond135 = phi i64 [ 0, %cond.true130 ], [ %div133, %cond.false131 ], !dbg !12478
  br label %cond.end136, !dbg !12478

cond.end136:                                      ; preds = %cond.end134, %cond.true126
  %cond137 = phi i64 [ 32, %cond.true126 ], [ %cond135, %cond.end134 ], !dbg !12478
  %115 = load i32, i32* %_vv_count, align 4, !dbg !12478
  %add138 = add nsw i32 %115, 1, !dbg !12478
  %conv139 = sext i32 %add138 to i64, !dbg !12478
  %cmp140 = icmp uge i64 %cond137, %conv139, !dbg !12478
  br i1 %cmp140, label %cond.true142, label %cond.false143, !dbg !12478

cond.true142:                                     ; preds = %cond.end136
  br label %cond.end145, !dbg !12478

cond.false143:                                    ; preds = %cond.end136
  %116 = bitcast %struct.BMVert*** %vv to i8**, !dbg !12478
  %arraydecay144 = getelementptr inbounds [32 x i8*], [32 x i8*]* %_vv_static, i64 0, i64 0, !dbg !12478
  %117 = bitcast i8** %arraydecay144 to i8*, !dbg !12478
  %118 = load i32, i32* %_vv_count, align 4, !dbg !12478
  call void @_bli_array_grow_func(i8** %116, i8* %117, i32 8, i32 %118, i32 1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0)), !dbg !12478
  br label %cond.end145, !dbg !12478

cond.end145:                                      ; preds = %cond.false143, %cond.true142
  br label %cond.end146, !dbg !12478

cond.end146:                                      ; preds = %cond.end145, %cond.true117
  %119 = load i32, i32* %_vv_count, align 4, !dbg !12478
  %add147 = add nsw i32 %119, 1, !dbg !12478
  store i32 %add147, i32* %_vv_count, align 4, !dbg !12478
  %120 = load %struct.BMVert*, %struct.BMVert** %bmv, align 8, !dbg !12478
  %121 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !12478
  %122 = load i32, i32* %_vv_count, align 4, !dbg !12478
  %sub148 = sub nsw i32 %122, 1, !dbg !12478
  %idxprom149 = sext i32 %sub148 to i64, !dbg !12478
  %arrayidx150 = getelementptr inbounds %struct.BMVert*, %struct.BMVert** %121, i64 %idxprom149, !dbg !12478
  store %struct.BMVert* %120, %struct.BMVert** %arrayidx150, align 8, !dbg !12478
  %123 = load %struct.BMEdge**, %struct.BMEdge*** %ee, align 8, !dbg !12479
  %124 = bitcast %struct.BMEdge** %123 to i8*, !dbg !12479
  %cmp151 = icmp eq i8* %124, null, !dbg !12479
  br i1 %cmp151, label %land.lhs.true153, label %cond.false160, !dbg !12479

land.lhs.true153:                                 ; preds = %cond.end146
  %125 = load i32, i32* %_ee_count, align 4, !dbg !12479
  %add154 = add nsw i32 %125, 1, !dbg !12479
  %conv155 = sext i32 %add154 to i64, !dbg !12479
  %cmp156 = icmp uge i64 32, %conv155, !dbg !12479
  br i1 %cmp156, label %cond.true158, label %cond.false160, !dbg !12479

cond.true158:                                     ; preds = %land.lhs.true153
  %arraydecay159 = getelementptr inbounds [32 x i8*], [32 x i8*]* %_ee_static, i64 0, i64 0, !dbg !12479
  %126 = bitcast i8** %arraydecay159 to i8*, !dbg !12479
  %127 = bitcast i8* %126 to %struct.BMEdge**, !dbg !12479
  store %struct.BMEdge** %127, %struct.BMEdge*** %ee, align 8, !dbg !12479
  br label %cond.end187, !dbg !12479

cond.false160:                                    ; preds = %land.lhs.true153, %cond.end146
  %128 = load %struct.BMEdge**, %struct.BMEdge*** %ee, align 8, !dbg !12479
  %129 = bitcast %struct.BMEdge** %128 to i8*, !dbg !12479
  %arraydecay161 = getelementptr inbounds [32 x i8*], [32 x i8*]* %_ee_static, i64 0, i64 0, !dbg !12479
  %130 = bitcast i8** %arraydecay161 to i8*, !dbg !12479
  %cmp162 = icmp eq i8* %129, %130, !dbg !12479
  br i1 %cmp162, label %land.lhs.true164, label %cond.false168, !dbg !12479

land.lhs.true164:                                 ; preds = %cond.false160
  %131 = load %struct.BMEdge**, %struct.BMEdge*** %ee, align 8, !dbg !12479
  %132 = bitcast %struct.BMEdge** %131 to i8*, !dbg !12479
  %cmp165 = icmp ne i8* %132, null, !dbg !12479
  br i1 %cmp165, label %cond.true167, label %cond.false168, !dbg !12479

cond.true167:                                     ; preds = %land.lhs.true164
  br label %cond.end177, !dbg !12479

cond.false168:                                    ; preds = %land.lhs.true164, %cond.false160
  %133 = load %struct.BMEdge**, %struct.BMEdge*** %ee, align 8, !dbg !12479
  %cmp169 = icmp eq %struct.BMEdge** %133, null, !dbg !12479
  br i1 %cmp169, label %cond.true171, label %cond.false172, !dbg !12479

cond.true171:                                     ; preds = %cond.false168
  br label %cond.end175, !dbg !12479

cond.false172:                                    ; preds = %cond.false168
  %134 = load i64 (i8*)*, i64 (i8*)** @MEM_allocN_len, align 8, !dbg !12479
  %135 = load %struct.BMEdge**, %struct.BMEdge*** %ee, align 8, !dbg !12479
  %136 = bitcast %struct.BMEdge** %135 to i8*, !dbg !12479
  %call173 = call i64 %134(i8* %136), !dbg !12479
  %div174 = udiv i64 %call173, 8, !dbg !12479
  br label %cond.end175, !dbg !12479

cond.end175:                                      ; preds = %cond.false172, %cond.true171
  %cond176 = phi i64 [ 0, %cond.true171 ], [ %div174, %cond.false172 ], !dbg !12479
  br label %cond.end177, !dbg !12479

cond.end177:                                      ; preds = %cond.end175, %cond.true167
  %cond178 = phi i64 [ 32, %cond.true167 ], [ %cond176, %cond.end175 ], !dbg !12479
  %137 = load i32, i32* %_ee_count, align 4, !dbg !12479
  %add179 = add nsw i32 %137, 1, !dbg !12479
  %conv180 = sext i32 %add179 to i64, !dbg !12479
  %cmp181 = icmp uge i64 %cond178, %conv180, !dbg !12479
  br i1 %cmp181, label %cond.true183, label %cond.false184, !dbg !12479

cond.true183:                                     ; preds = %cond.end177
  br label %cond.end186, !dbg !12479

cond.false184:                                    ; preds = %cond.end177
  %138 = bitcast %struct.BMEdge*** %ee to i8**, !dbg !12479
  %arraydecay185 = getelementptr inbounds [32 x i8*], [32 x i8*]* %_ee_static, i64 0, i64 0, !dbg !12479
  %139 = bitcast i8** %arraydecay185 to i8*, !dbg !12479
  %140 = load i32, i32* %_ee_count, align 4, !dbg !12479
  call void @_bli_array_grow_func(i8** %138, i8* %139, i32 8, i32 %140, i32 1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0)), !dbg !12479
  br label %cond.end186, !dbg !12479

cond.end186:                                      ; preds = %cond.false184, %cond.true183
  br label %cond.end187, !dbg !12479

cond.end187:                                      ; preds = %cond.end186, %cond.true158
  %141 = load i32, i32* %_ee_count, align 4, !dbg !12479
  %add188 = add nsw i32 %141, 1, !dbg !12479
  store i32 %add188, i32* %_ee_count, align 4, !dbg !12479
  %142 = load %struct.BMEdge*, %struct.BMEdge** %bme, align 8, !dbg !12479
  %143 = load %struct.BMEdge**, %struct.BMEdge*** %ee, align 8, !dbg !12479
  %144 = load i32, i32* %_ee_count, align 4, !dbg !12479
  %sub189 = sub nsw i32 %144, 1, !dbg !12479
  %idxprom190 = sext i32 %sub189 to i64, !dbg !12479
  %arrayidx191 = getelementptr inbounds %struct.BMEdge*, %struct.BMEdge** %143, i64 %idxprom190, !dbg !12479
  store %struct.BMEdge* %142, %struct.BMEdge** %arrayidx191, align 8, !dbg !12479
  %145 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !12480
  %is_seam = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %145, i32 0, i32 14, !dbg !12482
  %146 = load i8, i8* %is_seam, align 2, !dbg !12482
  %tobool192 = icmp ne i8 %146, 0, !dbg !12480
  br i1 %tobool192, label %if.end235, label %if.then193, !dbg !12483

if.then193:                                       ; preds = %cond.end187
  %147 = load %struct.BMVert**, %struct.BMVert*** %vv_fix, align 8, !dbg !12484
  %148 = bitcast %struct.BMVert** %147 to i8*, !dbg !12484
  %cmp194 = icmp eq i8* %148, null, !dbg !12484
  br i1 %cmp194, label %land.lhs.true196, label %cond.false203, !dbg !12484

land.lhs.true196:                                 ; preds = %if.then193
  %149 = load i32, i32* %_vv_fix_count, align 4, !dbg !12484
  %add197 = add nsw i32 %149, 1, !dbg !12484
  %conv198 = sext i32 %add197 to i64, !dbg !12484
  %cmp199 = icmp uge i64 32, %conv198, !dbg !12484
  br i1 %cmp199, label %cond.true201, label %cond.false203, !dbg !12484

cond.true201:                                     ; preds = %land.lhs.true196
  %arraydecay202 = getelementptr inbounds [32 x i8*], [32 x i8*]* %_vv_fix_static, i64 0, i64 0, !dbg !12484
  %150 = bitcast i8** %arraydecay202 to i8*, !dbg !12484
  %151 = bitcast i8* %150 to %struct.BMVert**, !dbg !12484
  store %struct.BMVert** %151, %struct.BMVert*** %vv_fix, align 8, !dbg !12484
  br label %cond.end230, !dbg !12484

cond.false203:                                    ; preds = %land.lhs.true196, %if.then193
  %152 = load %struct.BMVert**, %struct.BMVert*** %vv_fix, align 8, !dbg !12484
  %153 = bitcast %struct.BMVert** %152 to i8*, !dbg !12484
  %arraydecay204 = getelementptr inbounds [32 x i8*], [32 x i8*]* %_vv_fix_static, i64 0, i64 0, !dbg !12484
  %154 = bitcast i8** %arraydecay204 to i8*, !dbg !12484
  %cmp205 = icmp eq i8* %153, %154, !dbg !12484
  br i1 %cmp205, label %land.lhs.true207, label %cond.false211, !dbg !12484

land.lhs.true207:                                 ; preds = %cond.false203
  %155 = load %struct.BMVert**, %struct.BMVert*** %vv_fix, align 8, !dbg !12484
  %156 = bitcast %struct.BMVert** %155 to i8*, !dbg !12484
  %cmp208 = icmp ne i8* %156, null, !dbg !12484
  br i1 %cmp208, label %cond.true210, label %cond.false211, !dbg !12484

cond.true210:                                     ; preds = %land.lhs.true207
  br label %cond.end220, !dbg !12484

cond.false211:                                    ; preds = %land.lhs.true207, %cond.false203
  %157 = load %struct.BMVert**, %struct.BMVert*** %vv_fix, align 8, !dbg !12484
  %cmp212 = icmp eq %struct.BMVert** %157, null, !dbg !12484
  br i1 %cmp212, label %cond.true214, label %cond.false215, !dbg !12484

cond.true214:                                     ; preds = %cond.false211
  br label %cond.end218, !dbg !12484

cond.false215:                                    ; preds = %cond.false211
  %158 = load i64 (i8*)*, i64 (i8*)** @MEM_allocN_len, align 8, !dbg !12484
  %159 = load %struct.BMVert**, %struct.BMVert*** %vv_fix, align 8, !dbg !12484
  %160 = bitcast %struct.BMVert** %159 to i8*, !dbg !12484
  %call216 = call i64 %158(i8* %160), !dbg !12484
  %div217 = udiv i64 %call216, 8, !dbg !12484
  br label %cond.end218, !dbg !12484

cond.end218:                                      ; preds = %cond.false215, %cond.true214
  %cond219 = phi i64 [ 0, %cond.true214 ], [ %div217, %cond.false215 ], !dbg !12484
  br label %cond.end220, !dbg !12484

cond.end220:                                      ; preds = %cond.end218, %cond.true210
  %cond221 = phi i64 [ 32, %cond.true210 ], [ %cond219, %cond.end218 ], !dbg !12484
  %161 = load i32, i32* %_vv_fix_count, align 4, !dbg !12484
  %add222 = add nsw i32 %161, 1, !dbg !12484
  %conv223 = sext i32 %add222 to i64, !dbg !12484
  %cmp224 = icmp uge i64 %cond221, %conv223, !dbg !12484
  br i1 %cmp224, label %cond.true226, label %cond.false227, !dbg !12484

cond.true226:                                     ; preds = %cond.end220
  br label %cond.end229, !dbg !12484

cond.false227:                                    ; preds = %cond.end220
  %162 = bitcast %struct.BMVert*** %vv_fix to i8**, !dbg !12484
  %arraydecay228 = getelementptr inbounds [32 x i8*], [32 x i8*]* %_vv_fix_static, i64 0, i64 0, !dbg !12484
  %163 = bitcast i8** %arraydecay228 to i8*, !dbg !12484
  %164 = load i32, i32* %_vv_fix_count, align 4, !dbg !12484
  call void @_bli_array_grow_func(i8** %162, i8* %163, i32 8, i32 %164, i32 1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i64 0, i64 0)), !dbg !12484
  br label %cond.end229, !dbg !12484

cond.end229:                                      ; preds = %cond.false227, %cond.true226
  br label %cond.end230, !dbg !12484

cond.end230:                                      ; preds = %cond.end229, %cond.true201
  %165 = load i32, i32* %_vv_fix_count, align 4, !dbg !12484
  %add231 = add nsw i32 %165, 1, !dbg !12484
  store i32 %add231, i32* %_vv_fix_count, align 4, !dbg !12484
  %166 = load %struct.BMVert*, %struct.BMVert** %bmv, align 8, !dbg !12484
  %167 = load %struct.BMVert**, %struct.BMVert*** %vv_fix, align 8, !dbg !12484
  %168 = load i32, i32* %_vv_fix_count, align 4, !dbg !12484
  %sub232 = sub nsw i32 %168, 1, !dbg !12484
  %idxprom233 = sext i32 %sub232 to i64, !dbg !12484
  %arrayidx234 = getelementptr inbounds %struct.BMVert*, %struct.BMVert** %167, i64 %idxprom233, !dbg !12484
  store %struct.BMVert* %166, %struct.BMVert** %arrayidx234, align 8, !dbg !12484
  br label %if.end235, !dbg !12484

if.end235:                                        ; preds = %cond.end230, %cond.end187
  br label %for.inc, !dbg !12485

for.inc:                                          ; preds = %if.end235
  %169 = load i32, i32* %k, align 4, !dbg !12486
  %inc = add nsw i32 %169, 1, !dbg !12486
  store i32 %inc, i32* %k, align 4, !dbg !12486
  br label %for.cond103, !dbg !12487, !llvm.loop !12488

for.end:                                          ; preds = %for.cond103
  br label %if.end345, !dbg !12490

if.else236:                                       ; preds = %land.lhs.true97, %land.lhs.true93, %land.lhs.true89, %land.lhs.true87, %while.body
  %170 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !12491
  %mesh_kind237 = getelementptr inbounds %struct.VMesh, %struct.VMesh* %170, i32 0, i32 4, !dbg !12493
  %171 = load i32, i32* %mesh_kind237, align 8, !dbg !12493
  %cmp238 = icmp eq i32 %171, 2, !dbg !12494
  br i1 %cmp238, label %land.lhs.true240, label %if.end344, !dbg !12495

land.lhs.true240:                                 ; preds = %if.else236
  %172 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !12496
  %seg241 = getelementptr inbounds %struct.VMesh, %struct.VMesh* %172, i32 0, i32 3, !dbg !12497
  %173 = load i32, i32* %seg241, align 4, !dbg !12497
  %cmp242 = icmp sgt i32 %173, 1, !dbg !12498
  br i1 %cmp242, label %land.lhs.true244, label %if.end344, !dbg !12499

land.lhs.true244:                                 ; preds = %land.lhs.true240
  %174 = load %struct.EdgeHalf*, %struct.EdgeHalf** %e, align 8, !dbg !12500
  %is_bev245 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %174, i32 0, i32 12, !dbg !12501
  %175 = load i8, i8* %is_bev245, align 4, !dbg !12501
  %tobool246 = icmp ne i8 %175, 0, !dbg !12500
  br i1 %tobool246, label %if.end344, label %land.lhs.true247, !dbg !12502

land.lhs.true247:                                 ; preds = %land.lhs.true244
  %176 = load %struct.EdgeHalf*, %struct.EdgeHalf** %eprev, align 8, !dbg !12503
  %is_bev248 = getelementptr inbounds %struct.EdgeHalf, %struct.EdgeHalf* %176, i32 0, i32 12, !dbg !12504
  %177 = load i8, i8* %is_bev248, align 4, !dbg !12504
  %tobool249 = icmp ne i8 %177, 0, !dbg !12503
  br i1 %tobool249, label %if.end344, label %if.then250, !dbg !12505

if.then250:                                       ; preds = %land.lhs.true247
  %178 = load %struct.BoundVert*, %struct.BoundVert** %vend, align 8, !dbg !12506
  %index251 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %178, i32 0, i32 6, !dbg !12508
  %179 = load i32, i32* %index251, align 8, !dbg !12508
  store i32 %179, i32* %i, align 4, !dbg !12509
  %180 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !12510
  %seg252 = getelementptr inbounds %struct.VMesh, %struct.VMesh* %180, i32 0, i32 3, !dbg !12512
  %181 = load i32, i32* %seg252, align 4, !dbg !12512
  %sub253 = sub nsw i32 %181, 1, !dbg !12513
  store i32 %sub253, i32* %k, align 4, !dbg !12514
  br label %for.cond254, !dbg !12515

for.cond254:                                      ; preds = %for.inc342, %if.then250
  %182 = load i32, i32* %k, align 4, !dbg !12516
  %cmp255 = icmp sgt i32 %182, 0, !dbg !12518
  br i1 %cmp255, label %for.body257, label %for.end343, !dbg !12519

for.body257:                                      ; preds = %for.cond254
  %183 = load %struct.VMesh*, %struct.VMesh** %vm, align 8, !dbg !12520
  %184 = load i32, i32* %i, align 4, !dbg !12522
  %185 = load i32, i32* %k, align 4, !dbg !12523
  %call258 = call %struct.NewVert* @mesh_vert(%struct.VMesh* %183, i32 %184, i32 0, i32 %185), !dbg !12524
  %v259 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %call258, i32 0, i32 0, !dbg !12525
  %186 = load %struct.BMVert*, %struct.BMVert** %v259, align 8, !dbg !12525
  store %struct.BMVert* %186, %struct.BMVert** %bmv, align 8, !dbg !12526
  %187 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !12527
  %188 = bitcast %struct.BMVert** %187 to i8*, !dbg !12527
  %cmp260 = icmp eq i8* %188, null, !dbg !12527
  br i1 %cmp260, label %land.lhs.true262, label %cond.false269, !dbg !12527

land.lhs.true262:                                 ; preds = %for.body257
  %189 = load i32, i32* %_vv_count, align 4, !dbg !12527
  %add263 = add nsw i32 %189, 1, !dbg !12527
  %conv264 = sext i32 %add263 to i64, !dbg !12527
  %cmp265 = icmp uge i64 32, %conv264, !dbg !12527
  br i1 %cmp265, label %cond.true267, label %cond.false269, !dbg !12527

cond.true267:                                     ; preds = %land.lhs.true262
  %arraydecay268 = getelementptr inbounds [32 x i8*], [32 x i8*]* %_vv_static, i64 0, i64 0, !dbg !12527
  %190 = bitcast i8** %arraydecay268 to i8*, !dbg !12527
  %191 = bitcast i8* %190 to %struct.BMVert**, !dbg !12527
  store %struct.BMVert** %191, %struct.BMVert*** %vv, align 8, !dbg !12527
  br label %cond.end296, !dbg !12527

cond.false269:                                    ; preds = %land.lhs.true262, %for.body257
  %192 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !12527
  %193 = bitcast %struct.BMVert** %192 to i8*, !dbg !12527
  %arraydecay270 = getelementptr inbounds [32 x i8*], [32 x i8*]* %_vv_static, i64 0, i64 0, !dbg !12527
  %194 = bitcast i8** %arraydecay270 to i8*, !dbg !12527
  %cmp271 = icmp eq i8* %193, %194, !dbg !12527
  br i1 %cmp271, label %land.lhs.true273, label %cond.false277, !dbg !12527

land.lhs.true273:                                 ; preds = %cond.false269
  %195 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !12527
  %196 = bitcast %struct.BMVert** %195 to i8*, !dbg !12527
  %cmp274 = icmp ne i8* %196, null, !dbg !12527
  br i1 %cmp274, label %cond.true276, label %cond.false277, !dbg !12527

cond.true276:                                     ; preds = %land.lhs.true273
  br label %cond.end286, !dbg !12527

cond.false277:                                    ; preds = %land.lhs.true273, %cond.false269
  %197 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !12527
  %cmp278 = icmp eq %struct.BMVert** %197, null, !dbg !12527
  br i1 %cmp278, label %cond.true280, label %cond.false281, !dbg !12527

cond.true280:                                     ; preds = %cond.false277
  br label %cond.end284, !dbg !12527

cond.false281:                                    ; preds = %cond.false277
  %198 = load i64 (i8*)*, i64 (i8*)** @MEM_allocN_len, align 8, !dbg !12527
  %199 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !12527
  %200 = bitcast %struct.BMVert** %199 to i8*, !dbg !12527
  %call282 = call i64 %198(i8* %200), !dbg !12527
  %div283 = udiv i64 %call282, 8, !dbg !12527
  br label %cond.end284, !dbg !12527

cond.end284:                                      ; preds = %cond.false281, %cond.true280
  %cond285 = phi i64 [ 0, %cond.true280 ], [ %div283, %cond.false281 ], !dbg !12527
  br label %cond.end286, !dbg !12527

cond.end286:                                      ; preds = %cond.end284, %cond.true276
  %cond287 = phi i64 [ 32, %cond.true276 ], [ %cond285, %cond.end284 ], !dbg !12527
  %201 = load i32, i32* %_vv_count, align 4, !dbg !12527
  %add288 = add nsw i32 %201, 1, !dbg !12527
  %conv289 = sext i32 %add288 to i64, !dbg !12527
  %cmp290 = icmp uge i64 %cond287, %conv289, !dbg !12527
  br i1 %cmp290, label %cond.true292, label %cond.false293, !dbg !12527

cond.true292:                                     ; preds = %cond.end286
  br label %cond.end295, !dbg !12527

cond.false293:                                    ; preds = %cond.end286
  %202 = bitcast %struct.BMVert*** %vv to i8**, !dbg !12527
  %arraydecay294 = getelementptr inbounds [32 x i8*], [32 x i8*]* %_vv_static, i64 0, i64 0, !dbg !12527
  %203 = bitcast i8** %arraydecay294 to i8*, !dbg !12527
  %204 = load i32, i32* %_vv_count, align 4, !dbg !12527
  call void @_bli_array_grow_func(i8** %202, i8* %203, i32 8, i32 %204, i32 1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0)), !dbg !12527
  br label %cond.end295, !dbg !12527

cond.end295:                                      ; preds = %cond.false293, %cond.true292
  br label %cond.end296, !dbg !12527

cond.end296:                                      ; preds = %cond.end295, %cond.true267
  %205 = load i32, i32* %_vv_count, align 4, !dbg !12527
  %add297 = add nsw i32 %205, 1, !dbg !12527
  store i32 %add297, i32* %_vv_count, align 4, !dbg !12527
  %206 = load %struct.BMVert*, %struct.BMVert** %bmv, align 8, !dbg !12527
  %207 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !12527
  %208 = load i32, i32* %_vv_count, align 4, !dbg !12527
  %sub298 = sub nsw i32 %208, 1, !dbg !12527
  %idxprom299 = sext i32 %sub298 to i64, !dbg !12527
  %arrayidx300 = getelementptr inbounds %struct.BMVert*, %struct.BMVert** %207, i64 %idxprom299, !dbg !12527
  store %struct.BMVert* %206, %struct.BMVert** %arrayidx300, align 8, !dbg !12527
  %209 = load %struct.BMEdge**, %struct.BMEdge*** %ee, align 8, !dbg !12528
  %210 = bitcast %struct.BMEdge** %209 to i8*, !dbg !12528
  %cmp301 = icmp eq i8* %210, null, !dbg !12528
  br i1 %cmp301, label %land.lhs.true303, label %cond.false310, !dbg !12528

land.lhs.true303:                                 ; preds = %cond.end296
  %211 = load i32, i32* %_ee_count, align 4, !dbg !12528
  %add304 = add nsw i32 %211, 1, !dbg !12528
  %conv305 = sext i32 %add304 to i64, !dbg !12528
  %cmp306 = icmp uge i64 32, %conv305, !dbg !12528
  br i1 %cmp306, label %cond.true308, label %cond.false310, !dbg !12528

cond.true308:                                     ; preds = %land.lhs.true303
  %arraydecay309 = getelementptr inbounds [32 x i8*], [32 x i8*]* %_ee_static, i64 0, i64 0, !dbg !12528
  %212 = bitcast i8** %arraydecay309 to i8*, !dbg !12528
  %213 = bitcast i8* %212 to %struct.BMEdge**, !dbg !12528
  store %struct.BMEdge** %213, %struct.BMEdge*** %ee, align 8, !dbg !12528
  br label %cond.end337, !dbg !12528

cond.false310:                                    ; preds = %land.lhs.true303, %cond.end296
  %214 = load %struct.BMEdge**, %struct.BMEdge*** %ee, align 8, !dbg !12528
  %215 = bitcast %struct.BMEdge** %214 to i8*, !dbg !12528
  %arraydecay311 = getelementptr inbounds [32 x i8*], [32 x i8*]* %_ee_static, i64 0, i64 0, !dbg !12528
  %216 = bitcast i8** %arraydecay311 to i8*, !dbg !12528
  %cmp312 = icmp eq i8* %215, %216, !dbg !12528
  br i1 %cmp312, label %land.lhs.true314, label %cond.false318, !dbg !12528

land.lhs.true314:                                 ; preds = %cond.false310
  %217 = load %struct.BMEdge**, %struct.BMEdge*** %ee, align 8, !dbg !12528
  %218 = bitcast %struct.BMEdge** %217 to i8*, !dbg !12528
  %cmp315 = icmp ne i8* %218, null, !dbg !12528
  br i1 %cmp315, label %cond.true317, label %cond.false318, !dbg !12528

cond.true317:                                     ; preds = %land.lhs.true314
  br label %cond.end327, !dbg !12528

cond.false318:                                    ; preds = %land.lhs.true314, %cond.false310
  %219 = load %struct.BMEdge**, %struct.BMEdge*** %ee, align 8, !dbg !12528
  %cmp319 = icmp eq %struct.BMEdge** %219, null, !dbg !12528
  br i1 %cmp319, label %cond.true321, label %cond.false322, !dbg !12528

cond.true321:                                     ; preds = %cond.false318
  br label %cond.end325, !dbg !12528

cond.false322:                                    ; preds = %cond.false318
  %220 = load i64 (i8*)*, i64 (i8*)** @MEM_allocN_len, align 8, !dbg !12528
  %221 = load %struct.BMEdge**, %struct.BMEdge*** %ee, align 8, !dbg !12528
  %222 = bitcast %struct.BMEdge** %221 to i8*, !dbg !12528
  %call323 = call i64 %220(i8* %222), !dbg !12528
  %div324 = udiv i64 %call323, 8, !dbg !12528
  br label %cond.end325, !dbg !12528

cond.end325:                                      ; preds = %cond.false322, %cond.true321
  %cond326 = phi i64 [ 0, %cond.true321 ], [ %div324, %cond.false322 ], !dbg !12528
  br label %cond.end327, !dbg !12528

cond.end327:                                      ; preds = %cond.end325, %cond.true317
  %cond328 = phi i64 [ 32, %cond.true317 ], [ %cond326, %cond.end325 ], !dbg !12528
  %223 = load i32, i32* %_ee_count, align 4, !dbg !12528
  %add329 = add nsw i32 %223, 1, !dbg !12528
  %conv330 = sext i32 %add329 to i64, !dbg !12528
  %cmp331 = icmp uge i64 %cond328, %conv330, !dbg !12528
  br i1 %cmp331, label %cond.true333, label %cond.false334, !dbg !12528

cond.true333:                                     ; preds = %cond.end327
  br label %cond.end336, !dbg !12528

cond.false334:                                    ; preds = %cond.end327
  %224 = bitcast %struct.BMEdge*** %ee to i8**, !dbg !12528
  %arraydecay335 = getelementptr inbounds [32 x i8*], [32 x i8*]* %_ee_static, i64 0, i64 0, !dbg !12528
  %225 = bitcast i8** %arraydecay335 to i8*, !dbg !12528
  %226 = load i32, i32* %_ee_count, align 4, !dbg !12528
  call void @_bli_array_grow_func(i8** %224, i8* %225, i32 8, i32 %226, i32 1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0)), !dbg !12528
  br label %cond.end336, !dbg !12528

cond.end336:                                      ; preds = %cond.false334, %cond.true333
  br label %cond.end337, !dbg !12528

cond.end337:                                      ; preds = %cond.end336, %cond.true308
  %227 = load i32, i32* %_ee_count, align 4, !dbg !12528
  %add338 = add nsw i32 %227, 1, !dbg !12528
  store i32 %add338, i32* %_ee_count, align 4, !dbg !12528
  %228 = load %struct.BMEdge*, %struct.BMEdge** %bme, align 8, !dbg !12528
  %229 = load %struct.BMEdge**, %struct.BMEdge*** %ee, align 8, !dbg !12528
  %230 = load i32, i32* %_ee_count, align 4, !dbg !12528
  %sub339 = sub nsw i32 %230, 1, !dbg !12528
  %idxprom340 = sext i32 %sub339 to i64, !dbg !12528
  %arrayidx341 = getelementptr inbounds %struct.BMEdge*, %struct.BMEdge** %229, i64 %idxprom340, !dbg !12528
  store %struct.BMEdge* %228, %struct.BMEdge** %arrayidx341, align 8, !dbg !12528
  br label %for.inc342, !dbg !12529

for.inc342:                                       ; preds = %cond.end337
  %231 = load i32, i32* %k, align 4, !dbg !12530
  %dec = add nsw i32 %231, -1, !dbg !12530
  store i32 %dec, i32* %k, align 4, !dbg !12530
  br label %for.cond254, !dbg !12531, !llvm.loop !12532

for.end343:                                       ; preds = %for.cond254
  br label %if.end344, !dbg !12534

if.end344:                                        ; preds = %for.end343, %land.lhs.true247, %land.lhs.true244, %land.lhs.true240, %if.else236
  br label %if.end345

if.end345:                                        ; preds = %if.end344, %for.end
  %232 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !12535
  %prev346 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %232, i32 0, i32 1, !dbg !12536
  %233 = load %struct.BoundVert*, %struct.BoundVert** %prev346, align 8, !dbg !12536
  store %struct.BoundVert* %233, %struct.BoundVert** %v, align 8, !dbg !12537
  %234 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !12538
  %235 = bitcast %struct.BMVert** %234 to i8*, !dbg !12538
  %cmp347 = icmp eq i8* %235, null, !dbg !12538
  br i1 %cmp347, label %land.lhs.true349, label %cond.false356, !dbg !12538

land.lhs.true349:                                 ; preds = %if.end345
  %236 = load i32, i32* %_vv_count, align 4, !dbg !12538
  %add350 = add nsw i32 %236, 1, !dbg !12538
  %conv351 = sext i32 %add350 to i64, !dbg !12538
  %cmp352 = icmp uge i64 32, %conv351, !dbg !12538
  br i1 %cmp352, label %cond.true354, label %cond.false356, !dbg !12538

cond.true354:                                     ; preds = %land.lhs.true349
  %arraydecay355 = getelementptr inbounds [32 x i8*], [32 x i8*]* %_vv_static, i64 0, i64 0, !dbg !12538
  %237 = bitcast i8** %arraydecay355 to i8*, !dbg !12538
  %238 = bitcast i8* %237 to %struct.BMVert**, !dbg !12538
  store %struct.BMVert** %238, %struct.BMVert*** %vv, align 8, !dbg !12538
  br label %cond.end383, !dbg !12538

cond.false356:                                    ; preds = %land.lhs.true349, %if.end345
  %239 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !12538
  %240 = bitcast %struct.BMVert** %239 to i8*, !dbg !12538
  %arraydecay357 = getelementptr inbounds [32 x i8*], [32 x i8*]* %_vv_static, i64 0, i64 0, !dbg !12538
  %241 = bitcast i8** %arraydecay357 to i8*, !dbg !12538
  %cmp358 = icmp eq i8* %240, %241, !dbg !12538
  br i1 %cmp358, label %land.lhs.true360, label %cond.false364, !dbg !12538

land.lhs.true360:                                 ; preds = %cond.false356
  %242 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !12538
  %243 = bitcast %struct.BMVert** %242 to i8*, !dbg !12538
  %cmp361 = icmp ne i8* %243, null, !dbg !12538
  br i1 %cmp361, label %cond.true363, label %cond.false364, !dbg !12538

cond.true363:                                     ; preds = %land.lhs.true360
  br label %cond.end373, !dbg !12538

cond.false364:                                    ; preds = %land.lhs.true360, %cond.false356
  %244 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !12538
  %cmp365 = icmp eq %struct.BMVert** %244, null, !dbg !12538
  br i1 %cmp365, label %cond.true367, label %cond.false368, !dbg !12538

cond.true367:                                     ; preds = %cond.false364
  br label %cond.end371, !dbg !12538

cond.false368:                                    ; preds = %cond.false364
  %245 = load i64 (i8*)*, i64 (i8*)** @MEM_allocN_len, align 8, !dbg !12538
  %246 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !12538
  %247 = bitcast %struct.BMVert** %246 to i8*, !dbg !12538
  %call369 = call i64 %245(i8* %247), !dbg !12538
  %div370 = udiv i64 %call369, 8, !dbg !12538
  br label %cond.end371, !dbg !12538

cond.end371:                                      ; preds = %cond.false368, %cond.true367
  %cond372 = phi i64 [ 0, %cond.true367 ], [ %div370, %cond.false368 ], !dbg !12538
  br label %cond.end373, !dbg !12538

cond.end373:                                      ; preds = %cond.end371, %cond.true363
  %cond374 = phi i64 [ 32, %cond.true363 ], [ %cond372, %cond.end371 ], !dbg !12538
  %248 = load i32, i32* %_vv_count, align 4, !dbg !12538
  %add375 = add nsw i32 %248, 1, !dbg !12538
  %conv376 = sext i32 %add375 to i64, !dbg !12538
  %cmp377 = icmp uge i64 %cond374, %conv376, !dbg !12538
  br i1 %cmp377, label %cond.true379, label %cond.false380, !dbg !12538

cond.true379:                                     ; preds = %cond.end373
  br label %cond.end382, !dbg !12538

cond.false380:                                    ; preds = %cond.end373
  %249 = bitcast %struct.BMVert*** %vv to i8**, !dbg !12538
  %arraydecay381 = getelementptr inbounds [32 x i8*], [32 x i8*]* %_vv_static, i64 0, i64 0, !dbg !12538
  %250 = bitcast i8** %arraydecay381 to i8*, !dbg !12538
  %251 = load i32, i32* %_vv_count, align 4, !dbg !12538
  call void @_bli_array_grow_func(i8** %249, i8* %250, i32 8, i32 %251, i32 1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0)), !dbg !12538
  br label %cond.end382, !dbg !12538

cond.end382:                                      ; preds = %cond.false380, %cond.true379
  br label %cond.end383, !dbg !12538

cond.end383:                                      ; preds = %cond.end382, %cond.true354
  %252 = load i32, i32* %_vv_count, align 4, !dbg !12538
  %add384 = add nsw i32 %252, 1, !dbg !12538
  store i32 %add384, i32* %_vv_count, align 4, !dbg !12538
  %253 = load %struct.BoundVert*, %struct.BoundVert** %v, align 8, !dbg !12538
  %nv385 = getelementptr inbounds %struct.BoundVert, %struct.BoundVert* %253, i32 0, i32 2, !dbg !12538
  %v386 = getelementptr inbounds %struct.NewVert, %struct.NewVert* %nv385, i32 0, i32 0, !dbg !12538
  %254 = load %struct.BMVert*, %struct.BMVert** %v386, align 8, !dbg !12538
  %255 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !12538
  %256 = load i32, i32* %_vv_count, align 4, !dbg !12538
  %sub387 = sub nsw i32 %256, 1, !dbg !12538
  %idxprom388 = sext i32 %sub387 to i64, !dbg !12538
  %arrayidx389 = getelementptr inbounds %struct.BMVert*, %struct.BMVert** %255, i64 %idxprom388, !dbg !12538
  store %struct.BMVert* %254, %struct.BMVert** %arrayidx389, align 8, !dbg !12538
  %257 = load %struct.BMEdge**, %struct.BMEdge*** %ee, align 8, !dbg !12539
  %258 = bitcast %struct.BMEdge** %257 to i8*, !dbg !12539
  %cmp390 = icmp eq i8* %258, null, !dbg !12539
  br i1 %cmp390, label %land.lhs.true392, label %cond.false399, !dbg !12539

land.lhs.true392:                                 ; preds = %cond.end383
  %259 = load i32, i32* %_ee_count, align 4, !dbg !12539
  %add393 = add nsw i32 %259, 1, !dbg !12539
  %conv394 = sext i32 %add393 to i64, !dbg !12539
  %cmp395 = icmp uge i64 32, %conv394, !dbg !12539
  br i1 %cmp395, label %cond.true397, label %cond.false399, !dbg !12539

cond.true397:                                     ; preds = %land.lhs.true392
  %arraydecay398 = getelementptr inbounds [32 x i8*], [32 x i8*]* %_ee_static, i64 0, i64 0, !dbg !12539
  %260 = bitcast i8** %arraydecay398 to i8*, !dbg !12539
  %261 = bitcast i8* %260 to %struct.BMEdge**, !dbg !12539
  store %struct.BMEdge** %261, %struct.BMEdge*** %ee, align 8, !dbg !12539
  br label %cond.end426, !dbg !12539

cond.false399:                                    ; preds = %land.lhs.true392, %cond.end383
  %262 = load %struct.BMEdge**, %struct.BMEdge*** %ee, align 8, !dbg !12539
  %263 = bitcast %struct.BMEdge** %262 to i8*, !dbg !12539
  %arraydecay400 = getelementptr inbounds [32 x i8*], [32 x i8*]* %_ee_static, i64 0, i64 0, !dbg !12539
  %264 = bitcast i8** %arraydecay400 to i8*, !dbg !12539
  %cmp401 = icmp eq i8* %263, %264, !dbg !12539
  br i1 %cmp401, label %land.lhs.true403, label %cond.false407, !dbg !12539

land.lhs.true403:                                 ; preds = %cond.false399
  %265 = load %struct.BMEdge**, %struct.BMEdge*** %ee, align 8, !dbg !12539
  %266 = bitcast %struct.BMEdge** %265 to i8*, !dbg !12539
  %cmp404 = icmp ne i8* %266, null, !dbg !12539
  br i1 %cmp404, label %cond.true406, label %cond.false407, !dbg !12539

cond.true406:                                     ; preds = %land.lhs.true403
  br label %cond.end416, !dbg !12539

cond.false407:                                    ; preds = %land.lhs.true403, %cond.false399
  %267 = load %struct.BMEdge**, %struct.BMEdge*** %ee, align 8, !dbg !12539
  %cmp408 = icmp eq %struct.BMEdge** %267, null, !dbg !12539
  br i1 %cmp408, label %cond.true410, label %cond.false411, !dbg !12539

cond.true410:                                     ; preds = %cond.false407
  br label %cond.end414, !dbg !12539

cond.false411:                                    ; preds = %cond.false407
  %268 = load i64 (i8*)*, i64 (i8*)** @MEM_allocN_len, align 8, !dbg !12539
  %269 = load %struct.BMEdge**, %struct.BMEdge*** %ee, align 8, !dbg !12539
  %270 = bitcast %struct.BMEdge** %269 to i8*, !dbg !12539
  %call412 = call i64 %268(i8* %270), !dbg !12539
  %div413 = udiv i64 %call412, 8, !dbg !12539
  br label %cond.end414, !dbg !12539

cond.end414:                                      ; preds = %cond.false411, %cond.true410
  %cond415 = phi i64 [ 0, %cond.true410 ], [ %div413, %cond.false411 ], !dbg !12539
  br label %cond.end416, !dbg !12539

cond.end416:                                      ; preds = %cond.end414, %cond.true406
  %cond417 = phi i64 [ 32, %cond.true406 ], [ %cond415, %cond.end414 ], !dbg !12539
  %271 = load i32, i32* %_ee_count, align 4, !dbg !12539
  %add418 = add nsw i32 %271, 1, !dbg !12539
  %conv419 = sext i32 %add418 to i64, !dbg !12539
  %cmp420 = icmp uge i64 %cond417, %conv419, !dbg !12539
  br i1 %cmp420, label %cond.true422, label %cond.false423, !dbg !12539

cond.true422:                                     ; preds = %cond.end416
  br label %cond.end425, !dbg !12539

cond.false423:                                    ; preds = %cond.end416
  %272 = bitcast %struct.BMEdge*** %ee to i8**, !dbg !12539
  %arraydecay424 = getelementptr inbounds [32 x i8*], [32 x i8*]* %_ee_static, i64 0, i64 0, !dbg !12539
  %273 = bitcast i8** %arraydecay424 to i8*, !dbg !12539
  %274 = load i32, i32* %_ee_count, align 4, !dbg !12539
  call void @_bli_array_grow_func(i8** %272, i8* %273, i32 8, i32 %274, i32 1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0)), !dbg !12539
  br label %cond.end425, !dbg !12539

cond.end425:                                      ; preds = %cond.false423, %cond.true422
  br label %cond.end426, !dbg !12539

cond.end426:                                      ; preds = %cond.end425, %cond.true397
  %275 = load i32, i32* %_ee_count, align 4, !dbg !12539
  %add427 = add nsw i32 %275, 1, !dbg !12539
  store i32 %add427, i32* %_ee_count, align 4, !dbg !12539
  %276 = load %struct.BMEdge*, %struct.BMEdge** %bme, align 8, !dbg !12539
  %277 = load %struct.BMEdge**, %struct.BMEdge*** %ee, align 8, !dbg !12539
  %278 = load i32, i32* %_ee_count, align 4, !dbg !12539
  %sub428 = sub nsw i32 %278, 1, !dbg !12539
  %idxprom429 = sext i32 %sub428 to i64, !dbg !12539
  %arrayidx430 = getelementptr inbounds %struct.BMEdge*, %struct.BMEdge** %277, i64 %idxprom429, !dbg !12539
  store %struct.BMEdge* %276, %struct.BMEdge** %arrayidx430, align 8, !dbg !12539
  br label %while.cond, !dbg !12427, !llvm.loop !12540

while.end:                                        ; preds = %while.cond
  store i8 1, i8* %do_rebuild, align 1, !dbg !12542
  br label %if.end516, !dbg !12543

if.else431:                                       ; preds = %for.body
  %279 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !12544
  %280 = bitcast %struct.BMVert** %279 to i8*, !dbg !12544
  %cmp432 = icmp eq i8* %280, null, !dbg !12544
  br i1 %cmp432, label %land.lhs.true434, label %cond.false441, !dbg !12544

land.lhs.true434:                                 ; preds = %if.else431
  %281 = load i32, i32* %_vv_count, align 4, !dbg !12544
  %add435 = add nsw i32 %281, 1, !dbg !12544
  %conv436 = sext i32 %add435 to i64, !dbg !12544
  %cmp437 = icmp uge i64 32, %conv436, !dbg !12544
  br i1 %cmp437, label %cond.true439, label %cond.false441, !dbg !12544

cond.true439:                                     ; preds = %land.lhs.true434
  %arraydecay440 = getelementptr inbounds [32 x i8*], [32 x i8*]* %_vv_static, i64 0, i64 0, !dbg !12544
  %282 = bitcast i8** %arraydecay440 to i8*, !dbg !12544
  %283 = bitcast i8* %282 to %struct.BMVert**, !dbg !12544
  store %struct.BMVert** %283, %struct.BMVert*** %vv, align 8, !dbg !12544
  br label %cond.end468, !dbg !12544

cond.false441:                                    ; preds = %land.lhs.true434, %if.else431
  %284 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !12544
  %285 = bitcast %struct.BMVert** %284 to i8*, !dbg !12544
  %arraydecay442 = getelementptr inbounds [32 x i8*], [32 x i8*]* %_vv_static, i64 0, i64 0, !dbg !12544
  %286 = bitcast i8** %arraydecay442 to i8*, !dbg !12544
  %cmp443 = icmp eq i8* %285, %286, !dbg !12544
  br i1 %cmp443, label %land.lhs.true445, label %cond.false449, !dbg !12544

land.lhs.true445:                                 ; preds = %cond.false441
  %287 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !12544
  %288 = bitcast %struct.BMVert** %287 to i8*, !dbg !12544
  %cmp446 = icmp ne i8* %288, null, !dbg !12544
  br i1 %cmp446, label %cond.true448, label %cond.false449, !dbg !12544

cond.true448:                                     ; preds = %land.lhs.true445
  br label %cond.end458, !dbg !12544

cond.false449:                                    ; preds = %land.lhs.true445, %cond.false441
  %289 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !12544
  %cmp450 = icmp eq %struct.BMVert** %289, null, !dbg !12544
  br i1 %cmp450, label %cond.true452, label %cond.false453, !dbg !12544

cond.true452:                                     ; preds = %cond.false449
  br label %cond.end456, !dbg !12544

cond.false453:                                    ; preds = %cond.false449
  %290 = load i64 (i8*)*, i64 (i8*)** @MEM_allocN_len, align 8, !dbg !12544
  %291 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !12544
  %292 = bitcast %struct.BMVert** %291 to i8*, !dbg !12544
  %call454 = call i64 %290(i8* %292), !dbg !12544
  %div455 = udiv i64 %call454, 8, !dbg !12544
  br label %cond.end456, !dbg !12544

cond.end456:                                      ; preds = %cond.false453, %cond.true452
  %cond457 = phi i64 [ 0, %cond.true452 ], [ %div455, %cond.false453 ], !dbg !12544
  br label %cond.end458, !dbg !12544

cond.end458:                                      ; preds = %cond.end456, %cond.true448
  %cond459 = phi i64 [ 32, %cond.true448 ], [ %cond457, %cond.end456 ], !dbg !12544
  %293 = load i32, i32* %_vv_count, align 4, !dbg !12544
  %add460 = add nsw i32 %293, 1, !dbg !12544
  %conv461 = sext i32 %add460 to i64, !dbg !12544
  %cmp462 = icmp uge i64 %cond459, %conv461, !dbg !12544
  br i1 %cmp462, label %cond.true464, label %cond.false465, !dbg !12544

cond.true464:                                     ; preds = %cond.end458
  br label %cond.end467, !dbg !12544

cond.false465:                                    ; preds = %cond.end458
  %294 = bitcast %struct.BMVert*** %vv to i8**, !dbg !12544
  %arraydecay466 = getelementptr inbounds [32 x i8*], [32 x i8*]* %_vv_static, i64 0, i64 0, !dbg !12544
  %295 = bitcast i8** %arraydecay466 to i8*, !dbg !12544
  %296 = load i32, i32* %_vv_count, align 4, !dbg !12544
  call void @_bli_array_grow_func(i8** %294, i8* %295, i32 8, i32 %296, i32 1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0)), !dbg !12544
  br label %cond.end467, !dbg !12544

cond.end467:                                      ; preds = %cond.false465, %cond.true464
  br label %cond.end468, !dbg !12544

cond.end468:                                      ; preds = %cond.end467, %cond.true439
  %297 = load i32, i32* %_vv_count, align 4, !dbg !12544
  %add469 = add nsw i32 %297, 1, !dbg !12544
  store i32 %add469, i32* %_vv_count, align 4, !dbg !12544
  %298 = load %struct.BMLoop*, %struct.BMLoop** %l, align 8, !dbg !12544
  %v470 = getelementptr inbounds %struct.BMLoop, %struct.BMLoop* %298, i32 0, i32 1, !dbg !12544
  %299 = load %struct.BMVert*, %struct.BMVert** %v470, align 8, !dbg !12544
  %300 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !12544
  %301 = load i32, i32* %_vv_count, align 4, !dbg !12544
  %sub471 = sub nsw i32 %301, 1, !dbg !12544
  %idxprom472 = sext i32 %sub471 to i64, !dbg !12544
  %arrayidx473 = getelementptr inbounds %struct.BMVert*, %struct.BMVert** %300, i64 %idxprom472, !dbg !12544
  store %struct.BMVert* %299, %struct.BMVert** %arrayidx473, align 8, !dbg !12544
  %302 = load %struct.BMEdge**, %struct.BMEdge*** %ee, align 8, !dbg !12546
  %303 = bitcast %struct.BMEdge** %302 to i8*, !dbg !12546
  %cmp474 = icmp eq i8* %303, null, !dbg !12546
  br i1 %cmp474, label %land.lhs.true476, label %cond.false483, !dbg !12546

land.lhs.true476:                                 ; preds = %cond.end468
  %304 = load i32, i32* %_ee_count, align 4, !dbg !12546
  %add477 = add nsw i32 %304, 1, !dbg !12546
  %conv478 = sext i32 %add477 to i64, !dbg !12546
  %cmp479 = icmp uge i64 32, %conv478, !dbg !12546
  br i1 %cmp479, label %cond.true481, label %cond.false483, !dbg !12546

cond.true481:                                     ; preds = %land.lhs.true476
  %arraydecay482 = getelementptr inbounds [32 x i8*], [32 x i8*]* %_ee_static, i64 0, i64 0, !dbg !12546
  %305 = bitcast i8** %arraydecay482 to i8*, !dbg !12546
  %306 = bitcast i8* %305 to %struct.BMEdge**, !dbg !12546
  store %struct.BMEdge** %306, %struct.BMEdge*** %ee, align 8, !dbg !12546
  br label %cond.end510, !dbg !12546

cond.false483:                                    ; preds = %land.lhs.true476, %cond.end468
  %307 = load %struct.BMEdge**, %struct.BMEdge*** %ee, align 8, !dbg !12546
  %308 = bitcast %struct.BMEdge** %307 to i8*, !dbg !12546
  %arraydecay484 = getelementptr inbounds [32 x i8*], [32 x i8*]* %_ee_static, i64 0, i64 0, !dbg !12546
  %309 = bitcast i8** %arraydecay484 to i8*, !dbg !12546
  %cmp485 = icmp eq i8* %308, %309, !dbg !12546
  br i1 %cmp485, label %land.lhs.true487, label %cond.false491, !dbg !12546

land.lhs.true487:                                 ; preds = %cond.false483
  %310 = load %struct.BMEdge**, %struct.BMEdge*** %ee, align 8, !dbg !12546
  %311 = bitcast %struct.BMEdge** %310 to i8*, !dbg !12546
  %cmp488 = icmp ne i8* %311, null, !dbg !12546
  br i1 %cmp488, label %cond.true490, label %cond.false491, !dbg !12546

cond.true490:                                     ; preds = %land.lhs.true487
  br label %cond.end500, !dbg !12546

cond.false491:                                    ; preds = %land.lhs.true487, %cond.false483
  %312 = load %struct.BMEdge**, %struct.BMEdge*** %ee, align 8, !dbg !12546
  %cmp492 = icmp eq %struct.BMEdge** %312, null, !dbg !12546
  br i1 %cmp492, label %cond.true494, label %cond.false495, !dbg !12546

cond.true494:                                     ; preds = %cond.false491
  br label %cond.end498, !dbg !12546

cond.false495:                                    ; preds = %cond.false491
  %313 = load i64 (i8*)*, i64 (i8*)** @MEM_allocN_len, align 8, !dbg !12546
  %314 = load %struct.BMEdge**, %struct.BMEdge*** %ee, align 8, !dbg !12546
  %315 = bitcast %struct.BMEdge** %314 to i8*, !dbg !12546
  %call496 = call i64 %313(i8* %315), !dbg !12546
  %div497 = udiv i64 %call496, 8, !dbg !12546
  br label %cond.end498, !dbg !12546

cond.end498:                                      ; preds = %cond.false495, %cond.true494
  %cond499 = phi i64 [ 0, %cond.true494 ], [ %div497, %cond.false495 ], !dbg !12546
  br label %cond.end500, !dbg !12546

cond.end500:                                      ; preds = %cond.end498, %cond.true490
  %cond501 = phi i64 [ 32, %cond.true490 ], [ %cond499, %cond.end498 ], !dbg !12546
  %316 = load i32, i32* %_ee_count, align 4, !dbg !12546
  %add502 = add nsw i32 %316, 1, !dbg !12546
  %conv503 = sext i32 %add502 to i64, !dbg !12546
  %cmp504 = icmp uge i64 %cond501, %conv503, !dbg !12546
  br i1 %cmp504, label %cond.true506, label %cond.false507, !dbg !12546

cond.true506:                                     ; preds = %cond.end500
  br label %cond.end509, !dbg !12546

cond.false507:                                    ; preds = %cond.end500
  %317 = bitcast %struct.BMEdge*** %ee to i8**, !dbg !12546
  %arraydecay508 = getelementptr inbounds [32 x i8*], [32 x i8*]* %_ee_static, i64 0, i64 0, !dbg !12546
  %318 = bitcast i8** %arraydecay508 to i8*, !dbg !12546
  %319 = load i32, i32* %_ee_count, align 4, !dbg !12546
  call void @_bli_array_grow_func(i8** %317, i8* %318, i32 8, i32 %319, i32 1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0)), !dbg !12546
  br label %cond.end509, !dbg !12546

cond.end509:                                      ; preds = %cond.false507, %cond.true506
  br label %cond.end510, !dbg !12546

cond.end510:                                      ; preds = %cond.end509, %cond.true481
  %320 = load i32, i32* %_ee_count, align 4, !dbg !12546
  %add511 = add nsw i32 %320, 1, !dbg !12546
  store i32 %add511, i32* %_ee_count, align 4, !dbg !12546
  %321 = load %struct.BMLoop*, %struct.BMLoop** %l, align 8, !dbg !12546
  %e512 = getelementptr inbounds %struct.BMLoop, %struct.BMLoop* %321, i32 0, i32 2, !dbg !12546
  %322 = load %struct.BMEdge*, %struct.BMEdge** %e512, align 8, !dbg !12546
  %323 = load %struct.BMEdge**, %struct.BMEdge*** %ee, align 8, !dbg !12546
  %324 = load i32, i32* %_ee_count, align 4, !dbg !12546
  %sub513 = sub nsw i32 %324, 1, !dbg !12546
  %idxprom514 = sext i32 %sub513 to i64, !dbg !12546
  %arrayidx515 = getelementptr inbounds %struct.BMEdge*, %struct.BMEdge** %323, i64 %idxprom514, !dbg !12546
  store %struct.BMEdge* %322, %struct.BMEdge** %arrayidx515, align 8, !dbg !12546
  br label %if.end516

if.end516:                                        ; preds = %cond.end510, %while.end
  br label %for.inc517, !dbg !12547

for.inc517:                                       ; preds = %if.end516
  %call518 = call i8* @BM_iter_step(%struct.BMIter* %liter), !dbg !12378
  %325 = bitcast i8* %call518 to %struct.BMLoop*, !dbg !12378
  store %struct.BMLoop* %325, %struct.BMLoop** %l, align 8, !dbg !12378
  br label %for.cond, !dbg !12378, !llvm.loop !12548

for.end519:                                       ; preds = %for.cond
  %326 = load i8, i8* %do_rebuild, align 1, !dbg !12550
  %tobool520 = icmp ne i8 %326, 0, !dbg !12550
  br i1 %tobool520, label %if.then521, label %if.end602, !dbg !12552

if.then521:                                       ; preds = %for.end519
  %327 = load i32, i32* %_vv_count, align 4, !dbg !12553
  store i32 %327, i32* %n, align 4, !dbg !12555
  %328 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !12556
  %329 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !12557
  %330 = load i32, i32* %n, align 4, !dbg !12558
  %331 = load %struct.BMFace*, %struct.BMFace** %f.addr, align 8, !dbg !12559
  %call522 = call %struct.BMFace* @bev_create_ngon(%struct.BMesh* %328, %struct.BMVert** %329, i32 %330, %struct.BMFace** null, %struct.BMFace* %331, i32 -1, i8 zeroext 1), !dbg !12560
  store %struct.BMFace* %call522, %struct.BMFace** %f_new, align 8, !dbg !12561
  store i32 0, i32* %k, align 4, !dbg !12562
  br label %for.cond523, !dbg !12564

for.cond523:                                      ; preds = %for.inc529, %if.then521
  %332 = load i32, i32* %k, align 4, !dbg !12565
  %333 = load i32, i32* %_vv_fix_count, align 4, !dbg !12567
  %cmp524 = icmp slt i32 %332, %333, !dbg !12568
  br i1 %cmp524, label %for.body526, label %for.end531, !dbg !12569

for.body526:                                      ; preds = %for.cond523
  %334 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !12570
  %335 = load %struct.BMVert**, %struct.BMVert*** %vv_fix, align 8, !dbg !12572
  %336 = load i32, i32* %k, align 4, !dbg !12573
  %idxprom527 = sext i32 %336 to i64, !dbg !12572
  %arrayidx528 = getelementptr inbounds %struct.BMVert*, %struct.BMVert** %335, i64 %idxprom527, !dbg !12572
  %337 = load %struct.BMVert*, %struct.BMVert** %arrayidx528, align 8, !dbg !12572
  call void @bev_merge_uvs(%struct.BMesh* %334, %struct.BMVert* %337), !dbg !12574
  br label %for.inc529, !dbg !12575

for.inc529:                                       ; preds = %for.body526
  %338 = load i32, i32* %k, align 4, !dbg !12576
  %inc530 = add nsw i32 %338, 1, !dbg !12576
  store i32 %inc530, i32* %k, align 4, !dbg !12576
  br label %for.cond523, !dbg !12577, !llvm.loop !12578

for.end531:                                       ; preds = %for.cond523
  %339 = load %struct.BMEdge**, %struct.BMEdge*** %ee, align 8, !dbg !12580
  %340 = load i32, i32* %n, align 4, !dbg !12581
  %sub532 = sub nsw i32 %340, 1, !dbg !12582
  %idxprom533 = sext i32 %sub532 to i64, !dbg !12580
  %arrayidx534 = getelementptr inbounds %struct.BMEdge*, %struct.BMEdge** %339, i64 %idxprom533, !dbg !12580
  %341 = load %struct.BMEdge*, %struct.BMEdge** %arrayidx534, align 8, !dbg !12580
  store %struct.BMEdge* %341, %struct.BMEdge** %bme_prev, align 8, !dbg !12583
  store i32 0, i32* %k, align 4, !dbg !12584
  br label %for.cond535, !dbg !12586

for.cond535:                                      ; preds = %for.inc595, %for.end531
  %342 = load i32, i32* %k, align 4, !dbg !12587
  %343 = load i32, i32* %n, align 4, !dbg !12589
  %cmp536 = icmp slt i32 %342, %343, !dbg !12590
  br i1 %cmp536, label %for.body538, label %for.end597, !dbg !12591

for.body538:                                      ; preds = %for.cond535
  %344 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !12592
  %345 = load i32, i32* %k, align 4, !dbg !12594
  %idxprom539 = sext i32 %345 to i64, !dbg !12592
  %arrayidx540 = getelementptr inbounds %struct.BMVert*, %struct.BMVert** %344, i64 %idxprom539, !dbg !12592
  %346 = load %struct.BMVert*, %struct.BMVert** %arrayidx540, align 8, !dbg !12592
  %347 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !12595
  %348 = load i32, i32* %k, align 4, !dbg !12596
  %add541 = add nsw i32 %348, 1, !dbg !12597
  %349 = load i32, i32* %n, align 4, !dbg !12598
  %rem = srem i32 %add541, %349, !dbg !12599
  %idxprom542 = sext i32 %rem to i64, !dbg !12595
  %arrayidx543 = getelementptr inbounds %struct.BMVert*, %struct.BMVert** %347, i64 %idxprom542, !dbg !12595
  %350 = load %struct.BMVert*, %struct.BMVert** %arrayidx543, align 8, !dbg !12595
  %call544 = call %struct.BMEdge* @BM_edge_exists(%struct.BMVert* %346, %struct.BMVert* %350), !dbg !12600
  store %struct.BMEdge* %call544, %struct.BMEdge** %bme_new, align 8, !dbg !12601
  %351 = load %struct.BMEdge**, %struct.BMEdge*** %ee, align 8, !dbg !12602
  %352 = load i32, i32* %k, align 4, !dbg !12604
  %idxprom545 = sext i32 %352 to i64, !dbg !12602
  %arrayidx546 = getelementptr inbounds %struct.BMEdge*, %struct.BMEdge** %351, i64 %idxprom545, !dbg !12602
  %353 = load %struct.BMEdge*, %struct.BMEdge** %arrayidx546, align 8, !dbg !12602
  %354 = load %struct.BMEdge*, %struct.BMEdge** %bme_new, align 8, !dbg !12605
  %cmp547 = icmp ne %struct.BMEdge* %353, %354, !dbg !12606
  br i1 %cmp547, label %if.then549, label %if.end594, !dbg !12607

if.then549:                                       ; preds = %for.body538
  %355 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !12608
  %356 = load %struct.BMesh*, %struct.BMesh** %bm.addr, align 8, !dbg !12610
  %357 = load %struct.BMEdge**, %struct.BMEdge*** %ee, align 8, !dbg !12611
  %358 = load i32, i32* %k, align 4, !dbg !12612
  %idxprom550 = sext i32 %358 to i64, !dbg !12611
  %arrayidx551 = getelementptr inbounds %struct.BMEdge*, %struct.BMEdge** %357, i64 %idxprom550, !dbg !12611
  %359 = load %struct.BMEdge*, %struct.BMEdge** %arrayidx551, align 8, !dbg !12611
  %360 = bitcast %struct.BMEdge* %359 to i8*, !dbg !12611
  %361 = load %struct.BMEdge*, %struct.BMEdge** %bme_new, align 8, !dbg !12613
  %362 = bitcast %struct.BMEdge* %361 to i8*, !dbg !12613
  call void @BM_elem_attrs_copy(%struct.BMesh* %355, %struct.BMesh* %356, i8* %360, i8* %362), !dbg !12614
  %363 = load i32, i32* %k, align 4, !dbg !12615
  %364 = load i32, i32* %n, align 4, !dbg !12617
  %sub552 = sub nsw i32 %364, 1, !dbg !12618
  %cmp553 = icmp slt i32 %363, %sub552, !dbg !12619
  br i1 %cmp553, label %land.lhs.true555, label %if.else590, !dbg !12620

land.lhs.true555:                                 ; preds = %if.then549
  %365 = load %struct.BMEdge**, %struct.BMEdge*** %ee, align 8, !dbg !12621
  %366 = load i32, i32* %k, align 4, !dbg !12622
  %idxprom556 = sext i32 %366 to i64, !dbg !12621
  %arrayidx557 = getelementptr inbounds %struct.BMEdge*, %struct.BMEdge** %365, i64 %idxprom556, !dbg !12621
  %367 = load %struct.BMEdge*, %struct.BMEdge** %arrayidx557, align 8, !dbg !12621
  %368 = load %struct.BMEdge**, %struct.BMEdge*** %ee, align 8, !dbg !12623
  %369 = load i32, i32* %k, align 4, !dbg !12624
  %add558 = add nsw i32 %369, 1, !dbg !12625
  %idxprom559 = sext i32 %add558 to i64, !dbg !12623
  %arrayidx560 = getelementptr inbounds %struct.BMEdge*, %struct.BMEdge** %368, i64 %idxprom559, !dbg !12623
  %370 = load %struct.BMEdge*, %struct.BMEdge** %arrayidx560, align 8, !dbg !12623
  %cmp561 = icmp eq %struct.BMEdge* %367, %370, !dbg !12626
  br i1 %cmp561, label %if.then563, label %if.else590, !dbg !12627

if.then563:                                       ; preds = %land.lhs.true555
  %371 = load %struct.BMEdge**, %struct.BMEdge*** %ee, align 8, !dbg !12628
  %372 = load i32, i32* %k, align 4, !dbg !12628
  %idxprom564 = sext i32 %372 to i64, !dbg !12628
  %arrayidx565 = getelementptr inbounds %struct.BMEdge*, %struct.BMEdge** %371, i64 %idxprom564, !dbg !12628
  %373 = load %struct.BMEdge*, %struct.BMEdge** %arrayidx565, align 8, !dbg !12628
  %head566 = getelementptr inbounds %struct.BMEdge, %struct.BMEdge* %373, i32 0, i32 0, !dbg !12628
  %call567 = call zeroext i8 @_bm_elem_flag_test(%struct.BMHeader* %head566, i8 zeroext 4), !dbg !12628
  %conv568 = zext i8 %call567 to i32, !dbg !12628
  %tobool569 = icmp ne i32 %conv568, 0, !dbg !12628
  br i1 %tobool569, label %land.lhs.true570, label %if.end576, !dbg !12631

land.lhs.true570:                                 ; preds = %if.then563
  %374 = load %struct.BMEdge*, %struct.BMEdge** %bme_prev, align 8, !dbg !12632
  %head571 = getelementptr inbounds %struct.BMEdge, %struct.BMEdge* %374, i32 0, i32 0, !dbg !12632
  %call572 = call zeroext i8 @_bm_elem_flag_test(%struct.BMHeader* %head571, i8 zeroext 4), !dbg !12632
  %tobool573 = icmp ne i8 %call572, 0, !dbg !12632
  br i1 %tobool573, label %if.end576, label %if.then574, !dbg !12633

if.then574:                                       ; preds = %land.lhs.true570
  %375 = load %struct.BMEdge*, %struct.BMEdge** %bme_new, align 8, !dbg !12634
  %head575 = getelementptr inbounds %struct.BMEdge, %struct.BMEdge* %375, i32 0, i32 0, !dbg !12634
  call void @_bm_elem_flag_disable(%struct.BMHeader* %head575, i8 zeroext 4), !dbg !12634
  br label %if.end576, !dbg !12636

if.end576:                                        ; preds = %if.then574, %land.lhs.true570, %if.then563
  %376 = load %struct.BMEdge**, %struct.BMEdge*** %ee, align 8, !dbg !12637
  %377 = load i32, i32* %k, align 4, !dbg !12637
  %idxprom577 = sext i32 %377 to i64, !dbg !12637
  %arrayidx578 = getelementptr inbounds %struct.BMEdge*, %struct.BMEdge** %376, i64 %idxprom577, !dbg !12637
  %378 = load %struct.BMEdge*, %struct.BMEdge** %arrayidx578, align 8, !dbg !12637
  %head579 = getelementptr inbounds %struct.BMEdge, %struct.BMEdge* %378, i32 0, i32 0, !dbg !12637
  %call580 = call zeroext i8 @_bm_elem_flag_test(%struct.BMHeader* %head579, i8 zeroext 8), !dbg !12637
  %tobool581 = icmp ne i8 %call580, 0, !dbg !12637
  br i1 %tobool581, label %if.end589, label %land.lhs.true582, !dbg !12639

land.lhs.true582:                                 ; preds = %if.end576
  %379 = load %struct.BMEdge*, %struct.BMEdge** %bme_prev, align 8, !dbg !12640
  %head583 = getelementptr inbounds %struct.BMEdge, %struct.BMEdge* %379, i32 0, i32 0, !dbg !12640
  %call584 = call zeroext i8 @_bm_elem_flag_test(%struct.BMHeader* %head583, i8 zeroext 8), !dbg !12640
  %conv585 = zext i8 %call584 to i32, !dbg !12640
  %tobool586 = icmp ne i32 %conv585, 0, !dbg !12640
  br i1 %tobool586, label %if.then587, label %if.end589, !dbg !12641

if.then587:                                       ; preds = %land.lhs.true582
  %380 = load %struct.BMEdge*, %struct.BMEdge** %bme_new, align 8, !dbg !12642
  %head588 = getelementptr inbounds %struct.BMEdge, %struct.BMEdge* %380, i32 0, i32 0, !dbg !12642
  call void @_bm_elem_flag_enable(%struct.BMHeader* %head588, i8 zeroext 8), !dbg !12642
  br label %if.end589, !dbg !12644

if.end589:                                        ; preds = %if.then587, %land.lhs.true582, %if.end576
  br label %if.end593, !dbg !12645

if.else590:                                       ; preds = %land.lhs.true555, %if.then549
  %381 = load %struct.BMEdge**, %struct.BMEdge*** %ee, align 8, !dbg !12646
  %382 = load i32, i32* %k, align 4, !dbg !12647
  %idxprom591 = sext i32 %382 to i64, !dbg !12646
  %arrayidx592 = getelementptr inbounds %struct.BMEdge*, %struct.BMEdge** %381, i64 %idxprom591, !dbg !12646
  %383 = load %struct.BMEdge*, %struct.BMEdge** %arrayidx592, align 8, !dbg !12646
  store %struct.BMEdge* %383, %struct.BMEdge** %bme_prev, align 8, !dbg !12648
  br label %if.end593

if.end593:                                        ; preds = %if.else590, %if.end589
  br label %if.end594, !dbg !12649

if.end594:                                        ; preds = %if.end593, %for.body538
  br label %for.inc595, !dbg !12650

for.inc595:                                       ; preds = %if.end594
  %384 = load i32, i32* %k, align 4, !dbg !12651
  %inc596 = add nsw i32 %384, 1, !dbg !12651
  store i32 %inc596, i32* %k, align 4, !dbg !12651
  br label %for.cond535, !dbg !12652, !llvm.loop !12653

for.end597:                                       ; preds = %for.cond535
  %385 = load %struct.BMFace*, %struct.BMFace** %f_new, align 8, !dbg !12655
  %tobool598 = icmp ne %struct.BMFace* %385, null, !dbg !12655
  br i1 %tobool598, label %if.then599, label %if.end601, !dbg !12657

if.then599:                                       ; preds = %for.end597
  %386 = load %struct.BMFace*, %struct.BMFace** %f_new, align 8, !dbg !12658
  %head600 = getelementptr inbounds %struct.BMFace, %struct.BMFace* %386, i32 0, i32 0, !dbg !12658
  call void @_bm_elem_flag_disable(%struct.BMHeader* %head600, i8 zeroext 16), !dbg !12658
  br label %if.end601, !dbg !12660

if.end601:                                        ; preds = %if.then599, %for.end597
  br label %if.end602, !dbg !12661

if.end602:                                        ; preds = %if.end601, %for.end519
  %387 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !12662
  %tobool603 = icmp ne %struct.BMVert** %387, null, !dbg !12662
  br i1 %tobool603, label %land.lhs.true604, label %if.end610, !dbg !12662

land.lhs.true604:                                 ; preds = %if.end602
  %388 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !12662
  %389 = bitcast %struct.BMVert** %388 to i8*, !dbg !12662
  %arraydecay605 = getelementptr inbounds [32 x i8*], [32 x i8*]* %_vv_static, i64 0, i64 0, !dbg !12662
  %390 = bitcast i8** %arraydecay605 to i8*, !dbg !12662
  %cmp606 = icmp ne i8* %389, %390, !dbg !12662
  br i1 %cmp606, label %if.then608, label %if.end610, !dbg !12664

if.then608:                                       ; preds = %land.lhs.true604
  %391 = load i32, i32* %_vv_count, align 4, !dbg !12665
  %arraydecay609 = getelementptr inbounds [32 x i8*], [32 x i8*]* %_vv_static, i64 0, i64 0, !dbg !12665
  %392 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !12665
  %393 = load %struct.BMVert**, %struct.BMVert*** %vv, align 8, !dbg !12665
  %394 = bitcast %struct.BMVert** %393 to i8*, !dbg !12665
  call void %392(i8* %394), !dbg !12665
  br label %if.end610, !dbg !12665

if.end610:                                        ; preds = %if.then608, %land.lhs.true604, %if.end602
  %395 = load %struct.BMVert**, %struct.BMVert*** %vv_fix, align 8, !dbg !12667
  %tobool611 = icmp ne %struct.BMVert** %395, null, !dbg !12667
  br i1 %tobool611, label %land.lhs.true612, label %if.end618, !dbg !12667

land.lhs.true612:                                 ; preds = %if.end610
  %396 = load %struct.BMVert**, %struct.BMVert*** %vv_fix, align 8, !dbg !12667
  %397 = bitcast %struct.BMVert** %396 to i8*, !dbg !12667
  %arraydecay613 = getelementptr inbounds [32 x i8*], [32 x i8*]* %_vv_fix_static, i64 0, i64 0, !dbg !12667
  %398 = bitcast i8** %arraydecay613 to i8*, !dbg !12667
  %cmp614 = icmp ne i8* %397, %398, !dbg !12667
  br i1 %cmp614, label %if.then616, label %if.end618, !dbg !12669

if.then616:                                       ; preds = %land.lhs.true612
  %399 = load i32, i32* %_vv_fix_count, align 4, !dbg !12670
  %arraydecay617 = getelementptr inbounds [32 x i8*], [32 x i8*]* %_vv_fix_static, i64 0, i64 0, !dbg !12670
  %400 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !12670
  %401 = load %struct.BMVert**, %struct.BMVert*** %vv_fix, align 8, !dbg !12670
  %402 = bitcast %struct.BMVert** %401 to i8*, !dbg !12670
  call void %400(i8* %402), !dbg !12670
  br label %if.end618, !dbg !12670

if.end618:                                        ; preds = %if.then616, %land.lhs.true612, %if.end610
  %403 = load %struct.BMEdge**, %struct.BMEdge*** %ee, align 8, !dbg !12672
  %tobool619 = icmp ne %struct.BMEdge** %403, null, !dbg !12672
  br i1 %tobool619, label %land.lhs.true620, label %if.end626, !dbg !12672

land.lhs.true620:                                 ; preds = %if.end618
  %404 = load %struct.BMEdge**, %struct.BMEdge*** %ee, align 8, !dbg !12672
  %405 = bitcast %struct.BMEdge** %404 to i8*, !dbg !12672
  %arraydecay621 = getelementptr inbounds [32 x i8*], [32 x i8*]* %_ee_static, i64 0, i64 0, !dbg !12672
  %406 = bitcast i8** %arraydecay621 to i8*, !dbg !12672
  %cmp622 = icmp ne i8* %405, %406, !dbg !12672
  br i1 %cmp622, label %if.then624, label %if.end626, !dbg !12674

if.then624:                                       ; preds = %land.lhs.true620
  %407 = load i32, i32* %_ee_count, align 4, !dbg !12675
  %arraydecay625 = getelementptr inbounds [32 x i8*], [32 x i8*]* %_ee_static, i64 0, i64 0, !dbg !12675
  %408 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !12675
  %409 = load %struct.BMEdge**, %struct.BMEdge*** %ee, align 8, !dbg !12675
  %410 = bitcast %struct.BMEdge** %409 to i8*, !dbg !12675
  call void %408(i8* %410), !dbg !12675
  br label %if.end626, !dbg !12675

if.end626:                                        ; preds = %if.then624, %land.lhs.true620, %if.end618
  %411 = load i8, i8* %do_rebuild, align 1, !dbg !12677
  ret i8 %411, !dbg !12678
}

declare dso_local void @BM_face_kill(%struct.BMesh*, %struct.BMFace*) #3

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!314, !315, !316}
!llvm.ident = !{!317}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !273, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "blender/source/blender/bmesh/tools/bmesh_bevel.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!2 = !{!3, !15, !21, !27, !35, !42, !182, !199, !208, !215, !223, !267}
!3 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "eBMOpSlotType", file: !4, line: 94, baseType: !5, size: 32, elements: !6)
!4 = !DIFile(filename: "blender/source/blender/bmesh/intern/bmesh_operator_api.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!5 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!6 = !{!7, !8, !9, !10, !11, !12, !13, !14}
!7 = !DIEnumerator(name: "BMO_OP_SLOT_BOOL", value: 1, isUnsigned: true)
!8 = !DIEnumerator(name: "BMO_OP_SLOT_INT", value: 2, isUnsigned: true)
!9 = !DIEnumerator(name: "BMO_OP_SLOT_FLT", value: 3, isUnsigned: true)
!10 = !DIEnumerator(name: "BMO_OP_SLOT_PTR", value: 4, isUnsigned: true)
!11 = !DIEnumerator(name: "BMO_OP_SLOT_MAT", value: 5, isUnsigned: true)
!12 = !DIEnumerator(name: "BMO_OP_SLOT_VEC", value: 8, isUnsigned: true)
!13 = !DIEnumerator(name: "BMO_OP_SLOT_ELEMENT_BUF", value: 9, isUnsigned: true)
!14 = !DIEnumerator(name: "BMO_OP_SLOT_MAPPING", value: 10, isUnsigned: true)
!15 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "eBMOpSlotSubType_Elem", file: !4, line: 116, baseType: !5, size: 32, elements: !16)
!16 = !{!17, !18, !19, !20}
!17 = !DIEnumerator(name: "BMO_OP_SLOT_SUBTYPE_ELEM_VERT", value: 1, isUnsigned: true)
!18 = !DIEnumerator(name: "BMO_OP_SLOT_SUBTYPE_ELEM_EDGE", value: 2, isUnsigned: true)
!19 = !DIEnumerator(name: "BMO_OP_SLOT_SUBTYPE_ELEM_FACE", value: 8, isUnsigned: true)
!20 = !DIEnumerator(name: "BMO_OP_SLOT_SUBTYPE_ELEM_IS_SINGLE", value: 16, isUnsigned: true)
!21 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "eBMOpSlotSubType_Ptr", file: !4, line: 131, baseType: !5, size: 32, elements: !22)
!22 = !{!23, !24, !25, !26}
!23 = !DIEnumerator(name: "BMO_OP_SLOT_SUBTYPE_PTR_BMESH", value: 100, isUnsigned: true)
!24 = !DIEnumerator(name: "BMO_OP_SLOT_SUBTYPE_PTR_SCENE", value: 101, isUnsigned: true)
!25 = !DIEnumerator(name: "BMO_OP_SLOT_SUBTYPE_PTR_OBJECT", value: 102, isUnsigned: true)
!26 = !DIEnumerator(name: "BMO_OP_SLOT_SUBTYPE_PTR_MESH", value: 103, isUnsigned: true)
!27 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "eBMOpSlotSubType_Map", file: !4, line: 123, baseType: !5, size: 32, elements: !28)
!28 = !{!29, !30, !31, !32, !33, !34}
!29 = !DIEnumerator(name: "BMO_OP_SLOT_SUBTYPE_MAP_EMPTY", value: 64, isUnsigned: true)
!30 = !DIEnumerator(name: "BMO_OP_SLOT_SUBTYPE_MAP_ELEM", value: 65, isUnsigned: true)
!31 = !DIEnumerator(name: "BMO_OP_SLOT_SUBTYPE_MAP_FLT", value: 66, isUnsigned: true)
!32 = !DIEnumerator(name: "BMO_OP_SLOT_SUBTYPE_MAP_INT", value: 67, isUnsigned: true)
!33 = !DIEnumerator(name: "BMO_OP_SLOT_SUBTYPE_MAP_BOOL", value: 68, isUnsigned: true)
!34 = !DIEnumerator(name: "BMO_OP_SLOT_SUBTYPE_MAP_INTERNAL", value: 69, isUnsigned: true)
!35 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !4, line: 182, baseType: !5, size: 32, elements: !36)
!36 = !{!37, !38, !39, !40, !41}
!37 = !DIEnumerator(name: "BMO_OPTYPE_FLAG_NOP", value: 0, isUnsigned: true)
!38 = !DIEnumerator(name: "BMO_OPTYPE_FLAG_UNTAN_MULTIRES", value: 1, isUnsigned: true)
!39 = !DIEnumerator(name: "BMO_OPTYPE_FLAG_NORMALS_CALC", value: 2, isUnsigned: true)
!40 = !DIEnumerator(name: "BMO_OPTYPE_FLAG_SELECT_FLUSH", value: 4, isUnsigned: true)
!41 = !DIEnumerator(name: "BMO_OPTYPE_FLAG_SELECT_VALIDATE", value: 8, isUnsigned: true)
!42 = !DICompositeType(tag: DW_TAG_enumeration_type, scope: !43, file: !1, line: 148, baseType: !5, size: 32, elements: !176)
!43 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VMesh", file: !1, line: 143, size: 256, elements: !44)
!44 = !{!45, !120, !173, !174, !175}
!45 = !DIDerivedType(tag: DW_TAG_member, name: "mesh", scope: !43, file: !1, line: 144, baseType: !46, size: 64)
!46 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !47, size: 64)
!47 = !DIDerivedType(tag: DW_TAG_typedef, name: "NewVert", file: !1, line: 68, baseType: !48)
!48 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "NewVert", file: !1, line: 64, size: 192, elements: !49)
!49 = !{!50, !119}
!50 = !DIDerivedType(tag: DW_TAG_member, name: "v", scope: !48, file: !1, line: 65, baseType: !51, size: 64)
!51 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !52, size: 64)
!52 = !DIDerivedType(tag: DW_TAG_typedef, name: "BMVert", file: !53, line: 103, baseType: !54)
!53 = !DIFile(filename: "blender/source/blender/bmesh/bmesh_class.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!54 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BMVert", file: !53, line: 90, size: 448, elements: !55)
!55 = !{!56, !68, !74, !79, !80}
!56 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !54, file: !53, line: 91, baseType: !57, size: 128)
!57 = !DIDerivedType(tag: DW_TAG_typedef, name: "BMHeader", file: !53, line: 82, baseType: !58)
!58 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BMHeader", file: !53, line: 64, size: 128, elements: !59)
!59 = !{!60, !62, !64, !66, !67}
!60 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !58, file: !53, line: 65, baseType: !61, size: 64)
!61 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!62 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !58, file: !53, line: 66, baseType: !63, size: 32, offset: 64)
!63 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!64 = !DIDerivedType(tag: DW_TAG_member, name: "htype", scope: !58, file: !53, line: 73, baseType: !65, size: 8, offset: 96)
!65 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_unsigned_char)
!66 = !DIDerivedType(tag: DW_TAG_member, name: "hflag", scope: !58, file: !53, line: 74, baseType: !65, size: 8, offset: 104)
!67 = !DIDerivedType(tag: DW_TAG_member, name: "api_flag", scope: !58, file: !53, line: 80, baseType: !65, size: 8, offset: 112)
!68 = !DIDerivedType(tag: DW_TAG_member, name: "oflags", scope: !54, file: !53, line: 92, baseType: !69, size: 64, offset: 128)
!69 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !70, size: 64)
!70 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BMFlagLayer", file: !53, line: 180, size: 16, elements: !71)
!71 = !{!72}
!72 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !70, file: !53, line: 181, baseType: !73, size: 16)
!73 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!74 = !DIDerivedType(tag: DW_TAG_member, name: "co", scope: !54, file: !53, line: 94, baseType: !75, size: 96, offset: 192)
!75 = !DICompositeType(tag: DW_TAG_array_type, baseType: !76, size: 96, elements: !77)
!76 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!77 = !{!78}
!78 = !DISubrange(count: 3)
!79 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !54, file: !53, line: 95, baseType: !75, size: 96, offset: 288)
!80 = !DIDerivedType(tag: DW_TAG_member, name: "e", scope: !54, file: !53, line: 102, baseType: !81, size: 64, offset: 384)
!81 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !82, size: 64)
!82 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BMEdge", file: !53, line: 110, size: 640, elements: !83)
!83 = !{!84, !85, !86, !88, !89, !112, !118}
!84 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !82, file: !53, line: 111, baseType: !57, size: 128)
!85 = !DIDerivedType(tag: DW_TAG_member, name: "oflags", scope: !82, file: !53, line: 112, baseType: !69, size: 64, offset: 128)
!86 = !DIDerivedType(tag: DW_TAG_member, name: "v1", scope: !82, file: !53, line: 114, baseType: !87, size: 64, offset: 192)
!87 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !54, size: 64)
!88 = !DIDerivedType(tag: DW_TAG_member, name: "v2", scope: !82, file: !53, line: 114, baseType: !87, size: 64, offset: 256)
!89 = !DIDerivedType(tag: DW_TAG_member, name: "l", scope: !82, file: !53, line: 118, baseType: !90, size: 64, offset: 320)
!90 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !91, size: 64)
!91 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BMLoop", file: !53, line: 125, size: 576, elements: !92)
!92 = !{!93, !94, !95, !96, !108, !109, !110, !111}
!93 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !91, file: !53, line: 126, baseType: !57, size: 128)
!94 = !DIDerivedType(tag: DW_TAG_member, name: "v", scope: !91, file: !53, line: 129, baseType: !87, size: 64, offset: 128)
!95 = !DIDerivedType(tag: DW_TAG_member, name: "e", scope: !91, file: !53, line: 130, baseType: !81, size: 64, offset: 192)
!96 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !91, file: !53, line: 131, baseType: !97, size: 64, offset: 256)
!97 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !98, size: 64)
!98 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BMFace", file: !53, line: 164, size: 448, elements: !99)
!99 = !{!100, !101, !102, !105, !106, !107}
!100 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !98, file: !53, line: 165, baseType: !57, size: 128)
!101 = !DIDerivedType(tag: DW_TAG_member, name: "oflags", scope: !98, file: !53, line: 166, baseType: !69, size: 64, offset: 128)
!102 = !DIDerivedType(tag: DW_TAG_member, name: "l_first", scope: !98, file: !53, line: 172, baseType: !103, size: 64, offset: 192)
!103 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !104, size: 64)
!104 = !DIDerivedType(tag: DW_TAG_typedef, name: "BMLoop", file: !53, line: 140, baseType: !91)
!105 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !98, file: !53, line: 174, baseType: !63, size: 32, offset: 256)
!106 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !98, file: !53, line: 175, baseType: !75, size: 96, offset: 288)
!107 = !DIDerivedType(tag: DW_TAG_member, name: "mat_nr", scope: !98, file: !53, line: 176, baseType: !73, size: 16, offset: 384)
!108 = !DIDerivedType(tag: DW_TAG_member, name: "radial_next", scope: !91, file: !53, line: 135, baseType: !90, size: 64, offset: 320)
!109 = !DIDerivedType(tag: DW_TAG_member, name: "radial_prev", scope: !91, file: !53, line: 135, baseType: !90, size: 64, offset: 384)
!110 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !91, file: !53, line: 139, baseType: !90, size: 64, offset: 448)
!111 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !91, file: !53, line: 139, baseType: !90, size: 64, offset: 512)
!112 = !DIDerivedType(tag: DW_TAG_member, name: "v1_disk_link", scope: !82, file: !53, line: 122, baseType: !113, size: 128, offset: 384)
!113 = !DIDerivedType(tag: DW_TAG_typedef, name: "BMDiskLink", file: !53, line: 108, baseType: !114)
!114 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BMDiskLink", file: !53, line: 106, size: 128, elements: !115)
!115 = !{!116, !117}
!116 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !114, file: !53, line: 107, baseType: !81, size: 64)
!117 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !114, file: !53, line: 107, baseType: !81, size: 64, offset: 64)
!118 = !DIDerivedType(tag: DW_TAG_member, name: "v2_disk_link", scope: !82, file: !53, line: 122, baseType: !113, size: 128, offset: 512)
!119 = !DIDerivedType(tag: DW_TAG_member, name: "co", scope: !48, file: !1, line: 66, baseType: !75, size: 96, offset: 64)
!120 = !DIDerivedType(tag: DW_TAG_member, name: "boundstart", scope: !43, file: !1, line: 145, baseType: !121, size: 64, offset: 64)
!121 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !122, size: 64)
!122 = !DIDerivedType(tag: DW_TAG_typedef, name: "BoundVert", file: !1, line: 140, baseType: !123)
!123 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BoundVert", file: !1, line: 130, size: 1408, elements: !124)
!124 = !{!125, !127, !128, !129, !155, !156, !157, !158, !172}
!125 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !123, file: !1, line: 131, baseType: !126, size: 64)
!126 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !123, size: 64)
!127 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !123, file: !1, line: 131, baseType: !126, size: 64, offset: 64)
!128 = !DIDerivedType(tag: DW_TAG_member, name: "nv", scope: !123, file: !1, line: 132, baseType: !47, size: 192, offset: 128)
!129 = !DIDerivedType(tag: DW_TAG_member, name: "efirst", scope: !123, file: !1, line: 133, baseType: !130, size: 64, offset: 320)
!130 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !131, size: 64)
!131 = !DIDerivedType(tag: DW_TAG_typedef, name: "EdgeHalf", file: !1, line: 89, baseType: !132)
!132 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "EdgeHalf", file: !1, line: 73, size: 640, elements: !133)
!133 = !{!134, !136, !137, !140, !143, !144, !145, !146, !147, !148, !149, !150, !151, !153, !154}
!134 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !132, file: !1, line: 74, baseType: !135, size: 64)
!135 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !132, size: 64)
!136 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !132, file: !1, line: 74, baseType: !135, size: 64, offset: 64)
!137 = !DIDerivedType(tag: DW_TAG_member, name: "e", scope: !132, file: !1, line: 75, baseType: !138, size: 64, offset: 128)
!138 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !139, size: 64)
!139 = !DIDerivedType(tag: DW_TAG_typedef, name: "BMEdge", file: !53, line: 123, baseType: !82)
!140 = !DIDerivedType(tag: DW_TAG_member, name: "fprev", scope: !132, file: !1, line: 76, baseType: !141, size: 64, offset: 192)
!141 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !142, size: 64)
!142 = !DIDerivedType(tag: DW_TAG_typedef, name: "BMFace", file: !53, line: 178, baseType: !98)
!143 = !DIDerivedType(tag: DW_TAG_member, name: "fnext", scope: !132, file: !1, line: 77, baseType: !141, size: 64, offset: 256)
!144 = !DIDerivedType(tag: DW_TAG_member, name: "leftv", scope: !132, file: !1, line: 78, baseType: !126, size: 64, offset: 320)
!145 = !DIDerivedType(tag: DW_TAG_member, name: "rightv", scope: !132, file: !1, line: 79, baseType: !126, size: 64, offset: 384)
!146 = !DIDerivedType(tag: DW_TAG_member, name: "seg", scope: !132, file: !1, line: 80, baseType: !63, size: 32, offset: 448)
!147 = !DIDerivedType(tag: DW_TAG_member, name: "offset_l", scope: !132, file: !1, line: 81, baseType: !76, size: 32, offset: 480)
!148 = !DIDerivedType(tag: DW_TAG_member, name: "offset_r", scope: !132, file: !1, line: 82, baseType: !76, size: 32, offset: 512)
!149 = !DIDerivedType(tag: DW_TAG_member, name: "offset_l_spec", scope: !132, file: !1, line: 83, baseType: !76, size: 32, offset: 544)
!150 = !DIDerivedType(tag: DW_TAG_member, name: "offset_r_spec", scope: !132, file: !1, line: 84, baseType: !76, size: 32, offset: 576)
!151 = !DIDerivedType(tag: DW_TAG_member, name: "is_bev", scope: !132, file: !1, line: 85, baseType: !152, size: 8, offset: 608)
!152 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!153 = !DIDerivedType(tag: DW_TAG_member, name: "is_rev", scope: !132, file: !1, line: 86, baseType: !152, size: 8, offset: 616)
!154 = !DIDerivedType(tag: DW_TAG_member, name: "is_seam", scope: !132, file: !1, line: 87, baseType: !152, size: 8, offset: 624)
!155 = !DIDerivedType(tag: DW_TAG_member, name: "elast", scope: !123, file: !1, line: 134, baseType: !130, size: 64, offset: 384)
!156 = !DIDerivedType(tag: DW_TAG_member, name: "ebev", scope: !123, file: !1, line: 135, baseType: !130, size: 64, offset: 448)
!157 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !123, file: !1, line: 136, baseType: !63, size: 32, offset: 512)
!158 = !DIDerivedType(tag: DW_TAG_member, name: "profile", scope: !123, file: !1, line: 137, baseType: !159, size: 768, offset: 576)
!159 = !DIDerivedType(tag: DW_TAG_typedef, name: "Profile", file: !1, line: 114, baseType: !160)
!160 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Profile", file: !1, line: 104, size: 768, elements: !161)
!161 = !{!162, !163, !164, !165, !166, !167, !168, !169, !171}
!162 = !DIDerivedType(tag: DW_TAG_member, name: "super_r", scope: !160, file: !1, line: 105, baseType: !76, size: 32)
!163 = !DIDerivedType(tag: DW_TAG_member, name: "coa", scope: !160, file: !1, line: 106, baseType: !75, size: 96, offset: 32)
!164 = !DIDerivedType(tag: DW_TAG_member, name: "midco", scope: !160, file: !1, line: 107, baseType: !75, size: 96, offset: 128)
!165 = !DIDerivedType(tag: DW_TAG_member, name: "cob", scope: !160, file: !1, line: 108, baseType: !75, size: 96, offset: 224)
!166 = !DIDerivedType(tag: DW_TAG_member, name: "plane_no", scope: !160, file: !1, line: 109, baseType: !75, size: 96, offset: 320)
!167 = !DIDerivedType(tag: DW_TAG_member, name: "plane_co", scope: !160, file: !1, line: 110, baseType: !75, size: 96, offset: 416)
!168 = !DIDerivedType(tag: DW_TAG_member, name: "proj_dir", scope: !160, file: !1, line: 111, baseType: !75, size: 96, offset: 512)
!169 = !DIDerivedType(tag: DW_TAG_member, name: "prof_co", scope: !160, file: !1, line: 112, baseType: !170, size: 64, offset: 640)
!170 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !76, size: 64)
!171 = !DIDerivedType(tag: DW_TAG_member, name: "prof_co_2", scope: !160, file: !1, line: 113, baseType: !170, size: 64, offset: 704)
!172 = !DIDerivedType(tag: DW_TAG_member, name: "any_seam", scope: !123, file: !1, line: 138, baseType: !152, size: 8, offset: 1344)
!173 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !43, file: !1, line: 146, baseType: !63, size: 32, offset: 128)
!174 = !DIDerivedType(tag: DW_TAG_member, name: "seg", scope: !43, file: !1, line: 147, baseType: !63, size: 32, offset: 160)
!175 = !DIDerivedType(tag: DW_TAG_member, name: "mesh_kind", scope: !43, file: !1, line: 154, baseType: !42, size: 32, offset: 192)
!176 = !{!177, !178, !179, !180, !181}
!177 = !DIEnumerator(name: "M_NONE", value: 0, isUnsigned: true)
!178 = !DIEnumerator(name: "M_POLY", value: 1, isUnsigned: true)
!179 = !DIEnumerator(name: "M_ADJ", value: 2, isUnsigned: true)
!180 = !DIEnumerator(name: "M_TRI_FAN", value: 3, isUnsigned: true)
!181 = !DIEnumerator(name: "M_QUAD_STRIP", value: 4, isUnsigned: true)
!182 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "BMIterType", file: !183, line: 57, baseType: !5, size: 32, elements: !184)
!183 = !DIFile(filename: "blender/source/blender/bmesh/intern/bmesh_iterators.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!184 = !{!185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198}
!185 = !DIEnumerator(name: "BM_VERTS_OF_MESH", value: 1, isUnsigned: true)
!186 = !DIEnumerator(name: "BM_EDGES_OF_MESH", value: 2, isUnsigned: true)
!187 = !DIEnumerator(name: "BM_FACES_OF_MESH", value: 3, isUnsigned: true)
!188 = !DIEnumerator(name: "BM_EDGES_OF_VERT", value: 4, isUnsigned: true)
!189 = !DIEnumerator(name: "BM_FACES_OF_VERT", value: 5, isUnsigned: true)
!190 = !DIEnumerator(name: "BM_LOOPS_OF_VERT", value: 6, isUnsigned: true)
!191 = !DIEnumerator(name: "BM_VERTS_OF_EDGE", value: 7, isUnsigned: true)
!192 = !DIEnumerator(name: "BM_FACES_OF_EDGE", value: 8, isUnsigned: true)
!193 = !DIEnumerator(name: "BM_VERTS_OF_FACE", value: 9, isUnsigned: true)
!194 = !DIEnumerator(name: "BM_EDGES_OF_FACE", value: 10, isUnsigned: true)
!195 = !DIEnumerator(name: "BM_LOOPS_OF_FACE", value: 11, isUnsigned: true)
!196 = !DIEnumerator(name: "BM_ALL_LOOPS_OF_FACE", value: 12, isUnsigned: true)
!197 = !DIEnumerator(name: "BM_LOOPS_OF_LOOP", value: 13, isUnsigned: true)
!198 = !DIEnumerator(name: "BM_LOOPS_OF_EDGE", value: 14, isUnsigned: true)
!199 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !53, line: 260, baseType: !5, size: 32, elements: !200)
!200 = !{!201, !202, !203, !204, !205, !206, !207}
!201 = !DIEnumerator(name: "BM_ELEM_SELECT", value: 1, isUnsigned: true)
!202 = !DIEnumerator(name: "BM_ELEM_HIDDEN", value: 2, isUnsigned: true)
!203 = !DIEnumerator(name: "BM_ELEM_SEAM", value: 4, isUnsigned: true)
!204 = !DIEnumerator(name: "BM_ELEM_SMOOTH", value: 8, isUnsigned: true)
!205 = !DIEnumerator(name: "BM_ELEM_TAG", value: 16, isUnsigned: true)
!206 = !DIEnumerator(name: "BM_ELEM_DRAW", value: 32, isUnsigned: true)
!207 = !DIEnumerator(name: "BM_ELEM_INTERNAL_TAG", value: 128, isUnsigned: true)
!208 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !209, line: 121, baseType: !5, size: 32, elements: !210)
!209 = !DIFile(filename: "blender/source/blender/bmesh/intern/bmesh_operators.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!210 = !{!211, !212, !213, !214}
!211 = !DIEnumerator(name: "BEVEL_AMT_OFFSET", value: 0, isUnsigned: true)
!212 = !DIEnumerator(name: "BEVEL_AMT_WIDTH", value: 1, isUnsigned: true)
!213 = !DIEnumerator(name: "BEVEL_AMT_DEPTH", value: 2, isUnsigned: true)
!214 = !DIEnumerator(name: "BEVEL_AMT_PERCENT", value: 3, isUnsigned: true)
!215 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !216, line: 63, baseType: !5, size: 32, elements: !217)
!216 = !DIFile(filename: "blender/source/blender/bmesh/./intern/bmesh_private.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!217 = !{!218, !219, !220, !221, !222}
!218 = !DIEnumerator(name: "_FLAG_JF", value: 1, isUnsigned: true)
!219 = !DIEnumerator(name: "_FLAG_MF", value: 2, isUnsigned: true)
!220 = !DIEnumerator(name: "_FLAG_MV", value: 2, isUnsigned: true)
!221 = !DIEnumerator(name: "_FLAG_OVERLAP", value: 4, isUnsigned: true)
!222 = !DIEnumerator(name: "_FLAG_WALK", value: 8, isUnsigned: true)
!223 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !224, line: 76, baseType: !5, size: 32, elements: !225)
!224 = !DIFile(filename: "blender/source/blender/makesdna/DNA_customdata_types.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!225 = !{!226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266}
!226 = !DIEnumerator(name: "CD_MVERT", value: 0, isUnsigned: true)
!227 = !DIEnumerator(name: "CD_MSTICKY", value: 1, isUnsigned: true)
!228 = !DIEnumerator(name: "CD_MDEFORMVERT", value: 2, isUnsigned: true)
!229 = !DIEnumerator(name: "CD_MEDGE", value: 3, isUnsigned: true)
!230 = !DIEnumerator(name: "CD_MFACE", value: 4, isUnsigned: true)
!231 = !DIEnumerator(name: "CD_MTFACE", value: 5, isUnsigned: true)
!232 = !DIEnumerator(name: "CD_MCOL", value: 6, isUnsigned: true)
!233 = !DIEnumerator(name: "CD_ORIGINDEX", value: 7, isUnsigned: true)
!234 = !DIEnumerator(name: "CD_NORMAL", value: 8, isUnsigned: true)
!235 = !DIEnumerator(name: "CD_PROP_FLT", value: 10, isUnsigned: true)
!236 = !DIEnumerator(name: "CD_PROP_INT", value: 11, isUnsigned: true)
!237 = !DIEnumerator(name: "CD_PROP_STR", value: 12, isUnsigned: true)
!238 = !DIEnumerator(name: "CD_ORIGSPACE", value: 13, isUnsigned: true)
!239 = !DIEnumerator(name: "CD_ORCO", value: 14, isUnsigned: true)
!240 = !DIEnumerator(name: "CD_MTEXPOLY", value: 15, isUnsigned: true)
!241 = !DIEnumerator(name: "CD_MLOOPUV", value: 16, isUnsigned: true)
!242 = !DIEnumerator(name: "CD_MLOOPCOL", value: 17, isUnsigned: true)
!243 = !DIEnumerator(name: "CD_TANGENT", value: 18, isUnsigned: true)
!244 = !DIEnumerator(name: "CD_MDISPS", value: 19, isUnsigned: true)
!245 = !DIEnumerator(name: "CD_PREVIEW_MCOL", value: 20, isUnsigned: true)
!246 = !DIEnumerator(name: "CD_ID_MCOL", value: 21, isUnsigned: true)
!247 = !DIEnumerator(name: "CD_TEXTURE_MCOL", value: 22, isUnsigned: true)
!248 = !DIEnumerator(name: "CD_CLOTH_ORCO", value: 23, isUnsigned: true)
!249 = !DIEnumerator(name: "CD_RECAST", value: 24, isUnsigned: true)
!250 = !DIEnumerator(name: "CD_MPOLY", value: 25, isUnsigned: true)
!251 = !DIEnumerator(name: "CD_MLOOP", value: 26, isUnsigned: true)
!252 = !DIEnumerator(name: "CD_SHAPE_KEYINDEX", value: 27, isUnsigned: true)
!253 = !DIEnumerator(name: "CD_SHAPEKEY", value: 28, isUnsigned: true)
!254 = !DIEnumerator(name: "CD_BWEIGHT", value: 29, isUnsigned: true)
!255 = !DIEnumerator(name: "CD_CREASE", value: 30, isUnsigned: true)
!256 = !DIEnumerator(name: "CD_ORIGSPACE_MLOOP", value: 31, isUnsigned: true)
!257 = !DIEnumerator(name: "CD_PREVIEW_MLOOPCOL", value: 32, isUnsigned: true)
!258 = !DIEnumerator(name: "CD_BM_ELEM_PYPTR", value: 33, isUnsigned: true)
!259 = !DIEnumerator(name: "CD_PAINT_MASK", value: 34, isUnsigned: true)
!260 = !DIEnumerator(name: "CD_GRID_PAINT_MASK", value: 35, isUnsigned: true)
!261 = !DIEnumerator(name: "CD_MVERT_SKIN", value: 36, isUnsigned: true)
!262 = !DIEnumerator(name: "CD_FREESTYLE_EDGE", value: 37, isUnsigned: true)
!263 = !DIEnumerator(name: "CD_FREESTYLE_FACE", value: 38, isUnsigned: true)
!264 = !DIEnumerator(name: "CD_MLOOPTANGENT", value: 39, isUnsigned: true)
!265 = !DIEnumerator(name: "CD_TESSLOOPNORMAL", value: 40, isUnsigned: true)
!266 = !DIEnumerator(name: "CD_NUMTYPES", value: 41, isUnsigned: true)
!267 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "eBMCreateFlag", file: !268, line: 33, baseType: !5, size: 32, elements: !269)
!268 = !DIFile(filename: "blender/source/blender/bmesh/intern/bmesh_core.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!269 = !{!270, !271, !272}
!270 = !DIEnumerator(name: "BM_CREATE_NOP", value: 0, isUnsigned: true)
!271 = !DIEnumerator(name: "BM_CREATE_NO_DOUBLE", value: 2, isUnsigned: true)
!272 = !DIEnumerator(name: "BM_CREATE_SKIP_CD", value: 4, isUnsigned: true)
!273 = !{!61, !170, !76, !274, !275, !279, !51, !138, !141, !103, !283, !130, !296, !298, !65, !300, !121, !301, !46, !308, !311, !312, !313}
!274 = !DIDerivedType(tag: DW_TAG_typedef, name: "BMIterType", file: !183, line: 79, baseType: !182)
!275 = !DIDerivedType(tag: DW_TAG_typedef, name: "BMIter__begin_cb", file: !183, line: 158, baseType: !276)
!276 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !277, size: 64)
!277 = !DISubroutineType(types: !278)
!278 = !{null, !61}
!279 = !DIDerivedType(tag: DW_TAG_typedef, name: "BMIter__step_cb", file: !183, line: 159, baseType: !280)
!280 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !281, size: 64)
!281 = !DISubroutineType(types: !282)
!282 = !{!61, !61}
!283 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !284, size: 64)
!284 = !DIDerivedType(tag: DW_TAG_typedef, name: "BevVert", file: !1, line: 170, baseType: !285)
!285 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BevVert", file: !1, line: 159, size: 448, elements: !286)
!286 = !{!287, !288, !289, !290, !291, !292, !293, !294, !295, !297}
!287 = !DIDerivedType(tag: DW_TAG_member, name: "v", scope: !285, file: !1, line: 160, baseType: !51, size: 64)
!288 = !DIDerivedType(tag: DW_TAG_member, name: "edgecount", scope: !285, file: !1, line: 161, baseType: !63, size: 32, offset: 64)
!289 = !DIDerivedType(tag: DW_TAG_member, name: "selcount", scope: !285, file: !1, line: 162, baseType: !63, size: 32, offset: 96)
!290 = !DIDerivedType(tag: DW_TAG_member, name: "wirecount", scope: !285, file: !1, line: 163, baseType: !63, size: 32, offset: 128)
!291 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !285, file: !1, line: 164, baseType: !76, size: 32, offset: 160)
!292 = !DIDerivedType(tag: DW_TAG_member, name: "any_seam", scope: !285, file: !1, line: 165, baseType: !152, size: 8, offset: 192)
!293 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !285, file: !1, line: 166, baseType: !152, size: 8, offset: 200)
!294 = !DIDerivedType(tag: DW_TAG_member, name: "edges", scope: !285, file: !1, line: 167, baseType: !130, size: 64, offset: 256)
!295 = !DIDerivedType(tag: DW_TAG_member, name: "wire_edges", scope: !285, file: !1, line: 168, baseType: !296, size: 64, offset: 320)
!296 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !138, size: 64)
!297 = !DIDerivedType(tag: DW_TAG_member, name: "vmesh", scope: !285, file: !1, line: 169, baseType: !298, size: 64, offset: 384)
!298 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !299, size: 64)
!299 = !DIDerivedType(tag: DW_TAG_typedef, name: "VMesh", file: !1, line: 156, baseType: !43)
!300 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !65, size: 64)
!301 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !302, size: 64)
!302 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_gh_Entry", file: !303, line: 94, size: 192, elements: !304)
!303 = !DIFile(filename: "blender/source/blender/blenlib/BLI_ghash.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!304 = !{!305, !306, !307}
!305 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !302, file: !303, line: 94, baseType: !61, size: 64)
!306 = !DIDerivedType(tag: DW_TAG_member, name: "key", scope: !302, file: !303, line: 94, baseType: !61, size: 64, offset: 64)
!307 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !302, file: !303, line: 94, baseType: !61, size: 64, offset: 128)
!308 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !309, line: 46, baseType: !310)
!309 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!310 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!311 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !61, size: 64)
!312 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!313 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !141, size: 64)
!314 = !{i32 7, !"Dwarf Version", i32 4}
!315 = !{i32 2, !"Debug Info Version", i32 3}
!316 = !{i32 1, !"wchar_size", i32 4}
!317 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!318 = distinct !DISubprogram(name: "BM_mesh_bevel", scope: !1, file: !1, line: 3686, type: !319, scopeLine: 3690, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !475)
!319 = !DISubroutineType(types: !320)
!320 = !{null, !321, !459, !460, !459, !459, !461, !461, !461, !462, !460, !460}
!321 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !322, size: 64)
!322 = !DIDerivedType(tag: DW_TAG_typedef, name: "BMesh", file: !53, line: 246, baseType: !323)
!323 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BMesh", file: !53, line: 186, size: 8064, elements: !324)
!324 = !{!325, !326, !327, !328, !329, !330, !331, !332, !333, !334, !337, !338, !339, !340, !342, !343, !344, !345, !346, !347, !348, !349, !350, !351, !403, !442, !443, !444, !445, !446, !447, !448, !449, !456, !457, !458}
!325 = !DIDerivedType(tag: DW_TAG_member, name: "totvert", scope: !323, file: !53, line: 187, baseType: !63, size: 32)
!326 = !DIDerivedType(tag: DW_TAG_member, name: "totedge", scope: !323, file: !53, line: 187, baseType: !63, size: 32, offset: 32)
!327 = !DIDerivedType(tag: DW_TAG_member, name: "totloop", scope: !323, file: !53, line: 187, baseType: !63, size: 32, offset: 64)
!328 = !DIDerivedType(tag: DW_TAG_member, name: "totface", scope: !323, file: !53, line: 187, baseType: !63, size: 32, offset: 96)
!329 = !DIDerivedType(tag: DW_TAG_member, name: "totvertsel", scope: !323, file: !53, line: 188, baseType: !63, size: 32, offset: 128)
!330 = !DIDerivedType(tag: DW_TAG_member, name: "totedgesel", scope: !323, file: !53, line: 188, baseType: !63, size: 32, offset: 160)
!331 = !DIDerivedType(tag: DW_TAG_member, name: "totfacesel", scope: !323, file: !53, line: 188, baseType: !63, size: 32, offset: 192)
!332 = !DIDerivedType(tag: DW_TAG_member, name: "elem_index_dirty", scope: !323, file: !53, line: 193, baseType: !65, size: 8, offset: 224)
!333 = !DIDerivedType(tag: DW_TAG_member, name: "elem_table_dirty", scope: !323, file: !53, line: 197, baseType: !65, size: 8, offset: 232)
!334 = !DIDerivedType(tag: DW_TAG_member, name: "vpool", scope: !323, file: !53, line: 201, baseType: !335, size: 64, offset: 256)
!335 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !336, size: 64)
!336 = !DICompositeType(tag: DW_TAG_structure_type, name: "BLI_mempool", file: !224, line: 71, flags: DIFlagFwdDecl)
!337 = !DIDerivedType(tag: DW_TAG_member, name: "epool", scope: !323, file: !53, line: 201, baseType: !335, size: 64, offset: 320)
!338 = !DIDerivedType(tag: DW_TAG_member, name: "lpool", scope: !323, file: !53, line: 201, baseType: !335, size: 64, offset: 384)
!339 = !DIDerivedType(tag: DW_TAG_member, name: "fpool", scope: !323, file: !53, line: 201, baseType: !335, size: 64, offset: 448)
!340 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !323, file: !53, line: 208, baseType: !341, size: 64, offset: 512)
!341 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !51, size: 64)
!342 = !DIDerivedType(tag: DW_TAG_member, name: "etable", scope: !323, file: !53, line: 209, baseType: !296, size: 64, offset: 576)
!343 = !DIDerivedType(tag: DW_TAG_member, name: "ftable", scope: !323, file: !53, line: 210, baseType: !313, size: 64, offset: 640)
!344 = !DIDerivedType(tag: DW_TAG_member, name: "vtable_tot", scope: !323, file: !53, line: 213, baseType: !63, size: 32, offset: 704)
!345 = !DIDerivedType(tag: DW_TAG_member, name: "etable_tot", scope: !323, file: !53, line: 214, baseType: !63, size: 32, offset: 736)
!346 = !DIDerivedType(tag: DW_TAG_member, name: "ftable_tot", scope: !323, file: !53, line: 215, baseType: !63, size: 32, offset: 768)
!347 = !DIDerivedType(tag: DW_TAG_member, name: "vtoolflagpool", scope: !323, file: !53, line: 218, baseType: !335, size: 64, offset: 832)
!348 = !DIDerivedType(tag: DW_TAG_member, name: "etoolflagpool", scope: !323, file: !53, line: 218, baseType: !335, size: 64, offset: 896)
!349 = !DIDerivedType(tag: DW_TAG_member, name: "ftoolflagpool", scope: !323, file: !53, line: 218, baseType: !335, size: 64, offset: 960)
!350 = !DIDerivedType(tag: DW_TAG_member, name: "stackdepth", scope: !323, file: !53, line: 220, baseType: !63, size: 32, offset: 1024)
!351 = !DIDerivedType(tag: DW_TAG_member, name: "currentop", scope: !323, file: !53, line: 221, baseType: !352, size: 64, offset: 1088)
!352 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !353, size: 64)
!353 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BMOperator", file: !4, line: 190, size: 10496, elements: !354)
!354 = !{!355, !390, !391, !395, !399, !400, !402}
!355 = !DIDerivedType(tag: DW_TAG_member, name: "slots_in", scope: !353, file: !4, line: 191, baseType: !356, size: 5120)
!356 = !DICompositeType(tag: DW_TAG_array_type, baseType: !357, size: 5120, elements: !388)
!357 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BMOpSlot", file: !4, line: 147, size: 320, elements: !358)
!358 = !{!359, !362, !364, !374, !375}
!359 = !DIDerivedType(tag: DW_TAG_member, name: "slot_name", scope: !357, file: !4, line: 148, baseType: !360, size: 64)
!360 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !361, size: 64)
!361 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !65)
!362 = !DIDerivedType(tag: DW_TAG_member, name: "slot_type", scope: !357, file: !4, line: 149, baseType: !363, size: 32, offset: 64)
!363 = !DIDerivedType(tag: DW_TAG_typedef, name: "eBMOpSlotType", file: !4, line: 112, baseType: !3)
!364 = !DIDerivedType(tag: DW_TAG_member, name: "slot_subtype", scope: !357, file: !4, line: 150, baseType: !365, size: 32, offset: 96)
!365 = !DIDerivedType(tag: DW_TAG_typedef, name: "eBMOpSlotSubType_Union", file: !4, line: 142, baseType: !366)
!366 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "eBMOpSlotSubType_Union", file: !4, line: 138, size: 32, elements: !367)
!367 = !{!368, !370, !372}
!368 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !366, file: !4, line: 139, baseType: !369, size: 32)
!369 = !DIDerivedType(tag: DW_TAG_typedef, name: "eBMOpSlotSubType_Elem", file: !4, line: 122, baseType: !15)
!370 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !366, file: !4, line: 140, baseType: !371, size: 32)
!371 = !DIDerivedType(tag: DW_TAG_typedef, name: "eBMOpSlotSubType_Ptr", file: !4, line: 136, baseType: !21)
!372 = !DIDerivedType(tag: DW_TAG_member, name: "map", scope: !366, file: !4, line: 141, baseType: !373, size: 32)
!373 = !DIDerivedType(tag: DW_TAG_typedef, name: "eBMOpSlotSubType_Map", file: !4, line: 130, baseType: !27)
!374 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !357, file: !4, line: 152, baseType: !63, size: 32, offset: 128)
!375 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !357, file: !4, line: 162, baseType: !376, size: 128, offset: 192)
!376 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !357, file: !4, line: 155, size: 128, elements: !377)
!377 = !{!378, !379, !380, !381, !382, !383}
!378 = !DIDerivedType(tag: DW_TAG_member, name: "i", scope: !376, file: !4, line: 156, baseType: !63, size: 32)
!379 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !376, file: !4, line: 157, baseType: !76, size: 32)
!380 = !DIDerivedType(tag: DW_TAG_member, name: "p", scope: !376, file: !4, line: 158, baseType: !61, size: 64)
!381 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !376, file: !4, line: 159, baseType: !75, size: 96)
!382 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !376, file: !4, line: 160, baseType: !311, size: 64)
!383 = !DIDerivedType(tag: DW_TAG_member, name: "ghash", scope: !376, file: !4, line: 161, baseType: !384, size: 64)
!384 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !385, size: 64)
!385 = !DIDerivedType(tag: DW_TAG_typedef, name: "GHash", file: !303, line: 48, baseType: !386)
!386 = !DICompositeType(tag: DW_TAG_structure_type, name: "GHash", file: !387, line: 47, flags: DIFlagFwdDecl)
!387 = !DIFile(filename: "blender/source/blender/makesdna/DNA_action_types.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!388 = !{!389}
!389 = !DISubrange(count: 16)
!390 = !DIDerivedType(tag: DW_TAG_member, name: "slots_out", scope: !353, file: !4, line: 192, baseType: !356, size: 5120, offset: 5120)
!391 = !DIDerivedType(tag: DW_TAG_member, name: "exec", scope: !353, file: !4, line: 193, baseType: !392, size: 64, offset: 10240)
!392 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !393, size: 64)
!393 = !DISubroutineType(types: !394)
!394 = !{null, !321, !352}
!395 = !DIDerivedType(tag: DW_TAG_member, name: "arena", scope: !353, file: !4, line: 194, baseType: !396, size: 64, offset: 10304)
!396 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !397, size: 64)
!397 = !DICompositeType(tag: DW_TAG_structure_type, name: "MemArena", file: !398, line: 52, flags: DIFlagFwdDecl)
!398 = !DIFile(filename: "blender/source/blender/blenlib/BLI_memarena.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!399 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !353, file: !4, line: 195, baseType: !63, size: 32, offset: 10368)
!400 = !DIDerivedType(tag: DW_TAG_member, name: "type_flag", scope: !353, file: !4, line: 196, baseType: !401, size: 32, offset: 10400)
!401 = !DIDerivedType(tag: DW_TAG_typedef, name: "BMOpTypeFlag", file: !4, line: 188, baseType: !35)
!402 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !353, file: !4, line: 197, baseType: !63, size: 32, offset: 10432)
!403 = !DIDerivedType(tag: DW_TAG_member, name: "vdata", scope: !323, file: !53, line: 223, baseType: !404, size: 1600, offset: 1152)
!404 = !DIDerivedType(tag: DW_TAG_typedef, name: "CustomData", file: !224, line: 73, baseType: !405)
!405 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "CustomData", file: !224, line: 64, size: 1600, elements: !406)
!406 = !{!407, !425, !429, !430, !431, !432, !433}
!407 = !DIDerivedType(tag: DW_TAG_member, name: "layers", scope: !405, file: !224, line: 65, baseType: !408, size: 64)
!408 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !409, size: 64)
!409 = !DIDerivedType(tag: DW_TAG_typedef, name: "CustomDataLayer", file: !224, line: 53, baseType: !410)
!410 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "CustomDataLayer", file: !224, line: 42, size: 832, elements: !411)
!411 = !{!412, !413, !414, !415, !416, !417, !418, !419, !420, !424}
!412 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !410, file: !224, line: 43, baseType: !63, size: 32)
!413 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !410, file: !224, line: 44, baseType: !63, size: 32, offset: 32)
!414 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !410, file: !224, line: 45, baseType: !63, size: 32, offset: 64)
!415 = !DIDerivedType(tag: DW_TAG_member, name: "active", scope: !410, file: !224, line: 46, baseType: !63, size: 32, offset: 96)
!416 = !DIDerivedType(tag: DW_TAG_member, name: "active_rnd", scope: !410, file: !224, line: 47, baseType: !63, size: 32, offset: 128)
!417 = !DIDerivedType(tag: DW_TAG_member, name: "active_clone", scope: !410, file: !224, line: 48, baseType: !63, size: 32, offset: 160)
!418 = !DIDerivedType(tag: DW_TAG_member, name: "active_mask", scope: !410, file: !224, line: 49, baseType: !63, size: 32, offset: 192)
!419 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !410, file: !224, line: 50, baseType: !63, size: 32, offset: 224)
!420 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !410, file: !224, line: 51, baseType: !421, size: 512, offset: 256)
!421 = !DICompositeType(tag: DW_TAG_array_type, baseType: !65, size: 512, elements: !422)
!422 = !{!423}
!423 = !DISubrange(count: 64)
!424 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !410, file: !224, line: 52, baseType: !61, size: 64, offset: 768)
!425 = !DIDerivedType(tag: DW_TAG_member, name: "typemap", scope: !405, file: !224, line: 66, baseType: !426, size: 1312, offset: 64)
!426 = !DICompositeType(tag: DW_TAG_array_type, baseType: !63, size: 1312, elements: !427)
!427 = !{!428}
!428 = !DISubrange(count: 41)
!429 = !DIDerivedType(tag: DW_TAG_member, name: "totlayer", scope: !405, file: !224, line: 69, baseType: !63, size: 32, offset: 1376)
!430 = !DIDerivedType(tag: DW_TAG_member, name: "maxlayer", scope: !405, file: !224, line: 69, baseType: !63, size: 32, offset: 1408)
!431 = !DIDerivedType(tag: DW_TAG_member, name: "totsize", scope: !405, file: !224, line: 70, baseType: !63, size: 32, offset: 1440)
!432 = !DIDerivedType(tag: DW_TAG_member, name: "pool", scope: !405, file: !224, line: 71, baseType: !335, size: 64, offset: 1472)
!433 = !DIDerivedType(tag: DW_TAG_member, name: "external", scope: !405, file: !224, line: 72, baseType: !434, size: 64, offset: 1536)
!434 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !435, size: 64)
!435 = !DIDerivedType(tag: DW_TAG_typedef, name: "CustomDataExternal", file: !224, line: 59, baseType: !436)
!436 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "CustomDataExternal", file: !224, line: 57, size: 8192, elements: !437)
!437 = !{!438}
!438 = !DIDerivedType(tag: DW_TAG_member, name: "filename", scope: !436, file: !224, line: 58, baseType: !439, size: 8192)
!439 = !DICompositeType(tag: DW_TAG_array_type, baseType: !65, size: 8192, elements: !440)
!440 = !{!441}
!441 = !DISubrange(count: 1024)
!442 = !DIDerivedType(tag: DW_TAG_member, name: "edata", scope: !323, file: !53, line: 223, baseType: !404, size: 1600, offset: 2752)
!443 = !DIDerivedType(tag: DW_TAG_member, name: "ldata", scope: !323, file: !53, line: 223, baseType: !404, size: 1600, offset: 4352)
!444 = !DIDerivedType(tag: DW_TAG_member, name: "pdata", scope: !323, file: !53, line: 223, baseType: !404, size: 1600, offset: 5952)
!445 = !DIDerivedType(tag: DW_TAG_member, name: "selectmode", scope: !323, file: !53, line: 233, baseType: !73, size: 16, offset: 7552)
!446 = !DIDerivedType(tag: DW_TAG_member, name: "shapenr", scope: !323, file: !53, line: 236, baseType: !63, size: 32, offset: 7584)
!447 = !DIDerivedType(tag: DW_TAG_member, name: "walkers", scope: !323, file: !53, line: 238, baseType: !63, size: 32, offset: 7616)
!448 = !DIDerivedType(tag: DW_TAG_member, name: "totflags", scope: !323, file: !53, line: 238, baseType: !63, size: 32, offset: 7648)
!449 = !DIDerivedType(tag: DW_TAG_member, name: "selected", scope: !323, file: !53, line: 239, baseType: !450, size: 128, offset: 7680)
!450 = !DIDerivedType(tag: DW_TAG_typedef, name: "ListBase", file: !451, line: 71, baseType: !452)
!451 = !DIFile(filename: "blender/source/blender/makesdna/DNA_listBase.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!452 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ListBase", file: !451, line: 69, size: 128, elements: !453)
!453 = !{!454, !455}
!454 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !452, file: !451, line: 70, baseType: !61, size: 64)
!455 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !452, file: !451, line: 70, baseType: !61, size: 64, offset: 64)
!456 = !DIDerivedType(tag: DW_TAG_member, name: "act_face", scope: !323, file: !53, line: 241, baseType: !141, size: 64, offset: 7808)
!457 = !DIDerivedType(tag: DW_TAG_member, name: "errorstack", scope: !323, file: !53, line: 243, baseType: !450, size: 128, offset: 7872)
!458 = !DIDerivedType(tag: DW_TAG_member, name: "py_handle", scope: !323, file: !53, line: 245, baseType: !61, size: 64, offset: 8000)
!459 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !76)
!460 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !63)
!461 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !152)
!462 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !463, size: 64)
!463 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !464)
!464 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MDeformVert", file: !465, line: 59, size: 128, elements: !466)
!465 = !DIFile(filename: "blender/source/blender/makesdna/DNA_meshdata_types.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!466 = !{!467, !473, !474}
!467 = !DIDerivedType(tag: DW_TAG_member, name: "dw", scope: !464, file: !465, line: 60, baseType: !468, size: 64)
!468 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !469, size: 64)
!469 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MDeformWeight", file: !465, line: 54, size: 64, elements: !470)
!470 = !{!471, !472}
!471 = !DIDerivedType(tag: DW_TAG_member, name: "def_nr", scope: !469, file: !465, line: 55, baseType: !63, size: 32)
!472 = !DIDerivedType(tag: DW_TAG_member, name: "weight", scope: !469, file: !465, line: 56, baseType: !76, size: 32, offset: 32)
!473 = !DIDerivedType(tag: DW_TAG_member, name: "totweight", scope: !464, file: !465, line: 61, baseType: !63, size: 32, offset: 64)
!474 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !464, file: !465, line: 62, baseType: !63, size: 32, offset: 96)
!475 = !{}
!476 = !DILocalVariable(name: "bm", arg: 1, scope: !318, file: !1, line: 3686, type: !321)
!477 = !DILocation(line: 3686, column: 27, scope: !318)
!478 = !DILocalVariable(name: "offset", arg: 2, scope: !318, file: !1, line: 3686, type: !459)
!479 = !DILocation(line: 3686, column: 43, scope: !318)
!480 = !DILocalVariable(name: "offset_type", arg: 3, scope: !318, file: !1, line: 3686, type: !460)
!481 = !DILocation(line: 3686, column: 61, scope: !318)
!482 = !DILocalVariable(name: "segments", arg: 4, scope: !318, file: !1, line: 3687, type: !459)
!483 = !DILocation(line: 3687, column: 32, scope: !318)
!484 = !DILocalVariable(name: "profile", arg: 5, scope: !318, file: !1, line: 3687, type: !459)
!485 = !DILocation(line: 3687, column: 54, scope: !318)
!486 = !DILocalVariable(name: "vertex_only", arg: 6, scope: !318, file: !1, line: 3688, type: !461)
!487 = !DILocation(line: 3688, column: 31, scope: !318)
!488 = !DILocalVariable(name: "use_weights", arg: 7, scope: !318, file: !1, line: 3688, type: !461)
!489 = !DILocation(line: 3688, column: 55, scope: !318)
!490 = !DILocalVariable(name: "limit_offset", arg: 8, scope: !318, file: !1, line: 3688, type: !461)
!491 = !DILocation(line: 3688, column: 79, scope: !318)
!492 = !DILocalVariable(name: "dvert", arg: 9, scope: !318, file: !1, line: 3689, type: !462)
!493 = !DILocation(line: 3689, column: 46, scope: !318)
!494 = !DILocalVariable(name: "vertex_group", arg: 10, scope: !318, file: !1, line: 3689, type: !460)
!495 = !DILocation(line: 3689, column: 63, scope: !318)
!496 = !DILocalVariable(name: "mat", arg: 11, scope: !318, file: !1, line: 3689, type: !460)
!497 = !DILocation(line: 3689, column: 87, scope: !318)
!498 = !DILocalVariable(name: "iter", scope: !318, file: !1, line: 3691, type: !499)
!499 = !DIDerivedType(tag: DW_TAG_typedef, name: "BMIter", file: !183, line: 186, baseType: !500)
!500 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BMIter", file: !183, line: 164, size: 512, elements: !501)
!501 = !{!502, !582, !583, !584, !585}
!502 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !500, file: !183, line: 179, baseType: !503, size: 320)
!503 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !500, file: !183, line: 166, size: 320, elements: !504)
!504 = !{!505, !520, !526, !534, !542, !548, !554, !560, !564, !570, !576}
!505 = !DIDerivedType(tag: DW_TAG_member, name: "elem_of_mesh", scope: !503, file: !183, line: 167, baseType: !506, size: 192)
!506 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BMIter__elem_of_mesh", file: !183, line: 113, size: 192, elements: !507)
!507 = !{!508}
!508 = !DIDerivedType(tag: DW_TAG_member, name: "pooliter", scope: !506, file: !183, line: 114, baseType: !509, size: 192)
!509 = !DIDerivedType(tag: DW_TAG_typedef, name: "BLI_mempool_iter", file: !510, line: 80, baseType: !511)
!510 = !DIFile(filename: "blender/source/blender/blenlib/BLI_mempool.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!511 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BLI_mempool_iter", file: !510, line: 76, size: 192, elements: !512)
!512 = !{!513, !516, !519}
!513 = !DIDerivedType(tag: DW_TAG_member, name: "pool", scope: !511, file: !510, line: 77, baseType: !514, size: 64)
!514 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !515, size: 64)
!515 = !DIDerivedType(tag: DW_TAG_typedef, name: "BLI_mempool", file: !510, line: 47, baseType: !336)
!516 = !DIDerivedType(tag: DW_TAG_member, name: "curchunk", scope: !511, file: !510, line: 78, baseType: !517, size: 64, offset: 64)
!517 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !518, size: 64)
!518 = !DICompositeType(tag: DW_TAG_structure_type, name: "BLI_mempool_chunk", file: !510, line: 45, flags: DIFlagFwdDecl)
!519 = !DIDerivedType(tag: DW_TAG_member, name: "curindex", scope: !511, file: !510, line: 79, baseType: !5, size: 32, offset: 128)
!520 = !DIDerivedType(tag: DW_TAG_member, name: "edge_of_vert", scope: !503, file: !183, line: 169, baseType: !521, size: 192)
!521 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BMIter__edge_of_vert", file: !183, line: 116, size: 192, elements: !522)
!522 = !{!523, !524, !525}
!523 = !DIDerivedType(tag: DW_TAG_member, name: "vdata", scope: !521, file: !183, line: 117, baseType: !51, size: 64)
!524 = !DIDerivedType(tag: DW_TAG_member, name: "e_first", scope: !521, file: !183, line: 118, baseType: !138, size: 64, offset: 64)
!525 = !DIDerivedType(tag: DW_TAG_member, name: "e_next", scope: !521, file: !183, line: 118, baseType: !138, size: 64, offset: 128)
!526 = !DIDerivedType(tag: DW_TAG_member, name: "face_of_vert", scope: !503, file: !183, line: 170, baseType: !527, size: 320)
!527 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BMIter__face_of_vert", file: !183, line: 120, size: 320, elements: !528)
!528 = !{!529, !530, !531, !532, !533}
!529 = !DIDerivedType(tag: DW_TAG_member, name: "vdata", scope: !527, file: !183, line: 121, baseType: !51, size: 64)
!530 = !DIDerivedType(tag: DW_TAG_member, name: "l_first", scope: !527, file: !183, line: 122, baseType: !103, size: 64, offset: 64)
!531 = !DIDerivedType(tag: DW_TAG_member, name: "l_next", scope: !527, file: !183, line: 122, baseType: !103, size: 64, offset: 128)
!532 = !DIDerivedType(tag: DW_TAG_member, name: "e_first", scope: !527, file: !183, line: 123, baseType: !138, size: 64, offset: 192)
!533 = !DIDerivedType(tag: DW_TAG_member, name: "e_next", scope: !527, file: !183, line: 123, baseType: !138, size: 64, offset: 256)
!534 = !DIDerivedType(tag: DW_TAG_member, name: "loop_of_vert", scope: !503, file: !183, line: 171, baseType: !535, size: 320)
!535 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BMIter__loop_of_vert", file: !183, line: 125, size: 320, elements: !536)
!536 = !{!537, !538, !539, !540, !541}
!537 = !DIDerivedType(tag: DW_TAG_member, name: "vdata", scope: !535, file: !183, line: 126, baseType: !51, size: 64)
!538 = !DIDerivedType(tag: DW_TAG_member, name: "l_first", scope: !535, file: !183, line: 127, baseType: !103, size: 64, offset: 64)
!539 = !DIDerivedType(tag: DW_TAG_member, name: "l_next", scope: !535, file: !183, line: 127, baseType: !103, size: 64, offset: 128)
!540 = !DIDerivedType(tag: DW_TAG_member, name: "e_first", scope: !535, file: !183, line: 128, baseType: !138, size: 64, offset: 192)
!541 = !DIDerivedType(tag: DW_TAG_member, name: "e_next", scope: !535, file: !183, line: 128, baseType: !138, size: 64, offset: 256)
!542 = !DIDerivedType(tag: DW_TAG_member, name: "loop_of_edge", scope: !503, file: !183, line: 172, baseType: !543, size: 192)
!543 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BMIter__loop_of_edge", file: !183, line: 130, size: 192, elements: !544)
!544 = !{!545, !546, !547}
!545 = !DIDerivedType(tag: DW_TAG_member, name: "edata", scope: !543, file: !183, line: 131, baseType: !138, size: 64)
!546 = !DIDerivedType(tag: DW_TAG_member, name: "l_first", scope: !543, file: !183, line: 132, baseType: !103, size: 64, offset: 64)
!547 = !DIDerivedType(tag: DW_TAG_member, name: "l_next", scope: !543, file: !183, line: 132, baseType: !103, size: 64, offset: 128)
!548 = !DIDerivedType(tag: DW_TAG_member, name: "loop_of_loop", scope: !503, file: !183, line: 173, baseType: !549, size: 192)
!549 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BMIter__loop_of_loop", file: !183, line: 134, size: 192, elements: !550)
!550 = !{!551, !552, !553}
!551 = !DIDerivedType(tag: DW_TAG_member, name: "ldata", scope: !549, file: !183, line: 135, baseType: !103, size: 64)
!552 = !DIDerivedType(tag: DW_TAG_member, name: "l_first", scope: !549, file: !183, line: 136, baseType: !103, size: 64, offset: 64)
!553 = !DIDerivedType(tag: DW_TAG_member, name: "l_next", scope: !549, file: !183, line: 136, baseType: !103, size: 64, offset: 128)
!554 = !DIDerivedType(tag: DW_TAG_member, name: "face_of_edge", scope: !503, file: !183, line: 174, baseType: !555, size: 192)
!555 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BMIter__face_of_edge", file: !183, line: 138, size: 192, elements: !556)
!556 = !{!557, !558, !559}
!557 = !DIDerivedType(tag: DW_TAG_member, name: "edata", scope: !555, file: !183, line: 139, baseType: !138, size: 64)
!558 = !DIDerivedType(tag: DW_TAG_member, name: "l_first", scope: !555, file: !183, line: 140, baseType: !103, size: 64, offset: 64)
!559 = !DIDerivedType(tag: DW_TAG_member, name: "l_next", scope: !555, file: !183, line: 140, baseType: !103, size: 64, offset: 128)
!560 = !DIDerivedType(tag: DW_TAG_member, name: "vert_of_edge", scope: !503, file: !183, line: 175, baseType: !561, size: 64)
!561 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BMIter__vert_of_edge", file: !183, line: 142, size: 64, elements: !562)
!562 = !{!563}
!563 = !DIDerivedType(tag: DW_TAG_member, name: "edata", scope: !561, file: !183, line: 143, baseType: !138, size: 64)
!564 = !DIDerivedType(tag: DW_TAG_member, name: "vert_of_face", scope: !503, file: !183, line: 176, baseType: !565, size: 192)
!565 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BMIter__vert_of_face", file: !183, line: 145, size: 192, elements: !566)
!566 = !{!567, !568, !569}
!567 = !DIDerivedType(tag: DW_TAG_member, name: "pdata", scope: !565, file: !183, line: 146, baseType: !141, size: 64)
!568 = !DIDerivedType(tag: DW_TAG_member, name: "l_first", scope: !565, file: !183, line: 147, baseType: !103, size: 64, offset: 64)
!569 = !DIDerivedType(tag: DW_TAG_member, name: "l_next", scope: !565, file: !183, line: 147, baseType: !103, size: 64, offset: 128)
!570 = !DIDerivedType(tag: DW_TAG_member, name: "edge_of_face", scope: !503, file: !183, line: 177, baseType: !571, size: 192)
!571 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BMIter__edge_of_face", file: !183, line: 149, size: 192, elements: !572)
!572 = !{!573, !574, !575}
!573 = !DIDerivedType(tag: DW_TAG_member, name: "pdata", scope: !571, file: !183, line: 150, baseType: !141, size: 64)
!574 = !DIDerivedType(tag: DW_TAG_member, name: "l_first", scope: !571, file: !183, line: 151, baseType: !103, size: 64, offset: 64)
!575 = !DIDerivedType(tag: DW_TAG_member, name: "l_next", scope: !571, file: !183, line: 151, baseType: !103, size: 64, offset: 128)
!576 = !DIDerivedType(tag: DW_TAG_member, name: "loop_of_face", scope: !503, file: !183, line: 178, baseType: !577, size: 192)
!577 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BMIter__loop_of_face", file: !183, line: 153, size: 192, elements: !578)
!578 = !{!579, !580, !581}
!579 = !DIDerivedType(tag: DW_TAG_member, name: "pdata", scope: !577, file: !183, line: 154, baseType: !141, size: 64)
!580 = !DIDerivedType(tag: DW_TAG_member, name: "l_first", scope: !577, file: !183, line: 155, baseType: !103, size: 64, offset: 64)
!581 = !DIDerivedType(tag: DW_TAG_member, name: "l_next", scope: !577, file: !183, line: 155, baseType: !103, size: 64, offset: 128)
!582 = !DIDerivedType(tag: DW_TAG_member, name: "begin", scope: !500, file: !183, line: 181, baseType: !275, size: 64, offset: 320)
!583 = !DIDerivedType(tag: DW_TAG_member, name: "step", scope: !500, file: !183, line: 182, baseType: !279, size: 64, offset: 384)
!584 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !500, file: !183, line: 184, baseType: !63, size: 32, offset: 448)
!585 = !DIDerivedType(tag: DW_TAG_member, name: "itype", scope: !500, file: !183, line: 185, baseType: !65, size: 8, offset: 480)
!586 = !DILocation(line: 3691, column: 9, scope: !318)
!587 = !DILocalVariable(name: "v", scope: !318, file: !1, line: 3692, type: !51)
!588 = !DILocation(line: 3692, column: 10, scope: !318)
!589 = !DILocalVariable(name: "v_next", scope: !318, file: !1, line: 3692, type: !51)
!590 = !DILocation(line: 3692, column: 14, scope: !318)
!591 = !DILocalVariable(name: "e", scope: !318, file: !1, line: 3693, type: !138)
!592 = !DILocation(line: 3693, column: 10, scope: !318)
!593 = !DILocalVariable(name: "bv", scope: !318, file: !1, line: 3694, type: !283)
!594 = !DILocation(line: 3694, column: 11, scope: !318)
!595 = !DILocalVariable(name: "bp", scope: !318, file: !1, line: 3695, type: !596)
!596 = !DIDerivedType(tag: DW_TAG_typedef, name: "BevelParams", file: !1, line: 191, baseType: !597)
!597 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BevelParams", file: !1, line: 173, size: 640, elements: !598)
!598 = !{!599, !600, !603, !610, !611, !612, !613, !614, !615, !616, !617, !618, !619, !620}
!599 = !DIDerivedType(tag: DW_TAG_member, name: "vert_hash", scope: !597, file: !1, line: 176, baseType: !384, size: 64)
!600 = !DIDerivedType(tag: DW_TAG_member, name: "mem_arena", scope: !597, file: !1, line: 177, baseType: !601, size: 64, offset: 64)
!601 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !602, size: 64)
!602 = !DIDerivedType(tag: DW_TAG_typedef, name: "MemArena", file: !398, line: 53, baseType: !397)
!603 = !DIDerivedType(tag: DW_TAG_member, name: "pro_spacing", scope: !597, file: !1, line: 178, baseType: !604, size: 192, offset: 128)
!604 = !DIDerivedType(tag: DW_TAG_typedef, name: "ProfileSpacing", file: !1, line: 127, baseType: !605)
!605 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ProfileSpacing", file: !1, line: 123, size: 192, elements: !606)
!606 = !{!607, !608, !609}
!607 = !DIDerivedType(tag: DW_TAG_member, name: "uvals", scope: !605, file: !1, line: 124, baseType: !170, size: 64)
!608 = !DIDerivedType(tag: DW_TAG_member, name: "uvals_2", scope: !605, file: !1, line: 125, baseType: !170, size: 64, offset: 64)
!609 = !DIDerivedType(tag: DW_TAG_member, name: "seg_2", scope: !605, file: !1, line: 126, baseType: !63, size: 32, offset: 128)
!610 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !597, file: !1, line: 180, baseType: !76, size: 32, offset: 320)
!611 = !DIDerivedType(tag: DW_TAG_member, name: "offset_type", scope: !597, file: !1, line: 181, baseType: !63, size: 32, offset: 352)
!612 = !DIDerivedType(tag: DW_TAG_member, name: "seg", scope: !597, file: !1, line: 182, baseType: !63, size: 32, offset: 384)
!613 = !DIDerivedType(tag: DW_TAG_member, name: "pro_super_r", scope: !597, file: !1, line: 183, baseType: !76, size: 32, offset: 416)
!614 = !DIDerivedType(tag: DW_TAG_member, name: "vertex_only", scope: !597, file: !1, line: 184, baseType: !152, size: 8, offset: 448)
!615 = !DIDerivedType(tag: DW_TAG_member, name: "use_weights", scope: !597, file: !1, line: 185, baseType: !152, size: 8, offset: 456)
!616 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_widths", scope: !597, file: !1, line: 186, baseType: !152, size: 8, offset: 464)
!617 = !DIDerivedType(tag: DW_TAG_member, name: "limit_offset", scope: !597, file: !1, line: 187, baseType: !152, size: 8, offset: 472)
!618 = !DIDerivedType(tag: DW_TAG_member, name: "dvert", scope: !597, file: !1, line: 188, baseType: !462, size: 64, offset: 512)
!619 = !DIDerivedType(tag: DW_TAG_member, name: "vertex_group", scope: !597, file: !1, line: 189, baseType: !63, size: 32, offset: 576)
!620 = !DIDerivedType(tag: DW_TAG_member, name: "mat_nr", scope: !597, file: !1, line: 190, baseType: !63, size: 32, offset: 608)
!621 = !DILocation(line: 3695, column: 14, scope: !318)
!622 = !DILocation(line: 3697, column: 14, scope: !318)
!623 = !DILocation(line: 3697, column: 5, scope: !318)
!624 = !DILocation(line: 3697, column: 12, scope: !318)
!625 = !DILocation(line: 3698, column: 19, scope: !318)
!626 = !DILocation(line: 3698, column: 5, scope: !318)
!627 = !DILocation(line: 3698, column: 17, scope: !318)
!628 = !DILocation(line: 3699, column: 14, scope: !318)
!629 = !DILocation(line: 3699, column: 5, scope: !318)
!630 = !DILocation(line: 3699, column: 12, scope: !318)
!631 = !DILocation(line: 3700, column: 26, scope: !318)
!632 = !DILocation(line: 3700, column: 24, scope: !318)
!633 = !DILocation(line: 3700, column: 5, scope: !318)
!634 = !DILocation(line: 3700, column: 17, scope: !318)
!635 = !DILocation(line: 3701, column: 19, scope: !318)
!636 = !DILocation(line: 3701, column: 5, scope: !318)
!637 = !DILocation(line: 3701, column: 17, scope: !318)
!638 = !DILocation(line: 3702, column: 19, scope: !318)
!639 = !DILocation(line: 3702, column: 5, scope: !318)
!640 = !DILocation(line: 3702, column: 17, scope: !318)
!641 = !DILocation(line: 3703, column: 5, scope: !318)
!642 = !DILocation(line: 3703, column: 21, scope: !318)
!643 = !DILocation(line: 3704, column: 20, scope: !318)
!644 = !DILocation(line: 3704, column: 5, scope: !318)
!645 = !DILocation(line: 3704, column: 18, scope: !318)
!646 = !DILocation(line: 3705, column: 13, scope: !318)
!647 = !DILocation(line: 3705, column: 5, scope: !318)
!648 = !DILocation(line: 3705, column: 11, scope: !318)
!649 = !DILocation(line: 3706, column: 20, scope: !318)
!650 = !DILocation(line: 3706, column: 5, scope: !318)
!651 = !DILocation(line: 3706, column: 18, scope: !318)
!652 = !DILocation(line: 3707, column: 14, scope: !318)
!653 = !DILocation(line: 3707, column: 5, scope: !318)
!654 = !DILocation(line: 3707, column: 12, scope: !318)
!655 = !DILocation(line: 3709, column: 9, scope: !656)
!656 = distinct !DILexicalBlock(scope: !318, file: !1, line: 3709, column: 6)
!657 = !DILocation(line: 3709, column: 21, scope: !656)
!658 = !DILocation(line: 3709, column: 6, scope: !318)
!659 = !DILocation(line: 3710, column: 6, scope: !656)
!660 = !DILocation(line: 3710, column: 18, scope: !656)
!661 = !DILocation(line: 3710, column: 3, scope: !656)
!662 = !DILocation(line: 3712, column: 9, scope: !663)
!663 = distinct !DILexicalBlock(scope: !318, file: !1, line: 3712, column: 6)
!664 = !DILocation(line: 3712, column: 16, scope: !663)
!665 = !DILocation(line: 3712, column: 6, scope: !318)
!666 = !DILocation(line: 3714, column: 18, scope: !667)
!667 = distinct !DILexicalBlock(scope: !663, file: !1, line: 3712, column: 21)
!668 = !DILocation(line: 3714, column: 6, scope: !667)
!669 = !DILocation(line: 3714, column: 16, scope: !667)
!670 = !DILocation(line: 3715, column: 18, scope: !667)
!671 = !DILocation(line: 3715, column: 6, scope: !667)
!672 = !DILocation(line: 3715, column: 16, scope: !667)
!673 = !DILocation(line: 3716, column: 30, scope: !667)
!674 = !DILocation(line: 3716, column: 3, scope: !667)
!675 = !DILocation(line: 3717, column: 3, scope: !667)
!676 = !DILocation(line: 3719, column: 7, scope: !677)
!677 = distinct !DILexicalBlock(scope: !667, file: !1, line: 3719, column: 7)
!678 = !DILocation(line: 3719, column: 7, scope: !667)
!679 = !DILocation(line: 3720, column: 35, scope: !677)
!680 = !DILocation(line: 3720, column: 16, scope: !677)
!681 = !DILocation(line: 3720, column: 7, scope: !677)
!682 = !DILocation(line: 3720, column: 14, scope: !677)
!683 = !DILocation(line: 3720, column: 4, scope: !677)
!684 = !DILocation(line: 3723, column: 3, scope: !685)
!685 = distinct !DILexicalBlock(scope: !667, file: !1, line: 3723, column: 3)
!686 = !DILocation(line: 3723, column: 3, scope: !687)
!687 = distinct !DILexicalBlock(scope: !685, file: !1, line: 3723, column: 3)
!688 = !DILocation(line: 3724, column: 8, scope: !689)
!689 = distinct !DILexicalBlock(scope: !690, file: !1, line: 3724, column: 8)
!690 = distinct !DILexicalBlock(scope: !687, file: !1, line: 3723, column: 49)
!691 = !DILocation(line: 3724, column: 8, scope: !690)
!692 = !DILocation(line: 3725, column: 31, scope: !693)
!693 = distinct !DILexicalBlock(scope: !689, file: !1, line: 3724, column: 43)
!694 = !DILocation(line: 3725, column: 40, scope: !693)
!695 = !DILocation(line: 3725, column: 10, scope: !693)
!696 = !DILocation(line: 3725, column: 8, scope: !693)
!697 = !DILocation(line: 3726, column: 9, scope: !698)
!698 = distinct !DILexicalBlock(scope: !693, file: !1, line: 3726, column: 9)
!699 = !DILocation(line: 3726, column: 9, scope: !693)
!700 = !DILocation(line: 3727, column: 26, scope: !698)
!701 = !DILocation(line: 3727, column: 6, scope: !698)
!702 = !DILocation(line: 3728, column: 4, scope: !693)
!703 = !DILocation(line: 3729, column: 3, scope: !690)
!704 = distinct !{!704, !684, !705}
!705 = !DILocation(line: 3729, column: 3, scope: !685)
!706 = !DILocation(line: 3732, column: 11, scope: !707)
!707 = distinct !DILexicalBlock(scope: !667, file: !1, line: 3732, column: 7)
!708 = !DILocation(line: 3732, column: 8, scope: !707)
!709 = !DILocation(line: 3732, column: 7, scope: !667)
!710 = !DILocation(line: 3733, column: 4, scope: !711)
!711 = distinct !DILexicalBlock(scope: !707, file: !1, line: 3732, column: 24)
!712 = !DILocation(line: 3734, column: 3, scope: !711)
!713 = !DILocation(line: 3737, column: 3, scope: !714)
!714 = distinct !DILexicalBlock(scope: !667, file: !1, line: 3737, column: 3)
!715 = !DILocation(line: 3737, column: 3, scope: !716)
!716 = distinct !DILexicalBlock(scope: !714, file: !1, line: 3737, column: 3)
!717 = !DILocation(line: 3738, column: 8, scope: !718)
!718 = distinct !DILexicalBlock(scope: !719, file: !1, line: 3738, column: 8)
!719 = distinct !DILexicalBlock(scope: !716, file: !1, line: 3737, column: 49)
!720 = !DILocation(line: 3738, column: 8, scope: !719)
!721 = !DILocation(line: 3739, column: 28, scope: !722)
!722 = distinct !DILexicalBlock(scope: !718, file: !1, line: 3738, column: 43)
!723 = !DILocation(line: 3739, column: 10, scope: !722)
!724 = !DILocation(line: 3739, column: 8, scope: !722)
!725 = !DILocation(line: 3740, column: 9, scope: !726)
!726 = distinct !DILexicalBlock(scope: !722, file: !1, line: 3740, column: 9)
!727 = !DILocation(line: 3740, column: 9, scope: !722)
!728 = !DILocation(line: 3741, column: 23, scope: !726)
!729 = !DILocation(line: 3741, column: 27, scope: !726)
!730 = !DILocation(line: 3741, column: 6, scope: !726)
!731 = !DILocation(line: 3742, column: 4, scope: !722)
!732 = !DILocation(line: 3743, column: 3, scope: !719)
!733 = distinct !{!733, !713, !734}
!734 = !DILocation(line: 3743, column: 3, scope: !714)
!735 = !DILocation(line: 3746, column: 11, scope: !736)
!736 = distinct !DILexicalBlock(scope: !667, file: !1, line: 3746, column: 7)
!737 = !DILocation(line: 3746, column: 8, scope: !736)
!738 = !DILocation(line: 3746, column: 7, scope: !667)
!739 = !DILocation(line: 3747, column: 4, scope: !740)
!740 = distinct !DILexicalBlock(scope: !741, file: !1, line: 3747, column: 4)
!741 = distinct !DILexicalBlock(scope: !736, file: !1, line: 3746, column: 24)
!742 = !DILocation(line: 3747, column: 4, scope: !743)
!743 = distinct !DILexicalBlock(scope: !740, file: !1, line: 3747, column: 4)
!744 = !DILocation(line: 3748, column: 9, scope: !745)
!745 = distinct !DILexicalBlock(scope: !746, file: !1, line: 3748, column: 9)
!746 = distinct !DILexicalBlock(scope: !743, file: !1, line: 3747, column: 50)
!747 = !DILocation(line: 3748, column: 9, scope: !746)
!748 = !DILocation(line: 3749, column: 32, scope: !749)
!749 = distinct !DILexicalBlock(scope: !745, file: !1, line: 3748, column: 44)
!750 = !DILocation(line: 3749, column: 41, scope: !749)
!751 = !DILocation(line: 3749, column: 6, scope: !749)
!752 = !DILocation(line: 3750, column: 5, scope: !749)
!753 = !DILocation(line: 3751, column: 4, scope: !746)
!754 = distinct !{!754, !739, !755}
!755 = !DILocation(line: 3751, column: 4, scope: !740)
!756 = !DILocation(line: 3752, column: 3, scope: !741)
!757 = !DILocation(line: 3755, column: 3, scope: !758)
!758 = distinct !DILexicalBlock(scope: !667, file: !1, line: 3755, column: 3)
!759 = !DILocation(line: 3755, column: 3, scope: !760)
!760 = distinct !DILexicalBlock(scope: !758, file: !1, line: 3755, column: 3)
!761 = !DILocation(line: 3756, column: 8, scope: !762)
!762 = distinct !DILexicalBlock(scope: !763, file: !1, line: 3756, column: 8)
!763 = distinct !DILexicalBlock(scope: !760, file: !1, line: 3755, column: 49)
!764 = !DILocation(line: 3756, column: 8, scope: !763)
!765 = !DILocation(line: 3757, column: 37, scope: !766)
!766 = distinct !DILexicalBlock(scope: !762, file: !1, line: 3756, column: 43)
!767 = !DILocation(line: 3757, column: 46, scope: !766)
!768 = !DILocation(line: 3757, column: 5, scope: !766)
!769 = !DILocation(line: 3758, column: 26, scope: !766)
!770 = !DILocation(line: 3758, column: 35, scope: !766)
!771 = !DILocation(line: 3758, column: 5, scope: !766)
!772 = !DILocation(line: 3759, column: 4, scope: !766)
!773 = !DILocation(line: 3760, column: 3, scope: !763)
!774 = distinct !{!774, !757, !775}
!775 = !DILocation(line: 3760, column: 3, scope: !758)
!776 = !DILocation(line: 3762, column: 3, scope: !777)
!777 = distinct !DILexicalBlock(scope: !667, file: !1, line: 3762, column: 3)
!778 = !DILocation(line: 3762, column: 3, scope: !779)
!779 = distinct !DILexicalBlock(scope: !777, file: !1, line: 3762, column: 3)
!780 = !DILocation(line: 3763, column: 8, scope: !781)
!781 = distinct !DILexicalBlock(scope: !782, file: !1, line: 3763, column: 8)
!782 = distinct !DILexicalBlock(scope: !779, file: !1, line: 3762, column: 65)
!783 = !DILocation(line: 3763, column: 8, scope: !782)
!784 = !DILocation(line: 3765, column: 18, scope: !785)
!785 = distinct !DILexicalBlock(scope: !781, file: !1, line: 3763, column: 43)
!786 = !DILocation(line: 3765, column: 22, scope: !785)
!787 = !DILocation(line: 3765, column: 5, scope: !785)
!788 = !DILocation(line: 3766, column: 4, scope: !785)
!789 = !DILocation(line: 3767, column: 3, scope: !782)
!790 = distinct !{!790, !776, !791}
!791 = !DILocation(line: 3767, column: 3, scope: !777)
!792 = !DILocation(line: 3770, column: 21, scope: !667)
!793 = !DILocation(line: 3770, column: 3, scope: !667)
!794 = !DILocation(line: 3771, column: 24, scope: !667)
!795 = !DILocation(line: 3771, column: 3, scope: !667)
!796 = !DILocation(line: 3772, column: 2, scope: !667)
!797 = !DILocation(line: 3773, column: 1, scope: !318)
!798 = distinct !DISubprogram(name: "set_profile_spacing", scope: !1, file: !1, line: 3597, type: !799, scopeLine: 3598, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!799 = !DISubroutineType(types: !800)
!800 = !{null, !801}
!801 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !596, size: 64)
!802 = !DILocalVariable(name: "bp", arg: 1, scope: !798, file: !1, line: 3597, type: !801)
!803 = !DILocation(line: 3597, column: 46, scope: !798)
!804 = !DILocalVariable(name: "seg", scope: !798, file: !1, line: 3599, type: !63)
!805 = !DILocation(line: 3599, column: 6, scope: !798)
!806 = !DILocalVariable(name: "seg_2", scope: !798, file: !1, line: 3599, type: !63)
!807 = !DILocation(line: 3599, column: 11, scope: !798)
!808 = !DILocation(line: 3601, column: 8, scope: !798)
!809 = !DILocation(line: 3601, column: 12, scope: !798)
!810 = !DILocation(line: 3601, column: 6, scope: !798)
!811 = !DILocation(line: 3602, column: 6, scope: !812)
!812 = distinct !DILexicalBlock(scope: !798, file: !1, line: 3602, column: 6)
!813 = !DILocation(line: 3602, column: 10, scope: !812)
!814 = !DILocation(line: 3602, column: 6, scope: !798)
!815 = !DILocation(line: 3603, column: 55, scope: !816)
!816 = distinct !DILexicalBlock(scope: !812, file: !1, line: 3602, column: 15)
!817 = !DILocation(line: 3603, column: 59, scope: !816)
!818 = !DILocation(line: 3603, column: 71, scope: !816)
!819 = !DILocation(line: 3603, column: 75, scope: !816)
!820 = !DILocation(line: 3603, column: 70, scope: !816)
!821 = !DILocation(line: 3603, column: 80, scope: !816)
!822 = !DILocation(line: 3603, column: 36, scope: !816)
!823 = !DILocation(line: 3603, column: 27, scope: !816)
!824 = !DILocation(line: 3603, column: 3, scope: !816)
!825 = !DILocation(line: 3603, column: 7, scope: !816)
!826 = !DILocation(line: 3603, column: 19, scope: !816)
!827 = !DILocation(line: 3603, column: 25, scope: !816)
!828 = !DILocation(line: 3604, column: 33, scope: !816)
!829 = !DILocation(line: 3604, column: 38, scope: !816)
!830 = !DILocation(line: 3604, column: 42, scope: !816)
!831 = !DILocation(line: 3604, column: 55, scope: !816)
!832 = !DILocation(line: 3604, column: 59, scope: !816)
!833 = !DILocation(line: 3604, column: 71, scope: !816)
!834 = !DILocation(line: 3604, column: 3, scope: !816)
!835 = !DILocation(line: 3605, column: 28, scope: !816)
!836 = !DILocation(line: 3605, column: 32, scope: !816)
!837 = !DILocation(line: 3605, column: 11, scope: !816)
!838 = !DILocation(line: 3605, column: 9, scope: !816)
!839 = !DILocation(line: 3606, column: 7, scope: !840)
!840 = distinct !DILexicalBlock(scope: !816, file: !1, line: 3606, column: 7)
!841 = !DILocation(line: 3606, column: 13, scope: !840)
!842 = !DILocation(line: 3606, column: 7, scope: !816)
!843 = !DILocation(line: 3607, column: 10, scope: !840)
!844 = !DILocation(line: 3607, column: 4, scope: !840)
!845 = !DILocation(line: 3608, column: 27, scope: !816)
!846 = !DILocation(line: 3608, column: 3, scope: !816)
!847 = !DILocation(line: 3608, column: 7, scope: !816)
!848 = !DILocation(line: 3608, column: 19, scope: !816)
!849 = !DILocation(line: 3608, column: 25, scope: !816)
!850 = !DILocation(line: 3609, column: 7, scope: !851)
!851 = distinct !DILexicalBlock(scope: !816, file: !1, line: 3609, column: 7)
!852 = !DILocation(line: 3609, column: 16, scope: !851)
!853 = !DILocation(line: 3609, column: 13, scope: !851)
!854 = !DILocation(line: 3609, column: 7, scope: !816)
!855 = !DILocation(line: 3610, column: 30, scope: !856)
!856 = distinct !DILexicalBlock(scope: !851, file: !1, line: 3609, column: 21)
!857 = !DILocation(line: 3610, column: 34, scope: !856)
!858 = !DILocation(line: 3610, column: 46, scope: !856)
!859 = !DILocation(line: 3610, column: 4, scope: !856)
!860 = !DILocation(line: 3610, column: 8, scope: !856)
!861 = !DILocation(line: 3610, column: 20, scope: !856)
!862 = !DILocation(line: 3610, column: 28, scope: !856)
!863 = !DILocation(line: 3611, column: 3, scope: !856)
!864 = !DILocation(line: 3613, column: 58, scope: !865)
!865 = distinct !DILexicalBlock(scope: !851, file: !1, line: 3612, column: 8)
!866 = !DILocation(line: 3613, column: 62, scope: !865)
!867 = !DILocation(line: 3613, column: 74, scope: !865)
!868 = !DILocation(line: 3613, column: 80, scope: !865)
!869 = !DILocation(line: 3613, column: 73, scope: !865)
!870 = !DILocation(line: 3613, column: 85, scope: !865)
!871 = !DILocation(line: 3613, column: 39, scope: !865)
!872 = !DILocation(line: 3613, column: 30, scope: !865)
!873 = !DILocation(line: 3613, column: 4, scope: !865)
!874 = !DILocation(line: 3613, column: 8, scope: !865)
!875 = !DILocation(line: 3613, column: 20, scope: !865)
!876 = !DILocation(line: 3613, column: 28, scope: !865)
!877 = !DILocation(line: 3614, column: 34, scope: !865)
!878 = !DILocation(line: 3614, column: 41, scope: !865)
!879 = !DILocation(line: 3614, column: 45, scope: !865)
!880 = !DILocation(line: 3614, column: 58, scope: !865)
!881 = !DILocation(line: 3614, column: 62, scope: !865)
!882 = !DILocation(line: 3614, column: 74, scope: !865)
!883 = !DILocation(line: 3614, column: 4, scope: !865)
!884 = !DILocation(line: 3616, column: 2, scope: !816)
!885 = !DILocation(line: 3618, column: 3, scope: !886)
!886 = distinct !DILexicalBlock(scope: !812, file: !1, line: 3617, column: 7)
!887 = !DILocation(line: 3618, column: 7, scope: !886)
!888 = !DILocation(line: 3618, column: 19, scope: !886)
!889 = !DILocation(line: 3618, column: 25, scope: !886)
!890 = !DILocation(line: 3619, column: 3, scope: !886)
!891 = !DILocation(line: 3619, column: 7, scope: !886)
!892 = !DILocation(line: 3619, column: 19, scope: !886)
!893 = !DILocation(line: 3619, column: 27, scope: !886)
!894 = !DILocation(line: 3620, column: 3, scope: !886)
!895 = !DILocation(line: 3620, column: 7, scope: !886)
!896 = !DILocation(line: 3620, column: 19, scope: !886)
!897 = !DILocation(line: 3620, column: 25, scope: !886)
!898 = !DILocation(line: 3622, column: 1, scope: !798)
!899 = distinct !DISubprogram(name: "bevel_limit_offset", scope: !1, file: !1, line: 3634, type: !900, scopeLine: 3635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!900 = !DISubroutineType(types: !901)
!901 = !{!76, !321, !801}
!902 = !DILocalVariable(name: "bm", arg: 1, scope: !899, file: !1, line: 3634, type: !321)
!903 = !DILocation(line: 3634, column: 40, scope: !899)
!904 = !DILocalVariable(name: "bp", arg: 2, scope: !899, file: !1, line: 3634, type: !801)
!905 = !DILocation(line: 3634, column: 57, scope: !899)
!906 = !DILocalVariable(name: "v", scope: !899, file: !1, line: 3636, type: !51)
!907 = !DILocation(line: 3636, column: 10, scope: !899)
!908 = !DILocalVariable(name: "e", scope: !899, file: !1, line: 3637, type: !138)
!909 = !DILocation(line: 3637, column: 10, scope: !899)
!910 = !DILocalVariable(name: "v_iter", scope: !899, file: !1, line: 3638, type: !499)
!911 = !DILocation(line: 3638, column: 9, scope: !899)
!912 = !DILocalVariable(name: "e_iter", scope: !899, file: !1, line: 3638, type: !499)
!913 = !DILocation(line: 3638, column: 17, scope: !899)
!914 = !DILocalVariable(name: "limited_offset", scope: !899, file: !1, line: 3639, type: !76)
!915 = !DILocation(line: 3639, column: 8, scope: !899)
!916 = !DILocalVariable(name: "half_elen", scope: !899, file: !1, line: 3639, type: !76)
!917 = !DILocation(line: 3639, column: 24, scope: !899)
!918 = !DILocalVariable(name: "vbeveled", scope: !899, file: !1, line: 3640, type: !152)
!919 = !DILocation(line: 3640, column: 7, scope: !899)
!920 = !DILocation(line: 3642, column: 19, scope: !899)
!921 = !DILocation(line: 3642, column: 23, scope: !899)
!922 = !DILocation(line: 3642, column: 17, scope: !899)
!923 = !DILocation(line: 3643, column: 6, scope: !924)
!924 = distinct !DILexicalBlock(scope: !899, file: !1, line: 3643, column: 6)
!925 = !DILocation(line: 3643, column: 10, scope: !924)
!926 = !DILocation(line: 3643, column: 22, scope: !924)
!927 = !DILocation(line: 3643, column: 6, scope: !899)
!928 = !DILocation(line: 3644, column: 7, scope: !929)
!929 = distinct !DILexicalBlock(scope: !930, file: !1, line: 3644, column: 7)
!930 = distinct !DILexicalBlock(scope: !924, file: !1, line: 3643, column: 44)
!931 = !DILocation(line: 3644, column: 22, scope: !929)
!932 = !DILocation(line: 3644, column: 7, scope: !930)
!933 = !DILocation(line: 3645, column: 19, scope: !929)
!934 = !DILocation(line: 3645, column: 4, scope: !929)
!935 = !DILocation(line: 3646, column: 10, scope: !930)
!936 = !DILocation(line: 3646, column: 3, scope: !930)
!937 = !DILocation(line: 3648, column: 2, scope: !938)
!938 = distinct !DILexicalBlock(scope: !899, file: !1, line: 3648, column: 2)
!939 = !DILocation(line: 3648, column: 2, scope: !940)
!940 = distinct !DILexicalBlock(scope: !938, file: !1, line: 3648, column: 2)
!941 = !DILocation(line: 3649, column: 7, scope: !942)
!942 = distinct !DILexicalBlock(scope: !943, file: !1, line: 3649, column: 7)
!943 = distinct !DILexicalBlock(scope: !940, file: !1, line: 3648, column: 50)
!944 = !DILocation(line: 3649, column: 7, scope: !943)
!945 = !DILocation(line: 3650, column: 8, scope: !946)
!946 = distinct !DILexicalBlock(scope: !947, file: !1, line: 3650, column: 8)
!947 = distinct !DILexicalBlock(scope: !942, file: !1, line: 3649, column: 42)
!948 = !DILocation(line: 3650, column: 12, scope: !946)
!949 = !DILocation(line: 3650, column: 8, scope: !947)
!950 = !DILocation(line: 3651, column: 14, scope: !951)
!951 = distinct !DILexicalBlock(scope: !946, file: !1, line: 3650, column: 25)
!952 = !DILocation(line: 3652, column: 4, scope: !951)
!953 = !DILocation(line: 3654, column: 14, scope: !954)
!954 = distinct !DILexicalBlock(scope: !946, file: !1, line: 3653, column: 9)
!955 = !DILocation(line: 3655, column: 5, scope: !956)
!956 = distinct !DILexicalBlock(scope: !954, file: !1, line: 3655, column: 5)
!957 = !DILocation(line: 3655, column: 5, scope: !958)
!958 = distinct !DILexicalBlock(scope: !956, file: !1, line: 3655, column: 5)
!959 = !DILocation(line: 3656, column: 10, scope: !960)
!960 = distinct !DILexicalBlock(scope: !961, file: !1, line: 3656, column: 10)
!961 = distinct !DILexicalBlock(scope: !958, file: !1, line: 3655, column: 52)
!962 = !DILocation(line: 3656, column: 10, scope: !961)
!963 = !DILocation(line: 3657, column: 16, scope: !964)
!964 = distinct !DILexicalBlock(scope: !960, file: !1, line: 3656, column: 68)
!965 = !DILocation(line: 3658, column: 7, scope: !964)
!966 = !DILocation(line: 3660, column: 5, scope: !961)
!967 = distinct !{!967, !955, !968}
!968 = !DILocation(line: 3660, column: 5, scope: !956)
!969 = !DILocation(line: 3662, column: 8, scope: !970)
!970 = distinct !DILexicalBlock(scope: !947, file: !1, line: 3662, column: 8)
!971 = !DILocation(line: 3662, column: 8, scope: !947)
!972 = !DILocation(line: 3663, column: 5, scope: !973)
!973 = distinct !DILexicalBlock(scope: !974, file: !1, line: 3663, column: 5)
!974 = distinct !DILexicalBlock(scope: !970, file: !1, line: 3662, column: 18)
!975 = !DILocation(line: 3663, column: 5, scope: !976)
!976 = distinct !DILexicalBlock(scope: !973, file: !1, line: 3663, column: 5)
!977 = !DILocation(line: 3664, column: 45, scope: !978)
!978 = distinct !DILexicalBlock(scope: !976, file: !1, line: 3663, column: 52)
!979 = !DILocation(line: 3664, column: 25, scope: !978)
!980 = !DILocation(line: 3664, column: 23, scope: !978)
!981 = !DILocation(line: 3664, column: 16, scope: !978)
!982 = !DILocation(line: 3665, column: 10, scope: !983)
!983 = distinct !DILexicalBlock(scope: !978, file: !1, line: 3665, column: 10)
!984 = !DILocation(line: 3665, column: 22, scope: !983)
!985 = !DILocation(line: 3665, column: 20, scope: !983)
!986 = !DILocation(line: 3665, column: 10, scope: !978)
!987 = !DILocation(line: 3666, column: 24, scope: !983)
!988 = !DILocation(line: 3666, column: 22, scope: !983)
!989 = !DILocation(line: 3666, column: 7, scope: !983)
!990 = !DILocation(line: 3667, column: 5, scope: !978)
!991 = distinct !{!991, !972, !992}
!992 = !DILocation(line: 3667, column: 5, scope: !973)
!993 = !DILocation(line: 3668, column: 4, scope: !974)
!994 = !DILocation(line: 3669, column: 3, scope: !947)
!995 = !DILocation(line: 3670, column: 2, scope: !943)
!996 = distinct !{!996, !937, !997}
!997 = !DILocation(line: 3670, column: 2, scope: !938)
!998 = !DILocation(line: 3671, column: 9, scope: !899)
!999 = !DILocation(line: 3671, column: 2, scope: !899)
!1000 = !DILocation(line: 3672, column: 1, scope: !899)
!1001 = distinct !DISubprogram(name: "BM_iter_new", scope: !1002, file: !1002, line: 172, type: !1003, scopeLine: 173, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!1002 = !DIFile(filename: "blender/source/blender/bmesh/intern/bmesh_iterators_inline.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!1003 = !DISubroutineType(types: !1004)
!1004 = !{!61, !1005, !321, !361, !61}
!1005 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !499, size: 64)
!1006 = !DILocalVariable(name: "iter", arg: 1, scope: !1001, file: !1002, line: 172, type: !1005)
!1007 = !DILocation(line: 172, column: 38, scope: !1001)
!1008 = !DILocalVariable(name: "bm", arg: 2, scope: !1001, file: !1002, line: 172, type: !321)
!1009 = !DILocation(line: 172, column: 51, scope: !1001)
!1010 = !DILocalVariable(name: "itype", arg: 3, scope: !1001, file: !1002, line: 172, type: !361)
!1011 = !DILocation(line: 172, column: 66, scope: !1001)
!1012 = !DILocalVariable(name: "data", arg: 4, scope: !1001, file: !1002, line: 172, type: !61)
!1013 = !DILocation(line: 172, column: 79, scope: !1001)
!1014 = !DILocation(line: 174, column: 6, scope: !1015)
!1015 = distinct !DILexicalBlock(scope: !1001, file: !1002, line: 174, column: 6)
!1016 = !DILocation(line: 174, column: 6, scope: !1001)
!1017 = !DILocation(line: 175, column: 23, scope: !1018)
!1018 = distinct !DILexicalBlock(scope: !1015, file: !1002, line: 174, column: 51)
!1019 = !DILocation(line: 175, column: 10, scope: !1018)
!1020 = !DILocation(line: 175, column: 3, scope: !1018)
!1021 = !DILocation(line: 178, column: 3, scope: !1022)
!1022 = distinct !DILexicalBlock(scope: !1015, file: !1002, line: 177, column: 7)
!1023 = !DILocation(line: 180, column: 1, scope: !1001)
!1024 = distinct !DISubprogram(name: "_bm_elem_flag_test", scope: !1025, file: !1025, line: 42, type: !1026, scopeLine: 43, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!1025 = !DIFile(filename: "blender/source/blender/bmesh/intern/bmesh_inline.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!1026 = !DISubroutineType(types: !1027)
!1027 = !{!65, !1028, !361}
!1028 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1029, size: 64)
!1029 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !57)
!1030 = !DILocalVariable(name: "head", arg: 1, scope: !1024, file: !1025, line: 42, type: !1028)
!1031 = !DILocation(line: 42, column: 52, scope: !1024)
!1032 = !DILocalVariable(name: "hflag", arg: 2, scope: !1024, file: !1025, line: 42, type: !361)
!1033 = !DILocation(line: 42, column: 69, scope: !1024)
!1034 = !DILocation(line: 44, column: 9, scope: !1024)
!1035 = !DILocation(line: 44, column: 15, scope: !1024)
!1036 = !DILocation(line: 44, column: 23, scope: !1024)
!1037 = !DILocation(line: 44, column: 21, scope: !1024)
!1038 = !DILocation(line: 44, column: 2, scope: !1024)
!1039 = distinct !DISubprogram(name: "bevel_vert_construct", scope: !1, file: !1, line: 2856, type: !1040, scopeLine: 2857, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!1040 = !DISubroutineType(types: !1041)
!1041 = !{!283, !321, !801, !51}
!1042 = !DILocalVariable(name: "bm", arg: 1, scope: !1039, file: !1, line: 2856, type: !321)
!1043 = !DILocation(line: 2856, column: 45, scope: !1039)
!1044 = !DILocalVariable(name: "bp", arg: 2, scope: !1039, file: !1, line: 2856, type: !801)
!1045 = !DILocation(line: 2856, column: 62, scope: !1039)
!1046 = !DILocalVariable(name: "v", arg: 3, scope: !1039, file: !1, line: 2856, type: !51)
!1047 = !DILocation(line: 2856, column: 74, scope: !1039)
!1048 = !DILocalVariable(name: "bme", scope: !1039, file: !1, line: 2858, type: !138)
!1049 = !DILocation(line: 2858, column: 10, scope: !1039)
!1050 = !DILocalVariable(name: "bv", scope: !1039, file: !1, line: 2859, type: !283)
!1051 = !DILocation(line: 2859, column: 11, scope: !1039)
!1052 = !DILocalVariable(name: "bme2", scope: !1039, file: !1, line: 2860, type: !138)
!1053 = !DILocation(line: 2860, column: 10, scope: !1039)
!1054 = !DILocalVariable(name: "unflagged_bme", scope: !1039, file: !1, line: 2860, type: !138)
!1055 = !DILocation(line: 2860, column: 17, scope: !1039)
!1056 = !DILocalVariable(name: "first_bme", scope: !1039, file: !1, line: 2860, type: !138)
!1057 = !DILocation(line: 2860, column: 33, scope: !1039)
!1058 = !DILocalVariable(name: "f", scope: !1039, file: !1, line: 2861, type: !141)
!1059 = !DILocation(line: 2861, column: 10, scope: !1039)
!1060 = !DILocalVariable(name: "v1", scope: !1039, file: !1, line: 2862, type: !51)
!1061 = !DILocation(line: 2862, column: 10, scope: !1039)
!1062 = !DILocalVariable(name: "v2", scope: !1039, file: !1, line: 2862, type: !51)
!1063 = !DILocation(line: 2862, column: 15, scope: !1039)
!1064 = !DILocalVariable(name: "iter", scope: !1039, file: !1, line: 2863, type: !499)
!1065 = !DILocation(line: 2863, column: 9, scope: !1039)
!1066 = !DILocalVariable(name: "iter2", scope: !1039, file: !1, line: 2863, type: !499)
!1067 = !DILocation(line: 2863, column: 15, scope: !1039)
!1068 = !DILocalVariable(name: "e", scope: !1039, file: !1, line: 2864, type: !130)
!1069 = !DILocation(line: 2864, column: 12, scope: !1039)
!1070 = !DILocalVariable(name: "weight", scope: !1039, file: !1, line: 2865, type: !76)
!1071 = !DILocation(line: 2865, column: 8, scope: !1039)
!1072 = !DILocalVariable(name: "z", scope: !1039, file: !1, line: 2865, type: !76)
!1073 = !DILocation(line: 2865, column: 16, scope: !1039)
!1074 = !DILocalVariable(name: "i", scope: !1039, file: !1, line: 2866, type: !63)
!1075 = !DILocation(line: 2866, column: 6, scope: !1039)
!1076 = !DILocalVariable(name: "found_shared_face", scope: !1039, file: !1, line: 2866, type: !63)
!1077 = !DILocation(line: 2866, column: 9, scope: !1039)
!1078 = !DILocalVariable(name: "ccw_test_sum", scope: !1039, file: !1, line: 2866, type: !63)
!1079 = !DILocation(line: 2866, column: 28, scope: !1039)
!1080 = !DILocalVariable(name: "nsel", scope: !1039, file: !1, line: 2867, type: !63)
!1081 = !DILocation(line: 2867, column: 6, scope: !1039)
!1082 = !DILocalVariable(name: "ntot", scope: !1039, file: !1, line: 2868, type: !63)
!1083 = !DILocation(line: 2868, column: 6, scope: !1039)
!1084 = !DILocalVariable(name: "nwire", scope: !1039, file: !1, line: 2869, type: !63)
!1085 = !DILocation(line: 2869, column: 6, scope: !1039)
!1086 = !DILocalVariable(name: "fcnt", scope: !1039, file: !1, line: 2870, type: !63)
!1087 = !DILocation(line: 2870, column: 6, scope: !1039)
!1088 = !DILocation(line: 2881, column: 12, scope: !1039)
!1089 = !DILocation(line: 2882, column: 2, scope: !1090)
!1090 = distinct !DILexicalBlock(scope: !1039, file: !1, line: 2882, column: 2)
!1091 = !DILocation(line: 2882, column: 2, scope: !1092)
!1092 = distinct !DILexicalBlock(scope: !1090, file: !1, line: 2882, column: 2)
!1093 = !DILocation(line: 2883, column: 29, scope: !1094)
!1094 = distinct !DILexicalBlock(scope: !1092, file: !1, line: 2882, column: 49)
!1095 = !DILocation(line: 2883, column: 10, scope: !1094)
!1096 = !DILocation(line: 2883, column: 8, scope: !1094)
!1097 = !DILocation(line: 2884, column: 3, scope: !1098)
!1098 = distinct !DILexicalBlock(scope: !1094, file: !1, line: 2884, column: 3)
!1099 = !DILocation(line: 2885, column: 7, scope: !1100)
!1100 = distinct !DILexicalBlock(scope: !1094, file: !1, line: 2885, column: 7)
!1101 = !DILocation(line: 2885, column: 43, scope: !1100)
!1102 = !DILocation(line: 2885, column: 47, scope: !1100)
!1103 = !DILocation(line: 2885, column: 51, scope: !1100)
!1104 = !DILocation(line: 2885, column: 7, scope: !1094)
!1105 = !DILocation(line: 2887, column: 8, scope: !1106)
!1106 = distinct !DILexicalBlock(scope: !1100, file: !1, line: 2885, column: 64)
!1107 = !DILocation(line: 2888, column: 9, scope: !1108)
!1108 = distinct !DILexicalBlock(scope: !1106, file: !1, line: 2888, column: 8)
!1109 = !DILocation(line: 2888, column: 8, scope: !1106)
!1110 = !DILocation(line: 2889, column: 17, scope: !1108)
!1111 = !DILocation(line: 2889, column: 15, scope: !1108)
!1112 = !DILocation(line: 2889, column: 5, scope: !1108)
!1113 = !DILocation(line: 2890, column: 3, scope: !1106)
!1114 = !DILocation(line: 2891, column: 7, scope: !1115)
!1115 = distinct !DILexicalBlock(scope: !1094, file: !1, line: 2891, column: 7)
!1116 = !DILocation(line: 2891, column: 12, scope: !1115)
!1117 = !DILocation(line: 2891, column: 7, scope: !1094)
!1118 = !DILocation(line: 2893, column: 16, scope: !1119)
!1119 = distinct !DILexicalBlock(scope: !1115, file: !1, line: 2891, column: 18)
!1120 = !DILocation(line: 2893, column: 14, scope: !1119)
!1121 = !DILocation(line: 2894, column: 3, scope: !1119)
!1122 = !DILocation(line: 2895, column: 7, scope: !1123)
!1123 = distinct !DILexicalBlock(scope: !1094, file: !1, line: 2895, column: 7)
!1124 = !DILocation(line: 2895, column: 12, scope: !1123)
!1125 = !DILocation(line: 2895, column: 16, scope: !1123)
!1126 = !DILocation(line: 2895, column: 19, scope: !1123)
!1127 = !DILocation(line: 2895, column: 23, scope: !1123)
!1128 = !DILocation(line: 2895, column: 7, scope: !1094)
!1129 = !DILocation(line: 2896, column: 8, scope: !1123)
!1130 = !DILocation(line: 2896, column: 4, scope: !1123)
!1131 = !DILocation(line: 2897, column: 23, scope: !1132)
!1132 = distinct !DILexicalBlock(scope: !1094, file: !1, line: 2897, column: 7)
!1133 = !DILocation(line: 2897, column: 7, scope: !1132)
!1134 = !DILocation(line: 2897, column: 7, scope: !1094)
!1135 = !DILocation(line: 2898, column: 9, scope: !1136)
!1136 = distinct !DILexicalBlock(scope: !1132, file: !1, line: 2897, column: 29)
!1137 = !DILocation(line: 2901, column: 10, scope: !1138)
!1138 = distinct !DILexicalBlock(scope: !1136, file: !1, line: 2901, column: 9)
!1139 = !DILocation(line: 2901, column: 14, scope: !1138)
!1140 = !DILocation(line: 2901, column: 9, scope: !1136)
!1141 = !DILocation(line: 2902, column: 5, scope: !1142)
!1142 = distinct !DILexicalBlock(scope: !1138, file: !1, line: 2902, column: 5)
!1143 = !DILocation(line: 2903, column: 3, scope: !1136)
!1144 = !DILocation(line: 2904, column: 2, scope: !1094)
!1145 = distinct !{!1145, !1089, !1146}
!1146 = !DILocation(line: 2904, column: 2, scope: !1090)
!1147 = !DILocation(line: 2905, column: 7, scope: !1148)
!1148 = distinct !DILexicalBlock(scope: !1039, file: !1, line: 2905, column: 6)
!1149 = !DILocation(line: 2905, column: 6, scope: !1039)
!1150 = !DILocation(line: 2906, column: 15, scope: !1148)
!1151 = !DILocation(line: 2906, column: 18, scope: !1148)
!1152 = !DILocation(line: 2906, column: 13, scope: !1148)
!1153 = !DILocation(line: 2906, column: 3, scope: !1148)
!1154 = !DILocation(line: 2908, column: 7, scope: !1155)
!1155 = distinct !DILexicalBlock(scope: !1039, file: !1, line: 2908, column: 6)
!1156 = !DILocation(line: 2908, column: 12, scope: !1155)
!1157 = !DILocation(line: 2908, column: 17, scope: !1155)
!1158 = !DILocation(line: 2908, column: 21, scope: !1155)
!1159 = !DILocation(line: 2908, column: 25, scope: !1155)
!1160 = !DILocation(line: 2908, column: 38, scope: !1155)
!1161 = !DILocation(line: 2908, column: 42, scope: !1155)
!1162 = !DILocation(line: 2908, column: 47, scope: !1155)
!1163 = !DILocation(line: 2908, column: 51, scope: !1155)
!1164 = !DILocation(line: 2908, column: 54, scope: !1155)
!1165 = !DILocation(line: 2908, column: 58, scope: !1155)
!1166 = !DILocation(line: 2908, column: 6, scope: !1039)
!1167 = !DILocation(line: 2910, column: 3, scope: !1168)
!1168 = distinct !DILexicalBlock(scope: !1155, file: !1, line: 2908, column: 72)
!1169 = !DILocation(line: 2911, column: 3, scope: !1168)
!1170 = !DILocation(line: 2914, column: 37, scope: !1039)
!1171 = !DILocation(line: 2914, column: 41, scope: !1039)
!1172 = !DILocation(line: 2914, column: 18, scope: !1039)
!1173 = !DILocation(line: 2914, column: 7, scope: !1039)
!1174 = !DILocation(line: 2914, column: 5, scope: !1039)
!1175 = !DILocation(line: 2915, column: 10, scope: !1039)
!1176 = !DILocation(line: 2915, column: 2, scope: !1039)
!1177 = !DILocation(line: 2915, column: 6, scope: !1039)
!1178 = !DILocation(line: 2915, column: 8, scope: !1039)
!1179 = !DILocation(line: 2916, column: 18, scope: !1039)
!1180 = !DILocation(line: 2916, column: 2, scope: !1039)
!1181 = !DILocation(line: 2916, column: 6, scope: !1039)
!1182 = !DILocation(line: 2916, column: 16, scope: !1039)
!1183 = !DILocation(line: 2917, column: 17, scope: !1039)
!1184 = !DILocation(line: 2917, column: 2, scope: !1039)
!1185 = !DILocation(line: 2917, column: 6, scope: !1039)
!1186 = !DILocation(line: 2917, column: 15, scope: !1039)
!1187 = !DILocation(line: 2918, column: 18, scope: !1039)
!1188 = !DILocation(line: 2918, column: 2, scope: !1039)
!1189 = !DILocation(line: 2918, column: 6, scope: !1039)
!1190 = !DILocation(line: 2918, column: 16, scope: !1039)
!1191 = !DILocation(line: 2919, column: 15, scope: !1039)
!1192 = !DILocation(line: 2919, column: 19, scope: !1039)
!1193 = !DILocation(line: 2919, column: 2, scope: !1039)
!1194 = !DILocation(line: 2919, column: 6, scope: !1039)
!1195 = !DILocation(line: 2919, column: 13, scope: !1039)
!1196 = !DILocation(line: 2920, column: 45, scope: !1039)
!1197 = !DILocation(line: 2920, column: 49, scope: !1039)
!1198 = !DILocation(line: 2920, column: 60, scope: !1039)
!1199 = !DILocation(line: 2920, column: 65, scope: !1039)
!1200 = !DILocation(line: 2920, column: 26, scope: !1039)
!1201 = !DILocation(line: 2920, column: 14, scope: !1039)
!1202 = !DILocation(line: 2920, column: 2, scope: !1039)
!1203 = !DILocation(line: 2920, column: 6, scope: !1039)
!1204 = !DILocation(line: 2920, column: 12, scope: !1039)
!1205 = !DILocation(line: 2921, column: 6, scope: !1206)
!1206 = distinct !DILexicalBlock(scope: !1039, file: !1, line: 2921, column: 6)
!1207 = !DILocation(line: 2921, column: 6, scope: !1039)
!1208 = !DILocation(line: 2922, column: 50, scope: !1206)
!1209 = !DILocation(line: 2922, column: 54, scope: !1206)
!1210 = !DILocation(line: 2922, column: 65, scope: !1206)
!1211 = !DILocation(line: 2922, column: 71, scope: !1206)
!1212 = !DILocation(line: 2922, column: 31, scope: !1206)
!1213 = !DILocation(line: 2922, column: 20, scope: !1206)
!1214 = !DILocation(line: 2922, column: 3, scope: !1206)
!1215 = !DILocation(line: 2922, column: 7, scope: !1206)
!1216 = !DILocation(line: 2922, column: 18, scope: !1206)
!1217 = !DILocation(line: 2924, column: 3, scope: !1206)
!1218 = !DILocation(line: 2924, column: 7, scope: !1206)
!1219 = !DILocation(line: 2924, column: 18, scope: !1206)
!1220 = !DILocation(line: 2925, column: 42, scope: !1039)
!1221 = !DILocation(line: 2925, column: 46, scope: !1039)
!1222 = !DILocation(line: 2925, column: 23, scope: !1039)
!1223 = !DILocation(line: 2925, column: 14, scope: !1039)
!1224 = !DILocation(line: 2925, column: 2, scope: !1039)
!1225 = !DILocation(line: 2925, column: 6, scope: !1039)
!1226 = !DILocation(line: 2925, column: 12, scope: !1039)
!1227 = !DILocation(line: 2926, column: 19, scope: !1039)
!1228 = !DILocation(line: 2926, column: 23, scope: !1039)
!1229 = !DILocation(line: 2926, column: 2, scope: !1039)
!1230 = !DILocation(line: 2926, column: 6, scope: !1039)
!1231 = !DILocation(line: 2926, column: 13, scope: !1039)
!1232 = !DILocation(line: 2926, column: 17, scope: !1039)
!1233 = !DILocation(line: 2928, column: 6, scope: !1234)
!1234 = distinct !DILexicalBlock(scope: !1039, file: !1, line: 2928, column: 6)
!1235 = !DILocation(line: 2928, column: 10, scope: !1234)
!1236 = !DILocation(line: 2928, column: 6, scope: !1039)
!1237 = !DILocation(line: 2930, column: 7, scope: !1238)
!1238 = distinct !DILexicalBlock(scope: !1239, file: !1, line: 2930, column: 7)
!1239 = distinct !DILexicalBlock(scope: !1234, file: !1, line: 2928, column: 23)
!1240 = !DILocation(line: 2930, column: 11, scope: !1238)
!1241 = !DILocation(line: 2930, column: 17, scope: !1238)
!1242 = !DILocation(line: 2930, column: 25, scope: !1238)
!1243 = !DILocation(line: 2930, column: 28, scope: !1238)
!1244 = !DILocation(line: 2930, column: 32, scope: !1238)
!1245 = !DILocation(line: 2930, column: 45, scope: !1238)
!1246 = !DILocation(line: 2930, column: 7, scope: !1239)
!1247 = !DILocation(line: 2931, column: 33, scope: !1248)
!1248 = distinct !DILexicalBlock(scope: !1238, file: !1, line: 2930, column: 52)
!1249 = !DILocation(line: 2931, column: 37, scope: !1248)
!1250 = !DILocation(line: 2931, column: 45, scope: !1248)
!1251 = !DILocation(line: 2931, column: 43, scope: !1248)
!1252 = !DILocation(line: 2931, column: 67, scope: !1248)
!1253 = !DILocation(line: 2931, column: 71, scope: !1248)
!1254 = !DILocation(line: 2931, column: 13, scope: !1248)
!1255 = !DILocation(line: 2931, column: 11, scope: !1248)
!1256 = !DILocation(line: 2932, column: 8, scope: !1257)
!1257 = distinct !DILexicalBlock(scope: !1248, file: !1, line: 2932, column: 8)
!1258 = !DILocation(line: 2932, column: 15, scope: !1257)
!1259 = !DILocation(line: 2932, column: 8, scope: !1248)
!1260 = !DILocation(line: 2933, column: 5, scope: !1261)
!1261 = distinct !DILexicalBlock(scope: !1257, file: !1, line: 2932, column: 24)
!1262 = !DILocation(line: 2934, column: 5, scope: !1261)
!1263 = !DILocation(line: 2936, column: 18, scope: !1248)
!1264 = !DILocation(line: 2936, column: 4, scope: !1248)
!1265 = !DILocation(line: 2936, column: 8, scope: !1248)
!1266 = !DILocation(line: 2936, column: 15, scope: !1248)
!1267 = !DILocation(line: 2937, column: 3, scope: !1248)
!1268 = !DILocation(line: 2938, column: 12, scope: !1269)
!1269 = distinct !DILexicalBlock(scope: !1238, file: !1, line: 2938, column: 12)
!1270 = !DILocation(line: 2938, column: 16, scope: !1269)
!1271 = !DILocation(line: 2938, column: 12, scope: !1238)
!1272 = !DILocation(line: 2939, column: 37, scope: !1273)
!1273 = distinct !DILexicalBlock(scope: !1269, file: !1, line: 2938, column: 29)
!1274 = !DILocation(line: 2939, column: 41, scope: !1273)
!1275 = !DILocation(line: 2939, column: 48, scope: !1273)
!1276 = !DILocation(line: 2939, column: 13, scope: !1273)
!1277 = !DILocation(line: 2939, column: 11, scope: !1273)
!1278 = !DILocation(line: 2940, column: 18, scope: !1273)
!1279 = !DILocation(line: 2940, column: 4, scope: !1273)
!1280 = !DILocation(line: 2940, column: 8, scope: !1273)
!1281 = !DILocation(line: 2940, column: 15, scope: !1273)
!1282 = !DILocation(line: 2941, column: 3, scope: !1273)
!1283 = !DILocation(line: 2942, column: 2, scope: !1239)
!1284 = !DILocation(line: 2943, column: 19, scope: !1039)
!1285 = !DILocation(line: 2943, column: 23, scope: !1039)
!1286 = !DILocation(line: 2943, column: 34, scope: !1039)
!1287 = !DILocation(line: 2943, column: 37, scope: !1039)
!1288 = !DILocation(line: 2943, column: 2, scope: !1039)
!1289 = !DILocation(line: 2947, column: 4, scope: !1039)
!1290 = !DILocation(line: 2949, column: 8, scope: !1039)
!1291 = !DILocation(line: 2949, column: 6, scope: !1039)
!1292 = !DILocation(line: 2950, column: 2, scope: !1293)
!1293 = distinct !DILexicalBlock(scope: !1039, file: !1, line: 2950, column: 2)
!1294 = !DILocation(line: 2951, column: 7, scope: !1039)
!1295 = !DILocation(line: 2951, column: 11, scope: !1039)
!1296 = !DILocation(line: 2951, column: 4, scope: !1039)
!1297 = !DILocation(line: 2952, column: 9, scope: !1039)
!1298 = !DILocation(line: 2952, column: 2, scope: !1039)
!1299 = !DILocation(line: 2952, column: 5, scope: !1039)
!1300 = !DILocation(line: 2952, column: 7, scope: !1039)
!1301 = !DILocation(line: 2953, column: 9, scope: !1302)
!1302 = distinct !DILexicalBlock(scope: !1039, file: !1, line: 2953, column: 2)
!1303 = !DILocation(line: 2953, column: 7, scope: !1302)
!1304 = !DILocation(line: 2953, column: 14, scope: !1305)
!1305 = distinct !DILexicalBlock(scope: !1302, file: !1, line: 2953, column: 2)
!1306 = !DILocation(line: 2953, column: 18, scope: !1305)
!1307 = !DILocation(line: 2953, column: 16, scope: !1305)
!1308 = !DILocation(line: 2953, column: 2, scope: !1302)
!1309 = !DILocation(line: 2954, column: 7, scope: !1310)
!1310 = distinct !DILexicalBlock(scope: !1311, file: !1, line: 2954, column: 7)
!1311 = distinct !DILexicalBlock(scope: !1305, file: !1, line: 2953, column: 29)
!1312 = !DILocation(line: 2954, column: 9, scope: !1310)
!1313 = !DILocation(line: 2954, column: 7, scope: !1311)
!1314 = !DILocation(line: 2956, column: 22, scope: !1315)
!1315 = distinct !DILexicalBlock(scope: !1310, file: !1, line: 2954, column: 14)
!1316 = !DILocation(line: 2957, column: 18, scope: !1315)
!1317 = !DILocation(line: 2958, column: 4, scope: !1318)
!1318 = distinct !DILexicalBlock(scope: !1315, file: !1, line: 2958, column: 4)
!1319 = !DILocation(line: 2958, column: 4, scope: !1320)
!1320 = distinct !DILexicalBlock(scope: !1318, file: !1, line: 2958, column: 4)
!1321 = !DILocation(line: 2959, column: 9, scope: !1322)
!1322 = distinct !DILexicalBlock(scope: !1323, file: !1, line: 2959, column: 9)
!1323 = distinct !DILexicalBlock(scope: !1320, file: !1, line: 2958, column: 52)
!1324 = !DILocation(line: 2959, column: 9, scope: !1323)
!1325 = !DILocation(line: 2960, column: 6, scope: !1322)
!1326 = !DILocation(line: 2961, column: 10, scope: !1327)
!1327 = distinct !DILexicalBlock(scope: !1323, file: !1, line: 2961, column: 9)
!1328 = !DILocation(line: 2961, column: 9, scope: !1323)
!1329 = !DILocation(line: 2962, column: 22, scope: !1327)
!1330 = !DILocation(line: 2962, column: 20, scope: !1327)
!1331 = !DILocation(line: 2962, column: 6, scope: !1327)
!1332 = !DILocation(line: 2963, column: 10, scope: !1333)
!1333 = distinct !DILexicalBlock(scope: !1323, file: !1, line: 2963, column: 9)
!1334 = !DILocation(line: 2963, column: 15, scope: !1333)
!1335 = !DILocation(line: 2963, column: 9, scope: !1323)
!1336 = !DILocation(line: 2964, column: 6, scope: !1333)
!1337 = !DILocation(line: 2965, column: 5, scope: !1338)
!1338 = distinct !DILexicalBlock(scope: !1323, file: !1, line: 2965, column: 5)
!1339 = !DILocation(line: 2965, column: 5, scope: !1340)
!1340 = distinct !DILexicalBlock(scope: !1338, file: !1, line: 2965, column: 5)
!1341 = !DILocation(line: 2966, column: 34, scope: !1342)
!1342 = distinct !DILexicalBlock(scope: !1343, file: !1, line: 2966, column: 10)
!1343 = distinct !DILexicalBlock(scope: !1340, file: !1, line: 2965, column: 54)
!1344 = !DILocation(line: 2966, column: 37, scope: !1342)
!1345 = !DILocation(line: 2966, column: 10, scope: !1342)
!1346 = !DILocation(line: 2966, column: 10, scope: !1343)
!1347 = !DILocation(line: 2967, column: 25, scope: !1348)
!1348 = distinct !DILexicalBlock(scope: !1342, file: !1, line: 2966, column: 43)
!1349 = !DILocation(line: 2968, column: 7, scope: !1348)
!1350 = !DILocation(line: 2970, column: 5, scope: !1343)
!1351 = distinct !{!1351, !1337, !1352}
!1352 = !DILocation(line: 2970, column: 5, scope: !1338)
!1353 = !DILocation(line: 2971, column: 9, scope: !1354)
!1354 = distinct !DILexicalBlock(scope: !1323, file: !1, line: 2971, column: 9)
!1355 = !DILocation(line: 2971, column: 9, scope: !1323)
!1356 = !DILocation(line: 2972, column: 6, scope: !1354)
!1357 = !DILocation(line: 2973, column: 4, scope: !1323)
!1358 = distinct !{!1358, !1317, !1359}
!1359 = !DILocation(line: 2973, column: 4, scope: !1318)
!1360 = !DILocation(line: 2974, column: 9, scope: !1315)
!1361 = !DILocation(line: 2974, column: 13, scope: !1315)
!1362 = !DILocation(line: 2974, column: 19, scope: !1315)
!1363 = !DILocation(line: 2974, column: 6, scope: !1315)
!1364 = !DILocation(line: 2975, column: 8, scope: !1365)
!1365 = distinct !DILexicalBlock(scope: !1315, file: !1, line: 2975, column: 8)
!1366 = !DILocation(line: 2975, column: 8, scope: !1315)
!1367 = !DILocation(line: 2976, column: 12, scope: !1368)
!1368 = distinct !DILexicalBlock(scope: !1365, file: !1, line: 2975, column: 27)
!1369 = !DILocation(line: 2976, column: 5, scope: !1368)
!1370 = !DILocation(line: 2976, column: 8, scope: !1368)
!1371 = !DILocation(line: 2976, column: 10, scope: !1368)
!1372 = !DILocation(line: 2977, column: 16, scope: !1368)
!1373 = !DILocation(line: 2977, column: 5, scope: !1368)
!1374 = !DILocation(line: 2977, column: 8, scope: !1368)
!1375 = !DILocation(line: 2977, column: 14, scope: !1368)
!1376 = !DILocation(line: 2978, column: 30, scope: !1368)
!1377 = !DILocation(line: 2978, column: 5, scope: !1368)
!1378 = !DILocation(line: 2978, column: 9, scope: !1368)
!1379 = !DILocation(line: 2978, column: 15, scope: !1368)
!1380 = !DILocation(line: 2978, column: 17, scope: !1368)
!1381 = !DILocation(line: 2978, column: 22, scope: !1368)
!1382 = !DILocation(line: 2978, column: 28, scope: !1368)
!1383 = !DILocation(line: 2979, column: 4, scope: !1368)
!1384 = !DILocation(line: 2981, column: 12, scope: !1385)
!1385 = distinct !DILexicalBlock(scope: !1365, file: !1, line: 2980, column: 9)
!1386 = !DILocation(line: 2981, column: 5, scope: !1385)
!1387 = !DILocation(line: 2981, column: 8, scope: !1385)
!1388 = !DILocation(line: 2981, column: 10, scope: !1385)
!1389 = !DILocation(line: 2983, column: 3, scope: !1315)
!1390 = !DILocation(line: 2984, column: 9, scope: !1311)
!1391 = !DILocation(line: 2984, column: 12, scope: !1311)
!1392 = !DILocation(line: 2984, column: 7, scope: !1311)
!1393 = !DILocation(line: 2985, column: 3, scope: !1394)
!1394 = distinct !DILexicalBlock(scope: !1311, file: !1, line: 2985, column: 3)
!1395 = !DILocation(line: 2986, column: 7, scope: !1396)
!1396 = distinct !DILexicalBlock(scope: !1311, file: !1, line: 2986, column: 7)
!1397 = !DILocation(line: 2986, column: 43, scope: !1396)
!1398 = !DILocation(line: 2986, column: 47, scope: !1396)
!1399 = !DILocation(line: 2986, column: 51, scope: !1396)
!1400 = !DILocation(line: 2986, column: 7, scope: !1311)
!1401 = !DILocation(line: 2987, column: 4, scope: !1402)
!1402 = distinct !DILexicalBlock(scope: !1396, file: !1, line: 2986, column: 64)
!1403 = !DILocation(line: 2987, column: 7, scope: !1402)
!1404 = !DILocation(line: 2987, column: 14, scope: !1402)
!1405 = !DILocation(line: 2988, column: 13, scope: !1402)
!1406 = !DILocation(line: 2988, column: 17, scope: !1402)
!1407 = !DILocation(line: 2988, column: 4, scope: !1402)
!1408 = !DILocation(line: 2988, column: 7, scope: !1402)
!1409 = !DILocation(line: 2988, column: 11, scope: !1402)
!1410 = !DILocation(line: 2989, column: 3, scope: !1402)
!1411 = !DILocation(line: 2991, column: 4, scope: !1412)
!1412 = distinct !DILexicalBlock(scope: !1396, file: !1, line: 2990, column: 8)
!1413 = !DILocation(line: 2991, column: 7, scope: !1412)
!1414 = !DILocation(line: 2991, column: 14, scope: !1412)
!1415 = !DILocation(line: 2992, column: 4, scope: !1412)
!1416 = !DILocation(line: 2992, column: 7, scope: !1412)
!1417 = !DILocation(line: 2992, column: 11, scope: !1412)
!1418 = !DILocation(line: 2994, column: 16, scope: !1311)
!1419 = !DILocation(line: 2994, column: 21, scope: !1311)
!1420 = !DILocation(line: 2994, column: 27, scope: !1311)
!1421 = !DILocation(line: 2994, column: 24, scope: !1311)
!1422 = !DILocation(line: 2994, column: 15, scope: !1311)
!1423 = !DILocation(line: 2994, column: 3, scope: !1311)
!1424 = !DILocation(line: 2994, column: 6, scope: !1311)
!1425 = !DILocation(line: 2994, column: 13, scope: !1311)
!1426 = !DILocation(line: 2995, column: 2, scope: !1311)
!1427 = !DILocation(line: 2953, column: 25, scope: !1305)
!1428 = !DILocation(line: 2953, column: 2, scope: !1305)
!1429 = distinct !{!1429, !1308, !1430}
!1430 = !DILocation(line: 2995, column: 2, scope: !1302)
!1431 = !DILocation(line: 2997, column: 2, scope: !1432)
!1432 = distinct !DILexicalBlock(scope: !1039, file: !1, line: 2997, column: 2)
!1433 = !DILocation(line: 2997, column: 2, scope: !1434)
!1434 = distinct !DILexicalBlock(scope: !1432, file: !1, line: 2997, column: 2)
!1435 = !DILocation(line: 2998, column: 7, scope: !1436)
!1436 = distinct !DILexicalBlock(scope: !1437, file: !1, line: 2998, column: 7)
!1437 = distinct !DILexicalBlock(scope: !1434, file: !1, line: 2997, column: 50)
!1438 = !DILocation(line: 2998, column: 11, scope: !1436)
!1439 = !DILocation(line: 2998, column: 20, scope: !1436)
!1440 = !DILocation(line: 2998, column: 23, scope: !1436)
!1441 = !DILocation(line: 2998, column: 25, scope: !1436)
!1442 = !DILocation(line: 2998, column: 52, scope: !1436)
!1443 = !DILocation(line: 2998, column: 55, scope: !1436)
!1444 = !DILocation(line: 2998, column: 59, scope: !1436)
!1445 = !DILocation(line: 2998, column: 68, scope: !1436)
!1446 = !DILocation(line: 2998, column: 28, scope: !1436)
!1447 = !DILocation(line: 2998, column: 7, scope: !1437)
!1448 = !DILocation(line: 2999, column: 8, scope: !1449)
!1449 = distinct !DILexicalBlock(scope: !1450, file: !1, line: 2999, column: 8)
!1450 = distinct !DILexicalBlock(scope: !1436, file: !1, line: 2998, column: 72)
!1451 = !DILocation(line: 2999, column: 12, scope: !1449)
!1452 = !DILocation(line: 2999, column: 21, scope: !1449)
!1453 = !DILocation(line: 2999, column: 30, scope: !1449)
!1454 = !DILocation(line: 2999, column: 27, scope: !1449)
!1455 = !DILocation(line: 2999, column: 8, scope: !1450)
!1456 = !DILocation(line: 3000, column: 5, scope: !1449)
!1457 = !DILocation(line: 3001, column: 32, scope: !1450)
!1458 = !DILocation(line: 3001, column: 4, scope: !1450)
!1459 = !DILocation(line: 3001, column: 8, scope: !1450)
!1460 = !DILocation(line: 3001, column: 14, scope: !1450)
!1461 = !DILocation(line: 3001, column: 19, scope: !1450)
!1462 = !DILocation(line: 3001, column: 24, scope: !1450)
!1463 = !DILocation(line: 3001, column: 30, scope: !1450)
!1464 = !DILocation(line: 3002, column: 25, scope: !1450)
!1465 = !DILocation(line: 3002, column: 4, scope: !1450)
!1466 = !DILocation(line: 3002, column: 8, scope: !1450)
!1467 = !DILocation(line: 3002, column: 17, scope: !1450)
!1468 = !DILocation(line: 3002, column: 23, scope: !1450)
!1469 = !DILocation(line: 3003, column: 4, scope: !1450)
!1470 = !DILocation(line: 3005, column: 2, scope: !1437)
!1471 = distinct !{!1471, !1431, !1472}
!1472 = !DILocation(line: 3005, column: 2, scope: !1432)
!1473 = !DILocation(line: 3008, column: 2, scope: !1474)
!1474 = distinct !DILexicalBlock(scope: !1039, file: !1, line: 3008, column: 2)
!1475 = !DILocation(line: 3008, column: 2, scope: !1476)
!1476 = distinct !DILexicalBlock(scope: !1474, file: !1, line: 3008, column: 2)
!1477 = !DILocation(line: 3009, column: 3, scope: !1478)
!1478 = distinct !DILexicalBlock(scope: !1479, file: !1, line: 3009, column: 3)
!1479 = distinct !DILexicalBlock(scope: !1476, file: !1, line: 3008, column: 49)
!1480 = !DILocation(line: 3010, column: 2, scope: !1479)
!1481 = distinct !{!1481, !1473, !1482}
!1482 = !DILocation(line: 3010, column: 2, scope: !1474)
!1483 = !DILocation(line: 3014, column: 6, scope: !1484)
!1484 = distinct !DILexicalBlock(scope: !1039, file: !1, line: 3014, column: 6)
!1485 = !DILocation(line: 3014, column: 11, scope: !1484)
!1486 = !DILocation(line: 3014, column: 6, scope: !1039)
!1487 = !DILocation(line: 3015, column: 16, scope: !1488)
!1488 = distinct !DILexicalBlock(scope: !1484, file: !1, line: 3014, column: 16)
!1489 = !DILocation(line: 3016, column: 10, scope: !1490)
!1490 = distinct !DILexicalBlock(scope: !1488, file: !1, line: 3016, column: 3)
!1491 = !DILocation(line: 3016, column: 8, scope: !1490)
!1492 = !DILocation(line: 3016, column: 15, scope: !1493)
!1493 = distinct !DILexicalBlock(scope: !1490, file: !1, line: 3016, column: 3)
!1494 = !DILocation(line: 3016, column: 19, scope: !1493)
!1495 = !DILocation(line: 3016, column: 17, scope: !1493)
!1496 = !DILocation(line: 3016, column: 3, scope: !1490)
!1497 = !DILocation(line: 3017, column: 33, scope: !1493)
!1498 = !DILocation(line: 3017, column: 37, scope: !1493)
!1499 = !DILocation(line: 3017, column: 43, scope: !1493)
!1500 = !DILocation(line: 3017, column: 46, scope: !1493)
!1501 = !DILocation(line: 3017, column: 49, scope: !1493)
!1502 = !DILocation(line: 3017, column: 53, scope: !1493)
!1503 = !DILocation(line: 3017, column: 60, scope: !1493)
!1504 = !DILocation(line: 3017, column: 62, scope: !1493)
!1505 = !DILocation(line: 3017, column: 69, scope: !1493)
!1506 = !DILocation(line: 3017, column: 67, scope: !1493)
!1507 = !DILocation(line: 3017, column: 75, scope: !1493)
!1508 = !DILocation(line: 3018, column: 33, scope: !1493)
!1509 = !DILocation(line: 3018, column: 37, scope: !1493)
!1510 = !DILocation(line: 3018, column: 43, scope: !1493)
!1511 = !DILocation(line: 3018, column: 46, scope: !1493)
!1512 = !DILocation(line: 3017, column: 20, scope: !1493)
!1513 = !DILocation(line: 3017, column: 17, scope: !1493)
!1514 = !DILocation(line: 3017, column: 4, scope: !1493)
!1515 = !DILocation(line: 3016, column: 26, scope: !1493)
!1516 = !DILocation(line: 3016, column: 3, scope: !1493)
!1517 = distinct !{!1517, !1496, !1518}
!1518 = !DILocation(line: 3018, column: 51, scope: !1490)
!1519 = !DILocation(line: 3019, column: 7, scope: !1520)
!1520 = distinct !DILexicalBlock(scope: !1488, file: !1, line: 3019, column: 7)
!1521 = !DILocation(line: 3019, column: 20, scope: !1520)
!1522 = !DILocation(line: 3019, column: 7, scope: !1488)
!1523 = !DILocation(line: 3020, column: 11, scope: !1524)
!1524 = distinct !DILexicalBlock(scope: !1525, file: !1, line: 3020, column: 4)
!1525 = distinct !DILexicalBlock(scope: !1520, file: !1, line: 3019, column: 25)
!1526 = !DILocation(line: 3020, column: 9, scope: !1524)
!1527 = !DILocation(line: 3020, column: 16, scope: !1528)
!1528 = distinct !DILexicalBlock(scope: !1524, file: !1, line: 3020, column: 4)
!1529 = !DILocation(line: 3020, column: 22, scope: !1528)
!1530 = !DILocation(line: 3020, column: 27, scope: !1528)
!1531 = !DILocation(line: 3020, column: 32, scope: !1528)
!1532 = !DILocation(line: 3020, column: 18, scope: !1528)
!1533 = !DILocation(line: 3020, column: 4, scope: !1524)
!1534 = !DILocalVariable(name: "sw_ap", scope: !1535, file: !1, line: 3021, type: !131)
!1535 = distinct !DILexicalBlock(scope: !1536, file: !1, line: 3021, column: 5)
!1536 = distinct !DILexicalBlock(scope: !1528, file: !1, line: 3020, column: 42)
!1537 = !DILocation(line: 3021, column: 5, scope: !1535)
!1538 = !DILocalVariable(name: "sw_ap", scope: !1539, file: !1, line: 3022, type: !141)
!1539 = distinct !DILexicalBlock(scope: !1536, file: !1, line: 3022, column: 5)
!1540 = !DILocation(line: 3022, column: 5, scope: !1539)
!1541 = !DILocalVariable(name: "sw_ap", scope: !1542, file: !1, line: 3023, type: !141)
!1542 = distinct !DILexicalBlock(scope: !1536, file: !1, line: 3023, column: 5)
!1543 = !DILocation(line: 3023, column: 5, scope: !1542)
!1544 = !DILocation(line: 3024, column: 4, scope: !1536)
!1545 = !DILocation(line: 3020, column: 38, scope: !1528)
!1546 = !DILocation(line: 3020, column: 4, scope: !1528)
!1547 = distinct !{!1547, !1533, !1548}
!1548 = !DILocation(line: 3024, column: 4, scope: !1524)
!1549 = !DILocation(line: 3025, column: 8, scope: !1550)
!1550 = distinct !DILexicalBlock(scope: !1525, file: !1, line: 3025, column: 8)
!1551 = !DILocation(line: 3025, column: 13, scope: !1550)
!1552 = !DILocation(line: 3025, column: 17, scope: !1550)
!1553 = !DILocation(line: 3025, column: 8, scope: !1525)
!1554 = !DILocation(line: 3026, column: 9, scope: !1555)
!1555 = distinct !DILexicalBlock(scope: !1550, file: !1, line: 3025, column: 23)
!1556 = !DILocation(line: 3026, column: 14, scope: !1555)
!1557 = !DILocation(line: 3026, column: 7, scope: !1555)
!1558 = !DILocalVariable(name: "sw_ap", scope: !1559, file: !1, line: 3027, type: !141)
!1559 = distinct !DILexicalBlock(scope: !1555, file: !1, line: 3027, column: 5)
!1560 = !DILocation(line: 3027, column: 5, scope: !1559)
!1561 = !DILocation(line: 3028, column: 4, scope: !1555)
!1562 = !DILocation(line: 3029, column: 3, scope: !1525)
!1563 = !DILocation(line: 3030, column: 2, scope: !1488)
!1564 = !DILocation(line: 3032, column: 9, scope: !1565)
!1565 = distinct !DILexicalBlock(scope: !1039, file: !1, line: 3032, column: 2)
!1566 = !DILocation(line: 3032, column: 18, scope: !1565)
!1567 = !DILocation(line: 3032, column: 22, scope: !1565)
!1568 = !DILocation(line: 3032, column: 16, scope: !1565)
!1569 = !DILocation(line: 3032, column: 7, scope: !1565)
!1570 = !DILocation(line: 3032, column: 29, scope: !1571)
!1571 = distinct !DILexicalBlock(scope: !1565, file: !1, line: 3032, column: 2)
!1572 = !DILocation(line: 3032, column: 33, scope: !1571)
!1573 = !DILocation(line: 3032, column: 31, scope: !1571)
!1574 = !DILocation(line: 3032, column: 2, scope: !1565)
!1575 = !DILocation(line: 3033, column: 14, scope: !1576)
!1576 = distinct !DILexicalBlock(scope: !1571, file: !1, line: 3032, column: 49)
!1577 = !DILocation(line: 3033, column: 18, scope: !1576)
!1578 = !DILocation(line: 3033, column: 25, scope: !1576)
!1579 = !DILocation(line: 3033, column: 27, scope: !1576)
!1580 = !DILocation(line: 3033, column: 34, scope: !1576)
!1581 = !DILocation(line: 3033, column: 32, scope: !1576)
!1582 = !DILocation(line: 3033, column: 3, scope: !1576)
!1583 = !DILocation(line: 3033, column: 6, scope: !1576)
!1584 = !DILocation(line: 3033, column: 11, scope: !1576)
!1585 = !DILocation(line: 3034, column: 14, scope: !1576)
!1586 = !DILocation(line: 3034, column: 18, scope: !1576)
!1587 = !DILocation(line: 3034, column: 25, scope: !1576)
!1588 = !DILocation(line: 3034, column: 29, scope: !1576)
!1589 = !DILocation(line: 3034, column: 27, scope: !1576)
!1590 = !DILocation(line: 3034, column: 34, scope: !1576)
!1591 = !DILocation(line: 3034, column: 41, scope: !1576)
!1592 = !DILocation(line: 3034, column: 39, scope: !1576)
!1593 = !DILocation(line: 3034, column: 3, scope: !1576)
!1594 = !DILocation(line: 3034, column: 6, scope: !1576)
!1595 = !DILocation(line: 3034, column: 11, scope: !1576)
!1596 = !DILocation(line: 3037, column: 7, scope: !1597)
!1597 = distinct !DILexicalBlock(scope: !1576, file: !1, line: 3037, column: 7)
!1598 = !DILocation(line: 3037, column: 10, scope: !1597)
!1599 = !DILocation(line: 3037, column: 7, scope: !1576)
!1600 = !DILocation(line: 3042, column: 12, scope: !1601)
!1601 = distinct !DILexicalBlock(scope: !1597, file: !1, line: 3037, column: 18)
!1602 = !DILocation(line: 3042, column: 16, scope: !1601)
!1603 = !DILocation(line: 3042, column: 4, scope: !1601)
!1604 = !DILocation(line: 3044, column: 25, scope: !1605)
!1605 = distinct !DILexicalBlock(scope: !1601, file: !1, line: 3042, column: 29)
!1606 = !DILocation(line: 3044, column: 29, scope: !1605)
!1607 = !DILocation(line: 3044, column: 6, scope: !1605)
!1608 = !DILocation(line: 3044, column: 9, scope: !1605)
!1609 = !DILocation(line: 3044, column: 23, scope: !1605)
!1610 = !DILocation(line: 3045, column: 6, scope: !1605)
!1611 = !DILocation(line: 3047, column: 44, scope: !1605)
!1612 = !DILocation(line: 3047, column: 28, scope: !1605)
!1613 = !DILocation(line: 3047, column: 47, scope: !1605)
!1614 = !DILocation(line: 3047, column: 23, scope: !1605)
!1615 = !DILocation(line: 3047, column: 21, scope: !1605)
!1616 = !DILocation(line: 3047, column: 10, scope: !1605)
!1617 = !DILocation(line: 3047, column: 8, scope: !1605)
!1618 = !DILocation(line: 3048, column: 10, scope: !1619)
!1619 = distinct !DILexicalBlock(scope: !1605, file: !1, line: 3048, column: 10)
!1620 = !DILocation(line: 3048, column: 12, scope: !1619)
!1621 = !DILocation(line: 3048, column: 10, scope: !1605)
!1622 = !DILocation(line: 3049, column: 34, scope: !1619)
!1623 = !DILocation(line: 3049, column: 38, scope: !1619)
!1624 = !DILocation(line: 3049, column: 32, scope: !1619)
!1625 = !DILocation(line: 3049, column: 7, scope: !1619)
!1626 = !DILocation(line: 3049, column: 10, scope: !1619)
!1627 = !DILocation(line: 3049, column: 24, scope: !1619)
!1628 = !DILocation(line: 3051, column: 26, scope: !1619)
!1629 = !DILocation(line: 3051, column: 30, scope: !1619)
!1630 = !DILocation(line: 3051, column: 39, scope: !1619)
!1631 = !DILocation(line: 3051, column: 37, scope: !1619)
!1632 = !DILocation(line: 3051, column: 7, scope: !1619)
!1633 = !DILocation(line: 3051, column: 10, scope: !1619)
!1634 = !DILocation(line: 3051, column: 24, scope: !1619)
!1635 = !DILocation(line: 3052, column: 6, scope: !1605)
!1636 = !DILocation(line: 3054, column: 37, scope: !1605)
!1637 = !DILocation(line: 3054, column: 21, scope: !1605)
!1638 = !DILocation(line: 3054, column: 40, scope: !1605)
!1639 = !DILocation(line: 3054, column: 16, scope: !1605)
!1640 = !DILocation(line: 3054, column: 10, scope: !1605)
!1641 = !DILocation(line: 3054, column: 8, scope: !1605)
!1642 = !DILocation(line: 3055, column: 10, scope: !1643)
!1643 = distinct !DILexicalBlock(scope: !1605, file: !1, line: 3055, column: 10)
!1644 = !DILocation(line: 3055, column: 12, scope: !1643)
!1645 = !DILocation(line: 3055, column: 10, scope: !1605)
!1646 = !DILocation(line: 3056, column: 34, scope: !1643)
!1647 = !DILocation(line: 3056, column: 38, scope: !1643)
!1648 = !DILocation(line: 3056, column: 32, scope: !1643)
!1649 = !DILocation(line: 3056, column: 7, scope: !1643)
!1650 = !DILocation(line: 3056, column: 10, scope: !1643)
!1651 = !DILocation(line: 3056, column: 24, scope: !1643)
!1652 = !DILocation(line: 3058, column: 26, scope: !1643)
!1653 = !DILocation(line: 3058, column: 30, scope: !1643)
!1654 = !DILocation(line: 3058, column: 39, scope: !1643)
!1655 = !DILocation(line: 3058, column: 37, scope: !1643)
!1656 = !DILocation(line: 3058, column: 7, scope: !1643)
!1657 = !DILocation(line: 3058, column: 10, scope: !1643)
!1658 = !DILocation(line: 3058, column: 24, scope: !1643)
!1659 = !DILocation(line: 3059, column: 6, scope: !1605)
!1660 = !DILocation(line: 3062, column: 30, scope: !1605)
!1661 = !DILocation(line: 3062, column: 33, scope: !1605)
!1662 = !DILocation(line: 3062, column: 39, scope: !1605)
!1663 = !DILocation(line: 3062, column: 42, scope: !1605)
!1664 = !DILocation(line: 3062, column: 11, scope: !1605)
!1665 = !DILocation(line: 3062, column: 9, scope: !1605)
!1666 = !DILocation(line: 3063, column: 30, scope: !1605)
!1667 = !DILocation(line: 3063, column: 33, scope: !1605)
!1668 = !DILocation(line: 3063, column: 36, scope: !1605)
!1669 = !DILocation(line: 3063, column: 11, scope: !1605)
!1670 = !DILocation(line: 3063, column: 9, scope: !1605)
!1671 = !DILocation(line: 3064, column: 28, scope: !1605)
!1672 = !DILocation(line: 3064, column: 32, scope: !1605)
!1673 = !DILocation(line: 3064, column: 36, scope: !1605)
!1674 = !DILocation(line: 3064, column: 39, scope: !1605)
!1675 = !DILocation(line: 3064, column: 43, scope: !1605)
!1676 = !DILocation(line: 3064, column: 47, scope: !1605)
!1677 = !DILocation(line: 3064, column: 15, scope: !1605)
!1678 = !DILocation(line: 3064, column: 10, scope: !1605)
!1679 = !DILocation(line: 3064, column: 8, scope: !1605)
!1680 = !DILocation(line: 3065, column: 45, scope: !1605)
!1681 = !DILocation(line: 3065, column: 48, scope: !1605)
!1682 = !DILocation(line: 3065, column: 54, scope: !1605)
!1683 = !DILocation(line: 3065, column: 25, scope: !1605)
!1684 = !DILocation(line: 3065, column: 59, scope: !1605)
!1685 = !DILocation(line: 3065, column: 63, scope: !1605)
!1686 = !DILocation(line: 3065, column: 57, scope: !1605)
!1687 = !DILocation(line: 3065, column: 72, scope: !1605)
!1688 = !DILocation(line: 3065, column: 70, scope: !1605)
!1689 = !DILocation(line: 3065, column: 74, scope: !1605)
!1690 = !DILocation(line: 3065, column: 6, scope: !1605)
!1691 = !DILocation(line: 3065, column: 9, scope: !1605)
!1692 = !DILocation(line: 3065, column: 23, scope: !1605)
!1693 = !DILocation(line: 3066, column: 30, scope: !1605)
!1694 = !DILocation(line: 3066, column: 33, scope: !1605)
!1695 = !DILocation(line: 3066, column: 36, scope: !1605)
!1696 = !DILocation(line: 3066, column: 11, scope: !1605)
!1697 = !DILocation(line: 3066, column: 9, scope: !1605)
!1698 = !DILocation(line: 3067, column: 30, scope: !1605)
!1699 = !DILocation(line: 3067, column: 33, scope: !1605)
!1700 = !DILocation(line: 3067, column: 39, scope: !1605)
!1701 = !DILocation(line: 3067, column: 42, scope: !1605)
!1702 = !DILocation(line: 3067, column: 11, scope: !1605)
!1703 = !DILocation(line: 3067, column: 9, scope: !1605)
!1704 = !DILocation(line: 3068, column: 28, scope: !1605)
!1705 = !DILocation(line: 3068, column: 32, scope: !1605)
!1706 = !DILocation(line: 3068, column: 36, scope: !1605)
!1707 = !DILocation(line: 3068, column: 39, scope: !1605)
!1708 = !DILocation(line: 3068, column: 43, scope: !1605)
!1709 = !DILocation(line: 3068, column: 47, scope: !1605)
!1710 = !DILocation(line: 3068, column: 15, scope: !1605)
!1711 = !DILocation(line: 3068, column: 10, scope: !1605)
!1712 = !DILocation(line: 3068, column: 8, scope: !1605)
!1713 = !DILocation(line: 3069, column: 45, scope: !1605)
!1714 = !DILocation(line: 3069, column: 48, scope: !1605)
!1715 = !DILocation(line: 3069, column: 54, scope: !1605)
!1716 = !DILocation(line: 3069, column: 25, scope: !1605)
!1717 = !DILocation(line: 3069, column: 59, scope: !1605)
!1718 = !DILocation(line: 3069, column: 63, scope: !1605)
!1719 = !DILocation(line: 3069, column: 57, scope: !1605)
!1720 = !DILocation(line: 3069, column: 72, scope: !1605)
!1721 = !DILocation(line: 3069, column: 70, scope: !1605)
!1722 = !DILocation(line: 3069, column: 74, scope: !1605)
!1723 = !DILocation(line: 3069, column: 6, scope: !1605)
!1724 = !DILocation(line: 3069, column: 9, scope: !1605)
!1725 = !DILocation(line: 3069, column: 23, scope: !1605)
!1726 = !DILocation(line: 3070, column: 6, scope: !1605)
!1727 = !DILocation(line: 3073, column: 25, scope: !1605)
!1728 = !DILocation(line: 3073, column: 29, scope: !1605)
!1729 = !DILocation(line: 3073, column: 6, scope: !1605)
!1730 = !DILocation(line: 3073, column: 9, scope: !1605)
!1731 = !DILocation(line: 3073, column: 23, scope: !1605)
!1732 = !DILocation(line: 3074, column: 6, scope: !1605)
!1733 = !DILocation(line: 3076, column: 8, scope: !1734)
!1734 = distinct !DILexicalBlock(scope: !1601, file: !1, line: 3076, column: 8)
!1735 = !DILocation(line: 3076, column: 12, scope: !1734)
!1736 = !DILocation(line: 3076, column: 24, scope: !1734)
!1737 = !DILocation(line: 3076, column: 8, scope: !1601)
!1738 = !DILocation(line: 3077, column: 24, scope: !1734)
!1739 = !DILocation(line: 3077, column: 27, scope: !1734)
!1740 = !DILocation(line: 3077, column: 5, scope: !1734)
!1741 = !DILocation(line: 3077, column: 8, scope: !1734)
!1742 = !DILocation(line: 3077, column: 22, scope: !1734)
!1743 = !DILocation(line: 3078, column: 8, scope: !1744)
!1744 = distinct !DILexicalBlock(scope: !1601, file: !1, line: 3078, column: 8)
!1745 = !DILocation(line: 3078, column: 12, scope: !1744)
!1746 = !DILocation(line: 3078, column: 8, scope: !1601)
!1747 = !DILocation(line: 3079, column: 38, scope: !1748)
!1748 = distinct !DILexicalBlock(scope: !1744, file: !1, line: 3078, column: 25)
!1749 = !DILocation(line: 3079, column: 42, scope: !1748)
!1750 = !DILocation(line: 3079, column: 49, scope: !1748)
!1751 = !DILocation(line: 3079, column: 52, scope: !1748)
!1752 = !DILocation(line: 3079, column: 14, scope: !1748)
!1753 = !DILocation(line: 3079, column: 12, scope: !1748)
!1754 = !DILocation(line: 3080, column: 25, scope: !1748)
!1755 = !DILocation(line: 3080, column: 5, scope: !1748)
!1756 = !DILocation(line: 3080, column: 8, scope: !1748)
!1757 = !DILocation(line: 3080, column: 22, scope: !1748)
!1758 = !DILocation(line: 3081, column: 25, scope: !1748)
!1759 = !DILocation(line: 3081, column: 5, scope: !1748)
!1760 = !DILocation(line: 3081, column: 8, scope: !1748)
!1761 = !DILocation(line: 3081, column: 22, scope: !1748)
!1762 = !DILocation(line: 3082, column: 4, scope: !1748)
!1763 = !DILocation(line: 3083, column: 3, scope: !1601)
!1764 = !DILocation(line: 3085, column: 23, scope: !1765)
!1765 = distinct !DILexicalBlock(scope: !1597, file: !1, line: 3084, column: 8)
!1766 = !DILocation(line: 3085, column: 26, scope: !1765)
!1767 = !DILocation(line: 3085, column: 40, scope: !1765)
!1768 = !DILocation(line: 3085, column: 4, scope: !1765)
!1769 = !DILocation(line: 3085, column: 7, scope: !1765)
!1770 = !DILocation(line: 3085, column: 21, scope: !1765)
!1771 = !DILocation(line: 3087, column: 17, scope: !1576)
!1772 = !DILocation(line: 3087, column: 20, scope: !1576)
!1773 = !DILocation(line: 3087, column: 3, scope: !1576)
!1774 = !DILocation(line: 3087, column: 6, scope: !1576)
!1775 = !DILocation(line: 3087, column: 15, scope: !1576)
!1776 = !DILocation(line: 3088, column: 17, scope: !1576)
!1777 = !DILocation(line: 3088, column: 20, scope: !1576)
!1778 = !DILocation(line: 3088, column: 3, scope: !1576)
!1779 = !DILocation(line: 3088, column: 6, scope: !1576)
!1780 = !DILocation(line: 3088, column: 15, scope: !1576)
!1781 = !DILocation(line: 3090, column: 7, scope: !1782)
!1782 = distinct !DILexicalBlock(scope: !1576, file: !1, line: 3090, column: 7)
!1783 = !DILocation(line: 3090, column: 10, scope: !1782)
!1784 = !DILocation(line: 3090, column: 16, scope: !1782)
!1785 = !DILocation(line: 3090, column: 19, scope: !1782)
!1786 = !DILocation(line: 3090, column: 22, scope: !1782)
!1787 = !DILocation(line: 3090, column: 7, scope: !1576)
!1788 = !DILocation(line: 3091, column: 43, scope: !1782)
!1789 = !DILocation(line: 3091, column: 47, scope: !1782)
!1790 = !DILocation(line: 3091, column: 50, scope: !1782)
!1791 = !DILocation(line: 3091, column: 53, scope: !1782)
!1792 = !DILocation(line: 3091, column: 56, scope: !1782)
!1793 = !DILocation(line: 3091, column: 63, scope: !1782)
!1794 = !DILocation(line: 3091, column: 66, scope: !1782)
!1795 = !DILocation(line: 3091, column: 18, scope: !1782)
!1796 = !DILocation(line: 3091, column: 17, scope: !1782)
!1797 = !DILocation(line: 3091, column: 4, scope: !1782)
!1798 = !DILocation(line: 3091, column: 7, scope: !1782)
!1799 = !DILocation(line: 3091, column: 15, scope: !1782)
!1800 = !DILocation(line: 3093, column: 4, scope: !1782)
!1801 = !DILocation(line: 3093, column: 7, scope: !1782)
!1802 = !DILocation(line: 3093, column: 15, scope: !1782)
!1803 = !DILocation(line: 3094, column: 2, scope: !1576)
!1804 = !DILocation(line: 3032, column: 40, scope: !1571)
!1805 = !DILocation(line: 3032, column: 45, scope: !1571)
!1806 = !DILocation(line: 3032, column: 2, scope: !1571)
!1807 = distinct !{!1807, !1574, !1808}
!1808 = !DILocation(line: 3094, column: 2, scope: !1565)
!1809 = !DILocation(line: 3096, column: 6, scope: !1810)
!1810 = distinct !DILexicalBlock(scope: !1039, file: !1, line: 3096, column: 6)
!1811 = !DILocation(line: 3096, column: 6, scope: !1039)
!1812 = !DILocation(line: 3097, column: 5, scope: !1813)
!1813 = distinct !DILexicalBlock(scope: !1810, file: !1, line: 3096, column: 13)
!1814 = !DILocation(line: 3098, column: 3, scope: !1815)
!1815 = distinct !DILexicalBlock(scope: !1813, file: !1, line: 3098, column: 3)
!1816 = !DILocation(line: 3098, column: 3, scope: !1817)
!1817 = distinct !DILexicalBlock(scope: !1815, file: !1, line: 3098, column: 3)
!1818 = !DILocation(line: 3099, column: 24, scope: !1819)
!1819 = distinct !DILexicalBlock(scope: !1820, file: !1, line: 3099, column: 8)
!1820 = distinct !DILexicalBlock(scope: !1817, file: !1, line: 3098, column: 50)
!1821 = !DILocation(line: 3099, column: 8, scope: !1819)
!1822 = !DILocation(line: 3099, column: 8, scope: !1820)
!1823 = !DILocation(line: 3101, column: 27, scope: !1824)
!1824 = distinct !DILexicalBlock(scope: !1819, file: !1, line: 3099, column: 30)
!1825 = !DILocation(line: 3101, column: 5, scope: !1824)
!1826 = !DILocation(line: 3101, column: 9, scope: !1824)
!1827 = !DILocation(line: 3101, column: 21, scope: !1824)
!1828 = !DILocation(line: 3101, column: 25, scope: !1824)
!1829 = !DILocation(line: 3102, column: 4, scope: !1824)
!1830 = !DILocation(line: 3103, column: 3, scope: !1820)
!1831 = distinct !{!1831, !1814, !1832}
!1832 = !DILocation(line: 3103, column: 3, scope: !1815)
!1833 = !DILocation(line: 3105, column: 2, scope: !1813)
!1834 = !DILocation(line: 3107, column: 9, scope: !1039)
!1835 = !DILocation(line: 3107, column: 2, scope: !1039)
!1836 = !DILocation(line: 3108, column: 1, scope: !1039)
!1837 = distinct !DISubprogram(name: "build_boundary", scope: !1, file: !1, line: 1401, type: !1838, scopeLine: 1402, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!1838 = !DISubroutineType(types: !1839)
!1839 = !{null, !801, !283, !152}
!1840 = !DILocalVariable(name: "bp", arg: 1, scope: !1837, file: !1, line: 1401, type: !801)
!1841 = !DILocation(line: 1401, column: 41, scope: !1837)
!1842 = !DILocalVariable(name: "bv", arg: 2, scope: !1837, file: !1, line: 1401, type: !283)
!1843 = !DILocation(line: 1401, column: 54, scope: !1837)
!1844 = !DILocalVariable(name: "construct", arg: 3, scope: !1837, file: !1, line: 1401, type: !152)
!1845 = !DILocation(line: 1401, column: 63, scope: !1837)
!1846 = !DILocalVariable(name: "mem_arena", scope: !1837, file: !1, line: 1403, type: !601)
!1847 = !DILocation(line: 1403, column: 12, scope: !1837)
!1848 = !DILocation(line: 1403, column: 24, scope: !1837)
!1849 = !DILocation(line: 1403, column: 28, scope: !1837)
!1850 = !DILocalVariable(name: "efirst", scope: !1837, file: !1, line: 1404, type: !130)
!1851 = !DILocation(line: 1404, column: 12, scope: !1837)
!1852 = !DILocalVariable(name: "e", scope: !1837, file: !1, line: 1404, type: !130)
!1853 = !DILocation(line: 1404, column: 21, scope: !1837)
!1854 = !DILocalVariable(name: "eother", scope: !1837, file: !1, line: 1404, type: !130)
!1855 = !DILocation(line: 1404, column: 25, scope: !1837)
!1856 = !DILocalVariable(name: "v", scope: !1837, file: !1, line: 1405, type: !121)
!1857 = !DILocation(line: 1405, column: 13, scope: !1837)
!1858 = !DILocalVariable(name: "bvother", scope: !1837, file: !1, line: 1406, type: !283)
!1859 = !DILocation(line: 1406, column: 11, scope: !1837)
!1860 = !DILocalVariable(name: "vm", scope: !1837, file: !1, line: 1407, type: !298)
!1861 = !DILocation(line: 1407, column: 9, scope: !1837)
!1862 = !DILocalVariable(name: "co", scope: !1837, file: !1, line: 1408, type: !75)
!1863 = !DILocation(line: 1408, column: 8, scope: !1837)
!1864 = !DILocalVariable(name: "no", scope: !1837, file: !1, line: 1409, type: !1865)
!1865 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !459, size: 64)
!1866 = !DILocation(line: 1409, column: 15, scope: !1837)
!1867 = !DILocalVariable(name: "lastd", scope: !1837, file: !1, line: 1410, type: !76)
!1868 = !DILocation(line: 1410, column: 8, scope: !1837)
!1869 = !DILocation(line: 1412, column: 7, scope: !1837)
!1870 = !DILocation(line: 1412, column: 11, scope: !1837)
!1871 = !DILocation(line: 1412, column: 5, scope: !1837)
!1872 = !DILocation(line: 1414, column: 6, scope: !1873)
!1873 = distinct !DILexicalBlock(scope: !1837, file: !1, line: 1414, column: 6)
!1874 = !DILocation(line: 1414, column: 10, scope: !1873)
!1875 = !DILocation(line: 1414, column: 6, scope: !1837)
!1876 = !DILocation(line: 1415, column: 17, scope: !1877)
!1877 = distinct !DILexicalBlock(scope: !1873, file: !1, line: 1414, column: 23)
!1878 = !DILocation(line: 1415, column: 21, scope: !1877)
!1879 = !DILocation(line: 1415, column: 14, scope: !1877)
!1880 = !DILocation(line: 1415, column: 5, scope: !1877)
!1881 = !DILocation(line: 1416, column: 2, scope: !1877)
!1882 = !DILocation(line: 1418, column: 25, scope: !1883)
!1883 = distinct !DILexicalBlock(scope: !1873, file: !1, line: 1417, column: 7)
!1884 = !DILocation(line: 1418, column: 16, scope: !1883)
!1885 = !DILocation(line: 1418, column: 14, scope: !1883)
!1886 = !DILocation(line: 1418, column: 5, scope: !1883)
!1887 = !DILocation(line: 1419, column: 3, scope: !1883)
!1888 = !DILocation(line: 1420, column: 38, scope: !1889)
!1889 = distinct !DILexicalBlock(scope: !1883, file: !1, line: 1419, column: 6)
!1890 = !DILocation(line: 1420, column: 42, scope: !1889)
!1891 = !DILocation(line: 1420, column: 13, scope: !1889)
!1892 = !DILocation(line: 1420, column: 11, scope: !1889)
!1893 = !DILocation(line: 1421, column: 8, scope: !1894)
!1894 = distinct !DILexicalBlock(scope: !1889, file: !1, line: 1421, column: 8)
!1895 = !DILocation(line: 1421, column: 15, scope: !1894)
!1896 = !DILocation(line: 1421, column: 18, scope: !1894)
!1897 = !DILocation(line: 1421, column: 27, scope: !1894)
!1898 = !DILocation(line: 1421, column: 35, scope: !1894)
!1899 = !DILocation(line: 1421, column: 38, scope: !1894)
!1900 = !DILocation(line: 1421, column: 42, scope: !1894)
!1901 = !DILocation(line: 1421, column: 54, scope: !1894)
!1902 = !DILocation(line: 1421, column: 8, scope: !1889)
!1903 = !DILocation(line: 1423, column: 19, scope: !1904)
!1904 = distinct !DILexicalBlock(scope: !1894, file: !1, line: 1421, column: 76)
!1905 = !DILocation(line: 1423, column: 27, scope: !1904)
!1906 = !DILocation(line: 1423, column: 5, scope: !1904)
!1907 = !DILocation(line: 1423, column: 8, scope: !1904)
!1908 = !DILocation(line: 1423, column: 17, scope: !1904)
!1909 = !DILocation(line: 1424, column: 19, scope: !1904)
!1910 = !DILocation(line: 1424, column: 27, scope: !1904)
!1911 = !DILocation(line: 1424, column: 5, scope: !1904)
!1912 = !DILocation(line: 1424, column: 8, scope: !1904)
!1913 = !DILocation(line: 1424, column: 17, scope: !1904)
!1914 = !DILocation(line: 1425, column: 4, scope: !1904)
!1915 = !DILocation(line: 1428, column: 19, scope: !1916)
!1916 = distinct !DILexicalBlock(scope: !1894, file: !1, line: 1426, column: 9)
!1917 = !DILocation(line: 1428, column: 22, scope: !1916)
!1918 = !DILocation(line: 1428, column: 5, scope: !1916)
!1919 = !DILocation(line: 1428, column: 8, scope: !1916)
!1920 = !DILocation(line: 1428, column: 17, scope: !1916)
!1921 = !DILocation(line: 1429, column: 19, scope: !1916)
!1922 = !DILocation(line: 1429, column: 22, scope: !1916)
!1923 = !DILocation(line: 1429, column: 5, scope: !1916)
!1924 = !DILocation(line: 1429, column: 8, scope: !1916)
!1925 = !DILocation(line: 1429, column: 17, scope: !1916)
!1926 = !DILocation(line: 1431, column: 3, scope: !1889)
!1927 = !DILocation(line: 1431, column: 17, scope: !1883)
!1928 = !DILocation(line: 1431, column: 20, scope: !1883)
!1929 = !DILocation(line: 1431, column: 15, scope: !1883)
!1930 = !DILocation(line: 1431, column: 29, scope: !1883)
!1931 = !DILocation(line: 1431, column: 26, scope: !1883)
!1932 = distinct !{!1932, !1887, !1933}
!1933 = !DILocation(line: 1431, column: 35, scope: !1883)
!1934 = !DILocation(line: 1432, column: 7, scope: !1883)
!1935 = !DILocation(line: 1432, column: 5, scope: !1883)
!1936 = !DILocation(line: 1437, column: 6, scope: !1937)
!1937 = distinct !DILexicalBlock(scope: !1837, file: !1, line: 1437, column: 6)
!1938 = !DILocation(line: 1437, column: 10, scope: !1937)
!1939 = !DILocation(line: 1437, column: 20, scope: !1937)
!1940 = !DILocation(line: 1437, column: 25, scope: !1937)
!1941 = !DILocation(line: 1437, column: 28, scope: !1937)
!1942 = !DILocation(line: 1437, column: 32, scope: !1937)
!1943 = !DILocation(line: 1437, column: 41, scope: !1937)
!1944 = !DILocation(line: 1437, column: 6, scope: !1837)
!1945 = !DILocation(line: 1439, column: 8, scope: !1946)
!1946 = distinct !DILexicalBlock(scope: !1937, file: !1, line: 1437, column: 47)
!1947 = !DILocation(line: 1439, column: 11, scope: !1946)
!1948 = !DILocation(line: 1439, column: 19, scope: !1946)
!1949 = !DILocation(line: 1439, column: 22, scope: !1946)
!1950 = !DILocation(line: 1439, column: 29, scope: !1946)
!1951 = !DILocation(line: 1439, column: 35, scope: !1946)
!1952 = !DILocation(line: 1439, column: 38, scope: !1946)
!1953 = !DILocation(line: 1439, column: 46, scope: !1946)
!1954 = !DILocation(line: 1439, column: 49, scope: !1946)
!1955 = !DILocation(line: 1439, column: 56, scope: !1946)
!1956 = !DILocation(line: 1439, column: 6, scope: !1946)
!1957 = !DILocation(line: 1440, column: 19, scope: !1946)
!1958 = !DILocation(line: 1440, column: 22, scope: !1946)
!1959 = !DILocation(line: 1440, column: 32, scope: !1946)
!1960 = !DILocation(line: 1440, column: 3, scope: !1946)
!1961 = !DILocation(line: 1441, column: 7, scope: !1962)
!1962 = distinct !DILexicalBlock(scope: !1946, file: !1, line: 1441, column: 7)
!1963 = !DILocation(line: 1441, column: 7, scope: !1946)
!1964 = !DILocation(line: 1442, column: 27, scope: !1965)
!1965 = distinct !DILexicalBlock(scope: !1962, file: !1, line: 1441, column: 18)
!1966 = !DILocation(line: 1442, column: 38, scope: !1965)
!1967 = !DILocation(line: 1442, column: 42, scope: !1965)
!1968 = !DILocation(line: 1442, column: 8, scope: !1965)
!1969 = !DILocation(line: 1442, column: 6, scope: !1965)
!1970 = !DILocation(line: 1443, column: 37, scope: !1965)
!1971 = !DILocation(line: 1443, column: 27, scope: !1965)
!1972 = !DILocation(line: 1443, column: 30, scope: !1965)
!1973 = !DILocation(line: 1443, column: 35, scope: !1965)
!1974 = !DILocation(line: 1443, column: 16, scope: !1965)
!1975 = !DILocation(line: 1443, column: 19, scope: !1965)
!1976 = !DILocation(line: 1443, column: 25, scope: !1965)
!1977 = !DILocation(line: 1443, column: 4, scope: !1965)
!1978 = !DILocation(line: 1443, column: 7, scope: !1965)
!1979 = !DILocation(line: 1443, column: 14, scope: !1965)
!1980 = !DILocation(line: 1444, column: 15, scope: !1965)
!1981 = !DILocation(line: 1444, column: 4, scope: !1965)
!1982 = !DILocation(line: 1444, column: 7, scope: !1965)
!1983 = !DILocation(line: 1444, column: 13, scope: !1965)
!1984 = !DILocation(line: 1445, column: 3, scope: !1965)
!1985 = !DILocation(line: 1447, column: 22, scope: !1986)
!1986 = distinct !DILexicalBlock(scope: !1962, file: !1, line: 1446, column: 8)
!1987 = !DILocation(line: 1447, column: 25, scope: !1986)
!1988 = !DILocation(line: 1447, column: 32, scope: !1986)
!1989 = !DILocation(line: 1447, column: 4, scope: !1986)
!1990 = !DILocation(line: 1449, column: 8, scope: !1946)
!1991 = !DILocation(line: 1449, column: 11, scope: !1946)
!1992 = !DILocation(line: 1449, column: 19, scope: !1946)
!1993 = !DILocation(line: 1449, column: 22, scope: !1946)
!1994 = !DILocation(line: 1449, column: 29, scope: !1946)
!1995 = !DILocation(line: 1449, column: 35, scope: !1946)
!1996 = !DILocation(line: 1449, column: 38, scope: !1946)
!1997 = !DILocation(line: 1449, column: 46, scope: !1946)
!1998 = !DILocation(line: 1449, column: 49, scope: !1946)
!1999 = !DILocation(line: 1449, column: 56, scope: !1946)
!2000 = !DILocation(line: 1449, column: 6, scope: !1946)
!2001 = !DILocation(line: 1450, column: 19, scope: !1946)
!2002 = !DILocation(line: 1450, column: 22, scope: !1946)
!2003 = !DILocation(line: 1450, column: 33, scope: !1946)
!2004 = !DILocation(line: 1450, column: 3, scope: !1946)
!2005 = !DILocation(line: 1451, column: 7, scope: !2006)
!2006 = distinct !DILexicalBlock(scope: !1946, file: !1, line: 1451, column: 7)
!2007 = !DILocation(line: 1451, column: 7, scope: !1946)
!2008 = !DILocation(line: 1452, column: 27, scope: !2009)
!2009 = distinct !DILexicalBlock(scope: !2006, file: !1, line: 1451, column: 18)
!2010 = !DILocation(line: 1452, column: 38, scope: !2009)
!2011 = !DILocation(line: 1452, column: 42, scope: !2009)
!2012 = !DILocation(line: 1452, column: 8, scope: !2009)
!2013 = !DILocation(line: 1452, column: 6, scope: !2009)
!2014 = !DILocation(line: 1453, column: 27, scope: !2009)
!2015 = !DILocation(line: 1453, column: 16, scope: !2009)
!2016 = !DILocation(line: 1453, column: 19, scope: !2009)
!2017 = !DILocation(line: 1453, column: 25, scope: !2009)
!2018 = !DILocation(line: 1453, column: 4, scope: !2009)
!2019 = !DILocation(line: 1453, column: 7, scope: !2009)
!2020 = !DILocation(line: 1453, column: 14, scope: !2009)
!2021 = !DILocation(line: 1454, column: 16, scope: !2009)
!2022 = !DILocation(line: 1454, column: 4, scope: !2009)
!2023 = !DILocation(line: 1454, column: 7, scope: !2009)
!2024 = !DILocation(line: 1454, column: 14, scope: !2009)
!2025 = !DILocation(line: 1455, column: 3, scope: !2009)
!2026 = !DILocation(line: 1457, column: 22, scope: !2027)
!2027 = distinct !DILexicalBlock(scope: !2006, file: !1, line: 1456, column: 8)
!2028 = !DILocation(line: 1457, column: 25, scope: !2027)
!2029 = !DILocation(line: 1457, column: 33, scope: !2027)
!2030 = !DILocation(line: 1457, column: 4, scope: !2027)
!2031 = !DILocation(line: 1460, column: 14, scope: !1946)
!2032 = !DILocation(line: 1460, column: 17, scope: !1946)
!2033 = !DILocation(line: 1460, column: 23, scope: !1946)
!2034 = !DILocation(line: 1460, column: 27, scope: !1946)
!2035 = !DILocation(line: 1460, column: 30, scope: !1946)
!2036 = !DILocation(line: 1460, column: 33, scope: !1946)
!2037 = !DILocation(line: 1460, column: 43, scope: !1946)
!2038 = !DILocation(line: 1460, column: 3, scope: !1946)
!2039 = !DILocation(line: 1461, column: 7, scope: !2040)
!2040 = distinct !DILexicalBlock(scope: !1946, file: !1, line: 1461, column: 7)
!2041 = !DILocation(line: 1461, column: 7, scope: !1946)
!2042 = !DILocation(line: 1462, column: 27, scope: !2043)
!2043 = distinct !DILexicalBlock(scope: !2040, file: !1, line: 1461, column: 18)
!2044 = !DILocation(line: 1462, column: 38, scope: !2043)
!2045 = !DILocation(line: 1462, column: 42, scope: !2043)
!2046 = !DILocation(line: 1462, column: 8, scope: !2043)
!2047 = !DILocation(line: 1462, column: 6, scope: !2043)
!2048 = !DILocation(line: 1463, column: 27, scope: !2043)
!2049 = !DILocation(line: 1463, column: 30, scope: !2043)
!2050 = !DILocation(line: 1463, column: 16, scope: !2043)
!2051 = !DILocation(line: 1463, column: 19, scope: !2043)
!2052 = !DILocation(line: 1463, column: 25, scope: !2043)
!2053 = !DILocation(line: 1463, column: 4, scope: !2043)
!2054 = !DILocation(line: 1463, column: 7, scope: !2043)
!2055 = !DILocation(line: 1463, column: 14, scope: !2043)
!2056 = !DILocation(line: 1464, column: 39, scope: !2043)
!2057 = !DILocation(line: 1464, column: 21, scope: !2043)
!2058 = !DILocation(line: 1464, column: 24, scope: !2043)
!2059 = !DILocation(line: 1464, column: 30, scope: !2043)
!2060 = !DILocation(line: 1464, column: 37, scope: !2043)
!2061 = !DILocation(line: 1464, column: 4, scope: !2043)
!2062 = !DILocation(line: 1464, column: 7, scope: !2043)
!2063 = !DILocation(line: 1464, column: 13, scope: !2043)
!2064 = !DILocation(line: 1464, column: 19, scope: !2043)
!2065 = !DILocation(line: 1466, column: 4, scope: !2043)
!2066 = !DILocation(line: 1466, column: 8, scope: !2043)
!2067 = !DILocation(line: 1466, column: 18, scope: !2043)
!2068 = !DILocation(line: 1467, column: 25, scope: !2043)
!2069 = !DILocation(line: 1467, column: 4, scope: !2043)
!2070 = !DILocation(line: 1468, column: 3, scope: !2043)
!2071 = !DILocation(line: 1470, column: 22, scope: !2072)
!2072 = distinct !DILexicalBlock(scope: !2040, file: !1, line: 1469, column: 8)
!2073 = !DILocation(line: 1470, column: 25, scope: !2072)
!2074 = !DILocation(line: 1470, column: 31, scope: !2072)
!2075 = !DILocation(line: 1470, column: 38, scope: !2072)
!2076 = !DILocation(line: 1470, column: 4, scope: !2072)
!2077 = !DILocation(line: 1472, column: 22, scope: !1946)
!2078 = !DILocation(line: 1472, column: 26, scope: !1946)
!2079 = !DILocation(line: 1472, column: 30, scope: !1946)
!2080 = !DILocation(line: 1472, column: 3, scope: !1946)
!2081 = !DILocation(line: 1473, column: 21, scope: !1946)
!2082 = !DILocation(line: 1473, column: 25, scope: !1946)
!2083 = !DILocation(line: 1473, column: 29, scope: !1946)
!2084 = !DILocation(line: 1473, column: 3, scope: !1946)
!2085 = !DILocation(line: 1474, column: 3, scope: !1946)
!2086 = !DILocation(line: 1477, column: 10, scope: !1837)
!2087 = !DILocation(line: 1477, column: 14, scope: !1837)
!2088 = !DILocation(line: 1477, column: 28, scope: !1837)
!2089 = !DILocation(line: 1477, column: 32, scope: !1837)
!2090 = !DILocation(line: 1477, column: 41, scope: !1837)
!2091 = !DILocation(line: 1477, column: 44, scope: !1837)
!2092 = !DILocation(line: 1477, column: 8, scope: !1837)
!2093 = !DILocation(line: 1478, column: 2, scope: !1837)
!2094 = !DILocation(line: 1479, column: 7, scope: !2095)
!2095 = distinct !DILexicalBlock(scope: !2096, file: !1, line: 1479, column: 7)
!2096 = distinct !DILexicalBlock(scope: !1837, file: !1, line: 1478, column: 5)
!2097 = !DILocation(line: 1479, column: 10, scope: !2095)
!2098 = !DILocation(line: 1479, column: 7, scope: !2096)
!2099 = !DILocation(line: 1481, column: 8, scope: !2100)
!2100 = distinct !DILexicalBlock(scope: !2101, file: !1, line: 1481, column: 8)
!2101 = distinct !DILexicalBlock(scope: !2095, file: !1, line: 1479, column: 18)
!2102 = !DILocation(line: 1481, column: 11, scope: !2100)
!2103 = !DILocation(line: 1481, column: 17, scope: !2100)
!2104 = !DILocation(line: 1481, column: 8, scope: !2101)
!2105 = !DILocation(line: 1483, column: 17, scope: !2106)
!2106 = distinct !DILexicalBlock(scope: !2100, file: !1, line: 1481, column: 25)
!2107 = !DILocation(line: 1483, column: 20, scope: !2106)
!2108 = !DILocation(line: 1483, column: 26, scope: !2106)
!2109 = !DILocation(line: 1483, column: 29, scope: !2106)
!2110 = !DILocation(line: 1483, column: 33, scope: !2106)
!2111 = !DILocation(line: 1483, column: 36, scope: !2106)
!2112 = !DILocation(line: 1483, column: 39, scope: !2106)
!2113 = !DILocation(line: 1483, column: 46, scope: !2106)
!2114 = !DILocation(line: 1483, column: 5, scope: !2106)
!2115 = !DILocation(line: 1484, column: 9, scope: !2116)
!2116 = distinct !DILexicalBlock(scope: !2106, file: !1, line: 1484, column: 9)
!2117 = !DILocation(line: 1484, column: 9, scope: !2106)
!2118 = !DILocation(line: 1485, column: 29, scope: !2119)
!2119 = distinct !DILexicalBlock(scope: !2116, file: !1, line: 1484, column: 20)
!2120 = !DILocation(line: 1485, column: 40, scope: !2119)
!2121 = !DILocation(line: 1485, column: 44, scope: !2119)
!2122 = !DILocation(line: 1485, column: 10, scope: !2119)
!2123 = !DILocation(line: 1485, column: 8, scope: !2119)
!2124 = !DILocation(line: 1486, column: 18, scope: !2119)
!2125 = !DILocation(line: 1486, column: 21, scope: !2119)
!2126 = !DILocation(line: 1486, column: 6, scope: !2119)
!2127 = !DILocation(line: 1486, column: 9, scope: !2119)
!2128 = !DILocation(line: 1486, column: 16, scope: !2119)
!2129 = !DILocation(line: 1487, column: 27, scope: !2119)
!2130 = !DILocation(line: 1487, column: 17, scope: !2119)
!2131 = !DILocation(line: 1487, column: 20, scope: !2119)
!2132 = !DILocation(line: 1487, column: 25, scope: !2119)
!2133 = !DILocation(line: 1487, column: 6, scope: !2119)
!2134 = !DILocation(line: 1487, column: 9, scope: !2119)
!2135 = !DILocation(line: 1487, column: 15, scope: !2119)
!2136 = !DILocation(line: 1488, column: 17, scope: !2119)
!2137 = !DILocation(line: 1488, column: 6, scope: !2119)
!2138 = !DILocation(line: 1488, column: 9, scope: !2119)
!2139 = !DILocation(line: 1488, column: 15, scope: !2119)
!2140 = !DILocation(line: 1489, column: 24, scope: !2119)
!2141 = !DILocation(line: 1489, column: 6, scope: !2119)
!2142 = !DILocation(line: 1489, column: 9, scope: !2119)
!2143 = !DILocation(line: 1489, column: 15, scope: !2119)
!2144 = !DILocation(line: 1489, column: 22, scope: !2119)
!2145 = !DILocation(line: 1490, column: 5, scope: !2119)
!2146 = !DILocation(line: 1492, column: 10, scope: !2147)
!2147 = distinct !DILexicalBlock(scope: !2116, file: !1, line: 1491, column: 10)
!2148 = !DILocation(line: 1492, column: 13, scope: !2147)
!2149 = !DILocation(line: 1492, column: 8, scope: !2147)
!2150 = !DILocation(line: 1493, column: 24, scope: !2147)
!2151 = !DILocation(line: 1493, column: 27, scope: !2147)
!2152 = !DILocation(line: 1493, column: 6, scope: !2147)
!2153 = !DILocation(line: 1495, column: 4, scope: !2106)
!2154 = !DILocation(line: 1498, column: 9, scope: !2155)
!2155 = distinct !DILexicalBlock(scope: !2156, file: !1, line: 1498, column: 9)
!2156 = distinct !DILexicalBlock(scope: !2100, file: !1, line: 1496, column: 9)
!2157 = !DILocation(line: 1498, column: 12, scope: !2155)
!2158 = !DILocation(line: 1498, column: 18, scope: !2155)
!2159 = !DILocation(line: 1498, column: 24, scope: !2155)
!2160 = !DILocation(line: 1498, column: 9, scope: !2156)
!2161 = !DILocation(line: 1501, column: 10, scope: !2162)
!2162 = distinct !DILexicalBlock(scope: !2163, file: !1, line: 1501, column: 10)
!2163 = distinct !DILexicalBlock(scope: !2155, file: !1, line: 1498, column: 32)
!2164 = !DILocation(line: 1501, column: 14, scope: !2162)
!2165 = !DILocation(line: 1501, column: 10, scope: !2163)
!2166 = !DILocation(line: 1502, column: 28, scope: !2162)
!2167 = !DILocation(line: 1502, column: 32, scope: !2162)
!2168 = !DILocation(line: 1502, column: 35, scope: !2162)
!2169 = !DILocation(line: 1502, column: 41, scope: !2162)
!2170 = !DILocation(line: 1502, column: 47, scope: !2162)
!2171 = !DILocation(line: 1502, column: 50, scope: !2162)
!2172 = !DILocation(line: 1502, column: 53, scope: !2162)
!2173 = !DILocation(line: 1502, column: 59, scope: !2162)
!2174 = !DILocation(line: 1502, column: 63, scope: !2162)
!2175 = !DILocation(line: 1502, column: 66, scope: !2162)
!2176 = !DILocation(line: 1502, column: 7, scope: !2162)
!2177 = !DILocation(line: 1504, column: 30, scope: !2162)
!2178 = !DILocation(line: 1504, column: 34, scope: !2162)
!2179 = !DILocation(line: 1504, column: 37, scope: !2162)
!2180 = !DILocation(line: 1504, column: 43, scope: !2162)
!2181 = !DILocation(line: 1504, column: 49, scope: !2162)
!2182 = !DILocation(line: 1504, column: 52, scope: !2162)
!2183 = !DILocation(line: 1504, column: 55, scope: !2162)
!2184 = !DILocation(line: 1504, column: 61, scope: !2162)
!2185 = !DILocation(line: 1504, column: 65, scope: !2162)
!2186 = !DILocation(line: 1504, column: 68, scope: !2162)
!2187 = !DILocation(line: 1504, column: 7, scope: !2162)
!2188 = !DILocation(line: 1505, column: 10, scope: !2189)
!2189 = distinct !DILexicalBlock(scope: !2163, file: !1, line: 1505, column: 10)
!2190 = !DILocation(line: 1505, column: 10, scope: !2163)
!2191 = !DILocation(line: 1506, column: 30, scope: !2192)
!2192 = distinct !DILexicalBlock(scope: !2189, file: !1, line: 1505, column: 21)
!2193 = !DILocation(line: 1506, column: 41, scope: !2192)
!2194 = !DILocation(line: 1506, column: 45, scope: !2192)
!2195 = !DILocation(line: 1506, column: 11, scope: !2192)
!2196 = !DILocation(line: 1506, column: 9, scope: !2192)
!2197 = !DILocation(line: 1507, column: 19, scope: !2192)
!2198 = !DILocation(line: 1507, column: 22, scope: !2192)
!2199 = !DILocation(line: 1507, column: 28, scope: !2192)
!2200 = !DILocation(line: 1507, column: 7, scope: !2192)
!2201 = !DILocation(line: 1507, column: 10, scope: !2192)
!2202 = !DILocation(line: 1507, column: 17, scope: !2192)
!2203 = !DILocation(line: 1508, column: 28, scope: !2192)
!2204 = !DILocation(line: 1508, column: 18, scope: !2192)
!2205 = !DILocation(line: 1508, column: 21, scope: !2192)
!2206 = !DILocation(line: 1508, column: 26, scope: !2192)
!2207 = !DILocation(line: 1508, column: 7, scope: !2192)
!2208 = !DILocation(line: 1508, column: 10, scope: !2192)
!2209 = !DILocation(line: 1508, column: 16, scope: !2192)
!2210 = !DILocation(line: 1509, column: 18, scope: !2192)
!2211 = !DILocation(line: 1509, column: 7, scope: !2192)
!2212 = !DILocation(line: 1509, column: 10, scope: !2192)
!2213 = !DILocation(line: 1509, column: 16, scope: !2192)
!2214 = !DILocation(line: 1510, column: 24, scope: !2192)
!2215 = !DILocation(line: 1510, column: 7, scope: !2192)
!2216 = !DILocation(line: 1510, column: 10, scope: !2192)
!2217 = !DILocation(line: 1510, column: 16, scope: !2192)
!2218 = !DILocation(line: 1510, column: 22, scope: !2192)
!2219 = !DILocation(line: 1511, column: 31, scope: !2192)
!2220 = !DILocation(line: 1511, column: 7, scope: !2192)
!2221 = !DILocation(line: 1511, column: 10, scope: !2192)
!2222 = !DILocation(line: 1511, column: 16, scope: !2192)
!2223 = !DILocation(line: 1511, column: 22, scope: !2192)
!2224 = !DILocation(line: 1511, column: 29, scope: !2192)
!2225 = !DILocation(line: 1512, column: 6, scope: !2192)
!2226 = !DILocation(line: 1514, column: 11, scope: !2227)
!2227 = distinct !DILexicalBlock(scope: !2189, file: !1, line: 1513, column: 11)
!2228 = !DILocation(line: 1514, column: 14, scope: !2227)
!2229 = !DILocation(line: 1514, column: 9, scope: !2227)
!2230 = !DILocation(line: 1515, column: 25, scope: !2227)
!2231 = !DILocation(line: 1515, column: 28, scope: !2227)
!2232 = !DILocation(line: 1515, column: 7, scope: !2227)
!2233 = !DILocation(line: 1517, column: 5, scope: !2163)
!2234 = !DILocation(line: 1520, column: 18, scope: !2235)
!2235 = distinct !DILexicalBlock(scope: !2155, file: !1, line: 1518, column: 10)
!2236 = !DILocation(line: 1520, column: 21, scope: !2235)
!2237 = !DILocation(line: 1520, column: 27, scope: !2235)
!2238 = !DILocation(line: 1520, column: 30, scope: !2235)
!2239 = !DILocation(line: 1520, column: 34, scope: !2235)
!2240 = !DILocation(line: 1520, column: 37, scope: !2235)
!2241 = !DILocation(line: 1520, column: 40, scope: !2235)
!2242 = !DILocation(line: 1520, column: 47, scope: !2235)
!2243 = !DILocation(line: 1520, column: 6, scope: !2235)
!2244 = !DILocation(line: 1521, column: 10, scope: !2245)
!2245 = distinct !DILexicalBlock(scope: !2235, file: !1, line: 1521, column: 10)
!2246 = !DILocation(line: 1521, column: 10, scope: !2235)
!2247 = !DILocation(line: 1522, column: 30, scope: !2248)
!2248 = distinct !DILexicalBlock(scope: !2245, file: !1, line: 1521, column: 21)
!2249 = !DILocation(line: 1522, column: 41, scope: !2248)
!2250 = !DILocation(line: 1522, column: 45, scope: !2248)
!2251 = !DILocation(line: 1522, column: 11, scope: !2248)
!2252 = !DILocation(line: 1522, column: 9, scope: !2248)
!2253 = !DILocation(line: 1523, column: 19, scope: !2248)
!2254 = !DILocation(line: 1523, column: 22, scope: !2248)
!2255 = !DILocation(line: 1523, column: 7, scope: !2248)
!2256 = !DILocation(line: 1523, column: 10, scope: !2248)
!2257 = !DILocation(line: 1523, column: 17, scope: !2248)
!2258 = !DILocation(line: 1524, column: 28, scope: !2248)
!2259 = !DILocation(line: 1524, column: 18, scope: !2248)
!2260 = !DILocation(line: 1524, column: 21, scope: !2248)
!2261 = !DILocation(line: 1524, column: 26, scope: !2248)
!2262 = !DILocation(line: 1524, column: 7, scope: !2248)
!2263 = !DILocation(line: 1524, column: 10, scope: !2248)
!2264 = !DILocation(line: 1524, column: 16, scope: !2248)
!2265 = !DILocation(line: 1525, column: 18, scope: !2248)
!2266 = !DILocation(line: 1525, column: 7, scope: !2248)
!2267 = !DILocation(line: 1525, column: 10, scope: !2248)
!2268 = !DILocation(line: 1525, column: 16, scope: !2248)
!2269 = !DILocation(line: 1526, column: 24, scope: !2248)
!2270 = !DILocation(line: 1526, column: 7, scope: !2248)
!2271 = !DILocation(line: 1526, column: 10, scope: !2248)
!2272 = !DILocation(line: 1526, column: 16, scope: !2248)
!2273 = !DILocation(line: 1526, column: 22, scope: !2248)
!2274 = !DILocation(line: 1527, column: 6, scope: !2248)
!2275 = !DILocation(line: 1529, column: 11, scope: !2276)
!2276 = distinct !DILexicalBlock(scope: !2245, file: !1, line: 1528, column: 11)
!2277 = !DILocation(line: 1529, column: 14, scope: !2276)
!2278 = !DILocation(line: 1529, column: 9, scope: !2276)
!2279 = !DILocation(line: 1530, column: 25, scope: !2276)
!2280 = !DILocation(line: 1530, column: 28, scope: !2276)
!2281 = !DILocation(line: 1530, column: 7, scope: !2276)
!2282 = !DILocation(line: 1534, column: 21, scope: !2101)
!2283 = !DILocation(line: 1534, column: 25, scope: !2101)
!2284 = !DILocation(line: 1534, column: 28, scope: !2101)
!2285 = !DILocation(line: 1534, column: 32, scope: !2101)
!2286 = !DILocation(line: 1534, column: 35, scope: !2101)
!2287 = !DILocation(line: 1534, column: 38, scope: !2101)
!2288 = !DILocation(line: 1534, column: 12, scope: !2101)
!2289 = !DILocation(line: 1534, column: 10, scope: !2101)
!2290 = !DILocation(line: 1535, column: 3, scope: !2101)
!2291 = !DILocation(line: 1538, column: 8, scope: !2292)
!2292 = distinct !DILexicalBlock(scope: !2293, file: !1, line: 1538, column: 8)
!2293 = distinct !DILexicalBlock(scope: !2095, file: !1, line: 1536, column: 8)
!2294 = !DILocation(line: 1538, column: 11, scope: !2292)
!2295 = !DILocation(line: 1538, column: 17, scope: !2292)
!2296 = !DILocation(line: 1538, column: 8, scope: !2293)
!2297 = !DILocation(line: 1541, column: 4, scope: !2298)
!2298 = distinct !DILexicalBlock(scope: !2292, file: !1, line: 1538, column: 25)
!2299 = !DILocation(line: 1542, column: 13, scope: !2300)
!2300 = distinct !DILexicalBlock(scope: !2292, file: !1, line: 1542, column: 13)
!2301 = !DILocation(line: 1542, column: 16, scope: !2300)
!2302 = !DILocation(line: 1542, column: 22, scope: !2300)
!2303 = !DILocation(line: 1542, column: 13, scope: !2292)
!2304 = !DILocation(line: 1544, column: 17, scope: !2305)
!2305 = distinct !DILexicalBlock(scope: !2300, file: !1, line: 1542, column: 30)
!2306 = !DILocation(line: 1544, column: 20, scope: !2305)
!2307 = !DILocation(line: 1544, column: 26, scope: !2305)
!2308 = !DILocation(line: 1544, column: 29, scope: !2305)
!2309 = !DILocation(line: 1544, column: 33, scope: !2305)
!2310 = !DILocation(line: 1544, column: 36, scope: !2305)
!2311 = !DILocation(line: 1544, column: 39, scope: !2305)
!2312 = !DILocation(line: 1544, column: 46, scope: !2305)
!2313 = !DILocation(line: 1544, column: 5, scope: !2305)
!2314 = !DILocation(line: 1545, column: 9, scope: !2315)
!2315 = distinct !DILexicalBlock(scope: !2305, file: !1, line: 1545, column: 9)
!2316 = !DILocation(line: 1545, column: 9, scope: !2305)
!2317 = !DILocation(line: 1546, column: 29, scope: !2318)
!2318 = distinct !DILexicalBlock(scope: !2315, file: !1, line: 1545, column: 20)
!2319 = !DILocation(line: 1546, column: 40, scope: !2318)
!2320 = !DILocation(line: 1546, column: 44, scope: !2318)
!2321 = !DILocation(line: 1546, column: 10, scope: !2318)
!2322 = !DILocation(line: 1546, column: 8, scope: !2318)
!2323 = !DILocation(line: 1547, column: 18, scope: !2318)
!2324 = !DILocation(line: 1547, column: 21, scope: !2318)
!2325 = !DILocation(line: 1547, column: 6, scope: !2318)
!2326 = !DILocation(line: 1547, column: 9, scope: !2318)
!2327 = !DILocation(line: 1547, column: 16, scope: !2318)
!2328 = !DILocation(line: 1548, column: 17, scope: !2318)
!2329 = !DILocation(line: 1548, column: 6, scope: !2318)
!2330 = !DILocation(line: 1548, column: 9, scope: !2318)
!2331 = !DILocation(line: 1548, column: 15, scope: !2318)
!2332 = !DILocation(line: 1549, column: 17, scope: !2318)
!2333 = !DILocation(line: 1549, column: 6, scope: !2318)
!2334 = !DILocation(line: 1549, column: 9, scope: !2318)
!2335 = !DILocation(line: 1549, column: 15, scope: !2318)
!2336 = !DILocation(line: 1550, column: 24, scope: !2318)
!2337 = !DILocation(line: 1550, column: 6, scope: !2318)
!2338 = !DILocation(line: 1550, column: 9, scope: !2318)
!2339 = !DILocation(line: 1550, column: 15, scope: !2318)
!2340 = !DILocation(line: 1550, column: 22, scope: !2318)
!2341 = !DILocation(line: 1551, column: 5, scope: !2318)
!2342 = !DILocation(line: 1553, column: 24, scope: !2343)
!2343 = distinct !DILexicalBlock(scope: !2315, file: !1, line: 1552, column: 10)
!2344 = !DILocation(line: 1553, column: 27, scope: !2343)
!2345 = !DILocation(line: 1553, column: 34, scope: !2343)
!2346 = !DILocation(line: 1553, column: 6, scope: !2343)
!2347 = !DILocation(line: 1555, column: 4, scope: !2305)
!2348 = !DILocation(line: 1562, column: 16, scope: !2349)
!2349 = distinct !DILexicalBlock(scope: !2300, file: !1, line: 1556, column: 9)
!2350 = !DILocation(line: 1562, column: 19, scope: !2349)
!2351 = !DILocation(line: 1562, column: 23, scope: !2349)
!2352 = !DILocation(line: 1562, column: 26, scope: !2349)
!2353 = !DILocation(line: 1562, column: 33, scope: !2349)
!2354 = !DILocation(line: 1562, column: 5, scope: !2349)
!2355 = !DILocation(line: 1563, column: 9, scope: !2356)
!2356 = distinct !DILexicalBlock(scope: !2349, file: !1, line: 1563, column: 9)
!2357 = !DILocation(line: 1563, column: 9, scope: !2349)
!2358 = !DILocation(line: 1564, column: 29, scope: !2359)
!2359 = distinct !DILexicalBlock(scope: !2356, file: !1, line: 1563, column: 20)
!2360 = !DILocation(line: 1564, column: 40, scope: !2359)
!2361 = !DILocation(line: 1564, column: 44, scope: !2359)
!2362 = !DILocation(line: 1564, column: 10, scope: !2359)
!2363 = !DILocation(line: 1564, column: 8, scope: !2359)
!2364 = !DILocation(line: 1565, column: 29, scope: !2359)
!2365 = !DILocation(line: 1565, column: 18, scope: !2359)
!2366 = !DILocation(line: 1565, column: 21, scope: !2359)
!2367 = !DILocation(line: 1565, column: 27, scope: !2359)
!2368 = !DILocation(line: 1565, column: 6, scope: !2359)
!2369 = !DILocation(line: 1565, column: 9, scope: !2359)
!2370 = !DILocation(line: 1565, column: 16, scope: !2359)
!2371 = !DILocation(line: 1566, column: 17, scope: !2359)
!2372 = !DILocation(line: 1566, column: 6, scope: !2359)
!2373 = !DILocation(line: 1566, column: 9, scope: !2359)
!2374 = !DILocation(line: 1566, column: 15, scope: !2359)
!2375 = !DILocation(line: 1567, column: 5, scope: !2359)
!2376 = !DILocation(line: 1569, column: 24, scope: !2377)
!2377 = distinct !DILexicalBlock(scope: !2356, file: !1, line: 1568, column: 10)
!2378 = !DILocation(line: 1569, column: 27, scope: !2377)
!2379 = !DILocation(line: 1569, column: 34, scope: !2377)
!2380 = !DILocation(line: 1569, column: 6, scope: !2377)
!2381 = !DILocation(line: 1573, column: 2, scope: !2096)
!2382 = !DILocation(line: 1573, column: 16, scope: !1837)
!2383 = !DILocation(line: 1573, column: 19, scope: !1837)
!2384 = !DILocation(line: 1573, column: 14, scope: !1837)
!2385 = !DILocation(line: 1573, column: 28, scope: !1837)
!2386 = !DILocation(line: 1573, column: 25, scope: !1837)
!2387 = distinct !{!2387, !2093, !2388}
!2388 = !DILocation(line: 1573, column: 34, scope: !1837)
!2389 = !DILocation(line: 1575, column: 6, scope: !1837)
!2390 = !DILocation(line: 1575, column: 10, scope: !1837)
!2391 = !DILocation(line: 1575, column: 4, scope: !1837)
!2392 = !DILocation(line: 1576, column: 2, scope: !1837)
!2393 = !DILocation(line: 1577, column: 22, scope: !2394)
!2394 = distinct !DILexicalBlock(scope: !1837, file: !1, line: 1576, column: 5)
!2395 = !DILocation(line: 1577, column: 26, scope: !2394)
!2396 = !DILocation(line: 1577, column: 3, scope: !2394)
!2397 = !DILocation(line: 1578, column: 21, scope: !2394)
!2398 = !DILocation(line: 1578, column: 25, scope: !2394)
!2399 = !DILocation(line: 1578, column: 3, scope: !2394)
!2400 = !DILocation(line: 1579, column: 2, scope: !2394)
!2401 = !DILocation(line: 1579, column: 16, scope: !1837)
!2402 = !DILocation(line: 1579, column: 19, scope: !1837)
!2403 = !DILocation(line: 1579, column: 14, scope: !1837)
!2404 = !DILocation(line: 1579, column: 28, scope: !1837)
!2405 = !DILocation(line: 1579, column: 32, scope: !1837)
!2406 = !DILocation(line: 1579, column: 25, scope: !1837)
!2407 = distinct !{!2407, !2392, !2408}
!2408 = !DILocation(line: 1579, column: 42, scope: !1837)
!2409 = !DILocation(line: 1581, column: 6, scope: !2410)
!2410 = distinct !DILexicalBlock(scope: !1837, file: !1, line: 1581, column: 6)
!2411 = !DILocation(line: 1581, column: 10, scope: !2410)
!2412 = !DILocation(line: 1581, column: 19, scope: !2410)
!2413 = !DILocation(line: 1581, column: 24, scope: !2410)
!2414 = !DILocation(line: 1581, column: 27, scope: !2410)
!2415 = !DILocation(line: 1581, column: 31, scope: !2410)
!2416 = !DILocation(line: 1581, column: 41, scope: !2410)
!2417 = !DILocation(line: 1581, column: 6, scope: !1837)
!2418 = !DILocation(line: 1583, column: 7, scope: !2419)
!2419 = distinct !DILexicalBlock(scope: !2410, file: !1, line: 1581, column: 47)
!2420 = !DILocation(line: 1583, column: 11, scope: !2419)
!2421 = !DILocation(line: 1583, column: 5, scope: !2419)
!2422 = !DILocation(line: 1585, column: 22, scope: !2419)
!2423 = !DILocation(line: 1585, column: 25, scope: !2419)
!2424 = !DILocation(line: 1585, column: 28, scope: !2419)
!2425 = !DILocation(line: 1585, column: 36, scope: !2419)
!2426 = !DILocation(line: 1585, column: 39, scope: !2419)
!2427 = !DILocation(line: 1585, column: 45, scope: !2419)
!2428 = !DILocation(line: 1585, column: 3, scope: !2419)
!2429 = !DILocation(line: 1586, column: 21, scope: !2419)
!2430 = !DILocation(line: 1586, column: 25, scope: !2419)
!2431 = !DILocation(line: 1586, column: 3, scope: !2419)
!2432 = !DILocation(line: 1587, column: 2, scope: !2419)
!2433 = !DILocation(line: 1589, column: 6, scope: !2434)
!2434 = distinct !DILexicalBlock(scope: !1837, file: !1, line: 1589, column: 6)
!2435 = !DILocation(line: 1589, column: 6, scope: !1837)
!2436 = !DILocation(line: 1590, column: 24, scope: !2437)
!2437 = distinct !DILexicalBlock(scope: !2434, file: !1, line: 1589, column: 17)
!2438 = !DILocation(line: 1590, column: 3, scope: !2437)
!2439 = !DILocation(line: 1593, column: 7, scope: !2440)
!2440 = distinct !DILexicalBlock(scope: !2437, file: !1, line: 1593, column: 7)
!2441 = !DILocation(line: 1593, column: 11, scope: !2440)
!2442 = !DILocation(line: 1593, column: 7, scope: !2437)
!2443 = !DILocation(line: 1594, column: 8, scope: !2444)
!2444 = distinct !DILexicalBlock(scope: !2445, file: !1, line: 1594, column: 8)
!2445 = distinct !DILexicalBlock(scope: !2440, file: !1, line: 1593, column: 24)
!2446 = !DILocation(line: 1594, column: 12, scope: !2444)
!2447 = !DILocation(line: 1594, column: 18, scope: !2444)
!2448 = !DILocation(line: 1594, column: 8, scope: !2445)
!2449 = !DILocation(line: 1595, column: 5, scope: !2444)
!2450 = !DILocation(line: 1595, column: 9, scope: !2444)
!2451 = !DILocation(line: 1595, column: 19, scope: !2444)
!2452 = !DILocation(line: 1596, column: 13, scope: !2453)
!2453 = distinct !DILexicalBlock(scope: !2444, file: !1, line: 1596, column: 13)
!2454 = !DILocation(line: 1596, column: 17, scope: !2453)
!2455 = !DILocation(line: 1596, column: 21, scope: !2453)
!2456 = !DILocation(line: 1596, column: 13, scope: !2444)
!2457 = !DILocation(line: 1597, column: 5, scope: !2453)
!2458 = !DILocation(line: 1597, column: 9, scope: !2453)
!2459 = !DILocation(line: 1597, column: 19, scope: !2453)
!2460 = !DILocation(line: 1599, column: 5, scope: !2453)
!2461 = !DILocation(line: 1599, column: 9, scope: !2453)
!2462 = !DILocation(line: 1599, column: 19, scope: !2453)
!2463 = !DILocation(line: 1600, column: 3, scope: !2445)
!2464 = !DILocation(line: 1601, column: 12, scope: !2465)
!2465 = distinct !DILexicalBlock(scope: !2440, file: !1, line: 1601, column: 12)
!2466 = !DILocation(line: 1601, column: 16, scope: !2465)
!2467 = !DILocation(line: 1601, column: 22, scope: !2465)
!2468 = !DILocation(line: 1601, column: 27, scope: !2465)
!2469 = !DILocation(line: 1601, column: 30, scope: !2465)
!2470 = !DILocation(line: 1601, column: 34, scope: !2465)
!2471 = !DILocation(line: 1601, column: 44, scope: !2465)
!2472 = !DILocation(line: 1601, column: 12, scope: !2440)
!2473 = !DILocation(line: 1602, column: 4, scope: !2474)
!2474 = distinct !DILexicalBlock(scope: !2465, file: !1, line: 1601, column: 50)
!2475 = !DILocation(line: 1602, column: 8, scope: !2474)
!2476 = !DILocation(line: 1602, column: 18, scope: !2474)
!2477 = !DILocation(line: 1603, column: 3, scope: !2474)
!2478 = !DILocation(line: 1604, column: 12, scope: !2479)
!2479 = distinct !DILexicalBlock(scope: !2465, file: !1, line: 1604, column: 12)
!2480 = !DILocation(line: 1604, column: 16, scope: !2479)
!2481 = !DILocation(line: 1604, column: 25, scope: !2479)
!2482 = !DILocation(line: 1604, column: 12, scope: !2465)
!2483 = !DILocation(line: 1605, column: 4, scope: !2484)
!2484 = distinct !DILexicalBlock(scope: !2479, file: !1, line: 1604, column: 31)
!2485 = !DILocation(line: 1605, column: 8, scope: !2484)
!2486 = !DILocation(line: 1605, column: 18, scope: !2484)
!2487 = !DILocation(line: 1606, column: 3, scope: !2484)
!2488 = !DILocation(line: 1607, column: 12, scope: !2489)
!2489 = distinct !DILexicalBlock(scope: !2479, file: !1, line: 1607, column: 12)
!2490 = !DILocation(line: 1607, column: 20, scope: !2489)
!2491 = !DILocation(line: 1607, column: 24, scope: !2489)
!2492 = !DILocation(line: 1607, column: 29, scope: !2489)
!2493 = !DILocation(line: 1607, column: 32, scope: !2489)
!2494 = !DILocation(line: 1607, column: 36, scope: !2489)
!2495 = !DILocation(line: 1607, column: 45, scope: !2489)
!2496 = !DILocation(line: 1607, column: 12, scope: !2479)
!2497 = !DILocation(line: 1608, column: 8, scope: !2498)
!2498 = distinct !DILexicalBlock(scope: !2499, file: !1, line: 1608, column: 8)
!2499 = distinct !DILexicalBlock(scope: !2489, file: !1, line: 1607, column: 51)
!2500 = !DILocation(line: 1608, column: 12, scope: !2498)
!2501 = !DILocation(line: 1608, column: 18, scope: !2498)
!2502 = !DILocation(line: 1608, column: 23, scope: !2498)
!2503 = !DILocation(line: 1608, column: 26, scope: !2498)
!2504 = !DILocation(line: 1608, column: 30, scope: !2498)
!2505 = !DILocation(line: 1608, column: 39, scope: !2498)
!2506 = !DILocation(line: 1608, column: 8, scope: !2499)
!2507 = !DILocation(line: 1609, column: 5, scope: !2508)
!2508 = distinct !DILexicalBlock(scope: !2498, file: !1, line: 1608, column: 45)
!2509 = !DILocation(line: 1609, column: 9, scope: !2508)
!2510 = !DILocation(line: 1609, column: 19, scope: !2508)
!2511 = !DILocation(line: 1610, column: 4, scope: !2508)
!2512 = !DILocation(line: 1612, column: 5, scope: !2513)
!2513 = distinct !DILexicalBlock(scope: !2498, file: !1, line: 1611, column: 9)
!2514 = !DILocation(line: 1612, column: 9, scope: !2513)
!2515 = !DILocation(line: 1612, column: 19, scope: !2513)
!2516 = !DILocation(line: 1614, column: 3, scope: !2499)
!2517 = !DILocation(line: 1616, column: 4, scope: !2518)
!2518 = distinct !DILexicalBlock(scope: !2489, file: !1, line: 1615, column: 8)
!2519 = !DILocation(line: 1616, column: 8, scope: !2518)
!2520 = !DILocation(line: 1616, column: 18, scope: !2518)
!2521 = !DILocation(line: 1618, column: 2, scope: !2437)
!2522 = !DILocation(line: 1619, column: 1, scope: !1837)
!2523 = distinct !DISubprogram(name: "BM_iter_step", scope: !1002, file: !1002, line: 40, type: !2524, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!2524 = !DISubroutineType(types: !2525)
!2525 = !{!61, !1005}
!2526 = !DILocalVariable(name: "iter", arg: 1, scope: !2523, file: !1002, line: 40, type: !1005)
!2527 = !DILocation(line: 40, column: 39, scope: !2523)
!2528 = !DILocation(line: 42, column: 9, scope: !2523)
!2529 = !DILocation(line: 42, column: 15, scope: !2523)
!2530 = !DILocation(line: 42, column: 20, scope: !2523)
!2531 = !DILocation(line: 42, column: 2, scope: !2523)
!2532 = distinct !DISubprogram(name: "adjust_offsets", scope: !1, file: !1, line: 1643, type: !799, scopeLine: 1644, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!2533 = !DILocalVariable(name: "bp", arg: 1, scope: !2532, file: !1, line: 1643, type: !801)
!2534 = !DILocation(line: 1643, column: 41, scope: !2532)
!2535 = !DILocalVariable(name: "bv", scope: !2532, file: !1, line: 1645, type: !283)
!2536 = !DILocation(line: 1645, column: 11, scope: !2532)
!2537 = !DILocalVariable(name: "searchbv", scope: !2532, file: !1, line: 1645, type: !283)
!2538 = !DILocation(line: 1645, column: 16, scope: !2532)
!2539 = !DILocalVariable(name: "bvother", scope: !2532, file: !1, line: 1645, type: !283)
!2540 = !DILocation(line: 1645, column: 27, scope: !2532)
!2541 = !DILocalVariable(name: "i", scope: !2532, file: !1, line: 1646, type: !63)
!2542 = !DILocation(line: 1646, column: 6, scope: !2532)
!2543 = !DILocalVariable(name: "searchi", scope: !2532, file: !1, line: 1646, type: !63)
!2544 = !DILocation(line: 1646, column: 9, scope: !2532)
!2545 = !DILocalVariable(name: "giter", scope: !2532, file: !1, line: 1647, type: !2546)
!2546 = !DIDerivedType(tag: DW_TAG_typedef, name: "GHashIterator", file: !303, line: 54, baseType: !2547)
!2547 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "GHashIterator", file: !303, line: 50, size: 192, elements: !2548)
!2548 = !{!2549, !2550, !2553}
!2549 = !DIDerivedType(tag: DW_TAG_member, name: "gh", scope: !2547, file: !303, line: 51, baseType: !384, size: 64)
!2550 = !DIDerivedType(tag: DW_TAG_member, name: "curEntry", scope: !2547, file: !303, line: 52, baseType: !2551, size: 64, offset: 64)
!2551 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2552, size: 64)
!2552 = !DICompositeType(tag: DW_TAG_structure_type, name: "Entry", file: !303, line: 52, flags: DIFlagFwdDecl)
!2553 = !DIDerivedType(tag: DW_TAG_member, name: "curBucket", scope: !2547, file: !303, line: 53, baseType: !5, size: 32, offset: 128)
!2554 = !DILocation(line: 1647, column: 16, scope: !2532)
!2555 = !DILocalVariable(name: "e", scope: !2532, file: !1, line: 1648, type: !130)
!2556 = !DILocation(line: 1648, column: 12, scope: !2532)
!2557 = !DILocalVariable(name: "efirst", scope: !2532, file: !1, line: 1648, type: !130)
!2558 = !DILocation(line: 1648, column: 16, scope: !2532)
!2559 = !DILocalVariable(name: "eother", scope: !2532, file: !1, line: 1648, type: !130)
!2560 = !DILocation(line: 1648, column: 25, scope: !2532)
!2561 = !DILocalVariable(name: "q", scope: !2532, file: !1, line: 1649, type: !2562)
!2562 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2563, size: 64)
!2563 = !DIDerivedType(tag: DW_TAG_typedef, name: "GSQueue", file: !2564, line: 35, baseType: !2565)
!2564 = !DIFile(filename: "blender/source/blender/blenlib/BLI_gsqueue.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!2565 = !DICompositeType(tag: DW_TAG_structure_type, name: "_GSQueue", file: !2564, line: 35, flags: DIFlagFwdDecl)
!2566 = !DILocation(line: 1649, column: 11, scope: !2532)
!2567 = !DILocation(line: 1652, column: 2, scope: !2568)
!2568 = distinct !DILexicalBlock(scope: !2532, file: !1, line: 1652, column: 2)
!2569 = !DILocation(line: 1652, column: 2, scope: !2570)
!2570 = distinct !DILexicalBlock(scope: !2568, file: !1, line: 1652, column: 2)
!2571 = !DILocation(line: 1653, column: 8, scope: !2572)
!2572 = distinct !DILexicalBlock(scope: !2570, file: !1, line: 1652, column: 35)
!2573 = !DILocation(line: 1653, column: 6, scope: !2572)
!2574 = !DILocation(line: 1654, column: 3, scope: !2572)
!2575 = !DILocation(line: 1654, column: 7, scope: !2572)
!2576 = !DILocation(line: 1654, column: 15, scope: !2572)
!2577 = !DILocation(line: 1655, column: 2, scope: !2572)
!2578 = distinct !{!2578, !2567, !2579}
!2579 = !DILocation(line: 1655, column: 2, scope: !2568)
!2580 = !DILocation(line: 1657, column: 6, scope: !2532)
!2581 = !DILocation(line: 1657, column: 4, scope: !2532)
!2582 = !DILocation(line: 1659, column: 2, scope: !2532)
!2583 = !DILocation(line: 1661, column: 12, scope: !2584)
!2584 = distinct !DILexicalBlock(scope: !2585, file: !1, line: 1659, column: 11)
!2585 = distinct !DILexicalBlock(scope: !2586, file: !1, line: 1659, column: 2)
!2586 = distinct !DILexicalBlock(scope: !2532, file: !1, line: 1659, column: 2)
!2587 = !DILocation(line: 1662, column: 11, scope: !2584)
!2588 = !DILocation(line: 1663, column: 3, scope: !2589)
!2589 = distinct !DILexicalBlock(scope: !2584, file: !1, line: 1663, column: 3)
!2590 = !DILocation(line: 1663, column: 3, scope: !2591)
!2591 = distinct !DILexicalBlock(scope: !2589, file: !1, line: 1663, column: 3)
!2592 = !DILocation(line: 1664, column: 9, scope: !2593)
!2593 = distinct !DILexicalBlock(scope: !2591, file: !1, line: 1663, column: 36)
!2594 = !DILocation(line: 1664, column: 7, scope: !2593)
!2595 = !DILocation(line: 1665, column: 9, scope: !2596)
!2596 = distinct !DILexicalBlock(scope: !2593, file: !1, line: 1665, column: 8)
!2597 = !DILocation(line: 1665, column: 13, scope: !2596)
!2598 = !DILocation(line: 1665, column: 21, scope: !2596)
!2599 = !DILocation(line: 1665, column: 53, scope: !2596)
!2600 = !DILocation(line: 1665, column: 24, scope: !2596)
!2601 = !DILocation(line: 1665, column: 8, scope: !2593)
!2602 = !DILocation(line: 1666, column: 9, scope: !2603)
!2603 = distinct !DILexicalBlock(scope: !2596, file: !1, line: 1665, column: 58)
!2604 = !DILocation(line: 1666, column: 7, scope: !2603)
!2605 = !DILocation(line: 1667, column: 10, scope: !2606)
!2606 = distinct !DILexicalBlock(scope: !2603, file: !1, line: 1667, column: 9)
!2607 = !DILocation(line: 1667, column: 19, scope: !2606)
!2608 = !DILocation(line: 1667, column: 22, scope: !2606)
!2609 = !DILocation(line: 1667, column: 26, scope: !2606)
!2610 = !DILocation(line: 1667, column: 24, scope: !2606)
!2611 = !DILocation(line: 1667, column: 9, scope: !2603)
!2612 = !DILocation(line: 1668, column: 17, scope: !2613)
!2613 = distinct !DILexicalBlock(scope: !2606, file: !1, line: 1667, column: 35)
!2614 = !DILocation(line: 1668, column: 15, scope: !2613)
!2615 = !DILocation(line: 1669, column: 16, scope: !2613)
!2616 = !DILocation(line: 1669, column: 14, scope: !2613)
!2617 = !DILocation(line: 1670, column: 5, scope: !2613)
!2618 = !DILocation(line: 1671, column: 4, scope: !2603)
!2619 = !DILocation(line: 1672, column: 3, scope: !2593)
!2620 = distinct !{!2620, !2588, !2621}
!2621 = !DILocation(line: 1672, column: 3, scope: !2589)
!2622 = !DILocation(line: 1673, column: 7, scope: !2623)
!2623 = distinct !DILexicalBlock(scope: !2584, file: !1, line: 1673, column: 7)
!2624 = !DILocation(line: 1673, column: 16, scope: !2623)
!2625 = !DILocation(line: 1673, column: 7, scope: !2584)
!2626 = !DILocation(line: 1674, column: 4, scope: !2623)
!2627 = !DILocation(line: 1676, column: 20, scope: !2584)
!2628 = !DILocation(line: 1676, column: 23, scope: !2584)
!2629 = !DILocation(line: 1676, column: 3, scope: !2584)
!2630 = !DILocation(line: 1677, column: 3, scope: !2584)
!2631 = !DILocation(line: 1677, column: 32, scope: !2584)
!2632 = !DILocation(line: 1677, column: 11, scope: !2584)
!2633 = !DILocation(line: 1677, column: 10, scope: !2584)
!2634 = !DILocation(line: 1678, column: 20, scope: !2635)
!2635 = distinct !DILexicalBlock(scope: !2584, file: !1, line: 1677, column: 36)
!2636 = !DILocation(line: 1678, column: 23, scope: !2635)
!2637 = !DILocation(line: 1678, column: 4, scope: !2635)
!2638 = !DILocation(line: 1680, column: 8, scope: !2639)
!2639 = distinct !DILexicalBlock(scope: !2635, file: !1, line: 1680, column: 8)
!2640 = !DILocation(line: 1680, column: 12, scope: !2639)
!2641 = !DILocation(line: 1680, column: 8, scope: !2635)
!2642 = !DILocation(line: 1681, column: 5, scope: !2639)
!2643 = distinct !{!2643, !2630, !2644}
!2644 = !DILocation(line: 1692, column: 3, scope: !2584)
!2645 = !DILocation(line: 1682, column: 4, scope: !2635)
!2646 = !DILocation(line: 1682, column: 8, scope: !2635)
!2647 = !DILocation(line: 1682, column: 16, scope: !2635)
!2648 = !DILocation(line: 1683, column: 19, scope: !2635)
!2649 = !DILocation(line: 1683, column: 23, scope: !2635)
!2650 = !DILocation(line: 1683, column: 4, scope: !2635)
!2651 = !DILocation(line: 1685, column: 18, scope: !2635)
!2652 = !DILocation(line: 1685, column: 22, scope: !2635)
!2653 = !DILocation(line: 1685, column: 15, scope: !2635)
!2654 = !DILocation(line: 1685, column: 6, scope: !2635)
!2655 = !DILocation(line: 1686, column: 4, scope: !2635)
!2656 = !DILocation(line: 1687, column: 39, scope: !2657)
!2657 = distinct !DILexicalBlock(scope: !2635, file: !1, line: 1686, column: 7)
!2658 = !DILocation(line: 1687, column: 43, scope: !2657)
!2659 = !DILocation(line: 1687, column: 14, scope: !2657)
!2660 = !DILocation(line: 1687, column: 12, scope: !2657)
!2661 = !DILocation(line: 1688, column: 9, scope: !2662)
!2662 = distinct !DILexicalBlock(scope: !2657, file: !1, line: 1688, column: 9)
!2663 = !DILocation(line: 1688, column: 16, scope: !2662)
!2664 = !DILocation(line: 1688, column: 20, scope: !2662)
!2665 = !DILocation(line: 1688, column: 29, scope: !2662)
!2666 = !DILocation(line: 1688, column: 37, scope: !2662)
!2667 = !DILocation(line: 1688, column: 65, scope: !2662)
!2668 = !DILocation(line: 1688, column: 40, scope: !2662)
!2669 = !DILocation(line: 1688, column: 9, scope: !2657)
!2670 = !DILocation(line: 1689, column: 23, scope: !2671)
!2671 = distinct !DILexicalBlock(scope: !2662, file: !1, line: 1688, column: 69)
!2672 = !DILocation(line: 1689, column: 26, scope: !2671)
!2673 = !DILocation(line: 1689, column: 6, scope: !2671)
!2674 = !DILocation(line: 1690, column: 5, scope: !2671)
!2675 = !DILocation(line: 1691, column: 4, scope: !2657)
!2676 = !DILocation(line: 1691, column: 18, scope: !2635)
!2677 = !DILocation(line: 1691, column: 21, scope: !2635)
!2678 = !DILocation(line: 1691, column: 16, scope: !2635)
!2679 = !DILocation(line: 1691, column: 30, scope: !2635)
!2680 = !DILocation(line: 1691, column: 27, scope: !2635)
!2681 = distinct !{!2681, !2655, !2682}
!2682 = !DILocation(line: 1691, column: 36, scope: !2635)
!2683 = !DILocation(line: 1659, column: 2, scope: !2585)
!2684 = distinct !{!2684, !2685, !2686}
!2685 = !DILocation(line: 1659, column: 2, scope: !2586)
!2686 = !DILocation(line: 1693, column: 2, scope: !2586)
!2687 = !DILocation(line: 1694, column: 19, scope: !2532)
!2688 = !DILocation(line: 1694, column: 2, scope: !2532)
!2689 = !DILocation(line: 1695, column: 1, scope: !2532)
!2690 = distinct !DISubprogram(name: "find_bevvert", scope: !1, file: !1, line: 271, type: !2691, scopeLine: 272, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!2691 = !DISubroutineType(types: !2692)
!2692 = !{!283, !801, !51}
!2693 = !DILocalVariable(name: "bp", arg: 1, scope: !2690, file: !1, line: 271, type: !801)
!2694 = !DILocation(line: 271, column: 43, scope: !2690)
!2695 = !DILocalVariable(name: "bmv", arg: 2, scope: !2690, file: !1, line: 271, type: !51)
!2696 = !DILocation(line: 271, column: 55, scope: !2690)
!2697 = !DILocation(line: 273, column: 26, scope: !2690)
!2698 = !DILocation(line: 273, column: 30, scope: !2690)
!2699 = !DILocation(line: 273, column: 41, scope: !2690)
!2700 = !DILocation(line: 273, column: 9, scope: !2690)
!2701 = !DILocation(line: 273, column: 2, scope: !2690)
!2702 = distinct !DISubprogram(name: "build_vmesh", scope: !1, file: !1, line: 2736, type: !2703, scopeLine: 2737, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!2703 = !DISubroutineType(types: !2704)
!2704 = !{null, !801, !321, !283}
!2705 = !DILocalVariable(name: "bp", arg: 1, scope: !2702, file: !1, line: 2736, type: !801)
!2706 = !DILocation(line: 2736, column: 38, scope: !2702)
!2707 = !DILocalVariable(name: "bm", arg: 2, scope: !2702, file: !1, line: 2736, type: !321)
!2708 = !DILocation(line: 2736, column: 49, scope: !2702)
!2709 = !DILocalVariable(name: "bv", arg: 3, scope: !2702, file: !1, line: 2736, type: !283)
!2710 = !DILocation(line: 2736, column: 62, scope: !2702)
!2711 = !DILocalVariable(name: "mem_arena", scope: !2702, file: !1, line: 2738, type: !601)
!2712 = !DILocation(line: 2738, column: 12, scope: !2702)
!2713 = !DILocation(line: 2738, column: 24, scope: !2702)
!2714 = !DILocation(line: 2738, column: 28, scope: !2702)
!2715 = !DILocalVariable(name: "vm", scope: !2702, file: !1, line: 2739, type: !298)
!2716 = !DILocation(line: 2739, column: 9, scope: !2702)
!2717 = !DILocation(line: 2739, column: 14, scope: !2702)
!2718 = !DILocation(line: 2739, column: 18, scope: !2702)
!2719 = !DILocalVariable(name: "v", scope: !2702, file: !1, line: 2740, type: !121)
!2720 = !DILocation(line: 2740, column: 13, scope: !2702)
!2721 = !DILocalVariable(name: "weld1", scope: !2702, file: !1, line: 2740, type: !121)
!2722 = !DILocation(line: 2740, column: 17, scope: !2702)
!2723 = !DILocalVariable(name: "weld2", scope: !2702, file: !1, line: 2740, type: !121)
!2724 = !DILocation(line: 2740, column: 25, scope: !2702)
!2725 = !DILocalVariable(name: "n", scope: !2702, file: !1, line: 2741, type: !63)
!2726 = !DILocation(line: 2741, column: 6, scope: !2702)
!2727 = !DILocalVariable(name: "ns", scope: !2702, file: !1, line: 2741, type: !63)
!2728 = !DILocation(line: 2741, column: 9, scope: !2702)
!2729 = !DILocalVariable(name: "ns2", scope: !2702, file: !1, line: 2741, type: !63)
!2730 = !DILocation(line: 2741, column: 13, scope: !2702)
!2731 = !DILocalVariable(name: "i", scope: !2702, file: !1, line: 2741, type: !63)
!2732 = !DILocation(line: 2741, column: 18, scope: !2702)
!2733 = !DILocalVariable(name: "k", scope: !2702, file: !1, line: 2741, type: !63)
!2734 = !DILocation(line: 2741, column: 21, scope: !2702)
!2735 = !DILocalVariable(name: "weld", scope: !2702, file: !1, line: 2741, type: !63)
!2736 = !DILocation(line: 2741, column: 24, scope: !2702)
!2737 = !DILocalVariable(name: "va", scope: !2702, file: !1, line: 2742, type: !170)
!2738 = !DILocation(line: 2742, column: 9, scope: !2702)
!2739 = !DILocalVariable(name: "vb", scope: !2702, file: !1, line: 2742, type: !170)
!2740 = !DILocation(line: 2742, column: 14, scope: !2702)
!2741 = !DILocalVariable(name: "co", scope: !2702, file: !1, line: 2742, type: !75)
!2742 = !DILocation(line: 2742, column: 18, scope: !2702)
!2743 = !DILocation(line: 2744, column: 6, scope: !2702)
!2744 = !DILocation(line: 2744, column: 10, scope: !2702)
!2745 = !DILocation(line: 2744, column: 4, scope: !2702)
!2746 = !DILocation(line: 2745, column: 7, scope: !2702)
!2747 = !DILocation(line: 2745, column: 11, scope: !2702)
!2748 = !DILocation(line: 2745, column: 5, scope: !2702)
!2749 = !DILocation(line: 2746, column: 8, scope: !2702)
!2750 = !DILocation(line: 2746, column: 11, scope: !2702)
!2751 = !DILocation(line: 2746, column: 6, scope: !2702)
!2752 = !DILocation(line: 2748, column: 43, scope: !2702)
!2753 = !DILocation(line: 2748, column: 54, scope: !2702)
!2754 = !DILocation(line: 2748, column: 59, scope: !2702)
!2755 = !DILocation(line: 2748, column: 63, scope: !2702)
!2756 = !DILocation(line: 2748, column: 56, scope: !2702)
!2757 = !DILocation(line: 2748, column: 71, scope: !2702)
!2758 = !DILocation(line: 2748, column: 74, scope: !2702)
!2759 = !DILocation(line: 2748, column: 68, scope: !2702)
!2760 = !DILocation(line: 2748, column: 79, scope: !2702)
!2761 = !DILocation(line: 2748, column: 24, scope: !2702)
!2762 = !DILocation(line: 2748, column: 13, scope: !2702)
!2763 = !DILocation(line: 2748, column: 2, scope: !2702)
!2764 = !DILocation(line: 2748, column: 6, scope: !2702)
!2765 = !DILocation(line: 2748, column: 11, scope: !2702)
!2766 = !DILocation(line: 2751, column: 10, scope: !2702)
!2767 = !DILocation(line: 2751, column: 14, scope: !2702)
!2768 = !DILocation(line: 2751, column: 23, scope: !2702)
!2769 = !DILocation(line: 2751, column: 29, scope: !2702)
!2770 = !DILocation(line: 2751, column: 33, scope: !2702)
!2771 = !DILocation(line: 2751, column: 37, scope: !2702)
!2772 = !DILocation(line: 2751, column: 43, scope: !2702)
!2773 = !DILocation(line: 0, scope: !2702)
!2774 = !DILocation(line: 2751, column: 7, scope: !2702)
!2775 = !DILocation(line: 2752, column: 16, scope: !2702)
!2776 = !DILocation(line: 2752, column: 8, scope: !2702)
!2777 = !DILocation(line: 2755, column: 6, scope: !2702)
!2778 = !DILocation(line: 2755, column: 10, scope: !2702)
!2779 = !DILocation(line: 2755, column: 4, scope: !2702)
!2780 = !DILocation(line: 2756, column: 2, scope: !2702)
!2781 = !DILocation(line: 2757, column: 7, scope: !2782)
!2782 = distinct !DILexicalBlock(scope: !2702, file: !1, line: 2756, column: 5)
!2783 = !DILocation(line: 2757, column: 10, scope: !2782)
!2784 = !DILocation(line: 2757, column: 5, scope: !2782)
!2785 = !DILocation(line: 2758, column: 24, scope: !2782)
!2786 = !DILocation(line: 2758, column: 28, scope: !2782)
!2787 = !DILocation(line: 2758, column: 14, scope: !2782)
!2788 = !DILocation(line: 2758, column: 38, scope: !2782)
!2789 = !DILocation(line: 2758, column: 42, scope: !2782)
!2790 = !DILocation(line: 2758, column: 45, scope: !2782)
!2791 = !DILocation(line: 2758, column: 48, scope: !2782)
!2792 = !DILocation(line: 2758, column: 3, scope: !2782)
!2793 = !DILocation(line: 2759, column: 22, scope: !2782)
!2794 = !DILocation(line: 2759, column: 26, scope: !2782)
!2795 = !DILocation(line: 2759, column: 30, scope: !2782)
!2796 = !DILocation(line: 2759, column: 39, scope: !2782)
!2797 = !DILocation(line: 2759, column: 43, scope: !2782)
!2798 = !DILocation(line: 2759, column: 3, scope: !2782)
!2799 = !DILocation(line: 2760, column: 23, scope: !2782)
!2800 = !DILocation(line: 2760, column: 27, scope: !2782)
!2801 = !DILocation(line: 2760, column: 13, scope: !2782)
!2802 = !DILocation(line: 2760, column: 37, scope: !2782)
!2803 = !DILocation(line: 2760, column: 3, scope: !2782)
!2804 = !DILocation(line: 2760, column: 6, scope: !2782)
!2805 = !DILocation(line: 2760, column: 9, scope: !2782)
!2806 = !DILocation(line: 2760, column: 11, scope: !2782)
!2807 = !DILocation(line: 2761, column: 7, scope: !2808)
!2808 = distinct !DILexicalBlock(scope: !2782, file: !1, line: 2761, column: 7)
!2809 = !DILocation(line: 2761, column: 12, scope: !2808)
!2810 = !DILocation(line: 2761, column: 15, scope: !2808)
!2811 = !DILocation(line: 2761, column: 18, scope: !2808)
!2812 = !DILocation(line: 2761, column: 7, scope: !2782)
!2813 = !DILocation(line: 2762, column: 9, scope: !2814)
!2814 = distinct !DILexicalBlock(scope: !2815, file: !1, line: 2762, column: 8)
!2815 = distinct !DILexicalBlock(scope: !2808, file: !1, line: 2761, column: 24)
!2816 = !DILocation(line: 2762, column: 8, scope: !2815)
!2817 = !DILocation(line: 2763, column: 13, scope: !2814)
!2818 = !DILocation(line: 2763, column: 11, scope: !2814)
!2819 = !DILocation(line: 2763, column: 5, scope: !2814)
!2820 = !DILocation(line: 2765, column: 13, scope: !2821)
!2821 = distinct !DILexicalBlock(scope: !2814, file: !1, line: 2764, column: 9)
!2822 = !DILocation(line: 2765, column: 11, scope: !2821)
!2823 = !DILocation(line: 2766, column: 30, scope: !2821)
!2824 = !DILocation(line: 2766, column: 34, scope: !2821)
!2825 = !DILocation(line: 2766, column: 41, scope: !2821)
!2826 = !DILocation(line: 2766, column: 5, scope: !2821)
!2827 = !DILocation(line: 2767, column: 23, scope: !2821)
!2828 = !DILocation(line: 2767, column: 27, scope: !2821)
!2829 = !DILocation(line: 2767, column: 5, scope: !2821)
!2830 = !DILocation(line: 2768, column: 23, scope: !2821)
!2831 = !DILocation(line: 2768, column: 27, scope: !2821)
!2832 = !DILocation(line: 2768, column: 5, scope: !2821)
!2833 = !DILocation(line: 2770, column: 3, scope: !2815)
!2834 = !DILocation(line: 2771, column: 2, scope: !2782)
!2835 = !DILocation(line: 2771, column: 16, scope: !2702)
!2836 = !DILocation(line: 2771, column: 19, scope: !2702)
!2837 = !DILocation(line: 2771, column: 14, scope: !2702)
!2838 = !DILocation(line: 2771, column: 28, scope: !2702)
!2839 = !DILocation(line: 2771, column: 32, scope: !2702)
!2840 = !DILocation(line: 2771, column: 25, scope: !2702)
!2841 = distinct !{!2841, !2780, !2842}
!2842 = !DILocation(line: 2771, column: 42, scope: !2702)
!2843 = !DILocation(line: 2774, column: 6, scope: !2702)
!2844 = !DILocation(line: 2774, column: 10, scope: !2702)
!2845 = !DILocation(line: 2774, column: 4, scope: !2702)
!2846 = !DILocation(line: 2775, column: 2, scope: !2702)
!2847 = !DILocation(line: 2776, column: 7, scope: !2848)
!2848 = distinct !DILexicalBlock(scope: !2702, file: !1, line: 2775, column: 5)
!2849 = !DILocation(line: 2776, column: 10, scope: !2848)
!2850 = !DILocation(line: 2776, column: 5, scope: !2848)
!2851 = !DILocation(line: 2777, column: 18, scope: !2848)
!2852 = !DILocation(line: 2777, column: 22, scope: !2848)
!2853 = !DILocation(line: 2777, column: 28, scope: !2848)
!2854 = !DILocation(line: 2777, column: 32, scope: !2848)
!2855 = !DILocation(line: 2777, column: 35, scope: !2848)
!2856 = !DILocation(line: 2777, column: 41, scope: !2848)
!2857 = !DILocation(line: 2777, column: 3, scope: !2848)
!2858 = !DILocation(line: 2778, column: 10, scope: !2859)
!2859 = distinct !DILexicalBlock(scope: !2848, file: !1, line: 2778, column: 3)
!2860 = !DILocation(line: 2778, column: 8, scope: !2859)
!2861 = !DILocation(line: 2778, column: 15, scope: !2862)
!2862 = distinct !DILexicalBlock(scope: !2859, file: !1, line: 2778, column: 3)
!2863 = !DILocation(line: 2778, column: 19, scope: !2862)
!2864 = !DILocation(line: 2778, column: 17, scope: !2862)
!2865 = !DILocation(line: 2778, column: 3, scope: !2859)
!2866 = !DILocation(line: 2779, column: 8, scope: !2867)
!2867 = distinct !DILexicalBlock(scope: !2868, file: !1, line: 2779, column: 8)
!2868 = distinct !DILexicalBlock(scope: !2862, file: !1, line: 2778, column: 28)
!2869 = !DILocation(line: 2779, column: 11, scope: !2867)
!2870 = !DILocation(line: 2779, column: 16, scope: !2867)
!2871 = !DILocation(line: 2779, column: 19, scope: !2867)
!2872 = !DILocation(line: 2779, column: 23, scope: !2867)
!2873 = !DILocation(line: 2779, column: 33, scope: !2867)
!2874 = !DILocation(line: 2779, column: 8, scope: !2868)
!2875 = !DILocation(line: 2780, column: 23, scope: !2876)
!2876 = distinct !DILexicalBlock(scope: !2867, file: !1, line: 2779, column: 43)
!2877 = !DILocation(line: 2780, column: 28, scope: !2876)
!2878 = !DILocation(line: 2780, column: 31, scope: !2876)
!2879 = !DILocation(line: 2780, column: 40, scope: !2876)
!2880 = !DILocation(line: 2780, column: 43, scope: !2876)
!2881 = !DILocation(line: 2780, column: 47, scope: !2876)
!2882 = !DILocation(line: 2780, column: 5, scope: !2876)
!2883 = !DILocation(line: 2781, column: 26, scope: !2876)
!2884 = !DILocation(line: 2781, column: 30, scope: !2876)
!2885 = !DILocation(line: 2781, column: 36, scope: !2876)
!2886 = !DILocation(line: 2781, column: 16, scope: !2876)
!2887 = !DILocation(line: 2781, column: 40, scope: !2876)
!2888 = !DILocation(line: 2781, column: 44, scope: !2876)
!2889 = !DILocation(line: 2781, column: 5, scope: !2876)
!2890 = !DILocation(line: 2782, column: 10, scope: !2891)
!2891 = distinct !DILexicalBlock(scope: !2876, file: !1, line: 2782, column: 9)
!2892 = !DILocation(line: 2782, column: 9, scope: !2876)
!2893 = !DILocation(line: 2783, column: 25, scope: !2891)
!2894 = !DILocation(line: 2783, column: 29, scope: !2891)
!2895 = !DILocation(line: 2783, column: 33, scope: !2891)
!2896 = !DILocation(line: 2783, column: 39, scope: !2891)
!2897 = !DILocation(line: 2783, column: 42, scope: !2891)
!2898 = !DILocation(line: 2783, column: 46, scope: !2891)
!2899 = !DILocation(line: 2783, column: 6, scope: !2891)
!2900 = !DILocation(line: 2784, column: 4, scope: !2876)
!2901 = !DILocation(line: 2785, column: 3, scope: !2868)
!2902 = !DILocation(line: 2778, column: 24, scope: !2862)
!2903 = !DILocation(line: 2778, column: 3, scope: !2862)
!2904 = distinct !{!2904, !2865, !2905}
!2905 = !DILocation(line: 2785, column: 3, scope: !2859)
!2906 = !DILocation(line: 2786, column: 2, scope: !2848)
!2907 = !DILocation(line: 2786, column: 16, scope: !2702)
!2908 = !DILocation(line: 2786, column: 19, scope: !2702)
!2909 = !DILocation(line: 2786, column: 14, scope: !2702)
!2910 = !DILocation(line: 2786, column: 28, scope: !2702)
!2911 = !DILocation(line: 2786, column: 32, scope: !2702)
!2912 = !DILocation(line: 2786, column: 25, scope: !2702)
!2913 = distinct !{!2913, !2846, !2914}
!2914 = !DILocation(line: 2786, column: 42, scope: !2702)
!2915 = !DILocation(line: 2788, column: 6, scope: !2916)
!2916 = distinct !DILexicalBlock(scope: !2702, file: !1, line: 2788, column: 6)
!2917 = !DILocation(line: 2788, column: 6, scope: !2702)
!2918 = !DILocation(line: 2789, column: 3, scope: !2919)
!2919 = distinct !DILexicalBlock(scope: !2916, file: !1, line: 2788, column: 12)
!2920 = !DILocation(line: 2789, column: 7, scope: !2919)
!2921 = !DILocation(line: 2789, column: 17, scope: !2919)
!2922 = !DILocation(line: 2790, column: 10, scope: !2923)
!2923 = distinct !DILexicalBlock(scope: !2919, file: !1, line: 2790, column: 3)
!2924 = !DILocation(line: 2790, column: 8, scope: !2923)
!2925 = !DILocation(line: 2790, column: 15, scope: !2926)
!2926 = distinct !DILexicalBlock(scope: !2923, file: !1, line: 2790, column: 3)
!2927 = !DILocation(line: 2790, column: 19, scope: !2926)
!2928 = !DILocation(line: 2790, column: 17, scope: !2926)
!2929 = !DILocation(line: 2790, column: 3, scope: !2923)
!2930 = !DILocation(line: 2791, column: 19, scope: !2931)
!2931 = distinct !DILexicalBlock(scope: !2926, file: !1, line: 2790, column: 28)
!2932 = !DILocation(line: 2791, column: 23, scope: !2931)
!2933 = !DILocation(line: 2791, column: 30, scope: !2931)
!2934 = !DILocation(line: 2791, column: 40, scope: !2931)
!2935 = !DILocation(line: 2791, column: 9, scope: !2931)
!2936 = !DILocation(line: 2791, column: 44, scope: !2931)
!2937 = !DILocation(line: 2791, column: 7, scope: !2931)
!2938 = !DILocation(line: 2792, column: 19, scope: !2931)
!2939 = !DILocation(line: 2792, column: 23, scope: !2931)
!2940 = !DILocation(line: 2792, column: 30, scope: !2931)
!2941 = !DILocation(line: 2792, column: 40, scope: !2931)
!2942 = !DILocation(line: 2792, column: 45, scope: !2931)
!2943 = !DILocation(line: 2792, column: 43, scope: !2931)
!2944 = !DILocation(line: 2792, column: 9, scope: !2931)
!2945 = !DILocation(line: 2792, column: 49, scope: !2931)
!2946 = !DILocation(line: 2792, column: 7, scope: !2931)
!2947 = !DILocation(line: 2795, column: 8, scope: !2948)
!2948 = distinct !DILexicalBlock(scope: !2931, file: !1, line: 2795, column: 8)
!2949 = !DILocation(line: 2795, column: 15, scope: !2948)
!2950 = !DILocation(line: 2795, column: 23, scope: !2948)
!2951 = !DILocation(line: 2795, column: 31, scope: !2948)
!2952 = !DILocation(line: 2795, column: 45, scope: !2948)
!2953 = !DILocation(line: 2796, column: 8, scope: !2948)
!2954 = !DILocation(line: 2796, column: 15, scope: !2948)
!2955 = !DILocation(line: 2796, column: 23, scope: !2948)
!2956 = !DILocation(line: 2796, column: 31, scope: !2948)
!2957 = !DILocation(line: 2795, column: 8, scope: !2931)
!2958 = !DILocation(line: 2798, column: 16, scope: !2959)
!2959 = distinct !DILexicalBlock(scope: !2948, file: !1, line: 2797, column: 4)
!2960 = !DILocation(line: 2798, column: 20, scope: !2959)
!2961 = !DILocation(line: 2798, column: 5, scope: !2959)
!2962 = !DILocation(line: 2799, column: 4, scope: !2959)
!2963 = !DILocation(line: 2800, column: 13, scope: !2964)
!2964 = distinct !DILexicalBlock(scope: !2948, file: !1, line: 2800, column: 13)
!2965 = !DILocation(line: 2800, column: 20, scope: !2964)
!2966 = !DILocation(line: 2800, column: 28, scope: !2964)
!2967 = !DILocation(line: 2800, column: 36, scope: !2964)
!2968 = !DILocation(line: 2800, column: 50, scope: !2964)
!2969 = !DILocation(line: 2801, column: 13, scope: !2964)
!2970 = !DILocation(line: 2801, column: 20, scope: !2964)
!2971 = !DILocation(line: 2801, column: 28, scope: !2964)
!2972 = !DILocation(line: 2801, column: 36, scope: !2964)
!2973 = !DILocation(line: 2800, column: 13, scope: !2948)
!2974 = !DILocation(line: 2803, column: 16, scope: !2975)
!2975 = distinct !DILexicalBlock(scope: !2964, file: !1, line: 2802, column: 4)
!2976 = !DILocation(line: 2803, column: 20, scope: !2975)
!2977 = !DILocation(line: 2803, column: 5, scope: !2975)
!2978 = !DILocation(line: 2804, column: 4, scope: !2975)
!2979 = !DILocation(line: 2806, column: 17, scope: !2980)
!2980 = distinct !DILexicalBlock(scope: !2964, file: !1, line: 2805, column: 9)
!2981 = !DILocation(line: 2806, column: 21, scope: !2980)
!2982 = !DILocation(line: 2806, column: 25, scope: !2980)
!2983 = !DILocation(line: 2806, column: 5, scope: !2980)
!2984 = !DILocation(line: 2808, column: 25, scope: !2931)
!2985 = !DILocation(line: 2808, column: 29, scope: !2931)
!2986 = !DILocation(line: 2808, column: 36, scope: !2931)
!2987 = !DILocation(line: 2808, column: 46, scope: !2931)
!2988 = !DILocation(line: 2808, column: 15, scope: !2931)
!2989 = !DILocation(line: 2808, column: 50, scope: !2931)
!2990 = !DILocation(line: 2808, column: 54, scope: !2931)
!2991 = !DILocation(line: 2808, column: 4, scope: !2931)
!2992 = !DILocation(line: 2809, column: 23, scope: !2931)
!2993 = !DILocation(line: 2809, column: 27, scope: !2931)
!2994 = !DILocation(line: 2809, column: 31, scope: !2931)
!2995 = !DILocation(line: 2809, column: 38, scope: !2931)
!2996 = !DILocation(line: 2809, column: 48, scope: !2931)
!2997 = !DILocation(line: 2809, column: 51, scope: !2931)
!2998 = !DILocation(line: 2809, column: 55, scope: !2931)
!2999 = !DILocation(line: 2809, column: 4, scope: !2931)
!3000 = !DILocation(line: 2810, column: 3, scope: !2931)
!3001 = !DILocation(line: 2790, column: 24, scope: !2926)
!3002 = !DILocation(line: 2790, column: 3, scope: !2926)
!3003 = distinct !{!3003, !2929, !3004}
!3004 = !DILocation(line: 2810, column: 3, scope: !2923)
!3005 = !DILocation(line: 2811, column: 10, scope: !3006)
!3006 = distinct !DILexicalBlock(scope: !2919, file: !1, line: 2811, column: 3)
!3007 = !DILocation(line: 2811, column: 8, scope: !3006)
!3008 = !DILocation(line: 2811, column: 15, scope: !3009)
!3009 = distinct !DILexicalBlock(scope: !3006, file: !1, line: 2811, column: 3)
!3010 = !DILocation(line: 2811, column: 19, scope: !3009)
!3011 = !DILocation(line: 2811, column: 17, scope: !3009)
!3012 = !DILocation(line: 2811, column: 3, scope: !3006)
!3013 = !DILocation(line: 2812, column: 19, scope: !3009)
!3014 = !DILocation(line: 2812, column: 23, scope: !3009)
!3015 = !DILocation(line: 2812, column: 30, scope: !3009)
!3016 = !DILocation(line: 2812, column: 40, scope: !3009)
!3017 = !DILocation(line: 2812, column: 45, scope: !3009)
!3018 = !DILocation(line: 2812, column: 43, scope: !3009)
!3019 = !DILocation(line: 2812, column: 48, scope: !3009)
!3020 = !DILocation(line: 2812, column: 55, scope: !3009)
!3021 = !DILocation(line: 2812, column: 65, scope: !3009)
!3022 = !DILocation(line: 2812, column: 4, scope: !3009)
!3023 = !DILocation(line: 2811, column: 24, scope: !3009)
!3024 = !DILocation(line: 2811, column: 3, scope: !3009)
!3025 = distinct !{!3025, !3012, !3026}
!3026 = !DILocation(line: 2812, column: 66, scope: !3006)
!3027 = !DILocation(line: 2813, column: 2, scope: !2919)
!3028 = !DILocation(line: 2815, column: 10, scope: !2702)
!3029 = !DILocation(line: 2815, column: 14, scope: !2702)
!3030 = !DILocation(line: 2815, column: 2, scope: !2702)
!3031 = !DILocation(line: 2817, column: 9, scope: !3032)
!3032 = distinct !DILexicalBlock(scope: !3033, file: !1, line: 2817, column: 9)
!3033 = distinct !DILexicalBlock(scope: !2702, file: !1, line: 2815, column: 25)
!3034 = !DILocation(line: 2817, column: 11, scope: !3032)
!3035 = !DILocation(line: 2817, column: 16, scope: !3032)
!3036 = !DILocation(line: 2817, column: 38, scope: !3032)
!3037 = !DILocation(line: 2817, column: 42, scope: !3032)
!3038 = !DILocation(line: 2817, column: 19, scope: !3032)
!3039 = !DILocation(line: 2817, column: 45, scope: !3032)
!3040 = !DILocation(line: 2817, column: 9, scope: !3033)
!3041 = !DILocation(line: 2818, column: 26, scope: !3032)
!3042 = !DILocation(line: 2818, column: 30, scope: !3032)
!3043 = !DILocation(line: 2818, column: 5, scope: !3032)
!3044 = !DILocation(line: 2819, column: 4, scope: !3033)
!3045 = !DILocation(line: 2821, column: 21, scope: !3033)
!3046 = !DILocation(line: 2821, column: 25, scope: !3033)
!3047 = !DILocation(line: 2821, column: 29, scope: !3033)
!3048 = !DILocation(line: 2821, column: 4, scope: !3033)
!3049 = !DILocation(line: 2822, column: 4, scope: !3033)
!3050 = !DILocation(line: 2824, column: 22, scope: !3033)
!3051 = !DILocation(line: 2824, column: 26, scope: !3033)
!3052 = !DILocation(line: 2824, column: 30, scope: !3033)
!3053 = !DILocation(line: 2824, column: 4, scope: !3033)
!3054 = !DILocation(line: 2825, column: 4, scope: !3033)
!3055 = !DILocation(line: 2827, column: 23, scope: !3033)
!3056 = !DILocation(line: 2827, column: 27, scope: !3033)
!3057 = !DILocation(line: 2827, column: 31, scope: !3033)
!3058 = !DILocation(line: 2827, column: 4, scope: !3033)
!3059 = !DILocation(line: 2828, column: 4, scope: !3033)
!3060 = !DILocation(line: 2830, column: 26, scope: !3033)
!3061 = !DILocation(line: 2830, column: 30, scope: !3033)
!3062 = !DILocation(line: 2830, column: 34, scope: !3033)
!3063 = !DILocation(line: 2830, column: 4, scope: !3033)
!3064 = !DILocation(line: 2831, column: 4, scope: !3033)
!3065 = !DILocation(line: 2833, column: 1, scope: !2702)
!3066 = distinct !DISubprogram(name: "bevel_build_edge_polygons", scope: !1, file: !1, line: 3387, type: !3067, scopeLine: 3388, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!3067 = !DISubroutineType(types: !3068)
!3068 = !{null, !321, !801, !138}
!3069 = !DILocalVariable(name: "bm", arg: 1, scope: !3066, file: !1, line: 3387, type: !321)
!3070 = !DILocation(line: 3387, column: 46, scope: !3066)
!3071 = !DILocalVariable(name: "bp", arg: 2, scope: !3066, file: !1, line: 3387, type: !801)
!3072 = !DILocation(line: 3387, column: 63, scope: !3066)
!3073 = !DILocalVariable(name: "bme", arg: 3, scope: !3066, file: !1, line: 3387, type: !138)
!3074 = !DILocation(line: 3387, column: 75, scope: !3066)
!3075 = !DILocalVariable(name: "bv1", scope: !3066, file: !1, line: 3389, type: !283)
!3076 = !DILocation(line: 3389, column: 11, scope: !3066)
!3077 = !DILocalVariable(name: "bv2", scope: !3066, file: !1, line: 3389, type: !283)
!3078 = !DILocation(line: 3389, column: 17, scope: !3066)
!3079 = !DILocalVariable(name: "bmv1", scope: !3066, file: !1, line: 3390, type: !51)
!3080 = !DILocation(line: 3390, column: 10, scope: !3066)
!3081 = !DILocalVariable(name: "bmv2", scope: !3066, file: !1, line: 3390, type: !51)
!3082 = !DILocation(line: 3390, column: 17, scope: !3066)
!3083 = !DILocalVariable(name: "bmv3", scope: !3066, file: !1, line: 3390, type: !51)
!3084 = !DILocation(line: 3390, column: 24, scope: !3066)
!3085 = !DILocalVariable(name: "bmv4", scope: !3066, file: !1, line: 3390, type: !51)
!3086 = !DILocation(line: 3390, column: 31, scope: !3066)
!3087 = !DILocalVariable(name: "bmv1i", scope: !3066, file: !1, line: 3390, type: !51)
!3088 = !DILocation(line: 3390, column: 38, scope: !3066)
!3089 = !DILocalVariable(name: "bmv2i", scope: !3066, file: !1, line: 3390, type: !51)
!3090 = !DILocation(line: 3390, column: 46, scope: !3066)
!3091 = !DILocalVariable(name: "bmv3i", scope: !3066, file: !1, line: 3390, type: !51)
!3092 = !DILocation(line: 3390, column: 54, scope: !3066)
!3093 = !DILocalVariable(name: "bmv4i", scope: !3066, file: !1, line: 3390, type: !51)
!3094 = !DILocation(line: 3390, column: 62, scope: !3066)
!3095 = !DILocalVariable(name: "vm1", scope: !3066, file: !1, line: 3391, type: !298)
!3096 = !DILocation(line: 3391, column: 9, scope: !3066)
!3097 = !DILocalVariable(name: "vm2", scope: !3066, file: !1, line: 3391, type: !298)
!3098 = !DILocation(line: 3391, column: 15, scope: !3066)
!3099 = !DILocalVariable(name: "e1", scope: !3066, file: !1, line: 3392, type: !130)
!3100 = !DILocation(line: 3392, column: 12, scope: !3066)
!3101 = !DILocalVariable(name: "e2", scope: !3066, file: !1, line: 3392, type: !130)
!3102 = !DILocation(line: 3392, column: 17, scope: !3066)
!3103 = !DILocalVariable(name: "bme1", scope: !3066, file: !1, line: 3393, type: !138)
!3104 = !DILocation(line: 3393, column: 10, scope: !3066)
!3105 = !DILocalVariable(name: "bme2", scope: !3066, file: !1, line: 3393, type: !138)
!3106 = !DILocation(line: 3393, column: 17, scope: !3066)
!3107 = !DILocalVariable(name: "f1", scope: !3066, file: !1, line: 3394, type: !141)
!3108 = !DILocation(line: 3394, column: 10, scope: !3066)
!3109 = !DILocalVariable(name: "f2", scope: !3066, file: !1, line: 3394, type: !141)
!3110 = !DILocation(line: 3394, column: 15, scope: !3066)
!3111 = !DILocalVariable(name: "f", scope: !3066, file: !1, line: 3394, type: !141)
!3112 = !DILocation(line: 3394, column: 20, scope: !3066)
!3113 = !DILocalVariable(name: "k", scope: !3066, file: !1, line: 3395, type: !63)
!3114 = !DILocation(line: 3395, column: 6, scope: !3066)
!3115 = !DILocalVariable(name: "nseg", scope: !3066, file: !1, line: 3395, type: !63)
!3116 = !DILocation(line: 3395, column: 9, scope: !3066)
!3117 = !DILocalVariable(name: "i1", scope: !3066, file: !1, line: 3395, type: !63)
!3118 = !DILocation(line: 3395, column: 15, scope: !3066)
!3119 = !DILocalVariable(name: "i2", scope: !3066, file: !1, line: 3395, type: !63)
!3120 = !DILocation(line: 3395, column: 19, scope: !3066)
!3121 = !DILocalVariable(name: "odd", scope: !3066, file: !1, line: 3395, type: !63)
!3122 = !DILocation(line: 3395, column: 23, scope: !3066)
!3123 = !DILocalVariable(name: "mid", scope: !3066, file: !1, line: 3395, type: !63)
!3124 = !DILocation(line: 3395, column: 28, scope: !3066)
!3125 = !DILocalVariable(name: "mat_nr", scope: !3066, file: !1, line: 3396, type: !63)
!3126 = !DILocation(line: 3396, column: 6, scope: !3066)
!3127 = !DILocation(line: 3396, column: 15, scope: !3066)
!3128 = !DILocation(line: 3396, column: 19, scope: !3066)
!3129 = !DILocation(line: 3398, column: 27, scope: !3130)
!3130 = distinct !DILexicalBlock(scope: !3066, file: !1, line: 3398, column: 6)
!3131 = !DILocation(line: 3398, column: 7, scope: !3130)
!3132 = !DILocation(line: 3398, column: 6, scope: !3066)
!3133 = !DILocation(line: 3399, column: 3, scope: !3130)
!3134 = !DILocation(line: 3401, column: 21, scope: !3066)
!3135 = !DILocation(line: 3401, column: 25, scope: !3066)
!3136 = !DILocation(line: 3401, column: 30, scope: !3066)
!3137 = !DILocation(line: 3401, column: 8, scope: !3066)
!3138 = !DILocation(line: 3401, column: 6, scope: !3066)
!3139 = !DILocation(line: 3402, column: 21, scope: !3066)
!3140 = !DILocation(line: 3402, column: 25, scope: !3066)
!3141 = !DILocation(line: 3402, column: 30, scope: !3066)
!3142 = !DILocation(line: 3402, column: 8, scope: !3066)
!3143 = !DILocation(line: 3402, column: 6, scope: !3066)
!3144 = !DILocation(line: 3406, column: 22, scope: !3066)
!3145 = !DILocation(line: 3406, column: 27, scope: !3066)
!3146 = !DILocation(line: 3406, column: 7, scope: !3066)
!3147 = !DILocation(line: 3406, column: 5, scope: !3066)
!3148 = !DILocation(line: 3407, column: 22, scope: !3066)
!3149 = !DILocation(line: 3407, column: 27, scope: !3066)
!3150 = !DILocation(line: 3407, column: 7, scope: !3066)
!3151 = !DILocation(line: 3407, column: 5, scope: !3066)
!3152 = !DILocation(line: 3417, column: 9, scope: !3066)
!3153 = !DILocation(line: 3417, column: 13, scope: !3066)
!3154 = !DILocation(line: 3417, column: 7, scope: !3066)
!3155 = !DILocation(line: 3420, column: 9, scope: !3066)
!3156 = !DILocation(line: 3420, column: 13, scope: !3066)
!3157 = !DILocation(line: 3420, column: 20, scope: !3066)
!3158 = !DILocation(line: 3420, column: 23, scope: !3066)
!3159 = !DILocation(line: 3420, column: 7, scope: !3066)
!3160 = !DILocation(line: 3421, column: 9, scope: !3066)
!3161 = !DILocation(line: 3421, column: 13, scope: !3066)
!3162 = !DILocation(line: 3421, column: 21, scope: !3066)
!3163 = !DILocation(line: 3421, column: 24, scope: !3066)
!3164 = !DILocation(line: 3421, column: 7, scope: !3066)
!3165 = !DILocation(line: 3422, column: 9, scope: !3066)
!3166 = !DILocation(line: 3422, column: 13, scope: !3066)
!3167 = !DILocation(line: 3422, column: 21, scope: !3066)
!3168 = !DILocation(line: 3422, column: 24, scope: !3066)
!3169 = !DILocation(line: 3422, column: 7, scope: !3066)
!3170 = !DILocation(line: 3423, column: 9, scope: !3066)
!3171 = !DILocation(line: 3423, column: 13, scope: !3066)
!3172 = !DILocation(line: 3423, column: 20, scope: !3066)
!3173 = !DILocation(line: 3423, column: 23, scope: !3066)
!3174 = !DILocation(line: 3423, column: 7, scope: !3066)
!3175 = !DILocation(line: 3427, column: 7, scope: !3066)
!3176 = !DILocation(line: 3427, column: 11, scope: !3066)
!3177 = !DILocation(line: 3427, column: 5, scope: !3066)
!3178 = !DILocation(line: 3428, column: 7, scope: !3066)
!3179 = !DILocation(line: 3428, column: 11, scope: !3066)
!3180 = !DILocation(line: 3428, column: 5, scope: !3066)
!3181 = !DILocation(line: 3429, column: 7, scope: !3066)
!3182 = !DILocation(line: 3429, column: 11, scope: !3066)
!3183 = !DILocation(line: 3429, column: 18, scope: !3066)
!3184 = !DILocation(line: 3429, column: 5, scope: !3066)
!3185 = !DILocation(line: 3430, column: 7, scope: !3066)
!3186 = !DILocation(line: 3430, column: 11, scope: !3066)
!3187 = !DILocation(line: 3430, column: 18, scope: !3066)
!3188 = !DILocation(line: 3430, column: 5, scope: !3066)
!3189 = !DILocation(line: 3431, column: 8, scope: !3066)
!3190 = !DILocation(line: 3431, column: 13, scope: !3066)
!3191 = !DILocation(line: 3431, column: 6, scope: !3066)
!3192 = !DILocation(line: 3432, column: 8, scope: !3066)
!3193 = !DILocation(line: 3432, column: 13, scope: !3066)
!3194 = !DILocation(line: 3432, column: 6, scope: !3066)
!3195 = !DILocation(line: 3434, column: 6, scope: !3196)
!3196 = distinct !DILexicalBlock(scope: !3066, file: !1, line: 3434, column: 6)
!3197 = !DILocation(line: 3434, column: 11, scope: !3196)
!3198 = !DILocation(line: 3434, column: 6, scope: !3066)
!3199 = !DILocation(line: 3435, column: 28, scope: !3200)
!3200 = distinct !DILexicalBlock(scope: !3196, file: !1, line: 3434, column: 17)
!3201 = !DILocation(line: 3435, column: 32, scope: !3200)
!3202 = !DILocation(line: 3435, column: 38, scope: !3200)
!3203 = !DILocation(line: 3435, column: 44, scope: !3200)
!3204 = !DILocation(line: 3435, column: 50, scope: !3200)
!3205 = !DILocation(line: 3435, column: 56, scope: !3200)
!3206 = !DILocation(line: 3435, column: 60, scope: !3200)
!3207 = !DILocation(line: 3435, column: 64, scope: !3200)
!3208 = !DILocation(line: 3435, column: 72, scope: !3200)
!3209 = !DILocation(line: 3435, column: 76, scope: !3200)
!3210 = !DILocation(line: 3435, column: 3, scope: !3200)
!3211 = !DILocation(line: 3436, column: 2, scope: !3200)
!3212 = !DILocation(line: 3438, column: 11, scope: !3213)
!3213 = distinct !DILexicalBlock(scope: !3196, file: !1, line: 3437, column: 7)
!3214 = !DILocation(line: 3438, column: 9, scope: !3213)
!3215 = !DILocation(line: 3439, column: 11, scope: !3213)
!3216 = !DILocation(line: 3439, column: 9, scope: !3213)
!3217 = !DILocation(line: 3440, column: 9, scope: !3213)
!3218 = !DILocation(line: 3440, column: 14, scope: !3213)
!3219 = !DILocation(line: 3440, column: 7, scope: !3213)
!3220 = !DILocation(line: 3441, column: 9, scope: !3213)
!3221 = !DILocation(line: 3441, column: 14, scope: !3213)
!3222 = !DILocation(line: 3441, column: 7, scope: !3213)
!3223 = !DILocation(line: 3442, column: 10, scope: !3224)
!3224 = distinct !DILexicalBlock(scope: !3213, file: !1, line: 3442, column: 3)
!3225 = !DILocation(line: 3442, column: 8, scope: !3224)
!3226 = !DILocation(line: 3442, column: 15, scope: !3227)
!3227 = distinct !DILexicalBlock(scope: !3224, file: !1, line: 3442, column: 3)
!3228 = !DILocation(line: 3442, column: 20, scope: !3227)
!3229 = !DILocation(line: 3442, column: 17, scope: !3227)
!3230 = !DILocation(line: 3442, column: 3, scope: !3224)
!3231 = !DILocation(line: 3443, column: 22, scope: !3232)
!3232 = distinct !DILexicalBlock(scope: !3227, file: !1, line: 3442, column: 31)
!3233 = !DILocation(line: 3443, column: 27, scope: !3232)
!3234 = !DILocation(line: 3443, column: 34, scope: !3232)
!3235 = !DILocation(line: 3443, column: 12, scope: !3232)
!3236 = !DILocation(line: 3443, column: 38, scope: !3232)
!3237 = !DILocation(line: 3443, column: 10, scope: !3232)
!3238 = !DILocation(line: 3444, column: 22, scope: !3232)
!3239 = !DILocation(line: 3444, column: 27, scope: !3232)
!3240 = !DILocation(line: 3444, column: 34, scope: !3232)
!3241 = !DILocation(line: 3444, column: 41, scope: !3232)
!3242 = !DILocation(line: 3444, column: 39, scope: !3232)
!3243 = !DILocation(line: 3444, column: 12, scope: !3232)
!3244 = !DILocation(line: 3444, column: 45, scope: !3232)
!3245 = !DILocation(line: 3444, column: 10, scope: !3232)
!3246 = !DILocation(line: 3445, column: 8, scope: !3247)
!3247 = distinct !DILexicalBlock(scope: !3232, file: !1, line: 3445, column: 8)
!3248 = !DILocation(line: 3445, column: 12, scope: !3247)
!3249 = !DILocation(line: 3445, column: 15, scope: !3247)
!3250 = !DILocation(line: 3445, column: 20, scope: !3247)
!3251 = !DILocation(line: 3445, column: 24, scope: !3247)
!3252 = !DILocation(line: 3445, column: 17, scope: !3247)
!3253 = !DILocation(line: 3445, column: 8, scope: !3232)
!3254 = !DILocation(line: 3446, column: 30, scope: !3255)
!3255 = distinct !DILexicalBlock(scope: !3247, file: !1, line: 3445, column: 29)
!3256 = !DILocation(line: 3446, column: 34, scope: !3255)
!3257 = !DILocation(line: 3446, column: 41, scope: !3255)
!3258 = !DILocation(line: 3446, column: 48, scope: !3255)
!3259 = !DILocation(line: 3446, column: 55, scope: !3255)
!3260 = !DILocation(line: 3446, column: 62, scope: !3255)
!3261 = !DILocation(line: 3446, column: 66, scope: !3255)
!3262 = !DILocation(line: 3446, column: 70, scope: !3255)
!3263 = !DILocation(line: 3446, column: 78, scope: !3255)
!3264 = !DILocation(line: 3446, column: 82, scope: !3255)
!3265 = !DILocation(line: 3446, column: 5, scope: !3255)
!3266 = !DILocation(line: 3447, column: 4, scope: !3255)
!3267 = !DILocation(line: 3449, column: 10, scope: !3268)
!3268 = distinct !DILexicalBlock(scope: !3247, file: !1, line: 3448, column: 9)
!3269 = !DILocation(line: 3449, column: 15, scope: !3268)
!3270 = !DILocation(line: 3449, column: 12, scope: !3268)
!3271 = !DILocation(line: 3449, column: 9, scope: !3268)
!3272 = !DILocation(line: 3449, column: 22, scope: !3268)
!3273 = !DILocation(line: 3449, column: 27, scope: !3268)
!3274 = !DILocation(line: 3449, column: 7, scope: !3268)
!3275 = !DILocation(line: 3450, column: 25, scope: !3268)
!3276 = !DILocation(line: 3450, column: 29, scope: !3268)
!3277 = !DILocation(line: 3450, column: 36, scope: !3268)
!3278 = !DILocation(line: 3450, column: 43, scope: !3268)
!3279 = !DILocation(line: 3450, column: 50, scope: !3268)
!3280 = !DILocation(line: 3450, column: 57, scope: !3268)
!3281 = !DILocation(line: 3450, column: 60, scope: !3268)
!3282 = !DILocation(line: 3450, column: 5, scope: !3268)
!3283 = !DILocation(line: 3452, column: 12, scope: !3232)
!3284 = !DILocation(line: 3452, column: 10, scope: !3232)
!3285 = !DILocation(line: 3453, column: 12, scope: !3232)
!3286 = !DILocation(line: 3453, column: 10, scope: !3232)
!3287 = !DILocation(line: 3454, column: 3, scope: !3232)
!3288 = !DILocation(line: 3442, column: 27, scope: !3227)
!3289 = !DILocation(line: 3442, column: 3, scope: !3227)
!3290 = distinct !{!3290, !3230, !3291}
!3291 = !DILocation(line: 3454, column: 3, scope: !3224)
!3292 = !DILocation(line: 3455, column: 8, scope: !3293)
!3293 = distinct !DILexicalBlock(scope: !3213, file: !1, line: 3455, column: 7)
!3294 = !DILocation(line: 3455, column: 12, scope: !3293)
!3295 = !DILocation(line: 3455, column: 16, scope: !3293)
!3296 = !DILocation(line: 3455, column: 20, scope: !3293)
!3297 = !DILocation(line: 3455, column: 7, scope: !3213)
!3298 = !DILocation(line: 3456, column: 18, scope: !3299)
!3299 = distinct !DILexicalBlock(scope: !3293, file: !1, line: 3455, column: 29)
!3300 = !DILocation(line: 3456, column: 32, scope: !3299)
!3301 = !DILocation(line: 3456, column: 37, scope: !3299)
!3302 = !DILocation(line: 3456, column: 44, scope: !3299)
!3303 = !DILocation(line: 3456, column: 22, scope: !3299)
!3304 = !DILocation(line: 3456, column: 50, scope: !3299)
!3305 = !DILocation(line: 3456, column: 4, scope: !3299)
!3306 = !DILocation(line: 3457, column: 18, scope: !3299)
!3307 = !DILocation(line: 3457, column: 32, scope: !3299)
!3308 = !DILocation(line: 3457, column: 37, scope: !3299)
!3309 = !DILocation(line: 3457, column: 44, scope: !3299)
!3310 = !DILocation(line: 3457, column: 22, scope: !3299)
!3311 = !DILocation(line: 3457, column: 50, scope: !3299)
!3312 = !DILocation(line: 3457, column: 4, scope: !3299)
!3313 = !DILocation(line: 3458, column: 3, scope: !3299)
!3314 = !DILocation(line: 3462, column: 7, scope: !3315)
!3315 = distinct !DILexicalBlock(scope: !3066, file: !1, line: 3462, column: 6)
!3316 = !DILocation(line: 3462, column: 11, scope: !3315)
!3317 = !DILocation(line: 3462, column: 19, scope: !3315)
!3318 = !DILocation(line: 3462, column: 22, scope: !3315)
!3319 = !DILocation(line: 3462, column: 27, scope: !3315)
!3320 = !DILocation(line: 3462, column: 34, scope: !3315)
!3321 = !DILocation(line: 3462, column: 44, scope: !3315)
!3322 = !DILocation(line: 3462, column: 6, scope: !3066)
!3323 = !DILocation(line: 3463, column: 21, scope: !3315)
!3324 = !DILocation(line: 3463, column: 25, scope: !3315)
!3325 = !DILocation(line: 3463, column: 30, scope: !3315)
!3326 = !DILocation(line: 3463, column: 3, scope: !3315)
!3327 = !DILocation(line: 3464, column: 7, scope: !3328)
!3328 = distinct !DILexicalBlock(scope: !3066, file: !1, line: 3464, column: 6)
!3329 = !DILocation(line: 3464, column: 11, scope: !3328)
!3330 = !DILocation(line: 3464, column: 19, scope: !3328)
!3331 = !DILocation(line: 3464, column: 22, scope: !3328)
!3332 = !DILocation(line: 3464, column: 27, scope: !3328)
!3333 = !DILocation(line: 3464, column: 34, scope: !3328)
!3334 = !DILocation(line: 3464, column: 44, scope: !3328)
!3335 = !DILocation(line: 3464, column: 6, scope: !3066)
!3336 = !DILocation(line: 3465, column: 21, scope: !3328)
!3337 = !DILocation(line: 3465, column: 25, scope: !3328)
!3338 = !DILocation(line: 3465, column: 30, scope: !3328)
!3339 = !DILocation(line: 3465, column: 3, scope: !3328)
!3340 = !DILocation(line: 3468, column: 24, scope: !3066)
!3341 = !DILocation(line: 3468, column: 30, scope: !3066)
!3342 = !DILocation(line: 3468, column: 9, scope: !3066)
!3343 = !DILocation(line: 3468, column: 7, scope: !3066)
!3344 = !DILocation(line: 3469, column: 24, scope: !3066)
!3345 = !DILocation(line: 3469, column: 30, scope: !3066)
!3346 = !DILocation(line: 3469, column: 9, scope: !3066)
!3347 = !DILocation(line: 3469, column: 7, scope: !3066)
!3348 = !DILocation(line: 3471, column: 21, scope: !3066)
!3349 = !DILocation(line: 3471, column: 25, scope: !3066)
!3350 = !DILocation(line: 3471, column: 29, scope: !3066)
!3351 = !DILocation(line: 3471, column: 34, scope: !3066)
!3352 = !DILocation(line: 3471, column: 2, scope: !3066)
!3353 = !DILocation(line: 3472, column: 21, scope: !3066)
!3354 = !DILocation(line: 3472, column: 25, scope: !3066)
!3355 = !DILocation(line: 3472, column: 29, scope: !3066)
!3356 = !DILocation(line: 3472, column: 34, scope: !3066)
!3357 = !DILocation(line: 3472, column: 2, scope: !3066)
!3358 = !DILocation(line: 3475, column: 28, scope: !3359)
!3359 = distinct !DILexicalBlock(scope: !3066, file: !1, line: 3475, column: 6)
!3360 = !DILocation(line: 3475, column: 6, scope: !3359)
!3361 = !DILocation(line: 3475, column: 6, scope: !3066)
!3362 = !DILocation(line: 3476, column: 25, scope: !3363)
!3363 = distinct !DILexicalBlock(scope: !3359, file: !1, line: 3475, column: 34)
!3364 = !DILocation(line: 3476, column: 29, scope: !3363)
!3365 = !DILocation(line: 3476, column: 34, scope: !3363)
!3366 = !DILocation(line: 3476, column: 39, scope: !3363)
!3367 = !DILocation(line: 3476, column: 43, scope: !3363)
!3368 = !DILocation(line: 3476, column: 3, scope: !3363)
!3369 = !DILocation(line: 3477, column: 2, scope: !3363)
!3370 = !DILocation(line: 3478, column: 28, scope: !3371)
!3371 = distinct !DILexicalBlock(scope: !3066, file: !1, line: 3478, column: 6)
!3372 = !DILocation(line: 3478, column: 6, scope: !3371)
!3373 = !DILocation(line: 3478, column: 6, scope: !3066)
!3374 = !DILocation(line: 3479, column: 25, scope: !3375)
!3375 = distinct !DILexicalBlock(scope: !3371, file: !1, line: 3478, column: 34)
!3376 = !DILocation(line: 3479, column: 29, scope: !3375)
!3377 = !DILocation(line: 3479, column: 34, scope: !3375)
!3378 = !DILocation(line: 3479, column: 39, scope: !3375)
!3379 = !DILocation(line: 3479, column: 43, scope: !3375)
!3380 = !DILocation(line: 3479, column: 3, scope: !3375)
!3381 = !DILocation(line: 3480, column: 2, scope: !3375)
!3382 = !DILocation(line: 3481, column: 1, scope: !3066)
!3383 = distinct !DISubprogram(name: "bevel_rebuild_existing_polygons", scope: !1, file: !1, line: 3232, type: !3384, scopeLine: 3233, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!3384 = !DISubroutineType(types: !3385)
!3385 = !{null, !321, !801, !51}
!3386 = !DILocalVariable(name: "bm", arg: 1, scope: !3383, file: !1, line: 3232, type: !321)
!3387 = !DILocation(line: 3232, column: 52, scope: !3383)
!3388 = !DILocalVariable(name: "bp", arg: 2, scope: !3383, file: !1, line: 3232, type: !801)
!3389 = !DILocation(line: 3232, column: 69, scope: !3383)
!3390 = !DILocalVariable(name: "v", arg: 3, scope: !3383, file: !1, line: 3232, type: !51)
!3391 = !DILocation(line: 3232, column: 81, scope: !3383)
!3392 = !DILocalVariable(name: "faces_stack", scope: !3383, file: !1, line: 3234, type: !3393)
!3393 = !DICompositeType(tag: DW_TAG_array_type, baseType: !61, size: 1024, elements: !388)
!3394 = !DILocation(line: 3234, column: 11, scope: !3383)
!3395 = !DILocalVariable(name: "faces_len", scope: !3383, file: !1, line: 3235, type: !63)
!3396 = !DILocation(line: 3235, column: 11, scope: !3383)
!3397 = !DILocalVariable(name: "f_index", scope: !3383, file: !1, line: 3235, type: !63)
!3398 = !DILocation(line: 3235, column: 22, scope: !3383)
!3399 = !DILocalVariable(name: "faces", scope: !3383, file: !1, line: 3236, type: !313)
!3400 = !DILocation(line: 3236, column: 11, scope: !3383)
!3401 = !DILocation(line: 3236, column: 37, scope: !3383)
!3402 = !DILocation(line: 3236, column: 59, scope: !3383)
!3403 = !DILocation(line: 3237, column: 37, scope: !3383)
!3404 = !DILocation(line: 3236, column: 19, scope: !3383)
!3405 = !DILocation(line: 3239, column: 6, scope: !3406)
!3406 = distinct !DILexicalBlock(scope: !3383, file: !1, line: 3239, column: 6)
!3407 = !DILocation(line: 3239, column: 6, scope: !3383)
!3408 = !DILocation(line: 3240, column: 16, scope: !3409)
!3409 = distinct !DILexicalBlock(scope: !3410, file: !1, line: 3240, column: 3)
!3410 = distinct !DILexicalBlock(scope: !3406, file: !1, line: 3239, column: 29)
!3411 = !DILocation(line: 3240, column: 8, scope: !3409)
!3412 = !DILocation(line: 3240, column: 21, scope: !3413)
!3413 = distinct !DILexicalBlock(scope: !3409, file: !1, line: 3240, column: 3)
!3414 = !DILocation(line: 3240, column: 31, scope: !3413)
!3415 = !DILocation(line: 3240, column: 29, scope: !3413)
!3416 = !DILocation(line: 3240, column: 3, scope: !3409)
!3417 = !DILocalVariable(name: "f", scope: !3418, file: !1, line: 3241, type: !141)
!3418 = distinct !DILexicalBlock(scope: !3413, file: !1, line: 3240, column: 53)
!3419 = !DILocation(line: 3241, column: 12, scope: !3418)
!3420 = !DILocation(line: 3241, column: 16, scope: !3418)
!3421 = !DILocation(line: 3241, column: 22, scope: !3418)
!3422 = !DILocation(line: 3242, column: 28, scope: !3423)
!3423 = distinct !DILexicalBlock(scope: !3418, file: !1, line: 3242, column: 8)
!3424 = !DILocation(line: 3242, column: 32, scope: !3423)
!3425 = !DILocation(line: 3242, column: 36, scope: !3423)
!3426 = !DILocation(line: 3242, column: 8, scope: !3423)
!3427 = !DILocation(line: 3242, column: 8, scope: !3418)
!3428 = !DILocation(line: 3243, column: 18, scope: !3429)
!3429 = distinct !DILexicalBlock(scope: !3423, file: !1, line: 3242, column: 40)
!3430 = !DILocation(line: 3243, column: 22, scope: !3429)
!3431 = !DILocation(line: 3243, column: 5, scope: !3429)
!3432 = !DILocation(line: 3244, column: 4, scope: !3429)
!3433 = !DILocation(line: 3245, column: 3, scope: !3418)
!3434 = !DILocation(line: 3240, column: 49, scope: !3413)
!3435 = !DILocation(line: 3240, column: 3, scope: !3413)
!3436 = distinct !{!3436, !3416, !3437}
!3437 = !DILocation(line: 3245, column: 3, scope: !3409)
!3438 = !DILocation(line: 3247, column: 7, scope: !3439)
!3439 = distinct !DILexicalBlock(scope: !3410, file: !1, line: 3247, column: 7)
!3440 = !DILocation(line: 3247, column: 27, scope: !3439)
!3441 = !DILocation(line: 3247, column: 16, scope: !3439)
!3442 = !DILocation(line: 3247, column: 13, scope: !3439)
!3443 = !DILocation(line: 3247, column: 7, scope: !3410)
!3444 = !DILocation(line: 3248, column: 4, scope: !3445)
!3445 = distinct !DILexicalBlock(scope: !3439, file: !1, line: 3247, column: 40)
!3446 = !DILocation(line: 3248, column: 14, scope: !3445)
!3447 = !DILocation(line: 3249, column: 3, scope: !3445)
!3448 = !DILocation(line: 3250, column: 2, scope: !3410)
!3449 = !DILocation(line: 3251, column: 1, scope: !3383)
!3450 = distinct !DISubprogram(name: "bevel_reattach_wires", scope: !1, file: !1, line: 3254, type: !3384, scopeLine: 3255, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!3451 = !DILocalVariable(name: "bm", arg: 1, scope: !3450, file: !1, line: 3254, type: !321)
!3452 = !DILocation(line: 3254, column: 41, scope: !3450)
!3453 = !DILocalVariable(name: "bp", arg: 2, scope: !3450, file: !1, line: 3254, type: !801)
!3454 = !DILocation(line: 3254, column: 58, scope: !3450)
!3455 = !DILocalVariable(name: "v", arg: 3, scope: !3450, file: !1, line: 3254, type: !51)
!3456 = !DILocation(line: 3254, column: 70, scope: !3450)
!3457 = !DILocalVariable(name: "e", scope: !3450, file: !1, line: 3256, type: !138)
!3458 = !DILocation(line: 3256, column: 10, scope: !3450)
!3459 = !DILocalVariable(name: "vclosest", scope: !3450, file: !1, line: 3257, type: !51)
!3460 = !DILocation(line: 3257, column: 10, scope: !3450)
!3461 = !DILocalVariable(name: "vother", scope: !3450, file: !1, line: 3257, type: !51)
!3462 = !DILocation(line: 3257, column: 21, scope: !3450)
!3463 = !DILocalVariable(name: "votherclosest", scope: !3450, file: !1, line: 3257, type: !51)
!3464 = !DILocation(line: 3257, column: 30, scope: !3450)
!3465 = !DILocalVariable(name: "bv", scope: !3450, file: !1, line: 3258, type: !283)
!3466 = !DILocation(line: 3258, column: 11, scope: !3450)
!3467 = !DILocalVariable(name: "bvother", scope: !3450, file: !1, line: 3258, type: !283)
!3468 = !DILocation(line: 3258, column: 16, scope: !3450)
!3469 = !DILocalVariable(name: "bndv", scope: !3450, file: !1, line: 3259, type: !121)
!3470 = !DILocation(line: 3259, column: 13, scope: !3450)
!3471 = !DILocalVariable(name: "bndvother", scope: !3450, file: !1, line: 3259, type: !121)
!3472 = !DILocation(line: 3259, column: 20, scope: !3450)
!3473 = !DILocalVariable(name: "d", scope: !3450, file: !1, line: 3260, type: !76)
!3474 = !DILocation(line: 3260, column: 8, scope: !3450)
!3475 = !DILocalVariable(name: "dclosest", scope: !3450, file: !1, line: 3260, type: !76)
!3476 = !DILocation(line: 3260, column: 11, scope: !3450)
!3477 = !DILocalVariable(name: "i", scope: !3450, file: !1, line: 3261, type: !63)
!3478 = !DILocation(line: 3261, column: 6, scope: !3450)
!3479 = !DILocation(line: 3263, column: 20, scope: !3450)
!3480 = !DILocation(line: 3263, column: 24, scope: !3450)
!3481 = !DILocation(line: 3263, column: 7, scope: !3450)
!3482 = !DILocation(line: 3263, column: 5, scope: !3450)
!3483 = !DILocation(line: 3264, column: 7, scope: !3484)
!3484 = distinct !DILexicalBlock(scope: !3450, file: !1, line: 3264, column: 6)
!3485 = !DILocation(line: 3264, column: 10, scope: !3484)
!3486 = !DILocation(line: 3264, column: 13, scope: !3484)
!3487 = !DILocation(line: 3264, column: 17, scope: !3484)
!3488 = !DILocation(line: 3264, column: 27, scope: !3484)
!3489 = !DILocation(line: 3264, column: 32, scope: !3484)
!3490 = !DILocation(line: 3264, column: 36, scope: !3484)
!3491 = !DILocation(line: 3264, column: 40, scope: !3484)
!3492 = !DILocation(line: 3264, column: 6, scope: !3450)
!3493 = !DILocation(line: 3265, column: 3, scope: !3484)
!3494 = !DILocation(line: 3267, column: 9, scope: !3495)
!3495 = distinct !DILexicalBlock(scope: !3450, file: !1, line: 3267, column: 2)
!3496 = !DILocation(line: 3267, column: 7, scope: !3495)
!3497 = !DILocation(line: 3267, column: 14, scope: !3498)
!3498 = distinct !DILexicalBlock(scope: !3495, file: !1, line: 3267, column: 2)
!3499 = !DILocation(line: 3267, column: 18, scope: !3498)
!3500 = !DILocation(line: 3267, column: 22, scope: !3498)
!3501 = !DILocation(line: 3267, column: 16, scope: !3498)
!3502 = !DILocation(line: 3267, column: 2, scope: !3495)
!3503 = !DILocation(line: 3268, column: 7, scope: !3504)
!3504 = distinct !DILexicalBlock(scope: !3498, file: !1, line: 3267, column: 38)
!3505 = !DILocation(line: 3268, column: 11, scope: !3504)
!3506 = !DILocation(line: 3268, column: 22, scope: !3504)
!3507 = !DILocation(line: 3268, column: 5, scope: !3504)
!3508 = !DILocation(line: 3270, column: 12, scope: !3504)
!3509 = !DILocation(line: 3271, column: 12, scope: !3504)
!3510 = !DILocation(line: 3272, column: 17, scope: !3504)
!3511 = !DILocation(line: 3273, column: 31, scope: !3504)
!3512 = !DILocation(line: 3273, column: 34, scope: !3504)
!3513 = !DILocation(line: 3273, column: 12, scope: !3504)
!3514 = !DILocation(line: 3273, column: 10, scope: !3504)
!3515 = !DILocation(line: 3274, column: 11, scope: !3504)
!3516 = !DILocation(line: 3275, column: 7, scope: !3517)
!3517 = distinct !DILexicalBlock(scope: !3504, file: !1, line: 3275, column: 7)
!3518 = !DILocation(line: 3275, column: 7, scope: !3504)
!3519 = !DILocation(line: 3276, column: 27, scope: !3520)
!3520 = distinct !DILexicalBlock(scope: !3517, file: !1, line: 3275, column: 47)
!3521 = !DILocation(line: 3276, column: 31, scope: !3520)
!3522 = !DILocation(line: 3276, column: 14, scope: !3520)
!3523 = !DILocation(line: 3276, column: 12, scope: !3520)
!3524 = !DILocation(line: 3277, column: 9, scope: !3525)
!3525 = distinct !DILexicalBlock(scope: !3520, file: !1, line: 3277, column: 8)
!3526 = !DILocation(line: 3277, column: 17, scope: !3525)
!3527 = !DILocation(line: 3277, column: 21, scope: !3525)
!3528 = !DILocation(line: 3277, column: 30, scope: !3525)
!3529 = !DILocation(line: 3277, column: 8, scope: !3520)
!3530 = !DILocation(line: 3278, column: 5, scope: !3525)
!3531 = !DILocation(line: 3279, column: 3, scope: !3520)
!3532 = !DILocation(line: 3280, column: 10, scope: !3504)
!3533 = !DILocation(line: 3280, column: 14, scope: !3504)
!3534 = !DILocation(line: 3280, column: 21, scope: !3504)
!3535 = !DILocation(line: 3280, column: 8, scope: !3504)
!3536 = !DILocation(line: 3281, column: 3, scope: !3504)
!3537 = !DILocation(line: 3282, column: 8, scope: !3538)
!3538 = distinct !DILexicalBlock(scope: !3539, file: !1, line: 3282, column: 8)
!3539 = distinct !DILexicalBlock(scope: !3504, file: !1, line: 3281, column: 6)
!3540 = !DILocation(line: 3282, column: 8, scope: !3539)
!3541 = !DILocation(line: 3283, column: 17, scope: !3542)
!3542 = distinct !DILexicalBlock(scope: !3538, file: !1, line: 3282, column: 17)
!3543 = !DILocation(line: 3283, column: 26, scope: !3542)
!3544 = !DILocation(line: 3283, column: 33, scope: !3542)
!3545 = !DILocation(line: 3283, column: 15, scope: !3542)
!3546 = !DILocation(line: 3284, column: 5, scope: !3542)
!3547 = !DILocation(line: 3285, column: 27, scope: !3548)
!3548 = distinct !DILexicalBlock(scope: !3542, file: !1, line: 3284, column: 8)
!3549 = !DILocation(line: 3285, column: 38, scope: !3548)
!3550 = !DILocation(line: 3285, column: 41, scope: !3548)
!3551 = !DILocation(line: 3285, column: 45, scope: !3548)
!3552 = !DILocation(line: 3285, column: 51, scope: !3548)
!3553 = !DILocation(line: 3285, column: 54, scope: !3548)
!3554 = !DILocation(line: 3285, column: 10, scope: !3548)
!3555 = !DILocation(line: 3285, column: 8, scope: !3548)
!3556 = !DILocation(line: 3286, column: 10, scope: !3557)
!3557 = distinct !DILexicalBlock(scope: !3548, file: !1, line: 3286, column: 10)
!3558 = !DILocation(line: 3286, column: 14, scope: !3557)
!3559 = !DILocation(line: 3286, column: 12, scope: !3557)
!3560 = !DILocation(line: 3286, column: 10, scope: !3548)
!3561 = !DILocation(line: 3287, column: 18, scope: !3562)
!3562 = distinct !DILexicalBlock(scope: !3557, file: !1, line: 3286, column: 24)
!3563 = !DILocation(line: 3287, column: 24, scope: !3562)
!3564 = !DILocation(line: 3287, column: 27, scope: !3562)
!3565 = !DILocation(line: 3287, column: 16, scope: !3562)
!3566 = !DILocation(line: 3288, column: 23, scope: !3562)
!3567 = !DILocation(line: 3288, column: 34, scope: !3562)
!3568 = !DILocation(line: 3288, column: 37, scope: !3562)
!3569 = !DILocation(line: 3288, column: 21, scope: !3562)
!3570 = !DILocation(line: 3289, column: 18, scope: !3562)
!3571 = !DILocation(line: 3289, column: 16, scope: !3562)
!3572 = !DILocation(line: 3291, column: 6, scope: !3562)
!3573 = !DILocation(line: 3292, column: 5, scope: !3548)
!3574 = !DILocation(line: 3292, column: 27, scope: !3542)
!3575 = !DILocation(line: 3292, column: 38, scope: !3542)
!3576 = !DILocation(line: 3292, column: 25, scope: !3542)
!3577 = !DILocation(line: 3292, column: 47, scope: !3542)
!3578 = !DILocation(line: 3292, column: 56, scope: !3542)
!3579 = !DILocation(line: 3292, column: 63, scope: !3542)
!3580 = !DILocation(line: 3292, column: 44, scope: !3542)
!3581 = distinct !{!3581, !3546, !3582}
!3582 = !DILocation(line: 3292, column: 73, scope: !3542)
!3583 = !DILocation(line: 3293, column: 4, scope: !3542)
!3584 = !DILocation(line: 3295, column: 26, scope: !3585)
!3585 = distinct !DILexicalBlock(scope: !3538, file: !1, line: 3294, column: 9)
!3586 = !DILocation(line: 3295, column: 34, scope: !3585)
!3587 = !DILocation(line: 3295, column: 38, scope: !3585)
!3588 = !DILocation(line: 3295, column: 44, scope: !3585)
!3589 = !DILocation(line: 3295, column: 47, scope: !3585)
!3590 = !DILocation(line: 3295, column: 9, scope: !3585)
!3591 = !DILocation(line: 3295, column: 7, scope: !3585)
!3592 = !DILocation(line: 3296, column: 9, scope: !3593)
!3593 = distinct !DILexicalBlock(scope: !3585, file: !1, line: 3296, column: 9)
!3594 = !DILocation(line: 3296, column: 13, scope: !3593)
!3595 = !DILocation(line: 3296, column: 11, scope: !3593)
!3596 = !DILocation(line: 3296, column: 9, scope: !3585)
!3597 = !DILocation(line: 3297, column: 17, scope: !3598)
!3598 = distinct !DILexicalBlock(scope: !3593, file: !1, line: 3296, column: 23)
!3599 = !DILocation(line: 3297, column: 23, scope: !3598)
!3600 = !DILocation(line: 3297, column: 26, scope: !3598)
!3601 = !DILocation(line: 3297, column: 15, scope: !3598)
!3602 = !DILocation(line: 3298, column: 22, scope: !3598)
!3603 = !DILocation(line: 3298, column: 20, scope: !3598)
!3604 = !DILocation(line: 3299, column: 17, scope: !3598)
!3605 = !DILocation(line: 3299, column: 15, scope: !3598)
!3606 = !DILocation(line: 3300, column: 5, scope: !3598)
!3607 = !DILocation(line: 3302, column: 3, scope: !3539)
!3608 = !DILocation(line: 3302, column: 20, scope: !3504)
!3609 = !DILocation(line: 3302, column: 26, scope: !3504)
!3610 = !DILocation(line: 3302, column: 18, scope: !3504)
!3611 = !DILocation(line: 3302, column: 35, scope: !3504)
!3612 = !DILocation(line: 3302, column: 39, scope: !3504)
!3613 = !DILocation(line: 3302, column: 46, scope: !3504)
!3614 = !DILocation(line: 3302, column: 32, scope: !3504)
!3615 = distinct !{!3615, !3536, !3616}
!3616 = !DILocation(line: 3302, column: 56, scope: !3504)
!3617 = !DILocation(line: 3303, column: 7, scope: !3618)
!3618 = distinct !DILexicalBlock(scope: !3504, file: !1, line: 3303, column: 7)
!3619 = !DILocation(line: 3303, column: 7, scope: !3504)
!3620 = !DILocation(line: 3304, column: 19, scope: !3618)
!3621 = !DILocation(line: 3304, column: 23, scope: !3618)
!3622 = !DILocation(line: 3304, column: 33, scope: !3618)
!3623 = !DILocation(line: 3304, column: 48, scope: !3618)
!3624 = !DILocation(line: 3304, column: 4, scope: !3618)
!3625 = !DILocation(line: 3305, column: 2, scope: !3504)
!3626 = !DILocation(line: 3267, column: 34, scope: !3498)
!3627 = !DILocation(line: 3267, column: 2, scope: !3498)
!3628 = distinct !{!3628, !3502, !3629}
!3629 = !DILocation(line: 3305, column: 2, scope: !3495)
!3630 = !DILocation(line: 3306, column: 1, scope: !3450)
!3631 = distinct !DISubprogram(name: "find_even_superellipse_params", scope: !1, file: !1, line: 3534, type: !3632, scopeLine: 3535, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!3632 = !DISubroutineType(types: !3633)
!3633 = !{null, !63, !76, !170}
!3634 = !DILocalVariable(name: "n", arg: 1, scope: !3631, file: !1, line: 3534, type: !63)
!3635 = !DILocation(line: 3534, column: 47, scope: !3631)
!3636 = !DILocalVariable(name: "r", arg: 2, scope: !3631, file: !1, line: 3534, type: !76)
!3637 = !DILocation(line: 3534, column: 56, scope: !3631)
!3638 = !DILocalVariable(name: "r_params", arg: 3, scope: !3631, file: !1, line: 3534, type: !170)
!3639 = !DILocation(line: 3534, column: 66, scope: !3631)
!3640 = !DILocalVariable(name: "d2low", scope: !3631, file: !1, line: 3536, type: !76)
!3641 = !DILocation(line: 3536, column: 8, scope: !3631)
!3642 = !DILocalVariable(name: "d2high", scope: !3631, file: !1, line: 3536, type: !76)
!3643 = !DILocation(line: 3536, column: 15, scope: !3631)
!3644 = !DILocalVariable(name: "d2", scope: !3631, file: !1, line: 3536, type: !76)
!3645 = !DILocation(line: 3536, column: 23, scope: !3631)
!3646 = !DILocalVariable(name: "d2final", scope: !3631, file: !1, line: 3536, type: !76)
!3647 = !DILocation(line: 3536, column: 27, scope: !3631)
!3648 = !DILocalVariable(name: "u", scope: !3631, file: !1, line: 3536, type: !76)
!3649 = !DILocation(line: 3536, column: 36, scope: !3631)
!3650 = !DILocalVariable(name: "i", scope: !3631, file: !1, line: 3537, type: !63)
!3651 = !DILocation(line: 3537, column: 6, scope: !3631)
!3652 = !DILocalVariable(name: "j", scope: !3631, file: !1, line: 3537, type: !63)
!3653 = !DILocation(line: 3537, column: 9, scope: !3631)
!3654 = !DILocalVariable(name: "n2", scope: !3631, file: !1, line: 3537, type: !63)
!3655 = !DILocation(line: 3537, column: 12, scope: !3631)
!3656 = !DILocalVariable(name: "maxiters", scope: !3631, file: !1, line: 3538, type: !460)
!3657 = !DILocation(line: 3538, column: 12, scope: !3631)
!3658 = !DILocalVariable(name: "d2tol", scope: !3631, file: !1, line: 3539, type: !459)
!3659 = !DILocation(line: 3539, column: 14, scope: !3631)
!3660 = !DILocalVariable(name: "umax", scope: !3631, file: !1, line: 3540, type: !459)
!3661 = !DILocation(line: 3540, column: 14, scope: !3631)
!3662 = !DILocation(line: 3542, column: 6, scope: !3663)
!3663 = distinct !DILexicalBlock(scope: !3631, file: !1, line: 3542, column: 6)
!3664 = !DILocation(line: 3542, column: 8, scope: !3663)
!3665 = !DILocation(line: 3542, column: 24, scope: !3663)
!3666 = !DILocation(line: 3542, column: 27, scope: !3663)
!3667 = !DILocation(line: 3542, column: 29, scope: !3663)
!3668 = !DILocation(line: 3542, column: 43, scope: !3663)
!3669 = !DILocation(line: 3543, column: 8, scope: !3663)
!3670 = !DILocation(line: 3543, column: 10, scope: !3663)
!3671 = !DILocation(line: 3543, column: 14, scope: !3663)
!3672 = !DILocation(line: 3543, column: 20, scope: !3663)
!3673 = !DILocation(line: 3543, column: 24, scope: !3663)
!3674 = !DILocation(line: 3543, column: 26, scope: !3663)
!3675 = !DILocation(line: 3543, column: 45, scope: !3663)
!3676 = !DILocation(line: 3543, column: 48, scope: !3663)
!3677 = !DILocation(line: 3543, column: 50, scope: !3663)
!3678 = !DILocation(line: 3542, column: 6, scope: !3631)
!3679 = !DILocation(line: 3546, column: 10, scope: !3680)
!3680 = distinct !DILexicalBlock(scope: !3681, file: !1, line: 3546, column: 3)
!3681 = distinct !DILexicalBlock(scope: !3663, file: !1, line: 3544, column: 2)
!3682 = !DILocation(line: 3546, column: 8, scope: !3680)
!3683 = !DILocation(line: 3546, column: 15, scope: !3684)
!3684 = distinct !DILexicalBlock(scope: !3680, file: !1, line: 3546, column: 3)
!3685 = !DILocation(line: 3546, column: 20, scope: !3684)
!3686 = !DILocation(line: 3546, column: 17, scope: !3684)
!3687 = !DILocation(line: 3546, column: 3, scope: !3680)
!3688 = !DILocation(line: 3547, column: 18, scope: !3684)
!3689 = !DILocation(line: 3547, column: 20, scope: !3684)
!3690 = !DILocation(line: 3547, column: 37, scope: !3684)
!3691 = !DILocation(line: 3547, column: 29, scope: !3684)
!3692 = !DILocation(line: 3547, column: 27, scope: !3684)
!3693 = !DILocation(line: 3547, column: 4, scope: !3684)
!3694 = !DILocation(line: 3547, column: 13, scope: !3684)
!3695 = !DILocation(line: 3547, column: 16, scope: !3684)
!3696 = !DILocation(line: 3546, column: 24, scope: !3684)
!3697 = !DILocation(line: 3546, column: 3, scope: !3684)
!3698 = distinct !{!3698, !3687, !3699}
!3699 = !DILocation(line: 3547, column: 37, scope: !3680)
!3700 = !DILocation(line: 3548, column: 3, scope: !3681)
!3701 = !DILocation(line: 3550, column: 6, scope: !3702)
!3702 = distinct !DILexicalBlock(scope: !3631, file: !1, line: 3550, column: 6)
!3703 = !DILocation(line: 3550, column: 8, scope: !3702)
!3704 = !DILocation(line: 3550, column: 27, scope: !3702)
!3705 = !DILocation(line: 3550, column: 30, scope: !3702)
!3706 = !DILocation(line: 3550, column: 32, scope: !3702)
!3707 = !DILocation(line: 3550, column: 6, scope: !3631)
!3708 = !DILocation(line: 3553, column: 8, scope: !3709)
!3709 = distinct !DILexicalBlock(scope: !3702, file: !1, line: 3550, column: 49)
!3710 = !DILocation(line: 3553, column: 10, scope: !3709)
!3711 = !DILocation(line: 3553, column: 6, scope: !3709)
!3712 = !DILocation(line: 3554, column: 15, scope: !3709)
!3713 = !DILocation(line: 3554, column: 13, scope: !3709)
!3714 = !DILocation(line: 3554, column: 18, scope: !3709)
!3715 = !DILocation(line: 3554, column: 46, scope: !3709)
!3716 = !DILocation(line: 3554, column: 44, scope: !3709)
!3717 = !DILocation(line: 3554, column: 51, scope: !3709)
!3718 = !DILocation(line: 3554, column: 49, scope: !3709)
!3719 = !DILocation(line: 3554, column: 54, scope: !3709)
!3720 = !DILocation(line: 3554, column: 36, scope: !3709)
!3721 = !DILocation(line: 3554, column: 5, scope: !3709)
!3722 = !DILocation(line: 3555, column: 10, scope: !3723)
!3723 = distinct !DILexicalBlock(scope: !3709, file: !1, line: 3555, column: 3)
!3724 = !DILocation(line: 3555, column: 8, scope: !3723)
!3725 = !DILocation(line: 3555, column: 15, scope: !3726)
!3726 = distinct !DILexicalBlock(scope: !3723, file: !1, line: 3555, column: 3)
!3727 = !DILocation(line: 3555, column: 19, scope: !3726)
!3728 = !DILocation(line: 3555, column: 17, scope: !3726)
!3729 = !DILocation(line: 3555, column: 3, scope: !3723)
!3730 = !DILocation(line: 3556, column: 18, scope: !3726)
!3731 = !DILocation(line: 3556, column: 22, scope: !3726)
!3732 = !DILocation(line: 3556, column: 20, scope: !3726)
!3733 = !DILocation(line: 3556, column: 4, scope: !3726)
!3734 = !DILocation(line: 3556, column: 13, scope: !3726)
!3735 = !DILocation(line: 3556, column: 16, scope: !3726)
!3736 = !DILocation(line: 3555, column: 23, scope: !3726)
!3737 = !DILocation(line: 3555, column: 3, scope: !3726)
!3738 = distinct !{!3738, !3729, !3739}
!3739 = !DILocation(line: 3556, column: 22, scope: !3723)
!3740 = !DILocation(line: 3557, column: 3, scope: !3709)
!3741 = !DILocation(line: 3557, column: 12, scope: !3709)
!3742 = !DILocation(line: 3557, column: 15, scope: !3709)
!3743 = !DILocation(line: 3558, column: 2, scope: !3709)
!3744 = !DILocation(line: 3559, column: 18, scope: !3631)
!3745 = !DILocation(line: 3559, column: 22, scope: !3631)
!3746 = !DILocation(line: 3559, column: 20, scope: !3631)
!3747 = !DILocation(line: 3559, column: 17, scope: !3631)
!3748 = !DILocation(line: 3559, column: 15, scope: !3631)
!3749 = !DILocation(line: 3559, column: 8, scope: !3631)
!3750 = !DILocation(line: 3560, column: 15, scope: !3631)
!3751 = !DILocation(line: 3560, column: 13, scope: !3631)
!3752 = !DILocation(line: 3560, column: 9, scope: !3631)
!3753 = !DILocation(line: 3561, column: 9, scope: !3754)
!3754 = distinct !DILexicalBlock(scope: !3631, file: !1, line: 3561, column: 2)
!3755 = !DILocation(line: 3561, column: 7, scope: !3754)
!3756 = !DILocation(line: 3561, column: 14, scope: !3757)
!3757 = distinct !DILexicalBlock(scope: !3754, file: !1, line: 3561, column: 2)
!3758 = !DILocation(line: 3561, column: 16, scope: !3757)
!3759 = !DILocation(line: 3561, column: 27, scope: !3757)
!3760 = !DILocation(line: 3561, column: 36, scope: !3757)
!3761 = !DILocation(line: 3561, column: 45, scope: !3757)
!3762 = !DILocation(line: 3561, column: 43, scope: !3757)
!3763 = !DILocation(line: 3561, column: 30, scope: !3757)
!3764 = !DILocation(line: 3561, column: 52, scope: !3757)
!3765 = !DILocation(line: 0, scope: !3757)
!3766 = !DILocation(line: 3561, column: 2, scope: !3754)
!3767 = !DILocation(line: 3562, column: 16, scope: !3768)
!3768 = distinct !DILexicalBlock(scope: !3757, file: !1, line: 3561, column: 66)
!3769 = !DILocation(line: 3562, column: 24, scope: !3768)
!3770 = !DILocation(line: 3562, column: 22, scope: !3768)
!3771 = !DILocation(line: 3562, column: 13, scope: !3768)
!3772 = !DILocation(line: 3562, column: 6, scope: !3768)
!3773 = !DILocation(line: 3565, column: 5, scope: !3768)
!3774 = !DILocation(line: 3566, column: 10, scope: !3775)
!3775 = distinct !DILexicalBlock(scope: !3768, file: !1, line: 3566, column: 3)
!3776 = !DILocation(line: 3566, column: 8, scope: !3775)
!3777 = !DILocation(line: 3566, column: 15, scope: !3778)
!3778 = distinct !DILexicalBlock(scope: !3775, file: !1, line: 3566, column: 3)
!3779 = !DILocation(line: 3566, column: 19, scope: !3778)
!3780 = !DILocation(line: 3566, column: 21, scope: !3778)
!3781 = !DILocation(line: 3566, column: 17, scope: !3778)
!3782 = !DILocation(line: 3566, column: 3, scope: !3775)
!3783 = !DILocation(line: 3567, column: 34, scope: !3784)
!3784 = distinct !DILexicalBlock(scope: !3778, file: !1, line: 3566, column: 31)
!3785 = !DILocation(line: 3567, column: 37, scope: !3784)
!3786 = !DILocation(line: 3567, column: 41, scope: !3784)
!3787 = !DILocation(line: 3567, column: 8, scope: !3784)
!3788 = !DILocation(line: 3567, column: 6, scope: !3784)
!3789 = !DILocation(line: 3568, column: 8, scope: !3790)
!3790 = distinct !DILexicalBlock(scope: !3784, file: !1, line: 3568, column: 8)
!3791 = !DILocation(line: 3568, column: 10, scope: !3790)
!3792 = !DILocation(line: 3568, column: 8, scope: !3784)
!3793 = !DILocation(line: 3569, column: 5, scope: !3790)
!3794 = !DILocation(line: 3570, column: 3, scope: !3784)
!3795 = !DILocation(line: 3566, column: 27, scope: !3778)
!3796 = !DILocation(line: 3566, column: 3, scope: !3778)
!3797 = distinct !{!3797, !3782, !3798}
!3798 = !DILocation(line: 3570, column: 3, scope: !3775)
!3799 = !DILocation(line: 3571, column: 7, scope: !3800)
!3800 = distinct !DILexicalBlock(scope: !3768, file: !1, line: 3571, column: 7)
!3801 = !DILocation(line: 3571, column: 9, scope: !3800)
!3802 = !DILocation(line: 3571, column: 7, scope: !3768)
!3803 = !DILocation(line: 3572, column: 13, scope: !3804)
!3804 = distinct !DILexicalBlock(scope: !3800, file: !1, line: 3571, column: 19)
!3805 = !DILocation(line: 3572, column: 11, scope: !3804)
!3806 = !DILocation(line: 3573, column: 4, scope: !3804)
!3807 = !DILocation(line: 3575, column: 47, scope: !3768)
!3808 = !DILocation(line: 3575, column: 56, scope: !3768)
!3809 = !DILocation(line: 3575, column: 13, scope: !3768)
!3810 = !DILocation(line: 3575, column: 11, scope: !3768)
!3811 = !DILocation(line: 3576, column: 13, scope: !3812)
!3812 = distinct !DILexicalBlock(scope: !3768, file: !1, line: 3576, column: 7)
!3813 = !DILocation(line: 3576, column: 23, scope: !3812)
!3814 = !DILocation(line: 3576, column: 21, scope: !3812)
!3815 = !DILocation(line: 3576, column: 7, scope: !3812)
!3816 = !DILocation(line: 3576, column: 27, scope: !3812)
!3817 = !DILocation(line: 3576, column: 7, scope: !3768)
!3818 = !DILocation(line: 3577, column: 4, scope: !3812)
!3819 = !DILocation(line: 3578, column: 7, scope: !3820)
!3820 = distinct !DILexicalBlock(scope: !3768, file: !1, line: 3578, column: 7)
!3821 = !DILocation(line: 3578, column: 17, scope: !3820)
!3822 = !DILocation(line: 3578, column: 15, scope: !3820)
!3823 = !DILocation(line: 3578, column: 7, scope: !3768)
!3824 = !DILocation(line: 3579, column: 13, scope: !3820)
!3825 = !DILocation(line: 3579, column: 11, scope: !3820)
!3826 = !DILocation(line: 3579, column: 4, scope: !3820)
!3827 = !DILocation(line: 3581, column: 12, scope: !3820)
!3828 = !DILocation(line: 3581, column: 10, scope: !3820)
!3829 = !DILocation(line: 3582, column: 2, scope: !3768)
!3830 = !DILocation(line: 3561, column: 62, scope: !3757)
!3831 = !DILocation(line: 3561, column: 2, scope: !3757)
!3832 = distinct !{!3832, !3766, !3833}
!3833 = !DILocation(line: 3582, column: 2, scope: !3754)
!3834 = !DILocation(line: 3583, column: 4, scope: !3631)
!3835 = !DILocation(line: 3584, column: 9, scope: !3836)
!3836 = distinct !DILexicalBlock(scope: !3631, file: !1, line: 3584, column: 2)
!3837 = !DILocation(line: 3584, column: 7, scope: !3836)
!3838 = !DILocation(line: 3584, column: 14, scope: !3839)
!3839 = distinct !DILexicalBlock(scope: !3836, file: !1, line: 3584, column: 2)
!3840 = !DILocation(line: 3584, column: 18, scope: !3839)
!3841 = !DILocation(line: 3584, column: 16, scope: !3839)
!3842 = !DILocation(line: 3584, column: 2, scope: !3836)
!3843 = !DILocation(line: 3585, column: 17, scope: !3844)
!3844 = distinct !DILexicalBlock(scope: !3839, file: !1, line: 3584, column: 26)
!3845 = !DILocation(line: 3585, column: 3, scope: !3844)
!3846 = !DILocation(line: 3585, column: 12, scope: !3844)
!3847 = !DILocation(line: 3585, column: 15, scope: !3844)
!3848 = !DILocation(line: 3586, column: 33, scope: !3844)
!3849 = !DILocation(line: 3586, column: 36, scope: !3844)
!3850 = !DILocation(line: 3586, column: 40, scope: !3844)
!3851 = !DILocation(line: 3586, column: 7, scope: !3844)
!3852 = !DILocation(line: 3586, column: 5, scope: !3844)
!3853 = !DILocation(line: 3587, column: 2, scope: !3844)
!3854 = !DILocation(line: 3584, column: 22, scope: !3839)
!3855 = !DILocation(line: 3584, column: 2, scope: !3839)
!3856 = distinct !{!3856, !3842, !3857}
!3857 = !DILocation(line: 3587, column: 2, scope: !3836)
!3858 = !DILocation(line: 3588, column: 2, scope: !3631)
!3859 = !DILocation(line: 3588, column: 11, scope: !3631)
!3860 = !DILocation(line: 3588, column: 14, scope: !3631)
!3861 = !DILocation(line: 3589, column: 1, scope: !3631)
!3862 = distinct !DISubprogram(name: "power_of_2_max_i", scope: !3863, file: !3863, line: 122, type: !3864, scopeLine: 123, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!3863 = !DIFile(filename: "blender/source/blender/blenlib/intern/math_base_inline.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!3864 = !DISubroutineType(types: !3865)
!3865 = !{!63, !63}
!3866 = !DILocalVariable(name: "n", arg: 1, scope: !3862, file: !3863, line: 122, type: !63)
!3867 = !DILocation(line: 122, column: 34, scope: !3862)
!3868 = !DILocation(line: 124, column: 22, scope: !3869)
!3869 = distinct !DILexicalBlock(scope: !3862, file: !3863, line: 124, column: 6)
!3870 = !DILocation(line: 124, column: 6, scope: !3869)
!3871 = !DILocation(line: 124, column: 6, scope: !3862)
!3872 = !DILocation(line: 125, column: 10, scope: !3869)
!3873 = !DILocation(line: 125, column: 3, scope: !3869)
!3874 = !DILocation(line: 127, column: 2, scope: !3862)
!3875 = !DILocation(line: 128, column: 7, scope: !3876)
!3876 = distinct !DILexicalBlock(scope: !3862, file: !3863, line: 127, column: 5)
!3877 = !DILocation(line: 128, column: 12, scope: !3876)
!3878 = !DILocation(line: 128, column: 14, scope: !3876)
!3879 = !DILocation(line: 128, column: 9, scope: !3876)
!3880 = !DILocation(line: 128, column: 5, scope: !3876)
!3881 = !DILocation(line: 129, column: 2, scope: !3876)
!3882 = !DILocation(line: 129, column: 28, scope: !3862)
!3883 = !DILocation(line: 129, column: 12, scope: !3862)
!3884 = !DILocation(line: 129, column: 11, scope: !3862)
!3885 = distinct !{!3885, !3874, !3886}
!3886 = !DILocation(line: 129, column: 30, scope: !3862)
!3887 = !DILocation(line: 131, column: 9, scope: !3862)
!3888 = !DILocation(line: 131, column: 11, scope: !3862)
!3889 = !DILocation(line: 131, column: 2, scope: !3862)
!3890 = !DILocation(line: 132, column: 1, scope: !3862)
!3891 = distinct !DISubprogram(name: "find_superellipse_chord_u", scope: !1, file: !1, line: 3498, type: !3892, scopeLine: 3499, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!3892 = !DISubroutineType(types: !3893)
!3893 = !{!76, !76, !76, !76}
!3894 = !DILocalVariable(name: "u0", arg: 1, scope: !3891, file: !1, line: 3498, type: !76)
!3895 = !DILocation(line: 3498, column: 46, scope: !3891)
!3896 = !DILocalVariable(name: "d2goal", arg: 2, scope: !3891, file: !1, line: 3498, type: !76)
!3897 = !DILocation(line: 3498, column: 56, scope: !3891)
!3898 = !DILocalVariable(name: "r", arg: 3, scope: !3891, file: !1, line: 3498, type: !76)
!3899 = !DILocation(line: 3498, column: 70, scope: !3891)
!3900 = !DILocalVariable(name: "ulow", scope: !3891, file: !1, line: 3500, type: !76)
!3901 = !DILocation(line: 3500, column: 8, scope: !3891)
!3902 = !DILocalVariable(name: "uhigh", scope: !3891, file: !1, line: 3500, type: !76)
!3903 = !DILocation(line: 3500, column: 14, scope: !3891)
!3904 = !DILocalVariable(name: "u", scope: !3891, file: !1, line: 3500, type: !76)
!3905 = !DILocation(line: 3500, column: 21, scope: !3891)
!3906 = !DILocalVariable(name: "d2", scope: !3891, file: !1, line: 3500, type: !76)
!3907 = !DILocation(line: 3500, column: 24, scope: !3891)
!3908 = !DILocalVariable(name: "d2max", scope: !3891, file: !1, line: 3500, type: !76)
!3909 = !DILocation(line: 3500, column: 28, scope: !3891)
!3910 = !DILocalVariable(name: "dtol", scope: !3891, file: !1, line: 3501, type: !459)
!3911 = !DILocation(line: 3501, column: 14, scope: !3891)
!3912 = !DILocalVariable(name: "utol", scope: !3891, file: !1, line: 3502, type: !459)
!3913 = !DILocation(line: 3502, column: 14, scope: !3891)
!3914 = !DILocalVariable(name: "umax", scope: !3891, file: !1, line: 3503, type: !459)
!3915 = !DILocation(line: 3503, column: 14, scope: !3891)
!3916 = !DILocation(line: 3505, column: 6, scope: !3917)
!3917 = distinct !DILexicalBlock(scope: !3891, file: !1, line: 3505, column: 6)
!3918 = !DILocation(line: 3505, column: 13, scope: !3917)
!3919 = !DILocation(line: 3505, column: 6, scope: !3891)
!3920 = !DILocation(line: 3506, column: 10, scope: !3917)
!3921 = !DILocation(line: 3506, column: 3, scope: !3917)
!3922 = !DILocation(line: 3507, column: 44, scope: !3891)
!3923 = !DILocation(line: 3507, column: 54, scope: !3891)
!3924 = !DILocation(line: 3507, column: 10, scope: !3891)
!3925 = !DILocation(line: 3507, column: 8, scope: !3891)
!3926 = !DILocation(line: 3508, column: 12, scope: !3927)
!3927 = distinct !DILexicalBlock(scope: !3891, file: !1, line: 3508, column: 6)
!3928 = !DILocation(line: 3508, column: 21, scope: !3927)
!3929 = !DILocation(line: 3508, column: 19, scope: !3927)
!3930 = !DILocation(line: 3508, column: 6, scope: !3927)
!3931 = !DILocation(line: 3508, column: 28, scope: !3927)
!3932 = !DILocation(line: 3508, column: 6, scope: !3891)
!3933 = !DILocation(line: 3509, column: 3, scope: !3927)
!3934 = !DILocation(line: 3510, column: 6, scope: !3935)
!3935 = distinct !DILexicalBlock(scope: !3891, file: !1, line: 3510, column: 6)
!3936 = !DILocation(line: 3510, column: 15, scope: !3935)
!3937 = !DILocation(line: 3510, column: 13, scope: !3935)
!3938 = !DILocation(line: 3510, column: 21, scope: !3935)
!3939 = !DILocation(line: 3510, column: 6, scope: !3891)
!3940 = !DILocation(line: 3511, column: 3, scope: !3935)
!3941 = !DILocation(line: 3514, column: 9, scope: !3891)
!3942 = !DILocation(line: 3514, column: 7, scope: !3891)
!3943 = !DILocation(line: 3515, column: 8, scope: !3891)
!3944 = !DILocation(line: 3516, column: 2, scope: !3891)
!3945 = !DILocation(line: 3517, column: 15, scope: !3946)
!3946 = distinct !DILexicalBlock(scope: !3891, file: !1, line: 3516, column: 5)
!3947 = !DILocation(line: 3517, column: 22, scope: !3946)
!3948 = !DILocation(line: 3517, column: 20, scope: !3946)
!3949 = !DILocation(line: 3517, column: 12, scope: !3946)
!3950 = !DILocation(line: 3517, column: 5, scope: !3946)
!3951 = !DILocation(line: 3518, column: 42, scope: !3946)
!3952 = !DILocation(line: 3518, column: 46, scope: !3946)
!3953 = !DILocation(line: 3518, column: 49, scope: !3946)
!3954 = !DILocation(line: 3518, column: 8, scope: !3946)
!3955 = !DILocation(line: 3518, column: 6, scope: !3946)
!3956 = !DILocation(line: 3519, column: 13, scope: !3957)
!3957 = distinct !DILexicalBlock(scope: !3946, file: !1, line: 3519, column: 7)
!3958 = !DILocation(line: 3519, column: 22, scope: !3957)
!3959 = !DILocation(line: 3519, column: 20, scope: !3957)
!3960 = !DILocation(line: 3519, column: 7, scope: !3957)
!3961 = !DILocation(line: 3519, column: 26, scope: !3957)
!3962 = !DILocation(line: 3519, column: 7, scope: !3946)
!3963 = !DILocation(line: 3520, column: 4, scope: !3957)
!3964 = !DILocation(line: 3521, column: 7, scope: !3965)
!3965 = distinct !DILexicalBlock(scope: !3946, file: !1, line: 3521, column: 7)
!3966 = !DILocation(line: 3521, column: 12, scope: !3965)
!3967 = !DILocation(line: 3521, column: 10, scope: !3965)
!3968 = !DILocation(line: 3521, column: 7, scope: !3946)
!3969 = !DILocation(line: 3522, column: 11, scope: !3965)
!3970 = !DILocation(line: 3522, column: 9, scope: !3965)
!3971 = !DILocation(line: 3522, column: 4, scope: !3965)
!3972 = !DILocation(line: 3524, column: 12, scope: !3965)
!3973 = !DILocation(line: 3524, column: 10, scope: !3965)
!3974 = !DILocation(line: 3525, column: 2, scope: !3946)
!3975 = !DILocation(line: 3525, column: 17, scope: !3891)
!3976 = !DILocation(line: 3525, column: 25, scope: !3891)
!3977 = !DILocation(line: 3525, column: 23, scope: !3891)
!3978 = !DILocation(line: 3525, column: 11, scope: !3891)
!3979 = !DILocation(line: 3525, column: 31, scope: !3891)
!3980 = distinct !{!3980, !3944, !3981}
!3981 = !DILocation(line: 3525, column: 37, scope: !3891)
!3982 = !DILocation(line: 3526, column: 9, scope: !3891)
!3983 = !DILocation(line: 3526, column: 2, scope: !3891)
!3984 = !DILocation(line: 3527, column: 1, scope: !3891)
!3985 = distinct !DISubprogram(name: "superellipse_chord_length_squared", scope: !1, file: !1, line: 3485, type: !3892, scopeLine: 3486, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!3986 = !DILocalVariable(name: "u0", arg: 1, scope: !3985, file: !1, line: 3485, type: !76)
!3987 = !DILocation(line: 3485, column: 54, scope: !3985)
!3988 = !DILocalVariable(name: "u1", arg: 2, scope: !3985, file: !1, line: 3485, type: !76)
!3989 = !DILocation(line: 3485, column: 64, scope: !3985)
!3990 = !DILocalVariable(name: "r", arg: 3, scope: !3985, file: !1, line: 3485, type: !76)
!3991 = !DILocation(line: 3485, column: 74, scope: !3985)
!3992 = !DILocalVariable(name: "a", scope: !3985, file: !1, line: 3487, type: !3993)
!3993 = !DICompositeType(tag: DW_TAG_array_type, baseType: !76, size: 64, elements: !3994)
!3994 = !{!3995}
!3995 = !DISubrange(count: 2)
!3996 = !DILocation(line: 3487, column: 8, scope: !3985)
!3997 = !DILocalVariable(name: "b", scope: !3985, file: !1, line: 3487, type: !3993)
!3998 = !DILocation(line: 3487, column: 14, scope: !3985)
!3999 = !DILocation(line: 3490, column: 18, scope: !3985)
!4000 = !DILocation(line: 3490, column: 22, scope: !3985)
!4001 = !DILocation(line: 3490, column: 25, scope: !3985)
!4002 = !DILocation(line: 3490, column: 2, scope: !3985)
!4003 = !DILocation(line: 3491, column: 18, scope: !3985)
!4004 = !DILocation(line: 3491, column: 22, scope: !3985)
!4005 = !DILocation(line: 3491, column: 25, scope: !3985)
!4006 = !DILocation(line: 3491, column: 2, scope: !3985)
!4007 = !DILocation(line: 3492, column: 26, scope: !3985)
!4008 = !DILocation(line: 3492, column: 29, scope: !3985)
!4009 = !DILocation(line: 3492, column: 9, scope: !3985)
!4010 = !DILocation(line: 3492, column: 2, scope: !3985)
!4011 = distinct !DISubprogram(name: "superellipse_co", scope: !1, file: !1, line: 1139, type: !4012, scopeLine: 1140, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!4012 = !DISubroutineType(types: !4013)
!4013 = !{null, !76, !76, !170}
!4014 = !DILocalVariable(name: "u", arg: 1, scope: !4011, file: !1, line: 1139, type: !76)
!4015 = !DILocation(line: 1139, column: 35, scope: !4011)
!4016 = !DILocalVariable(name: "r", arg: 2, scope: !4011, file: !1, line: 1139, type: !76)
!4017 = !DILocation(line: 1139, column: 44, scope: !4011)
!4018 = !DILocalVariable(name: "r_co", arg: 3, scope: !4011, file: !1, line: 1139, type: !170)
!4019 = !DILocation(line: 1139, column: 53, scope: !4011)
!4020 = !DILocalVariable(name: "t", scope: !4011, file: !1, line: 1141, type: !76)
!4021 = !DILocation(line: 1141, column: 8, scope: !4011)
!4022 = !DILocation(line: 1143, column: 6, scope: !4023)
!4023 = distinct !DILexicalBlock(scope: !4011, file: !1, line: 1143, column: 6)
!4024 = !DILocation(line: 1143, column: 8, scope: !4023)
!4025 = !DILocation(line: 1143, column: 6, scope: !4011)
!4026 = !DILocation(line: 1144, column: 3, scope: !4027)
!4027 = distinct !DILexicalBlock(scope: !4023, file: !1, line: 1143, column: 17)
!4028 = !DILocation(line: 1144, column: 11, scope: !4027)
!4029 = !DILocation(line: 1145, column: 3, scope: !4027)
!4030 = !DILocation(line: 1145, column: 11, scope: !4027)
!4031 = !DILocation(line: 1146, column: 2, scope: !4027)
!4032 = !DILocation(line: 1147, column: 11, scope: !4033)
!4033 = distinct !DILexicalBlock(scope: !4023, file: !1, line: 1147, column: 11)
!4034 = !DILocation(line: 1147, column: 13, scope: !4033)
!4035 = !DILocation(line: 1147, column: 11, scope: !4023)
!4036 = !DILocation(line: 1148, column: 3, scope: !4037)
!4037 = distinct !DILexicalBlock(scope: !4033, file: !1, line: 1147, column: 22)
!4038 = !DILocation(line: 1148, column: 11, scope: !4037)
!4039 = !DILocation(line: 1149, column: 3, scope: !4037)
!4040 = !DILocation(line: 1149, column: 11, scope: !4037)
!4041 = !DILocation(line: 1150, column: 2, scope: !4037)
!4042 = !DILocation(line: 1151, column: 11, scope: !4043)
!4043 = distinct !DILexicalBlock(scope: !4033, file: !1, line: 1151, column: 11)
!4044 = !DILocation(line: 1151, column: 13, scope: !4043)
!4045 = !DILocation(line: 1151, column: 11, scope: !4033)
!4046 = !DILocation(line: 1152, column: 7, scope: !4047)
!4047 = distinct !DILexicalBlock(scope: !4043, file: !1, line: 1151, column: 28)
!4048 = !DILocation(line: 1152, column: 9, scope: !4047)
!4049 = !DILocation(line: 1152, column: 5, scope: !4047)
!4050 = !DILocation(line: 1153, column: 13, scope: !4047)
!4051 = !DILocation(line: 1153, column: 3, scope: !4047)
!4052 = !DILocation(line: 1153, column: 11, scope: !4047)
!4053 = !DILocation(line: 1154, column: 20, scope: !4047)
!4054 = !DILocation(line: 1154, column: 18, scope: !4047)
!4055 = !DILocation(line: 1154, column: 3, scope: !4047)
!4056 = !DILocation(line: 1154, column: 11, scope: !4047)
!4057 = !DILocation(line: 1156, column: 2, scope: !4047)
!4058 = !DILocation(line: 1157, column: 11, scope: !4059)
!4059 = distinct !DILexicalBlock(scope: !4043, file: !1, line: 1157, column: 11)
!4060 = !DILocation(line: 1157, column: 13, scope: !4059)
!4061 = !DILocation(line: 1157, column: 11, scope: !4043)
!4062 = !DILocation(line: 1158, column: 7, scope: !4063)
!4063 = distinct !DILexicalBlock(scope: !4064, file: !1, line: 1158, column: 7)
!4064 = distinct !DILexicalBlock(scope: !4059, file: !1, line: 1157, column: 33)
!4065 = !DILocation(line: 1158, column: 9, scope: !4063)
!4066 = !DILocation(line: 1158, column: 7, scope: !4064)
!4067 = !DILocation(line: 1159, column: 4, scope: !4068)
!4068 = distinct !DILexicalBlock(scope: !4063, file: !1, line: 1158, column: 17)
!4069 = !DILocation(line: 1159, column: 12, scope: !4068)
!4070 = !DILocation(line: 1160, column: 21, scope: !4068)
!4071 = !DILocation(line: 1160, column: 19, scope: !4068)
!4072 = !DILocation(line: 1160, column: 4, scope: !4068)
!4073 = !DILocation(line: 1160, column: 12, scope: !4068)
!4074 = !DILocation(line: 1161, column: 3, scope: !4068)
!4075 = !DILocation(line: 1163, column: 14, scope: !4076)
!4076 = distinct !DILexicalBlock(scope: !4063, file: !1, line: 1162, column: 8)
!4077 = !DILocation(line: 1163, column: 16, scope: !4076)
!4078 = !DILocation(line: 1163, column: 4, scope: !4076)
!4079 = !DILocation(line: 1163, column: 12, scope: !4076)
!4080 = !DILocation(line: 1164, column: 4, scope: !4076)
!4081 = !DILocation(line: 1164, column: 12, scope: !4076)
!4082 = !DILocation(line: 1166, column: 2, scope: !4064)
!4083 = !DILocation(line: 1167, column: 11, scope: !4084)
!4084 = distinct !DILexicalBlock(scope: !4059, file: !1, line: 1167, column: 11)
!4085 = !DILocation(line: 1167, column: 13, scope: !4084)
!4086 = !DILocation(line: 1167, column: 11, scope: !4059)
!4087 = !DILocation(line: 1168, column: 7, scope: !4088)
!4088 = distinct !DILexicalBlock(scope: !4089, file: !1, line: 1168, column: 7)
!4089 = distinct !DILexicalBlock(scope: !4084, file: !1, line: 1167, column: 30)
!4090 = !DILocation(line: 1168, column: 9, scope: !4088)
!4091 = !DILocation(line: 1168, column: 7, scope: !4089)
!4092 = !DILocation(line: 1169, column: 14, scope: !4093)
!4093 = distinct !DILexicalBlock(scope: !4088, file: !1, line: 1168, column: 17)
!4094 = !DILocation(line: 1169, column: 4, scope: !4093)
!4095 = !DILocation(line: 1169, column: 12, scope: !4093)
!4096 = !DILocation(line: 1170, column: 4, scope: !4093)
!4097 = !DILocation(line: 1170, column: 12, scope: !4093)
!4098 = !DILocation(line: 1171, column: 3, scope: !4093)
!4099 = !DILocation(line: 1173, column: 4, scope: !4100)
!4100 = distinct !DILexicalBlock(scope: !4088, file: !1, line: 1172, column: 8)
!4101 = !DILocation(line: 1173, column: 12, scope: !4100)
!4102 = !DILocation(line: 1174, column: 21, scope: !4100)
!4103 = !DILocation(line: 1174, column: 19, scope: !4100)
!4104 = !DILocation(line: 1174, column: 4, scope: !4100)
!4105 = !DILocation(line: 1174, column: 12, scope: !4100)
!4106 = !DILocation(line: 1177, column: 2, scope: !4089)
!4107 = !DILocation(line: 1179, column: 7, scope: !4108)
!4108 = distinct !DILexicalBlock(scope: !4084, file: !1, line: 1178, column: 7)
!4109 = !DILocation(line: 1179, column: 9, scope: !4108)
!4110 = !DILocation(line: 1179, column: 23, scope: !4108)
!4111 = !DILocation(line: 1179, column: 5, scope: !4108)
!4112 = !DILocation(line: 1180, column: 18, scope: !4108)
!4113 = !DILocation(line: 1180, column: 13, scope: !4108)
!4114 = !DILocation(line: 1180, column: 3, scope: !4108)
!4115 = !DILocation(line: 1180, column: 11, scope: !4108)
!4116 = !DILocation(line: 1181, column: 18, scope: !4108)
!4117 = !DILocation(line: 1181, column: 13, scope: !4108)
!4118 = !DILocation(line: 1181, column: 3, scope: !4108)
!4119 = !DILocation(line: 1181, column: 11, scope: !4108)
!4120 = !DILocation(line: 1182, column: 7, scope: !4121)
!4121 = distinct !DILexicalBlock(scope: !4108, file: !1, line: 1182, column: 7)
!4122 = !DILocation(line: 1182, column: 9, scope: !4121)
!4123 = !DILocation(line: 1182, column: 7, scope: !4108)
!4124 = !DILocation(line: 1183, column: 18, scope: !4125)
!4125 = distinct !DILexicalBlock(scope: !4121, file: !1, line: 1182, column: 26)
!4126 = !DILocation(line: 1183, column: 34, scope: !4125)
!4127 = !DILocation(line: 1183, column: 32, scope: !4125)
!4128 = !DILocation(line: 1183, column: 27, scope: !4125)
!4129 = !DILocation(line: 1183, column: 14, scope: !4125)
!4130 = !DILocation(line: 1183, column: 4, scope: !4125)
!4131 = !DILocation(line: 1183, column: 12, scope: !4125)
!4132 = !DILocation(line: 1184, column: 18, scope: !4125)
!4133 = !DILocation(line: 1184, column: 34, scope: !4125)
!4134 = !DILocation(line: 1184, column: 32, scope: !4125)
!4135 = !DILocation(line: 1184, column: 27, scope: !4125)
!4136 = !DILocation(line: 1184, column: 14, scope: !4125)
!4137 = !DILocation(line: 1184, column: 4, scope: !4125)
!4138 = !DILocation(line: 1184, column: 12, scope: !4125)
!4139 = !DILocation(line: 1185, column: 3, scope: !4125)
!4140 = !DILocation(line: 1187, column: 1, scope: !4011)
!4141 = distinct !DISubprogram(name: "len_squared_v2v2", scope: !4142, file: !4142, line: 719, type: !4143, scopeLine: 720, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!4142 = !DIFile(filename: "blender/source/blender/blenlib/intern/math_vector_inline.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!4143 = !DISubroutineType(types: !4144)
!4144 = !{!76, !1865, !1865}
!4145 = !DILocalVariable(name: "a", arg: 1, scope: !4141, file: !4142, line: 719, type: !1865)
!4146 = !DILocation(line: 719, column: 44, scope: !4141)
!4147 = !DILocalVariable(name: "b", arg: 2, scope: !4141, file: !4142, line: 719, type: !1865)
!4148 = !DILocation(line: 719, column: 62, scope: !4141)
!4149 = !DILocalVariable(name: "d", scope: !4141, file: !4142, line: 721, type: !3993)
!4150 = !DILocation(line: 721, column: 8, scope: !4141)
!4151 = !DILocation(line: 723, column: 14, scope: !4141)
!4152 = !DILocation(line: 723, column: 17, scope: !4141)
!4153 = !DILocation(line: 723, column: 20, scope: !4141)
!4154 = !DILocation(line: 723, column: 2, scope: !4141)
!4155 = !DILocation(line: 724, column: 18, scope: !4141)
!4156 = !DILocation(line: 724, column: 21, scope: !4141)
!4157 = !DILocation(line: 724, column: 9, scope: !4141)
!4158 = !DILocation(line: 724, column: 2, scope: !4141)
!4159 = distinct !DISubprogram(name: "sub_v2_v2v2", scope: !4142, file: !4142, line: 338, type: !4160, scopeLine: 339, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!4160 = !DISubroutineType(types: !4161)
!4161 = !{null, !170, !1865, !1865}
!4162 = !DILocalVariable(name: "r", arg: 1, scope: !4159, file: !4142, line: 338, type: !170)
!4163 = !DILocation(line: 338, column: 32, scope: !4159)
!4164 = !DILocalVariable(name: "a", arg: 2, scope: !4159, file: !4142, line: 338, type: !1865)
!4165 = !DILocation(line: 338, column: 50, scope: !4159)
!4166 = !DILocalVariable(name: "b", arg: 3, scope: !4159, file: !4142, line: 338, type: !1865)
!4167 = !DILocation(line: 338, column: 68, scope: !4159)
!4168 = !DILocation(line: 340, column: 9, scope: !4159)
!4169 = !DILocation(line: 340, column: 16, scope: !4159)
!4170 = !DILocation(line: 340, column: 14, scope: !4159)
!4171 = !DILocation(line: 340, column: 2, scope: !4159)
!4172 = !DILocation(line: 340, column: 7, scope: !4159)
!4173 = !DILocation(line: 341, column: 9, scope: !4159)
!4174 = !DILocation(line: 341, column: 16, scope: !4159)
!4175 = !DILocation(line: 341, column: 14, scope: !4159)
!4176 = !DILocation(line: 341, column: 2, scope: !4159)
!4177 = !DILocation(line: 341, column: 7, scope: !4159)
!4178 = !DILocation(line: 342, column: 1, scope: !4159)
!4179 = distinct !DISubprogram(name: "dot_v2v2", scope: !4142, file: !4142, line: 614, type: !4143, scopeLine: 615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!4180 = !DILocalVariable(name: "a", arg: 1, scope: !4179, file: !4142, line: 614, type: !1865)
!4181 = !DILocation(line: 614, column: 36, scope: !4179)
!4182 = !DILocalVariable(name: "b", arg: 2, scope: !4179, file: !4142, line: 614, type: !1865)
!4183 = !DILocation(line: 614, column: 54, scope: !4179)
!4184 = !DILocation(line: 616, column: 9, scope: !4179)
!4185 = !DILocation(line: 616, column: 16, scope: !4179)
!4186 = !DILocation(line: 616, column: 14, scope: !4179)
!4187 = !DILocation(line: 616, column: 23, scope: !4179)
!4188 = !DILocation(line: 616, column: 30, scope: !4179)
!4189 = !DILocation(line: 616, column: 28, scope: !4179)
!4190 = !DILocation(line: 616, column: 21, scope: !4179)
!4191 = !DILocation(line: 616, column: 2, scope: !4179)
!4192 = distinct !DISubprogram(name: "is_power_of_2_i", scope: !3863, file: !3863, line: 117, type: !3864, scopeLine: 118, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!4193 = !DILocalVariable(name: "n", arg: 1, scope: !4192, file: !3863, line: 117, type: !63)
!4194 = !DILocation(line: 117, column: 33, scope: !4192)
!4195 = !DILocation(line: 119, column: 10, scope: !4192)
!4196 = !DILocation(line: 119, column: 15, scope: !4192)
!4197 = !DILocation(line: 119, column: 17, scope: !4192)
!4198 = !DILocation(line: 119, column: 12, scope: !4192)
!4199 = !DILocation(line: 119, column: 23, scope: !4192)
!4200 = !DILocation(line: 119, column: 2, scope: !4192)
!4201 = distinct !DISubprogram(name: "BM_edge_other_vert", scope: !4202, file: !4202, line: 60, type: !4203, scopeLine: 61, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!4202 = !DIFile(filename: "blender/source/blender/bmesh/intern/bmesh_queries_inline.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!4203 = !DISubroutineType(types: !4204)
!4204 = !{!51, !138, !4205}
!4205 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4206, size: 64)
!4206 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !52)
!4207 = !DILocalVariable(name: "e", arg: 1, scope: !4201, file: !4202, line: 60, type: !138)
!4208 = !DILocation(line: 60, column: 47, scope: !4201)
!4209 = !DILocalVariable(name: "v", arg: 2, scope: !4201, file: !4202, line: 60, type: !4205)
!4210 = !DILocation(line: 60, column: 64, scope: !4201)
!4211 = !DILocation(line: 62, column: 6, scope: !4212)
!4212 = distinct !DILexicalBlock(scope: !4201, file: !4202, line: 62, column: 6)
!4213 = !DILocation(line: 62, column: 9, scope: !4212)
!4214 = !DILocation(line: 62, column: 15, scope: !4212)
!4215 = !DILocation(line: 62, column: 12, scope: !4212)
!4216 = !DILocation(line: 62, column: 6, scope: !4201)
!4217 = !DILocation(line: 63, column: 10, scope: !4218)
!4218 = distinct !DILexicalBlock(scope: !4212, file: !4202, line: 62, column: 18)
!4219 = !DILocation(line: 63, column: 13, scope: !4218)
!4220 = !DILocation(line: 63, column: 3, scope: !4218)
!4221 = !DILocation(line: 65, column: 11, scope: !4222)
!4222 = distinct !DILexicalBlock(scope: !4212, file: !4202, line: 65, column: 11)
!4223 = !DILocation(line: 65, column: 14, scope: !4222)
!4224 = !DILocation(line: 65, column: 20, scope: !4222)
!4225 = !DILocation(line: 65, column: 17, scope: !4222)
!4226 = !DILocation(line: 65, column: 11, scope: !4212)
!4227 = !DILocation(line: 66, column: 10, scope: !4228)
!4228 = distinct !DILexicalBlock(scope: !4222, file: !4202, line: 65, column: 23)
!4229 = !DILocation(line: 66, column: 13, scope: !4228)
!4230 = !DILocation(line: 66, column: 3, scope: !4228)
!4231 = !DILocation(line: 68, column: 2, scope: !4201)
!4232 = !DILocation(line: 69, column: 1, scope: !4201)
!4233 = distinct !DISubprogram(name: "BM_iter_init", scope: !1002, file: !1002, line: 53, type: !4234, scopeLine: 54, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!4234 = !DISubroutineType(types: !4235)
!4235 = !{!152, !1005, !321, !361, !61}
!4236 = !DILocalVariable(name: "iter", arg: 1, scope: !4233, file: !1002, line: 53, type: !1005)
!4237 = !DILocation(line: 53, column: 38, scope: !4233)
!4238 = !DILocalVariable(name: "bm", arg: 2, scope: !4233, file: !1002, line: 53, type: !321)
!4239 = !DILocation(line: 53, column: 51, scope: !4233)
!4240 = !DILocalVariable(name: "itype", arg: 3, scope: !4233, file: !1002, line: 53, type: !361)
!4241 = !DILocation(line: 53, column: 66, scope: !4233)
!4242 = !DILocalVariable(name: "data", arg: 4, scope: !4233, file: !1002, line: 53, type: !61)
!4243 = !DILocation(line: 53, column: 79, scope: !4233)
!4244 = !DILocation(line: 56, column: 16, scope: !4233)
!4245 = !DILocation(line: 56, column: 2, scope: !4233)
!4246 = !DILocation(line: 56, column: 8, scope: !4233)
!4247 = !DILocation(line: 56, column: 14, scope: !4233)
!4248 = !DILocation(line: 59, column: 22, scope: !4233)
!4249 = !DILocation(line: 59, column: 10, scope: !4233)
!4250 = !DILocation(line: 59, column: 2, scope: !4233)
!4251 = !DILocation(line: 63, column: 4, scope: !4252)
!4252 = distinct !DILexicalBlock(scope: !4233, file: !1002, line: 59, column: 29)
!4253 = !DILocation(line: 63, column: 10, scope: !4252)
!4254 = !DILocation(line: 63, column: 16, scope: !4252)
!4255 = !DILocation(line: 64, column: 4, scope: !4252)
!4256 = !DILocation(line: 64, column: 10, scope: !4252)
!4257 = !DILocation(line: 64, column: 16, scope: !4252)
!4258 = !DILocation(line: 65, column: 44, scope: !4252)
!4259 = !DILocation(line: 65, column: 48, scope: !4252)
!4260 = !DILocation(line: 65, column: 4, scope: !4252)
!4261 = !DILocation(line: 65, column: 10, scope: !4252)
!4262 = !DILocation(line: 65, column: 15, scope: !4252)
!4263 = !DILocation(line: 65, column: 28, scope: !4252)
!4264 = !DILocation(line: 65, column: 37, scope: !4252)
!4265 = !DILocation(line: 65, column: 42, scope: !4252)
!4266 = !DILocation(line: 66, column: 4, scope: !4252)
!4267 = !DILocation(line: 70, column: 4, scope: !4252)
!4268 = !DILocation(line: 70, column: 10, scope: !4252)
!4269 = !DILocation(line: 70, column: 16, scope: !4252)
!4270 = !DILocation(line: 71, column: 4, scope: !4252)
!4271 = !DILocation(line: 71, column: 10, scope: !4252)
!4272 = !DILocation(line: 71, column: 16, scope: !4252)
!4273 = !DILocation(line: 72, column: 44, scope: !4252)
!4274 = !DILocation(line: 72, column: 48, scope: !4252)
!4275 = !DILocation(line: 72, column: 4, scope: !4252)
!4276 = !DILocation(line: 72, column: 10, scope: !4252)
!4277 = !DILocation(line: 72, column: 15, scope: !4252)
!4278 = !DILocation(line: 72, column: 28, scope: !4252)
!4279 = !DILocation(line: 72, column: 37, scope: !4252)
!4280 = !DILocation(line: 72, column: 42, scope: !4252)
!4281 = !DILocation(line: 73, column: 4, scope: !4252)
!4282 = !DILocation(line: 77, column: 4, scope: !4252)
!4283 = !DILocation(line: 77, column: 10, scope: !4252)
!4284 = !DILocation(line: 77, column: 16, scope: !4252)
!4285 = !DILocation(line: 78, column: 4, scope: !4252)
!4286 = !DILocation(line: 78, column: 10, scope: !4252)
!4287 = !DILocation(line: 78, column: 16, scope: !4252)
!4288 = !DILocation(line: 79, column: 44, scope: !4252)
!4289 = !DILocation(line: 79, column: 48, scope: !4252)
!4290 = !DILocation(line: 79, column: 4, scope: !4252)
!4291 = !DILocation(line: 79, column: 10, scope: !4252)
!4292 = !DILocation(line: 79, column: 15, scope: !4252)
!4293 = !DILocation(line: 79, column: 28, scope: !4252)
!4294 = !DILocation(line: 79, column: 37, scope: !4252)
!4295 = !DILocation(line: 79, column: 42, scope: !4252)
!4296 = !DILocation(line: 80, column: 4, scope: !4252)
!4297 = !DILocation(line: 84, column: 4, scope: !4252)
!4298 = !DILocation(line: 84, column: 10, scope: !4252)
!4299 = !DILocation(line: 84, column: 16, scope: !4252)
!4300 = !DILocation(line: 85, column: 4, scope: !4252)
!4301 = !DILocation(line: 85, column: 10, scope: !4252)
!4302 = !DILocation(line: 85, column: 16, scope: !4252)
!4303 = !DILocation(line: 86, column: 46, scope: !4252)
!4304 = !DILocation(line: 86, column: 36, scope: !4252)
!4305 = !DILocation(line: 86, column: 4, scope: !4252)
!4306 = !DILocation(line: 86, column: 10, scope: !4252)
!4307 = !DILocation(line: 86, column: 15, scope: !4252)
!4308 = !DILocation(line: 86, column: 28, scope: !4252)
!4309 = !DILocation(line: 86, column: 34, scope: !4252)
!4310 = !DILocation(line: 87, column: 4, scope: !4252)
!4311 = !DILocation(line: 91, column: 4, scope: !4252)
!4312 = !DILocation(line: 91, column: 10, scope: !4252)
!4313 = !DILocation(line: 91, column: 16, scope: !4252)
!4314 = !DILocation(line: 92, column: 4, scope: !4252)
!4315 = !DILocation(line: 92, column: 10, scope: !4252)
!4316 = !DILocation(line: 92, column: 16, scope: !4252)
!4317 = !DILocation(line: 93, column: 46, scope: !4252)
!4318 = !DILocation(line: 93, column: 36, scope: !4252)
!4319 = !DILocation(line: 93, column: 4, scope: !4252)
!4320 = !DILocation(line: 93, column: 10, scope: !4252)
!4321 = !DILocation(line: 93, column: 15, scope: !4252)
!4322 = !DILocation(line: 93, column: 28, scope: !4252)
!4323 = !DILocation(line: 93, column: 34, scope: !4252)
!4324 = !DILocation(line: 94, column: 4, scope: !4252)
!4325 = !DILocation(line: 98, column: 4, scope: !4252)
!4326 = !DILocation(line: 98, column: 10, scope: !4252)
!4327 = !DILocation(line: 98, column: 16, scope: !4252)
!4328 = !DILocation(line: 99, column: 4, scope: !4252)
!4329 = !DILocation(line: 99, column: 10, scope: !4252)
!4330 = !DILocation(line: 99, column: 16, scope: !4252)
!4331 = !DILocation(line: 100, column: 46, scope: !4252)
!4332 = !DILocation(line: 100, column: 36, scope: !4252)
!4333 = !DILocation(line: 100, column: 4, scope: !4252)
!4334 = !DILocation(line: 100, column: 10, scope: !4252)
!4335 = !DILocation(line: 100, column: 15, scope: !4252)
!4336 = !DILocation(line: 100, column: 28, scope: !4252)
!4337 = !DILocation(line: 100, column: 34, scope: !4252)
!4338 = !DILocation(line: 101, column: 4, scope: !4252)
!4339 = !DILocation(line: 105, column: 4, scope: !4252)
!4340 = !DILocation(line: 105, column: 10, scope: !4252)
!4341 = !DILocation(line: 105, column: 16, scope: !4252)
!4342 = !DILocation(line: 106, column: 4, scope: !4252)
!4343 = !DILocation(line: 106, column: 10, scope: !4252)
!4344 = !DILocation(line: 106, column: 16, scope: !4252)
!4345 = !DILocation(line: 107, column: 46, scope: !4252)
!4346 = !DILocation(line: 107, column: 36, scope: !4252)
!4347 = !DILocation(line: 107, column: 4, scope: !4252)
!4348 = !DILocation(line: 107, column: 10, scope: !4252)
!4349 = !DILocation(line: 107, column: 15, scope: !4252)
!4350 = !DILocation(line: 107, column: 28, scope: !4252)
!4351 = !DILocation(line: 107, column: 34, scope: !4252)
!4352 = !DILocation(line: 108, column: 4, scope: !4252)
!4353 = !DILocation(line: 112, column: 4, scope: !4252)
!4354 = !DILocation(line: 112, column: 10, scope: !4252)
!4355 = !DILocation(line: 112, column: 16, scope: !4252)
!4356 = !DILocation(line: 113, column: 4, scope: !4252)
!4357 = !DILocation(line: 113, column: 10, scope: !4252)
!4358 = !DILocation(line: 113, column: 16, scope: !4252)
!4359 = !DILocation(line: 114, column: 46, scope: !4252)
!4360 = !DILocation(line: 114, column: 36, scope: !4252)
!4361 = !DILocation(line: 114, column: 4, scope: !4252)
!4362 = !DILocation(line: 114, column: 10, scope: !4252)
!4363 = !DILocation(line: 114, column: 15, scope: !4252)
!4364 = !DILocation(line: 114, column: 28, scope: !4252)
!4365 = !DILocation(line: 114, column: 34, scope: !4252)
!4366 = !DILocation(line: 115, column: 4, scope: !4252)
!4367 = !DILocation(line: 119, column: 4, scope: !4252)
!4368 = !DILocation(line: 119, column: 10, scope: !4252)
!4369 = !DILocation(line: 119, column: 16, scope: !4252)
!4370 = !DILocation(line: 120, column: 4, scope: !4252)
!4371 = !DILocation(line: 120, column: 10, scope: !4252)
!4372 = !DILocation(line: 120, column: 16, scope: !4252)
!4373 = !DILocation(line: 121, column: 46, scope: !4252)
!4374 = !DILocation(line: 121, column: 36, scope: !4252)
!4375 = !DILocation(line: 121, column: 4, scope: !4252)
!4376 = !DILocation(line: 121, column: 10, scope: !4252)
!4377 = !DILocation(line: 121, column: 15, scope: !4252)
!4378 = !DILocation(line: 121, column: 28, scope: !4252)
!4379 = !DILocation(line: 121, column: 34, scope: !4252)
!4380 = !DILocation(line: 122, column: 4, scope: !4252)
!4381 = !DILocation(line: 126, column: 4, scope: !4252)
!4382 = !DILocation(line: 126, column: 10, scope: !4252)
!4383 = !DILocation(line: 126, column: 16, scope: !4252)
!4384 = !DILocation(line: 127, column: 4, scope: !4252)
!4385 = !DILocation(line: 127, column: 10, scope: !4252)
!4386 = !DILocation(line: 127, column: 16, scope: !4252)
!4387 = !DILocation(line: 128, column: 46, scope: !4252)
!4388 = !DILocation(line: 128, column: 36, scope: !4252)
!4389 = !DILocation(line: 128, column: 4, scope: !4252)
!4390 = !DILocation(line: 128, column: 10, scope: !4252)
!4391 = !DILocation(line: 128, column: 15, scope: !4252)
!4392 = !DILocation(line: 128, column: 28, scope: !4252)
!4393 = !DILocation(line: 128, column: 34, scope: !4252)
!4394 = !DILocation(line: 129, column: 4, scope: !4252)
!4395 = !DILocation(line: 133, column: 4, scope: !4252)
!4396 = !DILocation(line: 133, column: 10, scope: !4252)
!4397 = !DILocation(line: 133, column: 16, scope: !4252)
!4398 = !DILocation(line: 134, column: 4, scope: !4252)
!4399 = !DILocation(line: 134, column: 10, scope: !4252)
!4400 = !DILocation(line: 134, column: 16, scope: !4252)
!4401 = !DILocation(line: 135, column: 46, scope: !4252)
!4402 = !DILocation(line: 135, column: 36, scope: !4252)
!4403 = !DILocation(line: 135, column: 4, scope: !4252)
!4404 = !DILocation(line: 135, column: 10, scope: !4252)
!4405 = !DILocation(line: 135, column: 15, scope: !4252)
!4406 = !DILocation(line: 135, column: 28, scope: !4252)
!4407 = !DILocation(line: 135, column: 34, scope: !4252)
!4408 = !DILocation(line: 136, column: 4, scope: !4252)
!4409 = !DILocation(line: 140, column: 4, scope: !4252)
!4410 = !DILocation(line: 140, column: 10, scope: !4252)
!4411 = !DILocation(line: 140, column: 16, scope: !4252)
!4412 = !DILocation(line: 141, column: 4, scope: !4252)
!4413 = !DILocation(line: 141, column: 10, scope: !4252)
!4414 = !DILocation(line: 141, column: 16, scope: !4252)
!4415 = !DILocation(line: 142, column: 46, scope: !4252)
!4416 = !DILocation(line: 142, column: 36, scope: !4252)
!4417 = !DILocation(line: 142, column: 4, scope: !4252)
!4418 = !DILocation(line: 142, column: 10, scope: !4252)
!4419 = !DILocation(line: 142, column: 15, scope: !4252)
!4420 = !DILocation(line: 142, column: 28, scope: !4252)
!4421 = !DILocation(line: 142, column: 34, scope: !4252)
!4422 = !DILocation(line: 143, column: 4, scope: !4252)
!4423 = !DILocation(line: 147, column: 4, scope: !4252)
!4424 = !DILocation(line: 147, column: 10, scope: !4252)
!4425 = !DILocation(line: 147, column: 16, scope: !4252)
!4426 = !DILocation(line: 148, column: 4, scope: !4252)
!4427 = !DILocation(line: 148, column: 10, scope: !4252)
!4428 = !DILocation(line: 148, column: 16, scope: !4252)
!4429 = !DILocation(line: 149, column: 46, scope: !4252)
!4430 = !DILocation(line: 149, column: 36, scope: !4252)
!4431 = !DILocation(line: 149, column: 4, scope: !4252)
!4432 = !DILocation(line: 149, column: 10, scope: !4252)
!4433 = !DILocation(line: 149, column: 15, scope: !4252)
!4434 = !DILocation(line: 149, column: 28, scope: !4252)
!4435 = !DILocation(line: 149, column: 34, scope: !4252)
!4436 = !DILocation(line: 150, column: 4, scope: !4252)
!4437 = !DILocation(line: 154, column: 4, scope: !4252)
!4438 = !DILocation(line: 158, column: 2, scope: !4233)
!4439 = !DILocation(line: 158, column: 8, scope: !4233)
!4440 = !DILocation(line: 158, column: 14, scope: !4233)
!4441 = !DILocation(line: 160, column: 2, scope: !4233)
!4442 = !DILocation(line: 161, column: 1, scope: !4233)
!4443 = distinct !DISubprogram(name: "BM_edge_is_wire", scope: !4202, file: !4202, line: 75, type: !4444, scopeLine: 76, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!4444 = !DISubroutineType(types: !4445)
!4445 = !{!152, !4446}
!4446 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4447, size: 64)
!4447 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !139)
!4448 = !DILocalVariable(name: "e", arg: 1, scope: !4443, file: !4202, line: 75, type: !4446)
!4449 = !DILocation(line: 75, column: 47, scope: !4443)
!4450 = !DILocation(line: 77, column: 10, scope: !4443)
!4451 = !DILocation(line: 77, column: 13, scope: !4443)
!4452 = !DILocation(line: 77, column: 15, scope: !4443)
!4453 = !DILocation(line: 77, column: 9, scope: !4443)
!4454 = !DILocation(line: 77, column: 2, scope: !4443)
!4455 = distinct !DISubprogram(name: "_bm_elem_flag_disable", scope: !1025, file: !1025, line: 57, type: !4456, scopeLine: 58, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!4456 = !DISubroutineType(types: !4457)
!4457 = !{null, !4458, !361}
!4458 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !57, size: 64)
!4459 = !DILocalVariable(name: "head", arg: 1, scope: !4455, file: !1025, line: 57, type: !4458)
!4460 = !DILocation(line: 57, column: 49, scope: !4455)
!4461 = !DILocalVariable(name: "hflag", arg: 2, scope: !4455, file: !1025, line: 57, type: !361)
!4462 = !DILocation(line: 57, column: 66, scope: !4455)
!4463 = !DILocation(line: 59, column: 24, scope: !4455)
!4464 = !DILocation(line: 59, column: 23, scope: !4455)
!4465 = !DILocation(line: 59, column: 17, scope: !4455)
!4466 = !DILocation(line: 59, column: 2, scope: !4455)
!4467 = !DILocation(line: 59, column: 8, scope: !4455)
!4468 = !DILocation(line: 59, column: 14, scope: !4455)
!4469 = !DILocation(line: 60, column: 1, scope: !4455)
!4470 = distinct !DISubprogram(name: "_bm_elem_index_get", scope: !1025, file: !1025, line: 119, type: !4471, scopeLine: 120, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!4471 = !DISubroutineType(types: !4472)
!4472 = !{!63, !1028}
!4473 = !DILocalVariable(name: "head", arg: 1, scope: !4470, file: !1025, line: 119, type: !1028)
!4474 = !DILocation(line: 119, column: 51, scope: !4470)
!4475 = !DILocation(line: 121, column: 9, scope: !4470)
!4476 = !DILocation(line: 121, column: 15, scope: !4470)
!4477 = !DILocation(line: 121, column: 2, scope: !4470)
!4478 = distinct !DISubprogram(name: "bev_ccw_test", scope: !1, file: !1, line: 1025, type: !4479, scopeLine: 1026, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!4479 = !DISubroutineType(types: !4480)
!4480 = !{!63, !138, !138, !141}
!4481 = !DILocalVariable(name: "a", arg: 1, scope: !4478, file: !1, line: 1025, type: !138)
!4482 = !DILocation(line: 1025, column: 33, scope: !4478)
!4483 = !DILocalVariable(name: "b", arg: 2, scope: !4478, file: !1, line: 1025, type: !138)
!4484 = !DILocation(line: 1025, column: 44, scope: !4478)
!4485 = !DILocalVariable(name: "f", arg: 3, scope: !4478, file: !1, line: 1025, type: !141)
!4486 = !DILocation(line: 1025, column: 55, scope: !4478)
!4487 = !DILocalVariable(name: "la", scope: !4478, file: !1, line: 1027, type: !103)
!4488 = !DILocation(line: 1027, column: 10, scope: !4478)
!4489 = !DILocalVariable(name: "lb", scope: !4478, file: !1, line: 1027, type: !103)
!4490 = !DILocation(line: 1027, column: 15, scope: !4478)
!4491 = !DILocation(line: 1029, column: 7, scope: !4492)
!4492 = distinct !DILexicalBlock(scope: !4478, file: !1, line: 1029, column: 6)
!4493 = !DILocation(line: 1029, column: 6, scope: !4478)
!4494 = !DILocation(line: 1030, column: 3, scope: !4492)
!4495 = !DILocation(line: 1031, column: 31, scope: !4478)
!4496 = !DILocation(line: 1031, column: 34, scope: !4478)
!4497 = !DILocation(line: 1031, column: 7, scope: !4478)
!4498 = !DILocation(line: 1031, column: 5, scope: !4478)
!4499 = !DILocation(line: 1032, column: 31, scope: !4478)
!4500 = !DILocation(line: 1032, column: 34, scope: !4478)
!4501 = !DILocation(line: 1032, column: 7, scope: !4478)
!4502 = !DILocation(line: 1032, column: 5, scope: !4478)
!4503 = !DILocation(line: 1033, column: 7, scope: !4504)
!4504 = distinct !DILexicalBlock(scope: !4478, file: !1, line: 1033, column: 6)
!4505 = !DILocation(line: 1033, column: 10, scope: !4504)
!4506 = !DILocation(line: 1033, column: 14, scope: !4504)
!4507 = !DILocation(line: 1033, column: 6, scope: !4478)
!4508 = !DILocation(line: 1034, column: 3, scope: !4504)
!4509 = !DILocation(line: 1035, column: 9, scope: !4478)
!4510 = !DILocation(line: 1035, column: 13, scope: !4478)
!4511 = !DILocation(line: 1035, column: 21, scope: !4478)
!4512 = !DILocation(line: 1035, column: 18, scope: !4478)
!4513 = !DILocation(line: 1035, column: 2, scope: !4478)
!4514 = !DILocation(line: 1036, column: 1, scope: !4478)
!4515 = distinct !DISubprogram(name: "edge_face_angle", scope: !1, file: !1, line: 2837, type: !4516, scopeLine: 2838, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!4516 = !DISubroutineType(types: !4517)
!4517 = !{!76, !130}
!4518 = !DILocalVariable(name: "e", arg: 1, scope: !4515, file: !1, line: 2837, type: !130)
!4519 = !DILocation(line: 2837, column: 40, scope: !4515)
!4520 = !DILocation(line: 2839, column: 6, scope: !4521)
!4521 = distinct !DILexicalBlock(scope: !4515, file: !1, line: 2839, column: 6)
!4522 = !DILocation(line: 2839, column: 9, scope: !4521)
!4523 = !DILocation(line: 2839, column: 15, scope: !4521)
!4524 = !DILocation(line: 2839, column: 18, scope: !4521)
!4525 = !DILocation(line: 2839, column: 21, scope: !4521)
!4526 = !DILocation(line: 2839, column: 6, scope: !4515)
!4527 = !DILocation(line: 2841, column: 46, scope: !4528)
!4528 = distinct !DILexicalBlock(scope: !4521, file: !1, line: 2839, column: 28)
!4529 = !DILocation(line: 2841, column: 49, scope: !4528)
!4530 = !DILocation(line: 2841, column: 56, scope: !4528)
!4531 = !DILocation(line: 2841, column: 60, scope: !4528)
!4532 = !DILocation(line: 2841, column: 63, scope: !4528)
!4533 = !DILocation(line: 2841, column: 70, scope: !4528)
!4534 = !DILocation(line: 2841, column: 24, scope: !4528)
!4535 = !DILocation(line: 2841, column: 22, scope: !4528)
!4536 = !DILocation(line: 2841, column: 3, scope: !4528)
!4537 = !DILocation(line: 2844, column: 3, scope: !4538)
!4538 = distinct !DILexicalBlock(scope: !4521, file: !1, line: 2843, column: 7)
!4539 = !DILocation(line: 2846, column: 1, scope: !4515)
!4540 = distinct !DISubprogram(name: "contig_ldata_across_edge", scope: !1, file: !1, line: 434, type: !4541, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!4541 = !DISubroutineType(types: !4542)
!4542 = !{!152, !321, !138, !141, !141}
!4543 = !DILocalVariable(name: "bm", arg: 1, scope: !4540, file: !1, line: 434, type: !321)
!4544 = !DILocation(line: 434, column: 45, scope: !4540)
!4545 = !DILocalVariable(name: "e", arg: 2, scope: !4540, file: !1, line: 434, type: !138)
!4546 = !DILocation(line: 434, column: 57, scope: !4540)
!4547 = !DILocalVariable(name: "f1", arg: 3, scope: !4540, file: !1, line: 434, type: !141)
!4548 = !DILocation(line: 434, column: 68, scope: !4540)
!4549 = !DILocalVariable(name: "f2", arg: 4, scope: !4540, file: !1, line: 434, type: !141)
!4550 = !DILocation(line: 434, column: 80, scope: !4540)
!4551 = !DILocalVariable(name: "lef1", scope: !4540, file: !1, line: 436, type: !103)
!4552 = !DILocation(line: 436, column: 10, scope: !4540)
!4553 = !DILocalVariable(name: "lef2", scope: !4540, file: !1, line: 436, type: !103)
!4554 = !DILocation(line: 436, column: 17, scope: !4540)
!4555 = !DILocalVariable(name: "lv1f1", scope: !4540, file: !1, line: 437, type: !103)
!4556 = !DILocation(line: 437, column: 10, scope: !4540)
!4557 = !DILocalVariable(name: "lv1f2", scope: !4540, file: !1, line: 437, type: !103)
!4558 = !DILocation(line: 437, column: 18, scope: !4540)
!4559 = !DILocalVariable(name: "lv2f1", scope: !4540, file: !1, line: 437, type: !103)
!4560 = !DILocation(line: 437, column: 26, scope: !4540)
!4561 = !DILocalVariable(name: "lv2f2", scope: !4540, file: !1, line: 437, type: !103)
!4562 = !DILocation(line: 437, column: 34, scope: !4540)
!4563 = !DILocalVariable(name: "v1", scope: !4540, file: !1, line: 438, type: !51)
!4564 = !DILocation(line: 438, column: 10, scope: !4540)
!4565 = !DILocalVariable(name: "v2", scope: !4540, file: !1, line: 438, type: !51)
!4566 = !DILocation(line: 438, column: 15, scope: !4540)
!4567 = !DILocalVariable(name: "i", scope: !4540, file: !1, line: 439, type: !63)
!4568 = !DILocation(line: 439, column: 6, scope: !4540)
!4569 = !DILocation(line: 441, column: 6, scope: !4570)
!4570 = distinct !DILexicalBlock(scope: !4540, file: !1, line: 441, column: 6)
!4571 = !DILocation(line: 441, column: 10, scope: !4570)
!4572 = !DILocation(line: 441, column: 16, scope: !4570)
!4573 = !DILocation(line: 441, column: 25, scope: !4570)
!4574 = !DILocation(line: 441, column: 6, scope: !4540)
!4575 = !DILocation(line: 442, column: 3, scope: !4570)
!4576 = !DILocation(line: 444, column: 7, scope: !4540)
!4577 = !DILocation(line: 444, column: 10, scope: !4540)
!4578 = !DILocation(line: 444, column: 5, scope: !4540)
!4579 = !DILocation(line: 445, column: 7, scope: !4540)
!4580 = !DILocation(line: 445, column: 10, scope: !4540)
!4581 = !DILocation(line: 445, column: 5, scope: !4540)
!4582 = !DILocation(line: 446, column: 25, scope: !4583)
!4583 = distinct !DILexicalBlock(scope: !4540, file: !1, line: 446, column: 6)
!4584 = !DILocation(line: 446, column: 7, scope: !4583)
!4585 = !DILocation(line: 446, column: 6, scope: !4540)
!4586 = !DILocation(line: 447, column: 3, scope: !4583)
!4587 = !DILocation(line: 448, column: 6, scope: !4588)
!4588 = distinct !DILexicalBlock(scope: !4540, file: !1, line: 448, column: 6)
!4589 = !DILocation(line: 448, column: 12, scope: !4588)
!4590 = !DILocation(line: 448, column: 17, scope: !4588)
!4591 = !DILocation(line: 448, column: 14, scope: !4588)
!4592 = !DILocation(line: 448, column: 6, scope: !4540)
!4593 = !DILocalVariable(name: "sw_ap", scope: !4594, file: !1, line: 449, type: !103)
!4594 = distinct !DILexicalBlock(scope: !4595, file: !1, line: 449, column: 3)
!4595 = distinct !DILexicalBlock(scope: !4588, file: !1, line: 448, column: 21)
!4596 = !DILocation(line: 449, column: 3, scope: !4594)
!4597 = !DILocation(line: 450, column: 2, scope: !4595)
!4598 = !DILocation(line: 452, column: 6, scope: !4599)
!4599 = distinct !DILexicalBlock(scope: !4540, file: !1, line: 452, column: 6)
!4600 = !DILocation(line: 452, column: 12, scope: !4599)
!4601 = !DILocation(line: 452, column: 17, scope: !4599)
!4602 = !DILocation(line: 452, column: 14, scope: !4599)
!4603 = !DILocation(line: 452, column: 6, scope: !4540)
!4604 = !DILocation(line: 453, column: 11, scope: !4605)
!4605 = distinct !DILexicalBlock(scope: !4599, file: !1, line: 452, column: 21)
!4606 = !DILocation(line: 453, column: 9, scope: !4605)
!4607 = !DILocation(line: 454, column: 35, scope: !4605)
!4608 = !DILocation(line: 454, column: 39, scope: !4605)
!4609 = !DILocation(line: 454, column: 42, scope: !4605)
!4610 = !DILocation(line: 454, column: 11, scope: !4605)
!4611 = !DILocation(line: 454, column: 9, scope: !4605)
!4612 = !DILocation(line: 455, column: 2, scope: !4605)
!4613 = !DILocation(line: 457, column: 11, scope: !4614)
!4614 = distinct !DILexicalBlock(scope: !4599, file: !1, line: 456, column: 7)
!4615 = !DILocation(line: 457, column: 9, scope: !4614)
!4616 = !DILocation(line: 458, column: 35, scope: !4614)
!4617 = !DILocation(line: 458, column: 39, scope: !4614)
!4618 = !DILocation(line: 458, column: 42, scope: !4614)
!4619 = !DILocation(line: 458, column: 11, scope: !4614)
!4620 = !DILocation(line: 458, column: 9, scope: !4614)
!4621 = !DILocation(line: 461, column: 6, scope: !4622)
!4622 = distinct !DILexicalBlock(scope: !4540, file: !1, line: 461, column: 6)
!4623 = !DILocation(line: 461, column: 12, scope: !4622)
!4624 = !DILocation(line: 461, column: 17, scope: !4622)
!4625 = !DILocation(line: 461, column: 14, scope: !4622)
!4626 = !DILocation(line: 461, column: 6, scope: !4540)
!4627 = !DILocation(line: 462, column: 11, scope: !4628)
!4628 = distinct !DILexicalBlock(scope: !4622, file: !1, line: 461, column: 21)
!4629 = !DILocation(line: 462, column: 9, scope: !4628)
!4630 = !DILocation(line: 463, column: 35, scope: !4628)
!4631 = !DILocation(line: 463, column: 39, scope: !4628)
!4632 = !DILocation(line: 463, column: 42, scope: !4628)
!4633 = !DILocation(line: 463, column: 11, scope: !4628)
!4634 = !DILocation(line: 463, column: 9, scope: !4628)
!4635 = !DILocation(line: 464, column: 2, scope: !4628)
!4636 = !DILocation(line: 466, column: 11, scope: !4637)
!4637 = distinct !DILexicalBlock(scope: !4622, file: !1, line: 465, column: 7)
!4638 = !DILocation(line: 466, column: 9, scope: !4637)
!4639 = !DILocation(line: 467, column: 35, scope: !4637)
!4640 = !DILocation(line: 467, column: 39, scope: !4637)
!4641 = !DILocation(line: 467, column: 42, scope: !4637)
!4642 = !DILocation(line: 467, column: 11, scope: !4637)
!4643 = !DILocation(line: 467, column: 9, scope: !4637)
!4644 = !DILocation(line: 470, column: 9, scope: !4645)
!4645 = distinct !DILexicalBlock(scope: !4540, file: !1, line: 470, column: 2)
!4646 = !DILocation(line: 470, column: 7, scope: !4645)
!4647 = !DILocation(line: 470, column: 14, scope: !4648)
!4648 = distinct !DILexicalBlock(scope: !4645, file: !1, line: 470, column: 2)
!4649 = !DILocation(line: 470, column: 18, scope: !4648)
!4650 = !DILocation(line: 470, column: 22, scope: !4648)
!4651 = !DILocation(line: 470, column: 28, scope: !4648)
!4652 = !DILocation(line: 470, column: 16, scope: !4648)
!4653 = !DILocation(line: 470, column: 2, scope: !4645)
!4654 = !DILocation(line: 471, column: 34, scope: !4655)
!4655 = distinct !DILexicalBlock(scope: !4656, file: !1, line: 471, column: 7)
!4656 = distinct !DILexicalBlock(scope: !4648, file: !1, line: 470, column: 43)
!4657 = !DILocation(line: 471, column: 38, scope: !4655)
!4658 = !DILocation(line: 471, column: 45, scope: !4655)
!4659 = !DILocation(line: 471, column: 7, scope: !4655)
!4660 = !DILocation(line: 471, column: 48, scope: !4655)
!4661 = !DILocation(line: 472, column: 35, scope: !4655)
!4662 = !DILocation(line: 472, column: 39, scope: !4655)
!4663 = !DILocation(line: 472, column: 46, scope: !4655)
!4664 = !DILocation(line: 472, column: 53, scope: !4655)
!4665 = !DILocation(line: 472, column: 9, scope: !4655)
!4666 = !DILocation(line: 472, column: 56, scope: !4655)
!4667 = !DILocation(line: 473, column: 35, scope: !4655)
!4668 = !DILocation(line: 473, column: 39, scope: !4655)
!4669 = !DILocation(line: 473, column: 46, scope: !4655)
!4670 = !DILocation(line: 473, column: 53, scope: !4655)
!4671 = !DILocation(line: 473, column: 9, scope: !4655)
!4672 = !DILocation(line: 471, column: 7, scope: !4656)
!4673 = !DILocation(line: 475, column: 4, scope: !4674)
!4674 = distinct !DILexicalBlock(scope: !4655, file: !1, line: 474, column: 3)
!4675 = !DILocation(line: 477, column: 2, scope: !4656)
!4676 = !DILocation(line: 470, column: 39, scope: !4648)
!4677 = !DILocation(line: 470, column: 2, scope: !4648)
!4678 = distinct !{!4678, !4653, !4679}
!4679 = !DILocation(line: 477, column: 2, scope: !4645)
!4680 = !DILocation(line: 478, column: 2, scope: !4540)
!4681 = !DILocation(line: 479, column: 1, scope: !4540)
!4682 = distinct !DISubprogram(name: "contig_ldata_across_loops", scope: !1, file: !1, line: 422, type: !4683, scopeLine: 424, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!4683 = !DISubroutineType(types: !4684)
!4684 = !{!152, !321, !103, !103, !63}
!4685 = !DILocalVariable(name: "bm", arg: 1, scope: !4682, file: !1, line: 422, type: !321)
!4686 = !DILocation(line: 422, column: 46, scope: !4682)
!4687 = !DILocalVariable(name: "l1", arg: 2, scope: !4682, file: !1, line: 422, type: !103)
!4688 = !DILocation(line: 422, column: 58, scope: !4682)
!4689 = !DILocalVariable(name: "l2", arg: 3, scope: !4682, file: !1, line: 422, type: !103)
!4690 = !DILocation(line: 422, column: 70, scope: !4682)
!4691 = !DILocalVariable(name: "layer_index", arg: 4, scope: !4682, file: !1, line: 423, type: !63)
!4692 = !DILocation(line: 423, column: 43, scope: !4682)
!4693 = !DILocalVariable(name: "offset", scope: !4682, file: !1, line: 425, type: !460)
!4694 = !DILocation(line: 425, column: 12, scope: !4682)
!4695 = !DILocation(line: 425, column: 21, scope: !4682)
!4696 = !DILocation(line: 425, column: 25, scope: !4682)
!4697 = !DILocation(line: 425, column: 31, scope: !4682)
!4698 = !DILocation(line: 425, column: 38, scope: !4682)
!4699 = !DILocation(line: 425, column: 51, scope: !4682)
!4700 = !DILocalVariable(name: "type", scope: !4682, file: !1, line: 426, type: !460)
!4701 = !DILocation(line: 426, column: 12, scope: !4682)
!4702 = !DILocation(line: 426, column: 19, scope: !4682)
!4703 = !DILocation(line: 426, column: 23, scope: !4682)
!4704 = !DILocation(line: 426, column: 29, scope: !4682)
!4705 = !DILocation(line: 426, column: 36, scope: !4682)
!4706 = !DILocation(line: 426, column: 49, scope: !4682)
!4707 = !DILocation(line: 428, column: 32, scope: !4682)
!4708 = !DILocation(line: 429, column: 40, scope: !4682)
!4709 = !DILocation(line: 429, column: 44, scope: !4682)
!4710 = !DILocation(line: 429, column: 49, scope: !4682)
!4711 = !DILocation(line: 429, column: 56, scope: !4682)
!4712 = !DILocation(line: 429, column: 54, scope: !4682)
!4713 = !DILocation(line: 430, column: 40, scope: !4682)
!4714 = !DILocation(line: 430, column: 44, scope: !4682)
!4715 = !DILocation(line: 430, column: 49, scope: !4682)
!4716 = !DILocation(line: 430, column: 56, scope: !4682)
!4717 = !DILocation(line: 430, column: 54, scope: !4682)
!4718 = !DILocation(line: 428, column: 9, scope: !4682)
!4719 = !DILocation(line: 428, column: 2, scope: !4682)
!4720 = distinct !DISubprogram(name: "next_bev", scope: !1, file: !1, line: 328, type: !4721, scopeLine: 329, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!4721 = !DISubroutineType(types: !4722)
!4722 = !{!130, !283, !130}
!4723 = !DILocalVariable(name: "bv", arg: 1, scope: !4720, file: !1, line: 328, type: !283)
!4724 = !DILocation(line: 328, column: 36, scope: !4720)
!4725 = !DILocalVariable(name: "from_e", arg: 2, scope: !4720, file: !1, line: 328, type: !130)
!4726 = !DILocation(line: 328, column: 50, scope: !4720)
!4727 = !DILocalVariable(name: "e", scope: !4720, file: !1, line: 330, type: !130)
!4728 = !DILocation(line: 330, column: 12, scope: !4720)
!4729 = !DILocation(line: 332, column: 6, scope: !4730)
!4730 = distinct !DILexicalBlock(scope: !4720, file: !1, line: 332, column: 6)
!4731 = !DILocation(line: 332, column: 13, scope: !4730)
!4732 = !DILocation(line: 332, column: 6, scope: !4720)
!4733 = !DILocation(line: 333, column: 13, scope: !4730)
!4734 = !DILocation(line: 333, column: 17, scope: !4730)
!4735 = !DILocation(line: 333, column: 23, scope: !4730)
!4736 = !DILocation(line: 333, column: 27, scope: !4730)
!4737 = !DILocation(line: 333, column: 37, scope: !4730)
!4738 = !DILocation(line: 333, column: 10, scope: !4730)
!4739 = !DILocation(line: 333, column: 3, scope: !4730)
!4740 = !DILocation(line: 334, column: 6, scope: !4720)
!4741 = !DILocation(line: 334, column: 4, scope: !4720)
!4742 = !DILocation(line: 335, column: 2, scope: !4720)
!4743 = !DILocation(line: 336, column: 7, scope: !4744)
!4744 = distinct !DILexicalBlock(scope: !4745, file: !1, line: 336, column: 7)
!4745 = distinct !DILexicalBlock(scope: !4720, file: !1, line: 335, column: 5)
!4746 = !DILocation(line: 336, column: 10, scope: !4744)
!4747 = !DILocation(line: 336, column: 7, scope: !4745)
!4748 = !DILocation(line: 337, column: 11, scope: !4749)
!4749 = distinct !DILexicalBlock(scope: !4744, file: !1, line: 336, column: 18)
!4750 = !DILocation(line: 337, column: 4, scope: !4749)
!4751 = !DILocation(line: 339, column: 2, scope: !4745)
!4752 = !DILocation(line: 339, column: 16, scope: !4720)
!4753 = !DILocation(line: 339, column: 19, scope: !4720)
!4754 = !DILocation(line: 339, column: 14, scope: !4720)
!4755 = !DILocation(line: 339, column: 28, scope: !4720)
!4756 = !DILocation(line: 339, column: 25, scope: !4720)
!4757 = distinct !{!4757, !4742, !4758}
!4758 = !DILocation(line: 339, column: 34, scope: !4720)
!4759 = !DILocation(line: 340, column: 2, scope: !4720)
!4760 = !DILocation(line: 341, column: 1, scope: !4720)
!4761 = distinct !DISubprogram(name: "find_other_end_edge_half", scope: !1, file: !1, line: 279, type: !4762, scopeLine: 280, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!4762 = !DISubroutineType(types: !4763)
!4763 = !{!130, !801, !130, !4764}
!4764 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !283, size: 64)
!4765 = !DILocalVariable(name: "bp", arg: 1, scope: !4761, file: !1, line: 279, type: !801)
!4766 = !DILocation(line: 279, column: 56, scope: !4761)
!4767 = !DILocalVariable(name: "e", arg: 2, scope: !4761, file: !1, line: 279, type: !130)
!4768 = !DILocation(line: 279, column: 70, scope: !4761)
!4769 = !DILocalVariable(name: "r_bvother", arg: 3, scope: !4761, file: !1, line: 279, type: !4764)
!4770 = !DILocation(line: 279, column: 83, scope: !4761)
!4771 = !DILocalVariable(name: "bvo", scope: !4761, file: !1, line: 281, type: !283)
!4772 = !DILocation(line: 281, column: 11, scope: !4761)
!4773 = !DILocalVariable(name: "eother", scope: !4761, file: !1, line: 282, type: !130)
!4774 = !DILocation(line: 282, column: 12, scope: !4761)
!4775 = !DILocation(line: 284, column: 21, scope: !4761)
!4776 = !DILocation(line: 284, column: 25, scope: !4761)
!4777 = !DILocation(line: 284, column: 28, scope: !4761)
!4778 = !DILocation(line: 284, column: 37, scope: !4761)
!4779 = !DILocation(line: 284, column: 40, scope: !4761)
!4780 = !DILocation(line: 284, column: 43, scope: !4761)
!4781 = !DILocation(line: 284, column: 48, scope: !4761)
!4782 = !DILocation(line: 284, column: 51, scope: !4761)
!4783 = !DILocation(line: 284, column: 54, scope: !4761)
!4784 = !DILocation(line: 284, column: 8, scope: !4761)
!4785 = !DILocation(line: 284, column: 6, scope: !4761)
!4786 = !DILocation(line: 285, column: 6, scope: !4787)
!4787 = distinct !DILexicalBlock(scope: !4761, file: !1, line: 285, column: 6)
!4788 = !DILocation(line: 285, column: 6, scope: !4761)
!4789 = !DILocation(line: 286, column: 7, scope: !4790)
!4790 = distinct !DILexicalBlock(scope: !4791, file: !1, line: 286, column: 7)
!4791 = distinct !DILexicalBlock(scope: !4787, file: !1, line: 285, column: 11)
!4792 = !DILocation(line: 286, column: 7, scope: !4791)
!4793 = !DILocation(line: 287, column: 17, scope: !4790)
!4794 = !DILocation(line: 287, column: 5, scope: !4790)
!4795 = !DILocation(line: 287, column: 15, scope: !4790)
!4796 = !DILocation(line: 287, column: 4, scope: !4790)
!4797 = !DILocation(line: 288, column: 27, scope: !4791)
!4798 = !DILocation(line: 288, column: 32, scope: !4791)
!4799 = !DILocation(line: 288, column: 35, scope: !4791)
!4800 = !DILocation(line: 288, column: 12, scope: !4791)
!4801 = !DILocation(line: 288, column: 10, scope: !4791)
!4802 = !DILocation(line: 290, column: 10, scope: !4791)
!4803 = !DILocation(line: 290, column: 3, scope: !4791)
!4804 = !DILocation(line: 292, column: 11, scope: !4805)
!4805 = distinct !DILexicalBlock(scope: !4787, file: !1, line: 292, column: 11)
!4806 = !DILocation(line: 292, column: 11, scope: !4787)
!4807 = !DILocation(line: 293, column: 4, scope: !4808)
!4808 = distinct !DILexicalBlock(scope: !4805, file: !1, line: 292, column: 22)
!4809 = !DILocation(line: 293, column: 14, scope: !4808)
!4810 = !DILocation(line: 294, column: 2, scope: !4808)
!4811 = !DILocation(line: 295, column: 2, scope: !4761)
!4812 = !DILocation(line: 296, column: 1, scope: !4761)
!4813 = distinct !DISubprogram(name: "offset_in_plane", scope: !1, file: !1, line: 863, type: !4814, scopeLine: 864, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!4814 = !DISubroutineType(types: !4815)
!4815 = !{null, !130, !1865, !152, !170}
!4816 = !DILocalVariable(name: "e", arg: 1, scope: !4813, file: !1, line: 863, type: !130)
!4817 = !DILocation(line: 863, column: 39, scope: !4813)
!4818 = !DILocalVariable(name: "plane_no", arg: 2, scope: !4813, file: !1, line: 863, type: !1865)
!4819 = !DILocation(line: 863, column: 54, scope: !4813)
!4820 = !DILocalVariable(name: "left", arg: 3, scope: !4813, file: !1, line: 863, type: !152)
!4821 = !DILocation(line: 863, column: 72, scope: !4813)
!4822 = !DILocalVariable(name: "r", arg: 4, scope: !4813, file: !1, line: 863, type: !170)
!4823 = !DILocation(line: 863, column: 84, scope: !4813)
!4824 = !DILocalVariable(name: "dir", scope: !4813, file: !1, line: 865, type: !75)
!4825 = !DILocation(line: 865, column: 8, scope: !4813)
!4826 = !DILocalVariable(name: "no", scope: !4813, file: !1, line: 865, type: !75)
!4827 = !DILocation(line: 865, column: 16, scope: !4813)
!4828 = !DILocalVariable(name: "fdir", scope: !4813, file: !1, line: 865, type: !75)
!4829 = !DILocation(line: 865, column: 23, scope: !4813)
!4830 = !DILocalVariable(name: "v", scope: !4813, file: !1, line: 866, type: !51)
!4831 = !DILocation(line: 866, column: 10, scope: !4813)
!4832 = !DILocation(line: 868, column: 6, scope: !4813)
!4833 = !DILocation(line: 868, column: 9, scope: !4813)
!4834 = !DILocation(line: 868, column: 18, scope: !4813)
!4835 = !DILocation(line: 868, column: 21, scope: !4813)
!4836 = !DILocation(line: 868, column: 24, scope: !4813)
!4837 = !DILocation(line: 868, column: 29, scope: !4813)
!4838 = !DILocation(line: 868, column: 32, scope: !4813)
!4839 = !DILocation(line: 868, column: 35, scope: !4813)
!4840 = !DILocation(line: 868, column: 4, scope: !4813)
!4841 = !DILocation(line: 870, column: 14, scope: !4813)
!4842 = !DILocation(line: 870, column: 38, scope: !4813)
!4843 = !DILocation(line: 870, column: 41, scope: !4813)
!4844 = !DILocation(line: 870, column: 44, scope: !4813)
!4845 = !DILocation(line: 870, column: 19, scope: !4813)
!4846 = !DILocation(line: 870, column: 48, scope: !4813)
!4847 = !DILocation(line: 870, column: 52, scope: !4813)
!4848 = !DILocation(line: 870, column: 55, scope: !4813)
!4849 = !DILocation(line: 870, column: 2, scope: !4813)
!4850 = !DILocation(line: 871, column: 15, scope: !4813)
!4851 = !DILocation(line: 871, column: 2, scope: !4813)
!4852 = !DILocation(line: 872, column: 6, scope: !4853)
!4853 = distinct !DILexicalBlock(scope: !4813, file: !1, line: 872, column: 6)
!4854 = !DILocation(line: 872, column: 6, scope: !4813)
!4855 = !DILocation(line: 873, column: 14, scope: !4856)
!4856 = distinct !DILexicalBlock(scope: !4853, file: !1, line: 872, column: 16)
!4857 = !DILocation(line: 873, column: 18, scope: !4856)
!4858 = !DILocation(line: 873, column: 3, scope: !4856)
!4859 = !DILocation(line: 874, column: 2, scope: !4856)
!4860 = !DILocation(line: 876, column: 11, scope: !4861)
!4861 = distinct !DILexicalBlock(scope: !4853, file: !1, line: 875, column: 7)
!4862 = !DILocation(line: 876, column: 3, scope: !4861)
!4863 = !DILocation(line: 877, column: 13, scope: !4864)
!4864 = distinct !DILexicalBlock(scope: !4861, file: !1, line: 877, column: 7)
!4865 = !DILocation(line: 877, column: 7, scope: !4864)
!4866 = !DILocation(line: 877, column: 29, scope: !4864)
!4867 = !DILocation(line: 877, column: 23, scope: !4864)
!4868 = !DILocation(line: 877, column: 21, scope: !4864)
!4869 = !DILocation(line: 877, column: 7, scope: !4861)
!4870 = !DILocation(line: 878, column: 4, scope: !4864)
!4871 = !DILocation(line: 878, column: 10, scope: !4864)
!4872 = !DILocation(line: 880, column: 4, scope: !4864)
!4873 = !DILocation(line: 880, column: 10, scope: !4864)
!4874 = !DILocation(line: 882, column: 6, scope: !4875)
!4875 = distinct !DILexicalBlock(scope: !4813, file: !1, line: 882, column: 6)
!4876 = !DILocation(line: 882, column: 6, scope: !4813)
!4877 = !DILocation(line: 883, column: 17, scope: !4875)
!4878 = !DILocation(line: 883, column: 23, scope: !4875)
!4879 = !DILocation(line: 883, column: 28, scope: !4875)
!4880 = !DILocation(line: 883, column: 3, scope: !4875)
!4881 = !DILocation(line: 885, column: 17, scope: !4875)
!4882 = !DILocation(line: 885, column: 23, scope: !4875)
!4883 = !DILocation(line: 885, column: 27, scope: !4875)
!4884 = !DILocation(line: 885, column: 3, scope: !4875)
!4885 = !DILocation(line: 886, column: 15, scope: !4813)
!4886 = !DILocation(line: 886, column: 2, scope: !4813)
!4887 = !DILocation(line: 887, column: 13, scope: !4813)
!4888 = !DILocation(line: 887, column: 16, scope: !4813)
!4889 = !DILocation(line: 887, column: 19, scope: !4813)
!4890 = !DILocation(line: 887, column: 2, scope: !4813)
!4891 = !DILocation(line: 888, column: 15, scope: !4813)
!4892 = !DILocation(line: 888, column: 18, scope: !4813)
!4893 = !DILocation(line: 888, column: 24, scope: !4813)
!4894 = !DILocation(line: 888, column: 31, scope: !4813)
!4895 = !DILocation(line: 888, column: 34, scope: !4813)
!4896 = !DILocation(line: 888, column: 45, scope: !4813)
!4897 = !DILocation(line: 888, column: 48, scope: !4813)
!4898 = !DILocation(line: 888, column: 2, scope: !4813)
!4899 = !DILocation(line: 889, column: 1, scope: !4813)
!4900 = distinct !DISubprogram(name: "add_new_bound_vert", scope: !1, file: !1, line: 199, type: !4901, scopeLine: 200, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!4901 = !DISubroutineType(types: !4902)
!4902 = !{!121, !601, !298, !1865}
!4903 = !DILocalVariable(name: "mem_arena", arg: 1, scope: !4900, file: !1, line: 199, type: !601)
!4904 = !DILocation(line: 199, column: 48, scope: !4900)
!4905 = !DILocalVariable(name: "vm", arg: 2, scope: !4900, file: !1, line: 199, type: !298)
!4906 = !DILocation(line: 199, column: 66, scope: !4900)
!4907 = !DILocalVariable(name: "co", arg: 3, scope: !4900, file: !1, line: 199, type: !1865)
!4908 = !DILocation(line: 199, column: 82, scope: !4900)
!4909 = !DILocalVariable(name: "ans", scope: !4900, file: !1, line: 201, type: !121)
!4910 = !DILocation(line: 201, column: 13, scope: !4900)
!4911 = !DILocation(line: 201, column: 51, scope: !4900)
!4912 = !DILocation(line: 201, column: 32, scope: !4900)
!4913 = !DILocation(line: 201, column: 19, scope: !4900)
!4914 = !DILocation(line: 203, column: 13, scope: !4900)
!4915 = !DILocation(line: 203, column: 18, scope: !4900)
!4916 = !DILocation(line: 203, column: 21, scope: !4900)
!4917 = !DILocation(line: 203, column: 25, scope: !4900)
!4918 = !DILocation(line: 203, column: 2, scope: !4900)
!4919 = !DILocation(line: 204, column: 7, scope: !4920)
!4920 = distinct !DILexicalBlock(scope: !4900, file: !1, line: 204, column: 6)
!4921 = !DILocation(line: 204, column: 11, scope: !4920)
!4922 = !DILocation(line: 204, column: 6, scope: !4900)
!4923 = !DILocation(line: 205, column: 3, scope: !4924)
!4924 = distinct !DILexicalBlock(scope: !4920, file: !1, line: 204, column: 23)
!4925 = !DILocation(line: 205, column: 8, scope: !4924)
!4926 = !DILocation(line: 205, column: 14, scope: !4924)
!4927 = !DILocation(line: 206, column: 20, scope: !4924)
!4928 = !DILocation(line: 206, column: 3, scope: !4924)
!4929 = !DILocation(line: 206, column: 7, scope: !4924)
!4930 = !DILocation(line: 206, column: 18, scope: !4924)
!4931 = !DILocation(line: 207, column: 27, scope: !4924)
!4932 = !DILocation(line: 207, column: 15, scope: !4924)
!4933 = !DILocation(line: 207, column: 20, scope: !4924)
!4934 = !DILocation(line: 207, column: 25, scope: !4924)
!4935 = !DILocation(line: 207, column: 3, scope: !4924)
!4936 = !DILocation(line: 207, column: 8, scope: !4924)
!4937 = !DILocation(line: 207, column: 13, scope: !4924)
!4938 = !DILocation(line: 208, column: 2, scope: !4924)
!4939 = !DILocalVariable(name: "tail", scope: !4940, file: !1, line: 210, type: !121)
!4940 = distinct !DILexicalBlock(scope: !4920, file: !1, line: 209, column: 7)
!4941 = !DILocation(line: 210, column: 14, scope: !4940)
!4942 = !DILocation(line: 210, column: 21, scope: !4940)
!4943 = !DILocation(line: 210, column: 25, scope: !4940)
!4944 = !DILocation(line: 210, column: 37, scope: !4940)
!4945 = !DILocation(line: 211, column: 16, scope: !4940)
!4946 = !DILocation(line: 211, column: 22, scope: !4940)
!4947 = !DILocation(line: 211, column: 28, scope: !4940)
!4948 = !DILocation(line: 211, column: 3, scope: !4940)
!4949 = !DILocation(line: 211, column: 8, scope: !4940)
!4950 = !DILocation(line: 211, column: 14, scope: !4940)
!4951 = !DILocation(line: 212, column: 15, scope: !4940)
!4952 = !DILocation(line: 212, column: 3, scope: !4940)
!4953 = !DILocation(line: 212, column: 8, scope: !4940)
!4954 = !DILocation(line: 212, column: 13, scope: !4940)
!4955 = !DILocation(line: 213, column: 15, scope: !4940)
!4956 = !DILocation(line: 213, column: 19, scope: !4940)
!4957 = !DILocation(line: 213, column: 3, scope: !4940)
!4958 = !DILocation(line: 213, column: 8, scope: !4940)
!4959 = !DILocation(line: 213, column: 13, scope: !4940)
!4960 = !DILocation(line: 214, column: 16, scope: !4940)
!4961 = !DILocation(line: 214, column: 3, scope: !4940)
!4962 = !DILocation(line: 214, column: 9, scope: !4940)
!4963 = !DILocation(line: 214, column: 14, scope: !4940)
!4964 = !DILocation(line: 215, column: 26, scope: !4940)
!4965 = !DILocation(line: 215, column: 3, scope: !4940)
!4966 = !DILocation(line: 215, column: 7, scope: !4940)
!4967 = !DILocation(line: 215, column: 19, scope: !4940)
!4968 = !DILocation(line: 215, column: 24, scope: !4940)
!4969 = !DILocation(line: 217, column: 2, scope: !4900)
!4970 = !DILocation(line: 217, column: 7, scope: !4900)
!4971 = !DILocation(line: 217, column: 15, scope: !4900)
!4972 = !DILocation(line: 217, column: 23, scope: !4900)
!4973 = !DILocation(line: 218, column: 2, scope: !4900)
!4974 = !DILocation(line: 218, column: 6, scope: !4900)
!4975 = !DILocation(line: 218, column: 11, scope: !4900)
!4976 = !DILocation(line: 219, column: 9, scope: !4900)
!4977 = !DILocation(line: 219, column: 2, scope: !4900)
!4978 = distinct !DISubprogram(name: "adjust_bound_vert", scope: !1, file: !1, line: 222, type: !4979, scopeLine: 223, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!4979 = !DISubroutineType(types: !4980)
!4980 = !{null, !121, !1865}
!4981 = !DILocalVariable(name: "bv", arg: 1, scope: !4978, file: !1, line: 222, type: !121)
!4982 = !DILocation(line: 222, column: 46, scope: !4978)
!4983 = !DILocalVariable(name: "co", arg: 2, scope: !4978, file: !1, line: 222, type: !1865)
!4984 = !DILocation(line: 222, column: 62, scope: !4978)
!4985 = !DILocation(line: 224, column: 13, scope: !4978)
!4986 = !DILocation(line: 224, column: 17, scope: !4978)
!4987 = !DILocation(line: 224, column: 20, scope: !4978)
!4988 = !DILocation(line: 224, column: 24, scope: !4978)
!4989 = !DILocation(line: 224, column: 2, scope: !4978)
!4990 = !DILocation(line: 225, column: 1, scope: !4978)
!4991 = distinct !DISubprogram(name: "slide_dist", scope: !1, file: !1, line: 550, type: !4992, scopeLine: 551, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!4992 = !DISubroutineType(types: !4993)
!4993 = !{null, !130, !51, !76, !170}
!4994 = !DILocalVariable(name: "e", arg: 1, scope: !4991, file: !1, line: 550, type: !130)
!4995 = !DILocation(line: 550, column: 34, scope: !4991)
!4996 = !DILocalVariable(name: "v", arg: 2, scope: !4991, file: !1, line: 550, type: !51)
!4997 = !DILocation(line: 550, column: 45, scope: !4991)
!4998 = !DILocalVariable(name: "d", arg: 3, scope: !4991, file: !1, line: 550, type: !76)
!4999 = !DILocation(line: 550, column: 54, scope: !4991)
!5000 = !DILocalVariable(name: "slideco", arg: 4, scope: !4991, file: !1, line: 550, type: !170)
!5001 = !DILocation(line: 550, column: 63, scope: !4991)
!5002 = !DILocalVariable(name: "dir", scope: !4991, file: !1, line: 552, type: !75)
!5003 = !DILocation(line: 552, column: 8, scope: !4991)
!5004 = !DILocalVariable(name: "len", scope: !4991, file: !1, line: 552, type: !76)
!5005 = !DILocation(line: 552, column: 16, scope: !4991)
!5006 = !DILocation(line: 554, column: 14, scope: !4991)
!5007 = !DILocation(line: 554, column: 19, scope: !4991)
!5008 = !DILocation(line: 554, column: 22, scope: !4991)
!5009 = !DILocation(line: 554, column: 45, scope: !4991)
!5010 = !DILocation(line: 554, column: 48, scope: !4991)
!5011 = !DILocation(line: 554, column: 51, scope: !4991)
!5012 = !DILocation(line: 554, column: 26, scope: !4991)
!5013 = !DILocation(line: 554, column: 55, scope: !4991)
!5014 = !DILocation(line: 554, column: 2, scope: !4991)
!5015 = !DILocation(line: 555, column: 21, scope: !4991)
!5016 = !DILocation(line: 555, column: 8, scope: !4991)
!5017 = !DILocation(line: 555, column: 6, scope: !4991)
!5018 = !DILocation(line: 556, column: 6, scope: !5019)
!5019 = distinct !DILexicalBlock(scope: !4991, file: !1, line: 556, column: 6)
!5020 = !DILocation(line: 556, column: 10, scope: !5019)
!5021 = !DILocation(line: 556, column: 8, scope: !5019)
!5022 = !DILocation(line: 556, column: 6, scope: !4991)
!5023 = !DILocation(line: 557, column: 7, scope: !5019)
!5024 = !DILocation(line: 557, column: 11, scope: !5019)
!5025 = !DILocation(line: 557, column: 5, scope: !5019)
!5026 = !DILocation(line: 557, column: 3, scope: !5019)
!5027 = !DILocation(line: 558, column: 13, scope: !4991)
!5028 = !DILocation(line: 558, column: 22, scope: !4991)
!5029 = !DILocation(line: 558, column: 25, scope: !4991)
!5030 = !DILocation(line: 558, column: 2, scope: !4991)
!5031 = !DILocation(line: 559, column: 15, scope: !4991)
!5032 = !DILocation(line: 559, column: 24, scope: !4991)
!5033 = !DILocation(line: 559, column: 30, scope: !4991)
!5034 = !DILocation(line: 559, column: 29, scope: !4991)
!5035 = !DILocation(line: 559, column: 2, scope: !4991)
!5036 = !DILocation(line: 560, column: 1, scope: !4991)
!5037 = distinct !DISubprogram(name: "set_bound_vert_seams", scope: !1, file: !1, line: 1371, type: !5038, scopeLine: 1372, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!5038 = !DISubroutineType(types: !5039)
!5039 = !{null, !283}
!5040 = !DILocalVariable(name: "bv", arg: 1, scope: !5037, file: !1, line: 1371, type: !283)
!5041 = !DILocation(line: 1371, column: 43, scope: !5037)
!5042 = !DILocalVariable(name: "v", scope: !5037, file: !1, line: 1373, type: !121)
!5043 = !DILocation(line: 1373, column: 13, scope: !5037)
!5044 = !DILocalVariable(name: "e", scope: !5037, file: !1, line: 1374, type: !130)
!5045 = !DILocation(line: 1374, column: 12, scope: !5037)
!5046 = !DILocation(line: 1376, column: 2, scope: !5037)
!5047 = !DILocation(line: 1376, column: 6, scope: !5037)
!5048 = !DILocation(line: 1376, column: 15, scope: !5037)
!5049 = !DILocation(line: 1377, column: 6, scope: !5037)
!5050 = !DILocation(line: 1377, column: 10, scope: !5037)
!5051 = !DILocation(line: 1377, column: 17, scope: !5037)
!5052 = !DILocation(line: 1377, column: 4, scope: !5037)
!5053 = !DILocation(line: 1378, column: 2, scope: !5037)
!5054 = !DILocation(line: 1379, column: 3, scope: !5055)
!5055 = distinct !DILexicalBlock(scope: !5037, file: !1, line: 1378, column: 5)
!5056 = !DILocation(line: 1379, column: 6, scope: !5055)
!5057 = !DILocation(line: 1379, column: 15, scope: !5055)
!5058 = !DILocation(line: 1380, column: 12, scope: !5059)
!5059 = distinct !DILexicalBlock(scope: !5055, file: !1, line: 1380, column: 3)
!5060 = !DILocation(line: 1380, column: 15, scope: !5059)
!5061 = !DILocation(line: 1380, column: 10, scope: !5059)
!5062 = !DILocation(line: 1380, column: 8, scope: !5059)
!5063 = !DILocation(line: 1380, column: 23, scope: !5064)
!5064 = distinct !DILexicalBlock(scope: !5059, file: !1, line: 1380, column: 3)
!5065 = !DILocation(line: 1380, column: 3, scope: !5059)
!5066 = !DILocation(line: 1381, column: 19, scope: !5067)
!5067 = distinct !DILexicalBlock(scope: !5064, file: !1, line: 1380, column: 39)
!5068 = !DILocation(line: 1381, column: 22, scope: !5067)
!5069 = !DILocation(line: 1381, column: 4, scope: !5067)
!5070 = !DILocation(line: 1381, column: 7, scope: !5067)
!5071 = !DILocation(line: 1381, column: 16, scope: !5067)
!5072 = !DILocation(line: 1382, column: 8, scope: !5073)
!5073 = distinct !DILexicalBlock(scope: !5067, file: !1, line: 1382, column: 8)
!5074 = !DILocation(line: 1382, column: 13, scope: !5073)
!5075 = !DILocation(line: 1382, column: 16, scope: !5073)
!5076 = !DILocation(line: 1382, column: 10, scope: !5073)
!5077 = !DILocation(line: 1382, column: 8, scope: !5067)
!5078 = !DILocation(line: 1383, column: 5, scope: !5073)
!5079 = !DILocation(line: 1384, column: 3, scope: !5067)
!5080 = !DILocation(line: 1380, column: 30, scope: !5064)
!5081 = !DILocation(line: 1380, column: 33, scope: !5064)
!5082 = !DILocation(line: 1380, column: 28, scope: !5064)
!5083 = !DILocation(line: 1380, column: 3, scope: !5064)
!5084 = distinct !{!5084, !5065, !5085}
!5085 = !DILocation(line: 1384, column: 3, scope: !5059)
!5086 = !DILocation(line: 1385, column: 19, scope: !5055)
!5087 = !DILocation(line: 1385, column: 22, scope: !5055)
!5088 = !DILocation(line: 1385, column: 3, scope: !5055)
!5089 = !DILocation(line: 1385, column: 7, scope: !5055)
!5090 = !DILocation(line: 1385, column: 16, scope: !5055)
!5091 = !DILocation(line: 1386, column: 2, scope: !5055)
!5092 = !DILocation(line: 1386, column: 16, scope: !5037)
!5093 = !DILocation(line: 1386, column: 19, scope: !5037)
!5094 = !DILocation(line: 1386, column: 14, scope: !5037)
!5095 = !DILocation(line: 1386, column: 28, scope: !5037)
!5096 = !DILocation(line: 1386, column: 32, scope: !5037)
!5097 = !DILocation(line: 1386, column: 39, scope: !5037)
!5098 = !DILocation(line: 1386, column: 25, scope: !5037)
!5099 = distinct !{!5099, !5053, !5100}
!5100 = !DILocation(line: 1386, column: 49, scope: !5037)
!5101 = !DILocation(line: 1387, column: 1, scope: !5037)
!5102 = distinct !DISubprogram(name: "set_profile_params", scope: !1, file: !1, line: 907, type: !5103, scopeLine: 908, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!5103 = !DISubroutineType(types: !5104)
!5104 = !{null, !801, !121}
!5105 = !DILocalVariable(name: "bp", arg: 1, scope: !5102, file: !1, line: 907, type: !801)
!5106 = !DILocation(line: 907, column: 45, scope: !5102)
!5107 = !DILocalVariable(name: "bndv", arg: 2, scope: !5102, file: !1, line: 907, type: !121)
!5108 = !DILocation(line: 907, column: 60, scope: !5102)
!5109 = !DILocalVariable(name: "e", scope: !5102, file: !1, line: 909, type: !130)
!5110 = !DILocation(line: 909, column: 12, scope: !5102)
!5111 = !DILocalVariable(name: "pro", scope: !5102, file: !1, line: 910, type: !5112)
!5112 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !159, size: 64)
!5113 = !DILocation(line: 910, column: 11, scope: !5102)
!5114 = !DILocalVariable(name: "co1", scope: !5102, file: !1, line: 911, type: !75)
!5115 = !DILocation(line: 911, column: 8, scope: !5102)
!5116 = !DILocalVariable(name: "co2", scope: !5102, file: !1, line: 911, type: !75)
!5117 = !DILocation(line: 911, column: 16, scope: !5102)
!5118 = !DILocalVariable(name: "co3", scope: !5102, file: !1, line: 911, type: !75)
!5119 = !DILocation(line: 911, column: 24, scope: !5102)
!5120 = !DILocalVariable(name: "d1", scope: !5102, file: !1, line: 911, type: !75)
!5121 = !DILocation(line: 911, column: 32, scope: !5102)
!5122 = !DILocalVariable(name: "d2", scope: !5102, file: !1, line: 911, type: !75)
!5123 = !DILocation(line: 911, column: 39, scope: !5102)
!5124 = !DILocalVariable(name: "d3", scope: !5102, file: !1, line: 911, type: !75)
!5125 = !DILocation(line: 911, column: 46, scope: !5102)
!5126 = !DILocalVariable(name: "l", scope: !5102, file: !1, line: 911, type: !76)
!5127 = !DILocation(line: 911, column: 53, scope: !5102)
!5128 = !DILocalVariable(name: "do_linear_interp", scope: !5102, file: !1, line: 912, type: !152)
!5129 = !DILocation(line: 912, column: 7, scope: !5102)
!5130 = !DILocation(line: 914, column: 13, scope: !5102)
!5131 = !DILocation(line: 914, column: 18, scope: !5102)
!5132 = !DILocation(line: 914, column: 24, scope: !5102)
!5133 = !DILocation(line: 914, column: 27, scope: !5102)
!5134 = !DILocation(line: 914, column: 2, scope: !5102)
!5135 = !DILocation(line: 915, column: 13, scope: !5102)
!5136 = !DILocation(line: 915, column: 18, scope: !5102)
!5137 = !DILocation(line: 915, column: 24, scope: !5102)
!5138 = !DILocation(line: 915, column: 30, scope: !5102)
!5139 = !DILocation(line: 915, column: 33, scope: !5102)
!5140 = !DILocation(line: 915, column: 2, scope: !5102)
!5141 = !DILocation(line: 916, column: 9, scope: !5102)
!5142 = !DILocation(line: 916, column: 15, scope: !5102)
!5143 = !DILocation(line: 916, column: 6, scope: !5102)
!5144 = !DILocation(line: 917, column: 6, scope: !5102)
!5145 = !DILocation(line: 917, column: 12, scope: !5102)
!5146 = !DILocation(line: 917, column: 4, scope: !5102)
!5147 = !DILocation(line: 918, column: 19, scope: !5102)
!5148 = !DILocation(line: 919, column: 6, scope: !5149)
!5149 = distinct !DILexicalBlock(scope: !5102, file: !1, line: 919, column: 6)
!5150 = !DILocation(line: 919, column: 6, scope: !5102)
!5151 = !DILocation(line: 920, column: 20, scope: !5152)
!5152 = distinct !DILexicalBlock(scope: !5149, file: !1, line: 919, column: 9)
!5153 = !DILocation(line: 921, column: 18, scope: !5152)
!5154 = !DILocation(line: 921, column: 22, scope: !5152)
!5155 = !DILocation(line: 921, column: 3, scope: !5152)
!5156 = !DILocation(line: 921, column: 8, scope: !5152)
!5157 = !DILocation(line: 921, column: 16, scope: !5152)
!5158 = !DILocation(line: 923, column: 15, scope: !5152)
!5159 = !DILocation(line: 923, column: 20, scope: !5152)
!5160 = !DILocation(line: 923, column: 30, scope: !5152)
!5161 = !DILocation(line: 923, column: 33, scope: !5152)
!5162 = !DILocation(line: 923, column: 36, scope: !5152)
!5163 = !DILocation(line: 923, column: 40, scope: !5152)
!5164 = !DILocation(line: 923, column: 44, scope: !5152)
!5165 = !DILocation(line: 923, column: 47, scope: !5152)
!5166 = !DILocation(line: 923, column: 50, scope: !5152)
!5167 = !DILocation(line: 923, column: 54, scope: !5152)
!5168 = !DILocation(line: 923, column: 3, scope: !5152)
!5169 = !DILocation(line: 924, column: 16, scope: !5152)
!5170 = !DILocation(line: 924, column: 21, scope: !5152)
!5171 = !DILocation(line: 924, column: 3, scope: !5152)
!5172 = !DILocation(line: 925, column: 19, scope: !5152)
!5173 = !DILocation(line: 925, column: 22, scope: !5152)
!5174 = !DILocation(line: 925, column: 25, scope: !5152)
!5175 = !DILocation(line: 925, column: 30, scope: !5152)
!5176 = !DILocation(line: 925, column: 35, scope: !5152)
!5177 = !DILocation(line: 925, column: 40, scope: !5152)
!5178 = !DILocation(line: 925, column: 3, scope: !5152)
!5179 = !DILocation(line: 927, column: 15, scope: !5152)
!5180 = !DILocation(line: 927, column: 20, scope: !5152)
!5181 = !DILocation(line: 927, column: 25, scope: !5152)
!5182 = !DILocation(line: 927, column: 30, scope: !5152)
!5183 = !DILocation(line: 927, column: 3, scope: !5152)
!5184 = !DILocation(line: 928, column: 28, scope: !5185)
!5185 = distinct !DILexicalBlock(scope: !5152, file: !1, line: 928, column: 7)
!5186 = !DILocation(line: 928, column: 33, scope: !5185)
!5187 = !DILocation(line: 928, column: 38, scope: !5185)
!5188 = !DILocation(line: 928, column: 43, scope: !5185)
!5189 = !DILocation(line: 928, column: 48, scope: !5185)
!5190 = !DILocation(line: 928, column: 53, scope: !5185)
!5191 = !DILocation(line: 928, column: 60, scope: !5185)
!5192 = !DILocation(line: 928, column: 65, scope: !5185)
!5193 = !DILocation(line: 928, column: 8, scope: !5185)
!5194 = !DILocation(line: 928, column: 7, scope: !5152)
!5195 = !DILocation(line: 930, column: 15, scope: !5196)
!5196 = distinct !DILexicalBlock(scope: !5185, file: !1, line: 928, column: 76)
!5197 = !DILocation(line: 930, column: 20, scope: !5196)
!5198 = !DILocation(line: 930, column: 25, scope: !5196)
!5199 = !DILocation(line: 930, column: 4, scope: !5196)
!5200 = !DILocation(line: 931, column: 3, scope: !5196)
!5201 = !DILocation(line: 932, column: 15, scope: !5152)
!5202 = !DILocation(line: 932, column: 20, scope: !5152)
!5203 = !DILocation(line: 932, column: 25, scope: !5152)
!5204 = !DILocation(line: 932, column: 30, scope: !5152)
!5205 = !DILocation(line: 932, column: 3, scope: !5152)
!5206 = !DILocation(line: 933, column: 28, scope: !5207)
!5207 = distinct !DILexicalBlock(scope: !5152, file: !1, line: 933, column: 7)
!5208 = !DILocation(line: 933, column: 33, scope: !5207)
!5209 = !DILocation(line: 933, column: 38, scope: !5207)
!5210 = !DILocation(line: 933, column: 43, scope: !5207)
!5211 = !DILocation(line: 933, column: 48, scope: !5207)
!5212 = !DILocation(line: 933, column: 53, scope: !5207)
!5213 = !DILocation(line: 933, column: 60, scope: !5207)
!5214 = !DILocation(line: 933, column: 65, scope: !5207)
!5215 = !DILocation(line: 933, column: 8, scope: !5207)
!5216 = !DILocation(line: 933, column: 7, scope: !5152)
!5217 = !DILocation(line: 935, column: 15, scope: !5218)
!5218 = distinct !DILexicalBlock(scope: !5207, file: !1, line: 933, column: 76)
!5219 = !DILocation(line: 935, column: 20, scope: !5218)
!5220 = !DILocation(line: 935, column: 25, scope: !5218)
!5221 = !DILocation(line: 935, column: 4, scope: !5218)
!5222 = !DILocation(line: 936, column: 3, scope: !5218)
!5223 = !DILocation(line: 938, column: 15, scope: !5152)
!5224 = !DILocation(line: 938, column: 19, scope: !5152)
!5225 = !DILocation(line: 938, column: 24, scope: !5152)
!5226 = !DILocation(line: 938, column: 31, scope: !5152)
!5227 = !DILocation(line: 938, column: 3, scope: !5152)
!5228 = !DILocation(line: 939, column: 15, scope: !5152)
!5229 = !DILocation(line: 939, column: 19, scope: !5152)
!5230 = !DILocation(line: 939, column: 24, scope: !5152)
!5231 = !DILocation(line: 939, column: 31, scope: !5152)
!5232 = !DILocation(line: 939, column: 3, scope: !5152)
!5233 = !DILocation(line: 940, column: 16, scope: !5152)
!5234 = !DILocation(line: 940, column: 3, scope: !5152)
!5235 = !DILocation(line: 941, column: 16, scope: !5152)
!5236 = !DILocation(line: 941, column: 3, scope: !5152)
!5237 = !DILocation(line: 942, column: 17, scope: !5152)
!5238 = !DILocation(line: 942, column: 22, scope: !5152)
!5239 = !DILocation(line: 942, column: 32, scope: !5152)
!5240 = !DILocation(line: 942, column: 36, scope: !5152)
!5241 = !DILocation(line: 942, column: 3, scope: !5152)
!5242 = !DILocation(line: 943, column: 20, scope: !5152)
!5243 = !DILocation(line: 943, column: 25, scope: !5152)
!5244 = !DILocation(line: 943, column: 7, scope: !5152)
!5245 = !DILocation(line: 943, column: 5, scope: !5152)
!5246 = !DILocation(line: 944, column: 7, scope: !5247)
!5247 = distinct !DILexicalBlock(scope: !5152, file: !1, line: 944, column: 7)
!5248 = !DILocation(line: 944, column: 10, scope: !5247)
!5249 = !DILocation(line: 944, column: 7, scope: !5152)
!5250 = !DILocation(line: 947, column: 18, scope: !5251)
!5251 = distinct !DILexicalBlock(scope: !5247, file: !1, line: 944, column: 32)
!5252 = !DILocation(line: 947, column: 22, scope: !5251)
!5253 = !DILocation(line: 947, column: 26, scope: !5251)
!5254 = !DILocation(line: 947, column: 31, scope: !5251)
!5255 = !DILocation(line: 947, column: 4, scope: !5251)
!5256 = !DILocation(line: 948, column: 17, scope: !5251)
!5257 = !DILocation(line: 948, column: 4, scope: !5251)
!5258 = !DILocation(line: 949, column: 18, scope: !5251)
!5259 = !DILocation(line: 949, column: 23, scope: !5251)
!5260 = !DILocation(line: 949, column: 33, scope: !5251)
!5261 = !DILocation(line: 949, column: 37, scope: !5251)
!5262 = !DILocation(line: 949, column: 4, scope: !5251)
!5263 = !DILocation(line: 950, column: 21, scope: !5251)
!5264 = !DILocation(line: 950, column: 26, scope: !5251)
!5265 = !DILocation(line: 950, column: 8, scope: !5251)
!5266 = !DILocation(line: 950, column: 6, scope: !5251)
!5267 = !DILocation(line: 951, column: 8, scope: !5268)
!5268 = distinct !DILexicalBlock(scope: !5251, file: !1, line: 951, column: 8)
!5269 = !DILocation(line: 951, column: 10, scope: !5268)
!5270 = !DILocation(line: 951, column: 8, scope: !5251)
!5271 = !DILocation(line: 953, column: 22, scope: !5272)
!5272 = distinct !DILexicalBlock(scope: !5268, file: !1, line: 951, column: 32)
!5273 = !DILocation(line: 954, column: 4, scope: !5272)
!5274 = !DILocation(line: 956, column: 4, scope: !5251)
!5275 = !DILocation(line: 956, column: 9, scope: !5251)
!5276 = !DILocation(line: 956, column: 17, scope: !5251)
!5277 = !DILocation(line: 957, column: 3, scope: !5251)
!5278 = !DILocation(line: 958, column: 14, scope: !5152)
!5279 = !DILocation(line: 958, column: 19, scope: !5152)
!5280 = !DILocation(line: 958, column: 29, scope: !5152)
!5281 = !DILocation(line: 958, column: 3, scope: !5152)
!5282 = !DILocation(line: 959, column: 2, scope: !5152)
!5283 = !DILocation(line: 960, column: 6, scope: !5284)
!5284 = distinct !DILexicalBlock(scope: !5102, file: !1, line: 960, column: 6)
!5285 = !DILocation(line: 960, column: 6, scope: !5102)
!5286 = !DILocation(line: 961, column: 3, scope: !5287)
!5287 = distinct !DILexicalBlock(scope: !5284, file: !1, line: 960, column: 24)
!5288 = !DILocation(line: 961, column: 8, scope: !5287)
!5289 = !DILocation(line: 961, column: 16, scope: !5287)
!5290 = !DILocation(line: 962, column: 14, scope: !5287)
!5291 = !DILocation(line: 962, column: 19, scope: !5287)
!5292 = !DILocation(line: 962, column: 24, scope: !5287)
!5293 = !DILocation(line: 962, column: 3, scope: !5287)
!5294 = !DILocation(line: 963, column: 14, scope: !5287)
!5295 = !DILocation(line: 963, column: 19, scope: !5287)
!5296 = !DILocation(line: 963, column: 24, scope: !5287)
!5297 = !DILocation(line: 963, column: 3, scope: !5287)
!5298 = !DILocation(line: 964, column: 15, scope: !5287)
!5299 = !DILocation(line: 964, column: 20, scope: !5287)
!5300 = !DILocation(line: 964, column: 27, scope: !5287)
!5301 = !DILocation(line: 964, column: 32, scope: !5287)
!5302 = !DILocation(line: 964, column: 3, scope: !5287)
!5303 = !DILocation(line: 966, column: 11, scope: !5287)
!5304 = !DILocation(line: 966, column: 16, scope: !5287)
!5305 = !DILocation(line: 966, column: 3, scope: !5287)
!5306 = !DILocation(line: 967, column: 11, scope: !5287)
!5307 = !DILocation(line: 967, column: 16, scope: !5287)
!5308 = !DILocation(line: 967, column: 3, scope: !5287)
!5309 = !DILocation(line: 968, column: 11, scope: !5287)
!5310 = !DILocation(line: 968, column: 16, scope: !5287)
!5311 = !DILocation(line: 968, column: 3, scope: !5287)
!5312 = !DILocation(line: 969, column: 2, scope: !5287)
!5313 = !DILocation(line: 970, column: 1, scope: !5102)
!5314 = distinct !DISubprogram(name: "calculate_profile", scope: !1, file: !1, line: 1228, type: !5103, scopeLine: 1229, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!5315 = !DILocalVariable(name: "bp", arg: 1, scope: !5314, file: !1, line: 1228, type: !801)
!5316 = !DILocation(line: 1228, column: 44, scope: !5314)
!5317 = !DILocalVariable(name: "bndv", arg: 2, scope: !5314, file: !1, line: 1228, type: !121)
!5318 = !DILocation(line: 1228, column: 59, scope: !5314)
!5319 = !DILocalVariable(name: "i", scope: !5314, file: !1, line: 1230, type: !63)
!5320 = !DILocation(line: 1230, column: 6, scope: !5314)
!5321 = !DILocalVariable(name: "k", scope: !5314, file: !1, line: 1230, type: !63)
!5322 = !DILocation(line: 1230, column: 9, scope: !5314)
!5323 = !DILocalVariable(name: "ns", scope: !5314, file: !1, line: 1230, type: !63)
!5324 = !DILocation(line: 1230, column: 12, scope: !5314)
!5325 = !DILocalVariable(name: "uvals", scope: !5314, file: !1, line: 1231, type: !1865)
!5326 = !DILocation(line: 1231, column: 15, scope: !5314)
!5327 = !DILocalVariable(name: "co", scope: !5314, file: !1, line: 1232, type: !75)
!5328 = !DILocation(line: 1232, column: 8, scope: !5314)
!5329 = !DILocalVariable(name: "co2", scope: !5314, file: !1, line: 1232, type: !75)
!5330 = !DILocation(line: 1232, column: 15, scope: !5314)
!5331 = !DILocalVariable(name: "p", scope: !5314, file: !1, line: 1232, type: !75)
!5332 = !DILocation(line: 1232, column: 23, scope: !5314)
!5333 = !DILocalVariable(name: "m", scope: !5314, file: !1, line: 1232, type: !5334)
!5334 = !DICompositeType(tag: DW_TAG_array_type, baseType: !76, size: 512, elements: !5335)
!5335 = !{!5336, !5336}
!5336 = !DISubrange(count: 4)
!5337 = !DILocation(line: 1232, column: 29, scope: !5314)
!5338 = !DILocalVariable(name: "prof_co", scope: !5314, file: !1, line: 1233, type: !170)
!5339 = !DILocation(line: 1233, column: 9, scope: !5314)
!5340 = !DILocalVariable(name: "prof_co_k", scope: !5314, file: !1, line: 1233, type: !170)
!5341 = !DILocation(line: 1233, column: 19, scope: !5314)
!5342 = !DILocalVariable(name: "r", scope: !5314, file: !1, line: 1234, type: !76)
!5343 = !DILocation(line: 1234, column: 8, scope: !5314)
!5344 = !DILocalVariable(name: "need_2", scope: !5314, file: !1, line: 1235, type: !152)
!5345 = !DILocation(line: 1235, column: 7, scope: !5314)
!5346 = !DILocalVariable(name: "map_ok", scope: !5314, file: !1, line: 1235, type: !152)
!5347 = !DILocation(line: 1235, column: 15, scope: !5314)
!5348 = !DILocalVariable(name: "pro", scope: !5314, file: !1, line: 1236, type: !5112)
!5349 = !DILocation(line: 1236, column: 11, scope: !5314)
!5350 = !DILocation(line: 1236, column: 18, scope: !5314)
!5351 = !DILocation(line: 1236, column: 24, scope: !5314)
!5352 = !DILocation(line: 1238, column: 6, scope: !5353)
!5353 = distinct !DILexicalBlock(scope: !5314, file: !1, line: 1238, column: 6)
!5354 = !DILocation(line: 1238, column: 10, scope: !5353)
!5355 = !DILocation(line: 1238, column: 14, scope: !5353)
!5356 = !DILocation(line: 1238, column: 6, scope: !5314)
!5357 = !DILocation(line: 1239, column: 3, scope: !5353)
!5358 = !DILocation(line: 1241, column: 11, scope: !5314)
!5359 = !DILocation(line: 1241, column: 15, scope: !5314)
!5360 = !DILocation(line: 1241, column: 22, scope: !5314)
!5361 = !DILocation(line: 1241, column: 26, scope: !5314)
!5362 = !DILocation(line: 1241, column: 38, scope: !5314)
!5363 = !DILocation(line: 1241, column: 19, scope: !5314)
!5364 = !DILocation(line: 1241, column: 9, scope: !5314)
!5365 = !DILocation(line: 1242, column: 7, scope: !5366)
!5366 = distinct !DILexicalBlock(scope: !5314, file: !1, line: 1242, column: 6)
!5367 = !DILocation(line: 1242, column: 12, scope: !5366)
!5368 = !DILocation(line: 1242, column: 6, scope: !5314)
!5369 = !DILocation(line: 1243, column: 46, scope: !5370)
!5370 = distinct !DILexicalBlock(scope: !5366, file: !1, line: 1242, column: 21)
!5371 = !DILocation(line: 1243, column: 50, scope: !5370)
!5372 = !DILocation(line: 1243, column: 62, scope: !5370)
!5373 = !DILocation(line: 1243, column: 66, scope: !5370)
!5374 = !DILocation(line: 1243, column: 70, scope: !5370)
!5375 = !DILocation(line: 1243, column: 75, scope: !5370)
!5376 = !DILocation(line: 1243, column: 61, scope: !5370)
!5377 = !DILocation(line: 1243, column: 79, scope: !5370)
!5378 = !DILocation(line: 1243, column: 27, scope: !5370)
!5379 = !DILocation(line: 1243, column: 18, scope: !5370)
!5380 = !DILocation(line: 1243, column: 3, scope: !5370)
!5381 = !DILocation(line: 1243, column: 8, scope: !5370)
!5382 = !DILocation(line: 1243, column: 16, scope: !5370)
!5383 = !DILocation(line: 1244, column: 7, scope: !5384)
!5384 = distinct !DILexicalBlock(scope: !5370, file: !1, line: 1244, column: 7)
!5385 = !DILocation(line: 1244, column: 7, scope: !5370)
!5386 = !DILocation(line: 1245, column: 49, scope: !5384)
!5387 = !DILocation(line: 1245, column: 53, scope: !5384)
!5388 = !DILocation(line: 1245, column: 65, scope: !5384)
!5389 = !DILocation(line: 1245, column: 69, scope: !5384)
!5390 = !DILocation(line: 1245, column: 81, scope: !5384)
!5391 = !DILocation(line: 1245, column: 87, scope: !5384)
!5392 = !DILocation(line: 1245, column: 92, scope: !5384)
!5393 = !DILocation(line: 1245, column: 64, scope: !5384)
!5394 = !DILocation(line: 1245, column: 96, scope: !5384)
!5395 = !DILocation(line: 1245, column: 30, scope: !5384)
!5396 = !DILocation(line: 1245, column: 21, scope: !5384)
!5397 = !DILocation(line: 1245, column: 4, scope: !5384)
!5398 = !DILocation(line: 1245, column: 9, scope: !5384)
!5399 = !DILocation(line: 1245, column: 19, scope: !5384)
!5400 = !DILocation(line: 1247, column: 21, scope: !5384)
!5401 = !DILocation(line: 1247, column: 26, scope: !5384)
!5402 = !DILocation(line: 1247, column: 4, scope: !5384)
!5403 = !DILocation(line: 1247, column: 9, scope: !5384)
!5404 = !DILocation(line: 1247, column: 19, scope: !5384)
!5405 = !DILocation(line: 1248, column: 2, scope: !5370)
!5406 = !DILocation(line: 1249, column: 6, scope: !5314)
!5407 = !DILocation(line: 1249, column: 11, scope: !5314)
!5408 = !DILocation(line: 1249, column: 4, scope: !5314)
!5409 = !DILocation(line: 1250, column: 6, scope: !5410)
!5410 = distinct !DILexicalBlock(scope: !5314, file: !1, line: 1250, column: 6)
!5411 = !DILocation(line: 1250, column: 8, scope: !5410)
!5412 = !DILocation(line: 1250, column: 6, scope: !5314)
!5413 = !DILocation(line: 1251, column: 10, scope: !5410)
!5414 = !DILocation(line: 1251, column: 3, scope: !5410)
!5415 = !DILocation(line: 1253, column: 33, scope: !5410)
!5416 = !DILocation(line: 1253, column: 38, scope: !5410)
!5417 = !DILocation(line: 1253, column: 43, scope: !5410)
!5418 = !DILocation(line: 1253, column: 48, scope: !5410)
!5419 = !DILocation(line: 1253, column: 55, scope: !5410)
!5420 = !DILocation(line: 1253, column: 60, scope: !5410)
!5421 = !DILocation(line: 1253, column: 65, scope: !5410)
!5422 = !DILocation(line: 1253, column: 12, scope: !5410)
!5423 = !DILocation(line: 1253, column: 10, scope: !5410)
!5424 = !DILocation(line: 1254, column: 9, scope: !5425)
!5425 = distinct !DILexicalBlock(scope: !5314, file: !1, line: 1254, column: 2)
!5426 = !DILocation(line: 1254, column: 7, scope: !5425)
!5427 = !DILocation(line: 1254, column: 14, scope: !5428)
!5428 = distinct !DILexicalBlock(scope: !5425, file: !1, line: 1254, column: 2)
!5429 = !DILocation(line: 1254, column: 16, scope: !5428)
!5430 = !DILocation(line: 1254, column: 2, scope: !5425)
!5431 = !DILocation(line: 1255, column: 7, scope: !5432)
!5432 = distinct !DILexicalBlock(scope: !5433, file: !1, line: 1255, column: 7)
!5433 = distinct !DILexicalBlock(scope: !5428, file: !1, line: 1254, column: 26)
!5434 = !DILocation(line: 1255, column: 9, scope: !5432)
!5435 = !DILocation(line: 1255, column: 7, scope: !5433)
!5436 = !DILocation(line: 1256, column: 9, scope: !5437)
!5437 = distinct !DILexicalBlock(scope: !5432, file: !1, line: 1255, column: 15)
!5438 = !DILocation(line: 1256, column: 13, scope: !5437)
!5439 = !DILocation(line: 1256, column: 7, scope: !5437)
!5440 = !DILocation(line: 1257, column: 12, scope: !5437)
!5441 = !DILocation(line: 1257, column: 16, scope: !5437)
!5442 = !DILocation(line: 1257, column: 28, scope: !5437)
!5443 = !DILocation(line: 1257, column: 10, scope: !5437)
!5444 = !DILocation(line: 1258, column: 14, scope: !5437)
!5445 = !DILocation(line: 1258, column: 19, scope: !5437)
!5446 = !DILocation(line: 1258, column: 12, scope: !5437)
!5447 = !DILocation(line: 1259, column: 3, scope: !5437)
!5448 = !DILocation(line: 1261, column: 9, scope: !5449)
!5449 = distinct !DILexicalBlock(scope: !5450, file: !1, line: 1261, column: 8)
!5450 = distinct !DILexicalBlock(scope: !5432, file: !1, line: 1260, column: 8)
!5451 = !DILocation(line: 1261, column: 8, scope: !5450)
!5452 = !DILocation(line: 1262, column: 5, scope: !5449)
!5453 = !DILocation(line: 1263, column: 9, scope: !5450)
!5454 = !DILocation(line: 1263, column: 13, scope: !5450)
!5455 = !DILocation(line: 1263, column: 25, scope: !5450)
!5456 = !DILocation(line: 1263, column: 7, scope: !5450)
!5457 = !DILocation(line: 1264, column: 12, scope: !5450)
!5458 = !DILocation(line: 1264, column: 16, scope: !5450)
!5459 = !DILocation(line: 1264, column: 28, scope: !5450)
!5460 = !DILocation(line: 1264, column: 10, scope: !5450)
!5461 = !DILocation(line: 1265, column: 14, scope: !5450)
!5462 = !DILocation(line: 1265, column: 19, scope: !5450)
!5463 = !DILocation(line: 1265, column: 12, scope: !5450)
!5464 = !DILocation(line: 1268, column: 10, scope: !5465)
!5465 = distinct !DILexicalBlock(scope: !5433, file: !1, line: 1268, column: 3)
!5466 = !DILocation(line: 1268, column: 8, scope: !5465)
!5467 = !DILocation(line: 1268, column: 15, scope: !5468)
!5468 = distinct !DILexicalBlock(scope: !5465, file: !1, line: 1268, column: 3)
!5469 = !DILocation(line: 1268, column: 20, scope: !5468)
!5470 = !DILocation(line: 1268, column: 17, scope: !5468)
!5471 = !DILocation(line: 1268, column: 3, scope: !5465)
!5472 = !DILocation(line: 1269, column: 8, scope: !5473)
!5473 = distinct !DILexicalBlock(scope: !5474, file: !1, line: 1269, column: 8)
!5474 = distinct !DILexicalBlock(scope: !5468, file: !1, line: 1268, column: 29)
!5475 = !DILocation(line: 1269, column: 10, scope: !5473)
!5476 = !DILocation(line: 1269, column: 8, scope: !5474)
!5477 = !DILocation(line: 1270, column: 16, scope: !5473)
!5478 = !DILocation(line: 1270, column: 20, scope: !5473)
!5479 = !DILocation(line: 1270, column: 25, scope: !5473)
!5480 = !DILocation(line: 1270, column: 5, scope: !5473)
!5481 = !DILocation(line: 1271, column: 13, scope: !5482)
!5482 = distinct !DILexicalBlock(scope: !5473, file: !1, line: 1271, column: 13)
!5483 = !DILocation(line: 1271, column: 18, scope: !5482)
!5484 = !DILocation(line: 1271, column: 15, scope: !5482)
!5485 = !DILocation(line: 1271, column: 13, scope: !5473)
!5486 = !DILocation(line: 1272, column: 16, scope: !5482)
!5487 = !DILocation(line: 1272, column: 20, scope: !5482)
!5488 = !DILocation(line: 1272, column: 25, scope: !5482)
!5489 = !DILocation(line: 1272, column: 5, scope: !5482)
!5490 = !DILocation(line: 1274, column: 9, scope: !5491)
!5491 = distinct !DILexicalBlock(scope: !5492, file: !1, line: 1274, column: 9)
!5492 = distinct !DILexicalBlock(scope: !5482, file: !1, line: 1273, column: 9)
!5493 = !DILocation(line: 1274, column: 9, scope: !5492)
!5494 = !DILocation(line: 1275, column: 22, scope: !5495)
!5495 = distinct !DILexicalBlock(scope: !5491, file: !1, line: 1274, column: 17)
!5496 = !DILocation(line: 1275, column: 28, scope: !5495)
!5497 = !DILocation(line: 1275, column: 32, scope: !5495)
!5498 = !DILocation(line: 1275, column: 35, scope: !5495)
!5499 = !DILocation(line: 1275, column: 6, scope: !5495)
!5500 = !DILocation(line: 1276, column: 6, scope: !5495)
!5501 = !DILocation(line: 1276, column: 11, scope: !5495)
!5502 = !DILocation(line: 1277, column: 18, scope: !5495)
!5503 = !DILocation(line: 1277, column: 22, scope: !5495)
!5504 = !DILocation(line: 1277, column: 25, scope: !5495)
!5505 = !DILocation(line: 1277, column: 6, scope: !5495)
!5506 = !DILocation(line: 1278, column: 5, scope: !5495)
!5507 = !DILocation(line: 1280, column: 21, scope: !5508)
!5508 = distinct !DILexicalBlock(scope: !5491, file: !1, line: 1279, column: 10)
!5509 = !DILocation(line: 1280, column: 25, scope: !5508)
!5510 = !DILocation(line: 1280, column: 30, scope: !5508)
!5511 = !DILocation(line: 1280, column: 35, scope: !5508)
!5512 = !DILocation(line: 1280, column: 40, scope: !5508)
!5513 = !DILocation(line: 1280, column: 52, scope: !5508)
!5514 = !DILocation(line: 1280, column: 45, scope: !5508)
!5515 = !DILocation(line: 1280, column: 63, scope: !5508)
!5516 = !DILocation(line: 1280, column: 56, scope: !5508)
!5517 = !DILocation(line: 1280, column: 54, scope: !5508)
!5518 = !DILocation(line: 1280, column: 6, scope: !5508)
!5519 = !DILocation(line: 1284, column: 16, scope: !5474)
!5520 = !DILocation(line: 1284, column: 30, scope: !5474)
!5521 = !DILocation(line: 1284, column: 28, scope: !5474)
!5522 = !DILocation(line: 1284, column: 24, scope: !5474)
!5523 = !DILocation(line: 1284, column: 14, scope: !5474)
!5524 = !DILocation(line: 1285, column: 20, scope: !5525)
!5525 = distinct !DILexicalBlock(scope: !5474, file: !1, line: 1285, column: 8)
!5526 = !DILocation(line: 1285, column: 25, scope: !5525)
!5527 = !DILocation(line: 1285, column: 9, scope: !5525)
!5528 = !DILocation(line: 1285, column: 8, scope: !5474)
!5529 = !DILocation(line: 1286, column: 17, scope: !5530)
!5530 = distinct !DILexicalBlock(scope: !5525, file: !1, line: 1285, column: 36)
!5531 = !DILocation(line: 1286, column: 22, scope: !5530)
!5532 = !DILocation(line: 1286, column: 26, scope: !5530)
!5533 = !DILocation(line: 1286, column: 31, scope: !5530)
!5534 = !DILocation(line: 1286, column: 5, scope: !5530)
!5535 = !DILocation(line: 1287, column: 30, scope: !5536)
!5536 = distinct !DILexicalBlock(scope: !5530, file: !1, line: 1287, column: 9)
!5537 = !DILocation(line: 1287, column: 41, scope: !5536)
!5538 = !DILocation(line: 1287, column: 45, scope: !5536)
!5539 = !DILocation(line: 1287, column: 50, scope: !5536)
!5540 = !DILocation(line: 1287, column: 55, scope: !5536)
!5541 = !DILocation(line: 1287, column: 65, scope: !5536)
!5542 = !DILocation(line: 1287, column: 70, scope: !5536)
!5543 = !DILocation(line: 1287, column: 10, scope: !5536)
!5544 = !DILocation(line: 1287, column: 9, scope: !5530)
!5545 = !DILocation(line: 1289, column: 17, scope: !5546)
!5546 = distinct !DILexicalBlock(scope: !5536, file: !1, line: 1287, column: 81)
!5547 = !DILocation(line: 1289, column: 28, scope: !5546)
!5548 = !DILocation(line: 1289, column: 6, scope: !5546)
!5549 = !DILocation(line: 1290, column: 5, scope: !5546)
!5550 = !DILocation(line: 1291, column: 4, scope: !5530)
!5551 = !DILocation(line: 1293, column: 16, scope: !5552)
!5552 = distinct !DILexicalBlock(scope: !5525, file: !1, line: 1292, column: 9)
!5553 = !DILocation(line: 1293, column: 27, scope: !5552)
!5554 = !DILocation(line: 1293, column: 5, scope: !5552)
!5555 = !DILocation(line: 1295, column: 3, scope: !5474)
!5556 = !DILocation(line: 1268, column: 25, scope: !5468)
!5557 = !DILocation(line: 1268, column: 3, scope: !5468)
!5558 = distinct !{!5558, !5471, !5559}
!5559 = !DILocation(line: 1295, column: 3, scope: !5465)
!5560 = !DILocation(line: 1296, column: 2, scope: !5433)
!5561 = !DILocation(line: 1254, column: 22, scope: !5428)
!5562 = !DILocation(line: 1254, column: 2, scope: !5428)
!5563 = distinct !{!5563, !5430, !5564}
!5564 = !DILocation(line: 1296, column: 2, scope: !5425)
!5565 = !DILocation(line: 1297, column: 1, scope: !5314)
!5566 = distinct !DISubprogram(name: "offset_meet", scope: !1, file: !1, line: 592, type: !5567, scopeLine: 593, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!5567 = !DISubroutineType(types: !5568)
!5568 = !{null, !130, !130, !51, !141, !170}
!5569 = !DILocalVariable(name: "e1", arg: 1, scope: !5566, file: !1, line: 592, type: !130)
!5570 = !DILocation(line: 592, column: 35, scope: !5566)
!5571 = !DILocalVariable(name: "e2", arg: 2, scope: !5566, file: !1, line: 592, type: !130)
!5572 = !DILocation(line: 592, column: 49, scope: !5566)
!5573 = !DILocalVariable(name: "v", arg: 3, scope: !5566, file: !1, line: 592, type: !51)
!5574 = !DILocation(line: 592, column: 61, scope: !5566)
!5575 = !DILocalVariable(name: "f", arg: 4, scope: !5566, file: !1, line: 592, type: !141)
!5576 = !DILocation(line: 592, column: 72, scope: !5566)
!5577 = !DILocalVariable(name: "meetco", arg: 5, scope: !5566, file: !1, line: 592, type: !170)
!5578 = !DILocation(line: 592, column: 81, scope: !5566)
!5579 = !DILocalVariable(name: "dir1", scope: !5566, file: !1, line: 594, type: !75)
!5580 = !DILocation(line: 594, column: 8, scope: !5566)
!5581 = !DILocalVariable(name: "dir2", scope: !5566, file: !1, line: 594, type: !75)
!5582 = !DILocation(line: 594, column: 17, scope: !5566)
!5583 = !DILocalVariable(name: "norm_v", scope: !5566, file: !1, line: 594, type: !75)
!5584 = !DILocation(line: 594, column: 26, scope: !5566)
!5585 = !DILocalVariable(name: "norm_perp1", scope: !5566, file: !1, line: 594, type: !75)
!5586 = !DILocation(line: 594, column: 37, scope: !5566)
!5587 = !DILocalVariable(name: "norm_perp2", scope: !5566, file: !1, line: 594, type: !75)
!5588 = !DILocation(line: 594, column: 52, scope: !5566)
!5589 = !DILocalVariable(name: "off1a", scope: !5566, file: !1, line: 595, type: !75)
!5590 = !DILocation(line: 595, column: 8, scope: !5566)
!5591 = !DILocalVariable(name: "off1b", scope: !5566, file: !1, line: 595, type: !75)
!5592 = !DILocation(line: 595, column: 18, scope: !5566)
!5593 = !DILocalVariable(name: "off2a", scope: !5566, file: !1, line: 595, type: !75)
!5594 = !DILocation(line: 595, column: 28, scope: !5566)
!5595 = !DILocalVariable(name: "off2b", scope: !5566, file: !1, line: 595, type: !75)
!5596 = !DILocation(line: 595, column: 38, scope: !5566)
!5597 = !DILocalVariable(name: "isect2", scope: !5566, file: !1, line: 595, type: !75)
!5598 = !DILocation(line: 595, column: 48, scope: !5566)
!5599 = !DILocalVariable(name: "ang", scope: !5566, file: !1, line: 595, type: !76)
!5600 = !DILocation(line: 595, column: 59, scope: !5566)
!5601 = !DILocalVariable(name: "d", scope: !5566, file: !1, line: 595, type: !76)
!5602 = !DILocation(line: 595, column: 64, scope: !5566)
!5603 = !DILocalVariable(name: "closer_v", scope: !5566, file: !1, line: 596, type: !51)
!5604 = !DILocation(line: 596, column: 10, scope: !5566)
!5605 = !DILocation(line: 599, column: 14, scope: !5566)
!5606 = !DILocation(line: 599, column: 20, scope: !5566)
!5607 = !DILocation(line: 599, column: 23, scope: !5566)
!5608 = !DILocation(line: 599, column: 46, scope: !5566)
!5609 = !DILocation(line: 599, column: 50, scope: !5566)
!5610 = !DILocation(line: 599, column: 53, scope: !5566)
!5611 = !DILocation(line: 599, column: 27, scope: !5566)
!5612 = !DILocation(line: 599, column: 57, scope: !5566)
!5613 = !DILocation(line: 599, column: 2, scope: !5566)
!5614 = !DILocation(line: 600, column: 14, scope: !5566)
!5615 = !DILocation(line: 600, column: 39, scope: !5566)
!5616 = !DILocation(line: 600, column: 43, scope: !5566)
!5617 = !DILocation(line: 600, column: 46, scope: !5566)
!5618 = !DILocation(line: 600, column: 20, scope: !5566)
!5619 = !DILocation(line: 600, column: 50, scope: !5566)
!5620 = !DILocation(line: 600, column: 54, scope: !5566)
!5621 = !DILocation(line: 600, column: 57, scope: !5566)
!5622 = !DILocation(line: 600, column: 2, scope: !5566)
!5623 = !DILocation(line: 602, column: 19, scope: !5566)
!5624 = !DILocation(line: 602, column: 25, scope: !5566)
!5625 = !DILocation(line: 602, column: 8, scope: !5566)
!5626 = !DILocation(line: 602, column: 6, scope: !5566)
!5627 = !DILocation(line: 603, column: 6, scope: !5628)
!5628 = distinct !DILexicalBlock(scope: !5566, file: !1, line: 603, column: 6)
!5629 = !DILocation(line: 603, column: 10, scope: !5628)
!5630 = !DILocation(line: 603, column: 6, scope: !5566)
!5631 = !DILocation(line: 609, column: 7, scope: !5632)
!5632 = distinct !DILexicalBlock(scope: !5633, file: !1, line: 609, column: 7)
!5633 = distinct !DILexicalBlock(scope: !5628, file: !1, line: 603, column: 31)
!5634 = !DILocation(line: 609, column: 7, scope: !5633)
!5635 = !DILocation(line: 610, column: 15, scope: !5632)
!5636 = !DILocation(line: 610, column: 23, scope: !5632)
!5637 = !DILocation(line: 610, column: 26, scope: !5632)
!5638 = !DILocation(line: 610, column: 4, scope: !5632)
!5639 = !DILocation(line: 612, column: 15, scope: !5632)
!5640 = !DILocation(line: 612, column: 23, scope: !5632)
!5641 = !DILocation(line: 612, column: 26, scope: !5632)
!5642 = !DILocation(line: 612, column: 4, scope: !5632)
!5643 = !DILocation(line: 613, column: 17, scope: !5633)
!5644 = !DILocation(line: 613, column: 29, scope: !5633)
!5645 = !DILocation(line: 613, column: 35, scope: !5633)
!5646 = !DILocation(line: 613, column: 3, scope: !5633)
!5647 = !DILocation(line: 614, column: 16, scope: !5633)
!5648 = !DILocation(line: 614, column: 3, scope: !5633)
!5649 = !DILocation(line: 615, column: 14, scope: !5633)
!5650 = !DILocation(line: 615, column: 21, scope: !5633)
!5651 = !DILocation(line: 615, column: 24, scope: !5633)
!5652 = !DILocation(line: 615, column: 3, scope: !5633)
!5653 = !DILocation(line: 616, column: 14, scope: !5633)
!5654 = !DILocation(line: 616, column: 18, scope: !5633)
!5655 = !DILocation(line: 616, column: 28, scope: !5633)
!5656 = !DILocation(line: 616, column: 32, scope: !5633)
!5657 = !DILocation(line: 616, column: 7, scope: !5633)
!5658 = !DILocation(line: 616, column: 5, scope: !5633)
!5659 = !DILocation(line: 617, column: 16, scope: !5633)
!5660 = !DILocation(line: 617, column: 23, scope: !5633)
!5661 = !DILocation(line: 617, column: 35, scope: !5633)
!5662 = !DILocation(line: 617, column: 3, scope: !5633)
!5663 = !DILocation(line: 618, column: 7, scope: !5664)
!5664 = distinct !DILexicalBlock(scope: !5633, file: !1, line: 618, column: 7)
!5665 = !DILocation(line: 618, column: 11, scope: !5664)
!5666 = !DILocation(line: 618, column: 23, scope: !5664)
!5667 = !DILocation(line: 618, column: 20, scope: !5664)
!5668 = !DILocation(line: 618, column: 7, scope: !5633)
!5669 = !DILocation(line: 619, column: 19, scope: !5664)
!5670 = !DILocation(line: 619, column: 4, scope: !5664)
!5671 = !DILocation(line: 619, column: 8, scope: !5664)
!5672 = !DILocation(line: 619, column: 17, scope: !5664)
!5673 = !DILocation(line: 620, column: 12, scope: !5674)
!5674 = distinct !DILexicalBlock(scope: !5664, file: !1, line: 620, column: 12)
!5675 = !DILocation(line: 620, column: 16, scope: !5674)
!5676 = !DILocation(line: 620, column: 28, scope: !5674)
!5677 = !DILocation(line: 620, column: 25, scope: !5674)
!5678 = !DILocation(line: 620, column: 12, scope: !5664)
!5679 = !DILocation(line: 621, column: 19, scope: !5674)
!5680 = !DILocation(line: 621, column: 4, scope: !5674)
!5681 = !DILocation(line: 621, column: 8, scope: !5674)
!5682 = !DILocation(line: 621, column: 17, scope: !5674)
!5683 = !DILocation(line: 622, column: 14, scope: !5633)
!5684 = !DILocation(line: 622, column: 22, scope: !5633)
!5685 = !DILocation(line: 622, column: 3, scope: !5633)
!5686 = !DILocation(line: 623, column: 2, scope: !5633)
!5687 = !DILocation(line: 624, column: 17, scope: !5688)
!5688 = distinct !DILexicalBlock(scope: !5628, file: !1, line: 624, column: 11)
!5689 = !DILocation(line: 624, column: 21, scope: !5688)
!5690 = !DILocation(line: 624, column: 11, scope: !5688)
!5691 = !DILocation(line: 624, column: 36, scope: !5688)
!5692 = !DILocation(line: 624, column: 11, scope: !5628)
!5693 = !DILocation(line: 628, column: 14, scope: !5694)
!5694 = distinct !DILexicalBlock(scope: !5688, file: !1, line: 624, column: 57)
!5695 = !DILocation(line: 628, column: 18, scope: !5694)
!5696 = !DILocation(line: 628, column: 28, scope: !5694)
!5697 = !DILocation(line: 628, column: 32, scope: !5694)
!5698 = !DILocation(line: 628, column: 7, scope: !5694)
!5699 = !DILocation(line: 628, column: 5, scope: !5694)
!5700 = !DILocation(line: 629, column: 14, scope: !5694)
!5701 = !DILocation(line: 629, column: 18, scope: !5694)
!5702 = !DILocation(line: 629, column: 21, scope: !5694)
!5703 = !DILocation(line: 629, column: 24, scope: !5694)
!5704 = !DILocation(line: 629, column: 3, scope: !5694)
!5705 = !DILocation(line: 630, column: 7, scope: !5706)
!5706 = distinct !DILexicalBlock(scope: !5694, file: !1, line: 630, column: 7)
!5707 = !DILocation(line: 630, column: 11, scope: !5706)
!5708 = !DILocation(line: 630, column: 23, scope: !5706)
!5709 = !DILocation(line: 630, column: 20, scope: !5706)
!5710 = !DILocation(line: 630, column: 7, scope: !5694)
!5711 = !DILocation(line: 631, column: 19, scope: !5706)
!5712 = !DILocation(line: 631, column: 4, scope: !5706)
!5713 = !DILocation(line: 631, column: 8, scope: !5706)
!5714 = !DILocation(line: 631, column: 17, scope: !5706)
!5715 = !DILocation(line: 632, column: 12, scope: !5716)
!5716 = distinct !DILexicalBlock(scope: !5706, file: !1, line: 632, column: 12)
!5717 = !DILocation(line: 632, column: 16, scope: !5716)
!5718 = !DILocation(line: 632, column: 28, scope: !5716)
!5719 = !DILocation(line: 632, column: 25, scope: !5716)
!5720 = !DILocation(line: 632, column: 12, scope: !5706)
!5721 = !DILocation(line: 633, column: 19, scope: !5716)
!5722 = !DILocation(line: 633, column: 4, scope: !5716)
!5723 = !DILocation(line: 633, column: 8, scope: !5716)
!5724 = !DILocation(line: 633, column: 17, scope: !5716)
!5725 = !DILocation(line: 634, column: 2, scope: !5694)
!5726 = !DILocation(line: 641, column: 17, scope: !5727)
!5727 = distinct !DILexicalBlock(scope: !5688, file: !1, line: 635, column: 7)
!5728 = !DILocation(line: 641, column: 25, scope: !5727)
!5729 = !DILocation(line: 641, column: 31, scope: !5727)
!5730 = !DILocation(line: 641, column: 3, scope: !5727)
!5731 = !DILocation(line: 642, column: 16, scope: !5727)
!5732 = !DILocation(line: 642, column: 3, scope: !5727)
!5733 = !DILocation(line: 643, column: 16, scope: !5734)
!5734 = distinct !DILexicalBlock(scope: !5727, file: !1, line: 643, column: 7)
!5735 = !DILocation(line: 643, column: 24, scope: !5734)
!5736 = !DILocation(line: 643, column: 28, scope: !5734)
!5737 = !DILocation(line: 643, column: 31, scope: !5734)
!5738 = !DILocation(line: 643, column: 36, scope: !5734)
!5739 = !DILocation(line: 643, column: 39, scope: !5734)
!5740 = !DILocation(line: 643, column: 7, scope: !5734)
!5741 = !DILocation(line: 643, column: 43, scope: !5734)
!5742 = !DILocation(line: 643, column: 7, scope: !5727)
!5743 = !DILocation(line: 644, column: 14, scope: !5734)
!5744 = !DILocation(line: 644, column: 4, scope: !5734)
!5745 = !DILocation(line: 647, column: 17, scope: !5727)
!5746 = !DILocation(line: 647, column: 29, scope: !5727)
!5747 = !DILocation(line: 647, column: 35, scope: !5727)
!5748 = !DILocation(line: 647, column: 3, scope: !5727)
!5749 = !DILocation(line: 648, column: 17, scope: !5727)
!5750 = !DILocation(line: 648, column: 29, scope: !5727)
!5751 = !DILocation(line: 648, column: 35, scope: !5727)
!5752 = !DILocation(line: 648, column: 3, scope: !5727)
!5753 = !DILocation(line: 649, column: 16, scope: !5727)
!5754 = !DILocation(line: 649, column: 3, scope: !5727)
!5755 = !DILocation(line: 650, column: 16, scope: !5727)
!5756 = !DILocation(line: 650, column: 3, scope: !5727)
!5757 = !DILocation(line: 653, column: 14, scope: !5727)
!5758 = !DILocation(line: 653, column: 21, scope: !5727)
!5759 = !DILocation(line: 653, column: 24, scope: !5727)
!5760 = !DILocation(line: 653, column: 3, scope: !5727)
!5761 = !DILocation(line: 654, column: 16, scope: !5727)
!5762 = !DILocation(line: 654, column: 23, scope: !5727)
!5763 = !DILocation(line: 654, column: 35, scope: !5727)
!5764 = !DILocation(line: 654, column: 39, scope: !5727)
!5765 = !DILocation(line: 654, column: 3, scope: !5727)
!5766 = !DILocation(line: 655, column: 15, scope: !5727)
!5767 = !DILocation(line: 655, column: 22, scope: !5727)
!5768 = !DILocation(line: 655, column: 29, scope: !5727)
!5769 = !DILocation(line: 655, column: 3, scope: !5727)
!5770 = !DILocation(line: 656, column: 14, scope: !5727)
!5771 = !DILocation(line: 656, column: 21, scope: !5727)
!5772 = !DILocation(line: 656, column: 24, scope: !5727)
!5773 = !DILocation(line: 656, column: 3, scope: !5727)
!5774 = !DILocation(line: 657, column: 16, scope: !5727)
!5775 = !DILocation(line: 657, column: 23, scope: !5727)
!5776 = !DILocation(line: 657, column: 35, scope: !5727)
!5777 = !DILocation(line: 657, column: 39, scope: !5727)
!5778 = !DILocation(line: 657, column: 3, scope: !5727)
!5779 = !DILocation(line: 658, column: 15, scope: !5727)
!5780 = !DILocation(line: 658, column: 22, scope: !5727)
!5781 = !DILocation(line: 658, column: 29, scope: !5727)
!5782 = !DILocation(line: 658, column: 3, scope: !5727)
!5783 = !DILocation(line: 661, column: 27, scope: !5784)
!5784 = distinct !DILexicalBlock(scope: !5727, file: !1, line: 661, column: 7)
!5785 = !DILocation(line: 661, column: 34, scope: !5784)
!5786 = !DILocation(line: 661, column: 41, scope: !5784)
!5787 = !DILocation(line: 661, column: 48, scope: !5784)
!5788 = !DILocation(line: 661, column: 55, scope: !5784)
!5789 = !DILocation(line: 661, column: 63, scope: !5784)
!5790 = !DILocation(line: 661, column: 8, scope: !5784)
!5791 = !DILocation(line: 661, column: 7, scope: !5727)
!5792 = !DILocation(line: 665, column: 15, scope: !5793)
!5793 = distinct !DILexicalBlock(scope: !5784, file: !1, line: 661, column: 72)
!5794 = !DILocation(line: 665, column: 23, scope: !5793)
!5795 = !DILocation(line: 665, column: 4, scope: !5793)
!5796 = !DILocation(line: 666, column: 24, scope: !5793)
!5797 = !DILocation(line: 666, column: 32, scope: !5793)
!5798 = !DILocation(line: 666, column: 35, scope: !5793)
!5799 = !DILocation(line: 666, column: 58, scope: !5793)
!5800 = !DILocation(line: 666, column: 62, scope: !5793)
!5801 = !DILocation(line: 666, column: 65, scope: !5793)
!5802 = !DILocation(line: 666, column: 39, scope: !5793)
!5803 = !DILocation(line: 666, column: 69, scope: !5793)
!5804 = !DILocation(line: 666, column: 8, scope: !5793)
!5805 = !DILocation(line: 666, column: 6, scope: !5793)
!5806 = !DILocation(line: 667, column: 14, scope: !5807)
!5807 = distinct !DILexicalBlock(scope: !5793, file: !1, line: 667, column: 8)
!5808 = !DILocation(line: 667, column: 18, scope: !5807)
!5809 = !DILocation(line: 667, column: 22, scope: !5807)
!5810 = !DILocation(line: 667, column: 16, scope: !5807)
!5811 = !DILocation(line: 667, column: 8, scope: !5807)
!5812 = !DILocation(line: 667, column: 32, scope: !5807)
!5813 = !DILocation(line: 667, column: 8, scope: !5793)
!5814 = !DILocation(line: 668, column: 20, scope: !5807)
!5815 = !DILocation(line: 668, column: 5, scope: !5807)
!5816 = !DILocation(line: 668, column: 9, scope: !5807)
!5817 = !DILocation(line: 668, column: 18, scope: !5807)
!5818 = !DILocation(line: 669, column: 3, scope: !5793)
!5819 = !DILocation(line: 676, column: 8, scope: !5820)
!5820 = distinct !DILexicalBlock(scope: !5821, file: !1, line: 676, column: 8)
!5821 = distinct !DILexicalBlock(scope: !5784, file: !1, line: 670, column: 8)
!5822 = !DILocation(line: 676, column: 12, scope: !5820)
!5823 = !DILocation(line: 676, column: 21, scope: !5820)
!5824 = !DILocation(line: 676, column: 29, scope: !5820)
!5825 = !DILocation(line: 676, column: 48, scope: !5820)
!5826 = !DILocation(line: 676, column: 52, scope: !5820)
!5827 = !DILocation(line: 676, column: 32, scope: !5820)
!5828 = !DILocation(line: 676, column: 8, scope: !5821)
!5829 = !DILocation(line: 677, column: 16, scope: !5830)
!5830 = distinct !DILexicalBlock(scope: !5820, file: !1, line: 676, column: 72)
!5831 = !DILocation(line: 677, column: 24, scope: !5830)
!5832 = !DILocation(line: 677, column: 34, scope: !5830)
!5833 = !DILocation(line: 677, column: 5, scope: !5830)
!5834 = !DILocation(line: 678, column: 29, scope: !5830)
!5835 = !DILocation(line: 678, column: 37, scope: !5830)
!5836 = !DILocation(line: 678, column: 40, scope: !5830)
!5837 = !DILocation(line: 678, column: 20, scope: !5830)
!5838 = !DILocation(line: 678, column: 5, scope: !5830)
!5839 = !DILocation(line: 678, column: 9, scope: !5830)
!5840 = !DILocation(line: 678, column: 18, scope: !5830)
!5841 = !DILocation(line: 679, column: 4, scope: !5830)
!5842 = !DILocation(line: 680, column: 8, scope: !5843)
!5843 = distinct !DILexicalBlock(scope: !5821, file: !1, line: 680, column: 8)
!5844 = !DILocation(line: 680, column: 12, scope: !5843)
!5845 = !DILocation(line: 680, column: 21, scope: !5843)
!5846 = !DILocation(line: 680, column: 29, scope: !5843)
!5847 = !DILocation(line: 680, column: 48, scope: !5843)
!5848 = !DILocation(line: 680, column: 52, scope: !5843)
!5849 = !DILocation(line: 680, column: 32, scope: !5843)
!5850 = !DILocation(line: 680, column: 8, scope: !5821)
!5851 = !DILocation(line: 681, column: 16, scope: !5852)
!5852 = distinct !DILexicalBlock(scope: !5843, file: !1, line: 680, column: 72)
!5853 = !DILocation(line: 681, column: 24, scope: !5852)
!5854 = !DILocation(line: 681, column: 34, scope: !5852)
!5855 = !DILocation(line: 681, column: 5, scope: !5852)
!5856 = !DILocation(line: 682, column: 29, scope: !5852)
!5857 = !DILocation(line: 682, column: 37, scope: !5852)
!5858 = !DILocation(line: 682, column: 40, scope: !5852)
!5859 = !DILocation(line: 682, column: 20, scope: !5852)
!5860 = !DILocation(line: 682, column: 5, scope: !5852)
!5861 = !DILocation(line: 682, column: 9, scope: !5852)
!5862 = !DILocation(line: 682, column: 18, scope: !5852)
!5863 = !DILocation(line: 683, column: 4, scope: !5852)
!5864 = !DILocation(line: 686, column: 1, scope: !5566)
!5865 = distinct !DISubprogram(name: "offset_in_two_planes", scope: !1, file: !1, line: 791, type: !5866, scopeLine: 793, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!5866 = !DISubroutineType(types: !5867)
!5867 = !{null, !801, !130, !130, !130, !51, !170}
!5868 = !DILocalVariable(name: "bp", arg: 1, scope: !5865, file: !1, line: 791, type: !801)
!5869 = !DILocation(line: 791, column: 47, scope: !5865)
!5870 = !DILocalVariable(name: "e1", arg: 2, scope: !5865, file: !1, line: 791, type: !130)
!5871 = !DILocation(line: 791, column: 61, scope: !5865)
!5872 = !DILocalVariable(name: "e2", arg: 3, scope: !5865, file: !1, line: 791, type: !130)
!5873 = !DILocation(line: 791, column: 75, scope: !5865)
!5874 = !DILocalVariable(name: "emid", arg: 4, scope: !5865, file: !1, line: 791, type: !130)
!5875 = !DILocation(line: 791, column: 89, scope: !5865)
!5876 = !DILocalVariable(name: "v", arg: 5, scope: !5865, file: !1, line: 792, type: !51)
!5877 = !DILocation(line: 792, column: 42, scope: !5865)
!5878 = !DILocalVariable(name: "meetco", arg: 6, scope: !5865, file: !1, line: 792, type: !170)
!5879 = !DILocation(line: 792, column: 52, scope: !5865)
!5880 = !DILocalVariable(name: "dir1", scope: !5865, file: !1, line: 794, type: !75)
!5881 = !DILocation(line: 794, column: 8, scope: !5865)
!5882 = !DILocalVariable(name: "dir2", scope: !5865, file: !1, line: 794, type: !75)
!5883 = !DILocation(line: 794, column: 17, scope: !5865)
!5884 = !DILocalVariable(name: "dirmid", scope: !5865, file: !1, line: 794, type: !75)
!5885 = !DILocation(line: 794, column: 26, scope: !5865)
!5886 = !DILocalVariable(name: "norm_perp1", scope: !5865, file: !1, line: 794, type: !75)
!5887 = !DILocation(line: 794, column: 37, scope: !5865)
!5888 = !DILocalVariable(name: "norm_perp2", scope: !5865, file: !1, line: 794, type: !75)
!5889 = !DILocation(line: 794, column: 52, scope: !5865)
!5890 = !DILocalVariable(name: "off1a", scope: !5865, file: !1, line: 795, type: !75)
!5891 = !DILocation(line: 795, column: 8, scope: !5865)
!5892 = !DILocalVariable(name: "off1b", scope: !5865, file: !1, line: 795, type: !75)
!5893 = !DILocation(line: 795, column: 18, scope: !5865)
!5894 = !DILocalVariable(name: "off2a", scope: !5865, file: !1, line: 795, type: !75)
!5895 = !DILocation(line: 795, column: 28, scope: !5865)
!5896 = !DILocalVariable(name: "off2b", scope: !5865, file: !1, line: 795, type: !75)
!5897 = !DILocation(line: 795, column: 38, scope: !5865)
!5898 = !DILocalVariable(name: "isect2", scope: !5865, file: !1, line: 795, type: !75)
!5899 = !DILocation(line: 795, column: 48, scope: !5865)
!5900 = !DILocalVariable(name: "f1no", scope: !5865, file: !1, line: 796, type: !75)
!5901 = !DILocation(line: 796, column: 8, scope: !5865)
!5902 = !DILocalVariable(name: "f2no", scope: !5865, file: !1, line: 796, type: !75)
!5903 = !DILocation(line: 796, column: 17, scope: !5865)
!5904 = !DILocalVariable(name: "ang", scope: !5865, file: !1, line: 796, type: !76)
!5905 = !DILocation(line: 796, column: 26, scope: !5865)
!5906 = !DILocalVariable(name: "d", scope: !5865, file: !1, line: 796, type: !76)
!5907 = !DILocation(line: 796, column: 31, scope: !5865)
!5908 = !DILocalVariable(name: "iret", scope: !5865, file: !1, line: 797, type: !63)
!5909 = !DILocation(line: 797, column: 6, scope: !5865)
!5910 = !DILocation(line: 800, column: 14, scope: !5865)
!5911 = !DILocation(line: 800, column: 20, scope: !5865)
!5912 = !DILocation(line: 800, column: 23, scope: !5865)
!5913 = !DILocation(line: 800, column: 46, scope: !5865)
!5914 = !DILocation(line: 800, column: 50, scope: !5865)
!5915 = !DILocation(line: 800, column: 53, scope: !5865)
!5916 = !DILocation(line: 800, column: 27, scope: !5865)
!5917 = !DILocation(line: 800, column: 57, scope: !5865)
!5918 = !DILocation(line: 800, column: 2, scope: !5865)
!5919 = !DILocation(line: 801, column: 14, scope: !5865)
!5920 = !DILocation(line: 801, column: 39, scope: !5865)
!5921 = !DILocation(line: 801, column: 43, scope: !5865)
!5922 = !DILocation(line: 801, column: 46, scope: !5865)
!5923 = !DILocation(line: 801, column: 20, scope: !5865)
!5924 = !DILocation(line: 801, column: 50, scope: !5865)
!5925 = !DILocation(line: 801, column: 54, scope: !5865)
!5926 = !DILocation(line: 801, column: 57, scope: !5865)
!5927 = !DILocation(line: 801, column: 2, scope: !5865)
!5928 = !DILocation(line: 802, column: 14, scope: !5865)
!5929 = !DILocation(line: 802, column: 41, scope: !5865)
!5930 = !DILocation(line: 802, column: 47, scope: !5865)
!5931 = !DILocation(line: 802, column: 50, scope: !5865)
!5932 = !DILocation(line: 802, column: 22, scope: !5865)
!5933 = !DILocation(line: 802, column: 54, scope: !5865)
!5934 = !DILocation(line: 802, column: 58, scope: !5865)
!5935 = !DILocation(line: 802, column: 61, scope: !5865)
!5936 = !DILocation(line: 802, column: 2, scope: !5865)
!5937 = !DILocation(line: 806, column: 16, scope: !5865)
!5938 = !DILocation(line: 806, column: 22, scope: !5865)
!5939 = !DILocation(line: 806, column: 30, scope: !5865)
!5940 = !DILocation(line: 806, column: 2, scope: !5865)
!5941 = !DILocation(line: 807, column: 16, scope: !5865)
!5942 = !DILocation(line: 807, column: 22, scope: !5865)
!5943 = !DILocation(line: 807, column: 30, scope: !5865)
!5944 = !DILocation(line: 807, column: 2, scope: !5865)
!5945 = !DILocation(line: 810, column: 15, scope: !5946)
!5946 = distinct !DILexicalBlock(scope: !5865, file: !1, line: 810, column: 6)
!5947 = !DILocation(line: 810, column: 21, scope: !5946)
!5948 = !DILocation(line: 810, column: 24, scope: !5946)
!5949 = !DILocation(line: 810, column: 6, scope: !5946)
!5950 = !DILocation(line: 810, column: 28, scope: !5946)
!5951 = !DILocation(line: 810, column: 6, scope: !5865)
!5952 = !DILocation(line: 811, column: 13, scope: !5946)
!5953 = !DILocation(line: 811, column: 3, scope: !5946)
!5954 = !DILocation(line: 812, column: 15, scope: !5955)
!5955 = distinct !DILexicalBlock(scope: !5865, file: !1, line: 812, column: 6)
!5956 = !DILocation(line: 812, column: 21, scope: !5955)
!5957 = !DILocation(line: 812, column: 24, scope: !5955)
!5958 = !DILocation(line: 812, column: 6, scope: !5955)
!5959 = !DILocation(line: 812, column: 28, scope: !5955)
!5960 = !DILocation(line: 812, column: 6, scope: !5865)
!5961 = !DILocation(line: 813, column: 13, scope: !5955)
!5962 = !DILocation(line: 813, column: 3, scope: !5955)
!5963 = !DILocation(line: 816, column: 16, scope: !5865)
!5964 = !DILocation(line: 816, column: 28, scope: !5865)
!5965 = !DILocation(line: 816, column: 34, scope: !5865)
!5966 = !DILocation(line: 816, column: 2, scope: !5865)
!5967 = !DILocation(line: 817, column: 15, scope: !5865)
!5968 = !DILocation(line: 817, column: 2, scope: !5865)
!5969 = !DILocation(line: 818, column: 16, scope: !5865)
!5970 = !DILocation(line: 818, column: 28, scope: !5865)
!5971 = !DILocation(line: 818, column: 34, scope: !5865)
!5972 = !DILocation(line: 818, column: 2, scope: !5865)
!5973 = !DILocation(line: 819, column: 15, scope: !5865)
!5974 = !DILocation(line: 819, column: 2, scope: !5865)
!5975 = !DILocation(line: 822, column: 13, scope: !5865)
!5976 = !DILocation(line: 822, column: 20, scope: !5865)
!5977 = !DILocation(line: 822, column: 23, scope: !5865)
!5978 = !DILocation(line: 822, column: 2, scope: !5865)
!5979 = !DILocation(line: 823, column: 15, scope: !5865)
!5980 = !DILocation(line: 823, column: 22, scope: !5865)
!5981 = !DILocation(line: 823, column: 34, scope: !5865)
!5982 = !DILocation(line: 823, column: 38, scope: !5865)
!5983 = !DILocation(line: 823, column: 2, scope: !5865)
!5984 = !DILocation(line: 824, column: 14, scope: !5865)
!5985 = !DILocation(line: 824, column: 21, scope: !5865)
!5986 = !DILocation(line: 824, column: 28, scope: !5865)
!5987 = !DILocation(line: 824, column: 2, scope: !5865)
!5988 = !DILocation(line: 825, column: 13, scope: !5865)
!5989 = !DILocation(line: 825, column: 20, scope: !5865)
!5990 = !DILocation(line: 825, column: 23, scope: !5865)
!5991 = !DILocation(line: 825, column: 2, scope: !5865)
!5992 = !DILocation(line: 826, column: 15, scope: !5865)
!5993 = !DILocation(line: 826, column: 22, scope: !5865)
!5994 = !DILocation(line: 826, column: 34, scope: !5865)
!5995 = !DILocation(line: 826, column: 38, scope: !5865)
!5996 = !DILocation(line: 826, column: 2, scope: !5865)
!5997 = !DILocation(line: 827, column: 14, scope: !5865)
!5998 = !DILocation(line: 827, column: 21, scope: !5865)
!5999 = !DILocation(line: 827, column: 28, scope: !5865)
!6000 = !DILocation(line: 827, column: 2, scope: !5865)
!6001 = !DILocation(line: 829, column: 19, scope: !5865)
!6002 = !DILocation(line: 829, column: 25, scope: !5865)
!6003 = !DILocation(line: 829, column: 8, scope: !5865)
!6004 = !DILocation(line: 829, column: 6, scope: !5865)
!6005 = !DILocation(line: 830, column: 6, scope: !6006)
!6006 = distinct !DILexicalBlock(scope: !5865, file: !1, line: 830, column: 6)
!6007 = !DILocation(line: 830, column: 10, scope: !6006)
!6008 = !DILocation(line: 830, column: 6, scope: !5865)
!6009 = !DILocation(line: 832, column: 26, scope: !6010)
!6010 = distinct !DILexicalBlock(scope: !6006, file: !1, line: 830, column: 31)
!6011 = !DILocation(line: 832, column: 30, scope: !6010)
!6012 = !DILocation(line: 832, column: 34, scope: !6010)
!6013 = !DILocation(line: 832, column: 38, scope: !6010)
!6014 = !DILocation(line: 832, column: 44, scope: !6010)
!6015 = !DILocation(line: 832, column: 47, scope: !6010)
!6016 = !DILocation(line: 832, column: 3, scope: !6010)
!6017 = !DILocation(line: 833, column: 2, scope: !6010)
!6018 = !DILocation(line: 834, column: 17, scope: !6019)
!6019 = distinct !DILexicalBlock(scope: !6006, file: !1, line: 834, column: 11)
!6020 = !DILocation(line: 834, column: 21, scope: !6019)
!6021 = !DILocation(line: 834, column: 11, scope: !6019)
!6022 = !DILocation(line: 834, column: 36, scope: !6019)
!6023 = !DILocation(line: 834, column: 11, scope: !6006)
!6024 = !DILocation(line: 835, column: 14, scope: !6025)
!6025 = distinct !DILexicalBlock(scope: !6019, file: !1, line: 834, column: 57)
!6026 = !DILocation(line: 835, column: 18, scope: !6025)
!6027 = !DILocation(line: 835, column: 21, scope: !6025)
!6028 = !DILocation(line: 835, column: 25, scope: !6025)
!6029 = !DILocation(line: 835, column: 35, scope: !6025)
!6030 = !DILocation(line: 835, column: 3, scope: !6025)
!6031 = !DILocation(line: 836, column: 23, scope: !6025)
!6032 = !DILocation(line: 836, column: 31, scope: !6025)
!6033 = !DILocation(line: 836, column: 34, scope: !6025)
!6034 = !DILocation(line: 836, column: 57, scope: !6025)
!6035 = !DILocation(line: 836, column: 61, scope: !6025)
!6036 = !DILocation(line: 836, column: 64, scope: !6025)
!6037 = !DILocation(line: 836, column: 38, scope: !6025)
!6038 = !DILocation(line: 836, column: 68, scope: !6025)
!6039 = !DILocation(line: 836, column: 7, scope: !6025)
!6040 = !DILocation(line: 836, column: 5, scope: !6025)
!6041 = !DILocation(line: 837, column: 13, scope: !6042)
!6042 = distinct !DILexicalBlock(scope: !6025, file: !1, line: 837, column: 7)
!6043 = !DILocation(line: 837, column: 17, scope: !6042)
!6044 = !DILocation(line: 837, column: 21, scope: !6042)
!6045 = !DILocation(line: 837, column: 15, scope: !6042)
!6046 = !DILocation(line: 837, column: 7, scope: !6042)
!6047 = !DILocation(line: 837, column: 31, scope: !6042)
!6048 = !DILocation(line: 837, column: 7, scope: !6025)
!6049 = !DILocation(line: 838, column: 19, scope: !6042)
!6050 = !DILocation(line: 838, column: 4, scope: !6042)
!6051 = !DILocation(line: 838, column: 8, scope: !6042)
!6052 = !DILocation(line: 838, column: 17, scope: !6042)
!6053 = !DILocation(line: 839, column: 2, scope: !6025)
!6054 = !DILocation(line: 841, column: 29, scope: !6055)
!6055 = distinct !DILexicalBlock(scope: !6019, file: !1, line: 840, column: 7)
!6056 = !DILocation(line: 841, column: 36, scope: !6055)
!6057 = !DILocation(line: 841, column: 43, scope: !6055)
!6058 = !DILocation(line: 841, column: 50, scope: !6055)
!6059 = !DILocation(line: 841, column: 57, scope: !6055)
!6060 = !DILocation(line: 841, column: 65, scope: !6055)
!6061 = !DILocation(line: 841, column: 10, scope: !6055)
!6062 = !DILocation(line: 841, column: 8, scope: !6055)
!6063 = !DILocation(line: 842, column: 7, scope: !6064)
!6064 = distinct !DILexicalBlock(scope: !6055, file: !1, line: 842, column: 7)
!6065 = !DILocation(line: 842, column: 12, scope: !6064)
!6066 = !DILocation(line: 842, column: 7, scope: !6055)
!6067 = !DILocation(line: 844, column: 15, scope: !6068)
!6068 = distinct !DILexicalBlock(scope: !6064, file: !1, line: 842, column: 18)
!6069 = !DILocation(line: 844, column: 23, scope: !6068)
!6070 = !DILocation(line: 844, column: 4, scope: !6068)
!6071 = !DILocation(line: 845, column: 24, scope: !6068)
!6072 = !DILocation(line: 845, column: 32, scope: !6068)
!6073 = !DILocation(line: 845, column: 35, scope: !6068)
!6074 = !DILocation(line: 845, column: 58, scope: !6068)
!6075 = !DILocation(line: 845, column: 62, scope: !6068)
!6076 = !DILocation(line: 845, column: 65, scope: !6068)
!6077 = !DILocation(line: 845, column: 39, scope: !6068)
!6078 = !DILocation(line: 845, column: 69, scope: !6068)
!6079 = !DILocation(line: 845, column: 8, scope: !6068)
!6080 = !DILocation(line: 845, column: 6, scope: !6068)
!6081 = !DILocation(line: 846, column: 14, scope: !6082)
!6082 = distinct !DILexicalBlock(scope: !6068, file: !1, line: 846, column: 8)
!6083 = !DILocation(line: 846, column: 18, scope: !6082)
!6084 = !DILocation(line: 846, column: 22, scope: !6082)
!6085 = !DILocation(line: 846, column: 16, scope: !6082)
!6086 = !DILocation(line: 846, column: 8, scope: !6082)
!6087 = !DILocation(line: 846, column: 32, scope: !6082)
!6088 = !DILocation(line: 846, column: 8, scope: !6068)
!6089 = !DILocation(line: 847, column: 20, scope: !6082)
!6090 = !DILocation(line: 847, column: 5, scope: !6082)
!6091 = !DILocation(line: 847, column: 9, scope: !6082)
!6092 = !DILocation(line: 847, column: 18, scope: !6082)
!6093 = !DILocation(line: 848, column: 3, scope: !6068)
!6094 = !DILocation(line: 849, column: 12, scope: !6095)
!6095 = distinct !DILexicalBlock(scope: !6064, file: !1, line: 849, column: 12)
!6096 = !DILocation(line: 849, column: 17, scope: !6095)
!6097 = !DILocation(line: 849, column: 12, scope: !6064)
!6098 = !DILocation(line: 851, column: 25, scope: !6099)
!6099 = distinct !DILexicalBlock(scope: !6100, file: !1, line: 851, column: 8)
!6100 = distinct !DILexicalBlock(scope: !6095, file: !1, line: 849, column: 23)
!6101 = !DILocation(line: 851, column: 33, scope: !6099)
!6102 = !DILocation(line: 851, column: 8, scope: !6099)
!6103 = !DILocation(line: 851, column: 41, scope: !6099)
!6104 = !DILocation(line: 851, column: 8, scope: !6100)
!6105 = !DILocation(line: 853, column: 28, scope: !6106)
!6106 = distinct !DILexicalBlock(scope: !6099, file: !1, line: 851, column: 70)
!6107 = !DILocation(line: 853, column: 32, scope: !6106)
!6108 = !DILocation(line: 853, column: 36, scope: !6106)
!6109 = !DILocation(line: 853, column: 40, scope: !6106)
!6110 = !DILocation(line: 853, column: 46, scope: !6106)
!6111 = !DILocation(line: 853, column: 49, scope: !6106)
!6112 = !DILocation(line: 853, column: 5, scope: !6106)
!6113 = !DILocation(line: 854, column: 4, scope: !6106)
!6114 = !DILocation(line: 855, column: 3, scope: !6100)
!6115 = !DILocation(line: 858, column: 1, scope: !5865)
!6116 = distinct !DISubprogram(name: "offset_on_edge_between", scope: !1, file: !1, line: 735, type: !5866, scopeLine: 737, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!6117 = !DILocalVariable(name: "bp", arg: 1, scope: !6116, file: !1, line: 735, type: !801)
!6118 = !DILocation(line: 735, column: 49, scope: !6116)
!6119 = !DILocalVariable(name: "e1", arg: 2, scope: !6116, file: !1, line: 735, type: !130)
!6120 = !DILocation(line: 735, column: 63, scope: !6116)
!6121 = !DILocalVariable(name: "e2", arg: 3, scope: !6116, file: !1, line: 735, type: !130)
!6122 = !DILocation(line: 735, column: 77, scope: !6116)
!6123 = !DILocalVariable(name: "emid", arg: 4, scope: !6116, file: !1, line: 735, type: !130)
!6124 = !DILocation(line: 735, column: 91, scope: !6116)
!6125 = !DILocalVariable(name: "v", arg: 5, scope: !6116, file: !1, line: 736, type: !51)
!6126 = !DILocation(line: 736, column: 44, scope: !6116)
!6127 = !DILocalVariable(name: "meetco", arg: 6, scope: !6116, file: !1, line: 736, type: !170)
!6128 = !DILocation(line: 736, column: 53, scope: !6116)
!6129 = !DILocalVariable(name: "d", scope: !6116, file: !1, line: 738, type: !76)
!6130 = !DILocation(line: 738, column: 8, scope: !6116)
!6131 = !DILocalVariable(name: "ang1", scope: !6116, file: !1, line: 738, type: !76)
!6132 = !DILocation(line: 738, column: 11, scope: !6116)
!6133 = !DILocalVariable(name: "ang2", scope: !6116, file: !1, line: 738, type: !76)
!6134 = !DILocation(line: 738, column: 17, scope: !6116)
!6135 = !DILocalVariable(name: "sina1", scope: !6116, file: !1, line: 738, type: !76)
!6136 = !DILocation(line: 738, column: 23, scope: !6116)
!6137 = !DILocalVariable(name: "sina2", scope: !6116, file: !1, line: 738, type: !76)
!6138 = !DILocation(line: 738, column: 30, scope: !6116)
!6139 = !DILocalVariable(name: "lambda", scope: !6116, file: !1, line: 738, type: !76)
!6140 = !DILocation(line: 738, column: 37, scope: !6116)
!6141 = !DILocalVariable(name: "meet1", scope: !6116, file: !1, line: 739, type: !75)
!6142 = !DILocation(line: 739, column: 8, scope: !6116)
!6143 = !DILocalVariable(name: "meet2", scope: !6116, file: !1, line: 739, type: !75)
!6144 = !DILocation(line: 739, column: 18, scope: !6116)
!6145 = !DILocalVariable(name: "visited1", scope: !6116, file: !1, line: 740, type: !152)
!6146 = !DILocation(line: 740, column: 7, scope: !6116)
!6147 = !DILocalVariable(name: "visited2", scope: !6116, file: !1, line: 740, type: !152)
!6148 = !DILocation(line: 740, column: 17, scope: !6116)
!6149 = !DILocalVariable(name: "ok1", scope: !6116, file: !1, line: 740, type: !152)
!6150 = !DILocation(line: 740, column: 27, scope: !6116)
!6151 = !DILocalVariable(name: "ok2", scope: !6116, file: !1, line: 740, type: !152)
!6152 = !DILocation(line: 740, column: 32, scope: !6116)
!6153 = !DILocation(line: 744, column: 37, scope: !6116)
!6154 = !DILocation(line: 744, column: 41, scope: !6116)
!6155 = !DILocation(line: 744, column: 13, scope: !6116)
!6156 = !DILocation(line: 744, column: 11, scope: !6116)
!6157 = !DILocation(line: 745, column: 37, scope: !6116)
!6158 = !DILocation(line: 745, column: 41, scope: !6116)
!6159 = !DILocation(line: 745, column: 13, scope: !6116)
!6160 = !DILocation(line: 745, column: 11, scope: !6116)
!6161 = !DILocation(line: 747, column: 25, scope: !6116)
!6162 = !DILocation(line: 747, column: 29, scope: !6116)
!6163 = !DILocation(line: 747, column: 35, scope: !6116)
!6164 = !DILocation(line: 747, column: 38, scope: !6116)
!6165 = !DILocation(line: 747, column: 8, scope: !6116)
!6166 = !DILocation(line: 747, column: 6, scope: !6116)
!6167 = !DILocation(line: 748, column: 25, scope: !6116)
!6168 = !DILocation(line: 748, column: 31, scope: !6116)
!6169 = !DILocation(line: 748, column: 35, scope: !6116)
!6170 = !DILocation(line: 748, column: 38, scope: !6116)
!6171 = !DILocation(line: 748, column: 8, scope: !6116)
!6172 = !DILocation(line: 748, column: 6, scope: !6116)
!6173 = !DILocation(line: 749, column: 6, scope: !6174)
!6174 = distinct !DILexicalBlock(scope: !6116, file: !1, line: 749, column: 6)
!6175 = !DILocation(line: 749, column: 10, scope: !6174)
!6176 = !DILocation(line: 749, column: 13, scope: !6174)
!6177 = !DILocation(line: 749, column: 6, scope: !6116)
!6178 = !DILocation(line: 750, column: 7, scope: !6179)
!6179 = distinct !DILexicalBlock(scope: !6180, file: !1, line: 750, column: 7)
!6180 = distinct !DILexicalBlock(scope: !6174, file: !1, line: 749, column: 18)
!6181 = !DILocation(line: 750, column: 16, scope: !6179)
!6182 = !DILocation(line: 750, column: 20, scope: !6179)
!6183 = !DILocation(line: 750, column: 7, scope: !6180)
!6184 = !DILocation(line: 751, column: 15, scope: !6185)
!6185 = distinct !DILexicalBlock(scope: !6179, file: !1, line: 750, column: 30)
!6186 = !DILocation(line: 751, column: 23, scope: !6185)
!6187 = !DILocation(line: 751, column: 4, scope: !6185)
!6188 = !DILocation(line: 752, column: 3, scope: !6185)
!6189 = !DILocation(line: 753, column: 13, scope: !6190)
!6190 = distinct !DILexicalBlock(scope: !6179, file: !1, line: 753, column: 12)
!6191 = !DILocation(line: 753, column: 22, scope: !6190)
!6192 = !DILocation(line: 753, column: 25, scope: !6190)
!6193 = !DILocation(line: 753, column: 12, scope: !6179)
!6194 = !DILocation(line: 754, column: 15, scope: !6195)
!6195 = distinct !DILexicalBlock(scope: !6190, file: !1, line: 753, column: 35)
!6196 = !DILocation(line: 754, column: 23, scope: !6195)
!6197 = !DILocation(line: 754, column: 4, scope: !6195)
!6198 = !DILocation(line: 755, column: 3, scope: !6195)
!6199 = !DILocation(line: 758, column: 17, scope: !6200)
!6200 = distinct !DILexicalBlock(scope: !6190, file: !1, line: 756, column: 8)
!6201 = !DILocation(line: 758, column: 12, scope: !6200)
!6202 = !DILocation(line: 758, column: 10, scope: !6200)
!6203 = !DILocation(line: 759, column: 17, scope: !6200)
!6204 = !DILocation(line: 759, column: 12, scope: !6200)
!6205 = !DILocation(line: 759, column: 10, scope: !6200)
!6206 = !DILocation(line: 760, column: 13, scope: !6200)
!6207 = !DILocation(line: 760, column: 21, scope: !6200)
!6208 = !DILocation(line: 760, column: 19, scope: !6200)
!6209 = !DILocation(line: 760, column: 30, scope: !6200)
!6210 = !DILocation(line: 760, column: 38, scope: !6200)
!6211 = !DILocation(line: 760, column: 36, scope: !6200)
!6212 = !DILocation(line: 760, column: 46, scope: !6200)
!6213 = !DILocation(line: 760, column: 54, scope: !6200)
!6214 = !DILocation(line: 760, column: 52, scope: !6200)
!6215 = !DILocation(line: 760, column: 44, scope: !6200)
!6216 = !DILocation(line: 760, column: 27, scope: !6200)
!6217 = !DILocation(line: 760, column: 11, scope: !6200)
!6218 = !DILocation(line: 761, column: 19, scope: !6200)
!6219 = !DILocation(line: 761, column: 27, scope: !6200)
!6220 = !DILocation(line: 761, column: 34, scope: !6200)
!6221 = !DILocation(line: 761, column: 41, scope: !6200)
!6222 = !DILocation(line: 761, column: 4, scope: !6200)
!6223 = !DILocation(line: 763, column: 2, scope: !6180)
!6224 = !DILocation(line: 764, column: 11, scope: !6225)
!6225 = distinct !DILexicalBlock(scope: !6174, file: !1, line: 764, column: 11)
!6226 = !DILocation(line: 764, column: 15, scope: !6225)
!6227 = !DILocation(line: 764, column: 19, scope: !6225)
!6228 = !DILocation(line: 764, column: 11, scope: !6174)
!6229 = !DILocation(line: 765, column: 14, scope: !6230)
!6230 = distinct !DILexicalBlock(scope: !6225, file: !1, line: 764, column: 24)
!6231 = !DILocation(line: 765, column: 22, scope: !6230)
!6232 = !DILocation(line: 765, column: 3, scope: !6230)
!6233 = !DILocation(line: 766, column: 2, scope: !6230)
!6234 = !DILocation(line: 767, column: 12, scope: !6235)
!6235 = distinct !DILexicalBlock(scope: !6225, file: !1, line: 767, column: 11)
!6236 = !DILocation(line: 767, column: 16, scope: !6235)
!6237 = !DILocation(line: 767, column: 19, scope: !6235)
!6238 = !DILocation(line: 767, column: 11, scope: !6225)
!6239 = !DILocation(line: 768, column: 14, scope: !6240)
!6240 = distinct !DILexicalBlock(scope: !6235, file: !1, line: 767, column: 24)
!6241 = !DILocation(line: 768, column: 22, scope: !6240)
!6242 = !DILocation(line: 768, column: 3, scope: !6240)
!6243 = !DILocation(line: 769, column: 2, scope: !6240)
!6244 = !DILocation(line: 773, column: 14, scope: !6245)
!6245 = distinct !DILexicalBlock(scope: !6235, file: !1, line: 770, column: 7)
!6246 = !DILocation(line: 773, column: 20, scope: !6245)
!6247 = !DILocation(line: 773, column: 23, scope: !6245)
!6248 = !DILocation(line: 773, column: 27, scope: !6245)
!6249 = !DILocation(line: 773, column: 37, scope: !6245)
!6250 = !DILocation(line: 773, column: 3, scope: !6245)
!6251 = !DILocation(line: 777, column: 22, scope: !6116)
!6252 = !DILocation(line: 777, column: 30, scope: !6116)
!6253 = !DILocation(line: 777, column: 33, scope: !6116)
!6254 = !DILocation(line: 777, column: 56, scope: !6116)
!6255 = !DILocation(line: 777, column: 60, scope: !6116)
!6256 = !DILocation(line: 777, column: 63, scope: !6116)
!6257 = !DILocation(line: 777, column: 37, scope: !6116)
!6258 = !DILocation(line: 777, column: 67, scope: !6116)
!6259 = !DILocation(line: 777, column: 6, scope: !6116)
!6260 = !DILocation(line: 777, column: 4, scope: !6116)
!6261 = !DILocation(line: 778, column: 12, scope: !6262)
!6262 = distinct !DILexicalBlock(scope: !6116, file: !1, line: 778, column: 6)
!6263 = !DILocation(line: 778, column: 16, scope: !6262)
!6264 = !DILocation(line: 778, column: 20, scope: !6262)
!6265 = !DILocation(line: 778, column: 14, scope: !6262)
!6266 = !DILocation(line: 778, column: 6, scope: !6262)
!6267 = !DILocation(line: 778, column: 30, scope: !6262)
!6268 = !DILocation(line: 778, column: 6, scope: !6116)
!6269 = !DILocation(line: 779, column: 18, scope: !6262)
!6270 = !DILocation(line: 779, column: 3, scope: !6262)
!6271 = !DILocation(line: 779, column: 7, scope: !6262)
!6272 = !DILocation(line: 779, column: 16, scope: !6262)
!6273 = !DILocation(line: 780, column: 22, scope: !6116)
!6274 = !DILocation(line: 780, column: 30, scope: !6116)
!6275 = !DILocation(line: 780, column: 33, scope: !6116)
!6276 = !DILocation(line: 780, column: 56, scope: !6116)
!6277 = !DILocation(line: 780, column: 60, scope: !6116)
!6278 = !DILocation(line: 780, column: 63, scope: !6116)
!6279 = !DILocation(line: 780, column: 37, scope: !6116)
!6280 = !DILocation(line: 780, column: 67, scope: !6116)
!6281 = !DILocation(line: 780, column: 6, scope: !6116)
!6282 = !DILocation(line: 780, column: 4, scope: !6116)
!6283 = !DILocation(line: 781, column: 12, scope: !6284)
!6284 = distinct !DILexicalBlock(scope: !6116, file: !1, line: 781, column: 6)
!6285 = !DILocation(line: 781, column: 16, scope: !6284)
!6286 = !DILocation(line: 781, column: 20, scope: !6284)
!6287 = !DILocation(line: 781, column: 14, scope: !6284)
!6288 = !DILocation(line: 781, column: 6, scope: !6284)
!6289 = !DILocation(line: 781, column: 30, scope: !6284)
!6290 = !DILocation(line: 781, column: 6, scope: !6116)
!6291 = !DILocation(line: 782, column: 18, scope: !6284)
!6292 = !DILocation(line: 782, column: 3, scope: !6284)
!6293 = !DILocation(line: 782, column: 7, scope: !6284)
!6294 = !DILocation(line: 782, column: 16, scope: !6284)
!6295 = !DILocation(line: 783, column: 1, scope: !6116)
!6296 = distinct !DISubprogram(name: "len_v3v3", scope: !4142, file: !4142, line: 759, type: !4143, scopeLine: 760, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!6297 = !DILocalVariable(name: "a", arg: 1, scope: !6296, file: !4142, line: 759, type: !1865)
!6298 = !DILocation(line: 759, column: 36, scope: !6296)
!6299 = !DILocalVariable(name: "b", arg: 2, scope: !6296, file: !4142, line: 759, type: !1865)
!6300 = !DILocation(line: 759, column: 54, scope: !6296)
!6301 = !DILocalVariable(name: "d", scope: !6296, file: !4142, line: 761, type: !75)
!6302 = !DILocation(line: 761, column: 8, scope: !6296)
!6303 = !DILocation(line: 763, column: 14, scope: !6296)
!6304 = !DILocation(line: 763, column: 17, scope: !6296)
!6305 = !DILocation(line: 763, column: 20, scope: !6296)
!6306 = !DILocation(line: 763, column: 2, scope: !6296)
!6307 = !DILocation(line: 764, column: 16, scope: !6296)
!6308 = !DILocation(line: 764, column: 9, scope: !6296)
!6309 = !DILocation(line: 764, column: 2, scope: !6296)
!6310 = distinct !DISubprogram(name: "move_profile_plane", scope: !1, file: !1, line: 973, type: !6311, scopeLine: 974, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!6311 = !DISubroutineType(types: !6312)
!6312 = !{null, !121, !130, !130}
!6313 = !DILocalVariable(name: "bndv", arg: 1, scope: !6310, file: !1, line: 973, type: !121)
!6314 = !DILocation(line: 973, column: 43, scope: !6310)
!6315 = !DILocalVariable(name: "e1", arg: 2, scope: !6310, file: !1, line: 973, type: !130)
!6316 = !DILocation(line: 973, column: 59, scope: !6310)
!6317 = !DILocalVariable(name: "e2", arg: 3, scope: !6310, file: !1, line: 973, type: !130)
!6318 = !DILocation(line: 973, column: 73, scope: !6310)
!6319 = !DILocalVariable(name: "d1", scope: !6310, file: !1, line: 975, type: !75)
!6320 = !DILocation(line: 975, column: 8, scope: !6310)
!6321 = !DILocalVariable(name: "d2", scope: !6310, file: !1, line: 975, type: !75)
!6322 = !DILocation(line: 975, column: 15, scope: !6310)
!6323 = !DILocalVariable(name: "no", scope: !6310, file: !1, line: 975, type: !75)
!6324 = !DILocation(line: 975, column: 22, scope: !6310)
!6325 = !DILocalVariable(name: "no2", scope: !6310, file: !1, line: 975, type: !75)
!6326 = !DILocation(line: 975, column: 29, scope: !6310)
!6327 = !DILocalVariable(name: "dot", scope: !6310, file: !1, line: 975, type: !76)
!6328 = !DILocation(line: 975, column: 37, scope: !6310)
!6329 = !DILocation(line: 978, column: 17, scope: !6330)
!6330 = distinct !DILexicalBlock(scope: !6310, file: !1, line: 978, column: 6)
!6331 = !DILocation(line: 978, column: 23, scope: !6330)
!6332 = !DILocation(line: 978, column: 31, scope: !6330)
!6333 = !DILocation(line: 978, column: 6, scope: !6330)
!6334 = !DILocation(line: 978, column: 6, scope: !6310)
!6335 = !DILocation(line: 979, column: 3, scope: !6330)
!6336 = !DILocation(line: 980, column: 14, scope: !6310)
!6337 = !DILocation(line: 980, column: 18, scope: !6310)
!6338 = !DILocation(line: 980, column: 22, scope: !6310)
!6339 = !DILocation(line: 980, column: 25, scope: !6310)
!6340 = !DILocation(line: 980, column: 29, scope: !6310)
!6341 = !DILocation(line: 980, column: 33, scope: !6310)
!6342 = !DILocation(line: 980, column: 37, scope: !6310)
!6343 = !DILocation(line: 980, column: 40, scope: !6310)
!6344 = !DILocation(line: 980, column: 44, scope: !6310)
!6345 = !DILocation(line: 980, column: 2, scope: !6310)
!6346 = !DILocation(line: 981, column: 14, scope: !6310)
!6347 = !DILocation(line: 981, column: 18, scope: !6310)
!6348 = !DILocation(line: 981, column: 22, scope: !6310)
!6349 = !DILocation(line: 981, column: 25, scope: !6310)
!6350 = !DILocation(line: 981, column: 29, scope: !6310)
!6351 = !DILocation(line: 981, column: 33, scope: !6310)
!6352 = !DILocation(line: 981, column: 37, scope: !6310)
!6353 = !DILocation(line: 981, column: 40, scope: !6310)
!6354 = !DILocation(line: 981, column: 44, scope: !6310)
!6355 = !DILocation(line: 981, column: 2, scope: !6310)
!6356 = !DILocation(line: 982, column: 16, scope: !6310)
!6357 = !DILocation(line: 982, column: 20, scope: !6310)
!6358 = !DILocation(line: 982, column: 24, scope: !6310)
!6359 = !DILocation(line: 982, column: 2, scope: !6310)
!6360 = !DILocation(line: 983, column: 16, scope: !6310)
!6361 = !DILocation(line: 983, column: 21, scope: !6310)
!6362 = !DILocation(line: 983, column: 25, scope: !6310)
!6363 = !DILocation(line: 983, column: 31, scope: !6310)
!6364 = !DILocation(line: 983, column: 39, scope: !6310)
!6365 = !DILocation(line: 983, column: 2, scope: !6310)
!6366 = !DILocation(line: 984, column: 19, scope: !6367)
!6367 = distinct !DILexicalBlock(scope: !6310, file: !1, line: 984, column: 6)
!6368 = !DILocation(line: 984, column: 6, scope: !6367)
!6369 = !DILocation(line: 984, column: 23, scope: !6367)
!6370 = !DILocation(line: 984, column: 43, scope: !6367)
!6371 = !DILocation(line: 984, column: 59, scope: !6367)
!6372 = !DILocation(line: 984, column: 46, scope: !6367)
!6373 = !DILocation(line: 984, column: 64, scope: !6367)
!6374 = !DILocation(line: 984, column: 6, scope: !6310)
!6375 = !DILocation(line: 985, column: 24, scope: !6376)
!6376 = distinct !DILexicalBlock(scope: !6367, file: !1, line: 984, column: 85)
!6377 = !DILocation(line: 985, column: 28, scope: !6376)
!6378 = !DILocation(line: 985, column: 15, scope: !6376)
!6379 = !DILocation(line: 985, column: 9, scope: !6376)
!6380 = !DILocation(line: 985, column: 7, scope: !6376)
!6381 = !DILocation(line: 986, column: 13, scope: !6382)
!6382 = distinct !DILexicalBlock(scope: !6376, file: !1, line: 986, column: 7)
!6383 = !DILocation(line: 986, column: 17, scope: !6382)
!6384 = !DILocation(line: 986, column: 7, scope: !6382)
!6385 = !DILocation(line: 986, column: 25, scope: !6382)
!6386 = !DILocation(line: 986, column: 7, scope: !6376)
!6387 = !DILocation(line: 987, column: 15, scope: !6382)
!6388 = !DILocation(line: 987, column: 21, scope: !6382)
!6389 = !DILocation(line: 987, column: 29, scope: !6382)
!6390 = !DILocation(line: 987, column: 39, scope: !6382)
!6391 = !DILocation(line: 987, column: 4, scope: !6382)
!6392 = !DILocation(line: 988, column: 2, scope: !6376)
!6393 = !DILocation(line: 989, column: 1, scope: !6310)
!6394 = distinct !DISubprogram(name: "find_edge_half", scope: !1, file: !1, line: 259, type: !6395, scopeLine: 260, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!6395 = !DISubroutineType(types: !6396)
!6396 = !{!130, !283, !138}
!6397 = !DILocalVariable(name: "bv", arg: 1, scope: !6394, file: !1, line: 259, type: !283)
!6398 = !DILocation(line: 259, column: 42, scope: !6394)
!6399 = !DILocalVariable(name: "bme", arg: 2, scope: !6394, file: !1, line: 259, type: !138)
!6400 = !DILocation(line: 259, column: 54, scope: !6394)
!6401 = !DILocalVariable(name: "i", scope: !6394, file: !1, line: 261, type: !63)
!6402 = !DILocation(line: 261, column: 6, scope: !6394)
!6403 = !DILocation(line: 263, column: 9, scope: !6404)
!6404 = distinct !DILexicalBlock(scope: !6394, file: !1, line: 263, column: 2)
!6405 = !DILocation(line: 263, column: 7, scope: !6404)
!6406 = !DILocation(line: 263, column: 14, scope: !6407)
!6407 = distinct !DILexicalBlock(scope: !6404, file: !1, line: 263, column: 2)
!6408 = !DILocation(line: 263, column: 18, scope: !6407)
!6409 = !DILocation(line: 263, column: 22, scope: !6407)
!6410 = !DILocation(line: 263, column: 16, scope: !6407)
!6411 = !DILocation(line: 263, column: 2, scope: !6404)
!6412 = !DILocation(line: 264, column: 7, scope: !6413)
!6413 = distinct !DILexicalBlock(scope: !6414, file: !1, line: 264, column: 7)
!6414 = distinct !DILexicalBlock(scope: !6407, file: !1, line: 263, column: 38)
!6415 = !DILocation(line: 264, column: 11, scope: !6413)
!6416 = !DILocation(line: 264, column: 17, scope: !6413)
!6417 = !DILocation(line: 264, column: 20, scope: !6413)
!6418 = !DILocation(line: 264, column: 25, scope: !6413)
!6419 = !DILocation(line: 264, column: 22, scope: !6413)
!6420 = !DILocation(line: 264, column: 7, scope: !6414)
!6421 = !DILocation(line: 265, column: 12, scope: !6413)
!6422 = !DILocation(line: 265, column: 16, scope: !6413)
!6423 = !DILocation(line: 265, column: 22, scope: !6413)
!6424 = !DILocation(line: 265, column: 4, scope: !6413)
!6425 = !DILocation(line: 266, column: 2, scope: !6414)
!6426 = !DILocation(line: 263, column: 34, scope: !6407)
!6427 = !DILocation(line: 263, column: 2, scope: !6407)
!6428 = distinct !{!6428, !6411, !6429}
!6429 = !DILocation(line: 266, column: 2, scope: !6404)
!6430 = !DILocation(line: 267, column: 2, scope: !6394)
!6431 = !DILocation(line: 268, column: 1, scope: !6394)
!6432 = distinct !DISubprogram(name: "sub_v3_v3v3", scope: !4142, file: !4142, line: 357, type: !4160, scopeLine: 358, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!6433 = !DILocalVariable(name: "r", arg: 1, scope: !6432, file: !4142, line: 357, type: !170)
!6434 = !DILocation(line: 357, column: 32, scope: !6432)
!6435 = !DILocalVariable(name: "a", arg: 2, scope: !6432, file: !4142, line: 357, type: !1865)
!6436 = !DILocation(line: 357, column: 50, scope: !6432)
!6437 = !DILocalVariable(name: "b", arg: 3, scope: !6432, file: !4142, line: 357, type: !1865)
!6438 = !DILocation(line: 357, column: 68, scope: !6432)
!6439 = !DILocation(line: 359, column: 9, scope: !6432)
!6440 = !DILocation(line: 359, column: 16, scope: !6432)
!6441 = !DILocation(line: 359, column: 14, scope: !6432)
!6442 = !DILocation(line: 359, column: 2, scope: !6432)
!6443 = !DILocation(line: 359, column: 7, scope: !6432)
!6444 = !DILocation(line: 360, column: 9, scope: !6432)
!6445 = !DILocation(line: 360, column: 16, scope: !6432)
!6446 = !DILocation(line: 360, column: 14, scope: !6432)
!6447 = !DILocation(line: 360, column: 2, scope: !6432)
!6448 = !DILocation(line: 360, column: 7, scope: !6432)
!6449 = !DILocation(line: 361, column: 9, scope: !6432)
!6450 = !DILocation(line: 361, column: 16, scope: !6432)
!6451 = !DILocation(line: 361, column: 14, scope: !6432)
!6452 = !DILocation(line: 361, column: 2, scope: !6432)
!6453 = !DILocation(line: 361, column: 7, scope: !6432)
!6454 = !DILocation(line: 362, column: 1, scope: !6432)
!6455 = distinct !DISubprogram(name: "normalize_v3", scope: !4142, file: !4142, line: 830, type: !6456, scopeLine: 831, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!6456 = !DISubroutineType(types: !6457)
!6457 = !{!76, !170}
!6458 = !DILocalVariable(name: "n", arg: 1, scope: !6455, file: !4142, line: 830, type: !170)
!6459 = !DILocation(line: 830, column: 34, scope: !6455)
!6460 = !DILocation(line: 832, column: 25, scope: !6455)
!6461 = !DILocation(line: 832, column: 28, scope: !6455)
!6462 = !DILocation(line: 832, column: 9, scope: !6455)
!6463 = !DILocation(line: 832, column: 2, scope: !6455)
!6464 = distinct !DISubprogram(name: "copy_v3_v3", scope: !4142, file: !4142, line: 64, type: !6465, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!6465 = !DISubroutineType(types: !6466)
!6466 = !{null, !170, !1865}
!6467 = !DILocalVariable(name: "r", arg: 1, scope: !6464, file: !4142, line: 64, type: !170)
!6468 = !DILocation(line: 64, column: 31, scope: !6464)
!6469 = !DILocalVariable(name: "a", arg: 2, scope: !6464, file: !4142, line: 64, type: !1865)
!6470 = !DILocation(line: 64, column: 49, scope: !6464)
!6471 = !DILocation(line: 66, column: 9, scope: !6464)
!6472 = !DILocation(line: 66, column: 2, scope: !6464)
!6473 = !DILocation(line: 66, column: 7, scope: !6464)
!6474 = !DILocation(line: 67, column: 9, scope: !6464)
!6475 = !DILocation(line: 67, column: 2, scope: !6464)
!6476 = !DILocation(line: 67, column: 7, scope: !6464)
!6477 = !DILocation(line: 68, column: 9, scope: !6464)
!6478 = !DILocation(line: 68, column: 2, scope: !6464)
!6479 = !DILocation(line: 68, column: 7, scope: !6464)
!6480 = !DILocation(line: 69, column: 1, scope: !6464)
!6481 = distinct !DISubprogram(name: "zero_v3", scope: !4142, file: !4142, line: 43, type: !6482, scopeLine: 44, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!6482 = !DISubroutineType(types: !6483)
!6483 = !{null, !170}
!6484 = !DILocalVariable(name: "r", arg: 1, scope: !6481, file: !4142, line: 43, type: !170)
!6485 = !DILocation(line: 43, column: 28, scope: !6481)
!6486 = !DILocation(line: 45, column: 2, scope: !6481)
!6487 = !DILocation(line: 45, column: 7, scope: !6481)
!6488 = !DILocation(line: 46, column: 2, scope: !6481)
!6489 = !DILocation(line: 46, column: 7, scope: !6481)
!6490 = !DILocation(line: 47, column: 2, scope: !6481)
!6491 = !DILocation(line: 47, column: 7, scope: !6481)
!6492 = !DILocation(line: 48, column: 1, scope: !6481)
!6493 = distinct !DISubprogram(name: "cross_v3_v3v3", scope: !4142, file: !4142, line: 634, type: !4160, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!6494 = !DILocalVariable(name: "r", arg: 1, scope: !6493, file: !4142, line: 634, type: !170)
!6495 = !DILocation(line: 634, column: 34, scope: !6493)
!6496 = !DILocalVariable(name: "a", arg: 2, scope: !6493, file: !4142, line: 634, type: !1865)
!6497 = !DILocation(line: 634, column: 52, scope: !6493)
!6498 = !DILocalVariable(name: "b", arg: 3, scope: !6493, file: !4142, line: 634, type: !1865)
!6499 = !DILocation(line: 634, column: 70, scope: !6493)
!6500 = !DILocation(line: 637, column: 9, scope: !6493)
!6501 = !DILocation(line: 637, column: 16, scope: !6493)
!6502 = !DILocation(line: 637, column: 14, scope: !6493)
!6503 = !DILocation(line: 637, column: 23, scope: !6493)
!6504 = !DILocation(line: 637, column: 30, scope: !6493)
!6505 = !DILocation(line: 637, column: 28, scope: !6493)
!6506 = !DILocation(line: 637, column: 21, scope: !6493)
!6507 = !DILocation(line: 637, column: 2, scope: !6493)
!6508 = !DILocation(line: 637, column: 7, scope: !6493)
!6509 = !DILocation(line: 638, column: 9, scope: !6493)
!6510 = !DILocation(line: 638, column: 16, scope: !6493)
!6511 = !DILocation(line: 638, column: 14, scope: !6493)
!6512 = !DILocation(line: 638, column: 23, scope: !6493)
!6513 = !DILocation(line: 638, column: 30, scope: !6493)
!6514 = !DILocation(line: 638, column: 28, scope: !6493)
!6515 = !DILocation(line: 638, column: 21, scope: !6493)
!6516 = !DILocation(line: 638, column: 2, scope: !6493)
!6517 = !DILocation(line: 638, column: 7, scope: !6493)
!6518 = !DILocation(line: 639, column: 9, scope: !6493)
!6519 = !DILocation(line: 639, column: 16, scope: !6493)
!6520 = !DILocation(line: 639, column: 14, scope: !6493)
!6521 = !DILocation(line: 639, column: 23, scope: !6493)
!6522 = !DILocation(line: 639, column: 30, scope: !6493)
!6523 = !DILocation(line: 639, column: 28, scope: !6493)
!6524 = !DILocation(line: 639, column: 21, scope: !6493)
!6525 = !DILocation(line: 639, column: 2, scope: !6493)
!6526 = !DILocation(line: 639, column: 7, scope: !6493)
!6527 = !DILocation(line: 640, column: 1, scope: !6493)
!6528 = distinct !DISubprogram(name: "madd_v3_v3fl", scope: !4142, file: !4142, line: 507, type: !6529, scopeLine: 508, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!6529 = !DISubroutineType(types: !6530)
!6530 = !{null, !170, !1865, !76}
!6531 = !DILocalVariable(name: "r", arg: 1, scope: !6528, file: !4142, line: 507, type: !170)
!6532 = !DILocation(line: 507, column: 33, scope: !6528)
!6533 = !DILocalVariable(name: "a", arg: 2, scope: !6528, file: !4142, line: 507, type: !1865)
!6534 = !DILocation(line: 507, column: 51, scope: !6528)
!6535 = !DILocalVariable(name: "f", arg: 3, scope: !6528, file: !4142, line: 507, type: !76)
!6536 = !DILocation(line: 507, column: 63, scope: !6528)
!6537 = !DILocation(line: 509, column: 10, scope: !6528)
!6538 = !DILocation(line: 509, column: 17, scope: !6528)
!6539 = !DILocation(line: 509, column: 15, scope: !6528)
!6540 = !DILocation(line: 509, column: 2, scope: !6528)
!6541 = !DILocation(line: 509, column: 7, scope: !6528)
!6542 = !DILocation(line: 510, column: 10, scope: !6528)
!6543 = !DILocation(line: 510, column: 17, scope: !6528)
!6544 = !DILocation(line: 510, column: 15, scope: !6528)
!6545 = !DILocation(line: 510, column: 2, scope: !6528)
!6546 = !DILocation(line: 510, column: 7, scope: !6528)
!6547 = !DILocation(line: 511, column: 10, scope: !6528)
!6548 = !DILocation(line: 511, column: 17, scope: !6528)
!6549 = !DILocation(line: 511, column: 15, scope: !6528)
!6550 = !DILocation(line: 511, column: 2, scope: !6528)
!6551 = !DILocation(line: 511, column: 7, scope: !6528)
!6552 = !DILocation(line: 512, column: 1, scope: !6528)
!6553 = distinct !DISubprogram(name: "normalize_v3_v3", scope: !4142, file: !4142, line: 788, type: !6554, scopeLine: 789, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!6554 = !DISubroutineType(types: !6555)
!6555 = !{!76, !170, !1865}
!6556 = !DILocalVariable(name: "r", arg: 1, scope: !6553, file: !4142, line: 788, type: !170)
!6557 = !DILocation(line: 788, column: 37, scope: !6553)
!6558 = !DILocalVariable(name: "a", arg: 2, scope: !6553, file: !4142, line: 788, type: !1865)
!6559 = !DILocation(line: 788, column: 55, scope: !6553)
!6560 = !DILocalVariable(name: "d", scope: !6553, file: !4142, line: 790, type: !76)
!6561 = !DILocation(line: 790, column: 8, scope: !6553)
!6562 = !DILocation(line: 790, column: 21, scope: !6553)
!6563 = !DILocation(line: 790, column: 24, scope: !6553)
!6564 = !DILocation(line: 790, column: 12, scope: !6553)
!6565 = !DILocation(line: 794, column: 6, scope: !6566)
!6566 = distinct !DILexicalBlock(scope: !6553, file: !4142, line: 794, column: 6)
!6567 = !DILocation(line: 794, column: 8, scope: !6566)
!6568 = !DILocation(line: 794, column: 6, scope: !6553)
!6569 = !DILocation(line: 795, column: 13, scope: !6570)
!6570 = distinct !DILexicalBlock(scope: !6566, file: !4142, line: 794, column: 20)
!6571 = !DILocation(line: 795, column: 7, scope: !6570)
!6572 = !DILocation(line: 795, column: 5, scope: !6570)
!6573 = !DILocation(line: 796, column: 15, scope: !6570)
!6574 = !DILocation(line: 796, column: 18, scope: !6570)
!6575 = !DILocation(line: 796, column: 28, scope: !6570)
!6576 = !DILocation(line: 796, column: 26, scope: !6570)
!6577 = !DILocation(line: 796, column: 3, scope: !6570)
!6578 = !DILocation(line: 797, column: 2, scope: !6570)
!6579 = !DILocation(line: 799, column: 11, scope: !6580)
!6580 = distinct !DILexicalBlock(scope: !6566, file: !4142, line: 798, column: 7)
!6581 = !DILocation(line: 799, column: 3, scope: !6580)
!6582 = !DILocation(line: 800, column: 5, scope: !6580)
!6583 = !DILocation(line: 803, column: 9, scope: !6553)
!6584 = !DILocation(line: 803, column: 2, scope: !6553)
!6585 = distinct !DISubprogram(name: "dot_v3v3", scope: !4142, file: !4142, line: 619, type: !4143, scopeLine: 620, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!6586 = !DILocalVariable(name: "a", arg: 1, scope: !6585, file: !4142, line: 619, type: !1865)
!6587 = !DILocation(line: 619, column: 36, scope: !6585)
!6588 = !DILocalVariable(name: "b", arg: 2, scope: !6585, file: !4142, line: 619, type: !1865)
!6589 = !DILocation(line: 619, column: 54, scope: !6585)
!6590 = !DILocation(line: 621, column: 9, scope: !6585)
!6591 = !DILocation(line: 621, column: 16, scope: !6585)
!6592 = !DILocation(line: 621, column: 14, scope: !6585)
!6593 = !DILocation(line: 621, column: 23, scope: !6585)
!6594 = !DILocation(line: 621, column: 30, scope: !6585)
!6595 = !DILocation(line: 621, column: 28, scope: !6585)
!6596 = !DILocation(line: 621, column: 21, scope: !6585)
!6597 = !DILocation(line: 621, column: 37, scope: !6585)
!6598 = !DILocation(line: 621, column: 44, scope: !6585)
!6599 = !DILocation(line: 621, column: 42, scope: !6585)
!6600 = !DILocation(line: 621, column: 35, scope: !6585)
!6601 = !DILocation(line: 621, column: 2, scope: !6585)
!6602 = distinct !DISubprogram(name: "mul_v3_v3fl", scope: !4142, file: !4142, line: 399, type: !6529, scopeLine: 400, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!6603 = !DILocalVariable(name: "r", arg: 1, scope: !6602, file: !4142, line: 399, type: !170)
!6604 = !DILocation(line: 399, column: 32, scope: !6602)
!6605 = !DILocalVariable(name: "a", arg: 2, scope: !6602, file: !4142, line: 399, type: !1865)
!6606 = !DILocation(line: 399, column: 50, scope: !6602)
!6607 = !DILocalVariable(name: "f", arg: 3, scope: !6602, file: !4142, line: 399, type: !76)
!6608 = !DILocation(line: 399, column: 62, scope: !6602)
!6609 = !DILocation(line: 401, column: 9, scope: !6602)
!6610 = !DILocation(line: 401, column: 16, scope: !6602)
!6611 = !DILocation(line: 401, column: 14, scope: !6602)
!6612 = !DILocation(line: 401, column: 2, scope: !6602)
!6613 = !DILocation(line: 401, column: 7, scope: !6602)
!6614 = !DILocation(line: 402, column: 9, scope: !6602)
!6615 = !DILocation(line: 402, column: 16, scope: !6602)
!6616 = !DILocation(line: 402, column: 14, scope: !6602)
!6617 = !DILocation(line: 402, column: 2, scope: !6602)
!6618 = !DILocation(line: 402, column: 7, scope: !6602)
!6619 = !DILocation(line: 403, column: 9, scope: !6602)
!6620 = !DILocation(line: 403, column: 16, scope: !6602)
!6621 = !DILocation(line: 403, column: 14, scope: !6602)
!6622 = !DILocation(line: 403, column: 2, scope: !6602)
!6623 = !DILocation(line: 403, column: 7, scope: !6602)
!6624 = !DILocation(line: 404, column: 1, scope: !6602)
!6625 = distinct !DISubprogram(name: "project_to_edge", scope: !1, file: !1, line: 892, type: !6626, scopeLine: 893, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!6626 = !DISubroutineType(types: !6627)
!6627 = !{null, !138, !1865, !1865, !170}
!6628 = !DILocalVariable(name: "e", arg: 1, scope: !6625, file: !1, line: 892, type: !138)
!6629 = !DILocation(line: 892, column: 37, scope: !6625)
!6630 = !DILocalVariable(name: "co_a", arg: 2, scope: !6625, file: !1, line: 892, type: !1865)
!6631 = !DILocation(line: 892, column: 52, scope: !6625)
!6632 = !DILocalVariable(name: "co_b", arg: 3, scope: !6625, file: !1, line: 892, type: !1865)
!6633 = !DILocation(line: 892, column: 73, scope: !6625)
!6634 = !DILocalVariable(name: "projco", arg: 4, scope: !6625, file: !1, line: 892, type: !170)
!6635 = !DILocation(line: 892, column: 88, scope: !6625)
!6636 = !DILocalVariable(name: "otherco", scope: !6625, file: !1, line: 894, type: !75)
!6637 = !DILocation(line: 894, column: 8, scope: !6625)
!6638 = !DILocation(line: 896, column: 26, scope: !6639)
!6639 = distinct !DILexicalBlock(scope: !6625, file: !1, line: 896, column: 6)
!6640 = !DILocation(line: 896, column: 29, scope: !6639)
!6641 = !DILocation(line: 896, column: 33, scope: !6639)
!6642 = !DILocation(line: 896, column: 37, scope: !6639)
!6643 = !DILocation(line: 896, column: 40, scope: !6639)
!6644 = !DILocation(line: 896, column: 44, scope: !6639)
!6645 = !DILocation(line: 896, column: 48, scope: !6639)
!6646 = !DILocation(line: 896, column: 54, scope: !6639)
!6647 = !DILocation(line: 896, column: 60, scope: !6639)
!6648 = !DILocation(line: 896, column: 68, scope: !6639)
!6649 = !DILocation(line: 896, column: 7, scope: !6639)
!6650 = !DILocation(line: 896, column: 6, scope: !6625)
!6651 = !DILocation(line: 900, column: 14, scope: !6652)
!6652 = distinct !DILexicalBlock(scope: !6639, file: !1, line: 896, column: 78)
!6653 = !DILocation(line: 900, column: 22, scope: !6652)
!6654 = !DILocation(line: 900, column: 25, scope: !6652)
!6655 = !DILocation(line: 900, column: 29, scope: !6652)
!6656 = !DILocation(line: 900, column: 3, scope: !6652)
!6657 = !DILocation(line: 901, column: 2, scope: !6652)
!6658 = !DILocation(line: 902, column: 1, scope: !6625)
!6659 = distinct !DISubprogram(name: "add_v3_v3v3", scope: !4142, file: !4142, line: 309, type: !4160, scopeLine: 310, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!6660 = !DILocalVariable(name: "r", arg: 1, scope: !6659, file: !4142, line: 309, type: !170)
!6661 = !DILocation(line: 309, column: 32, scope: !6659)
!6662 = !DILocalVariable(name: "a", arg: 2, scope: !6659, file: !4142, line: 309, type: !1865)
!6663 = !DILocation(line: 309, column: 50, scope: !6659)
!6664 = !DILocalVariable(name: "b", arg: 3, scope: !6659, file: !4142, line: 309, type: !1865)
!6665 = !DILocation(line: 309, column: 68, scope: !6659)
!6666 = !DILocation(line: 311, column: 9, scope: !6659)
!6667 = !DILocation(line: 311, column: 16, scope: !6659)
!6668 = !DILocation(line: 311, column: 14, scope: !6659)
!6669 = !DILocation(line: 311, column: 2, scope: !6659)
!6670 = !DILocation(line: 311, column: 7, scope: !6659)
!6671 = !DILocation(line: 312, column: 9, scope: !6659)
!6672 = !DILocation(line: 312, column: 16, scope: !6659)
!6673 = !DILocation(line: 312, column: 14, scope: !6659)
!6674 = !DILocation(line: 312, column: 2, scope: !6659)
!6675 = !DILocation(line: 312, column: 7, scope: !6659)
!6676 = !DILocation(line: 313, column: 9, scope: !6659)
!6677 = !DILocation(line: 313, column: 16, scope: !6659)
!6678 = !DILocation(line: 313, column: 14, scope: !6659)
!6679 = !DILocation(line: 313, column: 2, scope: !6659)
!6680 = !DILocation(line: 313, column: 7, scope: !6659)
!6681 = !DILocation(line: 314, column: 1, scope: !6659)
!6682 = distinct !DISubprogram(name: "make_unit_square_map", scope: !1, file: !1, line: 1058, type: !6683, scopeLine: 1060, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!6683 = !DISubroutineType(types: !6684)
!6684 = !{!152, !1865, !1865, !1865, !6685}
!6685 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6686, size: 64)
!6686 = !DICompositeType(tag: DW_TAG_array_type, baseType: !76, size: 128, elements: !6687)
!6687 = !{!5336}
!6688 = !DILocalVariable(name: "va", arg: 1, scope: !6682, file: !1, line: 1058, type: !1865)
!6689 = !DILocation(line: 1058, column: 46, scope: !6682)
!6690 = !DILocalVariable(name: "vmid", arg: 2, scope: !6682, file: !1, line: 1058, type: !1865)
!6691 = !DILocation(line: 1058, column: 65, scope: !6682)
!6692 = !DILocalVariable(name: "vb", arg: 3, scope: !6682, file: !1, line: 1058, type: !1865)
!6693 = !DILocation(line: 1058, column: 86, scope: !6682)
!6694 = !DILocalVariable(name: "r_mat", arg: 4, scope: !6682, file: !1, line: 1059, type: !6685)
!6695 = !DILocation(line: 1059, column: 40, scope: !6682)
!6696 = !DILocalVariable(name: "vo", scope: !6682, file: !1, line: 1061, type: !75)
!6697 = !DILocation(line: 1061, column: 8, scope: !6682)
!6698 = !DILocalVariable(name: "vd", scope: !6682, file: !1, line: 1061, type: !75)
!6699 = !DILocation(line: 1061, column: 15, scope: !6682)
!6700 = !DILocalVariable(name: "vb_vmid", scope: !6682, file: !1, line: 1061, type: !75)
!6701 = !DILocation(line: 1061, column: 22, scope: !6682)
!6702 = !DILocalVariable(name: "va_vmid", scope: !6682, file: !1, line: 1061, type: !75)
!6703 = !DILocation(line: 1061, column: 34, scope: !6682)
!6704 = !DILocalVariable(name: "vddir", scope: !6682, file: !1, line: 1061, type: !75)
!6705 = !DILocation(line: 1061, column: 46, scope: !6682)
!6706 = !DILocation(line: 1063, column: 14, scope: !6682)
!6707 = !DILocation(line: 1063, column: 23, scope: !6682)
!6708 = !DILocation(line: 1063, column: 29, scope: !6682)
!6709 = !DILocation(line: 1063, column: 2, scope: !6682)
!6710 = !DILocation(line: 1064, column: 14, scope: !6682)
!6711 = !DILocation(line: 1064, column: 23, scope: !6682)
!6712 = !DILocation(line: 1064, column: 29, scope: !6682)
!6713 = !DILocation(line: 1064, column: 2, scope: !6682)
!6714 = !DILocation(line: 1065, column: 23, scope: !6715)
!6715 = distinct !DILexicalBlock(scope: !6682, file: !1, line: 1065, column: 6)
!6716 = !DILocation(line: 1065, column: 32, scope: !6715)
!6717 = !DILocation(line: 1065, column: 12, scope: !6715)
!6718 = !DILocation(line: 1065, column: 41, scope: !6715)
!6719 = !DILocation(line: 1065, column: 6, scope: !6715)
!6720 = !DILocation(line: 1065, column: 56, scope: !6715)
!6721 = !DILocation(line: 1065, column: 6, scope: !6682)
!6722 = !DILocation(line: 1066, column: 15, scope: !6723)
!6723 = distinct !DILexicalBlock(scope: !6715, file: !1, line: 1065, column: 82)
!6724 = !DILocation(line: 1066, column: 19, scope: !6723)
!6725 = !DILocation(line: 1066, column: 23, scope: !6723)
!6726 = !DILocation(line: 1066, column: 3, scope: !6723)
!6727 = !DILocation(line: 1067, column: 17, scope: !6723)
!6728 = !DILocation(line: 1067, column: 24, scope: !6723)
!6729 = !DILocation(line: 1067, column: 33, scope: !6723)
!6730 = !DILocation(line: 1067, column: 3, scope: !6723)
!6731 = !DILocation(line: 1068, column: 16, scope: !6723)
!6732 = !DILocation(line: 1068, column: 3, scope: !6723)
!6733 = !DILocation(line: 1069, column: 15, scope: !6723)
!6734 = !DILocation(line: 1069, column: 19, scope: !6723)
!6735 = !DILocation(line: 1069, column: 23, scope: !6723)
!6736 = !DILocation(line: 1069, column: 3, scope: !6723)
!6737 = !DILocation(line: 1074, column: 16, scope: !6723)
!6738 = !DILocation(line: 1074, column: 29, scope: !6723)
!6739 = !DILocation(line: 1074, column: 35, scope: !6723)
!6740 = !DILocation(line: 1074, column: 3, scope: !6723)
!6741 = !DILocation(line: 1075, column: 3, scope: !6723)
!6742 = !DILocation(line: 1075, column: 15, scope: !6723)
!6743 = !DILocation(line: 1076, column: 16, scope: !6723)
!6744 = !DILocation(line: 1076, column: 29, scope: !6723)
!6745 = !DILocation(line: 1076, column: 35, scope: !6723)
!6746 = !DILocation(line: 1076, column: 3, scope: !6723)
!6747 = !DILocation(line: 1077, column: 3, scope: !6723)
!6748 = !DILocation(line: 1077, column: 15, scope: !6723)
!6749 = !DILocation(line: 1078, column: 16, scope: !6723)
!6750 = !DILocation(line: 1078, column: 29, scope: !6723)
!6751 = !DILocation(line: 1078, column: 35, scope: !6723)
!6752 = !DILocation(line: 1078, column: 3, scope: !6723)
!6753 = !DILocation(line: 1079, column: 14, scope: !6723)
!6754 = !DILocation(line: 1079, column: 27, scope: !6723)
!6755 = !DILocation(line: 1079, column: 3, scope: !6723)
!6756 = !DILocation(line: 1080, column: 14, scope: !6723)
!6757 = !DILocation(line: 1080, column: 27, scope: !6723)
!6758 = !DILocation(line: 1080, column: 3, scope: !6723)
!6759 = !DILocation(line: 1081, column: 3, scope: !6723)
!6760 = !DILocation(line: 1081, column: 15, scope: !6723)
!6761 = !DILocation(line: 1082, column: 16, scope: !6723)
!6762 = !DILocation(line: 1082, column: 29, scope: !6723)
!6763 = !DILocation(line: 1082, column: 33, scope: !6723)
!6764 = !DILocation(line: 1082, column: 3, scope: !6723)
!6765 = !DILocation(line: 1083, column: 14, scope: !6723)
!6766 = !DILocation(line: 1083, column: 27, scope: !6723)
!6767 = !DILocation(line: 1083, column: 3, scope: !6723)
!6768 = !DILocation(line: 1084, column: 3, scope: !6723)
!6769 = !DILocation(line: 1084, column: 15, scope: !6723)
!6770 = !DILocation(line: 1086, column: 3, scope: !6723)
!6771 = !DILocation(line: 1089, column: 3, scope: !6715)
!6772 = !DILocation(line: 1090, column: 1, scope: !6682)
!6773 = distinct !DISubprogram(name: "is_zero_v3", scope: !4142, file: !4142, line: 857, type: !6774, scopeLine: 858, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!6774 = !DISubroutineType(types: !6775)
!6775 = !{!152, !1865}
!6776 = !DILocalVariable(name: "v", arg: 1, scope: !6773, file: !4142, line: 857, type: !1865)
!6777 = !DILocation(line: 857, column: 37, scope: !6773)
!6778 = !DILocation(line: 859, column: 10, scope: !6773)
!6779 = !DILocation(line: 859, column: 15, scope: !6773)
!6780 = !DILocation(line: 859, column: 23, scope: !6773)
!6781 = !DILocation(line: 859, column: 26, scope: !6773)
!6782 = !DILocation(line: 859, column: 31, scope: !6773)
!6783 = !DILocation(line: 859, column: 39, scope: !6773)
!6784 = !DILocation(line: 859, column: 42, scope: !6773)
!6785 = !DILocation(line: 859, column: 47, scope: !6773)
!6786 = !DILocation(line: 0, scope: !6773)
!6787 = !DILocation(line: 859, column: 9, scope: !6773)
!6788 = !DILocation(line: 859, column: 2, scope: !6773)
!6789 = distinct !DISubprogram(name: "sub_v3_v3", scope: !4142, file: !4142, line: 350, type: !6465, scopeLine: 351, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!6790 = !DILocalVariable(name: "r", arg: 1, scope: !6789, file: !4142, line: 350, type: !170)
!6791 = !DILocation(line: 350, column: 30, scope: !6789)
!6792 = !DILocalVariable(name: "a", arg: 2, scope: !6789, file: !4142, line: 350, type: !1865)
!6793 = !DILocation(line: 350, column: 48, scope: !6789)
!6794 = !DILocation(line: 352, column: 10, scope: !6789)
!6795 = !DILocation(line: 352, column: 2, scope: !6789)
!6796 = !DILocation(line: 352, column: 7, scope: !6789)
!6797 = !DILocation(line: 353, column: 10, scope: !6789)
!6798 = !DILocation(line: 353, column: 2, scope: !6789)
!6799 = !DILocation(line: 353, column: 7, scope: !6789)
!6800 = !DILocation(line: 354, column: 10, scope: !6789)
!6801 = !DILocation(line: 354, column: 2, scope: !6789)
!6802 = !DILocation(line: 354, column: 7, scope: !6789)
!6803 = !DILocation(line: 355, column: 1, scope: !6789)
!6804 = distinct !DISubprogram(name: "max_ff", scope: !3863, file: !3863, line: 206, type: !6805, scopeLine: 207, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!6805 = !DISubroutineType(types: !6806)
!6806 = !{!76, !76, !76}
!6807 = !DILocalVariable(name: "a", arg: 1, scope: !6804, file: !3863, line: 206, type: !76)
!6808 = !DILocation(line: 206, column: 28, scope: !6804)
!6809 = !DILocalVariable(name: "b", arg: 2, scope: !6804, file: !3863, line: 206, type: !76)
!6810 = !DILocation(line: 206, column: 37, scope: !6804)
!6811 = !DILocation(line: 208, column: 10, scope: !6804)
!6812 = !DILocation(line: 208, column: 14, scope: !6804)
!6813 = !DILocation(line: 208, column: 12, scope: !6804)
!6814 = !DILocation(line: 208, column: 9, scope: !6804)
!6815 = !DILocation(line: 208, column: 19, scope: !6804)
!6816 = !DILocation(line: 208, column: 23, scope: !6804)
!6817 = !DILocation(line: 208, column: 2, scope: !6804)
!6818 = distinct !DISubprogram(name: "negate_v3", scope: !4142, file: !4142, line: 576, type: !6482, scopeLine: 577, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!6819 = !DILocalVariable(name: "r", arg: 1, scope: !6818, file: !4142, line: 576, type: !170)
!6820 = !DILocation(line: 576, column: 30, scope: !6818)
!6821 = !DILocation(line: 578, column: 10, scope: !6818)
!6822 = !DILocation(line: 578, column: 9, scope: !6818)
!6823 = !DILocation(line: 578, column: 2, scope: !6818)
!6824 = !DILocation(line: 578, column: 7, scope: !6818)
!6825 = !DILocation(line: 579, column: 10, scope: !6818)
!6826 = !DILocation(line: 579, column: 9, scope: !6818)
!6827 = !DILocation(line: 579, column: 2, scope: !6818)
!6828 = !DILocation(line: 579, column: 7, scope: !6818)
!6829 = !DILocation(line: 580, column: 10, scope: !6818)
!6830 = !DILocation(line: 580, column: 9, scope: !6818)
!6831 = !DILocation(line: 580, column: 2, scope: !6818)
!6832 = !DILocation(line: 580, column: 7, scope: !6818)
!6833 = !DILocation(line: 581, column: 1, scope: !6818)
!6834 = distinct !DISubprogram(name: "is_outside_edge", scope: !1, file: !1, line: 563, type: !6835, scopeLine: 564, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!6835 = !DISubroutineType(types: !6836)
!6836 = !{!152, !130, !1865, !341}
!6837 = !DILocalVariable(name: "e", arg: 1, scope: !6834, file: !1, line: 563, type: !130)
!6838 = !DILocation(line: 563, column: 39, scope: !6834)
!6839 = !DILocalVariable(name: "co", arg: 2, scope: !6834, file: !1, line: 563, type: !1865)
!6840 = !DILocation(line: 563, column: 54, scope: !6834)
!6841 = !DILocalVariable(name: "ret_closer_v", arg: 3, scope: !6834, file: !1, line: 563, type: !341)
!6842 = !DILocation(line: 563, column: 70, scope: !6834)
!6843 = !DILocalVariable(name: "d_squared", scope: !6834, file: !1, line: 565, type: !76)
!6844 = !DILocation(line: 565, column: 8, scope: !6834)
!6845 = !DILocation(line: 567, column: 46, scope: !6834)
!6846 = !DILocation(line: 567, column: 50, scope: !6834)
!6847 = !DILocation(line: 567, column: 53, scope: !6834)
!6848 = !DILocation(line: 567, column: 56, scope: !6834)
!6849 = !DILocation(line: 567, column: 60, scope: !6834)
!6850 = !DILocation(line: 567, column: 64, scope: !6834)
!6851 = !DILocation(line: 567, column: 67, scope: !6834)
!6852 = !DILocation(line: 567, column: 70, scope: !6834)
!6853 = !DILocation(line: 567, column: 74, scope: !6834)
!6854 = !DILocation(line: 567, column: 14, scope: !6834)
!6855 = !DILocation(line: 567, column: 12, scope: !6834)
!6856 = !DILocation(line: 568, column: 6, scope: !6857)
!6857 = distinct !DILexicalBlock(scope: !6834, file: !1, line: 568, column: 6)
!6858 = !DILocation(line: 568, column: 16, scope: !6857)
!6859 = !DILocation(line: 568, column: 6, scope: !6834)
!6860 = !DILocation(line: 569, column: 24, scope: !6861)
!6861 = distinct !DILexicalBlock(scope: !6862, file: !1, line: 569, column: 7)
!6862 = distinct !DILexicalBlock(scope: !6857, file: !1, line: 568, column: 57)
!6863 = !DILocation(line: 569, column: 28, scope: !6861)
!6864 = !DILocation(line: 569, column: 31, scope: !6861)
!6865 = !DILocation(line: 569, column: 34, scope: !6861)
!6866 = !DILocation(line: 569, column: 38, scope: !6861)
!6867 = !DILocation(line: 569, column: 7, scope: !6861)
!6868 = !DILocation(line: 569, column: 61, scope: !6861)
!6869 = !DILocation(line: 569, column: 65, scope: !6861)
!6870 = !DILocation(line: 569, column: 68, scope: !6861)
!6871 = !DILocation(line: 569, column: 71, scope: !6861)
!6872 = !DILocation(line: 569, column: 75, scope: !6861)
!6873 = !DILocation(line: 569, column: 44, scope: !6861)
!6874 = !DILocation(line: 569, column: 42, scope: !6861)
!6875 = !DILocation(line: 569, column: 7, scope: !6862)
!6876 = !DILocation(line: 570, column: 20, scope: !6861)
!6877 = !DILocation(line: 570, column: 23, scope: !6861)
!6878 = !DILocation(line: 570, column: 26, scope: !6861)
!6879 = !DILocation(line: 570, column: 5, scope: !6861)
!6880 = !DILocation(line: 570, column: 18, scope: !6861)
!6881 = !DILocation(line: 570, column: 4, scope: !6861)
!6882 = !DILocation(line: 572, column: 20, scope: !6861)
!6883 = !DILocation(line: 572, column: 23, scope: !6861)
!6884 = !DILocation(line: 572, column: 26, scope: !6861)
!6885 = !DILocation(line: 572, column: 5, scope: !6861)
!6886 = !DILocation(line: 572, column: 18, scope: !6861)
!6887 = !DILocation(line: 573, column: 3, scope: !6862)
!6888 = !DILocation(line: 576, column: 3, scope: !6889)
!6889 = distinct !DILexicalBlock(scope: !6857, file: !1, line: 575, column: 7)
!6890 = !DILocation(line: 578, column: 1, scope: !6834)
!6891 = distinct !DISubprogram(name: "len_squared_v3v3", scope: !4142, file: !4142, line: 727, type: !4143, scopeLine: 728, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!6892 = !DILocalVariable(name: "a", arg: 1, scope: !6891, file: !4142, line: 727, type: !1865)
!6893 = !DILocation(line: 727, column: 44, scope: !6891)
!6894 = !DILocalVariable(name: "b", arg: 2, scope: !6891, file: !4142, line: 727, type: !1865)
!6895 = !DILocation(line: 727, column: 62, scope: !6891)
!6896 = !DILocalVariable(name: "d", scope: !6891, file: !4142, line: 729, type: !75)
!6897 = !DILocation(line: 729, column: 8, scope: !6891)
!6898 = !DILocation(line: 731, column: 14, scope: !6891)
!6899 = !DILocation(line: 731, column: 17, scope: !6891)
!6900 = !DILocation(line: 731, column: 20, scope: !6891)
!6901 = !DILocation(line: 731, column: 2, scope: !6891)
!6902 = !DILocation(line: 732, column: 18, scope: !6891)
!6903 = !DILocation(line: 732, column: 21, scope: !6891)
!6904 = !DILocation(line: 732, column: 9, scope: !6891)
!6905 = !DILocation(line: 732, column: 2, scope: !6891)
!6906 = distinct !DISubprogram(name: "other_edge_half_visited", scope: !1, file: !1, line: 298, type: !6907, scopeLine: 299, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!6907 = !DISubroutineType(types: !6908)
!6908 = !{!152, !801, !130}
!6909 = !DILocalVariable(name: "bp", arg: 1, scope: !6906, file: !1, line: 298, type: !801)
!6910 = !DILocation(line: 298, column: 50, scope: !6906)
!6911 = !DILocalVariable(name: "e", arg: 2, scope: !6906, file: !1, line: 298, type: !130)
!6912 = !DILocation(line: 298, column: 64, scope: !6906)
!6913 = !DILocalVariable(name: "bvo", scope: !6906, file: !1, line: 300, type: !283)
!6914 = !DILocation(line: 300, column: 11, scope: !6906)
!6915 = !DILocation(line: 302, column: 21, scope: !6906)
!6916 = !DILocation(line: 302, column: 25, scope: !6906)
!6917 = !DILocation(line: 302, column: 28, scope: !6906)
!6918 = !DILocation(line: 302, column: 37, scope: !6906)
!6919 = !DILocation(line: 302, column: 40, scope: !6906)
!6920 = !DILocation(line: 302, column: 43, scope: !6906)
!6921 = !DILocation(line: 302, column: 48, scope: !6906)
!6922 = !DILocation(line: 302, column: 51, scope: !6906)
!6923 = !DILocation(line: 302, column: 54, scope: !6906)
!6924 = !DILocation(line: 302, column: 8, scope: !6906)
!6925 = !DILocation(line: 302, column: 6, scope: !6906)
!6926 = !DILocation(line: 303, column: 6, scope: !6927)
!6927 = distinct !DILexicalBlock(scope: !6906, file: !1, line: 303, column: 6)
!6928 = !DILocation(line: 303, column: 6, scope: !6906)
!6929 = !DILocation(line: 304, column: 10, scope: !6927)
!6930 = !DILocation(line: 304, column: 15, scope: !6927)
!6931 = !DILocation(line: 304, column: 3, scope: !6927)
!6932 = !DILocation(line: 306, column: 3, scope: !6927)
!6933 = !DILocation(line: 307, column: 1, scope: !6906)
!6934 = distinct !DISubprogram(name: "offset_meet_edge", scope: !1, file: !1, line: 693, type: !6935, scopeLine: 694, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!6935 = !DISubroutineType(types: !6936)
!6936 = !{!152, !130, !130, !51, !170, !170}
!6937 = !DILocalVariable(name: "e1", arg: 1, scope: !6934, file: !1, line: 693, type: !130)
!6938 = !DILocation(line: 693, column: 40, scope: !6934)
!6939 = !DILocalVariable(name: "e2", arg: 2, scope: !6934, file: !1, line: 693, type: !130)
!6940 = !DILocation(line: 693, column: 54, scope: !6934)
!6941 = !DILocalVariable(name: "v", arg: 3, scope: !6934, file: !1, line: 693, type: !51)
!6942 = !DILocation(line: 693, column: 66, scope: !6934)
!6943 = !DILocalVariable(name: "meetco", arg: 4, scope: !6934, file: !1, line: 693, type: !170)
!6944 = !DILocation(line: 693, column: 76, scope: !6934)
!6945 = !DILocalVariable(name: "r_angle", arg: 5, scope: !6934, file: !1, line: 693, type: !170)
!6946 = !DILocation(line: 693, column: 94, scope: !6934)
!6947 = !DILocalVariable(name: "dir1", scope: !6934, file: !1, line: 695, type: !75)
!6948 = !DILocation(line: 695, column: 8, scope: !6934)
!6949 = !DILocalVariable(name: "dir2", scope: !6934, file: !1, line: 695, type: !75)
!6950 = !DILocation(line: 695, column: 17, scope: !6934)
!6951 = !DILocalVariable(name: "fno", scope: !6934, file: !1, line: 695, type: !75)
!6952 = !DILocation(line: 695, column: 26, scope: !6934)
!6953 = !DILocalVariable(name: "ang", scope: !6934, file: !1, line: 695, type: !76)
!6954 = !DILocation(line: 695, column: 34, scope: !6934)
!6955 = !DILocalVariable(name: "sinang", scope: !6934, file: !1, line: 695, type: !76)
!6956 = !DILocation(line: 695, column: 39, scope: !6934)
!6957 = !DILocation(line: 697, column: 14, scope: !6934)
!6958 = !DILocation(line: 697, column: 39, scope: !6934)
!6959 = !DILocation(line: 697, column: 43, scope: !6934)
!6960 = !DILocation(line: 697, column: 46, scope: !6934)
!6961 = !DILocation(line: 697, column: 20, scope: !6934)
!6962 = !DILocation(line: 697, column: 50, scope: !6934)
!6963 = !DILocation(line: 697, column: 54, scope: !6934)
!6964 = !DILocation(line: 697, column: 57, scope: !6934)
!6965 = !DILocation(line: 697, column: 2, scope: !6934)
!6966 = !DILocation(line: 698, column: 14, scope: !6934)
!6967 = !DILocation(line: 698, column: 39, scope: !6934)
!6968 = !DILocation(line: 698, column: 43, scope: !6934)
!6969 = !DILocation(line: 698, column: 46, scope: !6934)
!6970 = !DILocation(line: 698, column: 20, scope: !6934)
!6971 = !DILocation(line: 698, column: 50, scope: !6934)
!6972 = !DILocation(line: 698, column: 54, scope: !6934)
!6973 = !DILocation(line: 698, column: 57, scope: !6934)
!6974 = !DILocation(line: 698, column: 2, scope: !6934)
!6975 = !DILocation(line: 699, column: 15, scope: !6934)
!6976 = !DILocation(line: 699, column: 2, scope: !6934)
!6977 = !DILocation(line: 700, column: 15, scope: !6934)
!6978 = !DILocation(line: 700, column: 2, scope: !6934)
!6979 = !DILocation(line: 703, column: 30, scope: !6934)
!6980 = !DILocation(line: 703, column: 36, scope: !6934)
!6981 = !DILocation(line: 703, column: 8, scope: !6934)
!6982 = !DILocation(line: 703, column: 6, scope: !6934)
!6983 = !DILocation(line: 704, column: 6, scope: !6984)
!6984 = distinct !DILexicalBlock(scope: !6934, file: !1, line: 704, column: 6)
!6985 = !DILocation(line: 704, column: 10, scope: !6984)
!6986 = !DILocation(line: 704, column: 6, scope: !6934)
!6987 = !DILocation(line: 705, column: 7, scope: !6988)
!6988 = distinct !DILexicalBlock(scope: !6989, file: !1, line: 705, column: 7)
!6989 = distinct !DILexicalBlock(scope: !6984, file: !1, line: 704, column: 27)
!6990 = !DILocation(line: 705, column: 7, scope: !6989)
!6991 = !DILocation(line: 706, column: 5, scope: !6988)
!6992 = !DILocation(line: 706, column: 13, scope: !6988)
!6993 = !DILocation(line: 706, column: 4, scope: !6988)
!6994 = !DILocation(line: 707, column: 3, scope: !6989)
!6995 = !DILocation(line: 709, column: 16, scope: !6934)
!6996 = !DILocation(line: 709, column: 21, scope: !6934)
!6997 = !DILocation(line: 709, column: 27, scope: !6934)
!6998 = !DILocation(line: 709, column: 2, scope: !6934)
!6999 = !DILocation(line: 710, column: 15, scope: !7000)
!7000 = distinct !DILexicalBlock(scope: !6934, file: !1, line: 710, column: 6)
!7001 = !DILocation(line: 710, column: 20, scope: !7000)
!7002 = !DILocation(line: 710, column: 23, scope: !7000)
!7003 = !DILocation(line: 710, column: 6, scope: !7000)
!7004 = !DILocation(line: 710, column: 27, scope: !7000)
!7005 = !DILocation(line: 710, column: 6, scope: !6934)
!7006 = !DILocation(line: 711, column: 30, scope: !7000)
!7007 = !DILocation(line: 711, column: 28, scope: !7000)
!7008 = !DILocation(line: 711, column: 7, scope: !7000)
!7009 = !DILocation(line: 711, column: 3, scope: !7000)
!7010 = !DILocation(line: 712, column: 6, scope: !7011)
!7011 = distinct !DILexicalBlock(scope: !6934, file: !1, line: 712, column: 6)
!7012 = !DILocation(line: 712, column: 6, scope: !6934)
!7013 = !DILocation(line: 713, column: 14, scope: !7011)
!7014 = !DILocation(line: 713, column: 4, scope: !7011)
!7015 = !DILocation(line: 713, column: 12, scope: !7011)
!7016 = !DILocation(line: 713, column: 3, scope: !7011)
!7017 = !DILocation(line: 715, column: 6, scope: !7018)
!7018 = distinct !DILexicalBlock(scope: !6934, file: !1, line: 715, column: 6)
!7019 = !DILocation(line: 715, column: 10, scope: !7018)
!7020 = !DILocation(line: 715, column: 24, scope: !7018)
!7021 = !DILocation(line: 715, column: 6, scope: !6934)
!7022 = !DILocation(line: 716, column: 3, scope: !7018)
!7023 = !DILocation(line: 718, column: 16, scope: !6934)
!7024 = !DILocation(line: 718, column: 11, scope: !6934)
!7025 = !DILocation(line: 718, column: 9, scope: !6934)
!7026 = !DILocation(line: 719, column: 13, scope: !6934)
!7027 = !DILocation(line: 719, column: 21, scope: !6934)
!7028 = !DILocation(line: 719, column: 24, scope: !6934)
!7029 = !DILocation(line: 719, column: 2, scope: !6934)
!7030 = !DILocation(line: 720, column: 6, scope: !7031)
!7031 = distinct !DILexicalBlock(scope: !6934, file: !1, line: 720, column: 6)
!7032 = !DILocation(line: 720, column: 10, scope: !7031)
!7033 = !DILocation(line: 720, column: 19, scope: !7031)
!7034 = !DILocation(line: 720, column: 6, scope: !6934)
!7035 = !DILocation(line: 721, column: 16, scope: !7031)
!7036 = !DILocation(line: 721, column: 24, scope: !7031)
!7037 = !DILocation(line: 721, column: 30, scope: !7031)
!7038 = !DILocation(line: 721, column: 34, scope: !7031)
!7039 = !DILocation(line: 721, column: 45, scope: !7031)
!7040 = !DILocation(line: 721, column: 43, scope: !7031)
!7041 = !DILocation(line: 721, column: 3, scope: !7031)
!7042 = !DILocation(line: 723, column: 16, scope: !7031)
!7043 = !DILocation(line: 723, column: 24, scope: !7031)
!7044 = !DILocation(line: 723, column: 30, scope: !7031)
!7045 = !DILocation(line: 723, column: 34, scope: !7031)
!7046 = !DILocation(line: 723, column: 45, scope: !7031)
!7047 = !DILocation(line: 723, column: 43, scope: !7031)
!7048 = !DILocation(line: 723, column: 3, scope: !7031)
!7049 = !DILocation(line: 724, column: 2, scope: !6934)
!7050 = !DILocation(line: 725, column: 1, scope: !6934)
!7051 = distinct !DISubprogram(name: "len_v3", scope: !4142, file: !4142, line: 714, type: !7052, scopeLine: 715, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!7052 = !DISubroutineType(types: !7053)
!7053 = !{!76, !1865}
!7054 = !DILocalVariable(name: "a", arg: 1, scope: !7051, file: !4142, line: 714, type: !1865)
!7055 = !DILocation(line: 714, column: 34, scope: !7051)
!7056 = !DILocation(line: 716, column: 24, scope: !7051)
!7057 = !DILocation(line: 716, column: 27, scope: !7051)
!7058 = !DILocation(line: 716, column: 15, scope: !7051)
!7059 = !DILocation(line: 716, column: 9, scope: !7051)
!7060 = !DILocation(line: 716, column: 2, scope: !7051)
!7061 = distinct !DISubprogram(name: "BLI_ghashIterator_done", scope: !303, file: !303, line: 98, type: !7062, scopeLine: 98, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!7062 = !DISubroutineType(types: !7063)
!7063 = !{!152, !7064}
!7064 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2546, size: 64)
!7065 = !DILocalVariable(name: "ghi", arg: 1, scope: !7061, file: !303, line: 98, type: !7064)
!7066 = !DILocation(line: 98, column: 57, scope: !7061)
!7067 = !DILocation(line: 98, column: 78, scope: !7061)
!7068 = !DILocation(line: 98, column: 83, scope: !7061)
!7069 = !DILocation(line: 98, column: 77, scope: !7061)
!7070 = !DILocation(line: 98, column: 70, scope: !7061)
!7071 = distinct !DISubprogram(name: "BLI_ghashIterator_getValue", scope: !303, file: !303, line: 96, type: !7072, scopeLine: 96, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!7072 = !DISubroutineType(types: !7073)
!7073 = !{!61, !7064}
!7074 = !DILocalVariable(name: "ghi", arg: 1, scope: !7071, file: !303, line: 96, type: !7064)
!7075 = !DILocation(line: 96, column: 61, scope: !7071)
!7076 = !DILocation(line: 96, column: 99, scope: !7071)
!7077 = !DILocation(line: 96, column: 104, scope: !7071)
!7078 = !DILocation(line: 96, column: 115, scope: !7071)
!7079 = !DILocation(line: 96, column: 70, scope: !7071)
!7080 = distinct !DISubprogram(name: "any_edge_half_offset_changed", scope: !1, file: !1, line: 315, type: !7081, scopeLine: 316, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!7081 = !DISubroutineType(types: !7082)
!7082 = !{!152, !283}
!7083 = !DILocalVariable(name: "bv", arg: 1, scope: !7080, file: !1, line: 315, type: !283)
!7084 = !DILocation(line: 315, column: 51, scope: !7080)
!7085 = !DILocalVariable(name: "i", scope: !7080, file: !1, line: 317, type: !63)
!7086 = !DILocation(line: 317, column: 6, scope: !7080)
!7087 = !DILocation(line: 319, column: 9, scope: !7088)
!7088 = distinct !DILexicalBlock(scope: !7080, file: !1, line: 319, column: 2)
!7089 = !DILocation(line: 319, column: 7, scope: !7088)
!7090 = !DILocation(line: 319, column: 14, scope: !7091)
!7091 = distinct !DILexicalBlock(scope: !7088, file: !1, line: 319, column: 2)
!7092 = !DILocation(line: 319, column: 18, scope: !7091)
!7093 = !DILocation(line: 319, column: 22, scope: !7091)
!7094 = !DILocation(line: 319, column: 16, scope: !7091)
!7095 = !DILocation(line: 319, column: 2, scope: !7088)
!7096 = !DILocation(line: 320, column: 33, scope: !7097)
!7097 = distinct !DILexicalBlock(scope: !7098, file: !1, line: 320, column: 7)
!7098 = distinct !DILexicalBlock(scope: !7091, file: !1, line: 319, column: 38)
!7099 = !DILocation(line: 320, column: 37, scope: !7097)
!7100 = !DILocation(line: 320, column: 43, scope: !7097)
!7101 = !DILocation(line: 320, column: 7, scope: !7097)
!7102 = !DILocation(line: 320, column: 7, scope: !7098)
!7103 = !DILocation(line: 321, column: 4, scope: !7097)
!7104 = !DILocation(line: 322, column: 2, scope: !7098)
!7105 = !DILocation(line: 319, column: 34, scope: !7091)
!7106 = !DILocation(line: 319, column: 2, scope: !7091)
!7107 = distinct !{!7107, !7095, !7108}
!7108 = !DILocation(line: 322, column: 2, scope: !7088)
!7109 = !DILocation(line: 323, column: 2, scope: !7080)
!7110 = !DILocation(line: 324, column: 1, scope: !7080)
!7111 = distinct !DISubprogram(name: "edge_half_offset_changed", scope: !1, file: !1, line: 309, type: !7112, scopeLine: 310, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!7112 = !DISubroutineType(types: !7113)
!7113 = !{!152, !130}
!7114 = !DILocalVariable(name: "e", arg: 1, scope: !7111, file: !1, line: 309, type: !130)
!7115 = !DILocation(line: 309, column: 48, scope: !7111)
!7116 = !DILocation(line: 311, column: 9, scope: !7111)
!7117 = !DILocation(line: 311, column: 12, scope: !7111)
!7118 = !DILocation(line: 311, column: 24, scope: !7111)
!7119 = !DILocation(line: 311, column: 27, scope: !7111)
!7120 = !DILocation(line: 311, column: 21, scope: !7111)
!7121 = !DILocation(line: 311, column: 41, scope: !7111)
!7122 = !DILocation(line: 312, column: 9, scope: !7111)
!7123 = !DILocation(line: 312, column: 12, scope: !7111)
!7124 = !DILocation(line: 312, column: 24, scope: !7111)
!7125 = !DILocation(line: 312, column: 27, scope: !7111)
!7126 = !DILocation(line: 312, column: 21, scope: !7111)
!7127 = !DILocation(line: 311, column: 2, scope: !7111)
!7128 = distinct !DISubprogram(name: "mesh_vert", scope: !1, file: !1, line: 232, type: !7129, scopeLine: 233, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!7129 = !DISubroutineType(types: !7130)
!7130 = !{!46, !298, !63, !63, !63}
!7131 = !DILocalVariable(name: "vm", arg: 1, scope: !7128, file: !1, line: 232, type: !298)
!7132 = !DILocation(line: 232, column: 34, scope: !7128)
!7133 = !DILocalVariable(name: "i", arg: 2, scope: !7128, file: !1, line: 232, type: !63)
!7134 = !DILocation(line: 232, column: 42, scope: !7128)
!7135 = !DILocalVariable(name: "j", arg: 3, scope: !7128, file: !1, line: 232, type: !63)
!7136 = !DILocation(line: 232, column: 49, scope: !7128)
!7137 = !DILocalVariable(name: "k", arg: 4, scope: !7128, file: !1, line: 232, type: !63)
!7138 = !DILocation(line: 232, column: 56, scope: !7128)
!7139 = !DILocalVariable(name: "nj", scope: !7128, file: !1, line: 234, type: !63)
!7140 = !DILocation(line: 234, column: 6, scope: !7128)
!7141 = !DILocation(line: 234, column: 12, scope: !7128)
!7142 = !DILocation(line: 234, column: 16, scope: !7128)
!7143 = !DILocation(line: 234, column: 20, scope: !7128)
!7144 = !DILocation(line: 234, column: 25, scope: !7128)
!7145 = !DILocalVariable(name: "nk", scope: !7128, file: !1, line: 235, type: !63)
!7146 = !DILocation(line: 235, column: 6, scope: !7128)
!7147 = !DILocation(line: 235, column: 11, scope: !7128)
!7148 = !DILocation(line: 235, column: 15, scope: !7128)
!7149 = !DILocation(line: 235, column: 19, scope: !7128)
!7150 = !DILocation(line: 237, column: 10, scope: !7128)
!7151 = !DILocation(line: 237, column: 14, scope: !7128)
!7152 = !DILocation(line: 237, column: 19, scope: !7128)
!7153 = !DILocation(line: 237, column: 23, scope: !7128)
!7154 = !DILocation(line: 237, column: 21, scope: !7128)
!7155 = !DILocation(line: 237, column: 28, scope: !7128)
!7156 = !DILocation(line: 237, column: 26, scope: !7128)
!7157 = !DILocation(line: 237, column: 34, scope: !7128)
!7158 = !DILocation(line: 237, column: 38, scope: !7128)
!7159 = !DILocation(line: 237, column: 36, scope: !7128)
!7160 = !DILocation(line: 237, column: 32, scope: !7128)
!7161 = !DILocation(line: 237, column: 43, scope: !7128)
!7162 = !DILocation(line: 237, column: 41, scope: !7128)
!7163 = !DILocation(line: 237, column: 2, scope: !7128)
!7164 = distinct !DISubprogram(name: "create_mesh_bmvert", scope: !1, file: !1, line: 240, type: !7165, scopeLine: 241, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!7165 = !DISubroutineType(types: !7166)
!7166 = !{null, !321, !298, !63, !63, !63, !51}
!7167 = !DILocalVariable(name: "bm", arg: 1, scope: !7164, file: !1, line: 240, type: !321)
!7168 = !DILocation(line: 240, column: 39, scope: !7164)
!7169 = !DILocalVariable(name: "vm", arg: 2, scope: !7164, file: !1, line: 240, type: !298)
!7170 = !DILocation(line: 240, column: 50, scope: !7164)
!7171 = !DILocalVariable(name: "i", arg: 3, scope: !7164, file: !1, line: 240, type: !63)
!7172 = !DILocation(line: 240, column: 58, scope: !7164)
!7173 = !DILocalVariable(name: "j", arg: 4, scope: !7164, file: !1, line: 240, type: !63)
!7174 = !DILocation(line: 240, column: 65, scope: !7164)
!7175 = !DILocalVariable(name: "k", arg: 5, scope: !7164, file: !1, line: 240, type: !63)
!7176 = !DILocation(line: 240, column: 72, scope: !7164)
!7177 = !DILocalVariable(name: "eg", arg: 6, scope: !7164, file: !1, line: 240, type: !51)
!7178 = !DILocation(line: 240, column: 83, scope: !7164)
!7179 = !DILocalVariable(name: "nv", scope: !7164, file: !1, line: 242, type: !46)
!7180 = !DILocation(line: 242, column: 11, scope: !7164)
!7181 = !DILocation(line: 242, column: 26, scope: !7164)
!7182 = !DILocation(line: 242, column: 30, scope: !7164)
!7183 = !DILocation(line: 242, column: 33, scope: !7164)
!7184 = !DILocation(line: 242, column: 36, scope: !7164)
!7185 = !DILocation(line: 242, column: 16, scope: !7164)
!7186 = !DILocation(line: 243, column: 25, scope: !7164)
!7187 = !DILocation(line: 243, column: 29, scope: !7164)
!7188 = !DILocation(line: 243, column: 33, scope: !7164)
!7189 = !DILocation(line: 243, column: 37, scope: !7164)
!7190 = !DILocation(line: 243, column: 10, scope: !7164)
!7191 = !DILocation(line: 243, column: 2, scope: !7164)
!7192 = !DILocation(line: 243, column: 6, scope: !7164)
!7193 = !DILocation(line: 243, column: 8, scope: !7164)
!7194 = !DILocation(line: 244, column: 2, scope: !7164)
!7195 = !DILocation(line: 245, column: 1, scope: !7164)
!7196 = distinct !DISubprogram(name: "move_weld_profile_planes", scope: !1, file: !1, line: 996, type: !7197, scopeLine: 997, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!7197 = !DISubroutineType(types: !7198)
!7198 = !{null, !283, !121, !121}
!7199 = !DILocalVariable(name: "bv", arg: 1, scope: !7196, file: !1, line: 996, type: !283)
!7200 = !DILocation(line: 996, column: 47, scope: !7196)
!7201 = !DILocalVariable(name: "bndv1", arg: 2, scope: !7196, file: !1, line: 996, type: !121)
!7202 = !DILocation(line: 996, column: 62, scope: !7196)
!7203 = !DILocalVariable(name: "bndv2", arg: 3, scope: !7196, file: !1, line: 996, type: !121)
!7204 = !DILocation(line: 996, column: 80, scope: !7196)
!7205 = !DILocalVariable(name: "d1", scope: !7196, file: !1, line: 998, type: !75)
!7206 = !DILocation(line: 998, column: 8, scope: !7196)
!7207 = !DILocalVariable(name: "d2", scope: !7196, file: !1, line: 998, type: !75)
!7208 = !DILocation(line: 998, column: 15, scope: !7196)
!7209 = !DILocalVariable(name: "no", scope: !7196, file: !1, line: 998, type: !75)
!7210 = !DILocation(line: 998, column: 22, scope: !7196)
!7211 = !DILocalVariable(name: "no2", scope: !7196, file: !1, line: 998, type: !75)
!7212 = !DILocation(line: 998, column: 29, scope: !7196)
!7213 = !DILocalVariable(name: "no3", scope: !7196, file: !1, line: 998, type: !75)
!7214 = !DILocation(line: 998, column: 37, scope: !7196)
!7215 = !DILocalVariable(name: "dot1", scope: !7196, file: !1, line: 998, type: !76)
!7216 = !DILocation(line: 998, column: 45, scope: !7196)
!7217 = !DILocalVariable(name: "dot2", scope: !7196, file: !1, line: 998, type: !76)
!7218 = !DILocation(line: 998, column: 51, scope: !7196)
!7219 = !DILocalVariable(name: "l1", scope: !7196, file: !1, line: 998, type: !76)
!7220 = !DILocation(line: 998, column: 57, scope: !7196)
!7221 = !DILocalVariable(name: "l2", scope: !7196, file: !1, line: 998, type: !76)
!7222 = !DILocation(line: 998, column: 61, scope: !7196)
!7223 = !DILocalVariable(name: "l3", scope: !7196, file: !1, line: 998, type: !76)
!7224 = !DILocation(line: 998, column: 65, scope: !7196)
!7225 = !DILocation(line: 1001, column: 17, scope: !7226)
!7226 = distinct !DILexicalBlock(scope: !7196, file: !1, line: 1001, column: 6)
!7227 = !DILocation(line: 1001, column: 24, scope: !7226)
!7228 = !DILocation(line: 1001, column: 32, scope: !7226)
!7229 = !DILocation(line: 1001, column: 6, scope: !7226)
!7230 = !DILocation(line: 1001, column: 42, scope: !7226)
!7231 = !DILocation(line: 1001, column: 56, scope: !7226)
!7232 = !DILocation(line: 1001, column: 63, scope: !7226)
!7233 = !DILocation(line: 1001, column: 71, scope: !7226)
!7234 = !DILocation(line: 1001, column: 45, scope: !7226)
!7235 = !DILocation(line: 1001, column: 6, scope: !7196)
!7236 = !DILocation(line: 1002, column: 3, scope: !7226)
!7237 = !DILocation(line: 1003, column: 14, scope: !7196)
!7238 = !DILocation(line: 1003, column: 18, scope: !7196)
!7239 = !DILocation(line: 1003, column: 22, scope: !7196)
!7240 = !DILocation(line: 1003, column: 25, scope: !7196)
!7241 = !DILocation(line: 1003, column: 29, scope: !7196)
!7242 = !DILocation(line: 1003, column: 36, scope: !7196)
!7243 = !DILocation(line: 1003, column: 39, scope: !7196)
!7244 = !DILocation(line: 1003, column: 2, scope: !7196)
!7245 = !DILocation(line: 1004, column: 14, scope: !7196)
!7246 = !DILocation(line: 1004, column: 18, scope: !7196)
!7247 = !DILocation(line: 1004, column: 22, scope: !7196)
!7248 = !DILocation(line: 1004, column: 25, scope: !7196)
!7249 = !DILocation(line: 1004, column: 29, scope: !7196)
!7250 = !DILocation(line: 1004, column: 36, scope: !7196)
!7251 = !DILocation(line: 1004, column: 39, scope: !7196)
!7252 = !DILocation(line: 1004, column: 2, scope: !7196)
!7253 = !DILocation(line: 1005, column: 16, scope: !7196)
!7254 = !DILocation(line: 1005, column: 20, scope: !7196)
!7255 = !DILocation(line: 1005, column: 24, scope: !7196)
!7256 = !DILocation(line: 1005, column: 2, scope: !7196)
!7257 = !DILocation(line: 1006, column: 20, scope: !7196)
!7258 = !DILocation(line: 1006, column: 7, scope: !7196)
!7259 = !DILocation(line: 1006, column: 5, scope: !7196)
!7260 = !DILocation(line: 1009, column: 16, scope: !7196)
!7261 = !DILocation(line: 1009, column: 21, scope: !7196)
!7262 = !DILocation(line: 1009, column: 25, scope: !7196)
!7263 = !DILocation(line: 1009, column: 32, scope: !7196)
!7264 = !DILocation(line: 1009, column: 40, scope: !7196)
!7265 = !DILocation(line: 1009, column: 2, scope: !7196)
!7266 = !DILocation(line: 1010, column: 20, scope: !7196)
!7267 = !DILocation(line: 1010, column: 7, scope: !7196)
!7268 = !DILocation(line: 1010, column: 5, scope: !7196)
!7269 = !DILocation(line: 1011, column: 16, scope: !7196)
!7270 = !DILocation(line: 1011, column: 21, scope: !7196)
!7271 = !DILocation(line: 1011, column: 25, scope: !7196)
!7272 = !DILocation(line: 1011, column: 32, scope: !7196)
!7273 = !DILocation(line: 1011, column: 40, scope: !7196)
!7274 = !DILocation(line: 1011, column: 2, scope: !7196)
!7275 = !DILocation(line: 1012, column: 20, scope: !7196)
!7276 = !DILocation(line: 1012, column: 7, scope: !7196)
!7277 = !DILocation(line: 1012, column: 5, scope: !7196)
!7278 = !DILocation(line: 1013, column: 6, scope: !7279)
!7279 = distinct !DILexicalBlock(scope: !7196, file: !1, line: 1013, column: 6)
!7280 = !DILocation(line: 1013, column: 9, scope: !7279)
!7281 = !DILocation(line: 1013, column: 25, scope: !7279)
!7282 = !DILocation(line: 1013, column: 29, scope: !7279)
!7283 = !DILocation(line: 1013, column: 32, scope: !7279)
!7284 = !DILocation(line: 1013, column: 48, scope: !7279)
!7285 = !DILocation(line: 1013, column: 51, scope: !7279)
!7286 = !DILocation(line: 1013, column: 54, scope: !7279)
!7287 = !DILocation(line: 1013, column: 6, scope: !7196)
!7288 = !DILocation(line: 1014, column: 25, scope: !7289)
!7289 = distinct !DILexicalBlock(scope: !7279, file: !1, line: 1013, column: 72)
!7290 = !DILocation(line: 1014, column: 29, scope: !7289)
!7291 = !DILocation(line: 1014, column: 16, scope: !7289)
!7292 = !DILocation(line: 1014, column: 10, scope: !7289)
!7293 = !DILocation(line: 1014, column: 8, scope: !7289)
!7294 = !DILocation(line: 1015, column: 25, scope: !7289)
!7295 = !DILocation(line: 1015, column: 29, scope: !7289)
!7296 = !DILocation(line: 1015, column: 16, scope: !7289)
!7297 = !DILocation(line: 1015, column: 10, scope: !7289)
!7298 = !DILocation(line: 1015, column: 8, scope: !7289)
!7299 = !DILocation(line: 1016, column: 13, scope: !7300)
!7300 = distinct !DILexicalBlock(scope: !7289, file: !1, line: 1016, column: 7)
!7301 = !DILocation(line: 1016, column: 18, scope: !7300)
!7302 = !DILocation(line: 1016, column: 7, scope: !7300)
!7303 = !DILocation(line: 1016, column: 26, scope: !7300)
!7304 = !DILocation(line: 1016, column: 7, scope: !7289)
!7305 = !DILocation(line: 1017, column: 15, scope: !7300)
!7306 = !DILocation(line: 1017, column: 22, scope: !7300)
!7307 = !DILocation(line: 1017, column: 30, scope: !7300)
!7308 = !DILocation(line: 1017, column: 40, scope: !7300)
!7309 = !DILocation(line: 1017, column: 4, scope: !7300)
!7310 = !DILocation(line: 1018, column: 13, scope: !7311)
!7311 = distinct !DILexicalBlock(scope: !7289, file: !1, line: 1018, column: 7)
!7312 = !DILocation(line: 1018, column: 18, scope: !7311)
!7313 = !DILocation(line: 1018, column: 7, scope: !7311)
!7314 = !DILocation(line: 1018, column: 26, scope: !7311)
!7315 = !DILocation(line: 1018, column: 7, scope: !7289)
!7316 = !DILocation(line: 1019, column: 15, scope: !7311)
!7317 = !DILocation(line: 1019, column: 22, scope: !7311)
!7318 = !DILocation(line: 1019, column: 30, scope: !7311)
!7319 = !DILocation(line: 1019, column: 40, scope: !7311)
!7320 = !DILocation(line: 1019, column: 4, scope: !7311)
!7321 = !DILocation(line: 1020, column: 2, scope: !7289)
!7322 = !DILocation(line: 1021, column: 1, scope: !7196)
!7323 = distinct !DISubprogram(name: "copy_mesh_vert", scope: !1, file: !1, line: 247, type: !7324, scopeLine: 249, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!7324 = !DISubroutineType(types: !7325)
!7325 = !{null, !298, !63, !63, !63, !63, !63, !63}
!7326 = !DILocalVariable(name: "vm", arg: 1, scope: !7323, file: !1, line: 247, type: !298)
!7327 = !DILocation(line: 247, column: 35, scope: !7323)
!7328 = !DILocalVariable(name: "ito", arg: 2, scope: !7323, file: !1, line: 247, type: !63)
!7329 = !DILocation(line: 247, column: 43, scope: !7323)
!7330 = !DILocalVariable(name: "jto", arg: 3, scope: !7323, file: !1, line: 247, type: !63)
!7331 = !DILocation(line: 247, column: 52, scope: !7323)
!7332 = !DILocalVariable(name: "kto", arg: 4, scope: !7323, file: !1, line: 247, type: !63)
!7333 = !DILocation(line: 247, column: 61, scope: !7323)
!7334 = !DILocalVariable(name: "ifrom", arg: 5, scope: !7323, file: !1, line: 248, type: !63)
!7335 = !DILocation(line: 248, column: 32, scope: !7323)
!7336 = !DILocalVariable(name: "jfrom", arg: 6, scope: !7323, file: !1, line: 248, type: !63)
!7337 = !DILocation(line: 248, column: 43, scope: !7323)
!7338 = !DILocalVariable(name: "kfrom", arg: 7, scope: !7323, file: !1, line: 248, type: !63)
!7339 = !DILocation(line: 248, column: 54, scope: !7323)
!7340 = !DILocalVariable(name: "nvto", scope: !7323, file: !1, line: 250, type: !46)
!7341 = !DILocation(line: 250, column: 11, scope: !7323)
!7342 = !DILocalVariable(name: "nvfrom", scope: !7323, file: !1, line: 250, type: !46)
!7343 = !DILocation(line: 250, column: 18, scope: !7323)
!7344 = !DILocation(line: 252, column: 19, scope: !7323)
!7345 = !DILocation(line: 252, column: 23, scope: !7323)
!7346 = !DILocation(line: 252, column: 28, scope: !7323)
!7347 = !DILocation(line: 252, column: 33, scope: !7323)
!7348 = !DILocation(line: 252, column: 9, scope: !7323)
!7349 = !DILocation(line: 252, column: 7, scope: !7323)
!7350 = !DILocation(line: 253, column: 21, scope: !7323)
!7351 = !DILocation(line: 253, column: 25, scope: !7323)
!7352 = !DILocation(line: 253, column: 32, scope: !7323)
!7353 = !DILocation(line: 253, column: 39, scope: !7323)
!7354 = !DILocation(line: 253, column: 11, scope: !7323)
!7355 = !DILocation(line: 253, column: 9, scope: !7323)
!7356 = !DILocation(line: 254, column: 12, scope: !7323)
!7357 = !DILocation(line: 254, column: 20, scope: !7323)
!7358 = !DILocation(line: 254, column: 2, scope: !7323)
!7359 = !DILocation(line: 254, column: 8, scope: !7323)
!7360 = !DILocation(line: 254, column: 10, scope: !7323)
!7361 = !DILocation(line: 255, column: 13, scope: !7323)
!7362 = !DILocation(line: 255, column: 19, scope: !7323)
!7363 = !DILocation(line: 255, column: 23, scope: !7323)
!7364 = !DILocation(line: 255, column: 31, scope: !7323)
!7365 = !DILocation(line: 255, column: 2, scope: !7323)
!7366 = !DILocation(line: 256, column: 1, scope: !7323)
!7367 = distinct !DISubprogram(name: "get_profile_point", scope: !1, file: !1, line: 1196, type: !7368, scopeLine: 1197, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!7368 = !DISubroutineType(types: !7369)
!7369 = !{null, !801, !7370, !63, !63, !170}
!7370 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7371, size: 64)
!7371 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !159)
!7372 = !DILocalVariable(name: "bp", arg: 1, scope: !7367, file: !1, line: 1196, type: !801)
!7373 = !DILocation(line: 1196, column: 44, scope: !7367)
!7374 = !DILocalVariable(name: "pro", arg: 2, scope: !7367, file: !1, line: 1196, type: !7370)
!7375 = !DILocation(line: 1196, column: 63, scope: !7367)
!7376 = !DILocalVariable(name: "i", arg: 3, scope: !7367, file: !1, line: 1196, type: !63)
!7377 = !DILocation(line: 1196, column: 72, scope: !7367)
!7378 = !DILocalVariable(name: "n", arg: 4, scope: !7367, file: !1, line: 1196, type: !63)
!7379 = !DILocation(line: 1196, column: 79, scope: !7367)
!7380 = !DILocalVariable(name: "r_co", arg: 5, scope: !7367, file: !1, line: 1196, type: !170)
!7381 = !DILocation(line: 1196, column: 88, scope: !7367)
!7382 = !DILocalVariable(name: "d", scope: !7367, file: !1, line: 1198, type: !63)
!7383 = !DILocation(line: 1198, column: 6, scope: !7367)
!7384 = !DILocation(line: 1200, column: 6, scope: !7385)
!7385 = distinct !DILexicalBlock(scope: !7367, file: !1, line: 1200, column: 6)
!7386 = !DILocation(line: 1200, column: 10, scope: !7385)
!7387 = !DILocation(line: 1200, column: 14, scope: !7385)
!7388 = !DILocation(line: 1200, column: 6, scope: !7367)
!7389 = !DILocation(line: 1201, column: 7, scope: !7390)
!7390 = distinct !DILexicalBlock(scope: !7391, file: !1, line: 1201, column: 7)
!7391 = distinct !DILexicalBlock(scope: !7385, file: !1, line: 1200, column: 20)
!7392 = !DILocation(line: 1201, column: 9, scope: !7390)
!7393 = !DILocation(line: 1201, column: 7, scope: !7391)
!7394 = !DILocation(line: 1202, column: 15, scope: !7390)
!7395 = !DILocation(line: 1202, column: 21, scope: !7390)
!7396 = !DILocation(line: 1202, column: 26, scope: !7390)
!7397 = !DILocation(line: 1202, column: 4, scope: !7390)
!7398 = !DILocation(line: 1204, column: 15, scope: !7390)
!7399 = !DILocation(line: 1204, column: 21, scope: !7390)
!7400 = !DILocation(line: 1204, column: 26, scope: !7390)
!7401 = !DILocation(line: 1204, column: 4, scope: !7390)
!7402 = !DILocation(line: 1205, column: 2, scope: !7391)
!7403 = !DILocation(line: 1208, column: 7, scope: !7404)
!7404 = distinct !DILexicalBlock(scope: !7405, file: !1, line: 1208, column: 7)
!7405 = distinct !DILexicalBlock(scope: !7385, file: !1, line: 1207, column: 7)
!7406 = !DILocation(line: 1208, column: 12, scope: !7404)
!7407 = !DILocation(line: 1208, column: 16, scope: !7404)
!7408 = !DILocation(line: 1208, column: 9, scope: !7404)
!7409 = !DILocation(line: 1208, column: 7, scope: !7405)
!7410 = !DILocation(line: 1210, column: 15, scope: !7411)
!7411 = distinct !DILexicalBlock(scope: !7404, file: !1, line: 1208, column: 21)
!7412 = !DILocation(line: 1210, column: 21, scope: !7411)
!7413 = !DILocation(line: 1210, column: 26, scope: !7411)
!7414 = !DILocation(line: 1210, column: 40, scope: !7411)
!7415 = !DILocation(line: 1210, column: 38, scope: !7411)
!7416 = !DILocation(line: 1210, column: 34, scope: !7411)
!7417 = !DILocation(line: 1210, column: 4, scope: !7411)
!7418 = !DILocation(line: 1211, column: 3, scope: !7411)
!7419 = !DILocation(line: 1215, column: 8, scope: !7420)
!7420 = distinct !DILexicalBlock(scope: !7404, file: !1, line: 1212, column: 8)
!7421 = !DILocation(line: 1215, column: 12, scope: !7420)
!7422 = !DILocation(line: 1215, column: 24, scope: !7420)
!7423 = !DILocation(line: 1215, column: 32, scope: !7420)
!7424 = !DILocation(line: 1215, column: 30, scope: !7420)
!7425 = !DILocation(line: 1215, column: 6, scope: !7420)
!7426 = !DILocation(line: 1216, column: 15, scope: !7420)
!7427 = !DILocation(line: 1216, column: 21, scope: !7420)
!7428 = !DILocation(line: 1216, column: 26, scope: !7420)
!7429 = !DILocation(line: 1216, column: 42, scope: !7420)
!7430 = !DILocation(line: 1216, column: 40, scope: !7420)
!7431 = !DILocation(line: 1216, column: 46, scope: !7420)
!7432 = !DILocation(line: 1216, column: 44, scope: !7420)
!7433 = !DILocation(line: 1216, column: 36, scope: !7420)
!7434 = !DILocation(line: 1216, column: 4, scope: !7420)
!7435 = !DILocation(line: 1219, column: 1, scope: !7367)
!7436 = distinct !DISubprogram(name: "bevel_build_one_wire", scope: !1, file: !1, line: 2719, type: !7437, scopeLine: 2720, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!7437 = !DISubroutineType(types: !7438)
!7438 = !{null, !321, !283}
!7439 = !DILocalVariable(name: "bm", arg: 1, scope: !7436, file: !1, line: 2719, type: !321)
!7440 = !DILocation(line: 2719, column: 41, scope: !7436)
!7441 = !DILocalVariable(name: "bv", arg: 2, scope: !7436, file: !1, line: 2719, type: !283)
!7442 = !DILocation(line: 2719, column: 54, scope: !7436)
!7443 = !DILocalVariable(name: "vm", scope: !7436, file: !1, line: 2721, type: !298)
!7444 = !DILocation(line: 2721, column: 9, scope: !7436)
!7445 = !DILocation(line: 2721, column: 14, scope: !7436)
!7446 = !DILocation(line: 2721, column: 18, scope: !7436)
!7447 = !DILocalVariable(name: "v1", scope: !7436, file: !1, line: 2722, type: !51)
!7448 = !DILocation(line: 2722, column: 10, scope: !7436)
!7449 = !DILocalVariable(name: "v2", scope: !7436, file: !1, line: 2722, type: !51)
!7450 = !DILocation(line: 2722, column: 15, scope: !7436)
!7451 = !DILocalVariable(name: "e_eg", scope: !7436, file: !1, line: 2723, type: !138)
!7452 = !DILocation(line: 2723, column: 10, scope: !7436)
!7453 = !DILocation(line: 2727, column: 17, scope: !7436)
!7454 = !DILocation(line: 2727, column: 7, scope: !7436)
!7455 = !DILocation(line: 2727, column: 31, scope: !7436)
!7456 = !DILocation(line: 2727, column: 5, scope: !7436)
!7457 = !DILocation(line: 2728, column: 17, scope: !7436)
!7458 = !DILocation(line: 2728, column: 7, scope: !7436)
!7459 = !DILocation(line: 2728, column: 31, scope: !7436)
!7460 = !DILocation(line: 2728, column: 5, scope: !7436)
!7461 = !DILocation(line: 2729, column: 9, scope: !7436)
!7462 = !DILocation(line: 2729, column: 13, scope: !7436)
!7463 = !DILocation(line: 2729, column: 22, scope: !7436)
!7464 = !DILocation(line: 2729, column: 7, scope: !7436)
!7465 = !DILocation(line: 2731, column: 17, scope: !7436)
!7466 = !DILocation(line: 2731, column: 21, scope: !7436)
!7467 = !DILocation(line: 2731, column: 25, scope: !7436)
!7468 = !DILocation(line: 2731, column: 29, scope: !7436)
!7469 = !DILocation(line: 2731, column: 2, scope: !7436)
!7470 = !DILocation(line: 2732, column: 1, scope: !7436)
!7471 = distinct !DISubprogram(name: "bevel_build_poly", scope: !1, file: !1, line: 2603, type: !7472, scopeLine: 2604, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!7472 = !DISubroutineType(types: !7473)
!7473 = !{!141, !801, !321, !283}
!7474 = !DILocalVariable(name: "bp", arg: 1, scope: !7471, file: !1, line: 2603, type: !801)
!7475 = !DILocation(line: 2603, column: 46, scope: !7471)
!7476 = !DILocalVariable(name: "bm", arg: 2, scope: !7471, file: !1, line: 2603, type: !321)
!7477 = !DILocation(line: 2603, column: 57, scope: !7471)
!7478 = !DILocalVariable(name: "bv", arg: 3, scope: !7471, file: !1, line: 2603, type: !283)
!7479 = !DILocation(line: 2603, column: 70, scope: !7471)
!7480 = !DILocalVariable(name: "f", scope: !7471, file: !1, line: 2605, type: !141)
!7481 = !DILocation(line: 2605, column: 10, scope: !7471)
!7482 = !DILocalVariable(name: "n", scope: !7471, file: !1, line: 2606, type: !63)
!7483 = !DILocation(line: 2606, column: 6, scope: !7471)
!7484 = !DILocalVariable(name: "k", scope: !7471, file: !1, line: 2606, type: !63)
!7485 = !DILocation(line: 2606, column: 9, scope: !7471)
!7486 = !DILocalVariable(name: "vm", scope: !7471, file: !1, line: 2607, type: !298)
!7487 = !DILocation(line: 2607, column: 9, scope: !7471)
!7488 = !DILocation(line: 2607, column: 14, scope: !7471)
!7489 = !DILocation(line: 2607, column: 18, scope: !7471)
!7490 = !DILocalVariable(name: "v", scope: !7471, file: !1, line: 2608, type: !121)
!7491 = !DILocation(line: 2608, column: 13, scope: !7471)
!7492 = !DILocalVariable(name: "frep", scope: !7471, file: !1, line: 2609, type: !141)
!7493 = !DILocation(line: 2609, column: 10, scope: !7471)
!7494 = !DILocalVariable(name: "vv", scope: !7471, file: !1, line: 2610, type: !341)
!7495 = !DILocation(line: 2610, column: 11, scope: !7471)
!7496 = !DILocalVariable(name: "vf", scope: !7471, file: !1, line: 2611, type: !313)
!7497 = !DILocation(line: 2611, column: 11, scope: !7471)
!7498 = !DILocalVariable(name: "_vv_count", scope: !7471, file: !1, line: 2612, type: !63)
!7499 = !DILocation(line: 2612, column: 2, scope: !7471)
!7500 = !DILocalVariable(name: "_vv_static", scope: !7471, file: !1, line: 2612, type: !7501)
!7501 = !DICompositeType(tag: DW_TAG_array_type, baseType: !61, size: 2048, elements: !7502)
!7502 = !{!7503}
!7503 = !DISubrange(count: 32)
!7504 = !DILocalVariable(name: "_vf_count", scope: !7471, file: !1, line: 2613, type: !63)
!7505 = !DILocation(line: 2613, column: 2, scope: !7471)
!7506 = !DILocalVariable(name: "_vf_static", scope: !7471, file: !1, line: 2613, type: !7501)
!7507 = !DILocation(line: 2615, column: 28, scope: !7471)
!7508 = !DILocation(line: 2615, column: 32, scope: !7471)
!7509 = !DILocation(line: 2615, column: 9, scope: !7471)
!7510 = !DILocation(line: 2615, column: 7, scope: !7471)
!7511 = !DILocation(line: 2616, column: 6, scope: !7471)
!7512 = !DILocation(line: 2616, column: 10, scope: !7471)
!7513 = !DILocation(line: 2616, column: 4, scope: !7471)
!7514 = !DILocation(line: 2617, column: 4, scope: !7471)
!7515 = !DILocation(line: 2618, column: 2, scope: !7471)
!7516 = !DILocation(line: 2621, column: 3, scope: !7517)
!7517 = distinct !DILexicalBlock(scope: !7471, file: !1, line: 2618, column: 5)
!7518 = !DILocation(line: 2622, column: 3, scope: !7517)
!7519 = !DILocation(line: 2623, column: 4, scope: !7517)
!7520 = !DILocation(line: 2624, column: 7, scope: !7521)
!7521 = distinct !DILexicalBlock(scope: !7517, file: !1, line: 2624, column: 7)
!7522 = !DILocation(line: 2624, column: 10, scope: !7521)
!7523 = !DILocation(line: 2624, column: 15, scope: !7521)
!7524 = !DILocation(line: 2624, column: 18, scope: !7521)
!7525 = !DILocation(line: 2624, column: 21, scope: !7521)
!7526 = !DILocation(line: 2624, column: 27, scope: !7521)
!7527 = !DILocation(line: 2624, column: 31, scope: !7521)
!7528 = !DILocation(line: 2624, column: 7, scope: !7517)
!7529 = !DILocation(line: 2625, column: 11, scope: !7530)
!7530 = distinct !DILexicalBlock(scope: !7531, file: !1, line: 2625, column: 4)
!7531 = distinct !DILexicalBlock(scope: !7521, file: !1, line: 2624, column: 36)
!7532 = !DILocation(line: 2625, column: 9, scope: !7530)
!7533 = !DILocation(line: 2625, column: 16, scope: !7534)
!7534 = distinct !DILexicalBlock(scope: !7530, file: !1, line: 2625, column: 4)
!7535 = !DILocation(line: 2625, column: 20, scope: !7534)
!7536 = !DILocation(line: 2625, column: 23, scope: !7534)
!7537 = !DILocation(line: 2625, column: 29, scope: !7534)
!7538 = !DILocation(line: 2625, column: 18, scope: !7534)
!7539 = !DILocation(line: 2625, column: 4, scope: !7530)
!7540 = !DILocation(line: 2626, column: 5, scope: !7541)
!7541 = distinct !DILexicalBlock(scope: !7534, file: !1, line: 2625, column: 39)
!7542 = !DILocation(line: 2627, column: 5, scope: !7541)
!7543 = !DILocation(line: 2628, column: 6, scope: !7541)
!7544 = !DILocation(line: 2629, column: 4, scope: !7541)
!7545 = !DILocation(line: 2625, column: 35, scope: !7534)
!7546 = !DILocation(line: 2625, column: 4, scope: !7534)
!7547 = distinct !{!7547, !7539, !7548}
!7548 = !DILocation(line: 2629, column: 4, scope: !7530)
!7549 = !DILocation(line: 2630, column: 3, scope: !7531)
!7550 = !DILocation(line: 2631, column: 2, scope: !7517)
!7551 = !DILocation(line: 2631, column: 16, scope: !7471)
!7552 = !DILocation(line: 2631, column: 19, scope: !7471)
!7553 = !DILocation(line: 2631, column: 14, scope: !7471)
!7554 = !DILocation(line: 2631, column: 28, scope: !7471)
!7555 = !DILocation(line: 2631, column: 32, scope: !7471)
!7556 = !DILocation(line: 2631, column: 25, scope: !7471)
!7557 = distinct !{!7557, !7515, !7558}
!7558 = !DILocation(line: 2631, column: 42, scope: !7471)
!7559 = !DILocation(line: 2632, column: 6, scope: !7560)
!7560 = distinct !DILexicalBlock(scope: !7471, file: !1, line: 2632, column: 6)
!7561 = !DILocation(line: 2632, column: 8, scope: !7560)
!7562 = !DILocation(line: 2632, column: 6, scope: !7471)
!7563 = !DILocation(line: 2633, column: 23, scope: !7564)
!7564 = distinct !DILexicalBlock(scope: !7560, file: !1, line: 2632, column: 13)
!7565 = !DILocation(line: 2633, column: 27, scope: !7564)
!7566 = !DILocation(line: 2633, column: 31, scope: !7564)
!7567 = !DILocation(line: 2633, column: 34, scope: !7564)
!7568 = !DILocation(line: 2633, column: 57, scope: !7564)
!7569 = !DILocation(line: 2633, column: 38, scope: !7564)
!7570 = !DILocation(line: 2633, column: 61, scope: !7564)
!7571 = !DILocation(line: 2633, column: 65, scope: !7564)
!7572 = !DILocation(line: 2633, column: 7, scope: !7564)
!7573 = !DILocation(line: 2633, column: 5, scope: !7564)
!7574 = !DILocation(line: 2634, column: 2, scope: !7564)
!7575 = !DILocation(line: 2636, column: 5, scope: !7576)
!7576 = distinct !DILexicalBlock(scope: !7560, file: !1, line: 2635, column: 7)
!7577 = !DILocation(line: 2638, column: 2, scope: !7578)
!7578 = distinct !DILexicalBlock(scope: !7471, file: !1, line: 2638, column: 2)
!7579 = !DILocation(line: 2638, column: 2, scope: !7471)
!7580 = !DILocation(line: 2638, column: 2, scope: !7581)
!7581 = distinct !DILexicalBlock(scope: !7578, file: !1, line: 2638, column: 2)
!7582 = !DILocation(line: 2639, column: 9, scope: !7471)
!7583 = !DILocation(line: 2639, column: 2, scope: !7471)
!7584 = distinct !DISubprogram(name: "bevel_build_rings", scope: !1, file: !1, line: 2499, type: !2703, scopeLine: 2500, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!7585 = !DILocalVariable(name: "bp", arg: 1, scope: !7584, file: !1, line: 2499, type: !801)
!7586 = !DILocation(line: 2499, column: 44, scope: !7584)
!7587 = !DILocalVariable(name: "bm", arg: 2, scope: !7584, file: !1, line: 2499, type: !321)
!7588 = !DILocation(line: 2499, column: 55, scope: !7584)
!7589 = !DILocalVariable(name: "bv", arg: 3, scope: !7584, file: !1, line: 2499, type: !283)
!7590 = !DILocation(line: 2499, column: 68, scope: !7584)
!7591 = !DILocalVariable(name: "n", scope: !7584, file: !1, line: 2501, type: !63)
!7592 = !DILocation(line: 2501, column: 6, scope: !7584)
!7593 = !DILocalVariable(name: "ns", scope: !7584, file: !1, line: 2501, type: !63)
!7594 = !DILocation(line: 2501, column: 9, scope: !7584)
!7595 = !DILocalVariable(name: "ns2", scope: !7584, file: !1, line: 2501, type: !63)
!7596 = !DILocation(line: 2501, column: 13, scope: !7584)
!7597 = !DILocalVariable(name: "odd", scope: !7584, file: !1, line: 2501, type: !63)
!7598 = !DILocation(line: 2501, column: 18, scope: !7584)
!7599 = !DILocalVariable(name: "i", scope: !7584, file: !1, line: 2501, type: !63)
!7600 = !DILocation(line: 2501, column: 23, scope: !7584)
!7601 = !DILocalVariable(name: "j", scope: !7584, file: !1, line: 2501, type: !63)
!7602 = !DILocation(line: 2501, column: 26, scope: !7584)
!7603 = !DILocalVariable(name: "k", scope: !7584, file: !1, line: 2501, type: !63)
!7604 = !DILocation(line: 2501, column: 29, scope: !7584)
!7605 = !DILocalVariable(name: "ring", scope: !7584, file: !1, line: 2501, type: !63)
!7606 = !DILocation(line: 2501, column: 32, scope: !7584)
!7607 = !DILocalVariable(name: "vm1", scope: !7584, file: !1, line: 2502, type: !298)
!7608 = !DILocation(line: 2502, column: 9, scope: !7584)
!7609 = !DILocalVariable(name: "vm", scope: !7584, file: !1, line: 2502, type: !298)
!7610 = !DILocation(line: 2502, column: 15, scope: !7584)
!7611 = !DILocalVariable(name: "v", scope: !7584, file: !1, line: 2503, type: !121)
!7612 = !DILocation(line: 2503, column: 13, scope: !7584)
!7613 = !DILocalVariable(name: "bmv1", scope: !7584, file: !1, line: 2504, type: !51)
!7614 = !DILocation(line: 2504, column: 10, scope: !7584)
!7615 = !DILocalVariable(name: "bmv2", scope: !7584, file: !1, line: 2504, type: !51)
!7616 = !DILocation(line: 2504, column: 17, scope: !7584)
!7617 = !DILocalVariable(name: "bmv3", scope: !7584, file: !1, line: 2504, type: !51)
!7618 = !DILocation(line: 2504, column: 24, scope: !7584)
!7619 = !DILocalVariable(name: "bmv4", scope: !7584, file: !1, line: 2504, type: !51)
!7620 = !DILocation(line: 2504, column: 31, scope: !7584)
!7621 = !DILocalVariable(name: "f", scope: !7584, file: !1, line: 2505, type: !141)
!7622 = !DILocation(line: 2505, column: 10, scope: !7584)
!7623 = !DILocalVariable(name: "f2", scope: !7584, file: !1, line: 2505, type: !141)
!7624 = !DILocation(line: 2505, column: 14, scope: !7584)
!7625 = !DILocalVariable(name: "f23", scope: !7584, file: !1, line: 2505, type: !141)
!7626 = !DILocation(line: 2505, column: 19, scope: !7584)
!7627 = !DILocalVariable(name: "vpipe", scope: !7584, file: !1, line: 2506, type: !121)
!7628 = !DILocation(line: 2506, column: 13, scope: !7584)
!7629 = !DILocalVariable(name: "mat_nr", scope: !7584, file: !1, line: 2507, type: !63)
!7630 = !DILocation(line: 2507, column: 6, scope: !7584)
!7631 = !DILocation(line: 2507, column: 15, scope: !7584)
!7632 = !DILocation(line: 2507, column: 19, scope: !7584)
!7633 = !DILocation(line: 2509, column: 6, scope: !7584)
!7634 = !DILocation(line: 2509, column: 10, scope: !7584)
!7635 = !DILocation(line: 2509, column: 17, scope: !7584)
!7636 = !DILocation(line: 2509, column: 4, scope: !7584)
!7637 = !DILocation(line: 2510, column: 7, scope: !7584)
!7638 = !DILocation(line: 2510, column: 11, scope: !7584)
!7639 = !DILocation(line: 2510, column: 18, scope: !7584)
!7640 = !DILocation(line: 2510, column: 5, scope: !7584)
!7641 = !DILocation(line: 2511, column: 8, scope: !7584)
!7642 = !DILocation(line: 2511, column: 11, scope: !7584)
!7643 = !DILocation(line: 2511, column: 6, scope: !7584)
!7644 = !DILocation(line: 2512, column: 8, scope: !7584)
!7645 = !DILocation(line: 2512, column: 11, scope: !7584)
!7646 = !DILocation(line: 2512, column: 6, scope: !7584)
!7647 = !DILocation(line: 2515, column: 20, scope: !7584)
!7648 = !DILocation(line: 2515, column: 10, scope: !7584)
!7649 = !DILocation(line: 2515, column: 8, scope: !7584)
!7650 = !DILocation(line: 2517, column: 6, scope: !7651)
!7651 = distinct !DILexicalBlock(scope: !7584, file: !1, line: 2517, column: 6)
!7652 = !DILocation(line: 2517, column: 6, scope: !7584)
!7653 = !DILocation(line: 2518, column: 24, scope: !7651)
!7654 = !DILocation(line: 2518, column: 28, scope: !7651)
!7655 = !DILocation(line: 2518, column: 32, scope: !7651)
!7656 = !DILocation(line: 2518, column: 9, scope: !7651)
!7657 = !DILocation(line: 2518, column: 7, scope: !7651)
!7658 = !DILocation(line: 2518, column: 3, scope: !7651)
!7659 = !DILocation(line: 2519, column: 27, scope: !7660)
!7660 = distinct !DILexicalBlock(scope: !7651, file: !1, line: 2519, column: 11)
!7661 = !DILocation(line: 2519, column: 31, scope: !7660)
!7662 = !DILocation(line: 2519, column: 11, scope: !7660)
!7663 = !DILocation(line: 2519, column: 11, scope: !7651)
!7664 = !DILocation(line: 2520, column: 30, scope: !7660)
!7665 = !DILocation(line: 2520, column: 34, scope: !7660)
!7666 = !DILocation(line: 2520, column: 9, scope: !7660)
!7667 = !DILocation(line: 2520, column: 7, scope: !7660)
!7668 = !DILocation(line: 2520, column: 3, scope: !7660)
!7669 = !DILocation(line: 2522, column: 19, scope: !7660)
!7670 = !DILocation(line: 2522, column: 23, scope: !7660)
!7671 = !DILocation(line: 2522, column: 9, scope: !7660)
!7672 = !DILocation(line: 2522, column: 7, scope: !7660)
!7673 = !DILocation(line: 2525, column: 7, scope: !7584)
!7674 = !DILocation(line: 2525, column: 11, scope: !7584)
!7675 = !DILocation(line: 2525, column: 5, scope: !7584)
!7676 = !DILocation(line: 2526, column: 9, scope: !7677)
!7677 = distinct !DILexicalBlock(scope: !7584, file: !1, line: 2526, column: 2)
!7678 = !DILocation(line: 2526, column: 7, scope: !7677)
!7679 = !DILocation(line: 2526, column: 14, scope: !7680)
!7680 = distinct !DILexicalBlock(scope: !7677, file: !1, line: 2526, column: 2)
!7681 = !DILocation(line: 2526, column: 18, scope: !7680)
!7682 = !DILocation(line: 2526, column: 16, scope: !7680)
!7683 = !DILocation(line: 2526, column: 2, scope: !7677)
!7684 = !DILocation(line: 2527, column: 10, scope: !7685)
!7685 = distinct !DILexicalBlock(scope: !7686, file: !1, line: 2527, column: 3)
!7686 = distinct !DILexicalBlock(scope: !7680, file: !1, line: 2526, column: 26)
!7687 = !DILocation(line: 2527, column: 8, scope: !7685)
!7688 = !DILocation(line: 2527, column: 15, scope: !7689)
!7689 = distinct !DILexicalBlock(scope: !7685, file: !1, line: 2527, column: 3)
!7690 = !DILocation(line: 2527, column: 20, scope: !7689)
!7691 = !DILocation(line: 2527, column: 17, scope: !7689)
!7692 = !DILocation(line: 2527, column: 3, scope: !7685)
!7693 = !DILocation(line: 2528, column: 11, scope: !7694)
!7694 = distinct !DILexicalBlock(scope: !7695, file: !1, line: 2528, column: 4)
!7695 = distinct !DILexicalBlock(scope: !7689, file: !1, line: 2527, column: 30)
!7696 = !DILocation(line: 2528, column: 9, scope: !7694)
!7697 = !DILocation(line: 2528, column: 16, scope: !7698)
!7698 = distinct !DILexicalBlock(scope: !7694, file: !1, line: 2528, column: 4)
!7699 = !DILocation(line: 2528, column: 21, scope: !7698)
!7700 = !DILocation(line: 2528, column: 18, scope: !7698)
!7701 = !DILocation(line: 2528, column: 4, scope: !7694)
!7702 = !DILocation(line: 2529, column: 9, scope: !7703)
!7703 = distinct !DILexicalBlock(scope: !7704, file: !1, line: 2529, column: 9)
!7704 = distinct !DILexicalBlock(scope: !7698, file: !1, line: 2528, column: 30)
!7705 = !DILocation(line: 2529, column: 11, scope: !7703)
!7706 = !DILocation(line: 2529, column: 16, scope: !7703)
!7707 = !DILocation(line: 2529, column: 20, scope: !7703)
!7708 = !DILocation(line: 2529, column: 22, scope: !7703)
!7709 = !DILocation(line: 2529, column: 27, scope: !7703)
!7710 = !DILocation(line: 2529, column: 30, scope: !7703)
!7711 = !DILocation(line: 2529, column: 35, scope: !7703)
!7712 = !DILocation(line: 2529, column: 32, scope: !7703)
!7713 = !DILocation(line: 2529, column: 9, scope: !7704)
!7714 = !DILocation(line: 2530, column: 6, scope: !7703)
!7715 = !DILocation(line: 2531, column: 19, scope: !7716)
!7716 = distinct !DILexicalBlock(scope: !7704, file: !1, line: 2531, column: 9)
!7717 = !DILocation(line: 2531, column: 23, scope: !7716)
!7718 = !DILocation(line: 2531, column: 26, scope: !7716)
!7719 = !DILocation(line: 2531, column: 29, scope: !7716)
!7720 = !DILocation(line: 2531, column: 10, scope: !7716)
!7721 = !DILocation(line: 2531, column: 9, scope: !7704)
!7722 = !DILocation(line: 2532, column: 6, scope: !7716)
!7723 = !DILocation(line: 2533, column: 26, scope: !7704)
!7724 = !DILocation(line: 2533, column: 30, scope: !7704)
!7725 = !DILocation(line: 2533, column: 33, scope: !7704)
!7726 = !DILocation(line: 2533, column: 36, scope: !7704)
!7727 = !DILocation(line: 2533, column: 16, scope: !7704)
!7728 = !DILocation(line: 2533, column: 40, scope: !7704)
!7729 = !DILocation(line: 2533, column: 54, scope: !7704)
!7730 = !DILocation(line: 2533, column: 59, scope: !7704)
!7731 = !DILocation(line: 2533, column: 62, scope: !7704)
!7732 = !DILocation(line: 2533, column: 65, scope: !7704)
!7733 = !DILocation(line: 2533, column: 44, scope: !7704)
!7734 = !DILocation(line: 2533, column: 69, scope: !7704)
!7735 = !DILocation(line: 2533, column: 5, scope: !7704)
!7736 = !DILocation(line: 2534, column: 24, scope: !7704)
!7737 = !DILocation(line: 2534, column: 28, scope: !7704)
!7738 = !DILocation(line: 2534, column: 32, scope: !7704)
!7739 = !DILocation(line: 2534, column: 35, scope: !7704)
!7740 = !DILocation(line: 2534, column: 38, scope: !7704)
!7741 = !DILocation(line: 2534, column: 41, scope: !7704)
!7742 = !DILocation(line: 2534, column: 45, scope: !7704)
!7743 = !DILocation(line: 2534, column: 5, scope: !7704)
!7744 = !DILocation(line: 2535, column: 4, scope: !7704)
!7745 = !DILocation(line: 2528, column: 26, scope: !7698)
!7746 = !DILocation(line: 2528, column: 4, scope: !7698)
!7747 = distinct !{!7747, !7701, !7748}
!7748 = !DILocation(line: 2535, column: 4, scope: !7694)
!7749 = !DILocation(line: 2536, column: 3, scope: !7695)
!7750 = !DILocation(line: 2527, column: 26, scope: !7689)
!7751 = !DILocation(line: 2527, column: 3, scope: !7689)
!7752 = distinct !{!7752, !7692, !7753}
!7753 = !DILocation(line: 2536, column: 3, scope: !7685)
!7754 = !DILocation(line: 2537, column: 2, scope: !7686)
!7755 = !DILocation(line: 2526, column: 22, scope: !7680)
!7756 = !DILocation(line: 2526, column: 2, scope: !7680)
!7757 = distinct !{!7757, !7683, !7758}
!7758 = !DILocation(line: 2537, column: 2, scope: !7677)
!7759 = !DILocation(line: 2538, column: 25, scope: !7584)
!7760 = !DILocation(line: 2538, column: 2, scope: !7584)
!7761 = !DILocation(line: 2540, column: 6, scope: !7584)
!7762 = !DILocation(line: 2540, column: 10, scope: !7584)
!7763 = !DILocation(line: 2540, column: 4, scope: !7584)
!7764 = !DILocation(line: 2541, column: 2, scope: !7584)
!7765 = !DILocation(line: 2542, column: 7, scope: !7766)
!7766 = distinct !DILexicalBlock(scope: !7584, file: !1, line: 2541, column: 5)
!7767 = !DILocation(line: 2542, column: 10, scope: !7766)
!7768 = !DILocation(line: 2542, column: 5, scope: !7766)
!7769 = !DILocation(line: 2543, column: 26, scope: !7766)
!7770 = !DILocation(line: 2543, column: 7, scope: !7766)
!7771 = !DILocation(line: 2543, column: 5, scope: !7766)
!7772 = !DILocation(line: 2544, column: 27, scope: !7766)
!7773 = !DILocation(line: 2544, column: 30, scope: !7766)
!7774 = !DILocation(line: 2544, column: 8, scope: !7766)
!7775 = !DILocation(line: 2544, column: 6, scope: !7766)
!7776 = !DILocation(line: 2549, column: 10, scope: !7777)
!7777 = distinct !DILexicalBlock(scope: !7766, file: !1, line: 2549, column: 3)
!7778 = !DILocation(line: 2549, column: 8, scope: !7777)
!7779 = !DILocation(line: 2549, column: 15, scope: !7780)
!7780 = distinct !DILexicalBlock(scope: !7777, file: !1, line: 2549, column: 3)
!7781 = !DILocation(line: 2549, column: 19, scope: !7780)
!7782 = !DILocation(line: 2549, column: 17, scope: !7780)
!7783 = !DILocation(line: 2549, column: 3, scope: !7777)
!7784 = !DILocation(line: 2550, column: 11, scope: !7785)
!7785 = distinct !DILexicalBlock(scope: !7786, file: !1, line: 2550, column: 4)
!7786 = distinct !DILexicalBlock(scope: !7780, file: !1, line: 2549, column: 29)
!7787 = !DILocation(line: 2550, column: 9, scope: !7785)
!7788 = !DILocation(line: 2550, column: 16, scope: !7789)
!7789 = distinct !DILexicalBlock(scope: !7785, file: !1, line: 2550, column: 4)
!7790 = !DILocation(line: 2550, column: 20, scope: !7789)
!7791 = !DILocation(line: 2550, column: 26, scope: !7789)
!7792 = !DILocation(line: 2550, column: 24, scope: !7789)
!7793 = !DILocation(line: 2550, column: 18, scope: !7789)
!7794 = !DILocation(line: 2550, column: 4, scope: !7785)
!7795 = !DILocation(line: 2551, column: 22, scope: !7796)
!7796 = distinct !DILexicalBlock(scope: !7789, file: !1, line: 2550, column: 36)
!7797 = !DILocation(line: 2551, column: 26, scope: !7796)
!7798 = !DILocation(line: 2551, column: 29, scope: !7796)
!7799 = !DILocation(line: 2551, column: 32, scope: !7796)
!7800 = !DILocation(line: 2551, column: 12, scope: !7796)
!7801 = !DILocation(line: 2551, column: 36, scope: !7796)
!7802 = !DILocation(line: 2551, column: 10, scope: !7796)
!7803 = !DILocation(line: 2552, column: 22, scope: !7796)
!7804 = !DILocation(line: 2552, column: 26, scope: !7796)
!7805 = !DILocation(line: 2552, column: 29, scope: !7796)
!7806 = !DILocation(line: 2552, column: 32, scope: !7796)
!7807 = !DILocation(line: 2552, column: 34, scope: !7796)
!7808 = !DILocation(line: 2552, column: 12, scope: !7796)
!7809 = !DILocation(line: 2552, column: 40, scope: !7796)
!7810 = !DILocation(line: 2552, column: 10, scope: !7796)
!7811 = !DILocation(line: 2553, column: 22, scope: !7796)
!7812 = !DILocation(line: 2553, column: 26, scope: !7796)
!7813 = !DILocation(line: 2553, column: 29, scope: !7796)
!7814 = !DILocation(line: 2553, column: 31, scope: !7796)
!7815 = !DILocation(line: 2553, column: 36, scope: !7796)
!7816 = !DILocation(line: 2553, column: 38, scope: !7796)
!7817 = !DILocation(line: 2553, column: 12, scope: !7796)
!7818 = !DILocation(line: 2553, column: 44, scope: !7796)
!7819 = !DILocation(line: 2553, column: 10, scope: !7796)
!7820 = !DILocation(line: 2554, column: 22, scope: !7796)
!7821 = !DILocation(line: 2554, column: 26, scope: !7796)
!7822 = !DILocation(line: 2554, column: 29, scope: !7796)
!7823 = !DILocation(line: 2554, column: 31, scope: !7796)
!7824 = !DILocation(line: 2554, column: 36, scope: !7796)
!7825 = !DILocation(line: 2554, column: 12, scope: !7796)
!7826 = !DILocation(line: 2554, column: 40, scope: !7796)
!7827 = !DILocation(line: 2554, column: 10, scope: !7796)
!7828 = !DILocation(line: 2556, column: 11, scope: !7796)
!7829 = !DILocation(line: 2556, column: 9, scope: !7796)
!7830 = !DILocation(line: 2557, column: 9, scope: !7831)
!7831 = distinct !DILexicalBlock(scope: !7796, file: !1, line: 2557, column: 9)
!7832 = !DILocation(line: 2557, column: 13, scope: !7831)
!7833 = !DILocation(line: 2557, column: 16, scope: !7831)
!7834 = !DILocation(line: 2557, column: 21, scope: !7831)
!7835 = !DILocation(line: 2557, column: 18, scope: !7831)
!7836 = !DILocation(line: 2557, column: 25, scope: !7831)
!7837 = !DILocation(line: 2557, column: 28, scope: !7831)
!7838 = !DILocation(line: 2557, column: 31, scope: !7831)
!7839 = !DILocation(line: 2557, column: 35, scope: !7831)
!7840 = !DILocation(line: 2557, column: 38, scope: !7831)
!7841 = !DILocation(line: 2557, column: 9, scope: !7796)
!7842 = !DILocation(line: 2558, column: 12, scope: !7831)
!7843 = !DILocation(line: 2558, column: 10, scope: !7831)
!7844 = !DILocation(line: 2558, column: 6, scope: !7831)
!7845 = !DILocation(line: 2559, column: 28, scope: !7796)
!7846 = !DILocation(line: 2559, column: 32, scope: !7796)
!7847 = !DILocation(line: 2559, column: 38, scope: !7796)
!7848 = !DILocation(line: 2559, column: 44, scope: !7796)
!7849 = !DILocation(line: 2559, column: 50, scope: !7796)
!7850 = !DILocation(line: 2560, column: 28, scope: !7796)
!7851 = !DILocation(line: 2560, column: 31, scope: !7796)
!7852 = !DILocation(line: 2560, column: 36, scope: !7796)
!7853 = !DILocation(line: 2560, column: 41, scope: !7796)
!7854 = !DILocation(line: 2560, column: 44, scope: !7796)
!7855 = !DILocation(line: 2559, column: 5, scope: !7796)
!7856 = !DILocation(line: 2561, column: 4, scope: !7796)
!7857 = !DILocation(line: 2550, column: 32, scope: !7789)
!7858 = !DILocation(line: 2550, column: 4, scope: !7789)
!7859 = distinct !{!7859, !7794, !7860}
!7860 = !DILocation(line: 2561, column: 4, scope: !7785)
!7861 = !DILocation(line: 2562, column: 3, scope: !7786)
!7862 = !DILocation(line: 2549, column: 25, scope: !7780)
!7863 = !DILocation(line: 2549, column: 3, scope: !7780)
!7864 = distinct !{!7864, !7783, !7865}
!7865 = !DILocation(line: 2562, column: 3, scope: !7777)
!7866 = !DILocation(line: 2563, column: 2, scope: !7766)
!7867 = !DILocation(line: 2563, column: 16, scope: !7584)
!7868 = !DILocation(line: 2563, column: 19, scope: !7584)
!7869 = !DILocation(line: 2563, column: 14, scope: !7584)
!7870 = !DILocation(line: 2563, column: 28, scope: !7584)
!7871 = !DILocation(line: 2563, column: 32, scope: !7584)
!7872 = !DILocation(line: 2563, column: 25, scope: !7584)
!7873 = distinct !{!7873, !7764, !7874}
!7874 = !DILocation(line: 2563, column: 42, scope: !7584)
!7875 = !DILocation(line: 2566, column: 7, scope: !7876)
!7876 = distinct !DILexicalBlock(scope: !7584, file: !1, line: 2566, column: 6)
!7877 = !DILocation(line: 2566, column: 6, scope: !7584)
!7878 = !DILocation(line: 2567, column: 7, scope: !7879)
!7879 = distinct !DILexicalBlock(scope: !7876, file: !1, line: 2566, column: 12)
!7880 = !DILocation(line: 2567, column: 11, scope: !7879)
!7881 = !DILocation(line: 2567, column: 5, scope: !7879)
!7882 = !DILocation(line: 2568, column: 3, scope: !7879)
!7883 = !DILocation(line: 2569, column: 8, scope: !7884)
!7884 = distinct !DILexicalBlock(scope: !7879, file: !1, line: 2568, column: 6)
!7885 = !DILocation(line: 2569, column: 11, scope: !7884)
!7886 = !DILocation(line: 2569, column: 6, scope: !7884)
!7887 = !DILocation(line: 2570, column: 9, scope: !7888)
!7888 = distinct !DILexicalBlock(scope: !7884, file: !1, line: 2570, column: 8)
!7889 = !DILocation(line: 2570, column: 12, scope: !7888)
!7890 = !DILocation(line: 2570, column: 8, scope: !7884)
!7891 = !DILocation(line: 2571, column: 15, scope: !7892)
!7892 = distinct !DILexicalBlock(scope: !7893, file: !1, line: 2571, column: 5)
!7893 = distinct !DILexicalBlock(scope: !7888, file: !1, line: 2570, column: 22)
!7894 = !DILocation(line: 2571, column: 10, scope: !7892)
!7895 = !DILocation(line: 2571, column: 20, scope: !7896)
!7896 = distinct !DILexicalBlock(scope: !7892, file: !1, line: 2571, column: 5)
!7897 = !DILocation(line: 2571, column: 27, scope: !7896)
!7898 = !DILocation(line: 2571, column: 25, scope: !7896)
!7899 = !DILocation(line: 2571, column: 5, scope: !7892)
!7900 = !DILocalVariable(name: "v_uv", scope: !7901, file: !1, line: 2572, type: !51)
!7901 = distinct !DILexicalBlock(scope: !7896, file: !1, line: 2571, column: 40)
!7902 = !DILocation(line: 2572, column: 14, scope: !7901)
!7903 = !DILocation(line: 2572, column: 31, scope: !7901)
!7904 = !DILocation(line: 2572, column: 35, scope: !7901)
!7905 = !DILocation(line: 2572, column: 38, scope: !7901)
!7906 = !DILocation(line: 2572, column: 44, scope: !7901)
!7907 = !DILocation(line: 2572, column: 21, scope: !7901)
!7908 = !DILocation(line: 2572, column: 50, scope: !7901)
!7909 = !DILocation(line: 2573, column: 10, scope: !7910)
!7910 = distinct !DILexicalBlock(scope: !7901, file: !1, line: 2573, column: 10)
!7911 = !DILocation(line: 2573, column: 10, scope: !7901)
!7912 = !DILocation(line: 2574, column: 21, scope: !7913)
!7913 = distinct !DILexicalBlock(scope: !7910, file: !1, line: 2573, column: 16)
!7914 = !DILocation(line: 2574, column: 25, scope: !7913)
!7915 = !DILocation(line: 2574, column: 7, scope: !7913)
!7916 = !DILocation(line: 2575, column: 6, scope: !7913)
!7917 = !DILocation(line: 2576, column: 5, scope: !7901)
!7918 = !DILocation(line: 2571, column: 36, scope: !7896)
!7919 = !DILocation(line: 2571, column: 5, scope: !7896)
!7920 = distinct !{!7920, !7899, !7921}
!7921 = !DILocation(line: 2576, column: 5, scope: !7892)
!7922 = !DILocation(line: 2577, column: 4, scope: !7893)
!7923 = !DILocation(line: 2578, column: 3, scope: !7884)
!7924 = !DILocation(line: 2578, column: 17, scope: !7879)
!7925 = !DILocation(line: 2578, column: 20, scope: !7879)
!7926 = !DILocation(line: 2578, column: 15, scope: !7879)
!7927 = !DILocation(line: 2578, column: 29, scope: !7879)
!7928 = !DILocation(line: 2578, column: 33, scope: !7879)
!7929 = !DILocation(line: 2578, column: 26, scope: !7879)
!7930 = distinct !{!7930, !7882, !7931}
!7931 = !DILocation(line: 2578, column: 43, scope: !7879)
!7932 = !DILocation(line: 2579, column: 8, scope: !7933)
!7933 = distinct !DILexicalBlock(scope: !7879, file: !1, line: 2579, column: 7)
!7934 = !DILocation(line: 2579, column: 12, scope: !7933)
!7935 = !DILocation(line: 2579, column: 7, scope: !7879)
!7936 = !DILocation(line: 2580, column: 18, scope: !7933)
!7937 = !DILocation(line: 2580, column: 32, scope: !7933)
!7938 = !DILocation(line: 2580, column: 39, scope: !7933)
!7939 = !DILocation(line: 2580, column: 44, scope: !7933)
!7940 = !DILocation(line: 2580, column: 22, scope: !7933)
!7941 = !DILocation(line: 2580, column: 50, scope: !7933)
!7942 = !DILocation(line: 2580, column: 4, scope: !7933)
!7943 = !DILocation(line: 2581, column: 2, scope: !7879)
!7944 = !DILocation(line: 2584, column: 6, scope: !7945)
!7945 = distinct !DILexicalBlock(scope: !7584, file: !1, line: 2584, column: 6)
!7946 = !DILocation(line: 2584, column: 6, scope: !7584)
!7947 = !DILocalVariable(name: "vv", scope: !7948, file: !1, line: 2585, type: !341)
!7948 = distinct !DILexicalBlock(scope: !7945, file: !1, line: 2584, column: 11)
!7949 = !DILocation(line: 2585, column: 12, scope: !7948)
!7950 = !DILocalVariable(name: "vf", scope: !7948, file: !1, line: 2586, type: !313)
!7951 = !DILocation(line: 2586, column: 12, scope: !7948)
!7952 = !DILocalVariable(name: "_vv_count", scope: !7948, file: !1, line: 2587, type: !63)
!7953 = !DILocation(line: 2587, column: 3, scope: !7948)
!7954 = !DILocalVariable(name: "_vv_static", scope: !7948, file: !1, line: 2587, type: !7501)
!7955 = !DILocalVariable(name: "_vf_count", scope: !7948, file: !1, line: 2588, type: !63)
!7956 = !DILocation(line: 2588, column: 3, scope: !7948)
!7957 = !DILocalVariable(name: "_vf_static", scope: !7948, file: !1, line: 2588, type: !7501)
!7958 = !DILocation(line: 2590, column: 7, scope: !7948)
!7959 = !DILocation(line: 2590, column: 11, scope: !7948)
!7960 = !DILocation(line: 2590, column: 5, scope: !7948)
!7961 = !DILocation(line: 2591, column: 3, scope: !7948)
!7962 = !DILocation(line: 2592, column: 8, scope: !7963)
!7963 = distinct !DILexicalBlock(scope: !7948, file: !1, line: 2591, column: 6)
!7964 = !DILocation(line: 2592, column: 11, scope: !7963)
!7965 = !DILocation(line: 2592, column: 6, scope: !7963)
!7966 = !DILocation(line: 2593, column: 4, scope: !7963)
!7967 = !DILocation(line: 2594, column: 4, scope: !7963)
!7968 = !DILocation(line: 2595, column: 3, scope: !7963)
!7969 = !DILocation(line: 2595, column: 17, scope: !7948)
!7970 = !DILocation(line: 2595, column: 20, scope: !7948)
!7971 = !DILocation(line: 2595, column: 15, scope: !7948)
!7972 = !DILocation(line: 2595, column: 29, scope: !7948)
!7973 = !DILocation(line: 2595, column: 33, scope: !7948)
!7974 = !DILocation(line: 2595, column: 26, scope: !7948)
!7975 = distinct !{!7975, !7961, !7976}
!7976 = !DILocation(line: 2595, column: 43, scope: !7948)
!7977 = !DILocation(line: 2596, column: 26, scope: !7948)
!7978 = !DILocation(line: 2596, column: 30, scope: !7948)
!7979 = !DILocation(line: 2596, column: 7, scope: !7948)
!7980 = !DILocation(line: 2596, column: 5, scope: !7948)
!7981 = !DILocation(line: 2597, column: 19, scope: !7948)
!7982 = !DILocation(line: 2597, column: 23, scope: !7948)
!7983 = !DILocation(line: 2597, column: 27, scope: !7948)
!7984 = !DILocation(line: 2597, column: 48, scope: !7948)
!7985 = !DILocation(line: 2597, column: 52, scope: !7948)
!7986 = !DILocation(line: 2597, column: 55, scope: !7948)
!7987 = !DILocation(line: 2597, column: 3, scope: !7948)
!7988 = !DILocation(line: 2599, column: 3, scope: !7989)
!7989 = distinct !DILexicalBlock(scope: !7948, file: !1, line: 2599, column: 3)
!7990 = !DILocation(line: 2599, column: 3, scope: !7948)
!7991 = !DILocation(line: 2599, column: 3, scope: !7992)
!7992 = distinct !DILexicalBlock(scope: !7989, file: !1, line: 2599, column: 3)
!7993 = !DILocation(line: 2600, column: 2, scope: !7948)
!7994 = !DILocation(line: 2601, column: 1, scope: !7584)
!7995 = distinct !DISubprogram(name: "bevel_build_trifan", scope: !1, file: !1, line: 2642, type: !2703, scopeLine: 2643, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!7996 = !DILocalVariable(name: "bp", arg: 1, scope: !7995, file: !1, line: 2642, type: !801)
!7997 = !DILocation(line: 2642, column: 45, scope: !7995)
!7998 = !DILocalVariable(name: "bm", arg: 2, scope: !7995, file: !1, line: 2642, type: !321)
!7999 = !DILocation(line: 2642, column: 56, scope: !7995)
!8000 = !DILocalVariable(name: "bv", arg: 3, scope: !7995, file: !1, line: 2642, type: !283)
!8001 = !DILocation(line: 2642, column: 69, scope: !7995)
!8002 = !DILocalVariable(name: "f", scope: !7995, file: !1, line: 2644, type: !141)
!8003 = !DILocation(line: 2644, column: 10, scope: !7995)
!8004 = !DILocation(line: 2647, column: 23, scope: !7995)
!8005 = !DILocation(line: 2647, column: 27, scope: !7995)
!8006 = !DILocation(line: 2647, column: 31, scope: !7995)
!8007 = !DILocation(line: 2647, column: 6, scope: !7995)
!8008 = !DILocation(line: 2647, column: 4, scope: !7995)
!8009 = !DILocation(line: 2649, column: 6, scope: !8010)
!8010 = distinct !DILexicalBlock(scope: !7995, file: !1, line: 2649, column: 6)
!8011 = !DILocation(line: 2649, column: 6, scope: !7995)
!8012 = !DILocalVariable(name: "l_fan", scope: !8013, file: !1, line: 2651, type: !103)
!8013 = distinct !DILexicalBlock(scope: !8010, file: !1, line: 2649, column: 9)
!8014 = !DILocation(line: 2651, column: 11, scope: !8013)
!8015 = !DILocation(line: 2651, column: 19, scope: !8013)
!8016 = !DILocation(line: 2651, column: 42, scope: !8013)
!8017 = !DILocalVariable(name: "v_fan", scope: !8013, file: !1, line: 2652, type: !51)
!8018 = !DILocation(line: 2652, column: 11, scope: !8013)
!8019 = !DILocation(line: 2652, column: 19, scope: !8013)
!8020 = !DILocation(line: 2652, column: 26, scope: !8013)
!8021 = !DILocation(line: 2654, column: 3, scope: !8013)
!8022 = !DILocation(line: 2654, column: 10, scope: !8013)
!8023 = !DILocation(line: 2654, column: 13, scope: !8013)
!8024 = !DILocation(line: 2654, column: 17, scope: !8013)
!8025 = !DILocalVariable(name: "l_new", scope: !8026, file: !1, line: 2655, type: !103)
!8026 = distinct !DILexicalBlock(scope: !8013, file: !1, line: 2654, column: 22)
!8027 = !DILocation(line: 2655, column: 12, scope: !8026)
!8028 = !DILocalVariable(name: "f_new", scope: !8026, file: !1, line: 2656, type: !141)
!8029 = !DILocation(line: 2656, column: 12, scope: !8026)
!8030 = !DILocation(line: 2658, column: 26, scope: !8026)
!8031 = !DILocation(line: 2658, column: 30, scope: !8026)
!8032 = !DILocation(line: 2658, column: 33, scope: !8026)
!8033 = !DILocation(line: 2658, column: 40, scope: !8026)
!8034 = !DILocation(line: 2658, column: 47, scope: !8026)
!8035 = !DILocation(line: 2658, column: 53, scope: !8026)
!8036 = !DILocation(line: 2658, column: 12, scope: !8026)
!8037 = !DILocation(line: 2658, column: 10, scope: !8026)
!8038 = !DILocation(line: 2660, column: 8, scope: !8039)
!8039 = distinct !DILexicalBlock(scope: !8026, file: !1, line: 2660, column: 8)
!8040 = !DILocation(line: 2660, column: 15, scope: !8039)
!8041 = !DILocation(line: 2660, column: 21, scope: !8039)
!8042 = !DILocation(line: 2660, column: 24, scope: !8039)
!8043 = !DILocation(line: 2660, column: 19, scope: !8039)
!8044 = !DILocation(line: 2660, column: 8, scope: !8026)
!8045 = !DILocation(line: 2661, column: 9, scope: !8046)
!8046 = distinct !DILexicalBlock(scope: !8039, file: !1, line: 2660, column: 29)
!8047 = !DILocation(line: 2661, column: 7, scope: !8046)
!8048 = !DILocation(line: 2662, column: 14, scope: !8049)
!8049 = distinct !DILexicalBlock(scope: !8046, file: !1, line: 2662, column: 14)
!8050 = !DILocation(line: 2662, column: 21, scope: !8049)
!8051 = !DILocation(line: 2662, column: 32, scope: !8049)
!8052 = !DILocation(line: 2662, column: 29, scope: !8049)
!8053 = !DILocation(line: 2662, column: 14, scope: !8046)
!8054 = !DILocation(line: 2662, column: 49, scope: !8055)
!8055 = distinct !DILexicalBlock(scope: !8049, file: !1, line: 2662, column: 39)
!8056 = !DILocation(line: 2662, column: 47, scope: !8055)
!8057 = !DILocation(line: 2662, column: 56, scope: !8055)
!8058 = !DILocation(line: 2663, column: 14, scope: !8059)
!8059 = distinct !DILexicalBlock(scope: !8049, file: !1, line: 2663, column: 14)
!8060 = !DILocation(line: 2663, column: 21, scope: !8059)
!8061 = !DILocation(line: 2663, column: 27, scope: !8059)
!8062 = !DILocation(line: 2663, column: 32, scope: !8059)
!8063 = !DILocation(line: 2663, column: 29, scope: !8059)
!8064 = !DILocation(line: 2663, column: 14, scope: !8049)
!8065 = !DILocation(line: 2663, column: 49, scope: !8066)
!8066 = distinct !DILexicalBlock(scope: !8059, file: !1, line: 2663, column: 39)
!8067 = !DILocation(line: 2663, column: 56, scope: !8066)
!8068 = !DILocation(line: 2663, column: 47, scope: !8066)
!8069 = !DILocation(line: 2663, column: 62, scope: !8066)
!8070 = !DILocation(line: 2664, column: 14, scope: !8071)
!8071 = distinct !DILexicalBlock(scope: !8059, file: !1, line: 2664, column: 14)
!8072 = !DILocation(line: 2664, column: 21, scope: !8071)
!8073 = !DILocation(line: 2664, column: 27, scope: !8071)
!8074 = !DILocation(line: 2664, column: 32, scope: !8071)
!8075 = !DILocation(line: 2664, column: 29, scope: !8071)
!8076 = !DILocation(line: 2664, column: 14, scope: !8059)
!8077 = !DILocation(line: 2664, column: 49, scope: !8078)
!8078 = distinct !DILexicalBlock(scope: !8071, file: !1, line: 2664, column: 39)
!8079 = !DILocation(line: 2664, column: 56, scope: !8078)
!8080 = !DILocation(line: 2664, column: 47, scope: !8078)
!8081 = !DILocation(line: 2664, column: 62, scope: !8078)
!8082 = !DILocation(line: 2666, column: 4, scope: !8046)
!8083 = !DILocation(line: 2668, column: 14, scope: !8084)
!8084 = distinct !DILexicalBlock(scope: !8085, file: !1, line: 2668, column: 14)
!8085 = distinct !DILexicalBlock(scope: !8039, file: !1, line: 2667, column: 9)
!8086 = !DILocation(line: 2668, column: 21, scope: !8084)
!8087 = !DILocation(line: 2668, column: 32, scope: !8084)
!8088 = !DILocation(line: 2668, column: 29, scope: !8084)
!8089 = !DILocation(line: 2668, column: 14, scope: !8085)
!8090 = !DILocation(line: 2668, column: 62, scope: !8091)
!8091 = distinct !DILexicalBlock(scope: !8084, file: !1, line: 2668, column: 39)
!8092 = !DILocation(line: 2669, column: 14, scope: !8093)
!8093 = distinct !DILexicalBlock(scope: !8084, file: !1, line: 2669, column: 14)
!8094 = !DILocation(line: 2669, column: 21, scope: !8093)
!8095 = !DILocation(line: 2669, column: 27, scope: !8093)
!8096 = !DILocation(line: 2669, column: 32, scope: !8093)
!8097 = !DILocation(line: 2669, column: 29, scope: !8093)
!8098 = !DILocation(line: 2669, column: 14, scope: !8084)
!8099 = !DILocation(line: 2669, column: 49, scope: !8100)
!8100 = distinct !DILexicalBlock(scope: !8093, file: !1, line: 2669, column: 39)
!8101 = !DILocation(line: 2669, column: 56, scope: !8100)
!8102 = !DILocation(line: 2669, column: 47, scope: !8100)
!8103 = !DILocation(line: 2669, column: 62, scope: !8100)
!8104 = !DILocation(line: 2670, column: 14, scope: !8105)
!8105 = distinct !DILexicalBlock(scope: !8093, file: !1, line: 2670, column: 14)
!8106 = !DILocation(line: 2670, column: 21, scope: !8105)
!8107 = !DILocation(line: 2670, column: 27, scope: !8105)
!8108 = !DILocation(line: 2670, column: 32, scope: !8105)
!8109 = !DILocation(line: 2670, column: 29, scope: !8105)
!8110 = !DILocation(line: 2670, column: 14, scope: !8093)
!8111 = !DILocation(line: 2670, column: 49, scope: !8112)
!8112 = distinct !DILexicalBlock(scope: !8105, file: !1, line: 2670, column: 39)
!8113 = !DILocation(line: 2670, column: 56, scope: !8112)
!8114 = !DILocation(line: 2670, column: 47, scope: !8112)
!8115 = !DILocation(line: 2670, column: 62, scope: !8112)
!8116 = distinct !{!8116, !8021, !8117}
!8117 = !DILocation(line: 2673, column: 3, scope: !8013)
!8118 = !DILocation(line: 2674, column: 2, scope: !8013)
!8119 = !DILocation(line: 2675, column: 1, scope: !7995)
!8120 = distinct !DISubprogram(name: "bevel_build_quadstrip", scope: !1, file: !1, line: 2677, type: !2703, scopeLine: 2678, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!8121 = !DILocalVariable(name: "bp", arg: 1, scope: !8120, file: !1, line: 2677, type: !801)
!8122 = !DILocation(line: 2677, column: 48, scope: !8120)
!8123 = !DILocalVariable(name: "bm", arg: 2, scope: !8120, file: !1, line: 2677, type: !321)
!8124 = !DILocation(line: 2677, column: 59, scope: !8120)
!8125 = !DILocalVariable(name: "bv", arg: 3, scope: !8120, file: !1, line: 2677, type: !283)
!8126 = !DILocation(line: 2677, column: 72, scope: !8120)
!8127 = !DILocalVariable(name: "f", scope: !8120, file: !1, line: 2679, type: !141)
!8128 = !DILocation(line: 2679, column: 10, scope: !8120)
!8129 = !DILocation(line: 2682, column: 23, scope: !8120)
!8130 = !DILocation(line: 2682, column: 27, scope: !8120)
!8131 = !DILocation(line: 2682, column: 31, scope: !8120)
!8132 = !DILocation(line: 2682, column: 6, scope: !8120)
!8133 = !DILocation(line: 2682, column: 4, scope: !8120)
!8134 = !DILocation(line: 2684, column: 6, scope: !8135)
!8135 = distinct !DILexicalBlock(scope: !8120, file: !1, line: 2684, column: 6)
!8136 = !DILocation(line: 2684, column: 6, scope: !8120)
!8137 = !DILocalVariable(name: "eh_a", scope: !8138, file: !1, line: 2686, type: !130)
!8138 = distinct !DILexicalBlock(scope: !8135, file: !1, line: 2684, column: 9)
!8139 = !DILocation(line: 2686, column: 13, scope: !8138)
!8140 = !DILocation(line: 2686, column: 20, scope: !8138)
!8141 = !DILocation(line: 2686, column: 24, scope: !8138)
!8142 = !DILocation(line: 2686, column: 31, scope: !8138)
!8143 = !DILocation(line: 2686, column: 43, scope: !8138)
!8144 = !DILocalVariable(name: "eh_b", scope: !8138, file: !1, line: 2687, type: !130)
!8145 = !DILocation(line: 2687, column: 13, scope: !8138)
!8146 = !DILocation(line: 2687, column: 29, scope: !8138)
!8147 = !DILocation(line: 2687, column: 33, scope: !8138)
!8148 = !DILocation(line: 2687, column: 39, scope: !8138)
!8149 = !DILocation(line: 2687, column: 20, scope: !8138)
!8150 = !DILocalVariable(name: "l_a", scope: !8138, file: !1, line: 2688, type: !103)
!8151 = !DILocation(line: 2688, column: 11, scope: !8138)
!8152 = !DILocation(line: 2688, column: 41, scope: !8138)
!8153 = !DILocation(line: 2688, column: 44, scope: !8138)
!8154 = !DILocation(line: 2688, column: 50, scope: !8138)
!8155 = !DILocation(line: 2688, column: 58, scope: !8138)
!8156 = !DILocation(line: 2688, column: 61, scope: !8138)
!8157 = !DILocation(line: 2688, column: 17, scope: !8138)
!8158 = !DILocalVariable(name: "l_b", scope: !8138, file: !1, line: 2689, type: !103)
!8159 = !DILocation(line: 2689, column: 11, scope: !8138)
!8160 = !DILocation(line: 2689, column: 41, scope: !8138)
!8161 = !DILocation(line: 2689, column: 44, scope: !8138)
!8162 = !DILocation(line: 2689, column: 50, scope: !8138)
!8163 = !DILocation(line: 2689, column: 57, scope: !8138)
!8164 = !DILocation(line: 2689, column: 60, scope: !8138)
!8165 = !DILocation(line: 2689, column: 17, scope: !8138)
!8166 = !DILocalVariable(name: "split_count", scope: !8138, file: !1, line: 2690, type: !63)
!8167 = !DILocation(line: 2690, column: 7, scope: !8138)
!8168 = !DILocation(line: 2690, column: 21, scope: !8138)
!8169 = !DILocation(line: 2690, column: 25, scope: !8138)
!8170 = !DILocation(line: 2690, column: 32, scope: !8138)
!8171 = !DILocation(line: 2690, column: 36, scope: !8138)
!8172 = !DILocation(line: 2692, column: 3, scope: !8138)
!8173 = !DILocation(line: 2692, column: 10, scope: !8138)
!8174 = !DILocation(line: 2692, column: 13, scope: !8138)
!8175 = !DILocation(line: 2692, column: 17, scope: !8138)
!8176 = !DILocation(line: 2692, column: 21, scope: !8138)
!8177 = !DILocation(line: 2692, column: 24, scope: !8138)
!8178 = !DILocation(line: 2692, column: 36, scope: !8138)
!8179 = !DILocation(line: 0, scope: !8138)
!8180 = !DILocalVariable(name: "l_new", scope: !8181, file: !1, line: 2693, type: !103)
!8181 = distinct !DILexicalBlock(scope: !8138, file: !1, line: 2692, column: 41)
!8182 = !DILocation(line: 2693, column: 12, scope: !8181)
!8183 = !DILocation(line: 2697, column: 8, scope: !8184)
!8184 = distinct !DILexicalBlock(scope: !8181, file: !1, line: 2697, column: 8)
!8185 = !DILocation(line: 2697, column: 14, scope: !8184)
!8186 = !DILocation(line: 2697, column: 19, scope: !8184)
!8187 = !DILocation(line: 2697, column: 24, scope: !8184)
!8188 = !DILocation(line: 2697, column: 16, scope: !8184)
!8189 = !DILocation(line: 2697, column: 26, scope: !8184)
!8190 = !DILocation(line: 2697, column: 29, scope: !8184)
!8191 = !DILocation(line: 2697, column: 34, scope: !8184)
!8192 = !DILocation(line: 2697, column: 42, scope: !8184)
!8193 = !DILocation(line: 2697, column: 39, scope: !8184)
!8194 = !DILocation(line: 2697, column: 8, scope: !8181)
!8195 = !DILocation(line: 2699, column: 11, scope: !8196)
!8196 = distinct !DILexicalBlock(scope: !8184, file: !1, line: 2697, column: 47)
!8197 = !DILocation(line: 2699, column: 16, scope: !8196)
!8198 = !DILocation(line: 2699, column: 9, scope: !8196)
!8199 = !DILocation(line: 2700, column: 11, scope: !8196)
!8200 = !DILocation(line: 2700, column: 16, scope: !8196)
!8201 = !DILocation(line: 2700, column: 9, scope: !8196)
!8202 = !DILocation(line: 2701, column: 4, scope: !8196)
!8203 = !DILocation(line: 2703, column: 19, scope: !8204)
!8204 = distinct !DILexicalBlock(scope: !8184, file: !1, line: 2702, column: 9)
!8205 = !DILocation(line: 2703, column: 23, scope: !8204)
!8206 = !DILocation(line: 2703, column: 26, scope: !8204)
!8207 = !DILocation(line: 2703, column: 31, scope: !8204)
!8208 = !DILocation(line: 2703, column: 5, scope: !8204)
!8209 = !DILocation(line: 2704, column: 9, scope: !8204)
!8210 = !DILocation(line: 2704, column: 16, scope: !8204)
!8211 = !DILocation(line: 2704, column: 7, scope: !8204)
!8212 = !DILocation(line: 2707, column: 11, scope: !8204)
!8213 = !DILocation(line: 2707, column: 18, scope: !8204)
!8214 = !DILocation(line: 2707, column: 9, scope: !8204)
!8215 = !DILocation(line: 2708, column: 11, scope: !8204)
!8216 = !DILocation(line: 2708, column: 18, scope: !8204)
!8217 = !DILocation(line: 2708, column: 24, scope: !8204)
!8218 = !DILocation(line: 2708, column: 9, scope: !8204)
!8219 = !DILocation(line: 2710, column: 15, scope: !8181)
!8220 = distinct !{!8220, !8172, !8221}
!8221 = !DILocation(line: 2711, column: 3, scope: !8138)
!8222 = !DILocation(line: 2712, column: 2, scope: !8138)
!8223 = !DILocation(line: 2713, column: 1, scope: !8120)
!8224 = distinct !DISubprogram(name: "boundvert_rep_face", scope: !1, file: !1, line: 345, type: !8225, scopeLine: 346, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!8225 = !DISubroutineType(types: !8226)
!8226 = !{!141, !121}
!8227 = !DILocalVariable(name: "v", arg: 1, scope: !8224, file: !1, line: 345, type: !121)
!8228 = !DILocation(line: 345, column: 46, scope: !8224)
!8229 = !DILocation(line: 348, column: 6, scope: !8230)
!8230 = distinct !DILexicalBlock(scope: !8224, file: !1, line: 348, column: 6)
!8231 = !DILocation(line: 348, column: 9, scope: !8230)
!8232 = !DILocation(line: 348, column: 17, scope: !8230)
!8233 = !DILocation(line: 348, column: 26, scope: !8230)
!8234 = !DILocation(line: 348, column: 29, scope: !8230)
!8235 = !DILocation(line: 348, column: 36, scope: !8230)
!8236 = !DILocation(line: 348, column: 23, scope: !8230)
!8237 = !DILocation(line: 348, column: 6, scope: !8224)
!8238 = !DILocation(line: 349, column: 10, scope: !8230)
!8239 = !DILocation(line: 349, column: 13, scope: !8230)
!8240 = !DILocation(line: 349, column: 21, scope: !8230)
!8241 = !DILocation(line: 349, column: 3, scope: !8230)
!8242 = !DILocation(line: 350, column: 11, scope: !8243)
!8243 = distinct !DILexicalBlock(scope: !8230, file: !1, line: 350, column: 11)
!8244 = !DILocation(line: 350, column: 14, scope: !8243)
!8245 = !DILocation(line: 350, column: 22, scope: !8243)
!8246 = !DILocation(line: 350, column: 11, scope: !8230)
!8247 = !DILocation(line: 351, column: 10, scope: !8243)
!8248 = !DILocation(line: 351, column: 13, scope: !8243)
!8249 = !DILocation(line: 351, column: 21, scope: !8243)
!8250 = !DILocation(line: 351, column: 3, scope: !8243)
!8251 = !DILocation(line: 353, column: 10, scope: !8243)
!8252 = !DILocation(line: 353, column: 13, scope: !8243)
!8253 = !DILocation(line: 353, column: 20, scope: !8243)
!8254 = !DILocation(line: 353, column: 3, scope: !8243)
!8255 = !DILocation(line: 354, column: 1, scope: !8224)
!8256 = distinct !DISubprogram(name: "bev_create_ngon", scope: !1, file: !1, line: 364, type: !8257, scopeLine: 366, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!8257 = !DISubroutineType(types: !8258)
!8258 = !{!141, !321, !341, !460, !313, !141, !63, !152}
!8259 = !DILocalVariable(name: "bm", arg: 1, scope: !8256, file: !1, line: 364, type: !321)
!8260 = !DILocation(line: 364, column: 39, scope: !8256)
!8261 = !DILocalVariable(name: "vert_arr", arg: 2, scope: !8256, file: !1, line: 364, type: !341)
!8262 = !DILocation(line: 364, column: 52, scope: !8256)
!8263 = !DILocalVariable(name: "totv", arg: 3, scope: !8256, file: !1, line: 364, type: !460)
!8264 = !DILocation(line: 364, column: 72, scope: !8256)
!8265 = !DILocalVariable(name: "face_arr", arg: 4, scope: !8256, file: !1, line: 365, type: !313)
!8266 = !DILocation(line: 365, column: 41, scope: !8256)
!8267 = !DILocalVariable(name: "facerep", arg: 5, scope: !8256, file: !1, line: 365, type: !141)
!8268 = !DILocation(line: 365, column: 59, scope: !8256)
!8269 = !DILocalVariable(name: "mat_nr", arg: 6, scope: !8256, file: !1, line: 365, type: !63)
!8270 = !DILocation(line: 365, column: 72, scope: !8256)
!8271 = !DILocalVariable(name: "do_interp", arg: 7, scope: !8256, file: !1, line: 365, type: !152)
!8272 = !DILocation(line: 365, column: 85, scope: !8256)
!8273 = !DILocalVariable(name: "iter", scope: !8256, file: !1, line: 367, type: !499)
!8274 = !DILocation(line: 367, column: 9, scope: !8256)
!8275 = !DILocalVariable(name: "l", scope: !8256, file: !1, line: 368, type: !103)
!8276 = !DILocation(line: 368, column: 10, scope: !8256)
!8277 = !DILocalVariable(name: "f", scope: !8256, file: !1, line: 369, type: !141)
!8278 = !DILocation(line: 369, column: 10, scope: !8256)
!8279 = !DILocalVariable(name: "interp_f", scope: !8256, file: !1, line: 369, type: !141)
!8280 = !DILocation(line: 369, column: 14, scope: !8256)
!8281 = !DILocalVariable(name: "i", scope: !8256, file: !1, line: 370, type: !63)
!8282 = !DILocation(line: 370, column: 6, scope: !8256)
!8283 = !DILocation(line: 372, column: 27, scope: !8256)
!8284 = !DILocation(line: 372, column: 31, scope: !8256)
!8285 = !DILocation(line: 372, column: 41, scope: !8256)
!8286 = !DILocation(line: 372, column: 47, scope: !8256)
!8287 = !DILocation(line: 372, column: 6, scope: !8256)
!8288 = !DILocation(line: 372, column: 4, scope: !8256)
!8289 = !DILocation(line: 374, column: 7, scope: !8290)
!8290 = distinct !DILexicalBlock(scope: !8256, file: !1, line: 374, column: 6)
!8291 = !DILocation(line: 374, column: 15, scope: !8290)
!8292 = !DILocation(line: 374, column: 19, scope: !8290)
!8293 = !DILocation(line: 374, column: 28, scope: !8290)
!8294 = !DILocation(line: 374, column: 31, scope: !8290)
!8295 = !DILocation(line: 374, column: 45, scope: !8290)
!8296 = !DILocation(line: 374, column: 48, scope: !8290)
!8297 = !DILocation(line: 374, column: 6, scope: !8256)
!8298 = !DILocation(line: 375, column: 22, scope: !8299)
!8299 = distinct !DILexicalBlock(scope: !8290, file: !1, line: 374, column: 51)
!8300 = !DILocation(line: 375, column: 26, scope: !8299)
!8301 = !DILocation(line: 375, column: 30, scope: !8299)
!8302 = !DILocation(line: 375, column: 40, scope: !8299)
!8303 = !DILocation(line: 375, column: 50, scope: !8299)
!8304 = !DILocation(line: 375, column: 63, scope: !8299)
!8305 = !DILocation(line: 375, column: 3, scope: !8299)
!8306 = !DILocation(line: 376, column: 7, scope: !8307)
!8307 = distinct !DILexicalBlock(scope: !8299, file: !1, line: 376, column: 7)
!8308 = !DILocation(line: 376, column: 7, scope: !8299)
!8309 = !DILocation(line: 377, column: 6, scope: !8310)
!8310 = distinct !DILexicalBlock(scope: !8307, file: !1, line: 376, column: 18)
!8311 = !DILocation(line: 378, column: 4, scope: !8312)
!8312 = distinct !DILexicalBlock(scope: !8310, file: !1, line: 378, column: 4)
!8313 = !DILocation(line: 378, column: 4, scope: !8314)
!8314 = distinct !DILexicalBlock(scope: !8312, file: !1, line: 378, column: 4)
!8315 = !DILocation(line: 379, column: 9, scope: !8316)
!8316 = distinct !DILexicalBlock(scope: !8317, file: !1, line: 379, column: 9)
!8317 = distinct !DILexicalBlock(scope: !8314, file: !1, line: 378, column: 49)
!8318 = !DILocation(line: 379, column: 9, scope: !8317)
!8319 = !DILocation(line: 382, column: 17, scope: !8320)
!8320 = distinct !DILexicalBlock(scope: !8316, file: !1, line: 379, column: 19)
!8321 = !DILocation(line: 382, column: 26, scope: !8320)
!8322 = !DILocation(line: 382, column: 15, scope: !8320)
!8323 = !DILocation(line: 383, column: 5, scope: !8320)
!8324 = !DILocation(line: 385, column: 17, scope: !8325)
!8325 = distinct !DILexicalBlock(scope: !8316, file: !1, line: 384, column: 10)
!8326 = !DILocation(line: 385, column: 15, scope: !8325)
!8327 = !DILocation(line: 387, column: 9, scope: !8328)
!8328 = distinct !DILexicalBlock(scope: !8317, file: !1, line: 387, column: 9)
!8329 = !DILocation(line: 387, column: 9, scope: !8317)
!8330 = !DILocation(line: 388, column: 31, scope: !8328)
!8331 = !DILocation(line: 388, column: 35, scope: !8328)
!8332 = !DILocation(line: 388, column: 38, scope: !8328)
!8333 = !DILocation(line: 388, column: 6, scope: !8328)
!8334 = !DILocation(line: 389, column: 6, scope: !8317)
!8335 = !DILocation(line: 390, column: 4, scope: !8317)
!8336 = distinct !{!8336, !8311, !8337}
!8337 = !DILocation(line: 390, column: 4, scope: !8312)
!8338 = !DILocation(line: 391, column: 3, scope: !8310)
!8339 = !DILocation(line: 392, column: 2, scope: !8299)
!8340 = !DILocation(line: 396, column: 6, scope: !8341)
!8341 = distinct !DILexicalBlock(scope: !8256, file: !1, line: 396, column: 6)
!8342 = !DILocation(line: 396, column: 6, scope: !8256)
!8343 = !DILocation(line: 397, column: 3, scope: !8344)
!8344 = distinct !DILexicalBlock(scope: !8341, file: !1, line: 396, column: 9)
!8345 = !DILocation(line: 398, column: 2, scope: !8344)
!8346 = !DILocation(line: 400, column: 6, scope: !8347)
!8347 = distinct !DILexicalBlock(scope: !8256, file: !1, line: 400, column: 6)
!8348 = !DILocation(line: 400, column: 13, scope: !8347)
!8349 = !DILocation(line: 400, column: 6, scope: !8256)
!8350 = !DILocation(line: 401, column: 15, scope: !8347)
!8351 = !DILocation(line: 401, column: 3, scope: !8347)
!8352 = !DILocation(line: 401, column: 6, scope: !8347)
!8353 = !DILocation(line: 401, column: 13, scope: !8347)
!8354 = !DILocation(line: 402, column: 9, scope: !8256)
!8355 = !DILocation(line: 402, column: 2, scope: !8256)
!8356 = distinct !DISubprogram(name: "_bm_elem_flag_enable", scope: !1025, file: !1025, line: 52, type: !4456, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!8357 = !DILocalVariable(name: "head", arg: 1, scope: !8356, file: !1025, line: 52, type: !4458)
!8358 = !DILocation(line: 52, column: 48, scope: !8356)
!8359 = !DILocalVariable(name: "hflag", arg: 2, scope: !8356, file: !1025, line: 52, type: !361)
!8360 = !DILocation(line: 52, column: 65, scope: !8356)
!8361 = !DILocation(line: 54, column: 17, scope: !8356)
!8362 = !DILocation(line: 54, column: 2, scope: !8356)
!8363 = !DILocation(line: 54, column: 8, scope: !8356)
!8364 = !DILocation(line: 54, column: 14, scope: !8356)
!8365 = !DILocation(line: 55, column: 1, scope: !8356)
!8366 = distinct !DISubprogram(name: "pipe_test", scope: !1, file: !1, line: 1704, type: !8367, scopeLine: 1705, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!8367 = !DISubroutineType(types: !8368)
!8368 = !{!121, !283}
!8369 = !DILocalVariable(name: "bv", arg: 1, scope: !8366, file: !1, line: 1704, type: !283)
!8370 = !DILocation(line: 1704, column: 38, scope: !8366)
!8371 = !DILocalVariable(name: "e", scope: !8366, file: !1, line: 1706, type: !130)
!8372 = !DILocation(line: 1706, column: 12, scope: !8366)
!8373 = !DILocalVariable(name: "epipe", scope: !8366, file: !1, line: 1706, type: !130)
!8374 = !DILocation(line: 1706, column: 16, scope: !8366)
!8375 = !DILocalVariable(name: "vm", scope: !8366, file: !1, line: 1707, type: !298)
!8376 = !DILocation(line: 1707, column: 9, scope: !8366)
!8377 = !DILocalVariable(name: "v1", scope: !8366, file: !1, line: 1708, type: !121)
!8378 = !DILocation(line: 1708, column: 13, scope: !8366)
!8379 = !DILocalVariable(name: "v2", scope: !8366, file: !1, line: 1708, type: !121)
!8380 = !DILocation(line: 1708, column: 18, scope: !8366)
!8381 = !DILocalVariable(name: "v3", scope: !8366, file: !1, line: 1708, type: !121)
!8382 = !DILocation(line: 1708, column: 23, scope: !8366)
!8383 = !DILocalVariable(name: "dir1", scope: !8366, file: !1, line: 1709, type: !75)
!8384 = !DILocation(line: 1709, column: 8, scope: !8366)
!8385 = !DILocalVariable(name: "dir3", scope: !8366, file: !1, line: 1709, type: !75)
!8386 = !DILocation(line: 1709, column: 17, scope: !8366)
!8387 = !DILocation(line: 1711, column: 7, scope: !8366)
!8388 = !DILocation(line: 1711, column: 11, scope: !8366)
!8389 = !DILocation(line: 1711, column: 5, scope: !8366)
!8390 = !DILocation(line: 1712, column: 6, scope: !8391)
!8391 = distinct !DILexicalBlock(scope: !8366, file: !1, line: 1712, column: 6)
!8392 = !DILocation(line: 1712, column: 10, scope: !8391)
!8393 = !DILocation(line: 1712, column: 16, scope: !8391)
!8394 = !DILocation(line: 1712, column: 20, scope: !8391)
!8395 = !DILocation(line: 1712, column: 23, scope: !8391)
!8396 = !DILocation(line: 1712, column: 27, scope: !8391)
!8397 = !DILocation(line: 1712, column: 33, scope: !8391)
!8398 = !DILocation(line: 1712, column: 37, scope: !8391)
!8399 = !DILocation(line: 1712, column: 40, scope: !8391)
!8400 = !DILocation(line: 1712, column: 44, scope: !8391)
!8401 = !DILocation(line: 1712, column: 53, scope: !8391)
!8402 = !DILocation(line: 1712, column: 57, scope: !8391)
!8403 = !DILocation(line: 1712, column: 60, scope: !8391)
!8404 = !DILocation(line: 1712, column: 64, scope: !8391)
!8405 = !DILocation(line: 1712, column: 73, scope: !8391)
!8406 = !DILocation(line: 1712, column: 6, scope: !8366)
!8407 = !DILocation(line: 1713, column: 3, scope: !8391)
!8408 = !DILocation(line: 1716, column: 8, scope: !8366)
!8409 = !DILocation(line: 1717, column: 7, scope: !8366)
!8410 = !DILocation(line: 1717, column: 11, scope: !8366)
!8411 = !DILocation(line: 1717, column: 5, scope: !8366)
!8412 = !DILocation(line: 1718, column: 2, scope: !8366)
!8413 = !DILocation(line: 1719, column: 8, scope: !8414)
!8414 = distinct !DILexicalBlock(scope: !8366, file: !1, line: 1718, column: 5)
!8415 = !DILocation(line: 1719, column: 12, scope: !8414)
!8416 = !DILocation(line: 1719, column: 6, scope: !8414)
!8417 = !DILocation(line: 1720, column: 8, scope: !8414)
!8418 = !DILocation(line: 1720, column: 12, scope: !8414)
!8419 = !DILocation(line: 1720, column: 6, scope: !8414)
!8420 = !DILocation(line: 1721, column: 7, scope: !8421)
!8421 = distinct !DILexicalBlock(scope: !8414, file: !1, line: 1721, column: 7)
!8422 = !DILocation(line: 1721, column: 11, scope: !8421)
!8423 = !DILocation(line: 1721, column: 16, scope: !8421)
!8424 = !DILocation(line: 1721, column: 19, scope: !8421)
!8425 = !DILocation(line: 1721, column: 23, scope: !8421)
!8426 = !DILocation(line: 1721, column: 28, scope: !8421)
!8427 = !DILocation(line: 1721, column: 31, scope: !8421)
!8428 = !DILocation(line: 1721, column: 35, scope: !8421)
!8429 = !DILocation(line: 1721, column: 7, scope: !8414)
!8430 = !DILocation(line: 1722, column: 16, scope: !8431)
!8431 = distinct !DILexicalBlock(scope: !8421, file: !1, line: 1721, column: 41)
!8432 = !DILocation(line: 1722, column: 22, scope: !8431)
!8433 = !DILocation(line: 1722, column: 26, scope: !8431)
!8434 = !DILocation(line: 1722, column: 29, scope: !8431)
!8435 = !DILocation(line: 1722, column: 52, scope: !8431)
!8436 = !DILocation(line: 1722, column: 56, scope: !8431)
!8437 = !DILocation(line: 1722, column: 62, scope: !8431)
!8438 = !DILocation(line: 1722, column: 65, scope: !8431)
!8439 = !DILocation(line: 1722, column: 69, scope: !8431)
!8440 = !DILocation(line: 1722, column: 33, scope: !8431)
!8441 = !DILocation(line: 1722, column: 73, scope: !8431)
!8442 = !DILocation(line: 1722, column: 4, scope: !8431)
!8443 = !DILocation(line: 1723, column: 16, scope: !8431)
!8444 = !DILocation(line: 1723, column: 41, scope: !8431)
!8445 = !DILocation(line: 1723, column: 45, scope: !8431)
!8446 = !DILocation(line: 1723, column: 51, scope: !8431)
!8447 = !DILocation(line: 1723, column: 54, scope: !8431)
!8448 = !DILocation(line: 1723, column: 58, scope: !8431)
!8449 = !DILocation(line: 1723, column: 22, scope: !8431)
!8450 = !DILocation(line: 1723, column: 62, scope: !8431)
!8451 = !DILocation(line: 1723, column: 66, scope: !8431)
!8452 = !DILocation(line: 1723, column: 70, scope: !8431)
!8453 = !DILocation(line: 1723, column: 73, scope: !8431)
!8454 = !DILocation(line: 1723, column: 4, scope: !8431)
!8455 = !DILocation(line: 1724, column: 17, scope: !8431)
!8456 = !DILocation(line: 1724, column: 4, scope: !8431)
!8457 = !DILocation(line: 1725, column: 17, scope: !8431)
!8458 = !DILocation(line: 1725, column: 4, scope: !8431)
!8459 = !DILocation(line: 1726, column: 30, scope: !8460)
!8460 = distinct !DILexicalBlock(scope: !8431, file: !1, line: 1726, column: 8)
!8461 = !DILocation(line: 1726, column: 36, scope: !8460)
!8462 = !DILocation(line: 1726, column: 8, scope: !8460)
!8463 = !DILocation(line: 1726, column: 42, scope: !8460)
!8464 = !DILocation(line: 1726, column: 8, scope: !8431)
!8465 = !DILocation(line: 1727, column: 14, scope: !8466)
!8466 = distinct !DILexicalBlock(scope: !8460, file: !1, line: 1726, column: 63)
!8467 = !DILocation(line: 1727, column: 18, scope: !8466)
!8468 = !DILocation(line: 1727, column: 11, scope: !8466)
!8469 = !DILocation(line: 1728, column: 5, scope: !8466)
!8470 = !DILocation(line: 1730, column: 3, scope: !8431)
!8471 = !DILocation(line: 1731, column: 2, scope: !8414)
!8472 = !DILocation(line: 1731, column: 17, scope: !8366)
!8473 = !DILocation(line: 1731, column: 21, scope: !8366)
!8474 = !DILocation(line: 1731, column: 15, scope: !8366)
!8475 = !DILocation(line: 1731, column: 30, scope: !8366)
!8476 = !DILocation(line: 1731, column: 34, scope: !8366)
!8477 = !DILocation(line: 1731, column: 27, scope: !8366)
!8478 = distinct !{!8478, !8412, !8479}
!8479 = !DILocation(line: 1731, column: 44, scope: !8366)
!8480 = !DILocation(line: 1733, column: 7, scope: !8481)
!8481 = distinct !DILexicalBlock(scope: !8366, file: !1, line: 1733, column: 6)
!8482 = !DILocation(line: 1733, column: 6, scope: !8366)
!8483 = !DILocation(line: 1734, column: 3, scope: !8481)
!8484 = !DILocation(line: 1737, column: 12, scope: !8485)
!8485 = distinct !DILexicalBlock(scope: !8366, file: !1, line: 1737, column: 2)
!8486 = !DILocation(line: 1737, column: 16, scope: !8485)
!8487 = !DILocation(line: 1737, column: 9, scope: !8485)
!8488 = !DILocation(line: 1737, column: 7, scope: !8485)
!8489 = !DILocation(line: 1737, column: 26, scope: !8490)
!8490 = distinct !DILexicalBlock(scope: !8485, file: !1, line: 1737, column: 2)
!8491 = !DILocation(line: 1737, column: 32, scope: !8490)
!8492 = !DILocation(line: 1737, column: 36, scope: !8490)
!8493 = !DILocation(line: 1737, column: 42, scope: !8490)
!8494 = !DILocation(line: 1737, column: 46, scope: !8490)
!8495 = !DILocation(line: 1737, column: 28, scope: !8490)
!8496 = !DILocation(line: 1737, column: 2, scope: !8485)
!8497 = !DILocation(line: 1738, column: 7, scope: !8498)
!8498 = distinct !DILexicalBlock(scope: !8499, file: !1, line: 1738, column: 7)
!8499 = distinct !DILexicalBlock(scope: !8490, file: !1, line: 1737, column: 63)
!8500 = !DILocation(line: 1738, column: 10, scope: !8498)
!8501 = !DILocation(line: 1738, column: 7, scope: !8499)
!8502 = !DILocation(line: 1739, column: 17, scope: !8503)
!8503 = distinct !DILexicalBlock(scope: !8504, file: !1, line: 1739, column: 8)
!8504 = distinct !DILexicalBlock(scope: !8498, file: !1, line: 1738, column: 17)
!8505 = !DILocation(line: 1739, column: 23, scope: !8503)
!8506 = !DILocation(line: 1739, column: 26, scope: !8503)
!8507 = !DILocation(line: 1739, column: 33, scope: !8503)
!8508 = !DILocation(line: 1739, column: 8, scope: !8503)
!8509 = !DILocation(line: 1739, column: 37, scope: !8503)
!8510 = !DILocation(line: 1739, column: 8, scope: !8504)
!8511 = !DILocation(line: 1740, column: 5, scope: !8503)
!8512 = !DILocation(line: 1741, column: 3, scope: !8504)
!8513 = !DILocation(line: 1742, column: 2, scope: !8499)
!8514 = !DILocation(line: 1737, column: 59, scope: !8490)
!8515 = !DILocation(line: 1737, column: 2, scope: !8490)
!8516 = distinct !{!8516, !8496, !8517}
!8517 = !DILocation(line: 1742, column: 2, scope: !8485)
!8518 = !DILocation(line: 1743, column: 9, scope: !8366)
!8519 = !DILocation(line: 1743, column: 2, scope: !8366)
!8520 = !DILocation(line: 1744, column: 1, scope: !8366)
!8521 = distinct !DISubprogram(name: "pipe_adj_vmesh", scope: !1, file: !1, line: 2465, type: !8522, scopeLine: 2466, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!8522 = !DISubroutineType(types: !8523)
!8523 = !{!298, !801, !283, !121}
!8524 = !DILocalVariable(name: "bp", arg: 1, scope: !8521, file: !1, line: 2465, type: !801)
!8525 = !DILocation(line: 2465, column: 43, scope: !8521)
!8526 = !DILocalVariable(name: "bv", arg: 2, scope: !8521, file: !1, line: 2465, type: !283)
!8527 = !DILocation(line: 2465, column: 56, scope: !8521)
!8528 = !DILocalVariable(name: "vpipe", arg: 3, scope: !8521, file: !1, line: 2465, type: !121)
!8529 = !DILocation(line: 2465, column: 71, scope: !8521)
!8530 = !DILocalVariable(name: "i", scope: !8521, file: !1, line: 2467, type: !63)
!8531 = !DILocation(line: 2467, column: 6, scope: !8521)
!8532 = !DILocalVariable(name: "j", scope: !8521, file: !1, line: 2467, type: !63)
!8533 = !DILocation(line: 2467, column: 9, scope: !8521)
!8534 = !DILocalVariable(name: "k", scope: !8521, file: !1, line: 2467, type: !63)
!8535 = !DILocation(line: 2467, column: 12, scope: !8521)
!8536 = !DILocalVariable(name: "n", scope: !8521, file: !1, line: 2467, type: !63)
!8537 = !DILocation(line: 2467, column: 15, scope: !8521)
!8538 = !DILocalVariable(name: "ns", scope: !8521, file: !1, line: 2467, type: !63)
!8539 = !DILocation(line: 2467, column: 18, scope: !8521)
!8540 = !DILocalVariable(name: "ns2", scope: !8521, file: !1, line: 2467, type: !63)
!8541 = !DILocation(line: 2467, column: 22, scope: !8521)
!8542 = !DILocalVariable(name: "ipipe1", scope: !8521, file: !1, line: 2467, type: !63)
!8543 = !DILocation(line: 2467, column: 27, scope: !8521)
!8544 = !DILocalVariable(name: "ipipe2", scope: !8521, file: !1, line: 2467, type: !63)
!8545 = !DILocation(line: 2467, column: 35, scope: !8521)
!8546 = !DILocalVariable(name: "vm", scope: !8521, file: !1, line: 2468, type: !298)
!8547 = !DILocation(line: 2468, column: 9, scope: !8521)
!8548 = !DILocalVariable(name: "even", scope: !8521, file: !1, line: 2469, type: !152)
!8549 = !DILocation(line: 2469, column: 7, scope: !8521)
!8550 = !DILocalVariable(name: "midline", scope: !8521, file: !1, line: 2469, type: !152)
!8551 = !DILocation(line: 2469, column: 13, scope: !8521)
!8552 = !DILocation(line: 2471, column: 17, scope: !8521)
!8553 = !DILocation(line: 2471, column: 21, scope: !8521)
!8554 = !DILocation(line: 2471, column: 7, scope: !8521)
!8555 = !DILocation(line: 2471, column: 5, scope: !8521)
!8556 = !DILocation(line: 2474, column: 6, scope: !8521)
!8557 = !DILocation(line: 2474, column: 10, scope: !8521)
!8558 = !DILocation(line: 2474, column: 17, scope: !8521)
!8559 = !DILocation(line: 2474, column: 4, scope: !8521)
!8560 = !DILocation(line: 2475, column: 7, scope: !8521)
!8561 = !DILocation(line: 2475, column: 11, scope: !8521)
!8562 = !DILocation(line: 2475, column: 18, scope: !8521)
!8563 = !DILocation(line: 2475, column: 5, scope: !8521)
!8564 = !DILocation(line: 2476, column: 8, scope: !8521)
!8565 = !DILocation(line: 2476, column: 11, scope: !8521)
!8566 = !DILocation(line: 2476, column: 6, scope: !8521)
!8567 = !DILocation(line: 2477, column: 10, scope: !8521)
!8568 = !DILocation(line: 2477, column: 13, scope: !8521)
!8569 = !DILocation(line: 2477, column: 18, scope: !8521)
!8570 = !DILocation(line: 2477, column: 9, scope: !8521)
!8571 = !DILocation(line: 2477, column: 7, scope: !8521)
!8572 = !DILocation(line: 2478, column: 11, scope: !8521)
!8573 = !DILocation(line: 2478, column: 18, scope: !8521)
!8574 = !DILocation(line: 2478, column: 9, scope: !8521)
!8575 = !DILocation(line: 2479, column: 11, scope: !8521)
!8576 = !DILocation(line: 2479, column: 18, scope: !8521)
!8577 = !DILocation(line: 2479, column: 24, scope: !8521)
!8578 = !DILocation(line: 2479, column: 30, scope: !8521)
!8579 = !DILocation(line: 2479, column: 9, scope: !8521)
!8580 = !DILocation(line: 2480, column: 9, scope: !8581)
!8581 = distinct !DILexicalBlock(scope: !8521, file: !1, line: 2480, column: 2)
!8582 = !DILocation(line: 2480, column: 7, scope: !8581)
!8583 = !DILocation(line: 2480, column: 14, scope: !8584)
!8584 = distinct !DILexicalBlock(scope: !8581, file: !1, line: 2480, column: 2)
!8585 = !DILocation(line: 2480, column: 18, scope: !8584)
!8586 = !DILocation(line: 2480, column: 16, scope: !8584)
!8587 = !DILocation(line: 2480, column: 2, scope: !8581)
!8588 = !DILocation(line: 2481, column: 10, scope: !8589)
!8589 = distinct !DILexicalBlock(scope: !8590, file: !1, line: 2481, column: 3)
!8590 = distinct !DILexicalBlock(scope: !8584, file: !1, line: 2480, column: 26)
!8591 = !DILocation(line: 2481, column: 8, scope: !8589)
!8592 = !DILocation(line: 2481, column: 15, scope: !8593)
!8593 = distinct !DILexicalBlock(scope: !8589, file: !1, line: 2481, column: 3)
!8594 = !DILocation(line: 2481, column: 20, scope: !8593)
!8595 = !DILocation(line: 2481, column: 17, scope: !8593)
!8596 = !DILocation(line: 2481, column: 3, scope: !8589)
!8597 = !DILocation(line: 2482, column: 11, scope: !8598)
!8598 = distinct !DILexicalBlock(scope: !8599, file: !1, line: 2482, column: 4)
!8599 = distinct !DILexicalBlock(scope: !8593, file: !1, line: 2481, column: 30)
!8600 = !DILocation(line: 2482, column: 9, scope: !8598)
!8601 = !DILocation(line: 2482, column: 16, scope: !8602)
!8602 = distinct !DILexicalBlock(scope: !8598, file: !1, line: 2482, column: 4)
!8603 = !DILocation(line: 2482, column: 21, scope: !8602)
!8604 = !DILocation(line: 2482, column: 18, scope: !8602)
!8605 = !DILocation(line: 2482, column: 4, scope: !8598)
!8606 = !DILocation(line: 2483, column: 19, scope: !8607)
!8607 = distinct !DILexicalBlock(scope: !8608, file: !1, line: 2483, column: 9)
!8608 = distinct !DILexicalBlock(scope: !8602, file: !1, line: 2482, column: 31)
!8609 = !DILocation(line: 2483, column: 23, scope: !8607)
!8610 = !DILocation(line: 2483, column: 26, scope: !8607)
!8611 = !DILocation(line: 2483, column: 29, scope: !8607)
!8612 = !DILocation(line: 2483, column: 10, scope: !8607)
!8613 = !DILocation(line: 2483, column: 9, scope: !8608)
!8614 = !DILocation(line: 2484, column: 6, scope: !8607)
!8615 = !DILocation(line: 2485, column: 15, scope: !8608)
!8616 = !DILocation(line: 2485, column: 20, scope: !8608)
!8617 = !DILocation(line: 2485, column: 23, scope: !8608)
!8618 = !DILocation(line: 2485, column: 28, scope: !8608)
!8619 = !DILocation(line: 2485, column: 25, scope: !8608)
!8620 = !DILocation(line: 2485, column: 32, scope: !8608)
!8621 = !DILocation(line: 2486, column: 17, scope: !8608)
!8622 = !DILocation(line: 2486, column: 19, scope: !8608)
!8623 = !DILocation(line: 2486, column: 24, scope: !8608)
!8624 = !DILocation(line: 2486, column: 27, scope: !8608)
!8625 = !DILocation(line: 2486, column: 32, scope: !8608)
!8626 = !DILocation(line: 2486, column: 29, scope: !8608)
!8627 = !DILocation(line: 2486, column: 37, scope: !8608)
!8628 = !DILocation(line: 2486, column: 41, scope: !8608)
!8629 = !DILocation(line: 2486, column: 46, scope: !8608)
!8630 = !DILocation(line: 2486, column: 43, scope: !8608)
!8631 = !DILocation(line: 2486, column: 53, scope: !8608)
!8632 = !DILocation(line: 2486, column: 56, scope: !8608)
!8633 = !DILocation(line: 2486, column: 61, scope: !8608)
!8634 = !DILocation(line: 2486, column: 58, scope: !8608)
!8635 = !DILocation(line: 0, scope: !8608)
!8636 = !DILocation(line: 2485, column: 13, scope: !8608)
!8637 = !DILocation(line: 2487, column: 26, scope: !8608)
!8638 = !DILocation(line: 2487, column: 33, scope: !8608)
!8639 = !DILocation(line: 2487, column: 52, scope: !8608)
!8640 = !DILocation(line: 2487, column: 56, scope: !8608)
!8641 = !DILocation(line: 2487, column: 59, scope: !8608)
!8642 = !DILocation(line: 2487, column: 62, scope: !8608)
!8643 = !DILocation(line: 2487, column: 42, scope: !8608)
!8644 = !DILocation(line: 2487, column: 66, scope: !8608)
!8645 = !DILocation(line: 2487, column: 5, scope: !8608)
!8646 = !DILocation(line: 2488, column: 4, scope: !8608)
!8647 = !DILocation(line: 2482, column: 27, scope: !8602)
!8648 = !DILocation(line: 2482, column: 4, scope: !8602)
!8649 = distinct !{!8649, !8605, !8650}
!8650 = !DILocation(line: 2488, column: 4, scope: !8598)
!8651 = !DILocation(line: 2489, column: 3, scope: !8599)
!8652 = !DILocation(line: 2481, column: 26, scope: !8593)
!8653 = !DILocation(line: 2481, column: 3, scope: !8593)
!8654 = distinct !{!8654, !8596, !8655}
!8655 = !DILocation(line: 2489, column: 3, scope: !8589)
!8656 = !DILocation(line: 2490, column: 2, scope: !8590)
!8657 = !DILocation(line: 2480, column: 22, scope: !8584)
!8658 = !DILocation(line: 2480, column: 2, scope: !8584)
!8659 = distinct !{!8659, !8587, !8660}
!8660 = !DILocation(line: 2490, column: 2, scope: !8581)
!8661 = !DILocation(line: 2492, column: 9, scope: !8521)
!8662 = !DILocation(line: 2492, column: 2, scope: !8521)
!8663 = distinct !DISubprogram(name: "tri_corner_test", scope: !1, file: !1, line: 2299, type: !8664, scopeLine: 2300, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!8664 = !DISubroutineType(types: !8665)
!8665 = !{!152, !801, !283}
!8666 = !DILocalVariable(name: "bp", arg: 1, scope: !8663, file: !1, line: 2299, type: !801)
!8667 = !DILocation(line: 2299, column: 42, scope: !8663)
!8668 = !DILocalVariable(name: "bv", arg: 2, scope: !8663, file: !1, line: 2299, type: !283)
!8669 = !DILocation(line: 2299, column: 55, scope: !8663)
!8670 = !DILocalVariable(name: "ang", scope: !8663, file: !1, line: 2301, type: !76)
!8671 = !DILocation(line: 2301, column: 8, scope: !8663)
!8672 = !DILocalVariable(name: "totang", scope: !8663, file: !1, line: 2301, type: !76)
!8673 = !DILocation(line: 2301, column: 13, scope: !8663)
!8674 = !DILocalVariable(name: "angdiff", scope: !8663, file: !1, line: 2301, type: !76)
!8675 = !DILocation(line: 2301, column: 21, scope: !8663)
!8676 = !DILocalVariable(name: "e", scope: !8663, file: !1, line: 2302, type: !130)
!8677 = !DILocation(line: 2302, column: 12, scope: !8663)
!8678 = !DILocalVariable(name: "i", scope: !8663, file: !1, line: 2303, type: !63)
!8679 = !DILocation(line: 2303, column: 6, scope: !8663)
!8680 = !DILocation(line: 2305, column: 6, scope: !8681)
!8681 = distinct !DILexicalBlock(scope: !8663, file: !1, line: 2305, column: 6)
!8682 = !DILocation(line: 2305, column: 10, scope: !8681)
!8683 = !DILocation(line: 2305, column: 20, scope: !8681)
!8684 = !DILocation(line: 2305, column: 25, scope: !8681)
!8685 = !DILocation(line: 2305, column: 28, scope: !8681)
!8686 = !DILocation(line: 2305, column: 32, scope: !8681)
!8687 = !DILocation(line: 2305, column: 41, scope: !8681)
!8688 = !DILocation(line: 2305, column: 6, scope: !8663)
!8689 = !DILocation(line: 2306, column: 3, scope: !8681)
!8690 = !DILocation(line: 2307, column: 9, scope: !8663)
!8691 = !DILocation(line: 2308, column: 9, scope: !8692)
!8692 = distinct !DILexicalBlock(scope: !8663, file: !1, line: 2308, column: 2)
!8693 = !DILocation(line: 2308, column: 7, scope: !8692)
!8694 = !DILocation(line: 2308, column: 14, scope: !8695)
!8695 = distinct !DILexicalBlock(scope: !8692, file: !1, line: 2308, column: 2)
!8696 = !DILocation(line: 2308, column: 16, scope: !8695)
!8697 = !DILocation(line: 2308, column: 2, scope: !8692)
!8698 = !DILocation(line: 2309, column: 8, scope: !8699)
!8699 = distinct !DILexicalBlock(scope: !8695, file: !1, line: 2308, column: 26)
!8700 = !DILocation(line: 2309, column: 12, scope: !8699)
!8701 = !DILocation(line: 2309, column: 18, scope: !8699)
!8702 = !DILocation(line: 2309, column: 5, scope: !8699)
!8703 = !DILocation(line: 2310, column: 43, scope: !8699)
!8704 = !DILocation(line: 2310, column: 46, scope: !8699)
!8705 = !DILocation(line: 2310, column: 9, scope: !8699)
!8706 = !DILocation(line: 2310, column: 7, scope: !8699)
!8707 = !DILocation(line: 2311, column: 7, scope: !8708)
!8708 = distinct !DILexicalBlock(scope: !8699, file: !1, line: 2311, column: 7)
!8709 = !DILocation(line: 2311, column: 11, scope: !8708)
!8710 = !DILocation(line: 2311, column: 29, scope: !8708)
!8711 = !DILocation(line: 2311, column: 32, scope: !8708)
!8712 = !DILocation(line: 2311, column: 36, scope: !8708)
!8713 = !DILocation(line: 2311, column: 7, scope: !8699)
!8714 = !DILocation(line: 2312, column: 4, scope: !8708)
!8715 = !DILocation(line: 2313, column: 13, scope: !8699)
!8716 = !DILocation(line: 2313, column: 10, scope: !8699)
!8717 = !DILocation(line: 2314, column: 2, scope: !8699)
!8718 = !DILocation(line: 2308, column: 22, scope: !8695)
!8719 = !DILocation(line: 2308, column: 2, scope: !8695)
!8720 = distinct !{!8720, !8697, !8721}
!8721 = !DILocation(line: 2314, column: 2, scope: !8692)
!8722 = !DILocation(line: 2315, column: 18, scope: !8663)
!8723 = !DILocation(line: 2315, column: 25, scope: !8663)
!8724 = !DILocation(line: 2315, column: 12, scope: !8663)
!8725 = !DILocation(line: 2315, column: 10, scope: !8663)
!8726 = !DILocation(line: 2316, column: 7, scope: !8727)
!8727 = distinct !DILexicalBlock(scope: !8663, file: !1, line: 2316, column: 6)
!8728 = !DILocation(line: 2316, column: 11, scope: !8727)
!8729 = !DILocation(line: 2316, column: 23, scope: !8727)
!8730 = !DILocation(line: 2316, column: 39, scope: !8727)
!8731 = !DILocation(line: 2316, column: 42, scope: !8727)
!8732 = !DILocation(line: 2316, column: 50, scope: !8727)
!8733 = !DILocation(line: 2316, column: 73, scope: !8727)
!8734 = !DILocation(line: 2317, column: 7, scope: !8727)
!8735 = !DILocation(line: 2317, column: 15, scope: !8727)
!8736 = !DILocation(line: 2316, column: 6, scope: !8663)
!8737 = !DILocation(line: 2319, column: 3, scope: !8738)
!8738 = distinct !DILexicalBlock(scope: !8727, file: !1, line: 2318, column: 2)
!8739 = !DILocation(line: 2321, column: 2, scope: !8663)
!8740 = !DILocation(line: 2322, column: 1, scope: !8663)
!8741 = distinct !DISubprogram(name: "tri_corner_adj_vmesh", scope: !1, file: !1, line: 2324, type: !8742, scopeLine: 2325, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!8742 = !DISubroutineType(types: !8743)
!8743 = !{!298, !801, !283}
!8744 = !DILocalVariable(name: "bp", arg: 1, scope: !8741, file: !1, line: 2324, type: !801)
!8745 = !DILocation(line: 2324, column: 49, scope: !8741)
!8746 = !DILocalVariable(name: "bv", arg: 2, scope: !8741, file: !1, line: 2324, type: !283)
!8747 = !DILocation(line: 2324, column: 62, scope: !8741)
!8748 = !DILocalVariable(name: "i", scope: !8741, file: !1, line: 2326, type: !63)
!8749 = !DILocation(line: 2326, column: 6, scope: !8741)
!8750 = !DILocalVariable(name: "j", scope: !8741, file: !1, line: 2326, type: !63)
!8751 = !DILocation(line: 2326, column: 9, scope: !8741)
!8752 = !DILocalVariable(name: "k", scope: !8741, file: !1, line: 2326, type: !63)
!8753 = !DILocation(line: 2326, column: 12, scope: !8741)
!8754 = !DILocalVariable(name: "ns", scope: !8741, file: !1, line: 2326, type: !63)
!8755 = !DILocation(line: 2326, column: 15, scope: !8741)
!8756 = !DILocalVariable(name: "ns2", scope: !8741, file: !1, line: 2326, type: !63)
!8757 = !DILocation(line: 2326, column: 19, scope: !8741)
!8758 = !DILocalVariable(name: "co0", scope: !8741, file: !1, line: 2327, type: !75)
!8759 = !DILocation(line: 2327, column: 8, scope: !8741)
!8760 = !DILocalVariable(name: "co1", scope: !8741, file: !1, line: 2327, type: !75)
!8761 = !DILocation(line: 2327, column: 16, scope: !8741)
!8762 = !DILocalVariable(name: "co2", scope: !8741, file: !1, line: 2327, type: !75)
!8763 = !DILocation(line: 2327, column: 24, scope: !8741)
!8764 = !DILocalVariable(name: "mat", scope: !8741, file: !1, line: 2328, type: !5334)
!8765 = !DILocation(line: 2328, column: 8, scope: !8741)
!8766 = !DILocalVariable(name: "v", scope: !8741, file: !1, line: 2328, type: !6686)
!8767 = !DILocation(line: 2328, column: 19, scope: !8741)
!8768 = !DILocalVariable(name: "vm", scope: !8741, file: !1, line: 2329, type: !298)
!8769 = !DILocation(line: 2329, column: 9, scope: !8741)
!8770 = !DILocalVariable(name: "bndv", scope: !8741, file: !1, line: 2330, type: !121)
!8771 = !DILocation(line: 2330, column: 13, scope: !8741)
!8772 = !DILocation(line: 2333, column: 9, scope: !8741)
!8773 = !DILocation(line: 2333, column: 13, scope: !8741)
!8774 = !DILocation(line: 2333, column: 20, scope: !8741)
!8775 = !DILocation(line: 2333, column: 7, scope: !8741)
!8776 = !DILocation(line: 2334, column: 13, scope: !8741)
!8777 = !DILocation(line: 2334, column: 18, scope: !8741)
!8778 = !DILocation(line: 2334, column: 24, scope: !8741)
!8779 = !DILocation(line: 2334, column: 27, scope: !8741)
!8780 = !DILocation(line: 2334, column: 2, scope: !8741)
!8781 = !DILocation(line: 2335, column: 9, scope: !8741)
!8782 = !DILocation(line: 2335, column: 15, scope: !8741)
!8783 = !DILocation(line: 2335, column: 7, scope: !8741)
!8784 = !DILocation(line: 2336, column: 13, scope: !8741)
!8785 = !DILocation(line: 2336, column: 18, scope: !8741)
!8786 = !DILocation(line: 2336, column: 24, scope: !8741)
!8787 = !DILocation(line: 2336, column: 27, scope: !8741)
!8788 = !DILocation(line: 2336, column: 2, scope: !8741)
!8789 = !DILocation(line: 2337, column: 9, scope: !8741)
!8790 = !DILocation(line: 2337, column: 15, scope: !8741)
!8791 = !DILocation(line: 2337, column: 7, scope: !8741)
!8792 = !DILocation(line: 2338, column: 13, scope: !8741)
!8793 = !DILocation(line: 2338, column: 18, scope: !8741)
!8794 = !DILocation(line: 2338, column: 24, scope: !8741)
!8795 = !DILocation(line: 2338, column: 27, scope: !8741)
!8796 = !DILocation(line: 2338, column: 2, scope: !8741)
!8797 = !DILocation(line: 2339, column: 21, scope: !8741)
!8798 = !DILocation(line: 2339, column: 26, scope: !8741)
!8799 = !DILocation(line: 2339, column: 31, scope: !8741)
!8800 = !DILocation(line: 2339, column: 36, scope: !8741)
!8801 = !DILocation(line: 2339, column: 40, scope: !8741)
!8802 = !DILocation(line: 2339, column: 43, scope: !8741)
!8803 = !DILocation(line: 2339, column: 47, scope: !8741)
!8804 = !DILocation(line: 2339, column: 2, scope: !8741)
!8805 = !DILocation(line: 2340, column: 7, scope: !8741)
!8806 = !DILocation(line: 2340, column: 11, scope: !8741)
!8807 = !DILocation(line: 2340, column: 5, scope: !8741)
!8808 = !DILocation(line: 2341, column: 8, scope: !8741)
!8809 = !DILocation(line: 2341, column: 11, scope: !8741)
!8810 = !DILocation(line: 2341, column: 6, scope: !8741)
!8811 = !DILocation(line: 2342, column: 34, scope: !8741)
!8812 = !DILocation(line: 2342, column: 7, scope: !8741)
!8813 = !DILocation(line: 2342, column: 5, scope: !8741)
!8814 = !DILocation(line: 2343, column: 9, scope: !8815)
!8815 = distinct !DILexicalBlock(scope: !8741, file: !1, line: 2343, column: 2)
!8816 = !DILocation(line: 2343, column: 7, scope: !8815)
!8817 = !DILocation(line: 2343, column: 14, scope: !8818)
!8818 = distinct !DILexicalBlock(scope: !8815, file: !1, line: 2343, column: 2)
!8819 = !DILocation(line: 2343, column: 16, scope: !8818)
!8820 = !DILocation(line: 2343, column: 2, scope: !8815)
!8821 = !DILocation(line: 2344, column: 10, scope: !8822)
!8822 = distinct !DILexicalBlock(scope: !8823, file: !1, line: 2344, column: 3)
!8823 = distinct !DILexicalBlock(scope: !8818, file: !1, line: 2343, column: 26)
!8824 = !DILocation(line: 2344, column: 8, scope: !8822)
!8825 = !DILocation(line: 2344, column: 15, scope: !8826)
!8826 = distinct !DILexicalBlock(scope: !8822, file: !1, line: 2344, column: 3)
!8827 = !DILocation(line: 2344, column: 20, scope: !8826)
!8828 = !DILocation(line: 2344, column: 17, scope: !8826)
!8829 = !DILocation(line: 2344, column: 3, scope: !8822)
!8830 = !DILocation(line: 2345, column: 11, scope: !8831)
!8831 = distinct !DILexicalBlock(scope: !8832, file: !1, line: 2345, column: 4)
!8832 = distinct !DILexicalBlock(scope: !8826, file: !1, line: 2344, column: 30)
!8833 = !DILocation(line: 2345, column: 9, scope: !8831)
!8834 = !DILocation(line: 2345, column: 16, scope: !8835)
!8835 = distinct !DILexicalBlock(scope: !8831, file: !1, line: 2345, column: 4)
!8836 = !DILocation(line: 2345, column: 21, scope: !8835)
!8837 = !DILocation(line: 2345, column: 18, scope: !8835)
!8838 = !DILocation(line: 2345, column: 4, scope: !8831)
!8839 = !DILocation(line: 2346, column: 16, scope: !8840)
!8840 = distinct !DILexicalBlock(scope: !8835, file: !1, line: 2345, column: 30)
!8841 = !DILocation(line: 2346, column: 29, scope: !8840)
!8842 = !DILocation(line: 2346, column: 33, scope: !8840)
!8843 = !DILocation(line: 2346, column: 36, scope: !8840)
!8844 = !DILocation(line: 2346, column: 39, scope: !8840)
!8845 = !DILocation(line: 2346, column: 19, scope: !8840)
!8846 = !DILocation(line: 2346, column: 43, scope: !8840)
!8847 = !DILocation(line: 2346, column: 5, scope: !8840)
!8848 = !DILocation(line: 2347, column: 5, scope: !8840)
!8849 = !DILocation(line: 2347, column: 10, scope: !8840)
!8850 = !DILocation(line: 2348, column: 15, scope: !8840)
!8851 = !DILocation(line: 2348, column: 20, scope: !8840)
!8852 = !DILocation(line: 2348, column: 5, scope: !8840)
!8853 = !DILocation(line: 2349, column: 26, scope: !8840)
!8854 = !DILocation(line: 2349, column: 30, scope: !8840)
!8855 = !DILocation(line: 2349, column: 33, scope: !8840)
!8856 = !DILocation(line: 2349, column: 36, scope: !8840)
!8857 = !DILocation(line: 2349, column: 16, scope: !8840)
!8858 = !DILocation(line: 2349, column: 40, scope: !8840)
!8859 = !DILocation(line: 2349, column: 44, scope: !8840)
!8860 = !DILocation(line: 2349, column: 5, scope: !8840)
!8861 = !DILocation(line: 2350, column: 4, scope: !8840)
!8862 = !DILocation(line: 2345, column: 26, scope: !8835)
!8863 = !DILocation(line: 2345, column: 4, scope: !8835)
!8864 = distinct !{!8864, !8838, !8865}
!8865 = !DILocation(line: 2350, column: 4, scope: !8831)
!8866 = !DILocation(line: 2351, column: 3, scope: !8832)
!8867 = !DILocation(line: 2344, column: 26, scope: !8826)
!8868 = !DILocation(line: 2344, column: 3, scope: !8826)
!8869 = distinct !{!8869, !8829, !8870}
!8870 = !DILocation(line: 2351, column: 3, scope: !8822)
!8871 = !DILocation(line: 2352, column: 2, scope: !8823)
!8872 = !DILocation(line: 2343, column: 22, scope: !8818)
!8873 = !DILocation(line: 2343, column: 2, scope: !8818)
!8874 = distinct !{!8874, !8820, !8875}
!8875 = !DILocation(line: 2352, column: 2, scope: !8815)
!8876 = !DILocation(line: 2354, column: 9, scope: !8741)
!8877 = !DILocation(line: 2354, column: 2, scope: !8741)
!8878 = distinct !DISubprogram(name: "adj_vmesh", scope: !1, file: !1, line: 2357, type: !8742, scopeLine: 2358, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!8879 = !DILocalVariable(name: "bp", arg: 1, scope: !8878, file: !1, line: 2357, type: !801)
!8880 = !DILocation(line: 2357, column: 38, scope: !8878)
!8881 = !DILocalVariable(name: "bv", arg: 2, scope: !8878, file: !1, line: 2357, type: !283)
!8882 = !DILocation(line: 2357, column: 51, scope: !8878)
!8883 = !DILocalVariable(name: "n", scope: !8878, file: !1, line: 2359, type: !63)
!8884 = !DILocation(line: 2359, column: 6, scope: !8878)
!8885 = !DILocalVariable(name: "ns", scope: !8878, file: !1, line: 2359, type: !63)
!8886 = !DILocation(line: 2359, column: 9, scope: !8878)
!8887 = !DILocalVariable(name: "i", scope: !8878, file: !1, line: 2359, type: !63)
!8888 = !DILocation(line: 2359, column: 13, scope: !8878)
!8889 = !DILocalVariable(name: "vm0", scope: !8878, file: !1, line: 2360, type: !298)
!8890 = !DILocation(line: 2360, column: 9, scope: !8878)
!8891 = !DILocalVariable(name: "vm1", scope: !8878, file: !1, line: 2360, type: !298)
!8892 = !DILocation(line: 2360, column: 15, scope: !8878)
!8893 = !DILocalVariable(name: "co", scope: !8878, file: !1, line: 2361, type: !75)
!8894 = !DILocation(line: 2361, column: 8, scope: !8878)
!8895 = !DILocalVariable(name: "coa", scope: !8878, file: !1, line: 2361, type: !75)
!8896 = !DILocation(line: 2361, column: 15, scope: !8878)
!8897 = !DILocalVariable(name: "cob", scope: !8878, file: !1, line: 2361, type: !75)
!8898 = !DILocation(line: 2361, column: 23, scope: !8878)
!8899 = !DILocalVariable(name: "dir", scope: !8878, file: !1, line: 2361, type: !75)
!8900 = !DILocation(line: 2361, column: 31, scope: !8878)
!8901 = !DILocalVariable(name: "bndv", scope: !8878, file: !1, line: 2362, type: !121)
!8902 = !DILocation(line: 2362, column: 13, scope: !8878)
!8903 = !DILocalVariable(name: "mem_arena", scope: !8878, file: !1, line: 2363, type: !601)
!8904 = !DILocation(line: 2363, column: 12, scope: !8878)
!8905 = !DILocation(line: 2363, column: 24, scope: !8878)
!8906 = !DILocation(line: 2363, column: 28, scope: !8878)
!8907 = !DILocalVariable(name: "r", scope: !8878, file: !1, line: 2364, type: !76)
!8908 = !DILocation(line: 2364, column: 8, scope: !8878)
!8909 = !DILocalVariable(name: "fac", scope: !8878, file: !1, line: 2364, type: !76)
!8910 = !DILocation(line: 2364, column: 11, scope: !8878)
!8911 = !DILocalVariable(name: "fullness", scope: !8878, file: !1, line: 2364, type: !76)
!8912 = !DILocation(line: 2364, column: 16, scope: !8878)
!8913 = !DILocation(line: 2367, column: 6, scope: !8878)
!8914 = !DILocation(line: 2367, column: 10, scope: !8878)
!8915 = !DILocation(line: 2367, column: 17, scope: !8878)
!8916 = !DILocation(line: 2367, column: 4, scope: !8878)
!8917 = !DILocation(line: 2368, column: 7, scope: !8878)
!8918 = !DILocation(line: 2368, column: 11, scope: !8878)
!8919 = !DILocation(line: 2368, column: 18, scope: !8878)
!8920 = !DILocation(line: 2368, column: 5, scope: !8878)
!8921 = !DILocation(line: 2369, column: 22, scope: !8878)
!8922 = !DILocation(line: 2369, column: 33, scope: !8878)
!8923 = !DILocation(line: 2369, column: 39, scope: !8878)
!8924 = !DILocation(line: 2369, column: 43, scope: !8878)
!8925 = !DILocation(line: 2369, column: 50, scope: !8878)
!8926 = !DILocation(line: 2369, column: 8, scope: !8878)
!8927 = !DILocation(line: 2369, column: 6, scope: !8878)
!8928 = !DILocation(line: 2371, column: 9, scope: !8878)
!8929 = !DILocation(line: 2371, column: 14, scope: !8878)
!8930 = !DILocation(line: 2371, column: 7, scope: !8878)
!8931 = !DILocation(line: 2372, column: 10, scope: !8878)
!8932 = !DILocation(line: 2372, column: 2, scope: !8878)
!8933 = !DILocation(line: 2373, column: 9, scope: !8934)
!8934 = distinct !DILexicalBlock(scope: !8878, file: !1, line: 2373, column: 2)
!8935 = !DILocation(line: 2373, column: 7, scope: !8934)
!8936 = !DILocation(line: 2373, column: 14, scope: !8937)
!8937 = distinct !DILexicalBlock(scope: !8934, file: !1, line: 2373, column: 2)
!8938 = !DILocation(line: 2373, column: 18, scope: !8937)
!8939 = !DILocation(line: 2373, column: 16, scope: !8937)
!8940 = !DILocation(line: 2373, column: 2, scope: !8934)
!8941 = !DILocation(line: 2375, column: 24, scope: !8942)
!8942 = distinct !DILexicalBlock(scope: !8937, file: !1, line: 2373, column: 26)
!8943 = !DILocation(line: 2375, column: 29, scope: !8942)
!8944 = !DILocation(line: 2375, column: 14, scope: !8942)
!8945 = !DILocation(line: 2375, column: 39, scope: !8942)
!8946 = !DILocation(line: 2375, column: 43, scope: !8942)
!8947 = !DILocation(line: 2375, column: 49, scope: !8942)
!8948 = !DILocation(line: 2375, column: 52, scope: !8942)
!8949 = !DILocation(line: 2375, column: 3, scope: !8942)
!8950 = !DILocation(line: 2376, column: 21, scope: !8942)
!8951 = !DILocation(line: 2376, column: 26, scope: !8942)
!8952 = !DILocation(line: 2376, column: 32, scope: !8942)
!8953 = !DILocation(line: 2376, column: 57, scope: !8942)
!8954 = !DILocation(line: 2376, column: 62, scope: !8942)
!8955 = !DILocation(line: 2376, column: 47, scope: !8942)
!8956 = !DILocation(line: 2376, column: 72, scope: !8942)
!8957 = !DILocation(line: 2376, column: 3, scope: !8942)
!8958 = !DILocation(line: 2377, column: 13, scope: !8942)
!8959 = !DILocation(line: 2377, column: 17, scope: !8942)
!8960 = !DILocation(line: 2377, column: 23, scope: !8942)
!8961 = !DILocation(line: 2377, column: 26, scope: !8942)
!8962 = !DILocation(line: 2377, column: 3, scope: !8942)
!8963 = !DILocation(line: 2378, column: 10, scope: !8942)
!8964 = !DILocation(line: 2378, column: 16, scope: !8942)
!8965 = !DILocation(line: 2378, column: 8, scope: !8942)
!8966 = !DILocation(line: 2379, column: 2, scope: !8942)
!8967 = !DILocation(line: 2373, column: 22, scope: !8937)
!8968 = !DILocation(line: 2373, column: 2, scope: !8937)
!8969 = distinct !{!8969, !8940, !8970}
!8970 = !DILocation(line: 2379, column: 2, scope: !8934)
!8971 = !DILocation(line: 2387, column: 13, scope: !8878)
!8972 = !DILocation(line: 2387, column: 18, scope: !8878)
!8973 = !DILocation(line: 2387, column: 22, scope: !8878)
!8974 = !DILocation(line: 2387, column: 25, scope: !8878)
!8975 = !DILocation(line: 2387, column: 2, scope: !8878)
!8976 = !DILocation(line: 2388, column: 12, scope: !8878)
!8977 = !DILocation(line: 2388, column: 30, scope: !8878)
!8978 = !DILocation(line: 2388, column: 23, scope: !8878)
!8979 = !DILocation(line: 2388, column: 21, scope: !8878)
!8980 = !DILocation(line: 2388, column: 2, scope: !8878)
!8981 = !DILocation(line: 2389, column: 14, scope: !8878)
!8982 = !DILocation(line: 2389, column: 19, scope: !8878)
!8983 = !DILocation(line: 2389, column: 23, scope: !8878)
!8984 = !DILocation(line: 2389, column: 2, scope: !8878)
!8985 = !DILocation(line: 2390, column: 12, scope: !8878)
!8986 = !DILocation(line: 2390, column: 17, scope: !8878)
!8987 = !DILocation(line: 2390, column: 2, scope: !8878)
!8988 = !DILocation(line: 2391, column: 6, scope: !8878)
!8989 = !DILocation(line: 2391, column: 10, scope: !8878)
!8990 = !DILocation(line: 2391, column: 4, scope: !8878)
!8991 = !DILocation(line: 2392, column: 6, scope: !8992)
!8992 = distinct !DILexicalBlock(scope: !8878, file: !1, line: 2392, column: 6)
!8993 = !DILocation(line: 2392, column: 8, scope: !8992)
!8994 = !DILocation(line: 2392, column: 6, scope: !8878)
!8995 = !DILocation(line: 2393, column: 12, scope: !8992)
!8996 = !DILocation(line: 2393, column: 3, scope: !8992)
!8997 = !DILocation(line: 2394, column: 11, scope: !8998)
!8998 = distinct !DILexicalBlock(scope: !8992, file: !1, line: 2394, column: 11)
!8999 = !DILocation(line: 2394, column: 13, scope: !8998)
!9000 = !DILocation(line: 2394, column: 11, scope: !8992)
!9001 = !DILocation(line: 2395, column: 7, scope: !9002)
!9002 = distinct !DILexicalBlock(scope: !9003, file: !1, line: 2395, column: 7)
!9003 = distinct !DILexicalBlock(scope: !8998, file: !1, line: 2394, column: 21)
!9004 = !DILocation(line: 2395, column: 11, scope: !9002)
!9005 = !DILocation(line: 2395, column: 7, scope: !9003)
!9006 = !DILocation(line: 2396, column: 8, scope: !9002)
!9007 = !DILocation(line: 2396, column: 4, scope: !9002)
!9008 = !DILocation(line: 2397, column: 12, scope: !9009)
!9009 = distinct !DILexicalBlock(scope: !9002, file: !1, line: 2397, column: 12)
!9010 = !DILocation(line: 2397, column: 14, scope: !9009)
!9011 = !DILocation(line: 2397, column: 12, scope: !9002)
!9012 = !DILocation(line: 2398, column: 8, scope: !9009)
!9013 = !DILocation(line: 2398, column: 4, scope: !9009)
!9014 = !DILocation(line: 2400, column: 8, scope: !9009)
!9015 = !DILocation(line: 2401, column: 21, scope: !9003)
!9016 = !DILocation(line: 2401, column: 27, scope: !9003)
!9017 = !DILocation(line: 2401, column: 25, scope: !9003)
!9018 = !DILocation(line: 2401, column: 19, scope: !9003)
!9019 = !DILocation(line: 2401, column: 12, scope: !9003)
!9020 = !DILocation(line: 2402, column: 2, scope: !9003)
!9021 = !DILocation(line: 2404, column: 14, scope: !9022)
!9022 = distinct !DILexicalBlock(scope: !8998, file: !1, line: 2403, column: 7)
!9023 = !DILocation(line: 2404, column: 16, scope: !9022)
!9024 = !DILocation(line: 2404, column: 12, scope: !9022)
!9025 = !DILocation(line: 2406, column: 14, scope: !8878)
!9026 = !DILocation(line: 2406, column: 19, scope: !8878)
!9027 = !DILocation(line: 2406, column: 24, scope: !8878)
!9028 = !DILocation(line: 2406, column: 2, scope: !8878)
!9029 = !DILocation(line: 2407, column: 21, scope: !9030)
!9030 = distinct !DILexicalBlock(scope: !8878, file: !1, line: 2407, column: 6)
!9031 = !DILocation(line: 2407, column: 6, scope: !9030)
!9032 = !DILocation(line: 2407, column: 26, scope: !9030)
!9033 = !DILocation(line: 2407, column: 6, scope: !8878)
!9034 = !DILocation(line: 2408, column: 16, scope: !9030)
!9035 = !DILocation(line: 2408, column: 20, scope: !9030)
!9036 = !DILocation(line: 2408, column: 25, scope: !9030)
!9037 = !DILocation(line: 2408, column: 3, scope: !9030)
!9038 = !DILocation(line: 2409, column: 23, scope: !8878)
!9039 = !DILocation(line: 2409, column: 13, scope: !8878)
!9040 = !DILocation(line: 2409, column: 38, scope: !8878)
!9041 = !DILocation(line: 2409, column: 42, scope: !8878)
!9042 = !DILocation(line: 2409, column: 2, scope: !8878)
!9043 = !DILocation(line: 2410, column: 25, scope: !8878)
!9044 = !DILocation(line: 2410, column: 2, scope: !8878)
!9045 = !DILocation(line: 2412, column: 8, scope: !8878)
!9046 = !DILocation(line: 2412, column: 6, scope: !8878)
!9047 = !DILocation(line: 2413, column: 2, scope: !8878)
!9048 = !DILocation(line: 2414, column: 22, scope: !9049)
!9049 = distinct !DILexicalBlock(scope: !8878, file: !1, line: 2413, column: 5)
!9050 = !DILocation(line: 2414, column: 26, scope: !9049)
!9051 = !DILocation(line: 2414, column: 9, scope: !9049)
!9052 = !DILocation(line: 2414, column: 7, scope: !9049)
!9053 = !DILocation(line: 2415, column: 2, scope: !9049)
!9054 = !DILocation(line: 2415, column: 11, scope: !8878)
!9055 = !DILocation(line: 2415, column: 16, scope: !8878)
!9056 = !DILocation(line: 2415, column: 22, scope: !8878)
!9057 = !DILocation(line: 2415, column: 20, scope: !8878)
!9058 = distinct !{!9058, !9047, !9059}
!9059 = !DILocation(line: 2415, column: 24, scope: !8878)
!9060 = !DILocation(line: 2416, column: 6, scope: !9061)
!9061 = distinct !DILexicalBlock(scope: !8878, file: !1, line: 2416, column: 6)
!9062 = !DILocation(line: 2416, column: 11, scope: !9061)
!9063 = !DILocation(line: 2416, column: 18, scope: !9061)
!9064 = !DILocation(line: 2416, column: 15, scope: !9061)
!9065 = !DILocation(line: 2416, column: 6, scope: !8878)
!9066 = !DILocation(line: 2417, column: 22, scope: !9061)
!9067 = !DILocation(line: 2417, column: 26, scope: !9061)
!9068 = !DILocation(line: 2417, column: 31, scope: !9061)
!9069 = !DILocation(line: 2417, column: 9, scope: !9061)
!9070 = !DILocation(line: 2417, column: 7, scope: !9061)
!9071 = !DILocation(line: 2417, column: 3, scope: !9061)
!9072 = !DILocation(line: 2418, column: 9, scope: !8878)
!9073 = !DILocation(line: 2418, column: 2, scope: !8878)
!9074 = distinct !DISubprogram(name: "is_canon", scope: !1, file: !1, line: 1788, type: !9075, scopeLine: 1789, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!9075 = !DISubroutineType(types: !9076)
!9076 = !{!152, !298, !63, !63, !63}
!9077 = !DILocalVariable(name: "vm", arg: 1, scope: !9074, file: !1, line: 1788, type: !298)
!9078 = !DILocation(line: 1788, column: 29, scope: !9074)
!9079 = !DILocalVariable(name: "i", arg: 2, scope: !9074, file: !1, line: 1788, type: !63)
!9080 = !DILocation(line: 1788, column: 37, scope: !9074)
!9081 = !DILocalVariable(name: "j", arg: 3, scope: !9074, file: !1, line: 1788, type: !63)
!9082 = !DILocation(line: 1788, column: 44, scope: !9074)
!9083 = !DILocalVariable(name: "k", arg: 4, scope: !9074, file: !1, line: 1788, type: !63)
!9084 = !DILocation(line: 1788, column: 51, scope: !9074)
!9085 = !DILocalVariable(name: "ns2", scope: !9074, file: !1, line: 1790, type: !63)
!9086 = !DILocation(line: 1790, column: 6, scope: !9074)
!9087 = !DILocation(line: 1790, column: 12, scope: !9074)
!9088 = !DILocation(line: 1790, column: 16, scope: !9074)
!9089 = !DILocation(line: 1790, column: 20, scope: !9074)
!9090 = !DILocation(line: 1791, column: 6, scope: !9091)
!9091 = distinct !DILexicalBlock(scope: !9074, file: !1, line: 1791, column: 6)
!9092 = !DILocation(line: 1791, column: 10, scope: !9091)
!9093 = !DILocation(line: 1791, column: 14, scope: !9091)
!9094 = !DILocation(line: 1791, column: 18, scope: !9091)
!9095 = !DILocation(line: 1791, column: 6, scope: !9074)
!9096 = !DILocation(line: 1792, column: 11, scope: !9091)
!9097 = !DILocation(line: 1792, column: 16, scope: !9091)
!9098 = !DILocation(line: 1792, column: 13, scope: !9091)
!9099 = !DILocation(line: 1792, column: 20, scope: !9091)
!9100 = !DILocation(line: 1792, column: 23, scope: !9091)
!9101 = !DILocation(line: 1792, column: 28, scope: !9091)
!9102 = !DILocation(line: 1792, column: 25, scope: !9091)
!9103 = !DILocation(line: 0, scope: !9091)
!9104 = !DILocation(line: 1792, column: 10, scope: !9091)
!9105 = !DILocation(line: 1792, column: 3, scope: !9091)
!9106 = !DILocation(line: 1794, column: 12, scope: !9091)
!9107 = !DILocation(line: 1794, column: 16, scope: !9091)
!9108 = !DILocation(line: 1794, column: 14, scope: !9091)
!9109 = !DILocation(line: 1794, column: 20, scope: !9091)
!9110 = !DILocation(line: 1794, column: 23, scope: !9091)
!9111 = !DILocation(line: 1794, column: 28, scope: !9091)
!9112 = !DILocation(line: 1794, column: 25, scope: !9091)
!9113 = !DILocation(line: 1794, column: 33, scope: !9091)
!9114 = !DILocation(line: 1794, column: 37, scope: !9091)
!9115 = !DILocation(line: 1794, column: 42, scope: !9091)
!9116 = !DILocation(line: 1794, column: 39, scope: !9091)
!9117 = !DILocation(line: 1794, column: 46, scope: !9091)
!9118 = !DILocation(line: 1794, column: 49, scope: !9091)
!9119 = !DILocation(line: 1794, column: 54, scope: !9091)
!9120 = !DILocation(line: 1794, column: 51, scope: !9091)
!9121 = !DILocation(line: 1794, column: 58, scope: !9091)
!9122 = !DILocation(line: 1794, column: 61, scope: !9091)
!9123 = !DILocation(line: 1794, column: 63, scope: !9091)
!9124 = !DILocation(line: 1794, column: 10, scope: !9091)
!9125 = !DILocation(line: 1794, column: 3, scope: !9091)
!9126 = !DILocation(line: 1795, column: 1, scope: !9074)
!9127 = distinct !DISubprogram(name: "vmesh_copy_equiv_verts", scope: !1, file: !1, line: 1798, type: !9128, scopeLine: 1799, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!9128 = !DISubroutineType(types: !9129)
!9129 = !{null, !298}
!9130 = !DILocalVariable(name: "vm", arg: 1, scope: !9127, file: !1, line: 1798, type: !298)
!9131 = !DILocation(line: 1798, column: 43, scope: !9127)
!9132 = !DILocalVariable(name: "n", scope: !9127, file: !1, line: 1800, type: !63)
!9133 = !DILocation(line: 1800, column: 6, scope: !9127)
!9134 = !DILocalVariable(name: "ns", scope: !9127, file: !1, line: 1800, type: !63)
!9135 = !DILocation(line: 1800, column: 9, scope: !9127)
!9136 = !DILocalVariable(name: "ns2", scope: !9127, file: !1, line: 1800, type: !63)
!9137 = !DILocation(line: 1800, column: 13, scope: !9127)
!9138 = !DILocalVariable(name: "i", scope: !9127, file: !1, line: 1800, type: !63)
!9139 = !DILocation(line: 1800, column: 18, scope: !9127)
!9140 = !DILocalVariable(name: "j", scope: !9127, file: !1, line: 1800, type: !63)
!9141 = !DILocation(line: 1800, column: 21, scope: !9127)
!9142 = !DILocalVariable(name: "k", scope: !9127, file: !1, line: 1800, type: !63)
!9143 = !DILocation(line: 1800, column: 24, scope: !9127)
!9144 = !DILocalVariable(name: "v0", scope: !9127, file: !1, line: 1801, type: !46)
!9145 = !DILocation(line: 1801, column: 11, scope: !9127)
!9146 = !DILocalVariable(name: "v1", scope: !9127, file: !1, line: 1801, type: !46)
!9147 = !DILocation(line: 1801, column: 16, scope: !9127)
!9148 = !DILocation(line: 1803, column: 6, scope: !9127)
!9149 = !DILocation(line: 1803, column: 10, scope: !9127)
!9150 = !DILocation(line: 1803, column: 4, scope: !9127)
!9151 = !DILocation(line: 1804, column: 7, scope: !9127)
!9152 = !DILocation(line: 1804, column: 11, scope: !9127)
!9153 = !DILocation(line: 1804, column: 5, scope: !9127)
!9154 = !DILocation(line: 1805, column: 8, scope: !9127)
!9155 = !DILocation(line: 1805, column: 11, scope: !9127)
!9156 = !DILocation(line: 1805, column: 6, scope: !9127)
!9157 = !DILocation(line: 1806, column: 9, scope: !9158)
!9158 = distinct !DILexicalBlock(scope: !9127, file: !1, line: 1806, column: 2)
!9159 = !DILocation(line: 1806, column: 7, scope: !9158)
!9160 = !DILocation(line: 1806, column: 14, scope: !9161)
!9161 = distinct !DILexicalBlock(scope: !9158, file: !1, line: 1806, column: 2)
!9162 = !DILocation(line: 1806, column: 18, scope: !9161)
!9163 = !DILocation(line: 1806, column: 16, scope: !9161)
!9164 = !DILocation(line: 1806, column: 2, scope: !9158)
!9165 = !DILocation(line: 1807, column: 10, scope: !9166)
!9166 = distinct !DILexicalBlock(scope: !9167, file: !1, line: 1807, column: 3)
!9167 = distinct !DILexicalBlock(scope: !9161, file: !1, line: 1806, column: 26)
!9168 = !DILocation(line: 1807, column: 8, scope: !9166)
!9169 = !DILocation(line: 1807, column: 15, scope: !9170)
!9170 = distinct !DILexicalBlock(scope: !9166, file: !1, line: 1807, column: 3)
!9171 = !DILocation(line: 1807, column: 20, scope: !9170)
!9172 = !DILocation(line: 1807, column: 17, scope: !9170)
!9173 = !DILocation(line: 1807, column: 3, scope: !9166)
!9174 = !DILocation(line: 1808, column: 11, scope: !9175)
!9175 = distinct !DILexicalBlock(scope: !9176, file: !1, line: 1808, column: 4)
!9176 = distinct !DILexicalBlock(scope: !9170, file: !1, line: 1807, column: 30)
!9177 = !DILocation(line: 1808, column: 9, scope: !9175)
!9178 = !DILocation(line: 1808, column: 16, scope: !9179)
!9179 = distinct !DILexicalBlock(scope: !9175, file: !1, line: 1808, column: 4)
!9180 = !DILocation(line: 1808, column: 21, scope: !9179)
!9181 = !DILocation(line: 1808, column: 18, scope: !9179)
!9182 = !DILocation(line: 1808, column: 4, scope: !9175)
!9183 = !DILocation(line: 1809, column: 18, scope: !9184)
!9184 = distinct !DILexicalBlock(scope: !9185, file: !1, line: 1809, column: 9)
!9185 = distinct !DILexicalBlock(scope: !9179, file: !1, line: 1808, column: 30)
!9186 = !DILocation(line: 1809, column: 22, scope: !9184)
!9187 = !DILocation(line: 1809, column: 25, scope: !9184)
!9188 = !DILocation(line: 1809, column: 28, scope: !9184)
!9189 = !DILocation(line: 1809, column: 9, scope: !9184)
!9190 = !DILocation(line: 1809, column: 9, scope: !9185)
!9191 = !DILocation(line: 1810, column: 6, scope: !9184)
!9192 = !DILocation(line: 1811, column: 20, scope: !9185)
!9193 = !DILocation(line: 1811, column: 24, scope: !9185)
!9194 = !DILocation(line: 1811, column: 27, scope: !9185)
!9195 = !DILocation(line: 1811, column: 30, scope: !9185)
!9196 = !DILocation(line: 1811, column: 10, scope: !9185)
!9197 = !DILocation(line: 1811, column: 8, scope: !9185)
!9198 = !DILocation(line: 1812, column: 26, scope: !9185)
!9199 = !DILocation(line: 1812, column: 30, scope: !9185)
!9200 = !DILocation(line: 1812, column: 33, scope: !9185)
!9201 = !DILocation(line: 1812, column: 36, scope: !9185)
!9202 = !DILocation(line: 1812, column: 10, scope: !9185)
!9203 = !DILocation(line: 1812, column: 8, scope: !9185)
!9204 = !DILocation(line: 1813, column: 16, scope: !9185)
!9205 = !DILocation(line: 1813, column: 20, scope: !9185)
!9206 = !DILocation(line: 1813, column: 24, scope: !9185)
!9207 = !DILocation(line: 1813, column: 28, scope: !9185)
!9208 = !DILocation(line: 1813, column: 5, scope: !9185)
!9209 = !DILocation(line: 1814, column: 13, scope: !9185)
!9210 = !DILocation(line: 1814, column: 17, scope: !9185)
!9211 = !DILocation(line: 1814, column: 5, scope: !9185)
!9212 = !DILocation(line: 1814, column: 9, scope: !9185)
!9213 = !DILocation(line: 1814, column: 11, scope: !9185)
!9214 = !DILocation(line: 1815, column: 4, scope: !9185)
!9215 = !DILocation(line: 1808, column: 26, scope: !9179)
!9216 = !DILocation(line: 1808, column: 4, scope: !9179)
!9217 = distinct !{!9217, !9182, !9218}
!9218 = !DILocation(line: 1815, column: 4, scope: !9175)
!9219 = !DILocation(line: 1816, column: 3, scope: !9176)
!9220 = !DILocation(line: 1807, column: 26, scope: !9170)
!9221 = !DILocation(line: 1807, column: 3, scope: !9170)
!9222 = distinct !{!9222, !9173, !9223}
!9223 = !DILocation(line: 1816, column: 3, scope: !9166)
!9224 = !DILocation(line: 1817, column: 2, scope: !9167)
!9225 = !DILocation(line: 1806, column: 22, scope: !9161)
!9226 = !DILocation(line: 1806, column: 2, scope: !9161)
!9227 = distinct !{!9227, !9164, !9228}
!9228 = !DILocation(line: 1817, column: 2, scope: !9158)
!9229 = !DILocation(line: 1818, column: 1, scope: !9127)
!9230 = distinct !DISubprogram(name: "bev_create_quad_tri_ex", scope: !1, file: !1, line: 412, type: !9231, scopeLine: 414, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!9231 = !DISubroutineType(types: !9232)
!9232 = !{!141, !321, !51, !51, !51, !51, !141, !141, !141, !141, !63}
!9233 = !DILocalVariable(name: "bm", arg: 1, scope: !9230, file: !1, line: 412, type: !321)
!9234 = !DILocation(line: 412, column: 46, scope: !9230)
!9235 = !DILocalVariable(name: "v1", arg: 2, scope: !9230, file: !1, line: 412, type: !51)
!9236 = !DILocation(line: 412, column: 58, scope: !9230)
!9237 = !DILocalVariable(name: "v2", arg: 3, scope: !9230, file: !1, line: 412, type: !51)
!9238 = !DILocation(line: 412, column: 70, scope: !9230)
!9239 = !DILocalVariable(name: "v3", arg: 4, scope: !9230, file: !1, line: 412, type: !51)
!9240 = !DILocation(line: 412, column: 82, scope: !9230)
!9241 = !DILocalVariable(name: "v4", arg: 5, scope: !9230, file: !1, line: 412, type: !51)
!9242 = !DILocation(line: 412, column: 94, scope: !9230)
!9243 = !DILocalVariable(name: "f1", arg: 6, scope: !9230, file: !1, line: 413, type: !141)
!9244 = !DILocation(line: 413, column: 47, scope: !9230)
!9245 = !DILocalVariable(name: "f2", arg: 7, scope: !9230, file: !1, line: 413, type: !141)
!9246 = !DILocation(line: 413, column: 59, scope: !9230)
!9247 = !DILocalVariable(name: "f3", arg: 8, scope: !9230, file: !1, line: 413, type: !141)
!9248 = !DILocation(line: 413, column: 71, scope: !9230)
!9249 = !DILocalVariable(name: "f4", arg: 9, scope: !9230, file: !1, line: 413, type: !141)
!9250 = !DILocation(line: 413, column: 83, scope: !9230)
!9251 = !DILocalVariable(name: "mat_nr", arg: 10, scope: !9230, file: !1, line: 413, type: !63)
!9252 = !DILocation(line: 413, column: 91, scope: !9230)
!9253 = !DILocalVariable(name: "varr", scope: !9230, file: !1, line: 415, type: !9254)
!9254 = !DICompositeType(tag: DW_TAG_array_type, baseType: !51, size: 256, elements: !6687)
!9255 = !DILocation(line: 415, column: 10, scope: !9230)
!9256 = !DILocation(line: 415, column: 20, scope: !9230)
!9257 = !DILocation(line: 415, column: 21, scope: !9230)
!9258 = !DILocation(line: 415, column: 25, scope: !9230)
!9259 = !DILocation(line: 415, column: 29, scope: !9230)
!9260 = !DILocation(line: 415, column: 33, scope: !9230)
!9261 = !DILocalVariable(name: "farr", scope: !9230, file: !1, line: 416, type: !9262)
!9262 = !DICompositeType(tag: DW_TAG_array_type, baseType: !141, size: 256, elements: !6687)
!9263 = !DILocation(line: 416, column: 10, scope: !9230)
!9264 = !DILocation(line: 416, column: 20, scope: !9230)
!9265 = !DILocation(line: 416, column: 21, scope: !9230)
!9266 = !DILocation(line: 416, column: 25, scope: !9230)
!9267 = !DILocation(line: 416, column: 29, scope: !9230)
!9268 = !DILocation(line: 416, column: 33, scope: !9230)
!9269 = !DILocation(line: 417, column: 25, scope: !9230)
!9270 = !DILocation(line: 417, column: 29, scope: !9230)
!9271 = !DILocation(line: 417, column: 35, scope: !9230)
!9272 = !DILocation(line: 417, column: 47, scope: !9230)
!9273 = !DILocation(line: 417, column: 53, scope: !9230)
!9274 = !DILocation(line: 417, column: 57, scope: !9230)
!9275 = !DILocation(line: 417, column: 9, scope: !9230)
!9276 = !DILocation(line: 417, column: 2, scope: !9230)
!9277 = distinct !DISubprogram(name: "bev_merge_uvs", scope: !1, file: !1, line: 521, type: !9278, scopeLine: 522, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!9278 = !DISubroutineType(types: !9279)
!9279 = !{null, !321, !51}
!9280 = !DILocalVariable(name: "bm", arg: 1, scope: !9277, file: !1, line: 521, type: !321)
!9281 = !DILocation(line: 521, column: 34, scope: !9277)
!9282 = !DILocalVariable(name: "v", arg: 2, scope: !9277, file: !1, line: 521, type: !51)
!9283 = !DILocation(line: 521, column: 46, scope: !9277)
!9284 = !DILocalVariable(name: "iter", scope: !9277, file: !1, line: 523, type: !499)
!9285 = !DILocation(line: 523, column: 9, scope: !9277)
!9286 = !DILocalVariable(name: "luv", scope: !9277, file: !1, line: 524, type: !9287)
!9287 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9288, size: 64)
!9288 = !DIDerivedType(tag: DW_TAG_typedef, name: "MLoopUV", file: !465, line: 112, baseType: !9289)
!9289 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MLoopUV", file: !465, line: 109, size: 96, elements: !9290)
!9290 = !{!9291, !9292}
!9291 = !DIDerivedType(tag: DW_TAG_member, name: "uv", scope: !9289, file: !465, line: 110, baseType: !3993, size: 64)
!9292 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !9289, file: !465, line: 111, baseType: !63, size: 32, offset: 64)
!9293 = !DILocation(line: 524, column: 11, scope: !9277)
!9294 = !DILocalVariable(name: "l", scope: !9277, file: !1, line: 525, type: !103)
!9295 = !DILocation(line: 525, column: 10, scope: !9277)
!9296 = !DILocalVariable(name: "uv", scope: !9277, file: !1, line: 526, type: !3993)
!9297 = !DILocation(line: 526, column: 8, scope: !9277)
!9298 = !DILocalVariable(name: "n", scope: !9277, file: !1, line: 527, type: !63)
!9299 = !DILocation(line: 527, column: 6, scope: !9277)
!9300 = !DILocalVariable(name: "cd_loop_uv_offset", scope: !9277, file: !1, line: 528, type: !63)
!9301 = !DILocation(line: 528, column: 6, scope: !9277)
!9302 = !DILocation(line: 528, column: 49, scope: !9277)
!9303 = !DILocation(line: 528, column: 53, scope: !9277)
!9304 = !DILocation(line: 528, column: 26, scope: !9277)
!9305 = !DILocation(line: 530, column: 6, scope: !9306)
!9306 = distinct !DILexicalBlock(scope: !9277, file: !1, line: 530, column: 6)
!9307 = !DILocation(line: 530, column: 24, scope: !9306)
!9308 = !DILocation(line: 530, column: 6, scope: !9277)
!9309 = !DILocation(line: 531, column: 3, scope: !9306)
!9310 = !DILocation(line: 533, column: 4, scope: !9277)
!9311 = !DILocation(line: 534, column: 10, scope: !9277)
!9312 = !DILocation(line: 534, column: 2, scope: !9277)
!9313 = !DILocation(line: 535, column: 2, scope: !9314)
!9314 = distinct !DILexicalBlock(scope: !9277, file: !1, line: 535, column: 2)
!9315 = !DILocation(line: 535, column: 2, scope: !9316)
!9316 = distinct !DILexicalBlock(scope: !9314, file: !1, line: 535, column: 2)
!9317 = !DILocation(line: 536, column: 9, scope: !9318)
!9318 = distinct !DILexicalBlock(scope: !9316, file: !1, line: 535, column: 47)
!9319 = !DILocation(line: 536, column: 7, scope: !9318)
!9320 = !DILocation(line: 537, column: 13, scope: !9318)
!9321 = !DILocation(line: 537, column: 17, scope: !9318)
!9322 = !DILocation(line: 537, column: 22, scope: !9318)
!9323 = !DILocation(line: 537, column: 3, scope: !9318)
!9324 = !DILocation(line: 538, column: 4, scope: !9318)
!9325 = !DILocation(line: 539, column: 2, scope: !9318)
!9326 = distinct !{!9326, !9313, !9327}
!9327 = !DILocation(line: 539, column: 2, scope: !9314)
!9328 = !DILocation(line: 540, column: 6, scope: !9329)
!9329 = distinct !DILexicalBlock(scope: !9277, file: !1, line: 540, column: 6)
!9330 = !DILocation(line: 540, column: 8, scope: !9329)
!9331 = !DILocation(line: 540, column: 6, scope: !9277)
!9332 = !DILocation(line: 541, column: 13, scope: !9333)
!9333 = distinct !DILexicalBlock(scope: !9329, file: !1, line: 540, column: 13)
!9334 = !DILocation(line: 541, column: 31, scope: !9333)
!9335 = !DILocation(line: 541, column: 24, scope: !9333)
!9336 = !DILocation(line: 541, column: 22, scope: !9333)
!9337 = !DILocation(line: 541, column: 3, scope: !9333)
!9338 = !DILocation(line: 542, column: 3, scope: !9339)
!9339 = distinct !DILexicalBlock(scope: !9333, file: !1, line: 542, column: 3)
!9340 = !DILocation(line: 542, column: 3, scope: !9341)
!9341 = distinct !DILexicalBlock(scope: !9339, file: !1, line: 542, column: 3)
!9342 = !DILocation(line: 543, column: 10, scope: !9343)
!9343 = distinct !DILexicalBlock(scope: !9341, file: !1, line: 542, column: 48)
!9344 = !DILocation(line: 543, column: 8, scope: !9343)
!9345 = !DILocation(line: 544, column: 15, scope: !9343)
!9346 = !DILocation(line: 544, column: 20, scope: !9343)
!9347 = !DILocation(line: 544, column: 24, scope: !9343)
!9348 = !DILocation(line: 544, column: 4, scope: !9343)
!9349 = !DILocation(line: 545, column: 3, scope: !9343)
!9350 = distinct !{!9350, !9338, !9351}
!9351 = !DILocation(line: 545, column: 3, scope: !9339)
!9352 = !DILocation(line: 546, column: 2, scope: !9333)
!9353 = !DILocation(line: 547, column: 1, scope: !9277)
!9354 = distinct !DISubprogram(name: "snap_to_pipe_profile", scope: !1, file: !1, line: 2425, type: !9355, scopeLine: 2426, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!9355 = !DISubroutineType(types: !9356)
!9356 = !{null, !121, !152, !170}
!9357 = !DILocalVariable(name: "vpipe", arg: 1, scope: !9354, file: !1, line: 2425, type: !121)
!9358 = !DILocation(line: 2425, column: 45, scope: !9354)
!9359 = !DILocalVariable(name: "midline", arg: 2, scope: !9354, file: !1, line: 2425, type: !152)
!9360 = !DILocation(line: 2425, column: 57, scope: !9354)
!9361 = !DILocalVariable(name: "co", arg: 3, scope: !9354, file: !1, line: 2425, type: !170)
!9362 = !DILocation(line: 2425, column: 72, scope: !9354)
!9363 = !DILocalVariable(name: "va", scope: !9354, file: !1, line: 2427, type: !75)
!9364 = !DILocation(line: 2427, column: 8, scope: !9354)
!9365 = !DILocalVariable(name: "vb", scope: !9354, file: !1, line: 2427, type: !75)
!9366 = !DILocation(line: 2427, column: 15, scope: !9354)
!9367 = !DILocalVariable(name: "edir", scope: !9354, file: !1, line: 2427, type: !75)
!9368 = !DILocation(line: 2427, column: 22, scope: !9354)
!9369 = !DILocalVariable(name: "va0", scope: !9354, file: !1, line: 2427, type: !75)
!9370 = !DILocation(line: 2427, column: 31, scope: !9354)
!9371 = !DILocalVariable(name: "vb0", scope: !9354, file: !1, line: 2427, type: !75)
!9372 = !DILocation(line: 2427, column: 39, scope: !9354)
!9373 = !DILocalVariable(name: "vmid0", scope: !9354, file: !1, line: 2427, type: !75)
!9374 = !DILocation(line: 2427, column: 47, scope: !9354)
!9375 = !DILocalVariable(name: "plane", scope: !9354, file: !1, line: 2428, type: !6686)
!9376 = !DILocation(line: 2428, column: 8, scope: !9354)
!9377 = !DILocalVariable(name: "m", scope: !9354, file: !1, line: 2428, type: !5334)
!9378 = !DILocation(line: 2428, column: 18, scope: !9354)
!9379 = !DILocalVariable(name: "minv", scope: !9354, file: !1, line: 2428, type: !5334)
!9380 = !DILocation(line: 2428, column: 27, scope: !9354)
!9381 = !DILocalVariable(name: "p", scope: !9354, file: !1, line: 2428, type: !75)
!9382 = !DILocation(line: 2428, column: 39, scope: !9354)
!9383 = !DILocalVariable(name: "snap", scope: !9354, file: !1, line: 2428, type: !75)
!9384 = !DILocation(line: 2428, column: 45, scope: !9354)
!9385 = !DILocalVariable(name: "pro", scope: !9354, file: !1, line: 2429, type: !5112)
!9386 = !DILocation(line: 2429, column: 11, scope: !9354)
!9387 = !DILocation(line: 2429, column: 18, scope: !9354)
!9388 = !DILocation(line: 2429, column: 25, scope: !9354)
!9389 = !DILocalVariable(name: "e", scope: !9354, file: !1, line: 2430, type: !130)
!9390 = !DILocation(line: 2430, column: 12, scope: !9354)
!9391 = !DILocation(line: 2430, column: 16, scope: !9354)
!9392 = !DILocation(line: 2430, column: 23, scope: !9354)
!9393 = !DILocation(line: 2432, column: 13, scope: !9354)
!9394 = !DILocation(line: 2432, column: 17, scope: !9354)
!9395 = !DILocation(line: 2432, column: 22, scope: !9354)
!9396 = !DILocation(line: 2432, column: 2, scope: !9354)
!9397 = !DILocation(line: 2433, column: 13, scope: !9354)
!9398 = !DILocation(line: 2433, column: 17, scope: !9354)
!9399 = !DILocation(line: 2433, column: 22, scope: !9354)
!9400 = !DILocation(line: 2433, column: 2, scope: !9354)
!9401 = !DILocation(line: 2435, column: 14, scope: !9354)
!9402 = !DILocation(line: 2435, column: 20, scope: !9354)
!9403 = !DILocation(line: 2435, column: 23, scope: !9354)
!9404 = !DILocation(line: 2435, column: 26, scope: !9354)
!9405 = !DILocation(line: 2435, column: 30, scope: !9354)
!9406 = !DILocation(line: 2435, column: 34, scope: !9354)
!9407 = !DILocation(line: 2435, column: 37, scope: !9354)
!9408 = !DILocation(line: 2435, column: 40, scope: !9354)
!9409 = !DILocation(line: 2435, column: 44, scope: !9354)
!9410 = !DILocation(line: 2435, column: 2, scope: !9354)
!9411 = !DILocation(line: 2437, column: 29, scope: !9354)
!9412 = !DILocation(line: 2437, column: 36, scope: !9354)
!9413 = !DILocation(line: 2437, column: 40, scope: !9354)
!9414 = !DILocation(line: 2437, column: 2, scope: !9354)
!9415 = !DILocation(line: 2438, column: 22, scope: !9354)
!9416 = !DILocation(line: 2438, column: 27, scope: !9354)
!9417 = !DILocation(line: 2438, column: 34, scope: !9354)
!9418 = !DILocation(line: 2438, column: 2, scope: !9354)
!9419 = !DILocation(line: 2439, column: 22, scope: !9354)
!9420 = !DILocation(line: 2439, column: 27, scope: !9354)
!9421 = !DILocation(line: 2439, column: 34, scope: !9354)
!9422 = !DILocation(line: 2439, column: 2, scope: !9354)
!9423 = !DILocation(line: 2440, column: 22, scope: !9354)
!9424 = !DILocation(line: 2440, column: 29, scope: !9354)
!9425 = !DILocation(line: 2440, column: 36, scope: !9354)
!9426 = !DILocation(line: 2440, column: 41, scope: !9354)
!9427 = !DILocation(line: 2440, column: 2, scope: !9354)
!9428 = !DILocation(line: 2441, column: 27, scope: !9429)
!9429 = distinct !DILexicalBlock(scope: !9354, file: !1, line: 2441, column: 6)
!9430 = !DILocation(line: 2441, column: 32, scope: !9429)
!9431 = !DILocation(line: 2441, column: 39, scope: !9429)
!9432 = !DILocation(line: 2441, column: 44, scope: !9429)
!9433 = !DILocation(line: 2441, column: 6, scope: !9429)
!9434 = !DILocation(line: 2441, column: 6, scope: !9354)
!9435 = !DILocation(line: 2443, column: 21, scope: !9436)
!9436 = distinct !DILexicalBlock(scope: !9437, file: !1, line: 2443, column: 7)
!9437 = distinct !DILexicalBlock(scope: !9429, file: !1, line: 2441, column: 48)
!9438 = !DILocation(line: 2443, column: 27, scope: !9436)
!9439 = !DILocation(line: 2443, column: 8, scope: !9436)
!9440 = !DILocation(line: 2443, column: 7, scope: !9437)
!9441 = !DILocation(line: 2446, column: 4, scope: !9442)
!9442 = distinct !DILexicalBlock(scope: !9436, file: !1, line: 2443, column: 31)
!9443 = !DILocation(line: 2448, column: 15, scope: !9437)
!9444 = !DILocation(line: 2448, column: 18, scope: !9437)
!9445 = !DILocation(line: 2448, column: 24, scope: !9437)
!9446 = !DILocation(line: 2448, column: 3, scope: !9437)
!9447 = !DILocation(line: 2449, column: 26, scope: !9437)
!9448 = !DILocation(line: 2449, column: 29, scope: !9437)
!9449 = !DILocation(line: 2449, column: 34, scope: !9437)
!9450 = !DILocation(line: 2449, column: 43, scope: !9437)
!9451 = !DILocation(line: 2449, column: 3, scope: !9437)
!9452 = !DILocation(line: 2450, column: 15, scope: !9437)
!9453 = !DILocation(line: 2450, column: 21, scope: !9437)
!9454 = !DILocation(line: 2450, column: 24, scope: !9437)
!9455 = !DILocation(line: 2450, column: 3, scope: !9437)
!9456 = !DILocation(line: 2451, column: 14, scope: !9437)
!9457 = !DILocation(line: 2451, column: 18, scope: !9437)
!9458 = !DILocation(line: 2451, column: 3, scope: !9437)
!9459 = !DILocation(line: 2452, column: 2, scope: !9437)
!9460 = !DILocation(line: 2455, column: 30, scope: !9461)
!9461 = distinct !DILexicalBlock(scope: !9429, file: !1, line: 2453, column: 7)
!9462 = !DILocation(line: 2455, column: 33, scope: !9461)
!9463 = !DILocation(line: 2455, column: 37, scope: !9461)
!9464 = !DILocation(line: 2455, column: 42, scope: !9461)
!9465 = !DILocation(line: 2455, column: 3, scope: !9461)
!9466 = !DILocation(line: 2456, column: 14, scope: !9461)
!9467 = !DILocation(line: 2456, column: 18, scope: !9461)
!9468 = !DILocation(line: 2456, column: 3, scope: !9461)
!9469 = !DILocation(line: 2458, column: 1, scope: !9354)
!9470 = distinct !DISubprogram(name: "snap_to_superellipsoid", scope: !1, file: !1, line: 1301, type: !9471, scopeLine: 1302, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!9471 = !DISubroutineType(types: !9472)
!9472 = !{null, !170, !459, !152}
!9473 = !DILocalVariable(name: "co", arg: 1, scope: !9470, file: !1, line: 1301, type: !170)
!9474 = !DILocation(line: 1301, column: 42, scope: !9470)
!9475 = !DILocalVariable(name: "super_r", arg: 2, scope: !9470, file: !1, line: 1301, type: !459)
!9476 = !DILocation(line: 1301, column: 61, scope: !9470)
!9477 = !DILocalVariable(name: "midline", arg: 3, scope: !9470, file: !1, line: 1301, type: !152)
!9478 = !DILocation(line: 1301, column: 75, scope: !9470)
!9479 = !DILocalVariable(name: "a", scope: !9470, file: !1, line: 1303, type: !76)
!9480 = !DILocation(line: 1303, column: 8, scope: !9470)
!9481 = !DILocalVariable(name: "b", scope: !9470, file: !1, line: 1303, type: !76)
!9482 = !DILocation(line: 1303, column: 11, scope: !9470)
!9483 = !DILocalVariable(name: "c", scope: !9470, file: !1, line: 1303, type: !76)
!9484 = !DILocation(line: 1303, column: 14, scope: !9470)
!9485 = !DILocalVariable(name: "x", scope: !9470, file: !1, line: 1303, type: !76)
!9486 = !DILocation(line: 1303, column: 17, scope: !9470)
!9487 = !DILocalVariable(name: "y", scope: !9470, file: !1, line: 1303, type: !76)
!9488 = !DILocation(line: 1303, column: 20, scope: !9470)
!9489 = !DILocalVariable(name: "z", scope: !9470, file: !1, line: 1303, type: !76)
!9490 = !DILocation(line: 1303, column: 23, scope: !9470)
!9491 = !DILocalVariable(name: "r", scope: !9470, file: !1, line: 1303, type: !76)
!9492 = !DILocation(line: 1303, column: 26, scope: !9470)
!9493 = !DILocalVariable(name: "rinv", scope: !9470, file: !1, line: 1303, type: !76)
!9494 = !DILocation(line: 1303, column: 29, scope: !9470)
!9495 = !DILocalVariable(name: "dx", scope: !9470, file: !1, line: 1303, type: !76)
!9496 = !DILocation(line: 1303, column: 35, scope: !9470)
!9497 = !DILocalVariable(name: "dy", scope: !9470, file: !1, line: 1303, type: !76)
!9498 = !DILocation(line: 1303, column: 39, scope: !9470)
!9499 = !DILocation(line: 1305, column: 6, scope: !9470)
!9500 = !DILocation(line: 1305, column: 4, scope: !9470)
!9501 = !DILocation(line: 1306, column: 6, scope: !9502)
!9502 = distinct !DILexicalBlock(scope: !9470, file: !1, line: 1306, column: 6)
!9503 = !DILocation(line: 1306, column: 8, scope: !9502)
!9504 = !DILocation(line: 1306, column: 6, scope: !9470)
!9505 = !DILocation(line: 1307, column: 16, scope: !9506)
!9506 = distinct !DILexicalBlock(scope: !9502, file: !1, line: 1306, column: 25)
!9507 = !DILocation(line: 1307, column: 3, scope: !9506)
!9508 = !DILocation(line: 1308, column: 3, scope: !9506)
!9509 = !DILocation(line: 1311, column: 23, scope: !9470)
!9510 = !DILocation(line: 1311, column: 10, scope: !9470)
!9511 = !DILocation(line: 1311, column: 8, scope: !9470)
!9512 = !DILocation(line: 1311, column: 4, scope: !9470)
!9513 = !DILocation(line: 1312, column: 23, scope: !9470)
!9514 = !DILocation(line: 1312, column: 10, scope: !9470)
!9515 = !DILocation(line: 1312, column: 8, scope: !9470)
!9516 = !DILocation(line: 1312, column: 4, scope: !9470)
!9517 = !DILocation(line: 1313, column: 23, scope: !9470)
!9518 = !DILocation(line: 1313, column: 10, scope: !9470)
!9519 = !DILocation(line: 1313, column: 8, scope: !9470)
!9520 = !DILocation(line: 1313, column: 4, scope: !9470)
!9521 = !DILocation(line: 1314, column: 6, scope: !9522)
!9522 = distinct !DILexicalBlock(scope: !9470, file: !1, line: 1314, column: 6)
!9523 = !DILocation(line: 1314, column: 8, scope: !9522)
!9524 = !DILocation(line: 1314, column: 24, scope: !9522)
!9525 = !DILocation(line: 1314, column: 27, scope: !9522)
!9526 = !DILocation(line: 1314, column: 29, scope: !9522)
!9527 = !DILocation(line: 1314, column: 6, scope: !9470)
!9528 = !DILocation(line: 1317, column: 5, scope: !9529)
!9529 = distinct !DILexicalBlock(scope: !9522, file: !1, line: 1314, column: 49)
!9530 = !DILocation(line: 1318, column: 20, scope: !9529)
!9531 = !DILocation(line: 1318, column: 7, scope: !9529)
!9532 = !DILocation(line: 1318, column: 5, scope: !9529)
!9533 = !DILocation(line: 1319, column: 20, scope: !9529)
!9534 = !DILocation(line: 1319, column: 7, scope: !9529)
!9535 = !DILocation(line: 1319, column: 5, scope: !9529)
!9536 = !DILocation(line: 1320, column: 7, scope: !9537)
!9537 = distinct !DILexicalBlock(scope: !9529, file: !1, line: 1320, column: 7)
!9538 = !DILocation(line: 1320, column: 9, scope: !9537)
!9539 = !DILocation(line: 1320, column: 7, scope: !9529)
!9540 = !DILocation(line: 1322, column: 16, scope: !9541)
!9541 = distinct !DILexicalBlock(scope: !9537, file: !1, line: 1320, column: 26)
!9542 = !DILocation(line: 1322, column: 14, scope: !9541)
!9543 = !DILocation(line: 1322, column: 7, scope: !9541)
!9544 = !DILocation(line: 1323, column: 16, scope: !9541)
!9545 = !DILocation(line: 1323, column: 14, scope: !9541)
!9546 = !DILocation(line: 1323, column: 7, scope: !9541)
!9547 = !DILocation(line: 1324, column: 8, scope: !9548)
!9548 = distinct !DILexicalBlock(scope: !9541, file: !1, line: 1324, column: 8)
!9549 = !DILocation(line: 1324, column: 13, scope: !9548)
!9550 = !DILocation(line: 1324, column: 11, scope: !9548)
!9551 = !DILocation(line: 1324, column: 8, scope: !9541)
!9552 = !DILocation(line: 1325, column: 7, scope: !9553)
!9553 = distinct !DILexicalBlock(scope: !9548, file: !1, line: 1324, column: 17)
!9554 = !DILocation(line: 1326, column: 9, scope: !9553)
!9555 = !DILocation(line: 1326, column: 26, scope: !9553)
!9556 = !DILocation(line: 1326, column: 7, scope: !9553)
!9557 = !DILocation(line: 1327, column: 4, scope: !9553)
!9558 = !DILocation(line: 1329, column: 7, scope: !9559)
!9559 = distinct !DILexicalBlock(scope: !9548, file: !1, line: 1328, column: 9)
!9560 = !DILocation(line: 1330, column: 9, scope: !9559)
!9561 = !DILocation(line: 1330, column: 26, scope: !9559)
!9562 = !DILocation(line: 1330, column: 7, scope: !9559)
!9563 = !DILocation(line: 1332, column: 3, scope: !9541)
!9564 = !DILocation(line: 1335, column: 8, scope: !9565)
!9565 = distinct !DILexicalBlock(scope: !9566, file: !1, line: 1335, column: 8)
!9566 = distinct !DILexicalBlock(scope: !9537, file: !1, line: 1333, column: 8)
!9567 = !DILocation(line: 1335, column: 12, scope: !9565)
!9568 = !DILocation(line: 1335, column: 10, scope: !9565)
!9569 = !DILocation(line: 1335, column: 8, scope: !9566)
!9570 = !DILocation(line: 1336, column: 7, scope: !9571)
!9571 = distinct !DILexicalBlock(scope: !9565, file: !1, line: 1335, column: 15)
!9572 = !DILocation(line: 1337, column: 9, scope: !9571)
!9573 = !DILocation(line: 1337, column: 26, scope: !9571)
!9574 = !DILocation(line: 1337, column: 7, scope: !9571)
!9575 = !DILocation(line: 1338, column: 4, scope: !9571)
!9576 = !DILocation(line: 1340, column: 7, scope: !9577)
!9577 = distinct !DILexicalBlock(scope: !9565, file: !1, line: 1339, column: 9)
!9578 = !DILocation(line: 1341, column: 9, scope: !9577)
!9579 = !DILocation(line: 1341, column: 26, scope: !9577)
!9580 = !DILocation(line: 1341, column: 7, scope: !9577)
!9581 = !DILocation(line: 1344, column: 2, scope: !9529)
!9582 = !DILocation(line: 1346, column: 17, scope: !9583)
!9583 = distinct !DILexicalBlock(scope: !9522, file: !1, line: 1345, column: 7)
!9584 = !DILocation(line: 1346, column: 15, scope: !9583)
!9585 = !DILocation(line: 1346, column: 8, scope: !9583)
!9586 = !DILocation(line: 1347, column: 7, scope: !9587)
!9587 = distinct !DILexicalBlock(scope: !9583, file: !1, line: 1347, column: 7)
!9588 = !DILocation(line: 1347, column: 9, scope: !9587)
!9589 = !DILocation(line: 1347, column: 7, scope: !9583)
!9590 = !DILocation(line: 1348, column: 8, scope: !9591)
!9591 = distinct !DILexicalBlock(scope: !9592, file: !1, line: 1348, column: 8)
!9592 = distinct !DILexicalBlock(scope: !9587, file: !1, line: 1347, column: 18)
!9593 = !DILocation(line: 1348, column: 10, scope: !9591)
!9594 = !DILocation(line: 1348, column: 8, scope: !9592)
!9595 = !DILocation(line: 1349, column: 7, scope: !9596)
!9596 = distinct !DILexicalBlock(scope: !9591, file: !1, line: 1348, column: 19)
!9597 = !DILocation(line: 1350, column: 7, scope: !9596)
!9598 = !DILocation(line: 1351, column: 14, scope: !9596)
!9599 = !DILocation(line: 1351, column: 17, scope: !9596)
!9600 = !DILocation(line: 1351, column: 9, scope: !9596)
!9601 = !DILocation(line: 1351, column: 7, scope: !9596)
!9602 = !DILocation(line: 1352, column: 4, scope: !9596)
!9603 = !DILocation(line: 1354, column: 7, scope: !9604)
!9604 = distinct !DILexicalBlock(scope: !9591, file: !1, line: 1353, column: 9)
!9605 = !DILocation(line: 1355, column: 34, scope: !9604)
!9606 = !DILocation(line: 1355, column: 38, scope: !9604)
!9607 = !DILocation(line: 1355, column: 36, scope: !9604)
!9608 = !DILocation(line: 1355, column: 41, scope: !9604)
!9609 = !DILocation(line: 1355, column: 29, scope: !9604)
!9610 = !DILocation(line: 1355, column: 27, scope: !9604)
!9611 = !DILocation(line: 1355, column: 19, scope: !9604)
!9612 = !DILocation(line: 1355, column: 46, scope: !9604)
!9613 = !DILocation(line: 1355, column: 9, scope: !9604)
!9614 = !DILocation(line: 1355, column: 7, scope: !9604)
!9615 = !DILocation(line: 1356, column: 9, scope: !9604)
!9616 = !DILocation(line: 1356, column: 13, scope: !9604)
!9617 = !DILocation(line: 1356, column: 11, scope: !9604)
!9618 = !DILocation(line: 1356, column: 17, scope: !9604)
!9619 = !DILocation(line: 1356, column: 15, scope: !9604)
!9620 = !DILocation(line: 1356, column: 7, scope: !9604)
!9621 = !DILocation(line: 1358, column: 3, scope: !9592)
!9622 = !DILocation(line: 1360, column: 33, scope: !9623)
!9623 = distinct !DILexicalBlock(scope: !9587, file: !1, line: 1359, column: 8)
!9624 = !DILocation(line: 1360, column: 37, scope: !9623)
!9625 = !DILocation(line: 1360, column: 35, scope: !9623)
!9626 = !DILocation(line: 1360, column: 40, scope: !9623)
!9627 = !DILocation(line: 1360, column: 28, scope: !9623)
!9628 = !DILocation(line: 1360, column: 26, scope: !9623)
!9629 = !DILocation(line: 1360, column: 50, scope: !9623)
!9630 = !DILocation(line: 1360, column: 54, scope: !9623)
!9631 = !DILocation(line: 1360, column: 52, scope: !9623)
!9632 = !DILocation(line: 1360, column: 57, scope: !9623)
!9633 = !DILocation(line: 1360, column: 45, scope: !9623)
!9634 = !DILocation(line: 1360, column: 43, scope: !9623)
!9635 = !DILocation(line: 1360, column: 18, scope: !9623)
!9636 = !DILocation(line: 1360, column: 62, scope: !9623)
!9637 = !DILocation(line: 1360, column: 8, scope: !9623)
!9638 = !DILocation(line: 1360, column: 6, scope: !9623)
!9639 = !DILocation(line: 1361, column: 8, scope: !9623)
!9640 = !DILocation(line: 1361, column: 12, scope: !9623)
!9641 = !DILocation(line: 1361, column: 10, scope: !9623)
!9642 = !DILocation(line: 1361, column: 16, scope: !9623)
!9643 = !DILocation(line: 1361, column: 14, scope: !9623)
!9644 = !DILocation(line: 1361, column: 6, scope: !9623)
!9645 = !DILocation(line: 1362, column: 8, scope: !9623)
!9646 = !DILocation(line: 1362, column: 12, scope: !9623)
!9647 = !DILocation(line: 1362, column: 10, scope: !9623)
!9648 = !DILocation(line: 1362, column: 16, scope: !9623)
!9649 = !DILocation(line: 1362, column: 14, scope: !9623)
!9650 = !DILocation(line: 1362, column: 6, scope: !9623)
!9651 = !DILocation(line: 1365, column: 10, scope: !9470)
!9652 = !DILocation(line: 1365, column: 2, scope: !9470)
!9653 = !DILocation(line: 1365, column: 8, scope: !9470)
!9654 = !DILocation(line: 1366, column: 10, scope: !9470)
!9655 = !DILocation(line: 1366, column: 2, scope: !9470)
!9656 = !DILocation(line: 1366, column: 8, scope: !9470)
!9657 = !DILocation(line: 1367, column: 10, scope: !9470)
!9658 = !DILocation(line: 1367, column: 2, scope: !9470)
!9659 = !DILocation(line: 1367, column: 8, scope: !9470)
!9660 = !DILocation(line: 1368, column: 1, scope: !9470)
!9661 = distinct !DISubprogram(name: "min_ff", scope: !3863, file: !3863, line: 202, type: !6805, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!9662 = !DILocalVariable(name: "a", arg: 1, scope: !9661, file: !3863, line: 202, type: !76)
!9663 = !DILocation(line: 202, column: 28, scope: !9661)
!9664 = !DILocalVariable(name: "b", arg: 2, scope: !9661, file: !3863, line: 202, type: !76)
!9665 = !DILocation(line: 202, column: 37, scope: !9661)
!9666 = !DILocation(line: 204, column: 10, scope: !9661)
!9667 = !DILocation(line: 204, column: 14, scope: !9661)
!9668 = !DILocation(line: 204, column: 12, scope: !9661)
!9669 = !DILocation(line: 204, column: 9, scope: !9661)
!9670 = !DILocation(line: 204, column: 19, scope: !9661)
!9671 = !DILocation(line: 204, column: 23, scope: !9661)
!9672 = !DILocation(line: 204, column: 2, scope: !9661)
!9673 = distinct !DISubprogram(name: "make_unit_cube_map", scope: !1, file: !1, line: 1107, type: !9674, scopeLine: 1109, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!9674 = !DISubroutineType(types: !9675)
!9675 = !{null, !1865, !1865, !1865, !1865, !6685}
!9676 = !DILocalVariable(name: "va", arg: 1, scope: !9673, file: !1, line: 1107, type: !1865)
!9677 = !DILocation(line: 1107, column: 44, scope: !9673)
!9678 = !DILocalVariable(name: "vb", arg: 2, scope: !9673, file: !1, line: 1107, type: !1865)
!9679 = !DILocation(line: 1107, column: 63, scope: !9673)
!9680 = !DILocalVariable(name: "vc", arg: 3, scope: !9673, file: !1, line: 1107, type: !1865)
!9681 = !DILocation(line: 1107, column: 82, scope: !9673)
!9682 = !DILocalVariable(name: "vd", arg: 4, scope: !9673, file: !1, line: 1108, type: !1865)
!9683 = !DILocation(line: 1108, column: 44, scope: !9673)
!9684 = !DILocalVariable(name: "r_mat", arg: 5, scope: !9673, file: !1, line: 1108, type: !6685)
!9685 = !DILocation(line: 1108, column: 57, scope: !9673)
!9686 = !DILocation(line: 1110, column: 13, scope: !9673)
!9687 = !DILocation(line: 1110, column: 23, scope: !9673)
!9688 = !DILocation(line: 1110, column: 2, scope: !9673)
!9689 = !DILocation(line: 1111, column: 12, scope: !9673)
!9690 = !DILocation(line: 1111, column: 22, scope: !9673)
!9691 = !DILocation(line: 1111, column: 2, scope: !9673)
!9692 = !DILocation(line: 1112, column: 12, scope: !9673)
!9693 = !DILocation(line: 1112, column: 22, scope: !9673)
!9694 = !DILocation(line: 1112, column: 2, scope: !9673)
!9695 = !DILocation(line: 1113, column: 12, scope: !9673)
!9696 = !DILocation(line: 1113, column: 22, scope: !9673)
!9697 = !DILocation(line: 1113, column: 2, scope: !9673)
!9698 = !DILocation(line: 1114, column: 12, scope: !9673)
!9699 = !DILocation(line: 1114, column: 2, scope: !9673)
!9700 = !DILocation(line: 1115, column: 2, scope: !9673)
!9701 = !DILocation(line: 1115, column: 14, scope: !9673)
!9702 = !DILocation(line: 1116, column: 13, scope: !9673)
!9703 = !DILocation(line: 1116, column: 23, scope: !9673)
!9704 = !DILocation(line: 1116, column: 2, scope: !9673)
!9705 = !DILocation(line: 1117, column: 12, scope: !9673)
!9706 = !DILocation(line: 1117, column: 22, scope: !9673)
!9707 = !DILocation(line: 1117, column: 2, scope: !9673)
!9708 = !DILocation(line: 1118, column: 12, scope: !9673)
!9709 = !DILocation(line: 1118, column: 22, scope: !9673)
!9710 = !DILocation(line: 1118, column: 2, scope: !9673)
!9711 = !DILocation(line: 1119, column: 12, scope: !9673)
!9712 = !DILocation(line: 1119, column: 22, scope: !9673)
!9713 = !DILocation(line: 1119, column: 2, scope: !9673)
!9714 = !DILocation(line: 1120, column: 12, scope: !9673)
!9715 = !DILocation(line: 1120, column: 2, scope: !9673)
!9716 = !DILocation(line: 1121, column: 2, scope: !9673)
!9717 = !DILocation(line: 1121, column: 14, scope: !9673)
!9718 = !DILocation(line: 1122, column: 13, scope: !9673)
!9719 = !DILocation(line: 1122, column: 23, scope: !9673)
!9720 = !DILocation(line: 1122, column: 2, scope: !9673)
!9721 = !DILocation(line: 1123, column: 12, scope: !9673)
!9722 = !DILocation(line: 1123, column: 22, scope: !9673)
!9723 = !DILocation(line: 1123, column: 2, scope: !9673)
!9724 = !DILocation(line: 1124, column: 12, scope: !9673)
!9725 = !DILocation(line: 1124, column: 22, scope: !9673)
!9726 = !DILocation(line: 1124, column: 2, scope: !9673)
!9727 = !DILocation(line: 1125, column: 12, scope: !9673)
!9728 = !DILocation(line: 1125, column: 22, scope: !9673)
!9729 = !DILocation(line: 1125, column: 2, scope: !9673)
!9730 = !DILocation(line: 1126, column: 12, scope: !9673)
!9731 = !DILocation(line: 1126, column: 2, scope: !9673)
!9732 = !DILocation(line: 1127, column: 2, scope: !9673)
!9733 = !DILocation(line: 1127, column: 14, scope: !9673)
!9734 = !DILocation(line: 1128, column: 13, scope: !9673)
!9735 = !DILocation(line: 1128, column: 23, scope: !9673)
!9736 = !DILocation(line: 1128, column: 2, scope: !9673)
!9737 = !DILocation(line: 1129, column: 12, scope: !9673)
!9738 = !DILocation(line: 1129, column: 22, scope: !9673)
!9739 = !DILocation(line: 1129, column: 2, scope: !9673)
!9740 = !DILocation(line: 1130, column: 12, scope: !9673)
!9741 = !DILocation(line: 1130, column: 22, scope: !9673)
!9742 = !DILocation(line: 1130, column: 2, scope: !9673)
!9743 = !DILocation(line: 1131, column: 12, scope: !9673)
!9744 = !DILocation(line: 1131, column: 22, scope: !9673)
!9745 = !DILocation(line: 1131, column: 2, scope: !9673)
!9746 = !DILocation(line: 1132, column: 12, scope: !9673)
!9747 = !DILocation(line: 1132, column: 2, scope: !9673)
!9748 = !DILocation(line: 1133, column: 2, scope: !9673)
!9749 = !DILocation(line: 1133, column: 14, scope: !9673)
!9750 = !DILocation(line: 1134, column: 1, scope: !9673)
!9751 = distinct !DISubprogram(name: "make_cube_corner_adj_vmesh", scope: !1, file: !1, line: 2223, type: !9752, scopeLine: 2224, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!9752 = !DISubroutineType(types: !9753)
!9753 = !{!298, !801}
!9754 = !DILocalVariable(name: "bp", arg: 1, scope: !9751, file: !1, line: 2223, type: !801)
!9755 = !DILocation(line: 2223, column: 55, scope: !9751)
!9756 = !DILocalVariable(name: "mem_arena", scope: !9751, file: !1, line: 2225, type: !601)
!9757 = !DILocation(line: 2225, column: 12, scope: !9751)
!9758 = !DILocation(line: 2225, column: 24, scope: !9751)
!9759 = !DILocation(line: 2225, column: 28, scope: !9751)
!9760 = !DILocalVariable(name: "nseg", scope: !9751, file: !1, line: 2226, type: !63)
!9761 = !DILocation(line: 2226, column: 6, scope: !9751)
!9762 = !DILocation(line: 2226, column: 13, scope: !9751)
!9763 = !DILocation(line: 2226, column: 17, scope: !9751)
!9764 = !DILocalVariable(name: "r", scope: !9751, file: !1, line: 2227, type: !76)
!9765 = !DILocation(line: 2227, column: 8, scope: !9751)
!9766 = !DILocation(line: 2227, column: 12, scope: !9751)
!9767 = !DILocation(line: 2227, column: 16, scope: !9751)
!9768 = !DILocalVariable(name: "vm0", scope: !9751, file: !1, line: 2228, type: !298)
!9769 = !DILocation(line: 2228, column: 9, scope: !9751)
!9770 = !DILocalVariable(name: "vm1", scope: !9751, file: !1, line: 2228, type: !298)
!9771 = !DILocation(line: 2228, column: 15, scope: !9751)
!9772 = !DILocalVariable(name: "bndv", scope: !9751, file: !1, line: 2229, type: !121)
!9773 = !DILocation(line: 2229, column: 13, scope: !9751)
!9774 = !DILocalVariable(name: "i", scope: !9751, file: !1, line: 2230, type: !63)
!9775 = !DILocation(line: 2230, column: 6, scope: !9751)
!9776 = !DILocalVariable(name: "j", scope: !9751, file: !1, line: 2230, type: !63)
!9777 = !DILocation(line: 2230, column: 9, scope: !9751)
!9778 = !DILocalVariable(name: "k", scope: !9751, file: !1, line: 2230, type: !63)
!9779 = !DILocation(line: 2230, column: 12, scope: !9751)
!9780 = !DILocalVariable(name: "ns2", scope: !9751, file: !1, line: 2230, type: !63)
!9781 = !DILocation(line: 2230, column: 15, scope: !9751)
!9782 = !DILocalVariable(name: "co", scope: !9751, file: !1, line: 2231, type: !75)
!9783 = !DILocation(line: 2231, column: 8, scope: !9751)
!9784 = !DILocalVariable(name: "coc", scope: !9751, file: !1, line: 2231, type: !75)
!9785 = !DILocation(line: 2231, column: 15, scope: !9751)
!9786 = !DILocalVariable(name: "w", scope: !9751, file: !1, line: 2232, type: !76)
!9787 = !DILocation(line: 2232, column: 8, scope: !9751)
!9788 = !DILocation(line: 2234, column: 6, scope: !9789)
!9789 = distinct !DILexicalBlock(scope: !9751, file: !1, line: 2234, column: 6)
!9790 = !DILocation(line: 2234, column: 8, scope: !9789)
!9791 = !DILocation(line: 2234, column: 6, scope: !9751)
!9792 = !DILocation(line: 2235, column: 36, scope: !9789)
!9793 = !DILocation(line: 2235, column: 47, scope: !9789)
!9794 = !DILocation(line: 2235, column: 10, scope: !9789)
!9795 = !DILocation(line: 2235, column: 3, scope: !9789)
!9796 = !DILocation(line: 2238, column: 22, scope: !9751)
!9797 = !DILocation(line: 2238, column: 8, scope: !9751)
!9798 = !DILocation(line: 2238, column: 6, scope: !9751)
!9799 = !DILocation(line: 2239, column: 2, scope: !9751)
!9800 = !DILocation(line: 2239, column: 7, scope: !9751)
!9801 = !DILocation(line: 2239, column: 13, scope: !9751)
!9802 = !DILocation(line: 2240, column: 9, scope: !9803)
!9803 = distinct !DILexicalBlock(scope: !9751, file: !1, line: 2240, column: 2)
!9804 = !DILocation(line: 2240, column: 7, scope: !9803)
!9805 = !DILocation(line: 2240, column: 14, scope: !9806)
!9806 = distinct !DILexicalBlock(scope: !9803, file: !1, line: 2240, column: 2)
!9807 = !DILocation(line: 2240, column: 16, scope: !9806)
!9808 = !DILocation(line: 2240, column: 2, scope: !9803)
!9809 = !DILocation(line: 2241, column: 11, scope: !9810)
!9810 = distinct !DILexicalBlock(scope: !9806, file: !1, line: 2240, column: 26)
!9811 = !DILocation(line: 2241, column: 3, scope: !9810)
!9812 = !DILocation(line: 2242, column: 6, scope: !9810)
!9813 = !DILocation(line: 2242, column: 3, scope: !9810)
!9814 = !DILocation(line: 2242, column: 9, scope: !9810)
!9815 = !DILocation(line: 2243, column: 22, scope: !9810)
!9816 = !DILocation(line: 2243, column: 33, scope: !9810)
!9817 = !DILocation(line: 2243, column: 38, scope: !9810)
!9818 = !DILocation(line: 2243, column: 3, scope: !9810)
!9819 = !DILocation(line: 2244, column: 2, scope: !9810)
!9820 = !DILocation(line: 2240, column: 22, scope: !9806)
!9821 = !DILocation(line: 2240, column: 2, scope: !9806)
!9822 = distinct !{!9822, !9808, !9823}
!9823 = !DILocation(line: 2244, column: 2, scope: !9803)
!9824 = !DILocation(line: 2245, column: 9, scope: !9751)
!9825 = !DILocation(line: 2245, column: 14, scope: !9751)
!9826 = !DILocation(line: 2245, column: 7, scope: !9751)
!9827 = !DILocation(line: 2246, column: 9, scope: !9828)
!9828 = distinct !DILexicalBlock(scope: !9751, file: !1, line: 2246, column: 2)
!9829 = !DILocation(line: 2246, column: 7, scope: !9828)
!9830 = !DILocation(line: 2246, column: 14, scope: !9831)
!9831 = distinct !DILexicalBlock(scope: !9828, file: !1, line: 2246, column: 2)
!9832 = !DILocation(line: 2246, column: 16, scope: !9831)
!9833 = !DILocation(line: 2246, column: 2, scope: !9828)
!9834 = !DILocation(line: 2248, column: 7, scope: !9835)
!9835 = distinct !DILexicalBlock(scope: !9831, file: !1, line: 2246, column: 26)
!9836 = !DILocation(line: 2248, column: 3, scope: !9835)
!9837 = !DILocation(line: 2248, column: 10, scope: !9835)
!9838 = !DILocation(line: 2249, column: 8, scope: !9835)
!9839 = !DILocation(line: 2249, column: 10, scope: !9835)
!9840 = !DILocation(line: 2249, column: 15, scope: !9835)
!9841 = !DILocation(line: 2249, column: 3, scope: !9835)
!9842 = !DILocation(line: 2249, column: 20, scope: !9835)
!9843 = !DILocation(line: 2250, column: 8, scope: !9835)
!9844 = !DILocation(line: 2250, column: 10, scope: !9835)
!9845 = !DILocation(line: 2250, column: 15, scope: !9835)
!9846 = !DILocation(line: 2250, column: 3, scope: !9835)
!9847 = !DILocation(line: 2250, column: 20, scope: !9835)
!9848 = !DILocation(line: 2251, column: 27, scope: !9835)
!9849 = !DILocation(line: 2251, column: 3, scope: !9835)
!9850 = !DILocation(line: 2251, column: 9, scope: !9835)
!9851 = !DILocation(line: 2251, column: 17, scope: !9835)
!9852 = !DILocation(line: 2251, column: 25, scope: !9835)
!9853 = !DILocation(line: 2252, column: 14, scope: !9835)
!9854 = !DILocation(line: 2252, column: 20, scope: !9835)
!9855 = !DILocation(line: 2252, column: 28, scope: !9835)
!9856 = !DILocation(line: 2252, column: 33, scope: !9835)
!9857 = !DILocation(line: 2252, column: 39, scope: !9835)
!9858 = !DILocation(line: 2252, column: 42, scope: !9835)
!9859 = !DILocation(line: 2252, column: 3, scope: !9835)
!9860 = !DILocation(line: 2253, column: 14, scope: !9835)
!9861 = !DILocation(line: 2253, column: 20, scope: !9835)
!9862 = !DILocation(line: 2253, column: 28, scope: !9835)
!9863 = !DILocation(line: 2253, column: 33, scope: !9835)
!9864 = !DILocation(line: 2253, column: 39, scope: !9835)
!9865 = !DILocation(line: 2253, column: 45, scope: !9835)
!9866 = !DILocation(line: 2253, column: 48, scope: !9835)
!9867 = !DILocation(line: 2253, column: 3, scope: !9835)
!9868 = !DILocation(line: 2254, column: 14, scope: !9835)
!9869 = !DILocation(line: 2254, column: 20, scope: !9835)
!9870 = !DILocation(line: 2254, column: 28, scope: !9835)
!9871 = !DILocation(line: 2254, column: 35, scope: !9835)
!9872 = !DILocation(line: 2254, column: 3, scope: !9835)
!9873 = !DILocation(line: 2255, column: 24, scope: !9835)
!9874 = !DILocation(line: 2255, column: 29, scope: !9835)
!9875 = !DILocation(line: 2255, column: 14, scope: !9835)
!9876 = !DILocation(line: 2255, column: 39, scope: !9835)
!9877 = !DILocation(line: 2255, column: 43, scope: !9835)
!9878 = !DILocation(line: 2255, column: 49, scope: !9835)
!9879 = !DILocation(line: 2255, column: 57, scope: !9835)
!9880 = !DILocation(line: 2255, column: 3, scope: !9835)
!9881 = !DILocation(line: 2256, column: 14, scope: !9835)
!9882 = !DILocation(line: 2256, column: 20, scope: !9835)
!9883 = !DILocation(line: 2256, column: 28, scope: !9835)
!9884 = !DILocation(line: 2256, column: 38, scope: !9835)
!9885 = !DILocation(line: 2256, column: 44, scope: !9835)
!9886 = !DILocation(line: 2256, column: 52, scope: !9835)
!9887 = !DILocation(line: 2256, column: 3, scope: !9835)
!9888 = !DILocation(line: 2257, column: 17, scope: !9835)
!9889 = !DILocation(line: 2257, column: 23, scope: !9835)
!9890 = !DILocation(line: 2257, column: 31, scope: !9835)
!9891 = !DILocation(line: 2257, column: 41, scope: !9835)
!9892 = !DILocation(line: 2257, column: 47, scope: !9835)
!9893 = !DILocation(line: 2257, column: 55, scope: !9835)
!9894 = !DILocation(line: 2257, column: 60, scope: !9835)
!9895 = !DILocation(line: 2257, column: 66, scope: !9835)
!9896 = !DILocation(line: 2257, column: 74, scope: !9835)
!9897 = !DILocation(line: 2257, column: 3, scope: !9835)
!9898 = !DILocation(line: 2258, column: 14, scope: !9835)
!9899 = !DILocation(line: 2258, column: 20, scope: !9835)
!9900 = !DILocation(line: 2258, column: 28, scope: !9835)
!9901 = !DILocation(line: 2258, column: 38, scope: !9835)
!9902 = !DILocation(line: 2258, column: 44, scope: !9835)
!9903 = !DILocation(line: 2258, column: 52, scope: !9835)
!9904 = !DILocation(line: 2258, column: 3, scope: !9835)
!9905 = !DILocation(line: 2259, column: 21, scope: !9835)
!9906 = !DILocation(line: 2259, column: 25, scope: !9835)
!9907 = !DILocation(line: 2259, column: 3, scope: !9835)
!9908 = !DILocation(line: 2260, column: 21, scope: !9835)
!9909 = !DILocation(line: 2260, column: 26, scope: !9835)
!9910 = !DILocation(line: 2260, column: 32, scope: !9835)
!9911 = !DILocation(line: 2260, column: 57, scope: !9835)
!9912 = !DILocation(line: 2260, column: 62, scope: !9835)
!9913 = !DILocation(line: 2260, column: 47, scope: !9835)
!9914 = !DILocation(line: 2260, column: 72, scope: !9835)
!9915 = !DILocation(line: 2260, column: 3, scope: !9835)
!9916 = !DILocation(line: 2262, column: 10, scope: !9835)
!9917 = !DILocation(line: 2262, column: 16, scope: !9835)
!9918 = !DILocation(line: 2262, column: 8, scope: !9835)
!9919 = !DILocation(line: 2263, column: 2, scope: !9835)
!9920 = !DILocation(line: 2246, column: 22, scope: !9831)
!9921 = !DILocation(line: 2246, column: 2, scope: !9831)
!9922 = distinct !{!9922, !9833, !9923}
!9923 = !DILocation(line: 2263, column: 2, scope: !9828)
!9924 = !DILocation(line: 2265, column: 4, scope: !9751)
!9925 = !DILocation(line: 2266, column: 10, scope: !9751)
!9926 = !DILocation(line: 2266, column: 2, scope: !9751)
!9927 = !DILocation(line: 2266, column: 8, scope: !9751)
!9928 = !DILocation(line: 2267, column: 10, scope: !9751)
!9929 = !DILocation(line: 2267, column: 2, scope: !9751)
!9930 = !DILocation(line: 2267, column: 8, scope: !9751)
!9931 = !DILocation(line: 2268, column: 10, scope: !9751)
!9932 = !DILocation(line: 2268, column: 2, scope: !9751)
!9933 = !DILocation(line: 2268, column: 8, scope: !9751)
!9934 = !DILocation(line: 2269, column: 6, scope: !9935)
!9935 = distinct !DILexicalBlock(scope: !9751, file: !1, line: 2269, column: 6)
!9936 = !DILocation(line: 2269, column: 11, scope: !9935)
!9937 = !DILocation(line: 2269, column: 6, scope: !9751)
!9938 = !DILocation(line: 2270, column: 7, scope: !9939)
!9939 = distinct !DILexicalBlock(scope: !9940, file: !1, line: 2270, column: 7)
!9940 = distinct !DILexicalBlock(scope: !9935, file: !1, line: 2269, column: 16)
!9941 = !DILocation(line: 2270, column: 9, scope: !9939)
!9942 = !DILocation(line: 2270, column: 7, scope: !9940)
!9943 = !DILocation(line: 2271, column: 14, scope: !9939)
!9944 = !DILocation(line: 2271, column: 4, scope: !9939)
!9945 = !DILocation(line: 2272, column: 12, scope: !9946)
!9946 = distinct !DILexicalBlock(scope: !9939, file: !1, line: 2272, column: 12)
!9947 = !DILocation(line: 2272, column: 14, scope: !9946)
!9948 = !DILocation(line: 2272, column: 12, scope: !9939)
!9949 = !DILocation(line: 2273, column: 14, scope: !9946)
!9950 = !DILocation(line: 2273, column: 4, scope: !9946)
!9951 = !DILocation(line: 2274, column: 2, scope: !9940)
!9952 = !DILocation(line: 2275, column: 23, scope: !9751)
!9953 = !DILocation(line: 2275, column: 13, scope: !9751)
!9954 = !DILocation(line: 2275, column: 38, scope: !9751)
!9955 = !DILocation(line: 2275, column: 42, scope: !9751)
!9956 = !DILocation(line: 2275, column: 2, scope: !9751)
!9957 = !DILocation(line: 2277, column: 25, scope: !9751)
!9958 = !DILocation(line: 2277, column: 2, scope: !9751)
!9959 = !DILocation(line: 2279, column: 8, scope: !9751)
!9960 = !DILocation(line: 2279, column: 6, scope: !9751)
!9961 = !DILocation(line: 2280, column: 2, scope: !9751)
!9962 = !DILocation(line: 2280, column: 9, scope: !9751)
!9963 = !DILocation(line: 2280, column: 14, scope: !9751)
!9964 = !DILocation(line: 2280, column: 20, scope: !9751)
!9965 = !DILocation(line: 2280, column: 18, scope: !9751)
!9966 = !DILocation(line: 2281, column: 22, scope: !9967)
!9967 = distinct !DILexicalBlock(scope: !9751, file: !1, line: 2280, column: 26)
!9968 = !DILocation(line: 2281, column: 26, scope: !9967)
!9969 = !DILocation(line: 2281, column: 9, scope: !9967)
!9970 = !DILocation(line: 2281, column: 7, scope: !9967)
!9971 = distinct !{!9971, !9961, !9972}
!9972 = !DILocation(line: 2282, column: 2, scope: !9751)
!9973 = !DILocation(line: 2283, column: 6, scope: !9974)
!9974 = distinct !DILexicalBlock(scope: !9751, file: !1, line: 2283, column: 6)
!9975 = !DILocation(line: 2283, column: 11, scope: !9974)
!9976 = !DILocation(line: 2283, column: 18, scope: !9974)
!9977 = !DILocation(line: 2283, column: 15, scope: !9974)
!9978 = !DILocation(line: 2283, column: 6, scope: !9751)
!9979 = !DILocation(line: 2284, column: 22, scope: !9974)
!9980 = !DILocation(line: 2284, column: 26, scope: !9974)
!9981 = !DILocation(line: 2284, column: 31, scope: !9974)
!9982 = !DILocation(line: 2284, column: 9, scope: !9974)
!9983 = !DILocation(line: 2284, column: 7, scope: !9974)
!9984 = !DILocation(line: 2284, column: 3, scope: !9974)
!9985 = !DILocation(line: 2287, column: 8, scope: !9751)
!9986 = !DILocation(line: 2287, column: 13, scope: !9751)
!9987 = !DILocation(line: 2287, column: 6, scope: !9751)
!9988 = !DILocation(line: 2288, column: 9, scope: !9989)
!9989 = distinct !DILexicalBlock(scope: !9751, file: !1, line: 2288, column: 2)
!9990 = !DILocation(line: 2288, column: 7, scope: !9989)
!9991 = !DILocation(line: 2288, column: 14, scope: !9992)
!9992 = distinct !DILexicalBlock(scope: !9989, file: !1, line: 2288, column: 2)
!9993 = !DILocation(line: 2288, column: 16, scope: !9992)
!9994 = !DILocation(line: 2288, column: 2, scope: !9989)
!9995 = !DILocation(line: 2289, column: 10, scope: !9996)
!9996 = distinct !DILexicalBlock(scope: !9997, file: !1, line: 2289, column: 3)
!9997 = distinct !DILexicalBlock(scope: !9992, file: !1, line: 2288, column: 26)
!9998 = !DILocation(line: 2289, column: 8, scope: !9996)
!9999 = !DILocation(line: 2289, column: 15, scope: !10000)
!10000 = distinct !DILexicalBlock(scope: !9996, file: !1, line: 2289, column: 3)
!10001 = !DILocation(line: 2289, column: 20, scope: !10000)
!10002 = !DILocation(line: 2289, column: 17, scope: !10000)
!10003 = !DILocation(line: 2289, column: 3, scope: !9996)
!10004 = !DILocation(line: 2290, column: 11, scope: !10005)
!10005 = distinct !DILexicalBlock(scope: !10006, file: !1, line: 2290, column: 4)
!10006 = distinct !DILexicalBlock(scope: !10000, file: !1, line: 2289, column: 30)
!10007 = !DILocation(line: 2290, column: 9, scope: !10005)
!10008 = !DILocation(line: 2290, column: 16, scope: !10009)
!10009 = distinct !DILexicalBlock(scope: !10005, file: !1, line: 2290, column: 4)
!10010 = !DILocation(line: 2290, column: 21, scope: !10009)
!10011 = !DILocation(line: 2290, column: 18, scope: !10009)
!10012 = !DILocation(line: 2290, column: 4, scope: !10005)
!10013 = !DILocation(line: 2291, column: 38, scope: !10014)
!10014 = distinct !DILexicalBlock(scope: !10009, file: !1, line: 2290, column: 32)
!10015 = !DILocation(line: 2291, column: 43, scope: !10014)
!10016 = !DILocation(line: 2291, column: 46, scope: !10014)
!10017 = !DILocation(line: 2291, column: 49, scope: !10014)
!10018 = !DILocation(line: 2291, column: 28, scope: !10014)
!10019 = !DILocation(line: 2291, column: 53, scope: !10014)
!10020 = !DILocation(line: 2291, column: 57, scope: !10014)
!10021 = !DILocation(line: 2291, column: 5, scope: !10014)
!10022 = !DILocation(line: 2292, column: 4, scope: !10014)
!10023 = !DILocation(line: 2290, column: 28, scope: !10009)
!10024 = !DILocation(line: 2290, column: 4, scope: !10009)
!10025 = distinct !{!10025, !10012, !10026}
!10026 = !DILocation(line: 2292, column: 4, scope: !10005)
!10027 = !DILocation(line: 2293, column: 3, scope: !10006)
!10028 = !DILocation(line: 2289, column: 26, scope: !10000)
!10029 = !DILocation(line: 2289, column: 3, scope: !10000)
!10030 = distinct !{!10030, !10003, !10031}
!10031 = !DILocation(line: 2293, column: 3, scope: !9996)
!10032 = !DILocation(line: 2294, column: 2, scope: !9997)
!10033 = !DILocation(line: 2288, column: 22, scope: !9992)
!10034 = !DILocation(line: 2288, column: 2, scope: !9992)
!10035 = distinct !{!10035, !9994, !10036}
!10036 = !DILocation(line: 2294, column: 2, scope: !9989)
!10037 = !DILocation(line: 2295, column: 9, scope: !9751)
!10038 = !DILocation(line: 2295, column: 2, scope: !9751)
!10039 = !DILocation(line: 2296, column: 1, scope: !9751)
!10040 = distinct !DISubprogram(name: "add_v3_v3", scope: !4142, file: !4142, line: 302, type: !6465, scopeLine: 303, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!10041 = !DILocalVariable(name: "r", arg: 1, scope: !10040, file: !4142, line: 302, type: !170)
!10042 = !DILocation(line: 302, column: 30, scope: !10040)
!10043 = !DILocalVariable(name: "a", arg: 2, scope: !10040, file: !4142, line: 302, type: !1865)
!10044 = !DILocation(line: 302, column: 48, scope: !10040)
!10045 = !DILocation(line: 304, column: 10, scope: !10040)
!10046 = !DILocation(line: 304, column: 2, scope: !10040)
!10047 = !DILocation(line: 304, column: 7, scope: !10040)
!10048 = !DILocation(line: 305, column: 10, scope: !10040)
!10049 = !DILocation(line: 305, column: 2, scope: !10040)
!10050 = !DILocation(line: 305, column: 7, scope: !10040)
!10051 = !DILocation(line: 306, column: 10, scope: !10040)
!10052 = !DILocation(line: 306, column: 2, scope: !10040)
!10053 = !DILocation(line: 306, column: 7, scope: !10040)
!10054 = !DILocation(line: 307, column: 1, scope: !10040)
!10055 = distinct !DISubprogram(name: "mul_v3_fl", scope: !4142, file: !4142, line: 392, type: !10056, scopeLine: 393, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!10056 = !DISubroutineType(types: !10057)
!10057 = !{null, !170, !76}
!10058 = !DILocalVariable(name: "r", arg: 1, scope: !10055, file: !4142, line: 392, type: !170)
!10059 = !DILocation(line: 392, column: 30, scope: !10055)
!10060 = !DILocalVariable(name: "f", arg: 2, scope: !10055, file: !4142, line: 392, type: !76)
!10061 = !DILocation(line: 392, column: 42, scope: !10055)
!10062 = !DILocation(line: 394, column: 10, scope: !10055)
!10063 = !DILocation(line: 394, column: 2, scope: !10055)
!10064 = !DILocation(line: 394, column: 7, scope: !10055)
!10065 = !DILocation(line: 395, column: 10, scope: !10055)
!10066 = !DILocation(line: 395, column: 2, scope: !10055)
!10067 = !DILocation(line: 395, column: 7, scope: !10055)
!10068 = !DILocation(line: 396, column: 10, scope: !10055)
!10069 = !DILocation(line: 396, column: 2, scope: !10055)
!10070 = !DILocation(line: 396, column: 7, scope: !10055)
!10071 = !DILocation(line: 397, column: 1, scope: !10055)
!10072 = distinct !DISubprogram(name: "make_cube_corner_straight", scope: !1, file: !1, line: 2188, type: !10073, scopeLine: 2189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!10073 = !DISubroutineType(types: !10074)
!10074 = !{!298, !601, !63}
!10075 = !DILocalVariable(name: "mem_arena", arg: 1, scope: !10072, file: !1, line: 2188, type: !601)
!10076 = !DILocation(line: 2188, column: 51, scope: !10072)
!10077 = !DILocalVariable(name: "nseg", arg: 2, scope: !10072, file: !1, line: 2188, type: !63)
!10078 = !DILocation(line: 2188, column: 66, scope: !10072)
!10079 = !DILocalVariable(name: "vm", scope: !10072, file: !1, line: 2190, type: !298)
!10080 = !DILocation(line: 2190, column: 9, scope: !10072)
!10081 = !DILocalVariable(name: "co", scope: !10072, file: !1, line: 2191, type: !75)
!10082 = !DILocation(line: 2191, column: 8, scope: !10072)
!10083 = !DILocalVariable(name: "i", scope: !10072, file: !1, line: 2192, type: !63)
!10084 = !DILocation(line: 2192, column: 6, scope: !10072)
!10085 = !DILocalVariable(name: "j", scope: !10072, file: !1, line: 2192, type: !63)
!10086 = !DILocation(line: 2192, column: 9, scope: !10072)
!10087 = !DILocalVariable(name: "k", scope: !10072, file: !1, line: 2192, type: !63)
!10088 = !DILocation(line: 2192, column: 12, scope: !10072)
!10089 = !DILocalVariable(name: "ns2", scope: !10072, file: !1, line: 2192, type: !63)
!10090 = !DILocation(line: 2192, column: 15, scope: !10072)
!10091 = !DILocation(line: 2194, column: 8, scope: !10072)
!10092 = !DILocation(line: 2194, column: 13, scope: !10072)
!10093 = !DILocation(line: 2194, column: 6, scope: !10072)
!10094 = !DILocation(line: 2195, column: 21, scope: !10072)
!10095 = !DILocation(line: 2195, column: 35, scope: !10072)
!10096 = !DILocation(line: 2195, column: 7, scope: !10072)
!10097 = !DILocation(line: 2195, column: 5, scope: !10072)
!10098 = !DILocation(line: 2196, column: 2, scope: !10072)
!10099 = !DILocation(line: 2196, column: 6, scope: !10072)
!10100 = !DILocation(line: 2196, column: 12, scope: !10072)
!10101 = !DILocation(line: 2197, column: 9, scope: !10102)
!10102 = distinct !DILexicalBlock(scope: !10072, file: !1, line: 2197, column: 2)
!10103 = !DILocation(line: 2197, column: 7, scope: !10102)
!10104 = !DILocation(line: 2197, column: 14, scope: !10105)
!10105 = distinct !DILexicalBlock(scope: !10102, file: !1, line: 2197, column: 2)
!10106 = !DILocation(line: 2197, column: 16, scope: !10105)
!10107 = !DILocation(line: 2197, column: 2, scope: !10102)
!10108 = !DILocation(line: 2198, column: 11, scope: !10109)
!10109 = distinct !DILexicalBlock(scope: !10105, file: !1, line: 2197, column: 26)
!10110 = !DILocation(line: 2198, column: 3, scope: !10109)
!10111 = !DILocation(line: 2199, column: 6, scope: !10109)
!10112 = !DILocation(line: 2199, column: 3, scope: !10109)
!10113 = !DILocation(line: 2199, column: 9, scope: !10109)
!10114 = !DILocation(line: 2200, column: 22, scope: !10109)
!10115 = !DILocation(line: 2200, column: 33, scope: !10109)
!10116 = !DILocation(line: 2200, column: 37, scope: !10109)
!10117 = !DILocation(line: 2200, column: 3, scope: !10109)
!10118 = !DILocation(line: 2201, column: 2, scope: !10109)
!10119 = !DILocation(line: 2197, column: 22, scope: !10105)
!10120 = !DILocation(line: 2197, column: 2, scope: !10105)
!10121 = distinct !{!10121, !10107, !10122}
!10122 = !DILocation(line: 2201, column: 2, scope: !10102)
!10123 = !DILocation(line: 2202, column: 9, scope: !10124)
!10124 = distinct !DILexicalBlock(scope: !10072, file: !1, line: 2202, column: 2)
!10125 = !DILocation(line: 2202, column: 7, scope: !10124)
!10126 = !DILocation(line: 2202, column: 14, scope: !10127)
!10127 = distinct !DILexicalBlock(scope: !10124, file: !1, line: 2202, column: 2)
!10128 = !DILocation(line: 2202, column: 16, scope: !10127)
!10129 = !DILocation(line: 2202, column: 2, scope: !10124)
!10130 = !DILocation(line: 2203, column: 10, scope: !10131)
!10131 = distinct !DILexicalBlock(scope: !10132, file: !1, line: 2203, column: 3)
!10132 = distinct !DILexicalBlock(scope: !10127, file: !1, line: 2202, column: 26)
!10133 = !DILocation(line: 2203, column: 8, scope: !10131)
!10134 = !DILocation(line: 2203, column: 15, scope: !10135)
!10135 = distinct !DILexicalBlock(scope: !10131, file: !1, line: 2203, column: 3)
!10136 = !DILocation(line: 2203, column: 20, scope: !10135)
!10137 = !DILocation(line: 2203, column: 17, scope: !10135)
!10138 = !DILocation(line: 2203, column: 3, scope: !10131)
!10139 = !DILocation(line: 2204, column: 11, scope: !10140)
!10140 = distinct !DILexicalBlock(scope: !10141, file: !1, line: 2204, column: 4)
!10141 = distinct !DILexicalBlock(scope: !10135, file: !1, line: 2203, column: 30)
!10142 = !DILocation(line: 2204, column: 9, scope: !10140)
!10143 = !DILocation(line: 2204, column: 16, scope: !10144)
!10144 = distinct !DILexicalBlock(scope: !10140, file: !1, line: 2204, column: 4)
!10145 = !DILocation(line: 2204, column: 21, scope: !10144)
!10146 = !DILocation(line: 2204, column: 18, scope: !10144)
!10147 = !DILocation(line: 2204, column: 4, scope: !10140)
!10148 = !DILocation(line: 2205, column: 19, scope: !10149)
!10149 = distinct !DILexicalBlock(scope: !10150, file: !1, line: 2205, column: 9)
!10150 = distinct !DILexicalBlock(scope: !10144, file: !1, line: 2204, column: 31)
!10151 = !DILocation(line: 2205, column: 23, scope: !10149)
!10152 = !DILocation(line: 2205, column: 26, scope: !10149)
!10153 = !DILocation(line: 2205, column: 29, scope: !10149)
!10154 = !DILocation(line: 2205, column: 10, scope: !10149)
!10155 = !DILocation(line: 2205, column: 9, scope: !10150)
!10156 = !DILocation(line: 2206, column: 6, scope: !10149)
!10157 = !DILocation(line: 2207, column: 8, scope: !10150)
!10158 = !DILocation(line: 2207, column: 5, scope: !10150)
!10159 = !DILocation(line: 2207, column: 11, scope: !10150)
!10160 = !DILocation(line: 2208, column: 30, scope: !10150)
!10161 = !DILocation(line: 2208, column: 23, scope: !10150)
!10162 = !DILocation(line: 2208, column: 32, scope: !10150)
!10163 = !DILocation(line: 2208, column: 48, scope: !10150)
!10164 = !DILocation(line: 2208, column: 41, scope: !10150)
!10165 = !DILocation(line: 2208, column: 39, scope: !10150)
!10166 = !DILocation(line: 2208, column: 9, scope: !10150)
!10167 = !DILocation(line: 2208, column: 11, scope: !10150)
!10168 = !DILocation(line: 2208, column: 16, scope: !10150)
!10169 = !DILocation(line: 2208, column: 5, scope: !10150)
!10170 = !DILocation(line: 2208, column: 21, scope: !10150)
!10171 = !DILocation(line: 2209, column: 30, scope: !10150)
!10172 = !DILocation(line: 2209, column: 23, scope: !10150)
!10173 = !DILocation(line: 2209, column: 32, scope: !10150)
!10174 = !DILocation(line: 2209, column: 48, scope: !10150)
!10175 = !DILocation(line: 2209, column: 41, scope: !10150)
!10176 = !DILocation(line: 2209, column: 39, scope: !10150)
!10177 = !DILocation(line: 2209, column: 9, scope: !10150)
!10178 = !DILocation(line: 2209, column: 11, scope: !10150)
!10179 = !DILocation(line: 2209, column: 16, scope: !10150)
!10180 = !DILocation(line: 2209, column: 5, scope: !10150)
!10181 = !DILocation(line: 2209, column: 21, scope: !10150)
!10182 = !DILocation(line: 2210, column: 26, scope: !10150)
!10183 = !DILocation(line: 2210, column: 30, scope: !10150)
!10184 = !DILocation(line: 2210, column: 33, scope: !10150)
!10185 = !DILocation(line: 2210, column: 36, scope: !10150)
!10186 = !DILocation(line: 2210, column: 16, scope: !10150)
!10187 = !DILocation(line: 2210, column: 40, scope: !10150)
!10188 = !DILocation(line: 2210, column: 44, scope: !10150)
!10189 = !DILocation(line: 2210, column: 5, scope: !10150)
!10190 = !DILocation(line: 2211, column: 4, scope: !10150)
!10191 = !DILocation(line: 2204, column: 27, scope: !10144)
!10192 = !DILocation(line: 2204, column: 4, scope: !10144)
!10193 = distinct !{!10193, !10147, !10194}
!10194 = !DILocation(line: 2211, column: 4, scope: !10140)
!10195 = !DILocation(line: 2212, column: 3, scope: !10141)
!10196 = !DILocation(line: 2203, column: 26, scope: !10135)
!10197 = !DILocation(line: 2203, column: 3, scope: !10135)
!10198 = distinct !{!10198, !10138, !10199}
!10199 = !DILocation(line: 2212, column: 3, scope: !10131)
!10200 = !DILocation(line: 2213, column: 2, scope: !10132)
!10201 = !DILocation(line: 2202, column: 22, scope: !10127)
!10202 = !DILocation(line: 2202, column: 2, scope: !10127)
!10203 = distinct !{!10203, !10129, !10204}
!10204 = !DILocation(line: 2213, column: 2, scope: !10124)
!10205 = !DILocation(line: 2214, column: 25, scope: !10072)
!10206 = !DILocation(line: 2214, column: 2, scope: !10072)
!10207 = !DILocation(line: 2215, column: 9, scope: !10072)
!10208 = !DILocation(line: 2215, column: 2, scope: !10072)
!10209 = distinct !DISubprogram(name: "new_adj_vmesh", scope: !1, file: !1, line: 1746, type: !10210, scopeLine: 1747, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!10210 = !DISubroutineType(types: !10211)
!10211 = !{!298, !601, !63, !63, !121}
!10212 = !DILocalVariable(name: "mem_arena", arg: 1, scope: !10209, file: !1, line: 1746, type: !601)
!10213 = !DILocation(line: 1746, column: 39, scope: !10209)
!10214 = !DILocalVariable(name: "count", arg: 2, scope: !10209, file: !1, line: 1746, type: !63)
!10215 = !DILocation(line: 1746, column: 54, scope: !10209)
!10216 = !DILocalVariable(name: "seg", arg: 3, scope: !10209, file: !1, line: 1746, type: !63)
!10217 = !DILocation(line: 1746, column: 65, scope: !10209)
!10218 = !DILocalVariable(name: "bounds", arg: 4, scope: !10209, file: !1, line: 1746, type: !121)
!10219 = !DILocation(line: 1746, column: 81, scope: !10209)
!10220 = !DILocalVariable(name: "vm", scope: !10209, file: !1, line: 1748, type: !298)
!10221 = !DILocation(line: 1748, column: 9, scope: !10209)
!10222 = !DILocation(line: 1750, column: 35, scope: !10209)
!10223 = !DILocation(line: 1750, column: 16, scope: !10209)
!10224 = !DILocation(line: 1750, column: 7, scope: !10209)
!10225 = !DILocation(line: 1750, column: 5, scope: !10209)
!10226 = !DILocation(line: 1751, column: 14, scope: !10209)
!10227 = !DILocation(line: 1751, column: 2, scope: !10209)
!10228 = !DILocation(line: 1751, column: 6, scope: !10209)
!10229 = !DILocation(line: 1751, column: 12, scope: !10209)
!10230 = !DILocation(line: 1752, column: 12, scope: !10209)
!10231 = !DILocation(line: 1752, column: 2, scope: !10209)
!10232 = !DILocation(line: 1752, column: 6, scope: !10209)
!10233 = !DILocation(line: 1752, column: 10, scope: !10209)
!10234 = !DILocation(line: 1753, column: 19, scope: !10209)
!10235 = !DILocation(line: 1753, column: 2, scope: !10209)
!10236 = !DILocation(line: 1753, column: 6, scope: !10209)
!10237 = !DILocation(line: 1753, column: 17, scope: !10209)
!10238 = !DILocation(line: 1754, column: 43, scope: !10209)
!10239 = !DILocation(line: 1754, column: 54, scope: !10209)
!10240 = !DILocation(line: 1754, column: 67, scope: !10209)
!10241 = !DILocation(line: 1754, column: 71, scope: !10209)
!10242 = !DILocation(line: 1754, column: 65, scope: !10209)
!10243 = !DILocation(line: 1754, column: 60, scope: !10209)
!10244 = !DILocation(line: 1754, column: 83, scope: !10209)
!10245 = !DILocation(line: 1754, column: 81, scope: !10209)
!10246 = !DILocation(line: 1754, column: 76, scope: !10209)
!10247 = !DILocation(line: 1754, column: 88, scope: !10209)
!10248 = !DILocation(line: 1754, column: 24, scope: !10209)
!10249 = !DILocation(line: 1754, column: 13, scope: !10209)
!10250 = !DILocation(line: 1754, column: 2, scope: !10209)
!10251 = !DILocation(line: 1754, column: 6, scope: !10209)
!10252 = !DILocation(line: 1754, column: 11, scope: !10209)
!10253 = !DILocation(line: 1755, column: 2, scope: !10209)
!10254 = !DILocation(line: 1755, column: 6, scope: !10209)
!10255 = !DILocation(line: 1755, column: 16, scope: !10209)
!10256 = !DILocation(line: 1756, column: 9, scope: !10209)
!10257 = !DILocation(line: 1756, column: 2, scope: !10209)
!10258 = distinct !DISubprogram(name: "cubic_subdiv", scope: !1, file: !1, line: 2018, type: !10259, scopeLine: 2019, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!10259 = !DISubroutineType(types: !10260)
!10260 = !{!298, !801, !298}
!10261 = !DILocalVariable(name: "bp", arg: 1, scope: !10258, file: !1, line: 2018, type: !801)
!10262 = !DILocation(line: 2018, column: 41, scope: !10258)
!10263 = !DILocalVariable(name: "vm0", arg: 2, scope: !10258, file: !1, line: 2018, type: !298)
!10264 = !DILocation(line: 2018, column: 52, scope: !10258)
!10265 = !DILocalVariable(name: "n", scope: !10258, file: !1, line: 2020, type: !63)
!10266 = !DILocation(line: 2020, column: 6, scope: !10258)
!10267 = !DILocalVariable(name: "ns0", scope: !10258, file: !1, line: 2020, type: !63)
!10268 = !DILocation(line: 2020, column: 9, scope: !10258)
!10269 = !DILocalVariable(name: "ns20", scope: !10258, file: !1, line: 2020, type: !63)
!10270 = !DILocation(line: 2020, column: 14, scope: !10258)
!10271 = !DILocalVariable(name: "ns1", scope: !10258, file: !1, line: 2020, type: !63)
!10272 = !DILocation(line: 2020, column: 20, scope: !10258)
!10273 = !DILocalVariable(name: "i", scope: !10258, file: !1, line: 2021, type: !63)
!10274 = !DILocation(line: 2021, column: 6, scope: !10258)
!10275 = !DILocalVariable(name: "j", scope: !10258, file: !1, line: 2021, type: !63)
!10276 = !DILocation(line: 2021, column: 9, scope: !10258)
!10277 = !DILocalVariable(name: "k", scope: !10258, file: !1, line: 2021, type: !63)
!10278 = !DILocation(line: 2021, column: 12, scope: !10258)
!10279 = !DILocalVariable(name: "inext", scope: !10258, file: !1, line: 2021, type: !63)
!10280 = !DILocation(line: 2021, column: 15, scope: !10258)
!10281 = !DILocalVariable(name: "co", scope: !10258, file: !1, line: 2022, type: !75)
!10282 = !DILocation(line: 2022, column: 8, scope: !10258)
!10283 = !DILocalVariable(name: "co1", scope: !10258, file: !1, line: 2022, type: !75)
!10284 = !DILocation(line: 2022, column: 15, scope: !10258)
!10285 = !DILocalVariable(name: "co2", scope: !10258, file: !1, line: 2022, type: !75)
!10286 = !DILocation(line: 2022, column: 23, scope: !10258)
!10287 = !DILocalVariable(name: "acc", scope: !10258, file: !1, line: 2022, type: !75)
!10288 = !DILocation(line: 2022, column: 31, scope: !10258)
!10289 = !DILocalVariable(name: "beta", scope: !10258, file: !1, line: 2023, type: !76)
!10290 = !DILocation(line: 2023, column: 8, scope: !10258)
!10291 = !DILocalVariable(name: "gamma", scope: !10258, file: !1, line: 2023, type: !76)
!10292 = !DILocation(line: 2023, column: 14, scope: !10258)
!10293 = !DILocalVariable(name: "vm1", scope: !10258, file: !1, line: 2024, type: !298)
!10294 = !DILocation(line: 2024, column: 9, scope: !10258)
!10295 = !DILocalVariable(name: "bndv", scope: !10258, file: !1, line: 2025, type: !121)
!10296 = !DILocation(line: 2025, column: 13, scope: !10258)
!10297 = !DILocation(line: 2027, column: 6, scope: !10258)
!10298 = !DILocation(line: 2027, column: 11, scope: !10258)
!10299 = !DILocation(line: 2027, column: 4, scope: !10258)
!10300 = !DILocation(line: 2028, column: 8, scope: !10258)
!10301 = !DILocation(line: 2028, column: 13, scope: !10258)
!10302 = !DILocation(line: 2028, column: 6, scope: !10258)
!10303 = !DILocation(line: 2029, column: 9, scope: !10258)
!10304 = !DILocation(line: 2029, column: 13, scope: !10258)
!10305 = !DILocation(line: 2029, column: 7, scope: !10258)
!10306 = !DILocation(line: 2031, column: 12, scope: !10258)
!10307 = !DILocation(line: 2031, column: 10, scope: !10258)
!10308 = !DILocation(line: 2031, column: 6, scope: !10258)
!10309 = !DILocation(line: 2032, column: 22, scope: !10258)
!10310 = !DILocation(line: 2032, column: 26, scope: !10258)
!10311 = !DILocation(line: 2032, column: 37, scope: !10258)
!10312 = !DILocation(line: 2032, column: 40, scope: !10258)
!10313 = !DILocation(line: 2032, column: 45, scope: !10258)
!10314 = !DILocation(line: 2032, column: 50, scope: !10258)
!10315 = !DILocation(line: 2032, column: 8, scope: !10258)
!10316 = !DILocation(line: 2032, column: 6, scope: !10258)
!10317 = !DILocation(line: 2035, column: 9, scope: !10318)
!10318 = distinct !DILexicalBlock(scope: !10258, file: !1, line: 2035, column: 2)
!10319 = !DILocation(line: 2035, column: 7, scope: !10318)
!10320 = !DILocation(line: 2035, column: 14, scope: !10321)
!10321 = distinct !DILexicalBlock(scope: !10318, file: !1, line: 2035, column: 2)
!10322 = !DILocation(line: 2035, column: 18, scope: !10321)
!10323 = !DILocation(line: 2035, column: 16, scope: !10321)
!10324 = !DILocation(line: 2035, column: 2, scope: !10318)
!10325 = !DILocation(line: 2036, column: 24, scope: !10326)
!10326 = distinct !DILexicalBlock(scope: !10321, file: !1, line: 2035, column: 26)
!10327 = !DILocation(line: 2036, column: 29, scope: !10326)
!10328 = !DILocation(line: 2036, column: 14, scope: !10326)
!10329 = !DILocation(line: 2036, column: 39, scope: !10326)
!10330 = !DILocation(line: 2036, column: 53, scope: !10326)
!10331 = !DILocation(line: 2036, column: 58, scope: !10326)
!10332 = !DILocation(line: 2036, column: 43, scope: !10326)
!10333 = !DILocation(line: 2036, column: 68, scope: !10326)
!10334 = !DILocation(line: 2036, column: 3, scope: !10326)
!10335 = !DILocation(line: 2037, column: 10, scope: !10336)
!10336 = distinct !DILexicalBlock(scope: !10326, file: !1, line: 2037, column: 3)
!10337 = !DILocation(line: 2037, column: 8, scope: !10336)
!10338 = !DILocation(line: 2037, column: 15, scope: !10339)
!10339 = distinct !DILexicalBlock(scope: !10336, file: !1, line: 2037, column: 3)
!10340 = !DILocation(line: 2037, column: 19, scope: !10339)
!10341 = !DILocation(line: 2037, column: 17, scope: !10339)
!10342 = !DILocation(line: 2037, column: 3, scope: !10336)
!10343 = !DILocation(line: 2039, column: 15, scope: !10344)
!10344 = distinct !DILexicalBlock(scope: !10339, file: !1, line: 2037, column: 29)
!10345 = !DILocation(line: 2039, column: 29, scope: !10344)
!10346 = !DILocation(line: 2039, column: 34, scope: !10344)
!10347 = !DILocation(line: 2039, column: 40, scope: !10344)
!10348 = !DILocation(line: 2039, column: 19, scope: !10344)
!10349 = !DILocation(line: 2039, column: 44, scope: !10344)
!10350 = !DILocation(line: 2039, column: 4, scope: !10344)
!10351 = !DILocation(line: 2040, column: 15, scope: !10344)
!10352 = !DILocation(line: 2040, column: 30, scope: !10344)
!10353 = !DILocation(line: 2040, column: 35, scope: !10344)
!10354 = !DILocation(line: 2040, column: 41, scope: !10344)
!10355 = !DILocation(line: 2040, column: 43, scope: !10344)
!10356 = !DILocation(line: 2040, column: 20, scope: !10344)
!10357 = !DILocation(line: 2040, column: 49, scope: !10344)
!10358 = !DILocation(line: 2040, column: 4, scope: !10344)
!10359 = !DILocation(line: 2041, column: 15, scope: !10344)
!10360 = !DILocation(line: 2041, column: 30, scope: !10344)
!10361 = !DILocation(line: 2041, column: 35, scope: !10344)
!10362 = !DILocation(line: 2041, column: 41, scope: !10344)
!10363 = !DILocation(line: 2041, column: 43, scope: !10344)
!10364 = !DILocation(line: 2041, column: 20, scope: !10344)
!10365 = !DILocation(line: 2041, column: 49, scope: !10344)
!10366 = !DILocation(line: 2041, column: 4, scope: !10344)
!10367 = !DILocation(line: 2043, column: 16, scope: !10344)
!10368 = !DILocation(line: 2043, column: 21, scope: !10344)
!10369 = !DILocation(line: 2043, column: 26, scope: !10344)
!10370 = !DILocation(line: 2043, column: 4, scope: !10344)
!10371 = !DILocation(line: 2044, column: 17, scope: !10344)
!10372 = !DILocation(line: 2044, column: 22, scope: !10344)
!10373 = !DILocation(line: 2044, column: 4, scope: !10344)
!10374 = !DILocation(line: 2045, column: 17, scope: !10344)
!10375 = !DILocation(line: 2045, column: 21, scope: !10344)
!10376 = !DILocation(line: 2045, column: 4, scope: !10344)
!10377 = !DILocation(line: 2047, column: 31, scope: !10344)
!10378 = !DILocation(line: 2047, column: 36, scope: !10344)
!10379 = !DILocation(line: 2047, column: 46, scope: !10344)
!10380 = !DILocation(line: 2047, column: 44, scope: !10344)
!10381 = !DILocation(line: 2047, column: 15, scope: !10344)
!10382 = !DILocation(line: 2047, column: 50, scope: !10344)
!10383 = !DILocation(line: 2047, column: 54, scope: !10344)
!10384 = !DILocation(line: 2047, column: 4, scope: !10344)
!10385 = !DILocation(line: 2048, column: 3, scope: !10344)
!10386 = !DILocation(line: 2037, column: 25, scope: !10339)
!10387 = !DILocation(line: 2037, column: 3, scope: !10339)
!10388 = distinct !{!10388, !10342, !10389}
!10389 = !DILocation(line: 2048, column: 3, scope: !10336)
!10390 = !DILocation(line: 2049, column: 2, scope: !10326)
!10391 = !DILocation(line: 2035, column: 22, scope: !10321)
!10392 = !DILocation(line: 2035, column: 2, scope: !10321)
!10393 = distinct !{!10393, !10324, !10394}
!10394 = !DILocation(line: 2049, column: 2, scope: !10318)
!10395 = !DILocation(line: 2051, column: 9, scope: !10258)
!10396 = !DILocation(line: 2051, column: 14, scope: !10258)
!10397 = !DILocation(line: 2051, column: 7, scope: !10258)
!10398 = !DILocation(line: 2052, column: 9, scope: !10399)
!10399 = distinct !DILexicalBlock(scope: !10258, file: !1, line: 2052, column: 2)
!10400 = !DILocation(line: 2052, column: 7, scope: !10399)
!10401 = !DILocation(line: 2052, column: 14, scope: !10402)
!10402 = distinct !DILexicalBlock(scope: !10399, file: !1, line: 2052, column: 2)
!10403 = !DILocation(line: 2052, column: 18, scope: !10402)
!10404 = !DILocation(line: 2052, column: 16, scope: !10402)
!10405 = !DILocation(line: 2052, column: 2, scope: !10399)
!10406 = !DILocation(line: 2053, column: 10, scope: !10407)
!10407 = distinct !DILexicalBlock(scope: !10408, file: !1, line: 2053, column: 3)
!10408 = distinct !DILexicalBlock(scope: !10402, file: !1, line: 2052, column: 26)
!10409 = !DILocation(line: 2053, column: 8, scope: !10407)
!10410 = !DILocation(line: 2053, column: 15, scope: !10411)
!10411 = distinct !DILexicalBlock(scope: !10407, file: !1, line: 2053, column: 3)
!10412 = !DILocation(line: 2053, column: 19, scope: !10411)
!10413 = !DILocation(line: 2053, column: 17, scope: !10411)
!10414 = !DILocation(line: 2053, column: 3, scope: !10407)
!10415 = !DILocation(line: 2054, column: 22, scope: !10416)
!10416 = distinct !DILexicalBlock(scope: !10411, file: !1, line: 2053, column: 32)
!10417 = !DILocation(line: 2054, column: 27, scope: !10416)
!10418 = !DILocation(line: 2054, column: 33, scope: !10416)
!10419 = !DILocation(line: 2054, column: 42, scope: !10416)
!10420 = !DILocation(line: 2054, column: 45, scope: !10416)
!10421 = !DILocation(line: 2054, column: 50, scope: !10416)
!10422 = !DILocation(line: 2054, column: 4, scope: !10416)
!10423 = !DILocation(line: 2055, column: 15, scope: !10416)
!10424 = !DILocation(line: 2055, column: 36, scope: !10416)
!10425 = !DILocation(line: 2055, column: 41, scope: !10416)
!10426 = !DILocation(line: 2055, column: 47, scope: !10416)
!10427 = !DILocation(line: 2055, column: 49, scope: !10416)
!10428 = !DILocation(line: 2055, column: 20, scope: !10416)
!10429 = !DILocation(line: 2055, column: 55, scope: !10416)
!10430 = !DILocation(line: 2055, column: 4, scope: !10416)
!10431 = !DILocation(line: 2056, column: 15, scope: !10416)
!10432 = !DILocation(line: 2056, column: 36, scope: !10416)
!10433 = !DILocation(line: 2056, column: 41, scope: !10416)
!10434 = !DILocation(line: 2056, column: 47, scope: !10416)
!10435 = !DILocation(line: 2056, column: 49, scope: !10416)
!10436 = !DILocation(line: 2056, column: 20, scope: !10416)
!10437 = !DILocation(line: 2056, column: 55, scope: !10416)
!10438 = !DILocation(line: 2056, column: 4, scope: !10416)
!10439 = !DILocation(line: 2058, column: 16, scope: !10416)
!10440 = !DILocation(line: 2058, column: 21, scope: !10416)
!10441 = !DILocation(line: 2058, column: 26, scope: !10416)
!10442 = !DILocation(line: 2058, column: 4, scope: !10416)
!10443 = !DILocation(line: 2059, column: 17, scope: !10416)
!10444 = !DILocation(line: 2059, column: 22, scope: !10416)
!10445 = !DILocation(line: 2059, column: 4, scope: !10416)
!10446 = !DILocation(line: 2060, column: 17, scope: !10416)
!10447 = !DILocation(line: 2060, column: 21, scope: !10416)
!10448 = !DILocation(line: 2060, column: 4, scope: !10416)
!10449 = !DILocation(line: 2062, column: 31, scope: !10416)
!10450 = !DILocation(line: 2062, column: 36, scope: !10416)
!10451 = !DILocation(line: 2062, column: 42, scope: !10416)
!10452 = !DILocation(line: 2062, column: 15, scope: !10416)
!10453 = !DILocation(line: 2062, column: 46, scope: !10416)
!10454 = !DILocation(line: 2062, column: 50, scope: !10416)
!10455 = !DILocation(line: 2062, column: 4, scope: !10416)
!10456 = !DILocation(line: 2063, column: 3, scope: !10416)
!10457 = !DILocation(line: 2053, column: 26, scope: !10411)
!10458 = !DILocation(line: 2053, column: 3, scope: !10411)
!10459 = distinct !{!10459, !10414, !10460}
!10460 = !DILocation(line: 2063, column: 3, scope: !10407)
!10461 = !DILocation(line: 2064, column: 10, scope: !10408)
!10462 = !DILocation(line: 2064, column: 16, scope: !10408)
!10463 = !DILocation(line: 2064, column: 8, scope: !10408)
!10464 = !DILocation(line: 2065, column: 2, scope: !10408)
!10465 = !DILocation(line: 2052, column: 22, scope: !10402)
!10466 = !DILocation(line: 2052, column: 2, scope: !10402)
!10467 = distinct !{!10467, !10405, !10468}
!10468 = !DILocation(line: 2065, column: 2, scope: !10399)
!10469 = !DILocation(line: 2066, column: 25, scope: !10258)
!10470 = !DILocation(line: 2066, column: 2, scope: !10258)
!10471 = !DILocation(line: 2069, column: 9, scope: !10472)
!10472 = distinct !DILexicalBlock(scope: !10258, file: !1, line: 2069, column: 2)
!10473 = !DILocation(line: 2069, column: 7, scope: !10472)
!10474 = !DILocation(line: 2069, column: 14, scope: !10475)
!10475 = distinct !DILexicalBlock(scope: !10472, file: !1, line: 2069, column: 2)
!10476 = !DILocation(line: 2069, column: 18, scope: !10475)
!10477 = !DILocation(line: 2069, column: 16, scope: !10475)
!10478 = !DILocation(line: 2069, column: 2, scope: !10472)
!10479 = !DILocation(line: 2070, column: 10, scope: !10480)
!10480 = distinct !DILexicalBlock(scope: !10481, file: !1, line: 2070, column: 3)
!10481 = distinct !DILexicalBlock(scope: !10475, file: !1, line: 2069, column: 26)
!10482 = !DILocation(line: 2070, column: 8, scope: !10480)
!10483 = !DILocation(line: 2070, column: 15, scope: !10484)
!10484 = distinct !DILexicalBlock(scope: !10480, file: !1, line: 2070, column: 3)
!10485 = !DILocation(line: 2070, column: 19, scope: !10484)
!10486 = !DILocation(line: 2070, column: 17, scope: !10484)
!10487 = !DILocation(line: 2070, column: 3, scope: !10480)
!10488 = !DILocation(line: 2071, column: 25, scope: !10489)
!10489 = distinct !DILexicalBlock(scope: !10484, file: !1, line: 2070, column: 29)
!10490 = !DILocation(line: 2071, column: 30, scope: !10489)
!10491 = !DILocation(line: 2071, column: 36, scope: !10489)
!10492 = !DILocation(line: 2071, column: 15, scope: !10489)
!10493 = !DILocation(line: 2071, column: 40, scope: !10489)
!10494 = !DILocation(line: 2072, column: 25, scope: !10489)
!10495 = !DILocation(line: 2072, column: 30, scope: !10489)
!10496 = !DILocation(line: 2072, column: 40, scope: !10489)
!10497 = !DILocation(line: 2072, column: 38, scope: !10489)
!10498 = !DILocation(line: 2072, column: 15, scope: !10489)
!10499 = !DILocation(line: 2072, column: 44, scope: !10489)
!10500 = !DILocation(line: 2071, column: 4, scope: !10489)
!10501 = !DILocation(line: 2073, column: 3, scope: !10489)
!10502 = !DILocation(line: 2070, column: 25, scope: !10484)
!10503 = !DILocation(line: 2070, column: 3, scope: !10484)
!10504 = distinct !{!10504, !10487, !10505}
!10505 = !DILocation(line: 2073, column: 3, scope: !10480)
!10506 = !DILocation(line: 2074, column: 2, scope: !10481)
!10507 = !DILocation(line: 2069, column: 22, scope: !10475)
!10508 = !DILocation(line: 2069, column: 2, scope: !10475)
!10509 = distinct !{!10509, !10478, !10510}
!10510 = !DILocation(line: 2074, column: 2, scope: !10472)
!10511 = !DILocation(line: 2076, column: 25, scope: !10258)
!10512 = !DILocation(line: 2076, column: 2, scope: !10258)
!10513 = !DILocation(line: 2082, column: 9, scope: !10514)
!10514 = distinct !DILexicalBlock(scope: !10258, file: !1, line: 2082, column: 2)
!10515 = !DILocation(line: 2082, column: 7, scope: !10514)
!10516 = !DILocation(line: 2082, column: 14, scope: !10517)
!10517 = distinct !DILexicalBlock(scope: !10514, file: !1, line: 2082, column: 2)
!10518 = !DILocation(line: 2082, column: 18, scope: !10517)
!10519 = !DILocation(line: 2082, column: 16, scope: !10517)
!10520 = !DILocation(line: 2082, column: 2, scope: !10514)
!10521 = !DILocation(line: 2083, column: 10, scope: !10522)
!10522 = distinct !DILexicalBlock(scope: !10523, file: !1, line: 2083, column: 3)
!10523 = distinct !DILexicalBlock(scope: !10517, file: !1, line: 2082, column: 26)
!10524 = !DILocation(line: 2083, column: 8, scope: !10522)
!10525 = !DILocation(line: 2083, column: 15, scope: !10526)
!10526 = distinct !DILexicalBlock(scope: !10522, file: !1, line: 2083, column: 3)
!10527 = !DILocation(line: 2083, column: 19, scope: !10526)
!10528 = !DILocation(line: 2083, column: 17, scope: !10526)
!10529 = !DILocation(line: 2083, column: 3, scope: !10522)
!10530 = !DILocation(line: 2084, column: 11, scope: !10531)
!10531 = distinct !DILexicalBlock(scope: !10532, file: !1, line: 2084, column: 4)
!10532 = distinct !DILexicalBlock(scope: !10526, file: !1, line: 2083, column: 30)
!10533 = !DILocation(line: 2084, column: 9, scope: !10531)
!10534 = !DILocation(line: 2084, column: 16, scope: !10535)
!10535 = distinct !DILexicalBlock(scope: !10531, file: !1, line: 2084, column: 4)
!10536 = !DILocation(line: 2084, column: 20, scope: !10535)
!10537 = !DILocation(line: 2084, column: 18, scope: !10535)
!10538 = !DILocation(line: 2084, column: 4, scope: !10531)
!10539 = !DILocation(line: 2086, column: 10, scope: !10540)
!10540 = distinct !DILexicalBlock(scope: !10535, file: !1, line: 2084, column: 31)
!10541 = !DILocation(line: 2087, column: 20, scope: !10540)
!10542 = !DILocation(line: 2087, column: 25, scope: !10540)
!10543 = !DILocation(line: 2087, column: 28, scope: !10540)
!10544 = !DILocation(line: 2087, column: 31, scope: !10540)
!10545 = !DILocation(line: 2087, column: 10, scope: !10540)
!10546 = !DILocation(line: 2088, column: 20, scope: !10540)
!10547 = !DILocation(line: 2088, column: 25, scope: !10540)
!10548 = !DILocation(line: 2088, column: 28, scope: !10540)
!10549 = !DILocation(line: 2088, column: 31, scope: !10540)
!10550 = !DILocation(line: 2088, column: 33, scope: !10540)
!10551 = !DILocation(line: 2088, column: 10, scope: !10540)
!10552 = !DILocation(line: 2089, column: 20, scope: !10540)
!10553 = !DILocation(line: 2089, column: 25, scope: !10540)
!10554 = !DILocation(line: 2089, column: 28, scope: !10540)
!10555 = !DILocation(line: 2089, column: 30, scope: !10540)
!10556 = !DILocation(line: 2089, column: 35, scope: !10540)
!10557 = !DILocation(line: 2089, column: 10, scope: !10540)
!10558 = !DILocation(line: 2090, column: 20, scope: !10540)
!10559 = !DILocation(line: 2090, column: 25, scope: !10540)
!10560 = !DILocation(line: 2090, column: 28, scope: !10540)
!10561 = !DILocation(line: 2090, column: 30, scope: !10540)
!10562 = !DILocation(line: 2090, column: 35, scope: !10540)
!10563 = !DILocation(line: 2090, column: 37, scope: !10540)
!10564 = !DILocation(line: 2090, column: 10, scope: !10540)
!10565 = !DILocation(line: 2086, column: 5, scope: !10540)
!10566 = !DILocation(line: 2091, column: 26, scope: !10540)
!10567 = !DILocation(line: 2091, column: 31, scope: !10540)
!10568 = !DILocation(line: 2091, column: 38, scope: !10540)
!10569 = !DILocation(line: 2091, column: 36, scope: !10540)
!10570 = !DILocation(line: 2091, column: 40, scope: !10540)
!10571 = !DILocation(line: 2091, column: 49, scope: !10540)
!10572 = !DILocation(line: 2091, column: 47, scope: !10540)
!10573 = !DILocation(line: 2091, column: 51, scope: !10540)
!10574 = !DILocation(line: 2091, column: 16, scope: !10540)
!10575 = !DILocation(line: 2091, column: 57, scope: !10540)
!10576 = !DILocation(line: 2091, column: 61, scope: !10540)
!10577 = !DILocation(line: 2091, column: 5, scope: !10540)
!10578 = !DILocation(line: 2092, column: 4, scope: !10540)
!10579 = !DILocation(line: 2084, column: 27, scope: !10535)
!10580 = !DILocation(line: 2084, column: 4, scope: !10535)
!10581 = distinct !{!10581, !10538, !10582}
!10582 = !DILocation(line: 2092, column: 4, scope: !10531)
!10583 = !DILocation(line: 2093, column: 3, scope: !10532)
!10584 = !DILocation(line: 2083, column: 26, scope: !10526)
!10585 = !DILocation(line: 2083, column: 3, scope: !10526)
!10586 = distinct !{!10586, !10529, !10587}
!10587 = !DILocation(line: 2093, column: 3, scope: !10522)
!10588 = !DILocation(line: 2094, column: 2, scope: !10523)
!10589 = !DILocation(line: 2082, column: 22, scope: !10517)
!10590 = !DILocation(line: 2082, column: 2, scope: !10517)
!10591 = distinct !{!10591, !10520, !10592}
!10592 = !DILocation(line: 2094, column: 2, scope: !10514)
!10593 = !DILocation(line: 2097, column: 9, scope: !10594)
!10594 = distinct !DILexicalBlock(scope: !10258, file: !1, line: 2097, column: 2)
!10595 = !DILocation(line: 2097, column: 7, scope: !10594)
!10596 = !DILocation(line: 2097, column: 14, scope: !10597)
!10597 = distinct !DILexicalBlock(scope: !10594, file: !1, line: 2097, column: 2)
!10598 = !DILocation(line: 2097, column: 18, scope: !10597)
!10599 = !DILocation(line: 2097, column: 16, scope: !10597)
!10600 = !DILocation(line: 2097, column: 2, scope: !10594)
!10601 = !DILocation(line: 2098, column: 10, scope: !10602)
!10602 = distinct !DILexicalBlock(scope: !10603, file: !1, line: 2098, column: 3)
!10603 = distinct !DILexicalBlock(scope: !10597, file: !1, line: 2097, column: 26)
!10604 = !DILocation(line: 2098, column: 8, scope: !10602)
!10605 = !DILocation(line: 2098, column: 15, scope: !10606)
!10606 = distinct !DILexicalBlock(scope: !10602, file: !1, line: 2098, column: 3)
!10607 = !DILocation(line: 2098, column: 19, scope: !10606)
!10608 = !DILocation(line: 2098, column: 17, scope: !10606)
!10609 = !DILocation(line: 2098, column: 3, scope: !10602)
!10610 = !DILocation(line: 2099, column: 11, scope: !10611)
!10611 = distinct !DILexicalBlock(scope: !10612, file: !1, line: 2099, column: 4)
!10612 = distinct !DILexicalBlock(scope: !10606, file: !1, line: 2098, column: 30)
!10613 = !DILocation(line: 2099, column: 9, scope: !10611)
!10614 = !DILocation(line: 2099, column: 16, scope: !10615)
!10615 = distinct !DILexicalBlock(scope: !10611, file: !1, line: 2099, column: 4)
!10616 = !DILocation(line: 2099, column: 21, scope: !10615)
!10617 = !DILocation(line: 2099, column: 18, scope: !10615)
!10618 = !DILocation(line: 2099, column: 4, scope: !10611)
!10619 = !DILocation(line: 2101, column: 10, scope: !10620)
!10620 = distinct !DILexicalBlock(scope: !10615, file: !1, line: 2099, column: 32)
!10621 = !DILocation(line: 2101, column: 24, scope: !10620)
!10622 = !DILocation(line: 2101, column: 29, scope: !10620)
!10623 = !DILocation(line: 2101, column: 32, scope: !10620)
!10624 = !DILocation(line: 2101, column: 35, scope: !10620)
!10625 = !DILocation(line: 2101, column: 14, scope: !10620)
!10626 = !DILocation(line: 2102, column: 24, scope: !10620)
!10627 = !DILocation(line: 2102, column: 29, scope: !10620)
!10628 = !DILocation(line: 2102, column: 32, scope: !10620)
!10629 = !DILocation(line: 2102, column: 34, scope: !10620)
!10630 = !DILocation(line: 2102, column: 39, scope: !10620)
!10631 = !DILocation(line: 2102, column: 14, scope: !10620)
!10632 = !DILocation(line: 2103, column: 30, scope: !10620)
!10633 = !DILocation(line: 2103, column: 35, scope: !10620)
!10634 = !DILocation(line: 2103, column: 42, scope: !10620)
!10635 = !DILocation(line: 2103, column: 40, scope: !10620)
!10636 = !DILocation(line: 2103, column: 44, scope: !10620)
!10637 = !DILocation(line: 2103, column: 53, scope: !10620)
!10638 = !DILocation(line: 2103, column: 51, scope: !10620)
!10639 = !DILocation(line: 2103, column: 55, scope: !10620)
!10640 = !DILocation(line: 2103, column: 14, scope: !10620)
!10641 = !DILocation(line: 2104, column: 30, scope: !10620)
!10642 = !DILocation(line: 2104, column: 35, scope: !10620)
!10643 = !DILocation(line: 2104, column: 42, scope: !10620)
!10644 = !DILocation(line: 2104, column: 40, scope: !10620)
!10645 = !DILocation(line: 2104, column: 44, scope: !10620)
!10646 = !DILocation(line: 2104, column: 53, scope: !10620)
!10647 = !DILocation(line: 2104, column: 51, scope: !10620)
!10648 = !DILocation(line: 2104, column: 55, scope: !10620)
!10649 = !DILocation(line: 2104, column: 14, scope: !10620)
!10650 = !DILocation(line: 2101, column: 5, scope: !10620)
!10651 = !DILocation(line: 2105, column: 26, scope: !10620)
!10652 = !DILocation(line: 2105, column: 31, scope: !10620)
!10653 = !DILocation(line: 2105, column: 38, scope: !10620)
!10654 = !DILocation(line: 2105, column: 36, scope: !10620)
!10655 = !DILocation(line: 2105, column: 40, scope: !10620)
!10656 = !DILocation(line: 2105, column: 49, scope: !10620)
!10657 = !DILocation(line: 2105, column: 47, scope: !10620)
!10658 = !DILocation(line: 2105, column: 16, scope: !10620)
!10659 = !DILocation(line: 2105, column: 53, scope: !10620)
!10660 = !DILocation(line: 2105, column: 57, scope: !10620)
!10661 = !DILocation(line: 2105, column: 5, scope: !10620)
!10662 = !DILocation(line: 2106, column: 4, scope: !10620)
!10663 = !DILocation(line: 2099, column: 28, scope: !10615)
!10664 = !DILocation(line: 2099, column: 4, scope: !10615)
!10665 = distinct !{!10665, !10618, !10666}
!10666 = !DILocation(line: 2106, column: 4, scope: !10611)
!10667 = !DILocation(line: 2107, column: 3, scope: !10612)
!10668 = !DILocation(line: 2098, column: 26, scope: !10606)
!10669 = !DILocation(line: 2098, column: 3, scope: !10606)
!10670 = distinct !{!10670, !10609, !10671}
!10671 = !DILocation(line: 2107, column: 3, scope: !10602)
!10672 = !DILocation(line: 2108, column: 2, scope: !10603)
!10673 = !DILocation(line: 2097, column: 22, scope: !10597)
!10674 = !DILocation(line: 2097, column: 2, scope: !10597)
!10675 = distinct !{!10675, !10600, !10676}
!10676 = !DILocation(line: 2108, column: 2, scope: !10594)
!10677 = !DILocation(line: 2111, column: 9, scope: !10678)
!10678 = distinct !DILexicalBlock(scope: !10258, file: !1, line: 2111, column: 2)
!10679 = !DILocation(line: 2111, column: 7, scope: !10678)
!10680 = !DILocation(line: 2111, column: 14, scope: !10681)
!10681 = distinct !DILexicalBlock(scope: !10678, file: !1, line: 2111, column: 2)
!10682 = !DILocation(line: 2111, column: 18, scope: !10681)
!10683 = !DILocation(line: 2111, column: 16, scope: !10681)
!10684 = !DILocation(line: 2111, column: 2, scope: !10678)
!10685 = !DILocation(line: 2112, column: 10, scope: !10686)
!10686 = distinct !DILexicalBlock(scope: !10687, file: !1, line: 2112, column: 3)
!10687 = distinct !DILexicalBlock(scope: !10681, file: !1, line: 2111, column: 26)
!10688 = !DILocation(line: 2112, column: 8, scope: !10686)
!10689 = !DILocation(line: 2112, column: 15, scope: !10690)
!10690 = distinct !DILexicalBlock(scope: !10686, file: !1, line: 2112, column: 3)
!10691 = !DILocation(line: 2112, column: 19, scope: !10690)
!10692 = !DILocation(line: 2112, column: 17, scope: !10690)
!10693 = !DILocation(line: 2112, column: 3, scope: !10686)
!10694 = !DILocation(line: 2113, column: 11, scope: !10695)
!10695 = distinct !DILexicalBlock(scope: !10696, file: !1, line: 2113, column: 4)
!10696 = distinct !DILexicalBlock(scope: !10690, file: !1, line: 2112, column: 30)
!10697 = !DILocation(line: 2113, column: 9, scope: !10695)
!10698 = !DILocation(line: 2113, column: 16, scope: !10699)
!10699 = distinct !DILexicalBlock(scope: !10695, file: !1, line: 2113, column: 4)
!10700 = !DILocation(line: 2113, column: 20, scope: !10699)
!10701 = !DILocation(line: 2113, column: 18, scope: !10699)
!10702 = !DILocation(line: 2113, column: 4, scope: !10695)
!10703 = !DILocation(line: 2115, column: 10, scope: !10704)
!10704 = distinct !DILexicalBlock(scope: !10699, file: !1, line: 2113, column: 31)
!10705 = !DILocation(line: 2115, column: 24, scope: !10704)
!10706 = !DILocation(line: 2115, column: 29, scope: !10704)
!10707 = !DILocation(line: 2115, column: 32, scope: !10704)
!10708 = !DILocation(line: 2115, column: 35, scope: !10704)
!10709 = !DILocation(line: 2115, column: 14, scope: !10704)
!10710 = !DILocation(line: 2116, column: 24, scope: !10704)
!10711 = !DILocation(line: 2116, column: 29, scope: !10704)
!10712 = !DILocation(line: 2116, column: 32, scope: !10704)
!10713 = !DILocation(line: 2116, column: 35, scope: !10704)
!10714 = !DILocation(line: 2116, column: 37, scope: !10704)
!10715 = !DILocation(line: 2116, column: 14, scope: !10704)
!10716 = !DILocation(line: 2117, column: 30, scope: !10704)
!10717 = !DILocation(line: 2117, column: 35, scope: !10704)
!10718 = !DILocation(line: 2117, column: 42, scope: !10704)
!10719 = !DILocation(line: 2117, column: 40, scope: !10704)
!10720 = !DILocation(line: 2117, column: 44, scope: !10704)
!10721 = !DILocation(line: 2117, column: 53, scope: !10704)
!10722 = !DILocation(line: 2117, column: 51, scope: !10704)
!10723 = !DILocation(line: 2117, column: 55, scope: !10704)
!10724 = !DILocation(line: 2117, column: 14, scope: !10704)
!10725 = !DILocation(line: 2118, column: 30, scope: !10704)
!10726 = !DILocation(line: 2118, column: 35, scope: !10704)
!10727 = !DILocation(line: 2118, column: 42, scope: !10704)
!10728 = !DILocation(line: 2118, column: 40, scope: !10704)
!10729 = !DILocation(line: 2118, column: 44, scope: !10704)
!10730 = !DILocation(line: 2118, column: 53, scope: !10704)
!10731 = !DILocation(line: 2118, column: 51, scope: !10704)
!10732 = !DILocation(line: 2118, column: 55, scope: !10704)
!10733 = !DILocation(line: 2118, column: 14, scope: !10704)
!10734 = !DILocation(line: 2115, column: 5, scope: !10704)
!10735 = !DILocation(line: 2119, column: 26, scope: !10704)
!10736 = !DILocation(line: 2119, column: 31, scope: !10704)
!10737 = !DILocation(line: 2119, column: 38, scope: !10704)
!10738 = !DILocation(line: 2119, column: 36, scope: !10704)
!10739 = !DILocation(line: 2119, column: 45, scope: !10704)
!10740 = !DILocation(line: 2119, column: 43, scope: !10704)
!10741 = !DILocation(line: 2119, column: 47, scope: !10704)
!10742 = !DILocation(line: 2119, column: 16, scope: !10704)
!10743 = !DILocation(line: 2119, column: 53, scope: !10704)
!10744 = !DILocation(line: 2119, column: 57, scope: !10704)
!10745 = !DILocation(line: 2119, column: 5, scope: !10704)
!10746 = !DILocation(line: 2120, column: 4, scope: !10704)
!10747 = !DILocation(line: 2113, column: 27, scope: !10699)
!10748 = !DILocation(line: 2113, column: 4, scope: !10699)
!10749 = distinct !{!10749, !10702, !10750}
!10750 = !DILocation(line: 2120, column: 4, scope: !10695)
!10751 = !DILocation(line: 2121, column: 3, scope: !10696)
!10752 = !DILocation(line: 2112, column: 26, scope: !10690)
!10753 = !DILocation(line: 2112, column: 3, scope: !10690)
!10754 = distinct !{!10754, !10693, !10755}
!10755 = !DILocation(line: 2121, column: 3, scope: !10686)
!10756 = !DILocation(line: 2122, column: 2, scope: !10687)
!10757 = !DILocation(line: 2111, column: 22, scope: !10681)
!10758 = !DILocation(line: 2111, column: 2, scope: !10681)
!10759 = distinct !{!10759, !10684, !10760}
!10760 = !DILocation(line: 2122, column: 2, scope: !10678)
!10761 = !DILocation(line: 2125, column: 8, scope: !10258)
!10762 = !DILocation(line: 2126, column: 10, scope: !10258)
!10763 = !DILocation(line: 2126, column: 9, scope: !10258)
!10764 = !DILocation(line: 2126, column: 7, scope: !10258)
!10765 = !DILocation(line: 2127, column: 9, scope: !10766)
!10766 = distinct !DILexicalBlock(scope: !10258, file: !1, line: 2127, column: 2)
!10767 = !DILocation(line: 2127, column: 7, scope: !10766)
!10768 = !DILocation(line: 2127, column: 14, scope: !10769)
!10769 = distinct !DILexicalBlock(scope: !10766, file: !1, line: 2127, column: 2)
!10770 = !DILocation(line: 2127, column: 18, scope: !10769)
!10771 = !DILocation(line: 2127, column: 16, scope: !10769)
!10772 = !DILocation(line: 2127, column: 2, scope: !10766)
!10773 = !DILocation(line: 2128, column: 10, scope: !10774)
!10774 = distinct !DILexicalBlock(scope: !10775, file: !1, line: 2128, column: 3)
!10775 = distinct !DILexicalBlock(scope: !10769, file: !1, line: 2127, column: 26)
!10776 = !DILocation(line: 2128, column: 8, scope: !10774)
!10777 = !DILocation(line: 2128, column: 15, scope: !10778)
!10778 = distinct !DILexicalBlock(scope: !10774, file: !1, line: 2128, column: 3)
!10779 = !DILocation(line: 2128, column: 19, scope: !10778)
!10780 = !DILocation(line: 2128, column: 17, scope: !10778)
!10781 = !DILocation(line: 2128, column: 3, scope: !10774)
!10782 = !DILocation(line: 2129, column: 11, scope: !10783)
!10783 = distinct !DILexicalBlock(scope: !10784, file: !1, line: 2129, column: 4)
!10784 = distinct !DILexicalBlock(scope: !10778, file: !1, line: 2128, column: 30)
!10785 = !DILocation(line: 2129, column: 9, scope: !10783)
!10786 = !DILocation(line: 2129, column: 16, scope: !10787)
!10787 = distinct !DILexicalBlock(scope: !10783, file: !1, line: 2129, column: 4)
!10788 = !DILocation(line: 2129, column: 21, scope: !10787)
!10789 = !DILocation(line: 2129, column: 18, scope: !10787)
!10790 = !DILocation(line: 2129, column: 4, scope: !10783)
!10791 = !DILocation(line: 2131, column: 10, scope: !10792)
!10792 = distinct !DILexicalBlock(scope: !10787, file: !1, line: 2129, column: 32)
!10793 = !DILocation(line: 2131, column: 31, scope: !10792)
!10794 = !DILocation(line: 2131, column: 36, scope: !10792)
!10795 = !DILocation(line: 2131, column: 43, scope: !10792)
!10796 = !DILocation(line: 2131, column: 41, scope: !10792)
!10797 = !DILocation(line: 2131, column: 50, scope: !10792)
!10798 = !DILocation(line: 2131, column: 48, scope: !10792)
!10799 = !DILocation(line: 2131, column: 52, scope: !10792)
!10800 = !DILocation(line: 2131, column: 15, scope: !10792)
!10801 = !DILocation(line: 2132, column: 31, scope: !10792)
!10802 = !DILocation(line: 2132, column: 36, scope: !10792)
!10803 = !DILocation(line: 2132, column: 43, scope: !10792)
!10804 = !DILocation(line: 2132, column: 41, scope: !10792)
!10805 = !DILocation(line: 2132, column: 50, scope: !10792)
!10806 = !DILocation(line: 2132, column: 48, scope: !10792)
!10807 = !DILocation(line: 2132, column: 52, scope: !10792)
!10808 = !DILocation(line: 2132, column: 15, scope: !10792)
!10809 = !DILocation(line: 2133, column: 31, scope: !10792)
!10810 = !DILocation(line: 2133, column: 36, scope: !10792)
!10811 = !DILocation(line: 2133, column: 43, scope: !10792)
!10812 = !DILocation(line: 2133, column: 41, scope: !10792)
!10813 = !DILocation(line: 2133, column: 45, scope: !10792)
!10814 = !DILocation(line: 2133, column: 54, scope: !10792)
!10815 = !DILocation(line: 2133, column: 52, scope: !10792)
!10816 = !DILocation(line: 2133, column: 15, scope: !10792)
!10817 = !DILocation(line: 2134, column: 31, scope: !10792)
!10818 = !DILocation(line: 2134, column: 36, scope: !10792)
!10819 = !DILocation(line: 2134, column: 43, scope: !10792)
!10820 = !DILocation(line: 2134, column: 41, scope: !10792)
!10821 = !DILocation(line: 2134, column: 45, scope: !10792)
!10822 = !DILocation(line: 2134, column: 54, scope: !10792)
!10823 = !DILocation(line: 2134, column: 52, scope: !10792)
!10824 = !DILocation(line: 2134, column: 15, scope: !10792)
!10825 = !DILocation(line: 2131, column: 5, scope: !10792)
!10826 = !DILocation(line: 2136, column: 10, scope: !10792)
!10827 = !DILocation(line: 2136, column: 31, scope: !10792)
!10828 = !DILocation(line: 2136, column: 36, scope: !10792)
!10829 = !DILocation(line: 2136, column: 43, scope: !10792)
!10830 = !DILocation(line: 2136, column: 41, scope: !10792)
!10831 = !DILocation(line: 2136, column: 45, scope: !10792)
!10832 = !DILocation(line: 2136, column: 54, scope: !10792)
!10833 = !DILocation(line: 2136, column: 52, scope: !10792)
!10834 = !DILocation(line: 2136, column: 56, scope: !10792)
!10835 = !DILocation(line: 2136, column: 15, scope: !10792)
!10836 = !DILocation(line: 2137, column: 31, scope: !10792)
!10837 = !DILocation(line: 2137, column: 36, scope: !10792)
!10838 = !DILocation(line: 2137, column: 43, scope: !10792)
!10839 = !DILocation(line: 2137, column: 41, scope: !10792)
!10840 = !DILocation(line: 2137, column: 45, scope: !10792)
!10841 = !DILocation(line: 2137, column: 54, scope: !10792)
!10842 = !DILocation(line: 2137, column: 52, scope: !10792)
!10843 = !DILocation(line: 2137, column: 56, scope: !10792)
!10844 = !DILocation(line: 2137, column: 15, scope: !10792)
!10845 = !DILocation(line: 2138, column: 31, scope: !10792)
!10846 = !DILocation(line: 2138, column: 36, scope: !10792)
!10847 = !DILocation(line: 2138, column: 43, scope: !10792)
!10848 = !DILocation(line: 2138, column: 41, scope: !10792)
!10849 = !DILocation(line: 2138, column: 45, scope: !10792)
!10850 = !DILocation(line: 2138, column: 54, scope: !10792)
!10851 = !DILocation(line: 2138, column: 52, scope: !10792)
!10852 = !DILocation(line: 2138, column: 56, scope: !10792)
!10853 = !DILocation(line: 2138, column: 15, scope: !10792)
!10854 = !DILocation(line: 2139, column: 31, scope: !10792)
!10855 = !DILocation(line: 2139, column: 36, scope: !10792)
!10856 = !DILocation(line: 2139, column: 43, scope: !10792)
!10857 = !DILocation(line: 2139, column: 41, scope: !10792)
!10858 = !DILocation(line: 2139, column: 45, scope: !10792)
!10859 = !DILocation(line: 2139, column: 54, scope: !10792)
!10860 = !DILocation(line: 2139, column: 52, scope: !10792)
!10861 = !DILocation(line: 2139, column: 56, scope: !10792)
!10862 = !DILocation(line: 2139, column: 15, scope: !10792)
!10863 = !DILocation(line: 2136, column: 5, scope: !10792)
!10864 = !DILocation(line: 2141, column: 16, scope: !10792)
!10865 = !DILocation(line: 2141, column: 20, scope: !10792)
!10866 = !DILocation(line: 2141, column: 5, scope: !10792)
!10867 = !DILocation(line: 2142, column: 18, scope: !10792)
!10868 = !DILocation(line: 2142, column: 22, scope: !10792)
!10869 = !DILocation(line: 2142, column: 27, scope: !10792)
!10870 = !DILocation(line: 2142, column: 5, scope: !10792)
!10871 = !DILocation(line: 2143, column: 18, scope: !10792)
!10872 = !DILocation(line: 2143, column: 32, scope: !10792)
!10873 = !DILocation(line: 2143, column: 37, scope: !10792)
!10874 = !DILocation(line: 2143, column: 40, scope: !10792)
!10875 = !DILocation(line: 2143, column: 43, scope: !10792)
!10876 = !DILocation(line: 2143, column: 22, scope: !10792)
!10877 = !DILocation(line: 2143, column: 47, scope: !10792)
!10878 = !DILocation(line: 2143, column: 51, scope: !10792)
!10879 = !DILocation(line: 2143, column: 5, scope: !10792)
!10880 = !DILocation(line: 2144, column: 26, scope: !10792)
!10881 = !DILocation(line: 2144, column: 31, scope: !10792)
!10882 = !DILocation(line: 2144, column: 38, scope: !10792)
!10883 = !DILocation(line: 2144, column: 36, scope: !10792)
!10884 = !DILocation(line: 2144, column: 45, scope: !10792)
!10885 = !DILocation(line: 2144, column: 43, scope: !10792)
!10886 = !DILocation(line: 2144, column: 16, scope: !10792)
!10887 = !DILocation(line: 2144, column: 49, scope: !10792)
!10888 = !DILocation(line: 2144, column: 53, scope: !10792)
!10889 = !DILocation(line: 2144, column: 5, scope: !10792)
!10890 = !DILocation(line: 2145, column: 4, scope: !10792)
!10891 = !DILocation(line: 2129, column: 28, scope: !10787)
!10892 = !DILocation(line: 2129, column: 4, scope: !10787)
!10893 = distinct !{!10893, !10790, !10894}
!10894 = !DILocation(line: 2145, column: 4, scope: !10783)
!10895 = !DILocation(line: 2146, column: 3, scope: !10784)
!10896 = !DILocation(line: 2128, column: 26, scope: !10778)
!10897 = !DILocation(line: 2128, column: 3, scope: !10778)
!10898 = distinct !{!10898, !10781, !10899}
!10899 = !DILocation(line: 2146, column: 3, scope: !10774)
!10900 = !DILocation(line: 2147, column: 2, scope: !10775)
!10901 = !DILocation(line: 2127, column: 22, scope: !10769)
!10902 = !DILocation(line: 2127, column: 2, scope: !10769)
!10903 = distinct !{!10903, !10772, !10904}
!10904 = !DILocation(line: 2147, column: 2, scope: !10766)
!10905 = !DILocation(line: 2149, column: 25, scope: !10258)
!10906 = !DILocation(line: 2149, column: 2, scope: !10258)
!10907 = !DILocation(line: 2152, column: 22, scope: !10258)
!10908 = !DILocation(line: 2152, column: 10, scope: !10258)
!10909 = !DILocation(line: 2152, column: 8, scope: !10258)
!10910 = !DILocation(line: 2153, column: 10, scope: !10258)
!10911 = !DILocation(line: 2153, column: 9, scope: !10258)
!10912 = !DILocation(line: 2153, column: 7, scope: !10258)
!10913 = !DILocation(line: 2155, column: 10, scope: !10258)
!10914 = !DILocation(line: 2155, column: 2, scope: !10258)
!10915 = !DILocation(line: 2156, column: 10, scope: !10258)
!10916 = !DILocation(line: 2156, column: 2, scope: !10258)
!10917 = !DILocation(line: 2157, column: 9, scope: !10918)
!10918 = distinct !DILexicalBlock(scope: !10258, file: !1, line: 2157, column: 2)
!10919 = !DILocation(line: 2157, column: 7, scope: !10918)
!10920 = !DILocation(line: 2157, column: 14, scope: !10921)
!10921 = distinct !DILexicalBlock(scope: !10918, file: !1, line: 2157, column: 2)
!10922 = !DILocation(line: 2157, column: 18, scope: !10921)
!10923 = !DILocation(line: 2157, column: 16, scope: !10921)
!10924 = !DILocation(line: 2157, column: 2, scope: !10918)
!10925 = !DILocation(line: 2158, column: 13, scope: !10926)
!10926 = distinct !DILexicalBlock(scope: !10921, file: !1, line: 2157, column: 26)
!10927 = !DILocation(line: 2158, column: 28, scope: !10926)
!10928 = !DILocation(line: 2158, column: 33, scope: !10926)
!10929 = !DILocation(line: 2158, column: 36, scope: !10926)
!10930 = !DILocation(line: 2158, column: 41, scope: !10926)
!10931 = !DILocation(line: 2158, column: 45, scope: !10926)
!10932 = !DILocation(line: 2158, column: 18, scope: !10926)
!10933 = !DILocation(line: 2158, column: 51, scope: !10926)
!10934 = !DILocation(line: 2158, column: 3, scope: !10926)
!10935 = !DILocation(line: 2159, column: 13, scope: !10926)
!10936 = !DILocation(line: 2159, column: 28, scope: !10926)
!10937 = !DILocation(line: 2159, column: 33, scope: !10926)
!10938 = !DILocation(line: 2159, column: 36, scope: !10926)
!10939 = !DILocation(line: 2159, column: 40, scope: !10926)
!10940 = !DILocation(line: 2159, column: 45, scope: !10926)
!10941 = !DILocation(line: 2159, column: 49, scope: !10926)
!10942 = !DILocation(line: 2159, column: 18, scope: !10926)
!10943 = !DILocation(line: 2159, column: 55, scope: !10926)
!10944 = !DILocation(line: 2159, column: 3, scope: !10926)
!10945 = !DILocation(line: 2160, column: 13, scope: !10926)
!10946 = !DILocation(line: 2160, column: 28, scope: !10926)
!10947 = !DILocation(line: 2160, column: 33, scope: !10926)
!10948 = !DILocation(line: 2160, column: 36, scope: !10926)
!10949 = !DILocation(line: 2160, column: 40, scope: !10926)
!10950 = !DILocation(line: 2160, column: 45, scope: !10926)
!10951 = !DILocation(line: 2160, column: 49, scope: !10926)
!10952 = !DILocation(line: 2160, column: 18, scope: !10926)
!10953 = !DILocation(line: 2160, column: 55, scope: !10926)
!10954 = !DILocation(line: 2160, column: 3, scope: !10926)
!10955 = !DILocation(line: 2161, column: 2, scope: !10926)
!10956 = !DILocation(line: 2157, column: 22, scope: !10921)
!10957 = !DILocation(line: 2157, column: 2, scope: !10921)
!10958 = distinct !{!10958, !10924, !10959}
!10959 = !DILocation(line: 2161, column: 2, scope: !10918)
!10960 = !DILocation(line: 2162, column: 13, scope: !10258)
!10961 = !DILocation(line: 2162, column: 17, scope: !10258)
!10962 = !DILocation(line: 2162, column: 2, scope: !10258)
!10963 = !DILocation(line: 2163, column: 12, scope: !10258)
!10964 = !DILocation(line: 2163, column: 30, scope: !10258)
!10965 = !DILocation(line: 2163, column: 23, scope: !10258)
!10966 = !DILocation(line: 2163, column: 21, scope: !10258)
!10967 = !DILocation(line: 2163, column: 2, scope: !10258)
!10968 = !DILocation(line: 2164, column: 15, scope: !10258)
!10969 = !DILocation(line: 2164, column: 19, scope: !10258)
!10970 = !DILocation(line: 2164, column: 24, scope: !10258)
!10971 = !DILocation(line: 2164, column: 46, scope: !10258)
!10972 = !DILocation(line: 2164, column: 39, scope: !10258)
!10973 = !DILocation(line: 2164, column: 37, scope: !10258)
!10974 = !DILocation(line: 2164, column: 29, scope: !10258)
!10975 = !DILocation(line: 2164, column: 2, scope: !10258)
!10976 = !DILocation(line: 2165, column: 15, scope: !10258)
!10977 = !DILocation(line: 2165, column: 29, scope: !10258)
!10978 = !DILocation(line: 2165, column: 37, scope: !10258)
!10979 = !DILocation(line: 2165, column: 43, scope: !10258)
!10980 = !DILocation(line: 2165, column: 19, scope: !10258)
!10981 = !DILocation(line: 2165, column: 50, scope: !10258)
!10982 = !DILocation(line: 2165, column: 54, scope: !10258)
!10983 = !DILocation(line: 2165, column: 2, scope: !10258)
!10984 = !DILocation(line: 2166, column: 9, scope: !10985)
!10985 = distinct !DILexicalBlock(scope: !10258, file: !1, line: 2166, column: 2)
!10986 = !DILocation(line: 2166, column: 7, scope: !10985)
!10987 = !DILocation(line: 2166, column: 14, scope: !10988)
!10988 = distinct !DILexicalBlock(scope: !10985, file: !1, line: 2166, column: 2)
!10989 = !DILocation(line: 2166, column: 18, scope: !10988)
!10990 = !DILocation(line: 2166, column: 16, scope: !10988)
!10991 = !DILocation(line: 2166, column: 2, scope: !10985)
!10992 = !DILocation(line: 2167, column: 24, scope: !10988)
!10993 = !DILocation(line: 2167, column: 29, scope: !10988)
!10994 = !DILocation(line: 2167, column: 32, scope: !10988)
!10995 = !DILocation(line: 2167, column: 37, scope: !10988)
!10996 = !DILocation(line: 2167, column: 14, scope: !10988)
!10997 = !DILocation(line: 2167, column: 43, scope: !10988)
!10998 = !DILocation(line: 2167, column: 47, scope: !10988)
!10999 = !DILocation(line: 2167, column: 3, scope: !10988)
!11000 = !DILocation(line: 2166, column: 22, scope: !10988)
!11001 = !DILocation(line: 2166, column: 2, scope: !10988)
!11002 = distinct !{!11002, !10991, !11003}
!11003 = !DILocation(line: 2167, column: 49, scope: !10985)
!11004 = !DILocation(line: 2170, column: 9, scope: !10258)
!11005 = !DILocation(line: 2170, column: 14, scope: !10258)
!11006 = !DILocation(line: 2170, column: 7, scope: !10258)
!11007 = !DILocation(line: 2171, column: 9, scope: !11008)
!11008 = distinct !DILexicalBlock(scope: !10258, file: !1, line: 2171, column: 2)
!11009 = !DILocation(line: 2171, column: 7, scope: !11008)
!11010 = !DILocation(line: 2171, column: 14, scope: !11011)
!11011 = distinct !DILexicalBlock(scope: !11008, file: !1, line: 2171, column: 2)
!11012 = !DILocation(line: 2171, column: 18, scope: !11011)
!11013 = !DILocation(line: 2171, column: 16, scope: !11011)
!11014 = !DILocation(line: 2171, column: 2, scope: !11008)
!11015 = !DILocation(line: 2172, column: 12, scope: !11016)
!11016 = distinct !DILexicalBlock(scope: !11011, file: !1, line: 2171, column: 26)
!11017 = !DILocation(line: 2172, column: 14, scope: !11016)
!11018 = !DILocation(line: 2172, column: 21, scope: !11016)
!11019 = !DILocation(line: 2172, column: 19, scope: !11016)
!11020 = !DILocation(line: 2172, column: 9, scope: !11016)
!11021 = !DILocation(line: 2173, column: 10, scope: !11022)
!11022 = distinct !DILexicalBlock(scope: !11016, file: !1, line: 2173, column: 3)
!11023 = !DILocation(line: 2173, column: 8, scope: !11022)
!11024 = !DILocation(line: 2173, column: 15, scope: !11025)
!11025 = distinct !DILexicalBlock(scope: !11022, file: !1, line: 2173, column: 3)
!11026 = !DILocation(line: 2173, column: 20, scope: !11025)
!11027 = !DILocation(line: 2173, column: 17, scope: !11025)
!11028 = !DILocation(line: 2173, column: 3, scope: !11022)
!11029 = !DILocation(line: 2174, column: 22, scope: !11030)
!11030 = distinct !DILexicalBlock(scope: !11025, file: !1, line: 2173, column: 30)
!11031 = !DILocation(line: 2174, column: 27, scope: !11030)
!11032 = !DILocation(line: 2174, column: 33, scope: !11030)
!11033 = !DILocation(line: 2174, column: 42, scope: !11030)
!11034 = !DILocation(line: 2174, column: 45, scope: !11030)
!11035 = !DILocation(line: 2174, column: 50, scope: !11030)
!11036 = !DILocation(line: 2174, column: 4, scope: !11030)
!11037 = !DILocation(line: 2175, column: 25, scope: !11030)
!11038 = !DILocation(line: 2175, column: 30, scope: !11030)
!11039 = !DILocation(line: 2175, column: 36, scope: !11030)
!11040 = !DILocation(line: 2175, column: 15, scope: !11030)
!11041 = !DILocation(line: 2175, column: 40, scope: !11030)
!11042 = !DILocation(line: 2175, column: 44, scope: !11030)
!11043 = !DILocation(line: 2175, column: 4, scope: !11030)
!11044 = !DILocation(line: 2176, column: 8, scope: !11045)
!11045 = distinct !DILexicalBlock(scope: !11030, file: !1, line: 2176, column: 8)
!11046 = !DILocation(line: 2176, column: 13, scope: !11045)
!11047 = !DILocation(line: 2176, column: 10, scope: !11045)
!11048 = !DILocation(line: 2176, column: 17, scope: !11045)
!11049 = !DILocation(line: 2176, column: 20, scope: !11045)
!11050 = !DILocation(line: 2176, column: 24, scope: !11045)
!11051 = !DILocation(line: 2176, column: 22, scope: !11045)
!11052 = !DILocation(line: 2176, column: 8, scope: !11030)
!11053 = !DILocation(line: 2177, column: 26, scope: !11054)
!11054 = distinct !DILexicalBlock(scope: !11045, file: !1, line: 2176, column: 29)
!11055 = !DILocation(line: 2177, column: 31, scope: !11054)
!11056 = !DILocation(line: 2177, column: 38, scope: !11054)
!11057 = !DILocation(line: 2177, column: 44, scope: !11054)
!11058 = !DILocation(line: 2177, column: 42, scope: !11054)
!11059 = !DILocation(line: 2177, column: 16, scope: !11054)
!11060 = !DILocation(line: 2177, column: 51, scope: !11054)
!11061 = !DILocation(line: 2177, column: 55, scope: !11054)
!11062 = !DILocation(line: 2177, column: 5, scope: !11054)
!11063 = !DILocation(line: 2178, column: 4, scope: !11054)
!11064 = !DILocation(line: 2179, column: 3, scope: !11030)
!11065 = !DILocation(line: 2173, column: 26, scope: !11025)
!11066 = !DILocation(line: 2173, column: 3, scope: !11025)
!11067 = distinct !{!11067, !11028, !11068}
!11068 = !DILocation(line: 2179, column: 3, scope: !11022)
!11069 = !DILocation(line: 2180, column: 10, scope: !11016)
!11070 = !DILocation(line: 2180, column: 16, scope: !11016)
!11071 = !DILocation(line: 2180, column: 8, scope: !11016)
!11072 = !DILocation(line: 2181, column: 2, scope: !11016)
!11073 = !DILocation(line: 2171, column: 22, scope: !11011)
!11074 = !DILocation(line: 2171, column: 2, scope: !11011)
!11075 = distinct !{!11075, !11014, !11076}
!11076 = !DILocation(line: 2181, column: 2, scope: !11008)
!11077 = !DILocation(line: 2183, column: 9, scope: !10258)
!11078 = !DILocation(line: 2183, column: 2, scope: !10258)
!11079 = distinct !DISubprogram(name: "interp_vmesh", scope: !1, file: !1, line: 1947, type: !11080, scopeLine: 1948, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!11080 = !DISubroutineType(types: !11081)
!11081 = !{!298, !801, !298, !63}
!11082 = !DILocalVariable(name: "bp", arg: 1, scope: !11079, file: !1, line: 1947, type: !801)
!11083 = !DILocation(line: 1947, column: 41, scope: !11079)
!11084 = !DILocalVariable(name: "vm0", arg: 2, scope: !11079, file: !1, line: 1947, type: !298)
!11085 = !DILocation(line: 1947, column: 52, scope: !11079)
!11086 = !DILocalVariable(name: "nseg", arg: 3, scope: !11079, file: !1, line: 1947, type: !63)
!11087 = !DILocation(line: 1947, column: 61, scope: !11079)
!11088 = !DILocalVariable(name: "n", scope: !11079, file: !1, line: 1949, type: !63)
!11089 = !DILocation(line: 1949, column: 6, scope: !11079)
!11090 = !DILocalVariable(name: "ns0", scope: !11079, file: !1, line: 1949, type: !63)
!11091 = !DILocation(line: 1949, column: 9, scope: !11079)
!11092 = !DILocalVariable(name: "nseg2", scope: !11079, file: !1, line: 1949, type: !63)
!11093 = !DILocation(line: 1949, column: 14, scope: !11079)
!11094 = !DILocalVariable(name: "odd", scope: !11079, file: !1, line: 1949, type: !63)
!11095 = !DILocation(line: 1949, column: 21, scope: !11079)
!11096 = !DILocalVariable(name: "i", scope: !11079, file: !1, line: 1949, type: !63)
!11097 = !DILocation(line: 1949, column: 26, scope: !11079)
!11098 = !DILocalVariable(name: "j", scope: !11079, file: !1, line: 1949, type: !63)
!11099 = !DILocation(line: 1949, column: 29, scope: !11079)
!11100 = !DILocalVariable(name: "k", scope: !11079, file: !1, line: 1949, type: !63)
!11101 = !DILocation(line: 1949, column: 32, scope: !11079)
!11102 = !DILocalVariable(name: "j0", scope: !11079, file: !1, line: 1949, type: !63)
!11103 = !DILocation(line: 1949, column: 35, scope: !11079)
!11104 = !DILocalVariable(name: "k0", scope: !11079, file: !1, line: 1949, type: !63)
!11105 = !DILocation(line: 1949, column: 39, scope: !11079)
!11106 = !DILocalVariable(name: "k0prev", scope: !11079, file: !1, line: 1949, type: !63)
!11107 = !DILocation(line: 1949, column: 43, scope: !11079)
!11108 = !DILocalVariable(name: "prev_frac", scope: !11079, file: !1, line: 1950, type: !170)
!11109 = !DILocation(line: 1950, column: 9, scope: !11079)
!11110 = !DILocalVariable(name: "frac", scope: !11079, file: !1, line: 1950, type: !170)
!11111 = !DILocation(line: 1950, column: 21, scope: !11079)
!11112 = !DILocalVariable(name: "new_frac", scope: !11079, file: !1, line: 1950, type: !170)
!11113 = !DILocation(line: 1950, column: 28, scope: !11079)
!11114 = !DILocalVariable(name: "prev_new_frac", scope: !11079, file: !1, line: 1950, type: !170)
!11115 = !DILocation(line: 1950, column: 39, scope: !11079)
!11116 = !DILocalVariable(name: "f", scope: !11079, file: !1, line: 1951, type: !76)
!11117 = !DILocation(line: 1951, column: 8, scope: !11079)
!11118 = !DILocalVariable(name: "restj", scope: !11079, file: !1, line: 1951, type: !76)
!11119 = !DILocation(line: 1951, column: 11, scope: !11079)
!11120 = !DILocalVariable(name: "restk", scope: !11079, file: !1, line: 1951, type: !76)
!11121 = !DILocation(line: 1951, column: 18, scope: !11079)
!11122 = !DILocalVariable(name: "restkprev", scope: !11079, file: !1, line: 1951, type: !76)
!11123 = !DILocation(line: 1951, column: 25, scope: !11079)
!11124 = !DILocalVariable(name: "quad", scope: !11079, file: !1, line: 1952, type: !11125)
!11125 = !DICompositeType(tag: DW_TAG_array_type, baseType: !76, size: 384, elements: !11126)
!11126 = !{!5336, !78}
!11127 = !DILocation(line: 1952, column: 8, scope: !11079)
!11128 = !DILocalVariable(name: "co", scope: !11079, file: !1, line: 1952, type: !75)
!11129 = !DILocation(line: 1952, column: 20, scope: !11079)
!11130 = !DILocalVariable(name: "center", scope: !11079, file: !1, line: 1952, type: !75)
!11131 = !DILocation(line: 1952, column: 27, scope: !11079)
!11132 = !DILocalVariable(name: "vm1", scope: !11079, file: !1, line: 1953, type: !298)
!11133 = !DILocation(line: 1953, column: 9, scope: !11079)
!11134 = !DILocalVariable(name: "bndv", scope: !11079, file: !1, line: 1954, type: !121)
!11135 = !DILocation(line: 1954, column: 13, scope: !11079)
!11136 = !DILocation(line: 1956, column: 6, scope: !11079)
!11137 = !DILocation(line: 1956, column: 11, scope: !11079)
!11138 = !DILocation(line: 1956, column: 4, scope: !11079)
!11139 = !DILocation(line: 1957, column: 8, scope: !11079)
!11140 = !DILocation(line: 1957, column: 13, scope: !11079)
!11141 = !DILocation(line: 1957, column: 6, scope: !11079)
!11142 = !DILocation(line: 1958, column: 10, scope: !11079)
!11143 = !DILocation(line: 1958, column: 15, scope: !11079)
!11144 = !DILocation(line: 1958, column: 8, scope: !11079)
!11145 = !DILocation(line: 1959, column: 8, scope: !11079)
!11146 = !DILocation(line: 1959, column: 13, scope: !11079)
!11147 = !DILocation(line: 1959, column: 6, scope: !11079)
!11148 = !DILocation(line: 1960, column: 22, scope: !11079)
!11149 = !DILocation(line: 1960, column: 26, scope: !11079)
!11150 = !DILocation(line: 1960, column: 37, scope: !11079)
!11151 = !DILocation(line: 1960, column: 40, scope: !11079)
!11152 = !DILocation(line: 1960, column: 46, scope: !11079)
!11153 = !DILocation(line: 1960, column: 51, scope: !11079)
!11154 = !DILocation(line: 1960, column: 8, scope: !11079)
!11155 = !DILocation(line: 1960, column: 6, scope: !11079)
!11156 = !DILocation(line: 1962, column: 14, scope: !11079)
!11157 = !DILocation(line: 1962, column: 12, scope: !11079)
!11158 = !DILocation(line: 1963, column: 9, scope: !11079)
!11159 = !DILocation(line: 1963, column: 7, scope: !11079)
!11160 = !DILocation(line: 1964, column: 13, scope: !11079)
!11161 = !DILocation(line: 1964, column: 11, scope: !11079)
!11162 = !DILocation(line: 1965, column: 18, scope: !11079)
!11163 = !DILocation(line: 1965, column: 16, scope: !11079)
!11164 = !DILocation(line: 1967, column: 19, scope: !11079)
!11165 = !DILocation(line: 1967, column: 24, scope: !11079)
!11166 = !DILocation(line: 1967, column: 35, scope: !11079)
!11167 = !DILocation(line: 1967, column: 37, scope: !11079)
!11168 = !DILocation(line: 1967, column: 2, scope: !11079)
!11169 = !DILocation(line: 1968, column: 9, scope: !11079)
!11170 = !DILocation(line: 1968, column: 14, scope: !11079)
!11171 = !DILocation(line: 1968, column: 7, scope: !11079)
!11172 = !DILocation(line: 1969, column: 21, scope: !11079)
!11173 = !DILocation(line: 1969, column: 25, scope: !11079)
!11174 = !DILocation(line: 1969, column: 31, scope: !11079)
!11175 = !DILocation(line: 1969, column: 37, scope: !11079)
!11176 = !DILocation(line: 1969, column: 52, scope: !11079)
!11177 = !DILocation(line: 1969, column: 2, scope: !11079)
!11178 = !DILocation(line: 1970, column: 9, scope: !11179)
!11179 = distinct !DILexicalBlock(scope: !11079, file: !1, line: 1970, column: 2)
!11180 = !DILocation(line: 1970, column: 7, scope: !11179)
!11181 = !DILocation(line: 1970, column: 14, scope: !11182)
!11182 = distinct !DILexicalBlock(scope: !11179, file: !1, line: 1970, column: 2)
!11183 = !DILocation(line: 1970, column: 18, scope: !11182)
!11184 = !DILocation(line: 1970, column: 16, scope: !11182)
!11185 = !DILocation(line: 1970, column: 2, scope: !11179)
!11186 = !DILocation(line: 1971, column: 20, scope: !11187)
!11187 = distinct !DILexicalBlock(scope: !11182, file: !1, line: 1970, column: 26)
!11188 = !DILocation(line: 1971, column: 25, scope: !11187)
!11189 = !DILocation(line: 1971, column: 31, scope: !11187)
!11190 = !DILocation(line: 1971, column: 3, scope: !11187)
!11191 = !DILocation(line: 1972, column: 22, scope: !11187)
!11192 = !DILocation(line: 1972, column: 26, scope: !11187)
!11193 = !DILocation(line: 1972, column: 32, scope: !11187)
!11194 = !DILocation(line: 1972, column: 42, scope: !11187)
!11195 = !DILocation(line: 1972, column: 3, scope: !11187)
!11196 = !DILocation(line: 1973, column: 10, scope: !11197)
!11197 = distinct !DILexicalBlock(scope: !11187, file: !1, line: 1973, column: 3)
!11198 = !DILocation(line: 1973, column: 8, scope: !11197)
!11199 = !DILocation(line: 1973, column: 15, scope: !11200)
!11200 = distinct !DILexicalBlock(scope: !11197, file: !1, line: 1973, column: 3)
!11201 = !DILocation(line: 1973, column: 20, scope: !11200)
!11202 = !DILocation(line: 1973, column: 26, scope: !11200)
!11203 = !DILocation(line: 1973, column: 32, scope: !11200)
!11204 = !DILocation(line: 1973, column: 30, scope: !11200)
!11205 = !DILocation(line: 1973, column: 17, scope: !11200)
!11206 = !DILocation(line: 1973, column: 3, scope: !11197)
!11207 = !DILocation(line: 1974, column: 11, scope: !11208)
!11208 = distinct !DILexicalBlock(scope: !11209, file: !1, line: 1974, column: 4)
!11209 = distinct !DILexicalBlock(scope: !11200, file: !1, line: 1973, column: 42)
!11210 = !DILocation(line: 1974, column: 9, scope: !11208)
!11211 = !DILocation(line: 1974, column: 16, scope: !11212)
!11212 = distinct !DILexicalBlock(scope: !11208, file: !1, line: 1974, column: 4)
!11213 = !DILocation(line: 1974, column: 21, scope: !11212)
!11214 = !DILocation(line: 1974, column: 18, scope: !11212)
!11215 = !DILocation(line: 1974, column: 4, scope: !11208)
!11216 = !DILocation(line: 1975, column: 9, scope: !11217)
!11217 = distinct !DILexicalBlock(scope: !11212, file: !1, line: 1974, column: 33)
!11218 = !DILocation(line: 1975, column: 18, scope: !11217)
!11219 = !DILocation(line: 1975, column: 7, scope: !11217)
!11220 = !DILocation(line: 1976, column: 23, scope: !11217)
!11221 = !DILocation(line: 1976, column: 29, scope: !11217)
!11222 = !DILocation(line: 1976, column: 34, scope: !11217)
!11223 = !DILocation(line: 1976, column: 10, scope: !11217)
!11224 = !DILocation(line: 1976, column: 8, scope: !11217)
!11225 = !DILocation(line: 1977, column: 9, scope: !11217)
!11226 = !DILocation(line: 1977, column: 23, scope: !11217)
!11227 = !DILocation(line: 1977, column: 30, scope: !11217)
!11228 = !DILocation(line: 1977, column: 28, scope: !11217)
!11229 = !DILocation(line: 1977, column: 7, scope: !11217)
!11230 = !DILocation(line: 1978, column: 27, scope: !11217)
!11231 = !DILocation(line: 1978, column: 38, scope: !11217)
!11232 = !DILocation(line: 1978, column: 43, scope: !11217)
!11233 = !DILocation(line: 1978, column: 14, scope: !11217)
!11234 = !DILocation(line: 1978, column: 12, scope: !11217)
!11235 = !DILocation(line: 1979, column: 10, scope: !11217)
!11236 = !DILocation(line: 1979, column: 16, scope: !11217)
!11237 = !DILocation(line: 1979, column: 14, scope: !11217)
!11238 = !DILocation(line: 1979, column: 8, scope: !11217)
!11239 = !DILocation(line: 1980, column: 14, scope: !11217)
!11240 = !DILocation(line: 1980, column: 13, scope: !11217)
!11241 = !DILocation(line: 1980, column: 11, scope: !11217)
!11242 = !DILocation(line: 1981, column: 9, scope: !11243)
!11243 = distinct !DILexicalBlock(scope: !11217, file: !1, line: 1981, column: 9)
!11244 = !DILocation(line: 1981, column: 15, scope: !11243)
!11245 = !DILocation(line: 1981, column: 9, scope: !11217)
!11246 = !DILocation(line: 1982, column: 12, scope: !11247)
!11247 = distinct !DILexicalBlock(scope: !11243, file: !1, line: 1981, column: 33)
!11248 = !DILocation(line: 1983, column: 5, scope: !11247)
!11249 = !DILocation(line: 1985, column: 11, scope: !11250)
!11250 = distinct !DILexicalBlock(scope: !11243, file: !1, line: 1984, column: 10)
!11251 = !DILocation(line: 1985, column: 14, scope: !11250)
!11252 = !DILocation(line: 1985, column: 9, scope: !11250)
!11253 = !DILocation(line: 1986, column: 21, scope: !11250)
!11254 = !DILocation(line: 1986, column: 19, scope: !11250)
!11255 = !DILocation(line: 1986, column: 12, scope: !11250)
!11256 = !DILocation(line: 1989, column: 9, scope: !11257)
!11257 = distinct !DILexicalBlock(scope: !11217, file: !1, line: 1989, column: 9)
!11258 = !DILocation(line: 1989, column: 15, scope: !11257)
!11259 = !DILocation(line: 1989, column: 31, scope: !11257)
!11260 = !DILocation(line: 1989, column: 34, scope: !11257)
!11261 = !DILocation(line: 1989, column: 40, scope: !11257)
!11262 = !DILocation(line: 1989, column: 9, scope: !11217)
!11263 = !DILocation(line: 1990, column: 17, scope: !11264)
!11264 = distinct !DILexicalBlock(scope: !11257, file: !1, line: 1989, column: 57)
!11265 = !DILocation(line: 1990, column: 37, scope: !11264)
!11266 = !DILocation(line: 1990, column: 42, scope: !11264)
!11267 = !DILocation(line: 1990, column: 45, scope: !11264)
!11268 = !DILocation(line: 1990, column: 49, scope: !11264)
!11269 = !DILocation(line: 1990, column: 21, scope: !11264)
!11270 = !DILocation(line: 1990, column: 54, scope: !11264)
!11271 = !DILocation(line: 1990, column: 6, scope: !11264)
!11272 = !DILocation(line: 1991, column: 5, scope: !11264)
!11273 = !DILocation(line: 1993, column: 17, scope: !11274)
!11274 = distinct !DILexicalBlock(scope: !11257, file: !1, line: 1992, column: 10)
!11275 = !DILocation(line: 1993, column: 42, scope: !11274)
!11276 = !DILocation(line: 1993, column: 47, scope: !11274)
!11277 = !DILocation(line: 1993, column: 50, scope: !11274)
!11278 = !DILocation(line: 1993, column: 54, scope: !11274)
!11279 = !DILocation(line: 1993, column: 26, scope: !11274)
!11280 = !DILocation(line: 1993, column: 59, scope: !11274)
!11281 = !DILocation(line: 1993, column: 6, scope: !11274)
!11282 = !DILocation(line: 1994, column: 17, scope: !11274)
!11283 = !DILocation(line: 1994, column: 42, scope: !11274)
!11284 = !DILocation(line: 1994, column: 47, scope: !11274)
!11285 = !DILocation(line: 1994, column: 50, scope: !11274)
!11286 = !DILocation(line: 1994, column: 54, scope: !11274)
!11287 = !DILocation(line: 1994, column: 57, scope: !11274)
!11288 = !DILocation(line: 1994, column: 26, scope: !11274)
!11289 = !DILocation(line: 1994, column: 63, scope: !11274)
!11290 = !DILocation(line: 1994, column: 6, scope: !11274)
!11291 = !DILocation(line: 1995, column: 17, scope: !11274)
!11292 = !DILocation(line: 1995, column: 42, scope: !11274)
!11293 = !DILocation(line: 1995, column: 47, scope: !11274)
!11294 = !DILocation(line: 1995, column: 50, scope: !11274)
!11295 = !DILocation(line: 1995, column: 53, scope: !11274)
!11296 = !DILocation(line: 1995, column: 58, scope: !11274)
!11297 = !DILocation(line: 1995, column: 61, scope: !11274)
!11298 = !DILocation(line: 1995, column: 26, scope: !11274)
!11299 = !DILocation(line: 1995, column: 67, scope: !11274)
!11300 = !DILocation(line: 1995, column: 6, scope: !11274)
!11301 = !DILocation(line: 1996, column: 17, scope: !11274)
!11302 = !DILocation(line: 1996, column: 42, scope: !11274)
!11303 = !DILocation(line: 1996, column: 47, scope: !11274)
!11304 = !DILocation(line: 1996, column: 50, scope: !11274)
!11305 = !DILocation(line: 1996, column: 53, scope: !11274)
!11306 = !DILocation(line: 1996, column: 58, scope: !11274)
!11307 = !DILocation(line: 1996, column: 26, scope: !11274)
!11308 = !DILocation(line: 1996, column: 63, scope: !11274)
!11309 = !DILocation(line: 1996, column: 6, scope: !11274)
!11310 = !DILocation(line: 1997, column: 30, scope: !11274)
!11311 = !DILocation(line: 1997, column: 36, scope: !11274)
!11312 = !DILocation(line: 1997, column: 43, scope: !11274)
!11313 = !DILocation(line: 1997, column: 50, scope: !11274)
!11314 = !DILocation(line: 1997, column: 6, scope: !11274)
!11315 = !DILocation(line: 1999, column: 26, scope: !11217)
!11316 = !DILocation(line: 1999, column: 31, scope: !11217)
!11317 = !DILocation(line: 1999, column: 34, scope: !11217)
!11318 = !DILocation(line: 1999, column: 37, scope: !11217)
!11319 = !DILocation(line: 1999, column: 16, scope: !11217)
!11320 = !DILocation(line: 1999, column: 41, scope: !11217)
!11321 = !DILocation(line: 1999, column: 45, scope: !11217)
!11322 = !DILocation(line: 1999, column: 5, scope: !11217)
!11323 = !DILocation(line: 2000, column: 4, scope: !11217)
!11324 = !DILocation(line: 1974, column: 29, scope: !11212)
!11325 = !DILocation(line: 1974, column: 4, scope: !11212)
!11326 = distinct !{!11326, !11215, !11327}
!11327 = !DILocation(line: 2000, column: 4, scope: !11208)
!11328 = !DILocation(line: 2001, column: 3, scope: !11209)
!11329 = !DILocation(line: 1973, column: 38, scope: !11200)
!11330 = !DILocation(line: 1973, column: 3, scope: !11200)
!11331 = distinct !{!11331, !11206, !11332}
!11332 = !DILocation(line: 2001, column: 3, scope: !11197)
!11333 = !DILocation(line: 2002, column: 10, scope: !11187)
!11334 = !DILocation(line: 2002, column: 16, scope: !11187)
!11335 = !DILocation(line: 2002, column: 8, scope: !11187)
!11336 = !DILocation(line: 2003, column: 10, scope: !11187)
!11337 = !DILocation(line: 2003, column: 3, scope: !11187)
!11338 = !DILocation(line: 2003, column: 21, scope: !11187)
!11339 = !DILocation(line: 2003, column: 28, scope: !11187)
!11340 = !DILocation(line: 2003, column: 32, scope: !11187)
!11341 = !DILocation(line: 2003, column: 27, scope: !11187)
!11342 = !DILocation(line: 2003, column: 37, scope: !11187)
!11343 = !DILocation(line: 2004, column: 10, scope: !11187)
!11344 = !DILocation(line: 2004, column: 3, scope: !11187)
!11345 = !DILocation(line: 2004, column: 25, scope: !11187)
!11346 = !DILocation(line: 2004, column: 36, scope: !11187)
!11347 = !DILocation(line: 2004, column: 41, scope: !11187)
!11348 = !DILocation(line: 2004, column: 35, scope: !11187)
!11349 = !DILocation(line: 2004, column: 46, scope: !11187)
!11350 = !DILocation(line: 2005, column: 2, scope: !11187)
!11351 = !DILocation(line: 1970, column: 22, scope: !11182)
!11352 = !DILocation(line: 1970, column: 2, scope: !11182)
!11353 = distinct !{!11353, !11185, !11354}
!11354 = !DILocation(line: 2005, column: 2, scope: !11179)
!11355 = !DILocation(line: 2006, column: 7, scope: !11356)
!11356 = distinct !DILexicalBlock(scope: !11079, file: !1, line: 2006, column: 6)
!11357 = !DILocation(line: 2006, column: 6, scope: !11079)
!11358 = !DILocation(line: 2007, column: 16, scope: !11359)
!11359 = distinct !DILexicalBlock(scope: !11356, file: !1, line: 2006, column: 12)
!11360 = !DILocation(line: 2007, column: 21, scope: !11359)
!11361 = !DILocation(line: 2007, column: 3, scope: !11359)
!11362 = !DILocation(line: 2008, column: 24, scope: !11359)
!11363 = !DILocation(line: 2008, column: 32, scope: !11359)
!11364 = !DILocation(line: 2008, column: 39, scope: !11359)
!11365 = !DILocation(line: 2008, column: 14, scope: !11359)
!11366 = !DILocation(line: 2008, column: 47, scope: !11359)
!11367 = !DILocation(line: 2008, column: 51, scope: !11359)
!11368 = !DILocation(line: 2008, column: 3, scope: !11359)
!11369 = !DILocation(line: 2009, column: 2, scope: !11359)
!11370 = !DILocation(line: 2010, column: 25, scope: !11079)
!11371 = !DILocation(line: 2010, column: 2, scope: !11079)
!11372 = !DILocation(line: 2011, column: 9, scope: !11079)
!11373 = !DILocation(line: 2011, column: 2, scope: !11079)
!11374 = distinct !DISubprogram(name: "mesh_vert_canon", scope: !1, file: !1, line: 1766, type: !7129, scopeLine: 1767, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!11375 = !DILocalVariable(name: "vm", arg: 1, scope: !11374, file: !1, line: 1766, type: !298)
!11376 = !DILocation(line: 1766, column: 40, scope: !11374)
!11377 = !DILocalVariable(name: "i", arg: 2, scope: !11374, file: !1, line: 1766, type: !63)
!11378 = !DILocation(line: 1766, column: 48, scope: !11374)
!11379 = !DILocalVariable(name: "j", arg: 3, scope: !11374, file: !1, line: 1766, type: !63)
!11380 = !DILocation(line: 1766, column: 55, scope: !11374)
!11381 = !DILocalVariable(name: "k", arg: 4, scope: !11374, file: !1, line: 1766, type: !63)
!11382 = !DILocation(line: 1766, column: 62, scope: !11374)
!11383 = !DILocalVariable(name: "n", scope: !11374, file: !1, line: 1768, type: !63)
!11384 = !DILocation(line: 1768, column: 6, scope: !11374)
!11385 = !DILocalVariable(name: "ns", scope: !11374, file: !1, line: 1768, type: !63)
!11386 = !DILocation(line: 1768, column: 9, scope: !11374)
!11387 = !DILocalVariable(name: "ns2", scope: !11374, file: !1, line: 1768, type: !63)
!11388 = !DILocation(line: 1768, column: 13, scope: !11374)
!11389 = !DILocalVariable(name: "odd", scope: !11374, file: !1, line: 1768, type: !63)
!11390 = !DILocation(line: 1768, column: 18, scope: !11374)
!11391 = !DILocalVariable(name: "ans", scope: !11374, file: !1, line: 1769, type: !46)
!11392 = !DILocation(line: 1769, column: 11, scope: !11374)
!11393 = !DILocation(line: 1771, column: 6, scope: !11374)
!11394 = !DILocation(line: 1771, column: 10, scope: !11374)
!11395 = !DILocation(line: 1771, column: 4, scope: !11374)
!11396 = !DILocation(line: 1772, column: 7, scope: !11374)
!11397 = !DILocation(line: 1772, column: 11, scope: !11374)
!11398 = !DILocation(line: 1772, column: 5, scope: !11374)
!11399 = !DILocation(line: 1773, column: 8, scope: !11374)
!11400 = !DILocation(line: 1773, column: 11, scope: !11374)
!11401 = !DILocation(line: 1773, column: 6, scope: !11374)
!11402 = !DILocation(line: 1774, column: 8, scope: !11374)
!11403 = !DILocation(line: 1774, column: 11, scope: !11374)
!11404 = !DILocation(line: 1774, column: 6, scope: !11374)
!11405 = !DILocation(line: 1777, column: 7, scope: !11406)
!11406 = distinct !DILexicalBlock(scope: !11374, file: !1, line: 1777, column: 6)
!11407 = !DILocation(line: 1777, column: 11, scope: !11406)
!11408 = !DILocation(line: 1777, column: 14, scope: !11406)
!11409 = !DILocation(line: 1777, column: 19, scope: !11406)
!11410 = !DILocation(line: 1777, column: 16, scope: !11406)
!11411 = !DILocation(line: 1777, column: 23, scope: !11406)
!11412 = !DILocation(line: 1777, column: 26, scope: !11406)
!11413 = !DILocation(line: 1777, column: 31, scope: !11406)
!11414 = !DILocation(line: 1777, column: 28, scope: !11406)
!11415 = !DILocation(line: 1777, column: 6, scope: !11374)
!11416 = !DILocation(line: 1778, column: 19, scope: !11406)
!11417 = !DILocation(line: 1778, column: 26, scope: !11406)
!11418 = !DILocation(line: 1778, column: 29, scope: !11406)
!11419 = !DILocation(line: 1778, column: 9, scope: !11406)
!11420 = !DILocation(line: 1778, column: 7, scope: !11406)
!11421 = !DILocation(line: 1778, column: 3, scope: !11406)
!11422 = !DILocation(line: 1779, column: 11, scope: !11423)
!11423 = distinct !DILexicalBlock(scope: !11406, file: !1, line: 1779, column: 11)
!11424 = !DILocation(line: 1779, column: 16, scope: !11423)
!11425 = !DILocation(line: 1779, column: 20, scope: !11423)
!11426 = !DILocation(line: 1779, column: 26, scope: !11423)
!11427 = !DILocation(line: 1779, column: 24, scope: !11423)
!11428 = !DILocation(line: 1779, column: 13, scope: !11423)
!11429 = !DILocation(line: 1779, column: 30, scope: !11423)
!11430 = !DILocation(line: 1779, column: 33, scope: !11423)
!11431 = !DILocation(line: 1779, column: 38, scope: !11423)
!11432 = !DILocation(line: 1779, column: 35, scope: !11423)
!11433 = !DILocation(line: 1779, column: 11, scope: !11406)
!11434 = !DILocation(line: 1780, column: 19, scope: !11423)
!11435 = !DILocation(line: 1780, column: 23, scope: !11423)
!11436 = !DILocation(line: 1780, column: 26, scope: !11423)
!11437 = !DILocation(line: 1780, column: 29, scope: !11423)
!11438 = !DILocation(line: 1780, column: 9, scope: !11423)
!11439 = !DILocation(line: 1780, column: 7, scope: !11423)
!11440 = !DILocation(line: 1780, column: 3, scope: !11423)
!11441 = !DILocation(line: 1781, column: 11, scope: !11442)
!11442 = distinct !DILexicalBlock(scope: !11423, file: !1, line: 1781, column: 11)
!11443 = !DILocation(line: 1781, column: 16, scope: !11442)
!11444 = !DILocation(line: 1781, column: 13, scope: !11442)
!11445 = !DILocation(line: 1781, column: 11, scope: !11423)
!11446 = !DILocation(line: 1782, column: 19, scope: !11442)
!11447 = !DILocation(line: 1782, column: 24, scope: !11442)
!11448 = !DILocation(line: 1782, column: 28, scope: !11442)
!11449 = !DILocation(line: 1782, column: 26, scope: !11442)
!11450 = !DILocation(line: 1782, column: 30, scope: !11442)
!11451 = !DILocation(line: 1782, column: 37, scope: !11442)
!11452 = !DILocation(line: 1782, column: 35, scope: !11442)
!11453 = !DILocation(line: 1782, column: 40, scope: !11442)
!11454 = !DILocation(line: 1782, column: 43, scope: !11442)
!11455 = !DILocation(line: 1782, column: 48, scope: !11442)
!11456 = !DILocation(line: 1782, column: 46, scope: !11442)
!11457 = !DILocation(line: 1782, column: 9, scope: !11442)
!11458 = !DILocation(line: 1782, column: 7, scope: !11442)
!11459 = !DILocation(line: 1782, column: 3, scope: !11442)
!11460 = !DILocation(line: 1784, column: 19, scope: !11442)
!11461 = !DILocation(line: 1784, column: 24, scope: !11442)
!11462 = !DILocation(line: 1784, column: 26, scope: !11442)
!11463 = !DILocation(line: 1784, column: 33, scope: !11442)
!11464 = !DILocation(line: 1784, column: 31, scope: !11442)
!11465 = !DILocation(line: 1784, column: 36, scope: !11442)
!11466 = !DILocation(line: 1784, column: 41, scope: !11442)
!11467 = !DILocation(line: 1784, column: 39, scope: !11442)
!11468 = !DILocation(line: 1784, column: 44, scope: !11442)
!11469 = !DILocation(line: 1784, column: 9, scope: !11442)
!11470 = !DILocation(line: 1784, column: 7, scope: !11442)
!11471 = !DILocation(line: 1785, column: 9, scope: !11374)
!11472 = !DILocation(line: 1785, column: 2, scope: !11374)
!11473 = distinct !DISubprogram(name: "avg4", scope: !1, file: !1, line: 1839, type: !11474, scopeLine: 1842, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!11474 = !DISubroutineType(types: !11475)
!11475 = !{null, !170, !11476, !11476, !11476, !11476}
!11476 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11477, size: 64)
!11477 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !47)
!11478 = !DILocalVariable(name: "co", arg: 1, scope: !11473, file: !1, line: 1839, type: !170)
!11479 = !DILocation(line: 1839, column: 24, scope: !11473)
!11480 = !DILocalVariable(name: "v0", arg: 2, scope: !11473, file: !1, line: 1840, type: !11476)
!11481 = !DILocation(line: 1840, column: 33, scope: !11473)
!11482 = !DILocalVariable(name: "v1", arg: 3, scope: !11473, file: !1, line: 1840, type: !11476)
!11483 = !DILocation(line: 1840, column: 52, scope: !11473)
!11484 = !DILocalVariable(name: "v2", arg: 4, scope: !11473, file: !1, line: 1841, type: !11476)
!11485 = !DILocation(line: 1841, column: 33, scope: !11473)
!11486 = !DILocalVariable(name: "v3", arg: 5, scope: !11473, file: !1, line: 1841, type: !11476)
!11487 = !DILocation(line: 1841, column: 52, scope: !11473)
!11488 = !DILocation(line: 1843, column: 14, scope: !11473)
!11489 = !DILocation(line: 1843, column: 18, scope: !11473)
!11490 = !DILocation(line: 1843, column: 22, scope: !11473)
!11491 = !DILocation(line: 1843, column: 26, scope: !11473)
!11492 = !DILocation(line: 1843, column: 30, scope: !11473)
!11493 = !DILocation(line: 1843, column: 2, scope: !11473)
!11494 = !DILocation(line: 1844, column: 12, scope: !11473)
!11495 = !DILocation(line: 1844, column: 16, scope: !11473)
!11496 = !DILocation(line: 1844, column: 20, scope: !11473)
!11497 = !DILocation(line: 1844, column: 2, scope: !11473)
!11498 = !DILocation(line: 1845, column: 12, scope: !11473)
!11499 = !DILocation(line: 1845, column: 16, scope: !11473)
!11500 = !DILocation(line: 1845, column: 20, scope: !11473)
!11501 = !DILocation(line: 1845, column: 2, scope: !11473)
!11502 = !DILocation(line: 1846, column: 12, scope: !11473)
!11503 = !DILocation(line: 1846, column: 2, scope: !11473)
!11504 = !DILocation(line: 1847, column: 1, scope: !11473)
!11505 = distinct !DISubprogram(name: "sabin_gamma", scope: !1, file: !1, line: 1850, type: !11506, scopeLine: 1851, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!11506 = !DISubroutineType(types: !11507)
!11507 = !{!76, !63}
!11508 = !DILocalVariable(name: "n", arg: 1, scope: !11505, file: !1, line: 1850, type: !63)
!11509 = !DILocation(line: 1850, column: 30, scope: !11505)
!11510 = !DILocalVariable(name: "ans", scope: !11505, file: !1, line: 1852, type: !312)
!11511 = !DILocation(line: 1852, column: 9, scope: !11505)
!11512 = !DILocalVariable(name: "k", scope: !11505, file: !1, line: 1852, type: !312)
!11513 = !DILocation(line: 1852, column: 14, scope: !11505)
!11514 = !DILocalVariable(name: "k2", scope: !11505, file: !1, line: 1852, type: !312)
!11515 = !DILocation(line: 1852, column: 17, scope: !11505)
!11516 = !DILocalVariable(name: "k4", scope: !11505, file: !1, line: 1852, type: !312)
!11517 = !DILocation(line: 1852, column: 21, scope: !11505)
!11518 = !DILocalVariable(name: "k6", scope: !11505, file: !1, line: 1852, type: !312)
!11519 = !DILocation(line: 1852, column: 25, scope: !11505)
!11520 = !DILocalVariable(name: "x", scope: !11505, file: !1, line: 1852, type: !312)
!11521 = !DILocation(line: 1852, column: 29, scope: !11505)
!11522 = !DILocalVariable(name: "y", scope: !11505, file: !1, line: 1852, type: !312)
!11523 = !DILocation(line: 1852, column: 32, scope: !11505)
!11524 = !DILocation(line: 1855, column: 6, scope: !11525)
!11525 = distinct !DILexicalBlock(scope: !11505, file: !1, line: 1855, column: 6)
!11526 = !DILocation(line: 1855, column: 8, scope: !11525)
!11527 = !DILocation(line: 1855, column: 6, scope: !11505)
!11528 = !DILocation(line: 1856, column: 3, scope: !11525)
!11529 = !DILocation(line: 1857, column: 11, scope: !11530)
!11530 = distinct !DILexicalBlock(scope: !11525, file: !1, line: 1857, column: 11)
!11531 = !DILocation(line: 1857, column: 13, scope: !11530)
!11532 = !DILocation(line: 1857, column: 11, scope: !11525)
!11533 = !DILocation(line: 1858, column: 7, scope: !11530)
!11534 = !DILocation(line: 1858, column: 3, scope: !11530)
!11535 = !DILocation(line: 1859, column: 11, scope: !11536)
!11536 = distinct !DILexicalBlock(scope: !11530, file: !1, line: 1859, column: 11)
!11537 = !DILocation(line: 1859, column: 13, scope: !11536)
!11538 = !DILocation(line: 1859, column: 11, scope: !11530)
!11539 = !DILocation(line: 1860, column: 7, scope: !11536)
!11540 = !DILocation(line: 1860, column: 3, scope: !11536)
!11541 = !DILocation(line: 1861, column: 11, scope: !11542)
!11542 = distinct !DILexicalBlock(scope: !11536, file: !1, line: 1861, column: 11)
!11543 = !DILocation(line: 1861, column: 13, scope: !11542)
!11544 = !DILocation(line: 1861, column: 11, scope: !11536)
!11545 = !DILocation(line: 1862, column: 7, scope: !11542)
!11546 = !DILocation(line: 1862, column: 3, scope: !11542)
!11547 = !DILocation(line: 1863, column: 11, scope: !11548)
!11548 = distinct !DILexicalBlock(scope: !11542, file: !1, line: 1863, column: 11)
!11549 = !DILocation(line: 1863, column: 13, scope: !11548)
!11550 = !DILocation(line: 1863, column: 11, scope: !11542)
!11551 = !DILocation(line: 1864, column: 7, scope: !11548)
!11552 = !DILocation(line: 1864, column: 3, scope: !11548)
!11553 = !DILocation(line: 1866, column: 26, scope: !11554)
!11554 = distinct !DILexicalBlock(scope: !11548, file: !1, line: 1865, column: 7)
!11555 = !DILocation(line: 1866, column: 18, scope: !11554)
!11556 = !DILocation(line: 1866, column: 16, scope: !11554)
!11557 = !DILocation(line: 1866, column: 7, scope: !11554)
!11558 = !DILocation(line: 1866, column: 5, scope: !11554)
!11559 = !DILocation(line: 1869, column: 8, scope: !11554)
!11560 = !DILocation(line: 1869, column: 12, scope: !11554)
!11561 = !DILocation(line: 1869, column: 10, scope: !11554)
!11562 = !DILocation(line: 1869, column: 6, scope: !11554)
!11563 = !DILocation(line: 1870, column: 8, scope: !11554)
!11564 = !DILocation(line: 1870, column: 13, scope: !11554)
!11565 = !DILocation(line: 1870, column: 11, scope: !11554)
!11566 = !DILocation(line: 1870, column: 6, scope: !11554)
!11567 = !DILocation(line: 1871, column: 8, scope: !11554)
!11568 = !DILocation(line: 1871, column: 13, scope: !11554)
!11569 = !DILocation(line: 1871, column: 11, scope: !11554)
!11570 = !DILocation(line: 1871, column: 6, scope: !11554)
!11571 = !DILocation(line: 1872, column: 33, scope: !11554)
!11572 = !DILocation(line: 1872, column: 31, scope: !11554)
!11573 = !DILocation(line: 1872, column: 46, scope: !11554)
!11574 = !DILocation(line: 1872, column: 44, scope: !11554)
!11575 = !DILocation(line: 1872, column: 36, scope: !11554)
!11576 = !DILocation(line: 1872, column: 59, scope: !11554)
!11577 = !DILocation(line: 1872, column: 57, scope: !11554)
!11578 = !DILocation(line: 1872, column: 49, scope: !11554)
!11579 = !DILocation(line: 1872, column: 62, scope: !11554)
!11580 = !DILocation(line: 1872, column: 21, scope: !11554)
!11581 = !DILocation(line: 1872, column: 19, scope: !11554)
!11582 = !DILocation(line: 1872, column: 78, scope: !11554)
!11583 = !DILocation(line: 1872, column: 76, scope: !11554)
!11584 = !DILocation(line: 1872, column: 70, scope: !11554)
!11585 = !DILocation(line: 1872, column: 7, scope: !11554)
!11586 = !DILocation(line: 1872, column: 5, scope: !11554)
!11587 = !DILocation(line: 1874, column: 27, scope: !11554)
!11588 = !DILocation(line: 1874, column: 25, scope: !11554)
!11589 = !DILocation(line: 1874, column: 60, scope: !11554)
!11590 = !DILocation(line: 1874, column: 58, scope: !11554)
!11591 = !DILocation(line: 1874, column: 63, scope: !11554)
!11592 = !DILocation(line: 1874, column: 50, scope: !11554)
!11593 = !DILocation(line: 1874, column: 73, scope: !11554)
!11594 = !DILocation(line: 1874, column: 71, scope: !11554)
!11595 = !DILocation(line: 1874, column: 29, scope: !11554)
!11596 = !DILocation(line: 1874, column: 5, scope: !11554)
!11597 = !DILocation(line: 1875, column: 10, scope: !11554)
!11598 = !DILocation(line: 1875, column: 14, scope: !11554)
!11599 = !DILocation(line: 1875, column: 12, scope: !11554)
!11600 = !DILocation(line: 1875, column: 24, scope: !11554)
!11601 = !DILocation(line: 1875, column: 22, scope: !11554)
!11602 = !DILocation(line: 1875, column: 16, scope: !11554)
!11603 = !DILocation(line: 1875, column: 27, scope: !11554)
!11604 = !DILocation(line: 1875, column: 37, scope: !11554)
!11605 = !DILocation(line: 1875, column: 41, scope: !11554)
!11606 = !DILocation(line: 1875, column: 39, scope: !11554)
!11607 = !DILocation(line: 1875, column: 46, scope: !11554)
!11608 = !DILocation(line: 1875, column: 50, scope: !11554)
!11609 = !DILocation(line: 1875, column: 48, scope: !11554)
!11610 = !DILocation(line: 1875, column: 52, scope: !11554)
!11611 = !DILocation(line: 1875, column: 43, scope: !11554)
!11612 = !DILocation(line: 1875, column: 34, scope: !11554)
!11613 = !DILocation(line: 1875, column: 7, scope: !11554)
!11614 = !DILocation(line: 1877, column: 16, scope: !11505)
!11615 = !DILocation(line: 1877, column: 9, scope: !11505)
!11616 = !DILocation(line: 1877, column: 2, scope: !11505)
!11617 = !DILocation(line: 1878, column: 1, scope: !11505)
!11618 = distinct !DISubprogram(name: "fill_vmesh_fracs", scope: !1, file: !1, line: 1881, type: !11619, scopeLine: 1882, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!11619 = !DISubroutineType(types: !11620)
!11620 = !{null, !298, !170, !63}
!11621 = !DILocalVariable(name: "vm", arg: 1, scope: !11618, file: !1, line: 1881, type: !298)
!11622 = !DILocation(line: 1881, column: 37, scope: !11618)
!11623 = !DILocalVariable(name: "frac", arg: 2, scope: !11618, file: !1, line: 1881, type: !170)
!11624 = !DILocation(line: 1881, column: 48, scope: !11618)
!11625 = !DILocalVariable(name: "i", arg: 3, scope: !11618, file: !1, line: 1881, type: !63)
!11626 = !DILocation(line: 1881, column: 58, scope: !11618)
!11627 = !DILocalVariable(name: "k", scope: !11618, file: !1, line: 1883, type: !63)
!11628 = !DILocation(line: 1883, column: 6, scope: !11618)
!11629 = !DILocalVariable(name: "ns", scope: !11618, file: !1, line: 1883, type: !63)
!11630 = !DILocation(line: 1883, column: 9, scope: !11618)
!11631 = !DILocalVariable(name: "total", scope: !11618, file: !1, line: 1884, type: !76)
!11632 = !DILocation(line: 1884, column: 8, scope: !11618)
!11633 = !DILocation(line: 1886, column: 7, scope: !11618)
!11634 = !DILocation(line: 1886, column: 11, scope: !11618)
!11635 = !DILocation(line: 1886, column: 5, scope: !11618)
!11636 = !DILocation(line: 1887, column: 2, scope: !11618)
!11637 = !DILocation(line: 1887, column: 10, scope: !11618)
!11638 = !DILocation(line: 1888, column: 9, scope: !11639)
!11639 = distinct !DILexicalBlock(scope: !11618, file: !1, line: 1888, column: 2)
!11640 = !DILocation(line: 1888, column: 7, scope: !11639)
!11641 = !DILocation(line: 1888, column: 14, scope: !11642)
!11642 = distinct !DILexicalBlock(scope: !11639, file: !1, line: 1888, column: 2)
!11643 = !DILocation(line: 1888, column: 18, scope: !11642)
!11644 = !DILocation(line: 1888, column: 16, scope: !11642)
!11645 = !DILocation(line: 1888, column: 2, scope: !11639)
!11646 = !DILocation(line: 1889, column: 31, scope: !11647)
!11647 = distinct !DILexicalBlock(scope: !11642, file: !1, line: 1888, column: 27)
!11648 = !DILocation(line: 1889, column: 35, scope: !11647)
!11649 = !DILocation(line: 1889, column: 41, scope: !11647)
!11650 = !DILocation(line: 1889, column: 21, scope: !11647)
!11651 = !DILocation(line: 1889, column: 45, scope: !11647)
!11652 = !DILocation(line: 1889, column: 59, scope: !11647)
!11653 = !DILocation(line: 1889, column: 63, scope: !11647)
!11654 = !DILocation(line: 1889, column: 69, scope: !11647)
!11655 = !DILocation(line: 1889, column: 71, scope: !11647)
!11656 = !DILocation(line: 1889, column: 49, scope: !11647)
!11657 = !DILocation(line: 1889, column: 77, scope: !11647)
!11658 = !DILocation(line: 1889, column: 12, scope: !11647)
!11659 = !DILocation(line: 1889, column: 9, scope: !11647)
!11660 = !DILocation(line: 1890, column: 17, scope: !11647)
!11661 = !DILocation(line: 1890, column: 3, scope: !11647)
!11662 = !DILocation(line: 1890, column: 8, scope: !11647)
!11663 = !DILocation(line: 1890, column: 10, scope: !11647)
!11664 = !DILocation(line: 1890, column: 15, scope: !11647)
!11665 = !DILocation(line: 1891, column: 2, scope: !11647)
!11666 = !DILocation(line: 1888, column: 23, scope: !11642)
!11667 = !DILocation(line: 1888, column: 2, scope: !11642)
!11668 = distinct !{!11668, !11645, !11669}
!11669 = !DILocation(line: 1891, column: 2, scope: !11639)
!11670 = !DILocation(line: 1892, column: 6, scope: !11671)
!11671 = distinct !DILexicalBlock(scope: !11618, file: !1, line: 1892, column: 6)
!11672 = !DILocation(line: 1892, column: 12, scope: !11671)
!11673 = !DILocation(line: 1892, column: 6, scope: !11618)
!11674 = !DILocation(line: 1893, column: 10, scope: !11675)
!11675 = distinct !DILexicalBlock(scope: !11676, file: !1, line: 1893, column: 3)
!11676 = distinct !DILexicalBlock(scope: !11671, file: !1, line: 1892, column: 29)
!11677 = !DILocation(line: 1893, column: 8, scope: !11675)
!11678 = !DILocation(line: 1893, column: 15, scope: !11679)
!11679 = distinct !DILexicalBlock(scope: !11675, file: !1, line: 1893, column: 3)
!11680 = !DILocation(line: 1893, column: 20, scope: !11679)
!11681 = !DILocation(line: 1893, column: 17, scope: !11679)
!11682 = !DILocation(line: 1893, column: 3, scope: !11675)
!11683 = !DILocation(line: 1894, column: 15, scope: !11679)
!11684 = !DILocation(line: 1894, column: 4, scope: !11679)
!11685 = !DILocation(line: 1894, column: 9, scope: !11679)
!11686 = !DILocation(line: 1894, column: 12, scope: !11679)
!11687 = !DILocation(line: 1893, column: 25, scope: !11679)
!11688 = !DILocation(line: 1893, column: 3, scope: !11679)
!11689 = distinct !{!11689, !11682, !11690}
!11690 = !DILocation(line: 1894, column: 15, scope: !11675)
!11691 = !DILocation(line: 1895, column: 2, scope: !11676)
!11692 = !DILocation(line: 1896, column: 1, scope: !11618)
!11693 = distinct !DISubprogram(name: "fill_profile_fracs", scope: !1, file: !1, line: 1899, type: !11694, scopeLine: 1900, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!11694 = !DISubroutineType(types: !11695)
!11695 = !{null, !801, !121, !170, !63}
!11696 = !DILocalVariable(name: "bp", arg: 1, scope: !11693, file: !1, line: 1899, type: !801)
!11697 = !DILocation(line: 1899, column: 45, scope: !11693)
!11698 = !DILocalVariable(name: "bndv", arg: 2, scope: !11693, file: !1, line: 1899, type: !121)
!11699 = !DILocation(line: 1899, column: 60, scope: !11693)
!11700 = !DILocalVariable(name: "frac", arg: 3, scope: !11693, file: !1, line: 1899, type: !170)
!11701 = !DILocation(line: 1899, column: 73, scope: !11693)
!11702 = !DILocalVariable(name: "ns", arg: 4, scope: !11693, file: !1, line: 1899, type: !63)
!11703 = !DILocation(line: 1899, column: 83, scope: !11693)
!11704 = !DILocalVariable(name: "k", scope: !11693, file: !1, line: 1901, type: !63)
!11705 = !DILocation(line: 1901, column: 6, scope: !11693)
!11706 = !DILocalVariable(name: "co", scope: !11693, file: !1, line: 1902, type: !75)
!11707 = !DILocation(line: 1902, column: 8, scope: !11693)
!11708 = !DILocalVariable(name: "nextco", scope: !11693, file: !1, line: 1902, type: !75)
!11709 = !DILocation(line: 1902, column: 15, scope: !11693)
!11710 = !DILocalVariable(name: "total", scope: !11693, file: !1, line: 1903, type: !76)
!11711 = !DILocation(line: 1903, column: 8, scope: !11693)
!11712 = !DILocation(line: 1905, column: 2, scope: !11693)
!11713 = !DILocation(line: 1905, column: 10, scope: !11693)
!11714 = !DILocation(line: 1906, column: 13, scope: !11693)
!11715 = !DILocation(line: 1906, column: 17, scope: !11693)
!11716 = !DILocation(line: 1906, column: 23, scope: !11693)
!11717 = !DILocation(line: 1906, column: 26, scope: !11693)
!11718 = !DILocation(line: 1906, column: 2, scope: !11693)
!11719 = !DILocation(line: 1907, column: 9, scope: !11720)
!11720 = distinct !DILexicalBlock(scope: !11693, file: !1, line: 1907, column: 2)
!11721 = !DILocation(line: 1907, column: 7, scope: !11720)
!11722 = !DILocation(line: 1907, column: 14, scope: !11723)
!11723 = distinct !DILexicalBlock(scope: !11720, file: !1, line: 1907, column: 2)
!11724 = !DILocation(line: 1907, column: 18, scope: !11723)
!11725 = !DILocation(line: 1907, column: 16, scope: !11723)
!11726 = !DILocation(line: 1907, column: 2, scope: !11720)
!11727 = !DILocation(line: 1908, column: 21, scope: !11728)
!11728 = distinct !DILexicalBlock(scope: !11723, file: !1, line: 1907, column: 27)
!11729 = !DILocation(line: 1908, column: 26, scope: !11728)
!11730 = !DILocation(line: 1908, column: 32, scope: !11728)
!11731 = !DILocation(line: 1908, column: 41, scope: !11728)
!11732 = !DILocation(line: 1908, column: 43, scope: !11728)
!11733 = !DILocation(line: 1908, column: 48, scope: !11728)
!11734 = !DILocation(line: 1908, column: 52, scope: !11728)
!11735 = !DILocation(line: 1908, column: 3, scope: !11728)
!11736 = !DILocation(line: 1909, column: 21, scope: !11728)
!11737 = !DILocation(line: 1909, column: 25, scope: !11728)
!11738 = !DILocation(line: 1909, column: 12, scope: !11728)
!11739 = !DILocation(line: 1909, column: 9, scope: !11728)
!11740 = !DILocation(line: 1910, column: 17, scope: !11728)
!11741 = !DILocation(line: 1910, column: 3, scope: !11728)
!11742 = !DILocation(line: 1910, column: 8, scope: !11728)
!11743 = !DILocation(line: 1910, column: 10, scope: !11728)
!11744 = !DILocation(line: 1910, column: 15, scope: !11728)
!11745 = !DILocation(line: 1911, column: 14, scope: !11728)
!11746 = !DILocation(line: 1911, column: 18, scope: !11728)
!11747 = !DILocation(line: 1911, column: 3, scope: !11728)
!11748 = !DILocation(line: 1912, column: 2, scope: !11728)
!11749 = !DILocation(line: 1907, column: 23, scope: !11723)
!11750 = !DILocation(line: 1907, column: 2, scope: !11723)
!11751 = distinct !{!11751, !11726, !11752}
!11752 = !DILocation(line: 1912, column: 2, scope: !11720)
!11753 = !DILocation(line: 1913, column: 6, scope: !11754)
!11754 = distinct !DILexicalBlock(scope: !11693, file: !1, line: 1913, column: 6)
!11755 = !DILocation(line: 1913, column: 12, scope: !11754)
!11756 = !DILocation(line: 1913, column: 6, scope: !11693)
!11757 = !DILocation(line: 1914, column: 10, scope: !11758)
!11758 = distinct !DILexicalBlock(scope: !11759, file: !1, line: 1914, column: 3)
!11759 = distinct !DILexicalBlock(scope: !11754, file: !1, line: 1913, column: 29)
!11760 = !DILocation(line: 1914, column: 8, scope: !11758)
!11761 = !DILocation(line: 1914, column: 15, scope: !11762)
!11762 = distinct !DILexicalBlock(scope: !11758, file: !1, line: 1914, column: 3)
!11763 = !DILocation(line: 1914, column: 20, scope: !11762)
!11764 = !DILocation(line: 1914, column: 17, scope: !11762)
!11765 = !DILocation(line: 1914, column: 3, scope: !11758)
!11766 = !DILocation(line: 1915, column: 15, scope: !11767)
!11767 = distinct !DILexicalBlock(scope: !11762, file: !1, line: 1914, column: 29)
!11768 = !DILocation(line: 1915, column: 4, scope: !11767)
!11769 = !DILocation(line: 1915, column: 9, scope: !11767)
!11770 = !DILocation(line: 1915, column: 12, scope: !11767)
!11771 = !DILocation(line: 1916, column: 3, scope: !11767)
!11772 = !DILocation(line: 1914, column: 25, scope: !11762)
!11773 = !DILocation(line: 1914, column: 3, scope: !11762)
!11774 = distinct !{!11774, !11765, !11775}
!11775 = !DILocation(line: 1916, column: 3, scope: !11758)
!11776 = !DILocation(line: 1917, column: 2, scope: !11759)
!11777 = !DILocation(line: 1918, column: 1, scope: !11693)
!11778 = distinct !DISubprogram(name: "interp_range", scope: !1, file: !1, line: 1922, type: !11779, scopeLine: 1923, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!11779 = !DISubroutineType(types: !11780)
!11780 = !{!63, !1865, !63, !459, !170}
!11781 = !DILocalVariable(name: "frac", arg: 1, scope: !11778, file: !1, line: 1922, type: !1865)
!11782 = !DILocation(line: 1922, column: 38, scope: !11778)
!11783 = !DILocalVariable(name: "n", arg: 2, scope: !11778, file: !1, line: 1922, type: !63)
!11784 = !DILocation(line: 1922, column: 48, scope: !11778)
!11785 = !DILocalVariable(name: "f", arg: 3, scope: !11778, file: !1, line: 1922, type: !459)
!11786 = !DILocation(line: 1922, column: 63, scope: !11778)
!11787 = !DILocalVariable(name: "r_rest", arg: 4, scope: !11778, file: !1, line: 1922, type: !170)
!11788 = !DILocation(line: 1922, column: 73, scope: !11778)
!11789 = !DILocalVariable(name: "i", scope: !11778, file: !1, line: 1924, type: !63)
!11790 = !DILocation(line: 1924, column: 6, scope: !11778)
!11791 = !DILocalVariable(name: "rest", scope: !11778, file: !1, line: 1925, type: !76)
!11792 = !DILocation(line: 1925, column: 8, scope: !11778)
!11793 = !DILocation(line: 1928, column: 9, scope: !11794)
!11794 = distinct !DILexicalBlock(scope: !11778, file: !1, line: 1928, column: 2)
!11795 = !DILocation(line: 1928, column: 7, scope: !11794)
!11796 = !DILocation(line: 1928, column: 14, scope: !11797)
!11797 = distinct !DILexicalBlock(scope: !11794, file: !1, line: 1928, column: 2)
!11798 = !DILocation(line: 1928, column: 18, scope: !11797)
!11799 = !DILocation(line: 1928, column: 16, scope: !11797)
!11800 = !DILocation(line: 1928, column: 2, scope: !11794)
!11801 = !DILocation(line: 1929, column: 7, scope: !11802)
!11802 = distinct !DILexicalBlock(scope: !11803, file: !1, line: 1929, column: 7)
!11803 = distinct !DILexicalBlock(scope: !11797, file: !1, line: 1928, column: 26)
!11804 = !DILocation(line: 1929, column: 12, scope: !11802)
!11805 = !DILocation(line: 1929, column: 17, scope: !11802)
!11806 = !DILocation(line: 1929, column: 19, scope: !11802)
!11807 = !DILocation(line: 1929, column: 9, scope: !11802)
!11808 = !DILocation(line: 1929, column: 7, scope: !11803)
!11809 = !DILocation(line: 1930, column: 11, scope: !11810)
!11810 = distinct !DILexicalBlock(scope: !11802, file: !1, line: 1929, column: 25)
!11811 = !DILocation(line: 1930, column: 15, scope: !11810)
!11812 = !DILocation(line: 1930, column: 20, scope: !11810)
!11813 = !DILocation(line: 1930, column: 13, scope: !11810)
!11814 = !DILocation(line: 1930, column: 9, scope: !11810)
!11815 = !DILocation(line: 1931, column: 8, scope: !11816)
!11816 = distinct !DILexicalBlock(scope: !11810, file: !1, line: 1931, column: 8)
!11817 = !DILocation(line: 1931, column: 13, scope: !11816)
!11818 = !DILocation(line: 1931, column: 8, scope: !11810)
!11819 = !DILocation(line: 1932, column: 6, scope: !11816)
!11820 = !DILocation(line: 1932, column: 13, scope: !11816)
!11821 = !DILocation(line: 1932, column: 5, scope: !11816)
!11822 = !DILocation(line: 1934, column: 15, scope: !11816)
!11823 = !DILocation(line: 1934, column: 23, scope: !11816)
!11824 = !DILocation(line: 1934, column: 28, scope: !11816)
!11825 = !DILocation(line: 1934, column: 30, scope: !11816)
!11826 = !DILocation(line: 1934, column: 37, scope: !11816)
!11827 = !DILocation(line: 1934, column: 42, scope: !11816)
!11828 = !DILocation(line: 1934, column: 35, scope: !11816)
!11829 = !DILocation(line: 1934, column: 20, scope: !11816)
!11830 = !DILocation(line: 1934, column: 6, scope: !11816)
!11831 = !DILocation(line: 1934, column: 13, scope: !11816)
!11832 = !DILocation(line: 1935, column: 8, scope: !11833)
!11833 = distinct !DILexicalBlock(scope: !11810, file: !1, line: 1935, column: 8)
!11834 = !DILocation(line: 1935, column: 13, scope: !11833)
!11835 = !DILocation(line: 1935, column: 15, scope: !11833)
!11836 = !DILocation(line: 1935, column: 10, scope: !11833)
!11837 = !DILocation(line: 1935, column: 19, scope: !11833)
!11838 = !DILocation(line: 1935, column: 23, scope: !11833)
!11839 = !DILocation(line: 1935, column: 22, scope: !11833)
!11840 = !DILocation(line: 1935, column: 30, scope: !11833)
!11841 = !DILocation(line: 1935, column: 8, scope: !11810)
!11842 = !DILocation(line: 1936, column: 9, scope: !11843)
!11843 = distinct !DILexicalBlock(scope: !11833, file: !1, line: 1935, column: 39)
!11844 = !DILocation(line: 1936, column: 7, scope: !11843)
!11845 = !DILocation(line: 1937, column: 6, scope: !11843)
!11846 = !DILocation(line: 1937, column: 13, scope: !11843)
!11847 = !DILocation(line: 1938, column: 4, scope: !11843)
!11848 = !DILocation(line: 1939, column: 11, scope: !11810)
!11849 = !DILocation(line: 1939, column: 4, scope: !11810)
!11850 = !DILocation(line: 1941, column: 2, scope: !11803)
!11851 = !DILocation(line: 1928, column: 22, scope: !11797)
!11852 = !DILocation(line: 1928, column: 2, scope: !11797)
!11853 = distinct !{!11853, !11800, !11854}
!11854 = !DILocation(line: 1941, column: 2, scope: !11794)
!11855 = !DILocation(line: 1942, column: 3, scope: !11778)
!11856 = !DILocation(line: 1942, column: 10, scope: !11778)
!11857 = !DILocation(line: 1943, column: 9, scope: !11778)
!11858 = !DILocation(line: 1943, column: 2, scope: !11778)
!11859 = !DILocation(line: 1944, column: 1, scope: !11778)
!11860 = distinct !DISubprogram(name: "vmesh_center", scope: !1, file: !1, line: 1821, type: !11861, scopeLine: 1822, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!11861 = !DISubroutineType(types: !11862)
!11862 = !{null, !298, !170}
!11863 = !DILocalVariable(name: "vm", arg: 1, scope: !11860, file: !1, line: 1821, type: !298)
!11864 = !DILocation(line: 1821, column: 33, scope: !11860)
!11865 = !DILocalVariable(name: "r_cent", arg: 2, scope: !11860, file: !1, line: 1821, type: !170)
!11866 = !DILocation(line: 1821, column: 43, scope: !11860)
!11867 = !DILocalVariable(name: "n", scope: !11860, file: !1, line: 1823, type: !63)
!11868 = !DILocation(line: 1823, column: 6, scope: !11860)
!11869 = !DILocalVariable(name: "ns2", scope: !11860, file: !1, line: 1823, type: !63)
!11870 = !DILocation(line: 1823, column: 9, scope: !11860)
!11871 = !DILocalVariable(name: "i", scope: !11860, file: !1, line: 1823, type: !63)
!11872 = !DILocation(line: 1823, column: 14, scope: !11860)
!11873 = !DILocation(line: 1825, column: 6, scope: !11860)
!11874 = !DILocation(line: 1825, column: 10, scope: !11860)
!11875 = !DILocation(line: 1825, column: 4, scope: !11860)
!11876 = !DILocation(line: 1826, column: 8, scope: !11860)
!11877 = !DILocation(line: 1826, column: 12, scope: !11860)
!11878 = !DILocation(line: 1826, column: 16, scope: !11860)
!11879 = !DILocation(line: 1826, column: 6, scope: !11860)
!11880 = !DILocation(line: 1827, column: 6, scope: !11881)
!11881 = distinct !DILexicalBlock(scope: !11860, file: !1, line: 1827, column: 6)
!11882 = !DILocation(line: 1827, column: 10, scope: !11881)
!11883 = !DILocation(line: 1827, column: 14, scope: !11881)
!11884 = !DILocation(line: 1827, column: 6, scope: !11860)
!11885 = !DILocation(line: 1828, column: 11, scope: !11886)
!11886 = distinct !DILexicalBlock(scope: !11881, file: !1, line: 1827, column: 19)
!11887 = !DILocation(line: 1828, column: 3, scope: !11886)
!11888 = !DILocation(line: 1829, column: 10, scope: !11889)
!11889 = distinct !DILexicalBlock(scope: !11886, file: !1, line: 1829, column: 3)
!11890 = !DILocation(line: 1829, column: 8, scope: !11889)
!11891 = !DILocation(line: 1829, column: 15, scope: !11892)
!11892 = distinct !DILexicalBlock(scope: !11889, file: !1, line: 1829, column: 3)
!11893 = !DILocation(line: 1829, column: 19, scope: !11892)
!11894 = !DILocation(line: 1829, column: 17, scope: !11892)
!11895 = !DILocation(line: 1829, column: 3, scope: !11889)
!11896 = !DILocation(line: 1830, column: 14, scope: !11897)
!11897 = distinct !DILexicalBlock(scope: !11892, file: !1, line: 1829, column: 27)
!11898 = !DILocation(line: 1830, column: 32, scope: !11897)
!11899 = !DILocation(line: 1830, column: 36, scope: !11897)
!11900 = !DILocation(line: 1830, column: 39, scope: !11897)
!11901 = !DILocation(line: 1830, column: 44, scope: !11897)
!11902 = !DILocation(line: 1830, column: 22, scope: !11897)
!11903 = !DILocation(line: 1830, column: 50, scope: !11897)
!11904 = !DILocation(line: 1830, column: 4, scope: !11897)
!11905 = !DILocation(line: 1831, column: 3, scope: !11897)
!11906 = !DILocation(line: 1829, column: 23, scope: !11892)
!11907 = !DILocation(line: 1829, column: 3, scope: !11892)
!11908 = distinct !{!11908, !11895, !11909}
!11909 = !DILocation(line: 1831, column: 3, scope: !11889)
!11910 = !DILocation(line: 1832, column: 13, scope: !11886)
!11911 = !DILocation(line: 1832, column: 36, scope: !11886)
!11912 = !DILocation(line: 1832, column: 28, scope: !11886)
!11913 = !DILocation(line: 1832, column: 26, scope: !11886)
!11914 = !DILocation(line: 1832, column: 3, scope: !11886)
!11915 = !DILocation(line: 1833, column: 2, scope: !11886)
!11916 = !DILocation(line: 1835, column: 14, scope: !11917)
!11917 = distinct !DILexicalBlock(scope: !11881, file: !1, line: 1834, column: 7)
!11918 = !DILocation(line: 1835, column: 32, scope: !11917)
!11919 = !DILocation(line: 1835, column: 39, scope: !11917)
!11920 = !DILocation(line: 1835, column: 44, scope: !11917)
!11921 = !DILocation(line: 1835, column: 22, scope: !11917)
!11922 = !DILocation(line: 1835, column: 50, scope: !11917)
!11923 = !DILocation(line: 1835, column: 3, scope: !11917)
!11924 = !DILocation(line: 1837, column: 1, scope: !11860)
!11925 = distinct !DISubprogram(name: "len_squared_v3", scope: !4142, file: !4142, line: 671, type: !7052, scopeLine: 672, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!11926 = !DILocalVariable(name: "v", arg: 1, scope: !11925, file: !4142, line: 671, type: !1865)
!11927 = !DILocation(line: 671, column: 42, scope: !11925)
!11928 = !DILocation(line: 673, column: 9, scope: !11925)
!11929 = !DILocation(line: 673, column: 16, scope: !11925)
!11930 = !DILocation(line: 673, column: 14, scope: !11925)
!11931 = !DILocation(line: 673, column: 23, scope: !11925)
!11932 = !DILocation(line: 673, column: 30, scope: !11925)
!11933 = !DILocation(line: 673, column: 28, scope: !11925)
!11934 = !DILocation(line: 673, column: 21, scope: !11925)
!11935 = !DILocation(line: 673, column: 37, scope: !11925)
!11936 = !DILocation(line: 673, column: 44, scope: !11925)
!11937 = !DILocation(line: 673, column: 42, scope: !11925)
!11938 = !DILocation(line: 673, column: 35, scope: !11925)
!11939 = !DILocation(line: 673, column: 2, scope: !11925)
!11940 = distinct !DISubprogram(name: "zero_v2", scope: !4142, file: !4142, line: 37, type: !6482, scopeLine: 38, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!11941 = !DILocalVariable(name: "r", arg: 1, scope: !11940, file: !4142, line: 37, type: !170)
!11942 = !DILocation(line: 37, column: 28, scope: !11940)
!11943 = !DILocation(line: 39, column: 2, scope: !11940)
!11944 = !DILocation(line: 39, column: 7, scope: !11940)
!11945 = !DILocation(line: 40, column: 2, scope: !11940)
!11946 = !DILocation(line: 40, column: 7, scope: !11940)
!11947 = !DILocation(line: 41, column: 1, scope: !11940)
!11948 = distinct !DISubprogram(name: "add_v2_v2", scope: !4142, file: !4142, line: 284, type: !6465, scopeLine: 285, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!11949 = !DILocalVariable(name: "r", arg: 1, scope: !11948, file: !4142, line: 284, type: !170)
!11950 = !DILocation(line: 284, column: 30, scope: !11948)
!11951 = !DILocalVariable(name: "a", arg: 2, scope: !11948, file: !4142, line: 284, type: !1865)
!11952 = !DILocation(line: 284, column: 48, scope: !11948)
!11953 = !DILocation(line: 286, column: 10, scope: !11948)
!11954 = !DILocation(line: 286, column: 2, scope: !11948)
!11955 = !DILocation(line: 286, column: 7, scope: !11948)
!11956 = !DILocation(line: 287, column: 10, scope: !11948)
!11957 = !DILocation(line: 287, column: 2, scope: !11948)
!11958 = !DILocation(line: 287, column: 7, scope: !11948)
!11959 = !DILocation(line: 288, column: 1, scope: !11948)
!11960 = distinct !DISubprogram(name: "mul_v2_fl", scope: !4142, file: !4142, line: 380, type: !10056, scopeLine: 381, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!11961 = !DILocalVariable(name: "r", arg: 1, scope: !11960, file: !4142, line: 380, type: !170)
!11962 = !DILocation(line: 380, column: 30, scope: !11960)
!11963 = !DILocalVariable(name: "f", arg: 2, scope: !11960, file: !4142, line: 380, type: !76)
!11964 = !DILocation(line: 380, column: 42, scope: !11960)
!11965 = !DILocation(line: 382, column: 10, scope: !11960)
!11966 = !DILocation(line: 382, column: 2, scope: !11960)
!11967 = !DILocation(line: 382, column: 7, scope: !11960)
!11968 = !DILocation(line: 383, column: 10, scope: !11960)
!11969 = !DILocation(line: 383, column: 2, scope: !11960)
!11970 = !DILocation(line: 383, column: 7, scope: !11960)
!11971 = !DILocation(line: 384, column: 1, scope: !11960)
!11972 = distinct !DISubprogram(name: "copy_v2_v2", scope: !4142, file: !4142, line: 58, type: !6465, scopeLine: 59, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!11973 = !DILocalVariable(name: "r", arg: 1, scope: !11972, file: !4142, line: 58, type: !170)
!11974 = !DILocation(line: 58, column: 31, scope: !11972)
!11975 = !DILocalVariable(name: "a", arg: 2, scope: !11972, file: !4142, line: 58, type: !1865)
!11976 = !DILocation(line: 58, column: 49, scope: !11972)
!11977 = !DILocation(line: 60, column: 9, scope: !11972)
!11978 = !DILocation(line: 60, column: 2, scope: !11972)
!11979 = !DILocation(line: 60, column: 7, scope: !11972)
!11980 = !DILocation(line: 61, column: 9, scope: !11972)
!11981 = !DILocation(line: 61, column: 2, scope: !11972)
!11982 = !DILocation(line: 61, column: 7, scope: !11972)
!11983 = !DILocation(line: 62, column: 1, scope: !11972)
!11984 = distinct !DISubprogram(name: "BM_edge_is_manifold", scope: !4202, file: !4202, line: 86, type: !4444, scopeLine: 87, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!11985 = !DILocalVariable(name: "e", arg: 1, scope: !11984, file: !4202, line: 86, type: !4446)
!11986 = !DILocation(line: 86, column: 51, scope: !11984)
!11987 = !DILocalVariable(name: "l", scope: !11984, file: !4202, line: 88, type: !11988)
!11988 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11989, size: 64)
!11989 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !104)
!11990 = !DILocation(line: 88, column: 16, scope: !11984)
!11991 = !DILocation(line: 88, column: 20, scope: !11984)
!11992 = !DILocation(line: 88, column: 23, scope: !11984)
!11993 = !DILocation(line: 89, column: 10, scope: !11984)
!11994 = !DILocation(line: 89, column: 12, scope: !11984)
!11995 = !DILocation(line: 89, column: 16, scope: !11984)
!11996 = !DILocation(line: 89, column: 19, scope: !11984)
!11997 = !DILocation(line: 89, column: 34, scope: !11984)
!11998 = !DILocation(line: 89, column: 31, scope: !11984)
!11999 = !DILocation(line: 89, column: 37, scope: !11984)
!12000 = !DILocation(line: 90, column: 16, scope: !11984)
!12001 = !DILocation(line: 90, column: 19, scope: !11984)
!12002 = !DILocation(line: 90, column: 32, scope: !11984)
!12003 = !DILocation(line: 90, column: 47, scope: !11984)
!12004 = !DILocation(line: 90, column: 44, scope: !11984)
!12005 = !DILocation(line: 0, scope: !11984)
!12006 = !DILocation(line: 89, column: 9, scope: !11984)
!12007 = !DILocation(line: 89, column: 2, scope: !11984)
!12008 = distinct !DISubprogram(name: "bev_create_quad_straddle", scope: !1, file: !1, line: 496, type: !12009, scopeLine: 498, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!12009 = !DISubroutineType(types: !12010)
!12010 = !{!141, !321, !51, !51, !51, !51, !141, !141, !63, !152}
!12011 = !DILocalVariable(name: "bm", arg: 1, scope: !12008, file: !1, line: 496, type: !321)
!12012 = !DILocation(line: 496, column: 48, scope: !12008)
!12013 = !DILocalVariable(name: "v1", arg: 2, scope: !12008, file: !1, line: 496, type: !51)
!12014 = !DILocation(line: 496, column: 60, scope: !12008)
!12015 = !DILocalVariable(name: "v2", arg: 3, scope: !12008, file: !1, line: 496, type: !51)
!12016 = !DILocation(line: 496, column: 72, scope: !12008)
!12017 = !DILocalVariable(name: "v3", arg: 4, scope: !12008, file: !1, line: 496, type: !51)
!12018 = !DILocation(line: 496, column: 84, scope: !12008)
!12019 = !DILocalVariable(name: "v4", arg: 5, scope: !12008, file: !1, line: 496, type: !51)
!12020 = !DILocation(line: 496, column: 96, scope: !12008)
!12021 = !DILocalVariable(name: "f1", arg: 6, scope: !12008, file: !1, line: 497, type: !141)
!12022 = !DILocation(line: 497, column: 17, scope: !12008)
!12023 = !DILocalVariable(name: "f2", arg: 7, scope: !12008, file: !1, line: 497, type: !141)
!12024 = !DILocation(line: 497, column: 29, scope: !12008)
!12025 = !DILocalVariable(name: "mat_nr", arg: 8, scope: !12008, file: !1, line: 497, type: !63)
!12026 = !DILocation(line: 497, column: 37, scope: !12008)
!12027 = !DILocalVariable(name: "is_seam", arg: 9, scope: !12008, file: !1, line: 497, type: !152)
!12028 = !DILocation(line: 497, column: 50, scope: !12008)
!12029 = !DILocalVariable(name: "f", scope: !12008, file: !1, line: 499, type: !141)
!12030 = !DILocation(line: 499, column: 10, scope: !12008)
!12031 = !DILocalVariable(name: "facerep", scope: !12008, file: !1, line: 499, type: !141)
!12032 = !DILocation(line: 499, column: 14, scope: !12008)
!12033 = !DILocalVariable(name: "l", scope: !12008, file: !1, line: 500, type: !103)
!12034 = !DILocation(line: 500, column: 10, scope: !12008)
!12035 = !DILocalVariable(name: "iter", scope: !12008, file: !1, line: 501, type: !499)
!12036 = !DILocation(line: 501, column: 9, scope: !12008)
!12037 = !DILocation(line: 503, column: 26, scope: !12008)
!12038 = !DILocation(line: 503, column: 30, scope: !12008)
!12039 = !DILocation(line: 503, column: 34, scope: !12008)
!12040 = !DILocation(line: 503, column: 38, scope: !12008)
!12041 = !DILocation(line: 503, column: 42, scope: !12008)
!12042 = !DILocation(line: 503, column: 46, scope: !12008)
!12043 = !DILocation(line: 503, column: 50, scope: !12008)
!12044 = !DILocation(line: 503, column: 6, scope: !12008)
!12045 = !DILocation(line: 503, column: 4, scope: !12008)
!12046 = !DILocation(line: 505, column: 7, scope: !12047)
!12047 = distinct !DILexicalBlock(scope: !12008, file: !1, line: 505, column: 6)
!12048 = !DILocation(line: 505, column: 6, scope: !12008)
!12049 = !DILocation(line: 506, column: 3, scope: !12047)
!12050 = !DILocation(line: 508, column: 2, scope: !12051)
!12051 = distinct !DILexicalBlock(scope: !12008, file: !1, line: 508, column: 2)
!12052 = !DILocation(line: 508, column: 2, scope: !12053)
!12053 = distinct !DILexicalBlock(scope: !12051, file: !1, line: 508, column: 2)
!12054 = !DILocation(line: 509, column: 7, scope: !12055)
!12055 = distinct !DILexicalBlock(scope: !12056, file: !1, line: 509, column: 7)
!12056 = distinct !DILexicalBlock(scope: !12053, file: !1, line: 508, column: 47)
!12057 = !DILocation(line: 509, column: 15, scope: !12055)
!12058 = !DILocation(line: 509, column: 18, scope: !12055)
!12059 = !DILocation(line: 509, column: 21, scope: !12055)
!12060 = !DILocation(line: 509, column: 26, scope: !12055)
!12061 = !DILocation(line: 509, column: 23, scope: !12055)
!12062 = !DILocation(line: 509, column: 29, scope: !12055)
!12063 = !DILocation(line: 509, column: 32, scope: !12055)
!12064 = !DILocation(line: 509, column: 35, scope: !12055)
!12065 = !DILocation(line: 509, column: 40, scope: !12055)
!12066 = !DILocation(line: 509, column: 37, scope: !12055)
!12067 = !DILocation(line: 509, column: 7, scope: !12056)
!12068 = !DILocation(line: 510, column: 14, scope: !12055)
!12069 = !DILocation(line: 510, column: 12, scope: !12055)
!12070 = !DILocation(line: 510, column: 4, scope: !12055)
!12071 = !DILocation(line: 512, column: 14, scope: !12055)
!12072 = !DILocation(line: 512, column: 12, scope: !12055)
!12073 = !DILocation(line: 513, column: 7, scope: !12074)
!12074 = distinct !DILexicalBlock(scope: !12056, file: !1, line: 513, column: 7)
!12075 = !DILocation(line: 513, column: 7, scope: !12056)
!12076 = !DILocation(line: 514, column: 29, scope: !12074)
!12077 = !DILocation(line: 514, column: 33, scope: !12074)
!12078 = !DILocation(line: 514, column: 36, scope: !12074)
!12079 = !DILocation(line: 514, column: 4, scope: !12074)
!12080 = !DILocation(line: 515, column: 2, scope: !12056)
!12081 = distinct !{!12081, !12050, !12082}
!12082 = !DILocation(line: 515, column: 2, scope: !12051)
!12083 = !DILocation(line: 516, column: 9, scope: !12008)
!12084 = !DILocation(line: 516, column: 2, scope: !12008)
!12085 = !DILocation(line: 517, column: 1, scope: !12008)
!12086 = distinct !DISubprogram(name: "bev_create_quad_tri", scope: !1, file: !1, line: 405, type: !12087, scopeLine: 407, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!12087 = !DISubroutineType(types: !12088)
!12088 = !{!141, !321, !51, !51, !51, !51, !141, !63, !152}
!12089 = !DILocalVariable(name: "bm", arg: 1, scope: !12086, file: !1, line: 405, type: !321)
!12090 = !DILocation(line: 405, column: 43, scope: !12086)
!12091 = !DILocalVariable(name: "v1", arg: 2, scope: !12086, file: !1, line: 405, type: !51)
!12092 = !DILocation(line: 405, column: 55, scope: !12086)
!12093 = !DILocalVariable(name: "v2", arg: 3, scope: !12086, file: !1, line: 405, type: !51)
!12094 = !DILocation(line: 405, column: 67, scope: !12086)
!12095 = !DILocalVariable(name: "v3", arg: 4, scope: !12086, file: !1, line: 405, type: !51)
!12096 = !DILocation(line: 405, column: 79, scope: !12086)
!12097 = !DILocalVariable(name: "v4", arg: 5, scope: !12086, file: !1, line: 405, type: !51)
!12098 = !DILocation(line: 405, column: 91, scope: !12086)
!12099 = !DILocalVariable(name: "facerep", arg: 6, scope: !12086, file: !1, line: 406, type: !141)
!12100 = !DILocation(line: 406, column: 44, scope: !12086)
!12101 = !DILocalVariable(name: "mat_nr", arg: 7, scope: !12086, file: !1, line: 406, type: !63)
!12102 = !DILocation(line: 406, column: 57, scope: !12086)
!12103 = !DILocalVariable(name: "do_interp", arg: 8, scope: !12086, file: !1, line: 406, type: !152)
!12104 = !DILocation(line: 406, column: 70, scope: !12086)
!12105 = !DILocalVariable(name: "varr", scope: !12086, file: !1, line: 408, type: !9254)
!12106 = !DILocation(line: 408, column: 10, scope: !12086)
!12107 = !DILocation(line: 408, column: 20, scope: !12086)
!12108 = !DILocation(line: 408, column: 21, scope: !12086)
!12109 = !DILocation(line: 408, column: 25, scope: !12086)
!12110 = !DILocation(line: 408, column: 29, scope: !12086)
!12111 = !DILocation(line: 408, column: 33, scope: !12086)
!12112 = !DILocation(line: 409, column: 25, scope: !12086)
!12113 = !DILocation(line: 409, column: 29, scope: !12086)
!12114 = !DILocation(line: 409, column: 35, scope: !12086)
!12115 = !DILocation(line: 409, column: 53, scope: !12086)
!12116 = !DILocation(line: 409, column: 62, scope: !12086)
!12117 = !DILocation(line: 409, column: 70, scope: !12086)
!12118 = !DILocation(line: 409, column: 9, scope: !12086)
!12119 = !DILocation(line: 409, column: 2, scope: !12086)
!12120 = distinct !DISubprogram(name: "bev_merge_end_uvs", scope: !1, file: !1, line: 3308, type: !12121, scopeLine: 3309, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!12121 = !DISubroutineType(types: !12122)
!12122 = !{null, !321, !283, !130}
!12123 = !DILocalVariable(name: "bm", arg: 1, scope: !12120, file: !1, line: 3308, type: !321)
!12124 = !DILocation(line: 3308, column: 38, scope: !12120)
!12125 = !DILocalVariable(name: "bv", arg: 2, scope: !12120, file: !1, line: 3308, type: !283)
!12126 = !DILocation(line: 3308, column: 51, scope: !12120)
!12127 = !DILocalVariable(name: "e", arg: 3, scope: !12120, file: !1, line: 3308, type: !130)
!12128 = !DILocation(line: 3308, column: 65, scope: !12120)
!12129 = !DILocalVariable(name: "vm", scope: !12120, file: !1, line: 3310, type: !298)
!12130 = !DILocation(line: 3310, column: 9, scope: !12120)
!12131 = !DILocation(line: 3310, column: 14, scope: !12120)
!12132 = !DILocation(line: 3310, column: 18, scope: !12120)
!12133 = !DILocalVariable(name: "i", scope: !12120, file: !1, line: 3311, type: !63)
!12134 = !DILocation(line: 3311, column: 6, scope: !12120)
!12135 = !DILocalVariable(name: "k", scope: !12120, file: !1, line: 3311, type: !63)
!12136 = !DILocation(line: 3311, column: 9, scope: !12120)
!12137 = !DILocalVariable(name: "nseg", scope: !12120, file: !1, line: 3311, type: !63)
!12138 = !DILocation(line: 3311, column: 12, scope: !12120)
!12139 = !DILocation(line: 3313, column: 9, scope: !12120)
!12140 = !DILocation(line: 3313, column: 12, scope: !12120)
!12141 = !DILocation(line: 3313, column: 7, scope: !12120)
!12142 = !DILocation(line: 3314, column: 6, scope: !12120)
!12143 = !DILocation(line: 3314, column: 9, scope: !12120)
!12144 = !DILocation(line: 3314, column: 16, scope: !12120)
!12145 = !DILocation(line: 3314, column: 4, scope: !12120)
!12146 = !DILocation(line: 3315, column: 9, scope: !12147)
!12147 = distinct !DILexicalBlock(scope: !12120, file: !1, line: 3315, column: 2)
!12148 = !DILocation(line: 3315, column: 7, scope: !12147)
!12149 = !DILocation(line: 3315, column: 14, scope: !12150)
!12150 = distinct !DILexicalBlock(scope: !12147, file: !1, line: 3315, column: 2)
!12151 = !DILocation(line: 3315, column: 18, scope: !12150)
!12152 = !DILocation(line: 3315, column: 16, scope: !12150)
!12153 = !DILocation(line: 3315, column: 2, scope: !12147)
!12154 = !DILocation(line: 3316, column: 17, scope: !12155)
!12155 = distinct !DILexicalBlock(scope: !12150, file: !1, line: 3315, column: 29)
!12156 = !DILocation(line: 3316, column: 31, scope: !12155)
!12157 = !DILocation(line: 3316, column: 35, scope: !12155)
!12158 = !DILocation(line: 3316, column: 41, scope: !12155)
!12159 = !DILocation(line: 3316, column: 21, scope: !12155)
!12160 = !DILocation(line: 3316, column: 45, scope: !12155)
!12161 = !DILocation(line: 3316, column: 3, scope: !12155)
!12162 = !DILocation(line: 3317, column: 2, scope: !12155)
!12163 = !DILocation(line: 3315, column: 25, scope: !12150)
!12164 = !DILocation(line: 3315, column: 2, scope: !12150)
!12165 = distinct !{!12165, !12153, !12166}
!12166 = !DILocation(line: 3317, column: 2, scope: !12147)
!12167 = !DILocation(line: 3318, column: 1, scope: !12120)
!12168 = distinct !DISubprogram(name: "bevvert_is_weld_cross", scope: !1, file: !1, line: 3324, type: !7081, scopeLine: 3325, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!12169 = !DILocalVariable(name: "bv", arg: 1, scope: !12168, file: !1, line: 3324, type: !283)
!12170 = !DILocation(line: 3324, column: 44, scope: !12168)
!12171 = !DILocation(line: 3326, column: 10, scope: !12168)
!12172 = !DILocation(line: 3326, column: 14, scope: !12168)
!12173 = !DILocation(line: 3326, column: 24, scope: !12168)
!12174 = !DILocation(line: 3326, column: 29, scope: !12168)
!12175 = !DILocation(line: 3326, column: 32, scope: !12168)
!12176 = !DILocation(line: 3326, column: 36, scope: !12168)
!12177 = !DILocation(line: 3326, column: 45, scope: !12168)
!12178 = !DILocation(line: 3326, column: 50, scope: !12168)
!12179 = !DILocation(line: 3327, column: 12, scope: !12168)
!12180 = !DILocation(line: 3327, column: 16, scope: !12168)
!12181 = !DILocation(line: 3327, column: 25, scope: !12168)
!12182 = !DILocation(line: 3327, column: 32, scope: !12168)
!12183 = !DILocation(line: 3327, column: 35, scope: !12168)
!12184 = !DILocation(line: 3327, column: 39, scope: !12168)
!12185 = !DILocation(line: 3327, column: 48, scope: !12168)
!12186 = !DILocation(line: 3327, column: 56, scope: !12168)
!12187 = !DILocation(line: 3328, column: 12, scope: !12168)
!12188 = !DILocation(line: 3328, column: 16, scope: !12168)
!12189 = !DILocation(line: 3328, column: 25, scope: !12168)
!12190 = !DILocation(line: 3328, column: 32, scope: !12168)
!12191 = !DILocation(line: 3328, column: 35, scope: !12168)
!12192 = !DILocation(line: 3328, column: 39, scope: !12168)
!12193 = !DILocation(line: 3328, column: 48, scope: !12168)
!12194 = !DILocation(line: 0, scope: !12168)
!12195 = !DILocation(line: 3326, column: 9, scope: !12168)
!12196 = !DILocation(line: 3326, column: 2, scope: !12168)
!12197 = distinct !DISubprogram(name: "weld_cross_attrs_copy", scope: !1, file: !1, line: 3350, type: !12198, scopeLine: 3351, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!12198 = !DISubroutineType(types: !12199)
!12199 = !{null, !321, !283, !298, !63, !130}
!12200 = !DILocalVariable(name: "bm", arg: 1, scope: !12197, file: !1, line: 3350, type: !321)
!12201 = !DILocation(line: 3350, column: 42, scope: !12197)
!12202 = !DILocalVariable(name: "bv", arg: 2, scope: !12197, file: !1, line: 3350, type: !283)
!12203 = !DILocation(line: 3350, column: 55, scope: !12197)
!12204 = !DILocalVariable(name: "vm", arg: 3, scope: !12197, file: !1, line: 3350, type: !298)
!12205 = !DILocation(line: 3350, column: 66, scope: !12197)
!12206 = !DILocalVariable(name: "vmindex", arg: 4, scope: !12197, file: !1, line: 3350, type: !63)
!12207 = !DILocation(line: 3350, column: 74, scope: !12197)
!12208 = !DILocalVariable(name: "e", arg: 5, scope: !12197, file: !1, line: 3350, type: !130)
!12209 = !DILocation(line: 3350, column: 93, scope: !12197)
!12210 = !DILocalVariable(name: "bme_prev", scope: !12197, file: !1, line: 3352, type: !138)
!12211 = !DILocation(line: 3352, column: 10, scope: !12197)
!12212 = !DILocalVariable(name: "bme_next", scope: !12197, file: !1, line: 3352, type: !138)
!12213 = !DILocation(line: 3352, column: 21, scope: !12197)
!12214 = !DILocalVariable(name: "bme", scope: !12197, file: !1, line: 3352, type: !138)
!12215 = !DILocation(line: 3352, column: 32, scope: !12197)
!12216 = !DILocalVariable(name: "i", scope: !12197, file: !1, line: 3353, type: !63)
!12217 = !DILocation(line: 3353, column: 6, scope: !12197)
!12218 = !DILocalVariable(name: "nseg", scope: !12197, file: !1, line: 3353, type: !63)
!12219 = !DILocation(line: 3353, column: 9, scope: !12197)
!12220 = !DILocalVariable(name: "disable_seam", scope: !12197, file: !1, line: 3354, type: !152)
!12221 = !DILocation(line: 3354, column: 7, scope: !12197)
!12222 = !DILocalVariable(name: "enable_smooth", scope: !12197, file: !1, line: 3354, type: !152)
!12223 = !DILocation(line: 3354, column: 21, scope: !12197)
!12224 = !DILocation(line: 3356, column: 22, scope: !12197)
!12225 = !DILocation(line: 3356, column: 11, scope: !12197)
!12226 = !DILocation(line: 3357, column: 9, scope: !12227)
!12227 = distinct !DILexicalBlock(scope: !12197, file: !1, line: 3357, column: 2)
!12228 = !DILocation(line: 3357, column: 7, scope: !12227)
!12229 = !DILocation(line: 3357, column: 14, scope: !12230)
!12230 = distinct !DILexicalBlock(scope: !12227, file: !1, line: 3357, column: 2)
!12231 = !DILocation(line: 3357, column: 16, scope: !12230)
!12232 = !DILocation(line: 3357, column: 2, scope: !12227)
!12233 = !DILocation(line: 3358, column: 8, scope: !12234)
!12234 = distinct !DILexicalBlock(scope: !12235, file: !1, line: 3358, column: 7)
!12235 = distinct !DILexicalBlock(scope: !12230, file: !1, line: 3357, column: 26)
!12236 = !DILocation(line: 3358, column: 12, scope: !12234)
!12237 = !DILocation(line: 3358, column: 18, scope: !12234)
!12238 = !DILocation(line: 3358, column: 24, scope: !12234)
!12239 = !DILocation(line: 3358, column: 21, scope: !12234)
!12240 = !DILocation(line: 3358, column: 7, scope: !12235)
!12241 = !DILocation(line: 3359, column: 15, scope: !12242)
!12242 = distinct !DILexicalBlock(scope: !12234, file: !1, line: 3358, column: 27)
!12243 = !DILocation(line: 3359, column: 19, scope: !12242)
!12244 = !DILocation(line: 3359, column: 26, scope: !12242)
!12245 = !DILocation(line: 3359, column: 28, scope: !12242)
!12246 = !DILocation(line: 3359, column: 33, scope: !12242)
!12247 = !DILocation(line: 3359, column: 38, scope: !12242)
!12248 = !DILocation(line: 3359, column: 13, scope: !12242)
!12249 = !DILocation(line: 3360, column: 15, scope: !12242)
!12250 = !DILocation(line: 3360, column: 19, scope: !12242)
!12251 = !DILocation(line: 3360, column: 26, scope: !12242)
!12252 = !DILocation(line: 3360, column: 28, scope: !12242)
!12253 = !DILocation(line: 3360, column: 33, scope: !12242)
!12254 = !DILocation(line: 3360, column: 38, scope: !12242)
!12255 = !DILocation(line: 3360, column: 13, scope: !12242)
!12256 = !DILocation(line: 3361, column: 4, scope: !12242)
!12257 = !DILocation(line: 3363, column: 2, scope: !12235)
!12258 = !DILocation(line: 3357, column: 22, scope: !12230)
!12259 = !DILocation(line: 3357, column: 2, scope: !12230)
!12260 = distinct !{!12260, !12232, !12261}
!12261 = !DILocation(line: 3363, column: 2, scope: !12227)
!12262 = !DILocation(line: 3367, column: 17, scope: !12197)
!12263 = !DILocation(line: 3367, column: 62, scope: !12197)
!12264 = !DILocation(line: 3367, column: 59, scope: !12197)
!12265 = !DILocation(line: 3367, column: 15, scope: !12197)
!12266 = !DILocation(line: 3368, column: 18, scope: !12197)
!12267 = !DILocation(line: 3368, column: 65, scope: !12197)
!12268 = !DILocation(line: 3368, column: 62, scope: !12197)
!12269 = !DILocation(line: 3368, column: 16, scope: !12197)
!12270 = !DILocation(line: 3370, column: 9, scope: !12197)
!12271 = !DILocation(line: 3370, column: 12, scope: !12197)
!12272 = !DILocation(line: 3370, column: 7, scope: !12197)
!12273 = !DILocation(line: 3371, column: 9, scope: !12274)
!12274 = distinct !DILexicalBlock(scope: !12197, file: !1, line: 3371, column: 2)
!12275 = !DILocation(line: 3371, column: 7, scope: !12274)
!12276 = !DILocation(line: 3371, column: 14, scope: !12277)
!12277 = distinct !DILexicalBlock(scope: !12274, file: !1, line: 3371, column: 2)
!12278 = !DILocation(line: 3371, column: 18, scope: !12277)
!12279 = !DILocation(line: 3371, column: 16, scope: !12277)
!12280 = !DILocation(line: 3371, column: 2, scope: !12274)
!12281 = !DILocation(line: 3372, column: 34, scope: !12282)
!12282 = distinct !DILexicalBlock(scope: !12277, file: !1, line: 3371, column: 29)
!12283 = !DILocation(line: 3372, column: 38, scope: !12282)
!12284 = !DILocation(line: 3372, column: 50, scope: !12282)
!12285 = !DILocation(line: 3372, column: 24, scope: !12282)
!12286 = !DILocation(line: 3372, column: 54, scope: !12282)
!12287 = !DILocation(line: 3373, column: 34, scope: !12282)
!12288 = !DILocation(line: 3373, column: 38, scope: !12282)
!12289 = !DILocation(line: 3373, column: 50, scope: !12282)
!12290 = !DILocation(line: 3373, column: 52, scope: !12282)
!12291 = !DILocation(line: 3373, column: 24, scope: !12282)
!12292 = !DILocation(line: 3373, column: 58, scope: !12282)
!12293 = !DILocation(line: 3372, column: 9, scope: !12282)
!12294 = !DILocation(line: 3372, column: 7, scope: !12282)
!12295 = !DILocation(line: 3375, column: 22, scope: !12282)
!12296 = !DILocation(line: 3375, column: 26, scope: !12282)
!12297 = !DILocation(line: 3375, column: 30, scope: !12282)
!12298 = !DILocation(line: 3375, column: 40, scope: !12282)
!12299 = !DILocation(line: 3375, column: 3, scope: !12282)
!12300 = !DILocation(line: 3376, column: 7, scope: !12301)
!12301 = distinct !DILexicalBlock(scope: !12282, file: !1, line: 3376, column: 7)
!12302 = !DILocation(line: 3376, column: 7, scope: !12282)
!12303 = !DILocation(line: 3377, column: 4, scope: !12301)
!12304 = !DILocation(line: 3378, column: 7, scope: !12305)
!12305 = distinct !DILexicalBlock(scope: !12282, file: !1, line: 3378, column: 7)
!12306 = !DILocation(line: 3378, column: 7, scope: !12282)
!12307 = !DILocation(line: 3379, column: 4, scope: !12305)
!12308 = !DILocation(line: 3380, column: 2, scope: !12282)
!12309 = !DILocation(line: 3371, column: 25, scope: !12277)
!12310 = !DILocation(line: 3371, column: 2, scope: !12277)
!12311 = distinct !{!12311, !12280, !12312}
!12312 = !DILocation(line: 3380, column: 2, scope: !12274)
!12313 = !DILocation(line: 3381, column: 1, scope: !12197)
!12314 = distinct !DISubprogram(name: "bev_rebuild_polygon", scope: !1, file: !1, line: 3111, type: !12315, scopeLine: 3112, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !475)
!12315 = !DISubroutineType(types: !12316)
!12316 = !{!152, !321, !801, !141}
!12317 = !DILocalVariable(name: "bm", arg: 1, scope: !12314, file: !1, line: 3111, type: !321)
!12318 = !DILocation(line: 3111, column: 40, scope: !12314)
!12319 = !DILocalVariable(name: "bp", arg: 2, scope: !12314, file: !1, line: 3111, type: !801)
!12320 = !DILocation(line: 3111, column: 57, scope: !12314)
!12321 = !DILocalVariable(name: "f", arg: 3, scope: !12314, file: !1, line: 3111, type: !141)
!12322 = !DILocation(line: 3111, column: 69, scope: !12314)
!12323 = !DILocalVariable(name: "liter", scope: !12314, file: !1, line: 3113, type: !499)
!12324 = !DILocation(line: 3113, column: 9, scope: !12314)
!12325 = !DILocalVariable(name: "l", scope: !12314, file: !1, line: 3114, type: !103)
!12326 = !DILocation(line: 3114, column: 10, scope: !12314)
!12327 = !DILocalVariable(name: "lprev", scope: !12314, file: !1, line: 3114, type: !103)
!12328 = !DILocation(line: 3114, column: 14, scope: !12314)
!12329 = !DILocalVariable(name: "bv", scope: !12314, file: !1, line: 3115, type: !283)
!12330 = !DILocation(line: 3115, column: 11, scope: !12314)
!12331 = !DILocalVariable(name: "v", scope: !12314, file: !1, line: 3116, type: !121)
!12332 = !DILocation(line: 3116, column: 13, scope: !12314)
!12333 = !DILocalVariable(name: "vstart", scope: !12314, file: !1, line: 3116, type: !121)
!12334 = !DILocation(line: 3116, column: 17, scope: !12314)
!12335 = !DILocalVariable(name: "vend", scope: !12314, file: !1, line: 3116, type: !121)
!12336 = !DILocation(line: 3116, column: 26, scope: !12314)
!12337 = !DILocalVariable(name: "e", scope: !12314, file: !1, line: 3117, type: !130)
!12338 = !DILocation(line: 3117, column: 12, scope: !12314)
!12339 = !DILocalVariable(name: "eprev", scope: !12314, file: !1, line: 3117, type: !130)
!12340 = !DILocation(line: 3117, column: 16, scope: !12314)
!12341 = !DILocalVariable(name: "vm", scope: !12314, file: !1, line: 3118, type: !298)
!12342 = !DILocation(line: 3118, column: 9, scope: !12314)
!12343 = !DILocalVariable(name: "i", scope: !12314, file: !1, line: 3119, type: !63)
!12344 = !DILocation(line: 3119, column: 6, scope: !12314)
!12345 = !DILocalVariable(name: "k", scope: !12314, file: !1, line: 3119, type: !63)
!12346 = !DILocation(line: 3119, column: 9, scope: !12314)
!12347 = !DILocalVariable(name: "n", scope: !12314, file: !1, line: 3119, type: !63)
!12348 = !DILocation(line: 3119, column: 12, scope: !12314)
!12349 = !DILocalVariable(name: "do_rebuild", scope: !12314, file: !1, line: 3120, type: !152)
!12350 = !DILocation(line: 3120, column: 7, scope: !12314)
!12351 = !DILocalVariable(name: "bmv", scope: !12314, file: !1, line: 3121, type: !51)
!12352 = !DILocation(line: 3121, column: 10, scope: !12314)
!12353 = !DILocalVariable(name: "bme", scope: !12314, file: !1, line: 3122, type: !138)
!12354 = !DILocation(line: 3122, column: 10, scope: !12314)
!12355 = !DILocalVariable(name: "bme_new", scope: !12314, file: !1, line: 3122, type: !138)
!12356 = !DILocation(line: 3122, column: 16, scope: !12314)
!12357 = !DILocalVariable(name: "bme_prev", scope: !12314, file: !1, line: 3122, type: !138)
!12358 = !DILocation(line: 3122, column: 26, scope: !12314)
!12359 = !DILocalVariable(name: "f_new", scope: !12314, file: !1, line: 3123, type: !141)
!12360 = !DILocation(line: 3123, column: 10, scope: !12314)
!12361 = !DILocalVariable(name: "vv", scope: !12314, file: !1, line: 3124, type: !341)
!12362 = !DILocation(line: 3124, column: 11, scope: !12314)
!12363 = !DILocalVariable(name: "vv_fix", scope: !12314, file: !1, line: 3125, type: !341)
!12364 = !DILocation(line: 3125, column: 11, scope: !12314)
!12365 = !DILocalVariable(name: "ee", scope: !12314, file: !1, line: 3126, type: !296)
!12366 = !DILocation(line: 3126, column: 11, scope: !12314)
!12367 = !DILocalVariable(name: "_vv_count", scope: !12314, file: !1, line: 3127, type: !63)
!12368 = !DILocation(line: 3127, column: 2, scope: !12314)
!12369 = !DILocalVariable(name: "_vv_static", scope: !12314, file: !1, line: 3127, type: !7501)
!12370 = !DILocalVariable(name: "_vv_fix_count", scope: !12314, file: !1, line: 3128, type: !63)
!12371 = !DILocation(line: 3128, column: 2, scope: !12314)
!12372 = !DILocalVariable(name: "_vv_fix_static", scope: !12314, file: !1, line: 3128, type: !7501)
!12373 = !DILocalVariable(name: "_ee_count", scope: !12314, file: !1, line: 3129, type: !63)
!12374 = !DILocation(line: 3129, column: 2, scope: !12314)
!12375 = !DILocalVariable(name: "_ee_static", scope: !12314, file: !1, line: 3129, type: !7501)
!12376 = !DILocation(line: 3131, column: 2, scope: !12377)
!12377 = distinct !DILexicalBlock(scope: !12314, file: !1, line: 3131, column: 2)
!12378 = !DILocation(line: 3131, column: 2, scope: !12379)
!12379 = distinct !DILexicalBlock(scope: !12377, file: !1, line: 3131, column: 2)
!12380 = !DILocation(line: 3132, column: 7, scope: !12381)
!12381 = distinct !DILexicalBlock(scope: !12382, file: !1, line: 3132, column: 7)
!12382 = distinct !DILexicalBlock(scope: !12379, file: !1, line: 3131, column: 48)
!12383 = !DILocation(line: 3132, column: 7, scope: !12382)
!12384 = !DILocation(line: 3133, column: 12, scope: !12385)
!12385 = distinct !DILexicalBlock(scope: !12381, file: !1, line: 3132, column: 45)
!12386 = !DILocation(line: 3133, column: 15, scope: !12385)
!12387 = !DILocation(line: 3133, column: 10, scope: !12385)
!12388 = !DILocation(line: 3134, column: 22, scope: !12385)
!12389 = !DILocation(line: 3134, column: 26, scope: !12385)
!12390 = !DILocation(line: 3134, column: 29, scope: !12385)
!12391 = !DILocation(line: 3134, column: 9, scope: !12385)
!12392 = !DILocation(line: 3134, column: 7, scope: !12385)
!12393 = !DILocation(line: 3135, column: 23, scope: !12385)
!12394 = !DILocation(line: 3135, column: 27, scope: !12385)
!12395 = !DILocation(line: 3135, column: 30, scope: !12385)
!12396 = !DILocation(line: 3135, column: 8, scope: !12385)
!12397 = !DILocation(line: 3135, column: 6, scope: !12385)
!12398 = !DILocation(line: 3136, column: 10, scope: !12385)
!12399 = !DILocation(line: 3136, column: 13, scope: !12385)
!12400 = !DILocation(line: 3136, column: 8, scope: !12385)
!12401 = !DILocation(line: 3137, column: 27, scope: !12385)
!12402 = !DILocation(line: 3137, column: 31, scope: !12385)
!12403 = !DILocation(line: 3137, column: 38, scope: !12385)
!12404 = !DILocation(line: 3137, column: 12, scope: !12385)
!12405 = !DILocation(line: 3137, column: 10, scope: !12385)
!12406 = !DILocation(line: 3139, column: 13, scope: !12385)
!12407 = !DILocation(line: 3139, column: 20, scope: !12385)
!12408 = !DILocation(line: 3139, column: 11, scope: !12385)
!12409 = !DILocation(line: 3140, column: 8, scope: !12410)
!12410 = distinct !DILexicalBlock(scope: !12385, file: !1, line: 3140, column: 8)
!12411 = !DILocation(line: 3140, column: 11, scope: !12410)
!12412 = !DILocation(line: 3140, column: 8, scope: !12385)
!12413 = !DILocation(line: 3141, column: 12, scope: !12410)
!12414 = !DILocation(line: 3141, column: 15, scope: !12410)
!12415 = !DILocation(line: 3141, column: 10, scope: !12410)
!12416 = !DILocation(line: 3141, column: 5, scope: !12410)
!12417 = !DILocation(line: 3143, column: 12, scope: !12410)
!12418 = !DILocation(line: 3143, column: 15, scope: !12410)
!12419 = !DILocation(line: 3143, column: 10, scope: !12410)
!12420 = !DILocation(line: 3144, column: 8, scope: !12385)
!12421 = !DILocation(line: 3144, column: 6, scope: !12385)
!12422 = !DILocation(line: 3145, column: 9, scope: !12385)
!12423 = !DILocation(line: 3145, column: 13, scope: !12385)
!12424 = !DILocation(line: 3145, column: 7, scope: !12385)
!12425 = !DILocation(line: 3146, column: 4, scope: !12385)
!12426 = !DILocation(line: 3147, column: 4, scope: !12385)
!12427 = !DILocation(line: 3148, column: 4, scope: !12385)
!12428 = !DILocation(line: 3148, column: 11, scope: !12385)
!12429 = !DILocation(line: 3148, column: 16, scope: !12385)
!12430 = !DILocation(line: 3148, column: 13, scope: !12385)
!12431 = !DILocation(line: 3149, column: 9, scope: !12432)
!12432 = distinct !DILexicalBlock(scope: !12433, file: !1, line: 3149, column: 9)
!12433 = distinct !DILexicalBlock(scope: !12385, file: !1, line: 3148, column: 22)
!12434 = !DILocation(line: 3149, column: 13, scope: !12432)
!12435 = !DILocation(line: 3149, column: 23, scope: !12432)
!12436 = !DILocation(line: 3149, column: 33, scope: !12432)
!12437 = !DILocation(line: 3149, column: 36, scope: !12432)
!12438 = !DILocation(line: 3149, column: 39, scope: !12432)
!12439 = !DILocation(line: 3149, column: 44, scope: !12432)
!12440 = !DILocation(line: 3149, column: 47, scope: !12432)
!12441 = !DILocation(line: 3149, column: 50, scope: !12432)
!12442 = !DILocation(line: 3149, column: 56, scope: !12432)
!12443 = !DILocation(line: 3149, column: 60, scope: !12432)
!12444 = !DILocation(line: 3149, column: 64, scope: !12432)
!12445 = !DILocation(line: 3149, column: 67, scope: !12432)
!12446 = !DILocation(line: 3149, column: 70, scope: !12432)
!12447 = !DILocation(line: 3149, column: 78, scope: !12432)
!12448 = !DILocation(line: 3149, column: 75, scope: !12432)
!12449 = !DILocation(line: 3149, column: 80, scope: !12432)
!12450 = !DILocation(line: 3149, column: 83, scope: !12432)
!12451 = !DILocation(line: 3149, column: 86, scope: !12432)
!12452 = !DILocation(line: 3149, column: 94, scope: !12432)
!12453 = !DILocation(line: 3149, column: 91, scope: !12432)
!12454 = !DILocation(line: 3149, column: 9, scope: !12433)
!12455 = !DILocation(line: 3151, column: 10, scope: !12456)
!12456 = distinct !DILexicalBlock(scope: !12432, file: !1, line: 3149, column: 101)
!12457 = !DILocation(line: 3151, column: 13, scope: !12456)
!12458 = !DILocation(line: 3151, column: 8, scope: !12456)
!12459 = !DILocation(line: 3152, column: 10, scope: !12456)
!12460 = !DILocation(line: 3152, column: 13, scope: !12456)
!12461 = !DILocation(line: 3152, column: 8, scope: !12456)
!12462 = !DILocation(line: 3153, column: 13, scope: !12463)
!12463 = distinct !DILexicalBlock(scope: !12456, file: !1, line: 3153, column: 6)
!12464 = !DILocation(line: 3153, column: 11, scope: !12463)
!12465 = !DILocation(line: 3153, column: 18, scope: !12466)
!12466 = distinct !DILexicalBlock(scope: !12463, file: !1, line: 3153, column: 6)
!12467 = !DILocation(line: 3153, column: 22, scope: !12466)
!12468 = !DILocation(line: 3153, column: 25, scope: !12466)
!12469 = !DILocation(line: 3153, column: 20, scope: !12466)
!12470 = !DILocation(line: 3153, column: 6, scope: !12463)
!12471 = !DILocation(line: 3154, column: 23, scope: !12472)
!12472 = distinct !DILexicalBlock(scope: !12466, file: !1, line: 3153, column: 35)
!12473 = !DILocation(line: 3154, column: 27, scope: !12472)
!12474 = !DILocation(line: 3154, column: 33, scope: !12472)
!12475 = !DILocation(line: 3154, column: 13, scope: !12472)
!12476 = !DILocation(line: 3154, column: 37, scope: !12472)
!12477 = !DILocation(line: 3154, column: 11, scope: !12472)
!12478 = !DILocation(line: 3155, column: 7, scope: !12472)
!12479 = !DILocation(line: 3156, column: 7, scope: !12472)
!12480 = !DILocation(line: 3158, column: 12, scope: !12481)
!12481 = distinct !DILexicalBlock(scope: !12472, file: !1, line: 3158, column: 11)
!12482 = !DILocation(line: 3158, column: 15, scope: !12481)
!12483 = !DILocation(line: 3158, column: 11, scope: !12472)
!12484 = !DILocation(line: 3159, column: 8, scope: !12481)
!12485 = !DILocation(line: 3160, column: 6, scope: !12472)
!12486 = !DILocation(line: 3153, column: 31, scope: !12466)
!12487 = !DILocation(line: 3153, column: 6, scope: !12466)
!12488 = distinct !{!12488, !12470, !12489}
!12489 = !DILocation(line: 3160, column: 6, scope: !12463)
!12490 = !DILocation(line: 3161, column: 5, scope: !12456)
!12491 = !DILocation(line: 3162, column: 14, scope: !12492)
!12492 = distinct !DILexicalBlock(scope: !12432, file: !1, line: 3162, column: 14)
!12493 = !DILocation(line: 3162, column: 18, scope: !12492)
!12494 = !DILocation(line: 3162, column: 28, scope: !12492)
!12495 = !DILocation(line: 3162, column: 37, scope: !12492)
!12496 = !DILocation(line: 3162, column: 40, scope: !12492)
!12497 = !DILocation(line: 3162, column: 44, scope: !12492)
!12498 = !DILocation(line: 3162, column: 48, scope: !12492)
!12499 = !DILocation(line: 3162, column: 52, scope: !12492)
!12500 = !DILocation(line: 3162, column: 56, scope: !12492)
!12501 = !DILocation(line: 3162, column: 59, scope: !12492)
!12502 = !DILocation(line: 3162, column: 66, scope: !12492)
!12503 = !DILocation(line: 3162, column: 70, scope: !12492)
!12504 = !DILocation(line: 3162, column: 77, scope: !12492)
!12505 = !DILocation(line: 3162, column: 14, scope: !12432)
!12506 = !DILocation(line: 3164, column: 10, scope: !12507)
!12507 = distinct !DILexicalBlock(scope: !12492, file: !1, line: 3162, column: 85)
!12508 = !DILocation(line: 3164, column: 16, scope: !12507)
!12509 = !DILocation(line: 3164, column: 8, scope: !12507)
!12510 = !DILocation(line: 3165, column: 15, scope: !12511)
!12511 = distinct !DILexicalBlock(scope: !12507, file: !1, line: 3165, column: 6)
!12512 = !DILocation(line: 3165, column: 19, scope: !12511)
!12513 = !DILocation(line: 3165, column: 23, scope: !12511)
!12514 = !DILocation(line: 3165, column: 13, scope: !12511)
!12515 = !DILocation(line: 3165, column: 11, scope: !12511)
!12516 = !DILocation(line: 3165, column: 28, scope: !12517)
!12517 = distinct !DILexicalBlock(scope: !12511, file: !1, line: 3165, column: 6)
!12518 = !DILocation(line: 3165, column: 30, scope: !12517)
!12519 = !DILocation(line: 3165, column: 6, scope: !12511)
!12520 = !DILocation(line: 3166, column: 23, scope: !12521)
!12521 = distinct !DILexicalBlock(scope: !12517, file: !1, line: 3165, column: 40)
!12522 = !DILocation(line: 3166, column: 27, scope: !12521)
!12523 = !DILocation(line: 3166, column: 33, scope: !12521)
!12524 = !DILocation(line: 3166, column: 13, scope: !12521)
!12525 = !DILocation(line: 3166, column: 37, scope: !12521)
!12526 = !DILocation(line: 3166, column: 11, scope: !12521)
!12527 = !DILocation(line: 3167, column: 7, scope: !12521)
!12528 = !DILocation(line: 3168, column: 7, scope: !12521)
!12529 = !DILocation(line: 3169, column: 6, scope: !12521)
!12530 = !DILocation(line: 3165, column: 36, scope: !12517)
!12531 = !DILocation(line: 3165, column: 6, scope: !12517)
!12532 = distinct !{!12532, !12519, !12533}
!12533 = !DILocation(line: 3169, column: 6, scope: !12511)
!12534 = !DILocation(line: 3170, column: 5, scope: !12507)
!12535 = !DILocation(line: 3171, column: 9, scope: !12433)
!12536 = !DILocation(line: 3171, column: 12, scope: !12433)
!12537 = !DILocation(line: 3171, column: 7, scope: !12433)
!12538 = !DILocation(line: 3172, column: 5, scope: !12433)
!12539 = !DILocation(line: 3173, column: 5, scope: !12433)
!12540 = distinct !{!12540, !12427, !12541}
!12541 = !DILocation(line: 3174, column: 4, scope: !12385)
!12542 = !DILocation(line: 3176, column: 15, scope: !12385)
!12543 = !DILocation(line: 3177, column: 3, scope: !12385)
!12544 = !DILocation(line: 3179, column: 4, scope: !12545)
!12545 = distinct !DILexicalBlock(scope: !12381, file: !1, line: 3178, column: 8)
!12546 = !DILocation(line: 3180, column: 4, scope: !12545)
!12547 = !DILocation(line: 3182, column: 2, scope: !12382)
!12548 = distinct !{!12548, !12376, !12549}
!12549 = !DILocation(line: 3182, column: 2, scope: !12377)
!12550 = !DILocation(line: 3183, column: 6, scope: !12551)
!12551 = distinct !DILexicalBlock(scope: !12314, file: !1, line: 3183, column: 6)
!12552 = !DILocation(line: 3183, column: 6, scope: !12314)
!12553 = !DILocation(line: 3184, column: 7, scope: !12554)
!12554 = distinct !DILexicalBlock(scope: !12551, file: !1, line: 3183, column: 18)
!12555 = !DILocation(line: 3184, column: 5, scope: !12554)
!12556 = !DILocation(line: 3185, column: 27, scope: !12554)
!12557 = !DILocation(line: 3185, column: 31, scope: !12554)
!12558 = !DILocation(line: 3185, column: 35, scope: !12554)
!12559 = !DILocation(line: 3185, column: 44, scope: !12554)
!12560 = !DILocation(line: 3185, column: 11, scope: !12554)
!12561 = !DILocation(line: 3185, column: 9, scope: !12554)
!12562 = !DILocation(line: 3187, column: 10, scope: !12563)
!12563 = distinct !DILexicalBlock(scope: !12554, file: !1, line: 3187, column: 3)
!12564 = !DILocation(line: 3187, column: 8, scope: !12563)
!12565 = !DILocation(line: 3187, column: 15, scope: !12566)
!12566 = distinct !DILexicalBlock(scope: !12563, file: !1, line: 3187, column: 3)
!12567 = !DILocation(line: 3187, column: 19, scope: !12566)
!12568 = !DILocation(line: 3187, column: 17, scope: !12566)
!12569 = !DILocation(line: 3187, column: 3, scope: !12563)
!12570 = !DILocation(line: 3188, column: 18, scope: !12571)
!12571 = distinct !DILexicalBlock(scope: !12566, file: !1, line: 3187, column: 49)
!12572 = !DILocation(line: 3188, column: 22, scope: !12571)
!12573 = !DILocation(line: 3188, column: 29, scope: !12571)
!12574 = !DILocation(line: 3188, column: 4, scope: !12571)
!12575 = !DILocation(line: 3189, column: 3, scope: !12571)
!12576 = !DILocation(line: 3187, column: 45, scope: !12566)
!12577 = !DILocation(line: 3187, column: 3, scope: !12566)
!12578 = distinct !{!12578, !12569, !12579}
!12579 = !DILocation(line: 3189, column: 3, scope: !12563)
!12580 = !DILocation(line: 3193, column: 14, scope: !12554)
!12581 = !DILocation(line: 3193, column: 17, scope: !12554)
!12582 = !DILocation(line: 3193, column: 19, scope: !12554)
!12583 = !DILocation(line: 3193, column: 12, scope: !12554)
!12584 = !DILocation(line: 3194, column: 10, scope: !12585)
!12585 = distinct !DILexicalBlock(scope: !12554, file: !1, line: 3194, column: 3)
!12586 = !DILocation(line: 3194, column: 8, scope: !12585)
!12587 = !DILocation(line: 3194, column: 15, scope: !12588)
!12588 = distinct !DILexicalBlock(scope: !12585, file: !1, line: 3194, column: 3)
!12589 = !DILocation(line: 3194, column: 19, scope: !12588)
!12590 = !DILocation(line: 3194, column: 17, scope: !12588)
!12591 = !DILocation(line: 3194, column: 3, scope: !12585)
!12592 = !DILocation(line: 3195, column: 29, scope: !12593)
!12593 = distinct !DILexicalBlock(scope: !12588, file: !1, line: 3194, column: 27)
!12594 = !DILocation(line: 3195, column: 32, scope: !12593)
!12595 = !DILocation(line: 3195, column: 36, scope: !12593)
!12596 = !DILocation(line: 3195, column: 40, scope: !12593)
!12597 = !DILocation(line: 3195, column: 42, scope: !12593)
!12598 = !DILocation(line: 3195, column: 49, scope: !12593)
!12599 = !DILocation(line: 3195, column: 47, scope: !12593)
!12600 = !DILocation(line: 3195, column: 14, scope: !12593)
!12601 = !DILocation(line: 3195, column: 12, scope: !12593)
!12602 = !DILocation(line: 3197, column: 8, scope: !12603)
!12603 = distinct !DILexicalBlock(scope: !12593, file: !1, line: 3197, column: 8)
!12604 = !DILocation(line: 3197, column: 11, scope: !12603)
!12605 = !DILocation(line: 3197, column: 17, scope: !12603)
!12606 = !DILocation(line: 3197, column: 14, scope: !12603)
!12607 = !DILocation(line: 3197, column: 8, scope: !12593)
!12608 = !DILocation(line: 3198, column: 24, scope: !12609)
!12609 = distinct !DILexicalBlock(scope: !12603, file: !1, line: 3197, column: 26)
!12610 = !DILocation(line: 3198, column: 28, scope: !12609)
!12611 = !DILocation(line: 3198, column: 32, scope: !12609)
!12612 = !DILocation(line: 3198, column: 35, scope: !12609)
!12613 = !DILocation(line: 3198, column: 39, scope: !12609)
!12614 = !DILocation(line: 3198, column: 5, scope: !12609)
!12615 = !DILocation(line: 3201, column: 9, scope: !12616)
!12616 = distinct !DILexicalBlock(scope: !12609, file: !1, line: 3201, column: 9)
!12617 = !DILocation(line: 3201, column: 13, scope: !12616)
!12618 = !DILocation(line: 3201, column: 15, scope: !12616)
!12619 = !DILocation(line: 3201, column: 11, scope: !12616)
!12620 = !DILocation(line: 3201, column: 19, scope: !12616)
!12621 = !DILocation(line: 3201, column: 22, scope: !12616)
!12622 = !DILocation(line: 3201, column: 25, scope: !12616)
!12623 = !DILocation(line: 3201, column: 31, scope: !12616)
!12624 = !DILocation(line: 3201, column: 34, scope: !12616)
!12625 = !DILocation(line: 3201, column: 36, scope: !12616)
!12626 = !DILocation(line: 3201, column: 28, scope: !12616)
!12627 = !DILocation(line: 3201, column: 9, scope: !12609)
!12628 = !DILocation(line: 3202, column: 10, scope: !12629)
!12629 = distinct !DILexicalBlock(scope: !12630, file: !1, line: 3202, column: 10)
!12630 = distinct !DILexicalBlock(scope: !12616, file: !1, line: 3201, column: 42)
!12631 = !DILocation(line: 3202, column: 49, scope: !12629)
!12632 = !DILocation(line: 3203, column: 11, scope: !12629)
!12633 = !DILocation(line: 3202, column: 10, scope: !12630)
!12634 = !DILocation(line: 3205, column: 7, scope: !12635)
!12635 = distinct !DILexicalBlock(scope: !12629, file: !1, line: 3204, column: 6)
!12636 = !DILocation(line: 3206, column: 6, scope: !12635)
!12637 = !DILocation(line: 3208, column: 11, scope: !12638)
!12638 = distinct !DILexicalBlock(scope: !12630, file: !1, line: 3208, column: 10)
!12639 = !DILocation(line: 3208, column: 52, scope: !12638)
!12640 = !DILocation(line: 3209, column: 10, scope: !12638)
!12641 = !DILocation(line: 3208, column: 10, scope: !12630)
!12642 = !DILocation(line: 3211, column: 7, scope: !12643)
!12643 = distinct !DILexicalBlock(scope: !12638, file: !1, line: 3210, column: 6)
!12644 = !DILocation(line: 3212, column: 6, scope: !12643)
!12645 = !DILocation(line: 3213, column: 5, scope: !12630)
!12646 = !DILocation(line: 3215, column: 17, scope: !12616)
!12647 = !DILocation(line: 3215, column: 20, scope: !12616)
!12648 = !DILocation(line: 3215, column: 15, scope: !12616)
!12649 = !DILocation(line: 3216, column: 4, scope: !12609)
!12650 = !DILocation(line: 3217, column: 3, scope: !12593)
!12651 = !DILocation(line: 3194, column: 23, scope: !12588)
!12652 = !DILocation(line: 3194, column: 3, scope: !12588)
!12653 = distinct !{!12653, !12591, !12654}
!12654 = !DILocation(line: 3217, column: 3, scope: !12585)
!12655 = !DILocation(line: 3220, column: 7, scope: !12656)
!12656 = distinct !DILexicalBlock(scope: !12554, file: !1, line: 3220, column: 7)
!12657 = !DILocation(line: 3220, column: 7, scope: !12554)
!12658 = !DILocation(line: 3221, column: 4, scope: !12659)
!12659 = distinct !DILexicalBlock(scope: !12656, file: !1, line: 3220, column: 14)
!12660 = !DILocation(line: 3222, column: 3, scope: !12659)
!12661 = !DILocation(line: 3223, column: 2, scope: !12554)
!12662 = !DILocation(line: 3225, column: 2, scope: !12663)
!12663 = distinct !DILexicalBlock(scope: !12314, file: !1, line: 3225, column: 2)
!12664 = !DILocation(line: 3225, column: 2, scope: !12314)
!12665 = !DILocation(line: 3225, column: 2, scope: !12666)
!12666 = distinct !DILexicalBlock(scope: !12663, file: !1, line: 3225, column: 2)
!12667 = !DILocation(line: 3226, column: 2, scope: !12668)
!12668 = distinct !DILexicalBlock(scope: !12314, file: !1, line: 3226, column: 2)
!12669 = !DILocation(line: 3226, column: 2, scope: !12314)
!12670 = !DILocation(line: 3226, column: 2, scope: !12671)
!12671 = distinct !DILexicalBlock(scope: !12668, file: !1, line: 3226, column: 2)
!12672 = !DILocation(line: 3227, column: 2, scope: !12673)
!12673 = distinct !DILexicalBlock(scope: !12314, file: !1, line: 3227, column: 2)
!12674 = !DILocation(line: 3227, column: 2, scope: !12314)
!12675 = !DILocation(line: 3227, column: 2, scope: !12676)
!12676 = distinct !DILexicalBlock(scope: !12673, file: !1, line: 3227, column: 2)
!12677 = !DILocation(line: 3228, column: 9, scope: !12314)
!12678 = !DILocation(line: 3228, column: 2, scope: !12314)
