; ModuleID = 'tree-ssa.c'
source_filename = "tree-ssa.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.pointer_map_t = type opaque
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type opaque
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type opaque
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_d* }
%struct.gimple_seq_node_d = type { %union.gimple_statement_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d* }
%union.gimple_statement_d = type { %struct.gimple_statement_phi }
%struct.gimple_statement_phi = type { %struct.gimple_statement_base, i32, i32, %union.tree_node*, [1 x %struct.phi_arg_d] }
%struct.gimple_statement_base = type { i32, i32, i32, i32, %struct.basic_block_def*, %union.tree_node* }
%struct.phi_arg_d = type { %struct.ssa_use_operand_d, %union.tree_node*, i32 }
%struct.ssa_use_operand_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %union.anon, %union.tree_node** }
%union.anon = type { %union.gimple_statement_d* }
%struct.gimple_df = type { %struct.htab*, %struct.VEC_gimple_gc*, %struct.VEC_tree_gc*, %union.tree_node*, %struct.pt_solution, %struct.pt_solution, %struct.pointer_map_t*, %union.tree_node*, %struct.htab*, %struct.bitmap_head_def*, i8, %struct.ssa_operands }
%struct.VEC_gimple_gc = type { %struct.VEC_gimple_base }
%struct.VEC_gimple_base = type { i32, i32, [1 x %union.gimple_statement_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%struct.pt_solution = type { i8, %struct.bitmap_head_def* }
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.ssa_operands = type { %struct.ssa_operand_memory_d*, i32, i32, i8, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.ssa_operand_memory_d = type { %struct.ssa_operand_memory_d*, [1 x i8] }
%struct.def_optype_d = type { %struct.def_optype_d*, %union.tree_node** }
%struct.use_optype_d = type { %struct.use_optype_d*, %struct.ssa_use_operand_d }
%struct.loops = type opaque
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type { %struct.unnamed_section }
%struct.unnamed_section = type { %struct.section_common, void (i8*)*, i8*, %union.section* }
%struct.section_common = type { i32 }
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.gcc_target = type { %struct.asm_out, %struct.sched, %struct.vectorize, i32, void ()*, i8 (i64, i8*, i32)*, void ()*, i32 ()*, i32 ()*, i32 ()*, i32 ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %struct.attribute_spec*, i32 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void ()*, %union.tree_node* (i32, i8)*, %struct.rtx_def* (%union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32)*, %union.tree_node* (i32, %union.tree_node*, i8*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, i8)*, %union.tree_node* (i32, i8, i8)*, i8* (%union.tree_node*)*, void ()*, i32 (%union.tree_node*, i8*, i32)*, i8 ()*, i32 ()*, i8 (i8)*, i8 ()*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, i8 (i32, %struct.rtx_def*, i8)*, i8 (i32, %struct.rtx_def*)*, i64, i64, i8 (%struct.rtx_def*)*, i8 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*, i32)*, i8* (i8*)*, i64 (i32)*, i32 (i32)*, i32 (i32, i32)*, i8 (i32)*, %struct.addr_space, i8 (i32)*, i8 (i32)*, i8 (%struct.rtx_def*, i32, i32, i32*, i8)*, i32 (%struct.rtx_def*, i8)*, %struct.rtx_def* (%struct.rtx_def*)*, i32 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, void (%union.tree_node*)*, i8 (i32*, i32*)*, i32 (i32, i32)*, void ()*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, i8* (i64*)*, i8* (i8*, i64)*, i8* (i32)*, i8 ()*, %struct.rtx_def* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i32 (%union.tree_node*)*, void (i8*, %struct.rtx_def*, i32)*, i8 (%struct.stdarg_info*, %union.gimple_statement_d*)*, %union.tree_node* ()*, %union.tree_node* ()*, i8* (%struct.rtx_def*)*, i8 (%union.tree_node*)*, i64, %struct.calls, i8* (%union.tree_node*, %union.tree_node*)*, i8* (i32, %union.tree_node*)*, i8* (i32, %union.tree_node*, %union.tree_node*)*, i8* (%union.tree_node*)*, i8* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i32* ()*, i32 (i8, %struct.rtx_def*, i32, i32, %struct.secondary_reload_info*)*, void ()*, void ()*, i8 (i32)*, i32 ()*, i8 ()*, i8 (i32, i32)*, %struct.c, %struct.cxx, %struct.emutls, %struct.target_option_hooks, void (%struct.bitmap_head_def*)*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.asm_out = type { i8*, i8*, i8*, %struct.asm_int_op, %struct.asm_int_op, i8 (%struct.rtx_def*, i32, i32)*, void (%struct._IO_FILE*, i8*)*, void (%struct._IO_FILE*, %union.tree_node*)*, void (%struct._IO_FILE*, %union.tree_node*, i32, i32)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, %struct.rtx_def*)*, void (%struct._IO_FILE*, i8*, i64)*, i8 (%struct.rtx_def*)*, void (%union.tree_node*, i32)*, void (%struct._IO_FILE*, i64)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, i64)*, void ()*, void (i8*, i32, %union.tree_node*)*, i32 ()*, %union.section* (%union.tree_node*, i32, i64)*, %union.section* (i32, %struct.rtx_def*, i64)*, void (%union.tree_node*, i32)*, %union.section* (%union.tree_node*)*, void (%struct.rtx_def*, i32)*, void (%struct.rtx_def*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i64, i64, %union.tree_node*)*, i8 (%union.tree_node*, i64, i64, %union.tree_node*)*, void ()*, void ()*, void ()*, void (%struct.rtx_def*)*, void (i8*)*, i32 (i32, i8*)*, i8*, void (%struct.rtx_def*)*, void (%struct._IO_FILE*, i32, %struct.rtx_def*)*, void (%struct._IO_FILE*, %struct.rtx_def*, %struct.rtx_def**, i32)*, void (%struct._IO_FILE*)* }
%struct.asm_int_op = type { i8*, i8*, i8*, i8* }
%struct.sched = type { i32 (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)*, i32 ()*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, void (%struct.rtx_def*, %struct.rtx_def*)*, void ()*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, void ()*, void ()*, i32 ()*, i32 (%struct.rtx_def*)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32, i32, i32*)*, i8 (%struct._dep*, i32, i32)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def*, i32, i32)*, void ()*, i8* ()*, void (i8*, i8)*, void (i8*)*, void (i8*)*, void (i8*)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def**)*, i8 (i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, i8 (%struct.rtx_def*)*, void (%struct.spec_info_def*)*, i32 (%struct.rtx_def*)*, i32 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i32 (%struct.ddg*)* }
%struct._dep = type opaque
%struct.spec_info_def = type opaque
%struct.ddg = type opaque
%struct.vectorize = type { %union.tree_node* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (i32, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i32 (i8)*, i8 (%union.tree_node*, i8)*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (i32, %union.tree_node*, i32, i8)* }
%struct.attribute_spec = type { i8*, i32, i32, i8, i8, i8, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* }
%struct.addr_space = type { i32 (i8)*, i32 (i8)*, i8 (i32, i8)*, i8 (i32, %struct.rtx_def*, i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32, i8)*, i8 (i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %union.tree_node*, %union.tree_node*)* }
%struct.stdarg_info = type opaque
%struct.calls = type { i32 (%union.tree_node*, i32, i32*, %union.tree_node*, i32)*, i8 (%union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, i32)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, %struct.rtx_def* ()*, void (%struct.ix86_args*, i32, %union.tree_node*, i32*, i32)*, i8 (%struct.ix86_args*)*, i8 (%struct.ix86_args*)*, i8 (%union.tree_node*)*, i8 (i32, %union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i32 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i8* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, %union.tree_node*, i8)*, %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, i8 ()*, %struct.rtx_def* (%union.tree_node*, i8)*, void (%struct.rtx_def*, %union.tree_node*, %struct.rtx_def*)*, %struct.rtx_def* (%struct.rtx_def*)* }
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.secondary_reload_info = type { i32, i32, %struct.secondary_reload_info*, i32 }
%struct.c = type { i32 (i8)* }
%struct.cxx = type { %union.tree_node* ()*, i8 ()*, %union.tree_node* (%union.tree_node*)*, i8 ()*, i32 (%union.tree_node*, i32)*, i8 ()*, i8 ()*, void (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void (%union.tree_node*)* }
%struct.emutls = type { i8*, i8*, i8*, i8*, i8*, i8*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i8, i8 }
%struct.target_option_hooks = type { i8 (%union.tree_node*, %union.tree_node*, %union.tree_node*, i32)*, void (%struct.cl_target_option*)*, void (%struct.cl_target_option*)*, void (%struct._IO_FILE*, i32, %struct.cl_target_option*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)* }
%struct.cl_target_option = type { i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8 }
%struct.gimple_opt_pass = type { %struct.opt_pass }
%struct.opt_pass = type { i32, i8*, i8 ()*, i32 ()*, %struct.opt_pass*, %struct.opt_pass*, i32, i32, i32, i32, i32, i32, i32 }
%struct.VEC_edge_var_map_heap = type { %struct.VEC_edge_var_map_base }
%struct.VEC_edge_var_map_base = type { i32, i32, [1 x %struct._edge_var_map] }
%struct._edge_var_map = type { %union.tree_node*, %union.tree_node*, i32 }
%struct.gimple_stmt_iterator = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_d*, %struct.basic_block_def* }
%struct.immediate_use_iterator_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* }
%struct.walk_stmt_info = type { %struct.gimple_stmt_iterator, i8*, %struct.pointer_set_t*, i8, i8, i8, i8, %union.tree_node* }
%struct.pointer_set_t = type opaque
%struct.tree_ssa_name = type { %struct.tree_common, %union.tree_node*, %union.gimple_statement_d*, i32, %struct.ptr_info_def*, %struct.ssa_use_operand_d }
%struct.ptr_info_def = type { %struct.pt_solution }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_type_symtab, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_type* }
%union.tree_type_symtab = type { i8* }
%struct.lang_type = type opaque
%struct.ssa_operand_iterator_d = type { i8, i32, %struct.def_optype_d*, %struct.use_optype_d*, i32, i32, %union.gimple_statement_d* }
%struct.bitmap_iterator = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, i64 }
%struct.edge_iterator = type { i32, %struct.VEC_edge_gc** }
%struct.tree_exp = type { %struct.tree_common, i32, %union.tree_node*, [1 x %union.tree_node*] }
%struct.gimple_statement_with_memory_ops_base = type { %struct.gimple_statement_with_ops_base, %union.tree_node*, %union.tree_node* }
%struct.gimple_statement_with_ops_base = type { %struct.gimple_statement_base, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.gimple_statement_with_ops = type { %struct.gimple_statement_with_ops_base, [1 x %union.tree_node*] }
%struct.int_tree_map = type { i32, %union.tree_node* }
%struct.referenced_var_iterator = type { %struct.htab_iterator }
%struct.htab_iterator = type { %struct.htab*, i8**, i8** }
%struct.var_ann_d = type { i8, i32, %union.tree_node* }
%struct.tree_var_decl = type { %struct.tree_decl_with_vis, %struct.var_ann_d* }
%struct.tree_parm_decl = type { %struct.tree_decl_with_rtl, %struct.rtx_def*, %struct.var_ann_d* }
%struct.tree_result_decl = type { %struct.tree_decl_with_rtl, %struct.var_ann_d* }
%struct.tree_list = type { %struct.tree_common, %union.tree_node*, %union.tree_node* }
%struct.walk_data = type { %union.gimple_statement_d*, i8, i8 }
%struct.expanded_location = type { i8*, i32, i32, i8 }

@edge_var_maps = internal global %struct.pointer_map_t* null, align 8, !dbg !0
@flag_var_tracking_assignments = external dso_local global i32, align 4
@tree_code_type = external dso_local constant [0 x i32], align 4
@cfun = external dso_local global %struct.function*, align 8
@.str = private unnamed_addr constant [11 x i8] c"tree-ssa.c\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@timevar_enable = external dso_local global i8, align 1
@.str.2 = private unnamed_addr constant [40 x i8] c"AUX pointer initialized for edge %d->%d\00", align 1
@.str.3 = private unnamed_addr constant [52 x i8] c"stmt (%p) marked modified after optimization pass: \00", align 1
@stderr = external dso_local global %struct._IO_FILE*, align 8
@optimize = external dso_local global i32, align 4
@.str.4 = private unnamed_addr constant [49 x i8] c"statement makes a memory store, but has no VDEFS\00", align 1
@.str.5 = private unnamed_addr constant [44 x i8] c"statement has VDEF operand not in defs list\00", align 1
@.str.6 = private unnamed_addr constant [39 x i8] c"statement has VDEF but no VUSE operand\00", align 1
@.str.7 = private unnamed_addr constant [41 x i8] c"VDEF and VUSE do not use the same symbol\00", align 1
@.str.8 = private unnamed_addr constant [44 x i8] c"statement has VUSE operand not in uses list\00", align 1
@.str.9 = private unnamed_addr constant [13 x i8] c"in statement\00", align 1
@.str.10 = private unnamed_addr constant [27 x i8] c"SSA_NAME_DEF_STMT is wrong\00", align 1
@.str.11 = private unnamed_addr constant [32 x i8] c"Expected definition statement:\0A\00", align 1
@.str.12 = private unnamed_addr constant [31 x i8] c"\0AActual definition statement:\0A\00", align 1
@.str.13 = private unnamed_addr constant [18 x i8] c"verify_ssa failed\00", align 1
@targetm = external dso_local global %struct.gcc_target, align 8
@.str.14 = private unnamed_addr constant [26 x i8] c"*early_warn_uninitialized\00", align 1
@pass_early_warn_uninitialized = dso_local global %struct.gimple_opt_pass { %struct.opt_pass { i32 0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.14, i32 0, i32 0), i8 ()* @gate_warn_uninitialized, i32 ()* @execute_early_warn_uninitialized, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 0, i32 32, i32 0, i32 0, i32 0, i32 0 } }, align 8, !dbg !2939
@.str.15 = private unnamed_addr constant [25 x i8] c"*late_warn_uninitialized\00", align 1
@pass_late_warn_uninitialized = dso_local global %struct.gimple_opt_pass { %struct.opt_pass { i32 0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.15, i32 0, i32 0), i8 ()* @gate_warn_uninitialized, i32 ()* @execute_late_warn_uninitialized, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 0, i32 32, i32 0, i32 0, i32 0, i32 0 } }, align 8, !dbg !2967
@dump_file = external dso_local global %struct._IO_FILE*, align 8
@.str.16 = private unnamed_addr constant [32 x i8] c"No longer having address taken \00", align 1
@.str.17 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.18 = private unnamed_addr constant [31 x i8] c"Decl is now a gimple register \00", align 1
@.str.19 = private unnamed_addr constant [13 x i8] c"addressables\00", align 1
@pass_update_address_taken = dso_local global %struct.gimple_opt_pass { %struct.opt_pass { i32 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.19, i32 0, i32 0), i8 ()* null, i32 ()* null, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 0, i32 32, i32 0, i32 0, i32 0, i32 2097153 } }, align 8, !dbg !2969
@.str.20 = private unnamed_addr constant [11 x i8] c"./gimple.h\00", align 1
@gimple_ops_offset_ = external dso_local constant [0 x i64], align 8
@gss_for_code_ = external dso_local constant [0 x i32], align 4
@.str.21 = private unnamed_addr constant [21 x i8] c"./tree-flow-inline.h\00", align 1
@bitmap_zero_bits = external dso_local global %struct.bitmap_element_def, align 8
@.str.22 = private unnamed_addr constant [51 x i8] c"SSA_NAME created in two different blocks %i and %i\00", align 1
@.str.23 = private unnamed_addr constant [26 x i8] c"while verifying SSA_NAME \00", align 1
@.str.24 = private unnamed_addr constant [15 x i8] c" in statement\0A\00", align 1
@.str.25 = private unnamed_addr constant [16 x i8] c"./basic-block.h\00", align 1
@.str.26 = private unnamed_addr constant [59 x i8] c"incoming edge count does not match number of PHI arguments\00", align 1
@.str.27 = private unnamed_addr constant [40 x i8] c"PHI argument is missing for edge %d->%d\00", align 1
@.str.28 = private unnamed_addr constant [43 x i8] c"PHI argument is not SSA_NAME, or invariant\00", align 1
@.str.29 = private unnamed_addr constant [43 x i8] c"address taken, but ADDRESSABLE bit not set\00", align 1
@.str.30 = private unnamed_addr constant [35 x i8] c"wrong edge %d->%d for PHI argument\00", align 1
@.str.31 = private unnamed_addr constant [14 x i8] c"PHI argument\0A\00", align 1
@.str.32 = private unnamed_addr constant [14 x i8] c"for PHI node\0A\00", align 1
@.str.33 = private unnamed_addr constant [28 x i8] c"expected an SSA_NAME object\00", align 1
@.str.34 = private unnamed_addr constant [49 x i8] c"type mismatch between an SSA_NAME and its symbol\00", align 1
@.str.35 = private unnamed_addr constant [60 x i8] c"found an SSA_NAME that had been released into the free pool\00", align 1
@.str.36 = private unnamed_addr constant [49 x i8] c"found a virtual definition for a GIMPLE register\00", align 1
@.str.37 = private unnamed_addr constant [34 x i8] c"virtual SSA name for non-VOP decl\00", align 1
@.str.38 = private unnamed_addr constant [43 x i8] c"found a real definition for a non-register\00", align 1
@.str.39 = private unnamed_addr constant [57 x i8] c"found a default name with a non-empty defining statement\00", align 1
@.str.40 = private unnamed_addr constant [19 x i8] c"missing definition\00", align 1
@.str.41 = private unnamed_addr constant [57 x i8] c"definition in block %i does not dominate use in block %i\00", align 1
@.str.42 = private unnamed_addr constant [39 x i8] c"definition in block %i follows the use\00", align 1
@.str.43 = private unnamed_addr constant [46 x i8] c"SSA_NAME_OCCURS_IN_ABNORMAL_PHI should be set\00", align 1
@.str.44 = private unnamed_addr constant [22 x i8] c"no immediate_use list\00", align 1
@.str.45 = private unnamed_addr constant [25 x i8] c"wrong immediate use list\00", align 1
@.str.46 = private unnamed_addr constant [15 x i8] c"for SSA_NAME: \00", align 1
@.str.47 = private unnamed_addr constant [16 x i8] c" in statement:\0A\00", align 1
@warn_uninitialized = external dso_local global i32, align 4
@.str.48 = private unnamed_addr constant [43 x i8] c"%qD is used uninitialized in this function\00", align 1
@.str.49 = private unnamed_addr constant [47 x i8] c"%qD may be used uninitialized in this function\00", align 1
@.str.50 = private unnamed_addr constant [22 x i8] c"%qD was declared here\00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local void @redirect_edge_var_map_add(%struct.edge_def* %e, %union.tree_node* %result, %union.tree_node* %def, i32 %locus) #0 !dbg !2975 {
entry:
  %e.addr = alloca %struct.edge_def*, align 8
  %result.addr = alloca %union.tree_node*, align 8
  %def.addr = alloca %union.tree_node*, align 8
  %locus.addr = alloca i32, align 4
  %slot = alloca i8**, align 8
  %old_head = alloca %struct.VEC_edge_var_map_heap*, align 8
  %head = alloca %struct.VEC_edge_var_map_heap*, align 8
  %new_node = alloca %struct._edge_var_map, align 8
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !2979, metadata !DIExpression()), !dbg !2980
  store %union.tree_node* %result, %union.tree_node** %result.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %result.addr, metadata !2981, metadata !DIExpression()), !dbg !2982
  store %union.tree_node* %def, %union.tree_node** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %def.addr, metadata !2983, metadata !DIExpression()), !dbg !2984
  store i32 %locus, i32* %locus.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %locus.addr, metadata !2985, metadata !DIExpression()), !dbg !2986
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !2987, metadata !DIExpression()), !dbg !2988
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_var_map_heap** %old_head, metadata !2989, metadata !DIExpression()), !dbg !2990
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_var_map_heap** %head, metadata !2991, metadata !DIExpression()), !dbg !2992
  call void @llvm.dbg.declare(metadata %struct._edge_var_map* %new_node, metadata !2993, metadata !DIExpression()), !dbg !2994
  %0 = load %struct.pointer_map_t*, %struct.pointer_map_t** @edge_var_maps, align 8, !dbg !2995
  %cmp = icmp eq %struct.pointer_map_t* %0, null, !dbg !2997
  br i1 %cmp, label %if.then, label %if.end, !dbg !2998

if.then:                                          ; preds = %entry
  %call = call %struct.pointer_map_t* @pointer_map_create(), !dbg !2999
  store %struct.pointer_map_t* %call, %struct.pointer_map_t** @edge_var_maps, align 8, !dbg !3000
  br label %if.end, !dbg !3001

if.end:                                           ; preds = %if.then, %entry
  %1 = load %struct.pointer_map_t*, %struct.pointer_map_t** @edge_var_maps, align 8, !dbg !3002
  %2 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3003
  %3 = bitcast %struct.edge_def* %2 to i8*, !dbg !3003
  %call1 = call i8** @pointer_map_insert(%struct.pointer_map_t* %1, i8* %3), !dbg !3004
  store i8** %call1, i8*** %slot, align 8, !dbg !3005
  %4 = load i8**, i8*** %slot, align 8, !dbg !3006
  %5 = load i8*, i8** %4, align 8, !dbg !3007
  %6 = bitcast i8* %5 to %struct.VEC_edge_var_map_heap*, !dbg !3008
  store %struct.VEC_edge_var_map_heap* %6, %struct.VEC_edge_var_map_heap** %head, align 8, !dbg !3009
  store %struct.VEC_edge_var_map_heap* %6, %struct.VEC_edge_var_map_heap** %old_head, align 8, !dbg !3010
  %7 = load %struct.VEC_edge_var_map_heap*, %struct.VEC_edge_var_map_heap** %head, align 8, !dbg !3011
  %tobool = icmp ne %struct.VEC_edge_var_map_heap* %7, null, !dbg !3011
  br i1 %tobool, label %if.end4, label %if.then2, !dbg !3013

if.then2:                                         ; preds = %if.end
  %call3 = call %struct.VEC_edge_var_map_heap* @VEC_edge_var_map_heap_alloc(i32 5), !dbg !3014
  store %struct.VEC_edge_var_map_heap* %call3, %struct.VEC_edge_var_map_heap** %head, align 8, !dbg !3016
  %8 = load %struct.VEC_edge_var_map_heap*, %struct.VEC_edge_var_map_heap** %head, align 8, !dbg !3017
  %9 = bitcast %struct.VEC_edge_var_map_heap* %8 to i8*, !dbg !3017
  %10 = load i8**, i8*** %slot, align 8, !dbg !3018
  store i8* %9, i8** %10, align 8, !dbg !3019
  br label %if.end4, !dbg !3020

if.end4:                                          ; preds = %if.then2, %if.end
  %11 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !3021
  %def5 = getelementptr inbounds %struct._edge_var_map, %struct._edge_var_map* %new_node, i32 0, i32 1, !dbg !3022
  store %union.tree_node* %11, %union.tree_node** %def5, align 8, !dbg !3023
  %12 = load %union.tree_node*, %union.tree_node** %result.addr, align 8, !dbg !3024
  %result6 = getelementptr inbounds %struct._edge_var_map, %struct._edge_var_map* %new_node, i32 0, i32 0, !dbg !3025
  store %union.tree_node* %12, %union.tree_node** %result6, align 8, !dbg !3026
  %13 = load i32, i32* %locus.addr, align 4, !dbg !3027
  %locus7 = getelementptr inbounds %struct._edge_var_map, %struct._edge_var_map* %new_node, i32 0, i32 2, !dbg !3028
  store i32 %13, i32* %locus7, align 8, !dbg !3029
  %call8 = call %struct._edge_var_map* @VEC_edge_var_map_heap_safe_push(%struct.VEC_edge_var_map_heap** %head, %struct._edge_var_map* %new_node), !dbg !3030
  %14 = load %struct.VEC_edge_var_map_heap*, %struct.VEC_edge_var_map_heap** %old_head, align 8, !dbg !3031
  %15 = load %struct.VEC_edge_var_map_heap*, %struct.VEC_edge_var_map_heap** %head, align 8, !dbg !3033
  %cmp9 = icmp ne %struct.VEC_edge_var_map_heap* %14, %15, !dbg !3034
  br i1 %cmp9, label %if.then10, label %if.end11, !dbg !3035

if.then10:                                        ; preds = %if.end4
  %16 = load %struct.VEC_edge_var_map_heap*, %struct.VEC_edge_var_map_heap** %head, align 8, !dbg !3036
  %17 = bitcast %struct.VEC_edge_var_map_heap* %16 to i8*, !dbg !3036
  %18 = load i8**, i8*** %slot, align 8, !dbg !3038
  store i8* %17, i8** %18, align 8, !dbg !3039
  br label %if.end11, !dbg !3040

if.end11:                                         ; preds = %if.then10, %if.end4
  ret void, !dbg !3041
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local %struct.pointer_map_t* @pointer_map_create() #2

declare dso_local i8** @pointer_map_insert(%struct.pointer_map_t*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_edge_var_map_heap* @VEC_edge_var_map_heap_alloc(i32 %alloc_) #0 !dbg !3042 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !3045, metadata !DIExpression()), !dbg !3046
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !3046
  %call = call i8* @vec_heap_o_reserve_exact(i8* null, i32 %0, i64 8, i64 24), !dbg !3046
  %1 = bitcast i8* %call to %struct.VEC_edge_var_map_heap*, !dbg !3046
  ret %struct.VEC_edge_var_map_heap* %1, !dbg !3046
}

; Function Attrs: noinline nounwind uwtable
define internal %struct._edge_var_map* @VEC_edge_var_map_heap_safe_push(%struct.VEC_edge_var_map_heap** %vec_, %struct._edge_var_map* %obj_) #0 !dbg !3047 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_var_map_heap**, align 8
  %obj_.addr = alloca %struct._edge_var_map*, align 8
  store %struct.VEC_edge_var_map_heap** %vec_, %struct.VEC_edge_var_map_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_var_map_heap*** %vec_.addr, metadata !3054, metadata !DIExpression()), !dbg !3055
  store %struct._edge_var_map* %obj_, %struct._edge_var_map** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._edge_var_map** %obj_.addr, metadata !3056, metadata !DIExpression()), !dbg !3055
  %0 = load %struct.VEC_edge_var_map_heap**, %struct.VEC_edge_var_map_heap*** %vec_.addr, align 8, !dbg !3055
  %call = call i32 @VEC_edge_var_map_heap_reserve(%struct.VEC_edge_var_map_heap** %0, i32 1), !dbg !3055
  %1 = load %struct.VEC_edge_var_map_heap**, %struct.VEC_edge_var_map_heap*** %vec_.addr, align 8, !dbg !3055
  %2 = load %struct.VEC_edge_var_map_heap*, %struct.VEC_edge_var_map_heap** %1, align 8, !dbg !3055
  %tobool = icmp ne %struct.VEC_edge_var_map_heap* %2, null, !dbg !3055
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3055

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_edge_var_map_heap**, %struct.VEC_edge_var_map_heap*** %vec_.addr, align 8, !dbg !3055
  %4 = load %struct.VEC_edge_var_map_heap*, %struct.VEC_edge_var_map_heap** %3, align 8, !dbg !3055
  %base = getelementptr inbounds %struct.VEC_edge_var_map_heap, %struct.VEC_edge_var_map_heap* %4, i32 0, i32 0, !dbg !3055
  br label %cond.end, !dbg !3055

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3055

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_var_map_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3055
  %5 = load %struct._edge_var_map*, %struct._edge_var_map** %obj_.addr, align 8, !dbg !3055
  %call1 = call %struct._edge_var_map* @VEC_edge_var_map_base_quick_push(%struct.VEC_edge_var_map_base* %cond, %struct._edge_var_map* %5), !dbg !3055
  ret %struct._edge_var_map* %call1, !dbg !3055
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @redirect_edge_var_map_clear(%struct.edge_def* %e) #0 !dbg !3057 {
entry:
  %e.addr = alloca %struct.edge_def*, align 8
  %slot = alloca i8**, align 8
  %head = alloca %struct.VEC_edge_var_map_heap*, align 8
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !3060, metadata !DIExpression()), !dbg !3061
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !3062, metadata !DIExpression()), !dbg !3063
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_var_map_heap** %head, metadata !3064, metadata !DIExpression()), !dbg !3065
  %0 = load %struct.pointer_map_t*, %struct.pointer_map_t** @edge_var_maps, align 8, !dbg !3066
  %tobool = icmp ne %struct.pointer_map_t* %0, null, !dbg !3066
  br i1 %tobool, label %if.end, label %if.then, !dbg !3068

if.then:                                          ; preds = %entry
  br label %if.end3, !dbg !3069

if.end:                                           ; preds = %entry
  %1 = load %struct.pointer_map_t*, %struct.pointer_map_t** @edge_var_maps, align 8, !dbg !3070
  %2 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3071
  %3 = bitcast %struct.edge_def* %2 to i8*, !dbg !3071
  %call = call i8** @pointer_map_contains(%struct.pointer_map_t* %1, i8* %3), !dbg !3072
  store i8** %call, i8*** %slot, align 8, !dbg !3073
  %4 = load i8**, i8*** %slot, align 8, !dbg !3074
  %tobool1 = icmp ne i8** %4, null, !dbg !3074
  br i1 %tobool1, label %if.then2, label %if.end3, !dbg !3076

if.then2:                                         ; preds = %if.end
  %5 = load i8**, i8*** %slot, align 8, !dbg !3077
  %6 = load i8*, i8** %5, align 8, !dbg !3079
  %7 = bitcast i8* %6 to %struct.VEC_edge_var_map_heap*, !dbg !3080
  store %struct.VEC_edge_var_map_heap* %7, %struct.VEC_edge_var_map_heap** %head, align 8, !dbg !3081
  call void @VEC_edge_var_map_heap_free(%struct.VEC_edge_var_map_heap** %head), !dbg !3082
  %8 = load i8**, i8*** %slot, align 8, !dbg !3083
  store i8* null, i8** %8, align 8, !dbg !3084
  br label %if.end3, !dbg !3085

if.end3:                                          ; preds = %if.then, %if.then2, %if.end
  ret void, !dbg !3086
}

declare dso_local i8** @pointer_map_contains(%struct.pointer_map_t*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_edge_var_map_heap_free(%struct.VEC_edge_var_map_heap** %vec_) #0 !dbg !3087 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_var_map_heap**, align 8
  store %struct.VEC_edge_var_map_heap** %vec_, %struct.VEC_edge_var_map_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_var_map_heap*** %vec_.addr, metadata !3090, metadata !DIExpression()), !dbg !3091
  %0 = load %struct.VEC_edge_var_map_heap**, %struct.VEC_edge_var_map_heap*** %vec_.addr, align 8, !dbg !3092
  %1 = load %struct.VEC_edge_var_map_heap*, %struct.VEC_edge_var_map_heap** %0, align 8, !dbg !3092
  %tobool = icmp ne %struct.VEC_edge_var_map_heap* %1, null, !dbg !3092
  br i1 %tobool, label %if.then, label %if.end, !dbg !3091

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_edge_var_map_heap**, %struct.VEC_edge_var_map_heap*** %vec_.addr, align 8, !dbg !3092
  %3 = load %struct.VEC_edge_var_map_heap*, %struct.VEC_edge_var_map_heap** %2, align 8, !dbg !3092
  %4 = bitcast %struct.VEC_edge_var_map_heap* %3 to i8*, !dbg !3092
  call void @free(i8* %4), !dbg !3092
  br label %if.end, !dbg !3092

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_edge_var_map_heap**, %struct.VEC_edge_var_map_heap*** %vec_.addr, align 8, !dbg !3091
  store %struct.VEC_edge_var_map_heap* null, %struct.VEC_edge_var_map_heap** %5, align 8, !dbg !3091
  ret void, !dbg !3091
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @redirect_edge_var_map_dup(%struct.edge_def* %newe, %struct.edge_def* %olde) #0 !dbg !3094 {
entry:
  %newe.addr = alloca %struct.edge_def*, align 8
  %olde.addr = alloca %struct.edge_def*, align 8
  %new_slot = alloca i8**, align 8
  %old_slot = alloca i8**, align 8
  %head = alloca %struct.VEC_edge_var_map_heap*, align 8
  store %struct.edge_def* %newe, %struct.edge_def** %newe.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %newe.addr, metadata !3097, metadata !DIExpression()), !dbg !3098
  store %struct.edge_def* %olde, %struct.edge_def** %olde.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %olde.addr, metadata !3099, metadata !DIExpression()), !dbg !3100
  call void @llvm.dbg.declare(metadata i8*** %new_slot, metadata !3101, metadata !DIExpression()), !dbg !3102
  call void @llvm.dbg.declare(metadata i8*** %old_slot, metadata !3103, metadata !DIExpression()), !dbg !3104
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_var_map_heap** %head, metadata !3105, metadata !DIExpression()), !dbg !3106
  %0 = load %struct.pointer_map_t*, %struct.pointer_map_t** @edge_var_maps, align 8, !dbg !3107
  %tobool = icmp ne %struct.pointer_map_t* %0, null, !dbg !3107
  br i1 %tobool, label %if.end, label %if.then, !dbg !3109

if.then:                                          ; preds = %entry
  br label %if.end10, !dbg !3110

if.end:                                           ; preds = %entry
  %1 = load %struct.pointer_map_t*, %struct.pointer_map_t** @edge_var_maps, align 8, !dbg !3111
  %2 = load %struct.edge_def*, %struct.edge_def** %newe.addr, align 8, !dbg !3112
  %3 = bitcast %struct.edge_def* %2 to i8*, !dbg !3112
  %call = call i8** @pointer_map_insert(%struct.pointer_map_t* %1, i8* %3), !dbg !3113
  store i8** %call, i8*** %new_slot, align 8, !dbg !3114
  %4 = load %struct.pointer_map_t*, %struct.pointer_map_t** @edge_var_maps, align 8, !dbg !3115
  %5 = load %struct.edge_def*, %struct.edge_def** %olde.addr, align 8, !dbg !3116
  %6 = bitcast %struct.edge_def* %5 to i8*, !dbg !3116
  %call1 = call i8** @pointer_map_contains(%struct.pointer_map_t* %4, i8* %6), !dbg !3117
  store i8** %call1, i8*** %old_slot, align 8, !dbg !3118
  %7 = load i8**, i8*** %old_slot, align 8, !dbg !3119
  %tobool2 = icmp ne i8** %7, null, !dbg !3119
  br i1 %tobool2, label %if.end4, label %if.then3, !dbg !3121

if.then3:                                         ; preds = %if.end
  br label %if.end10, !dbg !3122

if.end4:                                          ; preds = %if.end
  %8 = load i8**, i8*** %old_slot, align 8, !dbg !3123
  %9 = load i8*, i8** %8, align 8, !dbg !3124
  %10 = bitcast i8* %9 to %struct.VEC_edge_var_map_heap*, !dbg !3125
  store %struct.VEC_edge_var_map_heap* %10, %struct.VEC_edge_var_map_heap** %head, align 8, !dbg !3126
  %11 = load %struct.VEC_edge_var_map_heap*, %struct.VEC_edge_var_map_heap** %head, align 8, !dbg !3127
  %tobool5 = icmp ne %struct.VEC_edge_var_map_heap* %11, null, !dbg !3127
  br i1 %tobool5, label %if.then6, label %if.else, !dbg !3129

if.then6:                                         ; preds = %if.end4
  %12 = load %struct.VEC_edge_var_map_heap*, %struct.VEC_edge_var_map_heap** %head, align 8, !dbg !3130
  %tobool7 = icmp ne %struct.VEC_edge_var_map_heap* %12, null, !dbg !3130
  br i1 %tobool7, label %cond.true, label %cond.false, !dbg !3130

cond.true:                                        ; preds = %if.then6
  %13 = load %struct.VEC_edge_var_map_heap*, %struct.VEC_edge_var_map_heap** %head, align 8, !dbg !3130
  %base = getelementptr inbounds %struct.VEC_edge_var_map_heap, %struct.VEC_edge_var_map_heap* %13, i32 0, i32 0, !dbg !3130
  br label %cond.end, !dbg !3130

cond.false:                                       ; preds = %if.then6
  br label %cond.end, !dbg !3130

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_var_map_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3130
  %call8 = call %struct.VEC_edge_var_map_heap* @VEC_edge_var_map_heap_copy(%struct.VEC_edge_var_map_base* %cond), !dbg !3130
  %14 = bitcast %struct.VEC_edge_var_map_heap* %call8 to i8*, !dbg !3130
  %15 = load i8**, i8*** %new_slot, align 8, !dbg !3131
  store i8* %14, i8** %15, align 8, !dbg !3132
  br label %if.end10, !dbg !3133

if.else:                                          ; preds = %if.end4
  %call9 = call %struct.VEC_edge_var_map_heap* @VEC_edge_var_map_heap_alloc(i32 5), !dbg !3134
  %16 = bitcast %struct.VEC_edge_var_map_heap* %call9 to i8*, !dbg !3134
  %17 = load i8**, i8*** %new_slot, align 8, !dbg !3135
  store i8* %16, i8** %17, align 8, !dbg !3136
  br label %if.end10

if.end10:                                         ; preds = %if.then, %if.then3, %if.else, %cond.end
  ret void, !dbg !3137
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_edge_var_map_heap* @VEC_edge_var_map_heap_copy(%struct.VEC_edge_var_map_base* %vec_) #0 !dbg !3138 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_var_map_base*, align 8
  %len_ = alloca i64, align 8
  %new_vec_ = alloca %struct.VEC_edge_var_map_heap*, align 8
  store %struct.VEC_edge_var_map_base* %vec_, %struct.VEC_edge_var_map_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_var_map_base** %vec_.addr, metadata !3142, metadata !DIExpression()), !dbg !3143
  call void @llvm.dbg.declare(metadata i64* %len_, metadata !3144, metadata !DIExpression()), !dbg !3143
  %0 = load %struct.VEC_edge_var_map_base*, %struct.VEC_edge_var_map_base** %vec_.addr, align 8, !dbg !3143
  %tobool = icmp ne %struct.VEC_edge_var_map_base* %0, null, !dbg !3143
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3143

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_edge_var_map_base*, %struct.VEC_edge_var_map_base** %vec_.addr, align 8, !dbg !3143
  %num = getelementptr inbounds %struct.VEC_edge_var_map_base, %struct.VEC_edge_var_map_base* %1, i32 0, i32 0, !dbg !3143
  %2 = load i32, i32* %num, align 8, !dbg !3143
  br label %cond.end, !dbg !3143

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3143

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !3143
  %conv = zext i32 %cond to i64, !dbg !3143
  store i64 %conv, i64* %len_, align 8, !dbg !3143
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_var_map_heap** %new_vec_, metadata !3145, metadata !DIExpression()), !dbg !3143
  store %struct.VEC_edge_var_map_heap* null, %struct.VEC_edge_var_map_heap** %new_vec_, align 8, !dbg !3143
  %3 = load i64, i64* %len_, align 8, !dbg !3146
  %tobool1 = icmp ne i64 %3, 0, !dbg !3146
  br i1 %tobool1, label %if.then, label %if.end, !dbg !3143

if.then:                                          ; preds = %cond.end
  %4 = load i64, i64* %len_, align 8, !dbg !3148
  %conv2 = trunc i64 %4 to i32, !dbg !3148
  %call = call i8* @vec_heap_o_reserve_exact(i8* null, i32 %conv2, i64 8, i64 24), !dbg !3148
  %5 = bitcast i8* %call to %struct.VEC_edge_var_map_heap*, !dbg !3148
  store %struct.VEC_edge_var_map_heap* %5, %struct.VEC_edge_var_map_heap** %new_vec_, align 8, !dbg !3148
  %6 = load i64, i64* %len_, align 8, !dbg !3148
  %conv3 = trunc i64 %6 to i32, !dbg !3148
  %7 = load %struct.VEC_edge_var_map_heap*, %struct.VEC_edge_var_map_heap** %new_vec_, align 8, !dbg !3148
  %base = getelementptr inbounds %struct.VEC_edge_var_map_heap, %struct.VEC_edge_var_map_heap* %7, i32 0, i32 0, !dbg !3148
  %num4 = getelementptr inbounds %struct.VEC_edge_var_map_base, %struct.VEC_edge_var_map_base* %base, i32 0, i32 0, !dbg !3148
  store i32 %conv3, i32* %num4, align 8, !dbg !3148
  %8 = load %struct.VEC_edge_var_map_heap*, %struct.VEC_edge_var_map_heap** %new_vec_, align 8, !dbg !3148
  %base5 = getelementptr inbounds %struct.VEC_edge_var_map_heap, %struct.VEC_edge_var_map_heap* %8, i32 0, i32 0, !dbg !3148
  %vec = getelementptr inbounds %struct.VEC_edge_var_map_base, %struct.VEC_edge_var_map_base* %base5, i32 0, i32 2, !dbg !3148
  %arraydecay = getelementptr inbounds [1 x %struct._edge_var_map], [1 x %struct._edge_var_map]* %vec, i64 0, i64 0, !dbg !3148
  %9 = bitcast %struct._edge_var_map* %arraydecay to i8*, !dbg !3148
  %10 = load %struct.VEC_edge_var_map_base*, %struct.VEC_edge_var_map_base** %vec_.addr, align 8, !dbg !3148
  %vec6 = getelementptr inbounds %struct.VEC_edge_var_map_base, %struct.VEC_edge_var_map_base* %10, i32 0, i32 2, !dbg !3148
  %arraydecay7 = getelementptr inbounds [1 x %struct._edge_var_map], [1 x %struct._edge_var_map]* %vec6, i64 0, i64 0, !dbg !3148
  %11 = bitcast %struct._edge_var_map* %arraydecay7 to i8*, !dbg !3148
  %12 = load i64, i64* %len_, align 8, !dbg !3148
  %mul = mul i64 24, %12, !dbg !3148
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %11, i64 %mul, i1 false), !dbg !3148
  br label %if.end, !dbg !3148

if.end:                                           ; preds = %if.then, %cond.end
  %13 = load %struct.VEC_edge_var_map_heap*, %struct.VEC_edge_var_map_heap** %new_vec_, align 8, !dbg !3143
  ret %struct.VEC_edge_var_map_heap* %13, !dbg !3143
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.VEC_edge_var_map_heap* @redirect_edge_var_map_vector(%struct.edge_def* %e) #0 !dbg !3150 {
entry:
  %retval = alloca %struct.VEC_edge_var_map_heap*, align 8
  %e.addr = alloca %struct.edge_def*, align 8
  %slot = alloca i8**, align 8
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !3153, metadata !DIExpression()), !dbg !3154
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !3155, metadata !DIExpression()), !dbg !3156
  %0 = load %struct.pointer_map_t*, %struct.pointer_map_t** @edge_var_maps, align 8, !dbg !3157
  %tobool = icmp ne %struct.pointer_map_t* %0, null, !dbg !3157
  br i1 %tobool, label %if.end, label %if.then, !dbg !3159

if.then:                                          ; preds = %entry
  store %struct.VEC_edge_var_map_heap* null, %struct.VEC_edge_var_map_heap** %retval, align 8, !dbg !3160
  br label %return, !dbg !3160

if.end:                                           ; preds = %entry
  %1 = load %struct.pointer_map_t*, %struct.pointer_map_t** @edge_var_maps, align 8, !dbg !3161
  %2 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3162
  %3 = bitcast %struct.edge_def* %2 to i8*, !dbg !3162
  %call = call i8** @pointer_map_contains(%struct.pointer_map_t* %1, i8* %3), !dbg !3163
  store i8** %call, i8*** %slot, align 8, !dbg !3164
  %4 = load i8**, i8*** %slot, align 8, !dbg !3165
  %tobool1 = icmp ne i8** %4, null, !dbg !3165
  br i1 %tobool1, label %if.end3, label %if.then2, !dbg !3167

if.then2:                                         ; preds = %if.end
  store %struct.VEC_edge_var_map_heap* null, %struct.VEC_edge_var_map_heap** %retval, align 8, !dbg !3168
  br label %return, !dbg !3168

if.end3:                                          ; preds = %if.end
  %5 = load i8**, i8*** %slot, align 8, !dbg !3169
  %6 = load i8*, i8** %5, align 8, !dbg !3170
  %7 = bitcast i8* %6 to %struct.VEC_edge_var_map_heap*, !dbg !3171
  store %struct.VEC_edge_var_map_heap* %7, %struct.VEC_edge_var_map_heap** %retval, align 8, !dbg !3172
  br label %return, !dbg !3172

return:                                           ; preds = %if.end3, %if.then2, %if.then
  %8 = load %struct.VEC_edge_var_map_heap*, %struct.VEC_edge_var_map_heap** %retval, align 8, !dbg !3173
  ret %struct.VEC_edge_var_map_heap* %8, !dbg !3173
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @redirect_edge_var_map_destroy() #0 !dbg !3174 {
entry:
  %0 = load %struct.pointer_map_t*, %struct.pointer_map_t** @edge_var_maps, align 8, !dbg !3177
  %tobool = icmp ne %struct.pointer_map_t* %0, null, !dbg !3177
  br i1 %tobool, label %if.then, label %if.end, !dbg !3179

if.then:                                          ; preds = %entry
  %1 = load %struct.pointer_map_t*, %struct.pointer_map_t** @edge_var_maps, align 8, !dbg !3180
  call void @pointer_map_traverse(%struct.pointer_map_t* %1, i8 (i8*, i8**, i8*)* @free_var_map_entry, i8* null), !dbg !3182
  %2 = load %struct.pointer_map_t*, %struct.pointer_map_t** @edge_var_maps, align 8, !dbg !3183
  call void @pointer_map_destroy(%struct.pointer_map_t* %2), !dbg !3184
  store %struct.pointer_map_t* null, %struct.pointer_map_t** @edge_var_maps, align 8, !dbg !3185
  br label %if.end, !dbg !3186

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !3187
}

declare dso_local void @pointer_map_traverse(%struct.pointer_map_t*, i8 (i8*, i8**, i8*)*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @free_var_map_entry(i8* %key, i8** %value, i8* %data) #0 !dbg !3188 {
entry:
  %key.addr = alloca i8*, align 8
  %value.addr = alloca i8**, align 8
  %data.addr = alloca i8*, align 8
  %head = alloca %struct.VEC_edge_var_map_heap*, align 8
  store i8* %key, i8** %key.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %key.addr, metadata !3191, metadata !DIExpression()), !dbg !3192
  store i8** %value, i8*** %value.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %value.addr, metadata !3193, metadata !DIExpression()), !dbg !3194
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !3195, metadata !DIExpression()), !dbg !3196
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_var_map_heap** %head, metadata !3197, metadata !DIExpression()), !dbg !3198
  %0 = load i8**, i8*** %value.addr, align 8, !dbg !3199
  %1 = load i8*, i8** %0, align 8, !dbg !3200
  %2 = bitcast i8* %1 to %struct.VEC_edge_var_map_heap*, !dbg !3201
  store %struct.VEC_edge_var_map_heap* %2, %struct.VEC_edge_var_map_heap** %head, align 8, !dbg !3198
  call void @VEC_edge_var_map_heap_free(%struct.VEC_edge_var_map_heap** %head), !dbg !3202
  ret i8 1, !dbg !3203
}

declare dso_local void @pointer_map_destroy(%struct.pointer_map_t*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.edge_def* @ssa_redirect_edge(%struct.edge_def* %e, %struct.basic_block_def* %dest) #0 !dbg !3204 {
entry:
  %e.addr = alloca %struct.edge_def*, align 8
  %dest.addr = alloca %struct.basic_block_def*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %def = alloca %union.tree_node*, align 8
  %locus = alloca i32, align 4
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !3207, metadata !DIExpression()), !dbg !3208
  store %struct.basic_block_def* %dest, %struct.basic_block_def** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %dest.addr, metadata !3209, metadata !DIExpression()), !dbg !3210
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !3211, metadata !DIExpression()), !dbg !3212
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !3213, metadata !DIExpression()), !dbg !3214
  %0 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3215
  call void @redirect_edge_var_map_clear(%struct.edge_def* %0), !dbg !3216
  %1 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3217
  %dest1 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %1, i32 0, i32 1, !dbg !3219
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %dest1, align 8, !dbg !3219
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %2), !dbg !3220
  %3 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !3220
  %4 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !3220
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 24, i1 false), !dbg !3220
  br label %for.cond, !dbg !3221

for.cond:                                         ; preds = %for.inc, %entry
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !3222
  %tobool = icmp ne i8 %call, 0, !dbg !3224
  %lnot = xor i1 %tobool, true, !dbg !3224
  br i1 %lnot, label %for.body, label %for.end, !dbg !3225

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %def, metadata !3226, metadata !DIExpression()), !dbg !3228
  call void @llvm.dbg.declare(metadata i32* %locus, metadata !3229, metadata !DIExpression()), !dbg !3230
  %call2 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !3231
  store %union.gimple_statement_d* %call2, %union.gimple_statement_d** %phi, align 8, !dbg !3232
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !3233
  %6 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3234
  %dest_idx = getelementptr inbounds %struct.edge_def, %struct.edge_def* %6, i32 0, i32 6, !dbg !3235
  %7 = load i32, i32* %dest_idx, align 4, !dbg !3235
  %conv = zext i32 %7 to i64, !dbg !3234
  %call3 = call %union.tree_node* @gimple_phi_arg_def(%union.gimple_statement_d* %5, i64 %conv), !dbg !3236
  store %union.tree_node* %call3, %union.tree_node** %def, align 8, !dbg !3237
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !3238
  %9 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3239
  %dest_idx4 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %9, i32 0, i32 6, !dbg !3240
  %10 = load i32, i32* %dest_idx4, align 4, !dbg !3240
  %conv5 = zext i32 %10 to i64, !dbg !3239
  %call6 = call i32 @gimple_phi_arg_location(%union.gimple_statement_d* %8, i64 %conv5), !dbg !3241
  store i32 %call6, i32* %locus, align 4, !dbg !3242
  %11 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !3243
  %cmp = icmp eq %union.tree_node* %11, null, !dbg !3245
  br i1 %cmp, label %if.then, label %if.end, !dbg !3246

if.then:                                          ; preds = %for.body
  br label %for.inc, !dbg !3247

if.end:                                           ; preds = %for.body
  %12 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3248
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !3249
  %call8 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %13), !dbg !3250
  %14 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !3251
  %15 = load i32, i32* %locus, align 4, !dbg !3252
  call void @redirect_edge_var_map_add(%struct.edge_def* %12, %union.tree_node* %call8, %union.tree_node* %14, i32 %15), !dbg !3253
  br label %for.inc, !dbg !3254

for.inc:                                          ; preds = %if.end, %if.then
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !3255
  br label %for.cond, !dbg !3256, !llvm.loop !3257

for.end:                                          ; preds = %for.cond
  %16 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3259
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %dest.addr, align 8, !dbg !3260
  %call9 = call %struct.edge_def* @redirect_edge_succ_nodup(%struct.edge_def* %16, %struct.basic_block_def* %17), !dbg !3261
  store %struct.edge_def* %call9, %struct.edge_def** %e.addr, align 8, !dbg !3262
  %18 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3263
  ret %struct.edge_def* %18, !dbg !3264
}

declare dso_local void @gsi_start_phis(%struct.gimple_stmt_iterator* sret, %struct.basic_block_def*) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !3265 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !3268, metadata !DIExpression()), !dbg !3269
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !3270
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !3270
  %cmp = icmp eq %struct.gimple_seq_node_d* %0, null, !dbg !3271
  %conv = zext i1 %cmp to i32, !dbg !3271
  %conv1 = trunc i32 %conv to i8, !dbg !3272
  ret i8 %conv1, !dbg !3273
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !3274 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !3277, metadata !DIExpression()), !dbg !3278
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !3279
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !3279
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %0, i32 0, i32 0, !dbg !3280
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3280
  ret %union.gimple_statement_d* %1, !dbg !3281
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_phi_arg_def(%union.gimple_statement_d* %gs, i64 %index) #0 !dbg !3282 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i64, align 8
  %pd = alloca %struct.phi_arg_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3286, metadata !DIExpression()), !dbg !3287
  store i64 %index, i64* %index.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %index.addr, metadata !3288, metadata !DIExpression()), !dbg !3289
  call void @llvm.dbg.declare(metadata %struct.phi_arg_d** %pd, metadata !3290, metadata !DIExpression()), !dbg !3292
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3293
  %1 = load i64, i64* %index.addr, align 8, !dbg !3294
  %conv = trunc i64 %1 to i32, !dbg !3294
  %call = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %0, i32 %conv), !dbg !3295
  store %struct.phi_arg_d* %call, %struct.phi_arg_d** %pd, align 8, !dbg !3292
  %2 = load %struct.phi_arg_d*, %struct.phi_arg_d** %pd, align 8, !dbg !3296
  %imm_use = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %2, i32 0, i32 0, !dbg !3297
  %call1 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %imm_use), !dbg !3298
  ret %union.tree_node* %call1, !dbg !3299
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_phi_arg_location(%union.gimple_statement_d* %gs, i64 %i) #0 !dbg !3300 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3303, metadata !DIExpression()), !dbg !3304
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !3305, metadata !DIExpression()), !dbg !3306
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3307
  %1 = load i64, i64* %i.addr, align 8, !dbg !3308
  %conv = trunc i64 %1 to i32, !dbg !3308
  %call = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %0, i32 %conv), !dbg !3309
  %locus = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %call, i32 0, i32 2, !dbg !3310
  %2 = load i32, i32* %locus, align 8, !dbg !3310
  ret i32 %2, !dbg !3311
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %gs) #0 !dbg !3312 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3316, metadata !DIExpression()), !dbg !3317
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3318
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !3319
  %result = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 3, !dbg !3320
  %1 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !3320
  ret %union.tree_node* %1, !dbg !3321
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_next(%struct.gimple_stmt_iterator* %i) #0 !dbg !3322 {
entry:
  %i.addr = alloca %struct.gimple_stmt_iterator*, align 8
  store %struct.gimple_stmt_iterator* %i, %struct.gimple_stmt_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %i.addr, metadata !3326, metadata !DIExpression()), !dbg !3327
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !3328
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %0, i32 0, i32 0, !dbg !3329
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !3329
  %next = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %1, i32 0, i32 2, !dbg !3330
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %next, align 8, !dbg !3330
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !3331
  %ptr1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %3, i32 0, i32 0, !dbg !3332
  store %struct.gimple_seq_node_d* %2, %struct.gimple_seq_node_d** %ptr1, align 8, !dbg !3333
  ret void, !dbg !3334
}

declare dso_local %struct.edge_def* @redirect_edge_succ_nodup(%struct.edge_def*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @flush_pending_stmts(%struct.edge_def* %e) #0 !dbg !3335 {
entry:
  %e.addr = alloca %struct.edge_def*, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %v = alloca %struct.VEC_edge_var_map_heap*, align 8
  %vm = alloca %struct._edge_var_map*, align 8
  %i = alloca i32, align 4
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %def = alloca %union.tree_node*, align 8
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !3336, metadata !DIExpression()), !dbg !3337
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !3338, metadata !DIExpression()), !dbg !3339
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_var_map_heap** %v, metadata !3340, metadata !DIExpression()), !dbg !3341
  call void @llvm.dbg.declare(metadata %struct._edge_var_map** %vm, metadata !3342, metadata !DIExpression()), !dbg !3343
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3344, metadata !DIExpression()), !dbg !3345
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !3346, metadata !DIExpression()), !dbg !3347
  %0 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3348
  %call = call %struct.VEC_edge_var_map_heap* @redirect_edge_var_map_vector(%struct.edge_def* %0), !dbg !3349
  store %struct.VEC_edge_var_map_heap* %call, %struct.VEC_edge_var_map_heap** %v, align 8, !dbg !3350
  %1 = load %struct.VEC_edge_var_map_heap*, %struct.VEC_edge_var_map_heap** %v, align 8, !dbg !3351
  %tobool = icmp ne %struct.VEC_edge_var_map_heap* %1, null, !dbg !3351
  br i1 %tobool, label %if.end, label %if.then, !dbg !3353

if.then:                                          ; preds = %entry
  br label %return, !dbg !3354

if.end:                                           ; preds = %entry
  %2 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3355
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %2, i32 0, i32 1, !dbg !3357
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !3357
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %3), !dbg !3358
  %4 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !3358
  %5 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !3358
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 %5, i64 24, i1 false), !dbg !3358
  store i32 0, i32* %i, align 4, !dbg !3359
  br label %for.cond, !dbg !3360

for.cond:                                         ; preds = %for.inc, %if.end
  %call1 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !3361
  %tobool2 = icmp ne i8 %call1, 0, !dbg !3361
  br i1 %tobool2, label %land.end, label %land.rhs, !dbg !3363

land.rhs:                                         ; preds = %for.cond
  %6 = load %struct.VEC_edge_var_map_heap*, %struct.VEC_edge_var_map_heap** %v, align 8, !dbg !3364
  %tobool3 = icmp ne %struct.VEC_edge_var_map_heap* %6, null, !dbg !3364
  br i1 %tobool3, label %cond.true, label %cond.false, !dbg !3364

cond.true:                                        ; preds = %land.rhs
  %7 = load %struct.VEC_edge_var_map_heap*, %struct.VEC_edge_var_map_heap** %v, align 8, !dbg !3364
  %base = getelementptr inbounds %struct.VEC_edge_var_map_heap, %struct.VEC_edge_var_map_heap* %7, i32 0, i32 0, !dbg !3364
  br label %cond.end, !dbg !3364

cond.false:                                       ; preds = %land.rhs
  br label %cond.end, !dbg !3364

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_var_map_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3364
  %8 = load i32, i32* %i, align 4, !dbg !3364
  %call4 = call i32 @VEC_edge_var_map_base_iterate(%struct.VEC_edge_var_map_base* %cond, i32 %8, %struct._edge_var_map** %vm), !dbg !3364
  %tobool5 = icmp ne i32 %call4, 0, !dbg !3363
  br label %land.end

land.end:                                         ; preds = %cond.end, %for.cond
  %9 = phi i1 [ false, %for.cond ], [ %tobool5, %cond.end ], !dbg !3365
  br i1 %9, label %for.body, label %for.end, !dbg !3366

for.body:                                         ; preds = %land.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %def, metadata !3367, metadata !DIExpression()), !dbg !3369
  %call6 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !3370
  store %union.gimple_statement_d* %call6, %union.gimple_statement_d** %phi, align 8, !dbg !3371
  %10 = load %struct._edge_var_map*, %struct._edge_var_map** %vm, align 8, !dbg !3372
  %call7 = call %union.tree_node* @redirect_edge_var_map_def(%struct._edge_var_map* %10), !dbg !3373
  store %union.tree_node* %call7, %union.tree_node** %def, align 8, !dbg !3374
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !3375
  %12 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !3376
  %13 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3377
  %14 = load %struct._edge_var_map*, %struct._edge_var_map** %vm, align 8, !dbg !3378
  %call8 = call i32 @redirect_edge_var_map_location(%struct._edge_var_map* %14), !dbg !3379
  call void @add_phi_arg(%union.gimple_statement_d* %11, %union.tree_node* %12, %struct.edge_def* %13, i32 %call8), !dbg !3380
  br label %for.inc, !dbg !3381

for.inc:                                          ; preds = %for.body
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !3382
  %15 = load i32, i32* %i, align 4, !dbg !3383
  %inc = add nsw i32 %15, 1, !dbg !3383
  store i32 %inc, i32* %i, align 4, !dbg !3383
  br label %for.cond, !dbg !3384, !llvm.loop !3385

for.end:                                          ; preds = %land.end
  %16 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3387
  call void @redirect_edge_var_map_clear(%struct.edge_def* %16), !dbg !3388
  br label %return, !dbg !3389

return:                                           ; preds = %for.end, %if.then
  ret void, !dbg !3389
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_var_map_base_iterate(%struct.VEC_edge_var_map_base* %vec_, i32 %ix_, %struct._edge_var_map** %ptr) #0 !dbg !3390 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_edge_var_map_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct._edge_var_map**, align 8
  store %struct.VEC_edge_var_map_base* %vec_, %struct.VEC_edge_var_map_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_var_map_base** %vec_.addr, metadata !3394, metadata !DIExpression()), !dbg !3395
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !3396, metadata !DIExpression()), !dbg !3395
  store %struct._edge_var_map** %ptr, %struct._edge_var_map*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._edge_var_map*** %ptr.addr, metadata !3397, metadata !DIExpression()), !dbg !3395
  %0 = load %struct.VEC_edge_var_map_base*, %struct.VEC_edge_var_map_base** %vec_.addr, align 8, !dbg !3398
  %tobool = icmp ne %struct.VEC_edge_var_map_base* %0, null, !dbg !3398
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !3398

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !3398
  %2 = load %struct.VEC_edge_var_map_base*, %struct.VEC_edge_var_map_base** %vec_.addr, align 8, !dbg !3398
  %num = getelementptr inbounds %struct.VEC_edge_var_map_base, %struct.VEC_edge_var_map_base* %2, i32 0, i32 0, !dbg !3398
  %3 = load i32, i32* %num, align 8, !dbg !3398
  %cmp = icmp ult i32 %1, %3, !dbg !3398
  br i1 %cmp, label %if.then, label %if.else, !dbg !3395

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_edge_var_map_base*, %struct.VEC_edge_var_map_base** %vec_.addr, align 8, !dbg !3400
  %vec = getelementptr inbounds %struct.VEC_edge_var_map_base, %struct.VEC_edge_var_map_base* %4, i32 0, i32 2, !dbg !3400
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !3400
  %idxprom = zext i32 %5 to i64, !dbg !3400
  %arrayidx = getelementptr inbounds [1 x %struct._edge_var_map], [1 x %struct._edge_var_map]* %vec, i64 0, i64 %idxprom, !dbg !3400
  %6 = load %struct._edge_var_map**, %struct._edge_var_map*** %ptr.addr, align 8, !dbg !3400
  store %struct._edge_var_map* %arrayidx, %struct._edge_var_map** %6, align 8, !dbg !3400
  store i32 1, i32* %retval, align 4, !dbg !3400
  br label %return, !dbg !3400

if.else:                                          ; preds = %land.lhs.true, %entry
  %7 = load %struct._edge_var_map**, %struct._edge_var_map*** %ptr.addr, align 8, !dbg !3402
  store %struct._edge_var_map* null, %struct._edge_var_map** %7, align 8, !dbg !3402
  store i32 0, i32* %retval, align 4, !dbg !3402
  br label %return, !dbg !3402

return:                                           ; preds = %if.else, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !3395
  ret i32 %8, !dbg !3395
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @redirect_edge_var_map_def(%struct._edge_var_map* %v) #0 !dbg !3404 {
entry:
  %v.addr = alloca %struct._edge_var_map*, align 8
  store %struct._edge_var_map* %v, %struct._edge_var_map** %v.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._edge_var_map** %v.addr, metadata !3407, metadata !DIExpression()), !dbg !3408
  %0 = load %struct._edge_var_map*, %struct._edge_var_map** %v.addr, align 8, !dbg !3409
  %def = getelementptr inbounds %struct._edge_var_map, %struct._edge_var_map* %0, i32 0, i32 1, !dbg !3410
  %1 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !3410
  ret %union.tree_node* %1, !dbg !3411
}

declare dso_local void @add_phi_arg(%union.gimple_statement_d*, %union.tree_node*, %struct.edge_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @redirect_edge_var_map_location(%struct._edge_var_map* %v) #0 !dbg !3412 {
entry:
  %v.addr = alloca %struct._edge_var_map*, align 8
  store %struct._edge_var_map* %v, %struct._edge_var_map** %v.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._edge_var_map** %v.addr, metadata !3415, metadata !DIExpression()), !dbg !3416
  %0 = load %struct._edge_var_map*, %struct._edge_var_map** %v.addr, align 8, !dbg !3417
  %locus = getelementptr inbounds %struct._edge_var_map, %struct._edge_var_map* %0, i32 0, i32 2, !dbg !3418
  %1 = load i32, i32* %locus, align 8, !dbg !3418
  ret i32 %1, !dbg !3419
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @target_for_debug_bind(%union.tree_node* %var) #0 !dbg !3420 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %var.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !3423, metadata !DIExpression()), !dbg !3424
  %0 = load i32, i32* @flag_var_tracking_assignments, align 4, !dbg !3425
  %tobool = icmp ne i32 %0, 0, !dbg !3425
  br i1 %tobool, label %if.end, label %if.then, !dbg !3427

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !3428
  br label %return, !dbg !3428

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3429
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !3429
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !3429
  %bf.load = load i64, i64* %2, align 8, !dbg !3429
  %bf.clear = and i64 %bf.load, 65535, !dbg !3429
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3429
  %cmp = icmp ne i32 %bf.cast, 32, !dbg !3431
  br i1 %cmp, label %land.lhs.true, label %if.end7, !dbg !3432

land.lhs.true:                                    ; preds = %if.end
  %3 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3433
  %base1 = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !3433
  %4 = bitcast %struct.tree_base* %base1 to i64*, !dbg !3433
  %bf.load2 = load i64, i64* %4, align 8, !dbg !3433
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !3433
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !3433
  %cmp5 = icmp ne i32 %bf.cast4, 34, !dbg !3434
  br i1 %cmp5, label %if.then6, label %if.end7, !dbg !3435

if.then6:                                         ; preds = %land.lhs.true
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !3436
  br label %return, !dbg !3436

if.end7:                                          ; preds = %land.lhs.true, %if.end
  %5 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3437
  %decl_common = bitcast %union.tree_node* %5 to %struct.tree_decl_common*, !dbg !3437
  %decl_flag_2 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !3437
  %6 = bitcast i40* %decl_flag_2 to i64*, !dbg !3437
  %bf.load8 = load i64, i64* %6, align 8, !dbg !3437
  %bf.lshr = lshr i64 %bf.load8, 26, !dbg !3437
  %bf.clear9 = and i64 %bf.lshr, 1, !dbg !3437
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !3437
  %tobool11 = icmp ne i32 %bf.cast10, 0, !dbg !3437
  br i1 %tobool11, label %if.then12, label %if.end14, !dbg !3439

if.then12:                                        ; preds = %if.end7
  %7 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3440
  %call = call %union.tree_node* @decl_value_expr_lookup(%union.tree_node* %7), !dbg !3440
  %call13 = call %union.tree_node* @target_for_debug_bind(%union.tree_node* %call), !dbg !3441
  store %union.tree_node* %call13, %union.tree_node** %retval, align 8, !dbg !3442
  br label %return, !dbg !3442

if.end14:                                         ; preds = %if.end7
  %8 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3443
  %decl_common15 = bitcast %union.tree_node* %8 to %struct.tree_decl_common*, !dbg !3443
  %ignored_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common15, i32 0, i32 2, !dbg !3443
  %9 = bitcast i40* %ignored_flag to i64*, !dbg !3443
  %bf.load16 = load i64, i64* %9, align 8, !dbg !3443
  %bf.lshr17 = lshr i64 %bf.load16, 10, !dbg !3443
  %bf.clear18 = and i64 %bf.lshr17, 1, !dbg !3443
  %bf.cast19 = trunc i64 %bf.clear18 to i32, !dbg !3443
  %tobool20 = icmp ne i32 %bf.cast19, 0, !dbg !3443
  br i1 %tobool20, label %if.then21, label %if.end22, !dbg !3445

if.then21:                                        ; preds = %if.end14
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !3446
  br label %return, !dbg !3446

if.end22:                                         ; preds = %if.end14
  %10 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3447
  %call23 = call zeroext i8 @is_gimple_reg(%union.tree_node* %10), !dbg !3449
  %tobool24 = icmp ne i8 %call23, 0, !dbg !3449
  br i1 %tobool24, label %if.end26, label %if.then25, !dbg !3450

if.then25:                                        ; preds = %if.end22
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !3451
  br label %return, !dbg !3451

if.end26:                                         ; preds = %if.end22
  %11 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3452
  store %union.tree_node* %11, %union.tree_node** %retval, align 8, !dbg !3453
  br label %return, !dbg !3453

return:                                           ; preds = %if.end26, %if.then25, %if.then21, %if.then12, %if.then6, %if.then
  %12 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !3454
  ret %union.tree_node* %12, !dbg !3454
}

declare dso_local %union.tree_node* @decl_value_expr_lookup(%union.tree_node*) #2

declare dso_local zeroext i8 @is_gimple_reg(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @insert_debug_temp_for_var_def(%struct.gimple_stmt_iterator* %gsi, %union.tree_node* %var) #0 !dbg !3455 {
entry:
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %var.addr = alloca %union.tree_node*, align 8
  %imm_iter = alloca %struct.immediate_use_iterator_d, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %def_stmt = alloca %union.gimple_statement_d*, align 8
  %usecount = alloca i32, align 4
  %value = alloca %union.tree_node*, align 8
  %no_value = alloca i8, align 1
  %wi = alloca %struct.walk_stmt_info, align 8
  %def_temp = alloca %union.gimple_statement_d*, align 8
  %vexpr = alloca %union.tree_node*, align 8
  %ngsi = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !3458, metadata !DIExpression()), !dbg !3459
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !3460, metadata !DIExpression()), !dbg !3461
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d* %imm_iter, metadata !3462, metadata !DIExpression()), !dbg !3470
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !3471, metadata !DIExpression()), !dbg !3472
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !3473, metadata !DIExpression()), !dbg !3474
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %def_stmt, metadata !3475, metadata !DIExpression()), !dbg !3476
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %def_stmt, align 8, !dbg !3476
  call void @llvm.dbg.declare(metadata i32* %usecount, metadata !3477, metadata !DIExpression()), !dbg !3478
  store i32 0, i32* %usecount, align 4, !dbg !3478
  call void @llvm.dbg.declare(metadata %union.tree_node** %value, metadata !3479, metadata !DIExpression()), !dbg !3480
  store %union.tree_node* null, %union.tree_node** %value, align 8, !dbg !3480
  %0 = load i32, i32* @flag_var_tracking_assignments, align 4, !dbg !3481
  %tobool = icmp ne i32 %0, 0, !dbg !3481
  br i1 %tobool, label %if.end, label %if.then, !dbg !3483

if.then:                                          ; preds = %entry
  br label %for.end162, !dbg !3484

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3485
  %call = call zeroext i8 @name_registered_for_update_p(%union.tree_node* %1), !dbg !3487
  %tobool1 = icmp ne i8 %call, 0, !dbg !3487
  br i1 %tobool1, label %if.then2, label %if.end3, !dbg !3488

if.then2:                                         ; preds = %if.end
  br label %for.end162, !dbg !3489

if.end3:                                          ; preds = %if.end
  %2 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3490
  %call4 = call %struct.ssa_use_operand_d* @first_readonly_imm_use(%struct.immediate_use_iterator_d* %imm_iter, %union.tree_node* %2), !dbg !3490
  store %struct.ssa_use_operand_d* %call4, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !3490
  br label %for.cond, !dbg !3490

for.cond:                                         ; preds = %for.inc, %if.end3
  %call5 = call zeroext i8 @end_readonly_imm_use_p(%struct.immediate_use_iterator_d* %imm_iter), !dbg !3492
  %tobool6 = icmp ne i8 %call5, 0, !dbg !3492
  %lnot = xor i1 %tobool6, true, !dbg !3492
  br i1 %lnot, label %for.body, label %for.end, !dbg !3490

for.body:                                         ; preds = %for.cond
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !3494
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %3, i32 0, i32 2, !dbg !3494
  %stmt7 = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !3494
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt7, align 8, !dbg !3494
  store %union.gimple_statement_d* %4, %union.gimple_statement_d** %stmt, align 8, !dbg !3496
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3497
  %call8 = call zeroext i8 @gimple_debug_bind_p(%union.gimple_statement_d* %5), !dbg !3499
  %tobool9 = icmp ne i8 %call8, 0, !dbg !3499
  br i1 %tobool9, label %if.end11, label %if.then10, !dbg !3500

if.then10:                                        ; preds = %for.body
  br label %for.inc, !dbg !3501

if.end11:                                         ; preds = %for.body
  %6 = load i32, i32* %usecount, align 4, !dbg !3502
  %inc = add nsw i32 %6, 1, !dbg !3502
  store i32 %inc, i32* %usecount, align 4, !dbg !3502
  %tobool12 = icmp ne i32 %6, 0, !dbg !3502
  br i1 %tobool12, label %if.then13, label %if.end14, !dbg !3504

if.then13:                                        ; preds = %if.end11
  br label %for.end, !dbg !3505

if.end14:                                         ; preds = %if.end11
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3506
  %call15 = call %union.tree_node* @gimple_debug_bind_get_value(%union.gimple_statement_d* %7), !dbg !3508
  %8 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3509
  %cmp = icmp ne %union.tree_node* %call15, %8, !dbg !3510
  br i1 %cmp, label %if.then16, label %if.end18, !dbg !3511

if.then16:                                        ; preds = %if.end14
  %9 = load i32, i32* %usecount, align 4, !dbg !3512
  %inc17 = add nsw i32 %9, 1, !dbg !3512
  store i32 %inc17, i32* %usecount, align 4, !dbg !3512
  br label %for.end, !dbg !3514

if.end18:                                         ; preds = %if.end14
  br label %for.inc, !dbg !3515

for.inc:                                          ; preds = %if.end18, %if.then10
  %call19 = call %struct.ssa_use_operand_d* @next_readonly_imm_use(%struct.immediate_use_iterator_d* %imm_iter), !dbg !3492
  store %struct.ssa_use_operand_d* %call19, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !3492
  br label %for.cond, !dbg !3492, !llvm.loop !3516

for.end:                                          ; preds = %if.then16, %if.then13, %for.cond
  %10 = load i32, i32* %usecount, align 4, !dbg !3518
  %tobool20 = icmp ne i32 %10, 0, !dbg !3518
  br i1 %tobool20, label %if.end22, label %if.then21, !dbg !3520

if.then21:                                        ; preds = %for.end
  br label %for.end162, !dbg !3521

if.end22:                                         ; preds = %for.end
  %11 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !3522
  %tobool23 = icmp ne %struct.gimple_stmt_iterator* %11, null, !dbg !3522
  br i1 %tobool23, label %if.then24, label %if.else, !dbg !3524

if.then24:                                        ; preds = %if.end22
  %12 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !3525
  %call25 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %12), !dbg !3526
  store %union.gimple_statement_d* %call25, %union.gimple_statement_d** %def_stmt, align 8, !dbg !3527
  br label %if.end27, !dbg !3528

if.else:                                          ; preds = %if.end22
  %13 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3529
  %ssa_name = bitcast %union.tree_node* %13 to %struct.tree_ssa_name*, !dbg !3529
  %def_stmt26 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !3529
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt26, align 8, !dbg !3529
  store %union.gimple_statement_d* %14, %union.gimple_statement_d** %def_stmt, align 8, !dbg !3530
  br label %if.end27

if.end27:                                         ; preds = %if.else, %if.then24
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !3531
  %call28 = call i32 @gimple_code(%union.gimple_statement_d* %15), !dbg !3533
  %cmp29 = icmp eq i32 %call28, 16, !dbg !3534
  br i1 %cmp29, label %if.then30, label %if.else37, !dbg !3535

if.then30:                                        ; preds = %if.end27
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !3536
  %call31 = call %union.tree_node* @degenerate_phi_result(%union.gimple_statement_d* %16), !dbg !3538
  store %union.tree_node* %call31, %union.tree_node** %value, align 8, !dbg !3539
  %17 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !3540
  %tobool32 = icmp ne %union.tree_node* %17, null, !dbg !3540
  br i1 %tobool32, label %land.lhs.true, label %if.end36, !dbg !3542

land.lhs.true:                                    ; preds = %if.then30
  %call33 = call %union.tree_node* @walk_tree_1(%union.tree_node** %value, %union.tree_node* (%union.tree_node**, i32*, i8*)* @find_released_ssa_name, i8* null, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !3543
  %tobool34 = icmp ne %union.tree_node* %call33, null, !dbg !3543
  br i1 %tobool34, label %if.then35, label %if.end36, !dbg !3544

if.then35:                                        ; preds = %land.lhs.true
  store %union.tree_node* null, %union.tree_node** %value, align 8, !dbg !3545
  br label %if.end36, !dbg !3546

if.end36:                                         ; preds = %if.then35, %land.lhs.true, %if.then30
  br label %if.end58, !dbg !3547

if.else37:                                        ; preds = %if.end27
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !3548
  %call38 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %18), !dbg !3550
  %tobool39 = icmp ne i8 %call38, 0, !dbg !3550
  br i1 %tobool39, label %if.then40, label %if.end57, !dbg !3551

if.then40:                                        ; preds = %if.else37
  call void @llvm.dbg.declare(metadata i8* %no_value, metadata !3552, metadata !DIExpression()), !dbg !3554
  store i8 0, i8* %no_value, align 1, !dbg !3554
  %call41 = call zeroext i8 @dom_info_available_p(i32 1), !dbg !3555
  %tobool42 = icmp ne i8 %call41, 0, !dbg !3555
  br i1 %tobool42, label %if.end52, label %if.then43, !dbg !3557

if.then43:                                        ; preds = %if.then40
  call void @llvm.dbg.declare(metadata %struct.walk_stmt_info* %wi, metadata !3558, metadata !DIExpression()), !dbg !3560
  %19 = bitcast %struct.walk_stmt_info* %wi to i8*, !dbg !3561
  call void @llvm.memset.p0i8.i64(i8* align 8 %19, i8 0, i64 56, i1 false), !dbg !3561
  %20 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !3562
  %tobool44 = icmp ne %struct.gimple_stmt_iterator* %20, null, !dbg !3562
  br i1 %tobool44, label %lor.lhs.false, label %land.lhs.true45, !dbg !3564

land.lhs.true45:                                  ; preds = %if.then43
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !3565
  %call46 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %21), !dbg !3566
  %tobool47 = icmp ne %struct.basic_block_def* %call46, null, !dbg !3566
  br i1 %tobool47, label %lor.lhs.false, label %if.then50, !dbg !3567

lor.lhs.false:                                    ; preds = %land.lhs.true45, %if.then43
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !3568
  %call48 = call %union.tree_node* @walk_gimple_op(%union.gimple_statement_d* %22, %union.tree_node* (%union.tree_node**, i32*, i8*)* @find_released_ssa_name, %struct.walk_stmt_info* %wi), !dbg !3569
  %tobool49 = icmp ne %union.tree_node* %call48, null, !dbg !3569
  br i1 %tobool49, label %if.then50, label %if.end51, !dbg !3570

if.then50:                                        ; preds = %lor.lhs.false, %land.lhs.true45
  store i8 1, i8* %no_value, align 1, !dbg !3571
  br label %if.end51, !dbg !3572

if.end51:                                         ; preds = %if.then50, %lor.lhs.false
  br label %if.end52, !dbg !3573

if.end52:                                         ; preds = %if.end51, %if.then40
  %23 = load i8, i8* %no_value, align 1, !dbg !3574
  %tobool53 = icmp ne i8 %23, 0, !dbg !3574
  br i1 %tobool53, label %if.end56, label %if.then54, !dbg !3576

if.then54:                                        ; preds = %if.end52
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !3577
  %call55 = call %union.tree_node* @gimple_assign_rhs_to_tree(%union.gimple_statement_d* %24), !dbg !3578
  store %union.tree_node* %call55, %union.tree_node** %value, align 8, !dbg !3579
  br label %if.end56, !dbg !3580

if.end56:                                         ; preds = %if.then54, %if.end52
  br label %if.end57, !dbg !3581

if.end57:                                         ; preds = %if.end56, %if.else37
  br label %if.end58

if.end58:                                         ; preds = %if.end57, %if.end36
  %25 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !3582
  %tobool59 = icmp ne %union.tree_node* %25, null, !dbg !3582
  br i1 %tobool59, label %if.then60, label %if.end136, !dbg !3584

if.then60:                                        ; preds = %if.end58
  %26 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !3585
  %base = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !3585
  %27 = bitcast %struct.tree_base* %base to i64*, !dbg !3585
  %bf.load = load i64, i64* %27, align 8, !dbg !3585
  %bf.clear = and i64 %bf.load, 65535, !dbg !3585
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3585
  %idxprom = sext i32 %bf.cast to i64, !dbg !3585
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !3585
  %28 = load i32, i32* %arrayidx, align 4, !dbg !3585
  %cmp61 = icmp eq i32 %28, 1, !dbg !3585
  br i1 %cmp61, label %if.then77, label %lor.lhs.false62, !dbg !3588

lor.lhs.false62:                                  ; preds = %if.then60
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !3589
  %call63 = call i32 @gimple_code(%union.gimple_statement_d* %29), !dbg !3590
  %cmp64 = icmp eq i32 %call63, 16, !dbg !3591
  br i1 %cmp64, label %if.then77, label %lor.lhs.false65, !dbg !3592

lor.lhs.false65:                                  ; preds = %lor.lhs.false62
  %30 = load i32, i32* %usecount, align 4, !dbg !3593
  %cmp66 = icmp eq i32 %30, 1, !dbg !3594
  br i1 %cmp66, label %land.lhs.true67, label %lor.lhs.false73, !dbg !3595

land.lhs.true67:                                  ; preds = %lor.lhs.false65
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !3596
  %call68 = call zeroext i8 @gimple_assign_single_p(%union.gimple_statement_d* %31), !dbg !3597
  %tobool69 = icmp ne i8 %call68, 0, !dbg !3597
  br i1 %tobool69, label %lor.lhs.false70, label %if.then77, !dbg !3598

lor.lhs.false70:                                  ; preds = %land.lhs.true67
  %32 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !3599
  %call71 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %32), !dbg !3600
  %conv = zext i8 %call71 to i32, !dbg !3600
  %tobool72 = icmp ne i32 %conv, 0, !dbg !3600
  br i1 %tobool72, label %if.then77, label %lor.lhs.false73, !dbg !3601

lor.lhs.false73:                                  ; preds = %lor.lhs.false70, %lor.lhs.false65
  %33 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !3602
  %call74 = call zeroext i8 @is_gimple_reg(%union.tree_node* %33), !dbg !3603
  %conv75 = zext i8 %call74 to i32, !dbg !3603
  %tobool76 = icmp ne i32 %conv75, 0, !dbg !3603
  br i1 %tobool76, label %if.then77, label %if.else79, !dbg !3604

if.then77:                                        ; preds = %lor.lhs.false73, %lor.lhs.false70, %land.lhs.true67, %lor.lhs.false62, %if.then60
  %34 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !3605
  %call78 = call %union.tree_node* @unshare_expr(%union.tree_node* %34), !dbg !3606
  store %union.tree_node* %call78, %union.tree_node** %value, align 8, !dbg !3607
  br label %if.end135, !dbg !3608

if.else79:                                        ; preds = %lor.lhs.false73
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %def_temp, metadata !3609, metadata !DIExpression()), !dbg !3611
  call void @llvm.dbg.declare(metadata %union.tree_node** %vexpr, metadata !3612, metadata !DIExpression()), !dbg !3613
  %call80 = call %union.tree_node* @make_node_stat(i32 37), !dbg !3614
  store %union.tree_node* %call80, %union.tree_node** %vexpr, align 8, !dbg !3613
  %35 = load %union.tree_node*, %union.tree_node** %vexpr, align 8, !dbg !3615
  %36 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !3615
  %call81 = call %union.tree_node* @unshare_expr(%union.tree_node* %36), !dbg !3615
  %37 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !3615
  %call82 = call %union.gimple_statement_d* @gimple_build_debug_bind_stat(%union.tree_node* %35, %union.tree_node* %call81, %union.gimple_statement_d* %37), !dbg !3615
  store %union.gimple_statement_d* %call82, %union.gimple_statement_d** %def_temp, align 8, !dbg !3616
  %38 = load %union.tree_node*, %union.tree_node** %vexpr, align 8, !dbg !3617
  %decl_common = bitcast %union.tree_node* %38 to %struct.tree_decl_common*, !dbg !3617
  %artificial_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !3617
  %39 = bitcast i40* %artificial_flag to i64*, !dbg !3617
  %bf.load83 = load i64, i64* %39, align 8, !dbg !3618
  %bf.clear84 = and i64 %bf.load83, -4097, !dbg !3618
  %bf.set = or i64 %bf.clear84, 4096, !dbg !3618
  store i64 %bf.set, i64* %39, align 8, !dbg !3618
  %40 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !3619
  %common = bitcast %union.tree_node* %40 to %struct.tree_common*, !dbg !3619
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3619
  %41 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3619
  %42 = load %union.tree_node*, %union.tree_node** %vexpr, align 8, !dbg !3620
  %common85 = bitcast %union.tree_node* %42 to %struct.tree_common*, !dbg !3620
  %type86 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common85, i32 0, i32 2, !dbg !3620
  store %union.tree_node* %41, %union.tree_node** %type86, align 8, !dbg !3621
  %43 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !3622
  %base87 = bitcast %union.tree_node* %43 to %struct.tree_base*, !dbg !3622
  %44 = bitcast %struct.tree_base* %base87 to i64*, !dbg !3622
  %bf.load88 = load i64, i64* %44, align 8, !dbg !3622
  %bf.clear89 = and i64 %bf.load88, 65535, !dbg !3622
  %bf.cast90 = trunc i64 %bf.clear89 to i32, !dbg !3622
  %idxprom91 = sext i32 %bf.cast90 to i64, !dbg !3622
  %arrayidx92 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom91, !dbg !3622
  %45 = load i32, i32* %arrayidx92, align 4, !dbg !3622
  %cmp93 = icmp eq i32 %45, 3, !dbg !3622
  br i1 %cmp93, label %if.then95, label %if.else105, !dbg !3624

if.then95:                                        ; preds = %if.else79
  %46 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !3625
  %decl_common96 = bitcast %union.tree_node* %46 to %struct.tree_decl_common*, !dbg !3625
  %mode = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common96, i32 0, i32 2, !dbg !3625
  %47 = bitcast i40* %mode to i64*, !dbg !3625
  %bf.load97 = load i64, i64* %47, align 8, !dbg !3625
  %bf.clear98 = and i64 %bf.load97, 255, !dbg !3625
  %bf.cast99 = trunc i64 %bf.clear98 to i32, !dbg !3625
  %48 = load %union.tree_node*, %union.tree_node** %vexpr, align 8, !dbg !3626
  %decl_common100 = bitcast %union.tree_node* %48 to %struct.tree_decl_common*, !dbg !3626
  %mode101 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common100, i32 0, i32 2, !dbg !3626
  %49 = bitcast i40* %mode101 to i64*, !dbg !3626
  %50 = zext i32 %bf.cast99 to i64, !dbg !3627
  %bf.load102 = load i64, i64* %49, align 8, !dbg !3627
  %bf.value = and i64 %50, 255, !dbg !3627
  %bf.clear103 = and i64 %bf.load102, -256, !dbg !3627
  %bf.set104 = or i64 %bf.clear103, %bf.value, !dbg !3627
  store i64 %bf.set104, i64* %49, align 8, !dbg !3627
  %bf.result.cast = trunc i64 %bf.value to i32, !dbg !3627
  br label %if.end130, !dbg !3626

if.else105:                                       ; preds = %if.else79
  %51 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !3628
  %common106 = bitcast %union.tree_node* %51 to %struct.tree_common*, !dbg !3628
  %type107 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common106, i32 0, i32 2, !dbg !3628
  %52 = load %union.tree_node*, %union.tree_node** %type107, align 8, !dbg !3628
  %base108 = bitcast %union.tree_node* %52 to %struct.tree_base*, !dbg !3628
  %53 = bitcast %struct.tree_base* %base108 to i64*, !dbg !3628
  %bf.load109 = load i64, i64* %53, align 8, !dbg !3628
  %bf.clear110 = and i64 %bf.load109, 65535, !dbg !3628
  %bf.cast111 = trunc i64 %bf.clear110 to i32, !dbg !3628
  %cmp112 = icmp eq i32 %bf.cast111, 14, !dbg !3628
  br i1 %cmp112, label %cond.true, label %cond.false, !dbg !3628

cond.true:                                        ; preds = %if.else105
  %54 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !3628
  %common114 = bitcast %union.tree_node* %54 to %struct.tree_common*, !dbg !3628
  %type115 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common114, i32 0, i32 2, !dbg !3628
  %55 = load %union.tree_node*, %union.tree_node** %type115, align 8, !dbg !3628
  %call116 = call i32 @vector_type_mode(%union.tree_node* %55), !dbg !3628
  br label %cond.end, !dbg !3628

cond.false:                                       ; preds = %if.else105
  %56 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !3628
  %common117 = bitcast %union.tree_node* %56 to %struct.tree_common*, !dbg !3628
  %type118 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common117, i32 0, i32 2, !dbg !3628
  %57 = load %union.tree_node*, %union.tree_node** %type118, align 8, !dbg !3628
  %type119 = bitcast %union.tree_node* %57 to %struct.tree_type*, !dbg !3628
  %mode120 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type119, i32 0, i32 6, !dbg !3628
  %bf.load121 = load i32, i32* %mode120, align 4, !dbg !3628
  %bf.lshr = lshr i32 %bf.load121, 16, !dbg !3628
  %bf.clear122 = and i32 %bf.lshr, 255, !dbg !3628
  br label %cond.end, !dbg !3628

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call116, %cond.true ], [ %bf.clear122, %cond.false ], !dbg !3628
  %58 = load %union.tree_node*, %union.tree_node** %vexpr, align 8, !dbg !3629
  %decl_common123 = bitcast %union.tree_node* %58 to %struct.tree_decl_common*, !dbg !3629
  %mode124 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common123, i32 0, i32 2, !dbg !3629
  %59 = bitcast i40* %mode124 to i64*, !dbg !3629
  %60 = zext i32 %cond to i64, !dbg !3630
  %bf.load125 = load i64, i64* %59, align 8, !dbg !3630
  %bf.value126 = and i64 %60, 255, !dbg !3630
  %bf.clear127 = and i64 %bf.load125, -256, !dbg !3630
  %bf.set128 = or i64 %bf.clear127, %bf.value126, !dbg !3630
  store i64 %bf.set128, i64* %59, align 8, !dbg !3630
  %bf.result.cast129 = trunc i64 %bf.value126 to i32, !dbg !3630
  br label %if.end130

if.end130:                                        ; preds = %cond.end, %if.then95
  %61 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !3631
  %tobool131 = icmp ne %struct.gimple_stmt_iterator* %61, null, !dbg !3631
  br i1 %tobool131, label %if.then132, label %if.else133, !dbg !3633

if.then132:                                       ; preds = %if.end130
  %62 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !3634
  %63 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_temp, align 8, !dbg !3635
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %62, %union.gimple_statement_d* %63, i32 1), !dbg !3636
  br label %if.end134, !dbg !3636

if.else133:                                       ; preds = %if.end130
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %ngsi, metadata !3637, metadata !DIExpression()), !dbg !3639
  %64 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !3640
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %ngsi, %union.gimple_statement_d* %64), !dbg !3641
  %65 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_temp, align 8, !dbg !3642
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %ngsi, %union.gimple_statement_d* %65, i32 1), !dbg !3643
  br label %if.end134

if.end134:                                        ; preds = %if.else133, %if.then132
  %66 = load %union.tree_node*, %union.tree_node** %vexpr, align 8, !dbg !3644
  store %union.tree_node* %66, %union.tree_node** %value, align 8, !dbg !3645
  br label %if.end135

if.end135:                                        ; preds = %if.end134, %if.then77
  br label %if.end136, !dbg !3646

if.end136:                                        ; preds = %if.end135, %if.end58
  %67 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3647
  %call137 = call %union.gimple_statement_d* @first_imm_use_stmt(%struct.immediate_use_iterator_d* %imm_iter, %union.tree_node* %67), !dbg !3647
  store %union.gimple_statement_d* %call137, %union.gimple_statement_d** %stmt, align 8, !dbg !3647
  br label %for.cond138, !dbg !3647

for.cond138:                                      ; preds = %for.inc160, %if.end136
  %call139 = call zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %imm_iter), !dbg !3649
  %tobool140 = icmp ne i8 %call139, 0, !dbg !3649
  %lnot141 = xor i1 %tobool140, true, !dbg !3649
  br i1 %lnot141, label %for.body142, label %for.end162, !dbg !3647

for.body142:                                      ; preds = %for.cond138
  %68 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3651
  %call143 = call zeroext i8 @gimple_debug_bind_p(%union.gimple_statement_d* %68), !dbg !3654
  %tobool144 = icmp ne i8 %call143, 0, !dbg !3654
  br i1 %tobool144, label %if.end146, label %if.then145, !dbg !3655

if.then145:                                       ; preds = %for.body142
  br label %for.inc160, !dbg !3656

if.end146:                                        ; preds = %for.body142
  %69 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !3657
  %tobool147 = icmp ne %union.tree_node* %69, null, !dbg !3657
  br i1 %tobool147, label %if.then148, label %if.else158, !dbg !3659

if.then148:                                       ; preds = %if.end146
  %call149 = call %struct.ssa_use_operand_d* @first_imm_use_on_stmt(%struct.immediate_use_iterator_d* %imm_iter), !dbg !3660
  store %struct.ssa_use_operand_d* %call149, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !3660
  br label %for.cond150, !dbg !3660

for.cond150:                                      ; preds = %for.inc155, %if.then148
  %call151 = call zeroext i8 @end_imm_use_on_stmt_p(%struct.immediate_use_iterator_d* %imm_iter), !dbg !3662
  %tobool152 = icmp ne i8 %call151, 0, !dbg !3662
  %lnot153 = xor i1 %tobool152, true, !dbg !3662
  br i1 %lnot153, label %for.body154, label %for.end157, !dbg !3660

for.body154:                                      ; preds = %for.cond150
  %70 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !3664
  %71 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !3664
  call void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %70, %union.tree_node* %71), !dbg !3664
  br label %for.inc155, !dbg !3664

for.inc155:                                       ; preds = %for.body154
  %call156 = call %struct.ssa_use_operand_d* @next_imm_use_on_stmt(%struct.immediate_use_iterator_d* %imm_iter), !dbg !3662
  store %struct.ssa_use_operand_d* %call156, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !3662
  br label %for.cond150, !dbg !3662, !llvm.loop !3665

for.end157:                                       ; preds = %for.cond150
  br label %if.end159, !dbg !3666

if.else158:                                       ; preds = %if.end146
  %72 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3667
  call void @gimple_debug_bind_reset_value(%union.gimple_statement_d* %72), !dbg !3668
  br label %if.end159

if.end159:                                        ; preds = %if.else158, %for.end157
  %73 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3669
  call void @update_stmt(%union.gimple_statement_d* %73), !dbg !3670
  br label %for.inc160, !dbg !3671

for.inc160:                                       ; preds = %if.end159, %if.then145
  %call161 = call %union.gimple_statement_d* @next_imm_use_stmt(%struct.immediate_use_iterator_d* %imm_iter), !dbg !3649
  store %union.gimple_statement_d* %call161, %union.gimple_statement_d** %stmt, align 8, !dbg !3649
  br label %for.cond138, !dbg !3649, !llvm.loop !3672

for.end162:                                       ; preds = %if.then, %if.then2, %if.then21, %for.cond138
  ret void, !dbg !3674
}

declare dso_local zeroext i8 @name_registered_for_update_p(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @first_readonly_imm_use(%struct.immediate_use_iterator_d* %imm, %union.tree_node* %var) #0 !dbg !3675 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  %var.addr = alloca %union.tree_node*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !3679, metadata !DIExpression()), !dbg !3680
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !3681, metadata !DIExpression()), !dbg !3682
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3683
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !3683
  %imm_uses = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 5, !dbg !3683
  %1 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3684
  %end_p = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %1, i32 0, i32 1, !dbg !3685
  store %struct.ssa_use_operand_d* %imm_uses, %struct.ssa_use_operand_d** %end_p, align 8, !dbg !3686
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3687
  %end_p1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 1, !dbg !3688
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %end_p1, align 8, !dbg !3688
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %3, i32 0, i32 1, !dbg !3689
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !3689
  %5 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3690
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %5, i32 0, i32 0, !dbg !3691
  store %struct.ssa_use_operand_d* %4, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !3692
  %6 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3693
  %call = call zeroext i8 @end_readonly_imm_use_p(%struct.immediate_use_iterator_d* %6), !dbg !3695
  %tobool = icmp ne i8 %call, 0, !dbg !3695
  br i1 %tobool, label %if.then, label %if.end, !dbg !3696

if.then:                                          ; preds = %entry
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !3697
  br label %return, !dbg !3697

if.end:                                           ; preds = %entry
  %7 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3698
  %imm_use2 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %7, i32 0, i32 0, !dbg !3699
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use2, align 8, !dbg !3699
  store %struct.ssa_use_operand_d* %8, %struct.ssa_use_operand_d** %retval, align 8, !dbg !3700
  br label %return, !dbg !3700

return:                                           ; preds = %if.end, %if.then
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !3701
  ret %struct.ssa_use_operand_d* %9, !dbg !3701
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @end_readonly_imm_use_p(%struct.immediate_use_iterator_d* %imm) #0 !dbg !3702 {
entry:
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !3707, metadata !DIExpression()), !dbg !3708
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3709
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !3710
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !3710
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3711
  %end_p = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 1, !dbg !3712
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %end_p, align 8, !dbg !3712
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, %3, !dbg !3713
  %conv = zext i1 %cmp to i32, !dbg !3713
  %conv1 = trunc i32 %conv to i8, !dbg !3714
  ret i8 %conv1, !dbg !3715
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_debug_bind_p(%union.gimple_statement_d* %s) #0 !dbg !3716 {
entry:
  %retval = alloca i8, align 1
  %s.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !3719, metadata !DIExpression()), !dbg !3720
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !3721
  %call = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %0), !dbg !3723
  %tobool = icmp ne i8 %call, 0, !dbg !3723
  br i1 %tobool, label %if.then, label %if.end, !dbg !3724

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !3725
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !3726
  %2 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !3727
  %bf.load = load i32, i32* %2, align 8, !dbg !3727
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !3727
  %cmp = icmp eq i32 %bf.lshr, 0, !dbg !3728
  %conv = zext i1 %cmp to i32, !dbg !3728
  %conv1 = trunc i32 %conv to i8, !dbg !3725
  store i8 %conv1, i8* %retval, align 1, !dbg !3729
  br label %return, !dbg !3729

if.end:                                           ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !3730
  br label %return, !dbg !3730

return:                                           ; preds = %if.end, %if.then
  %3 = load i8, i8* %retval, align 1, !dbg !3731
  ret i8 %3, !dbg !3731
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_debug_bind_get_value(%union.gimple_statement_d* %dbg) #0 !dbg !3732 {
entry:
  %dbg.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %dbg, %union.gimple_statement_d** %dbg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %dbg.addr, metadata !3735, metadata !DIExpression()), !dbg !3736
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %dbg.addr, align 8, !dbg !3737
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !3738
  ret %union.tree_node* %call, !dbg !3739
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @next_readonly_imm_use(%struct.immediate_use_iterator_d* %imm) #0 !dbg !3740 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  %old = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !3743, metadata !DIExpression()), !dbg !3744
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %old, metadata !3745, metadata !DIExpression()), !dbg !3746
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3747
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !3748
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !3748
  store %struct.ssa_use_operand_d* %1, %struct.ssa_use_operand_d** %old, align 8, !dbg !3746
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %old, align 8, !dbg !3749
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !3750
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !3750
  %4 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3751
  %imm_use1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %4, i32 0, i32 0, !dbg !3752
  store %struct.ssa_use_operand_d* %3, %struct.ssa_use_operand_d** %imm_use1, align 8, !dbg !3753
  %5 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3754
  %call = call zeroext i8 @end_readonly_imm_use_p(%struct.immediate_use_iterator_d* %5), !dbg !3756
  %tobool = icmp ne i8 %call, 0, !dbg !3756
  br i1 %tobool, label %if.then, label %if.end, !dbg !3757

if.then:                                          ; preds = %entry
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !3758
  br label %return, !dbg !3758

if.end:                                           ; preds = %entry
  %6 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3759
  %imm_use2 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %6, i32 0, i32 0, !dbg !3760
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use2, align 8, !dbg !3760
  store %struct.ssa_use_operand_d* %7, %struct.ssa_use_operand_d** %retval, align 8, !dbg !3761
  br label %return, !dbg !3761

return:                                           ; preds = %if.end, %if.then
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !3762
  ret %struct.ssa_use_operand_d* %8, !dbg !3762
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_code(%union.gimple_statement_d* %g) #0 !dbg !3763 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !3766, metadata !DIExpression()), !dbg !3767
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3768
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !3769
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !3770
  %bf.load = load i32, i32* %1, align 8, !dbg !3770
  %bf.clear = and i32 %bf.load, 255, !dbg !3770
  ret i32 %bf.clear, !dbg !3771
}

declare dso_local %union.tree_node* @degenerate_phi_result(%union.gimple_statement_d*) #2

declare dso_local %union.tree_node* @walk_tree_1(%union.tree_node**, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @find_released_ssa_name(%union.tree_node** %tp, i32* %walk_subtrees, i8* %data_) #0 !dbg !3772 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %tp.addr = alloca %union.tree_node**, align 8
  %walk_subtrees.addr = alloca i32*, align 8
  %data_.addr = alloca i8*, align 8
  %wi = alloca %struct.walk_stmt_info*, align 8
  store %union.tree_node** %tp, %union.tree_node*** %tp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %tp.addr, metadata !3776, metadata !DIExpression()), !dbg !3777
  store i32* %walk_subtrees, i32** %walk_subtrees.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %walk_subtrees.addr, metadata !3778, metadata !DIExpression()), !dbg !3779
  store i8* %data_, i8** %data_.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data_.addr, metadata !3780, metadata !DIExpression()), !dbg !3781
  call void @llvm.dbg.declare(metadata %struct.walk_stmt_info** %wi, metadata !3782, metadata !DIExpression()), !dbg !3783
  %0 = load i8*, i8** %data_.addr, align 8, !dbg !3784
  %1 = bitcast i8* %0 to %struct.walk_stmt_info*, !dbg !3785
  store %struct.walk_stmt_info* %1, %struct.walk_stmt_info** %wi, align 8, !dbg !3783
  %2 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !3786
  %tobool = icmp ne %struct.walk_stmt_info* %2, null, !dbg !3786
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !3788

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !3789
  %is_lhs = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %3, i32 0, i32 4, !dbg !3790
  %4 = load i8, i8* %is_lhs, align 1, !dbg !3790
  %conv = zext i8 %4 to i32, !dbg !3789
  %tobool1 = icmp ne i32 %conv, 0, !dbg !3789
  br i1 %tobool1, label %if.then, label %if.end, !dbg !3791

if.then:                                          ; preds = %land.lhs.true
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !3792
  br label %return, !dbg !3792

if.end:                                           ; preds = %land.lhs.true, %entry
  %5 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !3793
  %6 = load %union.tree_node*, %union.tree_node** %5, align 8, !dbg !3793
  %base = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !3793
  %7 = bitcast %struct.tree_base* %base to i64*, !dbg !3793
  %bf.load = load i64, i64* %7, align 8, !dbg !3793
  %bf.clear = and i64 %bf.load, 65535, !dbg !3793
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3793
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !3795
  br i1 %cmp, label %if.then3, label %if.else, !dbg !3796

if.then3:                                         ; preds = %if.end
  %8 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !3797
  %9 = load %union.tree_node*, %union.tree_node** %8, align 8, !dbg !3797
  %base4 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !3797
  %10 = bitcast %struct.tree_base* %base4 to i64*, !dbg !3797
  %bf.load5 = load i64, i64* %10, align 8, !dbg !3797
  %bf.lshr = lshr i64 %bf.load5, 25, !dbg !3797
  %bf.clear6 = and i64 %bf.lshr, 1, !dbg !3797
  %bf.cast7 = trunc i64 %bf.clear6 to i32, !dbg !3797
  %tobool8 = icmp ne i32 %bf.cast7, 0, !dbg !3797
  br i1 %tobool8, label %if.then9, label %if.end10, !dbg !3800

if.then9:                                         ; preds = %if.then3
  %11 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !3801
  %12 = load %union.tree_node*, %union.tree_node** %11, align 8, !dbg !3802
  store %union.tree_node* %12, %union.tree_node** %retval, align 8, !dbg !3803
  br label %return, !dbg !3803

if.end10:                                         ; preds = %if.then3
  %13 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !3804
  store i32 0, i32* %13, align 4, !dbg !3805
  br label %if.end27, !dbg !3806

if.else:                                          ; preds = %if.end
  %14 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !3807
  %15 = load %union.tree_node*, %union.tree_node** %14, align 8, !dbg !3807
  %base11 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !3807
  %16 = bitcast %struct.tree_base* %base11 to i64*, !dbg !3807
  %bf.load12 = load i64, i64* %16, align 8, !dbg !3807
  %bf.clear13 = and i64 %bf.load12, 65535, !dbg !3807
  %bf.cast14 = trunc i64 %bf.clear13 to i32, !dbg !3807
  %idxprom = sext i32 %bf.cast14 to i64, !dbg !3807
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !3807
  %17 = load i32, i32* %arrayidx, align 4, !dbg !3807
  %cmp15 = icmp eq i32 %17, 2, !dbg !3807
  br i1 %cmp15, label %if.then25, label %lor.lhs.false, !dbg !3807

lor.lhs.false:                                    ; preds = %if.else
  %18 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !3807
  %19 = load %union.tree_node*, %union.tree_node** %18, align 8, !dbg !3807
  %base17 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !3807
  %20 = bitcast %struct.tree_base* %base17 to i64*, !dbg !3807
  %bf.load18 = load i64, i64* %20, align 8, !dbg !3807
  %bf.clear19 = and i64 %bf.load18, 65535, !dbg !3807
  %bf.cast20 = trunc i64 %bf.clear19 to i32, !dbg !3807
  %idxprom21 = sext i32 %bf.cast20 to i64, !dbg !3807
  %arrayidx22 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom21, !dbg !3807
  %21 = load i32, i32* %arrayidx22, align 4, !dbg !3807
  %cmp23 = icmp eq i32 %21, 3, !dbg !3807
  br i1 %cmp23, label %if.then25, label %if.end26, !dbg !3809

if.then25:                                        ; preds = %lor.lhs.false, %if.else
  %22 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !3810
  store i32 0, i32* %22, align 4, !dbg !3811
  br label %if.end26, !dbg !3812

if.end26:                                         ; preds = %if.then25, %lor.lhs.false
  br label %if.end27

if.end27:                                         ; preds = %if.end26, %if.end10
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !3813
  br label %return, !dbg !3813

return:                                           ; preds = %if.end27, %if.then9, %if.then
  %23 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !3814
  ret %union.tree_node* %23, !dbg !3814
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %gs) #0 !dbg !3815 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3816, metadata !DIExpression()), !dbg !3817
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3818
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !3819
  %cmp = icmp eq i32 %call, 6, !dbg !3820
  %conv = zext i1 %cmp to i32, !dbg !3820
  %conv1 = trunc i32 %conv to i8, !dbg !3819
  ret i8 %conv1, !dbg !3821
}

declare dso_local zeroext i8 @dom_info_available_p(i32) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %g) #0 !dbg !3822 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !3825, metadata !DIExpression()), !dbg !3826
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3827
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !3828
  %bb = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 4, !dbg !3829
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3829
  ret %struct.basic_block_def* %1, !dbg !3830
}

declare dso_local %union.tree_node* @walk_gimple_op(%union.gimple_statement_d*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, %struct.walk_stmt_info*) #2

declare dso_local %union.tree_node* @gimple_assign_rhs_to_tree(%union.gimple_statement_d*) #2

declare dso_local zeroext i8 @gimple_assign_single_p(%union.gimple_statement_d*) #2

declare dso_local zeroext i8 @is_gimple_min_invariant(%union.tree_node*) #2

declare dso_local %union.tree_node* @unshare_expr(%union.tree_node*) #2

declare dso_local %union.tree_node* @make_node_stat(i32) #2

declare dso_local %union.gimple_statement_d* @gimple_build_debug_bind_stat(%union.tree_node*, %union.tree_node*, %union.gimple_statement_d*) #2

declare dso_local i32 @vector_type_mode(%union.tree_node*) #2

declare dso_local void @gsi_insert_before(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i32) #2

declare dso_local void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret, %union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @first_imm_use_stmt(%struct.immediate_use_iterator_d* %imm, %union.tree_node* %var) #0 !dbg !3831 {
entry:
  %retval = alloca %union.gimple_statement_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  %var.addr = alloca %union.tree_node*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !3834, metadata !DIExpression()), !dbg !3835
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !3836, metadata !DIExpression()), !dbg !3837
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3838
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !3838
  %imm_uses = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 5, !dbg !3838
  %1 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3839
  %end_p = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %1, i32 0, i32 1, !dbg !3840
  store %struct.ssa_use_operand_d* %imm_uses, %struct.ssa_use_operand_d** %end_p, align 8, !dbg !3841
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3842
  %end_p1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 1, !dbg !3843
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %end_p1, align 8, !dbg !3843
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %3, i32 0, i32 1, !dbg !3844
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !3844
  %5 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3845
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %5, i32 0, i32 0, !dbg !3846
  store %struct.ssa_use_operand_d* %4, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !3847
  %6 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3848
  %next_imm_name = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %6, i32 0, i32 3, !dbg !3849
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next_imm_name, align 8, !dbg !3850
  %7 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3851
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %7, i32 0, i32 2, !dbg !3852
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node, i32 0, i32 0, !dbg !3853
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev, align 8, !dbg !3854
  %8 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3855
  %iter_node2 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %8, i32 0, i32 2, !dbg !3856
  %next3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node2, i32 0, i32 1, !dbg !3857
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next3, align 8, !dbg !3858
  %9 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3859
  %iter_node4 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %9, i32 0, i32 2, !dbg !3860
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node4, i32 0, i32 2, !dbg !3861
  %stmt = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !3862
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %stmt, align 8, !dbg !3863
  %10 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3864
  %iter_node5 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %10, i32 0, i32 2, !dbg !3865
  %use = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node5, i32 0, i32 3, !dbg !3866
  store %union.tree_node** null, %union.tree_node*** %use, align 8, !dbg !3867
  %11 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3868
  %call = call zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %11), !dbg !3870
  %tobool = icmp ne i8 %call, 0, !dbg !3870
  br i1 %tobool, label %if.then, label %if.end, !dbg !3871

if.then:                                          ; preds = %entry
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !3872
  br label %return, !dbg !3872

if.end:                                           ; preds = %entry
  %12 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3873
  %imm_use6 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %12, i32 0, i32 0, !dbg !3874
  %13 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use6, align 8, !dbg !3874
  %14 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3875
  call void @link_use_stmts_after(%struct.ssa_use_operand_d* %13, %struct.immediate_use_iterator_d* %14), !dbg !3876
  %15 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3877
  %imm_use7 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %15, i32 0, i32 0, !dbg !3877
  %16 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use7, align 8, !dbg !3877
  %loc8 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %16, i32 0, i32 2, !dbg !3877
  %stmt9 = bitcast %union.anon* %loc8 to %union.gimple_statement_d**, !dbg !3877
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt9, align 8, !dbg !3877
  store %union.gimple_statement_d* %17, %union.gimple_statement_d** %retval, align 8, !dbg !3878
  br label %return, !dbg !3878

return:                                           ; preds = %if.end, %if.then
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %retval, align 8, !dbg !3879
  ret %union.gimple_statement_d* %18, !dbg !3879
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %imm) #0 !dbg !3880 {
entry:
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !3881, metadata !DIExpression()), !dbg !3882
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3883
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !3884
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !3884
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3885
  %end_p = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 1, !dbg !3886
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %end_p, align 8, !dbg !3886
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, %3, !dbg !3887
  %conv = zext i1 %cmp to i32, !dbg !3887
  %conv1 = trunc i32 %conv to i8, !dbg !3888
  ret i8 %conv1, !dbg !3889
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @first_imm_use_on_stmt(%struct.immediate_use_iterator_d* %imm) #0 !dbg !3890 {
entry:
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !3891, metadata !DIExpression()), !dbg !3892
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3893
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !3894
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !3894
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %1, i32 0, i32 1, !dbg !3895
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !3895
  %3 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3896
  %next_imm_name = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %3, i32 0, i32 3, !dbg !3897
  store %struct.ssa_use_operand_d* %2, %struct.ssa_use_operand_d** %next_imm_name, align 8, !dbg !3898
  %4 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3899
  %imm_use1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %4, i32 0, i32 0, !dbg !3900
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use1, align 8, !dbg !3900
  ret %struct.ssa_use_operand_d* %5, !dbg !3901
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @end_imm_use_on_stmt_p(%struct.immediate_use_iterator_d* %imm) #0 !dbg !3902 {
entry:
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !3903, metadata !DIExpression()), !dbg !3904
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3905
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !3906
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !3906
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3907
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 2, !dbg !3908
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, %iter_node, !dbg !3909
  %conv = zext i1 %cmp to i32, !dbg !3909
  %conv1 = trunc i32 %conv to i8, !dbg !3910
  ret i8 %conv1, !dbg !3911
}

; Function Attrs: noinline nounwind uwtable
define internal void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %use, %union.tree_node* %val) #0 !dbg !3912 {
entry:
  %use.addr = alloca %struct.ssa_use_operand_d*, align 8
  %val.addr = alloca %union.tree_node*, align 8
  store %struct.ssa_use_operand_d* %use, %struct.ssa_use_operand_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use.addr, metadata !3915, metadata !DIExpression()), !dbg !3916
  store %union.tree_node* %val, %union.tree_node** %val.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val.addr, metadata !3917, metadata !DIExpression()), !dbg !3918
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !3919
  call void @delink_imm_use(%struct.ssa_use_operand_d* %0), !dbg !3920
  %1 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !3921
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !3922
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 3, !dbg !3923
  %3 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !3923
  store %union.tree_node* %1, %union.tree_node** %3, align 8, !dbg !3924
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !3925
  %5 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !3926
  call void @link_imm_use(%struct.ssa_use_operand_d* %4, %union.tree_node* %5), !dbg !3927
  ret void, !dbg !3928
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @next_imm_use_on_stmt(%struct.immediate_use_iterator_d* %imm) #0 !dbg !3929 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !3930, metadata !DIExpression()), !dbg !3931
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3932
  %next_imm_name = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 3, !dbg !3933
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next_imm_name, align 8, !dbg !3933
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3934
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 0, !dbg !3935
  store %struct.ssa_use_operand_d* %1, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !3936
  %3 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3937
  %call = call zeroext i8 @end_imm_use_on_stmt_p(%struct.immediate_use_iterator_d* %3), !dbg !3939
  %tobool = icmp ne i8 %call, 0, !dbg !3939
  br i1 %tobool, label %if.then, label %if.else, !dbg !3940

if.then:                                          ; preds = %entry
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !3941
  br label %return, !dbg !3941

if.else:                                          ; preds = %entry
  %4 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3942
  %imm_use1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %4, i32 0, i32 0, !dbg !3944
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use1, align 8, !dbg !3944
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %5, i32 0, i32 1, !dbg !3945
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !3945
  %7 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3946
  %next_imm_name2 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %7, i32 0, i32 3, !dbg !3947
  store %struct.ssa_use_operand_d* %6, %struct.ssa_use_operand_d** %next_imm_name2, align 8, !dbg !3948
  %8 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3949
  %imm_use3 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %8, i32 0, i32 0, !dbg !3950
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use3, align 8, !dbg !3950
  store %struct.ssa_use_operand_d* %9, %struct.ssa_use_operand_d** %retval, align 8, !dbg !3951
  br label %return, !dbg !3951

return:                                           ; preds = %if.else, %if.then
  %10 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !3952
  ret %struct.ssa_use_operand_d* %10, !dbg !3952
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_debug_bind_reset_value(%union.gimple_statement_d* %dbg) #0 !dbg !3953 {
entry:
  %dbg.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %dbg, %union.gimple_statement_d** %dbg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %dbg.addr, metadata !3956, metadata !DIExpression()), !dbg !3957
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %dbg.addr, align 8, !dbg !3958
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 1, %union.tree_node* null), !dbg !3959
  ret void, !dbg !3960
}

; Function Attrs: noinline nounwind uwtable
define internal void @update_stmt(%union.gimple_statement_d* %s) #0 !dbg !3961 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !3962, metadata !DIExpression()), !dbg !3963
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !3964
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !3966
  %tobool = icmp ne i8 %call, 0, !dbg !3966
  br i1 %tobool, label %if.then, label %if.end, !dbg !3967

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !3968
  call void @gimple_set_modified(%union.gimple_statement_d* %1, i8 zeroext 1), !dbg !3970
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !3971
  call void @update_stmt_operands(%union.gimple_statement_d* %2), !dbg !3972
  br label %if.end, !dbg !3973

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !3974
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @next_imm_use_stmt(%struct.immediate_use_iterator_d* %imm) #0 !dbg !3975 {
entry:
  %retval = alloca %union.gimple_statement_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !3978, metadata !DIExpression()), !dbg !3979
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3980
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 2, !dbg !3981
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node, i32 0, i32 1, !dbg !3982
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !3982
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3983
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 0, !dbg !3984
  store %struct.ssa_use_operand_d* %1, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !3985
  %3 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3986
  %call = call zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %3), !dbg !3988
  %tobool = icmp ne i8 %call, 0, !dbg !3988
  br i1 %tobool, label %if.then, label %if.end4, !dbg !3989

if.then:                                          ; preds = %entry
  %4 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3990
  %iter_node1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %4, i32 0, i32 2, !dbg !3993
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node1, i32 0, i32 0, !dbg !3994
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !3994
  %cmp = icmp ne %struct.ssa_use_operand_d* %5, null, !dbg !3995
  br i1 %cmp, label %if.then2, label %if.end, !dbg !3996

if.then2:                                         ; preds = %if.then
  %6 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3997
  %iter_node3 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %6, i32 0, i32 2, !dbg !3998
  call void @delink_imm_use(%struct.ssa_use_operand_d* %iter_node3), !dbg !3999
  br label %if.end, !dbg !3999

if.end:                                           ; preds = %if.then2, %if.then
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !4000
  br label %return, !dbg !4000

if.end4:                                          ; preds = %entry
  %7 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !4001
  %imm_use5 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %7, i32 0, i32 0, !dbg !4002
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use5, align 8, !dbg !4002
  %9 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !4003
  call void @link_use_stmts_after(%struct.ssa_use_operand_d* %8, %struct.immediate_use_iterator_d* %9), !dbg !4004
  %10 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !4005
  %imm_use6 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %10, i32 0, i32 0, !dbg !4005
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use6, align 8, !dbg !4005
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %11, i32 0, i32 2, !dbg !4005
  %stmt = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !4005
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4005
  store %union.gimple_statement_d* %12, %union.gimple_statement_d** %retval, align 8, !dbg !4006
  br label %return, !dbg !4006

return:                                           ; preds = %if.end4, %if.end
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %retval, align 8, !dbg !4007
  ret %union.gimple_statement_d* %13, !dbg !4007
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @insert_debug_temps_for_defs(%struct.gimple_stmt_iterator* %gsi) #0 !dbg !4008 {
entry:
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %op_iter = alloca %struct.ssa_operand_iterator_d, align 8
  %def_p = alloca %union.tree_node**, align 8
  %var = alloca %union.tree_node*, align 8
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !4009, metadata !DIExpression()), !dbg !4010
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !4011, metadata !DIExpression()), !dbg !4012
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %op_iter, metadata !4013, metadata !DIExpression()), !dbg !4026
  call void @llvm.dbg.declare(metadata %union.tree_node*** %def_p, metadata !4027, metadata !DIExpression()), !dbg !4028
  %0 = load i32, i32* @flag_var_tracking_assignments, align 4, !dbg !4029
  %tobool = icmp ne i32 %0, 0, !dbg !4029
  br i1 %tobool, label %if.end, label %if.then, !dbg !4031

if.then:                                          ; preds = %entry
  br label %for.end, !dbg !4032

if.end:                                           ; preds = %entry
  %1 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !4033
  %call = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %1), !dbg !4034
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %stmt, align 8, !dbg !4035
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4036
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %2), !dbg !4036
  %cmp = icmp eq i32 %call1, 16, !dbg !4036
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !4036

cond.true:                                        ; preds = %if.end
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4036
  %call2 = call %union.tree_node** @op_iter_init_phidef(%struct.ssa_operand_iterator_d* %op_iter, %union.gimple_statement_d* %3, i32 2), !dbg !4036
  br label %cond.end, !dbg !4036

cond.false:                                       ; preds = %if.end
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4036
  %call3 = call %union.tree_node** @op_iter_init_def(%struct.ssa_operand_iterator_d* %op_iter, %union.gimple_statement_d* %4, i32 2), !dbg !4036
  br label %cond.end, !dbg !4036

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node** [ %call2, %cond.true ], [ %call3, %cond.false ], !dbg !4036
  store %union.tree_node** %cond, %union.tree_node*** %def_p, align 8, !dbg !4036
  br label %for.cond, !dbg !4036

for.cond:                                         ; preds = %for.inc, %cond.end
  %call4 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %op_iter), !dbg !4038
  %tobool5 = icmp ne i8 %call4, 0, !dbg !4038
  %lnot = xor i1 %tobool5, true, !dbg !4038
  br i1 %lnot, label %for.body, label %for.end, !dbg !4036

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !4040, metadata !DIExpression()), !dbg !4042
  %5 = load %union.tree_node**, %union.tree_node*** %def_p, align 8, !dbg !4043
  %call6 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %5), !dbg !4043
  store %union.tree_node* %call6, %union.tree_node** %var, align 8, !dbg !4042
  %6 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4044
  %base = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !4044
  %7 = bitcast %struct.tree_base* %base to i64*, !dbg !4044
  %bf.load = load i64, i64* %7, align 8, !dbg !4044
  %bf.clear = and i64 %bf.load, 65535, !dbg !4044
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4044
  %cmp7 = icmp ne i32 %bf.cast, 141, !dbg !4046
  br i1 %cmp7, label %if.then8, label %if.end9, !dbg !4047

if.then8:                                         ; preds = %for.body
  br label %for.inc, !dbg !4048

if.end9:                                          ; preds = %for.body
  %8 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !4049
  %9 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4050
  call void @insert_debug_temp_for_var_def(%struct.gimple_stmt_iterator* %8, %union.tree_node* %9), !dbg !4051
  br label %for.inc, !dbg !4052

for.inc:                                          ; preds = %if.end9, %if.then8
  %call10 = call %union.tree_node** @op_iter_next_def(%struct.ssa_operand_iterator_d* %op_iter), !dbg !4038
  store %union.tree_node** %call10, %union.tree_node*** %def_p, align 8, !dbg !4038
  br label %for.cond, !dbg !4038, !llvm.loop !4053

for.end:                                          ; preds = %if.then, %for.cond
  ret void, !dbg !4055
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @op_iter_init_phidef(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %phi, i32 %flags) #0 !dbg !4056 {
entry:
  %retval = alloca %union.tree_node**, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %phi.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  %phi_def = alloca %union.tree_node*, align 8
  %comp = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !4060, metadata !DIExpression()), !dbg !4061
  store %union.gimple_statement_d* %phi, %union.gimple_statement_d** %phi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi.addr, metadata !4062, metadata !DIExpression()), !dbg !4063
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !4064, metadata !DIExpression()), !dbg !4065
  call void @llvm.dbg.declare(metadata %union.tree_node** %phi_def, metadata !4066, metadata !DIExpression()), !dbg !4067
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !4068
  %call = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %0), !dbg !4068
  %call1 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call), !dbg !4068
  store %union.tree_node* %call1, %union.tree_node** %phi_def, align 8, !dbg !4067
  call void @llvm.dbg.declare(metadata i32* %comp, metadata !4069, metadata !DIExpression()), !dbg !4070
  %1 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !4071
  call void @clear_and_done_ssa_iter(%struct.ssa_operand_iterator_d* %1), !dbg !4072
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !4073
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 0, !dbg !4074
  store i8 0, i8* %done, align 8, !dbg !4075
  %3 = load i32, i32* %flags.addr, align 4, !dbg !4076
  %and = and i32 %3, 10, !dbg !4076
  %cmp = icmp ne i32 %and, 0, !dbg !4076
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !4076

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.21, i64 0, i64 0), i32 947, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4076
  br label %cond.end, !dbg !4076

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4076

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4076
  %4 = load %union.tree_node*, %union.tree_node** %phi_def, align 8, !dbg !4077
  %call2 = call zeroext i8 @is_gimple_reg(%union.tree_node* %4), !dbg !4078
  %conv = zext i8 %call2 to i32, !dbg !4078
  %tobool = icmp ne i32 %conv, 0, !dbg !4078
  %5 = zext i1 %tobool to i64, !dbg !4078
  %cond3 = select i1 %tobool, i32 2, i32 8, !dbg !4078
  store i32 %cond3, i32* %comp, align 4, !dbg !4079
  %6 = load i32, i32* %flags.addr, align 4, !dbg !4080
  %7 = load i32, i32* %comp, align 4, !dbg !4082
  %and4 = and i32 %6, %7, !dbg !4083
  %cmp5 = icmp eq i32 %and4, 0, !dbg !4084
  br i1 %cmp5, label %if.then, label %if.end, !dbg !4085

if.then:                                          ; preds = %cond.end
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !4086
  %done7 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %8, i32 0, i32 0, !dbg !4088
  store i8 1, i8* %done7, align 8, !dbg !4089
  store %union.tree_node** null, %union.tree_node*** %retval, align 8, !dbg !4090
  br label %return, !dbg !4090

if.end:                                           ; preds = %cond.end
  %9 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !4091
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %9, i32 0, i32 1, !dbg !4092
  store i32 3, i32* %iter_type, align 4, !dbg !4093
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !4094
  %call8 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %10), !dbg !4094
  store %union.tree_node** %call8, %union.tree_node*** %retval, align 8, !dbg !4095
  br label %return, !dbg !4095

return:                                           ; preds = %if.end, %if.then
  %11 = load %union.tree_node**, %union.tree_node*** %retval, align 8, !dbg !4096
  ret %union.tree_node** %11, !dbg !4096
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @op_iter_init_def(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !4097 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !4098, metadata !DIExpression()), !dbg !4099
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !4100, metadata !DIExpression()), !dbg !4101
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !4102, metadata !DIExpression()), !dbg !4103
  %0 = load i32, i32* %flags.addr, align 4, !dbg !4104
  %and = and i32 %0, 5, !dbg !4104
  %cmp = icmp eq i32 %and, 0, !dbg !4104
  br i1 %cmp, label %land.lhs.true, label %cond.true, !dbg !4104

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !4104
  %and1 = and i32 %1, 2, !dbg !4104
  %tobool = icmp ne i32 %and1, 0, !dbg !4104
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !4104

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.21, i64 0, i64 0), i32 783, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4104
  br label %cond.end, !dbg !4104

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !4104

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4104
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !4105
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4106
  %4 = load i32, i32* %flags.addr, align 4, !dbg !4107
  call void @op_iter_init(%struct.ssa_operand_iterator_d* %2, %union.gimple_statement_d* %3, i32 %4), !dbg !4108
  %5 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !4109
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %5, i32 0, i32 1, !dbg !4110
  store i32 3, i32* %iter_type, align 4, !dbg !4111
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !4112
  %call = call %union.tree_node** @op_iter_next_def(%struct.ssa_operand_iterator_d* %6), !dbg !4113
  ret %union.tree_node** %call, !dbg !4114
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !4115 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !4120, metadata !DIExpression()), !dbg !4121
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !4122
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 0, !dbg !4123
  %1 = load i8, i8* %done, align 8, !dbg !4123
  ret i8 %1, !dbg !4124
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_def_from_ptr(%union.tree_node** %def) #0 !dbg !4125 {
entry:
  %def.addr = alloca %union.tree_node**, align 8
  store %union.tree_node** %def, %union.tree_node*** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %def.addr, metadata !4128, metadata !DIExpression()), !dbg !4129
  %0 = load %union.tree_node**, %union.tree_node*** %def.addr, align 8, !dbg !4130
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !4131
  ret %union.tree_node* %1, !dbg !4132
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @op_iter_next_def(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !4133 {
entry:
  %retval = alloca %union.tree_node**, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %def_p = alloca %union.tree_node**, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !4136, metadata !DIExpression()), !dbg !4137
  call void @llvm.dbg.declare(metadata %union.tree_node*** %def_p, metadata !4138, metadata !DIExpression()), !dbg !4139
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !4140
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 2, !dbg !4142
  %1 = load %struct.def_optype_d*, %struct.def_optype_d** %defs, align 8, !dbg !4142
  %tobool = icmp ne %struct.def_optype_d* %1, null, !dbg !4140
  br i1 %tobool, label %if.then, label %if.end, !dbg !4143

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !4144
  %defs1 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 2, !dbg !4144
  %3 = load %struct.def_optype_d*, %struct.def_optype_d** %defs1, align 8, !dbg !4144
  %def_ptr = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %3, i32 0, i32 1, !dbg !4144
  %4 = load %union.tree_node**, %union.tree_node*** %def_ptr, align 8, !dbg !4144
  store %union.tree_node** %4, %union.tree_node*** %def_p, align 8, !dbg !4146
  %5 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !4147
  %defs2 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %5, i32 0, i32 2, !dbg !4148
  %6 = load %struct.def_optype_d*, %struct.def_optype_d** %defs2, align 8, !dbg !4148
  %next = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %6, i32 0, i32 0, !dbg !4149
  %7 = load %struct.def_optype_d*, %struct.def_optype_d** %next, align 8, !dbg !4149
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !4150
  %defs3 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %8, i32 0, i32 2, !dbg !4151
  store %struct.def_optype_d* %7, %struct.def_optype_d** %defs3, align 8, !dbg !4152
  %9 = load %union.tree_node**, %union.tree_node*** %def_p, align 8, !dbg !4153
  store %union.tree_node** %9, %union.tree_node*** %retval, align 8, !dbg !4154
  br label %return, !dbg !4154

if.end:                                           ; preds = %entry
  %10 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !4155
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %10, i32 0, i32 0, !dbg !4156
  store i8 1, i8* %done, align 8, !dbg !4157
  store %union.tree_node** null, %union.tree_node*** %retval, align 8, !dbg !4158
  br label %return, !dbg !4158

return:                                           ; preds = %if.end, %if.then
  %11 = load %union.tree_node**, %union.tree_node*** %retval, align 8, !dbg !4159
  ret %union.tree_node** %11, !dbg !4159
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @release_defs_bitset(%struct.bitmap_head_def* %toremove) #0 !dbg !4160 {
entry:
  %toremove.addr = alloca %struct.bitmap_head_def*, align 8
  %j = alloca i32, align 4
  %bi = alloca %struct.bitmap_iterator, align 8
  %remove_now = alloca i8, align 1
  %var = alloca %union.tree_node*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %uit = alloca %struct.immediate_use_iterator_d, align 8
  %dit = alloca %struct.ssa_operand_iterator_d, align 8
  %def_p = alloca %union.tree_node**, align 8
  %odef = alloca %union.tree_node*, align 8
  %def = alloca %union.gimple_statement_d*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.bitmap_head_def* %toremove, %struct.bitmap_head_def** %toremove.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %toremove.addr, metadata !4163, metadata !DIExpression()), !dbg !4164
  call void @llvm.dbg.declare(metadata i32* %j, metadata !4165, metadata !DIExpression()), !dbg !4166
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !4167, metadata !DIExpression()), !dbg !4175
  br label %while.cond, !dbg !4176

while.cond:                                       ; preds = %for.end46, %entry
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %toremove.addr, align 8, !dbg !4177
  %first = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %0, i32 0, i32 0, !dbg !4177
  %1 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first, align 8, !dbg !4177
  %tobool = icmp ne %struct.bitmap_element_def* %1, null, !dbg !4177
  %lnot = xor i1 %tobool, true, !dbg !4177
  %lnot1 = xor i1 %lnot, true, !dbg !4178
  br i1 %lnot1, label %while.body, label %while.end, !dbg !4176

while.body:                                       ; preds = %while.cond
  %2 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %toremove.addr, align 8, !dbg !4179
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %2, i32 0, i32* %j), !dbg !4179
  br label %for.cond, !dbg !4179

for.cond:                                         ; preds = %for.inc45, %while.body
  %call = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %j), !dbg !4181
  %tobool2 = icmp ne i8 %call, 0, !dbg !4179
  br i1 %tobool2, label %for.body, label %for.end46, !dbg !4179

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i8* %remove_now, metadata !4183, metadata !DIExpression()), !dbg !4185
  store i8 1, i8* %remove_now, align 1, !dbg !4185
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !4186, metadata !DIExpression()), !dbg !4187
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4188
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !4188
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 3, !dbg !4188
  %4 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !4188
  %ssa_names = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %4, i32 0, i32 2, !dbg !4188
  %5 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names, align 8, !dbg !4188
  %tobool3 = icmp ne %struct.VEC_tree_gc* %5, null, !dbg !4188
  br i1 %tobool3, label %cond.true, label %cond.false, !dbg !4188

cond.true:                                        ; preds = %for.body
  %6 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4188
  %add.ptr4 = getelementptr inbounds %struct.function, %struct.function* %6, i64 0, !dbg !4188
  %gimple_df5 = getelementptr inbounds %struct.function, %struct.function* %add.ptr4, i32 0, i32 3, !dbg !4188
  %7 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df5, align 8, !dbg !4188
  %ssa_names6 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %7, i32 0, i32 2, !dbg !4188
  %8 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names6, align 8, !dbg !4188
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %8, i32 0, i32 0, !dbg !4188
  br label %cond.end, !dbg !4188

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !4188

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4188
  %9 = load i32, i32* %j, align 4, !dbg !4188
  %call7 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond, i32 %9), !dbg !4188
  store %union.tree_node* %call7, %union.tree_node** %var, align 8, !dbg !4187
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !4189, metadata !DIExpression()), !dbg !4190
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d* %uit, metadata !4191, metadata !DIExpression()), !dbg !4192
  %10 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4193
  %call8 = call %union.gimple_statement_d* @first_imm_use_stmt(%struct.immediate_use_iterator_d* %uit, %union.tree_node* %10), !dbg !4193
  store %union.gimple_statement_d* %call8, %union.gimple_statement_d** %stmt, align 8, !dbg !4193
  br label %for.cond9, !dbg !4193

for.cond9:                                        ; preds = %for.inc32, %cond.end
  %call10 = call zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %uit), !dbg !4195
  %tobool11 = icmp ne i8 %call10, 0, !dbg !4195
  %lnot12 = xor i1 %tobool11, true, !dbg !4195
  br i1 %lnot12, label %for.body13, label %for.end34, !dbg !4193

for.body13:                                       ; preds = %for.cond9
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %dit, metadata !4197, metadata !DIExpression()), !dbg !4199
  call void @llvm.dbg.declare(metadata %union.tree_node*** %def_p, metadata !4200, metadata !DIExpression()), !dbg !4201
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4202
  %call14 = call i32 @gimple_code(%union.gimple_statement_d* %11), !dbg !4204
  %cmp = icmp eq i32 %call14, 16, !dbg !4205
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !4206

lor.lhs.false:                                    ; preds = %for.body13
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4207
  %call15 = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %12), !dbg !4208
  %conv = zext i8 %call15 to i32, !dbg !4208
  %tobool16 = icmp ne i32 %conv, 0, !dbg !4208
  br i1 %tobool16, label %if.then, label %if.end, !dbg !4209

if.then:                                          ; preds = %lor.lhs.false, %for.body13
  br label %for.inc32, !dbg !4210

if.end:                                           ; preds = %lor.lhs.false
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4211
  %call17 = call %union.tree_node** @op_iter_init_def(%struct.ssa_operand_iterator_d* %dit, %union.gimple_statement_d* %13, i32 2), !dbg !4211
  store %union.tree_node** %call17, %union.tree_node*** %def_p, align 8, !dbg !4211
  br label %for.cond18, !dbg !4211

for.cond18:                                       ; preds = %for.inc, %if.end
  %call19 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %dit), !dbg !4213
  %tobool20 = icmp ne i8 %call19, 0, !dbg !4213
  %lnot21 = xor i1 %tobool20, true, !dbg !4213
  br i1 %lnot21, label %for.body22, label %for.end, !dbg !4211

for.body22:                                       ; preds = %for.cond18
  call void @llvm.dbg.declare(metadata %union.tree_node** %odef, metadata !4215, metadata !DIExpression()), !dbg !4217
  %14 = load %union.tree_node**, %union.tree_node*** %def_p, align 8, !dbg !4218
  %call23 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %14), !dbg !4218
  store %union.tree_node* %call23, %union.tree_node** %odef, align 8, !dbg !4217
  %15 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %toremove.addr, align 8, !dbg !4219
  %16 = load %union.tree_node*, %union.tree_node** %odef, align 8, !dbg !4221
  %ssa_name = bitcast %union.tree_node* %16 to %struct.tree_ssa_name*, !dbg !4221
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !4221
  %17 = load i32, i32* %version, align 8, !dbg !4221
  %call24 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %15, i32 %17), !dbg !4222
  %tobool25 = icmp ne i32 %call24, 0, !dbg !4222
  br i1 %tobool25, label %if.then26, label %if.end27, !dbg !4223

if.then26:                                        ; preds = %for.body22
  store i8 0, i8* %remove_now, align 1, !dbg !4224
  br label %for.end, !dbg !4226

if.end27:                                         ; preds = %for.body22
  br label %for.inc, !dbg !4227

for.inc:                                          ; preds = %if.end27
  %call28 = call %union.tree_node** @op_iter_next_def(%struct.ssa_operand_iterator_d* %dit), !dbg !4213
  store %union.tree_node** %call28, %union.tree_node*** %def_p, align 8, !dbg !4213
  br label %for.cond18, !dbg !4213, !llvm.loop !4228

for.end:                                          ; preds = %if.then26, %for.cond18
  %18 = load i8, i8* %remove_now, align 1, !dbg !4230
  %tobool29 = icmp ne i8 %18, 0, !dbg !4230
  br i1 %tobool29, label %if.end31, label %if.then30, !dbg !4232

if.then30:                                        ; preds = %for.end
  call void @end_imm_use_stmt_traverse(%struct.immediate_use_iterator_d* %uit), !dbg !4233
  br label %for.end34, !dbg !4233

if.end31:                                         ; preds = %for.end
  br label %for.inc32, !dbg !4235

for.inc32:                                        ; preds = %if.end31, %if.then
  %call33 = call %union.gimple_statement_d* @next_imm_use_stmt(%struct.immediate_use_iterator_d* %uit), !dbg !4195
  store %union.gimple_statement_d* %call33, %union.gimple_statement_d** %stmt, align 8, !dbg !4195
  br label %for.cond9, !dbg !4195, !llvm.loop !4236

for.end34:                                        ; preds = %if.then30, %for.cond9
  %19 = load i8, i8* %remove_now, align 1, !dbg !4238
  %tobool35 = icmp ne i8 %19, 0, !dbg !4238
  br i1 %tobool35, label %if.then36, label %if.end44, !dbg !4240

if.then36:                                        ; preds = %for.end34
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %def, metadata !4241, metadata !DIExpression()), !dbg !4243
  %20 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4244
  %ssa_name37 = bitcast %union.tree_node* %20 to %struct.tree_ssa_name*, !dbg !4244
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name37, i32 0, i32 2, !dbg !4244
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !4244
  store %union.gimple_statement_d* %21, %union.gimple_statement_d** %def, align 8, !dbg !4243
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4245, metadata !DIExpression()), !dbg !4246
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def, align 8, !dbg !4247
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %gsi, %union.gimple_statement_d* %22), !dbg !4248
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def, align 8, !dbg !4249
  %call38 = call i32 @gimple_code(%union.gimple_statement_d* %23), !dbg !4251
  %cmp39 = icmp eq i32 %call38, 16, !dbg !4252
  br i1 %cmp39, label %if.then41, label %if.else, !dbg !4253

if.then41:                                        ; preds = %if.then36
  call void @remove_phi_node(%struct.gimple_stmt_iterator* %gsi, i8 zeroext 1), !dbg !4254
  br label %if.end42, !dbg !4254

if.else:                                          ; preds = %if.then36
  call void @gsi_remove(%struct.gimple_stmt_iterator* %gsi, i8 zeroext 1), !dbg !4255
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def, align 8, !dbg !4257
  call void @release_defs(%union.gimple_statement_d* %24), !dbg !4258
  br label %if.end42

if.end42:                                         ; preds = %if.else, %if.then41
  %25 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %toremove.addr, align 8, !dbg !4259
  %26 = load i32, i32* %j, align 4, !dbg !4260
  %call43 = call zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def* %25, i32 %26), !dbg !4261
  br label %if.end44, !dbg !4262

if.end44:                                         ; preds = %if.end42, %for.end34
  br label %for.inc45, !dbg !4263

for.inc45:                                        ; preds = %if.end44
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %j), !dbg !4181
  br label %for.cond, !dbg !4181, !llvm.loop !4264

for.end46:                                        ; preds = %for.cond
  br label %while.cond, !dbg !4176, !llvm.loop !4266

while.end:                                        ; preds = %while.cond
  ret void, !dbg !4268
}

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %map, i32 %start_bit, i32* %bit_no) #0 !dbg !4269 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %map.addr = alloca %struct.bitmap_head_def*, align 8
  %start_bit.addr = alloca i32, align 4
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !4277, metadata !DIExpression()), !dbg !4278
  store %struct.bitmap_head_def* %map, %struct.bitmap_head_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %map.addr, metadata !4279, metadata !DIExpression()), !dbg !4280
  store i32 %start_bit, i32* %start_bit.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %start_bit.addr, metadata !4281, metadata !DIExpression()), !dbg !4282
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !4283, metadata !DIExpression()), !dbg !4284
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %map.addr, align 8, !dbg !4285
  %first = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %0, i32 0, i32 0, !dbg !4286
  %1 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first, align 8, !dbg !4286
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4287
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 0, !dbg !4288
  store %struct.bitmap_element_def* %1, %struct.bitmap_element_def** %elt1, align 8, !dbg !4289
  %3 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4290
  %elt2 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %3, i32 0, i32 1, !dbg !4291
  store %struct.bitmap_element_def* null, %struct.bitmap_element_def** %elt2, align 8, !dbg !4292
  br label %while.body, !dbg !4293

while.body:                                       ; preds = %entry, %if.end5
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4294
  %elt11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 0, !dbg !4297
  %5 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt11, align 8, !dbg !4297
  %tobool = icmp ne %struct.bitmap_element_def* %5, null, !dbg !4294
  br i1 %tobool, label %if.end, label %if.then, !dbg !4298

if.then:                                          ; preds = %while.body
  %6 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4299
  %elt12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %6, i32 0, i32 0, !dbg !4301
  store %struct.bitmap_element_def* @bitmap_zero_bits, %struct.bitmap_element_def** %elt12, align 8, !dbg !4302
  br label %while.end, !dbg !4303

if.end:                                           ; preds = %while.body
  %7 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4304
  %elt13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %7, i32 0, i32 0, !dbg !4306
  %8 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt13, align 8, !dbg !4306
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %8, i32 0, i32 2, !dbg !4307
  %9 = load i32, i32* %indx, align 8, !dbg !4307
  %10 = load i32, i32* %start_bit.addr, align 4, !dbg !4308
  %div = udiv i32 %10, 128, !dbg !4309
  %cmp = icmp uge i32 %9, %div, !dbg !4310
  br i1 %cmp, label %if.then4, label %if.end5, !dbg !4311

if.then4:                                         ; preds = %if.end
  br label %while.end, !dbg !4312

if.end5:                                          ; preds = %if.end
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4313
  %elt16 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 0, !dbg !4314
  %12 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt16, align 8, !dbg !4314
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %12, i32 0, i32 0, !dbg !4315
  %13 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !4315
  %14 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4316
  %elt17 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %14, i32 0, i32 0, !dbg !4317
  store %struct.bitmap_element_def* %13, %struct.bitmap_element_def** %elt17, align 8, !dbg !4318
  br label %while.body, !dbg !4293, !llvm.loop !4319

while.end:                                        ; preds = %if.then4, %if.then
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4321
  %elt18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !4323
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt18, align 8, !dbg !4323
  %indx9 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 2, !dbg !4324
  %17 = load i32, i32* %indx9, align 8, !dbg !4324
  %18 = load i32, i32* %start_bit.addr, align 4, !dbg !4325
  %div10 = udiv i32 %18, 128, !dbg !4326
  %cmp11 = icmp ne i32 %17, %div10, !dbg !4327
  br i1 %cmp11, label %if.then12, label %if.end15, !dbg !4328

if.then12:                                        ; preds = %while.end
  %19 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4329
  %elt113 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %19, i32 0, i32 0, !dbg !4330
  %20 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt113, align 8, !dbg !4330
  %indx14 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %20, i32 0, i32 2, !dbg !4331
  %21 = load i32, i32* %indx14, align 8, !dbg !4331
  %mul = mul i32 %21, 128, !dbg !4332
  store i32 %mul, i32* %start_bit.addr, align 4, !dbg !4333
  br label %if.end15, !dbg !4334

if.end15:                                         ; preds = %if.then12, %while.end
  %22 = load i32, i32* %start_bit.addr, align 4, !dbg !4335
  %div16 = udiv i32 %22, 64, !dbg !4336
  %rem = urem i32 %div16, 2, !dbg !4337
  %23 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4338
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %23, i32 0, i32 2, !dbg !4339
  store i32 %rem, i32* %word_no, align 8, !dbg !4340
  %24 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4341
  %elt117 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %24, i32 0, i32 0, !dbg !4342
  %25 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt117, align 8, !dbg !4342
  %bits = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %25, i32 0, i32 3, !dbg !4343
  %26 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4344
  %word_no18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %26, i32 0, i32 2, !dbg !4345
  %27 = load i32, i32* %word_no18, align 8, !dbg !4345
  %idxprom = zext i32 %27 to i64, !dbg !4341
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits, i64 0, i64 %idxprom, !dbg !4341
  %28 = load i64, i64* %arrayidx, align 8, !dbg !4341
  %29 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4346
  %bits19 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %29, i32 0, i32 3, !dbg !4347
  store i64 %28, i64* %bits19, align 8, !dbg !4348
  %30 = load i32, i32* %start_bit.addr, align 4, !dbg !4349
  %rem20 = urem i32 %30, 64, !dbg !4350
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4351
  %bits21 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 3, !dbg !4352
  %32 = load i64, i64* %bits21, align 8, !dbg !4353
  %sh_prom = zext i32 %rem20 to i64, !dbg !4353
  %shr = lshr i64 %32, %sh_prom, !dbg !4353
  store i64 %shr, i64* %bits21, align 8, !dbg !4353
  %33 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4354
  %bits22 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %33, i32 0, i32 3, !dbg !4355
  %34 = load i64, i64* %bits22, align 8, !dbg !4355
  %tobool23 = icmp ne i64 %34, 0, !dbg !4356
  %lnot = xor i1 %tobool23, true, !dbg !4356
  %lnot.ext = zext i1 %lnot to i32, !dbg !4356
  %35 = load i32, i32* %start_bit.addr, align 4, !dbg !4357
  %add = add i32 %35, %lnot.ext, !dbg !4357
  store i32 %add, i32* %start_bit.addr, align 4, !dbg !4357
  %36 = load i32, i32* %start_bit.addr, align 4, !dbg !4358
  %37 = load i32*, i32** %bit_no.addr, align 8, !dbg !4359
  store i32 %36, i32* %37, align 4, !dbg !4360
  ret void, !dbg !4361
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !4362 {
entry:
  %retval = alloca i8, align 1
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !4365, metadata !DIExpression()), !dbg !4366
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !4367, metadata !DIExpression()), !dbg !4368
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4369
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !4371
  %1 = load i64, i64* %bits, align 8, !dbg !4371
  %tobool = icmp ne i64 %1, 0, !dbg !4369
  br i1 %tobool, label %if.then, label %if.end, !dbg !4372

if.then:                                          ; preds = %entry
  br label %next_bit, !dbg !4373

next_bit:                                         ; preds = %if.then15, %if.then
  call void @llvm.dbg.label(metadata !4374), !dbg !4376
  br label %while.cond, !dbg !4377

while.cond:                                       ; preds = %while.body, %next_bit
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4378
  %bits1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 3, !dbg !4379
  %3 = load i64, i64* %bits1, align 8, !dbg !4379
  %and = and i64 %3, 1, !dbg !4380
  %tobool2 = icmp ne i64 %and, 0, !dbg !4381
  %lnot = xor i1 %tobool2, true, !dbg !4381
  br i1 %lnot, label %while.body, label %while.end, !dbg !4377

while.body:                                       ; preds = %while.cond
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4382
  %bits3 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 3, !dbg !4384
  %5 = load i64, i64* %bits3, align 8, !dbg !4385
  %shr = lshr i64 %5, 1, !dbg !4385
  store i64 %shr, i64* %bits3, align 8, !dbg !4385
  %6 = load i32*, i32** %bit_no.addr, align 8, !dbg !4386
  %7 = load i32, i32* %6, align 4, !dbg !4387
  %add = add i32 %7, 1, !dbg !4387
  store i32 %add, i32* %6, align 4, !dbg !4387
  br label %while.cond, !dbg !4377, !llvm.loop !4388

while.end:                                        ; preds = %while.cond
  store i8 1, i8* %retval, align 1, !dbg !4390
  br label %return, !dbg !4390

if.end:                                           ; preds = %entry
  %8 = load i32*, i32** %bit_no.addr, align 8, !dbg !4391
  %9 = load i32, i32* %8, align 4, !dbg !4392
  %add4 = add i32 %9, 64, !dbg !4393
  %sub = sub i32 %add4, 1, !dbg !4394
  %div = udiv i32 %sub, 64, !dbg !4395
  %mul = mul i32 %div, 64, !dbg !4396
  %10 = load i32*, i32** %bit_no.addr, align 8, !dbg !4397
  store i32 %mul, i32* %10, align 4, !dbg !4398
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4399
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 2, !dbg !4400
  %12 = load i32, i32* %word_no, align 8, !dbg !4401
  %inc = add i32 %12, 1, !dbg !4401
  store i32 %inc, i32* %word_no, align 8, !dbg !4401
  br label %while.body6, !dbg !4402

while.body6:                                      ; preds = %if.end, %if.end26
  br label %while.cond7, !dbg !4403

while.cond7:                                      ; preds = %if.end16, %while.body6
  %13 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4405
  %word_no8 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %13, i32 0, i32 2, !dbg !4406
  %14 = load i32, i32* %word_no8, align 8, !dbg !4406
  %cmp = icmp ne i32 %14, 2, !dbg !4407
  br i1 %cmp, label %while.body9, label %while.end20, !dbg !4403

while.body9:                                      ; preds = %while.cond7
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4408
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !4410
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt1, align 8, !dbg !4410
  %bits10 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 3, !dbg !4411
  %17 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4412
  %word_no11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %17, i32 0, i32 2, !dbg !4413
  %18 = load i32, i32* %word_no11, align 8, !dbg !4413
  %idxprom = zext i32 %18 to i64, !dbg !4408
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits10, i64 0, i64 %idxprom, !dbg !4408
  %19 = load i64, i64* %arrayidx, align 8, !dbg !4408
  %20 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4414
  %bits12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %20, i32 0, i32 3, !dbg !4415
  store i64 %19, i64* %bits12, align 8, !dbg !4416
  %21 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4417
  %bits13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %21, i32 0, i32 3, !dbg !4419
  %22 = load i64, i64* %bits13, align 8, !dbg !4419
  %tobool14 = icmp ne i64 %22, 0, !dbg !4417
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !4420

if.then15:                                        ; preds = %while.body9
  br label %next_bit, !dbg !4421

if.end16:                                         ; preds = %while.body9
  %23 = load i32*, i32** %bit_no.addr, align 8, !dbg !4422
  %24 = load i32, i32* %23, align 4, !dbg !4423
  %add17 = add i32 %24, 64, !dbg !4423
  store i32 %add17, i32* %23, align 4, !dbg !4423
  %25 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4424
  %word_no18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %25, i32 0, i32 2, !dbg !4425
  %26 = load i32, i32* %word_no18, align 8, !dbg !4426
  %inc19 = add i32 %26, 1, !dbg !4426
  store i32 %inc19, i32* %word_no18, align 8, !dbg !4426
  br label %while.cond7, !dbg !4403, !llvm.loop !4427

while.end20:                                      ; preds = %while.cond7
  %27 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4429
  %elt121 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %27, i32 0, i32 0, !dbg !4430
  %28 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt121, align 8, !dbg !4430
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %28, i32 0, i32 0, !dbg !4431
  %29 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !4431
  %30 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4432
  %elt122 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %30, i32 0, i32 0, !dbg !4433
  store %struct.bitmap_element_def* %29, %struct.bitmap_element_def** %elt122, align 8, !dbg !4434
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4435
  %elt123 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 0, !dbg !4437
  %32 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt123, align 8, !dbg !4437
  %tobool24 = icmp ne %struct.bitmap_element_def* %32, null, !dbg !4435
  br i1 %tobool24, label %if.end26, label %if.then25, !dbg !4438

if.then25:                                        ; preds = %while.end20
  store i8 0, i8* %retval, align 1, !dbg !4439
  br label %return, !dbg !4439

if.end26:                                         ; preds = %while.end20
  %33 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4440
  %elt127 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %33, i32 0, i32 0, !dbg !4441
  %34 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt127, align 8, !dbg !4441
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %34, i32 0, i32 2, !dbg !4442
  %35 = load i32, i32* %indx, align 8, !dbg !4442
  %mul28 = mul i32 %35, 128, !dbg !4443
  %36 = load i32*, i32** %bit_no.addr, align 8, !dbg !4444
  store i32 %mul28, i32* %36, align 4, !dbg !4445
  %37 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4446
  %word_no29 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %37, i32 0, i32 2, !dbg !4447
  store i32 0, i32* %word_no29, align 8, !dbg !4448
  br label %while.body6, !dbg !4402, !llvm.loop !4449

return:                                           ; preds = %if.then25, %while.end
  %38 = load i8, i8* %retval, align 1, !dbg !4451
  ret i8 %38, !dbg !4451
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %vec_, i32 %ix_) #0 !dbg !4452 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !4457, metadata !DIExpression()), !dbg !4458
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !4459, metadata !DIExpression()), !dbg !4458
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !4458
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !4458
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !4458

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !4458
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !4458
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 0, !dbg !4458
  %3 = load i32, i32* %num, align 8, !dbg !4458
  %cmp = icmp ult i32 %1, %3, !dbg !4458
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !4460
  %land.ext = zext i1 %4 to i32, !dbg !4458
  %5 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !4458
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %5, i32 0, i32 2, !dbg !4458
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !4458
  %idxprom = zext i32 %6 to i64, !dbg !4458
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !4458
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !4458
  ret %union.tree_node* %7, !dbg !4458
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %gs) #0 !dbg !4461 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4462, metadata !DIExpression()), !dbg !4463
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4464
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !4465
  %cmp = icmp eq i32 %call, 2, !dbg !4466
  %conv = zext i1 %cmp to i32, !dbg !4466
  %conv1 = trunc i32 %conv to i8, !dbg !4465
  ret i8 %conv1, !dbg !4467
}

declare dso_local i32 @bitmap_bit_p(%struct.bitmap_head_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @end_imm_use_stmt_traverse(%struct.immediate_use_iterator_d* %imm) #0 !dbg !4468 {
entry:
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !4471, metadata !DIExpression()), !dbg !4472
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !4473
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 2, !dbg !4474
  call void @delink_imm_use(%struct.ssa_use_operand_d* %iter_node), !dbg !4475
  ret void, !dbg !4476
}

declare dso_local void @remove_phi_node(%struct.gimple_stmt_iterator*, i8 zeroext) #2

declare dso_local void @gsi_remove(%struct.gimple_stmt_iterator*, i8 zeroext) #2

declare dso_local void @release_defs(%union.gimple_statement_d*) #2

declare dso_local zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !4477 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !4480, metadata !DIExpression()), !dbg !4481
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !4482, metadata !DIExpression()), !dbg !4483
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4484
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !4485
  %1 = load i64, i64* %bits, align 8, !dbg !4486
  %shr = lshr i64 %1, 1, !dbg !4486
  store i64 %shr, i64* %bits, align 8, !dbg !4486
  %2 = load i32*, i32** %bit_no.addr, align 8, !dbg !4487
  %3 = load i32, i32* %2, align 4, !dbg !4488
  %add = add i32 %3, 1, !dbg !4488
  store i32 %add, i32* %2, align 4, !dbg !4488
  ret void, !dbg !4489
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @verify_ssa(i8 zeroext %check_modified_stmt) #0 !dbg !4490 {
entry:
  %check_modified_stmt.addr = alloca i8, align 1
  %i = alloca i64, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %definition_block = alloca %struct.basic_block_def**, align 8
  %iter = alloca %struct.ssa_operand_iterator_d, align 8
  %op = alloca %union.tree_node*, align 8
  %orig_dom_state = alloca i32, align 4
  %names_defined_in_bb = alloca %struct.bitmap_head_def*, align 8
  %name = alloca %union.tree_node*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %bb50 = alloca %struct.basic_block_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %tmp76 = alloca %struct.gimple_stmt_iterator, align 8
  %tmp93 = alloca %struct.gimple_stmt_iterator, align 8
  %stmt100 = alloca %union.gimple_statement_d*, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  %has_err = alloca i8, align 1
  %lhs = alloca %union.tree_node*, align 8
  %base_address = alloca %union.tree_node*, align 8
  store i8 %check_modified_stmt, i8* %check_modified_stmt.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %check_modified_stmt.addr, metadata !4493, metadata !DIExpression()), !dbg !4494
  call void @llvm.dbg.declare(metadata i64* %i, metadata !4495, metadata !DIExpression()), !dbg !4496
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !4497, metadata !DIExpression()), !dbg !4498
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %definition_block, metadata !4499, metadata !DIExpression()), !dbg !4500
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4501
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !4501
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 3, !dbg !4501
  %1 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !4501
  %ssa_names = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %1, i32 0, i32 2, !dbg !4501
  %2 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names, align 8, !dbg !4501
  %tobool = icmp ne %struct.VEC_tree_gc* %2, null, !dbg !4501
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4501

cond.true:                                        ; preds = %entry
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4501
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !4501
  %gimple_df2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 3, !dbg !4501
  %4 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df2, align 8, !dbg !4501
  %ssa_names3 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %4, i32 0, i32 2, !dbg !4501
  %5 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names3, align 8, !dbg !4501
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %5, i32 0, i32 0, !dbg !4501
  br label %cond.end, !dbg !4501

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4501

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4501
  %call = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond), !dbg !4501
  %conv = zext i32 %call to i64, !dbg !4501
  %call4 = call i8* @xcalloc(i64 %conv, i64 8), !dbg !4501
  %6 = bitcast i8* %call4 to %struct.basic_block_def**, !dbg !4501
  store %struct.basic_block_def** %6, %struct.basic_block_def*** %definition_block, align 8, !dbg !4500
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %iter, metadata !4502, metadata !DIExpression()), !dbg !4503
  call void @llvm.dbg.declare(metadata %union.tree_node** %op, metadata !4504, metadata !DIExpression()), !dbg !4505
  call void @llvm.dbg.declare(metadata i32* %orig_dom_state, metadata !4506, metadata !DIExpression()), !dbg !4507
  %call5 = call i32 @dom_info_state(i32 1), !dbg !4508
  store i32 %call5, i32* %orig_dom_state, align 4, !dbg !4507
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %names_defined_in_bb, metadata !4509, metadata !DIExpression()), !dbg !4510
  %call6 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !4511
  store %struct.bitmap_head_def* %call6, %struct.bitmap_head_def** %names_defined_in_bb, align 8, !dbg !4510
  %7 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4512
  %add.ptr7 = getelementptr inbounds %struct.function, %struct.function* %7, i64 0, !dbg !4512
  %call8 = call zeroext i8 @need_ssa_update_p(%struct.function* %add.ptr7), !dbg !4512
  %tobool9 = icmp ne i8 %call8, 0, !dbg !4512
  br i1 %tobool9, label %cond.true10, label %cond.false11, !dbg !4512

cond.true10:                                      ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 872, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4512
  br label %cond.end12, !dbg !4512

cond.false11:                                     ; preds = %cond.end
  br label %cond.end12, !dbg !4512

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond13 = phi i32 [ 0, %cond.true10 ], [ 0, %cond.false11 ], !dbg !4512
  call void @verify_stmts(), !dbg !4513
  br label %do.body, !dbg !4514

do.body:                                          ; preds = %cond.end12
  %8 = load i8, i8* @timevar_enable, align 1, !dbg !4515
  %tobool14 = icmp ne i8 %8, 0, !dbg !4515
  br i1 %tobool14, label %if.then, label %if.end, !dbg !4518

if.then:                                          ; preds = %do.body
  call void @timevar_push_1(i32 107), !dbg !4515
  br label %if.end, !dbg !4515

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end, !dbg !4518

do.end:                                           ; preds = %if.end
  store i64 1, i64* %i, align 8, !dbg !4519
  br label %for.cond, !dbg !4521

for.cond:                                         ; preds = %for.inc, %do.end
  %9 = load i64, i64* %i, align 8, !dbg !4522
  %10 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4524
  %add.ptr15 = getelementptr inbounds %struct.function, %struct.function* %10, i64 0, !dbg !4524
  %gimple_df16 = getelementptr inbounds %struct.function, %struct.function* %add.ptr15, i32 0, i32 3, !dbg !4524
  %11 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df16, align 8, !dbg !4524
  %ssa_names17 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %11, i32 0, i32 2, !dbg !4524
  %12 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names17, align 8, !dbg !4524
  %tobool18 = icmp ne %struct.VEC_tree_gc* %12, null, !dbg !4524
  br i1 %tobool18, label %cond.true19, label %cond.false24, !dbg !4524

cond.true19:                                      ; preds = %for.cond
  %13 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4524
  %add.ptr20 = getelementptr inbounds %struct.function, %struct.function* %13, i64 0, !dbg !4524
  %gimple_df21 = getelementptr inbounds %struct.function, %struct.function* %add.ptr20, i32 0, i32 3, !dbg !4524
  %14 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df21, align 8, !dbg !4524
  %ssa_names22 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %14, i32 0, i32 2, !dbg !4524
  %15 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names22, align 8, !dbg !4524
  %base23 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %15, i32 0, i32 0, !dbg !4524
  br label %cond.end25, !dbg !4524

cond.false24:                                     ; preds = %for.cond
  br label %cond.end25, !dbg !4524

cond.end25:                                       ; preds = %cond.false24, %cond.true19
  %cond26 = phi %struct.VEC_tree_base* [ %base23, %cond.true19 ], [ null, %cond.false24 ], !dbg !4524
  %call27 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond26), !dbg !4524
  %conv28 = zext i32 %call27 to i64, !dbg !4524
  %cmp = icmp ult i64 %9, %conv28, !dbg !4525
  br i1 %cmp, label %for.body, label %for.end, !dbg !4526

for.body:                                         ; preds = %cond.end25
  call void @llvm.dbg.declare(metadata %union.tree_node** %name, metadata !4527, metadata !DIExpression()), !dbg !4529
  %16 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4530
  %add.ptr30 = getelementptr inbounds %struct.function, %struct.function* %16, i64 0, !dbg !4530
  %gimple_df31 = getelementptr inbounds %struct.function, %struct.function* %add.ptr30, i32 0, i32 3, !dbg !4530
  %17 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df31, align 8, !dbg !4530
  %ssa_names32 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %17, i32 0, i32 2, !dbg !4530
  %18 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names32, align 8, !dbg !4530
  %tobool33 = icmp ne %struct.VEC_tree_gc* %18, null, !dbg !4530
  br i1 %tobool33, label %cond.true34, label %cond.false39, !dbg !4530

cond.true34:                                      ; preds = %for.body
  %19 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4530
  %add.ptr35 = getelementptr inbounds %struct.function, %struct.function* %19, i64 0, !dbg !4530
  %gimple_df36 = getelementptr inbounds %struct.function, %struct.function* %add.ptr35, i32 0, i32 3, !dbg !4530
  %20 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df36, align 8, !dbg !4530
  %ssa_names37 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %20, i32 0, i32 2, !dbg !4530
  %21 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names37, align 8, !dbg !4530
  %base38 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %21, i32 0, i32 0, !dbg !4530
  br label %cond.end40, !dbg !4530

cond.false39:                                     ; preds = %for.body
  br label %cond.end40, !dbg !4530

cond.end40:                                       ; preds = %cond.false39, %cond.true34
  %cond41 = phi %struct.VEC_tree_base* [ %base38, %cond.true34 ], [ null, %cond.false39 ], !dbg !4530
  %22 = load i64, i64* %i, align 8, !dbg !4530
  %conv42 = trunc i64 %22 to i32, !dbg !4530
  %call43 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond41, i32 %conv42), !dbg !4530
  store %union.tree_node* %call43, %union.tree_node** %name, align 8, !dbg !4529
  %23 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !4531
  %tobool44 = icmp ne %union.tree_node* %23, null, !dbg !4531
  br i1 %tobool44, label %if.then45, label %if.end57, !dbg !4533

if.then45:                                        ; preds = %cond.end40
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !4534, metadata !DIExpression()), !dbg !4536
  %24 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !4537
  %base46 = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !4537
  %25 = bitcast %struct.tree_base* %base46 to i64*, !dbg !4537
  %bf.load = load i64, i64* %25, align 8, !dbg !4538
  %bf.clear = and i64 %bf.load, -1099511627777, !dbg !4538
  store i64 %bf.clear, i64* %25, align 8, !dbg !4538
  %26 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !4539
  %ssa_name = bitcast %union.tree_node* %26 to %struct.tree_ssa_name*, !dbg !4539
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !4539
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !4539
  store %union.gimple_statement_d* %27, %union.gimple_statement_d** %stmt, align 8, !dbg !4540
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4541
  %call47 = call zeroext i8 @gimple_nop_p(%union.gimple_statement_d* %28), !dbg !4543
  %tobool48 = icmp ne i8 %call47, 0, !dbg !4543
  br i1 %tobool48, label %if.end56, label %if.then49, !dbg !4544

if.then49:                                        ; preds = %if.then45
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb50, metadata !4545, metadata !DIExpression()), !dbg !4547
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4548
  %call51 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %29), !dbg !4549
  store %struct.basic_block_def* %call51, %struct.basic_block_def** %bb50, align 8, !dbg !4547
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %bb50, align 8, !dbg !4550
  %31 = load %struct.basic_block_def**, %struct.basic_block_def*** %definition_block, align 8, !dbg !4551
  %32 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !4552
  %33 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4553
  %34 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !4554
  %call52 = call zeroext i8 @is_gimple_reg(%union.tree_node* %34), !dbg !4555
  %tobool53 = icmp ne i8 %call52, 0, !dbg !4556
  %lnot = xor i1 %tobool53, true, !dbg !4556
  %lnot.ext = zext i1 %lnot to i32, !dbg !4556
  %conv54 = trunc i32 %lnot.ext to i8, !dbg !4556
  %call55 = call zeroext i8 @verify_def(%struct.basic_block_def* %30, %struct.basic_block_def** %31, %union.tree_node* %32, %union.gimple_statement_d* %33, i8 zeroext %conv54), !dbg !4557
  br label %if.end56, !dbg !4558

if.end56:                                         ; preds = %if.then49, %if.then45
  br label %if.end57, !dbg !4559

if.end57:                                         ; preds = %if.end56, %cond.end40
  br label %for.inc, !dbg !4560

for.inc:                                          ; preds = %if.end57
  %35 = load i64, i64* %i, align 8, !dbg !4561
  %inc = add i64 %35, 1, !dbg !4561
  store i64 %inc, i64* %i, align 8, !dbg !4561
  br label %for.cond, !dbg !4562, !llvm.loop !4563

for.end:                                          ; preds = %cond.end25
  call void @calculate_dominance_info(i32 1), !dbg !4565
  %36 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4566
  %add.ptr58 = getelementptr inbounds %struct.function, %struct.function* %36, i64 0, !dbg !4566
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr58, i32 0, i32 1, !dbg !4566
  %37 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4566
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %37, i32 0, i32 0, !dbg !4566
  %38 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !4566
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %38, i32 0, i32 6, !dbg !4566
  %39 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !4566
  store %struct.basic_block_def* %39, %struct.basic_block_def** %bb, align 8, !dbg !4566
  br label %for.cond59, !dbg !4566

for.cond59:                                       ; preds = %for.inc296, %for.end
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4568
  %41 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4568
  %add.ptr60 = getelementptr inbounds %struct.function, %struct.function* %41, i64 0, !dbg !4568
  %cfg61 = getelementptr inbounds %struct.function, %struct.function* %add.ptr60, i32 0, i32 1, !dbg !4568
  %42 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg61, align 8, !dbg !4568
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %42, i32 0, i32 1, !dbg !4568
  %43 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !4568
  %cmp62 = icmp ne %struct.basic_block_def* %40, %43, !dbg !4568
  br i1 %cmp62, label %for.body64, label %for.end298, !dbg !4566

for.body64:                                       ; preds = %for.cond59
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !4570, metadata !DIExpression()), !dbg !4572
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !4573, metadata !DIExpression()), !dbg !4574
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !4575, metadata !DIExpression()), !dbg !4582
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4583, metadata !DIExpression()), !dbg !4584
  %44 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4585
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %44, i32 0, i32 0, !dbg !4585
  %call65 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !4585
  %45 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !4585
  %46 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %45, i32 0, i32 0, !dbg !4585
  %47 = extractvalue { i32, %struct.VEC_edge_gc** } %call65, 0, !dbg !4585
  store i32 %47, i32* %46, align 8, !dbg !4585
  %48 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %45, i32 0, i32 1, !dbg !4585
  %49 = extractvalue { i32, %struct.VEC_edge_gc** } %call65, 1, !dbg !4585
  store %struct.VEC_edge_gc** %49, %struct.VEC_edge_gc*** %48, align 8, !dbg !4585
  %50 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !4585
  %51 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !4585
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %50, i8* align 8 %51, i64 16, i1 false), !dbg !4585
  br label %for.cond66, !dbg !4585

for.cond66:                                       ; preds = %for.inc74, %for.body64
  %52 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !4587
  %53 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %52, i32 0, i32 0, !dbg !4587
  %54 = load i32, i32* %53, align 8, !dbg !4587
  %55 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %52, i32 0, i32 1, !dbg !4587
  %56 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %55, align 8, !dbg !4587
  %call67 = call zeroext i8 @ei_cond(i32 %54, %struct.VEC_edge_gc** %56, %struct.edge_def** %e), !dbg !4587
  %tobool68 = icmp ne i8 %call67, 0, !dbg !4585
  br i1 %tobool68, label %for.body69, label %for.end75, !dbg !4585

for.body69:                                       ; preds = %for.cond66
  %57 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4589
  %aux = getelementptr inbounds %struct.edge_def, %struct.edge_def* %57, i32 0, i32 3, !dbg !4592
  %58 = load i8*, i8** %aux, align 8, !dbg !4592
  %tobool70 = icmp ne i8* %58, null, !dbg !4589
  br i1 %tobool70, label %if.then71, label %if.end73, !dbg !4593

if.then71:                                        ; preds = %for.body69
  %59 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4594
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %59, i32 0, i32 0, !dbg !4596
  %60 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !4596
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %60, i32 0, i32 9, !dbg !4597
  %61 = load i32, i32* %index, align 8, !dbg !4597
  %62 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4598
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %62, i32 0, i32 1, !dbg !4599
  %63 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !4599
  %index72 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %63, i32 0, i32 9, !dbg !4600
  %64 = load i32, i32* %index72, align 8, !dbg !4600
  call void (i8*, ...) @error(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.2, i64 0, i64 0), i32 %61, i32 %64), !dbg !4601
  br label %err, !dbg !4602

if.end73:                                         ; preds = %for.body69
  br label %for.inc74, !dbg !4603

for.inc74:                                        ; preds = %if.end73
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !4587
  br label %for.cond66, !dbg !4587, !llvm.loop !4604

for.end75:                                        ; preds = %for.cond66
  %65 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4606
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp76, %struct.basic_block_def* %65), !dbg !4608
  %66 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4608
  %67 = bitcast %struct.gimple_stmt_iterator* %tmp76 to i8*, !dbg !4608
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %66, i8* align 8 %67, i64 24, i1 false), !dbg !4608
  br label %for.cond77, !dbg !4609

for.cond77:                                       ; preds = %for.inc91, %for.end75
  %call78 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4610
  %tobool79 = icmp ne i8 %call78, 0, !dbg !4612
  %lnot80 = xor i1 %tobool79, true, !dbg !4612
  br i1 %lnot80, label %for.body82, label %for.end92, !dbg !4613

for.body82:                                       ; preds = %for.cond77
  %call83 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4614
  store %union.gimple_statement_d* %call83, %union.gimple_statement_d** %phi, align 8, !dbg !4616
  %68 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4617
  %69 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4619
  %70 = load %struct.basic_block_def**, %struct.basic_block_def*** %definition_block, align 8, !dbg !4620
  %call84 = call zeroext i8 @verify_phi_args(%union.gimple_statement_d* %68, %struct.basic_block_def* %69, %struct.basic_block_def** %70), !dbg !4621
  %tobool85 = icmp ne i8 %call84, 0, !dbg !4621
  br i1 %tobool85, label %if.then86, label %if.end87, !dbg !4622

if.then86:                                        ; preds = %for.body82
  br label %err, !dbg !4623

if.end87:                                         ; preds = %for.body82
  %71 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %names_defined_in_bb, align 8, !dbg !4624
  %72 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4625
  %call88 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %72), !dbg !4625
  %ssa_name89 = bitcast %union.tree_node* %call88 to %struct.tree_ssa_name*, !dbg !4625
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name89, i32 0, i32 3, !dbg !4625
  %73 = load i32, i32* %version, align 8, !dbg !4625
  %call90 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %71, i32 %73), !dbg !4626
  br label %for.inc91, !dbg !4627

for.inc91:                                        ; preds = %if.end87
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !4628
  br label %for.cond77, !dbg !4629, !llvm.loop !4630

for.end92:                                        ; preds = %for.cond77
  %74 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4632
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp93, %struct.basic_block_def* %74), !dbg !4634
  %75 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4634
  %76 = bitcast %struct.gimple_stmt_iterator* %tmp93 to i8*, !dbg !4634
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %75, i8* align 8 %76, i64 24, i1 false), !dbg !4634
  br label %for.cond94, !dbg !4635

for.cond94:                                       ; preds = %for.inc294, %for.end92
  %call95 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4636
  %tobool96 = icmp ne i8 %call95, 0, !dbg !4638
  %lnot97 = xor i1 %tobool96, true, !dbg !4638
  br i1 %lnot97, label %for.body99, label %for.end295, !dbg !4639

for.body99:                                       ; preds = %for.cond94
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt100, metadata !4640, metadata !DIExpression()), !dbg !4642
  %call101 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4643
  store %union.gimple_statement_d* %call101, %union.gimple_statement_d** %stmt100, align 8, !dbg !4642
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !4644, metadata !DIExpression()), !dbg !4645
  call void @llvm.dbg.declare(metadata i8* %has_err, metadata !4646, metadata !DIExpression()), !dbg !4647
  %77 = load i8, i8* %check_modified_stmt.addr, align 1, !dbg !4648
  %conv102 = zext i8 %77 to i32, !dbg !4648
  %tobool103 = icmp ne i32 %conv102, 0, !dbg !4648
  br i1 %tobool103, label %land.lhs.true, label %if.end108, !dbg !4650

land.lhs.true:                                    ; preds = %for.body99
  %78 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt100, align 8, !dbg !4651
  %call104 = call zeroext i8 @gimple_modified_p(%union.gimple_statement_d* %78), !dbg !4652
  %conv105 = zext i8 %call104 to i32, !dbg !4652
  %tobool106 = icmp ne i32 %conv105, 0, !dbg !4652
  br i1 %tobool106, label %if.then107, label %if.end108, !dbg !4653

if.then107:                                       ; preds = %land.lhs.true
  %79 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt100, align 8, !dbg !4654
  %80 = bitcast %union.gimple_statement_d* %79 to i8*, !dbg !4656
  call void (i8*, ...) @error(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.3, i64 0, i64 0), i8* %80), !dbg !4657
  %81 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !4658
  %82 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt100, align 8, !dbg !4659
  call void @print_gimple_stmt(%struct._IO_FILE* %81, %union.gimple_statement_d* %82, i32 0, i32 64), !dbg !4660
  br label %err, !dbg !4661

if.end108:                                        ; preds = %land.lhs.true, %for.body99
  %83 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt100, align 8, !dbg !4662
  %call109 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %83), !dbg !4664
  %conv110 = zext i8 %call109 to i32, !dbg !4664
  %tobool111 = icmp ne i32 %conv110, 0, !dbg !4664
  br i1 %tobool111, label %land.lhs.true112, label %if.else, !dbg !4665

land.lhs.true112:                                 ; preds = %if.end108
  %84 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt100, align 8, !dbg !4666
  %call113 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %84), !dbg !4666
  %base114 = bitcast %union.tree_node* %call113 to %struct.tree_base*, !dbg !4666
  %85 = bitcast %struct.tree_base* %base114 to i64*, !dbg !4666
  %bf.load115 = load i64, i64* %85, align 8, !dbg !4666
  %bf.clear116 = and i64 %bf.load115, 65535, !dbg !4666
  %bf.cast = trunc i64 %bf.clear116 to i32, !dbg !4666
  %cmp117 = icmp ne i32 %bf.cast, 141, !dbg !4667
  br i1 %cmp117, label %if.then119, label %if.else, !dbg !4668

if.then119:                                       ; preds = %land.lhs.true112
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !4669, metadata !DIExpression()), !dbg !4671
  call void @llvm.dbg.declare(metadata %union.tree_node** %base_address, metadata !4672, metadata !DIExpression()), !dbg !4673
  %86 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt100, align 8, !dbg !4674
  %call120 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %86), !dbg !4675
  store %union.tree_node* %call120, %union.tree_node** %lhs, align 8, !dbg !4676
  %87 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !4677
  %call121 = call %union.tree_node* @get_base_address(%union.tree_node* %87), !dbg !4678
  store %union.tree_node* %call121, %union.tree_node** %base_address, align 8, !dbg !4679
  %88 = load %union.tree_node*, %union.tree_node** %base_address, align 8, !dbg !4680
  %tobool122 = icmp ne %union.tree_node* %88, null, !dbg !4680
  br i1 %tobool122, label %land.lhs.true123, label %if.end183, !dbg !4682

land.lhs.true123:                                 ; preds = %if.then119
  %89 = load %union.tree_node*, %union.tree_node** %base_address, align 8, !dbg !4683
  %base124 = bitcast %union.tree_node* %89 to %struct.tree_base*, !dbg !4683
  %90 = bitcast %struct.tree_base* %base124 to i64*, !dbg !4683
  %bf.load125 = load i64, i64* %90, align 8, !dbg !4683
  %bf.clear126 = and i64 %bf.load125, 65535, !dbg !4683
  %bf.cast127 = trunc i64 %bf.clear126 to i32, !dbg !4683
  %cmp128 = icmp eq i32 %bf.cast127, 32, !dbg !4683
  br i1 %cmp128, label %land.lhs.true176, label %lor.lhs.false, !dbg !4683

lor.lhs.false:                                    ; preds = %land.lhs.true123
  %91 = load %union.tree_node*, %union.tree_node** %base_address, align 8, !dbg !4683
  %base130 = bitcast %union.tree_node* %91 to %struct.tree_base*, !dbg !4683
  %92 = bitcast %struct.tree_base* %base130 to i64*, !dbg !4683
  %bf.load131 = load i64, i64* %92, align 8, !dbg !4683
  %bf.clear132 = and i64 %bf.load131, 65535, !dbg !4683
  %bf.cast133 = trunc i64 %bf.clear132 to i32, !dbg !4683
  %cmp134 = icmp eq i32 %bf.cast133, 34, !dbg !4683
  br i1 %cmp134, label %land.lhs.true176, label %lor.lhs.false136, !dbg !4683

lor.lhs.false136:                                 ; preds = %lor.lhs.false
  %93 = load %union.tree_node*, %union.tree_node** %base_address, align 8, !dbg !4683
  %base137 = bitcast %union.tree_node* %93 to %struct.tree_base*, !dbg !4683
  %94 = bitcast %struct.tree_base* %base137 to i64*, !dbg !4683
  %bf.load138 = load i64, i64* %94, align 8, !dbg !4683
  %bf.clear139 = and i64 %bf.load138, 65535, !dbg !4683
  %bf.cast140 = trunc i64 %bf.clear139 to i32, !dbg !4683
  %cmp141 = icmp eq i32 %bf.cast140, 36, !dbg !4683
  br i1 %cmp141, label %land.lhs.true176, label %lor.lhs.false143, !dbg !4683

lor.lhs.false143:                                 ; preds = %lor.lhs.false136
  %95 = load %union.tree_node*, %union.tree_node** %base_address, align 8, !dbg !4683
  %base144 = bitcast %union.tree_node* %95 to %struct.tree_base*, !dbg !4683
  %96 = bitcast %struct.tree_base* %base144 to i64*, !dbg !4683
  %bf.load145 = load i64, i64* %96, align 8, !dbg !4683
  %bf.clear146 = and i64 %bf.load145, 65535, !dbg !4683
  %bf.cast147 = trunc i64 %bf.clear146 to i32, !dbg !4683
  %cmp148 = icmp eq i32 %bf.cast147, 141, !dbg !4683
  br i1 %cmp148, label %land.lhs.true150, label %if.end183, !dbg !4683

land.lhs.true150:                                 ; preds = %lor.lhs.false143
  %97 = load %union.tree_node*, %union.tree_node** %base_address, align 8, !dbg !4683
  %ssa_name151 = bitcast %union.tree_node* %97 to %struct.tree_ssa_name*, !dbg !4683
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name151, i32 0, i32 1, !dbg !4683
  %98 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4683
  %base152 = bitcast %union.tree_node* %98 to %struct.tree_base*, !dbg !4683
  %99 = bitcast %struct.tree_base* %base152 to i64*, !dbg !4683
  %bf.load153 = load i64, i64* %99, align 8, !dbg !4683
  %bf.clear154 = and i64 %bf.load153, 65535, !dbg !4683
  %bf.cast155 = trunc i64 %bf.clear154 to i32, !dbg !4683
  %cmp156 = icmp eq i32 %bf.cast155, 32, !dbg !4683
  br i1 %cmp156, label %land.lhs.true176, label %lor.lhs.false158, !dbg !4683

lor.lhs.false158:                                 ; preds = %land.lhs.true150
  %100 = load %union.tree_node*, %union.tree_node** %base_address, align 8, !dbg !4683
  %ssa_name159 = bitcast %union.tree_node* %100 to %struct.tree_ssa_name*, !dbg !4683
  %var160 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name159, i32 0, i32 1, !dbg !4683
  %101 = load %union.tree_node*, %union.tree_node** %var160, align 8, !dbg !4683
  %base161 = bitcast %union.tree_node* %101 to %struct.tree_base*, !dbg !4683
  %102 = bitcast %struct.tree_base* %base161 to i64*, !dbg !4683
  %bf.load162 = load i64, i64* %102, align 8, !dbg !4683
  %bf.clear163 = and i64 %bf.load162, 65535, !dbg !4683
  %bf.cast164 = trunc i64 %bf.clear163 to i32, !dbg !4683
  %cmp165 = icmp eq i32 %bf.cast164, 34, !dbg !4683
  br i1 %cmp165, label %land.lhs.true176, label %lor.lhs.false167, !dbg !4683

lor.lhs.false167:                                 ; preds = %lor.lhs.false158
  %103 = load %union.tree_node*, %union.tree_node** %base_address, align 8, !dbg !4683
  %ssa_name168 = bitcast %union.tree_node* %103 to %struct.tree_ssa_name*, !dbg !4683
  %var169 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name168, i32 0, i32 1, !dbg !4683
  %104 = load %union.tree_node*, %union.tree_node** %var169, align 8, !dbg !4683
  %base170 = bitcast %union.tree_node* %104 to %struct.tree_base*, !dbg !4683
  %105 = bitcast %struct.tree_base* %base170 to i64*, !dbg !4683
  %bf.load171 = load i64, i64* %105, align 8, !dbg !4683
  %bf.clear172 = and i64 %bf.load171, 65535, !dbg !4683
  %bf.cast173 = trunc i64 %bf.clear172 to i32, !dbg !4683
  %cmp174 = icmp eq i32 %bf.cast173, 36, !dbg !4683
  br i1 %cmp174, label %land.lhs.true176, label %if.end183, !dbg !4684

land.lhs.true176:                                 ; preds = %lor.lhs.false167, %lor.lhs.false158, %land.lhs.true150, %lor.lhs.false136, %lor.lhs.false, %land.lhs.true123
  %106 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt100, align 8, !dbg !4685
  %call177 = call %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %106), !dbg !4686
  %tobool178 = icmp ne %union.tree_node* %call177, null, !dbg !4686
  br i1 %tobool178, label %if.end183, label %land.lhs.true179, !dbg !4687

land.lhs.true179:                                 ; preds = %land.lhs.true176
  %107 = load i32, i32* @optimize, align 4, !dbg !4688
  %cmp180 = icmp sgt i32 %107, 0, !dbg !4689
  br i1 %cmp180, label %if.then182, label %if.end183, !dbg !4690

if.then182:                                       ; preds = %land.lhs.true179
  call void (i8*, ...) @error(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.4, i64 0, i64 0)), !dbg !4691
  %108 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !4693
  %109 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt100, align 8, !dbg !4694
  call void @print_gimple_stmt(%struct._IO_FILE* %108, %union.gimple_statement_d* %109, i32 0, i32 64), !dbg !4695
  br label %err, !dbg !4696

if.end183:                                        ; preds = %land.lhs.true179, %land.lhs.true176, %lor.lhs.false167, %lor.lhs.false143, %if.then119
  br label %if.end192, !dbg !4697

if.else:                                          ; preds = %land.lhs.true112, %if.end108
  %110 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt100, align 8, !dbg !4698
  %call184 = call zeroext i8 @gimple_debug_bind_p(%union.gimple_statement_d* %110), !dbg !4700
  %conv185 = zext i8 %call184 to i32, !dbg !4700
  %tobool186 = icmp ne i32 %conv185, 0, !dbg !4700
  br i1 %tobool186, label %land.lhs.true187, label %if.end191, !dbg !4701

land.lhs.true187:                                 ; preds = %if.else
  %111 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt100, align 8, !dbg !4702
  %call188 = call zeroext i8 @gimple_debug_bind_has_value_p(%union.gimple_statement_d* %111), !dbg !4703
  %tobool189 = icmp ne i8 %call188, 0, !dbg !4703
  br i1 %tobool189, label %if.end191, label %if.then190, !dbg !4704

if.then190:                                       ; preds = %land.lhs.true187
  br label %for.inc294, !dbg !4705

if.end191:                                        ; preds = %land.lhs.true187, %if.else
  br label %if.end192

if.end192:                                        ; preds = %if.end191, %if.end183
  store i8 0, i8* %has_err, align 1, !dbg !4706
  %112 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt100, align 8, !dbg !4707
  %call193 = call %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %112), !dbg !4709
  %tobool194 = icmp ne %union.tree_node* %call193, null, !dbg !4709
  br i1 %tobool194, label %if.then195, label %if.end221, !dbg !4710

if.then195:                                       ; preds = %if.end192
  %113 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt100, align 8, !dbg !4711
  %call196 = call %union.tree_node** @gimple_vdef_op(%union.gimple_statement_d* %113), !dbg !4714
  %cmp197 = icmp eq %union.tree_node** %call196, null, !dbg !4715
  br i1 %cmp197, label %if.then199, label %if.end200, !dbg !4716

if.then199:                                       ; preds = %if.then195
  call void (i8*, ...) @error(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.5, i64 0, i64 0)), !dbg !4717
  store i8 1, i8* %has_err, align 1, !dbg !4719
  br label %if.end200, !dbg !4720

if.end200:                                        ; preds = %if.then199, %if.then195
  %114 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt100, align 8, !dbg !4721
  %call201 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %114), !dbg !4723
  %tobool202 = icmp ne %union.tree_node* %call201, null, !dbg !4723
  br i1 %tobool202, label %if.else204, label %if.then203, !dbg !4724

if.then203:                                       ; preds = %if.end200
  call void (i8*, ...) @error(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.6, i64 0, i64 0)), !dbg !4725
  store i8 1, i8* %has_err, align 1, !dbg !4727
  br label %if.end215, !dbg !4728

if.else204:                                       ; preds = %if.end200
  %115 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt100, align 8, !dbg !4729
  %call205 = call %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %115), !dbg !4729
  %ssa_name206 = bitcast %union.tree_node* %call205 to %struct.tree_ssa_name*, !dbg !4729
  %var207 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name206, i32 0, i32 1, !dbg !4729
  %116 = load %union.tree_node*, %union.tree_node** %var207, align 8, !dbg !4729
  %117 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt100, align 8, !dbg !4731
  %call208 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %117), !dbg !4731
  %ssa_name209 = bitcast %union.tree_node* %call208 to %struct.tree_ssa_name*, !dbg !4731
  %var210 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name209, i32 0, i32 1, !dbg !4731
  %118 = load %union.tree_node*, %union.tree_node** %var210, align 8, !dbg !4731
  %cmp211 = icmp ne %union.tree_node* %116, %118, !dbg !4732
  br i1 %cmp211, label %if.then213, label %if.end214, !dbg !4733

if.then213:                                       ; preds = %if.else204
  call void (i8*, ...) @error(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.7, i64 0, i64 0)), !dbg !4734
  store i8 1, i8* %has_err, align 1, !dbg !4736
  br label %if.end214, !dbg !4737

if.end214:                                        ; preds = %if.then213, %if.else204
  br label %if.end215

if.end215:                                        ; preds = %if.end214, %if.then203
  %119 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt100, align 8, !dbg !4738
  %call216 = call %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %119), !dbg !4739
  %call217 = call zeroext i8 @verify_ssa_name(%union.tree_node* %call216, i8 zeroext 1), !dbg !4740
  %conv218 = zext i8 %call217 to i32, !dbg !4740
  %120 = load i8, i8* %has_err, align 1, !dbg !4741
  %conv219 = zext i8 %120 to i32, !dbg !4741
  %or = or i32 %conv219, %conv218, !dbg !4741
  %conv220 = trunc i32 %or to i8, !dbg !4741
  store i8 %conv220, i8* %has_err, align 1, !dbg !4741
  br label %if.end221, !dbg !4742

if.end221:                                        ; preds = %if.end215, %if.end192
  %121 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt100, align 8, !dbg !4743
  %call222 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %121), !dbg !4745
  %tobool223 = icmp ne %union.tree_node* %call222, null, !dbg !4745
  br i1 %tobool223, label %if.then224, label %if.end236, !dbg !4746

if.then224:                                       ; preds = %if.end221
  %122 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt100, align 8, !dbg !4747
  %call225 = call %struct.ssa_use_operand_d* @gimple_vuse_op(%union.gimple_statement_d* %122), !dbg !4750
  %cmp226 = icmp eq %struct.ssa_use_operand_d* %call225, null, !dbg !4751
  br i1 %cmp226, label %if.then228, label %if.end229, !dbg !4752

if.then228:                                       ; preds = %if.then224
  call void (i8*, ...) @error(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.8, i64 0, i64 0)), !dbg !4753
  store i8 1, i8* %has_err, align 1, !dbg !4755
  br label %if.end229, !dbg !4756

if.end229:                                        ; preds = %if.then228, %if.then224
  %123 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt100, align 8, !dbg !4757
  %call230 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %123), !dbg !4758
  %call231 = call zeroext i8 @verify_ssa_name(%union.tree_node* %call230, i8 zeroext 1), !dbg !4759
  %conv232 = zext i8 %call231 to i32, !dbg !4759
  %124 = load i8, i8* %has_err, align 1, !dbg !4760
  %conv233 = zext i8 %124 to i32, !dbg !4760
  %or234 = or i32 %conv233, %conv232, !dbg !4760
  %conv235 = trunc i32 %or234 to i8, !dbg !4760
  store i8 %conv235, i8* %has_err, align 1, !dbg !4760
  br label %if.end236, !dbg !4761

if.end236:                                        ; preds = %if.end229, %if.end221
  %125 = load i8, i8* %has_err, align 1, !dbg !4762
  %tobool237 = icmp ne i8 %125, 0, !dbg !4762
  br i1 %tobool237, label %if.then238, label %if.end239, !dbg !4764

if.then238:                                       ; preds = %if.end236
  call void (i8*, ...) @error(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.9, i64 0, i64 0)), !dbg !4765
  %126 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !4767
  %127 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt100, align 8, !dbg !4768
  call void @print_gimple_stmt(%struct._IO_FILE* %126, %union.gimple_statement_d* %127, i32 0, i32 16448), !dbg !4769
  br label %err, !dbg !4770

if.end239:                                        ; preds = %if.end236
  %128 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt100, align 8, !dbg !4771
  %call240 = call %union.tree_node* @op_iter_init_tree(%struct.ssa_operand_iterator_d* %iter, %union.gimple_statement_d* %128, i32 3), !dbg !4771
  store %union.tree_node* %call240, %union.tree_node** %op, align 8, !dbg !4771
  br label %for.cond241, !dbg !4771

for.cond241:                                      ; preds = %for.inc251, %if.end239
  %call242 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %iter), !dbg !4773
  %tobool243 = icmp ne i8 %call242, 0, !dbg !4773
  %lnot244 = xor i1 %tobool243, true, !dbg !4773
  br i1 %lnot244, label %for.body246, label %for.end253, !dbg !4771

for.body246:                                      ; preds = %for.cond241
  %129 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !4775
  %call247 = call zeroext i8 @verify_ssa_name(%union.tree_node* %129, i8 zeroext 0), !dbg !4778
  %tobool248 = icmp ne i8 %call247, 0, !dbg !4778
  br i1 %tobool248, label %if.then249, label %if.end250, !dbg !4779

if.then249:                                       ; preds = %for.body246
  call void (i8*, ...) @error(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.9, i64 0, i64 0)), !dbg !4780
  %130 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !4782
  %131 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt100, align 8, !dbg !4783
  call void @print_gimple_stmt(%struct._IO_FILE* %130, %union.gimple_statement_d* %131, i32 0, i32 16448), !dbg !4784
  br label %err, !dbg !4785

if.end250:                                        ; preds = %for.body246
  br label %for.inc251, !dbg !4786

for.inc251:                                       ; preds = %if.end250
  %call252 = call %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %iter), !dbg !4773
  store %union.tree_node* %call252, %union.tree_node** %op, align 8, !dbg !4773
  br label %for.cond241, !dbg !4773, !llvm.loop !4787

for.end253:                                       ; preds = %for.cond241
  %132 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt100, align 8, !dbg !4789
  %call254 = call %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %iter, %union.gimple_statement_d* %132, i32 5), !dbg !4789
  store %struct.ssa_use_operand_d* %call254, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !4789
  br label %for.cond255, !dbg !4789

for.cond255:                                      ; preds = %for.inc268, %for.end253
  %call256 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %iter), !dbg !4791
  %tobool257 = icmp ne i8 %call256, 0, !dbg !4791
  %lnot258 = xor i1 %tobool257, true, !dbg !4791
  br i1 %lnot258, label %for.body260, label %for.end270, !dbg !4789

for.body260:                                      ; preds = %for.cond255
  %133 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !4793
  %call261 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %133), !dbg !4793
  store %union.tree_node* %call261, %union.tree_node** %op, align 8, !dbg !4795
  %134 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4796
  %135 = load %struct.basic_block_def**, %struct.basic_block_def*** %definition_block, align 8, !dbg !4798
  %136 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !4799
  %ssa_name262 = bitcast %union.tree_node* %136 to %struct.tree_ssa_name*, !dbg !4799
  %version263 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name262, i32 0, i32 3, !dbg !4799
  %137 = load i32, i32* %version263, align 8, !dbg !4799
  %idxprom = zext i32 %137 to i64, !dbg !4798
  %arrayidx = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %135, i64 %idxprom, !dbg !4798
  %138 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !4798
  %139 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !4800
  %140 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt100, align 8, !dbg !4801
  %141 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %names_defined_in_bb, align 8, !dbg !4802
  %call264 = call zeroext i8 @verify_use(%struct.basic_block_def* %134, %struct.basic_block_def* %138, %struct.ssa_use_operand_d* %139, %union.gimple_statement_d* %140, i8 zeroext 0, %struct.bitmap_head_def* %141), !dbg !4803
  %tobool265 = icmp ne i8 %call264, 0, !dbg !4803
  br i1 %tobool265, label %if.then266, label %if.end267, !dbg !4804

if.then266:                                       ; preds = %for.body260
  br label %err, !dbg !4805

if.end267:                                        ; preds = %for.body260
  br label %for.inc268, !dbg !4806

for.inc268:                                       ; preds = %if.end267
  %call269 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %iter), !dbg !4791
  store %struct.ssa_use_operand_d* %call269, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !4791
  br label %for.cond255, !dbg !4791, !llvm.loop !4807

for.end270:                                       ; preds = %for.cond255
  %142 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt100, align 8, !dbg !4809
  %call271 = call %union.tree_node* @op_iter_init_tree(%struct.ssa_operand_iterator_d* %iter, %union.gimple_statement_d* %142, i32 10), !dbg !4809
  store %union.tree_node* %call271, %union.tree_node** %op, align 8, !dbg !4809
  br label %for.cond272, !dbg !4809

for.cond272:                                      ; preds = %for.inc291, %for.end270
  %call273 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %iter), !dbg !4811
  %tobool274 = icmp ne i8 %call273, 0, !dbg !4811
  %lnot275 = xor i1 %tobool274, true, !dbg !4811
  br i1 %lnot275, label %for.body277, label %for.end293, !dbg !4809

for.body277:                                      ; preds = %for.cond272
  %143 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !4813
  %ssa_name278 = bitcast %union.tree_node* %143 to %struct.tree_ssa_name*, !dbg !4813
  %def_stmt279 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name278, i32 0, i32 2, !dbg !4813
  %144 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt279, align 8, !dbg !4813
  %145 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt100, align 8, !dbg !4816
  %cmp280 = icmp ne %union.gimple_statement_d* %144, %145, !dbg !4817
  br i1 %cmp280, label %if.then282, label %if.end287, !dbg !4818

if.then282:                                       ; preds = %for.body277
  call void (i8*, ...) @error(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.10, i64 0, i64 0)), !dbg !4819
  %146 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !4821
  %call283 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %146, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.11, i64 0, i64 0)), !dbg !4822
  %147 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !4823
  %148 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt100, align 8, !dbg !4824
  call void @print_gimple_stmt(%struct._IO_FILE* %147, %union.gimple_statement_d* %148, i32 4, i32 64), !dbg !4825
  %149 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !4826
  %call284 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %149, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.12, i64 0, i64 0)), !dbg !4827
  %150 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !4828
  %151 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !4829
  %ssa_name285 = bitcast %union.tree_node* %151 to %struct.tree_ssa_name*, !dbg !4829
  %def_stmt286 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name285, i32 0, i32 2, !dbg !4829
  %152 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt286, align 8, !dbg !4829
  call void @print_gimple_stmt(%struct._IO_FILE* %150, %union.gimple_statement_d* %152, i32 4, i32 64), !dbg !4830
  br label %err, !dbg !4831

if.end287:                                        ; preds = %for.body277
  %153 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %names_defined_in_bb, align 8, !dbg !4832
  %154 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !4833
  %ssa_name288 = bitcast %union.tree_node* %154 to %struct.tree_ssa_name*, !dbg !4833
  %version289 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name288, i32 0, i32 3, !dbg !4833
  %155 = load i32, i32* %version289, align 8, !dbg !4833
  %call290 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %153, i32 %155), !dbg !4834
  br label %for.inc291, !dbg !4835

for.inc291:                                       ; preds = %if.end287
  %call292 = call %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %iter), !dbg !4811
  store %union.tree_node* %call292, %union.tree_node** %op, align 8, !dbg !4811
  br label %for.cond272, !dbg !4811, !llvm.loop !4836

for.end293:                                       ; preds = %for.cond272
  br label %for.inc294, !dbg !4838

for.inc294:                                       ; preds = %for.end293, %if.then190
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !4839
  br label %for.cond94, !dbg !4840, !llvm.loop !4841

for.end295:                                       ; preds = %for.cond94
  %156 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %names_defined_in_bb, align 8, !dbg !4843
  call void @bitmap_clear(%struct.bitmap_head_def* %156), !dbg !4844
  br label %for.inc296, !dbg !4845

for.inc296:                                       ; preds = %for.end295
  %157 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4568
  %next_bb297 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %157, i32 0, i32 6, !dbg !4568
  %158 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb297, align 8, !dbg !4568
  store %struct.basic_block_def* %158, %struct.basic_block_def** %bb, align 8, !dbg !4568
  br label %for.cond59, !dbg !4568, !llvm.loop !4846

for.end298:                                       ; preds = %for.cond59
  %159 = load %struct.basic_block_def**, %struct.basic_block_def*** %definition_block, align 8, !dbg !4848
  %160 = bitcast %struct.basic_block_def** %159 to i8*, !dbg !4848
  call void @free(i8* %160), !dbg !4849
  %161 = load i32, i32* %orig_dom_state, align 4, !dbg !4850
  %cmp299 = icmp eq i32 %161, 0, !dbg !4852
  br i1 %cmp299, label %if.then301, label %if.else302, !dbg !4853

if.then301:                                       ; preds = %for.end298
  call void @free_dominance_info(i32 1), !dbg !4854
  br label %if.end303, !dbg !4854

if.else302:                                       ; preds = %for.end298
  %162 = load i32, i32* %orig_dom_state, align 4, !dbg !4855
  call void @set_dom_info_availability(i32 1, i32 %162), !dbg !4856
  br label %if.end303

if.end303:                                        ; preds = %if.else302, %if.then301
  %163 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %names_defined_in_bb, align 8, !dbg !4857
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %163), !dbg !4857
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %names_defined_in_bb, align 8, !dbg !4857
  br label %do.body304, !dbg !4858

do.body304:                                       ; preds = %if.end303
  %164 = load i8, i8* @timevar_enable, align 1, !dbg !4859
  %tobool305 = icmp ne i8 %164, 0, !dbg !4859
  br i1 %tobool305, label %if.then306, label %if.end307, !dbg !4862

if.then306:                                       ; preds = %do.body304
  call void @timevar_pop_1(i32 107), !dbg !4859
  br label %if.end307, !dbg !4859

if.end307:                                        ; preds = %if.then306, %do.body304
  br label %do.end308, !dbg !4862

do.end308:                                        ; preds = %if.end307
  br label %return, !dbg !4863

err:                                              ; preds = %if.then282, %if.then266, %if.then249, %if.then238, %if.then182, %if.then107, %if.then86, %if.then71
  call void @llvm.dbg.label(metadata !4864), !dbg !4865
  call void (i8*, ...) @internal_error(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.13, i64 0, i64 0)), !dbg !4866
  br label %return, !dbg !4867

return:                                           ; preds = %err, %do.end308
  ret void, !dbg !4867
}

declare dso_local i8* @xcalloc(i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_length(%struct.VEC_tree_base* %vec_) #0 !dbg !4868 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !4871, metadata !DIExpression()), !dbg !4872
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !4872
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !4872
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4872

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !4872
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %1, i32 0, i32 0, !dbg !4872
  %2 = load i32, i32* %num, align 8, !dbg !4872
  br label %cond.end, !dbg !4872

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4872

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !4872
  ret i32 %cond, !dbg !4872
}

declare dso_local i32 @dom_info_state(i32) #2

declare dso_local %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack*) #2

declare dso_local zeroext i8 @need_ssa_update_p(%struct.function*) #2

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

declare dso_local void @verify_stmts() #2

declare dso_local void @timevar_push_1(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_nop_p(%union.gimple_statement_d* %g) #0 !dbg !4873 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !4874, metadata !DIExpression()), !dbg !4875
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !4876
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !4877
  %cmp = icmp eq i32 %call, 18, !dbg !4878
  %conv = zext i1 %cmp to i32, !dbg !4878
  %conv1 = trunc i32 %conv to i8, !dbg !4877
  ret i8 %conv1, !dbg !4879
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @verify_def(%struct.basic_block_def* %bb, %struct.basic_block_def** %definition_block, %union.tree_node* %ssa_name, %union.gimple_statement_d* %stmt, i8 zeroext %is_virtual) #0 !dbg !4880 {
entry:
  %retval = alloca i8, align 1
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %definition_block.addr = alloca %struct.basic_block_def**, align 8
  %ssa_name.addr = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %is_virtual.addr = alloca i8, align 1
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !4883, metadata !DIExpression()), !dbg !4884
  store %struct.basic_block_def** %definition_block, %struct.basic_block_def*** %definition_block.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %definition_block.addr, metadata !4885, metadata !DIExpression()), !dbg !4886
  store %union.tree_node* %ssa_name, %union.tree_node** %ssa_name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %ssa_name.addr, metadata !4887, metadata !DIExpression()), !dbg !4888
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !4889, metadata !DIExpression()), !dbg !4890
  store i8 %is_virtual, i8* %is_virtual.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %is_virtual.addr, metadata !4891, metadata !DIExpression()), !dbg !4892
  %0 = load %union.tree_node*, %union.tree_node** %ssa_name.addr, align 8, !dbg !4893
  %1 = load i8, i8* %is_virtual.addr, align 1, !dbg !4895
  %call = call zeroext i8 @verify_ssa_name(%union.tree_node* %0, i8 zeroext %1), !dbg !4896
  %tobool = icmp ne i8 %call, 0, !dbg !4896
  br i1 %tobool, label %if.then, label %if.end, !dbg !4897

if.then:                                          ; preds = %entry
  br label %err, !dbg !4898

if.end:                                           ; preds = %entry
  %2 = load %struct.basic_block_def**, %struct.basic_block_def*** %definition_block.addr, align 8, !dbg !4899
  %3 = load %union.tree_node*, %union.tree_node** %ssa_name.addr, align 8, !dbg !4901
  %ssa_name1 = bitcast %union.tree_node* %3 to %struct.tree_ssa_name*, !dbg !4901
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name1, i32 0, i32 3, !dbg !4901
  %4 = load i32, i32* %version, align 8, !dbg !4901
  %idxprom = zext i32 %4 to i64, !dbg !4899
  %arrayidx = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %2, i64 %idxprom, !dbg !4899
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !4899
  %tobool2 = icmp ne %struct.basic_block_def* %5, null, !dbg !4899
  br i1 %tobool2, label %if.then3, label %if.end9, !dbg !4902

if.then3:                                         ; preds = %if.end
  %6 = load %struct.basic_block_def**, %struct.basic_block_def*** %definition_block.addr, align 8, !dbg !4903
  %7 = load %union.tree_node*, %union.tree_node** %ssa_name.addr, align 8, !dbg !4905
  %ssa_name4 = bitcast %union.tree_node* %7 to %struct.tree_ssa_name*, !dbg !4905
  %version5 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name4, i32 0, i32 3, !dbg !4905
  %8 = load i32, i32* %version5, align 8, !dbg !4905
  %idxprom6 = zext i32 %8 to i64, !dbg !4903
  %arrayidx7 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %6, i64 %idxprom6, !dbg !4903
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx7, align 8, !dbg !4903
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %9, i32 0, i32 9, !dbg !4906
  %10 = load i32, i32* %index, align 8, !dbg !4906
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4907
  %index8 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %11, i32 0, i32 9, !dbg !4908
  %12 = load i32, i32* %index8, align 8, !dbg !4908
  call void (i8*, ...) @error(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.22, i64 0, i64 0), i32 %10, i32 %12), !dbg !4909
  br label %err, !dbg !4910

if.end9:                                          ; preds = %if.end
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4911
  %14 = load %struct.basic_block_def**, %struct.basic_block_def*** %definition_block.addr, align 8, !dbg !4912
  %15 = load %union.tree_node*, %union.tree_node** %ssa_name.addr, align 8, !dbg !4913
  %ssa_name10 = bitcast %union.tree_node* %15 to %struct.tree_ssa_name*, !dbg !4913
  %version11 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name10, i32 0, i32 3, !dbg !4913
  %16 = load i32, i32* %version11, align 8, !dbg !4913
  %idxprom12 = zext i32 %16 to i64, !dbg !4912
  %arrayidx13 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %14, i64 %idxprom12, !dbg !4912
  store %struct.basic_block_def* %13, %struct.basic_block_def** %arrayidx13, align 8, !dbg !4914
  %17 = load %union.tree_node*, %union.tree_node** %ssa_name.addr, align 8, !dbg !4915
  %ssa_name14 = bitcast %union.tree_node* %17 to %struct.tree_ssa_name*, !dbg !4915
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name14, i32 0, i32 2, !dbg !4915
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !4915
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4917
  %cmp = icmp ne %union.gimple_statement_d* %18, %19, !dbg !4918
  br i1 %cmp, label %if.then15, label %if.end20, !dbg !4919

if.then15:                                        ; preds = %if.end9
  call void (i8*, ...) @error(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.10, i64 0, i64 0)), !dbg !4920
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !4922
  %call16 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %20, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.11, i64 0, i64 0)), !dbg !4923
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !4924
  %22 = load %union.tree_node*, %union.tree_node** %ssa_name.addr, align 8, !dbg !4925
  %ssa_name17 = bitcast %union.tree_node* %22 to %struct.tree_ssa_name*, !dbg !4925
  %def_stmt18 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name17, i32 0, i32 2, !dbg !4925
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt18, align 8, !dbg !4925
  call void @print_gimple_stmt(%struct._IO_FILE* %21, %union.gimple_statement_d* %23, i32 4, i32 64), !dbg !4926
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !4927
  %call19 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %24, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.12, i64 0, i64 0)), !dbg !4928
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !4929
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4930
  call void @print_gimple_stmt(%struct._IO_FILE* %25, %union.gimple_statement_d* %26, i32 4, i32 64), !dbg !4931
  br label %err, !dbg !4932

if.end20:                                         ; preds = %if.end9
  store i8 0, i8* %retval, align 1, !dbg !4933
  br label %return, !dbg !4933

err:                                              ; preds = %if.then15, %if.then3, %if.then
  call void @llvm.dbg.label(metadata !4934), !dbg !4935
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !4936
  %call21 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %27, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.23, i64 0, i64 0)), !dbg !4937
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !4938
  %29 = load %union.tree_node*, %union.tree_node** %ssa_name.addr, align 8, !dbg !4939
  call void @print_generic_expr(%struct._IO_FILE* %28, %union.tree_node* %29, i32 0), !dbg !4940
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !4941
  %call22 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %30, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.24, i64 0, i64 0)), !dbg !4942
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !4943
  %32 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4944
  call void @print_gimple_stmt(%struct._IO_FILE* %31, %union.gimple_statement_d* %32, i32 4, i32 64), !dbg !4945
  store i8 1, i8* %retval, align 1, !dbg !4946
  br label %return, !dbg !4946

return:                                           ; preds = %err, %if.end20
  %33 = load i8, i8* %retval, align 1, !dbg !4947
  ret i8 %33, !dbg !4947
}

declare dso_local void @calculate_dominance_info(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %ev) #0 !dbg !4948 {
entry:
  %retval = alloca %struct.edge_iterator, align 8
  %ev.addr = alloca %struct.VEC_edge_gc**, align 8
  store %struct.VEC_edge_gc** %ev, %struct.VEC_edge_gc*** %ev.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_gc*** %ev.addr, metadata !4951, metadata !DIExpression()), !dbg !4952
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %retval, metadata !4953, metadata !DIExpression()), !dbg !4954
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 0, !dbg !4955
  store i32 0, i32* %index, align 8, !dbg !4956
  %0 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %ev.addr, align 8, !dbg !4957
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 1, !dbg !4958
  store %struct.VEC_edge_gc** %0, %struct.VEC_edge_gc*** %container, align 8, !dbg !4959
  %1 = bitcast %struct.edge_iterator* %retval to { i32, %struct.VEC_edge_gc** }*, !dbg !4960
  %2 = load { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, align 8, !dbg !4960
  ret { i32, %struct.VEC_edge_gc** } %2, !dbg !4960
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_cond(i32 %ei.coerce0, %struct.VEC_edge_gc** %ei.coerce1, %struct.edge_def** %p) #0 !dbg !4961 {
entry:
  %retval = alloca i8, align 1
  %ei = alloca %struct.edge_iterator, align 8
  %p.addr = alloca %struct.edge_def**, align 8
  %0 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %ei.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %ei.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !4965, metadata !DIExpression()), !dbg !4966
  store %struct.edge_def** %p, %struct.edge_def*** %p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %p.addr, metadata !4967, metadata !DIExpression()), !dbg !4968
  %3 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !4969
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !4969
  %5 = load i32, i32* %4, align 8, !dbg !4969
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !4969
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !4969
  %call = call zeroext i8 @ei_end_p(i32 %5, %struct.VEC_edge_gc** %7), !dbg !4969
  %tobool = icmp ne i8 %call, 0, !dbg !4969
  br i1 %tobool, label %if.else, label %if.then, !dbg !4971

if.then:                                          ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !4972
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !4972
  %10 = load i32, i32* %9, align 8, !dbg !4972
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !4972
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !4972
  %call1 = call %struct.edge_def* @ei_edge(i32 %10, %struct.VEC_edge_gc** %12), !dbg !4972
  %13 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !4974
  store %struct.edge_def* %call1, %struct.edge_def** %13, align 8, !dbg !4975
  store i8 1, i8* %retval, align 1, !dbg !4976
  br label %return, !dbg !4976

if.else:                                          ; preds = %entry
  %14 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !4977
  store %struct.edge_def* null, %struct.edge_def** %14, align 8, !dbg !4979
  store i8 0, i8* %retval, align 1, !dbg !4980
  br label %return, !dbg !4980

return:                                           ; preds = %if.else, %if.then
  %15 = load i8, i8* %retval, align 1, !dbg !4981
  ret i8 %15, !dbg !4981
}

declare dso_local void @error(i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define internal void @ei_next(%struct.edge_iterator* %i) #0 !dbg !4982 {
entry:
  %i.addr = alloca %struct.edge_iterator*, align 8
  store %struct.edge_iterator* %i, %struct.edge_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator** %i.addr, metadata !4986, metadata !DIExpression()), !dbg !4987
  %0 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !4988
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %0, i32 0, i32 0, !dbg !4988
  %1 = load i32, i32* %index, align 8, !dbg !4988
  %2 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !4988
  %3 = bitcast %struct.edge_iterator* %2 to { i32, %struct.VEC_edge_gc** }*, !dbg !4988
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !4988
  %5 = load i32, i32* %4, align 8, !dbg !4988
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !4988
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !4988
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !4988
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !4988
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4988

cond.true:                                        ; preds = %entry
  %8 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !4988
  %9 = bitcast %struct.edge_iterator* %8 to { i32, %struct.VEC_edge_gc** }*, !dbg !4988
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !4988
  %11 = load i32, i32* %10, align 8, !dbg !4988
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !4988
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !4988
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !4988
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !4988
  br label %cond.end, !dbg !4988

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4988

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4988
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !4988
  %cmp = icmp ult i32 %1, %call2, !dbg !4988
  br i1 %cmp, label %cond.false4, label %cond.true3, !dbg !4988

cond.true3:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.25, i64 0, i64 0), i32 738, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4988
  br label %cond.end5, !dbg !4988

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !4988

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !4988
  %14 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !4989
  %index7 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %14, i32 0, i32 0, !dbg !4990
  %15 = load i32, i32* %index7, align 8, !dbg !4991
  %inc = add i32 %15, 1, !dbg !4991
  store i32 %inc, i32* %index7, align 8, !dbg !4991
  ret void, !dbg !4992
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @verify_phi_args(%union.gimple_statement_d* %phi, %struct.basic_block_def* %bb, %struct.basic_block_def** %definition_block) #0 !dbg !4993 {
entry:
  %phi.addr = alloca %union.gimple_statement_d*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %definition_block.addr = alloca %struct.basic_block_def**, align 8
  %e = alloca %struct.edge_def*, align 8
  %err = alloca i8, align 1
  %i = alloca i64, align 8
  %phi_num_args = alloca i64, align 8
  %op_p = alloca %struct.ssa_use_operand_d*, align 8
  %op = alloca %union.tree_node*, align 8
  %base58 = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %phi, %union.gimple_statement_d** %phi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi.addr, metadata !4996, metadata !DIExpression()), !dbg !4997
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !4998, metadata !DIExpression()), !dbg !4999
  store %struct.basic_block_def** %definition_block, %struct.basic_block_def*** %definition_block.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %definition_block.addr, metadata !5000, metadata !DIExpression()), !dbg !5001
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !5002, metadata !DIExpression()), !dbg !5003
  call void @llvm.dbg.declare(metadata i8* %err, metadata !5004, metadata !DIExpression()), !dbg !5005
  store i8 0, i8* %err, align 1, !dbg !5005
  call void @llvm.dbg.declare(metadata i64* %i, metadata !5006, metadata !DIExpression()), !dbg !5007
  call void @llvm.dbg.declare(metadata i64* %phi_num_args, metadata !5008, metadata !DIExpression()), !dbg !5009
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !5010
  %call = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %0), !dbg !5011
  %conv = zext i32 %call to i64, !dbg !5011
  store i64 %conv, i64* %phi_num_args, align 8, !dbg !5009
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5012
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 0, !dbg !5012
  %2 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !5012
  %tobool = icmp ne %struct.VEC_edge_gc* %2, null, !dbg !5012
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5012

cond.true:                                        ; preds = %entry
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5012
  %preds1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 0, !dbg !5012
  %4 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds1, align 8, !dbg !5012
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %4, i32 0, i32 0, !dbg !5012
  br label %cond.end, !dbg !5012

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5012

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5012
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !5012
  %conv3 = zext i32 %call2 to i64, !dbg !5012
  %5 = load i64, i64* %phi_num_args, align 8, !dbg !5014
  %cmp = icmp ne i64 %conv3, %5, !dbg !5015
  br i1 %cmp, label %if.then, label %if.end, !dbg !5016

if.then:                                          ; preds = %cond.end
  call void (i8*, ...) @error(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.26, i64 0, i64 0)), !dbg !5017
  store i8 1, i8* %err, align 1, !dbg !5019
  br label %error, !dbg !5020

if.end:                                           ; preds = %cond.end
  store i64 0, i64* %i, align 8, !dbg !5021
  br label %for.cond, !dbg !5023

for.cond:                                         ; preds = %for.inc, %if.end
  %6 = load i64, i64* %i, align 8, !dbg !5024
  %7 = load i64, i64* %phi_num_args, align 8, !dbg !5026
  %cmp5 = icmp ult i64 %6, %7, !dbg !5027
  br i1 %cmp5, label %for.body, label %for.end, !dbg !5028

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %op_p, metadata !5029, metadata !DIExpression()), !dbg !5031
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !5032
  %9 = load i64, i64* %i, align 8, !dbg !5033
  %conv7 = trunc i64 %9 to i32, !dbg !5033
  %call8 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %8, i32 %conv7), !dbg !5034
  store %struct.ssa_use_operand_d* %call8, %struct.ssa_use_operand_d** %op_p, align 8, !dbg !5031
  call void @llvm.dbg.declare(metadata %union.tree_node** %op, metadata !5035, metadata !DIExpression()), !dbg !5036
  %10 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %op_p, align 8, !dbg !5037
  %call9 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %10), !dbg !5037
  store %union.tree_node* %call9, %union.tree_node** %op, align 8, !dbg !5036
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5038
  %preds10 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %11, i32 0, i32 0, !dbg !5038
  %12 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds10, align 8, !dbg !5038
  %tobool11 = icmp ne %struct.VEC_edge_gc* %12, null, !dbg !5038
  br i1 %tobool11, label %cond.true12, label %cond.false15, !dbg !5038

cond.true12:                                      ; preds = %for.body
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5038
  %preds13 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 0, !dbg !5038
  %14 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds13, align 8, !dbg !5038
  %base14 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %14, i32 0, i32 0, !dbg !5038
  br label %cond.end16, !dbg !5038

cond.false15:                                     ; preds = %for.body
  br label %cond.end16, !dbg !5038

cond.end16:                                       ; preds = %cond.false15, %cond.true12
  %cond17 = phi %struct.VEC_edge_base* [ %base14, %cond.true12 ], [ null, %cond.false15 ], !dbg !5038
  %15 = load i64, i64* %i, align 8, !dbg !5038
  %conv18 = trunc i64 %15 to i32, !dbg !5038
  %call19 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond17, i32 %conv18), !dbg !5038
  store %struct.edge_def* %call19, %struct.edge_def** %e, align 8, !dbg !5039
  %16 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !5040
  %cmp20 = icmp eq %union.tree_node* %16, null, !dbg !5042
  br i1 %cmp20, label %if.then22, label %if.end24, !dbg !5043

if.then22:                                        ; preds = %cond.end16
  %17 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5044
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %17, i32 0, i32 0, !dbg !5046
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !5046
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %18, i32 0, i32 9, !dbg !5047
  %19 = load i32, i32* %index, align 8, !dbg !5047
  %20 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5048
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %20, i32 0, i32 1, !dbg !5049
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !5049
  %index23 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %21, i32 0, i32 9, !dbg !5050
  %22 = load i32, i32* %index23, align 8, !dbg !5050
  call void (i8*, ...) @error(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.27, i64 0, i64 0), i32 %19, i32 %22), !dbg !5051
  store i8 1, i8* %err, align 1, !dbg !5052
  br label %error, !dbg !5053

if.end24:                                         ; preds = %cond.end16
  %23 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !5054
  %base25 = bitcast %union.tree_node* %23 to %struct.tree_base*, !dbg !5054
  %24 = bitcast %struct.tree_base* %base25 to i64*, !dbg !5054
  %bf.load = load i64, i64* %24, align 8, !dbg !5054
  %bf.clear = and i64 %bf.load, 65535, !dbg !5054
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5054
  %cmp26 = icmp ne i32 %bf.cast, 141, !dbg !5056
  br i1 %cmp26, label %land.lhs.true, label %if.end31, !dbg !5057

land.lhs.true:                                    ; preds = %if.end24
  %25 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !5058
  %call28 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %25), !dbg !5059
  %tobool29 = icmp ne i8 %call28, 0, !dbg !5059
  br i1 %tobool29, label %if.end31, label %if.then30, !dbg !5060

if.then30:                                        ; preds = %land.lhs.true
  call void (i8*, ...) @error(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.28, i64 0, i64 0)), !dbg !5061
  store i8 1, i8* %err, align 1, !dbg !5063
  br label %if.end31, !dbg !5064

if.end31:                                         ; preds = %if.then30, %land.lhs.true, %if.end24
  %26 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !5065
  %base32 = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !5065
  %27 = bitcast %struct.tree_base* %base32 to i64*, !dbg !5065
  %bf.load33 = load i64, i64* %27, align 8, !dbg !5065
  %bf.clear34 = and i64 %bf.load33, 65535, !dbg !5065
  %bf.cast35 = trunc i64 %bf.clear34 to i32, !dbg !5065
  %cmp36 = icmp eq i32 %bf.cast35, 141, !dbg !5067
  br i1 %cmp36, label %if.then38, label %if.end50, !dbg !5068

if.then38:                                        ; preds = %if.end31
  %28 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !5069
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !5071
  %call39 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %29), !dbg !5072
  %call40 = call zeroext i8 @is_gimple_reg(%union.tree_node* %call39), !dbg !5073
  %tobool41 = icmp ne i8 %call40, 0, !dbg !5074
  %lnot = xor i1 %tobool41, true, !dbg !5074
  %lnot.ext = zext i1 %lnot to i32, !dbg !5074
  %conv42 = trunc i32 %lnot.ext to i8, !dbg !5074
  %call43 = call zeroext i8 @verify_ssa_name(%union.tree_node* %28, i8 zeroext %conv42), !dbg !5075
  store i8 %call43, i8* %err, align 1, !dbg !5076
  %30 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5077
  %src44 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %30, i32 0, i32 0, !dbg !5078
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %src44, align 8, !dbg !5078
  %32 = load %struct.basic_block_def**, %struct.basic_block_def*** %definition_block.addr, align 8, !dbg !5079
  %33 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !5080
  %ssa_name = bitcast %union.tree_node* %33 to %struct.tree_ssa_name*, !dbg !5080
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !5080
  %34 = load i32, i32* %version, align 8, !dbg !5080
  %idxprom = zext i32 %34 to i64, !dbg !5079
  %arrayidx = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %32, i64 %idxprom, !dbg !5079
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !5079
  %36 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %op_p, align 8, !dbg !5081
  %37 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !5082
  %38 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5083
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %38, i32 0, i32 7, !dbg !5084
  %39 = load i32, i32* %flags, align 8, !dbg !5084
  %and = and i32 %39, 2, !dbg !5085
  %conv45 = trunc i32 %and to i8, !dbg !5083
  %call46 = call zeroext i8 @verify_use(%struct.basic_block_def* %31, %struct.basic_block_def* %35, %struct.ssa_use_operand_d* %36, %union.gimple_statement_d* %37, i8 zeroext %conv45, %struct.bitmap_head_def* null), !dbg !5086
  %conv47 = zext i8 %call46 to i32, !dbg !5086
  %40 = load i8, i8* %err, align 1, !dbg !5087
  %conv48 = zext i8 %40 to i32, !dbg !5087
  %or = or i32 %conv48, %conv47, !dbg !5087
  %conv49 = trunc i32 %or to i8, !dbg !5087
  store i8 %conv49, i8* %err, align 1, !dbg !5087
  br label %if.end50, !dbg !5088

if.end50:                                         ; preds = %if.then38, %if.end31
  %41 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !5089
  %base51 = bitcast %union.tree_node* %41 to %struct.tree_base*, !dbg !5089
  %42 = bitcast %struct.tree_base* %base51 to i64*, !dbg !5089
  %bf.load52 = load i64, i64* %42, align 8, !dbg !5089
  %bf.clear53 = and i64 %bf.load52, 65535, !dbg !5089
  %bf.cast54 = trunc i64 %bf.clear53 to i32, !dbg !5089
  %cmp55 = icmp eq i32 %bf.cast54, 121, !dbg !5091
  br i1 %cmp55, label %if.then57, label %if.end92, !dbg !5092

if.then57:                                        ; preds = %if.end50
  call void @llvm.dbg.declare(metadata %union.tree_node** %base58, metadata !5093, metadata !DIExpression()), !dbg !5095
  %43 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !5096
  %exp = bitcast %union.tree_node* %43 to %struct.tree_exp*, !dbg !5096
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !5096
  %arrayidx59 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !5096
  %44 = load %union.tree_node*, %union.tree_node** %arrayidx59, align 8, !dbg !5096
  store %union.tree_node* %44, %union.tree_node** %base58, align 8, !dbg !5095
  br label %while.cond, !dbg !5097

while.cond:                                       ; preds = %while.body, %if.then57
  %45 = load %union.tree_node*, %union.tree_node** %base58, align 8, !dbg !5098
  %call60 = call zeroext i8 @handled_component_p(%union.tree_node* %45), !dbg !5099
  %tobool61 = icmp ne i8 %call60, 0, !dbg !5097
  br i1 %tobool61, label %while.body, label %while.end, !dbg !5097

while.body:                                       ; preds = %while.cond
  %46 = load %union.tree_node*, %union.tree_node** %base58, align 8, !dbg !5100
  %exp62 = bitcast %union.tree_node* %46 to %struct.tree_exp*, !dbg !5100
  %operands63 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp62, i32 0, i32 3, !dbg !5100
  %arrayidx64 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands63, i64 0, i64 0, !dbg !5100
  %47 = load %union.tree_node*, %union.tree_node** %arrayidx64, align 8, !dbg !5100
  store %union.tree_node* %47, %union.tree_node** %base58, align 8, !dbg !5101
  br label %while.cond, !dbg !5097, !llvm.loop !5102

while.end:                                        ; preds = %while.cond
  %48 = load %union.tree_node*, %union.tree_node** %base58, align 8, !dbg !5103
  %base65 = bitcast %union.tree_node* %48 to %struct.tree_base*, !dbg !5103
  %49 = bitcast %struct.tree_base* %base65 to i64*, !dbg !5103
  %bf.load66 = load i64, i64* %49, align 8, !dbg !5103
  %bf.clear67 = and i64 %bf.load66, 65535, !dbg !5103
  %bf.cast68 = trunc i64 %bf.clear67 to i32, !dbg !5103
  %cmp69 = icmp eq i32 %bf.cast68, 32, !dbg !5105
  br i1 %cmp69, label %land.lhs.true84, label %lor.lhs.false, !dbg !5106

lor.lhs.false:                                    ; preds = %while.end
  %50 = load %union.tree_node*, %union.tree_node** %base58, align 8, !dbg !5107
  %base71 = bitcast %union.tree_node* %50 to %struct.tree_base*, !dbg !5107
  %51 = bitcast %struct.tree_base* %base71 to i64*, !dbg !5107
  %bf.load72 = load i64, i64* %51, align 8, !dbg !5107
  %bf.clear73 = and i64 %bf.load72, 65535, !dbg !5107
  %bf.cast74 = trunc i64 %bf.clear73 to i32, !dbg !5107
  %cmp75 = icmp eq i32 %bf.cast74, 34, !dbg !5108
  br i1 %cmp75, label %land.lhs.true84, label %lor.lhs.false77, !dbg !5109

lor.lhs.false77:                                  ; preds = %lor.lhs.false
  %52 = load %union.tree_node*, %union.tree_node** %base58, align 8, !dbg !5110
  %base78 = bitcast %union.tree_node* %52 to %struct.tree_base*, !dbg !5110
  %53 = bitcast %struct.tree_base* %base78 to i64*, !dbg !5110
  %bf.load79 = load i64, i64* %53, align 8, !dbg !5110
  %bf.clear80 = and i64 %bf.load79, 65535, !dbg !5110
  %bf.cast81 = trunc i64 %bf.clear80 to i32, !dbg !5110
  %cmp82 = icmp eq i32 %bf.cast81, 36, !dbg !5111
  br i1 %cmp82, label %land.lhs.true84, label %if.end91, !dbg !5112

land.lhs.true84:                                  ; preds = %lor.lhs.false77, %lor.lhs.false, %while.end
  %54 = load %union.tree_node*, %union.tree_node** %base58, align 8, !dbg !5113
  %base85 = bitcast %union.tree_node* %54 to %struct.tree_base*, !dbg !5113
  %55 = bitcast %struct.tree_base* %base85 to i64*, !dbg !5113
  %bf.load86 = load i64, i64* %55, align 8, !dbg !5113
  %bf.lshr = lshr i64 %bf.load86, 18, !dbg !5113
  %bf.clear87 = and i64 %bf.lshr, 1, !dbg !5113
  %bf.cast88 = trunc i64 %bf.clear87 to i32, !dbg !5113
  %tobool89 = icmp ne i32 %bf.cast88, 0, !dbg !5113
  br i1 %tobool89, label %if.end91, label %if.then90, !dbg !5114

if.then90:                                        ; preds = %land.lhs.true84
  call void (i8*, ...) @error(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.29, i64 0, i64 0)), !dbg !5115
  store i8 1, i8* %err, align 1, !dbg !5117
  br label %if.end91, !dbg !5118

if.end91:                                         ; preds = %if.then90, %land.lhs.true84, %lor.lhs.false77
  br label %if.end92, !dbg !5119

if.end92:                                         ; preds = %if.end91, %if.end50
  %56 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5120
  %dest93 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %56, i32 0, i32 1, !dbg !5122
  %57 = load %struct.basic_block_def*, %struct.basic_block_def** %dest93, align 8, !dbg !5122
  %58 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5123
  %cmp94 = icmp ne %struct.basic_block_def* %57, %58, !dbg !5124
  br i1 %cmp94, label %if.then96, label %if.end101, !dbg !5125

if.then96:                                        ; preds = %if.end92
  %59 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5126
  %src97 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %59, i32 0, i32 0, !dbg !5128
  %60 = load %struct.basic_block_def*, %struct.basic_block_def** %src97, align 8, !dbg !5128
  %index98 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %60, i32 0, i32 9, !dbg !5129
  %61 = load i32, i32* %index98, align 8, !dbg !5129
  %62 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5130
  %dest99 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %62, i32 0, i32 1, !dbg !5131
  %63 = load %struct.basic_block_def*, %struct.basic_block_def** %dest99, align 8, !dbg !5131
  %index100 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %63, i32 0, i32 9, !dbg !5132
  %64 = load i32, i32* %index100, align 8, !dbg !5132
  call void (i8*, ...) @error(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.30, i64 0, i64 0), i32 %61, i32 %64), !dbg !5133
  store i8 1, i8* %err, align 1, !dbg !5134
  br label %if.end101, !dbg !5135

if.end101:                                        ; preds = %if.then96, %if.end92
  %65 = load i8, i8* %err, align 1, !dbg !5136
  %tobool102 = icmp ne i8 %65, 0, !dbg !5136
  br i1 %tobool102, label %if.then103, label %if.end105, !dbg !5138

if.then103:                                       ; preds = %if.end101
  %66 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !5139
  %call104 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %66, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.31, i64 0, i64 0)), !dbg !5141
  %67 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !5142
  %68 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !5143
  call void @print_generic_stmt(%struct._IO_FILE* %67, %union.tree_node* %68, i32 64), !dbg !5144
  br label %error, !dbg !5145

if.end105:                                        ; preds = %if.end101
  br label %for.inc, !dbg !5146

for.inc:                                          ; preds = %if.end105
  %69 = load i64, i64* %i, align 8, !dbg !5147
  %inc = add i64 %69, 1, !dbg !5147
  store i64 %inc, i64* %i, align 8, !dbg !5147
  br label %for.cond, !dbg !5148, !llvm.loop !5149

for.end:                                          ; preds = %for.cond
  br label %error, !dbg !5150

error:                                            ; preds = %for.end, %if.then103, %if.then22, %if.then
  call void @llvm.dbg.label(metadata !5151), !dbg !5152
  %70 = load i8, i8* %err, align 1, !dbg !5153
  %tobool106 = icmp ne i8 %70, 0, !dbg !5153
  br i1 %tobool106, label %if.then107, label %if.end109, !dbg !5155

if.then107:                                       ; preds = %error
  %71 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !5156
  %call108 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %71, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.32, i64 0, i64 0)), !dbg !5158
  %72 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !5159
  %73 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !5160
  call void @print_gimple_stmt(%struct._IO_FILE* %72, %union.gimple_statement_d* %73, i32 0, i32 16448), !dbg !5161
  br label %if.end109, !dbg !5162

if.end109:                                        ; preds = %if.then107, %error
  %74 = load i8, i8* %err, align 1, !dbg !5163
  ret i8 %74, !dbg !5164
}

declare dso_local zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_start_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !5165 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5168, metadata !DIExpression()), !dbg !5169
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !5170, metadata !DIExpression()), !dbg !5171
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !5172, metadata !DIExpression()), !dbg !5173
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5174
  %call = call %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %0), !dbg !5175
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq, align 8, !dbg !5176
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !5177
  %call1 = call %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %1), !dbg !5178
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !5179
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !5180
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !5181
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !5182
  store %struct.gimple_seq_d* %2, %struct.gimple_seq_d** %seq2, align 8, !dbg !5183
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5184
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !5185
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb3, align 8, !dbg !5186
  ret void, !dbg !5187
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_modified_p(%union.gimple_statement_d* %g) #0 !dbg !5188 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5189, metadata !DIExpression()), !dbg !5190
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5191
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !5192
  %conv = zext i8 %call to i32, !dbg !5193
  %tobool = icmp ne i32 %conv, 0, !dbg !5193
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5193

cond.true:                                        ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5194
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !5195
  %2 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !5196
  %bf.load = load i32, i32* %2, align 8, !dbg !5196
  %bf.lshr = lshr i32 %bf.load, 13, !dbg !5196
  %bf.clear = and i32 %bf.lshr, 1, !dbg !5196
  %conv1 = trunc i32 %bf.clear to i8, !dbg !5197
  %conv2 = zext i8 %conv1 to i32, !dbg !5197
  br label %cond.end, !dbg !5193

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5193

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ 0, %cond.false ], !dbg !5193
  %conv3 = trunc i32 %cond to i8, !dbg !5193
  ret i8 %conv3, !dbg !5198
}

declare dso_local void @print_gimple_stmt(%struct._IO_FILE*, %union.gimple_statement_d*, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %gs) #0 !dbg !5199 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5200, metadata !DIExpression()), !dbg !5201
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5202
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !5203
  ret %union.tree_node* %call, !dbg !5204
}

declare dso_local %union.tree_node* @get_base_address(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %g) #0 !dbg !5205 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5206, metadata !DIExpression()), !dbg !5207
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5208
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !5210
  %tobool = icmp ne i8 %call, 0, !dbg !5210
  br i1 %tobool, label %if.end, label %if.then, !dbg !5211

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5212
  br label %return, !dbg !5212

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5213
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !5214
  %vdef = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 1, !dbg !5215
  %2 = load %union.tree_node*, %union.tree_node** %vdef, align 8, !dbg !5215
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !5216
  br label %return, !dbg !5216

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5217
  ret %union.tree_node* %3, !dbg !5217
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_debug_bind_has_value_p(%union.gimple_statement_d* %dbg) #0 !dbg !5218 {
entry:
  %dbg.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %dbg, %union.gimple_statement_d** %dbg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %dbg.addr, metadata !5221, metadata !DIExpression()), !dbg !5222
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %dbg.addr, align 8, !dbg !5223
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !5224
  %cmp = icmp ne %union.tree_node* %call, null, !dbg !5225
  %conv = zext i1 %cmp to i32, !dbg !5225
  %conv1 = trunc i32 %conv to i8, !dbg !5224
  ret i8 %conv1, !dbg !5226
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_vdef_op(%union.gimple_statement_d* %g) #0 !dbg !5227 {
entry:
  %retval = alloca %union.tree_node**, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  %ops = alloca %struct.def_optype_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5230, metadata !DIExpression()), !dbg !5231
  call void @llvm.dbg.declare(metadata %struct.def_optype_d** %ops, metadata !5232, metadata !DIExpression()), !dbg !5233
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5234
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !5236
  %tobool = icmp ne i8 %call, 0, !dbg !5236
  br i1 %tobool, label %if.end, label %if.then, !dbg !5237

if.then:                                          ; preds = %entry
  store %union.tree_node** null, %union.tree_node*** %retval, align 8, !dbg !5238
  br label %return, !dbg !5238

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5239
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !5240
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !5241
  %def_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 1, !dbg !5242
  %2 = load %struct.def_optype_d*, %struct.def_optype_d** %def_ops, align 8, !dbg !5242
  store %struct.def_optype_d* %2, %struct.def_optype_d** %ops, align 8, !dbg !5243
  %3 = load %struct.def_optype_d*, %struct.def_optype_d** %ops, align 8, !dbg !5244
  %tobool1 = icmp ne %struct.def_optype_d* %3, null, !dbg !5244
  br i1 %tobool1, label %land.lhs.true, label %if.end4, !dbg !5246

land.lhs.true:                                    ; preds = %if.end
  %4 = load %struct.def_optype_d*, %struct.def_optype_d** %ops, align 8, !dbg !5247
  %def_ptr = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %4, i32 0, i32 1, !dbg !5247
  %5 = load %union.tree_node**, %union.tree_node*** %def_ptr, align 8, !dbg !5247
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5248
  %gsmembase = bitcast %union.gimple_statement_d* %6 to %struct.gimple_statement_with_memory_ops_base*, !dbg !5249
  %vdef = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 1, !dbg !5250
  %cmp = icmp eq %union.tree_node** %5, %vdef, !dbg !5251
  br i1 %cmp, label %if.then2, label %if.end4, !dbg !5252

if.then2:                                         ; preds = %land.lhs.true
  %7 = load %struct.def_optype_d*, %struct.def_optype_d** %ops, align 8, !dbg !5253
  %def_ptr3 = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %7, i32 0, i32 1, !dbg !5253
  %8 = load %union.tree_node**, %union.tree_node*** %def_ptr3, align 8, !dbg !5253
  store %union.tree_node** %8, %union.tree_node*** %retval, align 8, !dbg !5254
  br label %return, !dbg !5254

if.end4:                                          ; preds = %land.lhs.true, %if.end
  store %union.tree_node** null, %union.tree_node*** %retval, align 8, !dbg !5255
  br label %return, !dbg !5255

return:                                           ; preds = %if.end4, %if.then2, %if.then
  %9 = load %union.tree_node**, %union.tree_node*** %retval, align 8, !dbg !5256
  ret %union.tree_node** %9, !dbg !5256
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %g) #0 !dbg !5257 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5258, metadata !DIExpression()), !dbg !5259
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5260
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !5262
  %tobool = icmp ne i8 %call, 0, !dbg !5262
  br i1 %tobool, label %if.end, label %if.then, !dbg !5263

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5264
  br label %return, !dbg !5264

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5265
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !5266
  %vuse = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 2, !dbg !5267
  %2 = load %union.tree_node*, %union.tree_node** %vuse, align 8, !dbg !5267
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !5268
  br label %return, !dbg !5268

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5269
  ret %union.tree_node* %3, !dbg !5269
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @verify_ssa_name(%union.tree_node* %ssa_name, i8 zeroext %is_virtual) #0 !dbg !5270 {
entry:
  %retval = alloca i8, align 1
  %ssa_name.addr = alloca %union.tree_node*, align 8
  %is_virtual.addr = alloca i8, align 1
  store %union.tree_node* %ssa_name, %union.tree_node** %ssa_name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %ssa_name.addr, metadata !5273, metadata !DIExpression()), !dbg !5274
  store i8 %is_virtual, i8* %is_virtual.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %is_virtual.addr, metadata !5275, metadata !DIExpression()), !dbg !5276
  %0 = load %union.tree_node*, %union.tree_node** %ssa_name.addr, align 8, !dbg !5277
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !5277
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !5277
  %bf.load = load i64, i64* %1, align 8, !dbg !5277
  %bf.clear = and i64 %bf.load, 65535, !dbg !5277
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5277
  %cmp = icmp ne i32 %bf.cast, 141, !dbg !5279
  br i1 %cmp, label %if.then, label %if.end, !dbg !5280

if.then:                                          ; preds = %entry
  call void (i8*, ...) @error(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.33, i64 0, i64 0)), !dbg !5281
  store i8 1, i8* %retval, align 1, !dbg !5283
  br label %return, !dbg !5283

if.end:                                           ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %ssa_name.addr, align 8, !dbg !5284
  %common = bitcast %union.tree_node* %2 to %struct.tree_common*, !dbg !5284
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5284
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5284
  %4 = load %union.tree_node*, %union.tree_node** %ssa_name.addr, align 8, !dbg !5286
  %ssa_name1 = bitcast %union.tree_node* %4 to %struct.tree_ssa_name*, !dbg !5286
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name1, i32 0, i32 1, !dbg !5286
  %5 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5286
  %common2 = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !5286
  %type3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2, !dbg !5286
  %6 = load %union.tree_node*, %union.tree_node** %type3, align 8, !dbg !5286
  %cmp4 = icmp ne %union.tree_node* %3, %6, !dbg !5287
  br i1 %cmp4, label %if.then5, label %if.end6, !dbg !5288

if.then5:                                         ; preds = %if.end
  call void (i8*, ...) @error(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.34, i64 0, i64 0)), !dbg !5289
  store i8 1, i8* %retval, align 1, !dbg !5291
  br label %return, !dbg !5291

if.end6:                                          ; preds = %if.end
  %7 = load %union.tree_node*, %union.tree_node** %ssa_name.addr, align 8, !dbg !5292
  %base7 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !5292
  %8 = bitcast %struct.tree_base* %base7 to i64*, !dbg !5292
  %bf.load8 = load i64, i64* %8, align 8, !dbg !5292
  %bf.lshr = lshr i64 %bf.load8, 25, !dbg !5292
  %bf.clear9 = and i64 %bf.lshr, 1, !dbg !5292
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !5292
  %tobool = icmp ne i32 %bf.cast10, 0, !dbg !5292
  br i1 %tobool, label %if.then11, label %if.end12, !dbg !5294

if.then11:                                        ; preds = %if.end6
  call void (i8*, ...) @error(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.35, i64 0, i64 0)), !dbg !5295
  store i8 1, i8* %retval, align 1, !dbg !5297
  br label %return, !dbg !5297

if.end12:                                         ; preds = %if.end6
  %9 = load i8, i8* %is_virtual.addr, align 1, !dbg !5298
  %conv = zext i8 %9 to i32, !dbg !5298
  %tobool13 = icmp ne i32 %conv, 0, !dbg !5298
  br i1 %tobool13, label %land.lhs.true, label %if.end17, !dbg !5300

land.lhs.true:                                    ; preds = %if.end12
  %10 = load %union.tree_node*, %union.tree_node** %ssa_name.addr, align 8, !dbg !5301
  %call = call zeroext i8 @is_gimple_reg(%union.tree_node* %10), !dbg !5302
  %conv14 = zext i8 %call to i32, !dbg !5302
  %tobool15 = icmp ne i32 %conv14, 0, !dbg !5302
  br i1 %tobool15, label %if.then16, label %if.end17, !dbg !5303

if.then16:                                        ; preds = %land.lhs.true
  call void (i8*, ...) @error(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.36, i64 0, i64 0)), !dbg !5304
  store i8 1, i8* %retval, align 1, !dbg !5306
  br label %return, !dbg !5306

if.end17:                                         ; preds = %land.lhs.true, %if.end12
  %11 = load i8, i8* %is_virtual.addr, align 1, !dbg !5307
  %conv18 = zext i8 %11 to i32, !dbg !5307
  %tobool19 = icmp ne i32 %conv18, 0, !dbg !5307
  br i1 %tobool19, label %land.lhs.true20, label %if.end27, !dbg !5309

land.lhs.true20:                                  ; preds = %if.end17
  %12 = load %union.tree_node*, %union.tree_node** %ssa_name.addr, align 8, !dbg !5310
  %ssa_name21 = bitcast %union.tree_node* %12 to %struct.tree_ssa_name*, !dbg !5310
  %var22 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name21, i32 0, i32 1, !dbg !5310
  %13 = load %union.tree_node*, %union.tree_node** %var22, align 8, !dbg !5310
  %14 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5311
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %14, i64 0, !dbg !5311
  %call23 = call %union.tree_node* @gimple_vop(%struct.function* %add.ptr), !dbg !5312
  %cmp24 = icmp ne %union.tree_node* %13, %call23, !dbg !5313
  br i1 %cmp24, label %if.then26, label %if.end27, !dbg !5314

if.then26:                                        ; preds = %land.lhs.true20
  call void (i8*, ...) @error(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.37, i64 0, i64 0)), !dbg !5315
  store i8 1, i8* %retval, align 1, !dbg !5317
  br label %return, !dbg !5317

if.end27:                                         ; preds = %land.lhs.true20, %if.end17
  %15 = load i8, i8* %is_virtual.addr, align 1, !dbg !5318
  %tobool28 = icmp ne i8 %15, 0, !dbg !5318
  br i1 %tobool28, label %if.end33, label %land.lhs.true29, !dbg !5320

land.lhs.true29:                                  ; preds = %if.end27
  %16 = load %union.tree_node*, %union.tree_node** %ssa_name.addr, align 8, !dbg !5321
  %call30 = call zeroext i8 @is_gimple_reg(%union.tree_node* %16), !dbg !5322
  %tobool31 = icmp ne i8 %call30, 0, !dbg !5322
  br i1 %tobool31, label %if.end33, label %if.then32, !dbg !5323

if.then32:                                        ; preds = %land.lhs.true29
  call void (i8*, ...) @error(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.38, i64 0, i64 0)), !dbg !5324
  store i8 1, i8* %retval, align 1, !dbg !5326
  br label %return, !dbg !5326

if.end33:                                         ; preds = %land.lhs.true29, %if.end27
  %17 = load %union.tree_node*, %union.tree_node** %ssa_name.addr, align 8, !dbg !5327
  %base34 = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !5327
  %18 = bitcast %struct.tree_base* %base34 to i64*, !dbg !5327
  %bf.load35 = load i64, i64* %18, align 8, !dbg !5327
  %bf.lshr36 = lshr i64 %bf.load35, 32, !dbg !5327
  %bf.clear37 = and i64 %bf.lshr36, 1, !dbg !5327
  %bf.cast38 = trunc i64 %bf.clear37 to i32, !dbg !5327
  %tobool39 = icmp ne i32 %bf.cast38, 0, !dbg !5327
  br i1 %tobool39, label %land.lhs.true40, label %if.end45, !dbg !5329

land.lhs.true40:                                  ; preds = %if.end33
  %19 = load %union.tree_node*, %union.tree_node** %ssa_name.addr, align 8, !dbg !5330
  %ssa_name41 = bitcast %union.tree_node* %19 to %struct.tree_ssa_name*, !dbg !5330
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name41, i32 0, i32 2, !dbg !5330
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !5330
  %call42 = call zeroext i8 @gimple_nop_p(%union.gimple_statement_d* %20), !dbg !5331
  %tobool43 = icmp ne i8 %call42, 0, !dbg !5331
  br i1 %tobool43, label %if.end45, label %if.then44, !dbg !5332

if.then44:                                        ; preds = %land.lhs.true40
  call void (i8*, ...) @error(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.39, i64 0, i64 0)), !dbg !5333
  store i8 1, i8* %retval, align 1, !dbg !5335
  br label %return, !dbg !5335

if.end45:                                         ; preds = %land.lhs.true40, %if.end33
  store i8 0, i8* %retval, align 1, !dbg !5336
  br label %return, !dbg !5336

return:                                           ; preds = %if.end45, %if.then44, %if.then32, %if.then26, %if.then16, %if.then11, %if.then5, %if.then
  %21 = load i8, i8* %retval, align 1, !dbg !5337
  ret i8 %21, !dbg !5337
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @gimple_vuse_op(%union.gimple_statement_d* %g) #0 !dbg !5338 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  %ops = alloca %struct.use_optype_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5341, metadata !DIExpression()), !dbg !5342
  call void @llvm.dbg.declare(metadata %struct.use_optype_d** %ops, metadata !5343, metadata !DIExpression()), !dbg !5344
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5345
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !5347
  %tobool = icmp ne i8 %call, 0, !dbg !5347
  br i1 %tobool, label %if.end, label %if.then, !dbg !5348

if.then:                                          ; preds = %entry
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !5349
  br label %return, !dbg !5349

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5350
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !5351
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !5352
  %use_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 2, !dbg !5353
  %2 = load %struct.use_optype_d*, %struct.use_optype_d** %use_ops, align 8, !dbg !5353
  store %struct.use_optype_d* %2, %struct.use_optype_d** %ops, align 8, !dbg !5354
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %ops, align 8, !dbg !5355
  %tobool1 = icmp ne %struct.use_optype_d* %3, null, !dbg !5355
  br i1 %tobool1, label %land.lhs.true, label %if.end4, !dbg !5357

land.lhs.true:                                    ; preds = %if.end
  %4 = load %struct.use_optype_d*, %struct.use_optype_d** %ops, align 8, !dbg !5358
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %4, i32 0, i32 1, !dbg !5358
  %use = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %use_ptr, i32 0, i32 3, !dbg !5359
  %5 = load %union.tree_node**, %union.tree_node*** %use, align 8, !dbg !5359
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5360
  %gsmembase = bitcast %union.gimple_statement_d* %6 to %struct.gimple_statement_with_memory_ops_base*, !dbg !5361
  %vuse = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 2, !dbg !5362
  %cmp = icmp eq %union.tree_node** %5, %vuse, !dbg !5363
  br i1 %cmp, label %if.then2, label %if.end4, !dbg !5364

if.then2:                                         ; preds = %land.lhs.true
  %7 = load %struct.use_optype_d*, %struct.use_optype_d** %ops, align 8, !dbg !5365
  %use_ptr3 = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %7, i32 0, i32 1, !dbg !5365
  store %struct.ssa_use_operand_d* %use_ptr3, %struct.ssa_use_operand_d** %retval, align 8, !dbg !5366
  br label %return, !dbg !5366

if.end4:                                          ; preds = %land.lhs.true, %if.end
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !5367
  br label %return, !dbg !5367

return:                                           ; preds = %if.end4, %if.then2, %if.then
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !5368
  ret %struct.ssa_use_operand_d* %8, !dbg !5368
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @op_iter_init_tree(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !5369 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !5372, metadata !DIExpression()), !dbg !5373
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5374, metadata !DIExpression()), !dbg !5375
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !5376, metadata !DIExpression()), !dbg !5377
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5378
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5379
  %2 = load i32, i32* %flags.addr, align 4, !dbg !5380
  call void @op_iter_init(%struct.ssa_operand_iterator_d* %0, %union.gimple_statement_d* %1, i32 %2), !dbg !5381
  %3 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5382
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %3, i32 0, i32 1, !dbg !5383
  store i32 1, i32* %iter_type, align 4, !dbg !5384
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5385
  %call = call %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %4), !dbg !5386
  ret %union.tree_node* %call, !dbg !5387
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !5388 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %val = alloca %union.tree_node*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !5391, metadata !DIExpression()), !dbg !5392
  call void @llvm.dbg.declare(metadata %union.tree_node** %val, metadata !5393, metadata !DIExpression()), !dbg !5394
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5395
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 3, !dbg !5397
  %1 = load %struct.use_optype_d*, %struct.use_optype_d** %uses, align 8, !dbg !5397
  %tobool = icmp ne %struct.use_optype_d* %1, null, !dbg !5395
  br i1 %tobool, label %if.then, label %if.end, !dbg !5398

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5399
  %uses1 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 3, !dbg !5399
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %uses1, align 8, !dbg !5399
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %3, i32 0, i32 1, !dbg !5399
  %call = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use_ptr), !dbg !5399
  store %union.tree_node* %call, %union.tree_node** %val, align 8, !dbg !5401
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5402
  %uses2 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %4, i32 0, i32 3, !dbg !5403
  %5 = load %struct.use_optype_d*, %struct.use_optype_d** %uses2, align 8, !dbg !5403
  %next = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %5, i32 0, i32 0, !dbg !5404
  %6 = load %struct.use_optype_d*, %struct.use_optype_d** %next, align 8, !dbg !5404
  %7 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5405
  %uses3 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %7, i32 0, i32 3, !dbg !5406
  store %struct.use_optype_d* %6, %struct.use_optype_d** %uses3, align 8, !dbg !5407
  %8 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !5408
  store %union.tree_node* %8, %union.tree_node** %retval, align 8, !dbg !5409
  br label %return, !dbg !5409

if.end:                                           ; preds = %entry
  %9 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5410
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %9, i32 0, i32 2, !dbg !5412
  %10 = load %struct.def_optype_d*, %struct.def_optype_d** %defs, align 8, !dbg !5412
  %tobool4 = icmp ne %struct.def_optype_d* %10, null, !dbg !5410
  br i1 %tobool4, label %if.then5, label %if.end11, !dbg !5413

if.then5:                                         ; preds = %if.end
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5414
  %defs6 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 2, !dbg !5414
  %12 = load %struct.def_optype_d*, %struct.def_optype_d** %defs6, align 8, !dbg !5414
  %def_ptr = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %12, i32 0, i32 1, !dbg !5414
  %13 = load %union.tree_node**, %union.tree_node*** %def_ptr, align 8, !dbg !5414
  %call7 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %13), !dbg !5414
  store %union.tree_node* %call7, %union.tree_node** %val, align 8, !dbg !5416
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5417
  %defs8 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %14, i32 0, i32 2, !dbg !5418
  %15 = load %struct.def_optype_d*, %struct.def_optype_d** %defs8, align 8, !dbg !5418
  %next9 = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %15, i32 0, i32 0, !dbg !5419
  %16 = load %struct.def_optype_d*, %struct.def_optype_d** %next9, align 8, !dbg !5419
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5420
  %defs10 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 2, !dbg !5421
  store %struct.def_optype_d* %16, %struct.def_optype_d** %defs10, align 8, !dbg !5422
  %18 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !5423
  store %union.tree_node* %18, %union.tree_node** %retval, align 8, !dbg !5424
  br label %return, !dbg !5424

if.end11:                                         ; preds = %if.end
  %19 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5425
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %19, i32 0, i32 0, !dbg !5426
  store i8 1, i8* %done, align 8, !dbg !5427
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5428
  br label %return, !dbg !5428

return:                                           ; preds = %if.end11, %if.then5, %if.then
  %20 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5429
  ret %union.tree_node* %20, !dbg !5429
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !5430 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !5433, metadata !DIExpression()), !dbg !5434
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5435, metadata !DIExpression()), !dbg !5436
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !5437, metadata !DIExpression()), !dbg !5438
  %0 = load i32, i32* %flags.addr, align 4, !dbg !5439
  %and = and i32 %0, 10, !dbg !5439
  %cmp = icmp eq i32 %and, 0, !dbg !5439
  br i1 %cmp, label %land.lhs.true, label %cond.true, !dbg !5439

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !5439
  %and1 = and i32 %1, 1, !dbg !5439
  %tobool = icmp ne i32 %and1, 0, !dbg !5439
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !5439

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.21, i64 0, i64 0), i32 771, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5439
  br label %cond.end, !dbg !5439

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !5439

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5439
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5440
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5441
  %4 = load i32, i32* %flags.addr, align 4, !dbg !5442
  call void @op_iter_init(%struct.ssa_operand_iterator_d* %2, %union.gimple_statement_d* %3, i32 %4), !dbg !5443
  %5 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5444
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %5, i32 0, i32 1, !dbg !5445
  store i32 2, i32* %iter_type, align 4, !dbg !5446
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5447
  %call = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %6), !dbg !5448
  ret %struct.ssa_use_operand_d* %call, !dbg !5449
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use) #0 !dbg !5450 {
entry:
  %use.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %use, %struct.ssa_use_operand_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use.addr, metadata !5453, metadata !DIExpression()), !dbg !5454
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !5455
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 3, !dbg !5456
  %1 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !5456
  %2 = load %union.tree_node*, %union.tree_node** %1, align 8, !dbg !5457
  ret %union.tree_node* %2, !dbg !5458
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @verify_use(%struct.basic_block_def* %bb, %struct.basic_block_def* %def_bb, %struct.ssa_use_operand_d* %use_p, %union.gimple_statement_d* %stmt, i8 zeroext %check_abnormal, %struct.bitmap_head_def* %names_defined_in_bb) #0 !dbg !5459 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %def_bb.addr = alloca %struct.basic_block_def*, align 8
  %use_p.addr = alloca %struct.ssa_use_operand_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %check_abnormal.addr = alloca i8, align 1
  %names_defined_in_bb.addr = alloca %struct.bitmap_head_def*, align 8
  %err = alloca i8, align 1
  %ssa_name = alloca %union.tree_node*, align 8
  %listvar = alloca %union.tree_node*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5462, metadata !DIExpression()), !dbg !5463
  store %struct.basic_block_def* %def_bb, %struct.basic_block_def** %def_bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %def_bb.addr, metadata !5464, metadata !DIExpression()), !dbg !5465
  store %struct.ssa_use_operand_d* %use_p, %struct.ssa_use_operand_d** %use_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p.addr, metadata !5466, metadata !DIExpression()), !dbg !5467
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5468, metadata !DIExpression()), !dbg !5469
  store i8 %check_abnormal, i8* %check_abnormal.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %check_abnormal.addr, metadata !5470, metadata !DIExpression()), !dbg !5471
  store %struct.bitmap_head_def* %names_defined_in_bb, %struct.bitmap_head_def** %names_defined_in_bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %names_defined_in_bb.addr, metadata !5472, metadata !DIExpression()), !dbg !5473
  call void @llvm.dbg.declare(metadata i8* %err, metadata !5474, metadata !DIExpression()), !dbg !5475
  store i8 0, i8* %err, align 1, !dbg !5475
  call void @llvm.dbg.declare(metadata %union.tree_node** %ssa_name, metadata !5476, metadata !DIExpression()), !dbg !5477
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !5478
  %call = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %0), !dbg !5478
  store %union.tree_node* %call, %union.tree_node** %ssa_name, align 8, !dbg !5477
  %1 = load %union.tree_node*, %union.tree_node** %ssa_name, align 8, !dbg !5479
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !5479
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !5479
  %bf.load = load i64, i64* %2, align 8, !dbg !5479
  %bf.lshr = lshr i64 %bf.load, 40, !dbg !5479
  %bf.clear = and i64 %bf.lshr, 1, !dbg !5479
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5479
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !5479
  br i1 %tobool, label %if.end4, label %if.then, !dbg !5481

if.then:                                          ; preds = %entry
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !5482
  %4 = load %union.tree_node*, %union.tree_node** %ssa_name, align 8, !dbg !5484
  %call1 = call zeroext i8 @verify_imm_links(%struct._IO_FILE* %3, %union.tree_node* %4), !dbg !5485
  %tobool2 = icmp ne i8 %call1, 0, !dbg !5485
  br i1 %tobool2, label %if.then3, label %if.end, !dbg !5486

if.then3:                                         ; preds = %if.then
  store i8 1, i8* %err, align 1, !dbg !5487
  br label %if.end, !dbg !5488

if.end:                                           ; preds = %if.then3, %if.then
  br label %if.end4, !dbg !5489

if.end4:                                          ; preds = %if.end, %entry
  %5 = load %union.tree_node*, %union.tree_node** %ssa_name, align 8, !dbg !5490
  %base5 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !5490
  %6 = bitcast %struct.tree_base* %base5 to i64*, !dbg !5490
  %bf.load6 = load i64, i64* %6, align 8, !dbg !5491
  %bf.clear7 = and i64 %bf.load6, -1099511627777, !dbg !5491
  %bf.set = or i64 %bf.clear7, 1099511627776, !dbg !5491
  store i64 %bf.set, i64* %6, align 8, !dbg !5491
  %7 = load %union.tree_node*, %union.tree_node** %ssa_name, align 8, !dbg !5492
  %ssa_name8 = bitcast %union.tree_node* %7 to %struct.tree_ssa_name*, !dbg !5492
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name8, i32 0, i32 2, !dbg !5492
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !5492
  %call9 = call zeroext i8 @gimple_nop_p(%union.gimple_statement_d* %8), !dbg !5494
  %conv = zext i8 %call9 to i32, !dbg !5494
  %tobool10 = icmp ne i32 %conv, 0, !dbg !5494
  br i1 %tobool10, label %land.lhs.true, label %if.else, !dbg !5495

land.lhs.true:                                    ; preds = %if.end4
  %9 = load %union.tree_node*, %union.tree_node** %ssa_name, align 8, !dbg !5496
  %base11 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !5496
  %10 = bitcast %struct.tree_base* %base11 to i64*, !dbg !5496
  %bf.load12 = load i64, i64* %10, align 8, !dbg !5496
  %bf.lshr13 = lshr i64 %bf.load12, 32, !dbg !5496
  %bf.clear14 = and i64 %bf.lshr13, 1, !dbg !5496
  %bf.cast15 = trunc i64 %bf.clear14 to i32, !dbg !5496
  %tobool16 = icmp ne i32 %bf.cast15, 0, !dbg !5496
  br i1 %tobool16, label %if.then17, label %if.else, !dbg !5497

if.then17:                                        ; preds = %land.lhs.true
  br label %if.end42, !dbg !5497

if.else:                                          ; preds = %land.lhs.true, %if.end4
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %def_bb.addr, align 8, !dbg !5498
  %tobool18 = icmp ne %struct.basic_block_def* %11, null, !dbg !5498
  br i1 %tobool18, label %if.else20, label %if.then19, !dbg !5500

if.then19:                                        ; preds = %if.else
  call void (i8*, ...) @error(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.40, i64 0, i64 0)), !dbg !5501
  store i8 1, i8* %err, align 1, !dbg !5503
  br label %if.end41, !dbg !5504

if.else20:                                        ; preds = %if.else
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5505
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %def_bb.addr, align 8, !dbg !5507
  %cmp = icmp ne %struct.basic_block_def* %12, %13, !dbg !5508
  br i1 %cmp, label %land.lhs.true22, label %if.else27, !dbg !5509

land.lhs.true22:                                  ; preds = %if.else20
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5510
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %def_bb.addr, align 8, !dbg !5511
  %call23 = call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %14, %struct.basic_block_def* %15), !dbg !5512
  %tobool24 = icmp ne i8 %call23, 0, !dbg !5512
  br i1 %tobool24, label %if.else27, label %if.then25, !dbg !5513

if.then25:                                        ; preds = %land.lhs.true22
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %def_bb.addr, align 8, !dbg !5514
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %16, i32 0, i32 9, !dbg !5516
  %17 = load i32, i32* %index, align 8, !dbg !5516
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5517
  %index26 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %18, i32 0, i32 9, !dbg !5518
  %19 = load i32, i32* %index26, align 8, !dbg !5518
  call void (i8*, ...) @error(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.41, i64 0, i64 0), i32 %17, i32 %19), !dbg !5519
  store i8 1, i8* %err, align 1, !dbg !5520
  br label %if.end40, !dbg !5521

if.else27:                                        ; preds = %land.lhs.true22, %if.else20
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5522
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %def_bb.addr, align 8, !dbg !5524
  %cmp28 = icmp eq %struct.basic_block_def* %20, %21, !dbg !5525
  br i1 %cmp28, label %land.lhs.true30, label %if.end39, !dbg !5526

land.lhs.true30:                                  ; preds = %if.else27
  %22 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %names_defined_in_bb.addr, align 8, !dbg !5527
  %cmp31 = icmp ne %struct.bitmap_head_def* %22, null, !dbg !5528
  br i1 %cmp31, label %land.lhs.true33, label %if.end39, !dbg !5529

land.lhs.true33:                                  ; preds = %land.lhs.true30
  %23 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %names_defined_in_bb.addr, align 8, !dbg !5530
  %24 = load %union.tree_node*, %union.tree_node** %ssa_name, align 8, !dbg !5531
  %ssa_name34 = bitcast %union.tree_node* %24 to %struct.tree_ssa_name*, !dbg !5531
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name34, i32 0, i32 3, !dbg !5531
  %25 = load i32, i32* %version, align 8, !dbg !5531
  %call35 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %23, i32 %25), !dbg !5532
  %tobool36 = icmp ne i32 %call35, 0, !dbg !5532
  br i1 %tobool36, label %if.end39, label %if.then37, !dbg !5533

if.then37:                                        ; preds = %land.lhs.true33
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %def_bb.addr, align 8, !dbg !5534
  %index38 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %26, i32 0, i32 9, !dbg !5536
  %27 = load i32, i32* %index38, align 8, !dbg !5536
  call void (i8*, ...) @error(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.42, i64 0, i64 0), i32 %27), !dbg !5537
  store i8 1, i8* %err, align 1, !dbg !5538
  br label %if.end39, !dbg !5539

if.end39:                                         ; preds = %if.then37, %land.lhs.true33, %land.lhs.true30, %if.else27
  br label %if.end40

if.end40:                                         ; preds = %if.end39, %if.then25
  br label %if.end41

if.end41:                                         ; preds = %if.end40, %if.then19
  br label %if.end42

if.end42:                                         ; preds = %if.end41, %if.then17
  %28 = load i8, i8* %check_abnormal.addr, align 1, !dbg !5540
  %conv43 = zext i8 %28 to i32, !dbg !5540
  %tobool44 = icmp ne i32 %conv43, 0, !dbg !5540
  br i1 %tobool44, label %land.lhs.true45, label %if.end53, !dbg !5542

land.lhs.true45:                                  ; preds = %if.end42
  %29 = load %union.tree_node*, %union.tree_node** %ssa_name, align 8, !dbg !5543
  %base46 = bitcast %union.tree_node* %29 to %struct.tree_base*, !dbg !5543
  %30 = bitcast %struct.tree_base* %base46 to i64*, !dbg !5543
  %bf.load47 = load i64, i64* %30, align 8, !dbg !5543
  %bf.lshr48 = lshr i64 %bf.load47, 22, !dbg !5543
  %bf.clear49 = and i64 %bf.lshr48, 1, !dbg !5543
  %bf.cast50 = trunc i64 %bf.clear49 to i32, !dbg !5543
  %tobool51 = icmp ne i32 %bf.cast50, 0, !dbg !5543
  br i1 %tobool51, label %if.end53, label %if.then52, !dbg !5544

if.then52:                                        ; preds = %land.lhs.true45
  call void (i8*, ...) @error(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.43, i64 0, i64 0)), !dbg !5545
  store i8 1, i8* %err, align 1, !dbg !5547
  br label %if.end53, !dbg !5548

if.end53:                                         ; preds = %if.then52, %land.lhs.true45, %if.end42
  %31 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !5549
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %31, i32 0, i32 0, !dbg !5551
  %32 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !5551
  %cmp54 = icmp eq %struct.ssa_use_operand_d* %32, null, !dbg !5552
  br i1 %cmp54, label %if.then56, label %if.else57, !dbg !5553

if.then56:                                        ; preds = %if.end53
  call void (i8*, ...) @error(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.44, i64 0, i64 0)), !dbg !5554
  store i8 1, i8* %err, align 1, !dbg !5556
  br label %if.end72, !dbg !5557

if.else57:                                        ; preds = %if.end53
  call void @llvm.dbg.declare(metadata %union.tree_node** %listvar, metadata !5558, metadata !DIExpression()), !dbg !5560
  %33 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !5561
  %prev58 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %33, i32 0, i32 0, !dbg !5563
  %34 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev58, align 8, !dbg !5563
  %use = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %34, i32 0, i32 3, !dbg !5564
  %35 = load %union.tree_node**, %union.tree_node*** %use, align 8, !dbg !5564
  %cmp59 = icmp eq %union.tree_node** %35, null, !dbg !5565
  br i1 %cmp59, label %if.then61, label %if.else64, !dbg !5566

if.then61:                                        ; preds = %if.else57
  %36 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !5567
  %prev62 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %36, i32 0, i32 0, !dbg !5568
  %37 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev62, align 8, !dbg !5568
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %37, i32 0, i32 2, !dbg !5569
  %ssa_name63 = bitcast %union.anon* %loc to %union.tree_node**, !dbg !5570
  %38 = load %union.tree_node*, %union.tree_node** %ssa_name63, align 8, !dbg !5570
  store %union.tree_node* %38, %union.tree_node** %listvar, align 8, !dbg !5571
  br label %if.end67, !dbg !5572

if.else64:                                        ; preds = %if.else57
  %39 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !5573
  %prev65 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %39, i32 0, i32 0, !dbg !5573
  %40 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev65, align 8, !dbg !5573
  %call66 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %40), !dbg !5573
  store %union.tree_node* %call66, %union.tree_node** %listvar, align 8, !dbg !5574
  br label %if.end67

if.end67:                                         ; preds = %if.else64, %if.then61
  %41 = load %union.tree_node*, %union.tree_node** %listvar, align 8, !dbg !5575
  %42 = load %union.tree_node*, %union.tree_node** %ssa_name, align 8, !dbg !5577
  %cmp68 = icmp ne %union.tree_node* %41, %42, !dbg !5578
  br i1 %cmp68, label %if.then70, label %if.end71, !dbg !5579

if.then70:                                        ; preds = %if.end67
  call void (i8*, ...) @error(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.45, i64 0, i64 0)), !dbg !5580
  store i8 1, i8* %err, align 1, !dbg !5582
  br label %if.end71, !dbg !5583

if.end71:                                         ; preds = %if.then70, %if.end67
  br label %if.end72

if.end72:                                         ; preds = %if.end71, %if.then56
  %43 = load i8, i8* %err, align 1, !dbg !5584
  %tobool73 = icmp ne i8 %43, 0, !dbg !5584
  br i1 %tobool73, label %if.then74, label %if.end77, !dbg !5586

if.then74:                                        ; preds = %if.end72
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !5587
  %call75 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %44, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.46, i64 0, i64 0)), !dbg !5589
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !5590
  %46 = load %union.tree_node*, %union.tree_node** %ssa_name, align 8, !dbg !5591
  call void @print_generic_expr(%struct._IO_FILE* %45, %union.tree_node* %46, i32 64), !dbg !5592
  %47 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !5593
  %call76 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %47, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.47, i64 0, i64 0)), !dbg !5594
  %48 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !5595
  %49 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5596
  call void @print_gimple_stmt(%struct._IO_FILE* %48, %union.gimple_statement_d* %49, i32 0, i32 64), !dbg !5597
  br label %if.end77, !dbg !5598

if.end77:                                         ; preds = %if.then74, %if.end72
  %50 = load i8, i8* %err, align 1, !dbg !5599
  ret i8 %50, !dbg !5600
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !5601 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !5604, metadata !DIExpression()), !dbg !5605
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !5606, metadata !DIExpression()), !dbg !5607
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5608
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 3, !dbg !5610
  %1 = load %struct.use_optype_d*, %struct.use_optype_d** %uses, align 8, !dbg !5610
  %tobool = icmp ne %struct.use_optype_d* %1, null, !dbg !5608
  br i1 %tobool, label %if.then, label %if.end, !dbg !5611

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5612
  %uses1 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 3, !dbg !5612
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %uses1, align 8, !dbg !5612
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %3, i32 0, i32 1, !dbg !5612
  store %struct.ssa_use_operand_d* %use_ptr, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !5614
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5615
  %uses2 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %4, i32 0, i32 3, !dbg !5616
  %5 = load %struct.use_optype_d*, %struct.use_optype_d** %uses2, align 8, !dbg !5616
  %next = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %5, i32 0, i32 0, !dbg !5617
  %6 = load %struct.use_optype_d*, %struct.use_optype_d** %next, align 8, !dbg !5617
  %7 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5618
  %uses3 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %7, i32 0, i32 3, !dbg !5619
  store %struct.use_optype_d* %6, %struct.use_optype_d** %uses3, align 8, !dbg !5620
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !5621
  store %struct.ssa_use_operand_d* %8, %struct.ssa_use_operand_d** %retval, align 8, !dbg !5622
  br label %return, !dbg !5622

if.end:                                           ; preds = %entry
  %9 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5623
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %9, i32 0, i32 4, !dbg !5625
  %10 = load i32, i32* %phi_i, align 8, !dbg !5625
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5626
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 5, !dbg !5627
  %12 = load i32, i32* %num_phi, align 4, !dbg !5627
  %cmp = icmp slt i32 %10, %12, !dbg !5628
  br i1 %cmp, label %if.then4, label %if.end6, !dbg !5629

if.then4:                                         ; preds = %if.end
  %13 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5630
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %13, i32 0, i32 6, !dbg !5630
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !5630
  %15 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5630
  %phi_i5 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %15, i32 0, i32 4, !dbg !5630
  %16 = load i32, i32* %phi_i5, align 8, !dbg !5630
  %inc = add nsw i32 %16, 1, !dbg !5630
  store i32 %inc, i32* %phi_i5, align 8, !dbg !5630
  %call = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %14, i32 %16), !dbg !5630
  store %struct.ssa_use_operand_d* %call, %struct.ssa_use_operand_d** %retval, align 8, !dbg !5632
  br label %return, !dbg !5632

if.end6:                                          ; preds = %if.end
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5633
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 0, !dbg !5634
  store i8 1, i8* %done, align 8, !dbg !5635
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !5636
  br label %return, !dbg !5636

return:                                           ; preds = %if.end6, %if.then4, %if.then
  %18 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !5637
  ret %struct.ssa_use_operand_d* %18, !dbg !5637
}

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

declare dso_local void @bitmap_clear(%struct.bitmap_head_def*) #2

declare dso_local void @free(i8*) #2

declare dso_local void @free_dominance_info(i32) #2

declare dso_local void @set_dom_info_availability(i32, i32) #2

declare dso_local void @bitmap_obstack_free(%struct.bitmap_head_def*) #2

declare dso_local void @timevar_pop_1(i32) #2

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

declare dso_local void @internal_error(i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @int_tree_map_eq(i8* %va, i8* %vb) #0 !dbg !5638 {
entry:
  %va.addr = alloca i8*, align 8
  %vb.addr = alloca i8*, align 8
  %a = alloca %struct.int_tree_map*, align 8
  %b = alloca %struct.int_tree_map*, align 8
  store i8* %va, i8** %va.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %va.addr, metadata !5639, metadata !DIExpression()), !dbg !5640
  store i8* %vb, i8** %vb.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %vb.addr, metadata !5641, metadata !DIExpression()), !dbg !5642
  call void @llvm.dbg.declare(metadata %struct.int_tree_map** %a, metadata !5643, metadata !DIExpression()), !dbg !5644
  %0 = load i8*, i8** %va.addr, align 8, !dbg !5645
  %1 = bitcast i8* %0 to %struct.int_tree_map*, !dbg !5646
  store %struct.int_tree_map* %1, %struct.int_tree_map** %a, align 8, !dbg !5644
  call void @llvm.dbg.declare(metadata %struct.int_tree_map** %b, metadata !5647, metadata !DIExpression()), !dbg !5648
  %2 = load i8*, i8** %vb.addr, align 8, !dbg !5649
  %3 = bitcast i8* %2 to %struct.int_tree_map*, !dbg !5650
  store %struct.int_tree_map* %3, %struct.int_tree_map** %b, align 8, !dbg !5648
  %4 = load %struct.int_tree_map*, %struct.int_tree_map** %a, align 8, !dbg !5651
  %uid = getelementptr inbounds %struct.int_tree_map, %struct.int_tree_map* %4, i32 0, i32 0, !dbg !5652
  %5 = load i32, i32* %uid, align 8, !dbg !5652
  %6 = load %struct.int_tree_map*, %struct.int_tree_map** %b, align 8, !dbg !5653
  %uid1 = getelementptr inbounds %struct.int_tree_map, %struct.int_tree_map* %6, i32 0, i32 0, !dbg !5654
  %7 = load i32, i32* %uid1, align 8, !dbg !5654
  %cmp = icmp eq i32 %5, %7, !dbg !5655
  %conv = zext i1 %cmp to i32, !dbg !5655
  ret i32 %conv, !dbg !5656
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @int_tree_map_hash(i8* %item) #0 !dbg !5657 {
entry:
  %item.addr = alloca i8*, align 8
  store i8* %item, i8** %item.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %item.addr, metadata !5660, metadata !DIExpression()), !dbg !5661
  %0 = load i8*, i8** %item.addr, align 8, !dbg !5662
  %1 = bitcast i8* %0 to %struct.int_tree_map*, !dbg !5663
  %uid = getelementptr inbounds %struct.int_tree_map, %struct.int_tree_map* %1, i32 0, i32 0, !dbg !5664
  %2 = load i32, i32* %uid, align 8, !dbg !5664
  ret i32 %2, !dbg !5665
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @uid_decl_map_eq(i8* %va, i8* %vb) #0 !dbg !5666 {
entry:
  %va.addr = alloca i8*, align 8
  %vb.addr = alloca i8*, align 8
  %a = alloca %union.tree_node*, align 8
  %b = alloca %union.tree_node*, align 8
  store i8* %va, i8** %va.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %va.addr, metadata !5667, metadata !DIExpression()), !dbg !5668
  store i8* %vb, i8** %vb.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %vb.addr, metadata !5669, metadata !DIExpression()), !dbg !5670
  call void @llvm.dbg.declare(metadata %union.tree_node** %a, metadata !5671, metadata !DIExpression()), !dbg !5672
  %0 = load i8*, i8** %va.addr, align 8, !dbg !5673
  %1 = bitcast i8* %0 to %union.tree_node*, !dbg !5674
  store %union.tree_node* %1, %union.tree_node** %a, align 8, !dbg !5672
  call void @llvm.dbg.declare(metadata %union.tree_node** %b, metadata !5675, metadata !DIExpression()), !dbg !5676
  %2 = load i8*, i8** %vb.addr, align 8, !dbg !5677
  %3 = bitcast i8* %2 to %union.tree_node*, !dbg !5678
  store %union.tree_node* %3, %union.tree_node** %b, align 8, !dbg !5676
  %4 = load %union.tree_node*, %union.tree_node** %a, align 8, !dbg !5679
  %decl_minimal = bitcast %union.tree_node* %4 to %struct.tree_decl_minimal*, !dbg !5680
  %uid = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 2, !dbg !5681
  %5 = load i32, i32* %uid, align 4, !dbg !5681
  %6 = load %union.tree_node*, %union.tree_node** %b, align 8, !dbg !5682
  %decl_minimal1 = bitcast %union.tree_node* %6 to %struct.tree_decl_minimal*, !dbg !5683
  %uid2 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal1, i32 0, i32 2, !dbg !5684
  %7 = load i32, i32* %uid2, align 4, !dbg !5684
  %cmp = icmp eq i32 %5, %7, !dbg !5685
  %conv = zext i1 %cmp to i32, !dbg !5685
  ret i32 %conv, !dbg !5686
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @uid_decl_map_hash(i8* %item) #0 !dbg !5687 {
entry:
  %item.addr = alloca i8*, align 8
  store i8* %item, i8** %item.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %item.addr, metadata !5688, metadata !DIExpression()), !dbg !5689
  %0 = load i8*, i8** %item.addr, align 8, !dbg !5690
  %1 = bitcast i8* %0 to %union.tree_node*, !dbg !5691
  %decl_minimal = bitcast %union.tree_node* %1 to %struct.tree_decl_minimal*, !dbg !5692
  %uid = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 2, !dbg !5693
  %2 = load i32, i32* %uid, align 4, !dbg !5693
  ret i32 %2, !dbg !5694
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @init_tree_ssa(%struct.function* %fn) #0 !dbg !5695 {
entry:
  %fn.addr = alloca %struct.function*, align 8
  store %struct.function* %fn, %struct.function** %fn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fn.addr, metadata !5698, metadata !DIExpression()), !dbg !5699
  %call = call i8* @ggc_alloc_cleared_stat(i64 144), !dbg !5700
  %0 = bitcast i8* %call to %struct.gimple_df*, !dbg !5700
  %1 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5701
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %1, i32 0, i32 3, !dbg !5702
  store %struct.gimple_df* %0, %struct.gimple_df** %gimple_df, align 8, !dbg !5703
  %call1 = call %struct.htab* @htab_create_alloc(i64 20, i32 (i8*)* @uid_decl_map_hash, i32 (i8*, i8*)* @uid_decl_map_eq, void (i8*)* null, i8* (i64, i64)* @ggc_calloc, void (i8*)* @ggc_free), !dbg !5704
  %2 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5705
  %gimple_df2 = getelementptr inbounds %struct.function, %struct.function* %2, i32 0, i32 3, !dbg !5706
  %3 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df2, align 8, !dbg !5706
  %referenced_vars = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %3, i32 0, i32 0, !dbg !5707
  store %struct.htab* %call1, %struct.htab** %referenced_vars, align 8, !dbg !5708
  %call3 = call %struct.htab* @htab_create_alloc(i64 20, i32 (i8*)* @uid_ssaname_map_hash, i32 (i8*, i8*)* @uid_ssaname_map_eq, void (i8*)* null, i8* (i64, i64)* @ggc_calloc, void (i8*)* @ggc_free), !dbg !5709
  %4 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5710
  %gimple_df4 = getelementptr inbounds %struct.function, %struct.function* %4, i32 0, i32 3, !dbg !5711
  %5 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df4, align 8, !dbg !5711
  %default_defs = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %5, i32 0, i32 8, !dbg !5712
  store %struct.htab* %call3, %struct.htab** %default_defs, align 8, !dbg !5713
  %6 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5714
  %gimple_df5 = getelementptr inbounds %struct.function, %struct.function* %6, i32 0, i32 3, !dbg !5715
  %7 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df5, align 8, !dbg !5715
  %escaped = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %7, i32 0, i32 4, !dbg !5716
  call void @pt_solution_reset(%struct.pt_solution* %escaped), !dbg !5717
  %8 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5718
  %gimple_df6 = getelementptr inbounds %struct.function, %struct.function* %8, i32 0, i32 3, !dbg !5719
  %9 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df6, align 8, !dbg !5719
  %callused = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %9, i32 0, i32 5, !dbg !5720
  call void @pt_solution_reset(%struct.pt_solution* %callused), !dbg !5721
  %10 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5722
  call void @init_ssanames(%struct.function* %10, i32 0), !dbg !5723
  call void @init_phinodes(), !dbg !5724
  ret void, !dbg !5725
}

declare dso_local i8* @ggc_alloc_cleared_stat(i64) #2

declare dso_local %struct.htab* @htab_create_alloc(i64, i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8* (i64, i64)*, void (i8*)*) #2

declare dso_local i8* @ggc_calloc(i64, i64) #2

declare dso_local void @ggc_free(i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @uid_ssaname_map_hash(i8* %item) #0 !dbg !5726 {
entry:
  %item.addr = alloca i8*, align 8
  store i8* %item, i8** %item.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %item.addr, metadata !5727, metadata !DIExpression()), !dbg !5728
  %0 = load i8*, i8** %item.addr, align 8, !dbg !5729
  %1 = bitcast i8* %0 to %union.tree_node*, !dbg !5730
  %ssa_name = bitcast %union.tree_node* %1 to %struct.tree_ssa_name*, !dbg !5731
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !5732
  %2 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5732
  %decl_minimal = bitcast %union.tree_node* %2 to %struct.tree_decl_minimal*, !dbg !5733
  %uid = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 2, !dbg !5734
  %3 = load i32, i32* %uid, align 4, !dbg !5734
  ret i32 %3, !dbg !5735
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @uid_ssaname_map_eq(i8* %va, i8* %vb) #0 !dbg !5736 {
entry:
  %va.addr = alloca i8*, align 8
  %vb.addr = alloca i8*, align 8
  %a = alloca %union.tree_node*, align 8
  %b = alloca %union.tree_node*, align 8
  store i8* %va, i8** %va.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %va.addr, metadata !5737, metadata !DIExpression()), !dbg !5738
  store i8* %vb, i8** %vb.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %vb.addr, metadata !5739, metadata !DIExpression()), !dbg !5740
  call void @llvm.dbg.declare(metadata %union.tree_node** %a, metadata !5741, metadata !DIExpression()), !dbg !5742
  %0 = load i8*, i8** %va.addr, align 8, !dbg !5743
  %1 = bitcast i8* %0 to %union.tree_node*, !dbg !5744
  store %union.tree_node* %1, %union.tree_node** %a, align 8, !dbg !5742
  call void @llvm.dbg.declare(metadata %union.tree_node** %b, metadata !5745, metadata !DIExpression()), !dbg !5746
  %2 = load i8*, i8** %vb.addr, align 8, !dbg !5747
  %3 = bitcast i8* %2 to %union.tree_node*, !dbg !5748
  store %union.tree_node* %3, %union.tree_node** %b, align 8, !dbg !5746
  %4 = load %union.tree_node*, %union.tree_node** %a, align 8, !dbg !5749
  %ssa_name = bitcast %union.tree_node* %4 to %struct.tree_ssa_name*, !dbg !5750
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !5751
  %5 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5751
  %decl_minimal = bitcast %union.tree_node* %5 to %struct.tree_decl_minimal*, !dbg !5752
  %uid = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 2, !dbg !5753
  %6 = load i32, i32* %uid, align 4, !dbg !5753
  %7 = load %union.tree_node*, %union.tree_node** %b, align 8, !dbg !5754
  %ssa_name1 = bitcast %union.tree_node* %7 to %struct.tree_ssa_name*, !dbg !5755
  %var2 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name1, i32 0, i32 1, !dbg !5756
  %8 = load %union.tree_node*, %union.tree_node** %var2, align 8, !dbg !5756
  %decl_minimal3 = bitcast %union.tree_node* %8 to %struct.tree_decl_minimal*, !dbg !5757
  %uid4 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal3, i32 0, i32 2, !dbg !5758
  %9 = load i32, i32* %uid4, align 4, !dbg !5758
  %cmp = icmp eq i32 %6, %9, !dbg !5759
  %conv = zext i1 %cmp to i32, !dbg !5759
  ret i32 %conv, !dbg !5760
}

declare dso_local void @pt_solution_reset(%struct.pt_solution*) #2

declare dso_local void @init_ssanames(%struct.function*, i32) #2

declare dso_local void @init_phinodes() #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @delete_tree_ssa() #0 !dbg !5761 {
entry:
  %rvi = alloca %struct.referenced_var_iterator, align 8
  %var = alloca %union.tree_node*, align 8
  call void @llvm.dbg.declare(metadata %struct.referenced_var_iterator* %rvi, metadata !5762, metadata !DIExpression()), !dbg !5773
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !5774, metadata !DIExpression()), !dbg !5775
  %call = call %union.tree_node* @first_referenced_var(%struct.referenced_var_iterator* %rvi), !dbg !5776
  store %union.tree_node* %call, %union.tree_node** %var, align 8, !dbg !5776
  br label %for.cond, !dbg !5776

for.cond:                                         ; preds = %for.inc, %entry
  %call1 = call zeroext i8 @end_referenced_vars_p(%struct.referenced_var_iterator* %rvi), !dbg !5778
  %tobool = icmp ne i8 %call1, 0, !dbg !5778
  %lnot = xor i1 %tobool, true, !dbg !5778
  br i1 %lnot, label %for.body, label %for.end, !dbg !5776

for.body:                                         ; preds = %for.cond
  %0 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5780
  %call2 = call zeroext i8 @is_global_var(%union.tree_node* %0), !dbg !5783
  %tobool3 = icmp ne i8 %call2, 0, !dbg !5783
  br i1 %tobool3, label %if.then, label %if.end, !dbg !5784

if.then:                                          ; preds = %for.body
  br label %for.inc, !dbg !5785

if.end:                                           ; preds = %for.body
  %1 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5786
  %call4 = call %struct.var_ann_d* @var_ann(%union.tree_node* %1), !dbg !5788
  %tobool5 = icmp ne %struct.var_ann_d* %call4, null, !dbg !5788
  br i1 %tobool5, label %if.then6, label %if.end28, !dbg !5789

if.then6:                                         ; preds = %if.end
  %2 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5790
  %call7 = call %struct.var_ann_d* @var_ann(%union.tree_node* %2), !dbg !5792
  %3 = bitcast %struct.var_ann_d* %call7 to i8*, !dbg !5792
  call void @ggc_free(i8* %3), !dbg !5793
  %4 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5794
  %base = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !5794
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !5794
  %bf.load = load i64, i64* %5, align 8, !dbg !5794
  %bf.clear = and i64 %bf.load, 65535, !dbg !5794
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5794
  %cmp = icmp eq i32 %bf.cast, 32, !dbg !5794
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !5794

cond.true:                                        ; preds = %if.then6
  %6 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5794
  %var_decl = bitcast %union.tree_node* %6 to %struct.tree_var_decl*, !dbg !5794
  %ann = getelementptr inbounds %struct.tree_var_decl, %struct.tree_var_decl* %var_decl, i32 0, i32 1, !dbg !5794
  br label %cond.end26, !dbg !5794

cond.false:                                       ; preds = %if.then6
  %7 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5794
  %base8 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !5794
  %8 = bitcast %struct.tree_base* %base8 to i64*, !dbg !5794
  %bf.load9 = load i64, i64* %8, align 8, !dbg !5794
  %bf.clear10 = and i64 %bf.load9, 65535, !dbg !5794
  %bf.cast11 = trunc i64 %bf.clear10 to i32, !dbg !5794
  %cmp12 = icmp eq i32 %bf.cast11, 34, !dbg !5794
  br i1 %cmp12, label %cond.true13, label %cond.false15, !dbg !5794

cond.true13:                                      ; preds = %cond.false
  %9 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5794
  %parm_decl = bitcast %union.tree_node* %9 to %struct.tree_parm_decl*, !dbg !5794
  %ann14 = getelementptr inbounds %struct.tree_parm_decl, %struct.tree_parm_decl* %parm_decl, i32 0, i32 2, !dbg !5794
  br label %cond.end24, !dbg !5794

cond.false15:                                     ; preds = %cond.false
  %10 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5794
  %base16 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !5794
  %11 = bitcast %struct.tree_base* %base16 to i64*, !dbg !5794
  %bf.load17 = load i64, i64* %11, align 8, !dbg !5794
  %bf.clear18 = and i64 %bf.load17, 65535, !dbg !5794
  %bf.cast19 = trunc i64 %bf.clear18 to i32, !dbg !5794
  %cmp20 = icmp eq i32 %bf.cast19, 36, !dbg !5794
  br i1 %cmp20, label %cond.true21, label %cond.false23, !dbg !5794

cond.true21:                                      ; preds = %cond.false15
  %12 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5794
  %result_decl = bitcast %union.tree_node* %12 to %struct.tree_result_decl*, !dbg !5794
  %ann22 = getelementptr inbounds %struct.tree_result_decl, %struct.tree_result_decl* %result_decl, i32 0, i32 1, !dbg !5794
  br label %cond.end, !dbg !5794

cond.false23:                                     ; preds = %cond.false15
  br label %cond.end, !dbg !5794

cond.end:                                         ; preds = %cond.false23, %cond.true21
  %cond = phi %struct.var_ann_d** [ %ann22, %cond.true21 ], [ null, %cond.false23 ], !dbg !5794
  br label %cond.end24, !dbg !5794

cond.end24:                                       ; preds = %cond.end, %cond.true13
  %cond25 = phi %struct.var_ann_d** [ %ann14, %cond.true13 ], [ %cond, %cond.end ], !dbg !5794
  br label %cond.end26, !dbg !5794

cond.end26:                                       ; preds = %cond.end24, %cond.true
  %cond27 = phi %struct.var_ann_d** [ %ann, %cond.true ], [ %cond25, %cond.end24 ], !dbg !5794
  store %struct.var_ann_d* null, %struct.var_ann_d** %cond27, align 8, !dbg !5795
  br label %if.end28, !dbg !5796

if.end28:                                         ; preds = %cond.end26, %if.end
  br label %for.inc, !dbg !5797

for.inc:                                          ; preds = %if.end28, %if.then
  %call29 = call %union.tree_node* @next_referenced_var(%struct.referenced_var_iterator* %rvi), !dbg !5778
  store %union.tree_node* %call29, %union.tree_node** %var, align 8, !dbg !5778
  br label %for.cond, !dbg !5778, !llvm.loop !5798

for.end:                                          ; preds = %for.cond
  %13 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5800
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %13, i64 0, !dbg !5800
  %call30 = call %struct.htab* @gimple_referenced_vars(%struct.function* %add.ptr), !dbg !5801
  call void @htab_delete(%struct.htab* %call30), !dbg !5802
  %14 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5803
  %add.ptr31 = getelementptr inbounds %struct.function, %struct.function* %14, i64 0, !dbg !5803
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr31, i32 0, i32 3, !dbg !5804
  %15 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !5804
  %referenced_vars = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %15, i32 0, i32 0, !dbg !5805
  store %struct.htab* null, %struct.htab** %referenced_vars, align 8, !dbg !5806
  call void @fini_ssanames(), !dbg !5807
  call void @fini_phinodes(), !dbg !5808
  %call32 = call zeroext i8 @ssa_operands_active(), !dbg !5809
  %tobool33 = icmp ne i8 %call32, 0, !dbg !5809
  br i1 %tobool33, label %if.then34, label %if.end35, !dbg !5811

if.then34:                                        ; preds = %for.end
  call void @fini_ssa_operands(), !dbg !5812
  br label %if.end35, !dbg !5812

if.end35:                                         ; preds = %if.then34, %for.end
  call void @delete_alias_heapvars(), !dbg !5813
  %16 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5814
  %add.ptr36 = getelementptr inbounds %struct.function, %struct.function* %16, i64 0, !dbg !5814
  %gimple_df37 = getelementptr inbounds %struct.function, %struct.function* %add.ptr36, i32 0, i32 3, !dbg !5815
  %17 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df37, align 8, !dbg !5815
  %default_defs = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %17, i32 0, i32 8, !dbg !5816
  %18 = load %struct.htab*, %struct.htab** %default_defs, align 8, !dbg !5816
  call void @htab_delete(%struct.htab* %18), !dbg !5817
  %19 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5818
  %add.ptr38 = getelementptr inbounds %struct.function, %struct.function* %19, i64 0, !dbg !5818
  %gimple_df39 = getelementptr inbounds %struct.function, %struct.function* %add.ptr38, i32 0, i32 3, !dbg !5819
  %20 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df39, align 8, !dbg !5819
  %default_defs40 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %20, i32 0, i32 8, !dbg !5820
  store %struct.htab* null, %struct.htab** %default_defs40, align 8, !dbg !5821
  %21 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5822
  %add.ptr41 = getelementptr inbounds %struct.function, %struct.function* %21, i64 0, !dbg !5822
  %gimple_df42 = getelementptr inbounds %struct.function, %struct.function* %add.ptr41, i32 0, i32 3, !dbg !5823
  %22 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df42, align 8, !dbg !5823
  %escaped = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %22, i32 0, i32 4, !dbg !5824
  call void @pt_solution_reset(%struct.pt_solution* %escaped), !dbg !5825
  %23 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5826
  %add.ptr43 = getelementptr inbounds %struct.function, %struct.function* %23, i64 0, !dbg !5826
  %gimple_df44 = getelementptr inbounds %struct.function, %struct.function* %add.ptr43, i32 0, i32 3, !dbg !5827
  %24 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df44, align 8, !dbg !5827
  %callused = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %24, i32 0, i32 5, !dbg !5828
  call void @pt_solution_reset(%struct.pt_solution* %callused), !dbg !5829
  %25 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5830
  %add.ptr45 = getelementptr inbounds %struct.function, %struct.function* %25, i64 0, !dbg !5830
  %gimple_df46 = getelementptr inbounds %struct.function, %struct.function* %add.ptr45, i32 0, i32 3, !dbg !5832
  %26 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df46, align 8, !dbg !5832
  %decls_to_pointers = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %26, i32 0, i32 6, !dbg !5833
  %27 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decls_to_pointers, align 8, !dbg !5833
  %cmp47 = icmp ne %struct.pointer_map_t* %27, null, !dbg !5834
  br i1 %cmp47, label %if.then48, label %if.end52, !dbg !5835

if.then48:                                        ; preds = %if.end35
  %28 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5836
  %add.ptr49 = getelementptr inbounds %struct.function, %struct.function* %28, i64 0, !dbg !5836
  %gimple_df50 = getelementptr inbounds %struct.function, %struct.function* %add.ptr49, i32 0, i32 3, !dbg !5837
  %29 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df50, align 8, !dbg !5837
  %decls_to_pointers51 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %29, i32 0, i32 6, !dbg !5838
  %30 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decls_to_pointers51, align 8, !dbg !5838
  call void @pointer_map_destroy(%struct.pointer_map_t* %30), !dbg !5839
  br label %if.end52, !dbg !5839

if.end52:                                         ; preds = %if.then48, %if.end35
  %31 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5840
  %add.ptr53 = getelementptr inbounds %struct.function, %struct.function* %31, i64 0, !dbg !5840
  %gimple_df54 = getelementptr inbounds %struct.function, %struct.function* %add.ptr53, i32 0, i32 3, !dbg !5841
  %32 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df54, align 8, !dbg !5841
  %decls_to_pointers55 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %32, i32 0, i32 6, !dbg !5842
  store %struct.pointer_map_t* null, %struct.pointer_map_t** %decls_to_pointers55, align 8, !dbg !5843
  %33 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5844
  %add.ptr56 = getelementptr inbounds %struct.function, %struct.function* %33, i64 0, !dbg !5844
  %gimple_df57 = getelementptr inbounds %struct.function, %struct.function* %add.ptr56, i32 0, i32 3, !dbg !5845
  %34 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df57, align 8, !dbg !5845
  %modified_noreturn_calls = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %34, i32 0, i32 1, !dbg !5846
  store %struct.VEC_gimple_gc* null, %struct.VEC_gimple_gc** %modified_noreturn_calls, align 8, !dbg !5847
  %35 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5848
  %add.ptr58 = getelementptr inbounds %struct.function, %struct.function* %35, i64 0, !dbg !5848
  %gimple_df59 = getelementptr inbounds %struct.function, %struct.function* %add.ptr58, i32 0, i32 3, !dbg !5849
  store %struct.gimple_df* null, %struct.gimple_df** %gimple_df59, align 8, !dbg !5850
  call void @redirect_edge_var_map_destroy(), !dbg !5851
  ret void, !dbg !5852
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @first_referenced_var(%struct.referenced_var_iterator* %iter) #0 !dbg !5853 {
entry:
  %iter.addr = alloca %struct.referenced_var_iterator*, align 8
  store %struct.referenced_var_iterator* %iter, %struct.referenced_var_iterator** %iter.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.referenced_var_iterator** %iter.addr, metadata !5857, metadata !DIExpression()), !dbg !5858
  %0 = load %struct.referenced_var_iterator*, %struct.referenced_var_iterator** %iter.addr, align 8, !dbg !5859
  %hti = getelementptr inbounds %struct.referenced_var_iterator, %struct.referenced_var_iterator* %0, i32 0, i32 0, !dbg !5860
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5861
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !5861
  %call = call %struct.htab* @gimple_referenced_vars(%struct.function* %add.ptr), !dbg !5862
  %call1 = call i8* @first_htab_element(%struct.htab_iterator* %hti, %struct.htab* %call), !dbg !5863
  %2 = bitcast i8* %call1 to %union.tree_node*, !dbg !5864
  ret %union.tree_node* %2, !dbg !5865
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @end_referenced_vars_p(%struct.referenced_var_iterator* %iter) #0 !dbg !5866 {
entry:
  %iter.addr = alloca %struct.referenced_var_iterator*, align 8
  store %struct.referenced_var_iterator* %iter, %struct.referenced_var_iterator** %iter.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.referenced_var_iterator** %iter.addr, metadata !5871, metadata !DIExpression()), !dbg !5872
  %0 = load %struct.referenced_var_iterator*, %struct.referenced_var_iterator** %iter.addr, align 8, !dbg !5873
  %hti = getelementptr inbounds %struct.referenced_var_iterator, %struct.referenced_var_iterator* %0, i32 0, i32 0, !dbg !5874
  %call = call zeroext i8 @end_htab_p(%struct.htab_iterator* %hti), !dbg !5875
  ret i8 %call, !dbg !5876
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_global_var(%union.tree_node* %t) #0 !dbg !5877 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !5880, metadata !DIExpression()), !dbg !5881
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5882
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !5882
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !5882
  %bf.load = load i64, i64* %1, align 8, !dbg !5882
  %bf.lshr = lshr i64 %bf.load, 26, !dbg !5882
  %bf.clear = and i64 %bf.lshr, 1, !dbg !5882
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5882
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !5882
  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !5883

lor.rhs:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5884
  %decl_common = bitcast %union.tree_node* %2 to %struct.tree_decl_common*, !dbg !5884
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !5884
  %3 = bitcast i40* %decl_flag_1 to i64*, !dbg !5884
  %bf.load1 = load i64, i64* %3, align 8, !dbg !5884
  %bf.lshr2 = lshr i64 %bf.load1, 25, !dbg !5884
  %bf.clear3 = and i64 %bf.lshr2, 1, !dbg !5884
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !5884
  %tobool5 = icmp ne i32 %bf.cast4, 0, !dbg !5883
  br label %lor.end, !dbg !5883

lor.end:                                          ; preds = %lor.rhs, %entry
  %4 = phi i1 [ true, %entry ], [ %tobool5, %lor.rhs ]
  %lor.ext = zext i1 %4 to i32, !dbg !5883
  %conv = trunc i32 %lor.ext to i8, !dbg !5885
  ret i8 %conv, !dbg !5886
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.var_ann_d* @var_ann(%union.tree_node* %t) #0 !dbg !5887 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  %p = alloca %struct.var_ann_d**, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !5891, metadata !DIExpression()), !dbg !5892
  call void @llvm.dbg.declare(metadata %struct.var_ann_d*** %p, metadata !5893, metadata !DIExpression()), !dbg !5896
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5897
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !5897
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !5897
  %bf.load = load i64, i64* %1, align 8, !dbg !5897
  %bf.clear = and i64 %bf.load, 65535, !dbg !5897
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5897
  %cmp = icmp eq i32 %bf.cast, 32, !dbg !5897
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !5897

cond.true:                                        ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5897
  %var_decl = bitcast %union.tree_node* %2 to %struct.tree_var_decl*, !dbg !5897
  %ann = getelementptr inbounds %struct.tree_var_decl, %struct.tree_var_decl* %var_decl, i32 0, i32 1, !dbg !5897
  br label %cond.end19, !dbg !5897

cond.false:                                       ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5897
  %base1 = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !5897
  %4 = bitcast %struct.tree_base* %base1 to i64*, !dbg !5897
  %bf.load2 = load i64, i64* %4, align 8, !dbg !5897
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !5897
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !5897
  %cmp5 = icmp eq i32 %bf.cast4, 34, !dbg !5897
  br i1 %cmp5, label %cond.true6, label %cond.false8, !dbg !5897

cond.true6:                                       ; preds = %cond.false
  %5 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5897
  %parm_decl = bitcast %union.tree_node* %5 to %struct.tree_parm_decl*, !dbg !5897
  %ann7 = getelementptr inbounds %struct.tree_parm_decl, %struct.tree_parm_decl* %parm_decl, i32 0, i32 2, !dbg !5897
  br label %cond.end17, !dbg !5897

cond.false8:                                      ; preds = %cond.false
  %6 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5897
  %base9 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !5897
  %7 = bitcast %struct.tree_base* %base9 to i64*, !dbg !5897
  %bf.load10 = load i64, i64* %7, align 8, !dbg !5897
  %bf.clear11 = and i64 %bf.load10, 65535, !dbg !5897
  %bf.cast12 = trunc i64 %bf.clear11 to i32, !dbg !5897
  %cmp13 = icmp eq i32 %bf.cast12, 36, !dbg !5897
  br i1 %cmp13, label %cond.true14, label %cond.false16, !dbg !5897

cond.true14:                                      ; preds = %cond.false8
  %8 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5897
  %result_decl = bitcast %union.tree_node* %8 to %struct.tree_result_decl*, !dbg !5897
  %ann15 = getelementptr inbounds %struct.tree_result_decl, %struct.tree_result_decl* %result_decl, i32 0, i32 1, !dbg !5897
  br label %cond.end, !dbg !5897

cond.false16:                                     ; preds = %cond.false8
  br label %cond.end, !dbg !5897

cond.end:                                         ; preds = %cond.false16, %cond.true14
  %cond = phi %struct.var_ann_d** [ %ann15, %cond.true14 ], [ null, %cond.false16 ], !dbg !5897
  br label %cond.end17, !dbg !5897

cond.end17:                                       ; preds = %cond.end, %cond.true6
  %cond18 = phi %struct.var_ann_d** [ %ann7, %cond.true6 ], [ %cond, %cond.end ], !dbg !5897
  br label %cond.end19, !dbg !5897

cond.end19:                                       ; preds = %cond.end17, %cond.true
  %cond20 = phi %struct.var_ann_d** [ %ann, %cond.true ], [ %cond18, %cond.end17 ], !dbg !5897
  store %struct.var_ann_d** %cond20, %struct.var_ann_d*** %p, align 8, !dbg !5896
  %9 = load %struct.var_ann_d**, %struct.var_ann_d*** %p, align 8, !dbg !5898
  %tobool = icmp ne %struct.var_ann_d** %9, null, !dbg !5898
  br i1 %tobool, label %cond.true21, label %cond.false22, !dbg !5898

cond.true21:                                      ; preds = %cond.end19
  %10 = load %struct.var_ann_d**, %struct.var_ann_d*** %p, align 8, !dbg !5899
  %11 = load %struct.var_ann_d*, %struct.var_ann_d** %10, align 8, !dbg !5900
  br label %cond.end23, !dbg !5898

cond.false22:                                     ; preds = %cond.end19
  br label %cond.end23, !dbg !5898

cond.end23:                                       ; preds = %cond.false22, %cond.true21
  %cond24 = phi %struct.var_ann_d* [ %11, %cond.true21 ], [ null, %cond.false22 ], !dbg !5898
  ret %struct.var_ann_d* %cond24, !dbg !5901
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @next_referenced_var(%struct.referenced_var_iterator* %iter) #0 !dbg !5902 {
entry:
  %iter.addr = alloca %struct.referenced_var_iterator*, align 8
  store %struct.referenced_var_iterator* %iter, %struct.referenced_var_iterator** %iter.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.referenced_var_iterator** %iter.addr, metadata !5903, metadata !DIExpression()), !dbg !5904
  %0 = load %struct.referenced_var_iterator*, %struct.referenced_var_iterator** %iter.addr, align 8, !dbg !5905
  %hti = getelementptr inbounds %struct.referenced_var_iterator, %struct.referenced_var_iterator* %0, i32 0, i32 0, !dbg !5906
  %call = call i8* @next_htab_element(%struct.htab_iterator* %hti), !dbg !5907
  %1 = bitcast i8* %call to %union.tree_node*, !dbg !5908
  ret %union.tree_node* %1, !dbg !5909
}

declare dso_local void @htab_delete(%struct.htab*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.htab* @gimple_referenced_vars(%struct.function* %fun) #0 !dbg !5910 {
entry:
  %retval = alloca %struct.htab*, align 8
  %fun.addr = alloca %struct.function*, align 8
  store %struct.function* %fun, %struct.function** %fun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fun.addr, metadata !5915, metadata !DIExpression()), !dbg !5916
  %0 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !5917
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 3, !dbg !5919
  %1 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !5919
  %tobool = icmp ne %struct.gimple_df* %1, null, !dbg !5917
  br i1 %tobool, label %if.end, label %if.then, !dbg !5920

if.then:                                          ; preds = %entry
  store %struct.htab* null, %struct.htab** %retval, align 8, !dbg !5921
  br label %return, !dbg !5921

if.end:                                           ; preds = %entry
  %2 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !5922
  %gimple_df1 = getelementptr inbounds %struct.function, %struct.function* %2, i32 0, i32 3, !dbg !5923
  %3 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df1, align 8, !dbg !5923
  %referenced_vars = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %3, i32 0, i32 0, !dbg !5924
  %4 = load %struct.htab*, %struct.htab** %referenced_vars, align 8, !dbg !5924
  store %struct.htab* %4, %struct.htab** %retval, align 8, !dbg !5925
  br label %return, !dbg !5925

return:                                           ; preds = %if.end, %if.then
  %5 = load %struct.htab*, %struct.htab** %retval, align 8, !dbg !5926
  ret %struct.htab* %5, !dbg !5926
}

declare dso_local void @fini_ssanames() #2

declare dso_local void @fini_phinodes() #2

declare dso_local zeroext i8 @ssa_operands_active() #2

declare dso_local void @fini_ssa_operands() #2

declare dso_local void @delete_alias_heapvars() #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @useless_type_conversion_p(%union.tree_node* %outer_type, %union.tree_node* %inner_type) #0 !dbg !5927 {
entry:
  %retval = alloca i8, align 1
  %outer_type.addr = alloca %union.tree_node*, align 8
  %inner_type.addr = alloca %union.tree_node*, align 8
  %inner_min = alloca %union.tree_node*, align 8
  %outer_min = alloca %union.tree_node*, align 8
  %inner_max = alloca %union.tree_node*, align 8
  %outer_max = alloca %union.tree_node*, align 8
  %outer_parm = alloca %union.tree_node*, align 8
  %inner_parm = alloca %union.tree_node*, align 8
  store %union.tree_node* %outer_type, %union.tree_node** %outer_type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %outer_type.addr, metadata !5930, metadata !DIExpression()), !dbg !5931
  store %union.tree_node* %inner_type, %union.tree_node** %inner_type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %inner_type.addr, metadata !5932, metadata !DIExpression()), !dbg !5933
  %0 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !5934
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !5934
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !5934
  %bf.load = load i64, i64* %1, align 8, !dbg !5934
  %bf.clear = and i64 %bf.load, 65535, !dbg !5934
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5934
  %cmp = icmp eq i32 %bf.cast, 10, !dbg !5934
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !5934

lor.lhs.false:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !5934
  %base1 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !5934
  %3 = bitcast %struct.tree_base* %base1 to i64*, !dbg !5934
  %bf.load2 = load i64, i64* %3, align 8, !dbg !5934
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !5934
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !5934
  %cmp5 = icmp eq i32 %bf.cast4, 12, !dbg !5934
  br i1 %cmp5, label %land.lhs.true, label %if.end101, !dbg !5936

land.lhs.true:                                    ; preds = %lor.lhs.false, %entry
  %4 = load %union.tree_node*, %union.tree_node** %outer_type.addr, align 8, !dbg !5937
  %base6 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !5937
  %5 = bitcast %struct.tree_base* %base6 to i64*, !dbg !5937
  %bf.load7 = load i64, i64* %5, align 8, !dbg !5937
  %bf.clear8 = and i64 %bf.load7, 65535, !dbg !5937
  %bf.cast9 = trunc i64 %bf.clear8 to i32, !dbg !5937
  %cmp10 = icmp eq i32 %bf.cast9, 10, !dbg !5937
  br i1 %cmp10, label %if.then, label %lor.lhs.false11, !dbg !5937

lor.lhs.false11:                                  ; preds = %land.lhs.true
  %6 = load %union.tree_node*, %union.tree_node** %outer_type.addr, align 8, !dbg !5937
  %base12 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !5937
  %7 = bitcast %struct.tree_base* %base12 to i64*, !dbg !5937
  %bf.load13 = load i64, i64* %7, align 8, !dbg !5937
  %bf.clear14 = and i64 %bf.load13, 65535, !dbg !5937
  %bf.cast15 = trunc i64 %bf.clear14 to i32, !dbg !5937
  %cmp16 = icmp eq i32 %bf.cast15, 12, !dbg !5937
  br i1 %cmp16, label %if.then, label %if.end101, !dbg !5938

if.then:                                          ; preds = %lor.lhs.false11, %land.lhs.true
  %8 = load %union.tree_node*, %union.tree_node** %outer_type.addr, align 8, !dbg !5939
  %common = bitcast %union.tree_node* %8 to %struct.tree_common*, !dbg !5939
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5939
  %9 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5939
  %base17 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !5939
  %10 = bitcast %struct.tree_base* %base17 to i64*, !dbg !5939
  %bf.load18 = load i64, i64* %10, align 8, !dbg !5939
  %bf.lshr = lshr i64 %bf.load18, 56, !dbg !5939
  %bf.cast19 = trunc i64 %bf.lshr to i32, !dbg !5939
  %11 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !5942
  %common20 = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !5942
  %type21 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common20, i32 0, i32 2, !dbg !5942
  %12 = load %union.tree_node*, %union.tree_node** %type21, align 8, !dbg !5942
  %base22 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !5942
  %13 = bitcast %struct.tree_base* %base22 to i64*, !dbg !5942
  %bf.load23 = load i64, i64* %13, align 8, !dbg !5942
  %bf.lshr24 = lshr i64 %bf.load23, 56, !dbg !5942
  %bf.cast25 = trunc i64 %bf.lshr24 to i32, !dbg !5942
  %cmp26 = icmp ne i32 %bf.cast19, %bf.cast25, !dbg !5943
  br i1 %cmp26, label %if.then27, label %if.end, !dbg !5944

if.then27:                                        ; preds = %if.then
  store i8 0, i8* %retval, align 1, !dbg !5945
  br label %return, !dbg !5945

if.end:                                           ; preds = %if.then
  %14 = load %union.tree_node*, %union.tree_node** %outer_type.addr, align 8, !dbg !5946
  %common28 = bitcast %union.tree_node* %14 to %struct.tree_common*, !dbg !5946
  %type29 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common28, i32 0, i32 2, !dbg !5946
  %15 = load %union.tree_node*, %union.tree_node** %type29, align 8, !dbg !5946
  %base30 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !5946
  %16 = bitcast %struct.tree_base* %base30 to i64*, !dbg !5946
  %bf.load31 = load i64, i64* %16, align 8, !dbg !5946
  %bf.clear32 = and i64 %bf.load31, 65535, !dbg !5946
  %bf.cast33 = trunc i64 %bf.clear32 to i32, !dbg !5946
  %cmp34 = icmp eq i32 %bf.cast33, 19, !dbg !5946
  br i1 %cmp34, label %if.then79, label %lor.lhs.false35, !dbg !5948

lor.lhs.false35:                                  ; preds = %if.end
  %17 = load %union.tree_node*, %union.tree_node** %outer_type.addr, align 8, !dbg !5949
  %common36 = bitcast %union.tree_node* %17 to %struct.tree_common*, !dbg !5949
  %type37 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common36, i32 0, i32 2, !dbg !5949
  %18 = load %union.tree_node*, %union.tree_node** %type37, align 8, !dbg !5949
  %base38 = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !5949
  %19 = bitcast %struct.tree_base* %base38 to i64*, !dbg !5949
  %bf.load39 = load i64, i64* %19, align 8, !dbg !5949
  %bf.clear40 = and i64 %bf.load39, 65535, !dbg !5949
  %bf.cast41 = trunc i64 %bf.clear40 to i32, !dbg !5949
  %cmp42 = icmp eq i32 %bf.cast41, 20, !dbg !5950
  br i1 %cmp42, label %land.lhs.true51, label %lor.lhs.false43, !dbg !5951

lor.lhs.false43:                                  ; preds = %lor.lhs.false35
  %20 = load %union.tree_node*, %union.tree_node** %outer_type.addr, align 8, !dbg !5952
  %common44 = bitcast %union.tree_node* %20 to %struct.tree_common*, !dbg !5952
  %type45 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common44, i32 0, i32 2, !dbg !5952
  %21 = load %union.tree_node*, %union.tree_node** %type45, align 8, !dbg !5952
  %base46 = bitcast %union.tree_node* %21 to %struct.tree_base*, !dbg !5952
  %22 = bitcast %struct.tree_base* %base46 to i64*, !dbg !5952
  %bf.load47 = load i64, i64* %22, align 8, !dbg !5952
  %bf.clear48 = and i64 %bf.load47, 65535, !dbg !5952
  %bf.cast49 = trunc i64 %bf.clear48 to i32, !dbg !5952
  %cmp50 = icmp eq i32 %bf.cast49, 21, !dbg !5953
  br i1 %cmp50, label %land.lhs.true51, label %if.end80, !dbg !5954

land.lhs.true51:                                  ; preds = %lor.lhs.false43, %lor.lhs.false35
  %23 = load %union.tree_node*, %union.tree_node** %outer_type.addr, align 8, !dbg !5955
  %common52 = bitcast %union.tree_node* %23 to %struct.tree_common*, !dbg !5955
  %type53 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common52, i32 0, i32 2, !dbg !5955
  %24 = load %union.tree_node*, %union.tree_node** %type53, align 8, !dbg !5955
  %base54 = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !5955
  %25 = bitcast %struct.tree_base* %base54 to i64*, !dbg !5955
  %bf.load55 = load i64, i64* %25, align 8, !dbg !5955
  %bf.clear56 = and i64 %bf.load55, 65535, !dbg !5955
  %bf.cast57 = trunc i64 %bf.clear56 to i32, !dbg !5955
  %26 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !5956
  %common58 = bitcast %union.tree_node* %26 to %struct.tree_common*, !dbg !5956
  %type59 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common58, i32 0, i32 2, !dbg !5956
  %27 = load %union.tree_node*, %union.tree_node** %type59, align 8, !dbg !5956
  %base60 = bitcast %union.tree_node* %27 to %struct.tree_base*, !dbg !5956
  %28 = bitcast %struct.tree_base* %base60 to i64*, !dbg !5956
  %bf.load61 = load i64, i64* %28, align 8, !dbg !5956
  %bf.clear62 = and i64 %bf.load61, 65535, !dbg !5956
  %bf.cast63 = trunc i64 %bf.clear62 to i32, !dbg !5956
  %cmp64 = icmp eq i32 %bf.cast57, %bf.cast63, !dbg !5957
  br i1 %cmp64, label %land.lhs.true65, label %if.end80, !dbg !5958

land.lhs.true65:                                  ; preds = %land.lhs.true51
  %29 = load %union.tree_node*, %union.tree_node** %outer_type.addr, align 8, !dbg !5959
  %common66 = bitcast %union.tree_node* %29 to %struct.tree_common*, !dbg !5959
  %type67 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common66, i32 0, i32 2, !dbg !5959
  %30 = load %union.tree_node*, %union.tree_node** %type67, align 8, !dbg !5959
  %type68 = bitcast %union.tree_node* %30 to %struct.tree_type*, !dbg !5959
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type68, i32 0, i32 1, !dbg !5959
  %31 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !5959
  %tobool = icmp ne %union.tree_node* %31, null, !dbg !5959
  br i1 %tobool, label %if.end80, label %land.lhs.true69, !dbg !5960

land.lhs.true69:                                  ; preds = %land.lhs.true65
  %32 = load %union.tree_node*, %union.tree_node** %outer_type.addr, align 8, !dbg !5961
  %common70 = bitcast %union.tree_node* %32 to %struct.tree_common*, !dbg !5961
  %type71 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common70, i32 0, i32 2, !dbg !5961
  %33 = load %union.tree_node*, %union.tree_node** %type71, align 8, !dbg !5961
  %common72 = bitcast %union.tree_node* %33 to %struct.tree_common*, !dbg !5961
  %type73 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common72, i32 0, i32 2, !dbg !5961
  %34 = load %union.tree_node*, %union.tree_node** %type73, align 8, !dbg !5961
  %35 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !5962
  %common74 = bitcast %union.tree_node* %35 to %struct.tree_common*, !dbg !5962
  %type75 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common74, i32 0, i32 2, !dbg !5962
  %36 = load %union.tree_node*, %union.tree_node** %type75, align 8, !dbg !5962
  %common76 = bitcast %union.tree_node* %36 to %struct.tree_common*, !dbg !5962
  %type77 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common76, i32 0, i32 2, !dbg !5962
  %37 = load %union.tree_node*, %union.tree_node** %type77, align 8, !dbg !5962
  %call = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %34, %union.tree_node* %37), !dbg !5963
  %conv = zext i8 %call to i32, !dbg !5963
  %tobool78 = icmp ne i32 %conv, 0, !dbg !5963
  br i1 %tobool78, label %if.then79, label %if.end80, !dbg !5964

if.then79:                                        ; preds = %land.lhs.true69, %if.end
  store i8 1, i8* %retval, align 1, !dbg !5965
  br label %return, !dbg !5965

if.end80:                                         ; preds = %land.lhs.true69, %land.lhs.true65, %land.lhs.true51, %lor.lhs.false43
  %38 = load %union.tree_node*, %union.tree_node** %outer_type.addr, align 8, !dbg !5966
  %type81 = bitcast %union.tree_node* %38 to %struct.tree_type*, !dbg !5966
  %restrict_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type81, i32 0, i32 6, !dbg !5966
  %bf.load82 = load i32, i32* %restrict_flag, align 4, !dbg !5966
  %bf.lshr83 = lshr i32 %bf.load82, 13, !dbg !5966
  %bf.clear84 = and i32 %bf.lshr83, 1, !dbg !5966
  %39 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !5968
  %type85 = bitcast %union.tree_node* %39 to %struct.tree_type*, !dbg !5968
  %restrict_flag86 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type85, i32 0, i32 6, !dbg !5968
  %bf.load87 = load i32, i32* %restrict_flag86, align 4, !dbg !5968
  %bf.lshr88 = lshr i32 %bf.load87, 13, !dbg !5968
  %bf.clear89 = and i32 %bf.lshr88, 1, !dbg !5968
  %cmp90 = icmp ne i32 %bf.clear84, %bf.clear89, !dbg !5969
  br i1 %cmp90, label %land.lhs.true92, label %if.end100, !dbg !5970

land.lhs.true92:                                  ; preds = %if.end80
  %40 = load %union.tree_node*, %union.tree_node** %outer_type.addr, align 8, !dbg !5971
  %type93 = bitcast %union.tree_node* %40 to %struct.tree_type*, !dbg !5971
  %restrict_flag94 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type93, i32 0, i32 6, !dbg !5971
  %bf.load95 = load i32, i32* %restrict_flag94, align 4, !dbg !5971
  %bf.lshr96 = lshr i32 %bf.load95, 13, !dbg !5971
  %bf.clear97 = and i32 %bf.lshr96, 1, !dbg !5971
  %tobool98 = icmp ne i32 %bf.clear97, 0, !dbg !5971
  br i1 %tobool98, label %if.then99, label %if.end100, !dbg !5972

if.then99:                                        ; preds = %land.lhs.true92
  store i8 0, i8* %retval, align 1, !dbg !5973
  br label %return, !dbg !5973

if.end100:                                        ; preds = %land.lhs.true92, %if.end80
  br label %if.end101, !dbg !5974

if.end101:                                        ; preds = %if.end100, %lor.lhs.false11, %lor.lhs.false
  %41 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !5975
  %type102 = bitcast %union.tree_node* %41 to %struct.tree_type*, !dbg !5975
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type102, i32 0, i32 16, !dbg !5975
  %42 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !5975
  store %union.tree_node* %42, %union.tree_node** %inner_type.addr, align 8, !dbg !5976
  %43 = load %union.tree_node*, %union.tree_node** %outer_type.addr, align 8, !dbg !5977
  %type103 = bitcast %union.tree_node* %43 to %struct.tree_type*, !dbg !5977
  %main_variant104 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type103, i32 0, i32 16, !dbg !5977
  %44 = load %union.tree_node*, %union.tree_node** %main_variant104, align 8, !dbg !5977
  store %union.tree_node* %44, %union.tree_node** %outer_type.addr, align 8, !dbg !5978
  %45 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !5979
  %46 = load %union.tree_node*, %union.tree_node** %outer_type.addr, align 8, !dbg !5981
  %cmp105 = icmp eq %union.tree_node* %45, %46, !dbg !5982
  br i1 %cmp105, label %if.then107, label %if.end108, !dbg !5983

if.then107:                                       ; preds = %if.end101
  store i8 1, i8* %retval, align 1, !dbg !5984
  br label %return, !dbg !5984

if.end108:                                        ; preds = %if.end101
  %47 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !5985
  %type109 = bitcast %union.tree_node* %47 to %struct.tree_type*, !dbg !5985
  %canonical = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type109, i32 0, i32 19, !dbg !5985
  %48 = load %union.tree_node*, %union.tree_node** %canonical, align 8, !dbg !5985
  %tobool110 = icmp ne %union.tree_node* %48, null, !dbg !5985
  br i1 %tobool110, label %land.lhs.true111, label %if.end119, !dbg !5987

land.lhs.true111:                                 ; preds = %if.end108
  %49 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !5988
  %type112 = bitcast %union.tree_node* %49 to %struct.tree_type*, !dbg !5988
  %canonical113 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type112, i32 0, i32 19, !dbg !5988
  %50 = load %union.tree_node*, %union.tree_node** %canonical113, align 8, !dbg !5988
  %51 = load %union.tree_node*, %union.tree_node** %outer_type.addr, align 8, !dbg !5989
  %type114 = bitcast %union.tree_node* %51 to %struct.tree_type*, !dbg !5989
  %canonical115 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type114, i32 0, i32 19, !dbg !5989
  %52 = load %union.tree_node*, %union.tree_node** %canonical115, align 8, !dbg !5989
  %cmp116 = icmp eq %union.tree_node* %50, %52, !dbg !5990
  br i1 %cmp116, label %if.then118, label %if.end119, !dbg !5991

if.then118:                                       ; preds = %land.lhs.true111
  store i8 1, i8* %retval, align 1, !dbg !5992
  br label %return, !dbg !5992

if.end119:                                        ; preds = %land.lhs.true111, %if.end108
  %53 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !5993
  %base120 = bitcast %union.tree_node* %53 to %struct.tree_base*, !dbg !5993
  %54 = bitcast %struct.tree_base* %base120 to i64*, !dbg !5993
  %bf.load121 = load i64, i64* %54, align 8, !dbg !5993
  %bf.clear122 = and i64 %bf.load121, 65535, !dbg !5993
  %bf.cast123 = trunc i64 %bf.clear122 to i32, !dbg !5993
  %cmp124 = icmp eq i32 %bf.cast123, 14, !dbg !5993
  br i1 %cmp124, label %cond.true, label %cond.false, !dbg !5993

cond.true:                                        ; preds = %if.end119
  %55 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !5993
  %call126 = call i32 @vector_type_mode(%union.tree_node* %55), !dbg !5993
  br label %cond.end, !dbg !5993

cond.false:                                       ; preds = %if.end119
  %56 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !5993
  %type127 = bitcast %union.tree_node* %56 to %struct.tree_type*, !dbg !5993
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type127, i32 0, i32 6, !dbg !5993
  %bf.load128 = load i32, i32* %mode, align 4, !dbg !5993
  %bf.lshr129 = lshr i32 %bf.load128, 16, !dbg !5993
  %bf.clear130 = and i32 %bf.lshr129, 255, !dbg !5993
  br label %cond.end, !dbg !5993

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call126, %cond.true ], [ %bf.clear130, %cond.false ], !dbg !5993
  %57 = load %union.tree_node*, %union.tree_node** %outer_type.addr, align 8, !dbg !5995
  %base131 = bitcast %union.tree_node* %57 to %struct.tree_base*, !dbg !5995
  %58 = bitcast %struct.tree_base* %base131 to i64*, !dbg !5995
  %bf.load132 = load i64, i64* %58, align 8, !dbg !5995
  %bf.clear133 = and i64 %bf.load132, 65535, !dbg !5995
  %bf.cast134 = trunc i64 %bf.clear133 to i32, !dbg !5995
  %cmp135 = icmp eq i32 %bf.cast134, 14, !dbg !5995
  br i1 %cmp135, label %cond.true137, label %cond.false139, !dbg !5995

cond.true137:                                     ; preds = %cond.end
  %59 = load %union.tree_node*, %union.tree_node** %outer_type.addr, align 8, !dbg !5995
  %call138 = call i32 @vector_type_mode(%union.tree_node* %59), !dbg !5995
  br label %cond.end145, !dbg !5995

cond.false139:                                    ; preds = %cond.end
  %60 = load %union.tree_node*, %union.tree_node** %outer_type.addr, align 8, !dbg !5995
  %type140 = bitcast %union.tree_node* %60 to %struct.tree_type*, !dbg !5995
  %mode141 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type140, i32 0, i32 6, !dbg !5995
  %bf.load142 = load i32, i32* %mode141, align 4, !dbg !5995
  %bf.lshr143 = lshr i32 %bf.load142, 16, !dbg !5995
  %bf.clear144 = and i32 %bf.lshr143, 255, !dbg !5995
  br label %cond.end145, !dbg !5995

cond.end145:                                      ; preds = %cond.false139, %cond.true137
  %cond146 = phi i32 [ %call138, %cond.true137 ], [ %bf.clear144, %cond.false139 ], !dbg !5995
  %cmp147 = icmp ne i32 %cond, %cond146, !dbg !5996
  br i1 %cmp147, label %land.lhs.true149, label %if.end178, !dbg !5997

land.lhs.true149:                                 ; preds = %cond.end145
  %61 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !5998
  %base150 = bitcast %union.tree_node* %61 to %struct.tree_base*, !dbg !5998
  %62 = bitcast %struct.tree_base* %base150 to i64*, !dbg !5998
  %bf.load151 = load i64, i64* %62, align 8, !dbg !5998
  %bf.clear152 = and i64 %bf.load151, 65535, !dbg !5998
  %bf.cast153 = trunc i64 %bf.clear152 to i32, !dbg !5998
  %cmp154 = icmp eq i32 %bf.cast153, 15, !dbg !5998
  br i1 %cmp154, label %if.end178, label %lor.lhs.false156, !dbg !5998

lor.lhs.false156:                                 ; preds = %land.lhs.true149
  %63 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !5998
  %base157 = bitcast %union.tree_node* %63 to %struct.tree_base*, !dbg !5998
  %64 = bitcast %struct.tree_base* %base157 to i64*, !dbg !5998
  %bf.load158 = load i64, i64* %64, align 8, !dbg !5998
  %bf.clear159 = and i64 %bf.load158, 65535, !dbg !5998
  %bf.cast160 = trunc i64 %bf.clear159 to i32, !dbg !5998
  %cmp161 = icmp eq i32 %bf.cast160, 16, !dbg !5998
  br i1 %cmp161, label %if.end178, label %lor.lhs.false163, !dbg !5998

lor.lhs.false163:                                 ; preds = %lor.lhs.false156
  %65 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !5998
  %base164 = bitcast %union.tree_node* %65 to %struct.tree_base*, !dbg !5998
  %66 = bitcast %struct.tree_base* %base164 to i64*, !dbg !5998
  %bf.load165 = load i64, i64* %66, align 8, !dbg !5998
  %bf.clear166 = and i64 %bf.load165, 65535, !dbg !5998
  %bf.cast167 = trunc i64 %bf.clear166 to i32, !dbg !5998
  %cmp168 = icmp eq i32 %bf.cast167, 17, !dbg !5998
  br i1 %cmp168, label %if.end178, label %lor.lhs.false170, !dbg !5998

lor.lhs.false170:                                 ; preds = %lor.lhs.false163
  %67 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !5998
  %base171 = bitcast %union.tree_node* %67 to %struct.tree_base*, !dbg !5998
  %68 = bitcast %struct.tree_base* %base171 to i64*, !dbg !5998
  %bf.load172 = load i64, i64* %68, align 8, !dbg !5998
  %bf.clear173 = and i64 %bf.load172, 65535, !dbg !5998
  %bf.cast174 = trunc i64 %bf.clear173 to i32, !dbg !5998
  %cmp175 = icmp eq i32 %bf.cast174, 18, !dbg !5998
  br i1 %cmp175, label %if.end178, label %if.then177, !dbg !5999

if.then177:                                       ; preds = %lor.lhs.false170
  store i8 0, i8* %retval, align 1, !dbg !6000
  br label %return, !dbg !6000

if.end178:                                        ; preds = %lor.lhs.false170, %lor.lhs.false163, %lor.lhs.false156, %land.lhs.true149, %cond.end145
  %69 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6001
  %base179 = bitcast %union.tree_node* %69 to %struct.tree_base*, !dbg !6001
  %70 = bitcast %struct.tree_base* %base179 to i64*, !dbg !6001
  %bf.load180 = load i64, i64* %70, align 8, !dbg !6001
  %bf.clear181 = and i64 %bf.load180, 65535, !dbg !6001
  %bf.cast182 = trunc i64 %bf.clear181 to i32, !dbg !6001
  %cmp183 = icmp eq i32 %bf.cast182, 6, !dbg !6001
  br i1 %cmp183, label %land.lhs.true199, label %lor.lhs.false185, !dbg !6001

lor.lhs.false185:                                 ; preds = %if.end178
  %71 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6001
  %base186 = bitcast %union.tree_node* %71 to %struct.tree_base*, !dbg !6001
  %72 = bitcast %struct.tree_base* %base186 to i64*, !dbg !6001
  %bf.load187 = load i64, i64* %72, align 8, !dbg !6001
  %bf.clear188 = and i64 %bf.load187, 65535, !dbg !6001
  %bf.cast189 = trunc i64 %bf.clear188 to i32, !dbg !6001
  %cmp190 = icmp eq i32 %bf.cast189, 7, !dbg !6001
  br i1 %cmp190, label %land.lhs.true199, label %lor.lhs.false192, !dbg !6001

lor.lhs.false192:                                 ; preds = %lor.lhs.false185
  %73 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6001
  %base193 = bitcast %union.tree_node* %73 to %struct.tree_base*, !dbg !6001
  %74 = bitcast %struct.tree_base* %base193 to i64*, !dbg !6001
  %bf.load194 = load i64, i64* %74, align 8, !dbg !6001
  %bf.clear195 = and i64 %bf.load194, 65535, !dbg !6001
  %bf.cast196 = trunc i64 %bf.clear195 to i32, !dbg !6001
  %cmp197 = icmp eq i32 %bf.cast196, 8, !dbg !6001
  br i1 %cmp197, label %land.lhs.true199, label %if.else, !dbg !6003

land.lhs.true199:                                 ; preds = %lor.lhs.false192, %lor.lhs.false185, %if.end178
  %75 = load %union.tree_node*, %union.tree_node** %outer_type.addr, align 8, !dbg !6004
  %base200 = bitcast %union.tree_node* %75 to %struct.tree_base*, !dbg !6004
  %76 = bitcast %struct.tree_base* %base200 to i64*, !dbg !6004
  %bf.load201 = load i64, i64* %76, align 8, !dbg !6004
  %bf.clear202 = and i64 %bf.load201, 65535, !dbg !6004
  %bf.cast203 = trunc i64 %bf.clear202 to i32, !dbg !6004
  %cmp204 = icmp eq i32 %bf.cast203, 6, !dbg !6004
  br i1 %cmp204, label %if.then220, label %lor.lhs.false206, !dbg !6004

lor.lhs.false206:                                 ; preds = %land.lhs.true199
  %77 = load %union.tree_node*, %union.tree_node** %outer_type.addr, align 8, !dbg !6004
  %base207 = bitcast %union.tree_node* %77 to %struct.tree_base*, !dbg !6004
  %78 = bitcast %struct.tree_base* %base207 to i64*, !dbg !6004
  %bf.load208 = load i64, i64* %78, align 8, !dbg !6004
  %bf.clear209 = and i64 %bf.load208, 65535, !dbg !6004
  %bf.cast210 = trunc i64 %bf.clear209 to i32, !dbg !6004
  %cmp211 = icmp eq i32 %bf.cast210, 7, !dbg !6004
  br i1 %cmp211, label %if.then220, label %lor.lhs.false213, !dbg !6004

lor.lhs.false213:                                 ; preds = %lor.lhs.false206
  %79 = load %union.tree_node*, %union.tree_node** %outer_type.addr, align 8, !dbg !6004
  %base214 = bitcast %union.tree_node* %79 to %struct.tree_base*, !dbg !6004
  %80 = bitcast %struct.tree_base* %base214 to i64*, !dbg !6004
  %bf.load215 = load i64, i64* %80, align 8, !dbg !6004
  %bf.clear216 = and i64 %bf.load215, 65535, !dbg !6004
  %bf.cast217 = trunc i64 %bf.clear216 to i32, !dbg !6004
  %cmp218 = icmp eq i32 %bf.cast217, 8, !dbg !6004
  br i1 %cmp218, label %if.then220, label %if.else, !dbg !6005

if.then220:                                       ; preds = %lor.lhs.false213, %lor.lhs.false206, %land.lhs.true199
  %81 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6006
  %base221 = bitcast %union.tree_node* %81 to %struct.tree_base*, !dbg !6006
  %82 = bitcast %struct.tree_base* %base221 to i64*, !dbg !6006
  %bf.load222 = load i64, i64* %82, align 8, !dbg !6006
  %bf.lshr223 = lshr i64 %bf.load222, 21, !dbg !6006
  %bf.clear224 = and i64 %bf.lshr223, 1, !dbg !6006
  %bf.cast225 = trunc i64 %bf.clear224 to i32, !dbg !6006
  %83 = load %union.tree_node*, %union.tree_node** %outer_type.addr, align 8, !dbg !6009
  %base226 = bitcast %union.tree_node* %83 to %struct.tree_base*, !dbg !6009
  %84 = bitcast %struct.tree_base* %base226 to i64*, !dbg !6009
  %bf.load227 = load i64, i64* %84, align 8, !dbg !6009
  %bf.lshr228 = lshr i64 %bf.load227, 21, !dbg !6009
  %bf.clear229 = and i64 %bf.lshr228, 1, !dbg !6009
  %bf.cast230 = trunc i64 %bf.clear229 to i32, !dbg !6009
  %cmp231 = icmp ne i32 %bf.cast225, %bf.cast230, !dbg !6010
  br i1 %cmp231, label %if.then243, label %lor.lhs.false233, !dbg !6011

lor.lhs.false233:                                 ; preds = %if.then220
  %85 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6012
  %type234 = bitcast %union.tree_node* %85 to %struct.tree_type*, !dbg !6012
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type234, i32 0, i32 6, !dbg !6012
  %bf.load235 = load i32, i32* %precision, align 4, !dbg !6012
  %bf.clear236 = and i32 %bf.load235, 1023, !dbg !6012
  %86 = load %union.tree_node*, %union.tree_node** %outer_type.addr, align 8, !dbg !6013
  %type237 = bitcast %union.tree_node* %86 to %struct.tree_type*, !dbg !6013
  %precision238 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type237, i32 0, i32 6, !dbg !6013
  %bf.load239 = load i32, i32* %precision238, align 4, !dbg !6013
  %bf.clear240 = and i32 %bf.load239, 1023, !dbg !6013
  %cmp241 = icmp ne i32 %bf.clear236, %bf.clear240, !dbg !6014
  br i1 %cmp241, label %if.then243, label %if.end244, !dbg !6015

if.then243:                                       ; preds = %lor.lhs.false233, %if.then220
  store i8 0, i8* %retval, align 1, !dbg !6016
  br label %return, !dbg !6016

if.end244:                                        ; preds = %lor.lhs.false233
  store i8 1, i8* %retval, align 1, !dbg !6017
  br label %return, !dbg !6017

if.else:                                          ; preds = %lor.lhs.false213, %lor.lhs.false192
  %87 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6018
  %base245 = bitcast %union.tree_node* %87 to %struct.tree_base*, !dbg !6018
  %88 = bitcast %struct.tree_base* %base245 to i64*, !dbg !6018
  %bf.load246 = load i64, i64* %88, align 8, !dbg !6018
  %bf.clear247 = and i64 %bf.load246, 65535, !dbg !6018
  %bf.cast248 = trunc i64 %bf.clear247 to i32, !dbg !6018
  %cmp249 = icmp eq i32 %bf.cast248, 9, !dbg !6018
  br i1 %cmp249, label %land.lhs.true251, label %if.else259, !dbg !6020

land.lhs.true251:                                 ; preds = %if.else
  %89 = load %union.tree_node*, %union.tree_node** %outer_type.addr, align 8, !dbg !6021
  %base252 = bitcast %union.tree_node* %89 to %struct.tree_base*, !dbg !6021
  %90 = bitcast %struct.tree_base* %base252 to i64*, !dbg !6021
  %bf.load253 = load i64, i64* %90, align 8, !dbg !6021
  %bf.clear254 = and i64 %bf.load253, 65535, !dbg !6021
  %bf.cast255 = trunc i64 %bf.clear254 to i32, !dbg !6021
  %cmp256 = icmp eq i32 %bf.cast255, 9, !dbg !6021
  br i1 %cmp256, label %if.then258, label %if.else259, !dbg !6022

if.then258:                                       ; preds = %land.lhs.true251
  store i8 1, i8* %retval, align 1, !dbg !6023
  br label %return, !dbg !6023

if.else259:                                       ; preds = %land.lhs.true251, %if.else
  %91 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6024
  %base260 = bitcast %union.tree_node* %91 to %struct.tree_base*, !dbg !6024
  %92 = bitcast %struct.tree_base* %base260 to i64*, !dbg !6024
  %bf.load261 = load i64, i64* %92, align 8, !dbg !6024
  %bf.clear262 = and i64 %bf.load261, 65535, !dbg !6024
  %bf.cast263 = trunc i64 %bf.clear262 to i32, !dbg !6024
  %cmp264 = icmp eq i32 %bf.cast263, 11, !dbg !6024
  br i1 %cmp264, label %land.lhs.true266, label %if.else274, !dbg !6026

land.lhs.true266:                                 ; preds = %if.else259
  %93 = load %union.tree_node*, %union.tree_node** %outer_type.addr, align 8, !dbg !6027
  %base267 = bitcast %union.tree_node* %93 to %struct.tree_base*, !dbg !6027
  %94 = bitcast %struct.tree_base* %base267 to i64*, !dbg !6027
  %bf.load268 = load i64, i64* %94, align 8, !dbg !6027
  %bf.clear269 = and i64 %bf.load268, 65535, !dbg !6027
  %bf.cast270 = trunc i64 %bf.clear269 to i32, !dbg !6027
  %cmp271 = icmp eq i32 %bf.cast270, 11, !dbg !6027
  br i1 %cmp271, label %if.then273, label %if.else274, !dbg !6028

if.then273:                                       ; preds = %land.lhs.true266
  store i8 1, i8* %retval, align 1, !dbg !6029
  br label %return, !dbg !6029

if.else274:                                       ; preds = %land.lhs.true266, %if.else259
  %95 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6030
  %base275 = bitcast %union.tree_node* %95 to %struct.tree_base*, !dbg !6030
  %96 = bitcast %struct.tree_base* %base275 to i64*, !dbg !6030
  %bf.load276 = load i64, i64* %96, align 8, !dbg !6030
  %bf.clear277 = and i64 %bf.load276, 65535, !dbg !6030
  %bf.cast278 = trunc i64 %bf.clear277 to i32, !dbg !6030
  %cmp279 = icmp eq i32 %bf.cast278, 10, !dbg !6030
  br i1 %cmp279, label %land.lhs.true288, label %lor.lhs.false281, !dbg !6030

lor.lhs.false281:                                 ; preds = %if.else274
  %97 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6030
  %base282 = bitcast %union.tree_node* %97 to %struct.tree_base*, !dbg !6030
  %98 = bitcast %struct.tree_base* %base282 to i64*, !dbg !6030
  %bf.load283 = load i64, i64* %98, align 8, !dbg !6030
  %bf.clear284 = and i64 %bf.load283, 65535, !dbg !6030
  %bf.cast285 = trunc i64 %bf.clear284 to i32, !dbg !6030
  %cmp286 = icmp eq i32 %bf.cast285, 12, !dbg !6030
  br i1 %cmp286, label %land.lhs.true288, label %if.else391, !dbg !6032

land.lhs.true288:                                 ; preds = %lor.lhs.false281, %if.else274
  %99 = load %union.tree_node*, %union.tree_node** %outer_type.addr, align 8, !dbg !6033
  %base289 = bitcast %union.tree_node* %99 to %struct.tree_base*, !dbg !6033
  %100 = bitcast %struct.tree_base* %base289 to i64*, !dbg !6033
  %bf.load290 = load i64, i64* %100, align 8, !dbg !6033
  %bf.clear291 = and i64 %bf.load290, 65535, !dbg !6033
  %bf.cast292 = trunc i64 %bf.clear291 to i32, !dbg !6033
  %cmp293 = icmp eq i32 %bf.cast292, 10, !dbg !6033
  br i1 %cmp293, label %if.then302, label %lor.lhs.false295, !dbg !6033

lor.lhs.false295:                                 ; preds = %land.lhs.true288
  %101 = load %union.tree_node*, %union.tree_node** %outer_type.addr, align 8, !dbg !6033
  %base296 = bitcast %union.tree_node* %101 to %struct.tree_base*, !dbg !6033
  %102 = bitcast %struct.tree_base* %base296 to i64*, !dbg !6033
  %bf.load297 = load i64, i64* %102, align 8, !dbg !6033
  %bf.clear298 = and i64 %bf.load297, 65535, !dbg !6033
  %bf.cast299 = trunc i64 %bf.clear298 to i32, !dbg !6033
  %cmp300 = icmp eq i32 %bf.cast299, 12, !dbg !6033
  br i1 %cmp300, label %if.then302, label %if.else391, !dbg !6034

if.then302:                                       ; preds = %lor.lhs.false295, %land.lhs.true288
  %103 = load %union.tree_node*, %union.tree_node** %outer_type.addr, align 8, !dbg !6035
  %common303 = bitcast %union.tree_node* %103 to %struct.tree_common*, !dbg !6035
  %type304 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common303, i32 0, i32 2, !dbg !6035
  %104 = load %union.tree_node*, %union.tree_node** %type304, align 8, !dbg !6035
  %base305 = bitcast %union.tree_node* %104 to %struct.tree_base*, !dbg !6035
  %105 = bitcast %struct.tree_base* %base305 to i64*, !dbg !6035
  %bf.load306 = load i64, i64* %105, align 8, !dbg !6035
  %bf.clear307 = and i64 %bf.load306, 65535, !dbg !6035
  %bf.cast308 = trunc i64 %bf.clear307 to i32, !dbg !6035
  %cmp309 = icmp ne i32 %bf.cast308, 20, !dbg !6038
  br i1 %cmp309, label %land.lhs.true311, label %if.end365, !dbg !6039

land.lhs.true311:                                 ; preds = %if.then302
  %106 = load %union.tree_node*, %union.tree_node** %outer_type.addr, align 8, !dbg !6040
  %common312 = bitcast %union.tree_node* %106 to %struct.tree_common*, !dbg !6040
  %type313 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common312, i32 0, i32 2, !dbg !6040
  %107 = load %union.tree_node*, %union.tree_node** %type313, align 8, !dbg !6040
  %base314 = bitcast %union.tree_node* %107 to %struct.tree_base*, !dbg !6040
  %108 = bitcast %struct.tree_base* %base314 to i64*, !dbg !6040
  %bf.load315 = load i64, i64* %108, align 8, !dbg !6040
  %bf.clear316 = and i64 %bf.load315, 65535, !dbg !6040
  %bf.cast317 = trunc i64 %bf.clear316 to i32, !dbg !6040
  %cmp318 = icmp ne i32 %bf.cast317, 21, !dbg !6041
  br i1 %cmp318, label %land.lhs.true320, label %if.end365, !dbg !6042

land.lhs.true320:                                 ; preds = %land.lhs.true311
  %109 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6043
  %common321 = bitcast %union.tree_node* %109 to %struct.tree_common*, !dbg !6043
  %type322 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common321, i32 0, i32 2, !dbg !6043
  %110 = load %union.tree_node*, %union.tree_node** %type322, align 8, !dbg !6043
  %base323 = bitcast %union.tree_node* %110 to %struct.tree_base*, !dbg !6043
  %111 = bitcast %struct.tree_base* %base323 to i64*, !dbg !6043
  %bf.load324 = load i64, i64* %111, align 8, !dbg !6043
  %bf.clear325 = and i64 %bf.load324, 65535, !dbg !6043
  %bf.cast326 = trunc i64 %bf.clear325 to i32, !dbg !6043
  %cmp327 = icmp ne i32 %bf.cast326, 20, !dbg !6044
  br i1 %cmp327, label %land.lhs.true329, label %if.end365, !dbg !6045

land.lhs.true329:                                 ; preds = %land.lhs.true320
  %112 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6046
  %common330 = bitcast %union.tree_node* %112 to %struct.tree_common*, !dbg !6046
  %type331 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common330, i32 0, i32 2, !dbg !6046
  %113 = load %union.tree_node*, %union.tree_node** %type331, align 8, !dbg !6046
  %base332 = bitcast %union.tree_node* %113 to %struct.tree_base*, !dbg !6046
  %114 = bitcast %struct.tree_base* %base332 to i64*, !dbg !6046
  %bf.load333 = load i64, i64* %114, align 8, !dbg !6046
  %bf.clear334 = and i64 %bf.load333, 65535, !dbg !6046
  %bf.cast335 = trunc i64 %bf.clear334 to i32, !dbg !6046
  %cmp336 = icmp ne i32 %bf.cast335, 21, !dbg !6047
  br i1 %cmp336, label %land.lhs.true338, label %if.end365, !dbg !6048

land.lhs.true338:                                 ; preds = %land.lhs.true329
  %115 = load %union.tree_node*, %union.tree_node** %outer_type.addr, align 8, !dbg !6049
  %common339 = bitcast %union.tree_node* %115 to %struct.tree_common*, !dbg !6049
  %type340 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common339, i32 0, i32 2, !dbg !6049
  %116 = load %union.tree_node*, %union.tree_node** %type340, align 8, !dbg !6049
  %base341 = bitcast %union.tree_node* %116 to %struct.tree_base*, !dbg !6049
  %117 = bitcast %struct.tree_base* %base341 to i64*, !dbg !6049
  %bf.load342 = load i64, i64* %117, align 8, !dbg !6049
  %bf.lshr343 = lshr i64 %bf.load342, 19, !dbg !6049
  %bf.clear344 = and i64 %bf.lshr343, 1, !dbg !6049
  %bf.cast345 = trunc i64 %bf.clear344 to i32, !dbg !6049
  %118 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6050
  %common346 = bitcast %union.tree_node* %118 to %struct.tree_common*, !dbg !6050
  %type347 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common346, i32 0, i32 2, !dbg !6050
  %119 = load %union.tree_node*, %union.tree_node** %type347, align 8, !dbg !6050
  %base348 = bitcast %union.tree_node* %119 to %struct.tree_base*, !dbg !6050
  %120 = bitcast %struct.tree_base* %base348 to i64*, !dbg !6050
  %bf.load349 = load i64, i64* %120, align 8, !dbg !6050
  %bf.lshr350 = lshr i64 %bf.load349, 19, !dbg !6050
  %bf.clear351 = and i64 %bf.lshr350, 1, !dbg !6050
  %bf.cast352 = trunc i64 %bf.clear351 to i32, !dbg !6050
  %cmp353 = icmp ne i32 %bf.cast345, %bf.cast352, !dbg !6051
  br i1 %cmp353, label %land.lhs.true355, label %if.end365, !dbg !6052

land.lhs.true355:                                 ; preds = %land.lhs.true338
  %121 = load %union.tree_node*, %union.tree_node** %outer_type.addr, align 8, !dbg !6053
  %common356 = bitcast %union.tree_node* %121 to %struct.tree_common*, !dbg !6053
  %type357 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common356, i32 0, i32 2, !dbg !6053
  %122 = load %union.tree_node*, %union.tree_node** %type357, align 8, !dbg !6053
  %base358 = bitcast %union.tree_node* %122 to %struct.tree_base*, !dbg !6053
  %123 = bitcast %struct.tree_base* %base358 to i64*, !dbg !6053
  %bf.load359 = load i64, i64* %123, align 8, !dbg !6053
  %bf.lshr360 = lshr i64 %bf.load359, 19, !dbg !6053
  %bf.clear361 = and i64 %bf.lshr360, 1, !dbg !6053
  %bf.cast362 = trunc i64 %bf.clear361 to i32, !dbg !6053
  %tobool363 = icmp ne i32 %bf.cast362, 0, !dbg !6053
  br i1 %tobool363, label %if.then364, label %if.end365, !dbg !6054

if.then364:                                       ; preds = %land.lhs.true355
  store i8 0, i8* %retval, align 1, !dbg !6055
  br label %return, !dbg !6055

if.end365:                                        ; preds = %land.lhs.true355, %land.lhs.true338, %land.lhs.true329, %land.lhs.true320, %land.lhs.true311, %if.then302
  %124 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6056
  %common366 = bitcast %union.tree_node* %124 to %struct.tree_common*, !dbg !6056
  %type367 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common366, i32 0, i32 2, !dbg !6056
  %125 = load %union.tree_node*, %union.tree_node** %type367, align 8, !dbg !6056
  %type368 = bitcast %union.tree_node* %125 to %struct.tree_type*, !dbg !6056
  %size = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type368, i32 0, i32 2, !dbg !6056
  %126 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !6056
  %cmp369 = icmp ne %union.tree_node* %126, null, !dbg !6056
  br i1 %cmp369, label %if.end379, label %land.lhs.true371, !dbg !6058

land.lhs.true371:                                 ; preds = %if.end365
  %127 = load %union.tree_node*, %union.tree_node** %outer_type.addr, align 8, !dbg !6059
  %common372 = bitcast %union.tree_node* %127 to %struct.tree_common*, !dbg !6059
  %type373 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common372, i32 0, i32 2, !dbg !6059
  %128 = load %union.tree_node*, %union.tree_node** %type373, align 8, !dbg !6059
  %type374 = bitcast %union.tree_node* %128 to %struct.tree_type*, !dbg !6059
  %size375 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type374, i32 0, i32 2, !dbg !6059
  %129 = load %union.tree_node*, %union.tree_node** %size375, align 8, !dbg !6059
  %cmp376 = icmp ne %union.tree_node* %129, null, !dbg !6059
  br i1 %cmp376, label %if.then378, label %if.end379, !dbg !6060

if.then378:                                       ; preds = %land.lhs.true371
  store i8 0, i8* %retval, align 1, !dbg !6061
  br label %return, !dbg !6061

if.end379:                                        ; preds = %land.lhs.true371, %if.end365
  %130 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6062
  %call380 = call i32 @get_deref_alias_set(%union.tree_node* %130), !dbg !6064
  %131 = load %union.tree_node*, %union.tree_node** %outer_type.addr, align 8, !dbg !6065
  %call381 = call i32 @get_deref_alias_set(%union.tree_node* %131), !dbg !6066
  %cmp382 = icmp ne i32 %call380, %call381, !dbg !6067
  br i1 %cmp382, label %if.then384, label %if.end385, !dbg !6068

if.then384:                                       ; preds = %if.end379
  store i8 0, i8* %retval, align 1, !dbg !6069
  br label %return, !dbg !6069

if.end385:                                        ; preds = %if.end379
  %132 = load %union.tree_node*, %union.tree_node** %outer_type.addr, align 8, !dbg !6070
  %common386 = bitcast %union.tree_node* %132 to %struct.tree_common*, !dbg !6070
  %type387 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common386, i32 0, i32 2, !dbg !6070
  %133 = load %union.tree_node*, %union.tree_node** %type387, align 8, !dbg !6070
  %134 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6071
  %common388 = bitcast %union.tree_node* %134 to %struct.tree_common*, !dbg !6071
  %type389 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common388, i32 0, i32 2, !dbg !6071
  %135 = load %union.tree_node*, %union.tree_node** %type389, align 8, !dbg !6071
  %call390 = call zeroext i8 @types_compatible_p(%union.tree_node* %133, %union.tree_node* %135), !dbg !6072
  store i8 %call390, i8* %retval, align 1, !dbg !6073
  br label %return, !dbg !6073

if.else391:                                       ; preds = %lor.lhs.false295, %lor.lhs.false281
  %136 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6074
  %base392 = bitcast %union.tree_node* %136 to %struct.tree_base*, !dbg !6074
  %137 = bitcast %struct.tree_base* %base392 to i64*, !dbg !6074
  %bf.load393 = load i64, i64* %137, align 8, !dbg !6074
  %bf.clear394 = and i64 %bf.load393, 65535, !dbg !6074
  %bf.cast395 = trunc i64 %bf.clear394 to i32, !dbg !6074
  %cmp396 = icmp eq i32 %bf.cast395, 13, !dbg !6076
  br i1 %cmp396, label %land.lhs.true398, label %if.else411, !dbg !6077

land.lhs.true398:                                 ; preds = %if.else391
  %138 = load %union.tree_node*, %union.tree_node** %outer_type.addr, align 8, !dbg !6078
  %base399 = bitcast %union.tree_node* %138 to %struct.tree_base*, !dbg !6078
  %139 = bitcast %struct.tree_base* %base399 to i64*, !dbg !6078
  %bf.load400 = load i64, i64* %139, align 8, !dbg !6078
  %bf.clear401 = and i64 %bf.load400, 65535, !dbg !6078
  %bf.cast402 = trunc i64 %bf.clear401 to i32, !dbg !6078
  %cmp403 = icmp eq i32 %bf.cast402, 13, !dbg !6079
  br i1 %cmp403, label %if.then405, label %if.else411, !dbg !6080

if.then405:                                       ; preds = %land.lhs.true398
  %140 = load %union.tree_node*, %union.tree_node** %outer_type.addr, align 8, !dbg !6081
  %common406 = bitcast %union.tree_node* %140 to %struct.tree_common*, !dbg !6081
  %type407 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common406, i32 0, i32 2, !dbg !6081
  %141 = load %union.tree_node*, %union.tree_node** %type407, align 8, !dbg !6081
  %142 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6082
  %common408 = bitcast %union.tree_node* %142 to %struct.tree_common*, !dbg !6082
  %type409 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common408, i32 0, i32 2, !dbg !6082
  %143 = load %union.tree_node*, %union.tree_node** %type409, align 8, !dbg !6082
  %call410 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %141, %union.tree_node* %143), !dbg !6083
  store i8 %call410, i8* %retval, align 1, !dbg !6084
  br label %return, !dbg !6084

if.else411:                                       ; preds = %land.lhs.true398, %if.else391
  %144 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6085
  %base412 = bitcast %union.tree_node* %144 to %struct.tree_base*, !dbg !6085
  %145 = bitcast %struct.tree_base* %base412 to i64*, !dbg !6085
  %bf.load413 = load i64, i64* %145, align 8, !dbg !6085
  %bf.clear414 = and i64 %bf.load413, 65535, !dbg !6085
  %bf.cast415 = trunc i64 %bf.clear414 to i32, !dbg !6085
  %cmp416 = icmp eq i32 %bf.cast415, 14, !dbg !6087
  br i1 %cmp416, label %land.lhs.true418, label %if.else442, !dbg !6088

land.lhs.true418:                                 ; preds = %if.else411
  %146 = load %union.tree_node*, %union.tree_node** %outer_type.addr, align 8, !dbg !6089
  %base419 = bitcast %union.tree_node* %146 to %struct.tree_base*, !dbg !6089
  %147 = bitcast %struct.tree_base* %base419 to i64*, !dbg !6089
  %bf.load420 = load i64, i64* %147, align 8, !dbg !6089
  %bf.clear421 = and i64 %bf.load420, 65535, !dbg !6089
  %bf.cast422 = trunc i64 %bf.clear421 to i32, !dbg !6089
  %cmp423 = icmp eq i32 %bf.cast422, 14, !dbg !6090
  br i1 %cmp423, label %land.lhs.true425, label %if.else442, !dbg !6091

land.lhs.true425:                                 ; preds = %land.lhs.true418
  %148 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6092
  %type426 = bitcast %union.tree_node* %148 to %struct.tree_type*, !dbg !6092
  %precision427 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type426, i32 0, i32 6, !dbg !6092
  %bf.load428 = load i32, i32* %precision427, align 4, !dbg !6092
  %bf.clear429 = and i32 %bf.load428, 1023, !dbg !6092
  %149 = load %union.tree_node*, %union.tree_node** %outer_type.addr, align 8, !dbg !6093
  %type430 = bitcast %union.tree_node* %149 to %struct.tree_type*, !dbg !6093
  %precision431 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type430, i32 0, i32 6, !dbg !6093
  %bf.load432 = load i32, i32* %precision431, align 4, !dbg !6093
  %bf.clear433 = and i32 %bf.load432, 1023, !dbg !6093
  %cmp434 = icmp eq i32 %bf.clear429, %bf.clear433, !dbg !6094
  br i1 %cmp434, label %if.then436, label %if.else442, !dbg !6095

if.then436:                                       ; preds = %land.lhs.true425
  %150 = load %union.tree_node*, %union.tree_node** %outer_type.addr, align 8, !dbg !6096
  %common437 = bitcast %union.tree_node* %150 to %struct.tree_common*, !dbg !6096
  %type438 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common437, i32 0, i32 2, !dbg !6096
  %151 = load %union.tree_node*, %union.tree_node** %type438, align 8, !dbg !6096
  %152 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6097
  %common439 = bitcast %union.tree_node* %152 to %struct.tree_common*, !dbg !6097
  %type440 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common439, i32 0, i32 2, !dbg !6097
  %153 = load %union.tree_node*, %union.tree_node** %type440, align 8, !dbg !6097
  %call441 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %151, %union.tree_node* %153), !dbg !6098
  store i8 %call441, i8* %retval, align 1, !dbg !6099
  br label %return, !dbg !6099

if.else442:                                       ; preds = %land.lhs.true425, %land.lhs.true418, %if.else411
  %154 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6100
  %base443 = bitcast %union.tree_node* %154 to %struct.tree_base*, !dbg !6100
  %155 = bitcast %struct.tree_base* %base443 to i64*, !dbg !6100
  %bf.load444 = load i64, i64* %155, align 8, !dbg !6100
  %bf.clear445 = and i64 %bf.load444, 65535, !dbg !6100
  %bf.cast446 = trunc i64 %bf.clear445 to i32, !dbg !6100
  %cmp447 = icmp eq i32 %bf.cast446, 15, !dbg !6102
  br i1 %cmp447, label %land.lhs.true449, label %if.else604, !dbg !6103

land.lhs.true449:                                 ; preds = %if.else442
  %156 = load %union.tree_node*, %union.tree_node** %outer_type.addr, align 8, !dbg !6104
  %base450 = bitcast %union.tree_node* %156 to %struct.tree_base*, !dbg !6104
  %157 = bitcast %struct.tree_base* %base450 to i64*, !dbg !6104
  %bf.load451 = load i64, i64* %157, align 8, !dbg !6104
  %bf.clear452 = and i64 %bf.load451, 65535, !dbg !6104
  %bf.cast453 = trunc i64 %bf.clear452 to i32, !dbg !6104
  %cmp454 = icmp eq i32 %bf.cast453, 15, !dbg !6105
  br i1 %cmp454, label %if.then456, label %if.else604, !dbg !6106

if.then456:                                       ; preds = %land.lhs.true449
  %158 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6107
  %type457 = bitcast %union.tree_node* %158 to %struct.tree_type*, !dbg !6107
  %string_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type457, i32 0, i32 6, !dbg !6107
  %bf.load458 = load i32, i32* %string_flag, align 4, !dbg !6107
  %bf.lshr459 = lshr i32 %bf.load458, 24, !dbg !6107
  %bf.clear460 = and i32 %bf.lshr459, 1, !dbg !6107
  %159 = load %union.tree_node*, %union.tree_node** %outer_type.addr, align 8, !dbg !6110
  %type461 = bitcast %union.tree_node* %159 to %struct.tree_type*, !dbg !6110
  %string_flag462 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type461, i32 0, i32 6, !dbg !6110
  %bf.load463 = load i32, i32* %string_flag462, align 4, !dbg !6110
  %bf.lshr464 = lshr i32 %bf.load463, 24, !dbg !6110
  %bf.clear465 = and i32 %bf.lshr464, 1, !dbg !6110
  %cmp466 = icmp ne i32 %bf.clear460, %bf.clear465, !dbg !6111
  br i1 %cmp466, label %if.then468, label %if.end469, !dbg !6112

if.then468:                                       ; preds = %if.then456
  store i8 0, i8* %retval, align 1, !dbg !6113
  br label %return, !dbg !6113

if.end469:                                        ; preds = %if.then456
  %160 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6114
  %type470 = bitcast %union.tree_node* %160 to %struct.tree_type*, !dbg !6114
  %values471 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type470, i32 0, i32 1, !dbg !6114
  %161 = load %union.tree_node*, %union.tree_node** %values471, align 8, !dbg !6114
  %tobool472 = icmp ne %union.tree_node* %161, null, !dbg !6114
  br i1 %tobool472, label %if.end478, label %land.lhs.true473, !dbg !6116

land.lhs.true473:                                 ; preds = %if.end469
  %162 = load %union.tree_node*, %union.tree_node** %outer_type.addr, align 8, !dbg !6117
  %type474 = bitcast %union.tree_node* %162 to %struct.tree_type*, !dbg !6117
  %values475 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type474, i32 0, i32 1, !dbg !6117
  %163 = load %union.tree_node*, %union.tree_node** %values475, align 8, !dbg !6117
  %tobool476 = icmp ne %union.tree_node* %163, null, !dbg !6117
  br i1 %tobool476, label %if.then477, label %if.end478, !dbg !6118

if.then477:                                       ; preds = %land.lhs.true473
  store i8 0, i8* %retval, align 1, !dbg !6119
  br label %return, !dbg !6119

if.end478:                                        ; preds = %land.lhs.true473, %if.end469
  %164 = load %union.tree_node*, %union.tree_node** %outer_type.addr, align 8, !dbg !6120
  %type479 = bitcast %union.tree_node* %164 to %struct.tree_type*, !dbg !6120
  %size480 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type479, i32 0, i32 2, !dbg !6120
  %165 = load %union.tree_node*, %union.tree_node** %size480, align 8, !dbg !6120
  %tobool481 = icmp ne %union.tree_node* %165, null, !dbg !6120
  br i1 %tobool481, label %land.lhs.true482, label %if.end512, !dbg !6122

land.lhs.true482:                                 ; preds = %if.end478
  %166 = load %union.tree_node*, %union.tree_node** %outer_type.addr, align 8, !dbg !6123
  %type483 = bitcast %union.tree_node* %166 to %struct.tree_type*, !dbg !6123
  %size484 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type483, i32 0, i32 2, !dbg !6123
  %167 = load %union.tree_node*, %union.tree_node** %size484, align 8, !dbg !6123
  %base485 = bitcast %union.tree_node* %167 to %struct.tree_base*, !dbg !6123
  %168 = bitcast %struct.tree_base* %base485 to i64*, !dbg !6123
  %bf.load486 = load i64, i64* %168, align 8, !dbg !6123
  %bf.clear487 = and i64 %bf.load486, 65535, !dbg !6123
  %bf.cast488 = trunc i64 %bf.clear487 to i32, !dbg !6123
  %cmp489 = icmp eq i32 %bf.cast488, 23, !dbg !6124
  br i1 %cmp489, label %land.lhs.true491, label %if.end512, !dbg !6125

land.lhs.true491:                                 ; preds = %land.lhs.true482
  %169 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6126
  %type492 = bitcast %union.tree_node* %169 to %struct.tree_type*, !dbg !6126
  %size493 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type492, i32 0, i32 2, !dbg !6126
  %170 = load %union.tree_node*, %union.tree_node** %size493, align 8, !dbg !6126
  %tobool494 = icmp ne %union.tree_node* %170, null, !dbg !6126
  br i1 %tobool494, label %lor.lhs.false495, label %if.then511, !dbg !6127

lor.lhs.false495:                                 ; preds = %land.lhs.true491
  %171 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6128
  %type496 = bitcast %union.tree_node* %171 to %struct.tree_type*, !dbg !6128
  %size497 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type496, i32 0, i32 2, !dbg !6128
  %172 = load %union.tree_node*, %union.tree_node** %size497, align 8, !dbg !6128
  %base498 = bitcast %union.tree_node* %172 to %struct.tree_base*, !dbg !6128
  %173 = bitcast %struct.tree_base* %base498 to i64*, !dbg !6128
  %bf.load499 = load i64, i64* %173, align 8, !dbg !6128
  %bf.clear500 = and i64 %bf.load499, 65535, !dbg !6128
  %bf.cast501 = trunc i64 %bf.clear500 to i32, !dbg !6128
  %cmp502 = icmp ne i32 %bf.cast501, 23, !dbg !6129
  br i1 %cmp502, label %if.then511, label %lor.lhs.false504, !dbg !6130

lor.lhs.false504:                                 ; preds = %lor.lhs.false495
  %174 = load %union.tree_node*, %union.tree_node** %outer_type.addr, align 8, !dbg !6131
  %type505 = bitcast %union.tree_node* %174 to %struct.tree_type*, !dbg !6131
  %size506 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type505, i32 0, i32 2, !dbg !6131
  %175 = load %union.tree_node*, %union.tree_node** %size506, align 8, !dbg !6131
  %176 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6132
  %type507 = bitcast %union.tree_node* %176 to %struct.tree_type*, !dbg !6132
  %size508 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type507, i32 0, i32 2, !dbg !6132
  %177 = load %union.tree_node*, %union.tree_node** %size508, align 8, !dbg !6132
  %call509 = call i32 @tree_int_cst_equal(%union.tree_node* %175, %union.tree_node* %177), !dbg !6133
  %tobool510 = icmp ne i32 %call509, 0, !dbg !6133
  br i1 %tobool510, label %if.end512, label %if.then511, !dbg !6134

if.then511:                                       ; preds = %lor.lhs.false504, %lor.lhs.false495, %land.lhs.true491
  store i8 0, i8* %retval, align 1, !dbg !6135
  br label %return, !dbg !6135

if.end512:                                        ; preds = %lor.lhs.false504, %land.lhs.true482, %if.end478
  %178 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6136
  %type513 = bitcast %union.tree_node* %178 to %struct.tree_type*, !dbg !6136
  %values514 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type513, i32 0, i32 1, !dbg !6136
  %179 = load %union.tree_node*, %union.tree_node** %values514, align 8, !dbg !6136
  %tobool515 = icmp ne %union.tree_node* %179, null, !dbg !6136
  br i1 %tobool515, label %land.lhs.true516, label %if.end598, !dbg !6138

land.lhs.true516:                                 ; preds = %if.end512
  %180 = load %union.tree_node*, %union.tree_node** %outer_type.addr, align 8, !dbg !6139
  %type517 = bitcast %union.tree_node* %180 to %struct.tree_type*, !dbg !6139
  %values518 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type517, i32 0, i32 1, !dbg !6139
  %181 = load %union.tree_node*, %union.tree_node** %values518, align 8, !dbg !6139
  %tobool519 = icmp ne %union.tree_node* %181, null, !dbg !6139
  br i1 %tobool519, label %land.lhs.true520, label %if.end598, !dbg !6140

land.lhs.true520:                                 ; preds = %land.lhs.true516
  %182 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6141
  %type521 = bitcast %union.tree_node* %182 to %struct.tree_type*, !dbg !6141
  %values522 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type521, i32 0, i32 1, !dbg !6141
  %183 = load %union.tree_node*, %union.tree_node** %values522, align 8, !dbg !6141
  %184 = load %union.tree_node*, %union.tree_node** %outer_type.addr, align 8, !dbg !6142
  %type523 = bitcast %union.tree_node* %184 to %struct.tree_type*, !dbg !6142
  %values524 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type523, i32 0, i32 1, !dbg !6142
  %185 = load %union.tree_node*, %union.tree_node** %values524, align 8, !dbg !6142
  %cmp525 = icmp ne %union.tree_node* %183, %185, !dbg !6143
  br i1 %cmp525, label %if.then527, label %if.end598, !dbg !6144

if.then527:                                       ; preds = %land.lhs.true520
  call void @llvm.dbg.declare(metadata %union.tree_node** %inner_min, metadata !6145, metadata !DIExpression()), !dbg !6147
  %186 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6148
  %type528 = bitcast %union.tree_node* %186 to %struct.tree_type*, !dbg !6148
  %values529 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type528, i32 0, i32 1, !dbg !6148
  %187 = load %union.tree_node*, %union.tree_node** %values529, align 8, !dbg !6148
  %type530 = bitcast %union.tree_node* %187 to %struct.tree_type*, !dbg !6148
  %minval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type530, i32 0, i32 13, !dbg !6148
  %188 = load %union.tree_node*, %union.tree_node** %minval, align 8, !dbg !6148
  store %union.tree_node* %188, %union.tree_node** %inner_min, align 8, !dbg !6147
  call void @llvm.dbg.declare(metadata %union.tree_node** %outer_min, metadata !6149, metadata !DIExpression()), !dbg !6150
  %189 = load %union.tree_node*, %union.tree_node** %outer_type.addr, align 8, !dbg !6151
  %type531 = bitcast %union.tree_node* %189 to %struct.tree_type*, !dbg !6151
  %values532 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type531, i32 0, i32 1, !dbg !6151
  %190 = load %union.tree_node*, %union.tree_node** %values532, align 8, !dbg !6151
  %type533 = bitcast %union.tree_node* %190 to %struct.tree_type*, !dbg !6151
  %minval534 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type533, i32 0, i32 13, !dbg !6151
  %191 = load %union.tree_node*, %union.tree_node** %minval534, align 8, !dbg !6151
  store %union.tree_node* %191, %union.tree_node** %outer_min, align 8, !dbg !6150
  call void @llvm.dbg.declare(metadata %union.tree_node** %inner_max, metadata !6152, metadata !DIExpression()), !dbg !6153
  %192 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6154
  %type535 = bitcast %union.tree_node* %192 to %struct.tree_type*, !dbg !6154
  %values536 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type535, i32 0, i32 1, !dbg !6154
  %193 = load %union.tree_node*, %union.tree_node** %values536, align 8, !dbg !6154
  %type537 = bitcast %union.tree_node* %193 to %struct.tree_type*, !dbg !6154
  %maxval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type537, i32 0, i32 14, !dbg !6154
  %194 = load %union.tree_node*, %union.tree_node** %maxval, align 8, !dbg !6154
  store %union.tree_node* %194, %union.tree_node** %inner_max, align 8, !dbg !6153
  call void @llvm.dbg.declare(metadata %union.tree_node** %outer_max, metadata !6155, metadata !DIExpression()), !dbg !6156
  %195 = load %union.tree_node*, %union.tree_node** %outer_type.addr, align 8, !dbg !6157
  %type538 = bitcast %union.tree_node* %195 to %struct.tree_type*, !dbg !6157
  %values539 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type538, i32 0, i32 1, !dbg !6157
  %196 = load %union.tree_node*, %union.tree_node** %values539, align 8, !dbg !6157
  %type540 = bitcast %union.tree_node* %196 to %struct.tree_type*, !dbg !6157
  %maxval541 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type540, i32 0, i32 14, !dbg !6157
  %197 = load %union.tree_node*, %union.tree_node** %maxval541, align 8, !dbg !6157
  store %union.tree_node* %197, %union.tree_node** %outer_max, align 8, !dbg !6156
  %198 = load %union.tree_node*, %union.tree_node** %inner_min, align 8, !dbg !6158
  %tobool542 = icmp ne %union.tree_node* %198, null, !dbg !6158
  br i1 %tobool542, label %land.lhs.true543, label %if.end551, !dbg !6160

land.lhs.true543:                                 ; preds = %if.then527
  %199 = load %union.tree_node*, %union.tree_node** %inner_min, align 8, !dbg !6161
  %base544 = bitcast %union.tree_node* %199 to %struct.tree_base*, !dbg !6161
  %200 = bitcast %struct.tree_base* %base544 to i64*, !dbg !6161
  %bf.load545 = load i64, i64* %200, align 8, !dbg !6161
  %bf.clear546 = and i64 %bf.load545, 65535, !dbg !6161
  %bf.cast547 = trunc i64 %bf.clear546 to i32, !dbg !6161
  %cmp548 = icmp ne i32 %bf.cast547, 23, !dbg !6162
  br i1 %cmp548, label %if.then550, label %if.end551, !dbg !6163

if.then550:                                       ; preds = %land.lhs.true543
  store %union.tree_node* null, %union.tree_node** %inner_min, align 8, !dbg !6164
  br label %if.end551, !dbg !6165

if.end551:                                        ; preds = %if.then550, %land.lhs.true543, %if.then527
  %201 = load %union.tree_node*, %union.tree_node** %outer_min, align 8, !dbg !6166
  %tobool552 = icmp ne %union.tree_node* %201, null, !dbg !6166
  br i1 %tobool552, label %land.lhs.true553, label %if.end561, !dbg !6168

land.lhs.true553:                                 ; preds = %if.end551
  %202 = load %union.tree_node*, %union.tree_node** %outer_min, align 8, !dbg !6169
  %base554 = bitcast %union.tree_node* %202 to %struct.tree_base*, !dbg !6169
  %203 = bitcast %struct.tree_base* %base554 to i64*, !dbg !6169
  %bf.load555 = load i64, i64* %203, align 8, !dbg !6169
  %bf.clear556 = and i64 %bf.load555, 65535, !dbg !6169
  %bf.cast557 = trunc i64 %bf.clear556 to i32, !dbg !6169
  %cmp558 = icmp ne i32 %bf.cast557, 23, !dbg !6170
  br i1 %cmp558, label %if.then560, label %if.end561, !dbg !6171

if.then560:                                       ; preds = %land.lhs.true553
  store %union.tree_node* null, %union.tree_node** %outer_min, align 8, !dbg !6172
  br label %if.end561, !dbg !6173

if.end561:                                        ; preds = %if.then560, %land.lhs.true553, %if.end551
  %204 = load %union.tree_node*, %union.tree_node** %inner_max, align 8, !dbg !6174
  %tobool562 = icmp ne %union.tree_node* %204, null, !dbg !6174
  br i1 %tobool562, label %land.lhs.true563, label %if.end571, !dbg !6176

land.lhs.true563:                                 ; preds = %if.end561
  %205 = load %union.tree_node*, %union.tree_node** %inner_max, align 8, !dbg !6177
  %base564 = bitcast %union.tree_node* %205 to %struct.tree_base*, !dbg !6177
  %206 = bitcast %struct.tree_base* %base564 to i64*, !dbg !6177
  %bf.load565 = load i64, i64* %206, align 8, !dbg !6177
  %bf.clear566 = and i64 %bf.load565, 65535, !dbg !6177
  %bf.cast567 = trunc i64 %bf.clear566 to i32, !dbg !6177
  %cmp568 = icmp ne i32 %bf.cast567, 23, !dbg !6178
  br i1 %cmp568, label %if.then570, label %if.end571, !dbg !6179

if.then570:                                       ; preds = %land.lhs.true563
  store %union.tree_node* null, %union.tree_node** %inner_max, align 8, !dbg !6180
  br label %if.end571, !dbg !6181

if.end571:                                        ; preds = %if.then570, %land.lhs.true563, %if.end561
  %207 = load %union.tree_node*, %union.tree_node** %outer_max, align 8, !dbg !6182
  %tobool572 = icmp ne %union.tree_node* %207, null, !dbg !6182
  br i1 %tobool572, label %land.lhs.true573, label %if.end581, !dbg !6184

land.lhs.true573:                                 ; preds = %if.end571
  %208 = load %union.tree_node*, %union.tree_node** %outer_max, align 8, !dbg !6185
  %base574 = bitcast %union.tree_node* %208 to %struct.tree_base*, !dbg !6185
  %209 = bitcast %struct.tree_base* %base574 to i64*, !dbg !6185
  %bf.load575 = load i64, i64* %209, align 8, !dbg !6185
  %bf.clear576 = and i64 %bf.load575, 65535, !dbg !6185
  %bf.cast577 = trunc i64 %bf.clear576 to i32, !dbg !6185
  %cmp578 = icmp ne i32 %bf.cast577, 23, !dbg !6186
  br i1 %cmp578, label %if.then580, label %if.end581, !dbg !6187

if.then580:                                       ; preds = %land.lhs.true573
  store %union.tree_node* null, %union.tree_node** %outer_max, align 8, !dbg !6188
  br label %if.end581, !dbg !6189

if.end581:                                        ; preds = %if.then580, %land.lhs.true573, %if.end571
  %210 = load %union.tree_node*, %union.tree_node** %outer_min, align 8, !dbg !6190
  %tobool582 = icmp ne %union.tree_node* %210, null, !dbg !6190
  br i1 %tobool582, label %land.lhs.true583, label %if.end589, !dbg !6192

land.lhs.true583:                                 ; preds = %if.end581
  %211 = load %union.tree_node*, %union.tree_node** %inner_min, align 8, !dbg !6193
  %tobool584 = icmp ne %union.tree_node* %211, null, !dbg !6193
  br i1 %tobool584, label %lor.lhs.false585, label %if.then588, !dbg !6194

lor.lhs.false585:                                 ; preds = %land.lhs.true583
  %212 = load %union.tree_node*, %union.tree_node** %inner_min, align 8, !dbg !6195
  %213 = load %union.tree_node*, %union.tree_node** %outer_min, align 8, !dbg !6196
  %call586 = call i32 @tree_int_cst_equal(%union.tree_node* %212, %union.tree_node* %213), !dbg !6197
  %tobool587 = icmp ne i32 %call586, 0, !dbg !6197
  br i1 %tobool587, label %if.end589, label %if.then588, !dbg !6198

if.then588:                                       ; preds = %lor.lhs.false585, %land.lhs.true583
  store i8 0, i8* %retval, align 1, !dbg !6199
  br label %return, !dbg !6199

if.end589:                                        ; preds = %lor.lhs.false585, %if.end581
  %214 = load %union.tree_node*, %union.tree_node** %outer_max, align 8, !dbg !6200
  %tobool590 = icmp ne %union.tree_node* %214, null, !dbg !6200
  br i1 %tobool590, label %land.lhs.true591, label %if.end597, !dbg !6202

land.lhs.true591:                                 ; preds = %if.end589
  %215 = load %union.tree_node*, %union.tree_node** %inner_max, align 8, !dbg !6203
  %tobool592 = icmp ne %union.tree_node* %215, null, !dbg !6203
  br i1 %tobool592, label %lor.lhs.false593, label %if.then596, !dbg !6204

lor.lhs.false593:                                 ; preds = %land.lhs.true591
  %216 = load %union.tree_node*, %union.tree_node** %inner_max, align 8, !dbg !6205
  %217 = load %union.tree_node*, %union.tree_node** %outer_max, align 8, !dbg !6206
  %call594 = call i32 @tree_int_cst_equal(%union.tree_node* %216, %union.tree_node* %217), !dbg !6207
  %tobool595 = icmp ne i32 %call594, 0, !dbg !6207
  br i1 %tobool595, label %if.end597, label %if.then596, !dbg !6208

if.then596:                                       ; preds = %lor.lhs.false593, %land.lhs.true591
  store i8 0, i8* %retval, align 1, !dbg !6209
  br label %return, !dbg !6209

if.end597:                                        ; preds = %lor.lhs.false593, %if.end589
  br label %if.end598, !dbg !6210

if.end598:                                        ; preds = %if.end597, %land.lhs.true520, %land.lhs.true516, %if.end512
  %218 = load %union.tree_node*, %union.tree_node** %outer_type.addr, align 8, !dbg !6211
  %common599 = bitcast %union.tree_node* %218 to %struct.tree_common*, !dbg !6211
  %type600 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common599, i32 0, i32 2, !dbg !6211
  %219 = load %union.tree_node*, %union.tree_node** %type600, align 8, !dbg !6211
  %220 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6212
  %common601 = bitcast %union.tree_node* %220 to %struct.tree_common*, !dbg !6212
  %type602 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common601, i32 0, i32 2, !dbg !6212
  %221 = load %union.tree_node*, %union.tree_node** %type602, align 8, !dbg !6212
  %call603 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %219, %union.tree_node* %221), !dbg !6213
  store i8 %call603, i8* %retval, align 1, !dbg !6214
  br label %return, !dbg !6214

if.else604:                                       ; preds = %land.lhs.true449, %if.else442
  %222 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6215
  %base605 = bitcast %union.tree_node* %222 to %struct.tree_base*, !dbg !6215
  %223 = bitcast %struct.tree_base* %base605 to i64*, !dbg !6215
  %bf.load606 = load i64, i64* %223, align 8, !dbg !6215
  %bf.clear607 = and i64 %bf.load606, 65535, !dbg !6215
  %bf.cast608 = trunc i64 %bf.clear607 to i32, !dbg !6215
  %cmp609 = icmp eq i32 %bf.cast608, 20, !dbg !6217
  br i1 %cmp609, label %land.lhs.true618, label %lor.lhs.false611, !dbg !6218

lor.lhs.false611:                                 ; preds = %if.else604
  %224 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6219
  %base612 = bitcast %union.tree_node* %224 to %struct.tree_base*, !dbg !6219
  %225 = bitcast %struct.tree_base* %base612 to i64*, !dbg !6219
  %bf.load613 = load i64, i64* %225, align 8, !dbg !6219
  %bf.clear614 = and i64 %bf.load613, 65535, !dbg !6219
  %bf.cast615 = trunc i64 %bf.clear614 to i32, !dbg !6219
  %cmp616 = icmp eq i32 %bf.cast615, 21, !dbg !6220
  br i1 %cmp616, label %land.lhs.true618, label %if.else702, !dbg !6221

land.lhs.true618:                                 ; preds = %lor.lhs.false611, %if.else604
  %226 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6222
  %base619 = bitcast %union.tree_node* %226 to %struct.tree_base*, !dbg !6222
  %227 = bitcast %struct.tree_base* %base619 to i64*, !dbg !6222
  %bf.load620 = load i64, i64* %227, align 8, !dbg !6222
  %bf.clear621 = and i64 %bf.load620, 65535, !dbg !6222
  %bf.cast622 = trunc i64 %bf.clear621 to i32, !dbg !6222
  %228 = load %union.tree_node*, %union.tree_node** %outer_type.addr, align 8, !dbg !6223
  %base623 = bitcast %union.tree_node* %228 to %struct.tree_base*, !dbg !6223
  %229 = bitcast %struct.tree_base* %base623 to i64*, !dbg !6223
  %bf.load624 = load i64, i64* %229, align 8, !dbg !6223
  %bf.clear625 = and i64 %bf.load624, 65535, !dbg !6223
  %bf.cast626 = trunc i64 %bf.clear625 to i32, !dbg !6223
  %cmp627 = icmp eq i32 %bf.cast622, %bf.cast626, !dbg !6224
  br i1 %cmp627, label %if.then629, label %if.else702, !dbg !6225

if.then629:                                       ; preds = %land.lhs.true618
  call void @llvm.dbg.declare(metadata %union.tree_node** %outer_parm, metadata !6226, metadata !DIExpression()), !dbg !6228
  call void @llvm.dbg.declare(metadata %union.tree_node** %inner_parm, metadata !6229, metadata !DIExpression()), !dbg !6230
  %230 = load %union.tree_node*, %union.tree_node** %outer_type.addr, align 8, !dbg !6231
  %common630 = bitcast %union.tree_node* %230 to %struct.tree_common*, !dbg !6231
  %type631 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common630, i32 0, i32 2, !dbg !6231
  %231 = load %union.tree_node*, %union.tree_node** %type631, align 8, !dbg !6231
  %232 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6233
  %common632 = bitcast %union.tree_node* %232 to %struct.tree_common*, !dbg !6233
  %type633 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common632, i32 0, i32 2, !dbg !6233
  %233 = load %union.tree_node*, %union.tree_node** %type633, align 8, !dbg !6233
  %call634 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %231, %union.tree_node* %233), !dbg !6234
  %tobool635 = icmp ne i8 %call634, 0, !dbg !6234
  br i1 %tobool635, label %if.end637, label %if.then636, !dbg !6235

if.then636:                                       ; preds = %if.then629
  store i8 0, i8* %retval, align 1, !dbg !6236
  br label %return, !dbg !6236

if.end637:                                        ; preds = %if.then629
  %234 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6237
  %base638 = bitcast %union.tree_node* %234 to %struct.tree_base*, !dbg !6237
  %235 = bitcast %struct.tree_base* %base638 to i64*, !dbg !6237
  %bf.load639 = load i64, i64* %235, align 8, !dbg !6237
  %bf.clear640 = and i64 %bf.load639, 65535, !dbg !6237
  %bf.cast641 = trunc i64 %bf.clear640 to i32, !dbg !6237
  %cmp642 = icmp eq i32 %bf.cast641, 21, !dbg !6239
  br i1 %cmp642, label %land.lhs.true644, label %if.end652, !dbg !6240

land.lhs.true644:                                 ; preds = %if.end637
  %236 = load %union.tree_node*, %union.tree_node** %outer_type.addr, align 8, !dbg !6241
  %type645 = bitcast %union.tree_node* %236 to %struct.tree_type*, !dbg !6241
  %maxval646 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type645, i32 0, i32 14, !dbg !6241
  %237 = load %union.tree_node*, %union.tree_node** %maxval646, align 8, !dbg !6241
  %238 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6242
  %type647 = bitcast %union.tree_node* %238 to %struct.tree_type*, !dbg !6242
  %maxval648 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type647, i32 0, i32 14, !dbg !6242
  %239 = load %union.tree_node*, %union.tree_node** %maxval648, align 8, !dbg !6242
  %call649 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %237, %union.tree_node* %239), !dbg !6243
  %tobool650 = icmp ne i8 %call649, 0, !dbg !6243
  br i1 %tobool650, label %if.end652, label %if.then651, !dbg !6244

if.then651:                                       ; preds = %land.lhs.true644
  store i8 0, i8* %retval, align 1, !dbg !6245
  br label %return, !dbg !6245

if.end652:                                        ; preds = %land.lhs.true644, %if.end637
  %240 = load %union.tree_node*, %union.tree_node** %outer_type.addr, align 8, !dbg !6246
  %type653 = bitcast %union.tree_node* %240 to %struct.tree_type*, !dbg !6246
  %values654 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type653, i32 0, i32 1, !dbg !6246
  %241 = load %union.tree_node*, %union.tree_node** %values654, align 8, !dbg !6246
  %tobool655 = icmp ne %union.tree_node* %241, null, !dbg !6246
  br i1 %tobool655, label %if.end657, label %if.then656, !dbg !6248

if.then656:                                       ; preds = %if.end652
  store i8 1, i8* %retval, align 1, !dbg !6249
  br label %return, !dbg !6249

if.end657:                                        ; preds = %if.end652
  %242 = load %union.tree_node*, %union.tree_node** %outer_type.addr, align 8, !dbg !6250
  %type658 = bitcast %union.tree_node* %242 to %struct.tree_type*, !dbg !6250
  %values659 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type658, i32 0, i32 1, !dbg !6250
  %243 = load %union.tree_node*, %union.tree_node** %values659, align 8, !dbg !6250
  %244 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6252
  %type660 = bitcast %union.tree_node* %244 to %struct.tree_type*, !dbg !6252
  %values661 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type660, i32 0, i32 1, !dbg !6252
  %245 = load %union.tree_node*, %union.tree_node** %values661, align 8, !dbg !6252
  %cmp662 = icmp eq %union.tree_node* %243, %245, !dbg !6253
  br i1 %cmp662, label %if.then664, label %if.end665, !dbg !6254

if.then664:                                       ; preds = %if.end657
  store i8 1, i8* %retval, align 1, !dbg !6255
  br label %return, !dbg !6255

if.end665:                                        ; preds = %if.end657
  %246 = load %union.tree_node*, %union.tree_node** %outer_type.addr, align 8, !dbg !6256
  %type666 = bitcast %union.tree_node* %246 to %struct.tree_type*, !dbg !6256
  %values667 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type666, i32 0, i32 1, !dbg !6256
  %247 = load %union.tree_node*, %union.tree_node** %values667, align 8, !dbg !6256
  store %union.tree_node* %247, %union.tree_node** %outer_parm, align 8, !dbg !6258
  %248 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6259
  %type668 = bitcast %union.tree_node* %248 to %struct.tree_type*, !dbg !6259
  %values669 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type668, i32 0, i32 1, !dbg !6259
  %249 = load %union.tree_node*, %union.tree_node** %values669, align 8, !dbg !6259
  store %union.tree_node* %249, %union.tree_node** %inner_parm, align 8, !dbg !6260
  br label %for.cond, !dbg !6261

for.cond:                                         ; preds = %for.inc, %if.end665
  %250 = load %union.tree_node*, %union.tree_node** %outer_parm, align 8, !dbg !6262
  %tobool670 = icmp ne %union.tree_node* %250, null, !dbg !6262
  br i1 %tobool670, label %land.rhs, label %land.end, !dbg !6264

land.rhs:                                         ; preds = %for.cond
  %251 = load %union.tree_node*, %union.tree_node** %inner_parm, align 8, !dbg !6265
  %tobool671 = icmp ne %union.tree_node* %251, null, !dbg !6264
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %252 = phi i1 [ false, %for.cond ], [ %tobool671, %land.rhs ], !dbg !6266
  br i1 %252, label %for.body, label %for.end, !dbg !6267

for.body:                                         ; preds = %land.end
  %253 = load %union.tree_node*, %union.tree_node** %outer_parm, align 8, !dbg !6268
  %list = bitcast %union.tree_node* %253 to %struct.tree_list*, !dbg !6268
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !6268
  %254 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !6268
  %type672 = bitcast %union.tree_node* %254 to %struct.tree_type*, !dbg !6268
  %main_variant673 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type672, i32 0, i32 16, !dbg !6268
  %255 = load %union.tree_node*, %union.tree_node** %main_variant673, align 8, !dbg !6268
  %256 = load %union.tree_node*, %union.tree_node** %inner_parm, align 8, !dbg !6270
  %list674 = bitcast %union.tree_node* %256 to %struct.tree_list*, !dbg !6270
  %value675 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list674, i32 0, i32 2, !dbg !6270
  %257 = load %union.tree_node*, %union.tree_node** %value675, align 8, !dbg !6270
  %type676 = bitcast %union.tree_node* %257 to %struct.tree_type*, !dbg !6270
  %main_variant677 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type676, i32 0, i32 16, !dbg !6270
  %258 = load %union.tree_node*, %union.tree_node** %main_variant677, align 8, !dbg !6270
  %call678 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %255, %union.tree_node* %258), !dbg !6271
  %tobool679 = icmp ne i8 %call678, 0, !dbg !6271
  br i1 %tobool679, label %if.end681, label %if.then680, !dbg !6272

if.then680:                                       ; preds = %for.body
  store i8 0, i8* %retval, align 1, !dbg !6273
  br label %return, !dbg !6273

if.end681:                                        ; preds = %for.body
  br label %for.inc, !dbg !6274

for.inc:                                          ; preds = %if.end681
  %259 = load %union.tree_node*, %union.tree_node** %outer_parm, align 8, !dbg !6275
  %common682 = bitcast %union.tree_node* %259 to %struct.tree_common*, !dbg !6275
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common682, i32 0, i32 1, !dbg !6275
  %260 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !6275
  store %union.tree_node* %260, %union.tree_node** %outer_parm, align 8, !dbg !6276
  %261 = load %union.tree_node*, %union.tree_node** %inner_parm, align 8, !dbg !6277
  %common683 = bitcast %union.tree_node* %261 to %struct.tree_common*, !dbg !6277
  %chain684 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common683, i32 0, i32 1, !dbg !6277
  %262 = load %union.tree_node*, %union.tree_node** %chain684, align 8, !dbg !6277
  store %union.tree_node* %262, %union.tree_node** %inner_parm, align 8, !dbg !6278
  br label %for.cond, !dbg !6279, !llvm.loop !6280

for.end:                                          ; preds = %land.end
  %263 = load %union.tree_node*, %union.tree_node** %outer_parm, align 8, !dbg !6282
  %tobool685 = icmp ne %union.tree_node* %263, null, !dbg !6282
  br i1 %tobool685, label %if.then688, label %lor.lhs.false686, !dbg !6284

lor.lhs.false686:                                 ; preds = %for.end
  %264 = load %union.tree_node*, %union.tree_node** %inner_parm, align 8, !dbg !6285
  %tobool687 = icmp ne %union.tree_node* %264, null, !dbg !6285
  br i1 %tobool687, label %if.then688, label %if.end689, !dbg !6286

if.then688:                                       ; preds = %lor.lhs.false686, %for.end
  store i8 0, i8* %retval, align 1, !dbg !6287
  br label %return, !dbg !6287

if.end689:                                        ; preds = %lor.lhs.false686
  %265 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6288
  %type690 = bitcast %union.tree_node* %265 to %struct.tree_type*, !dbg !6288
  %attributes = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type690, i32 0, i32 4, !dbg !6288
  %266 = load %union.tree_node*, %union.tree_node** %attributes, align 8, !dbg !6288
  %tobool691 = icmp ne %union.tree_node* %266, null, !dbg !6288
  br i1 %tobool691, label %if.then696, label %lor.lhs.false692, !dbg !6290

lor.lhs.false692:                                 ; preds = %if.end689
  %267 = load %union.tree_node*, %union.tree_node** %outer_type.addr, align 8, !dbg !6291
  %type693 = bitcast %union.tree_node* %267 to %struct.tree_type*, !dbg !6291
  %attributes694 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type693, i32 0, i32 4, !dbg !6291
  %268 = load %union.tree_node*, %union.tree_node** %attributes694, align 8, !dbg !6291
  %tobool695 = icmp ne %union.tree_node* %268, null, !dbg !6291
  br i1 %tobool695, label %if.then696, label %if.end701, !dbg !6292

if.then696:                                       ; preds = %lor.lhs.false692, %if.end689
  %269 = load i32 (%union.tree_node*, %union.tree_node*)*, i32 (%union.tree_node*, %union.tree_node*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 14), align 8, !dbg !6293
  %270 = load %union.tree_node*, %union.tree_node** %outer_type.addr, align 8, !dbg !6294
  %271 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6295
  %call697 = call i32 %269(%union.tree_node* %270, %union.tree_node* %271), !dbg !6296
  %cmp698 = icmp ne i32 %call697, 0, !dbg !6297
  %conv699 = zext i1 %cmp698 to i32, !dbg !6297
  %conv700 = trunc i32 %conv699 to i8, !dbg !6296
  store i8 %conv700, i8* %retval, align 1, !dbg !6298
  br label %return, !dbg !6298

if.end701:                                        ; preds = %lor.lhs.false692
  store i8 1, i8* %retval, align 1, !dbg !6299
  br label %return, !dbg !6299

if.else702:                                       ; preds = %land.lhs.true618, %lor.lhs.false611
  %272 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6300
  %base703 = bitcast %union.tree_node* %272 to %struct.tree_base*, !dbg !6300
  %273 = bitcast %struct.tree_base* %base703 to i64*, !dbg !6300
  %bf.load704 = load i64, i64* %273, align 8, !dbg !6300
  %bf.clear705 = and i64 %bf.load704, 65535, !dbg !6300
  %bf.cast706 = trunc i64 %bf.clear705 to i32, !dbg !6300
  %cmp707 = icmp eq i32 %bf.cast706, 15, !dbg !6300
  br i1 %cmp707, label %land.lhs.true730, label %lor.lhs.false709, !dbg !6300

lor.lhs.false709:                                 ; preds = %if.else702
  %274 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6300
  %base710 = bitcast %union.tree_node* %274 to %struct.tree_base*, !dbg !6300
  %275 = bitcast %struct.tree_base* %base710 to i64*, !dbg !6300
  %bf.load711 = load i64, i64* %275, align 8, !dbg !6300
  %bf.clear712 = and i64 %bf.load711, 65535, !dbg !6300
  %bf.cast713 = trunc i64 %bf.clear712 to i32, !dbg !6300
  %cmp714 = icmp eq i32 %bf.cast713, 16, !dbg !6300
  br i1 %cmp714, label %land.lhs.true730, label %lor.lhs.false716, !dbg !6300

lor.lhs.false716:                                 ; preds = %lor.lhs.false709
  %276 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6300
  %base717 = bitcast %union.tree_node* %276 to %struct.tree_base*, !dbg !6300
  %277 = bitcast %struct.tree_base* %base717 to i64*, !dbg !6300
  %bf.load718 = load i64, i64* %277, align 8, !dbg !6300
  %bf.clear719 = and i64 %bf.load718, 65535, !dbg !6300
  %bf.cast720 = trunc i64 %bf.clear719 to i32, !dbg !6300
  %cmp721 = icmp eq i32 %bf.cast720, 17, !dbg !6300
  br i1 %cmp721, label %land.lhs.true730, label %lor.lhs.false723, !dbg !6300

lor.lhs.false723:                                 ; preds = %lor.lhs.false716
  %278 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6300
  %base724 = bitcast %union.tree_node* %278 to %struct.tree_base*, !dbg !6300
  %279 = bitcast %struct.tree_base* %base724 to i64*, !dbg !6300
  %bf.load725 = load i64, i64* %279, align 8, !dbg !6300
  %bf.clear726 = and i64 %bf.load725, 65535, !dbg !6300
  %bf.cast727 = trunc i64 %bf.clear726 to i32, !dbg !6300
  %cmp728 = icmp eq i32 %bf.cast727, 18, !dbg !6300
  br i1 %cmp728, label %land.lhs.true730, label %if.end742, !dbg !6302

land.lhs.true730:                                 ; preds = %lor.lhs.false723, %lor.lhs.false716, %lor.lhs.false709, %if.else702
  %280 = load %union.tree_node*, %union.tree_node** %inner_type.addr, align 8, !dbg !6303
  %base731 = bitcast %union.tree_node* %280 to %struct.tree_base*, !dbg !6303
  %281 = bitcast %struct.tree_base* %base731 to i64*, !dbg !6303
  %bf.load732 = load i64, i64* %281, align 8, !dbg !6303
  %bf.clear733 = and i64 %bf.load732, 65535, !dbg !6303
  %bf.cast734 = trunc i64 %bf.clear733 to i32, !dbg !6303
  %282 = load %union.tree_node*, %union.tree_node** %outer_type.addr, align 8, !dbg !6304
  %base735 = bitcast %union.tree_node* %282 to %struct.tree_base*, !dbg !6304
  %283 = bitcast %struct.tree_base* %base735 to i64*, !dbg !6304
  %bf.load736 = load i64, i64* %283, align 8, !dbg !6304
  %bf.clear737 = and i64 %bf.load736, 65535, !dbg !6304
  %bf.cast738 = trunc i64 %bf.clear737 to i32, !dbg !6304
  %cmp739 = icmp eq i32 %bf.cast734, %bf.cast738, !dbg !6305
  br i1 %cmp739, label %if.then741, label %if.end742, !dbg !6306

if.then741:                                       ; preds = %land.lhs.true730
  store i8 0, i8* %retval, align 1, !dbg !6307
  br label %return, !dbg !6307

if.end742:                                        ; preds = %land.lhs.true730, %lor.lhs.false723
  br label %if.end743

if.end743:                                        ; preds = %if.end742
  br label %if.end744

if.end744:                                        ; preds = %if.end743
  br label %if.end745

if.end745:                                        ; preds = %if.end744
  br label %if.end746

if.end746:                                        ; preds = %if.end745
  br label %if.end747

if.end747:                                        ; preds = %if.end746
  br label %if.end748

if.end748:                                        ; preds = %if.end747
  br label %if.end749

if.end749:                                        ; preds = %if.end748
  br label %if.end750

if.end750:                                        ; preds = %if.end749
  store i8 0, i8* %retval, align 1, !dbg !6308
  br label %return, !dbg !6308

return:                                           ; preds = %if.end750, %if.then741, %if.end701, %if.then696, %if.then688, %if.then680, %if.then664, %if.then656, %if.then651, %if.then636, %if.end598, %if.then596, %if.then588, %if.then511, %if.then477, %if.then468, %if.then436, %if.then405, %if.end385, %if.then384, %if.then378, %if.then364, %if.then273, %if.then258, %if.end244, %if.then243, %if.then177, %if.then118, %if.then107, %if.then99, %if.then79, %if.then27
  %284 = load i8, i8* %retval, align 1, !dbg !6309
  ret i8 %284, !dbg !6309
}

declare dso_local i32 @get_deref_alias_set(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @types_compatible_p(%union.tree_node* %type1, %union.tree_node* %type2) #0 !dbg !6310 {
entry:
  %type1.addr = alloca %union.tree_node*, align 8
  %type2.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %type1, %union.tree_node** %type1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type1.addr, metadata !6311, metadata !DIExpression()), !dbg !6312
  store %union.tree_node* %type2, %union.tree_node** %type2.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type2.addr, metadata !6313, metadata !DIExpression()), !dbg !6314
  %0 = load %union.tree_node*, %union.tree_node** %type1.addr, align 8, !dbg !6315
  %1 = load %union.tree_node*, %union.tree_node** %type2.addr, align 8, !dbg !6316
  %cmp = icmp eq %union.tree_node* %0, %1, !dbg !6317
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !6318

lor.rhs:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %type1.addr, align 8, !dbg !6319
  %3 = load %union.tree_node*, %union.tree_node** %type2.addr, align 8, !dbg !6320
  %call = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %2, %union.tree_node* %3), !dbg !6321
  %conv = zext i8 %call to i32, !dbg !6321
  %tobool = icmp ne i32 %conv, 0, !dbg !6321
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !6322

land.rhs:                                         ; preds = %lor.rhs
  %4 = load %union.tree_node*, %union.tree_node** %type2.addr, align 8, !dbg !6323
  %5 = load %union.tree_node*, %union.tree_node** %type1.addr, align 8, !dbg !6324
  %call1 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %4, %union.tree_node* %5), !dbg !6325
  %conv2 = zext i8 %call1 to i32, !dbg !6325
  %tobool3 = icmp ne i32 %conv2, 0, !dbg !6322
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %6 = phi i1 [ false, %lor.rhs ], [ %tobool3, %land.rhs ], !dbg !6326
  br label %lor.end, !dbg !6318

lor.end:                                          ; preds = %land.end, %entry
  %7 = phi i1 [ true, %entry ], [ %6, %land.end ]
  %lor.ext = zext i1 %7 to i32, !dbg !6318
  %conv4 = trunc i32 %lor.ext to i8, !dbg !6327
  ret i8 %conv4, !dbg !6328
}

declare dso_local i32 @tree_int_cst_equal(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @tree_ssa_useless_type_conversion(%union.tree_node* %expr) #0 !dbg !6329 {
entry:
  %retval = alloca i8, align 1
  %expr.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !6332, metadata !DIExpression()), !dbg !6333
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !6334
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !6334
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !6334
  %bf.load = load i64, i64* %1, align 8, !dbg !6334
  %bf.clear = and i64 %bf.load, 65535, !dbg !6334
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6334
  %cmp = icmp eq i32 %bf.cast, 116, !dbg !6334
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !6334

lor.lhs.false:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !6334
  %base1 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !6334
  %3 = bitcast %struct.tree_base* %base1 to i64*, !dbg !6334
  %bf.load2 = load i64, i64* %3, align 8, !dbg !6334
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !6334
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !6334
  %cmp5 = icmp eq i32 %bf.cast4, 113, !dbg !6334
  br i1 %cmp5, label %if.then, label %lor.lhs.false6, !dbg !6336

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %4 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !6337
  %base7 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !6337
  %5 = bitcast %struct.tree_base* %base7 to i64*, !dbg !6337
  %bf.load8 = load i64, i64* %5, align 8, !dbg !6337
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !6337
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !6337
  %cmp11 = icmp eq i32 %bf.cast10, 118, !dbg !6338
  br i1 %cmp11, label %if.then, label %lor.lhs.false12, !dbg !6339

lor.lhs.false12:                                  ; preds = %lor.lhs.false6
  %6 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !6340
  %base13 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !6340
  %7 = bitcast %struct.tree_base* %base13 to i64*, !dbg !6340
  %bf.load14 = load i64, i64* %7, align 8, !dbg !6340
  %bf.clear15 = and i64 %bf.load14, 65535, !dbg !6340
  %bf.cast16 = trunc i64 %bf.clear15 to i32, !dbg !6340
  %cmp17 = icmp eq i32 %bf.cast16, 117, !dbg !6341
  br i1 %cmp17, label %if.then, label %if.end, !dbg !6342

if.then:                                          ; preds = %lor.lhs.false12, %lor.lhs.false6, %lor.lhs.false, %entry
  %8 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !6343
  %common = bitcast %union.tree_node* %8 to %struct.tree_common*, !dbg !6343
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6343
  %9 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6343
  %10 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !6344
  %exp = bitcast %union.tree_node* %10 to %struct.tree_exp*, !dbg !6344
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !6344
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !6344
  %11 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6344
  %common18 = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !6344
  %type19 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common18, i32 0, i32 2, !dbg !6344
  %12 = load %union.tree_node*, %union.tree_node** %type19, align 8, !dbg !6344
  %call = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %9, %union.tree_node* %12), !dbg !6345
  store i8 %call, i8* %retval, align 1, !dbg !6346
  br label %return, !dbg !6346

if.end:                                           ; preds = %lor.lhs.false12
  store i8 0, i8* %retval, align 1, !dbg !6347
  br label %return, !dbg !6347

return:                                           ; preds = %if.end, %if.then
  %13 = load i8, i8* %retval, align 1, !dbg !6348
  ret i8 %13, !dbg !6348
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @tree_ssa_strip_useless_type_conversions(%union.tree_node* %exp) #0 !dbg !6349 {
entry:
  %exp.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !6350, metadata !DIExpression()), !dbg !6351
  br label %while.cond, !dbg !6352

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !6353
  %call = call zeroext i8 @tree_ssa_useless_type_conversion(%union.tree_node* %0), !dbg !6354
  %tobool = icmp ne i8 %call, 0, !dbg !6352
  br i1 %tobool, label %while.body, label %while.end, !dbg !6352

while.body:                                       ; preds = %while.cond
  %1 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !6355
  %exp1 = bitcast %union.tree_node* %1 to %struct.tree_exp*, !dbg !6355
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 3, !dbg !6355
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !6355
  %2 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6355
  store %union.tree_node* %2, %union.tree_node** %exp.addr, align 8, !dbg !6356
  br label %while.cond, !dbg !6352, !llvm.loop !6357

while.end:                                        ; preds = %while.cond
  %3 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !6358
  ret %union.tree_node* %3, !dbg !6359
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @walk_use_def_chains(%union.tree_node* %var, i8 (%union.tree_node*, %union.gimple_statement_d*, i8*)* %fn, i8* %data, i8 zeroext %is_dfs) #0 !dbg !6360 {
entry:
  %var.addr = alloca %union.tree_node*, align 8
  %fn.addr = alloca i8 (%union.tree_node*, %union.gimple_statement_d*, i8*)*, align 8
  %data.addr = alloca i8*, align 8
  %is_dfs.addr = alloca i8, align 1
  %def_stmt = alloca %union.gimple_statement_d*, align 8
  %visited = alloca %struct.pointer_set_t*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !6367, metadata !DIExpression()), !dbg !6368
  store i8 (%union.tree_node*, %union.gimple_statement_d*, i8*)* %fn, i8 (%union.tree_node*, %union.gimple_statement_d*, i8*)** %fn.addr, align 8
  call void @llvm.dbg.declare(metadata i8 (%union.tree_node*, %union.gimple_statement_d*, i8*)** %fn.addr, metadata !6369, metadata !DIExpression()), !dbg !6370
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !6371, metadata !DIExpression()), !dbg !6372
  store i8 %is_dfs, i8* %is_dfs.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %is_dfs.addr, metadata !6373, metadata !DIExpression()), !dbg !6374
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %def_stmt, metadata !6375, metadata !DIExpression()), !dbg !6376
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6377
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !6377
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !6377
  %bf.load = load i64, i64* %1, align 8, !dbg !6377
  %bf.clear = and i64 %bf.load, 65535, !dbg !6377
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6377
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !6377
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6377

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 1591, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6377
  br label %cond.end, !dbg !6377

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6377

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6377
  %2 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6378
  %ssa_name = bitcast %union.tree_node* %2 to %struct.tree_ssa_name*, !dbg !6378
  %def_stmt1 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !6378
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt1, align 8, !dbg !6378
  store %union.gimple_statement_d* %3, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6379
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6380
  %call = call i32 @gimple_code(%union.gimple_statement_d* %4), !dbg !6382
  %cmp2 = icmp ne i32 %call, 16, !dbg !6383
  br i1 %cmp2, label %if.then, label %if.else, !dbg !6384

if.then:                                          ; preds = %cond.end
  %5 = load i8 (%union.tree_node*, %union.gimple_statement_d*, i8*)*, i8 (%union.tree_node*, %union.gimple_statement_d*, i8*)** %fn.addr, align 8, !dbg !6385
  %6 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6386
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6387
  %8 = load i8*, i8** %data.addr, align 8, !dbg !6388
  %call3 = call zeroext i8 %5(%union.tree_node* %6, %union.gimple_statement_d* %7, i8* %8), !dbg !6389
  br label %if.end, !dbg !6389

if.else:                                          ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %struct.pointer_set_t** %visited, metadata !6390, metadata !DIExpression()), !dbg !6392
  %call4 = call %struct.pointer_set_t* @pointer_set_create(), !dbg !6393
  store %struct.pointer_set_t* %call4, %struct.pointer_set_t** %visited, align 8, !dbg !6392
  %9 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6394
  %10 = load i8 (%union.tree_node*, %union.gimple_statement_d*, i8*)*, i8 (%union.tree_node*, %union.gimple_statement_d*, i8*)** %fn.addr, align 8, !dbg !6395
  %11 = load i8*, i8** %data.addr, align 8, !dbg !6396
  %12 = load %struct.pointer_set_t*, %struct.pointer_set_t** %visited, align 8, !dbg !6397
  %13 = load i8, i8* %is_dfs.addr, align 1, !dbg !6398
  %call5 = call zeroext i8 @walk_use_def_chains_1(%union.tree_node* %9, i8 (%union.tree_node*, %union.gimple_statement_d*, i8*)* %10, i8* %11, %struct.pointer_set_t* %12, i8 zeroext %13), !dbg !6399
  %14 = load %struct.pointer_set_t*, %struct.pointer_set_t** %visited, align 8, !dbg !6400
  call void @pointer_set_destroy(%struct.pointer_set_t* %14), !dbg !6401
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !6402
}

declare dso_local %struct.pointer_set_t* @pointer_set_create() #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @walk_use_def_chains_1(%union.tree_node* %var, i8 (%union.tree_node*, %union.gimple_statement_d*, i8*)* %fn, i8* %data, %struct.pointer_set_t* %visited, i8 zeroext %is_dfs) #0 !dbg !6403 {
entry:
  %retval = alloca i8, align 1
  %var.addr = alloca %union.tree_node*, align 8
  %fn.addr = alloca i8 (%union.tree_node*, %union.gimple_statement_d*, i8*)*, align 8
  %data.addr = alloca i8*, align 8
  %visited.addr = alloca %struct.pointer_set_t*, align 8
  %is_dfs.addr = alloca i8, align 1
  %def_stmt = alloca %union.gimple_statement_d*, align 8
  %i = alloca i64, align 8
  %arg = alloca %union.tree_node*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !6406, metadata !DIExpression()), !dbg !6407
  store i8 (%union.tree_node*, %union.gimple_statement_d*, i8*)* %fn, i8 (%union.tree_node*, %union.gimple_statement_d*, i8*)** %fn.addr, align 8
  call void @llvm.dbg.declare(metadata i8 (%union.tree_node*, %union.gimple_statement_d*, i8*)** %fn.addr, metadata !6408, metadata !DIExpression()), !dbg !6409
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !6410, metadata !DIExpression()), !dbg !6411
  store %struct.pointer_set_t* %visited, %struct.pointer_set_t** %visited.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pointer_set_t** %visited.addr, metadata !6412, metadata !DIExpression()), !dbg !6413
  store i8 %is_dfs, i8* %is_dfs.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %is_dfs.addr, metadata !6414, metadata !DIExpression()), !dbg !6415
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %def_stmt, metadata !6416, metadata !DIExpression()), !dbg !6417
  %0 = load %struct.pointer_set_t*, %struct.pointer_set_t** %visited.addr, align 8, !dbg !6418
  %1 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6420
  %2 = bitcast %union.tree_node* %1 to i8*, !dbg !6420
  %call = call i32 @pointer_set_insert(%struct.pointer_set_t* %0, i8* %2), !dbg !6421
  %tobool = icmp ne i32 %call, 0, !dbg !6421
  br i1 %tobool, label %if.then, label %if.end, !dbg !6422

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !6423
  br label %return, !dbg !6423

if.end:                                           ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6424
  %ssa_name = bitcast %union.tree_node* %3 to %struct.tree_ssa_name*, !dbg !6424
  %def_stmt1 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !6424
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt1, align 8, !dbg !6424
  store %union.gimple_statement_d* %4, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6425
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6426
  %call2 = call i32 @gimple_code(%union.gimple_statement_d* %5), !dbg !6428
  %cmp = icmp ne i32 %call2, 16, !dbg !6429
  br i1 %cmp, label %if.then3, label %if.else, !dbg !6430

if.then3:                                         ; preds = %if.end
  %6 = load i8 (%union.tree_node*, %union.gimple_statement_d*, i8*)*, i8 (%union.tree_node*, %union.gimple_statement_d*, i8*)** %fn.addr, align 8, !dbg !6431
  %7 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6433
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6434
  %9 = load i8*, i8** %data.addr, align 8, !dbg !6435
  %call4 = call zeroext i8 %6(%union.tree_node* %7, %union.gimple_statement_d* %8, i8* %9), !dbg !6431
  store i8 %call4, i8* %retval, align 1, !dbg !6436
  br label %return, !dbg !6436

if.else:                                          ; preds = %if.end
  call void @llvm.dbg.declare(metadata i64* %i, metadata !6437, metadata !DIExpression()), !dbg !6439
  %10 = load i8, i8* %is_dfs.addr, align 1, !dbg !6440
  %tobool5 = icmp ne i8 %10, 0, !dbg !6440
  br i1 %tobool5, label %if.end15, label %if.then6, !dbg !6442

if.then6:                                         ; preds = %if.else
  store i64 0, i64* %i, align 8, !dbg !6443
  br label %for.cond, !dbg !6445

for.cond:                                         ; preds = %for.inc, %if.then6
  %11 = load i64, i64* %i, align 8, !dbg !6446
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6448
  %call7 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %12), !dbg !6449
  %conv = zext i32 %call7 to i64, !dbg !6449
  %cmp8 = icmp ult i64 %11, %conv, !dbg !6450
  br i1 %cmp8, label %for.body, label %for.end, !dbg !6451

for.body:                                         ; preds = %for.cond
  %13 = load i8 (%union.tree_node*, %union.gimple_statement_d*, i8*)*, i8 (%union.tree_node*, %union.gimple_statement_d*, i8*)** %fn.addr, align 8, !dbg !6452
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6454
  %15 = load i64, i64* %i, align 8, !dbg !6455
  %call10 = call %union.tree_node* @gimple_phi_arg_def(%union.gimple_statement_d* %14, i64 %15), !dbg !6456
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6457
  %17 = load i8*, i8** %data.addr, align 8, !dbg !6458
  %call11 = call zeroext i8 %13(%union.tree_node* %call10, %union.gimple_statement_d* %16, i8* %17), !dbg !6452
  %tobool12 = icmp ne i8 %call11, 0, !dbg !6452
  br i1 %tobool12, label %if.then13, label %if.end14, !dbg !6459

if.then13:                                        ; preds = %for.body
  store i8 1, i8* %retval, align 1, !dbg !6460
  br label %return, !dbg !6460

if.end14:                                         ; preds = %for.body
  br label %for.inc, !dbg !6461

for.inc:                                          ; preds = %if.end14
  %18 = load i64, i64* %i, align 8, !dbg !6462
  %inc = add i64 %18, 1, !dbg !6462
  store i64 %inc, i64* %i, align 8, !dbg !6462
  br label %for.cond, !dbg !6463, !llvm.loop !6464

for.end:                                          ; preds = %for.cond
  br label %if.end15, !dbg !6465

if.end15:                                         ; preds = %for.end, %if.else
  store i64 0, i64* %i, align 8, !dbg !6466
  br label %for.cond16, !dbg !6468

for.cond16:                                       ; preds = %for.inc32, %if.end15
  %19 = load i64, i64* %i, align 8, !dbg !6469
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6471
  %call17 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %20), !dbg !6472
  %conv18 = zext i32 %call17 to i64, !dbg !6472
  %cmp19 = icmp ult i64 %19, %conv18, !dbg !6473
  br i1 %cmp19, label %for.body21, label %for.end34, !dbg !6474

for.body21:                                       ; preds = %for.cond16
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !6475, metadata !DIExpression()), !dbg !6477
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6478
  %22 = load i64, i64* %i, align 8, !dbg !6479
  %call22 = call %union.tree_node* @gimple_phi_arg_def(%union.gimple_statement_d* %21, i64 %22), !dbg !6480
  store %union.tree_node* %call22, %union.tree_node** %arg, align 8, !dbg !6477
  %23 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !6481
  %tobool23 = icmp ne %union.tree_node* %23, null, !dbg !6481
  br i1 %tobool23, label %land.lhs.true, label %if.end31, !dbg !6483

land.lhs.true:                                    ; preds = %for.body21
  %24 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !6484
  %base = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !6484
  %25 = bitcast %struct.tree_base* %base to i64*, !dbg !6484
  %bf.load = load i64, i64* %25, align 8, !dbg !6484
  %bf.clear = and i64 %bf.load, 65535, !dbg !6484
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6484
  %cmp24 = icmp eq i32 %bf.cast, 141, !dbg !6485
  br i1 %cmp24, label %land.lhs.true26, label %if.end31, !dbg !6486

land.lhs.true26:                                  ; preds = %land.lhs.true
  %26 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !6487
  %27 = load i8 (%union.tree_node*, %union.gimple_statement_d*, i8*)*, i8 (%union.tree_node*, %union.gimple_statement_d*, i8*)** %fn.addr, align 8, !dbg !6488
  %28 = load i8*, i8** %data.addr, align 8, !dbg !6489
  %29 = load %struct.pointer_set_t*, %struct.pointer_set_t** %visited.addr, align 8, !dbg !6490
  %30 = load i8, i8* %is_dfs.addr, align 1, !dbg !6491
  %call27 = call zeroext i8 @walk_use_def_chains_1(%union.tree_node* %26, i8 (%union.tree_node*, %union.gimple_statement_d*, i8*)* %27, i8* %28, %struct.pointer_set_t* %29, i8 zeroext %30), !dbg !6492
  %conv28 = zext i8 %call27 to i32, !dbg !6492
  %tobool29 = icmp ne i32 %conv28, 0, !dbg !6492
  br i1 %tobool29, label %if.then30, label %if.end31, !dbg !6493

if.then30:                                        ; preds = %land.lhs.true26
  store i8 1, i8* %retval, align 1, !dbg !6494
  br label %return, !dbg !6494

if.end31:                                         ; preds = %land.lhs.true26, %land.lhs.true, %for.body21
  br label %for.inc32, !dbg !6495

for.inc32:                                        ; preds = %if.end31
  %31 = load i64, i64* %i, align 8, !dbg !6496
  %inc33 = add i64 %31, 1, !dbg !6496
  store i64 %inc33, i64* %i, align 8, !dbg !6496
  br label %for.cond16, !dbg !6497, !llvm.loop !6498

for.end34:                                        ; preds = %for.cond16
  %32 = load i8, i8* %is_dfs.addr, align 1, !dbg !6500
  %tobool35 = icmp ne i8 %32, 0, !dbg !6500
  br i1 %tobool35, label %if.then36, label %if.end51, !dbg !6502

if.then36:                                        ; preds = %for.end34
  store i64 0, i64* %i, align 8, !dbg !6503
  br label %for.cond37, !dbg !6505

for.cond37:                                       ; preds = %for.inc48, %if.then36
  %33 = load i64, i64* %i, align 8, !dbg !6506
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6508
  %call38 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %34), !dbg !6509
  %conv39 = zext i32 %call38 to i64, !dbg !6509
  %cmp40 = icmp ult i64 %33, %conv39, !dbg !6510
  br i1 %cmp40, label %for.body42, label %for.end50, !dbg !6511

for.body42:                                       ; preds = %for.cond37
  %35 = load i8 (%union.tree_node*, %union.gimple_statement_d*, i8*)*, i8 (%union.tree_node*, %union.gimple_statement_d*, i8*)** %fn.addr, align 8, !dbg !6512
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6514
  %37 = load i64, i64* %i, align 8, !dbg !6515
  %call43 = call %union.tree_node* @gimple_phi_arg_def(%union.gimple_statement_d* %36, i64 %37), !dbg !6516
  %38 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6517
  %39 = load i8*, i8** %data.addr, align 8, !dbg !6518
  %call44 = call zeroext i8 %35(%union.tree_node* %call43, %union.gimple_statement_d* %38, i8* %39), !dbg !6512
  %tobool45 = icmp ne i8 %call44, 0, !dbg !6512
  br i1 %tobool45, label %if.then46, label %if.end47, !dbg !6519

if.then46:                                        ; preds = %for.body42
  store i8 1, i8* %retval, align 1, !dbg !6520
  br label %return, !dbg !6520

if.end47:                                         ; preds = %for.body42
  br label %for.inc48, !dbg !6521

for.inc48:                                        ; preds = %if.end47
  %40 = load i64, i64* %i, align 8, !dbg !6522
  %inc49 = add i64 %40, 1, !dbg !6522
  store i64 %inc49, i64* %i, align 8, !dbg !6522
  br label %for.cond37, !dbg !6523, !llvm.loop !6524

for.end50:                                        ; preds = %for.cond37
  br label %if.end51, !dbg !6525

if.end51:                                         ; preds = %for.end50, %for.end34
  br label %if.end52

if.end52:                                         ; preds = %if.end51
  store i8 0, i8* %retval, align 1, !dbg !6526
  br label %return, !dbg !6526

return:                                           ; preds = %if.end52, %if.then46, %if.then30, %if.then13, %if.then3, %if.then
  %41 = load i8, i8* %retval, align 1, !dbg !6527
  ret i8 %41, !dbg !6527
}

declare dso_local void @pointer_set_destroy(%struct.pointer_set_t*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @ssa_undefined_value_p(%union.tree_node* %t) #0 !dbg !6528 {
entry:
  %retval = alloca i8, align 1
  %t.addr = alloca %union.tree_node*, align 8
  %var = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !6529, metadata !DIExpression()), !dbg !6530
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !6531, metadata !DIExpression()), !dbg !6532
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !6533
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !6533
  %var1 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !6533
  %1 = load %union.tree_node*, %union.tree_node** %var1, align 8, !dbg !6533
  store %union.tree_node* %1, %union.tree_node** %var, align 8, !dbg !6532
  %2 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6534
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !6534
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !6534
  %bf.load = load i64, i64* %3, align 8, !dbg !6534
  %bf.clear = and i64 %bf.load, 65535, !dbg !6534
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6534
  %cmp = icmp eq i32 %bf.cast, 34, !dbg !6536
  br i1 %cmp, label %if.then, label %if.end, !dbg !6537

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !6538
  br label %return, !dbg !6538

if.end:                                           ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6539
  %base2 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !6539
  %5 = bitcast %struct.tree_base* %base2 to i64*, !dbg !6539
  %bf.load3 = load i64, i64* %5, align 8, !dbg !6539
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !6539
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !6539
  %cmp6 = icmp eq i32 %bf.cast5, 32, !dbg !6541
  br i1 %cmp6, label %land.lhs.true, label %if.end10, !dbg !6542

land.lhs.true:                                    ; preds = %if.end
  %6 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6543
  %decl_with_vis = bitcast %union.tree_node* %6 to %struct.tree_decl_with_vis*, !dbg !6543
  %hard_register = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 4, !dbg !6543
  %7 = bitcast i24* %hard_register to i32*, !dbg !6543
  %bf.load7 = load i32, i32* %7, align 8, !dbg !6543
  %bf.lshr = lshr i32 %bf.load7, 1, !dbg !6543
  %bf.clear8 = and i32 %bf.lshr, 1, !dbg !6543
  %tobool = icmp ne i32 %bf.clear8, 0, !dbg !6543
  br i1 %tobool, label %if.then9, label %if.end10, !dbg !6544

if.then9:                                         ; preds = %land.lhs.true
  store i8 0, i8* %retval, align 1, !dbg !6545
  br label %return, !dbg !6545

if.end10:                                         ; preds = %land.lhs.true, %if.end
  %8 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !6546
  %ssa_name11 = bitcast %union.tree_node* %8 to %struct.tree_ssa_name*, !dbg !6546
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name11, i32 0, i32 2, !dbg !6546
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6546
  %call = call zeroext i8 @gimple_nop_p(%union.gimple_statement_d* %9), !dbg !6547
  store i8 %call, i8* %retval, align 1, !dbg !6548
  br label %return, !dbg !6548

return:                                           ; preds = %if.end10, %if.then9, %if.then
  %10 = load i8, i8* %retval, align 1, !dbg !6549
  ret i8 %10, !dbg !6549
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gate_warn_uninitialized() #0 !dbg !6550 {
entry:
  %0 = load i32, i32* @warn_uninitialized, align 4, !dbg !6551
  %cmp = icmp ne i32 %0, 0, !dbg !6552
  %conv = zext i1 %cmp to i32, !dbg !6552
  %conv1 = trunc i32 %conv to i8, !dbg !6551
  ret i8 %conv1, !dbg !6553
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @execute_early_warn_uninitialized() #0 !dbg !6554 {
entry:
  %0 = load i32, i32* @optimize, align 4, !dbg !6555
  %tobool = icmp ne i32 %0, 0, !dbg !6556
  %lnot = xor i1 %tobool, true, !dbg !6556
  %lnot.ext = zext i1 %lnot to i32, !dbg !6556
  %conv = trunc i32 %lnot.ext to i8, !dbg !6556
  %call = call i32 @warn_uninitialized_vars(i8 zeroext %conv), !dbg !6557
  ret i32 0, !dbg !6558
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @execute_late_warn_uninitialized() #0 !dbg !6559 {
entry:
  %bb = alloca %struct.basic_block_def*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !6560, metadata !DIExpression()), !dbg !6561
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !6562, metadata !DIExpression()), !dbg !6563
  %call = call i32 @warn_uninitialized_vars(i8 zeroext 1), !dbg !6564
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6565
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !6565
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !6565
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !6565
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 0, !dbg !6565
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !6565
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 6, !dbg !6565
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !6565
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb, align 8, !dbg !6565
  br label %for.cond, !dbg !6565

for.cond:                                         ; preds = %for.inc7, %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6567
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6567
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !6567
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !6567
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !6567
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 1, !dbg !6567
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !6567
  %cmp = icmp ne %struct.basic_block_def* %4, %7, !dbg !6567
  br i1 %cmp, label %for.body, label %for.end9, !dbg !6565

for.body:                                         ; preds = %for.cond
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6569
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %8), !dbg !6571
  %9 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !6571
  %10 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !6571
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 24, i1 false), !dbg !6571
  br label %for.cond3, !dbg !6572

for.cond3:                                        ; preds = %for.inc, %for.body
  %call4 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !6573
  %tobool = icmp ne i8 %call4, 0, !dbg !6575
  %lnot = xor i1 %tobool, true, !dbg !6575
  br i1 %lnot, label %for.body5, label %for.end, !dbg !6576

for.body5:                                        ; preds = %for.cond3
  %call6 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !6577
  call void @warn_uninitialized_phi(%union.gimple_statement_d* %call6), !dbg !6578
  br label %for.inc, !dbg !6578

for.inc:                                          ; preds = %for.body5
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !6579
  br label %for.cond3, !dbg !6580, !llvm.loop !6581

for.end:                                          ; preds = %for.cond3
  br label %for.inc7, !dbg !6582

for.inc7:                                         ; preds = %for.end
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6567
  %next_bb8 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %11, i32 0, i32 6, !dbg !6567
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb8, align 8, !dbg !6567
  store %struct.basic_block_def* %12, %struct.basic_block_def** %bb, align 8, !dbg !6567
  br label %for.cond, !dbg !6567, !llvm.loop !6583

for.end9:                                         ; preds = %for.cond
  ret i32 0, !dbg !6585
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @execute_update_addresses_taken(i8 zeroext %do_optimize) #0 !dbg !6586 {
entry:
  %do_optimize.addr = alloca i8, align 1
  %var = alloca %union.tree_node*, align 8
  %rvi = alloca %struct.referenced_var_iterator, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %addresses_taken = alloca %struct.bitmap_head_def*, align 8
  %not_reg_needs = alloca %struct.bitmap_head_def*, align 8
  %update_vops = alloca i8, align 1
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  %lhs = alloca %union.tree_node*, align 8
  %tmp42 = alloca %struct.gimple_stmt_iterator, align 8
  %i = alloca i64, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %op = alloca %union.tree_node*, align 8
  %var58 = alloca %union.tree_node*, align 8
  %tmp223 = alloca %struct.gimple_stmt_iterator, align 8
  %stmt229 = alloca %union.gimple_statement_d*, align 8
  store i8 %do_optimize, i8* %do_optimize.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %do_optimize.addr, metadata !6587, metadata !DIExpression()), !dbg !6588
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !6589, metadata !DIExpression()), !dbg !6590
  call void @llvm.dbg.declare(metadata %struct.referenced_var_iterator* %rvi, metadata !6591, metadata !DIExpression()), !dbg !6592
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !6593, metadata !DIExpression()), !dbg !6594
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !6595, metadata !DIExpression()), !dbg !6596
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %addresses_taken, metadata !6597, metadata !DIExpression()), !dbg !6598
  %call = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !6599
  store %struct.bitmap_head_def* %call, %struct.bitmap_head_def** %addresses_taken, align 8, !dbg !6598
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %not_reg_needs, metadata !6600, metadata !DIExpression()), !dbg !6601
  %call1 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !6602
  store %struct.bitmap_head_def* %call1, %struct.bitmap_head_def** %not_reg_needs, align 8, !dbg !6601
  call void @llvm.dbg.declare(metadata i8* %update_vops, metadata !6603, metadata !DIExpression()), !dbg !6604
  store i8 0, i8* %update_vops, align 1, !dbg !6604
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6605
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !6605
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !6605
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !6605
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 0, !dbg !6605
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !6605
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 6, !dbg !6605
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !6605
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb, align 8, !dbg !6605
  br label %for.cond, !dbg !6605

for.cond:                                         ; preds = %for.inc90, %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6607
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6607
  %add.ptr2 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !6607
  %cfg3 = getelementptr inbounds %struct.function, %struct.function* %add.ptr2, i32 0, i32 1, !dbg !6607
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg3, align 8, !dbg !6607
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 1, !dbg !6607
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !6607
  %cmp = icmp ne %struct.basic_block_def* %4, %7, !dbg !6607
  br i1 %cmp, label %for.body, label %for.end92, !dbg !6605

for.body:                                         ; preds = %for.cond
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6609
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %8), !dbg !6612
  %9 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !6612
  %10 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !6612
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 24, i1 false), !dbg !6612
  br label %for.cond4, !dbg !6613

for.cond4:                                        ; preds = %for.inc, %for.body
  %call5 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !6614
  %tobool = icmp ne i8 %call5, 0, !dbg !6616
  %lnot = xor i1 %tobool, true, !dbg !6616
  br i1 %lnot, label %for.body6, label %for.end, !dbg !6617

for.body6:                                        ; preds = %for.cond4
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !6618, metadata !DIExpression()), !dbg !6620
  %call7 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !6621
  store %union.gimple_statement_d* %call7, %union.gimple_statement_d** %stmt, align 8, !dbg !6620
  call void @llvm.dbg.declare(metadata i32* %code, metadata !6622, metadata !DIExpression()), !dbg !6623
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6624
  %call8 = call i32 @gimple_code(%union.gimple_statement_d* %11), !dbg !6625
  store i32 %call8, i32* %code, align 4, !dbg !6623
  %12 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %addresses_taken, align 8, !dbg !6626
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6627
  %call9 = call zeroext i8 @gimple_ior_addresses_taken(%struct.bitmap_head_def* %12, %union.gimple_statement_d* %13), !dbg !6628
  %14 = load i32, i32* %code, align 4, !dbg !6629
  %cmp10 = icmp eq i32 %14, 6, !dbg !6631
  br i1 %cmp10, label %if.then, label %lor.lhs.false, !dbg !6632

lor.lhs.false:                                    ; preds = %for.body6
  %15 = load i32, i32* %code, align 4, !dbg !6633
  %cmp11 = icmp eq i32 %15, 8, !dbg !6634
  br i1 %cmp11, label %if.then, label %if.end41, !dbg !6635

if.then:                                          ; preds = %lor.lhs.false, %for.body6
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !6636, metadata !DIExpression()), !dbg !6638
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6639
  %call12 = call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %16), !dbg !6640
  store %union.tree_node* %call12, %union.tree_node** %lhs, align 8, !dbg !6638
  %17 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6641
  %tobool13 = icmp ne %union.tree_node* %17, null, !dbg !6641
  br i1 %tobool13, label %land.lhs.true, label %if.else, !dbg !6643

land.lhs.true:                                    ; preds = %if.then
  %18 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6644
  %base = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !6644
  %19 = bitcast %struct.tree_base* %base to i64*, !dbg !6644
  %bf.load = load i64, i64* %19, align 8, !dbg !6644
  %bf.clear = and i64 %bf.load, 65535, !dbg !6644
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6644
  %cmp14 = icmp eq i32 %bf.cast, 152, !dbg !6645
  br i1 %cmp14, label %land.lhs.true15, label %if.else, !dbg !6646

land.lhs.true15:                                  ; preds = %land.lhs.true
  %20 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6647
  %exp = bitcast %union.tree_node* %20 to %struct.tree_exp*, !dbg !6647
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !6647
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !6647
  %21 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6647
  %tobool16 = icmp ne %union.tree_node* %21, null, !dbg !6647
  br i1 %tobool16, label %if.then17, label %if.else, !dbg !6648

if.then17:                                        ; preds = %land.lhs.true15
  %22 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %not_reg_needs, align 8, !dbg !6649
  %23 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6650
  %exp18 = bitcast %union.tree_node* %23 to %struct.tree_exp*, !dbg !6650
  %operands19 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp18, i32 0, i32 3, !dbg !6650
  %arrayidx20 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands19, i64 0, i64 0, !dbg !6650
  %24 = load %union.tree_node*, %union.tree_node** %arrayidx20, align 8, !dbg !6650
  %decl_minimal = bitcast %union.tree_node* %24 to %struct.tree_decl_minimal*, !dbg !6650
  %uid = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 2, !dbg !6650
  %25 = load i32, i32* %uid, align 4, !dbg !6650
  %call21 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %22, i32 %25), !dbg !6651
  br label %if.end40, !dbg !6651

if.else:                                          ; preds = %land.lhs.true15, %land.lhs.true, %if.then
  %26 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6652
  %tobool22 = icmp ne %union.tree_node* %26, null, !dbg !6652
  br i1 %tobool22, label %land.lhs.true23, label %if.end39, !dbg !6654

land.lhs.true23:                                  ; preds = %if.else
  %27 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6655
  %call24 = call zeroext i8 @handled_component_p(%union.tree_node* %27), !dbg !6656
  %conv = zext i8 %call24 to i32, !dbg !6656
  %tobool25 = icmp ne i32 %conv, 0, !dbg !6656
  br i1 %tobool25, label %if.then26, label %if.end39, !dbg !6657

if.then26:                                        ; preds = %land.lhs.true23
  %28 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6658
  %call27 = call %union.tree_node* @get_base_address(%union.tree_node* %28), !dbg !6660
  store %union.tree_node* %call27, %union.tree_node** %var, align 8, !dbg !6661
  %29 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6662
  %base28 = bitcast %union.tree_node* %29 to %struct.tree_base*, !dbg !6662
  %30 = bitcast %struct.tree_base* %base28 to i64*, !dbg !6662
  %bf.load29 = load i64, i64* %30, align 8, !dbg !6662
  %bf.clear30 = and i64 %bf.load29, 65535, !dbg !6662
  %bf.cast31 = trunc i64 %bf.clear30 to i32, !dbg !6662
  %idxprom = sext i32 %bf.cast31 to i64, !dbg !6662
  %arrayidx32 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !6662
  %31 = load i32, i32* %arrayidx32, align 4, !dbg !6662
  %cmp33 = icmp eq i32 %31, 3, !dbg !6662
  br i1 %cmp33, label %if.then35, label %if.end, !dbg !6664

if.then35:                                        ; preds = %if.then26
  %32 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %not_reg_needs, align 8, !dbg !6665
  %33 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6666
  %decl_minimal36 = bitcast %union.tree_node* %33 to %struct.tree_decl_minimal*, !dbg !6666
  %uid37 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal36, i32 0, i32 2, !dbg !6666
  %34 = load i32, i32* %uid37, align 4, !dbg !6666
  %call38 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %32, i32 %34), !dbg !6667
  br label %if.end, !dbg !6667

if.end:                                           ; preds = %if.then35, %if.then26
  br label %if.end39, !dbg !6668

if.end39:                                         ; preds = %if.end, %land.lhs.true23, %if.else
  br label %if.end40

if.end40:                                         ; preds = %if.end39, %if.then17
  br label %if.end41, !dbg !6669

if.end41:                                         ; preds = %if.end40, %lor.lhs.false
  br label %for.inc, !dbg !6670

for.inc:                                          ; preds = %if.end41
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !6671
  br label %for.cond4, !dbg !6672, !llvm.loop !6673

for.end:                                          ; preds = %for.cond4
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6675
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp42, %struct.basic_block_def* %35), !dbg !6677
  %36 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !6677
  %37 = bitcast %struct.gimple_stmt_iterator* %tmp42 to i8*, !dbg !6677
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %36, i8* align 8 %37, i64 24, i1 false), !dbg !6677
  br label %for.cond43, !dbg !6678

for.cond43:                                       ; preds = %for.inc88, %for.end
  %call44 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !6679
  %tobool45 = icmp ne i8 %call44, 0, !dbg !6681
  %lnot46 = xor i1 %tobool45, true, !dbg !6681
  br i1 %lnot46, label %for.body47, label %for.end89, !dbg !6682

for.body47:                                       ; preds = %for.cond43
  call void @llvm.dbg.declare(metadata i64* %i, metadata !6683, metadata !DIExpression()), !dbg !6685
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !6686, metadata !DIExpression()), !dbg !6687
  %call48 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !6688
  store %union.gimple_statement_d* %call48, %union.gimple_statement_d** %phi, align 8, !dbg !6687
  store i64 0, i64* %i, align 8, !dbg !6689
  br label %for.cond49, !dbg !6691

for.cond49:                                       ; preds = %for.inc86, %for.body47
  %38 = load i64, i64* %i, align 8, !dbg !6692
  %39 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !6694
  %call50 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %39), !dbg !6695
  %conv51 = zext i32 %call50 to i64, !dbg !6695
  %cmp52 = icmp ult i64 %38, %conv51, !dbg !6696
  br i1 %cmp52, label %for.body54, label %for.end87, !dbg !6697

for.body54:                                       ; preds = %for.cond49
  call void @llvm.dbg.declare(metadata %union.tree_node** %op, metadata !6698, metadata !DIExpression()), !dbg !6700
  %40 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !6701
  %41 = load i64, i64* %i, align 8, !dbg !6701
  %conv55 = trunc i64 %41 to i32, !dbg !6701
  %call56 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %40, i32 %conv55), !dbg !6701
  %call57 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call56), !dbg !6701
  store %union.tree_node* %call57, %union.tree_node** %op, align 8, !dbg !6700
  call void @llvm.dbg.declare(metadata %union.tree_node** %var58, metadata !6702, metadata !DIExpression()), !dbg !6703
  %42 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !6704
  %base59 = bitcast %union.tree_node* %42 to %struct.tree_base*, !dbg !6704
  %43 = bitcast %struct.tree_base* %base59 to i64*, !dbg !6704
  %bf.load60 = load i64, i64* %43, align 8, !dbg !6704
  %bf.clear61 = and i64 %bf.load60, 65535, !dbg !6704
  %bf.cast62 = trunc i64 %bf.clear61 to i32, !dbg !6704
  %cmp63 = icmp eq i32 %bf.cast62, 121, !dbg !6706
  br i1 %cmp63, label %land.lhs.true65, label %if.end85, !dbg !6707

land.lhs.true65:                                  ; preds = %for.body54
  %44 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !6708
  %exp66 = bitcast %union.tree_node* %44 to %struct.tree_exp*, !dbg !6708
  %operands67 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp66, i32 0, i32 3, !dbg !6708
  %arrayidx68 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands67, i64 0, i64 0, !dbg !6708
  %45 = load %union.tree_node*, %union.tree_node** %arrayidx68, align 8, !dbg !6708
  %call69 = call %union.tree_node* @get_base_address(%union.tree_node* %45), !dbg !6709
  store %union.tree_node* %call69, %union.tree_node** %var58, align 8, !dbg !6710
  %cmp70 = icmp ne %union.tree_node* %call69, null, !dbg !6711
  br i1 %cmp70, label %land.lhs.true72, label %if.end85, !dbg !6712

land.lhs.true72:                                  ; preds = %land.lhs.true65
  %46 = load %union.tree_node*, %union.tree_node** %var58, align 8, !dbg !6713
  %base73 = bitcast %union.tree_node* %46 to %struct.tree_base*, !dbg !6713
  %47 = bitcast %struct.tree_base* %base73 to i64*, !dbg !6713
  %bf.load74 = load i64, i64* %47, align 8, !dbg !6713
  %bf.clear75 = and i64 %bf.load74, 65535, !dbg !6713
  %bf.cast76 = trunc i64 %bf.clear75 to i32, !dbg !6713
  %idxprom77 = sext i32 %bf.cast76 to i64, !dbg !6713
  %arrayidx78 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom77, !dbg !6713
  %48 = load i32, i32* %arrayidx78, align 4, !dbg !6713
  %cmp79 = icmp eq i32 %48, 3, !dbg !6713
  br i1 %cmp79, label %if.then81, label %if.end85, !dbg !6714

if.then81:                                        ; preds = %land.lhs.true72
  %49 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %addresses_taken, align 8, !dbg !6715
  %50 = load %union.tree_node*, %union.tree_node** %var58, align 8, !dbg !6716
  %decl_minimal82 = bitcast %union.tree_node* %50 to %struct.tree_decl_minimal*, !dbg !6716
  %uid83 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal82, i32 0, i32 2, !dbg !6716
  %51 = load i32, i32* %uid83, align 4, !dbg !6716
  %call84 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %49, i32 %51), !dbg !6717
  br label %if.end85, !dbg !6717

if.end85:                                         ; preds = %if.then81, %land.lhs.true72, %land.lhs.true65, %for.body54
  br label %for.inc86, !dbg !6718

for.inc86:                                        ; preds = %if.end85
  %52 = load i64, i64* %i, align 8, !dbg !6719
  %inc = add i64 %52, 1, !dbg !6719
  store i64 %inc, i64* %i, align 8, !dbg !6719
  br label %for.cond49, !dbg !6720, !llvm.loop !6721

for.end87:                                        ; preds = %for.cond49
  br label %for.inc88, !dbg !6723

for.inc88:                                        ; preds = %for.end87
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !6724
  br label %for.cond43, !dbg !6725, !llvm.loop !6726

for.end89:                                        ; preds = %for.cond43
  br label %for.inc90, !dbg !6728

for.inc90:                                        ; preds = %for.end89
  %53 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6607
  %next_bb91 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %53, i32 0, i32 6, !dbg !6607
  %54 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb91, align 8, !dbg !6607
  store %struct.basic_block_def* %54, %struct.basic_block_def** %bb, align 8, !dbg !6607
  br label %for.cond, !dbg !6607, !llvm.loop !6729

for.end92:                                        ; preds = %for.cond
  %55 = load i32, i32* @optimize, align 4, !dbg !6731
  %tobool93 = icmp ne i32 %55, 0, !dbg !6731
  br i1 %tobool93, label %land.lhs.true94, label %if.end209, !dbg !6733

land.lhs.true94:                                  ; preds = %for.end92
  %56 = load i8, i8* %do_optimize.addr, align 1, !dbg !6734
  %conv95 = zext i8 %56 to i32, !dbg !6734
  %tobool96 = icmp ne i32 %conv95, 0, !dbg !6734
  br i1 %tobool96, label %if.then97, label %if.end209, !dbg !6735

if.then97:                                        ; preds = %land.lhs.true94
  %call98 = call %union.tree_node* @first_referenced_var(%struct.referenced_var_iterator* %rvi), !dbg !6736
  store %union.tree_node* %call98, %union.tree_node** %var, align 8, !dbg !6736
  br label %for.cond99, !dbg !6736

for.cond99:                                       ; preds = %for.inc206, %if.then97
  %call100 = call zeroext i8 @end_referenced_vars_p(%struct.referenced_var_iterator* %rvi), !dbg !6738
  %tobool101 = icmp ne i8 %call100, 0, !dbg !6738
  %lnot102 = xor i1 %tobool101, true, !dbg !6738
  br i1 %lnot102, label %for.body103, label %for.end208, !dbg !6736

for.body103:                                      ; preds = %for.cond99
  %57 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6740
  %call104 = call zeroext i8 @is_global_var(%union.tree_node* %57), !dbg !6743
  %conv105 = zext i8 %call104 to i32, !dbg !6743
  %tobool106 = icmp ne i32 %conv105, 0, !dbg !6743
  br i1 %tobool106, label %if.then119, label %lor.lhs.false107, !dbg !6744

lor.lhs.false107:                                 ; preds = %for.body103
  %58 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6745
  %base108 = bitcast %union.tree_node* %58 to %struct.tree_base*, !dbg !6745
  %59 = bitcast %struct.tree_base* %base108 to i64*, !dbg !6745
  %bf.load109 = load i64, i64* %59, align 8, !dbg !6745
  %bf.clear110 = and i64 %bf.load109, 65535, !dbg !6745
  %bf.cast111 = trunc i64 %bf.clear110 to i32, !dbg !6745
  %cmp112 = icmp eq i32 %bf.cast111, 36, !dbg !6746
  br i1 %cmp112, label %if.then119, label %lor.lhs.false114, !dbg !6747

lor.lhs.false114:                                 ; preds = %lor.lhs.false107
  %60 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %addresses_taken, align 8, !dbg !6748
  %61 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6749
  %decl_minimal115 = bitcast %union.tree_node* %61 to %struct.tree_decl_minimal*, !dbg !6749
  %uid116 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal115, i32 0, i32 2, !dbg !6749
  %62 = load i32, i32* %uid116, align 4, !dbg !6749
  %call117 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %60, i32 %62), !dbg !6750
  %tobool118 = icmp ne i32 %call117, 0, !dbg !6750
  br i1 %tobool118, label %if.then119, label %if.end120, !dbg !6751

if.then119:                                       ; preds = %lor.lhs.false114, %lor.lhs.false107, %for.body103
  br label %for.inc206, !dbg !6752

if.end120:                                        ; preds = %lor.lhs.false114
  %63 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6753
  %base121 = bitcast %union.tree_node* %63 to %struct.tree_base*, !dbg !6753
  %64 = bitcast %struct.tree_base* %base121 to i64*, !dbg !6753
  %bf.load122 = load i64, i64* %64, align 8, !dbg !6753
  %bf.lshr = lshr i64 %bf.load122, 18, !dbg !6753
  %bf.clear123 = and i64 %bf.lshr, 1, !dbg !6753
  %bf.cast124 = trunc i64 %bf.clear123 to i32, !dbg !6753
  %tobool125 = icmp ne i32 %bf.cast124, 0, !dbg !6753
  br i1 %tobool125, label %land.lhs.true126, label %if.end147, !dbg !6755

land.lhs.true126:                                 ; preds = %if.end120
  %65 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6756
  %common = bitcast %union.tree_node* %65 to %struct.tree_common*, !dbg !6756
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6756
  %66 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6756
  %call127 = call zeroext i8 @is_gimple_reg_type(%union.tree_node* %66), !dbg !6757
  %tobool128 = icmp ne i8 %call127, 0, !dbg !6757
  br i1 %tobool128, label %lor.lhs.false129, label %if.then134, !dbg !6758

lor.lhs.false129:                                 ; preds = %land.lhs.true126
  %67 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %not_reg_needs, align 8, !dbg !6759
  %68 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6760
  %decl_minimal130 = bitcast %union.tree_node* %68 to %struct.tree_decl_minimal*, !dbg !6760
  %uid131 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal130, i32 0, i32 2, !dbg !6760
  %69 = load i32, i32* %uid131, align 4, !dbg !6760
  %call132 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %67, i32 %69), !dbg !6761
  %tobool133 = icmp ne i32 %call132, 0, !dbg !6761
  br i1 %tobool133, label %if.end147, label %if.then134, !dbg !6762

if.then134:                                       ; preds = %lor.lhs.false129, %land.lhs.true126
  %70 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6763
  %base135 = bitcast %union.tree_node* %70 to %struct.tree_base*, !dbg !6763
  %71 = bitcast %struct.tree_base* %base135 to i64*, !dbg !6763
  %bf.load136 = load i64, i64* %71, align 8, !dbg !6765
  %bf.clear137 = and i64 %bf.load136, -262145, !dbg !6765
  store i64 %bf.clear137, i64* %71, align 8, !dbg !6765
  %72 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6766
  %call138 = call zeroext i8 @is_gimple_reg(%union.tree_node* %72), !dbg !6768
  %tobool139 = icmp ne i8 %call138, 0, !dbg !6768
  br i1 %tobool139, label %if.then140, label %if.end141, !dbg !6769

if.then140:                                       ; preds = %if.then134
  %73 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6770
  call void @mark_sym_for_renaming(%union.tree_node* %73), !dbg !6771
  br label %if.end141, !dbg !6771

if.end141:                                        ; preds = %if.then140, %if.then134
  store i8 1, i8* %update_vops, align 1, !dbg !6772
  %74 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6773
  %tobool142 = icmp ne %struct._IO_FILE* %74, null, !dbg !6773
  br i1 %tobool142, label %if.then143, label %if.end146, !dbg !6775

if.then143:                                       ; preds = %if.end141
  %75 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6776
  %call144 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %75, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.16, i64 0, i64 0)), !dbg !6778
  %76 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6779
  %77 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6780
  call void @print_generic_expr(%struct._IO_FILE* %76, %union.tree_node* %77, i32 0), !dbg !6781
  %78 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6782
  %call145 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %78, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i64 0, i64 0)), !dbg !6783
  br label %if.end146, !dbg !6784

if.end146:                                        ; preds = %if.then143, %if.end141
  br label %if.end147, !dbg !6785

if.end147:                                        ; preds = %if.end146, %lor.lhs.false129, %if.end120
  %79 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6786
  %decl_common = bitcast %union.tree_node* %79 to %struct.tree_decl_common*, !dbg !6786
  %gimple_reg_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !6786
  %80 = bitcast i40* %gimple_reg_flag to i64*, !dbg !6786
  %bf.load148 = load i64, i64* %80, align 8, !dbg !6786
  %bf.lshr149 = lshr i64 %bf.load148, 27, !dbg !6786
  %bf.clear150 = and i64 %bf.lshr149, 1, !dbg !6786
  %bf.cast151 = trunc i64 %bf.clear150 to i32, !dbg !6786
  %tobool152 = icmp ne i32 %bf.cast151, 0, !dbg !6786
  br i1 %tobool152, label %if.end205, label %land.lhs.true153, !dbg !6788

land.lhs.true153:                                 ; preds = %if.end147
  %81 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %not_reg_needs, align 8, !dbg !6789
  %82 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6790
  %decl_minimal154 = bitcast %union.tree_node* %82 to %struct.tree_decl_minimal*, !dbg !6790
  %uid155 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal154, i32 0, i32 2, !dbg !6790
  %83 = load i32, i32* %uid155, align 4, !dbg !6790
  %call156 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %81, i32 %83), !dbg !6791
  %tobool157 = icmp ne i32 %call156, 0, !dbg !6791
  br i1 %tobool157, label %if.end205, label %land.lhs.true158, !dbg !6792

land.lhs.true158:                                 ; preds = %land.lhs.true153
  %84 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6793
  %common159 = bitcast %union.tree_node* %84 to %struct.tree_common*, !dbg !6793
  %type160 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common159, i32 0, i32 2, !dbg !6793
  %85 = load %union.tree_node*, %union.tree_node** %type160, align 8, !dbg !6793
  %base161 = bitcast %union.tree_node* %85 to %struct.tree_base*, !dbg !6793
  %86 = bitcast %struct.tree_base* %base161 to i64*, !dbg !6793
  %bf.load162 = load i64, i64* %86, align 8, !dbg !6793
  %bf.clear163 = and i64 %bf.load162, 65535, !dbg !6793
  %bf.cast164 = trunc i64 %bf.clear163 to i32, !dbg !6793
  %cmp165 = icmp eq i32 %bf.cast164, 13, !dbg !6794
  br i1 %cmp165, label %land.lhs.true176, label %lor.lhs.false167, !dbg !6795

lor.lhs.false167:                                 ; preds = %land.lhs.true158
  %87 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6796
  %common168 = bitcast %union.tree_node* %87 to %struct.tree_common*, !dbg !6796
  %type169 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common168, i32 0, i32 2, !dbg !6796
  %88 = load %union.tree_node*, %union.tree_node** %type169, align 8, !dbg !6796
  %base170 = bitcast %union.tree_node* %88 to %struct.tree_base*, !dbg !6796
  %89 = bitcast %struct.tree_base* %base170 to i64*, !dbg !6796
  %bf.load171 = load i64, i64* %89, align 8, !dbg !6796
  %bf.clear172 = and i64 %bf.load171, 65535, !dbg !6796
  %bf.cast173 = trunc i64 %bf.clear172 to i32, !dbg !6796
  %cmp174 = icmp eq i32 %bf.cast173, 14, !dbg !6797
  br i1 %cmp174, label %land.lhs.true176, label %if.end205, !dbg !6798

land.lhs.true176:                                 ; preds = %lor.lhs.false167, %land.lhs.true158
  %90 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6799
  %base177 = bitcast %union.tree_node* %90 to %struct.tree_base*, !dbg !6799
  %91 = bitcast %struct.tree_base* %base177 to i64*, !dbg !6799
  %bf.load178 = load i64, i64* %91, align 8, !dbg !6799
  %bf.lshr179 = lshr i64 %bf.load178, 19, !dbg !6799
  %bf.clear180 = and i64 %bf.lshr179, 1, !dbg !6799
  %bf.cast181 = trunc i64 %bf.clear180 to i32, !dbg !6799
  %tobool182 = icmp ne i32 %bf.cast181, 0, !dbg !6799
  br i1 %tobool182, label %if.end205, label %land.lhs.true183, !dbg !6800

land.lhs.true183:                                 ; preds = %land.lhs.true176
  %92 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6801
  %base184 = bitcast %union.tree_node* %92 to %struct.tree_base*, !dbg !6801
  %93 = bitcast %struct.tree_base* %base184 to i64*, !dbg !6801
  %bf.load185 = load i64, i64* %93, align 8, !dbg !6801
  %bf.clear186 = and i64 %bf.load185, 65535, !dbg !6801
  %bf.cast187 = trunc i64 %bf.clear186 to i32, !dbg !6801
  %cmp188 = icmp ne i32 %bf.cast187, 32, !dbg !6802
  br i1 %cmp188, label %if.then195, label %lor.lhs.false190, !dbg !6803

lor.lhs.false190:                                 ; preds = %land.lhs.true183
  %94 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6804
  %decl_with_vis = bitcast %union.tree_node* %94 to %struct.tree_decl_with_vis*, !dbg !6804
  %hard_register = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 4, !dbg !6804
  %95 = bitcast i24* %hard_register to i32*, !dbg !6804
  %bf.load191 = load i32, i32* %95, align 8, !dbg !6804
  %bf.lshr192 = lshr i32 %bf.load191, 1, !dbg !6804
  %bf.clear193 = and i32 %bf.lshr192, 1, !dbg !6804
  %tobool194 = icmp ne i32 %bf.clear193, 0, !dbg !6804
  br i1 %tobool194, label %if.end205, label %if.then195, !dbg !6805

if.then195:                                       ; preds = %lor.lhs.false190, %land.lhs.true183
  %96 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6806
  %decl_common196 = bitcast %union.tree_node* %96 to %struct.tree_decl_common*, !dbg !6806
  %gimple_reg_flag197 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common196, i32 0, i32 2, !dbg !6806
  %97 = bitcast i40* %gimple_reg_flag197 to i64*, !dbg !6806
  %bf.load198 = load i64, i64* %97, align 8, !dbg !6808
  %bf.clear199 = and i64 %bf.load198, -134217729, !dbg !6808
  %bf.set = or i64 %bf.clear199, 134217728, !dbg !6808
  store i64 %bf.set, i64* %97, align 8, !dbg !6808
  %98 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6809
  call void @mark_sym_for_renaming(%union.tree_node* %98), !dbg !6810
  store i8 1, i8* %update_vops, align 1, !dbg !6811
  %99 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6812
  %tobool200 = icmp ne %struct._IO_FILE* %99, null, !dbg !6812
  br i1 %tobool200, label %if.then201, label %if.end204, !dbg !6814

if.then201:                                       ; preds = %if.then195
  %100 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6815
  %call202 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %100, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.18, i64 0, i64 0)), !dbg !6817
  %101 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6818
  %102 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6819
  call void @print_generic_expr(%struct._IO_FILE* %101, %union.tree_node* %102, i32 0), !dbg !6820
  %103 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6821
  %call203 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %103, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i64 0, i64 0)), !dbg !6822
  br label %if.end204, !dbg !6823

if.end204:                                        ; preds = %if.then201, %if.then195
  br label %if.end205, !dbg !6824

if.end205:                                        ; preds = %if.end204, %lor.lhs.false190, %land.lhs.true176, %lor.lhs.false167, %land.lhs.true153, %if.end147
  br label %for.inc206, !dbg !6825

for.inc206:                                       ; preds = %if.end205, %if.then119
  %call207 = call %union.tree_node* @next_referenced_var(%struct.referenced_var_iterator* %rvi), !dbg !6738
  store %union.tree_node* %call207, %union.tree_node** %var, align 8, !dbg !6738
  br label %for.cond99, !dbg !6738, !llvm.loop !6826

for.end208:                                       ; preds = %for.cond99
  br label %if.end209, !dbg !6827

if.end209:                                        ; preds = %for.end208, %land.lhs.true94, %for.end92
  %104 = load i8, i8* %update_vops, align 1, !dbg !6828
  %tobool210 = icmp ne i8 %104, 0, !dbg !6828
  br i1 %tobool210, label %if.then211, label %if.end245, !dbg !6830

if.then211:                                       ; preds = %if.end209
  %105 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6831
  %add.ptr212 = getelementptr inbounds %struct.function, %struct.function* %105, i64 0, !dbg !6831
  %cfg213 = getelementptr inbounds %struct.function, %struct.function* %add.ptr212, i32 0, i32 1, !dbg !6831
  %106 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg213, align 8, !dbg !6831
  %x_entry_block_ptr214 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %106, i32 0, i32 0, !dbg !6831
  %107 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr214, align 8, !dbg !6831
  %next_bb215 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %107, i32 0, i32 6, !dbg !6831
  %108 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb215, align 8, !dbg !6831
  store %struct.basic_block_def* %108, %struct.basic_block_def** %bb, align 8, !dbg !6831
  br label %for.cond216, !dbg !6831

for.cond216:                                      ; preds = %for.inc242, %if.then211
  %109 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6834
  %110 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6834
  %add.ptr217 = getelementptr inbounds %struct.function, %struct.function* %110, i64 0, !dbg !6834
  %cfg218 = getelementptr inbounds %struct.function, %struct.function* %add.ptr217, i32 0, i32 1, !dbg !6834
  %111 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg218, align 8, !dbg !6834
  %x_exit_block_ptr219 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %111, i32 0, i32 1, !dbg !6834
  %112 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr219, align 8, !dbg !6834
  %cmp220 = icmp ne %struct.basic_block_def* %109, %112, !dbg !6834
  br i1 %cmp220, label %for.body222, label %for.end244, !dbg !6831

for.body222:                                      ; preds = %for.cond216
  %113 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6836
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp223, %struct.basic_block_def* %113), !dbg !6838
  %114 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !6838
  %115 = bitcast %struct.gimple_stmt_iterator* %tmp223 to i8*, !dbg !6838
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %114, i8* align 8 %115, i64 24, i1 false), !dbg !6838
  br label %for.cond224, !dbg !6839

for.cond224:                                      ; preds = %for.inc240, %for.body222
  %call225 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !6840
  %tobool226 = icmp ne i8 %call225, 0, !dbg !6842
  %lnot227 = xor i1 %tobool226, true, !dbg !6842
  br i1 %lnot227, label %for.body228, label %for.end241, !dbg !6843

for.body228:                                      ; preds = %for.cond224
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt229, metadata !6844, metadata !DIExpression()), !dbg !6846
  %call230 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !6847
  store %union.gimple_statement_d* %call230, %union.gimple_statement_d** %stmt229, align 8, !dbg !6846
  %116 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt229, align 8, !dbg !6848
  %call231 = call zeroext i8 @gimple_references_memory_p(%union.gimple_statement_d* %116), !dbg !6850
  %conv232 = zext i8 %call231 to i32, !dbg !6850
  %tobool233 = icmp ne i32 %conv232, 0, !dbg !6850
  br i1 %tobool233, label %if.then238, label %lor.lhs.false234, !dbg !6851

lor.lhs.false234:                                 ; preds = %for.body228
  %117 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt229, align 8, !dbg !6852
  %call235 = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %117), !dbg !6853
  %conv236 = zext i8 %call235 to i32, !dbg !6853
  %tobool237 = icmp ne i32 %conv236, 0, !dbg !6853
  br i1 %tobool237, label %if.then238, label %if.end239, !dbg !6854

if.then238:                                       ; preds = %lor.lhs.false234, %for.body228
  %118 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt229, align 8, !dbg !6855
  call void @update_stmt(%union.gimple_statement_d* %118), !dbg !6856
  br label %if.end239, !dbg !6856

if.end239:                                        ; preds = %if.then238, %lor.lhs.false234
  br label %for.inc240, !dbg !6857

for.inc240:                                       ; preds = %if.end239
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !6858
  br label %for.cond224, !dbg !6859, !llvm.loop !6860

for.end241:                                       ; preds = %for.cond224
  br label %for.inc242, !dbg !6861

for.inc242:                                       ; preds = %for.end241
  %119 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6834
  %next_bb243 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %119, i32 0, i32 6, !dbg !6834
  %120 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb243, align 8, !dbg !6834
  store %struct.basic_block_def* %120, %struct.basic_block_def** %bb, align 8, !dbg !6834
  br label %for.cond216, !dbg !6834, !llvm.loop !6862

for.end244:                                       ; preds = %for.cond216
  call void @update_ssa(i32 2048), !dbg !6864
  br label %if.end245, !dbg !6865

if.end245:                                        ; preds = %for.end244, %if.end209
  %121 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %not_reg_needs, align 8, !dbg !6866
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %121), !dbg !6866
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %not_reg_needs, align 8, !dbg !6866
  %122 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %addresses_taken, align 8, !dbg !6867
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %122), !dbg !6867
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %addresses_taken, align 8, !dbg !6867
  ret void, !dbg !6868
}

declare dso_local zeroext i8 @gimple_ior_addresses_taken(%struct.bitmap_head_def*, %union.gimple_statement_d*) #2

declare dso_local %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @handled_component_p(%union.tree_node* %t) #0 !dbg !6869 {
entry:
  %retval = alloca i8, align 1
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !6870, metadata !DIExpression()), !dbg !6871
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !6872
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !6872
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !6872
  %bf.load = load i64, i64* %1, align 8, !dbg !6872
  %bf.clear = and i64 %bf.load, 65535, !dbg !6872
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6872
  switch i32 %bf.cast, label %sw.default [
    i32 42, label %sw.bb
    i32 41, label %sw.bb
    i32 45, label %sw.bb
    i32 46, label %sw.bb
    i32 118, label %sw.bb
    i32 43, label %sw.bb
    i32 44, label %sw.bb
  ], !dbg !6873

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i8 1, i8* %retval, align 1, !dbg !6874
  br label %return, !dbg !6874

sw.default:                                       ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !6876
  br label %return, !dbg !6876

return:                                           ; preds = %sw.default, %sw.bb
  %2 = load i8, i8* %retval, align 1, !dbg !6877
  ret i8 %2, !dbg !6877
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_phi_num_args(%union.gimple_statement_d* %gs) #0 !dbg !6878 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6881, metadata !DIExpression()), !dbg !6882
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6883
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !6884
  %nargs = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 2, !dbg !6885
  %1 = load i32, i32* %nargs, align 4, !dbg !6885
  ret i32 %1, !dbg !6886
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !6887 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6890, metadata !DIExpression()), !dbg !6891
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !6892, metadata !DIExpression()), !dbg !6893
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6894
  %1 = load i32, i32* %i.addr, align 4, !dbg !6895
  %call = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %0, i32 %1), !dbg !6896
  %imm_use = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %call, i32 0, i32 0, !dbg !6897
  ret %struct.ssa_use_operand_d* %imm_use, !dbg !6898
}

declare dso_local zeroext i8 @is_gimple_reg_type(%union.tree_node*) #2

declare dso_local void @mark_sym_for_renaming(%union.tree_node*) #2

declare dso_local void @print_generic_expr(%struct._IO_FILE*, %union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_references_memory_p(%union.gimple_statement_d* %stmt) #0 !dbg !6899 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6900, metadata !DIExpression()), !dbg !6901
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6902
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !6903
  %conv = zext i8 %call to i32, !dbg !6903
  %tobool = icmp ne i32 %conv, 0, !dbg !6903
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !6904

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6905
  %call1 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %1), !dbg !6906
  %tobool2 = icmp ne %union.tree_node* %call1, null, !dbg !6904
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %tobool2, %land.rhs ], !dbg !6907
  %land.ext = zext i1 %2 to i32, !dbg !6904
  %conv3 = trunc i32 %land.ext to i8, !dbg !6903
  ret i8 %conv3, !dbg !6908
}

declare dso_local void @update_ssa(i32) #2

declare dso_local i8* @vec_heap_o_reserve_exact(i8*, i32, i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_var_map_heap_reserve(%struct.VEC_edge_var_map_heap** %vec_, i32 %alloc_) #0 !dbg !6909 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_var_map_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_edge_var_map_heap** %vec_, %struct.VEC_edge_var_map_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_var_map_heap*** %vec_.addr, metadata !6912, metadata !DIExpression()), !dbg !6913
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6914, metadata !DIExpression()), !dbg !6913
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !6915, metadata !DIExpression()), !dbg !6913
  %0 = load %struct.VEC_edge_var_map_heap**, %struct.VEC_edge_var_map_heap*** %vec_.addr, align 8, !dbg !6913
  %1 = load %struct.VEC_edge_var_map_heap*, %struct.VEC_edge_var_map_heap** %0, align 8, !dbg !6913
  %tobool = icmp ne %struct.VEC_edge_var_map_heap* %1, null, !dbg !6913
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6913

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_edge_var_map_heap**, %struct.VEC_edge_var_map_heap*** %vec_.addr, align 8, !dbg !6913
  %3 = load %struct.VEC_edge_var_map_heap*, %struct.VEC_edge_var_map_heap** %2, align 8, !dbg !6913
  %base = getelementptr inbounds %struct.VEC_edge_var_map_heap, %struct.VEC_edge_var_map_heap* %3, i32 0, i32 0, !dbg !6913
  br label %cond.end, !dbg !6913

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6913

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_var_map_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6913
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !6913
  %call = call i32 @VEC_edge_var_map_base_space(%struct.VEC_edge_var_map_base* %cond, i32 %4), !dbg !6913
  %tobool1 = icmp ne i32 %call, 0, !dbg !6913
  %lnot = xor i1 %tobool1, true, !dbg !6913
  %lnot.ext = zext i1 %lnot to i32, !dbg !6913
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !6913
  %5 = load i32, i32* %extend, align 4, !dbg !6916
  %tobool2 = icmp ne i32 %5, 0, !dbg !6916
  br i1 %tobool2, label %if.then, label %if.end, !dbg !6913

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_edge_var_map_heap**, %struct.VEC_edge_var_map_heap*** %vec_.addr, align 8, !dbg !6916
  %7 = load %struct.VEC_edge_var_map_heap*, %struct.VEC_edge_var_map_heap** %6, align 8, !dbg !6916
  %8 = bitcast %struct.VEC_edge_var_map_heap* %7 to i8*, !dbg !6916
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !6916
  %call3 = call i8* @vec_heap_o_reserve(i8* %8, i32 %9, i64 8, i64 24), !dbg !6916
  %10 = bitcast i8* %call3 to %struct.VEC_edge_var_map_heap*, !dbg !6916
  %11 = load %struct.VEC_edge_var_map_heap**, %struct.VEC_edge_var_map_heap*** %vec_.addr, align 8, !dbg !6916
  store %struct.VEC_edge_var_map_heap* %10, %struct.VEC_edge_var_map_heap** %11, align 8, !dbg !6916
  br label %if.end, !dbg !6916

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !6913
  ret i32 %12, !dbg !6913
}

; Function Attrs: noinline nounwind uwtable
define internal %struct._edge_var_map* @VEC_edge_var_map_base_quick_push(%struct.VEC_edge_var_map_base* %vec_, %struct._edge_var_map* %obj_) #0 !dbg !6918 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_var_map_base*, align 8
  %obj_.addr = alloca %struct._edge_var_map*, align 8
  %slot_ = alloca %struct._edge_var_map*, align 8
  store %struct.VEC_edge_var_map_base* %vec_, %struct.VEC_edge_var_map_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_var_map_base** %vec_.addr, metadata !6921, metadata !DIExpression()), !dbg !6922
  store %struct._edge_var_map* %obj_, %struct._edge_var_map** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._edge_var_map** %obj_.addr, metadata !6923, metadata !DIExpression()), !dbg !6922
  call void @llvm.dbg.declare(metadata %struct._edge_var_map** %slot_, metadata !6924, metadata !DIExpression()), !dbg !6922
  %0 = load %struct.VEC_edge_var_map_base*, %struct.VEC_edge_var_map_base** %vec_.addr, align 8, !dbg !6922
  %num = getelementptr inbounds %struct.VEC_edge_var_map_base, %struct.VEC_edge_var_map_base* %0, i32 0, i32 0, !dbg !6922
  %1 = load i32, i32* %num, align 8, !dbg !6922
  %2 = load %struct.VEC_edge_var_map_base*, %struct.VEC_edge_var_map_base** %vec_.addr, align 8, !dbg !6922
  %alloc = getelementptr inbounds %struct.VEC_edge_var_map_base, %struct.VEC_edge_var_map_base* %2, i32 0, i32 1, !dbg !6922
  %3 = load i32, i32* %alloc, align 4, !dbg !6922
  %cmp = icmp ult i32 %1, %3, !dbg !6922
  %conv = zext i1 %cmp to i32, !dbg !6922
  %4 = load %struct.VEC_edge_var_map_base*, %struct.VEC_edge_var_map_base** %vec_.addr, align 8, !dbg !6922
  %vec = getelementptr inbounds %struct.VEC_edge_var_map_base, %struct.VEC_edge_var_map_base* %4, i32 0, i32 2, !dbg !6922
  %5 = load %struct.VEC_edge_var_map_base*, %struct.VEC_edge_var_map_base** %vec_.addr, align 8, !dbg !6922
  %num1 = getelementptr inbounds %struct.VEC_edge_var_map_base, %struct.VEC_edge_var_map_base* %5, i32 0, i32 0, !dbg !6922
  %6 = load i32, i32* %num1, align 8, !dbg !6922
  %inc = add i32 %6, 1, !dbg !6922
  store i32 %inc, i32* %num1, align 8, !dbg !6922
  %idxprom = zext i32 %6 to i64, !dbg !6922
  %arrayidx = getelementptr inbounds [1 x %struct._edge_var_map], [1 x %struct._edge_var_map]* %vec, i64 0, i64 %idxprom, !dbg !6922
  store %struct._edge_var_map* %arrayidx, %struct._edge_var_map** %slot_, align 8, !dbg !6922
  %7 = load %struct._edge_var_map*, %struct._edge_var_map** %obj_.addr, align 8, !dbg !6925
  %tobool = icmp ne %struct._edge_var_map* %7, null, !dbg !6925
  br i1 %tobool, label %if.then, label %if.end, !dbg !6922

if.then:                                          ; preds = %entry
  %8 = load %struct._edge_var_map*, %struct._edge_var_map** %slot_, align 8, !dbg !6925
  %9 = load %struct._edge_var_map*, %struct._edge_var_map** %obj_.addr, align 8, !dbg !6925
  %10 = bitcast %struct._edge_var_map* %8 to i8*, !dbg !6925
  %11 = bitcast %struct._edge_var_map* %9 to i8*, !dbg !6925
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %11, i64 24, i1 false), !dbg !6925
  br label %if.end, !dbg !6925

if.end:                                           ; preds = %if.then, %entry
  %12 = load %struct._edge_var_map*, %struct._edge_var_map** %slot_, align 8, !dbg !6922
  ret %struct._edge_var_map* %12, !dbg !6922
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_var_map_base_space(%struct.VEC_edge_var_map_base* %vec_, i32 %alloc_) #0 !dbg !6927 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_var_map_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_edge_var_map_base* %vec_, %struct.VEC_edge_var_map_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_var_map_base** %vec_.addr, metadata !6930, metadata !DIExpression()), !dbg !6931
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6932, metadata !DIExpression()), !dbg !6931
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !6931
  %cmp = icmp sge i32 %0, 0, !dbg !6931
  %conv = zext i1 %cmp to i32, !dbg !6931
  %1 = load %struct.VEC_edge_var_map_base*, %struct.VEC_edge_var_map_base** %vec_.addr, align 8, !dbg !6931
  %tobool = icmp ne %struct.VEC_edge_var_map_base* %1, null, !dbg !6931
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6931

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_edge_var_map_base*, %struct.VEC_edge_var_map_base** %vec_.addr, align 8, !dbg !6931
  %alloc = getelementptr inbounds %struct.VEC_edge_var_map_base, %struct.VEC_edge_var_map_base* %2, i32 0, i32 1, !dbg !6931
  %3 = load i32, i32* %alloc, align 4, !dbg !6931
  %4 = load %struct.VEC_edge_var_map_base*, %struct.VEC_edge_var_map_base** %vec_.addr, align 8, !dbg !6931
  %num = getelementptr inbounds %struct.VEC_edge_var_map_base, %struct.VEC_edge_var_map_base* %4, i32 0, i32 0, !dbg !6931
  %5 = load i32, i32* %num, align 8, !dbg !6931
  %sub = sub i32 %3, %5, !dbg !6931
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !6931
  %cmp1 = icmp uge i32 %sub, %6, !dbg !6931
  %conv2 = zext i1 %cmp1 to i32, !dbg !6931
  br label %cond.end, !dbg !6931

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !6931
  %tobool3 = icmp ne i32 %7, 0, !dbg !6931
  %lnot = xor i1 %tobool3, true, !dbg !6931
  %lnot.ext = zext i1 %lnot to i32, !dbg !6931
  br label %cond.end, !dbg !6931

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !6931
  ret i32 %cond, !dbg !6931
}

declare dso_local i8* @vec_heap_o_reserve(i8*, i32, i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !6933 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6936, metadata !DIExpression()), !dbg !6937
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !6938, metadata !DIExpression()), !dbg !6939
  %0 = load i32, i32* %index.addr, align 4, !dbg !6940
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6940
  %gimple_phi = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_phi*, !dbg !6940
  %capacity = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 1, !dbg !6940
  %2 = load i32, i32* %capacity, align 8, !dbg !6940
  %cmp = icmp ule i32 %0, %2, !dbg !6940
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6940

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.20, i64 0, i64 0), i32 3103, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6940
  br label %cond.end, !dbg !6940

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6940

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6940
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6941
  %gimple_phi1 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_phi*, !dbg !6942
  %args = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi1, i32 0, i32 4, !dbg !6943
  %4 = load i32, i32* %index.addr, align 4, !dbg !6944
  %idxprom = zext i32 %4 to i64, !dbg !6941
  %arrayidx = getelementptr inbounds [1 x %struct.phi_arg_d], [1 x %struct.phi_arg_d]* %args, i64 0, i64 %idxprom, !dbg !6941
  ret %struct.phi_arg_d* %arrayidx, !dbg !6945
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !6946 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6949, metadata !DIExpression()), !dbg !6950
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !6951, metadata !DIExpression()), !dbg !6952
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6953
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !6955
  %tobool = icmp ne i8 %call, 0, !dbg !6955
  br i1 %tobool, label %if.then, label %if.else, !dbg !6956

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6957
  %call1 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %1), !dbg !6959
  %2 = load i32, i32* %i.addr, align 4, !dbg !6960
  %idxprom = zext i32 %2 to i64, !dbg !6959
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idxprom, !dbg !6959
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6959
  store %union.tree_node* %3, %union.tree_node** %retval, align 8, !dbg !6961
  br label %return, !dbg !6961

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6962
  br label %return, !dbg !6962

return:                                           ; preds = %if.else, %if.then
  %4 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6963
  ret %union.tree_node* %4, !dbg !6963
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) #0 !dbg !6964 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6965, metadata !DIExpression()), !dbg !6966
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6967
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6968
  %cmp = icmp uge i32 %call, 1, !dbg !6969
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !6970

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6971
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !6972
  %cmp2 = icmp ule i32 %call1, 9, !dbg !6973
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !6974
  %land.ext = zext i1 %2 to i32, !dbg !6970
  %conv = trunc i32 %land.ext to i8, !dbg !6968
  ret i8 %conv, !dbg !6975
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #0 !dbg !6976 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %off = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6979, metadata !DIExpression()), !dbg !6980
  call void @llvm.dbg.declare(metadata i64* %off, metadata !6981, metadata !DIExpression()), !dbg !6982
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6983
  %call = call i32 @gimple_statement_structure(%union.gimple_statement_d* %0), !dbg !6984
  %idxprom = zext i32 %call to i64, !dbg !6985
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* @gimple_ops_offset_, i64 0, i64 %idxprom, !dbg !6985
  %1 = load i64, i64* %arrayidx, align 8, !dbg !6985
  store i64 %1, i64* %off, align 8, !dbg !6986
  %2 = load i64, i64* %off, align 8, !dbg !6987
  %cmp = icmp ne i64 %2, 0, !dbg !6987
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6987

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.20, i64 0, i64 0), i32 1622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6987
  br label %cond.end, !dbg !6987

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6987

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6987
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6988
  %4 = bitcast %union.gimple_statement_d* %3 to i8*, !dbg !6989
  %5 = load i64, i64* %off, align 8, !dbg !6990
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %5, !dbg !6991
  %6 = bitcast i8* %add.ptr to %union.tree_node**, !dbg !6992
  ret %union.tree_node** %6, !dbg !6993
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_statement_structure(%union.gimple_statement_d* %gs) #0 !dbg !6994 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6997, metadata !DIExpression()), !dbg !6998
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6999
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !7000
  %call1 = call i32 @gss_for_code(i32 %call), !dbg !7001
  ret i32 %call1, !dbg !7002
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gss_for_code(i32 %code) #0 !dbg !7003 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !7006, metadata !DIExpression()), !dbg !7007
  %0 = load i32, i32* %code.addr, align 4, !dbg !7008
  %idxprom = zext i32 %0 to i64, !dbg !7009
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @gss_for_code_, i64 0, i64 %idxprom, !dbg !7009
  %1 = load i32, i32* %arrayidx, align 4, !dbg !7009
  ret i32 %1, !dbg !7010
}

; Function Attrs: noinline nounwind uwtable
define internal void @link_use_stmts_after(%struct.ssa_use_operand_d* %head, %struct.immediate_use_iterator_d* %imm) #0 !dbg !7011 {
entry:
  %head.addr = alloca %struct.ssa_use_operand_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  %last_p = alloca %struct.ssa_use_operand_d*, align 8
  %head_stmt = alloca %union.gimple_statement_d*, align 8
  %use = alloca %union.tree_node*, align 8
  %op_iter = alloca %struct.ssa_operand_iterator_d, align 8
  %flag = alloca i32, align 4
  store %struct.ssa_use_operand_d* %head, %struct.ssa_use_operand_d** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %head.addr, metadata !7014, metadata !DIExpression()), !dbg !7015
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !7016, metadata !DIExpression()), !dbg !7017
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !7018, metadata !DIExpression()), !dbg !7019
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %last_p, metadata !7020, metadata !DIExpression()), !dbg !7021
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !7022
  store %struct.ssa_use_operand_d* %0, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !7021
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %head_stmt, metadata !7023, metadata !DIExpression()), !dbg !7024
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !7025
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %1, i32 0, i32 2, !dbg !7025
  %stmt = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !7025
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7025
  store %union.gimple_statement_d* %2, %union.gimple_statement_d** %head_stmt, align 8, !dbg !7024
  call void @llvm.dbg.declare(metadata %union.tree_node** %use, metadata !7026, metadata !DIExpression()), !dbg !7027
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !7028
  %call = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %3), !dbg !7028
  store %union.tree_node* %call, %union.tree_node** %use, align 8, !dbg !7027
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %op_iter, metadata !7029, metadata !DIExpression()), !dbg !7030
  call void @llvm.dbg.declare(metadata i32* %flag, metadata !7031, metadata !DIExpression()), !dbg !7032
  %4 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !7033
  %call1 = call zeroext i8 @is_gimple_reg(%union.tree_node* %4), !dbg !7034
  %conv = zext i8 %call1 to i32, !dbg !7034
  %tobool = icmp ne i32 %conv, 0, !dbg !7034
  %5 = zext i1 %tobool to i64, !dbg !7034
  %cond = select i1 %tobool, i32 1, i32 4, !dbg !7034
  store i32 %cond, i32* %flag, align 4, !dbg !7035
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !7036
  %call2 = call i32 @gimple_code(%union.gimple_statement_d* %6), !dbg !7038
  %cmp = icmp eq i32 %call2, 16, !dbg !7039
  br i1 %cmp, label %if.then, label %if.else, !dbg !7040

if.then:                                          ; preds = %entry
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !7041
  %8 = load i32, i32* %flag, align 4, !dbg !7041
  %call4 = call %struct.ssa_use_operand_d* @op_iter_init_phiuse(%struct.ssa_operand_iterator_d* %op_iter, %union.gimple_statement_d* %7, i32 %8), !dbg !7041
  store %struct.ssa_use_operand_d* %call4, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !7041
  br label %for.cond, !dbg !7041

for.cond:                                         ; preds = %for.inc, %if.then
  %call5 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %op_iter), !dbg !7044
  %tobool6 = icmp ne i8 %call5, 0, !dbg !7044
  %lnot = xor i1 %tobool6, true, !dbg !7044
  br i1 %lnot, label %for.body, label %for.end, !dbg !7041

for.body:                                         ; preds = %for.cond
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !7046
  %call7 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %9), !dbg !7046
  %10 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !7048
  %cmp8 = icmp eq %union.tree_node* %call7, %10, !dbg !7049
  br i1 %cmp8, label %if.then10, label %if.end, !dbg !7050

if.then10:                                        ; preds = %for.body
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !7051
  %12 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !7052
  %13 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !7053
  %call11 = call %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %11, %struct.ssa_use_operand_d* %12, %struct.ssa_use_operand_d* %13), !dbg !7054
  store %struct.ssa_use_operand_d* %call11, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !7055
  br label %if.end, !dbg !7056

if.end:                                           ; preds = %if.then10, %for.body
  br label %for.inc, !dbg !7048

for.inc:                                          ; preds = %if.end
  %call12 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %op_iter), !dbg !7044
  store %struct.ssa_use_operand_d* %call12, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !7044
  br label %for.cond, !dbg !7044, !llvm.loop !7057

for.end:                                          ; preds = %for.cond
  br label %if.end44, !dbg !7059

if.else:                                          ; preds = %entry
  %14 = load i32, i32* %flag, align 4, !dbg !7060
  %cmp13 = icmp eq i32 %14, 1, !dbg !7063
  br i1 %cmp13, label %if.then15, label %if.else31, !dbg !7064

if.then15:                                        ; preds = %if.else
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !7065
  %16 = load i32, i32* %flag, align 4, !dbg !7065
  %call16 = call %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %op_iter, %union.gimple_statement_d* %15, i32 %16), !dbg !7065
  store %struct.ssa_use_operand_d* %call16, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !7065
  br label %for.cond17, !dbg !7065

for.cond17:                                       ; preds = %for.inc28, %if.then15
  %call18 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %op_iter), !dbg !7068
  %tobool19 = icmp ne i8 %call18, 0, !dbg !7068
  %lnot20 = xor i1 %tobool19, true, !dbg !7068
  br i1 %lnot20, label %for.body21, label %for.end30, !dbg !7065

for.body21:                                       ; preds = %for.cond17
  %17 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !7070
  %call22 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %17), !dbg !7070
  %18 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !7072
  %cmp23 = icmp eq %union.tree_node* %call22, %18, !dbg !7073
  br i1 %cmp23, label %if.then25, label %if.end27, !dbg !7074

if.then25:                                        ; preds = %for.body21
  %19 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !7075
  %20 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !7076
  %21 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !7077
  %call26 = call %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %19, %struct.ssa_use_operand_d* %20, %struct.ssa_use_operand_d* %21), !dbg !7078
  store %struct.ssa_use_operand_d* %call26, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !7079
  br label %if.end27, !dbg !7080

if.end27:                                         ; preds = %if.then25, %for.body21
  br label %for.inc28, !dbg !7072

for.inc28:                                        ; preds = %if.end27
  %call29 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %op_iter), !dbg !7068
  store %struct.ssa_use_operand_d* %call29, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !7068
  br label %for.cond17, !dbg !7068, !llvm.loop !7081

for.end30:                                        ; preds = %for.cond17
  br label %if.end43, !dbg !7083

if.else31:                                        ; preds = %if.else
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !7084
  %call32 = call %struct.ssa_use_operand_d* @gimple_vuse_op(%union.gimple_statement_d* %22), !dbg !7086
  store %struct.ssa_use_operand_d* %call32, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !7087
  %cmp33 = icmp ne %struct.ssa_use_operand_d* %call32, null, !dbg !7088
  br i1 %cmp33, label %if.then35, label %if.end42, !dbg !7089

if.then35:                                        ; preds = %if.else31
  %23 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !7090
  %call36 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %23), !dbg !7090
  %24 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !7093
  %cmp37 = icmp eq %union.tree_node* %call36, %24, !dbg !7094
  br i1 %cmp37, label %if.then39, label %if.end41, !dbg !7095

if.then39:                                        ; preds = %if.then35
  %25 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !7096
  %26 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !7097
  %27 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !7098
  %call40 = call %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %25, %struct.ssa_use_operand_d* %26, %struct.ssa_use_operand_d* %27), !dbg !7099
  store %struct.ssa_use_operand_d* %call40, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !7100
  br label %if.end41, !dbg !7101

if.end41:                                         ; preds = %if.then39, %if.then35
  br label %if.end42, !dbg !7102

if.end42:                                         ; preds = %if.end41, %if.else31
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %for.end30
  br label %if.end44

if.end44:                                         ; preds = %if.end43, %for.end
  %28 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7103
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %28, i32 0, i32 2, !dbg !7105
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node, i32 0, i32 0, !dbg !7106
  %29 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !7106
  %cmp45 = icmp ne %struct.ssa_use_operand_d* %29, null, !dbg !7107
  br i1 %cmp45, label %if.then47, label %if.end49, !dbg !7108

if.then47:                                        ; preds = %if.end44
  %30 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7109
  %iter_node48 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %30, i32 0, i32 2, !dbg !7110
  call void @delink_imm_use(%struct.ssa_use_operand_d* %iter_node48), !dbg !7111
  br label %if.end49, !dbg !7111

if.end49:                                         ; preds = %if.then47, %if.end44
  %31 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7112
  %iter_node50 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %31, i32 0, i32 2, !dbg !7113
  %32 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !7114
  call void @link_imm_use_to_list(%struct.ssa_use_operand_d* %iter_node50, %struct.ssa_use_operand_d* %32), !dbg !7115
  ret void, !dbg !7116
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_init_phiuse(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %phi, i32 %flags) #0 !dbg !7117 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %phi.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  %phi_def = alloca %union.tree_node*, align 8
  %comp = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !7118, metadata !DIExpression()), !dbg !7119
  store %union.gimple_statement_d* %phi, %union.gimple_statement_d** %phi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi.addr, metadata !7120, metadata !DIExpression()), !dbg !7121
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !7122, metadata !DIExpression()), !dbg !7123
  call void @llvm.dbg.declare(metadata %union.tree_node** %phi_def, metadata !7124, metadata !DIExpression()), !dbg !7125
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !7126
  %call = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %0), !dbg !7127
  store %union.tree_node* %call, %union.tree_node** %phi_def, align 8, !dbg !7125
  call void @llvm.dbg.declare(metadata i32* %comp, metadata !7128, metadata !DIExpression()), !dbg !7129
  %1 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7130
  call void @clear_and_done_ssa_iter(%struct.ssa_operand_iterator_d* %1), !dbg !7131
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7132
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 0, !dbg !7133
  store i8 0, i8* %done, align 8, !dbg !7134
  %3 = load i32, i32* %flags.addr, align 4, !dbg !7135
  %and = and i32 %3, 5, !dbg !7135
  %cmp = icmp ne i32 %and, 0, !dbg !7135
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !7135

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.21, i64 0, i64 0), i32 918, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7135
  br label %cond.end, !dbg !7135

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7135

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7135
  %4 = load %union.tree_node*, %union.tree_node** %phi_def, align 8, !dbg !7136
  %call1 = call zeroext i8 @is_gimple_reg(%union.tree_node* %4), !dbg !7137
  %conv = zext i8 %call1 to i32, !dbg !7137
  %tobool = icmp ne i32 %conv, 0, !dbg !7137
  %5 = zext i1 %tobool to i64, !dbg !7137
  %cond2 = select i1 %tobool, i32 1, i32 4, !dbg !7137
  store i32 %cond2, i32* %comp, align 4, !dbg !7138
  %6 = load i32, i32* %flags.addr, align 4, !dbg !7139
  %7 = load i32, i32* %comp, align 4, !dbg !7141
  %and3 = and i32 %6, %7, !dbg !7142
  %cmp4 = icmp eq i32 %and3, 0, !dbg !7143
  br i1 %cmp4, label %if.then, label %if.end, !dbg !7144

if.then:                                          ; preds = %cond.end
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7145
  %done6 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %8, i32 0, i32 0, !dbg !7147
  store i8 1, i8* %done6, align 8, !dbg !7148
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !7149
  br label %return, !dbg !7149

if.end:                                           ; preds = %cond.end
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !7150
  %10 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7151
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %10, i32 0, i32 6, !dbg !7152
  store %union.gimple_statement_d* %9, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !7153
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !7154
  %call7 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %11), !dbg !7155
  %12 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7156
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %12, i32 0, i32 5, !dbg !7157
  store i32 %call7, i32* %num_phi, align 4, !dbg !7158
  %13 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7159
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %13, i32 0, i32 1, !dbg !7160
  store i32 2, i32* %iter_type, align 4, !dbg !7161
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7162
  %call8 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %14), !dbg !7163
  store %struct.ssa_use_operand_d* %call8, %struct.ssa_use_operand_d** %retval, align 8, !dbg !7164
  br label %return, !dbg !7164

return:                                           ; preds = %if.end, %if.then
  %15 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !7165
  ret %struct.ssa_use_operand_d* %15, !dbg !7165
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %use_p, %struct.ssa_use_operand_d* %head, %struct.ssa_use_operand_d* %last_p) #0 !dbg !7166 {
entry:
  %use_p.addr = alloca %struct.ssa_use_operand_d*, align 8
  %head.addr = alloca %struct.ssa_use_operand_d*, align 8
  %last_p.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %use_p, %struct.ssa_use_operand_d** %use_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p.addr, metadata !7169, metadata !DIExpression()), !dbg !7170
  store %struct.ssa_use_operand_d* %head, %struct.ssa_use_operand_d** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %head.addr, metadata !7171, metadata !DIExpression()), !dbg !7172
  store %struct.ssa_use_operand_d* %last_p, %struct.ssa_use_operand_d** %last_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %last_p.addr, metadata !7173, metadata !DIExpression()), !dbg !7174
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !7175
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !7177
  %cmp = icmp ne %struct.ssa_use_operand_d* %0, %1, !dbg !7178
  br i1 %cmp, label %if.then, label %if.end3, !dbg !7179

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !7180
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !7183
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !7183
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !7184
  %cmp1 = icmp eq %struct.ssa_use_operand_d* %3, %4, !dbg !7185
  br i1 %cmp1, label %if.then2, label %if.else, !dbg !7186

if.then2:                                         ; preds = %if.then
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !7187
  store %struct.ssa_use_operand_d* %5, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !7188
  br label %if.end, !dbg !7189

if.else:                                          ; preds = %if.then
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !7190
  call void @delink_imm_use(%struct.ssa_use_operand_d* %6), !dbg !7192
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !7193
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !7194
  call void @link_imm_use_to_list(%struct.ssa_use_operand_d* %7, %struct.ssa_use_operand_d* %8), !dbg !7195
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !7196
  store %struct.ssa_use_operand_d* %9, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !7197
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then2
  br label %if.end3, !dbg !7198

if.end3:                                          ; preds = %if.end, %entry
  %10 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !7199
  ret %struct.ssa_use_operand_d* %10, !dbg !7200
}

; Function Attrs: noinline nounwind uwtable
define internal void @delink_imm_use(%struct.ssa_use_operand_d* %linknode) #0 !dbg !7201 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !7204, metadata !DIExpression()), !dbg !7205
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !7206
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 0, !dbg !7208
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !7208
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, null, !dbg !7209
  br i1 %cmp, label %if.then, label %if.end, !dbg !7210

if.then:                                          ; preds = %entry
  br label %return, !dbg !7211

if.end:                                           ; preds = %entry
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !7212
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !7213
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !7213
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !7214
  %prev1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %4, i32 0, i32 0, !dbg !7215
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev1, align 8, !dbg !7215
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %5, i32 0, i32 1, !dbg !7216
  store %struct.ssa_use_operand_d* %3, %struct.ssa_use_operand_d** %next2, align 8, !dbg !7217
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !7218
  %prev3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %6, i32 0, i32 0, !dbg !7219
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev3, align 8, !dbg !7219
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !7220
  %next4 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %8, i32 0, i32 1, !dbg !7221
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next4, align 8, !dbg !7221
  %prev5 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %9, i32 0, i32 0, !dbg !7222
  store %struct.ssa_use_operand_d* %7, %struct.ssa_use_operand_d** %prev5, align 8, !dbg !7223
  %10 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !7224
  %prev6 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %10, i32 0, i32 0, !dbg !7225
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev6, align 8, !dbg !7226
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !7227
  %next7 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %11, i32 0, i32 1, !dbg !7228
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next7, align 8, !dbg !7229
  br label %return, !dbg !7230

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !7230
}

; Function Attrs: noinline nounwind uwtable
define internal void @link_imm_use_to_list(%struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d* %list) #0 !dbg !7231 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  %list.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !7234, metadata !DIExpression()), !dbg !7235
  store %struct.ssa_use_operand_d* %list, %struct.ssa_use_operand_d** %list.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %list.addr, metadata !7236, metadata !DIExpression()), !dbg !7237
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !7238
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !7239
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %1, i32 0, i32 0, !dbg !7240
  store %struct.ssa_use_operand_d* %0, %struct.ssa_use_operand_d** %prev, align 8, !dbg !7241
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !7242
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !7243
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !7243
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !7244
  %next1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %4, i32 0, i32 1, !dbg !7245
  store %struct.ssa_use_operand_d* %3, %struct.ssa_use_operand_d** %next1, align 8, !dbg !7246
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !7247
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !7248
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %6, i32 0, i32 1, !dbg !7249
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next2, align 8, !dbg !7249
  %prev3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %7, i32 0, i32 0, !dbg !7250
  store %struct.ssa_use_operand_d* %5, %struct.ssa_use_operand_d** %prev3, align 8, !dbg !7251
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !7252
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !7253
  %next4 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %9, i32 0, i32 1, !dbg !7254
  store %struct.ssa_use_operand_d* %8, %struct.ssa_use_operand_d** %next4, align 8, !dbg !7255
  ret void, !dbg !7256
}

; Function Attrs: noinline nounwind uwtable
define internal void @clear_and_done_ssa_iter(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !7257 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !7260, metadata !DIExpression()), !dbg !7261
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7262
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 2, !dbg !7263
  store %struct.def_optype_d* null, %struct.def_optype_d** %defs, align 8, !dbg !7264
  %1 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7265
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %1, i32 0, i32 3, !dbg !7266
  store %struct.use_optype_d* null, %struct.use_optype_d** %uses, align 8, !dbg !7267
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7268
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 1, !dbg !7269
  store i32 0, i32* %iter_type, align 4, !dbg !7270
  %3 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7271
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %3, i32 0, i32 4, !dbg !7272
  store i32 0, i32* %phi_i, align 8, !dbg !7273
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7274
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %4, i32 0, i32 5, !dbg !7275
  store i32 0, i32* %num_phi, align 4, !dbg !7276
  %5 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7277
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %5, i32 0, i32 6, !dbg !7278
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !7279
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7280
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %6, i32 0, i32 0, !dbg !7281
  store i8 1, i8* %done, align 8, !dbg !7282
  ret void, !dbg !7283
}

; Function Attrs: noinline nounwind uwtable
define internal void @link_imm_use(%struct.ssa_use_operand_d* %linknode, %union.tree_node* %def) #0 !dbg !7284 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  %def.addr = alloca %union.tree_node*, align 8
  %root = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !7287, metadata !DIExpression()), !dbg !7288
  store %union.tree_node* %def, %union.tree_node** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %def.addr, metadata !7289, metadata !DIExpression()), !dbg !7290
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %root, metadata !7291, metadata !DIExpression()), !dbg !7292
  %0 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !7293
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !7293
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !7295

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !7296
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !7296
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !7296
  %bf.load = load i64, i64* %2, align 8, !dbg !7296
  %bf.clear = and i64 %bf.load, 65535, !dbg !7296
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7296
  %cmp = icmp ne i32 %bf.cast, 141, !dbg !7297
  br i1 %cmp, label %if.then, label %if.else, !dbg !7298

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !7299
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %3, i32 0, i32 0, !dbg !7300
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev, align 8, !dbg !7301
  br label %if.end, !dbg !7299

if.else:                                          ; preds = %lor.lhs.false
  %4 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !7302
  %ssa_name = bitcast %union.tree_node* %4 to %struct.tree_ssa_name*, !dbg !7302
  %imm_uses = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 5, !dbg !7302
  store %struct.ssa_use_operand_d* %imm_uses, %struct.ssa_use_operand_d** %root, align 8, !dbg !7304
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !7305
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %root, align 8, !dbg !7306
  call void @link_imm_use_to_list(%struct.ssa_use_operand_d* %5, %struct.ssa_use_operand_d* %6), !dbg !7307
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !7308
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_op(%union.gimple_statement_d* %gs, i32 %i, %union.tree_node* %op) #0 !dbg !7309 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  %op.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7312, metadata !DIExpression()), !dbg !7313
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !7314, metadata !DIExpression()), !dbg !7315
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !7316, metadata !DIExpression()), !dbg !7317
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7318
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !7318
  %conv = zext i8 %call to i32, !dbg !7318
  %tobool = icmp ne i32 %conv, 0, !dbg !7318
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !7318

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %i.addr, align 4, !dbg !7318
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7318
  %call1 = call i32 @gimple_num_ops(%union.gimple_statement_d* %2), !dbg !7318
  %cmp = icmp ult i32 %1, %call1, !dbg !7318
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !7318

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.20, i64 0, i64 0), i32 1665, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7318
  br label %cond.end, !dbg !7318

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !7318

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7318
  %3 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !7319
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7320
  %call3 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %4), !dbg !7321
  %5 = load i32, i32* %i.addr, align 4, !dbg !7322
  %idxprom = zext i32 %5 to i64, !dbg !7321
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call3, i64 %idxprom, !dbg !7321
  store %union.tree_node* %3, %union.tree_node** %arrayidx, align 8, !dbg !7323
  ret void, !dbg !7324
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #0 !dbg !7325 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7326, metadata !DIExpression()), !dbg !7327
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7328
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !7329
  %num_ops = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 3, !dbg !7330
  %1 = load i32, i32* %num_ops, align 4, !dbg !7330
  ret i32 %1, !dbg !7331
}

declare dso_local void @gimple_set_modified(%union.gimple_statement_d*, i8 zeroext) #2

declare dso_local void @update_stmt_operands(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %gs) #0 !dbg !7332 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7333, metadata !DIExpression()), !dbg !7334
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7335
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !7336
  %result = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 3, !dbg !7337
  ret %union.tree_node** %result, !dbg !7338
}

; Function Attrs: noinline nounwind uwtable
define internal void @op_iter_init(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !7339 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !7342, metadata !DIExpression()), !dbg !7343
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !7344, metadata !DIExpression()), !dbg !7345
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !7346, metadata !DIExpression()), !dbg !7347
  %0 = load i32, i32* %flags.addr, align 4, !dbg !7348
  %and = and i32 %0, 8, !dbg !7348
  %tobool = icmp ne i32 %and, 0, !dbg !7348
  br i1 %tobool, label %lor.lhs.false, label %land.lhs.true, !dbg !7348

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !7348
  %and1 = and i32 %1, 2, !dbg !7348
  %tobool2 = icmp ne i32 %and1, 0, !dbg !7348
  br i1 %tobool2, label %land.lhs.true, label %cond.true, !dbg !7348

land.lhs.true:                                    ; preds = %lor.lhs.false, %entry
  %2 = load i32, i32* %flags.addr, align 4, !dbg !7348
  %and3 = and i32 %2, 4, !dbg !7348
  %tobool4 = icmp ne i32 %and3, 0, !dbg !7348
  br i1 %tobool4, label %lor.lhs.false5, label %cond.false, !dbg !7348

lor.lhs.false5:                                   ; preds = %land.lhs.true
  %3 = load i32, i32* %flags.addr, align 4, !dbg !7348
  %and6 = and i32 %3, 1, !dbg !7348
  %tobool7 = icmp ne i32 %and6, 0, !dbg !7348
  br i1 %tobool7, label %cond.false, label %cond.true, !dbg !7348

cond.true:                                        ; preds = %lor.lhs.false5, %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.21, i64 0, i64 0), i32 747, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7348
  br label %cond.end, !dbg !7348

cond.false:                                       ; preds = %lor.lhs.false5, %land.lhs.true
  br label %cond.end, !dbg !7348

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7348
  %4 = load i32, i32* %flags.addr, align 4, !dbg !7349
  %and8 = and i32 %4, 10, !dbg !7350
  %tobool9 = icmp ne i32 %and8, 0, !dbg !7350
  br i1 %tobool9, label %cond.true10, label %cond.false11, !dbg !7351

cond.true10:                                      ; preds = %cond.end
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7352
  %call = call %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %5), !dbg !7353
  br label %cond.end12, !dbg !7351

cond.false11:                                     ; preds = %cond.end
  br label %cond.end12, !dbg !7351

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond13 = phi %struct.def_optype_d* [ %call, %cond.true10 ], [ null, %cond.false11 ], !dbg !7351
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7354
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %6, i32 0, i32 2, !dbg !7355
  store %struct.def_optype_d* %cond13, %struct.def_optype_d** %defs, align 8, !dbg !7356
  %7 = load i32, i32* %flags.addr, align 4, !dbg !7357
  %and14 = and i32 %7, 8, !dbg !7359
  %tobool15 = icmp ne i32 %and14, 0, !dbg !7359
  br i1 %tobool15, label %if.end, label %land.lhs.true16, !dbg !7360

land.lhs.true16:                                  ; preds = %cond.end12
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7361
  %defs17 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %8, i32 0, i32 2, !dbg !7362
  %9 = load %struct.def_optype_d*, %struct.def_optype_d** %defs17, align 8, !dbg !7362
  %tobool18 = icmp ne %struct.def_optype_d* %9, null, !dbg !7361
  br i1 %tobool18, label %land.lhs.true19, label %if.end, !dbg !7363

land.lhs.true19:                                  ; preds = %land.lhs.true16
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7364
  %call20 = call %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %10), !dbg !7365
  %cmp = icmp ne %union.tree_node* %call20, null, !dbg !7366
  br i1 %cmp, label %if.then, label %if.end, !dbg !7367

if.then:                                          ; preds = %land.lhs.true19
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7368
  %defs21 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 2, !dbg !7369
  %12 = load %struct.def_optype_d*, %struct.def_optype_d** %defs21, align 8, !dbg !7369
  %next = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %12, i32 0, i32 0, !dbg !7370
  %13 = load %struct.def_optype_d*, %struct.def_optype_d** %next, align 8, !dbg !7370
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7371
  %defs22 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %14, i32 0, i32 2, !dbg !7372
  store %struct.def_optype_d* %13, %struct.def_optype_d** %defs22, align 8, !dbg !7373
  br label %if.end, !dbg !7371

if.end:                                           ; preds = %if.then, %land.lhs.true19, %land.lhs.true16, %cond.end12
  %15 = load i32, i32* %flags.addr, align 4, !dbg !7374
  %and23 = and i32 %15, 5, !dbg !7375
  %tobool24 = icmp ne i32 %and23, 0, !dbg !7375
  br i1 %tobool24, label %cond.true25, label %cond.false27, !dbg !7376

cond.true25:                                      ; preds = %if.end
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7377
  %call26 = call %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %16), !dbg !7378
  br label %cond.end28, !dbg !7376

cond.false27:                                     ; preds = %if.end
  br label %cond.end28, !dbg !7376

cond.end28:                                       ; preds = %cond.false27, %cond.true25
  %cond29 = phi %struct.use_optype_d* [ %call26, %cond.true25 ], [ null, %cond.false27 ], !dbg !7376
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7379
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 3, !dbg !7380
  store %struct.use_optype_d* %cond29, %struct.use_optype_d** %uses, align 8, !dbg !7381
  %18 = load i32, i32* %flags.addr, align 4, !dbg !7382
  %and30 = and i32 %18, 4, !dbg !7384
  %tobool31 = icmp ne i32 %and30, 0, !dbg !7384
  br i1 %tobool31, label %if.end42, label %land.lhs.true32, !dbg !7385

land.lhs.true32:                                  ; preds = %cond.end28
  %19 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7386
  %uses33 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %19, i32 0, i32 3, !dbg !7387
  %20 = load %struct.use_optype_d*, %struct.use_optype_d** %uses33, align 8, !dbg !7387
  %tobool34 = icmp ne %struct.use_optype_d* %20, null, !dbg !7386
  br i1 %tobool34, label %land.lhs.true35, label %if.end42, !dbg !7388

land.lhs.true35:                                  ; preds = %land.lhs.true32
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7389
  %call36 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %21), !dbg !7390
  %cmp37 = icmp ne %union.tree_node* %call36, null, !dbg !7391
  br i1 %cmp37, label %if.then38, label %if.end42, !dbg !7392

if.then38:                                        ; preds = %land.lhs.true35
  %22 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7393
  %uses39 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %22, i32 0, i32 3, !dbg !7394
  %23 = load %struct.use_optype_d*, %struct.use_optype_d** %uses39, align 8, !dbg !7394
  %next40 = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %23, i32 0, i32 0, !dbg !7395
  %24 = load %struct.use_optype_d*, %struct.use_optype_d** %next40, align 8, !dbg !7395
  %25 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7396
  %uses41 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %25, i32 0, i32 3, !dbg !7397
  store %struct.use_optype_d* %24, %struct.use_optype_d** %uses41, align 8, !dbg !7398
  br label %if.end42, !dbg !7396

if.end42:                                         ; preds = %if.then38, %land.lhs.true35, %land.lhs.true32, %cond.end28
  %26 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7399
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %26, i32 0, i32 0, !dbg !7400
  store i8 0, i8* %done, align 8, !dbg !7401
  %27 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7402
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %27, i32 0, i32 4, !dbg !7403
  store i32 0, i32* %phi_i, align 8, !dbg !7404
  %28 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7405
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %28, i32 0, i32 5, !dbg !7406
  store i32 0, i32* %num_phi, align 4, !dbg !7407
  %29 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7408
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %29, i32 0, i32 6, !dbg !7409
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !7410
  ret void, !dbg !7411
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %g) #0 !dbg !7412 {
entry:
  %retval = alloca %struct.def_optype_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !7415, metadata !DIExpression()), !dbg !7416
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7417
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !7419
  %tobool = icmp ne i8 %call, 0, !dbg !7419
  br i1 %tobool, label %if.end, label %if.then, !dbg !7420

if.then:                                          ; preds = %entry
  store %struct.def_optype_d* null, %struct.def_optype_d** %retval, align 8, !dbg !7421
  br label %return, !dbg !7421

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7422
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !7423
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !7424
  %def_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 1, !dbg !7425
  %2 = load %struct.def_optype_d*, %struct.def_optype_d** %def_ops, align 8, !dbg !7425
  store %struct.def_optype_d* %2, %struct.def_optype_d** %retval, align 8, !dbg !7426
  br label %return, !dbg !7426

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.def_optype_d*, %struct.def_optype_d** %retval, align 8, !dbg !7427
  ret %struct.def_optype_d* %3, !dbg !7427
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %g) #0 !dbg !7428 {
entry:
  %retval = alloca %struct.use_optype_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !7431, metadata !DIExpression()), !dbg !7432
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7433
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !7435
  %tobool = icmp ne i8 %call, 0, !dbg !7435
  br i1 %tobool, label %if.end, label %if.then, !dbg !7436

if.then:                                          ; preds = %entry
  store %struct.use_optype_d* null, %struct.use_optype_d** %retval, align 8, !dbg !7437
  br label %return, !dbg !7437

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7438
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !7439
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !7440
  %use_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 2, !dbg !7441
  %2 = load %struct.use_optype_d*, %struct.use_optype_d** %use_ops, align 8, !dbg !7441
  store %struct.use_optype_d* %2, %struct.use_optype_d** %retval, align 8, !dbg !7442
  br label %return, !dbg !7442

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %retval, align 8, !dbg !7443
  ret %struct.use_optype_d* %3, !dbg !7443
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_end_p(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !7444 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !7447, metadata !DIExpression()), !dbg !7448
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !7449
  %3 = load i32, i32* %index, align 8, !dbg !7449
  %4 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !7450
  %5 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 0, !dbg !7450
  %6 = load i32, i32* %5, align 8, !dbg !7450
  %7 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 1, !dbg !7450
  %8 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %7, align 8, !dbg !7450
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %6, %struct.VEC_edge_gc** %8), !dbg !7450
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !7450
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7450

cond.true:                                        ; preds = %entry
  %9 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !7450
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !7450
  %11 = load i32, i32* %10, align 8, !dbg !7450
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !7450
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !7450
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !7450
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !7450
  br label %cond.end, !dbg !7450

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7450

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7450
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !7450
  %cmp = icmp eq i32 %3, %call2, !dbg !7451
  %conv = zext i1 %cmp to i32, !dbg !7451
  %conv3 = trunc i32 %conv to i8, !dbg !7452
  ret i8 %conv3, !dbg !7453
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @ei_edge(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !7454 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !7457, metadata !DIExpression()), !dbg !7458
  %3 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !7459
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !7459
  %5 = load i32, i32* %4, align 8, !dbg !7459
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !7459
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !7459
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !7459
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !7459
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7459

cond.true:                                        ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !7459
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !7459
  %10 = load i32, i32* %9, align 8, !dbg !7459
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !7459
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !7459
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %10, %struct.VEC_edge_gc** %12), !dbg !7459
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !7459
  br label %cond.end, !dbg !7459

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7459

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7459
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !7459
  %13 = load i32, i32* %index, align 8, !dbg !7459
  %call2 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 %13), !dbg !7459
  ret %struct.edge_def* %call2, !dbg !7460
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_length(%struct.VEC_edge_base* %vec_) #0 !dbg !7461 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !7466, metadata !DIExpression()), !dbg !7467
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !7467
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !7467
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7467

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !7467
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %1, i32 0, i32 0, !dbg !7467
  %2 = load i32, i32* %num, align 8, !dbg !7467
  br label %cond.end, !dbg !7467

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7467

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !7467
  ret i32 %cond, !dbg !7467
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_edge_gc* @ei_container(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !7468 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !7471, metadata !DIExpression()), !dbg !7472
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !7473
  %3 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container, align 8, !dbg !7473
  %tobool = icmp ne %struct.VEC_edge_gc** %3, null, !dbg !7473
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !7473

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.25, i64 0, i64 0), i32 687, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7473
  br label %cond.end, !dbg !7473

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7473

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7473
  %container1 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !7474
  %4 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container1, align 8, !dbg !7474
  %5 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %4, align 8, !dbg !7475
  ret %struct.VEC_edge_gc* %5, !dbg !7476
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %vec_, i32 %ix_) #0 !dbg !7477 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !7480, metadata !DIExpression()), !dbg !7481
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !7482, metadata !DIExpression()), !dbg !7481
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !7481
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !7481
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !7481

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !7481
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !7481
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 0, !dbg !7481
  %3 = load i32, i32* %num, align 8, !dbg !7481
  %cmp = icmp ult i32 %1, %3, !dbg !7481
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !7483
  %land.ext = zext i1 %4 to i32, !dbg !7481
  %5 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !7481
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %5, i32 0, i32 2, !dbg !7481
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !7481
  %idxprom = zext i32 %6 to i64, !dbg !7481
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !7481
  %7 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !7481
  ret %struct.edge_def* %7, !dbg !7481
}

declare dso_local void @print_generic_stmt(%struct._IO_FILE*, %union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %bb) #0 !dbg !7484 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !7490, metadata !DIExpression()), !dbg !7491
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7492
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 13, !dbg !7493
  %1 = load i32, i32* %flags, align 8, !dbg !7493
  %and = and i32 %1, 512, !dbg !7494
  %tobool = icmp ne i32 %and, 0, !dbg !7494
  br i1 %tobool, label %cond.false, label %land.lhs.true, !dbg !7495

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7496
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 7, !dbg !7497
  %gimple = bitcast %union.basic_block_il_dependent* %il to %struct.gimple_bb_info**, !dbg !7498
  %3 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple, align 8, !dbg !7498
  %tobool1 = icmp ne %struct.gimple_bb_info* %3, null, !dbg !7496
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !7499

cond.true:                                        ; preds = %land.lhs.true
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7500
  %il2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !7501
  %gimple3 = bitcast %union.basic_block_il_dependent* %il2 to %struct.gimple_bb_info**, !dbg !7502
  %5 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple3, align 8, !dbg !7502
  %seq = getelementptr inbounds %struct.gimple_bb_info, %struct.gimple_bb_info* %5, i32 0, i32 0, !dbg !7503
  %6 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !7503
  br label %cond.end, !dbg !7499

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !7499

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_d* [ %6, %cond.true ], [ null, %cond.false ], !dbg !7499
  ret %struct.gimple_seq_d* %cond, !dbg !7504
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %s) #0 !dbg !7505 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !7511, metadata !DIExpression()), !dbg !7512
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !7513
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !7513
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7513

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !7514
  %first = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 0, !dbg !7515
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %first, align 8, !dbg !7515
  br label %cond.end, !dbg !7513

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7513

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !7513
  ret %struct.gimple_seq_node_d* %cond, !dbg !7516
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %g) #0 !dbg !7517 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !7518, metadata !DIExpression()), !dbg !7519
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7520
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !7521
  %cmp = icmp uge i32 %call, 6, !dbg !7522
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !7523

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7524
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !7525
  %cmp2 = icmp ule i32 %call1, 9, !dbg !7526
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !7527
  %land.ext = zext i1 %2 to i32, !dbg !7523
  %conv = trunc i32 %land.ext to i8, !dbg !7521
  ret i8 %conv, !dbg !7528
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vop(%struct.function* %fun) #0 !dbg !7529 {
entry:
  %fun.addr = alloca %struct.function*, align 8
  store %struct.function* %fun, %struct.function** %fun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fun.addr, metadata !7532, metadata !DIExpression()), !dbg !7533
  %0 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !7534
  %tobool = icmp ne %struct.function* %0, null, !dbg !7534
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !7534

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !7534
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %1, i32 0, i32 3, !dbg !7534
  %2 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !7534
  %tobool1 = icmp ne %struct.gimple_df* %2, null, !dbg !7534
  br i1 %tobool1, label %cond.false, label %cond.true, !dbg !7534

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.21, i64 0, i64 0), i32 51, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7534
  br label %cond.end, !dbg !7534

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !7534

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7534
  %3 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !7535
  %gimple_df2 = getelementptr inbounds %struct.function, %struct.function* %3, i32 0, i32 3, !dbg !7536
  %4 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df2, align 8, !dbg !7536
  %vop = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %4, i32 0, i32 3, !dbg !7537
  %5 = load %union.tree_node*, %union.tree_node** %vop, align 8, !dbg !7537
  ret %union.tree_node* %5, !dbg !7538
}

declare dso_local zeroext i8 @verify_imm_links(%struct._IO_FILE*, %union.tree_node*) #2

declare dso_local zeroext i8 @dominated_by_p(i32, %struct.basic_block_def*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal i8* @first_htab_element(%struct.htab_iterator* %hti, %struct.htab* %table) #0 !dbg !7539 {
entry:
  %retval = alloca i8*, align 8
  %hti.addr = alloca %struct.htab_iterator*, align 8
  %table.addr = alloca %struct.htab*, align 8
  %x = alloca i8*, align 8
  store %struct.htab_iterator* %hti, %struct.htab_iterator** %hti.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab_iterator** %hti.addr, metadata !7543, metadata !DIExpression()), !dbg !7544
  store %struct.htab* %table, %struct.htab** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %table.addr, metadata !7545, metadata !DIExpression()), !dbg !7546
  %0 = load %struct.htab*, %struct.htab** %table.addr, align 8, !dbg !7547
  %1 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !7548
  %htab = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %1, i32 0, i32 0, !dbg !7549
  store %struct.htab* %0, %struct.htab** %htab, align 8, !dbg !7550
  %2 = load %struct.htab*, %struct.htab** %table.addr, align 8, !dbg !7551
  %entries = getelementptr inbounds %struct.htab, %struct.htab* %2, i32 0, i32 3, !dbg !7552
  %3 = load i8**, i8*** %entries, align 8, !dbg !7552
  %4 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !7553
  %slot = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %4, i32 0, i32 1, !dbg !7554
  store i8** %3, i8*** %slot, align 8, !dbg !7555
  %5 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !7556
  %slot1 = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %5, i32 0, i32 1, !dbg !7557
  %6 = load i8**, i8*** %slot1, align 8, !dbg !7557
  %7 = load %struct.htab*, %struct.htab** %table.addr, align 8, !dbg !7558
  %call = call i64 @htab_size(%struct.htab* %7), !dbg !7559
  %add.ptr = getelementptr inbounds i8*, i8** %6, i64 %call, !dbg !7560
  %8 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !7561
  %limit = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %8, i32 0, i32 2, !dbg !7562
  store i8** %add.ptr, i8*** %limit, align 8, !dbg !7563
  br label %do.body, !dbg !7564

do.body:                                          ; preds = %do.cond, %entry
  call void @llvm.dbg.declare(metadata i8** %x, metadata !7565, metadata !DIExpression()), !dbg !7567
  %9 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !7568
  %slot2 = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %9, i32 0, i32 1, !dbg !7569
  %10 = load i8**, i8*** %slot2, align 8, !dbg !7569
  %11 = load i8*, i8** %10, align 8, !dbg !7570
  store i8* %11, i8** %x, align 8, !dbg !7567
  %12 = load i8*, i8** %x, align 8, !dbg !7571
  %cmp = icmp ne i8* %12, null, !dbg !7573
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !7574

land.lhs.true:                                    ; preds = %do.body
  %13 = load i8*, i8** %x, align 8, !dbg !7575
  %cmp3 = icmp ne i8* %13, inttoptr (i64 1 to i8*), !dbg !7576
  br i1 %cmp3, label %if.then, label %if.end, !dbg !7577

if.then:                                          ; preds = %land.lhs.true
  br label %do.end, !dbg !7578

if.end:                                           ; preds = %land.lhs.true, %do.body
  br label %do.cond, !dbg !7579

do.cond:                                          ; preds = %if.end
  %14 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !7580
  %slot4 = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %14, i32 0, i32 1, !dbg !7581
  %15 = load i8**, i8*** %slot4, align 8, !dbg !7582
  %incdec.ptr = getelementptr inbounds i8*, i8** %15, i32 1, !dbg !7582
  store i8** %incdec.ptr, i8*** %slot4, align 8, !dbg !7582
  %16 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !7583
  %limit5 = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %16, i32 0, i32 2, !dbg !7584
  %17 = load i8**, i8*** %limit5, align 8, !dbg !7584
  %cmp6 = icmp ult i8** %incdec.ptr, %17, !dbg !7585
  br i1 %cmp6, label %do.body, label %do.end, !dbg !7579, !llvm.loop !7586

do.end:                                           ; preds = %do.cond, %if.then
  %18 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !7588
  %slot7 = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %18, i32 0, i32 1, !dbg !7590
  %19 = load i8**, i8*** %slot7, align 8, !dbg !7590
  %20 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !7591
  %limit8 = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %20, i32 0, i32 2, !dbg !7592
  %21 = load i8**, i8*** %limit8, align 8, !dbg !7592
  %cmp9 = icmp ult i8** %19, %21, !dbg !7593
  br i1 %cmp9, label %if.then10, label %if.end12, !dbg !7594

if.then10:                                        ; preds = %do.end
  %22 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !7595
  %slot11 = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %22, i32 0, i32 1, !dbg !7596
  %23 = load i8**, i8*** %slot11, align 8, !dbg !7596
  %24 = load i8*, i8** %23, align 8, !dbg !7597
  store i8* %24, i8** %retval, align 8, !dbg !7598
  br label %return, !dbg !7598

if.end12:                                         ; preds = %do.end
  store i8* null, i8** %retval, align 8, !dbg !7599
  br label %return, !dbg !7599

return:                                           ; preds = %if.end12, %if.then10
  %25 = load i8*, i8** %retval, align 8, !dbg !7600
  ret i8* %25, !dbg !7600
}

declare dso_local i64 @htab_size(%struct.htab*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @end_htab_p(%struct.htab_iterator* %hti) #0 !dbg !7601 {
entry:
  %retval = alloca i8, align 1
  %hti.addr = alloca %struct.htab_iterator*, align 8
  store %struct.htab_iterator* %hti, %struct.htab_iterator** %hti.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab_iterator** %hti.addr, metadata !7606, metadata !DIExpression()), !dbg !7607
  %0 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !7608
  %slot = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %0, i32 0, i32 1, !dbg !7610
  %1 = load i8**, i8*** %slot, align 8, !dbg !7610
  %2 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !7611
  %limit = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %2, i32 0, i32 2, !dbg !7612
  %3 = load i8**, i8*** %limit, align 8, !dbg !7612
  %cmp = icmp uge i8** %1, %3, !dbg !7613
  br i1 %cmp, label %if.then, label %if.end, !dbg !7614

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !7615
  br label %return, !dbg !7615

if.end:                                           ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !7616
  br label %return, !dbg !7616

return:                                           ; preds = %if.end, %if.then
  %4 = load i8, i8* %retval, align 1, !dbg !7617
  ret i8 %4, !dbg !7617
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @next_htab_element(%struct.htab_iterator* %hti) #0 !dbg !7618 {
entry:
  %retval = alloca i8*, align 8
  %hti.addr = alloca %struct.htab_iterator*, align 8
  %x = alloca i8*, align 8
  store %struct.htab_iterator* %hti, %struct.htab_iterator** %hti.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab_iterator** %hti.addr, metadata !7621, metadata !DIExpression()), !dbg !7622
  br label %while.cond, !dbg !7623

while.cond:                                       ; preds = %if.end, %entry
  %0 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !7624
  %slot = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %0, i32 0, i32 1, !dbg !7625
  %1 = load i8**, i8*** %slot, align 8, !dbg !7626
  %incdec.ptr = getelementptr inbounds i8*, i8** %1, i32 1, !dbg !7626
  store i8** %incdec.ptr, i8*** %slot, align 8, !dbg !7626
  %2 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !7627
  %limit = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %2, i32 0, i32 2, !dbg !7628
  %3 = load i8**, i8*** %limit, align 8, !dbg !7628
  %cmp = icmp ult i8** %incdec.ptr, %3, !dbg !7629
  br i1 %cmp, label %while.body, label %while.end, !dbg !7623

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i8** %x, metadata !7630, metadata !DIExpression()), !dbg !7632
  %4 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !7633
  %slot1 = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %4, i32 0, i32 1, !dbg !7634
  %5 = load i8**, i8*** %slot1, align 8, !dbg !7634
  %6 = load i8*, i8** %5, align 8, !dbg !7635
  store i8* %6, i8** %x, align 8, !dbg !7632
  %7 = load i8*, i8** %x, align 8, !dbg !7636
  %cmp2 = icmp ne i8* %7, null, !dbg !7638
  br i1 %cmp2, label %land.lhs.true, label %if.end, !dbg !7639

land.lhs.true:                                    ; preds = %while.body
  %8 = load i8*, i8** %x, align 8, !dbg !7640
  %cmp3 = icmp ne i8* %8, inttoptr (i64 1 to i8*), !dbg !7641
  br i1 %cmp3, label %if.then, label %if.end, !dbg !7642

if.then:                                          ; preds = %land.lhs.true
  %9 = load i8*, i8** %x, align 8, !dbg !7643
  store i8* %9, i8** %retval, align 8, !dbg !7644
  br label %return, !dbg !7644

if.end:                                           ; preds = %land.lhs.true, %while.body
  br label %while.cond, !dbg !7623, !llvm.loop !7645

while.end:                                        ; preds = %while.cond
  store i8* null, i8** %retval, align 8, !dbg !7647
  br label %return, !dbg !7647

return:                                           ; preds = %while.end, %if.then
  %10 = load i8*, i8** %retval, align 8, !dbg !7648
  ret i8* %10, !dbg !7648
}

declare dso_local i32 @pointer_set_insert(%struct.pointer_set_t*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @warn_uninitialized_vars(i8 zeroext %warn_possibly_uninitialized) #0 !dbg !7649 {
entry:
  %warn_possibly_uninitialized.addr = alloca i8, align 1
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %data = alloca %struct.walk_data, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %wi = alloca %struct.walk_stmt_info, align 8
  store i8 %warn_possibly_uninitialized, i8* %warn_possibly_uninitialized.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %warn_possibly_uninitialized.addr, metadata !7652, metadata !DIExpression()), !dbg !7653
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !7654, metadata !DIExpression()), !dbg !7655
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !7656, metadata !DIExpression()), !dbg !7657
  call void @llvm.dbg.declare(metadata %struct.walk_data* %data, metadata !7658, metadata !DIExpression()), !dbg !7659
  %0 = load i8, i8* %warn_possibly_uninitialized.addr, align 1, !dbg !7660
  %warn_possibly_uninitialized1 = getelementptr inbounds %struct.walk_data, %struct.walk_data* %data, i32 0, i32 2, !dbg !7661
  store i8 %0, i8* %warn_possibly_uninitialized1, align 1, !dbg !7662
  call void @calculate_dominance_info(i32 2), !dbg !7663
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7664
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !7664
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !7664
  %2 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !7664
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %2, i32 0, i32 0, !dbg !7664
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !7664
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 6, !dbg !7664
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !7664
  store %struct.basic_block_def* %4, %struct.basic_block_def** %bb, align 8, !dbg !7664
  br label %for.cond, !dbg !7664

for.cond:                                         ; preds = %for.inc17, %entry
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7666
  %6 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7666
  %add.ptr2 = getelementptr inbounds %struct.function, %struct.function* %6, i64 0, !dbg !7666
  %cfg3 = getelementptr inbounds %struct.function, %struct.function* %add.ptr2, i32 0, i32 1, !dbg !7666
  %7 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg3, align 8, !dbg !7666
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %7, i32 0, i32 1, !dbg !7666
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !7666
  %cmp = icmp ne %struct.basic_block_def* %5, %8, !dbg !7666
  br i1 %cmp, label %for.body, label %for.end19, !dbg !7664

for.body:                                         ; preds = %for.cond
  %9 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7668
  %add.ptr4 = getelementptr inbounds %struct.function, %struct.function* %9, i64 0, !dbg !7668
  %cfg5 = getelementptr inbounds %struct.function, %struct.function* %add.ptr4, i32 0, i32 1, !dbg !7668
  %10 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg5, align 8, !dbg !7668
  %x_entry_block_ptr6 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %10, i32 0, i32 0, !dbg !7668
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr6, align 8, !dbg !7668
  %call = call %struct.basic_block_def* @single_succ(%struct.basic_block_def* %11), !dbg !7670
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7671
  %call7 = call zeroext i8 @dominated_by_p(i32 2, %struct.basic_block_def* %call, %struct.basic_block_def* %12), !dbg !7672
  %always_executed = getelementptr inbounds %struct.walk_data, %struct.walk_data* %data, i32 0, i32 1, !dbg !7673
  store i8 %call7, i8* %always_executed, align 8, !dbg !7674
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7675
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %13), !dbg !7677
  %14 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !7677
  %15 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !7677
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %14, i8* align 8 %15, i64 24, i1 false), !dbg !7677
  br label %for.cond8, !dbg !7678

for.cond8:                                        ; preds = %for.inc, %for.body
  %call9 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !7679
  %tobool = icmp ne i8 %call9, 0, !dbg !7681
  %lnot = xor i1 %tobool, true, !dbg !7681
  br i1 %lnot, label %for.body10, label %for.end, !dbg !7682

for.body10:                                       ; preds = %for.cond8
  call void @llvm.dbg.declare(metadata %struct.walk_stmt_info* %wi, metadata !7683, metadata !DIExpression()), !dbg !7685
  %call11 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !7686
  %stmt = getelementptr inbounds %struct.walk_data, %struct.walk_data* %data, i32 0, i32 0, !dbg !7687
  store %union.gimple_statement_d* %call11, %union.gimple_statement_d** %stmt, align 8, !dbg !7688
  %stmt12 = getelementptr inbounds %struct.walk_data, %struct.walk_data* %data, i32 0, i32 0, !dbg !7689
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt12, align 8, !dbg !7689
  %call13 = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %16), !dbg !7691
  %tobool14 = icmp ne i8 %call13, 0, !dbg !7691
  br i1 %tobool14, label %if.then, label %if.end, !dbg !7692

if.then:                                          ; preds = %for.body10
  br label %for.inc, !dbg !7693

if.end:                                           ; preds = %for.body10
  %17 = bitcast %struct.walk_stmt_info* %wi to i8*, !dbg !7694
  call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 56, i1 false), !dbg !7694
  %18 = bitcast %struct.walk_data* %data to i8*, !dbg !7695
  %info = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i32 0, i32 1, !dbg !7696
  store i8* %18, i8** %info, align 8, !dbg !7697
  %call15 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !7698
  %call16 = call %union.tree_node* @walk_gimple_op(%union.gimple_statement_d* %call15, %union.tree_node* (%union.tree_node**, i32*, i8*)* @warn_uninitialized_var, %struct.walk_stmt_info* %wi), !dbg !7699
  br label %for.inc, !dbg !7700

for.inc:                                          ; preds = %if.end, %if.then
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !7701
  br label %for.cond8, !dbg !7702, !llvm.loop !7703

for.end:                                          ; preds = %for.cond8
  br label %for.inc17, !dbg !7705

for.inc17:                                        ; preds = %for.end
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7666
  %next_bb18 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %19, i32 0, i32 6, !dbg !7666
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb18, align 8, !dbg !7666
  store %struct.basic_block_def* %20, %struct.basic_block_def** %bb, align 8, !dbg !7666
  br label %for.cond, !dbg !7666, !llvm.loop !7706

for.end19:                                        ; preds = %for.cond
  call void @free_dominance_info(i32 2), !dbg !7708
  ret i32 0, !dbg !7709
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @single_succ(%struct.basic_block_def* %bb) #0 !dbg !7710 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !7713, metadata !DIExpression()), !dbg !7714
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7715
  %call = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %0), !dbg !7716
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call, i32 0, i32 1, !dbg !7717
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !7717
  ret %struct.basic_block_def* %1, !dbg !7718
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @warn_uninitialized_var(%union.tree_node** %tp, i32* %walk_subtrees, i8* %data_) #0 !dbg !7719 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %tp.addr = alloca %union.tree_node**, align 8
  %walk_subtrees.addr = alloca i32*, align 8
  %data_.addr = alloca i8*, align 8
  %wi = alloca %struct.walk_stmt_info*, align 8
  %data = alloca %struct.walk_data*, align 8
  %t = alloca %union.tree_node*, align 8
  %vuse = alloca %struct.ssa_use_operand_d*, align 8
  %op = alloca %union.tree_node*, align 8
  store %union.tree_node** %tp, %union.tree_node*** %tp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %tp.addr, metadata !7720, metadata !DIExpression()), !dbg !7721
  store i32* %walk_subtrees, i32** %walk_subtrees.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %walk_subtrees.addr, metadata !7722, metadata !DIExpression()), !dbg !7723
  store i8* %data_, i8** %data_.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data_.addr, metadata !7724, metadata !DIExpression()), !dbg !7725
  call void @llvm.dbg.declare(metadata %struct.walk_stmt_info** %wi, metadata !7726, metadata !DIExpression()), !dbg !7727
  %0 = load i8*, i8** %data_.addr, align 8, !dbg !7728
  %1 = bitcast i8* %0 to %struct.walk_stmt_info*, !dbg !7729
  store %struct.walk_stmt_info* %1, %struct.walk_stmt_info** %wi, align 8, !dbg !7727
  call void @llvm.dbg.declare(metadata %struct.walk_data** %data, metadata !7730, metadata !DIExpression()), !dbg !7731
  %2 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !7732
  %info = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %2, i32 0, i32 1, !dbg !7733
  %3 = load i8*, i8** %info, align 8, !dbg !7733
  %4 = bitcast i8* %3 to %struct.walk_data*, !dbg !7734
  store %struct.walk_data* %4, %struct.walk_data** %data, align 8, !dbg !7731
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !7735, metadata !DIExpression()), !dbg !7736
  %5 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !7737
  %6 = load %union.tree_node*, %union.tree_node** %5, align 8, !dbg !7738
  store %union.tree_node* %6, %union.tree_node** %t, align 8, !dbg !7736
  %7 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !7739
  %is_lhs = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %7, i32 0, i32 4, !dbg !7741
  %8 = load i8, i8* %is_lhs, align 1, !dbg !7741
  %tobool = icmp ne i8 %8, 0, !dbg !7739
  br i1 %tobool, label %if.then, label %if.end13, !dbg !7742

if.then:                                          ; preds = %entry
  %9 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7743
  %base = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !7743
  %10 = bitcast %struct.tree_base* %base to i64*, !dbg !7743
  %bf.load = load i64, i64* %10, align 8, !dbg !7743
  %bf.clear = and i64 %bf.load, 65535, !dbg !7743
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7743
  %cmp = icmp eq i32 %bf.cast, 47, !dbg !7743
  br i1 %cmp, label %if.end, label %lor.lhs.false, !dbg !7743

lor.lhs.false:                                    ; preds = %if.then
  %11 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7743
  %base1 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !7743
  %12 = bitcast %struct.tree_base* %base1 to i64*, !dbg !7743
  %bf.load2 = load i64, i64* %12, align 8, !dbg !7743
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !7743
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !7743
  %cmp5 = icmp eq i32 %bf.cast4, 48, !dbg !7743
  br i1 %cmp5, label %if.end, label %lor.lhs.false6, !dbg !7743

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %13 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7743
  %base7 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !7743
  %14 = bitcast %struct.tree_base* %base7 to i64*, !dbg !7743
  %bf.load8 = load i64, i64* %14, align 8, !dbg !7743
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !7743
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !7743
  %cmp11 = icmp eq i32 %bf.cast10, 49, !dbg !7743
  br i1 %cmp11, label %if.end, label %if.then12, !dbg !7746

if.then12:                                        ; preds = %lor.lhs.false6
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7747
  br label %return, !dbg !7747

if.end:                                           ; preds = %lor.lhs.false6, %lor.lhs.false, %if.then
  %15 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7748
  %exp = bitcast %union.tree_node* %15 to %struct.tree_exp*, !dbg !7748
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !7748
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !7748
  %16 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !7748
  store %union.tree_node* %16, %union.tree_node** %t, align 8, !dbg !7749
  br label %if.end13, !dbg !7750

if.end13:                                         ; preds = %if.end, %entry
  %17 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7751
  %base14 = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !7751
  %18 = bitcast %struct.tree_base* %base14 to i64*, !dbg !7751
  %bf.load15 = load i64, i64* %18, align 8, !dbg !7751
  %bf.clear16 = and i64 %bf.load15, 65535, !dbg !7751
  %bf.cast17 = trunc i64 %bf.clear16 to i32, !dbg !7751
  switch i32 %bf.cast17, label %sw.default [
    i32 121, label %sw.bb
    i32 32, label %sw.bb18
    i32 141, label %sw.bb41
    i32 43, label %sw.bb50
    i32 44, label %sw.bb50
  ], !dbg !7752

sw.bb:                                            ; preds = %if.end13
  %19 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !7753
  store i32 0, i32* %19, align 4, !dbg !7755
  br label %sw.epilog, !dbg !7756

sw.bb18:                                          ; preds = %if.end13
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %vuse, metadata !7757, metadata !DIExpression()), !dbg !7759
  call void @llvm.dbg.declare(metadata %union.tree_node** %op, metadata !7760, metadata !DIExpression()), !dbg !7761
  %20 = load %struct.walk_data*, %struct.walk_data** %data, align 8, !dbg !7762
  %stmt = getelementptr inbounds %struct.walk_data, %struct.walk_data* %20, i32 0, i32 0, !dbg !7764
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7764
  %cmp19 = icmp eq %union.gimple_statement_d* %21, null, !dbg !7765
  br i1 %cmp19, label %if.then20, label %if.end21, !dbg !7766

if.then20:                                        ; preds = %sw.bb18
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7767
  br label %return, !dbg !7767

if.end21:                                         ; preds = %sw.bb18
  %22 = load %struct.walk_data*, %struct.walk_data** %data, align 8, !dbg !7768
  %stmt22 = getelementptr inbounds %struct.walk_data, %struct.walk_data* %22, i32 0, i32 0, !dbg !7770
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt22, align 8, !dbg !7770
  %call = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %23), !dbg !7771
  %tobool23 = icmp ne i8 %call, 0, !dbg !7771
  br i1 %tobool23, label %if.then24, label %if.end25, !dbg !7772

if.then24:                                        ; preds = %if.end21
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7773
  br label %return, !dbg !7773

if.end25:                                         ; preds = %if.end21
  %24 = load %struct.walk_data*, %struct.walk_data** %data, align 8, !dbg !7774
  %stmt26 = getelementptr inbounds %struct.walk_data, %struct.walk_data* %24, i32 0, i32 0, !dbg !7775
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt26, align 8, !dbg !7775
  %call27 = call %struct.ssa_use_operand_d* @gimple_vuse_op(%union.gimple_statement_d* %25), !dbg !7776
  store %struct.ssa_use_operand_d* %call27, %struct.ssa_use_operand_d** %vuse, align 8, !dbg !7777
  %26 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %vuse, align 8, !dbg !7778
  %cmp28 = icmp eq %struct.ssa_use_operand_d* %26, null, !dbg !7780
  br i1 %cmp28, label %if.then29, label %if.end30, !dbg !7781

if.then29:                                        ; preds = %if.end25
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7782
  br label %return, !dbg !7782

if.end30:                                         ; preds = %if.end25
  %27 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %vuse, align 8, !dbg !7783
  %call31 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %27), !dbg !7783
  store %union.tree_node* %call31, %union.tree_node** %op, align 8, !dbg !7784
  %28 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7785
  %29 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !7787
  %ssa_name = bitcast %union.tree_node* %29 to %struct.tree_ssa_name*, !dbg !7787
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !7787
  %30 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7787
  %cmp32 = icmp ne %union.tree_node* %28, %30, !dbg !7788
  br i1 %cmp32, label %if.then39, label %lor.lhs.false33, !dbg !7789

lor.lhs.false33:                                  ; preds = %if.end30
  %31 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !7790
  %base34 = bitcast %union.tree_node* %31 to %struct.tree_base*, !dbg !7790
  %32 = bitcast %struct.tree_base* %base34 to i64*, !dbg !7790
  %bf.load35 = load i64, i64* %32, align 8, !dbg !7790
  %bf.lshr = lshr i64 %bf.load35, 32, !dbg !7790
  %bf.clear36 = and i64 %bf.lshr, 1, !dbg !7790
  %bf.cast37 = trunc i64 %bf.clear36 to i32, !dbg !7790
  %tobool38 = icmp ne i32 %bf.cast37, 0, !dbg !7790
  br i1 %tobool38, label %if.end40, label %if.then39, !dbg !7791

if.then39:                                        ; preds = %lor.lhs.false33, %if.end30
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7792
  br label %return, !dbg !7792

if.end40:                                         ; preds = %lor.lhs.false33
  %33 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !7793
  store %union.tree_node* %33, %union.tree_node** %t, align 8, !dbg !7794
  br label %sw.bb41, !dbg !7795

sw.bb41:                                          ; preds = %if.end13, %if.end40
  %34 = load %struct.walk_data*, %struct.walk_data** %data, align 8, !dbg !7796
  %always_executed = getelementptr inbounds %struct.walk_data, %struct.walk_data* %34, i32 0, i32 1, !dbg !7798
  %35 = load i8, i8* %always_executed, align 8, !dbg !7798
  %tobool42 = icmp ne i8 %35, 0, !dbg !7796
  br i1 %tobool42, label %if.then43, label %if.else, !dbg !7799

if.then43:                                        ; preds = %sw.bb41
  %36 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7800
  %37 = load %struct.walk_data*, %struct.walk_data** %data, align 8, !dbg !7801
  %stmt44 = getelementptr inbounds %struct.walk_data, %struct.walk_data* %37, i32 0, i32 0, !dbg !7802
  %38 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt44, align 8, !dbg !7802
  %39 = bitcast %union.gimple_statement_d* %38 to i8*, !dbg !7801
  call void @warn_uninit(%union.tree_node* %36, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.48, i64 0, i64 0), i8* %39), !dbg !7803
  br label %if.end49, !dbg !7803

if.else:                                          ; preds = %sw.bb41
  %40 = load %struct.walk_data*, %struct.walk_data** %data, align 8, !dbg !7804
  %warn_possibly_uninitialized = getelementptr inbounds %struct.walk_data, %struct.walk_data* %40, i32 0, i32 2, !dbg !7806
  %41 = load i8, i8* %warn_possibly_uninitialized, align 1, !dbg !7806
  %tobool45 = icmp ne i8 %41, 0, !dbg !7804
  br i1 %tobool45, label %if.then46, label %if.end48, !dbg !7807

if.then46:                                        ; preds = %if.else
  %42 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7808
  %43 = load %struct.walk_data*, %struct.walk_data** %data, align 8, !dbg !7809
  %stmt47 = getelementptr inbounds %struct.walk_data, %struct.walk_data* %43, i32 0, i32 0, !dbg !7810
  %44 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt47, align 8, !dbg !7810
  %45 = bitcast %union.gimple_statement_d* %44 to i8*, !dbg !7809
  call void @warn_uninit(%union.tree_node* %42, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.49, i64 0, i64 0), i8* %45), !dbg !7811
  br label %if.end48, !dbg !7811

if.end48:                                         ; preds = %if.then46, %if.else
  br label %if.end49

if.end49:                                         ; preds = %if.end48, %if.then43
  %46 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !7812
  store i32 0, i32* %46, align 4, !dbg !7813
  br label %sw.epilog, !dbg !7814

sw.bb50:                                          ; preds = %if.end13, %if.end13
  %47 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7815
  %exp51 = bitcast %union.tree_node* %47 to %struct.tree_exp*, !dbg !7815
  %operands52 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp51, i32 0, i32 3, !dbg !7815
  %arrayidx53 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands52, i64 0, i64 0, !dbg !7815
  %48 = load %union.tree_node*, %union.tree_node** %arrayidx53, align 8, !dbg !7815
  %base54 = bitcast %union.tree_node* %48 to %struct.tree_base*, !dbg !7815
  %49 = bitcast %struct.tree_base* %base54 to i64*, !dbg !7815
  %bf.load55 = load i64, i64* %49, align 8, !dbg !7815
  %bf.clear56 = and i64 %bf.load55, 65535, !dbg !7815
  %bf.cast57 = trunc i64 %bf.clear56 to i32, !dbg !7815
  %cmp58 = icmp eq i32 %bf.cast57, 141, !dbg !7817
  br i1 %cmp58, label %if.then59, label %if.end60, !dbg !7818

if.then59:                                        ; preds = %sw.bb50
  %50 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !7819
  store i32 0, i32* %50, align 4, !dbg !7820
  br label %if.end60, !dbg !7821

if.end60:                                         ; preds = %if.then59, %sw.bb50
  br label %sw.epilog, !dbg !7822

sw.default:                                       ; preds = %if.end13
  %51 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7823
  %base61 = bitcast %union.tree_node* %51 to %struct.tree_base*, !dbg !7823
  %52 = bitcast %struct.tree_base* %base61 to i64*, !dbg !7823
  %bf.load62 = load i64, i64* %52, align 8, !dbg !7823
  %bf.clear63 = and i64 %bf.load62, 65535, !dbg !7823
  %bf.cast64 = trunc i64 %bf.clear63 to i32, !dbg !7823
  %idxprom = sext i32 %bf.cast64 to i64, !dbg !7823
  %arrayidx65 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !7823
  %53 = load i32, i32* %arrayidx65, align 4, !dbg !7823
  %cmp66 = icmp eq i32 %53, 2, !dbg !7823
  br i1 %cmp66, label %if.then75, label %lor.lhs.false67, !dbg !7823

lor.lhs.false67:                                  ; preds = %sw.default
  %54 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7823
  %base68 = bitcast %union.tree_node* %54 to %struct.tree_base*, !dbg !7823
  %55 = bitcast %struct.tree_base* %base68 to i64*, !dbg !7823
  %bf.load69 = load i64, i64* %55, align 8, !dbg !7823
  %bf.clear70 = and i64 %bf.load69, 65535, !dbg !7823
  %bf.cast71 = trunc i64 %bf.clear70 to i32, !dbg !7823
  %idxprom72 = sext i32 %bf.cast71 to i64, !dbg !7823
  %arrayidx73 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom72, !dbg !7823
  %56 = load i32, i32* %arrayidx73, align 4, !dbg !7823
  %cmp74 = icmp eq i32 %56, 3, !dbg !7823
  br i1 %cmp74, label %if.then75, label %if.end76, !dbg !7825

if.then75:                                        ; preds = %lor.lhs.false67, %sw.default
  %57 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !7826
  store i32 0, i32* %57, align 4, !dbg !7827
  br label %if.end76, !dbg !7828

if.end76:                                         ; preds = %if.then75, %lor.lhs.false67
  br label %sw.epilog, !dbg !7829

sw.epilog:                                        ; preds = %if.end76, %if.end60, %if.end49, %sw.bb
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7830
  br label %return, !dbg !7830

return:                                           ; preds = %sw.epilog, %if.then39, %if.then29, %if.then24, %if.then20, %if.then12
  %58 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7831
  ret %union.tree_node* %58, !dbg !7831
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %bb) #0 !dbg !7832 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !7835, metadata !DIExpression()), !dbg !7836
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7837
  %call = call zeroext i8 @single_succ_p(%struct.basic_block_def* %0), !dbg !7837
  %tobool = icmp ne i8 %call, 0, !dbg !7837
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !7837

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.25, i64 0, i64 0), i32 645, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7837
  br label %cond.end, !dbg !7837

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7837

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7837
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7838
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 1, !dbg !7838
  %2 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !7838
  %tobool1 = icmp ne %struct.VEC_edge_gc* %2, null, !dbg !7838
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !7838

cond.true2:                                       ; preds = %cond.end
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7838
  %succs3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 1, !dbg !7838
  %4 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs3, align 8, !dbg !7838
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %4, i32 0, i32 0, !dbg !7838
  br label %cond.end5, !dbg !7838

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !7838

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_edge_base* [ %base, %cond.true2 ], [ null, %cond.false4 ], !dbg !7838
  %call7 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond6, i32 0), !dbg !7838
  ret %struct.edge_def* %call7, !dbg !7839
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @single_succ_p(%struct.basic_block_def* %bb) #0 !dbg !7840 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !7843, metadata !DIExpression()), !dbg !7844
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7845
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 1, !dbg !7845
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !7845
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !7845
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7845

cond.true:                                        ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7845
  %succs1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 1, !dbg !7845
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs1, align 8, !dbg !7845
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !7845
  br label %cond.end, !dbg !7845

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7845

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7845
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !7845
  %cmp = icmp eq i32 %call, 1, !dbg !7846
  %conv = zext i1 %cmp to i32, !dbg !7846
  %conv2 = trunc i32 %conv to i8, !dbg !7845
  ret i8 %conv2, !dbg !7847
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_call(%union.gimple_statement_d* %gs) #0 !dbg !7848 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7849, metadata !DIExpression()), !dbg !7850
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7851
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !7852
  %cmp = icmp eq i32 %call, 8, !dbg !7853
  %conv = zext i1 %cmp to i32, !dbg !7853
  %conv1 = trunc i32 %conv to i8, !dbg !7852
  ret i8 %conv1, !dbg !7854
}

; Function Attrs: noinline nounwind uwtable
define internal void @warn_uninit(%union.tree_node* %t, i8* %gmsgid, i8* %data) #0 !dbg !7855 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  %gmsgid.addr = alloca i8*, align 8
  %data.addr = alloca i8*, align 8
  %var = alloca %union.tree_node*, align 8
  %context = alloca %union.gimple_statement_d*, align 8
  %location = alloca i32, align 4
  %xloc = alloca %struct.expanded_location, align 8
  %floc = alloca %struct.expanded_location, align 8
  %tmp = alloca %struct.expanded_location, align 8
  %tmp12 = alloca %struct.expanded_location, align 8
  %tmp30 = alloca %struct.expanded_location, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !7858, metadata !DIExpression()), !dbg !7859
  store i8* %gmsgid, i8** %gmsgid.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %gmsgid.addr, metadata !7860, metadata !DIExpression()), !dbg !7861
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !7862, metadata !DIExpression()), !dbg !7863
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !7864, metadata !DIExpression()), !dbg !7865
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7866
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !7866
  %var1 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !7866
  %1 = load %union.tree_node*, %union.tree_node** %var1, align 8, !dbg !7866
  store %union.tree_node* %1, %union.tree_node** %var, align 8, !dbg !7865
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %context, metadata !7867, metadata !DIExpression()), !dbg !7868
  %2 = load i8*, i8** %data.addr, align 8, !dbg !7869
  %3 = bitcast i8* %2 to %union.gimple_statement_d*, !dbg !7870
  store %union.gimple_statement_d* %3, %union.gimple_statement_d** %context, align 8, !dbg !7868
  call void @llvm.dbg.declare(metadata i32* %location, metadata !7871, metadata !DIExpression()), !dbg !7872
  call void @llvm.dbg.declare(metadata %struct.expanded_location* %xloc, metadata !7873, metadata !DIExpression()), !dbg !7881
  call void @llvm.dbg.declare(metadata %struct.expanded_location* %floc, metadata !7882, metadata !DIExpression()), !dbg !7883
  %4 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7884
  %call = call zeroext i8 @ssa_undefined_value_p(%union.tree_node* %4), !dbg !7886
  %tobool = icmp ne i8 %call, 0, !dbg !7886
  br i1 %tobool, label %if.end, label %if.then, !dbg !7887

if.then:                                          ; preds = %entry
  br label %if.end38, !dbg !7888

if.end:                                           ; preds = %entry
  %5 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7889
  %base = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !7889
  %6 = bitcast %struct.tree_base* %base to i64*, !dbg !7889
  %bf.load = load i64, i64* %6, align 8, !dbg !7889
  %bf.lshr = lshr i64 %bf.load, 23, !dbg !7889
  %bf.clear = and i64 %bf.lshr, 1, !dbg !7889
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7889
  %tobool2 = icmp ne i32 %bf.cast, 0, !dbg !7889
  br i1 %tobool2, label %if.then3, label %if.end4, !dbg !7891

if.then3:                                         ; preds = %if.end
  br label %if.end38, !dbg !7892

if.end4:                                          ; preds = %if.end
  %7 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7893
  %call5 = call zeroext i8 @is_global_var(%union.tree_node* %7), !dbg !7895
  %tobool6 = icmp ne i8 %call5, 0, !dbg !7895
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !7896

if.then7:                                         ; preds = %if.end4
  br label %if.end38, !dbg !7897

if.end8:                                          ; preds = %if.end4
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %context, align 8, !dbg !7898
  %cmp = icmp ne %union.gimple_statement_d* %8, null, !dbg !7899
  br i1 %cmp, label %land.lhs.true, label %cond.false, !dbg !7900

land.lhs.true:                                    ; preds = %if.end8
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %context, align 8, !dbg !7901
  %call9 = call zeroext i8 @gimple_has_location(%union.gimple_statement_d* %9), !dbg !7902
  %conv = zext i8 %call9 to i32, !dbg !7902
  %tobool10 = icmp ne i32 %conv, 0, !dbg !7902
  br i1 %tobool10, label %cond.true, label %cond.false, !dbg !7903

cond.true:                                        ; preds = %land.lhs.true
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %context, align 8, !dbg !7904
  %call11 = call i32 @gimple_location(%union.gimple_statement_d* %10), !dbg !7905
  br label %cond.end, !dbg !7903

cond.false:                                       ; preds = %land.lhs.true, %if.end8
  %11 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7906
  %decl_minimal = bitcast %union.tree_node* %11 to %struct.tree_decl_minimal*, !dbg !7906
  %locus = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 1, !dbg !7906
  %12 = load i32, i32* %locus, align 8, !dbg !7906
  br label %cond.end, !dbg !7903

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call11, %cond.true ], [ %12, %cond.false ], !dbg !7903
  store i32 %cond, i32* %location, align 4, !dbg !7907
  %13 = load i32, i32* %location, align 4, !dbg !7908
  call void @expand_location(%struct.expanded_location* sret %tmp, i32 %13), !dbg !7909
  %14 = bitcast %struct.expanded_location* %xloc to i8*, !dbg !7909
  %15 = bitcast %struct.expanded_location* %tmp to i8*, !dbg !7909
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %14, i8* align 8 %15, i64 24, i1 false), !dbg !7909
  %16 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7910
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %16, i64 0, !dbg !7910
  %decl = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 6, !dbg !7910
  %17 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7910
  %decl_minimal13 = bitcast %union.tree_node* %17 to %struct.tree_decl_minimal*, !dbg !7910
  %locus14 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal13, i32 0, i32 1, !dbg !7910
  %18 = load i32, i32* %locus14, align 8, !dbg !7910
  call void @expand_location(%struct.expanded_location* sret %tmp12, i32 %18), !dbg !7911
  %19 = bitcast %struct.expanded_location* %floc to i8*, !dbg !7911
  %20 = bitcast %struct.expanded_location* %tmp12 to i8*, !dbg !7911
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %19, i8* align 8 %20, i64 24, i1 false), !dbg !7911
  %21 = load i32, i32* %location, align 4, !dbg !7912
  %22 = load i8*, i8** %gmsgid.addr, align 8, !dbg !7914
  %23 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7915
  %call15 = call zeroext i8 (i32, i32, i8*, ...) @warning_at(i32 %21, i32 211, i8* %22, %union.tree_node* %23), !dbg !7916
  %tobool16 = icmp ne i8 %call15, 0, !dbg !7916
  br i1 %tobool16, label %if.then17, label %if.end38, !dbg !7917

if.then17:                                        ; preds = %cond.end
  %24 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7918
  %base18 = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !7918
  %25 = bitcast %struct.tree_base* %base18 to i64*, !dbg !7918
  %bf.load19 = load i64, i64* %25, align 8, !dbg !7920
  %bf.clear20 = and i64 %bf.load19, -8388609, !dbg !7920
  %bf.set = or i64 %bf.clear20, 8388608, !dbg !7920
  store i64 %bf.set, i64* %25, align 8, !dbg !7920
  %file = getelementptr inbounds %struct.expanded_location, %struct.expanded_location* %xloc, i32 0, i32 0, !dbg !7921
  %26 = load i8*, i8** %file, align 8, !dbg !7921
  %file21 = getelementptr inbounds %struct.expanded_location, %struct.expanded_location* %floc, i32 0, i32 0, !dbg !7923
  %27 = load i8*, i8** %file21, align 8, !dbg !7923
  %cmp22 = icmp ne i8* %26, %27, !dbg !7924
  br i1 %cmp22, label %if.then34, label %lor.lhs.false, !dbg !7925

lor.lhs.false:                                    ; preds = %if.then17
  %line = getelementptr inbounds %struct.expanded_location, %struct.expanded_location* %xloc, i32 0, i32 1, !dbg !7926
  %28 = load i32, i32* %line, align 8, !dbg !7926
  %line24 = getelementptr inbounds %struct.expanded_location, %struct.expanded_location* %floc, i32 0, i32 1, !dbg !7927
  %29 = load i32, i32* %line24, align 8, !dbg !7927
  %cmp25 = icmp slt i32 %28, %29, !dbg !7928
  br i1 %cmp25, label %if.then34, label %lor.lhs.false27, !dbg !7929

lor.lhs.false27:                                  ; preds = %lor.lhs.false
  %line28 = getelementptr inbounds %struct.expanded_location, %struct.expanded_location* %xloc, i32 0, i32 1, !dbg !7930
  %30 = load i32, i32* %line28, align 8, !dbg !7930
  %31 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7931
  %add.ptr29 = getelementptr inbounds %struct.function, %struct.function* %31, i64 0, !dbg !7931
  %function_end_locus = getelementptr inbounds %struct.function, %struct.function* %add.ptr29, i32 0, i32 16, !dbg !7931
  %32 = load i32, i32* %function_end_locus, align 4, !dbg !7931
  call void @expand_location(%struct.expanded_location* sret %tmp30, i32 %32), !dbg !7931
  %line31 = getelementptr inbounds %struct.expanded_location, %struct.expanded_location* %tmp30, i32 0, i32 1, !dbg !7931
  %33 = load i32, i32* %line31, align 8, !dbg !7931
  %cmp32 = icmp sgt i32 %30, %33, !dbg !7932
  br i1 %cmp32, label %if.then34, label %if.end37, !dbg !7933

if.then34:                                        ; preds = %lor.lhs.false27, %lor.lhs.false, %if.then17
  %34 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7934
  %decl_minimal35 = bitcast %union.tree_node* %34 to %struct.tree_decl_minimal*, !dbg !7934
  %locus36 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal35, i32 0, i32 1, !dbg !7934
  %35 = load i32, i32* %locus36, align 8, !dbg !7934
  %36 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7935
  call void (i32, i8*, ...) @inform(i32 %35, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.50, i64 0, i64 0), %union.tree_node* %36), !dbg !7936
  br label %if.end37, !dbg !7936

if.end37:                                         ; preds = %if.then34, %lor.lhs.false27
  br label %if.end38, !dbg !7937

if.end38:                                         ; preds = %if.then, %if.then3, %if.then7, %if.end37, %cond.end
  ret void, !dbg !7938
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_location(%union.gimple_statement_d* %g) #0 !dbg !7939 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !7940, metadata !DIExpression()), !dbg !7941
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7942
  %call = call i32 @gimple_location(%union.gimple_statement_d* %0), !dbg !7943
  %cmp = icmp ne i32 %call, 0, !dbg !7944
  %conv = zext i1 %cmp to i32, !dbg !7944
  %conv1 = trunc i32 %conv to i8, !dbg !7943
  ret i8 %conv1, !dbg !7945
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_location(%union.gimple_statement_d* %g) #0 !dbg !7946 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !7949, metadata !DIExpression()), !dbg !7950
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7951
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !7952
  %location = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 2, !dbg !7953
  %1 = load i32, i32* %location, align 8, !dbg !7953
  ret i32 %1, !dbg !7954
}

declare dso_local void @expand_location(%struct.expanded_location* sret, i32) #2

declare dso_local zeroext i8 @warning_at(i32, i32, i8*, ...) #2

declare dso_local void @inform(i32, i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define internal void @warn_uninitialized_phi(%union.gimple_statement_d* %phi) #0 !dbg !7955 {
entry:
  %phi.addr = alloca %union.gimple_statement_d*, align 8
  %i = alloca i64, align 8
  %n = alloca i64, align 8
  %op = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %phi, %union.gimple_statement_d** %phi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi.addr, metadata !7956, metadata !DIExpression()), !dbg !7957
  call void @llvm.dbg.declare(metadata i64* %i, metadata !7958, metadata !DIExpression()), !dbg !7959
  call void @llvm.dbg.declare(metadata i64* %n, metadata !7960, metadata !DIExpression()), !dbg !7961
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !7962
  %call = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %0), !dbg !7963
  %conv = zext i32 %call to i64, !dbg !7963
  store i64 %conv, i64* %n, align 8, !dbg !7961
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !7964
  %call1 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %1), !dbg !7966
  %call2 = call zeroext i8 @is_gimple_reg(%union.tree_node* %call1), !dbg !7967
  %tobool = icmp ne i8 %call2, 0, !dbg !7967
  br i1 %tobool, label %if.end, label %if.then, !dbg !7968

if.then:                                          ; preds = %entry
  br label %for.end, !dbg !7969

if.end:                                           ; preds = %entry
  store i64 0, i64* %i, align 8, !dbg !7970
  br label %for.cond, !dbg !7972

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load i64, i64* %i, align 8, !dbg !7973
  %3 = load i64, i64* %n, align 8, !dbg !7975
  %cmp = icmp ult i64 %2, %3, !dbg !7976
  br i1 %cmp, label %for.body, label %for.end, !dbg !7977

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %op, metadata !7978, metadata !DIExpression()), !dbg !7980
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !7981
  %5 = load i64, i64* %i, align 8, !dbg !7982
  %call4 = call %union.tree_node* @gimple_phi_arg_def(%union.gimple_statement_d* %4, i64 %5), !dbg !7983
  store %union.tree_node* %call4, %union.tree_node** %op, align 8, !dbg !7980
  %6 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !7984
  %base = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !7984
  %7 = bitcast %struct.tree_base* %base to i64*, !dbg !7984
  %bf.load = load i64, i64* %7, align 8, !dbg !7984
  %bf.clear = and i64 %bf.load, 65535, !dbg !7984
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7984
  %cmp5 = icmp eq i32 %bf.cast, 141, !dbg !7986
  br i1 %cmp5, label %if.then7, label %if.end8, !dbg !7987

if.then7:                                         ; preds = %for.body
  %8 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !7988
  call void @warn_uninit(%union.tree_node* %8, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.49, i64 0, i64 0), i8* null), !dbg !7989
  br label %if.end8, !dbg !7989

if.end8:                                          ; preds = %if.then7, %for.body
  br label %for.inc, !dbg !7990

for.inc:                                          ; preds = %if.end8
  %9 = load i64, i64* %i, align 8, !dbg !7991
  %inc = add i64 %9, 1, !dbg !7991
  store i64 %inc, i64* %i, align 8, !dbg !7991
  br label %for.cond, !dbg !7992, !llvm.loop !7993

for.end:                                          ; preds = %if.then, %for.cond
  ret void, !dbg !7995
}

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!2971, !2972, !2973}
!llvm.ident = !{!2974}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "edge_var_maps", scope: !2, file: !3, line: 51, type: !2446, isLocal: true, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !1545, globals: !2938, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "tree-ssa.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !134, !140, !145, !150, !169, !176, !183, !377, !416, !420, !433, !438, !445, !621, !628, !631, !657, !671}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !6, line: 7, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133}
!9 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!13 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!14 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!15 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!16 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!17 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!18 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!19 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!20 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!21 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!22 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!23 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!24 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!25 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!26 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!27 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!28 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!29 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!30 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!31 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!32 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!33 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!34 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!35 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!36 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!37 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!38 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!39 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!40 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!41 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!42 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!43 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!44 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!45 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!46 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!47 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!48 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!49 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!50 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!51 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!52 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!53 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!54 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!55 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!56 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!57 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!58 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!59 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!60 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!61 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!62 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!63 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!64 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!65 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!66 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!67 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!68 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!69 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!70 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!71 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!72 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!73 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!74 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!75 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!76 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!77 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!78 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!79 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!80 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!81 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!82 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!83 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!84 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!85 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!86 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!87 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!88 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!89 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!90 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!91 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!92 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!93 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!94 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!95 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!96 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!97 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!98 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!99 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!100 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!101 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!102 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!103 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!104 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!105 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!106 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!107 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!108 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!109 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!110 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!111 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!112 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!113 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!114 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!115 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!116 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!117 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!118 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!119 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!120 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!121 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!122 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!123 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!124 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!125 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!126 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!127 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!128 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!129 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!130 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!131 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!132 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!133 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!134 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !135, line: 363, baseType: !7, size: 32, elements: !136)
!135 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!136 = !{!137, !138, !139}
!137 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!138 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!139 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!140 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !135, line: 355, baseType: !7, size: 32, elements: !141)
!141 = !{!142, !143, !144}
!142 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!143 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!144 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!145 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !146, line: 474, baseType: !7, size: 32, elements: !147)
!146 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!147 = !{!148, !149}
!148 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!149 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!150 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !151, line: 280, baseType: !7, size: 32, elements: !152)
!151 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!152 = !{!153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168}
!153 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!154 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!155 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!156 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!157 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!158 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!159 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!160 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!161 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!162 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!163 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!164 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!165 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!166 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!167 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!168 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!169 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !151, line: 1817, baseType: !7, size: 32, elements: !170)
!170 = !{!171, !172, !173, !174, !175}
!171 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!172 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!173 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!174 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!175 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!176 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !151, line: 1805, baseType: !7, size: 32, elements: !177)
!177 = !{!178, !179, !180, !181, !182}
!178 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!179 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!180 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!181 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!182 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!183 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !151, line: 39, baseType: !7, size: 32, elements: !184)
!184 = !{!185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328, !329, !330, !331, !332, !333, !334, !335, !336, !337, !338, !339, !340, !341, !342, !343, !344, !345, !346, !347, !348, !349, !350, !351, !352, !353, !354, !355, !356, !357, !358, !359, !360, !361, !362, !363, !364, !365, !366, !367, !368, !369, !370, !371, !372, !373, !374, !375, !376}
!185 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!186 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!187 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!188 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!189 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!190 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!191 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!192 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!193 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!194 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!195 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!196 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!197 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!198 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!199 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!200 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!201 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!202 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!203 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!204 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!205 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!206 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!207 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!208 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!209 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!210 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!211 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!212 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!213 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!214 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!215 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!216 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!217 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!218 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!219 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!220 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!221 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!222 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!223 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!224 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!225 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!226 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!227 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!228 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!229 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!230 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!231 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!232 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!233 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!234 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!235 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!236 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!237 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!238 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!239 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!240 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!241 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!242 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!243 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!244 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!245 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!246 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!247 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!248 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!249 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!250 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!251 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!252 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!253 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!254 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!255 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!256 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!257 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!258 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!259 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!260 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!261 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!262 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!263 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!264 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!265 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!266 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!267 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!268 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!269 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!270 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!271 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!272 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!273 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!274 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!275 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!276 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!277 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!278 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!279 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!280 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!281 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!282 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!283 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!284 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!285 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!286 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!287 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!288 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!289 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!290 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!291 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!292 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!293 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!294 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!295 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!296 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!297 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!298 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!299 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!300 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!301 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!302 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!303 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!304 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!305 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!306 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!307 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!308 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!309 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!310 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!311 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!312 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!313 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!314 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!315 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!316 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!317 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!318 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!319 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!320 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!321 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!322 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!323 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!324 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!325 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!326 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!327 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!328 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!329 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!330 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!331 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!332 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!333 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!334 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!335 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!336 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!337 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!338 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!339 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!340 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!341 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!342 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!343 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!344 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!345 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!346 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!347 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!348 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!349 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!350 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!351 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!352 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!353 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!354 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!355 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!356 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!357 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!358 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!359 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!360 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!361 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!362 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!363 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!364 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!365 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!366 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!367 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!368 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!369 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!370 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!371 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!372 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!373 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!374 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!375 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!376 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!377 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_code", file: !378, line: 51, baseType: !7, size: 32, elements: !379)
!378 = !DIFile(filename: "./gimple.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!379 = !{!380, !381, !382, !383, !384, !385, !386, !387, !388, !389, !390, !391, !392, !393, !394, !395, !396, !397, !398, !399, !400, !401, !402, !403, !404, !405, !406, !407, !408, !409, !410, !411, !412, !413, !414, !415}
!380 = !DIEnumerator(name: "GIMPLE_ERROR_MARK", value: 0, isUnsigned: true)
!381 = !DIEnumerator(name: "GIMPLE_COND", value: 1, isUnsigned: true)
!382 = !DIEnumerator(name: "GIMPLE_DEBUG", value: 2, isUnsigned: true)
!383 = !DIEnumerator(name: "GIMPLE_GOTO", value: 3, isUnsigned: true)
!384 = !DIEnumerator(name: "GIMPLE_LABEL", value: 4, isUnsigned: true)
!385 = !DIEnumerator(name: "GIMPLE_SWITCH", value: 5, isUnsigned: true)
!386 = !DIEnumerator(name: "GIMPLE_ASSIGN", value: 6, isUnsigned: true)
!387 = !DIEnumerator(name: "GIMPLE_ASM", value: 7, isUnsigned: true)
!388 = !DIEnumerator(name: "GIMPLE_CALL", value: 8, isUnsigned: true)
!389 = !DIEnumerator(name: "GIMPLE_RETURN", value: 9, isUnsigned: true)
!390 = !DIEnumerator(name: "GIMPLE_BIND", value: 10, isUnsigned: true)
!391 = !DIEnumerator(name: "GIMPLE_CATCH", value: 11, isUnsigned: true)
!392 = !DIEnumerator(name: "GIMPLE_EH_FILTER", value: 12, isUnsigned: true)
!393 = !DIEnumerator(name: "GIMPLE_EH_MUST_NOT_THROW", value: 13, isUnsigned: true)
!394 = !DIEnumerator(name: "GIMPLE_RESX", value: 14, isUnsigned: true)
!395 = !DIEnumerator(name: "GIMPLE_EH_DISPATCH", value: 15, isUnsigned: true)
!396 = !DIEnumerator(name: "GIMPLE_PHI", value: 16, isUnsigned: true)
!397 = !DIEnumerator(name: "GIMPLE_TRY", value: 17, isUnsigned: true)
!398 = !DIEnumerator(name: "GIMPLE_NOP", value: 18, isUnsigned: true)
!399 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_LOAD", value: 19, isUnsigned: true)
!400 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_STORE", value: 20, isUnsigned: true)
!401 = !DIEnumerator(name: "GIMPLE_OMP_CONTINUE", value: 21, isUnsigned: true)
!402 = !DIEnumerator(name: "GIMPLE_OMP_CRITICAL", value: 22, isUnsigned: true)
!403 = !DIEnumerator(name: "GIMPLE_OMP_FOR", value: 23, isUnsigned: true)
!404 = !DIEnumerator(name: "GIMPLE_OMP_MASTER", value: 24, isUnsigned: true)
!405 = !DIEnumerator(name: "GIMPLE_OMP_ORDERED", value: 25, isUnsigned: true)
!406 = !DIEnumerator(name: "GIMPLE_OMP_PARALLEL", value: 26, isUnsigned: true)
!407 = !DIEnumerator(name: "GIMPLE_OMP_TASK", value: 27, isUnsigned: true)
!408 = !DIEnumerator(name: "GIMPLE_OMP_RETURN", value: 28, isUnsigned: true)
!409 = !DIEnumerator(name: "GIMPLE_OMP_SECTION", value: 29, isUnsigned: true)
!410 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS", value: 30, isUnsigned: true)
!411 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS_SWITCH", value: 31, isUnsigned: true)
!412 = !DIEnumerator(name: "GIMPLE_OMP_SINGLE", value: 32, isUnsigned: true)
!413 = !DIEnumerator(name: "GIMPLE_PREDICT", value: 33, isUnsigned: true)
!414 = !DIEnumerator(name: "GIMPLE_WITH_CLEANUP_EXPR", value: 34, isUnsigned: true)
!415 = !DIEnumerator(name: "LAST_AND_UNUSED_GIMPLE_CODE", value: 35, isUnsigned: true)
!416 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "cdi_direction", file: !135, line: 912, baseType: !7, size: 32, elements: !417)
!417 = !{!418, !419}
!418 = !DIEnumerator(name: "CDI_DOMINATORS", value: 1, isUnsigned: true)
!419 = !DIEnumerator(name: "CDI_POST_DOMINATORS", value: 2, isUnsigned: true)
!420 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code_class", file: !151, line: 58, baseType: !7, size: 32, elements: !421)
!421 = !{!422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432}
!422 = !DIEnumerator(name: "tcc_exceptional", value: 0, isUnsigned: true)
!423 = !DIEnumerator(name: "tcc_constant", value: 1, isUnsigned: true)
!424 = !DIEnumerator(name: "tcc_type", value: 2, isUnsigned: true)
!425 = !DIEnumerator(name: "tcc_declaration", value: 3, isUnsigned: true)
!426 = !DIEnumerator(name: "tcc_reference", value: 4, isUnsigned: true)
!427 = !DIEnumerator(name: "tcc_comparison", value: 5, isUnsigned: true)
!428 = !DIEnumerator(name: "tcc_unary", value: 6, isUnsigned: true)
!429 = !DIEnumerator(name: "tcc_binary", value: 7, isUnsigned: true)
!430 = !DIEnumerator(name: "tcc_statement", value: 8, isUnsigned: true)
!431 = !DIEnumerator(name: "tcc_vl_exp", value: 9, isUnsigned: true)
!432 = !DIEnumerator(name: "tcc_expression", value: 10, isUnsigned: true)
!433 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gsi_iterator_update", file: !378, line: 4603, baseType: !7, size: 32, elements: !434)
!434 = !{!435, !436, !437}
!435 = !DIEnumerator(name: "GSI_NEW_STMT", value: 0, isUnsigned: true)
!436 = !DIEnumerator(name: "GSI_SAME_STMT", value: 1, isUnsigned: true)
!437 = !DIEnumerator(name: "GSI_CONTINUE_LINKING", value: 2, isUnsigned: true)
!438 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ssa_op_iter_type", file: !439, line: 119, baseType: !7, size: 32, elements: !440)
!439 = !DIFile(filename: "./tree-ssa-operands.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!440 = !{!441, !442, !443, !444}
!441 = !DIEnumerator(name: "ssa_op_iter_none", value: 0, isUnsigned: true)
!442 = !DIEnumerator(name: "ssa_op_iter_tree", value: 1, isUnsigned: true)
!443 = !DIEnumerator(name: "ssa_op_iter_use", value: 2, isUnsigned: true)
!444 = !DIEnumerator(name: "ssa_op_iter_def", value: 3, isUnsigned: true)
!445 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !446, line: 74, baseType: !7, size: 32, elements: !447)
!446 = !DIFile(filename: "./timevar.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!447 = !{!448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560, !561, !562, !563, !564, !565, !566, !567, !568, !569, !570, !571, !572, !573, !574, !575, !576, !577, !578, !579, !580, !581, !582, !583, !584, !585, !586, !587, !588, !589, !590, !591, !592, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !604, !605, !606, !607, !608, !609, !610, !611, !612, !613, !614, !615, !616, !617, !618, !619, !620}
!448 = !DIEnumerator(name: "TV_NONE", value: 0, isUnsigned: true)
!449 = !DIEnumerator(name: "TV_TOTAL", value: 1, isUnsigned: true)
!450 = !DIEnumerator(name: "TV_GC", value: 2, isUnsigned: true)
!451 = !DIEnumerator(name: "TV_DUMP", value: 3, isUnsigned: true)
!452 = !DIEnumerator(name: "TV_CGRAPH", value: 4, isUnsigned: true)
!453 = !DIEnumerator(name: "TV_CGRAPHOPT", value: 5, isUnsigned: true)
!454 = !DIEnumerator(name: "TV_IPA_CONSTANT_PROP", value: 6, isUnsigned: true)
!455 = !DIEnumerator(name: "TV_IPA_LTO_GIMPLE_IO", value: 7, isUnsigned: true)
!456 = !DIEnumerator(name: "TV_IPA_LTO_DECL_IO", value: 8, isUnsigned: true)
!457 = !DIEnumerator(name: "TV_IPA_LTO_CGRAPH_IO", value: 9, isUnsigned: true)
!458 = !DIEnumerator(name: "TV_LTO", value: 10, isUnsigned: true)
!459 = !DIEnumerator(name: "TV_WHOPR_WPA", value: 11, isUnsigned: true)
!460 = !DIEnumerator(name: "TV_WHOPR_WPA_IO", value: 12, isUnsigned: true)
!461 = !DIEnumerator(name: "TV_WHOPR_LTRANS", value: 13, isUnsigned: true)
!462 = !DIEnumerator(name: "TV_WHOPR_WPA_FIXUP", value: 14, isUnsigned: true)
!463 = !DIEnumerator(name: "TV_WHOPR_WPA_LTRANS_EXEC", value: 15, isUnsigned: true)
!464 = !DIEnumerator(name: "TV_IPA_REFERENCE", value: 16, isUnsigned: true)
!465 = !DIEnumerator(name: "TV_IPA_PURE_CONST", value: 17, isUnsigned: true)
!466 = !DIEnumerator(name: "TV_IPA_TYPE_ESCAPE", value: 18, isUnsigned: true)
!467 = !DIEnumerator(name: "TV_IPA_PTA", value: 19, isUnsigned: true)
!468 = !DIEnumerator(name: "TV_IPA_SRA", value: 20, isUnsigned: true)
!469 = !DIEnumerator(name: "TV_IPA_FREE_LANG_DATA", value: 21, isUnsigned: true)
!470 = !DIEnumerator(name: "TV_CFG", value: 22, isUnsigned: true)
!471 = !DIEnumerator(name: "TV_CLEANUP_CFG", value: 23, isUnsigned: true)
!472 = !DIEnumerator(name: "TV_CFG_VERIFY", value: 24, isUnsigned: true)
!473 = !DIEnumerator(name: "TV_DELETE_TRIVIALLY_DEAD", value: 25, isUnsigned: true)
!474 = !DIEnumerator(name: "TV_LIFE", value: 26, isUnsigned: true)
!475 = !DIEnumerator(name: "TV_LIFE_UPDATE", value: 27, isUnsigned: true)
!476 = !DIEnumerator(name: "TV_DF_SCAN", value: 28, isUnsigned: true)
!477 = !DIEnumerator(name: "TV_DF_MD", value: 29, isUnsigned: true)
!478 = !DIEnumerator(name: "TV_DF_RD", value: 30, isUnsigned: true)
!479 = !DIEnumerator(name: "TV_DF_LR", value: 31, isUnsigned: true)
!480 = !DIEnumerator(name: "TV_DF_LIVE", value: 32, isUnsigned: true)
!481 = !DIEnumerator(name: "TV_DF_UREC", value: 33, isUnsigned: true)
!482 = !DIEnumerator(name: "TV_DF_CHAIN", value: 34, isUnsigned: true)
!483 = !DIEnumerator(name: "TV_DF_BYTE_LR", value: 35, isUnsigned: true)
!484 = !DIEnumerator(name: "TV_DF_NOTE", value: 36, isUnsigned: true)
!485 = !DIEnumerator(name: "TV_REG_STATS", value: 37, isUnsigned: true)
!486 = !DIEnumerator(name: "TV_ALIAS_ANALYSIS", value: 38, isUnsigned: true)
!487 = !DIEnumerator(name: "TV_ALIAS_STMT_WALK", value: 39, isUnsigned: true)
!488 = !DIEnumerator(name: "TV_REG_SCAN", value: 40, isUnsigned: true)
!489 = !DIEnumerator(name: "TV_REBUILD_JUMP", value: 41, isUnsigned: true)
!490 = !DIEnumerator(name: "TV_CPP", value: 42, isUnsigned: true)
!491 = !DIEnumerator(name: "TV_LEX", value: 43, isUnsigned: true)
!492 = !DIEnumerator(name: "TV_PARSE", value: 44, isUnsigned: true)
!493 = !DIEnumerator(name: "TV_NAME_LOOKUP", value: 45, isUnsigned: true)
!494 = !DIEnumerator(name: "TV_INLINE_HEURISTICS", value: 46, isUnsigned: true)
!495 = !DIEnumerator(name: "TV_INTEGRATION", value: 47, isUnsigned: true)
!496 = !DIEnumerator(name: "TV_TREE_GIMPLIFY", value: 48, isUnsigned: true)
!497 = !DIEnumerator(name: "TV_TREE_EH", value: 49, isUnsigned: true)
!498 = !DIEnumerator(name: "TV_TREE_CFG", value: 50, isUnsigned: true)
!499 = !DIEnumerator(name: "TV_TREE_CLEANUP_CFG", value: 51, isUnsigned: true)
!500 = !DIEnumerator(name: "TV_TREE_VRP", value: 52, isUnsigned: true)
!501 = !DIEnumerator(name: "TV_TREE_COPY_PROP", value: 53, isUnsigned: true)
!502 = !DIEnumerator(name: "TV_TREE_STORE_COPY_PROP", value: 54, isUnsigned: true)
!503 = !DIEnumerator(name: "TV_FIND_REFERENCED_VARS", value: 55, isUnsigned: true)
!504 = !DIEnumerator(name: "TV_TREE_PTA", value: 56, isUnsigned: true)
!505 = !DIEnumerator(name: "TV_TREE_INSERT_PHI_NODES", value: 57, isUnsigned: true)
!506 = !DIEnumerator(name: "TV_TREE_SSA_REWRITE_BLOCKS", value: 58, isUnsigned: true)
!507 = !DIEnumerator(name: "TV_TREE_SSA_OTHER", value: 59, isUnsigned: true)
!508 = !DIEnumerator(name: "TV_TREE_SSA_INCREMENTAL", value: 60, isUnsigned: true)
!509 = !DIEnumerator(name: "TV_TREE_OPS", value: 61, isUnsigned: true)
!510 = !DIEnumerator(name: "TV_TREE_SSA_DOMINATOR_OPTS", value: 62, isUnsigned: true)
!511 = !DIEnumerator(name: "TV_TREE_SRA", value: 63, isUnsigned: true)
!512 = !DIEnumerator(name: "TV_TREE_STORE_CCP", value: 64, isUnsigned: true)
!513 = !DIEnumerator(name: "TV_TREE_CCP", value: 65, isUnsigned: true)
!514 = !DIEnumerator(name: "TV_TREE_PHI_CPROP", value: 66, isUnsigned: true)
!515 = !DIEnumerator(name: "TV_TREE_SPLIT_EDGES", value: 67, isUnsigned: true)
!516 = !DIEnumerator(name: "TV_TREE_REASSOC", value: 68, isUnsigned: true)
!517 = !DIEnumerator(name: "TV_TREE_PRE", value: 69, isUnsigned: true)
!518 = !DIEnumerator(name: "TV_TREE_REDPHI", value: 70, isUnsigned: true)
!519 = !DIEnumerator(name: "TV_TREE_FRE", value: 71, isUnsigned: true)
!520 = !DIEnumerator(name: "TV_TREE_SINK", value: 72, isUnsigned: true)
!521 = !DIEnumerator(name: "TV_TREE_PHIOPT", value: 73, isUnsigned: true)
!522 = !DIEnumerator(name: "TV_TREE_FORWPROP", value: 74, isUnsigned: true)
!523 = !DIEnumerator(name: "TV_TREE_PHIPROP", value: 75, isUnsigned: true)
!524 = !DIEnumerator(name: "TV_TREE_DCE", value: 76, isUnsigned: true)
!525 = !DIEnumerator(name: "TV_TREE_CD_DCE", value: 77, isUnsigned: true)
!526 = !DIEnumerator(name: "TV_TREE_CALL_CDCE", value: 78, isUnsigned: true)
!527 = !DIEnumerator(name: "TV_TREE_DSE", value: 79, isUnsigned: true)
!528 = !DIEnumerator(name: "TV_TREE_MERGE_PHI", value: 80, isUnsigned: true)
!529 = !DIEnumerator(name: "TV_TREE_LOOP", value: 81, isUnsigned: true)
!530 = !DIEnumerator(name: "TV_TREE_LOOP_BOUNDS", value: 82, isUnsigned: true)
!531 = !DIEnumerator(name: "TV_LIM", value: 83, isUnsigned: true)
!532 = !DIEnumerator(name: "TV_TREE_LOOP_IVCANON", value: 84, isUnsigned: true)
!533 = !DIEnumerator(name: "TV_SCEV_CONST", value: 85, isUnsigned: true)
!534 = !DIEnumerator(name: "TV_TREE_LOOP_UNSWITCH", value: 86, isUnsigned: true)
!535 = !DIEnumerator(name: "TV_COMPLETE_UNROLL", value: 87, isUnsigned: true)
!536 = !DIEnumerator(name: "TV_TREE_PARALLELIZE_LOOPS", value: 88, isUnsigned: true)
!537 = !DIEnumerator(name: "TV_TREE_VECTORIZATION", value: 89, isUnsigned: true)
!538 = !DIEnumerator(name: "TV_TREE_SLP_VECTORIZATION", value: 90, isUnsigned: true)
!539 = !DIEnumerator(name: "TV_GRAPHITE_TRANSFORMS", value: 91, isUnsigned: true)
!540 = !DIEnumerator(name: "TV_GRAPHITE_DATA_DEPS", value: 92, isUnsigned: true)
!541 = !DIEnumerator(name: "TV_GRAPHITE_CODE_GEN", value: 93, isUnsigned: true)
!542 = !DIEnumerator(name: "TV_TREE_LINEAR_TRANSFORM", value: 94, isUnsigned: true)
!543 = !DIEnumerator(name: "TV_TREE_LOOP_DISTRIBUTION", value: 95, isUnsigned: true)
!544 = !DIEnumerator(name: "TV_CHECK_DATA_DEPS", value: 96, isUnsigned: true)
!545 = !DIEnumerator(name: "TV_TREE_PREFETCH", value: 97, isUnsigned: true)
!546 = !DIEnumerator(name: "TV_TREE_LOOP_IVOPTS", value: 98, isUnsigned: true)
!547 = !DIEnumerator(name: "TV_PREDCOM", value: 99, isUnsigned: true)
!548 = !DIEnumerator(name: "TV_TREE_LOOP_INIT", value: 100, isUnsigned: true)
!549 = !DIEnumerator(name: "TV_TREE_LOOP_FINI", value: 101, isUnsigned: true)
!550 = !DIEnumerator(name: "TV_TREE_CH", value: 102, isUnsigned: true)
!551 = !DIEnumerator(name: "TV_TREE_SSA_UNCPROP", value: 103, isUnsigned: true)
!552 = !DIEnumerator(name: "TV_TREE_SSA_TO_NORMAL", value: 104, isUnsigned: true)
!553 = !DIEnumerator(name: "TV_TREE_NRV", value: 105, isUnsigned: true)
!554 = !DIEnumerator(name: "TV_TREE_COPY_RENAME", value: 106, isUnsigned: true)
!555 = !DIEnumerator(name: "TV_TREE_SSA_VERIFY", value: 107, isUnsigned: true)
!556 = !DIEnumerator(name: "TV_TREE_STMT_VERIFY", value: 108, isUnsigned: true)
!557 = !DIEnumerator(name: "TV_TREE_SWITCH_CONVERSION", value: 109, isUnsigned: true)
!558 = !DIEnumerator(name: "TV_CGRAPH_VERIFY", value: 110, isUnsigned: true)
!559 = !DIEnumerator(name: "TV_DOM_FRONTIERS", value: 111, isUnsigned: true)
!560 = !DIEnumerator(name: "TV_DOMINANCE", value: 112, isUnsigned: true)
!561 = !DIEnumerator(name: "TV_CONTROL_DEPENDENCES", value: 113, isUnsigned: true)
!562 = !DIEnumerator(name: "TV_OVERLOAD", value: 114, isUnsigned: true)
!563 = !DIEnumerator(name: "TV_TEMPLATE_INSTANTIATION", value: 115, isUnsigned: true)
!564 = !DIEnumerator(name: "TV_EXPAND", value: 116, isUnsigned: true)
!565 = !DIEnumerator(name: "TV_VARCONST", value: 117, isUnsigned: true)
!566 = !DIEnumerator(name: "TV_LOWER_SUBREG", value: 118, isUnsigned: true)
!567 = !DIEnumerator(name: "TV_JUMP", value: 119, isUnsigned: true)
!568 = !DIEnumerator(name: "TV_FWPROP", value: 120, isUnsigned: true)
!569 = !DIEnumerator(name: "TV_CSE", value: 121, isUnsigned: true)
!570 = !DIEnumerator(name: "TV_DCE", value: 122, isUnsigned: true)
!571 = !DIEnumerator(name: "TV_DSE1", value: 123, isUnsigned: true)
!572 = !DIEnumerator(name: "TV_DSE2", value: 124, isUnsigned: true)
!573 = !DIEnumerator(name: "TV_LOOP", value: 125, isUnsigned: true)
!574 = !DIEnumerator(name: "TV_LOOP_MOVE_INVARIANTS", value: 126, isUnsigned: true)
!575 = !DIEnumerator(name: "TV_LOOP_UNSWITCH", value: 127, isUnsigned: true)
!576 = !DIEnumerator(name: "TV_LOOP_UNROLL", value: 128, isUnsigned: true)
!577 = !DIEnumerator(name: "TV_LOOP_DOLOOP", value: 129, isUnsigned: true)
!578 = !DIEnumerator(name: "TV_CPROP", value: 130, isUnsigned: true)
!579 = !DIEnumerator(name: "TV_PRE", value: 131, isUnsigned: true)
!580 = !DIEnumerator(name: "TV_HOIST", value: 132, isUnsigned: true)
!581 = !DIEnumerator(name: "TV_LSM", value: 133, isUnsigned: true)
!582 = !DIEnumerator(name: "TV_TRACER", value: 134, isUnsigned: true)
!583 = !DIEnumerator(name: "TV_WEB", value: 135, isUnsigned: true)
!584 = !DIEnumerator(name: "TV_AUTO_INC_DEC", value: 136, isUnsigned: true)
!585 = !DIEnumerator(name: "TV_CSE2", value: 137, isUnsigned: true)
!586 = !DIEnumerator(name: "TV_BRANCH_PROB", value: 138, isUnsigned: true)
!587 = !DIEnumerator(name: "TV_VPT", value: 139, isUnsigned: true)
!588 = !DIEnumerator(name: "TV_COMBINE", value: 140, isUnsigned: true)
!589 = !DIEnumerator(name: "TV_IFCVT", value: 141, isUnsigned: true)
!590 = !DIEnumerator(name: "TV_REGMOVE", value: 142, isUnsigned: true)
!591 = !DIEnumerator(name: "TV_MODE_SWITCH", value: 143, isUnsigned: true)
!592 = !DIEnumerator(name: "TV_SMS", value: 144, isUnsigned: true)
!593 = !DIEnumerator(name: "TV_SCHED", value: 145, isUnsigned: true)
!594 = !DIEnumerator(name: "TV_LOCAL_ALLOC", value: 146, isUnsigned: true)
!595 = !DIEnumerator(name: "TV_GLOBAL_ALLOC", value: 147, isUnsigned: true)
!596 = !DIEnumerator(name: "TV_IRA", value: 148, isUnsigned: true)
!597 = !DIEnumerator(name: "TV_RELOAD", value: 149, isUnsigned: true)
!598 = !DIEnumerator(name: "TV_RELOAD_CSE_REGS", value: 150, isUnsigned: true)
!599 = !DIEnumerator(name: "TV_SEQABSTR", value: 151, isUnsigned: true)
!600 = !DIEnumerator(name: "TV_GCSE_AFTER_RELOAD", value: 152, isUnsigned: true)
!601 = !DIEnumerator(name: "TV_THREAD_PROLOGUE_AND_EPILOGUE", value: 153, isUnsigned: true)
!602 = !DIEnumerator(name: "TV_IFCVT2", value: 154, isUnsigned: true)
!603 = !DIEnumerator(name: "TV_COMBINE_STACK_ADJUST", value: 155, isUnsigned: true)
!604 = !DIEnumerator(name: "TV_PEEPHOLE2", value: 156, isUnsigned: true)
!605 = !DIEnumerator(name: "TV_RENAME_REGISTERS", value: 157, isUnsigned: true)
!606 = !DIEnumerator(name: "TV_CPROP_REGISTERS", value: 158, isUnsigned: true)
!607 = !DIEnumerator(name: "TV_SCHED2", value: 159, isUnsigned: true)
!608 = !DIEnumerator(name: "TV_MACH_DEP", value: 160, isUnsigned: true)
!609 = !DIEnumerator(name: "TV_DBR_SCHED", value: 161, isUnsigned: true)
!610 = !DIEnumerator(name: "TV_REORDER_BLOCKS", value: 162, isUnsigned: true)
!611 = !DIEnumerator(name: "TV_SHORTEN_BRANCH", value: 163, isUnsigned: true)
!612 = !DIEnumerator(name: "TV_REG_STACK", value: 164, isUnsigned: true)
!613 = !DIEnumerator(name: "TV_FINAL", value: 165, isUnsigned: true)
!614 = !DIEnumerator(name: "TV_SYMOUT", value: 166, isUnsigned: true)
!615 = !DIEnumerator(name: "TV_VAR_TRACKING", value: 167, isUnsigned: true)
!616 = !DIEnumerator(name: "TV_TREE_IFCOMBINE", value: 168, isUnsigned: true)
!617 = !DIEnumerator(name: "TV_PLUGIN_INIT", value: 169, isUnsigned: true)
!618 = !DIEnumerator(name: "TV_PLUGIN_RUN", value: 170, isUnsigned: true)
!619 = !DIEnumerator(name: "TV_REST_OF_COMPILATION", value: 171, isUnsigned: true)
!620 = !DIEnumerator(name: "TIMEVAR_LAST", value: 172, isUnsigned: true)
!621 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "opt_pass_type", file: !622, line: 104, baseType: !7, size: 32, elements: !623)
!622 = !DIFile(filename: "./tree-pass.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!623 = !{!624, !625, !626, !627}
!624 = !DIEnumerator(name: "GIMPLE_PASS", value: 0, isUnsigned: true)
!625 = !DIEnumerator(name: "RTL_PASS", value: 1, isUnsigned: true)
!626 = !DIEnumerator(name: "SIMPLE_IPA_PASS", value: 2, isUnsigned: true)
!627 = !DIEnumerator(name: "IPA_PASS", value: 3, isUnsigned: true)
!628 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_debug_subcode", file: !378, line: 124, baseType: !7, size: 32, elements: !629)
!629 = !{!630}
!630 = !DIEnumerator(name: "GIMPLE_DEBUG_BIND", value: 0, isUnsigned: true)
!631 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_statement_structure_enum", file: !378, line: 727, baseType: !7, size: 32, elements: !632)
!632 = !{!633, !634, !635, !636, !637, !638, !639, !640, !641, !642, !643, !644, !645, !646, !647, !648, !649, !650, !651, !652, !653, !654, !655, !656}
!633 = !DIEnumerator(name: "GSS_BASE", value: 0, isUnsigned: true)
!634 = !DIEnumerator(name: "GSS_WITH_OPS", value: 1, isUnsigned: true)
!635 = !DIEnumerator(name: "GSS_WITH_MEM_OPS_BASE", value: 2, isUnsigned: true)
!636 = !DIEnumerator(name: "GSS_WITH_MEM_OPS", value: 3, isUnsigned: true)
!637 = !DIEnumerator(name: "GSS_ASM", value: 4, isUnsigned: true)
!638 = !DIEnumerator(name: "GSS_BIND", value: 5, isUnsigned: true)
!639 = !DIEnumerator(name: "GSS_PHI", value: 6, isUnsigned: true)
!640 = !DIEnumerator(name: "GSS_TRY", value: 7, isUnsigned: true)
!641 = !DIEnumerator(name: "GSS_CATCH", value: 8, isUnsigned: true)
!642 = !DIEnumerator(name: "GSS_EH_FILTER", value: 9, isUnsigned: true)
!643 = !DIEnumerator(name: "GSS_EH_MNT", value: 10, isUnsigned: true)
!644 = !DIEnumerator(name: "GSS_EH_CTRL", value: 11, isUnsigned: true)
!645 = !DIEnumerator(name: "GSS_WCE", value: 12, isUnsigned: true)
!646 = !DIEnumerator(name: "GSS_OMP", value: 13, isUnsigned: true)
!647 = !DIEnumerator(name: "GSS_OMP_CRITICAL", value: 14, isUnsigned: true)
!648 = !DIEnumerator(name: "GSS_OMP_FOR", value: 15, isUnsigned: true)
!649 = !DIEnumerator(name: "GSS_OMP_PARALLEL", value: 16, isUnsigned: true)
!650 = !DIEnumerator(name: "GSS_OMP_TASK", value: 17, isUnsigned: true)
!651 = !DIEnumerator(name: "GSS_OMP_SECTIONS", value: 18, isUnsigned: true)
!652 = !DIEnumerator(name: "GSS_OMP_SINGLE", value: 19, isUnsigned: true)
!653 = !DIEnumerator(name: "GSS_OMP_CONTINUE", value: 20, isUnsigned: true)
!654 = !DIEnumerator(name: "GSS_OMP_ATOMIC_LOAD", value: 21, isUnsigned: true)
!655 = !DIEnumerator(name: "GSS_OMP_ATOMIC_STORE", value: 22, isUnsigned: true)
!656 = !DIEnumerator(name: "LAST_GSS_ENUM", value: 23, isUnsigned: true)
!657 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "bb_flags", file: !135, line: 295, baseType: !7, size: 32, elements: !658)
!658 = !{!659, !660, !661, !662, !663, !664, !665, !666, !667, !668, !669, !670}
!659 = !DIEnumerator(name: "BB_NEW", value: 1, isUnsigned: true)
!660 = !DIEnumerator(name: "BB_REACHABLE", value: 2, isUnsigned: true)
!661 = !DIEnumerator(name: "BB_IRREDUCIBLE_LOOP", value: 4, isUnsigned: true)
!662 = !DIEnumerator(name: "BB_SUPERBLOCK", value: 8, isUnsigned: true)
!663 = !DIEnumerator(name: "BB_DISABLE_SCHEDULE", value: 16, isUnsigned: true)
!664 = !DIEnumerator(name: "BB_HOT_PARTITION", value: 32, isUnsigned: true)
!665 = !DIEnumerator(name: "BB_COLD_PARTITION", value: 64, isUnsigned: true)
!666 = !DIEnumerator(name: "BB_DUPLICATED", value: 128, isUnsigned: true)
!667 = !DIEnumerator(name: "BB_NON_LOCAL_GOTO_TARGET", value: 256, isUnsigned: true)
!668 = !DIEnumerator(name: "BB_RTL", value: 512, isUnsigned: true)
!669 = !DIEnumerator(name: "BB_FORWARDER_BLOCK", value: 1024, isUnsigned: true)
!670 = !DIEnumerator(name: "BB_NONTHREADABLE_BLOCK", value: 2048, isUnsigned: true)
!671 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "opt_code", file: !672, line: 723, baseType: !7, size: 32, elements: !673)
!672 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!673 = !{!674, !675, !676, !677, !678, !679, !680, !681, !682, !683, !684, !685, !686, !687, !688, !689, !690, !691, !692, !693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707, !708, !709, !710, !711, !712, !713, !714, !715, !716, !717, !718, !719, !720, !721, !722, !723, !724, !725, !726, !727, !728, !729, !730, !731, !732, !733, !734, !735, !736, !737, !738, !739, !740, !741, !742, !743, !744, !745, !746, !747, !748, !749, !750, !751, !752, !753, !754, !755, !756, !757, !758, !759, !760, !761, !762, !763, !764, !765, !766, !767, !768, !769, !770, !771, !772, !773, !774, !775, !776, !777, !778, !779, !780, !781, !782, !783, !784, !785, !786, !787, !788, !789, !790, !791, !792, !793, !794, !795, !796, !797, !798, !799, !800, !801, !802, !803, !804, !805, !806, !807, !808, !809, !810, !811, !812, !813, !814, !815, !816, !817, !818, !819, !820, !821, !822, !823, !824, !825, !826, !827, !828, !829, !830, !831, !832, !833, !834, !835, !836, !837, !838, !839, !840, !841, !842, !843, !844, !845, !846, !847, !848, !849, !850, !851, !852, !853, !854, !855, !856, !857, !858, !859, !860, !861, !862, !863, !864, !865, !866, !867, !868, !869, !870, !871, !872, !873, !874, !875, !876, !877, !878, !879, !880, !881, !882, !883, !884, !885, !886, !887, !888, !889, !890, !891, !892, !893, !894, !895, !896, !897, !898, !899, !900, !901, !902, !903, !904, !905, !906, !907, !908, !909, !910, !911, !912, !913, !914, !915, !916, !917, !918, !919, !920, !921, !922, !923, !924, !925, !926, !927, !928, !929, !930, !931, !932, !933, !934, !935, !936, !937, !938, !939, !940, !941, !942, !943, !944, !945, !946, !947, !948, !949, !950, !951, !952, !953, !954, !955, !956, !957, !958, !959, !960, !961, !962, !963, !964, !965, !966, !967, !968, !969, !970, !971, !972, !973, !974, !975, !976, !977, !978, !979, !980, !981, !982, !983, !984, !985, !986, !987, !988, !989, !990, !991, !992, !993, !994, !995, !996, !997, !998, !999, !1000, !1001, !1002, !1003, !1004, !1005, !1006, !1007, !1008, !1009, !1010, !1011, !1012, !1013, !1014, !1015, !1016, !1017, !1018, !1019, !1020, !1021, !1022, !1023, !1024, !1025, !1026, !1027, !1028, !1029, !1030, !1031, !1032, !1033, !1034, !1035, !1036, !1037, !1038, !1039, !1040, !1041, !1042, !1043, !1044, !1045, !1046, !1047, !1048, !1049, !1050, !1051, !1052, !1053, !1054, !1055, !1056, !1057, !1058, !1059, !1060, !1061, !1062, !1063, !1064, !1065, !1066, !1067, !1068, !1069, !1070, !1071, !1072, !1073, !1074, !1075, !1076, !1077, !1078, !1079, !1080, !1081, !1082, !1083, !1084, !1085, !1086, !1087, !1088, !1089, !1090, !1091, !1092, !1093, !1094, !1095, !1096, !1097, !1098, !1099, !1100, !1101, !1102, !1103, !1104, !1105, !1106, !1107, !1108, !1109, !1110, !1111, !1112, !1113, !1114, !1115, !1116, !1117, !1118, !1119, !1120, !1121, !1122, !1123, !1124, !1125, !1126, !1127, !1128, !1129, !1130, !1131, !1132, !1133, !1134, !1135, !1136, !1137, !1138, !1139, !1140, !1141, !1142, !1143, !1144, !1145, !1146, !1147, !1148, !1149, !1150, !1151, !1152, !1153, !1154, !1155, !1156, !1157, !1158, !1159, !1160, !1161, !1162, !1163, !1164, !1165, !1166, !1167, !1168, !1169, !1170, !1171, !1172, !1173, !1174, !1175, !1176, !1177, !1178, !1179, !1180, !1181, !1182, !1183, !1184, !1185, !1186, !1187, !1188, !1189, !1190, !1191, !1192, !1193, !1194, !1195, !1196, !1197, !1198, !1199, !1200, !1201, !1202, !1203, !1204, !1205, !1206, !1207, !1208, !1209, !1210, !1211, !1212, !1213, !1214, !1215, !1216, !1217, !1218, !1219, !1220, !1221, !1222, !1223, !1224, !1225, !1226, !1227, !1228, !1229, !1230, !1231, !1232, !1233, !1234, !1235, !1236, !1237, !1238, !1239, !1240, !1241, !1242, !1243, !1244, !1245, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258, !1259, !1260, !1261, !1262, !1263, !1264, !1265, !1266, !1267, !1268, !1269, !1270, !1271, !1272, !1273, !1274, !1275, !1276, !1277, !1278, !1279, !1280, !1281, !1282, !1283, !1284, !1285, !1286, !1287, !1288, !1289, !1290, !1291, !1292, !1293, !1294, !1295, !1296, !1297, !1298, !1299, !1300, !1301, !1302, !1303, !1304, !1305, !1306, !1307, !1308, !1309, !1310, !1311, !1312, !1313, !1314, !1315, !1316, !1317, !1318, !1319, !1320, !1321, !1322, !1323, !1324, !1325, !1326, !1327, !1328, !1329, !1330, !1331, !1332, !1333, !1334, !1335, !1336, !1337, !1338, !1339, !1340, !1341, !1342, !1343, !1344, !1345, !1346, !1347, !1348, !1349, !1350, !1351, !1352, !1353, !1354, !1355, !1356, !1357, !1358, !1359, !1360, !1361, !1362, !1363, !1364, !1365, !1366, !1367, !1368, !1369, !1370, !1371, !1372, !1373, !1374, !1375, !1376, !1377, !1378, !1379, !1380, !1381, !1382, !1383, !1384, !1385, !1386, !1387, !1388, !1389, !1390, !1391, !1392, !1393, !1394, !1395, !1396, !1397, !1398, !1399, !1400, !1401, !1402, !1403, !1404, !1405, !1406, !1407, !1408, !1409, !1410, !1411, !1412, !1413, !1414, !1415, !1416, !1417, !1418, !1419, !1420, !1421, !1422, !1423, !1424, !1425, !1426, !1427, !1428, !1429, !1430, !1431, !1432, !1433, !1434, !1435, !1436, !1437, !1438, !1439, !1440, !1441, !1442, !1443, !1444, !1445, !1446, !1447, !1448, !1449, !1450, !1451, !1452, !1453, !1454, !1455, !1456, !1457, !1458, !1459, !1460, !1461, !1462, !1463, !1464, !1465, !1466, !1467, !1468, !1469, !1470, !1471, !1472, !1473, !1474, !1475, !1476, !1477, !1478, !1479, !1480, !1481, !1482, !1483, !1484, !1485, !1486, !1487, !1488, !1489, !1490, !1491, !1492, !1493, !1494, !1495, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510, !1511, !1512, !1513, !1514, !1515, !1516, !1517, !1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540, !1541, !1542, !1543, !1544}
!674 = !DIEnumerator(name: "OPT__help", value: 0, isUnsigned: true)
!675 = !DIEnumerator(name: "OPT__help_", value: 1, isUnsigned: true)
!676 = !DIEnumerator(name: "OPT__output_pch_", value: 2, isUnsigned: true)
!677 = !DIEnumerator(name: "OPT__param", value: 3, isUnsigned: true)
!678 = !DIEnumerator(name: "OPT__target_help", value: 4, isUnsigned: true)
!679 = !DIEnumerator(name: "OPT__version", value: 5, isUnsigned: true)
!680 = !DIEnumerator(name: "OPT_A", value: 6, isUnsigned: true)
!681 = !DIEnumerator(name: "OPT_C", value: 7, isUnsigned: true)
!682 = !DIEnumerator(name: "OPT_CC", value: 8, isUnsigned: true)
!683 = !DIEnumerator(name: "OPT_D", value: 9, isUnsigned: true)
!684 = !DIEnumerator(name: "OPT_E", value: 10, isUnsigned: true)
!685 = !DIEnumerator(name: "OPT_F", value: 11, isUnsigned: true)
!686 = !DIEnumerator(name: "OPT_G", value: 12, isUnsigned: true)
!687 = !DIEnumerator(name: "OPT_H", value: 13, isUnsigned: true)
!688 = !DIEnumerator(name: "OPT_I", value: 14, isUnsigned: true)
!689 = !DIEnumerator(name: "OPT_J", value: 15, isUnsigned: true)
!690 = !DIEnumerator(name: "OPT_M", value: 16, isUnsigned: true)
!691 = !DIEnumerator(name: "OPT_MD", value: 17, isUnsigned: true)
!692 = !DIEnumerator(name: "OPT_MD_", value: 18, isUnsigned: true)
!693 = !DIEnumerator(name: "OPT_MF", value: 19, isUnsigned: true)
!694 = !DIEnumerator(name: "OPT_MG", value: 20, isUnsigned: true)
!695 = !DIEnumerator(name: "OPT_MM", value: 21, isUnsigned: true)
!696 = !DIEnumerator(name: "OPT_MMD", value: 22, isUnsigned: true)
!697 = !DIEnumerator(name: "OPT_MMD_", value: 23, isUnsigned: true)
!698 = !DIEnumerator(name: "OPT_MP", value: 24, isUnsigned: true)
!699 = !DIEnumerator(name: "OPT_MQ", value: 25, isUnsigned: true)
!700 = !DIEnumerator(name: "OPT_MT", value: 26, isUnsigned: true)
!701 = !DIEnumerator(name: "OPT_O", value: 27, isUnsigned: true)
!702 = !DIEnumerator(name: "OPT_Os", value: 28, isUnsigned: true)
!703 = !DIEnumerator(name: "OPT_P", value: 29, isUnsigned: true)
!704 = !DIEnumerator(name: "OPT_U", value: 30, isUnsigned: true)
!705 = !DIEnumerator(name: "OPT_W", value: 31, isUnsigned: true)
!706 = !DIEnumerator(name: "OPT_Wabi", value: 32, isUnsigned: true)
!707 = !DIEnumerator(name: "OPT_Waddress", value: 33, isUnsigned: true)
!708 = !DIEnumerator(name: "OPT_Waggregate_return", value: 34, isUnsigned: true)
!709 = !DIEnumerator(name: "OPT_Waliasing", value: 35, isUnsigned: true)
!710 = !DIEnumerator(name: "OPT_Walign_commons", value: 36, isUnsigned: true)
!711 = !DIEnumerator(name: "OPT_Wall", value: 37, isUnsigned: true)
!712 = !DIEnumerator(name: "OPT_Wall_deprecation", value: 38, isUnsigned: true)
!713 = !DIEnumerator(name: "OPT_Wall_javadoc", value: 39, isUnsigned: true)
!714 = !DIEnumerator(name: "OPT_Wampersand", value: 40, isUnsigned: true)
!715 = !DIEnumerator(name: "OPT_Warray_bounds", value: 41, isUnsigned: true)
!716 = !DIEnumerator(name: "OPT_Warray_temporaries", value: 42, isUnsigned: true)
!717 = !DIEnumerator(name: "OPT_Wassert_identifier", value: 43, isUnsigned: true)
!718 = !DIEnumerator(name: "OPT_Wassign_intercept", value: 44, isUnsigned: true)
!719 = !DIEnumerator(name: "OPT_Wattributes", value: 45, isUnsigned: true)
!720 = !DIEnumerator(name: "OPT_Wbad_function_cast", value: 46, isUnsigned: true)
!721 = !DIEnumerator(name: "OPT_Wboxing", value: 47, isUnsigned: true)
!722 = !DIEnumerator(name: "OPT_Wbuiltin_macro_redefined", value: 48, isUnsigned: true)
!723 = !DIEnumerator(name: "OPT_Wc___compat", value: 49, isUnsigned: true)
!724 = !DIEnumerator(name: "OPT_Wc__0x_compat", value: 50, isUnsigned: true)
!725 = !DIEnumerator(name: "OPT_Wcast_align", value: 51, isUnsigned: true)
!726 = !DIEnumerator(name: "OPT_Wcast_qual", value: 52, isUnsigned: true)
!727 = !DIEnumerator(name: "OPT_Wchar_concat", value: 53, isUnsigned: true)
!728 = !DIEnumerator(name: "OPT_Wchar_subscripts", value: 54, isUnsigned: true)
!729 = !DIEnumerator(name: "OPT_Wcharacter_truncation", value: 55, isUnsigned: true)
!730 = !DIEnumerator(name: "OPT_Wclobbered", value: 56, isUnsigned: true)
!731 = !DIEnumerator(name: "OPT_Wcomment", value: 57, isUnsigned: true)
!732 = !DIEnumerator(name: "OPT_Wcomments", value: 58, isUnsigned: true)
!733 = !DIEnumerator(name: "OPT_Wcondition_assign", value: 59, isUnsigned: true)
!734 = !DIEnumerator(name: "OPT_Wconstructor_name", value: 60, isUnsigned: true)
!735 = !DIEnumerator(name: "OPT_Wconversion", value: 61, isUnsigned: true)
!736 = !DIEnumerator(name: "OPT_Wconversion_null", value: 62, isUnsigned: true)
!737 = !DIEnumerator(name: "OPT_Wcoverage_mismatch", value: 63, isUnsigned: true)
!738 = !DIEnumerator(name: "OPT_Wctor_dtor_privacy", value: 64, isUnsigned: true)
!739 = !DIEnumerator(name: "OPT_Wdeclaration_after_statement", value: 65, isUnsigned: true)
!740 = !DIEnumerator(name: "OPT_Wdep_ann", value: 66, isUnsigned: true)
!741 = !DIEnumerator(name: "OPT_Wdeprecated", value: 67, isUnsigned: true)
!742 = !DIEnumerator(name: "OPT_Wdeprecated_declarations", value: 68, isUnsigned: true)
!743 = !DIEnumerator(name: "OPT_Wdisabled_optimization", value: 69, isUnsigned: true)
!744 = !DIEnumerator(name: "OPT_Wdiscouraged", value: 70, isUnsigned: true)
!745 = !DIEnumerator(name: "OPT_Wdiv_by_zero", value: 71, isUnsigned: true)
!746 = !DIEnumerator(name: "OPT_Weffc__", value: 72, isUnsigned: true)
!747 = !DIEnumerator(name: "OPT_Wempty_block", value: 73, isUnsigned: true)
!748 = !DIEnumerator(name: "OPT_Wempty_body", value: 74, isUnsigned: true)
!749 = !DIEnumerator(name: "OPT_Wendif_labels", value: 75, isUnsigned: true)
!750 = !DIEnumerator(name: "OPT_Wenum_compare", value: 76, isUnsigned: true)
!751 = !DIEnumerator(name: "OPT_Wenum_identifier", value: 77, isUnsigned: true)
!752 = !DIEnumerator(name: "OPT_Wenum_switch", value: 78, isUnsigned: true)
!753 = !DIEnumerator(name: "OPT_Werror", value: 79, isUnsigned: true)
!754 = !DIEnumerator(name: "OPT_Werror_implicit_function_declaration", value: 80, isUnsigned: true)
!755 = !DIEnumerator(name: "OPT_Werror_", value: 81, isUnsigned: true)
!756 = !DIEnumerator(name: "OPT_Wextra", value: 82, isUnsigned: true)
!757 = !DIEnumerator(name: "OPT_Wextraneous_semicolon", value: 83, isUnsigned: true)
!758 = !DIEnumerator(name: "OPT_Wfallthrough", value: 84, isUnsigned: true)
!759 = !DIEnumerator(name: "OPT_Wfatal_errors", value: 85, isUnsigned: true)
!760 = !DIEnumerator(name: "OPT_Wfield_hiding", value: 86, isUnsigned: true)
!761 = !DIEnumerator(name: "OPT_Wfinal_bound", value: 87, isUnsigned: true)
!762 = !DIEnumerator(name: "OPT_Wfinally", value: 88, isUnsigned: true)
!763 = !DIEnumerator(name: "OPT_Wfloat_equal", value: 89, isUnsigned: true)
!764 = !DIEnumerator(name: "OPT_Wforbidden", value: 90, isUnsigned: true)
!765 = !DIEnumerator(name: "OPT_Wformat", value: 91, isUnsigned: true)
!766 = !DIEnumerator(name: "OPT_Wformat_contains_nul", value: 92, isUnsigned: true)
!767 = !DIEnumerator(name: "OPT_Wformat_extra_args", value: 93, isUnsigned: true)
!768 = !DIEnumerator(name: "OPT_Wformat_nonliteral", value: 94, isUnsigned: true)
!769 = !DIEnumerator(name: "OPT_Wformat_security", value: 95, isUnsigned: true)
!770 = !DIEnumerator(name: "OPT_Wformat_y2k", value: 96, isUnsigned: true)
!771 = !DIEnumerator(name: "OPT_Wformat_zero_length", value: 97, isUnsigned: true)
!772 = !DIEnumerator(name: "OPT_Wformat_", value: 98, isUnsigned: true)
!773 = !DIEnumerator(name: "OPT_Wframe_larger_than_", value: 99, isUnsigned: true)
!774 = !DIEnumerator(name: "OPT_Whiding", value: 100, isUnsigned: true)
!775 = !DIEnumerator(name: "OPT_Wignored_qualifiers", value: 101, isUnsigned: true)
!776 = !DIEnumerator(name: "OPT_Wimplicit", value: 102, isUnsigned: true)
!777 = !DIEnumerator(name: "OPT_Wimplicit_function_declaration", value: 103, isUnsigned: true)
!778 = !DIEnumerator(name: "OPT_Wimplicit_int", value: 104, isUnsigned: true)
!779 = !DIEnumerator(name: "OPT_Wimplicit_interface", value: 105, isUnsigned: true)
!780 = !DIEnumerator(name: "OPT_Wimplicit_procedure", value: 106, isUnsigned: true)
!781 = !DIEnumerator(name: "OPT_Wimport", value: 107, isUnsigned: true)
!782 = !DIEnumerator(name: "OPT_Windirect_static", value: 108, isUnsigned: true)
!783 = !DIEnumerator(name: "OPT_Winit_self", value: 109, isUnsigned: true)
!784 = !DIEnumerator(name: "OPT_Winline", value: 110, isUnsigned: true)
!785 = !DIEnumerator(name: "OPT_Wint_to_pointer_cast", value: 111, isUnsigned: true)
!786 = !DIEnumerator(name: "OPT_Wintf_annotation", value: 112, isUnsigned: true)
!787 = !DIEnumerator(name: "OPT_Wintf_non_inherited", value: 113, isUnsigned: true)
!788 = !DIEnumerator(name: "OPT_Wintrinsic_shadow", value: 114, isUnsigned: true)
!789 = !DIEnumerator(name: "OPT_Wintrinsics_std", value: 115, isUnsigned: true)
!790 = !DIEnumerator(name: "OPT_Winvalid_offsetof", value: 116, isUnsigned: true)
!791 = !DIEnumerator(name: "OPT_Winvalid_pch", value: 117, isUnsigned: true)
!792 = !DIEnumerator(name: "OPT_Wjavadoc", value: 118, isUnsigned: true)
!793 = !DIEnumerator(name: "OPT_Wjump_misses_init", value: 119, isUnsigned: true)
!794 = !DIEnumerator(name: "OPT_Wlarger_than_", value: 120, isUnsigned: true)
!795 = !DIEnumerator(name: "OPT_Wlarger_than_eq", value: 121, isUnsigned: true)
!796 = !DIEnumerator(name: "OPT_Wline_truncation", value: 122, isUnsigned: true)
!797 = !DIEnumerator(name: "OPT_Wlocal_hiding", value: 123, isUnsigned: true)
!798 = !DIEnumerator(name: "OPT_Wlogical_op", value: 124, isUnsigned: true)
!799 = !DIEnumerator(name: "OPT_Wlong_long", value: 125, isUnsigned: true)
!800 = !DIEnumerator(name: "OPT_Wmain", value: 126, isUnsigned: true)
!801 = !DIEnumerator(name: "OPT_Wmasked_catch_block", value: 127, isUnsigned: true)
!802 = !DIEnumerator(name: "OPT_Wmissing_braces", value: 128, isUnsigned: true)
!803 = !DIEnumerator(name: "OPT_Wmissing_declarations", value: 129, isUnsigned: true)
!804 = !DIEnumerator(name: "OPT_Wmissing_field_initializers", value: 130, isUnsigned: true)
!805 = !DIEnumerator(name: "OPT_Wmissing_format_attribute", value: 131, isUnsigned: true)
!806 = !DIEnumerator(name: "OPT_Wmissing_include_dirs", value: 132, isUnsigned: true)
!807 = !DIEnumerator(name: "OPT_Wmissing_noreturn", value: 133, isUnsigned: true)
!808 = !DIEnumerator(name: "OPT_Wmissing_parameter_type", value: 134, isUnsigned: true)
!809 = !DIEnumerator(name: "OPT_Wmissing_prototypes", value: 135, isUnsigned: true)
!810 = !DIEnumerator(name: "OPT_Wmudflap", value: 136, isUnsigned: true)
!811 = !DIEnumerator(name: "OPT_Wmultichar", value: 137, isUnsigned: true)
!812 = !DIEnumerator(name: "OPT_Wnested_externs", value: 138, isUnsigned: true)
!813 = !DIEnumerator(name: "OPT_Wnls", value: 139, isUnsigned: true)
!814 = !DIEnumerator(name: "OPT_Wno_effect_assign", value: 140, isUnsigned: true)
!815 = !DIEnumerator(name: "OPT_Wnon_template_friend", value: 141, isUnsigned: true)
!816 = !DIEnumerator(name: "OPT_Wnon_virtual_dtor", value: 142, isUnsigned: true)
!817 = !DIEnumerator(name: "OPT_Wnonnull", value: 143, isUnsigned: true)
!818 = !DIEnumerator(name: "OPT_Wnormalized_", value: 144, isUnsigned: true)
!819 = !DIEnumerator(name: "OPT_Wnull", value: 145, isUnsigned: true)
!820 = !DIEnumerator(name: "OPT_Wold_style_cast", value: 146, isUnsigned: true)
!821 = !DIEnumerator(name: "OPT_Wold_style_declaration", value: 147, isUnsigned: true)
!822 = !DIEnumerator(name: "OPT_Wold_style_definition", value: 148, isUnsigned: true)
!823 = !DIEnumerator(name: "OPT_Wout_of_date", value: 149, isUnsigned: true)
!824 = !DIEnumerator(name: "OPT_Wover_ann", value: 150, isUnsigned: true)
!825 = !DIEnumerator(name: "OPT_Woverflow", value: 151, isUnsigned: true)
!826 = !DIEnumerator(name: "OPT_Woverlength_strings", value: 152, isUnsigned: true)
!827 = !DIEnumerator(name: "OPT_Woverloaded_virtual", value: 153, isUnsigned: true)
!828 = !DIEnumerator(name: "OPT_Woverride_init", value: 154, isUnsigned: true)
!829 = !DIEnumerator(name: "OPT_Wpacked", value: 155, isUnsigned: true)
!830 = !DIEnumerator(name: "OPT_Wpacked_bitfield_compat", value: 156, isUnsigned: true)
!831 = !DIEnumerator(name: "OPT_Wpadded", value: 157, isUnsigned: true)
!832 = !DIEnumerator(name: "OPT_Wparam_assign", value: 158, isUnsigned: true)
!833 = !DIEnumerator(name: "OPT_Wparentheses", value: 159, isUnsigned: true)
!834 = !DIEnumerator(name: "OPT_Wpkg_default_method", value: 160, isUnsigned: true)
!835 = !DIEnumerator(name: "OPT_Wpmf_conversions", value: 161, isUnsigned: true)
!836 = !DIEnumerator(name: "OPT_Wpointer_arith", value: 162, isUnsigned: true)
!837 = !DIEnumerator(name: "OPT_Wpointer_sign", value: 163, isUnsigned: true)
!838 = !DIEnumerator(name: "OPT_Wpointer_to_int_cast", value: 164, isUnsigned: true)
!839 = !DIEnumerator(name: "OPT_Wpragmas", value: 165, isUnsigned: true)
!840 = !DIEnumerator(name: "OPT_Wprotocol", value: 166, isUnsigned: true)
!841 = !DIEnumerator(name: "OPT_Wpsabi", value: 167, isUnsigned: true)
!842 = !DIEnumerator(name: "OPT_Wraw", value: 168, isUnsigned: true)
!843 = !DIEnumerator(name: "OPT_Wredundant_decls", value: 169, isUnsigned: true)
!844 = !DIEnumerator(name: "OPT_Wredundant_modifiers", value: 170, isUnsigned: true)
!845 = !DIEnumerator(name: "OPT_Wreorder", value: 171, isUnsigned: true)
!846 = !DIEnumerator(name: "OPT_Wreturn_type", value: 172, isUnsigned: true)
!847 = !DIEnumerator(name: "OPT_Wselector", value: 173, isUnsigned: true)
!848 = !DIEnumerator(name: "OPT_Wsequence_point", value: 174, isUnsigned: true)
!849 = !DIEnumerator(name: "OPT_Wserial", value: 175, isUnsigned: true)
!850 = !DIEnumerator(name: "OPT_Wshadow", value: 176, isUnsigned: true)
!851 = !DIEnumerator(name: "OPT_Wsign_compare", value: 177, isUnsigned: true)
!852 = !DIEnumerator(name: "OPT_Wsign_conversion", value: 178, isUnsigned: true)
!853 = !DIEnumerator(name: "OPT_Wsign_promo", value: 179, isUnsigned: true)
!854 = !DIEnumerator(name: "OPT_Wspecial_param_hiding", value: 180, isUnsigned: true)
!855 = !DIEnumerator(name: "OPT_Wstack_protector", value: 181, isUnsigned: true)
!856 = !DIEnumerator(name: "OPT_Wstatic_access", value: 182, isUnsigned: true)
!857 = !DIEnumerator(name: "OPT_Wstatic_receiver", value: 183, isUnsigned: true)
!858 = !DIEnumerator(name: "OPT_Wstrict_aliasing", value: 184, isUnsigned: true)
!859 = !DIEnumerator(name: "OPT_Wstrict_aliasing_", value: 185, isUnsigned: true)
!860 = !DIEnumerator(name: "OPT_Wstrict_null_sentinel", value: 186, isUnsigned: true)
!861 = !DIEnumerator(name: "OPT_Wstrict_overflow", value: 187, isUnsigned: true)
!862 = !DIEnumerator(name: "OPT_Wstrict_overflow_", value: 188, isUnsigned: true)
!863 = !DIEnumerator(name: "OPT_Wstrict_prototypes", value: 189, isUnsigned: true)
!864 = !DIEnumerator(name: "OPT_Wstrict_selector_match", value: 190, isUnsigned: true)
!865 = !DIEnumerator(name: "OPT_Wsuppress", value: 191, isUnsigned: true)
!866 = !DIEnumerator(name: "OPT_Wsurprising", value: 192, isUnsigned: true)
!867 = !DIEnumerator(name: "OPT_Wswitch", value: 193, isUnsigned: true)
!868 = !DIEnumerator(name: "OPT_Wswitch_default", value: 194, isUnsigned: true)
!869 = !DIEnumerator(name: "OPT_Wswitch_enum", value: 195, isUnsigned: true)
!870 = !DIEnumerator(name: "OPT_Wsync_nand", value: 196, isUnsigned: true)
!871 = !DIEnumerator(name: "OPT_Wsynth", value: 197, isUnsigned: true)
!872 = !DIEnumerator(name: "OPT_Wsynthetic_access", value: 198, isUnsigned: true)
!873 = !DIEnumerator(name: "OPT_Wsystem_headers", value: 199, isUnsigned: true)
!874 = !DIEnumerator(name: "OPT_Wtabs", value: 200, isUnsigned: true)
!875 = !DIEnumerator(name: "OPT_Wtasks", value: 201, isUnsigned: true)
!876 = !DIEnumerator(name: "OPT_Wtraditional", value: 202, isUnsigned: true)
!877 = !DIEnumerator(name: "OPT_Wtraditional_conversion", value: 203, isUnsigned: true)
!878 = !DIEnumerator(name: "OPT_Wtrigraphs", value: 204, isUnsigned: true)
!879 = !DIEnumerator(name: "OPT_Wtype_hiding", value: 205, isUnsigned: true)
!880 = !DIEnumerator(name: "OPT_Wtype_limits", value: 206, isUnsigned: true)
!881 = !DIEnumerator(name: "OPT_Wuncheck", value: 207, isUnsigned: true)
!882 = !DIEnumerator(name: "OPT_Wundeclared_selector", value: 208, isUnsigned: true)
!883 = !DIEnumerator(name: "OPT_Wundef", value: 209, isUnsigned: true)
!884 = !DIEnumerator(name: "OPT_Wunderflow", value: 210, isUnsigned: true)
!885 = !DIEnumerator(name: "OPT_Wuninitialized", value: 211, isUnsigned: true)
!886 = !DIEnumerator(name: "OPT_Wunknown_pragmas", value: 212, isUnsigned: true)
!887 = !DIEnumerator(name: "OPT_Wunnecessary_else", value: 213, isUnsigned: true)
!888 = !DIEnumerator(name: "OPT_Wunqualified_field", value: 214, isUnsigned: true)
!889 = !DIEnumerator(name: "OPT_Wunreachable_code", value: 215, isUnsigned: true)
!890 = !DIEnumerator(name: "OPT_Wunsafe_loop_optimizations", value: 216, isUnsigned: true)
!891 = !DIEnumerator(name: "OPT_Wunsuffixed_float_constants", value: 217, isUnsigned: true)
!892 = !DIEnumerator(name: "OPT_Wunused", value: 218, isUnsigned: true)
!893 = !DIEnumerator(name: "OPT_Wunused_argument", value: 219, isUnsigned: true)
!894 = !DIEnumerator(name: "OPT_Wunused_function", value: 220, isUnsigned: true)
!895 = !DIEnumerator(name: "OPT_Wunused_import", value: 221, isUnsigned: true)
!896 = !DIEnumerator(name: "OPT_Wunused_label", value: 222, isUnsigned: true)
!897 = !DIEnumerator(name: "OPT_Wunused_local", value: 223, isUnsigned: true)
!898 = !DIEnumerator(name: "OPT_Wunused_macros", value: 224, isUnsigned: true)
!899 = !DIEnumerator(name: "OPT_Wunused_parameter", value: 225, isUnsigned: true)
!900 = !DIEnumerator(name: "OPT_Wunused_private", value: 226, isUnsigned: true)
!901 = !DIEnumerator(name: "OPT_Wunused_result", value: 227, isUnsigned: true)
!902 = !DIEnumerator(name: "OPT_Wunused_thrown", value: 228, isUnsigned: true)
!903 = !DIEnumerator(name: "OPT_Wunused_value", value: 229, isUnsigned: true)
!904 = !DIEnumerator(name: "OPT_Wunused_variable", value: 230, isUnsigned: true)
!905 = !DIEnumerator(name: "OPT_Wuseless_type_check", value: 231, isUnsigned: true)
!906 = !DIEnumerator(name: "OPT_Wvarargs_cast", value: 232, isUnsigned: true)
!907 = !DIEnumerator(name: "OPT_Wvariadic_macros", value: 233, isUnsigned: true)
!908 = !DIEnumerator(name: "OPT_Wvla", value: 234, isUnsigned: true)
!909 = !DIEnumerator(name: "OPT_Wvolatile_register_var", value: 235, isUnsigned: true)
!910 = !DIEnumerator(name: "OPT_Wwarning_token", value: 236, isUnsigned: true)
!911 = !DIEnumerator(name: "OPT_Wwrite_strings", value: 237, isUnsigned: true)
!912 = !DIEnumerator(name: "OPT_ansi", value: 238, isUnsigned: true)
!913 = !DIEnumerator(name: "OPT_aux_info", value: 239, isUnsigned: true)
!914 = !DIEnumerator(name: "OPT_aux_info_", value: 240, isUnsigned: true)
!915 = !DIEnumerator(name: "OPT_auxbase", value: 241, isUnsigned: true)
!916 = !DIEnumerator(name: "OPT_auxbase_strip", value: 242, isUnsigned: true)
!917 = !DIEnumerator(name: "OPT_cpp", value: 243, isUnsigned: true)
!918 = !DIEnumerator(name: "OPT_d", value: 244, isUnsigned: true)
!919 = !DIEnumerator(name: "OPT_dumpbase", value: 245, isUnsigned: true)
!920 = !DIEnumerator(name: "OPT_dumpdir", value: 246, isUnsigned: true)
!921 = !DIEnumerator(name: "OPT_fCLASSPATH_", value: 247, isUnsigned: true)
!922 = !DIEnumerator(name: "OPT_fPIC", value: 248, isUnsigned: true)
!923 = !DIEnumerator(name: "OPT_fPIE", value: 249, isUnsigned: true)
!924 = !DIEnumerator(name: "OPT_fRTS_", value: 250, isUnsigned: true)
!925 = !DIEnumerator(name: "OPT_fabi_version_", value: 251, isUnsigned: true)
!926 = !DIEnumerator(name: "OPT_faccess_control", value: 252, isUnsigned: true)
!927 = !DIEnumerator(name: "OPT_falign_commons", value: 253, isUnsigned: true)
!928 = !DIEnumerator(name: "OPT_falign_functions", value: 254, isUnsigned: true)
!929 = !DIEnumerator(name: "OPT_falign_functions_", value: 255, isUnsigned: true)
!930 = !DIEnumerator(name: "OPT_falign_jumps", value: 256, isUnsigned: true)
!931 = !DIEnumerator(name: "OPT_falign_jumps_", value: 257, isUnsigned: true)
!932 = !DIEnumerator(name: "OPT_falign_labels", value: 258, isUnsigned: true)
!933 = !DIEnumerator(name: "OPT_falign_labels_", value: 259, isUnsigned: true)
!934 = !DIEnumerator(name: "OPT_falign_loops", value: 260, isUnsigned: true)
!935 = !DIEnumerator(name: "OPT_falign_loops_", value: 261, isUnsigned: true)
!936 = !DIEnumerator(name: "OPT_fall_intrinsics", value: 262, isUnsigned: true)
!937 = !DIEnumerator(name: "OPT_fall_virtual", value: 263, isUnsigned: true)
!938 = !DIEnumerator(name: "OPT_fallow_leading_underscore", value: 264, isUnsigned: true)
!939 = !DIEnumerator(name: "OPT_falt_external_templates", value: 265, isUnsigned: true)
!940 = !DIEnumerator(name: "OPT_fargument_alias", value: 266, isUnsigned: true)
!941 = !DIEnumerator(name: "OPT_fargument_noalias", value: 267, isUnsigned: true)
!942 = !DIEnumerator(name: "OPT_fargument_noalias_anything", value: 268, isUnsigned: true)
!943 = !DIEnumerator(name: "OPT_fargument_noalias_global", value: 269, isUnsigned: true)
!944 = !DIEnumerator(name: "OPT_fasm", value: 270, isUnsigned: true)
!945 = !DIEnumerator(name: "OPT_fassert", value: 271, isUnsigned: true)
!946 = !DIEnumerator(name: "OPT_fassociative_math", value: 272, isUnsigned: true)
!947 = !DIEnumerator(name: "OPT_fassume_compiled", value: 273, isUnsigned: true)
!948 = !DIEnumerator(name: "OPT_fassume_compiled_", value: 274, isUnsigned: true)
!949 = !DIEnumerator(name: "OPT_fasynchronous_unwind_tables", value: 275, isUnsigned: true)
!950 = !DIEnumerator(name: "OPT_fauto_inc_dec", value: 276, isUnsigned: true)
!951 = !DIEnumerator(name: "OPT_fautomatic", value: 277, isUnsigned: true)
!952 = !DIEnumerator(name: "OPT_faux_classpath", value: 278, isUnsigned: true)
!953 = !DIEnumerator(name: "OPT_fbackslash", value: 279, isUnsigned: true)
!954 = !DIEnumerator(name: "OPT_fbacktrace", value: 280, isUnsigned: true)
!955 = !DIEnumerator(name: "OPT_fblas_matmul_limit_", value: 281, isUnsigned: true)
!956 = !DIEnumerator(name: "OPT_fbootclasspath_", value: 282, isUnsigned: true)
!957 = !DIEnumerator(name: "OPT_fbootstrap_classes", value: 283, isUnsigned: true)
!958 = !DIEnumerator(name: "OPT_fbounds_check", value: 284, isUnsigned: true)
!959 = !DIEnumerator(name: "OPT_fbranch_count_reg", value: 285, isUnsigned: true)
!960 = !DIEnumerator(name: "OPT_fbranch_probabilities", value: 286, isUnsigned: true)
!961 = !DIEnumerator(name: "OPT_fbranch_target_load_optimize", value: 287, isUnsigned: true)
!962 = !DIEnumerator(name: "OPT_fbranch_target_load_optimize2", value: 288, isUnsigned: true)
!963 = !DIEnumerator(name: "OPT_fbtr_bb_exclusive", value: 289, isUnsigned: true)
!964 = !DIEnumerator(name: "OPT_fbuiltin", value: 290, isUnsigned: true)
!965 = !DIEnumerator(name: "OPT_fbuiltin_", value: 291, isUnsigned: true)
!966 = !DIEnumerator(name: "OPT_fcall_saved_", value: 292, isUnsigned: true)
!967 = !DIEnumerator(name: "OPT_fcall_used_", value: 293, isUnsigned: true)
!968 = !DIEnumerator(name: "OPT_fcaller_saves", value: 294, isUnsigned: true)
!969 = !DIEnumerator(name: "OPT_fcheck_array_temporaries", value: 295, isUnsigned: true)
!970 = !DIEnumerator(name: "OPT_fcheck_data_deps", value: 296, isUnsigned: true)
!971 = !DIEnumerator(name: "OPT_fcheck_new", value: 297, isUnsigned: true)
!972 = !DIEnumerator(name: "OPT_fcheck_references", value: 298, isUnsigned: true)
!973 = !DIEnumerator(name: "OPT_fcheck_", value: 299, isUnsigned: true)
!974 = !DIEnumerator(name: "OPT_fclasspath_", value: 300, isUnsigned: true)
!975 = !DIEnumerator(name: "OPT_fcommon", value: 301, isUnsigned: true)
!976 = !DIEnumerator(name: "OPT_fcompare_debug_second", value: 302, isUnsigned: true)
!977 = !DIEnumerator(name: "OPT_fcompare_debug_", value: 303, isUnsigned: true)
!978 = !DIEnumerator(name: "OPT_fcompile_resource_", value: 304, isUnsigned: true)
!979 = !DIEnumerator(name: "OPT_fcond_mismatch", value: 305, isUnsigned: true)
!980 = !DIEnumerator(name: "OPT_fconserve_space", value: 306, isUnsigned: true)
!981 = !DIEnumerator(name: "OPT_fconserve_stack", value: 307, isUnsigned: true)
!982 = !DIEnumerator(name: "OPT_fconstant_string_class_", value: 308, isUnsigned: true)
!983 = !DIEnumerator(name: "OPT_fconvert_big_endian", value: 309, isUnsigned: true)
!984 = !DIEnumerator(name: "OPT_fconvert_little_endian", value: 310, isUnsigned: true)
!985 = !DIEnumerator(name: "OPT_fconvert_native", value: 311, isUnsigned: true)
!986 = !DIEnumerator(name: "OPT_fconvert_swap", value: 312, isUnsigned: true)
!987 = !DIEnumerator(name: "OPT_fcprop_registers", value: 313, isUnsigned: true)
!988 = !DIEnumerator(name: "OPT_fcray_pointer", value: 314, isUnsigned: true)
!989 = !DIEnumerator(name: "OPT_fcrossjumping", value: 315, isUnsigned: true)
!990 = !DIEnumerator(name: "OPT_fcse_follow_jumps", value: 316, isUnsigned: true)
!991 = !DIEnumerator(name: "OPT_fcse_skip_blocks", value: 317, isUnsigned: true)
!992 = !DIEnumerator(name: "OPT_fcx_fortran_rules", value: 318, isUnsigned: true)
!993 = !DIEnumerator(name: "OPT_fcx_limited_range", value: 319, isUnsigned: true)
!994 = !DIEnumerator(name: "OPT_fd_lines_as_code", value: 320, isUnsigned: true)
!995 = !DIEnumerator(name: "OPT_fd_lines_as_comments", value: 321, isUnsigned: true)
!996 = !DIEnumerator(name: "OPT_fdata_sections", value: 322, isUnsigned: true)
!997 = !DIEnumerator(name: "OPT_fdbg_cnt_list", value: 323, isUnsigned: true)
!998 = !DIEnumerator(name: "OPT_fdbg_cnt_", value: 324, isUnsigned: true)
!999 = !DIEnumerator(name: "OPT_fdce", value: 325, isUnsigned: true)
!1000 = !DIEnumerator(name: "OPT_fdebug_prefix_map_", value: 326, isUnsigned: true)
!1001 = !DIEnumerator(name: "OPT_fdeduce_init_list", value: 327, isUnsigned: true)
!1002 = !DIEnumerator(name: "OPT_fdefault_double_8", value: 328, isUnsigned: true)
!1003 = !DIEnumerator(name: "OPT_fdefault_inline", value: 329, isUnsigned: true)
!1004 = !DIEnumerator(name: "OPT_fdefault_integer_8", value: 330, isUnsigned: true)
!1005 = !DIEnumerator(name: "OPT_fdefault_real_8", value: 331, isUnsigned: true)
!1006 = !DIEnumerator(name: "OPT_fdefer_pop", value: 332, isUnsigned: true)
!1007 = !DIEnumerator(name: "OPT_fdelayed_branch", value: 333, isUnsigned: true)
!1008 = !DIEnumerator(name: "OPT_fdelete_null_pointer_checks", value: 334, isUnsigned: true)
!1009 = !DIEnumerator(name: "OPT_fdiagnostics_show_location_", value: 335, isUnsigned: true)
!1010 = !DIEnumerator(name: "OPT_fdiagnostics_show_option", value: 336, isUnsigned: true)
!1011 = !DIEnumerator(name: "OPT_fdirectives_only", value: 337, isUnsigned: true)
!1012 = !DIEnumerator(name: "OPT_fdisable_assertions", value: 338, isUnsigned: true)
!1013 = !DIEnumerator(name: "OPT_fdisable_assertions_", value: 339, isUnsigned: true)
!1014 = !DIEnumerator(name: "OPT_fdollar_ok", value: 340, isUnsigned: true)
!1015 = !DIEnumerator(name: "OPT_fdollars_in_identifiers", value: 341, isUnsigned: true)
!1016 = !DIEnumerator(name: "OPT_fdse", value: 342, isUnsigned: true)
!1017 = !DIEnumerator(name: "OPT_fdump_", value: 343, isUnsigned: true)
!1018 = !DIEnumerator(name: "OPT_fdump_core", value: 344, isUnsigned: true)
!1019 = !DIEnumerator(name: "OPT_fdump_final_insns_", value: 345, isUnsigned: true)
!1020 = !DIEnumerator(name: "OPT_fdump_noaddr", value: 346, isUnsigned: true)
!1021 = !DIEnumerator(name: "OPT_fdump_parse_tree", value: 347, isUnsigned: true)
!1022 = !DIEnumerator(name: "OPT_fdump_unnumbered", value: 348, isUnsigned: true)
!1023 = !DIEnumerator(name: "OPT_fdump_unnumbered_links", value: 349, isUnsigned: true)
!1024 = !DIEnumerator(name: "OPT_fdwarf2_cfi_asm", value: 350, isUnsigned: true)
!1025 = !DIEnumerator(name: "OPT_fearly_inlining", value: 351, isUnsigned: true)
!1026 = !DIEnumerator(name: "OPT_felide_constructors", value: 352, isUnsigned: true)
!1027 = !DIEnumerator(name: "OPT_feliminate_dwarf2_dups", value: 353, isUnsigned: true)
!1028 = !DIEnumerator(name: "OPT_feliminate_unused_debug_symbols", value: 354, isUnsigned: true)
!1029 = !DIEnumerator(name: "OPT_feliminate_unused_debug_types", value: 355, isUnsigned: true)
!1030 = !DIEnumerator(name: "OPT_femit_class_debug_always", value: 356, isUnsigned: true)
!1031 = !DIEnumerator(name: "OPT_femit_class_file", value: 357, isUnsigned: true)
!1032 = !DIEnumerator(name: "OPT_femit_class_files", value: 358, isUnsigned: true)
!1033 = !DIEnumerator(name: "OPT_femit_struct_debug_baseonly", value: 359, isUnsigned: true)
!1034 = !DIEnumerator(name: "OPT_femit_struct_debug_detailed_", value: 360, isUnsigned: true)
!1035 = !DIEnumerator(name: "OPT_femit_struct_debug_reduced", value: 361, isUnsigned: true)
!1036 = !DIEnumerator(name: "OPT_fenable_assertions", value: 362, isUnsigned: true)
!1037 = !DIEnumerator(name: "OPT_fenable_assertions_", value: 363, isUnsigned: true)
!1038 = !DIEnumerator(name: "OPT_fenable_icf_debug", value: 364, isUnsigned: true)
!1039 = !DIEnumerator(name: "OPT_fencoding_", value: 365, isUnsigned: true)
!1040 = !DIEnumerator(name: "OPT_fenforce_eh_specs", value: 366, isUnsigned: true)
!1041 = !DIEnumerator(name: "OPT_fenum_int_equiv", value: 367, isUnsigned: true)
!1042 = !DIEnumerator(name: "OPT_fexceptions", value: 368, isUnsigned: true)
!1043 = !DIEnumerator(name: "OPT_fexcess_precision_", value: 369, isUnsigned: true)
!1044 = !DIEnumerator(name: "OPT_fexec_charset_", value: 370, isUnsigned: true)
!1045 = !DIEnumerator(name: "OPT_fexpensive_optimizations", value: 371, isUnsigned: true)
!1046 = !DIEnumerator(name: "OPT_fextdirs_", value: 372, isUnsigned: true)
!1047 = !DIEnumerator(name: "OPT_fextended_identifiers", value: 373, isUnsigned: true)
!1048 = !DIEnumerator(name: "OPT_fexternal_blas", value: 374, isUnsigned: true)
!1049 = !DIEnumerator(name: "OPT_fexternal_templates", value: 375, isUnsigned: true)
!1050 = !DIEnumerator(name: "OPT_ff2c", value: 376, isUnsigned: true)
!1051 = !DIEnumerator(name: "OPT_ffast_math", value: 377, isUnsigned: true)
!1052 = !DIEnumerator(name: "OPT_ffilelist_file", value: 378, isUnsigned: true)
!1053 = !DIEnumerator(name: "OPT_ffinite_math_only", value: 379, isUnsigned: true)
!1054 = !DIEnumerator(name: "OPT_ffixed_", value: 380, isUnsigned: true)
!1055 = !DIEnumerator(name: "OPT_ffixed_form", value: 381, isUnsigned: true)
!1056 = !DIEnumerator(name: "OPT_ffixed_line_length_", value: 382, isUnsigned: true)
!1057 = !DIEnumerator(name: "OPT_ffixed_line_length_none", value: 383, isUnsigned: true)
!1058 = !DIEnumerator(name: "OPT_ffloat_store", value: 384, isUnsigned: true)
!1059 = !DIEnumerator(name: "OPT_ffor_scope", value: 385, isUnsigned: true)
!1060 = !DIEnumerator(name: "OPT_fforce_addr", value: 386, isUnsigned: true)
!1061 = !DIEnumerator(name: "OPT_fforce_classes_archive_check", value: 387, isUnsigned: true)
!1062 = !DIEnumerator(name: "OPT_fforward_propagate", value: 388, isUnsigned: true)
!1063 = !DIEnumerator(name: "OPT_ffpe_trap_", value: 389, isUnsigned: true)
!1064 = !DIEnumerator(name: "OPT_ffree_form", value: 390, isUnsigned: true)
!1065 = !DIEnumerator(name: "OPT_ffree_line_length_", value: 391, isUnsigned: true)
!1066 = !DIEnumerator(name: "OPT_ffree_line_length_none", value: 392, isUnsigned: true)
!1067 = !DIEnumerator(name: "OPT_ffreestanding", value: 393, isUnsigned: true)
!1068 = !DIEnumerator(name: "OPT_ffriend_injection", value: 394, isUnsigned: true)
!1069 = !DIEnumerator(name: "OPT_ffunction_cse", value: 395, isUnsigned: true)
!1070 = !DIEnumerator(name: "OPT_ffunction_sections", value: 396, isUnsigned: true)
!1071 = !DIEnumerator(name: "OPT_fgcse", value: 397, isUnsigned: true)
!1072 = !DIEnumerator(name: "OPT_fgcse_after_reload", value: 398, isUnsigned: true)
!1073 = !DIEnumerator(name: "OPT_fgcse_las", value: 399, isUnsigned: true)
!1074 = !DIEnumerator(name: "OPT_fgcse_lm", value: 400, isUnsigned: true)
!1075 = !DIEnumerator(name: "OPT_fgcse_sm", value: 401, isUnsigned: true)
!1076 = !DIEnumerator(name: "OPT_fgnu_keywords", value: 402, isUnsigned: true)
!1077 = !DIEnumerator(name: "OPT_fgnu_runtime", value: 403, isUnsigned: true)
!1078 = !DIEnumerator(name: "OPT_fgnu89_inline", value: 404, isUnsigned: true)
!1079 = !DIEnumerator(name: "OPT_fgraphite", value: 405, isUnsigned: true)
!1080 = !DIEnumerator(name: "OPT_fgraphite_identity", value: 406, isUnsigned: true)
!1081 = !DIEnumerator(name: "OPT_fguess_branch_probability", value: 407, isUnsigned: true)
!1082 = !DIEnumerator(name: "OPT_fguiding_decls", value: 408, isUnsigned: true)
!1083 = !DIEnumerator(name: "OPT_fhandle_exceptions", value: 409, isUnsigned: true)
!1084 = !DIEnumerator(name: "OPT_fhash_synchronization", value: 410, isUnsigned: true)
!1085 = !DIEnumerator(name: "OPT_fhelp", value: 411, isUnsigned: true)
!1086 = !DIEnumerator(name: "OPT_fhelp_", value: 412, isUnsigned: true)
!1087 = !DIEnumerator(name: "OPT_fhonor_std", value: 413, isUnsigned: true)
!1088 = !DIEnumerator(name: "OPT_fhosted", value: 414, isUnsigned: true)
!1089 = !DIEnumerator(name: "OPT_fhuge_objects", value: 415, isUnsigned: true)
!1090 = !DIEnumerator(name: "OPT_fident", value: 416, isUnsigned: true)
!1091 = !DIEnumerator(name: "OPT_fif_conversion", value: 417, isUnsigned: true)
!1092 = !DIEnumerator(name: "OPT_fif_conversion2", value: 418, isUnsigned: true)
!1093 = !DIEnumerator(name: "OPT_fimplement_inlines", value: 419, isUnsigned: true)
!1094 = !DIEnumerator(name: "OPT_fimplicit_inline_templates", value: 420, isUnsigned: true)
!1095 = !DIEnumerator(name: "OPT_fimplicit_none", value: 421, isUnsigned: true)
!1096 = !DIEnumerator(name: "OPT_fimplicit_templates", value: 422, isUnsigned: true)
!1097 = !DIEnumerator(name: "OPT_findirect_classes", value: 423, isUnsigned: true)
!1098 = !DIEnumerator(name: "OPT_findirect_dispatch", value: 424, isUnsigned: true)
!1099 = !DIEnumerator(name: "OPT_findirect_inlining", value: 425, isUnsigned: true)
!1100 = !DIEnumerator(name: "OPT_finhibit_size_directive", value: 426, isUnsigned: true)
!1101 = !DIEnumerator(name: "OPT_finit_character_", value: 427, isUnsigned: true)
!1102 = !DIEnumerator(name: "OPT_finit_integer_", value: 428, isUnsigned: true)
!1103 = !DIEnumerator(name: "OPT_finit_local_zero", value: 429, isUnsigned: true)
!1104 = !DIEnumerator(name: "OPT_finit_logical_", value: 430, isUnsigned: true)
!1105 = !DIEnumerator(name: "OPT_finit_real_", value: 431, isUnsigned: true)
!1106 = !DIEnumerator(name: "OPT_finline", value: 432, isUnsigned: true)
!1107 = !DIEnumerator(name: "OPT_finline_functions", value: 433, isUnsigned: true)
!1108 = !DIEnumerator(name: "OPT_finline_functions_called_once", value: 434, isUnsigned: true)
!1109 = !DIEnumerator(name: "OPT_finline_limit_", value: 435, isUnsigned: true)
!1110 = !DIEnumerator(name: "OPT_finline_limit_eq", value: 436, isUnsigned: true)
!1111 = !DIEnumerator(name: "OPT_finline_small_functions", value: 437, isUnsigned: true)
!1112 = !DIEnumerator(name: "OPT_finput_charset_", value: 438, isUnsigned: true)
!1113 = !DIEnumerator(name: "OPT_finstrument_functions", value: 439, isUnsigned: true)
!1114 = !DIEnumerator(name: "OPT_finstrument_functions_exclude_file_list_", value: 440, isUnsigned: true)
!1115 = !DIEnumerator(name: "OPT_finstrument_functions_exclude_function_list_", value: 441, isUnsigned: true)
!1116 = !DIEnumerator(name: "OPT_fintrinsic_modules_path", value: 442, isUnsigned: true)
!1117 = !DIEnumerator(name: "OPT_fipa_cp", value: 443, isUnsigned: true)
!1118 = !DIEnumerator(name: "OPT_fipa_cp_clone", value: 444, isUnsigned: true)
!1119 = !DIEnumerator(name: "OPT_fipa_matrix_reorg", value: 445, isUnsigned: true)
!1120 = !DIEnumerator(name: "OPT_fipa_pta", value: 446, isUnsigned: true)
!1121 = !DIEnumerator(name: "OPT_fipa_pure_const", value: 447, isUnsigned: true)
!1122 = !DIEnumerator(name: "OPT_fipa_reference", value: 448, isUnsigned: true)
!1123 = !DIEnumerator(name: "OPT_fipa_sra", value: 449, isUnsigned: true)
!1124 = !DIEnumerator(name: "OPT_fipa_struct_reorg", value: 450, isUnsigned: true)
!1125 = !DIEnumerator(name: "OPT_fipa_type_escape", value: 451, isUnsigned: true)
!1126 = !DIEnumerator(name: "OPT_fira_algorithm_", value: 452, isUnsigned: true)
!1127 = !DIEnumerator(name: "OPT_fira_coalesce", value: 453, isUnsigned: true)
!1128 = !DIEnumerator(name: "OPT_fira_loop_pressure", value: 454, isUnsigned: true)
!1129 = !DIEnumerator(name: "OPT_fira_region_", value: 455, isUnsigned: true)
!1130 = !DIEnumerator(name: "OPT_fira_share_save_slots", value: 456, isUnsigned: true)
!1131 = !DIEnumerator(name: "OPT_fira_share_spill_slots", value: 457, isUnsigned: true)
!1132 = !DIEnumerator(name: "OPT_fira_verbose_", value: 458, isUnsigned: true)
!1133 = !DIEnumerator(name: "OPT_fivopts", value: 459, isUnsigned: true)
!1134 = !DIEnumerator(name: "OPT_fjni", value: 460, isUnsigned: true)
!1135 = !DIEnumerator(name: "OPT_fjump_tables", value: 461, isUnsigned: true)
!1136 = !DIEnumerator(name: "OPT_fkeep_inline_functions", value: 462, isUnsigned: true)
!1137 = !DIEnumerator(name: "OPT_fkeep_static_consts", value: 463, isUnsigned: true)
!1138 = !DIEnumerator(name: "OPT_flabels_ok", value: 464, isUnsigned: true)
!1139 = !DIEnumerator(name: "OPT_flax_vector_conversions", value: 465, isUnsigned: true)
!1140 = !DIEnumerator(name: "OPT_fleading_underscore", value: 466, isUnsigned: true)
!1141 = !DIEnumerator(name: "OPT_floop_block", value: 467, isUnsigned: true)
!1142 = !DIEnumerator(name: "OPT_floop_interchange", value: 468, isUnsigned: true)
!1143 = !DIEnumerator(name: "OPT_floop_optimize", value: 469, isUnsigned: true)
!1144 = !DIEnumerator(name: "OPT_floop_parallelize_all", value: 470, isUnsigned: true)
!1145 = !DIEnumerator(name: "OPT_floop_strip_mine", value: 471, isUnsigned: true)
!1146 = !DIEnumerator(name: "OPT_flto", value: 472, isUnsigned: true)
!1147 = !DIEnumerator(name: "OPT_flto_compression_level_", value: 473, isUnsigned: true)
!1148 = !DIEnumerator(name: "OPT_flto_report", value: 474, isUnsigned: true)
!1149 = !DIEnumerator(name: "OPT_fltrans", value: 475, isUnsigned: true)
!1150 = !DIEnumerator(name: "OPT_fltrans_output_list_", value: 476, isUnsigned: true)
!1151 = !DIEnumerator(name: "OPT_fmath_errno", value: 477, isUnsigned: true)
!1152 = !DIEnumerator(name: "OPT_fmax_array_constructor_", value: 478, isUnsigned: true)
!1153 = !DIEnumerator(name: "OPT_fmax_errors_", value: 479, isUnsigned: true)
!1154 = !DIEnumerator(name: "OPT_fmax_identifier_length_", value: 480, isUnsigned: true)
!1155 = !DIEnumerator(name: "OPT_fmax_stack_var_size_", value: 481, isUnsigned: true)
!1156 = !DIEnumerator(name: "OPT_fmax_subrecord_length_", value: 482, isUnsigned: true)
!1157 = !DIEnumerator(name: "OPT_fmem_report", value: 483, isUnsigned: true)
!1158 = !DIEnumerator(name: "OPT_fmerge_all_constants", value: 484, isUnsigned: true)
!1159 = !DIEnumerator(name: "OPT_fmerge_constants", value: 485, isUnsigned: true)
!1160 = !DIEnumerator(name: "OPT_fmerge_debug_strings", value: 486, isUnsigned: true)
!1161 = !DIEnumerator(name: "OPT_fmessage_length_", value: 487, isUnsigned: true)
!1162 = !DIEnumerator(name: "OPT_fmodule_private", value: 488, isUnsigned: true)
!1163 = !DIEnumerator(name: "OPT_fmodulo_sched", value: 489, isUnsigned: true)
!1164 = !DIEnumerator(name: "OPT_fmodulo_sched_allow_regmoves", value: 490, isUnsigned: true)
!1165 = !DIEnumerator(name: "OPT_fmove_loop_invariants", value: 491, isUnsigned: true)
!1166 = !DIEnumerator(name: "OPT_fms_extensions", value: 492, isUnsigned: true)
!1167 = !DIEnumerator(name: "OPT_fmudflap", value: 493, isUnsigned: true)
!1168 = !DIEnumerator(name: "OPT_fmudflapir", value: 494, isUnsigned: true)
!1169 = !DIEnumerator(name: "OPT_fmudflapth", value: 495, isUnsigned: true)
!1170 = !DIEnumerator(name: "OPT_fname_mangling_version_", value: 496, isUnsigned: true)
!1171 = !DIEnumerator(name: "OPT_fnew_abi", value: 497, isUnsigned: true)
!1172 = !DIEnumerator(name: "OPT_fnext_runtime", value: 498, isUnsigned: true)
!1173 = !DIEnumerator(name: "OPT_fnil_receivers", value: 499, isUnsigned: true)
!1174 = !DIEnumerator(name: "OPT_fnon_call_exceptions", value: 500, isUnsigned: true)
!1175 = !DIEnumerator(name: "OPT_fnonansi_builtins", value: 501, isUnsigned: true)
!1176 = !DIEnumerator(name: "OPT_fnonnull_objects", value: 502, isUnsigned: true)
!1177 = !DIEnumerator(name: "OPT_fobjc_call_cxx_cdtors", value: 503, isUnsigned: true)
!1178 = !DIEnumerator(name: "OPT_fobjc_direct_dispatch", value: 504, isUnsigned: true)
!1179 = !DIEnumerator(name: "OPT_fobjc_exceptions", value: 505, isUnsigned: true)
!1180 = !DIEnumerator(name: "OPT_fobjc_gc", value: 506, isUnsigned: true)
!1181 = !DIEnumerator(name: "OPT_fobjc_sjlj_exceptions", value: 507, isUnsigned: true)
!1182 = !DIEnumerator(name: "OPT_fomit_frame_pointer", value: 508, isUnsigned: true)
!1183 = !DIEnumerator(name: "OPT_fopenmp", value: 509, isUnsigned: true)
!1184 = !DIEnumerator(name: "OPT_foperator_names", value: 510, isUnsigned: true)
!1185 = !DIEnumerator(name: "OPT_foptimize_register_move", value: 511, isUnsigned: true)
!1186 = !DIEnumerator(name: "OPT_foptimize_sibling_calls", value: 512, isUnsigned: true)
!1187 = !DIEnumerator(name: "OPT_foptimize_static_class_initialization", value: 513, isUnsigned: true)
!1188 = !DIEnumerator(name: "OPT_foptional_diags", value: 514, isUnsigned: true)
!1189 = !DIEnumerator(name: "OPT_foutput_class_dir_", value: 515, isUnsigned: true)
!1190 = !DIEnumerator(name: "OPT_fpack_derived", value: 516, isUnsigned: true)
!1191 = !DIEnumerator(name: "OPT_fpack_struct", value: 517, isUnsigned: true)
!1192 = !DIEnumerator(name: "OPT_fpack_struct_", value: 518, isUnsigned: true)
!1193 = !DIEnumerator(name: "OPT_fpcc_struct_return", value: 519, isUnsigned: true)
!1194 = !DIEnumerator(name: "OPT_fpch_deps", value: 520, isUnsigned: true)
!1195 = !DIEnumerator(name: "OPT_fpch_preprocess", value: 521, isUnsigned: true)
!1196 = !DIEnumerator(name: "OPT_fpeel_loops", value: 522, isUnsigned: true)
!1197 = !DIEnumerator(name: "OPT_fpeephole", value: 523, isUnsigned: true)
!1198 = !DIEnumerator(name: "OPT_fpeephole2", value: 524, isUnsigned: true)
!1199 = !DIEnumerator(name: "OPT_fpermissive", value: 525, isUnsigned: true)
!1200 = !DIEnumerator(name: "OPT_fpic", value: 526, isUnsigned: true)
!1201 = !DIEnumerator(name: "OPT_fpie", value: 527, isUnsigned: true)
!1202 = !DIEnumerator(name: "OPT_fplugin_arg_", value: 528, isUnsigned: true)
!1203 = !DIEnumerator(name: "OPT_fplugin_", value: 529, isUnsigned: true)
!1204 = !DIEnumerator(name: "OPT_fpost_ipa_mem_report", value: 530, isUnsigned: true)
!1205 = !DIEnumerator(name: "OPT_fpre_ipa_mem_report", value: 531, isUnsigned: true)
!1206 = !DIEnumerator(name: "OPT_fpredictive_commoning", value: 532, isUnsigned: true)
!1207 = !DIEnumerator(name: "OPT_fprefetch_loop_arrays", value: 533, isUnsigned: true)
!1208 = !DIEnumerator(name: "OPT_fpreprocessed", value: 534, isUnsigned: true)
!1209 = !DIEnumerator(name: "OPT_fpretty_templates", value: 535, isUnsigned: true)
!1210 = !DIEnumerator(name: "OPT_fprofile", value: 536, isUnsigned: true)
!1211 = !DIEnumerator(name: "OPT_fprofile_arcs", value: 537, isUnsigned: true)
!1212 = !DIEnumerator(name: "OPT_fprofile_correction", value: 538, isUnsigned: true)
!1213 = !DIEnumerator(name: "OPT_fprofile_dir_", value: 539, isUnsigned: true)
!1214 = !DIEnumerator(name: "OPT_fprofile_generate", value: 540, isUnsigned: true)
!1215 = !DIEnumerator(name: "OPT_fprofile_generate_", value: 541, isUnsigned: true)
!1216 = !DIEnumerator(name: "OPT_fprofile_use", value: 542, isUnsigned: true)
!1217 = !DIEnumerator(name: "OPT_fprofile_use_", value: 543, isUnsigned: true)
!1218 = !DIEnumerator(name: "OPT_fprofile_values", value: 544, isUnsigned: true)
!1219 = !DIEnumerator(name: "OPT_fprotect_parens", value: 545, isUnsigned: true)
!1220 = !DIEnumerator(name: "OPT_frandom_seed", value: 546, isUnsigned: true)
!1221 = !DIEnumerator(name: "OPT_frandom_seed_", value: 547, isUnsigned: true)
!1222 = !DIEnumerator(name: "OPT_frange_check", value: 548, isUnsigned: true)
!1223 = !DIEnumerator(name: "OPT_freciprocal_math", value: 549, isUnsigned: true)
!1224 = !DIEnumerator(name: "OPT_frecord_gcc_switches", value: 550, isUnsigned: true)
!1225 = !DIEnumerator(name: "OPT_frecord_marker_4", value: 551, isUnsigned: true)
!1226 = !DIEnumerator(name: "OPT_frecord_marker_8", value: 552, isUnsigned: true)
!1227 = !DIEnumerator(name: "OPT_frecursive", value: 553, isUnsigned: true)
!1228 = !DIEnumerator(name: "OPT_freduced_reflection", value: 554, isUnsigned: true)
!1229 = !DIEnumerator(name: "OPT_freg_struct_return", value: 555, isUnsigned: true)
!1230 = !DIEnumerator(name: "OPT_fregmove", value: 556, isUnsigned: true)
!1231 = !DIEnumerator(name: "OPT_frename_registers", value: 557, isUnsigned: true)
!1232 = !DIEnumerator(name: "OPT_freorder_blocks", value: 558, isUnsigned: true)
!1233 = !DIEnumerator(name: "OPT_freorder_blocks_and_partition", value: 559, isUnsigned: true)
!1234 = !DIEnumerator(name: "OPT_freorder_functions", value: 560, isUnsigned: true)
!1235 = !DIEnumerator(name: "OPT_frepack_arrays", value: 561, isUnsigned: true)
!1236 = !DIEnumerator(name: "OPT_freplace_objc_classes", value: 562, isUnsigned: true)
!1237 = !DIEnumerator(name: "OPT_frepo", value: 563, isUnsigned: true)
!1238 = !DIEnumerator(name: "OPT_frerun_cse_after_loop", value: 564, isUnsigned: true)
!1239 = !DIEnumerator(name: "OPT_frerun_loop_opt", value: 565, isUnsigned: true)
!1240 = !DIEnumerator(name: "OPT_freschedule_modulo_scheduled_loops", value: 566, isUnsigned: true)
!1241 = !DIEnumerator(name: "OPT_fresolution", value: 567, isUnsigned: true)
!1242 = !DIEnumerator(name: "OPT_frounding_math", value: 568, isUnsigned: true)
!1243 = !DIEnumerator(name: "OPT_frtti", value: 569, isUnsigned: true)
!1244 = !DIEnumerator(name: "OPT_fsaw_java_file", value: 570, isUnsigned: true)
!1245 = !DIEnumerator(name: "OPT_fsched_critical_path_heuristic", value: 571, isUnsigned: true)
!1246 = !DIEnumerator(name: "OPT_fsched_dep_count_heuristic", value: 572, isUnsigned: true)
!1247 = !DIEnumerator(name: "OPT_fsched_group_heuristic", value: 573, isUnsigned: true)
!1248 = !DIEnumerator(name: "OPT_fsched_interblock", value: 574, isUnsigned: true)
!1249 = !DIEnumerator(name: "OPT_fsched_last_insn_heuristic", value: 575, isUnsigned: true)
!1250 = !DIEnumerator(name: "OPT_fsched_pressure", value: 576, isUnsigned: true)
!1251 = !DIEnumerator(name: "OPT_fsched_rank_heuristic", value: 577, isUnsigned: true)
!1252 = !DIEnumerator(name: "OPT_fsched_spec", value: 578, isUnsigned: true)
!1253 = !DIEnumerator(name: "OPT_fsched_spec_insn_heuristic", value: 579, isUnsigned: true)
!1254 = !DIEnumerator(name: "OPT_fsched_spec_load", value: 580, isUnsigned: true)
!1255 = !DIEnumerator(name: "OPT_fsched_spec_load_dangerous", value: 581, isUnsigned: true)
!1256 = !DIEnumerator(name: "OPT_fsched_stalled_insns", value: 582, isUnsigned: true)
!1257 = !DIEnumerator(name: "OPT_fsched_stalled_insns_dep", value: 583, isUnsigned: true)
!1258 = !DIEnumerator(name: "OPT_fsched_stalled_insns_dep_", value: 584, isUnsigned: true)
!1259 = !DIEnumerator(name: "OPT_fsched_stalled_insns_", value: 585, isUnsigned: true)
!1260 = !DIEnumerator(name: "OPT_fsched_verbose_", value: 586, isUnsigned: true)
!1261 = !DIEnumerator(name: "OPT_fsched2_use_superblocks", value: 587, isUnsigned: true)
!1262 = !DIEnumerator(name: "OPT_fsched2_use_traces", value: 588, isUnsigned: true)
!1263 = !DIEnumerator(name: "OPT_fschedule_insns", value: 589, isUnsigned: true)
!1264 = !DIEnumerator(name: "OPT_fschedule_insns2", value: 590, isUnsigned: true)
!1265 = !DIEnumerator(name: "OPT_fsecond_underscore", value: 591, isUnsigned: true)
!1266 = !DIEnumerator(name: "OPT_fsection_anchors", value: 592, isUnsigned: true)
!1267 = !DIEnumerator(name: "OPT_fsee", value: 593, isUnsigned: true)
!1268 = !DIEnumerator(name: "OPT_fsel_sched_pipelining", value: 594, isUnsigned: true)
!1269 = !DIEnumerator(name: "OPT_fsel_sched_pipelining_outer_loops", value: 595, isUnsigned: true)
!1270 = !DIEnumerator(name: "OPT_fsel_sched_reschedule_pipelined", value: 596, isUnsigned: true)
!1271 = !DIEnumerator(name: "OPT_fselective_scheduling", value: 597, isUnsigned: true)
!1272 = !DIEnumerator(name: "OPT_fselective_scheduling2", value: 598, isUnsigned: true)
!1273 = !DIEnumerator(name: "OPT_fshort_double", value: 599, isUnsigned: true)
!1274 = !DIEnumerator(name: "OPT_fshort_enums", value: 600, isUnsigned: true)
!1275 = !DIEnumerator(name: "OPT_fshort_wchar", value: 601, isUnsigned: true)
!1276 = !DIEnumerator(name: "OPT_fshow_column", value: 602, isUnsigned: true)
!1277 = !DIEnumerator(name: "OPT_fsign_zero", value: 603, isUnsigned: true)
!1278 = !DIEnumerator(name: "OPT_fsignaling_nans", value: 604, isUnsigned: true)
!1279 = !DIEnumerator(name: "OPT_fsigned_bitfields", value: 605, isUnsigned: true)
!1280 = !DIEnumerator(name: "OPT_fsigned_char", value: 606, isUnsigned: true)
!1281 = !DIEnumerator(name: "OPT_fsigned_zeros", value: 607, isUnsigned: true)
!1282 = !DIEnumerator(name: "OPT_fsingle_precision_constant", value: 608, isUnsigned: true)
!1283 = !DIEnumerator(name: "OPT_fsource_filename_", value: 609, isUnsigned: true)
!1284 = !DIEnumerator(name: "OPT_fsource_", value: 610, isUnsigned: true)
!1285 = !DIEnumerator(name: "OPT_fsplit_ivs_in_unroller", value: 611, isUnsigned: true)
!1286 = !DIEnumerator(name: "OPT_fsplit_wide_types", value: 612, isUnsigned: true)
!1287 = !DIEnumerator(name: "OPT_fsquangle", value: 613, isUnsigned: true)
!1288 = !DIEnumerator(name: "OPT_fstack_check", value: 614, isUnsigned: true)
!1289 = !DIEnumerator(name: "OPT_fstack_check_", value: 615, isUnsigned: true)
!1290 = !DIEnumerator(name: "OPT_fstack_limit", value: 616, isUnsigned: true)
!1291 = !DIEnumerator(name: "OPT_fstack_limit_register_", value: 617, isUnsigned: true)
!1292 = !DIEnumerator(name: "OPT_fstack_limit_symbol_", value: 618, isUnsigned: true)
!1293 = !DIEnumerator(name: "OPT_fstack_protector", value: 619, isUnsigned: true)
!1294 = !DIEnumerator(name: "OPT_fstack_protector_all", value: 620, isUnsigned: true)
!1295 = !DIEnumerator(name: "OPT_fstats", value: 621, isUnsigned: true)
!1296 = !DIEnumerator(name: "OPT_fstore_check", value: 622, isUnsigned: true)
!1297 = !DIEnumerator(name: "OPT_fstrength_reduce", value: 623, isUnsigned: true)
!1298 = !DIEnumerator(name: "OPT_fstrict_aliasing", value: 624, isUnsigned: true)
!1299 = !DIEnumerator(name: "OPT_fstrict_overflow", value: 625, isUnsigned: true)
!1300 = !DIEnumerator(name: "OPT_fstrict_prototype", value: 626, isUnsigned: true)
!1301 = !DIEnumerator(name: "OPT_fsyntax_only", value: 627, isUnsigned: true)
!1302 = !DIEnumerator(name: "OPT_ftabstop_", value: 628, isUnsigned: true)
!1303 = !DIEnumerator(name: "OPT_ftarget_help", value: 629, isUnsigned: true)
!1304 = !DIEnumerator(name: "OPT_ftarget_", value: 630, isUnsigned: true)
!1305 = !DIEnumerator(name: "OPT_ftemplate_depth_", value: 631, isUnsigned: true)
!1306 = !DIEnumerator(name: "OPT_ftemplate_depth_eq", value: 632, isUnsigned: true)
!1307 = !DIEnumerator(name: "OPT_ftest_coverage", value: 633, isUnsigned: true)
!1308 = !DIEnumerator(name: "OPT_fthis_is_variable", value: 634, isUnsigned: true)
!1309 = !DIEnumerator(name: "OPT_fthread_jumps", value: 635, isUnsigned: true)
!1310 = !DIEnumerator(name: "OPT_fthreadsafe_statics", value: 636, isUnsigned: true)
!1311 = !DIEnumerator(name: "OPT_ftime_report", value: 637, isUnsigned: true)
!1312 = !DIEnumerator(name: "OPT_ftls_model_", value: 638, isUnsigned: true)
!1313 = !DIEnumerator(name: "OPT_ftoplevel_reorder", value: 639, isUnsigned: true)
!1314 = !DIEnumerator(name: "OPT_ftracer", value: 640, isUnsigned: true)
!1315 = !DIEnumerator(name: "OPT_ftrapping_math", value: 641, isUnsigned: true)
!1316 = !DIEnumerator(name: "OPT_ftrapv", value: 642, isUnsigned: true)
!1317 = !DIEnumerator(name: "OPT_ftree_builtin_call_dce", value: 643, isUnsigned: true)
!1318 = !DIEnumerator(name: "OPT_ftree_ccp", value: 644, isUnsigned: true)
!1319 = !DIEnumerator(name: "OPT_ftree_ch", value: 645, isUnsigned: true)
!1320 = !DIEnumerator(name: "OPT_ftree_copy_prop", value: 646, isUnsigned: true)
!1321 = !DIEnumerator(name: "OPT_ftree_copyrename", value: 647, isUnsigned: true)
!1322 = !DIEnumerator(name: "OPT_ftree_cselim", value: 648, isUnsigned: true)
!1323 = !DIEnumerator(name: "OPT_ftree_dce", value: 649, isUnsigned: true)
!1324 = !DIEnumerator(name: "OPT_ftree_dominator_opts", value: 650, isUnsigned: true)
!1325 = !DIEnumerator(name: "OPT_ftree_dse", value: 651, isUnsigned: true)
!1326 = !DIEnumerator(name: "OPT_ftree_forwprop", value: 652, isUnsigned: true)
!1327 = !DIEnumerator(name: "OPT_ftree_fre", value: 653, isUnsigned: true)
!1328 = !DIEnumerator(name: "OPT_ftree_loop_distribution", value: 654, isUnsigned: true)
!1329 = !DIEnumerator(name: "OPT_ftree_loop_im", value: 655, isUnsigned: true)
!1330 = !DIEnumerator(name: "OPT_ftree_loop_ivcanon", value: 656, isUnsigned: true)
!1331 = !DIEnumerator(name: "OPT_ftree_loop_linear", value: 657, isUnsigned: true)
!1332 = !DIEnumerator(name: "OPT_ftree_loop_optimize", value: 658, isUnsigned: true)
!1333 = !DIEnumerator(name: "OPT_ftree_lrs", value: 659, isUnsigned: true)
!1334 = !DIEnumerator(name: "OPT_ftree_parallelize_loops_", value: 660, isUnsigned: true)
!1335 = !DIEnumerator(name: "OPT_ftree_phiprop", value: 661, isUnsigned: true)
!1336 = !DIEnumerator(name: "OPT_ftree_pre", value: 662, isUnsigned: true)
!1337 = !DIEnumerator(name: "OPT_ftree_pta", value: 663, isUnsigned: true)
!1338 = !DIEnumerator(name: "OPT_ftree_reassoc", value: 664, isUnsigned: true)
!1339 = !DIEnumerator(name: "OPT_ftree_salias", value: 665, isUnsigned: true)
!1340 = !DIEnumerator(name: "OPT_ftree_scev_cprop", value: 666, isUnsigned: true)
!1341 = !DIEnumerator(name: "OPT_ftree_sink", value: 667, isUnsigned: true)
!1342 = !DIEnumerator(name: "OPT_ftree_slp_vectorize", value: 668, isUnsigned: true)
!1343 = !DIEnumerator(name: "OPT_ftree_sra", value: 669, isUnsigned: true)
!1344 = !DIEnumerator(name: "OPT_ftree_store_ccp", value: 670, isUnsigned: true)
!1345 = !DIEnumerator(name: "OPT_ftree_store_copy_prop", value: 671, isUnsigned: true)
!1346 = !DIEnumerator(name: "OPT_ftree_switch_conversion", value: 672, isUnsigned: true)
!1347 = !DIEnumerator(name: "OPT_ftree_ter", value: 673, isUnsigned: true)
!1348 = !DIEnumerator(name: "OPT_ftree_vect_loop_version", value: 674, isUnsigned: true)
!1349 = !DIEnumerator(name: "OPT_ftree_vectorize", value: 675, isUnsigned: true)
!1350 = !DIEnumerator(name: "OPT_ftree_vectorizer_verbose_", value: 676, isUnsigned: true)
!1351 = !DIEnumerator(name: "OPT_ftree_vrp", value: 677, isUnsigned: true)
!1352 = !DIEnumerator(name: "OPT_funderscoring", value: 678, isUnsigned: true)
!1353 = !DIEnumerator(name: "OPT_funit_at_a_time", value: 679, isUnsigned: true)
!1354 = !DIEnumerator(name: "OPT_funroll_all_loops", value: 680, isUnsigned: true)
!1355 = !DIEnumerator(name: "OPT_funroll_loops", value: 681, isUnsigned: true)
!1356 = !DIEnumerator(name: "OPT_funsafe_loop_optimizations", value: 682, isUnsigned: true)
!1357 = !DIEnumerator(name: "OPT_funsafe_math_optimizations", value: 683, isUnsigned: true)
!1358 = !DIEnumerator(name: "OPT_funsigned_bitfields", value: 684, isUnsigned: true)
!1359 = !DIEnumerator(name: "OPT_funsigned_char", value: 685, isUnsigned: true)
!1360 = !DIEnumerator(name: "OPT_funswitch_loops", value: 686, isUnsigned: true)
!1361 = !DIEnumerator(name: "OPT_funwind_tables", value: 687, isUnsigned: true)
!1362 = !DIEnumerator(name: "OPT_fuse_atomic_builtins", value: 688, isUnsigned: true)
!1363 = !DIEnumerator(name: "OPT_fuse_boehm_gc", value: 689, isUnsigned: true)
!1364 = !DIEnumerator(name: "OPT_fuse_cxa_atexit", value: 690, isUnsigned: true)
!1365 = !DIEnumerator(name: "OPT_fuse_cxa_get_exception_ptr", value: 691, isUnsigned: true)
!1366 = !DIEnumerator(name: "OPT_fuse_divide_subroutine", value: 692, isUnsigned: true)
!1367 = !DIEnumerator(name: "OPT_fuse_linker_plugin", value: 693, isUnsigned: true)
!1368 = !DIEnumerator(name: "OPT_fvar_tracking", value: 694, isUnsigned: true)
!1369 = !DIEnumerator(name: "OPT_fvar_tracking_assignments", value: 695, isUnsigned: true)
!1370 = !DIEnumerator(name: "OPT_fvar_tracking_assignments_toggle", value: 696, isUnsigned: true)
!1371 = !DIEnumerator(name: "OPT_fvar_tracking_uninit", value: 697, isUnsigned: true)
!1372 = !DIEnumerator(name: "OPT_fvariable_expansion_in_unroller", value: 698, isUnsigned: true)
!1373 = !DIEnumerator(name: "OPT_fvect_cost_model", value: 699, isUnsigned: true)
!1374 = !DIEnumerator(name: "OPT_fverbose_asm", value: 700, isUnsigned: true)
!1375 = !DIEnumerator(name: "OPT_fversion", value: 701, isUnsigned: true)
!1376 = !DIEnumerator(name: "OPT_fvisibility_inlines_hidden", value: 702, isUnsigned: true)
!1377 = !DIEnumerator(name: "OPT_fvisibility_ms_compat", value: 703, isUnsigned: true)
!1378 = !DIEnumerator(name: "OPT_fvisibility_", value: 704, isUnsigned: true)
!1379 = !DIEnumerator(name: "OPT_fvpt", value: 705, isUnsigned: true)
!1380 = !DIEnumerator(name: "OPT_fvtable_gc", value: 706, isUnsigned: true)
!1381 = !DIEnumerator(name: "OPT_fvtable_thunks", value: 707, isUnsigned: true)
!1382 = !DIEnumerator(name: "OPT_fweak", value: 708, isUnsigned: true)
!1383 = !DIEnumerator(name: "OPT_fweb", value: 709, isUnsigned: true)
!1384 = !DIEnumerator(name: "OPT_fwhole_file", value: 710, isUnsigned: true)
!1385 = !DIEnumerator(name: "OPT_fwhole_program", value: 711, isUnsigned: true)
!1386 = !DIEnumerator(name: "OPT_fwhopr", value: 712, isUnsigned: true)
!1387 = !DIEnumerator(name: "OPT_fwide_exec_charset_", value: 713, isUnsigned: true)
!1388 = !DIEnumerator(name: "OPT_fworking_directory", value: 714, isUnsigned: true)
!1389 = !DIEnumerator(name: "OPT_fwpa", value: 715, isUnsigned: true)
!1390 = !DIEnumerator(name: "OPT_fwrapv", value: 716, isUnsigned: true)
!1391 = !DIEnumerator(name: "OPT_fxref", value: 717, isUnsigned: true)
!1392 = !DIEnumerator(name: "OPT_fzero_initialized_in_bss", value: 718, isUnsigned: true)
!1393 = !DIEnumerator(name: "OPT_fzero_link", value: 719, isUnsigned: true)
!1394 = !DIEnumerator(name: "OPT_g", value: 720, isUnsigned: true)
!1395 = !DIEnumerator(name: "OPT_gant", value: 721, isUnsigned: true)
!1396 = !DIEnumerator(name: "OPT_gcoff", value: 722, isUnsigned: true)
!1397 = !DIEnumerator(name: "OPT_gdwarfplus", value: 723, isUnsigned: true)
!1398 = !DIEnumerator(name: "OPT_gdwarf_", value: 724, isUnsigned: true)
!1399 = !DIEnumerator(name: "OPT_gen_decls", value: 725, isUnsigned: true)
!1400 = !DIEnumerator(name: "OPT_ggdb", value: 726, isUnsigned: true)
!1401 = !DIEnumerator(name: "OPT_gnat", value: 727, isUnsigned: true)
!1402 = !DIEnumerator(name: "OPT_gnatO", value: 728, isUnsigned: true)
!1403 = !DIEnumerator(name: "OPT_gno_strict_dwarf", value: 729, isUnsigned: true)
!1404 = !DIEnumerator(name: "OPT_gstabs", value: 730, isUnsigned: true)
!1405 = !DIEnumerator(name: "OPT_gstabs_", value: 731, isUnsigned: true)
!1406 = !DIEnumerator(name: "OPT_gstrict_dwarf", value: 732, isUnsigned: true)
!1407 = !DIEnumerator(name: "OPT_gtoggle", value: 733, isUnsigned: true)
!1408 = !DIEnumerator(name: "OPT_gvms", value: 734, isUnsigned: true)
!1409 = !DIEnumerator(name: "OPT_gxcoff", value: 735, isUnsigned: true)
!1410 = !DIEnumerator(name: "OPT_gxcoff_", value: 736, isUnsigned: true)
!1411 = !DIEnumerator(name: "OPT_idirafter", value: 737, isUnsigned: true)
!1412 = !DIEnumerator(name: "OPT_imacros", value: 738, isUnsigned: true)
!1413 = !DIEnumerator(name: "OPT_imultilib", value: 739, isUnsigned: true)
!1414 = !DIEnumerator(name: "OPT_include", value: 740, isUnsigned: true)
!1415 = !DIEnumerator(name: "OPT_iprefix", value: 741, isUnsigned: true)
!1416 = !DIEnumerator(name: "OPT_iquote", value: 742, isUnsigned: true)
!1417 = !DIEnumerator(name: "OPT_isysroot", value: 743, isUnsigned: true)
!1418 = !DIEnumerator(name: "OPT_isystem", value: 744, isUnsigned: true)
!1419 = !DIEnumerator(name: "OPT_iwithprefix", value: 745, isUnsigned: true)
!1420 = !DIEnumerator(name: "OPT_iwithprefixbefore", value: 746, isUnsigned: true)
!1421 = !DIEnumerator(name: "OPT_lang_asm", value: 747, isUnsigned: true)
!1422 = !DIEnumerator(name: "OPT_lang_objc", value: 748, isUnsigned: true)
!1423 = !DIEnumerator(name: "OPT_m128bit_long_double", value: 749, isUnsigned: true)
!1424 = !DIEnumerator(name: "OPT_m32", value: 750, isUnsigned: true)
!1425 = !DIEnumerator(name: "OPT_m3dnow", value: 751, isUnsigned: true)
!1426 = !DIEnumerator(name: "OPT_m3dnowa", value: 752, isUnsigned: true)
!1427 = !DIEnumerator(name: "OPT_m64", value: 753, isUnsigned: true)
!1428 = !DIEnumerator(name: "OPT_m80387", value: 754, isUnsigned: true)
!1429 = !DIEnumerator(name: "OPT_m96bit_long_double", value: 755, isUnsigned: true)
!1430 = !DIEnumerator(name: "OPT_mabi_", value: 756, isUnsigned: true)
!1431 = !DIEnumerator(name: "OPT_mabm", value: 757, isUnsigned: true)
!1432 = !DIEnumerator(name: "OPT_maccumulate_outgoing_args", value: 758, isUnsigned: true)
!1433 = !DIEnumerator(name: "OPT_maes", value: 759, isUnsigned: true)
!1434 = !DIEnumerator(name: "OPT_malign_double", value: 760, isUnsigned: true)
!1435 = !DIEnumerator(name: "OPT_malign_functions_", value: 761, isUnsigned: true)
!1436 = !DIEnumerator(name: "OPT_malign_jumps_", value: 762, isUnsigned: true)
!1437 = !DIEnumerator(name: "OPT_malign_loops_", value: 763, isUnsigned: true)
!1438 = !DIEnumerator(name: "OPT_malign_stringops", value: 764, isUnsigned: true)
!1439 = !DIEnumerator(name: "OPT_march_", value: 765, isUnsigned: true)
!1440 = !DIEnumerator(name: "OPT_masm_", value: 766, isUnsigned: true)
!1441 = !DIEnumerator(name: "OPT_mavx", value: 767, isUnsigned: true)
!1442 = !DIEnumerator(name: "OPT_mbranch_cost_", value: 768, isUnsigned: true)
!1443 = !DIEnumerator(name: "OPT_mcld", value: 769, isUnsigned: true)
!1444 = !DIEnumerator(name: "OPT_mcmodel_", value: 770, isUnsigned: true)
!1445 = !DIEnumerator(name: "OPT_mcrc32", value: 771, isUnsigned: true)
!1446 = !DIEnumerator(name: "OPT_mcx16", value: 772, isUnsigned: true)
!1447 = !DIEnumerator(name: "OPT_mfancy_math_387", value: 773, isUnsigned: true)
!1448 = !DIEnumerator(name: "OPT_mfma", value: 774, isUnsigned: true)
!1449 = !DIEnumerator(name: "OPT_mfma4", value: 775, isUnsigned: true)
!1450 = !DIEnumerator(name: "OPT_mforce_drap", value: 776, isUnsigned: true)
!1451 = !DIEnumerator(name: "OPT_mfp_ret_in_387", value: 777, isUnsigned: true)
!1452 = !DIEnumerator(name: "OPT_mfpmath_", value: 778, isUnsigned: true)
!1453 = !DIEnumerator(name: "OPT_mfused_madd", value: 779, isUnsigned: true)
!1454 = !DIEnumerator(name: "OPT_mglibc", value: 780, isUnsigned: true)
!1455 = !DIEnumerator(name: "OPT_mhard_float", value: 781, isUnsigned: true)
!1456 = !DIEnumerator(name: "OPT_mieee_fp", value: 782, isUnsigned: true)
!1457 = !DIEnumerator(name: "OPT_mincoming_stack_boundary_", value: 783, isUnsigned: true)
!1458 = !DIEnumerator(name: "OPT_minline_all_stringops", value: 784, isUnsigned: true)
!1459 = !DIEnumerator(name: "OPT_minline_stringops_dynamically", value: 785, isUnsigned: true)
!1460 = !DIEnumerator(name: "OPT_mintel_syntax", value: 786, isUnsigned: true)
!1461 = !DIEnumerator(name: "OPT_mlarge_data_threshold_", value: 787, isUnsigned: true)
!1462 = !DIEnumerator(name: "OPT_mlwp", value: 788, isUnsigned: true)
!1463 = !DIEnumerator(name: "OPT_mmmx", value: 789, isUnsigned: true)
!1464 = !DIEnumerator(name: "OPT_mmovbe", value: 790, isUnsigned: true)
!1465 = !DIEnumerator(name: "OPT_mms_bitfields", value: 791, isUnsigned: true)
!1466 = !DIEnumerator(name: "OPT_mno_align_stringops", value: 792, isUnsigned: true)
!1467 = !DIEnumerator(name: "OPT_mno_fancy_math_387", value: 793, isUnsigned: true)
!1468 = !DIEnumerator(name: "OPT_mno_push_args", value: 794, isUnsigned: true)
!1469 = !DIEnumerator(name: "OPT_mno_red_zone", value: 795, isUnsigned: true)
!1470 = !DIEnumerator(name: "OPT_mno_sse4", value: 796, isUnsigned: true)
!1471 = !DIEnumerator(name: "OPT_momit_leaf_frame_pointer", value: 797, isUnsigned: true)
!1472 = !DIEnumerator(name: "OPT_mpc", value: 798, isUnsigned: true)
!1473 = !DIEnumerator(name: "OPT_mpclmul", value: 799, isUnsigned: true)
!1474 = !DIEnumerator(name: "OPT_mpopcnt", value: 800, isUnsigned: true)
!1475 = !DIEnumerator(name: "OPT_mpreferred_stack_boundary_", value: 801, isUnsigned: true)
!1476 = !DIEnumerator(name: "OPT_mpush_args", value: 802, isUnsigned: true)
!1477 = !DIEnumerator(name: "OPT_mrecip", value: 803, isUnsigned: true)
!1478 = !DIEnumerator(name: "OPT_mred_zone", value: 804, isUnsigned: true)
!1479 = !DIEnumerator(name: "OPT_mregparm_", value: 805, isUnsigned: true)
!1480 = !DIEnumerator(name: "OPT_mrtd", value: 806, isUnsigned: true)
!1481 = !DIEnumerator(name: "OPT_msahf", value: 807, isUnsigned: true)
!1482 = !DIEnumerator(name: "OPT_msoft_float", value: 808, isUnsigned: true)
!1483 = !DIEnumerator(name: "OPT_msse", value: 809, isUnsigned: true)
!1484 = !DIEnumerator(name: "OPT_msse2", value: 810, isUnsigned: true)
!1485 = !DIEnumerator(name: "OPT_msse2avx", value: 811, isUnsigned: true)
!1486 = !DIEnumerator(name: "OPT_msse3", value: 812, isUnsigned: true)
!1487 = !DIEnumerator(name: "OPT_msse4", value: 813, isUnsigned: true)
!1488 = !DIEnumerator(name: "OPT_msse4_1", value: 814, isUnsigned: true)
!1489 = !DIEnumerator(name: "OPT_msse4_2", value: 815, isUnsigned: true)
!1490 = !DIEnumerator(name: "OPT_msse4a", value: 816, isUnsigned: true)
!1491 = !DIEnumerator(name: "OPT_msseregparm", value: 817, isUnsigned: true)
!1492 = !DIEnumerator(name: "OPT_mssse3", value: 818, isUnsigned: true)
!1493 = !DIEnumerator(name: "OPT_mstack_arg_probe", value: 819, isUnsigned: true)
!1494 = !DIEnumerator(name: "OPT_mstackrealign", value: 820, isUnsigned: true)
!1495 = !DIEnumerator(name: "OPT_mstringop_strategy_", value: 821, isUnsigned: true)
!1496 = !DIEnumerator(name: "OPT_mtls_dialect_", value: 822, isUnsigned: true)
!1497 = !DIEnumerator(name: "OPT_mtls_direct_seg_refs", value: 823, isUnsigned: true)
!1498 = !DIEnumerator(name: "OPT_mtune_", value: 824, isUnsigned: true)
!1499 = !DIEnumerator(name: "OPT_muclibc", value: 825, isUnsigned: true)
!1500 = !DIEnumerator(name: "OPT_mveclibabi_", value: 826, isUnsigned: true)
!1501 = !DIEnumerator(name: "OPT_mxop", value: 827, isUnsigned: true)
!1502 = !DIEnumerator(name: "OPT_nocpp", value: 828, isUnsigned: true)
!1503 = !DIEnumerator(name: "OPT_nostdinc", value: 829, isUnsigned: true)
!1504 = !DIEnumerator(name: "OPT_nostdinc__", value: 830, isUnsigned: true)
!1505 = !DIEnumerator(name: "OPT_nostdlib", value: 831, isUnsigned: true)
!1506 = !DIEnumerator(name: "OPT_o", value: 832, isUnsigned: true)
!1507 = !DIEnumerator(name: "OPT_p", value: 833, isUnsigned: true)
!1508 = !DIEnumerator(name: "OPT_pedantic", value: 834, isUnsigned: true)
!1509 = !DIEnumerator(name: "OPT_pedantic_errors", value: 835, isUnsigned: true)
!1510 = !DIEnumerator(name: "OPT_pie", value: 836, isUnsigned: true)
!1511 = !DIEnumerator(name: "OPT_print_objc_runtime_info", value: 837, isUnsigned: true)
!1512 = !DIEnumerator(name: "OPT_print_pch_checksum", value: 838, isUnsigned: true)
!1513 = !DIEnumerator(name: "OPT_quiet", value: 839, isUnsigned: true)
!1514 = !DIEnumerator(name: "OPT_remap", value: 840, isUnsigned: true)
!1515 = !DIEnumerator(name: "OPT_shared", value: 841, isUnsigned: true)
!1516 = !DIEnumerator(name: "OPT_static_libgfortran", value: 842, isUnsigned: true)
!1517 = !DIEnumerator(name: "OPT_std_c__0x", value: 843, isUnsigned: true)
!1518 = !DIEnumerator(name: "OPT_std_c__98", value: 844, isUnsigned: true)
!1519 = !DIEnumerator(name: "OPT_std_c89", value: 845, isUnsigned: true)
!1520 = !DIEnumerator(name: "OPT_std_c90", value: 846, isUnsigned: true)
!1521 = !DIEnumerator(name: "OPT_std_c99", value: 847, isUnsigned: true)
!1522 = !DIEnumerator(name: "OPT_std_c9x", value: 848, isUnsigned: true)
!1523 = !DIEnumerator(name: "OPT_std_f2003", value: 849, isUnsigned: true)
!1524 = !DIEnumerator(name: "OPT_std_f2008", value: 850, isUnsigned: true)
!1525 = !DIEnumerator(name: "OPT_std_f95", value: 851, isUnsigned: true)
!1526 = !DIEnumerator(name: "OPT_std_gnu", value: 852, isUnsigned: true)
!1527 = !DIEnumerator(name: "OPT_std_gnu__0x", value: 853, isUnsigned: true)
!1528 = !DIEnumerator(name: "OPT_std_gnu__98", value: 854, isUnsigned: true)
!1529 = !DIEnumerator(name: "OPT_std_gnu89", value: 855, isUnsigned: true)
!1530 = !DIEnumerator(name: "OPT_std_gnu90", value: 856, isUnsigned: true)
!1531 = !DIEnumerator(name: "OPT_std_gnu99", value: 857, isUnsigned: true)
!1532 = !DIEnumerator(name: "OPT_std_gnu9x", value: 858, isUnsigned: true)
!1533 = !DIEnumerator(name: "OPT_std_iso9899_1990", value: 859, isUnsigned: true)
!1534 = !DIEnumerator(name: "OPT_std_iso9899_199409", value: 860, isUnsigned: true)
!1535 = !DIEnumerator(name: "OPT_std_iso9899_1999", value: 861, isUnsigned: true)
!1536 = !DIEnumerator(name: "OPT_std_iso9899_199x", value: 862, isUnsigned: true)
!1537 = !DIEnumerator(name: "OPT_std_legacy", value: 863, isUnsigned: true)
!1538 = !DIEnumerator(name: "OPT_traditional_cpp", value: 864, isUnsigned: true)
!1539 = !DIEnumerator(name: "OPT_trigraphs", value: 865, isUnsigned: true)
!1540 = !DIEnumerator(name: "OPT_undef", value: 866, isUnsigned: true)
!1541 = !DIEnumerator(name: "OPT_v", value: 867, isUnsigned: true)
!1542 = !DIEnumerator(name: "OPT_version", value: 868, isUnsigned: true)
!1543 = !DIEnumerator(name: "OPT_w", value: 869, isUnsigned: true)
!1544 = !DIEnumerator(name: "N_OPTS", value: 870, isUnsigned: true)
!1545 = !{!1546, !1547, !1565, !183, !1662, !2897, !2898, !2899, !2443, !2902, !2908, !2355, !1549, !7, !1896, !2911, !1929, !1834, !2913, !1685, !2932, !1895, !1695}
!1546 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!1547 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge_var_map_vector", file: !1548, line: 563, baseType: !1549)
!1548 = !DIFile(filename: "./tree-flow.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1549 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1550, size: 64)
!1550 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_var_map_heap", file: !1548, line: 560, baseType: !1551)
!1551 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_var_map_heap", file: !1548, line: 560, size: 256, elements: !1552)
!1552 = !{!1553}
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1551, file: !1548, line: 560, baseType: !1554, size: 256)
!1554 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_var_map_base", file: !1548, line: 559, baseType: !1555)
!1555 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_var_map_base", file: !1548, line: 559, size: 256, elements: !1556)
!1556 = !{!1557, !1558, !1559}
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1555, file: !1548, line: 559, baseType: !7, size: 32)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1555, file: !1548, line: 559, baseType: !7, size: 32, offset: 32)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1555, file: !1548, line: 559, baseType: !1560, size: 192, offset: 64)
!1560 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1561, size: 192, elements: !1666)
!1561 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge_var_map", file: !1548, line: 557, baseType: !1562)
!1562 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_edge_var_map", file: !1548, line: 552, size: 192, elements: !1563)
!1563 = !{!1564, !2895, !2896}
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1562, file: !1548, line: 553, baseType: !1565, size: 64)
!1565 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !1566, line: 56, baseType: !1567)
!1566 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1567 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1568, size: 64)
!1568 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !151, line: 3371, size: 1792, elements: !1569)
!1569 = !{!1570, !1603, !1609, !1622, !1641, !1652, !1657, !1668, !1674, !1688, !1700, !1738, !2232, !2260, !2276, !2277, !2282, !2291, !2297, !2302, !2306, !2310, !2547, !2594, !2600, !2606, !2613, !2626, !2640, !2657, !2669, !2691, !2706, !2877}
!1570 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1568, file: !151, line: 3372, baseType: !1571, size: 64)
!1571 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !151, line: 360, size: 64, elements: !1572)
!1572 = !{!1573, !1574, !1575, !1576, !1577, !1578, !1579, !1580, !1581, !1582, !1583, !1584, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594, !1595, !1596, !1597, !1598, !1599, !1600, !1601, !1602}
!1573 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1571, file: !151, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1574 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !1571, file: !151, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1575 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !1571, file: !151, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1576 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !1571, file: !151, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !1571, file: !151, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1578 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !1571, file: !151, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1579 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !1571, file: !151, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !1571, file: !151, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !1571, file: !151, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !1571, file: !151, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !1571, file: !151, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !1571, file: !151, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !1571, file: !151, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !1571, file: !151, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !1571, file: !151, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !1571, file: !151, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !1571, file: !151, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !1571, file: !151, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1571, file: !151, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1571, file: !151, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1571, file: !151, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1571, file: !151, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1571, file: !151, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!1596 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1571, file: !151, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!1597 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1571, file: !151, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1571, file: !151, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !1571, file: !151, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !1571, file: !151, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !1571, file: !151, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !1571, file: !151, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1568, file: !151, line: 3373, baseType: !1604, size: 192)
!1604 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !151, line: 402, size: 192, elements: !1605)
!1605 = !{!1606, !1607, !1608}
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1604, file: !151, line: 403, baseType: !1571, size: 64)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !1604, file: !151, line: 404, baseType: !1565, size: 64, offset: 64)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1604, file: !151, line: 405, baseType: !1565, size: 64, offset: 128)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1568, file: !151, line: 3374, baseType: !1610, size: 320)
!1610 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !151, line: 1384, size: 320, elements: !1611)
!1611 = !{!1612, !1613}
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1610, file: !151, line: 1385, baseType: !1604, size: 192)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1610, file: !151, line: 1386, baseType: !1614, size: 128, offset: 192)
!1614 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !1615, line: 58, baseType: !1616)
!1615 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1616 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1615, line: 54, size: 128, elements: !1617)
!1617 = !{!1618, !1620}
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1616, file: !1615, line: 56, baseType: !1619, size: 64)
!1619 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1616, file: !1615, line: 57, baseType: !1621, size: 64, offset: 64)
!1621 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !1568, file: !151, line: 3375, baseType: !1623, size: 256)
!1623 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !151, line: 1397, size: 256, elements: !1624)
!1624 = !{!1625, !1626}
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1623, file: !151, line: 1398, baseType: !1604, size: 192)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !1623, file: !151, line: 1399, baseType: !1627, size: 64, offset: 192)
!1627 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1628, size: 64)
!1628 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !1629, line: 52, size: 256, elements: !1630)
!1629 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1630 = !{!1631, !1632, !1633, !1634, !1635, !1636, !1637}
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !1628, file: !1629, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !1628, file: !1629, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1633 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !1628, file: !1629, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1634 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !1628, file: !1629, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1628, file: !1629, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1636 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !1628, file: !1629, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1637 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !1628, file: !1629, line: 62, baseType: !1638, size: 192, offset: 64)
!1638 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1619, size: 192, elements: !1639)
!1639 = !{!1640}
!1640 = !DISubrange(count: 3)
!1641 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !1568, file: !151, line: 3376, baseType: !1642, size: 256)
!1642 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !151, line: 1408, size: 256, elements: !1643)
!1643 = !{!1644, !1645}
!1644 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1642, file: !151, line: 1409, baseType: !1604, size: 192)
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !1642, file: !151, line: 1410, baseType: !1646, size: 64, offset: 192)
!1646 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1647, size: 64)
!1647 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !1648, line: 27, size: 192, elements: !1649)
!1648 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1649 = !{!1650, !1651}
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1647, file: !1648, line: 29, baseType: !1614, size: 128)
!1651 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1647, file: !1648, line: 30, baseType: !5, size: 32, offset: 128)
!1652 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !1568, file: !151, line: 3377, baseType: !1653, size: 256)
!1653 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !151, line: 1437, size: 256, elements: !1654)
!1654 = !{!1655, !1656}
!1655 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1653, file: !151, line: 1438, baseType: !1604, size: 192)
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1653, file: !151, line: 1439, baseType: !1565, size: 64, offset: 192)
!1657 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1568, file: !151, line: 3378, baseType: !1658, size: 256)
!1658 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !151, line: 1418, size: 256, elements: !1659)
!1659 = !{!1660, !1661, !1663}
!1660 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1658, file: !151, line: 1419, baseType: !1604, size: 192)
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1658, file: !151, line: 1420, baseType: !1662, size: 32, offset: 192)
!1662 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1658, file: !151, line: 1421, baseType: !1664, size: 8, offset: 224)
!1664 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1665, size: 8, elements: !1666)
!1665 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!1666 = !{!1667}
!1667 = !DISubrange(count: 1)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !1568, file: !151, line: 3379, baseType: !1669, size: 320)
!1669 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !151, line: 1428, size: 320, elements: !1670)
!1670 = !{!1671, !1672, !1673}
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1669, file: !151, line: 1429, baseType: !1604, size: 192)
!1672 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !1669, file: !151, line: 1430, baseType: !1565, size: 64, offset: 192)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !1669, file: !151, line: 1431, baseType: !1565, size: 64, offset: 256)
!1674 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !1568, file: !151, line: 3380, baseType: !1675, size: 320)
!1675 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !151, line: 1460, size: 320, elements: !1676)
!1676 = !{!1677, !1678}
!1677 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1675, file: !151, line: 1461, baseType: !1604, size: 192)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1675, file: !151, line: 1462, baseType: !1679, size: 128, offset: 192)
!1679 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !1680, line: 31, size: 128, elements: !1681)
!1680 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1681 = !{!1682, !1686, !1687}
!1682 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1679, file: !1680, line: 32, baseType: !1683, size: 64)
!1683 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1684, size: 64)
!1684 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1685)
!1685 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !1679, file: !1680, line: 33, baseType: !7, size: 32, offset: 64)
!1687 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !1679, file: !1680, line: 34, baseType: !7, size: 32, offset: 96)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !1568, file: !151, line: 3381, baseType: !1689, size: 384)
!1689 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !151, line: 2507, size: 384, elements: !1690)
!1690 = !{!1691, !1692, !1697, !1698, !1699}
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1689, file: !151, line: 2508, baseType: !1604, size: 192)
!1692 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1689, file: !151, line: 2509, baseType: !1693, size: 32, offset: 192)
!1693 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !1694, line: 58, baseType: !1695)
!1694 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1695 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !1696, line: 44, baseType: !7)
!1696 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1697 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1689, file: !151, line: 2510, baseType: !7, size: 32, offset: 224)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1689, file: !151, line: 2511, baseType: !1565, size: 64, offset: 256)
!1699 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1689, file: !151, line: 2512, baseType: !1565, size: 64, offset: 320)
!1700 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !1568, file: !151, line: 3382, baseType: !1701, size: 896)
!1701 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !151, line: 2652, size: 896, elements: !1702)
!1702 = !{!1703, !1704, !1705, !1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726, !1727, !1728, !1729, !1730, !1731, !1732, !1733, !1734, !1735}
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1701, file: !151, line: 2653, baseType: !1689, size: 384)
!1704 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1701, file: !151, line: 2654, baseType: !1565, size: 64, offset: 384)
!1705 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1701, file: !151, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !1701, file: !151, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !1701, file: !151, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !1701, file: !151, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1701, file: !151, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !1701, file: !151, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !1701, file: !151, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !1701, file: !151, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1701, file: !151, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1701, file: !151, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1701, file: !151, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1701, file: !151, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1701, file: !151, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1701, file: !151, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1701, file: !151, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !1701, file: !151, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !1701, file: !151, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !1701, file: !151, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !1701, file: !151, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !1701, file: !151, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !1701, file: !151, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !1701, file: !151, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!1727 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !1701, file: !151, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !1701, file: !151, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!1729 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !1701, file: !151, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!1730 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1701, file: !151, line: 2703, baseType: !7, size: 32, offset: 512)
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1701, file: !151, line: 2705, baseType: !1565, size: 64, offset: 576)
!1732 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1701, file: !151, line: 2706, baseType: !1565, size: 64, offset: 640)
!1733 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1701, file: !151, line: 2707, baseType: !1565, size: 64, offset: 704)
!1734 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1701, file: !151, line: 2708, baseType: !1565, size: 64, offset: 768)
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1701, file: !151, line: 2711, baseType: !1736, size: 64, offset: 832)
!1736 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1737, size: 64)
!1737 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !151, line: 2711, flags: DIFlagFwdDecl)
!1738 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !1568, file: !151, line: 3383, baseType: !1739, size: 960)
!1739 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !151, line: 2756, size: 960, elements: !1740)
!1740 = !{!1741, !1742}
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1739, file: !151, line: 2757, baseType: !1701, size: 896)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1739, file: !151, line: 2758, baseType: !1743, size: 64, offset: 896)
!1743 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !1566, line: 50, baseType: !1744)
!1744 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1745, size: 64)
!1745 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !1746, line: 240, size: 384, elements: !1747)
!1746 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1747 = !{!1748, !1749, !1750, !1751, !1752, !1753, !1754, !1755, !1756, !1757, !1758}
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1745, file: !1746, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1745, file: !1746, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !1745, file: !1746, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !1745, file: !1746, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !1745, file: !1746, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1753 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !1745, file: !1746, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1754 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !1745, file: !1746, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1745, file: !1746, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1756 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !1745, file: !1746, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1757 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !1745, file: !1746, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1758 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !1745, file: !1746, line: 321, baseType: !1759, size: 320, offset: 64)
!1759 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !1746, line: 315, size: 320, elements: !1760)
!1760 = !{!1761, !2165, !2167, !2230, !2231}
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1759, file: !1746, line: 316, baseType: !1762, size: 64)
!1762 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1763, size: 64, elements: !1666)
!1763 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !1746, line: 183, baseType: !1764)
!1764 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !1746, line: 166, size: 64, elements: !1765)
!1765 = !{!1766, !1767, !1768, !1771, !1772, !1780, !1781, !1793, !1796, !1857, !1858, !2142, !2155, !2162}
!1766 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !1764, file: !1746, line: 168, baseType: !1662, size: 32)
!1767 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !1764, file: !1746, line: 169, baseType: !7, size: 32)
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !1764, file: !1746, line: 170, baseType: !1769, size: 64)
!1769 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1770, size: 64)
!1770 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1665)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !1764, file: !1746, line: 171, baseType: !1743, size: 64)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !1764, file: !1746, line: 172, baseType: !1773, size: 64)
!1773 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !1566, line: 53, baseType: !1774)
!1774 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1775, size: 64)
!1775 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !1746, line: 359, size: 128, elements: !1776)
!1776 = !{!1777, !1778}
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !1775, file: !1746, line: 360, baseType: !1662, size: 32)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !1775, file: !1746, line: 361, baseType: !1779, size: 64, offset: 64)
!1779 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1743, size: 64, elements: !1666)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !1764, file: !1746, line: 173, baseType: !5, size: 32)
!1781 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !1764, file: !1746, line: 174, baseType: !1782, size: 32)
!1782 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !1746, line: 133, baseType: !1783)
!1783 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1746, line: 115, size: 32, elements: !1784)
!1784 = !{!1785, !1786, !1787, !1788, !1789, !1790, !1791, !1792}
!1785 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !1783, file: !1746, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1786 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !1783, file: !1746, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !1783, file: !1746, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !1783, file: !1746, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !1783, file: !1746, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !1783, file: !1746, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !1783, file: !1746, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !1783, file: !1746, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !1764, file: !1746, line: 175, baseType: !1794, size: 64)
!1794 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1795, size: 64)
!1795 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !1746, line: 175, flags: DIFlagFwdDecl)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !1764, file: !1746, line: 176, baseType: !1797, size: 64)
!1797 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1798, size: 64)
!1798 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !1799, line: 75, size: 256, elements: !1800)
!1799 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1800 = !{!1801, !1815, !1816, !1817}
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1798, file: !1799, line: 76, baseType: !1802, size: 64)
!1802 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1803, size: 64)
!1803 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !1799, line: 68, baseType: !1804)
!1804 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !1799, line: 63, size: 320, elements: !1805)
!1805 = !{!1806, !1808, !1809, !1810}
!1806 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1804, file: !1799, line: 64, baseType: !1807, size: 64)
!1807 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1804, size: 64)
!1808 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1804, file: !1799, line: 65, baseType: !1807, size: 64, offset: 64)
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1804, file: !1799, line: 66, baseType: !7, size: 32, offset: 128)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !1804, file: !1799, line: 67, baseType: !1811, size: 128, offset: 192)
!1811 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1812, size: 128, elements: !1813)
!1812 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !1799, line: 29, baseType: !1619)
!1813 = !{!1814}
!1814 = !DISubrange(count: 2)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !1798, file: !1799, line: 77, baseType: !1802, size: 64, offset: 64)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1798, file: !1799, line: 78, baseType: !7, size: 32, offset: 128)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1798, file: !1799, line: 79, baseType: !1818, size: 64, offset: 192)
!1818 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1819, size: 64)
!1819 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !1799, line: 49, baseType: !1820)
!1820 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !1799, line: 45, size: 832, elements: !1821)
!1821 = !{!1822, !1823, !1824}
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1820, file: !1799, line: 46, baseType: !1807, size: 64)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !1820, file: !1799, line: 47, baseType: !1797, size: 64, offset: 64)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1820, file: !1799, line: 48, baseType: !1825, size: 704, offset: 128)
!1825 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !1826, line: 164, size: 704, elements: !1827)
!1826 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1827 = !{!1828, !1829, !1840, !1841, !1842, !1843, !1844, !1845, !1849, !1853, !1854, !1855, !1856}
!1828 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !1825, file: !1826, line: 166, baseType: !1621, size: 64)
!1829 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !1825, file: !1826, line: 167, baseType: !1830, size: 64, offset: 64)
!1830 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1831, size: 64)
!1831 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !1826, line: 157, size: 192, elements: !1832)
!1832 = !{!1833, !1835, !1836}
!1833 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1831, file: !1826, line: 159, baseType: !1834, size: 64)
!1834 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1665, size: 64)
!1835 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1831, file: !1826, line: 160, baseType: !1830, size: 64, offset: 64)
!1836 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !1831, file: !1826, line: 161, baseType: !1837, size: 32, offset: 128)
!1837 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1665, size: 32, elements: !1838)
!1838 = !{!1839}
!1839 = !DISubrange(count: 4)
!1840 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !1825, file: !1826, line: 168, baseType: !1834, size: 64, offset: 128)
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1825, file: !1826, line: 169, baseType: !1834, size: 64, offset: 192)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !1825, file: !1826, line: 170, baseType: !1834, size: 64, offset: 256)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !1825, file: !1826, line: 171, baseType: !1621, size: 64, offset: 320)
!1844 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !1825, file: !1826, line: 172, baseType: !1662, size: 32, offset: 384)
!1845 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !1825, file: !1826, line: 176, baseType: !1846, size: 64, offset: 448)
!1846 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1847, size: 64)
!1847 = !DISubroutineType(types: !1848)
!1848 = !{!1830, !1546, !1621}
!1849 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !1825, file: !1826, line: 177, baseType: !1850, size: 64, offset: 512)
!1850 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1851, size: 64)
!1851 = !DISubroutineType(types: !1852)
!1852 = !{null, !1546, !1830}
!1853 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !1825, file: !1826, line: 178, baseType: !1546, size: 64, offset: 576)
!1854 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !1825, file: !1826, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!1855 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !1825, file: !1826, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!1856 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !1825, file: !1826, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !1764, file: !1746, line: 177, baseType: !1565, size: 64)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !1764, file: !1746, line: 178, baseType: !1859, size: 64)
!1859 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1860, size: 64)
!1860 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !135, line: 217, size: 832, elements: !1861)
!1861 = !{!1862, !2107, !2108, !2109, !2112, !2116, !2117, !2118, !2136, !2137, !2138, !2139, !2140, !2141}
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !1860, file: !135, line: 219, baseType: !1863, size: 64)
!1863 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1864, size: 64)
!1864 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !135, line: 151, baseType: !1865)
!1865 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !135, line: 151, size: 128, elements: !1866)
!1866 = !{!1867}
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1865, file: !135, line: 151, baseType: !1868, size: 128)
!1868 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !135, line: 150, baseType: !1869)
!1869 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !135, line: 150, size: 128, elements: !1870)
!1870 = !{!1871, !1872, !1873}
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1869, file: !135, line: 150, baseType: !7, size: 32)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1869, file: !135, line: 150, baseType: !7, size: 32, offset: 32)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1869, file: !135, line: 150, baseType: !1874, size: 64, offset: 64)
!1874 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1875, size: 64, elements: !1666)
!1875 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !1566, line: 108, baseType: !1876)
!1876 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1877, size: 64)
!1877 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !135, line: 122, size: 512, elements: !1878)
!1878 = !{!1879, !1880, !1881, !2099, !2100, !2101, !2102, !2103, !2104, !2105}
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !1877, file: !135, line: 124, baseType: !1859, size: 64)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !1877, file: !135, line: 125, baseType: !1859, size: 64, offset: 64)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !1877, file: !135, line: 131, baseType: !1882, size: 64, offset: 128)
!1882 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !135, line: 128, size: 64, elements: !1883)
!1883 = !{!1884, !2098}
!1884 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !1882, file: !135, line: 129, baseType: !1885, size: 64)
!1885 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !1566, line: 66, baseType: !1886)
!1886 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1887, size: 64)
!1887 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !378, line: 143, size: 192, elements: !1888)
!1888 = !{!1889, !2096, !2097}
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1887, file: !378, line: 145, baseType: !1890, size: 64)
!1890 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq_node", file: !1566, line: 69, baseType: !1891)
!1891 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1892, size: 64)
!1892 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_node_d", file: !378, line: 136, size: 192, elements: !1893)
!1893 = !{!1894, !2094, !2095}
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1892, file: !378, line: 137, baseType: !1895, size: 64)
!1895 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !1566, line: 58, baseType: !1896)
!1896 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1897, size: 64)
!1897 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !378, line: 737, size: 768, elements: !1898)
!1898 = !{!1899, !1916, !1949, !1955, !1960, !1965, !1972, !1978, !1984, !1989, !2003, !2008, !2014, !2019, !2029, !2034, !2052, !2059, !2066, !2072, !2077, !2083, !2089}
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1897, file: !378, line: 738, baseType: !1900, size: 256)
!1900 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_base", file: !378, line: 271, size: 256, elements: !1901)
!1901 = !{!1902, !1903, !1904, !1905, !1906, !1907, !1908, !1909, !1910, !1911, !1912, !1913, !1914, !1915}
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1900, file: !378, line: 274, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "no_warning", scope: !1900, file: !378, line: 277, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1900, file: !378, line: 281, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "nontemporal_move", scope: !1900, file: !378, line: 284, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "plf", scope: !1900, file: !378, line: 291, baseType: !7, size: 2, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "modified", scope: !1900, file: !378, line: 295, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "has_volatile_ops", scope: !1900, file: !378, line: 298, baseType: !7, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1909 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !1900, file: !378, line: 301, baseType: !7, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1900, file: !378, line: 307, baseType: !7, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1911 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1900, file: !378, line: 312, baseType: !7, size: 32, offset: 32)
!1912 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !1900, file: !378, line: 316, baseType: !1693, size: 32, offset: 64)
!1913 = !DIDerivedType(tag: DW_TAG_member, name: "num_ops", scope: !1900, file: !378, line: 319, baseType: !7, size: 32, offset: 96)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !1900, file: !378, line: 323, baseType: !1859, size: 64, offset: 128)
!1915 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1900, file: !378, line: 327, baseType: !1565, size: 64, offset: 192)
!1916 = !DIDerivedType(tag: DW_TAG_member, name: "gsops", scope: !1897, file: !378, line: 739, baseType: !1917, size: 448)
!1917 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops", file: !378, line: 350, size: 448, elements: !1918)
!1918 = !{!1919, !1947}
!1919 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1917, file: !378, line: 353, baseType: !1920, size: 384)
!1920 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops_base", file: !378, line: 333, size: 384, elements: !1921)
!1921 = !{!1922, !1923, !1930}
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1920, file: !378, line: 336, baseType: !1900, size: 256)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "def_ops", scope: !1920, file: !378, line: 343, baseType: !1924, size: 64, offset: 256)
!1924 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1925, size: 64)
!1925 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "def_optype_d", file: !439, line: 37, size: 128, elements: !1926)
!1926 = !{!1927, !1928}
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1925, file: !439, line: 39, baseType: !1924, size: 64)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "def_ptr", scope: !1925, file: !439, line: 40, baseType: !1929, size: 64, offset: 64)
!1929 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1565, size: 64)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "use_ops", scope: !1920, file: !378, line: 344, baseType: !1931, size: 64, offset: 320)
!1931 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1932, size: 64)
!1932 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "use_optype_d", file: !439, line: 45, size: 320, elements: !1933)
!1933 = !{!1934, !1935}
!1934 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1932, file: !439, line: 47, baseType: !1931, size: 64)
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "use_ptr", scope: !1932, file: !439, line: 48, baseType: !1936, size: 256, offset: 64)
!1936 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !151, line: 1883, size: 256, elements: !1937)
!1937 = !{!1938, !1940, !1941, !1946}
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1936, file: !151, line: 1884, baseType: !1939, size: 64)
!1939 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1936, size: 64)
!1940 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1936, file: !151, line: 1885, baseType: !1939, size: 64, offset: 64)
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !1936, file: !151, line: 1891, baseType: !1942, size: 64, offset: 128)
!1942 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1936, file: !151, line: 1891, size: 64, elements: !1943)
!1943 = !{!1944, !1945}
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1942, file: !151, line: 1891, baseType: !1895, size: 64)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1942, file: !151, line: 1891, baseType: !1565, size: 64)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !1936, file: !151, line: 1892, baseType: !1929, size: 64, offset: 192)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1917, file: !378, line: 359, baseType: !1948, size: 64, offset: 384)
!1948 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1565, size: 64, elements: !1666)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "gsmembase", scope: !1897, file: !378, line: 740, baseType: !1950, size: 512)
!1950 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops_base", file: !378, line: 365, size: 512, elements: !1951)
!1951 = !{!1952, !1953, !1954}
!1952 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1950, file: !378, line: 368, baseType: !1920, size: 384)
!1953 = !DIDerivedType(tag: DW_TAG_member, name: "vdef", scope: !1950, file: !378, line: 373, baseType: !1565, size: 64, offset: 384)
!1954 = !DIDerivedType(tag: DW_TAG_member, name: "vuse", scope: !1950, file: !378, line: 374, baseType: !1565, size: 64, offset: 448)
!1955 = !DIDerivedType(tag: DW_TAG_member, name: "gsmem", scope: !1897, file: !378, line: 741, baseType: !1956, size: 576)
!1956 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops", file: !378, line: 380, size: 576, elements: !1957)
!1957 = !{!1958, !1959}
!1958 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1956, file: !378, line: 383, baseType: !1950, size: 512)
!1959 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1956, file: !378, line: 389, baseType: !1948, size: 64, offset: 512)
!1960 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1897, file: !378, line: 742, baseType: !1961, size: 320)
!1961 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp", file: !378, line: 395, size: 320, elements: !1962)
!1962 = !{!1963, !1964}
!1963 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1961, file: !378, line: 397, baseType: !1900, size: 256)
!1964 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1961, file: !378, line: 400, baseType: !1885, size: 64, offset: 256)
!1965 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_bind", scope: !1897, file: !378, line: 743, baseType: !1966, size: 448)
!1966 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_bind", file: !378, line: 406, size: 448, elements: !1967)
!1967 = !{!1968, !1969, !1970, !1971}
!1968 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1966, file: !378, line: 408, baseType: !1900, size: 256)
!1969 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1966, file: !378, line: 412, baseType: !1565, size: 64, offset: 256)
!1970 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1966, file: !378, line: 420, baseType: !1565, size: 64, offset: 320)
!1971 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1966, file: !378, line: 423, baseType: !1885, size: 64, offset: 384)
!1972 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_catch", scope: !1897, file: !378, line: 744, baseType: !1973, size: 384)
!1973 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_catch", file: !378, line: 429, size: 384, elements: !1974)
!1974 = !{!1975, !1976, !1977}
!1975 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1973, file: !378, line: 431, baseType: !1900, size: 256)
!1976 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1973, file: !378, line: 434, baseType: !1565, size: 64, offset: 256)
!1977 = !DIDerivedType(tag: DW_TAG_member, name: "handler", scope: !1973, file: !378, line: 437, baseType: !1885, size: 64, offset: 320)
!1978 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_filter", scope: !1897, file: !378, line: 745, baseType: !1979, size: 384)
!1979 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_filter", file: !378, line: 443, size: 384, elements: !1980)
!1980 = !{!1981, !1982, !1983}
!1981 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1979, file: !378, line: 445, baseType: !1900, size: 256)
!1982 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1979, file: !378, line: 449, baseType: !1565, size: 64, offset: 256)
!1983 = !DIDerivedType(tag: DW_TAG_member, name: "failure", scope: !1979, file: !378, line: 453, baseType: !1885, size: 64, offset: 320)
!1984 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_mnt", scope: !1897, file: !378, line: 746, baseType: !1985, size: 320)
!1985 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_mnt", file: !378, line: 459, size: 320, elements: !1986)
!1986 = !{!1987, !1988}
!1987 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1985, file: !378, line: 461, baseType: !1900, size: 256)
!1988 = !DIDerivedType(tag: DW_TAG_member, name: "fndecl", scope: !1985, file: !378, line: 464, baseType: !1565, size: 64, offset: 256)
!1989 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_phi", scope: !1897, file: !378, line: 747, baseType: !1990, size: 768)
!1990 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_phi", file: !378, line: 469, size: 768, elements: !1991)
!1991 = !{!1992, !1993, !1994, !1995, !1996}
!1992 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1990, file: !378, line: 471, baseType: !1900, size: 256)
!1993 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !1990, file: !378, line: 474, baseType: !7, size: 32, offset: 256)
!1994 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !1990, file: !378, line: 475, baseType: !7, size: 32, offset: 288)
!1995 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1990, file: !378, line: 478, baseType: !1565, size: 64, offset: 320)
!1996 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !1990, file: !378, line: 481, baseType: !1997, size: 384, offset: 384)
!1997 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1998, size: 384, elements: !1666)
!1998 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "phi_arg_d", file: !151, line: 1917, size: 384, elements: !1999)
!1999 = !{!2000, !2001, !2002}
!2000 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !1998, file: !151, line: 1920, baseType: !1936, size: 256)
!2001 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !1998, file: !151, line: 1921, baseType: !1565, size: 64, offset: 256)
!2002 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1998, file: !151, line: 1922, baseType: !1693, size: 32, offset: 320)
!2003 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_ctrl", scope: !1897, file: !378, line: 748, baseType: !2004, size: 320)
!2004 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_ctrl", file: !378, line: 487, size: 320, elements: !2005)
!2005 = !{!2006, !2007}
!2006 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2004, file: !378, line: 490, baseType: !1900, size: 256)
!2007 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !2004, file: !378, line: 494, baseType: !1662, size: 32, offset: 256)
!2008 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_try", scope: !1897, file: !378, line: 749, baseType: !2009, size: 384)
!2009 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_try", file: !378, line: 500, size: 384, elements: !2010)
!2010 = !{!2011, !2012, !2013}
!2011 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2009, file: !378, line: 502, baseType: !1900, size: 256)
!2012 = !DIDerivedType(tag: DW_TAG_member, name: "eval", scope: !2009, file: !378, line: 506, baseType: !1885, size: 64, offset: 256)
!2013 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !2009, file: !378, line: 510, baseType: !1885, size: 64, offset: 320)
!2014 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_wce", scope: !1897, file: !378, line: 750, baseType: !2015, size: 320)
!2015 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_wce", file: !378, line: 529, size: 320, elements: !2016)
!2016 = !{!2017, !2018}
!2017 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2015, file: !378, line: 531, baseType: !1900, size: 256)
!2018 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !2015, file: !378, line: 540, baseType: !1885, size: 64, offset: 256)
!2019 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_asm", scope: !1897, file: !378, line: 751, baseType: !2020, size: 704)
!2020 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_asm", file: !378, line: 546, size: 704, elements: !2021)
!2021 = !{!2022, !2023, !2024, !2025, !2026, !2027, !2028}
!2022 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !2020, file: !378, line: 549, baseType: !1950, size: 512)
!2023 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !2020, file: !378, line: 553, baseType: !1769, size: 64, offset: 512)
!2024 = !DIDerivedType(tag: DW_TAG_member, name: "ni", scope: !2020, file: !378, line: 557, baseType: !1685, size: 8, offset: 576)
!2025 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !2020, file: !378, line: 558, baseType: !1685, size: 8, offset: 584)
!2026 = !DIDerivedType(tag: DW_TAG_member, name: "nc", scope: !2020, file: !378, line: 559, baseType: !1685, size: 8, offset: 592)
!2027 = !DIDerivedType(tag: DW_TAG_member, name: "nl", scope: !2020, file: !378, line: 560, baseType: !1685, size: 8, offset: 600)
!2028 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2020, file: !378, line: 566, baseType: !1948, size: 64, offset: 640)
!2029 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_critical", scope: !1897, file: !378, line: 752, baseType: !2030, size: 384)
!2030 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_critical", file: !378, line: 571, size: 384, elements: !2031)
!2031 = !{!2032, !2033}
!2032 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2030, file: !378, line: 573, baseType: !1961, size: 320)
!2033 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2030, file: !378, line: 577, baseType: !1565, size: 64, offset: 320)
!2034 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_for", scope: !1897, file: !378, line: 753, baseType: !2035, size: 576)
!2035 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_for", file: !378, line: 600, size: 576, elements: !2036)
!2036 = !{!2037, !2038, !2039, !2042, !2051}
!2037 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2035, file: !378, line: 602, baseType: !1961, size: 320)
!2038 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2035, file: !378, line: 605, baseType: !1565, size: 64, offset: 320)
!2039 = !DIDerivedType(tag: DW_TAG_member, name: "collapse", scope: !2035, file: !378, line: 609, baseType: !2040, size: 64, offset: 384)
!2040 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !2041, line: 46, baseType: !1619)
!2041 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!2042 = !DIDerivedType(tag: DW_TAG_member, name: "iter", scope: !2035, file: !378, line: 612, baseType: !2043, size: 64, offset: 448)
!2043 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2044, size: 64)
!2044 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_omp_for_iter", file: !378, line: 581, size: 320, elements: !2045)
!2045 = !{!2046, !2047, !2048, !2049, !2050}
!2046 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !2044, file: !378, line: 583, baseType: !183, size: 32)
!2047 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2044, file: !378, line: 586, baseType: !1565, size: 64, offset: 64)
!2048 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !2044, file: !378, line: 589, baseType: !1565, size: 64, offset: 128)
!2049 = !DIDerivedType(tag: DW_TAG_member, name: "final", scope: !2044, file: !378, line: 592, baseType: !1565, size: 64, offset: 192)
!2050 = !DIDerivedType(tag: DW_TAG_member, name: "incr", scope: !2044, file: !378, line: 595, baseType: !1565, size: 64, offset: 256)
!2051 = !DIDerivedType(tag: DW_TAG_member, name: "pre_body", scope: !2035, file: !378, line: 616, baseType: !1885, size: 64, offset: 512)
!2052 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_parallel", scope: !1897, file: !378, line: 754, baseType: !2053, size: 512)
!2053 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_parallel", file: !378, line: 622, size: 512, elements: !2054)
!2054 = !{!2055, !2056, !2057, !2058}
!2055 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2053, file: !378, line: 624, baseType: !1961, size: 320)
!2056 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2053, file: !378, line: 628, baseType: !1565, size: 64, offset: 320)
!2057 = !DIDerivedType(tag: DW_TAG_member, name: "child_fn", scope: !2053, file: !378, line: 632, baseType: !1565, size: 64, offset: 384)
!2058 = !DIDerivedType(tag: DW_TAG_member, name: "data_arg", scope: !2053, file: !378, line: 636, baseType: !1565, size: 64, offset: 448)
!2059 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_task", scope: !1897, file: !378, line: 755, baseType: !2060, size: 704)
!2060 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_task", file: !378, line: 642, size: 704, elements: !2061)
!2061 = !{!2062, !2063, !2064, !2065}
!2062 = !DIDerivedType(tag: DW_TAG_member, name: "par", scope: !2060, file: !378, line: 644, baseType: !2053, size: 512)
!2063 = !DIDerivedType(tag: DW_TAG_member, name: "copy_fn", scope: !2060, file: !378, line: 648, baseType: !1565, size: 64, offset: 512)
!2064 = !DIDerivedType(tag: DW_TAG_member, name: "arg_size", scope: !2060, file: !378, line: 652, baseType: !1565, size: 64, offset: 576)
!2065 = !DIDerivedType(tag: DW_TAG_member, name: "arg_align", scope: !2060, file: !378, line: 653, baseType: !1565, size: 64, offset: 640)
!2066 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_sections", scope: !1897, file: !378, line: 756, baseType: !2067, size: 448)
!2067 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_sections", file: !378, line: 663, size: 448, elements: !2068)
!2068 = !{!2069, !2070, !2071}
!2069 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2067, file: !378, line: 665, baseType: !1961, size: 320)
!2070 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2067, file: !378, line: 668, baseType: !1565, size: 64, offset: 320)
!2071 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !2067, file: !378, line: 673, baseType: !1565, size: 64, offset: 384)
!2072 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_single", scope: !1897, file: !378, line: 757, baseType: !2073, size: 384)
!2073 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_single", file: !378, line: 694, size: 384, elements: !2074)
!2074 = !{!2075, !2076}
!2075 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2073, file: !378, line: 696, baseType: !1961, size: 320)
!2076 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2073, file: !378, line: 699, baseType: !1565, size: 64, offset: 320)
!2077 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_continue", scope: !1897, file: !378, line: 758, baseType: !2078, size: 384)
!2078 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_continue", file: !378, line: 681, size: 384, elements: !2079)
!2079 = !{!2080, !2081, !2082}
!2080 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2078, file: !378, line: 683, baseType: !1900, size: 256)
!2081 = !DIDerivedType(tag: DW_TAG_member, name: "control_def", scope: !2078, file: !378, line: 686, baseType: !1565, size: 64, offset: 256)
!2082 = !DIDerivedType(tag: DW_TAG_member, name: "control_use", scope: !2078, file: !378, line: 689, baseType: !1565, size: 64, offset: 320)
!2083 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_load", scope: !1897, file: !378, line: 759, baseType: !2084, size: 384)
!2084 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_load", file: !378, line: 707, size: 384, elements: !2085)
!2085 = !{!2086, !2087, !2088}
!2086 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2084, file: !378, line: 709, baseType: !1900, size: 256)
!2087 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !2084, file: !378, line: 712, baseType: !1565, size: 64, offset: 256)
!2088 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !2084, file: !378, line: 712, baseType: !1565, size: 64, offset: 320)
!2089 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_store", scope: !1897, file: !378, line: 760, baseType: !2090, size: 320)
!2090 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_store", file: !378, line: 718, size: 320, elements: !2091)
!2091 = !{!2092, !2093}
!2092 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2090, file: !378, line: 720, baseType: !1900, size: 256)
!2093 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2090, file: !378, line: 723, baseType: !1565, size: 64, offset: 256)
!2094 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1892, file: !378, line: 138, baseType: !1891, size: 64, offset: 64)
!2095 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1892, file: !378, line: 139, baseType: !1891, size: 64, offset: 128)
!2096 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !1887, file: !378, line: 146, baseType: !1890, size: 64, offset: 64)
!2097 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1887, file: !378, line: 152, baseType: !1885, size: 64, offset: 128)
!2098 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !1882, file: !135, line: 130, baseType: !1743, size: 64)
!2099 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1877, file: !135, line: 134, baseType: !1546, size: 64, offset: 192)
!2100 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !1877, file: !135, line: 137, baseType: !1565, size: 64, offset: 256)
!2101 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !1877, file: !135, line: 138, baseType: !1693, size: 32, offset: 320)
!2102 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !1877, file: !135, line: 142, baseType: !7, size: 32, offset: 352)
!2103 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1877, file: !135, line: 144, baseType: !1662, size: 32, offset: 384)
!2104 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !1877, file: !135, line: 145, baseType: !1662, size: 32, offset: 416)
!2105 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1877, file: !135, line: 146, baseType: !2106, size: 64, offset: 448)
!2106 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !135, line: 119, baseType: !1621)
!2107 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !1860, file: !135, line: 220, baseType: !1863, size: 64, offset: 64)
!2108 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1860, file: !135, line: 223, baseType: !1546, size: 64, offset: 128)
!2109 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !1860, file: !135, line: 226, baseType: !2110, size: 64, offset: 192)
!2110 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2111, size: 64)
!2111 = !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !135, line: 185, flags: DIFlagFwdDecl)
!2112 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !1860, file: !135, line: 229, baseType: !2113, size: 128, offset: 256)
!2113 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2114, size: 128, elements: !1813)
!2114 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2115, size: 64)
!2115 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !135, line: 229, flags: DIFlagFwdDecl)
!2116 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !1860, file: !135, line: 232, baseType: !1859, size: 64, offset: 384)
!2117 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !1860, file: !135, line: 233, baseType: !1859, size: 64, offset: 448)
!2118 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !1860, file: !135, line: 238, baseType: !2119, size: 64, offset: 512)
!2119 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !135, line: 235, size: 64, elements: !2120)
!2120 = !{!2121, !2127}
!2121 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !2119, file: !135, line: 236, baseType: !2122, size: 64)
!2122 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2123, size: 64)
!2123 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !135, line: 273, size: 128, elements: !2124)
!2124 = !{!2125, !2126}
!2125 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !2123, file: !135, line: 275, baseType: !1885, size: 64)
!2126 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !2123, file: !135, line: 278, baseType: !1885, size: 64, offset: 64)
!2127 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !2119, file: !135, line: 237, baseType: !2128, size: 64)
!2128 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2129, size: 64)
!2129 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !135, line: 259, size: 320, elements: !2130)
!2130 = !{!2131, !2132, !2133, !2134, !2135}
!2131 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !2129, file: !135, line: 261, baseType: !1743, size: 64)
!2132 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !2129, file: !135, line: 262, baseType: !1743, size: 64, offset: 64)
!2133 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !2129, file: !135, line: 266, baseType: !1743, size: 64, offset: 128)
!2134 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !2129, file: !135, line: 267, baseType: !1743, size: 64, offset: 192)
!2135 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !2129, file: !135, line: 270, baseType: !1662, size: 32, offset: 256)
!2136 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1860, file: !135, line: 241, baseType: !2106, size: 64, offset: 576)
!2137 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1860, file: !135, line: 244, baseType: !1662, size: 32, offset: 640)
!2138 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !1860, file: !135, line: 247, baseType: !1662, size: 32, offset: 672)
!2139 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !1860, file: !135, line: 250, baseType: !1662, size: 32, offset: 704)
!2140 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !1860, file: !135, line: 253, baseType: !1662, size: 32, offset: 736)
!2141 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1860, file: !135, line: 256, baseType: !1662, size: 32, offset: 768)
!2142 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !1764, file: !1746, line: 179, baseType: !2143, size: 64)
!2143 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2144, size: 64)
!2144 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !1746, line: 150, baseType: !2145)
!2145 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !1746, line: 142, size: 320, elements: !2146)
!2146 = !{!2147, !2148, !2149, !2150, !2153, !2154}
!2147 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !2145, file: !1746, line: 144, baseType: !1565, size: 64)
!2148 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2145, file: !1746, line: 145, baseType: !1743, size: 64, offset: 64)
!2149 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2145, file: !1746, line: 146, baseType: !1743, size: 64, offset: 128)
!2150 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !2145, file: !1746, line: 147, baseType: !2151, size: 32, offset: 192)
!2151 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !2152, line: 31, baseType: !1662)
!2152 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2153 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2145, file: !1746, line: 148, baseType: !7, size: 32, offset: 224)
!2154 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !2145, file: !1746, line: 149, baseType: !1685, size: 8, offset: 256)
!2155 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !1764, file: !1746, line: 180, baseType: !2156, size: 64)
!2156 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2157, size: 64)
!2157 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !1746, line: 162, baseType: !2158)
!2158 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !1746, line: 159, size: 128, elements: !2159)
!2159 = !{!2160, !2161}
!2160 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2158, file: !1746, line: 160, baseType: !1565, size: 64)
!2161 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2158, file: !1746, line: 161, baseType: !1621, size: 64, offset: 64)
!2162 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !1764, file: !1746, line: 181, baseType: !2163, size: 64)
!2163 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2164, size: 64)
!2164 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !1746, line: 181, flags: DIFlagFwdDecl)
!2165 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !1759, file: !1746, line: 317, baseType: !2166, size: 64)
!2166 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1621, size: 64, elements: !1666)
!2167 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !1759, file: !1746, line: 318, baseType: !2168, size: 320)
!2168 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !1746, line: 188, size: 320, elements: !2169)
!2169 = !{!2170, !2172, !2229}
!2170 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !2168, file: !1746, line: 190, baseType: !2171, size: 192)
!2171 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1763, size: 192, elements: !1639)
!2172 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2168, file: !1746, line: 193, baseType: !2173, size: 64, offset: 192)
!2173 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2174, size: 64)
!2174 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !1746, line: 206, size: 320, elements: !2175)
!2175 = !{!2176, !2214, !2215, !2216, !2228}
!2176 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !2174, file: !1746, line: 208, baseType: !2177, size: 64)
!2177 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2178, size: 64)
!2178 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !1566, line: 62, baseType: !2179)
!2179 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !2180, line: 538, size: 256, elements: !2181)
!2180 = !DIFile(filename: "./output.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2181 = !{!2182, !2186, !2192, !2205}
!2182 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2179, file: !2180, line: 539, baseType: !2183, size: 32)
!2183 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "section_common", file: !2180, line: 482, size: 32, elements: !2184)
!2184 = !{!2185}
!2185 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2183, file: !2180, line: 484, baseType: !7, size: 32)
!2186 = !DIDerivedType(tag: DW_TAG_member, name: "named", scope: !2179, file: !2180, line: 540, baseType: !2187, size: 192)
!2187 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "named_section", file: !2180, line: 488, size: 192, elements: !2188)
!2188 = !{!2189, !2190, !2191}
!2189 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2187, file: !2180, line: 489, baseType: !2183, size: 32)
!2190 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2187, file: !2180, line: 492, baseType: !1769, size: 64, offset: 64)
!2191 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2187, file: !2180, line: 496, baseType: !1565, size: 64, offset: 128)
!2192 = !DIDerivedType(tag: DW_TAG_member, name: "unnamed", scope: !2179, file: !2180, line: 541, baseType: !2193, size: 256)
!2193 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "unnamed_section", file: !2180, line: 504, size: 256, elements: !2194)
!2194 = !{!2195, !2196, !2203, !2204}
!2195 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2193, file: !2180, line: 505, baseType: !2183, size: 32)
!2196 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !2193, file: !2180, line: 509, baseType: !2197, size: 64, offset: 64)
!2197 = !DIDerivedType(tag: DW_TAG_typedef, name: "unnamed_section_callback", file: !2180, line: 501, baseType: !2198)
!2198 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2199, size: 64)
!2199 = !DISubroutineType(types: !2200)
!2200 = !{null, !2201}
!2201 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2202, size: 64)
!2202 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!2203 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !2193, file: !2180, line: 510, baseType: !2201, size: 64, offset: 128)
!2204 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2193, file: !2180, line: 513, baseType: !2177, size: 64, offset: 192)
!2205 = !DIDerivedType(tag: DW_TAG_member, name: "noswitch", scope: !2179, file: !2180, line: 542, baseType: !2206, size: 128)
!2206 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "noswitch_section", file: !2180, line: 530, size: 128, elements: !2207)
!2207 = !{!2208, !2209}
!2208 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2206, file: !2180, line: 531, baseType: !2183, size: 32)
!2209 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !2206, file: !2180, line: 534, baseType: !2210, size: 64, offset: 64)
!2210 = !DIDerivedType(tag: DW_TAG_typedef, name: "noswitch_section_callback", file: !2180, line: 525, baseType: !2211)
!2211 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2212, size: 64)
!2212 = !DISubroutineType(types: !2213)
!2213 = !{!1685, !1565, !1769, !1619, !1619}
!2214 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !2174, file: !1746, line: 211, baseType: !7, size: 32, offset: 64)
!2215 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2174, file: !1746, line: 214, baseType: !1621, size: 64, offset: 128)
!2216 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !2174, file: !1746, line: 224, baseType: !2217, size: 64, offset: 192)
!2217 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2218, size: 64)
!2218 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !1746, line: 202, baseType: !2219)
!2219 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !1746, line: 202, size: 128, elements: !2220)
!2220 = !{!2221}
!2221 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2219, file: !1746, line: 202, baseType: !2222, size: 128)
!2222 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !1746, line: 200, baseType: !2223)
!2223 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !1746, line: 200, size: 128, elements: !2224)
!2224 = !{!2225, !2226, !2227}
!2225 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2223, file: !1746, line: 200, baseType: !7, size: 32)
!2226 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2223, file: !1746, line: 200, baseType: !7, size: 32, offset: 32)
!2227 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2223, file: !1746, line: 200, baseType: !1779, size: 64, offset: 64)
!2228 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !2174, file: !1746, line: 234, baseType: !2217, size: 64, offset: 256)
!2229 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2168, file: !1746, line: 197, baseType: !1621, size: 64, offset: 256)
!2230 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !1759, file: !1746, line: 319, baseType: !1628, size: 256)
!2231 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !1759, file: !1746, line: 320, baseType: !1647, size: 192)
!2232 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !1568, file: !151, line: 3384, baseType: !2233, size: 1472)
!2233 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !151, line: 3114, size: 1472, elements: !2234)
!2234 = !{!2235, !2256, !2257, !2258, !2259}
!2235 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2233, file: !151, line: 3115, baseType: !2236, size: 1216)
!2236 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !151, line: 2984, size: 1216, elements: !2237)
!2237 = !{!2238, !2239, !2240, !2241, !2242, !2243, !2244, !2245, !2246, !2247, !2248, !2249, !2250, !2251, !2252, !2253, !2254, !2255}
!2238 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2236, file: !151, line: 2985, baseType: !1739, size: 960)
!2239 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !2236, file: !151, line: 2986, baseType: !1565, size: 64, offset: 960)
!2240 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !2236, file: !151, line: 2987, baseType: !1565, size: 64, offset: 1024)
!2241 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !2236, file: !151, line: 2988, baseType: !1565, size: 64, offset: 1088)
!2242 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !2236, file: !151, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!2243 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !2236, file: !151, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!2244 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !2236, file: !151, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!2245 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !2236, file: !151, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!2246 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !2236, file: !151, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!2247 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !2236, file: !151, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!2248 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !2236, file: !151, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!2249 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !2236, file: !151, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!2250 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !2236, file: !151, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!2251 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !2236, file: !151, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!2252 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !2236, file: !151, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!2253 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !2236, file: !151, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!2254 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !2236, file: !151, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!2255 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !2236, file: !151, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!2256 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !2233, file: !151, line: 3117, baseType: !1565, size: 64, offset: 1216)
!2257 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !2233, file: !151, line: 3119, baseType: !1565, size: 64, offset: 1280)
!2258 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !2233, file: !151, line: 3121, baseType: !1565, size: 64, offset: 1344)
!2259 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !2233, file: !151, line: 3123, baseType: !1565, size: 64, offset: 1408)
!2260 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !1568, file: !151, line: 3385, baseType: !2261, size: 1088)
!2261 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !151, line: 2874, size: 1088, elements: !2262)
!2262 = !{!2263, !2264, !2265}
!2263 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2261, file: !151, line: 2875, baseType: !1739, size: 960)
!2264 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !2261, file: !151, line: 2876, baseType: !1743, size: 64, offset: 960)
!2265 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2261, file: !151, line: 2877, baseType: !2266, size: 64, offset: 1024)
!2266 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2267, size: 64)
!2267 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !1548, line: 172, size: 128, elements: !2268)
!2268 = !{!2269, !2270, !2271, !2272, !2273, !2274, !2275}
!2269 = !DIDerivedType(tag: DW_TAG_member, name: "base_var_processed", scope: !2267, file: !1548, line: 174, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!2270 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !2267, file: !1548, line: 178, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!2271 = !DIDerivedType(tag: DW_TAG_member, name: "need_phi_state", scope: !2267, file: !1548, line: 183, baseType: !7, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!2272 = !DIDerivedType(tag: DW_TAG_member, name: "is_heapvar", scope: !2267, file: !1548, line: 187, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!2273 = !DIDerivedType(tag: DW_TAG_member, name: "noalias_state", scope: !2267, file: !1548, line: 192, baseType: !7, size: 2, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!2274 = !DIDerivedType(tag: DW_TAG_member, name: "base_index", scope: !2267, file: !1548, line: 195, baseType: !7, size: 32, offset: 32)
!2275 = !DIDerivedType(tag: DW_TAG_member, name: "current_def", scope: !2267, file: !1548, line: 199, baseType: !1565, size: 64, offset: 64)
!2276 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !1568, file: !151, line: 3386, baseType: !2236, size: 1216)
!2277 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !1568, file: !151, line: 3387, baseType: !2278, size: 1280)
!2278 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !151, line: 3093, size: 1280, elements: !2279)
!2279 = !{!2280, !2281}
!2280 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2278, file: !151, line: 3094, baseType: !2236, size: 1216)
!2281 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2278, file: !151, line: 3095, baseType: !2266, size: 64, offset: 1216)
!2282 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !1568, file: !151, line: 3388, baseType: !2283, size: 1216)
!2283 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !151, line: 2824, size: 1216, elements: !2284)
!2284 = !{!2285, !2286, !2287, !2288, !2289, !2290}
!2285 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2283, file: !151, line: 2825, baseType: !1701, size: 896)
!2286 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2283, file: !151, line: 2827, baseType: !1565, size: 64, offset: 896)
!2287 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !2283, file: !151, line: 2828, baseType: !1565, size: 64, offset: 960)
!2288 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !2283, file: !151, line: 2829, baseType: !1565, size: 64, offset: 1024)
!2289 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !2283, file: !151, line: 2830, baseType: !1565, size: 64, offset: 1088)
!2290 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !2283, file: !151, line: 2831, baseType: !1565, size: 64, offset: 1152)
!2291 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !1568, file: !151, line: 3389, baseType: !2292, size: 1024)
!2292 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !151, line: 2850, size: 1024, elements: !2293)
!2293 = !{!2294, !2295, !2296}
!2294 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2292, file: !151, line: 2851, baseType: !1739, size: 960)
!2295 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !2292, file: !151, line: 2852, baseType: !1662, size: 32, offset: 960)
!2296 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !2292, file: !151, line: 2853, baseType: !1662, size: 32, offset: 992)
!2297 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !1568, file: !151, line: 3390, baseType: !2298, size: 1024)
!2298 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !151, line: 2857, size: 1024, elements: !2299)
!2299 = !{!2300, !2301}
!2300 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2298, file: !151, line: 2858, baseType: !1739, size: 960)
!2301 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2298, file: !151, line: 2859, baseType: !2266, size: 64, offset: 960)
!2302 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !1568, file: !151, line: 3391, baseType: !2303, size: 960)
!2303 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !151, line: 2862, size: 960, elements: !2304)
!2304 = !{!2305}
!2305 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2303, file: !151, line: 2863, baseType: !1739, size: 960)
!2306 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !1568, file: !151, line: 3392, baseType: !2307, size: 1472)
!2307 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !151, line: 3304, size: 1472, elements: !2308)
!2308 = !{!2309}
!2309 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2307, file: !151, line: 3305, baseType: !2233, size: 1472)
!2310 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !1568, file: !151, line: 3393, baseType: !2311, size: 1792)
!2311 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !151, line: 3248, size: 1792, elements: !2312)
!2312 = !{!2313, !2314, !2526, !2527, !2528, !2529, !2530, !2531, !2532, !2533, !2534, !2535, !2536, !2537, !2538, !2539, !2540, !2541, !2542, !2543, !2544, !2545, !2546}
!2313 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2311, file: !151, line: 3249, baseType: !2233, size: 1472)
!2314 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !2311, file: !151, line: 3251, baseType: !2315, size: 64, offset: 1472)
!2315 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2316, size: 64)
!2316 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !2317, line: 463, size: 1152, elements: !2318)
!2317 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2318 = !{!2319, !2322, !2353, !2354, !2467, !2470, !2471, !2472, !2473, !2474, !2475, !2499, !2502, !2503, !2504, !2505, !2506, !2507, !2508, !2509, !2510, !2511, !2512, !2513, !2514, !2515, !2516, !2517, !2518, !2519, !2520, !2521, !2522, !2523, !2524, !2525}
!2319 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !2316, file: !2317, line: 464, baseType: !2320, size: 64)
!2320 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2321, size: 64)
!2321 = !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !2317, line: 464, flags: DIFlagFwdDecl)
!2322 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !2316, file: !2317, line: 467, baseType: !2323, size: 64, offset: 64)
!2323 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2324, size: 64)
!2324 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !135, line: 374, size: 640, elements: !2325)
!2325 = !{!2326, !2328, !2329, !2342, !2343, !2344, !2345, !2346, !2347, !2349, !2351, !2352}
!2326 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !2324, file: !135, line: 377, baseType: !2327, size: 64)
!2327 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !1566, line: 111, baseType: !1859)
!2328 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !2324, file: !135, line: 378, baseType: !2327, size: 64, offset: 64)
!2329 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !2324, file: !135, line: 381, baseType: !2330, size: 64, offset: 128)
!2330 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2331, size: 64)
!2331 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !135, line: 282, baseType: !2332)
!2332 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !135, line: 282, size: 128, elements: !2333)
!2333 = !{!2334}
!2334 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2332, file: !135, line: 282, baseType: !2335, size: 128)
!2335 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !135, line: 281, baseType: !2336)
!2336 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !135, line: 281, size: 128, elements: !2337)
!2337 = !{!2338, !2339, !2340}
!2338 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2336, file: !135, line: 281, baseType: !7, size: 32)
!2339 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2336, file: !135, line: 281, baseType: !7, size: 32, offset: 32)
!2340 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2336, file: !135, line: 281, baseType: !2341, size: 64, offset: 64)
!2341 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2327, size: 64, elements: !1666)
!2342 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !2324, file: !135, line: 384, baseType: !1662, size: 32, offset: 192)
!2343 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !2324, file: !135, line: 387, baseType: !1662, size: 32, offset: 224)
!2344 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !2324, file: !135, line: 390, baseType: !1662, size: 32, offset: 256)
!2345 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !2324, file: !135, line: 394, baseType: !2330, size: 64, offset: 320)
!2346 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !2324, file: !135, line: 396, baseType: !134, size: 32, offset: 384)
!2347 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !2324, file: !135, line: 399, baseType: !2348, size: 64, offset: 416)
!2348 = !DICompositeType(tag: DW_TAG_array_type, baseType: !140, size: 64, elements: !1813)
!2349 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !2324, file: !135, line: 402, baseType: !2350, size: 64, offset: 480)
!2350 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !1813)
!2351 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !2324, file: !135, line: 406, baseType: !1662, size: 32, offset: 544)
!2352 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !2324, file: !135, line: 409, baseType: !1662, size: 32, offset: 576)
!2353 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !2316, file: !2317, line: 470, baseType: !1886, size: 64, offset: 128)
!2354 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !2316, file: !2317, line: 473, baseType: !2355, size: 64, offset: 192)
!2355 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2356, size: 64)
!2356 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !1548, line: 39, size: 1152, elements: !2357)
!2357 = !{!2358, !2406, !2419, !2431, !2432, !2444, !2445, !2449, !2450, !2451, !2452, !2453}
!2358 = !DIDerivedType(tag: DW_TAG_member, name: "referenced_vars", scope: !2356, file: !1548, line: 41, baseType: !2359, size: 64)
!2359 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !2360, line: 144, baseType: !2361)
!2360 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2361 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2362, size: 64)
!2362 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !2360, line: 100, size: 896, elements: !2363)
!2363 = !{!2364, !2370, !2375, !2380, !2382, !2383, !2384, !2385, !2386, !2387, !2392, !2394, !2395, !2400, !2405}
!2364 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !2362, file: !2360, line: 102, baseType: !2365, size: 64)
!2365 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !2360, line: 52, baseType: !2366)
!2366 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2367, size: 64)
!2367 = !DISubroutineType(types: !2368)
!2368 = !{!2369, !2201}
!2369 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !2360, line: 47, baseType: !7)
!2370 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !2362, file: !2360, line: 105, baseType: !2371, size: 64, offset: 64)
!2371 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !2360, line: 59, baseType: !2372)
!2372 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2373, size: 64)
!2373 = !DISubroutineType(types: !2374)
!2374 = !{!1662, !2201, !2201}
!2375 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !2362, file: !2360, line: 108, baseType: !2376, size: 64, offset: 128)
!2376 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !2360, line: 63, baseType: !2377)
!2377 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2378, size: 64)
!2378 = !DISubroutineType(types: !2379)
!2379 = !{null, !1546}
!2380 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !2362, file: !2360, line: 111, baseType: !2381, size: 64, offset: 192)
!2381 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1546, size: 64)
!2382 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2362, file: !2360, line: 114, baseType: !2040, size: 64, offset: 256)
!2383 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !2362, file: !2360, line: 117, baseType: !2040, size: 64, offset: 320)
!2384 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !2362, file: !2360, line: 120, baseType: !2040, size: 64, offset: 384)
!2385 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !2362, file: !2360, line: 124, baseType: !7, size: 32, offset: 448)
!2386 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !2362, file: !2360, line: 128, baseType: !7, size: 32, offset: 480)
!2387 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !2362, file: !2360, line: 131, baseType: !2388, size: 64, offset: 512)
!2388 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !2360, line: 75, baseType: !2389)
!2389 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2390, size: 64)
!2390 = !DISubroutineType(types: !2391)
!2391 = !{!1546, !2040, !2040}
!2392 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !2362, file: !2360, line: 132, baseType: !2393, size: 64, offset: 576)
!2393 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !2360, line: 78, baseType: !2377)
!2394 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !2362, file: !2360, line: 135, baseType: !1546, size: 64, offset: 640)
!2395 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !2362, file: !2360, line: 136, baseType: !2396, size: 64, offset: 704)
!2396 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !2360, line: 82, baseType: !2397)
!2397 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2398, size: 64)
!2398 = !DISubroutineType(types: !2399)
!2399 = !{!1546, !1546, !2040, !2040}
!2400 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !2362, file: !2360, line: 137, baseType: !2401, size: 64, offset: 768)
!2401 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !2360, line: 83, baseType: !2402)
!2402 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2403, size: 64)
!2403 = !DISubroutineType(types: !2404)
!2404 = !{null, !1546, !1546}
!2405 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !2362, file: !2360, line: 141, baseType: !7, size: 32, offset: 832)
!2406 = !DIDerivedType(tag: DW_TAG_member, name: "modified_noreturn_calls", scope: !2356, file: !1548, line: 48, baseType: !2407, size: 64, offset: 64)
!2407 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2408, size: 64)
!2408 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_gc", file: !378, line: 35, baseType: !2409)
!2409 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_gc", file: !378, line: 35, size: 128, elements: !2410)
!2410 = !{!2411}
!2411 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2409, file: !378, line: 35, baseType: !2412, size: 128)
!2412 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_base", file: !378, line: 33, baseType: !2413)
!2413 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_base", file: !378, line: 33, size: 128, elements: !2414)
!2414 = !{!2415, !2416, !2417}
!2415 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2413, file: !378, line: 33, baseType: !7, size: 32)
!2416 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2413, file: !378, line: 33, baseType: !7, size: 32, offset: 32)
!2417 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2413, file: !378, line: 33, baseType: !2418, size: 64, offset: 64)
!2418 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1895, size: 64, elements: !1666)
!2419 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_names", scope: !2356, file: !1548, line: 51, baseType: !2420, size: 64, offset: 128)
!2420 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2421, size: 64)
!2421 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !151, line: 183, baseType: !2422)
!2422 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !151, line: 183, size: 128, elements: !2423)
!2423 = !{!2424}
!2424 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2422, file: !151, line: 183, baseType: !2425, size: 128)
!2425 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !151, line: 182, baseType: !2426)
!2426 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !151, line: 182, size: 128, elements: !2427)
!2427 = !{!2428, !2429, !2430}
!2428 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2426, file: !151, line: 182, baseType: !7, size: 32)
!2429 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2426, file: !151, line: 182, baseType: !7, size: 32, offset: 32)
!2430 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2426, file: !151, line: 182, baseType: !1948, size: 64, offset: 64)
!2431 = !DIDerivedType(tag: DW_TAG_member, name: "vop", scope: !2356, file: !1548, line: 54, baseType: !1565, size: 64, offset: 192)
!2432 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !2356, file: !1548, line: 57, baseType: !2433, size: 128, offset: 256)
!2433 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pt_solution", file: !2434, line: 31, size: 128, elements: !2435)
!2434 = !DIFile(filename: "./tree-ssa-alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2435 = !{!2436, !2437, !2438, !2439, !2440, !2441, !2442}
!2436 = !DIDerivedType(tag: DW_TAG_member, name: "anything", scope: !2433, file: !2434, line: 35, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!2437 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal", scope: !2433, file: !2434, line: 39, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!2438 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !2433, file: !2434, line: 42, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!2439 = !DIDerivedType(tag: DW_TAG_member, name: "null", scope: !2433, file: !2434, line: 46, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!2440 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_global", scope: !2433, file: !2434, line: 50, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!2441 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_restrict", scope: !2433, file: !2434, line: 53, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!2442 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2433, file: !2434, line: 56, baseType: !2443, size: 64, offset: 64)
!2443 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !1566, line: 47, baseType: !1797)
!2444 = !DIDerivedType(tag: DW_TAG_member, name: "callused", scope: !2356, file: !1548, line: 60, baseType: !2433, size: 128, offset: 384)
!2445 = !DIDerivedType(tag: DW_TAG_member, name: "decls_to_pointers", scope: !2356, file: !1548, line: 64, baseType: !2446, size: 64, offset: 512)
!2446 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2447, size: 64)
!2447 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_map_t", file: !2448, line: 33, flags: DIFlagFwdDecl)
!2448 = !DIFile(filename: "./pointer-set.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2449 = !DIDerivedType(tag: DW_TAG_member, name: "free_ssanames", scope: !2356, file: !1548, line: 67, baseType: !1565, size: 64, offset: 576)
!2450 = !DIDerivedType(tag: DW_TAG_member, name: "default_defs", scope: !2356, file: !1548, line: 73, baseType: !2359, size: 64, offset: 640)
!2451 = !DIDerivedType(tag: DW_TAG_member, name: "syms_to_rename", scope: !2356, file: !1548, line: 77, baseType: !2443, size: 64, offset: 704)
!2452 = !DIDerivedType(tag: DW_TAG_member, name: "in_ssa_p", scope: !2356, file: !1548, line: 80, baseType: !7, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!2453 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operands", scope: !2356, file: !1548, line: 82, baseType: !2454, size: 320, offset: 832)
!2454 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operands", file: !439, line: 62, size: 320, elements: !2455)
!2455 = !{!2456, !2462, !2463, !2464, !2465, !2466}
!2456 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory", scope: !2454, file: !439, line: 63, baseType: !2457, size: 64)
!2457 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2458, size: 64)
!2458 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_memory_d", file: !439, line: 56, size: 128, elements: !2459)
!2459 = !{!2460, !2461}
!2460 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2458, file: !439, line: 57, baseType: !2457, size: 64)
!2461 = !DIDerivedType(tag: DW_TAG_member, name: "mem", scope: !2458, file: !439, line: 58, baseType: !1664, size: 8, offset: 64)
!2462 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory_index", scope: !2454, file: !439, line: 64, baseType: !7, size: 32, offset: 64)
!2463 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operand_mem_size", scope: !2454, file: !439, line: 66, baseType: !7, size: 32, offset: 96)
!2464 = !DIDerivedType(tag: DW_TAG_member, name: "ops_active", scope: !2454, file: !439, line: 68, baseType: !1685, size: 8, offset: 128)
!2465 = !DIDerivedType(tag: DW_TAG_member, name: "free_defs", scope: !2454, file: !439, line: 70, baseType: !1924, size: 64, offset: 192)
!2466 = !DIDerivedType(tag: DW_TAG_member, name: "free_uses", scope: !2454, file: !439, line: 71, baseType: !1931, size: 64, offset: 256)
!2467 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !2316, file: !2317, line: 476, baseType: !2468, size: 64, offset: 256)
!2468 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2469, size: 64)
!2469 = !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !2317, line: 476, flags: DIFlagFwdDecl)
!2470 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !2316, file: !2317, line: 479, baseType: !2359, size: 64, offset: 320)
!2471 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2316, file: !2317, line: 484, baseType: !1565, size: 64, offset: 384)
!2472 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !2316, file: !2317, line: 488, baseType: !1565, size: 64, offset: 448)
!2473 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !2316, file: !2317, line: 493, baseType: !1565, size: 64, offset: 512)
!2474 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !2316, file: !2317, line: 496, baseType: !1565, size: 64, offset: 576)
!2475 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !2316, file: !2317, line: 501, baseType: !2476, size: 64, offset: 640)
!2476 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2477, size: 64)
!2477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !146, line: 2355, size: 576, elements: !2478)
!2478 = !{!2479, !2482, !2483, !2484, !2485, !2487, !2488, !2493, !2494, !2495, !2496, !2497, !2498}
!2479 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !2477, file: !146, line: 2356, baseType: !2480, size: 64)
!2480 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2481, size: 64)
!2481 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !146, line: 2356, flags: DIFlagFwdDecl)
!2482 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !2477, file: !146, line: 2357, baseType: !1769, size: 64, offset: 64)
!2483 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !2477, file: !146, line: 2358, baseType: !1662, size: 32, offset: 128)
!2484 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !2477, file: !146, line: 2359, baseType: !1662, size: 32, offset: 160)
!2485 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !2477, file: !146, line: 2360, baseType: !2486, size: 128, offset: 192)
!2486 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1662, size: 128, elements: !1838)
!2487 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !2477, file: !146, line: 2364, baseType: !1662, size: 32, offset: 320)
!2488 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !2477, file: !146, line: 2367, baseType: !2489, size: 128, offset: 384)
!2489 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !146, line: 2349, size: 128, elements: !2490)
!2490 = !{!2491, !2492}
!2491 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !2489, file: !146, line: 2351, baseType: !1743, size: 64)
!2492 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2489, file: !146, line: 2352, baseType: !1621, size: 64, offset: 64)
!2493 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !2477, file: !146, line: 2371, baseType: !145, size: 32, offset: 512)
!2494 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !2477, file: !146, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!2495 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !2477, file: !146, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!2496 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !2477, file: !146, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!2497 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !2477, file: !146, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!2498 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !2477, file: !146, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!2499 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !2316, file: !2317, line: 504, baseType: !2500, size: 64, offset: 704)
!2500 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2501, size: 64)
!2501 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !2317, line: 504, flags: DIFlagFwdDecl)
!2502 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !2316, file: !2317, line: 507, baseType: !2359, size: 64, offset: 768)
!2503 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !2316, file: !2317, line: 510, baseType: !1662, size: 32, offset: 832)
!2504 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !2316, file: !2317, line: 513, baseType: !1662, size: 32, offset: 864)
!2505 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !2316, file: !2317, line: 516, baseType: !1693, size: 32, offset: 896)
!2506 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !2316, file: !2317, line: 519, baseType: !1693, size: 32, offset: 928)
!2507 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !2316, file: !2317, line: 522, baseType: !7, size: 32, offset: 960)
!2508 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !2316, file: !2317, line: 523, baseType: !7, size: 32, offset: 992)
!2509 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !2316, file: !2317, line: 528, baseType: !1769, size: 64, offset: 1024)
!2510 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !2316, file: !2317, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!2511 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !2316, file: !2317, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!2512 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !2316, file: !2317, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!2513 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !2316, file: !2317, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!2514 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !2316, file: !2317, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!2515 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !2316, file: !2317, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!2516 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !2316, file: !2317, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!2517 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !2316, file: !2317, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!2518 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !2316, file: !2317, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!2519 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !2316, file: !2317, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!2520 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !2316, file: !2317, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!2521 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !2316, file: !2317, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!2522 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !2316, file: !2317, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!2523 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !2316, file: !2317, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!2524 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !2316, file: !2317, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!2525 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !2316, file: !2317, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!2526 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !2311, file: !151, line: 3254, baseType: !1565, size: 64, offset: 1536)
!2527 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !2311, file: !151, line: 3257, baseType: !1565, size: 64, offset: 1600)
!2528 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !2311, file: !151, line: 3258, baseType: !1565, size: 64, offset: 1664)
!2529 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !2311, file: !151, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!2530 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !2311, file: !151, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!2531 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !2311, file: !151, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!2532 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !2311, file: !151, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!2533 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !2311, file: !151, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!2534 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !2311, file: !151, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!2535 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !2311, file: !151, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!2536 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !2311, file: !151, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!2537 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !2311, file: !151, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!2538 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !2311, file: !151, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!2539 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !2311, file: !151, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!2540 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !2311, file: !151, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!2541 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !2311, file: !151, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!2542 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !2311, file: !151, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!2543 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !2311, file: !151, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!2544 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !2311, file: !151, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!2545 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !2311, file: !151, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!2546 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !2311, file: !151, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!2547 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1568, file: !151, line: 3394, baseType: !2548, size: 1344)
!2548 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !151, line: 2279, size: 1344, elements: !2549)
!2549 = !{!2550, !2551, !2552, !2553, !2554, !2555, !2556, !2557, !2558, !2559, !2560, !2561, !2562, !2563, !2564, !2565, !2566, !2567, !2568, !2569, !2570, !2571, !2572, !2573, !2574, !2575, !2583, !2584, !2585, !2586, !2587, !2588, !2589, !2590, !2591}
!2550 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2548, file: !151, line: 2280, baseType: !1604, size: 192)
!2551 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !2548, file: !151, line: 2281, baseType: !1565, size: 64, offset: 192)
!2552 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2548, file: !151, line: 2282, baseType: !1565, size: 64, offset: 256)
!2553 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !2548, file: !151, line: 2283, baseType: !1565, size: 64, offset: 320)
!2554 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !2548, file: !151, line: 2284, baseType: !1565, size: 64, offset: 384)
!2555 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2548, file: !151, line: 2285, baseType: !7, size: 32, offset: 448)
!2556 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !2548, file: !151, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!2557 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !2548, file: !151, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!2558 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !2548, file: !151, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!2559 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !2548, file: !151, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!2560 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !2548, file: !151, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!2561 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !2548, file: !151, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!2562 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2548, file: !151, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!2563 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !2548, file: !151, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!2564 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !2548, file: !151, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!2565 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !2548, file: !151, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!2566 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !2548, file: !151, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!2567 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !2548, file: !151, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!2568 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !2548, file: !151, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!2569 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !2548, file: !151, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!2570 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !2548, file: !151, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!2571 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2548, file: !151, line: 2305, baseType: !7, size: 32, offset: 512)
!2572 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !2548, file: !151, line: 2306, baseType: !2151, size: 32, offset: 544)
!2573 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !2548, file: !151, line: 2307, baseType: !1565, size: 64, offset: 576)
!2574 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !2548, file: !151, line: 2308, baseType: !1565, size: 64, offset: 640)
!2575 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !2548, file: !151, line: 2314, baseType: !2576, size: 64, offset: 704)
!2576 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !151, line: 2309, size: 64, elements: !2577)
!2577 = !{!2578, !2579, !2580}
!2578 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !2576, file: !151, line: 2310, baseType: !1662, size: 32)
!2579 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !2576, file: !151, line: 2311, baseType: !1769, size: 64)
!2580 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !2576, file: !151, line: 2312, baseType: !2581, size: 64)
!2581 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2582, size: 64)
!2582 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !151, line: 2277, flags: DIFlagFwdDecl)
!2583 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2548, file: !151, line: 2315, baseType: !1565, size: 64, offset: 768)
!2584 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !2548, file: !151, line: 2316, baseType: !1565, size: 64, offset: 832)
!2585 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !2548, file: !151, line: 2317, baseType: !1565, size: 64, offset: 896)
!2586 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !2548, file: !151, line: 2318, baseType: !1565, size: 64, offset: 960)
!2587 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !2548, file: !151, line: 2319, baseType: !1565, size: 64, offset: 1024)
!2588 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !2548, file: !151, line: 2320, baseType: !1565, size: 64, offset: 1088)
!2589 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !2548, file: !151, line: 2321, baseType: !1565, size: 64, offset: 1152)
!2590 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !2548, file: !151, line: 2322, baseType: !1565, size: 64, offset: 1216)
!2591 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !2548, file: !151, line: 2324, baseType: !2592, size: 64, offset: 1280)
!2592 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2593, size: 64)
!2593 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !151, line: 2324, flags: DIFlagFwdDecl)
!2594 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !1568, file: !151, line: 3395, baseType: !2595, size: 320)
!2595 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !151, line: 1469, size: 320, elements: !2596)
!2596 = !{!2597, !2598, !2599}
!2597 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2595, file: !151, line: 1470, baseType: !1604, size: 192)
!2598 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !2595, file: !151, line: 1471, baseType: !1565, size: 64, offset: 192)
!2599 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2595, file: !151, line: 1472, baseType: !1565, size: 64, offset: 256)
!2600 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1568, file: !151, line: 3396, baseType: !2601, size: 320)
!2601 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !151, line: 1482, size: 320, elements: !2602)
!2602 = !{!2603, !2604, !2605}
!2603 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2601, file: !151, line: 1483, baseType: !1604, size: 192)
!2604 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !2601, file: !151, line: 1484, baseType: !1662, size: 32, offset: 192)
!2605 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !2601, file: !151, line: 1485, baseType: !1948, size: 64, offset: 256)
!2606 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !1568, file: !151, line: 3397, baseType: !2607, size: 384)
!2607 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !151, line: 1829, size: 384, elements: !2608)
!2608 = !{!2609, !2610, !2611, !2612}
!2609 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2607, file: !151, line: 1830, baseType: !1604, size: 192)
!2610 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2607, file: !151, line: 1831, baseType: !1693, size: 32, offset: 192)
!2611 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2607, file: !151, line: 1832, baseType: !1565, size: 64, offset: 256)
!2612 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !2607, file: !151, line: 1835, baseType: !1948, size: 64, offset: 320)
!2613 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1568, file: !151, line: 3398, baseType: !2614, size: 704)
!2614 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !151, line: 1898, size: 704, elements: !2615)
!2615 = !{!2616, !2617, !2618, !2619, !2620, !2625}
!2616 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2614, file: !151, line: 1899, baseType: !1604, size: 192)
!2617 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !2614, file: !151, line: 1902, baseType: !1565, size: 64, offset: 192)
!2618 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !2614, file: !151, line: 1905, baseType: !1895, size: 64, offset: 256)
!2619 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !2614, file: !151, line: 1908, baseType: !7, size: 32, offset: 320)
!2620 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !2614, file: !151, line: 1911, baseType: !2621, size: 64, offset: 384)
!2621 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2622, size: 64)
!2622 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !1548, line: 117, size: 128, elements: !2623)
!2623 = !{!2624}
!2624 = !DIDerivedType(tag: DW_TAG_member, name: "pt", scope: !2622, file: !1548, line: 120, baseType: !2433, size: 128)
!2625 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !2614, file: !151, line: 1914, baseType: !1936, size: 256, offset: 448)
!2626 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1568, file: !151, line: 3399, baseType: !2627, size: 704)
!2627 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !151, line: 2008, size: 704, elements: !2628)
!2628 = !{!2629, !2630, !2631, !2632, !2633, !2634, !2635, !2636, !2637, !2638, !2639}
!2629 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2627, file: !151, line: 2009, baseType: !1604, size: 192)
!2630 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !2627, file: !151, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!2631 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !2627, file: !151, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!2632 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2627, file: !151, line: 2014, baseType: !1693, size: 32, offset: 224)
!2633 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2627, file: !151, line: 2016, baseType: !1565, size: 64, offset: 256)
!2634 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !2627, file: !151, line: 2017, baseType: !2420, size: 64, offset: 320)
!2635 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !2627, file: !151, line: 2019, baseType: !1565, size: 64, offset: 384)
!2636 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !2627, file: !151, line: 2020, baseType: !1565, size: 64, offset: 448)
!2637 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !2627, file: !151, line: 2021, baseType: !1565, size: 64, offset: 512)
!2638 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !2627, file: !151, line: 2022, baseType: !1565, size: 64, offset: 576)
!2639 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !2627, file: !151, line: 2023, baseType: !1565, size: 64, offset: 640)
!2640 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1568, file: !151, line: 3400, baseType: !2641, size: 832)
!2641 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !151, line: 2430, size: 832, elements: !2642)
!2642 = !{!2643, !2644, !2645, !2646, !2647, !2648, !2649, !2650, !2651, !2652}
!2643 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2641, file: !151, line: 2431, baseType: !1604, size: 192)
!2644 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2641, file: !151, line: 2433, baseType: !1565, size: 64, offset: 192)
!2645 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !2641, file: !151, line: 2434, baseType: !1565, size: 64, offset: 256)
!2646 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !2641, file: !151, line: 2435, baseType: !1565, size: 64, offset: 320)
!2647 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !2641, file: !151, line: 2436, baseType: !1565, size: 64, offset: 384)
!2648 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !2641, file: !151, line: 2437, baseType: !2420, size: 64, offset: 448)
!2649 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !2641, file: !151, line: 2438, baseType: !1565, size: 64, offset: 512)
!2650 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !2641, file: !151, line: 2440, baseType: !1565, size: 64, offset: 576)
!2651 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !2641, file: !151, line: 2441, baseType: !1565, size: 64, offset: 640)
!2652 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !2641, file: !151, line: 2443, baseType: !2653, size: 128, offset: 704)
!2653 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !151, line: 182, baseType: !2654)
!2654 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !151, line: 182, size: 128, elements: !2655)
!2655 = !{!2656}
!2656 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2654, file: !151, line: 182, baseType: !2425, size: 128)
!2657 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !1568, file: !151, line: 3401, baseType: !2658, size: 320)
!2658 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !151, line: 3327, size: 320, elements: !2659)
!2659 = !{!2660, !2661, !2668}
!2660 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2658, file: !151, line: 3329, baseType: !1604, size: 192)
!2661 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !2658, file: !151, line: 3330, baseType: !2662, size: 64, offset: 192)
!2662 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2663, size: 64)
!2663 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !151, line: 3320, size: 192, elements: !2664)
!2664 = !{!2665, !2666, !2667}
!2665 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2663, file: !151, line: 3322, baseType: !2662, size: 64)
!2666 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2663, file: !151, line: 3323, baseType: !2662, size: 64, offset: 64)
!2667 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2663, file: !151, line: 3324, baseType: !1565, size: 64, offset: 128)
!2668 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !2658, file: !151, line: 3331, baseType: !2662, size: 64, offset: 256)
!2669 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !1568, file: !151, line: 3402, baseType: !2670, size: 256)
!2670 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !151, line: 1540, size: 256, elements: !2671)
!2671 = !{!2672, !2673}
!2672 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2670, file: !151, line: 1541, baseType: !1604, size: 192)
!2673 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !2670, file: !151, line: 1542, baseType: !2674, size: 64, offset: 192)
!2674 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2675, size: 64)
!2675 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !151, line: 1538, baseType: !2676)
!2676 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !151, line: 1538, size: 192, elements: !2677)
!2677 = !{!2678}
!2678 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2676, file: !151, line: 1538, baseType: !2679, size: 192)
!2679 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !151, line: 1537, baseType: !2680)
!2680 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !151, line: 1537, size: 192, elements: !2681)
!2681 = !{!2682, !2683, !2684}
!2682 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2680, file: !151, line: 1537, baseType: !7, size: 32)
!2683 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2680, file: !151, line: 1537, baseType: !7, size: 32, offset: 32)
!2684 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2680, file: !151, line: 1537, baseType: !2685, size: 128, offset: 64)
!2685 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2686, size: 128, elements: !1666)
!2686 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !151, line: 1535, baseType: !2687)
!2687 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !151, line: 1532, size: 128, elements: !2688)
!2688 = !{!2689, !2690}
!2689 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2687, file: !151, line: 1533, baseType: !1565, size: 64)
!2690 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2687, file: !151, line: 1534, baseType: !1565, size: 64, offset: 64)
!2691 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !1568, file: !151, line: 3403, baseType: !2692, size: 512)
!2692 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !151, line: 1938, size: 512, elements: !2693)
!2693 = !{!2694, !2695, !2696, !2697, !2703, !2704, !2705}
!2694 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2692, file: !151, line: 1939, baseType: !1604, size: 192)
!2695 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2692, file: !151, line: 1940, baseType: !1693, size: 32, offset: 192)
!2696 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2692, file: !151, line: 1941, baseType: !150, size: 32, offset: 224)
!2697 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !2692, file: !151, line: 1946, baseType: !2698, size: 32, offset: 256)
!2698 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !151, line: 1942, size: 32, elements: !2699)
!2699 = !{!2700, !2701, !2702}
!2700 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !2698, file: !151, line: 1943, baseType: !169, size: 32)
!2701 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !2698, file: !151, line: 1944, baseType: !176, size: 32)
!2702 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !2698, file: !151, line: 1945, baseType: !183, size: 32)
!2703 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !2692, file: !151, line: 1950, baseType: !1885, size: 64, offset: 320)
!2704 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !2692, file: !151, line: 1951, baseType: !1885, size: 64, offset: 384)
!2705 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !2692, file: !151, line: 1953, baseType: !1948, size: 64, offset: 448)
!2706 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !1568, file: !151, line: 3404, baseType: !2707, size: 1664)
!2707 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !151, line: 3337, size: 1664, elements: !2708)
!2708 = !{!2709, !2710}
!2709 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2707, file: !151, line: 3338, baseType: !1604, size: 192)
!2710 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2707, file: !151, line: 3341, baseType: !2711, size: 1472, offset: 192)
!2711 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !672, line: 410, size: 1472, elements: !2712)
!2712 = !{!2713, !2714, !2715, !2716, !2717, !2718, !2719, !2720, !2721, !2723, !2724, !2725, !2726, !2727, !2728, !2729, !2730, !2731, !2732, !2733, !2734, !2735, !2736, !2737, !2738, !2739, !2740, !2741, !2742, !2743, !2744, !2745, !2746, !2747, !2748, !2749, !2750, !2751, !2752, !2753, !2754, !2755, !2756, !2757, !2758, !2759, !2760, !2761, !2762, !2763, !2764, !2765, !2766, !2767, !2768, !2769, !2770, !2771, !2772, !2773, !2774, !2775, !2776, !2777, !2778, !2779, !2780, !2781, !2782, !2783, !2784, !2785, !2786, !2787, !2788, !2789, !2790, !2791, !2792, !2793, !2794, !2795, !2796, !2797, !2798, !2799, !2800, !2801, !2802, !2803, !2804, !2805, !2806, !2807, !2808, !2809, !2810, !2811, !2812, !2813, !2814, !2815, !2816, !2817, !2818, !2819, !2820, !2821, !2822, !2823, !2824, !2825, !2826, !2827, !2828, !2829, !2830, !2831, !2832, !2833, !2834, !2835, !2836, !2837, !2838, !2839, !2840, !2841, !2842, !2843, !2844, !2845, !2846, !2847, !2848, !2849, !2850, !2851, !2852, !2853, !2854, !2855, !2856, !2857, !2858, !2859, !2860, !2861, !2862, !2863, !2864, !2865, !2866, !2867, !2868, !2869, !2870, !2871, !2872, !2873, !2874, !2875, !2876}
!2713 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !2711, file: !672, line: 412, baseType: !1662, size: 32)
!2714 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !2711, file: !672, line: 413, baseType: !1662, size: 32, offset: 32)
!2715 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !2711, file: !672, line: 414, baseType: !1662, size: 32, offset: 64)
!2716 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !2711, file: !672, line: 415, baseType: !1662, size: 32, offset: 96)
!2717 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !2711, file: !672, line: 416, baseType: !1662, size: 32, offset: 128)
!2718 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !2711, file: !672, line: 417, baseType: !1662, size: 32, offset: 160)
!2719 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !2711, file: !672, line: 418, baseType: !1685, size: 8, offset: 192)
!2720 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !2711, file: !672, line: 419, baseType: !1685, size: 8, offset: 200)
!2721 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !2711, file: !672, line: 420, baseType: !2722, size: 8, offset: 208)
!2722 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!2723 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !2711, file: !672, line: 421, baseType: !2722, size: 8, offset: 216)
!2724 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !2711, file: !672, line: 422, baseType: !2722, size: 8, offset: 224)
!2725 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !2711, file: !672, line: 423, baseType: !2722, size: 8, offset: 232)
!2726 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !2711, file: !672, line: 424, baseType: !2722, size: 8, offset: 240)
!2727 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !2711, file: !672, line: 425, baseType: !2722, size: 8, offset: 248)
!2728 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !2711, file: !672, line: 426, baseType: !2722, size: 8, offset: 256)
!2729 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !2711, file: !672, line: 427, baseType: !2722, size: 8, offset: 264)
!2730 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !2711, file: !672, line: 428, baseType: !2722, size: 8, offset: 272)
!2731 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !2711, file: !672, line: 429, baseType: !2722, size: 8, offset: 280)
!2732 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !2711, file: !672, line: 430, baseType: !2722, size: 8, offset: 288)
!2733 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !2711, file: !672, line: 431, baseType: !2722, size: 8, offset: 296)
!2734 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !2711, file: !672, line: 432, baseType: !2722, size: 8, offset: 304)
!2735 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !2711, file: !672, line: 433, baseType: !2722, size: 8, offset: 312)
!2736 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !2711, file: !672, line: 434, baseType: !2722, size: 8, offset: 320)
!2737 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !2711, file: !672, line: 435, baseType: !2722, size: 8, offset: 328)
!2738 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !2711, file: !672, line: 436, baseType: !2722, size: 8, offset: 336)
!2739 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !2711, file: !672, line: 437, baseType: !2722, size: 8, offset: 344)
!2740 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !2711, file: !672, line: 438, baseType: !2722, size: 8, offset: 352)
!2741 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !2711, file: !672, line: 439, baseType: !2722, size: 8, offset: 360)
!2742 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !2711, file: !672, line: 440, baseType: !2722, size: 8, offset: 368)
!2743 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !2711, file: !672, line: 441, baseType: !2722, size: 8, offset: 376)
!2744 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !2711, file: !672, line: 442, baseType: !2722, size: 8, offset: 384)
!2745 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !2711, file: !672, line: 443, baseType: !2722, size: 8, offset: 392)
!2746 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !2711, file: !672, line: 444, baseType: !2722, size: 8, offset: 400)
!2747 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !2711, file: !672, line: 445, baseType: !2722, size: 8, offset: 408)
!2748 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !2711, file: !672, line: 446, baseType: !2722, size: 8, offset: 416)
!2749 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !2711, file: !672, line: 447, baseType: !2722, size: 8, offset: 424)
!2750 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !2711, file: !672, line: 448, baseType: !2722, size: 8, offset: 432)
!2751 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !2711, file: !672, line: 449, baseType: !2722, size: 8, offset: 440)
!2752 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !2711, file: !672, line: 450, baseType: !2722, size: 8, offset: 448)
!2753 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !2711, file: !672, line: 451, baseType: !2722, size: 8, offset: 456)
!2754 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !2711, file: !672, line: 452, baseType: !2722, size: 8, offset: 464)
!2755 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !2711, file: !672, line: 453, baseType: !2722, size: 8, offset: 472)
!2756 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !2711, file: !672, line: 454, baseType: !2722, size: 8, offset: 480)
!2757 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !2711, file: !672, line: 455, baseType: !2722, size: 8, offset: 488)
!2758 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !2711, file: !672, line: 456, baseType: !2722, size: 8, offset: 496)
!2759 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !2711, file: !672, line: 457, baseType: !2722, size: 8, offset: 504)
!2760 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !2711, file: !672, line: 458, baseType: !2722, size: 8, offset: 512)
!2761 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !2711, file: !672, line: 459, baseType: !2722, size: 8, offset: 520)
!2762 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !2711, file: !672, line: 460, baseType: !2722, size: 8, offset: 528)
!2763 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !2711, file: !672, line: 461, baseType: !2722, size: 8, offset: 536)
!2764 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !2711, file: !672, line: 462, baseType: !2722, size: 8, offset: 544)
!2765 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !2711, file: !672, line: 463, baseType: !2722, size: 8, offset: 552)
!2766 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !2711, file: !672, line: 464, baseType: !2722, size: 8, offset: 560)
!2767 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !2711, file: !672, line: 465, baseType: !2722, size: 8, offset: 568)
!2768 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !2711, file: !672, line: 466, baseType: !2722, size: 8, offset: 576)
!2769 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !2711, file: !672, line: 467, baseType: !2722, size: 8, offset: 584)
!2770 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !2711, file: !672, line: 468, baseType: !2722, size: 8, offset: 592)
!2771 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !2711, file: !672, line: 469, baseType: !2722, size: 8, offset: 600)
!2772 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !2711, file: !672, line: 470, baseType: !2722, size: 8, offset: 608)
!2773 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !2711, file: !672, line: 471, baseType: !2722, size: 8, offset: 616)
!2774 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !2711, file: !672, line: 472, baseType: !2722, size: 8, offset: 624)
!2775 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !2711, file: !672, line: 473, baseType: !2722, size: 8, offset: 632)
!2776 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !2711, file: !672, line: 474, baseType: !2722, size: 8, offset: 640)
!2777 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !2711, file: !672, line: 475, baseType: !2722, size: 8, offset: 648)
!2778 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !2711, file: !672, line: 476, baseType: !2722, size: 8, offset: 656)
!2779 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !2711, file: !672, line: 477, baseType: !2722, size: 8, offset: 664)
!2780 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !2711, file: !672, line: 478, baseType: !2722, size: 8, offset: 672)
!2781 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !2711, file: !672, line: 479, baseType: !2722, size: 8, offset: 680)
!2782 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !2711, file: !672, line: 480, baseType: !2722, size: 8, offset: 688)
!2783 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !2711, file: !672, line: 481, baseType: !2722, size: 8, offset: 696)
!2784 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !2711, file: !672, line: 482, baseType: !2722, size: 8, offset: 704)
!2785 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !2711, file: !672, line: 483, baseType: !2722, size: 8, offset: 712)
!2786 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !2711, file: !672, line: 484, baseType: !2722, size: 8, offset: 720)
!2787 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !2711, file: !672, line: 485, baseType: !2722, size: 8, offset: 728)
!2788 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !2711, file: !672, line: 486, baseType: !2722, size: 8, offset: 736)
!2789 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !2711, file: !672, line: 487, baseType: !2722, size: 8, offset: 744)
!2790 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !2711, file: !672, line: 488, baseType: !2722, size: 8, offset: 752)
!2791 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !2711, file: !672, line: 489, baseType: !2722, size: 8, offset: 760)
!2792 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !2711, file: !672, line: 490, baseType: !2722, size: 8, offset: 768)
!2793 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !2711, file: !672, line: 491, baseType: !2722, size: 8, offset: 776)
!2794 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !2711, file: !672, line: 492, baseType: !2722, size: 8, offset: 784)
!2795 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !2711, file: !672, line: 493, baseType: !2722, size: 8, offset: 792)
!2796 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !2711, file: !672, line: 494, baseType: !2722, size: 8, offset: 800)
!2797 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !2711, file: !672, line: 495, baseType: !2722, size: 8, offset: 808)
!2798 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !2711, file: !672, line: 496, baseType: !2722, size: 8, offset: 816)
!2799 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !2711, file: !672, line: 497, baseType: !2722, size: 8, offset: 824)
!2800 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !2711, file: !672, line: 498, baseType: !2722, size: 8, offset: 832)
!2801 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !2711, file: !672, line: 499, baseType: !2722, size: 8, offset: 840)
!2802 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !2711, file: !672, line: 500, baseType: !2722, size: 8, offset: 848)
!2803 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !2711, file: !672, line: 501, baseType: !2722, size: 8, offset: 856)
!2804 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !2711, file: !672, line: 502, baseType: !2722, size: 8, offset: 864)
!2805 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !2711, file: !672, line: 503, baseType: !2722, size: 8, offset: 872)
!2806 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !2711, file: !672, line: 504, baseType: !2722, size: 8, offset: 880)
!2807 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !2711, file: !672, line: 505, baseType: !2722, size: 8, offset: 888)
!2808 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !2711, file: !672, line: 506, baseType: !2722, size: 8, offset: 896)
!2809 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !2711, file: !672, line: 507, baseType: !2722, size: 8, offset: 904)
!2810 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !2711, file: !672, line: 508, baseType: !2722, size: 8, offset: 912)
!2811 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !2711, file: !672, line: 509, baseType: !2722, size: 8, offset: 920)
!2812 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !2711, file: !672, line: 510, baseType: !2722, size: 8, offset: 928)
!2813 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !2711, file: !672, line: 511, baseType: !2722, size: 8, offset: 936)
!2814 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !2711, file: !672, line: 512, baseType: !2722, size: 8, offset: 944)
!2815 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !2711, file: !672, line: 513, baseType: !2722, size: 8, offset: 952)
!2816 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !2711, file: !672, line: 514, baseType: !2722, size: 8, offset: 960)
!2817 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !2711, file: !672, line: 515, baseType: !2722, size: 8, offset: 968)
!2818 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !2711, file: !672, line: 516, baseType: !2722, size: 8, offset: 976)
!2819 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !2711, file: !672, line: 517, baseType: !2722, size: 8, offset: 984)
!2820 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !2711, file: !672, line: 518, baseType: !2722, size: 8, offset: 992)
!2821 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !2711, file: !672, line: 519, baseType: !2722, size: 8, offset: 1000)
!2822 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !2711, file: !672, line: 520, baseType: !2722, size: 8, offset: 1008)
!2823 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !2711, file: !672, line: 521, baseType: !2722, size: 8, offset: 1016)
!2824 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !2711, file: !672, line: 522, baseType: !2722, size: 8, offset: 1024)
!2825 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !2711, file: !672, line: 523, baseType: !2722, size: 8, offset: 1032)
!2826 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !2711, file: !672, line: 524, baseType: !2722, size: 8, offset: 1040)
!2827 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !2711, file: !672, line: 525, baseType: !2722, size: 8, offset: 1048)
!2828 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !2711, file: !672, line: 526, baseType: !2722, size: 8, offset: 1056)
!2829 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !2711, file: !672, line: 527, baseType: !2722, size: 8, offset: 1064)
!2830 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !2711, file: !672, line: 528, baseType: !2722, size: 8, offset: 1072)
!2831 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !2711, file: !672, line: 529, baseType: !2722, size: 8, offset: 1080)
!2832 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !2711, file: !672, line: 530, baseType: !2722, size: 8, offset: 1088)
!2833 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !2711, file: !672, line: 531, baseType: !2722, size: 8, offset: 1096)
!2834 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !2711, file: !672, line: 532, baseType: !2722, size: 8, offset: 1104)
!2835 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !2711, file: !672, line: 533, baseType: !2722, size: 8, offset: 1112)
!2836 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !2711, file: !672, line: 534, baseType: !2722, size: 8, offset: 1120)
!2837 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !2711, file: !672, line: 535, baseType: !2722, size: 8, offset: 1128)
!2838 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !2711, file: !672, line: 536, baseType: !2722, size: 8, offset: 1136)
!2839 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !2711, file: !672, line: 537, baseType: !2722, size: 8, offset: 1144)
!2840 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !2711, file: !672, line: 538, baseType: !2722, size: 8, offset: 1152)
!2841 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !2711, file: !672, line: 539, baseType: !2722, size: 8, offset: 1160)
!2842 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !2711, file: !672, line: 540, baseType: !2722, size: 8, offset: 1168)
!2843 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !2711, file: !672, line: 541, baseType: !2722, size: 8, offset: 1176)
!2844 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !2711, file: !672, line: 542, baseType: !2722, size: 8, offset: 1184)
!2845 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !2711, file: !672, line: 543, baseType: !2722, size: 8, offset: 1192)
!2846 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !2711, file: !672, line: 544, baseType: !2722, size: 8, offset: 1200)
!2847 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !2711, file: !672, line: 545, baseType: !2722, size: 8, offset: 1208)
!2848 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !2711, file: !672, line: 546, baseType: !2722, size: 8, offset: 1216)
!2849 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !2711, file: !672, line: 547, baseType: !2722, size: 8, offset: 1224)
!2850 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !2711, file: !672, line: 548, baseType: !2722, size: 8, offset: 1232)
!2851 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !2711, file: !672, line: 549, baseType: !2722, size: 8, offset: 1240)
!2852 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !2711, file: !672, line: 550, baseType: !2722, size: 8, offset: 1248)
!2853 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !2711, file: !672, line: 551, baseType: !2722, size: 8, offset: 1256)
!2854 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !2711, file: !672, line: 552, baseType: !2722, size: 8, offset: 1264)
!2855 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !2711, file: !672, line: 553, baseType: !2722, size: 8, offset: 1272)
!2856 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !2711, file: !672, line: 554, baseType: !2722, size: 8, offset: 1280)
!2857 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !2711, file: !672, line: 555, baseType: !2722, size: 8, offset: 1288)
!2858 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !2711, file: !672, line: 556, baseType: !2722, size: 8, offset: 1296)
!2859 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !2711, file: !672, line: 557, baseType: !2722, size: 8, offset: 1304)
!2860 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !2711, file: !672, line: 558, baseType: !2722, size: 8, offset: 1312)
!2861 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !2711, file: !672, line: 559, baseType: !2722, size: 8, offset: 1320)
!2862 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !2711, file: !672, line: 560, baseType: !2722, size: 8, offset: 1328)
!2863 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !2711, file: !672, line: 561, baseType: !2722, size: 8, offset: 1336)
!2864 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !2711, file: !672, line: 562, baseType: !2722, size: 8, offset: 1344)
!2865 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !2711, file: !672, line: 563, baseType: !2722, size: 8, offset: 1352)
!2866 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !2711, file: !672, line: 564, baseType: !2722, size: 8, offset: 1360)
!2867 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !2711, file: !672, line: 565, baseType: !2722, size: 8, offset: 1368)
!2868 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !2711, file: !672, line: 566, baseType: !2722, size: 8, offset: 1376)
!2869 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !2711, file: !672, line: 567, baseType: !2722, size: 8, offset: 1384)
!2870 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !2711, file: !672, line: 568, baseType: !2722, size: 8, offset: 1392)
!2871 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !2711, file: !672, line: 569, baseType: !2722, size: 8, offset: 1400)
!2872 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !2711, file: !672, line: 570, baseType: !2722, size: 8, offset: 1408)
!2873 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !2711, file: !672, line: 571, baseType: !2722, size: 8, offset: 1416)
!2874 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !2711, file: !672, line: 572, baseType: !2722, size: 8, offset: 1424)
!2875 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !2711, file: !672, line: 573, baseType: !2722, size: 8, offset: 1432)
!2876 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !2711, file: !672, line: 574, baseType: !2722, size: 8, offset: 1440)
!2877 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !1568, file: !151, line: 3405, baseType: !2878, size: 384)
!2878 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !151, line: 3352, size: 384, elements: !2879)
!2879 = !{!2880, !2881}
!2880 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2878, file: !151, line: 3353, baseType: !1604, size: 192)
!2881 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2878, file: !151, line: 3356, baseType: !2882, size: 192, offset: 192)
!2882 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !672, line: 578, size: 192, elements: !2883)
!2883 = !{!2884, !2885, !2886, !2887, !2888, !2889, !2890, !2891, !2892, !2893, !2894}
!2884 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !2882, file: !672, line: 580, baseType: !1662, size: 32)
!2885 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !2882, file: !672, line: 581, baseType: !1662, size: 32, offset: 32)
!2886 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !2882, file: !672, line: 582, baseType: !1662, size: 32, offset: 64)
!2887 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !2882, file: !672, line: 583, baseType: !1662, size: 32, offset: 96)
!2888 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !2882, file: !672, line: 584, baseType: !1685, size: 8, offset: 128)
!2889 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !2882, file: !672, line: 585, baseType: !1685, size: 8, offset: 136)
!2890 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !2882, file: !672, line: 586, baseType: !1685, size: 8, offset: 144)
!2891 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !2882, file: !672, line: 587, baseType: !1685, size: 8, offset: 152)
!2892 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !2882, file: !672, line: 588, baseType: !1685, size: 8, offset: 160)
!2893 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !2882, file: !672, line: 589, baseType: !1685, size: 8, offset: 168)
!2894 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !2882, file: !672, line: 590, baseType: !1685, size: 8, offset: 176)
!2895 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !1562, file: !1548, line: 554, baseType: !1565, size: 64, offset: 64)
!2896 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1562, file: !1548, line: 555, baseType: !1695, size: 32, offset: 128)
!2897 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2327, size: 64)
!2898 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_operand_p", file: !439, line: 27, baseType: !1929)
!2899 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_operand_p", file: !439, line: 30, baseType: !2900)
!2900 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2901, size: 64)
!2901 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_use_operand_t", file: !151, line: 1893, baseType: !1936)
!2902 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2903, size: 64)
!2903 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2904)
!2904 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int_tree_map", file: !1548, line: 321, size: 128, elements: !2905)
!2905 = !{!2906, !2907}
!2906 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2904, file: !1548, line: 323, baseType: !7, size: 32)
!2907 = !DIDerivedType(tag: DW_TAG_member, name: "to", scope: !2904, file: !1548, line: 324, baseType: !1565, size: 64, offset: 64)
!2908 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_tree", file: !1566, line: 59, baseType: !2909)
!2909 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2910, size: 64)
!2910 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1568)
!2911 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2912, size: 64)
!2912 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1897)
!2913 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2914, size: 64)
!2914 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "walk_stmt_info", file: !378, line: 4652, size: 448, elements: !2915)
!2915 = !{!2916, !2923, !2924, !2927, !2928, !2929, !2930, !2931}
!2916 = !DIDerivedType(tag: DW_TAG_member, name: "gsi", scope: !2914, file: !378, line: 4655, baseType: !2917, size: 192)
!2917 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_stmt_iterator", file: !378, line: 265, baseType: !2918)
!2918 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !378, line: 254, size: 192, elements: !2919)
!2919 = !{!2920, !2921, !2922}
!2920 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !2918, file: !378, line: 257, baseType: !1890, size: 64)
!2921 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !2918, file: !378, line: 263, baseType: !1885, size: 64, offset: 64)
!2922 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !2918, file: !378, line: 264, baseType: !2327, size: 64, offset: 128)
!2923 = !DIDerivedType(tag: DW_TAG_member, name: "info", scope: !2914, file: !378, line: 4659, baseType: !1546, size: 64, offset: 192)
!2924 = !DIDerivedType(tag: DW_TAG_member, name: "pset", scope: !2914, file: !378, line: 4664, baseType: !2925, size: 64, offset: 256)
!2925 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2926, size: 64)
!2926 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_set_t", file: !151, line: 5199, flags: DIFlagFwdDecl)
!2927 = !DIDerivedType(tag: DW_TAG_member, name: "val_only", scope: !2914, file: !378, line: 4678, baseType: !1685, size: 8, offset: 320)
!2928 = !DIDerivedType(tag: DW_TAG_member, name: "is_lhs", scope: !2914, file: !378, line: 4681, baseType: !1685, size: 8, offset: 328)
!2929 = !DIDerivedType(tag: DW_TAG_member, name: "changed", scope: !2914, file: !378, line: 4685, baseType: !1685, size: 8, offset: 336)
!2930 = !DIDerivedType(tag: DW_TAG_member, name: "want_locations", scope: !2914, file: !378, line: 4688, baseType: !1685, size: 8, offset: 344)
!2931 = !DIDerivedType(tag: DW_TAG_member, name: "callback_result", scope: !2914, file: !378, line: 4694, baseType: !1565, size: 64, offset: 384)
!2932 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2933, size: 64)
!2933 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "walk_data", file: !3, line: 1681, size: 128, elements: !2934)
!2934 = !{!2935, !2936, !2937}
!2935 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2933, file: !3, line: 1682, baseType: !1895, size: 64)
!2936 = !DIDerivedType(tag: DW_TAG_member, name: "always_executed", scope: !2933, file: !3, line: 1683, baseType: !1685, size: 8, offset: 64)
!2937 = !DIDerivedType(tag: DW_TAG_member, name: "warn_possibly_uninitialized", scope: !2933, file: !3, line: 1684, baseType: !1685, size: 8, offset: 72)
!2938 = !{!2939, !2967, !2969, !0}
!2939 = !DIGlobalVariableExpression(var: !2940, expr: !DIExpression())
!2940 = distinct !DIGlobalVariable(name: "pass_early_warn_uninitialized", scope: !2, file: !3, line: 1867, type: !2941, isLocal: false, isDefinition: true)
!2941 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_opt_pass", file: !622, line: 156, size: 640, elements: !2942)
!2942 = !{!2943}
!2943 = !DIDerivedType(tag: DW_TAG_member, name: "pass", scope: !2941, file: !622, line: 158, baseType: !2944, size: 640)
!2944 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "opt_pass", file: !622, line: 114, size: 640, elements: !2945)
!2945 = !{!2946, !2947, !2948, !2952, !2956, !2958, !2959, !2960, !2962, !2963, !2964, !2965, !2966}
!2946 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2944, file: !622, line: 117, baseType: !621, size: 32)
!2947 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2944, file: !622, line: 121, baseType: !1769, size: 64, offset: 64)
!2948 = !DIDerivedType(tag: DW_TAG_member, name: "gate", scope: !2944, file: !622, line: 125, baseType: !2949, size: 64, offset: 128)
!2949 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2950, size: 64)
!2950 = !DISubroutineType(types: !2951)
!2951 = !{!1685}
!2952 = !DIDerivedType(tag: DW_TAG_member, name: "execute", scope: !2944, file: !622, line: 130, baseType: !2953, size: 64, offset: 192)
!2953 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2954, size: 64)
!2954 = !DISubroutineType(types: !2955)
!2955 = !{!7}
!2956 = !DIDerivedType(tag: DW_TAG_member, name: "sub", scope: !2944, file: !622, line: 133, baseType: !2957, size: 64, offset: 256)
!2957 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2944, size: 64)
!2958 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2944, file: !622, line: 136, baseType: !2957, size: 64, offset: 320)
!2959 = !DIDerivedType(tag: DW_TAG_member, name: "static_pass_number", scope: !2944, file: !622, line: 139, baseType: !1662, size: 32, offset: 384)
!2960 = !DIDerivedType(tag: DW_TAG_member, name: "tv_id", scope: !2944, file: !622, line: 143, baseType: !2961, size: 32, offset: 416)
!2961 = !DIDerivedType(tag: DW_TAG_typedef, name: "timevar_id_t", file: !446, line: 80, baseType: !445)
!2962 = !DIDerivedType(tag: DW_TAG_member, name: "properties_required", scope: !2944, file: !622, line: 146, baseType: !7, size: 32, offset: 448)
!2963 = !DIDerivedType(tag: DW_TAG_member, name: "properties_provided", scope: !2944, file: !622, line: 147, baseType: !7, size: 32, offset: 480)
!2964 = !DIDerivedType(tag: DW_TAG_member, name: "properties_destroyed", scope: !2944, file: !622, line: 148, baseType: !7, size: 32, offset: 512)
!2965 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_start", scope: !2944, file: !622, line: 151, baseType: !7, size: 32, offset: 544)
!2966 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_finish", scope: !2944, file: !622, line: 152, baseType: !7, size: 32, offset: 576)
!2967 = !DIGlobalVariableExpression(var: !2968, expr: !DIExpression())
!2968 = distinct !DIGlobalVariable(name: "pass_late_warn_uninitialized", scope: !2, file: !3, line: 1886, type: !2941, isLocal: false, isDefinition: true)
!2969 = !DIGlobalVariableExpression(var: !2970, expr: !DIExpression())
!2970 = distinct !DIGlobalVariable(name: "pass_update_address_taken", scope: !2, file: !3, line: 2037, type: !2941, isLocal: false, isDefinition: true)
!2971 = !{i32 7, !"Dwarf Version", i32 4}
!2972 = !{i32 2, !"Debug Info Version", i32 3}
!2973 = !{i32 1, !"wchar_size", i32 4}
!2974 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!2975 = distinct !DISubprogram(name: "redirect_edge_var_map_add", scope: !3, file: !3, line: 57, type: !2976, scopeLine: 58, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!2976 = !DISubroutineType(types: !2977)
!2977 = !{null, !1875, !1565, !1565, !1695}
!2978 = !{}
!2979 = !DILocalVariable(name: "e", arg: 1, scope: !2975, file: !3, line: 57, type: !1875)
!2980 = !DILocation(line: 57, column: 33, scope: !2975)
!2981 = !DILocalVariable(name: "result", arg: 2, scope: !2975, file: !3, line: 57, type: !1565)
!2982 = !DILocation(line: 57, column: 41, scope: !2975)
!2983 = !DILocalVariable(name: "def", arg: 3, scope: !2975, file: !3, line: 57, type: !1565)
!2984 = !DILocation(line: 57, column: 54, scope: !2975)
!2985 = !DILocalVariable(name: "locus", arg: 4, scope: !2975, file: !3, line: 57, type: !1695)
!2986 = !DILocation(line: 57, column: 75, scope: !2975)
!2987 = !DILocalVariable(name: "slot", scope: !2975, file: !3, line: 59, type: !2381)
!2988 = !DILocation(line: 59, column: 10, scope: !2975)
!2989 = !DILocalVariable(name: "old_head", scope: !2975, file: !3, line: 60, type: !1547)
!2990 = !DILocation(line: 60, column: 23, scope: !2975)
!2991 = !DILocalVariable(name: "head", scope: !2975, file: !3, line: 60, type: !1547)
!2992 = !DILocation(line: 60, column: 33, scope: !2975)
!2993 = !DILocalVariable(name: "new_node", scope: !2975, file: !3, line: 61, type: !1561)
!2994 = !DILocation(line: 61, column: 16, scope: !2975)
!2995 = !DILocation(line: 63, column: 7, scope: !2996)
!2996 = distinct !DILexicalBlock(scope: !2975, file: !3, line: 63, column: 7)
!2997 = !DILocation(line: 63, column: 21, scope: !2996)
!2998 = !DILocation(line: 63, column: 7, scope: !2975)
!2999 = !DILocation(line: 64, column: 21, scope: !2996)
!3000 = !DILocation(line: 64, column: 19, scope: !2996)
!3001 = !DILocation(line: 64, column: 5, scope: !2996)
!3002 = !DILocation(line: 66, column: 30, scope: !2975)
!3003 = !DILocation(line: 66, column: 45, scope: !2975)
!3004 = !DILocation(line: 66, column: 10, scope: !2975)
!3005 = !DILocation(line: 66, column: 8, scope: !2975)
!3006 = !DILocation(line: 67, column: 44, scope: !2975)
!3007 = !DILocation(line: 67, column: 43, scope: !2975)
!3008 = !DILocation(line: 67, column: 21, scope: !2975)
!3009 = !DILocation(line: 67, column: 19, scope: !2975)
!3010 = !DILocation(line: 67, column: 12, scope: !2975)
!3011 = !DILocation(line: 68, column: 8, scope: !3012)
!3012 = distinct !DILexicalBlock(scope: !2975, file: !3, line: 68, column: 7)
!3013 = !DILocation(line: 68, column: 7, scope: !2975)
!3014 = !DILocation(line: 70, column: 14, scope: !3015)
!3015 = distinct !DILexicalBlock(scope: !3012, file: !3, line: 69, column: 5)
!3016 = !DILocation(line: 70, column: 12, scope: !3015)
!3017 = !DILocation(line: 71, column: 15, scope: !3015)
!3018 = !DILocation(line: 71, column: 8, scope: !3015)
!3019 = !DILocation(line: 71, column: 13, scope: !3015)
!3020 = !DILocation(line: 72, column: 5, scope: !3015)
!3021 = !DILocation(line: 73, column: 18, scope: !2975)
!3022 = !DILocation(line: 73, column: 12, scope: !2975)
!3023 = !DILocation(line: 73, column: 16, scope: !2975)
!3024 = !DILocation(line: 74, column: 21, scope: !2975)
!3025 = !DILocation(line: 74, column: 12, scope: !2975)
!3026 = !DILocation(line: 74, column: 19, scope: !2975)
!3027 = !DILocation(line: 75, column: 20, scope: !2975)
!3028 = !DILocation(line: 75, column: 12, scope: !2975)
!3029 = !DILocation(line: 75, column: 18, scope: !2975)
!3030 = !DILocation(line: 77, column: 3, scope: !2975)
!3031 = !DILocation(line: 78, column: 7, scope: !3032)
!3032 = distinct !DILexicalBlock(scope: !2975, file: !3, line: 78, column: 7)
!3033 = !DILocation(line: 78, column: 19, scope: !3032)
!3034 = !DILocation(line: 78, column: 16, scope: !3032)
!3035 = !DILocation(line: 78, column: 7, scope: !2975)
!3036 = !DILocation(line: 81, column: 15, scope: !3037)
!3037 = distinct !DILexicalBlock(scope: !3032, file: !3, line: 79, column: 5)
!3038 = !DILocation(line: 81, column: 8, scope: !3037)
!3039 = !DILocation(line: 81, column: 13, scope: !3037)
!3040 = !DILocation(line: 82, column: 5, scope: !3037)
!3041 = !DILocation(line: 83, column: 1, scope: !2975)
!3042 = distinct !DISubprogram(name: "VEC_edge_var_map_heap_alloc", scope: !1548, file: !1548, line: 560, type: !3043, scopeLine: 560, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!3043 = !DISubroutineType(types: !3044)
!3044 = !{!1549, !1662}
!3045 = !DILocalVariable(name: "alloc_", arg: 1, scope: !3042, file: !1548, line: 560, type: !1662)
!3046 = !DILocation(line: 560, column: 1, scope: !3042)
!3047 = distinct !DISubprogram(name: "VEC_edge_var_map_heap_safe_push", scope: !1548, file: !1548, line: 560, type: !3048, scopeLine: 560, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!3048 = !DISubroutineType(types: !3049)
!3049 = !{!3050, !3051, !3052}
!3050 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1561, size: 64)
!3051 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1549, size: 64)
!3052 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3053, size: 64)
!3053 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1561)
!3054 = !DILocalVariable(name: "vec_", arg: 1, scope: !3047, file: !1548, line: 560, type: !3051)
!3055 = !DILocation(line: 560, column: 1, scope: !3047)
!3056 = !DILocalVariable(name: "obj_", arg: 2, scope: !3047, file: !1548, line: 560, type: !3052)
!3057 = distinct !DISubprogram(name: "redirect_edge_var_map_clear", scope: !3, file: !3, line: 89, type: !3058, scopeLine: 90, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!3058 = !DISubroutineType(types: !3059)
!3059 = !{null, !1875}
!3060 = !DILocalVariable(name: "e", arg: 1, scope: !3057, file: !3, line: 89, type: !1875)
!3061 = !DILocation(line: 89, column: 35, scope: !3057)
!3062 = !DILocalVariable(name: "slot", scope: !3057, file: !3, line: 91, type: !2381)
!3063 = !DILocation(line: 91, column: 10, scope: !3057)
!3064 = !DILocalVariable(name: "head", scope: !3057, file: !3, line: 92, type: !1547)
!3065 = !DILocation(line: 92, column: 23, scope: !3057)
!3066 = !DILocation(line: 94, column: 8, scope: !3067)
!3067 = distinct !DILexicalBlock(scope: !3057, file: !3, line: 94, column: 7)
!3068 = !DILocation(line: 94, column: 7, scope: !3057)
!3069 = !DILocation(line: 95, column: 5, scope: !3067)
!3070 = !DILocation(line: 97, column: 32, scope: !3057)
!3071 = !DILocation(line: 97, column: 47, scope: !3057)
!3072 = !DILocation(line: 97, column: 10, scope: !3057)
!3073 = !DILocation(line: 97, column: 8, scope: !3057)
!3074 = !DILocation(line: 99, column: 7, scope: !3075)
!3075 = distinct !DILexicalBlock(scope: !3057, file: !3, line: 99, column: 7)
!3076 = !DILocation(line: 99, column: 7, scope: !3057)
!3077 = !DILocation(line: 101, column: 37, scope: !3078)
!3078 = distinct !DILexicalBlock(scope: !3075, file: !3, line: 100, column: 5)
!3079 = !DILocation(line: 101, column: 36, scope: !3078)
!3080 = !DILocation(line: 101, column: 14, scope: !3078)
!3081 = !DILocation(line: 101, column: 12, scope: !3078)
!3082 = !DILocation(line: 102, column: 7, scope: !3078)
!3083 = !DILocation(line: 103, column: 8, scope: !3078)
!3084 = !DILocation(line: 103, column: 13, scope: !3078)
!3085 = !DILocation(line: 104, column: 5, scope: !3078)
!3086 = !DILocation(line: 105, column: 1, scope: !3057)
!3087 = distinct !DISubprogram(name: "VEC_edge_var_map_heap_free", scope: !1548, file: !1548, line: 560, type: !3088, scopeLine: 560, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!3088 = !DISubroutineType(types: !3089)
!3089 = !{null, !3051}
!3090 = !DILocalVariable(name: "vec_", arg: 1, scope: !3087, file: !1548, line: 560, type: !3051)
!3091 = !DILocation(line: 560, column: 1, scope: !3087)
!3092 = !DILocation(line: 560, column: 1, scope: !3093)
!3093 = distinct !DILexicalBlock(scope: !3087, file: !1548, line: 560, column: 1)
!3094 = distinct !DISubprogram(name: "redirect_edge_var_map_dup", scope: !3, file: !3, line: 115, type: !3095, scopeLine: 116, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!3095 = !DISubroutineType(types: !3096)
!3096 = !{null, !1875, !1875}
!3097 = !DILocalVariable(name: "newe", arg: 1, scope: !3094, file: !3, line: 115, type: !1875)
!3098 = !DILocation(line: 115, column: 33, scope: !3094)
!3099 = !DILocalVariable(name: "olde", arg: 2, scope: !3094, file: !3, line: 115, type: !1875)
!3100 = !DILocation(line: 115, column: 44, scope: !3094)
!3101 = !DILocalVariable(name: "new_slot", scope: !3094, file: !3, line: 117, type: !2381)
!3102 = !DILocation(line: 117, column: 10, scope: !3094)
!3103 = !DILocalVariable(name: "old_slot", scope: !3094, file: !3, line: 117, type: !2381)
!3104 = !DILocation(line: 117, column: 22, scope: !3094)
!3105 = !DILocalVariable(name: "head", scope: !3094, file: !3, line: 118, type: !1547)
!3106 = !DILocation(line: 118, column: 23, scope: !3094)
!3107 = !DILocation(line: 120, column: 8, scope: !3108)
!3108 = distinct !DILexicalBlock(scope: !3094, file: !3, line: 120, column: 7)
!3109 = !DILocation(line: 120, column: 7, scope: !3094)
!3110 = !DILocation(line: 121, column: 5, scope: !3108)
!3111 = !DILocation(line: 123, column: 34, scope: !3094)
!3112 = !DILocation(line: 123, column: 49, scope: !3094)
!3113 = !DILocation(line: 123, column: 14, scope: !3094)
!3114 = !DILocation(line: 123, column: 12, scope: !3094)
!3115 = !DILocation(line: 124, column: 36, scope: !3094)
!3116 = !DILocation(line: 124, column: 51, scope: !3094)
!3117 = !DILocation(line: 124, column: 14, scope: !3094)
!3118 = !DILocation(line: 124, column: 12, scope: !3094)
!3119 = !DILocation(line: 125, column: 8, scope: !3120)
!3120 = distinct !DILexicalBlock(scope: !3094, file: !3, line: 125, column: 7)
!3121 = !DILocation(line: 125, column: 7, scope: !3094)
!3122 = !DILocation(line: 126, column: 5, scope: !3120)
!3123 = !DILocation(line: 127, column: 33, scope: !3094)
!3124 = !DILocation(line: 127, column: 32, scope: !3094)
!3125 = !DILocation(line: 127, column: 10, scope: !3094)
!3126 = !DILocation(line: 127, column: 8, scope: !3094)
!3127 = !DILocation(line: 129, column: 7, scope: !3128)
!3128 = distinct !DILexicalBlock(scope: !3094, file: !3, line: 129, column: 7)
!3129 = !DILocation(line: 129, column: 7, scope: !3094)
!3130 = !DILocation(line: 130, column: 17, scope: !3128)
!3131 = !DILocation(line: 130, column: 6, scope: !3128)
!3132 = !DILocation(line: 130, column: 15, scope: !3128)
!3133 = !DILocation(line: 130, column: 5, scope: !3128)
!3134 = !DILocation(line: 132, column: 17, scope: !3128)
!3135 = !DILocation(line: 132, column: 6, scope: !3128)
!3136 = !DILocation(line: 132, column: 15, scope: !3128)
!3137 = !DILocation(line: 133, column: 1, scope: !3094)
!3138 = distinct !DISubprogram(name: "VEC_edge_var_map_heap_copy", scope: !1548, file: !1548, line: 560, type: !3139, scopeLine: 560, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!3139 = !DISubroutineType(types: !3140)
!3140 = !{!1549, !3141}
!3141 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1554, size: 64)
!3142 = !DILocalVariable(name: "vec_", arg: 1, scope: !3138, file: !1548, line: 560, type: !3141)
!3143 = !DILocation(line: 560, column: 1, scope: !3138)
!3144 = !DILocalVariable(name: "len_", scope: !3138, file: !1548, line: 560, type: !2040)
!3145 = !DILocalVariable(name: "new_vec_", scope: !3138, file: !1548, line: 560, type: !1549)
!3146 = !DILocation(line: 560, column: 1, scope: !3147)
!3147 = distinct !DILexicalBlock(scope: !3138, file: !1548, line: 560, column: 1)
!3148 = !DILocation(line: 560, column: 1, scope: !3149)
!3149 = distinct !DILexicalBlock(scope: !3147, file: !1548, line: 560, column: 1)
!3150 = distinct !DISubprogram(name: "redirect_edge_var_map_vector", scope: !3, file: !3, line: 140, type: !3151, scopeLine: 141, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!3151 = !DISubroutineType(types: !3152)
!3152 = !{!1547, !1875}
!3153 = !DILocalVariable(name: "e", arg: 1, scope: !3150, file: !3, line: 140, type: !1875)
!3154 = !DILocation(line: 140, column: 36, scope: !3150)
!3155 = !DILocalVariable(name: "slot", scope: !3150, file: !3, line: 142, type: !2381)
!3156 = !DILocation(line: 142, column: 10, scope: !3150)
!3157 = !DILocation(line: 145, column: 8, scope: !3158)
!3158 = distinct !DILexicalBlock(scope: !3150, file: !3, line: 145, column: 7)
!3159 = !DILocation(line: 145, column: 7, scope: !3150)
!3160 = !DILocation(line: 146, column: 5, scope: !3158)
!3161 = !DILocation(line: 148, column: 32, scope: !3150)
!3162 = !DILocation(line: 148, column: 47, scope: !3150)
!3163 = !DILocation(line: 148, column: 10, scope: !3150)
!3164 = !DILocation(line: 148, column: 8, scope: !3150)
!3165 = !DILocation(line: 149, column: 8, scope: !3166)
!3166 = distinct !DILexicalBlock(scope: !3150, file: !3, line: 149, column: 7)
!3167 = !DILocation(line: 149, column: 7, scope: !3150)
!3168 = !DILocation(line: 150, column: 5, scope: !3166)
!3169 = !DILocation(line: 152, column: 33, scope: !3150)
!3170 = !DILocation(line: 152, column: 32, scope: !3150)
!3171 = !DILocation(line: 152, column: 10, scope: !3150)
!3172 = !DILocation(line: 152, column: 3, scope: !3150)
!3173 = !DILocation(line: 153, column: 1, scope: !3150)
!3174 = distinct !DISubprogram(name: "redirect_edge_var_map_destroy", scope: !3, file: !3, line: 170, type: !3175, scopeLine: 171, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!3175 = !DISubroutineType(types: !3176)
!3176 = !{null}
!3177 = !DILocation(line: 172, column: 7, scope: !3178)
!3178 = distinct !DILexicalBlock(scope: !3174, file: !3, line: 172, column: 7)
!3179 = !DILocation(line: 172, column: 7, scope: !3174)
!3180 = !DILocation(line: 174, column: 29, scope: !3181)
!3181 = distinct !DILexicalBlock(scope: !3178, file: !3, line: 173, column: 5)
!3182 = !DILocation(line: 174, column: 7, scope: !3181)
!3183 = !DILocation(line: 175, column: 28, scope: !3181)
!3184 = !DILocation(line: 175, column: 7, scope: !3181)
!3185 = !DILocation(line: 176, column: 21, scope: !3181)
!3186 = !DILocation(line: 177, column: 5, scope: !3181)
!3187 = !DILocation(line: 178, column: 1, scope: !3174)
!3188 = distinct !DISubprogram(name: "free_var_map_entry", scope: !3, file: !3, line: 158, type: !3189, scopeLine: 161, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!3189 = !DISubroutineType(types: !3190)
!3190 = !{!1685, !2201, !2381, !1546}
!3191 = !DILocalVariable(name: "key", arg: 1, scope: !3188, file: !3, line: 158, type: !2201)
!3192 = !DILocation(line: 158, column: 33, scope: !3188)
!3193 = !DILocalVariable(name: "value", arg: 2, scope: !3188, file: !3, line: 159, type: !2381)
!3194 = !DILocation(line: 159, column: 14, scope: !3188)
!3195 = !DILocalVariable(name: "data", arg: 3, scope: !3188, file: !3, line: 160, type: !1546)
!3196 = !DILocation(line: 160, column: 13, scope: !3188)
!3197 = !DILocalVariable(name: "head", scope: !3188, file: !3, line: 162, type: !1547)
!3198 = !DILocation(line: 162, column: 23, scope: !3188)
!3199 = !DILocation(line: 162, column: 53, scope: !3188)
!3200 = !DILocation(line: 162, column: 52, scope: !3188)
!3201 = !DILocation(line: 162, column: 30, scope: !3188)
!3202 = !DILocation(line: 163, column: 3, scope: !3188)
!3203 = !DILocation(line: 164, column: 3, scope: !3188)
!3204 = distinct !DISubprogram(name: "ssa_redirect_edge", scope: !3, file: !3, line: 187, type: !3205, scopeLine: 188, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!3205 = !DISubroutineType(types: !3206)
!3206 = !{!1875, !1875, !2327}
!3207 = !DILocalVariable(name: "e", arg: 1, scope: !3204, file: !3, line: 187, type: !1875)
!3208 = !DILocation(line: 187, column: 25, scope: !3204)
!3209 = !DILocalVariable(name: "dest", arg: 2, scope: !3204, file: !3, line: 187, type: !2327)
!3210 = !DILocation(line: 187, column: 40, scope: !3204)
!3211 = !DILocalVariable(name: "gsi", scope: !3204, file: !3, line: 189, type: !2917)
!3212 = !DILocation(line: 189, column: 24, scope: !3204)
!3213 = !DILocalVariable(name: "phi", scope: !3204, file: !3, line: 190, type: !1895)
!3214 = !DILocation(line: 190, column: 10, scope: !3204)
!3215 = !DILocation(line: 192, column: 32, scope: !3204)
!3216 = !DILocation(line: 192, column: 3, scope: !3204)
!3217 = !DILocation(line: 195, column: 30, scope: !3218)
!3218 = distinct !DILexicalBlock(scope: !3204, file: !3, line: 195, column: 3)
!3219 = !DILocation(line: 195, column: 33, scope: !3218)
!3220 = !DILocation(line: 195, column: 14, scope: !3218)
!3221 = !DILocation(line: 195, column: 8, scope: !3218)
!3222 = !DILocation(line: 195, column: 41, scope: !3223)
!3223 = distinct !DILexicalBlock(scope: !3218, file: !3, line: 195, column: 3)
!3224 = !DILocation(line: 195, column: 40, scope: !3223)
!3225 = !DILocation(line: 195, column: 3, scope: !3218)
!3226 = !DILocalVariable(name: "def", scope: !3227, file: !3, line: 197, type: !1565)
!3227 = distinct !DILexicalBlock(scope: !3223, file: !3, line: 196, column: 5)
!3228 = !DILocation(line: 197, column: 12, scope: !3227)
!3229 = !DILocalVariable(name: "locus", scope: !3227, file: !3, line: 198, type: !1695)
!3230 = !DILocation(line: 198, column: 23, scope: !3227)
!3231 = !DILocation(line: 200, column: 13, scope: !3227)
!3232 = !DILocation(line: 200, column: 11, scope: !3227)
!3233 = !DILocation(line: 201, column: 33, scope: !3227)
!3234 = !DILocation(line: 201, column: 38, scope: !3227)
!3235 = !DILocation(line: 201, column: 41, scope: !3227)
!3236 = !DILocation(line: 201, column: 13, scope: !3227)
!3237 = !DILocation(line: 201, column: 11, scope: !3227)
!3238 = !DILocation(line: 202, column: 40, scope: !3227)
!3239 = !DILocation(line: 202, column: 45, scope: !3227)
!3240 = !DILocation(line: 202, column: 48, scope: !3227)
!3241 = !DILocation(line: 202, column: 15, scope: !3227)
!3242 = !DILocation(line: 202, column: 13, scope: !3227)
!3243 = !DILocation(line: 204, column: 11, scope: !3244)
!3244 = distinct !DILexicalBlock(scope: !3227, file: !3, line: 204, column: 11)
!3245 = !DILocation(line: 204, column: 15, scope: !3244)
!3246 = !DILocation(line: 204, column: 11, scope: !3227)
!3247 = !DILocation(line: 205, column: 2, scope: !3244)
!3248 = !DILocation(line: 207, column: 34, scope: !3227)
!3249 = !DILocation(line: 207, column: 56, scope: !3227)
!3250 = !DILocation(line: 207, column: 37, scope: !3227)
!3251 = !DILocation(line: 207, column: 62, scope: !3227)
!3252 = !DILocation(line: 207, column: 67, scope: !3227)
!3253 = !DILocation(line: 207, column: 7, scope: !3227)
!3254 = !DILocation(line: 208, column: 5, scope: !3227)
!3255 = !DILocation(line: 195, column: 58, scope: !3223)
!3256 = !DILocation(line: 195, column: 3, scope: !3223)
!3257 = distinct !{!3257, !3225, !3258}
!3258 = !DILocation(line: 208, column: 5, scope: !3218)
!3259 = !DILocation(line: 210, column: 33, scope: !3204)
!3260 = !DILocation(line: 210, column: 36, scope: !3204)
!3261 = !DILocation(line: 210, column: 7, scope: !3204)
!3262 = !DILocation(line: 210, column: 5, scope: !3204)
!3263 = !DILocation(line: 212, column: 10, scope: !3204)
!3264 = !DILocation(line: 212, column: 3, scope: !3204)
!3265 = distinct !DISubprogram(name: "gsi_end_p", scope: !378, file: !378, line: 4467, type: !3266, scopeLine: 4468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!3266 = !DISubroutineType(types: !3267)
!3267 = !{!1685, !2917}
!3268 = !DILocalVariable(name: "i", arg: 1, scope: !3265, file: !378, line: 4467, type: !2917)
!3269 = !DILocation(line: 4467, column: 33, scope: !3265)
!3270 = !DILocation(line: 4469, column: 12, scope: !3265)
!3271 = !DILocation(line: 4469, column: 16, scope: !3265)
!3272 = !DILocation(line: 4469, column: 10, scope: !3265)
!3273 = !DILocation(line: 4469, column: 3, scope: !3265)
!3274 = distinct !DISubprogram(name: "gsi_stmt", scope: !378, file: !378, line: 4501, type: !3275, scopeLine: 4502, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!3275 = !DISubroutineType(types: !3276)
!3276 = !{!1895, !2917}
!3277 = !DILocalVariable(name: "i", arg: 1, scope: !3274, file: !378, line: 4501, type: !2917)
!3278 = !DILocation(line: 4501, column: 32, scope: !3274)
!3279 = !DILocation(line: 4503, column: 12, scope: !3274)
!3280 = !DILocation(line: 4503, column: 17, scope: !3274)
!3281 = !DILocation(line: 4503, column: 3, scope: !3274)
!3282 = distinct !DISubprogram(name: "gimple_phi_arg_def", scope: !3283, file: !3283, line: 450, type: !3284, scopeLine: 451, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!3283 = !DIFile(filename: "./tree-flow-inline.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3284 = !DISubroutineType(types: !3285)
!3285 = !{!1565, !1895, !2040}
!3286 = !DILocalVariable(name: "gs", arg: 1, scope: !3282, file: !3283, line: 450, type: !1895)
!3287 = !DILocation(line: 450, column: 28, scope: !3282)
!3288 = !DILocalVariable(name: "index", arg: 2, scope: !3282, file: !3283, line: 450, type: !2040)
!3289 = !DILocation(line: 450, column: 39, scope: !3282)
!3290 = !DILocalVariable(name: "pd", scope: !3282, file: !3283, line: 452, type: !3291)
!3291 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1998, size: 64)
!3292 = !DILocation(line: 452, column: 21, scope: !3282)
!3293 = !DILocation(line: 452, column: 42, scope: !3282)
!3294 = !DILocation(line: 452, column: 46, scope: !3282)
!3295 = !DILocation(line: 452, column: 26, scope: !3282)
!3296 = !DILocation(line: 453, column: 29, scope: !3282)
!3297 = !DILocation(line: 453, column: 33, scope: !3282)
!3298 = !DILocation(line: 453, column: 10, scope: !3282)
!3299 = !DILocation(line: 453, column: 3, scope: !3282)
!3300 = distinct !DISubprogram(name: "gimple_phi_arg_location", scope: !3283, file: !3283, line: 475, type: !3301, scopeLine: 476, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!3301 = !DISubroutineType(types: !3302)
!3302 = !{!1695, !1895, !2040}
!3303 = !DILocalVariable(name: "gs", arg: 1, scope: !3300, file: !3283, line: 475, type: !1895)
!3304 = !DILocation(line: 475, column: 33, scope: !3300)
!3305 = !DILocalVariable(name: "i", arg: 2, scope: !3300, file: !3283, line: 475, type: !2040)
!3306 = !DILocation(line: 475, column: 44, scope: !3300)
!3307 = !DILocation(line: 477, column: 26, scope: !3300)
!3308 = !DILocation(line: 477, column: 30, scope: !3300)
!3309 = !DILocation(line: 477, column: 10, scope: !3300)
!3310 = !DILocation(line: 477, column: 34, scope: !3300)
!3311 = !DILocation(line: 477, column: 3, scope: !3300)
!3312 = distinct !DISubprogram(name: "gimple_phi_result", scope: !378, file: !378, line: 3071, type: !3313, scopeLine: 3072, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!3313 = !DISubroutineType(types: !3314)
!3314 = !{!1565, !3315}
!3315 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple", file: !1566, line: 60, baseType: !2911)
!3316 = !DILocalVariable(name: "gs", arg: 1, scope: !3312, file: !378, line: 3071, type: !3315)
!3317 = !DILocation(line: 3071, column: 33, scope: !3312)
!3318 = !DILocation(line: 3074, column: 10, scope: !3312)
!3319 = !DILocation(line: 3074, column: 14, scope: !3312)
!3320 = !DILocation(line: 3074, column: 25, scope: !3312)
!3321 = !DILocation(line: 3074, column: 3, scope: !3312)
!3322 = distinct !DISubprogram(name: "gsi_next", scope: !378, file: !378, line: 4485, type: !3323, scopeLine: 4486, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!3323 = !DISubroutineType(types: !3324)
!3324 = !{null, !3325}
!3325 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2917, size: 64)
!3326 = !DILocalVariable(name: "i", arg: 1, scope: !3322, file: !378, line: 4485, type: !3325)
!3327 = !DILocation(line: 4485, column: 33, scope: !3322)
!3328 = !DILocation(line: 4487, column: 12, scope: !3322)
!3329 = !DILocation(line: 4487, column: 15, scope: !3322)
!3330 = !DILocation(line: 4487, column: 20, scope: !3322)
!3331 = !DILocation(line: 4487, column: 3, scope: !3322)
!3332 = !DILocation(line: 4487, column: 6, scope: !3322)
!3333 = !DILocation(line: 4487, column: 10, scope: !3322)
!3334 = !DILocation(line: 4488, column: 1, scope: !3322)
!3335 = distinct !DISubprogram(name: "flush_pending_stmts", scope: !3, file: !3, line: 220, type: !3058, scopeLine: 221, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!3336 = !DILocalVariable(name: "e", arg: 1, scope: !3335, file: !3, line: 220, type: !1875)
!3337 = !DILocation(line: 220, column: 27, scope: !3335)
!3338 = !DILocalVariable(name: "phi", scope: !3335, file: !3, line: 222, type: !1895)
!3339 = !DILocation(line: 222, column: 10, scope: !3335)
!3340 = !DILocalVariable(name: "v", scope: !3335, file: !3, line: 223, type: !1547)
!3341 = !DILocation(line: 223, column: 23, scope: !3335)
!3342 = !DILocalVariable(name: "vm", scope: !3335, file: !3, line: 224, type: !3050)
!3343 = !DILocation(line: 224, column: 17, scope: !3335)
!3344 = !DILocalVariable(name: "i", scope: !3335, file: !3, line: 225, type: !1662)
!3345 = !DILocation(line: 225, column: 7, scope: !3335)
!3346 = !DILocalVariable(name: "gsi", scope: !3335, file: !3, line: 226, type: !2917)
!3347 = !DILocation(line: 226, column: 24, scope: !3335)
!3348 = !DILocation(line: 228, column: 37, scope: !3335)
!3349 = !DILocation(line: 228, column: 7, scope: !3335)
!3350 = !DILocation(line: 228, column: 5, scope: !3335)
!3351 = !DILocation(line: 229, column: 8, scope: !3352)
!3352 = distinct !DILexicalBlock(scope: !3335, file: !3, line: 229, column: 7)
!3353 = !DILocation(line: 229, column: 7, scope: !3335)
!3354 = !DILocation(line: 230, column: 5, scope: !3352)
!3355 = !DILocation(line: 232, column: 30, scope: !3356)
!3356 = distinct !DILexicalBlock(scope: !3335, file: !3, line: 232, column: 3)
!3357 = !DILocation(line: 232, column: 33, scope: !3356)
!3358 = !DILocation(line: 232, column: 14, scope: !3356)
!3359 = !DILocation(line: 232, column: 42, scope: !3356)
!3360 = !DILocation(line: 232, column: 8, scope: !3356)
!3361 = !DILocation(line: 233, column: 9, scope: !3362)
!3362 = distinct !DILexicalBlock(scope: !3356, file: !3, line: 232, column: 3)
!3363 = !DILocation(line: 233, column: 25, scope: !3362)
!3364 = !DILocation(line: 233, column: 28, scope: !3362)
!3365 = !DILocation(line: 0, scope: !3362)
!3366 = !DILocation(line: 232, column: 3, scope: !3356)
!3367 = !DILocalVariable(name: "def", scope: !3368, file: !3, line: 236, type: !1565)
!3368 = distinct !DILexicalBlock(scope: !3362, file: !3, line: 235, column: 5)
!3369 = !DILocation(line: 236, column: 12, scope: !3368)
!3370 = !DILocation(line: 238, column: 13, scope: !3368)
!3371 = !DILocation(line: 238, column: 11, scope: !3368)
!3372 = !DILocation(line: 239, column: 40, scope: !3368)
!3373 = !DILocation(line: 239, column: 13, scope: !3368)
!3374 = !DILocation(line: 239, column: 11, scope: !3368)
!3375 = !DILocation(line: 240, column: 20, scope: !3368)
!3376 = !DILocation(line: 240, column: 25, scope: !3368)
!3377 = !DILocation(line: 240, column: 30, scope: !3368)
!3378 = !DILocation(line: 240, column: 65, scope: !3368)
!3379 = !DILocation(line: 240, column: 33, scope: !3368)
!3380 = !DILocation(line: 240, column: 7, scope: !3368)
!3381 = !DILocation(line: 241, column: 5, scope: !3368)
!3382 = !DILocation(line: 234, column: 8, scope: !3362)
!3383 = !DILocation(line: 234, column: 26, scope: !3362)
!3384 = !DILocation(line: 232, column: 3, scope: !3362)
!3385 = distinct !{!3385, !3366, !3386}
!3386 = !DILocation(line: 241, column: 5, scope: !3356)
!3387 = !DILocation(line: 243, column: 32, scope: !3335)
!3388 = !DILocation(line: 243, column: 3, scope: !3335)
!3389 = !DILocation(line: 244, column: 1, scope: !3335)
!3390 = distinct !DISubprogram(name: "VEC_edge_var_map_base_iterate", scope: !1548, file: !1548, line: 559, type: !3391, scopeLine: 559, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!3391 = !DISubroutineType(types: !3392)
!3392 = !{!1662, !3141, !7, !3393}
!3393 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3050, size: 64)
!3394 = !DILocalVariable(name: "vec_", arg: 1, scope: !3390, file: !1548, line: 559, type: !3141)
!3395 = !DILocation(line: 559, column: 1, scope: !3390)
!3396 = !DILocalVariable(name: "ix_", arg: 2, scope: !3390, file: !1548, line: 559, type: !7)
!3397 = !DILocalVariable(name: "ptr", arg: 3, scope: !3390, file: !1548, line: 559, type: !3393)
!3398 = !DILocation(line: 559, column: 1, scope: !3399)
!3399 = distinct !DILexicalBlock(scope: !3390, file: !1548, line: 559, column: 1)
!3400 = !DILocation(line: 559, column: 1, scope: !3401)
!3401 = distinct !DILexicalBlock(scope: !3399, file: !1548, line: 559, column: 1)
!3402 = !DILocation(line: 559, column: 1, scope: !3403)
!3403 = distinct !DILexicalBlock(scope: !3399, file: !1548, line: 559, column: 1)
!3404 = distinct !DISubprogram(name: "redirect_edge_var_map_def", scope: !3283, file: !3283, line: 1219, type: !3405, scopeLine: 1220, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!3405 = !DISubroutineType(types: !3406)
!3406 = !{!1565, !3050}
!3407 = !DILocalVariable(name: "v", arg: 1, scope: !3404, file: !3283, line: 1219, type: !3050)
!3408 = !DILocation(line: 1219, column: 42, scope: !3404)
!3409 = !DILocation(line: 1221, column: 10, scope: !3404)
!3410 = !DILocation(line: 1221, column: 13, scope: !3404)
!3411 = !DILocation(line: 1221, column: 3, scope: !3404)
!3412 = distinct !DISubprogram(name: "redirect_edge_var_map_location", scope: !3283, file: !3283, line: 1235, type: !3413, scopeLine: 1236, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!3413 = !DISubroutineType(types: !3414)
!3414 = !{!1695, !3050}
!3415 = !DILocalVariable(name: "v", arg: 1, scope: !3412, file: !3283, line: 1235, type: !3050)
!3416 = !DILocation(line: 1235, column: 47, scope: !3412)
!3417 = !DILocation(line: 1237, column: 10, scope: !3412)
!3418 = !DILocation(line: 1237, column: 13, scope: !3412)
!3419 = !DILocation(line: 1237, column: 3, scope: !3412)
!3420 = distinct !DISubprogram(name: "target_for_debug_bind", scope: !3, file: !3, line: 253, type: !3421, scopeLine: 254, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!3421 = !DISubroutineType(types: !3422)
!3422 = !{!1565, !1565}
!3423 = !DILocalVariable(name: "var", arg: 1, scope: !3420, file: !3, line: 253, type: !1565)
!3424 = !DILocation(line: 253, column: 29, scope: !3420)
!3425 = !DILocation(line: 255, column: 8, scope: !3426)
!3426 = distinct !DILexicalBlock(scope: !3420, file: !3, line: 255, column: 7)
!3427 = !DILocation(line: 255, column: 7, scope: !3420)
!3428 = !DILocation(line: 256, column: 5, scope: !3426)
!3429 = !DILocation(line: 258, column: 7, scope: !3430)
!3430 = distinct !DILexicalBlock(scope: !3420, file: !3, line: 258, column: 7)
!3431 = !DILocation(line: 258, column: 23, scope: !3430)
!3432 = !DILocation(line: 259, column: 7, scope: !3430)
!3433 = !DILocation(line: 259, column: 10, scope: !3430)
!3434 = !DILocation(line: 259, column: 26, scope: !3430)
!3435 = !DILocation(line: 258, column: 7, scope: !3420)
!3436 = !DILocation(line: 260, column: 5, scope: !3430)
!3437 = !DILocation(line: 262, column: 7, scope: !3438)
!3438 = distinct !DILexicalBlock(scope: !3420, file: !3, line: 262, column: 7)
!3439 = !DILocation(line: 262, column: 7, scope: !3420)
!3440 = !DILocation(line: 263, column: 35, scope: !3438)
!3441 = !DILocation(line: 263, column: 12, scope: !3438)
!3442 = !DILocation(line: 263, column: 5, scope: !3438)
!3443 = !DILocation(line: 265, column: 7, scope: !3444)
!3444 = distinct !DILexicalBlock(scope: !3420, file: !3, line: 265, column: 7)
!3445 = !DILocation(line: 265, column: 7, scope: !3420)
!3446 = !DILocation(line: 266, column: 5, scope: !3444)
!3447 = !DILocation(line: 268, column: 23, scope: !3448)
!3448 = distinct !DILexicalBlock(scope: !3420, file: !3, line: 268, column: 7)
!3449 = !DILocation(line: 268, column: 8, scope: !3448)
!3450 = !DILocation(line: 268, column: 7, scope: !3420)
!3451 = !DILocation(line: 269, column: 5, scope: !3448)
!3452 = !DILocation(line: 271, column: 10, scope: !3420)
!3453 = !DILocation(line: 271, column: 3, scope: !3420)
!3454 = !DILocation(line: 272, column: 1, scope: !3420)
!3455 = distinct !DISubprogram(name: "insert_debug_temp_for_var_def", scope: !3, file: !3, line: 303, type: !3456, scopeLine: 304, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!3456 = !DISubroutineType(types: !3457)
!3457 = !{null, !3325, !1565}
!3458 = !DILocalVariable(name: "gsi", arg: 1, scope: !3455, file: !3, line: 303, type: !3325)
!3459 = !DILocation(line: 303, column: 54, scope: !3455)
!3460 = !DILocalVariable(name: "var", arg: 2, scope: !3455, file: !3, line: 303, type: !1565)
!3461 = !DILocation(line: 303, column: 64, scope: !3455)
!3462 = !DILocalVariable(name: "imm_iter", scope: !3455, file: !3, line: 305, type: !3463)
!3463 = !DIDerivedType(tag: DW_TAG_typedef, name: "imm_use_iterator", file: !1548, line: 249, baseType: !3464)
!3464 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "immediate_use_iterator_d", file: !1548, line: 238, size: 448, elements: !3465)
!3465 = !{!3466, !3467, !3468, !3469}
!3466 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !3464, file: !1548, line: 241, baseType: !2900, size: 64)
!3467 = !DIDerivedType(tag: DW_TAG_member, name: "end_p", scope: !3464, file: !1548, line: 243, baseType: !2900, size: 64, offset: 64)
!3468 = !DIDerivedType(tag: DW_TAG_member, name: "iter_node", scope: !3464, file: !1548, line: 245, baseType: !2901, size: 256, offset: 128)
!3469 = !DIDerivedType(tag: DW_TAG_member, name: "next_imm_name", scope: !3464, file: !1548, line: 248, baseType: !2900, size: 64, offset: 384)
!3470 = !DILocation(line: 305, column: 20, scope: !3455)
!3471 = !DILocalVariable(name: "use_p", scope: !3455, file: !3, line: 306, type: !2899)
!3472 = !DILocation(line: 306, column: 17, scope: !3455)
!3473 = !DILocalVariable(name: "stmt", scope: !3455, file: !3, line: 307, type: !1895)
!3474 = !DILocation(line: 307, column: 10, scope: !3455)
!3475 = !DILocalVariable(name: "def_stmt", scope: !3455, file: !3, line: 308, type: !1895)
!3476 = !DILocation(line: 308, column: 10, scope: !3455)
!3477 = !DILocalVariable(name: "usecount", scope: !3455, file: !3, line: 309, type: !1662)
!3478 = !DILocation(line: 309, column: 7, scope: !3455)
!3479 = !DILocalVariable(name: "value", scope: !3455, file: !3, line: 310, type: !1565)
!3480 = !DILocation(line: 310, column: 8, scope: !3455)
!3481 = !DILocation(line: 312, column: 8, scope: !3482)
!3482 = distinct !DILexicalBlock(scope: !3455, file: !3, line: 312, column: 7)
!3483 = !DILocation(line: 312, column: 7, scope: !3455)
!3484 = !DILocation(line: 313, column: 5, scope: !3482)
!3485 = !DILocation(line: 317, column: 37, scope: !3486)
!3486 = distinct !DILexicalBlock(scope: !3455, file: !3, line: 317, column: 7)
!3487 = !DILocation(line: 317, column: 7, scope: !3486)
!3488 = !DILocation(line: 317, column: 7, scope: !3455)
!3489 = !DILocation(line: 318, column: 5, scope: !3486)
!3490 = !DILocation(line: 322, column: 3, scope: !3491)
!3491 = distinct !DILexicalBlock(scope: !3455, file: !3, line: 322, column: 3)
!3492 = !DILocation(line: 322, column: 3, scope: !3493)
!3493 = distinct !DILexicalBlock(scope: !3491, file: !3, line: 322, column: 3)
!3494 = !DILocation(line: 324, column: 14, scope: !3495)
!3495 = distinct !DILexicalBlock(scope: !3493, file: !3, line: 323, column: 5)
!3496 = !DILocation(line: 324, column: 12, scope: !3495)
!3497 = !DILocation(line: 326, column: 33, scope: !3498)
!3498 = distinct !DILexicalBlock(scope: !3495, file: !3, line: 326, column: 11)
!3499 = !DILocation(line: 326, column: 12, scope: !3498)
!3500 = !DILocation(line: 326, column: 11, scope: !3495)
!3501 = !DILocation(line: 327, column: 2, scope: !3498)
!3502 = !DILocation(line: 329, column: 19, scope: !3503)
!3503 = distinct !DILexicalBlock(scope: !3495, file: !3, line: 329, column: 11)
!3504 = !DILocation(line: 329, column: 11, scope: !3495)
!3505 = !DILocation(line: 330, column: 2, scope: !3503)
!3506 = !DILocation(line: 332, column: 40, scope: !3507)
!3507 = distinct !DILexicalBlock(scope: !3495, file: !3, line: 332, column: 11)
!3508 = !DILocation(line: 332, column: 11, scope: !3507)
!3509 = !DILocation(line: 332, column: 49, scope: !3507)
!3510 = !DILocation(line: 332, column: 46, scope: !3507)
!3511 = !DILocation(line: 332, column: 11, scope: !3495)
!3512 = !DILocation(line: 337, column: 12, scope: !3513)
!3513 = distinct !DILexicalBlock(scope: !3507, file: !3, line: 333, column: 2)
!3514 = !DILocation(line: 338, column: 4, scope: !3513)
!3515 = !DILocation(line: 340, column: 5, scope: !3495)
!3516 = distinct !{!3516, !3490, !3517}
!3517 = !DILocation(line: 340, column: 5, scope: !3491)
!3518 = !DILocation(line: 342, column: 8, scope: !3519)
!3519 = distinct !DILexicalBlock(scope: !3455, file: !3, line: 342, column: 7)
!3520 = !DILocation(line: 342, column: 7, scope: !3455)
!3521 = !DILocation(line: 343, column: 5, scope: !3519)
!3522 = !DILocation(line: 345, column: 7, scope: !3523)
!3523 = distinct !DILexicalBlock(scope: !3455, file: !3, line: 345, column: 7)
!3524 = !DILocation(line: 345, column: 7, scope: !3455)
!3525 = !DILocation(line: 346, column: 27, scope: !3523)
!3526 = !DILocation(line: 346, column: 16, scope: !3523)
!3527 = !DILocation(line: 346, column: 14, scope: !3523)
!3528 = !DILocation(line: 346, column: 5, scope: !3523)
!3529 = !DILocation(line: 348, column: 16, scope: !3523)
!3530 = !DILocation(line: 348, column: 14, scope: !3523)
!3531 = !DILocation(line: 353, column: 20, scope: !3532)
!3532 = distinct !DILexicalBlock(scope: !3455, file: !3, line: 353, column: 7)
!3533 = !DILocation(line: 353, column: 7, scope: !3532)
!3534 = !DILocation(line: 353, column: 30, scope: !3532)
!3535 = !DILocation(line: 353, column: 7, scope: !3455)
!3536 = !DILocation(line: 355, column: 38, scope: !3537)
!3537 = distinct !DILexicalBlock(scope: !3532, file: !3, line: 354, column: 5)
!3538 = !DILocation(line: 355, column: 15, scope: !3537)
!3539 = !DILocation(line: 355, column: 13, scope: !3537)
!3540 = !DILocation(line: 356, column: 11, scope: !3541)
!3541 = distinct !DILexicalBlock(scope: !3537, file: !3, line: 356, column: 11)
!3542 = !DILocation(line: 356, column: 17, scope: !3541)
!3543 = !DILocation(line: 356, column: 20, scope: !3541)
!3544 = !DILocation(line: 356, column: 11, scope: !3537)
!3545 = !DILocation(line: 357, column: 8, scope: !3541)
!3546 = !DILocation(line: 357, column: 2, scope: !3541)
!3547 = !DILocation(line: 358, column: 5, scope: !3537)
!3548 = !DILocation(line: 359, column: 30, scope: !3549)
!3549 = distinct !DILexicalBlock(scope: !3532, file: !3, line: 359, column: 12)
!3550 = !DILocation(line: 359, column: 12, scope: !3549)
!3551 = !DILocation(line: 359, column: 12, scope: !3532)
!3552 = !DILocalVariable(name: "no_value", scope: !3553, file: !3, line: 361, type: !1685)
!3553 = distinct !DILexicalBlock(scope: !3549, file: !3, line: 360, column: 5)
!3554 = !DILocation(line: 361, column: 12, scope: !3553)
!3555 = !DILocation(line: 363, column: 12, scope: !3556)
!3556 = distinct !DILexicalBlock(scope: !3553, file: !3, line: 363, column: 11)
!3557 = !DILocation(line: 363, column: 11, scope: !3553)
!3558 = !DILocalVariable(name: "wi", scope: !3559, file: !3, line: 365, type: !2914)
!3559 = distinct !DILexicalBlock(scope: !3556, file: !3, line: 364, column: 2)
!3560 = !DILocation(line: 365, column: 26, scope: !3559)
!3561 = !DILocation(line: 367, column: 4, scope: !3559)
!3562 = !DILocation(line: 395, column: 10, scope: !3563)
!3563 = distinct !DILexicalBlock(scope: !3559, file: !3, line: 395, column: 8)
!3564 = !DILocation(line: 395, column: 14, scope: !3563)
!3565 = !DILocation(line: 395, column: 29, scope: !3563)
!3566 = !DILocation(line: 395, column: 18, scope: !3563)
!3567 = !DILocation(line: 396, column: 8, scope: !3563)
!3568 = !DILocation(line: 396, column: 27, scope: !3563)
!3569 = !DILocation(line: 396, column: 11, scope: !3563)
!3570 = !DILocation(line: 395, column: 8, scope: !3559)
!3571 = !DILocation(line: 397, column: 15, scope: !3563)
!3572 = !DILocation(line: 397, column: 6, scope: !3563)
!3573 = !DILocation(line: 398, column: 2, scope: !3559)
!3574 = !DILocation(line: 400, column: 12, scope: !3575)
!3575 = distinct !DILexicalBlock(scope: !3553, file: !3, line: 400, column: 11)
!3576 = !DILocation(line: 400, column: 11, scope: !3553)
!3577 = !DILocation(line: 401, column: 37, scope: !3575)
!3578 = !DILocation(line: 401, column: 10, scope: !3575)
!3579 = !DILocation(line: 401, column: 8, scope: !3575)
!3580 = !DILocation(line: 401, column: 2, scope: !3575)
!3581 = !DILocation(line: 402, column: 5, scope: !3553)
!3582 = !DILocation(line: 404, column: 7, scope: !3583)
!3583 = distinct !DILexicalBlock(scope: !3455, file: !3, line: 404, column: 7)
!3584 = !DILocation(line: 404, column: 7, scope: !3455)
!3585 = !DILocation(line: 420, column: 11, scope: !3586)
!3586 = distinct !DILexicalBlock(scope: !3587, file: !3, line: 420, column: 11)
!3587 = distinct !DILexicalBlock(scope: !3583, file: !3, line: 405, column: 5)
!3588 = !DILocation(line: 421, column: 4, scope: !3586)
!3589 = !DILocation(line: 421, column: 20, scope: !3586)
!3590 = !DILocation(line: 421, column: 7, scope: !3586)
!3591 = !DILocation(line: 421, column: 30, scope: !3586)
!3592 = !DILocation(line: 422, column: 4, scope: !3586)
!3593 = !DILocation(line: 422, column: 8, scope: !3586)
!3594 = !DILocation(line: 422, column: 17, scope: !3586)
!3595 = !DILocation(line: 423, column: 8, scope: !3586)
!3596 = !DILocation(line: 423, column: 37, scope: !3586)
!3597 = !DILocation(line: 423, column: 13, scope: !3586)
!3598 = !DILocation(line: 424, column: 5, scope: !3586)
!3599 = !DILocation(line: 424, column: 33, scope: !3586)
!3600 = !DILocation(line: 424, column: 8, scope: !3586)
!3601 = !DILocation(line: 425, column: 4, scope: !3586)
!3602 = !DILocation(line: 425, column: 22, scope: !3586)
!3603 = !DILocation(line: 425, column: 7, scope: !3586)
!3604 = !DILocation(line: 420, column: 11, scope: !3587)
!3605 = !DILocation(line: 426, column: 24, scope: !3586)
!3606 = !DILocation(line: 426, column: 10, scope: !3586)
!3607 = !DILocation(line: 426, column: 8, scope: !3586)
!3608 = !DILocation(line: 426, column: 2, scope: !3586)
!3609 = !DILocalVariable(name: "def_temp", scope: !3610, file: !3, line: 429, type: !1895)
!3610 = distinct !DILexicalBlock(scope: !3586, file: !3, line: 428, column: 2)
!3611 = !DILocation(line: 429, column: 11, scope: !3610)
!3612 = !DILocalVariable(name: "vexpr", scope: !3610, file: !3, line: 430, type: !1565)
!3613 = !DILocation(line: 430, column: 9, scope: !3610)
!3614 = !DILocation(line: 430, column: 17, scope: !3610)
!3615 = !DILocation(line: 432, column: 15, scope: !3610)
!3616 = !DILocation(line: 432, column: 13, scope: !3610)
!3617 = !DILocation(line: 436, column: 4, scope: !3610)
!3618 = !DILocation(line: 436, column: 28, scope: !3610)
!3619 = !DILocation(line: 437, column: 24, scope: !3610)
!3620 = !DILocation(line: 437, column: 4, scope: !3610)
!3621 = !DILocation(line: 437, column: 22, scope: !3610)
!3622 = !DILocation(line: 438, column: 8, scope: !3623)
!3623 = distinct !DILexicalBlock(scope: !3610, file: !3, line: 438, column: 8)
!3624 = !DILocation(line: 438, column: 8, scope: !3610)
!3625 = !DILocation(line: 439, column: 26, scope: !3623)
!3626 = !DILocation(line: 439, column: 6, scope: !3623)
!3627 = !DILocation(line: 439, column: 24, scope: !3623)
!3628 = !DILocation(line: 441, column: 26, scope: !3623)
!3629 = !DILocation(line: 441, column: 6, scope: !3623)
!3630 = !DILocation(line: 441, column: 24, scope: !3623)
!3631 = !DILocation(line: 443, column: 8, scope: !3632)
!3632 = distinct !DILexicalBlock(scope: !3610, file: !3, line: 443, column: 8)
!3633 = !DILocation(line: 443, column: 8, scope: !3610)
!3634 = !DILocation(line: 444, column: 25, scope: !3632)
!3635 = !DILocation(line: 444, column: 30, scope: !3632)
!3636 = !DILocation(line: 444, column: 6, scope: !3632)
!3637 = !DILocalVariable(name: "ngsi", scope: !3638, file: !3, line: 447, type: !2917)
!3638 = distinct !DILexicalBlock(scope: !3632, file: !3, line: 446, column: 6)
!3639 = !DILocation(line: 447, column: 29, scope: !3638)
!3640 = !DILocation(line: 447, column: 50, scope: !3638)
!3641 = !DILocation(line: 447, column: 36, scope: !3638)
!3642 = !DILocation(line: 448, column: 34, scope: !3638)
!3643 = !DILocation(line: 448, column: 8, scope: !3638)
!3644 = !DILocation(line: 451, column: 12, scope: !3610)
!3645 = !DILocation(line: 451, column: 10, scope: !3610)
!3646 = !DILocation(line: 453, column: 5, scope: !3587)
!3647 = !DILocation(line: 455, column: 3, scope: !3648)
!3648 = distinct !DILexicalBlock(scope: !3455, file: !3, line: 455, column: 3)
!3649 = !DILocation(line: 455, column: 3, scope: !3650)
!3650 = distinct !DILexicalBlock(scope: !3648, file: !3, line: 455, column: 3)
!3651 = !DILocation(line: 457, column: 33, scope: !3652)
!3652 = distinct !DILexicalBlock(scope: !3653, file: !3, line: 457, column: 11)
!3653 = distinct !DILexicalBlock(scope: !3650, file: !3, line: 456, column: 5)
!3654 = !DILocation(line: 457, column: 12, scope: !3652)
!3655 = !DILocation(line: 457, column: 11, scope: !3653)
!3656 = !DILocation(line: 458, column: 2, scope: !3652)
!3657 = !DILocation(line: 460, column: 11, scope: !3658)
!3658 = distinct !DILexicalBlock(scope: !3653, file: !3, line: 460, column: 11)
!3659 = !DILocation(line: 460, column: 11, scope: !3653)
!3660 = !DILocation(line: 461, column: 2, scope: !3661)
!3661 = distinct !DILexicalBlock(scope: !3658, file: !3, line: 461, column: 2)
!3662 = !DILocation(line: 461, column: 2, scope: !3663)
!3663 = distinct !DILexicalBlock(scope: !3661, file: !3, line: 461, column: 2)
!3664 = !DILocation(line: 467, column: 4, scope: !3663)
!3665 = distinct !{!3665, !3660, !3666}
!3666 = !DILocation(line: 467, column: 4, scope: !3661)
!3667 = !DILocation(line: 469, column: 33, scope: !3658)
!3668 = !DILocation(line: 469, column: 2, scope: !3658)
!3669 = !DILocation(line: 471, column: 20, scope: !3653)
!3670 = !DILocation(line: 471, column: 7, scope: !3653)
!3671 = !DILocation(line: 472, column: 5, scope: !3653)
!3672 = distinct !{!3672, !3647, !3673}
!3673 = !DILocation(line: 472, column: 5, scope: !3648)
!3674 = !DILocation(line: 473, column: 1, scope: !3455)
!3675 = distinct !DISubprogram(name: "first_readonly_imm_use", scope: !3283, file: !3283, line: 292, type: !3676, scopeLine: 293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!3676 = !DISubroutineType(types: !3677)
!3677 = !{!2899, !3678, !1565}
!3678 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3463, size: 64)
!3679 = !DILocalVariable(name: "imm", arg: 1, scope: !3675, file: !3283, line: 292, type: !3678)
!3680 = !DILocation(line: 292, column: 43, scope: !3675)
!3681 = !DILocalVariable(name: "var", arg: 2, scope: !3675, file: !3283, line: 292, type: !1565)
!3682 = !DILocation(line: 292, column: 53, scope: !3675)
!3683 = !DILocation(line: 294, column: 18, scope: !3675)
!3684 = !DILocation(line: 294, column: 3, scope: !3675)
!3685 = !DILocation(line: 294, column: 8, scope: !3675)
!3686 = !DILocation(line: 294, column: 14, scope: !3675)
!3687 = !DILocation(line: 295, column: 18, scope: !3675)
!3688 = !DILocation(line: 295, column: 23, scope: !3675)
!3689 = !DILocation(line: 295, column: 30, scope: !3675)
!3690 = !DILocation(line: 295, column: 3, scope: !3675)
!3691 = !DILocation(line: 295, column: 8, scope: !3675)
!3692 = !DILocation(line: 295, column: 16, scope: !3675)
!3693 = !DILocation(line: 299, column: 31, scope: !3694)
!3694 = distinct !DILexicalBlock(scope: !3675, file: !3283, line: 299, column: 7)
!3695 = !DILocation(line: 299, column: 7, scope: !3694)
!3696 = !DILocation(line: 299, column: 7, scope: !3675)
!3697 = !DILocation(line: 300, column: 5, scope: !3694)
!3698 = !DILocation(line: 301, column: 10, scope: !3675)
!3699 = !DILocation(line: 301, column: 15, scope: !3675)
!3700 = !DILocation(line: 301, column: 3, scope: !3675)
!3701 = !DILocation(line: 302, column: 1, scope: !3675)
!3702 = distinct !DISubprogram(name: "end_readonly_imm_use_p", scope: !3283, file: !3283, line: 285, type: !3703, scopeLine: 286, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!3703 = !DISubroutineType(types: !3704)
!3704 = !{!1685, !3705}
!3705 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3706, size: 64)
!3706 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3463)
!3707 = !DILocalVariable(name: "imm", arg: 1, scope: !3702, file: !3283, line: 285, type: !3705)
!3708 = !DILocation(line: 285, column: 49, scope: !3702)
!3709 = !DILocation(line: 287, column: 11, scope: !3702)
!3710 = !DILocation(line: 287, column: 16, scope: !3702)
!3711 = !DILocation(line: 287, column: 27, scope: !3702)
!3712 = !DILocation(line: 287, column: 32, scope: !3702)
!3713 = !DILocation(line: 287, column: 24, scope: !3702)
!3714 = !DILocation(line: 287, column: 10, scope: !3702)
!3715 = !DILocation(line: 287, column: 3, scope: !3702)
!3716 = distinct !DISubprogram(name: "gimple_debug_bind_p", scope: !378, file: !378, line: 3257, type: !3717, scopeLine: 3258, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!3717 = !DISubroutineType(types: !3718)
!3718 = !{!1685, !3315}
!3719 = !DILocalVariable(name: "s", arg: 1, scope: !3716, file: !378, line: 3257, type: !3315)
!3720 = !DILocation(line: 3257, column: 35, scope: !3716)
!3721 = !DILocation(line: 3259, column: 24, scope: !3722)
!3722 = distinct !DILexicalBlock(scope: !3716, file: !378, line: 3259, column: 7)
!3723 = !DILocation(line: 3259, column: 7, scope: !3722)
!3724 = !DILocation(line: 3259, column: 7, scope: !3716)
!3725 = !DILocation(line: 3260, column: 12, scope: !3722)
!3726 = !DILocation(line: 3260, column: 15, scope: !3722)
!3727 = !DILocation(line: 3260, column: 22, scope: !3722)
!3728 = !DILocation(line: 3260, column: 30, scope: !3722)
!3729 = !DILocation(line: 3260, column: 5, scope: !3722)
!3730 = !DILocation(line: 3262, column: 3, scope: !3716)
!3731 = !DILocation(line: 3263, column: 1, scope: !3716)
!3732 = distinct !DISubprogram(name: "gimple_debug_bind_get_value", scope: !378, file: !378, line: 3281, type: !3733, scopeLine: 3282, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!3733 = !DISubroutineType(types: !3734)
!3734 = !{!1565, !1895}
!3735 = !DILocalVariable(name: "dbg", arg: 1, scope: !3732, file: !378, line: 3281, type: !1895)
!3736 = !DILocation(line: 3281, column: 37, scope: !3732)
!3737 = !DILocation(line: 3287, column: 21, scope: !3732)
!3738 = !DILocation(line: 3287, column: 10, scope: !3732)
!3739 = !DILocation(line: 3287, column: 3, scope: !3732)
!3740 = distinct !DISubprogram(name: "next_readonly_imm_use", scope: !3283, file: !3283, line: 306, type: !3741, scopeLine: 307, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!3741 = !DISubroutineType(types: !3742)
!3742 = !{!2899, !3678}
!3743 = !DILocalVariable(name: "imm", arg: 1, scope: !3740, file: !3283, line: 306, type: !3678)
!3744 = !DILocation(line: 306, column: 42, scope: !3740)
!3745 = !DILocalVariable(name: "old", scope: !3740, file: !3283, line: 308, type: !2899)
!3746 = !DILocation(line: 308, column: 17, scope: !3740)
!3747 = !DILocation(line: 308, column: 23, scope: !3740)
!3748 = !DILocation(line: 308, column: 28, scope: !3740)
!3749 = !DILocation(line: 319, column: 18, scope: !3740)
!3750 = !DILocation(line: 319, column: 23, scope: !3740)
!3751 = !DILocation(line: 319, column: 3, scope: !3740)
!3752 = !DILocation(line: 319, column: 8, scope: !3740)
!3753 = !DILocation(line: 319, column: 16, scope: !3740)
!3754 = !DILocation(line: 320, column: 31, scope: !3755)
!3755 = distinct !DILexicalBlock(scope: !3740, file: !3283, line: 320, column: 7)
!3756 = !DILocation(line: 320, column: 7, scope: !3755)
!3757 = !DILocation(line: 320, column: 7, scope: !3740)
!3758 = !DILocation(line: 321, column: 5, scope: !3755)
!3759 = !DILocation(line: 322, column: 10, scope: !3740)
!3760 = !DILocation(line: 322, column: 15, scope: !3740)
!3761 = !DILocation(line: 322, column: 3, scope: !3740)
!3762 = !DILocation(line: 323, column: 1, scope: !3740)
!3763 = distinct !DISubprogram(name: "gimple_code", scope: !378, file: !378, line: 1052, type: !3764, scopeLine: 1053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!3764 = !DISubroutineType(types: !3765)
!3765 = !{!377, !3315}
!3766 = !DILocalVariable(name: "g", arg: 1, scope: !3763, file: !378, line: 1052, type: !3315)
!3767 = !DILocation(line: 1052, column: 27, scope: !3763)
!3768 = !DILocation(line: 1054, column: 10, scope: !3763)
!3769 = !DILocation(line: 1054, column: 13, scope: !3763)
!3770 = !DILocation(line: 1054, column: 20, scope: !3763)
!3771 = !DILocation(line: 1054, column: 3, scope: !3763)
!3772 = distinct !DISubprogram(name: "find_released_ssa_name", scope: !3, file: !3, line: 278, type: !3773, scopeLine: 279, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!3773 = !DISubroutineType(types: !3774)
!3774 = !{!1565, !1929, !3775, !1546}
!3775 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1662, size: 64)
!3776 = !DILocalVariable(name: "tp", arg: 1, scope: !3772, file: !3, line: 278, type: !1929)
!3777 = !DILocation(line: 278, column: 31, scope: !3772)
!3778 = !DILocalVariable(name: "walk_subtrees", arg: 2, scope: !3772, file: !3, line: 278, type: !3775)
!3779 = !DILocation(line: 278, column: 40, scope: !3772)
!3780 = !DILocalVariable(name: "data_", arg: 3, scope: !3772, file: !3, line: 278, type: !1546)
!3781 = !DILocation(line: 278, column: 61, scope: !3772)
!3782 = !DILocalVariable(name: "wi", scope: !3772, file: !3, line: 280, type: !2913)
!3783 = !DILocation(line: 280, column: 26, scope: !3772)
!3784 = !DILocation(line: 280, column: 57, scope: !3772)
!3785 = !DILocation(line: 280, column: 31, scope: !3772)
!3786 = !DILocation(line: 282, column: 7, scope: !3787)
!3787 = distinct !DILexicalBlock(scope: !3772, file: !3, line: 282, column: 7)
!3788 = !DILocation(line: 282, column: 10, scope: !3787)
!3789 = !DILocation(line: 282, column: 13, scope: !3787)
!3790 = !DILocation(line: 282, column: 17, scope: !3787)
!3791 = !DILocation(line: 282, column: 7, scope: !3772)
!3792 = !DILocation(line: 283, column: 5, scope: !3787)
!3793 = !DILocation(line: 285, column: 7, scope: !3794)
!3794 = distinct !DILexicalBlock(scope: !3772, file: !3, line: 285, column: 7)
!3795 = !DILocation(line: 285, column: 23, scope: !3794)
!3796 = !DILocation(line: 285, column: 7, scope: !3772)
!3797 = !DILocation(line: 287, column: 11, scope: !3798)
!3798 = distinct !DILexicalBlock(scope: !3799, file: !3, line: 287, column: 11)
!3799 = distinct !DILexicalBlock(scope: !3794, file: !3, line: 286, column: 5)
!3800 = !DILocation(line: 287, column: 11, scope: !3799)
!3801 = !DILocation(line: 288, column: 10, scope: !3798)
!3802 = !DILocation(line: 288, column: 9, scope: !3798)
!3803 = !DILocation(line: 288, column: 2, scope: !3798)
!3804 = !DILocation(line: 290, column: 8, scope: !3799)
!3805 = !DILocation(line: 290, column: 22, scope: !3799)
!3806 = !DILocation(line: 291, column: 5, scope: !3799)
!3807 = !DILocation(line: 292, column: 12, scope: !3808)
!3808 = distinct !DILexicalBlock(scope: !3794, file: !3, line: 292, column: 12)
!3809 = !DILocation(line: 292, column: 12, scope: !3794)
!3810 = !DILocation(line: 293, column: 6, scope: !3808)
!3811 = !DILocation(line: 293, column: 20, scope: !3808)
!3812 = !DILocation(line: 293, column: 5, scope: !3808)
!3813 = !DILocation(line: 295, column: 3, scope: !3772)
!3814 = !DILocation(line: 296, column: 1, scope: !3772)
!3815 = distinct !DISubprogram(name: "is_gimple_assign", scope: !378, file: !378, line: 1677, type: !3717, scopeLine: 1678, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!3816 = !DILocalVariable(name: "gs", arg: 1, scope: !3815, file: !378, line: 1677, type: !3315)
!3817 = !DILocation(line: 1677, column: 32, scope: !3815)
!3818 = !DILocation(line: 1679, column: 23, scope: !3815)
!3819 = !DILocation(line: 1679, column: 10, scope: !3815)
!3820 = !DILocation(line: 1679, column: 27, scope: !3815)
!3821 = !DILocation(line: 1679, column: 3, scope: !3815)
!3822 = distinct !DISubprogram(name: "gimple_bb", scope: !378, file: !378, line: 1112, type: !3823, scopeLine: 1113, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!3823 = !DISubroutineType(types: !3824)
!3824 = !{!1859, !3315}
!3825 = !DILocalVariable(name: "g", arg: 1, scope: !3822, file: !378, line: 1112, type: !3315)
!3826 = !DILocation(line: 1112, column: 25, scope: !3822)
!3827 = !DILocation(line: 1114, column: 10, scope: !3822)
!3828 = !DILocation(line: 1114, column: 13, scope: !3822)
!3829 = !DILocation(line: 1114, column: 20, scope: !3822)
!3830 = !DILocation(line: 1114, column: 3, scope: !3822)
!3831 = distinct !DISubprogram(name: "first_imm_use_stmt", scope: !3283, file: !3283, line: 1058, type: !3832, scopeLine: 1059, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!3832 = !DISubroutineType(types: !3833)
!3833 = !{!1895, !3678, !1565}
!3834 = !DILocalVariable(name: "imm", arg: 1, scope: !3831, file: !3283, line: 1058, type: !3678)
!3835 = !DILocation(line: 1058, column: 39, scope: !3831)
!3836 = !DILocalVariable(name: "var", arg: 2, scope: !3831, file: !3283, line: 1058, type: !1565)
!3837 = !DILocation(line: 1058, column: 49, scope: !3831)
!3838 = !DILocation(line: 1060, column: 18, scope: !3831)
!3839 = !DILocation(line: 1060, column: 3, scope: !3831)
!3840 = !DILocation(line: 1060, column: 8, scope: !3831)
!3841 = !DILocation(line: 1060, column: 14, scope: !3831)
!3842 = !DILocation(line: 1061, column: 18, scope: !3831)
!3843 = !DILocation(line: 1061, column: 23, scope: !3831)
!3844 = !DILocation(line: 1061, column: 30, scope: !3831)
!3845 = !DILocation(line: 1061, column: 3, scope: !3831)
!3846 = !DILocation(line: 1061, column: 8, scope: !3831)
!3847 = !DILocation(line: 1061, column: 16, scope: !3831)
!3848 = !DILocation(line: 1062, column: 3, scope: !3831)
!3849 = !DILocation(line: 1062, column: 8, scope: !3831)
!3850 = !DILocation(line: 1062, column: 22, scope: !3831)
!3851 = !DILocation(line: 1067, column: 3, scope: !3831)
!3852 = !DILocation(line: 1067, column: 8, scope: !3831)
!3853 = !DILocation(line: 1067, column: 18, scope: !3831)
!3854 = !DILocation(line: 1067, column: 23, scope: !3831)
!3855 = !DILocation(line: 1068, column: 3, scope: !3831)
!3856 = !DILocation(line: 1068, column: 8, scope: !3831)
!3857 = !DILocation(line: 1068, column: 18, scope: !3831)
!3858 = !DILocation(line: 1068, column: 23, scope: !3831)
!3859 = !DILocation(line: 1069, column: 3, scope: !3831)
!3860 = !DILocation(line: 1069, column: 8, scope: !3831)
!3861 = !DILocation(line: 1069, column: 18, scope: !3831)
!3862 = !DILocation(line: 1069, column: 22, scope: !3831)
!3863 = !DILocation(line: 1069, column: 27, scope: !3831)
!3864 = !DILocation(line: 1070, column: 3, scope: !3831)
!3865 = !DILocation(line: 1070, column: 8, scope: !3831)
!3866 = !DILocation(line: 1070, column: 18, scope: !3831)
!3867 = !DILocation(line: 1070, column: 22, scope: !3831)
!3868 = !DILocation(line: 1072, column: 27, scope: !3869)
!3869 = distinct !DILexicalBlock(scope: !3831, file: !3283, line: 1072, column: 7)
!3870 = !DILocation(line: 1072, column: 7, scope: !3869)
!3871 = !DILocation(line: 1072, column: 7, scope: !3831)
!3872 = !DILocation(line: 1073, column: 5, scope: !3869)
!3873 = !DILocation(line: 1075, column: 25, scope: !3831)
!3874 = !DILocation(line: 1075, column: 30, scope: !3831)
!3875 = !DILocation(line: 1075, column: 39, scope: !3831)
!3876 = !DILocation(line: 1075, column: 3, scope: !3831)
!3877 = !DILocation(line: 1077, column: 10, scope: !3831)
!3878 = !DILocation(line: 1077, column: 3, scope: !3831)
!3879 = !DILocation(line: 1078, column: 1, scope: !3831)
!3880 = distinct !DISubprogram(name: "end_imm_use_stmt_p", scope: !3283, file: !3283, line: 969, type: !3703, scopeLine: 970, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!3881 = !DILocalVariable(name: "imm", arg: 1, scope: !3880, file: !3283, line: 969, type: !3705)
!3882 = !DILocation(line: 969, column: 45, scope: !3880)
!3883 = !DILocation(line: 971, column: 11, scope: !3880)
!3884 = !DILocation(line: 971, column: 16, scope: !3880)
!3885 = !DILocation(line: 971, column: 27, scope: !3880)
!3886 = !DILocation(line: 971, column: 32, scope: !3880)
!3887 = !DILocation(line: 971, column: 24, scope: !3880)
!3888 = !DILocation(line: 971, column: 10, scope: !3880)
!3889 = !DILocation(line: 971, column: 3, scope: !3880)
!3890 = distinct !DISubprogram(name: "first_imm_use_on_stmt", scope: !3283, file: !3283, line: 1101, type: !3741, scopeLine: 1102, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!3891 = !DILocalVariable(name: "imm", arg: 1, scope: !3890, file: !3283, line: 1101, type: !3678)
!3892 = !DILocation(line: 1101, column: 42, scope: !3890)
!3893 = !DILocation(line: 1103, column: 24, scope: !3890)
!3894 = !DILocation(line: 1103, column: 29, scope: !3890)
!3895 = !DILocation(line: 1103, column: 38, scope: !3890)
!3896 = !DILocation(line: 1103, column: 3, scope: !3890)
!3897 = !DILocation(line: 1103, column: 8, scope: !3890)
!3898 = !DILocation(line: 1103, column: 22, scope: !3890)
!3899 = !DILocation(line: 1104, column: 10, scope: !3890)
!3900 = !DILocation(line: 1104, column: 15, scope: !3890)
!3901 = !DILocation(line: 1104, column: 3, scope: !3890)
!3902 = distinct !DISubprogram(name: "end_imm_use_on_stmt_p", scope: !3283, file: !3283, line: 1110, type: !3703, scopeLine: 1111, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!3903 = !DILocalVariable(name: "imm", arg: 1, scope: !3902, file: !3283, line: 1110, type: !3705)
!3904 = !DILocation(line: 1110, column: 48, scope: !3902)
!3905 = !DILocation(line: 1112, column: 11, scope: !3902)
!3906 = !DILocation(line: 1112, column: 16, scope: !3902)
!3907 = !DILocation(line: 1112, column: 29, scope: !3902)
!3908 = !DILocation(line: 1112, column: 34, scope: !3902)
!3909 = !DILocation(line: 1112, column: 24, scope: !3902)
!3910 = !DILocation(line: 1112, column: 10, scope: !3902)
!3911 = !DILocation(line: 1112, column: 3, scope: !3902)
!3912 = distinct !DISubprogram(name: "set_ssa_use_from_ptr", scope: !3283, file: !3283, line: 233, type: !3913, scopeLine: 234, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!3913 = !DISubroutineType(types: !3914)
!3914 = !{null, !2899, !1565}
!3915 = !DILocalVariable(name: "use", arg: 1, scope: !3912, file: !3283, line: 233, type: !2899)
!3916 = !DILocation(line: 233, column: 37, scope: !3912)
!3917 = !DILocalVariable(name: "val", arg: 2, scope: !3912, file: !3283, line: 233, type: !1565)
!3918 = !DILocation(line: 233, column: 47, scope: !3912)
!3919 = !DILocation(line: 235, column: 19, scope: !3912)
!3920 = !DILocation(line: 235, column: 3, scope: !3912)
!3921 = !DILocation(line: 236, column: 17, scope: !3912)
!3922 = !DILocation(line: 236, column: 5, scope: !3912)
!3923 = !DILocation(line: 236, column: 10, scope: !3912)
!3924 = !DILocation(line: 236, column: 15, scope: !3912)
!3925 = !DILocation(line: 237, column: 17, scope: !3912)
!3926 = !DILocation(line: 237, column: 22, scope: !3912)
!3927 = !DILocation(line: 237, column: 3, scope: !3912)
!3928 = !DILocation(line: 238, column: 1, scope: !3912)
!3929 = distinct !DISubprogram(name: "next_imm_use_on_stmt", scope: !3283, file: !3283, line: 1118, type: !3741, scopeLine: 1119, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!3930 = !DILocalVariable(name: "imm", arg: 1, scope: !3929, file: !3283, line: 1118, type: !3678)
!3931 = !DILocation(line: 1118, column: 41, scope: !3929)
!3932 = !DILocation(line: 1120, column: 18, scope: !3929)
!3933 = !DILocation(line: 1120, column: 23, scope: !3929)
!3934 = !DILocation(line: 1120, column: 3, scope: !3929)
!3935 = !DILocation(line: 1120, column: 8, scope: !3929)
!3936 = !DILocation(line: 1120, column: 16, scope: !3929)
!3937 = !DILocation(line: 1121, column: 30, scope: !3938)
!3938 = distinct !DILexicalBlock(scope: !3929, file: !3283, line: 1121, column: 7)
!3939 = !DILocation(line: 1121, column: 7, scope: !3938)
!3940 = !DILocation(line: 1121, column: 7, scope: !3929)
!3941 = !DILocation(line: 1122, column: 5, scope: !3938)
!3942 = !DILocation(line: 1125, column: 28, scope: !3943)
!3943 = distinct !DILexicalBlock(scope: !3938, file: !3283, line: 1124, column: 5)
!3944 = !DILocation(line: 1125, column: 33, scope: !3943)
!3945 = !DILocation(line: 1125, column: 42, scope: !3943)
!3946 = !DILocation(line: 1125, column: 7, scope: !3943)
!3947 = !DILocation(line: 1125, column: 12, scope: !3943)
!3948 = !DILocation(line: 1125, column: 26, scope: !3943)
!3949 = !DILocation(line: 1126, column: 14, scope: !3943)
!3950 = !DILocation(line: 1126, column: 19, scope: !3943)
!3951 = !DILocation(line: 1126, column: 7, scope: !3943)
!3952 = !DILocation(line: 1128, column: 1, scope: !3929)
!3953 = distinct !DISubprogram(name: "gimple_debug_bind_reset_value", scope: !378, file: !378, line: 3336, type: !3954, scopeLine: 3337, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!3954 = !DISubroutineType(types: !3955)
!3955 = !{null, !1895}
!3956 = !DILocalVariable(name: "dbg", arg: 1, scope: !3953, file: !378, line: 3336, type: !1895)
!3957 = !DILocation(line: 3336, column: 39, scope: !3953)
!3958 = !DILocation(line: 3342, column: 18, scope: !3953)
!3959 = !DILocation(line: 3342, column: 3, scope: !3953)
!3960 = !DILocation(line: 3343, column: 1, scope: !3953)
!3961 = distinct !DISubprogram(name: "update_stmt", scope: !378, file: !378, line: 1456, type: !3954, scopeLine: 1457, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!3962 = !DILocalVariable(name: "s", arg: 1, scope: !3961, file: !378, line: 1456, type: !1895)
!3963 = !DILocation(line: 1456, column: 21, scope: !3961)
!3964 = !DILocation(line: 1458, column: 23, scope: !3965)
!3965 = distinct !DILexicalBlock(scope: !3961, file: !378, line: 1458, column: 7)
!3966 = !DILocation(line: 1458, column: 7, scope: !3965)
!3967 = !DILocation(line: 1458, column: 7, scope: !3961)
!3968 = !DILocation(line: 1460, column: 28, scope: !3969)
!3969 = distinct !DILexicalBlock(scope: !3965, file: !378, line: 1459, column: 5)
!3970 = !DILocation(line: 1460, column: 7, scope: !3969)
!3971 = !DILocation(line: 1461, column: 29, scope: !3969)
!3972 = !DILocation(line: 1461, column: 7, scope: !3969)
!3973 = !DILocation(line: 1462, column: 5, scope: !3969)
!3974 = !DILocation(line: 1463, column: 1, scope: !3961)
!3975 = distinct !DISubprogram(name: "next_imm_use_stmt", scope: !3283, file: !3283, line: 1083, type: !3976, scopeLine: 1084, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!3976 = !DISubroutineType(types: !3977)
!3977 = !{!1895, !3678}
!3978 = !DILocalVariable(name: "imm", arg: 1, scope: !3975, file: !3283, line: 1083, type: !3678)
!3979 = !DILocation(line: 1083, column: 38, scope: !3975)
!3980 = !DILocation(line: 1085, column: 18, scope: !3975)
!3981 = !DILocation(line: 1085, column: 23, scope: !3975)
!3982 = !DILocation(line: 1085, column: 33, scope: !3975)
!3983 = !DILocation(line: 1085, column: 3, scope: !3975)
!3984 = !DILocation(line: 1085, column: 8, scope: !3975)
!3985 = !DILocation(line: 1085, column: 16, scope: !3975)
!3986 = !DILocation(line: 1086, column: 27, scope: !3987)
!3987 = distinct !DILexicalBlock(scope: !3975, file: !3283, line: 1086, column: 7)
!3988 = !DILocation(line: 1086, column: 7, scope: !3987)
!3989 = !DILocation(line: 1086, column: 7, scope: !3975)
!3990 = !DILocation(line: 1088, column: 11, scope: !3991)
!3991 = distinct !DILexicalBlock(scope: !3992, file: !3283, line: 1088, column: 11)
!3992 = distinct !DILexicalBlock(scope: !3987, file: !3283, line: 1087, column: 5)
!3993 = !DILocation(line: 1088, column: 16, scope: !3991)
!3994 = !DILocation(line: 1088, column: 26, scope: !3991)
!3995 = !DILocation(line: 1088, column: 31, scope: !3991)
!3996 = !DILocation(line: 1088, column: 11, scope: !3992)
!3997 = !DILocation(line: 1089, column: 19, scope: !3991)
!3998 = !DILocation(line: 1089, column: 24, scope: !3991)
!3999 = !DILocation(line: 1089, column: 2, scope: !3991)
!4000 = !DILocation(line: 1090, column: 7, scope: !3992)
!4001 = !DILocation(line: 1093, column: 25, scope: !3975)
!4002 = !DILocation(line: 1093, column: 30, scope: !3975)
!4003 = !DILocation(line: 1093, column: 39, scope: !3975)
!4004 = !DILocation(line: 1093, column: 3, scope: !3975)
!4005 = !DILocation(line: 1094, column: 10, scope: !3975)
!4006 = !DILocation(line: 1094, column: 3, scope: !3975)
!4007 = !DILocation(line: 1095, column: 1, scope: !3975)
!4008 = distinct !DISubprogram(name: "insert_debug_temps_for_defs", scope: !3, file: !3, line: 481, type: !3323, scopeLine: 482, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!4009 = !DILocalVariable(name: "gsi", arg: 1, scope: !4008, file: !3, line: 481, type: !3325)
!4010 = !DILocation(line: 481, column: 52, scope: !4008)
!4011 = !DILocalVariable(name: "stmt", scope: !4008, file: !3, line: 483, type: !1895)
!4012 = !DILocation(line: 483, column: 10, scope: !4008)
!4013 = !DILocalVariable(name: "op_iter", scope: !4008, file: !3, line: 484, type: !4014)
!4014 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_op_iter", file: !439, line: 140, baseType: !4015)
!4015 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_iterator_d", file: !439, line: 131, size: 320, elements: !4016)
!4016 = !{!4017, !4018, !4019, !4021, !4023, !4024, !4025}
!4017 = !DIDerivedType(tag: DW_TAG_member, name: "done", scope: !4015, file: !439, line: 133, baseType: !1685, size: 8)
!4018 = !DIDerivedType(tag: DW_TAG_member, name: "iter_type", scope: !4015, file: !439, line: 134, baseType: !438, size: 32, offset: 32)
!4019 = !DIDerivedType(tag: DW_TAG_member, name: "defs", scope: !4015, file: !439, line: 135, baseType: !4020, size: 64, offset: 64)
!4020 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_optype_p", file: !439, line: 42, baseType: !1924)
!4021 = !DIDerivedType(tag: DW_TAG_member, name: "uses", scope: !4015, file: !439, line: 136, baseType: !4022, size: 64, offset: 128)
!4022 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_optype_p", file: !439, line: 50, baseType: !1931)
!4023 = !DIDerivedType(tag: DW_TAG_member, name: "phi_i", scope: !4015, file: !439, line: 137, baseType: !1662, size: 32, offset: 192)
!4024 = !DIDerivedType(tag: DW_TAG_member, name: "num_phi", scope: !4015, file: !439, line: 138, baseType: !1662, size: 32, offset: 224)
!4025 = !DIDerivedType(tag: DW_TAG_member, name: "phi_stmt", scope: !4015, file: !439, line: 139, baseType: !1895, size: 64, offset: 256)
!4026 = !DILocation(line: 484, column: 15, scope: !4008)
!4027 = !DILocalVariable(name: "def_p", scope: !4008, file: !3, line: 485, type: !2898)
!4028 = !DILocation(line: 485, column: 17, scope: !4008)
!4029 = !DILocation(line: 487, column: 8, scope: !4030)
!4030 = distinct !DILexicalBlock(scope: !4008, file: !3, line: 487, column: 7)
!4031 = !DILocation(line: 487, column: 7, scope: !4008)
!4032 = !DILocation(line: 488, column: 5, scope: !4030)
!4033 = !DILocation(line: 490, column: 21, scope: !4008)
!4034 = !DILocation(line: 490, column: 10, scope: !4008)
!4035 = !DILocation(line: 490, column: 8, scope: !4008)
!4036 = !DILocation(line: 492, column: 3, scope: !4037)
!4037 = distinct !DILexicalBlock(scope: !4008, file: !3, line: 492, column: 3)
!4038 = !DILocation(line: 492, column: 3, scope: !4039)
!4039 = distinct !DILexicalBlock(scope: !4037, file: !3, line: 492, column: 3)
!4040 = !DILocalVariable(name: "var", scope: !4041, file: !3, line: 494, type: !1565)
!4041 = distinct !DILexicalBlock(scope: !4039, file: !3, line: 493, column: 5)
!4042 = !DILocation(line: 494, column: 12, scope: !4041)
!4043 = !DILocation(line: 494, column: 18, scope: !4041)
!4044 = !DILocation(line: 496, column: 11, scope: !4045)
!4045 = distinct !DILexicalBlock(scope: !4041, file: !3, line: 496, column: 11)
!4046 = !DILocation(line: 496, column: 27, scope: !4045)
!4047 = !DILocation(line: 496, column: 11, scope: !4041)
!4048 = !DILocation(line: 497, column: 2, scope: !4045)
!4049 = !DILocation(line: 499, column: 38, scope: !4041)
!4050 = !DILocation(line: 499, column: 43, scope: !4041)
!4051 = !DILocation(line: 499, column: 7, scope: !4041)
!4052 = !DILocation(line: 500, column: 5, scope: !4041)
!4053 = distinct !{!4053, !4036, !4054}
!4054 = !DILocation(line: 500, column: 5, scope: !4037)
!4055 = !DILocation(line: 501, column: 1, scope: !4008)
!4056 = distinct !DISubprogram(name: "op_iter_init_phidef", scope: !3283, file: !3283, line: 939, type: !4057, scopeLine: 940, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!4057 = !DISubroutineType(types: !4058)
!4058 = !{!2898, !4059, !1895, !1662}
!4059 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4014, size: 64)
!4060 = !DILocalVariable(name: "ptr", arg: 1, scope: !4056, file: !3283, line: 939, type: !4059)
!4061 = !DILocation(line: 939, column: 35, scope: !4056)
!4062 = !DILocalVariable(name: "phi", arg: 2, scope: !4056, file: !3283, line: 939, type: !1895)
!4063 = !DILocation(line: 939, column: 47, scope: !4056)
!4064 = !DILocalVariable(name: "flags", arg: 3, scope: !4056, file: !3283, line: 939, type: !1662)
!4065 = !DILocation(line: 939, column: 56, scope: !4056)
!4066 = !DILocalVariable(name: "phi_def", scope: !4056, file: !3283, line: 941, type: !1565)
!4067 = !DILocation(line: 941, column: 8, scope: !4056)
!4068 = !DILocation(line: 941, column: 18, scope: !4056)
!4069 = !DILocalVariable(name: "comp", scope: !4056, file: !3283, line: 942, type: !1662)
!4070 = !DILocation(line: 942, column: 7, scope: !4056)
!4071 = !DILocation(line: 944, column: 28, scope: !4056)
!4072 = !DILocation(line: 944, column: 3, scope: !4056)
!4073 = !DILocation(line: 945, column: 3, scope: !4056)
!4074 = !DILocation(line: 945, column: 8, scope: !4056)
!4075 = !DILocation(line: 945, column: 13, scope: !4056)
!4076 = !DILocation(line: 947, column: 3, scope: !4056)
!4077 = !DILocation(line: 949, column: 26, scope: !4056)
!4078 = !DILocation(line: 949, column: 11, scope: !4056)
!4079 = !DILocation(line: 949, column: 8, scope: !4056)
!4080 = !DILocation(line: 953, column: 8, scope: !4081)
!4081 = distinct !DILexicalBlock(scope: !4056, file: !3283, line: 953, column: 7)
!4082 = !DILocation(line: 953, column: 16, scope: !4081)
!4083 = !DILocation(line: 953, column: 14, scope: !4081)
!4084 = !DILocation(line: 953, column: 22, scope: !4081)
!4085 = !DILocation(line: 953, column: 7, scope: !4056)
!4086 = !DILocation(line: 955, column: 7, scope: !4087)
!4087 = distinct !DILexicalBlock(scope: !4081, file: !3283, line: 954, column: 5)
!4088 = !DILocation(line: 955, column: 12, scope: !4087)
!4089 = !DILocation(line: 955, column: 17, scope: !4087)
!4090 = !DILocation(line: 956, column: 7, scope: !4087)
!4091 = !DILocation(line: 959, column: 3, scope: !4056)
!4092 = !DILocation(line: 959, column: 8, scope: !4056)
!4093 = !DILocation(line: 959, column: 18, scope: !4056)
!4094 = !DILocation(line: 963, column: 10, scope: !4056)
!4095 = !DILocation(line: 963, column: 3, scope: !4056)
!4096 = !DILocation(line: 964, column: 1, scope: !4056)
!4097 = distinct !DISubprogram(name: "op_iter_init_def", scope: !3283, file: !3283, line: 780, type: !4057, scopeLine: 781, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!4098 = !DILocalVariable(name: "ptr", arg: 1, scope: !4097, file: !3283, line: 780, type: !4059)
!4099 = !DILocation(line: 780, column: 32, scope: !4097)
!4100 = !DILocalVariable(name: "stmt", arg: 2, scope: !4097, file: !3283, line: 780, type: !1895)
!4101 = !DILocation(line: 780, column: 44, scope: !4097)
!4102 = !DILocalVariable(name: "flags", arg: 3, scope: !4097, file: !3283, line: 780, type: !1662)
!4103 = !DILocation(line: 780, column: 54, scope: !4097)
!4104 = !DILocation(line: 782, column: 3, scope: !4097)
!4105 = !DILocation(line: 784, column: 17, scope: !4097)
!4106 = !DILocation(line: 784, column: 22, scope: !4097)
!4107 = !DILocation(line: 784, column: 28, scope: !4097)
!4108 = !DILocation(line: 784, column: 3, scope: !4097)
!4109 = !DILocation(line: 785, column: 3, scope: !4097)
!4110 = !DILocation(line: 785, column: 8, scope: !4097)
!4111 = !DILocation(line: 785, column: 18, scope: !4097)
!4112 = !DILocation(line: 786, column: 28, scope: !4097)
!4113 = !DILocation(line: 786, column: 10, scope: !4097)
!4114 = !DILocation(line: 786, column: 3, scope: !4097)
!4115 = distinct !DISubprogram(name: "op_iter_done", scope: !3283, file: !3283, line: 652, type: !4116, scopeLine: 653, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!4116 = !DISubroutineType(types: !4117)
!4117 = !{!1685, !4118}
!4118 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4119, size: 64)
!4119 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4014)
!4120 = !DILocalVariable(name: "ptr", arg: 1, scope: !4115, file: !3283, line: 652, type: !4118)
!4121 = !DILocation(line: 652, column: 34, scope: !4115)
!4122 = !DILocation(line: 654, column: 10, scope: !4115)
!4123 = !DILocation(line: 654, column: 15, scope: !4115)
!4124 = !DILocation(line: 654, column: 3, scope: !4115)
!4125 = distinct !DISubprogram(name: "get_def_from_ptr", scope: !3283, file: !3283, line: 434, type: !4126, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!4126 = !DISubroutineType(types: !4127)
!4127 = !{!1565, !2898}
!4128 = !DILocalVariable(name: "def", arg: 1, scope: !4125, file: !3283, line: 434, type: !2898)
!4129 = !DILocation(line: 434, column: 33, scope: !4125)
!4130 = !DILocation(line: 436, column: 11, scope: !4125)
!4131 = !DILocation(line: 436, column: 10, scope: !4125)
!4132 = !DILocation(line: 436, column: 3, scope: !4125)
!4133 = distinct !DISubprogram(name: "op_iter_next_def", scope: !3283, file: !3283, line: 681, type: !4134, scopeLine: 682, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!4134 = !DISubroutineType(types: !4135)
!4135 = !{!2898, !4059}
!4136 = !DILocalVariable(name: "ptr", arg: 1, scope: !4133, file: !3283, line: 681, type: !4059)
!4137 = !DILocation(line: 681, column: 32, scope: !4133)
!4138 = !DILocalVariable(name: "def_p", scope: !4133, file: !3283, line: 683, type: !2898)
!4139 = !DILocation(line: 683, column: 17, scope: !4133)
!4140 = !DILocation(line: 687, column: 7, scope: !4141)
!4141 = distinct !DILexicalBlock(scope: !4133, file: !3283, line: 687, column: 7)
!4142 = !DILocation(line: 687, column: 12, scope: !4141)
!4143 = !DILocation(line: 687, column: 7, scope: !4133)
!4144 = !DILocation(line: 689, column: 15, scope: !4145)
!4145 = distinct !DILexicalBlock(scope: !4141, file: !3283, line: 688, column: 5)
!4146 = !DILocation(line: 689, column: 13, scope: !4145)
!4147 = !DILocation(line: 690, column: 19, scope: !4145)
!4148 = !DILocation(line: 690, column: 24, scope: !4145)
!4149 = !DILocation(line: 690, column: 30, scope: !4145)
!4150 = !DILocation(line: 690, column: 7, scope: !4145)
!4151 = !DILocation(line: 690, column: 12, scope: !4145)
!4152 = !DILocation(line: 690, column: 17, scope: !4145)
!4153 = !DILocation(line: 691, column: 14, scope: !4145)
!4154 = !DILocation(line: 691, column: 7, scope: !4145)
!4155 = !DILocation(line: 693, column: 3, scope: !4133)
!4156 = !DILocation(line: 693, column: 8, scope: !4133)
!4157 = !DILocation(line: 693, column: 13, scope: !4133)
!4158 = !DILocation(line: 694, column: 3, scope: !4133)
!4159 = !DILocation(line: 695, column: 1, scope: !4133)
!4160 = distinct !DISubprogram(name: "release_defs_bitset", scope: !3, file: !3, line: 508, type: !4161, scopeLine: 509, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!4161 = !DISubroutineType(types: !4162)
!4162 = !{null, !2443}
!4163 = !DILocalVariable(name: "toremove", arg: 1, scope: !4160, file: !3, line: 508, type: !2443)
!4164 = !DILocation(line: 508, column: 29, scope: !4160)
!4165 = !DILocalVariable(name: "j", scope: !4160, file: !3, line: 510, type: !7)
!4166 = !DILocation(line: 510, column: 12, scope: !4160)
!4167 = !DILocalVariable(name: "bi", scope: !4160, file: !3, line: 511, type: !4168)
!4168 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_iterator", file: !1799, line: 218, baseType: !4169)
!4169 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1799, line: 203, size: 256, elements: !4170)
!4170 = !{!4171, !4172, !4173, !4174}
!4171 = !DIDerivedType(tag: DW_TAG_member, name: "elt1", scope: !4169, file: !1799, line: 206, baseType: !1802, size: 64)
!4172 = !DIDerivedType(tag: DW_TAG_member, name: "elt2", scope: !4169, file: !1799, line: 209, baseType: !1802, size: 64, offset: 64)
!4173 = !DIDerivedType(tag: DW_TAG_member, name: "word_no", scope: !4169, file: !1799, line: 212, baseType: !7, size: 32, offset: 128)
!4174 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !4169, file: !1799, line: 217, baseType: !1812, size: 64, offset: 192)
!4175 = !DILocation(line: 511, column: 19, scope: !4160)
!4176 = !DILocation(line: 516, column: 3, scope: !4160)
!4177 = !DILocation(line: 516, column: 11, scope: !4160)
!4178 = !DILocation(line: 516, column: 10, scope: !4160)
!4179 = !DILocation(line: 517, column: 5, scope: !4180)
!4180 = distinct !DILexicalBlock(scope: !4160, file: !3, line: 517, column: 5)
!4181 = !DILocation(line: 517, column: 5, scope: !4182)
!4182 = distinct !DILexicalBlock(scope: !4180, file: !3, line: 517, column: 5)
!4183 = !DILocalVariable(name: "remove_now", scope: !4184, file: !3, line: 519, type: !1685)
!4184 = distinct !DILexicalBlock(scope: !4182, file: !3, line: 518, column: 7)
!4185 = !DILocation(line: 519, column: 7, scope: !4184)
!4186 = !DILocalVariable(name: "var", scope: !4184, file: !3, line: 520, type: !1565)
!4187 = !DILocation(line: 520, column: 7, scope: !4184)
!4188 = !DILocation(line: 520, column: 13, scope: !4184)
!4189 = !DILocalVariable(name: "stmt", scope: !4184, file: !3, line: 521, type: !1895)
!4190 = !DILocation(line: 521, column: 9, scope: !4184)
!4191 = !DILocalVariable(name: "uit", scope: !4184, file: !3, line: 522, type: !3463)
!4192 = !DILocation(line: 522, column: 19, scope: !4184)
!4193 = !DILocation(line: 524, column: 2, scope: !4194)
!4194 = distinct !DILexicalBlock(scope: !4184, file: !3, line: 524, column: 2)
!4195 = !DILocation(line: 524, column: 2, scope: !4196)
!4196 = distinct !DILexicalBlock(scope: !4194, file: !3, line: 524, column: 2)
!4197 = !DILocalVariable(name: "dit", scope: !4198, file: !3, line: 526, type: !4014)
!4198 = distinct !DILexicalBlock(scope: !4196, file: !3, line: 525, column: 4)
!4199 = !DILocation(line: 526, column: 18, scope: !4198)
!4200 = !DILocalVariable(name: "def_p", scope: !4198, file: !3, line: 527, type: !2898)
!4201 = !DILocation(line: 527, column: 20, scope: !4198)
!4202 = !DILocation(line: 530, column: 23, scope: !4203)
!4203 = distinct !DILexicalBlock(scope: !4198, file: !3, line: 530, column: 10)
!4204 = !DILocation(line: 530, column: 10, scope: !4203)
!4205 = !DILocation(line: 530, column: 29, scope: !4203)
!4206 = !DILocation(line: 531, column: 3, scope: !4203)
!4207 = !DILocation(line: 531, column: 23, scope: !4203)
!4208 = !DILocation(line: 531, column: 6, scope: !4203)
!4209 = !DILocation(line: 530, column: 10, scope: !4198)
!4210 = !DILocation(line: 532, column: 8, scope: !4203)
!4211 = !DILocation(line: 538, column: 6, scope: !4212)
!4212 = distinct !DILexicalBlock(scope: !4198, file: !3, line: 538, column: 6)
!4213 = !DILocation(line: 538, column: 6, scope: !4214)
!4214 = distinct !DILexicalBlock(scope: !4212, file: !3, line: 538, column: 6)
!4215 = !DILocalVariable(name: "odef", scope: !4216, file: !3, line: 540, type: !1565)
!4216 = distinct !DILexicalBlock(scope: !4214, file: !3, line: 539, column: 8)
!4217 = !DILocation(line: 540, column: 8, scope: !4216)
!4218 = !DILocation(line: 540, column: 15, scope: !4216)
!4219 = !DILocation(line: 542, column: 21, scope: !4220)
!4220 = distinct !DILexicalBlock(scope: !4216, file: !3, line: 542, column: 7)
!4221 = !DILocation(line: 542, column: 31, scope: !4220)
!4222 = !DILocation(line: 542, column: 7, scope: !4220)
!4223 = !DILocation(line: 542, column: 7, scope: !4216)
!4224 = !DILocation(line: 544, column: 18, scope: !4225)
!4225 = distinct !DILexicalBlock(scope: !4220, file: !3, line: 543, column: 5)
!4226 = !DILocation(line: 545, column: 7, scope: !4225)
!4227 = !DILocation(line: 547, column: 8, scope: !4216)
!4228 = distinct !{!4228, !4211, !4229}
!4229 = !DILocation(line: 547, column: 8, scope: !4212)
!4230 = !DILocation(line: 549, column: 11, scope: !4231)
!4231 = distinct !DILexicalBlock(scope: !4198, file: !3, line: 549, column: 10)
!4232 = !DILocation(line: 549, column: 10, scope: !4198)
!4233 = !DILocation(line: 550, column: 8, scope: !4234)
!4234 = distinct !DILexicalBlock(scope: !4231, file: !3, line: 550, column: 8)
!4235 = !DILocation(line: 551, column: 4, scope: !4198)
!4236 = distinct !{!4236, !4193, !4237}
!4237 = !DILocation(line: 551, column: 4, scope: !4194)
!4238 = !DILocation(line: 553, column: 6, scope: !4239)
!4239 = distinct !DILexicalBlock(scope: !4184, file: !3, line: 553, column: 6)
!4240 = !DILocation(line: 553, column: 6, scope: !4184)
!4241 = !DILocalVariable(name: "def", scope: !4242, file: !3, line: 555, type: !1895)
!4242 = distinct !DILexicalBlock(scope: !4239, file: !3, line: 554, column: 4)
!4243 = !DILocation(line: 555, column: 13, scope: !4242)
!4244 = !DILocation(line: 555, column: 19, scope: !4242)
!4245 = !DILocalVariable(name: "gsi", scope: !4242, file: !3, line: 556, type: !2917)
!4246 = !DILocation(line: 556, column: 27, scope: !4242)
!4247 = !DILocation(line: 556, column: 47, scope: !4242)
!4248 = !DILocation(line: 556, column: 33, scope: !4242)
!4249 = !DILocation(line: 558, column: 23, scope: !4250)
!4250 = distinct !DILexicalBlock(scope: !4242, file: !3, line: 558, column: 10)
!4251 = !DILocation(line: 558, column: 10, scope: !4250)
!4252 = !DILocation(line: 558, column: 28, scope: !4250)
!4253 = !DILocation(line: 558, column: 10, scope: !4242)
!4254 = !DILocation(line: 559, column: 8, scope: !4250)
!4255 = !DILocation(line: 562, column: 3, scope: !4256)
!4256 = distinct !DILexicalBlock(scope: !4250, file: !3, line: 561, column: 8)
!4257 = !DILocation(line: 563, column: 17, scope: !4256)
!4258 = !DILocation(line: 563, column: 3, scope: !4256)
!4259 = !DILocation(line: 566, column: 24, scope: !4242)
!4260 = !DILocation(line: 566, column: 34, scope: !4242)
!4261 = !DILocation(line: 566, column: 6, scope: !4242)
!4262 = !DILocation(line: 567, column: 4, scope: !4242)
!4263 = !DILocation(line: 568, column: 7, scope: !4184)
!4264 = distinct !{!4264, !4179, !4265}
!4265 = !DILocation(line: 568, column: 7, scope: !4180)
!4266 = distinct !{!4266, !4176, !4267}
!4267 = !DILocation(line: 568, column: 7, scope: !4160)
!4268 = !DILocation(line: 569, column: 1, scope: !4160)
!4269 = distinct !DISubprogram(name: "bmp_iter_set_init", scope: !1799, file: !1799, line: 224, type: !4270, scopeLine: 226, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!4270 = !DISubroutineType(types: !4271)
!4271 = !{null, !4272, !4273, !7, !4276}
!4272 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4168, size: 64)
!4273 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_bitmap", file: !1566, line: 48, baseType: !4274)
!4274 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4275, size: 64)
!4275 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1798)
!4276 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!4277 = !DILocalVariable(name: "bi", arg: 1, scope: !4269, file: !1799, line: 224, type: !4272)
!4278 = !DILocation(line: 224, column: 37, scope: !4269)
!4279 = !DILocalVariable(name: "map", arg: 2, scope: !4269, file: !1799, line: 224, type: !4273)
!4280 = !DILocation(line: 224, column: 54, scope: !4269)
!4281 = !DILocalVariable(name: "start_bit", arg: 3, scope: !4269, file: !1799, line: 225, type: !7)
!4282 = !DILocation(line: 225, column: 15, scope: !4269)
!4283 = !DILocalVariable(name: "bit_no", arg: 4, scope: !4269, file: !1799, line: 225, type: !4276)
!4284 = !DILocation(line: 225, column: 36, scope: !4269)
!4285 = !DILocation(line: 227, column: 14, scope: !4269)
!4286 = !DILocation(line: 227, column: 19, scope: !4269)
!4287 = !DILocation(line: 227, column: 3, scope: !4269)
!4288 = !DILocation(line: 227, column: 7, scope: !4269)
!4289 = !DILocation(line: 227, column: 12, scope: !4269)
!4290 = !DILocation(line: 228, column: 3, scope: !4269)
!4291 = !DILocation(line: 228, column: 7, scope: !4269)
!4292 = !DILocation(line: 228, column: 12, scope: !4269)
!4293 = !DILocation(line: 231, column: 3, scope: !4269)
!4294 = !DILocation(line: 233, column: 12, scope: !4295)
!4295 = distinct !DILexicalBlock(scope: !4296, file: !1799, line: 233, column: 11)
!4296 = distinct !DILexicalBlock(scope: !4269, file: !1799, line: 232, column: 5)
!4297 = !DILocation(line: 233, column: 16, scope: !4295)
!4298 = !DILocation(line: 233, column: 11, scope: !4296)
!4299 = !DILocation(line: 235, column: 4, scope: !4300)
!4300 = distinct !DILexicalBlock(scope: !4295, file: !1799, line: 234, column: 2)
!4301 = !DILocation(line: 235, column: 8, scope: !4300)
!4302 = !DILocation(line: 235, column: 13, scope: !4300)
!4303 = !DILocation(line: 236, column: 4, scope: !4300)
!4304 = !DILocation(line: 239, column: 11, scope: !4305)
!4305 = distinct !DILexicalBlock(scope: !4296, file: !1799, line: 239, column: 11)
!4306 = !DILocation(line: 239, column: 15, scope: !4305)
!4307 = !DILocation(line: 239, column: 21, scope: !4305)
!4308 = !DILocation(line: 239, column: 29, scope: !4305)
!4309 = !DILocation(line: 239, column: 39, scope: !4305)
!4310 = !DILocation(line: 239, column: 26, scope: !4305)
!4311 = !DILocation(line: 239, column: 11, scope: !4296)
!4312 = !DILocation(line: 240, column: 2, scope: !4305)
!4313 = !DILocation(line: 241, column: 18, scope: !4296)
!4314 = !DILocation(line: 241, column: 22, scope: !4296)
!4315 = !DILocation(line: 241, column: 28, scope: !4296)
!4316 = !DILocation(line: 241, column: 7, scope: !4296)
!4317 = !DILocation(line: 241, column: 11, scope: !4296)
!4318 = !DILocation(line: 241, column: 16, scope: !4296)
!4319 = distinct !{!4319, !4293, !4320}
!4320 = !DILocation(line: 242, column: 5, scope: !4269)
!4321 = !DILocation(line: 245, column: 7, scope: !4322)
!4322 = distinct !DILexicalBlock(scope: !4269, file: !1799, line: 245, column: 7)
!4323 = !DILocation(line: 245, column: 11, scope: !4322)
!4324 = !DILocation(line: 245, column: 17, scope: !4322)
!4325 = !DILocation(line: 245, column: 25, scope: !4322)
!4326 = !DILocation(line: 245, column: 35, scope: !4322)
!4327 = !DILocation(line: 245, column: 22, scope: !4322)
!4328 = !DILocation(line: 245, column: 7, scope: !4269)
!4329 = !DILocation(line: 246, column: 17, scope: !4322)
!4330 = !DILocation(line: 246, column: 21, scope: !4322)
!4331 = !DILocation(line: 246, column: 27, scope: !4322)
!4332 = !DILocation(line: 246, column: 32, scope: !4322)
!4333 = !DILocation(line: 246, column: 15, scope: !4322)
!4334 = !DILocation(line: 246, column: 5, scope: !4322)
!4335 = !DILocation(line: 249, column: 17, scope: !4269)
!4336 = !DILocation(line: 249, column: 27, scope: !4269)
!4337 = !DILocation(line: 249, column: 46, scope: !4269)
!4338 = !DILocation(line: 249, column: 3, scope: !4269)
!4339 = !DILocation(line: 249, column: 7, scope: !4269)
!4340 = !DILocation(line: 249, column: 15, scope: !4269)
!4341 = !DILocation(line: 250, column: 14, scope: !4269)
!4342 = !DILocation(line: 250, column: 18, scope: !4269)
!4343 = !DILocation(line: 250, column: 24, scope: !4269)
!4344 = !DILocation(line: 250, column: 29, scope: !4269)
!4345 = !DILocation(line: 250, column: 33, scope: !4269)
!4346 = !DILocation(line: 250, column: 3, scope: !4269)
!4347 = !DILocation(line: 250, column: 7, scope: !4269)
!4348 = !DILocation(line: 250, column: 12, scope: !4269)
!4349 = !DILocation(line: 251, column: 16, scope: !4269)
!4350 = !DILocation(line: 251, column: 26, scope: !4269)
!4351 = !DILocation(line: 251, column: 3, scope: !4269)
!4352 = !DILocation(line: 251, column: 7, scope: !4269)
!4353 = !DILocation(line: 251, column: 12, scope: !4269)
!4354 = !DILocation(line: 257, column: 17, scope: !4269)
!4355 = !DILocation(line: 257, column: 21, scope: !4269)
!4356 = !DILocation(line: 257, column: 16, scope: !4269)
!4357 = !DILocation(line: 257, column: 13, scope: !4269)
!4358 = !DILocation(line: 259, column: 13, scope: !4269)
!4359 = !DILocation(line: 259, column: 4, scope: !4269)
!4360 = !DILocation(line: 259, column: 11, scope: !4269)
!4361 = !DILocation(line: 260, column: 1, scope: !4269)
!4362 = distinct !DISubprogram(name: "bmp_iter_set", scope: !1799, file: !1799, line: 393, type: !4363, scopeLine: 394, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!4363 = !DISubroutineType(types: !4364)
!4364 = !{!1685, !4272, !4276}
!4365 = !DILocalVariable(name: "bi", arg: 1, scope: !4362, file: !1799, line: 393, type: !4272)
!4366 = !DILocation(line: 393, column: 32, scope: !4362)
!4367 = !DILocalVariable(name: "bit_no", arg: 2, scope: !4362, file: !1799, line: 393, type: !4276)
!4368 = !DILocation(line: 393, column: 46, scope: !4362)
!4369 = !DILocation(line: 396, column: 7, scope: !4370)
!4370 = distinct !DILexicalBlock(scope: !4362, file: !1799, line: 396, column: 7)
!4371 = !DILocation(line: 396, column: 11, scope: !4370)
!4372 = !DILocation(line: 396, column: 7, scope: !4362)
!4373 = !DILocation(line: 397, column: 5, scope: !4370)
!4374 = !DILabel(scope: !4375, name: "next_bit", file: !1799, line: 398)
!4375 = distinct !DILexicalBlock(scope: !4370, file: !1799, line: 397, column: 5)
!4376 = !DILocation(line: 398, column: 5, scope: !4375)
!4377 = !DILocation(line: 399, column: 7, scope: !4375)
!4378 = !DILocation(line: 399, column: 16, scope: !4375)
!4379 = !DILocation(line: 399, column: 20, scope: !4375)
!4380 = !DILocation(line: 399, column: 25, scope: !4375)
!4381 = !DILocation(line: 399, column: 14, scope: !4375)
!4382 = !DILocation(line: 401, column: 4, scope: !4383)
!4383 = distinct !DILexicalBlock(scope: !4375, file: !1799, line: 400, column: 2)
!4384 = !DILocation(line: 401, column: 8, scope: !4383)
!4385 = !DILocation(line: 401, column: 13, scope: !4383)
!4386 = !DILocation(line: 402, column: 5, scope: !4383)
!4387 = !DILocation(line: 402, column: 12, scope: !4383)
!4388 = distinct !{!4388, !4377, !4389}
!4389 = !DILocation(line: 403, column: 2, scope: !4375)
!4390 = !DILocation(line: 404, column: 7, scope: !4375)
!4391 = !DILocation(line: 410, column: 16, scope: !4362)
!4392 = !DILocation(line: 410, column: 15, scope: !4362)
!4393 = !DILocation(line: 410, column: 23, scope: !4362)
!4394 = !DILocation(line: 410, column: 42, scope: !4362)
!4395 = !DILocation(line: 411, column: 7, scope: !4362)
!4396 = !DILocation(line: 411, column: 26, scope: !4362)
!4397 = !DILocation(line: 410, column: 4, scope: !4362)
!4398 = !DILocation(line: 410, column: 11, scope: !4362)
!4399 = !DILocation(line: 412, column: 3, scope: !4362)
!4400 = !DILocation(line: 412, column: 7, scope: !4362)
!4401 = !DILocation(line: 412, column: 14, scope: !4362)
!4402 = !DILocation(line: 414, column: 3, scope: !4362)
!4403 = !DILocation(line: 417, column: 7, scope: !4404)
!4404 = distinct !DILexicalBlock(scope: !4362, file: !1799, line: 415, column: 5)
!4405 = !DILocation(line: 417, column: 14, scope: !4404)
!4406 = !DILocation(line: 417, column: 18, scope: !4404)
!4407 = !DILocation(line: 417, column: 26, scope: !4404)
!4408 = !DILocation(line: 419, column: 15, scope: !4409)
!4409 = distinct !DILexicalBlock(scope: !4404, file: !1799, line: 418, column: 2)
!4410 = !DILocation(line: 419, column: 19, scope: !4409)
!4411 = !DILocation(line: 419, column: 25, scope: !4409)
!4412 = !DILocation(line: 419, column: 30, scope: !4409)
!4413 = !DILocation(line: 419, column: 34, scope: !4409)
!4414 = !DILocation(line: 419, column: 4, scope: !4409)
!4415 = !DILocation(line: 419, column: 8, scope: !4409)
!4416 = !DILocation(line: 419, column: 13, scope: !4409)
!4417 = !DILocation(line: 420, column: 8, scope: !4418)
!4418 = distinct !DILexicalBlock(scope: !4409, file: !1799, line: 420, column: 8)
!4419 = !DILocation(line: 420, column: 12, scope: !4418)
!4420 = !DILocation(line: 420, column: 8, scope: !4409)
!4421 = !DILocation(line: 421, column: 6, scope: !4418)
!4422 = !DILocation(line: 422, column: 5, scope: !4409)
!4423 = !DILocation(line: 422, column: 12, scope: !4409)
!4424 = !DILocation(line: 423, column: 4, scope: !4409)
!4425 = !DILocation(line: 423, column: 8, scope: !4409)
!4426 = !DILocation(line: 423, column: 15, scope: !4409)
!4427 = distinct !{!4427, !4403, !4428}
!4428 = !DILocation(line: 424, column: 2, scope: !4404)
!4429 = !DILocation(line: 427, column: 18, scope: !4404)
!4430 = !DILocation(line: 427, column: 22, scope: !4404)
!4431 = !DILocation(line: 427, column: 28, scope: !4404)
!4432 = !DILocation(line: 427, column: 7, scope: !4404)
!4433 = !DILocation(line: 427, column: 11, scope: !4404)
!4434 = !DILocation(line: 427, column: 16, scope: !4404)
!4435 = !DILocation(line: 428, column: 12, scope: !4436)
!4436 = distinct !DILexicalBlock(scope: !4404, file: !1799, line: 428, column: 11)
!4437 = !DILocation(line: 428, column: 16, scope: !4436)
!4438 = !DILocation(line: 428, column: 11, scope: !4404)
!4439 = !DILocation(line: 429, column: 2, scope: !4436)
!4440 = !DILocation(line: 430, column: 17, scope: !4404)
!4441 = !DILocation(line: 430, column: 21, scope: !4404)
!4442 = !DILocation(line: 430, column: 27, scope: !4404)
!4443 = !DILocation(line: 430, column: 32, scope: !4404)
!4444 = !DILocation(line: 430, column: 8, scope: !4404)
!4445 = !DILocation(line: 430, column: 15, scope: !4404)
!4446 = !DILocation(line: 431, column: 7, scope: !4404)
!4447 = !DILocation(line: 431, column: 11, scope: !4404)
!4448 = !DILocation(line: 431, column: 19, scope: !4404)
!4449 = distinct !{!4449, !4402, !4450}
!4450 = !DILocation(line: 432, column: 5, scope: !4362)
!4451 = !DILocation(line: 433, column: 1, scope: !4362)
!4452 = distinct !DISubprogram(name: "VEC_tree_base_index", scope: !151, file: !151, line: 182, type: !4453, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!4453 = !DISubroutineType(types: !4454)
!4454 = !{!1565, !4455, !7}
!4455 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4456, size: 64)
!4456 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2425)
!4457 = !DILocalVariable(name: "vec_", arg: 1, scope: !4452, file: !151, line: 182, type: !4455)
!4458 = !DILocation(line: 182, column: 1, scope: !4452)
!4459 = !DILocalVariable(name: "ix_", arg: 2, scope: !4452, file: !151, line: 182, type: !7)
!4460 = !DILocation(line: 0, scope: !4452)
!4461 = distinct !DISubprogram(name: "is_gimple_debug", scope: !378, file: !378, line: 3249, type: !3717, scopeLine: 3250, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!4462 = !DILocalVariable(name: "gs", arg: 1, scope: !4461, file: !378, line: 3249, type: !3315)
!4463 = !DILocation(line: 3249, column: 31, scope: !4461)
!4464 = !DILocation(line: 3251, column: 23, scope: !4461)
!4465 = !DILocation(line: 3251, column: 10, scope: !4461)
!4466 = !DILocation(line: 3251, column: 27, scope: !4461)
!4467 = !DILocation(line: 3251, column: 3, scope: !4461)
!4468 = distinct !DISubprogram(name: "end_imm_use_stmt_traverse", scope: !3283, file: !3283, line: 978, type: !4469, scopeLine: 979, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!4469 = !DISubroutineType(types: !4470)
!4470 = !{null, !3678}
!4471 = !DILocalVariable(name: "imm", arg: 1, scope: !4468, file: !3283, line: 978, type: !3678)
!4472 = !DILocation(line: 978, column: 46, scope: !4468)
!4473 = !DILocation(line: 980, column: 21, scope: !4468)
!4474 = !DILocation(line: 980, column: 26, scope: !4468)
!4475 = !DILocation(line: 980, column: 3, scope: !4468)
!4476 = !DILocation(line: 981, column: 1, scope: !4468)
!4477 = distinct !DISubprogram(name: "bmp_iter_next", scope: !1799, file: !1799, line: 382, type: !4478, scopeLine: 383, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!4478 = !DISubroutineType(types: !4479)
!4479 = !{null, !4272, !4276}
!4480 = !DILocalVariable(name: "bi", arg: 1, scope: !4477, file: !1799, line: 382, type: !4272)
!4481 = !DILocation(line: 382, column: 33, scope: !4477)
!4482 = !DILocalVariable(name: "bit_no", arg: 2, scope: !4477, file: !1799, line: 382, type: !4276)
!4483 = !DILocation(line: 382, column: 47, scope: !4477)
!4484 = !DILocation(line: 384, column: 3, scope: !4477)
!4485 = !DILocation(line: 384, column: 7, scope: !4477)
!4486 = !DILocation(line: 384, column: 12, scope: !4477)
!4487 = !DILocation(line: 385, column: 4, scope: !4477)
!4488 = !DILocation(line: 385, column: 11, scope: !4477)
!4489 = !DILocation(line: 386, column: 1, scope: !4477)
!4490 = distinct !DISubprogram(name: "verify_ssa", scope: !3, file: !3, line: 862, type: !4491, scopeLine: 863, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!4491 = !DISubroutineType(types: !4492)
!4492 = !{null, !1685}
!4493 = !DILocalVariable(name: "check_modified_stmt", arg: 1, scope: !4490, file: !3, line: 862, type: !1685)
!4494 = !DILocation(line: 862, column: 18, scope: !4490)
!4495 = !DILocalVariable(name: "i", scope: !4490, file: !3, line: 864, type: !2040)
!4496 = !DILocation(line: 864, column: 10, scope: !4490)
!4497 = !DILocalVariable(name: "bb", scope: !4490, file: !3, line: 865, type: !2327)
!4498 = !DILocation(line: 865, column: 15, scope: !4490)
!4499 = !DILocalVariable(name: "definition_block", scope: !4490, file: !3, line: 866, type: !2897)
!4500 = !DILocation(line: 866, column: 16, scope: !4490)
!4501 = !DILocation(line: 866, column: 35, scope: !4490)
!4502 = !DILocalVariable(name: "iter", scope: !4490, file: !3, line: 867, type: !4014)
!4503 = !DILocation(line: 867, column: 15, scope: !4490)
!4504 = !DILocalVariable(name: "op", scope: !4490, file: !3, line: 868, type: !1565)
!4505 = !DILocation(line: 868, column: 8, scope: !4490)
!4506 = !DILocalVariable(name: "orig_dom_state", scope: !4490, file: !3, line: 869, type: !140)
!4507 = !DILocation(line: 869, column: 18, scope: !4490)
!4508 = !DILocation(line: 869, column: 35, scope: !4490)
!4509 = !DILocalVariable(name: "names_defined_in_bb", scope: !4490, file: !3, line: 870, type: !2443)
!4510 = !DILocation(line: 870, column: 10, scope: !4490)
!4511 = !DILocation(line: 870, column: 32, scope: !4490)
!4512 = !DILocation(line: 872, column: 3, scope: !4490)
!4513 = !DILocation(line: 874, column: 3, scope: !4490)
!4514 = !DILocation(line: 876, column: 3, scope: !4490)
!4515 = !DILocation(line: 876, column: 3, scope: !4516)
!4516 = distinct !DILexicalBlock(scope: !4517, file: !3, line: 876, column: 3)
!4517 = distinct !DILexicalBlock(scope: !4490, file: !3, line: 876, column: 3)
!4518 = !DILocation(line: 876, column: 3, scope: !4517)
!4519 = !DILocation(line: 879, column: 10, scope: !4520)
!4520 = distinct !DILexicalBlock(scope: !4490, file: !3, line: 879, column: 3)
!4521 = !DILocation(line: 879, column: 8, scope: !4520)
!4522 = !DILocation(line: 879, column: 15, scope: !4523)
!4523 = distinct !DILexicalBlock(scope: !4520, file: !3, line: 879, column: 3)
!4524 = !DILocation(line: 879, column: 19, scope: !4523)
!4525 = !DILocation(line: 879, column: 17, scope: !4523)
!4526 = !DILocation(line: 879, column: 3, scope: !4520)
!4527 = !DILocalVariable(name: "name", scope: !4528, file: !3, line: 881, type: !1565)
!4528 = distinct !DILexicalBlock(scope: !4523, file: !3, line: 880, column: 5)
!4529 = !DILocation(line: 881, column: 12, scope: !4528)
!4530 = !DILocation(line: 881, column: 19, scope: !4528)
!4531 = !DILocation(line: 882, column: 11, scope: !4532)
!4532 = distinct !DILexicalBlock(scope: !4528, file: !3, line: 882, column: 11)
!4533 = !DILocation(line: 882, column: 11, scope: !4528)
!4534 = !DILocalVariable(name: "stmt", scope: !4535, file: !3, line: 884, type: !1895)
!4535 = distinct !DILexicalBlock(scope: !4532, file: !3, line: 883, column: 2)
!4536 = !DILocation(line: 884, column: 11, scope: !4535)
!4537 = !DILocation(line: 885, column: 4, scope: !4535)
!4538 = !DILocation(line: 885, column: 24, scope: !4535)
!4539 = !DILocation(line: 887, column: 11, scope: !4535)
!4540 = !DILocation(line: 887, column: 9, scope: !4535)
!4541 = !DILocation(line: 888, column: 23, scope: !4542)
!4542 = distinct !DILexicalBlock(scope: !4535, file: !3, line: 888, column: 8)
!4543 = !DILocation(line: 888, column: 9, scope: !4542)
!4544 = !DILocation(line: 888, column: 8, scope: !4535)
!4545 = !DILocalVariable(name: "bb", scope: !4546, file: !3, line: 890, type: !2327)
!4546 = distinct !DILexicalBlock(scope: !4542, file: !3, line: 889, column: 6)
!4547 = !DILocation(line: 890, column: 20, scope: !4546)
!4548 = !DILocation(line: 890, column: 36, scope: !4546)
!4549 = !DILocation(line: 890, column: 25, scope: !4546)
!4550 = !DILocation(line: 891, column: 20, scope: !4546)
!4551 = !DILocation(line: 891, column: 24, scope: !4546)
!4552 = !DILocation(line: 892, column: 6, scope: !4546)
!4553 = !DILocation(line: 892, column: 12, scope: !4546)
!4554 = !DILocation(line: 892, column: 34, scope: !4546)
!4555 = !DILocation(line: 892, column: 19, scope: !4546)
!4556 = !DILocation(line: 892, column: 18, scope: !4546)
!4557 = !DILocation(line: 891, column: 8, scope: !4546)
!4558 = !DILocation(line: 894, column: 6, scope: !4546)
!4559 = !DILocation(line: 895, column: 2, scope: !4535)
!4560 = !DILocation(line: 896, column: 5, scope: !4528)
!4561 = !DILocation(line: 879, column: 35, scope: !4523)
!4562 = !DILocation(line: 879, column: 3, scope: !4523)
!4563 = distinct !{!4563, !4526, !4564}
!4564 = !DILocation(line: 896, column: 5, scope: !4520)
!4565 = !DILocation(line: 898, column: 3, scope: !4490)
!4566 = !DILocation(line: 902, column: 3, scope: !4567)
!4567 = distinct !DILexicalBlock(scope: !4490, file: !3, line: 902, column: 3)
!4568 = !DILocation(line: 902, column: 3, scope: !4569)
!4569 = distinct !DILexicalBlock(scope: !4567, file: !3, line: 902, column: 3)
!4570 = !DILocalVariable(name: "e", scope: !4571, file: !3, line: 904, type: !1875)
!4571 = distinct !DILexicalBlock(scope: !4569, file: !3, line: 903, column: 5)
!4572 = !DILocation(line: 904, column: 12, scope: !4571)
!4573 = !DILocalVariable(name: "phi", scope: !4571, file: !3, line: 905, type: !1895)
!4574 = !DILocation(line: 905, column: 14, scope: !4571)
!4575 = !DILocalVariable(name: "ei", scope: !4571, file: !3, line: 906, type: !4576)
!4576 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge_iterator", file: !135, line: 682, baseType: !4577)
!4577 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !135, line: 679, size: 128, elements: !4578)
!4578 = !{!4579, !4580}
!4579 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !4577, file: !135, line: 680, baseType: !7, size: 32)
!4580 = !DIDerivedType(tag: DW_TAG_member, name: "container", scope: !4577, file: !135, line: 681, baseType: !4581, size: 64, offset: 64)
!4581 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1863, size: 64)
!4582 = !DILocation(line: 906, column: 21, scope: !4571)
!4583 = !DILocalVariable(name: "gsi", scope: !4571, file: !3, line: 907, type: !2917)
!4584 = !DILocation(line: 907, column: 28, scope: !4571)
!4585 = !DILocation(line: 910, column: 7, scope: !4586)
!4586 = distinct !DILexicalBlock(scope: !4571, file: !3, line: 910, column: 7)
!4587 = !DILocation(line: 910, column: 7, scope: !4588)
!4588 = distinct !DILexicalBlock(scope: !4586, file: !3, line: 910, column: 7)
!4589 = !DILocation(line: 912, column: 8, scope: !4590)
!4590 = distinct !DILexicalBlock(scope: !4591, file: !3, line: 912, column: 8)
!4591 = distinct !DILexicalBlock(scope: !4588, file: !3, line: 911, column: 2)
!4592 = !DILocation(line: 912, column: 11, scope: !4590)
!4593 = !DILocation(line: 912, column: 8, scope: !4591)
!4594 = !DILocation(line: 914, column: 58, scope: !4595)
!4595 = distinct !DILexicalBlock(scope: !4590, file: !3, line: 913, column: 6)
!4596 = !DILocation(line: 914, column: 61, scope: !4595)
!4597 = !DILocation(line: 914, column: 66, scope: !4595)
!4598 = !DILocation(line: 915, column: 9, scope: !4595)
!4599 = !DILocation(line: 915, column: 12, scope: !4595)
!4600 = !DILocation(line: 915, column: 18, scope: !4595)
!4601 = !DILocation(line: 914, column: 8, scope: !4595)
!4602 = !DILocation(line: 916, column: 8, scope: !4595)
!4603 = !DILocation(line: 918, column: 2, scope: !4591)
!4604 = distinct !{!4604, !4585, !4605}
!4605 = !DILocation(line: 918, column: 2, scope: !4586)
!4606 = !DILocation(line: 921, column: 34, scope: !4607)
!4607 = distinct !DILexicalBlock(scope: !4571, file: !3, line: 921, column: 7)
!4608 = !DILocation(line: 921, column: 18, scope: !4607)
!4609 = !DILocation(line: 921, column: 12, scope: !4607)
!4610 = !DILocation(line: 921, column: 40, scope: !4611)
!4611 = distinct !DILexicalBlock(scope: !4607, file: !3, line: 921, column: 7)
!4612 = !DILocation(line: 921, column: 39, scope: !4611)
!4613 = !DILocation(line: 921, column: 7, scope: !4607)
!4614 = !DILocation(line: 923, column: 10, scope: !4615)
!4615 = distinct !DILexicalBlock(scope: !4611, file: !3, line: 922, column: 2)
!4616 = !DILocation(line: 923, column: 8, scope: !4615)
!4617 = !DILocation(line: 924, column: 25, scope: !4618)
!4618 = distinct !DILexicalBlock(scope: !4615, file: !3, line: 924, column: 8)
!4619 = !DILocation(line: 924, column: 30, scope: !4618)
!4620 = !DILocation(line: 924, column: 34, scope: !4618)
!4621 = !DILocation(line: 924, column: 8, scope: !4618)
!4622 = !DILocation(line: 924, column: 8, scope: !4615)
!4623 = !DILocation(line: 925, column: 6, scope: !4618)
!4624 = !DILocation(line: 927, column: 20, scope: !4615)
!4625 = !DILocation(line: 928, column: 6, scope: !4615)
!4626 = !DILocation(line: 927, column: 4, scope: !4615)
!4627 = !DILocation(line: 929, column: 2, scope: !4615)
!4628 = !DILocation(line: 921, column: 57, scope: !4611)
!4629 = !DILocation(line: 921, column: 7, scope: !4611)
!4630 = distinct !{!4630, !4613, !4631}
!4631 = !DILocation(line: 929, column: 2, scope: !4607)
!4632 = !DILocation(line: 932, column: 32, scope: !4633)
!4633 = distinct !DILexicalBlock(scope: !4571, file: !3, line: 932, column: 7)
!4634 = !DILocation(line: 932, column: 18, scope: !4633)
!4635 = !DILocation(line: 932, column: 12, scope: !4633)
!4636 = !DILocation(line: 932, column: 38, scope: !4637)
!4637 = distinct !DILexicalBlock(scope: !4633, file: !3, line: 932, column: 7)
!4638 = !DILocation(line: 932, column: 37, scope: !4637)
!4639 = !DILocation(line: 932, column: 7, scope: !4633)
!4640 = !DILocalVariable(name: "stmt", scope: !4641, file: !3, line: 934, type: !1895)
!4641 = distinct !DILexicalBlock(scope: !4637, file: !3, line: 933, column: 2)
!4642 = !DILocation(line: 934, column: 11, scope: !4641)
!4643 = !DILocation(line: 934, column: 18, scope: !4641)
!4644 = !DILocalVariable(name: "use_p", scope: !4641, file: !3, line: 935, type: !2899)
!4645 = !DILocation(line: 935, column: 18, scope: !4641)
!4646 = !DILocalVariable(name: "has_err", scope: !4641, file: !3, line: 936, type: !1685)
!4647 = !DILocation(line: 936, column: 9, scope: !4641)
!4648 = !DILocation(line: 938, column: 8, scope: !4649)
!4649 = distinct !DILexicalBlock(scope: !4641, file: !3, line: 938, column: 8)
!4650 = !DILocation(line: 938, column: 28, scope: !4649)
!4651 = !DILocation(line: 938, column: 50, scope: !4649)
!4652 = !DILocation(line: 938, column: 31, scope: !4649)
!4653 = !DILocation(line: 938, column: 8, scope: !4641)
!4654 = !DILocation(line: 941, column: 16, scope: !4655)
!4655 = distinct !DILexicalBlock(scope: !4649, file: !3, line: 939, column: 6)
!4656 = !DILocation(line: 941, column: 8, scope: !4655)
!4657 = !DILocation(line: 940, column: 8, scope: !4655)
!4658 = !DILocation(line: 942, column: 27, scope: !4655)
!4659 = !DILocation(line: 942, column: 35, scope: !4655)
!4660 = !DILocation(line: 942, column: 8, scope: !4655)
!4661 = !DILocation(line: 943, column: 8, scope: !4655)
!4662 = !DILocation(line: 946, column: 26, scope: !4663)
!4663 = distinct !DILexicalBlock(scope: !4641, file: !3, line: 946, column: 8)
!4664 = !DILocation(line: 946, column: 8, scope: !4663)
!4665 = !DILocation(line: 947, column: 8, scope: !4663)
!4666 = !DILocation(line: 947, column: 11, scope: !4663)
!4667 = !DILocation(line: 947, column: 48, scope: !4663)
!4668 = !DILocation(line: 946, column: 8, scope: !4641)
!4669 = !DILocalVariable(name: "lhs", scope: !4670, file: !3, line: 949, type: !1565)
!4670 = distinct !DILexicalBlock(scope: !4663, file: !3, line: 948, column: 6)
!4671 = !DILocation(line: 949, column: 13, scope: !4670)
!4672 = !DILocalVariable(name: "base_address", scope: !4670, file: !3, line: 949, type: !1565)
!4673 = !DILocation(line: 949, column: 18, scope: !4670)
!4674 = !DILocation(line: 951, column: 33, scope: !4670)
!4675 = !DILocation(line: 951, column: 14, scope: !4670)
!4676 = !DILocation(line: 951, column: 12, scope: !4670)
!4677 = !DILocation(line: 952, column: 41, scope: !4670)
!4678 = !DILocation(line: 952, column: 23, scope: !4670)
!4679 = !DILocation(line: 952, column: 21, scope: !4670)
!4680 = !DILocation(line: 954, column: 12, scope: !4681)
!4681 = distinct !DILexicalBlock(scope: !4670, file: !3, line: 954, column: 12)
!4682 = !DILocation(line: 955, column: 5, scope: !4681)
!4683 = !DILocation(line: 955, column: 8, scope: !4681)
!4684 = !DILocation(line: 956, column: 5, scope: !4681)
!4685 = !DILocation(line: 956, column: 22, scope: !4681)
!4686 = !DILocation(line: 956, column: 9, scope: !4681)
!4687 = !DILocation(line: 957, column: 5, scope: !4681)
!4688 = !DILocation(line: 957, column: 8, scope: !4681)
!4689 = !DILocation(line: 957, column: 17, scope: !4681)
!4690 = !DILocation(line: 954, column: 12, scope: !4670)
!4691 = !DILocation(line: 959, column: 5, scope: !4692)
!4692 = distinct !DILexicalBlock(scope: !4681, file: !3, line: 958, column: 3)
!4693 = !DILocation(line: 960, column: 24, scope: !4692)
!4694 = !DILocation(line: 960, column: 32, scope: !4692)
!4695 = !DILocation(line: 960, column: 5, scope: !4692)
!4696 = !DILocation(line: 961, column: 5, scope: !4692)
!4697 = !DILocation(line: 963, column: 6, scope: !4670)
!4698 = !DILocation(line: 964, column: 34, scope: !4699)
!4699 = distinct !DILexicalBlock(scope: !4663, file: !3, line: 964, column: 13)
!4700 = !DILocation(line: 964, column: 13, scope: !4699)
!4701 = !DILocation(line: 965, column: 6, scope: !4699)
!4702 = !DILocation(line: 965, column: 41, scope: !4699)
!4703 = !DILocation(line: 965, column: 10, scope: !4699)
!4704 = !DILocation(line: 964, column: 13, scope: !4663)
!4705 = !DILocation(line: 966, column: 6, scope: !4699)
!4706 = !DILocation(line: 969, column: 12, scope: !4641)
!4707 = !DILocation(line: 970, column: 21, scope: !4708)
!4708 = distinct !DILexicalBlock(scope: !4641, file: !3, line: 970, column: 8)
!4709 = !DILocation(line: 970, column: 8, scope: !4708)
!4710 = !DILocation(line: 970, column: 8, scope: !4641)
!4711 = !DILocation(line: 972, column: 28, scope: !4712)
!4712 = distinct !DILexicalBlock(scope: !4713, file: !3, line: 972, column: 12)
!4713 = distinct !DILexicalBlock(scope: !4708, file: !3, line: 971, column: 6)
!4714 = !DILocation(line: 972, column: 12, scope: !4712)
!4715 = !DILocation(line: 972, column: 34, scope: !4712)
!4716 = !DILocation(line: 972, column: 12, scope: !4713)
!4717 = !DILocation(line: 974, column: 5, scope: !4718)
!4718 = distinct !DILexicalBlock(scope: !4712, file: !3, line: 973, column: 3)
!4719 = !DILocation(line: 975, column: 13, scope: !4718)
!4720 = !DILocation(line: 976, column: 3, scope: !4718)
!4721 = !DILocation(line: 977, column: 26, scope: !4722)
!4722 = distinct !DILexicalBlock(scope: !4713, file: !3, line: 977, column: 12)
!4723 = !DILocation(line: 977, column: 13, scope: !4722)
!4724 = !DILocation(line: 977, column: 12, scope: !4713)
!4725 = !DILocation(line: 979, column: 5, scope: !4726)
!4726 = distinct !DILexicalBlock(scope: !4722, file: !3, line: 978, column: 3)
!4727 = !DILocation(line: 980, column: 13, scope: !4726)
!4728 = !DILocation(line: 981, column: 3, scope: !4726)
!4729 = !DILocation(line: 982, column: 17, scope: !4730)
!4730 = distinct !DILexicalBlock(scope: !4722, file: !3, line: 982, column: 17)
!4731 = !DILocation(line: 983, column: 13, scope: !4730)
!4732 = !DILocation(line: 983, column: 10, scope: !4730)
!4733 = !DILocation(line: 982, column: 17, scope: !4722)
!4734 = !DILocation(line: 985, column: 5, scope: !4735)
!4735 = distinct !DILexicalBlock(scope: !4730, file: !3, line: 984, column: 3)
!4736 = !DILocation(line: 986, column: 13, scope: !4735)
!4737 = !DILocation(line: 987, column: 3, scope: !4735)
!4738 = !DILocation(line: 988, column: 49, scope: !4713)
!4739 = !DILocation(line: 988, column: 36, scope: !4713)
!4740 = !DILocation(line: 988, column: 19, scope: !4713)
!4741 = !DILocation(line: 988, column: 16, scope: !4713)
!4742 = !DILocation(line: 989, column: 6, scope: !4713)
!4743 = !DILocation(line: 990, column: 21, scope: !4744)
!4744 = distinct !DILexicalBlock(scope: !4641, file: !3, line: 990, column: 8)
!4745 = !DILocation(line: 990, column: 8, scope: !4744)
!4746 = !DILocation(line: 990, column: 8, scope: !4641)
!4747 = !DILocation(line: 992, column: 29, scope: !4748)
!4748 = distinct !DILexicalBlock(scope: !4749, file: !3, line: 992, column: 13)
!4749 = distinct !DILexicalBlock(scope: !4744, file: !3, line: 991, column: 6)
!4750 = !DILocation(line: 992, column: 13, scope: !4748)
!4751 = !DILocation(line: 992, column: 35, scope: !4748)
!4752 = !DILocation(line: 992, column: 13, scope: !4749)
!4753 = !DILocation(line: 994, column: 5, scope: !4754)
!4754 = distinct !DILexicalBlock(scope: !4748, file: !3, line: 993, column: 3)
!4755 = !DILocation(line: 995, column: 13, scope: !4754)
!4756 = !DILocation(line: 996, column: 3, scope: !4754)
!4757 = !DILocation(line: 997, column: 49, scope: !4749)
!4758 = !DILocation(line: 997, column: 36, scope: !4749)
!4759 = !DILocation(line: 997, column: 19, scope: !4749)
!4760 = !DILocation(line: 997, column: 16, scope: !4749)
!4761 = !DILocation(line: 998, column: 6, scope: !4749)
!4762 = !DILocation(line: 999, column: 8, scope: !4763)
!4763 = distinct !DILexicalBlock(scope: !4641, file: !3, line: 999, column: 8)
!4764 = !DILocation(line: 999, column: 8, scope: !4641)
!4765 = !DILocation(line: 1001, column: 8, scope: !4766)
!4766 = distinct !DILexicalBlock(scope: !4763, file: !3, line: 1000, column: 6)
!4767 = !DILocation(line: 1002, column: 27, scope: !4766)
!4768 = !DILocation(line: 1002, column: 35, scope: !4766)
!4769 = !DILocation(line: 1002, column: 8, scope: !4766)
!4770 = !DILocation(line: 1003, column: 8, scope: !4766)
!4771 = !DILocation(line: 1006, column: 4, scope: !4772)
!4772 = distinct !DILexicalBlock(scope: !4641, file: !3, line: 1006, column: 4)
!4773 = !DILocation(line: 1006, column: 4, scope: !4774)
!4774 = distinct !DILexicalBlock(scope: !4772, file: !3, line: 1006, column: 4)
!4775 = !DILocation(line: 1008, column: 29, scope: !4776)
!4776 = distinct !DILexicalBlock(scope: !4777, file: !3, line: 1008, column: 12)
!4777 = distinct !DILexicalBlock(scope: !4774, file: !3, line: 1007, column: 6)
!4778 = !DILocation(line: 1008, column: 12, scope: !4776)
!4779 = !DILocation(line: 1008, column: 12, scope: !4777)
!4780 = !DILocation(line: 1010, column: 5, scope: !4781)
!4781 = distinct !DILexicalBlock(scope: !4776, file: !3, line: 1009, column: 3)
!4782 = !DILocation(line: 1011, column: 24, scope: !4781)
!4783 = !DILocation(line: 1011, column: 32, scope: !4781)
!4784 = !DILocation(line: 1011, column: 5, scope: !4781)
!4785 = !DILocation(line: 1012, column: 5, scope: !4781)
!4786 = !DILocation(line: 1014, column: 6, scope: !4777)
!4787 = distinct !{!4787, !4771, !4788}
!4788 = !DILocation(line: 1014, column: 6, scope: !4772)
!4789 = !DILocation(line: 1016, column: 4, scope: !4790)
!4790 = distinct !DILexicalBlock(scope: !4641, file: !3, line: 1016, column: 4)
!4791 = !DILocation(line: 1016, column: 4, scope: !4792)
!4792 = distinct !DILexicalBlock(scope: !4790, file: !3, line: 1016, column: 4)
!4793 = !DILocation(line: 1018, column: 13, scope: !4794)
!4794 = distinct !DILexicalBlock(scope: !4792, file: !3, line: 1017, column: 6)
!4795 = !DILocation(line: 1018, column: 11, scope: !4794)
!4796 = !DILocation(line: 1019, column: 24, scope: !4797)
!4797 = distinct !DILexicalBlock(scope: !4794, file: !3, line: 1019, column: 12)
!4798 = !DILocation(line: 1019, column: 28, scope: !4797)
!4799 = !DILocation(line: 1019, column: 45, scope: !4797)
!4800 = !DILocation(line: 1020, column: 10, scope: !4797)
!4801 = !DILocation(line: 1020, column: 17, scope: !4797)
!4802 = !DILocation(line: 1020, column: 30, scope: !4797)
!4803 = !DILocation(line: 1019, column: 12, scope: !4797)
!4804 = !DILocation(line: 1019, column: 12, scope: !4794)
!4805 = !DILocation(line: 1021, column: 3, scope: !4797)
!4806 = !DILocation(line: 1022, column: 6, scope: !4794)
!4807 = distinct !{!4807, !4789, !4808}
!4808 = !DILocation(line: 1022, column: 6, scope: !4790)
!4809 = !DILocation(line: 1024, column: 4, scope: !4810)
!4810 = distinct !DILexicalBlock(scope: !4641, file: !3, line: 1024, column: 4)
!4811 = !DILocation(line: 1024, column: 4, scope: !4812)
!4812 = distinct !DILexicalBlock(scope: !4810, file: !3, line: 1024, column: 4)
!4813 = !DILocation(line: 1026, column: 12, scope: !4814)
!4814 = distinct !DILexicalBlock(scope: !4815, file: !3, line: 1026, column: 12)
!4815 = distinct !DILexicalBlock(scope: !4812, file: !3, line: 1025, column: 6)
!4816 = !DILocation(line: 1026, column: 38, scope: !4814)
!4817 = !DILocation(line: 1026, column: 35, scope: !4814)
!4818 = !DILocation(line: 1026, column: 12, scope: !4815)
!4819 = !DILocation(line: 1028, column: 5, scope: !4820)
!4820 = distinct !DILexicalBlock(scope: !4814, file: !3, line: 1027, column: 3)
!4821 = !DILocation(line: 1029, column: 14, scope: !4820)
!4822 = !DILocation(line: 1029, column: 5, scope: !4820)
!4823 = !DILocation(line: 1030, column: 24, scope: !4820)
!4824 = !DILocation(line: 1030, column: 32, scope: !4820)
!4825 = !DILocation(line: 1030, column: 5, scope: !4820)
!4826 = !DILocation(line: 1031, column: 14, scope: !4820)
!4827 = !DILocation(line: 1031, column: 5, scope: !4820)
!4828 = !DILocation(line: 1032, column: 24, scope: !4820)
!4829 = !DILocation(line: 1032, column: 32, scope: !4820)
!4830 = !DILocation(line: 1032, column: 5, scope: !4820)
!4831 = !DILocation(line: 1034, column: 5, scope: !4820)
!4832 = !DILocation(line: 1036, column: 24, scope: !4815)
!4833 = !DILocation(line: 1036, column: 45, scope: !4815)
!4834 = !DILocation(line: 1036, column: 8, scope: !4815)
!4835 = !DILocation(line: 1037, column: 6, scope: !4815)
!4836 = distinct !{!4836, !4809, !4837}
!4837 = !DILocation(line: 1037, column: 6, scope: !4810)
!4838 = !DILocation(line: 1038, column: 2, scope: !4641)
!4839 = !DILocation(line: 932, column: 55, scope: !4637)
!4840 = !DILocation(line: 932, column: 7, scope: !4637)
!4841 = distinct !{!4841, !4639, !4842}
!4842 = !DILocation(line: 1038, column: 2, scope: !4633)
!4843 = !DILocation(line: 1040, column: 21, scope: !4571)
!4844 = !DILocation(line: 1040, column: 7, scope: !4571)
!4845 = !DILocation(line: 1041, column: 5, scope: !4571)
!4846 = distinct !{!4846, !4566, !4847}
!4847 = !DILocation(line: 1041, column: 5, scope: !4567)
!4848 = !DILocation(line: 1043, column: 9, scope: !4490)
!4849 = !DILocation(line: 1043, column: 3, scope: !4490)
!4850 = !DILocation(line: 1047, column: 7, scope: !4851)
!4851 = distinct !DILexicalBlock(scope: !4490, file: !3, line: 1047, column: 7)
!4852 = !DILocation(line: 1047, column: 22, scope: !4851)
!4853 = !DILocation(line: 1047, column: 7, scope: !4490)
!4854 = !DILocation(line: 1048, column: 5, scope: !4851)
!4855 = !DILocation(line: 1050, column: 48, scope: !4851)
!4856 = !DILocation(line: 1050, column: 5, scope: !4851)
!4857 = !DILocation(line: 1052, column: 3, scope: !4490)
!4858 = !DILocation(line: 1053, column: 3, scope: !4490)
!4859 = !DILocation(line: 1053, column: 3, scope: !4860)
!4860 = distinct !DILexicalBlock(scope: !4861, file: !3, line: 1053, column: 3)
!4861 = distinct !DILexicalBlock(scope: !4490, file: !3, line: 1053, column: 3)
!4862 = !DILocation(line: 1053, column: 3, scope: !4861)
!4863 = !DILocation(line: 1054, column: 3, scope: !4490)
!4864 = !DILabel(scope: !4490, name: "err", file: !3, line: 1056)
!4865 = !DILocation(line: 1056, column: 1, scope: !4490)
!4866 = !DILocation(line: 1057, column: 3, scope: !4490)
!4867 = !DILocation(line: 1058, column: 1, scope: !4490)
!4868 = distinct !DISubprogram(name: "VEC_tree_base_length", scope: !151, file: !151, line: 182, type: !4869, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!4869 = !DISubroutineType(types: !4870)
!4870 = !{!7, !4455}
!4871 = !DILocalVariable(name: "vec_", arg: 1, scope: !4868, file: !151, line: 182, type: !4455)
!4872 = !DILocation(line: 182, column: 1, scope: !4868)
!4873 = distinct !DISubprogram(name: "gimple_nop_p", scope: !378, file: !378, line: 4304, type: !3717, scopeLine: 4305, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!4874 = !DILocalVariable(name: "g", arg: 1, scope: !4873, file: !378, line: 4304, type: !3315)
!4875 = !DILocation(line: 4304, column: 28, scope: !4873)
!4876 = !DILocation(line: 4306, column: 23, scope: !4873)
!4877 = !DILocation(line: 4306, column: 10, scope: !4873)
!4878 = !DILocation(line: 4306, column: 26, scope: !4873)
!4879 = !DILocation(line: 4306, column: 3, scope: !4873)
!4880 = distinct !DISubprogram(name: "verify_def", scope: !3, file: !3, line: 638, type: !4881, scopeLine: 640, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!4881 = !DISubroutineType(types: !4882)
!4882 = !{!1685, !2327, !2897, !1565, !1895, !1685}
!4883 = !DILocalVariable(name: "bb", arg: 1, scope: !4880, file: !3, line: 638, type: !2327)
!4884 = !DILocation(line: 638, column: 25, scope: !4880)
!4885 = !DILocalVariable(name: "definition_block", arg: 2, scope: !4880, file: !3, line: 638, type: !2897)
!4886 = !DILocation(line: 638, column: 42, scope: !4880)
!4887 = !DILocalVariable(name: "ssa_name", arg: 3, scope: !4880, file: !3, line: 638, type: !1565)
!4888 = !DILocation(line: 638, column: 65, scope: !4880)
!4889 = !DILocalVariable(name: "stmt", arg: 4, scope: !4880, file: !3, line: 639, type: !1895)
!4890 = !DILocation(line: 639, column: 13, scope: !4880)
!4891 = !DILocalVariable(name: "is_virtual", arg: 5, scope: !4880, file: !3, line: 639, type: !1685)
!4892 = !DILocation(line: 639, column: 24, scope: !4880)
!4893 = !DILocation(line: 641, column: 24, scope: !4894)
!4894 = distinct !DILexicalBlock(scope: !4880, file: !3, line: 641, column: 7)
!4895 = !DILocation(line: 641, column: 34, scope: !4894)
!4896 = !DILocation(line: 641, column: 7, scope: !4894)
!4897 = !DILocation(line: 641, column: 7, scope: !4880)
!4898 = !DILocation(line: 642, column: 5, scope: !4894)
!4899 = !DILocation(line: 644, column: 7, scope: !4900)
!4900 = distinct !DILexicalBlock(scope: !4880, file: !3, line: 644, column: 7)
!4901 = !DILocation(line: 644, column: 24, scope: !4900)
!4902 = !DILocation(line: 644, column: 7, scope: !4880)
!4903 = !DILocation(line: 647, column: 7, scope: !4904)
!4904 = distinct !DILexicalBlock(scope: !4900, file: !3, line: 645, column: 5)
!4905 = !DILocation(line: 647, column: 24, scope: !4904)
!4906 = !DILocation(line: 647, column: 54, scope: !4904)
!4907 = !DILocation(line: 647, column: 61, scope: !4904)
!4908 = !DILocation(line: 647, column: 65, scope: !4904)
!4909 = !DILocation(line: 646, column: 7, scope: !4904)
!4910 = !DILocation(line: 648, column: 7, scope: !4904)
!4911 = !DILocation(line: 651, column: 51, scope: !4880)
!4912 = !DILocation(line: 651, column: 3, scope: !4880)
!4913 = !DILocation(line: 651, column: 20, scope: !4880)
!4914 = !DILocation(line: 651, column: 49, scope: !4880)
!4915 = !DILocation(line: 653, column: 7, scope: !4916)
!4916 = distinct !DILexicalBlock(scope: !4880, file: !3, line: 653, column: 7)
!4917 = !DILocation(line: 653, column: 39, scope: !4916)
!4918 = !DILocation(line: 653, column: 36, scope: !4916)
!4919 = !DILocation(line: 653, column: 7, scope: !4880)
!4920 = !DILocation(line: 655, column: 7, scope: !4921)
!4921 = distinct !DILexicalBlock(scope: !4916, file: !3, line: 654, column: 5)
!4922 = !DILocation(line: 656, column: 16, scope: !4921)
!4923 = !DILocation(line: 656, column: 7, scope: !4921)
!4924 = !DILocation(line: 657, column: 26, scope: !4921)
!4925 = !DILocation(line: 657, column: 34, scope: !4921)
!4926 = !DILocation(line: 657, column: 7, scope: !4921)
!4927 = !DILocation(line: 658, column: 16, scope: !4921)
!4928 = !DILocation(line: 658, column: 7, scope: !4921)
!4929 = !DILocation(line: 659, column: 26, scope: !4921)
!4930 = !DILocation(line: 659, column: 34, scope: !4921)
!4931 = !DILocation(line: 659, column: 7, scope: !4921)
!4932 = !DILocation(line: 660, column: 7, scope: !4921)
!4933 = !DILocation(line: 663, column: 3, scope: !4880)
!4934 = !DILabel(scope: !4880, name: "err", file: !3, line: 665)
!4935 = !DILocation(line: 665, column: 1, scope: !4880)
!4936 = !DILocation(line: 666, column: 12, scope: !4880)
!4937 = !DILocation(line: 666, column: 3, scope: !4880)
!4938 = !DILocation(line: 667, column: 23, scope: !4880)
!4939 = !DILocation(line: 667, column: 31, scope: !4880)
!4940 = !DILocation(line: 667, column: 3, scope: !4880)
!4941 = !DILocation(line: 668, column: 12, scope: !4880)
!4942 = !DILocation(line: 668, column: 3, scope: !4880)
!4943 = !DILocation(line: 669, column: 22, scope: !4880)
!4944 = !DILocation(line: 669, column: 30, scope: !4880)
!4945 = !DILocation(line: 669, column: 3, scope: !4880)
!4946 = !DILocation(line: 671, column: 3, scope: !4880)
!4947 = !DILocation(line: 672, column: 1, scope: !4880)
!4948 = distinct !DISubprogram(name: "ei_start_1", scope: !135, file: !135, line: 696, type: !4949, scopeLine: 697, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!4949 = !DISubroutineType(types: !4950)
!4950 = !{!4576, !4581}
!4951 = !DILocalVariable(name: "ev", arg: 1, scope: !4948, file: !135, line: 696, type: !4581)
!4952 = !DILocation(line: 696, column: 28, scope: !4948)
!4953 = !DILocalVariable(name: "i", scope: !4948, file: !135, line: 698, type: !4576)
!4954 = !DILocation(line: 698, column: 17, scope: !4948)
!4955 = !DILocation(line: 700, column: 5, scope: !4948)
!4956 = !DILocation(line: 700, column: 11, scope: !4948)
!4957 = !DILocation(line: 701, column: 17, scope: !4948)
!4958 = !DILocation(line: 701, column: 5, scope: !4948)
!4959 = !DILocation(line: 701, column: 15, scope: !4948)
!4960 = !DILocation(line: 703, column: 3, scope: !4948)
!4961 = distinct !DISubprogram(name: "ei_cond", scope: !135, file: !135, line: 771, type: !4962, scopeLine: 772, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!4962 = !DISubroutineType(types: !4963)
!4963 = !{!1685, !4576, !4964}
!4964 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1875, size: 64)
!4965 = !DILocalVariable(name: "ei", arg: 1, scope: !4961, file: !135, line: 771, type: !4576)
!4966 = !DILocation(line: 771, column: 24, scope: !4961)
!4967 = !DILocalVariable(name: "p", arg: 2, scope: !4961, file: !135, line: 771, type: !4964)
!4968 = !DILocation(line: 771, column: 34, scope: !4961)
!4969 = !DILocation(line: 773, column: 8, scope: !4970)
!4970 = distinct !DILexicalBlock(scope: !4961, file: !135, line: 773, column: 7)
!4971 = !DILocation(line: 773, column: 7, scope: !4961)
!4972 = !DILocation(line: 775, column: 12, scope: !4973)
!4973 = distinct !DILexicalBlock(scope: !4970, file: !135, line: 774, column: 5)
!4974 = !DILocation(line: 775, column: 8, scope: !4973)
!4975 = !DILocation(line: 775, column: 10, scope: !4973)
!4976 = !DILocation(line: 776, column: 7, scope: !4973)
!4977 = !DILocation(line: 780, column: 8, scope: !4978)
!4978 = distinct !DILexicalBlock(scope: !4970, file: !135, line: 779, column: 5)
!4979 = !DILocation(line: 780, column: 10, scope: !4978)
!4980 = !DILocation(line: 781, column: 7, scope: !4978)
!4981 = !DILocation(line: 783, column: 1, scope: !4961)
!4982 = distinct !DISubprogram(name: "ei_next", scope: !135, file: !135, line: 736, type: !4983, scopeLine: 737, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!4983 = !DISubroutineType(types: !4984)
!4984 = !{null, !4985}
!4985 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4576, size: 64)
!4986 = !DILocalVariable(name: "i", arg: 1, scope: !4982, file: !135, line: 736, type: !4985)
!4987 = !DILocation(line: 736, column: 25, scope: !4982)
!4988 = !DILocation(line: 738, column: 3, scope: !4982)
!4989 = !DILocation(line: 739, column: 3, scope: !4982)
!4990 = !DILocation(line: 739, column: 6, scope: !4982)
!4991 = !DILocation(line: 739, column: 11, scope: !4982)
!4992 = !DILocation(line: 740, column: 1, scope: !4982)
!4993 = distinct !DISubprogram(name: "verify_phi_args", scope: !3, file: !3, line: 774, type: !4994, scopeLine: 775, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!4994 = !DISubroutineType(types: !4995)
!4995 = !{!1685, !1895, !2327, !2897}
!4996 = !DILocalVariable(name: "phi", arg: 1, scope: !4993, file: !3, line: 774, type: !1895)
!4997 = !DILocation(line: 774, column: 25, scope: !4993)
!4998 = !DILocalVariable(name: "bb", arg: 2, scope: !4993, file: !3, line: 774, type: !2327)
!4999 = !DILocation(line: 774, column: 42, scope: !4993)
!5000 = !DILocalVariable(name: "definition_block", arg: 3, scope: !4993, file: !3, line: 774, type: !2897)
!5001 = !DILocation(line: 774, column: 59, scope: !4993)
!5002 = !DILocalVariable(name: "e", scope: !4993, file: !3, line: 776, type: !1875)
!5003 = !DILocation(line: 776, column: 8, scope: !4993)
!5004 = !DILocalVariable(name: "err", scope: !4993, file: !3, line: 777, type: !1685)
!5005 = !DILocation(line: 777, column: 8, scope: !4993)
!5006 = !DILocalVariable(name: "i", scope: !4993, file: !3, line: 778, type: !2040)
!5007 = !DILocation(line: 778, column: 10, scope: !4993)
!5008 = !DILocalVariable(name: "phi_num_args", scope: !4993, file: !3, line: 778, type: !2040)
!5009 = !DILocation(line: 778, column: 13, scope: !4993)
!5010 = !DILocation(line: 778, column: 49, scope: !4993)
!5011 = !DILocation(line: 778, column: 28, scope: !4993)
!5012 = !DILocation(line: 780, column: 7, scope: !5013)
!5013 = distinct !DILexicalBlock(scope: !4993, file: !3, line: 780, column: 7)
!5014 = !DILocation(line: 780, column: 33, scope: !5013)
!5015 = !DILocation(line: 780, column: 30, scope: !5013)
!5016 = !DILocation(line: 780, column: 7, scope: !4993)
!5017 = !DILocation(line: 782, column: 7, scope: !5018)
!5018 = distinct !DILexicalBlock(scope: !5013, file: !3, line: 781, column: 5)
!5019 = !DILocation(line: 783, column: 11, scope: !5018)
!5020 = !DILocation(line: 784, column: 7, scope: !5018)
!5021 = !DILocation(line: 787, column: 10, scope: !5022)
!5022 = distinct !DILexicalBlock(scope: !4993, file: !3, line: 787, column: 3)
!5023 = !DILocation(line: 787, column: 8, scope: !5022)
!5024 = !DILocation(line: 787, column: 15, scope: !5025)
!5025 = distinct !DILexicalBlock(scope: !5022, file: !3, line: 787, column: 3)
!5026 = !DILocation(line: 787, column: 19, scope: !5025)
!5027 = !DILocation(line: 787, column: 17, scope: !5025)
!5028 = !DILocation(line: 787, column: 3, scope: !5022)
!5029 = !DILocalVariable(name: "op_p", scope: !5030, file: !3, line: 789, type: !2899)
!5030 = distinct !DILexicalBlock(scope: !5025, file: !3, line: 788, column: 5)
!5031 = !DILocation(line: 789, column: 21, scope: !5030)
!5032 = !DILocation(line: 789, column: 56, scope: !5030)
!5033 = !DILocation(line: 789, column: 61, scope: !5030)
!5034 = !DILocation(line: 789, column: 28, scope: !5030)
!5035 = !DILocalVariable(name: "op", scope: !5030, file: !3, line: 790, type: !1565)
!5036 = !DILocation(line: 790, column: 12, scope: !5030)
!5037 = !DILocation(line: 790, column: 17, scope: !5030)
!5038 = !DILocation(line: 792, column: 11, scope: !5030)
!5039 = !DILocation(line: 792, column: 9, scope: !5030)
!5040 = !DILocation(line: 794, column: 11, scope: !5041)
!5041 = distinct !DILexicalBlock(scope: !5030, file: !3, line: 794, column: 11)
!5042 = !DILocation(line: 794, column: 14, scope: !5041)
!5043 = !DILocation(line: 794, column: 11, scope: !5030)
!5044 = !DILocation(line: 797, column: 11, scope: !5045)
!5045 = distinct !DILexicalBlock(scope: !5041, file: !3, line: 795, column: 2)
!5046 = !DILocation(line: 797, column: 14, scope: !5045)
!5047 = !DILocation(line: 797, column: 19, scope: !5045)
!5048 = !DILocation(line: 798, column: 4, scope: !5045)
!5049 = !DILocation(line: 798, column: 7, scope: !5045)
!5050 = !DILocation(line: 798, column: 13, scope: !5045)
!5051 = !DILocation(line: 796, column: 4, scope: !5045)
!5052 = !DILocation(line: 799, column: 8, scope: !5045)
!5053 = !DILocation(line: 800, column: 4, scope: !5045)
!5054 = !DILocation(line: 803, column: 11, scope: !5055)
!5055 = distinct !DILexicalBlock(scope: !5030, file: !3, line: 803, column: 11)
!5056 = !DILocation(line: 803, column: 26, scope: !5055)
!5057 = !DILocation(line: 803, column: 38, scope: !5055)
!5058 = !DILocation(line: 803, column: 67, scope: !5055)
!5059 = !DILocation(line: 803, column: 42, scope: !5055)
!5060 = !DILocation(line: 803, column: 11, scope: !5030)
!5061 = !DILocation(line: 805, column: 4, scope: !5062)
!5062 = distinct !DILexicalBlock(scope: !5055, file: !3, line: 804, column: 2)
!5063 = !DILocation(line: 806, column: 8, scope: !5062)
!5064 = !DILocation(line: 807, column: 2, scope: !5062)
!5065 = !DILocation(line: 809, column: 11, scope: !5066)
!5066 = distinct !DILexicalBlock(scope: !5030, file: !3, line: 809, column: 11)
!5067 = !DILocation(line: 809, column: 26, scope: !5066)
!5068 = !DILocation(line: 809, column: 11, scope: !5030)
!5069 = !DILocation(line: 811, column: 27, scope: !5070)
!5070 = distinct !DILexicalBlock(scope: !5066, file: !3, line: 810, column: 2)
!5071 = !DILocation(line: 811, column: 66, scope: !5070)
!5072 = !DILocation(line: 811, column: 47, scope: !5070)
!5073 = !DILocation(line: 811, column: 32, scope: !5070)
!5074 = !DILocation(line: 811, column: 31, scope: !5070)
!5075 = !DILocation(line: 811, column: 10, scope: !5070)
!5076 = !DILocation(line: 811, column: 8, scope: !5070)
!5077 = !DILocation(line: 812, column: 23, scope: !5070)
!5078 = !DILocation(line: 812, column: 26, scope: !5070)
!5079 = !DILocation(line: 812, column: 31, scope: !5070)
!5080 = !DILocation(line: 812, column: 48, scope: !5070)
!5081 = !DILocation(line: 813, column: 9, scope: !5070)
!5082 = !DILocation(line: 813, column: 15, scope: !5070)
!5083 = !DILocation(line: 813, column: 20, scope: !5070)
!5084 = !DILocation(line: 813, column: 23, scope: !5070)
!5085 = !DILocation(line: 813, column: 29, scope: !5070)
!5086 = !DILocation(line: 812, column: 11, scope: !5070)
!5087 = !DILocation(line: 812, column: 8, scope: !5070)
!5088 = !DILocation(line: 814, column: 2, scope: !5070)
!5089 = !DILocation(line: 816, column: 11, scope: !5090)
!5090 = distinct !DILexicalBlock(scope: !5030, file: !3, line: 816, column: 11)
!5091 = !DILocation(line: 816, column: 26, scope: !5090)
!5092 = !DILocation(line: 816, column: 11, scope: !5030)
!5093 = !DILocalVariable(name: "base", scope: !5094, file: !3, line: 818, type: !1565)
!5094 = distinct !DILexicalBlock(scope: !5090, file: !3, line: 817, column: 2)
!5095 = !DILocation(line: 818, column: 9, scope: !5094)
!5096 = !DILocation(line: 818, column: 16, scope: !5094)
!5097 = !DILocation(line: 819, column: 4, scope: !5094)
!5098 = !DILocation(line: 819, column: 32, scope: !5094)
!5099 = !DILocation(line: 819, column: 11, scope: !5094)
!5100 = !DILocation(line: 820, column: 13, scope: !5094)
!5101 = !DILocation(line: 820, column: 11, scope: !5094)
!5102 = distinct !{!5102, !5097, !5100}
!5103 = !DILocation(line: 821, column: 9, scope: !5104)
!5104 = distinct !DILexicalBlock(scope: !5094, file: !3, line: 821, column: 8)
!5105 = !DILocation(line: 821, column: 26, scope: !5104)
!5106 = !DILocation(line: 822, column: 9, scope: !5104)
!5107 = !DILocation(line: 822, column: 12, scope: !5104)
!5108 = !DILocation(line: 822, column: 29, scope: !5104)
!5109 = !DILocation(line: 823, column: 9, scope: !5104)
!5110 = !DILocation(line: 823, column: 12, scope: !5104)
!5111 = !DILocation(line: 823, column: 29, scope: !5104)
!5112 = !DILocation(line: 824, column: 8, scope: !5104)
!5113 = !DILocation(line: 824, column: 12, scope: !5104)
!5114 = !DILocation(line: 821, column: 8, scope: !5094)
!5115 = !DILocation(line: 826, column: 8, scope: !5116)
!5116 = distinct !DILexicalBlock(scope: !5104, file: !3, line: 825, column: 6)
!5117 = !DILocation(line: 827, column: 12, scope: !5116)
!5118 = !DILocation(line: 828, column: 6, scope: !5116)
!5119 = !DILocation(line: 829, column: 2, scope: !5094)
!5120 = !DILocation(line: 831, column: 11, scope: !5121)
!5121 = distinct !DILexicalBlock(scope: !5030, file: !3, line: 831, column: 11)
!5122 = !DILocation(line: 831, column: 14, scope: !5121)
!5123 = !DILocation(line: 831, column: 22, scope: !5121)
!5124 = !DILocation(line: 831, column: 19, scope: !5121)
!5125 = !DILocation(line: 831, column: 11, scope: !5030)
!5126 = !DILocation(line: 834, column: 11, scope: !5127)
!5127 = distinct !DILexicalBlock(scope: !5121, file: !3, line: 832, column: 2)
!5128 = !DILocation(line: 834, column: 14, scope: !5127)
!5129 = !DILocation(line: 834, column: 19, scope: !5127)
!5130 = !DILocation(line: 834, column: 26, scope: !5127)
!5131 = !DILocation(line: 834, column: 29, scope: !5127)
!5132 = !DILocation(line: 834, column: 35, scope: !5127)
!5133 = !DILocation(line: 833, column: 4, scope: !5127)
!5134 = !DILocation(line: 835, column: 8, scope: !5127)
!5135 = !DILocation(line: 836, column: 2, scope: !5127)
!5136 = !DILocation(line: 838, column: 11, scope: !5137)
!5137 = distinct !DILexicalBlock(scope: !5030, file: !3, line: 838, column: 11)
!5138 = !DILocation(line: 838, column: 11, scope: !5030)
!5139 = !DILocation(line: 840, column: 13, scope: !5140)
!5140 = distinct !DILexicalBlock(scope: !5137, file: !3, line: 839, column: 2)
!5141 = !DILocation(line: 840, column: 4, scope: !5140)
!5142 = !DILocation(line: 841, column: 24, scope: !5140)
!5143 = !DILocation(line: 841, column: 32, scope: !5140)
!5144 = !DILocation(line: 841, column: 4, scope: !5140)
!5145 = !DILocation(line: 842, column: 4, scope: !5140)
!5146 = !DILocation(line: 844, column: 5, scope: !5030)
!5147 = !DILocation(line: 787, column: 34, scope: !5025)
!5148 = !DILocation(line: 787, column: 3, scope: !5025)
!5149 = distinct !{!5149, !5028, !5150}
!5150 = !DILocation(line: 844, column: 5, scope: !5022)
!5151 = !DILabel(scope: !4993, name: "error", file: !3, line: 846)
!5152 = !DILocation(line: 846, column: 1, scope: !4993)
!5153 = !DILocation(line: 847, column: 7, scope: !5154)
!5154 = distinct !DILexicalBlock(scope: !4993, file: !3, line: 847, column: 7)
!5155 = !DILocation(line: 847, column: 7, scope: !4993)
!5156 = !DILocation(line: 849, column: 16, scope: !5157)
!5157 = distinct !DILexicalBlock(scope: !5154, file: !3, line: 848, column: 5)
!5158 = !DILocation(line: 849, column: 7, scope: !5157)
!5159 = !DILocation(line: 850, column: 26, scope: !5157)
!5160 = !DILocation(line: 850, column: 34, scope: !5157)
!5161 = !DILocation(line: 850, column: 7, scope: !5157)
!5162 = !DILocation(line: 851, column: 5, scope: !5157)
!5163 = !DILocation(line: 854, column: 10, scope: !4993)
!5164 = !DILocation(line: 854, column: 3, scope: !4993)
!5165 = distinct !DISubprogram(name: "gsi_start_bb", scope: !378, file: !378, line: 4418, type: !5166, scopeLine: 4419, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!5166 = !DISubroutineType(types: !5167)
!5167 = !{!2917, !2327}
!5168 = !DILocalVariable(name: "bb", arg: 1, scope: !5165, file: !378, line: 4418, type: !2327)
!5169 = !DILocation(line: 4418, column: 27, scope: !5165)
!5170 = !DILocalVariable(name: "i", scope: !5165, file: !378, line: 4420, type: !2917)
!5171 = !DILocation(line: 4420, column: 24, scope: !5165)
!5172 = !DILocalVariable(name: "seq", scope: !5165, file: !378, line: 4421, type: !1885)
!5173 = !DILocation(line: 4421, column: 14, scope: !5165)
!5174 = !DILocation(line: 4423, column: 17, scope: !5165)
!5175 = !DILocation(line: 4423, column: 9, scope: !5165)
!5176 = !DILocation(line: 4423, column: 7, scope: !5165)
!5177 = !DILocation(line: 4424, column: 29, scope: !5165)
!5178 = !DILocation(line: 4424, column: 11, scope: !5165)
!5179 = !DILocation(line: 4424, column: 5, scope: !5165)
!5180 = !DILocation(line: 4424, column: 9, scope: !5165)
!5181 = !DILocation(line: 4425, column: 11, scope: !5165)
!5182 = !DILocation(line: 4425, column: 5, scope: !5165)
!5183 = !DILocation(line: 4425, column: 9, scope: !5165)
!5184 = !DILocation(line: 4426, column: 10, scope: !5165)
!5185 = !DILocation(line: 4426, column: 5, scope: !5165)
!5186 = !DILocation(line: 4426, column: 8, scope: !5165)
!5187 = !DILocation(line: 4428, column: 3, scope: !5165)
!5188 = distinct !DISubprogram(name: "gimple_modified_p", scope: !378, file: !378, line: 1425, type: !3717, scopeLine: 1426, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!5189 = !DILocalVariable(name: "g", arg: 1, scope: !5188, file: !378, line: 1425, type: !3315)
!5190 = !DILocation(line: 1425, column: 33, scope: !5188)
!5191 = !DILocation(line: 1427, column: 27, scope: !5188)
!5192 = !DILocation(line: 1427, column: 11, scope: !5188)
!5193 = !DILocation(line: 1427, column: 10, scope: !5188)
!5194 = !DILocation(line: 1427, column: 40, scope: !5188)
!5195 = !DILocation(line: 1427, column: 43, scope: !5188)
!5196 = !DILocation(line: 1427, column: 50, scope: !5188)
!5197 = !DILocation(line: 1427, column: 33, scope: !5188)
!5198 = !DILocation(line: 1427, column: 3, scope: !5188)
!5199 = distinct !DISubprogram(name: "gimple_assign_lhs", scope: !378, file: !378, line: 1694, type: !3313, scopeLine: 1695, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!5200 = !DILocalVariable(name: "gs", arg: 1, scope: !5199, file: !378, line: 1694, type: !3315)
!5201 = !DILocation(line: 1694, column: 33, scope: !5199)
!5202 = !DILocation(line: 1697, column: 21, scope: !5199)
!5203 = !DILocation(line: 1697, column: 10, scope: !5199)
!5204 = !DILocation(line: 1697, column: 3, scope: !5199)
!5205 = distinct !DISubprogram(name: "gimple_vdef", scope: !378, file: !378, line: 1375, type: !3313, scopeLine: 1376, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!5206 = !DILocalVariable(name: "g", arg: 1, scope: !5205, file: !378, line: 1375, type: !3315)
!5207 = !DILocation(line: 1375, column: 27, scope: !5205)
!5208 = !DILocation(line: 1377, column: 28, scope: !5209)
!5209 = distinct !DILexicalBlock(scope: !5205, file: !378, line: 1377, column: 7)
!5210 = !DILocation(line: 1377, column: 8, scope: !5209)
!5211 = !DILocation(line: 1377, column: 7, scope: !5205)
!5212 = !DILocation(line: 1378, column: 5, scope: !5209)
!5213 = !DILocation(line: 1379, column: 10, scope: !5205)
!5214 = !DILocation(line: 1379, column: 13, scope: !5205)
!5215 = !DILocation(line: 1379, column: 23, scope: !5205)
!5216 = !DILocation(line: 1379, column: 3, scope: !5205)
!5217 = !DILocation(line: 1380, column: 1, scope: !5205)
!5218 = distinct !DISubprogram(name: "gimple_debug_bind_has_value_p", scope: !378, file: !378, line: 3349, type: !5219, scopeLine: 3350, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!5219 = !DISubroutineType(types: !5220)
!5220 = !{!1685, !1895}
!5221 = !DILocalVariable(name: "dbg", arg: 1, scope: !5218, file: !378, line: 3349, type: !1895)
!5222 = !DILocation(line: 3349, column: 39, scope: !5218)
!5223 = !DILocation(line: 3355, column: 21, scope: !5218)
!5224 = !DILocation(line: 3355, column: 10, scope: !5218)
!5225 = !DILocation(line: 3355, column: 29, scope: !5218)
!5226 = !DILocation(line: 3355, column: 3, scope: !5218)
!5227 = distinct !DISubprogram(name: "gimple_vdef_op", scope: !378, file: !378, line: 1349, type: !5228, scopeLine: 1350, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!5228 = !DISubroutineType(types: !5229)
!5229 = !{!2898, !3315}
!5230 = !DILocalVariable(name: "g", arg: 1, scope: !5227, file: !378, line: 1349, type: !3315)
!5231 = !DILocation(line: 1349, column: 30, scope: !5227)
!5232 = !DILocalVariable(name: "ops", scope: !5227, file: !378, line: 1351, type: !1924)
!5233 = !DILocation(line: 1351, column: 24, scope: !5227)
!5234 = !DILocation(line: 1352, column: 28, scope: !5235)
!5235 = distinct !DILexicalBlock(scope: !5227, file: !378, line: 1352, column: 7)
!5236 = !DILocation(line: 1352, column: 8, scope: !5235)
!5237 = !DILocation(line: 1352, column: 7, scope: !5227)
!5238 = !DILocation(line: 1353, column: 5, scope: !5235)
!5239 = !DILocation(line: 1354, column: 9, scope: !5227)
!5240 = !DILocation(line: 1354, column: 12, scope: !5227)
!5241 = !DILocation(line: 1354, column: 18, scope: !5227)
!5242 = !DILocation(line: 1354, column: 25, scope: !5227)
!5243 = !DILocation(line: 1354, column: 7, scope: !5227)
!5244 = !DILocation(line: 1355, column: 7, scope: !5245)
!5245 = distinct !DILexicalBlock(scope: !5227, file: !378, line: 1355, column: 7)
!5246 = !DILocation(line: 1356, column: 7, scope: !5245)
!5247 = !DILocation(line: 1356, column: 10, scope: !5245)
!5248 = !DILocation(line: 1356, column: 31, scope: !5245)
!5249 = !DILocation(line: 1356, column: 34, scope: !5245)
!5250 = !DILocation(line: 1356, column: 44, scope: !5245)
!5251 = !DILocation(line: 1356, column: 27, scope: !5245)
!5252 = !DILocation(line: 1355, column: 7, scope: !5227)
!5253 = !DILocation(line: 1357, column: 12, scope: !5245)
!5254 = !DILocation(line: 1357, column: 5, scope: !5245)
!5255 = !DILocation(line: 1358, column: 3, scope: !5227)
!5256 = !DILocation(line: 1359, column: 1, scope: !5227)
!5257 = distinct !DISubprogram(name: "gimple_vuse", scope: !378, file: !378, line: 1365, type: !3313, scopeLine: 1366, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!5258 = !DILocalVariable(name: "g", arg: 1, scope: !5257, file: !378, line: 1365, type: !3315)
!5259 = !DILocation(line: 1365, column: 27, scope: !5257)
!5260 = !DILocation(line: 1367, column: 28, scope: !5261)
!5261 = distinct !DILexicalBlock(scope: !5257, file: !378, line: 1367, column: 7)
!5262 = !DILocation(line: 1367, column: 8, scope: !5261)
!5263 = !DILocation(line: 1367, column: 7, scope: !5257)
!5264 = !DILocation(line: 1368, column: 5, scope: !5261)
!5265 = !DILocation(line: 1369, column: 10, scope: !5257)
!5266 = !DILocation(line: 1369, column: 13, scope: !5257)
!5267 = !DILocation(line: 1369, column: 23, scope: !5257)
!5268 = !DILocation(line: 1369, column: 3, scope: !5257)
!5269 = !DILocation(line: 1370, column: 1, scope: !5257)
!5270 = distinct !DISubprogram(name: "verify_ssa_name", scope: !3, file: !3, line: 577, type: !5271, scopeLine: 578, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!5271 = !DISubroutineType(types: !5272)
!5272 = !{!1685, !1565, !1685}
!5273 = !DILocalVariable(name: "ssa_name", arg: 1, scope: !5270, file: !3, line: 577, type: !1565)
!5274 = !DILocation(line: 577, column: 23, scope: !5270)
!5275 = !DILocalVariable(name: "is_virtual", arg: 2, scope: !5270, file: !3, line: 577, type: !1685)
!5276 = !DILocation(line: 577, column: 38, scope: !5270)
!5277 = !DILocation(line: 579, column: 7, scope: !5278)
!5278 = distinct !DILexicalBlock(scope: !5270, file: !3, line: 579, column: 7)
!5279 = !DILocation(line: 579, column: 28, scope: !5278)
!5280 = !DILocation(line: 579, column: 7, scope: !5270)
!5281 = !DILocation(line: 581, column: 7, scope: !5282)
!5282 = distinct !DILexicalBlock(scope: !5278, file: !3, line: 580, column: 5)
!5283 = !DILocation(line: 582, column: 7, scope: !5282)
!5284 = !DILocation(line: 585, column: 7, scope: !5285)
!5285 = distinct !DILexicalBlock(scope: !5270, file: !3, line: 585, column: 7)
!5286 = !DILocation(line: 585, column: 31, scope: !5285)
!5287 = !DILocation(line: 585, column: 28, scope: !5285)
!5288 = !DILocation(line: 585, column: 7, scope: !5270)
!5289 = !DILocation(line: 587, column: 7, scope: !5290)
!5290 = distinct !DILexicalBlock(scope: !5285, file: !3, line: 586, column: 5)
!5291 = !DILocation(line: 588, column: 7, scope: !5290)
!5292 = !DILocation(line: 591, column: 7, scope: !5293)
!5293 = distinct !DILexicalBlock(scope: !5270, file: !3, line: 591, column: 7)
!5294 = !DILocation(line: 591, column: 7, scope: !5270)
!5295 = !DILocation(line: 593, column: 7, scope: !5296)
!5296 = distinct !DILexicalBlock(scope: !5293, file: !3, line: 592, column: 5)
!5297 = !DILocation(line: 594, column: 7, scope: !5296)
!5298 = !DILocation(line: 597, column: 7, scope: !5299)
!5299 = distinct !DILexicalBlock(scope: !5270, file: !3, line: 597, column: 7)
!5300 = !DILocation(line: 597, column: 18, scope: !5299)
!5301 = !DILocation(line: 597, column: 36, scope: !5299)
!5302 = !DILocation(line: 597, column: 21, scope: !5299)
!5303 = !DILocation(line: 597, column: 7, scope: !5270)
!5304 = !DILocation(line: 599, column: 7, scope: !5305)
!5305 = distinct !DILexicalBlock(scope: !5299, file: !3, line: 598, column: 5)
!5306 = !DILocation(line: 600, column: 7, scope: !5305)
!5307 = !DILocation(line: 603, column: 7, scope: !5308)
!5308 = distinct !DILexicalBlock(scope: !5270, file: !3, line: 603, column: 7)
!5309 = !DILocation(line: 603, column: 18, scope: !5308)
!5310 = !DILocation(line: 603, column: 21, scope: !5308)
!5311 = !DILocation(line: 603, column: 60, scope: !5308)
!5312 = !DILocation(line: 603, column: 48, scope: !5308)
!5313 = !DILocation(line: 603, column: 45, scope: !5308)
!5314 = !DILocation(line: 603, column: 7, scope: !5270)
!5315 = !DILocation(line: 605, column: 7, scope: !5316)
!5316 = distinct !DILexicalBlock(scope: !5308, file: !3, line: 604, column: 5)
!5317 = !DILocation(line: 606, column: 7, scope: !5316)
!5318 = !DILocation(line: 609, column: 8, scope: !5319)
!5319 = distinct !DILexicalBlock(scope: !5270, file: !3, line: 609, column: 7)
!5320 = !DILocation(line: 609, column: 19, scope: !5319)
!5321 = !DILocation(line: 609, column: 38, scope: !5319)
!5322 = !DILocation(line: 609, column: 23, scope: !5319)
!5323 = !DILocation(line: 609, column: 7, scope: !5270)
!5324 = !DILocation(line: 611, column: 7, scope: !5325)
!5325 = distinct !DILexicalBlock(scope: !5319, file: !3, line: 610, column: 5)
!5326 = !DILocation(line: 612, column: 7, scope: !5325)
!5327 = !DILocation(line: 615, column: 7, scope: !5328)
!5328 = distinct !DILexicalBlock(scope: !5270, file: !3, line: 615, column: 7)
!5329 = !DILocation(line: 616, column: 7, scope: !5328)
!5330 = !DILocation(line: 616, column: 25, scope: !5328)
!5331 = !DILocation(line: 616, column: 11, scope: !5328)
!5332 = !DILocation(line: 615, column: 7, scope: !5270)
!5333 = !DILocation(line: 618, column: 7, scope: !5334)
!5334 = distinct !DILexicalBlock(scope: !5328, file: !3, line: 617, column: 5)
!5335 = !DILocation(line: 619, column: 7, scope: !5334)
!5336 = !DILocation(line: 622, column: 3, scope: !5270)
!5337 = !DILocation(line: 623, column: 1, scope: !5270)
!5338 = distinct !DISubprogram(name: "gimple_vuse_op", scope: !378, file: !378, line: 1334, type: !5339, scopeLine: 1335, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!5339 = !DISubroutineType(types: !5340)
!5340 = !{!2899, !3315}
!5341 = !DILocalVariable(name: "g", arg: 1, scope: !5338, file: !378, line: 1334, type: !3315)
!5342 = !DILocation(line: 1334, column: 30, scope: !5338)
!5343 = !DILocalVariable(name: "ops", scope: !5338, file: !378, line: 1336, type: !1931)
!5344 = !DILocation(line: 1336, column: 24, scope: !5338)
!5345 = !DILocation(line: 1337, column: 28, scope: !5346)
!5346 = distinct !DILexicalBlock(scope: !5338, file: !378, line: 1337, column: 7)
!5347 = !DILocation(line: 1337, column: 8, scope: !5346)
!5348 = !DILocation(line: 1337, column: 7, scope: !5338)
!5349 = !DILocation(line: 1338, column: 5, scope: !5346)
!5350 = !DILocation(line: 1339, column: 9, scope: !5338)
!5351 = !DILocation(line: 1339, column: 12, scope: !5338)
!5352 = !DILocation(line: 1339, column: 18, scope: !5338)
!5353 = !DILocation(line: 1339, column: 25, scope: !5338)
!5354 = !DILocation(line: 1339, column: 7, scope: !5338)
!5355 = !DILocation(line: 1340, column: 7, scope: !5356)
!5356 = distinct !DILexicalBlock(scope: !5338, file: !378, line: 1340, column: 7)
!5357 = !DILocation(line: 1341, column: 7, scope: !5356)
!5358 = !DILocation(line: 1341, column: 10, scope: !5356)
!5359 = !DILocation(line: 1341, column: 28, scope: !5356)
!5360 = !DILocation(line: 1341, column: 36, scope: !5356)
!5361 = !DILocation(line: 1341, column: 39, scope: !5356)
!5362 = !DILocation(line: 1341, column: 49, scope: !5356)
!5363 = !DILocation(line: 1341, column: 32, scope: !5356)
!5364 = !DILocation(line: 1340, column: 7, scope: !5338)
!5365 = !DILocation(line: 1342, column: 12, scope: !5356)
!5366 = !DILocation(line: 1342, column: 5, scope: !5356)
!5367 = !DILocation(line: 1343, column: 3, scope: !5338)
!5368 = !DILocation(line: 1344, column: 1, scope: !5338)
!5369 = distinct !DISubprogram(name: "op_iter_init_tree", scope: !3283, file: !3283, line: 792, type: !5370, scopeLine: 793, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!5370 = !DISubroutineType(types: !5371)
!5371 = !{!1565, !4059, !1895, !1662}
!5372 = !DILocalVariable(name: "ptr", arg: 1, scope: !5369, file: !3283, line: 792, type: !4059)
!5373 = !DILocation(line: 792, column: 33, scope: !5369)
!5374 = !DILocalVariable(name: "stmt", arg: 2, scope: !5369, file: !3283, line: 792, type: !1895)
!5375 = !DILocation(line: 792, column: 45, scope: !5369)
!5376 = !DILocalVariable(name: "flags", arg: 3, scope: !5369, file: !3283, line: 792, type: !1662)
!5377 = !DILocation(line: 792, column: 55, scope: !5369)
!5378 = !DILocation(line: 794, column: 17, scope: !5369)
!5379 = !DILocation(line: 794, column: 22, scope: !5369)
!5380 = !DILocation(line: 794, column: 28, scope: !5369)
!5381 = !DILocation(line: 794, column: 3, scope: !5369)
!5382 = !DILocation(line: 795, column: 3, scope: !5369)
!5383 = !DILocation(line: 795, column: 8, scope: !5369)
!5384 = !DILocation(line: 795, column: 18, scope: !5369)
!5385 = !DILocation(line: 796, column: 29, scope: !5369)
!5386 = !DILocation(line: 796, column: 10, scope: !5369)
!5387 = !DILocation(line: 796, column: 3, scope: !5369)
!5388 = distinct !DISubprogram(name: "op_iter_next_tree", scope: !3283, file: !3283, line: 699, type: !5389, scopeLine: 700, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!5389 = !DISubroutineType(types: !5390)
!5390 = !{!1565, !4059}
!5391 = !DILocalVariable(name: "ptr", arg: 1, scope: !5388, file: !3283, line: 699, type: !4059)
!5392 = !DILocation(line: 699, column: 33, scope: !5388)
!5393 = !DILocalVariable(name: "val", scope: !5388, file: !3283, line: 701, type: !1565)
!5394 = !DILocation(line: 701, column: 8, scope: !5388)
!5395 = !DILocation(line: 705, column: 7, scope: !5396)
!5396 = distinct !DILexicalBlock(scope: !5388, file: !3283, line: 705, column: 7)
!5397 = !DILocation(line: 705, column: 12, scope: !5396)
!5398 = !DILocation(line: 705, column: 7, scope: !5388)
!5399 = !DILocation(line: 707, column: 13, scope: !5400)
!5400 = distinct !DILexicalBlock(scope: !5396, file: !3283, line: 706, column: 5)
!5401 = !DILocation(line: 707, column: 11, scope: !5400)
!5402 = !DILocation(line: 708, column: 19, scope: !5400)
!5403 = !DILocation(line: 708, column: 24, scope: !5400)
!5404 = !DILocation(line: 708, column: 30, scope: !5400)
!5405 = !DILocation(line: 708, column: 7, scope: !5400)
!5406 = !DILocation(line: 708, column: 12, scope: !5400)
!5407 = !DILocation(line: 708, column: 17, scope: !5400)
!5408 = !DILocation(line: 709, column: 14, scope: !5400)
!5409 = !DILocation(line: 709, column: 7, scope: !5400)
!5410 = !DILocation(line: 711, column: 7, scope: !5411)
!5411 = distinct !DILexicalBlock(scope: !5388, file: !3283, line: 711, column: 7)
!5412 = !DILocation(line: 711, column: 12, scope: !5411)
!5413 = !DILocation(line: 711, column: 7, scope: !5388)
!5414 = !DILocation(line: 713, column: 13, scope: !5415)
!5415 = distinct !DILexicalBlock(scope: !5411, file: !3283, line: 712, column: 5)
!5416 = !DILocation(line: 713, column: 11, scope: !5415)
!5417 = !DILocation(line: 714, column: 19, scope: !5415)
!5418 = !DILocation(line: 714, column: 24, scope: !5415)
!5419 = !DILocation(line: 714, column: 30, scope: !5415)
!5420 = !DILocation(line: 714, column: 7, scope: !5415)
!5421 = !DILocation(line: 714, column: 12, scope: !5415)
!5422 = !DILocation(line: 714, column: 17, scope: !5415)
!5423 = !DILocation(line: 715, column: 14, scope: !5415)
!5424 = !DILocation(line: 715, column: 7, scope: !5415)
!5425 = !DILocation(line: 718, column: 3, scope: !5388)
!5426 = !DILocation(line: 718, column: 8, scope: !5388)
!5427 = !DILocation(line: 718, column: 13, scope: !5388)
!5428 = !DILocation(line: 719, column: 3, scope: !5388)
!5429 = !DILocation(line: 721, column: 1, scope: !5388)
!5430 = distinct !DISubprogram(name: "op_iter_init_use", scope: !3283, file: !3283, line: 768, type: !5431, scopeLine: 769, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!5431 = !DISubroutineType(types: !5432)
!5432 = !{!2899, !4059, !1895, !1662}
!5433 = !DILocalVariable(name: "ptr", arg: 1, scope: !5430, file: !3283, line: 768, type: !4059)
!5434 = !DILocation(line: 768, column: 32, scope: !5430)
!5435 = !DILocalVariable(name: "stmt", arg: 2, scope: !5430, file: !3283, line: 768, type: !1895)
!5436 = !DILocation(line: 768, column: 44, scope: !5430)
!5437 = !DILocalVariable(name: "flags", arg: 3, scope: !5430, file: !3283, line: 768, type: !1662)
!5438 = !DILocation(line: 768, column: 54, scope: !5430)
!5439 = !DILocation(line: 770, column: 3, scope: !5430)
!5440 = !DILocation(line: 772, column: 17, scope: !5430)
!5441 = !DILocation(line: 772, column: 22, scope: !5430)
!5442 = !DILocation(line: 772, column: 28, scope: !5430)
!5443 = !DILocation(line: 772, column: 3, scope: !5430)
!5444 = !DILocation(line: 773, column: 3, scope: !5430)
!5445 = !DILocation(line: 773, column: 8, scope: !5430)
!5446 = !DILocation(line: 773, column: 18, scope: !5430)
!5447 = !DILocation(line: 774, column: 28, scope: !5430)
!5448 = !DILocation(line: 774, column: 10, scope: !5430)
!5449 = !DILocation(line: 774, column: 3, scope: !5430)
!5450 = distinct !DISubprogram(name: "get_use_from_ptr", scope: !3283, file: !3283, line: 427, type: !5451, scopeLine: 428, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!5451 = !DISubroutineType(types: !5452)
!5452 = !{!1565, !2899}
!5453 = !DILocalVariable(name: "use", arg: 1, scope: !5450, file: !3283, line: 427, type: !2899)
!5454 = !DILocation(line: 427, column: 33, scope: !5450)
!5455 = !DILocation(line: 429, column: 12, scope: !5450)
!5456 = !DILocation(line: 429, column: 17, scope: !5450)
!5457 = !DILocation(line: 429, column: 10, scope: !5450)
!5458 = !DILocation(line: 429, column: 3, scope: !5450)
!5459 = distinct !DISubprogram(name: "verify_use", scope: !3, file: !3, line: 690, type: !5460, scopeLine: 692, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!5460 = !DISubroutineType(types: !5461)
!5461 = !{!1685, !2327, !2327, !2899, !1895, !1685, !2443}
!5462 = !DILocalVariable(name: "bb", arg: 1, scope: !5459, file: !3, line: 690, type: !2327)
!5463 = !DILocation(line: 690, column: 25, scope: !5459)
!5464 = !DILocalVariable(name: "def_bb", arg: 2, scope: !5459, file: !3, line: 690, type: !2327)
!5465 = !DILocation(line: 690, column: 41, scope: !5459)
!5466 = !DILocalVariable(name: "use_p", arg: 3, scope: !5459, file: !3, line: 690, type: !2899)
!5467 = !DILocation(line: 690, column: 63, scope: !5459)
!5468 = !DILocalVariable(name: "stmt", arg: 4, scope: !5459, file: !3, line: 691, type: !1895)
!5469 = !DILocation(line: 691, column: 13, scope: !5459)
!5470 = !DILocalVariable(name: "check_abnormal", arg: 5, scope: !5459, file: !3, line: 691, type: !1685)
!5471 = !DILocation(line: 691, column: 24, scope: !5459)
!5472 = !DILocalVariable(name: "names_defined_in_bb", arg: 6, scope: !5459, file: !3, line: 691, type: !2443)
!5473 = !DILocation(line: 691, column: 47, scope: !5459)
!5474 = !DILocalVariable(name: "err", scope: !5459, file: !3, line: 693, type: !1685)
!5475 = !DILocation(line: 693, column: 8, scope: !5459)
!5476 = !DILocalVariable(name: "ssa_name", scope: !5459, file: !3, line: 694, type: !1565)
!5477 = !DILocation(line: 694, column: 8, scope: !5459)
!5478 = !DILocation(line: 694, column: 19, scope: !5459)
!5479 = !DILocation(line: 696, column: 8, scope: !5480)
!5480 = distinct !DILexicalBlock(scope: !5459, file: !3, line: 696, column: 7)
!5481 = !DILocation(line: 696, column: 7, scope: !5459)
!5482 = !DILocation(line: 697, column: 27, scope: !5483)
!5483 = distinct !DILexicalBlock(scope: !5480, file: !3, line: 697, column: 9)
!5484 = !DILocation(line: 697, column: 35, scope: !5483)
!5485 = !DILocation(line: 697, column: 9, scope: !5483)
!5486 = !DILocation(line: 697, column: 9, scope: !5480)
!5487 = !DILocation(line: 698, column: 11, scope: !5483)
!5488 = !DILocation(line: 698, column: 7, scope: !5483)
!5489 = !DILocation(line: 697, column: 43, scope: !5483)
!5490 = !DILocation(line: 700, column: 3, scope: !5459)
!5491 = !DILocation(line: 700, column: 27, scope: !5459)
!5492 = !DILocation(line: 702, column: 21, scope: !5493)
!5493 = distinct !DILexicalBlock(scope: !5459, file: !3, line: 702, column: 7)
!5494 = !DILocation(line: 702, column: 7, scope: !5493)
!5495 = !DILocation(line: 703, column: 7, scope: !5493)
!5496 = !DILocation(line: 703, column: 10, scope: !5493)
!5497 = !DILocation(line: 702, column: 7, scope: !5459)
!5498 = !DILocation(line: 705, column: 13, scope: !5499)
!5499 = distinct !DILexicalBlock(scope: !5493, file: !3, line: 705, column: 12)
!5500 = !DILocation(line: 705, column: 12, scope: !5493)
!5501 = !DILocation(line: 707, column: 7, scope: !5502)
!5502 = distinct !DILexicalBlock(scope: !5499, file: !3, line: 706, column: 5)
!5503 = !DILocation(line: 708, column: 11, scope: !5502)
!5504 = !DILocation(line: 709, column: 5, scope: !5502)
!5505 = !DILocation(line: 710, column: 12, scope: !5506)
!5506 = distinct !DILexicalBlock(scope: !5499, file: !3, line: 710, column: 12)
!5507 = !DILocation(line: 710, column: 18, scope: !5506)
!5508 = !DILocation(line: 710, column: 15, scope: !5506)
!5509 = !DILocation(line: 711, column: 5, scope: !5506)
!5510 = !DILocation(line: 711, column: 41, scope: !5506)
!5511 = !DILocation(line: 711, column: 45, scope: !5506)
!5512 = !DILocation(line: 711, column: 9, scope: !5506)
!5513 = !DILocation(line: 710, column: 12, scope: !5499)
!5514 = !DILocation(line: 714, column: 7, scope: !5515)
!5515 = distinct !DILexicalBlock(scope: !5506, file: !3, line: 712, column: 5)
!5516 = !DILocation(line: 714, column: 15, scope: !5515)
!5517 = !DILocation(line: 714, column: 22, scope: !5515)
!5518 = !DILocation(line: 714, column: 26, scope: !5515)
!5519 = !DILocation(line: 713, column: 7, scope: !5515)
!5520 = !DILocation(line: 715, column: 11, scope: !5515)
!5521 = !DILocation(line: 716, column: 5, scope: !5515)
!5522 = !DILocation(line: 717, column: 12, scope: !5523)
!5523 = distinct !DILexicalBlock(scope: !5506, file: !3, line: 717, column: 12)
!5524 = !DILocation(line: 717, column: 18, scope: !5523)
!5525 = !DILocation(line: 717, column: 15, scope: !5523)
!5526 = !DILocation(line: 718, column: 5, scope: !5523)
!5527 = !DILocation(line: 718, column: 8, scope: !5523)
!5528 = !DILocation(line: 718, column: 28, scope: !5523)
!5529 = !DILocation(line: 719, column: 5, scope: !5523)
!5530 = !DILocation(line: 719, column: 23, scope: !5523)
!5531 = !DILocation(line: 719, column: 44, scope: !5523)
!5532 = !DILocation(line: 719, column: 9, scope: !5523)
!5533 = !DILocation(line: 717, column: 12, scope: !5506)
!5534 = !DILocation(line: 721, column: 56, scope: !5535)
!5535 = distinct !DILexicalBlock(scope: !5523, file: !3, line: 720, column: 5)
!5536 = !DILocation(line: 721, column: 64, scope: !5535)
!5537 = !DILocation(line: 721, column: 7, scope: !5535)
!5538 = !DILocation(line: 722, column: 11, scope: !5535)
!5539 = !DILocation(line: 723, column: 5, scope: !5535)
!5540 = !DILocation(line: 725, column: 7, scope: !5541)
!5541 = distinct !DILexicalBlock(scope: !5459, file: !3, line: 725, column: 7)
!5542 = !DILocation(line: 726, column: 7, scope: !5541)
!5543 = !DILocation(line: 726, column: 11, scope: !5541)
!5544 = !DILocation(line: 725, column: 7, scope: !5459)
!5545 = !DILocation(line: 728, column: 7, scope: !5546)
!5546 = distinct !DILexicalBlock(scope: !5541, file: !3, line: 727, column: 5)
!5547 = !DILocation(line: 729, column: 11, scope: !5546)
!5548 = !DILocation(line: 730, column: 5, scope: !5546)
!5549 = !DILocation(line: 734, column: 7, scope: !5550)
!5550 = distinct !DILexicalBlock(scope: !5459, file: !3, line: 734, column: 7)
!5551 = !DILocation(line: 734, column: 14, scope: !5550)
!5552 = !DILocation(line: 734, column: 19, scope: !5550)
!5553 = !DILocation(line: 734, column: 7, scope: !5459)
!5554 = !DILocation(line: 736, column: 7, scope: !5555)
!5555 = distinct !DILexicalBlock(scope: !5550, file: !3, line: 735, column: 5)
!5556 = !DILocation(line: 737, column: 11, scope: !5555)
!5557 = !DILocation(line: 738, column: 5, scope: !5555)
!5558 = !DILocalVariable(name: "listvar", scope: !5559, file: !3, line: 741, type: !1565)
!5559 = distinct !DILexicalBlock(scope: !5550, file: !3, line: 740, column: 5)
!5560 = !DILocation(line: 741, column: 12, scope: !5559)
!5561 = !DILocation(line: 742, column: 11, scope: !5562)
!5562 = distinct !DILexicalBlock(scope: !5559, file: !3, line: 742, column: 11)
!5563 = !DILocation(line: 742, column: 18, scope: !5562)
!5564 = !DILocation(line: 742, column: 24, scope: !5562)
!5565 = !DILocation(line: 742, column: 28, scope: !5562)
!5566 = !DILocation(line: 742, column: 11, scope: !5559)
!5567 = !DILocation(line: 743, column: 12, scope: !5562)
!5568 = !DILocation(line: 743, column: 19, scope: !5562)
!5569 = !DILocation(line: 743, column: 25, scope: !5562)
!5570 = !DILocation(line: 743, column: 29, scope: !5562)
!5571 = !DILocation(line: 743, column: 10, scope: !5562)
!5572 = !DILocation(line: 743, column: 2, scope: !5562)
!5573 = !DILocation(line: 745, column: 12, scope: !5562)
!5574 = !DILocation(line: 745, column: 10, scope: !5562)
!5575 = !DILocation(line: 746, column: 11, scope: !5576)
!5576 = distinct !DILexicalBlock(scope: !5559, file: !3, line: 746, column: 11)
!5577 = !DILocation(line: 746, column: 22, scope: !5576)
!5578 = !DILocation(line: 746, column: 19, scope: !5576)
!5579 = !DILocation(line: 746, column: 11, scope: !5559)
!5580 = !DILocation(line: 748, column: 4, scope: !5581)
!5581 = distinct !DILexicalBlock(scope: !5576, file: !3, line: 747, column: 9)
!5582 = !DILocation(line: 749, column: 8, scope: !5581)
!5583 = !DILocation(line: 750, column: 2, scope: !5581)
!5584 = !DILocation(line: 753, column: 7, scope: !5585)
!5585 = distinct !DILexicalBlock(scope: !5459, file: !3, line: 753, column: 7)
!5586 = !DILocation(line: 753, column: 7, scope: !5459)
!5587 = !DILocation(line: 755, column: 16, scope: !5588)
!5588 = distinct !DILexicalBlock(scope: !5585, file: !3, line: 754, column: 5)
!5589 = !DILocation(line: 755, column: 7, scope: !5588)
!5590 = !DILocation(line: 756, column: 27, scope: !5588)
!5591 = !DILocation(line: 756, column: 35, scope: !5588)
!5592 = !DILocation(line: 756, column: 7, scope: !5588)
!5593 = !DILocation(line: 757, column: 16, scope: !5588)
!5594 = !DILocation(line: 757, column: 7, scope: !5588)
!5595 = !DILocation(line: 758, column: 26, scope: !5588)
!5596 = !DILocation(line: 758, column: 34, scope: !5588)
!5597 = !DILocation(line: 758, column: 7, scope: !5588)
!5598 = !DILocation(line: 759, column: 5, scope: !5588)
!5599 = !DILocation(line: 761, column: 10, scope: !5459)
!5600 = !DILocation(line: 761, column: 3, scope: !5459)
!5601 = distinct !DISubprogram(name: "op_iter_next_use", scope: !3283, file: !3283, line: 659, type: !5602, scopeLine: 660, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!5602 = !DISubroutineType(types: !5603)
!5603 = !{!2899, !4059}
!5604 = !DILocalVariable(name: "ptr", arg: 1, scope: !5601, file: !3283, line: 659, type: !4059)
!5605 = !DILocation(line: 659, column: 32, scope: !5601)
!5606 = !DILocalVariable(name: "use_p", scope: !5601, file: !3283, line: 661, type: !2899)
!5607 = !DILocation(line: 661, column: 17, scope: !5601)
!5608 = !DILocation(line: 665, column: 7, scope: !5609)
!5609 = distinct !DILexicalBlock(scope: !5601, file: !3283, line: 665, column: 7)
!5610 = !DILocation(line: 665, column: 12, scope: !5609)
!5611 = !DILocation(line: 665, column: 7, scope: !5601)
!5612 = !DILocation(line: 667, column: 15, scope: !5613)
!5613 = distinct !DILexicalBlock(scope: !5609, file: !3283, line: 666, column: 5)
!5614 = !DILocation(line: 667, column: 13, scope: !5613)
!5615 = !DILocation(line: 668, column: 19, scope: !5613)
!5616 = !DILocation(line: 668, column: 24, scope: !5613)
!5617 = !DILocation(line: 668, column: 30, scope: !5613)
!5618 = !DILocation(line: 668, column: 7, scope: !5613)
!5619 = !DILocation(line: 668, column: 12, scope: !5613)
!5620 = !DILocation(line: 668, column: 17, scope: !5613)
!5621 = !DILocation(line: 669, column: 14, scope: !5613)
!5622 = !DILocation(line: 669, column: 7, scope: !5613)
!5623 = !DILocation(line: 671, column: 7, scope: !5624)
!5624 = distinct !DILexicalBlock(scope: !5601, file: !3283, line: 671, column: 7)
!5625 = !DILocation(line: 671, column: 12, scope: !5624)
!5626 = !DILocation(line: 671, column: 20, scope: !5624)
!5627 = !DILocation(line: 671, column: 25, scope: !5624)
!5628 = !DILocation(line: 671, column: 18, scope: !5624)
!5629 = !DILocation(line: 671, column: 7, scope: !5601)
!5630 = !DILocation(line: 673, column: 14, scope: !5631)
!5631 = distinct !DILexicalBlock(scope: !5624, file: !3283, line: 672, column: 5)
!5632 = !DILocation(line: 673, column: 7, scope: !5631)
!5633 = !DILocation(line: 675, column: 3, scope: !5601)
!5634 = !DILocation(line: 675, column: 8, scope: !5601)
!5635 = !DILocation(line: 675, column: 13, scope: !5601)
!5636 = !DILocation(line: 676, column: 3, scope: !5601)
!5637 = !DILocation(line: 677, column: 1, scope: !5601)
!5638 = distinct !DISubprogram(name: "int_tree_map_eq", scope: !3, file: !3, line: 1063, type: !2373, scopeLine: 1064, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!5639 = !DILocalVariable(name: "va", arg: 1, scope: !5638, file: !3, line: 1063, type: !2201)
!5640 = !DILocation(line: 1063, column: 30, scope: !5638)
!5641 = !DILocalVariable(name: "vb", arg: 2, scope: !5638, file: !3, line: 1063, type: !2201)
!5642 = !DILocation(line: 1063, column: 46, scope: !5638)
!5643 = !DILocalVariable(name: "a", scope: !5638, file: !3, line: 1065, type: !2902)
!5644 = !DILocation(line: 1065, column: 30, scope: !5638)
!5645 = !DILocation(line: 1065, column: 64, scope: !5638)
!5646 = !DILocation(line: 1065, column: 34, scope: !5638)
!5647 = !DILocalVariable(name: "b", scope: !5638, file: !3, line: 1066, type: !2902)
!5648 = !DILocation(line: 1066, column: 30, scope: !5638)
!5649 = !DILocation(line: 1066, column: 64, scope: !5638)
!5650 = !DILocation(line: 1066, column: 34, scope: !5638)
!5651 = !DILocation(line: 1067, column: 11, scope: !5638)
!5652 = !DILocation(line: 1067, column: 14, scope: !5638)
!5653 = !DILocation(line: 1067, column: 21, scope: !5638)
!5654 = !DILocation(line: 1067, column: 24, scope: !5638)
!5655 = !DILocation(line: 1067, column: 18, scope: !5638)
!5656 = !DILocation(line: 1067, column: 3, scope: !5638)
!5657 = distinct !DISubprogram(name: "int_tree_map_hash", scope: !3, file: !3, line: 1073, type: !5658, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!5658 = !DISubroutineType(types: !5659)
!5659 = !{!7, !2201}
!5660 = !DILocalVariable(name: "item", arg: 1, scope: !5657, file: !3, line: 1073, type: !2201)
!5661 = !DILocation(line: 1073, column: 32, scope: !5657)
!5662 = !DILocation(line: 1075, column: 40, scope: !5657)
!5663 = !DILocation(line: 1075, column: 11, scope: !5657)
!5664 = !DILocation(line: 1075, column: 47, scope: !5657)
!5665 = !DILocation(line: 1075, column: 3, scope: !5657)
!5666 = distinct !DISubprogram(name: "uid_decl_map_eq", scope: !3, file: !3, line: 1081, type: !2373, scopeLine: 1082, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!5667 = !DILocalVariable(name: "va", arg: 1, scope: !5666, file: !3, line: 1081, type: !2201)
!5668 = !DILocation(line: 1081, column: 30, scope: !5666)
!5669 = !DILocalVariable(name: "vb", arg: 2, scope: !5666, file: !3, line: 1081, type: !2201)
!5670 = !DILocation(line: 1081, column: 46, scope: !5666)
!5671 = !DILocalVariable(name: "a", scope: !5666, file: !3, line: 1083, type: !2908)
!5672 = !DILocation(line: 1083, column: 14, scope: !5666)
!5673 = !DILocation(line: 1083, column: 31, scope: !5666)
!5674 = !DILocation(line: 1083, column: 18, scope: !5666)
!5675 = !DILocalVariable(name: "b", scope: !5666, file: !3, line: 1084, type: !2908)
!5676 = !DILocation(line: 1084, column: 14, scope: !5666)
!5677 = !DILocation(line: 1084, column: 31, scope: !5666)
!5678 = !DILocation(line: 1084, column: 18, scope: !5666)
!5679 = !DILocation(line: 1085, column: 11, scope: !5666)
!5680 = !DILocation(line: 1085, column: 14, scope: !5666)
!5681 = !DILocation(line: 1085, column: 27, scope: !5666)
!5682 = !DILocation(line: 1085, column: 34, scope: !5666)
!5683 = !DILocation(line: 1085, column: 37, scope: !5666)
!5684 = !DILocation(line: 1085, column: 50, scope: !5666)
!5685 = !DILocation(line: 1085, column: 31, scope: !5666)
!5686 = !DILocation(line: 1085, column: 3, scope: !5666)
!5687 = distinct !DISubprogram(name: "uid_decl_map_hash", scope: !3, file: !3, line: 1091, type: !5658, scopeLine: 1092, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!5688 = !DILocalVariable(name: "item", arg: 1, scope: !5687, file: !3, line: 1091, type: !2201)
!5689 = !DILocation(line: 1091, column: 32, scope: !5687)
!5690 = !DILocation(line: 1093, column: 23, scope: !5687)
!5691 = !DILocation(line: 1093, column: 11, scope: !5687)
!5692 = !DILocation(line: 1093, column: 30, scope: !5687)
!5693 = !DILocation(line: 1093, column: 43, scope: !5687)
!5694 = !DILocation(line: 1093, column: 3, scope: !5687)
!5695 = distinct !DISubprogram(name: "init_tree_ssa", scope: !3, file: !3, line: 1118, type: !5696, scopeLine: 1119, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!5696 = !DISubroutineType(types: !5697)
!5697 = !{null, !2315}
!5698 = !DILocalVariable(name: "fn", arg: 1, scope: !5695, file: !3, line: 1118, type: !2315)
!5699 = !DILocation(line: 1118, column: 33, scope: !5695)
!5700 = !DILocation(line: 1120, column: 19, scope: !5695)
!5701 = !DILocation(line: 1120, column: 3, scope: !5695)
!5702 = !DILocation(line: 1120, column: 7, scope: !5695)
!5703 = !DILocation(line: 1120, column: 17, scope: !5695)
!5704 = !DILocation(line: 1121, column: 36, scope: !5695)
!5705 = !DILocation(line: 1121, column: 3, scope: !5695)
!5706 = !DILocation(line: 1121, column: 7, scope: !5695)
!5707 = !DILocation(line: 1121, column: 18, scope: !5695)
!5708 = !DILocation(line: 1121, column: 34, scope: !5695)
!5709 = !DILocation(line: 1123, column: 33, scope: !5695)
!5710 = !DILocation(line: 1123, column: 3, scope: !5695)
!5711 = !DILocation(line: 1123, column: 7, scope: !5695)
!5712 = !DILocation(line: 1123, column: 18, scope: !5695)
!5713 = !DILocation(line: 1123, column: 31, scope: !5695)
!5714 = !DILocation(line: 1125, column: 23, scope: !5695)
!5715 = !DILocation(line: 1125, column: 27, scope: !5695)
!5716 = !DILocation(line: 1125, column: 38, scope: !5695)
!5717 = !DILocation(line: 1125, column: 3, scope: !5695)
!5718 = !DILocation(line: 1126, column: 23, scope: !5695)
!5719 = !DILocation(line: 1126, column: 27, scope: !5695)
!5720 = !DILocation(line: 1126, column: 38, scope: !5695)
!5721 = !DILocation(line: 1126, column: 3, scope: !5695)
!5722 = !DILocation(line: 1127, column: 18, scope: !5695)
!5723 = !DILocation(line: 1127, column: 3, scope: !5695)
!5724 = !DILocation(line: 1128, column: 3, scope: !5695)
!5725 = !DILocation(line: 1129, column: 1, scope: !5695)
!5726 = distinct !DISubprogram(name: "uid_ssaname_map_hash", scope: !3, file: !3, line: 1109, type: !5658, scopeLine: 1110, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!5727 = !DILocalVariable(name: "item", arg: 1, scope: !5726, file: !3, line: 1109, type: !2201)
!5728 = !DILocation(line: 1109, column: 35, scope: !5726)
!5729 = !DILocation(line: 1111, column: 23, scope: !5726)
!5730 = !DILocation(line: 1111, column: 11, scope: !5726)
!5731 = !DILocation(line: 1111, column: 30, scope: !5726)
!5732 = !DILocation(line: 1111, column: 39, scope: !5726)
!5733 = !DILocation(line: 1111, column: 44, scope: !5726)
!5734 = !DILocation(line: 1111, column: 57, scope: !5726)
!5735 = !DILocation(line: 1111, column: 3, scope: !5726)
!5736 = distinct !DISubprogram(name: "uid_ssaname_map_eq", scope: !3, file: !3, line: 1099, type: !2373, scopeLine: 1100, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!5737 = !DILocalVariable(name: "va", arg: 1, scope: !5736, file: !3, line: 1099, type: !2201)
!5738 = !DILocation(line: 1099, column: 33, scope: !5736)
!5739 = !DILocalVariable(name: "vb", arg: 2, scope: !5736, file: !3, line: 1099, type: !2201)
!5740 = !DILocation(line: 1099, column: 49, scope: !5736)
!5741 = !DILocalVariable(name: "a", scope: !5736, file: !3, line: 1101, type: !2908)
!5742 = !DILocation(line: 1101, column: 14, scope: !5736)
!5743 = !DILocation(line: 1101, column: 31, scope: !5736)
!5744 = !DILocation(line: 1101, column: 18, scope: !5736)
!5745 = !DILocalVariable(name: "b", scope: !5736, file: !3, line: 1102, type: !2908)
!5746 = !DILocation(line: 1102, column: 14, scope: !5736)
!5747 = !DILocation(line: 1102, column: 31, scope: !5736)
!5748 = !DILocation(line: 1102, column: 18, scope: !5736)
!5749 = !DILocation(line: 1103, column: 11, scope: !5736)
!5750 = !DILocation(line: 1103, column: 14, scope: !5736)
!5751 = !DILocation(line: 1103, column: 23, scope: !5736)
!5752 = !DILocation(line: 1103, column: 28, scope: !5736)
!5753 = !DILocation(line: 1103, column: 41, scope: !5736)
!5754 = !DILocation(line: 1103, column: 48, scope: !5736)
!5755 = !DILocation(line: 1103, column: 51, scope: !5736)
!5756 = !DILocation(line: 1103, column: 60, scope: !5736)
!5757 = !DILocation(line: 1103, column: 65, scope: !5736)
!5758 = !DILocation(line: 1103, column: 78, scope: !5736)
!5759 = !DILocation(line: 1103, column: 45, scope: !5736)
!5760 = !DILocation(line: 1103, column: 3, scope: !5736)
!5761 = distinct !DISubprogram(name: "delete_tree_ssa", scope: !3, file: !3, line: 1135, type: !3175, scopeLine: 1136, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!5762 = !DILocalVariable(name: "rvi", scope: !5761, file: !3, line: 1137, type: !5763)
!5763 = !DIDerivedType(tag: DW_TAG_typedef, name: "referenced_var_iterator", file: !1548, line: 336, baseType: !5764)
!5764 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1548, line: 333, size: 192, elements: !5765)
!5765 = !{!5766}
!5766 = !DIDerivedType(tag: DW_TAG_member, name: "hti", scope: !5764, file: !1548, line: 335, baseType: !5767, size: 192)
!5767 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_iterator", file: !1548, line: 98, baseType: !5768)
!5768 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1548, line: 93, size: 192, elements: !5769)
!5769 = !{!5770, !5771, !5772}
!5770 = !DIDerivedType(tag: DW_TAG_member, name: "htab", scope: !5768, file: !1548, line: 95, baseType: !2359, size: 64)
!5771 = !DIDerivedType(tag: DW_TAG_member, name: "slot", scope: !5768, file: !1548, line: 96, baseType: !2381, size: 64, offset: 64)
!5772 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !5768, file: !1548, line: 97, baseType: !2381, size: 64, offset: 128)
!5773 = !DILocation(line: 1137, column: 27, scope: !5761)
!5774 = !DILocalVariable(name: "var", scope: !5761, file: !3, line: 1138, type: !1565)
!5775 = !DILocation(line: 1138, column: 8, scope: !5761)
!5776 = !DILocation(line: 1141, column: 3, scope: !5777)
!5777 = distinct !DILexicalBlock(scope: !5761, file: !3, line: 1141, column: 3)
!5778 = !DILocation(line: 1141, column: 3, scope: !5779)
!5779 = distinct !DILexicalBlock(scope: !5777, file: !3, line: 1141, column: 3)
!5780 = !DILocation(line: 1143, column: 26, scope: !5781)
!5781 = distinct !DILexicalBlock(scope: !5782, file: !3, line: 1143, column: 11)
!5782 = distinct !DILexicalBlock(scope: !5779, file: !3, line: 1142, column: 5)
!5783 = !DILocation(line: 1143, column: 11, scope: !5781)
!5784 = !DILocation(line: 1143, column: 11, scope: !5782)
!5785 = !DILocation(line: 1144, column: 2, scope: !5781)
!5786 = !DILocation(line: 1145, column: 20, scope: !5787)
!5787 = distinct !DILexicalBlock(scope: !5782, file: !3, line: 1145, column: 11)
!5788 = !DILocation(line: 1145, column: 11, scope: !5787)
!5789 = !DILocation(line: 1145, column: 11, scope: !5782)
!5790 = !DILocation(line: 1147, column: 23, scope: !5791)
!5791 = distinct !DILexicalBlock(scope: !5787, file: !3, line: 1146, column: 2)
!5792 = !DILocation(line: 1147, column: 14, scope: !5791)
!5793 = !DILocation(line: 1147, column: 4, scope: !5791)
!5794 = !DILocation(line: 1148, column: 5, scope: !5791)
!5795 = !DILocation(line: 1148, column: 28, scope: !5791)
!5796 = !DILocation(line: 1149, column: 2, scope: !5791)
!5797 = !DILocation(line: 1150, column: 5, scope: !5782)
!5798 = distinct !{!5798, !5776, !5799}
!5799 = !DILocation(line: 1150, column: 5, scope: !5777)
!5800 = !DILocation(line: 1151, column: 40, scope: !5761)
!5801 = !DILocation(line: 1151, column: 16, scope: !5761)
!5802 = !DILocation(line: 1151, column: 3, scope: !5761)
!5803 = !DILocation(line: 1152, column: 3, scope: !5761)
!5804 = !DILocation(line: 1152, column: 9, scope: !5761)
!5805 = !DILocation(line: 1152, column: 20, scope: !5761)
!5806 = !DILocation(line: 1152, column: 36, scope: !5761)
!5807 = !DILocation(line: 1154, column: 3, scope: !5761)
!5808 = !DILocation(line: 1155, column: 3, scope: !5761)
!5809 = !DILocation(line: 1158, column: 7, scope: !5810)
!5810 = distinct !DILexicalBlock(scope: !5761, file: !3, line: 1158, column: 7)
!5811 = !DILocation(line: 1158, column: 7, scope: !5761)
!5812 = !DILocation(line: 1159, column: 5, scope: !5810)
!5813 = !DILocation(line: 1161, column: 3, scope: !5761)
!5814 = !DILocation(line: 1163, column: 16, scope: !5761)
!5815 = !DILocation(line: 1163, column: 22, scope: !5761)
!5816 = !DILocation(line: 1163, column: 33, scope: !5761)
!5817 = !DILocation(line: 1163, column: 3, scope: !5761)
!5818 = !DILocation(line: 1164, column: 3, scope: !5761)
!5819 = !DILocation(line: 1164, column: 9, scope: !5761)
!5820 = !DILocation(line: 1164, column: 20, scope: !5761)
!5821 = !DILocation(line: 1164, column: 33, scope: !5761)
!5822 = !DILocation(line: 1165, column: 23, scope: !5761)
!5823 = !DILocation(line: 1165, column: 29, scope: !5761)
!5824 = !DILocation(line: 1165, column: 40, scope: !5761)
!5825 = !DILocation(line: 1165, column: 3, scope: !5761)
!5826 = !DILocation(line: 1166, column: 23, scope: !5761)
!5827 = !DILocation(line: 1166, column: 29, scope: !5761)
!5828 = !DILocation(line: 1166, column: 40, scope: !5761)
!5829 = !DILocation(line: 1166, column: 3, scope: !5761)
!5830 = !DILocation(line: 1167, column: 7, scope: !5831)
!5831 = distinct !DILexicalBlock(scope: !5761, file: !3, line: 1167, column: 7)
!5832 = !DILocation(line: 1167, column: 13, scope: !5831)
!5833 = !DILocation(line: 1167, column: 24, scope: !5831)
!5834 = !DILocation(line: 1167, column: 42, scope: !5831)
!5835 = !DILocation(line: 1167, column: 7, scope: !5761)
!5836 = !DILocation(line: 1168, column: 26, scope: !5831)
!5837 = !DILocation(line: 1168, column: 32, scope: !5831)
!5838 = !DILocation(line: 1168, column: 43, scope: !5831)
!5839 = !DILocation(line: 1168, column: 5, scope: !5831)
!5840 = !DILocation(line: 1169, column: 3, scope: !5761)
!5841 = !DILocation(line: 1169, column: 9, scope: !5761)
!5842 = !DILocation(line: 1169, column: 20, scope: !5761)
!5843 = !DILocation(line: 1169, column: 38, scope: !5761)
!5844 = !DILocation(line: 1170, column: 3, scope: !5761)
!5845 = !DILocation(line: 1170, column: 9, scope: !5761)
!5846 = !DILocation(line: 1170, column: 20, scope: !5761)
!5847 = !DILocation(line: 1170, column: 44, scope: !5761)
!5848 = !DILocation(line: 1171, column: 3, scope: !5761)
!5849 = !DILocation(line: 1171, column: 9, scope: !5761)
!5850 = !DILocation(line: 1171, column: 19, scope: !5761)
!5851 = !DILocation(line: 1174, column: 3, scope: !5761)
!5852 = !DILocation(line: 1175, column: 1, scope: !5761)
!5853 = distinct !DISubprogram(name: "first_referenced_var", scope: !3283, file: !3283, line: 105, type: !5854, scopeLine: 106, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!5854 = !DISubroutineType(types: !5855)
!5855 = !{!1565, !5856}
!5856 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5763, size: 64)
!5857 = !DILocalVariable(name: "iter", arg: 1, scope: !5853, file: !3283, line: 105, type: !5856)
!5858 = !DILocation(line: 105, column: 48, scope: !5853)
!5859 = !DILocation(line: 107, column: 38, scope: !5853)
!5860 = !DILocation(line: 107, column: 44, scope: !5853)
!5861 = !DILocation(line: 108, column: 33, scope: !5853)
!5862 = !DILocation(line: 108, column: 9, scope: !5853)
!5863 = !DILocation(line: 107, column: 17, scope: !5853)
!5864 = !DILocation(line: 107, column: 10, scope: !5853)
!5865 = !DILocation(line: 107, column: 3, scope: !5853)
!5866 = distinct !DISubprogram(name: "end_referenced_vars_p", scope: !3283, file: !3283, line: 115, type: !5867, scopeLine: 116, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!5867 = !DISubroutineType(types: !5868)
!5868 = !{!1685, !5869}
!5869 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5870, size: 64)
!5870 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !5763)
!5871 = !DILocalVariable(name: "iter", arg: 1, scope: !5866, file: !3283, line: 115, type: !5869)
!5872 = !DILocation(line: 115, column: 55, scope: !5866)
!5873 = !DILocation(line: 117, column: 23, scope: !5866)
!5874 = !DILocation(line: 117, column: 29, scope: !5866)
!5875 = !DILocation(line: 117, column: 10, scope: !5866)
!5876 = !DILocation(line: 117, column: 3, scope: !5866)
!5877 = distinct !DISubprogram(name: "is_global_var", scope: !3283, file: !3283, line: 575, type: !5878, scopeLine: 576, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!5878 = !DISubroutineType(types: !5879)
!5879 = !{!1685, !2908}
!5880 = !DILocalVariable(name: "t", arg: 1, scope: !5877, file: !3283, line: 575, type: !2908)
!5881 = !DILocation(line: 575, column: 27, scope: !5877)
!5882 = !DILocation(line: 577, column: 11, scope: !5877)
!5883 = !DILocation(line: 577, column: 27, scope: !5877)
!5884 = !DILocation(line: 577, column: 30, scope: !5877)
!5885 = !DILocation(line: 577, column: 10, scope: !5877)
!5886 = !DILocation(line: 577, column: 3, scope: !5877)
!5887 = distinct !DISubprogram(name: "var_ann", scope: !3283, file: !3283, line: 132, type: !5888, scopeLine: 133, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!5888 = !DISubroutineType(types: !5889)
!5889 = !{!5890, !2908}
!5890 = !DIDerivedType(tag: DW_TAG_typedef, name: "var_ann_t", file: !1548, line: 297, baseType: !2266)
!5891 = !DILocalVariable(name: "t", arg: 1, scope: !5887, file: !3283, line: 132, type: !2908)
!5892 = !DILocation(line: 132, column: 21, scope: !5887)
!5893 = !DILocalVariable(name: "p", scope: !5887, file: !3283, line: 134, type: !5894)
!5894 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5895, size: 64)
!5895 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !5890)
!5896 = !DILocation(line: 134, column: 20, scope: !5887)
!5897 = !DILocation(line: 134, column: 24, scope: !5887)
!5898 = !DILocation(line: 135, column: 10, scope: !5887)
!5899 = !DILocation(line: 135, column: 15, scope: !5887)
!5900 = !DILocation(line: 135, column: 14, scope: !5887)
!5901 = !DILocation(line: 135, column: 3, scope: !5887)
!5902 = distinct !DISubprogram(name: "next_referenced_var", scope: !3283, file: !3283, line: 124, type: !5854, scopeLine: 125, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!5903 = !DILocalVariable(name: "iter", arg: 1, scope: !5902, file: !3283, line: 124, type: !5856)
!5904 = !DILocation(line: 124, column: 47, scope: !5902)
!5905 = !DILocation(line: 126, column: 37, scope: !5902)
!5906 = !DILocation(line: 126, column: 43, scope: !5902)
!5907 = !DILocation(line: 126, column: 17, scope: !5902)
!5908 = !DILocation(line: 126, column: 10, scope: !5902)
!5909 = !DILocation(line: 126, column: 3, scope: !5902)
!5910 = distinct !DISubprogram(name: "gimple_referenced_vars", scope: !3283, file: !3283, line: 40, type: !5911, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!5911 = !DISubroutineType(types: !5912)
!5912 = !{!2359, !5913}
!5913 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5914, size: 64)
!5914 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2316)
!5915 = !DILocalVariable(name: "fun", arg: 1, scope: !5910, file: !3283, line: 40, type: !5913)
!5916 = !DILocation(line: 40, column: 48, scope: !5910)
!5917 = !DILocation(line: 42, column: 8, scope: !5918)
!5918 = distinct !DILexicalBlock(scope: !5910, file: !3283, line: 42, column: 7)
!5919 = !DILocation(line: 42, column: 13, scope: !5918)
!5920 = !DILocation(line: 42, column: 7, scope: !5910)
!5921 = !DILocation(line: 43, column: 5, scope: !5918)
!5922 = !DILocation(line: 44, column: 10, scope: !5910)
!5923 = !DILocation(line: 44, column: 15, scope: !5910)
!5924 = !DILocation(line: 44, column: 26, scope: !5910)
!5925 = !DILocation(line: 44, column: 3, scope: !5910)
!5926 = !DILocation(line: 45, column: 1, scope: !5910)
!5927 = distinct !DISubprogram(name: "useless_type_conversion_p", scope: !3, file: !3, line: 1201, type: !5928, scopeLine: 1202, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!5928 = !DISubroutineType(types: !5929)
!5929 = !{!1685, !1565, !1565}
!5930 = !DILocalVariable(name: "outer_type", arg: 1, scope: !5927, file: !3, line: 1201, type: !1565)
!5931 = !DILocation(line: 1201, column: 33, scope: !5927)
!5932 = !DILocalVariable(name: "inner_type", arg: 2, scope: !5927, file: !3, line: 1201, type: !1565)
!5933 = !DILocation(line: 1201, column: 50, scope: !5927)
!5934 = !DILocation(line: 1204, column: 7, scope: !5935)
!5935 = distinct !DILexicalBlock(scope: !5927, file: !3, line: 1204, column: 7)
!5936 = !DILocation(line: 1205, column: 7, scope: !5935)
!5937 = !DILocation(line: 1205, column: 10, scope: !5935)
!5938 = !DILocation(line: 1204, column: 7, scope: !5927)
!5939 = !DILocation(line: 1208, column: 11, scope: !5940)
!5940 = distinct !DILexicalBlock(scope: !5941, file: !3, line: 1208, column: 11)
!5941 = distinct !DILexicalBlock(scope: !5935, file: !3, line: 1206, column: 5)
!5942 = !DILocation(line: 1209, column: 7, scope: !5940)
!5943 = !DILocation(line: 1209, column: 4, scope: !5940)
!5944 = !DILocation(line: 1208, column: 11, scope: !5941)
!5945 = !DILocation(line: 1210, column: 2, scope: !5940)
!5946 = !DILocation(line: 1215, column: 11, scope: !5947)
!5947 = distinct !DILexicalBlock(scope: !5941, file: !3, line: 1215, column: 11)
!5948 = !DILocation(line: 1216, column: 4, scope: !5947)
!5949 = !DILocation(line: 1216, column: 9, scope: !5947)
!5950 = !DILocation(line: 1216, column: 44, scope: !5947)
!5951 = !DILocation(line: 1217, column: 9, scope: !5947)
!5952 = !DILocation(line: 1217, column: 12, scope: !5947)
!5953 = !DILocation(line: 1217, column: 47, scope: !5947)
!5954 = !DILocation(line: 1218, column: 8, scope: !5947)
!5955 = !DILocation(line: 1218, column: 12, scope: !5947)
!5956 = !DILocation(line: 1219, column: 8, scope: !5947)
!5957 = !DILocation(line: 1219, column: 5, scope: !5947)
!5958 = !DILocation(line: 1220, column: 8, scope: !5947)
!5959 = !DILocation(line: 1220, column: 12, scope: !5947)
!5960 = !DILocation(line: 1221, column: 8, scope: !5947)
!5961 = !DILocation(line: 1221, column: 38, scope: !5947)
!5962 = !DILocation(line: 1222, column: 10, scope: !5947)
!5963 = !DILocation(line: 1221, column: 11, scope: !5947)
!5964 = !DILocation(line: 1215, column: 11, scope: !5941)
!5965 = !DILocation(line: 1223, column: 2, scope: !5947)
!5966 = !DILocation(line: 1226, column: 12, scope: !5967)
!5967 = distinct !DILexicalBlock(scope: !5941, file: !3, line: 1226, column: 11)
!5968 = !DILocation(line: 1227, column: 8, scope: !5967)
!5969 = !DILocation(line: 1227, column: 5, scope: !5967)
!5970 = !DILocation(line: 1228, column: 4, scope: !5967)
!5971 = !DILocation(line: 1228, column: 7, scope: !5967)
!5972 = !DILocation(line: 1226, column: 11, scope: !5941)
!5973 = !DILocation(line: 1229, column: 2, scope: !5967)
!5974 = !DILocation(line: 1230, column: 5, scope: !5941)
!5975 = !DILocation(line: 1233, column: 16, scope: !5927)
!5976 = !DILocation(line: 1233, column: 14, scope: !5927)
!5977 = !DILocation(line: 1234, column: 16, scope: !5927)
!5978 = !DILocation(line: 1234, column: 14, scope: !5927)
!5979 = !DILocation(line: 1236, column: 7, scope: !5980)
!5980 = distinct !DILexicalBlock(scope: !5927, file: !3, line: 1236, column: 7)
!5981 = !DILocation(line: 1236, column: 21, scope: !5980)
!5982 = !DILocation(line: 1236, column: 18, scope: !5980)
!5983 = !DILocation(line: 1236, column: 7, scope: !5927)
!5984 = !DILocation(line: 1237, column: 5, scope: !5980)
!5985 = !DILocation(line: 1240, column: 7, scope: !5986)
!5986 = distinct !DILexicalBlock(scope: !5927, file: !3, line: 1240, column: 7)
!5987 = !DILocation(line: 1241, column: 7, scope: !5986)
!5988 = !DILocation(line: 1241, column: 10, scope: !5986)
!5989 = !DILocation(line: 1241, column: 41, scope: !5986)
!5990 = !DILocation(line: 1241, column: 38, scope: !5986)
!5991 = !DILocation(line: 1240, column: 7, scope: !5927)
!5992 = !DILocation(line: 1242, column: 5, scope: !5986)
!5993 = !DILocation(line: 1246, column: 7, scope: !5994)
!5994 = distinct !DILexicalBlock(scope: !5927, file: !3, line: 1246, column: 7)
!5995 = !DILocation(line: 1246, column: 33, scope: !5994)
!5996 = !DILocation(line: 1246, column: 30, scope: !5994)
!5997 = !DILocation(line: 1247, column: 7, scope: !5994)
!5998 = !DILocation(line: 1247, column: 11, scope: !5994)
!5999 = !DILocation(line: 1246, column: 7, scope: !5927)
!6000 = !DILocation(line: 1248, column: 5, scope: !5994)
!6001 = !DILocation(line: 1253, column: 7, scope: !6002)
!6002 = distinct !DILexicalBlock(scope: !5927, file: !3, line: 1253, column: 7)
!6003 = !DILocation(line: 1254, column: 7, scope: !6002)
!6004 = !DILocation(line: 1254, column: 10, scope: !6002)
!6005 = !DILocation(line: 1253, column: 7, scope: !5927)
!6006 = !DILocation(line: 1257, column: 11, scope: !6007)
!6007 = distinct !DILexicalBlock(scope: !6008, file: !3, line: 1257, column: 11)
!6008 = distinct !DILexicalBlock(scope: !6002, file: !3, line: 1255, column: 5)
!6009 = !DILocation(line: 1257, column: 41, scope: !6007)
!6010 = !DILocation(line: 1257, column: 38, scope: !6007)
!6011 = !DILocation(line: 1258, column: 4, scope: !6007)
!6012 = !DILocation(line: 1258, column: 7, scope: !6007)
!6013 = !DILocation(line: 1258, column: 38, scope: !6007)
!6014 = !DILocation(line: 1258, column: 35, scope: !6007)
!6015 = !DILocation(line: 1257, column: 11, scope: !6008)
!6016 = !DILocation(line: 1259, column: 2, scope: !6007)
!6017 = !DILocation(line: 1264, column: 7, scope: !6008)
!6018 = !DILocation(line: 1268, column: 12, scope: !6019)
!6019 = distinct !DILexicalBlock(scope: !6002, file: !3, line: 1268, column: 12)
!6020 = !DILocation(line: 1269, column: 5, scope: !6019)
!6021 = !DILocation(line: 1269, column: 8, scope: !6019)
!6022 = !DILocation(line: 1268, column: 12, scope: !6002)
!6023 = !DILocation(line: 1270, column: 5, scope: !6019)
!6024 = !DILocation(line: 1273, column: 12, scope: !6025)
!6025 = distinct !DILexicalBlock(scope: !6019, file: !3, line: 1273, column: 12)
!6026 = !DILocation(line: 1274, column: 5, scope: !6025)
!6027 = !DILocation(line: 1274, column: 8, scope: !6025)
!6028 = !DILocation(line: 1273, column: 12, scope: !6019)
!6029 = !DILocation(line: 1275, column: 5, scope: !6025)
!6030 = !DILocation(line: 1278, column: 12, scope: !6031)
!6031 = distinct !DILexicalBlock(scope: !6025, file: !3, line: 1278, column: 12)
!6032 = !DILocation(line: 1279, column: 5, scope: !6031)
!6033 = !DILocation(line: 1279, column: 8, scope: !6031)
!6034 = !DILocation(line: 1278, column: 12, scope: !6025)
!6035 = !DILocation(line: 1285, column: 11, scope: !6036)
!6036 = distinct !DILexicalBlock(scope: !6037, file: !3, line: 1285, column: 11)
!6037 = distinct !DILexicalBlock(scope: !6031, file: !3, line: 1280, column: 5)
!6038 = !DILocation(line: 1285, column: 46, scope: !6036)
!6039 = !DILocation(line: 1286, column: 4, scope: !6036)
!6040 = !DILocation(line: 1286, column: 7, scope: !6036)
!6041 = !DILocation(line: 1286, column: 42, scope: !6036)
!6042 = !DILocation(line: 1287, column: 4, scope: !6036)
!6043 = !DILocation(line: 1287, column: 7, scope: !6036)
!6044 = !DILocation(line: 1287, column: 42, scope: !6036)
!6045 = !DILocation(line: 1288, column: 4, scope: !6036)
!6046 = !DILocation(line: 1288, column: 7, scope: !6036)
!6047 = !DILocation(line: 1288, column: 42, scope: !6036)
!6048 = !DILocation(line: 1289, column: 4, scope: !6036)
!6049 = !DILocation(line: 1289, column: 8, scope: !6036)
!6050 = !DILocation(line: 1290, column: 11, scope: !6036)
!6051 = !DILocation(line: 1290, column: 8, scope: !6036)
!6052 = !DILocation(line: 1291, column: 4, scope: !6036)
!6053 = !DILocation(line: 1291, column: 7, scope: !6036)
!6054 = !DILocation(line: 1285, column: 11, scope: !6037)
!6055 = !DILocation(line: 1292, column: 2, scope: !6036)
!6056 = !DILocation(line: 1295, column: 12, scope: !6057)
!6057 = distinct !DILexicalBlock(scope: !6037, file: !3, line: 1295, column: 11)
!6058 = !DILocation(line: 1296, column: 4, scope: !6057)
!6059 = !DILocation(line: 1296, column: 7, scope: !6057)
!6060 = !DILocation(line: 1295, column: 11, scope: !6037)
!6061 = !DILocation(line: 1297, column: 2, scope: !6057)
!6062 = !DILocation(line: 1301, column: 32, scope: !6063)
!6063 = distinct !DILexicalBlock(scope: !6037, file: !3, line: 1301, column: 11)
!6064 = !DILocation(line: 1301, column: 11, scope: !6063)
!6065 = !DILocation(line: 1301, column: 68, scope: !6063)
!6066 = !DILocation(line: 1301, column: 47, scope: !6063)
!6067 = !DILocation(line: 1301, column: 44, scope: !6063)
!6068 = !DILocation(line: 1301, column: 11, scope: !6037)
!6069 = !DILocation(line: 1302, column: 2, scope: !6063)
!6070 = !DILocation(line: 1314, column: 34, scope: !6037)
!6071 = !DILocation(line: 1315, column: 6, scope: !6037)
!6072 = !DILocation(line: 1314, column: 14, scope: !6037)
!6073 = !DILocation(line: 1314, column: 7, scope: !6037)
!6074 = !DILocation(line: 1319, column: 12, scope: !6075)
!6075 = distinct !DILexicalBlock(scope: !6031, file: !3, line: 1319, column: 12)
!6076 = !DILocation(line: 1319, column: 35, scope: !6075)
!6077 = !DILocation(line: 1320, column: 5, scope: !6075)
!6078 = !DILocation(line: 1320, column: 8, scope: !6075)
!6079 = !DILocation(line: 1320, column: 31, scope: !6075)
!6080 = !DILocation(line: 1319, column: 12, scope: !6031)
!6081 = !DILocation(line: 1321, column: 39, scope: !6075)
!6082 = !DILocation(line: 1322, column: 11, scope: !6075)
!6083 = !DILocation(line: 1321, column: 12, scope: !6075)
!6084 = !DILocation(line: 1321, column: 5, scope: !6075)
!6085 = !DILocation(line: 1325, column: 12, scope: !6086)
!6086 = distinct !DILexicalBlock(scope: !6075, file: !3, line: 1325, column: 12)
!6087 = !DILocation(line: 1325, column: 35, scope: !6086)
!6088 = !DILocation(line: 1326, column: 5, scope: !6086)
!6089 = !DILocation(line: 1326, column: 8, scope: !6086)
!6090 = !DILocation(line: 1326, column: 31, scope: !6086)
!6091 = !DILocation(line: 1327, column: 5, scope: !6086)
!6092 = !DILocation(line: 1327, column: 8, scope: !6086)
!6093 = !DILocation(line: 1327, column: 39, scope: !6086)
!6094 = !DILocation(line: 1327, column: 36, scope: !6086)
!6095 = !DILocation(line: 1325, column: 12, scope: !6075)
!6096 = !DILocation(line: 1328, column: 39, scope: !6086)
!6097 = !DILocation(line: 1329, column: 11, scope: !6086)
!6098 = !DILocation(line: 1328, column: 12, scope: !6086)
!6099 = !DILocation(line: 1328, column: 5, scope: !6086)
!6100 = !DILocation(line: 1331, column: 12, scope: !6101)
!6101 = distinct !DILexicalBlock(scope: !6086, file: !3, line: 1331, column: 12)
!6102 = !DILocation(line: 1331, column: 35, scope: !6101)
!6103 = !DILocation(line: 1332, column: 5, scope: !6101)
!6104 = !DILocation(line: 1332, column: 8, scope: !6101)
!6105 = !DILocation(line: 1332, column: 31, scope: !6101)
!6106 = !DILocation(line: 1331, column: 12, scope: !6086)
!6107 = !DILocation(line: 1335, column: 11, scope: !6108)
!6108 = distinct !DILexicalBlock(scope: !6109, file: !3, line: 1335, column: 11)
!6109 = distinct !DILexicalBlock(scope: !6101, file: !3, line: 1333, column: 5)
!6110 = !DILocation(line: 1335, column: 44, scope: !6108)
!6111 = !DILocation(line: 1335, column: 41, scope: !6108)
!6112 = !DILocation(line: 1335, column: 11, scope: !6109)
!6113 = !DILocation(line: 1336, column: 2, scope: !6108)
!6114 = !DILocation(line: 1340, column: 12, scope: !6115)
!6115 = distinct !DILexicalBlock(scope: !6109, file: !3, line: 1340, column: 11)
!6116 = !DILocation(line: 1341, column: 4, scope: !6115)
!6117 = !DILocation(line: 1341, column: 7, scope: !6115)
!6118 = !DILocation(line: 1340, column: 11, scope: !6109)
!6119 = !DILocation(line: 1342, column: 2, scope: !6115)
!6120 = !DILocation(line: 1346, column: 11, scope: !6121)
!6121 = distinct !DILexicalBlock(scope: !6109, file: !3, line: 1346, column: 11)
!6122 = !DILocation(line: 1347, column: 4, scope: !6121)
!6123 = !DILocation(line: 1347, column: 7, scope: !6121)
!6124 = !DILocation(line: 1347, column: 42, scope: !6121)
!6125 = !DILocation(line: 1348, column: 4, scope: !6121)
!6126 = !DILocation(line: 1348, column: 9, scope: !6121)
!6127 = !DILocation(line: 1349, column: 8, scope: !6121)
!6128 = !DILocation(line: 1349, column: 11, scope: !6121)
!6129 = !DILocation(line: 1349, column: 46, scope: !6121)
!6130 = !DILocation(line: 1350, column: 8, scope: !6121)
!6131 = !DILocation(line: 1350, column: 32, scope: !6121)
!6132 = !DILocation(line: 1351, column: 11, scope: !6121)
!6133 = !DILocation(line: 1350, column: 12, scope: !6121)
!6134 = !DILocation(line: 1346, column: 11, scope: !6109)
!6135 = !DILocation(line: 1352, column: 2, scope: !6121)
!6136 = !DILocation(line: 1359, column: 11, scope: !6137)
!6137 = distinct !DILexicalBlock(scope: !6109, file: !3, line: 1359, column: 11)
!6138 = !DILocation(line: 1360, column: 4, scope: !6137)
!6139 = !DILocation(line: 1360, column: 7, scope: !6137)
!6140 = !DILocation(line: 1361, column: 4, scope: !6137)
!6141 = !DILocation(line: 1361, column: 7, scope: !6137)
!6142 = !DILocation(line: 1361, column: 35, scope: !6137)
!6143 = !DILocation(line: 1361, column: 32, scope: !6137)
!6144 = !DILocation(line: 1359, column: 11, scope: !6109)
!6145 = !DILocalVariable(name: "inner_min", scope: !6146, file: !3, line: 1363, type: !1565)
!6146 = distinct !DILexicalBlock(scope: !6137, file: !3, line: 1362, column: 2)
!6147 = !DILocation(line: 1363, column: 9, scope: !6146)
!6148 = !DILocation(line: 1363, column: 21, scope: !6146)
!6149 = !DILocalVariable(name: "outer_min", scope: !6146, file: !3, line: 1364, type: !1565)
!6150 = !DILocation(line: 1364, column: 9, scope: !6146)
!6151 = !DILocation(line: 1364, column: 21, scope: !6146)
!6152 = !DILocalVariable(name: "inner_max", scope: !6146, file: !3, line: 1365, type: !1565)
!6153 = !DILocation(line: 1365, column: 9, scope: !6146)
!6154 = !DILocation(line: 1365, column: 21, scope: !6146)
!6155 = !DILocalVariable(name: "outer_max", scope: !6146, file: !3, line: 1366, type: !1565)
!6156 = !DILocation(line: 1366, column: 9, scope: !6146)
!6157 = !DILocation(line: 1366, column: 21, scope: !6146)
!6158 = !DILocation(line: 1371, column: 8, scope: !6159)
!6159 = distinct !DILexicalBlock(scope: !6146, file: !3, line: 1371, column: 8)
!6160 = !DILocation(line: 1371, column: 18, scope: !6159)
!6161 = !DILocation(line: 1371, column: 21, scope: !6159)
!6162 = !DILocation(line: 1371, column: 43, scope: !6159)
!6163 = !DILocation(line: 1371, column: 8, scope: !6146)
!6164 = !DILocation(line: 1372, column: 16, scope: !6159)
!6165 = !DILocation(line: 1372, column: 6, scope: !6159)
!6166 = !DILocation(line: 1373, column: 8, scope: !6167)
!6167 = distinct !DILexicalBlock(scope: !6146, file: !3, line: 1373, column: 8)
!6168 = !DILocation(line: 1373, column: 18, scope: !6167)
!6169 = !DILocation(line: 1373, column: 21, scope: !6167)
!6170 = !DILocation(line: 1373, column: 43, scope: !6167)
!6171 = !DILocation(line: 1373, column: 8, scope: !6146)
!6172 = !DILocation(line: 1374, column: 16, scope: !6167)
!6173 = !DILocation(line: 1374, column: 6, scope: !6167)
!6174 = !DILocation(line: 1375, column: 8, scope: !6175)
!6175 = distinct !DILexicalBlock(scope: !6146, file: !3, line: 1375, column: 8)
!6176 = !DILocation(line: 1375, column: 18, scope: !6175)
!6177 = !DILocation(line: 1375, column: 21, scope: !6175)
!6178 = !DILocation(line: 1375, column: 43, scope: !6175)
!6179 = !DILocation(line: 1375, column: 8, scope: !6146)
!6180 = !DILocation(line: 1376, column: 16, scope: !6175)
!6181 = !DILocation(line: 1376, column: 6, scope: !6175)
!6182 = !DILocation(line: 1377, column: 8, scope: !6183)
!6183 = distinct !DILexicalBlock(scope: !6146, file: !3, line: 1377, column: 8)
!6184 = !DILocation(line: 1377, column: 18, scope: !6183)
!6185 = !DILocation(line: 1377, column: 21, scope: !6183)
!6186 = !DILocation(line: 1377, column: 43, scope: !6183)
!6187 = !DILocation(line: 1377, column: 8, scope: !6146)
!6188 = !DILocation(line: 1378, column: 16, scope: !6183)
!6189 = !DILocation(line: 1378, column: 6, scope: !6183)
!6190 = !DILocation(line: 1382, column: 8, scope: !6191)
!6191 = distinct !DILexicalBlock(scope: !6146, file: !3, line: 1382, column: 8)
!6192 = !DILocation(line: 1383, column: 8, scope: !6191)
!6193 = !DILocation(line: 1383, column: 13, scope: !6191)
!6194 = !DILocation(line: 1384, column: 5, scope: !6191)
!6195 = !DILocation(line: 1384, column: 29, scope: !6191)
!6196 = !DILocation(line: 1384, column: 40, scope: !6191)
!6197 = !DILocation(line: 1384, column: 9, scope: !6191)
!6198 = !DILocation(line: 1382, column: 8, scope: !6146)
!6199 = !DILocation(line: 1385, column: 6, scope: !6191)
!6200 = !DILocation(line: 1386, column: 8, scope: !6201)
!6201 = distinct !DILexicalBlock(scope: !6146, file: !3, line: 1386, column: 8)
!6202 = !DILocation(line: 1387, column: 8, scope: !6201)
!6203 = !DILocation(line: 1387, column: 13, scope: !6201)
!6204 = !DILocation(line: 1388, column: 5, scope: !6201)
!6205 = !DILocation(line: 1388, column: 29, scope: !6201)
!6206 = !DILocation(line: 1388, column: 40, scope: !6201)
!6207 = !DILocation(line: 1388, column: 9, scope: !6201)
!6208 = !DILocation(line: 1386, column: 8, scope: !6146)
!6209 = !DILocation(line: 1389, column: 6, scope: !6201)
!6210 = !DILocation(line: 1390, column: 2, scope: !6146)
!6211 = !DILocation(line: 1393, column: 41, scope: !6109)
!6212 = !DILocation(line: 1394, column: 6, scope: !6109)
!6213 = !DILocation(line: 1393, column: 14, scope: !6109)
!6214 = !DILocation(line: 1393, column: 7, scope: !6109)
!6215 = !DILocation(line: 1397, column: 13, scope: !6216)
!6216 = distinct !DILexicalBlock(scope: !6101, file: !3, line: 1397, column: 12)
!6217 = !DILocation(line: 1397, column: 36, scope: !6216)
!6218 = !DILocation(line: 1398, column: 6, scope: !6216)
!6219 = !DILocation(line: 1398, column: 9, scope: !6216)
!6220 = !DILocation(line: 1398, column: 32, scope: !6216)
!6221 = !DILocation(line: 1399, column: 5, scope: !6216)
!6222 = !DILocation(line: 1399, column: 8, scope: !6216)
!6223 = !DILocation(line: 1399, column: 34, scope: !6216)
!6224 = !DILocation(line: 1399, column: 31, scope: !6216)
!6225 = !DILocation(line: 1397, column: 12, scope: !6101)
!6226 = !DILocalVariable(name: "outer_parm", scope: !6227, file: !3, line: 1401, type: !1565)
!6227 = distinct !DILexicalBlock(scope: !6216, file: !3, line: 1400, column: 5)
!6228 = !DILocation(line: 1401, column: 12, scope: !6227)
!6229 = !DILocalVariable(name: "inner_parm", scope: !6227, file: !3, line: 1401, type: !1565)
!6230 = !DILocation(line: 1401, column: 24, scope: !6227)
!6231 = !DILocation(line: 1404, column: 39, scope: !6232)
!6232 = distinct !DILexicalBlock(scope: !6227, file: !3, line: 1404, column: 11)
!6233 = !DILocation(line: 1405, column: 11, scope: !6232)
!6234 = !DILocation(line: 1404, column: 12, scope: !6232)
!6235 = !DILocation(line: 1404, column: 11, scope: !6227)
!6236 = !DILocation(line: 1406, column: 2, scope: !6232)
!6237 = !DILocation(line: 1409, column: 11, scope: !6238)
!6238 = distinct !DILexicalBlock(scope: !6227, file: !3, line: 1409, column: 11)
!6239 = !DILocation(line: 1409, column: 34, scope: !6238)
!6240 = !DILocation(line: 1410, column: 4, scope: !6238)
!6241 = !DILocation(line: 1410, column: 35, scope: !6238)
!6242 = !DILocation(line: 1411, column: 7, scope: !6238)
!6243 = !DILocation(line: 1410, column: 8, scope: !6238)
!6244 = !DILocation(line: 1409, column: 11, scope: !6227)
!6245 = !DILocation(line: 1412, column: 2, scope: !6238)
!6246 = !DILocation(line: 1415, column: 12, scope: !6247)
!6247 = distinct !DILexicalBlock(scope: !6227, file: !3, line: 1415, column: 11)
!6248 = !DILocation(line: 1415, column: 11, scope: !6227)
!6249 = !DILocation(line: 1416, column: 2, scope: !6247)
!6250 = !DILocation(line: 1420, column: 11, scope: !6251)
!6251 = distinct !DILexicalBlock(scope: !6227, file: !3, line: 1420, column: 11)
!6252 = !DILocation(line: 1420, column: 42, scope: !6251)
!6253 = !DILocation(line: 1420, column: 39, scope: !6251)
!6254 = !DILocation(line: 1420, column: 11, scope: !6227)
!6255 = !DILocation(line: 1421, column: 2, scope: !6251)
!6256 = !DILocation(line: 1423, column: 25, scope: !6257)
!6257 = distinct !DILexicalBlock(scope: !6227, file: !3, line: 1423, column: 7)
!6258 = !DILocation(line: 1423, column: 23, scope: !6257)
!6259 = !DILocation(line: 1424, column: 18, scope: !6257)
!6260 = !DILocation(line: 1424, column: 16, scope: !6257)
!6261 = !DILocation(line: 1423, column: 12, scope: !6257)
!6262 = !DILocation(line: 1425, column: 5, scope: !6263)
!6263 = distinct !DILexicalBlock(scope: !6257, file: !3, line: 1423, column: 7)
!6264 = !DILocation(line: 1425, column: 16, scope: !6263)
!6265 = !DILocation(line: 1425, column: 19, scope: !6263)
!6266 = !DILocation(line: 0, scope: !6263)
!6267 = !DILocation(line: 1423, column: 7, scope: !6257)
!6268 = !DILocation(line: 1429, column: 10, scope: !6269)
!6269 = distinct !DILexicalBlock(scope: !6263, file: !3, line: 1428, column: 6)
!6270 = !DILocation(line: 1430, column: 3, scope: !6269)
!6271 = !DILocation(line: 1428, column: 7, scope: !6269)
!6272 = !DILocation(line: 1428, column: 6, scope: !6263)
!6273 = !DILocation(line: 1431, column: 4, scope: !6269)
!6274 = !DILocation(line: 1430, column: 46, scope: !6269)
!6275 = !DILocation(line: 1426, column: 18, scope: !6263)
!6276 = !DILocation(line: 1426, column: 16, scope: !6263)
!6277 = !DILocation(line: 1427, column: 18, scope: !6263)
!6278 = !DILocation(line: 1427, column: 16, scope: !6263)
!6279 = !DILocation(line: 1423, column: 7, scope: !6263)
!6280 = distinct !{!6280, !6267, !6281}
!6281 = !DILocation(line: 1431, column: 11, scope: !6257)
!6282 = !DILocation(line: 1435, column: 11, scope: !6283)
!6283 = distinct !DILexicalBlock(scope: !6227, file: !3, line: 1435, column: 11)
!6284 = !DILocation(line: 1435, column: 22, scope: !6283)
!6285 = !DILocation(line: 1435, column: 25, scope: !6283)
!6286 = !DILocation(line: 1435, column: 11, scope: !6227)
!6287 = !DILocation(line: 1436, column: 2, scope: !6283)
!6288 = !DILocation(line: 1439, column: 11, scope: !6289)
!6289 = distinct !DILexicalBlock(scope: !6227, file: !3, line: 1439, column: 11)
!6290 = !DILocation(line: 1439, column: 40, scope: !6289)
!6291 = !DILocation(line: 1439, column: 43, scope: !6289)
!6292 = !DILocation(line: 1439, column: 11, scope: !6227)
!6293 = !DILocation(line: 1440, column: 17, scope: !6289)
!6294 = !DILocation(line: 1440, column: 39, scope: !6289)
!6295 = !DILocation(line: 1440, column: 51, scope: !6289)
!6296 = !DILocation(line: 1440, column: 9, scope: !6289)
!6297 = !DILocation(line: 1440, column: 63, scope: !6289)
!6298 = !DILocation(line: 1440, column: 2, scope: !6289)
!6299 = !DILocation(line: 1442, column: 7, scope: !6227)
!6300 = !DILocation(line: 1448, column: 12, scope: !6301)
!6301 = distinct !DILexicalBlock(scope: !6216, file: !3, line: 1448, column: 12)
!6302 = !DILocation(line: 1449, column: 5, scope: !6301)
!6303 = !DILocation(line: 1449, column: 8, scope: !6301)
!6304 = !DILocation(line: 1449, column: 34, scope: !6301)
!6305 = !DILocation(line: 1449, column: 31, scope: !6301)
!6306 = !DILocation(line: 1448, column: 12, scope: !6216)
!6307 = !DILocation(line: 1450, column: 5, scope: !6301)
!6308 = !DILocation(line: 1452, column: 3, scope: !5927)
!6309 = !DILocation(line: 1453, column: 1, scope: !5927)
!6310 = distinct !DISubprogram(name: "types_compatible_p", scope: !3, file: !3, line: 1459, type: !5928, scopeLine: 1460, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!6311 = !DILocalVariable(name: "type1", arg: 1, scope: !6310, file: !3, line: 1459, type: !1565)
!6312 = !DILocation(line: 1459, column: 26, scope: !6310)
!6313 = !DILocalVariable(name: "type2", arg: 2, scope: !6310, file: !3, line: 1459, type: !1565)
!6314 = !DILocation(line: 1459, column: 38, scope: !6310)
!6315 = !DILocation(line: 1461, column: 11, scope: !6310)
!6316 = !DILocation(line: 1461, column: 20, scope: !6310)
!6317 = !DILocation(line: 1461, column: 17, scope: !6310)
!6318 = !DILocation(line: 1462, column: 4, scope: !6310)
!6319 = !DILocation(line: 1462, column: 35, scope: !6310)
!6320 = !DILocation(line: 1462, column: 42, scope: !6310)
!6321 = !DILocation(line: 1462, column: 8, scope: !6310)
!6322 = !DILocation(line: 1463, column: 8, scope: !6310)
!6323 = !DILocation(line: 1463, column: 38, scope: !6310)
!6324 = !DILocation(line: 1463, column: 45, scope: !6310)
!6325 = !DILocation(line: 1463, column: 11, scope: !6310)
!6326 = !DILocation(line: 0, scope: !6310)
!6327 = !DILocation(line: 1461, column: 10, scope: !6310)
!6328 = !DILocation(line: 1461, column: 3, scope: !6310)
!6329 = distinct !DISubprogram(name: "tree_ssa_useless_type_conversion", scope: !3, file: !3, line: 1470, type: !6330, scopeLine: 1471, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!6330 = !DISubroutineType(types: !6331)
!6331 = !{!1685, !1565}
!6332 = !DILocalVariable(name: "expr", arg: 1, scope: !6329, file: !3, line: 1470, type: !1565)
!6333 = !DILocation(line: 1470, column: 40, scope: !6329)
!6334 = !DILocation(line: 1476, column: 7, scope: !6335)
!6335 = distinct !DILexicalBlock(scope: !6329, file: !3, line: 1476, column: 7)
!6336 = !DILocation(line: 1477, column: 7, scope: !6335)
!6337 = !DILocation(line: 1477, column: 10, scope: !6335)
!6338 = !DILocation(line: 1477, column: 27, scope: !6335)
!6339 = !DILocation(line: 1478, column: 7, scope: !6335)
!6340 = !DILocation(line: 1478, column: 10, scope: !6335)
!6341 = !DILocation(line: 1478, column: 27, scope: !6335)
!6342 = !DILocation(line: 1476, column: 7, scope: !6329)
!6343 = !DILocation(line: 1480, column: 8, scope: !6335)
!6344 = !DILocation(line: 1481, column: 8, scope: !6335)
!6345 = !DILocation(line: 1479, column: 12, scope: !6335)
!6346 = !DILocation(line: 1479, column: 5, scope: !6335)
!6347 = !DILocation(line: 1483, column: 3, scope: !6329)
!6348 = !DILocation(line: 1484, column: 1, scope: !6329)
!6349 = distinct !DISubprogram(name: "tree_ssa_strip_useless_type_conversions", scope: !3, file: !3, line: 1491, type: !3421, scopeLine: 1492, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!6350 = !DILocalVariable(name: "exp", arg: 1, scope: !6349, file: !3, line: 1491, type: !1565)
!6351 = !DILocation(line: 1491, column: 47, scope: !6349)
!6352 = !DILocation(line: 1493, column: 3, scope: !6349)
!6353 = !DILocation(line: 1493, column: 44, scope: !6349)
!6354 = !DILocation(line: 1493, column: 10, scope: !6349)
!6355 = !DILocation(line: 1494, column: 11, scope: !6349)
!6356 = !DILocation(line: 1494, column: 9, scope: !6349)
!6357 = distinct !{!6357, !6352, !6355}
!6358 = !DILocation(line: 1495, column: 10, scope: !6349)
!6359 = !DILocation(line: 1495, column: 3, scope: !6349)
!6360 = distinct !DISubprogram(name: "walk_use_def_chains", scope: !3, file: !3, line: 1586, type: !6361, scopeLine: 1588, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!6361 = !DISubroutineType(types: !6362)
!6362 = !{null, !1565, !6363, !1546, !1685}
!6363 = !DIDerivedType(tag: DW_TAG_typedef, name: "walk_use_def_chains_fn", file: !1548, line: 581, baseType: !6364)
!6364 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6365, size: 64)
!6365 = !DISubroutineType(types: !6366)
!6366 = !{!1685, !1565, !1895, !1546}
!6367 = !DILocalVariable(name: "var", arg: 1, scope: !6360, file: !3, line: 1586, type: !1565)
!6368 = !DILocation(line: 1586, column: 27, scope: !6360)
!6369 = !DILocalVariable(name: "fn", arg: 2, scope: !6360, file: !3, line: 1586, type: !6363)
!6370 = !DILocation(line: 1586, column: 55, scope: !6360)
!6371 = !DILocalVariable(name: "data", arg: 3, scope: !6360, file: !3, line: 1586, type: !1546)
!6372 = !DILocation(line: 1586, column: 65, scope: !6360)
!6373 = !DILocalVariable(name: "is_dfs", arg: 4, scope: !6360, file: !3, line: 1587, type: !1685)
!6374 = !DILocation(line: 1587, column: 27, scope: !6360)
!6375 = !DILocalVariable(name: "def_stmt", scope: !6360, file: !3, line: 1589, type: !1895)
!6376 = !DILocation(line: 1589, column: 10, scope: !6360)
!6377 = !DILocation(line: 1591, column: 3, scope: !6360)
!6378 = !DILocation(line: 1593, column: 14, scope: !6360)
!6379 = !DILocation(line: 1593, column: 12, scope: !6360)
!6380 = !DILocation(line: 1597, column: 20, scope: !6381)
!6381 = distinct !DILexicalBlock(scope: !6360, file: !3, line: 1597, column: 7)
!6382 = !DILocation(line: 1597, column: 7, scope: !6381)
!6383 = !DILocation(line: 1597, column: 30, scope: !6381)
!6384 = !DILocation(line: 1597, column: 7, scope: !6360)
!6385 = !DILocation(line: 1598, column: 7, scope: !6381)
!6386 = !DILocation(line: 1598, column: 12, scope: !6381)
!6387 = !DILocation(line: 1598, column: 17, scope: !6381)
!6388 = !DILocation(line: 1598, column: 27, scope: !6381)
!6389 = !DILocation(line: 1598, column: 5, scope: !6381)
!6390 = !DILocalVariable(name: "visited", scope: !6391, file: !3, line: 1601, type: !2925)
!6391 = distinct !DILexicalBlock(scope: !6381, file: !3, line: 1600, column: 5)
!6392 = !DILocation(line: 1601, column: 29, scope: !6391)
!6393 = !DILocation(line: 1601, column: 39, scope: !6391)
!6394 = !DILocation(line: 1602, column: 30, scope: !6391)
!6395 = !DILocation(line: 1602, column: 35, scope: !6391)
!6396 = !DILocation(line: 1602, column: 39, scope: !6391)
!6397 = !DILocation(line: 1602, column: 45, scope: !6391)
!6398 = !DILocation(line: 1602, column: 54, scope: !6391)
!6399 = !DILocation(line: 1602, column: 7, scope: !6391)
!6400 = !DILocation(line: 1603, column: 28, scope: !6391)
!6401 = !DILocation(line: 1603, column: 7, scope: !6391)
!6402 = !DILocation(line: 1605, column: 1, scope: !6360)
!6403 = distinct !DISubprogram(name: "walk_use_def_chains_1", scope: !3, file: !3, line: 1514, type: !6404, scopeLine: 1516, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!6404 = !DISubroutineType(types: !6405)
!6405 = !{!1685, !1565, !6363, !1546, !2925, !1685}
!6406 = !DILocalVariable(name: "var", arg: 1, scope: !6403, file: !3, line: 1514, type: !1565)
!6407 = !DILocation(line: 1514, column: 29, scope: !6403)
!6408 = !DILocalVariable(name: "fn", arg: 2, scope: !6403, file: !3, line: 1514, type: !6363)
!6409 = !DILocation(line: 1514, column: 57, scope: !6403)
!6410 = !DILocalVariable(name: "data", arg: 3, scope: !6403, file: !3, line: 1514, type: !1546)
!6411 = !DILocation(line: 1514, column: 67, scope: !6403)
!6412 = !DILocalVariable(name: "visited", arg: 4, scope: !6403, file: !3, line: 1515, type: !2925)
!6413 = !DILocation(line: 1515, column: 32, scope: !6403)
!6414 = !DILocalVariable(name: "is_dfs", arg: 5, scope: !6403, file: !3, line: 1515, type: !1685)
!6415 = !DILocation(line: 1515, column: 46, scope: !6403)
!6416 = !DILocalVariable(name: "def_stmt", scope: !6403, file: !3, line: 1517, type: !1895)
!6417 = !DILocation(line: 1517, column: 10, scope: !6403)
!6418 = !DILocation(line: 1519, column: 27, scope: !6419)
!6419 = distinct !DILexicalBlock(scope: !6403, file: !3, line: 1519, column: 7)
!6420 = !DILocation(line: 1519, column: 36, scope: !6419)
!6421 = !DILocation(line: 1519, column: 7, scope: !6419)
!6422 = !DILocation(line: 1519, column: 7, scope: !6403)
!6423 = !DILocation(line: 1520, column: 5, scope: !6419)
!6424 = !DILocation(line: 1522, column: 14, scope: !6403)
!6425 = !DILocation(line: 1522, column: 12, scope: !6403)
!6426 = !DILocation(line: 1524, column: 20, scope: !6427)
!6427 = distinct !DILexicalBlock(scope: !6403, file: !3, line: 1524, column: 7)
!6428 = !DILocation(line: 1524, column: 7, scope: !6427)
!6429 = !DILocation(line: 1524, column: 30, scope: !6427)
!6430 = !DILocation(line: 1524, column: 7, scope: !6403)
!6431 = !DILocation(line: 1527, column: 14, scope: !6432)
!6432 = distinct !DILexicalBlock(scope: !6427, file: !3, line: 1525, column: 5)
!6433 = !DILocation(line: 1527, column: 18, scope: !6432)
!6434 = !DILocation(line: 1527, column: 23, scope: !6432)
!6435 = !DILocation(line: 1527, column: 33, scope: !6432)
!6436 = !DILocation(line: 1527, column: 7, scope: !6432)
!6437 = !DILocalVariable(name: "i", scope: !6438, file: !3, line: 1531, type: !2040)
!6438 = distinct !DILexicalBlock(scope: !6427, file: !3, line: 1530, column: 5)
!6439 = !DILocation(line: 1531, column: 14, scope: !6438)
!6440 = !DILocation(line: 1535, column: 12, scope: !6441)
!6441 = distinct !DILexicalBlock(scope: !6438, file: !3, line: 1535, column: 11)
!6442 = !DILocation(line: 1535, column: 11, scope: !6438)
!6443 = !DILocation(line: 1536, column: 9, scope: !6444)
!6444 = distinct !DILexicalBlock(scope: !6441, file: !3, line: 1536, column: 2)
!6445 = !DILocation(line: 1536, column: 7, scope: !6444)
!6446 = !DILocation(line: 1536, column: 14, scope: !6447)
!6447 = distinct !DILexicalBlock(scope: !6444, file: !3, line: 1536, column: 2)
!6448 = !DILocation(line: 1536, column: 39, scope: !6447)
!6449 = !DILocation(line: 1536, column: 18, scope: !6447)
!6450 = !DILocation(line: 1536, column: 16, scope: !6447)
!6451 = !DILocation(line: 1536, column: 2, scope: !6444)
!6452 = !DILocation(line: 1537, column: 8, scope: !6453)
!6453 = distinct !DILexicalBlock(scope: !6447, file: !3, line: 1537, column: 8)
!6454 = !DILocation(line: 1537, column: 32, scope: !6453)
!6455 = !DILocation(line: 1537, column: 42, scope: !6453)
!6456 = !DILocation(line: 1537, column: 12, scope: !6453)
!6457 = !DILocation(line: 1537, column: 46, scope: !6453)
!6458 = !DILocation(line: 1537, column: 56, scope: !6453)
!6459 = !DILocation(line: 1537, column: 8, scope: !6447)
!6460 = !DILocation(line: 1538, column: 6, scope: !6453)
!6461 = !DILocation(line: 1537, column: 60, scope: !6453)
!6462 = !DILocation(line: 1536, column: 51, scope: !6447)
!6463 = !DILocation(line: 1536, column: 2, scope: !6447)
!6464 = distinct !{!6464, !6451, !6465}
!6465 = !DILocation(line: 1538, column: 13, scope: !6444)
!6466 = !DILocation(line: 1541, column: 14, scope: !6467)
!6467 = distinct !DILexicalBlock(scope: !6438, file: !3, line: 1541, column: 7)
!6468 = !DILocation(line: 1541, column: 12, scope: !6467)
!6469 = !DILocation(line: 1541, column: 19, scope: !6470)
!6470 = distinct !DILexicalBlock(scope: !6467, file: !3, line: 1541, column: 7)
!6471 = !DILocation(line: 1541, column: 44, scope: !6470)
!6472 = !DILocation(line: 1541, column: 23, scope: !6470)
!6473 = !DILocation(line: 1541, column: 21, scope: !6470)
!6474 = !DILocation(line: 1541, column: 7, scope: !6467)
!6475 = !DILocalVariable(name: "arg", scope: !6476, file: !3, line: 1543, type: !1565)
!6476 = distinct !DILexicalBlock(scope: !6470, file: !3, line: 1542, column: 2)
!6477 = !DILocation(line: 1543, column: 9, scope: !6476)
!6478 = !DILocation(line: 1543, column: 35, scope: !6476)
!6479 = !DILocation(line: 1543, column: 45, scope: !6476)
!6480 = !DILocation(line: 1543, column: 15, scope: !6476)
!6481 = !DILocation(line: 1546, column: 8, scope: !6482)
!6482 = distinct !DILexicalBlock(scope: !6476, file: !3, line: 1546, column: 8)
!6483 = !DILocation(line: 1547, column: 8, scope: !6482)
!6484 = !DILocation(line: 1547, column: 11, scope: !6482)
!6485 = !DILocation(line: 1547, column: 27, scope: !6482)
!6486 = !DILocation(line: 1548, column: 8, scope: !6482)
!6487 = !DILocation(line: 1548, column: 34, scope: !6482)
!6488 = !DILocation(line: 1548, column: 39, scope: !6482)
!6489 = !DILocation(line: 1548, column: 43, scope: !6482)
!6490 = !DILocation(line: 1548, column: 49, scope: !6482)
!6491 = !DILocation(line: 1548, column: 58, scope: !6482)
!6492 = !DILocation(line: 1548, column: 11, scope: !6482)
!6493 = !DILocation(line: 1546, column: 8, scope: !6476)
!6494 = !DILocation(line: 1549, column: 6, scope: !6482)
!6495 = !DILocation(line: 1550, column: 2, scope: !6476)
!6496 = !DILocation(line: 1541, column: 56, scope: !6470)
!6497 = !DILocation(line: 1541, column: 7, scope: !6470)
!6498 = distinct !{!6498, !6474, !6499}
!6499 = !DILocation(line: 1550, column: 2, scope: !6467)
!6500 = !DILocation(line: 1554, column: 11, scope: !6501)
!6501 = distinct !DILexicalBlock(scope: !6438, file: !3, line: 1554, column: 11)
!6502 = !DILocation(line: 1554, column: 11, scope: !6438)
!6503 = !DILocation(line: 1555, column: 9, scope: !6504)
!6504 = distinct !DILexicalBlock(scope: !6501, file: !3, line: 1555, column: 2)
!6505 = !DILocation(line: 1555, column: 7, scope: !6504)
!6506 = !DILocation(line: 1555, column: 14, scope: !6507)
!6507 = distinct !DILexicalBlock(scope: !6504, file: !3, line: 1555, column: 2)
!6508 = !DILocation(line: 1555, column: 39, scope: !6507)
!6509 = !DILocation(line: 1555, column: 18, scope: !6507)
!6510 = !DILocation(line: 1555, column: 16, scope: !6507)
!6511 = !DILocation(line: 1555, column: 2, scope: !6504)
!6512 = !DILocation(line: 1556, column: 8, scope: !6513)
!6513 = distinct !DILexicalBlock(scope: !6507, file: !3, line: 1556, column: 8)
!6514 = !DILocation(line: 1556, column: 32, scope: !6513)
!6515 = !DILocation(line: 1556, column: 42, scope: !6513)
!6516 = !DILocation(line: 1556, column: 12, scope: !6513)
!6517 = !DILocation(line: 1556, column: 46, scope: !6513)
!6518 = !DILocation(line: 1556, column: 56, scope: !6513)
!6519 = !DILocation(line: 1556, column: 8, scope: !6507)
!6520 = !DILocation(line: 1557, column: 6, scope: !6513)
!6521 = !DILocation(line: 1556, column: 60, scope: !6513)
!6522 = !DILocation(line: 1555, column: 51, scope: !6507)
!6523 = !DILocation(line: 1555, column: 2, scope: !6507)
!6524 = distinct !{!6524, !6511, !6525}
!6525 = !DILocation(line: 1557, column: 13, scope: !6504)
!6526 = !DILocation(line: 1560, column: 3, scope: !6403)
!6527 = !DILocation(line: 1561, column: 1, scope: !6403)
!6528 = distinct !DISubprogram(name: "ssa_undefined_value_p", scope: !3, file: !3, line: 1611, type: !6330, scopeLine: 1612, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!6529 = !DILocalVariable(name: "t", arg: 1, scope: !6528, file: !3, line: 1611, type: !1565)
!6530 = !DILocation(line: 1611, column: 29, scope: !6528)
!6531 = !DILocalVariable(name: "var", scope: !6528, file: !3, line: 1613, type: !1565)
!6532 = !DILocation(line: 1613, column: 8, scope: !6528)
!6533 = !DILocation(line: 1613, column: 14, scope: !6528)
!6534 = !DILocation(line: 1616, column: 7, scope: !6535)
!6535 = distinct !DILexicalBlock(scope: !6528, file: !3, line: 1616, column: 7)
!6536 = !DILocation(line: 1616, column: 23, scope: !6535)
!6537 = !DILocation(line: 1616, column: 7, scope: !6528)
!6538 = !DILocation(line: 1617, column: 5, scope: !6535)
!6539 = !DILocation(line: 1620, column: 7, scope: !6540)
!6540 = distinct !DILexicalBlock(scope: !6528, file: !3, line: 1620, column: 7)
!6541 = !DILocation(line: 1620, column: 23, scope: !6540)
!6542 = !DILocation(line: 1620, column: 35, scope: !6540)
!6543 = !DILocation(line: 1620, column: 38, scope: !6540)
!6544 = !DILocation(line: 1620, column: 7, scope: !6528)
!6545 = !DILocation(line: 1621, column: 5, scope: !6540)
!6546 = !DILocation(line: 1624, column: 24, scope: !6528)
!6547 = !DILocation(line: 1624, column: 10, scope: !6528)
!6548 = !DILocation(line: 1624, column: 3, scope: !6528)
!6549 = !DILocation(line: 1625, column: 1, scope: !6528)
!6550 = distinct !DISubprogram(name: "gate_warn_uninitialized", scope: !3, file: !3, line: 1862, type: !2950, scopeLine: 1863, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!6551 = !DILocation(line: 1864, column: 10, scope: !6550)
!6552 = !DILocation(line: 1864, column: 29, scope: !6550)
!6553 = !DILocation(line: 1864, column: 3, scope: !6550)
!6554 = distinct !DISubprogram(name: "execute_early_warn_uninitialized", scope: !3, file: !3, line: 1831, type: !2954, scopeLine: 1832, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!6555 = !DILocation(line: 1839, column: 61, scope: !6554)
!6556 = !DILocation(line: 1839, column: 60, scope: !6554)
!6557 = !DILocation(line: 1839, column: 3, scope: !6554)
!6558 = !DILocation(line: 1840, column: 3, scope: !6554)
!6559 = distinct !DISubprogram(name: "execute_late_warn_uninitialized", scope: !3, file: !3, line: 1844, type: !2954, scopeLine: 1845, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!6560 = !DILocalVariable(name: "bb", scope: !6559, file: !3, line: 1846, type: !2327)
!6561 = !DILocation(line: 1846, column: 15, scope: !6559)
!6562 = !DILocalVariable(name: "gsi", scope: !6559, file: !3, line: 1847, type: !2917)
!6563 = !DILocation(line: 1847, column: 24, scope: !6559)
!6564 = !DILocation(line: 1852, column: 3, scope: !6559)
!6565 = !DILocation(line: 1854, column: 3, scope: !6566)
!6566 = distinct !DILexicalBlock(scope: !6559, file: !3, line: 1854, column: 3)
!6567 = !DILocation(line: 1854, column: 3, scope: !6568)
!6568 = distinct !DILexicalBlock(scope: !6566, file: !3, line: 1854, column: 3)
!6569 = !DILocation(line: 1855, column: 32, scope: !6570)
!6570 = distinct !DILexicalBlock(scope: !6568, file: !3, line: 1855, column: 5)
!6571 = !DILocation(line: 1855, column: 16, scope: !6570)
!6572 = !DILocation(line: 1855, column: 10, scope: !6570)
!6573 = !DILocation(line: 1855, column: 38, scope: !6574)
!6574 = distinct !DILexicalBlock(scope: !6570, file: !3, line: 1855, column: 5)
!6575 = !DILocation(line: 1855, column: 37, scope: !6574)
!6576 = !DILocation(line: 1855, column: 5, scope: !6570)
!6577 = !DILocation(line: 1856, column: 31, scope: !6574)
!6578 = !DILocation(line: 1856, column: 7, scope: !6574)
!6579 = !DILocation(line: 1855, column: 55, scope: !6574)
!6580 = !DILocation(line: 1855, column: 5, scope: !6574)
!6581 = distinct !{!6581, !6576, !6582}
!6582 = !DILocation(line: 1856, column: 45, scope: !6570)
!6583 = distinct !{!6583, !6565, !6584}
!6584 = !DILocation(line: 1856, column: 45, scope: !6566)
!6585 = !DILocation(line: 1858, column: 3, scope: !6559)
!6586 = distinct !DISubprogram(name: "execute_update_addresses_taken", scope: !3, file: !3, line: 1908, type: !4491, scopeLine: 1909, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!6587 = !DILocalVariable(name: "do_optimize", arg: 1, scope: !6586, file: !3, line: 1908, type: !1685)
!6588 = !DILocation(line: 1908, column: 38, scope: !6586)
!6589 = !DILocalVariable(name: "var", scope: !6586, file: !3, line: 1910, type: !1565)
!6590 = !DILocation(line: 1910, column: 8, scope: !6586)
!6591 = !DILocalVariable(name: "rvi", scope: !6586, file: !3, line: 1911, type: !5763)
!6592 = !DILocation(line: 1911, column: 27, scope: !6586)
!6593 = !DILocalVariable(name: "gsi", scope: !6586, file: !3, line: 1912, type: !2917)
!6594 = !DILocation(line: 1912, column: 24, scope: !6586)
!6595 = !DILocalVariable(name: "bb", scope: !6586, file: !3, line: 1913, type: !2327)
!6596 = !DILocation(line: 1913, column: 15, scope: !6586)
!6597 = !DILocalVariable(name: "addresses_taken", scope: !6586, file: !3, line: 1914, type: !2443)
!6598 = !DILocation(line: 1914, column: 10, scope: !6586)
!6599 = !DILocation(line: 1914, column: 28, scope: !6586)
!6600 = !DILocalVariable(name: "not_reg_needs", scope: !6586, file: !3, line: 1915, type: !2443)
!6601 = !DILocation(line: 1915, column: 10, scope: !6586)
!6602 = !DILocation(line: 1915, column: 26, scope: !6586)
!6603 = !DILocalVariable(name: "update_vops", scope: !6586, file: !3, line: 1916, type: !1685)
!6604 = !DILocation(line: 1916, column: 8, scope: !6586)
!6605 = !DILocation(line: 1920, column: 3, scope: !6606)
!6606 = distinct !DILexicalBlock(scope: !6586, file: !3, line: 1920, column: 3)
!6607 = !DILocation(line: 1920, column: 3, scope: !6608)
!6608 = distinct !DILexicalBlock(scope: !6606, file: !3, line: 1920, column: 3)
!6609 = !DILocation(line: 1922, column: 32, scope: !6610)
!6610 = distinct !DILexicalBlock(scope: !6611, file: !3, line: 1922, column: 7)
!6611 = distinct !DILexicalBlock(scope: !6608, file: !3, line: 1921, column: 5)
!6612 = !DILocation(line: 1922, column: 18, scope: !6610)
!6613 = !DILocation(line: 1922, column: 12, scope: !6610)
!6614 = !DILocation(line: 1922, column: 38, scope: !6615)
!6615 = distinct !DILexicalBlock(scope: !6610, file: !3, line: 1922, column: 7)
!6616 = !DILocation(line: 1922, column: 37, scope: !6615)
!6617 = !DILocation(line: 1922, column: 7, scope: !6610)
!6618 = !DILocalVariable(name: "stmt", scope: !6619, file: !3, line: 1924, type: !1895)
!6619 = distinct !DILexicalBlock(scope: !6615, file: !3, line: 1923, column: 2)
!6620 = !DILocation(line: 1924, column: 11, scope: !6619)
!6621 = !DILocation(line: 1924, column: 18, scope: !6619)
!6622 = !DILocalVariable(name: "code", scope: !6619, file: !3, line: 1925, type: !377)
!6623 = !DILocation(line: 1925, column: 21, scope: !6619)
!6624 = !DILocation(line: 1925, column: 41, scope: !6619)
!6625 = !DILocation(line: 1925, column: 28, scope: !6619)
!6626 = !DILocation(line: 1928, column: 32, scope: !6619)
!6627 = !DILocation(line: 1928, column: 49, scope: !6619)
!6628 = !DILocation(line: 1928, column: 4, scope: !6619)
!6629 = !DILocation(line: 1932, column: 8, scope: !6630)
!6630 = distinct !DILexicalBlock(scope: !6619, file: !3, line: 1932, column: 8)
!6631 = !DILocation(line: 1932, column: 13, scope: !6630)
!6632 = !DILocation(line: 1932, column: 30, scope: !6630)
!6633 = !DILocation(line: 1932, column: 33, scope: !6630)
!6634 = !DILocation(line: 1932, column: 38, scope: !6630)
!6635 = !DILocation(line: 1932, column: 8, scope: !6619)
!6636 = !DILocalVariable(name: "lhs", scope: !6637, file: !3, line: 1934, type: !1565)
!6637 = distinct !DILexicalBlock(scope: !6630, file: !3, line: 1933, column: 6)
!6638 = !DILocation(line: 1934, column: 20, scope: !6637)
!6639 = !DILocation(line: 1934, column: 42, scope: !6637)
!6640 = !DILocation(line: 1934, column: 26, scope: !6637)
!6641 = !DILocation(line: 1937, column: 19, scope: !6642)
!6642 = distinct !DILexicalBlock(scope: !6637, file: !3, line: 1937, column: 19)
!6643 = !DILocation(line: 1937, column: 23, scope: !6642)
!6644 = !DILocation(line: 1937, column: 26, scope: !6642)
!6645 = !DILocation(line: 1937, column: 42, scope: !6642)
!6646 = !DILocation(line: 1938, column: 19, scope: !6642)
!6647 = !DILocation(line: 1938, column: 22, scope: !6642)
!6648 = !DILocation(line: 1937, column: 19, scope: !6637)
!6649 = !DILocation(line: 1939, column: 33, scope: !6642)
!6650 = !DILocation(line: 1939, column: 48, scope: !6642)
!6651 = !DILocation(line: 1939, column: 17, scope: !6642)
!6652 = !DILocation(line: 1942, column: 24, scope: !6653)
!6653 = distinct !DILexicalBlock(scope: !6642, file: !3, line: 1942, column: 24)
!6654 = !DILocation(line: 1942, column: 28, scope: !6653)
!6655 = !DILocation(line: 1942, column: 52, scope: !6653)
!6656 = !DILocation(line: 1942, column: 31, scope: !6653)
!6657 = !DILocation(line: 1942, column: 24, scope: !6642)
!6658 = !DILocation(line: 1944, column: 43, scope: !6659)
!6659 = distinct !DILexicalBlock(scope: !6653, file: !3, line: 1943, column: 17)
!6660 = !DILocation(line: 1944, column: 25, scope: !6659)
!6661 = !DILocation(line: 1944, column: 23, scope: !6659)
!6662 = !DILocation(line: 1945, column: 23, scope: !6663)
!6663 = distinct !DILexicalBlock(scope: !6659, file: !3, line: 1945, column: 23)
!6664 = !DILocation(line: 1945, column: 23, scope: !6659)
!6665 = !DILocation(line: 1946, column: 37, scope: !6663)
!6666 = !DILocation(line: 1946, column: 52, scope: !6663)
!6667 = !DILocation(line: 1946, column: 21, scope: !6663)
!6668 = !DILocation(line: 1947, column: 17, scope: !6659)
!6669 = !DILocation(line: 1948, column: 6, scope: !6637)
!6670 = !DILocation(line: 1949, column: 2, scope: !6619)
!6671 = !DILocation(line: 1922, column: 55, scope: !6615)
!6672 = !DILocation(line: 1922, column: 7, scope: !6615)
!6673 = distinct !{!6673, !6617, !6674}
!6674 = !DILocation(line: 1949, column: 2, scope: !6610)
!6675 = !DILocation(line: 1951, column: 34, scope: !6676)
!6676 = distinct !DILexicalBlock(scope: !6611, file: !3, line: 1951, column: 7)
!6677 = !DILocation(line: 1951, column: 18, scope: !6676)
!6678 = !DILocation(line: 1951, column: 12, scope: !6676)
!6679 = !DILocation(line: 1951, column: 40, scope: !6680)
!6680 = distinct !DILexicalBlock(scope: !6676, file: !3, line: 1951, column: 7)
!6681 = !DILocation(line: 1951, column: 39, scope: !6680)
!6682 = !DILocation(line: 1951, column: 7, scope: !6676)
!6683 = !DILocalVariable(name: "i", scope: !6684, file: !3, line: 1953, type: !2040)
!6684 = distinct !DILexicalBlock(scope: !6680, file: !3, line: 1952, column: 2)
!6685 = !DILocation(line: 1953, column: 11, scope: !6684)
!6686 = !DILocalVariable(name: "phi", scope: !6684, file: !3, line: 1954, type: !1895)
!6687 = !DILocation(line: 1954, column: 11, scope: !6684)
!6688 = !DILocation(line: 1954, column: 17, scope: !6684)
!6689 = !DILocation(line: 1956, column: 11, scope: !6690)
!6690 = distinct !DILexicalBlock(scope: !6684, file: !3, line: 1956, column: 4)
!6691 = !DILocation(line: 1956, column: 9, scope: !6690)
!6692 = !DILocation(line: 1956, column: 16, scope: !6693)
!6693 = distinct !DILexicalBlock(scope: !6690, file: !3, line: 1956, column: 4)
!6694 = !DILocation(line: 1956, column: 41, scope: !6693)
!6695 = !DILocation(line: 1956, column: 20, scope: !6693)
!6696 = !DILocation(line: 1956, column: 18, scope: !6693)
!6697 = !DILocation(line: 1956, column: 4, scope: !6690)
!6698 = !DILocalVariable(name: "op", scope: !6699, file: !3, line: 1958, type: !1565)
!6699 = distinct !DILexicalBlock(scope: !6693, file: !3, line: 1957, column: 6)
!6700 = !DILocation(line: 1958, column: 13, scope: !6699)
!6701 = !DILocation(line: 1958, column: 18, scope: !6699)
!6702 = !DILocalVariable(name: "var", scope: !6699, file: !3, line: 1958, type: !1565)
!6703 = !DILocation(line: 1958, column: 40, scope: !6699)
!6704 = !DILocation(line: 1959, column: 12, scope: !6705)
!6705 = distinct !DILexicalBlock(scope: !6699, file: !3, line: 1959, column: 12)
!6706 = !DILocation(line: 1959, column: 27, scope: !6705)
!6707 = !DILocation(line: 1960, column: 5, scope: !6705)
!6708 = !DILocation(line: 1960, column: 33, scope: !6705)
!6709 = !DILocation(line: 1960, column: 15, scope: !6705)
!6710 = !DILocation(line: 1960, column: 13, scope: !6705)
!6711 = !DILocation(line: 1960, column: 56, scope: !6705)
!6712 = !DILocation(line: 1961, column: 5, scope: !6705)
!6713 = !DILocation(line: 1961, column: 8, scope: !6705)
!6714 = !DILocation(line: 1959, column: 12, scope: !6699)
!6715 = !DILocation(line: 1962, column: 19, scope: !6705)
!6716 = !DILocation(line: 1962, column: 36, scope: !6705)
!6717 = !DILocation(line: 1962, column: 3, scope: !6705)
!6718 = !DILocation(line: 1963, column: 6, scope: !6699)
!6719 = !DILocation(line: 1956, column: 48, scope: !6693)
!6720 = !DILocation(line: 1956, column: 4, scope: !6693)
!6721 = distinct !{!6721, !6697, !6722}
!6722 = !DILocation(line: 1963, column: 6, scope: !6690)
!6723 = !DILocation(line: 1964, column: 2, scope: !6684)
!6724 = !DILocation(line: 1951, column: 57, scope: !6680)
!6725 = !DILocation(line: 1951, column: 7, scope: !6680)
!6726 = distinct !{!6726, !6682, !6727}
!6727 = !DILocation(line: 1964, column: 2, scope: !6676)
!6728 = !DILocation(line: 1965, column: 5, scope: !6611)
!6729 = distinct !{!6729, !6605, !6730}
!6730 = !DILocation(line: 1965, column: 5, scope: !6606)
!6731 = !DILocation(line: 1969, column: 7, scope: !6732)
!6732 = distinct !DILexicalBlock(scope: !6586, file: !3, line: 1969, column: 7)
!6733 = !DILocation(line: 1969, column: 16, scope: !6732)
!6734 = !DILocation(line: 1969, column: 19, scope: !6732)
!6735 = !DILocation(line: 1969, column: 7, scope: !6586)
!6736 = !DILocation(line: 1970, column: 5, scope: !6737)
!6737 = distinct !DILexicalBlock(scope: !6732, file: !3, line: 1970, column: 5)
!6738 = !DILocation(line: 1970, column: 5, scope: !6739)
!6739 = distinct !DILexicalBlock(scope: !6737, file: !3, line: 1970, column: 5)
!6740 = !DILocation(line: 1973, column: 21, scope: !6741)
!6741 = distinct !DILexicalBlock(scope: !6742, file: !3, line: 1973, column: 6)
!6742 = distinct !DILexicalBlock(scope: !6739, file: !3, line: 1971, column: 7)
!6743 = !DILocation(line: 1973, column: 6, scope: !6741)
!6744 = !DILocation(line: 1974, column: 6, scope: !6741)
!6745 = !DILocation(line: 1974, column: 9, scope: !6741)
!6746 = !DILocation(line: 1974, column: 25, scope: !6741)
!6747 = !DILocation(line: 1975, column: 6, scope: !6741)
!6748 = !DILocation(line: 1975, column: 23, scope: !6741)
!6749 = !DILocation(line: 1975, column: 40, scope: !6741)
!6750 = !DILocation(line: 1975, column: 9, scope: !6741)
!6751 = !DILocation(line: 1973, column: 6, scope: !6742)
!6752 = !DILocation(line: 1976, column: 4, scope: !6741)
!6753 = !DILocation(line: 1978, column: 6, scope: !6754)
!6754 = distinct !DILexicalBlock(scope: !6742, file: !3, line: 1978, column: 6)
!6755 = !DILocation(line: 1982, column: 6, scope: !6754)
!6756 = !DILocation(line: 1982, column: 31, scope: !6754)
!6757 = !DILocation(line: 1982, column: 11, scope: !6754)
!6758 = !DILocation(line: 1983, column: 3, scope: !6754)
!6759 = !DILocation(line: 1983, column: 21, scope: !6754)
!6760 = !DILocation(line: 1983, column: 36, scope: !6754)
!6761 = !DILocation(line: 1983, column: 7, scope: !6754)
!6762 = !DILocation(line: 1978, column: 6, scope: !6742)
!6763 = !DILocation(line: 1985, column: 6, scope: !6764)
!6764 = distinct !DILexicalBlock(scope: !6754, file: !3, line: 1984, column: 4)
!6765 = !DILocation(line: 1985, column: 29, scope: !6764)
!6766 = !DILocation(line: 1986, column: 25, scope: !6767)
!6767 = distinct !DILexicalBlock(scope: !6764, file: !3, line: 1986, column: 10)
!6768 = !DILocation(line: 1986, column: 10, scope: !6767)
!6769 = !DILocation(line: 1986, column: 10, scope: !6764)
!6770 = !DILocation(line: 1987, column: 31, scope: !6767)
!6771 = !DILocation(line: 1987, column: 8, scope: !6767)
!6772 = !DILocation(line: 1988, column: 18, scope: !6764)
!6773 = !DILocation(line: 1989, column: 10, scope: !6774)
!6774 = distinct !DILexicalBlock(scope: !6764, file: !3, line: 1989, column: 10)
!6775 = !DILocation(line: 1989, column: 10, scope: !6764)
!6776 = !DILocation(line: 1991, column: 12, scope: !6777)
!6777 = distinct !DILexicalBlock(scope: !6774, file: !3, line: 1990, column: 8)
!6778 = !DILocation(line: 1991, column: 3, scope: !6777)
!6779 = !DILocation(line: 1992, column: 23, scope: !6777)
!6780 = !DILocation(line: 1992, column: 34, scope: !6777)
!6781 = !DILocation(line: 1992, column: 3, scope: !6777)
!6782 = !DILocation(line: 1993, column: 12, scope: !6777)
!6783 = !DILocation(line: 1993, column: 3, scope: !6777)
!6784 = !DILocation(line: 1994, column: 8, scope: !6777)
!6785 = !DILocation(line: 1995, column: 4, scope: !6764)
!6786 = !DILocation(line: 1996, column: 7, scope: !6787)
!6787 = distinct !DILexicalBlock(scope: !6742, file: !3, line: 1996, column: 6)
!6788 = !DILocation(line: 1997, column: 6, scope: !6787)
!6789 = !DILocation(line: 1997, column: 24, scope: !6787)
!6790 = !DILocation(line: 1997, column: 39, scope: !6787)
!6791 = !DILocation(line: 1997, column: 10, scope: !6787)
!6792 = !DILocation(line: 1998, column: 6, scope: !6787)
!6793 = !DILocation(line: 1998, column: 10, scope: !6787)
!6794 = !DILocation(line: 1998, column: 38, scope: !6787)
!6795 = !DILocation(line: 1999, column: 3, scope: !6787)
!6796 = !DILocation(line: 1999, column: 6, scope: !6787)
!6797 = !DILocation(line: 1999, column: 34, scope: !6787)
!6798 = !DILocation(line: 2000, column: 6, scope: !6787)
!6799 = !DILocation(line: 2000, column: 10, scope: !6787)
!6800 = !DILocation(line: 2001, column: 6, scope: !6787)
!6801 = !DILocation(line: 2001, column: 10, scope: !6787)
!6802 = !DILocation(line: 2001, column: 26, scope: !6787)
!6803 = !DILocation(line: 2001, column: 38, scope: !6787)
!6804 = !DILocation(line: 2001, column: 42, scope: !6787)
!6805 = !DILocation(line: 1996, column: 6, scope: !6742)
!6806 = !DILocation(line: 2003, column: 6, scope: !6807)
!6807 = distinct !DILexicalBlock(scope: !6787, file: !3, line: 2002, column: 4)
!6808 = !DILocation(line: 2003, column: 30, scope: !6807)
!6809 = !DILocation(line: 2004, column: 29, scope: !6807)
!6810 = !DILocation(line: 2004, column: 6, scope: !6807)
!6811 = !DILocation(line: 2005, column: 18, scope: !6807)
!6812 = !DILocation(line: 2006, column: 10, scope: !6813)
!6813 = distinct !DILexicalBlock(scope: !6807, file: !3, line: 2006, column: 10)
!6814 = !DILocation(line: 2006, column: 10, scope: !6807)
!6815 = !DILocation(line: 2008, column: 12, scope: !6816)
!6816 = distinct !DILexicalBlock(scope: !6813, file: !3, line: 2007, column: 8)
!6817 = !DILocation(line: 2008, column: 3, scope: !6816)
!6818 = !DILocation(line: 2009, column: 23, scope: !6816)
!6819 = !DILocation(line: 2009, column: 34, scope: !6816)
!6820 = !DILocation(line: 2009, column: 3, scope: !6816)
!6821 = !DILocation(line: 2010, column: 12, scope: !6816)
!6822 = !DILocation(line: 2010, column: 3, scope: !6816)
!6823 = !DILocation(line: 2011, column: 8, scope: !6816)
!6824 = !DILocation(line: 2012, column: 4, scope: !6807)
!6825 = !DILocation(line: 2013, column: 7, scope: !6742)
!6826 = distinct !{!6826, !6736, !6827}
!6827 = !DILocation(line: 2013, column: 7, scope: !6737)
!6828 = !DILocation(line: 2017, column: 7, scope: !6829)
!6829 = distinct !DILexicalBlock(scope: !6586, file: !3, line: 2017, column: 7)
!6830 = !DILocation(line: 2017, column: 7, scope: !6586)
!6831 = !DILocation(line: 2019, column: 7, scope: !6832)
!6832 = distinct !DILexicalBlock(scope: !6833, file: !3, line: 2019, column: 7)
!6833 = distinct !DILexicalBlock(scope: !6829, file: !3, line: 2018, column: 5)
!6834 = !DILocation(line: 2019, column: 7, scope: !6835)
!6835 = distinct !DILexicalBlock(scope: !6832, file: !3, line: 2019, column: 7)
!6836 = !DILocation(line: 2020, column: 29, scope: !6837)
!6837 = distinct !DILexicalBlock(scope: !6835, file: !3, line: 2020, column: 4)
!6838 = !DILocation(line: 2020, column: 15, scope: !6837)
!6839 = !DILocation(line: 2020, column: 9, scope: !6837)
!6840 = !DILocation(line: 2020, column: 35, scope: !6841)
!6841 = distinct !DILexicalBlock(scope: !6837, file: !3, line: 2020, column: 4)
!6842 = !DILocation(line: 2020, column: 34, scope: !6841)
!6843 = !DILocation(line: 2020, column: 4, scope: !6837)
!6844 = !DILocalVariable(name: "stmt", scope: !6845, file: !3, line: 2022, type: !1895)
!6845 = distinct !DILexicalBlock(scope: !6841, file: !3, line: 2021, column: 6)
!6846 = !DILocation(line: 2022, column: 15, scope: !6845)
!6847 = !DILocation(line: 2022, column: 22, scope: !6845)
!6848 = !DILocation(line: 2024, column: 40, scope: !6849)
!6849 = distinct !DILexicalBlock(scope: !6845, file: !3, line: 2024, column: 12)
!6850 = !DILocation(line: 2024, column: 12, scope: !6849)
!6851 = !DILocation(line: 2025, column: 5, scope: !6849)
!6852 = !DILocation(line: 2025, column: 25, scope: !6849)
!6853 = !DILocation(line: 2025, column: 8, scope: !6849)
!6854 = !DILocation(line: 2024, column: 12, scope: !6845)
!6855 = !DILocation(line: 2026, column: 16, scope: !6849)
!6856 = !DILocation(line: 2026, column: 3, scope: !6849)
!6857 = !DILocation(line: 2027, column: 6, scope: !6845)
!6858 = !DILocation(line: 2020, column: 52, scope: !6841)
!6859 = !DILocation(line: 2020, column: 4, scope: !6841)
!6860 = distinct !{!6860, !6843, !6861}
!6861 = !DILocation(line: 2027, column: 6, scope: !6837)
!6862 = distinct !{!6862, !6831, !6863}
!6863 = !DILocation(line: 2027, column: 6, scope: !6832)
!6864 = !DILocation(line: 2030, column: 7, scope: !6833)
!6865 = !DILocation(line: 2031, column: 5, scope: !6833)
!6866 = !DILocation(line: 2033, column: 3, scope: !6586)
!6867 = !DILocation(line: 2034, column: 3, scope: !6586)
!6868 = !DILocation(line: 2035, column: 1, scope: !6586)
!6869 = distinct !DISubprogram(name: "handled_component_p", scope: !151, file: !151, line: 4551, type: !5878, scopeLine: 4552, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!6870 = !DILocalVariable(name: "t", arg: 1, scope: !6869, file: !151, line: 4551, type: !2908)
!6871 = !DILocation(line: 4551, column: 33, scope: !6869)
!6872 = !DILocation(line: 4553, column: 11, scope: !6869)
!6873 = !DILocation(line: 4553, column: 3, scope: !6869)
!6874 = !DILocation(line: 4562, column: 7, scope: !6875)
!6875 = distinct !DILexicalBlock(scope: !6869, file: !151, line: 4554, column: 5)
!6876 = !DILocation(line: 4565, column: 7, scope: !6875)
!6877 = !DILocation(line: 4567, column: 1, scope: !6869)
!6878 = distinct !DISubprogram(name: "gimple_phi_num_args", scope: !378, file: !378, line: 3061, type: !6879, scopeLine: 3062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!6879 = !DISubroutineType(types: !6880)
!6880 = !{!7, !3315}
!6881 = !DILocalVariable(name: "gs", arg: 1, scope: !6878, file: !378, line: 3061, type: !3315)
!6882 = !DILocation(line: 3061, column: 35, scope: !6878)
!6883 = !DILocation(line: 3064, column: 10, scope: !6878)
!6884 = !DILocation(line: 3064, column: 14, scope: !6878)
!6885 = !DILocation(line: 3064, column: 25, scope: !6878)
!6886 = !DILocation(line: 3064, column: 3, scope: !6878)
!6887 = distinct !DISubprogram(name: "gimple_phi_arg_imm_use_ptr", scope: !3283, file: !3283, line: 442, type: !6888, scopeLine: 443, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!6888 = !DISubroutineType(types: !6889)
!6889 = !{!2899, !1895, !1662}
!6890 = !DILocalVariable(name: "gs", arg: 1, scope: !6887, file: !3283, line: 442, type: !1895)
!6891 = !DILocation(line: 442, column: 36, scope: !6887)
!6892 = !DILocalVariable(name: "i", arg: 2, scope: !6887, file: !3283, line: 442, type: !1662)
!6893 = !DILocation(line: 442, column: 44, scope: !6887)
!6894 = !DILocation(line: 444, column: 27, scope: !6887)
!6895 = !DILocation(line: 444, column: 31, scope: !6887)
!6896 = !DILocation(line: 444, column: 11, scope: !6887)
!6897 = !DILocation(line: 444, column: 35, scope: !6887)
!6898 = !DILocation(line: 444, column: 3, scope: !6887)
!6899 = distinct !DISubprogram(name: "gimple_references_memory_p", scope: !378, file: !378, line: 1499, type: !5219, scopeLine: 1500, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!6900 = !DILocalVariable(name: "stmt", arg: 1, scope: !6899, file: !378, line: 1499, type: !1895)
!6901 = !DILocation(line: 1499, column: 36, scope: !6899)
!6902 = !DILocation(line: 1501, column: 30, scope: !6899)
!6903 = !DILocation(line: 1501, column: 10, scope: !6899)
!6904 = !DILocation(line: 1501, column: 36, scope: !6899)
!6905 = !DILocation(line: 1501, column: 52, scope: !6899)
!6906 = !DILocation(line: 1501, column: 39, scope: !6899)
!6907 = !DILocation(line: 0, scope: !6899)
!6908 = !DILocation(line: 1501, column: 3, scope: !6899)
!6909 = distinct !DISubprogram(name: "VEC_edge_var_map_heap_reserve", scope: !1548, file: !1548, line: 560, type: !6910, scopeLine: 560, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!6910 = !DISubroutineType(types: !6911)
!6911 = !{!1662, !3051, !1662}
!6912 = !DILocalVariable(name: "vec_", arg: 1, scope: !6909, file: !1548, line: 560, type: !3051)
!6913 = !DILocation(line: 560, column: 1, scope: !6909)
!6914 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6909, file: !1548, line: 560, type: !1662)
!6915 = !DILocalVariable(name: "extend", scope: !6909, file: !1548, line: 560, type: !1662)
!6916 = !DILocation(line: 560, column: 1, scope: !6917)
!6917 = distinct !DILexicalBlock(scope: !6909, file: !1548, line: 560, column: 1)
!6918 = distinct !DISubprogram(name: "VEC_edge_var_map_base_quick_push", scope: !1548, file: !1548, line: 559, type: !6919, scopeLine: 559, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!6919 = !DISubroutineType(types: !6920)
!6920 = !{!3050, !3141, !3052}
!6921 = !DILocalVariable(name: "vec_", arg: 1, scope: !6918, file: !1548, line: 559, type: !3141)
!6922 = !DILocation(line: 559, column: 1, scope: !6918)
!6923 = !DILocalVariable(name: "obj_", arg: 2, scope: !6918, file: !1548, line: 559, type: !3052)
!6924 = !DILocalVariable(name: "slot_", scope: !6918, file: !1548, line: 559, type: !3050)
!6925 = !DILocation(line: 559, column: 1, scope: !6926)
!6926 = distinct !DILexicalBlock(scope: !6918, file: !1548, line: 559, column: 1)
!6927 = distinct !DISubprogram(name: "VEC_edge_var_map_base_space", scope: !1548, file: !1548, line: 559, type: !6928, scopeLine: 559, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!6928 = !DISubroutineType(types: !6929)
!6929 = !{!1662, !3141, !1662}
!6930 = !DILocalVariable(name: "vec_", arg: 1, scope: !6927, file: !1548, line: 559, type: !3141)
!6931 = !DILocation(line: 559, column: 1, scope: !6927)
!6932 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6927, file: !1548, line: 559, type: !1662)
!6933 = distinct !DISubprogram(name: "gimple_phi_arg", scope: !378, file: !378, line: 3100, type: !6934, scopeLine: 3101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!6934 = !DISubroutineType(types: !6935)
!6935 = !{!3291, !1895, !7}
!6936 = !DILocalVariable(name: "gs", arg: 1, scope: !6933, file: !378, line: 3100, type: !1895)
!6937 = !DILocation(line: 3100, column: 24, scope: !6933)
!6938 = !DILocalVariable(name: "index", arg: 2, scope: !6933, file: !378, line: 3100, type: !7)
!6939 = !DILocation(line: 3100, column: 37, scope: !6933)
!6940 = !DILocation(line: 3103, column: 3, scope: !6933)
!6941 = !DILocation(line: 3104, column: 12, scope: !6933)
!6942 = !DILocation(line: 3104, column: 16, scope: !6933)
!6943 = !DILocation(line: 3104, column: 27, scope: !6933)
!6944 = !DILocation(line: 3104, column: 32, scope: !6933)
!6945 = !DILocation(line: 3104, column: 3, scope: !6933)
!6946 = distinct !DISubprogram(name: "gimple_op", scope: !378, file: !378, line: 1631, type: !6947, scopeLine: 1632, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!6947 = !DISubroutineType(types: !6948)
!6948 = !{!1565, !3315, !7}
!6949 = !DILocalVariable(name: "gs", arg: 1, scope: !6946, file: !378, line: 1631, type: !3315)
!6950 = !DILocation(line: 1631, column: 25, scope: !6946)
!6951 = !DILocalVariable(name: "i", arg: 2, scope: !6946, file: !378, line: 1631, type: !7)
!6952 = !DILocation(line: 1631, column: 38, scope: !6946)
!6953 = !DILocation(line: 1633, column: 23, scope: !6954)
!6954 = distinct !DILexicalBlock(scope: !6946, file: !378, line: 1633, column: 7)
!6955 = !DILocation(line: 1633, column: 7, scope: !6954)
!6956 = !DILocation(line: 1633, column: 7, scope: !6946)
!6957 = !DILocation(line: 1638, column: 26, scope: !6958)
!6958 = distinct !DILexicalBlock(scope: !6954, file: !378, line: 1634, column: 5)
!6959 = !DILocation(line: 1638, column: 14, scope: !6958)
!6960 = !DILocation(line: 1638, column: 50, scope: !6958)
!6961 = !DILocation(line: 1638, column: 7, scope: !6958)
!6962 = !DILocation(line: 1641, column: 5, scope: !6954)
!6963 = !DILocation(line: 1642, column: 1, scope: !6946)
!6964 = distinct !DISubprogram(name: "gimple_has_ops", scope: !378, file: !378, line: 1274, type: !3717, scopeLine: 1275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!6965 = !DILocalVariable(name: "g", arg: 1, scope: !6964, file: !378, line: 1274, type: !3315)
!6966 = !DILocation(line: 1274, column: 30, scope: !6964)
!6967 = !DILocation(line: 1276, column: 23, scope: !6964)
!6968 = !DILocation(line: 1276, column: 10, scope: !6964)
!6969 = !DILocation(line: 1276, column: 26, scope: !6964)
!6970 = !DILocation(line: 1276, column: 41, scope: !6964)
!6971 = !DILocation(line: 1276, column: 57, scope: !6964)
!6972 = !DILocation(line: 1276, column: 44, scope: !6964)
!6973 = !DILocation(line: 1276, column: 60, scope: !6964)
!6974 = !DILocation(line: 0, scope: !6964)
!6975 = !DILocation(line: 1276, column: 3, scope: !6964)
!6976 = distinct !DISubprogram(name: "gimple_ops", scope: !378, file: !378, line: 1614, type: !6977, scopeLine: 1615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!6977 = !DISubroutineType(types: !6978)
!6978 = !{!1929, !1895}
!6979 = !DILocalVariable(name: "gs", arg: 1, scope: !6976, file: !378, line: 1614, type: !1895)
!6980 = !DILocation(line: 1614, column: 20, scope: !6976)
!6981 = !DILocalVariable(name: "off", scope: !6976, file: !378, line: 1616, type: !2040)
!6982 = !DILocation(line: 1616, column: 10, scope: !6976)
!6983 = !DILocation(line: 1621, column: 56, scope: !6976)
!6984 = !DILocation(line: 1621, column: 28, scope: !6976)
!6985 = !DILocation(line: 1621, column: 9, scope: !6976)
!6986 = !DILocation(line: 1621, column: 7, scope: !6976)
!6987 = !DILocation(line: 1622, column: 3, scope: !6976)
!6988 = !DILocation(line: 1624, column: 29, scope: !6976)
!6989 = !DILocation(line: 1624, column: 20, scope: !6976)
!6990 = !DILocation(line: 1624, column: 34, scope: !6976)
!6991 = !DILocation(line: 1624, column: 32, scope: !6976)
!6992 = !DILocation(line: 1624, column: 10, scope: !6976)
!6993 = !DILocation(line: 1624, column: 3, scope: !6976)
!6994 = distinct !DISubprogram(name: "gimple_statement_structure", scope: !378, file: !378, line: 1073, type: !6995, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!6995 = !DISubroutineType(types: !6996)
!6996 = !{!631, !1895}
!6997 = !DILocalVariable(name: "gs", arg: 1, scope: !6994, file: !378, line: 1073, type: !1895)
!6998 = !DILocation(line: 1073, column: 36, scope: !6994)
!6999 = !DILocation(line: 1075, column: 37, scope: !6994)
!7000 = !DILocation(line: 1075, column: 24, scope: !6994)
!7001 = !DILocation(line: 1075, column: 10, scope: !6994)
!7002 = !DILocation(line: 1075, column: 3, scope: !6994)
!7003 = distinct !DISubprogram(name: "gss_for_code", scope: !378, file: !378, line: 1061, type: !7004, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!7004 = !DISubroutineType(types: !7005)
!7005 = !{!631, !377}
!7006 = !DILocalVariable(name: "code", arg: 1, scope: !7003, file: !378, line: 1061, type: !377)
!7007 = !DILocation(line: 1061, column: 32, scope: !7003)
!7008 = !DILocation(line: 1066, column: 24, scope: !7003)
!7009 = !DILocation(line: 1066, column: 10, scope: !7003)
!7010 = !DILocation(line: 1066, column: 3, scope: !7003)
!7011 = distinct !DISubprogram(name: "link_use_stmts_after", scope: !3283, file: !3283, line: 1018, type: !7012, scopeLine: 1019, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!7012 = !DISubroutineType(types: !7013)
!7013 = !{null, !2899, !3678}
!7014 = !DILocalVariable(name: "head", arg: 1, scope: !7011, file: !3283, line: 1018, type: !2899)
!7015 = !DILocation(line: 1018, column: 37, scope: !7011)
!7016 = !DILocalVariable(name: "imm", arg: 2, scope: !7011, file: !3283, line: 1018, type: !3678)
!7017 = !DILocation(line: 1018, column: 61, scope: !7011)
!7018 = !DILocalVariable(name: "use_p", scope: !7011, file: !3283, line: 1020, type: !2899)
!7019 = !DILocation(line: 1020, column: 17, scope: !7011)
!7020 = !DILocalVariable(name: "last_p", scope: !7011, file: !3283, line: 1021, type: !2899)
!7021 = !DILocation(line: 1021, column: 17, scope: !7011)
!7022 = !DILocation(line: 1021, column: 26, scope: !7011)
!7023 = !DILocalVariable(name: "head_stmt", scope: !7011, file: !3283, line: 1022, type: !1895)
!7024 = !DILocation(line: 1022, column: 10, scope: !7011)
!7025 = !DILocation(line: 1022, column: 22, scope: !7011)
!7026 = !DILocalVariable(name: "use", scope: !7011, file: !3283, line: 1023, type: !1565)
!7027 = !DILocation(line: 1023, column: 8, scope: !7011)
!7028 = !DILocation(line: 1023, column: 14, scope: !7011)
!7029 = !DILocalVariable(name: "op_iter", scope: !7011, file: !3283, line: 1024, type: !4014)
!7030 = !DILocation(line: 1024, column: 15, scope: !7011)
!7031 = !DILocalVariable(name: "flag", scope: !7011, file: !3283, line: 1025, type: !1662)
!7032 = !DILocation(line: 1025, column: 7, scope: !7011)
!7033 = !DILocation(line: 1028, column: 26, scope: !7011)
!7034 = !DILocation(line: 1028, column: 11, scope: !7011)
!7035 = !DILocation(line: 1028, column: 8, scope: !7011)
!7036 = !DILocation(line: 1030, column: 20, scope: !7037)
!7037 = distinct !DILexicalBlock(scope: !7011, file: !3283, line: 1030, column: 7)
!7038 = !DILocation(line: 1030, column: 7, scope: !7037)
!7039 = !DILocation(line: 1030, column: 31, scope: !7037)
!7040 = !DILocation(line: 1030, column: 7, scope: !7011)
!7041 = !DILocation(line: 1032, column: 7, scope: !7042)
!7042 = distinct !DILexicalBlock(scope: !7043, file: !3283, line: 1032, column: 7)
!7043 = distinct !DILexicalBlock(scope: !7037, file: !3283, line: 1031, column: 5)
!7044 = !DILocation(line: 1032, column: 7, scope: !7045)
!7045 = distinct !DILexicalBlock(scope: !7042, file: !3283, line: 1032, column: 7)
!7046 = !DILocation(line: 1033, column: 6, scope: !7047)
!7047 = distinct !DILexicalBlock(scope: !7045, file: !3283, line: 1033, column: 6)
!7048 = !DILocation(line: 1033, column: 30, scope: !7047)
!7049 = !DILocation(line: 1033, column: 27, scope: !7047)
!7050 = !DILocation(line: 1033, column: 6, scope: !7045)
!7051 = !DILocation(line: 1034, column: 34, scope: !7047)
!7052 = !DILocation(line: 1034, column: 41, scope: !7047)
!7053 = !DILocation(line: 1034, column: 47, scope: !7047)
!7054 = !DILocation(line: 1034, column: 13, scope: !7047)
!7055 = !DILocation(line: 1034, column: 11, scope: !7047)
!7056 = !DILocation(line: 1034, column: 4, scope: !7047)
!7057 = distinct !{!7057, !7041, !7058}
!7058 = !DILocation(line: 1034, column: 53, scope: !7042)
!7059 = !DILocation(line: 1035, column: 5, scope: !7043)
!7060 = !DILocation(line: 1038, column: 11, scope: !7061)
!7061 = distinct !DILexicalBlock(scope: !7062, file: !3283, line: 1038, column: 11)
!7062 = distinct !DILexicalBlock(scope: !7037, file: !3283, line: 1037, column: 5)
!7063 = !DILocation(line: 1038, column: 16, scope: !7061)
!7064 = !DILocation(line: 1038, column: 11, scope: !7062)
!7065 = !DILocation(line: 1040, column: 4, scope: !7066)
!7066 = distinct !DILexicalBlock(scope: !7067, file: !3283, line: 1040, column: 4)
!7067 = distinct !DILexicalBlock(scope: !7061, file: !3283, line: 1039, column: 2)
!7068 = !DILocation(line: 1040, column: 4, scope: !7069)
!7069 = distinct !DILexicalBlock(scope: !7066, file: !3283, line: 1040, column: 4)
!7070 = !DILocation(line: 1041, column: 10, scope: !7071)
!7071 = distinct !DILexicalBlock(scope: !7069, file: !3283, line: 1041, column: 10)
!7072 = !DILocation(line: 1041, column: 34, scope: !7071)
!7073 = !DILocation(line: 1041, column: 31, scope: !7071)
!7074 = !DILocation(line: 1041, column: 10, scope: !7069)
!7075 = !DILocation(line: 1042, column: 38, scope: !7071)
!7076 = !DILocation(line: 1042, column: 45, scope: !7071)
!7077 = !DILocation(line: 1042, column: 51, scope: !7071)
!7078 = !DILocation(line: 1042, column: 17, scope: !7071)
!7079 = !DILocation(line: 1042, column: 15, scope: !7071)
!7080 = !DILocation(line: 1042, column: 8, scope: !7071)
!7081 = distinct !{!7081, !7065, !7082}
!7082 = !DILocation(line: 1042, column: 57, scope: !7066)
!7083 = !DILocation(line: 1043, column: 2, scope: !7067)
!7084 = !DILocation(line: 1044, column: 41, scope: !7085)
!7085 = distinct !DILexicalBlock(scope: !7061, file: !3283, line: 1044, column: 16)
!7086 = !DILocation(line: 1044, column: 25, scope: !7085)
!7087 = !DILocation(line: 1044, column: 23, scope: !7085)
!7088 = !DILocation(line: 1044, column: 53, scope: !7085)
!7089 = !DILocation(line: 1044, column: 16, scope: !7061)
!7090 = !DILocation(line: 1046, column: 8, scope: !7091)
!7091 = distinct !DILexicalBlock(scope: !7092, file: !3283, line: 1046, column: 8)
!7092 = distinct !DILexicalBlock(scope: !7085, file: !3283, line: 1045, column: 2)
!7093 = !DILocation(line: 1046, column: 32, scope: !7091)
!7094 = !DILocation(line: 1046, column: 29, scope: !7091)
!7095 = !DILocation(line: 1046, column: 8, scope: !7092)
!7096 = !DILocation(line: 1047, column: 36, scope: !7091)
!7097 = !DILocation(line: 1047, column: 43, scope: !7091)
!7098 = !DILocation(line: 1047, column: 49, scope: !7091)
!7099 = !DILocation(line: 1047, column: 15, scope: !7091)
!7100 = !DILocation(line: 1047, column: 13, scope: !7091)
!7101 = !DILocation(line: 1047, column: 6, scope: !7091)
!7102 = !DILocation(line: 1048, column: 2, scope: !7092)
!7103 = !DILocation(line: 1051, column: 7, scope: !7104)
!7104 = distinct !DILexicalBlock(scope: !7011, file: !3283, line: 1051, column: 7)
!7105 = !DILocation(line: 1051, column: 12, scope: !7104)
!7106 = !DILocation(line: 1051, column: 22, scope: !7104)
!7107 = !DILocation(line: 1051, column: 27, scope: !7104)
!7108 = !DILocation(line: 1051, column: 7, scope: !7011)
!7109 = !DILocation(line: 1052, column: 22, scope: !7104)
!7110 = !DILocation(line: 1052, column: 27, scope: !7104)
!7111 = !DILocation(line: 1052, column: 5, scope: !7104)
!7112 = !DILocation(line: 1053, column: 27, scope: !7011)
!7113 = !DILocation(line: 1053, column: 32, scope: !7011)
!7114 = !DILocation(line: 1053, column: 44, scope: !7011)
!7115 = !DILocation(line: 1053, column: 3, scope: !7011)
!7116 = !DILocation(line: 1054, column: 1, scope: !7011)
!7117 = distinct !DISubprogram(name: "op_iter_init_phiuse", scope: !3283, file: !3283, line: 910, type: !5431, scopeLine: 911, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!7118 = !DILocalVariable(name: "ptr", arg: 1, scope: !7117, file: !3283, line: 910, type: !4059)
!7119 = !DILocation(line: 910, column: 35, scope: !7117)
!7120 = !DILocalVariable(name: "phi", arg: 2, scope: !7117, file: !3283, line: 910, type: !1895)
!7121 = !DILocation(line: 910, column: 47, scope: !7117)
!7122 = !DILocalVariable(name: "flags", arg: 3, scope: !7117, file: !3283, line: 910, type: !1662)
!7123 = !DILocation(line: 910, column: 56, scope: !7117)
!7124 = !DILocalVariable(name: "phi_def", scope: !7117, file: !3283, line: 912, type: !1565)
!7125 = !DILocation(line: 912, column: 8, scope: !7117)
!7126 = !DILocation(line: 912, column: 37, scope: !7117)
!7127 = !DILocation(line: 912, column: 18, scope: !7117)
!7128 = !DILocalVariable(name: "comp", scope: !7117, file: !3283, line: 913, type: !1662)
!7129 = !DILocation(line: 913, column: 7, scope: !7117)
!7130 = !DILocation(line: 915, column: 28, scope: !7117)
!7131 = !DILocation(line: 915, column: 3, scope: !7117)
!7132 = !DILocation(line: 916, column: 3, scope: !7117)
!7133 = !DILocation(line: 916, column: 8, scope: !7117)
!7134 = !DILocation(line: 916, column: 13, scope: !7117)
!7135 = !DILocation(line: 918, column: 3, scope: !7117)
!7136 = !DILocation(line: 920, column: 26, scope: !7117)
!7137 = !DILocation(line: 920, column: 11, scope: !7117)
!7138 = !DILocation(line: 920, column: 8, scope: !7117)
!7139 = !DILocation(line: 923, column: 8, scope: !7140)
!7140 = distinct !DILexicalBlock(scope: !7117, file: !3283, line: 923, column: 7)
!7141 = !DILocation(line: 923, column: 16, scope: !7140)
!7142 = !DILocation(line: 923, column: 14, scope: !7140)
!7143 = !DILocation(line: 923, column: 22, scope: !7140)
!7144 = !DILocation(line: 923, column: 7, scope: !7117)
!7145 = !DILocation(line: 925, column: 7, scope: !7146)
!7146 = distinct !DILexicalBlock(scope: !7140, file: !3283, line: 924, column: 5)
!7147 = !DILocation(line: 925, column: 12, scope: !7146)
!7148 = !DILocation(line: 925, column: 17, scope: !7146)
!7149 = !DILocation(line: 926, column: 7, scope: !7146)
!7150 = !DILocation(line: 929, column: 19, scope: !7117)
!7151 = !DILocation(line: 929, column: 3, scope: !7117)
!7152 = !DILocation(line: 929, column: 8, scope: !7117)
!7153 = !DILocation(line: 929, column: 17, scope: !7117)
!7154 = !DILocation(line: 930, column: 39, scope: !7117)
!7155 = !DILocation(line: 930, column: 18, scope: !7117)
!7156 = !DILocation(line: 930, column: 3, scope: !7117)
!7157 = !DILocation(line: 930, column: 8, scope: !7117)
!7158 = !DILocation(line: 930, column: 16, scope: !7117)
!7159 = !DILocation(line: 931, column: 3, scope: !7117)
!7160 = !DILocation(line: 931, column: 8, scope: !7117)
!7161 = !DILocation(line: 931, column: 18, scope: !7117)
!7162 = !DILocation(line: 932, column: 28, scope: !7117)
!7163 = !DILocation(line: 932, column: 10, scope: !7117)
!7164 = !DILocation(line: 932, column: 3, scope: !7117)
!7165 = !DILocation(line: 933, column: 1, scope: !7117)
!7166 = distinct !DISubprogram(name: "move_use_after_head", scope: !3283, file: !3283, line: 990, type: !7167, scopeLine: 992, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!7167 = !DISubroutineType(types: !7168)
!7168 = !{!2899, !2899, !2899, !2899}
!7169 = !DILocalVariable(name: "use_p", arg: 1, scope: !7166, file: !3283, line: 990, type: !2899)
!7170 = !DILocation(line: 990, column: 36, scope: !7166)
!7171 = !DILocalVariable(name: "head", arg: 2, scope: !7166, file: !3283, line: 990, type: !2899)
!7172 = !DILocation(line: 990, column: 57, scope: !7166)
!7173 = !DILocalVariable(name: "last_p", arg: 3, scope: !7166, file: !3283, line: 991, type: !2899)
!7174 = !DILocation(line: 991, column: 23, scope: !7166)
!7175 = !DILocation(line: 997, column: 7, scope: !7176)
!7176 = distinct !DILexicalBlock(scope: !7166, file: !3283, line: 997, column: 7)
!7177 = !DILocation(line: 997, column: 16, scope: !7176)
!7178 = !DILocation(line: 997, column: 13, scope: !7176)
!7179 = !DILocation(line: 997, column: 7, scope: !7166)
!7180 = !DILocation(line: 1000, column: 11, scope: !7181)
!7181 = distinct !DILexicalBlock(scope: !7182, file: !3283, line: 1000, column: 11)
!7182 = distinct !DILexicalBlock(scope: !7176, file: !3283, line: 998, column: 5)
!7183 = !DILocation(line: 1000, column: 19, scope: !7181)
!7184 = !DILocation(line: 1000, column: 27, scope: !7181)
!7185 = !DILocation(line: 1000, column: 24, scope: !7181)
!7186 = !DILocation(line: 1000, column: 11, scope: !7182)
!7187 = !DILocation(line: 1001, column: 11, scope: !7181)
!7188 = !DILocation(line: 1001, column: 9, scope: !7181)
!7189 = !DILocation(line: 1001, column: 2, scope: !7181)
!7190 = !DILocation(line: 1005, column: 20, scope: !7191)
!7191 = distinct !DILexicalBlock(scope: !7181, file: !3283, line: 1003, column: 2)
!7192 = !DILocation(line: 1005, column: 4, scope: !7191)
!7193 = !DILocation(line: 1006, column: 26, scope: !7191)
!7194 = !DILocation(line: 1006, column: 33, scope: !7191)
!7195 = !DILocation(line: 1006, column: 4, scope: !7191)
!7196 = !DILocation(line: 1007, column: 13, scope: !7191)
!7197 = !DILocation(line: 1007, column: 11, scope: !7191)
!7198 = !DILocation(line: 1009, column: 5, scope: !7182)
!7199 = !DILocation(line: 1010, column: 10, scope: !7166)
!7200 = !DILocation(line: 1010, column: 3, scope: !7166)
!7201 = distinct !DISubprogram(name: "delink_imm_use", scope: !3283, file: !3283, line: 188, type: !7202, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!7202 = !DISubroutineType(types: !7203)
!7203 = !{null, !2900}
!7204 = !DILocalVariable(name: "linknode", arg: 1, scope: !7201, file: !3283, line: 188, type: !2900)
!7205 = !DILocation(line: 188, column: 36, scope: !7201)
!7206 = !DILocation(line: 191, column: 7, scope: !7207)
!7207 = distinct !DILexicalBlock(scope: !7201, file: !3283, line: 191, column: 7)
!7208 = !DILocation(line: 191, column: 17, scope: !7207)
!7209 = !DILocation(line: 191, column: 22, scope: !7207)
!7210 = !DILocation(line: 191, column: 7, scope: !7201)
!7211 = !DILocation(line: 192, column: 5, scope: !7207)
!7212 = !DILocation(line: 194, column: 26, scope: !7201)
!7213 = !DILocation(line: 194, column: 36, scope: !7201)
!7214 = !DILocation(line: 194, column: 3, scope: !7201)
!7215 = !DILocation(line: 194, column: 13, scope: !7201)
!7216 = !DILocation(line: 194, column: 19, scope: !7201)
!7217 = !DILocation(line: 194, column: 24, scope: !7201)
!7218 = !DILocation(line: 195, column: 26, scope: !7201)
!7219 = !DILocation(line: 195, column: 36, scope: !7201)
!7220 = !DILocation(line: 195, column: 3, scope: !7201)
!7221 = !DILocation(line: 195, column: 13, scope: !7201)
!7222 = !DILocation(line: 195, column: 19, scope: !7201)
!7223 = !DILocation(line: 195, column: 24, scope: !7201)
!7224 = !DILocation(line: 196, column: 3, scope: !7201)
!7225 = !DILocation(line: 196, column: 13, scope: !7201)
!7226 = !DILocation(line: 196, column: 18, scope: !7201)
!7227 = !DILocation(line: 197, column: 3, scope: !7201)
!7228 = !DILocation(line: 197, column: 13, scope: !7201)
!7229 = !DILocation(line: 197, column: 18, scope: !7201)
!7230 = !DILocation(line: 198, column: 1, scope: !7201)
!7231 = distinct !DISubprogram(name: "link_imm_use_to_list", scope: !3283, file: !3283, line: 202, type: !7232, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!7232 = !DISubroutineType(types: !7233)
!7233 = !{null, !2900, !2900}
!7234 = !DILocalVariable(name: "linknode", arg: 1, scope: !7231, file: !3283, line: 202, type: !2900)
!7235 = !DILocation(line: 202, column: 42, scope: !7231)
!7236 = !DILocalVariable(name: "list", arg: 2, scope: !7231, file: !3283, line: 202, type: !2900)
!7237 = !DILocation(line: 202, column: 71, scope: !7231)
!7238 = !DILocation(line: 206, column: 20, scope: !7231)
!7239 = !DILocation(line: 206, column: 3, scope: !7231)
!7240 = !DILocation(line: 206, column: 13, scope: !7231)
!7241 = !DILocation(line: 206, column: 18, scope: !7231)
!7242 = !DILocation(line: 207, column: 20, scope: !7231)
!7243 = !DILocation(line: 207, column: 26, scope: !7231)
!7244 = !DILocation(line: 207, column: 3, scope: !7231)
!7245 = !DILocation(line: 207, column: 13, scope: !7231)
!7246 = !DILocation(line: 207, column: 18, scope: !7231)
!7247 = !DILocation(line: 208, column: 22, scope: !7231)
!7248 = !DILocation(line: 208, column: 3, scope: !7231)
!7249 = !DILocation(line: 208, column: 9, scope: !7231)
!7250 = !DILocation(line: 208, column: 15, scope: !7231)
!7251 = !DILocation(line: 208, column: 20, scope: !7231)
!7252 = !DILocation(line: 209, column: 16, scope: !7231)
!7253 = !DILocation(line: 209, column: 3, scope: !7231)
!7254 = !DILocation(line: 209, column: 9, scope: !7231)
!7255 = !DILocation(line: 209, column: 14, scope: !7231)
!7256 = !DILocation(line: 210, column: 1, scope: !7231)
!7257 = distinct !DISubprogram(name: "clear_and_done_ssa_iter", scope: !3283, file: !3283, line: 729, type: !7258, scopeLine: 730, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!7258 = !DISubroutineType(types: !7259)
!7259 = !{null, !4059}
!7260 = !DILocalVariable(name: "ptr", arg: 1, scope: !7257, file: !3283, line: 729, type: !4059)
!7261 = !DILocation(line: 729, column: 39, scope: !7257)
!7262 = !DILocation(line: 731, column: 3, scope: !7257)
!7263 = !DILocation(line: 731, column: 8, scope: !7257)
!7264 = !DILocation(line: 731, column: 13, scope: !7257)
!7265 = !DILocation(line: 732, column: 3, scope: !7257)
!7266 = !DILocation(line: 732, column: 8, scope: !7257)
!7267 = !DILocation(line: 732, column: 13, scope: !7257)
!7268 = !DILocation(line: 733, column: 3, scope: !7257)
!7269 = !DILocation(line: 733, column: 8, scope: !7257)
!7270 = !DILocation(line: 733, column: 18, scope: !7257)
!7271 = !DILocation(line: 734, column: 3, scope: !7257)
!7272 = !DILocation(line: 734, column: 8, scope: !7257)
!7273 = !DILocation(line: 734, column: 14, scope: !7257)
!7274 = !DILocation(line: 735, column: 3, scope: !7257)
!7275 = !DILocation(line: 735, column: 8, scope: !7257)
!7276 = !DILocation(line: 735, column: 16, scope: !7257)
!7277 = !DILocation(line: 736, column: 3, scope: !7257)
!7278 = !DILocation(line: 736, column: 8, scope: !7257)
!7279 = !DILocation(line: 736, column: 17, scope: !7257)
!7280 = !DILocation(line: 737, column: 3, scope: !7257)
!7281 = !DILocation(line: 737, column: 8, scope: !7257)
!7282 = !DILocation(line: 737, column: 13, scope: !7257)
!7283 = !DILocation(line: 738, column: 1, scope: !7257)
!7284 = distinct !DISubprogram(name: "link_imm_use", scope: !3283, file: !3283, line: 214, type: !7285, scopeLine: 215, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!7285 = !DISubroutineType(types: !7286)
!7286 = !{null, !2900, !1565}
!7287 = !DILocalVariable(name: "linknode", arg: 1, scope: !7284, file: !3283, line: 214, type: !2900)
!7288 = !DILocation(line: 214, column: 34, scope: !7284)
!7289 = !DILocalVariable(name: "def", arg: 2, scope: !7284, file: !3283, line: 214, type: !1565)
!7290 = !DILocation(line: 214, column: 49, scope: !7284)
!7291 = !DILocalVariable(name: "root", scope: !7284, file: !3283, line: 216, type: !2900)
!7292 = !DILocation(line: 216, column: 22, scope: !7284)
!7293 = !DILocation(line: 218, column: 8, scope: !7294)
!7294 = distinct !DILexicalBlock(scope: !7284, file: !3283, line: 218, column: 7)
!7295 = !DILocation(line: 218, column: 12, scope: !7294)
!7296 = !DILocation(line: 218, column: 15, scope: !7294)
!7297 = !DILocation(line: 218, column: 31, scope: !7294)
!7298 = !DILocation(line: 218, column: 7, scope: !7284)
!7299 = !DILocation(line: 219, column: 5, scope: !7294)
!7300 = !DILocation(line: 219, column: 15, scope: !7294)
!7301 = !DILocation(line: 219, column: 20, scope: !7294)
!7302 = !DILocation(line: 222, column: 16, scope: !7303)
!7303 = distinct !DILexicalBlock(scope: !7294, file: !3283, line: 221, column: 5)
!7304 = !DILocation(line: 222, column: 12, scope: !7303)
!7305 = !DILocation(line: 227, column: 29, scope: !7303)
!7306 = !DILocation(line: 227, column: 39, scope: !7303)
!7307 = !DILocation(line: 227, column: 7, scope: !7303)
!7308 = !DILocation(line: 229, column: 1, scope: !7284)
!7309 = distinct !DISubprogram(name: "gimple_set_op", scope: !378, file: !378, line: 1663, type: !7310, scopeLine: 1664, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!7310 = !DISubroutineType(types: !7311)
!7311 = !{null, !1895, !7, !1565}
!7312 = !DILocalVariable(name: "gs", arg: 1, scope: !7309, file: !378, line: 1663, type: !1895)
!7313 = !DILocation(line: 1663, column: 23, scope: !7309)
!7314 = !DILocalVariable(name: "i", arg: 2, scope: !7309, file: !378, line: 1663, type: !7)
!7315 = !DILocation(line: 1663, column: 36, scope: !7309)
!7316 = !DILocalVariable(name: "op", arg: 3, scope: !7309, file: !378, line: 1663, type: !1565)
!7317 = !DILocation(line: 1663, column: 44, scope: !7309)
!7318 = !DILocation(line: 1665, column: 3, scope: !7309)
!7319 = !DILocation(line: 1671, column: 24, scope: !7309)
!7320 = !DILocation(line: 1671, column: 15, scope: !7309)
!7321 = !DILocation(line: 1671, column: 3, scope: !7309)
!7322 = !DILocation(line: 1671, column: 19, scope: !7309)
!7323 = !DILocation(line: 1671, column: 22, scope: !7309)
!7324 = !DILocation(line: 1672, column: 1, scope: !7309)
!7325 = distinct !DISubprogram(name: "gimple_num_ops", scope: !378, file: !378, line: 1596, type: !6879, scopeLine: 1597, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!7326 = !DILocalVariable(name: "gs", arg: 1, scope: !7325, file: !378, line: 1596, type: !3315)
!7327 = !DILocation(line: 1596, column: 30, scope: !7325)
!7328 = !DILocation(line: 1598, column: 10, scope: !7325)
!7329 = !DILocation(line: 1598, column: 14, scope: !7325)
!7330 = !DILocation(line: 1598, column: 21, scope: !7325)
!7331 = !DILocation(line: 1598, column: 3, scope: !7325)
!7332 = distinct !DISubprogram(name: "gimple_phi_result_ptr", scope: !378, file: !378, line: 3080, type: !6977, scopeLine: 3081, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!7333 = !DILocalVariable(name: "gs", arg: 1, scope: !7332, file: !378, line: 3080, type: !1895)
!7334 = !DILocation(line: 3080, column: 31, scope: !7332)
!7335 = !DILocation(line: 3083, column: 11, scope: !7332)
!7336 = !DILocation(line: 3083, column: 15, scope: !7332)
!7337 = !DILocation(line: 3083, column: 26, scope: !7332)
!7338 = !DILocation(line: 3083, column: 3, scope: !7332)
!7339 = distinct !DISubprogram(name: "op_iter_init", scope: !3283, file: !3283, line: 742, type: !7340, scopeLine: 743, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!7340 = !DISubroutineType(types: !7341)
!7341 = !{null, !4059, !1895, !1662}
!7342 = !DILocalVariable(name: "ptr", arg: 1, scope: !7339, file: !3283, line: 742, type: !4059)
!7343 = !DILocation(line: 742, column: 28, scope: !7339)
!7344 = !DILocalVariable(name: "stmt", arg: 2, scope: !7339, file: !3283, line: 742, type: !1895)
!7345 = !DILocation(line: 742, column: 40, scope: !7339)
!7346 = !DILocalVariable(name: "flags", arg: 3, scope: !7339, file: !3283, line: 742, type: !1662)
!7347 = !DILocation(line: 742, column: 50, scope: !7339)
!7348 = !DILocation(line: 746, column: 3, scope: !7339)
!7349 = !DILocation(line: 748, column: 16, scope: !7339)
!7350 = !DILocation(line: 748, column: 22, scope: !7339)
!7351 = !DILocation(line: 748, column: 15, scope: !7339)
!7352 = !DILocation(line: 748, column: 68, scope: !7339)
!7353 = !DILocation(line: 748, column: 52, scope: !7339)
!7354 = !DILocation(line: 748, column: 3, scope: !7339)
!7355 = !DILocation(line: 748, column: 8, scope: !7339)
!7356 = !DILocation(line: 748, column: 13, scope: !7339)
!7357 = !DILocation(line: 749, column: 9, scope: !7358)
!7358 = distinct !DILexicalBlock(scope: !7339, file: !3283, line: 749, column: 7)
!7359 = !DILocation(line: 749, column: 15, scope: !7358)
!7360 = !DILocation(line: 750, column: 7, scope: !7358)
!7361 = !DILocation(line: 750, column: 10, scope: !7358)
!7362 = !DILocation(line: 750, column: 15, scope: !7358)
!7363 = !DILocation(line: 751, column: 7, scope: !7358)
!7364 = !DILocation(line: 751, column: 23, scope: !7358)
!7365 = !DILocation(line: 751, column: 10, scope: !7358)
!7366 = !DILocation(line: 751, column: 29, scope: !7358)
!7367 = !DILocation(line: 749, column: 7, scope: !7339)
!7368 = !DILocation(line: 752, column: 17, scope: !7358)
!7369 = !DILocation(line: 752, column: 22, scope: !7358)
!7370 = !DILocation(line: 752, column: 28, scope: !7358)
!7371 = !DILocation(line: 752, column: 5, scope: !7358)
!7372 = !DILocation(line: 752, column: 10, scope: !7358)
!7373 = !DILocation(line: 752, column: 15, scope: !7358)
!7374 = !DILocation(line: 753, column: 16, scope: !7339)
!7375 = !DILocation(line: 753, column: 22, scope: !7339)
!7376 = !DILocation(line: 753, column: 15, scope: !7339)
!7377 = !DILocation(line: 753, column: 68, scope: !7339)
!7378 = !DILocation(line: 753, column: 52, scope: !7339)
!7379 = !DILocation(line: 753, column: 3, scope: !7339)
!7380 = !DILocation(line: 753, column: 8, scope: !7339)
!7381 = !DILocation(line: 753, column: 13, scope: !7339)
!7382 = !DILocation(line: 754, column: 9, scope: !7383)
!7383 = distinct !DILexicalBlock(scope: !7339, file: !3283, line: 754, column: 7)
!7384 = !DILocation(line: 754, column: 15, scope: !7383)
!7385 = !DILocation(line: 755, column: 7, scope: !7383)
!7386 = !DILocation(line: 755, column: 10, scope: !7383)
!7387 = !DILocation(line: 755, column: 15, scope: !7383)
!7388 = !DILocation(line: 756, column: 7, scope: !7383)
!7389 = !DILocation(line: 756, column: 23, scope: !7383)
!7390 = !DILocation(line: 756, column: 10, scope: !7383)
!7391 = !DILocation(line: 756, column: 29, scope: !7383)
!7392 = !DILocation(line: 754, column: 7, scope: !7339)
!7393 = !DILocation(line: 757, column: 17, scope: !7383)
!7394 = !DILocation(line: 757, column: 22, scope: !7383)
!7395 = !DILocation(line: 757, column: 28, scope: !7383)
!7396 = !DILocation(line: 757, column: 5, scope: !7383)
!7397 = !DILocation(line: 757, column: 10, scope: !7383)
!7398 = !DILocation(line: 757, column: 15, scope: !7383)
!7399 = !DILocation(line: 758, column: 3, scope: !7339)
!7400 = !DILocation(line: 758, column: 8, scope: !7339)
!7401 = !DILocation(line: 758, column: 13, scope: !7339)
!7402 = !DILocation(line: 760, column: 3, scope: !7339)
!7403 = !DILocation(line: 760, column: 8, scope: !7339)
!7404 = !DILocation(line: 760, column: 14, scope: !7339)
!7405 = !DILocation(line: 761, column: 3, scope: !7339)
!7406 = !DILocation(line: 761, column: 8, scope: !7339)
!7407 = !DILocation(line: 761, column: 16, scope: !7339)
!7408 = !DILocation(line: 762, column: 3, scope: !7339)
!7409 = !DILocation(line: 762, column: 8, scope: !7339)
!7410 = !DILocation(line: 762, column: 17, scope: !7339)
!7411 = !DILocation(line: 763, column: 1, scope: !7339)
!7412 = distinct !DISubprogram(name: "gimple_def_ops", scope: !378, file: !378, line: 1292, type: !7413, scopeLine: 1293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!7413 = !DISubroutineType(types: !7414)
!7414 = !{!1924, !3315}
!7415 = !DILocalVariable(name: "g", arg: 1, scope: !7412, file: !378, line: 1292, type: !3315)
!7416 = !DILocation(line: 1292, column: 30, scope: !7412)
!7417 = !DILocation(line: 1294, column: 24, scope: !7418)
!7418 = distinct !DILexicalBlock(scope: !7412, file: !378, line: 1294, column: 7)
!7419 = !DILocation(line: 1294, column: 8, scope: !7418)
!7420 = !DILocation(line: 1294, column: 7, scope: !7412)
!7421 = !DILocation(line: 1295, column: 5, scope: !7418)
!7422 = !DILocation(line: 1296, column: 10, scope: !7412)
!7423 = !DILocation(line: 1296, column: 13, scope: !7412)
!7424 = !DILocation(line: 1296, column: 19, scope: !7412)
!7425 = !DILocation(line: 1296, column: 26, scope: !7412)
!7426 = !DILocation(line: 1296, column: 3, scope: !7412)
!7427 = !DILocation(line: 1297, column: 1, scope: !7412)
!7428 = distinct !DISubprogram(name: "gimple_use_ops", scope: !378, file: !378, line: 1313, type: !7429, scopeLine: 1314, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!7429 = !DISubroutineType(types: !7430)
!7430 = !{!1931, !3315}
!7431 = !DILocalVariable(name: "g", arg: 1, scope: !7428, file: !378, line: 1313, type: !3315)
!7432 = !DILocation(line: 1313, column: 30, scope: !7428)
!7433 = !DILocation(line: 1315, column: 24, scope: !7434)
!7434 = distinct !DILexicalBlock(scope: !7428, file: !378, line: 1315, column: 7)
!7435 = !DILocation(line: 1315, column: 8, scope: !7434)
!7436 = !DILocation(line: 1315, column: 7, scope: !7428)
!7437 = !DILocation(line: 1316, column: 5, scope: !7434)
!7438 = !DILocation(line: 1317, column: 10, scope: !7428)
!7439 = !DILocation(line: 1317, column: 13, scope: !7428)
!7440 = !DILocation(line: 1317, column: 19, scope: !7428)
!7441 = !DILocation(line: 1317, column: 26, scope: !7428)
!7442 = !DILocation(line: 1317, column: 3, scope: !7428)
!7443 = !DILocation(line: 1318, column: 1, scope: !7428)
!7444 = distinct !DISubprogram(name: "ei_end_p", scope: !135, file: !135, line: 721, type: !7445, scopeLine: 722, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!7445 = !DISubroutineType(types: !7446)
!7446 = !{!1685, !4576}
!7447 = !DILocalVariable(name: "i", arg: 1, scope: !7444, file: !135, line: 721, type: !4576)
!7448 = !DILocation(line: 721, column: 25, scope: !7444)
!7449 = !DILocation(line: 723, column: 13, scope: !7444)
!7450 = !DILocation(line: 723, column: 22, scope: !7444)
!7451 = !DILocation(line: 723, column: 19, scope: !7444)
!7452 = !DILocation(line: 723, column: 10, scope: !7444)
!7453 = !DILocation(line: 723, column: 3, scope: !7444)
!7454 = distinct !DISubprogram(name: "ei_edge", scope: !135, file: !135, line: 752, type: !7455, scopeLine: 753, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!7455 = !DISubroutineType(types: !7456)
!7456 = !{!1875, !4576}
!7457 = !DILocalVariable(name: "i", arg: 1, scope: !7454, file: !135, line: 752, type: !4576)
!7458 = !DILocation(line: 752, column: 24, scope: !7454)
!7459 = !DILocation(line: 754, column: 10, scope: !7454)
!7460 = !DILocation(line: 754, column: 3, scope: !7454)
!7461 = distinct !DISubprogram(name: "VEC_edge_base_length", scope: !135, file: !135, line: 150, type: !7462, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!7462 = !DISubroutineType(types: !7463)
!7463 = !{!7, !7464}
!7464 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7465, size: 64)
!7465 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1868)
!7466 = !DILocalVariable(name: "vec_", arg: 1, scope: !7461, file: !135, line: 150, type: !7464)
!7467 = !DILocation(line: 150, column: 1, scope: !7461)
!7468 = distinct !DISubprogram(name: "ei_container", scope: !135, file: !135, line: 685, type: !7469, scopeLine: 686, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!7469 = !DISubroutineType(types: !7470)
!7470 = !{!1863, !4576}
!7471 = !DILocalVariable(name: "i", arg: 1, scope: !7468, file: !135, line: 685, type: !4576)
!7472 = !DILocation(line: 685, column: 29, scope: !7468)
!7473 = !DILocation(line: 687, column: 3, scope: !7468)
!7474 = !DILocation(line: 688, column: 13, scope: !7468)
!7475 = !DILocation(line: 688, column: 10, scope: !7468)
!7476 = !DILocation(line: 688, column: 3, scope: !7468)
!7477 = distinct !DISubprogram(name: "VEC_edge_base_index", scope: !135, file: !135, line: 150, type: !7478, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!7478 = !DISubroutineType(types: !7479)
!7479 = !{!1875, !7464, !7}
!7480 = !DILocalVariable(name: "vec_", arg: 1, scope: !7477, file: !135, line: 150, type: !7464)
!7481 = !DILocation(line: 150, column: 1, scope: !7477)
!7482 = !DILocalVariable(name: "ix_", arg: 2, scope: !7477, file: !135, line: 150, type: !7)
!7483 = !DILocation(line: 0, scope: !7477)
!7484 = distinct !DISubprogram(name: "bb_seq", scope: !378, file: !378, line: 237, type: !7485, scopeLine: 238, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!7485 = !DISubroutineType(types: !7486)
!7486 = !{!1885, !7487}
!7487 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_basic_block", file: !1566, line: 112, baseType: !7488)
!7488 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7489, size: 64)
!7489 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1860)
!7490 = !DILocalVariable(name: "bb", arg: 1, scope: !7484, file: !378, line: 237, type: !7487)
!7491 = !DILocation(line: 237, column: 27, scope: !7484)
!7492 = !DILocation(line: 239, column: 13, scope: !7484)
!7493 = !DILocation(line: 239, column: 17, scope: !7484)
!7494 = !DILocation(line: 239, column: 23, scope: !7484)
!7495 = !DILocation(line: 239, column: 33, scope: !7484)
!7496 = !DILocation(line: 239, column: 36, scope: !7484)
!7497 = !DILocation(line: 239, column: 40, scope: !7484)
!7498 = !DILocation(line: 239, column: 43, scope: !7484)
!7499 = !DILocation(line: 239, column: 10, scope: !7484)
!7500 = !DILocation(line: 239, column: 53, scope: !7484)
!7501 = !DILocation(line: 239, column: 57, scope: !7484)
!7502 = !DILocation(line: 239, column: 60, scope: !7484)
!7503 = !DILocation(line: 239, column: 68, scope: !7484)
!7504 = !DILocation(line: 239, column: 3, scope: !7484)
!7505 = distinct !DISubprogram(name: "gimple_seq_first", scope: !378, file: !378, line: 159, type: !7506, scopeLine: 160, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!7506 = !DISubroutineType(types: !7507)
!7507 = !{!1890, !7508}
!7508 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple_seq", file: !1566, line: 67, baseType: !7509)
!7509 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7510, size: 64)
!7510 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1887)
!7511 = !DILocalVariable(name: "s", arg: 1, scope: !7505, file: !378, line: 159, type: !7508)
!7512 = !DILocation(line: 159, column: 36, scope: !7505)
!7513 = !DILocation(line: 161, column: 10, scope: !7505)
!7514 = !DILocation(line: 161, column: 14, scope: !7505)
!7515 = !DILocation(line: 161, column: 17, scope: !7505)
!7516 = !DILocation(line: 161, column: 3, scope: !7505)
!7517 = distinct !DISubprogram(name: "gimple_has_mem_ops", scope: !378, file: !378, line: 1283, type: !3717, scopeLine: 1284, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!7518 = !DILocalVariable(name: "g", arg: 1, scope: !7517, file: !378, line: 1283, type: !3315)
!7519 = !DILocation(line: 1283, column: 34, scope: !7517)
!7520 = !DILocation(line: 1285, column: 23, scope: !7517)
!7521 = !DILocation(line: 1285, column: 10, scope: !7517)
!7522 = !DILocation(line: 1285, column: 26, scope: !7517)
!7523 = !DILocation(line: 1285, column: 43, scope: !7517)
!7524 = !DILocation(line: 1285, column: 59, scope: !7517)
!7525 = !DILocation(line: 1285, column: 46, scope: !7517)
!7526 = !DILocation(line: 1285, column: 62, scope: !7517)
!7527 = !DILocation(line: 0, scope: !7517)
!7528 = !DILocation(line: 1285, column: 3, scope: !7517)
!7529 = distinct !DISubprogram(name: "gimple_vop", scope: !3283, file: !3283, line: 49, type: !7530, scopeLine: 50, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!7530 = !DISubroutineType(types: !7531)
!7531 = !{!1565, !5913}
!7532 = !DILocalVariable(name: "fun", arg: 1, scope: !7529, file: !3283, line: 49, type: !5913)
!7533 = !DILocation(line: 49, column: 36, scope: !7529)
!7534 = !DILocation(line: 51, column: 3, scope: !7529)
!7535 = !DILocation(line: 52, column: 10, scope: !7529)
!7536 = !DILocation(line: 52, column: 15, scope: !7529)
!7537 = !DILocation(line: 52, column: 26, scope: !7529)
!7538 = !DILocation(line: 52, column: 3, scope: !7529)
!7539 = distinct !DISubprogram(name: "first_htab_element", scope: !3283, file: !3283, line: 58, type: !7540, scopeLine: 59, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!7540 = !DISubroutineType(types: !7541)
!7541 = !{!1546, !7542, !2359}
!7542 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5767, size: 64)
!7543 = !DILocalVariable(name: "hti", arg: 1, scope: !7539, file: !3283, line: 58, type: !7542)
!7544 = !DILocation(line: 58, column: 36, scope: !7539)
!7545 = !DILocalVariable(name: "table", arg: 2, scope: !7539, file: !3283, line: 58, type: !2359)
!7546 = !DILocation(line: 58, column: 48, scope: !7539)
!7547 = !DILocation(line: 60, column: 15, scope: !7539)
!7548 = !DILocation(line: 60, column: 3, scope: !7539)
!7549 = !DILocation(line: 60, column: 8, scope: !7539)
!7550 = !DILocation(line: 60, column: 13, scope: !7539)
!7551 = !DILocation(line: 61, column: 15, scope: !7539)
!7552 = !DILocation(line: 61, column: 22, scope: !7539)
!7553 = !DILocation(line: 61, column: 3, scope: !7539)
!7554 = !DILocation(line: 61, column: 8, scope: !7539)
!7555 = !DILocation(line: 61, column: 13, scope: !7539)
!7556 = !DILocation(line: 62, column: 16, scope: !7539)
!7557 = !DILocation(line: 62, column: 21, scope: !7539)
!7558 = !DILocation(line: 62, column: 39, scope: !7539)
!7559 = !DILocation(line: 62, column: 28, scope: !7539)
!7560 = !DILocation(line: 62, column: 26, scope: !7539)
!7561 = !DILocation(line: 62, column: 3, scope: !7539)
!7562 = !DILocation(line: 62, column: 8, scope: !7539)
!7563 = !DILocation(line: 62, column: 14, scope: !7539)
!7564 = !DILocation(line: 63, column: 3, scope: !7539)
!7565 = !DILocalVariable(name: "x", scope: !7566, file: !3283, line: 65, type: !1546)
!7566 = distinct !DILexicalBlock(scope: !7539, file: !3283, line: 64, column: 5)
!7567 = !DILocation(line: 65, column: 11, scope: !7566)
!7568 = !DILocation(line: 65, column: 17, scope: !7566)
!7569 = !DILocation(line: 65, column: 22, scope: !7566)
!7570 = !DILocation(line: 65, column: 15, scope: !7566)
!7571 = !DILocation(line: 66, column: 11, scope: !7572)
!7572 = distinct !DILexicalBlock(scope: !7566, file: !3283, line: 66, column: 11)
!7573 = !DILocation(line: 66, column: 13, scope: !7572)
!7574 = !DILocation(line: 66, column: 33, scope: !7572)
!7575 = !DILocation(line: 66, column: 36, scope: !7572)
!7576 = !DILocation(line: 66, column: 38, scope: !7572)
!7577 = !DILocation(line: 66, column: 11, scope: !7566)
!7578 = !DILocation(line: 67, column: 2, scope: !7572)
!7579 = !DILocation(line: 68, column: 5, scope: !7566)
!7580 = !DILocation(line: 68, column: 17, scope: !7539)
!7581 = !DILocation(line: 68, column: 22, scope: !7539)
!7582 = !DILocation(line: 68, column: 14, scope: !7539)
!7583 = !DILocation(line: 68, column: 30, scope: !7539)
!7584 = !DILocation(line: 68, column: 35, scope: !7539)
!7585 = !DILocation(line: 68, column: 28, scope: !7539)
!7586 = distinct !{!7586, !7564, !7587}
!7587 = !DILocation(line: 68, column: 40, scope: !7539)
!7588 = !DILocation(line: 70, column: 7, scope: !7589)
!7589 = distinct !DILexicalBlock(scope: !7539, file: !3283, line: 70, column: 7)
!7590 = !DILocation(line: 70, column: 12, scope: !7589)
!7591 = !DILocation(line: 70, column: 19, scope: !7589)
!7592 = !DILocation(line: 70, column: 24, scope: !7589)
!7593 = !DILocation(line: 70, column: 17, scope: !7589)
!7594 = !DILocation(line: 70, column: 7, scope: !7539)
!7595 = !DILocation(line: 71, column: 14, scope: !7589)
!7596 = !DILocation(line: 71, column: 19, scope: !7589)
!7597 = !DILocation(line: 71, column: 12, scope: !7589)
!7598 = !DILocation(line: 71, column: 5, scope: !7589)
!7599 = !DILocation(line: 72, column: 3, scope: !7539)
!7600 = !DILocation(line: 73, column: 1, scope: !7539)
!7601 = distinct !DISubprogram(name: "end_htab_p", scope: !3283, file: !3283, line: 79, type: !7602, scopeLine: 80, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!7602 = !DISubroutineType(types: !7603)
!7603 = !{!1685, !7604}
!7604 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7605, size: 64)
!7605 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !5767)
!7606 = !DILocalVariable(name: "hti", arg: 1, scope: !7601, file: !3283, line: 79, type: !7604)
!7607 = !DILocation(line: 79, column: 34, scope: !7601)
!7608 = !DILocation(line: 81, column: 7, scope: !7609)
!7609 = distinct !DILexicalBlock(scope: !7601, file: !3283, line: 81, column: 7)
!7610 = !DILocation(line: 81, column: 12, scope: !7609)
!7611 = !DILocation(line: 81, column: 20, scope: !7609)
!7612 = !DILocation(line: 81, column: 25, scope: !7609)
!7613 = !DILocation(line: 81, column: 17, scope: !7609)
!7614 = !DILocation(line: 81, column: 7, scope: !7601)
!7615 = !DILocation(line: 82, column: 5, scope: !7609)
!7616 = !DILocation(line: 83, column: 3, scope: !7601)
!7617 = !DILocation(line: 84, column: 1, scope: !7601)
!7618 = distinct !DISubprogram(name: "next_htab_element", scope: !3283, file: !3283, line: 90, type: !7619, scopeLine: 91, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!7619 = !DISubroutineType(types: !7620)
!7620 = !{!1546, !7542}
!7621 = !DILocalVariable(name: "hti", arg: 1, scope: !7618, file: !3283, line: 90, type: !7542)
!7622 = !DILocation(line: 90, column: 35, scope: !7618)
!7623 = !DILocation(line: 92, column: 3, scope: !7618)
!7624 = !DILocation(line: 92, column: 13, scope: !7618)
!7625 = !DILocation(line: 92, column: 18, scope: !7618)
!7626 = !DILocation(line: 92, column: 10, scope: !7618)
!7627 = !DILocation(line: 92, column: 26, scope: !7618)
!7628 = !DILocation(line: 92, column: 31, scope: !7618)
!7629 = !DILocation(line: 92, column: 24, scope: !7618)
!7630 = !DILocalVariable(name: "x", scope: !7631, file: !3283, line: 94, type: !1546)
!7631 = distinct !DILexicalBlock(scope: !7618, file: !3283, line: 93, column: 5)
!7632 = !DILocation(line: 94, column: 11, scope: !7631)
!7633 = !DILocation(line: 94, column: 17, scope: !7631)
!7634 = !DILocation(line: 94, column: 22, scope: !7631)
!7635 = !DILocation(line: 94, column: 15, scope: !7631)
!7636 = !DILocation(line: 95, column: 11, scope: !7637)
!7637 = distinct !DILexicalBlock(scope: !7631, file: !3283, line: 95, column: 11)
!7638 = !DILocation(line: 95, column: 13, scope: !7637)
!7639 = !DILocation(line: 95, column: 33, scope: !7637)
!7640 = !DILocation(line: 95, column: 36, scope: !7637)
!7641 = !DILocation(line: 95, column: 38, scope: !7637)
!7642 = !DILocation(line: 95, column: 11, scope: !7631)
!7643 = !DILocation(line: 96, column: 9, scope: !7637)
!7644 = !DILocation(line: 96, column: 2, scope: !7637)
!7645 = distinct !{!7645, !7623, !7646}
!7646 = !DILocation(line: 97, column: 5, scope: !7618)
!7647 = !DILocation(line: 98, column: 3, scope: !7618)
!7648 = !DILocation(line: 99, column: 1, scope: !7618)
!7649 = distinct !DISubprogram(name: "warn_uninitialized_vars", scope: !3, file: !3, line: 1797, type: !7650, scopeLine: 1798, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!7650 = !DISubroutineType(types: !7651)
!7651 = !{!7, !1685}
!7652 = !DILocalVariable(name: "warn_possibly_uninitialized", arg: 1, scope: !7649, file: !3, line: 1797, type: !1685)
!7653 = !DILocation(line: 1797, column: 31, scope: !7649)
!7654 = !DILocalVariable(name: "gsi", scope: !7649, file: !3, line: 1799, type: !2917)
!7655 = !DILocation(line: 1799, column: 24, scope: !7649)
!7656 = !DILocalVariable(name: "bb", scope: !7649, file: !3, line: 1800, type: !2327)
!7657 = !DILocation(line: 1800, column: 15, scope: !7649)
!7658 = !DILocalVariable(name: "data", scope: !7649, file: !3, line: 1801, type: !2933)
!7659 = !DILocation(line: 1801, column: 20, scope: !7649)
!7660 = !DILocation(line: 1803, column: 38, scope: !7649)
!7661 = !DILocation(line: 1803, column: 8, scope: !7649)
!7662 = !DILocation(line: 1803, column: 36, scope: !7649)
!7663 = !DILocation(line: 1805, column: 3, scope: !7649)
!7664 = !DILocation(line: 1807, column: 3, scope: !7665)
!7665 = distinct !DILexicalBlock(scope: !7649, file: !3, line: 1807, column: 3)
!7666 = !DILocation(line: 1807, column: 3, scope: !7667)
!7667 = distinct !DILexicalBlock(scope: !7665, file: !3, line: 1807, column: 3)
!7668 = !DILocation(line: 1810, column: 24, scope: !7669)
!7669 = distinct !DILexicalBlock(scope: !7667, file: !3, line: 1808, column: 5)
!7670 = !DILocation(line: 1810, column: 11, scope: !7669)
!7671 = !DILocation(line: 1810, column: 42, scope: !7669)
!7672 = !DILocation(line: 1809, column: 30, scope: !7669)
!7673 = !DILocation(line: 1809, column: 12, scope: !7669)
!7674 = !DILocation(line: 1809, column: 28, scope: !7669)
!7675 = !DILocation(line: 1811, column: 32, scope: !7676)
!7676 = distinct !DILexicalBlock(scope: !7669, file: !3, line: 1811, column: 7)
!7677 = !DILocation(line: 1811, column: 18, scope: !7676)
!7678 = !DILocation(line: 1811, column: 12, scope: !7676)
!7679 = !DILocation(line: 1811, column: 38, scope: !7680)
!7680 = distinct !DILexicalBlock(scope: !7676, file: !3, line: 1811, column: 7)
!7681 = !DILocation(line: 1811, column: 37, scope: !7680)
!7682 = !DILocation(line: 1811, column: 7, scope: !7676)
!7683 = !DILocalVariable(name: "wi", scope: !7684, file: !3, line: 1813, type: !2914)
!7684 = distinct !DILexicalBlock(scope: !7680, file: !3, line: 1812, column: 2)
!7685 = !DILocation(line: 1813, column: 26, scope: !7684)
!7686 = !DILocation(line: 1814, column: 16, scope: !7684)
!7687 = !DILocation(line: 1814, column: 9, scope: !7684)
!7688 = !DILocation(line: 1814, column: 14, scope: !7684)
!7689 = !DILocation(line: 1815, column: 30, scope: !7690)
!7690 = distinct !DILexicalBlock(scope: !7684, file: !3, line: 1815, column: 8)
!7691 = !DILocation(line: 1815, column: 8, scope: !7690)
!7692 = !DILocation(line: 1815, column: 8, scope: !7684)
!7693 = !DILocation(line: 1816, column: 6, scope: !7690)
!7694 = !DILocation(line: 1817, column: 4, scope: !7684)
!7695 = !DILocation(line: 1818, column: 14, scope: !7684)
!7696 = !DILocation(line: 1818, column: 7, scope: !7684)
!7697 = !DILocation(line: 1818, column: 12, scope: !7684)
!7698 = !DILocation(line: 1819, column: 20, scope: !7684)
!7699 = !DILocation(line: 1819, column: 4, scope: !7684)
!7700 = !DILocation(line: 1820, column: 2, scope: !7684)
!7701 = !DILocation(line: 1811, column: 55, scope: !7680)
!7702 = !DILocation(line: 1811, column: 7, scope: !7680)
!7703 = distinct !{!7703, !7682, !7704}
!7704 = !DILocation(line: 1820, column: 2, scope: !7676)
!7705 = !DILocation(line: 1821, column: 5, scope: !7669)
!7706 = distinct !{!7706, !7664, !7707}
!7707 = !DILocation(line: 1821, column: 5, scope: !7665)
!7708 = !DILocation(line: 1826, column: 3, scope: !7649)
!7709 = !DILocation(line: 1827, column: 3, scope: !7649)
!7710 = distinct !DISubprogram(name: "single_succ", scope: !135, file: !135, line: 663, type: !7711, scopeLine: 664, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!7711 = !DISubroutineType(types: !7712)
!7712 = !{!2327, !7487}
!7713 = !DILocalVariable(name: "bb", arg: 1, scope: !7710, file: !135, line: 663, type: !7487)
!7714 = !DILocation(line: 663, column: 32, scope: !7710)
!7715 = !DILocation(line: 665, column: 28, scope: !7710)
!7716 = !DILocation(line: 665, column: 10, scope: !7710)
!7717 = !DILocation(line: 665, column: 33, scope: !7710)
!7718 = !DILocation(line: 665, column: 3, scope: !7710)
!7719 = distinct !DISubprogram(name: "warn_uninitialized_var", scope: !3, file: !3, line: 1691, type: !3773, scopeLine: 1692, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!7720 = !DILocalVariable(name: "tp", arg: 1, scope: !7719, file: !3, line: 1691, type: !1929)
!7721 = !DILocation(line: 1691, column: 31, scope: !7719)
!7722 = !DILocalVariable(name: "walk_subtrees", arg: 2, scope: !7719, file: !3, line: 1691, type: !3775)
!7723 = !DILocation(line: 1691, column: 40, scope: !7719)
!7724 = !DILocalVariable(name: "data_", arg: 3, scope: !7719, file: !3, line: 1691, type: !1546)
!7725 = !DILocation(line: 1691, column: 61, scope: !7719)
!7726 = !DILocalVariable(name: "wi", scope: !7719, file: !3, line: 1693, type: !2913)
!7727 = !DILocation(line: 1693, column: 26, scope: !7719)
!7728 = !DILocation(line: 1693, column: 57, scope: !7719)
!7729 = !DILocation(line: 1693, column: 31, scope: !7719)
!7730 = !DILocalVariable(name: "data", scope: !7719, file: !3, line: 1694, type: !2932)
!7731 = !DILocation(line: 1694, column: 21, scope: !7719)
!7732 = !DILocation(line: 1694, column: 49, scope: !7719)
!7733 = !DILocation(line: 1694, column: 53, scope: !7719)
!7734 = !DILocation(line: 1694, column: 28, scope: !7719)
!7735 = !DILocalVariable(name: "t", scope: !7719, file: !3, line: 1695, type: !1565)
!7736 = !DILocation(line: 1695, column: 8, scope: !7719)
!7737 = !DILocation(line: 1695, column: 13, scope: !7719)
!7738 = !DILocation(line: 1695, column: 12, scope: !7719)
!7739 = !DILocation(line: 1698, column: 7, scope: !7740)
!7740 = distinct !DILexicalBlock(scope: !7719, file: !3, line: 1698, column: 7)
!7741 = !DILocation(line: 1698, column: 11, scope: !7740)
!7742 = !DILocation(line: 1698, column: 7, scope: !7719)
!7743 = !DILocation(line: 1701, column: 12, scope: !7744)
!7744 = distinct !DILexicalBlock(scope: !7745, file: !3, line: 1701, column: 11)
!7745 = distinct !DILexicalBlock(scope: !7740, file: !3, line: 1699, column: 5)
!7746 = !DILocation(line: 1701, column: 11, scope: !7745)
!7747 = !DILocation(line: 1702, column: 2, scope: !7744)
!7748 = !DILocation(line: 1703, column: 11, scope: !7745)
!7749 = !DILocation(line: 1703, column: 9, scope: !7745)
!7750 = !DILocation(line: 1704, column: 5, scope: !7745)
!7751 = !DILocation(line: 1706, column: 11, scope: !7719)
!7752 = !DILocation(line: 1706, column: 3, scope: !7719)
!7753 = !DILocation(line: 1711, column: 8, scope: !7754)
!7754 = distinct !DILexicalBlock(scope: !7719, file: !3, line: 1707, column: 5)
!7755 = !DILocation(line: 1711, column: 22, scope: !7754)
!7756 = !DILocation(line: 1712, column: 7, scope: !7754)
!7757 = !DILocalVariable(name: "vuse", scope: !7758, file: !3, line: 1718, type: !2899)
!7758 = distinct !DILexicalBlock(scope: !7754, file: !3, line: 1715, column: 7)
!7759 = !DILocation(line: 1718, column: 16, scope: !7758)
!7760 = !DILocalVariable(name: "op", scope: !7758, file: !3, line: 1719, type: !1565)
!7761 = !DILocation(line: 1719, column: 7, scope: !7758)
!7762 = !DILocation(line: 1724, column: 6, scope: !7763)
!7763 = distinct !DILexicalBlock(scope: !7758, file: !3, line: 1724, column: 6)
!7764 = !DILocation(line: 1724, column: 12, scope: !7763)
!7765 = !DILocation(line: 1724, column: 17, scope: !7763)
!7766 = !DILocation(line: 1724, column: 6, scope: !7758)
!7767 = !DILocation(line: 1725, column: 4, scope: !7763)
!7768 = !DILocation(line: 1728, column: 22, scope: !7769)
!7769 = distinct !DILexicalBlock(scope: !7758, file: !3, line: 1728, column: 6)
!7770 = !DILocation(line: 1728, column: 28, scope: !7769)
!7771 = !DILocation(line: 1728, column: 6, scope: !7769)
!7772 = !DILocation(line: 1728, column: 6, scope: !7758)
!7773 = !DILocation(line: 1729, column: 4, scope: !7769)
!7774 = !DILocation(line: 1731, column: 25, scope: !7758)
!7775 = !DILocation(line: 1731, column: 31, scope: !7758)
!7776 = !DILocation(line: 1731, column: 9, scope: !7758)
!7777 = !DILocation(line: 1731, column: 7, scope: !7758)
!7778 = !DILocation(line: 1732, column: 6, scope: !7779)
!7779 = distinct !DILexicalBlock(scope: !7758, file: !3, line: 1732, column: 6)
!7780 = !DILocation(line: 1732, column: 11, scope: !7779)
!7781 = !DILocation(line: 1732, column: 6, scope: !7758)
!7782 = !DILocation(line: 1733, column: 4, scope: !7779)
!7783 = !DILocation(line: 1735, column: 7, scope: !7758)
!7784 = !DILocation(line: 1735, column: 5, scope: !7758)
!7785 = !DILocation(line: 1736, column: 6, scope: !7786)
!7786 = distinct !DILexicalBlock(scope: !7758, file: !3, line: 1736, column: 6)
!7787 = !DILocation(line: 1736, column: 11, scope: !7786)
!7788 = !DILocation(line: 1736, column: 8, scope: !7786)
!7789 = !DILocation(line: 1737, column: 6, scope: !7786)
!7790 = !DILocation(line: 1737, column: 10, scope: !7786)
!7791 = !DILocation(line: 1736, column: 6, scope: !7758)
!7792 = !DILocation(line: 1738, column: 4, scope: !7786)
!7793 = !DILocation(line: 1741, column: 6, scope: !7758)
!7794 = !DILocation(line: 1741, column: 4, scope: !7758)
!7795 = !DILocation(line: 1743, column: 7, scope: !7758)
!7796 = !DILocation(line: 1748, column: 11, scope: !7797)
!7797 = distinct !DILexicalBlock(scope: !7754, file: !3, line: 1748, column: 11)
!7798 = !DILocation(line: 1748, column: 17, scope: !7797)
!7799 = !DILocation(line: 1748, column: 11, scope: !7754)
!7800 = !DILocation(line: 1749, column: 22, scope: !7797)
!7801 = !DILocation(line: 1750, column: 8, scope: !7797)
!7802 = !DILocation(line: 1750, column: 14, scope: !7797)
!7803 = !DILocation(line: 1749, column: 9, scope: !7797)
!7804 = !DILocation(line: 1751, column: 16, scope: !7805)
!7805 = distinct !DILexicalBlock(scope: !7797, file: !3, line: 1751, column: 16)
!7806 = !DILocation(line: 1751, column: 22, scope: !7805)
!7807 = !DILocation(line: 1751, column: 16, scope: !7797)
!7808 = !DILocation(line: 1752, column: 22, scope: !7805)
!7809 = !DILocation(line: 1753, column: 8, scope: !7805)
!7810 = !DILocation(line: 1753, column: 14, scope: !7805)
!7811 = !DILocation(line: 1752, column: 9, scope: !7805)
!7812 = !DILocation(line: 1754, column: 8, scope: !7754)
!7813 = !DILocation(line: 1754, column: 22, scope: !7754)
!7814 = !DILocation(line: 1755, column: 7, scope: !7754)
!7815 = !DILocation(line: 1762, column: 11, scope: !7816)
!7816 = distinct !DILexicalBlock(scope: !7754, file: !3, line: 1762, column: 11)
!7817 = !DILocation(line: 1762, column: 43, scope: !7816)
!7818 = !DILocation(line: 1762, column: 11, scope: !7754)
!7819 = !DILocation(line: 1763, column: 3, scope: !7816)
!7820 = !DILocation(line: 1763, column: 17, scope: !7816)
!7821 = !DILocation(line: 1763, column: 2, scope: !7816)
!7822 = !DILocation(line: 1764, column: 7, scope: !7754)
!7823 = !DILocation(line: 1767, column: 11, scope: !7824)
!7824 = distinct !DILexicalBlock(scope: !7754, file: !3, line: 1767, column: 11)
!7825 = !DILocation(line: 1767, column: 11, scope: !7754)
!7826 = !DILocation(line: 1768, column: 3, scope: !7824)
!7827 = !DILocation(line: 1768, column: 17, scope: !7824)
!7828 = !DILocation(line: 1768, column: 2, scope: !7824)
!7829 = !DILocation(line: 1769, column: 7, scope: !7754)
!7830 = !DILocation(line: 1772, column: 3, scope: !7719)
!7831 = !DILocation(line: 1773, column: 1, scope: !7719)
!7832 = distinct !DISubprogram(name: "single_succ_edge", scope: !135, file: !135, line: 643, type: !7833, scopeLine: 644, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!7833 = !DISubroutineType(types: !7834)
!7834 = !{!1875, !7487}
!7835 = !DILocalVariable(name: "bb", arg: 1, scope: !7832, file: !135, line: 643, type: !7487)
!7836 = !DILocation(line: 643, column: 37, scope: !7832)
!7837 = !DILocation(line: 645, column: 3, scope: !7832)
!7838 = !DILocation(line: 646, column: 10, scope: !7832)
!7839 = !DILocation(line: 646, column: 3, scope: !7832)
!7840 = distinct !DISubprogram(name: "single_succ_p", scope: !135, file: !135, line: 626, type: !7841, scopeLine: 627, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!7841 = !DISubroutineType(types: !7842)
!7842 = !{!1685, !7487}
!7843 = !DILocalVariable(name: "bb", arg: 1, scope: !7840, file: !135, line: 626, type: !7487)
!7844 = !DILocation(line: 626, column: 34, scope: !7840)
!7845 = !DILocation(line: 628, column: 10, scope: !7840)
!7846 = !DILocation(line: 628, column: 33, scope: !7840)
!7847 = !DILocation(line: 628, column: 3, scope: !7840)
!7848 = distinct !DISubprogram(name: "is_gimple_call", scope: !378, file: !378, line: 1870, type: !3717, scopeLine: 1871, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!7849 = !DILocalVariable(name: "gs", arg: 1, scope: !7848, file: !378, line: 1870, type: !3315)
!7850 = !DILocation(line: 1870, column: 30, scope: !7848)
!7851 = !DILocation(line: 1872, column: 23, scope: !7848)
!7852 = !DILocation(line: 1872, column: 10, scope: !7848)
!7853 = !DILocation(line: 1872, column: 27, scope: !7848)
!7854 = !DILocation(line: 1872, column: 3, scope: !7848)
!7855 = distinct !DISubprogram(name: "warn_uninit", scope: !3, file: !3, line: 1646, type: !7856, scopeLine: 1647, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!7856 = !DISubroutineType(types: !7857)
!7857 = !{null, !1565, !1769, !1546}
!7858 = !DILocalVariable(name: "t", arg: 1, scope: !7855, file: !3, line: 1646, type: !1565)
!7859 = !DILocation(line: 1646, column: 19, scope: !7855)
!7860 = !DILocalVariable(name: "gmsgid", arg: 2, scope: !7855, file: !3, line: 1646, type: !1769)
!7861 = !DILocation(line: 1646, column: 34, scope: !7855)
!7862 = !DILocalVariable(name: "data", arg: 3, scope: !7855, file: !3, line: 1646, type: !1546)
!7863 = !DILocation(line: 1646, column: 48, scope: !7855)
!7864 = !DILocalVariable(name: "var", scope: !7855, file: !3, line: 1648, type: !1565)
!7865 = !DILocation(line: 1648, column: 8, scope: !7855)
!7866 = !DILocation(line: 1648, column: 14, scope: !7855)
!7867 = !DILocalVariable(name: "context", scope: !7855, file: !3, line: 1649, type: !1895)
!7868 = !DILocation(line: 1649, column: 10, scope: !7855)
!7869 = !DILocation(line: 1649, column: 29, scope: !7855)
!7870 = !DILocation(line: 1649, column: 20, scope: !7855)
!7871 = !DILocalVariable(name: "location", scope: !7855, file: !3, line: 1650, type: !1693)
!7872 = !DILocation(line: 1650, column: 14, scope: !7855)
!7873 = !DILocalVariable(name: "xloc", scope: !7855, file: !3, line: 1651, type: !7874)
!7874 = !DIDerivedType(tag: DW_TAG_typedef, name: "expanded_location", file: !1694, line: 52, baseType: !7875)
!7875 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1694, line: 40, size: 192, elements: !7876)
!7876 = !{!7877, !7878, !7879, !7880}
!7877 = !DIDerivedType(tag: DW_TAG_member, name: "file", scope: !7875, file: !1694, line: 43, baseType: !1769, size: 64)
!7878 = !DIDerivedType(tag: DW_TAG_member, name: "line", scope: !7875, file: !1694, line: 46, baseType: !1662, size: 32, offset: 64)
!7879 = !DIDerivedType(tag: DW_TAG_member, name: "column", scope: !7875, file: !1694, line: 48, baseType: !1662, size: 32, offset: 96)
!7880 = !DIDerivedType(tag: DW_TAG_member, name: "sysp", scope: !7875, file: !1694, line: 51, baseType: !1685, size: 8, offset: 128)
!7881 = !DILocation(line: 1651, column: 21, scope: !7855)
!7882 = !DILocalVariable(name: "floc", scope: !7855, file: !3, line: 1651, type: !7874)
!7883 = !DILocation(line: 1651, column: 27, scope: !7855)
!7884 = !DILocation(line: 1653, column: 31, scope: !7885)
!7885 = distinct !DILexicalBlock(scope: !7855, file: !3, line: 1653, column: 7)
!7886 = !DILocation(line: 1653, column: 8, scope: !7885)
!7887 = !DILocation(line: 1653, column: 7, scope: !7855)
!7888 = !DILocation(line: 1654, column: 5, scope: !7885)
!7889 = !DILocation(line: 1658, column: 7, scope: !7890)
!7890 = distinct !DILexicalBlock(scope: !7855, file: !3, line: 1658, column: 7)
!7891 = !DILocation(line: 1658, column: 7, scope: !7855)
!7892 = !DILocation(line: 1659, column: 5, scope: !7890)
!7893 = !DILocation(line: 1662, column: 22, scope: !7894)
!7894 = distinct !DILexicalBlock(scope: !7855, file: !3, line: 1662, column: 7)
!7895 = !DILocation(line: 1662, column: 7, scope: !7894)
!7896 = !DILocation(line: 1662, column: 7, scope: !7855)
!7897 = !DILocation(line: 1663, column: 5, scope: !7894)
!7898 = !DILocation(line: 1665, column: 15, scope: !7855)
!7899 = !DILocation(line: 1665, column: 23, scope: !7855)
!7900 = !DILocation(line: 1665, column: 31, scope: !7855)
!7901 = !DILocation(line: 1665, column: 55, scope: !7855)
!7902 = !DILocation(line: 1665, column: 34, scope: !7855)
!7903 = !DILocation(line: 1665, column: 14, scope: !7855)
!7904 = !DILocation(line: 1666, column: 26, scope: !7855)
!7905 = !DILocation(line: 1666, column: 9, scope: !7855)
!7906 = !DILocation(line: 1667, column: 9, scope: !7855)
!7907 = !DILocation(line: 1665, column: 12, scope: !7855)
!7908 = !DILocation(line: 1668, column: 27, scope: !7855)
!7909 = !DILocation(line: 1668, column: 10, scope: !7855)
!7910 = !DILocation(line: 1669, column: 27, scope: !7855)
!7911 = !DILocation(line: 1669, column: 10, scope: !7855)
!7912 = !DILocation(line: 1670, column: 19, scope: !7913)
!7913 = distinct !DILexicalBlock(scope: !7855, file: !3, line: 1670, column: 7)
!7914 = !DILocation(line: 1670, column: 49, scope: !7913)
!7915 = !DILocation(line: 1670, column: 57, scope: !7913)
!7916 = !DILocation(line: 1670, column: 7, scope: !7913)
!7917 = !DILocation(line: 1670, column: 7, scope: !7855)
!7918 = !DILocation(line: 1672, column: 7, scope: !7919)
!7919 = distinct !DILexicalBlock(scope: !7913, file: !3, line: 1671, column: 5)
!7920 = !DILocation(line: 1672, column: 29, scope: !7919)
!7921 = !DILocation(line: 1674, column: 16, scope: !7922)
!7922 = distinct !DILexicalBlock(scope: !7919, file: !3, line: 1674, column: 11)
!7923 = !DILocation(line: 1674, column: 29, scope: !7922)
!7924 = !DILocation(line: 1674, column: 21, scope: !7922)
!7925 = !DILocation(line: 1675, column: 4, scope: !7922)
!7926 = !DILocation(line: 1675, column: 12, scope: !7922)
!7927 = !DILocation(line: 1675, column: 24, scope: !7922)
!7928 = !DILocation(line: 1675, column: 17, scope: !7922)
!7929 = !DILocation(line: 1676, column: 4, scope: !7922)
!7930 = !DILocation(line: 1676, column: 12, scope: !7922)
!7931 = !DILocation(line: 1676, column: 19, scope: !7922)
!7932 = !DILocation(line: 1676, column: 17, scope: !7922)
!7933 = !DILocation(line: 1674, column: 11, scope: !7919)
!7934 = !DILocation(line: 1677, column: 10, scope: !7922)
!7935 = !DILocation(line: 1677, column: 63, scope: !7922)
!7936 = !DILocation(line: 1677, column: 2, scope: !7922)
!7937 = !DILocation(line: 1678, column: 5, scope: !7919)
!7938 = !DILocation(line: 1679, column: 1, scope: !7855)
!7939 = distinct !DISubprogram(name: "gimple_has_location", scope: !378, file: !378, line: 1165, type: !3717, scopeLine: 1166, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!7940 = !DILocalVariable(name: "g", arg: 1, scope: !7939, file: !378, line: 1165, type: !3315)
!7941 = !DILocation(line: 1165, column: 35, scope: !7939)
!7942 = !DILocation(line: 1167, column: 27, scope: !7939)
!7943 = !DILocation(line: 1167, column: 10, scope: !7939)
!7944 = !DILocation(line: 1167, column: 30, scope: !7939)
!7945 = !DILocation(line: 1167, column: 3, scope: !7939)
!7946 = distinct !DISubprogram(name: "gimple_location", scope: !378, file: !378, line: 1139, type: !7947, scopeLine: 1140, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!7947 = !DISubroutineType(types: !7948)
!7948 = !{!1693, !3315}
!7949 = !DILocalVariable(name: "g", arg: 1, scope: !7946, file: !378, line: 1139, type: !3315)
!7950 = !DILocation(line: 1139, column: 31, scope: !7946)
!7951 = !DILocation(line: 1141, column: 10, scope: !7946)
!7952 = !DILocation(line: 1141, column: 13, scope: !7946)
!7953 = !DILocation(line: 1141, column: 20, scope: !7946)
!7954 = !DILocation(line: 1141, column: 3, scope: !7946)
!7955 = distinct !DISubprogram(name: "warn_uninitialized_phi", scope: !3, file: !3, line: 1779, type: !3954, scopeLine: 1780, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2978)
!7956 = !DILocalVariable(name: "phi", arg: 1, scope: !7955, file: !3, line: 1779, type: !1895)
!7957 = !DILocation(line: 1779, column: 32, scope: !7955)
!7958 = !DILocalVariable(name: "i", scope: !7955, file: !3, line: 1781, type: !2040)
!7959 = !DILocation(line: 1781, column: 10, scope: !7955)
!7960 = !DILocalVariable(name: "n", scope: !7955, file: !3, line: 1781, type: !2040)
!7961 = !DILocation(line: 1781, column: 13, scope: !7955)
!7962 = !DILocation(line: 1781, column: 38, scope: !7955)
!7963 = !DILocation(line: 1781, column: 17, scope: !7955)
!7964 = !DILocation(line: 1784, column: 42, scope: !7965)
!7965 = distinct !DILexicalBlock(scope: !7955, file: !3, line: 1784, column: 7)
!7966 = !DILocation(line: 1784, column: 23, scope: !7965)
!7967 = !DILocation(line: 1784, column: 8, scope: !7965)
!7968 = !DILocation(line: 1784, column: 7, scope: !7955)
!7969 = !DILocation(line: 1785, column: 5, scope: !7965)
!7970 = !DILocation(line: 1787, column: 10, scope: !7971)
!7971 = distinct !DILexicalBlock(scope: !7955, file: !3, line: 1787, column: 3)
!7972 = !DILocation(line: 1787, column: 8, scope: !7971)
!7973 = !DILocation(line: 1787, column: 15, scope: !7974)
!7974 = distinct !DILexicalBlock(scope: !7971, file: !3, line: 1787, column: 3)
!7975 = !DILocation(line: 1787, column: 19, scope: !7974)
!7976 = !DILocation(line: 1787, column: 17, scope: !7974)
!7977 = !DILocation(line: 1787, column: 3, scope: !7971)
!7978 = !DILocalVariable(name: "op", scope: !7979, file: !3, line: 1789, type: !1565)
!7979 = distinct !DILexicalBlock(scope: !7974, file: !3, line: 1788, column: 5)
!7980 = !DILocation(line: 1789, column: 12, scope: !7979)
!7981 = !DILocation(line: 1789, column: 37, scope: !7979)
!7982 = !DILocation(line: 1789, column: 42, scope: !7979)
!7983 = !DILocation(line: 1789, column: 17, scope: !7979)
!7984 = !DILocation(line: 1790, column: 11, scope: !7985)
!7985 = distinct !DILexicalBlock(scope: !7979, file: !3, line: 1790, column: 11)
!7986 = !DILocation(line: 1790, column: 26, scope: !7985)
!7987 = !DILocation(line: 1790, column: 11, scope: !7979)
!7988 = !DILocation(line: 1791, column: 15, scope: !7985)
!7989 = !DILocation(line: 1791, column: 2, scope: !7985)
!7990 = !DILocation(line: 1793, column: 5, scope: !7979)
!7991 = !DILocation(line: 1787, column: 22, scope: !7974)
!7992 = !DILocation(line: 1787, column: 3, scope: !7974)
!7993 = distinct !{!7993, !7977, !7994}
!7994 = !DILocation(line: 1793, column: 5, scope: !7971)
!7995 = !DILocation(line: 1794, column: 1, scope: !7955)
